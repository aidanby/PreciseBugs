{"buggy_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Box_Pagination implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n    protected $per_page = 100;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    /**\n     * @return int\n     */\n    public function getPer_page()\n    {\n        return $this->per_page;\n    }\n\n    public function getSimpleResultSet($q, $values, $per_page = 100, $page = null)\n    {\n        if (is_null($page)){\n            $page = $_GET['page'] ?? 1;\n        }\n        $per_page = $_GET['per_page'] ?? $per_page;\n\n        $offset = ($page - 1) * $per_page;\n\n        $sql = $q;\n        $sql .= sprintf(' LIMIT %s,%s', $offset, $per_page);\n        $result = $this->di['db']->getAll($sql, $values);\n\n        $exploded = explode('FROM', $q);\n        $sql = 'SELECT count(1) FROM ' . $exploded[1];\n        $total = $this->di['db']->getCell($sql , $values);\n\n        $pages = ($per_page > 1) ? (int)ceil($total / $per_page) : 1;\n        return array(\n            \"pages\"             => $pages,\n            \"page\"              => $page,\n            \"per_page\"          => $per_page,\n            \"total\"             => $total,\n            \"list\"              => $result,\n        );\n    }\n\n    public function getAdvancedResultSet($q, $values, $per_page = 100)\n    {\n        $page = $page = $_GET['page'] ?? 1;\n        $per_page = $_GET['per_page'] ?? $per_page;\n\n        $offset = ($page - 1) * $per_page;\n        $q = str_replace('SELECT ', 'SELECT SQL_CALC_FOUND_ROWS ', $q);\n        $q .= sprintf(' LIMIT %s,%s', $offset, $per_page);\n        $result = $this->di['db']->getAll($q, $values);\n        $total = $this->di['db']->getCell('SELECT FOUND_ROWS();');\n\n        $pages = ($per_page > 1) ? (int)ceil($total / $per_page) : 1;\n        return array(\n            \"pages\"             => $pages,\n            \"page\"              => $page,\n            \"per_page\"          => $per_page,\n            \"total\"             => $total,\n            \"list\"              => $result,\n        );\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Client;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function approveClientEmailByHash($hash)\n    {\n        $db = $this->di['db'];\n        $result = $db->getRow('SELECT id, client_id FROM extension_meta WHERE extension = \"mod_client\" AND meta_key = \"confirm_email\" AND meta_value = :hash', [':hash' => $hash]);\n        if (!$result) {\n            throw new \\Box_Exception('Invalid email confirmation link');\n        }\n        $db->exec('UPDATE client SET email_approved = 1 WHERE id = :id', ['id' => $result['client_id']]);\n        $db->exec('DELETE FROM extension_meta WHERE id = :id', ['id' => $result['id']]);\n\n        return true;\n    }\n\n    public function generateEmailConfirmationLink($client_id)\n    {\n        $hash = strtolower($this->di['tools']->generatePassword(50));\n        $db = $this->di['db'];\n\n        $meta = $db->dispense('ExtensionMeta');\n        $meta->extension = 'mod_client';\n        $meta->client_id = $client_id;\n        $meta->meta_key = 'confirm_email';\n        $meta->meta_value = $hash;\n        $meta->created_at = date('Y-m-d H:i:s');\n        $meta->updated_at = date('Y-m-d H:i:s');\n        $db->store($meta);\n\n        return $this->di['tools']->url('/client/confirm-email/' . $hash);\n    }\n\n    public static function onAfterClientSignUp(\\Box_Event $event)\n    {\n        $di = $event->getDi();\n        $params = $event->getParameters();\n        $config = $di['mod_config']('client');\n        $emailService = $di['mod_service']('email');\n        try {\n            $email = [];\n            $email['to_client'] = $params['id'];\n            $email['code'] = 'mod_client_signup';\n            $email['password'] = __trans('The password you chose when creating your account.');\n            $email['require_email_confirmation'] = false;\n            if (isset($config['require_email_confirmation']) && $config['require_email_confirmation']) {\n                $clientService = $di['mod_service']('client');\n                $email['require_email_confirmation'] = true;\n                $email['email_confirmation_link'] = $clientService->generateEmailConfirmationLink($params['id']);\n            }\n\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n\n        return true;\n    }\n\n    public function getSearchQuery($data, $selectStmt = 'SELECT c.*')\n    {\n        $sql = $selectStmt;\n        $sql .= ' FROM client as c left join client_group as cg on c.client_group_id = cg.id';\n\n        $search = (isset($data['search']) && !empty($data['search'])) ? $data['search'] : null;\n        $client_id = (isset($data['client_id']) && !empty($data['client_id'])) ? $data['client_id'] : null;\n        $group_id = (isset($data['group_id']) && !empty($data['group_id'])) ? $data['group_id'] : null;\n        $id = (isset($data['id']) && !empty($data['id'])) ? $data['id'] : null;\n        $status = (isset($data['status']) && !empty($data['status'])) ? $data['status'] : null;\n        $name = (isset($data['name']) && !empty($data['name'])) ? $data['name'] : null;\n        $company = (isset($data['company']) && !empty($data['company'])) ? $data['company'] : null;\n        $email = (isset($data['email']) && !empty($data['email'])) ? $data['email'] : null;\n        $created_at = (isset($data['created_at']) && !empty($data['created_at'])) ? $data['created_at'] : null;\n        $date_from = (isset($data['date_from']) && !empty($data['date_from'])) ? $data['date_from'] : null;\n        $date_to = (isset($data['date_to']) && !empty($data['date_to'])) ? $data['date_to'] : null;\n\n        $where = [];\n        $params = [];\n        if ($id) {\n            $where[] = 'c.id = :client_id or c.aid = :alt_client_id';\n            $params[':client_id'] = $id;\n            $params[':alt_client_id'] = $id;\n        }\n\n        if ($name) {\n            $where[] = '(c.first_name LIKE :first_name or c.last_name LIKE :last_name )';\n            $name = '%' . $name . '%';\n            $params[':first_name'] = $name;\n            $params[':last_name'] = $name;\n        }\n\n        if ($email) {\n            $where[] = 'c.email LIKE :email';\n            $params[':email'] = '%' . $email . '%';\n        }\n\n        if ($company) {\n            $where[] = 'c.company LIKE :company';\n            $params[':company'] = '%' . $company . '%';\n        }\n\n        if ($status) {\n            $where[] = 'c.status = :status';\n            $params[':status'] = $status;\n        }\n\n        if ($group_id) {\n            $where[] = 'c.client_group_id = :group_id';\n            $params[':group_id'] = $group_id;\n        }\n\n        if ($created_at) {\n            $where[] = \"DATE_FORMAT(c.created_at, '%Y-%m-%d') = :created_at\";\n            $params[':created_at'] = date('Y-m-d', strtotime($created_at));\n        }\n\n        if ($date_from) {\n            $where[] = 'UNIX_TIMESTAMP(c.created_at) >= :date_from';\n            $params[':date_from'] = strtotime($date_from);\n        }\n\n        if ($date_to) {\n            $where[] = 'UNIX_TIMESTAMP(c.created_at) <= :date_from';\n            $params[':date_to'] = strtotime($date_to);\n        }\n\n        // smartSearch\n        if ($search) {\n            if (is_numeric($search)) {\n                $where[] = 'c.id = :cid or c.aid = :caid';\n                $params[':cid'] = $search;\n                $params[':caid'] = $search;\n            } else {\n                $where[] = \"c.company LIKE :s_company OR c.first_name LIKE :s_first_time OR c.last_name LIKE :s_last_name OR c.email LIKE :s_email OR CONCAT(c.first_name,  ' ', c.last_name ) LIKE  :full_name\";\n                $search = '%' . $search . '%';\n                $params[':s_company'] = $search;\n                $params[':s_first_time'] = $search;\n                $params[':s_last_name'] = $search;\n                $params[':s_email'] = $search;\n                $params[':full_name'] = $search;\n            }\n        }\n\n        if (!empty($where)) {\n            $sql .= ' WHERE ' . implode(' AND ', $where);\n        }\n        $sql = $sql . ' ORDER BY c.created_at desc';\n\n        return [$sql, $params];\n    }\n\n    public function getPairs($data)\n    {\n        $limit = $data['per_page'] ?? 30;\n        [$sql, $params] = $this->getSearchQuery($data, \"SELECT c.id, CONCAT_WS('', c.first_name,  ' ', c.last_name) as full_name\");\n        $sql = $sql . ' LIMIT ' . $limit;\n\n        return $this->di['db']->getAssoc($sql, $params);\n    }\n\n    public function toSessionArray(\\Model_Client $model)\n    {\n        return [\n            'id' => $model->id,\n            'email' => $model->email,\n            'name' => $model->getFullName(),\n            'role' => $model->role,\n        ];\n    }\n\n    public function emailAlreadyRegistered($new_email, \\Model_Client $model = null)\n    {\n        if ($model && $model->email == $new_email) {\n            return false;\n        }\n\n        $result = $this->di['db']->findOne('Client', 'email = ?', [$new_email]);\n\n        return ($result) ? true : false;\n    }\n\n    public function canChangeCurrency(\\Model_Client $model, $currency = null)\n    {\n        if (!$model->currency) {\n            return true;\n        }\n\n        if ($model->currency == $currency) {\n            return false;\n        }\n\n        $invoice = $this->di['db']->findOne('Invoice', 'client_id = :client_id', [':client_id' => $model->id]);\n        if ($invoice instanceof \\Model_Invoice) {\n            throw new \\Box_Exception('Currency can not be changed. Client already have invoices issued.');\n        }\n\n        $order = $this->di['db']->findOne('ClientOrder', 'client_id = :client_id', [':client_id' => $model->id]);\n        if ($order instanceof \\Model_ClientOrder) {\n            throw new \\Box_Exception('Currency can not be changed. Client already have orders.');\n        }\n\n        return true;\n    }\n\n    public function addFunds(\\Model_Client $client, $amount, $description, array $data = [])\n    {\n        if (!$client->currency) {\n            throw new \\Box_Exception('Define clients currency before adding funds.');\n        }\n\n        if (!is_numeric($amount)) {\n            throw new \\Box_Exception('Funds amount is not valid');\n        }\n\n        if (empty($description)) {\n            throw new \\Box_Exception('Funds description is not valid');\n        }\n\n        $credit = $this->di['db']->dispense('ClientBalance');\n\n        $credit->client_id = $client->id;\n        $credit->type = $data['type'] ?? 'gift';\n        $credit->rel_id = $data['rel_id'] ?? null;\n        $credit->description = $description;\n        $credit->amount = $amount;\n        $credit->created_at = date('Y-m-d H:i:s');\n        $credit->updated_at = date('Y-m-d H:i:s');\n\n        $this->di['db']->store($credit);\n\n        return true;\n    }\n\n    public function getExpiredPasswordReminders()\n    {\n        $expire_after_hours = 2;\n        $expired = $this->di['db']->find('ClientPasswordReset', 'UNIX_TIMESTAMP() - ? > UNIX_TIMESTAMP(created_at)', [$expire_after_hours * 60 * 60]);\n\n        return $expired;\n    }\n\n    public function getHistorySearchQuery($data)\n    {\n        $q = 'SELECT ach.*, c.first_name, c.last_name, c.email\n              FROM activity_client_history as ach\n                LEFT JOIN client as c on ach.client_id = c.id ';\n\n        $search = $data['search'] ?? null;\n        $client_id = $data['client_id'] ?? null;\n\n        $where = [];\n        $params = [];\n        if ($search) {\n            $where[] = 'c.first_name LIKE :first_name OR c.last_name LIKE :last_name OR c.id LIKE :id';\n            $params[':first_name'] = '%' . $search . '%';\n            $params[':last_name'] = '%' . $search . '%';\n            $params[':id'] = $search;\n        }\n\n        if ($client_id) {\n            $where[] = 'ach.client_id = :client_id';\n            $params[':client_id'] = $client_id;\n        }\n\n        if (!empty($where)) {\n            $q .= ' WHERE ' . implode(' AND ', $where);\n        }\n\n        $q .= ' ORDER BY ach.id desc';\n\n        return [$q, $params];\n    }\n\n    public function counter()\n    {\n        $sql = 'SELECT status, COUNT(id) as counter\n                FROM client\n                group by status';\n        $data = $this->di['db']->getAssoc($sql);\n\n        return [\n            'total' => array_sum($data),\n            \\Model_Client::ACTIVE => $data[\\Model_Client::ACTIVE] ?? 0,\n            \\Model_Client::SUSPENDED => $data[\\Model_Client::SUSPENDED] ?? 0,\n            \\Model_Client::CANCELED => $data[\\Model_Client::CANCELED] ?? 0,\n        ];\n    }\n\n    public function getGroupPairs()\n    {\n        $sql = 'SELECT id, title\n                FROM client_group';\n\n        return $this->di['db']->getAssoc($sql);\n    }\n\n    public function clientAlreadyExists($email)\n    {\n        $client = $this->di['db']->findOne('Client', 'email = :email ', [':email' => $email]);\n\n        return $client instanceof \\Model_Client;\n    }\n\n    public function getByLoginDetails($email, $password)\n    {\n        $client = $this->di['db']->findOne('Client', 'email = ? and pass = ? and status = ?', [$email, $password, \\Model_Client::ACTIVE]);\n\n        return $client;\n    }\n\n    public function toApiArray(\\Model_Client $model, $deep = false, $identity = null)\n    {\n        $details = [\n            'id' => $model->id,\n            'aid' => $model->aid,\n            'email' => $model->email,\n            'type' => $model->type,\n            'group_id' => $model->client_group_id,\n            'company' => $model->company,\n            'company_vat' => $model->company_vat,\n            'company_number' => $model->company_number,\n            'first_name' => $model->first_name,\n            'last_name' => $model->last_name,\n            'gender' => $model->gender,\n            'birthday' => $model->birthday,\n            'phone_cc' => $model->phone_cc,\n            'phone' => $model->phone,\n            'address_1' => $model->address_1,\n            'address_2' => $model->address_2,\n            'city' => $model->city,\n            'state' => $model->state,\n            'postcode' => $model->postcode,\n            'country' => $model->country,\n            'currency' => $model->currency,\n            'notes' => $model->notes,\n            'created_at' => $model->created_at,\n            'document_nr' => $model->document_nr,\n        ];\n\n        if ($deep) {\n            $details['balance'] = $this->getClientBalance($model);\n        }\n\n        $m = $this->di['db']->toArray($model);\n        for ($i = 1; $i < 11; ++$i) {\n            $k = 'custom_' . $i;\n            if (isset($m[$k]) && !empty($m[$k])) {\n                $details[$k] = $m[$k];\n            }\n        }\n\n        $clientGroup = $this->di['db']->load('ClientGroup', $model->client_group_id);\n\n        if ($identity instanceof \\Model_Admin) {\n            $details['auth_type'] = $model->auth_type;\n            $details['api_token'] = $model->api_token;\n            $details['ip'] = $model->ip;\n            $details['status'] = $model->status;\n            $details['tax_exempt'] = $model->tax_exempt;\n            $details['group'] = ($clientGroup) ? $clientGroup->title : null;\n            $details['updated_at'] = $model->updated_at;\n            $details['email_approved'] = $model->email_approved;\n        }\n\n        return $details;\n    }\n\n    public function getClientBalance(\\Model_Client $c)\n    {\n        $sql = 'SELECT SUM(amount) as client_total\n                FROM client_balance\n                WHERE client_id = ?\n                GROUP BY client_id';\n\n        $balance = $this->di['db']->getCell($sql, [$c->id]);\n\n        return $balance;\n    }\n\n    public function get($data)\n    {\n        if (!isset($data['id']) && !isset($data['email'])) {\n            throw new \\Box_Exception('Client ID or email is required');\n        }\n\n        $db = $this->di['db'];\n        $client = null;\n        if (isset($data['id'])) {\n            $client = $db->findOne('Client', 'id = ?', [$data['id']]);\n        }\n\n        if (!$client && isset($data['email'])) {\n            $client = $db->findOne('Client', 'email = ?', [$data['email']]);\n        }\n\n        if (!$client instanceof \\Model_Client) {\n            throw new \\Box_Exception('Client not found');\n        }\n\n        return $client;\n    }\n\n    public function isClientTaxable(\\Model_Client $model)\n    {\n        $systemService = $this->di['mod_service']('system');\n\n        if (!$systemService->getParamValue('tax_enabled', false)) {\n            return false;\n        }\n\n        if ($model->tax_exempt) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function createGroup(array $data)\n    {\n        $systemService = $this->di['mod_service']('system');\n        $systemService->checkLimits('Model_ClientGroup', 2);\n\n        $model = $this->di['db']->dispense('ClientGroup');\n\n        $model->title = $data['title'];\n        $model->updated_at = date('Y-m-d H:i:s');\n        $model->created_at = date('Y-m-d H:i:s');\n\n        $group_id = $this->di['db']->store($model);\n\n        $this->di['logger']->info('Created new client group #%s', $model->id);\n\n        return $group_id;\n    }\n\n    public function deleteGroup(\\Model_ClientGroup $model)\n    {\n        $client = $this->di['db']->findOne('Client', 'client_group_id = ?', [$model->id]);\n        if ($client) {\n            throw new \\Box_Exception('Can not remove group with clients');\n        }\n\n        $this->di['db']->trash($model);\n        $this->di['logger']->info('Removed client group #%s', $model->id);\n\n        return true;\n    }\n\n    private function createClient(array $data)\n    {\n        $password = $data['password'] ?? uniqid();\n\n        $client = $this->di['db']->dispense('Client');\n\n        $client->auth_type = $data['auth_type'] ?? null;\n        $client->email = strtolower(trim($data['email'] ?? null));\n        $client->first_name = ucwords($data['first_name'] ?? null);\n        $client->pass = $this->di['password']->hashIt($password);\n\n        $phoneCC = $data['phone_cc'] ?? $client->phone_cc;\n        if (!empty($phoneCC)) {\n            $client->phone_cc = intval($phoneCC);\n        }\n\n        $client->aid = $data['aid'] ?? null;\n        $client->last_name = $data['last_name'] ?? null;\n        $client->client_group_id = !empty($data['group_id']) ? $data['group_id'] : null;\n        $client->status = $data['status'] ?? null;\n        $client->gender = $data['gender'] ?? null;\n        $client->birthday = $data['birthday'] ?? null;\n        $client->phone = $data['phone'] ?? null;\n        $client->company = $data['company'] ?? null;\n        $client->company_vat = $data['company_vat'] ?? null;\n        $client->company_number = $data['company_number'] ?? null;\n        $client->type = $data['type'] ?? null;\n        $client->address_1 = $data['address_1'] ?? null;\n        $client->address_2 = $data['address_2'] ?? null;\n        $client->city = $data['city'] ?? null;\n        $client->state = $data['state'] ?? null;\n        $client->postcode = $data['postcode'] ?? null;\n        $client->country = $data['country'] ?? null;\n        $client->document_type = $data['document_type'] ?? null;\n        $client->document_nr = $data['document_nr'] ?? null;\n        $client->notes = $data['notes'] ?? null;\n        $client->lang = $data['lang'] ?? null;\n        $client->currency = $data['currency'] ?? null;\n\n        $client->custom_1 = $data['custom_1'] ?? null;\n        $client->custom_2 = $data['custom_2'] ?? null;\n        $client->custom_3 = $data['custom_3'] ?? null;\n        $client->custom_4 = $data['custom_4'] ?? null;\n        $client->custom_5 = $data['custom_5'] ?? null;\n        $client->custom_6 = $data['custom_6'] ?? null;\n        $client->custom_7 = $data['custom_7'] ?? null;\n        $client->custom_8 = $data['custom_8'] ?? null;\n        $client->custom_9 = $data['custom_9'] ?? null;\n        $client->custom_10 = $data['custom_10'] ?? null;\n\n        $client->ip =  $data['ip'] ?? null;\n\n        $created_at =  $data['created_at'] ?? null;\n        $client->created_at = !empty($created_at) ? date('Y-m-d H:i:s', strtotime($created_at)) : date('Y-m-d H:i:s');\n        $client->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($client);\n\n        return $client;\n    }\n\n    public function adminCreateClient(array $data)\n    {\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminCreateClient', 'params' => $data]);\n        $client = $this->createClient($data);\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminCreateClient', 'params' => ['id' => $client->id, 'password' => $data['password']]]);\n        $this->di['logger']->info('Created new client #%s', $client->id);\n\n        return $client->id;\n    }\n\n    public function guestCreateClient(array $data)\n    {\n        $event_params = $data;\n        $event_params['ip'] = $this->di['request']->getClientAddress();\n        $this->di['events_manager']->fire(['event' => 'onBeforeClientSignUp', 'params' => $event_params]);\n\n        $data['ip'] = $this->di['request']->getClientAddress();\n        $data['status'] = \\Model_Client::ACTIVE;\n        $client = $this->createClient($data);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterClientSignUp', 'params' => ['id' => $client->id, 'password' => $data['password']]]);\n        $this->di['logger']->info('Client #%s signed up', $client->id);\n\n        return $client;\n    }\n\n    public function remove(\\Model_Client $model)\n    {\n        $service = $this->di['mod_service']('Order');\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Invoice');\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Support');\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Client', 'Balance');\n        $service->rmByClient($model);\n\n        $table = $this->di['table']('ActivityClientHistory');\n        $table->rmByClient($model);\n\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Email');\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Activity');\n        $service->rmByClient($model);\n\n        $table = $this->di['table']('ClientPasswordReset');\n        $table->rmByClient($model);\n\n        $pdo = $this->di['pdo'];\n        $stmt = $pdo->prepare('DELETE FROM extension_meta WHERE client_id = :id');\n        $stmt->execute(['id' => $model->id]);\n\n        $this->di['db']->trash($model);\n    }\n\n    public function authorizeClient($email, $plainTextPassword)\n    {\n        $model = $this->di['db']->findOne('Client', 'email = ? AND status = ?', [$email, \\Model_Client::ACTIVE]);\n        if (null == $model) {\n            return null;\n        }\n\n        $config = $this->di['mod_config']('client');\n        if (isset($config['require_email_confirmation']) && (int) $config['require_email_confirmation']) {\n            if (!$model->email_approved) {\n                $meta = $this->di['db']->findOne('ExtensionMeta', ' extension = \"mod_client\" AND meta_key = \"confirm_email\" AND client_id = :client_id', [':client_id' => $model->id]);\n                if (!is_null($meta)) {\n                    throw new \\Box_Exception('Please check your mailbox and confirm email address.');\n                } else {\n                    $this->sendEmailConfirmationForClient($model);\n                    throw new \\Box_Exception('Confirmation email was sent to your email address. Please click on link in it in order to verify your email.');\n                }\n            }\n        }\n\n        return $this->di['auth']->authorizeUser($model, $plainTextPassword);\n    }\n\n    private function sendEmailConfirmationForClient(\\Model_Client $client)\n    {\n        try {\n            $email = [];\n            $email['to_client'] = $client->id;\n            $email['code'] = 'mod_client_confirm';\n            $email['require_email_confirmation'] = true;\n            $email['email_confirmation_link'] = $this->generateEmailConfirmationLink($client->id);\n\n            $emailService = $this->di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public function canChangeEmail(\\Model_Client $client, $email)\n    {\n        $config = $this->di['mod_config']('client');\n\n        if (\n            $client->email != $email\n            && isset($config['disable_change_email'])\n            && $config['disable_change_email']\n        ) {\n            throw new \\Box_Exception('Email can not be changed');\n        }\n\n        return true;\n    }\n\n    public function checkExtraRequiredFields(array $checkArr)\n    {\n        $config = $this->di['mod_config']('client');\n        $required = $config['required'] ?? [];\n        foreach ($required as $field) {\n            if (!isset($checkArr[$field]) || empty($checkArr[$field])) {\n                $name = ucwords(str_replace('_', ' ', $field));\n                throw new \\Box_Exception('Field :field cannot be empty', [':field' => $name]);\n            }\n        }\n    }\n\n    public function checkCustomFields(array $checkArr)\n    {\n        $config = $this->di['mod_config']('client');\n        $customFields = $config['custom_fields'] ?? [];\n        foreach ($customFields as $cFieldName => $cField) {\n            $active = isset($cField['active']) && $cField['active'] ? true : false;\n            $required = isset($cField['required']) && $cField['required'] ? true : false;\n            if ($active && $required) {\n                if (!isset($checkArr[$cFieldName]) || empty($checkArr[$cFieldName])) {\n                    $name = isset($cField['title']) && !empty($cField['title']) ? $cField['title'] : ucwords(str_replace('_', ' ', $cFieldName));\n                    throw new \\Box_Exception('Field :field cannot be empty', [':field' => $name]);\n                }\n            }\n        }\n    }\n\n    public function exportCSV(array $headers)\n    {\n        if ($headers) {\n            // Prevent the password / salt columns from being exported\n            if (isset($headers['pass'])) {\n                unset($headers['pass']);\n            }\n            if (isset($headers['salt'])) {\n                unset($headers['salt']);\n            }\n        } else {\n            $headers = ['id', 'email', 'status', 'first_name', 'last_name', 'phone_cc', 'phone', 'company', 'company_vat', 'company_number', 'address_1', 'address_2', 'city', 'state', 'postcode', 'country', 'currency'];\n        }\n        return $this->di['table_export_csv']('client', 'clients.csv', $headers);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Theme\\Controller;\n\nclass Admin implements \\FOSSBilling\\InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function register(\\Box_App &$app)\n    {\n        $app->get('/theme/:theme', 'get_theme', ['theme' => '[a-z0-9-_]+'], static::class);\n        $app->post('/theme/:theme', 'save_theme_settings', ['theme' => '[a-z0-9-_]+'], static::class);\n    }\n\n    /**\n     * Save theme settings.\n     *\n     * @param string $code - client area theme code\n     *\n     */\n    public function save_theme_settings(\\Box_App $app, $theme)\n    {\n        $this->di['events_manager']->fire(['event' => 'onBeforeThemeSettingsSave', 'params' => $_POST]);\n\n        $api = $this->di['api_admin'];\n\n        $mod = $this->di['mod']('theme');\n        $service = $mod->getService();\n        $t = $service->getTheme($theme);\n\n        $isNewPreset = isset($_POST['save-current-setting']) ? (bool) $_POST['save-current-setting'] : false;\n        $preset = $service->getCurrentThemePreset($t);\n        if ($isNewPreset && isset($_POST['save-current-setting-preset']) && !empty($_POST['save-current-setting-preset'])) {\n            $preset = $_POST['save-current-setting-preset'];\n            $preset = str_replace(' ', '', $preset);\n            $service->setCurrentThemePreset($t, $preset);\n        }\n\n        unset($_POST['save-current-setting-preset']);\n        unset($_POST['save-current-setting']);\n\n        $error = null;\n        try {\n            if (!$t->isAssetsPathWritable()) {\n                throw new \\Box_Exception('Theme \":name\" assets folder is not writable. Files can not be uploaded and settings can not be saved. Set folder permissions to 777', [':name' => $t->getName()]);\n            }\n            $service->updateSettings($t, $preset, $_POST);\n            $service->uploadAssets($t, $_FILES);\n            $service->regenerateThemeCssAndJsFiles($t, $preset, $api);\n        } catch (\\Exception $e) {\n            error_log($e);\n            $error = $e->getMessage();\n        }\n\n        // optional data file\n        try {\n            $service->regenerateThemeSettingsDataFile($t);\n        } catch (\\Exception $e) {\n            error_log($e);\n            $error = $e->getMessage();\n        }\n\n        $red_url = '/theme/' . $theme;\n        if ($error) {\n            $red_url .= '?error=' . $error;\n        }\n        $app->redirect($red_url);\n    }\n\n    public function get_theme(\\Box_App $app, $theme)\n    {\n        $this->di['is_admin_logged'];\n\n        $mod = $this->di['mod']('theme');\n        $service = $mod->getService();\n        $t = $service->getTheme($theme);\n        $preset = $service->getCurrentThemePreset($t);\n        $html = $t->getSettingsPageHtml($theme);\n\n        $info = null;\n        if (!$t->isAssetsPathWritable()) {\n            $info = __trans('Theme \":name\" assets folder is not writable. Set folder :folder permissions to 777', [':name' => $t->getName(), ':folder' => $t->getPathAssets()]);\n        }\n\n        if (empty($html)) {\n            $info = __trans('Theme \":name\" is not configurable', [':name' => $t->getName()]);\n        }\n\n        $data = [\n            'info' => $info,\n            'error' => $_GET['error'] ?? null,\n            'theme_code' => $t->getName(),\n            'settings_html' => $html,\n            'uploaded' => $t->getUploadedAssets($theme),\n            'settings' => $service->getThemeSettings($t, $preset),\n            'current_preset' => $preset,\n            'presets' => $service->getThemePresets($t),\n            'snippets' => $t->getSnippets(),\n        ];\n\n        return $app->render('mod_theme_preset', $data);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Theme;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function getTheme($name)\n    {\n        $theme = new \\Box\\Mod\\Theme\\Model\\Theme($name);\n\n        return $theme;\n    }\n\n    public function getCurrentThemePreset(Model\\Theme $theme)\n    {\n        $current = $this->di['db']->getCell(\n            \"SELECT meta_value\n        FROM extension_meta\n        WHERE 1\n        AND extension = 'mod_theme'\n        AND rel_id = 'current'\n        AND rel_type = 'preset'\n        AND meta_key = :theme\",\n            [':theme' => $theme->getName()]\n        );\n        if (empty($current)) {\n            $current = $theme->getCurrentPreset();\n            $this->setCurrentThemePreset($theme, $current);\n        }\n\n        return $current;\n    }\n\n    public function setCurrentThemePreset(Model\\Theme $theme, $preset)\n    {\n        $params = ['theme' => $theme->getName(), 'preset' => $preset];\n        $updated = $this->di['db']->exec(\"\n            UPDATE extension_meta\n            SET meta_value = :preset\n            WHERE 1\n            AND extension = 'mod_theme'\n            AND rel_type = 'preset'\n            AND rel_id = 'current'\n            AND meta_key = :theme\n            LIMIT 1\n            \", $params);\n\n        if (!$updated) {\n            $updated = $this->di['db']->exec(\"\n            INSERT INTO extension_meta (\n                extension,\n                rel_type,\n                rel_id,\n                meta_value,\n                meta_key,\n                created_at,\n                updated_at\n            )\n            VALUES (\n                'mod_theme',\n                'preset',\n                'current',\n                :preset,\n                :theme,\n                NOW(),\n                NOW()\n            )\n            \", $params);\n        }\n\n        return true;\n    }\n\n    public function deletePreset(Model\\Theme $theme, $preset)\n    {\n        // delete settings\n        $this->di['db']->exec(\n            \"DELETE FROM extension_meta\n            WHERE extension = 'mod_theme'\n            AND rel_type = 'settings'\n            AND rel_id = :theme\n            AND meta_key = :preset\",\n            ['theme' => $theme->getName(), 'preset' => $preset]\n        );\n\n        // delete default preset\n        $this->di['db']->exec(\n            \"DELETE FROM extension_meta\n            WHERE extension = 'mod_theme'\n            AND rel_type = 'preset'\n            AND rel_id = 'current'\n            AND meta_key = :theme\",\n            ['theme' => $theme->getName()]\n        );\n\n        return true;\n    }\n\n    public function getThemePresets(Model\\Theme $theme)\n    {\n        $presets = $this->di['db']->getAssoc(\n            \"SELECT meta_key FROM extension_meta WHERE extension = 'mod_theme' AND rel_type = 'settings' AND rel_id = :key\",\n            ['key' => $theme->getName()]\n        );\n\n        // insert default presets to database\n        if (empty($presets)) {\n            $core_presets = $theme->getPresetsFromSettingsDataFile();\n            $presets = [];\n            foreach ($core_presets as $preset => $params) {\n                $presets[$preset] = $preset;\n                $this->updateSettings($theme, $preset, $params);\n            }\n        }\n\n        // if theme does not have settings data file\n        if (empty($presets)) {\n            $presets = ['Default' => 'Default'];\n        }\n\n        return $presets;\n    }\n\n    public function getThemeSettings(Model\\Theme $theme, $preset = null)\n    {\n        if (is_null($preset)) {\n            $preset = $this->getCurrentThemePreset($theme);\n        }\n\n        $meta = $this->di['db']->findOne(\n            'ExtensionMeta',\n            \"extension = 'mod_theme' AND rel_type = 'settings' AND rel_id = :theme AND meta_key = :preset\",\n            ['theme' => $theme->getName(), 'preset' => $preset]\n        );\n        if ($meta) {\n            return json_decode($meta->meta_value, 1);\n        } else {\n            return $theme->getPresetFromSettingsDataFile($preset);\n        }\n    }\n\n    public function uploadAssets(Model\\Theme $theme, array $files)\n    {\n        $dest = $theme->getPathAssets() . DIRECTORY_SEPARATOR;\n\n        foreach ($files as $filename => $f) {\n            if (UPLOAD_ERR_NO_FILE == $f['error']) {\n                continue;\n            }\n\n            $filename = str_replace('_', '.', $filename);\n            if (UPLOAD_ERR_OK != $f['error']) {\n                throw new \\Box_Exception('Error uploading file :file Error code: :error', [':file' => $filename, ':error' => $f['error']]);\n            }\n\n            move_uploaded_file($f['tmp_name'], $dest . $filename);\n        }\n    }\n\n    public function updateSettings(Model\\Theme $theme, $preset, array $params)\n    {\n        $meta = $this->di['db']->findOne(\n            'ExtensionMeta',\n            \"extension = 'mod_theme' AND rel_type = 'settings' AND rel_id = :theme AND meta_key = :preset\",\n            ['theme' => $theme->getName(), 'preset' => $preset]\n        );\n\n        if (!$meta) {\n            $meta = $this->di['db']->dispense('ExtensionMeta');\n            $meta->extension = 'mod_theme';\n            $meta->rel_type = 'settings';\n            $meta->rel_id = $theme->getName();\n            $meta->meta_key = $preset;\n            $meta->created_at = date('Y-m-d H:i:s');\n        }\n\n        $meta->meta_value = json_encode($params);\n        $meta->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($meta);\n\n        return true;\n    }\n\n    public function regenerateThemeSettingsDataFile(Model\\Theme $theme)\n    {\n        $settings = [];\n        $presets = $this->getThemePresets($theme);\n        foreach ($presets as $preset) {\n            $settings['presets'][$preset] = $this->getThemeSettings($theme, $preset);\n        }\n        $settings['current'] = $this->getCurrentThemePreset($theme);\n        $data_file = $theme->getPathSettingsDataFile();\n\n        $this->di['tools']->file_put_contents(json_encode($settings), $data_file);\n\n        return true;\n    }\n\n    public function regenerateThemeCssAndJsFiles(Model\\Theme $theme, $preset, $api_admin)\n    {\n        $assets = $theme->getPathAssets() . DIRECTORY_SEPARATOR;\n\n        $css_files = glob($assets . '*.css.html.twig');\n        $js_files = glob($assets . '*.js.html.twig');\n        $files = array_merge($css_files, $js_files);\n\n        foreach ($files as $file) {\n            $settings = $this->getThemeSettings($theme, $preset);\n            $real_file = pathinfo($file, PATHINFO_DIRNAME) . DIRECTORY_SEPARATOR . pathinfo($file, PATHINFO_FILENAME);\n\n            $vars = [];\n\n            $vars['settings'] = $settings;\n            $vars['_tpl'] = file_get_contents($file);\n            $systemService = $this->di['mod_service']('system');\n            $data = $systemService->renderString($vars['_tpl'], false, $vars);\n\n            $this->di['tools']->file_put_contents($data, $real_file);\n        }\n\n        return true;\n    }\n\n    public function getCurrentAdminAreaTheme()\n    {\n        $query = 'SELECT value\n                FROM setting\n                WHERE param = :param\n               ';\n        $default = 'admin_default';\n        $theme = $this->di['db']->getCell($query, ['param' => 'admin_theme']);\n        $path = PATH_THEMES . DIRECTORY_SEPARATOR;\n        if (null == $theme || !file_exists($path . $theme)) {\n            $theme = $default;\n        }\n        $url = $this->di['config']['url'] . 'themes' . DIRECTORY_SEPARATOR . $theme . DIRECTORY_SEPARATOR;\n\n        return ['code' => $theme, 'url' => $url];\n    }\n\n    public function getCurrentClientAreaTheme()\n    {\n        $code = $this->getCurrentClientAreaThemeCode();\n\n        return $this->getTheme($code);\n    }\n\n    public function getCurrentClientAreaThemeCode()\n    {\n        if (defined('BB_THEME_CLIENT')) {\n            $theme = BB_THEME_CLIENT;\n        } else {\n            $theme = $this->di['db']->getCell(\"SELECT value FROM setting WHERE param = 'theme' \");\n        }\n\n        return !empty($theme) ? $theme : 'huraga';\n    }\n\n    public function getThemes($client = true)\n    {\n        $list = [];\n        $path = $this->getThemesPath();\n        if ($handle = opendir($path)) {\n            while (false !== ($file = readdir($handle))) {\n                if (is_dir($path . DIRECTORY_SEPARATOR . $file) && '.' != $file[0]) {\n                    try {\n                        if (!$client && str_contains($file, 'admin')) {\n                            $list[] = $this->_loadTheme($file);\n                        }\n\n                        if ($client && !str_contains($file, 'admin')) {\n                            $list[] = $this->_loadTheme($file);\n                        }\n                    } catch (\\Exception $e) {\n                        error_log($e->getMessage());\n                    }\n                }\n            }\n        }\n\n        return $list;\n    }\n\n    public function getThemeConfig($client = true, $mod = null)\n    {\n        if ($client) {\n            $default = 'huraga';\n            $theme = $this->getCurrentClientAreaThemeCode();\n        } else {\n            $default = 'admin_default';\n            $systemService = $this->di['mod_service']('system');\n            $theme = $systemService->getParamValue('admin_theme', $default);\n        }\n\n        $path = $this->getThemesPath();\n        if (!file_exists($path . $theme)) {\n            $theme = $default;\n        }\n\n        return $this->_loadTheme($theme, $client, $mod);\n    }\n\n    public function loadTheme($code, $client = true, $mod = null)\n    {\n        return $this->_loadTheme($code, $client, $mod);\n    }\n\n    public function getThemesPath()\n    {\n        return PATH_THEMES . DIRECTORY_SEPARATOR;\n    }\n\n    private function _loadTheme($theme, $client = true, $mod = null)\n    {\n        $theme_path = $this->getThemesPath() . $theme;\n\n        if (!file_exists($theme_path)) {\n            throw new \\Box_Exception('Theme was not found in path :path', [':path' => $theme_path]);\n        }\n        $manifest = $theme_path . '/manifest.json';\n\n        if (file_exists($manifest)) {\n            $config = json_decode(file_get_contents($manifest), true);\n        } else {\n            $config = [\n                'name' => $theme,\n                'version' => '1.0',\n                'description' => 'Theme',\n                'author' => 'FOSSBilling',\n                'author_url' => 'https://www.fossbilling.org',\n            ];\n        }\n\n        if (!is_array($config)) {\n            throw new \\Box_Exception('Unable to decode theme manifest file :file', [':file' => $manifest]);\n        }\n\n        $paths = [$theme_path . '/html'];\n\n        if (isset($config['extends'])) {\n            $ext = trim($config['extends'], '/');\n            $ext = str_replace('.', '', $ext);\n\n            $config['url'] = BB_URL . 'themes/' . $ext . '/';\n            array_push($paths, $this->getThemesPath() . $ext . '/html');\n        } else {\n            $config['url'] = BB_URL . 'themes/' . $theme . '/';\n        }\n\n        // add installed modules paths\n        $table = $this->di['mod_service']('extension');\n        $list = $table->getCoreAndActiveModules();\n        // add module folder to look for template\n        if (!is_null($mod)) {\n            $list[] = $mod;\n        }\n        $list = array_unique($list);\n        foreach ($list as $mod) {\n            $p = PATH_MODS . DIRECTORY_SEPARATOR . ucfirst($mod) . DIRECTORY_SEPARATOR;\n            $p .= $client ? 'html_client' : 'html_admin';\n            if (file_exists($p)) {\n                array_push($paths, $p);\n            }\n        }\n\n        $config['code'] = $theme;\n        $config['paths'] = $paths;\n        $config['hasSettings'] = false;\n\n        if (is_dir($theme_path . '/config')) {\n            $config['hasSettings'] = true;\n        }\n\n        return $config;\n    }\n\n    public function getCurrentRouteTheme(): string\n    {\n        if ($this->isRouteAdmin()) {\n            return $this->getCurrentAdminAreaTheme()['code'];\n        }\n\n        return $this->getCurrentClientAreaTheme()->getName();\n    }\n\n    public function getEncoreInfo(): array\n    {\n        $entrypoint = 'entrypoints';\n        $manifest = 'manifest';\n        $encoreInfo['is_encore_theme'] = true;\n\n        if (!file_exists($this->getEncoreJsonPath($entrypoint)) && !file_exists($this->getEncoreJsonPath($manifest))) {\n            $encoreInfo['is_encore_theme'] = false;\n        }\n\n        $encoreInfo[$entrypoint] = $this->getEncoreJsonPath($entrypoint);\n        $encoreInfo[$manifest] = $this->getEncoreJsonPath($manifest);\n\n        if ($this->useAdminDefaultEncore()) {\n            $encoreInfo['is_encore_theme'] = true;\n            $encoreInfo[$entrypoint] = $this->getThemesPath() . 'admin_default' . DIRECTORY_SEPARATOR . \"build\" . DIRECTORY_SEPARATOR . \"{$entrypoint}.json\";\n            $encoreInfo[$manifest] = $this->getThemesPath() . 'admin_default' . DIRECTORY_SEPARATOR . \"build\" . DIRECTORY_SEPARATOR . \"{$manifest}.json\";\n        }\n\n        return $encoreInfo;\n    }\n\n    protected function getEncoreJsonPath($filename): string\n    {\n        return $this->getThemesPath() . $this->getCurrentRouteTheme() . DIRECTORY_SEPARATOR . \"build\" . DIRECTORY_SEPARATOR . \"{$filename}.json\";\n    }\n\n    protected function useAdminDefaultEncore()\n    {\n        $config = $this->getThemeConfig();\n        return $config['use_admin_default_encore'] ?? false;\n    }\n\n    protected function isRouteAdmin()\n    {\n        if (str_starts_with($_SERVER['REQUEST_URI'], ADMIN_PREFIX)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n", "<?php\n/**\n * @group Core\n */\nclass Box_Mod_Theme_ServiceTest extends BBDbApiTestCase\n{\n\n    public function testgetCurrentThemePreset()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n        $themeModel = $service->getTheme('huraga');\n        $result = $service->getCurrentThemePreset($themeModel);\n        $this->assertIsString($result);\n        $this->assertNotEmpty($result);\n    }\n\n    public function testgetThemePresets()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n        $themeModel = $service->getTheme('huraga');\n        $result = $service->getThemePresets($themeModel);\n        $this->assertIsArray($result);\n        $this->assertNotEmpty($result);\n    }\n\n    public function testgetThemeSettings()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n        $themeModel = $service->getTheme('huraga');\n        $result = $service->getThemeSettings($themeModel);\n        $this->assertIsArray($result);\n    }\n\n    public function testuploadAssets()\n    {\n        $files = array(\n            'file1' => array(\n                    'error' => UPLOAD_ERR_NO_FILE,\n                ),\n            'file2' => array(\n                'error' => UPLOAD_ERR_OK,\n                'tmp_name' => 'tmpName',\n            ),\n\n        );\n\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $themeModel = $service->getTheme('huraga');\n        $service->uploadAssets($themeModel, $files);\n    }\n\n    public function testupdateSettings()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $themeModel = $service->getTheme('huraga');\n\n        $preset = 'phpUnit';\n        $params = array();\n\n        $result = $service->updateSettings($themeModel, $preset, $params);\n        $this->assertTrue($result);\n    }\n\n    public function testregenerateThemeSettingsDataFile()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $themeModel = $service->getTheme('huraga');\n\n        $result = $service->regenerateThemeSettingsDataFile($themeModel);\n        $this->assertTrue($result);\n    }\n\n    public function testregenerateThemeCssAndJsFiles()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $themeModel = $service->getTheme('huraga');\n\n        $preset = 'phpUnit';\n        $result = $service->regenerateThemeCssAndJsFiles($themeModel, $preset, $this->di['api_admin']);\n        $this->assertTrue($result);\n    }\n\n    public function testgetCurrentAdminAreaTheme()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $result = $service->getCurrentAdminAreaTheme();\n        $this->assertIsArray($result);\n        $this->assertEquals('admin_default', $result['code']);\n        $this->assertEquals($this->di['config']['url'].'themes/admin_default/', $result['url']);\n    }\n\n    public function testgetCurrentClientAreaTheme()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $result = $service->getCurrentClientAreaTheme();\n        $this->assertInstanceOf('\\Box\\Mod\\Theme\\Model\\Theme', $result);\n        $this->assertEquals('huraga', $result->getName());\n    }\n}", "<?php\n\n\nnamespace Box\\Mod\\Theme\\Controller;\n\n\nclass AdminTest extends \\BBTestCase {\n\n    public function testDi()\n    {\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n\n        $di = new \\Pimple\\Container();\n        $db = $this->getMockBuilder('Box_Database')->getMock();\n\n        $di['db'] = $db;\n        $controller->setDi($di);\n        $result = $controller->getDi();\n        $this->assertEquals($di, $result);\n    }\n\n    public function testregister()\n    {\n        $boxAppMock = $this->getMockBuilder('\\Box_App')->disableOriginalConstructor()->getMock();\n        $boxAppMock->expects($this->exactly(1))\n            ->method('get');\n\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n        $controller->register($boxAppMock);\n    }\n\n    public function testget_theme()\n    {\n        $boxAppMock = $this->getMockBuilder('\\Box_App')->disableOriginalConstructor()->getMock();\n        $boxAppMock->expects($this->atLeastOnce())\n            ->method('render')\n            ->with('mod_theme_preset')\n            ->willReturn('Rendering ...');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getSettingsPageHtml')\n            ->willReturn('');\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName');\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getUploadedAssets');\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getSnippets');\n        $themeMock->expects($this->atLeastOnce())\n            ->method('isAssetsPathWritable')\n            ->willReturn(false);\n\n\n        $themeServiceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')->getMock();\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getTheme')\n            ->willReturn($themeMock);\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->willReturn('default');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getThemeSettings');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getThemePresets');\n\n\n        $modMock = $this->getMockBuilder('\\Box_Mod')->disableOriginalConstructor()->getMock();\n        $modMock->expects($this->atLeastOnce())\n            ->method('getService')\n            ->willReturn($themeServiceMock);\n\n        $di = new \\Pimple\\Container();\n        $di['mod'] = $di->protect(function ($name) use($modMock){\n            if ($name == 'theme')\n            {\n                return $modMock;\n            }\n        });\n\n        $di['is_admin_logged']  = true;\n\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n        $controller->setDi($di);\n        $controller->get_theme($boxAppMock, 'huraga');\n    }\n\n    public function testsave_theme_settings()\n    {\n        $boxAppMock = $this->getMockBuilder('\\Box_App')->disableOriginalConstructor()->getMock();\n        $boxAppMock->expects($this->atLeastOnce())\n            ->method('redirect');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('isAssetsPathWritable')\n            ->willReturn(true);\n\n        $themeServiceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')->getMock();\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getTheme')\n            ->willReturn($themeMock);\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->willReturn('default');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('setCurrentThemePreset');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('updateSettings');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('uploadAssets');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('regenerateThemeCssAndJsFiles');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('regenerateThemeSettingsDataFile');\n\n\n        $modMock = $this->getMockBuilder('\\Box_Mod')->disableOriginalConstructor()->getMock();\n        $modMock->expects($this->atLeastOnce())\n            ->method('getService')\n            ->willReturn($themeServiceMock);\n\n\t    $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n\t    $eventMock->expects($this->atLeastOnce())->method('fire');\n\n        $di = new \\Pimple\\Container();\n        $di['mod'] = $di->protect(function ($name) use($modMock){\n            if ($name == 'theme')\n            {\n                return $modMock;\n            }\n        });\n\t    $di['events_manager'] = $eventMock;\n        $adminModel = new \\Model_Client();\n        $adminModel->loadBean(new \\DummyBean());\n        $di['api_admin'] = new \\Api_Handler($adminModel);\n\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n        $controller->setDi($di);\n\n        $_POST['save-current-setting-preset'] = '{}';\n        $_POST['save-current-setting'] = true;\n        $controller->save_theme_settings($boxAppMock, 'huraga');\n    }\n\n\n    public function testsave_theme_settings_PathIsNotWritable()\n    {\n        $boxAppMock = $this->getMockBuilder('\\Box_App')->disableOriginalConstructor()->getMock();\n        $boxAppMock->expects($this->atLeastOnce())\n            ->method('redirect');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('isAssetsPathWritable')\n            ->willReturn(false);\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->willReturn('PHPUnit Controlled exception');\n\n        $themeServiceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')->getMock();\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getTheme')\n            ->willReturn($themeMock);\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->willReturn('default');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('setCurrentThemePreset');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('regenerateThemeSettingsDataFile')\n            ->willThrowException(new \\Exception('PHPUnit controoled exception'));\n\n\n        $modMock = $this->getMockBuilder('\\Box_Mod')->disableOriginalConstructor()->getMock();\n        $modMock->expects($this->atLeastOnce())\n            ->method('getService')\n            ->willReturn($themeServiceMock);\n\n\t    $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n\t    $eventMock->expects($this->atLeastOnce())->method('fire');\n\n        $di = new \\Pimple\\Container();\n        $di['mod'] = $di->protect(function ($name) use($modMock){\n            if ($name == 'theme')\n            {\n                return $modMock;\n            }\n        });\n\t    $di['events_manager'] = $eventMock;\n        $adminModel = new \\Model_Client();\n        $adminModel->loadBean(new \\DummyBean());\n        $di['api_admin'] = new \\Api_Handler($adminModel);\n\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n        $controller->setDi($di);\n\n        $_POST['save-current-setting-preset'] = '{}';\n        $_POST['save-current-setting'] = true;\n        $controller->save_theme_settings($boxAppMock, 'huraga');\n    }\n\n}\n ", "<?php\n\n\nnamespace Box\\Mod\\Theme;\n\n\nclass ServiceTest extends \\BBTestCase {\n    /**\n     * @var \\Box\\Mod\\Theme\\Service\n     */\n    protected $service = null;\n\n    public function setup(): void\n    {\n        $this->service= new \\Box\\Mod\\Theme\\Service();\n    }\n\n\n    public function testgetDi()\n    {\n        $di = new \\Pimple\\Container();\n        $this->service->setDi($di);\n        $getDi = $this->service->getDi();\n        $this->assertEquals($di, $getDi);\n    }\n\n    public function testgetTheme()\n    {\n        $result = $this->service->getTheme('huraga');\n        $this->assertInstanceOf('\\Box\\Mod\\Theme\\Model\\Theme', $result);\n    }\n\n    public function testgetCurrentThemePreset()\n    {\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('setCurrentThemePreset'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('setCurrentThemePreset');\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(array()));\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getCurrentPreset')\n            ->will($this->returnValue('CurrentPresetString'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n\n        $serviceMock->setDi($di);\n        $result = $serviceMock->getCurrentThemePreset($themeMock);\n        $this->assertIsString($result);\n    }\n\n    public function testsetCurrentThemePreset()\n    {\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('exec');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n\n        $this->service->setDi($di);\n        $result = $this->service->setCurrentThemePreset($themeMock, 'dark_blue');\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testdeletePreset()\n    {\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('exec');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n\n        $this->service->setDi($di);\n        $result = $this->service->deletePreset($themeMock, 'dark_blue');\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testgetThemePresets()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('updateSettings'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('updateSettings');\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getAssoc');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $corePresets = array(\n            'default' => array(),\n            'red_black' => array(),\n        );\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPresetsFromSettingsDataFile')\n            ->will($this->returnValue($corePresets));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n\n        $serviceMock->setDi($di);\n        $result = $serviceMock->getThemePresets($themeMock, 'dark_blue');\n        $this->assertIsArray($result);\n\n        $expected= array(\n            'default' => 'default',\n            'red_black' => 'red_black',\n        );\n        $this->assertEquals($expected, $result);\n    }\n\n    public function testgetThemePresets_themeDoNotHaveSettingsDataFile()\n    {\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getAssoc');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPresetsFromSettingsDataFile')\n            ->will($this->returnValue(array()));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n        $this->service->setDi($di);\n\n        $result = $this->service->getThemePresets($themeMock, 'dark_blue');\n        $this->assertIsArray($result);\n\n        $expected= array(\n            'Default' => 'Default',\n        );\n        $this->assertEquals($expected, $result);\n    }\n\n    public function testgetThemeSettings()\n    {\n        $extensionMetaModel = new \\Model_ExtensionMeta();\n        $extensionMetaModel->loadBean(new \\DummyBean());\n        $extensionMetaModel->meta_value = '{}';\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue($extensionMetaModel));\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['db'] = $dbMock;\n\n        $this->service->setDi($di);\n        $result = $this->service->getThemeSettings($themeMock, 'default');\n        $this->assertIsArray($result);\n    }\n\n    public function testgetThemeSettingsWithEmptyPresets()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('getCurrentThemePreset'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->will($this->returnValue('default'));\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(null));\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPresetFromSettingsDataFile')\n            ->will($this->returnValue(array()));\n\n        $di = new \\Pimple\\Container();\n\n        $di['db'] = $dbMock;\n        $serviceMock->setDi($di);\n\n        $result = $serviceMock->getThemeSettings($themeMock);\n        $this->assertIsArray($result);\n        $this->assertEquals(array(), $result);\n    }\n\n    public function testupdateSettings()\n    {\n        $extensionMetaModel = new \\Model_ExtensionMeta();\n        $extensionMetaModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(null));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($extensionMetaModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['db'] = $dbMock;\n\n        $this->service->setDi($di);\n        $params = array();\n        $result = $this->service->updateSettings($themeMock, 'default', $params);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testregenerateThemeSettingsDataFile()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('getThemePresets', 'getThemeSettings', 'getCurrentThemePreset'))\n            ->getMock();\n\n        $presets = array(\n            'default' => 'Defaults',\n            'red_black' => 'Red Black',\n        );\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getThemePresets')\n            ->will($this->returnValue($presets));\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getThemeSettings')\n            ->will($this->returnValue(array()));\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->will($this->returnValue('default'));\n\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPathSettingsDataFile')\n            ->will($this->returnValue('location/Of/Assets/file'));\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())\n            ->method('file_put_contents');\n\n        $di = new \\Pimple\\Container();\n        $di['tools'] = $toolsMock;\n\n        $serviceMock->setDi($di);\n        $result = $serviceMock->regenerateThemeSettingsDataFile($themeMock);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n\n    }\n\n    public function testregenerateThemeCssAndJsFiles_EmptyFiles()\n    {\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPathAssets')\n            ->will($this->returnValue('location/Of/'));\n\n        $di = new \\Pimple\\Container();\n        $di['tools'] = $toolsMock;\n        $this->service->setDi($di);\n\n        $result = $this->service->regenerateThemeCssAndJsFiles($themeMock, 'default', new \\Model_Admin());\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testgetCurrentAdminAreaTheme()\n    {\n        $configMock = array(\n            'url' => 'fossbilling.org/'\n        );\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(''));\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $di['config'] = $configMock;\n\n        $this->service->setDi($di);\n\n        $result =$this->service->getCurrentAdminAreaTheme();\n        $this->assertIsArray($result);\n    }\n\n    public function testgetCurrentClientAreaTheme()\n    {\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('getCurrentClientAreaThemeCode', 'getTheme'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getCurrentClientAreaThemeCode');\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getTheme')\n            ->will($this->returnValue($themeMock));\n\n        $result = $serviceMock->getCurrentClientAreaTheme();\n        $this->assertInstanceOf('\\Box\\Mod\\Theme\\Model\\Theme', $result);\n    }\n\n    public function testgetCurrentClientAreaThemeCode()\n    {\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(array()));\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $this->service->setDi($di);\n\n        $result = $this->service->getCurrentClientAreaThemeCode();\n        $this->assertIsString($result);\n        $this->assertEquals('huraga', $result);\n    }\n\n    public function testuploadAssets()\n    {\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPathAssets');\n        $files = array(\n            'test2' => array(\n                'error' => UPLOAD_ERR_NO_FILE\n                ),\n            'test1' => array(\n                    'error' => UPLOAD_ERR_OK,\n                    'tmp_name' => 'tempName',\n                ),\n        );\n        $this->service->uploadAssets($themeMock, $files);\n    }\n\n    public function testuploadAssets_Exception()\n    {\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPathAssets');\n        $files = array(\n            'test0' => array(\n                'error' => UPLOAD_ERR_CANT_WRITE\n            ),\n        );\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage(sprintf(\"Error uploading file %s Error code: %d\", 'test0', UPLOAD_ERR_CANT_WRITE));\n        $this->service->uploadAssets($themeMock, $files);\n    }\n\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Box_Pagination implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n    protected $per_page = 100;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    /**\n     * @return int\n     */\n    public function getPer_page()\n    {\n        return $this->per_page;\n    }\n\n    public function getSimpleResultSet($q, $values, ?int $per_page = 100, ?int $page = null)\n    {\n        if (is_null($page)){\n            $page = $_GET['page'] ?? 1;\n        }\n        $per_page = $_GET['per_page'] ?? $per_page ?? 100;\n\n        if (!is_numeric($page) || $page < 1 ){\n           throw new \\Box_Exception('Invalid page number');\n        }\n        if (!is_numeric($per_page) || $per_page < 1 ){\n           throw new \\Box_Exception('Invalid per page number');\n        }\n\n        $offset = ($page - 1) * $per_page;\n\n        $sql = $q;\n        $sql .= sprintf(' LIMIT %u,%u', $offset, $per_page);\n        $result = $this->di['db']->getAll($sql, $values);\n\n        $exploded = explode('FROM', $q);\n        $sql = 'SELECT count(1) FROM ' . $exploded[1];\n        $total = $this->di['db']->getCell($sql , $values);\n\n        $pages = ($per_page > 1) ? (int)ceil($total / $per_page) : 1;\n        return array(\n            \"pages\"             => $pages,\n            \"page\"              => $page,\n            \"per_page\"          => $per_page,\n            \"total\"             => $total,\n            \"list\"              => $result,\n        );\n    }\n\n    public function getAdvancedResultSet($q, $values, ?int $per_page = 100)\n    {\n        $page = $_GET['page'] ?? 1;\n        $per_page = $_GET['per_page'] ?? $per_page ?? 100;\n\n        if (!is_numeric($page) || $page < 1 ){\n           throw new \\Box_Exception('Invalid page number');\n        }\n        if (!is_numeric($per_page) || $per_page < 1 ){\n           throw new \\Box_Exception('Invalid per page number');\n        }\n\n        $offset = ($page - 1) * $per_page;\n        $q = str_replace('SELECT ', 'SELECT SQL_CALC_FOUND_ROWS ', $q);\n        $q .= sprintf(' LIMIT %u,%u', $offset, $per_page);\n        $result = $this->di['db']->getAll($q, $values);\n        $total = $this->di['db']->getCell('SELECT FOUND_ROWS();');\n\n        $pages = ($per_page > 1) ? (int)ceil($total / $per_page) : 1;\n        return array(\n            \"pages\"             => $pages,\n            \"page\"              => $page,\n            \"per_page\"          => $per_page,\n            \"total\"             => $total,\n            \"list\"              => $result,\n        );\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Client;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function approveClientEmailByHash($hash)\n    {\n        $db = $this->di['db'];\n        $result = $db->getRow('SELECT id, client_id FROM extension_meta WHERE extension = \"mod_client\" AND meta_key = \"confirm_email\" AND meta_value = :hash', [':hash' => $hash]);\n        if (!$result) {\n            throw new \\Box_Exception('Invalid email confirmation link');\n        }\n        $db->exec('UPDATE client SET email_approved = 1 WHERE id = :id', ['id' => $result['client_id']]);\n        $db->exec('DELETE FROM extension_meta WHERE id = :id', ['id' => $result['id']]);\n\n        return true;\n    }\n\n    public function generateEmailConfirmationLink($client_id)\n    {\n        $hash = strtolower($this->di['tools']->generatePassword(50));\n        $db = $this->di['db'];\n\n        $meta = $db->dispense('ExtensionMeta');\n        $meta->extension = 'mod_client';\n        $meta->client_id = $client_id;\n        $meta->meta_key = 'confirm_email';\n        $meta->meta_value = $hash;\n        $meta->created_at = date('Y-m-d H:i:s');\n        $meta->updated_at = date('Y-m-d H:i:s');\n        $db->store($meta);\n\n        return $this->di['tools']->url('/client/confirm-email/' . $hash);\n    }\n\n    public static function onAfterClientSignUp(\\Box_Event $event)\n    {\n        $di = $event->getDi();\n        $params = $event->getParameters();\n        $config = $di['mod_config']('client');\n        $emailService = $di['mod_service']('email');\n        try {\n            $email = [];\n            $email['to_client'] = $params['id'];\n            $email['code'] = 'mod_client_signup';\n            $email['password'] = __trans('The password you chose when creating your account.');\n            $email['require_email_confirmation'] = false;\n            if (isset($config['require_email_confirmation']) && $config['require_email_confirmation']) {\n                $clientService = $di['mod_service']('client');\n                $email['require_email_confirmation'] = true;\n                $email['email_confirmation_link'] = $clientService->generateEmailConfirmationLink($params['id']);\n            }\n\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n\n        return true;\n    }\n\n    public function getSearchQuery($data, $selectStmt = 'SELECT c.*')\n    {\n        $sql = $selectStmt;\n        $sql .= ' FROM client as c left join client_group as cg on c.client_group_id = cg.id';\n\n        $search = (isset($data['search']) && !empty($data['search'])) ? $data['search'] : null;\n        $client_id = (isset($data['client_id']) && !empty($data['client_id'])) ? $data['client_id'] : null;\n        $group_id = (isset($data['group_id']) && !empty($data['group_id'])) ? $data['group_id'] : null;\n        $id = (isset($data['id']) && !empty($data['id'])) ? $data['id'] : null;\n        $status = (isset($data['status']) && !empty($data['status'])) ? $data['status'] : null;\n        $name = (isset($data['name']) && !empty($data['name'])) ? $data['name'] : null;\n        $company = (isset($data['company']) && !empty($data['company'])) ? $data['company'] : null;\n        $email = (isset($data['email']) && !empty($data['email'])) ? $data['email'] : null;\n        $created_at = (isset($data['created_at']) && !empty($data['created_at'])) ? $data['created_at'] : null;\n        $date_from = (isset($data['date_from']) && !empty($data['date_from'])) ? $data['date_from'] : null;\n        $date_to = (isset($data['date_to']) && !empty($data['date_to'])) ? $data['date_to'] : null;\n\n        $where = [];\n        $params = [];\n        if ($id) {\n            $where[] = 'c.id = :client_id or c.aid = :alt_client_id';\n            $params[':client_id'] = $id;\n            $params[':alt_client_id'] = $id;\n        }\n\n        if ($name) {\n            $where[] = '(c.first_name LIKE :first_name or c.last_name LIKE :last_name )';\n            $name = '%' . $name . '%';\n            $params[':first_name'] = $name;\n            $params[':last_name'] = $name;\n        }\n\n        if ($email) {\n            $where[] = 'c.email LIKE :email';\n            $params[':email'] = '%' . $email . '%';\n        }\n\n        if ($company) {\n            $where[] = 'c.company LIKE :company';\n            $params[':company'] = '%' . $company . '%';\n        }\n\n        if ($status) {\n            $where[] = 'c.status = :status';\n            $params[':status'] = $status;\n        }\n\n        if ($group_id) {\n            $where[] = 'c.client_group_id = :group_id';\n            $params[':group_id'] = $group_id;\n        }\n\n        if ($created_at) {\n            $where[] = \"DATE_FORMAT(c.created_at, '%Y-%m-%d') = :created_at\";\n            $params[':created_at'] = date('Y-m-d', strtotime($created_at));\n        }\n\n        if ($date_from) {\n            $where[] = 'UNIX_TIMESTAMP(c.created_at) >= :date_from';\n            $params[':date_from'] = strtotime($date_from);\n        }\n\n        if ($date_to) {\n            $where[] = 'UNIX_TIMESTAMP(c.created_at) <= :date_from';\n            $params[':date_to'] = strtotime($date_to);\n        }\n\n        // smartSearch\n        if ($search) {\n            if (is_numeric($search)) {\n                $where[] = 'c.id = :cid or c.aid = :caid';\n                $params[':cid'] = $search;\n                $params[':caid'] = $search;\n            } else {\n                $where[] = \"c.company LIKE :s_company OR c.first_name LIKE :s_first_time OR c.last_name LIKE :s_last_name OR c.email LIKE :s_email OR CONCAT(c.first_name,  ' ', c.last_name ) LIKE  :full_name\";\n                $search = '%' . $search . '%';\n                $params[':s_company'] = $search;\n                $params[':s_first_time'] = $search;\n                $params[':s_last_name'] = $search;\n                $params[':s_email'] = $search;\n                $params[':full_name'] = $search;\n            }\n        }\n\n        if (!empty($where)) {\n            $sql .= ' WHERE ' . implode(' AND ', $where);\n        }\n        $sql = $sql . ' ORDER BY c.created_at desc';\n\n        return [$sql, $params];\n    }\n\n    public function getPairs($data)\n    {\n        $limit = $data['per_page'] ?? 30;\n        if (!is_numeric($limit) || $limit < 1 ){\n            throw new \\Box_Exception('Invalid per page number');\n        }\n\n        [$sql, $params] = $this->getSearchQuery($data, \"SELECT c.id, CONCAT_WS('', c.first_name,  ' ', c.last_name) as full_name\");\n        $sql .= sprintf(' LIMIT %u', $limit);\n\n        return $this->di['db']->getAssoc($sql, $params);\n    }\n\n    public function toSessionArray(\\Model_Client $model)\n    {\n        return [\n            'id' => $model->id,\n            'email' => $model->email,\n            'name' => $model->getFullName(),\n            'role' => $model->role,\n        ];\n    }\n\n    public function emailAlreadyRegistered($new_email, \\Model_Client $model = null)\n    {\n        if ($model && $model->email == $new_email) {\n            return false;\n        }\n\n        $result = $this->di['db']->findOne('Client', 'email = ?', [$new_email]);\n\n        return ($result) ? true : false;\n    }\n\n    public function canChangeCurrency(\\Model_Client $model, $currency = null)\n    {\n        if (!$model->currency) {\n            return true;\n        }\n\n        if ($model->currency == $currency) {\n            return false;\n        }\n\n        $invoice = $this->di['db']->findOne('Invoice', 'client_id = :client_id', [':client_id' => $model->id]);\n        if ($invoice instanceof \\Model_Invoice) {\n            throw new \\Box_Exception('Currency can not be changed. Client already have invoices issued.');\n        }\n\n        $order = $this->di['db']->findOne('ClientOrder', 'client_id = :client_id', [':client_id' => $model->id]);\n        if ($order instanceof \\Model_ClientOrder) {\n            throw new \\Box_Exception('Currency can not be changed. Client already have orders.');\n        }\n\n        return true;\n    }\n\n    public function addFunds(\\Model_Client $client, $amount, $description, array $data = [])\n    {\n        if (!$client->currency) {\n            throw new \\Box_Exception('Define clients currency before adding funds.');\n        }\n\n        if (!is_numeric($amount)) {\n            throw new \\Box_Exception('Funds amount is not valid');\n        }\n\n        if (empty($description)) {\n            throw new \\Box_Exception('Funds description is not valid');\n        }\n\n        $credit = $this->di['db']->dispense('ClientBalance');\n\n        $credit->client_id = $client->id;\n        $credit->type = $data['type'] ?? 'gift';\n        $credit->rel_id = $data['rel_id'] ?? null;\n        $credit->description = $description;\n        $credit->amount = $amount;\n        $credit->created_at = date('Y-m-d H:i:s');\n        $credit->updated_at = date('Y-m-d H:i:s');\n\n        $this->di['db']->store($credit);\n\n        return true;\n    }\n\n    public function getExpiredPasswordReminders()\n    {\n        $expire_after_hours = 2;\n        $expired = $this->di['db']->find('ClientPasswordReset', 'UNIX_TIMESTAMP() - ? > UNIX_TIMESTAMP(created_at)', [$expire_after_hours * 60 * 60]);\n\n        return $expired;\n    }\n\n    public function getHistorySearchQuery($data)\n    {\n        $q = 'SELECT ach.*, c.first_name, c.last_name, c.email\n              FROM activity_client_history as ach\n                LEFT JOIN client as c on ach.client_id = c.id ';\n\n        $search = $data['search'] ?? null;\n        $client_id = $data['client_id'] ?? null;\n\n        $where = [];\n        $params = [];\n        if ($search) {\n            $where[] = 'c.first_name LIKE :first_name OR c.last_name LIKE :last_name OR c.id LIKE :id';\n            $params[':first_name'] = '%' . $search . '%';\n            $params[':last_name'] = '%' . $search . '%';\n            $params[':id'] = $search;\n        }\n\n        if ($client_id) {\n            $where[] = 'ach.client_id = :client_id';\n            $params[':client_id'] = $client_id;\n        }\n\n        if (!empty($where)) {\n            $q .= ' WHERE ' . implode(' AND ', $where);\n        }\n\n        $q .= ' ORDER BY ach.id desc';\n\n        return [$q, $params];\n    }\n\n    public function counter()\n    {\n        $sql = 'SELECT status, COUNT(id) as counter\n                FROM client\n                group by status';\n        $data = $this->di['db']->getAssoc($sql);\n\n        return [\n            'total' => array_sum($data),\n            \\Model_Client::ACTIVE => $data[\\Model_Client::ACTIVE] ?? 0,\n            \\Model_Client::SUSPENDED => $data[\\Model_Client::SUSPENDED] ?? 0,\n            \\Model_Client::CANCELED => $data[\\Model_Client::CANCELED] ?? 0,\n        ];\n    }\n\n    public function getGroupPairs()\n    {\n        $sql = 'SELECT id, title\n                FROM client_group';\n\n        return $this->di['db']->getAssoc($sql);\n    }\n\n    public function clientAlreadyExists($email)\n    {\n        $client = $this->di['db']->findOne('Client', 'email = :email ', [':email' => $email]);\n\n        return $client instanceof \\Model_Client;\n    }\n\n    public function getByLoginDetails($email, $password)\n    {\n        $client = $this->di['db']->findOne('Client', 'email = ? and pass = ? and status = ?', [$email, $password, \\Model_Client::ACTIVE]);\n\n        return $client;\n    }\n\n    public function toApiArray(\\Model_Client $model, $deep = false, $identity = null)\n    {\n        $details = [\n            'id' => $model->id,\n            'aid' => $model->aid,\n            'email' => $model->email,\n            'type' => $model->type,\n            'group_id' => $model->client_group_id,\n            'company' => $model->company,\n            'company_vat' => $model->company_vat,\n            'company_number' => $model->company_number,\n            'first_name' => $model->first_name,\n            'last_name' => $model->last_name,\n            'gender' => $model->gender,\n            'birthday' => $model->birthday,\n            'phone_cc' => $model->phone_cc,\n            'phone' => $model->phone,\n            'address_1' => $model->address_1,\n            'address_2' => $model->address_2,\n            'city' => $model->city,\n            'state' => $model->state,\n            'postcode' => $model->postcode,\n            'country' => $model->country,\n            'currency' => $model->currency,\n            'notes' => $model->notes,\n            'created_at' => $model->created_at,\n            'document_nr' => $model->document_nr,\n        ];\n\n        if ($deep) {\n            $details['balance'] = $this->getClientBalance($model);\n        }\n\n        $m = $this->di['db']->toArray($model);\n        for ($i = 1; $i < 11; ++$i) {\n            $k = 'custom_' . $i;\n            if (isset($m[$k]) && !empty($m[$k])) {\n                $details[$k] = $m[$k];\n            }\n        }\n\n        $clientGroup = $this->di['db']->load('ClientGroup', $model->client_group_id);\n\n        if ($identity instanceof \\Model_Admin) {\n            $details['auth_type'] = $model->auth_type;\n            $details['api_token'] = $model->api_token;\n            $details['ip'] = $model->ip;\n            $details['status'] = $model->status;\n            $details['tax_exempt'] = $model->tax_exempt;\n            $details['group'] = ($clientGroup) ? $clientGroup->title : null;\n            $details['updated_at'] = $model->updated_at;\n            $details['email_approved'] = $model->email_approved;\n        }\n\n        return $details;\n    }\n\n    public function getClientBalance(\\Model_Client $c)\n    {\n        $sql = 'SELECT SUM(amount) as client_total\n                FROM client_balance\n                WHERE client_id = ?\n                GROUP BY client_id';\n\n        $balance = $this->di['db']->getCell($sql, [$c->id]);\n\n        return $balance;\n    }\n\n    public function get($data)\n    {\n        if (!isset($data['id']) && !isset($data['email'])) {\n            throw new \\Box_Exception('Client ID or email is required');\n        }\n\n        $db = $this->di['db'];\n        $client = null;\n        if (isset($data['id'])) {\n            $client = $db->findOne('Client', 'id = ?', [$data['id']]);\n        }\n\n        if (!$client && isset($data['email'])) {\n            $client = $db->findOne('Client', 'email = ?', [$data['email']]);\n        }\n\n        if (!$client instanceof \\Model_Client) {\n            throw new \\Box_Exception('Client not found');\n        }\n\n        return $client;\n    }\n\n    public function isClientTaxable(\\Model_Client $model)\n    {\n        $systemService = $this->di['mod_service']('system');\n\n        if (!$systemService->getParamValue('tax_enabled', false)) {\n            return false;\n        }\n\n        if ($model->tax_exempt) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function createGroup(array $data)\n    {\n        $systemService = $this->di['mod_service']('system');\n        $systemService->checkLimits('Model_ClientGroup', 2);\n\n        $model = $this->di['db']->dispense('ClientGroup');\n\n        $model->title = $data['title'];\n        $model->updated_at = date('Y-m-d H:i:s');\n        $model->created_at = date('Y-m-d H:i:s');\n\n        $group_id = $this->di['db']->store($model);\n\n        $this->di['logger']->info('Created new client group #%s', $model->id);\n\n        return $group_id;\n    }\n\n    public function deleteGroup(\\Model_ClientGroup $model)\n    {\n        $client = $this->di['db']->findOne('Client', 'client_group_id = ?', [$model->id]);\n        if ($client) {\n            throw new \\Box_Exception('Can not remove group with clients');\n        }\n\n        $this->di['db']->trash($model);\n        $this->di['logger']->info('Removed client group #%s', $model->id);\n\n        return true;\n    }\n\n    private function createClient(array $data)\n    {\n        $password = $data['password'] ?? uniqid();\n\n        $client = $this->di['db']->dispense('Client');\n\n        $client->auth_type = $data['auth_type'] ?? null;\n        $client->email = strtolower(trim($data['email'] ?? null));\n        $client->first_name = ucwords($data['first_name'] ?? null);\n        $client->pass = $this->di['password']->hashIt($password);\n\n        $phoneCC = $data['phone_cc'] ?? $client->phone_cc;\n        if (!empty($phoneCC)) {\n            $client->phone_cc = intval($phoneCC);\n        }\n\n        $client->aid = $data['aid'] ?? null;\n        $client->last_name = $data['last_name'] ?? null;\n        $client->client_group_id = !empty($data['group_id']) ? $data['group_id'] : null;\n        $client->status = $data['status'] ?? null;\n        $client->gender = $data['gender'] ?? null;\n        $client->birthday = $data['birthday'] ?? null;\n        $client->phone = $data['phone'] ?? null;\n        $client->company = $data['company'] ?? null;\n        $client->company_vat = $data['company_vat'] ?? null;\n        $client->company_number = $data['company_number'] ?? null;\n        $client->type = $data['type'] ?? null;\n        $client->address_1 = $data['address_1'] ?? null;\n        $client->address_2 = $data['address_2'] ?? null;\n        $client->city = $data['city'] ?? null;\n        $client->state = $data['state'] ?? null;\n        $client->postcode = $data['postcode'] ?? null;\n        $client->country = $data['country'] ?? null;\n        $client->document_type = $data['document_type'] ?? null;\n        $client->document_nr = $data['document_nr'] ?? null;\n        $client->notes = $data['notes'] ?? null;\n        $client->lang = $data['lang'] ?? null;\n        $client->currency = $data['currency'] ?? null;\n\n        $client->custom_1 = $data['custom_1'] ?? null;\n        $client->custom_2 = $data['custom_2'] ?? null;\n        $client->custom_3 = $data['custom_3'] ?? null;\n        $client->custom_4 = $data['custom_4'] ?? null;\n        $client->custom_5 = $data['custom_5'] ?? null;\n        $client->custom_6 = $data['custom_6'] ?? null;\n        $client->custom_7 = $data['custom_7'] ?? null;\n        $client->custom_8 = $data['custom_8'] ?? null;\n        $client->custom_9 = $data['custom_9'] ?? null;\n        $client->custom_10 = $data['custom_10'] ?? null;\n\n        $client->ip =  $data['ip'] ?? null;\n\n        $created_at =  $data['created_at'] ?? null;\n        $client->created_at = !empty($created_at) ? date('Y-m-d H:i:s', strtotime($created_at)) : date('Y-m-d H:i:s');\n        $client->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($client);\n\n        return $client;\n    }\n\n    public function adminCreateClient(array $data)\n    {\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminCreateClient', 'params' => $data]);\n        $client = $this->createClient($data);\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminCreateClient', 'params' => ['id' => $client->id, 'password' => $data['password']]]);\n        $this->di['logger']->info('Created new client #%s', $client->id);\n\n        return $client->id;\n    }\n\n    public function guestCreateClient(array $data)\n    {\n        $event_params = $data;\n        $event_params['ip'] = $this->di['request']->getClientAddress();\n        $this->di['events_manager']->fire(['event' => 'onBeforeClientSignUp', 'params' => $event_params]);\n\n        $data['ip'] = $this->di['request']->getClientAddress();\n        $data['status'] = \\Model_Client::ACTIVE;\n        $client = $this->createClient($data);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterClientSignUp', 'params' => ['id' => $client->id, 'password' => $data['password']]]);\n        $this->di['logger']->info('Client #%s signed up', $client->id);\n\n        return $client;\n    }\n\n    public function remove(\\Model_Client $model)\n    {\n        $service = $this->di['mod_service']('Order');\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Invoice');\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Support');\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Client', 'Balance');\n        $service->rmByClient($model);\n\n        $table = $this->di['table']('ActivityClientHistory');\n        $table->rmByClient($model);\n\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Email');\n        $service->rmByClient($model);\n        $service = $this->di['mod_service']('Activity');\n        $service->rmByClient($model);\n\n        $table = $this->di['table']('ClientPasswordReset');\n        $table->rmByClient($model);\n\n        $pdo = $this->di['pdo'];\n        $stmt = $pdo->prepare('DELETE FROM extension_meta WHERE client_id = :id');\n        $stmt->execute(['id' => $model->id]);\n\n        $this->di['db']->trash($model);\n    }\n\n    public function authorizeClient($email, $plainTextPassword)\n    {\n        $model = $this->di['db']->findOne('Client', 'email = ? AND status = ?', [$email, \\Model_Client::ACTIVE]);\n        if (null == $model) {\n            return null;\n        }\n\n        $config = $this->di['mod_config']('client');\n        if (isset($config['require_email_confirmation']) && (int) $config['require_email_confirmation']) {\n            if (!$model->email_approved) {\n                $meta = $this->di['db']->findOne('ExtensionMeta', ' extension = \"mod_client\" AND meta_key = \"confirm_email\" AND client_id = :client_id', [':client_id' => $model->id]);\n                if (!is_null($meta)) {\n                    throw new \\Box_Exception('Please check your mailbox and confirm email address.');\n                } else {\n                    $this->sendEmailConfirmationForClient($model);\n                    throw new \\Box_Exception('Confirmation email was sent to your email address. Please click on link in it in order to verify your email.');\n                }\n            }\n        }\n\n        return $this->di['auth']->authorizeUser($model, $plainTextPassword);\n    }\n\n    private function sendEmailConfirmationForClient(\\Model_Client $client)\n    {\n        try {\n            $email = [];\n            $email['to_client'] = $client->id;\n            $email['code'] = 'mod_client_confirm';\n            $email['require_email_confirmation'] = true;\n            $email['email_confirmation_link'] = $this->generateEmailConfirmationLink($client->id);\n\n            $emailService = $this->di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public function canChangeEmail(\\Model_Client $client, $email)\n    {\n        $config = $this->di['mod_config']('client');\n\n        if (\n            $client->email != $email\n            && isset($config['disable_change_email'])\n            && $config['disable_change_email']\n        ) {\n            throw new \\Box_Exception('Email can not be changed');\n        }\n\n        return true;\n    }\n\n    public function checkExtraRequiredFields(array $checkArr)\n    {\n        $config = $this->di['mod_config']('client');\n        $required = $config['required'] ?? [];\n        foreach ($required as $field) {\n            if (!isset($checkArr[$field]) || empty($checkArr[$field])) {\n                $name = ucwords(str_replace('_', ' ', $field));\n                throw new \\Box_Exception('Field :field cannot be empty', [':field' => $name]);\n            }\n        }\n    }\n\n    public function checkCustomFields(array $checkArr)\n    {\n        $config = $this->di['mod_config']('client');\n        $customFields = $config['custom_fields'] ?? [];\n        foreach ($customFields as $cFieldName => $cField) {\n            $active = isset($cField['active']) && $cField['active'] ? true : false;\n            $required = isset($cField['required']) && $cField['required'] ? true : false;\n            if ($active && $required) {\n                if (!isset($checkArr[$cFieldName]) || empty($checkArr[$cFieldName])) {\n                    $name = isset($cField['title']) && !empty($cField['title']) ? $cField['title'] : ucwords(str_replace('_', ' ', $cFieldName));\n                    throw new \\Box_Exception('Field :field cannot be empty', [':field' => $name]);\n                }\n            }\n        }\n    }\n\n    public function exportCSV(array $headers)\n    {\n        if ($headers) {\n            // Prevent the password / salt columns from being exported\n            if (isset($headers['pass'])) {\n                unset($headers['pass']);\n            }\n            if (isset($headers['salt'])) {\n                unset($headers['salt']);\n            }\n        } else {\n            $headers = ['id', 'email', 'status', 'first_name', 'last_name', 'phone_cc', 'phone', 'company', 'company_vat', 'company_number', 'address_1', 'address_2', 'city', 'state', 'postcode', 'country', 'currency'];\n        }\n        return $this->di['table_export_csv']('client', 'clients.csv', $headers);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Theme\\Controller;\n\nclass Admin implements \\FOSSBilling\\InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function register(\\Box_App &$app)\n    {\n        $app->get('/theme/:theme', 'get_theme', ['theme' => '[a-z0-9-_]+'], static::class);\n        $app->post('/theme/:theme', 'save_theme_settings', ['theme' => '[a-z0-9-_]+'], static::class);\n    }\n\n    /**\n     * Save theme settings.\n     *\n     * @param string $code - client area theme code\n     *\n     */\n    public function save_theme_settings(\\Box_App $app, $theme)\n    {\n        $this->di['events_manager']->fire(['event' => 'onBeforeThemeSettingsSave', 'params' => $_POST]);\n\n        $api = $this->di['api_admin'];\n\n        $mod = $this->di['mod']('theme');\n        $service = $mod->getService();\n        $t = $service->getTheme($theme);\n\n        $isNewPreset = isset($_POST['save-current-setting']) ? (bool) $_POST['save-current-setting'] : false;\n        $preset = $service->getCurrentThemePreset($t);\n        if ($isNewPreset && isset($_POST['save-current-setting-preset']) && !empty($_POST['save-current-setting-preset'])) {\n            $preset = $_POST['save-current-setting-preset'];\n            $preset = str_replace(' ', '', $preset);\n            $service->setCurrentThemePreset($t, $preset);\n        }\n\n        unset($_POST['save-current-setting-preset']);\n        unset($_POST['save-current-setting']);\n\n        $error = null;\n        try {\n            if (!$t->isAssetsPathWritable()) {\n                throw new \\Box_Exception('Theme \":name\" assets folder is not writable. Files can not be uploaded and settings can not be saved. Set folder permissions to 777', [':name' => $t->getName()]);\n            }\n            $service->updateSettings($t, $preset, $_POST);\n            $service->regenerateThemeCssAndJsFiles($t, $preset, $api);\n        } catch (\\Exception $e) {\n            error_log($e);\n            $error = $e->getMessage();\n        }\n\n        // optional data file\n        try {\n            $service->regenerateThemeSettingsDataFile($t);\n        } catch (\\Exception $e) {\n            error_log($e);\n            $error = $e->getMessage();\n        }\n\n        $red_url = '/theme/' . $theme;\n        if ($error) {\n            $red_url .= '?error=' . $error;\n        }\n        $app->redirect($red_url);\n    }\n\n    public function get_theme(\\Box_App $app, $theme)\n    {\n        $this->di['is_admin_logged'];\n\n        $mod = $this->di['mod']('theme');\n        $service = $mod->getService();\n        $t = $service->getTheme($theme);\n        $preset = $service->getCurrentThemePreset($t);\n        $html = $t->getSettingsPageHtml($theme);\n\n        $info = null;\n        if (!$t->isAssetsPathWritable()) {\n            $info = __trans('Theme \":name\" assets folder is not writable. Set folder :folder permissions to 777', [':name' => $t->getName(), ':folder' => $t->getPathAssets()]);\n        }\n\n        if (empty($html)) {\n            $info = __trans('Theme \":name\" is not configurable', [':name' => $t->getName()]);\n        }\n\n        $data = [\n            'info' => $info,\n            'error' => $_GET['error'] ?? null,\n            'theme_code' => $t->getName(),\n            'settings_html' => $html,\n            'uploaded' => $t->getUploadedAssets($theme),\n            'settings' => $service->getThemeSettings($t, $preset),\n            'current_preset' => $preset,\n            'presets' => $service->getThemePresets($t),\n            'snippets' => $t->getSnippets(),\n        ];\n\n        return $app->render('mod_theme_preset', $data);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Theme;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function getTheme($name)\n    {\n        $theme = new \\Box\\Mod\\Theme\\Model\\Theme($name);\n\n        return $theme;\n    }\n\n    public function getCurrentThemePreset(Model\\Theme $theme)\n    {\n        $current = $this->di['db']->getCell(\n            \"SELECT meta_value\n        FROM extension_meta\n        WHERE 1\n        AND extension = 'mod_theme'\n        AND rel_id = 'current'\n        AND rel_type = 'preset'\n        AND meta_key = :theme\",\n            [':theme' => $theme->getName()]\n        );\n        if (empty($current)) {\n            $current = $theme->getCurrentPreset();\n            $this->setCurrentThemePreset($theme, $current);\n        }\n\n        return $current;\n    }\n\n    public function setCurrentThemePreset(Model\\Theme $theme, $preset)\n    {\n        $params = ['theme' => $theme->getName(), 'preset' => $preset];\n        $updated = $this->di['db']->exec(\"\n            UPDATE extension_meta\n            SET meta_value = :preset\n            WHERE 1\n            AND extension = 'mod_theme'\n            AND rel_type = 'preset'\n            AND rel_id = 'current'\n            AND meta_key = :theme\n            LIMIT 1\n            \", $params);\n\n        if (!$updated) {\n            $updated = $this->di['db']->exec(\"\n            INSERT INTO extension_meta (\n                extension,\n                rel_type,\n                rel_id,\n                meta_value,\n                meta_key,\n                created_at,\n                updated_at\n            )\n            VALUES (\n                'mod_theme',\n                'preset',\n                'current',\n                :preset,\n                :theme,\n                NOW(),\n                NOW()\n            )\n            \", $params);\n        }\n\n        return true;\n    }\n\n    public function deletePreset(Model\\Theme $theme, $preset)\n    {\n        // delete settings\n        $this->di['db']->exec(\n            \"DELETE FROM extension_meta\n            WHERE extension = 'mod_theme'\n            AND rel_type = 'settings'\n            AND rel_id = :theme\n            AND meta_key = :preset\",\n            ['theme' => $theme->getName(), 'preset' => $preset]\n        );\n\n        // delete default preset\n        $this->di['db']->exec(\n            \"DELETE FROM extension_meta\n            WHERE extension = 'mod_theme'\n            AND rel_type = 'preset'\n            AND rel_id = 'current'\n            AND meta_key = :theme\",\n            ['theme' => $theme->getName()]\n        );\n\n        return true;\n    }\n\n    public function getThemePresets(Model\\Theme $theme)\n    {\n        $presets = $this->di['db']->getAssoc(\n            \"SELECT meta_key FROM extension_meta WHERE extension = 'mod_theme' AND rel_type = 'settings' AND rel_id = :key\",\n            ['key' => $theme->getName()]\n        );\n\n        // insert default presets to database\n        if (empty($presets)) {\n            $core_presets = $theme->getPresetsFromSettingsDataFile();\n            $presets = [];\n            foreach ($core_presets as $preset => $params) {\n                $presets[$preset] = $preset;\n                $this->updateSettings($theme, $preset, $params);\n            }\n        }\n\n        // if theme does not have settings data file\n        if (empty($presets)) {\n            $presets = ['Default' => 'Default'];\n        }\n\n        return $presets;\n    }\n\n    public function getThemeSettings(Model\\Theme $theme, $preset = null)\n    {\n        if (is_null($preset)) {\n            $preset = $this->getCurrentThemePreset($theme);\n        }\n\n        $meta = $this->di['db']->findOne(\n            'ExtensionMeta',\n            \"extension = 'mod_theme' AND rel_type = 'settings' AND rel_id = :theme AND meta_key = :preset\",\n            ['theme' => $theme->getName(), 'preset' => $preset]\n        );\n        if ($meta) {\n            return json_decode($meta->meta_value, 1);\n        } else {\n            return $theme->getPresetFromSettingsDataFile($preset);\n        }\n    }\n\n    public function updateSettings(Model\\Theme $theme, $preset, array $params)\n    {\n        $meta = $this->di['db']->findOne(\n            'ExtensionMeta',\n            \"extension = 'mod_theme' AND rel_type = 'settings' AND rel_id = :theme AND meta_key = :preset\",\n            ['theme' => $theme->getName(), 'preset' => $preset]\n        );\n\n        if (!$meta) {\n            $meta = $this->di['db']->dispense('ExtensionMeta');\n            $meta->extension = 'mod_theme';\n            $meta->rel_type = 'settings';\n            $meta->rel_id = $theme->getName();\n            $meta->meta_key = $preset;\n            $meta->created_at = date('Y-m-d H:i:s');\n        }\n\n        $meta->meta_value = json_encode($params);\n        $meta->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($meta);\n\n        return true;\n    }\n\n    public function regenerateThemeSettingsDataFile(Model\\Theme $theme)\n    {\n        $settings = [];\n        $presets = $this->getThemePresets($theme);\n        foreach ($presets as $preset) {\n            $settings['presets'][$preset] = $this->getThemeSettings($theme, $preset);\n        }\n        $settings['current'] = $this->getCurrentThemePreset($theme);\n        $data_file = $theme->getPathSettingsDataFile();\n\n        $this->di['tools']->file_put_contents(json_encode($settings), $data_file);\n\n        return true;\n    }\n\n    public function regenerateThemeCssAndJsFiles(Model\\Theme $theme, $preset, $api_admin)\n    {\n        $assets = $theme->getPathAssets() . DIRECTORY_SEPARATOR;\n\n        $css_files = glob($assets . '*.css.html.twig');\n        $js_files = glob($assets . '*.js.html.twig');\n        $files = array_merge($css_files, $js_files);\n\n        foreach ($files as $file) {\n            $settings = $this->getThemeSettings($theme, $preset);\n            $real_file = pathinfo($file, PATHINFO_DIRNAME) . DIRECTORY_SEPARATOR . pathinfo($file, PATHINFO_FILENAME);\n\n            $vars = [];\n\n            $vars['settings'] = $settings;\n            $vars['_tpl'] = file_get_contents($file);\n            $systemService = $this->di['mod_service']('system');\n            $data = $systemService->renderString($vars['_tpl'], false, $vars);\n\n            $this->di['tools']->file_put_contents($data, $real_file);\n        }\n\n        return true;\n    }\n\n    public function getCurrentAdminAreaTheme()\n    {\n        $query = 'SELECT value\n                FROM setting\n                WHERE param = :param\n               ';\n        $default = 'admin_default';\n        $theme = $this->di['db']->getCell($query, ['param' => 'admin_theme']);\n        $path = PATH_THEMES . DIRECTORY_SEPARATOR;\n        if (null == $theme || !file_exists($path . $theme)) {\n            $theme = $default;\n        }\n        $url = $this->di['config']['url'] . 'themes' . DIRECTORY_SEPARATOR . $theme . DIRECTORY_SEPARATOR;\n\n        return ['code' => $theme, 'url' => $url];\n    }\n\n    public function getCurrentClientAreaTheme()\n    {\n        $code = $this->getCurrentClientAreaThemeCode();\n\n        return $this->getTheme($code);\n    }\n\n    public function getCurrentClientAreaThemeCode()\n    {\n        if (defined('BB_THEME_CLIENT')) {\n            $theme = BB_THEME_CLIENT;\n        } else {\n            $theme = $this->di['db']->getCell(\"SELECT value FROM setting WHERE param = 'theme' \");\n        }\n\n        return !empty($theme) ? $theme : 'huraga';\n    }\n\n    public function getThemes($client = true)\n    {\n        $list = [];\n        $path = $this->getThemesPath();\n        if ($handle = opendir($path)) {\n            while (false !== ($file = readdir($handle))) {\n                if (is_dir($path . DIRECTORY_SEPARATOR . $file) && '.' != $file[0]) {\n                    try {\n                        if (!$client && str_contains($file, 'admin')) {\n                            $list[] = $this->_loadTheme($file);\n                        }\n\n                        if ($client && !str_contains($file, 'admin')) {\n                            $list[] = $this->_loadTheme($file);\n                        }\n                    } catch (\\Exception $e) {\n                        error_log($e->getMessage());\n                    }\n                }\n            }\n        }\n\n        return $list;\n    }\n\n    public function getThemeConfig($client = true, $mod = null)\n    {\n        if ($client) {\n            $default = 'huraga';\n            $theme = $this->getCurrentClientAreaThemeCode();\n        } else {\n            $default = 'admin_default';\n            $systemService = $this->di['mod_service']('system');\n            $theme = $systemService->getParamValue('admin_theme', $default);\n        }\n\n        $path = $this->getThemesPath();\n        if (!file_exists($path . $theme)) {\n            $theme = $default;\n        }\n\n        return $this->_loadTheme($theme, $client, $mod);\n    }\n\n    public function loadTheme($code, $client = true, $mod = null)\n    {\n        return $this->_loadTheme($code, $client, $mod);\n    }\n\n    public function getThemesPath()\n    {\n        return PATH_THEMES . DIRECTORY_SEPARATOR;\n    }\n\n    private function _loadTheme($theme, $client = true, $mod = null)\n    {\n        $theme_path = $this->getThemesPath() . $theme;\n\n        if (!file_exists($theme_path)) {\n            throw new \\Box_Exception('Theme was not found in path :path', [':path' => $theme_path]);\n        }\n        $manifest = $theme_path . '/manifest.json';\n\n        if (file_exists($manifest)) {\n            $config = json_decode(file_get_contents($manifest), true);\n        } else {\n            $config = [\n                'name' => $theme,\n                'version' => '1.0',\n                'description' => 'Theme',\n                'author' => 'FOSSBilling',\n                'author_url' => 'https://www.fossbilling.org',\n            ];\n        }\n\n        if (!is_array($config)) {\n            throw new \\Box_Exception('Unable to decode theme manifest file :file', [':file' => $manifest]);\n        }\n\n        $paths = [$theme_path . '/html'];\n\n        if (isset($config['extends'])) {\n            $ext = trim($config['extends'], '/');\n            $ext = str_replace('.', '', $ext);\n\n            $config['url'] = BB_URL . 'themes/' . $ext . '/';\n            array_push($paths, $this->getThemesPath() . $ext . '/html');\n        } else {\n            $config['url'] = BB_URL . 'themes/' . $theme . '/';\n        }\n\n        // add installed modules paths\n        $table = $this->di['mod_service']('extension');\n        $list = $table->getCoreAndActiveModules();\n        // add module folder to look for template\n        if (!is_null($mod)) {\n            $list[] = $mod;\n        }\n        $list = array_unique($list);\n        foreach ($list as $mod) {\n            $p = PATH_MODS . DIRECTORY_SEPARATOR . ucfirst($mod) . DIRECTORY_SEPARATOR;\n            $p .= $client ? 'html_client' : 'html_admin';\n            if (file_exists($p)) {\n                array_push($paths, $p);\n            }\n        }\n\n        $config['code'] = $theme;\n        $config['paths'] = $paths;\n        $config['hasSettings'] = false;\n\n        if (is_dir($theme_path . '/config')) {\n            $config['hasSettings'] = true;\n        }\n\n        return $config;\n    }\n\n    public function getCurrentRouteTheme(): string\n    {\n        if ($this->isRouteAdmin()) {\n            return $this->getCurrentAdminAreaTheme()['code'];\n        }\n\n        return $this->getCurrentClientAreaTheme()->getName();\n    }\n\n    public function getEncoreInfo(): array\n    {\n        $entrypoint = 'entrypoints';\n        $manifest = 'manifest';\n        $encoreInfo['is_encore_theme'] = true;\n\n        if (!file_exists($this->getEncoreJsonPath($entrypoint)) && !file_exists($this->getEncoreJsonPath($manifest))) {\n            $encoreInfo['is_encore_theme'] = false;\n        }\n\n        $encoreInfo[$entrypoint] = $this->getEncoreJsonPath($entrypoint);\n        $encoreInfo[$manifest] = $this->getEncoreJsonPath($manifest);\n\n        if ($this->useAdminDefaultEncore()) {\n            $encoreInfo['is_encore_theme'] = true;\n            $encoreInfo[$entrypoint] = $this->getThemesPath() . 'admin_default' . DIRECTORY_SEPARATOR . \"build\" . DIRECTORY_SEPARATOR . \"{$entrypoint}.json\";\n            $encoreInfo[$manifest] = $this->getThemesPath() . 'admin_default' . DIRECTORY_SEPARATOR . \"build\" . DIRECTORY_SEPARATOR . \"{$manifest}.json\";\n        }\n\n        return $encoreInfo;\n    }\n\n    protected function getEncoreJsonPath($filename): string\n    {\n        return $this->getThemesPath() . $this->getCurrentRouteTheme() . DIRECTORY_SEPARATOR . \"build\" . DIRECTORY_SEPARATOR . \"{$filename}.json\";\n    }\n\n    protected function useAdminDefaultEncore()\n    {\n        $config = $this->getThemeConfig();\n        return $config['use_admin_default_encore'] ?? false;\n    }\n\n    protected function isRouteAdmin()\n    {\n        if (str_starts_with($_SERVER['REQUEST_URI'], ADMIN_PREFIX)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n", "<?php\n/**\n * @group Core\n */\nclass Box_Mod_Theme_ServiceTest extends BBDbApiTestCase\n{\n\n    public function testgetCurrentThemePreset()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n        $themeModel = $service->getTheme('huraga');\n        $result = $service->getCurrentThemePreset($themeModel);\n        $this->assertIsString($result);\n        $this->assertNotEmpty($result);\n    }\n\n    public function testgetThemePresets()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n        $themeModel = $service->getTheme('huraga');\n        $result = $service->getThemePresets($themeModel);\n        $this->assertIsArray($result);\n        $this->assertNotEmpty($result);\n    }\n\n    public function testgetThemeSettings()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n        $themeModel = $service->getTheme('huraga');\n        $result = $service->getThemeSettings($themeModel);\n        $this->assertIsArray($result);\n    }\n\n    public function testupdateSettings()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $themeModel = $service->getTheme('huraga');\n\n        $preset = 'phpUnit';\n        $params = array();\n\n        $result = $service->updateSettings($themeModel, $preset, $params);\n        $this->assertTrue($result);\n    }\n\n    public function testregenerateThemeSettingsDataFile()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $themeModel = $service->getTheme('huraga');\n\n        $result = $service->regenerateThemeSettingsDataFile($themeModel);\n        $this->assertTrue($result);\n    }\n\n    public function testregenerateThemeCssAndJsFiles()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $themeModel = $service->getTheme('huraga');\n\n        $preset = 'phpUnit';\n        $result = $service->regenerateThemeCssAndJsFiles($themeModel, $preset, $this->di['api_admin']);\n        $this->assertTrue($result);\n    }\n\n    public function testgetCurrentAdminAreaTheme()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $result = $service->getCurrentAdminAreaTheme();\n        $this->assertIsArray($result);\n        $this->assertEquals('admin_default', $result['code']);\n        $this->assertEquals($this->di['config']['url'].'themes/admin_default/', $result['url']);\n    }\n\n    public function testgetCurrentClientAreaTheme()\n    {\n        $service = new \\Box\\Mod\\Theme\\Service();\n        $service->setDi($this->di);\n\n        $result = $service->getCurrentClientAreaTheme();\n        $this->assertInstanceOf('\\Box\\Mod\\Theme\\Model\\Theme', $result);\n        $this->assertEquals('huraga', $result->getName());\n    }\n}\n", "<?php\n\n\nnamespace Box\\Mod\\Theme\\Controller;\n\n\nclass AdminTest extends \\BBTestCase {\n\n    public function testDi()\n    {\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n\n        $di = new \\Pimple\\Container();\n        $db = $this->getMockBuilder('Box_Database')->getMock();\n\n        $di['db'] = $db;\n        $controller->setDi($di);\n        $result = $controller->getDi();\n        $this->assertEquals($di, $result);\n    }\n\n    public function testregister()\n    {\n        $boxAppMock = $this->getMockBuilder('\\Box_App')->disableOriginalConstructor()->getMock();\n        $boxAppMock->expects($this->exactly(1))\n            ->method('get');\n\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n        $controller->register($boxAppMock);\n    }\n\n    public function testget_theme()\n    {\n        $boxAppMock = $this->getMockBuilder('\\Box_App')->disableOriginalConstructor()->getMock();\n        $boxAppMock->expects($this->atLeastOnce())\n            ->method('render')\n            ->with('mod_theme_preset')\n            ->willReturn('Rendering ...');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getSettingsPageHtml')\n            ->willReturn('');\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName');\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getUploadedAssets');\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getSnippets');\n        $themeMock->expects($this->atLeastOnce())\n            ->method('isAssetsPathWritable')\n            ->willReturn(false);\n\n\n        $themeServiceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')->getMock();\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getTheme')\n            ->willReturn($themeMock);\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->willReturn('default');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getThemeSettings');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getThemePresets');\n\n\n        $modMock = $this->getMockBuilder('\\Box_Mod')->disableOriginalConstructor()->getMock();\n        $modMock->expects($this->atLeastOnce())\n            ->method('getService')\n            ->willReturn($themeServiceMock);\n\n        $di = new \\Pimple\\Container();\n        $di['mod'] = $di->protect(function ($name) use($modMock){\n            if ($name == 'theme')\n            {\n                return $modMock;\n            }\n        });\n\n        $di['is_admin_logged']  = true;\n\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n        $controller->setDi($di);\n        $controller->get_theme($boxAppMock, 'huraga');\n    }\n\n    public function testsave_theme_settings()\n    {\n        $boxAppMock = $this->getMockBuilder('\\Box_App')->disableOriginalConstructor()->getMock();\n        $boxAppMock->expects($this->atLeastOnce())\n            ->method('redirect');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('isAssetsPathWritable')\n            ->willReturn(true);\n\n        $themeServiceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')->getMock();\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getTheme')\n            ->willReturn($themeMock);\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->willReturn('default');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('setCurrentThemePreset');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('updateSettings');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('regenerateThemeCssAndJsFiles');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('regenerateThemeSettingsDataFile');\n\n\n        $modMock = $this->getMockBuilder('\\Box_Mod')->disableOriginalConstructor()->getMock();\n        $modMock->expects($this->atLeastOnce())\n            ->method('getService')\n            ->willReturn($themeServiceMock);\n\n\t    $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n\t    $eventMock->expects($this->atLeastOnce())->method('fire');\n\n        $di = new \\Pimple\\Container();\n        $di['mod'] = $di->protect(function ($name) use($modMock){\n            if ($name == 'theme')\n            {\n                return $modMock;\n            }\n        });\n\t    $di['events_manager'] = $eventMock;\n        $adminModel = new \\Model_Client();\n        $adminModel->loadBean(new \\DummyBean());\n        $di['api_admin'] = new \\Api_Handler($adminModel);\n\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n        $controller->setDi($di);\n\n        $_POST['save-current-setting-preset'] = '{}';\n        $_POST['save-current-setting'] = true;\n        $controller->save_theme_settings($boxAppMock, 'huraga');\n    }\n\n\n    public function testsave_theme_settings_PathIsNotWritable()\n    {\n        $boxAppMock = $this->getMockBuilder('\\Box_App')->disableOriginalConstructor()->getMock();\n        $boxAppMock->expects($this->atLeastOnce())\n            ->method('redirect');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('isAssetsPathWritable')\n            ->willReturn(false);\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->willReturn('PHPUnit Controlled exception');\n\n        $themeServiceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')->getMock();\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getTheme')\n            ->willReturn($themeMock);\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->willReturn('default');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('setCurrentThemePreset');\n        $themeServiceMock->expects($this->atLeastOnce())\n            ->method('regenerateThemeSettingsDataFile')\n            ->willThrowException(new \\Exception('PHPUnit controoled exception'));\n\n\n        $modMock = $this->getMockBuilder('\\Box_Mod')->disableOriginalConstructor()->getMock();\n        $modMock->expects($this->atLeastOnce())\n            ->method('getService')\n            ->willReturn($themeServiceMock);\n\n\t    $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n\t    $eventMock->expects($this->atLeastOnce())->method('fire');\n\n        $di = new \\Pimple\\Container();\n        $di['mod'] = $di->protect(function ($name) use($modMock){\n            if ($name == 'theme')\n            {\n                return $modMock;\n            }\n        });\n\t    $di['events_manager'] = $eventMock;\n        $adminModel = new \\Model_Client();\n        $adminModel->loadBean(new \\DummyBean());\n        $di['api_admin'] = new \\Api_Handler($adminModel);\n\n        $controller = new \\Box\\Mod\\Theme\\Controller\\Admin();\n        $controller->setDi($di);\n\n        $_POST['save-current-setting-preset'] = '{}';\n        $_POST['save-current-setting'] = true;\n        $controller->save_theme_settings($boxAppMock, 'huraga');\n    }\n\n}\n", "<?php\n\n\nnamespace Box\\Mod\\Theme;\n\n\nclass ServiceTest extends \\BBTestCase {\n    /**\n     * @var \\Box\\Mod\\Theme\\Service\n     */\n    protected $service = null;\n\n    public function setup(): void\n    {\n        $this->service= new \\Box\\Mod\\Theme\\Service();\n    }\n\n\n    public function testgetDi()\n    {\n        $di = new \\Pimple\\Container();\n        $this->service->setDi($di);\n        $getDi = $this->service->getDi();\n        $this->assertEquals($di, $getDi);\n    }\n\n    public function testgetTheme()\n    {\n        $result = $this->service->getTheme('huraga');\n        $this->assertInstanceOf('\\Box\\Mod\\Theme\\Model\\Theme', $result);\n    }\n\n    public function testgetCurrentThemePreset()\n    {\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('setCurrentThemePreset'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('setCurrentThemePreset');\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(array()));\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getCurrentPreset')\n            ->will($this->returnValue('CurrentPresetString'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n\n        $serviceMock->setDi($di);\n        $result = $serviceMock->getCurrentThemePreset($themeMock);\n        $this->assertIsString($result);\n    }\n\n    public function testsetCurrentThemePreset()\n    {\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('exec');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n\n        $this->service->setDi($di);\n        $result = $this->service->setCurrentThemePreset($themeMock, 'dark_blue');\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testdeletePreset()\n    {\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('exec');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n\n        $this->service->setDi($di);\n        $result = $this->service->deletePreset($themeMock, 'dark_blue');\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testgetThemePresets()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('updateSettings'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('updateSettings');\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getAssoc');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $corePresets = array(\n            'default' => array(),\n            'red_black' => array(),\n        );\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPresetsFromSettingsDataFile')\n            ->will($this->returnValue($corePresets));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n\n        $serviceMock->setDi($di);\n        $result = $serviceMock->getThemePresets($themeMock, 'dark_blue');\n        $this->assertIsArray($result);\n\n        $expected= array(\n            'default' => 'default',\n            'red_black' => 'red_black',\n        );\n        $this->assertEquals($expected, $result);\n    }\n\n    public function testgetThemePresets_themeDoNotHaveSettingsDataFile()\n    {\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getAssoc');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPresetsFromSettingsDataFile')\n            ->will($this->returnValue(array()));\n\n        $di = new \\Pimple\\Container();\n\n        $di['theme'] = $di->protect(function () use($themeMock) { return $themeMock; });\n        $di['db'] = $dbMock;\n        $this->service->setDi($di);\n\n        $result = $this->service->getThemePresets($themeMock, 'dark_blue');\n        $this->assertIsArray($result);\n\n        $expected= array(\n            'Default' => 'Default',\n        );\n        $this->assertEquals($expected, $result);\n    }\n\n    public function testgetThemeSettings()\n    {\n        $extensionMetaModel = new \\Model_ExtensionMeta();\n        $extensionMetaModel->loadBean(new \\DummyBean());\n        $extensionMetaModel->meta_value = '{}';\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue($extensionMetaModel));\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['db'] = $dbMock;\n\n        $this->service->setDi($di);\n        $result = $this->service->getThemeSettings($themeMock, 'default');\n        $this->assertIsArray($result);\n    }\n\n    public function testgetThemeSettingsWithEmptyPresets()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('getCurrentThemePreset'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->will($this->returnValue('default'));\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(null));\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPresetFromSettingsDataFile')\n            ->will($this->returnValue(array()));\n\n        $di = new \\Pimple\\Container();\n\n        $di['db'] = $dbMock;\n        $serviceMock->setDi($di);\n\n        $result = $serviceMock->getThemeSettings($themeMock);\n        $this->assertIsArray($result);\n        $this->assertEquals(array(), $result);\n    }\n\n    public function testupdateSettings()\n    {\n        $extensionMetaModel = new \\Model_ExtensionMeta();\n        $extensionMetaModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(null));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($extensionMetaModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getName')\n            ->will($this->returnValue('default'));\n\n        $di = new \\Pimple\\Container();\n\n        $di['db'] = $dbMock;\n\n        $this->service->setDi($di);\n        $params = array();\n        $result = $this->service->updateSettings($themeMock, 'default', $params);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testregenerateThemeSettingsDataFile()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('getThemePresets', 'getThemeSettings', 'getCurrentThemePreset'))\n            ->getMock();\n\n        $presets = array(\n            'default' => 'Defaults',\n            'red_black' => 'Red Black',\n        );\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getThemePresets')\n            ->will($this->returnValue($presets));\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getThemeSettings')\n            ->will($this->returnValue(array()));\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getCurrentThemePreset')\n            ->will($this->returnValue('default'));\n\n\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPathSettingsDataFile')\n            ->will($this->returnValue('location/Of/Assets/file'));\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())\n            ->method('file_put_contents');\n\n        $di = new \\Pimple\\Container();\n        $di['tools'] = $toolsMock;\n\n        $serviceMock->setDi($di);\n        $result = $serviceMock->regenerateThemeSettingsDataFile($themeMock);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n\n    }\n\n    public function testregenerateThemeCssAndJsFiles_EmptyFiles()\n    {\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n        $themeMock->expects($this->atLeastOnce())\n            ->method('getPathAssets')\n            ->will($this->returnValue('location/Of/'));\n\n        $di = new \\Pimple\\Container();\n        $di['tools'] = $toolsMock;\n        $this->service->setDi($di);\n\n        $result = $this->service->regenerateThemeCssAndJsFiles($themeMock, 'default', new \\Model_Admin());\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testgetCurrentAdminAreaTheme()\n    {\n        $configMock = array(\n            'url' => 'fossbilling.org/'\n        );\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(''));\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $di['config'] = $configMock;\n\n        $this->service->setDi($di);\n\n        $result =$this->service->getCurrentAdminAreaTheme();\n        $this->assertIsArray($result);\n    }\n\n    public function testgetCurrentClientAreaTheme()\n    {\n        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Service')\n            ->setMethods(array('getCurrentClientAreaThemeCode', 'getTheme'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getCurrentClientAreaThemeCode');\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getTheme')\n            ->will($this->returnValue($themeMock));\n\n        $result = $serviceMock->getCurrentClientAreaTheme();\n        $this->assertInstanceOf('\\Box\\Mod\\Theme\\Model\\Theme', $result);\n    }\n\n    public function testgetCurrentClientAreaThemeCode()\n    {\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(array()));\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $this->service->setDi($di);\n\n        $result = $this->service->getCurrentClientAreaThemeCode();\n        $this->assertIsString($result);\n        $this->assertEquals('huraga', $result);\n    }\n\n\n}\n"], "filenames": ["src/library/Box/Pagination.php", "src/modules/Client/Service.php", "src/modules/Theme/Controller/Admin.php", "src/modules/Theme/Service.php", "tests/integration/bb-modules/mod_theme/ServiceTest.php", "tests/modules/Theme/Controller/AdminTest.php", "tests/modules/Theme/ServiceTest.php"], "buggy_code_start_loc": [36, 179, 66, 164, 35, 110, 378], "buggy_code_end_loc": [71, 182, 67, 182, 115, 205, 409], "fixing_code_start_loc": [36, 180, 65, 163, 34, 109, 377], "fixing_code_end_loc": [85, 186, 65, 163, 95, 201, 377], "type": "CWE-434", "message": "Unrestricted Upload of File with Dangerous Type in GitHub repository fossbilling/fossbilling prior to 0.5.3.", "other": {"cve": {"id": "CVE-2023-3491", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-30T22:15:10.393", "lastModified": "2023-07-07T03:19:34.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unrestricted Upload of File with Dangerous Type in GitHub repository fossbilling/fossbilling prior to 0.5.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:H/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fossbilling:fossbilling:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.3", "matchCriteriaId": "FBB9E4E5-B7F6-4CD5-BC9B-BEB53D588084"}]}]}], "references": [{"url": "https://github.com/fossbilling/fossbilling/commit/2ddb7438ee0d05f9a9d01555edcfed820960f114", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/043bd900-ac78-44d2-a340-84ddd0bc4a1d", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fossbilling/fossbilling/commit/2ddb7438ee0d05f9a9d01555edcfed820960f114"}}