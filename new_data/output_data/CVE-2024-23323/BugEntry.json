{"buggy_code": ["date: Pending\n\nbehavior_changes:\n# *Changes that are expected to cause an incompatibility if applicable; deployment changes are likely required*\n\nminor_behavior_changes:\n# *Changes that may cause incompatibilities for some users, but should not for most*\n- area: adaptive concurrency filter stats\n  change: |\n    Multiply the gradient value stat by 1000 to make it more granular (values will range between 500 and 2000).\n- area: dns\n  change: |\n    Allowing <envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_min_refresh_rate>` to go as low as 1s.\n- area: upstream\n  change: |\n    Upstream now excludes hosts set to ``DRAINING`` state via EDS from load balancing and panic routing\n    threshold calculation. This feature can be disabled by setting\n    ``envoy.reloadable_features.exclude_host_in_eds_status_draining`` to false.\n- area: golang\n  change: |\n    Change ``RegisterHttpFilterConfigFactoryAndParser`` to ``RegisterHttpFilterFactoryAndConfigParser``.\n- area: QUIC\n  change: |\n    Port migration is default turned off. QUIC client connections will no longer attempt to migrate to a new port when connections\n    is degrading. Can be manually turned on via\n    :ref:`port_migration <envoy_v3_api_field_config.core.v3.QuicProtocolOptions.num_timeouts_to_trigger_port_migration>`.\n- area: aws\n  change: |\n    AWS region string is now retrieved from environment and profile consistently within aws_request_signer and\n    grpc_credentials/aws_iam extensions. Region field in aws_request_signer is now optional, explicitly configured\n    xDS region will take preference. aws_request_signer documentation now reflects the region chain.\n\nbug_fixes:\n# *Changes expected to improve the state of the world and are unlikely to have negative effects*\n- area: tracers\n  change: |\n    use unary RPC calls for OpenTelemetry trace exports, rather than client-side streaming connections.\n- area: load balancing\n  change: |\n    Added randomization in locality load-balancing initialization. This helps desynchronizing Envoys across\n    a fleet by randomizing the scheduler starting point. This can be temporarily reverted by setting runtime guard\n    ``envoy.reloadable_features.edf_lb_locality_scheduler_init_fix`` to false.\n- area: UDP and TCP tunneling\n  change: |\n    fixed a bug where second HTTP response headers received would cause Envoy to crash in cases where\n    ``propagate_response_headers`` and retry configurations are enabled at the same time, and an upstream\n    request is retried multiple times.\n- area: tracing\n  change: |\n    Prevent Envoy from crashing at start up when the OpenTelemetry environment resource detector cannot detect any attributes.\n- area: proxy protocol\n  change: |\n    Fixed a crash when Envoy is configured for PROXY protocol on both a listener and cluster, and the listener receives\n    a PROXY protocol header with address type LOCAL (typically used for health checks).\n\nremoved_config_or_runtime:\n# *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`\n- area: http\n  change: |\n    Removed ``envoy.reloadable_features.allow_absolute_url_with_mixed_scheme`` runtime flag and legacy code paths.\n- area: active health check\n  change: |\n    Removed ``envoy.reloadable_features.keep_endpoint_active_hc_status_on_locality_update`` runtime flag and legacy code paths.\n- area: http1\n  change: |\n    Removed ``envoy.reloadable_features.http1_allow_codec_error_response_after_1xx_headers`` runtime flag and legacy code paths.\n- area: overload manager\n  change: |\n    removed ``envoy.reloadable_features.overload_manager_error_unknown_action`` and legacy code paths.\n- area: http\n  change: |\n    Removed ``envoy_reloadable_features_append_xfh_idempotent`` runtime flag and legacy code paths.\n- area: resource_monitors\n  change: |\n    removed ``envoy.reloadable_features.count_unused_mapped_pages_as_free`` runtime flag  and legacy code paths.\n\nnew_features:\n- area: aws_request_signing\n  change: |\n    Update ``aws_request_signing`` filter to support use as an upstream HTTP filter. This allows successful calculation of\n    signatures after the forwarding stage has completed, particularly if the path element is modified.\n- area: aws_lambda\n  change: |\n    Update ``aws_lambda`` filter to support use as an upstream HTTP filter. This allows successful calculation of\n    signatures after the forwarding stage has completed, particularly if the path element is modified.\n- area: grpc reverse bridge\n  change: |\n    Change HTTP status to 200 to respect the gRPC protocol. This may cause problems for incorrect gRPC clients expecting the filter\n    to preserve HTTP 1.1 responses.  This behavioral change can be temporarily reverted by setting runtime guard\n    ``envoy.reloadable_features.grpc_http1_reverse_bridge_change_http_status`` to false.\n- area: quic\n  change: |\n    Added QUIC protocol option :ref:`send_disable_active_migration\n    <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.send_disable_active_migration>` to make the server send clients a transport\n    parameter to discourage client endpoints from active migration.\n- area: ext_proc\n  change: |\n    implemented\n    :ref:`request_attributes <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.request_attributes>`\n    and\n    :ref:`response_attributes <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.response_attributes>`\n    config APIs to enable sending and receiving attributes to/from the external processing server.\n- area: access log\n  change: |\n    added support for :ref:`%UPSTREAM_CONNECTION_ID% <config_access_log_format_upstream_connection_id>` for the upstream connection\n    identifier.\n- area: aws_lambda\n  change: |\n    Added :ref:`host_rewrite <envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.host_rewrite>` config to be used\n    during signature.\n- area: ext_proc\n  change: |\n    added\n    :ref:`metadata_options <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.metadata_options>`\n    config API to enable sending and receiving metadata from/to the external processing server. Both typed and untyped dynamic\n    metadata may be sent to the server. If\n    :ref:`receiving_namespaces <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.MetadataOptions.receiving_namespaces>`\n    is defined, returned metadata may be written to the specified allowed namespaces.\n- area: monitoring\n  change: |\n    Add ``Envoy::ExecutionContext``, which is notified by ``ScopeTrackerScopeState``'s constructor and destructor. This feature is\n    disabled by default, it can be enabled by runtime feature flag ``envoy.restart_features.enable_execution_context``. For more details,\n    please see https://github.com/envoyproxy/envoy/issues/32012.\n- area: rbac\n  change: |\n    Added :ref:`uri_template<envoy_v3_api_field_config.rbac.v3.Permission.uri_template>` which uses existing\n    :ref:`UriTemplateMatchConfig<envoy_v3_api_msg_extensions.path.match.uri_template.v3.UriTemplateMatchConfig>`\n    to allow use of glob patterns for URI path matching in RBAC.\n- area: upstream\n  change: |\n    Added :ref:`selection_method <envoy_v3_api_msg_extensions.load_balancing_policies.least_request.v3.LeastRequest>`\n    option to the least request load balancer. If set to ``FULL_SCAN``,\n    Envoy will select the host with the fewest active requests from the entire host set rather than\n    :ref:`choice_count <envoy_v3_api_msg_extensions.load_balancing_policies.least_request.v3.LeastRequest>`\n    random choices.\n\ndeprecated:\n"], "fixing_code": ["date: Pending\n\nbehavior_changes:\n# *Changes that are expected to cause an incompatibility if applicable; deployment changes are likely required*\n\nminor_behavior_changes:\n# *Changes that may cause incompatibilities for some users, but should not for most*\n- area: adaptive concurrency filter stats\n  change: |\n    Multiply the gradient value stat by 1000 to make it more granular (values will range between 500 and 2000).\n- area: dns\n  change: |\n    Allowing <envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_min_refresh_rate>` to go as low as 1s.\n- area: upstream\n  change: |\n    Upstream now excludes hosts set to ``DRAINING`` state via EDS from load balancing and panic routing\n    threshold calculation. This feature can be disabled by setting\n    ``envoy.reloadable_features.exclude_host_in_eds_status_draining`` to false.\n- area: golang\n  change: |\n    Change ``RegisterHttpFilterConfigFactoryAndParser`` to ``RegisterHttpFilterFactoryAndConfigParser``.\n- area: QUIC\n  change: |\n    Port migration is default turned off. QUIC client connections will no longer attempt to migrate to a new port when connections\n    is degrading. Can be manually turned on via\n    :ref:`port_migration <envoy_v3_api_field_config.core.v3.QuicProtocolOptions.num_timeouts_to_trigger_port_migration>`.\n- area: aws\n  change: |\n    AWS region string is now retrieved from environment and profile consistently within aws_request_signer and\n    grpc_credentials/aws_iam extensions. Region field in aws_request_signer is now optional, explicitly configured\n    xDS region will take preference. aws_request_signer documentation now reflects the region chain.\n\nbug_fixes:\n# *Changes expected to improve the state of the world and are unlikely to have negative effects*\n- area: tracers\n  change: |\n    use unary RPC calls for OpenTelemetry trace exports, rather than client-side streaming connections.\n- area: load balancing\n  change: |\n    Added randomization in locality load-balancing initialization. This helps desynchronizing Envoys across\n    a fleet by randomizing the scheduler starting point. This can be temporarily reverted by setting runtime guard\n    ``envoy.reloadable_features.edf_lb_locality_scheduler_init_fix`` to false.\n- area: UDP and TCP tunneling\n  change: |\n    fixed a bug where second HTTP response headers received would cause Envoy to crash in cases where\n    ``propagate_response_headers`` and retry configurations are enabled at the same time, and an upstream\n    request is retried multiple times.\n- area: tracing\n  change: |\n    Prevent Envoy from crashing at start up when the OpenTelemetry environment resource detector cannot detect any attributes.\n- area: proxy protocol\n  change: |\n    Fixed a crash when Envoy is configured for PROXY protocol on both a listener and cluster, and the listener receives\n    a PROXY protocol header with address type LOCAL (typically used for health checks).\n- area: url matching\n  change: |\n    Fixed excessive CPU utilization when using regex URL template matcher.\n\nremoved_config_or_runtime:\n# *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`\n- area: http\n  change: |\n    Removed ``envoy.reloadable_features.allow_absolute_url_with_mixed_scheme`` runtime flag and legacy code paths.\n- area: active health check\n  change: |\n    Removed ``envoy.reloadable_features.keep_endpoint_active_hc_status_on_locality_update`` runtime flag and legacy code paths.\n- area: http1\n  change: |\n    Removed ``envoy.reloadable_features.http1_allow_codec_error_response_after_1xx_headers`` runtime flag and legacy code paths.\n- area: overload manager\n  change: |\n    removed ``envoy.reloadable_features.overload_manager_error_unknown_action`` and legacy code paths.\n- area: http\n  change: |\n    Removed ``envoy_reloadable_features_append_xfh_idempotent`` runtime flag and legacy code paths.\n- area: resource_monitors\n  change: |\n    removed ``envoy.reloadable_features.count_unused_mapped_pages_as_free`` runtime flag  and legacy code paths.\n\nnew_features:\n- area: aws_request_signing\n  change: |\n    Update ``aws_request_signing`` filter to support use as an upstream HTTP filter. This allows successful calculation of\n    signatures after the forwarding stage has completed, particularly if the path element is modified.\n- area: aws_lambda\n  change: |\n    Update ``aws_lambda`` filter to support use as an upstream HTTP filter. This allows successful calculation of\n    signatures after the forwarding stage has completed, particularly if the path element is modified.\n- area: grpc reverse bridge\n  change: |\n    Change HTTP status to 200 to respect the gRPC protocol. This may cause problems for incorrect gRPC clients expecting the filter\n    to preserve HTTP 1.1 responses.  This behavioral change can be temporarily reverted by setting runtime guard\n    ``envoy.reloadable_features.grpc_http1_reverse_bridge_change_http_status`` to false.\n- area: quic\n  change: |\n    Added QUIC protocol option :ref:`send_disable_active_migration\n    <envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.send_disable_active_migration>` to make the server send clients a transport\n    parameter to discourage client endpoints from active migration.\n- area: ext_proc\n  change: |\n    implemented\n    :ref:`request_attributes <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.request_attributes>`\n    and\n    :ref:`response_attributes <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.response_attributes>`\n    config APIs to enable sending and receiving attributes to/from the external processing server.\n- area: access log\n  change: |\n    added support for :ref:`%UPSTREAM_CONNECTION_ID% <config_access_log_format_upstream_connection_id>` for the upstream connection\n    identifier.\n- area: aws_lambda\n  change: |\n    Added :ref:`host_rewrite <envoy_v3_api_field_extensions.filters.http.aws_lambda.v3.Config.host_rewrite>` config to be used\n    during signature.\n- area: ext_proc\n  change: |\n    added\n    :ref:`metadata_options <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.metadata_options>`\n    config API to enable sending and receiving metadata from/to the external processing server. Both typed and untyped dynamic\n    metadata may be sent to the server. If\n    :ref:`receiving_namespaces <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.MetadataOptions.receiving_namespaces>`\n    is defined, returned metadata may be written to the specified allowed namespaces.\n- area: monitoring\n  change: |\n    Add ``Envoy::ExecutionContext``, which is notified by ``ScopeTrackerScopeState``'s constructor and destructor. This feature is\n    disabled by default, it can be enabled by runtime feature flag ``envoy.restart_features.enable_execution_context``. For more details,\n    please see https://github.com/envoyproxy/envoy/issues/32012.\n- area: rbac\n  change: |\n    Added :ref:`uri_template<envoy_v3_api_field_config.rbac.v3.Permission.uri_template>` which uses existing\n    :ref:`UriTemplateMatchConfig<envoy_v3_api_msg_extensions.path.match.uri_template.v3.UriTemplateMatchConfig>`\n    to allow use of glob patterns for URI path matching in RBAC.\n- area: upstream\n  change: |\n    Added :ref:`selection_method <envoy_v3_api_msg_extensions.load_balancing_policies.least_request.v3.LeastRequest>`\n    option to the least request load balancer. If set to ``FULL_SCAN``,\n    Envoy will select the host with the fewest active requests from the entire host set rather than\n    :ref:`choice_count <envoy_v3_api_msg_extensions.load_balancing_policies.least_request.v3.LeastRequest>`\n    random choices.\n\ndeprecated:\n"], "filenames": ["changelogs/current.yaml"], "buggy_code_start_loc": [54], "buggy_code_end_loc": [54], "fixing_code_start_loc": [55], "fixing_code_end_loc": [58], "type": "CWE-400", "message": "Envoy is a high-performance edge/middle/service proxy. The regex expression is compiled for every request and can result in high CPU usage and increased request latency when multiple routes are configured with such matchers. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2024-23323", "sourceIdentifier": "security-advisories@github.com", "published": "2024-02-09T23:15:08.977", "lastModified": "2024-02-15T04:48:09.937", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Envoy is a high-performance edge/middle/service proxy. The regex expression is compiled for every request and can result in high CPU usage and increased request latency when multiple routes are configured with such matchers. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "Envoy es un proxy de servicio/intermedio/perimetral de alto rendimiento. La expresi\u00f3n regular se compila para cada solicitud y puede provocar un uso elevado de la CPU y una mayor latencia de la solicitud cuando se configuran varias rutas con dichos comparadores. Este problema se solucion\u00f3 en las versiones 1.29.1, 1.28.1, 1.27.3 y 1.26.7. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-400"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1176"}, {"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:envoyproxy:envoy:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.26.0", "versionEndExcluding": "1.26.7", "matchCriteriaId": "0324E095-98B4-4B78-9242-989EC45E011F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:envoyproxy:envoy:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.27.0", "versionEndExcluding": "1.27.3", "matchCriteriaId": "2E838B16-C6DC-4701-B955-D96D4CAEF4F6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:envoyproxy:envoy:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.28.0", "versionEndExcluding": "1.28.1", "matchCriteriaId": "770D5713-48E3-4F9B-B05C-9CB9C6B272E3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:envoyproxy:envoy:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.29.0", "versionEndExcluding": "1.29.1", "matchCriteriaId": "638F3351-3ACD-47C8-9B8F-568A930FAECA"}]}]}], "references": [{"url": "https://github.com/envoyproxy/envoy/commit/71eeee8f0f0132f39e402b0ee23b361ee2f4e645", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-x278-4w4x-r7ch", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/envoyproxy/envoy/commit/71eeee8f0f0132f39e402b0ee23b361ee2f4e645"}}