{"buggy_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Toolbox\\VersionParser;\n\nclass GLPINetwork extends CommonGLPI\n{\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n        return 'GLPI Network';\n    }\n\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n        if ($item->getType() == 'Config') {\n            $glpiNetwork = new self();\n            $glpiNetwork->showForConfig();\n        }\n        return true;\n    }\n\n    public static function showForConfig()\n    {\n        if (!Config::canView()) {\n            return;\n        }\n\n        $registration_key = self::getRegistrationKey();\n\n        $canedit = Config::canUpdate();\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(Config::class) . \"\\\" method='post'>\";\n        }\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='2'>\" . __('Registration') . \"</th></tr>\";\n\n        if ($registration_key === \"\") {\n            echo \"<tr><td colspan='2'>\" .\n            __('A registration key is needed to use advanced feature (like marketplace) in GLPI') . \"<br><br>\" .\n            \"<a href='\" . GLPI_NETWORK_SERVICES . \"'>\" . sprintf(__('Register on %1$s!'), 'GLPI Network') . \"</a><br>\" .\n            __(\"And retrieve your key to paste it below\") .\n            \"</td></tr>\";\n        }\n\n        $curl_error = null;\n        if (!self::isServicesAvailable($curl_error)) {\n            echo '<tr>';\n            echo '<td colspan=\"2\">';\n            echo '<div class=\"warning\">';\n            echo '<i class=\"fa fa-exclamation-triangle fa-2x\"></i>';\n            echo sprintf(__('%1$s services website seems not available from your network or offline'), 'GLPI Network');\n            if ($curl_error !== null) {\n                echo '<br />';\n                echo sprintf(__('Error was: %s'), $curl_error);\n            }\n            echo '</div>';\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='glpinetwork_registration_key'>\" . __('Registration key') . \"</label></td>\";\n        echo \"<td>\" . Html::textarea(['name' => 'glpinetwork_registration_key', 'value' => $registration_key, 'display' => false]) . \"</td>\";\n        echo \"</tr>\";\n\n        if ($registration_key !== \"\") {\n            $informations = self::getRegistrationInformations(true);\n            if (!empty($informations['validation_message'])) {\n                echo \"<tr class='tab_bg_2'>\";\n                echo \"<td></td>\";\n                echo \"<td>\";\n                echo \"<div class=' \" . (($informations['is_valid'] && $informations['subscription']['is_running'] ?? false) ? 'ok' : 'red') . \"'> \";\n                echo \"<i class='fa fa-info-circle'></i>\";\n                echo $informations['validation_message'];\n                echo \"</div>\";\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Subscription') . \"</td>\";\n            echo \"<td>\" . ($informations['subscription'] !== null ? $informations['subscription']['title'] : __('Unknown')) . \"</td>\";\n            echo \"</tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Registered by') . \"</td>\";\n            echo \"<td>\" . ($informations['owner'] !== null ? $informations['owner']['name'] : __('Unknown')) . \"</td>\";\n            echo \"</tr>\";\n        }\n\n        if ($canedit) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='2' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n    /**\n     * Get GLPI User Agent in expected format from GLPI Network services.\n     *\n     * @return string\n     */\n    public static function getGlpiUserAgent(): string\n    {\n        $version = VersionParser::getNormalizedVersion(GLPI_VERSION, false);\n        $comments = sprintf('installation-mode:%s', GLPI_INSTALL_MODE);\n        if (!empty(GLPI_USER_AGENT_EXTRA_COMMENTS)) {\n           // append extra comments (remove '(' and ')' chars to not break UA string)\n            $comments .= '; ' . preg_replace('/\\(\\)/', ' ', GLPI_USER_AGENT_EXTRA_COMMENTS);\n        }\n        return sprintf('GLPI/%s (%s)', $version, $comments);\n    }\n\n    /**\n     * Get GLPI Network UID to pass in requests to GLPI Network Services.\n     *\n     * @return string\n     */\n    public static function getGlpiNetworkUid(): string\n    {\n        return Config::getUuid('glpi_network');\n    }\n\n    /**\n     * Get GLPI Network registration key.\n     *\n     * A registration key is a base64 encoded JSON string with a key 'signature' containing the binary\n     * signature of the whole.\n     *\n     * @return string\n     */\n    public static function getRegistrationKey(): string\n    {\n        global $CFG_GLPI;\n        return (new GLPIKey())->decrypt($CFG_GLPI['glpinetwork_registration_key'] ?? '');\n    }\n\n    /**\n     * Get GLPI Network registration information.\n     *\n     * @param bool $force_refresh\n     *\n     * @return array  Registration data:\n     *    - is_valid (boolean):          indicates if key is valid;\n     *    - validation_message (string): message related to validation state;\n     *    - owner (array):               owner attributes;\n     *    - subscription (array):        subscription attributes.\n     */\n    public static function getRegistrationInformations(bool $force_refresh = false)\n    {\n        global $GLPI_CACHE;\n\n        $registration_key = self::getRegistrationKey();\n        $lang = preg_replace('/^([a-z]+)_.+$/', '$1', $_SESSION[\"glpilanguage\"]);\n\n        $cache_key = sprintf('registration_%s_%s_informations', sha1($registration_key), $lang);\n        if (!$force_refresh && ($informations = $GLPI_CACHE->get($cache_key)) !== null) {\n            return $informations;\n        }\n\n        $informations = [\n            'is_valid'           => false,\n            'validation_message' => null,\n            'owner'              => null,\n            'subscription'       => null,\n        ];\n\n        if ($registration_key === '') {\n            return $informations;\n        }\n\n       // Verify registration from registration API\n        $error_message = null;\n        $registration_response = Toolbox::callCurl(\n            rtrim(GLPI_NETWORK_REGISTRATION_API_URL, '/') . '/info',\n            [\n                CURLOPT_HTTPHEADER => [\n                    'Accept:application/json',\n                    'Accept-Language: ' . $lang,\n                    'Content-Type:application/json',\n                    'User-Agent:' . self::getGlpiUserAgent(),\n                    'X-Registration-Key:' . $registration_key,\n                    'X-Glpi-Network-Uid:' . self::getGlpiNetworkUid(),\n                ]\n            ],\n            $error_message\n        );\n\n        $valid_json = false;\n        if ($error_message === null) {\n            if (\\Toolbox::isJSON($registration_response)) {\n                $valid_json = true;\n                $registration_data = json_decode($registration_response, true);\n            }\n        }\n\n        if (\n            $error_message !== null || !$valid_json\n            || !is_array($registration_data) || !array_key_exists('is_valid', $registration_data)\n        ) {\n            $informations['validation_message'] = __('Unable to fetch registration information.');\n            trigger_error(\n                sprintf(\n                    \"Unable to fetch registration information.\\nError message:%s\\nResponse:\\n%s\",\n                    $error_message,\n                    $registration_response\n                ),\n                E_USER_WARNING\n            );\n            return $informations;\n        }\n\n        $informations['is_valid']           = $registration_data['is_valid'];\n        if (array_key_exists('validation_message', $registration_data)) {\n            $informations['validation_message'] = $registration_data['validation_message'];\n        } else if (!$registration_data['is_valid']) {\n            $informations['validation_message'] = __('The registration key is invalid.');\n        } else if (!$registration_data['subscription']['is_running']) {\n            $informations['validation_message'] = __('The registration key refers to a terminated subscription.');\n        } else {\n            $informations['validation_message'] = __('The registration key is valid.');\n        }\n        $informations['owner']              = $registration_data['owner'];\n        $informations['subscription']       = $registration_data['subscription'];\n\n        $GLPI_CACHE->set($cache_key, $informations, new \\DateInterval('P1D')); // Cache for one day\n\n        return $informations;\n    }\n\n    /**\n     * Check if GLPI Network registration is existing and valid.\n     *\n     * @return boolean\n     */\n    public static function isRegistered(): bool\n    {\n        return self::getRegistrationInformations()['is_valid'];\n    }\n\n    public static function showInstallMessage()\n    {\n        return nl2br(sprintf(\n            __(\"You need help to integrate GLPI in your IT, have a bug fixed or benefit from pre-configured rules or dictionaries?\\n\\n\" .\n            \"We provide the %s space for you.\\n\" .\n            \"GLPI-Network is a commercial service that includes a subscription for tier 3 support, ensuring the correction of bugs encountered with a commitment time.\\n\\n\" .\n            \"In this same space, you will be able to <b>contact an official partner</b> to help you with your GLPI integration.\"),\n            \"<a href='\" . GLPI_NETWORK_SERVICES . \"' target='_blank'>\" . GLPI_NETWORK_SERVICES . \"</a>\"\n        ));\n    }\n\n    public static function getSupportPromoteMessage()\n    {\n        return nl2br(sprintf(\n            __(\"Having troubles setting up an advanced GLPI module?\\n\" .\n            \"We can help you solve them. Sign up for support on %s.\"),\n            \"<a href='\" . GLPI_NETWORK_SERVICES . \"' target='_blank'>\" . GLPI_NETWORK_SERVICES . \"</a>\"\n        ));\n    }\n\n    public static function addErrorMessageAfterRedirect()\n    {\n        Session::addMessageAfterRedirect(self::getSupportPromoteMessage(), false, ERROR);\n    }\n\n    /**\n     * Executes a curl call\n     *\n     * @param string $curl_error  will contains original curl error string if an error occurs\n     *\n     * @return boolean\n     */\n    public static function isServicesAvailable(&$curl_error = null)\n    {\n        $error_msg = null;\n        $content = \\Toolbox::callCurl(GLPI_NETWORK_REGISTRATION_API_URL, [], $error_msg, $curl_error);\n        return strlen($content) > 0;\n    }\n\n    public static function getOffers(bool $force_refresh = false): array\n    {\n        global $GLPI_CACHE;\n\n        $lang = preg_replace('/^([a-z]+)_.+$/', '$1', $_SESSION[\"glpilanguage\"]);\n        $cache_key = 'glpi_network_offers_' . $lang;\n\n        if (!$force_refresh && ($offers = $GLPI_CACHE->get($cache_key)) !== null) {\n            return $offers;\n        }\n\n        $error_message = null;\n        $response = \\Toolbox::callCurl(\n            rtrim(GLPI_NETWORK_REGISTRATION_API_URL, '/') . '/offers',\n            [\n                CURLOPT_HTTPHEADER => [\n                    'Accept:application/json',\n                    'Accept-Language: ' . $lang,\n                ]\n            ],\n            $error_message\n        );\n\n        $valid_json = false;\n        $offers = null;\n        if ($error_message === null) {\n            if (\\Toolbox::isJSON($response)) {\n                $valid_json = true;\n                $offers = json_decode($response);\n            }\n        }\n\n        if ($error_message !== null || !$valid_json || !is_array($offers)) {\n            trigger_error(\n                sprintf(\n                    \"Unable to fetch offers information.\\nError message:%s\\nResponse:\\n%s\",\n                    $error_message,\n                    $response\n                ),\n                E_USER_WARNING\n            );\n            return [];\n        }\n\n        $GLPI_CACHE->set($cache_key, $offers, HOUR_TIMESTAMP);\n\n        return $offers;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Toolbox\\Sanitizer;\nuse Glpi\\Toolbox\\VersionParser;\n\nclass GLPINetwork extends CommonGLPI\n{\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n        return 'GLPI Network';\n    }\n\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n        if ($item->getType() == 'Config') {\n            $glpiNetwork = new self();\n            $glpiNetwork->showForConfig();\n        }\n        return true;\n    }\n\n    public static function showForConfig()\n    {\n        if (!Config::canView()) {\n            return;\n        }\n\n        $registration_key = self::getRegistrationKey();\n\n        $canedit = Config::canUpdate();\n        if ($canedit) {\n            echo \"<form name='form' action=\\\"\" . Toolbox::getItemTypeFormURL(Config::class) . \"\\\" method='post'>\";\n        }\n        echo \"<div class='center' id='tabsbody'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th colspan='2'>\" . __('Registration') . \"</th></tr>\";\n\n        if ($registration_key === \"\") {\n            echo \"<tr><td colspan='2'>\" .\n            __('A registration key is needed to use advanced feature (like marketplace) in GLPI') . \"<br><br>\" .\n            \"<a href='\" . GLPI_NETWORK_SERVICES . \"'>\" . sprintf(__('Register on %1$s!'), 'GLPI Network') . \"</a><br>\" .\n            __(\"And retrieve your key to paste it below\") .\n            \"</td></tr>\";\n        }\n\n        $curl_error = null;\n        if (!self::isServicesAvailable($curl_error)) {\n            echo '<tr>';\n            echo '<td colspan=\"2\">';\n            echo '<div class=\"warning\">';\n            echo '<i class=\"fa fa-exclamation-triangle fa-2x\"></i>';\n            echo sprintf(__('%1$s services website seems not available from your network or offline'), 'GLPI Network');\n            if ($curl_error !== null) {\n                echo '<br />';\n                echo sprintf(__('Error was: %s'), $curl_error);\n            }\n            echo '</div>';\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td><label for='glpinetwork_registration_key'>\" . __('Registration key') . \"</label></td>\";\n        echo \"<td>\" . Html::textarea(['name' => 'glpinetwork_registration_key', 'value' => $registration_key, 'display' => false]) . \"</td>\";\n        echo \"</tr>\";\n\n        if ($registration_key !== \"\") {\n            $informations = self::getRegistrationInformations(true);\n            if (!empty($informations['validation_message'])) {\n                echo \"<tr class='tab_bg_2'>\";\n                echo \"<td></td>\";\n                echo \"<td>\";\n                echo \"<div class=' \" . (($informations['is_valid'] && $informations['subscription']['is_running'] ?? false) ? 'ok' : 'red') . \"'> \";\n                echo \"<i class='fa fa-info-circle'></i>\";\n                echo Sanitizer::encodeHtmlSpecialChars($informations['validation_message']);\n                echo \"</div>\";\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Subscription') . \"</td>\";\n            echo \"<td>\" . ($informations['subscription'] !== null ? Sanitizer::encodeHtmlSpecialChars($informations['subscription']['title']) : __('Unknown')) . \"</td>\";\n            echo \"</tr>\";\n\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Registered by') . \"</td>\";\n            echo \"<td>\" . ($informations['owner'] !== null ? Sanitizer::encodeHtmlSpecialChars($informations['owner']['name']) : __('Unknown')) . \"</td>\";\n            echo \"</tr>\";\n        }\n\n        if ($canedit) {\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td colspan='2' class='center'>\";\n            echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . _sx('button', 'Save') . \"\\\">\";\n            echo \"</td></tr>\";\n        }\n\n        echo \"</table></div>\";\n        Html::closeForm();\n    }\n\n    /**\n     * Get GLPI User Agent in expected format from GLPI Network services.\n     *\n     * @return string\n     */\n    public static function getGlpiUserAgent(): string\n    {\n        $version = VersionParser::getNormalizedVersion(GLPI_VERSION, false);\n        $comments = sprintf('installation-mode:%s', GLPI_INSTALL_MODE);\n        if (!empty(GLPI_USER_AGENT_EXTRA_COMMENTS)) {\n           // append extra comments (remove '(' and ')' chars to not break UA string)\n            $comments .= '; ' . preg_replace('/\\(\\)/', ' ', GLPI_USER_AGENT_EXTRA_COMMENTS);\n        }\n        return sprintf('GLPI/%s (%s)', $version, $comments);\n    }\n\n    /**\n     * Get GLPI Network UID to pass in requests to GLPI Network Services.\n     *\n     * @return string\n     */\n    public static function getGlpiNetworkUid(): string\n    {\n        return Config::getUuid('glpi_network');\n    }\n\n    /**\n     * Get GLPI Network registration key.\n     *\n     * A registration key is a base64 encoded JSON string with a key 'signature' containing the binary\n     * signature of the whole.\n     *\n     * @return string\n     */\n    public static function getRegistrationKey(): string\n    {\n        global $CFG_GLPI;\n        return (new GLPIKey())->decrypt($CFG_GLPI['glpinetwork_registration_key'] ?? '');\n    }\n\n    /**\n     * Get GLPI Network registration information.\n     *\n     * @param bool $force_refresh\n     *\n     * @return array  Registration data:\n     *    - is_valid (boolean):          indicates if key is valid;\n     *    - validation_message (string): message related to validation state;\n     *    - owner (array):               owner attributes;\n     *    - subscription (array):        subscription attributes.\n     */\n    public static function getRegistrationInformations(bool $force_refresh = false)\n    {\n        global $GLPI_CACHE;\n\n        $registration_key = self::getRegistrationKey();\n        $lang = preg_replace('/^([a-z]+)_.+$/', '$1', $_SESSION[\"glpilanguage\"]);\n\n        $cache_key = sprintf('registration_%s_%s_informations', sha1($registration_key), $lang);\n        if (!$force_refresh && ($informations = $GLPI_CACHE->get($cache_key)) !== null) {\n            return $informations;\n        }\n\n        $informations = [\n            'is_valid'           => false,\n            'validation_message' => null,\n            'owner'              => null,\n            'subscription'       => null,\n        ];\n\n        if ($registration_key === '') {\n            return $informations;\n        }\n\n       // Verify registration from registration API\n        $error_message = null;\n        $registration_response = Toolbox::callCurl(\n            rtrim(GLPI_NETWORK_REGISTRATION_API_URL, '/') . '/info',\n            [\n                CURLOPT_HTTPHEADER => [\n                    'Accept:application/json',\n                    'Accept-Language: ' . $lang,\n                    'Content-Type:application/json',\n                    'User-Agent:' . self::getGlpiUserAgent(),\n                    'X-Registration-Key:' . $registration_key,\n                    'X-Glpi-Network-Uid:' . self::getGlpiNetworkUid(),\n                ]\n            ],\n            $error_message\n        );\n\n        $valid_json = false;\n        if ($error_message === null) {\n            if (\\Toolbox::isJSON($registration_response)) {\n                $valid_json = true;\n                $registration_data = json_decode($registration_response, true);\n            }\n        }\n\n        if (\n            $error_message !== null || !$valid_json\n            || !is_array($registration_data) || !array_key_exists('is_valid', $registration_data)\n        ) {\n            $informations['validation_message'] = __('Unable to fetch registration information.');\n            trigger_error(\n                sprintf(\n                    \"Unable to fetch registration information.\\nError message:%s\\nResponse:\\n%s\",\n                    $error_message,\n                    $registration_response\n                ),\n                E_USER_WARNING\n            );\n            return $informations;\n        }\n\n        $informations['is_valid']           = $registration_data['is_valid'];\n        if (array_key_exists('validation_message', $registration_data)) {\n            $informations['validation_message'] = $registration_data['validation_message'];\n        } else if (!$registration_data['is_valid']) {\n            $informations['validation_message'] = __('The registration key is invalid.');\n        } else if (!$registration_data['subscription']['is_running']) {\n            $informations['validation_message'] = __('The registration key refers to a terminated subscription.');\n        } else {\n            $informations['validation_message'] = __('The registration key is valid.');\n        }\n        $informations['owner']              = $registration_data['owner'];\n        $informations['subscription']       = $registration_data['subscription'];\n\n        $GLPI_CACHE->set($cache_key, $informations, new \\DateInterval('P1D')); // Cache for one day\n\n        return $informations;\n    }\n\n    /**\n     * Check if GLPI Network registration is existing and valid.\n     *\n     * @return boolean\n     */\n    public static function isRegistered(): bool\n    {\n        return self::getRegistrationInformations()['is_valid'];\n    }\n\n    public static function showInstallMessage()\n    {\n        return nl2br(sprintf(\n            __(\"You need help to integrate GLPI in your IT, have a bug fixed or benefit from pre-configured rules or dictionaries?\\n\\n\" .\n            \"We provide the %s space for you.\\n\" .\n            \"GLPI-Network is a commercial service that includes a subscription for tier 3 support, ensuring the correction of bugs encountered with a commitment time.\\n\\n\" .\n            \"In this same space, you will be able to <b>contact an official partner</b> to help you with your GLPI integration.\"),\n            \"<a href='\" . GLPI_NETWORK_SERVICES . \"' target='_blank'>\" . GLPI_NETWORK_SERVICES . \"</a>\"\n        ));\n    }\n\n    public static function getSupportPromoteMessage()\n    {\n        return nl2br(sprintf(\n            __(\"Having troubles setting up an advanced GLPI module?\\n\" .\n            \"We can help you solve them. Sign up for support on %s.\"),\n            \"<a href='\" . GLPI_NETWORK_SERVICES . \"' target='_blank'>\" . GLPI_NETWORK_SERVICES . \"</a>\"\n        ));\n    }\n\n    public static function addErrorMessageAfterRedirect()\n    {\n        Session::addMessageAfterRedirect(self::getSupportPromoteMessage(), false, ERROR);\n    }\n\n    /**\n     * Executes a curl call\n     *\n     * @param string $curl_error  will contains original curl error string if an error occurs\n     *\n     * @return boolean\n     */\n    public static function isServicesAvailable(&$curl_error = null)\n    {\n        $error_msg = null;\n        $content = \\Toolbox::callCurl(GLPI_NETWORK_REGISTRATION_API_URL, [], $error_msg, $curl_error);\n        return strlen($content) > 0;\n    }\n\n    public static function getOffers(bool $force_refresh = false): array\n    {\n        global $GLPI_CACHE;\n\n        $lang = preg_replace('/^([a-z]+)_.+$/', '$1', $_SESSION[\"glpilanguage\"]);\n        $cache_key = 'glpi_network_offers_' . $lang;\n\n        if (!$force_refresh && ($offers = $GLPI_CACHE->get($cache_key)) !== null) {\n            return $offers;\n        }\n\n        $error_message = null;\n        $response = \\Toolbox::callCurl(\n            rtrim(GLPI_NETWORK_REGISTRATION_API_URL, '/') . '/offers',\n            [\n                CURLOPT_HTTPHEADER => [\n                    'Accept:application/json',\n                    'Accept-Language: ' . $lang,\n                ]\n            ],\n            $error_message\n        );\n\n        $valid_json = false;\n        $offers = null;\n        if ($error_message === null) {\n            if (\\Toolbox::isJSON($response)) {\n                $valid_json = true;\n                $offers = json_decode($response);\n            }\n        }\n\n        if ($error_message !== null || !$valid_json || !is_array($offers)) {\n            trigger_error(\n                sprintf(\n                    \"Unable to fetch offers information.\\nError message:%s\\nResponse:\\n%s\",\n                    $error_message,\n                    $response\n                ),\n                E_USER_WARNING\n            );\n            return [];\n        }\n\n        $GLPI_CACHE->set($cache_key, $offers, HOUR_TIMESTAMP);\n\n        return $offers;\n    }\n}\n"], "filenames": ["src/GLPINetwork.php"], "buggy_code_start_loc": [35], "buggy_code_end_loc": [122], "fixing_code_start_loc": [36], "fixing_code_end_loc": [123], "type": "CWE-79", "message": "GLPI stands for Gestionnaire Libre de Parc Informatique and is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Information associated to registration key are not properly escaped in registration key configuration page. They can be used to steal a GLPI administrator cookie. Users are advised to upgrade to 10.0.3. There are no known workarounds for this issue. ### Workarounds Do not use a registration key created by an untrusted person.", "other": {"cve": {"id": "CVE-2022-35945", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-14T18:15:10.503", "lastModified": "2022-09-19T14:09:44.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI stands for Gestionnaire Libre de Parc Informatique and is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Information associated to registration key are not properly escaped in registration key configuration page. They can be used to steal a GLPI administrator cookie. Users are advised to upgrade to 10.0.3. There are no known workarounds for this issue. ### Workarounds Do not use a registration key created by an untrusted person."}, {"lang": "es", "value": "GLPI son las siglas de Gestionnaire Libre de Parc Informatique y es un Paquete de Software Libre de Administraci\u00f3n de Activos y TI, que proporciona funciones de Service Desk de ITIL, seguimiento de licencias y auditor\u00eda de software. La informaci\u00f3n asociada a la clave de registro no es  escapada apropiadamente en la p\u00e1gina de configuraci\u00f3n de la clave de registro. Pueden usarse para robar una cookie de administrador de GLPI. Es recomendado a usuarios actualizar a versi\u00f3n 10.0.3. No se presentan mitigaciones conocidas para este problema. ### No use una clave de registro creada por una persona que no sea confiable"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.0.3", "matchCriteriaId": "F1118A51-CFED-4D17-8344-EA94C8F77EAD"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/2b8f9aa54ae4a4ec07bde0c8db739a292b8ec09a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-jrgw-cx24-56x5", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/2b8f9aa54ae4a4ec07bde0c8db739a292b8ec09a"}}