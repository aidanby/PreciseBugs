{"buggy_code": ["/*\n * $Id$\n *\n * Lookup contacts in usrloc\n *\n * Copyright (C) 2001-2003 FhG Fokus\n *\n * This file is part of opensips, a free SIP server.\n *\n * opensips is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version\n *\n * opensips is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License \n * along with this program; if not, write to the Free Software \n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * History:\n * ---------\n * 2003-03-12 added support for zombie state (nils)\n */\n/*!\n * \\file\n * \\brief SIP registrar module - lookup contacts in usrloc\n * \\ingroup registrar  \n */  \n\n\n#include <string.h>\n#include \"../../ut.h\"\n#include \"../../dset.h\"\n#include \"../../str.h\"\n#include \"../../config.h\"\n#include \"../../action.h\"\n#include \"../../mod_fix.h\"\n#include \"../../parser/parse_rr.h\"\n#include \"../usrloc/usrloc.h\"\n#include \"common.h\"\n#include \"regtime.h\"\n#include \"reg_mod.h\"\n#include \"lookup.h\"\n\n\n#define GR_E_PART_SIZE\t22\n#define GR_A_PART_SIZE\t14\n\n#define allowed_method(_msg, _c, _f) \\\n\t( !((_f)&REG_LOOKUP_METHODFILTER_FLAG) || \\\n\t\t((_msg)->REQ_METHOD)&((_c)->methods) )\n\n/*! \\brief\n * Lookup contact in the database and rewrite Request-URI\n * \\return: -1 : not found\n *          -2 : found but method not allowed\n *          -3 : error\n */\nint lookup(struct sip_msg* _m, char* _t, char* _f, char* _s)\n{\n\tunsigned int flags;\n\turecord_t* r;\n\tstr aor, uri;\n\tucontact_t* ptr,*it;\n\tint res;\n\tint ret;\n\tstr path_dst;\n\tstr flags_s;\n\tpv_value_t val;\n\tint_str istr;\n\tstr sip_instance = {0,0},call_id = {0,0};\n\n\tflags = 0;\n\tif (_f && _f[0]!=0) {\n\t\tif (fixup_get_svalue( _m, (gparam_p)_f, &flags_s)!=0) {\n\t\t\tLM_ERR(\"invalid owner uri parameter\");\n\t\t\treturn -1;\n\t\t}\n\t\tfor( res=0 ; res< flags_s.len ; res++ ) {\n\t\t\tswitch (flags_s.s[res]) {\n\t\t\t\tcase 'm': flags |= REG_LOOKUP_METHODFILTER_FLAG; break;\n\t\t\t\tcase 'b': flags |= REG_LOOKUP_NOBRANCH_FLAG; break;\n\t\t\t\tdefault: LM_WARN(\"unsuported flag %c \\n\",flags_s.s[res]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (_s) {\n\t\tif (pv_get_spec_value( _m, (pv_spec_p)_s, &val)!=0) {\n\t\t\tLM_ERR(\"failed to get PV value\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tif ( (val.flags&PV_VAL_STR)==0 ) {\n\t\t\tLM_ERR(\"PV vals is not string\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\turi = val.rs;\n\t} else {\n\t\tif (_m->new_uri.s) uri = _m->new_uri;\n\t\telse uri = _m->first_line.u.request.uri;\n\t}\n\n\tif (extract_aor(&uri, &aor,&sip_instance,&call_id) < 0) {\n\t\tLM_ERR(\"failed to extract address of record\\n\");\n\t\treturn -3;\n\t}\n\n\tget_act_time();\n\n\tul.lock_udomain((udomain_t*)_t, &aor);\n\tres = ul.get_urecord((udomain_t*)_t, &aor, &r);\n\tif (res > 0) {\n\t\tLM_DBG(\"'%.*s' Not found in usrloc\\n\", aor.len, ZSW(aor.s));\n\t\tul.unlock_udomain((udomain_t*)_t, &aor);\n\t\treturn -1;\n\t}\n\n\tptr = r->contacts;\n\tret = -1;\n\t/* look first for an un-expired and suported contact */\nsearch_valid_contact:\n\twhile ( (ptr) &&\n\t!(VALID_CONTACT(ptr,act_time) && (ret=-2) && allowed_method(_m,ptr,flags)))\n\t\tptr = ptr->next;\n\tif (ptr==0) {\n\t\t/* nothing found */\n\t\tLM_DBG(\"nothing found !\\n\");\n\t\tgoto done;\n\t}\n\n\tif (sip_instance.len && sip_instance.s) {\n\t\tLM_DBG(\"ruri has gruu in lookup\\n\");\n\t\t/* uri has GRUU */\n\t\tif (ptr->instance.len-2 != sip_instance.len || \n\t\t\t\tmemcmp(ptr->instance.s+1,sip_instance.s,sip_instance.len)) {\n\t\t\tLM_DBG(\"no match to sip instace - [%.*s] - [%.*s]\\n\",ptr->instance.len-2,ptr->instance.s+1,\n\t\t\t\t\tsip_instance.len,sip_instance.s);\n\t\t\t/* not the targeted instance, search some more */\n\t\t\tptr = ptr->next;\n\t\t\tgoto search_valid_contact;\n\t\t}\n\n\t\tLM_DBG(\"matched sip instace\\n\");\n\t}\n\n\tif (call_id.len && call_id.s) {\n\t\t/* decide whether GRUU is expired or not\n\t\t *\n\t\t * first - match call-id */\n\t\tif (ptr->callid.len != call_id.len ||\n\t\t\t\tmemcmp(ptr->callid.s,call_id.s,call_id.len)) {\n\t\t\tLM_DBG(\"no match to call id - [%.*s] - [%.*s]\\n\",ptr->callid.len,ptr->callid.s,\n\t\t\t\t\tcall_id.len,call_id.s);\n\t\t\tptr = ptr->next;\n\t\t\tgoto search_valid_contact;\n\t\t}\n\n\t\t/* matched call-id, check if there are newer contacts with\n\t\t * same sip instace bup newer last_modified */\n\n\t\tit = ptr->next;\n\t\twhile ( it ) {\n\t\t\tif (VALID_CONTACT(it,act_time)) {\n\t\t\t\tif (it->instance.len-2 == sip_instance.len &&\n\t\t\t\t\t\tmemcmp(it->instance.s+1,sip_instance.s,sip_instance.len) == 0)\n\t\t\t\t\tif (it->last_modified > ptr->last_modified) {\n\t\t\t\t\t\t/* same instance id, but newer modified -> expired GRUU, no match at all */\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (it != NULL) {\n\t\t\tret = -1;\n\t\t\tgoto done;\n\t\t}\n\t}\n\n\tLM_DBG(\"found a complete match\\n\");\n\n\tret = 1;\n\tif (ptr) {\n\t\tLM_DBG(\"setting as ruri <%.*s>\\n\",ptr->c.len,ptr->c.s);\n\t\tif (set_ruri(_m, &ptr->c) < 0) {\n\t\t\tLM_ERR(\"unable to rewrite Request-URI\\n\");\n\t\t\tret = -3;\n\t\t\tgoto done;\n\t\t}\n\n\t\t/* If a Path is present, use first path-uri in favour of\n\t\t * received-uri because in that case the last hop towards the uac\n\t\t * has to handle NAT. - agranig */\n\t\tif (ptr->path.s && ptr->path.len) {\n\t\t\tif (get_path_dst_uri(&ptr->path, &path_dst) < 0) {\n\t\t\t\tLM_ERR(\"failed to get dst_uri for Path\\n\");\n\t\t\t\tret = -3;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t\tif (set_path_vector(_m, &ptr->path) < 0) {\n\t\t\t\tLM_ERR(\"failed to set path vector\\n\");\n\t\t\t\tret = -3;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t\tif (set_dst_uri(_m, &path_dst) < 0) {\n\t\t\t\tLM_ERR(\"failed to set dst_uri of Path\\n\");\n\t\t\t\tret = -3;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t} else if (ptr->received.s && ptr->received.len) {\n\t\t\tif (set_dst_uri(_m, &ptr->received) < 0) {\n\t\t\t\tret = -3;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t}\n\n\t\tset_ruri_q(ptr->q);\n\n\t\tsetbflag( 0, ptr->cflags);\n\n\t\tif (ptr->sock)\n\t\t\t_m->force_send_socket = ptr->sock;\n\n\t\t/* populate the 'attributes' avp */\n\t\tif (attr_avp_name != -1) {\n\t\t\tistr.s = ptr->attr;\n\t\t\tif (add_avp_last(AVP_VAL_STR, attr_avp_name, istr) != 0) {\n\t\t\t\tLM_ERR(\"Failed to populate attr avp!\\n\");\n\t\t\t}\n\t\t}\n\n\t\tptr = ptr->next;\n\t}\n\n\t/* Append branches if enabled */\n\t/* If we got to this point and the URI had a ;gr parameter and it was matched\n\t * to a contact. No point in branching */\n\tif ( flags&REG_LOOKUP_NOBRANCH_FLAG || (sip_instance.len && sip_instance.s) ) goto done;\n\tLM_DBG(\"looking for branches\\n\");\n\n\tfor( ; ptr ; ptr = ptr->next ) {\n\t\tif (VALID_CONTACT(ptr, act_time) && allowed_method(_m,ptr,flags)) {\n\t\t\tpath_dst.len = 0;\n\t\t\tif(ptr->path.s && ptr->path.len \n\t\t\t&& get_path_dst_uri(&ptr->path, &path_dst) < 0) {\n\t\t\t\tLM_ERR(\"failed to get dst_uri for Path\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* The same as for the first contact applies for branches \n\t\t\t * regarding path vs. received. */\n\t\t\tLM_DBG(\"setting branch <%.*s>\\n\",ptr->c.len,ptr->c.s);\n\t\t\tif (append_branch(_m,&ptr->c,path_dst.len?&path_dst:&ptr->received,\n\t\t\t&ptr->path, ptr->q, ptr->cflags, ptr->sock) == -1) {\n\t\t\t\tLM_ERR(\"failed to append a branch\\n\");\n\t\t\t\t/* Also give a chance to the next branches*/\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* populate the 'attributes' avp */\n\t\t\tif (attr_avp_name != -1) {\n\t\t\t\tistr.s = ptr->attr;\n\t\t\t\tif (add_avp_last(AVP_VAL_STR, attr_avp_name, istr) != 0) {\n\t\t\t\t\tLM_ERR(\"Failed to populate attr avp!\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\ndone:\n\tul.release_urecord(r);\n\tul.unlock_udomain((udomain_t*)_t, &aor);\n\treturn ret;\n}\n\n\n/*! \\brief the is_registered() function\n * Return true if the AOR in the Request-URI is registered,\n * it is similar to lookup but registered neither rewrites\n * the Request-URI nor appends branches\n */\nint registered(struct sip_msg* _m, char* _t, char* _s, char *_c)\n{\n\tstr uri, aor;\n\turecord_t* r;\n\tucontact_t* ptr;\n\tpv_value_t val;\n\tstr callid;\n\tint res;\n\n\t/* get the AOR */\n\tif (_s) {\n\t\tif (pv_get_spec_value( _m, (pv_spec_p)_s, &val)!=0) {\n\t\t\tLM_ERR(\"failed to getAOR PV value\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tif ( (val.flags&PV_VAL_STR)==0 ) {\n\t\t\tLM_ERR(\"AOR PV vals is not string\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\turi = val.rs;\n\t} else {\n\t\tif (_m->first_line.type!=SIP_REQUEST) {\n\t\t\tLM_ERR(\"no AOR and called for a reply!\");\n\t\t\treturn -1;\n\t\t}\n\t\tif (_m->new_uri.s) uri = _m->new_uri;\n\t\telse uri = _m->first_line.u.request.uri;\n\t}\n\n\tif (extract_aor(&uri, &aor,0,0) < 0) {\n\t\tLM_ERR(\"failed to extract address of record\\n\");\n\t\treturn -1;\n\t}\n\n\t/* get the callid */\n\tif (_c) {\n\t\tif (pv_get_spec_value( _m, (pv_spec_p)_c, &val)!=0) {\n\t\t\tLM_ERR(\"failed to get callid PV value\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tif ( (val.flags&PV_VAL_STR)==0 ) {\n\t\t\tLM_ERR(\"callid PV vals is not string\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tcallid = val.rs;\n\t} else {\n\t\tcallid.s = NULL;\n\t\tcallid.len = 0;\n\t}\n\n\tul.lock_udomain((udomain_t*)_t, &aor);\n\tres = ul.get_urecord((udomain_t*)_t, &aor, &r);\n\n\tif (res < 0) {\n\t\tul.unlock_udomain((udomain_t*)_t, &aor);\n\t\tLM_ERR(\"failed to query usrloc\\n\");\n\t\treturn -1;\n\t}\n\n\tif (res == 0) {\n\t\tptr = r->contacts;\n\t\twhile (ptr && !VALID_CONTACT(ptr, act_time)) {\n\t\t\tptr = ptr->next;\n\t\t}\n\n\t\tfor( ; ptr ; ptr=ptr->next ) {\n\t\t\tif (callid.len==0 || (callid.len==ptr->callid.len &&\n\t\t\tmemcmp(callid.s,ptr->callid.s,callid.len)==0 ) ) {\n\t\t\t\tul.unlock_udomain((udomain_t*)_t, &aor);\n\t\t\t\tLM_DBG(\"'%.*s' found in usrloc\\n\", aor.len, ZSW(aor.s));\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tul.unlock_udomain((udomain_t*)_t, &aor);\n\tLM_DBG(\"'%.*s' not found in usrloc\\n\", aor.len, ZSW(aor.s));\n\treturn -1;\n}\n"], "fixing_code": ["/*\n * $Id$\n *\n * Lookup contacts in usrloc\n *\n * Copyright (C) 2001-2003 FhG Fokus\n *\n * This file is part of opensips, a free SIP server.\n *\n * opensips is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version\n *\n * opensips is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License \n * along with this program; if not, write to the Free Software \n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * History:\n * ---------\n * 2003-03-12 added support for zombie state (nils)\n */\n/*!\n * \\file\n * \\brief SIP registrar module - lookup contacts in usrloc\n * \\ingroup registrar  \n */  \n\n\n#include <string.h>\n#include \"../../ut.h\"\n#include \"../../dset.h\"\n#include \"../../str.h\"\n#include \"../../config.h\"\n#include \"../../action.h\"\n#include \"../../mod_fix.h\"\n#include \"../../parser/parse_rr.h\"\n#include \"../usrloc/usrloc.h\"\n#include \"common.h\"\n#include \"regtime.h\"\n#include \"reg_mod.h\"\n#include \"lookup.h\"\n\n\n#define GR_E_PART_SIZE\t22\n#define GR_A_PART_SIZE\t14\n\n#define allowed_method(_msg, _c, _f) \\\n\t( !((_f)&REG_LOOKUP_METHODFILTER_FLAG) || \\\n\t\t((_msg)->REQ_METHOD)&((_c)->methods) )\n\n/*! \\brief\n * Lookup contact in the database and rewrite Request-URI\n * \\return: -1 : not found\n *          -2 : found but method not allowed\n *          -3 : error\n */\nint lookup(struct sip_msg* _m, char* _t, char* _f, char* _s)\n{\n\tunsigned int flags;\n\turecord_t* r;\n\tstr aor, uri;\n\tucontact_t* ptr,*it;\n\tint res;\n\tint ret;\n\tstr path_dst;\n\tstr flags_s;\n\tpv_value_t val;\n\tint_str istr;\n\tstr sip_instance = {0,0},call_id = {0,0};\n\n\tflags = 0;\n\tif (_f && _f[0]!=0) {\n\t\tif (fixup_get_svalue( _m, (gparam_p)_f, &flags_s)!=0) {\n\t\t\tLM_ERR(\"invalid owner uri parameter\");\n\t\t\treturn -1;\n\t\t}\n\t\tfor( res=0 ; res< flags_s.len ; res++ ) {\n\t\t\tswitch (flags_s.s[res]) {\n\t\t\t\tcase 'm': flags |= REG_LOOKUP_METHODFILTER_FLAG; break;\n\t\t\t\tcase 'b': flags |= REG_LOOKUP_NOBRANCH_FLAG; break;\n\t\t\t\tdefault: LM_WARN(\"unsuported flag %c \\n\",flags_s.s[res]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (_s) {\n\t\tif (pv_get_spec_value( _m, (pv_spec_p)_s, &val)!=0) {\n\t\t\tLM_ERR(\"failed to get PV value\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tif ( (val.flags&PV_VAL_STR)==0 ) {\n\t\t\tLM_ERR(\"PV vals is not string\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\turi = val.rs;\n\t} else {\n\t\tif (_m->new_uri.s) uri = _m->new_uri;\n\t\telse uri = _m->first_line.u.request.uri;\n\t}\n\n\tif (extract_aor(&uri, &aor,&sip_instance,&call_id) < 0) {\n\t\tLM_ERR(\"failed to extract address of record\\n\");\n\t\treturn -3;\n\t}\n\n\tget_act_time();\n\n\tul.lock_udomain((udomain_t*)_t, &aor);\n\tres = ul.get_urecord((udomain_t*)_t, &aor, &r);\n\tif (res > 0) {\n\t\tLM_DBG(\"'%.*s' Not found in usrloc\\n\", aor.len, ZSW(aor.s));\n\t\tul.unlock_udomain((udomain_t*)_t, &aor);\n\t\treturn -1;\n\t}\n\n\tptr = r->contacts;\n\tret = -1;\n\t/* look first for an un-expired and suported contact */\nsearch_valid_contact:\n\twhile ( (ptr) &&\n\t!(VALID_CONTACT(ptr,act_time) && (ret=-2) && allowed_method(_m,ptr,flags)))\n\t\tptr = ptr->next;\n\tif (ptr==0) {\n\t\t/* nothing found */\n\t\tLM_DBG(\"nothing found !\\n\");\n\t\tgoto done;\n\t}\n\n\tif (sip_instance.len && sip_instance.s) {\n\t\tLM_DBG(\"ruri has gruu in lookup\\n\");\n\t\t/* uri has GRUU */\n\t\tif (ptr->instance.len-2 != sip_instance.len || \n\t\t\t\tmemcmp(ptr->instance.s+1,sip_instance.s,sip_instance.len)) {\n\t\t\tLM_DBG(\"no match to sip instace - [%.*s] - [%.*s]\\n\",ptr->instance.len-2,ptr->instance.s+1,\n\t\t\t\t\tsip_instance.len,sip_instance.s);\n\t\t\t/* not the targeted instance, search some more */\n\t\t\tptr = ptr->next;\n\t\t\tgoto search_valid_contact;\n\t\t}\n\n\t\tLM_DBG(\"matched sip instace\\n\");\n\t}\n\n\tif (call_id.len && call_id.s) {\n\t\t/* decide whether GRUU is expired or not\n\t\t *\n\t\t * first - match call-id */\n\t\tif (ptr->callid.len != call_id.len ||\n\t\t\t\tmemcmp(ptr->callid.s,call_id.s,call_id.len)) {\n\t\t\tLM_DBG(\"no match to call id - [%.*s] - [%.*s]\\n\",ptr->callid.len,ptr->callid.s,\n\t\t\t\t\tcall_id.len,call_id.s);\n\t\t\tptr = ptr->next;\n\t\t\tgoto search_valid_contact;\n\t\t}\n\n\t\t/* matched call-id, check if there are newer contacts with\n\t\t * same sip instace bup newer last_modified */\n\n\t\tit = ptr->next;\n\t\twhile ( it ) {\n\t\t\tif (VALID_CONTACT(it,act_time)) {\n\t\t\t\tif (it->instance.len-2 == sip_instance.len &&\n\t\t\t\t\t\tmemcmp(it->instance.s+1,sip_instance.s,sip_instance.len) == 0)\n\t\t\t\t\tif (it->last_modified > ptr->last_modified) {\n\t\t\t\t\t\t/* same instance id, but newer modified -> expired GRUU, no match at all */\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tit=it->next;\n\t\t}\n\n\t\tif (it != NULL) {\n\t\t\tret = -1;\n\t\t\tgoto done;\n\t\t}\n\t}\n\n\tLM_DBG(\"found a complete match\\n\");\n\n\tret = 1;\n\tif (ptr) {\n\t\tLM_DBG(\"setting as ruri <%.*s>\\n\",ptr->c.len,ptr->c.s);\n\t\tif (set_ruri(_m, &ptr->c) < 0) {\n\t\t\tLM_ERR(\"unable to rewrite Request-URI\\n\");\n\t\t\tret = -3;\n\t\t\tgoto done;\n\t\t}\n\n\t\t/* If a Path is present, use first path-uri in favour of\n\t\t * received-uri because in that case the last hop towards the uac\n\t\t * has to handle NAT. - agranig */\n\t\tif (ptr->path.s && ptr->path.len) {\n\t\t\tif (get_path_dst_uri(&ptr->path, &path_dst) < 0) {\n\t\t\t\tLM_ERR(\"failed to get dst_uri for Path\\n\");\n\t\t\t\tret = -3;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t\tif (set_path_vector(_m, &ptr->path) < 0) {\n\t\t\t\tLM_ERR(\"failed to set path vector\\n\");\n\t\t\t\tret = -3;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t\tif (set_dst_uri(_m, &path_dst) < 0) {\n\t\t\t\tLM_ERR(\"failed to set dst_uri of Path\\n\");\n\t\t\t\tret = -3;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t} else if (ptr->received.s && ptr->received.len) {\n\t\t\tif (set_dst_uri(_m, &ptr->received) < 0) {\n\t\t\t\tret = -3;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t}\n\n\t\tset_ruri_q(ptr->q);\n\n\t\tsetbflag( 0, ptr->cflags);\n\n\t\tif (ptr->sock)\n\t\t\t_m->force_send_socket = ptr->sock;\n\n\t\t/* populate the 'attributes' avp */\n\t\tif (attr_avp_name != -1) {\n\t\t\tistr.s = ptr->attr;\n\t\t\tif (add_avp_last(AVP_VAL_STR, attr_avp_name, istr) != 0) {\n\t\t\t\tLM_ERR(\"Failed to populate attr avp!\\n\");\n\t\t\t}\n\t\t}\n\n\t\tptr = ptr->next;\n\t}\n\n\t/* Append branches if enabled */\n\t/* If we got to this point and the URI had a ;gr parameter and it was matched\n\t * to a contact. No point in branching */\n\tif ( flags&REG_LOOKUP_NOBRANCH_FLAG || (sip_instance.len && sip_instance.s) ) goto done;\n\tLM_DBG(\"looking for branches\\n\");\n\n\tfor( ; ptr ; ptr = ptr->next ) {\n\t\tif (VALID_CONTACT(ptr, act_time) && allowed_method(_m,ptr,flags)) {\n\t\t\tpath_dst.len = 0;\n\t\t\tif(ptr->path.s && ptr->path.len \n\t\t\t&& get_path_dst_uri(&ptr->path, &path_dst) < 0) {\n\t\t\t\tLM_ERR(\"failed to get dst_uri for Path\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* The same as for the first contact applies for branches \n\t\t\t * regarding path vs. received. */\n\t\t\tLM_DBG(\"setting branch <%.*s>\\n\",ptr->c.len,ptr->c.s);\n\t\t\tif (append_branch(_m,&ptr->c,path_dst.len?&path_dst:&ptr->received,\n\t\t\t&ptr->path, ptr->q, ptr->cflags, ptr->sock) == -1) {\n\t\t\t\tLM_ERR(\"failed to append a branch\\n\");\n\t\t\t\t/* Also give a chance to the next branches*/\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* populate the 'attributes' avp */\n\t\t\tif (attr_avp_name != -1) {\n\t\t\t\tistr.s = ptr->attr;\n\t\t\t\tif (add_avp_last(AVP_VAL_STR, attr_avp_name, istr) != 0) {\n\t\t\t\t\tLM_ERR(\"Failed to populate attr avp!\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\ndone:\n\tul.release_urecord(r);\n\tul.unlock_udomain((udomain_t*)_t, &aor);\n\treturn ret;\n}\n\n\n/*! \\brief the is_registered() function\n * Return true if the AOR in the Request-URI is registered,\n * it is similar to lookup but registered neither rewrites\n * the Request-URI nor appends branches\n */\nint registered(struct sip_msg* _m, char* _t, char* _s, char *_c)\n{\n\tstr uri, aor;\n\turecord_t* r;\n\tucontact_t* ptr;\n\tpv_value_t val;\n\tstr callid;\n\tint res;\n\n\t/* get the AOR */\n\tif (_s) {\n\t\tif (pv_get_spec_value( _m, (pv_spec_p)_s, &val)!=0) {\n\t\t\tLM_ERR(\"failed to getAOR PV value\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tif ( (val.flags&PV_VAL_STR)==0 ) {\n\t\t\tLM_ERR(\"AOR PV vals is not string\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\turi = val.rs;\n\t} else {\n\t\tif (_m->first_line.type!=SIP_REQUEST) {\n\t\t\tLM_ERR(\"no AOR and called for a reply!\");\n\t\t\treturn -1;\n\t\t}\n\t\tif (_m->new_uri.s) uri = _m->new_uri;\n\t\telse uri = _m->first_line.u.request.uri;\n\t}\n\n\tif (extract_aor(&uri, &aor,0,0) < 0) {\n\t\tLM_ERR(\"failed to extract address of record\\n\");\n\t\treturn -1;\n\t}\n\n\t/* get the callid */\n\tif (_c) {\n\t\tif (pv_get_spec_value( _m, (pv_spec_p)_c, &val)!=0) {\n\t\t\tLM_ERR(\"failed to get callid PV value\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tif ( (val.flags&PV_VAL_STR)==0 ) {\n\t\t\tLM_ERR(\"callid PV vals is not string\\n\");\n\t\t\treturn -1;\n\t\t}\n\t\tcallid = val.rs;\n\t} else {\n\t\tcallid.s = NULL;\n\t\tcallid.len = 0;\n\t}\n\n\tul.lock_udomain((udomain_t*)_t, &aor);\n\tres = ul.get_urecord((udomain_t*)_t, &aor, &r);\n\n\tif (res < 0) {\n\t\tul.unlock_udomain((udomain_t*)_t, &aor);\n\t\tLM_ERR(\"failed to query usrloc\\n\");\n\t\treturn -1;\n\t}\n\n\tif (res == 0) {\n\t\tptr = r->contacts;\n\t\twhile (ptr && !VALID_CONTACT(ptr, act_time)) {\n\t\t\tptr = ptr->next;\n\t\t}\n\n\t\tfor( ; ptr ; ptr=ptr->next ) {\n\t\t\tif (callid.len==0 || (callid.len==ptr->callid.len &&\n\t\t\tmemcmp(callid.s,ptr->callid.s,callid.len)==0 ) ) {\n\t\t\t\tul.unlock_udomain((udomain_t*)_t, &aor);\n\t\t\t\tLM_DBG(\"'%.*s' found in usrloc\\n\", aor.len, ZSW(aor.s));\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tul.unlock_udomain((udomain_t*)_t, &aor);\n\tLM_DBG(\"'%.*s' not found in usrloc\\n\", aor.len, ZSW(aor.s));\n\treturn -1;\n}\n"], "filenames": ["modules/registrar/lookup.c"], "buggy_code_start_loc": [174], "buggy_code_end_loc": [174], "fixing_code_start_loc": [175], "fixing_code_end_loc": [176], "type": "CWE-835", "message": "A Denial of Service (infinite loop) exists in OpenSIPS before 1.10 in lookup.c.", "other": {"cve": {"id": "CVE-2013-3722", "sourceIdentifier": "cve@mitre.org", "published": "2020-02-17T17:15:12.297", "lastModified": "2020-02-20T16:34:28.770", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A Denial of Service (infinite loop) exists in OpenSIPS before 1.10 in lookup.c."}, {"lang": "es", "value": "Se presenta una Denegaci\u00f3n de Servicio (bucle infinito) en OpenSIPS versiones anteriores a 1.10, en el archivo lookup.c."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-835"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opensips:opensips:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.10", "matchCriteriaId": "B4A292F2-7C95-4423-9E41-874310A25A20"}]}]}], "references": [{"url": "http://github.com/OpenSIPS/opensips/commit/54e027adfa486cfcf993828512b2e273aeb163c2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "http://github.com/OpenSIPS/opensips/commit/54e027adfa486cfcf993828512b2e273aeb163c2"}}