{"buggy_code": ["// Load modules.\nvar passport = require('passport-strategy')\n  , url = require('url')\n  , uid = require('uid2')\n  , crypto = require('crypto')\n  , base64url = require('base64url')\n  , util = require('util')\n  , utils = require('./utils')\n  , OAuth2 = require('oauth').OAuth2\n  , NullStore = require('./state/null')\n  , NonceStore = require('./state/session')\n  , StateStore = require('./state/store')\n  , PKCEStateStore = require('./state/pkcesession')\n  , AuthorizationError = require('./errors/authorizationerror')\n  , TokenError = require('./errors/tokenerror')\n  , InternalOAuthError = require('./errors/internaloautherror');\n\n\n/**\n * Creates an instance of `OAuth2Strategy`.\n *\n * The OAuth 2.0 authentication strategy authenticates requests using the OAuth\n * 2.0 framework.\n *\n * OAuth 2.0 provides a facility for delegated authentication, whereby users can\n * authenticate using a third-party service such as Facebook.  Delegating in\n * this manner involves a sequence of events, including redirecting the user to\n * the third-party service for authorization.  Once authorization has been\n * granted, the user is redirected back to the application and an authorization\n * code can be used to obtain credentials.\n *\n * Applications must supply a `verify` callback, for which the function\n * signature is:\n *\n *     function(accessToken, refreshToken, profile, done) { ... }\n *\n * The verify callback is responsible for finding or creating the user, and\n * invoking `done` with the following arguments:\n *\n *     done(err, user, info);\n *\n * `user` should be set to `false` to indicate an authentication failure.\n * Additional `info` can optionally be passed as a third argument, typically\n * used to display informational messages.  If an exception occured, `err`\n * should be set.\n *\n * Options:\n *\n *   - `authorizationURL`  URL used to obtain an authorization grant\n *   - `tokenURL`          URL used to obtain an access token\n *   - `clientID`          identifies client to service provider\n *   - `clientSecret`      secret used to establish ownership of the client identifer\n *   - `callbackURL`       URL to which the service provider will redirect the user after obtaining authorization\n *   - `passReqToCallback` when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new OAuth2Strategy({\n *         authorizationURL: 'https://www.example.com/oauth2/authorize',\n *         tokenURL: 'https://www.example.com/oauth2/token',\n *         clientID: '123-456-789',\n *         clientSecret: 'shhh-its-a-secret'\n *         callbackURL: 'https://www.example.net/auth/example/callback'\n *       },\n *       function(accessToken, refreshToken, profile, done) {\n *         User.findOrCreate(..., function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @constructor\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction OAuth2Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = undefined;\n  }\n  options = options || {};\n\n  if (!verify) { throw new TypeError('OAuth2Strategy requires a verify callback'); }\n  if (!options.authorizationURL) { throw new TypeError('OAuth2Strategy requires a authorizationURL option'); }\n  if (!options.tokenURL) { throw new TypeError('OAuth2Strategy requires a tokenURL option'); }\n  if (!options.clientID) { throw new TypeError('OAuth2Strategy requires a clientID option'); }\n\n  passport.Strategy.call(this);\n  this.name = 'oauth2';\n  this._verify = verify;\n\n  // NOTE: The _oauth2 property is considered \"protected\".  Subclasses are\n  //       allowed to use it when making protected resource requests to retrieve\n  //       the user profile.\n  this._oauth2 = new OAuth2(options.clientID,  options.clientSecret,\n                            '', options.authorizationURL, options.tokenURL, options.customHeaders);\n\n  this._callbackURL = options.callbackURL;\n  this._scope = options.scope;\n  this._scopeSeparator = options.scopeSeparator || ' ';\n  this._pkceMethod = (options.pkce === true) ? 'S256' : options.pkce;\n  this._key = options.sessionKey || ('oauth2:' + url.parse(options.authorizationURL).hostname);\n\n  if (options.store && typeof options.store == 'object') {\n    this._stateStore = options.store;\n  } else if (options.store) {\n    this._stateStore = options.pkce ? new PKCEStateStore({ key: this._key }) : new StateStore({ key: this._key });\n  } else if (options.state) {\n    this._stateStore = options.pkce ? new PKCEStateStore({ key: this._key }) : new NonceStore({ key: this._key });\n  } else {\n    if (options.pkce) { throw new TypeError('OAuth2Strategy requires `state: true` option when PKCE is enabled'); }\n    this._stateStore = new NullStore();\n  }\n  this._trustProxy = options.proxy;\n  this._passReqToCallback = options.passReqToCallback;\n  this._skipUserProfile = (options.skipUserProfile === undefined) ? false : options.skipUserProfile;\n}\n\n// Inherit from `passport.Strategy`.\nutil.inherits(OAuth2Strategy, passport.Strategy);\n\n\n/**\n * Authenticate request by delegating to a service provider using OAuth 2.0.\n *\n * @param {Object} req\n * @api protected\n */\nOAuth2Strategy.prototype.authenticate = function(req, options) {\n  options = options || {};\n  var self = this;\n\n  if (req.query && req.query.error) {\n    if (req.query.error == 'access_denied') {\n      return this.fail({ message: req.query.error_description });\n    } else {\n      return this.error(new AuthorizationError(req.query.error_description, req.query.error, req.query.error_uri));\n    }\n  }\n\n  var callbackURL = options.callbackURL || this._callbackURL;\n  if (callbackURL) {\n    var parsed = url.parse(callbackURL);\n    if (!parsed.protocol) {\n      // The callback URL is relative, resolve a fully qualified URL from the\n      // URL of the originating request.\n      callbackURL = url.resolve(utils.originalURL(req, { proxy: this._trustProxy }), callbackURL);\n    }\n  }\n\n  var meta = {\n    authorizationURL: this._oauth2._authorizeUrl,\n    tokenURL: this._oauth2._accessTokenUrl,\n    clientID: this._oauth2._clientId,\n    callbackURL: callbackURL\n  }\n\n  if (req.query && req.query.code) {\n    function loaded(err, ok, state) {\n      if (err) { return self.error(err); }\n      if (!ok) {\n        return self.fail(state, 403);\n      }\n\n      var code = req.query.code;\n\n      var params = self.tokenParams(options);\n      params.grant_type = 'authorization_code';\n      if (callbackURL) { params.redirect_uri = callbackURL; }\n      if (typeof ok == 'string') { // PKCE\n        params.code_verifier = ok;\n      }\n\n      self._oauth2.getOAuthAccessToken(code, params,\n        function(err, accessToken, refreshToken, params) {\n          if (err || !accessToken) { return self.error(self._createOAuthError('Failed to obtain access token', err)); }\n\n          self._loadUserProfile(accessToken, function(err, profile) {\n            if (err) { return self.error(err); }\n\n            function verified(err, user, info) {\n              if (err) { return self.error(err); }\n              if (!user) { return self.fail(info); }\n\n              info = info || {};\n              if (state) { info.state = state; }\n              self.success(user, info);\n            }\n\n            try {\n              if (self._passReqToCallback) {\n                var arity = self._verify.length;\n                if (arity == 6) {\n                  self._verify(req, accessToken, refreshToken, params, profile, verified);\n                } else { // arity == 5\n                  self._verify(req, accessToken, refreshToken, profile, verified);\n                }\n              } else {\n                var arity = self._verify.length;\n                if (arity == 5) {\n                  self._verify(accessToken, refreshToken, params, profile, verified);\n                } else { // arity == 4\n                  self._verify(accessToken, refreshToken, profile, verified);\n                }\n              }\n            } catch (ex) {\n              return self.error(ex);\n            }\n          });\n        }\n      );\n    }\n\n    var state = req.query.state;\n    try {\n      var arity = this._stateStore.verify.length;\n      if (arity == 4) {\n        this._stateStore.verify(req, state, meta, loaded);\n      } else { // arity == 3\n        this._stateStore.verify(req, state, loaded);\n      }\n    } catch (ex) {\n      return this.error(ex);\n    }\n  } else {\n    var params = this.authorizationParams(options);\n    params.response_type = 'code';\n    if (callbackURL) { params.redirect_uri = callbackURL; }\n    var scope = options.scope || this._scope;\n    if (scope) {\n      if (Array.isArray(scope)) { scope = scope.join(this._scopeSeparator); }\n      params.scope = scope;\n    }\n    var verifier, challenge;\n\n    if (this._pkceMethod) {\n      verifier = base64url(crypto.pseudoRandomBytes(32))\n      switch (this._pkceMethod) {\n      case 'plain':\n        challenge = verifier;\n        break;\n      case 'S256':\n        challenge = base64url(crypto.createHash('sha256').update(verifier).digest());\n        break;\n      default:\n        return this.error(new Error('Unsupported code verifier transformation method: ' + this._pkceMethod));\n      }\n      \n      params.code_challenge = challenge;\n      params.code_challenge_method = this._pkceMethod;\n    }\n\n    var state = options.state;\n    if (state && typeof state == 'string') {\n      // NOTE: In passport-oauth2@1.5.0 and earlier, `state` could be passed as\n      //       an object.  However, it would result in an empty string being\n      //       serialized as the value of the query parameter by `url.format()`,\n      //       effectively ignoring the option.  This implies that `state` was\n      //       only functional when passed as a string value.\n      //\n      //       This fact is taken advantage of here to fall into the `else`\n      //       branch below when `state` is passed as an object.  In that case\n      //       the state will be automatically managed and persisted by the\n      //       state store.\n      params.state = state;\n      \n      var parsed = url.parse(this._oauth2._authorizeUrl, true);\n      utils.merge(parsed.query, params);\n      parsed.query['client_id'] = this._oauth2._clientId;\n      delete parsed.search;\n      var location = url.format(parsed);\n      this.redirect(location);\n    } else {\n      function stored(err, state) {\n        if (err) { return self.error(err); }\n\n        if (state) { params.state = state; }\n        var parsed = url.parse(self._oauth2._authorizeUrl, true);\n        utils.merge(parsed.query, params);\n        parsed.query['client_id'] = self._oauth2._clientId;\n        delete parsed.search;\n        var location = url.format(parsed);\n        self.redirect(location);\n      }\n\n      try {\n        var arity = this._stateStore.store.length;\n        if (arity == 5) {\n          this._stateStore.store(req, verifier, state, meta, stored);\n        } else if (arity == 4) {\n          this._stateStore.store(req, state, meta, stored);\n        } else if (arity == 3) {\n          this._stateStore.store(req, meta, stored);\n        } else { // arity == 2\n          this._stateStore.store(req, stored);\n        }\n      } catch (ex) {\n        return this.error(ex);\n      }\n    }\n  }\n};\n\n/**\n * Retrieve user profile from service provider.\n *\n * OAuth 2.0-based authentication strategies can overrride this function in\n * order to load the user's profile from the service provider.  This assists\n * applications (and users of those applications) in the initial registration\n * process by automatically submitting required information.\n *\n * @param {String} accessToken\n * @param {Function} done\n * @api protected\n */\nOAuth2Strategy.prototype.userProfile = function(accessToken, done) {\n  return done(null, {});\n};\n\n/**\n * Return extra parameters to be included in the authorization request.\n *\n * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n * included when requesting authorization.  Since these parameters are not\n * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n * strategies can overrride this function in order to populate these parameters\n * as required by the provider.\n *\n * @param {Object} options\n * @return {Object}\n * @api protected\n */\nOAuth2Strategy.prototype.authorizationParams = function(options) {\n  return {};\n};\n\n/**\n * Return extra parameters to be included in the token request.\n *\n * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n * included when requesting an access token.  Since these parameters are not\n * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n * strategies can overrride this function in order to populate these parameters\n * as required by the provider.\n *\n * @return {Object}\n * @api protected\n */\nOAuth2Strategy.prototype.tokenParams = function(options) {\n  return {};\n};\n\n/**\n * Parse error response from OAuth 2.0 endpoint.\n *\n * OAuth 2.0-based authentication strategies can overrride this function in\n * order to parse error responses received from the token endpoint, allowing the\n * most informative message to be displayed.\n *\n * If this function is not overridden, the body will be parsed in accordance\n * with RFC 6749, section 5.2.\n *\n * @param {String} body\n * @param {Number} status\n * @return {Error}\n * @api protected\n */\nOAuth2Strategy.prototype.parseErrorResponse = function(body, status) {\n  var json = JSON.parse(body);\n  if (json.error) {\n    return new TokenError(json.error_description, json.error, json.error_uri);\n  }\n  return null;\n};\n\n/**\n * Load user profile, contingent upon options.\n *\n * @param {String} accessToken\n * @param {Function} done\n * @api private\n */\nOAuth2Strategy.prototype._loadUserProfile = function(accessToken, done) {\n  var self = this;\n\n  function loadIt() {\n    return self.userProfile(accessToken, done);\n  }\n  function skipIt() {\n    return done(null);\n  }\n\n  if (typeof this._skipUserProfile == 'function' && this._skipUserProfile.length > 1) {\n    // async\n    this._skipUserProfile(accessToken, function(err, skip) {\n      if (err) { return done(err); }\n      if (!skip) { return loadIt(); }\n      return skipIt();\n    });\n  } else {\n    var skip = (typeof this._skipUserProfile == 'function') ? this._skipUserProfile() : this._skipUserProfile;\n    if (!skip) { return loadIt(); }\n    return skipIt();\n  }\n};\n\n/**\n * Create an OAuth error.\n *\n * @param {String} message\n * @param {Object|Error} err\n * @api private\n */\nOAuth2Strategy.prototype._createOAuthError = function(message, err) {\n  var e;\n  if (err.statusCode && err.data) {\n    try {\n      e = this.parseErrorResponse(err.data, err.statusCode);\n    } catch (_) {}\n  }\n  if (!e) { e = new InternalOAuthError(message, err); }\n  return e;\n};\n\n\n// Expose constructor.\nmodule.exports = OAuth2Strategy;\n", "var OAuth2Strategy = require('../lib/strategy')\n  , AuthorizationError = require('../lib/errors/authorizationerror')\n  , TokenError = require('../lib/errors/tokenerror')\n  , InternalOAuthError = require('../lib/errors/internaloautherror')\n  , chai = require('chai');\n\n\ndescribe('OAuth2Strategy', function() {\n  \n  describe('constructed', function() {\n    \n    describe('with normal options', function() {\n      var strategy = new OAuth2Strategy({\n          authorizationURL: 'https://www.example.com/oauth2/authorize',\n          tokenURL: 'https://www.example.com/oauth2/token',\n          clientID: 'ABC123',\n          clientSecret: 'secret'\n        }, function() {});\n    \n      it('should be named oauth2', function() {\n        expect(strategy.name).to.equal('oauth2');\n      });\n    }); // with normal options\n    \n    describe('without a verify callback', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123',\n            clientSecret: 'secret'\n          });\n        }).to.throw(TypeError, 'OAuth2Strategy requires a verify callback');\n      });\n    }); // without a verify callback\n    \n    describe('without an authorizationURL option', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123',\n            clientSecret: 'secret'\n          }, function() {});\n        }).to.throw(TypeError, 'OAuth2Strategy requires a authorizationURL option');\n      });\n    }); // without an authorizationURL option\n    \n    describe('without a tokenURL option', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            clientID: 'ABC123',\n            clientSecret: 'secret'\n          }, function() {});\n        }).to.throw(TypeError, 'OAuth2Strategy requires a tokenURL option');\n      });\n    }); // without a tokenURL option\n    \n    describe('without a clientID option', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientSecret: 'secret'\n          }, function() {});\n        }).to.throw(TypeError, 'OAuth2Strategy requires a clientID option');\n      });\n    }); // without a clientID option\n    \n    describe('without a clientSecret option', function() {\n      it('should not throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123'\n          }, function() {});\n        }).to.not.throw();\n      });\n    }); // without a clientSecret option\n    \n    describe('with only a verify callback', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy(function() {});\n        }).to.throw(TypeError, 'OAuth2Strategy requires a authorizationURL option');\n      });\n    }); // with only a verify callback\n    \n  }); // constructed\n  \n  \n  describe('issuing authorization request', function() {\n    \n    describe('that redirects to service provider without redirect URI', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret'\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate();\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&client_id=ABC123');\n      });\n    }); // that redirects to service provider without redirect URI\n    \n    describe('that redirects to service provider with redirect URI', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate();\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n      });\n    }); // that redirects to service provider with redirect URI\n    \n    describe('that redirects to service provider with redirect URI and scope', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n        scope: 'email'\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate();\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=email&client_id=ABC123');\n      });\n    }); // that redirects to service provider with redirect URI and scope\n    \n    describe('that redirects to service provider with scope option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: 'email' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=email&client_id=ABC123');\n      });\n    }); // that redirects to service provider with scope option\n    \n    describe('that redirects to service provider with scope option as array', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: ['permission_1', 'permission_2' ] });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=permission_1%20permission_2&client_id=ABC123');\n      });\n    }); // that redirects to service provider with scope option as array\n    \n    describe('that redirects to service provider with scope option as array using non-standard separator', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n        scopeSeparator: ','\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: ['permission_1', 'permission_2' ] });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=permission_1%2Cpermission_2&client_id=ABC123');\n      });\n    }); // that redirects to service provider with scope option as array using non-standard separator\n    \n    describe('that redirects to service provider with state option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ state: 'foo123' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&state=foo123&client_id=ABC123');\n      });\n    }); // that redirects to service provider with state option\n    \n    describe('that redirects to service provider with redirect URI option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ callbackURL: 'https://www.example.net/auth/example/callback/alt1' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback%2Falt1&client_id=ABC123');\n      });\n    }); // that redirects to service provider with redirect URI option\n    \n    describe('that redirects to service provider with relative redirect URI option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n            req.url = '/auth/example/callback/alt2';\n            req.headers.host = 'www.example.net';\n            req.connection = { encrypted: true };\n          })\n          .authenticate({ callbackURL: '/auth/example/callback/alt2' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback%2Falt2&client_id=ABC123');\n      });\n    }); // that redirects to service provider with relative redirect URI option\n    \n    describe('that redirects to authorization server using authorization endpoint that has query parameters with scope option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize?foo=bar',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: 'email' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?foo=bar&response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=email&client_id=ABC123');\n      });\n    }); // that redirects to authorization server using authorization endpoint that has query parameters with scope option\n    \n    describe('that redirects to authorization server using authorization endpoint that has query parameters including scope with scope option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize?foo=bar&scope=baz',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: 'email' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?foo=bar&scope=email&response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n      });\n    }); // that redirects to authorization server using authorization endpoint that has query parameters including scope with scope option\n    \n    describe('that redirects to authorization server using authorization endpoint that has query parameters including state with state option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize?foo=bar&state=baz',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ state: 'foo123' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?foo=bar&state=foo123&response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n      });\n    }); // that redirects to authorization server using authorization endpoint that has query parameters including state with state option\n    \n  }); // issuing authorization request\n  \n  \n  describe('processing response to authorization request', function() {\n    \n    describe('that was approved without redirect URI', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret'\n      },\n      function(accessToken, refreshToken, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== undefined) { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved without redirect URI\n    \n    describe('that was approved with redirect URI', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved with redirect URI\n    \n    describe('that was approved with redirect URI option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback/alt1') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate({ callbackURL: 'https://www.example.net/auth/example/callback/alt1' });\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved with redirect URI option\n    \n    describe('that was approved with relative redirect URI option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback/alt2') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.url = '/auth/example/callback/alt2';\n            req.headers.host = 'www.example.net';\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n            req.connection = { encrypted: true };\n          })\n          .authenticate({ callbackURL: '/auth/example/callback/alt2' });\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved with relative redirect URI option\n    \n    describe('that was approved using verify callback that accepts params', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (params.example_parameter !== 'example_value') { return done(new Error('incorrect params argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example', expires_in: 3600, example_parameter: 'example_value' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved using verify callback that accepts params\n    \n    describe('that was approved using verify callback, in passReqToCallback mode', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n        passReqToCallback: true\n      },\n      function(req, accessToken, refreshToken, profile, done) {\n        if (req.method != 'GET') { return done(new Error('incorrect req argument')); }\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example', expires_in: 3600 });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved using verify callback, in passReqToCallback mode\n    \n    describe('that was approved using verify callback that accepts params, in passReqToCallback mode', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n        passReqToCallback: true\n      },\n      function(req, accessToken, refreshToken, params, profile, done) {\n        if (req.method != 'GET') { return done(new Error('incorrect req argument')); }\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (params.example_parameter !== 'example_value') { return done(new Error('incorrect params argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example', expires_in: 3600, example_parameter: 'example_value' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved using verify callback that accepts params, in passReqToCallback mode\n    \n    describe('that fails due to verify callback supplying false', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        return done(null, false);\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .fail(function(i) {\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should not supply info', function() {\n        expect(info).to.be.undefined;\n      });\n    }); // that fails due to verify callback supplying false\n    \n    describe('that fails due to verify callback supplying false with additional info', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        return done(null, false, { message: 'Invite required' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .fail(function(i) {\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Invite required');\n      });\n    }); // that fails due to verify callback supplying false with additional info\n    \n    describe('that was denied', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .fail(function(i) {\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'access_denied';\n          })\n          .authenticate();\n      });\n\n      it('should fail without message', function() {\n        expect(info).to.not.be.undefined;\n        expect(info.message).to.be.undefined;\n      });\n    }); // that was denied\n    \n    describe('that was denied with description', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .fail(function(i) {\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'access_denied';\n            req.query.error_description = 'Why oh why?';\n          })\n          .authenticate();\n      });\n\n      it('should fail with message', function() {\n        expect(info).to.not.be.undefined;\n        expect(info.message).to.equal('Why oh why?');\n      });\n    }); // that was denied with description\n    \n    describe('that was returned with an error without description', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var err;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'invalid_scope';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(AuthorizationError)\n        expect(err.message).to.be.undefined;\n        expect(err.code).to.equal('invalid_scope');\n        expect(err.uri).to.be.undefined;\n        expect(err.status).to.equal(500);\n      });\n    }); // that was returned with an error without description\n    \n    describe('that was returned with an error with description', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var err;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'invalid_scope';\n            req.query.error_description = 'The scope is invalid';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(AuthorizationError)\n        expect(err.message).to.equal('The scope is invalid');\n        expect(err.code).to.equal('invalid_scope');\n        expect(err.uri).to.be.undefined;\n        expect(err.status).to.equal(500);\n      });\n    }); // that was returned with an error with description\n    \n    describe('that was returned with an error with description and link', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var err;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'invalid_scope';\n            req.query.error_description = 'The scope is invalid';\n            req.query.error_uri = 'http://www.example.com/oauth2/help';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(AuthorizationError)\n        expect(err.message).to.equal('The scope is invalid');\n        expect(err.code).to.equal('invalid_scope');\n        expect(err.uri).to.equal('http://www.example.com/oauth2/help');\n        expect(err.status).to.equal(500);\n      });\n    }); // that was returned with an error with description and link\n    \n    describe('that errors due to token request error', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('verify callback should not be called'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback(new Error('something went wrong'));\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(InternalOAuthError)\n        expect(err.message).to.equal('Failed to obtain access token');\n        expect(err.oauthError.message).to.equal('something went wrong');\n      });\n    }); // that errors due to token request error\n    \n    describe('that errors due to token request error, in node-oauth object literal form with OAuth 2.0-compatible body', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('verify callback should not be called'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback({ statusCode: 400, data: '{\"error\":\"invalid_grant\",\"error_description\":\"The provided value for the input parameter \\'code\\' is not valid.\"} '});\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(TokenError)\n        expect(err.message).to.equal('The provided value for the input parameter \\'code\\' is not valid.');\n        expect(err.code).to.equal('invalid_grant');\n        expect(err.oauthError).to.be.undefined;\n      });\n    }); // that errors due to token request error, in node-oauth object literal form with OAuth 2.0-compatible body\n    \n    describe('that errors due to token request error, in node-oauth object literal form with JSON body', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('verify callback should not be called'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback({ statusCode: 400, data: '{\"error_code\":\"invalid_grant\"}'});\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(InternalOAuthError)\n        expect(err.message).to.equal('Failed to obtain access token');\n        expect(err.oauthError.statusCode).to.equal(400);\n        expect(err.oauthError.data).to.equal('{\"error_code\":\"invalid_grant\"}');\n      });\n    }); // that errors due to token request error, in node-oauth object literal form with JSON body\n    \n    describe('that errors due to token request error, in node-oauth object literal form with text body', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('verify callback should not be called'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback({ statusCode: 500, data: 'Something went wrong'});\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(InternalOAuthError)\n        expect(err.message).to.equal('Failed to obtain access token');\n        expect(err.oauthError.statusCode).to.equal(500);\n        expect(err.oauthError.data).to.equal('Something went wrong');\n      });\n    }); // that errors due to token request error, in node-oauth object literal form with text body\n    \n    describe('that errors due to verify callback supplying error', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('something went wrong'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(Error);\n        expect(err.message).to.equal('something went wrong');\n      });\n    }); // that errors due to verify callback supplying error\n    \n    describe('that errors due to verify callback throwing error', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        throw new Error('something was thrown');\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(Error);\n        expect(err.message).to.equal('something was thrown');\n      });\n    }); // that errors due to verify callback throwing error\n    \n  }); // processing response to authorization request\n  \n  \n  describe('using a relative redirect URI', function() {\n  \n    describe('issuing authorization request', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: '/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n  \n      describe('that redirects to service provider from secure connection', function() {\n        var url;\n\n        before(function(done) {\n          chai.passport.use(strategy)\n            .redirect(function(u) {\n              url = u;\n              done();\n            })\n            .req(function(req) {\n              req.url = '/auth/example';\n              req.headers.host = 'www.example.net';\n              req.connection = { encrypted: true };\n            })\n            .authenticate();\n        });\n\n        it('should be redirected', function() {\n          expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n        });\n      }); // that redirects to service provider from secure connection\n      \n      describe('that redirects to service provider from insecure connection', function() {\n        var url;\n\n        before(function(done) {\n          chai.passport.use(strategy)\n            .redirect(function(u) {\n              url = u;\n              done();\n            })\n            .req(function(req) {\n              req.url = '/auth/example';\n              req.headers.host = 'www.example.net';\n              req.connection = {};\n            })\n            .authenticate();\n        });\n\n        it('should be redirected', function() {\n          expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=http%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n        });\n      }); // that redirects to service provider from insecure connection\n      \n      \n      describe('from behind a secure proxy', function() {\n        \n        describe('that is trusted by app and sets x-forwarded-proto', function() {\n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.app = {\n                  get: function(name) {\n                    return name == 'trust proxy' ? true : false;\n                  }\n                }\n            \n                req.url = '/auth/example';\n                req.headers.host = 'www.example.net';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by app and sets x-forwarded-proto\n        \n        describe('that is trusted by app and sets x-forwarded-proto and x-forwarded-host', function() {\n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.app = {\n                  get: function(name) {\n                    return name == 'trust proxy' ? true : false;\n                  }\n                }\n            \n                req.url = '/auth/example';\n                req.headers.host = 'server.internal';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.headers['x-forwarded-host'] = 'www.example.net';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by app and sets x-forwarded-proto and x-forwarded-host\n        \n        describe('that is not trusted by app and sets x-forwarded-proto', function() {\n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.app = {\n                  get: function(name) {\n                    return name == 'trust proxy' ? false : false;\n                  }\n                }\n            \n                req.url = '/auth/example';\n                req.headers.host = 'www.example.net';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=http%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by app and sets x-forwarded-proto and x-forwarded-host\n        \n        describe('that is not trusted by app and sets x-forwarded-proto and x-forwarded-host', function() {\n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.app = {\n                  get: function(name) {\n                    return name == 'trust proxy' ? false : false;\n                  }\n                }\n            \n                req.url = '/auth/example';\n                req.headers.host = 'server.internal';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.headers['x-forwarded-host'] = 'www.example.net';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=http%3A%2F%2Fserver.internal%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is not trusted by app and sets x-forwarded-proto and x-forwarded-host\n        \n        describe('that is trusted by strategy and sets x-forwarded-proto', function() {\n          var strategy = new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123',\n            clientSecret: 'secret',\n            callbackURL: '/auth/example/callback',\n            proxy: true\n          },\n          function(accessToken, refreshToken, profile, done) {});\n          \n          \n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.url = '/auth/example';\n                req.headers.host = 'www.example.net';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by strategy and sets x-forwarded-proto\n        \n        describe('that is trusted by strategy and sets x-forwarded-proto and x-forwarded-host', function() {\n          var strategy = new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123',\n            clientSecret: 'secret',\n            callbackURL: '/auth/example/callback',\n            proxy: true\n          },\n          function(accessToken, refreshToken, profile, done) {});\n          \n          \n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.url = '/auth/example';\n                req.headers.host = 'server.internal';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.headers['x-forwarded-host'] = 'www.example.net';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by strategy and sets x-forwarded-proto and x-forwarded-host\n        \n      }); // from behind a secure proxy\n    \n    }); // issuing authorization request\n    \n    \n    describe('processing response to authorization request', function() {\n      \n      describe('that was approved over secure connection', function() {\n        var strategy = new OAuth2Strategy({\n          authorizationURL: 'https://www.example.com/oauth2/authorize',\n          tokenURL: 'https://www.example.com/oauth2/token',\n          clientID: 'ABC123',\n          clientSecret: 'secret',\n          callbackURL: '/auth/example/callback',\n        },\n        function(accessToken, refreshToken, profile, done) {\n          if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n          if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n          if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n          if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n\n          return done(null, { id: '1234' }, { message: 'Hello' });\n        });\n\n        strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n          if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n          if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n          if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n  \n          return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n        }\n        \n        \n        var user\n          , info;\n\n        before(function(done) {\n          chai.passport.use(strategy)\n            .success(function(u, i) {\n              user = u;\n              info = i;\n              done();\n            })\n            .req(function(req) {\n              req.url = '/auth/example';\n              req.headers.host = 'www.example.net';\n              req.query = {};\n              req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n              req.connection = { encrypted: true };\n            })\n            .authenticate();\n        });\n\n        it('should supply user', function() {\n          expect(user).to.be.an.object;\n          expect(user.id).to.equal('1234');\n        });\n\n        it('should supply info', function() {\n          expect(info).to.be.an.object;\n          expect(info.message).to.equal('Hello');\n        });\n      }); // that was approved over secure connection\n      \n      describe('that was approved over insecure connection', function() {\n        var strategy = new OAuth2Strategy({\n          authorizationURL: 'https://www.example.com/oauth2/authorize',\n          tokenURL: 'https://www.example.com/oauth2/token',\n          clientID: 'ABC123',\n          clientSecret: 'secret',\n          callbackURL: '/auth/example/callback',\n        },\n        function(accessToken, refreshToken, profile, done) {\n          if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n          if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n          if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n          if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n\n          return done(null, { id: '1234' }, { message: 'Hello' });\n        });\n\n        strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n          if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n          if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n          if (options.redirect_uri !== 'http://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n  \n          return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n        }\n        \n        \n        var user\n          , info;\n\n        before(function(done) {\n          chai.passport.use(strategy)\n            .success(function(u, i) {\n              user = u;\n              info = i;\n              done();\n            })\n            .req(function(req) {\n              req.url = '/auth/example';\n              req.headers.host = 'www.example.net';\n              req.query = {};\n              req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n              req.connection = {};\n            })\n            .authenticate();\n        });\n\n        it('should supply user', function() {\n          expect(user).to.be.an.object;\n          expect(user.id).to.equal('1234');\n        });\n\n        it('should supply info', function() {\n          expect(info).to.be.an.object;\n          expect(info.message).to.equal('Hello');\n        });\n      }); // that was approved over insecure connection\n      \n    }); // processing response to authorization request\n    \n  }); // using a relative redirect URI\n  \n});\n"], "fixing_code": ["// Load modules.\nvar passport = require('passport-strategy')\n  , url = require('url')\n  , uid = require('uid2')\n  , crypto = require('crypto')\n  , base64url = require('base64url')\n  , util = require('util')\n  , utils = require('./utils')\n  , OAuth2 = require('oauth').OAuth2\n  , NullStore = require('./state/null')\n  , NonceStore = require('./state/session')\n  , StateStore = require('./state/store')\n  , PKCEStateStore = require('./state/pkcesession')\n  , AuthorizationError = require('./errors/authorizationerror')\n  , TokenError = require('./errors/tokenerror')\n  , InternalOAuthError = require('./errors/internaloautherror');\n\n\n/**\n * Creates an instance of `OAuth2Strategy`.\n *\n * The OAuth 2.0 authentication strategy authenticates requests using the OAuth\n * 2.0 framework.\n *\n * OAuth 2.0 provides a facility for delegated authentication, whereby users can\n * authenticate using a third-party service such as Facebook.  Delegating in\n * this manner involves a sequence of events, including redirecting the user to\n * the third-party service for authorization.  Once authorization has been\n * granted, the user is redirected back to the application and an authorization\n * code can be used to obtain credentials.\n *\n * Applications must supply a `verify` callback, for which the function\n * signature is:\n *\n *     function(accessToken, refreshToken, profile, done) { ... }\n *\n * The verify callback is responsible for finding or creating the user, and\n * invoking `done` with the following arguments:\n *\n *     done(err, user, info);\n *\n * `user` should be set to `false` to indicate an authentication failure.\n * Additional `info` can optionally be passed as a third argument, typically\n * used to display informational messages.  If an exception occured, `err`\n * should be set.\n *\n * Options:\n *\n *   - `authorizationURL`  URL used to obtain an authorization grant\n *   - `tokenURL`          URL used to obtain an access token\n *   - `clientID`          identifies client to service provider\n *   - `clientSecret`      secret used to establish ownership of the client identifer\n *   - `callbackURL`       URL to which the service provider will redirect the user after obtaining authorization\n *   - `passReqToCallback` when `true`, `req` is the first argument to the verify callback (default: `false`)\n *\n * Examples:\n *\n *     passport.use(new OAuth2Strategy({\n *         authorizationURL: 'https://www.example.com/oauth2/authorize',\n *         tokenURL: 'https://www.example.com/oauth2/token',\n *         clientID: '123-456-789',\n *         clientSecret: 'shhh-its-a-secret'\n *         callbackURL: 'https://www.example.net/auth/example/callback'\n *       },\n *       function(accessToken, refreshToken, profile, done) {\n *         User.findOrCreate(..., function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @constructor\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction OAuth2Strategy(options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = undefined;\n  }\n  options = options || {};\n\n  if (!verify) { throw new TypeError('OAuth2Strategy requires a verify callback'); }\n  if (!options.authorizationURL) { throw new TypeError('OAuth2Strategy requires a authorizationURL option'); }\n  if (!options.tokenURL) { throw new TypeError('OAuth2Strategy requires a tokenURL option'); }\n  if (!options.clientID) { throw new TypeError('OAuth2Strategy requires a clientID option'); }\n\n  passport.Strategy.call(this);\n  this.name = 'oauth2';\n  this._verify = verify;\n\n  // NOTE: The _oauth2 property is considered \"protected\".  Subclasses are\n  //       allowed to use it when making protected resource requests to retrieve\n  //       the user profile.\n  this._oauth2 = new OAuth2(options.clientID,  options.clientSecret,\n                            '', options.authorizationURL, options.tokenURL, options.customHeaders);\n\n  this._callbackURL = options.callbackURL;\n  this._scope = options.scope;\n  this._scopeSeparator = options.scopeSeparator || ' ';\n  this._pkceMethod = (options.pkce === true) ? 'S256' : options.pkce;\n  this._key = options.sessionKey || ('oauth2:' + url.parse(options.authorizationURL).hostname);\n\n  if (options.store && typeof options.store == 'object') {\n    this._stateStore = options.store;\n  } else if (options.store) {\n    this._stateStore = options.pkce ? new PKCEStateStore({ key: this._key }) : new StateStore({ key: this._key });\n  } else if (options.state) {\n    this._stateStore = options.pkce ? new PKCEStateStore({ key: this._key }) : new NonceStore({ key: this._key });\n  } else {\n    if (options.pkce) { throw new TypeError('OAuth2Strategy requires `state: true` option when PKCE is enabled'); }\n    this._stateStore = new NullStore();\n  }\n  this._trustProxy = options.proxy;\n  this._passReqToCallback = options.passReqToCallback;\n  this._skipUserProfile = (options.skipUserProfile === undefined) ? false : options.skipUserProfile;\n}\n\n// Inherit from `passport.Strategy`.\nutil.inherits(OAuth2Strategy, passport.Strategy);\n\n\n/**\n * Authenticate request by delegating to a service provider using OAuth 2.0.\n *\n * @param {Object} req\n * @api protected\n */\nOAuth2Strategy.prototype.authenticate = function(req, options) {\n  options = options || {};\n  var self = this;\n\n  if (req.query && req.query.error) {\n    if (req.query.error == 'access_denied') {\n      return this.fail({ message: req.query.error_description });\n    } else {\n      return this.error(new AuthorizationError(req.query.error_description, req.query.error, req.query.error_uri));\n    }\n  }\n\n  var callbackURL = options.callbackURL || this._callbackURL;\n  if (callbackURL) {\n    var parsed = url.parse(callbackURL);\n    if (!parsed.protocol) {\n      // The callback URL is relative, resolve a fully qualified URL from the\n      // URL of the originating request.\n      callbackURL = url.resolve(utils.originalURL(req, { proxy: this._trustProxy }), callbackURL);\n    }\n  }\n\n  var meta = {\n    authorizationURL: this._oauth2._authorizeUrl,\n    tokenURL: this._oauth2._accessTokenUrl,\n    clientID: this._oauth2._clientId,\n    callbackURL: callbackURL\n  }\n\n  if (req.query && req.query.code) {\n    function loaded(err, ok, state) {\n      if (err) { return self.error(err); }\n      if (!ok) {\n        return self.fail(state, 403);\n      }\n\n      var code = req.query.code;\n\n      var params = self.tokenParams(options);\n      params.grant_type = 'authorization_code';\n      if (callbackURL) { params.redirect_uri = callbackURL; }\n      if (typeof ok == 'string') { // PKCE\n        params.code_verifier = ok;\n      }\n\n      self._oauth2.getOAuthAccessToken(code, params,\n        function(err, accessToken, refreshToken, params) {\n          if (err) { return self.error(self._createOAuthError('Failed to obtain access token', err)); }\n          if (!accessToken) { return self.error(new Error('Failed to obtain access token')); }\n\n          self._loadUserProfile(accessToken, function(err, profile) {\n            if (err) { return self.error(err); }\n\n            function verified(err, user, info) {\n              if (err) { return self.error(err); }\n              if (!user) { return self.fail(info); }\n\n              info = info || {};\n              if (state) { info.state = state; }\n              self.success(user, info);\n            }\n\n            try {\n              if (self._passReqToCallback) {\n                var arity = self._verify.length;\n                if (arity == 6) {\n                  self._verify(req, accessToken, refreshToken, params, profile, verified);\n                } else { // arity == 5\n                  self._verify(req, accessToken, refreshToken, profile, verified);\n                }\n              } else {\n                var arity = self._verify.length;\n                if (arity == 5) {\n                  self._verify(accessToken, refreshToken, params, profile, verified);\n                } else { // arity == 4\n                  self._verify(accessToken, refreshToken, profile, verified);\n                }\n              }\n            } catch (ex) {\n              return self.error(ex);\n            }\n          });\n        }\n      );\n    }\n\n    var state = req.query.state;\n    try {\n      var arity = this._stateStore.verify.length;\n      if (arity == 4) {\n        this._stateStore.verify(req, state, meta, loaded);\n      } else { // arity == 3\n        this._stateStore.verify(req, state, loaded);\n      }\n    } catch (ex) {\n      return this.error(ex);\n    }\n  } else {\n    var params = this.authorizationParams(options);\n    params.response_type = 'code';\n    if (callbackURL) { params.redirect_uri = callbackURL; }\n    var scope = options.scope || this._scope;\n    if (scope) {\n      if (Array.isArray(scope)) { scope = scope.join(this._scopeSeparator); }\n      params.scope = scope;\n    }\n    var verifier, challenge;\n\n    if (this._pkceMethod) {\n      verifier = base64url(crypto.pseudoRandomBytes(32))\n      switch (this._pkceMethod) {\n      case 'plain':\n        challenge = verifier;\n        break;\n      case 'S256':\n        challenge = base64url(crypto.createHash('sha256').update(verifier).digest());\n        break;\n      default:\n        return this.error(new Error('Unsupported code verifier transformation method: ' + this._pkceMethod));\n      }\n      \n      params.code_challenge = challenge;\n      params.code_challenge_method = this._pkceMethod;\n    }\n\n    var state = options.state;\n    if (state && typeof state == 'string') {\n      // NOTE: In passport-oauth2@1.5.0 and earlier, `state` could be passed as\n      //       an object.  However, it would result in an empty string being\n      //       serialized as the value of the query parameter by `url.format()`,\n      //       effectively ignoring the option.  This implies that `state` was\n      //       only functional when passed as a string value.\n      //\n      //       This fact is taken advantage of here to fall into the `else`\n      //       branch below when `state` is passed as an object.  In that case\n      //       the state will be automatically managed and persisted by the\n      //       state store.\n      params.state = state;\n      \n      var parsed = url.parse(this._oauth2._authorizeUrl, true);\n      utils.merge(parsed.query, params);\n      parsed.query['client_id'] = this._oauth2._clientId;\n      delete parsed.search;\n      var location = url.format(parsed);\n      this.redirect(location);\n    } else {\n      function stored(err, state) {\n        if (err) { return self.error(err); }\n\n        if (state) { params.state = state; }\n        var parsed = url.parse(self._oauth2._authorizeUrl, true);\n        utils.merge(parsed.query, params);\n        parsed.query['client_id'] = self._oauth2._clientId;\n        delete parsed.search;\n        var location = url.format(parsed);\n        self.redirect(location);\n      }\n\n      try {\n        var arity = this._stateStore.store.length;\n        if (arity == 5) {\n          this._stateStore.store(req, verifier, state, meta, stored);\n        } else if (arity == 4) {\n          this._stateStore.store(req, state, meta, stored);\n        } else if (arity == 3) {\n          this._stateStore.store(req, meta, stored);\n        } else { // arity == 2\n          this._stateStore.store(req, stored);\n        }\n      } catch (ex) {\n        return this.error(ex);\n      }\n    }\n  }\n};\n\n/**\n * Retrieve user profile from service provider.\n *\n * OAuth 2.0-based authentication strategies can overrride this function in\n * order to load the user's profile from the service provider.  This assists\n * applications (and users of those applications) in the initial registration\n * process by automatically submitting required information.\n *\n * @param {String} accessToken\n * @param {Function} done\n * @api protected\n */\nOAuth2Strategy.prototype.userProfile = function(accessToken, done) {\n  return done(null, {});\n};\n\n/**\n * Return extra parameters to be included in the authorization request.\n *\n * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n * included when requesting authorization.  Since these parameters are not\n * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n * strategies can overrride this function in order to populate these parameters\n * as required by the provider.\n *\n * @param {Object} options\n * @return {Object}\n * @api protected\n */\nOAuth2Strategy.prototype.authorizationParams = function(options) {\n  return {};\n};\n\n/**\n * Return extra parameters to be included in the token request.\n *\n * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n * included when requesting an access token.  Since these parameters are not\n * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n * strategies can overrride this function in order to populate these parameters\n * as required by the provider.\n *\n * @return {Object}\n * @api protected\n */\nOAuth2Strategy.prototype.tokenParams = function(options) {\n  return {};\n};\n\n/**\n * Parse error response from OAuth 2.0 endpoint.\n *\n * OAuth 2.0-based authentication strategies can overrride this function in\n * order to parse error responses received from the token endpoint, allowing the\n * most informative message to be displayed.\n *\n * If this function is not overridden, the body will be parsed in accordance\n * with RFC 6749, section 5.2.\n *\n * @param {String} body\n * @param {Number} status\n * @return {Error}\n * @api protected\n */\nOAuth2Strategy.prototype.parseErrorResponse = function(body, status) {\n  var json = JSON.parse(body);\n  if (json.error) {\n    return new TokenError(json.error_description, json.error, json.error_uri);\n  }\n  return null;\n};\n\n/**\n * Load user profile, contingent upon options.\n *\n * @param {String} accessToken\n * @param {Function} done\n * @api private\n */\nOAuth2Strategy.prototype._loadUserProfile = function(accessToken, done) {\n  var self = this;\n\n  function loadIt() {\n    return self.userProfile(accessToken, done);\n  }\n  function skipIt() {\n    return done(null);\n  }\n\n  if (typeof this._skipUserProfile == 'function' && this._skipUserProfile.length > 1) {\n    // async\n    this._skipUserProfile(accessToken, function(err, skip) {\n      if (err) { return done(err); }\n      if (!skip) { return loadIt(); }\n      return skipIt();\n    });\n  } else {\n    var skip = (typeof this._skipUserProfile == 'function') ? this._skipUserProfile() : this._skipUserProfile;\n    if (!skip) { return loadIt(); }\n    return skipIt();\n  }\n};\n\n/**\n * Create an OAuth error.\n *\n * @param {String} message\n * @param {Object|Error} err\n * @api private\n */\nOAuth2Strategy.prototype._createOAuthError = function(message, err) {\n  var e;\n  if (err.statusCode && err.data) {\n    try {\n      e = this.parseErrorResponse(err.data, err.statusCode);\n    } catch (_) {}\n  }\n  if (!e) { e = new InternalOAuthError(message, err); }\n  return e;\n};\n\n\n// Expose constructor.\nmodule.exports = OAuth2Strategy;\n", "var OAuth2Strategy = require('../lib/strategy')\n  , AuthorizationError = require('../lib/errors/authorizationerror')\n  , TokenError = require('../lib/errors/tokenerror')\n  , InternalOAuthError = require('../lib/errors/internaloautherror')\n  , chai = require('chai');\n\n\ndescribe('OAuth2Strategy', function() {\n  \n  describe('constructed', function() {\n    \n    describe('with normal options', function() {\n      var strategy = new OAuth2Strategy({\n          authorizationURL: 'https://www.example.com/oauth2/authorize',\n          tokenURL: 'https://www.example.com/oauth2/token',\n          clientID: 'ABC123',\n          clientSecret: 'secret'\n        }, function() {});\n    \n      it('should be named oauth2', function() {\n        expect(strategy.name).to.equal('oauth2');\n      });\n    }); // with normal options\n    \n    describe('without a verify callback', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123',\n            clientSecret: 'secret'\n          });\n        }).to.throw(TypeError, 'OAuth2Strategy requires a verify callback');\n      });\n    }); // without a verify callback\n    \n    describe('without an authorizationURL option', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123',\n            clientSecret: 'secret'\n          }, function() {});\n        }).to.throw(TypeError, 'OAuth2Strategy requires a authorizationURL option');\n      });\n    }); // without an authorizationURL option\n    \n    describe('without a tokenURL option', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            clientID: 'ABC123',\n            clientSecret: 'secret'\n          }, function() {});\n        }).to.throw(TypeError, 'OAuth2Strategy requires a tokenURL option');\n      });\n    }); // without a tokenURL option\n    \n    describe('without a clientID option', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientSecret: 'secret'\n          }, function() {});\n        }).to.throw(TypeError, 'OAuth2Strategy requires a clientID option');\n      });\n    }); // without a clientID option\n    \n    describe('without a clientSecret option', function() {\n      it('should not throw', function() {\n        expect(function() {\n          new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123'\n          }, function() {});\n        }).to.not.throw();\n      });\n    }); // without a clientSecret option\n    \n    describe('with only a verify callback', function() {\n      it('should throw', function() {\n        expect(function() {\n          new OAuth2Strategy(function() {});\n        }).to.throw(TypeError, 'OAuth2Strategy requires a authorizationURL option');\n      });\n    }); // with only a verify callback\n    \n  }); // constructed\n  \n  \n  describe('issuing authorization request', function() {\n    \n    describe('that redirects to service provider without redirect URI', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret'\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate();\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&client_id=ABC123');\n      });\n    }); // that redirects to service provider without redirect URI\n    \n    describe('that redirects to service provider with redirect URI', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate();\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n      });\n    }); // that redirects to service provider with redirect URI\n    \n    describe('that redirects to service provider with redirect URI and scope', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n        scope: 'email'\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate();\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=email&client_id=ABC123');\n      });\n    }); // that redirects to service provider with redirect URI and scope\n    \n    describe('that redirects to service provider with scope option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: 'email' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=email&client_id=ABC123');\n      });\n    }); // that redirects to service provider with scope option\n    \n    describe('that redirects to service provider with scope option as array', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: ['permission_1', 'permission_2' ] });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=permission_1%20permission_2&client_id=ABC123');\n      });\n    }); // that redirects to service provider with scope option as array\n    \n    describe('that redirects to service provider with scope option as array using non-standard separator', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n        scopeSeparator: ','\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: ['permission_1', 'permission_2' ] });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=permission_1%2Cpermission_2&client_id=ABC123');\n      });\n    }); // that redirects to service provider with scope option as array using non-standard separator\n    \n    describe('that redirects to service provider with state option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ state: 'foo123' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&state=foo123&client_id=ABC123');\n      });\n    }); // that redirects to service provider with state option\n    \n    describe('that redirects to service provider with redirect URI option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ callbackURL: 'https://www.example.net/auth/example/callback/alt1' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback%2Falt1&client_id=ABC123');\n      });\n    }); // that redirects to service provider with redirect URI option\n    \n    describe('that redirects to service provider with relative redirect URI option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n            req.url = '/auth/example/callback/alt2';\n            req.headers.host = 'www.example.net';\n            req.connection = { encrypted: true };\n          })\n          .authenticate({ callbackURL: '/auth/example/callback/alt2' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback%2Falt2&client_id=ABC123');\n      });\n    }); // that redirects to service provider with relative redirect URI option\n    \n    describe('that redirects to authorization server using authorization endpoint that has query parameters with scope option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize?foo=bar',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: 'email' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?foo=bar&response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&scope=email&client_id=ABC123');\n      });\n    }); // that redirects to authorization server using authorization endpoint that has query parameters with scope option\n    \n    describe('that redirects to authorization server using authorization endpoint that has query parameters including scope with scope option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize?foo=bar&scope=baz',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ scope: 'email' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?foo=bar&scope=email&response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n      });\n    }); // that redirects to authorization server using authorization endpoint that has query parameters including scope with scope option\n    \n    describe('that redirects to authorization server using authorization endpoint that has query parameters including state with state option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize?foo=bar&state=baz',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var url;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .redirect(function(u) {\n            url = u;\n            done();\n          })\n          .req(function(req) {\n          })\n          .authenticate({ state: 'foo123' });\n      });\n  \n      it('should be redirected', function() {\n        expect(url).to.equal('https://www.example.com/oauth2/authorize?foo=bar&state=foo123&response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n      });\n    }); // that redirects to authorization server using authorization endpoint that has query parameters including state with state option\n    \n  }); // issuing authorization request\n  \n  \n  describe('processing response to authorization request', function() {\n    \n    describe('that was approved without redirect URI', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret'\n      },\n      function(accessToken, refreshToken, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== undefined) { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved without redirect URI\n    \n    describe('that was approved with redirect URI', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved with redirect URI\n    \n    describe('that was approved with redirect URI option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback/alt1') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate({ callbackURL: 'https://www.example.net/auth/example/callback/alt1' });\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved with redirect URI option\n    \n    describe('that was approved with relative redirect URI option', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback/alt2') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.url = '/auth/example/callback/alt2';\n            req.headers.host = 'www.example.net';\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n            req.connection = { encrypted: true };\n          })\n          .authenticate({ callbackURL: '/auth/example/callback/alt2' });\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved with relative redirect URI option\n    \n    describe('that was approved using verify callback that accepts params', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (params.example_parameter !== 'example_value') { return done(new Error('incorrect params argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example', expires_in: 3600, example_parameter: 'example_value' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved using verify callback that accepts params\n    \n    describe('that was approved using verify callback, in passReqToCallback mode', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n        passReqToCallback: true\n      },\n      function(req, accessToken, refreshToken, profile, done) {\n        if (req.method != 'GET') { return done(new Error('incorrect req argument')); }\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example', expires_in: 3600 });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved using verify callback, in passReqToCallback mode\n    \n    describe('that was approved using verify callback that accepts params, in passReqToCallback mode', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n        passReqToCallback: true\n      },\n      function(req, accessToken, refreshToken, params, profile, done) {\n        if (req.method != 'GET') { return done(new Error('incorrect req argument')); }\n        if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n        if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n        if (params.example_parameter !== 'example_value') { return done(new Error('incorrect params argument')); }\n        if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n        if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n    \n        return done(null, { id: '1234' }, { message: 'Hello' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example', expires_in: 3600, example_parameter: 'example_value' });\n      }\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .success(function(u, i) {\n            user = u;\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply user', function() {\n        expect(user).to.be.an.object;\n        expect(user.id).to.equal('1234');\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Hello');\n      });\n    }); // that was approved using verify callback that accepts params, in passReqToCallback mode\n    \n    describe('that fails due to verify callback supplying false', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        return done(null, false);\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .fail(function(i) {\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should not supply info', function() {\n        expect(info).to.be.undefined;\n      });\n    }); // that fails due to verify callback supplying false\n    \n    describe('that fails due to verify callback supplying false with additional info', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {\n        return done(null, false, { message: 'Invite required' });\n      });\n      \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n        if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n        if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n        \n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n      \n      \n      var info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .fail(function(i) {\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should supply info', function() {\n        expect(info).to.be.an.object;\n        expect(info.message).to.equal('Invite required');\n      });\n    }); // that fails due to verify callback supplying false with additional info\n    \n    describe('that was denied', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .fail(function(i) {\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'access_denied';\n          })\n          .authenticate();\n      });\n\n      it('should fail without message', function() {\n        expect(info).to.not.be.undefined;\n        expect(info.message).to.be.undefined;\n      });\n    }); // that was denied\n    \n    describe('that was denied with description', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var user\n        , info;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .fail(function(i) {\n            info = i;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'access_denied';\n            req.query.error_description = 'Why oh why?';\n          })\n          .authenticate();\n      });\n\n      it('should fail with message', function() {\n        expect(info).to.not.be.undefined;\n        expect(info.message).to.equal('Why oh why?');\n      });\n    }); // that was denied with description\n    \n    describe('that was returned with an error without description', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var err;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'invalid_scope';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(AuthorizationError)\n        expect(err.message).to.be.undefined;\n        expect(err.code).to.equal('invalid_scope');\n        expect(err.uri).to.be.undefined;\n        expect(err.status).to.equal(500);\n      });\n    }); // that was returned with an error without description\n    \n    describe('that was returned with an error with description', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var err;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'invalid_scope';\n            req.query.error_description = 'The scope is invalid';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(AuthorizationError)\n        expect(err.message).to.equal('The scope is invalid');\n        expect(err.code).to.equal('invalid_scope');\n        expect(err.uri).to.be.undefined;\n        expect(err.status).to.equal(500);\n      });\n    }); // that was returned with an error with description\n    \n    describe('that was returned with an error with description and link', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n      \n      \n      var err;\n\n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.error = 'invalid_scope';\n            req.query.error_description = 'The scope is invalid';\n            req.query.error_uri = 'http://www.example.com/oauth2/help';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(AuthorizationError)\n        expect(err.message).to.equal('The scope is invalid');\n        expect(err.code).to.equal('invalid_scope');\n        expect(err.uri).to.equal('http://www.example.com/oauth2/help');\n        expect(err.status).to.equal(500);\n      });\n    }); // that was returned with an error with description and link\n    \n    describe('that errors due to token request error', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('verify callback should not be called'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback(new Error('something went wrong'));\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(InternalOAuthError)\n        expect(err.message).to.equal('Failed to obtain access token');\n        expect(err.oauthError.message).to.equal('something went wrong');\n      });\n    }); // that errors due to token request error\n    \n    describe('that errors due to token request error, in node-oauth object literal form with OAuth 2.0-compatible body', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('verify callback should not be called'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback({ statusCode: 400, data: '{\"error\":\"invalid_grant\",\"error_description\":\"The provided value for the input parameter \\'code\\' is not valid.\"} '});\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(TokenError)\n        expect(err.message).to.equal('The provided value for the input parameter \\'code\\' is not valid.');\n        expect(err.code).to.equal('invalid_grant');\n        expect(err.oauthError).to.be.undefined;\n      });\n    }); // that errors due to token request error, in node-oauth object literal form with OAuth 2.0-compatible body\n    \n    describe('that errors due to token request error, in node-oauth object literal form with JSON body', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('verify callback should not be called'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback({ statusCode: 400, data: '{\"error_code\":\"invalid_grant\"}'});\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(InternalOAuthError)\n        expect(err.message).to.equal('Failed to obtain access token');\n        expect(err.oauthError.statusCode).to.equal(400);\n        expect(err.oauthError.data).to.equal('{\"error_code\":\"invalid_grant\"}');\n      });\n    }); // that errors due to token request error, in node-oauth object literal form with JSON body\n    \n    describe('that errors due to token request error, in node-oauth object literal form with text body', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('verify callback should not be called'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback({ statusCode: 500, data: 'Something went wrong'});\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(InternalOAuthError)\n        expect(err.message).to.equal('Failed to obtain access token');\n        expect(err.oauthError.statusCode).to.equal(500);\n        expect(err.oauthError.data).to.equal('Something went wrong');\n      });\n    }); // that errors due to token request error, in node-oauth object literal form with text body\n    \n    describe('that errors due to not receiving an access token', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('something went wrong'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback(null, undefined, undefined, undefined);\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(Error);\n        expect(err).to.not.be.an.instanceof(InternalOAuthError)\n        expect(err.message).to.equal('Failed to obtain access token');\n      });\n    }); // that errors due to not receiving an access token\n    \n    describe('that errors due to verify callback supplying error', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        return done(new Error('something went wrong'));\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(Error);\n        expect(err.message).to.equal('something went wrong');\n      });\n    }); // that errors due to verify callback supplying error\n    \n    describe('that errors due to verify callback throwing error', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: 'https://www.example.net/auth/example/callback',\n      },\n      function(accessToken, refreshToken, params, profile, done) {\n        throw new Error('something was thrown');\n      });\n  \n      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n        return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n      }\n  \n  \n      var err;\n  \n      before(function(done) {\n        chai.passport.use(strategy)\n          .error(function(e) {\n            err = e;\n            done();\n          })\n          .req(function(req) {\n            req.query = {};\n            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n          })\n          .authenticate();\n      });\n\n      it('should error', function() {\n        expect(err).to.be.an.instanceof(Error);\n        expect(err.message).to.equal('something was thrown');\n      });\n    }); // that errors due to verify callback throwing error\n    \n  }); // processing response to authorization request\n  \n  \n  describe('using a relative redirect URI', function() {\n  \n    describe('issuing authorization request', function() {\n      var strategy = new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'ABC123',\n        clientSecret: 'secret',\n        callbackURL: '/auth/example/callback',\n      },\n      function(accessToken, refreshToken, profile, done) {});\n  \n      describe('that redirects to service provider from secure connection', function() {\n        var url;\n\n        before(function(done) {\n          chai.passport.use(strategy)\n            .redirect(function(u) {\n              url = u;\n              done();\n            })\n            .req(function(req) {\n              req.url = '/auth/example';\n              req.headers.host = 'www.example.net';\n              req.connection = { encrypted: true };\n            })\n            .authenticate();\n        });\n\n        it('should be redirected', function() {\n          expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n        });\n      }); // that redirects to service provider from secure connection\n      \n      describe('that redirects to service provider from insecure connection', function() {\n        var url;\n\n        before(function(done) {\n          chai.passport.use(strategy)\n            .redirect(function(u) {\n              url = u;\n              done();\n            })\n            .req(function(req) {\n              req.url = '/auth/example';\n              req.headers.host = 'www.example.net';\n              req.connection = {};\n            })\n            .authenticate();\n        });\n\n        it('should be redirected', function() {\n          expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=http%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n        });\n      }); // that redirects to service provider from insecure connection\n      \n      \n      describe('from behind a secure proxy', function() {\n        \n        describe('that is trusted by app and sets x-forwarded-proto', function() {\n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.app = {\n                  get: function(name) {\n                    return name == 'trust proxy' ? true : false;\n                  }\n                }\n            \n                req.url = '/auth/example';\n                req.headers.host = 'www.example.net';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by app and sets x-forwarded-proto\n        \n        describe('that is trusted by app and sets x-forwarded-proto and x-forwarded-host', function() {\n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.app = {\n                  get: function(name) {\n                    return name == 'trust proxy' ? true : false;\n                  }\n                }\n            \n                req.url = '/auth/example';\n                req.headers.host = 'server.internal';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.headers['x-forwarded-host'] = 'www.example.net';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by app and sets x-forwarded-proto and x-forwarded-host\n        \n        describe('that is not trusted by app and sets x-forwarded-proto', function() {\n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.app = {\n                  get: function(name) {\n                    return name == 'trust proxy' ? false : false;\n                  }\n                }\n            \n                req.url = '/auth/example';\n                req.headers.host = 'www.example.net';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=http%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by app and sets x-forwarded-proto and x-forwarded-host\n        \n        describe('that is not trusted by app and sets x-forwarded-proto and x-forwarded-host', function() {\n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.app = {\n                  get: function(name) {\n                    return name == 'trust proxy' ? false : false;\n                  }\n                }\n            \n                req.url = '/auth/example';\n                req.headers.host = 'server.internal';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.headers['x-forwarded-host'] = 'www.example.net';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=http%3A%2F%2Fserver.internal%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is not trusted by app and sets x-forwarded-proto and x-forwarded-host\n        \n        describe('that is trusted by strategy and sets x-forwarded-proto', function() {\n          var strategy = new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123',\n            clientSecret: 'secret',\n            callbackURL: '/auth/example/callback',\n            proxy: true\n          },\n          function(accessToken, refreshToken, profile, done) {});\n          \n          \n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.url = '/auth/example';\n                req.headers.host = 'www.example.net';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by strategy and sets x-forwarded-proto\n        \n        describe('that is trusted by strategy and sets x-forwarded-proto and x-forwarded-host', function() {\n          var strategy = new OAuth2Strategy({\n            authorizationURL: 'https://www.example.com/oauth2/authorize',\n            tokenURL: 'https://www.example.com/oauth2/token',\n            clientID: 'ABC123',\n            clientSecret: 'secret',\n            callbackURL: '/auth/example/callback',\n            proxy: true\n          },\n          function(accessToken, refreshToken, profile, done) {});\n          \n          \n          var url;\n\n          before(function(done) {\n            chai.passport.use(strategy)\n              .redirect(function(u) {\n                url = u;\n                done();\n              })\n              .req(function(req) {\n                req.url = '/auth/example';\n                req.headers.host = 'server.internal';\n                req.headers['x-forwarded-proto'] = 'https';\n                req.headers['x-forwarded-host'] = 'www.example.net';\n                req.connection = {};\n              })\n              .authenticate();\n          });\n\n          it('should be redirected', function() {\n            expect(url).to.equal('https://www.example.com/oauth2/authorize?response_type=code&redirect_uri=https%3A%2F%2Fwww.example.net%2Fauth%2Fexample%2Fcallback&client_id=ABC123');\n          });\n        }); // that is trusted by strategy and sets x-forwarded-proto and x-forwarded-host\n        \n      }); // from behind a secure proxy\n    \n    }); // issuing authorization request\n    \n    \n    describe('processing response to authorization request', function() {\n      \n      describe('that was approved over secure connection', function() {\n        var strategy = new OAuth2Strategy({\n          authorizationURL: 'https://www.example.com/oauth2/authorize',\n          tokenURL: 'https://www.example.com/oauth2/token',\n          clientID: 'ABC123',\n          clientSecret: 'secret',\n          callbackURL: '/auth/example/callback',\n        },\n        function(accessToken, refreshToken, profile, done) {\n          if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n          if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n          if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n          if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n\n          return done(null, { id: '1234' }, { message: 'Hello' });\n        });\n\n        strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n          if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n          if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n          if (options.redirect_uri !== 'https://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n  \n          return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n        }\n        \n        \n        var user\n          , info;\n\n        before(function(done) {\n          chai.passport.use(strategy)\n            .success(function(u, i) {\n              user = u;\n              info = i;\n              done();\n            })\n            .req(function(req) {\n              req.url = '/auth/example';\n              req.headers.host = 'www.example.net';\n              req.query = {};\n              req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n              req.connection = { encrypted: true };\n            })\n            .authenticate();\n        });\n\n        it('should supply user', function() {\n          expect(user).to.be.an.object;\n          expect(user.id).to.equal('1234');\n        });\n\n        it('should supply info', function() {\n          expect(info).to.be.an.object;\n          expect(info.message).to.equal('Hello');\n        });\n      }); // that was approved over secure connection\n      \n      describe('that was approved over insecure connection', function() {\n        var strategy = new OAuth2Strategy({\n          authorizationURL: 'https://www.example.com/oauth2/authorize',\n          tokenURL: 'https://www.example.com/oauth2/token',\n          clientID: 'ABC123',\n          clientSecret: 'secret',\n          callbackURL: '/auth/example/callback',\n        },\n        function(accessToken, refreshToken, profile, done) {\n          if (accessToken !== '2YotnFZFEjr1zCsicMWpAA') { return done(new Error('incorrect accessToken argument')); }\n          if (refreshToken !== 'tGzv3JOkF0XG5Qx2TlKWIA') { return done(new Error('incorrect refreshToken argument')); }\n          if (typeof profile !== 'object') { return done(new Error('incorrect profile argument')); }\n          if (Object.keys(profile).length !== 0) { return done(new Error('incorrect profile argument')); }\n\n          return done(null, { id: '1234' }, { message: 'Hello' });\n        });\n\n        strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n          if (code !== 'SplxlOBeZQQYbYS6WxSbIA') { return callback(new Error('incorrect code argument')); }\n          if (options.grant_type !== 'authorization_code') { return callback(new Error('incorrect options.grant_type argument')); }\n          if (options.redirect_uri !== 'http://www.example.net/auth/example/callback') { return callback(new Error('incorrect options.redirect_uri argument')); }\n  \n          return callback(null, '2YotnFZFEjr1zCsicMWpAA', 'tGzv3JOkF0XG5Qx2TlKWIA', { token_type: 'example' });\n        }\n        \n        \n        var user\n          , info;\n\n        before(function(done) {\n          chai.passport.use(strategy)\n            .success(function(u, i) {\n              user = u;\n              info = i;\n              done();\n            })\n            .req(function(req) {\n              req.url = '/auth/example';\n              req.headers.host = 'www.example.net';\n              req.query = {};\n              req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n              req.connection = {};\n            })\n            .authenticate();\n        });\n\n        it('should supply user', function() {\n          expect(user).to.be.an.object;\n          expect(user.id).to.equal('1234');\n        });\n\n        it('should supply info', function() {\n          expect(info).to.be.an.object;\n          expect(info.message).to.equal('Hello');\n        });\n      }); // that was approved over insecure connection\n      \n    }); // processing response to authorization request\n    \n  }); // using a relative redirect URI\n  \n});\n"], "filenames": ["lib/strategy.js", "test/oauth2.test.js"], "buggy_code_start_loc": [177, 1257], "buggy_code_end_loc": [178, 1257], "fixing_code_start_loc": [177, 1258], "fixing_code_end_loc": [179, 1297], "type": "NVD-CWE-Other", "message": "** DISPUTED ** The passport-oauth2 package before 1.6.1 for Node.js mishandles the error condition of failure to obtain an access token. This is exploitable in certain use cases where an OAuth identity provider uses an HTTP 200 status code for authentication-failure error reports, and an application grants authorization upon simply receiving the access token (i.e., does not try to use the token). NOTE: the passport-oauth2 vendor does not consider this a passport-oauth2 vulnerability.", "other": {"cve": {"id": "CVE-2021-41580", "sourceIdentifier": "cve@mitre.org", "published": "2021-09-27T07:15:06.803", "lastModified": "2022-07-12T17:42:04.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** DISPUTED ** The passport-oauth2 package before 1.6.1 for Node.js mishandles the error condition of failure to obtain an access token. This is exploitable in certain use cases where an OAuth identity provider uses an HTTP 200 status code for authentication-failure error reports, and an application grants authorization upon simply receiving the access token (i.e., does not try to use the token). NOTE: the passport-oauth2 vendor does not consider this a passport-oauth2 vulnerability."}, {"lang": "es", "value": "**EN DISPUTA** El paquete passport-oauth2 versiones anteriores a 1.6.1 para Node.js maneja inapropiadamente la condici\u00f3n de error de no poder obtener un token de acceso. Esto es explotable en determinados casos de uso en los que un proveedor de identidad OAuth utiliza un c\u00f3digo de estado HTTP 200 para los informes de error de autenticaci\u00f3n-fracaso, y una aplicaci\u00f3n concede la autorizaci\u00f3n al recibir simplemente el token de acceso (es decir, no intenta usar el token). NOTA: el proveedor de passport-oauth2 no considera esto una vulnerabilidad de passport-oauth2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:passportjs:passport-oauth2:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.6.1", "matchCriteriaId": "39EBFFA7-7C29-4BAE-84E3-45F7C1C6A3B4"}]}]}], "references": [{"url": "https://github.com/jaredhanson/passport-oauth2/commit/8e3bcdff145a2219033bd782fc517229fe3e05ea", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jaredhanson/passport-oauth2/compare/v1.6.0...v1.6.1", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jaredhanson/passport-oauth2/pull/144", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jaredhanson/passport-oauth2/commit/8e3bcdff145a2219033bd782fc517229fe3e05ea"}}