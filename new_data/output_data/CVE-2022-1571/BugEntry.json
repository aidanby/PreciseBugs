{"buggy_code": ["<?php\n/**\n * This file is part of FacturaScripts\n * Copyright (C) 2013-2022 Carlos Garcia Gomez <carlos@facturascripts.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace FacturaScripts\\Core\\Model;\n\nuse FacturaScripts\\Core\\Base\\DataBase\\DataBaseWhere;\nuse FacturaScripts\\Dinamic\\Model\\Cuenta as DinCuenta;\nuse FacturaScripts\\Dinamic\\Model\\CuentaEspecial as DinCuentaEspecial;\nuse FacturaScripts\\Dinamic\\Model\\Partida as DinPartida;\n\n/**\n * Detail level of an accounting plan. It is related to a single account.\n *\n * @author Carlos Garc\u00eda G\u00f3mez  <carlos@facturascripts.com>\n * @author Artex Trading sa     <jcuello@artextrading.com>\n */\nclass Subcuenta extends Base\\ModelClass\n{\n\n    use Base\\ModelTrait;\n    use Base\\ExerciseRelationTrait;\n\n    /**\n     * Account code.\n     *\n     * @var string\n     */\n    public $codcuenta;\n\n    /**\n     * Identifier of the special account.\n     *\n     * @var string\n     */\n    public $codcuentaesp;\n\n    /**\n     * Sub-account code.\n     *\n     * @var string\n     */\n    public $codsubcuenta;\n\n    /**\n     * Amount of the debit.\n     *\n     * @var float|int\n     */\n    public $debe;\n\n    /**\n     * Description of the subaccount.\n     *\n     * @var string\n     */\n    public $descripcion;\n\n    /**\n     * @var bool\n     */\n    private $disableAdditionalTest = false;\n\n    /**\n     * Amount of credit.\n     *\n     * @var float|int\n     */\n    public $haber;\n\n    /**\n     * Account identifier.\n     *\n     * @var int\n     */\n    public $idcuenta;\n\n    /**\n     * Primary key.\n     *\n     * @var int\n     */\n    public $idsubcuenta;\n\n    /**\n     * Balance amount.\n     *\n     * @var float|int\n     */\n    public $saldo;\n\n    public function clear()\n    {\n        parent::clear();\n        $this->debe = 0.0;\n        $this->haber = 0.0;\n        $this->saldo = 0.0;\n    }\n\n    public function delete(): bool\n    {\n        if ($this->getExercise()->isOpened() || $this->disableAdditionalTest) {\n            return parent::delete();\n        }\n\n        $this->toolBox()->i18nLog()->warning('closed-exercise', ['%exerciseName%' => $this->getExercise()->nombre]);\n        return false;\n    }\n\n    public function disableAdditionalTest(bool $value)\n    {\n        $this->disableAdditionalTest = $value;\n    }\n\n    /**\n     * Returns the parent account.\n     *\n     * @return DinCuenta\n     */\n    public function getAccount(): DinCuenta\n    {\n        $account = new DinCuenta();\n\n        // find account by id\n        if (!empty($this->idcuenta) && $account->loadFromCode($this->idcuenta) && $account->codejercicio === $this->codejercicio) {\n            return $account;\n        }\n\n        // find account by code and exercise\n        $where = [\n            new DataBaseWhere('codcuenta', $this->codcuenta),\n            new DataBaseWhere('codejercicio', $this->codejercicio)\n        ];\n        $account->loadFromCode('', $where);\n        return $account;\n    }\n\n    /**\n     * Returns the related special account code.\n     *\n     * @return ?string\n     */\n    public function getSpecialAccountCode(): ?string\n    {\n        if (empty($this->codcuentaesp)) {\n            $account = $this->getAccount();\n            if ($account->exists()) {\n                return $account->codcuentaesp;\n            }\n        }\n\n        return $this->codcuentaesp;\n    }\n\n    public function install(): string\n    {\n        // force the parents tables\n        new DinCuentaEspecial();\n        new DinCuenta();\n\n        return parent::install();\n    }\n\n    public static function primaryColumn(): string\n    {\n        return 'idsubcuenta';\n    }\n\n    public function primaryDescriptionColumn(): string\n    {\n        return 'codsubcuenta';\n    }\n\n    public function save(): bool\n    {\n        if ($this->getExercise()->isOpened() || $this->disableAdditionalTest) {\n            return parent::save();\n        }\n\n        $this->toolBox()->i18nLog()->warning('closed-exercise', ['%exerciseName%' => $this->getExercise()->nombre]);\n        return false;\n    }\n\n    public static function tableName(): string\n    {\n        return 'subcuentas';\n    }\n\n    public function test(): bool\n    {\n        $this->saldo = $this->debe - $this->haber;\n\n        $this->codcuenta = trim($this->codcuenta);\n        $this->codsubcuenta = empty($this->idsubcuenta) ? $this->transformCodsubcuenta($this->codsubcuenta) : trim($this->codsubcuenta);\n        $this->descripcion = $this->toolBox()->utils()->noHtml($this->descripcion);\n        if (strlen($this->descripcion) < 1 || strlen($this->descripcion) > 255) {\n            $this->toolBox()->i18nLog()->warning(\n                'invalid-column-lenght',\n                ['%column%' => 'descripcion', '%min%' => '1', '%max%' => '255']\n            );\n            return false;\n        }\n\n        // check exercise\n        $exercise = $this->getExercise();\n        if (!$this->disableAdditionalTest && strlen($this->codsubcuenta) !== $exercise->longsubcuenta) {\n            $this->toolBox()->i18nLog()->warning('account-length-error', ['%code%' => $this->codsubcuenta]);\n            return false;\n        }\n\n        // sets account data\n        $account = $this->getAccount();\n        $this->codcuenta = $account->codcuenta;\n        $this->idcuenta = $account->idcuenta;\n\n        return parent::test();\n    }\n\n    /**\n     * Transform subaccount code if necessary\n     *\n     * @param string $code\n     *\n     * @return string\n     */\n    public function transformCodsubcuenta(string $code): string\n    {\n        if (strpos($code, '.') === false) {\n            return trim($code);\n        }\n\n        $parts = explode('.', trim($code));\n        if (count($parts) === 2) {\n            return str_pad($parts[0], $this->getExercise()->longsubcuenta - strlen($parts[1]), '0', STR_PAD_RIGHT) . $parts[1];\n        }\n\n        return trim($code);\n    }\n\n    /**\n     * Update subaccount balance.\n     *\n     * @param float $debit\n     * @param float $credit\n     */\n    public function updateBalance(float $debit = 0.0, float $credit = 0.0)\n    {\n        // supplied debit and credit?\n        if ($debit + $credit != 0.0) {\n            $this->debe += $debit;\n            $this->haber += $credit;\n            $this->save();\n            return;\n        }\n\n        // calculate account balance\n        $sql = \"SELECT COALESCE(SUM(debe), 0) as debe, COALESCE(SUM(haber), 0) as haber\"\n            . \" FROM \" . DinPartida::tableName()\n            . \" WHERE idsubcuenta = \" . self::$dataBase->var2str($this->idsubcuenta) . \";\";\n\n        foreach (self::$dataBase->select($sql) as $row) {\n            $this->debe = (float)$row['debe'];\n            $this->haber = (float)$row['haber'];\n            $this->save();\n        }\n    }\n\n    public function url(string $type = 'auto', string $list = 'ListCuenta?activetab=List'): string\n    {\n        return parent::url($type, $list);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * This file is part of FacturaScripts\n * Copyright (C) 2013-2022 Carlos Garcia Gomez <carlos@facturascripts.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace FacturaScripts\\Core\\Model;\n\nuse FacturaScripts\\Core\\Base\\DataBase\\DataBaseWhere;\nuse FacturaScripts\\Dinamic\\Model\\Cuenta as DinCuenta;\nuse FacturaScripts\\Dinamic\\Model\\CuentaEspecial as DinCuentaEspecial;\nuse FacturaScripts\\Dinamic\\Model\\Partida as DinPartida;\n\n/**\n * Detail level of an accounting plan. It is related to a single account.\n *\n * @author Carlos Garc\u00eda G\u00f3mez  <carlos@facturascripts.com>\n * @author Artex Trading sa     <jcuello@artextrading.com>\n */\nclass Subcuenta extends Base\\ModelClass\n{\n\n    use Base\\ModelTrait;\n    use Base\\ExerciseRelationTrait;\n\n    /**\n     * Account code.\n     *\n     * @var string\n     */\n    public $codcuenta;\n\n    /**\n     * Identifier of the special account.\n     *\n     * @var string\n     */\n    public $codcuentaesp;\n\n    /**\n     * Sub-account code.\n     *\n     * @var string\n     */\n    public $codsubcuenta;\n\n    /**\n     * Amount of the debit.\n     *\n     * @var float|int\n     */\n    public $debe;\n\n    /**\n     * Description of the subaccount.\n     *\n     * @var string\n     */\n    public $descripcion;\n\n    /**\n     * @var bool\n     */\n    private $disableAdditionalTest = false;\n\n    /**\n     * Amount of credit.\n     *\n     * @var float|int\n     */\n    public $haber;\n\n    /**\n     * Account identifier.\n     *\n     * @var int\n     */\n    public $idcuenta;\n\n    /**\n     * Primary key.\n     *\n     * @var int\n     */\n    public $idsubcuenta;\n\n    /**\n     * Balance amount.\n     *\n     * @var float|int\n     */\n    public $saldo;\n\n    public function clear()\n    {\n        parent::clear();\n        $this->debe = 0.0;\n        $this->haber = 0.0;\n        $this->saldo = 0.0;\n    }\n\n    public function delete(): bool\n    {\n        if ($this->getExercise()->isOpened() || $this->disableAdditionalTest) {\n            return parent::delete();\n        }\n\n        $this->toolBox()->i18nLog()->warning('closed-exercise', ['%exerciseName%' => $this->getExercise()->nombre]);\n        return false;\n    }\n\n    public function disableAdditionalTest(bool $value)\n    {\n        $this->disableAdditionalTest = $value;\n    }\n\n    /**\n     * Returns the parent account.\n     *\n     * @return DinCuenta\n     */\n    public function getAccount(): DinCuenta\n    {\n        $account = new DinCuenta();\n\n        // find account by id\n        if (!empty($this->idcuenta) && $account->loadFromCode($this->idcuenta) && $account->codejercicio === $this->codejercicio) {\n            return $account;\n        }\n\n        // find account by code and exercise\n        $where = [\n            new DataBaseWhere('codcuenta', $this->codcuenta),\n            new DataBaseWhere('codejercicio', $this->codejercicio)\n        ];\n        $account->loadFromCode('', $where);\n        return $account;\n    }\n\n    /**\n     * Returns the related special account code.\n     *\n     * @return ?string\n     */\n    public function getSpecialAccountCode(): ?string\n    {\n        if (empty($this->codcuentaesp)) {\n            $account = $this->getAccount();\n            if ($account->exists()) {\n                return $account->codcuentaesp;\n            }\n        }\n\n        return $this->codcuentaesp;\n    }\n\n    public function install(): string\n    {\n        // force the parents tables\n        new DinCuentaEspecial();\n        new DinCuenta();\n\n        return parent::install();\n    }\n\n    public static function primaryColumn(): string\n    {\n        return 'idsubcuenta';\n    }\n\n    public function primaryDescriptionColumn(): string\n    {\n        return 'codsubcuenta';\n    }\n\n    public function save(): bool\n    {\n        if ($this->getExercise()->isOpened() || $this->disableAdditionalTest) {\n            return parent::save();\n        }\n\n        $this->toolBox()->i18nLog()->warning('closed-exercise', ['%exerciseName%' => $this->getExercise()->nombre]);\n        return false;\n    }\n\n    public static function tableName(): string\n    {\n        return 'subcuentas';\n    }\n\n    public function test(): bool\n    {\n        $this->saldo = $this->debe - $this->haber;\n\n        // escape html\n        foreach (['codcuenta', 'codsubcuenta', 'descripcion', 'codcuentaesp'] as $field) {\n            $this->{$field} = self::toolBox()::utils()::noHtml($this->{$field});\n        }\n\n        $this->codsubcuenta = empty($this->idsubcuenta) ? $this->transformCodsubcuenta($this->codsubcuenta) : $this->codsubcuenta;\n        $this->descripcion = $this->toolBox()->utils()->noHtml($this->descripcion);\n        if (strlen($this->descripcion) < 1 || strlen($this->descripcion) > 255) {\n            $this->toolBox()->i18nLog()->warning(\n                'invalid-column-lenght',\n                ['%column%' => 'descripcion', '%min%' => '1', '%max%' => '255']\n            );\n            return false;\n        }\n\n        // check exercise\n        $exercise = $this->getExercise();\n        if (false === $this->disableAdditionalTest && strlen($this->codsubcuenta) !== $exercise->longsubcuenta) {\n            $this->toolBox()->i18nLog()->warning('account-length-error', ['%code%' => $this->codsubcuenta]);\n            return false;\n        }\n\n        // sets account data\n        $account = $this->getAccount();\n        $this->codcuenta = $account->codcuenta;\n        $this->idcuenta = $account->idcuenta;\n\n        return parent::test();\n    }\n\n    /**\n     * Transform subaccount code if necessary\n     *\n     * @param string $code\n     *\n     * @return string\n     */\n    public function transformCodsubcuenta(string $code): string\n    {\n        if (strpos($code, '.') === false) {\n            return trim($code);\n        }\n\n        $parts = explode('.', trim($code));\n        if (count($parts) === 2) {\n            return str_pad($parts[0], $this->getExercise()->longsubcuenta - strlen($parts[1]), '0', STR_PAD_RIGHT) . $parts[1];\n        }\n\n        return trim($code);\n    }\n\n    /**\n     * Update subaccount balance.\n     *\n     * @param float $debit\n     * @param float $credit\n     */\n    public function updateBalance(float $debit = 0.0, float $credit = 0.0)\n    {\n        // supplied debit and credit?\n        if ($debit + $credit != 0.0) {\n            $this->debe += $debit;\n            $this->haber += $credit;\n            $this->save();\n            return;\n        }\n\n        // calculate account balance\n        $sql = \"SELECT COALESCE(SUM(debe), 0) as debe, COALESCE(SUM(haber), 0) as haber\"\n            . \" FROM \" . DinPartida::tableName()\n            . \" WHERE idsubcuenta = \" . self::$dataBase->var2str($this->idsubcuenta) . \";\";\n\n        foreach (self::$dataBase->select($sql) as $row) {\n            $this->debe = (float)$row['debe'];\n            $this->haber = (float)$row['haber'];\n            $this->save();\n        }\n    }\n\n    public function url(string $type = 'auto', string $list = 'ListCuenta?activetab=List'): string\n    {\n        return parent::url($type, $list);\n    }\n}\n"], "filenames": ["Core/Model/Subcuenta.php"], "buggy_code_start_loc": [208], "buggy_code_end_loc": [222], "fixing_code_start_loc": [208], "fixing_code_end_loc": [226], "type": "CWE-79", "message": "Cross-site scripting - Reflected in Create Subaccount in GitHub repository neorazorx/facturascripts prior to 2022.07. This vulnerability can be arbitrarily executed javascript code to steal user'cookie, perform HTTP request, get content of `same origin` page, etc ...", "other": {"cve": {"id": "CVE-2022-1571", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-04T11:15:08.043", "lastModified": "2022-05-11T17:53:54.577", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting - Reflected in Create Subaccount in GitHub repository neorazorx/facturascripts prior to 2022.07. This vulnerability can be arbitrarily executed javascript code to steal user'cookie, perform HTTP request, get content of `same origin` page, etc ..."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site scripting - Reflejado en Create Subaccount en el repositorio GitHub neorazorx/facturascripts versiones anteriores a  2022.07. Esta vulnerabilidad permite ejecutar arbitrariamente c\u00f3digo javascript para robar la cookie del usuario, llevar a cabo una petici\u00f3n HTTP, conseguir el contenido de la p\u00e1gina \"same origin\", etc..."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.3}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:facturascripts:facturascripts:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022.07", "matchCriteriaId": "9E4D15F9-24C7-490B-9DE0-71406995A06F"}]}]}], "references": [{"url": "https://github.com/neorazorx/facturascripts/commit/482c5a82b4d79e7a19614f5a67dc24593046cefd", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/4578a690-73e5-4313-840c-ee15e5329741", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/neorazorx/facturascripts/commit/482c5a82b4d79e7a19614f5a67dc24593046cefd"}}