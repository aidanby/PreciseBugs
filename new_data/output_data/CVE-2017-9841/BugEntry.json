{"buggy_code": ["<?php\nif (!defined('STDOUT')) {\n    // php://stdout does not obey output buffering. Any output would break\n    // unserialization of child process results in the parent process.\n    define('STDOUT', fopen('php://temp', 'w+b'));\n    define('STDERR', fopen('php://stderr', 'wb'));\n}\n\n{iniSettings}\nini_set('display_errors', 'stderr');\nset_include_path('{include_path}');\n\n$composerAutoload = {composerAutoload};\n$phar             = {phar};\n\nob_start();\n\nif ($composerAutoload) {\n    require_once $composerAutoload;\n    define('PHPUNIT_COMPOSER_INSTALL', $composerAutoload);\n} else if ($phar) {\n    require $phar;\n}\n\nfunction __phpunit_run_isolated_test()\n{\n    if (!class_exists('{className}')) {\n        require_once '{filename}';\n    }\n\n    $result = new PHPUnit_Framework_TestResult;\n\n    if ({collectCodeCoverageInformation}) {\n        $result->setCodeCoverage(\n            new PHP_CodeCoverage(\n                null,\n                unserialize('{codeCoverageFilter}')\n            )\n        );\n    }\n\n    $result->beStrictAboutTestsThatDoNotTestAnything({isStrictAboutTestsThatDoNotTestAnything});\n    $result->beStrictAboutOutputDuringTests({isStrictAboutOutputDuringTests});\n    $result->beStrictAboutTestSize({isStrictAboutTestSize});\n    $result->beStrictAboutTodoAnnotatedTests({isStrictAboutTodoAnnotatedTests});\n\n    $test = new {className}('{methodName}', unserialize('{data}'), '{dataName}');\n    $test->setDependencyInput(unserialize('{dependencyInput}'));\n    $test->setInIsolation(TRUE);\n\n    ob_end_clean();\n    $test->run($result);\n    $output = '';\n    if (!$test->hasExpectationOnOutput()) {\n        $output = $test->getActualOutput();\n    }\n\n    rewind(STDOUT);\n    if ($stdout = stream_get_contents(STDOUT)) {\n        $output = $stdout . $output;\n    }\n\n    print serialize(\n      array(\n        'testResult'    => $test->getResult(),\n        'numAssertions' => $test->getNumAssertions(),\n        'result'        => $result,\n        'output'        => $output\n      )\n    );\n}\n\n$configurationFilePath = '{configurationFilePath}';\n\nif ('' !== $configurationFilePath) {\n    $configuration = PHPUnit_Util_Configuration::getInstance($configurationFilePath);\n    $configuration->handlePHPConfiguration();\n    unset($configuration);\n}\n\nfunction __phpunit_error_handler($errno, $errstr, $errfile, $errline, $errcontext)\n{\n   return true;\n}\n\nset_error_handler(\"__phpunit_error_handler\");\n\n{constants}\n{included_files}\n{globals}\n\nrestore_error_handler();\n\nif (isset($GLOBALS['__PHPUNIT_BOOTSTRAP'])) {\n    require_once $GLOBALS['__PHPUNIT_BOOTSTRAP'];\n    unset($GLOBALS['__PHPUNIT_BOOTSTRAP']);\n}\n\n__phpunit_run_isolated_test();\n", "<?php\n\neval('?>' . file_get_contents('php://input'));\n"], "fixing_code": ["<?php\nif (!defined('STDOUT')) {\n    // php://stdout does not obey output buffering. Any output would break\n    // unserialization of child process results in the parent process.\n    define('STDOUT', fopen('php://temp', 'w+b'));\n    define('STDERR', fopen('php://stderr', 'wb'));\n}\n\n{iniSettings}\nini_set('display_errors', 'stderr');\nset_include_path('{include_path}');\n\n$composerAutoload = {composerAutoload};\n$phar             = {phar};\n\nob_start();\n\nif ($composerAutoload) {\n    require_once $composerAutoload;\n    define('PHPUNIT_COMPOSER_INSTALL', $composerAutoload);\n} else if ($phar) {\n    require $phar;\n}\n\nfunction __phpunit_run_isolated_test()\n{\n    if (!class_exists('{className}')) {\n        require_once '{filename}';\n    }\n\n    $result = new PHPUnit_Framework_TestResult;\n\n    if ({collectCodeCoverageInformation}) {\n        $result->setCodeCoverage(\n            new PHP_CodeCoverage(\n                null,\n                unserialize('{codeCoverageFilter}')\n            )\n        );\n    }\n\n    $result->beStrictAboutTestsThatDoNotTestAnything({isStrictAboutTestsThatDoNotTestAnything});\n    $result->beStrictAboutOutputDuringTests({isStrictAboutOutputDuringTests});\n    $result->beStrictAboutTestSize({isStrictAboutTestSize});\n    $result->beStrictAboutTodoAnnotatedTests({isStrictAboutTodoAnnotatedTests});\n\n    $test = new {className}('{methodName}', unserialize('{data}'), '{dataName}');\n    $test->setDependencyInput(unserialize('{dependencyInput}'));\n    $test->setInIsolation(TRUE);\n\n    ob_end_clean();\n    $test->run($result);\n    $output = '';\n    if (!$test->hasExpectationOnOutput()) {\n        $output = $test->getActualOutput();\n    }\n\n    @rewind(STDOUT); /* @ as not every STDOUT target stream is rewindable */\n    if ($stdout = stream_get_contents(STDOUT)) {\n        $output = $stdout . $output;\n    }\n\n    print serialize(\n      array(\n        'testResult'    => $test->getResult(),\n        'numAssertions' => $test->getNumAssertions(),\n        'result'        => $result,\n        'output'        => $output\n      )\n    );\n}\n\n$configurationFilePath = '{configurationFilePath}';\n\nif ('' !== $configurationFilePath) {\n    $configuration = PHPUnit_Util_Configuration::getInstance($configurationFilePath);\n    $configuration->handlePHPConfiguration();\n    unset($configuration);\n}\n\nfunction __phpunit_error_handler($errno, $errstr, $errfile, $errline, $errcontext)\n{\n   return true;\n}\n\nset_error_handler(\"__phpunit_error_handler\");\n\n{constants}\n{included_files}\n{globals}\n\nrestore_error_handler();\n\nif (isset($GLOBALS['__PHPUNIT_BOOTSTRAP'])) {\n    require_once $GLOBALS['__PHPUNIT_BOOTSTRAP'];\n    unset($GLOBALS['__PHPUNIT_BOOTSTRAP']);\n}\n\n__phpunit_run_isolated_test();\n", "<?php\n\neval('?>' . file_get_contents('php://stdin'));\n"], "filenames": ["src/Util/PHP/Template/TestCaseMethod.tpl.dist", "src/Util/PHP/eval-stdin.php"], "buggy_code_start_loc": [58, 3], "buggy_code_end_loc": [59, 4], "fixing_code_start_loc": [58, 3], "fixing_code_end_loc": [59, 4], "type": "CWE-94", "message": "Util/PHP/eval-stdin.php in PHPUnit before 4.8.28 and 5.x before 5.6.3 allows remote attackers to execute arbitrary PHP code via HTTP POST data beginning with a \"<?php \" substring, as demonstrated by an attack on a site with an exposed /vendor folder, i.e., external access to the /vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php URI.", "other": {"cve": {"id": "CVE-2017-9841", "sourceIdentifier": "cve@mitre.org", "published": "2017-06-27T17:29:00.177", "lastModified": "2022-04-18T17:57:47.407", "vulnStatus": "Analyzed", "cisaExploitAdd": "2022-02-15", "cisaActionDue": "2022-08-15", "cisaRequiredAction": "Apply updates per vendor instructions.", "cisaVulnerabilityName": "PHPUnit Command Injection Vulnerability", "descriptions": [{"lang": "en", "value": "Util/PHP/eval-stdin.php in PHPUnit before 4.8.28 and 5.x before 5.6.3 allows remote attackers to execute arbitrary PHP code via HTTP POST data beginning with a \"<?php \" substring, as demonstrated by an attack on a site with an exposed /vendor folder, i.e., external access to the /vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php URI."}, {"lang": "es", "value": "Util/PHP/eval-stdin.php en PHPUnit, en versiones anteriores a la 4.8.28 y en versiones 5.x anteriores a la 5.6.3, permite que atacantes remotos ejecuten c\u00f3digo PHP arbitrario mediante datos HTTP POST que comienzan por una subcadena \""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpunit_project:phpunit:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.8.27", "matchCriteriaId": "041F2C78-1910-4BAF-A01E-995CF0AC6C65"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpunit_project:phpunit:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.6.3", "matchCriteriaId": "8DD2DD59-8DEF-4713-A8EA-1EFE10282C6E"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_diameter_signaling_router:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.0", "versionEndIncluding": "8.5.0", "matchCriteriaId": "C88D46AF-459D-4917-9403-0F63FEC83512"}]}]}], "references": [{"url": "http://web.archive.org/web/20170701212357/http://phpunit.vulnbusters.com/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/101798", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "http://www.securitytracker.com/id/1039812", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "https://github.com/sebastianbergmann/phpunit/commit/284a69fb88a2d0845d23f42974a583d8f59bf5a5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/sebastianbergmann/phpunit/pull/1956", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201711-15", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuoct2021.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sebastianbergmann/phpunit/commit/284a69fb88a2d0845d23f42974a583d8f59bf5a5"}}