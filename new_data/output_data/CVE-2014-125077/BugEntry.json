{"buggy_code": ["<?php\n\n/*\n * searx-stats is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * searx-stats is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with searx-stats. If not, see < http://www.gnu.org/licenses/ >.\n *\n * (C) 2014- by Thomas Pointhuber\n */\n\ndefine('_SEARX_STATS', 1);\n\n// check if config-file is available\nif(!is_readable(realpath(dirname(__FILE__) . '/../resources/config.inc.php')))\n    die(\"config-file not found!\");\n\nrequire_once(realpath(dirname(__FILE__) . '/../resources/config.inc.php'));\n\nrequire_once(LIBRARY_PATH . '/system/data/DatabaseManager.class.php');\nrequire_once(LIBRARY_PATH . '/system/data/Input.class.php');\n\nDatabaseManager::connect();\n\n$DatabaseHandler = new DatabaseManager();\n\n//###### Instances CronJob\n\nif((bool)$config[\"instances\"][\"cronjob\"] == True) {\n    require_once(LIBRARY_PATH . '/system/SearxInstances.class.php');\n\n    $SearxInstancesObject = new SearxInstances();\n\n    $instances = $SearxInstancesObject->GetInstances();\n\n    echo \"<h1>Check searx-Instances</h1>\";\n\n\n    // TODO: rewrite to http://cn2.php.net/manual/en/function.curl-multi-exec.php\n    foreach ($instances as $single_instance) {\n        echo $single_instance['id'].' - '.$single_instance['url'];\n        \n        $crl = curl_init();\n        $timeout = (int)$config[\"instances\"][\"timeout\"];\n        curl_setopt ($crl, CURLOPT_URL,$single_instance['url']);\n        curl_setopt ($crl, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt ($crl, CURLOPT_CONNECTTIMEOUT, $timeout);\n        curl_setopt ($crl, CURLOPT_SSL_VERIFYPEER, false);\n\n        $res_http = curl_exec($crl);\n        $res_total_time = (float)curl_getinfo($crl, CURLINFO_TOTAL_TIME );\n        $res_http_code = (int)curl_getinfo($crl, CURLINFO_HTTP_CODE );\n        // Rewrite to HTTP-CODE: 408 if timeout occour\n        if($res_http_code === 0 && $res_total_time >= $timeout) {\n            $res_http_code = 408;\n            }\n        \n        curl_close($crl);\n        \n        $res_timestamp = time();\n        $res_searx_version = NULL;\n        \n        // correct HTTP-CODE\n        if($res_http_code >= 200 && $res_http_code < 300 and $res_http != NULL) {\n        \n            //Create a new DOM document\n            $dom = new DOMDocument;\n\n            //Parse the HTML. The @ is used to suppress any parsing errors\n            //that will be thrown if the $html string isn't valid XHTML.\n            @$dom->loadHTML($res_http);\n\n            //Get all links. You could also use any other tag name here,\n            //like 'img' or 'table', to extract other tags.\n            $links = $dom->getElementsByTagName('meta');//<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n            //Query the DOM\n            //$links = $xpath->query( '//meta' );\n\n            //Display the results as in the previous example\n            foreach($links as $link){\n                if($link->getAttribute('name') == 'generator')\n                    $res_searx_version = $link->getAttribute('content');\n            }\n        }\n        \n        // save in database\n        $query = \"UPDATE `#instances` SET \".\n            \"`VERSION_STRING` = '\".$res_searx_version.\"', \".\n            \"`RETURN_CODE` = '\".$res_http_code.\"', \".\n            \"`LAST_UPDATE` = '\".date('Y-m-d H:i:s',$res_timestamp).\"' \".\n            \"WHERE `#instances`.`ID` =\".$single_instance['id'].\";\";\n        $DatabaseHandler->query($query);\n\n        // print result\n        if($res_http_code >= 200 && $res_http_code < 300)\n            echo ' - HTTP-CODE: '.$res_http_code;\n        else\n            echo ' - <b>HTTP-CODE: '.$res_http_code.'</b>';\n        echo ' - TIME: '.$res_total_time;\n        echo ' - TIMESTAMP: '.$res_timestamp;\n        echo ' - VERSION: '.$res_searx_version;\n        echo '<br/>';\n    }\n}\n//###### Engines CronJob\n\nif((bool)$config[\"engines\"][\"cronjob\"] == True && $config[\"engines\"][\"server\"] != '') {\n    require_once(LIBRARY_PATH . '/system/SearxEngines.class.php');\n\n    $SearxEnginesObject = new SearxEngines();\n\n    $engines = $SearxEnginesObject->GetEngines();\n\n    echo \"<h1>Check searx-Engines</h1>\";\n\n    // TODO: rewrite to http://cn2.php.net/manual/en/function.curl-multi-exec.php\n    foreach ($engines as $single_engine) {\n        echo $single_engine['id'].' - '.$single_engine['name'];\n        $res_success = False;\n        \n        // test engines as long with keywords, unless results appear\n        foreach ($config[\"engines\"][\"keywords\"] as $keyword) {\n            $crl = curl_init();\n            $timeout = (int)$config[\"engines\"][\"timeout\"];\n            curl_setopt ($crl, CURLOPT_URL,$config[\"engines\"][\"server\"]);\n            curl_setopt ($crl, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt ($crl, CURLOPT_CONNECTTIMEOUT, $timeout);\n            curl_setopt ($crl, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($crl, CURLOPT_POST, 1);\n            curl_setopt($crl, CURLOPT_POSTFIELDS, array(\n                category_none => 1,\n                q => '!'.$single_engine['name'].' '.$keyword,\n                pageno => 1,\n                format => 'json'\n            ));\n\n            $res_http = curl_exec($crl);\n            $res_total_time = (float)curl_getinfo($crl, CURLINFO_TOTAL_TIME );\n            $res_http_code = (int)curl_getinfo($crl, CURLINFO_HTTP_CODE );\n            \n            curl_close($crl);\n\n            $res_json = json_decode($res_http, true);\n            \n            $res_timestamp = time();\n            \n            if(count((array)$res_json['results']) > 0) {\n                $res_engine_name=preg_replace('/(\\s|-|_)+/', '', $res_json['results'][0]['engine']);\n                $engine_name=preg_replace('/(\\s|-|_)+/', '', $single_engine['name']);\n                \n                // check, if engine is enabled in searx\n                // other test posibilitiy:  strpos($single_instance['url'], '!'.$single_engine['name']) !== 0\n                if($res_engine_name === $engine_name) {\n                    echo ' -  QUERY: '.$res_json['query'];\n                    $res_success = True;\n                    break;\n                } // TODO, mark engine as not actiated\n            }\n            \n            // wait between requests\n            usleep((int)$config[\"engines\"][\"wait_time\"]*1000);       \n        }\n        \n        // save in database\n        $query = \"UPDATE `#engines` SET \".\n            \"`IS_WORKING` = '\".(int)$res_success.\"', \".\n            \"`LAST_UPDATE` = '\".date('Y-m-d H:i:s',$res_timestamp).\"' \".\n            \"WHERE `#engines`.`ID` =\".$single_engine['id'].\";\";\n        $DatabaseHandler->query($query);\n        \n        if($res_success)\n            echo ' - SUCCESS<br/>';\n        else\n            echo ' - FAILED<br/>';\n\n        // wait between requests\n        usleep((int)$config[\"engines\"][\"wait_time\"]*1000);\n    }\n}\n?>\n"], "fixing_code": ["<?php\n\n/*\n * searx-stats is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * searx-stats is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with searx-stats. If not, see < http://www.gnu.org/licenses/ >.\n *\n * (C) 2014- by Thomas Pointhuber\n */\n\ndefine('_SEARX_STATS', 1);\n\n// check if config-file is available\nif(!is_readable(realpath(dirname(__FILE__) . '/../resources/config.inc.php')))\n    die(\"config-file not found!\");\n\nrequire_once(realpath(dirname(__FILE__) . '/../resources/config.inc.php'));\n\nrequire_once(LIBRARY_PATH . '/system/data/DatabaseManager.class.php');\nrequire_once(LIBRARY_PATH . '/system/data/Input.class.php');\n\nDatabaseManager::connect();\n\n$DatabaseHandler = new DatabaseManager();\n\n//###### Instances CronJob\n\nif((bool)$config[\"instances\"][\"cronjob\"] == True) {\n    require_once(LIBRARY_PATH . '/system/SearxInstances.class.php');\n\n    $SearxInstancesObject = new SearxInstances();\n\n    $instances = $SearxInstancesObject->GetInstances();\n\n    echo \"<h1>Check searx-Instances</h1>\";\n\n\n    // TODO: rewrite to http://cn2.php.net/manual/en/function.curl-multi-exec.php\n    foreach ($instances as $single_instance) {\n        echo $single_instance['id'].' - '.$single_instance['url'];\n        \n        $crl = curl_init();\n        $timeout = (int)$config[\"instances\"][\"timeout\"];\n        curl_setopt ($crl, CURLOPT_URL,$single_instance['url']);\n        curl_setopt ($crl, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt ($crl, CURLOPT_CONNECTTIMEOUT, $timeout);\n        curl_setopt ($crl, CURLOPT_SSL_VERIFYPEER, false);\n\n        $res_http = curl_exec($crl);\n        $res_total_time = (float)curl_getinfo($crl, CURLINFO_TOTAL_TIME );\n        $res_http_code = (int)curl_getinfo($crl, CURLINFO_HTTP_CODE );\n        // Rewrite to HTTP-CODE: 408 if timeout occour\n        if($res_http_code === 0 && $res_total_time >= $timeout) {\n            $res_http_code = 408;\n            }\n        \n        curl_close($crl);\n        \n        $res_timestamp = time();\n        $res_searx_version = NULL;\n        \n        // correct HTTP-CODE\n        if($res_http_code >= 200 && $res_http_code < 300 and $res_http != NULL) {\n        \n            //Create a new DOM document\n            $dom = new DOMDocument;\n\n            //Parse the HTML. The @ is used to suppress any parsing errors\n            //that will be thrown if the $html string isn't valid XHTML.\n            @$dom->loadHTML($res_http);\n\n            //Get all links. You could also use any other tag name here,\n            //like 'img' or 'table', to extract other tags.\n            $links = $dom->getElementsByTagName('meta');//<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n            //Query the DOM\n            //$links = $xpath->query( '//meta' );\n\n            //Display the results as in the previous example\n            foreach($links as $link){\n                if($link->getAttribute('name') == 'generator')\n                    $res_searx_version = $link->getAttribute('content');\n            }\n        }\n        \n        // save in database\n        $query = \"UPDATE `#instances` SET \".\n            \"`VERSION_STRING` = '\".DatabaseManager::correctString($res_searx_version).\"', \".\n            \"`RETURN_CODE` = '\".(int)$res_http_code.\"', \".\n            \"`LAST_UPDATE` = '\".date('Y-m-d H:i:s',$res_timestamp).\"' \".\n            \"WHERE `#instances`.`ID` =\".(int)$single_instance['id'].\";\";\n        $DatabaseHandler->query($query);\n\n        // print result\n        if($res_http_code >= 200 && $res_http_code < 300)\n            echo ' - HTTP-CODE: '.$res_http_code;\n        else\n            echo ' - <b>HTTP-CODE: '.$res_http_code.'</b>';\n        echo ' - TIME: '.$res_total_time;\n        echo ' - TIMESTAMP: '.$res_timestamp;\n        echo ' - VERSION: '.$res_searx_version;\n        echo '<br/>';\n    }\n}\n//###### Engines CronJob\n\nif((bool)$config[\"engines\"][\"cronjob\"] == True && $config[\"engines\"][\"server\"] != '') {\n    require_once(LIBRARY_PATH . '/system/SearxEngines.class.php');\n\n    $SearxEnginesObject = new SearxEngines();\n\n    $engines = $SearxEnginesObject->GetEngines();\n\n    echo \"<h1>Check searx-Engines</h1>\";\n\n    // TODO: rewrite to http://cn2.php.net/manual/en/function.curl-multi-exec.php\n    foreach ($engines as $single_engine) {\n        echo $single_engine['id'].' - '.$single_engine['name'];\n        $res_success = False;\n        \n        // test engines as long with keywords, unless results appear\n        foreach ($config[\"engines\"][\"keywords\"] as $keyword) {\n            $crl = curl_init();\n            $timeout = (int)$config[\"engines\"][\"timeout\"];\n            curl_setopt ($crl, CURLOPT_URL,$config[\"engines\"][\"server\"]);\n            curl_setopt ($crl, CURLOPT_RETURNTRANSFER, 1);\n            curl_setopt ($crl, CURLOPT_CONNECTTIMEOUT, $timeout);\n            curl_setopt ($crl, CURLOPT_SSL_VERIFYPEER, false);\n            curl_setopt($crl, CURLOPT_POST, 1);\n            curl_setopt($crl, CURLOPT_POSTFIELDS, array(\n                category_none => 1,\n                q => '!'.$single_engine['name'].' '.$keyword,\n                pageno => 1,\n                format => 'json'\n            ));\n\n            $res_http = curl_exec($crl);\n            $res_total_time = (float)curl_getinfo($crl, CURLINFO_TOTAL_TIME );\n            $res_http_code = (int)curl_getinfo($crl, CURLINFO_HTTP_CODE );\n            \n            curl_close($crl);\n\n            $res_json = json_decode($res_http, true);\n            \n            $res_timestamp = time();\n            \n            if(count((array)$res_json['results']) > 0) {\n                $res_engine_name=preg_replace('/(\\s|-|_)+/', '', $res_json['results'][0]['engine']);\n                $engine_name=preg_replace('/(\\s|-|_)+/', '', $single_engine['name']);\n                \n                // check, if engine is enabled in searx\n                // other test posibilitiy:  strpos($single_instance['url'], '!'.$single_engine['name']) !== 0\n                if($res_engine_name === $engine_name) {\n                    echo ' -  QUERY: '.$res_json['query'];\n                    $res_success = True;\n                    break;\n                } // TODO, mark engine as not actiated\n            }\n            \n            // wait between requests\n            usleep((int)$config[\"engines\"][\"wait_time\"]*1000);       \n        }\n        \n        // save in database\n        $query = \"UPDATE `#engines` SET \".\n            \"`IS_WORKING` = '\".(int)$res_success.\"', \".\n            \"`LAST_UPDATE` = '\".date('Y-m-d H:i:s',$res_timestamp).\"' \".\n            \"WHERE `#engines`.`ID` =\".(int)$single_engine['id'].\";\";\n        $DatabaseHandler->query($query);\n        \n        if($res_success)\n            echo ' - SUCCESS<br/>';\n        else\n            echo ' - FAILED<br/>';\n\n        // wait between requests\n        usleep((int)$config[\"engines\"][\"wait_time\"]*1000);\n    }\n}\n?>\n"], "filenames": ["cgi/cron.php"], "buggy_code_start_loc": [97], "buggy_code_end_loc": [178], "fixing_code_start_loc": [97], "fixing_code_end_loc": [178], "type": "CWE-89", "message": "A vulnerability, which was classified as critical, has been found in pointhi searx_stats. This issue affects some unknown processing of the file cgi/cron.php. The manipulation leads to sql injection. The name of the patch is 281bd679a4474ddb222d16c1c380f252839cc18f. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218351.", "other": {"cve": {"id": "CVE-2014-125077", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-15T09:15:13.613", "lastModified": "2023-01-24T16:20:02.247", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as critical, has been found in pointhi searx_stats. This issue affects some unknown processing of the file cgi/cron.php. The manipulation leads to sql injection. The name of the patch is 281bd679a4474ddb222d16c1c380f252839cc18f. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218351."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:searx_stats_project:searx_stats:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-12-19", "matchCriteriaId": "9050E026-828D-4DA7-8B09-57222ABBF72A"}]}]}], "references": [{"url": "https://github.com/pointhi/searx_stats/commit/281bd679a4474ddb222d16c1c380f252839cc18f", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218351", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218351", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pointhi/searx_stats/commit/281bd679a4474ddb222d16c1c380f252839cc18f"}}