{"buggy_code": ["import { defu } from 'defu'\nimport { addImports, addComponent, createResolver, defineNuxtModule, resolveModule } from '@nuxt/kit'\nimport type { GithubRepositoryOptions } from './runtime/types'\n\nexport interface ModuleOptions extends GithubRepositoryOptions {\n  disableCache?: boolean\n  remarkPlugin?: boolean\n  releases?: boolean\n  contributors?: boolean\n  maxContributors?: number\n  /**\n   * Parse contents (releases content, readme) Markdown and return AST tree.\n   *\n   * Note: This option is only available when you have `@nuxt/content` installed in your project.\n   *\n   * @default true\n   */\n  parseContents?: boolean\n}\n\ndeclare module '@nuxt/schema' {\n  interface PublicRuntimeConfig {\n    // @ts-ignore\n    github?: ModuleOptions;\n  }\n\n  interface RuntimeConfig {\n    // @ts-ignore\n    github?: ModuleOptions;\n  }\n}\n\nexport default defineNuxtModule<ModuleOptions>({\n  meta: {\n    name: '@nuxtlabs/github-module',\n    configKey: 'github'\n  },\n  defaults: {\n    owner: '',\n    repo: '',\n    token: undefined,\n    branch: 'main',\n    api: 'https://api.github.com',\n    remarkPlugin: true,\n    disableCache: false,\n    releases: true,\n    contributors: true,\n    maxContributors: 100,\n    parseContents: true\n  },\n  setup (options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n    const runtimeDir = resolve('./runtime')\n\n    if (!options.owner) {\n      // Check if we can split repo name into owner/repo\n      if (options.repo && options.repo.includes('/')) {\n        const [owner, repo] = options.repo.split('/')\n        options.owner = owner\n        options.repo = repo\n      }\n    }\n\n    // @ts-ignore\n    if (!nuxt.options.runtimeConfig.public) { nuxt.options.runtimeConfig.public = {} }\n\n    const config = {\n      api: options.api || process.env.GITHUB_OWNER,\n      owner: options.owner || process.env.GITHUB_OWNER,\n      branch: options.branch || process.env.GITHUB_BRANCH,\n      repo: options.repo || process.env.GITHUB_REPO,\n      token: options.token || process.env.GITHUB_TOKEN,\n      disableCache: options.disableCache,\n      parseContents: options.parseContents,\n      maxContributors: options.maxContributors\n    }\n\n    // Public runtime config\n    // @ts-ignore\n    nuxt.options.runtimeConfig.public.github = defu(nuxt.options.runtimeConfig.public.github, config)\n    // @ts-ignore\n    nuxt.options.runtimeConfig.github = defu(nuxt.options.runtimeConfig.github, config)\n\n    // Autolink issue/PR/commit links using `remark-github` plugin\n    if (options.remarkPlugin) {\n      // @ts-ignore\n      nuxt.hook('content:context', (context) => {\n        context.markdown.remarkPlugins ??= {}\n\n        if (!Array.isArray(context.markdown.remarkPlugins)) {\n          context.markdown.remarkPlugins['remark-github'] = { repository: `${options.owner}/${options.repo}` }\n        }\n      })\n    }\n\n    const nitroConfig = nuxt.options.nitro\n\n    // Init Nitro handlers\n    nitroConfig.handlers = nitroConfig.handlers || []\n    nitroConfig.prerender = nitroConfig.prerender || {}\n    nitroConfig.prerender.routes = nitroConfig.prerender.routes || []\n\n    // Setup repository API\n    nitroConfig.handlers.push({\n      route: '/api/_github/repository',\n      handler: resolveModule('./server/api/repository', { paths: runtimeDir })\n    }, {\n      route: '/api/_github/repository/:query',\n      handler: resolveModule('./server/api/repository', { paths: runtimeDir })\n    })\n\n    // Setup readme file API\n    nitroConfig.handlers.push({\n      route: '/api/_github/readme',\n      handler: resolveModule('./server/api/readme', { paths: runtimeDir })\n    }, {\n      route: '/api/_github/readme/:query',\n      handler: resolveModule('./server/api/readme', { paths: runtimeDir })\n    })\n\n    // Repository component\n    addComponent({\n      name: 'GithubRepository',\n      filePath: resolveModule('./components/GithubRepository', { paths: runtimeDir }),\n      global: true\n    })\n\n    // GithubLink component\n    addComponent({\n      name: 'GithubLink',\n      filePath: resolveModule('./components/GithubLink', { paths: runtimeDir }),\n      global: true\n    })\n\n    // GithubReadme component\n    addComponent({\n      name: 'GithubReadme',\n      filePath: resolveModule('./components/GithubReadme', { paths: runtimeDir }),\n      global: true\n    })\n\n    // Setup releases API\n    if (options.releases) {\n      // Releases list\n      nitroConfig.handlers.push({\n        route: '/api/_github/releases',\n        handler: resolveModule('./server/api/releases/index', { paths: runtimeDir })\n      }, {\n        route: '/api/_github/releases/:query',\n        handler: resolveModule('./server/api/releases/index', { paths: runtimeDir })\n      })\n      nitroConfig.prerender.routes.push('/api/_github/releases')\n\n      // Releases components\n      addComponent({\n        name: 'GithubReleases',\n        filePath: resolveModule('./components/GithubReleases', { paths: runtimeDir }),\n        global: true\n      })\n      addComponent({\n        name: 'GithubLastRelease',\n        filePath: resolveModule('./components/GithubLastRelease', { paths: runtimeDir }),\n        global: true\n      })\n      addComponent({\n        name: 'GithubRelease',\n        filePath: resolveModule('./components/GithubRelease', { paths: runtimeDir }),\n        global: true\n      })\n    }\n\n    // Setup contributors API\n    if (options.contributors) {\n      nitroConfig.handlers.push({\n        route: '/api/_github/contributors',\n        handler: resolveModule('./server/api/contributors', { paths: runtimeDir })\n      }, {\n        route: '/api/_github/contributors/:query',\n        handler: resolveModule('./server/api/contributors', { paths: runtimeDir })\n      })\n      nitroConfig.prerender.routes.push('/api/_github/contributors')\n\n      // TODO: Add prerender for file arguments (using :source argument)\n      nitroConfig.handlers.push({\n        route: '/api/_github/contributors/file',\n        handler: resolveModule('./server/api/contributors/file', { paths: runtimeDir })\n      }, {\n        route: '/api/_github/contributors/file/:query',\n        handler: resolveModule('./server/api/contributors/file', { paths: runtimeDir })\n      })\n\n      // Contributors components\n      addComponent({\n        name: 'GithubContributors',\n        filePath: resolveModule('./components/GithubContributors', { paths: runtimeDir }),\n        global: true\n      })\n      addComponent({\n        name: 'GithubFileContributors',\n        filePath: resolveModule('./components/GithubFileContributors', { paths: runtimeDir }),\n        global: true\n      })\n    }\n\n    // Setup commits API\n    nitroConfig.handlers.push({\n      route: '/api/_github/commits',\n      handler: resolveModule('./server/api/commits', { paths: runtimeDir })\n    }, {\n      route: '/api/_github/commits/:query',\n      handler: resolveModule('./server/api/commits', { paths: runtimeDir })\n    })\n\n    // GithubCommits component\n    addComponent({\n      name: 'GithubCommits',\n      filePath: resolveModule('./components/GithubCommits', { paths: runtimeDir }),\n      global: true\n    })\n\n    addImports({\n      name: 'useGithub',\n      from: resolveModule('./composables/useGithub', { paths: runtimeDir })\n    })\n\n    nitroConfig.externals = defu(typeof nitroConfig.externals === 'object' ? nitroConfig.externals : {}, {\n      inline: [\n        // Inline module runtime in Nitro bundle\n        resolve('./runtime')\n      ]\n    })\n  }\n})\n"], "fixing_code": ["import { defu } from 'defu'\nimport { addImports, addComponent, createResolver, defineNuxtModule, resolveModule } from '@nuxt/kit'\nimport type { GithubRepositoryOptions } from './runtime/types'\n\nexport interface ModuleOptions extends GithubRepositoryOptions {\n  disableCache?: boolean\n  remarkPlugin?: boolean\n  releases?: boolean\n  contributors?: boolean\n  maxContributors?: number\n  /**\n   * Parse contents (releases content, readme) Markdown and return AST tree.\n   *\n   * Note: This option is only available when you have `@nuxt/content` installed in your project.\n   *\n   * @default true\n   */\n  parseContents?: boolean\n}\n\ndeclare module '@nuxt/schema' {\n  interface PublicRuntimeConfig {\n    // @ts-ignore\n    github?: ModuleOptions;\n  }\n\n  interface RuntimeConfig {\n    // @ts-ignore\n    github?: ModuleOptions;\n  }\n}\n\nexport default defineNuxtModule<ModuleOptions>({\n  meta: {\n    name: '@nuxtlabs/github-module',\n    configKey: 'github'\n  },\n  defaults: {\n    owner: '',\n    repo: '',\n    token: undefined,\n    branch: 'main',\n    api: 'https://api.github.com',\n    remarkPlugin: true,\n    disableCache: false,\n    releases: true,\n    contributors: true,\n    maxContributors: 100,\n    parseContents: true\n  },\n  setup (options, nuxt) {\n    const { resolve } = createResolver(import.meta.url)\n    const runtimeDir = resolve('./runtime')\n\n    if (!options.owner) {\n      // Check if we can split repo name into owner/repo\n      if (options.repo && options.repo.includes('/')) {\n        const [owner, repo] = options.repo.split('/')\n        options.owner = owner\n        options.repo = repo\n      }\n    }\n\n    // @ts-ignore\n    if (!nuxt.options.runtimeConfig.public) { nuxt.options.runtimeConfig.public = {} }\n\n    const config = {\n      api: options.api || process.env.GITHUB_OWNER,\n      owner: options.owner || process.env.GITHUB_OWNER,\n      branch: options.branch || process.env.GITHUB_BRANCH,\n      repo: options.repo || process.env.GITHUB_REPO,\n      disableCache: options.disableCache,\n      parseContents: options.parseContents,\n      maxContributors: options.maxContributors\n    }\n\n    // Public runtime config\n    // @ts-ignore\n    nuxt.options.runtimeConfig.public.github = defu(nuxt.options.runtimeConfig.public.github, config)\n    // @ts-ignore\n    nuxt.options.runtimeConfig.github = defu(nuxt.options.runtimeConfig.github, {\n      token: options.token || process.env.GITHUB_TOKEN\n    }, config)\n\n    // Autolink issue/PR/commit links using `remark-github` plugin\n    if (options.remarkPlugin) {\n      // @ts-ignore\n      nuxt.hook('content:context', (context) => {\n        context.markdown.remarkPlugins ??= {}\n\n        if (!Array.isArray(context.markdown.remarkPlugins)) {\n          context.markdown.remarkPlugins['remark-github'] = { repository: `${options.owner}/${options.repo}` }\n        }\n      })\n    }\n\n    const nitroConfig = nuxt.options.nitro\n\n    // Init Nitro handlers\n    nitroConfig.handlers = nitroConfig.handlers || []\n    nitroConfig.prerender = nitroConfig.prerender || {}\n    nitroConfig.prerender.routes = nitroConfig.prerender.routes || []\n\n    // Setup repository API\n    nitroConfig.handlers.push({\n      route: '/api/_github/repository',\n      handler: resolveModule('./server/api/repository', { paths: runtimeDir })\n    }, {\n      route: '/api/_github/repository/:query',\n      handler: resolveModule('./server/api/repository', { paths: runtimeDir })\n    })\n\n    // Setup readme file API\n    nitroConfig.handlers.push({\n      route: '/api/_github/readme',\n      handler: resolveModule('./server/api/readme', { paths: runtimeDir })\n    }, {\n      route: '/api/_github/readme/:query',\n      handler: resolveModule('./server/api/readme', { paths: runtimeDir })\n    })\n\n    // Repository component\n    addComponent({\n      name: 'GithubRepository',\n      filePath: resolveModule('./components/GithubRepository', { paths: runtimeDir }),\n      global: true\n    })\n\n    // GithubLink component\n    addComponent({\n      name: 'GithubLink',\n      filePath: resolveModule('./components/GithubLink', { paths: runtimeDir }),\n      global: true\n    })\n\n    // GithubReadme component\n    addComponent({\n      name: 'GithubReadme',\n      filePath: resolveModule('./components/GithubReadme', { paths: runtimeDir }),\n      global: true\n    })\n\n    // Setup releases API\n    if (options.releases) {\n      // Releases list\n      nitroConfig.handlers.push({\n        route: '/api/_github/releases',\n        handler: resolveModule('./server/api/releases/index', { paths: runtimeDir })\n      }, {\n        route: '/api/_github/releases/:query',\n        handler: resolveModule('./server/api/releases/index', { paths: runtimeDir })\n      })\n      nitroConfig.prerender.routes.push('/api/_github/releases')\n\n      // Releases components\n      addComponent({\n        name: 'GithubReleases',\n        filePath: resolveModule('./components/GithubReleases', { paths: runtimeDir }),\n        global: true\n      })\n      addComponent({\n        name: 'GithubLastRelease',\n        filePath: resolveModule('./components/GithubLastRelease', { paths: runtimeDir }),\n        global: true\n      })\n      addComponent({\n        name: 'GithubRelease',\n        filePath: resolveModule('./components/GithubRelease', { paths: runtimeDir }),\n        global: true\n      })\n    }\n\n    // Setup contributors API\n    if (options.contributors) {\n      nitroConfig.handlers.push({\n        route: '/api/_github/contributors',\n        handler: resolveModule('./server/api/contributors', { paths: runtimeDir })\n      }, {\n        route: '/api/_github/contributors/:query',\n        handler: resolveModule('./server/api/contributors', { paths: runtimeDir })\n      })\n      nitroConfig.prerender.routes.push('/api/_github/contributors')\n\n      // TODO: Add prerender for file arguments (using :source argument)\n      nitroConfig.handlers.push({\n        route: '/api/_github/contributors/file',\n        handler: resolveModule('./server/api/contributors/file', { paths: runtimeDir })\n      }, {\n        route: '/api/_github/contributors/file/:query',\n        handler: resolveModule('./server/api/contributors/file', { paths: runtimeDir })\n      })\n\n      // Contributors components\n      addComponent({\n        name: 'GithubContributors',\n        filePath: resolveModule('./components/GithubContributors', { paths: runtimeDir }),\n        global: true\n      })\n      addComponent({\n        name: 'GithubFileContributors',\n        filePath: resolveModule('./components/GithubFileContributors', { paths: runtimeDir }),\n        global: true\n      })\n    }\n\n    // Setup commits API\n    nitroConfig.handlers.push({\n      route: '/api/_github/commits',\n      handler: resolveModule('./server/api/commits', { paths: runtimeDir })\n    }, {\n      route: '/api/_github/commits/:query',\n      handler: resolveModule('./server/api/commits', { paths: runtimeDir })\n    })\n\n    // GithubCommits component\n    addComponent({\n      name: 'GithubCommits',\n      filePath: resolveModule('./components/GithubCommits', { paths: runtimeDir }),\n      global: true\n    })\n\n    addImports({\n      name: 'useGithub',\n      from: resolveModule('./composables/useGithub', { paths: runtimeDir })\n    })\n\n    nitroConfig.externals = defu(typeof nitroConfig.externals === 'object' ? nitroConfig.externals : {}, {\n      inline: [\n        // Inline module runtime in Nitro bundle\n        resolve('./runtime')\n      ]\n    })\n  }\n})\n"], "filenames": ["src/module.ts"], "buggy_code_start_loc": [72], "buggy_code_end_loc": [83], "fixing_code_start_loc": [71], "fixing_code_end_loc": [84], "type": "CWE-798", "message": "Use of Hard-coded Credentials in GitHub repository nuxtlabs/github-module prior to 1.6.2.", "other": {"cve": {"id": "CVE-2023-2138", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-18T01:15:07.193", "lastModified": "2023-04-27T19:46:55.753", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Use of Hard-coded Credentials in GitHub repository nuxtlabs/github-module prior to 1.6.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-798"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nuxtlabs:nuxt:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.6.2", "matchCriteriaId": "8B79D4E0-35DF-40DF-8473-FF493C771CA6"}]}]}], "references": [{"url": "https://github.com/nuxtlabs/github-module/commit/5490c43f729eee60f07920bf88c0aabdc1398b6e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/65096ef9-eafc-49da-b49a-5b88c0203ca6", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nuxtlabs/github-module/commit/5490c43f729eee60f07920bf88c0aabdc1398b6e"}}