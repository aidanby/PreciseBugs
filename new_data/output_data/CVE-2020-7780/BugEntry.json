{"buggy_code": ["package com.softwaremill.session\n\nimport akka.http.scaladsl.server.Directives._\nimport akka.http.scaladsl.server.{Directive0, Directive1}\nimport akka.stream.Materializer\n\ntrait CsrfDirectives {\n\n  /**\n    * Protects against CSRF attacks using a double-submit cookie. The cookie will be set on any `GET` request which\n    * doesn't have the token set in the header. For all other requests, the value of the token from the CSRF cookie must\n    * match the value in the custom header (or request body, if `checkFormBody` is `true`).\n    *\n    * Note that this scheme can be broken when not all subdomains are protected or not using HTTPS and secure cookies,\n    * and the token is placed in the request body (not in the header).\n    *\n    * See the documentation for more details.\n    */\n  def randomTokenCsrfProtection[T](checkMode: CsrfCheckMode[T]): Directive0 = {\n    csrfTokenFromCookie(checkMode).flatMap {\n      case Some(cookie) =>\n        // if a cookie is already set, we let through all get requests (without setting a new token), or validate\n        // that the token matches.\n        get.recover { _ =>\n          submittedCsrfToken(checkMode).flatMap { submitted =>\n            if (submitted == cookie) {\n              pass\n            } else {\n              reject(checkMode.csrfManager.tokenInvalidRejection).toDirective[Unit]\n            }\n          }\n        }\n      case None =>\n        // if a cookie is not set, generating a new one for get requests, rejecting other\n        (get & setNewCsrfToken(checkMode)).recover(_ => reject(checkMode.csrfManager.tokenInvalidRejection))\n    }\n  }\n\n  def submittedCsrfToken[T](checkMode: CsrfCheckMode[T]): Directive1[String] = {\n    headerValueByName(checkMode.manager.config.csrfSubmittedName).recover { rejections =>\n      checkMode match {\n        case c: CheckHeaderAndForm[T] =>\n          import c.materializer\n          formField(checkMode.manager.config.csrfSubmittedName)\n        case _ => reject(rejections: _*)\n      }\n    }\n  }\n\n  def csrfTokenFromCookie[T](checkMode: CsrfCheckMode[T]): Directive1[Option[String]] =\n    optionalCookie(checkMode.manager.config.csrfCookieConfig.name).map(_.map(_.value))\n\n  def setNewCsrfToken[T](checkMode: CsrfCheckMode[T]): Directive0 =\n    setCookie(checkMode.csrfManager.createCookie())\n}\n\nobject CsrfDirectives extends CsrfDirectives\n\nsealed trait CsrfCheckMode[T] {\n  def manager: SessionManager[T]\n  def csrfManager = manager.csrfManager\n}\nclass CheckHeader[T] private[session] (implicit val manager: SessionManager[T]) extends CsrfCheckMode[T]\nclass CheckHeaderAndForm[T] private[session] (implicit\n                                              val manager: SessionManager[T],\n                                              val materializer: Materializer)\n    extends CsrfCheckMode[T]\n\nobject CsrfOptions {\n  def checkHeader[T](implicit manager: SessionManager[T]): CheckHeader[T] = new CheckHeader[T]()\n  def checkHeaderAndForm[T](implicit manager: SessionManager[T], materializer: Materializer): CheckHeaderAndForm[T] =\n    new CheckHeaderAndForm[T]()\n}\n", "package com.softwaremill.session\n\nimport akka.http.scaladsl.model.FormData\nimport akka.http.scaladsl.model.headers.{Cookie, `Set-Cookie`}\nimport akka.http.scaladsl.server.AuthorizationFailedRejection\nimport akka.http.scaladsl.server.Directives._\nimport akka.http.scaladsl.testkit.ScalatestRouteTest\nimport com.softwaremill.session.CsrfDirectives._\nimport com.softwaremill.session.CsrfOptions._\nimport org.scalatest.{Matchers, FlatSpec}\n\nclass CsrfDirectivesTest extends FlatSpec with ScalatestRouteTest with Matchers {\n\n  import TestData._\n  val cookieName = sessionConfig.csrfCookieConfig.name\n  implicit val csrfCheckMode = checkHeader\n\n  def routes[T](implicit manager: SessionManager[T], checkMode: CsrfCheckMode[T]) =\n    randomTokenCsrfProtection(checkMode) {\n      get {\n        path(\"site\") {\n          complete {\n            \"ok\"\n          }\n        }\n      } ~\n        post {\n          path(\"login\") {\n            setNewCsrfToken(checkMode) {\n              complete { \"ok\" }\n            }\n          } ~\n            path(\"transfer_money\") {\n              complete { \"ok\" }\n            }\n        }\n    }\n\n  it should \"set the csrf cookie on the first get request only\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n\n      val csrfCookieOption = header[`Set-Cookie`]\n      csrfCookieOption should be('defined)\n      val Some(csrfCookie) = csrfCookieOption\n\n      csrfCookie.cookie.name should be(cookieName)\n\n      Get(\"/site\") ~> addHeader(Cookie(cookieName, csrfCookie.cookie.value)) ~> routes ~> check {\n        responseAs[String] should be(\"ok\")\n\n        header[`Set-Cookie`] should be(None)\n      }\n    }\n  }\n\n  it should \"reject requests if the csrf cookie doesn't match the header value\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n      val Some(csrfCookie) = header[`Set-Cookie`]\n\n      Post(\"/transfer_money\") ~>\n        addHeader(Cookie(cookieName, csrfCookie.cookie.value)) ~>\n        addHeader(sessionConfig.csrfSubmittedName, \"something else\") ~>\n        routes ~>\n        check {\n          rejections should be(List(AuthorizationFailedRejection))\n        }\n    }\n  }\n\n  it should \"reject requests if the csrf cookie isn't set\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n\n      Post(\"/transfer_money\") ~>\n        routes ~>\n        check {\n          rejections should be(List(AuthorizationFailedRejection))\n        }\n    }\n  }\n\n  it should \"accept requests if the csrf cookie matches the header value\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n      val Some(csrfCookie) = header[`Set-Cookie`]\n\n      Post(\"/transfer_money\") ~>\n        addHeader(Cookie(cookieName, csrfCookie.cookie.value)) ~>\n        addHeader(sessionConfig.csrfSubmittedName, csrfCookie.cookie.value) ~>\n        routes ~>\n        check {\n          responseAs[String] should be(\"ok\")\n        }\n    }\n  }\n\n  it should \"accept requests if the csrf cookie matches the form field value\" in {\n    val testRoutes = routes(manager, checkHeaderAndForm)\n    Get(\"/site\") ~> testRoutes ~> check {\n      responseAs[String] should be(\"ok\")\n      val Some(csrfCookie) = header[`Set-Cookie`]\n\n      Post(\"/transfer_money\", FormData(sessionConfig.csrfSubmittedName -> csrfCookie.cookie.value)) ~>\n        addHeader(Cookie(cookieName, csrfCookie.cookie.value)) ~>\n        testRoutes ~>\n        check {\n          responseAs[String] should be(\"ok\")\n        }\n    }\n  }\n\n  it should \"set a new csrf cookie when requested\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n      val Some(csrfCookie1) = header[`Set-Cookie`]\n\n      Post(\"/login\") ~>\n        addHeader(Cookie(cookieName, csrfCookie1.cookie.value)) ~>\n        addHeader(sessionConfig.csrfSubmittedName, csrfCookie1.cookie.value) ~>\n        routes ~>\n        check {\n          responseAs[String] should be(\"ok\")\n          val Some(csrfCookie2) = header[`Set-Cookie`]\n\n          csrfCookie1.cookie.value should not be (csrfCookie2.cookie.value)\n        }\n    }\n  }\n}\n", "package com.softwaremill.session.javadsl;\n\nimport akka.http.javadsl.model.FormData;\nimport akka.http.javadsl.model.HttpRequest;\nimport akka.http.javadsl.model.HttpResponse;\nimport akka.http.javadsl.model.StatusCodes;\nimport akka.http.javadsl.model.headers.Cookie;\nimport akka.http.javadsl.model.headers.HttpCookie;\nimport akka.http.javadsl.model.headers.RawHeader;\nimport akka.http.javadsl.server.Route;\nimport akka.http.javadsl.testkit.TestRouteResult;\nimport akka.japi.Pair;\nimport com.softwaremill.session.CsrfCheckMode;\nimport com.softwaremill.session.SessionContinuity;\nimport com.softwaremill.session.SetSessionTransport;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class CsrfDirectivesTest extends HttpSessionAwareDirectivesTest {\n\n    protected Route buildRoute(HttpSessionAwareDirectives<String> testDirectives, SessionContinuity<String> oneOff, SessionContinuity<String> refreshable, SetSessionTransport sessionTransport, CsrfCheckMode<String> csrfCheckMode) {\n        return route(\n            testDirectives.randomTokenCsrfProtection(csrfCheckMode, () ->\n                route(\n                    get(() ->\n                        path(\"site\", () ->\n                            complete(\"ok\")\n                        )\n                    ),\n                    post(() ->\n                        route(\n                            path(\"login\", () ->\n                                testDirectives.setNewCsrfToken(csrfCheckMode, () ->\n                                    complete(\"ok\"))),\n                            path(\"transfer_money\", () ->\n                                complete(\"ok\")\n                            )\n                        )\n                    )\n                )\n            )\n        );\n\n    }\n\n    @Test\n    public void shouldSetTheCsrfCookieOnTheFirstGetRequestOnly() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n\n        // and\n        HttpResponse response = testRouteResult.response();\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(response);\n        Assert.assertNotNull(csrfCookie.value());\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.GET(\"/site\")\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n\n        // and\n        HttpResponse response2 = testRouteResult2.response();\n        HttpCookie cookieValues2 = getCsrfTokenCookieValues(response2);\n        Assert.assertNull(cookieValues2);\n\n    }\n\n    @Test\n    public void shouldRejectRequestsIfTheCsrfCookieDoesNotMatchTheHeaderValue() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        // and\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(testRouteResult.response());\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/transfer_money\")\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n                .addHeader(RawHeader.create(csrfSubmittedName, \"something else\"))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.FORBIDDEN);\n    }\n\n    @Test\n    public void shouldRejectRequestsIfTheCsrfCookieIsNotSet() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/transfer_money\"));\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.FORBIDDEN);\n\n\n    }\n\n    @Test\n    public void shouldAcceptRequestsIfTheCsrfCookieMatchesTheHeaderValue() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        // and\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(testRouteResult.response());\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/transfer_money\")\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n                .addHeader(RawHeader.create(csrfSubmittedName, csrfCookie.value()))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n\n    }\n\n    @Test\n    public void shouldAcceptRequestsIfTheCsrfCookieMatchesTheFormFieldValue() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderAndFormMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        // and\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(testRouteResult.response());\n\n        /* second request */\n        // when\n        final FormData formData = FormData.create(\n            Pair.create(csrfSubmittedName, csrfCookie.value())\n        );\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/transfer_money\").withEntity(formData.toEntity())\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n    }\n\n    @Test\n    public void shouldSetANewCsrfCookieWhenRequested() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        // and\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(testRouteResult.response());\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/login\")\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n                .addHeader(RawHeader.create(csrfSubmittedName, csrfCookie.value()))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n\n        // and\n        HttpCookie csrfCookie2 = getCsrfTokenCookieValues(testRouteResult2.response());\n        Assert.assertNotEquals(csrfCookie.value(), csrfCookie2.value());\n\n    }\n\n}\n"], "fixing_code": ["package com.softwaremill.session\n\nimport akka.http.scaladsl.server.Directives._\nimport akka.http.scaladsl.server.{Directive0, Directive1}\nimport akka.stream.Materializer\n\ntrait CsrfDirectives {\n\n  /**\n    * Protects against CSRF attacks using a double-submit cookie. The cookie will be set on any `GET` request which\n    * doesn't have the token set in the header. For all other requests, the value of the token from the CSRF cookie must\n    * match the value in the custom header (or request body, if `checkFormBody` is `true`).\n    *\n    * Note that this scheme can be broken when not all subdomains are protected or not using HTTPS and secure cookies,\n    * and the token is placed in the request body (not in the header).\n    *\n    * See the documentation for more details.\n    */\n  def randomTokenCsrfProtection[T](checkMode: CsrfCheckMode[T]): Directive0 = {\n    csrfTokenFromCookie(checkMode).flatMap {\n      case Some(cookie) =>\n        // if a cookie is already set, we let through all get requests (without setting a new token), or validate\n        // that the token matches.\n        get.recover { _ =>\n          submittedCsrfToken(checkMode).flatMap { submitted =>\n            if (submitted == cookie && !cookie.isEmpty) {\n              pass\n            } else {\n              reject(checkMode.csrfManager.tokenInvalidRejection).toDirective[Unit]\n            }\n          }\n        }\n      case None =>\n        // if a cookie is not set, generating a new one for get requests, rejecting other\n        (get & setNewCsrfToken(checkMode)).recover(_ => reject(checkMode.csrfManager.tokenInvalidRejection))\n    }\n  }\n\n  def submittedCsrfToken[T](checkMode: CsrfCheckMode[T]): Directive1[String] = {\n    headerValueByName(checkMode.manager.config.csrfSubmittedName).recover { rejections =>\n      checkMode match {\n        case c: CheckHeaderAndForm[T] =>\n          import c.materializer\n          formField(checkMode.manager.config.csrfSubmittedName)\n        case _ => reject(rejections: _*)\n      }\n    }\n  }\n\n  def csrfTokenFromCookie[T](checkMode: CsrfCheckMode[T]): Directive1[Option[String]] =\n    optionalCookie(checkMode.manager.config.csrfCookieConfig.name).map(_.map(_.value))\n\n  def setNewCsrfToken[T](checkMode: CsrfCheckMode[T]): Directive0 =\n    setCookie(checkMode.csrfManager.createCookie())\n}\n\nobject CsrfDirectives extends CsrfDirectives\n\nsealed trait CsrfCheckMode[T] {\n  def manager: SessionManager[T]\n  def csrfManager = manager.csrfManager\n}\nclass CheckHeader[T] private[session] (implicit val manager: SessionManager[T]) extends CsrfCheckMode[T]\nclass CheckHeaderAndForm[T] private[session] (implicit\n                                              val manager: SessionManager[T],\n                                              val materializer: Materializer)\n    extends CsrfCheckMode[T]\n\nobject CsrfOptions {\n  def checkHeader[T](implicit manager: SessionManager[T]): CheckHeader[T] = new CheckHeader[T]()\n  def checkHeaderAndForm[T](implicit manager: SessionManager[T], materializer: Materializer): CheckHeaderAndForm[T] =\n    new CheckHeaderAndForm[T]()\n}\n", "package com.softwaremill.session\n\nimport akka.http.scaladsl.model.FormData\nimport akka.http.scaladsl.model.headers.{Cookie, `Set-Cookie`}\nimport akka.http.scaladsl.server.AuthorizationFailedRejection\nimport akka.http.scaladsl.server.Directives._\nimport akka.http.scaladsl.testkit.ScalatestRouteTest\nimport com.softwaremill.session.CsrfDirectives._\nimport com.softwaremill.session.CsrfOptions._\nimport org.scalatest.{Matchers, FlatSpec}\n\nclass CsrfDirectivesTest extends FlatSpec with ScalatestRouteTest with Matchers {\n\n  import TestData._\n  val cookieName = sessionConfig.csrfCookieConfig.name\n  implicit val csrfCheckMode = checkHeader\n\n  def routes[T](implicit manager: SessionManager[T], checkMode: CsrfCheckMode[T]) =\n    randomTokenCsrfProtection(checkMode) {\n      get {\n        path(\"site\") {\n          complete {\n            \"ok\"\n          }\n        }\n      } ~\n        post {\n          path(\"login\") {\n            setNewCsrfToken(checkMode) {\n              complete { \"ok\" }\n            }\n          } ~\n            path(\"transfer_money\") {\n              complete { \"ok\" }\n            }\n        }\n    }\n\n  it should \"set the csrf cookie on the first get request only\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n\n      val csrfCookieOption = header[`Set-Cookie`]\n      csrfCookieOption should be('defined)\n      val Some(csrfCookie) = csrfCookieOption\n\n      csrfCookie.cookie.name should be(cookieName)\n\n      Get(\"/site\") ~> addHeader(Cookie(cookieName, csrfCookie.cookie.value)) ~> routes ~> check {\n        responseAs[String] should be(\"ok\")\n\n        header[`Set-Cookie`] should be(None)\n      }\n    }\n  }\n\n  it should \"reject requests if the csrf cookie doesn't match the header value\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n      val Some(csrfCookie) = header[`Set-Cookie`]\n\n      Post(\"/transfer_money\") ~>\n        addHeader(Cookie(cookieName, csrfCookie.cookie.value)) ~>\n        addHeader(sessionConfig.csrfSubmittedName, \"something else\") ~>\n        routes ~>\n        check {\n          rejections should be(List(AuthorizationFailedRejection))\n        }\n    }\n  }\n\n  it should \"reject requests if the csrf cookie isn't set\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n\n      Post(\"/transfer_money\") ~>\n        routes ~>\n        check {\n          rejections should be(List(AuthorizationFailedRejection))\n        }\n    }\n  }\n\n  it should \"reject requests if the csrf cookie and the header are empty\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n\n      Post(\"/transfer_money\") ~>\n        addHeader(Cookie(cookieName, \"\")) ~>\n        addHeader(sessionConfig.csrfSubmittedName, \"\") ~>\n        routes ~>\n        check {\n          rejections should be(List(AuthorizationFailedRejection))\n        }\n    }\n  }\n\n  it should \"accept requests if the csrf cookie matches the header value\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n      val Some(csrfCookie) = header[`Set-Cookie`]\n\n      Post(\"/transfer_money\") ~>\n        addHeader(Cookie(cookieName, csrfCookie.cookie.value)) ~>\n        addHeader(sessionConfig.csrfSubmittedName, csrfCookie.cookie.value) ~>\n        routes ~>\n        check {\n          responseAs[String] should be(\"ok\")\n        }\n    }\n  }\n\n  it should \"accept requests if the csrf cookie matches the form field value\" in {\n    val testRoutes = routes(manager, checkHeaderAndForm)\n    Get(\"/site\") ~> testRoutes ~> check {\n      responseAs[String] should be(\"ok\")\n      val Some(csrfCookie) = header[`Set-Cookie`]\n\n      Post(\"/transfer_money\", FormData(sessionConfig.csrfSubmittedName -> csrfCookie.cookie.value)) ~>\n        addHeader(Cookie(cookieName, csrfCookie.cookie.value)) ~>\n        testRoutes ~>\n        check {\n          responseAs[String] should be(\"ok\")\n        }\n    }\n  }\n\n  it should \"set a new csrf cookie when requested\" in {\n    Get(\"/site\") ~> routes ~> check {\n      responseAs[String] should be(\"ok\")\n      val Some(csrfCookie1) = header[`Set-Cookie`]\n\n      Post(\"/login\") ~>\n        addHeader(Cookie(cookieName, csrfCookie1.cookie.value)) ~>\n        addHeader(sessionConfig.csrfSubmittedName, csrfCookie1.cookie.value) ~>\n        routes ~>\n        check {\n          responseAs[String] should be(\"ok\")\n          val Some(csrfCookie2) = header[`Set-Cookie`]\n\n          csrfCookie1.cookie.value should not be (csrfCookie2.cookie.value)\n        }\n    }\n  }\n}\n", "package com.softwaremill.session.javadsl;\n\nimport akka.http.javadsl.model.FormData;\nimport akka.http.javadsl.model.HttpRequest;\nimport akka.http.javadsl.model.HttpResponse;\nimport akka.http.javadsl.model.StatusCodes;\nimport akka.http.javadsl.model.headers.Cookie;\nimport akka.http.javadsl.model.headers.HttpCookie;\nimport akka.http.javadsl.model.headers.RawHeader;\nimport akka.http.javadsl.server.Route;\nimport akka.http.javadsl.testkit.TestRouteResult;\nimport akka.japi.Pair;\nimport com.softwaremill.session.CsrfCheckMode;\nimport com.softwaremill.session.SessionContinuity;\nimport com.softwaremill.session.SetSessionTransport;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class CsrfDirectivesTest extends HttpSessionAwareDirectivesTest {\n\n    protected Route buildRoute(HttpSessionAwareDirectives<String> testDirectives, SessionContinuity<String> oneOff, SessionContinuity<String> refreshable, SetSessionTransport sessionTransport, CsrfCheckMode<String> csrfCheckMode) {\n        return route(\n            testDirectives.randomTokenCsrfProtection(csrfCheckMode, () ->\n                route(\n                    get(() ->\n                        path(\"site\", () ->\n                            complete(\"ok\")\n                        )\n                    ),\n                    post(() ->\n                        route(\n                            path(\"login\", () ->\n                                testDirectives.setNewCsrfToken(csrfCheckMode, () ->\n                                    complete(\"ok\"))),\n                            path(\"transfer_money\", () ->\n                                complete(\"ok\")\n                            )\n                        )\n                    )\n                )\n            )\n        );\n\n    }\n\n    @Test\n    public void shouldSetTheCsrfCookieOnTheFirstGetRequestOnly() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n\n        // and\n        HttpResponse response = testRouteResult.response();\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(response);\n        Assert.assertNotNull(csrfCookie.value());\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.GET(\"/site\")\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n\n        // and\n        HttpResponse response2 = testRouteResult2.response();\n        HttpCookie cookieValues2 = getCsrfTokenCookieValues(response2);\n        Assert.assertNull(cookieValues2);\n\n    }\n\n    @Test\n    public void shouldRejectRequestsIfTheCsrfCookieDoesNotMatchTheHeaderValue() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        // and\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(testRouteResult.response());\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/transfer_money\")\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n                .addHeader(RawHeader.create(csrfSubmittedName, \"something else\"))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.FORBIDDEN);\n    }\n\n    @Test\n    public void shouldRejectRequestsIfTheCsrfCookieIsNotSet() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/transfer_money\"));\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.FORBIDDEN);\n\n\n    }\n\n    @Test\n    public void shouldRejectRequestsIfTheCsrfCookieAndTheHeaderAreEmpty() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n          .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n          .assertStatusCode(StatusCodes.OK);\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n          .run(HttpRequest.POST(\"/transfer_money\")\n            .addHeader(Cookie.create(csrfCookieName, \"\"))\n            .addHeader(RawHeader.create(csrfSubmittedName, \"\"))\n          );\n\n        // then\n        testRouteResult2\n          .assertStatusCode(StatusCodes.FORBIDDEN);\n\n    }\n\n    @Test\n    public void shouldAcceptRequestsIfTheCsrfCookieMatchesTheHeaderValue() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        // and\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(testRouteResult.response());\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/transfer_money\")\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n                .addHeader(RawHeader.create(csrfSubmittedName, csrfCookie.value()))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n\n    }\n\n    @Test\n    public void shouldAcceptRequestsIfTheCsrfCookieMatchesTheFormFieldValue() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderAndFormMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        // and\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(testRouteResult.response());\n\n        /* second request */\n        // when\n        final FormData formData = FormData.create(\n            Pair.create(csrfSubmittedName, csrfCookie.value())\n        );\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/transfer_money\").withEntity(formData.toEntity())\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n    }\n\n    @Test\n    public void shouldSetANewCsrfCookieWhenRequested() {\n        // given\n        final Route route = createCsrfRouteWithCheckHeaderMode();\n\n        // when\n        TestRouteResult testRouteResult = testRoute(route)\n            .run(HttpRequest.GET(\"/site\"));\n\n        // then\n        testRouteResult\n            .assertStatusCode(StatusCodes.OK);\n\n        // and\n        HttpCookie csrfCookie = getCsrfTokenCookieValues(testRouteResult.response());\n\n        /* second request */\n        // when\n        TestRouteResult testRouteResult2 = testRoute(route)\n            .run(HttpRequest.POST(\"/login\")\n                .addHeader(Cookie.create(csrfCookieName, csrfCookie.value()))\n                .addHeader(RawHeader.create(csrfSubmittedName, csrfCookie.value()))\n            );\n\n        // then\n        testRouteResult2\n            .assertStatusCode(StatusCodes.OK)\n            .assertEntity(\"ok\");\n\n        // and\n        HttpCookie csrfCookie2 = getCsrfTokenCookieValues(testRouteResult2.response());\n        Assert.assertNotEquals(csrfCookie.value(), csrfCookie2.value());\n\n    }\n\n}\n"], "filenames": ["core/src/main/scala/com/softwaremill/session/CsrfDirectives.scala", "core/src/test/scala/com/softwaremill/session/CsrfDirectivesTest.scala", "javaTests/src/test/java/com/softwaremill/session/javadsl/CsrfDirectivesTest.java"], "buggy_code_start_loc": [26, 83, 138], "buggy_code_end_loc": [27, 83, 138], "fixing_code_start_loc": [26, 84, 139], "fixing_code_end_loc": [27, 98, 166], "type": "CWE-352", "message": "This affects the package com.softwaremill.akka-http-session:core_2.13 before 0.5.11; the package com.softwaremill.akka-http-session:core_2.12 before 0.5.11; the package com.softwaremill.akka-http-session:core_2.11 before 0.5.11. For older versions, endpoints protected by randomTokenCsrfProtection could be bypassed with an empty X-XSRF-TOKEN header and an empty XSRF-TOKEN cookie.", "other": {"cve": {"id": "CVE-2020-7780", "sourceIdentifier": "report@snyk.io", "published": "2020-11-27T17:15:12.093", "lastModified": "2020-12-04T15:08:17.427", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package com.softwaremill.akka-http-session:core_2.13 before 0.5.11; the package com.softwaremill.akka-http-session:core_2.12 before 0.5.11; the package com.softwaremill.akka-http-session:core_2.11 before 0.5.11. For older versions, endpoints protected by randomTokenCsrfProtection could be bypassed with an empty X-XSRF-TOKEN header and an empty XSRF-TOKEN cookie."}, {"lang": "es", "value": "Esto afecta al paquete com.softwaremill.akka-http-session:core_2.13 versiones anteriores a 0.5.11;&#xa0;el paquete com.softwaremill.akka-http-session:core_2.12 versiones anteriores a 0.5.11;&#xa0;el paquete com.softwaremill.akka-http-session:core_2.11 versiones anteriores a 0.5.11.&#xa0;Para versiones anteriores, unos endpoint protegidos por la funci\u00f3n randomTokenCsrfProtection podr\u00edan omitirse con un encabezado X-XSRF-TOKEN vac\u00edo y una cookie XSRF-TOKEN vac\u00eda"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:softwaremill:akka-http-session:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.5.11", "matchCriteriaId": "038B6CC8-C737-443E-9B33-81657D699BA8"}]}]}], "references": [{"url": "https://github.com/softwaremill/akka-http-session/commit/57f11663eecb84be03383d164f655b9c5f953b41", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/softwaremill/akka-http-session/issues/74", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/softwaremill/akka-http-session/issues/77", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-COMSOFTWAREMILLAKKAHTTPSESSION-1045352", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-COMSOFTWAREMILLAKKAHTTPSESSION-1046654", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-COMSOFTWAREMILLAKKAHTTPSESSION-1046655", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/softwaremill/akka-http-session/commit/57f11663eecb84be03383d164f655b9c5f953b41"}}