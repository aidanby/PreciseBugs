{"buggy_code": ["<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n*/\n\n/**\n * The facileManager version string\n *\n * @global string $fm_version\n */\n$fm_version = '4.5.0';\n\n/**\n * Holds the facileManager DB revision, increments when changes are made to the facileManager DB schema.\n *\n * @global int $fm_db_version\n */\n$fm_db_version = 50;\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.5.0';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0.0';\n", "4.5.0 (2023-04-19)\n==================\n* Server - [improvement] The settings now displays the timestamp of the last software update check.\n* Server - [bug] Fixed module settings page when the has no settings.\n\n4.4.0 (2023-03-09)\n==================\n* Server - [security] Updated to jQuery-UI v1.13.2. (Issue #561)\n* Both   - [improvement] Added PHP 8.2 support. (Issue #558)\n* Server - [improvement] Added additional description of LDAP DN parameters. (Issue #563)\n* Server - [improvement] Added additional spacing to delete the button.\n* Server - [improvement] Added option to show/hide the server build icon per module.\n* Server - [improvement] Admin->Users & Groups no longer tries to resolve client IP. (Issue #530)\n* Server - [bug] Fixed AD authentication when not specifying a Search Start DN. (Issue #565)\n* Server - [bug] When the user is trying to add an object and their session timed out, the\n           user is returned to the login page.\n\n4.3.0 (2022-06-29)\n==================\n* Server - [improvement] Local auth now works even when LDAP auth is enabled. (Issue #546)\n* Server - [bug] Fixed PHP errors during installation process. (Issue #548)\n* Client - [bug] Fixed user grep when adding ssh user. (Issue #553)\n\n4.2.0 (2022-01-06)\n==================\n* Server - [improvement] Updated max_input_vars error message to include additional methods\n           of increasing the value.\n* Server - [improvement] Added database connection error during installation process to\n           provide better debugging ability.\n* Server - [improvement] Added setting to specify the Distinguished Name for the starting search\n           point when using LDAP group membership during authentication.\n* Server - [improvement] LDAP server connection tests occur before authentication.\n* Client - [bug] Fixed httpd2 and apache2 detection. (Issue #543)\n* Server - [bug] Removed password change form on authenticated user profile for LDAP users.\n* Server - [bug] Ports defined in the Settings can now be unset.\n* Server - [bug] Fixed minor CSS issues.\n\n4.1.2 (2021-10-27)\n==================\n* Server - [bug] Fixed login logo alignment.\n\n4.1.1 (2021-09-29)\n==================\n* Server - [bug] Fixed CSS for the tooltip in some windows.\n* Server - [bug] Fixed grabbable table rows so reordering now works. (Bug introduced\n           with jQuery upgrade)\n\n4.1.0 (2021-09-14)\n==================\n* Server - [security] Upgraded to jQuery 3.6.0. (Issue #525)\n* Server - [improvement] Updated UI to better show disabled buttons and fields.\n* Server - [improvement] LDAPS authentication no longer requires certificate inputs. (Issue #534)\n* Server - [improvement] Added a config check warning message.\n* Server - [bug] Fixed LDAP group authentication. (Issue #533)\n* Server - [bug] Fixed client serial number generations when using MySQL 8.x. (Issue #515)\n\n4.0.3 (2021-02-03)\n==================\n* Server - [security] Fixed a SQL injection issue with session variables.\n           (Found and reported by Niko K from Cure53)\n* Server - [security] unauthenticated clients can no longer view the dashboard.\n           (Found and reported by Niko K from Cure53)\n* Server - [security] Fixed a SQL injection issue with user and group edits.\n* Server - [bug] CSS tweaks.\n* Server - [bug] Changed SSH parameter to disable pseudo-tty allocation. (Pull #513)\n\n4.0.2 (2020-12-02)\n==================\n* Server - [bug] Fixed API key creation. (Issue #507)\n\n4.0.1 (2020-11-27)\n==================\n* Server - [bug] Fixed an issue where users could not be enabled or disabled.\n* Server - [bug] Users with permission to manage servers can now preview the\n           server configuration.\n* Server - [bug] Fixed upgrade process retry attempts.\n* Client - [bug] Fixed client cron entry when fullpath is not used.\n\n4.0.0 (2020-11-11)\n==================\n* Server - [security] Fixed an issue where unprivileged users could create\n           additional users with super-admin privileges.\n* Both   - [feature] Added support for user API keys. (Issue #289 #327)\n* Server - [feature] Added support for MySQL SSL connections. (Issue #485)\n* Server - [improvement] CSS changes.\n* Server - [improvement] Added support for module settings to have sections.\n* Server - [improvement] Added support to define LDAPS certificate and CA\n           files in the settings. (Issue #500)\n* Server - [bug] Fixed PHP errors.\n\n3.5.7 (2020-03-04)\n==================\n* Server - [bug] Fixed user creation during installation. (Issue #478)\n* Client - [bug] Fixed text output wordwrapping.\n\n3.5.6 (2020-01-09)\n==================\n* Server - [bug] Fixed PHP fatal error when setting the server build/update flag\n           for server groups. (Issue #472)\n\n3.5.5 (2019-12-13)\n==================\n* Server - [security] Fixed an issue where non-privileged users could be escalated\n           to super-admin.\n* Server - [bug] New user passwords can be created with quotation marks.\n* Server - [improvement] Added support for manual software update checks.\n\n3.5.4 (2019-12-11)\n==================\n* Server - [bug] Fixed server configuration preview formatting when html is in\n           in the output.\n\n3.5.3 (2019-12-11)\n==================\n* Server - [bug] Fixed database installation and backup support for passwords\n           with quotation marks. (Issue #470)\n* Server - [security] Database backups no longer send the password to the command\n           line. (Issue #470)\n* Server - [bug] Fixed server configuration preview formatting when html is in\n           in the output.\n\n3.5.2 (2019-12-06)\n==================\n* Server - [bug] Fixed support for passwords with quotation marks. (Issue #469)\n* Server - [bug] Fixed branding image display in password reset emails.\n* Server - [improvement] Changed color of placeholder text. (Issue #371)\n\n3.5.1 (2019-10-16)\n==================\n* Client - [bug] Fixed parsing of the apache2 user on Debian systems. (Issue #462)\n\n3.5.0 (2019-10-01)\n==================\n** Minimum PHP version is now 5.5 for the web server **\n* Server - [bug] Fixed PHP errors during installation process.\n* Server - [improvement] Popup windows are now draggable only by the title bar.\n* Server - [improvement] Refinements around grabbable rows.\n* Server - [bug] Configuration previews no longer process characters as html.\n* Server - [security] Fixed an issue where unauthenticated password resets could\n           occur. (Found and reported by Arturs Danilevics, Oskars Vegeris, and\n           Ivars Vids)\n* Both   - [security] Fixed an issue where local privileges could be escalated\n           to root. (Found and reported by Arturs Danilevics, Oskars Vegeris, and\n           Ivars Vids)\n* Server - [security] Fixed an issue with password resets where local privilege\n           escalation and SQL injections could occur. (Found and reported by \n           Arturs Danilevics, Oskars Vegeris, and Ivars Vids)\n* Server - [security] Changed the default password reset expiration to 15 minutes.\n* Server - [security] Updated the user password hashing to a more secure algorithm.\n           (Found and reported by Arturs Danilevics, Oskars Vegeris, and Ivars Vids)\n* Server - [security] Fixed an issue where admin-servers.php was susceptible to\n           SQL injection. (Found and reported by Arturs Danilevics, Oskars Vegeris,\n           and Ivars Vids)\n* Server - [security] Ensured header() calls are not skipped. (Found and reported\n           by Arturs Danilevics, Oskars Vegeris, and Ivars Vids)\n* Server - [improvement] Updated .htaccess installation checks verbiage. (Issue #461)\n* Client - [bug] Fixed parsing of the apache2 user on Debian systems. (Issue #462)\n* Server - [improvement] CSS tweaks for shadow containers.\n* Client - [improvement] Added support to gather interface addresses.\n\n3.4.2 (2019-05-17)\n==================\n* Server - [bug] Fixed font-awesome graphics for offline installations. (Issue #441)\n\n3.4.1 (2019-03-20)\n==================\n* Server - [security] Fixed user management privileges so super-admins cannot\n           be added, modified, or deleted by less privileged users. (Issue #436)\n* Server - [bug] Fixed an issue where user groups could not be deleted.\n* Server - [bug] Fixed installs and upgrades with PHP 7.3.x. (Issue #436)\n* Server - [bug] Fixed PHP 7.3.x errors. (Issue #436)\n\n3.4 (2019-03-16)\n================\n* Server - [improvement] Menu badge counts become 99+ when greater than 100.\n* Server - [improvement] Updating the core via the web interface no longer\n           requires config.inc.php to be writeable by the web server user.\n* Server - [improvement] Cleaned up redundant code.\n* Server - [bug] Fixed an issue where the installer would display a blank\n           grey screen. (Issue #417)\n* Server - [improvement] Added tooltip-copy CSS.\n* Server - [improvement] fM core and module server upgrade packages now use\n           the proxy server settings. (Issue #388)\n* Client - [feature] Added support for using a proxy server. (Issue #388)\n* Server - [improvement] Modules can no longer be upgraded if the minimum core\n           version is not installed.\n* Server - [improvement] CSS and icon changes.\n\n3.3 (2018-12-15)\n================\n* Server - [bug] Properly support the OS icon for Raspbian.\n* Client - [improvement] Moved getInterfaceNames() to core.\n* Server - [improvement] CSS changes.\n* Server - [bug] Added missing select2 image.\n* Server - [bug] Fixed text.\n* Client - [improvement] Added function to detect if the client is a\n           Debian-based system.\n* Client - [bug] Suppressed crontab error during installation if the user\n           crontab does not exist.\n* Server - [improvement] Clears database result variable before use to provide\n           more accurate results.\n* Server - [improvement] Added Raspbian as a valid Debian-based system.\n* Server - [improvement] Added function to run remote commands via SSH or HTTP/S\n           as the server configuration case may be.\n* Client - [bug] Fixed support for non-standard server ports.\n\n3.2 (2018-10-26)\n================\n* Server - [improvement] UI enhancements.\n* Server - [bug] Fixed client interaction 500 error codes.\n* Server - [bug] Fixed user additions to include comments.\n* Server - [improvement] Add support to get server list for any module.\n* Server - [improvement] User passwords can now be set by users granted with\n           the 'User Management' privilege. (Issue #416)\n* Client - [bug] Files are now chgrp'ed if available.\n* Server - [improvement] Added support for noscroll pages.\n\n3.1.1 (2017-12-18)\n==================\n* Server - [bug] Fixed username display in the Admin Logs. (Issue #405)\n\n3.1.0 (2017-12-13)\n==================\n* Server - [improvement] Added option to skip client file checks to the\n           runRemoteCommand() function.\n* Server - [improvement] Visually show disabled form buttons.\n* Server - [improvement] Additional blocks can now be placed on the left or right\n           of the table header.\n* Server - [improvement] Moved the grab CSS/JS to the core for other modules to use.\n* Server - [improvement] fm_logs now stores the username instead of userid.\n* Server - [improvement] Added support to explode module group IDs. (Issue #375)\n* Server - [improvement] Pagination is now displayed even with no items.\n* Client - [bug] Chown directories only if they exist.\n* Server - [improvement] Popup boxes now disable body scrolling.\n\n3.0.3 (2017-10-10)\n==================\n* Server - [bug] Fixed LDAP authentication with group memberships. (Issue #392)\n* Server - [bug] Fixed PHP error. (Issue #386)\n* Server - [feature] Added support for using a proxy server. (Issue #388)\n\n3.0.2 (2017-08-07)\n==================\n* Server - [bug] Fixed table sorting.\n\n3.0.1 (2017-07-06)\n==================\n* Server - [improvement] Added module name and version to header.\n* Client - [bug] Fixed the support for non-standard ports. (Issue #382)\n* Server - [improvement] Updated German translation.\n\n3.0 (2017-06-22)\n================\n* Client - [bug] Fixed OS distro reporting for RHEL when using lsb tools. (Issue #379)\n* Server - [bug] Fixed the upgrade process.\n* Server - [feature] Added setting to change the branding logo.\n* Server - [feature] Added comment field to users.\n* Server - [improvement] Reworked the search bar for easier usage of it.\n* Server - [improvement] Database errors now get displayed if the Show Errors\n           setting is enabled.\n* Server - [improvement] Updated 404 page styling.\n* Both   - [improvement] Code clean up.\n* Both   - [improvement] Updated the error messages surrounding failed SSH\n           connections. (Issue #371)\n* Server - [improvement] CSS tweaks for Firefox compatibility.\n* Client - [bug] Client installer ensures absolute path is defined in the sudoers\n           file. (Issue #372)\n* Server - [improvement] Added locale number formatting.\n* Server - [improvement] Code changes to better reference shared classes.\n* Server - [security] Fixed an issue where unprivileged users could still make\n           changes before a forced logout.\n* Server - [improvement] Code changes to add global response error formatting.\n* Server - [improvement] Added Windows server icon for other modules to use.\n* Server - [improvement] Pagination is added to all pages.\n* Server - [bug] Fixed an issue where the Edit Profile menu option did nothing.\n* Server - [improvement] Code clean up.\n* Server - [improvement] Replaced several icons with Font Awesome fonts.\n* Server - [improvement] CSS tweaks.\n* Server - [bug] Fixed an issue where local account passwords could not be\n           changed when LDAP authentication was being used. (Issue #360)\n* Server - [feature] Added server update support via the modules page. (Issue #113)\n* Server - [improvement] Cleaned up server connection tests output.\n* Server - [improvement] Language changes.\n* Server - [bug] Fixed mysql requirement check. (result of adding #343)\n* Server - [improvement] Updated error page titles.\n* Server - [improvement] Swapped the plus sign for \"Add New\" text.\n* Server - [bug] Fixed help file with PHP 7 installations. (Issue #354)\n* Server - [improvement] Added item name to the delete confirmations. (Issue #185)\n* Server - [bug] Fixed LDAP authentication using group membership requirements\n           with Active Directory. (Issue #342)\n* Server - [bug] Fixed PHP error during installer with an empty database.\n* Server - [bug] Fixed module installation status through modules page.\n* Server - [bug] Added missing translation text and removed duplicates.\n* Server - [bug] Fixed Redhat clients only reporting 'Red' as the OS.\n* Server - [feature] Use mysqli functions where available. (Issue #343)\n* Server - [feature] Added setting to send audit logs to syslog. (Issue #326)\n\n2.3.3 (2016-10-07)\n==================\n* Server - [bug] Fixed an issue where fM would hang during the software update\n           check. (Issue #353)\n\n2.3.2 (2016-09-22)\n==================\n* Server - [bug] Fixed an issue with clients incorrectly updating on every\n           polling cycle. (Issue #348)\n\n2.3.1 (2016-08-23)\n==================\n* Server - [bug] Fixed an issue where i18n requirement checks may fail. (Issue #335)\n* Client - [bug] Fixed a PHP error in the installer.\n\n2.3 (2016-07-21)\n================\n* Server - [improvement] Added support to load any additional js files in the\n           module directory (fm-modules/(module)/js/).\n* Server - [improvement] Removed boolean params for printHeader().\n* Server - [improvement] Updated buildSelect() to allow an array of single options.\n* Server - [bug] Fixed user creations that broke in 2.2.1.\n* Server - [improvement] Made the tooltip CSS globally available.\n* Server - [improvement] Created global variable for module images directory.\n* Server - [improvement] User session timestamp gets logged and login and logout.\n* Server - [bug] Fixed PHP errors during authentication which prevented successful\n           session creation.\n* Server - [feature] Added setting to define custom login message.\n* Server - [bug] Removed an unnecessary button during installation.\n* Server - [improvement] AJAX now redirects to login page when fM and module\n           database updates are required.\n* Server - [bug] Fixed an issue where i18n requirement checks may fail.\n* Both   - [security] Improved permission support for files installed by the\n           client. (Issue #320)\n\n2.2.1 (2016-06-14)\n==================\n* Server - [bug] Fixed issue with adding users to groups. (Issue #319)\n* Server - [improvement] UTC is now an available timezone. (Issue #318)\n* Server - [improvement] Removed an unnecessary database call when determining\n           if there are any updates available.\n\n2.2 (2016-04-24)\n================\n* Client - Upgrading requires a manual installation using the steps in README.md.\n* Both   - [improvement] Cleaned up duplicate functions to simplify code.\n* Client - [feature] Added the client 'reinstall' option.\n* Client - [improvement] Output now wordwraps based on the number of columns\n           in the shell (based on $COLUMNS environment variable).\n* Server - [bug] Fixed server group config build process.\n* Server - [improvement] SSH login failure messages differentiate between login\n           failure and missing client script.\n* Server - [improvement] Updated help file.\n* Server - [improvement] CSS tweaks.\n* Client - [improvement] Silenced client install grep commands.\n* Server - [bug] Under certain browsers, the jQuery would not execute. (Issue #298)\n* Client - [improvement] SSH public keys are now stored in authorized_keys\n           instead of the deprecated authorized_keys2. (Issue #303)\n* Server - [improvement] Improved installation checks and added more messaging.\n* Server - [bug] Installation checks no longer throw a PHP fatal error when the\n           .htaccess file is missing. (Issue #306 #308)\n* Server - [improvement] Added French translation.\n* Server - [bug] No longer attempts to load hidden files.\n\n2.1.5 (2016-03-11)\n==================\n* Server - [bug] Fixed module changes. (Issue #292)\n* Server - [bug] Enclosed database references in backticks in SQL statements. (Issue #290)\n\n2.1.4 (2016-01-24)\n==================\n* Server - [bug] Fixed duplicating template user (result of adding #211).\n\n2.1.3 (2015-12-10)\n==================\n* Client - [bug] Supported sys_get_temp_dir() with PHP < 5.2.1.\n\n2.1.2 (2015-12-08)\n==================\n* Server - [bug] Fixed server config builds. (Issue #269)\n\n2.1.1 (2015-12-07)\n==================\n* Server - [bug] Fixed PHP error when changing the server status. (Issue #267)\n* Server - [bug] Clients would not update the database during installation\n           (result of adding #223).\n* Client - [bug] Installer would create the SSH key incorrectly. (Issue #236 #260)\n* Server - [bug] fM defined temporary directory was not always used.\n* Server - [improvement] Overall performance improvements. (Issue #224)\n\n2.1 (2015-12-02)\n================\n* Server - [feature] Added ability to purge logs. (Issue #212)\n* Client - [feature] Added no-sudoers client option. (Issue #221)\n* Server - [bug] Fixed Modules badge counts.\n* Server - [improvement] Minor UI edits.\n* Server - [improvement] The default Super Admin account can login even if LDAP\n           is configured.\n* Client - [bug] Ensure serial number is an integer at install. (Issue #232)\n* Both   - [feature] Added no-update client installer parameter. (Issue #223)\n* Server - [feature] Added user group support. (Issue #211)\n* Server - [improvement] Upgraded to Font Awesome 4.4.0 and changed some icons.\n* Server - [improvement] Third-party resources now load locally. (Issue #244)\n* Server - [improvement] fM upgrades now give the option to backup the database.\n* Server - [bug] Fixed server group bulk actions. (Issue #256)\n* Server - [bug] Fixed intermittent login issues. (Issue #258)\n\n2.0.3 (2015-06-29)\n==================\n* Server - [bug] Fixed LDAP Group Attribute support. (Issue #226)\n* Server - [bug] Fixed module badge counts.\n\n2.0.2 (2015-05-27)\n==================\n* Server - [bug] Fixed password reset hint text. (Issue #212)\n* Client - [bug] Cron entries are now entered with full path when installer is\n           invoked with a relative path. (Issue #216)\n* Server - [bug] Fixed user creation when php-ldap is not installed. (Issue #212)\n\n2.0.1 (2015-05-03)\n==================\n* Server - [security] Unauthorized users can no longer see the server config\n           via the preview button. (Issue #210)\n* Server - [bug] Fixed client installation output formatting.\n* Client - [bug] Sets correct file mode for sudoers files.\n* Server - [bug] Fixed CSS at login screen.\n\n2.0 (2015-04-27)\n================\n* Server - [improvement] Updated pagination handling.\n* Server - [feature] Added ability to update all servers with a single click on\n           the top menu bar. (Issue #116)\n* Server - [improvement] Improved support for Admin Tools error messages.\n* Server - [improvement] Popup boxes are now draggable.\n* Server - [feature] Added framework for record searching. (Issue #149)\n* Client - [improvement] Added support for sudoers includedir parameter and no\n           longer disables requiretty and env_reset globally.\n* Server - [improvement] Skips apache rewrite module check for CGI/FCGI\n           implementations. (Issue #91)\n* Server - [feature] FM_NO_HTACCESS is now a supported defined constant to\n           remove .htaccess requirement. (Issue #73)\n* Server - [improvement] Updated help file.\n* Server - [bug] Installer now checks to ensure the database and records already\n           exist before running. (Issue #166)\n* Server - [improvement] Remove the Admin->Users menu item when authentication\n           is not used.\n* Server - [improvement] Fixed PHP session errors when no authentication is used.\n* Server - [bug] Fixed bulk action checkbox logic.\n* Server - [bug] Fixed PHP errors during user account window when using a module\n           other than fmDNS (introduced in 1.3).\n* Server - [feature] Added i18n support. (Issue #106)\n* Server - [bug] Fixed upgrade messages after facileManager is upgraded.\n* Server - [security] Added ability to enable/disable automatic client\n           registration in the database. (Issue #122)\n* Server - [bug] Fixed PHP error at login screen when session times out.\n* Server - [improvement] Upgraded to select2 3.5.2.\n* Server - [improvement] jQuery is now used to enable/disable users.\n* Server - [improvement] The installer and upgrader received a facelift.\n* Server - [bug] Fixed an issue where user permissions could not be removed when\n           editing a user account.\n* Server - [improvement] The installer now uses checkmarks instead of text.\n* Server - [improvement] Modules can now be managed in bulk.\n* Server - [improvement] The upgrader will now run the module upgrade routines.\n* Server - [improvement] Server config build previews now display line numbers\n           and highlight lines in question.\n* Server - [feature] User accounts can now be created from a user template.\n* Server - [improvement] LDAP user template can now be undefined which will deny\n           authentication. This is to add another level of user access control.\n* Server - [improvement] The installer provides the correct error message when\n           the database connection fails.\n* Server - [improvement] The installer now works with MySQL auto_increment_offset\n           that is greater than one.\n* Server - [improvement] Swapped /tmp for sys_get_temp_dir().\n* Server - [improvement] Incorporated mod_headers to save bandwidth.\n* Server - [improvement] SSH keys can now be saved if the file already exists.\n* Server - [improvement] Admin logs are now wordwrapped if the data is too long.\n* Both   - [feature] Added ability to define the SSH user to use. (Issue #182)\n* Server - [improvement] Post-upgrade redirect goes to the dashboard instead of\n           the modules page.\n* Client - [improvement] Determines FQDN at install time. (Issue #192).\n\n1.3.1 (2014-11-10)\n==================\n* Client - [bug] Fixed issue where config file parameters are not found and an\n           empty value is returned. (Issue #163)\n* Server - [bug] Fixed database cleanup routine.\n\n1.3 (2014-09-17)\n================\n* Server - [bug] Fixed config build errors and display issues.\n* Server - Added dependency check for posix php module.\n* Server - [bug] Fixed install wizard for database checks as databases could not\n           be created through the installer. (Issue #72)\n* Server - [bug] Fixed menu badge counts.\n* Server - [feature] Added support for select2 jquery.\n* Server - [improvement] Gave the popups a facelift.\n* Server - [bug] Fixed an issue where changing personal user profile would remove\n           all user permissions.\n* Server - [improvement] Pagination is now dynamic. (Issue #85)\n* Both   - [feature] Added OS display support for Raspberry Pi. (Issue #108)\n* Server - [improvement] Added a check for the PHP filter module. (Issue #121)\n* Server - [improvement] Updated the login page.\n* Server - [bug] Fixed SSL mixed content. (Issue #131)\n* Server - [improvement] Added a check for the PHP json module. (Issue #133)\n* Server - [feature] Supports additional configuration previews. (Issue #130)\n\n1.2.3 (2014-06-04)\n==================\n* Server - [feature] Client auto upgrade minimum version are now dynamic.\n* Client - [bug] Fixed client auto upgrades. (Issue #103)\n* Client - [bug] Fixed PHP errors.\n* Server - Added dependency check for posix php module.\n\n1.2.2 (2014-05-16)\n==================\n* Both   - [bug] Fixed client upgrade errors. (Issue #94)\n\n1.2.1 (2014-05-15)\n==================\n* Both   - [bug] Fixed client upgrade versioning. (Issue #93)\n\n1.2 (2014-05-14)\n================\n* Server - Improved password strength settings description.\n* Server - Combined general and module settings in one menu.\n* Server - Added file extensions to all redirects and links.\n* Server - Changed font to Open Sans.\n* Server - CSS tweaks to improve UI on Linux systems. (Issue #86)\n* Server - [feature] Added framework for customizable UI record sorting for use\n           with all modules. (Issue #81)\n* Server - Cleaned up code.\n* Server - Help file links now open in the parent window instead of the popup.\n* Server - Created error page template.\n* Server - Added support for module options in fM options table.\n* Server - [feature] Redesigned how user capabilities are handled which also\n           supports user changes without the need for reauthentication.\n* Server - [bug] New user creations would not save the defined default module.\n* Server - Built-in users can edit more of their profile information.\n* Server - [feature] Added support for a flag to reset the authentication method\n           to 'none' in case of a lockout.\n* Server - [bug] Fixed a case where changing authentication method would throw\n           an error.\n* Both   - Added file extensions to all redirects and links.\n* Server - [feature] Redesigned menuing platform for more flexibility.  This\n           includes hiding menu items to users without proper access.\n* Server - [feature] Added functions to check for php max_input_vars. (Issue #87)\n* Server - Added help file link to issue tracker.\n\n1.1.2 (2014-04-03)\n==================\n* Server - [bug] Fixed password reset typo.\n* Server - [feature] Added favicon.\n* Server - [feature] Improved rewrite check. (Issue #76)\n\n1.1.1 (2014-03-24)\n==================\n* Server - [feature] Databases can now be created outside of the\n           installer. (Issue #72)\n* Server - Improved installer and upgrader error handling.\n* Server - [feature] Added function comments.\n* Server - [feature] Modules can now be uninstalled if they are deactivated and\n           there is an upgrade available.\n\n1.1 (2014-03-18)\n================\n* Server - [feature] Updated menu navigation which also added visual badges that\n           require user attention.\n* Server - [feature] Updated some visual effects.\n* Server - [feature] Client installs now ensure the module is active before\n           continuing the installation process.\n* Client - [feature] Detects if PHP CGI is running instead of CLI. (Issue #45)\n* Server - [feature] Added scroll to top link.\n* Server - [feature] Checks for the required .htaccess file and attempts to create\n           it if missing.\n* Server - [feature] Added ability to update to non-stable releases.\n* Server - [feature] Updated settings pages jquery.\n* Both   - [feature] Added support to auto-update client files. (Issue #53)\n* Client - [feature] Added an argument to display the version.\n\n1.0.2 (2013-12-31)\n==================\n* Server - [bug] Fixed issue where installer would report inability to write\n           the configuration file when the server directory had the\n           appropriate permissions.\n* Both   - [bug] Fixed an issue where client installation would fail when \n           checking account details.\n\n1.0.1 (2013-12-24)\n==================\n* Client - [bug] Added more error handling in isolated install issues.\n* Server - [bug] Enabled update checks by default.\n\n1.0 (2013-12-16)\n================\n* Server - Removed enable/disable option for template user accounts.\n* Server - [bug] Can no longer delete the active template user account.\n* Server - Updated css and jquery animations.\n* Server - [feature] User password strength is now selectable in the settings.\n* Server - Improved logging of settings changes.\n* Server - [feature] Customizable app update checks.\n* Server - CSS tweaks.\n* Server - [feature] fM software update checks are now customizable.\n* Server - [feature] User accounts can now set their default module to use.\n* Server - [bug] Fixed an issue where clients would report as installed\n           when the installation was not complete.\n\n1.0-rc6-1 (2013-11-07)\n======================\n* Server - [bug] Fixed an issue were servers could not be added. (Issue #34)\n\n1.0-rc6 (2013-11-06)\n====================\n* Server - [feature] Server config builds now prompt for confirmation.\n* Server - [bug] Fixed installer password validity background display.\n* Server - [feature] Serial number generation now checks all module server tables\n           for unique values.\n* Server - [bug] Fixed some PHP errors.\n* Server - [bug] Ensures current module is active.\n* Client - [feature] Added install support for multiple modules.\n* Client - Improved Linux distro detection.\n\n1.0-rc5 (2013-10-16)\n====================\n* Server - [bug] Code clean up.\n* Server - [bug] Changed date items to date type.\n* Client - [bug] Fixed client sudoers line.\n* Server - [feature] Added more graphical elements.\n\n1.0-rc4 (2013-10-14)\n====================\n* Server - [bug] Fixed issue where modules could be 'upgraded' to an older version.\n* Server - [bug] Fixed issue with admin log searching.\n* Server - [feature] Module upgrades now inform user to upgrade client files\n           upon completion. (Issue #23)\n* Server - [feature] Added support to show/hide application errors.\n\n1.0-rc3 (2013-09-30)\n====================\n* Server - [bug] Improved validateNumber() javascript function.\n* Server - [feature] Added option to enforce HTTPS.\n\n1.0-rc2 (2013-09-18)\n====================\n* Server - [feature] Integrated installation and upgrade instructions into\n           the README. (Issue #18)\n* Server - [feature] Added additional OS-specific installation instructions.\n           (Issue #1)\n* Server - [feature] Updated some jquery functions.\n\n1.0-rc1 (2013-09-13)\n====================\n* Server - [feature] Added ability to change the displayed datetime format and\n           set the timezone.\n* Server - [feature] Added ad-hoc database backup functionality.\n* Server - [feature] Added LDAP authentication support. (Issue #10)\n* Server - [feature] Updated help files.\n\n1.0-b15 (2013-09-04)\n====================\n* Server - [feature] Added search capabilities to the admin logs page. (Issue #3)\n\n1.0-b14 (2013-09-03)\n====================\n* Server - [feature] Minor change to forgotton password email.\n* Server - [bug] Fixed an issue with module upgrades.\n* Server - [feature] Added more error checking.\n\n1.0-b13 (2013-08-28)\n====================\n* Server - [feature] Added Admin->Settings menu item to set authentication and\n           mailing methods.\n* Server - [feature] Can now disable authentication thus using only the default\n           super-admin user account.\n* Server - [feature] Set several tables to INNODB.\n* Server - [feature] Added support to email password reset links. (Issue #12)\n* Server - [feature] Added support for modules to have more granular user\n           permissions. (Issue #7)\n\n1.0-b12 (2013-08-23)\n====================\n* Server - [bug] Fixed database clean up bug.\n* Server - [feature] Supports pressing the ESC button to cancel a window.\n* Server - [bug] Fixed module installation output.\n* Server - [feature] Replaced logout button with account menu.\n* Server - [feature] Redesigned user management page.\n* Server - [security] Fixed an issue where user permissions could be removed\n           unintentionally during a password change.\n* Server - [security] Super-admins can no longer be demoted by non-super-admins\n           nor themselves. (Issue #11)\n* Server - [feature] Added option to enforce a user password change upon login.\n\n1.0-b11 (2013-08-21)\n====================\n* Server - [feature] Help now pops out.\n\n1.0-b10 (2013-08-14)\n====================\n* Server - [bug] Fixed post-upgrade redirection.\n\n1.0-b9 (2013-08-14)\n===================\n* Server - [feature] Decreased the update check interval.\n* Client - [feature] Added PHP version check.\n\n1.0-b7 (2013-08-13)\n===================\n* Server - [feature] Updated version checks.\n* Server - [bug] Improved installation to prevent duplicate entries.\n* Server - [feature] Improved application requirement checks. (Issue #1)\n* Server - [feature] Improved user creation and modification.\n\n1.0-b6 (2013-08-13)\n===================\n* Server - [feature] Added mod_rewrite check. (Issue #1)\n* Server - [bug] Fixed relative pathing issue.\n* Server - [feature] User no longer gets redirected to the dashboard after\n           authentication.\n\n1.0-b5 (2013-08-10)\n===================\n* Server - [feature] Added module version checks.\n* Server - [feature] Improved upgrade process.\n\n1.0-b4 (2013-08-09)\n===================\n* Initial release.\n", "<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n*/\n\nclass fm_login {\n\t\n\t/**\n\t * Displays the login form\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @return string\n\t */\n\tfunction printLoginForm() {\n\t\tglobal $fm_name;\n\t\t\n\t\tprintHeader(_('Login'), 'login');\n\t\t\n\t\t/** Cannot change password without mail_enable defined */\n\t\t$mail_enable = (getOption('fm_db_version') >= 18) ? getOption('mail_enable') : false;\n\t\t$auth_method = (getOption('fm_db_version') >= 18) ? getOption('auth_method') : false;\n\t\t$forgot_link = ($mail_enable && $auth_method == 1) ? sprintf('<p id=\"forgotton_link\"><a href=\"?forgot_password\">%s</a></p>', _('Forgot your password?')) : null;\n\t\t\n\t\t$branding_logo = getBrandLogo();\n\t\t\n\t\t$login_message = getOption('login_message');\n\t\tif ($login_message) {\n\t\t\t$login_message = '<p class=\"success\">' . $login_message . '</p>';\n\t\t}\n\n\t\tprintf('<form id=\"loginform\" action=\"%1$s\" method=\"post\">\n\t\t<div id=\"fm-branding\">\n\t\t\t<img src=\"%2$s\" /><span>%3$s</span>\n\t\t</div>\n\t\t<div id=\"login_form\">\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<div class=\"input-wrapper\">\n\t\t\t\t\t\t<input type=\"text\" size=\"25\" name=\"username\" id=\"username\" placeholder=\"%4$s\" />\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<div class=\"input-wrapper\">\n\t\t\t\t\t\t<input type=\"password\" size=\"25\" name=\"password\" id=\"password\" placeholder=\"%5$s\" />\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td><input name=\"submit\" id=\"loginbtn\" type=\"submit\" value=\"%3$s\" class=\"button\" /></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t%6$s\n\t\t<div id=\"message\">%7$s</div>\n\t\t</form>\n\t\t</div>', $_SERVER['REQUEST_URI'], $branding_logo, _('Login'), _('Username'),\n\t\t\t\t_('Password'), $forgot_link, $login_message);\n\t\t\n\t\texit(printFooter());\n\t}\n\t\n\t\n\t/**\n\t * Display password reset user form.\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $message Message to display to the user\n\t * @return string\n\t */\n\tfunction printUserForm($message = null) {\n\t\t/** Should not be here if there is no mail_enable defined or if not using builtin auth */\n\t\tif (!getOption('mail_enable') || getOption('auth_method') != 1) {\n\t\t\theader('Location: ' . $GLOBALS['RELPATH']);\n\t\t\texit;\n\t\t}\n\n\t\tglobal $fm_name;\n\t\tprintHeader(_('Password Reset'), 'login');\n\t\t\n\t\t$branding_logo = getBrandLogo();\n\t\t\n\t\tprintf('<form id=\"loginform\" action=\"%s?forgot_password\" method=\"post\">\n\t\t<input type=\"hidden\" name=\"reset_pwd\" value=\"1\" />\n\t\t<div id=\"fm-branding\">\n\t\t\t<img src=\"%s\" /><span>%s</span>\n\t\t</div>\n\t\t<div id=\"login_form\">\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<div class=\"input-wrapper\">\n\t\t\t\t\t\t<input type=\"text\" name=\"user_login\" id=\"user_login\" placeholder=\"%s\" style=\"width: 400px;\" />\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td><input name=\"submit\" id=\"forgotbtn\" type=\"submit\" value=\"%s\" class=\"button\" /></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<p id=\"forgotton_link\"><a href=\"%s\">&larr; %s</a></p>\n\t\t<div id=\"message\">%s</div>\n\t\t</form>\n\t\t</div>', $_SERVER['PHP_SELF'], $branding_logo, _('Reset Password'), _('Username'),\n\t\t\t\t_('Submit'), $GLOBALS['RELPATH'], _('Login form'), $message);\n\t}\n\t\n\t\t\n\t/**\n\t * Process password reset user form.\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $user_login Username to authenticate\n\t * @return boolean\n\t */\n\tfunction processUserPwdResetForm($user_login = null) {\n\t\tglobal $fmdb;\n\t\t\n\t\tif (empty($user_login)) return;\n\t\t\n\t\t$user_info = getUserInfo(sanitize($user_login), 'user_login');\n\t\t\n\t\t/** If the user is not found, just return lest we give away valid user accounts */\n\t\tif ($user_info == false) return true;\n\t\t\n\t\t$fm_login = $user_info['user_id'];\n\t\t$uniqhash = genRandomString(mt_rand(30, 50));\n\t\t\n\t\t$query = \"INSERT INTO fm_pwd_resets VALUES ('$uniqhash', '$fm_login', \" . time() . \")\";\n\t\t$fmdb->query($query);\n\t\t\n\t\tif (!$fmdb->rows_affected) return false;\n\t\t\n\t\t/** Mail the reset link */\n\t\t$mail_enable = getOption('mail_enable');\n\t\tif ($mail_enable) {\n\t\t\t$result = $this->mailPwdResetLink($fm_login, $uniqhash);\n\t\t\tif ($result !== true) {\n\t\t\t\t$query = \"DELETE FROM fm_pwd_resets WHERE pwd_id='$uniqhash' AND pwd_login='$fm_login'\";\n\t\t\t\t$fmdb->query($query);\n\t\t\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * Checks if the user is authenticated\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @return boolean\n\t */\n\tfunction isLoggedIn() {\n\t\tglobal $fm_name;\n\t\t\n\t\tif (defined('INSTALL')) return false;\n\t\t\n\t\t/** No auth_method defined */\n\t\tif (getOption('fm_db_version') >= 18) {\n\t\t\tif (!getOption('auth_method')) {\n\t\t\t\tif (!isset($_COOKIE['fmid'])) {\n\t\t\t\t\t@session_start();\n\t\n\t\t\t\t\t$_SESSION['user']['logged_in'] = true;\n\t\t\t\t\t$_SESSION['user']['id'] = 1;\n\t\t\t\t\t$_SESSION['user']['account_id'] = 1;\n\t\t\n\t\t\t\t\t$modules = getActiveModules(true);\n\t\t\t\t\tif (!isset($_SESSION['module'])) {\n\t\t\t\t\t\t$_SESSION['module'] = (is_array($modules) && count($modules)) ? $modules[0] : $fm_name;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tsetcookie('fmid', session_id(), strtotime('+1 year'));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsession_set_cookie_params(strtotime('+1 year'));\n\t\t\t\tif (!empty($_COOKIE['fmid'])) {\n\t\t\t\t\t@session_id($_COOKIE['fmid']);\n\t\t\t\t\t@session_start();\n\t\t\t\t}\n\t\t\t\tsession_write_close();\n\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t/** Auth method defined so let's validate */\n\t\tif (isset($_COOKIE['fmid'])) {\n\t\t\t$fmid = $_COOKIE['fmid'];\n\t\t\t\t\n\t\t\t/** Init the session. */\n\t\t\tsession_set_cookie_params(strtotime('+1 week'));\n\t\t\tsession_id($fmid);\n\t\t\t@session_start();\n\t\t\t\t\n\t\t\t/** Check if they're logged in. */\n\t\t\tif (isset($_SESSION['user']['logged_in']) && $_SESSION['user']['logged_in']) {\n\t\t\t\tif (!isset($_SESSION['user']['last_login'])) {\n\t\t\t\t\t$_SESSION['user']['last_login'] = 0;\n\t\t\t\t}\n\t\t\t\t/** Set the last login info */\n\t\t\t\tif (strtotime(\"-1 hour\") > $_SESSION['user']['last_login']) {\n\t\t\t\t\t$_SESSION['user']['last_login'] = strtotime(\"-15 minutes\");\n\t\t\t\t\t$_SESSION['user']['ipaddr'] = isset($_SERVER['REMOTE_HOST']) ? $_SERVER['REMOTE_HOST'] : $_SERVER['REMOTE_ADDR'];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/** Should the user be logged in? */\n\t\t\t\tif (getNameFromID($_SESSION['user']['id'], 'fm_users', 'user_', 'user_id', 'user_status') != 'active') {\n\t\t\t\t\tsession_write_close();\n\t\t\t\t\theader('Location: ' . $GLOBALS['RELPATH'] . '?logout');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tsession_write_close();\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tsession_write_close();\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Do the authentication\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $user_login Username to authenticate\n\t * @param string $user_password Password to authenticate with\n\t * @return boolean\n\t */\n\tfunction checkPassword($user_login, $user_password) {\n\t\tglobal $fmdb, $__FM_CONFIG, $fm_name;\n\t\t\n\t\tif (empty($user_login) || empty($user_password)) return false;\n\t\t\n\t\t/** Built-in authentication */\n\t\t$fm_db_version = getOption('fm_db_version');\n\t\t$auth_method = ($fm_db_version >= 18) ? getOption('auth_method') : true;\n\t\tif ($auth_method) {\n\t\t\t/** Use Builtin Auth when Default Auth Method is LDAP but user is defined with 'facileManager/Builtin' */\n\t\t\t$result = $fmdb->query(\"SELECT * FROM `fm_users` WHERE `user_login` = '$user_login' and `user_auth_type`=1 and `user_status`='active'\");\n\t\t\tif (is_array($fmdb->last_result) && $fmdb->last_result[0]->user_login == $user_login) {\n\t\t\t\t$auth_method = 1;\n\t\t\t}\n\n\t\t\t/** Builtin Authentication */\n\t\t\tif ($auth_method == 1) {\n\t\t\t\tif ($fm_db_version >= 18) {\n\t\t\t\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_auth_type`=1 AND `user_template_only`='no' AND `user_login`='$user_login'\");\n\t\t\t\t} else {\n\t\t\t\t\t/** Old auth */\n\t\t\t\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_login`='$user_login' AND `user_password`='$user_password'\");\n\t\t\t\t}\n\t\t\t\tif (!$fmdb->num_rows) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\t$user = $fmdb->last_result[0];\n\t\t\t\t\t\n\t\t\t\t\t/** Check password */\n\t\t\t\t\tif ($user->user_password[0] == '*') {\n\t\t\t\t\t\t/** Old MySQL hashing that needs to change */\n\t\t\t\t\t\tif ($user->user_password != '*' . strtoupper(sha1(sha1($user_password, true)))) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresetPassword($user_login, $user_password);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/** PHP hashing */\n\t\t\t\t\t\tif (!password_verify($user_password, $user->user_password)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t/** Enforce password change? */\n\t\t\t\t\tif ($fm_db_version >= 15) {\n\t\t\t\t\t\tif ($user->user_force_pwd_change == 'yes') {\n\t\t\t\t\t\t\t$pwd_reset_query = \"SELECT * FROM `fm_pwd_resets` WHERE `pwd_login`={$user->user_id} ORDER BY `pwd_timestamp` LIMIT 1\";\n\t\t\t\t\t\t\t$fmdb->get_results($pwd_reset_query);\n\t\t\t\t\t\t\tif ($fmdb->num_rows) {\n\t\t\t\t\t\t\t\t$reset = $fmdb->last_result[0];\n\t\t\t\t\t\t\t\treturn array($reset->pwd_id, $user_login);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\t$this->setSession($user);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t/** LDAP Authentication */\n\t\t\t} else {\n\t\t\t\treturn $this->doLDAPAuth($user_login, $_POST['password']);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t\n\t/**\n\t * Update the session in the db\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $fm_login Username to update the database with\n\t * @return null\n\t */\n\tfunction updateSessionDB($fm_login) {\n\t\tglobal $fmdb;\n\t\t\n\t\t$query = \"UPDATE fm_users set user_ipaddr='{$_SESSION['user']['ipaddr']}', user_last_login=\" . time() . \" WHERE `user_login`='\". $fm_login .\"' AND `user_status`!='deleted'\";\n\t\t$fmdb->query($query);\n\t}\n\n\n\t/**\n\t * Logout the user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @return null\n\t */\n\tfunction logout() {\n\t\tif (isset($_COOKIE['fmid'])) {\n\t\t\t$fmid = $_COOKIE['fmid'];\n\t\t\t\n\t\t\t// Init the session.\n\t\t\tsession_id($fmid);\n\t\t\t@session_start();\n\t\t\tif (isset($_SESSION['user']['name'])) {\n\t\t\t\t$this->updateSessionDB($_SESSION['user']['name']);\n\t\t\t}\n\t\t\t@session_unset();\n\t\t\tsetcookie('fmid', '');\n\t\t\t@session_destroy();\n\t\t\tunset($_COOKIE['fmid']);\n\t\t}\n\t}\n\t\n\t/**\n\t * Mail the user password reset link\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $fm_login Username to send the mail to\n\t * @param string $uniq_hash Unique password reset hash\n\t * @return boolean\n\t */\n\tfunction mailPwdResetLink($fm_login, $uniq_hash) {\n\t\tglobal $fm_name;\n\t\t\n\t\t$user_info = getUserInfo($fm_login);\n\t\tif (isEmailAddressValid($user_info['user_email']) === false) return _('There is no valid e-mail address associated with this user.');\n\t\t\n\t\t$subject = sprintf(_('%s Password Reset'), $fm_name);\n\t\t$from = getOption('mail_from');\n\t\t\n\t\treturn sendEmail($user_info['user_email'], $subject, $this->buildPwdResetEmail($user_info, $uniq_hash, true, $subject, $from), $this->buildPwdResetEmail($user_info, $uniq_hash, false));\n\t}\n\t\n\t/**\n\t * Builds the user password reset link email\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param array $user_info User information to build the email from\n\t * @param string $uniq_hash Unique password reset hash\n\t * @param boolean $build_html Whether or not to build a html version\n\t * @param string $title HTML Email title\n\t * @param string $from_address Displayed sent from address\n\t * @return string\n\t */\n\tfunction buildPwdResetEmail($user_info, $uniq_hash, $build_html = true, $title = null, $from_address = null) {\n\t\tglobal $fm_name, $__FM_CONFIG;\n\t\t\n\t\tif ($build_html) {\n\t\t\t$branding_logo = getBrandLogo();\n\t\t\tif ($GLOBALS['RELPATH'] != '/') {\n\t\t\t\t$branding_logo = str_replace($GLOBALS['RELPATH'], '', $branding_logo);\n\t\t\t}\n\t\t\t$branding_logo = $GLOBALS['FM_URL'] . str_replace('//', '/', $branding_logo);\n\t\t\t\n\t\t\t$body = <<<BODY\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\t\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" style=\"background-color: #eeeeee;\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n<title>$title</title>\n</head>\n<body style=\"background-color: #eeeeee; font: 13px 'Lucida Grande', 'Lucida Sans Unicode', Tahoma, Verdana, sans-serif; margin: 1em auto; min-width: 600px; max-width: 600px; padding: 20px; padding-bottom: 50px; -webkit-text-size-adjust: none;\">\n<div style=\"margin-bottom: -8px;\">\n<img src=\"$branding_logo\" style=\"padding-left: 17px;\" />\n<span style=\"font-size: 16pt; font-weight: bold; position: relative; top: -16px; margin-left: 10px;\">$fm_name</span>\n</div>\n<div id=\"shadow\" style=\"-moz-border-radius: 0% 0% 100% 100% / 0% 0% 8px 8px; -webkit-border-radius: 0% 0% 100% 100% / 0% 0% 8px 8px; border-radius: 0% 0% 100% 100% / 0% 0% 8px 8px; -moz-box-shadow: rgba(0,0,0,.30) 0 2px 3px !important; -webkit-box-shadow: rgba(0,0,0,.30) 0 2px 3px !important; box-shadow: rgba(0,0,0,.30) 0 2px 3px !important;\">\n<div id=\"container\" style=\"background-color: #fff; min-height: 200px; margin-top: 1em; padding: 0 1.5em .5em; border: 1px solid #fff; -webkit-border-radius: 5px; -moz-border-radius: 5px; border-radius: 5px; -webkit-box-shadow: inset 0 2px 1px rgba(255,255,255,.97) !important; -moz-box-shadow: inset 0 2px 1px rgba(255,255,255,.97) !important; box-shadow: inset 0 2px 1px rgba(255,255,255,.97) !important;\">\n<p>Hi {$user_info['user_login']},</p>\n<p>You (or somebody else) has requested a link to reset your $fm_name password.</p>\n<p>If you don't want to reset your password, then you can ignore this message.</p>\n<p>To reset your password, click the following link:<br />\n<a href=\"{$GLOBALS['FM_URL']}password_reset.php?key=$uniq_hash&login={$user_info['user_login']}\">{$GLOBALS['FM_URL']}password_reset.php?key=$uniq_hash&login={$user_info['user_login']}</a></p>\n<p>This link expires in {$__FM_CONFIG['clean']['time']}.</p>\n</div>\n</div>\n<p style=\"font-size: 10px; color: #888; text-align: center;\">$fm_name | $from_address</p>\n</body>\n</html>\nBODY;\n\t\t} else {\n\t\t\t$body = sprintf('Hi %s,\n\nYou (or somebody else) has requested a link to reset your %s password.\n\nIf you don\\'t want to reset your password, then you can ignore this message.\n\nTo reset your password, click the following link:\n\n%s\n\nThis link expires in %s.',\n\t\t$user_info['user_login'], $fm_name,\n\t\t\"{$GLOBALS['FM_URL']}password_reset.php?key=$uniq_hash&login={$user_info['user_login']}\",\n\t\t$__FM_CONFIG['clean']['time']);\n\t\t}\n\t\t\n\t\treturn $body;\n\t}\n\t\n\t/**\n\t * Sets the session variables for the authenticated user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param object $user User information to create session variables from\n\t * @return null\n\t */\n\tfunction setSession($user) {\n\t\tglobal $fm_name;\n\t\t\n\t\t@session_start();\n\t\tsession_regenerate_id(true);\n\t\t$_SESSION['user']['logged_in'] = true;\n\t\t$_SESSION['user']['id'] = $user->user_id;\n\t\t$_SESSION['user']['name'] = $user->user_login;\n\t\t$_SESSION['user']['last_login'] = $user->user_last_login;\n\t\t$_SESSION['user']['account_id'] = $user->account_id;\n\t\t$_SESSION['user']['ipaddr'] = isset($_SERVER['REMOTE_HOST']) ? $_SERVER['REMOTE_HOST'] : $_SERVER['REMOTE_ADDR'];\n\t\t\n\t\t/** Upgrade compatibility */\n\t\tif (getOption('fm_db_version') < 32) $_SESSION['user']['fm_perms'] = $user->user_perms;\n\n\t\tsetUserModule($user->user_default_module);\n\t\tsetcookie('fmid', session_id(), strtotime('+1 week'));\n\t\t$this->updateSessionDB($_SESSION['user']['name']);\n\t\tsession_write_close();\n\t}\n\t\n\t\n\t/**\n\t * Performs the LDAP authentication procedure\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $username Username to authenticate\n\t * @param string $password Username to authenticate with\n\t * @return boolean\n\t */\n\tfunction doLDAPAuth($username, $password) {\n\t\tglobal $__FM_CONFIG, $fmdb;\n\n\t\t/** Get LDAP variables */\n\t\tif (empty($ldap_server))          $ldap_server          = getOption('ldap_server');\n\t\tif (empty($ldap_port))            $ldap_port            = getOption('ldap_port');\n\t\tif (empty($ldap_port_ssl))        $ldap_port_ssl        = getOption('ldap_port_ssl');\n\t\tif (empty($ldap_version))         $ldap_version         = getOption('ldap_version');\n\t\tif (empty($ldap_encryption))      $ldap_encryption      = getOption('ldap_encryption');\n\t\tif (empty($ldap_cert_file))       $ldap_cert_file       = getOption('ldap_cert_file');\n\t\tif (empty($ldap_ca_cert_file))    $ldap_ca_cert_file    = getOption('ldap_ca_cert_file');\n\t\tif (empty($ldap_referrals))       $ldap_referrals       = getOption('ldap_referrals');\n\t\tif (empty($ldap_dn))              $ldap_dn              = getOption('ldap_dn');\n\t\tif (empty($ldap_group_require))   $ldap_group_require   = getOption('ldap_group_require');\n\t\tif (empty($ldap_group_dn))        $ldap_group_dn        = getOption('ldap_group_dn');\n\t\tif (empty($ldap_group_attribute)) $ldap_group_attribute = getOption('ldap_group_attribute');\n\t\tif (empty($ldap_group_search_dn)) $ldap_group_search_dn = getOption('ldap_group_search_dn');\n\n\t\t$ldap_dn = str_replace('<username>', $username, $ldap_dn);\n\n\t\t/** Set default ports if none specified */\n\t\tif (!$ldap_port) $ldap_port = 389;\n\t\tif (!$ldap_port_ssl) $ldap_port_ssl = 636;\n\n\t\t/** Test connectivity to ldap server */\n\t\t$socket_test_result = ($ldap_encryption == $__FM_CONFIG['options']['ldap_encryption'][0]) ? socketTest($ldap_server, $ldap_port, 5) : socketTest($ldap_server, $ldap_port_ssl, 5);\n\t\tif (!$socket_test_result) return _('The authentication server is currently unavailable. Please try again later.');\n\n\t\tif ($ldap_encryption == 'SSL') {\n\t\t\tif ($ldap_cert_file) {\n\t\t\t\t@ldap_set_option(NULL, LDAP_OPT_X_TLS_CERTFILE, $ldap_cert_file);\n\t\t\t}\n\t\t\tif ($ldap_ca_cert_file) {\n\t\t\t\t@ldap_set_option(NULL, LDAP_OPT_X_TLS_CACERTFILE, $ldap_ca_cert_file);\n\t\t\t}\n\t\t\t$ldap_connect = @ldap_connect('ldaps://' . $ldap_server, $ldap_port_ssl);\n\t\t} else {\n\t\t\t$ldap_connect = @ldap_connect($ldap_server, $ldap_port);\n\t\t}\n\t\t\n\t\tif ($ldap_connect) {\n\t\t\t/** Set protocol version */\n\t\t\tif (!@ldap_set_option($ldap_connect, LDAP_OPT_PROTOCOL_VERSION, $ldap_version)) {\n\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t/** Set referrals */\n\t\t\tif(!@ldap_set_option($ldap_connect, LDAP_OPT_REFERRALS, $ldap_referrals)) {\n\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t/** Start TLS if requested */\n\t\t\tif ($ldap_encryption == 'TLS') {\n\t\t\t\tif (!@ldap_start_tls($ldap_connect)) {\n\t\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$ldap_bind = @ldap_bind($ldap_connect, $ldap_dn, $password);\n\t\t\t\n\t\t\tif ($ldap_bind) {\n\t\t\t\tif ($ldap_group_require) {\n\t\t\t\t\tif (strpos($ldap_dn, '@') !== false) {\n\t\t\t\t\t\tif (isset($ldap_group_search_dn) && !empty($ldap_group_search_dn)) {\n\t\t\t\t\t\t\t$ldap_dn = $ldap_group_search_dn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/** Convert AD ldap_dn to real ldap_dn */\n\t\t\t\t\t\t\t$ldap_dn_parts = explode('@', $ldap_dn);\n\t\t\t\t\t\t\t$ldap_dn = 'dc=' . join(',dc=', explode('.', $ldap_dn_parts[1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t/** Process AD group membership */\n\t\t\t\t\t\t$ldap_group_response = $this->checkGroupMembership($ldap_connect, $this->getDN($ldap_connect, $username, $ldap_dn), $ldap_group_dn, $ldap_group_attribute);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/** Process LDAP group membership */\n\t\t\t\t\t\t$ldap_group_response = @ldap_compare($ldap_connect, $ldap_group_dn, $ldap_group_attribute, $username);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ($ldap_group_response !== true) {\n\t\t\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/** Get user permissions from database */\n\t\t\t\t$fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_auth_type`=2 AND `user_template_only`='no' AND `user_login`='$username'\");\n\t\t\t\tif (!$fmdb->num_rows) {\n\t\t\t\t\tif (!$this->createUserFromTemplate($username)) {\n\t\t\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$this->setSession($fmdb->last_result[0]);\n\n\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\t/** Close LDAP connection */\n\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t\n\t/**\n\t * Creates a LDAP user from the defined template user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $username Username to create\n\t * @return boolean\n\t */\n\tfunction createUserFromTemplate($username) {\n\t\tglobal $fmdb;\n\t\t\n\t\t$template_user_id = getOption('ldap_user_template');\n\t\t\n\t\t/** User does not exist in database - get the template user */\n\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_id` = \" . $template_user_id);\n\t\tif (!$fmdb->num_rows) return false;\n\t\t\n\t\t/** Attempt to add the new LDAP user to the database based on the template */\n\t\t$fmdb->query(\"INSERT INTO `fm_users` (`account_id`,`user_login`, `user_password`, `user_email`, `user_default_module`, `user_auth_type`, `user_caps`) \n\t\t\t\t\tSELECT `account_id`, '$username', '', '', `user_default_module`, 2, `user_caps` from `fm_users` WHERE `user_id`=\" . $template_user_id);\n\t\tif (!$fmdb->rows_affected) return false;\n\t\t\n\t\t/** Get the user results now */\n\t\t$fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_auth_type`=2 AND `user_template_only`='no' AND `user_login`='$username'\");\n\t\tif (!$fmdb->num_rows) return false;\n\t\t\n\t\treturn true;\n\t}\n\n\n\t/**\n\t * Closes a LDAP resource\n\t *\n\t * @since 3.0\n\t * @package facileManager\n\t *\n\t * @param resource $ldap_connect Resource to close\n\t * @return boolean\n\t */\n\tprivate function closeLDAPConnect($ldap_connect) {\n\t\tif (is_resource($ldap_connect)) {\n\t\t\t@ldap_close($ldap_connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Gets the DN of an account name\n\t * (based on user comment from http://php.net/manual/en/ref.ldap.php#99347)\n\t *\n\t * @since 3.0\n\t * @package facileManager\n\t *\n\t * @param resource $ldap_connect Resource to use\n\t * @param string $samaccountname SAM Account name to search for\n\t * @param string $basedn Base DN to use\n\t * @return boolean\n\t */\n\tprivate function getDN($ldap_connect, $samaccountname, $basedn) {\n\t\t$attributes = array('dn');\n\t\t$result = ldap_search($ldap_connect, $basedn,\n\t\t\t\"(samaccountname={$samaccountname})\", $attributes);\n\t\tif ($result === false) return '';\n\t\t$entries = ldap_get_entries($ldap_connect, $result);\n\t\treturn ($entries['count'] > 0) ? $entries[0]['dn'] : '';\n\t}\n\t\n\t\n\t/**\n\t * Checks recursive group membership of the user\n\t * (based on user comment from http://php.net/manual/en/ref.ldap.php#99347)\n\t *\n\t * @since 3.0\n\t * @package facileManager\n\t *\n\t * @param resource $ldap_connect Resource to use\n\t * @param string $userdn\n\t * @param string $groupdn\n\t * @param string $ldap_group_attribute\n\t * @return boolean\n\t */\n\tprivate function checkGroupMembership($ldap_connect, $userdn, $groupdn, $ldap_group_attribute) {\n\t\t$result = ldap_read($ldap_connect, $userdn, '(objectclass=*)', array($ldap_group_attribute));\n\t\tif ($result === false) return false;\n\t\t\n\t\t$entries = ldap_get_entries($ldap_connect, $result);\n\t\tif ($entries['count'] <= 0) return false;\n\t\t\n\t\tif (empty($entries[0][$ldap_group_attribute])) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor ($i = 0; $i < $entries[0][$ldap_group_attribute]['count']; $i++) {\n\t\t\t\tif ($entries[0][$ldap_group_attribute][$i] == $groupdn) return true;\n\t\t\t\telseif ($this->checkGroupMembership($ldap_connect, $entries[0][$ldap_group_attribute][$i], $groupdn, $ldap_group_attribute)) return true;\n\t\t\t};\n\t\t};\n\t\treturn false;\n\t}\n\t\n\t\n\t/**\n\t * Authenticates the provided API token\n\t *\n\t * @since 4.0\n\t * @package facileManager\n\t *\n\t * @param string $token API key\n\t * @param string $secret API secret key\n\t * @return boolean\n\t */\n\tfunction doAPIAuth($token, $secret) {\n\t\tglobal $fmdb;\n\n\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_keys` WHERE `key_status`='active' AND `key_token`='$token' AND `account_id`='\" . getAccountID($_POST['AUTHKEY']) . \"'\");\n\t\tif (!$fmdb->num_rows) {\n\t\t\treturn false;\n\t\t}\n\t\t$apikey = $fmdb->last_result[0];\n\t\t\n\t\t/** Check token secret */\n\t\t/** PHP hashing */\n\t\tif (!password_verify($secret, $apikey->key_secret)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_template_only`='no' AND `user_id`=\" . $apikey->user_id . \" AND `account_id`='\" . getAccountID($_POST['AUTHKEY']) . \"'\");\n\t\tif (!$fmdb->num_rows) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->setSession($fmdb->last_result[0]);\n\n\t\treturn true;\n\t}\n\t\n}\n\nif (!isset($fm_login))\n\t$fm_login = new fm_login();\n\n?>\n", "<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n*/\n\nclass fm_users {\n\t\n\t/**\n\t * Displays the user list\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction rows($result, $type, $page, $total_pages) {\n\t\tglobal $fmdb;\n\t\t\n\t\t$num_rows = $fmdb->num_rows;\n\t\t$results = $fmdb->last_result;\n\n\t\t$start = $_SESSION['user']['record_count'] * ($page - 1);\n\t\techo displayPagination($page, $total_pages);\n\n\t\t$table_info = array(\n\t\t\t\t\t\t'class' => 'display_results sortable',\n\t\t\t\t\t\t'id' => 'table_edits',\n\t\t\t\t\t\t'name' => 'users'\n\t\t\t\t\t);\n\t\t$title_array[] = array('class' => 'header-tiny header-nosort');\n\n\t\tif ($type == 'users') {\n\t\t\t$title_array[] = array('title' => _('Login'), 'rel' => 'user_login');\n\t\t\tarray_push($title_array,\n\t\t\t\t\tarray('title' => _('Last Session Date'), 'rel' => 'user_last_login'),\n\t\t\t\t\tarray('title' => _('Last Session Host'), 'class' => 'header-nosort'),\n\t\t\t\t\tarray('title' => _('Authenticate With'), 'class' => 'header-nosort'),\n\t\t\t\t\tarray('title' => _('Comment'), 'class' => 'header-nosort'));\n\t\t} elseif ($type == 'groups') {\n\t\t\tarray_push($title_array,\n\t\t\t\tarray('title' => _('Group Name'), 'rel' => 'group_name'),\n\t\t\t\tarray('title' => _('Group Members'), 'class' => 'header-nosort'),\n\t\t\t\tarray('title' => _('Comment'), 'class' => 'header-nosort'));\n\t\t} elseif ($type == 'keys') {\n\t\t\tarray_push($title_array,\n\t\t\t\tarray('title' => _('Key'), 'rel' => 'key_token'));\n\t\t\tif (currentUserCan('manage_users')) {\n\t\t\t\tarray_push($title_array,\n\t\t\t\t\tarray('title' => _('User'), 'rel' => 'user_id'));\t\n\t\t\t}\n\t\t}\n\t\t$title_array[] = array('title' => _('Actions'), 'class' => 'header-actions header-nosort');\n\n\t\techo displayTableHeader($table_info, $title_array);\n\t\t\n\t\tif ($result) {\n\t\t\t$y = 0;\n\t\t\tfor ($x=$start; $x<$num_rows; $x++) {\n\t\t\t\tif ($y == $_SESSION['user']['record_count']) break;\n\t\t\t\t$this->displayRow($results[$x], $type);\n\t\t\t\t$y++;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\techo \"</tbody>\\n</table>\\n\";\n\t\tif (!$result) {\n\t\t\tif ($type == 'users') {\n\t\t\t\t$message = _('There are no users.');\n\t\t\t} elseif ($type == 'groups') {\n\t\t\t\t$message = _('There are no groups.');\n\t\t\t} elseif ($type == 'keys') {\n\t\t\t\t$message = _('There are no keys.');\n\t\t\t}\n\t\t\tprintf('<p id=\"table_edits\" class=\"noresult\" name=\"users\">%s</p>', $message);\n\t\t}\n\t}\n\n\t/**\n\t * Adds the new user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction addUser($data) {\n\t\tglobal $fmdb, $fm_name, $fm_login;\n\t\t\n\t\textract($data, EXTR_SKIP);\n\t\t\n\t\t$user_login = sanitize($user_login);\n\t\t$user_password = sanitize($user_password);\n\t\t$user_email = sanitize($user_email);\n\t\t\n\t\t/** Template user? */\n\t\tif (isset($user_template_only) && $user_template_only == 'yes') {\n\t\t\t$user_template_only = 'yes';\n\t\t\t$user_status = 'disabled';\n\t\t\t$user_auth_type = 0;\n\t\t} else {\n\t\t\t$user_template_only = 'no';\n\t\t\t$user_status = 'active';\n\t\t\t$user_auth_type = isset($user_auth_type) ? sanitize($user_auth_type) : 1;\n\t\t}\n\n\t\tif (empty($user_login)) return _('No username defined.');\n\t\tif ($user_auth_type == 2) {\n\t\t\t$user_password = null;\n\t\t} else {\n\t\t\tif (empty($user_password) && $user_template_only == 'no') return _('No password defined.');\n\t\t\tif ($user_password != sanitize($cpassword) && $user_template_only == 'no') return _('Passwords do not match.');\n\t\t}\n\t\tif (empty($user_email) && $user_template_only == 'no') return _('No e-mail address defined.');\n\t\t\n\t\t/** Check name field length */\n\t\t$field_length = getColumnLength('fm_users', 'user_login');\n\t\tif ($field_length !== false && strlen($user_login) > $field_length) return sprintf(_('Username is too long (maximum %d characters).'), $field_length);\n\t\t\n\t\t/** Force password change? */\n\t\t$user_force_pwd_change = (isset($user_force_pwd_change) && $user_force_pwd_change == 'yes') ? 'yes' : 'no';\n\n\t\t/** Does the record already exist for this account? */\n\t\t$query = \"SELECT * FROM `fm_users` WHERE `user_status`!='deleted' AND `user_login`='$user_login'\";\n\t\t$fmdb->get_results($query);\n\t\tif ($fmdb->num_rows) return _('This user already exists.');\n\t\t\n\t\tif ($user_group) {\n\t\t\t$user_caps = '';\n\t\t} else {\n\t\t\t$user_group = 0;\n\t\t}\n\t\t\n\t\t/** Process user permissions */\n\t\tif (isset($user_caps[$fm_name])) {\n\t\t\tif (array_key_exists('do_everything', $user_caps[$fm_name])) {\n\t\t\t\t$user_caps = array($fm_name => array('do_everything' => 1));\n\t\t\t}\n\t\t}\n\t\tif (isset($user_caps)) {\n\t\t\tforeach ($user_caps as $module => $caps_array) {\n\t\t\t\tif (array_key_exists('read_only', $caps_array)) {\n\t\t\t\t\t$user_caps[$module] = array('read_only' => 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t$query = \"INSERT INTO `fm_users` (`account_id`, `user_login`, `user_password`, `user_comment`, `user_email`, `user_group`, `user_force_pwd_change`, `user_default_module`, `user_caps`, `user_template_only`, `user_status`, `user_auth_type`) \n\t\t\t\tVALUES('{$_SESSION['user']['account_id']}', '$user_login', '\" . password_hash($user_password, PASSWORD_DEFAULT) . \"', '$user_comment', '$user_email', '$user_group', '$user_force_pwd_change', '$user_default_module', '\" . serialize($user_caps) . \"', '$user_template_only', '$user_status', $user_auth_type)\";\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn formatError(_('Could not add the user because a database error occurred.'), 'sql');\n\t\t}\n\n\t\t/** Process forced password change */\n\t\tif ($user_force_pwd_change == 'yes') $fm_login->processUserPwdResetForm($user_login);\n\t\t\n\t\taddLogEntry(sprintf(_(\"Added user '%s'.\"), $user_login), $fm_name);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Adds the new group\n\t *\n\t * @since 2.1\n\t * @package facileManager\n\t */\n\tfunction addGroup($data) {\n\t\tglobal $fmdb, $fm_name, $fm_login;\n\t\t\n\t\textract($data, EXTR_SKIP);\n\t\t\n\t\t$group_name = sanitize($group_name);\n\t\t$group_comment = sanitize($group_comment);\n\t\t\n\t\tif (empty($group_name)) return _('No group name defined.');\n\t\t\n\t\t/** Check name field length */\n\t\t$field_length = getColumnLength('fm_groups', 'group_name');\n\t\tif ($field_length !== false && strlen($group_name) > $field_length) return sprintf(_('Group name is too long (maximum %d characters).'), $field_length);\n\t\t\n\t\t/** Does the record already exist for this account? */\n\t\t$query = \"SELECT * FROM `fm_groups` WHERE `group_status`!='deleted' AND `group_name`='$group_name'\";\n\t\t$fmdb->get_results($query);\n\t\tif ($fmdb->num_rows) return _('This group already exists.');\n\t\t\n\t\t/** Process user permissions */\n\t\tif (isset($user_caps[$fm_name])) {\n\t\t\tif (array_key_exists('do_everything', $user_caps[$fm_name])) {\n\t\t\t\t$user_caps = array($fm_name => array('do_everything' => 1));\n\t\t\t}\n\t\t}\n\t\tif (isset($user_caps)) {\n\t\t\tforeach ($user_caps as $module => $caps_array) {\n\t\t\t\tif (array_key_exists('read_only', $caps_array)) {\n\t\t\t\t\t$user_caps[$module] = array('read_only' => 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t$query = \"INSERT INTO `fm_groups` (`account_id`, `group_name`, `group_caps`, `group_comment`, `group_status`) \n\t\t\t\tVALUES('{$_SESSION['user']['account_id']}', '$group_name', '\" . serialize($user_caps) . \"', '$group_comment', 'active')\";\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn formatError(_('Could not add the group because a database error occurred.'), 'sql');\n\t\t}\n\t\t\n\t\tif (isset($group_users) && is_array($group_users)) {\n\t\t\t$query = \"UPDATE `fm_users` SET `user_group`='{$fmdb->insert_id}', `user_caps`=NULL WHERE `user_id` IN ('\" . join(\"','\", $group_users) . \"')\";\n\t\t\tif (!$fmdb->query($query)) {\n\t\t\t\t$addl_text = ($fmdb->last_error) ? '<br />' . $fmdb->last_error : null;\n\t\t\t\treturn formatError(_('Could not associate the users with the group.'), 'sql');\n\t\t\t}\n\t\t}\n\n\t\taddLogEntry(sprintf(_(\"Added group '%s'.\"), $group_name), $fm_name);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Updates the selected user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction updateUser($post) {\n\t\tglobal $fmdb, $fm_name, $fm_login;\n\t\t\n\t\t/** Template user? */\n\t\tif (isset($post['user_template_only']) && $post['user_template_only'] == 'yes') {\n\t\t\t$post['user_template_only'] = 'yes';\n\t\t\t$post['user_auth_type'] = 0;\n\t\t\t$post['user_status'] = 'disabled';\n\t\t} else {\n\t\t\t$post['user_template_only'] = 'no';\n\t\t\t$post['user_auth_type'] = getNameFromID($post['user_id'], 'fm_users', 'user_', 'user_id', 'user_auth_type');\n\t\t\tif (!$post['user_auth_type']) $post['user_auth_type'] = 1;\n\t\t}\n\n\t\t$post['user_id'] = (!isset($post['user_id']) || !$post['user_id']) ? $_SESSION['user']['id'] : intval($post['user_id']);\n\n\t\t/** Authorized to update users? */\n\t\tif ((!currentUserCan('manage_users') && $_SESSION['user']['id'] != $post['user_id']) || isset($post['user_login'])) {\n\t\t\treturn _('You do not have permission to make these changes.');\n\t\t}\n\n\t\tif (!empty($post['user_password'])) {\n\t\t\tif (empty($post['cpassword']) || $post['user_password'] != $post['cpassword']) return _('Passwords do not match.');\n\t\t\t$post['user_password'] = sanitize($post['user_password']);\n\t\t\tif (password_verify($post['user_password'], getNameFromID($post['user_id'], 'fm_users', 'user_', 'user_id', 'user_password'))) return _('Password is not changed.');\n\t\t\t$sql_pwd = \"`user_password`='\" . password_hash($post['user_password'], PASSWORD_DEFAULT) . \"',\";\n\t\t} else $sql_pwd = null;\n\t\t\n\t\t$sql_edit = null;\n\t\t\n\t\t$exclude = array('submit', 'action', 'user_id', 'cpassword', 'user_password', 'user_caps', 'is_ajax', 'process_user_caps', 'type');\n\n\t\tforeach ($post as $key => $data) {\n\t\t\tif (!in_array($key, $exclude)) {\n\t\t\t\t$sql_edit .= $key . \"='\" . sanitize($data) . \"', \";\n\t\t\t}\n\t\t}\n\t\t$sql = rtrim($sql_edit . $sql_pwd, ', ');\n\t\t\n\t\t/** Process user permissions */\n\t\tif (isset($post['process_user_caps']) && (!isset($post['user_caps']) || $post['user_group'])) $post['user_caps'] = array();\n\t\t\n\t\tif (isset($post['user_caps'][$fm_name])) {\n\t\t\tif (array_key_exists('do_everything', $post['user_caps'][$fm_name])) {\n\t\t\t\t$post['user_caps'] = array($fm_name => array('do_everything' => 1));\n\t\t\t}\n\t\t}\n\t\tif (isset($post['user_caps'])) {\n\t\t\t$sql .= \",user_caps='\" . serialize($post['user_caps']) . \"'\";\n\t\t}\n\t\t\n\t\t/** Update the user */\n\t\t$query = \"UPDATE `fm_users` SET $sql WHERE `user_id`={$post['user_id']} AND `account_id`='{$_SESSION['user']['account_id']}'\";\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn formatError(_('Could not update the user because a database error occurred.'), 'sql');\n\t\t}\n\n\t\t$user_login = getNameFromID($post['user_id'], 'fm_users', 'user_', 'user_id', 'user_login');\n\t\t\n\t\t/** Process forced password change */\n\t\tif (isset($post['user_force_pwd_change']) && $post['user_force_pwd_change'] == 'yes') $fm_login->processUserPwdResetForm($user_login);\n\t\t\n\t\taddLogEntry(sprintf(_(\"Updated user '%s'.\"), $user_login), $fm_name);\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * Updates the selected group\n\t *\n\t * @since 2.1\n\t * @package facileManager\n\t */\n\tfunction updateGroup($post) {\n\t\tglobal $fmdb, $fm_name, $fm_login;\n\t\t\n\t\t$post['group_id'] = intval($post['group_id']);\n\t\tif (!isset($post['group_id'])) return _('This is a malformed request.');\n\t\tif (empty($post['group_name'])) return _('No group name defined.');\n\n\t\t$group_name = sanitize($post['group_name']);\n\t\t\n\t\t/** Check name field length */\n\t\t$field_length = getColumnLength('fm_groups', 'group_name');\n\t\tif ($field_length !== false && strlen($group_name) > $field_length) return sprintf(_('Group name is too long (maximum %d characters).'), $field_length);\n\t\t\n\t\t/** Does the record already exist for this account? */\n\t\t$query = \"SELECT * FROM `fm_groups` WHERE `group_status`!='deleted' AND `group_name`='$group_name'\";\n\t\t$fmdb->get_results($query);\n\t\tif ($fmdb->num_rows) return _('This group already exists.');\n\t\t\n\t\t$sql_edit = null;\n\t\t\n\t\t$exclude = array('submit', 'action', 'group_id', 'user_caps', 'is_ajax', 'process_user_caps', 'type', 'group_users');\n\n\t\tforeach ($post as $key => $data) {\n\t\t\tif (!in_array($key, $exclude)) {\n\t\t\t\t$sql_edit .= $key . \"='\" . sanitize($data) . \"', \";\n\t\t\t}\n\t\t}\n\t\t$sql = rtrim($sql_edit, ', ');\n\t\t\n\t\t/** Process group permissions */\n\t\tif (isset($post['process_user_caps']) && !isset($post['user_caps'])) $post['user_caps'] = array();\n\t\t\n\t\tif (isset($post['user_caps'][$fm_name])) {\n\t\t\tif (array_key_exists('do_everything', $post['user_caps'][$fm_name])) {\n\t\t\t\t$post['user_caps'] = array($fm_name => array('do_everything' => 1));\n\t\t\t}\n\t\t}\n\t\tif (isset($post['user_caps'])) {\n\t\t\t$sql .= \",group_caps='\" . serialize($post['user_caps']) . \"'\";\n\t\t}\n\t\t\n\t\t/** Update the group */\n\t\t$query = \"UPDATE `fm_groups` SET $sql WHERE `group_id`={$post['group_id']} AND `account_id`='{$_SESSION['user']['account_id']}'\";\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn formatError(_('Could not update the group because a database error occurred.'), 'sql');\n\t\t}\n\t\t\n\t\t/* Associated users with group */\n\t\t$queries[] = \"UPDATE `fm_users` SET `user_group`='0', `user_caps`=NULL WHERE `user_group`='{$post['group_id']}'\";\n\t\t$queries[] = \"UPDATE `fm_users` SET `user_group`='{$post['group_id']}', `user_caps`=NULL WHERE `user_id` IN ('\" . join(\"','\", (array) $post['group_users']) . \"')\";\n\t\tforeach ($queries as $query) {\n\t\t\t$fmdb->query($query);\n\t\t\tif ($fmdb->sql_errors) {\n\t\t\t\treturn formatError(_('Could not associate the users with the group.'), 'sql');\n\t\t\t}\n\t\t}\n\n\t\taddLogEntry(sprintf(_(\"Updated group '%s'.\"), $post['group_name']), $fm_name);\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * Deletes the selected user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction delete($id, $type = 'user') {\n\t\tglobal $fm_name;\n\t\t\n\t\t$functionCan = $type . 'Can';\n\t\t\n\t\tif ($type != 'key' && (!currentUserCan('do_everything') && $functionCan($id, 'do_everything')) || ($type == 'user' && $id == getDefaultAdminID())) {\n\t\t\treturn sprintf(_('You do not have permission to delete this %s.'), $type);\n\t\t}\n\t\tif ($type == 'user') {\n\t\t\t/** Ensure user is not current LDAP template user */\n\t\t\tif (getOption('auth_method') == 2) {\n\t\t\t\t$template_user_id = getOption('ldap_user_template');\n\t\t\t\tif ($id == $template_user_id) return _('This user is the LDAP user template and cannot be deleted at this time.');\n\t\t\t}\n\t\t\t$field = 'user_login';\n\t\t} elseif ($type == 'group') {\n\t\t\t$field = 'group_name';\n\t\t\tif (basicUpdate('fm_users', $id, 'user_group', 0, 'user_group') === false) {\n\t\t\t\treturn formatError(_('This group could not be removed from the associated users.'), 'sql');\n\t\t\t}\n\t\t} elseif ($type == 'key') {\n\t\t\t$field = 'key_token';\n\t\t}\n\t\t\n\t\t$tmp_name = getNameFromID($id, 'fm_' . $type . 's', $type . '_', $type . '_id', $field);\n\t\tif (!updateStatus('fm_' . $type . 's', $id, $type . '_', 'deleted', $type . '_id')) {\n\t\t\treturn formatError(sprintf(_('This %s could not be deleted.'), $type), 'sql');\n\t\t} else {\n\t\t\taddLogEntry(sprintf(_(\"Deleted %s '%s'.\"), $type, $tmp_name), $fm_name);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\n\t/**\n\t * Displays the user rows\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction displayRow($row, $type) {\n\t\tglobal $__FM_CONFIG, $fm_name;\n\t\t\n\t\t$property = rtrim($type, 's') . '_status';\n\t\t$disabled_class = ($row->$property == 'disabled') ? ' class=\"disabled\"' : null;\n\n\t\tif ($type == 'users') {\n\t\t\t$id = $row->user_id;\n\t\t\t$default_id = getDefaultAdminID();\n\t\t\tif (currentUserCan('manage_users') && $_SESSION['user']['id'] != $row->user_id) {\n\t\t\t\t$edit_status = null;\n\t\t\t\tif ($row->user_template_only == 'yes' && (currentUserCan('do_everything') || (!userCan($row->user_id, 'do_everything')))) {\n\t\t\t\t\t$edit_status .= '<a class=\"copy_form_link\" name=\"' . $type . '\" href=\"#\">' . $__FM_CONFIG['icons']['copy'] . '</a>';\n\t\t\t\t\t$edit_status .= '<a class=\"edit_form_link\" name=\"' . $type . '\" href=\"#\">' . $__FM_CONFIG['icons']['edit'] . '</a>';\n\t\t\t\t}\n\t\t\t\tif ($row->user_template_only == 'no') {\n\t\t\t\t\tif ($row->user_id != $_SESSION['user']['id']) {\n\t\t\t\t\t\tif ((currentUserCan('do_everything') || !userCan($row->user_id, 'do_everything')) && $row->user_id != $default_id) {\n\t\t\t\t\t\t\t$edit_status .= '<a class=\"edit_form_link\" name=\"' . $type . '\" href=\"#\">' . $__FM_CONFIG['icons']['edit'] . '</a>';\n\t\t\t\t\t\t\t$edit_status .= '<a class=\"status_form_link\" href=\"#\" rel=\"';\n\t\t\t\t\t\t\t$edit_status .= ($row->user_status == 'active') ? 'disabled\">' . $__FM_CONFIG['icons']['disable'] : 'active\">' . $__FM_CONFIG['icons']['enable'];\n\t\t\t\t\t\t\t$edit_status .= '</a>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** Cannot change password without mail_enable defined */\n\t\t\t\t\t\tif (getOption('mail_enable') && $row->user_auth_type != 2 && $row->user_template_only == 'no') {\n\t\t\t\t\t\t\t$edit_status .= '<a class=\"reset_password\" id=\"' . $row->user_login . '\" href=\"#\">' . $__FM_CONFIG['icons']['pwd_reset'] . '</a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$edit_status .= sprintf('<center>%s</center>', _('Enabled'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((currentUserCan('do_everything') || !userCan($row->user_id, 'do_everything')) && $row->user_id != $default_id) {\n\t\t\t\t\t$edit_status .= '<a href=\"#\" name=\"' . $type . '\" class=\"delete\">' . $__FM_CONFIG['icons']['delete'] . '</a>';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$edit_status = '<a style=\"width: 110px; margin: auto;\" class=\"account_settings\" id=\"' . $_SESSION['user']['id'] . '\" href=\"#\">' . $__FM_CONFIG['icons']['pwd_change'] . '</a>';\n\t\t\t}\n\n\t\t\t$star = (userCan($row->user_id, 'do_everything')) ? $__FM_CONFIG['icons']['star'] : null;\n\t\t\t$template_user = ($row->user_template_only == 'yes') ? $__FM_CONFIG['icons']['template_user'] : null;\n\n\t\t\t$last_login = ($row->user_last_login == 0) ? _('Never') : date(\"F d, Y \\a\\\\t H:i T\", $row->user_last_login);\n\t\t\tif ($row->user_ipaddr) {\n\t\t\t\t$user_ipaddr = $row->user_ipaddr;\n\t\t\t} else $user_ipaddr = _('None');\n\n\t\t\tif ($row->user_auth_type == 2) {\n\t\t\t\t$user_auth_type = 'LDAP';\n\t\t\t} elseif ($row->user_auth_type == 1) {\n\t\t\t\t$user_auth_type = $fm_name;\n\t\t\t} else {\n\t\t\t\t$user_auth_type = _('None');\n\t\t\t}\n\t\t\t$column = \"<td>$star $template_user</td>\n\t\t\t<td>{$row->user_login}</td>\n\t\t\t<td>$last_login</td>\n\t\t\t<td>$user_ipaddr</td>\n\t\t\t<td>$user_auth_type</td>\n\t\t\t<td>{$row->user_comment}</td>\";\n\t\t\t$name = $row->user_login;\n\t\t} elseif ($type == 'groups') {\n\t\t\t$id = $row->group_id;\n\t\t\tif (currentUserCan('do_everything') || (!groupCan($row->group_id, 'do_everything') && currentUserCan('manage_users'))) {\n\t\t\t\t$edit_status = '<a class=\"edit_form_link\" name=\"' . $type . '\" href=\"#\">' . $__FM_CONFIG['icons']['edit'] . '</a>';\n\t\t\t\t$edit_status .= '<a href=\"#\" name=\"' . $type . '\" class=\"delete\">' . $__FM_CONFIG['icons']['delete'] . '</a>';\n\t\t\t} else {\n\t\t\t\t$edit_status = $id = null;\n\t\t\t}\n\t\t\t$star = (groupCan($row->group_id, 'do_everything')) ? $__FM_CONFIG['icons']['star'] : null;\n\t\t\t\n\t\t\t$group_members_arr = $this->getGroupUsers($row->group_id, 'all');\n\t\t\tforeach ($group_members_arr as $group => $member) {\n\t\t\t\t$group_members[] = $member[0];\n\t\t\t}\n\t\t\t$group_members = join(', ', (array) $group_members);\n\t\t\t\n\t\t\t$column = \"<td>$star</td>\n\t\t\t<td>{$row->group_name}</td>\n\t\t\t<td>$group_members</td>\n\t\t\t<td>\" . nl2br($row->group_comment) . \"</td>\";\n\t\t\t$name = $row->group_name;\n\t\t} elseif ($type == 'keys') {\n\t\t\t$edit_status = $id = $user_column = null;\n\t\t\t$can_manage_users = currentUserCan('manage_users');\n\t\t\tif ($can_manage_users || $row->user_id == $_SESSION['user']['id']) {\n\t\t\t\t$id = $row->key_id;\n\t\t\t\t$edit_status .= '<a class=\"status_form_link\" href=\"#\" rel=\"';\n\t\t\t\t$edit_status .= ($row->key_status == 'active') ? 'disabled' : 'active';\n\t\t\t\t$edit_status .= '\">';\n\t\t\t\t$edit_status .= ($row->key_status == 'active') ? $__FM_CONFIG['icons']['disable'] : $__FM_CONFIG['icons']['enable'];\n\t\t\t\t$edit_status .= '</a>';\n\t\t\t\t$edit_status .= '<a href=\"#\" name=\"' . $type . '\" class=\"delete\">' . $__FM_CONFIG['icons']['delete'] . '</a>';\n\t\t\t}\n\n\t\t\tif ($can_manage_users) {\n\t\t\t\t$user_column = sprintf('<td>%s</td>', getNameFromID($row->user_id, 'fm_users', 'user_', 'user_id', 'user_login'));\n\t\t\t}\n\n\t\t\t$column = \"<td></td>\n\t\t\t<td>{$row->key_token}</td>\n\t\t\t$user_column\";\n\t\t\t$name = $row->key_token;\n\t\t}\n\t\t\n\t\techo <<<HTML\n\t\t<tr id=\"$id\" name=\"$name\"$disabled_class>\n\t\t\t$column\n\t\t\t<td id=\"row_actions\">$edit_status</td>\n\t\t</tr>\n\nHTML;\n\t}\n\n\t/**\n\t * Displays the form to add new user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction printUsersForm($data = '', $action = 'add', $form_bits = array(), $type = 'users', $button_text = 'Save', $button_id = 'submit', $action_page = 'admin-users.php', $print_form_head = true, $display_type = 'popup') {\n\t\tglobal $__FM_CONFIG, $fm_name, $fm_login;\n\n\t\t$user_id = $group_id = 0;\n\t\t$user_login = $user_password = $cpassword = $user_comment = null;\n\t\t$ucaction = ucfirst($action);\n\t\t$disabled = (isset($_GET['id']) && $_SESSION['user']['id'] == $_GET['id']) ? 'disabled' : null;\n\t\t$button_disabled = null;\n\t\t$user_email = $user_default_module = null;\n\t\t$hidden = $user_perm_form = $return_form_rows = null;\n\t\t$user_force_pwd_change = $user_template_only = null;\n\t\t$group_name = $group_comment = $user_group = null;\n\t\t\n\t\t$default_id = getDefaultAdminID();\n\t\t\n\t\tif (!empty($_POST) && !array_key_exists('is_ajax', $_POST)) {\n\t\t\tif (is_array($_POST))\n\t\t\t\textract($_POST);\n\t\t} elseif (@is_object($data[0])) {\n\t\t\textract(get_object_vars($data[0]));\n\t\t\t$user_password = null;\n\t\t}\n\t\tif ($action == 'add') {\n\t\t\t$popup_title = $type == 'users' ? __('Add User') : __('Add Group');\n\t\t} else {\n\t\t\t$popup_title = $type == 'users' ? __('Edit User') : __('Edit Group');\n\t\t}\n\t\t$popup_header = buildPopup('header', $popup_title);\n\t\t\n\t\t$hidden = '<input type=\"hidden\" name=\"type\" value=\"' . $type . '\" />';\n\t\t\n\t\tif (in_array('user_login', $form_bits)) {\n\t\t\t/** Get field length */\n\t\t\t$field_length = getColumnLength('fm_users', 'user_login');\n\t\t\t\n\t\t\t$username_form = ($action == 'add' || array_search('user_login', $form_bits) == 'editable') ? '<input name=\"user_login\" id=\"user_login\" type=\"text\" value=\"' . $user_login . '\" size=\"40\" maxlength=\"' . $field_length . '\" />' : '<span id=\"form_username\">' . $user_login . '</span>';\n\t\t\t$hidden .= '<input type=\"hidden\" name=\"user_id\" value=\"' . $user_id . '\" />';\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_login\">' . _('User Login') . '</label></th>\n\t\t\t\t\t<td width=\"67%\">' . $username_form . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\tif (in_array('user_comment', $form_bits)) {\n\t\t\t/** Get field length */\n\t\t\t$field_length = getColumnLength('fm_users', 'user_comment');\n\t\t\t\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_comment\">' . _('User Comment') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"user_comment\" id=\"user_comment\" type=\"text\" value=\"' . $user_comment . '\" size=\"32\" maxlength=\"' . $field_length . '\" ' . $disabled . ' /></td>\n\t\t\t\t</tr>';\n\t\t}\n\t\tif (in_array('user_email', $form_bits)) {\n\t\t\t/** Get field length */\n\t\t\t$field_length = getColumnLength('fm_users', 'user_login');\n\t\t\t\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_email\">' . _('User Email') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"user_email\" id=\"user_email\" type=\"email\" value=\"' . $user_email . '\" size=\"32\" maxlength=\"' . $field_length . '\" ' . $disabled . ' /></td>\n\t\t\t\t</tr>';\n\t\t}\n\n\t\tif (in_array('user_auth_method', $form_bits) && getOption('auth_method')) {\n\t\t\tif (!isset($user_auth_type)) {\n\t\t\t\t$user_auth_type = 1;\n\t\t\t}\n\t\t\t\n\t\t\t$auth_method_types = $__FM_CONFIG['options']['auth_method'];\n\t\t\tif (array_shift($auth_method_types) && count($auth_method_types) > 1) {\n\t\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_email\">' . _('Authentication Method') . '</label></th>\n\t\t\t\t\t<td width=\"67%\">' . buildSelect('user_auth_type', 'user_auth_type', $auth_method_types, $user_auth_type) . '</td>\n\t\t\t\t</tr>';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((in_array('user_password', $form_bits) || array_key_exists('user_password', $form_bits)) || ($user_id == $_SESSION['user']['id'] && $user_auth_type != 2)) {\n\t\t\tif ($action == 'add') $button_disabled = 'disabled';\n\t\t\t$strength = $GLOBALS['PWD_STRENGTH'];\n\t\t\tif (array_key_exists('user_password', $form_bits)) $strength = $form_bits['user_password'];\n\t\t\t$return_form_rows .= '<tr class=\"user_password\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_password\">' . _('User Password') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"user_password\" id=\"user_password\" type=\"password\" value=\"\" size=\"40\" onkeyup=\"javascript:checkPasswd(\\'user_password\\', \\'' . $button_id . '\\', \\'' . $strength . '\\');\" /></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr class=\"user_password\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"cpassword\">' . _('Confirm Password') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"cpassword\" id=\"cpassword\" type=\"password\" value=\"\" size=\"40\" onkeyup=\"javascript:checkPasswd(\\'cpassword\\', \\'' . $button_id . '\\', \\'' . $strength . '\\');\" /></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr class=\"user_password\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Password Validity') . '</th>\n\t\t\t\t\t<td width=\"67%\"><div id=\"passwd_check\">' . _('No Password') . '</div></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr class=\"pwdhint user_password\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Hint') . '</th>\n\t\t\t\t\t<td width=\"67%\">' . $__FM_CONFIG['password_hint'][$strength][1] . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('user_groups', $form_bits) && $user_id != $default_id) {\n\t\t\t$user_group_options = buildSelect('user_group', 'user_group', $this->getGroups(), $user_group);\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Associated Group') . '</th>\n\t\t\t\t\t<td width=\"67%\">' . $user_group_options . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('user_module', $form_bits)) {\n\t\t\t$active_modules = ($user_id == $_SESSION['user']['id']) ? getActiveModules(true) : getActiveModules();\n\t\t\t$user_module_options = buildSelect('user_default_module', 'user_default_module', $active_modules, $user_default_module);\n\t\t\tunset($active_modules);\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Default Module') . '</th>\n\t\t\t\t\t<td width=\"67%\">' . $user_module_options . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('user_options', $form_bits) && $user_id != $default_id) {\n\t\t\t$force_pwd_check = ($user_force_pwd_change == 'yes') ? 'checked disabled' : null;\n\t\t\t$user_template_only_check = ($user_template_only == 'yes') ? 'checked' : null;\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Options') . '</th>\n\t\t\t\t\t<td width=\"67%\">\n\t\t\t\t\t\t<input name=\"user_force_pwd_change\" id=\"user_force_pwd_change\" value=\"yes\" type=\"checkbox\" ' . $force_pwd_check . '/><label for=\"user_force_pwd_change\">' . _('Force Password Change at Next Login') . '</label><br />\n\t\t\t\t\t\t<input name=\"user_template_only\" id=\"user_template_only\" value=\"yes\" type=\"checkbox\" ' . $user_template_only_check . '/><label for=\"user_template_only\">' . _('Template User') . '</label>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('user_token', $form_bits) && getOption('api_token_support') && $user_id == $_SESSION['user']['id']) {\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"></th>\n\t\t\t\t\t<td width=\"67%\">\n\t\t\t\t\t\t<span><a href=\"admin-users.php?type=keys\">' . __('Configure API Keys') . ' &raquo;</a></span>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('group_name', $form_bits)) {\n\t\t\t/** Get field length */\n\t\t\t$field_length = getColumnLength('fm_groups', 'group_name');\n\t\t\t\n\t\t\t$hidden .= '<input type=\"hidden\" name=\"group_id\" value=\"' . $group_id . '\" />';\n\t\t\t$hidden .= $action != 'add' ? '<input type=\"hidden\" name=\"group_name\" value=\"' . $group_name . '\" />' : null;\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"group_name\">' . _('Group Name') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"group_name\" id=\"group_name\" type=\"text\" value=\"' . $group_name . '\" size=\"32\" maxlength=\"' . $field_length . '\" ' . $disabled . ' /></td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('comment', $form_bits)) {\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"group_comment\">' . _('Comment') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><textarea id=\"group_comment\" name=\"group_comment\" rows=\"4\" cols=\"30\">' . $group_comment . '</textarea></td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('group_users', $form_bits)) {\n\t\t\t$group_users = buildSelect('group_users', 'group_users', $this->getGroupUsers(), $this->getGroupUsers($group_id), 5, null, true, null, 'wide_select', _('Select one or more users'));\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Associated Users') . '</th>\n\t\t\t\t\t<td width=\"67%\">' . $group_users . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('verbose', $form_bits)) {\n\t\t\t$hidden .= '<input type=\"hidden\" name=\"verbose\" value=\"0\" />' . \"\\n\";\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Options') . '</th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"verbose\" id=\"verbose\" type=\"checkbox\" value=\"1\" checked /><label for=\"verbose\">' . _('Verbose Output') . '</label></td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tdo if (in_array('user_perms', $form_bits)) {\n\t\t\t/** Cannot edit perms if a member of a group or super-admin if logged in user is not a super-admin */\n\t\t\tif ($user_id == $default_id || (userCan($user_id, 'do_everything') && !currentUserCan('do_everything'))) break;\n\t\t\t\n\t\t\tif ($type == 'users') {\n\t\t\t\t$id = $user_id;\n\t\t\t\t$perm_function = 'userCan';\n\t\t\t} else {\n\t\t\t\t$id = $group_id;\n\t\t\t\t$perm_function = 'groupCan';\n\t\t\t}\n\t\t\t\n\t\t\t$user_is_super_admin = $perm_function($id, 'do_everything');\n\t\t\t\n\t\t\t$fm_perm_boxes = $perm_boxes = null;\n\t\t\t$i = 1;\n\t\t\t$fm_user_caps = getAvailableUserCapabilities();\n\t\t\tforeach ($fm_user_caps[$fm_name] as $key => $title) {\n\t\t\t\tif ($key == 'do_everything') {\n\t\t\t\t\tif (!currentUserCan('do_everything')) continue;\n\t\t\t\t\t$title = \"<b>$title</b>\";\n\t\t\t\t}\n\t\t\t\tif ($key != 'do_everything' && $user_is_super_admin) {\n\t\t\t\t\t$checked = null;\n\t\t\t\t} else {\n\t\t\t\t\t$checked = ($perm_function($id, $key)) ? 'checked' : null;\n\t\t\t\t}\n\t\t\t\t$fm_perm_boxes .= ' <input name=\"user_caps[' . $fm_name . '][' . $key . ']\" id=\"fm_perm_' . $key . '\" type=\"checkbox\" value=\"1\" ' . $checked . '/> <label for=\"fm_perm_' . $key . '\">' . $title . '</label>' . \"\\n\";\n\t\t\t\t/** Display checkboxes three per row */\n\t\t\t\tif ($i == 3) {\n\t\t\t\t\t$fm_perm_boxes .= \"<br />\\n\";\n\t\t\t\t\t$i = 0;\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tif (!empty($fm_perm_boxes)) {\n\t\t\t\t$perm_boxes .= <<<PERM\n\t\t\t\t<tr id=\"userperms\" class=\"user_permissions\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">$fm_name</th>\n\t\t\t\t\t<td width=\"67%\">\n\t\t\t\t\t\t<input type=\"hidden\" name=\"process_user_caps\" value=\"1\" />\n\t\t\t\t\t\t$fm_perm_boxes\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\nPERM;\n\t\t\t}\n\t\t\t\n\t\t\t/** Process module permissions */\n\t\t\t$active_modules = getActiveModules();\n\t\t\tforeach ($active_modules as $module_name) {\n\t\t\t\t$module_perm_boxes = null;\n\t\t\t\t$i = 1;\n\t\t\t\tif (array_key_exists($module_name, $fm_user_caps)) {\n\t\t\t\t\tforeach ($fm_user_caps[$module_name] as $key => $title) {\n\t\t\t\t\t\t$checked = ($perm_function($id, $key, $module_name) && !$user_is_super_admin) ? 'checked' : null;\n\t\t\t\t\t\t$module_perm_boxes .= ' <input name=\"user_caps[' . $module_name . '][' . $key . ']\" id=\"fm_perm_' . $module_name . '_' . $key . '\" type=\"checkbox\" value=\"1\" ' . $checked . '/> <label for=\"fm_perm_' . $module_name . '_' . $key . '\">' . $title . '</label>' . \"\\n\";\n\t\t\t\t\t\t/** Display checkboxes three per row */\n\t\t\t\t\t\tif ($i == 3) {\n\t\t\t\t\t\t\t$module_perm_boxes .= \"<br />\\n\";\n\t\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\t\t\t\t\t$module_extra_functions = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module_name . DIRECTORY_SEPARATOR . 'functions.extra.php';\n\t\t\t\t\tif (file_exists($module_extra_functions)) {\n\t\t\t\t\t\tinclude($module_extra_functions);\n\n\t\t\t\t\t\t$function = 'print' . $module_name . 'UsersForm';\n\t\t\t\t\t\tif (function_exists($function)) {\n\t\t\t\t\t\t\t$module_perm_boxes .= $function(getUserCapabilities($id, substr($type, 0, -1)), $module_name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (!empty($module_perm_boxes)) {\n\t\t\t\t\t$perm_boxes .= <<<PERM\n\t\t\t\t\t<tr id=\"userperms\" class=\"user_permissions\">\n\t\t\t\t\t\t<th width=\"33%\" scope=\"row\">$module_name</th>\n\t\t\t\t\t\t<td width=\"67%\">\n\t\t\t\t\t\t$module_perm_boxes\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\nPERM;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!empty($perm_boxes)) {\n\t\t\t\t$user_perm_form = sprintf('<tr class=\"user_permissions\"><td colspan=\"2\" class=\"form-break\"><i>%s</i></td></tr>', _('Permissions')) . $perm_boxes;\n\t\t\t}\n\t\t} while (false);\n\t\t\n\t\t$return_form = ($print_form_head) ? '<form name=\"manage\" id=\"manage\" method=\"post\" action=\"' . $action_page . '\">' . \"\\n\" : null;\n\t\tif ($display_type == 'popup') $return_form .= $popup_header;\n\t\t$return_form .= '\n\t\t\t<div>\n\t\t\t<form id=\"fm_user_profile\">\n\t\t\t<input type=\"hidden\" name=\"action\" value=\"' . $action . '\" />' . $hidden . '\n\t\t\t<table class=\"form-table\" width=\"495px\">\n\t\t\t\t<tr><td colspan=\"2\"><i>' . _('Details') . '</i></td></tr>' . $return_form_rows . $user_perm_form;\n\t\t\n\t\t$return_form .= '</table></div>';\n\n\t\tif ($display_type == 'popup') $return_form .= '\n\t\t</div>\n\t\t<div class=\"popup-footer\">\n\t\t\t<input type=\"submit\" id=\"' . $button_id . '\" name=\"submit\" value=\"' . $button_text . '\" class=\"button primary ' . $button_disabled . '\" ' . $button_disabled . '/>\n\t\t\t<input type=\"button\" value=\"' . _('Cancel') . '\" class=\"button left\" id=\"cancel_button\" />\n\t\t</div>\n\t\t</form>\n\t\t<script>\n\t\t\t$(document).ready(function() {\n\t\t\t\t$(\".form-table select\").select2({\n\t\t\t\t\tcontainerCss: { \"min-width\": \"165px\" },\n\t\t\t\t\tminimumResultsForSearch: -1\n\t\t\t\t});\n\t\t\t\t$(\"select.wide_select\").select2({\n\t\t\t\t\twidth: \"300px\",\n\t\t\t\t\tminimumResultsForSearch: -1\n\t\t\t\t});\n\t\t\t\t$(\"#user_group\").trigger(\"change\");\n\t\t\t});\n\t\t</script>';\n\n\t\treturn $return_form;\n\t}\n\n\t\n\t/**\n\t * Gets all associated users for the group\n\t *\n\t * @since 2.1\n\t * @package facileManager\n\t *\n\t * @param integer $group_id Group ID to return user list from\n\t * @return array\n\t */\n\tfunction getGroupUsers($group_id = null, $include = 'id-only') {\n\t\tglobal $fmdb, $__FM_CONFIG;\n\t\t\n\t\t$user_list = null;\n\t\t\n\t\tif ($group_id == null) {\n\t\t\tbasicGetList('fm_users', 'user_login', 'user_', \"AND user_template_only='no' AND user_id!={$_SESSION['user']['id']} AND (user_caps IS NULL OR user_caps NOT LIKE '%do_everything%')\");\n\t\t} else {\n\t\t\t$query = \"SELECT user_id, user_login FROM fm_users WHERE account_id={$_SESSION['user']['account_id']} AND user_status!='deleted' AND user_template_only='no' AND user_group=\" . sanitize($group_id);\n\t\t\t$fmdb->get_results($query);\n\t\t}\n\t\t\n\t\tfor ($i=0; $i<$fmdb->num_rows; $i++) {\n\t\t\tif ($include == 'all' || ($include == 'id-only' && $group_id == null)) {\n\t\t\t\t$user_list[$i][] = $fmdb->last_result[$i]->user_login;\n\t\t\t\t$user_list[$i][] = $fmdb->last_result[$i]->user_id;\n\t\t\t} else {\n\t\t\t\t$user_list[] = $fmdb->last_result[$i]->user_id;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $user_list;\n\t}\n\n\t\n\t/**\n\t * Gets all available user groups\n\t *\n\t * @since 2.1\n\t * @package facileManager\n\t *\n\t * @return array\n\t */\n\tfunction getGroups() {\n\t\tglobal $fmdb;\n\t\t\n\t\t$group_list[0][] = null;\n\t\t$group_list[0][] = 0;\n\t\t\n\t\tbasicGetList('fm_groups', 'group_name', 'group_');\n\t\t\n\t\tfor ($i=0; $i<$fmdb->num_rows; $i++) {\n\t\t\t$group_list[$i+1][] = $fmdb->last_result[$i]->group_name;\n\t\t\t$group_list[$i+1][] = $fmdb->last_result[$i]->group_id;\n\t\t}\n\t\t\n\t\treturn (array) $group_list;\n\t}\n\n\t\n\t/**\n\t * Generates unique API keypair for the user\n\t *\n\t * @since 4.0\n\t * @package facileManager\n\t *\n\t * @return string\n\t */\n\tfunction generateAPIKey() {\n\t\tglobal $fmdb, $__FM_CONFIG, $fm_name;\n\t\t\n\t\t$unique_key = false;\n\n\t\t$popup_header = buildPopup('header', _('API Key Creation'));\n\t\t$popup_footer = buildPopup('footer', _('OK'), array('cancel_button' => 'cancel'));\n\t\t\n\t\t/** Ensure the key is unique */\n\t\twhile ($unique_key == false) {\n\t\t\t$key_token = strtoupper(genRandomString(mt_rand(20, 30)));\n\t\t\t$key_secret = genRandomString(mt_rand(30, 50));\n\n\t\t\t$query = \"SELECT * FROM `fm_keys` WHERE `key_status`!='deleted' AND `key_token`='$key_token'\";\n\t\t\t$fmdb->get_results($query);\n\t\t\tif (!$fmdb->num_rows) $unique_key = true;\n\t\t}\n\n\t\t$query = sprintf(\"INSERT INTO fm_keys (`account_id`, `user_id`, `key_token`, `key_secret`) VALUES (%d, %d, '%s', '%s')\",\n\t\t\t$_SESSION['user']['account_id'], $_SESSION['user']['id'], $key_token, password_hash($key_secret, PASSWORD_DEFAULT));\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn $popup_header . formatError(_('Could not create the keypair because a database error occurred.'), 'sql') . $popup_footer;\n\t\t}\n\n\t\taddLogEntry(sprintf(_(\"Added API key '%s'.\"), $key_token), $fm_name);\n\n\t\t/** Give user ability to copy keypair */\n\t\t$message = sprintf('<p>%s %s</p>\n\t\t<p>%s <u>%s</u></p>\n\t\t<p><b>%s :</b> %s<br />\n\t\t<b>%s :</b> %s</p>',\n\t\t\t$__FM_CONFIG['icons']['ok'],\n\t\t\t_('Your API keypair has been successfully created.'),\n\t\t\t_('Please copy the keypair and store in safe place.'),\n\t\t\t_('This your only opportunity of retrieving the secret key.'),\n\t\t\t_('Key'), $key_token,\n\t\t\t_('Secret'), $key_secret\n\t\t);\n\t\t\n\t\t$popup_footer = buildPopup('footer', _('OK'), array('cancel_button' => 'cancel'), 'admin-users.php?type=keys');\n\n\t\treturn $popup_header . $message . $popup_footer;\n\t}\n}\n\nif (!isset($fm_users))\n\t$fm_users = new fm_users();\n\n?>\n", "<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n*/\n\n/**\n * Dummy function in case gettext is not installed\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $text Text to translate\n * @return string $text\n */\nif (!function_exists('_')) {\n\tfunction _($text) {\n\t\treturn $text;\n\t}\n}\n\n/**\n * Dummy function in case gettext is not installed\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $single_text Singular text to translate\n * @param string $plural_text Plural text to translate\n * @param integer $number Number to determine if its singular or plural\n * @return string $text\n */\nif (!function_exists('ngettext')) {\n\tfunction ngettext($single_text, $plural_text, $number) {\n\t\treturn $number == 1 ? $single_text : $plural_text;\n\t}\n}\n\n/**\n * Dummy function in case gettext is not installed\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $single_text Singular text to translate\n * @param string $plural_text Plural text to translate\n * @param integer $number Number to determine if its singular or plural\n * @return string $text\n */\nif (!function_exists('dngettext')) {\n\tfunction dngettext($module, $single_text, $plural_text, $number) {\n\t\treturn ngettext($single_text, $plural_text, $number);\n\t}\n}\n\ninclude(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . 'facileManager' . DIRECTORY_SEPARATOR . 'variables.inc.php');\n\n/** Include shared classes */\n$shared_classes_dir = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . 'shared' . DIRECTORY_SEPARATOR . 'classes';\nforeach (scandir($shared_classes_dir) as $file) {\n\tif (is_file($shared_classes_dir . DIRECTORY_SEPARATOR . $file) && $file[0] != '.') {\n\t\tinclude_once($shared_classes_dir . DIRECTORY_SEPARATOR . $file);\n\t}\n}\n\n/**\n * Includes the template file\n *\n * @since 1.0\n * @package facileManager\n */\nfunction includeModuleFile($module = null, $file = '') {\n\tglobal $fm_name;\n\tif (!$module) $module = $fm_name;\n\t\n\tif (!file_exists(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'pages' . DIRECTORY_SEPARATOR . $file)) {\n\t\t$module = (file_exists(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . 'shared' . DIRECTORY_SEPARATOR . 'pages' . DIRECTORY_SEPARATOR . $file)) ? 'shared' : $fm_name;\n\t}\n\n\treturn ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'pages' . DIRECTORY_SEPARATOR . $file;\n}\n\n/**\n * Throws HTTP Error\n *\n * @since 1.0\n * @package facileManager\n */\nfunction throwHTTPError($code = '404') {\n\t$status_codes = array('404' => 'Not Found');\n\t\n\theader( \"HTTP/1.0 $code \" . $status_codes[$code] );\n\tinclude(includeModuleFile(null, $code . '.php'));\n}\n\n/**\n * Checks if there's a database upgrade\n *\n * @since 1.0\n * @package facileManager\n */\nfunction isUpgradeAvailable() {\n\tglobal $fmdb;\n\t\n\t/** fM Core */\n\tinclude(ABSPATH . 'fm-includes/version.php');\n\t\n\t$running_db_version = getOption('fm_db_version');\n\t\n\t/** If the record does not exist then run the installer */\n\tif (!$running_db_version) {\n\t\theader('Location: ' . $GLOBALS['RELPATH'] . 'fm-install.php');\n\t\texit;\n\t}\n\t\n\tif ($running_db_version < $fm_db_version) return true;\n\t\n\t/** Module upgrades */\n\t$fmdb->get_results(\"SELECT module_name,option_value FROM fm_options WHERE option_name='version'\");\n\tfor ($x=0; $x<$fmdb->num_rows; $x++) {\n\t\t$module_name = $fmdb->last_result[$x]->module_name;\n\t\tinclude(ABSPATH . 'fm-modules/' . $module_name . '/variables.inc.php');\n\t\tif (version_compare($fmdb->last_result[$x]->option_value, $__FM_CONFIG[$module_name]['version'], '<')) return true;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Checks if there's a new version of facileManager available\n *\n * @since 1.0\n * @package facileManager\n */\nfunction isNewVersionAvailable($package, $version, $interval = 'schedule') {\n\t$fm_site_url = 'http://www.facilemanager.com/check/';\n\t\n\t$data['package'] = $package;\n\t$data['version'] = $version;\n\t$data['format']  = 'array';\n\t\n\t$method = 'update';\n\t\n\t/** Are software updates enabled? */\n\tif (!getOption('software_update')) return false;\n\t\n\t/** Disable check until user has upgraded database to 1.2 */\n\tif (getOption('fm_db_version') < 32) return false;\n\t\n\t/** Should we be running this check now? */\n\t$last_version_check = getOption('version_check', 0, $package);\n\tif (!$software_update_interval = getOption('software_update_interval')) $software_update_interval = 'week';\n\tif (!$last_version_check) {\n\t\tunset($last_version_check);\n\t\t$last_version_check['timestamp'] = 0;\n\t\t$last_version_check['data'] = null;\n\t\t$method = 'insert';\n\t} elseif (isset($last_version_check['data']['version']) && $last_version_check['data']['version'] == $version) {\n\t\t$last_version_check['timestamp'] = 0;\n\t}\n\tif ($interval == 'force') {\n\t\t$last_version_check['timestamp'] = 0;\n\t\t$last_version_check['data'] = null;\n\t}\n\tif ($last_version_check['timestamp'] < strtotime(\"1 $software_update_interval ago\")) {\n\t\t$data['software_update_tree'] = getOption('software_update_tree');\n\t\t\n\t\t/** Use file_get_contents if allowed else use POST */\n\t\tif (ini_get('allow_url_fopen')) {\n\t\t\t$result = file_get_contents($fm_site_url . '?' . http_build_query($data));\n\t\t} else {\n\t\t\t$result = getPostData($fm_site_url . '?' . http_build_query($data), $data, 'get', array(CURLOPT_CONNECTTIMEOUT => 1));\n\t\t}\n\t\t\n\t\tif (isSerialized($result)) {\n\t\t\t$result = unserialize($result);\n\t\t}\n\t\t\n\t\tsetOption('version_check', array('timestamp' => time(), 'data' => $result), $method, true, 0, $package);\n\t\t\n\t\treturn $result;\n\t}\n\t\n\treturn $last_version_check['data'];\n}\n\n\n/**\n * Sanitizes the post\n *\n * @since 1.0\n * @package facileManager\n */\nfunction sanitize($data, $replace = null) {\n\tglobal $fmdb;\n\t\n\tif ($replace) {\n\t\t$strip_chars = array(\"'\", \"\\\"\", \"`\", \"$\", \"?\", \"*\", \"&\", \"^\", \"!\", \"#\");\n\t\t$replace_chars = array(\" \", \"\\\\\", \"_\", \"(\", \")\", \",\", \".\", \"-\");\n\n\t\t$data = str_replace($strip_chars, '', $data);\n\t\t$data = str_replace($replace_chars, $replace, $data);\n\t\t$data = str_replace('--', '-', $data);\n\t\t\n\t\treturn $data;\n\t} else {\n\t\tif (is_string($data)) {\n\t\t\tif ($fmdb->use_mysqli) {\n\t\t\t\treturn @mysqli_real_escape_string($fmdb->dbh, $data);\n\t\t\t} else {\n\t\t\t\treturn @mysql_real_escape_string($data);\n\t\t\t}\n\t\t}\n\t\treturn $data;\n\t}\n}\n\n\n/**\n * Prints the header\n *\n * @since 1.0\n * @package facileManager\n */\nfunction printHeader($subtitle = 'auto', $css = 'facileManager', $help = 'no-help', $menu = 'menu') {\n\tglobal $fm_name, $__FM_CONFIG;\n\t\n\tinclude(ABSPATH . 'fm-includes/version.php');\n\t\n\t$title = $fm_name;\n\t\n\tif (!empty($subtitle)) {\n\t\tif ($subtitle == 'auto') $subtitle = getPageTitle();\n\t\t$title = \"$subtitle &lsaquo; $title\";\n\t}\n\t\n\t$head = $logo = null;\n\t\n\tif ($css == 'facileManager') {\n\t\t$head = ($menu == 'menu') ? getTopHeader($help) : null;\n\t} else {\n\t\t$logo = '<h1 class=\"center\"><img alt=\"' . $fm_name . '\" src=\"' . $GLOBALS['RELPATH'] . 'fm-includes/images/logo.png\" /></h1>' . \"\\n\";\n\t}\n\t\n\t/** Module css and js includes */\n\tif (isset($_SESSION['module']) && isset($__FM_CONFIG['module']['path'])) {\n\t\t$module_css_file = $__FM_CONFIG['module']['path']['css'] . DIRECTORY_SEPARATOR . 'module.css';\n\t\t$module_css = (file_exists(ABSPATH . $module_css_file) && array_key_exists($_SESSION['module'], $__FM_CONFIG)) ? '<link rel=\"stylesheet\" href=\"' . $GLOBALS['RELPATH'] . $module_css_file . '?ver=' . $__FM_CONFIG[$_SESSION['module']]['version'] . '\" type=\"text/css\" />' : null;\n\t\t$module_js_dir = $__FM_CONFIG['module']['path']['js'] . DIRECTORY_SEPARATOR;\n\t\t$module_js_file = $module_js_dir . 'module.php';\n\t\t$module_js = (file_exists(ABSPATH . $module_js_file) && array_key_exists($_SESSION['module'], $__FM_CONFIG)) ? '<script src=\"' . $GLOBALS['RELPATH'] . $module_js_file . '?ver=' . $__FM_CONFIG[$_SESSION['module']]['version'] . '\" type=\"text/javascript\" charset=\"utf-8\"></script>' : null;\n\t\t\n\t\t/** Include any .js files */\n\t\tforeach (scandir($module_js_dir) as $module_js_file) {\n\t\t\tif (in_array($module_js_file, array('.', '..', 'module.php'))) continue;\n\t\t\t$module_js_file = $module_js_dir . $module_js_file;\n\t\t\t$module_js .= (file_exists(ABSPATH . $module_js_file) && array_key_exists($_SESSION['module'], $__FM_CONFIG)) ? \"\\n\\t\\t\" . '<script src=\"' . $GLOBALS['RELPATH'] . $module_js_file . '\" type=\"text/javascript\" charset=\"utf-8\"></script>' : null;\n\t\t}\n\t} else {\n\t\t$module_css = $module_js = null;\n\t}\n\t\n\techo <<<HTML\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t\t<title>$title</title>\n\t\t<link rel=\"shortcut icon\" href=\"{$GLOBALS['RELPATH']}fm-modules/$fm_name/images/favicon.png\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-modules/$fm_name/css/$css.css?ver=$fm_version\" type=\"text/css\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/jquery-ui.min.css\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/font-awesome/css/font-awesome.min.css\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/open-sans.css\" type=\"text/css\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/tooltip.css\" type=\"text/css\" />\n\t\t<script src=\"{$GLOBALS['RELPATH']}fm-includes/js/jquery-3.6.0.min.js\"></script>\n\t\t<script src=\"{$GLOBALS['RELPATH']}fm-includes/js/jquery-ui.min.js\"></script>\n\t\t<script src=\"{$GLOBALS['RELPATH']}fm-includes/extra/select2/select2.min.js\" type=\"text/javascript\"></script>\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/select2/select2.css?ver=$fm_version\" type=\"text/css\" />\n\t\t$module_css\n\t\t<script src=\"{$GLOBALS['RELPATH']}fm-modules/$fm_name/js/$fm_name.php?ver=$fm_version\" type=\"text/javascript\" charset=\"utf-8\"></script>\n\t\t$module_js\n\t</head>\n<body>\n$head\n<a href=\"#\" id=\"scroll-to-top\" class=\"\"></a>\nHTML;\n}\n\n/**\n * Prints the footer\n *\n * @since 1.0\n * @package facileManager\n */\nfunction printFooter($classes = null, $text = null, $block_style = null) {\n\techo <<<FOOT\n\t</div>\n<div class=\"manage_form_container\" id=\"manage_item\" $block_style></div>\n<div class=\"manage_form_contents $classes\" id=\"manage_item_contents\" $block_style>\n$text\n</div>\n</body></html>\nFOOT;\n}\n\n/**\n * Prints the top header\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getTopHeader($help) {\n\tglobal $fm_login, $__FM_CONFIG;\n\tinclude(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . 'facileManager' . DIRECTORY_SEPARATOR . 'variables.inc.php');\n\tinclude(ABSPATH . 'fm-includes' . DIRECTORY_SEPARATOR . 'version.php');\n\t\n\t$module_toolbar = $fm_new_version_available = $account_menu = $user_account_menu = $module_menu = $module_version_info = null;\n\t\n\tif ($help != 'help-file') {\n\t\t$auth_method = getOption('auth_method');\n\t\tif ($auth_method) {\n\t\t\tif ($_SESSION['user']['account_id'] != 1) {\n\t\t\t\t$account = getNameFromID($_SESSION['user']['account_id'], 'fm_accounts', 'account_', 'account_id', 'account_name');\n\t\t\t\t$account_menu = <<<HTML\n\t\t<div id=\"topheadpart\">\n\t\t\t<span style=\"line-height: 18pt;\">Account:&nbsp;&nbsp; $account</span>\n\t\t</div>\nHTML;\n\t\t\t}\n\n\t\t\t$star = currentUserCan('do_everything') ? $__FM_CONFIG['icons']['star'] . ' ' : null;\n\t\t\t$change_pwd_link = ($auth_method) ? sprintf('<li><a class=\"account_settings\" id=\"%s\" href=\"#\"><span>%s</span></a></li>' . \"\\n\", $_SESSION['user']['id'], _('Edit Profile')) : null;\n\t\t\t$logout = _('Logout');\n\t\t\t$user_account_menu = <<<HTML\n\t\t<div id=\"topheadpartright\" style=\"padding: 0 1px 0 0;\">\n\t\t\t<div id=\"cssmenu\">\n\t\t\t<ul>\n\t\t\t\t<li class=\"has-sub has-image\"><a href=\"#\"><span>{$__FM_CONFIG['icons']['account']}</span></a>\n\t\t\t\t\t<ul class=\"sub-right\">\n\t\t\t\t\t\t<li class=\"text-only\"><span>$star{$_SESSION['user']['name']}</span></li>\n\t\t\t\t\t\t$change_pwd_link\n\t\t\t\t\t\t<li class=\"last\"><a href=\"{$GLOBALS['RELPATH']}?logout\"><span>$logout</span></a></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\nHTML;\n\t\t}\n\t\t\n\t\t/** Build app dropdown menu */\n\t\t$modules = getAvailableModules();\n\t\t$avail_modules = null;\n\t\t\n\t\tif (count($modules)) {\n\t\t\tforeach ($modules as $module_name) {\n\t\t\t\tif ($module_name == $_SESSION['module']) continue;\n\t\t\t\tif (in_array($module_name, getActiveModules(true))) {\n\t\t\t\t\t$avail_modules .= \"<li class='last'><a href='{$GLOBALS['RELPATH']}?module=$module_name'><span>$module_name</span></a></li>\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ($avail_modules) {\n\t\t\t\t$module_menu = <<<HTML\n\t\t<div id=\"topheadpartright\" style=\"padding: 0;\">\n\t\t\t<div id=\"cssmenu\">\n\t\t\t<ul>\n\t\t\t\t<li class=\"has-sub last\"><a href=\"#\"><span>{$_SESSION['module']}</span></a>\n\t\t\t\t\t<ul>\n\t\t\t\t\t$avail_modules\n\t\t\t\t\t</ul>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\nHTML;\n\t\t\t}\n\t\t\t\n\t\t\t/** Include module toolbar items */\n\t\t\tif (function_exists('buildModuleToolbar')) {\n\t\t\t\tlist($module_toolbar_left, $module_toolbar_right) = @buildModuleToolbar();\n\t\t\t}\n\t\t} else {\n\t\t\t$module_menu = null;\n\t\t\t$fm_name = isset($_SESSION['module']) ? $_SESSION['module'] : $fm_name;\n\t\t}\n\t\n\t\t$help_file = buildHelpFile();\n\t\t$help_text = _('Help');\n\t\n\t\t$process_all_text = _('Process all available updates now');\n\t\t$process_all = <<<HTML\n\t\t<div id=\"topheadpartright\" style=\"display: none;\">\n\t\t\t<a class=\"single_line process_all_updates\" href=\"#\" title=\"$process_all_text\"><i class=\"fa fa-refresh fa-lg\"></i></a>\n\t\t\t<span class=\"update_count\"></span>\n\t\t</div>\nHTML;\n\t\n\t\tif (defined('FM_INCLUDE_SEARCH') && FM_INCLUDE_SEARCH === true) {\n\t\t\t$search = '<div id=\"topheadpartright\">\n\t\t\t<a class=\"single_line search\" href=\"#\" title=\"' . _('Search this page') . '\"><i class=\"fa fa-search fa-lg\"></i></a>' .\n\t\t\t\tdisplaySearchForm() . '</div>';\n\t\t} else $search = null;\n\n\t\t$branding_logo = getBrandLogo();\n\t\t\n\t\tif (isset($_SESSION['module']) && $_SESSION['module'] != $fm_name) {\n\t\t\t$module_version_info = sprintf('<br />%s v%s', $_SESSION['module'], $__FM_CONFIG[$_SESSION['module']]['version']);\n\t\t\t$fm_version_info = \"$fm_name v$fm_version\";\n\t\t} else {\n\t\t\t$fm_version_info = sprintf('<span class=\"single_line\">%s v%s</span>', $fm_name, $fm_version);\n\t\t}\n\t\t\n\t\t$return = <<<HTML\n\t<div id=\"tophead\">\n\t\t<div id=\"topheadpart\">\n\t\t\t<img src=\"$branding_logo\" alt=\"$fm_name\" title=\"$fm_name\" />\n\t\t\t$fm_version_info\n\t\t\t$module_version_info\n\t\t</div>\n$account_menu\n$module_toolbar_left\n$user_account_menu\n\t\t<div id=\"topheadpartright\">\n\t\t\t<a class=\"single_line help_link\" href=\"#\">$help_text</a>\n\t\t</div>\n$module_menu\n$module_toolbar_right\n$search\n$process_all\n\t</div>\n\t<div id=\"help\">\n\t\t<div id=\"help_topbar\">\n\t\t\t<p class=\"title\">fmHelp</p>\n\t\t\t<p id=\"help_buttons\">{$__FM_CONFIG['icons']['popout']} {$__FM_CONFIG['icons']['close']}</p>\n\t\t</div>\n\t\t<div id=\"help_file_container\">\n\t\t$help_file\n\t\t</div>\n\t</div>\n\nHTML;\n\t} else {\n\t\t$return = <<<HTML\n\t<div id=\"tophead\">\n\t\t<div id=\"topheadpart\">\n\t\t\tfmHelp<br />\n\t\t\tv$fm_version\n\t\t</div>\n\t</div>\n\nHTML;\n\t}\n\n\treturn $return;\n}\n\n/**\n * Prints the menu system\n *\n * @since 1.0\n * @package facileManager\n */\nfunction printMenu() {\n\tglobal $__FM_CONFIG, $menu, $submenu;\n\t\n\t$main_menu_html = null;\n\t\n\tlist($filtered_menu, $filtered_submenu) = getCurrentUserMenu();\n\tksort($filtered_menu);\n\tksort($filtered_submenu);\n\t\n\t$i = 1;\n\tforeach ($filtered_menu as $position => $main_menu_array) {\n\t\t$sub_menu_html = '</li>';\n\t\t$show_top_badge_count = true;\n\t\t\n\t\tlist($menu_title, $page_title, $capability, $module, $slug, $classes, $badge_count) = $main_menu_array;\n\t\tif (!is_array($classes)) {\n\t\t\t$classes = !empty($classes) ? array_fill(0, 1, $classes) : array();\n\t\t}\n\t\tif ($badge_count > 100) {\n\t\t\t$badge_count = '99+';\n\t\t}\n\t\t\n\t\t/** Check if menu item is current page */\n\t\tif ($slug == findTopLevelMenuSlug($filtered_submenu)) {\n\t\t\tarray_push($classes, 'current', 'arrow');\n\t\t\t\n\t\t\tif (array_key_exists($slug, $filtered_submenu)) {\n\t\t\t\t$show_top_badge_count = false;\n\t\t\t\t$k = 0;\n\t\t\t\tforeach ($filtered_submenu[$slug] as $submenu_array) {\n\t\t\t\t\tif (!empty($submenu_array[0])) {\n\t\t\t\t\t\t$submenu_class = ($submenu_array[4] == $GLOBALS['basename']) ? ' class=\"current\"' : null;\n\t\t\t\t\t\tif ($submenu_array[6]) {\n\t\t\t\t\t\t\tif ($submenu_array[6] > 100) {\n\t\t\t\t\t\t\t\t$submenu_array[6] = '99+';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$submenu_array[0] = sprintf($submenu_array[0] . ' <span class=\"menu_badge\"><p>%s</p></span>', $submenu_array[6]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$sub_menu_html .= sprintf('<li%s><a href=\"%s\">%s</a></li>' . \"\\n\", $submenu_class, $submenu_array[4], $submenu_array[0]);\n\t\t\t\t\t} elseif (!$k) {\n\t\t\t\t\t\t$show_top_badge_count = true;\n\t\t\t\t\t}\n\t\t\t\t\t$k++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$sub_menu_html = <<<HTML\n\t\t\t\t\t</li>\n\t\t\t\t\t<div id=\"submenu\">\n\t\t\t\t\t\t<div id=\"subitems\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t$sub_menu_html\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\nHTML;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/** Build submenus */\n\t\tif (!count($classes) && count((array) $filtered_submenu[$slug]) > 1) {\n\t\t\tarray_push($classes, 'has-sub');\n\t\t\tforeach ($filtered_submenu[$slug] as $submenu_array) {\n\t\t\t\tif (!empty($submenu_array[0])) {\n\t\t\t\t\tif ($submenu_array[6]) {\n\t\t\t\t\t\tif ($submenu_array[6] > 100) {\n\t\t\t\t\t\t\t$submenu_array[6] = '99+';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$submenu_array[0] = sprintf($submenu_array[0] . ' <span class=\"menu_badge\"><p>%s</p></span>', $submenu_array[6]);\n\t\t\t\t\t}\n\t\t\t\t\t$sub_menu_html .= sprintf('<li><a href=\"%s\">%s</a></li>' . \"\\n\", $submenu_array[4], $submenu_array[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$sub_menu_html = <<<HTML\n\t\t\t\t<div class=\"arrow\"></div>\n\t\t\t\t<ul>\n\t\t\t\t$sub_menu_html\n\t\t\t\t</ul>\n</li>\n\nHTML;\n\t\t}\n\t\t\n\t\t$arrow = (in_array('arrow', $classes)) ? '<u></u>' : null;\n\t\t\n\t\t/** Join all of the classes */\n\t\tif (count($classes)) $class = ' class=\"' . implode(' ', $classes) . '\"';\n\t\telse $class = null;\n\t\t\n\t\tif (empty($slug) && !empty($class)) {\n\t\t\t/** Ideally this should be the separator */\n\t\t\tif ($i != count($filtered_menu)) {\n\t\t\t\t$main_menu_html .= '<li' . $class . '></li>' . \"\\n\";\n\t\t\t}\n\t\t} else {\n\t\t\t/** Display the menu item if allowed */\n\t\t\tif (currentUserCan($capability, $module)) {\n\t\t\t\tif ($badge_count && $show_top_badge_count) $menu_title = sprintf($menu_title . ' <span class=\"menu_badge\"><p>%s</p></span>', $badge_count);\n\t\t\t\t$main_menu_html .= sprintf('<li%s><a href=\"%s\">%s</a>%s%s' . \"\\n\", $class, $slug, $menu_title, $arrow, $sub_menu_html);\n\t\t\t}\n\t\t}\n\t\t\n\t\t$i++;\n\t}\n\t\n\t$donate_text = _('Donate');\n\t\n\techo <<<MENU\n\t<div id=\"menuback\"></div>\n\t<div id=\"menu\">\n\t\t<div id=\"mainitems\">\n\t\t\t<ul>\n$main_menu_html\n\t\t\t</ul>\n\t\t</div>\n\t\t<div id=\"donate\" class=\"grey\">\n\t\t\t<p><a href=\"http://www.facilemanager.com/donate/\" target=\"_blank\"><i class=\"fa fa-heart\"></i> $donate_text</a></p>\n\t\t</div>\n\t</div>\n\nMENU;\n}\n\n\n/**\n * Removes non-permitted menu items\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $element Menu array to check.\n * @return bool\n */\nfunction filterMenu($element) {\n\treturn currentUserCan($element[2], $element[3]);\n}\n\n\n/**\n * Finds the top level menu for selection\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $menu_array Menu array to search.\n * @return string\n */\nfunction findTopLevelMenuSlug($menu_array) {\n\tforeach ($menu_array as $slug => $menu_items) {\n\t\tforeach ($menu_items as $element) {\n\t\t\tif (array_search($GLOBALS['basename'], $element, true)) {\n\t\t\t\treturn $slug;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn $GLOBALS['basename'];\n}\n\n\n/**\n * Gets the user menu based on capabilities\n *\n * @since 1.2\n * @package facileManager\n *\n * @return array\n */\nfunction getCurrentUserMenu() {\n\tglobal $menu, $submenu;\n\t\n\t$filtered_menus = array(null, null);\n\t\n\t/** Submenus */\n\tforeach ($submenu as $slug => $submenu_array) {\n\t\tksort($submenu_array);\n\t\t$filtered_menus[1][$slug] = array_filter($submenu_array, 'filterMenu');\n\t}\n\t\n\t/** Main menu */\n\t$temp_menu = $menu;\n\tforeach ($menu as $position => $element) {\n\t\tlist($menu_title, $page_title, $capability, $module, $slug, $class) = $element;\n\t\tif (array_key_exists($slug, $filtered_menus[1])) {\n\t\t\tif (count($filtered_menus[1][$slug]) == 1) {\n\t\t\t\t$single_element = array_values($filtered_menus[1][$slug]);\n\t\t\t\tif (!empty($single_element[0][0])) {\n\t\t\t\t\t$temp_menu[$position] = array_shift($filtered_menus[1][$slug]);\n\t\t\t\t\tif (isset($element[7]) && $element[7]) $temp_menu[$position][0] = $menu_title;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t$filtered_menus[0] = array_filter($temp_menu, 'filterMenu');\n\t\n\tunset($temp_menu, $element, $submenu_array, $slug, $position, $single_element);\n\n\treturn $filtered_menus;\n}\n\n\n/**\n * Gets the selected object\n *\n * @since 1.0\n * @package facileManager\n */\nfunction basicGet($table, $id, $prefix = '', $field = 'id', $sql = '', $account_id = null) {\n\tglobal $fmdb;\n\t$id = sanitize($id);\n\t\n\tif (!$account_id) {\n\t\t$account_id = $_SESSION['user']['account_id'];\n\t}\n\t\n\tswitch($sql) {\n\t\tcase 'active':\n\t\t\t$sql = \"AND `{$prefix}status`='active'\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t\n\t$get_query = \"SELECT * FROM `$table` WHERE `{$prefix}status`!='deleted' AND `account_id`='$account_id' AND `$field`='$id' $sql\";\n\treturn $fmdb->get_results($get_query);\n}\n\n/**\n * Gets the object list\n *\n * @since 1.0\n * @package facileManager\n */\nfunction basicGetList($table, $id = 'id', $prefix = '', $sql = null, $limit = null, $ip_sort = false, $direction = 'ASC', $count_only = false) {\n\tglobal $fmdb;\n\t\n\tswitch($sql) {\n\t\tcase 'active':\n\t\t\t$sql = \"AND `{$prefix}status`='active'\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t\n\tif (is_array($id)) {\n\t\t$primary_field = sanitize($id[0]);\n\t\t$secondary_fields = implode(\" $direction,\", $id);\n\t\t$secondary_fields = ' ' . sanitize(substr($secondary_fields, strlen($primary_field)));\n\t} else {\n\t\t$primary_field = sanitize($id);\n\t\t$secondary_fields = null;\n\t}\n\t\n\tif ($ip_sort) {\n\t\t$sort = \"ORDER BY INET_ATON(`$primary_field`)\" . $secondary_fields;\n\t} else {\n\t\t$sort = \"ORDER BY `$primary_field`\" . $secondary_fields;\n\t}\n\t\n\t$disp_query = 'SELECT ';\n\t$disp_query .= $count_only ? 'COUNT(*) count' : '*';\n\t$disp_query .= \" FROM `$table` WHERE `{$prefix}status`!='deleted' AND account_id='{$_SESSION['user']['account_id']}' $sql $sort $direction $limit\";\n\treturn $fmdb->query($disp_query);\n}\n\n/**\n * Updates the record status\n *\n * @since 1.0\n * @package facileManager\n */\nfunction updateStatus($table, $id, $prefix, $status, $field = 'id') {\n\tglobal $fmdb;\n\t\n\t$query = \"UPDATE `$table` SET `{$prefix}status`='\" . sanitize($status) . \"' WHERE account_id='{$_SESSION['user']['account_id']}' AND `$field`='\" . sanitize($id) . \"'\";\n\n\treturn $fmdb->query($query);\n}\n\n\n/**\n * Deletes the selected object\n *\n * @since 1.0\n * @package facileManager\n */\nfunction basicDelete($table, $id, $field = 'id', $include_account_id = true) {\n\tglobal $fmdb;\n\n\t$account_id = $include_account_id ? \"account_id='{$_SESSION['user']['account_id']}' AND\" : null;\n\t\n\t$query = \"DELETE FROM `$table` WHERE $account_id `$field`='\" . sanitize($id) . \"'\";\n\n\treturn $fmdb->query($query);\n}\n\n\n/**\n * Updates the selected object\n *\n * @since 1.0\n * @package facileManager\n */\nfunction basicUpdate($table, $id, $update_field, $update_value, $field = 'id') {\n\tglobal $fmdb;\n\t\n\t$query = \"UPDATE `$table` SET `$update_field`='\" . sanitize($update_value) . \"' WHERE account_id='{$_SESSION['user']['account_id']}' AND `$field`='\" . sanitize($id) . \"'\";\n\n\treturn $fmdb->query($query);\n}\n\n\n/**\n * Builds an array from mysql enum values\n *\n * @since 1.0\n * @package facileManager\n * \n * @param string $tbl_name Table name\n * @param string $column_name Column name\n * @param string $sort Optional sort function\n * \n * return array\n */\nfunction enumMYSQLSelect($tbl_name, $column_name, $sort = 'unsorted') {\n\tglobal $fmdb;\n\t\n\t$query = \"SHOW COLUMNS FROM $tbl_name LIKE '$column_name'\";\n\t$result = $fmdb->get_results($query);\n\t\n\t$result = $fmdb->last_result;\n\t$thisrow = $result[0];\n\t$valuestring = $thisrow->Type;\n\t$valuestring = str_replace(array('enum', '(', ')', \"'\"), '', $valuestring);\n\tif (isset($head)) {\n\t\t$valuestring = \"{$head},{$valuestring}\";\n\t}\n\t$values = explode(',', $valuestring);\n\t\n\tif ($sort != 'unsorted') {\n\t\t$sort($values);\n\t}\n\t\n\treturn $values;\n}\n\n/**\n * Builds a drop down menu\n *\n * @since 1.0\n * @package facileManager\n */\nfunction buildSelect($select_name, $select_id, $options, $option_select = null, $size = '1', $disabled = '', $multiple = false, $onchange = null, $classes = null, $placeholder = null) {\n\tif (!$placeholder) $placeholder = _('Select an option');\n\t$type_options = null;\n\tif (countArrayDimensions($options) == 3) {\n\t\tforeach ($options as $optgroup => $optarray) {\n\t\t\tif (is_string($optgroup)) $type_options .= '<optgroup label=\"' . $optgroup . '\">';\n\t\t\tfor ($i = 0; $i < count($optarray); $i++) {\n\t\t\t\t$selected = null;\n\t\t\t\tif (is_array($option_select)) {\n\t\t\t\t\tforeach ($option_select as $key) {\n\t\t\t\t\t\tif (isset($key) && $key == $optarray[$i][1]) {\n\t\t\t\t\t\t\t$selected = ' selected';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif (isset($option_select) && (string)$option_select === (string)$optarray[$i][1]) {\n\t\t\t\t\t$selected = ' selected';\n\t\t\t\t}\n\t\t\t\t$type_options.=\"<option$selected value=\\\"{$optarray[$i][1]}\\\">{$optarray[$i][0]}</option>\\n\";\n\t\t\t}\n\t\t\tif (is_string($optgroup)) $type_options .= '</optgroup>';\n\t\t}\n\t} elseif (countArrayDimensions($options) == 2) {\n\t\tfor ($i = 0; $i < count($options); $i++) {\n\t\t\t$selected = null;\n\t\t\tif (is_array($option_select)) {\n\t\t\t\tforeach ($option_select as $key) {\n\t\t\t\t\tif (isset($key) && $key == $options[$i][1]) {\n\t\t\t\t\t\t$selected = ' selected';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} elseif (isset($option_select) && (string)$option_select === (string)$options[$i][1]) {\n\t\t\t\t$selected = ' selected';\n\t\t\t}\n\t\t\t$type_options.=\"<option$selected value=\\\"{$options[$i][1]}\\\">{$options[$i][0]}</option>\\n\";\n\t\t}\n\t} else {\n\t\tfor ($i = 0; $i < count($options); $i++) {\n\t\t\t$selected = ($option_select == $options[$i] || (is_array($option_select) && @in_array($options[$i], $option_select))) ? ' selected' : '';\n\t\t\t$type_options.=\"<option$selected>$options[$i]</option>\\n\";\n\t\t}\n\t}\n\t$build_select = \"<select class=\\\"$classes\\\" data-placeholder=\\\"$placeholder\\\" \";\n\t$build_select .= \"size=\\\"$size\\\" name=\\\"{$select_name}\";\n\tif ($multiple) $build_select .= '[]';\n\t$build_select .= \"\\\" id=\\\"$select_id\\\"\";\n\tif ($multiple) $build_select .= ' multiple';\n\tif ($onchange) $build_select .= ' onchange=\"' . $onchange . '\" ';\n\t$build_select .= \"$disabled>$type_options</select>\\n\";\n\treturn $build_select;\n}\n\n\n/**\n * Gets name from an id\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getNameFromID($id, $table, $prefix, $field, $data, $account_id = null, $status = null) {\n\tglobal $fmdb;\n\t\n\tif (!$account_id) {\n\t\t$account_id = $_SESSION['user']['account_id'];\n\t}\n\t\n\tbasicGet($table, $id, $prefix, $field, $status, $account_id);\n\tif ($fmdb->num_rows) {\n\t\t$result = $fmdb->last_result;\n\t\tif (isset($result[0]->$data)) return $result[0]->$data;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Gets account id from key\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getAccountID($value, $field = 'account_key', $key = 'account_id') {\n\tglobal $fmdb;\n\t\n\t$query = sprintf('SELECT %s FROM `fm_accounts` WHERE %s=\"%s\"', $key, $field, $value);\n\t$result = $fmdb->get_results($query);\n\tif ($fmdb->num_rows) {\n\t\t$result = $fmdb->last_result;\n\t\treturn $result[0]->$key;\n\t}\n}\n\n\n/**\n * Checks the app functionality\n *\n * @since 1.0\n * @package facileManager\n */\nfunction functionalCheck() {\n\tglobal $fm_name;\n\t\n\tif (isset($_SESSION['module'])) {\n\t\t$functions_file = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $_SESSION['module'] . DIRECTORY_SEPARATOR . 'functions.php';\n\t\tif (is_file($functions_file)) {\n\t\t\tif (!function_exists('moduleFunctionalCheck') && $_SESSION['module'] != $fm_name) {\n\t\t\t\tinclude($functions_file);\n\t\t\t}\n\t\t\t$html_checks = @moduleFunctionalCheck();\n\t\t} else {\n\t\t\t$html_checks = sprintf('<p>%s</p>', _('You have no modules installed.'));\n\t\t}\n\t}\n\t\n\treturn $html_checks;\n}\n\n\n/**\n * Pings the $server to check if it's alive\n *\n * @since 1.0\n * @package facileManager\n */\nfunction pingTest($server) {\n\t$program = findProgram('ping');\n\tif (PHP_OS == 'FreeBSD' || PHP_OS == 'Darwin') {\n\t\t$ping = shell_exec(\"$program -t 2 -c 3 \" . escapeshellarg($server) . \" 2>/dev/null\");\n\t} elseif (PHP_OS == 'Linux') {\n\t\t$ping = shell_exec(\"$program -W 2 -c 3 \" . escapeshellarg($server) . \" 2>/dev/null\");\n\t} else {\n\t\t$ping = shell_exec(\"$program -c 3 \" . escapeshellarg($server) . \" 2>/dev/null\");\n\t}\n\tif ($ping && preg_match('/64 bytes from/', $ping)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n/**\n * Searches for the full path of the $program\n *\n * @since 1.0\n * @package facileManager\n */\nfunction findProgram($program) {\n\t$path = array('/bin', '/sbin', '/usr/bin', '/usr/sbin', '/usr/local/bin', '/usr/local/sbin');\n\n\tif (function_exists('is_executable')) {\n\t\twhile ($this_path = current($path)) {\n\t\t\tif (is_executable(\"$this_path/$program\")) {\n\t\t\t\treturn \"$this_path/$program\";\n\t\t\t}\n\t\t\tnext($path);\n\t\t}\n\t} else {\n\t\treturn strpos($program, '.exe');\n\t}\n\n\treturn;\n}\n\n\n/**\n * Tests a $port on $host\n *\n * @since 1.0\n * @package facileManager\n */\nfunction socketTest($host, $port, $timeout) {\n\t$fm = @fsockopen($host, $port, $errno, $errstr, $timeout);\n\tif (!$fm) return false;\n\telse {\n\t\tfclose($fm);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * Gets post data from a url\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getPostData($url, $data = null, $post = 'post', $options = array()) {\n\tif ($post == 'post') {\n\t\t$options = array(\n\t\t\tCURLOPT_POST => true,\n\t\t\tCURLOPT_POSTFIELDS => $data\n\t\t);\n\t}\n\t$defaults = array (\n\t\tCURLOPT_HEADER => false,\n\t\tCURLOPT_RETURNTRANSFER => true,\n\t\tCURLOPT_FRESH_CONNECT => true,\n\t\tCURLOPT_FORBID_REUSE => true,\n\t\tCURLOPT_CONNECTTIMEOUT => 2,\n\t\tCURLOPT_TIMEOUT => 5,\n\t\tCURLOPT_SSL_VERIFYPEER => false,\n\t\tCURLOPT_SSL_VERIFYHOST => false,\n\t\tCURLOPT_FAILONERROR => true,\n\t\tCURLOPT_URL => $url\n\t);\n\t\n\t$proxy = array();\n\tif (getOption('proxy_enable')) {\n\t\t$proxyauth = getOption('proxy_user') . ':' . getOption('proxy_pass');\n\t\tif ($proxyauth == ':') $proxyauth = null;\n\t\t$proxy = array(\n\t\t\tCURLOPT_PROXY => getOption('proxy_host') . ':' . getOption('proxy_port'),\n\t\t\tCURLOPT_PROXYUSERPWD => $proxyauth\n\t\t);\n\t}\n\t$ch = curl_init();\n\tcurl_setopt_array($ch, ($options + $proxy + $defaults));\n\t$result = curl_exec($ch);\n\tcurl_close($ch);\n\treturn $result;\n}\n\n\n/**\n * Gets the user information\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getUserInfo($fm_login, $field = 'user_id') {\n\tglobal $fmdb;\n\t\n\t$query = \"SELECT * FROM `fm_users` WHERE $field='$fm_login' AND `user_status`!='deleted' LIMIT 1\";\n\t$user_results = $fmdb->get_results($query);\n\t\n\t/** Matching results returned as an array */\n\tif ($fmdb->num_rows) {\n\t\t$user_info = get_object_vars($user_results[0]);\n\t\t\n\t\treturn $user_info;\n\t}\n\t\n\t/** No matching results */\n\treturn false;\n}\n\n\n/**\n * Process password reset user form.\n *\n * @since 1.0\n * @package facileManager\n */\nfunction genRandomString($length) {\n\t$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\t$string = null;\n\tfor ($p = 0; $p < $length; $p++) {\n\t\t$string .= $characters[mt_rand(0, strlen($characters)-1)];\n\t}\n\treturn $string;\n}\n\n\n/**\n * Converts $_SERVER['REQUEST_URI'] to an array\n *\n * @since 1.0\n * @package facileManager\n */\nfunction convertURIToArray() {\n\t$uri = explode('?', $_SERVER['REQUEST_URI']);\n//\techo '<pre>';\n//\tprint_r($uri);\n\tif (count($uri) > 1) {\n\t\t$raw_params = explode('&', $uri[1]);\n//\t\tprint_r($raw_params);\n\t\t\n\t\tfor ($i=0; $i<count($raw_params); $i++) {\n\t\t\tif (strpos($raw_params[$i], '=')) {\n\t\t\t\t$param = explode('=', $raw_params[$i]);\n\t\t\t\t$return_array[$param[0]] = $param[1];\n//\t\tprint_r($param);\n\t\t\t} else {\n\t\t\t\t$return_array[$raw_params[$i]] = null;\n\t\t\t}\n\t\t}\n//\t\tprint_r($return_array);\n//\t\texit;\n\t\treturn $return_array;\n\t}\n\t\n\treturn array();\n}\n\n\n/**\n * Builds the dashboard for display\n *\n * @since 1.0\n * @package facileManager\n */\nfunction buildDashboard() {\n\tglobal $fm_name;\n\t\n\trequire(ABSPATH . 'fm-includes/version.php');\n\t$fm_new_version_available = isNewVersionAvailable($fm_name, $fm_version);\n\t\n\tif ($fm_new_version_available) {\n\t\t$dashboard = <<<DASH\n\t<div id=\"shadow_box\" class=\"fullwidthbox\">\n\t\t<div id=\"shadow_container\" class=\"fullwidthbox\">\n\t\t<p>{$fm_new_version_available['text']}</p>\n\t\t</div>\n\t</div>\n\t<br />\nDASH;\n\t} else $dashboard = null;\n\t\n\tif (isset($_SESSION['module'])) {\n\t\t$functions_file = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $_SESSION['module'] . DIRECTORY_SEPARATOR . 'functions.php';\n\t\tif (is_file($functions_file)) {\n\t\t\tif (!function_exists('buildModuleDashboard')) {\n\t\t\t\tinclude($functions_file);\n\t\t\t}\n\t\t\t$body = sprintf('<div class=\"fm-table\"><div>%s</div></div>', @buildModuleDashboard());\n\t\t} else {\n\t\t\t$body = sprintf('<p>%s</p>', _('You have no modules installed.'));\n\t\t}\n\t}\n\n\treturn $dashboard . $body;\n}\n\n\n/**\n * Builds the help for display\n *\n * @since 1.0\n * @package facileManager\n */\nfunction buildHelpFile() {\n\tglobal $fm_name, $__FM_CONFIG;\n\t\n\t/** facileManager help */\n\t$body = <<<HTML\n<div id=\"issue_tracker\">\n\t<p>Have an idea for a new feature? Found a bug? Submit a report with the <a href=\"https://github.com/WillyXJ/facileManager/issues\" target=\"_blank\">issue tracker</a>.</p>\n</div>\n<h3>$fm_name</h3>\n<ul>\n\t<li>\n\t\t<a class=\"list_title\">Configure Modules</a>\n\t\t<div>\n\t\t\t<p>Modules are what gives $fm_name purpose. They can be installed, activated, upgraded, deactivated, and uninstalled.</p>\n\t\t\t\n\t\t\t<p><b>Install</b><br />\n\t\t\tJust extract the module into the 'fm-modules' directory on the server host (if not already present), go to \n\t\t\t<a href=\"__menu{Modules}\">Modules</a>, and then click the 'Install' button next to the module \n\t\t\tyou wish to install.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t\t<p><b>Activate</b><br />\n\t\t\tIn order for the module to be usable, it needs to be active in the UI.</p>\n\t\t\t<p>Go to <a href=\"__menu{Modules}\">Modules</a> and click the 'Activate' link next \n\t\t\tto the module you wish to activate.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t\t<p><b>Upgrade</b><br />\n\t\t\tAnytime module files are individually updated in the 'fm-modules' directory on the server host apart from updating $fm_name \n\t\t\tas a whole, they will need to be upgraded to ensure full compatibility and functionality.</p>\n\t\t\t<p>Go to <a href=\"__menu{Modules}\">Modules</a> and click the 'Upgrade' button next \n\t\t\tto the module you wish to upgrade. This will upgrade the database with any required changed.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t\t<p><b>Deactivate</b><br />\n\t\t\tIf you no longer want a module to be usable, it can be deactived in the UI.</p>\n\t\t\t<p>Go to <a href=\"__menu{Modules}\">Modules</a> and click the 'Deactivate' link next \n\t\t\tto the module you wish to deactivate.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t\t<p><b>Uninstall</b><br />\n\t\t\tIf you no longer want a module to be installed, it can be uninstalled via the UI.</p>\n\t\t\t<p>Go to <a href=\"__menu{Modules}\">Modules</a>, ensure the module is already \n\t\t\tdeactivated, and then click the 'Uninstall' button next to the module you wish to remove. This will remove all associated \n\t\t\tentries and tables from the database.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t</div>\n\t</li>\n\t<li>\n\t\t<a class=\"list_title\">Manage Users</a>\n\t\t<div>\n\t\t\t<p>$fm_name incorporates the use of multiple user accounts with granular permissions. This way you can limit access to your \n\t\t\tenvironment.</p>\n\t\t\t\n\t\t\t<p>You can add, modify, and delete user accounts at Admin &rarr; <a href=\"__menu{Users & Groups}\">Users</a>.</p>\n\t\t\t\n\t\t\t<p>For non-LDAP users, there are some options you can select:</p>\n\t\t\t<ul>\n\t\t\t\t<li><b>Force Password Change at Next Login</b><br />\n\t\t\t\tTick this box the user should be forced to change their password next time they try to login.</li>\n\t\t\t\t<li><b>Template User</b><br />\n\t\t\t\tTick this box if this user should be a template user only. These users cannot be enabled and cannot login to $fm_name. Any user \n\t\t\t\taccount of this type will be depicted with a {$__FM_CONFIG['icons']['template_user']} next to the user name.</li>\n\t\t\t</ul>\n\t\t\t\n\t\t\t<p>Each permission checkbox will grant or deny access to certain functionalities within $fm_name.</p>\n\t\t\t<ul>\n\t\t\t\t<li><b>Super Admin</b><br />\n\t\t\t\tThis permission will grant the user unrestricted access to the entire facileManager environment. There must be at least one\n\t\t\t\tSuper Admin. Any user account with this privilege will be depicted with a {$__FM_CONFIG['icons']['star']} next to the user name.</li>\n\t\t\t\t<li><b>Module Management</b><br />\n\t\t\t\tWith this permission, the user will be able to activate, deactivate, install, upgrade, and uninstall modules within $fm_name.</li>\n\t\t\t\t<li><b>User Management</b><br />\n\t\t\t\tThis permission allows the user to add, modify, and delete user accounts.</li>\n\t\t\t\t<li><b>Run Tools</b><br />\n\t\t\t\tThis permission grants the user access to run the various tools in Admin &rarr; <a href=\"__menu{Tools}\">Tools</a>.</li>\n\t\t\t\t<li><b>Manage Settings</b><br />\n\t\t\t\tThis permission grants the user access to change system settings at Settings &rarr; <a href=\"__menu{Settings}\">General</a>.</li>\n\t\t\t</ul>\n\t\t\t\n\t\t\t<p>New user accounts can be created quickly from a template by duplicating the template user. This will prompt you for the new \n\t\t\tusername and password while giving you the ability to change any other settings prior to user creation.</p>\n\n\t\t\t<p>User groups can also be created to easily provide the same level of access to multiple user accounts.</p>\n\t\t\t<p><i>The 'User Management' or 'Super Admin' permission is required for these actions.</i></p>\n\n\t\t\t<p>When API Support is enabled at Settings &rarr; <a href=\"__menu{Settings}\">General</a>, each user may create an API keypair\n\t\t\tby editing their user profile. Privileged users will be able change the status of any keypair through Admin &rarr; \n\t\t\t<a href=\"__menu{Users & Groups}\">Users</a>. This keypair allows the user to authenticate via the API through the client scripts.</p> \n\t\t</div>\n\t</li>\n\t<li>\n\t\t<a class=\"list_title\">Manage Settings</a>\n\t\t<div>\n\t\t\t<p>There are several settings available to set at Settings &rarr; <a href=\"__menu{Settings}\">General</a>.</p>\n\t\t\t<p><i>The 'Manage Settings' or 'Super Admin' permission is required to change settings.</i></p>\n\t\t\t<p><b>Authentication</b><br />\n\t\t\tThere are three types of authentication supported by $fm_name:</p>\n\t\t\t<ul>\n\t\t\t\t<li><b>None</b><br />\n\t\t\t\tEvery user will be automatically logged in as the default super-admin account that was created during the installation process.</li>\n\t\t\t\t<li><b>Built-in Authentication</b><br />\n\t\t\t\tAuthenticates against the $fm_name database using solely the users defined at Admin &rarr; <a href=\"__menu{Users & Groups}\">Users</a>.</li>\n\t\t\t\t<li><b>LDAP Authentication</b><br />\n\t\t\t\tUsers are authenticated against a defined LDAP server. Upon success, users are created in the $fm_name database using the selected \n\t\t\t\ttemplate account for granular permissions within the environment. If no template is selected then user authentication will fail \n\t\t\t\t(this is another method of controlling access to $fm_name). These users cannot be disabled nor can their passwords be changed \n\t\t\t\twithin $fm_name. The PHP LDAP extensions have to be installed before this option is available.</li>\n\t\t\t</ul>\n\t\t\t<p><i>You can reset the authentication method by setting the following in config.inc.php:</i></p>\n\t\t\t<p><i>define('FM_NO_AUTH', true);</i></p>\n\t\t\t<p><b>Client Registration</b><br />\n\t\t\tYou can choose to allow clients to automatically register in the database or not.</p>\n\t\t\t<p><b>API Support</b><br />\n\t\t\tBy enabling API support, users are able to create keypairs to authenticate with through the client scripts. This opens up the ability\n\t\t\tto make a limited selection of module changes without using the web interface.</p>\n\t\t\t<p><b>SSL</b><br />\n\t\t\tYou can choose to have $fm_name enforce the use of SSL when a user tries to access the web app.</p>\n\t\t\t<p><b>Mailing</b><br />\n\t\t\tThere are a few things $fm_name and its modules may need to send an e-mail about (such as password reset links). These settings allow\n\t\t\tyou to configure the mailing settings to use for your environment and enable/disable mailing altogether.</p>\n\t\t\t<p><b>Date and Time</b><br />\n\t\t\tSet your preferred timezone, date format, and time format for $fm_name to use throughout all aspects of the app. What you select is\n\t\t\thow all dates and times will be display including any client configuration files.</p>\n\t\t\t<p><b>Show Errors</b><br />\n\t\t\tChoose whether you want $fm_name errors to be displayed as they occur or not. This can be useful if you are having trouble\n\t\t\tadding or editing opjects.</p>\n\t\t\t<p><b>Temporary Directory</b><br />\n\t\t\tPeriodically $fm_name and its modules may need to create temporary files or directories on your webserver. Specify the local path for it to use.</p>\n\t\t\t<p><b>Software Update</b><br />\n\t\t\tChoose whether you want $fm_name to automatically check for software updates or not.</p>\n\t\t\t<p><b>SSH Username</b><br />\n\t\t\tWhen servers are configured to receive updates via SSH, this username will be created (if not already present) on your clients\n\t\t\tand will be used for the client interaction.</p>\n\t\t\t<p><b>SSH Key Pair</b><br />\n\t\t\tIn order for client configs to be updated via SSH, $fm_name needs a 2048-bit passwordless key pair generated. Without this key pair, \n\t\t\tclients cannot use the SSH update method. Click the 'Generate' button to have $fm_name automatically generate the necessary key pair.</p>\n\t\t</div>\n\t</li>\n\t<li>\n\t\t<a class=\"list_title\">Review Logs</a>\n\t\t<div>\n\t\t\t<p>Every action performed within the $fm_name UI will be logged for auditing purposes.</p>\n\t\t\t<p>You can view and search the logs at Admin &rarr; <a href=\"__menu{Logs}\">Logs</a></p>\n\t\t</div>\n\t</li>\n</ul>\n\t\nHTML;\n\t\n\t/** Get module help file */\n\tif (isset($_SESSION['module']) && $_SESSION['module'] != $fm_name) {\n\t\t$functions_file = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $_SESSION['module'] . DIRECTORY_SEPARATOR . 'functions.php';\n\t\tif (is_file($functions_file)) {\n\t\t\tif (!function_exists('buildModuleHelpFile')) {\n\t\t\t\tinclude($functions_file);\n\t\t\t}\n\t\t\t$body .= @buildModuleHelpFile();\n\t\t} else {\n\t\t\t$body .= sprintf('<p>%s</p>', _('You have no modules installed.'));\n\t\t}\n\t}\n\n\treturn parseMenuLinks($body) . '<br />';\n}\n\n\n/**\n * Adds a UI log entry to the database\n *\n * @since 1.0\n * @package facileManager\n */\nfunction addLogEntry($log_data, $module = null) {\n\tglobal $fmdb, $__FM_CONFIG, $fm_name;\n\t\n\t$account_id = isset($_SESSION['user']['account_id']) ? $_SESSION['user']['account_id'] : 0;\n\t$user_name = isset($_SESSION['user']['name']) ? $_SESSION['user']['name'] : 0;\n\t$module = isset($module) ? $module : $_SESSION['module'];\n\t\n\t$log_method = getOption('log_method');\n\t\n\tif ($log_method != 1) {\n\t\t$insert = \"INSERT INTO `{$__FM_CONFIG['db']['name']}`.`fm_logs` VALUES (NULL, '$user_name', $account_id, '$module', \" . time() . \", '\" . sanitize($log_data) . \"')\";\n\t\tif (is_object($fmdb)) {\n\t\t\t$fmdb->query($insert);\n\t\t} else {\n\t\t\tdie(_('Lost connection to the database.'));\n\t\t}\n\t}\n\t\n\tif ($log_method) {\n\t\taddSyslogEntry(trim($log_data), $module);\n\t}\n}\n\n\n/**\n * Builds an array of available modules\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getAvailableModules() {\n\tglobal $fm_name;\n\t\n\t$modules = null;\n\t$module_dir = ABSPATH . 'fm-modules';\n\tif ($handle = opendir($module_dir)) {\n\t\t$blacklist = array('.', '..', 'shared', strtolower($fm_name));\n\t\twhile (false !== ($file = readdir($handle))) {\n\t\t\tif (!in_array(strtolower($file), $blacklist)) {\n\t\t\t\tif (is_dir($module_dir . DIRECTORY_SEPARATOR . $file)) {\n\t\t\t\t\t$modules[] = $file;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tclosedir($handle);\n\n\t\tif (count($modules)) {\n\t\t\tsort($modules);\n\t\t\treturn $modules;\n\t\t}\n\t}\n\t\n\treturn array();\n}\n\n/**\n * Returns an option value\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getOption($option = null, $account_id = 0, $module_name = null) {\n\tglobal $fmdb;\n\tif (!$fmdb) return false;\n\t\n\t$module_sql = ($module_name) ? \"AND module_name='$module_name'\" : null;\n\n\t$query = \"SELECT * FROM fm_options WHERE option_name='$option' AND account_id=$account_id $module_sql LIMIT 1\";\n\t$results = $fmdb->get_results($query);\n\t\n\tif ($fmdb->num_rows && !$fmdb->sql_errors) {\n\t\tif (isSerialized($results[0]->option_value)) {\n\t\t\treturn unserialize($results[0]->option_value);\n\t\t}\n\t\t\n\t\treturn $results[0]->option_value;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Sets an option value\n *\n * @since 1.0\n * @package facileManager\n */\nfunction setOption($option = null, $value = null, $insert_update = 'auto', $auto_serialize = true, $account_id = 0, $module_name = null) {\n\tglobal $fmdb;\n\t\n\tif ($auto_serialize) {\n\t\t$value = isSerialized($value) ? sanitize($value) : serialize($value);\n\t} else $value = sanitize($value);\n\t$option = sanitize($option);\n\t\n\t$module_sql = ($module_name) ? \"AND module_name='$module_name'\" : null;\n\t\n\tif ($insert_update == 'auto') {\n\t\t$query = \"SELECT * FROM fm_options WHERE option_name='$option' AND account_id=$account_id $module_sql\";\n\t\t$result = $fmdb->query($query);\n\t\t$insert_update = ($fmdb->num_rows) ? 'update' : 'insert';\n\t}\n\t\n\tif ($insert_update == 'insert') {\n\t\t$keys = array('account_id', 'option_name', 'option_value');\n\t\t$values = array($account_id, $option, $value);\n\t\tif ($module_name) {\n\t\t\t$keys[] = 'module_name';\n\t\t\t$values[] = $module_name;\n\t\t}\n\t\t$query = \"INSERT INTO fm_options (\" . implode(',', $keys) . \") VALUES ('\" . implode(\"','\", $values) . \"')\";\n\t} else {\n\t\t$query = \"UPDATE fm_options SET option_value='$value' WHERE option_name='$option' AND account_id=$account_id $module_sql\";\n\t}\n\t\n\treturn $fmdb->query($query);\n}\n\n/**\n * Check value to find if it was serialized.\n *\n * If $data is not an string, then returned value will always be false.\n * Serialized data is always a string.\n *\n * @since 1.0\n * @package facileManager\n *\n * @param mixed $data Value to check to see if was serialized.\n * @return bool False if not serialized and true if it was.\n */\nfunction isSerialized($data) {\n\t// if it isn't a string, it isn't serialized\n\tif (!is_string($data))\n\t\treturn false;\n\t$data = trim($data);\n\tif ('N;' == $data)\n\t\treturn true;\n\t$length = strlen($data);\n\tif ($length < 4)\n\t\treturn false;\n\tif (':' !== $data[1])\n\t\treturn false;\n\t$lastc = $data[$length-1];\n\tif (';' !== $lastc && '}' !== $lastc)\n\t\treturn false;\n\t$token = $data[0];\n\tswitch ($token ) {\n\t\tcase 's' :\n\t\t\tif ('\"' !== $data[$length-2])\n\t\t\t\treturn false;\n\t\tcase 'a' :\n\t\tcase 'O' :\n\t\t\treturn (bool) preg_match(\"/^{$token}:[0-9]+:/s\", $data);\n\t\tcase 'b' :\n\t\tcase 'i' :\n\t\tcase 'd' :\n\t\t\treturn (bool) preg_match(\"/^{$token}:[0-9.E-]+;\\$/\", $data);\n\t}\n\treturn false;\n}\n\n/**\n * Builds an array of active modules\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getActiveModules($allowed_modules = false) {\n\t$modules = getOption('fm_active_modules', $_SESSION['user']['account_id']);\n\t\n\tif ($modules !== false) {\n\t\t@sort($modules);\n\t\tif (!$allowed_modules) {\n\t\t\treturn $modules;\n\t\t}\n\t\t\n\t\t$user_capabilities = getUserCapabilities($_SESSION['user']['id'], 'all');\n\t\t$excluded_modules = array();\n\t\tforeach ($modules as $module_name) {\n\t\t\tif (!array_key_exists($module_name, $user_capabilities) && !currentUserCan('do_everything')) $excluded_modules[] = $module_name;\n\t\t}\n\t\treturn array_merge(array_diff($modules, $excluded_modules), array());\n\t} else {\n\t\treturn array();\n\t}\n}\n\n/**\n * Uninstalls a module\n *\n * @since 1.0\n * @package facileManager\n */\nfunction uninstallModuleSchema($database, $module) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\t$removes[] = <<<REMOVE\nDELETE FROM $database.`fm_options` WHERE `module_name` = '$module';\nREMOVE;\n\n\tforeach ($removes as $query) {\n\t\t$result = $fmdb->query($query);\n\t}\n\t\n\t/** Include module variables */\n\t@include(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'variables.inc.php');\n\t\n\t$query = \"SHOW TABLES FROM `{$__FM_CONFIG['db']['name']}` LIKE 'fm_{$__FM_CONFIG[$module]['prefix']}%'\";\n\t$result = $fmdb->get_results($query);\n\t$tables = $fmdb->last_result;\n\t$table_count = $fmdb->num_rows;\n\t\n\tfor ($i=0; $i<$table_count; $i++) {\n\t\t$table_info = get_object_vars($tables[$i]);\n\t\tsort($table_info);\n\t\t$drop_query = \"DROP TABLE `{$__FM_CONFIG['db']['name']}`.`{$table_info[0]}`\";\n\t\t$result = $fmdb->query($drop_query);\n\t\tif (!$fmdb->rows_affected) return false;\n\t}\n\t\n\t/** Delete entries from fm_options */\n\t$query = \"DELETE FROM `{$__FM_CONFIG['db']['name']}`.`fm_options` WHERE `module_name`='{$module}'\";\n\t$fmdb->query($query);\n\t\n\t/** Delete capability entries from fm_users */\n\t$query = \"SELECT * FROM `{$__FM_CONFIG['db']['name']}`.`fm_users`\";\n\t$fmdb->query($query);\n\t$count = $fmdb->num_rows;\n\t$result = $fmdb->last_result;\n\tfor ($i=0; $i<=$count; $i++) {\n\t\t$current_caps = isSerialized($result[$i]->user_caps) ? unserialize($result[$i]->user_caps) : $result[$i]->user_caps;\n\t\tif (array_key_exists($module, (array) $current_caps)) {\n\t\t\tunset($current_caps[$module]);\n\t\t\t$fmdb->query(\"UPDATE `{$__FM_CONFIG['db']['name']}`.`fm_users` SET user_caps='\" . serialize($current_caps) . \"' WHERE user_id=\" . $result[$i]->user_id);\n\t\t\tif (!$fmdb->rows_affected) return false;\n\t\t}\n\t}\n\t\n\treturn 'Success';\n}\n\n/**\n * Formats filesize\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $size Number to format\n * @return string\n */\nfunction formatSize($size) {\n\t$sizes = array(\" Bytes\", \" KB\", \" MB\", \" GB\", \" TB\", \" PB\", \" EB\", \" ZB\", \" YB\");\n\tif ($size == 0) {\n\t\treturn('n/a');\n\t} else {\n\t\treturn (round($size/pow(1024, ($i = floor(log($size, 1024)))), $i > 1 ? 2 : 0) . $sizes[$i]);\n\t}\n}\n\n\n/**\n * Forms the date menu\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $date Date to format\n * @return string\n */\nfunction buildDateMenu($date = null) {\n\t$uri = $hidden = null;\n\tforeach ($GLOBALS['URI'] as $key => $value) {\n\t\tif (empty($key)) continue;\n\t\tif ($key == 'date') continue;\n\t\t$uri .= $key . '=' . $value . '&';\n\t\t$hidden .= '<input type=\"hidden\" name=\"' . $key . '\" value=\"' . $value . '\" />' . \"\\n\";\n\t}\n\t$uri = rtrim($uri, '&');\n\t\n\tif ($date) {\n\t\t$current_date = date(\"m/d/Y\", strtotime($date));\n\t\t$next_date = date(\"Y-m-d\", strtotime(\"$current_date + 1 day\"));\n\t\t$previous_date = date(\"Y-m-d\", strtotime(\"$current_date - 1 day\"));\n\t} else {\n\t\t$current_date = date(\"m/d/Y\");\n\t\t$next_date = date(\"Y-m-d\", strtotime(\"tomorrow\"));\n\t\t$previous_date = date(\"Y-m-d\", strtotime(\"yesterday\"));\n\t}\n\n\t$next = sprintf('<a href=\"?%s&date=%s\">%s</a>', $uri, $next_date, _('next &rarr;'));\n\t$previous = sprintf('<a href=\"?%s&date=%s\">%s</a>', $uri, $previous_date, _('&larr; previous'));\n\t\n\t$date_menu = <<<HTML\n\t<div id=\"datemenu\">\n\t\t<form action=\"\" method=\"get\">\n\t\t\t$hidden\n\t\t\t$previous\n\t\t\t<input name=\"date\" type=\"text\" class=\"datepicker\" value=\"$current_date\" style=\"width: 7em;\" onchange=\"this.form.submit()\" />\n\t\t\t$next\n\t\t</form>\n\t</div>\nHTML;\n\n\treturn $date_menu;\n}\n\n\n/**\n * Generates a server serial number\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $module Module to use\n * @return int\n */\nfunction generateSerialNo($module = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\n\tif ($module) {\n\t\twhile(1) {\n\t\t\tif (array_key_exists('server_name', $_POST) && defined('CLIENT')) {\n\t\t\t\t$get_query = \"SELECT * FROM `fm_{$__FM_CONFIG[$module]['prefix']}servers` WHERE `server_status`!='deleted' AND account_id='\" . getAccountID(sanitize($_POST['AUTHKEY'])) . \"' AND `server_name`='\" . sanitize($_POST['server_name']) . \"'\";\n\t\t\t\t$array = $fmdb->get_results($get_query);\n\t\t\t\tif ($fmdb->num_rows) {\n\t\t\t\t\treturn $array[0]->server_serial_no;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$serialno = rand(100000000, 999999999);\n\t\t\t\n\t\t\t/** Ensure the serial number does not exist in any of the server tables */\n\t\t\t$result = $fmdb->get_results(\"SELECT table_name AS table_name FROM information_schema.tables t WHERE t.table_schema = '{$__FM_CONFIG['db']['name']}' AND t.table_name LIKE 'fm_%_servers'\");\n\t\t\t$table_count = $fmdb->num_rows;\n\t\t\t$taken = true;\n\t\t\tfor ($i=0; $i<$table_count; $i++) {\n\t\t\t\tbasicGet($result[$i]->table_name, $serialno, 'server_', 'server_serial_no', null, 1);\n\t\t\t\tif (!$fmdb->num_rows) $taken = false;\n\t\t\t}\n\t\t\tif (!$taken) return $serialno;\n\t\t}\n\t}\n}\n\n\n/**\n * Returns the server serial number\n *\n * @since 1.0\n * @package facileManager\n *\n * @param int $server_id Server ID to process\n * @param string $module Module to use\n * @return string\n */\nfunction getServerSerial($server_id, $module = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\tif ($module) {\n\t\tbasicGet('fm_' . $__FM_CONFIG[$module]['prefix'] . 'servers', $server_id, 'server_', 'server_id');\n\t\tif ($fmdb->num_rows) {\n\t\t\t$result = $fmdb->last_result;\n\t\t\treturn $result[0]->server_serial_no;\n\t\t}\n\t}\n}\n\n\n/**\n * Returns the server ID\n *\n * @since 1.0\n * @package facileManager\n *\n * @param int $server_serial_no Server serial number to process\n * @param string $module Module to use\n * @return string\n */\nfunction getServerID($server_serial_no, $module = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\tif ($module) {\n\t\tbasicGet('fm_' . $__FM_CONFIG[$module]['prefix'] . 'servers', $server_serial_no, 'server_', 'server_serial_no');\n\t\tif ($fmdb->num_rows) {\n\t\t\t$result = $fmdb->last_result;\n\t\t\treturn $result[0]->server_id;\n\t\t}\n\t}\n}\n\n\n/**\n * Checks multiple keys in an array\n *\n * @since 1.0\n * @package facileManager\n *\n * @param array $keys Keys to check\n * @param array $array Array to search\n * @return bool\n */\nfunction arrayKeysExist($keys, $array) {\n\tforeach ($keys as $key) {\n\t\tif (array_key_exists($key, $array)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n/**\n * Displays pagination\n *\n * @since 1.0\n * @package facileManager\n *\n * @param integer $page Current page\n * @param integer $total_pages Total number of pages\n * @param string $classes Additional classes to apply to the div\n * @param string $position Additional blocks to be on left or right\n * @return string\n */\nfunction displayPagination($page, $total_pages, $addl_blocks = null, $classes = null, $position = 'left') {\n\tglobal $fmdb;\n\t\n\t$page_params = null;\n\tforeach ($GLOBALS['URI'] as $key => $val) {\n\t\tif (!$key || $key == 'p') continue;\n\t\t$page_params .= $key . '=' . $val . '&';\n\t}\n\t\n\tif ($page < 1) {\n\t\t$page = 1;\n\t}\n\tif ($page > $total_pages) {\n\t\t$page = $total_pages;\n\t}\n\t\n\t$page_links = array();\n\t$page_links[] = '<div id=\"pagination_container\">';\n\t$page_links[] = '<div>';\n\tif ($position == 'right') {\n\t\t$page_links[] = buildPaginationCountMenu(0, 'pagination');\n\t\tif ($addl_blocks) $addl_blocks = (array) $addl_blocks;\n\t\tarray_unshift($addl_blocks, null);\n\t}\n\tif (isset($addl_blocks)) {\n\t\tforeach ((array) $addl_blocks as $block) {\n\t\t\t$page_links[] = '<div>' . $block . '</div>';\n\t\t}\n\t}\n\tif ($position == 'left') $page_links[] = buildPaginationCountMenu(0, 'pagination');\n\n\t$page_links[] = '<div id=\"pagination\" class=\"' . $classes . '\">';\n\t$page_links[] = '<form id=\"pagination_search\" method=\"GET\" action=\"' . $GLOBALS['basename'] . '?' . $page_params . '\">';\n\t$page_links[] = sprintf('<span>%s</span>', sprintf(ngettext('%d item', '%d items', $fmdb->num_rows), formatNumber($fmdb->num_rows)));\n\n\t/** Previous link */\n\tif ($page > 1 && $total_pages > 1) {\n\t\t$page_links[] = '<a href=\"' . $GLOBALS['basename'] . \"?{$page_params}p=1\\\">&laquo;</a>\";\n\t\t$page_links[] = '<a href=\"' . $GLOBALS['basename'] . \"?{$page_params}p=\" . ($page - 1) . '\">&lsaquo;</a>';\n\t}\n\t\n\t/** Page number */\n\t$page_links[] = '<input id=\"paged\" type=\"text\" value=\"' . $page . '\" /> of ' . formatNumber($total_pages);\n\t\n\t/** Next link */\n\tif ($page < $total_pages) {\n\t\t$page_links[] = '<a href=\"' . $GLOBALS['basename'] . \"?{$page_params}p=\" . ($page + 1) . '\">&rsaquo;</a>';\n\t\t$page_links[] = '<a href=\"' . $GLOBALS['basename'] . \"?{$page_params}p=\" . $total_pages . '\">&raquo;</a>';\n\t}\n\n\t$page_links[] = '</form>';\n\t$page_links[] = '</div>';\n\t$page_links[] = '</div>';\n\t$page_links[] = '</div>';\n\t\n\treturn join(\"\\n\", $page_links);\n}\n\n\n/**\n * Builds the server listing in a dropdown menu\n *\n * @since 1.0\n * @package facileManager\n */\nfunction buildPaginationCountMenu($server_serial_no = 0, $class = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\t$record_count = buildSelect('rc', 'rc', $__FM_CONFIG['limit']['records'], $_SESSION['user']['record_count'], 1, null, false, 'this.form.submit()');\n\t\n\t$hidden_inputs = null;\n\tforeach ($GLOBALS['URI'] as $param => $value) {\n\t\tif ($param == 'rc') continue;\n\t\t$hidden_inputs .= '<input type=\"hidden\" name=\"' . $param . '\" value=\"' . $value . '\" />' . \"\\n\";\n\t}\n\t\n\t$class = $class ? 'class=\"' . $class . '\"' : null;\n\n\t$return = sprintf('<div id=\"configtypesmenu\" %s>\n\t\t<form action=\"%s\" method=\"GET\">\n\t\t%s\n\t\t%s %s\n\t\t</form>\n\t</div>',\n\t\t\t$class, $GLOBALS['basename'], $hidden_inputs,\n\t\t\t$record_count, _('items per page')\n\t\t);\n\n\treturn $return;\n}\n\n\n/**\n * Displays error message\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $message Message to display\n * @param string $tryagain Include the Try Again button\n * @param string $title Error message title to display\n * @return null\n */\nfunction bailOut($message, $tryagain = 'try again', $title = null) {\n\tglobal $fm_name;\n\t\n\tif (!$title) $title = _('Requirement Error');\n\t\n\tif (strpos($message, '<') != 0) {\n\t\t$message = \"<p>$message</p>\";\n\t}\n\t\n\tif ($tryagain == 'try again') {\n\t\t$tryagain = sprintf('<p class=\"step\"><a href=\"%s\" class=\"button\">%s</a></p>',\n\t\t\t$_SERVER['PHP_SELF'], _('Try Again'));\n\t} else {\n\t\t$tryagain = null;\n\t}\n\t\n\tprintHeader($title, 'install');\n\tprintf('<div id=\"fm-branding\">\n\t\t<img src=\"%s\" /><span>%s</span>\n\t</div>\n\t<div id=\"window\">%s%s</div>', getBrandLogo(), $title, $message, $tryagain);\n\texit(printFooter());\n}\n\n\n/**\n * Displays progress\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $step Step message\n * @param string $result Result of step\n * @param boolean $noisy Whether the result should be echoed\n * @param string $error Message to display as the tooltip\n * @return string\n */\nfunction displayProgress($step, $result, $process = 'noisy', $error = null) {\n\tif ($result === true) {\n\t\t$output = '<i class=\"fa fa-check fa-lg\"></i>';\n\t\t$status = 'success';\n\t} else {\n\t\tglobal $fmdb;\n\t\t\n\t\tif (!$error) {\n\t\t\tif (is_object($fmdb)) {\n\t\t\t\t$error = $fmdb->last_error;\n\t\t\t}\n\t\t}\n\t\tif ($error) {\n\t\t\t$output = '<a href=\"#\" class=\"error-message tooltip-right\" data-tooltip=\"' . $error . '\"><i class=\"fa fa-times fa-lg\"></i></a>';\n\t\t} else {\n\t\t\t$output = '<i class=\"fa fa-times fa-lg\"></i>';\n\t\t}\n\t\t$status = 'failed';\n\t}\n\t\n\t$message = <<<HTML\n\t<tr>\n\t\t<th>$step</th>\n\t\t<td class=\"status $status\">$output</td>\n\t</tr>\n\nHTML;\n\n\tif ($process == 'noisy') {\n\t\techo $message;\n\t\treturn $result;\n\t} elseif ($process == 'display') {\n\t\treturn $message;\n\t} else return $result;\n}\n\n\n/**\n * Checks if PEAR is installed\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $package Additional PEAR package to check\n * @return boolean\n */\n/**\nfunction isPearInstalled($packages = null){\n\trequire_once 'System.php';\n\tif (!class_exists('System', false)) return false;\n\t\n\tif ($packages) {\n\t\t$packages = is_array($packages) ? $packages : array($packages);\n\t\tforeach ($packages as $pear_package) {\n\t\t\texec(findProgram('pear') . ' info ' . $pear_package, $output, $retval);\n\t\t\tif ($retval) return false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n */\n\n\n/**\n * Checks if an email address is valid\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $address Email address to validate\n * @return boolean\n */\nfunction isEmailAddressValid($address){\n\treturn filter_var($address, FILTER_VALIDATE_EMAIL);\n}\n\n\n/**\n * Checks if fM is running behind SSL or not supports load-balancers\n *\n * @since 1.0\n * @package facileManager\n *\n * @return boolean\n */\nfunction isSiteSecure(){\n\tif (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') {\n\t    return true;\n\t} elseif (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' || !empty($_SERVER['HTTP_X_FORWARDED_SSL']) && $_SERVER['HTTP_X_FORWARDED_SSL'] == 'on') {\n\t    return true;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Gets the table column length\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $tbl_name Table name to check\n * @param string $column_name Column name to check\n * @return integer\n */\nfunction getColumnLength($tbl_name, $column_name) {\n\tglobal $fmdb;\n\t\n\t$query = \"SHOW COLUMNS FROM $tbl_name LIKE '$column_name'\";\n\t$result = $fmdb->get_results($query);\n\t\n\t$thisrow = $result[0];\n\t$valuestring = $thisrow->Type;\n\t\n\t/** No limit */\n\tif (strpos($thisrow->Type, 'varchar') === false) return false;\n\t\n\treturn str_replace(array('varchar', '(', ')', \"'\"), '', $valuestring);\n}\n\n\n/**\n * Checks if an IP Address is valid\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $ip_address IP Address to check\n * @return boolean\n */\nfunction verifyIPAddress($ip_address) {\n\treturn verifySimpleVariable($ip_address, FILTER_VALIDATE_IP);\n}\n\n\n/**\n * Checks number validity\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $number Number to check\n * @param string $min_range Minimum number in the range\n * @param string $max_range Maximum number in the range\n * @param boolean $decimal_allowed Are decimals allowed\n * @return boolean\n */\nfunction verifyNumber($number, $min_range = 0, $max_range = null, $decimal_allowed = true) {\n\tif ($min_range >= 0 && $max_range != null) {\n\t\tif (!$decimal_allowed) {\n\t\t\treturn filter_var($number, FILTER_VALIDATE_INT, array('options' => array('min_range' => $min_range, 'max_range' => $max_range)));\n\t\t} else {\n\t\t\treturn filter_var($number, FILTER_VALIDATE_INT, array('options' => array('min_range' => $min_range, 'max_range' => $max_range)));\n\t\t}\n\t} else {\n\t\treturn filter_var($number, FILTER_VALIDATE_INT);\n\t}\n}\n\n\n/**\n * Runs data through a filter check\n *\n * @since 3.1\n * @package facileManager\n *\n * @param string $data Address to check\n * @param mixed $filter_type PHP filter type to use\n * @return boolean\n */\nfunction verifySimpleVariable($data, $filter_type) {\n\treturn filter_var($data, $filter_type);\n}\n\n\n/**\n * Builds a form for app settings\n *\n * @since 1.0\n * @package facileManager\n *\n * @param array $saved_options Settings pulled from the database\n * @param array $default_options Default settings\n * @return string\n */\nfunction buildSettingsForm($saved_options, $default_options) {\n\t$option_rows = $current_parent = null;\n\t\n\tforeach ($default_options as $option => $options_array) {\n\t\t$option_row_head = null;\n\t\t$option_value = array_key_exists($option, $saved_options) ? $saved_options[$option] : $options_array['default_value'];\n\t\t\n\t\tif (is_array($option_value)) {\n\t\t\t$temp_value = null;\n\t\t\tforeach ($option_value as $value) {\n\t\t\t\t$temp_value .= $value . \"\\n\";\n\t\t\t}\n\t\t\t$option_value = rtrim($temp_value);\n\t\t}\n\n\t\t$div_style = 'style=\"display: none;\"';\n\t\t\n\t\tswitch($options_array['type']) {\n\t\t\tcase 'textarea':\n\t\t\t\t$input_field = '<textarea name=\"' . $option . '\" id=\"' . $option . '\" type=\"' . $options_array['type'] . '\">' . $option_value . '</textarea>';\n\t\t\t\tbreak;\n\t\t\tcase 'checkbox':\n\t\t\t\t$checked = $option_value == 'yes' ? 'checked' : null;\n\t\t\t\t$input_field = '<input name=\"' . $option . '\" type=\"hidden\" value=\"no\" />';\n\t\t\t\t$input_field .= '<label><input name=\"' . $option . '\" id=\"' . $option . '\" type=\"' . $options_array['type'] . '\" value=\"yes\" ' . $checked . ' />' . $options_array['description'][0] . '</label>';\n\t\t\t\tif (isset($options_array['show_children_when_value']) && $options_array['show_children_when_value'] == $checked) {\n\t\t\t\t\t$show_children[$option] = 'style=\"display: block;\"';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'select':\n\t\t\t\t$input_field = buildSelect($option, $option, $options_array['options'], $option_value);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$size = (isset($options_array['size'])) ? $options_array['size'] : 40;\n\t\t\t\t$addl = (isset($options_array['addl'])) ? $options_array['addl'] : null;\n\t\t\t\t$input_field = '<input name=\"' . $option . '\" id=\"' . $option . '\" type=\"' . $options_array['type'] . '\" value=\"' . $option_value . '\" size=\"' . $size . '\" ' . $addl . ' />';\n\t\t}\n\t\tif (array_key_exists('parent', $options_array)) {\n\t\t\tif ($options_array['parent'] === true && $option_rows) {\n\t\t\t\t$option_row_head = '</div><div id=\"settings-section\">' . \"\\n\";\n\t\t\t} elseif ($options_array['parent'] !== true) {\n\t\t\t\tif ($current_parent != $options_array['parent']) {\n\t\t\t\t\tif ($show_children[$options_array['parent']]) {\n\t\t\t\t\t\t$div_style = $show_children[$options_array['parent']];\n\t\t\t\t\t}\n\t\t\t\t\t$option_row_head = sprintf('<div id=\"%s_options\" %s>', $options_array['parent'], $div_style);\n\t\t\t\t\t$current_parent = $options_array['parent'];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ($current_parent) {\n\t\t\t\t$option_row_head = \"</div>\\n\";\n\t\t\t}\n\t\t\t$current_parent = null;\n\t\t}\n\t\t$option_rows .= <<<ROW\n\t\t\t$option_row_head\n\t\t\t<div id=\"setting-row\">\n\t\t\t\t<div class=\"description\">\n\t\t\t\t\t<label for=\"$option\">{$options_array['description'][0]}</label>\n\t\t\t\t\t<p>{$options_array['description'][1]}</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"choices\">\n\t\t\t\t\t$input_field\n\t\t\t\t</div>\n\t\t\t</div>\n\nROW;\n\t}\n\t\n\treturn ($option_rows) ? '<div id=\"settings-section\">' . $option_rows . '</div>' : null;\n}\n\n\n/**\n * Compresses a file\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $filename Name of the file to compress\n * @param string $contents File contents to compress\n * @return null\n */\nfunction compressFile($filename, $contents) {\n\t$compressed_filename = $filename . '.gz';\n\t\n\t$fp = gzopen($compressed_filename, 'w9');\n\tgzwrite($fp, file_get_contents($filename));\n\tgzclose($fp);\n}\n\n\n/**\n * Sends a file to the browser for download\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $filename Name of the file to compress\n * @param string $contents File contents to compress\n * @return file\n */\nfunction sendFileToBrowser($filename) {\n\tif (is_file($filename)) {\n\t\theader('Content-type: application/octet-stream');\n\t\theader('Content-Disposition: attachment; filename=' . basename($filename));\n\t\theader('Content-Transfer-Encoding: binary');\n\t\theader('Expires: 0');\n\t\theader('Cache-Control: must-revalidate');\n\t\theader('Pragma: public');\n\t\theader('Content-Length: ' . filesize($filename));\n\t\tob_clean();\n\t\tflush();\n\t\treadfile($filename);\n\t\t@unlink($filename);\n\t\texit;\n\t}\n}\n\n\n/**\n * Returns an icon for the server OS\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $server_os Server OS to return the icon for\n * @return string\n */\nfunction setOSIcon($server_os) {\n\tglobal $fm_name;\n\t\n\t$os_name = array('openSUSE', 'Raspberry Pi', 'Raspbian');\n\t$os_image = array('SUSE', 'RaspberryPi', 'RaspberryPi');\n\t\n\t$os = file_exists(ABSPATH . 'fm-modules/' . $fm_name . '/images/os/' . str_replace($os_name, $os_image, $server_os) . '.png') ? $server_os : 'unknown';\n\t$os_image = '<img src=\"fm-modules/' . $fm_name . '/images/os/' . str_replace($os_name, $os_image, $os) . '.png\" border=\"0\" alt=\"' . $os . '\" title=\"' . $os . '\" width=\"18\" />';\n\t\n\treturn $os_image;\n}\n\n\n/**\n * Displays the page header\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $response Page form response\n * @param string $title The page title\n * @param bool $allowed_to_add Whether the user can add new\n * @param string $name Name value of plus sign\n * @param string $rel Rel value of plus sign\n * @param string $scroll Scroll or noscroll\n * @return string\n */\nfunction printPageHeader($response = null, $title = null, $allowed_to_add = false, $name = null, $rel = null, $scroll = null) {\n\tglobal $__FM_CONFIG;\n\t\n\tif (empty($title)) $title = getPageTitle();\n\t\n\t$style = (empty($response)) ? 'style=\"display: none;\"' : null;\n\tif (strpos($response, '</p>') === false || strpos($response, _('Database error')) !== false) {\n\t\t$response = displayResponseClose($response);\n\t}\n\n\techo '<div id=\"body_container\"';\n\tif ($scroll == 'noscroll') echo ' class=\"fm-noscroll\" style=\"padding-bottom: 0;\"';\n\techo '>' . \"\\n\";\n\techo '<div id=\"response\" ' . $style . '>' . $response . \"</div>\\n\";\n\techo '<h2>' . $title;\n\t\n\tif ($allowed_to_add) {\n\t\techo displayAddNew($name, $rel);\n\t}\n\t\n\techo '</h2>' . \"\\n\";\n}\n\n\n/**\n * Sets server build config flag\n *\n * @since 1.0\n * @package facileManager\n *\n * @param integer $serial_no Server serial number\n * @param string $flag Flag to set (yes or no)\n * @param string $build_update Are we building or updating\n * @param integer $domain_id Domain ID to update DNS servers for\n * @return boolean\n */\nfunction setBuildUpdateConfigFlag($serial_no, $flag, $build_update, $__FM_CONFIG = null) {\n\tglobal $fmdb;\n\t\n\tif (!$__FM_CONFIG) global $__FM_CONFIG;\n\t\n\t$serial_no = sanitize($serial_no);\n\t/** Process server group */\n\tif (!empty($serial_no) && $serial_no[0] == 'g') {\n\t\tglobal $fm_module_servers;\n\n\t\tif (!class_exists('fm_module_servers')) {\n\t\t\tinclude_once(ABSPATH . 'fm-modules/' . $_SESSION['module'] . '/classes/class_servers.php');\n\t\t}\n\t\t\n\t\t$group_servers = $fm_module_servers->getGroupServers(substr($serial_no, 2));\n\n\t\tif (!is_array($group_servers)) return false;\n\n\t\tsetBuildUpdateConfigFlag(implode(',', $group_servers), $flag, $build_update, $__FM_CONFIG);\n\n\t\treturn true;\n\t}\n\n\tif ($serial_no) {\n\t\t$query = \"UPDATE `fm_{$__FM_CONFIG[$_SESSION['module']]['prefix']}servers` SET `server_\" . $build_update . \"_config`='\" . $flag . \"' WHERE `server_serial_no` IN (\" . $serial_no . \") AND `server_installed`='yes'\";\n\t} else {\n\t\t$query = \"UPDATE `fm_{$__FM_CONFIG[$_SESSION['module']]['prefix']}servers` SET `server_\" . $build_update . \"_config`='\" . $flag . \"' WHERE `server_installed`='yes' AND `server_status`='active'\";\n\t}\n\t$result = $fmdb->query($query);\n\t\n\tif ($fmdb->result) {\n\t\tif (isset($GLOBALS[$_SESSION['module']]['DNSSEC'])) {\n\t\t\tforeach ($GLOBALS[$_SESSION['module']]['DNSSEC'] as $items) {\n\t\t\t\tbasicUpdate(\"fm_{$__FM_CONFIG[$_SESSION['module']]['prefix']}domains\", $items['domain_id'], 'domain_dnssec_signed', $items['domain_dnssec_signed'], 'domain_id');\n\t\t\t\tif ($fmdb->sql_errors || !$fmdb->result) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n/**\n * Sets the timezone\n *\n * @since 1.0\n * @package facileManager\n *\n * @return null\n */\nfunction setTimezone() {\n\tif (isset($_SESSION['user'])) {\n\t\t$default_timezone = getOption('timezone', $_SESSION['user']['account_id']);\n\t}\n\tif (!empty($default_timezone)) {\n\t\tdate_default_timezone_set($default_timezone);\n\t} else {\n\t\tif (ini_get('date.timezone')) {\n\t\t\tdate_default_timezone_set(ini_get('date.timezone'));\n\t\t} else {\n\t\t\tdate_default_timezone_set('UTC');\n\t\t}\n\t}\n}\n\n\n/**\n * Resets the user password.\n *\n * @since 1.0\n * @package facileManager\n */\nfunction resetPassword($fm_login, $user_password) {\n\tglobal $fmdb;\n\t\n\tif ($user_info = getUserInfo($fm_login, 'user_login')) {\n\t\t$fm_login_id = $user_info['user_id'];\n\n\t\t/** Update password */\n\t\t$query = \"UPDATE `fm_users` SET `user_password`='\" . password_hash($user_password, PASSWORD_DEFAULT) . \"', `user_force_pwd_change`='no' WHERE `user_id`='$fm_login_id'\";\n\t\t$fmdb->query($query);\n\n\t\tif ($fmdb->rows_affected) {\n\t\t\t/** Remove entry from fm_pwd_resets table */\n\t\t\t$query = \"DELETE FROM `fm_pwd_resets` WHERE `pwd_login`='$fm_login_id'\";\n\t\t\t$fmdb->query($query);\n\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Gets menu badge counts\n *\n * @since 1.1\n * @package facileManager\n *\n * @return array\n */\nfunction getBadgeCounts($type) {\n\tglobal $fm_name;\n\t\n\t$badge_count = 0;\n\t\n\tif (!defined('INSTALL') && !defined('UPGRADE')) {\n\t\tif ($type == 'core') {\n\t\t\tinclude(ABSPATH . 'fm-includes/version.php');\n\t\t\t\n\t\t\t/** New versions available */\n\t\t\tif (isNewVersionAvailable($fm_name, $fm_version)) $badge_count++;\n\t\t}\n\t\tif ($type == 'modules') {\n\t\t\t/** Get fM badge counts */\n\t\t\t$modules = getAvailableModules();\n\t\t\tforeach ($modules as $module_name) {\n\t\t\t\t/** Include module variables */\n\t\t\t\t@include(ABSPATH . 'fm-modules/' . $module_name . '/variables.inc.php');\n\t\t\t\t\n\t\t\t\t/** Upgrades waiting */\n\t\t\t\t$module_version = getOption('version', 0, $module_name);\n\t\t\t\tif ($module_version !== false) {\n\t\t\t\t\tif (version_compare($module_version, $__FM_CONFIG[$module_name]['version'], '<')) {\n\t\t\t\t\t\t$badge_count++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$module_version = $__FM_CONFIG[$module_name]['version'];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/** New versions available */\n\t\t\t\tif (isNewVersionAvailable($module_name, $module_version)) $badge_count++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn $badge_count;\n}\n\n\n/**\n * Builds bulk action menu\n *\n * @since 1.1\n * @package facileManager\n *\n * @return array\n */\nfunction buildBulkActionMenu($bulk_actions_list = null, $id = 'bulk_action') {\n\tif (is_array($bulk_actions_list)) {\n\t\t$bulk_actions[] = null;\n\t\t\n\t\treturn buildSelect($id, 'bulk_action', array_merge($bulk_actions, $bulk_actions_list), null, 1, '', false, null, null, _('Bulk Actions')) . \n\t\t\t'<input type=\"submit\" name=\"bulk_apply\" id=\"bulk_apply\" value=\"' . _('Apply') . '\" class=\"button\" />' . \"\\n\";\n\t}\n}\n\n\n/**\n * Takes text and strips html and whitespace\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $text Text to clean up\n * @param boolean $make_array Whether the output should be an array or not\n * @return array\n */\nfunction makePlainText($text, $make_array = false) {\n\t$text = strip_tags((string) $text);\n\t$text = trim($text);\n\t\n\tif ($make_array == true) return explode(\"\\n\", $text);\n\t\n\treturn $text;\n}\n\n\n/**\n * Displays a table header\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $table_info Values to build the <table> tag\n * @param array $head_values Values to build the <th> tags\n * @param string $tbody_id id for <tbody>\n * @return string\n */\nfunction displayTableHeader($table_info, $head_values, $tbody_id = null) {\n\tif ($tbody_id) $tbody_id = ' id=\"' . $tbody_id . '\"';\n\t\n\t$sort_direction = isset($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction']) ? strtolower($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction']) : 'asc';\n\t\n\t$parameters = null;\n\tif (is_array($table_info)) {\n\t\tforeach ($table_info as $parameter => $value) {\n\t\t\t$parameters .= ' ' . $parameter . '=\"' . $value . '\"';\n\t\t}\n\t}\n\t$html = '<table' . $parameters . \">\\n\";\n\t$html .= \"<thead>\\n<tr>\\n\";\n\t\n\tforeach ($head_values as $thead) {\n\t\t$parameters = null;\n\t\tif (is_array($thead)) {\n\t\t\t$temp_array = $thead;\n\t\t\t$thead = null;\n\t\t\tforeach ($temp_array as $parameter => $value) {\n\t\t\t\tif ($parameter == 'title') {\n\t\t\t\t\t$thead = $value;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$parameters .= (is_null($value)) ? ' ' . $parameter : ' ' . $parameter . '=\"' . $value . '\"';\n\t\t\t\tif ($parameter == 'rel') {\n\t\t\t\t\tif (isset($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_field']) &&\n\t\t\t\t\t\t$value == $_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_field']) {\n\t\t\t\t\t\t\t$parameters .= ' id=\"header-sorted\"';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$html .= \"<th$parameters>$thead <i class=\\\"$sort_direction\\\"></i></th>\\n\";\n\t}\n\t$html .= \"</tr>\\n</thead>\\n<tbody$tbody_id>\\n\";\n\t\n\treturn $html;\n}\n\n\n/**\n * Displays a table header\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $table_info Values to build the <table> tag\n * @param array $head_values Values to build the <th> tags\n * @param string $tbody_id id for <tbody>\n * @return string\n */\nfunction handleSortOrder() {\n\tif (array_key_exists('sort_by', $_GET)) {\n\t\t$swap_direction = array('ASC' => 'DESC', 'DESC' => 'ASC');\n\n\t\tif (isset($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_field']) &&\n\t\t\t$_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_field'] != $_GET['sort_by']) {\n\t\t\t$sort_direction = $swap_direction[$_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction']];\n\t\t} elseif (isset($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction'])) {\n\t\t\t$sort_direction = $_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction'];\n\t\t} else {\n\t\t\t$sort_direction = 'DESC';\n\t\t}\n\t\t@session_start();\n\t\t$_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']] = array(\n\t\t\t\t'sort_field' => $_GET['sort_by'], 'sort_direction' => $swap_direction[$sort_direction]\n\t\t\t);\n\t\tsession_write_close();\n\t}\n\t\n\t$temp_uri = str_replace(array('?sort_by=' . $_GET['sort_by'], '&sort_by=' . $_GET['sort_by']), '', $_SERVER['REQUEST_URI']);\n\t\n\theader('Location: ' . $temp_uri);\n}\n\n\n/**\n * Formats log data\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $strip Text to strip out\n * @param string $key Logging key\n * @param string $data Logging data\n * @return string\n */\nfunction formatLogKeyData($strip, $key, $data) {\n\treturn ucwords(str_replace('_', ' ', str_replace($strip, '', $key))) . \": $data\\n\";\n}\n\n\n/**\n * Displays an error page message\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $message Text to display\n * @param string $link_display Show or Hide the page back link\n * @return string\n */\nfunction fMDie($message = null, $link_display = 'show', $title = null) {\n\tglobal $fm_name;\n\t\n\tif (!$message) $message = _('An unknown error occurred.');\n\tif (!$title) $title = _('Oops!');\n\t\n\tprintHeader('Error', 'install', 'no-help', 'no-menu');\n\t\n\tprintf('<div id=\"fm-branding\"><img src=\"%s\" /><span>%s</span></div>\n\t\t<div id=\"window\"><p>%s</p>', getBrandLogo(), $title, $message);\n\tif ($link_display == 'show') echo '<p><a href=\"javascript:history.back();\">' . _('&larr; Back') . '</a></p>';\n\techo '</div>';\n\t\n\texit;\n}\n\n\n/**\n * Displays an error page message\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $link_display Show or Hide the page back link\n * @return string\n */\nfunction unAuth($link_display = 'show') {\n\tfMDie(_('You do not have permission to view this page. Please contact your administrator for access.'), $link_display, _('Forbidden'));\n}\n\n\n/**\n * Whether current user has capability\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $capability Capability name.\n * @param string $module Module name to check capability for\n * @param string $extra_perm Extra capability to check\n * @return boolean\n */\nfunction currentUserCan($capability, $module = 'facileManager', $extra_perm = null) {\n\tif (!isset($_SESSION['user'])) {\n\t\treturn false;\n\t}\n\treturn userCan($_SESSION['user']['id'], $capability, $module, $extra_perm);\n}\n\n\n/**\n * Whether a user has capability\n *\n * @since 1.2\n * @package facileManager\n *\n * @param integer $user_id User ID to check.\n * @param string|array $capability Capability name.\n * @param string $module Module name to check capability for\n * @param string $extra_perm Extra capability to check\n * @return boolean\n */\nfunction userCan($user_id, $capability, $module = 'facileManager', $extra_perm = null) {\n\tglobal $fm_name;\n\t\n\t/** If no capability defined then return true */\n\tif ($capability === null) return true;\n\t\n\t/** If no authentication then return full access */\n\tif (!getOption('auth_method')) return true;\n\t\n\t/** Return true if group can */\n\tif ($group_id = getNameFromID($user_id, 'fm_users', 'user_', 'user_id', 'user_group')) {\n\t\tif (groupCan($group_id, $capability, $module, $extra_perm)) return true;\n\t}\n\t\n\t$user_capabilities = getUserCapabilities($user_id);\n\t\n\treturn userGroupCan($user_id, $capability, $module, $extra_perm, $user_capabilities);\n}\n\n\n/**\n * Gets the user capabilities\n *\n * @since 1.2\n * @package facileManager\n *\n * @param integer $user_id User ID to retrieve.\n * @param string $type User, group, or all\n * @return array\n */\nfunction getUserCapabilities($user_id, $type = 'user') {\n\tif ($type == 'all') {\n\t\tif ($group_id = getNameFromID($user_id, 'fm_users', 'user_', 'user_id', 'user_group')) {\n\t\t\treturn getUserCapabilities($group_id, 'group');\n\t\t}\n\t\t$type = 'user';\n\t}\n\t$user_capabilities = getNameFromID($user_id, 'fm_' . $type . 's', $type . '_', $type . '_id', $type . '_caps');\n\tif (isSerialized($user_capabilities)) $user_capabilities = unserialize($user_capabilities);\n\t\n\treturn (array) $user_capabilities;\n}\n\n\n/**\n * Handles features defined in config.inc.php\n *\n * @since 1.2\n * @package facileManager\n */\nfunction handleHiddenFlags() {\n\tglobal $fm_name;\n\t\n\t/** Recover authentication in case of lockout */\n\tif (defined('FM_NO_AUTH') && FM_NO_AUTH) {\n\t\tsetOption('auth_method', 0);\n\t\t@addLogEntry(_('Manually reset authentication method.'), $fm_name);\n\t}\n}\n\n\n/**\n * Adds a menu item\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $menu_title Text used to display the menu item\n * @param string $page_title Text used to display the page title when the page loads\n * @param string $capability Minimum capability required for the menu item to be visible to the user\n * @param string $module Module name the menu item is for\n * @param string $menu_slug Menu item slug name to used to reference this item\n * @param string $class Class name to apply to the menu item\n * @param bool $sticky Whether or not to keep the menu title when there's only one submenu item or to take on the submenu item title\n * @param integer $position Menu position for the item\n * @param integer $badge_count Number of items to display in the badge\n */\nfunction addMenuPage($menu_title, $page_title, $capability, $module, $menu_slug, $class = null, $sticky = false, $position = null, $badge_count = 0) {\n\tglobal $menu;\n\t\n\t$new_menu = array($menu_title, $page_title, $capability, $module, $menu_slug, $class, $badge_count, $sticky);\n\t\n\tif ($position === null) {\n\t\t$menu[] = $new_menu;\n\t} else {\n\t\t$menu[$position] = $new_menu;\n\t}\n}\n\n\n/**\n * Adds a menu item under the objects section\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $menu_title Text used to display the menu item\n * @param string $page_title Text used to display the page title when the page loads\n * @param string $capability Minimum capability required for the menu item to be visible to the user\n * @param string $module Module name the menu item is for\n * @param string $menu_slug Menu item slug name to used to reference this item\n * @param string $class Class name to apply to the menu item\n * @param bool $sticky Whether or not to keep the menu title when there's only one submenu item or to take on the submenu item title\n * @param integer $badge_count Number of items to display in the badge\n */\nfunction addObjectPage($menu_title, $page_title, $capability, $module, $menu_slug, $class = null, $sticky = false, $badge_count = 0) {\n\tglobal $_fm_last_object_menu;\n\t\n\t$_fm_last_object_menu++;\n\t\n\taddMenuPage($menu_title, $page_title, $capability, $module, $menu_slug, $class, $sticky, $_fm_last_object_menu, $badge_count);\n}\n\n\n/**\n * Adds a submenu item\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $parent_slug The slug name for the parent menu\n * @param string $menu_title Text used to display the menu item\n * @param string $page_title Text used to display the page title when the page loads\n * @param string $capability Minimum capability required for the menu item to be visible to the user\n * @param string $module Module name the menu item is for\n * @param string $menu_slug Menu item slug name to used to reference this item\n * @param string $class Class name to apply to the menu item\n * @param integer $position Menu position for the item\n * @param integer $badge_count Number of items to display in the badge\n */\nfunction addSubmenuPage($parent_slug, $menu_title, $page_title, $capability, $module, $menu_slug, $class = null, $position = null, $badge_count = 0) {\n\tglobal $submenu;\n\t\n\t$new_menu = array($menu_title, $page_title, $capability, $module, $menu_slug, $class, $badge_count);\n\t\n\tif ($position === null) {\n\t\t$submenu[$parent_slug][] = $new_menu;\n\t} else {\n\t\t$submenu[$parent_slug][$position] = $new_menu;\n\t}\n\t\n\t/** Update parent menu badge count */\n\tif ($badge_count) {\n\t\tglobal $menu;\n\t\t\n\t\t$parent_menu_key = getParentMenuKey($parent_slug);\n\t\tif ($parent_menu_key !== false) {\n\t\t\t$menu[$parent_menu_key][6] += $badge_count;\n\t\t}\n\t}\n}\n\n\n/**\n * Adds a submenu item to the Settings menu\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $menu_title Text used to display the menu item\n * @param string $page_title Text used to display the page title when the page loads\n * @param string $capability Minimum capability required for the menu item to be visible to the user\n * @param string $module Module name the menu item is for\n * @param string $menu_slug Menu item slug name to used to reference this item\n * @param string $class Class name to apply to the menu item\n * @param integer $position Menu position for the item\n * @param integer $badge_count Number of items to display in the badge\n */\nfunction addSettingsPage($menu_title, $page_title, $capability, $module, $menu_slug, $class = null, $badge_count = 0, $position = null) {\n\taddSubmenuPage('admin-settings.php', $menu_title, $page_title, $capability, $module, $menu_slug, $class, $position, $badge_count);\n}\n\n\n/**\n * Gets the page title from the menu item\n *\n * @since 1.2\n * @package facileManager\n *\n * @return string|bool\n */\nfunction getPageTitle() {\n\tglobal $menu, $submenu;\n\t\n\t/** Search submenus first */\n\tforeach ($submenu as $slug => $submenu_items) {\n\t\tforeach ($submenu_items as $element) {\n\t\t\tif (array_search($GLOBALS['basename'], $element, true) !== false) {\n\t\t\t\treturn $element[1];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/** Search menus */\n\tforeach ($menu as $position => $menu_items) {\n\t\tif (array_search($GLOBALS['basename'], $menu_items, true) !== false) {\n\t\t\treturn $menu[$position][1];\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Returns the top level menu key\n *\n * @since 1.2\n * @package facileManager\n *\n * @return integer|bool Returns the parent menu key or false if the menu item is not found\n */\nfunction getParentMenuKey($search_slug = null) {\n\tglobal $menu, $submenu;\n\t\n\tif (!$search_slug) $search_slug = $GLOBALS['basename'];\n\t\n\tforeach ($menu as $position => $menu_items) {\n\t\t$parent_key = array_search($search_slug, $menu_items, true);\n\t\tif ($parent_key !== false) {\n\t\t\treturn $position;\n\t\t}\n\t}\n\t\n\tforeach ($submenu as $parent_slug => $menu_items) {\n\t\tforeach ($menu_items as $element) {\n\t\t\tif (array_search($search_slug, $element, true) !== false) {\n\t\t\t\treturn getParentMenuKey($parent_slug);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Checks if max_input_vars has been exceeded\n *\n * @since 1.2\n * @package facileManager\n *\n * @return integer|bool Returns the number of input vars required or false if not exceeded\n */\nfunction hasExceededMaxInputVars() {\n\t$max_input_vars = ini_get('max_input_vars') + 1;\n\tif ($max_input_vars == false) return false;\n\t\n\t$php_input = substr_count(file_get_contents('php://input'), '&');\n\t\n\treturn $php_input > $max_input_vars ? $php_input : false;\n}\n\n\n/**\n * Checks if max_input_vars has been exceeded\n *\n * @since 1.2\n * @package facileManager\n */\nfunction checkMaxInputVars() {\n\tif ($required_input_vars = hasExceededMaxInputVars()) {\n\t\tfMDie(sprintf(_('PHP max_input_vars (%1$d) has been reached and %2$s or more are required. Please increase the limit to fulfill this request. Two possible methods include setting the following:') .\n\t\t\t'<p>%3$s.htaccess:<br /><code>php_value max_input_vars %2$s</code></p>\n\t\t\t<p>%3$s.user.ini:<br /><code>max_input_vars = %2$s</code></p>', ini_get('max_input_vars'), $required_input_vars, ABSPATH));\n\t}\n}\n\n\n/**\n * Checks if max_input_vars has been exceeded\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $checks_array Array of actions and capabilities\n * @param string $action Action to check\n *\n * @return bool\n */\nfunction checkUserPostPerms($checks_array, $action) {\n\tif (array_key_exists($action, $checks_array)) {\n\t\treturn currentUserCan($checks_array[$action], $_SESSION['module']);\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Checks if max_input_vars has been exceeded\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $user_default_module User's default module\n */\nfunction setUserModule($user_default_module) {\n\tglobal $fm_name;\n\t\n\t$modules = @getActiveModules(true);\n\tif (@in_array($user_default_module, $modules)) {\n\t\t$_SESSION['module'] = $user_default_module;\n\t} else {\n\t\t$_SESSION['module'] = (is_array($modules) && count($modules)) ? $modules[0] : $fm_name;\n\t}\n}\n\n\n/**\n * Returns the menu item URL\n *\n * @since 1.2.3\n * @package facileManager\n *\n * @param string $search_slug Menu slug to query\n * @return integer|bool Returns the parent menu key or false if the menu item is not found\n */\nfunction getMenuURL($search_slug = null) {\n\tglobal $menu, $submenu;\n\t\n\tif (!is_array($menu)) return false;\n\t\n\tif (!$search_slug) $search_slug = $GLOBALS['basename'];\n\tif (is_array($search_slug)) $search_slug = $search_slug[1];\n\t\n\tforeach ($menu as $position => $menu_items) {\n\t\t$parent_key = array_search($search_slug, $menu_items, true);\n\t\tif ($parent_key !== false) {\n\t\t\treturn $menu[$position][4];\n\t\t}\n\t}\n\t\n\tforeach ($submenu as $parent_slug => $menu_items) {\n\t\tforeach ($menu_items as $submenu_id => $element) {\n\t\t\tif (array_search($search_slug, $element, true) !== false) {\n\t\t\t\treturn $submenu[$parent_slug][$submenu_id][4];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Builds the popup window\n *\n * @since 1.3\n * @package facileManager\n *\n * @param string $section Popup section to build (header or footer)\n * @param string $text Popup text to pass for header or buttons\n * @param array $buttons Buttons to include\n * @param string $link Link to provide for a button\n * @return string Returns the popup section\n */\nfunction buildPopup($section, $text = null, $buttons = array('primary_button' => 'submit', 'cancel_button' => 'cancel'), $link = null) {\n\tglobal $__FM_CONFIG;\n\t\n\tif (!$text) $text = _('Save');\n\t\n\tif ($section == 'header') {\n\t\treturn <<<HTML\n\t\t<div class=\"popup-header\">\n\t\t\t{$__FM_CONFIG['icons']['close']}\n\t\t\t<h3>$text</h3>\n\t\t</div>\n\t\t<div class=\"popup-wait\"><i class=\"fa fa-2x fa-spinner fa-spin\"></i></div>\n\t\t<div class=\"popup-contents\">\n\nHTML;\n\t} elseif ($section == 'footer') {\n\t\t$id = array_search('submit', $buttons);\n\t\tif ($id !== false) {\n\t\t\t$id = !is_numeric($id) ? ' id=\"' . $id . '\"' : null;\n\t\t\t$submit = '<input type=\"submit\" name=\"submit\" value=\"' . $text . '\" class=\"button primary\"' . $id . ' />';\n\t\t} else $submit = null;\n\t\t\n\t\t$id = array_search('cancel', $buttons);\n\t\tif ($id !== false) {\n\t\t\t$text = array_search('submit', $buttons) !== false ? _('Cancel') : $text;\n\t\t\t$id = is_numeric($id) ? 'cancel_button' : $id;\n\t\t\tif ($link !== null) {\n\t\t\t\t$cancel = '<a href=\"' . $link . '\" class=\"button\" id=\"' . $id . '\">' . $text . '</a>';\n\t\t\t} else {\n\t\t\t\t$cancel = '<input type=\"button\" value=\"' . $text . '\" class=\"button ';\n\t\t\t\t$cancel .= count($buttons) > 1 ? 'left' : null;\n\t\t\t\t$cancel .= '\" id=\"' . $id . '\" />';\n\t\t\t}\n\t\t} else $cancel = null;\n\t\t\n\t\treturn <<<HTML\n\t\t</div>\n\t\t<div class=\"popup-footer\">\n\t\t\t$submit\n\t\t\t$cancel\n\t\t</div>\n\nHTML;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Parses the output for AJAX calls\n *\n * @since 1.3\n * @package facileManager\n *\n * @param string $output Output to parse for AJAX call\n * @return string Return for the AJAX call to display\n */\nfunction parseAjaxOutput($output) {\n\tglobal $fmdb;\n\t\n\t$message_array['content'] = $output;\n\tif ($message_array['content'] !== true) {\n\t\tif (strpos($message_array['content'], \"\\n\") !== false || isset($fmdb->last_error)) {\n\t\t\tunset($_POST);\n\t\t\tinclude_once(ABSPATH . 'fm-modules/facileManager/ajax/formatOutput.php');\n\t\t} else {\n\t\t\techo $message_array['content'];\n\t\t}\n\t} else {\n\t\techo _('Success');\n\t}\n}\n\n\n/**\n * Parses the output for AJAX calls\n *\n * @since 1.3\n * @package facileManager\n *\n * @param string $html HTML to set menu links in\n * @return string Parsed output\n */\nfunction parseMenuLinks($html) {\n\t$string = preg_replace_callback(\"/__menu{(.+?)}/\", 'getMenuURL', $html);\n\treturn $string;\n}\n\n\n/**\n * Gets the count for servers requiring a config build\n *\n * @since 2.0\n * @package facileManager\n *\n * @return integer Record count\n */\nfunction countServerUpdates() {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\tif (currentUserCan('manage_servers', $_SESSION['module'])) {\n\t\tbasicGetList('fm_' . $__FM_CONFIG[$_SESSION['module']]['prefix'] . 'servers', 'server_id', 'server_', 'AND (server_build_config!=\"no\" OR server_client_version!=\"' . getOption('client_version', 0, $_SESSION['module']) . '\") AND server_status=\"active\" AND server_installed=\"yes\"', null, false, null, true);\n\t\tif (!$fmdb->sql_errors && $fmdb->num_rows) return formatNumber($fmdb->last_result[0]->count);\n\t}\n\t\t\t\n\treturn 0;\n}\n\n\n/**\n * Builds and displays the search form\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $page_params Current page parameters in URI\n * @return string Search form\n */\nfunction displaySearchForm($page_params = null) {\n\tif (isset($_GET['q'])) {\n\t\t$placeholder = sprintf(_('Searched for %s'), sanitize($_GET['q']));\n\t\t$search_remove = '<i class=\"search_remove fa fa-remove fa-lg text_icon\" title=\"' . _('Clear this search') . '\"></i>';\n\t\t$display = ' style=\"display:block\"';\n\t} else {\n\t\t$placeholder = _('Search this page by keyword');\n\t\t$search_remove = $display = null;\n\t}\n\t\n\t$form = <<<HTML\n\t<div id=\"search_form_container\"$display>\n\t\t<div>\n\t\t\t<div id=\"search_form\">\n\t\t\t\t<form id=\"search\" method=\"GET\" action=\"{$GLOBALS['basename']}?{$page_params}\">\n\t\t\t\t\t<input type=\"text\" class=\"text_icon\" placeholder=\"$placeholder\" value=\"{$_GET['q']}\" />\n\t\t\t\t\t$search_remove\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t</div>\nHTML;\n\t\n\treturn $form;\n}\n\n\n/**\n * Counts the number of dimensions in an array\n *\n * @since 2.0\n * @package facileManager\n *\n * @param array $array Array to count\n * @return int Number of dimensions\n */\nfunction countArrayDimensions($array) {\n\tif (is_array($array)) {\n\t\tif (is_array(@reset($array))) {\n\t\t\t$count = countArrayDimensions(reset($array)) + 1;\n\t\t} else {\n\t\t\t$count = 1;\n\t\t}\n\t} else {\n\t\t$count = 1;\n\t}\n\t\n\treturn $count;\n}\n\n\n/**\n * Displays the add new link\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $name Name value of plus sign\n * @param string $rel Rel value of plus sign\n * @param string $title The title of plus sign\n * @param string $style Use an image or font\n * @return string\n */\nfunction displayAddNew($name = null, $rel = null, $title = null, $style = 'default') {\n\tglobal $__FM_CONFIG;\n\t\n\tif (empty($title)) $title = _('Add New');\n\t$contents = ($style == 'default') ? $title : null;\n\t\n\tif ($name) $name = ' name=\"' . $name . '\"';\n\tif ($rel) $rel = ' rel=\"' . $rel . '\"';\n\t\n\t$image = '<i class=\"mini-icon ' . $style . '\" title=\"' . $title . '\">' . $contents . '</i>';\n\tif ($style != 'default') {\n\t\t$title = 'null\" class=\"tooltip-top mini-icon\" data-tooltip=\"' . $title;\n\t}\n\t\n\treturn sprintf('<a id=\"plus\" href=\"#\" title=\"%s\"%s%s>%s</a>', $title, $name, $rel, $image);\n}\n\n\n/**\n * Creates the SQL based on search input\n *\n * @since 2.0\n * @package facileManager\n *\n * @param array $fields Table fields to search\n * @param string $prefix Prefix of the table fields\n * @return string\n */\nfunction createSearchSQL($fields = array(), $prefix = null) {\n\t$search_query = null;\n\tif (isset($_GET['q'])) {\n\t\t$search_query = ' AND (';\n\t\t$search_text = sanitize($_GET['q']);\n\t\tforeach ($fields as $field) {\n\t\t\t$search_query .= \"$prefix$field LIKE '%$search_text%' OR \";\n\t\t}\n\t\t$search_query = rtrim($search_query, ' OR ') . ')';\n\t}\n\t\n\treturn $search_query;\n}\n\n\n/**\n * Translates text using module domain\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $text Text to translate\n * @param string $domain Domain to use\n * @return string\n */\nfunction __($text, $domain = null) {\n\tif (function_exists('dgettext') && isset($_SESSION['module'])) {\n\t\tif (!$domain) $domain = $_SESSION['module'];\n\n\t\treturn dgettext($domain, $text);\n\t}\n\t\n\treturn $text;\n}\n\n\n/**\n * Gets all available user capabilities\n *\n * @since 2.0\n * @package facileManager\n *\n * @return array\n */\nfunction getAvailableUserCapabilities() {\n\tglobal $fm_name;\n\t\n\t$fm_user_caps = null;\n\t\n\tif (file_exists(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $fm_name . DIRECTORY_SEPARATOR . 'extra' . DIRECTORY_SEPARATOR . 'capabilities.inc.php')) {\n\t\tinclude(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $fm_name . DIRECTORY_SEPARATOR . 'extra' . DIRECTORY_SEPARATOR . 'capabilities.inc.php');\n\t}\n\t\n\tforeach (getActiveModules() as $module) {\n\t\tif (file_exists(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'extra' . DIRECTORY_SEPARATOR . 'capabilities.inc.php')) {\n\t\t\tinclude(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'extra' . DIRECTORY_SEPARATOR . 'capabilities.inc.php');\n\t\t}\n\t}\n\t\n\treturn $fm_user_caps;\n}\n\n\n/**\n * Whether a group has capability\n *\n * @since 2.1\n * @package facileManager\n *\n * @param integer $group_id Group ID to check.\n * @param string|array $capability Capability name.\n * @param string $module Module name to check capability for\n * @param string $extra_perm Extra capability to check\n * @return boolean\n */\nfunction groupCan($group_id, $capability, $module = 'facileManager', $extra_perm = null) {\n\tglobal $fm_name;\n\t\n\t$group_capabilities = getUserCapabilities($group_id, 'group');\n\t\n\treturn userGroupCan($group_id, $capability, $module, $extra_perm, $group_capabilities, 'group');\n}\n\n\n/**\n * Whether a group has capability\n *\n * @since 2.1\n * @package facileManager\n *\n * @param integer $group_id Group ID to check.\n * @param string|array $capability Capability name.\n * @param string $module Module name to check capability for\n * @param string $extra_perm Extra capability to check\n * @param array $allowed_capabilities Capabilities granted to the user or group\n * @param string $type User or Group\n * @return boolean\n */\nfunction userGroupCan($id, $capability, $module = 'facileManager', $extra_perm = null, $allowed_capabilities = array(), $type = 'user') {\n\tglobal $fm_name;\n\t\n\t/** Check if super admin */\n\tif (@array_key_exists('do_everything', (array) $allowed_capabilities[$fm_name])) return true;\n\t\t\n\t/** Handle multiple capabilities */\n\tif (is_array($capability)) {\n\t\tforeach ($capability as $cap) {\n\t\t\tif ($type == 'user') {\n\t\t\t\tif (userCan($id, $cap, $module, $extra_perm)) return true;\n\t\t\t} else {\n\t\t\t\tif (groupCan($id, $cap, $module, $extra_perm)) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/** Check capability */\n\tif (@array_key_exists($capability, (array) $allowed_capabilities[$module])) {\n\t\tif (is_array($allowed_capabilities[$module][$capability])) {\n\t\t\t/** Explode module groups */\n\t\t\tforeach ($allowed_capabilities[$module][$capability] as $cap_id) {\n\t\t\t\tif (strpos($cap_id, 'g_') !== false && function_exists('moduleExplodeGroup')) {\n\t\t\t\t\tif ($new_cap = moduleExplodeGroup($cap_id, $capability)) {\n\t\t\t\t\t\t$allowed_capabilities[$module][$capability] = array_merge($allowed_capabilities[$module][$capability], $new_cap);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_array($extra_perm)) {\n\t\t\t\t$found = false;\n\t\t\t\t\n\t\t\t\tforeach ($extra_perm as $needle) {\n\t\t\t\t\tif (in_array((string) $needle, $allowed_capabilities[$module][$capability])) {\n\t\t\t\t\t\t$found = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn $found;\n\t\t\t} else {\n\t\t\t\treturn in_array((string) $extra_perm, $allowed_capabilities[$module][$capability]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Returns if the OS is debian-based or not\n *\n * @since 2.2\n * @package facileManager\n *\n * @param string $os OS to check\n * @return boolean\n */\nfunction isDebianSystem($os) {\n\treturn in_array(strtolower($os), array('debian', 'ubuntu', 'fubuntu', 'raspbian'));\n}\n\n\n/**\n * Run command on remote machines via SSH\n * \n * @since 3.0\n * @package facileManager\n *\n * @param array $host_array Hostname of remote machine\n * @param string $command Command to run on $host\n * @param string $format Be silent or verbose with output\n * @param integer $port Remote port to connect to\n * @param string $client_check 'include' or 'skip' the client file check\n * @param string $response Response to include a close button or plaintext\n * @return boolean\n */\nfunction runRemoteCommand($host_array, $command, $format = 'silent', $port = 22, $client_check = 'include', $response = 'close') {\n\tglobal $fm_name;\n\t\n\t$failures = false;\n\t\n\t/** Convert $host to an array */\n\tif (!is_array($host_array)) {\n\t\t$host_array = array($host_array);\n\t}\n\t\n\t/** Get SSH key */\n\t$ssh_key = getOption('ssh_key_priv', $_SESSION['user']['account_id']);\n\tif (!$ssh_key) {\n\t\treturn ($response == 'close') ? displayResponseClose(noSSHDefined('key')) : noSSHDefined('key');\n\t}\n\n\t$temp_ssh_key = getOption('fm_temp_directory') . '/fm_id_rsa';\n\tif (file_exists($temp_ssh_key)) @unlink($temp_ssh_key);\n\tif (@file_put_contents($temp_ssh_key, $ssh_key) === false) {\n\t\t$message = sprintf(_('Failed: could not load SSH key into %s.'), $temp_ssh_key);\n\t\treturn ($response == 'close') ? displayResponseClose($message) : $message;\n\t}\n\n\t@chmod($temp_ssh_key, 0400);\n\n\t/** Get SSH user */\n\t$ssh_user = getOption('ssh_user', $_SESSION['user']['account_id']);\n\tif (!$ssh_user) {\n\t\tif (file_exists($temp_ssh_key)) @unlink($temp_ssh_key);\n\t\treturn ($response == 'close') ? displayResponseClose(noSSHDefined('user')) : noSSHDefined('user');\n\t}\n\n\t/** Run remote command */\n\tforeach ($host_array as $host) {\n\t\t/** Test the port first */\n\t\tif (!socketTest($host, $port, 10)) {\n\t\t\tif (file_exists($temp_ssh_key)) @unlink($temp_ssh_key);\n\t\t\t$message = sprintf(_('Failed: could not access %s (tcp/%d).'), $host, $port);\n\t\t\treturn ($response == 'close') ? displayResponseClose($message) : $message;\n\t\t}\n\n\t\t/** Test SSH authentication */\n\t\texec(findProgram('ssh') . \" -T -i $temp_ssh_key -o 'StrictHostKeyChecking no' -p $port -l $ssh_user $host 'ls /usr/local/$fm_name/{$_SESSION['module']}/client.php'\", $output, $rc);\n\t\tif ($rc) {\n\t\t\t/** Something went wrong */\n\t\t\tif ($rc == 255 || $client_check == 'include') {\n\t\t\t\t@unlink($temp_ssh_key);\n\t\t\t}\n\n\t\t\t/** Handle error codes */\n\t\t\tif ($rc == 255) {\n\t\t\t\t$message = _('Failed: Could not login via SSH. Check the system logs on the client for the reason.');\n\t\t\t\treturn ($response == 'close') ? displayResponseClose($message) : $message;\n\t\t\t} elseif ($client_check == 'include') {\n\t\t\t\t$message = _('Failed: Client file is not present - is the client software installed?');\n\t\t\t\treturn ($response == 'close') ? displayResponseClose($message) : $message;\n\t\t\t}\n\t\t}\n\t\tunset($output);\n\n\t\texec(findProgram('ssh') . \" -T -i $temp_ssh_key -o 'StrictHostKeyChecking no' -p $port -l $ssh_user $host \\\"$command\\\"\", $output, $rc);\n\t\n\t\tif ($rc) {\n\t\t\t$failures = true;\n\t\t} elseif ($format == 'silent') {\n\t\t\t$output = array();\n\t\t}\n\n\t\tif ($format == 'verbose') {\n\t\t\tif (isset($output)) {\n\t\t\t\techo \"<p><b>$host</b><br />\" . join('<br />', $output) . '</p>';\n\t\t\t}\n\t\t}\n\t}\n\n\t@unlink($temp_ssh_key);\n\t\n\treturn array('failures' => $failures, 'output' => $output);\n}\n\n\n/**\n * Use MySQLi or not\n *\n * @since 3.0\n * @package facileManager\n *\n * @return boolean\n */\nfunction useMySQLi() {\n\tinclude(ABSPATH . 'fm-includes/version.php');\n\t\t\n\tif (function_exists('mysqli_connect')) {\n\t\tif (version_compare(phpversion(), '5.5', '>=') || ! function_exists('mysql_connect')) {\n\t\t\treturn true;\n\t\t} elseif (strpos($fm_version, '-') !== false) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Send log message to syslog\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $message Message to send\n * @param string $module Module name sending the message\n * @return null\n */\nfunction addSyslogEntry($message, $module) {\n\t$syslog_facility = getOption('syslog_facility');\n\t\n\tif ($syslog_facility) {\n\t\topenlog($module, LOG_PERROR, $syslog_facility);\n\t\t$x = 0;\n\t\tforeach (explode(\"\\n\", $message) as $line) {\n\t\t\tif ($x) {\n\t\t\t\t$line = \"  --> $line\";\n\t\t\t}\n\t\t\tsyslog(LOG_INFO, $line);\n\t\t\t$x++;\n\t\t}\n\t\tcloselog();\n\t}\n}\n\n\n/**\n * Performs a recursive is_writable\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $dir Top level directory to check\n * @param string|array $exclude Filenames to exclude\n * @return boolean\n */\nfunction is_writable_r($dir, $exclude = array()) {\n\tif (!is_array($exclude)) {\n\t\t$exclude = array($exclude);\n\t}\n\tif (is_dir($dir)) {\n\t\tif (is_writable($dir)) {\n\t\t\t$objects = scandir($dir);\n\t\t\tforeach ($objects as $object) {\n\t\t\t\tif ($object != '.' && $object != '..') {\n\t\t\t\t\tif (!is_writable_r($dir . DIRECTORY_SEPARATOR . $object) && !in_array($object, $exclude)) return false;\n\t\t\t\t\telse continue;\n\t\t\t\t}\n\t\t\t}    \n\t\t\treturn true;    \n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} elseif (file_exists($dir)) {\n\t\treturn is_writable($dir);\n\t}\n}\n\n\n/**\n * Downloads a file from the fM website\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $file File to download\n * @return array\n */\nfunction downloadfMFile($file) {\n\tglobal $__FM_CONFIG;\n\t\n\t$message = \"Downloading $file\\n\";\n\t\n\tlist($tmp_dir, $created) = clearUpdateDir();\n\tif (!$created) {\n\t\treturn sprintf('<p>' . _('%s and %s need to be writeable by %s in order for the core and modules to be updated automatically.') . \"</p>\\n\", $tmp_dir, ABSPATH, $__FM_CONFIG['webserver']['user_info']['name']);\n\t}\n\n\t$local_file = $tmp_dir . basename($file);\n\t@unlink($local_file);\n\t\n\t$fh = fopen($local_file, 'w+');\n\t$options = array(\n\t\tCURLOPT_URL\t\t\t\t=> $file,\n\t\tCURLOPT_TIMEOUT\t\t\t=> 3600,\n\t\tCURLOPT_HEADER\t\t\t=> false,\n\t\tCURLOPT_FOLLOWLOCATION\t=> true,\n\t\tCURLOPT_SSL_VERIFYPEER  => false,\n\t\tCURLOPT_RETURNTRANSFER  => true\n\t);\n\t\n\t$proxy = array();\n\tif (getOption('proxy_enable')) {\n\t\t$proxyauth = getOption('proxy_user') . ':' . getOption('proxy_pass');\n\t\tif ($proxyauth == ':') $proxyauth = null;\n\t\t$proxy = array(\n\t\t\tCURLOPT_PROXY => getOption('proxy_host') . ':' . getOption('proxy_port'),\n\t\t\tCURLOPT_PROXYUSERPWD => $proxyauth\n\t\t);\n\t}\n\t$ch = curl_init();\n\tcurl_setopt_array($ch, ($options + $proxy));\n\t$result = curl_exec($ch);\n\t@fputs($fh, $result);\n\t@fclose($fh);\n\tif ($result === false || curl_getinfo($ch, CURLINFO_HTTP_CODE) != 200) {\n\t\t$message .= \"Unable to download file.\\n\";\n\t\t$message .= \"\\n\" . curl_error($ch) . \"\\n\";\n\t\t\n\t\tcurl_close($ch);\n\t\t$local_file = false;\n\t}\n\t\n\tcurl_close($ch);\n\t\n\treturn array($message, $local_file);\n}\n\n\n/**\n * Extracts files\n *\n * @since 3.0\n * @package facileManager\n *\n * @param array $package Package names to extract\n */\nfunction extractPackage($package) {\n\t$message = null;\n\t\n\tif (!is_array($package)) {\n\t\t$package = array($package);\n\t}\n\t\n\tforeach ($package as $filename) {\n\t\t$message .= sprintf(_('Extracting %s') . \"\\n\", basename($filename));\n\n\t\t$tmp_dir = dirname($filename);\n\t\tif (!file_exists($filename)) {\n\t\t\treturn sprintf(_('%s does not exist!') . \"\\n\", $filename);\n\t\t}\n\n\t\t$path_parts = pathinfo($filename);\n\t\t$untar_opt = '-C ' . $tmp_dir . ' -x';\n\t\tswitch($path_parts['extension']) {\n\t\t\tcase 'bz2':\n\t\t\t\t$untar_opt .= 'j';\n\t\t\t\tbreak;\n\t\t\tcase 'tgz':\n\t\t\tcase 'gz':\n\t\t\t\t$untar_opt .= 'z';\n\t\t\t\tbreak;\n\t\t}\n\t\t$untar_opt .= 'f';\n\n\t\t$command = findProgram('tar') . \" $untar_opt $filename\";\n\t\t@system($command, $retval);\n\t\tif ($retval) {\n\t\t\t$message .= sprintf(_('Failed to extract %s!') . \"\\n\", $filename);\n\t\t\treturn $message;\n\t\t}\n\t}\n\t\t\n\t/** Move files */\n\t$message .= sprintf(_('Moving files to %s') . \"\\n\", ABSPATH);\n\t$command = findProgram('cp') . \" -r $tmp_dir/facileManager/server/* \" . ABSPATH;\n\t@system($command, $retval);\n\tif ($retval) {\n\t\t$message .= _('Failed to save files!') . \"\\n\";\n\t}\n\t\n\tif ($tmp_dir != '/') {\n\t\t@system(findProgram('rm') . \" -rf $tmp_dir\");\n\t}\n\t\n\treturn $message;\n}\n\n\n/**\n * Clears out the temporary update directory\n *\n * @since 3.0\n * @package facileManager\n *\n * @return array Temp directory and if it was created\n */\nfunction clearUpdateDir() {\n\treturn createTempDir('fm_updates');\n}\n\n\n/**\n * Generic mailing function\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $sendto Email address to send to\n * @param string $subject Email subject\n * @param string $body Email body\n * @param string $altbody Email alternate body (plaintext)\n * @param string/array $from From name and address\n * @param array $images Images to embed in the email\n * @return boolean\n */\nfunction sendEmail($sendto, $subject, $body, $altbody = null, $from = null, $images = null) {\n\tglobal $fm_name;\n\n\t$phpmailer_file = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $fm_name . DIRECTORY_SEPARATOR . 'classes' . DIRECTORY_SEPARATOR . 'class.phpmailer.php';\n\tif (!file_exists($phpmailer_file)) {\n\t\treturn _('Unable to send email - PHPMailer class is missing.');\n\t} else {\n\t\trequire_once($phpmailer_file);\n\t}\n\n\t$mail = new PHPMailer;\n\n\t/** Set PHPMailer options from database */\n\t$mail->Host = getOption('mail_smtp_host');\n\t$mail->SMTPAuth = getOption('mail_smtp_auth');\n\tif ($mail->SMTPAuth) {\n\t\t$mail->Username = getOption('mail_smtp_user');\n\t\t$mail->Password = getOption('mail_smtp_pass');\n\t}\n\tif (getOption('mail_smtp_tls')) $mail->SMTPSecure = 'tls';\n\n\tif ($from) {\n\t\tif (is_array($from)) {\n\t\t\tlist($from_name, $from_addr) = $from;\n\t\t\t$mail->FromName = $from_name;\n\t\t} else {\n\t\t\t$from_addr = $from;\n\t\t}\n\t\t$mail->From = $from_addr;\n\t} else {\n\t\t$mail->FromName = $fm_name;\n\t\t$mail->From = getOption('mail_from');\n\t}\n\t$mail->AddAddress($sendto);\n\n\t$mail->Subject = $subject;\n\t$mail->Body = $body;\n\tif ($altbody) {\n\t\t$mail->AltBody = $altbody;\n\t}\n\t$mail->IsHTML(true);\n\t\n\tif (is_array($images)) {\n\t\tforeach ($images as $filename) {\n\t\t\t$image_parts = pathinfo($filename);\n\t\t\t$mail->AddEmbeddedImage($filename, $image_parts['filename'], $image_parts['basename'], 'base64', \"image/{$image_parts['extension']}\");\n\t\t}\n\t}\n\n\t$mail->IsSMTP();\n\n\tif(!$mail->Send()) {\n\t\treturn sprintf(_('Mailer Error: %s'), $mail->ErrorInfo);\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Create a temporary directory\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $subdir Sub directory name\n * @param string $append String to append to directory name\n * @return array Temp directory and if it was created\n */\nfunction createTempDir($subdir, $append = null) {\n\t$created = true;\n\t\n\tif ($append) {\n\t\t$subdir .= ($append == 'datetime') ? '_' . date(\"YmdHis\") : \"_$append\";\n\t}\n\t\n\t$fm_temp_directory = '/' . ltrim(getOption('fm_temp_directory'), '/');\n\t$tmp_dir = rtrim($fm_temp_directory, '/') . \"/$subdir/\";\n\tsystem('rm -rf ' . $tmp_dir);\n\tif (!is_dir($tmp_dir)) {\n\t\tif (!@mkdir($tmp_dir, 0777, true)) {\n\t\t\t$created = false;\n\t\t}\n\t}\n\n\treturn array($tmp_dir, $created);\n}\n\n\n/**\n * Displays a close button in the response\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $message Error message to include\n * @return string\n */\nfunction displayResponseClose($message) {\n\treturn sprintf('<div id=\"response_close\"><p><i class=\"fa fa-close close\" aria-hidden=\"true\" title=\"%s\"></i></p></div><p class=\"error\">%s</p>', _('Close'), $message);\n}\n\n\n/**\n * Generates URI params from current params\n *\n * @since 3.0\n * @package facileManager\n *\n * @param array $params Params to exclude or include\n * @param string $direction Exclude or include\n * @param string $character Starting character\n * @param array $null_params Params to return null with\n * @return string\n */\nfunction generateURIParams($params = array(), $direction = 'include', $character = '?', $null_params = array()) {\n\t$uri_params = null;\n\t\n\tforeach ($GLOBALS['URI'] as $param => $val) {\n\t\tif (in_array($param, (array) $null_params)) return null;\n\t\tif ($direction == 'include') {\n\t\t\tif (!in_array($param, (array) $params)) continue;\n\t\t} else {\n\t\t\tif (in_array($param, (array) $params)) continue;\n\t\t}\n\t\t$uri_params[] = \"$param=$val\";\n\t}\n\tif ($uri_params) $uri_params = $character . implode('&', $uri_params);\n\t\n\treturn $uri_params;\n}\n\n\n/**\n * Builds the page sub menu items\n *\n * @since 3.0\n * @package facileManager\n *\n * @param array $selected Selected option type\n * @param string $avail_types Available option types\n * @param array $null_params\n * @param array $params\n * @param string $direction\n * @param string $character\n * @return string\n */\nfunction buildSubMenu($selected, $avail_types, $null_params = array(), $params = array('type', 'action', 'id', 'status'), $direction = 'exclude', $character = '&') {\n\tglobal $__FM_CONFIG;\n\t\n\t$menu_selects = null;\n\t\n\t$uri_params = generateURIParams($params, $direction, $character, $null_params);\n\t\n\tforeach ($avail_types as $general => $type) {\n\t\t$select = ($selected == $general) ? ' class=\"selected\"' : '';\n\t\t$menu_selects .= \"<span$select><a$select href=\\\"{$GLOBALS['basename']}?type=$general$uri_params\\\">\" . ucfirst($type) . \"</a></span>\\n\";\n\t}\n\t\n\treturn '<div id=\"configtypesmenu\">' . $menu_selects . '</div>';\n}\n\n\n/**\n * Formats an error message\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $message Error message to format\n * @param string $option Display option (sql | null)\n * @return string\n */\nfunction formatError($message, $option = null) {\n\tglobal $fmdb;\n\t\n\t$addl_text = null;\n\t\n\tif ($option == 'sql') {\n\t\t$addl_text = ($fmdb->last_error) ? '<br />' . $fmdb->last_error : null;\n\t}\n\t\n\treturn $message . $addl_text;\n}\n\n\n/**\n * Builds the server listing in a dropdown menu\n *\n * @since 3.0\n * @package facileManager\n *\n * @param integer $server_serial_no Selected server serial number\n * @param array $available_servers Available servers for the list\n * @param array $class Additional classes to pass to the div\n * @return string\n */\nfunction buildServerSubMenu($server_serial_no = 0, $available_servers = null, $class = null) {\n\tif (!$available_servers) $available_servers = availableServers();\n\t$server_list = buildSelect('server_serial_no', 'server_serial_no', $available_servers, $server_serial_no, 1, null, false, 'this.form.submit()');\n\t\n\t$hidden_inputs = null;\n\tforeach ($GLOBALS['URI'] as $param => $value) {\n\t\tif ($param == 'server_serial_no') continue;\n\t\t$hidden_inputs .= '<input type=\"hidden\" name=\"' . $param . '\" value=\"' . $value . '\" />' . \"\\n\";\n\t}\n\t\n\t$class = $class ? 'class=\"' . join(' ', (array) $class) . '\"' : null;\n\n\t$return = <<<HTML\n\t<div id=\"configtypesmenu\" $class>\n\t\t<form action=\"{$GLOBALS['basename']}\" method=\"GET\">\n\t\t$hidden_inputs\n\t\t$server_list\n\t\t</form>\n\t</div>\nHTML;\n\n\treturn $return;\n}\n\n\n/**\n * Returns an array of servers and groups\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $server_id_type What server ID should be used (serial|id)\n * @param array $include What items to include\n * @param string $module Module name to limit list to\n * @return array\n */\nfunction availableServers($server_id_type = 'serial', $include = array('all'), $module = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\t$server_array = array();\n\t\n\tif (!$module) {\n\t\t$module = $_SESSION['module'];\n\t}\n\t\n\tif (!is_array($include)) {\n\t\t$include = (array) $include;\n\t}\n\t\n\tif (in_array('all', $include)) {\n\t\t$server_array[0][] = null;\n\t\t$server_array[0][0][] = _('All Servers');\n\t\t$server_array[0][0][] = '0';\n\t}\n\t\n\tif (in_array('all', $include) || in_array('groups', $include)) {\n\t\t$j = 0;\n\t\t/** Server Groups */\n\t\t$result = basicGetList('fm_' . $__FM_CONFIG[$module]['prefix'] . 'server_groups', 'group_name', 'group_');\n\t\tif ($fmdb->num_rows && !$fmdb->sql_errors) {\n\t\t\t$server_array[_('Groups')][] = null;\n\t\t\tforeach ($fmdb->last_result as $results) {\n\t\t\t\t$server_array[_('Groups')][$j][] = $results->group_name;\n\t\t\t\t$server_array[_('Groups')][$j][] = 'g_' . $results->group_id;\n\t\t\t\t$j++;\n\t\t\t}\n\t\t}\n\t}\n\tif (in_array('all', $include) || in_array('servers', $include)) {\n\t\t$j = 0;\n\t\t/** Server names */\n\t\t$result = basicGetList('fm_' . $__FM_CONFIG[$module]['prefix'] . 'servers', 'server_name', 'server_');\n\t\tif ($fmdb->num_rows && !$fmdb->sql_errors) {\n\t\t\t$server_array[_('Servers')][] = null;\n\t\t\tforeach ($fmdb->last_result as $results) {\n\t\t\t\tif (property_exists($results, 'server_menu_display') && $results->server_menu_display == 'exclude') continue;\n\t\t\t\t$server_array[_('Servers')][$j][] = $results->server_name;\n\t\t\t\tif ($server_id_type == 'serial') {\n\t\t\t\t\t$server_array[_('Servers')][$j][] = $results->server_serial_no;\n\t\t\t\t} elseif ($server_id_type == 'id') {\n\t\t\t\t\t$server_array[_('Servers')][$j][] = 's_' . $results->server_id;\n\t\t\t\t}\n\t\t\t\t$j++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn $server_array;\n}\n\n\n/**\n * Returns a SSH error message\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $type What is not defined\n * @return array\n */\nfunction noSSHDefined($type = 'user') {\n\tif ($type == 'user') {\n\t\treturn sprintf(_('Failed: SSH user is not defined. You can define the user in the <a href=\"%s\">Settings</a>.'), getMenuURL(_('General')));\n\t}\n\tif ($type == 'key') {\n\t\treturn sprintf(_('Failed: SSH key is not defined. You can generate a keypair in the <a href=\"%s\">Settings</a>.'), getMenuURL(_('General')));\n\t}\n}\n\n\n/**\n * Returns the branding logo\n *\n * @since 3.0\n * @package facileManager\n *\n * @return string\n */\nfunction getBrandLogo($size = 'sm_brand_img') {\n\tglobal $fm_name;\n\t\n\t$branding_logo = getOption($size);\n\t\n\tif (!$branding_logo) {\n\t\t$branding_logo = $GLOBALS['RELPATH'] . 'fm-modules/' . $fm_name . '/images/fm.png';\n\t}\n\t\n\treturn $branding_logo;\n}\n\n\n/**\n * Automatically run remote commands\n *\n * @since 3.3\n * @package facileManager\n *\n * @param object $server_info Server info object from db query\n * @param array $command_args Action and command arguments\n * @param string $output_type Return as popup or something else (popup|return)\n * @return string\n */\nfunction autoRunRemoteCommand($server_info, $command_args, $output_type = 'popup') {\n\textract(get_object_vars($server_info), EXTR_SKIP);\n\n\t/** Disabled server */\n\tif ($server_status != 'active') {\n\t\treturn null;\n\t}\n\t\n\tif (is_array($command_args)) {\n\t\tlist($action, $command_args) = $command_args;\n\t}\n\n\t/** Get zone data via ssh */\n\tif ($server_update_method == 'ssh') {\n\t\t$server_remote = runRemoteCommand($server_name, 'sudo php /usr/local/facileManager/' . $_SESSION['module'] . '/client.php ' . $command_args, 'return', $server_update_port, 'include', 'plaintext');\n\t} elseif (in_array($server_update_method, array('http', 'https'))) {\n\t\t/** Get data via http(s) */\n\t\t/** Test the port first */\n\t\tif (socketTest($server_name, $server_update_port, 10)) {\n\t\t\t/** Remote URL to use */\n\t\t\t$url = $server_update_method . '://' . $server_name . ':' . $server_update_port . '/fM/reload.php';\n\n\t\t\t/** Data to post to $url */\n\t\t\t$post_data = array('action' => $action,\n\t\t\t\t'serial_no' => $server_serial_no,\n\t\t\t\t'module' => $_SESSION['module'],\n\t\t\t\t'command_args' => $command_args\n\t\t\t);\n\n\t\t\t$server_remote = getPostData($url, $post_data);\n\t\t\tif (isSerialized($server_remote)) {\n\t\t\t\t$server_remote = unserialize($server_remote);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (isset($server_remote) && $server_remote !== false) {\n\t\tif (is_array($server_remote)) {\n\t\t\tif (isset($server_remote['failures']) && !$server_remote['failures']) {\n\t\t\t\tif (@isSerialized($server_remote['output'][0])) {\n\t\t\t\t\t$server_remote['output'] = unserialize($server_remote['output'][0]);\n\t\t\t\t}\n\t\t\t\treturn $server_remote['output'];\n\t\t\t}\n\t\t} else {\n\t\t\treturn (strpos($server_remote, 'popup') === false || $output_type != 'popup') ? $server_remote : buildPopup('header', _('Error')) . '<p>' . $server_remote . '</p>' . buildPopup('footer', _('OK'), array('cancel_button' => 'cancel'));\n\t\t}\n\t} else {\n\t\t/** Return if the items did not get dumped from the server */\n\t\tif (!isset($server_remote['output'])) {\n\t\t\t$return = sprintf('<p>%s</p>', __('The data from the server could not be retrieved or managed. Possible causes include:'));\n\t\t\t$return .= sprintf('<ul><li>%s</li><li>%s</li></ul>',\n\t\t\t\t\t__('The update ports on the server are not accessible'),\n\t\t\t\t\t__('This server is updated via cron (only SSH and http/https are supported)'));\n\t\t\treturn $return;\n\t\t}\n\t}\n}\n\n\n/**\n * Returns the ID of the default super admin\n *\n * @since 3.3.1\n * @package facileManager\n *\n * @return integer\n */\nfunction getDefaultAdminID() {\n\tglobal $fmdb;\n\t\n\t$result = $fmdb->query(\"SELECT user_id FROM `fm_users` WHERE `user_auth_type`=1 ORDER BY user_id ASC LIMIT 1\");\n\n\treturn $fmdb->last_result[0]->user_id;\n}\n\n\n/**\n * Returns the first array key\n *\n * @since 4.0\n * @package facileManager\n *\n * @return mixed\n */\nif (!function_exists('array_key_first')) {\n\tfunction array_key_first(array $arr) {\n\t\tforeach($arr as $key => $unused) {\n\t\t\treturn $key;\n\t\t}\n\t\treturn null;\n\t}\n}\n\n\n/**\n * Throws an API error\n *\n * @since 4.0\n * @package facileManager\n *\n * @param integer $code Error code to throw\n * @return mixed\n */\nfunction throwAPIError($code) {\n\tswitch ($code) {\n\t\tcase 1000:\n\t\tcase 1001:\n\t\tcase 1002:\n\t\t\t$message = _('Permission denied.');\n\t\t\tbreak;\n\t\tcase 1004:\n\t\t\t$message = _('The record already exists.');\n\t\t\tbreak;\n\t\tcase 1005:\n\t\t\t$message = _('The record was not found.');\n\t\t\tbreak;\n\t\tcase 3000:\n\t\t\t$message = _('Dryrun was successful.');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$code = 2000;\n\t\t\t$message = _('Something was wrong with the request.');\n\t\t\tbreak;\n\t\t}\n\treturn array($code, $message);\n}\n\n?>\n", "<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n | Processes admin logs page                                               |\n +-------------------------------------------------------------------------+\n*/\n\nif (!currentUserCan('view_logs')) unAuth();\n\nprintHeader();\n@printMenu();\n\n$response = isset($response) ? $response : null;\n\n$search_sql = $list = $log_search_query = $log_search_date_b = $log_search_date_e = null;\nextract($_REQUEST);\n\n/** Module search */\nif (isset($log_search_module) && is_array($log_search_module) && !in_array('All Modules', $log_search_module)) {\n\t$search_sql .= 'AND log_module IN (\"' . join('\",\"', $log_search_module) . '\") ';\n}\n/** User search */\n$default_timezone = getOption('timezone', $_SESSION['user']['account_id']);\n$list = null;\nif (isset($log_search_user) && is_array($log_search_user) && !in_array('0', $log_search_user)) {\n\t$search_sql .= 'AND user_login IN (\"' . join('\",\"', $log_search_user) . '\") ';\n}\n/** Begin date search */\nif (isset($log_search_date_b) && !empty($log_search_date_b)) {\n\t$search_sql .= \"AND log_timestamp > \" . strtotime($log_search_date_b . ' 00:00:00' . $default_timezone) . ' ';\n}\n/** End date search */\nif (isset($log_search_date_e) && !empty($log_search_date_e)) {\n\t$search_sql .= \"AND log_timestamp < \" . strtotime($log_search_date_e . ' 23:23:59' . $default_timezone) . ' ';\n}\n/** Query search */\nif (isset($log_search_query) && !empty($log_search_query)) {\n\t$search_sql .= \"AND log_data LIKE '%\" . sanitize($log_search_query) . \"%' \";\n}\n\n$query = \"SELECT * FROM fm_logs WHERE account_id IN (0,{$_SESSION['user']['account_id']}) $search_sql ORDER BY log_timestamp DESC\";\n$fmdb->query($query);\n$log_count = $fmdb->num_rows;\n\n$total_pages = ceil($log_count / $_SESSION['user']['record_count']);\nif ($page > $total_pages) $page = $total_pages;\nif ($page < 1) $page = 1;\n$pagination = displayPagination($page, $total_pages);\n\n$log_search_module = isset($log_search_module) ? $log_search_module : _('All Modules');\n$log_search_user = isset($log_search_user) ? $log_search_user : 0;\n\n$module_list = buildSelect('log_search_module', 1, buildModuleList(), $log_search_module, 4, null, true);\n$user_list = buildSelect('log_search_user', 1, buildUserList(), $log_search_user, 4, null, true);\n\n$table_info = array('class' => 'display_results');\n$title_array = array(_('Timestamp'), _('Module'), _('User'), array('title' => _('Message'), 'style' => 'width: 50%;'));\n$header = displayTableHeader($table_info, $title_array);\n\necho printPageHeader($response);\nprintf('<form class=\"search-form\" id=\"date-range\" action=\"\" method=\"get\">\n\t\t<table class=\"log_search_form\" align=\"center\">\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>%s</td>\n\t\t\t\t\t<td>%s</td>\n\t\t\t\t\t<td><input name=\"log_search_date_b\" value=\"%s\" type=\"text\" class=\"datepicker\" placeholder=\"%s\" /></td>\n\t\t\t\t\t<td><input name=\"log_search_date_e\" value=\"%s\" type=\"text\" class=\"datepicker\" placeholder=\"%s\" /></td>\n\t\t\t\t\t<td><input type=\"text\" name=\"log_search_query\" value=\"%s\" placeholder=\"%s\" /></td>\n\t\t\t\t\t<td><input value=\"%s\" type=\"submit\" class=\"button\" /></td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t\t</form>\n\t\t%s %s',\n\t\t$module_list, $user_list,\n\t\t$log_search_date_b, _('Date Begin'),\n\t\t$log_search_date_e, _('Date End'),\n\t\t$log_search_query, _('Search Text'),\n\t\t_('Search'),\n\t\t$pagination, $header\n\t\t);\n\ndisplayLogData($page, $search_sql);\n\necho <<<HTML\n\t\t\t</tbody>\n\t\t</table>\n\nHTML;\n\nprintFooter(null, $output);\n\n\nfunction displayLogData($page, $search_sql = null) {\n\tglobal $fmdb, $fm_name, $__FM_CONFIG;\n\t\n\t/** Get datetime formatting */\n\t$date_format = getOption('date_format', $_SESSION['user']['account_id']);\n\t$time_format = getOption('time_format', $_SESSION['user']['account_id']);\n\t\n\t$query = \"SELECT * FROM fm_logs WHERE account_id IN (0,{$_SESSION['user']['account_id']}) $search_sql ORDER BY log_timestamp DESC LIMIT \" . (($page - 1) * $_SESSION['user']['record_count']) . \", {$_SESSION['user']['record_count']}\";\n\t$fmdb->query($query);\n\t$result = $fmdb->last_result;\n\t$log_count = $fmdb->num_rows;\n\t\n\tif (!$log_count) {\n\t\tprintf('<tr><td colspan=\"4\"><p class=\"no_results\">%s</p></td></tr>', _('There are no log results.'));\n\t}\n\n\tfor ($i=0; $i<$log_count; $i++) {\n\t\textract(get_object_vars($result[$i]), EXTR_OVERWRITE);\n\t\t$log_data = nl2br(wordwrap($log_data, 80, \"\\n\", true));\n\t\tif (isset($_POST['log_search_query'])) $log_data = str_replace($_POST['log_search_query'], '<span class=\"highlighted\">' . $_POST['log_search_query'] . '</span>', $log_data);\n\t\t$user_name = is_numeric($user_login) ? $fm_name : $user_login;\n\t\t$log_timestamp = date($date_format . ' ' . $time_format . ' e', $log_timestamp);\n\t\techo <<<ROW\n\t\t\t\t<tr>\n\t\t\t\t\t<td>$log_timestamp</td>\n\t\t\t\t\t<td>$log_module</td>\n\t\t\t\t\t<td>$user_name</td>\n\t\t\t\t\t<td>$log_data</td>\n\t\t\t\t</tr>\n\nROW;\n\t}\n}\n\nfunction buildModuleList() {\n\tglobal $fmdb;\n\t\n\t$array[0] = array_fill(0, 2, _('All Modules'));\n\t\n\t$query = \"SELECT DISTINCT log_module FROM fm_logs WHERE account_id IN (0,{$_SESSION['user']['account_id']})\";\n\t$list = $fmdb->get_results($query);\n\tif ($fmdb->num_rows) {\n\t\tfor ($i=0; $i<$fmdb->num_rows; $i++) {\n\t\t\t$array[$i+1] = array_fill(0, 2, $list[$i]->log_module);\n\t\t}\n\t}\n\t\n\treturn $array;\n}\n\nfunction buildUserList() {\n\tglobal $fmdb;\n\t\n\t$array[0] = array(_('All Users'), '0');\n\t\n\t$query = \"SELECT user_id,user_login FROM fm_users WHERE account_id={$_SESSION['user']['account_id']} ORDER BY user_login\";\n\t$list = $fmdb->get_results($query);\n\tif ($fmdb->num_rows) {\n\t\tfor ($i=0; $i<$fmdb->num_rows; $i++) {\n\t\t\t$array[$i+1][] = $list[$i]->user_login;\n\t\t\t$array[$i+1][] = $list[$i]->user_login;\n\t\t}\n\t}\n\t\n\treturn $array;\n}\n\n?>\n"], "fixing_code": ["<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n*/\n\n/**\n * The facileManager version string\n *\n * @global string $fm_version\n */\n$fm_version = '4.5.1';\n\n/**\n * Holds the facileManager DB revision, increments when changes are made to the facileManager DB schema.\n *\n * @global int $fm_db_version\n */\n$fm_db_version = 50;\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.5.0';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0.0';\n", "4.5.1 (2024-01-30)\n==================\n* Server - [security] Fixed authenticated variable manipulation leading to SQL Injection. (Issue #599)\n* Server - [security] Fixed privilege escalation via mass assignment. (Issue #599)\n* Server - [security] Fixed systemic cross-site scripting (XSS). (Issue #599)\n\n4.5.0 (2023-04-19)\n==================\n* Server - [improvement] The settings now displays the timestamp of the last software update check.\n* Server - [bug] Fixed module settings page when the has no settings.\n\n4.4.0 (2023-03-09)\n==================\n* Server - [security] Updated to jQuery-UI v1.13.2. (Issue #561)\n* Both   - [improvement] Added PHP 8.2 support. (Issue #558)\n* Server - [improvement] Added additional description of LDAP DN parameters. (Issue #563)\n* Server - [improvement] Added additional spacing to delete the button.\n* Server - [improvement] Added option to show/hide the server build icon per module.\n* Server - [improvement] Admin->Users & Groups no longer tries to resolve client IP. (Issue #530)\n* Server - [bug] Fixed AD authentication when not specifying a Search Start DN. (Issue #565)\n* Server - [bug] When the user is trying to add an object and their session timed out, the\n           user is returned to the login page.\n\n4.3.0 (2022-06-29)\n==================\n* Server - [improvement] Local auth now works even when LDAP auth is enabled. (Issue #546)\n* Server - [bug] Fixed PHP errors during installation process. (Issue #548)\n* Client - [bug] Fixed user grep when adding ssh user. (Issue #553)\n\n4.2.0 (2022-01-06)\n==================\n* Server - [improvement] Updated max_input_vars error message to include additional methods\n           of increasing the value.\n* Server - [improvement] Added database connection error during installation process to\n           provide better debugging ability.\n* Server - [improvement] Added setting to specify the Distinguished Name for the starting search\n           point when using LDAP group membership during authentication.\n* Server - [improvement] LDAP server connection tests occur before authentication.\n* Client - [bug] Fixed httpd2 and apache2 detection. (Issue #543)\n* Server - [bug] Removed password change form on authenticated user profile for LDAP users.\n* Server - [bug] Ports defined in the Settings can now be unset.\n* Server - [bug] Fixed minor CSS issues.\n\n4.1.2 (2021-10-27)\n==================\n* Server - [bug] Fixed login logo alignment.\n\n4.1.1 (2021-09-29)\n==================\n* Server - [bug] Fixed CSS for the tooltip in some windows.\n* Server - [bug] Fixed grabbable table rows so reordering now works. (Bug introduced\n           with jQuery upgrade)\n\n4.1.0 (2021-09-14)\n==================\n* Server - [security] Upgraded to jQuery 3.6.0. (Issue #525)\n* Server - [improvement] Updated UI to better show disabled buttons and fields.\n* Server - [improvement] LDAPS authentication no longer requires certificate inputs. (Issue #534)\n* Server - [improvement] Added a config check warning message.\n* Server - [bug] Fixed LDAP group authentication. (Issue #533)\n* Server - [bug] Fixed client serial number generations when using MySQL 8.x. (Issue #515)\n\n4.0.3 (2021-02-03)\n==================\n* Server - [security] Fixed a SQL injection issue with session variables.\n           (Found and reported by Niko K from Cure53)\n* Server - [security] unauthenticated clients can no longer view the dashboard.\n           (Found and reported by Niko K from Cure53)\n* Server - [security] Fixed a SQL injection issue with user and group edits.\n* Server - [bug] CSS tweaks.\n* Server - [bug] Changed SSH parameter to disable pseudo-tty allocation. (Pull #513)\n\n4.0.2 (2020-12-02)\n==================\n* Server - [bug] Fixed API key creation. (Issue #507)\n\n4.0.1 (2020-11-27)\n==================\n* Server - [bug] Fixed an issue where users could not be enabled or disabled.\n* Server - [bug] Users with permission to manage servers can now preview the\n           server configuration.\n* Server - [bug] Fixed upgrade process retry attempts.\n* Client - [bug] Fixed client cron entry when fullpath is not used.\n\n4.0.0 (2020-11-11)\n==================\n* Server - [security] Fixed an issue where unprivileged users could create\n           additional users with super-admin privileges.\n* Both   - [feature] Added support for user API keys. (Issue #289 #327)\n* Server - [feature] Added support for MySQL SSL connections. (Issue #485)\n* Server - [improvement] CSS changes.\n* Server - [improvement] Added support for module settings to have sections.\n* Server - [improvement] Added support to define LDAPS certificate and CA\n           files in the settings. (Issue #500)\n* Server - [bug] Fixed PHP errors.\n\n3.5.7 (2020-03-04)\n==================\n* Server - [bug] Fixed user creation during installation. (Issue #478)\n* Client - [bug] Fixed text output wordwrapping.\n\n3.5.6 (2020-01-09)\n==================\n* Server - [bug] Fixed PHP fatal error when setting the server build/update flag\n           for server groups. (Issue #472)\n\n3.5.5 (2019-12-13)\n==================\n* Server - [security] Fixed an issue where non-privileged users could be escalated\n           to super-admin.\n* Server - [bug] New user passwords can be created with quotation marks.\n* Server - [improvement] Added support for manual software update checks.\n\n3.5.4 (2019-12-11)\n==================\n* Server - [bug] Fixed server configuration preview formatting when html is in\n           in the output.\n\n3.5.3 (2019-12-11)\n==================\n* Server - [bug] Fixed database installation and backup support for passwords\n           with quotation marks. (Issue #470)\n* Server - [security] Database backups no longer send the password to the command\n           line. (Issue #470)\n* Server - [bug] Fixed server configuration preview formatting when html is in\n           in the output.\n\n3.5.2 (2019-12-06)\n==================\n* Server - [bug] Fixed support for passwords with quotation marks. (Issue #469)\n* Server - [bug] Fixed branding image display in password reset emails.\n* Server - [improvement] Changed color of placeholder text. (Issue #371)\n\n3.5.1 (2019-10-16)\n==================\n* Client - [bug] Fixed parsing of the apache2 user on Debian systems. (Issue #462)\n\n3.5.0 (2019-10-01)\n==================\n** Minimum PHP version is now 5.5 for the web server **\n* Server - [bug] Fixed PHP errors during installation process.\n* Server - [improvement] Popup windows are now draggable only by the title bar.\n* Server - [improvement] Refinements around grabbable rows.\n* Server - [bug] Configuration previews no longer process characters as html.\n* Server - [security] Fixed an issue where unauthenticated password resets could\n           occur. (Found and reported by Arturs Danilevics, Oskars Vegeris, and\n           Ivars Vids)\n* Both   - [security] Fixed an issue where local privileges could be escalated\n           to root. (Found and reported by Arturs Danilevics, Oskars Vegeris, and\n           Ivars Vids)\n* Server - [security] Fixed an issue with password resets where local privilege\n           escalation and SQL injections could occur. (Found and reported by \n           Arturs Danilevics, Oskars Vegeris, and Ivars Vids)\n* Server - [security] Changed the default password reset expiration to 15 minutes.\n* Server - [security] Updated the user password hashing to a more secure algorithm.\n           (Found and reported by Arturs Danilevics, Oskars Vegeris, and Ivars Vids)\n* Server - [security] Fixed an issue where admin-servers.php was susceptible to\n           SQL injection. (Found and reported by Arturs Danilevics, Oskars Vegeris,\n           and Ivars Vids)\n* Server - [security] Ensured header() calls are not skipped. (Found and reported\n           by Arturs Danilevics, Oskars Vegeris, and Ivars Vids)\n* Server - [improvement] Updated .htaccess installation checks verbiage. (Issue #461)\n* Client - [bug] Fixed parsing of the apache2 user on Debian systems. (Issue #462)\n* Server - [improvement] CSS tweaks for shadow containers.\n* Client - [improvement] Added support to gather interface addresses.\n\n3.4.2 (2019-05-17)\n==================\n* Server - [bug] Fixed font-awesome graphics for offline installations. (Issue #441)\n\n3.4.1 (2019-03-20)\n==================\n* Server - [security] Fixed user management privileges so super-admins cannot\n           be added, modified, or deleted by less privileged users. (Issue #436)\n* Server - [bug] Fixed an issue where user groups could not be deleted.\n* Server - [bug] Fixed installs and upgrades with PHP 7.3.x. (Issue #436)\n* Server - [bug] Fixed PHP 7.3.x errors. (Issue #436)\n\n3.4 (2019-03-16)\n================\n* Server - [improvement] Menu badge counts become 99+ when greater than 100.\n* Server - [improvement] Updating the core via the web interface no longer\n           requires config.inc.php to be writeable by the web server user.\n* Server - [improvement] Cleaned up redundant code.\n* Server - [bug] Fixed an issue where the installer would display a blank\n           grey screen. (Issue #417)\n* Server - [improvement] Added tooltip-copy CSS.\n* Server - [improvement] fM core and module server upgrade packages now use\n           the proxy server settings. (Issue #388)\n* Client - [feature] Added support for using a proxy server. (Issue #388)\n* Server - [improvement] Modules can no longer be upgraded if the minimum core\n           version is not installed.\n* Server - [improvement] CSS and icon changes.\n\n3.3 (2018-12-15)\n================\n* Server - [bug] Properly support the OS icon for Raspbian.\n* Client - [improvement] Moved getInterfaceNames() to core.\n* Server - [improvement] CSS changes.\n* Server - [bug] Added missing select2 image.\n* Server - [bug] Fixed text.\n* Client - [improvement] Added function to detect if the client is a\n           Debian-based system.\n* Client - [bug] Suppressed crontab error during installation if the user\n           crontab does not exist.\n* Server - [improvement] Clears database result variable before use to provide\n           more accurate results.\n* Server - [improvement] Added Raspbian as a valid Debian-based system.\n* Server - [improvement] Added function to run remote commands via SSH or HTTP/S\n           as the server configuration case may be.\n* Client - [bug] Fixed support for non-standard server ports.\n\n3.2 (2018-10-26)\n================\n* Server - [improvement] UI enhancements.\n* Server - [bug] Fixed client interaction 500 error codes.\n* Server - [bug] Fixed user additions to include comments.\n* Server - [improvement] Add support to get server list for any module.\n* Server - [improvement] User passwords can now be set by users granted with\n           the 'User Management' privilege. (Issue #416)\n* Client - [bug] Files are now chgrp'ed if available.\n* Server - [improvement] Added support for noscroll pages.\n\n3.1.1 (2017-12-18)\n==================\n* Server - [bug] Fixed username display in the Admin Logs. (Issue #405)\n\n3.1.0 (2017-12-13)\n==================\n* Server - [improvement] Added option to skip client file checks to the\n           runRemoteCommand() function.\n* Server - [improvement] Visually show disabled form buttons.\n* Server - [improvement] Additional blocks can now be placed on the left or right\n           of the table header.\n* Server - [improvement] Moved the grab CSS/JS to the core for other modules to use.\n* Server - [improvement] fm_logs now stores the username instead of userid.\n* Server - [improvement] Added support to explode module group IDs. (Issue #375)\n* Server - [improvement] Pagination is now displayed even with no items.\n* Client - [bug] Chown directories only if they exist.\n* Server - [improvement] Popup boxes now disable body scrolling.\n\n3.0.3 (2017-10-10)\n==================\n* Server - [bug] Fixed LDAP authentication with group memberships. (Issue #392)\n* Server - [bug] Fixed PHP error. (Issue #386)\n* Server - [feature] Added support for using a proxy server. (Issue #388)\n\n3.0.2 (2017-08-07)\n==================\n* Server - [bug] Fixed table sorting.\n\n3.0.1 (2017-07-06)\n==================\n* Server - [improvement] Added module name and version to header.\n* Client - [bug] Fixed the support for non-standard ports. (Issue #382)\n* Server - [improvement] Updated German translation.\n\n3.0 (2017-06-22)\n================\n* Client - [bug] Fixed OS distro reporting for RHEL when using lsb tools. (Issue #379)\n* Server - [bug] Fixed the upgrade process.\n* Server - [feature] Added setting to change the branding logo.\n* Server - [feature] Added comment field to users.\n* Server - [improvement] Reworked the search bar for easier usage of it.\n* Server - [improvement] Database errors now get displayed if the Show Errors\n           setting is enabled.\n* Server - [improvement] Updated 404 page styling.\n* Both   - [improvement] Code clean up.\n* Both   - [improvement] Updated the error messages surrounding failed SSH\n           connections. (Issue #371)\n* Server - [improvement] CSS tweaks for Firefox compatibility.\n* Client - [bug] Client installer ensures absolute path is defined in the sudoers\n           file. (Issue #372)\n* Server - [improvement] Added locale number formatting.\n* Server - [improvement] Code changes to better reference shared classes.\n* Server - [security] Fixed an issue where unprivileged users could still make\n           changes before a forced logout.\n* Server - [improvement] Code changes to add global response error formatting.\n* Server - [improvement] Added Windows server icon for other modules to use.\n* Server - [improvement] Pagination is added to all pages.\n* Server - [bug] Fixed an issue where the Edit Profile menu option did nothing.\n* Server - [improvement] Code clean up.\n* Server - [improvement] Replaced several icons with Font Awesome fonts.\n* Server - [improvement] CSS tweaks.\n* Server - [bug] Fixed an issue where local account passwords could not be\n           changed when LDAP authentication was being used. (Issue #360)\n* Server - [feature] Added server update support via the modules page. (Issue #113)\n* Server - [improvement] Cleaned up server connection tests output.\n* Server - [improvement] Language changes.\n* Server - [bug] Fixed mysql requirement check. (result of adding #343)\n* Server - [improvement] Updated error page titles.\n* Server - [improvement] Swapped the plus sign for \"Add New\" text.\n* Server - [bug] Fixed help file with PHP 7 installations. (Issue #354)\n* Server - [improvement] Added item name to the delete confirmations. (Issue #185)\n* Server - [bug] Fixed LDAP authentication using group membership requirements\n           with Active Directory. (Issue #342)\n* Server - [bug] Fixed PHP error during installer with an empty database.\n* Server - [bug] Fixed module installation status through modules page.\n* Server - [bug] Added missing translation text and removed duplicates.\n* Server - [bug] Fixed Redhat clients only reporting 'Red' as the OS.\n* Server - [feature] Use mysqli functions where available. (Issue #343)\n* Server - [feature] Added setting to send audit logs to syslog. (Issue #326)\n\n2.3.3 (2016-10-07)\n==================\n* Server - [bug] Fixed an issue where fM would hang during the software update\n           check. (Issue #353)\n\n2.3.2 (2016-09-22)\n==================\n* Server - [bug] Fixed an issue with clients incorrectly updating on every\n           polling cycle. (Issue #348)\n\n2.3.1 (2016-08-23)\n==================\n* Server - [bug] Fixed an issue where i18n requirement checks may fail. (Issue #335)\n* Client - [bug] Fixed a PHP error in the installer.\n\n2.3 (2016-07-21)\n================\n* Server - [improvement] Added support to load any additional js files in the\n           module directory (fm-modules/(module)/js/).\n* Server - [improvement] Removed boolean params for printHeader().\n* Server - [improvement] Updated buildSelect() to allow an array of single options.\n* Server - [bug] Fixed user creations that broke in 2.2.1.\n* Server - [improvement] Made the tooltip CSS globally available.\n* Server - [improvement] Created global variable for module images directory.\n* Server - [improvement] User session timestamp gets logged and login and logout.\n* Server - [bug] Fixed PHP errors during authentication which prevented successful\n           session creation.\n* Server - [feature] Added setting to define custom login message.\n* Server - [bug] Removed an unnecessary button during installation.\n* Server - [improvement] AJAX now redirects to login page when fM and module\n           database updates are required.\n* Server - [bug] Fixed an issue where i18n requirement checks may fail.\n* Both   - [security] Improved permission support for files installed by the\n           client. (Issue #320)\n\n2.2.1 (2016-06-14)\n==================\n* Server - [bug] Fixed issue with adding users to groups. (Issue #319)\n* Server - [improvement] UTC is now an available timezone. (Issue #318)\n* Server - [improvement] Removed an unnecessary database call when determining\n           if there are any updates available.\n\n2.2 (2016-04-24)\n================\n* Client - Upgrading requires a manual installation using the steps in README.md.\n* Both   - [improvement] Cleaned up duplicate functions to simplify code.\n* Client - [feature] Added the client 'reinstall' option.\n* Client - [improvement] Output now wordwraps based on the number of columns\n           in the shell (based on $COLUMNS environment variable).\n* Server - [bug] Fixed server group config build process.\n* Server - [improvement] SSH login failure messages differentiate between login\n           failure and missing client script.\n* Server - [improvement] Updated help file.\n* Server - [improvement] CSS tweaks.\n* Client - [improvement] Silenced client install grep commands.\n* Server - [bug] Under certain browsers, the jQuery would not execute. (Issue #298)\n* Client - [improvement] SSH public keys are now stored in authorized_keys\n           instead of the deprecated authorized_keys2. (Issue #303)\n* Server - [improvement] Improved installation checks and added more messaging.\n* Server - [bug] Installation checks no longer throw a PHP fatal error when the\n           .htaccess file is missing. (Issue #306 #308)\n* Server - [improvement] Added French translation.\n* Server - [bug] No longer attempts to load hidden files.\n\n2.1.5 (2016-03-11)\n==================\n* Server - [bug] Fixed module changes. (Issue #292)\n* Server - [bug] Enclosed database references in backticks in SQL statements. (Issue #290)\n\n2.1.4 (2016-01-24)\n==================\n* Server - [bug] Fixed duplicating template user (result of adding #211).\n\n2.1.3 (2015-12-10)\n==================\n* Client - [bug] Supported sys_get_temp_dir() with PHP < 5.2.1.\n\n2.1.2 (2015-12-08)\n==================\n* Server - [bug] Fixed server config builds. (Issue #269)\n\n2.1.1 (2015-12-07)\n==================\n* Server - [bug] Fixed PHP error when changing the server status. (Issue #267)\n* Server - [bug] Clients would not update the database during installation\n           (result of adding #223).\n* Client - [bug] Installer would create the SSH key incorrectly. (Issue #236 #260)\n* Server - [bug] fM defined temporary directory was not always used.\n* Server - [improvement] Overall performance improvements. (Issue #224)\n\n2.1 (2015-12-02)\n================\n* Server - [feature] Added ability to purge logs. (Issue #212)\n* Client - [feature] Added no-sudoers client option. (Issue #221)\n* Server - [bug] Fixed Modules badge counts.\n* Server - [improvement] Minor UI edits.\n* Server - [improvement] The default Super Admin account can login even if LDAP\n           is configured.\n* Client - [bug] Ensure serial number is an integer at install. (Issue #232)\n* Both   - [feature] Added no-update client installer parameter. (Issue #223)\n* Server - [feature] Added user group support. (Issue #211)\n* Server - [improvement] Upgraded to Font Awesome 4.4.0 and changed some icons.\n* Server - [improvement] Third-party resources now load locally. (Issue #244)\n* Server - [improvement] fM upgrades now give the option to backup the database.\n* Server - [bug] Fixed server group bulk actions. (Issue #256)\n* Server - [bug] Fixed intermittent login issues. (Issue #258)\n\n2.0.3 (2015-06-29)\n==================\n* Server - [bug] Fixed LDAP Group Attribute support. (Issue #226)\n* Server - [bug] Fixed module badge counts.\n\n2.0.2 (2015-05-27)\n==================\n* Server - [bug] Fixed password reset hint text. (Issue #212)\n* Client - [bug] Cron entries are now entered with full path when installer is\n           invoked with a relative path. (Issue #216)\n* Server - [bug] Fixed user creation when php-ldap is not installed. (Issue #212)\n\n2.0.1 (2015-05-03)\n==================\n* Server - [security] Unauthorized users can no longer see the server config\n           via the preview button. (Issue #210)\n* Server - [bug] Fixed client installation output formatting.\n* Client - [bug] Sets correct file mode for sudoers files.\n* Server - [bug] Fixed CSS at login screen.\n\n2.0 (2015-04-27)\n================\n* Server - [improvement] Updated pagination handling.\n* Server - [feature] Added ability to update all servers with a single click on\n           the top menu bar. (Issue #116)\n* Server - [improvement] Improved support for Admin Tools error messages.\n* Server - [improvement] Popup boxes are now draggable.\n* Server - [feature] Added framework for record searching. (Issue #149)\n* Client - [improvement] Added support for sudoers includedir parameter and no\n           longer disables requiretty and env_reset globally.\n* Server - [improvement] Skips apache rewrite module check for CGI/FCGI\n           implementations. (Issue #91)\n* Server - [feature] FM_NO_HTACCESS is now a supported defined constant to\n           remove .htaccess requirement. (Issue #73)\n* Server - [improvement] Updated help file.\n* Server - [bug] Installer now checks to ensure the database and records already\n           exist before running. (Issue #166)\n* Server - [improvement] Remove the Admin->Users menu item when authentication\n           is not used.\n* Server - [improvement] Fixed PHP session errors when no authentication is used.\n* Server - [bug] Fixed bulk action checkbox logic.\n* Server - [bug] Fixed PHP errors during user account window when using a module\n           other than fmDNS (introduced in 1.3).\n* Server - [feature] Added i18n support. (Issue #106)\n* Server - [bug] Fixed upgrade messages after facileManager is upgraded.\n* Server - [security] Added ability to enable/disable automatic client\n           registration in the database. (Issue #122)\n* Server - [bug] Fixed PHP error at login screen when session times out.\n* Server - [improvement] Upgraded to select2 3.5.2.\n* Server - [improvement] jQuery is now used to enable/disable users.\n* Server - [improvement] The installer and upgrader received a facelift.\n* Server - [bug] Fixed an issue where user permissions could not be removed when\n           editing a user account.\n* Server - [improvement] The installer now uses checkmarks instead of text.\n* Server - [improvement] Modules can now be managed in bulk.\n* Server - [improvement] The upgrader will now run the module upgrade routines.\n* Server - [improvement] Server config build previews now display line numbers\n           and highlight lines in question.\n* Server - [feature] User accounts can now be created from a user template.\n* Server - [improvement] LDAP user template can now be undefined which will deny\n           authentication. This is to add another level of user access control.\n* Server - [improvement] The installer provides the correct error message when\n           the database connection fails.\n* Server - [improvement] The installer now works with MySQL auto_increment_offset\n           that is greater than one.\n* Server - [improvement] Swapped /tmp for sys_get_temp_dir().\n* Server - [improvement] Incorporated mod_headers to save bandwidth.\n* Server - [improvement] SSH keys can now be saved if the file already exists.\n* Server - [improvement] Admin logs are now wordwrapped if the data is too long.\n* Both   - [feature] Added ability to define the SSH user to use. (Issue #182)\n* Server - [improvement] Post-upgrade redirect goes to the dashboard instead of\n           the modules page.\n* Client - [improvement] Determines FQDN at install time. (Issue #192).\n\n1.3.1 (2014-11-10)\n==================\n* Client - [bug] Fixed issue where config file parameters are not found and an\n           empty value is returned. (Issue #163)\n* Server - [bug] Fixed database cleanup routine.\n\n1.3 (2014-09-17)\n================\n* Server - [bug] Fixed config build errors and display issues.\n* Server - Added dependency check for posix php module.\n* Server - [bug] Fixed install wizard for database checks as databases could not\n           be created through the installer. (Issue #72)\n* Server - [bug] Fixed menu badge counts.\n* Server - [feature] Added support for select2 jquery.\n* Server - [improvement] Gave the popups a facelift.\n* Server - [bug] Fixed an issue where changing personal user profile would remove\n           all user permissions.\n* Server - [improvement] Pagination is now dynamic. (Issue #85)\n* Both   - [feature] Added OS display support for Raspberry Pi. (Issue #108)\n* Server - [improvement] Added a check for the PHP filter module. (Issue #121)\n* Server - [improvement] Updated the login page.\n* Server - [bug] Fixed SSL mixed content. (Issue #131)\n* Server - [improvement] Added a check for the PHP json module. (Issue #133)\n* Server - [feature] Supports additional configuration previews. (Issue #130)\n\n1.2.3 (2014-06-04)\n==================\n* Server - [feature] Client auto upgrade minimum version are now dynamic.\n* Client - [bug] Fixed client auto upgrades. (Issue #103)\n* Client - [bug] Fixed PHP errors.\n* Server - Added dependency check for posix php module.\n\n1.2.2 (2014-05-16)\n==================\n* Both   - [bug] Fixed client upgrade errors. (Issue #94)\n\n1.2.1 (2014-05-15)\n==================\n* Both   - [bug] Fixed client upgrade versioning. (Issue #93)\n\n1.2 (2014-05-14)\n================\n* Server - Improved password strength settings description.\n* Server - Combined general and module settings in one menu.\n* Server - Added file extensions to all redirects and links.\n* Server - Changed font to Open Sans.\n* Server - CSS tweaks to improve UI on Linux systems. (Issue #86)\n* Server - [feature] Added framework for customizable UI record sorting for use\n           with all modules. (Issue #81)\n* Server - Cleaned up code.\n* Server - Help file links now open in the parent window instead of the popup.\n* Server - Created error page template.\n* Server - Added support for module options in fM options table.\n* Server - [feature] Redesigned how user capabilities are handled which also\n           supports user changes without the need for reauthentication.\n* Server - [bug] New user creations would not save the defined default module.\n* Server - Built-in users can edit more of their profile information.\n* Server - [feature] Added support for a flag to reset the authentication method\n           to 'none' in case of a lockout.\n* Server - [bug] Fixed a case where changing authentication method would throw\n           an error.\n* Both   - Added file extensions to all redirects and links.\n* Server - [feature] Redesigned menuing platform for more flexibility.  This\n           includes hiding menu items to users without proper access.\n* Server - [feature] Added functions to check for php max_input_vars. (Issue #87)\n* Server - Added help file link to issue tracker.\n\n1.1.2 (2014-04-03)\n==================\n* Server - [bug] Fixed password reset typo.\n* Server - [feature] Added favicon.\n* Server - [feature] Improved rewrite check. (Issue #76)\n\n1.1.1 (2014-03-24)\n==================\n* Server - [feature] Databases can now be created outside of the\n           installer. (Issue #72)\n* Server - Improved installer and upgrader error handling.\n* Server - [feature] Added function comments.\n* Server - [feature] Modules can now be uninstalled if they are deactivated and\n           there is an upgrade available.\n\n1.1 (2014-03-18)\n================\n* Server - [feature] Updated menu navigation which also added visual badges that\n           require user attention.\n* Server - [feature] Updated some visual effects.\n* Server - [feature] Client installs now ensure the module is active before\n           continuing the installation process.\n* Client - [feature] Detects if PHP CGI is running instead of CLI. (Issue #45)\n* Server - [feature] Added scroll to top link.\n* Server - [feature] Checks for the required .htaccess file and attempts to create\n           it if missing.\n* Server - [feature] Added ability to update to non-stable releases.\n* Server - [feature] Updated settings pages jquery.\n* Both   - [feature] Added support to auto-update client files. (Issue #53)\n* Client - [feature] Added an argument to display the version.\n\n1.0.2 (2013-12-31)\n==================\n* Server - [bug] Fixed issue where installer would report inability to write\n           the configuration file when the server directory had the\n           appropriate permissions.\n* Both   - [bug] Fixed an issue where client installation would fail when \n           checking account details.\n\n1.0.1 (2013-12-24)\n==================\n* Client - [bug] Added more error handling in isolated install issues.\n* Server - [bug] Enabled update checks by default.\n\n1.0 (2013-12-16)\n================\n* Server - Removed enable/disable option for template user accounts.\n* Server - [bug] Can no longer delete the active template user account.\n* Server - Updated css and jquery animations.\n* Server - [feature] User password strength is now selectable in the settings.\n* Server - Improved logging of settings changes.\n* Server - [feature] Customizable app update checks.\n* Server - CSS tweaks.\n* Server - [feature] fM software update checks are now customizable.\n* Server - [feature] User accounts can now set their default module to use.\n* Server - [bug] Fixed an issue where clients would report as installed\n           when the installation was not complete.\n\n1.0-rc6-1 (2013-11-07)\n======================\n* Server - [bug] Fixed an issue were servers could not be added. (Issue #34)\n\n1.0-rc6 (2013-11-06)\n====================\n* Server - [feature] Server config builds now prompt for confirmation.\n* Server - [bug] Fixed installer password validity background display.\n* Server - [feature] Serial number generation now checks all module server tables\n           for unique values.\n* Server - [bug] Fixed some PHP errors.\n* Server - [bug] Ensures current module is active.\n* Client - [feature] Added install support for multiple modules.\n* Client - Improved Linux distro detection.\n\n1.0-rc5 (2013-10-16)\n====================\n* Server - [bug] Code clean up.\n* Server - [bug] Changed date items to date type.\n* Client - [bug] Fixed client sudoers line.\n* Server - [feature] Added more graphical elements.\n\n1.0-rc4 (2013-10-14)\n====================\n* Server - [bug] Fixed issue where modules could be 'upgraded' to an older version.\n* Server - [bug] Fixed issue with admin log searching.\n* Server - [feature] Module upgrades now inform user to upgrade client files\n           upon completion. (Issue #23)\n* Server - [feature] Added support to show/hide application errors.\n\n1.0-rc3 (2013-09-30)\n====================\n* Server - [bug] Improved validateNumber() javascript function.\n* Server - [feature] Added option to enforce HTTPS.\n\n1.0-rc2 (2013-09-18)\n====================\n* Server - [feature] Integrated installation and upgrade instructions into\n           the README. (Issue #18)\n* Server - [feature] Added additional OS-specific installation instructions.\n           (Issue #1)\n* Server - [feature] Updated some jquery functions.\n\n1.0-rc1 (2013-09-13)\n====================\n* Server - [feature] Added ability to change the displayed datetime format and\n           set the timezone.\n* Server - [feature] Added ad-hoc database backup functionality.\n* Server - [feature] Added LDAP authentication support. (Issue #10)\n* Server - [feature] Updated help files.\n\n1.0-b15 (2013-09-04)\n====================\n* Server - [feature] Added search capabilities to the admin logs page. (Issue #3)\n\n1.0-b14 (2013-09-03)\n====================\n* Server - [feature] Minor change to forgotton password email.\n* Server - [bug] Fixed an issue with module upgrades.\n* Server - [feature] Added more error checking.\n\n1.0-b13 (2013-08-28)\n====================\n* Server - [feature] Added Admin->Settings menu item to set authentication and\n           mailing methods.\n* Server - [feature] Can now disable authentication thus using only the default\n           super-admin user account.\n* Server - [feature] Set several tables to INNODB.\n* Server - [feature] Added support to email password reset links. (Issue #12)\n* Server - [feature] Added support for modules to have more granular user\n           permissions. (Issue #7)\n\n1.0-b12 (2013-08-23)\n====================\n* Server - [bug] Fixed database clean up bug.\n* Server - [feature] Supports pressing the ESC button to cancel a window.\n* Server - [bug] Fixed module installation output.\n* Server - [feature] Replaced logout button with account menu.\n* Server - [feature] Redesigned user management page.\n* Server - [security] Fixed an issue where user permissions could be removed\n           unintentionally during a password change.\n* Server - [security] Super-admins can no longer be demoted by non-super-admins\n           nor themselves. (Issue #11)\n* Server - [feature] Added option to enforce a user password change upon login.\n\n1.0-b11 (2013-08-21)\n====================\n* Server - [feature] Help now pops out.\n\n1.0-b10 (2013-08-14)\n====================\n* Server - [bug] Fixed post-upgrade redirection.\n\n1.0-b9 (2013-08-14)\n===================\n* Server - [feature] Decreased the update check interval.\n* Client - [feature] Added PHP version check.\n\n1.0-b7 (2013-08-13)\n===================\n* Server - [feature] Updated version checks.\n* Server - [bug] Improved installation to prevent duplicate entries.\n* Server - [feature] Improved application requirement checks. (Issue #1)\n* Server - [feature] Improved user creation and modification.\n\n1.0-b6 (2013-08-13)\n===================\n* Server - [feature] Added mod_rewrite check. (Issue #1)\n* Server - [bug] Fixed relative pathing issue.\n* Server - [feature] User no longer gets redirected to the dashboard after\n           authentication.\n\n1.0-b5 (2013-08-10)\n===================\n* Server - [feature] Added module version checks.\n* Server - [feature] Improved upgrade process.\n\n1.0-b4 (2013-08-09)\n===================\n* Initial release.\n", "<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n*/\n\nclass fm_login {\n\t\n\t/**\n\t * Displays the login form\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @return string\n\t */\n\tfunction printLoginForm() {\n\t\tglobal $fm_name;\n\t\t\n\t\tprintHeader(_('Login'), 'login');\n\t\t\n\t\t/** Cannot change password without mail_enable defined */\n\t\t$mail_enable = (getOption('fm_db_version') >= 18) ? getOption('mail_enable') : false;\n\t\t$auth_method = (getOption('fm_db_version') >= 18) ? getOption('auth_method') : false;\n\t\t$forgot_link = ($mail_enable && $auth_method == 1) ? sprintf('<p id=\"forgotton_link\"><a href=\"?forgot_password\">%s</a></p>', _('Forgot your password?')) : null;\n\t\t\n\t\t$branding_logo = getBrandLogo();\n\t\t\n\t\t$login_message = getOption('login_message');\n\t\tif ($login_message) {\n\t\t\t$login_message = '<p class=\"success\">' . $login_message . '</p>';\n\t\t}\n\n\t\tprintf('<form id=\"loginform\" action=\"%1$s\" method=\"post\">\n\t\t<div id=\"fm-branding\">\n\t\t\t<img src=\"%2$s\" /><span>%3$s</span>\n\t\t</div>\n\t\t<div id=\"login_form\">\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<div class=\"input-wrapper\">\n\t\t\t\t\t\t<input type=\"text\" size=\"25\" name=\"username\" id=\"username\" placeholder=\"%4$s\" />\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<div class=\"input-wrapper\">\n\t\t\t\t\t\t<input type=\"password\" size=\"25\" name=\"password\" id=\"password\" placeholder=\"%5$s\" />\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td><input name=\"submit\" id=\"loginbtn\" type=\"submit\" value=\"%3$s\" class=\"button\" /></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t%6$s\n\t\t<div id=\"message\">%7$s</div>\n\t\t</form>\n\t\t</div>', $_SERVER['REQUEST_URI'], $branding_logo, _('Login'), _('Username'),\n\t\t\t\t_('Password'), $forgot_link, $login_message);\n\t\t\n\t\texit(printFooter());\n\t}\n\t\n\t\n\t/**\n\t * Display password reset user form.\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $message Message to display to the user\n\t * @return string\n\t */\n\tfunction printUserForm($message = null) {\n\t\t/** Should not be here if there is no mail_enable defined or if not using builtin auth */\n\t\tif (!getOption('mail_enable') || getOption('auth_method') != 1) {\n\t\t\theader('Location: ' . $GLOBALS['RELPATH']);\n\t\t\texit;\n\t\t}\n\n\t\tglobal $fm_name;\n\t\tprintHeader(_('Password Reset'), 'login');\n\t\t\n\t\t$branding_logo = getBrandLogo();\n\t\t\n\t\tprintf('<form id=\"loginform\" action=\"%s?forgot_password\" method=\"post\">\n\t\t<input type=\"hidden\" name=\"reset_pwd\" value=\"1\" />\n\t\t<div id=\"fm-branding\">\n\t\t\t<img src=\"%s\" /><span>%s</span>\n\t\t</div>\n\t\t<div id=\"login_form\">\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<div class=\"input-wrapper\">\n\t\t\t\t\t\t<input type=\"text\" name=\"user_login\" id=\"user_login\" placeholder=\"%s\" style=\"width: 400px;\" />\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td><input name=\"submit\" id=\"forgotbtn\" type=\"submit\" value=\"%s\" class=\"button\" /></td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<p id=\"forgotton_link\"><a href=\"%s\">&larr; %s</a></p>\n\t\t<div id=\"message\">%s</div>\n\t\t</form>\n\t\t</div>', $_SERVER['PHP_SELF'], $branding_logo, _('Reset Password'), _('Username'),\n\t\t\t\t_('Submit'), $GLOBALS['RELPATH'], _('Login form'), $message);\n\t}\n\t\n\t\t\n\t/**\n\t * Process password reset user form.\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $user_login Username to authenticate\n\t * @return boolean\n\t */\n\tfunction processUserPwdResetForm($user_login = null) {\n\t\tglobal $fmdb;\n\t\t\n\t\tif (empty($user_login)) return;\n\t\t\n\t\t$user_info = getUserInfo(sanitize($user_login), 'user_login');\n\t\t\n\t\t/** If the user is not found, just return lest we give away valid user accounts */\n\t\tif ($user_info == false) return true;\n\t\t\n\t\t$fm_login = $user_info['user_id'];\n\t\t$uniqhash = genRandomString(mt_rand(30, 50));\n\t\t\n\t\t$query = \"INSERT INTO fm_pwd_resets VALUES ('$uniqhash', '$fm_login', \" . time() . \")\";\n\t\t$fmdb->query($query);\n\t\t\n\t\tif (!$fmdb->rows_affected) return false;\n\t\t\n\t\t/** Mail the reset link */\n\t\t$mail_enable = getOption('mail_enable');\n\t\tif ($mail_enable) {\n\t\t\t$result = $this->mailPwdResetLink($fm_login, $uniqhash);\n\t\t\tif ($result !== true) {\n\t\t\t\t$query = \"DELETE FROM fm_pwd_resets WHERE pwd_id='$uniqhash' AND pwd_login='$fm_login'\";\n\t\t\t\t$fmdb->query($query);\n\t\t\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * Checks if the user is authenticated\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @return boolean\n\t */\n\tfunction isLoggedIn() {\n\t\tglobal $fm_name;\n\t\t\n\t\tif (defined('INSTALL')) return false;\n\t\t\n\t\t/** No auth_method defined */\n\t\tif (getOption('fm_db_version') >= 18) {\n\t\t\tif (!getOption('auth_method')) {\n\t\t\t\tif (!isset($_COOKIE['fmid'])) {\n\t\t\t\t\t@session_start();\n\t\n\t\t\t\t\t$_SESSION['user']['logged_in'] = true;\n\t\t\t\t\t$_SESSION['user']['id'] = 1;\n\t\t\t\t\t$_SESSION['user']['account_id'] = 1;\n\t\t\n\t\t\t\t\t$modules = getActiveModules(true);\n\t\t\t\t\tif (!isset($_SESSION['module'])) {\n\t\t\t\t\t\t$_SESSION['module'] = (is_array($modules) && count($modules)) ? $modules[0] : $fm_name;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tsetcookie('fmid', session_id(), strtotime('+1 year'));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsession_set_cookie_params(strtotime('+1 year'));\n\t\t\t\tif (!empty($_COOKIE['fmid'])) {\n\t\t\t\t\t@session_id($_COOKIE['fmid']);\n\t\t\t\t\t@session_start();\n\t\t\t\t}\n\t\t\t\tsession_write_close();\n\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t/** Auth method defined so let's validate */\n\t\tif (isset($_COOKIE['fmid'])) {\n\t\t\t$fmid = $_COOKIE['fmid'];\n\t\t\t\t\n\t\t\t/** Init the session. */\n\t\t\tsession_set_cookie_params(strtotime('+1 week'));\n\t\t\tsession_id($fmid);\n\t\t\t@session_start();\n\t\t\t\t\n\t\t\t/** Check if they're logged in. */\n\t\t\tif (isset($_SESSION['user']['logged_in']) && $_SESSION['user']['logged_in']) {\n\t\t\t\tif (!isset($_SESSION['user']['last_login'])) {\n\t\t\t\t\t$_SESSION['user']['last_login'] = 0;\n\t\t\t\t}\n\t\t\t\t/** Set the last login info */\n\t\t\t\tif (strtotime(\"-1 hour\") > $_SESSION['user']['last_login']) {\n\t\t\t\t\t$_SESSION['user']['last_login'] = strtotime(\"-15 minutes\");\n\t\t\t\t\t$_SESSION['user']['ipaddr'] = isset($_SERVER['REMOTE_HOST']) ? $_SERVER['REMOTE_HOST'] : $_SERVER['REMOTE_ADDR'];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/** Should the user be logged in? */\n\t\t\t\tif (getNameFromID($_SESSION['user']['id'], 'fm_users', 'user_', 'user_id', 'user_status') != 'active') {\n\t\t\t\t\tsession_write_close();\n\t\t\t\t\theader('Location: ' . $GLOBALS['RELPATH'] . '?logout');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tsession_write_close();\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tsession_write_close();\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Do the authentication\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $user_login Username to authenticate\n\t * @param string $user_password Password to authenticate with\n\t * @return boolean\n\t */\n\tfunction checkPassword($user_login, $user_password) {\n\t\tglobal $fmdb, $__FM_CONFIG, $fm_name;\n\t\t\n\t\tif (empty($user_login) || empty($user_password)) return false;\n\t\t\n\t\t/** Built-in authentication */\n\t\t$fm_db_version = getOption('fm_db_version');\n\t\t$auth_method = ($fm_db_version >= 18) ? getOption('auth_method') : true;\n\t\tif ($auth_method) {\n\t\t\t/** Use Builtin Auth when Default Auth Method is LDAP but user is defined with 'facileManager/Builtin' */\n\t\t\t$result = $fmdb->query(\"SELECT * FROM `fm_users` WHERE `user_login` = '$user_login' and `user_auth_type`=1 and `user_status`='active'\");\n\t\t\tif (isset($fmdb->last_result) && is_array($fmdb->last_result) && $fmdb->last_result[0]->user_login == $user_login) {\n\t\t\t\t$auth_method = 1;\n\t\t\t}\n\n\t\t\t/** Builtin Authentication */\n\t\t\tif ($auth_method == 1) {\n\t\t\t\tif ($fm_db_version >= 18) {\n\t\t\t\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_auth_type`=1 AND `user_template_only`='no' AND `user_login`='$user_login'\");\n\t\t\t\t} else {\n\t\t\t\t\t/** Old auth */\n\t\t\t\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_login`='$user_login' AND `user_password`='$user_password'\");\n\t\t\t\t}\n\t\t\t\tif (!$fmdb->num_rows) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\t$user = $fmdb->last_result[0];\n\t\t\t\t\t\n\t\t\t\t\t/** Check password */\n\t\t\t\t\tif ($user->user_password[0] == '*') {\n\t\t\t\t\t\t/** Old MySQL hashing that needs to change */\n\t\t\t\t\t\tif ($user->user_password != '*' . strtoupper(sha1(sha1($user_password, true)))) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresetPassword($user_login, $user_password);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/** PHP hashing */\n\t\t\t\t\t\tif (!password_verify($user_password, $user->user_password)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t/** Enforce password change? */\n\t\t\t\t\tif ($fm_db_version >= 15) {\n\t\t\t\t\t\tif ($user->user_force_pwd_change == 'yes') {\n\t\t\t\t\t\t\t$pwd_reset_query = \"SELECT * FROM `fm_pwd_resets` WHERE `pwd_login`={$user->user_id} ORDER BY `pwd_timestamp` LIMIT 1\";\n\t\t\t\t\t\t\t$fmdb->get_results($pwd_reset_query);\n\t\t\t\t\t\t\tif ($fmdb->num_rows) {\n\t\t\t\t\t\t\t\t$reset = $fmdb->last_result[0];\n\t\t\t\t\t\t\t\treturn array($reset->pwd_id, $user_login);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\t$this->setSession($user);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t/** LDAP Authentication */\n\t\t\t} else {\n\t\t\t\treturn $this->doLDAPAuth($user_login, $_POST['password']);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t\n\t/**\n\t * Update the session in the db\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $fm_login Username to update the database with\n\t * @return null\n\t */\n\tfunction updateSessionDB($fm_login) {\n\t\tglobal $fmdb;\n\t\t\n\t\t$query = \"UPDATE fm_users set user_ipaddr='{$_SESSION['user']['ipaddr']}', user_last_login=\" . time() . \" WHERE `user_login`='\". $fm_login .\"' AND `user_status`!='deleted'\";\n\t\t$fmdb->query($query);\n\t}\n\n\n\t/**\n\t * Logout the user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @return null\n\t */\n\tfunction logout() {\n\t\tif (isset($_COOKIE['fmid'])) {\n\t\t\t$fmid = $_COOKIE['fmid'];\n\t\t\t\n\t\t\t// Init the session.\n\t\t\tsession_id($fmid);\n\t\t\t@session_start();\n\t\t\tif (isset($_SESSION['user']['name'])) {\n\t\t\t\t$this->updateSessionDB($_SESSION['user']['name']);\n\t\t\t}\n\t\t\t@session_unset();\n\t\t\tsetcookie('fmid', '');\n\t\t\t@session_destroy();\n\t\t\tunset($_COOKIE['fmid']);\n\t\t}\n\t}\n\t\n\t/**\n\t * Mail the user password reset link\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $fm_login Username to send the mail to\n\t * @param string $uniq_hash Unique password reset hash\n\t * @return boolean\n\t */\n\tfunction mailPwdResetLink($fm_login, $uniq_hash) {\n\t\tglobal $fm_name;\n\t\t\n\t\t$user_info = getUserInfo($fm_login);\n\t\tif (isEmailAddressValid($user_info['user_email']) === false) return _('There is no valid e-mail address associated with this user.');\n\t\t\n\t\t$subject = sprintf(_('%s Password Reset'), $fm_name);\n\t\t$from = getOption('mail_from');\n\t\t\n\t\treturn sendEmail($user_info['user_email'], $subject, $this->buildPwdResetEmail($user_info, $uniq_hash, true, $subject, $from), $this->buildPwdResetEmail($user_info, $uniq_hash, false));\n\t}\n\t\n\t/**\n\t * Builds the user password reset link email\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param array $user_info User information to build the email from\n\t * @param string $uniq_hash Unique password reset hash\n\t * @param boolean $build_html Whether or not to build a html version\n\t * @param string $title HTML Email title\n\t * @param string $from_address Displayed sent from address\n\t * @return string\n\t */\n\tfunction buildPwdResetEmail($user_info, $uniq_hash, $build_html = true, $title = null, $from_address = null) {\n\t\tglobal $fm_name, $__FM_CONFIG;\n\t\t\n\t\tif ($build_html) {\n\t\t\t$branding_logo = getBrandLogo();\n\t\t\tif ($GLOBALS['RELPATH'] != '/') {\n\t\t\t\t$branding_logo = str_replace($GLOBALS['RELPATH'], '', $branding_logo);\n\t\t\t}\n\t\t\t$branding_logo = $GLOBALS['FM_URL'] . str_replace('//', '/', $branding_logo);\n\t\t\t\n\t\t\t$body = <<<BODY\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\t\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" style=\"background-color: #eeeeee;\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n<title>$title</title>\n</head>\n<body style=\"background-color: #eeeeee; font: 13px 'Lucida Grande', 'Lucida Sans Unicode', Tahoma, Verdana, sans-serif; margin: 1em auto; min-width: 600px; max-width: 600px; padding: 20px; padding-bottom: 50px; -webkit-text-size-adjust: none;\">\n<div style=\"margin-bottom: -8px;\">\n<img src=\"$branding_logo\" style=\"padding-left: 17px;\" />\n<span style=\"font-size: 16pt; font-weight: bold; position: relative; top: -16px; margin-left: 10px;\">$fm_name</span>\n</div>\n<div id=\"shadow\" style=\"-moz-border-radius: 0% 0% 100% 100% / 0% 0% 8px 8px; -webkit-border-radius: 0% 0% 100% 100% / 0% 0% 8px 8px; border-radius: 0% 0% 100% 100% / 0% 0% 8px 8px; -moz-box-shadow: rgba(0,0,0,.30) 0 2px 3px !important; -webkit-box-shadow: rgba(0,0,0,.30) 0 2px 3px !important; box-shadow: rgba(0,0,0,.30) 0 2px 3px !important;\">\n<div id=\"container\" style=\"background-color: #fff; min-height: 200px; margin-top: 1em; padding: 0 1.5em .5em; border: 1px solid #fff; -webkit-border-radius: 5px; -moz-border-radius: 5px; border-radius: 5px; -webkit-box-shadow: inset 0 2px 1px rgba(255,255,255,.97) !important; -moz-box-shadow: inset 0 2px 1px rgba(255,255,255,.97) !important; box-shadow: inset 0 2px 1px rgba(255,255,255,.97) !important;\">\n<p>Hi {$user_info['user_login']},</p>\n<p>You (or somebody else) has requested a link to reset your $fm_name password.</p>\n<p>If you don't want to reset your password, then you can ignore this message.</p>\n<p>To reset your password, click the following link:<br />\n<a href=\"{$GLOBALS['FM_URL']}password_reset.php?key=$uniq_hash&login={$user_info['user_login']}\">{$GLOBALS['FM_URL']}password_reset.php?key=$uniq_hash&login={$user_info['user_login']}</a></p>\n<p>This link expires in {$__FM_CONFIG['clean']['time']}.</p>\n</div>\n</div>\n<p style=\"font-size: 10px; color: #888; text-align: center;\">$fm_name | $from_address</p>\n</body>\n</html>\nBODY;\n\t\t} else {\n\t\t\t$body = sprintf('Hi %s,\n\nYou (or somebody else) has requested a link to reset your %s password.\n\nIf you don\\'t want to reset your password, then you can ignore this message.\n\nTo reset your password, click the following link:\n\n%s\n\nThis link expires in %s.',\n\t\t$user_info['user_login'], $fm_name,\n\t\t\"{$GLOBALS['FM_URL']}password_reset.php?key=$uniq_hash&login={$user_info['user_login']}\",\n\t\t$__FM_CONFIG['clean']['time']);\n\t\t}\n\t\t\n\t\treturn $body;\n\t}\n\t\n\t/**\n\t * Sets the session variables for the authenticated user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param object $user User information to create session variables from\n\t * @return null\n\t */\n\tfunction setSession($user) {\n\t\tglobal $fm_name;\n\t\t\n\t\t@session_start();\n\t\tsession_regenerate_id(true);\n\t\t$_SESSION['user']['logged_in'] = true;\n\t\t$_SESSION['user']['id'] = $user->user_id;\n\t\t$_SESSION['user']['name'] = $user->user_login;\n\t\t$_SESSION['user']['last_login'] = $user->user_last_login;\n\t\t$_SESSION['user']['account_id'] = $user->account_id;\n\t\t$_SESSION['user']['ipaddr'] = isset($_SERVER['REMOTE_HOST']) ? $_SERVER['REMOTE_HOST'] : $_SERVER['REMOTE_ADDR'];\n\t\t\n\t\t/** Upgrade compatibility */\n\t\tif (getOption('fm_db_version') < 32) $_SESSION['user']['fm_perms'] = $user->user_perms;\n\n\t\tsetUserModule($user->user_default_module);\n\t\tsetcookie('fmid', session_id(), strtotime('+1 week'));\n\t\t$this->updateSessionDB($_SESSION['user']['name']);\n\t\tsession_write_close();\n\t}\n\t\n\t\n\t/**\n\t * Performs the LDAP authentication procedure\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $username Username to authenticate\n\t * @param string $password Username to authenticate with\n\t * @return boolean\n\t */\n\tfunction doLDAPAuth($username, $password) {\n\t\tglobal $__FM_CONFIG, $fmdb;\n\n\t\t/** Get LDAP variables */\n\t\tif (empty($ldap_server))          $ldap_server          = getOption('ldap_server');\n\t\tif (empty($ldap_port))            $ldap_port            = getOption('ldap_port');\n\t\tif (empty($ldap_port_ssl))        $ldap_port_ssl        = getOption('ldap_port_ssl');\n\t\tif (empty($ldap_version))         $ldap_version         = getOption('ldap_version');\n\t\tif (empty($ldap_encryption))      $ldap_encryption      = getOption('ldap_encryption');\n\t\tif (empty($ldap_cert_file))       $ldap_cert_file       = getOption('ldap_cert_file');\n\t\tif (empty($ldap_ca_cert_file))    $ldap_ca_cert_file    = getOption('ldap_ca_cert_file');\n\t\tif (empty($ldap_referrals))       $ldap_referrals       = getOption('ldap_referrals');\n\t\tif (empty($ldap_dn))              $ldap_dn              = getOption('ldap_dn');\n\t\tif (empty($ldap_group_require))   $ldap_group_require   = getOption('ldap_group_require');\n\t\tif (empty($ldap_group_dn))        $ldap_group_dn        = getOption('ldap_group_dn');\n\t\tif (empty($ldap_group_attribute)) $ldap_group_attribute = getOption('ldap_group_attribute');\n\t\tif (empty($ldap_group_search_dn)) $ldap_group_search_dn = getOption('ldap_group_search_dn');\n\n\t\t$ldap_dn = str_replace('<username>', $username, $ldap_dn);\n\n\t\t/** Set default ports if none specified */\n\t\tif (!$ldap_port) $ldap_port = 389;\n\t\tif (!$ldap_port_ssl) $ldap_port_ssl = 636;\n\n\t\t/** Test connectivity to ldap server */\n\t\t$socket_test_result = ($ldap_encryption == $__FM_CONFIG['options']['ldap_encryption'][0]) ? socketTest($ldap_server, $ldap_port, 5) : socketTest($ldap_server, $ldap_port_ssl, 5);\n\t\tif (!$socket_test_result) return _('The authentication server is currently unavailable. Please try again later.');\n\n\t\tif ($ldap_encryption == 'SSL') {\n\t\t\tif ($ldap_cert_file) {\n\t\t\t\t@ldap_set_option(NULL, LDAP_OPT_X_TLS_CERTFILE, $ldap_cert_file);\n\t\t\t}\n\t\t\tif ($ldap_ca_cert_file) {\n\t\t\t\t@ldap_set_option(NULL, LDAP_OPT_X_TLS_CACERTFILE, $ldap_ca_cert_file);\n\t\t\t}\n\t\t\t$ldap_connect = @ldap_connect('ldaps://' . $ldap_server, $ldap_port_ssl);\n\t\t} else {\n\t\t\t$ldap_connect = @ldap_connect($ldap_server, $ldap_port);\n\t\t}\n\t\t\n\t\tif ($ldap_connect) {\n\t\t\t/** Set protocol version */\n\t\t\tif (!@ldap_set_option($ldap_connect, LDAP_OPT_PROTOCOL_VERSION, $ldap_version)) {\n\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t/** Set referrals */\n\t\t\tif(!@ldap_set_option($ldap_connect, LDAP_OPT_REFERRALS, $ldap_referrals)) {\n\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t/** Start TLS if requested */\n\t\t\tif ($ldap_encryption == 'TLS') {\n\t\t\t\tif (!@ldap_start_tls($ldap_connect)) {\n\t\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$ldap_bind = @ldap_bind($ldap_connect, $ldap_dn, $password);\n\t\t\t\n\t\t\tif ($ldap_bind) {\n\t\t\t\tif ($ldap_group_require) {\n\t\t\t\t\tif (strpos($ldap_dn, '@') !== false) {\n\t\t\t\t\t\tif (isset($ldap_group_search_dn) && !empty($ldap_group_search_dn)) {\n\t\t\t\t\t\t\t$ldap_dn = $ldap_group_search_dn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/** Convert AD ldap_dn to real ldap_dn */\n\t\t\t\t\t\t\t$ldap_dn_parts = explode('@', $ldap_dn);\n\t\t\t\t\t\t\t$ldap_dn = 'dc=' . join(',dc=', explode('.', $ldap_dn_parts[1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t/** Process AD group membership */\n\t\t\t\t\t\t$ldap_group_response = $this->checkGroupMembership($ldap_connect, $this->getDN($ldap_connect, $username, $ldap_dn), $ldap_group_dn, $ldap_group_attribute);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/** Process LDAP group membership */\n\t\t\t\t\t\t$ldap_group_response = @ldap_compare($ldap_connect, $ldap_group_dn, $ldap_group_attribute, $username);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ($ldap_group_response !== true) {\n\t\t\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/** Get user permissions from database */\n\t\t\t\t$fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_auth_type`=2 AND `user_template_only`='no' AND `user_login`='$username'\");\n\t\t\t\tif (!$fmdb->num_rows) {\n\t\t\t\t\tif (!$this->createUserFromTemplate($username)) {\n\t\t\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$this->setSession($fmdb->last_result[0]);\n\n\t\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\t/** Close LDAP connection */\n\t\t\t$this->closeLDAPConnect($ldap_connect);\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t\n\t/**\n\t * Creates a LDAP user from the defined template user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t *\n\t * @param string $username Username to create\n\t * @return boolean\n\t */\n\tfunction createUserFromTemplate($username) {\n\t\tglobal $fmdb;\n\t\t\n\t\t$template_user_id = getOption('ldap_user_template');\n\t\t\n\t\t/** User does not exist in database - get the template user */\n\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_id` = \" . $template_user_id);\n\t\tif (!$fmdb->num_rows) return false;\n\t\t\n\t\t/** Attempt to add the new LDAP user to the database based on the template */\n\t\t$fmdb->query(\"INSERT INTO `fm_users` (`account_id`,`user_login`, `user_password`, `user_email`, `user_default_module`, `user_auth_type`, `user_caps`) \n\t\t\t\t\tSELECT `account_id`, '$username', '', '', `user_default_module`, 2, `user_caps` from `fm_users` WHERE `user_id`=\" . $template_user_id);\n\t\tif (!$fmdb->rows_affected) return false;\n\t\t\n\t\t/** Get the user results now */\n\t\t$fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_auth_type`=2 AND `user_template_only`='no' AND `user_login`='$username'\");\n\t\tif (!$fmdb->num_rows) return false;\n\t\t\n\t\treturn true;\n\t}\n\n\n\t/**\n\t * Closes a LDAP resource\n\t *\n\t * @since 3.0\n\t * @package facileManager\n\t *\n\t * @param resource $ldap_connect Resource to close\n\t * @return boolean\n\t */\n\tprivate function closeLDAPConnect($ldap_connect) {\n\t\tif (is_resource($ldap_connect)) {\n\t\t\t@ldap_close($ldap_connect);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Gets the DN of an account name\n\t * (based on user comment from http://php.net/manual/en/ref.ldap.php#99347)\n\t *\n\t * @since 3.0\n\t * @package facileManager\n\t *\n\t * @param resource $ldap_connect Resource to use\n\t * @param string $samaccountname SAM Account name to search for\n\t * @param string $basedn Base DN to use\n\t * @return boolean\n\t */\n\tprivate function getDN($ldap_connect, $samaccountname, $basedn) {\n\t\t$attributes = array('dn');\n\t\t$result = ldap_search($ldap_connect, $basedn,\n\t\t\t\"(samaccountname={$samaccountname})\", $attributes);\n\t\tif ($result === false) return '';\n\t\t$entries = ldap_get_entries($ldap_connect, $result);\n\t\treturn ($entries['count'] > 0) ? $entries[0]['dn'] : '';\n\t}\n\t\n\t\n\t/**\n\t * Checks recursive group membership of the user\n\t * (based on user comment from http://php.net/manual/en/ref.ldap.php#99347)\n\t *\n\t * @since 3.0\n\t * @package facileManager\n\t *\n\t * @param resource $ldap_connect Resource to use\n\t * @param string $userdn\n\t * @param string $groupdn\n\t * @param string $ldap_group_attribute\n\t * @return boolean\n\t */\n\tprivate function checkGroupMembership($ldap_connect, $userdn, $groupdn, $ldap_group_attribute) {\n\t\t$result = ldap_read($ldap_connect, $userdn, '(objectclass=*)', array($ldap_group_attribute));\n\t\tif ($result === false) return false;\n\t\t\n\t\t$entries = ldap_get_entries($ldap_connect, $result);\n\t\tif ($entries['count'] <= 0) return false;\n\t\t\n\t\tif (empty($entries[0][$ldap_group_attribute])) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor ($i = 0; $i < $entries[0][$ldap_group_attribute]['count']; $i++) {\n\t\t\t\tif ($entries[0][$ldap_group_attribute][$i] == $groupdn) return true;\n\t\t\t\telseif ($this->checkGroupMembership($ldap_connect, $entries[0][$ldap_group_attribute][$i], $groupdn, $ldap_group_attribute)) return true;\n\t\t\t};\n\t\t};\n\t\treturn false;\n\t}\n\t\n\t\n\t/**\n\t * Authenticates the provided API token\n\t *\n\t * @since 4.0\n\t * @package facileManager\n\t *\n\t * @param string $token API key\n\t * @param string $secret API secret key\n\t * @return boolean\n\t */\n\tfunction doAPIAuth($token, $secret) {\n\t\tglobal $fmdb;\n\n\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_keys` WHERE `key_status`='active' AND `key_token`='$token' AND `account_id`='\" . getAccountID($_POST['AUTHKEY']) . \"'\");\n\t\tif (!$fmdb->num_rows) {\n\t\t\treturn false;\n\t\t}\n\t\t$apikey = $fmdb->last_result[0];\n\t\t\n\t\t/** Check token secret */\n\t\t/** PHP hashing */\n\t\tif (!password_verify($secret, $apikey->key_secret)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t$result = $fmdb->get_results(\"SELECT * FROM `fm_users` WHERE `user_status`='active' AND `user_template_only`='no' AND `user_id`=\" . $apikey->user_id . \" AND `account_id`='\" . getAccountID($_POST['AUTHKEY']) . \"'\");\n\t\tif (!$fmdb->num_rows) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->setSession($fmdb->last_result[0]);\n\n\t\treturn true;\n\t}\n\t\n}\n\nif (!isset($fm_login))\n\t$fm_login = new fm_login();\n\n?>\n", "<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n*/\n\nclass fm_users {\n\t\n\t/**\n\t * Displays the user list\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction rows($result, $type, $page, $total_pages) {\n\t\tglobal $fmdb;\n\t\t\n\t\t$num_rows = $fmdb->num_rows;\n\t\t$results = $fmdb->last_result;\n\n\t\t$start = $_SESSION['user']['record_count'] * ($page - 1);\n\t\techo displayPagination($page, $total_pages);\n\n\t\t$table_info = array(\n\t\t\t\t\t\t'class' => 'display_results sortable',\n\t\t\t\t\t\t'id' => 'table_edits',\n\t\t\t\t\t\t'name' => 'users'\n\t\t\t\t\t);\n\t\t$title_array[] = array('class' => 'header-tiny header-nosort');\n\n\t\tif ($type == 'users') {\n\t\t\t$title_array[] = array('title' => _('Login'), 'rel' => 'user_login');\n\t\t\tarray_push($title_array,\n\t\t\t\t\tarray('title' => _('Last Session Date'), 'rel' => 'user_last_login'),\n\t\t\t\t\tarray('title' => _('Last Session Host'), 'class' => 'header-nosort'),\n\t\t\t\t\tarray('title' => _('Authenticate With'), 'class' => 'header-nosort'),\n\t\t\t\t\tarray('title' => _('Comment'), 'class' => 'header-nosort'));\n\t\t} elseif ($type == 'groups') {\n\t\t\tarray_push($title_array,\n\t\t\t\tarray('title' => _('Group Name'), 'rel' => 'group_name'),\n\t\t\t\tarray('title' => _('Group Members'), 'class' => 'header-nosort'),\n\t\t\t\tarray('title' => _('Comment'), 'class' => 'header-nosort'));\n\t\t} elseif ($type == 'keys') {\n\t\t\tarray_push($title_array,\n\t\t\t\tarray('title' => _('Key'), 'rel' => 'key_token'));\n\t\t\tif (currentUserCan('manage_users')) {\n\t\t\t\tarray_push($title_array,\n\t\t\t\t\tarray('title' => _('User'), 'rel' => 'user_id'));\t\n\t\t\t}\n\t\t}\n\t\t$title_array[] = array('title' => _('Actions'), 'class' => 'header-actions header-nosort');\n\n\t\techo displayTableHeader($table_info, $title_array);\n\t\t\n\t\tif ($result) {\n\t\t\t$y = 0;\n\t\t\tfor ($x=$start; $x<$num_rows; $x++) {\n\t\t\t\tif ($y == $_SESSION['user']['record_count']) break;\n\t\t\t\t$this->displayRow($results[$x], $type);\n\t\t\t\t$y++;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\techo \"</tbody>\\n</table>\\n\";\n\t\tif (!$result) {\n\t\t\tif ($type == 'users') {\n\t\t\t\t$message = _('There are no users.');\n\t\t\t} elseif ($type == 'groups') {\n\t\t\t\t$message = _('There are no groups.');\n\t\t\t} elseif ($type == 'keys') {\n\t\t\t\t$message = _('There are no keys.');\n\t\t\t}\n\t\t\tprintf('<p id=\"table_edits\" class=\"noresult\" name=\"users\">%s</p>', $message);\n\t\t}\n\t}\n\n\t/**\n\t * Adds the new user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction addUser($data) {\n\t\tglobal $fmdb, $fm_name, $fm_login;\n\t\t\n\t\textract($data, EXTR_SKIP);\n\t\t\n\t\t$user_login = sanitize($user_login);\n\t\t$user_password = sanitize($user_password);\n\t\t$user_email = sanitize($user_email);\n\t\t\n\t\t/** Template user? */\n\t\tif (isset($user_template_only) && $user_template_only == 'yes') {\n\t\t\t$user_template_only = 'yes';\n\t\t\t$user_status = 'disabled';\n\t\t\t$user_auth_type = 0;\n\t\t} else {\n\t\t\t$user_template_only = 'no';\n\t\t\t$user_status = 'active';\n\t\t\t$user_auth_type = isset($user_auth_type) ? sanitize($user_auth_type) : 1;\n\t\t}\n\n\t\tif (empty($user_login)) return _('No username defined.');\n\t\tif ($user_auth_type == 2) {\n\t\t\t$user_password = null;\n\t\t} else {\n\t\t\tif (empty($user_password) && $user_template_only == 'no') return _('No password defined.');\n\t\t\tif ($user_password != sanitize($cpassword) && $user_template_only == 'no') return _('Passwords do not match.');\n\t\t}\n\t\tif (empty($user_email) && $user_template_only == 'no') return _('No e-mail address defined.');\n\t\t\n\t\t/** Check name field length */\n\t\t$field_length = getColumnLength('fm_users', 'user_login');\n\t\tif ($field_length !== false && strlen($user_login) > $field_length) return sprintf(_('Username is too long (maximum %d characters).'), $field_length);\n\t\t\n\t\t/** Force password change? */\n\t\t$user_force_pwd_change = (isset($user_force_pwd_change) && $user_force_pwd_change == 'yes') ? 'yes' : 'no';\n\n\t\t/** Does the record already exist for this account? */\n\t\t$query = \"SELECT * FROM `fm_users` WHERE `user_status`!='deleted' AND `user_login`='$user_login'\";\n\t\t$fmdb->get_results($query);\n\t\tif ($fmdb->num_rows) return _('This user already exists.');\n\t\t\n\t\tif ($user_group) {\n\t\t\t$user_caps = '';\n\t\t} else {\n\t\t\t$user_group = 0;\n\t\t}\n\t\t\n\t\t/** Process user permissions */\n\t\tif (isset($user_caps[$fm_name])) {\n\t\t\tif (array_key_exists('do_everything', $user_caps[$fm_name])) {\n\t\t\t\t$user_caps = array($fm_name => array('do_everything' => 1));\n\t\t\t}\n\t\t}\n\t\tif (isset($user_caps)) {\n\t\t\tforeach ($user_caps as $module => $caps_array) {\n\t\t\t\tif (array_key_exists('read_only', $caps_array)) {\n\t\t\t\t\t$user_caps[$module] = array('read_only' => 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t$query = \"INSERT INTO `fm_users` (`account_id`, `user_login`, `user_password`, `user_comment`, `user_email`, `user_group`, `user_force_pwd_change`, `user_default_module`, `user_caps`, `user_template_only`, `user_status`, `user_auth_type`) \n\t\t\t\tVALUES('{$_SESSION['user']['account_id']}', '$user_login', '\" . password_hash($user_password, PASSWORD_DEFAULT) . \"', '$user_comment', '$user_email', '$user_group', '$user_force_pwd_change', '$user_default_module', '\" . serialize($user_caps) . \"', '$user_template_only', '$user_status', $user_auth_type)\";\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn formatError(_('Could not add the user because a database error occurred.'), 'sql');\n\t\t}\n\n\t\t/** Process forced password change */\n\t\tif ($user_force_pwd_change == 'yes') $fm_login->processUserPwdResetForm($user_login);\n\t\t\n\t\taddLogEntry(sprintf(_(\"Added user '%s'.\"), $user_login), $fm_name);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Adds the new group\n\t *\n\t * @since 2.1\n\t * @package facileManager\n\t */\n\tfunction addGroup($data) {\n\t\tglobal $fmdb, $fm_name, $fm_login;\n\t\t\n\t\textract($data, EXTR_SKIP);\n\t\t\n\t\t$group_name = sanitize($group_name);\n\t\t$group_comment = sanitize($group_comment);\n\t\t\n\t\tif (empty($group_name)) return _('No group name defined.');\n\t\t\n\t\t/** Check name field length */\n\t\t$field_length = getColumnLength('fm_groups', 'group_name');\n\t\tif ($field_length !== false && strlen($group_name) > $field_length) return sprintf(_('Group name is too long (maximum %d characters).'), $field_length);\n\t\t\n\t\t/** Does the record already exist for this account? */\n\t\t$query = \"SELECT * FROM `fm_groups` WHERE `group_status`!='deleted' AND `group_name`='$group_name'\";\n\t\t$fmdb->get_results($query);\n\t\tif ($fmdb->num_rows) return _('This group already exists.');\n\t\t\n\t\t/** Process user permissions */\n\t\tif (isset($user_caps[$fm_name])) {\n\t\t\tif (array_key_exists('do_everything', $user_caps[$fm_name])) {\n\t\t\t\t$user_caps = array($fm_name => array('do_everything' => 1));\n\t\t\t}\n\t\t}\n\t\tif (isset($user_caps)) {\n\t\t\tforeach ($user_caps as $module => $caps_array) {\n\t\t\t\tif (array_key_exists('read_only', $caps_array)) {\n\t\t\t\t\t$user_caps[$module] = array('read_only' => 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t$query = \"INSERT INTO `fm_groups` (`account_id`, `group_name`, `group_caps`, `group_comment`, `group_status`) \n\t\t\t\tVALUES('{$_SESSION['user']['account_id']}', '$group_name', '\" . serialize($user_caps) . \"', '$group_comment', 'active')\";\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn formatError(_('Could not add the group because a database error occurred.'), 'sql');\n\t\t}\n\t\t\n\t\tif (isset($group_users) && is_array($group_users)) {\n\t\t\t$query = \"UPDATE `fm_users` SET `user_group`='{$fmdb->insert_id}', `user_caps`=NULL WHERE `user_id` IN ('\" . join(\"','\", $group_users) . \"')\";\n\t\t\tif (!$fmdb->query($query)) {\n\t\t\t\t$addl_text = ($fmdb->last_error) ? '<br />' . $fmdb->last_error : null;\n\t\t\t\treturn formatError(_('Could not associate the users with the group.'), 'sql');\n\t\t\t}\n\t\t}\n\n\t\taddLogEntry(sprintf(_(\"Added group '%s'.\"), $group_name), $fm_name);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Updates the selected user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction updateUser($post) {\n\t\tglobal $fmdb, $fm_name, $fm_login;\n\t\t\n\t\t/** Template user? */\n\t\tif (isset($post['user_template_only']) && $post['user_template_only'] == 'yes') {\n\t\t\t$post['user_template_only'] = 'yes';\n\t\t\t$post['user_auth_type'] = 0;\n\t\t\t$post['user_status'] = 'disabled';\n\t\t} else {\n\t\t\t$post['user_template_only'] = 'no';\n\t\t\t$post['user_auth_type'] = getNameFromID($post['user_id'], 'fm_users', 'user_', 'user_id', 'user_auth_type');\n\t\t\tif (!$post['user_auth_type']) $post['user_auth_type'] = 1;\n\t\t}\n\n\t\t$post['user_id'] = (!isset($post['user_id']) || !$post['user_id']) ? $_SESSION['user']['id'] : intval($post['user_id']);\n\n\t\t/** Authorized to update users? */\n\t\tif ((!currentUserCan('manage_users') && ($_SESSION['user']['id'] != $post['user_id'] || isset($post['user_caps']))) \n\t\t\t|| ($_SESSION['user']['id'] != $post['user_id'] && $post['user_id'] == getDefaultAdminID()) \n\t\t\t|| isset($post['user_login'])\n\t\t\t|| (isset($post['user_caps']) && $_SESSION['user']['id'] == $post['user_id'] && $_SESSION['user']['id'] == getDefaultAdminID())) {\n\t\t\t\treturn _('You do not have permission to make these changes.');\n\t\t}\n\n\t\tif (!empty($post['user_password'])) {\n\t\t\tif (empty($post['cpassword']) || $post['user_password'] != $post['cpassword']) return _('Passwords do not match.');\n\t\t\t$post['user_password'] = sanitize($post['user_password']);\n\t\t\tif (password_verify($post['user_password'], getNameFromID($post['user_id'], 'fm_users', 'user_', 'user_id', 'user_password'))) return _('Password is not changed.');\n\t\t\t$sql_pwd = \"`user_password`='\" . password_hash($post['user_password'], PASSWORD_DEFAULT) . \"',\";\n\t\t} else $sql_pwd = null;\n\t\t\n\t\t$sql_edit = null;\n\t\t\n\t\t$exclude = array('submit', 'action', 'user_id', 'cpassword', 'user_password', 'user_caps', 'is_ajax', 'process_user_caps', 'type');\n\n\t\tforeach ($post as $key => $data) {\n\t\t\tif (!in_array($key, $exclude)) {\n\t\t\t\t$sql_edit .= $key . \"='\" . sanitize($data) . \"', \";\n\t\t\t}\n\t\t}\n\t\t$sql = rtrim($sql_edit . $sql_pwd, ', ');\n\t\t\n\t\t/** Process user permissions */\n\t\tif (isset($post['process_user_caps']) && (!isset($post['user_caps']) || $post['user_group'])) $post['user_caps'] = array();\n\t\t\n\t\tif (isset($post['user_caps'][$fm_name])) {\n\t\t\tif (array_key_exists('do_everything', $post['user_caps'][$fm_name])) {\n\t\t\t\t$post['user_caps'] = array($fm_name => array('do_everything' => 1));\n\t\t\t}\n\t\t}\n\t\tif (isset($post['user_caps'])) {\n\t\t\t$sql .= \",user_caps='\" . serialize($post['user_caps']) . \"'\";\n\t\t}\n\t\t\n\t\t/** Update the user */\n\t\t$query = \"UPDATE `fm_users` SET $sql WHERE `user_id`={$post['user_id']} AND `account_id`='{$_SESSION['user']['account_id']}'\";\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn formatError(_('Could not update the user because a database error occurred.'), 'sql');\n\t\t}\n\n\t\t$user_login = getNameFromID($post['user_id'], 'fm_users', 'user_', 'user_id', 'user_login');\n\t\t\n\t\t/** Process forced password change */\n\t\tif (isset($post['user_force_pwd_change']) && $post['user_force_pwd_change'] == 'yes') $fm_login->processUserPwdResetForm($user_login);\n\t\t\n\t\taddLogEntry(sprintf(_(\"Updated user '%s'.\"), $user_login), $fm_name);\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * Updates the selected group\n\t *\n\t * @since 2.1\n\t * @package facileManager\n\t */\n\tfunction updateGroup($post) {\n\t\tglobal $fmdb, $fm_name, $fm_login;\n\t\t\n\t\t$post['group_id'] = intval($post['group_id']);\n\t\tif (!isset($post['group_id'])) return _('This is a malformed request.');\n\t\tif (empty($post['group_name'])) return _('No group name defined.');\n\n\t\t$group_name = sanitize($post['group_name']);\n\t\t\n\t\t/** Check name field length */\n\t\t$field_length = getColumnLength('fm_groups', 'group_name');\n\t\tif ($field_length !== false && strlen($group_name) > $field_length) return sprintf(_('Group name is too long (maximum %d characters).'), $field_length);\n\t\t\n\t\t/** Does the record already exist for this account? */\n\t\t$query = \"SELECT * FROM `fm_groups` WHERE `group_status`!='deleted' AND `group_name`='$group_name'\";\n\t\t$fmdb->get_results($query);\n\t\tif ($fmdb->num_rows) return _('This group already exists.');\n\t\t\n\t\t$sql_edit = null;\n\t\t\n\t\t$exclude = array('submit', 'action', 'group_id', 'user_caps', 'is_ajax', 'process_user_caps', 'type', 'group_users');\n\n\t\tforeach ($post as $key => $data) {\n\t\t\tif (!in_array($key, $exclude)) {\n\t\t\t\t$sql_edit .= $key . \"='\" . sanitize($data) . \"', \";\n\t\t\t}\n\t\t}\n\t\t$sql = rtrim($sql_edit, ', ');\n\t\t\n\t\t/** Process group permissions */\n\t\tif (isset($post['process_user_caps']) && !isset($post['user_caps'])) $post['user_caps'] = array();\n\t\t\n\t\tif (isset($post['user_caps'][$fm_name])) {\n\t\t\tif (array_key_exists('do_everything', $post['user_caps'][$fm_name])) {\n\t\t\t\t$post['user_caps'] = array($fm_name => array('do_everything' => 1));\n\t\t\t}\n\t\t}\n\t\tif (isset($post['user_caps'])) {\n\t\t\t$sql .= \",group_caps='\" . serialize($post['user_caps']) . \"'\";\n\t\t}\n\t\t\n\t\t/** Update the group */\n\t\t$query = \"UPDATE `fm_groups` SET $sql WHERE `group_id`={$post['group_id']} AND `account_id`='{$_SESSION['user']['account_id']}'\";\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn formatError(_('Could not update the group because a database error occurred.'), 'sql');\n\t\t}\n\t\t\n\t\t/* Associated users with group */\n\t\t$queries[] = \"UPDATE `fm_users` SET `user_group`='0', `user_caps`=NULL WHERE `user_group`='{$post['group_id']}'\";\n\t\t$queries[] = \"UPDATE `fm_users` SET `user_group`='{$post['group_id']}', `user_caps`=NULL WHERE `user_id` IN ('\" . join(\"','\", (array) $post['group_users']) . \"')\";\n\t\tforeach ($queries as $query) {\n\t\t\t$fmdb->query($query);\n\t\t\tif ($fmdb->sql_errors) {\n\t\t\t\treturn formatError(_('Could not associate the users with the group.'), 'sql');\n\t\t\t}\n\t\t}\n\n\t\taddLogEntry(sprintf(_(\"Updated group '%s'.\"), $post['group_name']), $fm_name);\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * Deletes the selected user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction delete($id, $type = 'user') {\n\t\tglobal $fm_name;\n\t\t\n\t\t$functionCan = $type . 'Can';\n\t\t\n\t\tif ($type != 'key' && (!currentUserCan('do_everything') && $functionCan($id, 'do_everything')) || ($type == 'user' && $id == getDefaultAdminID())) {\n\t\t\treturn sprintf(_('You do not have permission to delete this %s.'), $type);\n\t\t}\n\t\tif ($type == 'user') {\n\t\t\t/** Ensure user is not current LDAP template user */\n\t\t\tif (getOption('auth_method') == 2) {\n\t\t\t\t$template_user_id = getOption('ldap_user_template');\n\t\t\t\tif ($id == $template_user_id) return _('This user is the LDAP user template and cannot be deleted at this time.');\n\t\t\t}\n\t\t\t$field = 'user_login';\n\t\t} elseif ($type == 'group') {\n\t\t\t$field = 'group_name';\n\t\t\tif (basicUpdate('fm_users', $id, 'user_group', 0, 'user_group') === false) {\n\t\t\t\treturn formatError(_('This group could not be removed from the associated users.'), 'sql');\n\t\t\t}\n\t\t} elseif ($type == 'key') {\n\t\t\t$field = 'key_token';\n\t\t}\n\t\t\n\t\t$tmp_name = getNameFromID($id, 'fm_' . $type . 's', $type . '_', $type . '_id', $field);\n\t\tif (!updateStatus('fm_' . $type . 's', $id, $type . '_', 'deleted', $type . '_id')) {\n\t\t\treturn formatError(sprintf(_('This %s could not be deleted.'), $type), 'sql');\n\t\t} else {\n\t\t\taddLogEntry(sprintf(_(\"Deleted %s '%s'.\"), $type, $tmp_name), $fm_name);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\n\t/**\n\t * Displays the user rows\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction displayRow($row, $type) {\n\t\tglobal $__FM_CONFIG, $fm_name;\n\t\t\n\t\t$property = rtrim($type, 's') . '_status';\n\t\t$disabled_class = ($row->$property == 'disabled') ? ' class=\"disabled\"' : null;\n\n\t\tif ($type == 'users') {\n\t\t\t$id = $row->user_id;\n\t\t\t$default_id = getDefaultAdminID();\n\t\t\tif (currentUserCan('manage_users') && $_SESSION['user']['id'] != $row->user_id) {\n\t\t\t\t$edit_status = null;\n\t\t\t\tif ($row->user_template_only == 'yes' && (currentUserCan('do_everything') || (!userCan($row->user_id, 'do_everything')))) {\n\t\t\t\t\t$edit_status .= '<a class=\"copy_form_link\" name=\"' . $type . '\" href=\"#\">' . $__FM_CONFIG['icons']['copy'] . '</a>';\n\t\t\t\t\t$edit_status .= '<a class=\"edit_form_link\" name=\"' . $type . '\" href=\"#\">' . $__FM_CONFIG['icons']['edit'] . '</a>';\n\t\t\t\t}\n\t\t\t\tif ($row->user_template_only == 'no') {\n\t\t\t\t\tif ($row->user_id != $_SESSION['user']['id']) {\n\t\t\t\t\t\tif ((currentUserCan('do_everything') || !userCan($row->user_id, 'do_everything')) && $row->user_id != $default_id) {\n\t\t\t\t\t\t\t$edit_status .= '<a class=\"edit_form_link\" name=\"' . $type . '\" href=\"#\">' . $__FM_CONFIG['icons']['edit'] . '</a>';\n\t\t\t\t\t\t\t$edit_status .= '<a class=\"status_form_link\" href=\"#\" rel=\"';\n\t\t\t\t\t\t\t$edit_status .= ($row->user_status == 'active') ? 'disabled\">' . $__FM_CONFIG['icons']['disable'] : 'active\">' . $__FM_CONFIG['icons']['enable'];\n\t\t\t\t\t\t\t$edit_status .= '</a>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** Cannot change password without mail_enable defined */\n\t\t\t\t\t\tif (getOption('mail_enable') && $row->user_auth_type != 2 && $row->user_template_only == 'no') {\n\t\t\t\t\t\t\t$edit_status .= '<a class=\"reset_password\" id=\"' . $row->user_login . '\" href=\"#\">' . $__FM_CONFIG['icons']['pwd_reset'] . '</a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$edit_status .= sprintf('<center>%s</center>', _('Enabled'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((currentUserCan('do_everything') || !userCan($row->user_id, 'do_everything')) && $row->user_id != $default_id) {\n\t\t\t\t\t$edit_status .= '<a href=\"#\" name=\"' . $type . '\" class=\"delete\">' . $__FM_CONFIG['icons']['delete'] . '</a>';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$edit_status = '<a style=\"width: 110px; margin: auto;\" class=\"account_settings\" id=\"' . $_SESSION['user']['id'] . '\" href=\"#\">' . $__FM_CONFIG['icons']['pwd_change'] . '</a>';\n\t\t\t}\n\n\t\t\t$star = (userCan($row->user_id, 'do_everything')) ? $__FM_CONFIG['icons']['star'] : null;\n\t\t\t$template_user = ($row->user_template_only == 'yes') ? $__FM_CONFIG['icons']['template_user'] : null;\n\n\t\t\t$last_login = ($row->user_last_login == 0) ? _('Never') : date(\"F d, Y \\a\\\\t H:i T\", $row->user_last_login);\n\t\t\tif ($row->user_ipaddr) {\n\t\t\t\t$user_ipaddr = $row->user_ipaddr;\n\t\t\t} else $user_ipaddr = _('None');\n\n\t\t\tif ($row->user_auth_type == 2) {\n\t\t\t\t$user_auth_type = 'LDAP';\n\t\t\t} elseif ($row->user_auth_type == 1) {\n\t\t\t\t$user_auth_type = $fm_name;\n\t\t\t} else {\n\t\t\t\t$user_auth_type = _('None');\n\t\t\t}\n\t\t\t$column = \"<td>$star $template_user</td>\n\t\t\t<td>{$row->user_login}</td>\n\t\t\t<td>$last_login</td>\n\t\t\t<td>$user_ipaddr</td>\n\t\t\t<td>$user_auth_type</td>\n\t\t\t<td>{$row->user_comment}</td>\";\n\t\t\t$name = $row->user_login;\n\t\t} elseif ($type == 'groups') {\n\t\t\t$id = $row->group_id;\n\t\t\tif (currentUserCan('do_everything') || (!groupCan($row->group_id, 'do_everything') && currentUserCan('manage_users'))) {\n\t\t\t\t$edit_status = '<a class=\"edit_form_link\" name=\"' . $type . '\" href=\"#\">' . $__FM_CONFIG['icons']['edit'] . '</a>';\n\t\t\t\t$edit_status .= '<a href=\"#\" name=\"' . $type . '\" class=\"delete\">' . $__FM_CONFIG['icons']['delete'] . '</a>';\n\t\t\t} else {\n\t\t\t\t$edit_status = $id = null;\n\t\t\t}\n\t\t\t$star = (groupCan($row->group_id, 'do_everything')) ? $__FM_CONFIG['icons']['star'] : null;\n\t\t\t\n\t\t\t$group_members_arr = $this->getGroupUsers($row->group_id, 'all');\n\t\t\tforeach ($group_members_arr as $group => $member) {\n\t\t\t\t$group_members[] = $member[0];\n\t\t\t}\n\t\t\t$group_members = join(', ', (array) $group_members);\n\t\t\t\n\t\t\t$column = \"<td>$star</td>\n\t\t\t<td>{$row->group_name}</td>\n\t\t\t<td>$group_members</td>\n\t\t\t<td>\" . nl2br($row->group_comment) . \"</td>\";\n\t\t\t$name = $row->group_name;\n\t\t} elseif ($type == 'keys') {\n\t\t\t$edit_status = $id = $user_column = null;\n\t\t\t$can_manage_users = currentUserCan('manage_users');\n\t\t\tif ($can_manage_users || $row->user_id == $_SESSION['user']['id']) {\n\t\t\t\t$id = $row->key_id;\n\t\t\t\t$edit_status .= '<a class=\"status_form_link\" href=\"#\" rel=\"';\n\t\t\t\t$edit_status .= ($row->key_status == 'active') ? 'disabled' : 'active';\n\t\t\t\t$edit_status .= '\">';\n\t\t\t\t$edit_status .= ($row->key_status == 'active') ? $__FM_CONFIG['icons']['disable'] : $__FM_CONFIG['icons']['enable'];\n\t\t\t\t$edit_status .= '</a>';\n\t\t\t\t$edit_status .= '<a href=\"#\" name=\"' . $type . '\" class=\"delete\">' . $__FM_CONFIG['icons']['delete'] . '</a>';\n\t\t\t}\n\n\t\t\tif ($can_manage_users) {\n\t\t\t\t$user_column = sprintf('<td>%s</td>', getNameFromID($row->user_id, 'fm_users', 'user_', 'user_id', 'user_login'));\n\t\t\t}\n\n\t\t\t$column = \"<td></td>\n\t\t\t<td>{$row->key_token}</td>\n\t\t\t$user_column\";\n\t\t\t$name = $row->key_token;\n\t\t}\n\t\t\n\t\techo <<<HTML\n\t\t<tr id=\"$id\" name=\"$name\"$disabled_class>\n\t\t\t$column\n\t\t\t<td id=\"row_actions\">$edit_status</td>\n\t\t</tr>\n\nHTML;\n\t}\n\n\t/**\n\t * Displays the form to add new user\n\t *\n\t * @since 1.0\n\t * @package facileManager\n\t */\n\tfunction printUsersForm($data = '', $action = 'add', $form_bits = array(), $type = 'users', $button_text = 'Save', $button_id = 'submit', $action_page = 'admin-users.php', $print_form_head = true, $display_type = 'popup') {\n\t\tglobal $__FM_CONFIG, $fm_name, $fm_login;\n\n\t\t$user_id = $group_id = 0;\n\t\t$user_login = $user_password = $cpassword = $user_comment = null;\n\t\t$ucaction = ucfirst($action);\n\t\t$disabled = (isset($_GET['id']) && $_SESSION['user']['id'] == $_GET['id']) ? 'disabled' : null;\n\t\t$button_disabled = null;\n\t\t$user_email = $user_default_module = null;\n\t\t$hidden = $user_perm_form = $return_form_rows = null;\n\t\t$user_force_pwd_change = $user_template_only = null;\n\t\t$group_name = $group_comment = $user_group = null;\n\t\t\n\t\t$default_id = getDefaultAdminID();\n\t\t\n\t\tif (!empty($_POST) && !array_key_exists('is_ajax', $_POST)) {\n\t\t\tif (is_array($_POST))\n\t\t\t\textract($_POST);\n\t\t} elseif (@is_object($data[0])) {\n\t\t\textract(get_object_vars($data[0]));\n\t\t\t$user_password = null;\n\t\t}\n\t\tif ($action == 'add') {\n\t\t\t$popup_title = $type == 'users' ? __('Add User') : __('Add Group');\n\t\t} else {\n\t\t\t$popup_title = $type == 'users' ? __('Edit User') : __('Edit Group');\n\t\t}\n\t\t$popup_header = buildPopup('header', $popup_title);\n\t\t\n\t\t$hidden = '<input type=\"hidden\" name=\"type\" value=\"' . $type . '\" />';\n\t\t\n\t\tif (in_array('user_login', $form_bits)) {\n\t\t\t/** Get field length */\n\t\t\t$field_length = getColumnLength('fm_users', 'user_login');\n\t\t\t\n\t\t\t$username_form = ($action == 'add' || array_search('user_login', $form_bits) == 'editable') ? '<input name=\"user_login\" id=\"user_login\" type=\"text\" value=\"' . $user_login . '\" size=\"40\" maxlength=\"' . $field_length . '\" />' : '<span id=\"form_username\">' . $user_login . '</span>';\n\t\t\t$hidden .= '<input type=\"hidden\" name=\"user_id\" value=\"' . $user_id . '\" />';\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_login\">' . _('User Login') . '</label></th>\n\t\t\t\t\t<td width=\"67%\">' . $username_form . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\tif (in_array('user_comment', $form_bits)) {\n\t\t\t/** Get field length */\n\t\t\t$field_length = getColumnLength('fm_users', 'user_comment');\n\t\t\t\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_comment\">' . _('User Comment') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"user_comment\" id=\"user_comment\" type=\"text\" value=\"' . $user_comment . '\" size=\"32\" maxlength=\"' . $field_length . '\" ' . $disabled . ' /></td>\n\t\t\t\t</tr>';\n\t\t}\n\t\tif (in_array('user_email', $form_bits)) {\n\t\t\t/** Get field length */\n\t\t\t$field_length = getColumnLength('fm_users', 'user_login');\n\t\t\t\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_email\">' . _('User Email') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"user_email\" id=\"user_email\" type=\"email\" value=\"' . $user_email . '\" size=\"32\" maxlength=\"' . $field_length . '\" ' . $disabled . ' /></td>\n\t\t\t\t</tr>';\n\t\t}\n\n\t\tif (in_array('user_auth_method', $form_bits) && getOption('auth_method')) {\n\t\t\tif (!isset($user_auth_type)) {\n\t\t\t\t$user_auth_type = 1;\n\t\t\t}\n\t\t\t\n\t\t\t$auth_method_types = $__FM_CONFIG['options']['auth_method'];\n\t\t\tif (array_shift($auth_method_types) && count($auth_method_types) > 1) {\n\t\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_email\">' . _('Authentication Method') . '</label></th>\n\t\t\t\t\t<td width=\"67%\">' . buildSelect('user_auth_type', 'user_auth_type', $auth_method_types, $user_auth_type) . '</td>\n\t\t\t\t</tr>';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((in_array('user_password', $form_bits) || array_key_exists('user_password', $form_bits)) || ($user_id == $_SESSION['user']['id'] && $user_auth_type != 2)) {\n\t\t\tif ($action == 'add') $button_disabled = 'disabled';\n\t\t\t$strength = $GLOBALS['PWD_STRENGTH'];\n\t\t\tif (array_key_exists('user_password', $form_bits)) $strength = $form_bits['user_password'];\n\t\t\t$return_form_rows .= '<tr class=\"user_password\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"user_password\">' . _('User Password') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"user_password\" id=\"user_password\" type=\"password\" value=\"\" size=\"40\" onkeyup=\"javascript:checkPasswd(\\'user_password\\', \\'' . $button_id . '\\', \\'' . $strength . '\\');\" /></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr class=\"user_password\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"cpassword\">' . _('Confirm Password') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"cpassword\" id=\"cpassword\" type=\"password\" value=\"\" size=\"40\" onkeyup=\"javascript:checkPasswd(\\'cpassword\\', \\'' . $button_id . '\\', \\'' . $strength . '\\');\" /></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr class=\"user_password\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Password Validity') . '</th>\n\t\t\t\t\t<td width=\"67%\"><div id=\"passwd_check\">' . _('No Password') . '</div></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr class=\"pwdhint user_password\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Hint') . '</th>\n\t\t\t\t\t<td width=\"67%\">' . $__FM_CONFIG['password_hint'][$strength][1] . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('user_groups', $form_bits) && $user_id != $default_id) {\n\t\t\t$user_group_options = buildSelect('user_group', 'user_group', $this->getGroups(), $user_group);\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Associated Group') . '</th>\n\t\t\t\t\t<td width=\"67%\">' . $user_group_options . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('user_module', $form_bits)) {\n\t\t\t$active_modules = ($user_id == $_SESSION['user']['id']) ? getActiveModules(true) : getActiveModules();\n\t\t\t$user_module_options = buildSelect('user_default_module', 'user_default_module', $active_modules, $user_default_module);\n\t\t\tunset($active_modules);\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Default Module') . '</th>\n\t\t\t\t\t<td width=\"67%\">' . $user_module_options . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('user_options', $form_bits) && $user_id != $default_id) {\n\t\t\t$force_pwd_check = ($user_force_pwd_change == 'yes') ? 'checked disabled' : null;\n\t\t\t$user_template_only_check = ($user_template_only == 'yes') ? 'checked' : null;\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Options') . '</th>\n\t\t\t\t\t<td width=\"67%\">\n\t\t\t\t\t\t<input name=\"user_force_pwd_change\" id=\"user_force_pwd_change\" value=\"yes\" type=\"checkbox\" ' . $force_pwd_check . '/><label for=\"user_force_pwd_change\">' . _('Force Password Change at Next Login') . '</label><br />\n\t\t\t\t\t\t<input name=\"user_template_only\" id=\"user_template_only\" value=\"yes\" type=\"checkbox\" ' . $user_template_only_check . '/><label for=\"user_template_only\">' . _('Template User') . '</label>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('user_token', $form_bits) && getOption('api_token_support') && $user_id == $_SESSION['user']['id']) {\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"></th>\n\t\t\t\t\t<td width=\"67%\">\n\t\t\t\t\t\t<span><a href=\"admin-users.php?type=keys\">' . __('Configure API Keys') . ' &raquo;</a></span>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('group_name', $form_bits)) {\n\t\t\t/** Get field length */\n\t\t\t$field_length = getColumnLength('fm_groups', 'group_name');\n\t\t\t\n\t\t\t$hidden .= '<input type=\"hidden\" name=\"group_id\" value=\"' . $group_id . '\" />';\n\t\t\t$hidden .= $action != 'add' ? '<input type=\"hidden\" name=\"group_name\" value=\"' . $group_name . '\" />' : null;\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"group_name\">' . _('Group Name') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"group_name\" id=\"group_name\" type=\"text\" value=\"' . $group_name . '\" size=\"32\" maxlength=\"' . $field_length . '\" ' . $disabled . ' /></td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('comment', $form_bits)) {\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\"><label for=\"group_comment\">' . _('Comment') . '</label></th>\n\t\t\t\t\t<td width=\"67%\"><textarea id=\"group_comment\" name=\"group_comment\" rows=\"4\" cols=\"30\">' . $group_comment . '</textarea></td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('group_users', $form_bits)) {\n\t\t\t$group_users = buildSelect('group_users', 'group_users', $this->getGroupUsers(), $this->getGroupUsers($group_id), 5, null, true, null, 'wide_select', _('Select one or more users'));\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Associated Users') . '</th>\n\t\t\t\t\t<td width=\"67%\">' . $group_users . '</td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tif (in_array('verbose', $form_bits)) {\n\t\t\t$hidden .= '<input type=\"hidden\" name=\"verbose\" value=\"0\" />' . \"\\n\";\n\t\t\t$return_form_rows .= '<tr>\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">' . _('Options') . '</th>\n\t\t\t\t\t<td width=\"67%\"><input name=\"verbose\" id=\"verbose\" type=\"checkbox\" value=\"1\" checked /><label for=\"verbose\">' . _('Verbose Output') . '</label></td>\n\t\t\t\t</tr>';\n\t\t}\n\t\t\n\t\tdo if (in_array('user_perms', $form_bits)) {\n\t\t\t/** Cannot edit perms if a member of a group or super-admin if logged in user is not a super-admin */\n\t\t\tif ($user_id == $default_id || (userCan($user_id, 'do_everything') && !currentUserCan('do_everything'))) break;\n\t\t\t\n\t\t\tif ($type == 'users') {\n\t\t\t\t$id = $user_id;\n\t\t\t\t$perm_function = 'userCan';\n\t\t\t} else {\n\t\t\t\t$id = $group_id;\n\t\t\t\t$perm_function = 'groupCan';\n\t\t\t}\n\t\t\t\n\t\t\t$user_is_super_admin = $perm_function($id, 'do_everything');\n\t\t\t\n\t\t\t$fm_perm_boxes = $perm_boxes = null;\n\t\t\t$i = 1;\n\t\t\t$fm_user_caps = getAvailableUserCapabilities();\n\t\t\tforeach ($fm_user_caps[$fm_name] as $key => $title) {\n\t\t\t\tif ($key == 'do_everything') {\n\t\t\t\t\tif (!currentUserCan('do_everything')) continue;\n\t\t\t\t\t$title = \"<b>$title</b>\";\n\t\t\t\t}\n\t\t\t\tif ($key != 'do_everything' && $user_is_super_admin) {\n\t\t\t\t\t$checked = null;\n\t\t\t\t} else {\n\t\t\t\t\t$checked = ($perm_function($id, $key)) ? 'checked' : null;\n\t\t\t\t}\n\t\t\t\t$fm_perm_boxes .= ' <input name=\"user_caps[' . $fm_name . '][' . $key . ']\" id=\"fm_perm_' . $key . '\" type=\"checkbox\" value=\"1\" ' . $checked . '/> <label for=\"fm_perm_' . $key . '\">' . $title . '</label>' . \"\\n\";\n\t\t\t\t/** Display checkboxes three per row */\n\t\t\t\tif ($i == 3) {\n\t\t\t\t\t$fm_perm_boxes .= \"<br />\\n\";\n\t\t\t\t\t$i = 0;\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\tif (!empty($fm_perm_boxes)) {\n\t\t\t\t$perm_boxes .= <<<PERM\n\t\t\t\t<tr id=\"userperms\" class=\"user_permissions\">\n\t\t\t\t\t<th width=\"33%\" scope=\"row\">$fm_name</th>\n\t\t\t\t\t<td width=\"67%\">\n\t\t\t\t\t\t<input type=\"hidden\" name=\"process_user_caps\" value=\"1\" />\n\t\t\t\t\t\t$fm_perm_boxes\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\nPERM;\n\t\t\t}\n\t\t\t\n\t\t\t/** Process module permissions */\n\t\t\t$active_modules = getActiveModules();\n\t\t\tforeach ($active_modules as $module_name) {\n\t\t\t\t$module_perm_boxes = null;\n\t\t\t\t$i = 1;\n\t\t\t\tif (array_key_exists($module_name, $fm_user_caps)) {\n\t\t\t\t\tforeach ($fm_user_caps[$module_name] as $key => $title) {\n\t\t\t\t\t\t$checked = ($perm_function($id, $key, $module_name) && !$user_is_super_admin) ? 'checked' : null;\n\t\t\t\t\t\t$module_perm_boxes .= ' <input name=\"user_caps[' . $module_name . '][' . $key . ']\" id=\"fm_perm_' . $module_name . '_' . $key . '\" type=\"checkbox\" value=\"1\" ' . $checked . '/> <label for=\"fm_perm_' . $module_name . '_' . $key . '\">' . $title . '</label>' . \"\\n\";\n\t\t\t\t\t\t/** Display checkboxes three per row */\n\t\t\t\t\t\tif ($i == 3) {\n\t\t\t\t\t\t\t$module_perm_boxes .= \"<br />\\n\";\n\t\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\t\t\t\t\t$module_extra_functions = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module_name . DIRECTORY_SEPARATOR . 'functions.extra.php';\n\t\t\t\t\tif (file_exists($module_extra_functions)) {\n\t\t\t\t\t\tinclude($module_extra_functions);\n\n\t\t\t\t\t\t$function = 'print' . $module_name . 'UsersForm';\n\t\t\t\t\t\tif (function_exists($function)) {\n\t\t\t\t\t\t\t$module_perm_boxes .= $function(getUserCapabilities($id, substr($type, 0, -1)), $module_name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (!empty($module_perm_boxes)) {\n\t\t\t\t\t$perm_boxes .= <<<PERM\n\t\t\t\t\t<tr id=\"userperms\" class=\"user_permissions\">\n\t\t\t\t\t\t<th width=\"33%\" scope=\"row\">$module_name</th>\n\t\t\t\t\t\t<td width=\"67%\">\n\t\t\t\t\t\t$module_perm_boxes\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\nPERM;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!empty($perm_boxes)) {\n\t\t\t\t$user_perm_form = sprintf('<tr class=\"user_permissions\"><td colspan=\"2\" class=\"form-break\"><i>%s</i></td></tr>', _('Permissions')) . $perm_boxes;\n\t\t\t}\n\t\t} while (false);\n\t\t\n\t\t$return_form = ($print_form_head) ? '<form name=\"manage\" id=\"manage\" method=\"post\" action=\"' . $action_page . '\">' . \"\\n\" : null;\n\t\tif ($display_type == 'popup') $return_form .= $popup_header;\n\t\t$return_form .= '\n\t\t\t<div>\n\t\t\t<form id=\"fm_user_profile\">\n\t\t\t<input type=\"hidden\" name=\"action\" value=\"' . $action . '\" />' . $hidden . '\n\t\t\t<table class=\"form-table\" width=\"495px\">\n\t\t\t\t<tr><td colspan=\"2\"><i>' . _('Details') . '</i></td></tr>' . $return_form_rows . $user_perm_form;\n\t\t\n\t\t$return_form .= '</table></div>';\n\n\t\tif ($display_type == 'popup') $return_form .= '\n\t\t</div>\n\t\t<div class=\"popup-footer\">\n\t\t\t<input type=\"submit\" id=\"' . $button_id . '\" name=\"submit\" value=\"' . $button_text . '\" class=\"button primary ' . $button_disabled . '\" ' . $button_disabled . '/>\n\t\t\t<input type=\"button\" value=\"' . _('Cancel') . '\" class=\"button left\" id=\"cancel_button\" />\n\t\t</div>\n\t\t</form>\n\t\t<script>\n\t\t\t$(document).ready(function() {\n\t\t\t\t$(\".form-table select\").select2({\n\t\t\t\t\tcontainerCss: { \"min-width\": \"165px\" },\n\t\t\t\t\tminimumResultsForSearch: -1\n\t\t\t\t});\n\t\t\t\t$(\"select.wide_select\").select2({\n\t\t\t\t\twidth: \"300px\",\n\t\t\t\t\tminimumResultsForSearch: -1\n\t\t\t\t});\n\t\t\t\t$(\"#user_group\").trigger(\"change\");\n\t\t\t});\n\t\t</script>';\n\n\t\treturn $return_form;\n\t}\n\n\t\n\t/**\n\t * Gets all associated users for the group\n\t *\n\t * @since 2.1\n\t * @package facileManager\n\t *\n\t * @param integer $group_id Group ID to return user list from\n\t * @return array\n\t */\n\tfunction getGroupUsers($group_id = null, $include = 'id-only') {\n\t\tglobal $fmdb, $__FM_CONFIG;\n\t\t\n\t\t$user_list = null;\n\t\t\n\t\tif ($group_id == null) {\n\t\t\tbasicGetList('fm_users', 'user_login', 'user_', \"AND user_template_only='no' AND user_id!={$_SESSION['user']['id']} AND (user_caps IS NULL OR user_caps NOT LIKE '%do_everything%')\");\n\t\t} else {\n\t\t\t$query = \"SELECT user_id, user_login FROM fm_users WHERE account_id={$_SESSION['user']['account_id']} AND user_status!='deleted' AND user_template_only='no' AND user_group=\" . sanitize($group_id);\n\t\t\t$fmdb->get_results($query);\n\t\t}\n\t\t\n\t\tfor ($i=0; $i<$fmdb->num_rows; $i++) {\n\t\t\tif ($include == 'all' || ($include == 'id-only' && $group_id == null)) {\n\t\t\t\t$user_list[$i][] = $fmdb->last_result[$i]->user_login;\n\t\t\t\t$user_list[$i][] = $fmdb->last_result[$i]->user_id;\n\t\t\t} else {\n\t\t\t\t$user_list[] = $fmdb->last_result[$i]->user_id;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $user_list;\n\t}\n\n\t\n\t/**\n\t * Gets all available user groups\n\t *\n\t * @since 2.1\n\t * @package facileManager\n\t *\n\t * @return array\n\t */\n\tfunction getGroups() {\n\t\tglobal $fmdb;\n\t\t\n\t\t$group_list[0][] = null;\n\t\t$group_list[0][] = 0;\n\t\t\n\t\tbasicGetList('fm_groups', 'group_name', 'group_');\n\t\t\n\t\tfor ($i=0; $i<$fmdb->num_rows; $i++) {\n\t\t\t$group_list[$i+1][] = $fmdb->last_result[$i]->group_name;\n\t\t\t$group_list[$i+1][] = $fmdb->last_result[$i]->group_id;\n\t\t}\n\t\t\n\t\treturn (array) $group_list;\n\t}\n\n\t\n\t/**\n\t * Generates unique API keypair for the user\n\t *\n\t * @since 4.0\n\t * @package facileManager\n\t *\n\t * @return string\n\t */\n\tfunction generateAPIKey() {\n\t\tglobal $fmdb, $__FM_CONFIG, $fm_name;\n\t\t\n\t\t$unique_key = false;\n\n\t\t$popup_header = buildPopup('header', _('API Key Creation'));\n\t\t$popup_footer = buildPopup('footer', _('OK'), array('cancel_button' => 'cancel'));\n\t\t\n\t\t/** Ensure the key is unique */\n\t\twhile ($unique_key == false) {\n\t\t\t$key_token = strtoupper(genRandomString(mt_rand(20, 30)));\n\t\t\t$key_secret = genRandomString(mt_rand(30, 50));\n\n\t\t\t$query = \"SELECT * FROM `fm_keys` WHERE `key_status`!='deleted' AND `key_token`='$key_token'\";\n\t\t\t$fmdb->get_results($query);\n\t\t\tif (!$fmdb->num_rows) $unique_key = true;\n\t\t}\n\n\t\t$query = sprintf(\"INSERT INTO fm_keys (`account_id`, `user_id`, `key_token`, `key_secret`) VALUES (%d, %d, '%s', '%s')\",\n\t\t\t$_SESSION['user']['account_id'], $_SESSION['user']['id'], $key_token, password_hash($key_secret, PASSWORD_DEFAULT));\n\t\t$result = $fmdb->query($query);\n\t\t\n\t\tif ($fmdb->sql_errors) {\n\t\t\treturn $popup_header . formatError(_('Could not create the keypair because a database error occurred.'), 'sql') . $popup_footer;\n\t\t}\n\n\t\taddLogEntry(sprintf(_(\"Added API key '%s'.\"), $key_token), $fm_name);\n\n\t\t/** Give user ability to copy keypair */\n\t\t$message = sprintf('<p>%s %s</p>\n\t\t<p>%s <u>%s</u></p>\n\t\t<p><b>%s :</b> %s<br />\n\t\t<b>%s :</b> %s</p>',\n\t\t\t$__FM_CONFIG['icons']['ok'],\n\t\t\t_('Your API keypair has been successfully created.'),\n\t\t\t_('Please copy the keypair and store in safe place.'),\n\t\t\t_('This your only opportunity of retrieving the secret key.'),\n\t\t\t_('Key'), $key_token,\n\t\t\t_('Secret'), $key_secret\n\t\t);\n\t\t\n\t\t$popup_footer = buildPopup('footer', _('OK'), array('cancel_button' => 'cancel'), 'admin-users.php?type=keys');\n\n\t\treturn $popup_header . $message . $popup_footer;\n\t}\n}\n\nif (!isset($fm_users))\n\t$fm_users = new fm_users();\n\n?>\n", "<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n*/\n\n/**\n * Dummy function in case gettext is not installed\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $text Text to translate\n * @return string $text\n */\nif (!function_exists('_')) {\n\tfunction _($text) {\n\t\treturn $text;\n\t}\n}\n\n/**\n * Dummy function in case gettext is not installed\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $single_text Singular text to translate\n * @param string $plural_text Plural text to translate\n * @param integer $number Number to determine if its singular or plural\n * @return string $text\n */\nif (!function_exists('ngettext')) {\n\tfunction ngettext($single_text, $plural_text, $number) {\n\t\treturn $number == 1 ? $single_text : $plural_text;\n\t}\n}\n\n/**\n * Dummy function in case gettext is not installed\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $single_text Singular text to translate\n * @param string $plural_text Plural text to translate\n * @param integer $number Number to determine if its singular or plural\n * @return string $text\n */\nif (!function_exists('dngettext')) {\n\tfunction dngettext($module, $single_text, $plural_text, $number) {\n\t\treturn ngettext($single_text, $plural_text, $number);\n\t}\n}\n\ninclude(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . 'facileManager' . DIRECTORY_SEPARATOR . 'variables.inc.php');\n\n/** Include shared classes */\n$shared_classes_dir = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . 'shared' . DIRECTORY_SEPARATOR . 'classes';\nforeach (scandir($shared_classes_dir) as $file) {\n\tif (is_file($shared_classes_dir . DIRECTORY_SEPARATOR . $file) && $file[0] != '.') {\n\t\tinclude_once($shared_classes_dir . DIRECTORY_SEPARATOR . $file);\n\t}\n}\n\n/**\n * Includes the template file\n *\n * @since 1.0\n * @package facileManager\n */\nfunction includeModuleFile($module = null, $file = '') {\n\tglobal $fm_name;\n\tif (!$module) $module = $fm_name;\n\t\n\tif (!file_exists(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'pages' . DIRECTORY_SEPARATOR . $file)) {\n\t\t$module = (file_exists(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . 'shared' . DIRECTORY_SEPARATOR . 'pages' . DIRECTORY_SEPARATOR . $file)) ? 'shared' : $fm_name;\n\t}\n\n\treturn ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'pages' . DIRECTORY_SEPARATOR . $file;\n}\n\n/**\n * Throws HTTP Error\n *\n * @since 1.0\n * @package facileManager\n */\nfunction throwHTTPError($code = '404') {\n\t$status_codes = array('404' => 'Not Found');\n\t\n\theader( \"HTTP/1.0 $code \" . $status_codes[$code] );\n\tinclude(includeModuleFile(null, $code . '.php'));\n}\n\n/**\n * Checks if there's a database upgrade\n *\n * @since 1.0\n * @package facileManager\n */\nfunction isUpgradeAvailable() {\n\tglobal $fmdb;\n\t\n\t/** fM Core */\n\tinclude(ABSPATH . 'fm-includes/version.php');\n\t\n\t$running_db_version = getOption('fm_db_version');\n\t\n\t/** If the record does not exist then run the installer */\n\tif (!$running_db_version) {\n\t\theader('Location: ' . $GLOBALS['RELPATH'] . 'fm-install.php');\n\t\texit;\n\t}\n\t\n\tif ($running_db_version < $fm_db_version) return true;\n\t\n\t/** Module upgrades */\n\t$fmdb->get_results(\"SELECT module_name,option_value FROM fm_options WHERE option_name='version'\");\n\tfor ($x=0; $x<$fmdb->num_rows; $x++) {\n\t\t$module_name = $fmdb->last_result[$x]->module_name;\n\t\tinclude(ABSPATH . 'fm-modules/' . $module_name . '/variables.inc.php');\n\t\tif (version_compare($fmdb->last_result[$x]->option_value, $__FM_CONFIG[$module_name]['version'], '<')) return true;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Checks if there's a new version of facileManager available\n *\n * @since 1.0\n * @package facileManager\n */\nfunction isNewVersionAvailable($package, $version, $interval = 'schedule') {\n\t$fm_site_url = 'http://www.facilemanager.com/check/';\n\t\n\t$data['package'] = $package;\n\t$data['version'] = $version;\n\t$data['format']  = 'array';\n\t\n\t$method = 'update';\n\t\n\t/** Are software updates enabled? */\n\tif (!getOption('software_update')) return false;\n\t\n\t/** Disable check until user has upgraded database to 1.2 */\n\tif (getOption('fm_db_version') < 32) return false;\n\t\n\t/** Should we be running this check now? */\n\t$last_version_check = getOption('version_check', 0, $package);\n\tif (!$software_update_interval = getOption('software_update_interval')) $software_update_interval = 'week';\n\tif (!$last_version_check) {\n\t\tunset($last_version_check);\n\t\t$last_version_check['timestamp'] = 0;\n\t\t$last_version_check['data'] = null;\n\t\t$method = 'insert';\n\t} elseif (isset($last_version_check['data']['version']) && $last_version_check['data']['version'] == $version) {\n\t\t$last_version_check['timestamp'] = 0;\n\t}\n\tif ($interval == 'force') {\n\t\t$last_version_check['timestamp'] = 0;\n\t\t$last_version_check['data'] = null;\n\t}\n\tif ($last_version_check['timestamp'] < strtotime(\"1 $software_update_interval ago\")) {\n\t\t$data['software_update_tree'] = getOption('software_update_tree');\n\t\t\n\t\t/** Use file_get_contents if allowed else use POST */\n\t\tif (ini_get('allow_url_fopen')) {\n\t\t\t$result = file_get_contents($fm_site_url . '?' . http_build_query($data));\n\t\t} else {\n\t\t\t$result = getPostData($fm_site_url . '?' . http_build_query($data), $data, 'get', array(CURLOPT_CONNECTTIMEOUT => 1));\n\t\t}\n\t\t\n\t\tif (isSerialized($result)) {\n\t\t\t$result = unserialize($result);\n\t\t}\n\t\t\n\t\tsetOption('version_check', array('timestamp' => time(), 'data' => $result), $method, true, 0, $package);\n\t\t\n\t\treturn $result;\n\t}\n\t\n\treturn $last_version_check['data'];\n}\n\n\n/**\n * Sanitizes the post\n *\n * @since 1.0\n * @package facileManager\n */\nfunction sanitize($data, $replace = null) {\n\tglobal $fmdb;\n\t\n\tif ($replace) {\n\t\t$strip_chars = array(\"'\", \"\\\"\", \"`\", \"$\", \"?\", \"*\", \"&\", \"^\", \"!\", \"#\");\n\t\t$replace_chars = array(\" \", \"\\\\\", \"_\", \"(\", \")\", \",\", \".\", \"-\");\n\n\t\t$data = str_replace($strip_chars, '', $data);\n\t\t$data = str_replace($replace_chars, $replace, $data);\n\t\t$data = str_replace($replace . $replace, $replace, $data);\n\t\t\n\t\treturn $data;\n\t} else {\n\t\tif (is_string($data)) {\n\t\t\t$data = htmlspecialchars(strip_tags($data), ENT_NOQUOTES);\n\t\t\tif ($fmdb->use_mysqli) {\n\t\t\t\treturn @mysqli_real_escape_string($fmdb->dbh, $data);\n\t\t\t} else {\n\t\t\t\treturn @mysql_real_escape_string($data);\n\t\t\t}\n\t\t}\n\t\treturn $data;\n\t}\n}\n\n\n/**\n * Prints the header\n *\n * @since 1.0\n * @package facileManager\n */\nfunction printHeader($subtitle = 'auto', $css = 'facileManager', $help = 'no-help', $menu = 'menu') {\n\tglobal $fm_name, $__FM_CONFIG;\n\t\n\tinclude(ABSPATH . 'fm-includes/version.php');\n\t\n\t$title = $fm_name;\n\t\n\tif (!empty($subtitle)) {\n\t\tif ($subtitle == 'auto') $subtitle = getPageTitle();\n\t\t$title = \"$subtitle &lsaquo; $title\";\n\t}\n\t\n\t$head = $logo = null;\n\t\n\tif ($css == 'facileManager') {\n\t\t$head = ($menu == 'menu') ? getTopHeader($help) : null;\n\t} else {\n\t\t$logo = '<h1 class=\"center\"><img alt=\"' . $fm_name . '\" src=\"' . $GLOBALS['RELPATH'] . 'fm-includes/images/logo.png\" /></h1>' . \"\\n\";\n\t}\n\t\n\t/** Module css and js includes */\n\tif (isset($_SESSION['module']) && isset($__FM_CONFIG['module']['path'])) {\n\t\t$module_css_file = $__FM_CONFIG['module']['path']['css'] . DIRECTORY_SEPARATOR . 'module.css';\n\t\t$module_css = (file_exists(ABSPATH . $module_css_file) && array_key_exists($_SESSION['module'], $__FM_CONFIG)) ? '<link rel=\"stylesheet\" href=\"' . $GLOBALS['RELPATH'] . $module_css_file . '?ver=' . $__FM_CONFIG[$_SESSION['module']]['version'] . '\" type=\"text/css\" />' : null;\n\t\t$module_js_dir = $__FM_CONFIG['module']['path']['js'] . DIRECTORY_SEPARATOR;\n\t\t$module_js_file = $module_js_dir . 'module.php';\n\t\t$module_js = (file_exists(ABSPATH . $module_js_file) && array_key_exists($_SESSION['module'], $__FM_CONFIG)) ? '<script src=\"' . $GLOBALS['RELPATH'] . $module_js_file . '?ver=' . $__FM_CONFIG[$_SESSION['module']]['version'] . '\" type=\"text/javascript\" charset=\"utf-8\"></script>' : null;\n\t\t\n\t\t/** Include any .js files */\n\t\tforeach (scandir($module_js_dir) as $module_js_file) {\n\t\t\tif (in_array($module_js_file, array('.', '..', 'module.php'))) continue;\n\t\t\t$module_js_file = $module_js_dir . $module_js_file;\n\t\t\t$module_js .= (file_exists(ABSPATH . $module_js_file) && array_key_exists($_SESSION['module'], $__FM_CONFIG)) ? \"\\n\\t\\t\" . '<script src=\"' . $GLOBALS['RELPATH'] . $module_js_file . '\" type=\"text/javascript\" charset=\"utf-8\"></script>' : null;\n\t\t}\n\t} else {\n\t\t$module_css = $module_js = null;\n\t}\n\t\n\techo <<<HTML\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t\t<title>$title</title>\n\t\t<link rel=\"shortcut icon\" href=\"{$GLOBALS['RELPATH']}fm-modules/$fm_name/images/favicon.png\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-modules/$fm_name/css/$css.css?ver=$fm_version\" type=\"text/css\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/jquery-ui.min.css\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/font-awesome/css/font-awesome.min.css\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/open-sans.css\" type=\"text/css\" />\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/tooltip.css\" type=\"text/css\" />\n\t\t<script src=\"{$GLOBALS['RELPATH']}fm-includes/js/jquery-3.6.0.min.js\"></script>\n\t\t<script src=\"{$GLOBALS['RELPATH']}fm-includes/js/jquery-ui.min.js\"></script>\n\t\t<script src=\"{$GLOBALS['RELPATH']}fm-includes/extra/select2/select2.min.js\" type=\"text/javascript\"></script>\n\t\t<link rel=\"stylesheet\" href=\"{$GLOBALS['RELPATH']}fm-includes/extra/select2/select2.css?ver=$fm_version\" type=\"text/css\" />\n\t\t$module_css\n\t\t<script src=\"{$GLOBALS['RELPATH']}fm-modules/$fm_name/js/$fm_name.php?ver=$fm_version\" type=\"text/javascript\" charset=\"utf-8\"></script>\n\t\t$module_js\n\t</head>\n<body>\n$head\n<a href=\"#\" id=\"scroll-to-top\" class=\"\"></a>\nHTML;\n}\n\n/**\n * Prints the footer\n *\n * @since 1.0\n * @package facileManager\n */\nfunction printFooter($classes = null, $text = null, $block_style = null) {\n\techo <<<FOOT\n\t</div>\n<div class=\"manage_form_container\" id=\"manage_item\" $block_style></div>\n<div class=\"manage_form_contents $classes\" id=\"manage_item_contents\" $block_style>\n$text\n</div>\n</body></html>\nFOOT;\n}\n\n/**\n * Prints the top header\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getTopHeader($help) {\n\tglobal $fm_login, $__FM_CONFIG;\n\tinclude(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . 'facileManager' . DIRECTORY_SEPARATOR . 'variables.inc.php');\n\tinclude(ABSPATH . 'fm-includes' . DIRECTORY_SEPARATOR . 'version.php');\n\t\n\t$module_toolbar = $fm_new_version_available = $account_menu = $user_account_menu = $module_menu = $module_version_info = null;\n\t\n\tif ($help != 'help-file') {\n\t\t$auth_method = getOption('auth_method');\n\t\tif ($auth_method) {\n\t\t\tif ($_SESSION['user']['account_id'] != 1) {\n\t\t\t\t$account = getNameFromID($_SESSION['user']['account_id'], 'fm_accounts', 'account_', 'account_id', 'account_name');\n\t\t\t\t$account_menu = <<<HTML\n\t\t<div id=\"topheadpart\">\n\t\t\t<span style=\"line-height: 18pt;\">Account:&nbsp;&nbsp; $account</span>\n\t\t</div>\nHTML;\n\t\t\t}\n\n\t\t\t$star = currentUserCan('do_everything') ? $__FM_CONFIG['icons']['star'] . ' ' : null;\n\t\t\t$change_pwd_link = ($auth_method) ? sprintf('<li><a class=\"account_settings\" id=\"%s\" href=\"#\"><span>%s</span></a></li>' . \"\\n\", $_SESSION['user']['id'], _('Edit Profile')) : null;\n\t\t\t$logout = _('Logout');\n\t\t\t$user_account_menu = <<<HTML\n\t\t<div id=\"topheadpartright\" style=\"padding: 0 1px 0 0;\">\n\t\t\t<div id=\"cssmenu\">\n\t\t\t<ul>\n\t\t\t\t<li class=\"has-sub has-image\"><a href=\"#\"><span>{$__FM_CONFIG['icons']['account']}</span></a>\n\t\t\t\t\t<ul class=\"sub-right\">\n\t\t\t\t\t\t<li class=\"text-only\"><span>$star{$_SESSION['user']['name']}</span></li>\n\t\t\t\t\t\t$change_pwd_link\n\t\t\t\t\t\t<li class=\"last\"><a href=\"{$GLOBALS['RELPATH']}?logout\"><span>$logout</span></a></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\nHTML;\n\t\t}\n\t\t\n\t\t/** Build app dropdown menu */\n\t\t$modules = getAvailableModules();\n\t\t$avail_modules = null;\n\t\t\n\t\tif (count($modules)) {\n\t\t\tforeach ($modules as $module_name) {\n\t\t\t\tif ($module_name == $_SESSION['module']) continue;\n\t\t\t\tif (in_array($module_name, getActiveModules(true))) {\n\t\t\t\t\t$avail_modules .= \"<li class='last'><a href='{$GLOBALS['RELPATH']}?module=$module_name'><span>$module_name</span></a></li>\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ($avail_modules) {\n\t\t\t\t$module_menu = <<<HTML\n\t\t<div id=\"topheadpartright\" style=\"padding: 0;\">\n\t\t\t<div id=\"cssmenu\">\n\t\t\t<ul>\n\t\t\t\t<li class=\"has-sub last\"><a href=\"#\"><span>{$_SESSION['module']}</span></a>\n\t\t\t\t\t<ul>\n\t\t\t\t\t$avail_modules\n\t\t\t\t\t</ul>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\nHTML;\n\t\t\t}\n\t\t\t\n\t\t\t/** Include module toolbar items */\n\t\t\tif (function_exists('buildModuleToolbar')) {\n\t\t\t\tlist($module_toolbar_left, $module_toolbar_right) = @buildModuleToolbar();\n\t\t\t}\n\t\t} else {\n\t\t\t$module_menu = null;\n\t\t\t$fm_name = isset($_SESSION['module']) ? $_SESSION['module'] : $fm_name;\n\t\t}\n\t\n\t\t$help_file = buildHelpFile();\n\t\t$help_text = _('Help');\n\t\n\t\t$process_all_text = _('Process all available updates now');\n\t\t$process_all = <<<HTML\n\t\t<div id=\"topheadpartright\" style=\"display: none;\">\n\t\t\t<a class=\"single_line process_all_updates\" href=\"#\" title=\"$process_all_text\"><i class=\"fa fa-refresh fa-lg\"></i></a>\n\t\t\t<span class=\"update_count\"></span>\n\t\t</div>\nHTML;\n\t\n\t\tif (defined('FM_INCLUDE_SEARCH') && FM_INCLUDE_SEARCH === true) {\n\t\t\t$search = '<div id=\"topheadpartright\">\n\t\t\t<a class=\"single_line search\" href=\"#\" title=\"' . _('Search this page') . '\"><i class=\"fa fa-search fa-lg\"></i></a>' .\n\t\t\t\tdisplaySearchForm() . '</div>';\n\t\t} else $search = null;\n\n\t\t$branding_logo = getBrandLogo();\n\t\t\n\t\tif (isset($_SESSION['module']) && $_SESSION['module'] != $fm_name) {\n\t\t\t$module_version_info = sprintf('<br />%s v%s', $_SESSION['module'], $__FM_CONFIG[$_SESSION['module']]['version']);\n\t\t\t$fm_version_info = \"$fm_name v$fm_version\";\n\t\t} else {\n\t\t\t$fm_version_info = sprintf('<span class=\"single_line\">%s v%s</span>', $fm_name, $fm_version);\n\t\t}\n\t\t\n\t\t$return = <<<HTML\n\t<div id=\"tophead\">\n\t\t<div id=\"topheadpart\">\n\t\t\t<img src=\"$branding_logo\" alt=\"$fm_name\" title=\"$fm_name\" />\n\t\t\t$fm_version_info\n\t\t\t$module_version_info\n\t\t</div>\n$account_menu\n$module_toolbar_left\n$user_account_menu\n\t\t<div id=\"topheadpartright\">\n\t\t\t<a class=\"single_line help_link\" href=\"#\">$help_text</a>\n\t\t</div>\n$module_menu\n$module_toolbar_right\n$search\n$process_all\n\t</div>\n\t<div id=\"help\">\n\t\t<div id=\"help_topbar\">\n\t\t\t<p class=\"title\">fmHelp</p>\n\t\t\t<p id=\"help_buttons\">{$__FM_CONFIG['icons']['popout']} {$__FM_CONFIG['icons']['close']}</p>\n\t\t</div>\n\t\t<div id=\"help_file_container\">\n\t\t$help_file\n\t\t</div>\n\t</div>\n\nHTML;\n\t} else {\n\t\t$return = <<<HTML\n\t<div id=\"tophead\">\n\t\t<div id=\"topheadpart\">\n\t\t\tfmHelp<br />\n\t\t\tv$fm_version\n\t\t</div>\n\t</div>\n\nHTML;\n\t}\n\n\treturn $return;\n}\n\n/**\n * Prints the menu system\n *\n * @since 1.0\n * @package facileManager\n */\nfunction printMenu() {\n\tglobal $__FM_CONFIG, $menu, $submenu;\n\t\n\t$main_menu_html = null;\n\t\n\tlist($filtered_menu, $filtered_submenu) = getCurrentUserMenu();\n\tksort($filtered_menu);\n\tksort($filtered_submenu);\n\t\n\t$i = 1;\n\tforeach ($filtered_menu as $position => $main_menu_array) {\n\t\t$sub_menu_html = '</li>';\n\t\t$show_top_badge_count = true;\n\t\t\n\t\tlist($menu_title, $page_title, $capability, $module, $slug, $classes, $badge_count) = $main_menu_array;\n\t\tif (!is_array($classes)) {\n\t\t\t$classes = !empty($classes) ? array_fill(0, 1, $classes) : array();\n\t\t}\n\t\tif ($badge_count > 100) {\n\t\t\t$badge_count = '99+';\n\t\t}\n\t\t\n\t\t/** Check if menu item is current page */\n\t\tif ($slug == findTopLevelMenuSlug($filtered_submenu)) {\n\t\t\tarray_push($classes, 'current', 'arrow');\n\t\t\t\n\t\t\tif (array_key_exists($slug, $filtered_submenu)) {\n\t\t\t\t$show_top_badge_count = false;\n\t\t\t\t$k = 0;\n\t\t\t\tforeach ($filtered_submenu[$slug] as $submenu_array) {\n\t\t\t\t\tif (!empty($submenu_array[0])) {\n\t\t\t\t\t\t$submenu_class = ($submenu_array[4] == $GLOBALS['basename']) ? ' class=\"current\"' : null;\n\t\t\t\t\t\tif ($submenu_array[6]) {\n\t\t\t\t\t\t\tif ($submenu_array[6] > 100) {\n\t\t\t\t\t\t\t\t$submenu_array[6] = '99+';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$submenu_array[0] = sprintf($submenu_array[0] . ' <span class=\"menu_badge\"><p>%s</p></span>', $submenu_array[6]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$sub_menu_html .= sprintf('<li%s><a href=\"%s\">%s</a></li>' . \"\\n\", $submenu_class, $submenu_array[4], $submenu_array[0]);\n\t\t\t\t\t} elseif (!$k) {\n\t\t\t\t\t\t$show_top_badge_count = true;\n\t\t\t\t\t}\n\t\t\t\t\t$k++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$sub_menu_html = <<<HTML\n\t\t\t\t\t</li>\n\t\t\t\t\t<div id=\"submenu\">\n\t\t\t\t\t\t<div id=\"subitems\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t$sub_menu_html\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\nHTML;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/** Build submenus */\n\t\tif (!count($classes) && count((array) $filtered_submenu[$slug]) > 1) {\n\t\t\tarray_push($classes, 'has-sub');\n\t\t\tforeach ($filtered_submenu[$slug] as $submenu_array) {\n\t\t\t\tif (!empty($submenu_array[0])) {\n\t\t\t\t\tif ($submenu_array[6]) {\n\t\t\t\t\t\tif ($submenu_array[6] > 100) {\n\t\t\t\t\t\t\t$submenu_array[6] = '99+';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$submenu_array[0] = sprintf($submenu_array[0] . ' <span class=\"menu_badge\"><p>%s</p></span>', $submenu_array[6]);\n\t\t\t\t\t}\n\t\t\t\t\t$sub_menu_html .= sprintf('<li><a href=\"%s\">%s</a></li>' . \"\\n\", $submenu_array[4], $submenu_array[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$sub_menu_html = <<<HTML\n\t\t\t\t<div class=\"arrow\"></div>\n\t\t\t\t<ul>\n\t\t\t\t$sub_menu_html\n\t\t\t\t</ul>\n</li>\n\nHTML;\n\t\t}\n\t\t\n\t\t$arrow = (in_array('arrow', $classes)) ? '<u></u>' : null;\n\t\t\n\t\t/** Join all of the classes */\n\t\tif (count($classes)) $class = ' class=\"' . implode(' ', $classes) . '\"';\n\t\telse $class = null;\n\t\t\n\t\tif (empty($slug) && !empty($class)) {\n\t\t\t/** Ideally this should be the separator */\n\t\t\tif ($i != count($filtered_menu)) {\n\t\t\t\t$main_menu_html .= '<li' . $class . '></li>' . \"\\n\";\n\t\t\t}\n\t\t} else {\n\t\t\t/** Display the menu item if allowed */\n\t\t\tif (currentUserCan($capability, $module)) {\n\t\t\t\tif ($badge_count && $show_top_badge_count) $menu_title = sprintf($menu_title . ' <span class=\"menu_badge\"><p>%s</p></span>', $badge_count);\n\t\t\t\t$main_menu_html .= sprintf('<li%s><a href=\"%s\">%s</a>%s%s' . \"\\n\", $class, $slug, $menu_title, $arrow, $sub_menu_html);\n\t\t\t}\n\t\t}\n\t\t\n\t\t$i++;\n\t}\n\t\n\t$donate_text = _('Donate');\n\t\n\techo <<<MENU\n\t<div id=\"menuback\"></div>\n\t<div id=\"menu\">\n\t\t<div id=\"mainitems\">\n\t\t\t<ul>\n$main_menu_html\n\t\t\t</ul>\n\t\t</div>\n\t\t<div id=\"donate\" class=\"grey\">\n\t\t\t<p><a href=\"http://www.facilemanager.com/donate/\" target=\"_blank\"><i class=\"fa fa-heart\"></i> $donate_text</a></p>\n\t\t</div>\n\t</div>\n\nMENU;\n}\n\n\n/**\n * Removes non-permitted menu items\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $element Menu array to check.\n * @return bool\n */\nfunction filterMenu($element) {\n\treturn currentUserCan($element[2], $element[3]);\n}\n\n\n/**\n * Finds the top level menu for selection\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $menu_array Menu array to search.\n * @return string\n */\nfunction findTopLevelMenuSlug($menu_array) {\n\tforeach ($menu_array as $slug => $menu_items) {\n\t\tforeach ($menu_items as $element) {\n\t\t\tif (array_search($GLOBALS['basename'], $element, true)) {\n\t\t\t\treturn $slug;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn $GLOBALS['basename'];\n}\n\n\n/**\n * Gets the user menu based on capabilities\n *\n * @since 1.2\n * @package facileManager\n *\n * @return array\n */\nfunction getCurrentUserMenu() {\n\tglobal $menu, $submenu;\n\t\n\t$filtered_menus = array(null, null);\n\t\n\t/** Submenus */\n\tforeach ($submenu as $slug => $submenu_array) {\n\t\tksort($submenu_array);\n\t\t$filtered_menus[1][$slug] = array_filter($submenu_array, 'filterMenu');\n\t}\n\t\n\t/** Main menu */\n\t$temp_menu = $menu;\n\tforeach ($menu as $position => $element) {\n\t\tlist($menu_title, $page_title, $capability, $module, $slug, $class) = $element;\n\t\tif (array_key_exists($slug, $filtered_menus[1])) {\n\t\t\tif (count($filtered_menus[1][$slug]) == 1) {\n\t\t\t\t$single_element = array_values($filtered_menus[1][$slug]);\n\t\t\t\tif (!empty($single_element[0][0])) {\n\t\t\t\t\t$temp_menu[$position] = array_shift($filtered_menus[1][$slug]);\n\t\t\t\t\tif (isset($element[7]) && $element[7]) $temp_menu[$position][0] = $menu_title;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t$filtered_menus[0] = array_filter($temp_menu, 'filterMenu');\n\t\n\tunset($temp_menu, $element, $submenu_array, $slug, $position, $single_element);\n\n\treturn $filtered_menus;\n}\n\n\n/**\n * Gets the selected object\n *\n * @since 1.0\n * @package facileManager\n */\nfunction basicGet($table, $id, $prefix = '', $field = 'id', $sql = '', $account_id = null) {\n\tglobal $fmdb;\n\t$id = sanitize($id);\n\t\n\tif (!$account_id) {\n\t\t$account_id = $_SESSION['user']['account_id'];\n\t}\n\t\n\tswitch($sql) {\n\t\tcase 'active':\n\t\t\t$sql = \"AND `{$prefix}status`='active'\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t\n\t$get_query = \"SELECT * FROM `$table` WHERE `{$prefix}status`!='deleted' AND `account_id`='$account_id' AND `$field`='$id' $sql\";\n\treturn $fmdb->get_results($get_query);\n}\n\n/**\n * Gets the object list\n *\n * @since 1.0\n * @package facileManager\n */\nfunction basicGetList($table, $id = 'id', $prefix = '', $sql = null, $limit = null, $ip_sort = false, $direction = 'ASC', $count_only = false) {\n\tglobal $fmdb;\n\t\n\tswitch($sql) {\n\t\tcase 'active':\n\t\t\t$sql = \"AND `{$prefix}status`='active'\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t\n\tif (is_array($id)) {\n\t\t$primary_field = sanitize($id[0]);\n\t\t$secondary_fields = implode(\" $direction,\", $id);\n\t\t$secondary_fields = ' ' . sanitize(substr($secondary_fields, strlen($primary_field)));\n\t} else {\n\t\t$primary_field = sanitize($id);\n\t\t$secondary_fields = null;\n\t}\n\t\n\tif ($ip_sort) {\n\t\t$sort = \"ORDER BY INET_ATON(`$primary_field`)\" . $secondary_fields;\n\t} else {\n\t\t$sort = \"ORDER BY `$primary_field`\" . $secondary_fields;\n\t}\n\t\n\t$disp_query = 'SELECT ';\n\t$disp_query .= $count_only ? 'COUNT(*) count' : '*';\n\t$disp_query .= \" FROM `$table` WHERE `{$prefix}status`!='deleted' AND account_id='{$_SESSION['user']['account_id']}' $sql $sort $direction $limit\";\n\treturn $fmdb->query($disp_query);\n}\n\n/**\n * Updates the record status\n *\n * @since 1.0\n * @package facileManager\n */\nfunction updateStatus($table, $id, $prefix, $status, $field = 'id') {\n\tglobal $fmdb;\n\t\n\t$query = \"UPDATE `$table` SET `{$prefix}status`='\" . sanitize($status) . \"' WHERE account_id='{$_SESSION['user']['account_id']}' AND `$field`='\" . sanitize($id) . \"'\";\n\n\treturn $fmdb->query($query);\n}\n\n\n/**\n * Deletes the selected object\n *\n * @since 1.0\n * @package facileManager\n */\nfunction basicDelete($table, $id, $field = 'id', $include_account_id = true) {\n\tglobal $fmdb;\n\n\t$account_id = $include_account_id ? \"account_id='{$_SESSION['user']['account_id']}' AND\" : null;\n\t\n\t$query = \"DELETE FROM `$table` WHERE $account_id `$field`='\" . sanitize($id) . \"'\";\n\n\treturn $fmdb->query($query);\n}\n\n\n/**\n * Updates the selected object\n *\n * @since 1.0\n * @package facileManager\n */\nfunction basicUpdate($table, $id, $update_field, $update_value, $field = 'id') {\n\tglobal $fmdb;\n\t\n\t$query = \"UPDATE `$table` SET `$update_field`='\" . sanitize($update_value) . \"' WHERE account_id='{$_SESSION['user']['account_id']}' AND `$field`='\" . sanitize($id) . \"'\";\n\n\treturn $fmdb->query($query);\n}\n\n\n/**\n * Builds an array from mysql enum values\n *\n * @since 1.0\n * @package facileManager\n * \n * @param string $tbl_name Table name\n * @param string $column_name Column name\n * @param string $sort Optional sort function\n * \n * return array\n */\nfunction enumMYSQLSelect($tbl_name, $column_name, $sort = 'unsorted') {\n\tglobal $fmdb;\n\t\n\t$query = \"SHOW COLUMNS FROM $tbl_name LIKE '$column_name'\";\n\t$result = $fmdb->get_results($query);\n\t\n\t$result = $fmdb->last_result;\n\t$thisrow = $result[0];\n\t$valuestring = $thisrow->Type;\n\t$valuestring = str_replace(array('enum', '(', ')', \"'\"), '', $valuestring);\n\tif (isset($head)) {\n\t\t$valuestring = \"{$head},{$valuestring}\";\n\t}\n\t$values = explode(',', $valuestring);\n\t\n\tif ($sort != 'unsorted') {\n\t\t$sort($values);\n\t}\n\t\n\treturn $values;\n}\n\n/**\n * Builds a drop down menu\n *\n * @since 1.0\n * @package facileManager\n */\nfunction buildSelect($select_name, $select_id, $options, $option_select = null, $size = '1', $disabled = '', $multiple = false, $onchange = null, $classes = null, $placeholder = null) {\n\tif (!$placeholder) $placeholder = _('Select an option');\n\t$type_options = null;\n\tif (countArrayDimensions($options) == 3) {\n\t\tforeach ($options as $optgroup => $optarray) {\n\t\t\tif (is_string($optgroup)) $type_options .= '<optgroup label=\"' . $optgroup . '\">';\n\t\t\tfor ($i = 0; $i < count($optarray); $i++) {\n\t\t\t\t$selected = null;\n\t\t\t\tif (is_array($option_select)) {\n\t\t\t\t\tforeach ($option_select as $key) {\n\t\t\t\t\t\tif (isset($key) && $key == $optarray[$i][1]) {\n\t\t\t\t\t\t\t$selected = ' selected';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif (isset($option_select) && (string)$option_select === (string)$optarray[$i][1]) {\n\t\t\t\t\t$selected = ' selected';\n\t\t\t\t}\n\t\t\t\t$type_options.=\"<option$selected value=\\\"{$optarray[$i][1]}\\\">{$optarray[$i][0]}</option>\\n\";\n\t\t\t}\n\t\t\tif (is_string($optgroup)) $type_options .= '</optgroup>';\n\t\t}\n\t} elseif (countArrayDimensions($options) == 2) {\n\t\tfor ($i = 0; $i < count($options); $i++) {\n\t\t\t$selected = null;\n\t\t\tif (is_array($option_select)) {\n\t\t\t\tforeach ($option_select as $key) {\n\t\t\t\t\tif (isset($key) && $key == $options[$i][1]) {\n\t\t\t\t\t\t$selected = ' selected';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} elseif (isset($option_select) && (string)$option_select === (string)$options[$i][1]) {\n\t\t\t\t$selected = ' selected';\n\t\t\t}\n\t\t\t$type_options.=\"<option$selected value=\\\"{$options[$i][1]}\\\">{$options[$i][0]}</option>\\n\";\n\t\t}\n\t} else {\n\t\tfor ($i = 0; $i < count($options); $i++) {\n\t\t\t$selected = ($option_select == $options[$i] || (is_array($option_select) && @in_array($options[$i], $option_select))) ? ' selected' : '';\n\t\t\t$type_options.=\"<option$selected>$options[$i]</option>\\n\";\n\t\t}\n\t}\n\t$build_select = \"<select class=\\\"$classes\\\" data-placeholder=\\\"$placeholder\\\" \";\n\t$build_select .= \"size=\\\"$size\\\" name=\\\"{$select_name}\";\n\tif ($multiple) $build_select .= '[]';\n\t$build_select .= \"\\\" id=\\\"$select_id\\\"\";\n\tif ($multiple) $build_select .= ' multiple';\n\tif ($onchange) $build_select .= ' onchange=\"' . $onchange . '\" ';\n\t$build_select .= \"$disabled>$type_options</select>\\n\";\n\treturn $build_select;\n}\n\n\n/**\n * Gets name from an id\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getNameFromID($id, $table, $prefix, $field, $data, $account_id = null, $status = null) {\n\tglobal $fmdb;\n\t\n\tif (!$account_id) {\n\t\t$account_id = $_SESSION['user']['account_id'];\n\t}\n\t\n\tbasicGet($table, $id, $prefix, $field, $status, $account_id);\n\tif ($fmdb->num_rows) {\n\t\t$result = $fmdb->last_result;\n\t\tif (isset($result[0]->$data)) return $result[0]->$data;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Gets account id from key\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getAccountID($value, $field = 'account_key', $key = 'account_id') {\n\tglobal $fmdb;\n\t\n\t$query = sprintf('SELECT %s FROM `fm_accounts` WHERE %s=\"%s\"', $key, $field, $value);\n\t$result = $fmdb->get_results($query);\n\tif ($fmdb->num_rows) {\n\t\t$result = $fmdb->last_result;\n\t\treturn $result[0]->$key;\n\t}\n}\n\n\n/**\n * Checks the app functionality\n *\n * @since 1.0\n * @package facileManager\n */\nfunction functionalCheck() {\n\tglobal $fm_name;\n\t\n\tif (isset($_SESSION['module'])) {\n\t\t$functions_file = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $_SESSION['module'] . DIRECTORY_SEPARATOR . 'functions.php';\n\t\tif (is_file($functions_file)) {\n\t\t\tif (!function_exists('moduleFunctionalCheck') && $_SESSION['module'] != $fm_name) {\n\t\t\t\tinclude($functions_file);\n\t\t\t}\n\t\t\t$html_checks = @moduleFunctionalCheck();\n\t\t} else {\n\t\t\t$html_checks = sprintf('<p>%s</p>', _('You have no modules installed.'));\n\t\t}\n\t}\n\t\n\treturn $html_checks;\n}\n\n\n/**\n * Pings the $server to check if it's alive\n *\n * @since 1.0\n * @package facileManager\n */\nfunction pingTest($server) {\n\t$program = findProgram('ping');\n\tif (PHP_OS == 'FreeBSD' || PHP_OS == 'Darwin') {\n\t\t$ping = shell_exec(\"$program -t 2 -c 3 \" . escapeshellarg($server) . \" 2>/dev/null\");\n\t} elseif (PHP_OS == 'Linux') {\n\t\t$ping = shell_exec(\"$program -W 2 -c 3 \" . escapeshellarg($server) . \" 2>/dev/null\");\n\t} else {\n\t\t$ping = shell_exec(\"$program -c 3 \" . escapeshellarg($server) . \" 2>/dev/null\");\n\t}\n\tif ($ping && preg_match('/64 bytes from/', $ping)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n/**\n * Searches for the full path of the $program\n *\n * @since 1.0\n * @package facileManager\n */\nfunction findProgram($program) {\n\t$path = array('/bin', '/sbin', '/usr/bin', '/usr/sbin', '/usr/local/bin', '/usr/local/sbin');\n\n\tif (function_exists('is_executable')) {\n\t\twhile ($this_path = current($path)) {\n\t\t\tif (is_executable(\"$this_path/$program\")) {\n\t\t\t\treturn \"$this_path/$program\";\n\t\t\t}\n\t\t\tnext($path);\n\t\t}\n\t} else {\n\t\treturn strpos($program, '.exe');\n\t}\n\n\treturn;\n}\n\n\n/**\n * Tests a $port on $host\n *\n * @since 1.0\n * @package facileManager\n */\nfunction socketTest($host, $port, $timeout) {\n\t$fm = @fsockopen($host, $port, $errno, $errstr, $timeout);\n\tif (!$fm) return false;\n\telse {\n\t\tfclose($fm);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * Gets post data from a url\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getPostData($url, $data = null, $post = 'post', $options = array()) {\n\tif ($post == 'post') {\n\t\t$options = array(\n\t\t\tCURLOPT_POST => true,\n\t\t\tCURLOPT_POSTFIELDS => $data\n\t\t);\n\t}\n\t$defaults = array (\n\t\tCURLOPT_HEADER => false,\n\t\tCURLOPT_RETURNTRANSFER => true,\n\t\tCURLOPT_FRESH_CONNECT => true,\n\t\tCURLOPT_FORBID_REUSE => true,\n\t\tCURLOPT_CONNECTTIMEOUT => 2,\n\t\tCURLOPT_TIMEOUT => 5,\n\t\tCURLOPT_SSL_VERIFYPEER => false,\n\t\tCURLOPT_SSL_VERIFYHOST => false,\n\t\tCURLOPT_FAILONERROR => true,\n\t\tCURLOPT_URL => $url\n\t);\n\t\n\t$proxy = array();\n\tif (getOption('proxy_enable')) {\n\t\t$proxyauth = getOption('proxy_user') . ':' . getOption('proxy_pass');\n\t\tif ($proxyauth == ':') $proxyauth = null;\n\t\t$proxy = array(\n\t\t\tCURLOPT_PROXY => getOption('proxy_host') . ':' . getOption('proxy_port'),\n\t\t\tCURLOPT_PROXYUSERPWD => $proxyauth\n\t\t);\n\t}\n\t$ch = curl_init();\n\tcurl_setopt_array($ch, ($options + $proxy + $defaults));\n\t$result = curl_exec($ch);\n\tcurl_close($ch);\n\treturn $result;\n}\n\n\n/**\n * Gets the user information\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getUserInfo($fm_login, $field = 'user_id') {\n\tglobal $fmdb;\n\t\n\t$query = \"SELECT * FROM `fm_users` WHERE $field='$fm_login' AND `user_status`!='deleted' LIMIT 1\";\n\t$user_results = $fmdb->get_results($query);\n\t\n\t/** Matching results returned as an array */\n\tif ($fmdb->num_rows) {\n\t\t$user_info = get_object_vars($user_results[0]);\n\t\t\n\t\treturn $user_info;\n\t}\n\t\n\t/** No matching results */\n\treturn false;\n}\n\n\n/**\n * Process password reset user form.\n *\n * @since 1.0\n * @package facileManager\n */\nfunction genRandomString($length) {\n\t$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\t$string = null;\n\tfor ($p = 0; $p < $length; $p++) {\n\t\t$string .= $characters[mt_rand(0, strlen($characters)-1)];\n\t}\n\treturn $string;\n}\n\n\n/**\n * Converts $_SERVER['REQUEST_URI'] to an array\n *\n * @since 1.0\n * @package facileManager\n */\nfunction convertURIToArray() {\n\t$uri = explode('?', $_SERVER['REQUEST_URI']);\n//\techo '<pre>';\n//\tprint_r($uri);\n\tif (count($uri) > 1) {\n\t\t$raw_params = explode('&', $uri[1]);\n//\t\tprint_r($raw_params);\n\t\t\n\t\tfor ($i=0; $i<count($raw_params); $i++) {\n\t\t\tif (strpos($raw_params[$i], '=')) {\n\t\t\t\t$param = explode('=', $raw_params[$i]);\n\t\t\t\t$return_array[$param[0]] = $param[1];\n//\t\tprint_r($param);\n\t\t\t} else {\n\t\t\t\t$return_array[$raw_params[$i]] = null;\n\t\t\t}\n\t\t}\n//\t\tprint_r($return_array);\n//\t\texit;\n\t\treturn $return_array;\n\t}\n\t\n\treturn array();\n}\n\n\n/**\n * Builds the dashboard for display\n *\n * @since 1.0\n * @package facileManager\n */\nfunction buildDashboard() {\n\tglobal $fm_name;\n\t\n\trequire(ABSPATH . 'fm-includes/version.php');\n\t$fm_new_version_available = isNewVersionAvailable($fm_name, $fm_version);\n\t\n\tif ($fm_new_version_available) {\n\t\t$dashboard = <<<DASH\n\t<div id=\"shadow_box\" class=\"fullwidthbox\">\n\t\t<div id=\"shadow_container\" class=\"fullwidthbox\">\n\t\t<p>{$fm_new_version_available['text']}</p>\n\t\t</div>\n\t</div>\n\t<br />\nDASH;\n\t} else $dashboard = null;\n\t\n\tif (isset($_SESSION['module'])) {\n\t\t$functions_file = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $_SESSION['module'] . DIRECTORY_SEPARATOR . 'functions.php';\n\t\tif (is_file($functions_file)) {\n\t\t\tif (!function_exists('buildModuleDashboard')) {\n\t\t\t\tinclude($functions_file);\n\t\t\t}\n\t\t\t$body = sprintf('<div class=\"fm-table\"><div>%s</div></div>', @buildModuleDashboard());\n\t\t} else {\n\t\t\t$body = sprintf('<p>%s</p>', _('You have no modules installed.'));\n\t\t}\n\t}\n\n\treturn $dashboard . $body;\n}\n\n\n/**\n * Builds the help for display\n *\n * @since 1.0\n * @package facileManager\n */\nfunction buildHelpFile() {\n\tglobal $fm_name, $__FM_CONFIG;\n\t\n\t/** facileManager help */\n\t$body = <<<HTML\n<div id=\"issue_tracker\">\n\t<p>Have an idea for a new feature? Found a bug? Submit a report with the <a href=\"https://github.com/WillyXJ/facileManager/issues\" target=\"_blank\">issue tracker</a>.</p>\n</div>\n<h3>$fm_name</h3>\n<ul>\n\t<li>\n\t\t<a class=\"list_title\">Configure Modules</a>\n\t\t<div>\n\t\t\t<p>Modules are what gives $fm_name purpose. They can be installed, activated, upgraded, deactivated, and uninstalled.</p>\n\t\t\t\n\t\t\t<p><b>Install</b><br />\n\t\t\tJust extract the module into the 'fm-modules' directory on the server host (if not already present), go to \n\t\t\t<a href=\"__menu{Modules}\">Modules</a>, and then click the 'Install' button next to the module \n\t\t\tyou wish to install.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t\t<p><b>Activate</b><br />\n\t\t\tIn order for the module to be usable, it needs to be active in the UI.</p>\n\t\t\t<p>Go to <a href=\"__menu{Modules}\">Modules</a> and click the 'Activate' link next \n\t\t\tto the module you wish to activate.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t\t<p><b>Upgrade</b><br />\n\t\t\tAnytime module files are individually updated in the 'fm-modules' directory on the server host apart from updating $fm_name \n\t\t\tas a whole, they will need to be upgraded to ensure full compatibility and functionality.</p>\n\t\t\t<p>Go to <a href=\"__menu{Modules}\">Modules</a> and click the 'Upgrade' button next \n\t\t\tto the module you wish to upgrade. This will upgrade the database with any required changed.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t\t<p><b>Deactivate</b><br />\n\t\t\tIf you no longer want a module to be usable, it can be deactived in the UI.</p>\n\t\t\t<p>Go to <a href=\"__menu{Modules}\">Modules</a> and click the 'Deactivate' link next \n\t\t\tto the module you wish to deactivate.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t\t<p><b>Uninstall</b><br />\n\t\t\tIf you no longer want a module to be installed, it can be uninstalled via the UI.</p>\n\t\t\t<p>Go to <a href=\"__menu{Modules}\">Modules</a>, ensure the module is already \n\t\t\tdeactivated, and then click the 'Uninstall' button next to the module you wish to remove. This will remove all associated \n\t\t\tentries and tables from the database.</p>\n\t\t\t<p><i>The 'Module Management' or 'Super Admin' permission is required for this action.</i></p>\n\t\t</div>\n\t</li>\n\t<li>\n\t\t<a class=\"list_title\">Manage Users</a>\n\t\t<div>\n\t\t\t<p>$fm_name incorporates the use of multiple user accounts with granular permissions. This way you can limit access to your \n\t\t\tenvironment.</p>\n\t\t\t\n\t\t\t<p>You can add, modify, and delete user accounts at Admin &rarr; <a href=\"__menu{Users & Groups}\">Users</a>.</p>\n\t\t\t\n\t\t\t<p>For non-LDAP users, there are some options you can select:</p>\n\t\t\t<ul>\n\t\t\t\t<li><b>Force Password Change at Next Login</b><br />\n\t\t\t\tTick this box the user should be forced to change their password next time they try to login.</li>\n\t\t\t\t<li><b>Template User</b><br />\n\t\t\t\tTick this box if this user should be a template user only. These users cannot be enabled and cannot login to $fm_name. Any user \n\t\t\t\taccount of this type will be depicted with a {$__FM_CONFIG['icons']['template_user']} next to the user name.</li>\n\t\t\t</ul>\n\t\t\t\n\t\t\t<p>Each permission checkbox will grant or deny access to certain functionalities within $fm_name.</p>\n\t\t\t<ul>\n\t\t\t\t<li><b>Super Admin</b><br />\n\t\t\t\tThis permission will grant the user unrestricted access to the entire facileManager environment. There must be at least one\n\t\t\t\tSuper Admin. Any user account with this privilege will be depicted with a {$__FM_CONFIG['icons']['star']} next to the user name.</li>\n\t\t\t\t<li><b>Module Management</b><br />\n\t\t\t\tWith this permission, the user will be able to activate, deactivate, install, upgrade, and uninstall modules within $fm_name.</li>\n\t\t\t\t<li><b>User Management</b><br />\n\t\t\t\tThis permission allows the user to add, modify, and delete user accounts.</li>\n\t\t\t\t<li><b>Run Tools</b><br />\n\t\t\t\tThis permission grants the user access to run the various tools in Admin &rarr; <a href=\"__menu{Tools}\">Tools</a>.</li>\n\t\t\t\t<li><b>Manage Settings</b><br />\n\t\t\t\tThis permission grants the user access to change system settings at Settings &rarr; <a href=\"__menu{Settings}\">General</a>.</li>\n\t\t\t</ul>\n\t\t\t\n\t\t\t<p>New user accounts can be created quickly from a template by duplicating the template user. This will prompt you for the new \n\t\t\tusername and password while giving you the ability to change any other settings prior to user creation.</p>\n\n\t\t\t<p>User groups can also be created to easily provide the same level of access to multiple user accounts.</p>\n\t\t\t<p><i>The 'User Management' or 'Super Admin' permission is required for these actions.</i></p>\n\n\t\t\t<p>When API Support is enabled at Settings &rarr; <a href=\"__menu{Settings}\">General</a>, each user may create an API keypair\n\t\t\tby editing their user profile. Privileged users will be able change the status of any keypair through Admin &rarr; \n\t\t\t<a href=\"__menu{Users & Groups}\">Users</a>. This keypair allows the user to authenticate via the API through the client scripts.</p> \n\t\t</div>\n\t</li>\n\t<li>\n\t\t<a class=\"list_title\">Manage Settings</a>\n\t\t<div>\n\t\t\t<p>There are several settings available to set at Settings &rarr; <a href=\"__menu{Settings}\">General</a>.</p>\n\t\t\t<p><i>The 'Manage Settings' or 'Super Admin' permission is required to change settings.</i></p>\n\t\t\t<p><b>Authentication</b><br />\n\t\t\tThere are three types of authentication supported by $fm_name:</p>\n\t\t\t<ul>\n\t\t\t\t<li><b>None</b><br />\n\t\t\t\tEvery user will be automatically logged in as the default super-admin account that was created during the installation process.</li>\n\t\t\t\t<li><b>Built-in Authentication</b><br />\n\t\t\t\tAuthenticates against the $fm_name database using solely the users defined at Admin &rarr; <a href=\"__menu{Users & Groups}\">Users</a>.</li>\n\t\t\t\t<li><b>LDAP Authentication</b><br />\n\t\t\t\tUsers are authenticated against a defined LDAP server. Upon success, users are created in the $fm_name database using the selected \n\t\t\t\ttemplate account for granular permissions within the environment. If no template is selected then user authentication will fail \n\t\t\t\t(this is another method of controlling access to $fm_name). These users cannot be disabled nor can their passwords be changed \n\t\t\t\twithin $fm_name. The PHP LDAP extensions have to be installed before this option is available.</li>\n\t\t\t</ul>\n\t\t\t<p><i>You can reset the authentication method by setting the following in config.inc.php:</i></p>\n\t\t\t<p><i>define('FM_NO_AUTH', true);</i></p>\n\t\t\t<p><b>Client Registration</b><br />\n\t\t\tYou can choose to allow clients to automatically register in the database or not.</p>\n\t\t\t<p><b>API Support</b><br />\n\t\t\tBy enabling API support, users are able to create keypairs to authenticate with through the client scripts. This opens up the ability\n\t\t\tto make a limited selection of module changes without using the web interface.</p>\n\t\t\t<p><b>SSL</b><br />\n\t\t\tYou can choose to have $fm_name enforce the use of SSL when a user tries to access the web app.</p>\n\t\t\t<p><b>Mailing</b><br />\n\t\t\tThere are a few things $fm_name and its modules may need to send an e-mail about (such as password reset links). These settings allow\n\t\t\tyou to configure the mailing settings to use for your environment and enable/disable mailing altogether.</p>\n\t\t\t<p><b>Date and Time</b><br />\n\t\t\tSet your preferred timezone, date format, and time format for $fm_name to use throughout all aspects of the app. What you select is\n\t\t\thow all dates and times will be display including any client configuration files.</p>\n\t\t\t<p><b>Show Errors</b><br />\n\t\t\tChoose whether you want $fm_name errors to be displayed as they occur or not. This can be useful if you are having trouble\n\t\t\tadding or editing opjects.</p>\n\t\t\t<p><b>Temporary Directory</b><br />\n\t\t\tPeriodically $fm_name and its modules may need to create temporary files or directories on your webserver. Specify the local path for it to use.</p>\n\t\t\t<p><b>Software Update</b><br />\n\t\t\tChoose whether you want $fm_name to automatically check for software updates or not.</p>\n\t\t\t<p><b>SSH Username</b><br />\n\t\t\tWhen servers are configured to receive updates via SSH, this username will be created (if not already present) on your clients\n\t\t\tand will be used for the client interaction.</p>\n\t\t\t<p><b>SSH Key Pair</b><br />\n\t\t\tIn order for client configs to be updated via SSH, $fm_name needs a 2048-bit passwordless key pair generated. Without this key pair, \n\t\t\tclients cannot use the SSH update method. Click the 'Generate' button to have $fm_name automatically generate the necessary key pair.</p>\n\t\t</div>\n\t</li>\n\t<li>\n\t\t<a class=\"list_title\">Review Logs</a>\n\t\t<div>\n\t\t\t<p>Every action performed within the $fm_name UI will be logged for auditing purposes.</p>\n\t\t\t<p>You can view and search the logs at Admin &rarr; <a href=\"__menu{Logs}\">Logs</a></p>\n\t\t</div>\n\t</li>\n</ul>\n\t\nHTML;\n\t\n\t/** Get module help file */\n\tif (isset($_SESSION['module']) && $_SESSION['module'] != $fm_name) {\n\t\t$functions_file = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $_SESSION['module'] . DIRECTORY_SEPARATOR . 'functions.php';\n\t\tif (is_file($functions_file)) {\n\t\t\tif (!function_exists('buildModuleHelpFile')) {\n\t\t\t\tinclude($functions_file);\n\t\t\t}\n\t\t\t$body .= @buildModuleHelpFile();\n\t\t} else {\n\t\t\t$body .= sprintf('<p>%s</p>', _('You have no modules installed.'));\n\t\t}\n\t}\n\n\treturn parseMenuLinks($body) . '<br />';\n}\n\n\n/**\n * Adds a UI log entry to the database\n *\n * @since 1.0\n * @package facileManager\n */\nfunction addLogEntry($log_data, $module = null) {\n\tglobal $fmdb, $__FM_CONFIG, $fm_name;\n\t\n\t$account_id = isset($_SESSION['user']['account_id']) ? $_SESSION['user']['account_id'] : 0;\n\t$user_name = isset($_SESSION['user']['name']) ? $_SESSION['user']['name'] : 0;\n\t$module = isset($module) ? $module : $_SESSION['module'];\n\t\n\t$log_method = getOption('log_method');\n\t\n\tif ($log_method != 1) {\n\t\t$insert = \"INSERT INTO `{$__FM_CONFIG['db']['name']}`.`fm_logs` VALUES (NULL, '$user_name', $account_id, '$module', \" . time() . \", '\" . sanitize($log_data) . \"')\";\n\t\tif (is_object($fmdb)) {\n\t\t\t$fmdb->query($insert);\n\t\t} else {\n\t\t\tdie(_('Lost connection to the database.'));\n\t\t}\n\t}\n\t\n\tif ($log_method) {\n\t\taddSyslogEntry(trim($log_data), $module);\n\t}\n}\n\n\n/**\n * Builds an array of available modules\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getAvailableModules() {\n\tglobal $fm_name;\n\t\n\t$modules = null;\n\t$module_dir = ABSPATH . 'fm-modules';\n\tif ($handle = opendir($module_dir)) {\n\t\t$blacklist = array('.', '..', 'shared', strtolower($fm_name));\n\t\twhile (false !== ($file = readdir($handle))) {\n\t\t\tif (!in_array(strtolower($file), $blacklist)) {\n\t\t\t\tif (is_dir($module_dir . DIRECTORY_SEPARATOR . $file)) {\n\t\t\t\t\t$modules[] = $file;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tclosedir($handle);\n\n\t\tif (count($modules)) {\n\t\t\tsort($modules);\n\t\t\treturn $modules;\n\t\t}\n\t}\n\t\n\treturn array();\n}\n\n/**\n * Returns an option value\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getOption($option = null, $account_id = 0, $module_name = null) {\n\tglobal $fmdb;\n\tif (!$fmdb) return false;\n\t\n\t$module_sql = ($module_name) ? \"AND module_name='$module_name'\" : null;\n\n\t$query = \"SELECT * FROM fm_options WHERE option_name='$option' AND account_id=$account_id $module_sql LIMIT 1\";\n\t$results = $fmdb->get_results($query);\n\t\n\tif ($fmdb->num_rows && !$fmdb->sql_errors) {\n\t\tif (isSerialized($results[0]->option_value)) {\n\t\t\treturn unserialize($results[0]->option_value);\n\t\t}\n\t\t\n\t\treturn $results[0]->option_value;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Sets an option value\n *\n * @since 1.0\n * @package facileManager\n */\nfunction setOption($option = null, $value = null, $insert_update = 'auto', $auto_serialize = true, $account_id = 0, $module_name = null) {\n\tglobal $fmdb;\n\t\n\tif ($auto_serialize) {\n\t\t$value = isSerialized($value) ? sanitize($value) : serialize($value);\n\t} else $value = sanitize($value);\n\t$option = sanitize($option);\n\t\n\t$module_sql = ($module_name) ? \"AND module_name='$module_name'\" : null;\n\t\n\tif ($insert_update == 'auto') {\n\t\t$query = \"SELECT * FROM fm_options WHERE option_name='$option' AND account_id=$account_id $module_sql\";\n\t\t$result = $fmdb->query($query);\n\t\t$insert_update = ($fmdb->num_rows) ? 'update' : 'insert';\n\t}\n\t\n\tif ($insert_update == 'insert') {\n\t\t$keys = array('account_id', 'option_name', 'option_value');\n\t\t$values = array($account_id, $option, $value);\n\t\tif ($module_name) {\n\t\t\t$keys[] = 'module_name';\n\t\t\t$values[] = $module_name;\n\t\t}\n\t\t$query = \"INSERT INTO fm_options (\" . implode(',', $keys) . \") VALUES ('\" . implode(\"','\", $values) . \"')\";\n\t} else {\n\t\t$query = \"UPDATE fm_options SET option_value='$value' WHERE option_name='$option' AND account_id=$account_id $module_sql\";\n\t}\n\t\n\treturn $fmdb->query($query);\n}\n\n/**\n * Check value to find if it was serialized.\n *\n * If $data is not an string, then returned value will always be false.\n * Serialized data is always a string.\n *\n * @since 1.0\n * @package facileManager\n *\n * @param mixed $data Value to check to see if was serialized.\n * @return bool False if not serialized and true if it was.\n */\nfunction isSerialized($data) {\n\t// if it isn't a string, it isn't serialized\n\tif (!is_string($data))\n\t\treturn false;\n\t$data = trim($data);\n\tif ('N;' == $data)\n\t\treturn true;\n\t$length = strlen($data);\n\tif ($length < 4)\n\t\treturn false;\n\tif (':' !== $data[1])\n\t\treturn false;\n\t$lastc = $data[$length-1];\n\tif (';' !== $lastc && '}' !== $lastc)\n\t\treturn false;\n\t$token = $data[0];\n\tswitch ($token ) {\n\t\tcase 's' :\n\t\t\tif ('\"' !== $data[$length-2])\n\t\t\t\treturn false;\n\t\tcase 'a' :\n\t\tcase 'O' :\n\t\t\treturn (bool) preg_match(\"/^{$token}:[0-9]+:/s\", $data);\n\t\tcase 'b' :\n\t\tcase 'i' :\n\t\tcase 'd' :\n\t\t\treturn (bool) preg_match(\"/^{$token}:[0-9.E-]+;\\$/\", $data);\n\t}\n\treturn false;\n}\n\n/**\n * Builds an array of active modules\n *\n * @since 1.0\n * @package facileManager\n */\nfunction getActiveModules($allowed_modules = false) {\n\t$modules = getOption('fm_active_modules', $_SESSION['user']['account_id']);\n\t\n\tif ($modules !== false) {\n\t\t@sort($modules);\n\t\tif (!$allowed_modules) {\n\t\t\treturn $modules;\n\t\t}\n\t\t\n\t\t$user_capabilities = getUserCapabilities($_SESSION['user']['id'], 'all');\n\t\t$excluded_modules = array();\n\t\tforeach ($modules as $module_name) {\n\t\t\tif (!array_key_exists($module_name, $user_capabilities) && !currentUserCan('do_everything')) $excluded_modules[] = $module_name;\n\t\t}\n\t\treturn array_merge(array_diff($modules, $excluded_modules), array());\n\t} else {\n\t\treturn array();\n\t}\n}\n\n/**\n * Uninstalls a module\n *\n * @since 1.0\n * @package facileManager\n */\nfunction uninstallModuleSchema($database, $module) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\t$removes[] = <<<REMOVE\nDELETE FROM $database.`fm_options` WHERE `module_name` = '$module';\nREMOVE;\n\n\tforeach ($removes as $query) {\n\t\t$result = $fmdb->query($query);\n\t}\n\t\n\t/** Include module variables */\n\t@include(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'variables.inc.php');\n\t\n\t$query = \"SHOW TABLES FROM `{$__FM_CONFIG['db']['name']}` LIKE 'fm_{$__FM_CONFIG[$module]['prefix']}%'\";\n\t$result = $fmdb->get_results($query);\n\t$tables = $fmdb->last_result;\n\t$table_count = $fmdb->num_rows;\n\t\n\tfor ($i=0; $i<$table_count; $i++) {\n\t\t$table_info = get_object_vars($tables[$i]);\n\t\tsort($table_info);\n\t\t$drop_query = \"DROP TABLE `{$__FM_CONFIG['db']['name']}`.`{$table_info[0]}`\";\n\t\t$result = $fmdb->query($drop_query);\n\t\tif (!$fmdb->rows_affected) return false;\n\t}\n\t\n\t/** Delete entries from fm_options */\n\t$query = \"DELETE FROM `{$__FM_CONFIG['db']['name']}`.`fm_options` WHERE `module_name`='{$module}'\";\n\t$fmdb->query($query);\n\t\n\t/** Delete capability entries from fm_users */\n\t$query = \"SELECT * FROM `{$__FM_CONFIG['db']['name']}`.`fm_users`\";\n\t$fmdb->query($query);\n\t$count = $fmdb->num_rows;\n\t$result = $fmdb->last_result;\n\tfor ($i=0; $i<=$count; $i++) {\n\t\t$current_caps = isSerialized($result[$i]->user_caps) ? unserialize($result[$i]->user_caps) : $result[$i]->user_caps;\n\t\tif (array_key_exists($module, (array) $current_caps)) {\n\t\t\tunset($current_caps[$module]);\n\t\t\t$fmdb->query(\"UPDATE `{$__FM_CONFIG['db']['name']}`.`fm_users` SET user_caps='\" . serialize($current_caps) . \"' WHERE user_id=\" . $result[$i]->user_id);\n\t\t\tif (!$fmdb->rows_affected) return false;\n\t\t}\n\t}\n\t\n\treturn 'Success';\n}\n\n/**\n * Formats filesize\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $size Number to format\n * @return string\n */\nfunction formatSize($size) {\n\t$sizes = array(\" Bytes\", \" KB\", \" MB\", \" GB\", \" TB\", \" PB\", \" EB\", \" ZB\", \" YB\");\n\tif ($size == 0) {\n\t\treturn('n/a');\n\t} else {\n\t\treturn (round($size/pow(1024, ($i = floor(log($size, 1024)))), $i > 1 ? 2 : 0) . $sizes[$i]);\n\t}\n}\n\n\n/**\n * Forms the date menu\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $date Date to format\n * @return string\n */\nfunction buildDateMenu($date = null) {\n\t$uri = $hidden = null;\n\tforeach ($GLOBALS['URI'] as $key => $value) {\n\t\tif (empty($key)) continue;\n\t\tif ($key == 'date') continue;\n\t\t$uri .= $key . '=' . $value . '&';\n\t\t$hidden .= '<input type=\"hidden\" name=\"' . $key . '\" value=\"' . $value . '\" />' . \"\\n\";\n\t}\n\t$uri = rtrim($uri, '&');\n\t\n\tif ($date) {\n\t\t$current_date = date(\"m/d/Y\", strtotime($date));\n\t\t$next_date = date(\"Y-m-d\", strtotime(\"$current_date + 1 day\"));\n\t\t$previous_date = date(\"Y-m-d\", strtotime(\"$current_date - 1 day\"));\n\t} else {\n\t\t$current_date = date(\"m/d/Y\");\n\t\t$next_date = date(\"Y-m-d\", strtotime(\"tomorrow\"));\n\t\t$previous_date = date(\"Y-m-d\", strtotime(\"yesterday\"));\n\t}\n\n\t$next = sprintf('<a href=\"?%s&date=%s\">%s</a>', $uri, $next_date, _('next &rarr;'));\n\t$previous = sprintf('<a href=\"?%s&date=%s\">%s</a>', $uri, $previous_date, _('&larr; previous'));\n\t\n\t$date_menu = <<<HTML\n\t<div id=\"datemenu\">\n\t\t<form action=\"\" method=\"get\">\n\t\t\t$hidden\n\t\t\t$previous\n\t\t\t<input name=\"date\" type=\"text\" class=\"datepicker\" value=\"$current_date\" style=\"width: 7em;\" onchange=\"this.form.submit()\" />\n\t\t\t$next\n\t\t</form>\n\t</div>\nHTML;\n\n\treturn $date_menu;\n}\n\n\n/**\n * Generates a server serial number\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $module Module to use\n * @return int\n */\nfunction generateSerialNo($module = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\n\tif ($module) {\n\t\twhile(1) {\n\t\t\tif (array_key_exists('server_name', $_POST) && defined('CLIENT')) {\n\t\t\t\t$get_query = \"SELECT * FROM `fm_{$__FM_CONFIG[$module]['prefix']}servers` WHERE `server_status`!='deleted' AND account_id='\" . getAccountID(sanitize($_POST['AUTHKEY'])) . \"' AND `server_name`='\" . sanitize($_POST['server_name']) . \"'\";\n\t\t\t\t$array = $fmdb->get_results($get_query);\n\t\t\t\tif ($fmdb->num_rows) {\n\t\t\t\t\treturn $array[0]->server_serial_no;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$serialno = rand(100000000, 999999999);\n\t\t\t\n\t\t\t/** Ensure the serial number does not exist in any of the server tables */\n\t\t\t$result = $fmdb->get_results(\"SELECT table_name AS table_name FROM information_schema.tables t WHERE t.table_schema = '{$__FM_CONFIG['db']['name']}' AND t.table_name LIKE 'fm_%_servers'\");\n\t\t\t$table_count = $fmdb->num_rows;\n\t\t\t$taken = true;\n\t\t\tfor ($i=0; $i<$table_count; $i++) {\n\t\t\t\tbasicGet($result[$i]->table_name, $serialno, 'server_', 'server_serial_no', null, 1);\n\t\t\t\tif (!$fmdb->num_rows) $taken = false;\n\t\t\t}\n\t\t\tif (!$taken) return $serialno;\n\t\t}\n\t}\n}\n\n\n/**\n * Returns the server serial number\n *\n * @since 1.0\n * @package facileManager\n *\n * @param int $server_id Server ID to process\n * @param string $module Module to use\n * @return string\n */\nfunction getServerSerial($server_id, $module = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\tif ($module) {\n\t\tbasicGet('fm_' . $__FM_CONFIG[$module]['prefix'] . 'servers', $server_id, 'server_', 'server_id');\n\t\tif ($fmdb->num_rows) {\n\t\t\t$result = $fmdb->last_result;\n\t\t\treturn $result[0]->server_serial_no;\n\t\t}\n\t}\n}\n\n\n/**\n * Returns the server ID\n *\n * @since 1.0\n * @package facileManager\n *\n * @param int $server_serial_no Server serial number to process\n * @param string $module Module to use\n * @return string\n */\nfunction getServerID($server_serial_no, $module = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\tif ($module) {\n\t\tbasicGet('fm_' . $__FM_CONFIG[$module]['prefix'] . 'servers', $server_serial_no, 'server_', 'server_serial_no');\n\t\tif ($fmdb->num_rows) {\n\t\t\t$result = $fmdb->last_result;\n\t\t\treturn $result[0]->server_id;\n\t\t}\n\t}\n}\n\n\n/**\n * Checks multiple keys in an array\n *\n * @since 1.0\n * @package facileManager\n *\n * @param array $keys Keys to check\n * @param array $array Array to search\n * @return bool\n */\nfunction arrayKeysExist($keys, $array) {\n\tforeach ($keys as $key) {\n\t\tif (array_key_exists($key, $array)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n/**\n * Displays pagination\n *\n * @since 1.0\n * @package facileManager\n *\n * @param integer $page Current page\n * @param integer $total_pages Total number of pages\n * @param string $classes Additional classes to apply to the div\n * @param string $position Additional blocks to be on left or right\n * @return string\n */\nfunction displayPagination($page, $total_pages, $addl_blocks = null, $classes = null, $position = 'left') {\n\tglobal $fmdb;\n\t\n\t$page_params = null;\n\tforeach ($GLOBALS['URI'] as $key => $val) {\n\t\tif (!$key || $key == 'p') continue;\n\t\t$page_params .= $key . '=' . $val . '&';\n\t}\n\t\n\tif ($page < 1) {\n\t\t$page = 1;\n\t}\n\tif ($page > $total_pages) {\n\t\t$page = $total_pages;\n\t}\n\t\n\t$page_links = array();\n\t$page_links[] = '<div id=\"pagination_container\">';\n\t$page_links[] = '<div>';\n\tif ($position == 'right') {\n\t\t$page_links[] = buildPaginationCountMenu(0, 'pagination');\n\t\tif ($addl_blocks) $addl_blocks = (array) $addl_blocks;\n\t\tarray_unshift($addl_blocks, null);\n\t}\n\tif (isset($addl_blocks)) {\n\t\tforeach ((array) $addl_blocks as $block) {\n\t\t\t$page_links[] = '<div>' . $block . '</div>';\n\t\t}\n\t}\n\tif ($position == 'left') $page_links[] = buildPaginationCountMenu(0, 'pagination');\n\n\t$page_links[] = '<div id=\"pagination\" class=\"' . $classes . '\">';\n\t$page_links[] = '<form id=\"pagination_search\" method=\"GET\" action=\"' . $GLOBALS['basename'] . '?' . $page_params . '\">';\n\t$page_links[] = sprintf('<span>%s</span>', sprintf(ngettext('%d item', '%d items', $fmdb->num_rows), formatNumber($fmdb->num_rows)));\n\n\t/** Previous link */\n\tif ($page > 1 && $total_pages > 1) {\n\t\t$page_links[] = '<a href=\"' . $GLOBALS['basename'] . \"?{$page_params}p=1\\\">&laquo;</a>\";\n\t\t$page_links[] = '<a href=\"' . $GLOBALS['basename'] . \"?{$page_params}p=\" . ($page - 1) . '\">&lsaquo;</a>';\n\t}\n\t\n\t/** Page number */\n\t$page_links[] = '<input id=\"paged\" type=\"text\" value=\"' . $page . '\" /> of ' . formatNumber($total_pages);\n\t\n\t/** Next link */\n\tif ($page < $total_pages) {\n\t\t$page_links[] = '<a href=\"' . $GLOBALS['basename'] . \"?{$page_params}p=\" . ($page + 1) . '\">&rsaquo;</a>';\n\t\t$page_links[] = '<a href=\"' . $GLOBALS['basename'] . \"?{$page_params}p=\" . $total_pages . '\">&raquo;</a>';\n\t}\n\n\t$page_links[] = '</form>';\n\t$page_links[] = '</div>';\n\t$page_links[] = '</div>';\n\t$page_links[] = '</div>';\n\t\n\treturn join(\"\\n\", $page_links);\n}\n\n\n/**\n * Builds the server listing in a dropdown menu\n *\n * @since 1.0\n * @package facileManager\n */\nfunction buildPaginationCountMenu($server_serial_no = 0, $class = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\t$record_count = buildSelect('rc', 'rc', $__FM_CONFIG['limit']['records'], $_SESSION['user']['record_count'], 1, null, false, 'this.form.submit()');\n\t\n\t$hidden_inputs = null;\n\tforeach ($GLOBALS['URI'] as $param => $value) {\n\t\tif ($param == 'rc') continue;\n\t\t$hidden_inputs .= '<input type=\"hidden\" name=\"' . $param . '\" value=\"' . $value . '\" />' . \"\\n\";\n\t}\n\t\n\t$class = $class ? 'class=\"' . $class . '\"' : null;\n\n\t$return = sprintf('<div id=\"configtypesmenu\" %s>\n\t\t<form action=\"%s\" method=\"GET\">\n\t\t%s\n\t\t%s %s\n\t\t</form>\n\t</div>',\n\t\t\t$class, $GLOBALS['basename'], $hidden_inputs,\n\t\t\t$record_count, _('items per page')\n\t\t);\n\n\treturn $return;\n}\n\n\n/**\n * Displays error message\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $message Message to display\n * @param string $tryagain Include the Try Again button\n * @param string $title Error message title to display\n * @return null\n */\nfunction bailOut($message, $tryagain = 'try again', $title = null) {\n\tglobal $fm_name;\n\t\n\tif (!$title) $title = _('Requirement Error');\n\t\n\tif (strpos($message, '<') != 0) {\n\t\t$message = \"<p>$message</p>\";\n\t}\n\t\n\tif ($tryagain == 'try again') {\n\t\t$tryagain = sprintf('<p class=\"step\"><a href=\"%s\" class=\"button\">%s</a></p>',\n\t\t\t$_SERVER['PHP_SELF'], _('Try Again'));\n\t} else {\n\t\t$tryagain = null;\n\t}\n\t\n\tprintHeader($title, 'install');\n\tprintf('<div id=\"fm-branding\">\n\t\t<img src=\"%s\" /><span>%s</span>\n\t</div>\n\t<div id=\"window\">%s%s</div>', getBrandLogo(), $title, $message, $tryagain);\n\texit(printFooter());\n}\n\n\n/**\n * Displays progress\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $step Step message\n * @param string $result Result of step\n * @param boolean $noisy Whether the result should be echoed\n * @param string $error Message to display as the tooltip\n * @return string\n */\nfunction displayProgress($step, $result, $process = 'noisy', $error = null) {\n\tif ($result === true) {\n\t\t$output = '<i class=\"fa fa-check fa-lg\"></i>';\n\t\t$status = 'success';\n\t} else {\n\t\tglobal $fmdb;\n\t\t\n\t\tif (!$error) {\n\t\t\tif (is_object($fmdb)) {\n\t\t\t\t$error = $fmdb->last_error;\n\t\t\t}\n\t\t}\n\t\tif ($error) {\n\t\t\t$output = '<a href=\"#\" class=\"error-message tooltip-right\" data-tooltip=\"' . $error . '\"><i class=\"fa fa-times fa-lg\"></i></a>';\n\t\t} else {\n\t\t\t$output = '<i class=\"fa fa-times fa-lg\"></i>';\n\t\t}\n\t\t$status = 'failed';\n\t}\n\t\n\t$message = <<<HTML\n\t<tr>\n\t\t<th>$step</th>\n\t\t<td class=\"status $status\">$output</td>\n\t</tr>\n\nHTML;\n\n\tif ($process == 'noisy') {\n\t\techo $message;\n\t\treturn $result;\n\t} elseif ($process == 'display') {\n\t\treturn $message;\n\t} else return $result;\n}\n\n\n/**\n * Checks if PEAR is installed\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $package Additional PEAR package to check\n * @return boolean\n */\n/**\nfunction isPearInstalled($packages = null){\n\trequire_once 'System.php';\n\tif (!class_exists('System', false)) return false;\n\t\n\tif ($packages) {\n\t\t$packages = is_array($packages) ? $packages : array($packages);\n\t\tforeach ($packages as $pear_package) {\n\t\t\texec(findProgram('pear') . ' info ' . $pear_package, $output, $retval);\n\t\t\tif ($retval) return false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n */\n\n\n/**\n * Checks if an email address is valid\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $address Email address to validate\n * @return boolean\n */\nfunction isEmailAddressValid($address){\n\treturn filter_var($address, FILTER_VALIDATE_EMAIL);\n}\n\n\n/**\n * Checks if fM is running behind SSL or not supports load-balancers\n *\n * @since 1.0\n * @package facileManager\n *\n * @return boolean\n */\nfunction isSiteSecure(){\n\tif (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') {\n\t    return true;\n\t} elseif (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' || !empty($_SERVER['HTTP_X_FORWARDED_SSL']) && $_SERVER['HTTP_X_FORWARDED_SSL'] == 'on') {\n\t    return true;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Gets the table column length\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $tbl_name Table name to check\n * @param string $column_name Column name to check\n * @return integer\n */\nfunction getColumnLength($tbl_name, $column_name) {\n\tglobal $fmdb;\n\t\n\t$query = \"SHOW COLUMNS FROM $tbl_name LIKE '$column_name'\";\n\t$result = $fmdb->get_results($query);\n\t\n\t$thisrow = $result[0];\n\t$valuestring = $thisrow->Type;\n\t\n\t/** No limit */\n\tif (strpos($thisrow->Type, 'varchar') === false) return false;\n\t\n\treturn str_replace(array('varchar', '(', ')', \"'\"), '', $valuestring);\n}\n\n\n/**\n * Checks if an IP Address is valid\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $ip_address IP Address to check\n * @return boolean\n */\nfunction verifyIPAddress($ip_address) {\n\treturn verifySimpleVariable($ip_address, FILTER_VALIDATE_IP);\n}\n\n\n/**\n * Checks number validity\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $number Number to check\n * @param string $min_range Minimum number in the range\n * @param string $max_range Maximum number in the range\n * @param boolean $decimal_allowed Are decimals allowed\n * @return boolean\n */\nfunction verifyNumber($number, $min_range = 0, $max_range = null, $decimal_allowed = true) {\n\tif ($min_range >= 0 && $max_range != null) {\n\t\tif (!$decimal_allowed) {\n\t\t\treturn filter_var($number, FILTER_VALIDATE_INT, array('options' => array('min_range' => $min_range, 'max_range' => $max_range)));\n\t\t} else {\n\t\t\treturn filter_var($number, FILTER_VALIDATE_INT, array('options' => array('min_range' => $min_range, 'max_range' => $max_range)));\n\t\t}\n\t} else {\n\t\treturn filter_var($number, FILTER_VALIDATE_INT);\n\t}\n}\n\n\n/**\n * Runs data through a filter check\n *\n * @since 3.1\n * @package facileManager\n *\n * @param string $data Address to check\n * @param mixed $filter_type PHP filter type to use\n * @return boolean\n */\nfunction verifySimpleVariable($data, $filter_type) {\n\treturn filter_var($data, $filter_type);\n}\n\n\n/**\n * Builds a form for app settings\n *\n * @since 1.0\n * @package facileManager\n *\n * @param array $saved_options Settings pulled from the database\n * @param array $default_options Default settings\n * @return string\n */\nfunction buildSettingsForm($saved_options, $default_options) {\n\t$option_rows = $current_parent = null;\n\t\n\tforeach ($default_options as $option => $options_array) {\n\t\t$option_row_head = null;\n\t\t$option_value = array_key_exists($option, $saved_options) ? $saved_options[$option] : $options_array['default_value'];\n\t\t\n\t\tif (is_array($option_value)) {\n\t\t\t$temp_value = null;\n\t\t\tforeach ($option_value as $value) {\n\t\t\t\t$temp_value .= $value . \"\\n\";\n\t\t\t}\n\t\t\t$option_value = rtrim($temp_value);\n\t\t}\n\n\t\t$div_style = 'style=\"display: none;\"';\n\t\t\n\t\tswitch($options_array['type']) {\n\t\t\tcase 'textarea':\n\t\t\t\t$input_field = '<textarea name=\"' . $option . '\" id=\"' . $option . '\" type=\"' . $options_array['type'] . '\">' . $option_value . '</textarea>';\n\t\t\t\tbreak;\n\t\t\tcase 'checkbox':\n\t\t\t\t$checked = $option_value == 'yes' ? 'checked' : null;\n\t\t\t\t$input_field = '<input name=\"' . $option . '\" type=\"hidden\" value=\"no\" />';\n\t\t\t\t$input_field .= '<label><input name=\"' . $option . '\" id=\"' . $option . '\" type=\"' . $options_array['type'] . '\" value=\"yes\" ' . $checked . ' />' . $options_array['description'][0] . '</label>';\n\t\t\t\tif (isset($options_array['show_children_when_value']) && $options_array['show_children_when_value'] == $checked) {\n\t\t\t\t\t$show_children[$option] = 'style=\"display: block;\"';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'select':\n\t\t\t\t$input_field = buildSelect($option, $option, $options_array['options'], $option_value);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$size = (isset($options_array['size'])) ? $options_array['size'] : 40;\n\t\t\t\t$addl = (isset($options_array['addl'])) ? $options_array['addl'] : null;\n\t\t\t\t$input_field = '<input name=\"' . $option . '\" id=\"' . $option . '\" type=\"' . $options_array['type'] . '\" value=\"' . $option_value . '\" size=\"' . $size . '\" ' . $addl . ' />';\n\t\t}\n\t\tif (array_key_exists('parent', $options_array)) {\n\t\t\tif ($options_array['parent'] === true && $option_rows) {\n\t\t\t\t$option_row_head = '</div><div id=\"settings-section\">' . \"\\n\";\n\t\t\t} elseif ($options_array['parent'] !== true) {\n\t\t\t\tif ($current_parent != $options_array['parent']) {\n\t\t\t\t\tif ($show_children[$options_array['parent']]) {\n\t\t\t\t\t\t$div_style = $show_children[$options_array['parent']];\n\t\t\t\t\t}\n\t\t\t\t\t$option_row_head = sprintf('<div id=\"%s_options\" %s>', $options_array['parent'], $div_style);\n\t\t\t\t\t$current_parent = $options_array['parent'];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ($current_parent) {\n\t\t\t\t$option_row_head = \"</div>\\n\";\n\t\t\t}\n\t\t\t$current_parent = null;\n\t\t}\n\t\t$option_rows .= <<<ROW\n\t\t\t$option_row_head\n\t\t\t<div id=\"setting-row\">\n\t\t\t\t<div class=\"description\">\n\t\t\t\t\t<label for=\"$option\">{$options_array['description'][0]}</label>\n\t\t\t\t\t<p>{$options_array['description'][1]}</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"choices\">\n\t\t\t\t\t$input_field\n\t\t\t\t</div>\n\t\t\t</div>\n\nROW;\n\t}\n\t\n\treturn ($option_rows) ? '<div id=\"settings-section\">' . $option_rows . '</div>' : null;\n}\n\n\n/**\n * Compresses a file\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $filename Name of the file to compress\n * @param string $contents File contents to compress\n * @return null\n */\nfunction compressFile($filename, $contents) {\n\t$compressed_filename = $filename . '.gz';\n\t\n\t$fp = gzopen($compressed_filename, 'w9');\n\tgzwrite($fp, file_get_contents($filename));\n\tgzclose($fp);\n}\n\n\n/**\n * Sends a file to the browser for download\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $filename Name of the file to compress\n * @param string $contents File contents to compress\n * @return file\n */\nfunction sendFileToBrowser($filename) {\n\tif (is_file($filename)) {\n\t\theader('Content-type: application/octet-stream');\n\t\theader('Content-Disposition: attachment; filename=' . basename($filename));\n\t\theader('Content-Transfer-Encoding: binary');\n\t\theader('Expires: 0');\n\t\theader('Cache-Control: must-revalidate');\n\t\theader('Pragma: public');\n\t\theader('Content-Length: ' . filesize($filename));\n\t\tob_clean();\n\t\tflush();\n\t\treadfile($filename);\n\t\t@unlink($filename);\n\t\texit;\n\t}\n}\n\n\n/**\n * Returns an icon for the server OS\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $server_os Server OS to return the icon for\n * @return string\n */\nfunction setOSIcon($server_os) {\n\tglobal $fm_name;\n\t\n\t$os_name = array('openSUSE', 'Raspberry Pi', 'Raspbian');\n\t$os_image = array('SUSE', 'RaspberryPi', 'RaspberryPi');\n\t\n\t$os = file_exists(ABSPATH . 'fm-modules/' . $fm_name . '/images/os/' . str_replace($os_name, $os_image, $server_os) . '.png') ? $server_os : 'unknown';\n\t$os_image = '<img src=\"fm-modules/' . $fm_name . '/images/os/' . str_replace($os_name, $os_image, $os) . '.png\" border=\"0\" alt=\"' . $os . '\" title=\"' . $os . '\" width=\"18\" />';\n\t\n\treturn $os_image;\n}\n\n\n/**\n * Displays the page header\n *\n * @since 1.0\n * @package facileManager\n *\n * @param string $response Page form response\n * @param string $title The page title\n * @param bool $allowed_to_add Whether the user can add new\n * @param string $name Name value of plus sign\n * @param string $rel Rel value of plus sign\n * @param string $scroll Scroll or noscroll\n * @return string\n */\nfunction printPageHeader($response = null, $title = null, $allowed_to_add = false, $name = null, $rel = null, $scroll = null) {\n\tglobal $__FM_CONFIG;\n\t\n\tif (empty($title)) $title = getPageTitle();\n\t\n\t$style = (empty($response)) ? 'style=\"display: none;\"' : null;\n\tif (strpos($response, '</p>') === false || strpos($response, _('Database error')) !== false) {\n\t\t$response = displayResponseClose($response);\n\t}\n\n\techo '<div id=\"body_container\"';\n\tif ($scroll == 'noscroll') echo ' class=\"fm-noscroll\" style=\"padding-bottom: 0;\"';\n\techo '>' . \"\\n\";\n\techo '<div id=\"response\" ' . $style . '>' . $response . \"</div>\\n\";\n\techo '<h2>' . $title;\n\t\n\tif ($allowed_to_add) {\n\t\techo displayAddNew($name, $rel);\n\t}\n\t\n\techo '</h2>' . \"\\n\";\n}\n\n\n/**\n * Sets server build config flag\n *\n * @since 1.0\n * @package facileManager\n *\n * @param integer $serial_no Server serial number\n * @param string $flag Flag to set (yes or no)\n * @param string $build_update Are we building or updating\n * @param integer $domain_id Domain ID to update DNS servers for\n * @return boolean\n */\nfunction setBuildUpdateConfigFlag($serial_no, $flag, $build_update, $__FM_CONFIG = null) {\n\tglobal $fmdb;\n\t\n\tif (!$__FM_CONFIG) global $__FM_CONFIG;\n\t\n\t$serial_no = sanitize($serial_no);\n\t/** Process server group */\n\tif (!empty($serial_no) && $serial_no[0] == 'g') {\n\t\tglobal $fm_module_servers;\n\n\t\tif (!class_exists('fm_module_servers')) {\n\t\t\tinclude_once(ABSPATH . 'fm-modules/' . $_SESSION['module'] . '/classes/class_servers.php');\n\t\t}\n\t\t\n\t\t$group_servers = $fm_module_servers->getGroupServers(substr($serial_no, 2));\n\n\t\tif (!is_array($group_servers)) return false;\n\n\t\tsetBuildUpdateConfigFlag(implode(',', $group_servers), $flag, $build_update, $__FM_CONFIG);\n\n\t\treturn true;\n\t}\n\n\tif ($serial_no) {\n\t\t$query = \"UPDATE `fm_{$__FM_CONFIG[$_SESSION['module']]['prefix']}servers` SET `server_\" . $build_update . \"_config`='\" . $flag . \"' WHERE `server_serial_no` IN (\" . $serial_no . \") AND `server_installed`='yes'\";\n\t} else {\n\t\t$query = \"UPDATE `fm_{$__FM_CONFIG[$_SESSION['module']]['prefix']}servers` SET `server_\" . $build_update . \"_config`='\" . $flag . \"' WHERE `server_installed`='yes' AND `server_status`='active'\";\n\t}\n\t$result = $fmdb->query($query);\n\t\n\tif ($fmdb->result) {\n\t\tif (isset($GLOBALS[$_SESSION['module']]['DNSSEC'])) {\n\t\t\tforeach ($GLOBALS[$_SESSION['module']]['DNSSEC'] as $items) {\n\t\t\t\tbasicUpdate(\"fm_{$__FM_CONFIG[$_SESSION['module']]['prefix']}domains\", $items['domain_id'], 'domain_dnssec_signed', $items['domain_dnssec_signed'], 'domain_id');\n\t\t\t\tif ($fmdb->sql_errors || !$fmdb->result) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n/**\n * Sets the timezone\n *\n * @since 1.0\n * @package facileManager\n *\n * @return null\n */\nfunction setTimezone() {\n\tif (isset($_SESSION['user'])) {\n\t\t$default_timezone = getOption('timezone', $_SESSION['user']['account_id']);\n\t}\n\tif (!empty($default_timezone)) {\n\t\tdate_default_timezone_set($default_timezone);\n\t} else {\n\t\tif (ini_get('date.timezone')) {\n\t\t\tdate_default_timezone_set(ini_get('date.timezone'));\n\t\t} else {\n\t\t\tdate_default_timezone_set('UTC');\n\t\t}\n\t}\n}\n\n\n/**\n * Resets the user password.\n *\n * @since 1.0\n * @package facileManager\n */\nfunction resetPassword($fm_login, $user_password) {\n\tglobal $fmdb;\n\t\n\tif ($user_info = getUserInfo($fm_login, 'user_login')) {\n\t\t$fm_login_id = $user_info['user_id'];\n\n\t\t/** Update password */\n\t\t$query = \"UPDATE `fm_users` SET `user_password`='\" . password_hash($user_password, PASSWORD_DEFAULT) . \"', `user_force_pwd_change`='no' WHERE `user_id`='$fm_login_id'\";\n\t\t$fmdb->query($query);\n\n\t\tif ($fmdb->rows_affected) {\n\t\t\t/** Remove entry from fm_pwd_resets table */\n\t\t\t$query = \"DELETE FROM `fm_pwd_resets` WHERE `pwd_login`='$fm_login_id'\";\n\t\t\t$fmdb->query($query);\n\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Gets menu badge counts\n *\n * @since 1.1\n * @package facileManager\n *\n * @return array\n */\nfunction getBadgeCounts($type) {\n\tglobal $fm_name;\n\t\n\t$badge_count = 0;\n\t\n\tif (!defined('INSTALL') && !defined('UPGRADE')) {\n\t\tif ($type == 'core') {\n\t\t\tinclude(ABSPATH . 'fm-includes/version.php');\n\t\t\t\n\t\t\t/** New versions available */\n\t\t\tif (isNewVersionAvailable($fm_name, $fm_version)) $badge_count++;\n\t\t}\n\t\tif ($type == 'modules') {\n\t\t\t/** Get fM badge counts */\n\t\t\t$modules = getAvailableModules();\n\t\t\tforeach ($modules as $module_name) {\n\t\t\t\t/** Include module variables */\n\t\t\t\t@include(ABSPATH . 'fm-modules/' . $module_name . '/variables.inc.php');\n\t\t\t\t\n\t\t\t\t/** Upgrades waiting */\n\t\t\t\t$module_version = getOption('version', 0, $module_name);\n\t\t\t\tif ($module_version !== false) {\n\t\t\t\t\tif (version_compare($module_version, $__FM_CONFIG[$module_name]['version'], '<')) {\n\t\t\t\t\t\t$badge_count++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$module_version = $__FM_CONFIG[$module_name]['version'];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/** New versions available */\n\t\t\t\tif (isNewVersionAvailable($module_name, $module_version)) $badge_count++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn $badge_count;\n}\n\n\n/**\n * Builds bulk action menu\n *\n * @since 1.1\n * @package facileManager\n *\n * @return array\n */\nfunction buildBulkActionMenu($bulk_actions_list = null, $id = 'bulk_action') {\n\tif (is_array($bulk_actions_list)) {\n\t\t$bulk_actions[] = null;\n\t\t\n\t\treturn buildSelect($id, 'bulk_action', array_merge($bulk_actions, $bulk_actions_list), null, 1, '', false, null, null, _('Bulk Actions')) . \n\t\t\t'<input type=\"submit\" name=\"bulk_apply\" id=\"bulk_apply\" value=\"' . _('Apply') . '\" class=\"button\" />' . \"\\n\";\n\t}\n}\n\n\n/**\n * Takes text and strips html and whitespace\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $text Text to clean up\n * @param boolean $make_array Whether the output should be an array or not\n * @return array\n */\nfunction makePlainText($text, $make_array = false) {\n\t$text = strip_tags((string) $text);\n\t$text = trim($text);\n\t\n\tif ($make_array == true) return explode(\"\\n\", $text);\n\t\n\treturn $text;\n}\n\n\n/**\n * Displays a table header\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $table_info Values to build the <table> tag\n * @param array $head_values Values to build the <th> tags\n * @param string $tbody_id id for <tbody>\n * @return string\n */\nfunction displayTableHeader($table_info, $head_values, $tbody_id = null) {\n\tif ($tbody_id) $tbody_id = ' id=\"' . $tbody_id . '\"';\n\t\n\t$sort_direction = isset($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction']) ? strtolower($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction']) : 'asc';\n\t\n\t$parameters = null;\n\tif (is_array($table_info)) {\n\t\tforeach ($table_info as $parameter => $value) {\n\t\t\t$parameters .= ' ' . $parameter . '=\"' . $value . '\"';\n\t\t}\n\t}\n\t$html = '<table' . $parameters . \">\\n\";\n\t$html .= \"<thead>\\n<tr>\\n\";\n\t\n\tforeach ($head_values as $thead) {\n\t\t$parameters = null;\n\t\tif (is_array($thead)) {\n\t\t\t$temp_array = $thead;\n\t\t\t$thead = null;\n\t\t\tforeach ($temp_array as $parameter => $value) {\n\t\t\t\tif ($parameter == 'title') {\n\t\t\t\t\t$thead = $value;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$parameters .= (is_null($value)) ? ' ' . $parameter : ' ' . $parameter . '=\"' . $value . '\"';\n\t\t\t\tif ($parameter == 'rel') {\n\t\t\t\t\tif (isset($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_field']) &&\n\t\t\t\t\t\t$value == $_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_field']) {\n\t\t\t\t\t\t\t$parameters .= ' id=\"header-sorted\"';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$html .= \"<th$parameters>$thead <i class=\\\"$sort_direction\\\"></i></th>\\n\";\n\t}\n\t$html .= \"</tr>\\n</thead>\\n<tbody$tbody_id>\\n\";\n\t\n\treturn $html;\n}\n\n\n/**\n * Displays a table header\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $table_info Values to build the <table> tag\n * @param array $head_values Values to build the <th> tags\n * @param string $tbody_id id for <tbody>\n * @return string\n */\nfunction handleSortOrder() {\n\tif (array_key_exists('sort_by', $_GET)) {\n\t\t$swap_direction = array('ASC' => 'DESC', 'DESC' => 'ASC');\n\n\t\tif (isset($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_field']) &&\n\t\t\t$_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_field'] != $_GET['sort_by']) {\n\t\t\t$sort_direction = $swap_direction[$_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction']];\n\t\t} elseif (isset($_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction'])) {\n\t\t\t$sort_direction = $_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']]['sort_direction'];\n\t\t} else {\n\t\t\t$sort_direction = 'DESC';\n\t\t}\n\t\t@session_start();\n\t\t$_SESSION[$_SESSION['module']][$GLOBALS['path_parts']['filename']] = array(\n\t\t\t\t'sort_field' => $_GET['sort_by'], 'sort_direction' => $swap_direction[$sort_direction]\n\t\t\t);\n\t\tsession_write_close();\n\t}\n\t\n\t$temp_uri = str_replace(array('?sort_by=' . $_GET['sort_by'], '&sort_by=' . $_GET['sort_by']), '', $_SERVER['REQUEST_URI']);\n\t\n\theader('Location: ' . $temp_uri);\n}\n\n\n/**\n * Formats log data\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $strip Text to strip out\n * @param string $key Logging key\n * @param string $data Logging data\n * @return string\n */\nfunction formatLogKeyData($strip, $key, $data) {\n\treturn ucwords(str_replace('_', ' ', str_replace($strip, '', $key))) . \": $data\\n\";\n}\n\n\n/**\n * Displays an error page message\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $message Text to display\n * @param string $link_display Show or Hide the page back link\n * @return string\n */\nfunction fMDie($message = null, $link_display = 'show', $title = null) {\n\tglobal $fm_name;\n\t\n\tif (!$message) $message = _('An unknown error occurred.');\n\tif (!$title) $title = _('Oops!');\n\t\n\tprintHeader('Error', 'install', 'no-help', 'no-menu');\n\t\n\tprintf('<div id=\"fm-branding\"><img src=\"%s\" /><span>%s</span></div>\n\t\t<div id=\"window\"><p>%s</p>', getBrandLogo(), $title, $message);\n\tif ($link_display == 'show') echo '<p><a href=\"javascript:history.back();\">' . _('&larr; Back') . '</a></p>';\n\techo '</div>';\n\t\n\texit;\n}\n\n\n/**\n * Displays an error page message\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $link_display Show or Hide the page back link\n * @return string\n */\nfunction unAuth($link_display = 'show') {\n\tfMDie(_('You do not have permission to view this page. Please contact your administrator for access.'), $link_display, _('Forbidden'));\n}\n\n\n/**\n * Whether current user has capability\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $capability Capability name.\n * @param string $module Module name to check capability for\n * @param string $extra_perm Extra capability to check\n * @return boolean\n */\nfunction currentUserCan($capability, $module = 'facileManager', $extra_perm = null) {\n\tif (!isset($_SESSION['user'])) {\n\t\treturn false;\n\t}\n\treturn userCan($_SESSION['user']['id'], $capability, $module, $extra_perm);\n}\n\n\n/**\n * Whether a user has capability\n *\n * @since 1.2\n * @package facileManager\n *\n * @param integer $user_id User ID to check.\n * @param string|array $capability Capability name.\n * @param string $module Module name to check capability for\n * @param string $extra_perm Extra capability to check\n * @return boolean\n */\nfunction userCan($user_id, $capability, $module = 'facileManager', $extra_perm = null) {\n\tglobal $fm_name;\n\t\n\t/** If no capability defined then return true */\n\tif ($capability === null) return true;\n\t\n\t/** If no authentication then return full access */\n\tif (!getOption('auth_method')) return true;\n\t\n\t/** Return true if group can */\n\tif ($group_id = getNameFromID($user_id, 'fm_users', 'user_', 'user_id', 'user_group')) {\n\t\tif (groupCan($group_id, $capability, $module, $extra_perm)) return true;\n\t}\n\t\n\t$user_capabilities = getUserCapabilities($user_id);\n\t\n\treturn userGroupCan($user_id, $capability, $module, $extra_perm, $user_capabilities);\n}\n\n\n/**\n * Gets the user capabilities\n *\n * @since 1.2\n * @package facileManager\n *\n * @param integer $user_id User ID to retrieve.\n * @param string $type User, group, or all\n * @return array\n */\nfunction getUserCapabilities($user_id, $type = 'user') {\n\tif ($type == 'all') {\n\t\tif ($group_id = getNameFromID($user_id, 'fm_users', 'user_', 'user_id', 'user_group')) {\n\t\t\treturn getUserCapabilities($group_id, 'group');\n\t\t}\n\t\t$type = 'user';\n\t}\n\t$user_capabilities = getNameFromID($user_id, 'fm_' . $type . 's', $type . '_', $type . '_id', $type . '_caps');\n\tif (isSerialized($user_capabilities)) $user_capabilities = unserialize($user_capabilities);\n\t\n\treturn (array) $user_capabilities;\n}\n\n\n/**\n * Handles features defined in config.inc.php\n *\n * @since 1.2\n * @package facileManager\n */\nfunction handleHiddenFlags() {\n\tglobal $fm_name;\n\t\n\t/** Recover authentication in case of lockout */\n\tif (defined('FM_NO_AUTH') && FM_NO_AUTH) {\n\t\tsetOption('auth_method', 0);\n\t\t@addLogEntry(_('Manually reset authentication method.'), $fm_name);\n\t}\n}\n\n\n/**\n * Adds a menu item\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $menu_title Text used to display the menu item\n * @param string $page_title Text used to display the page title when the page loads\n * @param string $capability Minimum capability required for the menu item to be visible to the user\n * @param string $module Module name the menu item is for\n * @param string $menu_slug Menu item slug name to used to reference this item\n * @param string $class Class name to apply to the menu item\n * @param bool $sticky Whether or not to keep the menu title when there's only one submenu item or to take on the submenu item title\n * @param integer $position Menu position for the item\n * @param integer $badge_count Number of items to display in the badge\n */\nfunction addMenuPage($menu_title, $page_title, $capability, $module, $menu_slug, $class = null, $sticky = false, $position = null, $badge_count = 0) {\n\tglobal $menu;\n\t\n\t$new_menu = array($menu_title, $page_title, $capability, $module, $menu_slug, $class, $badge_count, $sticky);\n\t\n\tif ($position === null) {\n\t\t$menu[] = $new_menu;\n\t} else {\n\t\t$menu[$position] = $new_menu;\n\t}\n}\n\n\n/**\n * Adds a menu item under the objects section\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $menu_title Text used to display the menu item\n * @param string $page_title Text used to display the page title when the page loads\n * @param string $capability Minimum capability required for the menu item to be visible to the user\n * @param string $module Module name the menu item is for\n * @param string $menu_slug Menu item slug name to used to reference this item\n * @param string $class Class name to apply to the menu item\n * @param bool $sticky Whether or not to keep the menu title when there's only one submenu item or to take on the submenu item title\n * @param integer $badge_count Number of items to display in the badge\n */\nfunction addObjectPage($menu_title, $page_title, $capability, $module, $menu_slug, $class = null, $sticky = false, $badge_count = 0) {\n\tglobal $_fm_last_object_menu;\n\t\n\t$_fm_last_object_menu++;\n\t\n\taddMenuPage($menu_title, $page_title, $capability, $module, $menu_slug, $class, $sticky, $_fm_last_object_menu, $badge_count);\n}\n\n\n/**\n * Adds a submenu item\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $parent_slug The slug name for the parent menu\n * @param string $menu_title Text used to display the menu item\n * @param string $page_title Text used to display the page title when the page loads\n * @param string $capability Minimum capability required for the menu item to be visible to the user\n * @param string $module Module name the menu item is for\n * @param string $menu_slug Menu item slug name to used to reference this item\n * @param string $class Class name to apply to the menu item\n * @param integer $position Menu position for the item\n * @param integer $badge_count Number of items to display in the badge\n */\nfunction addSubmenuPage($parent_slug, $menu_title, $page_title, $capability, $module, $menu_slug, $class = null, $position = null, $badge_count = 0) {\n\tglobal $submenu;\n\t\n\t$new_menu = array($menu_title, $page_title, $capability, $module, $menu_slug, $class, $badge_count);\n\t\n\tif ($position === null) {\n\t\t$submenu[$parent_slug][] = $new_menu;\n\t} else {\n\t\t$submenu[$parent_slug][$position] = $new_menu;\n\t}\n\t\n\t/** Update parent menu badge count */\n\tif ($badge_count) {\n\t\tglobal $menu;\n\t\t\n\t\t$parent_menu_key = getParentMenuKey($parent_slug);\n\t\tif ($parent_menu_key !== false) {\n\t\t\t$menu[$parent_menu_key][6] += $badge_count;\n\t\t}\n\t}\n}\n\n\n/**\n * Adds a submenu item to the Settings menu\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $menu_title Text used to display the menu item\n * @param string $page_title Text used to display the page title when the page loads\n * @param string $capability Minimum capability required for the menu item to be visible to the user\n * @param string $module Module name the menu item is for\n * @param string $menu_slug Menu item slug name to used to reference this item\n * @param string $class Class name to apply to the menu item\n * @param integer $position Menu position for the item\n * @param integer $badge_count Number of items to display in the badge\n */\nfunction addSettingsPage($menu_title, $page_title, $capability, $module, $menu_slug, $class = null, $badge_count = 0, $position = null) {\n\taddSubmenuPage('admin-settings.php', $menu_title, $page_title, $capability, $module, $menu_slug, $class, $position, $badge_count);\n}\n\n\n/**\n * Gets the page title from the menu item\n *\n * @since 1.2\n * @package facileManager\n *\n * @return string|bool\n */\nfunction getPageTitle() {\n\tglobal $menu, $submenu;\n\t\n\t/** Search submenus first */\n\tforeach ($submenu as $slug => $submenu_items) {\n\t\tforeach ($submenu_items as $element) {\n\t\t\tif (array_search($GLOBALS['basename'], $element, true) !== false) {\n\t\t\t\treturn $element[1];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/** Search menus */\n\tforeach ($menu as $position => $menu_items) {\n\t\tif (array_search($GLOBALS['basename'], $menu_items, true) !== false) {\n\t\t\treturn $menu[$position][1];\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Returns the top level menu key\n *\n * @since 1.2\n * @package facileManager\n *\n * @return integer|bool Returns the parent menu key or false if the menu item is not found\n */\nfunction getParentMenuKey($search_slug = null) {\n\tglobal $menu, $submenu;\n\t\n\tif (!$search_slug) $search_slug = $GLOBALS['basename'];\n\t\n\tforeach ($menu as $position => $menu_items) {\n\t\t$parent_key = array_search($search_slug, $menu_items, true);\n\t\tif ($parent_key !== false) {\n\t\t\treturn $position;\n\t\t}\n\t}\n\t\n\tforeach ($submenu as $parent_slug => $menu_items) {\n\t\tforeach ($menu_items as $element) {\n\t\t\tif (array_search($search_slug, $element, true) !== false) {\n\t\t\t\treturn getParentMenuKey($parent_slug);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Checks if max_input_vars has been exceeded\n *\n * @since 1.2\n * @package facileManager\n *\n * @return integer|bool Returns the number of input vars required or false if not exceeded\n */\nfunction hasExceededMaxInputVars() {\n\t$max_input_vars = ini_get('max_input_vars') + 1;\n\tif ($max_input_vars == false) return false;\n\t\n\t$php_input = substr_count(file_get_contents('php://input'), '&');\n\t\n\treturn $php_input > $max_input_vars ? $php_input : false;\n}\n\n\n/**\n * Checks if max_input_vars has been exceeded\n *\n * @since 1.2\n * @package facileManager\n */\nfunction checkMaxInputVars() {\n\tif ($required_input_vars = hasExceededMaxInputVars()) {\n\t\tfMDie(sprintf(_('PHP max_input_vars (%1$d) has been reached and %2$s or more are required. Please increase the limit to fulfill this request. Two possible methods include setting the following:') .\n\t\t\t'<p>%3$s.htaccess:<br /><code>php_value max_input_vars %2$s</code></p>\n\t\t\t<p>%3$s.user.ini:<br /><code>max_input_vars = %2$s</code></p>', ini_get('max_input_vars'), $required_input_vars, ABSPATH));\n\t}\n}\n\n\n/**\n * Checks if max_input_vars has been exceeded\n *\n * @since 1.2\n * @package facileManager\n *\n * @param array $checks_array Array of actions and capabilities\n * @param string $action Action to check\n *\n * @return bool\n */\nfunction checkUserPostPerms($checks_array, $action) {\n\tif (array_key_exists($action, $checks_array)) {\n\t\treturn currentUserCan($checks_array[$action], $_SESSION['module']);\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Checks if max_input_vars has been exceeded\n *\n * @since 1.2\n * @package facileManager\n *\n * @param string $user_default_module User's default module\n */\nfunction setUserModule($user_default_module) {\n\tglobal $fm_name;\n\t\n\t$modules = @getActiveModules(true);\n\tif (@in_array($user_default_module, $modules)) {\n\t\t$_SESSION['module'] = $user_default_module;\n\t} else {\n\t\t$_SESSION['module'] = (is_array($modules) && count($modules)) ? $modules[0] : $fm_name;\n\t}\n}\n\n\n/**\n * Returns the menu item URL\n *\n * @since 1.2.3\n * @package facileManager\n *\n * @param string $search_slug Menu slug to query\n * @return integer|bool Returns the parent menu key or false if the menu item is not found\n */\nfunction getMenuURL($search_slug = null) {\n\tglobal $menu, $submenu;\n\t\n\tif (!is_array($menu)) return false;\n\t\n\tif (!$search_slug) $search_slug = $GLOBALS['basename'];\n\tif (is_array($search_slug)) $search_slug = $search_slug[1];\n\t\n\tforeach ($menu as $position => $menu_items) {\n\t\t$parent_key = array_search($search_slug, $menu_items, true);\n\t\tif ($parent_key !== false) {\n\t\t\treturn $menu[$position][4];\n\t\t}\n\t}\n\t\n\tforeach ($submenu as $parent_slug => $menu_items) {\n\t\tforeach ($menu_items as $submenu_id => $element) {\n\t\t\tif (array_search($search_slug, $element, true) !== false) {\n\t\t\t\treturn $submenu[$parent_slug][$submenu_id][4];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Builds the popup window\n *\n * @since 1.3\n * @package facileManager\n *\n * @param string $section Popup section to build (header or footer)\n * @param string $text Popup text to pass for header or buttons\n * @param array $buttons Buttons to include\n * @param string $link Link to provide for a button\n * @return string Returns the popup section\n */\nfunction buildPopup($section, $text = null, $buttons = array('primary_button' => 'submit', 'cancel_button' => 'cancel'), $link = null) {\n\tglobal $__FM_CONFIG;\n\t\n\tif (!$text) $text = _('Save');\n\t\n\tif ($section == 'header') {\n\t\treturn <<<HTML\n\t\t<div class=\"popup-header\">\n\t\t\t{$__FM_CONFIG['icons']['close']}\n\t\t\t<h3>$text</h3>\n\t\t</div>\n\t\t<div class=\"popup-wait\"><i class=\"fa fa-2x fa-spinner fa-spin\"></i></div>\n\t\t<div class=\"popup-contents\">\n\nHTML;\n\t} elseif ($section == 'footer') {\n\t\t$id = array_search('submit', $buttons);\n\t\tif ($id !== false) {\n\t\t\t$id = !is_numeric($id) ? ' id=\"' . $id . '\"' : null;\n\t\t\t$submit = '<input type=\"submit\" name=\"submit\" value=\"' . $text . '\" class=\"button primary\"' . $id . ' />';\n\t\t} else $submit = null;\n\t\t\n\t\t$id = array_search('cancel', $buttons);\n\t\tif ($id !== false) {\n\t\t\t$text = array_search('submit', $buttons) !== false ? _('Cancel') : $text;\n\t\t\t$id = is_numeric($id) ? 'cancel_button' : $id;\n\t\t\tif ($link !== null) {\n\t\t\t\t$cancel = '<a href=\"' . $link . '\" class=\"button\" id=\"' . $id . '\">' . $text . '</a>';\n\t\t\t} else {\n\t\t\t\t$cancel = '<input type=\"button\" value=\"' . $text . '\" class=\"button ';\n\t\t\t\t$cancel .= count($buttons) > 1 ? 'left' : null;\n\t\t\t\t$cancel .= '\" id=\"' . $id . '\" />';\n\t\t\t}\n\t\t} else $cancel = null;\n\t\t\n\t\treturn <<<HTML\n\t\t</div>\n\t\t<div class=\"popup-footer\">\n\t\t\t$submit\n\t\t\t$cancel\n\t\t</div>\n\nHTML;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Parses the output for AJAX calls\n *\n * @since 1.3\n * @package facileManager\n *\n * @param string $output Output to parse for AJAX call\n * @return string Return for the AJAX call to display\n */\nfunction parseAjaxOutput($output) {\n\tglobal $fmdb;\n\t\n\t$message_array['content'] = $output;\n\tif ($message_array['content'] !== true) {\n\t\tif (strpos($message_array['content'], \"\\n\") !== false || isset($fmdb->last_error)) {\n\t\t\tunset($_POST);\n\t\t\tinclude_once(ABSPATH . 'fm-modules/facileManager/ajax/formatOutput.php');\n\t\t} else {\n\t\t\techo $message_array['content'];\n\t\t}\n\t} else {\n\t\techo _('Success');\n\t}\n}\n\n\n/**\n * Parses the output for AJAX calls\n *\n * @since 1.3\n * @package facileManager\n *\n * @param string $html HTML to set menu links in\n * @return string Parsed output\n */\nfunction parseMenuLinks($html) {\n\t$string = preg_replace_callback(\"/__menu{(.+?)}/\", 'getMenuURL', $html);\n\treturn $string;\n}\n\n\n/**\n * Gets the count for servers requiring a config build\n *\n * @since 2.0\n * @package facileManager\n *\n * @return integer Record count\n */\nfunction countServerUpdates() {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\tif (currentUserCan('manage_servers', $_SESSION['module'])) {\n\t\tbasicGetList('fm_' . $__FM_CONFIG[$_SESSION['module']]['prefix'] . 'servers', 'server_id', 'server_', 'AND (server_build_config!=\"no\" OR server_client_version!=\"' . getOption('client_version', 0, $_SESSION['module']) . '\") AND server_status=\"active\" AND server_installed=\"yes\"', null, false, null, true);\n\t\tif (!$fmdb->sql_errors && $fmdb->num_rows) return formatNumber($fmdb->last_result[0]->count);\n\t}\n\t\t\t\n\treturn 0;\n}\n\n\n/**\n * Builds and displays the search form\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $page_params Current page parameters in URI\n * @return string Search form\n */\nfunction displaySearchForm($page_params = null) {\n\tif (isset($_GET['q'])) {\n\t\t$placeholder = sprintf(_('Searched for %s'), sanitize($_GET['q']));\n\t\t$search_remove = '<i class=\"search_remove fa fa-remove fa-lg text_icon\" title=\"' . _('Clear this search') . '\"></i>';\n\t\t$display = ' style=\"display:block\"';\n\t} else {\n\t\t$placeholder = _('Search this page by keyword');\n\t\t$search_remove = $display = null;\n\t}\n\t\n\t$form = <<<HTML\n\t<div id=\"search_form_container\"$display>\n\t\t<div>\n\t\t\t<div id=\"search_form\">\n\t\t\t\t<form id=\"search\" method=\"GET\" action=\"{$GLOBALS['basename']}?{$page_params}\">\n\t\t\t\t\t<input type=\"text\" class=\"text_icon\" placeholder=\"$placeholder\" value=\"{$_GET['q']}\" />\n\t\t\t\t\t$search_remove\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t</div>\nHTML;\n\t\n\treturn $form;\n}\n\n\n/**\n * Counts the number of dimensions in an array\n *\n * @since 2.0\n * @package facileManager\n *\n * @param array $array Array to count\n * @return int Number of dimensions\n */\nfunction countArrayDimensions($array) {\n\tif (is_array($array)) {\n\t\tif (is_array(@reset($array))) {\n\t\t\t$count = countArrayDimensions(reset($array)) + 1;\n\t\t} else {\n\t\t\t$count = 1;\n\t\t}\n\t} else {\n\t\t$count = 1;\n\t}\n\t\n\treturn $count;\n}\n\n\n/**\n * Displays the add new link\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $name Name value of plus sign\n * @param string $rel Rel value of plus sign\n * @param string $title The title of plus sign\n * @param string $style Use an image or font\n * @return string\n */\nfunction displayAddNew($name = null, $rel = null, $title = null, $style = 'default') {\n\tglobal $__FM_CONFIG;\n\t\n\tif (empty($title)) $title = _('Add New');\n\t$contents = ($style == 'default') ? $title : null;\n\t\n\tif ($name) $name = ' name=\"' . $name . '\"';\n\tif ($rel) $rel = ' rel=\"' . $rel . '\"';\n\t\n\t$image = '<i class=\"mini-icon ' . $style . '\" title=\"' . $title . '\">' . $contents . '</i>';\n\tif ($style != 'default') {\n\t\t$title = 'null\" class=\"tooltip-top mini-icon\" data-tooltip=\"' . $title;\n\t}\n\t\n\treturn sprintf('<a id=\"plus\" href=\"#\" title=\"%s\"%s%s>%s</a>', $title, $name, $rel, $image);\n}\n\n\n/**\n * Creates the SQL based on search input\n *\n * @since 2.0\n * @package facileManager\n *\n * @param array $fields Table fields to search\n * @param string $prefix Prefix of the table fields\n * @return string\n */\nfunction createSearchSQL($fields = array(), $prefix = null) {\n\t$search_query = null;\n\tif (isset($_GET['q'])) {\n\t\t$search_query = ' AND (';\n\t\t$search_text = sanitize($_GET['q']);\n\t\tforeach ($fields as $field) {\n\t\t\t$search_query .= \"$prefix$field LIKE '%$search_text%' OR \";\n\t\t}\n\t\t$search_query = rtrim($search_query, ' OR ') . ')';\n\t}\n\t\n\treturn $search_query;\n}\n\n\n/**\n * Translates text using module domain\n *\n * @since 2.0\n * @package facileManager\n *\n * @param string $text Text to translate\n * @param string $domain Domain to use\n * @return string\n */\nfunction __($text, $domain = null) {\n\tif (function_exists('dgettext') && isset($_SESSION['module'])) {\n\t\tif (!$domain) $domain = $_SESSION['module'];\n\n\t\treturn dgettext($domain, $text);\n\t}\n\t\n\treturn $text;\n}\n\n\n/**\n * Gets all available user capabilities\n *\n * @since 2.0\n * @package facileManager\n *\n * @return array\n */\nfunction getAvailableUserCapabilities() {\n\tglobal $fm_name;\n\t\n\t$fm_user_caps = null;\n\t\n\tif (file_exists(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $fm_name . DIRECTORY_SEPARATOR . 'extra' . DIRECTORY_SEPARATOR . 'capabilities.inc.php')) {\n\t\tinclude(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $fm_name . DIRECTORY_SEPARATOR . 'extra' . DIRECTORY_SEPARATOR . 'capabilities.inc.php');\n\t}\n\t\n\tforeach (getActiveModules() as $module) {\n\t\tif (file_exists(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'extra' . DIRECTORY_SEPARATOR . 'capabilities.inc.php')) {\n\t\t\tinclude(ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR . 'extra' . DIRECTORY_SEPARATOR . 'capabilities.inc.php');\n\t\t}\n\t}\n\t\n\treturn $fm_user_caps;\n}\n\n\n/**\n * Whether a group has capability\n *\n * @since 2.1\n * @package facileManager\n *\n * @param integer $group_id Group ID to check.\n * @param string|array $capability Capability name.\n * @param string $module Module name to check capability for\n * @param string $extra_perm Extra capability to check\n * @return boolean\n */\nfunction groupCan($group_id, $capability, $module = 'facileManager', $extra_perm = null) {\n\tglobal $fm_name;\n\t\n\t$group_capabilities = getUserCapabilities($group_id, 'group');\n\t\n\treturn userGroupCan($group_id, $capability, $module, $extra_perm, $group_capabilities, 'group');\n}\n\n\n/**\n * Whether a group has capability\n *\n * @since 2.1\n * @package facileManager\n *\n * @param integer $group_id Group ID to check.\n * @param string|array $capability Capability name.\n * @param string $module Module name to check capability for\n * @param string $extra_perm Extra capability to check\n * @param array $allowed_capabilities Capabilities granted to the user or group\n * @param string $type User or Group\n * @return boolean\n */\nfunction userGroupCan($id, $capability, $module = 'facileManager', $extra_perm = null, $allowed_capabilities = array(), $type = 'user') {\n\tglobal $fm_name;\n\t\n\t/** Check if super admin */\n\tif (@array_key_exists('do_everything', (array) $allowed_capabilities[$fm_name])) return true;\n\t\t\n\t/** Handle multiple capabilities */\n\tif (is_array($capability)) {\n\t\tforeach ($capability as $cap) {\n\t\t\tif ($type == 'user') {\n\t\t\t\tif (userCan($id, $cap, $module, $extra_perm)) return true;\n\t\t\t} else {\n\t\t\t\tif (groupCan($id, $cap, $module, $extra_perm)) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/** Check capability */\n\tif (@array_key_exists($capability, (array) $allowed_capabilities[$module])) {\n\t\tif (is_array($allowed_capabilities[$module][$capability])) {\n\t\t\t/** Explode module groups */\n\t\t\tforeach ($allowed_capabilities[$module][$capability] as $cap_id) {\n\t\t\t\tif (strpos($cap_id, 'g_') !== false && function_exists('moduleExplodeGroup')) {\n\t\t\t\t\tif ($new_cap = moduleExplodeGroup($cap_id, $capability)) {\n\t\t\t\t\t\t$allowed_capabilities[$module][$capability] = array_merge($allowed_capabilities[$module][$capability], $new_cap);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_array($extra_perm)) {\n\t\t\t\t$found = false;\n\t\t\t\t\n\t\t\t\tforeach ($extra_perm as $needle) {\n\t\t\t\t\tif (in_array((string) $needle, $allowed_capabilities[$module][$capability])) {\n\t\t\t\t\t\t$found = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn $found;\n\t\t\t} else {\n\t\t\t\treturn in_array((string) $extra_perm, $allowed_capabilities[$module][$capability]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Returns if the OS is debian-based or not\n *\n * @since 2.2\n * @package facileManager\n *\n * @param string $os OS to check\n * @return boolean\n */\nfunction isDebianSystem($os) {\n\treturn in_array(strtolower($os), array('debian', 'ubuntu', 'fubuntu', 'raspbian'));\n}\n\n\n/**\n * Run command on remote machines via SSH\n * \n * @since 3.0\n * @package facileManager\n *\n * @param array $host_array Hostname of remote machine\n * @param string $command Command to run on $host\n * @param string $format Be silent or verbose with output\n * @param integer $port Remote port to connect to\n * @param string $client_check 'include' or 'skip' the client file check\n * @param string $response Response to include a close button or plaintext\n * @return boolean\n */\nfunction runRemoteCommand($host_array, $command, $format = 'silent', $port = 22, $client_check = 'include', $response = 'close') {\n\tglobal $fm_name;\n\t\n\t$failures = false;\n\t\n\t/** Convert $host to an array */\n\tif (!is_array($host_array)) {\n\t\t$host_array = array($host_array);\n\t}\n\t\n\t/** Get SSH key */\n\t$ssh_key = getOption('ssh_key_priv', $_SESSION['user']['account_id']);\n\tif (!$ssh_key) {\n\t\treturn ($response == 'close') ? displayResponseClose(noSSHDefined('key')) : noSSHDefined('key');\n\t}\n\n\t$temp_ssh_key = getOption('fm_temp_directory') . '/fm_id_rsa';\n\tif (file_exists($temp_ssh_key)) @unlink($temp_ssh_key);\n\tif (@file_put_contents($temp_ssh_key, $ssh_key) === false) {\n\t\t$message = sprintf(_('Failed: could not load SSH key into %s.'), $temp_ssh_key);\n\t\treturn ($response == 'close') ? displayResponseClose($message) : $message;\n\t}\n\n\t@chmod($temp_ssh_key, 0400);\n\n\t/** Get SSH user */\n\t$ssh_user = getOption('ssh_user', $_SESSION['user']['account_id']);\n\tif (!$ssh_user) {\n\t\tif (file_exists($temp_ssh_key)) @unlink($temp_ssh_key);\n\t\treturn ($response == 'close') ? displayResponseClose(noSSHDefined('user')) : noSSHDefined('user');\n\t}\n\n\t/** Run remote command */\n\tforeach ($host_array as $host) {\n\t\t/** Test the port first */\n\t\tif (!socketTest($host, $port, 10)) {\n\t\t\tif (file_exists($temp_ssh_key)) @unlink($temp_ssh_key);\n\t\t\t$message = sprintf(_('Failed: could not access %s (tcp/%d).'), $host, $port);\n\t\t\treturn ($response == 'close') ? displayResponseClose($message) : $message;\n\t\t}\n\n\t\t/** Test SSH authentication */\n\t\texec(findProgram('ssh') . \" -T -i $temp_ssh_key -o 'StrictHostKeyChecking no' -p $port -l $ssh_user $host 'ls /usr/local/$fm_name/{$_SESSION['module']}/client.php'\", $output, $rc);\n\t\tif ($rc) {\n\t\t\t/** Something went wrong */\n\t\t\tif ($rc == 255 || $client_check == 'include') {\n\t\t\t\t@unlink($temp_ssh_key);\n\t\t\t}\n\n\t\t\t/** Handle error codes */\n\t\t\tif ($rc == 255) {\n\t\t\t\t$message = _('Failed: Could not login via SSH. Check the system logs on the client for the reason.');\n\t\t\t\treturn ($response == 'close') ? displayResponseClose($message) : $message;\n\t\t\t} elseif ($client_check == 'include') {\n\t\t\t\t$message = _('Failed: Client file is not present - is the client software installed?');\n\t\t\t\treturn ($response == 'close') ? displayResponseClose($message) : $message;\n\t\t\t}\n\t\t}\n\t\tunset($output);\n\n\t\texec(findProgram('ssh') . \" -T -i $temp_ssh_key -o 'StrictHostKeyChecking no' -p $port -l $ssh_user $host \\\"$command\\\"\", $output, $rc);\n\t\n\t\tif ($rc) {\n\t\t\t$failures = true;\n\t\t} elseif ($format == 'silent') {\n\t\t\t$output = array();\n\t\t}\n\n\t\tif ($format == 'verbose') {\n\t\t\tif (isset($output)) {\n\t\t\t\techo \"<p><b>$host</b><br />\" . join('<br />', $output) . '</p>';\n\t\t\t}\n\t\t}\n\t}\n\n\t@unlink($temp_ssh_key);\n\t\n\treturn array('failures' => $failures, 'output' => $output);\n}\n\n\n/**\n * Use MySQLi or not\n *\n * @since 3.0\n * @package facileManager\n *\n * @return boolean\n */\nfunction useMySQLi() {\n\tinclude(ABSPATH . 'fm-includes/version.php');\n\t\t\n\tif (function_exists('mysqli_connect')) {\n\t\tif (version_compare(phpversion(), '5.5', '>=') || ! function_exists('mysql_connect')) {\n\t\t\treturn true;\n\t\t} elseif (strpos($fm_version, '-') !== false) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\n/**\n * Send log message to syslog\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $message Message to send\n * @param string $module Module name sending the message\n * @return null\n */\nfunction addSyslogEntry($message, $module) {\n\t$syslog_facility = getOption('syslog_facility');\n\t\n\tif ($syslog_facility) {\n\t\topenlog($module, LOG_PERROR, $syslog_facility);\n\t\t$x = 0;\n\t\tforeach (explode(\"\\n\", $message) as $line) {\n\t\t\tif ($x) {\n\t\t\t\t$line = \"  --> $line\";\n\t\t\t}\n\t\t\tsyslog(LOG_INFO, $line);\n\t\t\t$x++;\n\t\t}\n\t\tcloselog();\n\t}\n}\n\n\n/**\n * Performs a recursive is_writable\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $dir Top level directory to check\n * @param string|array $exclude Filenames to exclude\n * @return boolean\n */\nfunction is_writable_r($dir, $exclude = array()) {\n\tif (!is_array($exclude)) {\n\t\t$exclude = array($exclude);\n\t}\n\tif (is_dir($dir)) {\n\t\tif (is_writable($dir)) {\n\t\t\t$objects = scandir($dir);\n\t\t\tforeach ($objects as $object) {\n\t\t\t\tif ($object != '.' && $object != '..') {\n\t\t\t\t\tif (!is_writable_r($dir . DIRECTORY_SEPARATOR . $object) && !in_array($object, $exclude)) return false;\n\t\t\t\t\telse continue;\n\t\t\t\t}\n\t\t\t}    \n\t\t\treturn true;    \n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} elseif (file_exists($dir)) {\n\t\treturn is_writable($dir);\n\t}\n}\n\n\n/**\n * Downloads a file from the fM website\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $file File to download\n * @return array\n */\nfunction downloadfMFile($file) {\n\tglobal $__FM_CONFIG;\n\t\n\t$message = \"Downloading $file\\n\";\n\t\n\tlist($tmp_dir, $created) = clearUpdateDir();\n\tif (!$created) {\n\t\treturn sprintf('<p>' . _('%s and %s need to be writeable by %s in order for the core and modules to be updated automatically.') . \"</p>\\n\", $tmp_dir, ABSPATH, $__FM_CONFIG['webserver']['user_info']['name']);\n\t}\n\n\t$local_file = $tmp_dir . basename($file);\n\t@unlink($local_file);\n\t\n\t$fh = fopen($local_file, 'w+');\n\t$options = array(\n\t\tCURLOPT_URL\t\t\t\t=> $file,\n\t\tCURLOPT_TIMEOUT\t\t\t=> 3600,\n\t\tCURLOPT_HEADER\t\t\t=> false,\n\t\tCURLOPT_FOLLOWLOCATION\t=> true,\n\t\tCURLOPT_SSL_VERIFYPEER  => false,\n\t\tCURLOPT_RETURNTRANSFER  => true\n\t);\n\t\n\t$proxy = array();\n\tif (getOption('proxy_enable')) {\n\t\t$proxyauth = getOption('proxy_user') . ':' . getOption('proxy_pass');\n\t\tif ($proxyauth == ':') $proxyauth = null;\n\t\t$proxy = array(\n\t\t\tCURLOPT_PROXY => getOption('proxy_host') . ':' . getOption('proxy_port'),\n\t\t\tCURLOPT_PROXYUSERPWD => $proxyauth\n\t\t);\n\t}\n\t$ch = curl_init();\n\tcurl_setopt_array($ch, ($options + $proxy));\n\t$result = curl_exec($ch);\n\t@fputs($fh, $result);\n\t@fclose($fh);\n\tif ($result === false || curl_getinfo($ch, CURLINFO_HTTP_CODE) != 200) {\n\t\t$message .= \"Unable to download file.\\n\";\n\t\t$message .= \"\\n\" . curl_error($ch) . \"\\n\";\n\t\t\n\t\tcurl_close($ch);\n\t\t$local_file = false;\n\t}\n\t\n\tcurl_close($ch);\n\t\n\treturn array($message, $local_file);\n}\n\n\n/**\n * Extracts files\n *\n * @since 3.0\n * @package facileManager\n *\n * @param array $package Package names to extract\n */\nfunction extractPackage($package) {\n\t$message = null;\n\t\n\tif (!is_array($package)) {\n\t\t$package = array($package);\n\t}\n\t\n\tforeach ($package as $filename) {\n\t\t$message .= sprintf(_('Extracting %s') . \"\\n\", basename($filename));\n\n\t\t$tmp_dir = dirname($filename);\n\t\tif (!file_exists($filename)) {\n\t\t\treturn sprintf(_('%s does not exist!') . \"\\n\", $filename);\n\t\t}\n\n\t\t$path_parts = pathinfo($filename);\n\t\t$untar_opt = '-C ' . $tmp_dir . ' -x';\n\t\tswitch($path_parts['extension']) {\n\t\t\tcase 'bz2':\n\t\t\t\t$untar_opt .= 'j';\n\t\t\t\tbreak;\n\t\t\tcase 'tgz':\n\t\t\tcase 'gz':\n\t\t\t\t$untar_opt .= 'z';\n\t\t\t\tbreak;\n\t\t}\n\t\t$untar_opt .= 'f';\n\n\t\t$command = findProgram('tar') . \" $untar_opt $filename\";\n\t\t@system($command, $retval);\n\t\tif ($retval) {\n\t\t\t$message .= sprintf(_('Failed to extract %s!') . \"\\n\", $filename);\n\t\t\treturn $message;\n\t\t}\n\t}\n\t\t\n\t/** Move files */\n\t$message .= sprintf(_('Moving files to %s') . \"\\n\", ABSPATH);\n\t$command = findProgram('cp') . \" -r $tmp_dir/facileManager/server/* \" . ABSPATH;\n\t@system($command, $retval);\n\tif ($retval) {\n\t\t$message .= _('Failed to save files!') . \"\\n\";\n\t}\n\t\n\tif ($tmp_dir != '/') {\n\t\t@system(findProgram('rm') . \" -rf $tmp_dir\");\n\t}\n\t\n\treturn $message;\n}\n\n\n/**\n * Clears out the temporary update directory\n *\n * @since 3.0\n * @package facileManager\n *\n * @return array Temp directory and if it was created\n */\nfunction clearUpdateDir() {\n\treturn createTempDir('fm_updates');\n}\n\n\n/**\n * Generic mailing function\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $sendto Email address to send to\n * @param string $subject Email subject\n * @param string $body Email body\n * @param string $altbody Email alternate body (plaintext)\n * @param string/array $from From name and address\n * @param array $images Images to embed in the email\n * @return boolean\n */\nfunction sendEmail($sendto, $subject, $body, $altbody = null, $from = null, $images = null) {\n\tglobal $fm_name;\n\n\t$phpmailer_file = ABSPATH . 'fm-modules' . DIRECTORY_SEPARATOR . $fm_name . DIRECTORY_SEPARATOR . 'classes' . DIRECTORY_SEPARATOR . 'class.phpmailer.php';\n\tif (!file_exists($phpmailer_file)) {\n\t\treturn _('Unable to send email - PHPMailer class is missing.');\n\t} else {\n\t\trequire_once($phpmailer_file);\n\t}\n\n\t$mail = new PHPMailer;\n\n\t/** Set PHPMailer options from database */\n\t$mail->Host = getOption('mail_smtp_host');\n\t$mail->SMTPAuth = getOption('mail_smtp_auth');\n\tif ($mail->SMTPAuth) {\n\t\t$mail->Username = getOption('mail_smtp_user');\n\t\t$mail->Password = getOption('mail_smtp_pass');\n\t}\n\tif (getOption('mail_smtp_tls')) $mail->SMTPSecure = 'tls';\n\n\tif ($from) {\n\t\tif (is_array($from)) {\n\t\t\tlist($from_name, $from_addr) = $from;\n\t\t\t$mail->FromName = $from_name;\n\t\t} else {\n\t\t\t$from_addr = $from;\n\t\t}\n\t\t$mail->From = $from_addr;\n\t} else {\n\t\t$mail->FromName = $fm_name;\n\t\t$mail->From = getOption('mail_from');\n\t}\n\t$mail->AddAddress($sendto);\n\n\t$mail->Subject = $subject;\n\t$mail->Body = $body;\n\tif ($altbody) {\n\t\t$mail->AltBody = $altbody;\n\t}\n\t$mail->IsHTML(true);\n\t\n\tif (is_array($images)) {\n\t\tforeach ($images as $filename) {\n\t\t\t$image_parts = pathinfo($filename);\n\t\t\t$mail->AddEmbeddedImage($filename, $image_parts['filename'], $image_parts['basename'], 'base64', \"image/{$image_parts['extension']}\");\n\t\t}\n\t}\n\n\t$mail->IsSMTP();\n\n\tif(!$mail->Send()) {\n\t\treturn sprintf(_('Mailer Error: %s'), $mail->ErrorInfo);\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Create a temporary directory\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $subdir Sub directory name\n * @param string $append String to append to directory name\n * @return array Temp directory and if it was created\n */\nfunction createTempDir($subdir, $append = null) {\n\t$created = true;\n\t\n\tif ($append) {\n\t\t$subdir .= ($append == 'datetime') ? '_' . date(\"YmdHis\") : \"_$append\";\n\t}\n\t\n\t$fm_temp_directory = '/' . ltrim(getOption('fm_temp_directory'), '/');\n\t$tmp_dir = rtrim($fm_temp_directory, '/') . \"/$subdir/\";\n\tsystem('rm -rf ' . $tmp_dir);\n\tif (!is_dir($tmp_dir)) {\n\t\tif (!@mkdir($tmp_dir, 0777, true)) {\n\t\t\t$created = false;\n\t\t}\n\t}\n\n\treturn array($tmp_dir, $created);\n}\n\n\n/**\n * Displays a close button in the response\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $message Error message to include\n * @return string\n */\nfunction displayResponseClose($message) {\n\treturn sprintf('<div id=\"response_close\"><p><i class=\"fa fa-close close\" aria-hidden=\"true\" title=\"%s\"></i></p></div><p class=\"error\">%s</p>', _('Close'), $message);\n}\n\n\n/**\n * Generates URI params from current params\n *\n * @since 3.0\n * @package facileManager\n *\n * @param array $params Params to exclude or include\n * @param string $direction Exclude or include\n * @param string $character Starting character\n * @param array $null_params Params to return null with\n * @return string\n */\nfunction generateURIParams($params = array(), $direction = 'include', $character = '?', $null_params = array()) {\n\t$uri_params = null;\n\t\n\tforeach ($GLOBALS['URI'] as $param => $val) {\n\t\tif (in_array($param, (array) $null_params)) return null;\n\t\tif ($direction == 'include') {\n\t\t\tif (!in_array($param, (array) $params)) continue;\n\t\t} else {\n\t\t\tif (in_array($param, (array) $params)) continue;\n\t\t}\n\t\t$uri_params[] = \"$param=$val\";\n\t}\n\tif ($uri_params) $uri_params = $character . implode('&', $uri_params);\n\t\n\treturn $uri_params;\n}\n\n\n/**\n * Builds the page sub menu items\n *\n * @since 3.0\n * @package facileManager\n *\n * @param array $selected Selected option type\n * @param string $avail_types Available option types\n * @param array $null_params\n * @param array $params\n * @param string $direction\n * @param string $character\n * @return string\n */\nfunction buildSubMenu($selected, $avail_types, $null_params = array(), $params = array('type', 'action', 'id', 'status'), $direction = 'exclude', $character = '&') {\n\tglobal $__FM_CONFIG;\n\t\n\t$menu_selects = null;\n\t\n\t$uri_params = generateURIParams($params, $direction, $character, $null_params);\n\t\n\tforeach ($avail_types as $general => $type) {\n\t\t$select = ($selected == $general) ? ' class=\"selected\"' : '';\n\t\t$menu_selects .= \"<span$select><a$select href=\\\"{$GLOBALS['basename']}?type=$general$uri_params\\\">\" . ucfirst($type) . \"</a></span>\\n\";\n\t}\n\t\n\treturn '<div id=\"configtypesmenu\">' . $menu_selects . '</div>';\n}\n\n\n/**\n * Formats an error message\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $message Error message to format\n * @param string $option Display option (sql | null)\n * @return string\n */\nfunction formatError($message, $option = null) {\n\tglobal $fmdb;\n\t\n\t$addl_text = null;\n\t\n\tif ($option == 'sql') {\n\t\t$addl_text = ($fmdb->last_error) ? '<br />' . $fmdb->last_error : null;\n\t}\n\t\n\treturn $message . $addl_text;\n}\n\n\n/**\n * Builds the server listing in a dropdown menu\n *\n * @since 3.0\n * @package facileManager\n *\n * @param integer $server_serial_no Selected server serial number\n * @param array $available_servers Available servers for the list\n * @param array $class Additional classes to pass to the div\n * @return string\n */\nfunction buildServerSubMenu($server_serial_no = 0, $available_servers = null, $class = null) {\n\tif (!$available_servers) $available_servers = availableServers();\n\t$server_list = buildSelect('server_serial_no', 'server_serial_no', $available_servers, $server_serial_no, 1, null, false, 'this.form.submit()');\n\t\n\t$hidden_inputs = null;\n\tforeach ($GLOBALS['URI'] as $param => $value) {\n\t\tif ($param == 'server_serial_no') continue;\n\t\t$hidden_inputs .= '<input type=\"hidden\" name=\"' . $param . '\" value=\"' . $value . '\" />' . \"\\n\";\n\t}\n\t\n\t$class = $class ? 'class=\"' . join(' ', (array) $class) . '\"' : null;\n\n\t$return = <<<HTML\n\t<div id=\"configtypesmenu\" $class>\n\t\t<form action=\"{$GLOBALS['basename']}\" method=\"GET\">\n\t\t$hidden_inputs\n\t\t$server_list\n\t\t</form>\n\t</div>\nHTML;\n\n\treturn $return;\n}\n\n\n/**\n * Returns an array of servers and groups\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $server_id_type What server ID should be used (serial|id)\n * @param array $include What items to include\n * @param string $module Module name to limit list to\n * @return array\n */\nfunction availableServers($server_id_type = 'serial', $include = array('all'), $module = null) {\n\tglobal $fmdb, $__FM_CONFIG;\n\t\n\t$server_array = array();\n\t\n\tif (!$module) {\n\t\t$module = $_SESSION['module'];\n\t}\n\t\n\tif (!is_array($include)) {\n\t\t$include = (array) $include;\n\t}\n\t\n\tif (in_array('all', $include)) {\n\t\t$server_array[0][] = null;\n\t\t$server_array[0][0][] = _('All Servers');\n\t\t$server_array[0][0][] = '0';\n\t}\n\t\n\tif (in_array('all', $include) || in_array('groups', $include)) {\n\t\t$j = 0;\n\t\t/** Server Groups */\n\t\t$result = basicGetList('fm_' . $__FM_CONFIG[$module]['prefix'] . 'server_groups', 'group_name', 'group_');\n\t\tif ($fmdb->num_rows && !$fmdb->sql_errors) {\n\t\t\t$server_array[_('Groups')][] = null;\n\t\t\tforeach ($fmdb->last_result as $results) {\n\t\t\t\t$server_array[_('Groups')][$j][] = $results->group_name;\n\t\t\t\t$server_array[_('Groups')][$j][] = 'g_' . $results->group_id;\n\t\t\t\t$j++;\n\t\t\t}\n\t\t}\n\t}\n\tif (in_array('all', $include) || in_array('servers', $include)) {\n\t\t$j = 0;\n\t\t/** Server names */\n\t\t$result = basicGetList('fm_' . $__FM_CONFIG[$module]['prefix'] . 'servers', 'server_name', 'server_');\n\t\tif ($fmdb->num_rows && !$fmdb->sql_errors) {\n\t\t\t$server_array[_('Servers')][] = null;\n\t\t\tforeach ($fmdb->last_result as $results) {\n\t\t\t\tif (property_exists($results, 'server_menu_display') && $results->server_menu_display == 'exclude') continue;\n\t\t\t\t$server_array[_('Servers')][$j][] = $results->server_name;\n\t\t\t\tif ($server_id_type == 'serial') {\n\t\t\t\t\t$server_array[_('Servers')][$j][] = $results->server_serial_no;\n\t\t\t\t} elseif ($server_id_type == 'id') {\n\t\t\t\t\t$server_array[_('Servers')][$j][] = 's_' . $results->server_id;\n\t\t\t\t}\n\t\t\t\t$j++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn $server_array;\n}\n\n\n/**\n * Returns a SSH error message\n *\n * @since 3.0\n * @package facileManager\n *\n * @param string $type What is not defined\n * @return array\n */\nfunction noSSHDefined($type = 'user') {\n\tif ($type == 'user') {\n\t\treturn sprintf(_('Failed: SSH user is not defined. You can define the user in the <a href=\"%s\">Settings</a>.'), getMenuURL(_('General')));\n\t}\n\tif ($type == 'key') {\n\t\treturn sprintf(_('Failed: SSH key is not defined. You can generate a keypair in the <a href=\"%s\">Settings</a>.'), getMenuURL(_('General')));\n\t}\n}\n\n\n/**\n * Returns the branding logo\n *\n * @since 3.0\n * @package facileManager\n *\n * @return string\n */\nfunction getBrandLogo($size = 'sm_brand_img') {\n\tglobal $fm_name;\n\t\n\t$branding_logo = getOption($size);\n\t\n\tif (!$branding_logo) {\n\t\t$branding_logo = $GLOBALS['RELPATH'] . 'fm-modules/' . $fm_name . '/images/fm.png';\n\t}\n\t\n\treturn $branding_logo;\n}\n\n\n/**\n * Automatically run remote commands\n *\n * @since 3.3\n * @package facileManager\n *\n * @param object $server_info Server info object from db query\n * @param array $command_args Action and command arguments\n * @param string $output_type Return as popup or something else (popup|return)\n * @return string\n */\nfunction autoRunRemoteCommand($server_info, $command_args, $output_type = 'popup') {\n\textract(get_object_vars($server_info), EXTR_SKIP);\n\n\t/** Disabled server */\n\tif ($server_status != 'active') {\n\t\treturn null;\n\t}\n\t\n\tif (is_array($command_args)) {\n\t\tlist($action, $command_args) = $command_args;\n\t}\n\n\t/** Get zone data via ssh */\n\tif ($server_update_method == 'ssh') {\n\t\t$server_remote = runRemoteCommand($server_name, 'sudo php /usr/local/facileManager/' . $_SESSION['module'] . '/client.php ' . $command_args, 'return', $server_update_port, 'include', 'plaintext');\n\t} elseif (in_array($server_update_method, array('http', 'https'))) {\n\t\t/** Get data via http(s) */\n\t\t/** Test the port first */\n\t\tif (socketTest($server_name, $server_update_port, 10)) {\n\t\t\t/** Remote URL to use */\n\t\t\t$url = $server_update_method . '://' . $server_name . ':' . $server_update_port . '/fM/reload.php';\n\n\t\t\t/** Data to post to $url */\n\t\t\t$post_data = array('action' => $action,\n\t\t\t\t'serial_no' => $server_serial_no,\n\t\t\t\t'module' => $_SESSION['module'],\n\t\t\t\t'command_args' => $command_args\n\t\t\t);\n\n\t\t\t$server_remote = getPostData($url, $post_data);\n\t\t\tif (isSerialized($server_remote)) {\n\t\t\t\t$server_remote = unserialize($server_remote);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (isset($server_remote) && $server_remote !== false) {\n\t\tif (is_array($server_remote)) {\n\t\t\tif (isset($server_remote['failures']) && !$server_remote['failures']) {\n\t\t\t\tif (@isSerialized($server_remote['output'][0])) {\n\t\t\t\t\t$server_remote['output'] = unserialize($server_remote['output'][0]);\n\t\t\t\t}\n\t\t\t\treturn $server_remote['output'];\n\t\t\t}\n\t\t} else {\n\t\t\treturn (strpos($server_remote, 'popup') === false || $output_type != 'popup') ? $server_remote : buildPopup('header', _('Error')) . '<p>' . $server_remote . '</p>' . buildPopup('footer', _('OK'), array('cancel_button' => 'cancel'));\n\t\t}\n\t} else {\n\t\t/** Return if the items did not get dumped from the server */\n\t\tif (!isset($server_remote['output'])) {\n\t\t\t$return = sprintf('<p>%s</p>', __('The data from the server could not be retrieved or managed. Possible causes include:'));\n\t\t\t$return .= sprintf('<ul><li>%s</li><li>%s</li></ul>',\n\t\t\t\t\t__('The update ports on the server are not accessible'),\n\t\t\t\t\t__('This server is updated via cron (only SSH and http/https are supported)'));\n\t\t\treturn $return;\n\t\t}\n\t}\n}\n\n\n/**\n * Returns the ID of the default super admin\n *\n * @since 3.3.1\n * @package facileManager\n *\n * @return integer\n */\nfunction getDefaultAdminID() {\n\tglobal $fmdb;\n\t\n\t$result = $fmdb->query(\"SELECT user_id FROM `fm_users` WHERE `user_auth_type`=1 ORDER BY user_id ASC LIMIT 1\");\n\n\treturn $fmdb->last_result[0]->user_id;\n}\n\n\n/**\n * Returns the first array key\n *\n * @since 4.0\n * @package facileManager\n *\n * @return mixed\n */\nif (!function_exists('array_key_first')) {\n\tfunction array_key_first(array $arr) {\n\t\tforeach($arr as $key => $unused) {\n\t\t\treturn $key;\n\t\t}\n\t\treturn null;\n\t}\n}\n\n\n/**\n * Throws an API error\n *\n * @since 4.0\n * @package facileManager\n *\n * @param integer $code Error code to throw\n * @return mixed\n */\nfunction throwAPIError($code) {\n\tswitch ($code) {\n\t\tcase 1000:\n\t\tcase 1001:\n\t\tcase 1002:\n\t\t\t$message = _('Permission denied.');\n\t\t\tbreak;\n\t\tcase 1004:\n\t\t\t$message = _('The record already exists.');\n\t\t\tbreak;\n\t\tcase 1005:\n\t\t\t$message = _('The record was not found.');\n\t\t\tbreak;\n\t\tcase 3000:\n\t\t\t$message = _('Dryrun was successful.');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$code = 2000;\n\t\t\t$message = _('Something was wrong with the request.');\n\t\t\tbreak;\n\t\t}\n\treturn array($code, $message);\n}\n\n?>\n", "<?php\n/*\n +-------------------------------------------------------------------------+\n | Copyright (C) 2013-2019 The facileManager Team                          |\n |                                                                         |\n | This program is free software; you can redistribute it and/or           |\n | modify it under the terms of the GNU General Public License             |\n | as published by the Free Software Foundation; either version 2          |\n | of the License, or (at your option) any later version.                  |\n |                                                                         |\n | This program is distributed in the hope that it will be useful,         |\n | but WITHOUT ANY WARRANTY; without even the implied warranty of          |\n | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           |\n | GNU General Public License for more details.                            |\n +-------------------------------------------------------------------------+\n | facileManager: Easy System Administration                               |\n +-------------------------------------------------------------------------+\n | http://www.facilemanager.com/                                           |\n +-------------------------------------------------------------------------+\n | Processes admin logs page                                               |\n +-------------------------------------------------------------------------+\n*/\n\nif (!currentUserCan('view_logs')) unAuth();\n\nprintHeader();\n@printMenu();\n\n$response = isset($response) ? $response : null;\n\nextract($_REQUEST);\n$search_sql = null;\n\n/** Module search */\nif (isset($log_search_module) && is_array($log_search_module) && !in_array('All Modules', $log_search_module)) {\n\t$search_sql .= 'AND log_module IN (\"' . join('\",\"', $log_search_module) . '\") ';\n}\n/** User search */\n$default_timezone = getOption('timezone', $_SESSION['user']['account_id']);\nif (isset($log_search_user) && is_array($log_search_user) && !in_array('0', $log_search_user)) {\n\t$search_sql .= 'AND user_login IN (\"' . join('\",\"', $log_search_user) . '\") ';\n}\n/** Begin date search */\nif (isset($log_search_date_b) && !empty($log_search_date_b)) {\n\t$search_sql .= \"AND log_timestamp > \" . strtotime($log_search_date_b . ' 00:00:00' . $default_timezone) . ' ';\n}\n/** End date search */\nif (isset($log_search_date_e) && !empty($log_search_date_e)) {\n\t$search_sql .= \"AND log_timestamp < \" . strtotime($log_search_date_e . ' 23:23:59' . $default_timezone) . ' ';\n}\n/** Query search */\nif (isset($log_search_query) && !empty($log_search_query)) {\n\t$search_sql .= \"AND log_data LIKE '%\" . sanitize($log_search_query) . \"%' \";\n}\n\n$query = \"SELECT * FROM fm_logs WHERE account_id IN (0,{$_SESSION['user']['account_id']}) $search_sql ORDER BY log_timestamp DESC\";\n$fmdb->query($query);\n$log_count = $fmdb->num_rows;\n\n$total_pages = ceil($log_count / $_SESSION['user']['record_count']);\nif ($page > $total_pages) $page = $total_pages;\nif ($page < 1) $page = 1;\n$pagination = displayPagination($page, $total_pages);\n\n$log_search_module = isset($log_search_module) ? $log_search_module : _('All Modules');\n$log_search_user = isset($log_search_user) ? $log_search_user : 0;\n\n$module_list = buildSelect('log_search_module', 1, buildModuleList(), $log_search_module, 4, null, true);\n$user_list = buildSelect('log_search_user', 1, buildUserList(), $log_search_user, 4, null, true);\n\n$table_info = array('class' => 'display_results');\n$title_array = array(_('Timestamp'), _('Module'), _('User'), array('title' => _('Message'), 'style' => 'width: 50%;'));\n$header = displayTableHeader($table_info, $title_array);\n\necho printPageHeader($response);\nprintf('<form class=\"search-form\" id=\"date-range\" action=\"\" method=\"get\">\n\t\t<table class=\"log_search_form\" align=\"center\">\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>%s</td>\n\t\t\t\t\t<td>%s</td>\n\t\t\t\t\t<td><input name=\"log_search_date_b\" value=\"%s\" type=\"text\" class=\"datepicker\" placeholder=\"%s\" /></td>\n\t\t\t\t\t<td><input name=\"log_search_date_e\" value=\"%s\" type=\"text\" class=\"datepicker\" placeholder=\"%s\" /></td>\n\t\t\t\t\t<td><input type=\"text\" name=\"log_search_query\" value=\"%s\" placeholder=\"%s\" /></td>\n\t\t\t\t\t<td><input value=\"%s\" type=\"submit\" class=\"button\" /></td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t\t</form>\n\t\t%s %s',\n\t\t$module_list, $user_list,\n\t\t$log_search_date_b, _('Date Begin'),\n\t\t$log_search_date_e, _('Date End'),\n\t\t$log_search_query, _('Search Text'),\n\t\t_('Search'),\n\t\t$pagination, $header\n\t\t);\n\ndisplayLogData($page, $search_sql);\n\necho <<<HTML\n\t\t\t</tbody>\n\t\t</table>\n\nHTML;\n\nprintFooter(null, $output);\n\n\nfunction displayLogData($page, $search_sql = null) {\n\tglobal $fmdb, $fm_name, $__FM_CONFIG;\n\t\n\t/** Get datetime formatting */\n\t$date_format = getOption('date_format', $_SESSION['user']['account_id']);\n\t$time_format = getOption('time_format', $_SESSION['user']['account_id']);\n\t\n\t$query = \"SELECT * FROM fm_logs WHERE account_id IN (0,{$_SESSION['user']['account_id']}) $search_sql ORDER BY log_timestamp DESC LIMIT \" . (($page - 1) * $_SESSION['user']['record_count']) . \", {$_SESSION['user']['record_count']}\";\n\t$fmdb->query($query);\n\t$result = $fmdb->last_result;\n\t$log_count = $fmdb->num_rows;\n\t\n\tif (!$log_count) {\n\t\tprintf('<tr><td colspan=\"4\"><p class=\"no_results\">%s</p></td></tr>', _('There are no log results.'));\n\t}\n\n\tfor ($i=0; $i<$log_count; $i++) {\n\t\textract(get_object_vars($result[$i]), EXTR_OVERWRITE);\n\t\t$log_data = nl2br(wordwrap($log_data, 80, \"\\n\", true));\n\t\tif (isset($_POST['log_search_query'])) $log_data = str_replace($_POST['log_search_query'], '<span class=\"highlighted\">' . $_POST['log_search_query'] . '</span>', $log_data);\n\t\t$user_name = is_numeric($user_login) ? $fm_name : $user_login;\n\t\t$log_timestamp = date($date_format . ' ' . $time_format . ' e', $log_timestamp);\n\t\techo <<<ROW\n\t\t\t\t<tr>\n\t\t\t\t\t<td>$log_timestamp</td>\n\t\t\t\t\t<td>$log_module</td>\n\t\t\t\t\t<td>$user_name</td>\n\t\t\t\t\t<td>$log_data</td>\n\t\t\t\t</tr>\n\nROW;\n\t}\n}\n\nfunction buildModuleList() {\n\tglobal $fmdb;\n\t\n\t$array[0] = array_fill(0, 2, _('All Modules'));\n\t\n\t$query = \"SELECT DISTINCT log_module FROM fm_logs WHERE account_id IN (0,{$_SESSION['user']['account_id']})\";\n\t$list = $fmdb->get_results($query);\n\tif ($fmdb->num_rows) {\n\t\tfor ($i=0; $i<$fmdb->num_rows; $i++) {\n\t\t\t$array[$i+1] = array_fill(0, 2, $list[$i]->log_module);\n\t\t}\n\t}\n\t\n\treturn $array;\n}\n\nfunction buildUserList() {\n\tglobal $fmdb;\n\t\n\t$array[0] = array(_('All Users'), '0');\n\t\n\t$query = \"SELECT user_id,user_login FROM fm_users WHERE account_id={$_SESSION['user']['account_id']} ORDER BY user_login\";\n\t$list = $fmdb->get_results($query);\n\tif ($fmdb->num_rows) {\n\t\tfor ($i=0; $i<$fmdb->num_rows; $i++) {\n\t\t\t$array[$i+1][] = $list[$i]->user_login;\n\t\t\t$array[$i+1][] = $list[$i]->user_login;\n\t\t}\n\t}\n\t\n\treturn $array;\n}\n\n?>\n"], "filenames": ["server/fm-includes/version.php", "server/fm-modules/facileManager/change.log", "server/fm-modules/facileManager/classes/class_logins.php", "server/fm-modules/facileManager/classes/class_users.php", "server/fm-modules/facileManager/functions.php", "server/fm-modules/facileManager/pages/admin-logs.php"], "buggy_code_start_loc": [27, 0, 265, 256, 219, 31], "buggy_code_end_loc": [28, 0, 266, 258, 223, 41], "fixing_code_start_loc": [27, 1, 265, 256, 219, 30], "fixing_code_end_loc": [28, 7, 266, 261, 225, 39], "type": "CWE-80", "message": "facileManager is a modular suite of web apps built with the sysadmin in mind. For the facileManager web application versions 4.5.0 and earlier, we have found that XSS was present in almost all of the input fields as there is insufficient input validation.", "other": {"cve": {"id": "CVE-2024-24571", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-31T23:15:08.110", "lastModified": "2024-02-07T17:25:31.677", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "facileManager is a modular suite of web apps built with the sysadmin in mind. For the facileManager web application versions 4.5.0 and earlier, we have found that XSS was present in almost all of the input fields as there is insufficient input validation."}, {"lang": "es", "value": "facileManager es un conjunto modular de aplicaciones web creadas pensando en el administrador del sistema. Para las versiones 4.5.0 y anteriores de la aplicaci\u00f3n web facileManager, descubrimos que XSS estaba presente en casi todos los campos de entrada porque no hab\u00eda suficiente validaci\u00f3n de entrada."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-80"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:facilemanager:facilemanager:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.5.1", "matchCriteriaId": "E0E110C6-3BD9-442C-9641-29531155410B"}]}]}], "references": [{"url": "https://github.com/WillyXJ/facileManager/commit/0aa850d4b518f10143a4c675142b15caa5872877", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/WillyXJ/facileManager/security/advisories/GHSA-h7w3-xv88-2xqj", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/WillyXJ/facileManager/commit/0aa850d4b518f10143a4c675142b15caa5872877"}}