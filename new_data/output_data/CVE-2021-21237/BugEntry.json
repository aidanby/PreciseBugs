{"buggy_code": ["# Git LFS Changelog\n\n## 2.13.1 (11 Dec 2020)\n\nThis release fixes a bug in our build tooling that prevents our release process\nfrom working properly.  This release is otherwise identical to 2.13.0.\n\n### Misc\n\n* Makefile: don't fail the second time macOS builds are built #4341 (@bk2204)\n\n## 2.13.0 (10 Dec 2020)\n\nThis release introduces several new features, such as the `--above` option to\n`git lfs migrate import` and support for `socks5h` proxies.  In addition, many\nbugs have been fixed and several miscellaneous fixes have been included.\n\nUnless someone steps up to fix and maintain NTLM support, this will be the last\nGit LFS release to support NTLM.  See #4247 for more details.  Note that Git LFS\nsupports Kerberos as well, which is far more secure and may be a viable\nreplacement in many situations.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @EliRibble for adding support for the `--above` option to `git lfs migrate import`\n* @andrewshadura for adding support for the `GIT_LFS_SKIP_PUSH` environment variable\n* @sinbad for fixing problems with retaining objects used by stashes\n* @tklauser for cleaning up our use of error constants in the code\n\n### Features\n\n* Add --above parameter to 'migrate import'. #4276 (@EliRibble)\n* Add GIT_LFS_SKIP_PUSH to allow skipping the pre-push hook #4202 (@andrewshadura)\n* lfshttp: add support for socks5h proxies #4259 (@bk2204)\n* Add manual pages to release assets #4230 (@bk2204)\n* Honor GIT_WORK_TREE #4269 (@bk2204)\n\n### Bugs\n\n* Make git lfs migrate import handle missing extensions #4318 (@bk2204)\n* fs: don't panic when using a too-short object ID to push #4307 (@bk2204)\n* Fix pattern matching for .gitattributes #4301 (@bk2204)\n* config: map missing port to default for HTTP key lookups #4282 (@bk2204)\n* tools: use IoctlFileClone from golang.org/x/sys/unix #4261 (@tklauser)\n* tools/util_darwin.go: Remove use of direct syscalls #4251 (@stanhu)\n* tools: always force a UTF-8 locale for cygpath #4231 (@bk2204)\n* prune: fix deleting objects referred to by stashes #4209 (@sinbad)\n\n### Misc\n\n* migrate import: warn about refs on case insensitive file systems #4332 (@larsxschneider)\n* Drop obsolete OS support #4328 (@bk2204)\n* tools: use ERROR_SHARING_VIOLATION const from golang.org/x/sys/windows #4291 (@tklauser)\n* pull: gracefully handle merge conflicts #4289 (@bk2204)\n* script/upload: avoid using Ruby's URI.escape #4266 (@bk2204)\n* add documentation of security bug report process #4244 (@chrisd8088)\n\n## 2.12.1 (4 Nov 2020)\n\nThis release introduces a security fix for Windows systems, which has been\nassigned CVE-2020-27955.\n\nOn Windows, if Git LFS operates on a malicious repository with a git.bat or\ngit.exe file in the current directory, that program is executed, permitting the\nattacker to execute arbitrary code.  This security problem does not affect Unix\nsystems.\n\nThis occurs because on Windows, Go includes (and prefers) the current directory\nwhen the name of a command run does not contain a directory separator.  This has\nbeen solved by always using PATH to pre-resolve paths before handing them to Go.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @dawidgolunski for reporting this to us responsibly\n\n### Bugs\n\n* subprocess: avoid using relative program names (@bk2204)\n\n## 2.12.0 (1 Sep 2020)\n\nThis release introduces several new features, such as support for the SHA-256\nrepositories coming in a future version of Git, restored support for Go 1.11,\nthe ability to read the contents of .lfsconfig from the repository, signed and\nnotarized binaries on macOS, and pre-built 32-bit ARM binaries on Linux.  In\naddition, several bugs have been fixed and miscellaneous fixes included.\n\nNote that macOS releases are now shipped as zip files, not tarballs, since it is\nnot possible to notarize tarballs.  macOS releases are now also built on macOS,\nso `git lfs dedup` should now function.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @saracen for adding support for ARM binaries\n* @mversluys for improving locking support\n* @cccfeng for updating our documentation to make it more readable\n* @bluekeyes for improving performance and tracing\n* @gertcuykens for adding missing parts of our documentation\n\n### Features\n\n* config: optionally read .lfsconfig from the repository #4200 (@bk2204)\n* Support SHA-256 repositories #4186 (@bk2204)\n* allow Go 1.11 builds by using WaitStatus.ExitStatus() #4183 (@chrisd8088)\n* add --worktree option to install and uninstall commands #4159 (@chrisd8088)\n* Sign and notarize binaries on macOS #4143 (@bk2204)\n* Makefile: add linux arm build and release targets #4126 (@saracen)\n* Allow locking and unlocking non-existent files #3992 (@mversluys)\n\n### Bugs\n\n* docs/api/locking: add an explicit <br> #4208 (@cccfeng)\n* Fix hang when the user lacks permissions #4207 (@bk2204)\n* Don't mark unlocked files that aren't lockable as read-only #4171 (@bk2204)\n* locking: make patterns with slashes work on Windows #4139 (@bk2204)\n* git: consider full refspec when determining seen refs #4133 (@bk2204)\n\n### Misc\n\n* Fix Windows CI #4199 (@bk2204)\n* Fix testsuite when working with non-master default branch #4174 (@bk2204)\n* git: improve performance of remote ref listing #4176 (@bluekeyes)\n* subprocess: trace all command execution #4175 (@bluekeyes)\n* Update git-lfs-migrate.1.ronn #3869 (@gertcuykens)\n* t: use repo v1 with extensions #4177 (@bk2204)\n* Makefile: ensure temp Go modules can be deleted #4157 (@chrisd8088)\n* Improve test suite robustness via environment #4132 (@bk2204)\n\n## 2.11.0 (8 May 2020)\n\nThis release introduces several new features, such as better support for unnamed\nlocal paths and URLs as remotes, support for `submodule.recurse`, exponential\nbackoff on failure, and support for renegotiation.  In addition, numerous bugs\nhave been fixed and miscellaneous issues have been addressed.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @bluekeyes for adding support for exponential backoff\n* @pluehne for adding support for `submodule.recurse`\n* @Electric26 for fixing the default behavior of a prompt\n* @nataliechen1 for fixing certain upload retry failures\n* @shalashik for fixing a panic during cherry-pick\n* @swisspol for updating our documentation to reflect supported `.lfsconfig`\n  keys\n* @dan2468 for updating the copyright year\n\n### Features\n\n* Allow literal local paths as remotes #4119 (@bk2204)\n* pre-push: find named remote for URL if possible #4103 (@bk2204)\n* tq: add exponential backoff for retries #4097 (@bluekeyes)\n* migrate import: set text to unspecified for excluded fields #4068 (@bk2204)\n* Update list of distros for packagecloud.io #4080 (@bk2204)\n* lfshttp: allow renegotiation #4066 (@bk2204)\n* Support submodule.recurse = true #4063 (@pluehne)\n* add man page for the post-commit hook command #4052 (@chrisd8088)\n* Add an option to control warning about files larger than 4 GiB #4009 (@bk2204)\n\n### Bugs\n\n* commands/command_migrate.go: fix bug #4116 (@Electric26)\n* git: avoid \"bad object\" messages when force-pushing #4102 (@bk2204)\n* git: avoid trying to rewrite remote tags as remote branches #4096 (@bk2204)\n* make Go tests run consistently using local binary #4084 (@chrisd8088)\n* commands: don't honor lfs.fetch* for ls-files #4083 (@bk2204)\n* commands: print help output with --help #4059 (@bk2204)\n* fail dedup command with explanation when LFS extensions configured #4045 (@chrisd8088)\n* fix upload retry 'file already closed' issue' #4042 (@nataliechen1)\n* commands/command_filter_process: cherry-pick of several commits cause panic error #4017 (@shalashik)\n* Check error when creating local storage directory #4016 (@bk2204)\n* track: detect duplicate patterns with --filename #4000 (@bk2204)\n\n### Misc\n\n* Removed lfs.extension.* from list of supported keys for .lfsconfig #4044 (@swisspol)\n* Tidy modules #4035 (@bk2204)\n* README: explain how to verify releases #4022 (@bk2204)\n* docs: document git lfs migrate --yes #4023 (@bk2204)\n* Stop using cgo on amd64 Linux #4026 (@bk2204)\n* updated copyright year #3995 (@dan2468)\n\n## 2.10.0 (21 January 2020)\n\nThis release introduces several new features, such as support for local paths in\nremotes, Kerberos support, and official binaries for S390x and little-endian\n64-bit PowerPC systems.  In addition, numerous bugs have been fixed and\nmiscellaneous issues have been addressed.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @ganadist for fixing a bug in the output of `git lfs env`\n* @exceed-alae for fixing a possible nil pointer dereference\n* @slonopotamus for improvements to Windows support and code cleanups\n* @nataliechen1 for fixing a data race\n* @ssgelm for writing and updating the code to use a new cookie jar parser\n* @austintraver for improving the output of `git lfs status`\n* @nikola-sh for improving option parity with Git\n* @alrs for fixing several error checks in the testsuite\n* @pluehne for improving our support for uncommon references\n\n### Features\n\n* Optimize pushes for multiple refs #3978 (@bk2204)\n* Include ppc64le and s390x Linux builds in releases #3983 (@bk2204)\n* Kerberos (SPNEGO) support for HTTP #3941 (@bk2204)\n* Add support for local paths #3918 (@bk2204)\n* Allow specifying HTTP version to use #3887 (@bk2204)\n\n### Bugs\n\n* t-duplicate-oids: use correct awk indexing #3981 (@bk2204)\n* Improved proxy support #3972 (@bk2204)\n* install: don't print error if run outside repository #3969 (@bk2204)\n* debian: bump version of golang-go #3959 (@bk2204)\n* lfshttp: Set valid default value for lfs.concurrenttransfers #3949 (@ganadist)\n* Add nil-check on defer block of DoTransfer() #3936 (@exceed-alae)\n* Retry batch failures #3930 (@bk2204)\n* rpm: use old setup code on CentOS 7 #3938 (@bk2204)\n* Interpret relative hook paths as relative to working tree #3926 (@bk2204)\n* Handle missing cygpath gracefully #3910 (@bk2204)\n* Update index before showing status #3921 (@bk2204)\n* Honor lfs.url when deciding on transfer adapters #3905 (@bk2204)\n* Implement retry logic to fix LFS storage race conditions on Windows #3890 (@slonopotamus)\n* Avoid hang when using git hash-object --stdin --path #3902 (@bk2204)\n* synchronize access to netrcCredentialHelper.skip #3896 (@nataliechen1)\n\n### Misc\n\n* Improve license files #3973 (@bk2204)\n* Add CI link to CI badge in README #3960 (@slonopotamus)\n* Clarify output shown by `git lfs status` #3953 (@austintraver)\n* Revert \"ci: force Windows Git version to 2.22.0\" #3903 (@bk2204)\n* Better document pointer format constraints #3944 (@bk2204)\n* Don't abort with newer Git when in a bare repo #3940 (@bk2204)\n* Fix more Linux package issues #3932 (@bk2204)\n* docs: explain shell metacharacters better #3920 (@bk2204)\n* Reset the text attribute on export #3913 (@bk2204)\n* Support schannel ssl backend #3868 (@nikola-sh)\n* Allow migrate export to handle non-pointer files gracefully #3911 (@bk2204)\n* git/gitattr: fix dropped test errors #3904 (@alrs)\n* Accept all local references with git lfs push #3876 (@pluehne)\n* Drop pre-1.6 Go compatibility code #3897 (@slonopotamus)\n* tools/kv: Fix dropped test error #3882 (@alrs)\n* Use different parser for cookiejar files #3886 (@ssgelm)\n* Stop replacing files in LFS storage when downloading them concurrently on Windows #3880 (@slonopotamus)\n* Fix error strings to follow Go guidelines #3871 (@slonopotamus)\n* Miscellaneous release fixes #3866 (@bk2204)\n\n## 2.9.2 (12 December 2019)\n\nThis release fixes a few regressions, such as a possible nil pointer\ndereference, a failure to retry batch requests, and a bug where repositories\ncould fail to be detected on Windows.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @exceed-alae for fixing a possible nil pointer dereference\n\n### Bugs\n\n* Add nil-check on defer block of DoTransfer() #3936 (@exceed-alae)\n* Retry batch failures #3930 (@bk2204)\n* rpm: use old setup code on CentOS 7 #3938 (@bk2204)\n* Handle missing cygpath gracefully #3910 (@bk2204)\n\n### Misc\n\n* Don't abort with newer Git when in a bare repo #3940 (@bk2204)\n* Fix more Linux package issues #3932 (@bk2204)\n\n## 2.9.1 (25 November 2019)\n\nThis release fixes a few regressions, such as the ability to use HTTP/1.1 when\nrequired, addresses a race condition, and switches the cookie jar parser to\nsomething that's easier for distributions to package.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @nataliechen1 for fixing a data race\n* @ssgelm for writing and updating the code to use a new cookie jar parser\n\n### Features\n\n* Allow specifying HTTP version to use #3887 (@bk2204)\n\n### Bugs\n\n* synchronize access to netrcCredentialHelper.skip #3896 (@nataliechen1)\n* Fix several causes of CI problems #3878 (@bk2204)\n* Miscellaneous release fixes #3866 (@bk2204)\n\n### Misc\n\n* Build artifacts during CI for easier testing #3892 (@bk2204)\n* Use different parser for cookiejar files #3886 (@ssgelm)\n\n## 2.9.0 (17 October 2019)\n\nThis release adds support for DragonFly BSD, adds a new `git lfs dedup` command\nto save space if the file system supports it, adds support for file URLs,\nimproves the performance when walking the repository, contains improvements\nto use HTTP/2 when available and cookies when required, and numerous other bug\nfixes, features, and modifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @pluehne for adding support for fetching the history of specific refs\n* @kupson for adding cookie support\n* @liweitianux for adding Dragonfly BSD support\n* @kazuki-ma for implementing de-duplication support\n* @dvdveer for adding range support to ls-files\n* @dyrone, @pmeerw, @yamiacat, and @kittenking for cleaning up some documentation issues\n* @slonopotamus for improving concurrent downloads\n* @nataliechen1 for fixing remote names with dots\n* @jw3 for removing excessive logging\n* @SeamusConnor for significantly improving performance when walking the repository\n\n### Features\n\n* Support fetching entire history of specific refs #3849 (@pluehne)\n* Add support for CentOS 8 #3854 (@bk2204)\n* Let git-lfs HTTPS transport send cookies #3825 (@kupson)\n* Support DragonFly BSD #3837 (@liweitianux)\n* HTTP/2 protocol support #3793 (@PastelMobileSuit)\n* Add clonefile on Windows over ReFS support. #3790 (@kazuki-ma)\n* Add new command `git lfs dedup` for file system level de-duplication. #3753 (@kazuki-ma)\n* Support GIT_ALTERNATE_OBJECT_DIRECTORIES #3765 (@bk2204)\n* ls-files: add support for reference range #3764 (@dvdveer)\n* Add several additional distros for packagecloud.io #3751 (@bk2204)\n* Provide an option to track to handle paths literally #3756 (@bk2204)\n* Optimize traversal of Git objects with URL remotes #3755 (@bk2204)\n* Support for file URLs #3748 (@bk2204)\n* Add clone file on MacOS X (darwin). #3745 (@kazuki-ma)\n\n### Bugs\n\n* Fix JSON comma problems in docs #3851 (@dyrone)\n* Remove redundant comma in batch.md #3841 (@dyrone)\n* More robust handling of parallel attempts to download the same file #3826 (@slonopotamus)\n* Update wildmatch to v1.0.4 #3820 (@bk2204)\n* Update to gitobj v1.4.1 #3815 (@bk2204)\n* Fix build error when cross-compiling #3817 (@bk2204)\n* Do not fail when multiple processes download the same lfs file #3813 (@slonopotamus)\n* Fix Remote Name Parsing Bug #3812 (@nataliechen1)\n* status: gracefully handle files replaced by directories #3768 (@bk2204)\n* Avoid deadlock when transfer queue fails #3800 (@bk2204)\n* Avoid a hang when Git is slow to provide us data #3806 (@bk2204)\n* tasklog/log.go: print \"done\" messages with a trailing period #3789 (@ttaylorr)\n* track: make --filename work with spaces #3785 (@bk2204)\n* Fix couple of 'the the' typos #3786 (@pmeerw)\n* Use an absolute path for smudging #3780 (@bk2204)\n* Fix URL parsing with Go 1.12.8 #3771 (@bk2204)\n* Fix remote autoselection when not on a branch #3759 (@bk2204)\n* Replace deprecated SEEK_SET, SEEK_CUR usage. #3739 (@kazuki-ma)\n* Do not log skipped checkouts to file #3736 (@jw3)\n* Fix typos across git-lfs repository #3728 (@kittenking)\n* Accept legacy Git SSH URLs #3713 (@bk2204)\n\n### Misc\n\n* ls-files --all man patch #3859 (@yamiacat)\n* Reworked to use git ls-files in some circumstances instead of FastWalkGitRepo #3823 (@SeamusConnor)\n* Clean up go.mod for Go 1.13 #3807 (@bk2204)\n* Use FICLONE instead of BTRFS_IOC_CLONE. #3796 (@kazuki-ma)\n* Remove unused pty code #3737 (@bk2204)\n\n## 2.8.0 (23 July 2019)\n\nThis release adds support for SOCKS proxies and Windows junctions, adds native\npackages for Debian 10 and similar distributions, reduces the number of\nsituations in which running `git lfs fetch --all` is required, improves\ncompatibility with Cygwin, and numerous other bug fixes and modifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @mstrap for adding support for listing lock owners\n* @h-hirokawa for adding support for rewriting object URLs\n* @slonopotamus for helping get our specs and implementation in sync\n* @ssgelm for improving our Debian packaging\n* @TBK for fixing a test\n* @hartzell for improving the compatibility of our Makefile\n* @AJH16 for implementing support for NTLM SSO\n\n### Features\n\n* Don't fail if we lack objects the server has #3634 (@bk2204)\n* Add support for Debian 10 #3697 (@bk2204)\n* Migrate tags pointing to other tags #3690 (@bk2204)\n* Add support for SOCKS proxies #3677 (@bk2204)\n* Allow vendors to customize the version info #3636 (@bk2204)\n* Wrap credential data to allow late credential prompting and update NTLM/SSPI to attempt SSPI login prior to prompting for credentials. #3617 (@AJH16)\n* git-lfs locks should optionally denote own locks #3569 (@mstrap)\n* tq/adapterbase: support rewriting href #3590 (@h-hirokawa)\n* Handle Windows junctions properly #3560 (@bk2204)\n* Allow specifying multiple insteadOf aliases #3550 (@bk2204)\n\n### Bugs\n\n* Make API documentation lock creation example less confusing #3648 (@bk2204)\n* Use a download token when searching locks #3715 (@bk2204)\n* Copy mode from original file when rewriting objects #3694 (@bk2204)\n* Don't recurse into submodules when walking repository #3686 (@bk2204)\n* Be more precise about what timestamps we accept #3680 (@bk2204)\n* Canonicalize common directory paths on Cygwin #3671 (@bk2204)\n* Ensure we always use correct Content-Type and Accept headers #3663 (@bk2204)\n* Fix 'owner' lock field not documented as optional #3651 (@slonopotamus)\n* Improve error handling in git lfs install #3624 (@bk2204)\n* Properly handle config options for URLs with upper case letters #3584 (@bk2204)\n* Detect Cygwin-style pipe TTYs as TTYs #3582 (@bk2204)\n* Set push remote for pre-push #3579 (@bk2204)\n* Switch from manually running go generate to using dh-golang to run it #3549 (@ssgelm)\n* Install worktree hooks in the proper directory #3547 (@bk2204)\n* Avoid nil pointer dereference on download failure #3537 (@bk2204)\n* Avoid nil pointer dereference on unexpected failure #3534 (@bk2204)\n\n### Misc\n\n* Update gitobj to v1.3.1 #3716 (@bk2204)\n* Use default line endings for core.autocrlf=input #3712 (@bk2204)\n* Fix CircleCI #3710 (@bk2204)\n* Vendor in gitobj v1.3.0 #3685 (@bk2204)\n* Update CONTRIBUTING #3673 (@bk2204)\n* Fix typo in t-locks.sh #3666 (@TBK)\n* Make 'locked_at' required in JSON schema #3655 (@slonopotamus)\n* Document a new batch error code #3639 (@bk2204)\n* Fix invalid JSON in LFS locking API documentation #3650 (@slonopotamus)\n* Fix invalid JSON in locking protocol docs #3644 (@slonopotamus)\n* Various release updates #3623 (@bk2204)\n* tq/adapterbase: fix typo enableHrefRerite to enableHrefRewrite #3594 (@h-hirokawa)\n* Use git-lfs version of go-ntlm #3588 (@bk2204)\n* Log test server standard error to log file #3577 (@bk2204)\n* Don't set -extldflags unless LDFLAGS has a value #3545 (@hartzell)\n* Retry on oversize file #3518 (@bk2204)\n* Fix asset uploading during releases #3538 (@bk2204)\n\n## 2.7.0 (15 February 2019)\n\nThis release adds better support for large files on 32-bit systems, adds\nattribute macros, fixes several file descriptor leaks, improves compatibility\nwith Git's configuration parsing, and includes numerous other bug fixes and\nmodifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @andyneff and @torbjoernk for updating our release targets\n* @zkry for work on rate-limiting\n* @Foxboron for work on reproducible builds\n* @mstrap for adding a release target for Linux arm64\n* @keiko713, @Erwyn, and @mloskot for improving our documentation\n* @QuLogic for fixing our tests under SELinux\n* @saracen and @steffengodskesen for improving our output handling\n* @mbsulliv for finding and fixing a bug where we ran out of file descriptors\n\n### Features\n\n* Add sles 15 support #1055 #3515 (@andyneff)\n* docs/man/git-lfs-config.5.ronn: document GIT_LFS_SKIP_SMUDGE #3509 (@ttaylorr)\n* commands/command_pointer.go: introduce `--check` option #3501 (@ttaylorr)\n* Makefile additions for reproducible builds and asmflags #3444 (@Foxboron)\n* locking: add flag to control modification of ignored files #3409 (@bk2204)\n* build package for Ubuntu 18.10 aka Cosmic #3402 (@torbjoernk)\n* Add support for retries with delays (ex. rate limiting) #3449 (@zkry)\n* Trim embedded paths out of binaries #3443 (@bk2204)\n* Ensure 32-bit Git LFS binaries can handle files larger than 4 GiB #3426 (@bk2204)\n* Support attribute macros #3391 (@bk2204)\n* tasklog: don't log progress status when stdout is not a tty #3349 (@steffengodskesen)\n* locking: cache JSON response from server #3253 (@mstrap)\n* tq: enable transfer debugging when GIT_CURL_VERBOSE is set #3341 (@bk2204)\n\n### Bugs\n\n* .circleci: don't use 'brew prune' #3514 (@ttaylorr)\n* t/t-smudge.sh: remove unnecessary test #3513 (@ttaylorr)\n* docs/man: fix inconsistency in 'git-lfs-ls-files(1)' #3496 (@ttaylorr)\n* lfshttp: close body on redirect #3479 (@bk2204)\n* status: handle deleted files gracefully #3482 (@bk2204)\n* Fix hang in prune with too few file descriptors #3460 (@bk2204)\n* Fix parameter name on List Locks API Documentation #3477 (@Erwyn)\n* TST: Trim security context when checking permissions. #3476 (@QuLogic)\n* command/env: ensure we honor lfs.url #3470 (@bk2204)\n* Fix swapped case sensitivity in patterns #3433 (@bk2204)\n* core.sharedRepository improvements for directories #3417 (@bk2204)\n* Update the doc of whitelisted .lfsconfig keys #3423 (@keiko713)\n* Rewrite URL config-matching #3392 (@PastelMobileSuit)\n* git: close blob objects when finished #3379 (@bk2204)\n* Avoid hang in repos cloned with --shared or --reference #3383 (@bk2204)\n* commands/command_status.go: require a working copy #3378 (@ttaylorr)\n* Fix test server API #3377 (@bk2204)\n* vendor: don't remove necessary dependencies #3356 (@ttaylorr)\n* filepathfilter: don't say file is both accepted and rejected #3360 (@bk2204)\n* Support pushInsteadOf aliases when determining endpoints #3353 (@bk2204)\n* Close attributes file #3347 (@mbsulliv)\n* Fix humanize's FormatByteRate() to work with 0s duration #3340 (@saracen)\n\n### Misc\n\n* Release automation #3510 (@bk2204)\n* docs/man: update `git-lfs-fetch(1)` manpage #3488 (@ttaylorr)\n* Update Cobra #3483 (@bk2204)\n* Run go generate only on Windows #3480 (@bk2204)\n* docs/man/git-lfs-migrate: make examples less confusing #3424 (@bk2204)\n* Modify logic of 'migrate info' to process extensionless files #3458 (@zkry)\n* Improve error message on missing object #3398 (@bk2204)\n* docs/man: suggest using Git configuration for LFS keys #3394 (@bk2204)\n* Document default value of migrate info --top=<n> #3387 (@mloskot)\n* Clarify minimum git version #3327 (@carlwgeorge)\n\n## 2.6.1 (3 December 2018)\n\nThis release contains miscellaneous bug fixes since v2.6.0. Most notably,\nrelease v2.6.1 restores support for alternate repositories, which was\naccidentally broken in v2.6.0.\n\n### Bugs\n\n* git: close blob objects when finished #3379 (@bk2204)\n* Avoid hang in repos cloned with --shared or --reference #3383 (@bk2204)\n* vendor: don't remove necessary dependencies #3356 (@ttaylorr)\n\n## 2.6.0 (1 November, 2018)\n\nThis release adds better support for redirecting network calls from a Git LFS\nAPI server to one that requires a different authentication mode, builds Git LFS\non Go 1.11, and numerous other bug fixes and modifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @andyneff for updating our release targets\n* @gtsiolis: for removing the deprecated `git lfs clone` from the listing of\n  supported Git LFS commands\n* @jsantell for fixing a formatting issue in the INCLUDE AND EXCLUDE man page\n  section\n* @mmlb for adding a release target for Linux arm64\n* @skashyap7 for adding the 'git lfs track -n'\n* @Villemoes: for modernizing the Git LFS installation procedure on Debian.\n\n### Features\n\n* commands: list explicitly excluded patterns separately #3320 (@bk2204)\n* Uninstall improvements #3326 (@bk2204)\n* config: honor GIT_AUTHOR_DATE and GIT_COMMITTER_DATE #3314 (@bk2204)\n* Add new `.netrc` credential helper #3307 (@PastelMobileSuit)\n* Honor umask and core.sharedRepository #3304 (@bk2204)\n* Support listing only filename tracked by git lfs using --name (-n) option\n  #3271 (@skashyap7)\n* all: use Go 1.11.1 in CI #3298 (@ttaylorr)\n* lfsapi/tq: Have DoWithAuth() caller determine URL Access Mode #3293\n  (@PastelMobileSuit)\n* commands: undeprecate checkout #3303 (@bk2204)\n* Checkout options for conflicts #3296 (@bk2204)\n* Makefile: build source tarballs for release #3283 (@bk2204)\n* Encrypted SSL key support #3270 (@bk2204)\n* Add support for core.sshCommand #3235 (@bk2204)\n* gitobj-based Object Scanner #3236 (@bk2204)\n* README.md: new core team members #3217 (@ttaylorr)\n* Add build and releases for linux arm64 #3196 (@mmlb)\n* Update packagecloud.rb #3210 (@andyneff)\n* all: use Go modules instead of Glide #3208 (@ttaylorr)\n* all: use Go 1.11 in CI #3203 (@ttaylorr)\n\n### Bugs\n\n* Fix formatting of INCLUDE AND EXCLUDE (REFS) #3330 (@jsantell)\n* go.sum: add missing entries #3319 (@bk2204)\n* Ensure correct syntax for commit headers in lfs migrate import #3313 (@bk2204)\n* Clean up trailing whitespace #3299 (@bk2204)\n* commands: unambiguously resolve remote references #3285 (@ttaylorr)\n* Expand custom transfer args by using the shell #3259 (@bk2204)\n* Canonicalize paths properly on Windows #3277 (@bk2204)\n* debian/prerm: add --system flag #3272 (@Villemoes)\n* t: make testsuite run under git rebase -x #3262 (@bk2204)\n* git/gitattr: parse 'set' attributes #3255 (@ttaylorr)\n* t: avoid panic in lfstest-customadapter #3243 (@bk2204)\n* t: avoid using shell variables in printf's first argument #3242 (@bk2204)\n* lfsapi: handle SSH hostnames and aliases without users #3230 (@bk2204)\n* commands/command_ls_files.go: ignore index with argument #3219 (@ttaylorr)\n* commands/command_migrate_import.go: install hooks #3227 (@ttaylorr)\n* t: mark test sources as .PHONY #3228 (@ttaylorr)\n* Pass GIT_SSH_COMMAND to the shell #3199 (@bk2204)\n* Tidy misformatted files #3202 (@bk2204)\n* config: expand core.hooksPath #3212 (@ttaylorr)\n* locks: manage write permissions of ignored files #3190 (@ttaylorr)\n\n### Misc\n\n* CONTRIBUTING.md: :nail_care: #3325 (@ttaylorr)\n* Update CONTRIBUTING #3317 (@bk2204)\n* go.mod: depend on tagged gitobj #3311 (@ttaylorr)\n* RFC: SSH protocol #3290 (@bk2204)\n* Remove `git lfs clone` command from man #3301 (@gtsiolis)\n* ROADMAP.md: use GitHub issues instead #3286 (@ttaylorr)\n* docs: add note about closing release milestone #3274 (@bk2204)\n* CI improvements #3268 (@bk2204)\n* docs/howto: document our release process #3261 (@ttaylorr)\n* Create new lfshttp package #3244 (@PastelMobileSuit)\n* CONTRIBUTING: update required go version #3232 (@PastelMobileSuit)\n* go.mod: use latest github.com/olekukonko/ts #3223 (@ttaylorr)\n* go.mod: pin github.com/git-lfs/wildmatch to v1.0.0 #3218 (@ttaylorr)\n* Update README.md #3193 (@srl295)\n\n## 2.5.2 (17 September, 2018)\n\n### Bugs\n\n* config: Treat [host:port]:path URLs correctly #3226 (@saschpe)\n* tq: Always provide a Content-Type when uploading files #3201 (@bk2204)\n* commands/track: Properly `lfs track` files with escaped characters in their\n  name #3192 (@leonid-s-usov)\n\n### Misc\n\n* packagecloud.rb: remove older versions #3210 (@andyneff)\n\n## 2.5.1 (2 August, 2018)\n\nThis release contains miscellaneous bug fixes since v2.5.0. Most notably,\nrelease v2.5.1 allows a user to disable automatic Content-Type detection\n(released in v2.5.0) via `git config lfs.contenttype false` for hosts that do\nnot support it.\n\n### Features\n\n* tq: make Content-Type detection disable-able #3163 (@ttaylorr)\n\n### Bugs\n\n* Makefile: add explicit rule for commands/mancontent_gen.go #3160 (@jj1bdx)\n* script/install.sh: mark as executable #3155 (@ttaylorr)\n* config: add origin to remote list #3152 (@PastelMobileSuit)\n\n### Misc\n\n* docs/man/mangen.go: don't show non-fatal output without --verbose #3168\n  (@ttaylorr)\n* LICENSE.md: update copyright year #3156 (@IMJ355)\n* Makefile: silence some output #3164 (@ttaylorr)\n* Makefile: list prerequisites for resource.syso #3153 (@ttaylorr)\n\n## 2.5.0 (26 July, 2018)\n\nThis release adds three new migration modes, updated developer ergonomics, and\na handful of bug fixes to Git LFS.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @calavera for fixing a broken Go test and adding support for custom\n  Content-Type headers in #3137 and #3138.\n* @cbuehlmann for adding support for encoded character names in filepaths via\n  #3093.\n* @larsxschneider for changing the default value of lfs.allowincompletepush in\n  #3109.\n* @NoEffex for supporting TTL in SSH-based authentication tokens via #2867.\n* @ssgelm for adding 'go generate' to our Debian packages via #3083.\n\n### Features\n\n* Makefile: replace many scripts with make targets #3144 (@ttaylorr)\n* {.travis,appveyor}.yml: upgrade to Go 1.10.3 #3146 (@ttaylorr)\n* t: run tests using prove #3125 (@ttaylorr)\n* commands/migrate: infer wildmatches with --fixup #3114 (@ttaylorr)\n* Retry SSH resolution 5 times #2934 (@stanhu)\n* Implement `migrate export` subcommand #3084 (@PastelMobileSuit)\n* Add `--no-rewrite` flag to `migrate import` command #3029 (@PastelMobileSuit)\n\n### Bugs\n\n* t: fix contains_same_elements() fn #3145 (@PastelMobileSuit)\n* commands: warn if working copy is dirty #3124 (@ttaylorr)\n* Ensure provided remote takes precedence over configured pushRemote #3139 (@PastelMobileSuit)\n* Fix proxy unit tests. #3138 (@calavera)\n* commands/command_migrate.go: loosen meaning of '--everything' #3121 (@ttaylorr)\n* lfsapi: don't query askpass for given creds #3126 (@PastelMobileSuit)\n* config/git_fetcher.go: mark 'lfs.allowincompletepush' as safe #3113 (@ttaylorr)\n* fs: support multiple object alternates #3116 (@ttaylorr)\n* commands/checkout: checkout over read-only files #3120 (@ttaylorr)\n* test/testhelpers.sh: look for 64 character SHA-256's #3119 (@ttaylorr)\n* config/config.go: case-insensitive error search #3098 (@ttaylorr)\n* Encoded characters in pathnames #3093 (@cbuehlmann)\n* Support default TTL for authentication tokens acquired via SSH #2867 (@NoEffex)\n* commands/status.go: relative paths outside of root #3080 (@ttaylorr)\n* Run `go generate` on commands in deb build #3083 (@ssgelm)\n* lfsapi: prefer proxying from gitconfig before environment #3062 (@ttaylorr)\n* commands/track: respect global- and system-level gitattributes #3076 (@ttaylorr)\n* git/git.go: pass --multiple to git-fetch(1) when appropriate #3063 (@ttaylorr)\n* commands/checkout: fix inaccurate messaging #3055 (@ttaylorr)\n* commands/migrate: do not migrate empty commits #3054 (@ttaylorr)\n* git/odb: retain trailing newlines in commit messages #3053 (@ttaylorr)\n\n### Misc\n\n* Set original file content type on basic upload. #3137 (@calavera)\n* README.md: Git for Windows ships LFS by default #3112 (@larsxschneider)\n* change lfs.allowincompletepush default from true to false  #3109 (@larsxschneider)\n* *: replace git/odb with vendored copy #3108 (@ttaylorr)\n* test/test-ls-files.sh: skip on CircleCI #3101 (@ttaylorr)\n* lfsapi/ssh.go: use zero-value sentinels #3099 (@ttaylorr)\n* README.md: add link to installation wiki page #3075 (@ttaylorr)\n* docs/man/git-lfs.1.ronn: update casing and missing commands #3059 (@ttaylorr)\n* commands/checkout: mark 'git lfs checkout' as deprecated #3056 (@ttaylorr)\n\n## 2.4.2 (28 May, 2018)\n\n### Bugs\n\n* lfsapi: re-authenticate HTTP redirects when needed #3028 (@ttaylorr)\n* lfsapi: allow unknown keywords in netrc file(s) #3027 (@ttaylorr)\n\n## 2.4.1 (18 May, 2018)\n\nThis release fixes a handful of bugs found and fixed since v2.4.0. In\nparticular, Git LFS no longer panic()'s after invalid API responses, can\ncorrectly run 'fetch' on SHAs instead of references, migrates symbolic links\ncorrectly, and avoids writing to `$HOME/.gitconfig` more than is necessary.\n\nWe would like to extend a \"thank you\" to the following contributors for their\ngracious patches:\n\n- @QuLogic fixed an issue with running tests that require credentials\n- @patrickmarlier made it possible for 'git lfs migrate import' to work\n  correctly with symbolic links.\n- @zackse fixed an inconsistency in `CONTRIBUTING.md`\n- @zanglang fixed an inconsistency in `README.md`\n\nGit LFS would not be possible without generous contributions from the\nopen-source community. For these, and many more: thank you!\n\n### Features\n\n* script/packagecloud.rb: release on Ubuntu Bionic #2961 (@ttaylorr)\n\n### Bugs\n\n* lfsapi: canonicalize extra HTTP headers #3010 (@ttaylorr)\n* commands/lock: follow symlinks before locking #2996 (@ttaylorr)\n* lfs/attribute.go: remove default value from upgradeables #2994 (@ttaylorr)\n* git: include SHA1 in ref-less revisions #2982 (@ttaylorr)\n* Do not migrate the symlinks to LFS objects. #2983 (@patrickmarlier)\n* commands/uninstall: do not log about global hooks with --local #2976 (@ttaylorr)\n* commands/run.go: exit 127 on unknown sub-command #2969 (@ttaylorr)\n* commands/{un,}track: perform \"prefix-agnostic\" comparisons #2955 (@ttaylorr)\n* commands/migrate: escape paths before .gitattributes  #2933 (@ttaylorr)\n* commands/ls-files: do not accept '--all' after '--' #2932 (@ttaylorr)\n* tq: prevent uint64 underflow with invalid API response #2902 (@ttaylorr)\n\n### Misc\n\n* test/test-env: skip comparing GIT_EXEC_PATH #3015 (@ttaylorr)\n* remove reference to CLA from contributor's guide #2997 (@zackse)\n* .gitattributes link is broken #2985 (@zanglang)\n* commands: make --version a synonym for 'version' #2968, #3017 (@ttaylorr)\n* test: ensure that git-mergetool(1) works with large files #2939 (@ttaylorr)\n* README.md: note the correct PackageCloud URL #2960 (@ttaylorr)\n* README.md: mention note about `git lfs track` retroactively #2948 (@ttaylorr)\n* README.md: reorganize into Core Team, Alumni #2941 (@ttaylorr)\n* README.md: :nail_care: #2942 (@ttaylorr)\n* circle.yml: upgrade to 'version: 2' syntax #2928 (@ttaylorr)\n* Use unique repo name for tests that require credentials. #2901 (@QuLogic)\n\n## 2.4.0 (2 March, 2018)\n\nThis release introduces a rewrite of the underlying file matching engine,\nexpands the API to include relevant refspecs for individual requests,\nstandardizes the progress output among commands, and more.\n\nPlease note: in the next MAJOR release (v3.0.0) the semantic meaning behind\n`--include` and `--exclude` flags will change. As the details of exactly which\nexisting patterns will no longer function as previously are known, we will\nindicate them here. Any `--include` or `--exclude` patterns used in v2.3.0 or\nearlier are expected to work as previously in this release.\n\nThis release would not be possible without the open-source community.\nSpecifically, we would like to thank:\n\n- @larsxschneider: for contributing fixes to the filter operation in `git lfs\n  fsck`, and `git lfs prune`, as well as the bug report leading to the\n  filepathfilter changes.\n- @yfronto: for adding new Linux release targets.\n- @stffabi: for adding support for NTLM with SSPI on Windows.\n- @jeffreydwalter: for fixing memory alignment issues with `sync/atomic` on\n  32-bit architectures.\n- @b4mboo: for adding a LFS configuration key to the list of safe configuration\n  options.\n\nWithout the aforementioned indviduals, this release would not have been\npossible. Thank you!\n\n### Features\n\n* __Support wildmatch-compliant options in `--include`, `--exclude`__\n  * filepathfilter: implement using wildmatch #2875 (@ttaylorr)\n  * test: add wildmatch migration tests #2888 (@larsxschneider, @ttaylorr)\n* __Expand the specification to include relevant refspecs__\n  * verify locks against each ref being pushed #2706 (@technoweenie)\n  * Batch send refspec take 2 #2809 (@technoweenie)\n  * Run 1 TransferQueue per uploaded ref #2806 (@technoweenie)\n  * Locks/verify: full refspec #2722 (@technoweenie)\n  * send remote refspec for the other lock commands #2773 (@technoweenie)\n* __Standardize progress meter output and implementation__\n  * tq: standardized progress meter formatting #2811 (@ttaylorr)\n  * commands/fetch: unify formatting #2758 (@ttaylorr)\n  * commands/prune: unify formatting #2757 (@ttaylorr)\n  * progress: use git/githistory/log package for formatting #2732 (@ttaylorr)\n  * progress: remove `*progress.Meter` #2762 (@ttaylorr)\n  * tasklog: teach `*Logger` how to enqueue new `*SimpleTask`'s #2767 (@ttaylorr)\n  * progress: remove spinner.go #2759 (@ttaylorr)\n* __Teach new flags, functionality to `git lfs ls-files`__\n  * commands: teach '--all' to `git lfs ls-files` #2796 (@ttaylorr)\n  * commands/ls-files: show cached, tree-less LFS objects #2795 (@ttaylorr)\n  * commands/ls-files: add --include, --exclude #2793 (@ttaylorr)\n  * commands/ls-files: add '--size' flag #2764 (@ttaylorr)\n* __Add new flags, functionality to `git lfs migrate`__\n  * commands/migrate: support '^'-prefix refspec in arguments #2785 (@ttaylorr)\n  * commands/migrate: add '--skip-fetch' for offline migrations #2738 (@ttaylorr)\n  * git: prefer sending revisions over STDIN than arguments #2739 (@ttaylorr)\n* __Release to new operating systems__\n  * release lfs for ubuntu/artful too #2704 (@technoweenie)\n  * Adding Mint Sylvia to packagecloud.rb script #2829 (@yfronto)\n* __New functionality in package `lfsapi`__\n  * NTLM authentication with SSPI on windows #2871 (@stffabi)\n  * lfsapi/auth: teach DoWithAuth to respect http.extraHeaders #2733 (@ttaylorr)\n  * add support for url-specific proxies #2651 (@technoweenie)\n* __Code cleanup in git.Config, package `localstorage`__\n  * Tracked remote #2700 (@technoweenie)\n  * Replace git.Config #2692 (@technoweenie)\n  * Replace localstorage #2689 (@technoweenie)\n  * Remove last global config #2687 (@technoweenie)\n  * Git config refactor #2676 (@technoweenie)\n\n### Bugs\n\n* all: fix 32-bit alignment issues with `sync/atomic` #2883 (@ttaylorr)\n* all: memory alignment issues on 32-bit systems. #2880 (@jeffreydwalter)\n* command/migrate: don't migrate remote references in bare repositories #2769 (@ttaylorr)\n* commands/ls-files: behave correctly before initial commit #2794 (@ttaylorr)\n* commands/migrate: allow for ambiguous references in migrations #2734 (@ttaylorr)\n* commands: fill in missing printf arg #2678 (@technoweenie)\n* config: Add `lfs.locksverify` to safe keys. #2797 (@b4mboo)\n* don't replace pointers with objects if clean filter is not configured #2626 (@technoweenie)\n* fsck: attach a filter to exclude unfetched items from fsck #2847 (@larsxschneider)\n* git/githistory: copy entries from cache, elsewhere #2884 (@ttaylorr)\n* git/githistory: migrate annotated tags correctly #2780 (@ttaylorr)\n* git/odb: don't print extra newline after commit message #2784 (@ttaylorr)\n* git/odb: extract identifiers from commits verbatim #2751 (@wsprent)\n* git/odb: implement parsing for annotated `*Tag`'s #2778 (@ttaylorr)\n* git/odb: retain newlines when parsing commit messages #2786 (@ttaylorr)\n* lfs: PointerScanner is nil after error, so don't close #2699 (@technoweenie)\n* lfsapi: Cred helper improvements #2695 (@technoweenie)\n* lfsapi: retry requests changing access from none IF Auth header is empty #2621 (@technoweenie)\n* prune: always prune excluded paths #2851 (@larsxschneider)\n* status: fix incorrect formatting with unpushed objects #2746 (@ttaylorr)\n* tasklog: don't drop updates in PercentageTask #2755 (@ttaylorr)\n* test: Fix integration test early exit #2735 (@technoweenie)\n* test: generate random repo names with fs-safe characters #2698 (@technoweenie)\n\n### Misc\n\n* all: Nitpicks #2821 (@technoweenie)\n* all: introduce package 'tlog' #2747 (@ttaylorr)\n* all: remove CLA #2870 (@MikeMcQuaid)\n* build: Specify the embedded Windows icon as part of versioninfo.json #2770 (@sschuberth)\n* config,test: Testlib no global config #2709 (@mathstuf)\n* config: add PushRemote() for checking `branch.*.pushRemote` and `remote.pushDefault` first #2715 (@technoweenie)\n* docs: Added documentation for git-lfs-ls-files' `*/-` output. #2719 (@bilke)\n* docs: Uninstall man page improvements #2730 (@dpursehouse)\n* docs: Update usage info for post-checkout #2830 (@proinsias)\n* docs: add 'git lfs prune' to main man page #2849 (@larsxschneider)\n* docs: use consistent casing for Git #2850 (@larsxschneider)\n* git/githistory: have `*RefUpdater` hold `*odb.ObjectDatabase` reference #2779 (@ttaylorr)\n* progress: move CopyCallback (& related) to package 'tools' #2749 (@ttaylorr)\n* progress: move `*progressLogger` implementation to package 'tools' #2750 (@ttaylorr)\n* refspec docs #2820 (@technoweenie)\n* script/test: run 'go tool vet' during testing #2788 (@ttaylorr)\n* tasklog: introduce `*SimpleTask` #2756 (@ttaylorr)\n* test: Ignore comment attr lines #2708 (@mathstuf)\n* test: Wait longer for test lfs server to start. #2716 (@QuLogic)\n* test: ensure commented attr lines are ignored #2736 (@ttaylorr)\n* tools/humanize: add 'FormatByteRate' to format transfer speed #2810 (@ttaylorr)\n* vendor: update 'xeipuuv/gojsonpointer' #2846 (@ttaylorr)\n\n## 2.3.4 (18 October, 2017)\n\n### Features\n\n* 'git lfs install' updates filters with 'skip-smudge' option #2673 (@technoweenie)\n\n### Bugs\n\n* FastWalkGitRepo: limit number of concurrent goroutines #2672 (@technoweenie)\n* handle scenario where multiple configuration values exist in ~/.gitconfig #2659 (@shiftkey)\n\n## 2.3.3 (9 October, 2017)\n\n### Bugs\n\n* invoke lfs for 'git update-index', fixing 'status' issues #2647 (@technoweenie)\n* cache http credential helper output by default #2648 (@technoweenie)\n\n## 2.3.2 (3 October, 2017)\n\n### Features\n\n* bump default activity timeout from 10s -> 30s #2632 (@technoweenie)\n\n### Bugs\n\n* ensure files are marked readonly after unlocking by ID #2642 (@technoweenie)\n* add files to index with path relative to current dir #2641 (@technoweenie)\n* better Netrc errors #2633 (@technoweenie)\n* only use askpass if credential.helper is not configured #2637 (@technoweenie)\n* convert backslash to slash when writing to .gitattributes #2625 (@technoweenie)\n\n### Misc\n\n* only copy req headers if there are git-configured extra headers #2622 (@technoweenie)\n* update tracerx to add timestamps #2620 (@rubyist)\n\n## 2.3.1 (27 September, 2017)\n\n### Features\n\n* add support for SSH_ASKPASS #2609 (@technoweenie)\n* `git lfs migrate --verbose` option #2610 (@technoweenie)\n* Support standalone custom transfer based on API URL prefix match #2590 (@sprohaska)\n\n### Bugs\n\n* Improve invalid URL error messages #2614 (@technoweenie)\n* Fix double counting progress bug #2608 (@technoweenie)\n* trim whitespace from GIT_ASKPASS provided passwords #2607 (@technoweenie)\n* remove mmap usage in Packfile reader #2600 (@technoweenie)\n* `git lfs clone`: don't fetch for unborn repositories #2598 (@shiftkey)\n\n### Misc\n\n* Windows Installer fixes:\n  * Show proper icon in add/remove programs list #2585 (@shiftkey)\n  * Make the Inno Setup installer script explicitly check for the binaries #2588 (@sschuberth)\n  * Improve compile-win-installer-unsigned.bat a bit #2586 (@sschuberth)\n* Update migrate docs example for multiple file types #2596 (@technoweenie)\n\n## 2.3.0 (14 September, 2017)\n\nGit LFS v2.3.0 includes performance optimizations for the `git-lfs-migrate(1)`\nand `git-clone(1)` commands, new features, bug-fixes, and more.\n\nThis release was made possible by contributors to Git LFS. Specifically:\n\n- @aleb: added support for \"standalone\" transfer agents, for using `rsync(1)`\n  and similar with Git LFS.\n- @bozaro: added support for custom `.git/lfs/objects` directories via the\n  `lfs.storage` configuration option.\n- @larsxschneider: fixed a recursive process leak when shelling out to Git,\n  added new features to `git lfs ls-files`, extra information in error\n  messages used for debugging, documentation changes and more.\n- @mathstuf: contributed a documentation change clarifying LFS's handling of\n  empty pointer files.\n- @rudineirk and @andyneff: updated our release process to build packages for\n  fedora/26.\n- @ssgelm: ensured that LFS is able to be released on Ubuntu Universe.\n\nTo everyone who has contributed to this or previous releases of Git LFS: Thank\nyou!\n\n### Features\n\n* git/odb/pack: improve `git lfs migrate` performance\n  * git/odb/pack: introduce packed object reassembly #2550 #2551 #2552 #2553 #2554 (@ttaylorr)\n  * git/odb/pack: teach packfile index entry lookups #2420 #2421 #2422 #2423 #2437 #2441 #2461 (@ttaylorr)\n  * git/{odb,githistory}: don't write unchanged objects #2541 (@ttaylorr)\n* commands: improve `git clone` performance with 'delay' capability #2511 #2469 #2468 #2471 #2467 #2476 #2483 (@ttaylorr)\n  * commands: mark `git lfs clone` as deprecated #2526 (@ttaylorr)\n* commands: enable `lfs.allowincompletepush` by default #2574 (@technoweenie)\n* commands: teach '--everything' to `git lfs migrate` #2558 (@ttaylorr)\n* commands: teach `git lfs ls-files` a '--debug' option #2540 (@larsxschneider)\n* commands,lfs: warn on 4gb size conversion during clean #2510 #2507 #2459 (@ttaylorr)\n* lfsapi/creds: teach about GIT_ASKPASS and core.askpass #2500 #2578 (@ttaylorr)\n* commands/status: indicate missing objects #2438 (@ttaylorr)\n* Allow using custom transfer agents directly #2429 (@aleb)\n* Add `lfs.storage` parameter for overriding LFS storage location #2023 (@bozaro)\n* lfsapi: enable credential caching by default #2508 (@ttaylorr)\n* commands/install: teach `--manual` to `git-lfs-install(1)` #2410 (@ttaylorr)\n\n### Bugs\n\n* migrate: fix migrations with subdirectories in '--include' or '--exclude' #2485 (@ttaylorr)\n* commands/migrate: fix hardlinking issue when different filesystem is mounted at `/tmp` #2566 (@ttaylorr)\n* commands: make `git lfs migrate` fetch ref updates before migrating #2538 (@ttaylorr)\n* commands: remove '--above=1mb' default from `git lfs migrate info` #2460 (@ttaylorr)\n* filepathfilter: fix `HasPrefix()` when no '--include' filters present #2579 (@technoweenie)\n* git/githistory/log: fix race condition with `git/githistory/log` tests #2495 (@ttaylorr)\n* git/odb: fix closing object database test #2457 (@ttaylorr)\n* git/githistory: only update local refs after migrations #2559 (@ttaylorr)\n* locking: fix unlocking files not removing write flag #2514 (@ttaylorr)\n* locks: fix unlocking files in a symlinked directory #2505 (@ttaylorr)\n* commands: teach `git lfs unlock` to ignore status errs in appropriate conditions #2475 (@ttaylorr)\n* git: expand `GetAttributePaths` check to include non-LFS lockables #2528 (@ttaylorr)\n* fix multiple `git update-index` invocations #2531 (@larsxschneider)\n* tools: fix SSH credential cacher expiration #2530 (@ttaylorr)\n* lfsapi: fix read/write race condition in credential cacher #2493 (@ttaylorr)\n* lfs: fix cleaning contents larger than 1024 bytes over stdin #2488 (@ttaylorr)\n* fsck only scans current version of objects #2049 (@TheJare)\n* progress: fix writing updates to `$GIT_LFS_PROGRESS` #2465 (@ttaylorr)\n* commands/track: resolve symlinks before comparing attr paths #2463 (@ttaylorr)\n* test: ensure that empty pointers are empty #2458 (@ttaylorr)\n* git/githistory/log: prevent 'NaN' showing up in `*PercentageTask` #2455 (@ttaylorr)\n* tq: teach Batch() API to retry itself after io.EOF's #2516 (@ttaylorr)\n\n### Misc\n\n* script/packagecloud: release LFS on Fedora/26 #2443 #2509 (@rudineirk, @andyneff)\n* git/githistory: change \"Rewriting commits\" when not updating refs #2577 (@ttaylorr)\n* commands: print IP addresses in error logs #2570 (@larsxschneider)\n* commands: print current time in UTC to error logs #2571 (@larsxschneider)\n* commands: Disable lock verification when using a standalone custom-tr\u2026 #2499 (@aleb)\n* docs/man: update `git lfs migrate` documentation with EXAMPLES #2580 (@technoweenie)\n* docs/man: recommend global per-host locking config #2546 (@larsxschneider)\n* commands: use transfer queue's batch size instead of constant #2529 (@ttaylorr)\n* add function to invoke Git with disabled LFS filters #2453 (@larsxschneider)\n* config: warn on unsafe keys in `.lfsconfig` #2502 (@ttaylorr)\n* glide: remove unused dependencies #2501 (@ttaylorr)\n* script/build: pass '-{ld,gc}flags' to compiler, if given #2462 (@ttaylorr)\n* spec: mention that an empty file is its own LFS pointer #2449 (@mathstuf)\n* Update to latest version of github.com/pkg/errors #2426 (@ssgelm)\n* Update gitignore to add some temp files that get created when building debs #2425 (@ssgelm)\n* lfs: indent contents of `git lfs install`, `update` #2392 (@ttaylorr)\n* tq: increase default `lfs.concurrenttransfers` to 8 #2506 (@ttaylorr)\n\n## 2.2.1 (10 July, 2017)\n\n### Bugs\n\n* git lfs status --json only includes lfs files #2374 (@asottile)\n* git/odb: remove temporary files after migration #2388 (@ttaylorr)\n* git/githistory: fix hanging on empty set of commits #2383 (@ttaylorr)\n* migrate: don't checkout HEAD on bare repositories #2389 (@ttaylorr)\n* git/odb: prevent cross-volume link error when saving objects #2382 (@ttaylorr)\n* commands: only pass --jobs to `git clone` if set #2369 (@technoweenie)\n\n### Misc\n\n* lfs: trace hook install, uninstall, upgrade #2393 (@ttaylorr)\n* vendor: remove github.com/cheggaaa/pb #2386 (@ttaylorr)\n* Use FormatBytes from git-lfs/tools/humanize instead of cheggaaa/pb #2377 (@ssgelm)\n\n\n## 2.2.0 (27 June, 2017)\n\nGit LFS v2.2.0 includes bug fixes, minor features, and a brand new `migrate`\ncommand. The `migrate` command rewrites commits, converting large files from\nGit blobs to LFS objects. The most common use case will fix a git push rejected\nfor having large blobs:\n\n```\n$ git push origin master\n# ...\nremote: error: file a.psd is 1.2 gb; this exceeds github's file size limit of 100.00 mb\nto github.com:ttaylorr/demo.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'git@github.com:ttaylorr/demo.git'\n\n$ git lfs migrate info\n*.psd   1.2 GB   27/27 files(s)  100%\n\n$ git lfs migrate import --include=\"*.psd\"\nmigrate: Sorting commits: ..., done\nmigrate: Rewriting commits: 100% (810/810), done\n  master        f18bb746d44e8ea5065fc779bb1acdf3cdae7ed8 -> 35b0fe0a7bf3ae6952ec9584895a7fb6ebcd498b\nmigrate: Updating refs: ..., done\n\n$ git push origin\nGit LFS: (1 of 1 files) 1.2 GB / 1.2 GB\n# ...\nTo github.com:ttaylorr/demo.git\n * [new branch]      master -> master\n```\n\nThe `migrate` command has detailed options described in the `git-lfs-migrate(1)`\nman page. Keep in mind that this is the first pass at such a command, so we\nexpect there to be bugs and performance issues (especially on long git histories).\nFuture updates to the command will be focused on improvements to allow full\nLFS transitions on large repositories.\n\n### Features\n\n* commands: add git-lfs-migrate(1) 'import' subcommand #2353 (@ttaylorr)\n* commands: add git-lfs-migrate(1) 'info' subcommand #2313 (@ttaylorr)\n* Implement status --json #2311 (@asottile)\n* commands/uploader: allow incomplete pushes #2199 (@ttaylorr)\n\n### Bugs\n\n* Retry on timeout or temporary errors #2312 (@jakub-m)\n* commands/uploader: don't verify locks if verification is disabled #2278 (@ttaylorr)\n* Fix tools.TranslateCygwinPath() on MSYS #2277 (@raleksandar)\n* commands/clone: add new flags since Git 2.9 #2251, #2252 (@ttaylorr)\n* Make pull return non-zero error code when some downloads failed #2237 (@seth2810)\n* tq/basic_download: guard against nil HTTP response #2227 (@ttaylorr)\n* Bugfix: cannot push to scp style URL #2198 (@jiangxin)\n* support lfs.<url>.* values where url does not include .git #2192 (@technoweenie)\n* commands: fix logged error not interpolating format qualifiers #2228 (@ttaylorr)\n* commands/help: print helptext to stdout for consistency with Git #2210 (@ttaylorr)\n\n### Misc\n\n* Minor cleanups in help index #2248 (@dpursehouse)\n* Add git-lfs-lock and git-lfs-unlock to help index #2232 (@dpursehouse)\n* packagecloud: add Debian 9 entry to formatted list #2211 (@ttaylorr)\n* Update Xenial is to use stretch packages #2212 (@andyneff)\n\n## 2.1.1 (19 May, 2017)\n\nGit LFS v2.1.1 ships with bug fixes and a security patch fixing a remote code\nexecution vulnerability exploitable by setting a SSH remote via your\nrepository's `.lfsconfig` to contain the string \"-oProxyCommand\". This\nvulnerability is only exploitable if an attacker has write access to your\nrepository, or you clone a repository with a `.lfsconfig` file containing that\nstring.\n\n### Bugs\n\n* Make pull return non-zero error code when some downloads failed #2245 (@seth2810, @technoweenie)\n* lfsapi: support cross-scheme redirection #2243 (@ttaylorr)\n* sanitize ssh options parsed from ssh:// url #2242 (@technoweenie)\n* filepathfilter: interpret as .gitignore syntax #2238 (@technoweenie)\n* tq/basic_download: guard against nil HTTP response #2229 (@ttaylorr)\n* commands: fix logged error not interpolating format qualifiers #2230 (@ttaylorr)\n\n### Misc\n\n* release: backport Debian 9-related changes #2244 (@ssgelm, @andyneff, @ttaylorr)\n* Add git-lfs-lock and git-lfs-unlock to help index #2240 (@dpursehouse)\n* config: allow multiple environments when calling config.Unmarshal #2224 (@ttaylorr)\n\n## 2.1.0 (28 April, 2017)\n\n### Features\n\n* commands/track: teach --no-modify-attrs #2175 (@ttaylorr)\n* commands/status: add blob info to each entry #2070 (@ttaylorr)\n* lfsapi: improve HTTP request/response stats #2184 (@technoweenie)\n* all: support URL-style configuration lookups (@ttaylorr)\n  * commands: support URL-style lookups for `lfs.{url}.locksverify` #2162 (@ttaylorr)\n  * lfsapi: support URL-style lookups for `lfs.{url}.access` #2161 (@ttaylorr)\n  * lfsapi/certs: use `*config.URLConfig` to do per-host config lookup #2160 (@ttaylorr)\n  * lfsapi: support for http.<url>.extraHeader #2159 (@ttaylorr)\n  * config: add prefix to URLConfig type #2158 (@ttaylorr)\n  * config: remove dependency on lfsapi package #2156 (@ttaylorr)\n  * config: support multi-value lookup on URLConfig #2154 (@ttaylorr)\n  * lfsapi: initial httpconfig type #1912 (@technoweenie, @ttaylorr)\n* lfsapi,tq: relative expiration support #2130 (@ttaylorr)\n\n### Bugs\n\n* commands: include error in `LoggedError()` #2179 (@ttaylorr)\n* commands: cross-platform log formatting to files #2178 (@ttaylorr)\n* locks: cross-platform path normalization #2139 (@ttaylorr)\n* commands,locking: don't disable locking for auth errors during verify #2110 (@ttaylorr)\n* commands/status: show partially staged files twice #2067 (@ttaylorr)\n\n### Misc\n\n* all: build on Go 1.8.1 #2145 (@ttaylorr)\n* Polish custom-transfers.md #2171 (@sprohaska)\n* commands/push: Fix typo in comment #2170 (@sprohaska)\n* config: support multi-valued config entries #2152 (@ttaylorr)\n* smudge: use localstorage temp directory, not system #2140 (@ttaylorr)\n* locking: send locks limit to server #2107 (@ttaylorr)\n* lfs: extract `DiffIndexScanner` #2035 (@ttaylorr)\n* status: use DiffIndexScanner to populate results #2042 (@ttaylorr)\n\n## 2.0.2 (29 March, 2017)\n\n### Features\n\n* ssh auth and credential helper caching #2094 (@ttaylorr)\n* commands,tq: specialized logging for missing/corrupt objects #2085 (@ttaylorr)\n* commands/clone: install repo-level hooks after `git lfs clone` #2074\n* (@ttaylorr)\n* debian: Support building on armhf and arm64 #2089 (@p12tic)\n\n### Bugs\n\n* commands,locking: don't disable locking for auth errors during verify #2111\n* (@ttaylorr)\n* commands: show real error while cleaning #2096 (@ttaylorr)\n* lfsapi/auth: optionally prepend an empty scheme to Git remote URLs #2092\n* (@ttaylorr)\n* tq/verify: authenticate verify requests if required #2084 (@ttaylorr)\n* commands/{,un}track: correctly escape '#' and ' ' characters #2079 (@ttaylorr)\n* tq: use initialized lfsapi.Client instances in transfer adapters #2048\n* (@ttaylorr)\n\n### Misc\n\n* locking: send locks limit to server #2109 (@ttaylorr)\n* docs: update configuration documentation #2097 #2019 #2102 (@terrorobe)\n* docs: update locking API documentation #2099 #2101 (@dpursehouse)\n* fixed table markdown in README.md #2095 (@ZaninAndrea)\n* remove the the duplicate work #2098 (@grimreaper)\n\n## 2.0.1 (6 March, 2017)\n\n### Misc\n\n* tq: fallback to `_links` if present #2007 (@ttaylorr)\n\n## 2.0.0 (1 March, 2017)\n\nGit LFS v2.0.0 brings a number of important bug fixes, some new features, and\na lot of internal refactoring. It also completely removes old APIs that were\ndeprecated in Git LFS v0.6.\n\n### Locking\n\nFile Locking is a brand new feature that lets teams communicate when they are\nworking on files that are difficult to merge. Users are not able to edit or push\nchanges to any files that are locked by other users. While the feature has been\nin discussion for a year, we are releasing a basic Locking implementation to\nsolicit feedback from the community.\n\n### Transfer Queue\n\nLFS 2.0 introduces a new Git Scanner, which walks a range of Git commits looking\nfor LFS objects to transfer. The Git Scanner is now asynchronous, initiating\nlarge uploads or downloads in the Transfer Queue immediately once an LFS object\nis found. Previously, the Transfer Queue waited until all of the Git commits\nhave been scanned before initiating the transfer. The Transfer Queue also\nautomatically retries failed uploads and downloads more often.\n\n### Deprecations\n\nGit LFS v2.0.0 also drops support for the legacy API in v0.5.0. If you're still\nusing LFS servers on the old API, you'll have to stick to v1.5.6.\n\n### Features\n\n* Mid-stage locking support #1769 (@sinbad)\n* Define lockable files, make read-only in working copy #1870 (@sinbad)\n* Check that files are not uncommitted before unlock #1896 (@sinbad)\n* Fix `lfs unlock --force` on a missing file #1927 (@technoweenie)\n* locking: teach pre-push hook to check for locks #1815 (@ttaylorr)\n* locking: add `--json` flag #1814 (@ttaylorr)\n* Implement local lock cache, support querying it #1760 (@sinbad)\n* support for client certificates pt 2 #1893 (@technoweenie)\n* Fix clash between progress meter and credential helper #1886 (@technoweenie)\n* Teach uninstall cmd about --local and --system #1887 (@technoweenie)\n* Add `--skip-repo` option to `git lfs install` & use in tests #1868 (@sinbad)\n* commands: convert push, pre-push to use async gitscanner #1812 (@ttaylorr)\n* tq: prioritize transferring retries before new items #1758 (@ttaylorr)\n\n### Bugs\n\n* ensure you're in the correct directory when installing #1793 (@technoweenie)\n* locking: make API requests relative to repository, not root #1818 (@ttaylorr)\n* Teach 'track' about CRLF #1914 (@technoweenie)\n* Teach 'track' how to handle empty lines in .gitattributes #1921 (@technoweenie)\n* Closing stdout pipe before function return #1861 (@monitorjbl)\n* Custom transfer terminate #1847 (@sinbad)\n* Fix Install in root problems #1727 (@technoweenie)\n* cat-file batch: read all of the bytes #1680 (@technoweenie)\n* Fixed file paths on cygwin. #1820, #1965 (@creste, @ttaylorr)\n* tq: decrement uploaded bytes in basic_upload before retry #1958 (@ttaylorr)\n* progress: fix never reading bytes with sufficiently small files #1955 (@ttaylorr)\n* tools: fix truncating string fields between balanced quotes in GIT_SSH_COMMAND #1962 (@ttaylorr)\n* commands/smudge: treat empty pointers as empty files #1954 (@ttaylorr)\n\n### Misc\n\n* all: build using Go 1.8 #1952 (@ttaylorr)\n* Embed the version information into the Windows executable #1689 (@sschuberth)\n* Add more meta-data to the Windows installer executable #1752 (@sschuberth)\n* docs/api: object size must be positive #1779 (@ttaylorr)\n* build: omit DWARF tables by default #1937 (@ttaylorr)\n* Add test to prove set operator [] works in filter matching #1768 (@sinbad)\n* test: add ntlm integration test #1840 (@technoweenie)\n* lfs/tq: completely remove legacy support #1686 (@ttaylorr)\n* remove deprecated features #1679 (@technoweenie)\n* remove legacy api support #1629 (@technoweenie)\n\n## 1.5.6 (16 February, 2017)\n\n## Bugs\n\n* Spool malformed pointers to avoid deadlock #1932 (@ttaylorr)\n\n## 1.5.5 (12 January, 2017)\n\n### Bugs\n\n* lfs: only buffer first 1k when creating a CleanPointerError #1856 (@ttaylorr)\n\n## 1.5.4 (27 December, 2016)\n\n### Bugs\n\n* progress: guard negative padding width, panic in `strings.Repeat` #1807 (@ttaylorr)\n* commands,lfs: handle malformed pointers #1805 (@ttaylorr)\n\n### Misc\n\n* script/packagecloud: release LFS on fedora/25 #1798 (@ttaylorr)\n* backport filepathfilter to v1.5.x #1782 (@technoweenie)\n\n## 1.5.3 (5 December, 2016)\n\n### Bugs\n\n* Support LFS installations at filesystem root #1732 (@technoweenie)\n* git: parse filter process header values containing '=' properly #1733 (@larsxschneider)\n* Fix SSH endpoint parsing #1738 (@technoweenie)\n\n### Misc\n\n* build: release on Go 1.7.4 #1741 (@ttaylorr)\n\n## 1.5.2 (22 November, 2016)\n\n### Features\n\n* Release LFS on Fedora 24 #1685 (@technoweenie)\n\n### Bugs\n\n* filter-process: fix reading 1024 byte files #1708 (@ttaylorr)\n* Support long paths on Windows #1705 (@technoweenie)\n\n### Misc\n\n* filter-process: exit with error if we detect an unknown command from Git #1707 (@ttaylorr)\n* vendor: remove contentaddressable lib #1706 (@technoweenie)\n\n## 1.5.1 (18 November, 2016)\n\n### Bugs\n\n* cat-file --batch parser errors on non-lfs git blobs #1680 (@technoweenie)\n\n## 1.5.0 (17 November, 2016)\n\n### Features\n\n* Filter Protocol Support #1617 (@ttaylorr, @larsxschneider)\n* Fast directory walk #1616 (@sinbad)\n* Allow usage of proxies even when contacting localhost #1605 (@chalstrick)\n\n### Bugs\n\n* start reading off the Watch() channel before sending any input #1671 (@technoweenie)\n* wait for remote ref commands to exit before returning #1656 (@jjgod, @technoweenie)\n\n### Misc\n\n* rewrite new catfilebatch implementation for upcoming gitscanner pkg #1650 (@technoweenie)\n* refactor testutils.FileInput so it's a little more clear #1666 (@technoweenie)\n* Update the lfs track docs #1642 (@technoweenie)\n* Pre push tracing #1638 (@technoweenie)\n* Remove `AllGitConfig()` #1634 (@technoweenie)\n* README: set minimal required Git version to 1.8.5 #1636 (@larsxschneider)\n* 'smudge --info' is deprecated in favor of 'ls-files' #1631 (@technoweenie)\n* travis-ci: test GitLFS with ancient Git version #1626 (@larsxschneider)\n\n## 1.4.4 (24 October, 2016)\n\n### Bugs\n\n* transfer: more descriptive \"expired at\" errors #1603 (@ttaylorr)\n* commands,lfs/tq: Only send unique OIDs to the Transfer Queue #1600 (@ttaylorr)\n* Expose the result message in case of an SSH authentication error #1599 (@sschuberth)\n\n### Misc\n\n* AppVeyor: Do not build branches with open pull requests #1594 (@sschuberth)\n* Update .mailmap #1593 (@dpursehouse)\n\n## 1.4.3 (17 October, 2016)\n\n### Bugs\n\n* lfs/tq: use extra arguments given to tracerx.Printf #1583 (@ttaylorr)\n* api: correctly print legacy API warning to Stderr #1582 (@ttaylorr)\n\n### Misc\n\n* Test storage retries #1585 (@ttaylorr)\n* Test legacy check retries behavior #1584 (@ttaylorr)\n* docs: Fix a link to the legacy API #1579 (@sschuberth)\n* Add a .mailmap file #1577 (@sschuberth)\n* Add a large wizard image to the Windows installer #1575 (@sschuberth)\n* Appveyor badge #1574 (@ttaylorr)\n\n## 1.4.2 (10 October, 2016)\n\nv1.4.2 brings a number of bug fixes and usability improvements to LFS. This\nrelease also adds support for multiple retries within the transfer queue, making\ntransfers much more reliable. To enable this feature, see the documentation for\n`lfs.transfer.maxretries` in `git-lfs-config(5)`.\n\nWe'd also like to extend a special thank-you to @sschuberth who undertook the\nprocess of making LFS's test run on Windows through AppVeyor. Now all pull\nrequests run tests on macOS, Linux, and Windows.\n\n### Features\n\n* lfs: warn on usage of the legacy API #1564 (@ttaylorr)\n* use filepath.Clean() when comparing filenames to include/exclude patterns #1565 (@technoweenie)\n* lfs/transfer_queue: support multiple retries per object #1505, #1528, #1535, #1545 (@ttaylorr)\n* Automatically upgrade old filters instead of requiring \u2014force #1497 (@sinbad)\n* Allow lfs.pushurl in .lfsconfig #1489 (@technoweenie)\n\n### Bugs\n\n* Use \"sha256sum\" on Windows  #1566 (@sschuberth)\n* git: ignore non-root wildcards #1563 (@ttaylorr)\n* Teach status to recognize multiple files with identical contents #1550 (@ttaylorr)\n* Status initial commit #1540 (@sinbad)\n* Make path comparison robust against Windows short / long path issues #1523 (@sschuberth)\n* Allow fetch to run without a remote configured #1507 (@sschuberth)\n\n### Misc\n\n* travis: run tests on Go 1.7.1 #1568 (@ttaylorr)\n* Enable running tests on AppVeyor CI #1567 (@sschuberth)\n* Travis: Only install git if not installed yet #1557 (@sschuberth)\n* Windows test framework fixes #1522 (@sschuberth)\n* Simplify getting the absolute Git root directory #1518 (@sschuberth)\n* Add icons to the Windows installer #1504 (@sschuberth)\n* docs/man: reference git-lfs-pointer(1) in clean documentation #1503 (@ttaylorr)\n* Make AppVeyor CI for Windows work again #1506 (@sschuberth)\n* commands: try out RegisterCommand() #1495 (@technoweenie)\n\n## 1.4.1 (26 August, 2016)\n\n### Features\n\n* retry if file download failed #1454 (@larsxschneider)\n* Support wrapped clone in current directory #1478 (@ttaylorr)\n\n### Misc\n\n* Test `RetriableReader` #1482 (@ttaylorr)\n\n## 1.4.0 (19 August, 2016)\n\n### Features\n\n* Install LFS at the system level when packaged #1460 (@javabrett)\n* Fetch remote urls #1451 (@technoweenie)\n* add object Authenticated property #1452 (@technoweenie)\n* add support for `url.*.insteadof` in git config #1117, #1443 (@artagnon, @technoweenie)\n\n### Bugs\n\n* fix --include bug when multiple files have same lfs content #1458 (@technoweenie)\n* check the git version is ok in some key commands #1461 (@technoweenie)\n* fix duplicate error reporting #1445, #1453 (@dpursehouse, @technoweenie)\n* transfer/custom: encode \"event\" as lowercase #1441 (@ttaylorr)\n\n### Misc\n\n* docs/man: note GIT_LFS_PROGRESS #1469 (@ttaylorr)\n* Reword the description of HTTP 509 status #1467 (@dpursehouse)\n* Update fetch include/exclude docs for pattern matching #1455 (@ralfthewise)\n* config-next: API changes to the `config` package #1425 (@ttaylorr)\n* errors-next: Contextualize error messages #1463 (@ttaylorr, @technoweenie)\n* scope commands to not leak instances of themselves #1434 (@technoweenie)\n* Transfer manifest #1430 (@technoweenie)\n\n## 1.3.1 (2 August 2016)\n\n### Features\n\n* lfs/hook: teach `lfs.Hook` about `core.hooksPath` #1409 (@ttaylorr)\n\n### Bugs\n\n* distinguish between empty include/exclude paths #1411 (@technoweenie)\n* Fix sslCAInfo config lookup when host in config doesn't have a trailing slash #1404 (@dakotahawkins)\n\n### Misc\n\n* Use commands.Config instead of config.Config #1390 (@technoweenie)\n\n## 1.3.0 (21 July 2016)\n\n### Features\n\n* use proxy from git config #1173, #1358 (@jonmagic, @LizzHale, @technoweenie)\n* Enhanced upload/download of LFS content: #1265 #1279 #1297 #1303 #1367 (@sinbad)\n  * Resumable downloads using HTTP range headers\n  * Resumable uploads using [tus.io protocol](http://tus.io)\n  * Pluggable [custom transfer adapters](https://github.com/git-lfs/git-lfs/blob/master/docs/custom-transfers.md)\n* In git 2.9+, run \"git lfs pull\" in submodules after \"git lfs clone\" #1373 (@sinbad)\n* cmd,doc,test: teach `git lfs track --{no-touch,verbose,dry-run}` #1344 (@ttaylorr)\n* \u23f3 Retry transfers with expired actions #1350 (@ttaylorr)\n* Safe track patterns #1346 (@ttaylorr)\n* Add checkout --unstaged flag #1262 (@orivej)\n* cmd/clone: add include/exclude via flags and config #1321 (@ttaylorr)\n* Improve progress reporting when files skipped #1296 (@sinbad)\n* Experimental file locking commands #1236, #1259, #1256, #1386 (@ttaylorr)\n* Implement support for GIT_SSH_COMMAND #1260 (@pdf)\n* Recognize include/exclude filters from config #1257 (@ttaylorr)\n\n### Bugs\n\n* Fix bug in Windows installer under Win32. #1200 (@teo-tsirpanis)\n* Updated request.GetAuthType to handle multi-value auth headers #1379 (@VladimirKhvostov)\n* Windows fixes #1374 (@sinbad)\n* Handle artifactory responses #1371 (@ttaylorr)\n* use `git rev-list --stdin` instead of passing each remote ref #1359 (@technoweenie)\n* docs/man: move \"logs\" subcommands from OPTIONS to COMMANDS #1335 (@ttaylorr)\n* test/zero-len: update test for git v2.9.1 #1369 (@ttaylorr)\n* Unbreak building httputil on OpenBSD #1360 (@jasperla)\n* WIP transferqueue race fix #1255 (@technoweenie)\n* Safety check to `comands.requireStdin` #1349 (@ttaylorr)\n* Removed CentOS 5 from dockers. Fixed #1295. #1298 (@javabrett)\n* Fix 'git lfs fetch' with a sha1 ref #1323 (@omonnier)\n* Ignore HEAD ref when fetching with --all #1310 (@ttaylorr)\n* Return a fully remote ref to reduce chances of ref clashes #1248 (@technoweenie)\n* Fix reporting of `git update-index` errors in `git lfs checkout` and `git lfs pull` #1400 (@technoweenie)\n\n### Misc\n\n* Added Linux Mint Sarah to package cloud script #1384 (@andyneff)\n* travis-ci: require successful tests against upcoming Git core release #1372 (@larsxschneider)\n* travis-ci: add a build job to test against upcoming versions of Git #1361 (@larsxschneider)\n* Create Makefiles for building with gccgo #1222 (@zeldin)\n* README: add @ttaylorr to core team #1332 (@ttaylorr)\n* Enforced a minimum gem version of 1.0.4 for packagecloud-ruby #1292 (@javabrett)\n* I think this should be \"Once installed\" and not \"One installed\", but \u2026 #1305 (@GabLeRoux)\n* script/test: propagate extra args to go test #1324 (@omonnier)\n* Add `lfs.basictransfersonly` option to disable non-basic transfer adapters #1299 (@sinbad)\n* Debian build vendor test excludes #1291 (@javabrett)\n* gitignore: ignore lfstest-\\* files #1271 (@ttaylorr)\n* Disable gojsonschema test, causes failures when firewalls block it #1274 (@sinbad)\n* test: use noop credential helper for auth tests #1267 (@ttaylorr)\n* get git tests passing when run outside of repository #1229 (@technoweenie)\n* Package refactor no.1 #1226 (@sinbad)\n* vendor: vendor dependencies in vendor/ using Glide #1243 (@ttaylorr)\n\n## 1.2.1 (2 June 2016)\n\n### Features\n\n* Add missing config details to `env` command #1217 (@sinbad)\n* Allow smudge filter to return 0 on download failure #1213 (@sinbad)\n* Add `git lfs update --manual` option & promote it on hook install fail #1182 (@sinbad)\n* Pass `git lfs clone` flags through to `git clone` correctly, respect some options #1160 (@sinbad)\n\n### Bugs\n\n* Clean trailing `/` from include/exclude paths #1278 (@ttaylorr)\n* Fix problems with user prompts in `git lfs clone` #1185 (@sinbad)\n* Fix failure to return non-zero exit code when lfs install/update fails to install hooks #1178 (@sinbad)\n* Fix missing man page #1149 (@javabrett)\n* fix concurrent map read and map write #1179 (@technoweenie)\n\n### Misc\n\n* Allow additional fields on request & response schema #1276 (@sinbad)\n* Fix installer error on win32. #1198 (@teo-tsirpanis)\n* Applied same -ldflags -X name value -> name=value fix #1193 (@javabrett)\n* add instructions to install from MacPorts #1186 (@skymoo)\n* Add xenial repo #1170 (@graingert)\n\n## 1.2.0 (14 April 2016)\n\n### Features\n\n* netrc support #715 (@rubyist)\n* `git lfs clone` command #988 (@sinbad)\n* Support self-signed certs #1067 (@sinbad)\n* Support sslverify option for specific hosts #1081 (@sinbad)\n* Stop transferring duplicate objects on major push or fetch operations on multiple refs. #1128 (@technoweenie)\n* Touch existing git tracked files when tracked in LFS so they are flagged as modified #1104 (@sinbad)\n* Support for git reference clones #1007 (@jlehtnie)\n\n### Bugs\n\n* Fix clean/smudge filter string for files starting with - #1083 (@epriestley)\n* Fix silent failure to push LFS objects when ref matches a filename in the working copy #1096 (@epriestley)\n* Fix problems with using LFS in symlinked folders #818 (@sinbad)\n* Fix git lfs push silently misbehaving on ambiguous refs; fail like git push instead #1118 (@sinbad)\n* Whitelist `lfs.*.access` config in local ~/.lfsconfig #1122 (@rjbell4)\n* Only write the encoded pointer information to Stdout #1105 (@sschuberth)\n* Use hardcoded auth from remote or lfs config when accessing the storage api #1136 (@technoweenie, @jonmagic)\n* SSH should be called more strictly with command as one argument #1134 (@sinbad)\n\n## 1.1.2 (1 March, 2016)\n\n* Fix Base64 issues with `?` #989 (@technoweenie)\n* Fix zombie git proc issue #1012 (@rlaakkol)\n* Fix problems with files containing unicode characters #1016 (@technoweenie)\n* Fix panic in `git cat-file` parser #1006 (@technoweenie)\n* Display error messages in non-fatal errors #1028 #1039 #1042 (@technoweenie)\n* Fix concurrent map access in progress meter (@technoweenie)\n\n## 1.1.1 (4 February, 2016)\n\n### Features\n\n* Add copy-on-write support for Linux BTRFS filesystem #952 (@bozaro)\n* convert `git://` remotes to LFS servers automatically #964 (@technoweenie)\n* Fix `git lfs track` handling of absolute paths. #975  (@technoweenie)\n* Allow tunable http client timeouts #977 (@technoweenie)\n\n### Bugs\n\n* Suppress git config warnings for non-LFS keys #861 (@technoweenie)\n* Fix fallthrough when `git-lfs-authenticate` returns an error #909 (@sinbad)\n* Fix progress bar issue #883 (@pokehanai)\n* Support `remote.name.pushurl` config #949 (@sinbad)\n* Fix handling of `GIT_DIR` and `GIT_WORK_TREE` #963, #971 (@technoweenie)\n* Fix handling of zero length files #966 (@nathanhi)\n* Guard against invalid remotes passed to `push` and `pre-push` #974 (@technoweenie)\n* Fix race condition in `git lfs pull` #972 (@technoweenie)\n\n### Extra\n\n* Add server API test tool #868 (@sinbad)\n* Redo windows installer with innosetup #875 (@strich)\n* Pre-built packages are built with Go v1.5.3\n\n## 1.1.0 (18 November, 2015)\n\n* NTLM auth support #820 (@WillHipschman, @technoweenie)\n* Add `prune` command #742 (@sinbad)\n* Use .lfsconfig instead of .gitconfig #837 (@technoweenie)\n* Rename \"init\" command #838 (@technoweenie)\n* Raise error if credentials are needed #842 (@technoweenie)\n* Support git repos in symlinked directories #818 (@sinbad, @difro, @jiangxin)\n* Fix \"git lfs env\" to show correct SSH remote info #828 (@jiangxin)\n\n## 1.0.2 (28 October, 2015)\n\n* Fix issue with 'git lfs smudge' and the batch API. #795 (@technoweenie)\n* Fix race condition in the git scanning code. #801 (@technoweenie)\n\n## 1.0.1 (23 October, 2015)\n\n* Downcase git config keys (prevents Auth loop) #690 (@WillHipschman)\n* Show more info for unexpected http responses #710 (@rubyist)\n* Use separate stdout/stderr buffers for `git-lfs-authenticate` #718 (@bozaro)\n* Use LoggedError instead of Panic if update-index fails in checkout #735 (@sinbad)\n* `smudge` command exits with non-zero if the download fails #732 (@rubyist)\n* Use `git rev-parse` to find the git working dir #692 (@sinbad)\n* Improved default remote behaviour & validation for fetch/pull #713 (@sinbad)\n* Make fetch return error code when 1+ downloads failed #734 (@sinbad)\n* Improve lfs.InRepo() detection in `init`/`update` #756 (@technoweenie)\n* Teach smudge to use the batch api #711 (@rubyist)\n* Fix not setting global attribute when needed to b/c of local state #765 (@sinbad)\n* Fix clone fail when fetch is excluded globally #770 (@sinbad)\n* Fix for partial downloads problem #763 (@technoweenie)\n* Get integration tests passing on Windows #771 (@sinbad)\n\n### Security\n\n* Whitelist the valid keys read from .gitconfig #760 (@technoweenie)\n\nThis prevents unsafe git configuration values from being used by Git LFS.\n\n## v1.0 (1 October, 2015)\n\n* Manual reference is integrated into the \"help\" options #665 @sinbad\n* Fix `ls-files` when run from an empty repository #668 @Aorjoa\n* Support listing duplicate files in `ls-files` #681 @Aorjoa @technoweenie\n* `update` and `init` commands can install the pre-push hook in bare repositories #671 @technoweenie\n* Add `GIT_LFS_SKIP_SMUDGE` and `init --skip-smudge` #679 @technoweenie\n\n## v0.6.0 (10 September, 2015)\n\nThis is the first release that uses the new Batch API by default, while still\nfalling back to the Legacy API automatically. Also, new fetch/checkout/push\ncommands have been added.\n\nRun `git lfs update` in any local repositories to make sure all config settings\nare updated.\n\n### Fetch\n\n* Rename old `git lfs fetch` command to `git lfs pull`. #527 (@sinbad)\n* Add `git lfs checkout` #527 #543 #551 #566 (@sinbad)\n* Add `git lfs fetch` for _just_ downloading objects. #527 (@sinbad)\n  * Add `remote` arg, and default to tracking remote instead of \"origin\". #583 (@sinbad)\n  * Support fetching multiple refs #542 (@sinbad)\n  * Add `--include` and `--exclude` flag for `git lfs fetch` #573 (@sinbad)\n  * Add `--recent` flag for downloading recent files outside of the current\n    checkout. #610 (@sinbad)\n  * Add `--all` option for download all objects from the server. #633 (@sinbad)\n* Fix error handling while `git update-index` is running. #570 (@rubyist)\n\nSee [git-lfs-fetch(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-fetch.1.ronn),\n[git-lfs-checkout(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-checkout.1.ronn),\nand [git-lfs-pull(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-pull.1.ronn)\n for details.\n\n### Push\n\n* Support pushing multiple branches in the pre-push hook. #635 (@sinbad)\n* Fix pushing objects from a branch that's not HEAD. #608 (@sinbad)\n* Check server for objects before failing push because local is missing. #581 (@sinbad)\n* Filter out commits from remote refs when pushing. #578 (@billygor)\n* Support pushing all objects to the server, regardless of the remote ref. #646 (@technoweenie)\n* Fix case where pre-push git hook exits with 0. #582 (@sinbad)\n\nSee [git-lfs-push(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-push.1.ronn) for details.\n\n### API Clients\n\n* Fix some race conditions in the Batch API client. #577 #637 (@sinbad, @rubyist)\n* Support retries in the Batch API client. #595 (@rubyist)\n* Fix hanging batch client in certain error conditions. #594 (@rubyist)\n* Treat 401 responses as errors in the Legacy API client. #634 (@rubyist)\n* Fix bug in the Legacy API client when the object already exists on the server. #572 (@billygor)\n\n### Credentials\n\n* Fix how git credentials are checked in certain edge cases. #611 #650 #652 (@technoweenie)\n* Send URI user to git credentials. #626 (@sinbad)\n* Support git credentials with useHttpPath enabled. #554 (@clareliguori)\n\n### Installation\n\n* Docker images and scripts for building and testing linux packages. #511 #526 #555 #603 (@andyneff, @ssgelm)\n* Create Windows GUI installer. #642 (@technoweenie)\n* Binary releases use Go 1.5, which includes fix for Authorization when the\n  request URL includes just the username. [golang/go#11399](https://github.com/golang/go/issues/11399)\n\n### Misc\n\n* Documented Git config values used by Git LFS in [git-lfs-config(5)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-config.5.ronn). #610 (@sinbad)\n* Experimental support for Git worktrees (in Git 2.5+) #546 (@sinbad)\n* Experimental extension support. #486 (@ryansimmen)\n\n## v0.5.4 (30 July, 2015)\n\n* Ensure `git lfs uninit` cleans your git config thoroughly. #530 (@technoweenie)\n* Fix issue with asking `git-credentials` for auth details after getting them\nfrom the SSH command. #534 (@technoweenie)\n\n## v0.5.3 (23 July, 2015)\n\n* `git lfs fetch` bugs #429 (@rubyist)\n* Push can crash on 32 bit architectures #450 (@rubyist)\n* Improved SSH support #404, #464 (@sinbad, @technoweenie)\n* Support 307 redirects with relative url #442 (@sinbad)\n* Fix `init` issues when upgrading #446 #451 #452 #465 (@technoweenie, @rubyist)\n* Support chunked Transfer-Encoding #386 (@ryansimmen)\n* Fix issue with pushing deleted objects #461 (@technoweenie)\n* Teach `git lfs push` how to send specific objects #449 (@larsxschneider)\n* Update error message when attempting to push objects that don't exist in `.git/lfs/objects` #447 (@technoweenie)\n* Fix bug in HTTP client when response body is nil #472 #488 (@rubyist, @technoweenie)\n* `-crlf` flag in gitattributes is deprecated #475 (@technoweenie)\n* Improvements to the CentOS and Debian build and package scripts (@andyneff, @ssgelm)\n\n## v0.5.2 (19 June, 2015)\n\n* Add `git lfs fetch` command for downloading objects. #285 (@rubyist)\n* Fix `git lfs track` issues when run outside of a git repository #312, #323 (@michael-k, @Aorjoa)\n* Fix `git lfs track` for paths with spaces in them #327 (@technoweenie)\n* Fix `git lfs track` by writing relative paths to .gitattributes #356 (@michael-k)\n* Fix `git lfs untrack` so it doesn't remove entries incorrectly from .gitattributes #398 (@michael-k)\n* Fix `git lfs clean` bug with zero length files #346 (@technoweenie)\n* Add `git lfs fsck` #373 (@zeroshirts, @michael-k)\n* The Git pre-push warns if Git LFS is not installed #339 (@rubyist)\n* Fix Content-Type header sent by the HTTP client #329 (@joerg)\n* Improve performance tracing while scanning refs #311 (@michael-k)\n* Fix detection of LocalGitDir and LocalWorkingDir #312 #354 #361 (@michael-k)\n* Fix inconsistent file mode bits for directories created by Git LFS #364 (@michael-k)\n* Optimize shell execs #377, #382, #391 (@bozaro)\n* Collect HTTP transfer stats #366, #400 (@rubyist)\n* Support GIT_DIR and GIT_WORK_TREE #370 (@michael-k)\n* Hide Git application window in Windows #381 (@bozaro)\n* Add support for configured URLs containing credentials per RFC1738 #408 (@ewbankkit, @technoweenie)\n* Add experimental support for batch API calls #285 (@rubyist)\n* Improve linux build instructions for CentOS and Debian. #299 #309 #313 #332 (@jsh, @ssgelm, @andyneff)\n\n## v0.5.1 (30 April, 2015)\n\n* Fix Windows install.bat script.  #223 (@PeterDaveHello)\n* Fix bug where `git lfs clean` will clean Git LFS pointers too #271 (@technoweenie)\n* Better timeouts for the HTTP client #215 (@Mistobaan)\n* Concurrent uploads through `git lfs push` #258 (@rubyist)\n* Fix `git lfs smudge` behavior with zero-length file in `.git/lfs/objects` #267 (@technoweenie)\n* Separate out pre-push hook behavior from `git lfs push` #263 (@technoweenie)\n* Add diff/merge properties to .gitattributes #265 (@technoweenie)\n* Respect `GIT_TERMINAL_PROMPT ` #257 (@technoweenie)\n* Fix CLI progress bar output #185 (@technoweenie)\n* Fail fast in `clean` and `smudge` commands when run without STDIN #264 (@technoweenie)\n* Fix shell quoting in pre-push hook.  #235 (@mhagger)\n* Fix progress bar output during file uploads.  #185 (@technoweenie)\n* Change `remote.{name}.lfs_url` to `remote.{name}.lfsurl` #237 (@technoweenie)\n* Swap `git config` order.  #245 (@technoweenie)\n* New `git lfs pointer` command for generating and comparing pointers #246 (@technoweenie)\n* Follow optional \"href\" property from git-lfs-authenticate SSH command #247 (@technoweenie)\n* `.git/lfs/objects` spec clarifications: #212 (@rtyley), #244 (@technoweenie)\n* man page updates: #228 (@mhagger)\n* pointer spec clarifications: #246 (@technoweenie)\n* Code comments for the untrack command: #225 (@thekafkaf)\n\n## v0.5.0 (10 April, 2015)\n\n* Initial public release\n", "package commands\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/git-lfs/git-lfs/config\"\n\t\"github.com/git-lfs/git-lfs/errors\"\n\t\"github.com/git-lfs/git-lfs/filepathfilter\"\n\t\"github.com/git-lfs/git-lfs/git\"\n\t\"github.com/git-lfs/git-lfs/lfs\"\n\t\"github.com/git-lfs/git-lfs/lfsapi\"\n\t\"github.com/git-lfs/git-lfs/locking\"\n\t\"github.com/git-lfs/git-lfs/subprocess\"\n\t\"github.com/git-lfs/git-lfs/tools\"\n\t\"github.com/git-lfs/git-lfs/tq\"\n)\n\n// Populate man pages\n//go:generate go run ../docs/man/mangen.go\n\nvar (\n\tDebugging    = false\n\tErrorBuffer  = &bytes.Buffer{}\n\tErrorWriter  = newMultiWriter(os.Stderr, ErrorBuffer)\n\tOutputWriter = newMultiWriter(os.Stdout, ErrorBuffer)\n\tManPages     = make(map[string]string, 20)\n\ttqManifest   = make(map[string]*tq.Manifest)\n\n\tcfg       *config.Configuration\n\tapiClient *lfsapi.Client\n\tglobal    sync.Mutex\n\n\toldEnv = make(map[string]string)\n\n\tincludeArg string\n\texcludeArg string\n)\n\n// getTransferManifest builds a tq.Manifest from the global os and git\n// environments.\nfunc getTransferManifest() *tq.Manifest {\n\treturn getTransferManifestOperationRemote(\"\", \"\")\n}\n\n// getTransferManifestOperationRemote builds a tq.Manifest from the global os\n// and git environments and operation-specific and remote-specific settings.\n// Operation must be \"download\", \"upload\", or the empty string.\nfunc getTransferManifestOperationRemote(operation, remote string) *tq.Manifest {\n\tc := getAPIClient()\n\n\tglobal.Lock()\n\tdefer global.Unlock()\n\n\tk := fmt.Sprintf(\"%s.%s\", operation, remote)\n\tif tqManifest[k] == nil {\n\t\ttqManifest[k] = tq.NewManifest(cfg.Filesystem(), c, operation, remote)\n\t}\n\n\treturn tqManifest[k]\n}\n\nfunc getAPIClient() *lfsapi.Client {\n\tglobal.Lock()\n\tdefer global.Unlock()\n\n\tif apiClient == nil {\n\t\tc, err := lfsapi.NewClient(cfg)\n\t\tif err != nil {\n\t\t\tExitWithError(err)\n\t\t}\n\t\tapiClient = c\n\t}\n\treturn apiClient\n}\n\nfunc closeAPIClient() error {\n\tglobal.Lock()\n\tdefer global.Unlock()\n\tif apiClient == nil {\n\t\treturn nil\n\t}\n\treturn apiClient.Close()\n}\n\nfunc newLockClient() *locking.Client {\n\tlockClient, err := locking.NewClient(cfg.PushRemote(), getAPIClient(), cfg)\n\tif err == nil {\n\t\ttools.MkdirAll(cfg.LFSStorageDir(), cfg)\n\t\terr = lockClient.SetupFileCache(cfg.LFSStorageDir())\n\t}\n\n\tif err != nil {\n\t\tExit(\"Unable to create lock system: %v\", err.Error())\n\t}\n\n\t// Configure dirs\n\tlockClient.LocalWorkingDir = cfg.LocalWorkingDir()\n\tlockClient.LocalGitDir = cfg.LocalGitDir()\n\tlockClient.SetLockableFilesReadOnly = cfg.SetLockableFilesReadOnly()\n\n\treturn lockClient\n}\n\n// newDownloadCheckQueue builds a checking queue, checks that objects are there but doesn't download\nfunc newDownloadCheckQueue(manifest *tq.Manifest, remote string, options ...tq.Option) *tq.TransferQueue {\n\treturn newDownloadQueue(manifest, remote, append(options,\n\t\ttq.DryRun(true),\n\t)...)\n}\n\n// newDownloadQueue builds a DownloadQueue, allowing concurrent downloads.\nfunc newDownloadQueue(manifest *tq.Manifest, remote string, options ...tq.Option) *tq.TransferQueue {\n\treturn tq.NewTransferQueue(tq.Download, manifest, remote, append(options,\n\t\ttq.RemoteRef(currentRemoteRef()),\n\t)...)\n}\n\nfunc currentRemoteRef() *git.Ref {\n\treturn git.NewRefUpdate(cfg.Git, cfg.PushRemote(), cfg.CurrentRef(), nil).Right()\n}\n\nfunc buildFilepathFilter(config *config.Configuration, includeArg, excludeArg *string, useFetchOptions bool) *filepathfilter.Filter {\n\tinc, exc := determineIncludeExcludePaths(config, includeArg, excludeArg, useFetchOptions)\n\treturn filepathfilter.New(inc, exc)\n}\n\nfunc downloadTransfer(p *lfs.WrappedPointer) (name, path, oid string, size int64, missing bool, err error) {\n\tpath, err = cfg.Filesystem().ObjectPath(p.Oid)\n\treturn p.Name, path, p.Oid, p.Size, false, err\n}\n\n// Get user-readable manual install steps for hooks\nfunc getHookInstallSteps() string {\n\thookDir, err := cfg.HookDir()\n\tif err != nil {\n\t\tExitWithError(err)\n\t}\n\thooks := lfs.LoadHooks(hookDir, cfg)\n\tsteps := make([]string, 0, len(hooks))\n\tfor _, h := range hooks {\n\t\tsteps = append(steps, fmt.Sprintf(\n\t\t\t\"Add the following to .git/hooks/%s:\\n\\n%s\",\n\t\t\th.Type, tools.Indent(h.Contents)))\n\t}\n\n\treturn strings.Join(steps, \"\\n\\n\")\n}\n\nfunc installHooks(force bool) error {\n\thookDir, err := cfg.HookDir()\n\tif err != nil {\n\t\treturn err\n\t}\n\thooks := lfs.LoadHooks(hookDir, cfg)\n\tfor _, h := range hooks {\n\t\tif err := h.Install(force); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// uninstallHooks removes all hooks in range of the `hooks` var.\nfunc uninstallHooks() error {\n\tif !cfg.InRepo() {\n\t\treturn errors.New(\"Not in a git repository\")\n\t}\n\n\thookDir, err := cfg.HookDir()\n\tif err != nil {\n\t\treturn err\n\t}\n\thooks := lfs.LoadHooks(hookDir, cfg)\n\tfor _, h := range hooks {\n\t\tif err := h.Uninstall(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// Error prints a formatted message to Stderr.  It also gets printed to the\n// panic log if one is created for this command.\nfunc Error(format string, args ...interface{}) {\n\tif len(args) == 0 {\n\t\tfmt.Fprintln(ErrorWriter, format)\n\t\treturn\n\t}\n\tfmt.Fprintf(ErrorWriter, format+\"\\n\", args...)\n}\n\n// Print prints a formatted message to Stdout.  It also gets printed to the\n// panic log if one is created for this command.\nfunc Print(format string, args ...interface{}) {\n\tif len(args) == 0 {\n\t\tfmt.Fprintln(OutputWriter, format)\n\t\treturn\n\t}\n\tfmt.Fprintf(OutputWriter, format+\"\\n\", args...)\n}\n\n// Exit prints a formatted message and exits.\nfunc Exit(format string, args ...interface{}) {\n\tError(format, args...)\n\tos.Exit(2)\n}\n\n// ExitWithError either panics with a full stack trace for fatal errors, or\n// simply prints the error message and exits immediately.\nfunc ExitWithError(err error) {\n\terrorWith(err, Panic, Exit)\n}\n\n// FullError prints either a full stack trace for fatal errors, or just the\n// error message.\nfunc FullError(err error) {\n\terrorWith(err, LoggedError, Error)\n}\n\nfunc errorWith(err error, fatalErrFn func(error, string, ...interface{}), errFn func(string, ...interface{})) {\n\tif Debugging || errors.IsFatalError(err) {\n\t\tfatalErrFn(err, \"%s\", err)\n\t\treturn\n\t}\n\n\terrFn(\"%s\", err)\n}\n\n// Debug prints a formatted message if debugging is enabled.  The formatted\n// message also shows up in the panic log, if created.\nfunc Debug(format string, args ...interface{}) {\n\tif !Debugging {\n\t\treturn\n\t}\n\tlog.Printf(format, args...)\n}\n\n// LoggedError prints the given message formatted with its arguments (if any) to\n// Stderr. If an empty string is passed as the \"format\" argument, only the\n// standard error logging message will be printed, and the error's body will be\n// omitted.\n//\n// It also writes a stack trace for the error to a log file without exiting.\nfunc LoggedError(err error, format string, args ...interface{}) {\n\tif len(format) > 0 {\n\t\tError(format, args...)\n\t}\n\tfile := handlePanic(err)\n\n\tif len(file) > 0 {\n\t\tfmt.Fprintf(os.Stderr, \"\\nErrors logged to %s\\nUse `git lfs logs last` to view the log.\\n\", file)\n\t}\n}\n\n// Panic prints a formatted message, and writes a stack trace for the error to\n// a log file before exiting.\nfunc Panic(err error, format string, args ...interface{}) {\n\tLoggedError(err, format, args...)\n\tos.Exit(2)\n}\n\nfunc Cleanup() {\n\tif err := cfg.Cleanup(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error clearing old temp files: %s\\n\", err)\n\t}\n}\n\nfunc PipeMediaCommand(name string, args ...string) error {\n\treturn PipeCommand(\"bin/\"+name, args...)\n}\n\nfunc PipeCommand(name string, args ...string) error {\n\tcmd := exec.Command(name, args...)\n\tcmd.Stdin = os.Stdin\n\tcmd.Stderr = os.Stderr\n\tcmd.Stdout = os.Stdout\n\treturn cmd.Run()\n}\n\nfunc requireStdin(msg string) {\n\tvar out string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tout = fmt.Sprintf(\"Cannot read from STDIN. %s (%s)\", msg, err)\n\t} else if (stat.Mode() & os.ModeCharDevice) != 0 {\n\t\tout = fmt.Sprintf(\"Cannot read from STDIN. %s\", msg)\n\t}\n\n\tif len(out) > 0 {\n\t\tError(out)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc requireInRepo() {\n\tif !cfg.InRepo() {\n\t\tPrint(\"Not in a git repository.\")\n\t\tos.Exit(128)\n\t}\n}\n\n// requireWorkingCopy requires that the working directory be a work tree, i.e.,\n// that it not be bare. If it is bare (or the state of the repository could not\n// be determined), this function will terminate the program.\nfunc requireWorkingCopy() {\n\tif cfg.LocalWorkingDir() == \"\" {\n\t\tPrint(\"This operation must be run in a work tree.\")\n\t\tos.Exit(128)\n\t}\n}\n\nfunc setupRepository() {\n\trequireInRepo()\n\tbare, err := git.IsBare()\n\tif err != nil {\n\t\tExitWithError(errors.Wrap(\n\t\t\terr, \"fatal: could not determine bareness\"))\n\t}\n\n\tif !bare {\n\t\tchangeToWorkingCopy()\n\t}\n}\n\nfunc setupWorkingCopy() {\n\trequireInRepo()\n\trequireWorkingCopy()\n\tchangeToWorkingCopy()\n}\n\nfunc changeToWorkingCopy() {\n\tworkingDir := cfg.LocalWorkingDir()\n\tcwd, err := tools.Getwd()\n\tif err != nil {\n\t\tExitWithError(errors.Wrap(\n\t\t\terr, \"fatal: could not determine current working directory\"))\n\t}\n\tcwd, err = filepath.EvalSymlinks(cwd)\n\tif err != nil {\n\t\tExitWithError(errors.Wrap(\n\t\t\terr, \"fatal: could not canonicalize current working directory\"))\n\t}\n\n\t// If the current working directory is not within the repository's\n\t// working directory, then let's change directories accordingly.  This\n\t// should only occur if GIT_WORK_TREE is set.\n\tif !(strings.HasPrefix(cwd, workingDir) && (cwd == workingDir || (len(cwd) > len(workingDir) && cwd[len(workingDir)] == os.PathSeparator))) {\n\t\tos.Chdir(workingDir)\n\t}\n}\n\nfunc canonicalizeEnvironment() {\n\tvars := []string{\"GIT_INDEX_FILE\", \"GIT_OBJECT_DIRECTORY\", \"GIT_DIR\", \"GIT_WORK_TREE\", \"GIT_COMMON_DIR\"}\n\tfor _, v := range vars {\n\t\tval, ok := os.LookupEnv(v)\n\t\tif ok {\n\t\t\tpath, err := tools.CanonicalizePath(val, true)\n\t\t\t// We have existing code which relies on users being\n\t\t\t// able to pass invalid paths, so don't fail if the path\n\t\t\t// cannot be canonicalized.\n\t\t\tif err == nil {\n\t\t\t\toldEnv[v] = val\n\t\t\t\tos.Setenv(v, path)\n\t\t\t}\n\t\t}\n\t}\n\tsubprocess.ResetEnvironment()\n}\n\nfunc handlePanic(err error) string {\n\tif err == nil {\n\t\treturn \"\"\n\t}\n\n\treturn logPanic(err)\n}\n\nfunc logPanic(loggedError error) string {\n\tvar (\n\t\tfmtWriter  io.Writer = os.Stderr\n\t\tlineEnding string    = \"\\n\"\n\t)\n\n\tnow := time.Now()\n\tname := now.Format(\"20060102T150405.999999999\")\n\tfull := filepath.Join(cfg.LocalLogDir(), name+\".log\")\n\n\tif err := tools.MkdirAll(cfg.LocalLogDir(), cfg); err != nil {\n\t\tfull = \"\"\n\t\tfmt.Fprintf(fmtWriter, \"Unable to log panic to %s: %s\\n\\n\", cfg.LocalLogDir(), err.Error())\n\t} else if file, err := os.Create(full); err != nil {\n\t\tfilename := full\n\t\tfull = \"\"\n\t\tdefer func() {\n\t\t\tfmt.Fprintf(fmtWriter, \"Unable to log panic to %s\\n\\n\", filename)\n\t\t\tlogPanicToWriter(fmtWriter, err, lineEnding)\n\t\t}()\n\t} else {\n\t\tfmtWriter = file\n\t\tlineEnding = gitLineEnding(cfg.Git)\n\t\tdefer file.Close()\n\t}\n\n\tlogPanicToWriter(fmtWriter, loggedError, lineEnding)\n\n\treturn full\n}\n\nfunc ipAddresses() []string {\n\tips := make([]string, 0, 1)\n\tifaces, err := net.Interfaces()\n\tif err != nil {\n\t\tips = append(ips, \"Error getting network interface: \"+err.Error())\n\t\treturn ips\n\t}\n\tfor _, i := range ifaces {\n\t\tif i.Flags&net.FlagUp == 0 {\n\t\t\tcontinue // interface down\n\t\t}\n\t\tif i.Flags&net.FlagLoopback != 0 {\n\t\t\tcontinue // loopback interface\n\t\t}\n\t\taddrs, _ := i.Addrs()\n\t\tl := make([]string, 0, 1)\n\t\tif err != nil {\n\t\t\tips = append(ips, \"Error getting IP address: \"+err.Error())\n\t\t\tcontinue\n\t\t}\n\t\tfor _, addr := range addrs {\n\t\t\tvar ip net.IP\n\t\t\tswitch v := addr.(type) {\n\t\t\tcase *net.IPNet:\n\t\t\t\tip = v.IP\n\t\t\tcase *net.IPAddr:\n\t\t\t\tip = v.IP\n\t\t\t}\n\t\t\tif ip == nil || ip.IsLoopback() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tl = append(l, ip.String())\n\t\t}\n\t\tif len(l) > 0 {\n\t\t\tips = append(ips, strings.Join(l, \" \"))\n\t\t}\n\t}\n\treturn ips\n}\n\nfunc logPanicToWriter(w io.Writer, loggedError error, le string) {\n\t// log the version\n\tgitV, err := git.Version()\n\tif err != nil {\n\t\tgitV = \"Error getting git version: \" + err.Error()\n\t}\n\n\tfmt.Fprint(w, config.VersionDesc+le)\n\tfmt.Fprint(w, gitV+le)\n\n\t// log the command that was run\n\tfmt.Fprint(w, le)\n\tfmt.Fprintf(w, \"$ %s\", filepath.Base(os.Args[0]))\n\tif len(os.Args) > 0 {\n\t\tfmt.Fprintf(w, \" %s\", strings.Join(os.Args[1:], \" \"))\n\t}\n\tfmt.Fprint(w, le)\n\n\t// log the error message and stack trace\n\tw.Write(ErrorBuffer.Bytes())\n\tfmt.Fprint(w, le)\n\n\tfmt.Fprintf(w, \"%+v\"+le, loggedError)\n\n\tfor key, val := range errors.Context(err) {\n\t\tfmt.Fprintf(w, \"%s=%v\"+le, key, val)\n\t}\n\n\tfmt.Fprint(w, le+\"Current time in UTC: \"+le)\n\tfmt.Fprint(w, time.Now().UTC().Format(\"2006-01-02 15:04:05\")+le)\n\n\tfmt.Fprint(w, le+\"ENV:\"+le)\n\n\t// log the environment\n\tfor _, env := range lfs.Environ(cfg, getTransferManifest(), oldEnv) {\n\t\tfmt.Fprint(w, env+le)\n\t}\n\n\tfmt.Fprint(w, le+\"Client IP addresses:\"+le)\n\n\tfor _, ip := range ipAddresses() {\n\t\tfmt.Fprint(w, ip+le)\n\t}\n}\n\nfunc determineIncludeExcludePaths(config *config.Configuration, includeArg, excludeArg *string, useFetchOptions bool) (include, exclude []string) {\n\tif includeArg == nil {\n\t\tif useFetchOptions {\n\t\t\tinclude = config.FetchIncludePaths()\n\t\t} else {\n\t\t\tinclude = []string{}\n\t\t}\n\t} else {\n\t\tinclude = tools.CleanPaths(*includeArg, \",\")\n\t}\n\tif excludeArg == nil {\n\t\tif useFetchOptions {\n\t\t\texclude = config.FetchExcludePaths()\n\t\t} else {\n\t\t\texclude = []string{}\n\t\t}\n\t} else {\n\t\texclude = tools.CleanPaths(*excludeArg, \",\")\n\t}\n\treturn\n}\n\nfunc buildProgressMeter(dryRun bool, d tq.Direction) *tq.Meter {\n\tm := tq.NewMeter(cfg)\n\tm.Logger = m.LoggerFromEnv(cfg.Os)\n\tm.DryRun = dryRun\n\tm.Direction = d\n\treturn m\n}\n\nfunc requireGitVersion() {\n\tminimumGit := \"1.8.2\"\n\n\tif !git.IsGitVersionAtLeast(minimumGit) {\n\t\tgitver, err := git.Version()\n\t\tif err != nil {\n\t\t\tExit(\"Error getting git version: %s\", err)\n\t\t}\n\t\tExit(\"git version >= %s is required for Git LFS, your version: %s\", minimumGit, gitver)\n\t}\n}\n", "package config\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n\t\"strings\"\n)\n\nvar (\n\tGitCommit   string\n\tVersionDesc string\n\tVendor      string\n)\n\nconst (\n\tVersion = \"2.13.1\"\n)\n\nfunc init() {\n\tgitCommit := \"\"\n\tif len(GitCommit) > 0 {\n\t\tgitCommit = \"; git \" + GitCommit\n\t}\n\tif len(Vendor) == 0 {\n\t\tVendor = \"GitHub\"\n\t}\n\tVersionDesc = fmt.Sprintf(\"git-lfs/%s (%s; %s %s; go %s%s)\",\n\t\tVersion,\n\t\tVendor,\n\t\truntime.GOOS,\n\t\truntime.GOARCH,\n\t\tstrings.Replace(runtime.Version(), \"go\", \"\", 1),\n\t\tgitCommit,\n\t)\n}\n", "package creds\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/git-lfs/git-lfs/config\"\n\t\"github.com/git-lfs/git-lfs/errors\"\n\t\"github.com/rubyist/tracerx\"\n)\n\n// CredentialHelperWrapper is used to contain the encapsulate the information we need for credential handling during auth.\ntype CredentialHelperWrapper struct {\n\tCredentialHelper CredentialHelper\n\tInput            Creds\n\tUrl              *url.URL\n\tCreds            Creds\n}\n\n// CredentialHelper is an interface used by the lfsapi Client to interact with\n// the 'git credential' command: https://git-scm.com/docs/gitcredentials\n// Other implementations include ASKPASS support, and an in-memory cache.\ntype CredentialHelper interface {\n\tFill(Creds) (Creds, error)\n\tReject(Creds) error\n\tApprove(Creds) error\n}\n\nfunc (credWrapper *CredentialHelperWrapper) FillCreds() error {\n\tcreds, err := credWrapper.CredentialHelper.Fill(credWrapper.Input)\n\tif creds == nil || len(creds) < 1 {\n\t\terrmsg := fmt.Sprintf(\"Git credentials for %s not found\", credWrapper.Url)\n\t\tif err != nil {\n\t\t\terrmsg = fmt.Sprintf(\"%s:\\n%s\", errmsg, err.Error())\n\t\t} else {\n\t\t\terrmsg = fmt.Sprintf(\"%s.\", errmsg)\n\t\t}\n\t\terr = errors.New(errmsg)\n\t}\n\tcredWrapper.Creds = creds\n\treturn err\n}\n\n// Creds represents a set of key/value pairs that are passed to 'git credential'\n// as input.\ntype Creds map[string]string\n\nfunc bufferCreds(c Creds) *bytes.Buffer {\n\tbuf := new(bytes.Buffer)\n\n\tfor k, v := range c {\n\t\tbuf.Write([]byte(k))\n\t\tbuf.Write([]byte(\"=\"))\n\t\tbuf.Write([]byte(v))\n\t\tbuf.Write([]byte(\"\\n\"))\n\t}\n\n\treturn buf\n}\n\ntype CredentialHelperContext struct {\n\tnetrcCredHelper   *netrcCredentialHelper\n\tcommandCredHelper *commandCredentialHelper\n\taskpassCredHelper *AskPassCredentialHelper\n\tcachingCredHelper *credentialCacher\n\n\turlConfig *config.URLConfig\n}\n\nfunc NewCredentialHelperContext(gitEnv config.Environment, osEnv config.Environment) *CredentialHelperContext {\n\tc := &CredentialHelperContext{urlConfig: config.NewURLConfig(gitEnv)}\n\n\tc.netrcCredHelper = newNetrcCredentialHelper(osEnv)\n\n\taskpass, ok := osEnv.Get(\"GIT_ASKPASS\")\n\tif !ok {\n\t\taskpass, ok = gitEnv.Get(\"core.askpass\")\n\t}\n\tif !ok {\n\t\taskpass, _ = osEnv.Get(\"SSH_ASKPASS\")\n\t}\n\tif len(askpass) > 0 {\n\t\tc.askpassCredHelper = &AskPassCredentialHelper{\n\t\t\tProgram: askpass,\n\t\t}\n\t}\n\n\tcacheCreds := gitEnv.Bool(\"lfs.cachecredentials\", true)\n\tif cacheCreds {\n\t\tc.cachingCredHelper = NewCredentialCacher()\n\t}\n\n\tc.commandCredHelper = &commandCredentialHelper{\n\t\tSkipPrompt: osEnv.Bool(\"GIT_TERMINAL_PROMPT\", false),\n\t}\n\n\treturn c\n}\n\n// getCredentialHelper parses a 'credsConfig' from the git and OS environments,\n// returning the appropriate CredentialHelper to authenticate requests with.\n//\n// It returns an error if any configuration was invalid, or otherwise\n// un-useable.\nfunc (ctxt *CredentialHelperContext) GetCredentialHelper(helper CredentialHelper, u *url.URL) CredentialHelperWrapper {\n\trawurl := fmt.Sprintf(\"%s://%s%s\", u.Scheme, u.Host, u.Path)\n\tinput := Creds{\"protocol\": u.Scheme, \"host\": u.Host}\n\tif u.User != nil && u.User.Username() != \"\" {\n\t\tinput[\"username\"] = u.User.Username()\n\t}\n\tif u.Scheme == \"cert\" || ctxt.urlConfig.Bool(\"credential\", rawurl, \"usehttppath\", false) {\n\t\tinput[\"path\"] = strings.TrimPrefix(u.Path, \"/\")\n\t}\n\n\tif helper != nil {\n\t\treturn CredentialHelperWrapper{CredentialHelper: helper, Input: input, Url: u}\n\t}\n\n\thelpers := make([]CredentialHelper, 0, 4)\n\tif ctxt.netrcCredHelper != nil {\n\t\thelpers = append(helpers, ctxt.netrcCredHelper)\n\t}\n\tif ctxt.cachingCredHelper != nil {\n\t\thelpers = append(helpers, ctxt.cachingCredHelper)\n\t}\n\tif ctxt.askpassCredHelper != nil {\n\t\thelper, _ := ctxt.urlConfig.Get(\"credential\", rawurl, \"helper\")\n\t\tif len(helper) == 0 {\n\t\t\thelpers = append(helpers, ctxt.askpassCredHelper)\n\t\t}\n\t}\n\treturn CredentialHelperWrapper{CredentialHelper: NewCredentialHelpers(append(helpers, ctxt.commandCredHelper)), Input: input, Url: u}\n}\n\n// AskPassCredentialHelper implements the CredentialHelper type for GIT_ASKPASS\n// and 'core.askpass' configuration values.\ntype AskPassCredentialHelper struct {\n\t// Program is the executable program's absolute or relative name.\n\tProgram string\n}\n\ntype credValueType int\n\nconst (\n\tcredValueTypeUnknown credValueType = iota\n\tcredValueTypeUsername\n\tcredValueTypePassword\n)\n\n// Fill implements fill by running the ASKPASS program and returning its output\n// as a password encoded in the Creds type given the key \"password\".\n//\n// It accepts the password as coming from the program's stdout, as when invoked\n// with the given arguments (see (*AskPassCredentialHelper).args() below)./\n//\n// If there was an error running the command, it is returned instead of a set of\n// filled credentials.\n//\n// The ASKPASS program is only queried if a credential was not already\n// provided, i.e. through the git URL\nfunc (a *AskPassCredentialHelper) Fill(what Creds) (Creds, error) {\n\tu := &url.URL{\n\t\tScheme: what[\"protocol\"],\n\t\tHost:   what[\"host\"],\n\t\tPath:   what[\"path\"],\n\t}\n\n\tcreds := make(Creds)\n\n\tusername, err := a.getValue(what, credValueTypeUsername, u)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcreds[\"username\"] = username\n\n\tif len(username) > 0 {\n\t\t// If a non-empty username was given, add it to the URL via func\n\t\t// 'net/url.User()'.\n\t\tu.User = url.User(creds[\"username\"])\n\t}\n\n\tpassword, err := a.getValue(what, credValueTypePassword, u)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcreds[\"password\"] = password\n\n\treturn creds, nil\n}\n\nfunc (a *AskPassCredentialHelper) getValue(what Creds, valueType credValueType, u *url.URL) (string, error) {\n\tvar valueString string\n\n\tswitch valueType {\n\tcase credValueTypeUsername:\n\t\tvalueString = \"username\"\n\tcase credValueTypePassword:\n\t\tvalueString = \"password\"\n\tdefault:\n\t\treturn \"\", errors.Errorf(\"Invalid Credential type queried from AskPass\")\n\t}\n\n\t// Return the existing credential if it was already provided, otherwise\n\t// query AskPass for it\n\tif given, ok := what[valueString]; ok {\n\t\treturn given, nil\n\t}\n\treturn a.getFromProgram(valueType, u)\n}\n\nfunc (a *AskPassCredentialHelper) getFromProgram(valueType credValueType, u *url.URL) (string, error) {\n\tvar (\n\t\tvalue bytes.Buffer\n\t\terr   bytes.Buffer\n\n\t\tvalueString string\n\t)\n\n\tswitch valueType {\n\tcase credValueTypeUsername:\n\t\tvalueString = \"Username\"\n\tcase credValueTypePassword:\n\t\tvalueString = \"Password\"\n\tdefault:\n\t\treturn \"\", errors.Errorf(\"Invalid Credential type queried from AskPass\")\n\t}\n\n\t// 'cmd' will run the GIT_ASKPASS (or core.askpass) command prompting\n\t// for the desired valueType (`Username` or `Password`)\n\tcmd := exec.Command(a.Program, a.args(fmt.Sprintf(\"%s for %q\", valueString, u))...)\n\tcmd.Stderr = &err\n\tcmd.Stdout = &value\n\n\ttracerx.Printf(\"creds: filling with GIT_ASKPASS: %s\", strings.Join(cmd.Args, \" \"))\n\tif err := cmd.Run(); err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif err.Len() > 0 {\n\t\treturn \"\", errors.New(err.String())\n\t}\n\n\treturn strings.TrimSpace(value.String()), nil\n}\n\n// Approve implements CredentialHelper.Approve, and returns nil. The ASKPASS\n// credential helper does not implement credential approval.\nfunc (a *AskPassCredentialHelper) Approve(_ Creds) error { return nil }\n\n// Reject implements CredentialHelper.Reject, and returns nil. The ASKPASS\n// credential helper does not implement credential rejection.\nfunc (a *AskPassCredentialHelper) Reject(_ Creds) error { return nil }\n\n// args returns the arguments given to the ASKPASS program, if a prompt was\n// given.\n\n// See: https://git-scm.com/docs/gitcredentials#_requesting_credentials for\n// more.\nfunc (a *AskPassCredentialHelper) args(prompt string) []string {\n\tif len(prompt) == 0 {\n\t\treturn nil\n\t}\n\treturn []string{prompt}\n}\n\ntype commandCredentialHelper struct {\n\tSkipPrompt bool\n}\n\nfunc (h *commandCredentialHelper) Fill(creds Creds) (Creds, error) {\n\ttracerx.Printf(\"creds: git credential fill (%q, %q, %q)\",\n\t\tcreds[\"protocol\"], creds[\"host\"], creds[\"path\"])\n\treturn h.exec(\"fill\", creds)\n}\n\nfunc (h *commandCredentialHelper) Reject(creds Creds) error {\n\t_, err := h.exec(\"reject\", creds)\n\treturn err\n}\n\nfunc (h *commandCredentialHelper) Approve(creds Creds) error {\n\ttracerx.Printf(\"creds: git credential approve (%q, %q, %q)\",\n\t\tcreds[\"protocol\"], creds[\"host\"], creds[\"path\"])\n\t_, err := h.exec(\"approve\", creds)\n\treturn err\n}\n\nfunc (h *commandCredentialHelper) exec(subcommand string, input Creds) (Creds, error) {\n\toutput := new(bytes.Buffer)\n\tcmd := exec.Command(\"git\", \"credential\", subcommand)\n\tcmd.Stdin = bufferCreds(input)\n\tcmd.Stdout = output\n\t/*\n\t   There is a reason we don't read from stderr here:\n\t   Git's credential cache daemon helper does not close its stderr, so if this\n\t   process is the process that fires up the daemon, it will wait forever\n\t   (until the daemon exits, really) trying to read from stderr.\n\n\t   Instead, we simply pass it through to our stderr.\n\n\t   See https://github.com/git-lfs/git-lfs/issues/117 for more details.\n\t*/\n\tcmd.Stderr = os.Stderr\n\n\terr := cmd.Start()\n\tif err == nil {\n\t\terr = cmd.Wait()\n\t}\n\n\tif _, ok := err.(*exec.ExitError); ok {\n\t\tif h.SkipPrompt {\n\t\t\treturn nil, fmt.Errorf(\"change the GIT_TERMINAL_PROMPT env var to be prompted to enter your credentials for %s://%s\",\n\t\t\t\tinput[\"protocol\"], input[\"host\"])\n\t\t}\n\n\t\t// 'git credential' exits with 128 if the helper doesn't fill the username\n\t\t// and password values.\n\t\tif subcommand == \"fill\" && err.Error() == \"exit status 128\" {\n\t\t\treturn nil, nil\n\t\t}\n\t}\n\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"'git credential %s' error: %s\\n\", subcommand, err.Error())\n\t}\n\n\tcreds := make(Creds)\n\tfor _, line := range strings.Split(output.String(), \"\\n\") {\n\t\tpieces := strings.SplitN(line, \"=\", 2)\n\t\tif len(pieces) < 2 || len(pieces[1]) < 1 {\n\t\t\tcontinue\n\t\t}\n\t\tcreds[pieces[0]] = pieces[1]\n\t}\n\n\treturn creds, nil\n}\n\ntype credentialCacher struct {\n\tcreds map[string]Creds\n\tmu    sync.Mutex\n}\n\nfunc NewCredentialCacher() *credentialCacher {\n\treturn &credentialCacher{creds: make(map[string]Creds)}\n}\n\nfunc credCacheKey(creds Creds) string {\n\tparts := []string{\n\t\tcreds[\"protocol\"],\n\t\tcreds[\"host\"],\n\t\tcreds[\"path\"],\n\t}\n\treturn strings.Join(parts, \"//\")\n}\n\nfunc (c *credentialCacher) Fill(what Creds) (Creds, error) {\n\tkey := credCacheKey(what)\n\tc.mu.Lock()\n\tcached, ok := c.creds[key]\n\tc.mu.Unlock()\n\n\tif ok {\n\t\ttracerx.Printf(\"creds: git credential cache (%q, %q, %q)\",\n\t\t\twhat[\"protocol\"], what[\"host\"], what[\"path\"])\n\t\treturn cached, nil\n\t}\n\n\treturn nil, credHelperNoOp\n}\n\nfunc (c *credentialCacher) Approve(what Creds) error {\n\tkey := credCacheKey(what)\n\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tif _, ok := c.creds[key]; ok {\n\t\treturn nil\n\t}\n\n\tc.creds[key] = what\n\treturn credHelperNoOp\n}\n\nfunc (c *credentialCacher) Reject(what Creds) error {\n\tkey := credCacheKey(what)\n\tc.mu.Lock()\n\tdelete(c.creds, key)\n\tc.mu.Unlock()\n\treturn credHelperNoOp\n}\n\n// CredentialHelpers iterates through a slice of CredentialHelper objects\n// CredentialHelpers is a []CredentialHelper that iterates through each\n// credential helper to fill, reject, or approve credentials. Typically, the\n// first success returns immediately. Errors are reported to tracerx, unless\n// all credential helpers return errors. Any erroring credential helpers are\n// skipped for future calls.\n//\n// A CredentialHelper can return a credHelperNoOp error, signaling that the\n// CredentialHelpers should try the next one.\ntype CredentialHelpers struct {\n\thelpers        []CredentialHelper\n\tskippedHelpers map[int]bool\n\tmu             sync.Mutex\n}\n\n// NewCredentialHelpers initializes a new CredentialHelpers from the given\n// slice of CredentialHelper instances.\nfunc NewCredentialHelpers(helpers []CredentialHelper) CredentialHelper {\n\treturn &CredentialHelpers{\n\t\thelpers:        helpers,\n\t\tskippedHelpers: make(map[int]bool),\n\t}\n}\n\nvar credHelperNoOp = errors.New(\"no-op!\")\n\n// Fill implements CredentialHelper.Fill by asking each CredentialHelper in\n// order to fill the credentials.\n//\n// If a fill was successful, it is returned immediately, and no other\n// `CredentialHelper`s are consulted. If any CredentialHelper returns an error,\n// it is reported to tracerx, and the next one is attempted. If they all error,\n// then a collection of all the error messages is returned. Erroring credential\n// helpers are added to the skip list, and never attempted again for the\n// lifetime of the current Git LFS command.\nfunc (s *CredentialHelpers) Fill(what Creds) (Creds, error) {\n\terrs := make([]string, 0, len(s.helpers))\n\tfor i, h := range s.helpers {\n\t\tif s.skipped(i) {\n\t\t\tcontinue\n\t\t}\n\n\t\tcreds, err := h.Fill(what)\n\t\tif err != nil {\n\t\t\tif err != credHelperNoOp {\n\t\t\t\ts.skip(i)\n\t\t\t\ttracerx.Printf(\"credential fill error: %s\", err)\n\t\t\t\terrs = append(errs, err.Error())\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tif creds != nil {\n\t\t\treturn creds, nil\n\t\t}\n\t}\n\n\tif len(errs) > 0 {\n\t\treturn nil, errors.New(\"credential fill errors:\\n\" + strings.Join(errs, \"\\n\"))\n\t}\n\n\treturn nil, nil\n}\n\n// Reject implements CredentialHelper.Reject and rejects the given Creds \"what\"\n// with the first successful attempt.\nfunc (s *CredentialHelpers) Reject(what Creds) error {\n\tfor i, h := range s.helpers {\n\t\tif s.skipped(i) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := h.Reject(what); err != credHelperNoOp {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn errors.New(\"no valid credential helpers to reject\")\n}\n\n// Approve implements CredentialHelper.Approve and approves the given Creds\n// \"what\" with the first successful CredentialHelper. If an error occurrs,\n// it calls Reject() with the same Creds and returns the error immediately. This\n// ensures a caching credential helper removes the cache, since the Erroring\n// CredentialHelper never successfully saved it.\nfunc (s *CredentialHelpers) Approve(what Creds) error {\n\tskipped := make(map[int]bool)\n\tfor i, h := range s.helpers {\n\t\tif s.skipped(i) {\n\t\t\tskipped[i] = true\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := h.Approve(what); err != credHelperNoOp {\n\t\t\tif err != nil && i > 0 { // clear any cached approvals\n\t\t\t\tfor j := 0; j < i; j++ {\n\t\t\t\t\tif !skipped[j] {\n\t\t\t\t\t\ts.helpers[j].Reject(what)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn errors.New(\"no valid credential helpers to approve\")\n}\n\nfunc (s *CredentialHelpers) skip(i int) {\n\ts.mu.Lock()\n\ts.skippedHelpers[i] = true\n\ts.mu.Unlock()\n}\n\nfunc (s *CredentialHelpers) skipped(i int) bool {\n\ts.mu.Lock()\n\tskipped := s.skippedHelpers[i]\n\ts.mu.Unlock()\n\treturn skipped\n}\n\ntype nullCredentialHelper struct{}\n\nvar (\n\tnullCredError = errors.New(\"No credential helper configured\")\n\tNullCreds     = &nullCredentialHelper{}\n)\n\nfunc (h *nullCredentialHelper) Fill(input Creds) (Creds, error) {\n\treturn nil, nullCredError\n}\n\nfunc (h *nullCredentialHelper) Approve(creds Creds) error {\n\treturn nil\n}\n\nfunc (h *nullCredentialHelper) Reject(creds Creds) error {\n\treturn nil\n}\n", "git-lfs (2.13.1) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Fri, 11 Dec 2020 14:29:00 -0000\n\ngit-lfs (2.13.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Thu, 10 Dec 2020 14:29:00 -0000\n\ngit-lfs (2.12.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Tue, 1 Sep 2020 14:29:00 -0000\n\ngit-lfs (2.11.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Fri, 08 May 2020 14:29:00 -0000\n\ngit-lfs (2.10.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Tue, 21 Jan 2020 14:29:00 -0000\n\ngit-lfs (2.9.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Thu, 17 Oct 2019 14:29:00 -0000\n\ngit-lfs (2.8.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Tue, 23 Jul 2019 14:29:00 -0000\n\ngit-lfs (2.7.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Fri, 15 Feb 2019 14:29:00 -0000\n\ngit-lfs (2.6.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 1 Nov 2018 14:29:00 +0000\n\ngit-lfs (2.5.2) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 17 Sep 2018 14:29:00 +0000\n\ngit-lfs (2.5.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 2 Aug 2018 14:29:00 +0000\n\ngit-lfs (2.5.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 26 Jul 2018 14:29:00 +0000\n\ngit-lfs (2.4.2) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 28 May 2018 14:29:00 +0000\n\ngit-lfs (2.4.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 21 May 2018 14:29:00 +0000\n\ngit-lfs (2.4.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 1 Mar 2018 14:29:00 +0000\n\ngit-lfs (2.3.4) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Wed, 18 Oct 2017 14:29:00 +0000\n\ngit-lfs (2.3.3) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Mon, 9 Oct 2017 14:29:00 +0000\n\ngit-lfs (2.3.2) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Tue, 3 Oct 2017 14:29:00 +0000\n\ngit-lfs (2.3.1) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Wed, 26 Sep 2017 14:29:00 +0000\n\ngit-lfs (2.3.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 14 Sep 2017 14:29:00 +0000\n\ngit-lfs (2.2.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 10 Jul 2017 14:29:00 +0000\n\ngit-lfs (2.2.0) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Tue, 27 Jun 2017 14:29:00 +0000\n\ngit-lfs (2.1.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Fri, 19 May 2017 14:29:00 +0000\n\ngit-lfs (2.1.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Fri, 28 Apr 2017 14:29:00 +0000\n\ngit-lfs (2.0.2) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Wed, 29 Mar 2017 14:29:00 +0000\n\ngit-lfs (2.0.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 6 Mar 2017 14:29:00 +0000\n\ngit-lfs (2.0.0) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Tue, 1 Mar 2017 14:29:00 +0000\n\ngit-lfs (1.5.6) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 16 Feb 2017 14:29:00 +0000\n\ngit-lfs (1.5.5) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 12 Jan 2017 14:29:00 +0000\n\ngit-lfs (1.5.4) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Tue, 27 Dec 2016 14:29:00 +0000\n\ngit-lfs (1.5.3) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Mon, 5 Dec 2016 14:29:00 +0000\n\ngit-lfs (1.5.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Tue, 22 Nov 2016 14:29:00 +0000\n\ngit-lfs (1.5.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 18 Nov 2016 14:29:00 +0000\n\ngit-lfs (1.5.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 17 Nov 2016 14:29:00 +0000\n\ngit-lfs (1.4.4) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Mon, 24 Oct 2016 14:29:00 +0000\n\ngit-lfs (1.4.3) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Mon, 17 Oct 2016 14:29:00 +0000\n\ngit-lfs (1.4.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Mon, 10 Oct 2016 14:29:00 +0000\n\ngit-lfs (1.4.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 26 Aug 2016 14:29:00 +0000\n\ngit-lfs (1.4.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 19 Aug 2016 14:29:00 +0000\n\ngit-lfs (1.3.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Tue, 2 Aug 2016 14:29:00 +0000\n\ngit-lfs (1.3.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 21 Jul 2016 14:29:00 +0000\n\ngit-lfs (1.2.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 2 Jun 2016 14:29:00 +0000\n\ngit-lfs (1.2.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 14 Apr 2016 14:29:00 +0000\n\ngit-lfs (1.1.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Tue, 1 Mar 2016 14:29:00 +0000\n\ngit-lfs (1.1.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Wed, 4 Feb 2016 14:29:00 +0000\n\ngit-lfs (1.1.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Wed, 12 Nov 2015 14:29:00 +0000\n\ngit-lfs (1.0.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Wed, 28 Oct 2015 14:29:00 +0000\n\ngit-lfs (1.0.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 23 Oct 2015 14:29:00 +0000\n\ngit-lfs (1.0.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 1 Oct 2015 14:29:00 +0000\n\ngit-lfs (0.6.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 10 Sep 2015 14:29:00 +0000\n\ngit-lfs (0.5.3) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 24 Jul 2015 20:43:00 +0000\n\ngit-lfs (0.5.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 12 Jun 2015 02:54:01 +0000\n\ngit-lfs (0.5.1) stable; urgency=medium\n\n  * Initial release.\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 08 May 2015 22:55:45 +0000\n", "package lfs\n\nimport (\n\t\"bytes\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"hash\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\n\t\"github.com/git-lfs/git-lfs/config\"\n)\n\ntype pipeRequest struct {\n\taction     string\n\treader     io.Reader\n\tfileName   string\n\textensions []config.Extension\n}\n\ntype pipeResponse struct {\n\tfile    *os.File\n\tresults []*pipeExtResult\n}\n\ntype pipeExtResult struct {\n\tname   string\n\toidIn  string\n\toidOut string\n}\n\ntype extCommand struct {\n\tcmd    *exec.Cmd\n\tout    io.WriteCloser\n\terr    *bytes.Buffer\n\thasher hash.Hash\n\tresult *pipeExtResult\n}\n\nfunc pipeExtensions(cfg *config.Configuration, request *pipeRequest) (response pipeResponse, err error) {\n\tvar extcmds []*extCommand\n\tdefer func() {\n\t\t// In the case of an early return before the end of this\n\t\t// function (in response to an error, etc), kill all running\n\t\t// processes. Errors are ignored since the function has already\n\t\t// returned.\n\t\t//\n\t\t// In the happy path, the commands will have already been\n\t\t// `Wait()`-ed upon and e.cmd.Process.Kill() will return an\n\t\t// error, but we can ignore it.\n\t\tfor _, e := range extcmds {\n\t\t\tif e.cmd.Process != nil {\n\t\t\t\te.cmd.Process.Kill()\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor _, e := range request.extensions {\n\t\tvar pieces []string\n\t\tswitch request.action {\n\t\tcase \"clean\":\n\t\t\tpieces = strings.Split(e.Clean, \" \")\n\t\tcase \"smudge\":\n\t\t\tpieces = strings.Split(e.Smudge, \" \")\n\t\tdefault:\n\t\t\terr = fmt.Errorf(\"Invalid action: \" + request.action)\n\t\t\treturn\n\t\t}\n\t\tname := strings.Trim(pieces[0], \" \")\n\t\tvar args []string\n\t\tfor _, value := range pieces[1:] {\n\t\t\targ := strings.Replace(value, \"%f\", request.fileName, -1)\n\t\t\targs = append(args, arg)\n\t\t}\n\t\tcmd := exec.Command(name, args...)\n\t\tec := &extCommand{cmd: cmd, result: &pipeExtResult{name: e.Name}}\n\t\textcmds = append(extcmds, ec)\n\t}\n\n\thasher := sha256.New()\n\tpipeReader, pipeWriter := io.Pipe()\n\tmultiWriter := io.MultiWriter(hasher, pipeWriter)\n\n\tvar input io.Reader\n\tvar output io.WriteCloser\n\tinput = pipeReader\n\textcmds[0].cmd.Stdin = input\n\tif response.file, err = TempFile(cfg, \"\"); err != nil {\n\t\treturn\n\t}\n\tdefer response.file.Close()\n\toutput = response.file\n\n\tlast := len(extcmds) - 1\n\tfor i, ec := range extcmds {\n\t\tec.hasher = sha256.New()\n\n\t\tif i == last {\n\t\t\tec.cmd.Stdout = io.MultiWriter(ec.hasher, output)\n\t\t\tec.out = output\n\t\t\tcontinue\n\t\t}\n\n\t\tnextec := extcmds[i+1]\n\t\tvar nextStdin io.WriteCloser\n\t\tvar stdout io.ReadCloser\n\t\tif nextStdin, err = nextec.cmd.StdinPipe(); err != nil {\n\t\t\treturn\n\t\t}\n\t\tif stdout, err = ec.cmd.StdoutPipe(); err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tec.cmd.Stdin = input\n\t\tec.cmd.Stdout = io.MultiWriter(ec.hasher, nextStdin)\n\t\tec.out = nextStdin\n\n\t\tinput = stdout\n\n\t\tvar errBuff bytes.Buffer\n\t\tec.err = &errBuff\n\t\tec.cmd.Stderr = ec.err\n\t}\n\n\tfor _, ec := range extcmds {\n\t\tif err = ec.cmd.Start(); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\tif _, err = io.Copy(multiWriter, request.reader); err != nil {\n\t\treturn\n\t}\n\tif err = pipeWriter.Close(); err != nil {\n\t\treturn\n\t}\n\n\tfor _, ec := range extcmds {\n\t\tif err = ec.cmd.Wait(); err != nil {\n\t\t\tif ec.err != nil {\n\t\t\t\terrStr := ec.err.String()\n\t\t\t\terr = fmt.Errorf(\"extension '%s' failed with: %s\", ec.result.name, errStr)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif err = ec.out.Close(); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\toid := hex.EncodeToString(hasher.Sum(nil))\n\tfor _, ec := range extcmds {\n\t\tec.result.oidIn = oid\n\t\toid = hex.EncodeToString(ec.hasher.Sum(nil))\n\t\tec.result.oidOut = oid\n\t\tresponse.results = append(response.results, ec.result)\n\t}\n\treturn\n}\n", "package lfshttp\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/git-lfs/git-lfs/config\"\n\t\"github.com/git-lfs/git-lfs/subprocess\"\n\t\"github.com/git-lfs/git-lfs/tools\"\n\t\"github.com/rubyist/tracerx\"\n)\n\ntype SSHResolver interface {\n\tResolve(Endpoint, string) (sshAuthResponse, error)\n}\n\nfunc withSSHCache(ssh SSHResolver) SSHResolver {\n\treturn &sshCache{\n\t\tendpoints: make(map[string]*sshAuthResponse),\n\t\tssh:       ssh,\n\t}\n}\n\ntype sshCache struct {\n\tendpoints map[string]*sshAuthResponse\n\tssh       SSHResolver\n}\n\nfunc (c *sshCache) Resolve(e Endpoint, method string) (sshAuthResponse, error) {\n\tif len(e.SshUserAndHost) == 0 {\n\t\treturn sshAuthResponse{}, nil\n\t}\n\n\tkey := strings.Join([]string{e.SshUserAndHost, e.SshPort, e.SshPath, method}, \"//\")\n\tif res, ok := c.endpoints[key]; ok {\n\t\tif _, expired := res.IsExpiredWithin(5 * time.Second); !expired {\n\t\t\ttracerx.Printf(\"ssh cache: %s git-lfs-authenticate %s %s\",\n\t\t\t\te.SshUserAndHost, e.SshPath, endpointOperation(e, method))\n\t\t\treturn *res, nil\n\t\t} else {\n\t\t\ttracerx.Printf(\"ssh cache expired: %s git-lfs-authenticate %s %s\",\n\t\t\t\te.SshUserAndHost, e.SshPath, endpointOperation(e, method))\n\t\t}\n\t}\n\n\tres, err := c.ssh.Resolve(e, method)\n\tif err == nil {\n\t\tc.endpoints[key] = &res\n\t}\n\treturn res, err\n}\n\ntype sshAuthResponse struct {\n\tMessage   string            `json:\"-\"`\n\tHref      string            `json:\"href\"`\n\tHeader    map[string]string `json:\"header\"`\n\tExpiresAt time.Time         `json:\"expires_at\"`\n\tExpiresIn int               `json:\"expires_in\"`\n\n\tcreatedAt time.Time\n}\n\nfunc (r *sshAuthResponse) IsExpiredWithin(d time.Duration) (time.Time, bool) {\n\treturn tools.IsExpiredAtOrIn(r.createdAt, d, r.ExpiresAt,\n\t\ttime.Duration(r.ExpiresIn)*time.Second)\n}\n\ntype sshAuthClient struct {\n\tos  config.Environment\n\tgit config.Environment\n}\n\nfunc (c *sshAuthClient) Resolve(e Endpoint, method string) (sshAuthResponse, error) {\n\tres := sshAuthResponse{}\n\tif len(e.SshUserAndHost) == 0 {\n\t\treturn res, nil\n\t}\n\n\texe, args := sshGetLFSExeAndArgs(c.os, c.git, e, method)\n\tcmd := exec.Command(exe, args...)\n\n\t// Save stdout and stderr in separate buffers\n\tvar outbuf, errbuf bytes.Buffer\n\tcmd.Stdout = &outbuf\n\tcmd.Stderr = &errbuf\n\n\tnow := time.Now()\n\n\t// Execute command\n\terr := cmd.Start()\n\tif err == nil {\n\t\terr = cmd.Wait()\n\t}\n\n\t// Processing result\n\tif err != nil {\n\t\tres.Message = strings.TrimSpace(errbuf.String())\n\t} else {\n\t\terr = json.Unmarshal(outbuf.Bytes(), &res)\n\t\tif res.ExpiresIn == 0 && res.ExpiresAt.IsZero() {\n\t\t\tttl := c.git.Int(\"lfs.defaulttokenttl\", 0)\n\t\t\tif ttl < 0 {\n\t\t\t\tttl = 0\n\t\t\t}\n\t\t\tres.ExpiresIn = ttl\n\t\t}\n\t\tres.createdAt = now\n\t}\n\n\treturn res, err\n}\n\nfunc sshFormatArgs(cmd string, args []string, needShell bool) (string, []string) {\n\tif !needShell {\n\t\treturn cmd, args\n\t}\n\n\treturn subprocess.FormatForShellQuotedArgs(cmd, args)\n}\n\nfunc sshGetLFSExeAndArgs(osEnv config.Environment, gitEnv config.Environment, e Endpoint, method string) (string, []string) {\n\texe, args, needShell := sshGetExeAndArgs(osEnv, gitEnv, e)\n\toperation := endpointOperation(e, method)\n\targs = append(args, fmt.Sprintf(\"git-lfs-authenticate %s %s\", e.SshPath, operation))\n\texe, args = sshFormatArgs(exe, args, needShell)\n\ttracerx.Printf(\"run_command: %s %s\", exe, strings.Join(args, \" \"))\n\treturn exe, args\n}\n\n// Parse command, and if it looks like a valid command, return the ssh binary\n// name, the command to run, and whether we need a shell.  If not, return\n// existing as the ssh binary name.\nfunc sshParseShellCommand(command string, existing string) (ssh string, cmd string, needShell bool) {\n\tssh = existing\n\tif cmdArgs := tools.QuotedFields(command); len(cmdArgs) > 0 {\n\t\tneedShell = true\n\t\tssh = cmdArgs[0]\n\t\tcmd = command\n\t}\n\treturn\n}\n\n// Return the executable name for ssh on this machine and the base args\n// Base args includes port settings, user/host, everything pre the command to execute\nfunc sshGetExeAndArgs(osEnv config.Environment, gitEnv config.Environment, e Endpoint) (exe string, baseargs []string, needShell bool) {\n\tvar cmd string\n\n\tisPlink := false\n\tisTortoise := false\n\n\tssh, _ := osEnv.Get(\"GIT_SSH\")\n\tsshCmd, _ := osEnv.Get(\"GIT_SSH_COMMAND\")\n\tssh, cmd, needShell = sshParseShellCommand(sshCmd, ssh)\n\n\tif ssh == \"\" {\n\t\tsshCmd, _ := gitEnv.Get(\"core.sshcommand\")\n\t\tssh, cmd, needShell = sshParseShellCommand(sshCmd, defaultSSHCmd)\n\t}\n\n\tif cmd == \"\" {\n\t\tcmd = ssh\n\t}\n\n\tbasessh := filepath.Base(ssh)\n\n\tif basessh != defaultSSHCmd {\n\t\t// Strip extension for easier comparison\n\t\tif ext := filepath.Ext(basessh); len(ext) > 0 {\n\t\t\tbasessh = basessh[:len(basessh)-len(ext)]\n\t\t}\n\t\tisPlink = strings.EqualFold(basessh, \"plink\")\n\t\tisTortoise = strings.EqualFold(basessh, \"tortoiseplink\")\n\t}\n\n\targs := make([]string, 0, 7)\n\n\tif isTortoise {\n\t\t// TortoisePlink requires the -batch argument to behave like ssh/plink\n\t\targs = append(args, \"-batch\")\n\t}\n\n\tif len(e.SshPort) > 0 {\n\t\tif isPlink || isTortoise {\n\t\t\targs = append(args, \"-P\")\n\t\t} else {\n\t\t\targs = append(args, \"-p\")\n\t\t}\n\t\targs = append(args, e.SshPort)\n\t}\n\n\tif sep, ok := sshSeparators[basessh]; ok {\n\t\t// inserts a separator between cli -options and host/cmd commands\n\t\t// example: $ ssh -p 12345 -- user@host.com git-lfs-authenticate ...\n\t\targs = append(args, sep, e.SshUserAndHost)\n\t} else {\n\t\t// no prefix supported, strip leading - off host to prevent cmd like:\n\t\t// $ git config lfs.url ssh://-proxycmd=whatever\n\t\t// $ plink -P 12345 -proxycmd=foo git-lfs-authenticate ...\n\t\t//\n\t\t// Instead, it'll attempt this, and eventually return an error\n\t\t// $ plink -P 12345 proxycmd=foo git-lfs-authenticate ...\n\t\targs = append(args, sshOptPrefixRE.ReplaceAllString(e.SshUserAndHost, \"\"))\n\t}\n\n\treturn cmd, args, needShell\n}\n\nconst defaultSSHCmd = \"ssh\"\n\nvar (\n\tsshOptPrefixRE = regexp.MustCompile(`\\A\\-+`)\n\tsshSeparators  = map[string]string{\n\t\t\"ssh\":          \"--\",\n\t\t\"lfs-ssh-echo\": \"--\", // used in lfs integration tests only\n\t}\n)\n", "Name:           git-lfs\nVersion:        2.13.1\nRelease:        1%{?dist}\nSummary:        Git extension for versioning large files\n\nGroup:          Applications/Archiving\nLicense:        MIT\nURL:            https://git-lfs.github.com/\nSource0:        https://github.com/git-lfs/git-lfs/archive/v%{version}/%{name}-%{version}.tar.gz\nBuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)\nBuildRequires:  perl-Digest-SHA\nBuildRequires:  golang, tar, rubygem-ronn, which, git >= 1.8.2\n\nRequires: git >= 1.8.2\n\n%define debug_package %{nil}\n#I think this is because go links with --build-id=none for linux\n\n%description\nGit Large File Storage (LFS) replaces large files such as audio samples,\nvideos, datasets, and graphics with text pointers inside Git, while\nstoring the file contents on a remote server like GitHub.com or GitHub\nEnterprise.\n\n%prep\n%setup -q -n %{name}-%{version}\nmkdir -p src/github.com/git-lfs\nln -s $(pwd) src/github.com/git-lfs/%{name}\n\n%build\n%if 0%{?rhel} == 5\n  export CGO_ENABLED=0\n%endif\n\npushd src/github.com/git-lfs/%{name}\n  %if %{_arch} == i386\n    GOARCH=386 make\n  %else\n    GOARCH=amd64 make\n  %endif\npopd\nmake man\n\n%install\n[ \"$RPM_BUILD_ROOT\" != \"/\" ] && rm -rf $RPM_BUILD_ROOT\ninstall -D bin/git-lfs ${RPM_BUILD_ROOT}/usr/bin/git-lfs\nmkdir -p -m 755 ${RPM_BUILD_ROOT}/usr/share/man/man1\nmkdir -p -m 755 ${RPM_BUILD_ROOT}/usr/share/man/man5\ninstall -D man/*.1 ${RPM_BUILD_ROOT}/usr/share/man/man1\ninstall -D man/*.5 ${RPM_BUILD_ROOT}/usr/share/man/man5\n\n%post\ngit lfs install --system\n\n%preun\ngit lfs uninstall\n\n%check\nexport GIT_LFS_TEST_DIR=$(mktemp -d)\n\n# test/git-lfs-server-api/main.go does not compile because github.com/spf13/cobra\n# cannot be found in vendor, for some reason. It's not needed for installs, so\n# skip it.\nexport SKIPAPITESTCOMPILE=1\n\npushd src/github.com/git-lfs/%{name}\n  make test\n  go get github.com/git-lfs/go-ntlm/ntlm\n  make -C t PROVE_EXTRA_ARGS=-j4 test\npopd\n\nrm -rf ${GIT_LFS_TEST_DIR}\n\n%clean\nrm -rf %{buildroot}\n\n%files\n%defattr(-,root,root,-)\n%doc LICENSE.md README.md\n/usr/bin/git-lfs\n/usr/share/man/man1/*.1.gz\n/usr/share/man/man5/*.5.gz\n\n%changelog\n* Sun Dec 6 2015 Andrew Neff <andyneff@users.noreply.github.com> - 1.1.0-1\n- Added Requires and version for git back in\n\n* Sat Oct 31 2015 Andrew Neff <andyneff@users.noreply.github.com> - 1.0.3-1\n- Added GIT_LFS_TEST_DIR to prevent future test race condition\n\n* Sun Aug 2 2015 Andrew Neff <andyneff@users.noreply.github.com> - 0.5.4-1\n- Added tests back in\n\n* Sat Jul 18 2015 Andrew Neff <andyneff@users.noreply.github.com> - 0.5.2-1\n- Changed Source0 filename\n\n* Mon May 18 2015 Andrew Neff <andyneff@users.noreply.github.com> - 0.5.1-1\n- Initial Spec\n", "#!/usr/bin/env bash\n\n. \"$(dirname \"$0\")/testlib.sh\"\n\nbegin_test \"does not look in current directory for git\"\n(\n  set -e\n\n  reponame=\"$(basename \"$0\" \".sh\")\"\n  git init \"$reponame\"\n  cd \"$reponame\"\n  export PATH=\"$(echo \"$PATH\" | sed -e \"s/:.:/:/g\" -e \"s/::/:/g\")\"\n\n  printf \"#!/bin/sh\\necho exploit >&2\\n\" > git\n  chmod +x git || true\n  printf \"echo exploit 1>&2\\n\" > git.bat\n\n  # This needs to succeed.  If it fails, that could be because our malicious\n  # \"git\" is broken but got invoked anyway.\n  git lfs env > output.log 2>&1\n  ! grep -q 'exploit' output.log\n)\nend_test\n", "{\n\t\"FixedFileInfo\":\n\t{\n\t\t\"FileVersion\": {\n\t\t\t\"Major\": 2,\n\t\t\t\"Minor\": 13,\n\t\t\t\"Patch\": 1,\n\t\t\t\"Build\": 0\n\t\t}\n\t},\n\t\"StringFileInfo\":\n\t{\n\t\t\"FileDescription\": \"Git LFS\",\n\t\t\"LegalCopyright\": \"GitHub, Inc. and Git LFS contributors\",\n\t\t\"ProductName\": \"Git Large File Storage (LFS)\",\n\t\t\"ProductVersion\": \"2.13.1\"\n\t},\n\t\"IconPath\": \"script/windows-installer/git-lfs-logo.ico\"\n}\n"], "fixing_code": ["# Git LFS Changelog\n\n## 2.13.2 (13 Jan 2020)\n\nThis release introduces a security fix for Windows systems, which has been\nassigned CVE-2021-21237.\n\nOn Windows, if Git LFS operates on a malicious repository with a git.bat or\ngit.exe file in the current directory, that program is executed, permitting the\nattacker to execute arbitrary code.  This security problem does not affect Unix\nsystems.  This is the same issue as CVE-2020-27955, but the fix for that issue\nwas incomplete and certain options can still cause the problem to occur.\n\nThis occurs because on Windows, Go includes (and prefers) the current directory\nwhen the name of a command run does not contain a directory separator.  This has\nbeen solved by always using PATH to pre-resolve paths before handing them to Go.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @Ry0taK for reporting this to us responsibly\n\n### Bugs\n\n* Use subprocess for invoking all commands (@bk2204)\n\n## 2.13.1 (11 Dec 2020)\n\nThis release fixes a bug in our build tooling that prevents our release process\nfrom working properly.  This release is otherwise identical to 2.13.0.\n\n### Misc\n\n* Makefile: don't fail the second time macOS builds are built #4341 (@bk2204)\n\n## 2.13.0 (10 Dec 2020)\n\nThis release introduces several new features, such as the `--above` option to\n`git lfs migrate import` and support for `socks5h` proxies.  In addition, many\nbugs have been fixed and several miscellaneous fixes have been included.\n\nUnless someone steps up to fix and maintain NTLM support, this will be the last\nGit LFS release to support NTLM.  See #4247 for more details.  Note that Git LFS\nsupports Kerberos as well, which is far more secure and may be a viable\nreplacement in many situations.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @EliRibble for adding support for the `--above` option to `git lfs migrate import`\n* @andrewshadura for adding support for the `GIT_LFS_SKIP_PUSH` environment variable\n* @sinbad for fixing problems with retaining objects used by stashes\n* @tklauser for cleaning up our use of error constants in the code\n\n### Features\n\n* Add --above parameter to 'migrate import'. #4276 (@EliRibble)\n* Add GIT_LFS_SKIP_PUSH to allow skipping the pre-push hook #4202 (@andrewshadura)\n* lfshttp: add support for socks5h proxies #4259 (@bk2204)\n* Add manual pages to release assets #4230 (@bk2204)\n* Honor GIT_WORK_TREE #4269 (@bk2204)\n\n### Bugs\n\n* Make git lfs migrate import handle missing extensions #4318 (@bk2204)\n* fs: don't panic when using a too-short object ID to push #4307 (@bk2204)\n* Fix pattern matching for .gitattributes #4301 (@bk2204)\n* config: map missing port to default for HTTP key lookups #4282 (@bk2204)\n* tools: use IoctlFileClone from golang.org/x/sys/unix #4261 (@tklauser)\n* tools/util_darwin.go: Remove use of direct syscalls #4251 (@stanhu)\n* tools: always force a UTF-8 locale for cygpath #4231 (@bk2204)\n* prune: fix deleting objects referred to by stashes #4209 (@sinbad)\n\n### Misc\n\n* migrate import: warn about refs on case insensitive file systems #4332 (@larsxschneider)\n* Drop obsolete OS support #4328 (@bk2204)\n* tools: use ERROR_SHARING_VIOLATION const from golang.org/x/sys/windows #4291 (@tklauser)\n* pull: gracefully handle merge conflicts #4289 (@bk2204)\n* script/upload: avoid using Ruby's URI.escape #4266 (@bk2204)\n* add documentation of security bug report process #4244 (@chrisd8088)\n\n## 2.12.1 (4 Nov 2020)\n\nThis release introduces a security fix for Windows systems, which has been\nassigned CVE-2020-27955.\n\nOn Windows, if Git LFS operates on a malicious repository with a git.bat or\ngit.exe file in the current directory, that program is executed, permitting the\nattacker to execute arbitrary code.  This security problem does not affect Unix\nsystems.\n\nThis occurs because on Windows, Go includes (and prefers) the current directory\nwhen the name of a command run does not contain a directory separator.  This has\nbeen solved by always using PATH to pre-resolve paths before handing them to Go.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @dawidgolunski for reporting this to us responsibly\n\n### Bugs\n\n* subprocess: avoid using relative program names (@bk2204)\n\n## 2.12.0 (1 Sep 2020)\n\nThis release introduces several new features, such as support for the SHA-256\nrepositories coming in a future version of Git, restored support for Go 1.11,\nthe ability to read the contents of .lfsconfig from the repository, signed and\nnotarized binaries on macOS, and pre-built 32-bit ARM binaries on Linux.  In\naddition, several bugs have been fixed and miscellaneous fixes included.\n\nNote that macOS releases are now shipped as zip files, not tarballs, since it is\nnot possible to notarize tarballs.  macOS releases are now also built on macOS,\nso `git lfs dedup` should now function.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @saracen for adding support for ARM binaries\n* @mversluys for improving locking support\n* @cccfeng for updating our documentation to make it more readable\n* @bluekeyes for improving performance and tracing\n* @gertcuykens for adding missing parts of our documentation\n\n### Features\n\n* config: optionally read .lfsconfig from the repository #4200 (@bk2204)\n* Support SHA-256 repositories #4186 (@bk2204)\n* allow Go 1.11 builds by using WaitStatus.ExitStatus() #4183 (@chrisd8088)\n* add --worktree option to install and uninstall commands #4159 (@chrisd8088)\n* Sign and notarize binaries on macOS #4143 (@bk2204)\n* Makefile: add linux arm build and release targets #4126 (@saracen)\n* Allow locking and unlocking non-existent files #3992 (@mversluys)\n\n### Bugs\n\n* docs/api/locking: add an explicit <br> #4208 (@cccfeng)\n* Fix hang when the user lacks permissions #4207 (@bk2204)\n* Don't mark unlocked files that aren't lockable as read-only #4171 (@bk2204)\n* locking: make patterns with slashes work on Windows #4139 (@bk2204)\n* git: consider full refspec when determining seen refs #4133 (@bk2204)\n\n### Misc\n\n* Fix Windows CI #4199 (@bk2204)\n* Fix testsuite when working with non-master default branch #4174 (@bk2204)\n* git: improve performance of remote ref listing #4176 (@bluekeyes)\n* subprocess: trace all command execution #4175 (@bluekeyes)\n* Update git-lfs-migrate.1.ronn #3869 (@gertcuykens)\n* t: use repo v1 with extensions #4177 (@bk2204)\n* Makefile: ensure temp Go modules can be deleted #4157 (@chrisd8088)\n* Improve test suite robustness via environment #4132 (@bk2204)\n\n## 2.11.0 (8 May 2020)\n\nThis release introduces several new features, such as better support for unnamed\nlocal paths and URLs as remotes, support for `submodule.recurse`, exponential\nbackoff on failure, and support for renegotiation.  In addition, numerous bugs\nhave been fixed and miscellaneous issues have been addressed.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @bluekeyes for adding support for exponential backoff\n* @pluehne for adding support for `submodule.recurse`\n* @Electric26 for fixing the default behavior of a prompt\n* @nataliechen1 for fixing certain upload retry failures\n* @shalashik for fixing a panic during cherry-pick\n* @swisspol for updating our documentation to reflect supported `.lfsconfig`\n  keys\n* @dan2468 for updating the copyright year\n\n### Features\n\n* Allow literal local paths as remotes #4119 (@bk2204)\n* pre-push: find named remote for URL if possible #4103 (@bk2204)\n* tq: add exponential backoff for retries #4097 (@bluekeyes)\n* migrate import: set text to unspecified for excluded fields #4068 (@bk2204)\n* Update list of distros for packagecloud.io #4080 (@bk2204)\n* lfshttp: allow renegotiation #4066 (@bk2204)\n* Support submodule.recurse = true #4063 (@pluehne)\n* add man page for the post-commit hook command #4052 (@chrisd8088)\n* Add an option to control warning about files larger than 4 GiB #4009 (@bk2204)\n\n### Bugs\n\n* commands/command_migrate.go: fix bug #4116 (@Electric26)\n* git: avoid \"bad object\" messages when force-pushing #4102 (@bk2204)\n* git: avoid trying to rewrite remote tags as remote branches #4096 (@bk2204)\n* make Go tests run consistently using local binary #4084 (@chrisd8088)\n* commands: don't honor lfs.fetch* for ls-files #4083 (@bk2204)\n* commands: print help output with --help #4059 (@bk2204)\n* fail dedup command with explanation when LFS extensions configured #4045 (@chrisd8088)\n* fix upload retry 'file already closed' issue' #4042 (@nataliechen1)\n* commands/command_filter_process: cherry-pick of several commits cause panic error #4017 (@shalashik)\n* Check error when creating local storage directory #4016 (@bk2204)\n* track: detect duplicate patterns with --filename #4000 (@bk2204)\n\n### Misc\n\n* Removed lfs.extension.* from list of supported keys for .lfsconfig #4044 (@swisspol)\n* Tidy modules #4035 (@bk2204)\n* README: explain how to verify releases #4022 (@bk2204)\n* docs: document git lfs migrate --yes #4023 (@bk2204)\n* Stop using cgo on amd64 Linux #4026 (@bk2204)\n* updated copyright year #3995 (@dan2468)\n\n## 2.10.0 (21 January 2020)\n\nThis release introduces several new features, such as support for local paths in\nremotes, Kerberos support, and official binaries for S390x and little-endian\n64-bit PowerPC systems.  In addition, numerous bugs have been fixed and\nmiscellaneous issues have been addressed.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @ganadist for fixing a bug in the output of `git lfs env`\n* @exceed-alae for fixing a possible nil pointer dereference\n* @slonopotamus for improvements to Windows support and code cleanups\n* @nataliechen1 for fixing a data race\n* @ssgelm for writing and updating the code to use a new cookie jar parser\n* @austintraver for improving the output of `git lfs status`\n* @nikola-sh for improving option parity with Git\n* @alrs for fixing several error checks in the testsuite\n* @pluehne for improving our support for uncommon references\n\n### Features\n\n* Optimize pushes for multiple refs #3978 (@bk2204)\n* Include ppc64le and s390x Linux builds in releases #3983 (@bk2204)\n* Kerberos (SPNEGO) support for HTTP #3941 (@bk2204)\n* Add support for local paths #3918 (@bk2204)\n* Allow specifying HTTP version to use #3887 (@bk2204)\n\n### Bugs\n\n* t-duplicate-oids: use correct awk indexing #3981 (@bk2204)\n* Improved proxy support #3972 (@bk2204)\n* install: don't print error if run outside repository #3969 (@bk2204)\n* debian: bump version of golang-go #3959 (@bk2204)\n* lfshttp: Set valid default value for lfs.concurrenttransfers #3949 (@ganadist)\n* Add nil-check on defer block of DoTransfer() #3936 (@exceed-alae)\n* Retry batch failures #3930 (@bk2204)\n* rpm: use old setup code on CentOS 7 #3938 (@bk2204)\n* Interpret relative hook paths as relative to working tree #3926 (@bk2204)\n* Handle missing cygpath gracefully #3910 (@bk2204)\n* Update index before showing status #3921 (@bk2204)\n* Honor lfs.url when deciding on transfer adapters #3905 (@bk2204)\n* Implement retry logic to fix LFS storage race conditions on Windows #3890 (@slonopotamus)\n* Avoid hang when using git hash-object --stdin --path #3902 (@bk2204)\n* synchronize access to netrcCredentialHelper.skip #3896 (@nataliechen1)\n\n### Misc\n\n* Improve license files #3973 (@bk2204)\n* Add CI link to CI badge in README #3960 (@slonopotamus)\n* Clarify output shown by `git lfs status` #3953 (@austintraver)\n* Revert \"ci: force Windows Git version to 2.22.0\" #3903 (@bk2204)\n* Better document pointer format constraints #3944 (@bk2204)\n* Don't abort with newer Git when in a bare repo #3940 (@bk2204)\n* Fix more Linux package issues #3932 (@bk2204)\n* docs: explain shell metacharacters better #3920 (@bk2204)\n* Reset the text attribute on export #3913 (@bk2204)\n* Support schannel ssl backend #3868 (@nikola-sh)\n* Allow migrate export to handle non-pointer files gracefully #3911 (@bk2204)\n* git/gitattr: fix dropped test errors #3904 (@alrs)\n* Accept all local references with git lfs push #3876 (@pluehne)\n* Drop pre-1.6 Go compatibility code #3897 (@slonopotamus)\n* tools/kv: Fix dropped test error #3882 (@alrs)\n* Use different parser for cookiejar files #3886 (@ssgelm)\n* Stop replacing files in LFS storage when downloading them concurrently on Windows #3880 (@slonopotamus)\n* Fix error strings to follow Go guidelines #3871 (@slonopotamus)\n* Miscellaneous release fixes #3866 (@bk2204)\n\n## 2.9.2 (12 December 2019)\n\nThis release fixes a few regressions, such as a possible nil pointer\ndereference, a failure to retry batch requests, and a bug where repositories\ncould fail to be detected on Windows.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @exceed-alae for fixing a possible nil pointer dereference\n\n### Bugs\n\n* Add nil-check on defer block of DoTransfer() #3936 (@exceed-alae)\n* Retry batch failures #3930 (@bk2204)\n* rpm: use old setup code on CentOS 7 #3938 (@bk2204)\n* Handle missing cygpath gracefully #3910 (@bk2204)\n\n### Misc\n\n* Don't abort with newer Git when in a bare repo #3940 (@bk2204)\n* Fix more Linux package issues #3932 (@bk2204)\n\n## 2.9.1 (25 November 2019)\n\nThis release fixes a few regressions, such as the ability to use HTTP/1.1 when\nrequired, addresses a race condition, and switches the cookie jar parser to\nsomething that's easier for distributions to package.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @nataliechen1 for fixing a data race\n* @ssgelm for writing and updating the code to use a new cookie jar parser\n\n### Features\n\n* Allow specifying HTTP version to use #3887 (@bk2204)\n\n### Bugs\n\n* synchronize access to netrcCredentialHelper.skip #3896 (@nataliechen1)\n* Fix several causes of CI problems #3878 (@bk2204)\n* Miscellaneous release fixes #3866 (@bk2204)\n\n### Misc\n\n* Build artifacts during CI for easier testing #3892 (@bk2204)\n* Use different parser for cookiejar files #3886 (@ssgelm)\n\n## 2.9.0 (17 October 2019)\n\nThis release adds support for DragonFly BSD, adds a new `git lfs dedup` command\nto save space if the file system supports it, adds support for file URLs,\nimproves the performance when walking the repository, contains improvements\nto use HTTP/2 when available and cookies when required, and numerous other bug\nfixes, features, and modifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @pluehne for adding support for fetching the history of specific refs\n* @kupson for adding cookie support\n* @liweitianux for adding Dragonfly BSD support\n* @kazuki-ma for implementing de-duplication support\n* @dvdveer for adding range support to ls-files\n* @dyrone, @pmeerw, @yamiacat, and @kittenking for cleaning up some documentation issues\n* @slonopotamus for improving concurrent downloads\n* @nataliechen1 for fixing remote names with dots\n* @jw3 for removing excessive logging\n* @SeamusConnor for significantly improving performance when walking the repository\n\n### Features\n\n* Support fetching entire history of specific refs #3849 (@pluehne)\n* Add support for CentOS 8 #3854 (@bk2204)\n* Let git-lfs HTTPS transport send cookies #3825 (@kupson)\n* Support DragonFly BSD #3837 (@liweitianux)\n* HTTP/2 protocol support #3793 (@PastelMobileSuit)\n* Add clonefile on Windows over ReFS support. #3790 (@kazuki-ma)\n* Add new command `git lfs dedup` for file system level de-duplication. #3753 (@kazuki-ma)\n* Support GIT_ALTERNATE_OBJECT_DIRECTORIES #3765 (@bk2204)\n* ls-files: add support for reference range #3764 (@dvdveer)\n* Add several additional distros for packagecloud.io #3751 (@bk2204)\n* Provide an option to track to handle paths literally #3756 (@bk2204)\n* Optimize traversal of Git objects with URL remotes #3755 (@bk2204)\n* Support for file URLs #3748 (@bk2204)\n* Add clone file on MacOS X (darwin). #3745 (@kazuki-ma)\n\n### Bugs\n\n* Fix JSON comma problems in docs #3851 (@dyrone)\n* Remove redundant comma in batch.md #3841 (@dyrone)\n* More robust handling of parallel attempts to download the same file #3826 (@slonopotamus)\n* Update wildmatch to v1.0.4 #3820 (@bk2204)\n* Update to gitobj v1.4.1 #3815 (@bk2204)\n* Fix build error when cross-compiling #3817 (@bk2204)\n* Do not fail when multiple processes download the same lfs file #3813 (@slonopotamus)\n* Fix Remote Name Parsing Bug #3812 (@nataliechen1)\n* status: gracefully handle files replaced by directories #3768 (@bk2204)\n* Avoid deadlock when transfer queue fails #3800 (@bk2204)\n* Avoid a hang when Git is slow to provide us data #3806 (@bk2204)\n* tasklog/log.go: print \"done\" messages with a trailing period #3789 (@ttaylorr)\n* track: make --filename work with spaces #3785 (@bk2204)\n* Fix couple of 'the the' typos #3786 (@pmeerw)\n* Use an absolute path for smudging #3780 (@bk2204)\n* Fix URL parsing with Go 1.12.8 #3771 (@bk2204)\n* Fix remote autoselection when not on a branch #3759 (@bk2204)\n* Replace deprecated SEEK_SET, SEEK_CUR usage. #3739 (@kazuki-ma)\n* Do not log skipped checkouts to file #3736 (@jw3)\n* Fix typos across git-lfs repository #3728 (@kittenking)\n* Accept legacy Git SSH URLs #3713 (@bk2204)\n\n### Misc\n\n* ls-files --all man patch #3859 (@yamiacat)\n* Reworked to use git ls-files in some circumstances instead of FastWalkGitRepo #3823 (@SeamusConnor)\n* Clean up go.mod for Go 1.13 #3807 (@bk2204)\n* Use FICLONE instead of BTRFS_IOC_CLONE. #3796 (@kazuki-ma)\n* Remove unused pty code #3737 (@bk2204)\n\n## 2.8.0 (23 July 2019)\n\nThis release adds support for SOCKS proxies and Windows junctions, adds native\npackages for Debian 10 and similar distributions, reduces the number of\nsituations in which running `git lfs fetch --all` is required, improves\ncompatibility with Cygwin, and numerous other bug fixes and modifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @mstrap for adding support for listing lock owners\n* @h-hirokawa for adding support for rewriting object URLs\n* @slonopotamus for helping get our specs and implementation in sync\n* @ssgelm for improving our Debian packaging\n* @TBK for fixing a test\n* @hartzell for improving the compatibility of our Makefile\n* @AJH16 for implementing support for NTLM SSO\n\n### Features\n\n* Don't fail if we lack objects the server has #3634 (@bk2204)\n* Add support for Debian 10 #3697 (@bk2204)\n* Migrate tags pointing to other tags #3690 (@bk2204)\n* Add support for SOCKS proxies #3677 (@bk2204)\n* Allow vendors to customize the version info #3636 (@bk2204)\n* Wrap credential data to allow late credential prompting and update NTLM/SSPI to attempt SSPI login prior to prompting for credentials. #3617 (@AJH16)\n* git-lfs locks should optionally denote own locks #3569 (@mstrap)\n* tq/adapterbase: support rewriting href #3590 (@h-hirokawa)\n* Handle Windows junctions properly #3560 (@bk2204)\n* Allow specifying multiple insteadOf aliases #3550 (@bk2204)\n\n### Bugs\n\n* Make API documentation lock creation example less confusing #3648 (@bk2204)\n* Use a download token when searching locks #3715 (@bk2204)\n* Copy mode from original file when rewriting objects #3694 (@bk2204)\n* Don't recurse into submodules when walking repository #3686 (@bk2204)\n* Be more precise about what timestamps we accept #3680 (@bk2204)\n* Canonicalize common directory paths on Cygwin #3671 (@bk2204)\n* Ensure we always use correct Content-Type and Accept headers #3663 (@bk2204)\n* Fix 'owner' lock field not documented as optional #3651 (@slonopotamus)\n* Improve error handling in git lfs install #3624 (@bk2204)\n* Properly handle config options for URLs with upper case letters #3584 (@bk2204)\n* Detect Cygwin-style pipe TTYs as TTYs #3582 (@bk2204)\n* Set push remote for pre-push #3579 (@bk2204)\n* Switch from manually running go generate to using dh-golang to run it #3549 (@ssgelm)\n* Install worktree hooks in the proper directory #3547 (@bk2204)\n* Avoid nil pointer dereference on download failure #3537 (@bk2204)\n* Avoid nil pointer dereference on unexpected failure #3534 (@bk2204)\n\n### Misc\n\n* Update gitobj to v1.3.1 #3716 (@bk2204)\n* Use default line endings for core.autocrlf=input #3712 (@bk2204)\n* Fix CircleCI #3710 (@bk2204)\n* Vendor in gitobj v1.3.0 #3685 (@bk2204)\n* Update CONTRIBUTING #3673 (@bk2204)\n* Fix typo in t-locks.sh #3666 (@TBK)\n* Make 'locked_at' required in JSON schema #3655 (@slonopotamus)\n* Document a new batch error code #3639 (@bk2204)\n* Fix invalid JSON in LFS locking API documentation #3650 (@slonopotamus)\n* Fix invalid JSON in locking protocol docs #3644 (@slonopotamus)\n* Various release updates #3623 (@bk2204)\n* tq/adapterbase: fix typo enableHrefRerite to enableHrefRewrite #3594 (@h-hirokawa)\n* Use git-lfs version of go-ntlm #3588 (@bk2204)\n* Log test server standard error to log file #3577 (@bk2204)\n* Don't set -extldflags unless LDFLAGS has a value #3545 (@hartzell)\n* Retry on oversize file #3518 (@bk2204)\n* Fix asset uploading during releases #3538 (@bk2204)\n\n## 2.7.0 (15 February 2019)\n\nThis release adds better support for large files on 32-bit systems, adds\nattribute macros, fixes several file descriptor leaks, improves compatibility\nwith Git's configuration parsing, and includes numerous other bug fixes and\nmodifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @andyneff and @torbjoernk for updating our release targets\n* @zkry for work on rate-limiting\n* @Foxboron for work on reproducible builds\n* @mstrap for adding a release target for Linux arm64\n* @keiko713, @Erwyn, and @mloskot for improving our documentation\n* @QuLogic for fixing our tests under SELinux\n* @saracen and @steffengodskesen for improving our output handling\n* @mbsulliv for finding and fixing a bug where we ran out of file descriptors\n\n### Features\n\n* Add sles 15 support #1055 #3515 (@andyneff)\n* docs/man/git-lfs-config.5.ronn: document GIT_LFS_SKIP_SMUDGE #3509 (@ttaylorr)\n* commands/command_pointer.go: introduce `--check` option #3501 (@ttaylorr)\n* Makefile additions for reproducible builds and asmflags #3444 (@Foxboron)\n* locking: add flag to control modification of ignored files #3409 (@bk2204)\n* build package for Ubuntu 18.10 aka Cosmic #3402 (@torbjoernk)\n* Add support for retries with delays (ex. rate limiting) #3449 (@zkry)\n* Trim embedded paths out of binaries #3443 (@bk2204)\n* Ensure 32-bit Git LFS binaries can handle files larger than 4 GiB #3426 (@bk2204)\n* Support attribute macros #3391 (@bk2204)\n* tasklog: don't log progress status when stdout is not a tty #3349 (@steffengodskesen)\n* locking: cache JSON response from server #3253 (@mstrap)\n* tq: enable transfer debugging when GIT_CURL_VERBOSE is set #3341 (@bk2204)\n\n### Bugs\n\n* .circleci: don't use 'brew prune' #3514 (@ttaylorr)\n* t/t-smudge.sh: remove unnecessary test #3513 (@ttaylorr)\n* docs/man: fix inconsistency in 'git-lfs-ls-files(1)' #3496 (@ttaylorr)\n* lfshttp: close body on redirect #3479 (@bk2204)\n* status: handle deleted files gracefully #3482 (@bk2204)\n* Fix hang in prune with too few file descriptors #3460 (@bk2204)\n* Fix parameter name on List Locks API Documentation #3477 (@Erwyn)\n* TST: Trim security context when checking permissions. #3476 (@QuLogic)\n* command/env: ensure we honor lfs.url #3470 (@bk2204)\n* Fix swapped case sensitivity in patterns #3433 (@bk2204)\n* core.sharedRepository improvements for directories #3417 (@bk2204)\n* Update the doc of whitelisted .lfsconfig keys #3423 (@keiko713)\n* Rewrite URL config-matching #3392 (@PastelMobileSuit)\n* git: close blob objects when finished #3379 (@bk2204)\n* Avoid hang in repos cloned with --shared or --reference #3383 (@bk2204)\n* commands/command_status.go: require a working copy #3378 (@ttaylorr)\n* Fix test server API #3377 (@bk2204)\n* vendor: don't remove necessary dependencies #3356 (@ttaylorr)\n* filepathfilter: don't say file is both accepted and rejected #3360 (@bk2204)\n* Support pushInsteadOf aliases when determining endpoints #3353 (@bk2204)\n* Close attributes file #3347 (@mbsulliv)\n* Fix humanize's FormatByteRate() to work with 0s duration #3340 (@saracen)\n\n### Misc\n\n* Release automation #3510 (@bk2204)\n* docs/man: update `git-lfs-fetch(1)` manpage #3488 (@ttaylorr)\n* Update Cobra #3483 (@bk2204)\n* Run go generate only on Windows #3480 (@bk2204)\n* docs/man/git-lfs-migrate: make examples less confusing #3424 (@bk2204)\n* Modify logic of 'migrate info' to process extensionless files #3458 (@zkry)\n* Improve error message on missing object #3398 (@bk2204)\n* docs/man: suggest using Git configuration for LFS keys #3394 (@bk2204)\n* Document default value of migrate info --top=<n> #3387 (@mloskot)\n* Clarify minimum git version #3327 (@carlwgeorge)\n\n## 2.6.1 (3 December 2018)\n\nThis release contains miscellaneous bug fixes since v2.6.0. Most notably,\nrelease v2.6.1 restores support for alternate repositories, which was\naccidentally broken in v2.6.0.\n\n### Bugs\n\n* git: close blob objects when finished #3379 (@bk2204)\n* Avoid hang in repos cloned with --shared or --reference #3383 (@bk2204)\n* vendor: don't remove necessary dependencies #3356 (@ttaylorr)\n\n## 2.6.0 (1 November, 2018)\n\nThis release adds better support for redirecting network calls from a Git LFS\nAPI server to one that requires a different authentication mode, builds Git LFS\non Go 1.11, and numerous other bug fixes and modifications.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @andyneff for updating our release targets\n* @gtsiolis: for removing the deprecated `git lfs clone` from the listing of\n  supported Git LFS commands\n* @jsantell for fixing a formatting issue in the INCLUDE AND EXCLUDE man page\n  section\n* @mmlb for adding a release target for Linux arm64\n* @skashyap7 for adding the 'git lfs track -n'\n* @Villemoes: for modernizing the Git LFS installation procedure on Debian.\n\n### Features\n\n* commands: list explicitly excluded patterns separately #3320 (@bk2204)\n* Uninstall improvements #3326 (@bk2204)\n* config: honor GIT_AUTHOR_DATE and GIT_COMMITTER_DATE #3314 (@bk2204)\n* Add new `.netrc` credential helper #3307 (@PastelMobileSuit)\n* Honor umask and core.sharedRepository #3304 (@bk2204)\n* Support listing only filename tracked by git lfs using --name (-n) option\n  #3271 (@skashyap7)\n* all: use Go 1.11.1 in CI #3298 (@ttaylorr)\n* lfsapi/tq: Have DoWithAuth() caller determine URL Access Mode #3293\n  (@PastelMobileSuit)\n* commands: undeprecate checkout #3303 (@bk2204)\n* Checkout options for conflicts #3296 (@bk2204)\n* Makefile: build source tarballs for release #3283 (@bk2204)\n* Encrypted SSL key support #3270 (@bk2204)\n* Add support for core.sshCommand #3235 (@bk2204)\n* gitobj-based Object Scanner #3236 (@bk2204)\n* README.md: new core team members #3217 (@ttaylorr)\n* Add build and releases for linux arm64 #3196 (@mmlb)\n* Update packagecloud.rb #3210 (@andyneff)\n* all: use Go modules instead of Glide #3208 (@ttaylorr)\n* all: use Go 1.11 in CI #3203 (@ttaylorr)\n\n### Bugs\n\n* Fix formatting of INCLUDE AND EXCLUDE (REFS) #3330 (@jsantell)\n* go.sum: add missing entries #3319 (@bk2204)\n* Ensure correct syntax for commit headers in lfs migrate import #3313 (@bk2204)\n* Clean up trailing whitespace #3299 (@bk2204)\n* commands: unambiguously resolve remote references #3285 (@ttaylorr)\n* Expand custom transfer args by using the shell #3259 (@bk2204)\n* Canonicalize paths properly on Windows #3277 (@bk2204)\n* debian/prerm: add --system flag #3272 (@Villemoes)\n* t: make testsuite run under git rebase -x #3262 (@bk2204)\n* git/gitattr: parse 'set' attributes #3255 (@ttaylorr)\n* t: avoid panic in lfstest-customadapter #3243 (@bk2204)\n* t: avoid using shell variables in printf's first argument #3242 (@bk2204)\n* lfsapi: handle SSH hostnames and aliases without users #3230 (@bk2204)\n* commands/command_ls_files.go: ignore index with argument #3219 (@ttaylorr)\n* commands/command_migrate_import.go: install hooks #3227 (@ttaylorr)\n* t: mark test sources as .PHONY #3228 (@ttaylorr)\n* Pass GIT_SSH_COMMAND to the shell #3199 (@bk2204)\n* Tidy misformatted files #3202 (@bk2204)\n* config: expand core.hooksPath #3212 (@ttaylorr)\n* locks: manage write permissions of ignored files #3190 (@ttaylorr)\n\n### Misc\n\n* CONTRIBUTING.md: :nail_care: #3325 (@ttaylorr)\n* Update CONTRIBUTING #3317 (@bk2204)\n* go.mod: depend on tagged gitobj #3311 (@ttaylorr)\n* RFC: SSH protocol #3290 (@bk2204)\n* Remove `git lfs clone` command from man #3301 (@gtsiolis)\n* ROADMAP.md: use GitHub issues instead #3286 (@ttaylorr)\n* docs: add note about closing release milestone #3274 (@bk2204)\n* CI improvements #3268 (@bk2204)\n* docs/howto: document our release process #3261 (@ttaylorr)\n* Create new lfshttp package #3244 (@PastelMobileSuit)\n* CONTRIBUTING: update required go version #3232 (@PastelMobileSuit)\n* go.mod: use latest github.com/olekukonko/ts #3223 (@ttaylorr)\n* go.mod: pin github.com/git-lfs/wildmatch to v1.0.0 #3218 (@ttaylorr)\n* Update README.md #3193 (@srl295)\n\n## 2.5.2 (17 September, 2018)\n\n### Bugs\n\n* config: Treat [host:port]:path URLs correctly #3226 (@saschpe)\n* tq: Always provide a Content-Type when uploading files #3201 (@bk2204)\n* commands/track: Properly `lfs track` files with escaped characters in their\n  name #3192 (@leonid-s-usov)\n\n### Misc\n\n* packagecloud.rb: remove older versions #3210 (@andyneff)\n\n## 2.5.1 (2 August, 2018)\n\nThis release contains miscellaneous bug fixes since v2.5.0. Most notably,\nrelease v2.5.1 allows a user to disable automatic Content-Type detection\n(released in v2.5.0) via `git config lfs.contenttype false` for hosts that do\nnot support it.\n\n### Features\n\n* tq: make Content-Type detection disable-able #3163 (@ttaylorr)\n\n### Bugs\n\n* Makefile: add explicit rule for commands/mancontent_gen.go #3160 (@jj1bdx)\n* script/install.sh: mark as executable #3155 (@ttaylorr)\n* config: add origin to remote list #3152 (@PastelMobileSuit)\n\n### Misc\n\n* docs/man/mangen.go: don't show non-fatal output without --verbose #3168\n  (@ttaylorr)\n* LICENSE.md: update copyright year #3156 (@IMJ355)\n* Makefile: silence some output #3164 (@ttaylorr)\n* Makefile: list prerequisites for resource.syso #3153 (@ttaylorr)\n\n## 2.5.0 (26 July, 2018)\n\nThis release adds three new migration modes, updated developer ergonomics, and\na handful of bug fixes to Git LFS.\n\nWe would like to extend a special thanks to the following open-source\ncontributors:\n\n* @calavera for fixing a broken Go test and adding support for custom\n  Content-Type headers in #3137 and #3138.\n* @cbuehlmann for adding support for encoded character names in filepaths via\n  #3093.\n* @larsxschneider for changing the default value of lfs.allowincompletepush in\n  #3109.\n* @NoEffex for supporting TTL in SSH-based authentication tokens via #2867.\n* @ssgelm for adding 'go generate' to our Debian packages via #3083.\n\n### Features\n\n* Makefile: replace many scripts with make targets #3144 (@ttaylorr)\n* {.travis,appveyor}.yml: upgrade to Go 1.10.3 #3146 (@ttaylorr)\n* t: run tests using prove #3125 (@ttaylorr)\n* commands/migrate: infer wildmatches with --fixup #3114 (@ttaylorr)\n* Retry SSH resolution 5 times #2934 (@stanhu)\n* Implement `migrate export` subcommand #3084 (@PastelMobileSuit)\n* Add `--no-rewrite` flag to `migrate import` command #3029 (@PastelMobileSuit)\n\n### Bugs\n\n* t: fix contains_same_elements() fn #3145 (@PastelMobileSuit)\n* commands: warn if working copy is dirty #3124 (@ttaylorr)\n* Ensure provided remote takes precedence over configured pushRemote #3139 (@PastelMobileSuit)\n* Fix proxy unit tests. #3138 (@calavera)\n* commands/command_migrate.go: loosen meaning of '--everything' #3121 (@ttaylorr)\n* lfsapi: don't query askpass for given creds #3126 (@PastelMobileSuit)\n* config/git_fetcher.go: mark 'lfs.allowincompletepush' as safe #3113 (@ttaylorr)\n* fs: support multiple object alternates #3116 (@ttaylorr)\n* commands/checkout: checkout over read-only files #3120 (@ttaylorr)\n* test/testhelpers.sh: look for 64 character SHA-256's #3119 (@ttaylorr)\n* config/config.go: case-insensitive error search #3098 (@ttaylorr)\n* Encoded characters in pathnames #3093 (@cbuehlmann)\n* Support default TTL for authentication tokens acquired via SSH #2867 (@NoEffex)\n* commands/status.go: relative paths outside of root #3080 (@ttaylorr)\n* Run `go generate` on commands in deb build #3083 (@ssgelm)\n* lfsapi: prefer proxying from gitconfig before environment #3062 (@ttaylorr)\n* commands/track: respect global- and system-level gitattributes #3076 (@ttaylorr)\n* git/git.go: pass --multiple to git-fetch(1) when appropriate #3063 (@ttaylorr)\n* commands/checkout: fix inaccurate messaging #3055 (@ttaylorr)\n* commands/migrate: do not migrate empty commits #3054 (@ttaylorr)\n* git/odb: retain trailing newlines in commit messages #3053 (@ttaylorr)\n\n### Misc\n\n* Set original file content type on basic upload. #3137 (@calavera)\n* README.md: Git for Windows ships LFS by default #3112 (@larsxschneider)\n* change lfs.allowincompletepush default from true to false  #3109 (@larsxschneider)\n* *: replace git/odb with vendored copy #3108 (@ttaylorr)\n* test/test-ls-files.sh: skip on CircleCI #3101 (@ttaylorr)\n* lfsapi/ssh.go: use zero-value sentinels #3099 (@ttaylorr)\n* README.md: add link to installation wiki page #3075 (@ttaylorr)\n* docs/man/git-lfs.1.ronn: update casing and missing commands #3059 (@ttaylorr)\n* commands/checkout: mark 'git lfs checkout' as deprecated #3056 (@ttaylorr)\n\n## 2.4.2 (28 May, 2018)\n\n### Bugs\n\n* lfsapi: re-authenticate HTTP redirects when needed #3028 (@ttaylorr)\n* lfsapi: allow unknown keywords in netrc file(s) #3027 (@ttaylorr)\n\n## 2.4.1 (18 May, 2018)\n\nThis release fixes a handful of bugs found and fixed since v2.4.0. In\nparticular, Git LFS no longer panic()'s after invalid API responses, can\ncorrectly run 'fetch' on SHAs instead of references, migrates symbolic links\ncorrectly, and avoids writing to `$HOME/.gitconfig` more than is necessary.\n\nWe would like to extend a \"thank you\" to the following contributors for their\ngracious patches:\n\n- @QuLogic fixed an issue with running tests that require credentials\n- @patrickmarlier made it possible for 'git lfs migrate import' to work\n  correctly with symbolic links.\n- @zackse fixed an inconsistency in `CONTRIBUTING.md`\n- @zanglang fixed an inconsistency in `README.md`\n\nGit LFS would not be possible without generous contributions from the\nopen-source community. For these, and many more: thank you!\n\n### Features\n\n* script/packagecloud.rb: release on Ubuntu Bionic #2961 (@ttaylorr)\n\n### Bugs\n\n* lfsapi: canonicalize extra HTTP headers #3010 (@ttaylorr)\n* commands/lock: follow symlinks before locking #2996 (@ttaylorr)\n* lfs/attribute.go: remove default value from upgradeables #2994 (@ttaylorr)\n* git: include SHA1 in ref-less revisions #2982 (@ttaylorr)\n* Do not migrate the symlinks to LFS objects. #2983 (@patrickmarlier)\n* commands/uninstall: do not log about global hooks with --local #2976 (@ttaylorr)\n* commands/run.go: exit 127 on unknown sub-command #2969 (@ttaylorr)\n* commands/{un,}track: perform \"prefix-agnostic\" comparisons #2955 (@ttaylorr)\n* commands/migrate: escape paths before .gitattributes  #2933 (@ttaylorr)\n* commands/ls-files: do not accept '--all' after '--' #2932 (@ttaylorr)\n* tq: prevent uint64 underflow with invalid API response #2902 (@ttaylorr)\n\n### Misc\n\n* test/test-env: skip comparing GIT_EXEC_PATH #3015 (@ttaylorr)\n* remove reference to CLA from contributor's guide #2997 (@zackse)\n* .gitattributes link is broken #2985 (@zanglang)\n* commands: make --version a synonym for 'version' #2968, #3017 (@ttaylorr)\n* test: ensure that git-mergetool(1) works with large files #2939 (@ttaylorr)\n* README.md: note the correct PackageCloud URL #2960 (@ttaylorr)\n* README.md: mention note about `git lfs track` retroactively #2948 (@ttaylorr)\n* README.md: reorganize into Core Team, Alumni #2941 (@ttaylorr)\n* README.md: :nail_care: #2942 (@ttaylorr)\n* circle.yml: upgrade to 'version: 2' syntax #2928 (@ttaylorr)\n* Use unique repo name for tests that require credentials. #2901 (@QuLogic)\n\n## 2.4.0 (2 March, 2018)\n\nThis release introduces a rewrite of the underlying file matching engine,\nexpands the API to include relevant refspecs for individual requests,\nstandardizes the progress output among commands, and more.\n\nPlease note: in the next MAJOR release (v3.0.0) the semantic meaning behind\n`--include` and `--exclude` flags will change. As the details of exactly which\nexisting patterns will no longer function as previously are known, we will\nindicate them here. Any `--include` or `--exclude` patterns used in v2.3.0 or\nearlier are expected to work as previously in this release.\n\nThis release would not be possible without the open-source community.\nSpecifically, we would like to thank:\n\n- @larsxschneider: for contributing fixes to the filter operation in `git lfs\n  fsck`, and `git lfs prune`, as well as the bug report leading to the\n  filepathfilter changes.\n- @yfronto: for adding new Linux release targets.\n- @stffabi: for adding support for NTLM with SSPI on Windows.\n- @jeffreydwalter: for fixing memory alignment issues with `sync/atomic` on\n  32-bit architectures.\n- @b4mboo: for adding a LFS configuration key to the list of safe configuration\n  options.\n\nWithout the aforementioned indviduals, this release would not have been\npossible. Thank you!\n\n### Features\n\n* __Support wildmatch-compliant options in `--include`, `--exclude`__\n  * filepathfilter: implement using wildmatch #2875 (@ttaylorr)\n  * test: add wildmatch migration tests #2888 (@larsxschneider, @ttaylorr)\n* __Expand the specification to include relevant refspecs__\n  * verify locks against each ref being pushed #2706 (@technoweenie)\n  * Batch send refspec take 2 #2809 (@technoweenie)\n  * Run 1 TransferQueue per uploaded ref #2806 (@technoweenie)\n  * Locks/verify: full refspec #2722 (@technoweenie)\n  * send remote refspec for the other lock commands #2773 (@technoweenie)\n* __Standardize progress meter output and implementation__\n  * tq: standardized progress meter formatting #2811 (@ttaylorr)\n  * commands/fetch: unify formatting #2758 (@ttaylorr)\n  * commands/prune: unify formatting #2757 (@ttaylorr)\n  * progress: use git/githistory/log package for formatting #2732 (@ttaylorr)\n  * progress: remove `*progress.Meter` #2762 (@ttaylorr)\n  * tasklog: teach `*Logger` how to enqueue new `*SimpleTask`'s #2767 (@ttaylorr)\n  * progress: remove spinner.go #2759 (@ttaylorr)\n* __Teach new flags, functionality to `git lfs ls-files`__\n  * commands: teach '--all' to `git lfs ls-files` #2796 (@ttaylorr)\n  * commands/ls-files: show cached, tree-less LFS objects #2795 (@ttaylorr)\n  * commands/ls-files: add --include, --exclude #2793 (@ttaylorr)\n  * commands/ls-files: add '--size' flag #2764 (@ttaylorr)\n* __Add new flags, functionality to `git lfs migrate`__\n  * commands/migrate: support '^'-prefix refspec in arguments #2785 (@ttaylorr)\n  * commands/migrate: add '--skip-fetch' for offline migrations #2738 (@ttaylorr)\n  * git: prefer sending revisions over STDIN than arguments #2739 (@ttaylorr)\n* __Release to new operating systems__\n  * release lfs for ubuntu/artful too #2704 (@technoweenie)\n  * Adding Mint Sylvia to packagecloud.rb script #2829 (@yfronto)\n* __New functionality in package `lfsapi`__\n  * NTLM authentication with SSPI on windows #2871 (@stffabi)\n  * lfsapi/auth: teach DoWithAuth to respect http.extraHeaders #2733 (@ttaylorr)\n  * add support for url-specific proxies #2651 (@technoweenie)\n* __Code cleanup in git.Config, package `localstorage`__\n  * Tracked remote #2700 (@technoweenie)\n  * Replace git.Config #2692 (@technoweenie)\n  * Replace localstorage #2689 (@technoweenie)\n  * Remove last global config #2687 (@technoweenie)\n  * Git config refactor #2676 (@technoweenie)\n\n### Bugs\n\n* all: fix 32-bit alignment issues with `sync/atomic` #2883 (@ttaylorr)\n* all: memory alignment issues on 32-bit systems. #2880 (@jeffreydwalter)\n* command/migrate: don't migrate remote references in bare repositories #2769 (@ttaylorr)\n* commands/ls-files: behave correctly before initial commit #2794 (@ttaylorr)\n* commands/migrate: allow for ambiguous references in migrations #2734 (@ttaylorr)\n* commands: fill in missing printf arg #2678 (@technoweenie)\n* config: Add `lfs.locksverify` to safe keys. #2797 (@b4mboo)\n* don't replace pointers with objects if clean filter is not configured #2626 (@technoweenie)\n* fsck: attach a filter to exclude unfetched items from fsck #2847 (@larsxschneider)\n* git/githistory: copy entries from cache, elsewhere #2884 (@ttaylorr)\n* git/githistory: migrate annotated tags correctly #2780 (@ttaylorr)\n* git/odb: don't print extra newline after commit message #2784 (@ttaylorr)\n* git/odb: extract identifiers from commits verbatim #2751 (@wsprent)\n* git/odb: implement parsing for annotated `*Tag`'s #2778 (@ttaylorr)\n* git/odb: retain newlines when parsing commit messages #2786 (@ttaylorr)\n* lfs: PointerScanner is nil after error, so don't close #2699 (@technoweenie)\n* lfsapi: Cred helper improvements #2695 (@technoweenie)\n* lfsapi: retry requests changing access from none IF Auth header is empty #2621 (@technoweenie)\n* prune: always prune excluded paths #2851 (@larsxschneider)\n* status: fix incorrect formatting with unpushed objects #2746 (@ttaylorr)\n* tasklog: don't drop updates in PercentageTask #2755 (@ttaylorr)\n* test: Fix integration test early exit #2735 (@technoweenie)\n* test: generate random repo names with fs-safe characters #2698 (@technoweenie)\n\n### Misc\n\n* all: Nitpicks #2821 (@technoweenie)\n* all: introduce package 'tlog' #2747 (@ttaylorr)\n* all: remove CLA #2870 (@MikeMcQuaid)\n* build: Specify the embedded Windows icon as part of versioninfo.json #2770 (@sschuberth)\n* config,test: Testlib no global config #2709 (@mathstuf)\n* config: add PushRemote() for checking `branch.*.pushRemote` and `remote.pushDefault` first #2715 (@technoweenie)\n* docs: Added documentation for git-lfs-ls-files' `*/-` output. #2719 (@bilke)\n* docs: Uninstall man page improvements #2730 (@dpursehouse)\n* docs: Update usage info for post-checkout #2830 (@proinsias)\n* docs: add 'git lfs prune' to main man page #2849 (@larsxschneider)\n* docs: use consistent casing for Git #2850 (@larsxschneider)\n* git/githistory: have `*RefUpdater` hold `*odb.ObjectDatabase` reference #2779 (@ttaylorr)\n* progress: move CopyCallback (& related) to package 'tools' #2749 (@ttaylorr)\n* progress: move `*progressLogger` implementation to package 'tools' #2750 (@ttaylorr)\n* refspec docs #2820 (@technoweenie)\n* script/test: run 'go tool vet' during testing #2788 (@ttaylorr)\n* tasklog: introduce `*SimpleTask` #2756 (@ttaylorr)\n* test: Ignore comment attr lines #2708 (@mathstuf)\n* test: Wait longer for test lfs server to start. #2716 (@QuLogic)\n* test: ensure commented attr lines are ignored #2736 (@ttaylorr)\n* tools/humanize: add 'FormatByteRate' to format transfer speed #2810 (@ttaylorr)\n* vendor: update 'xeipuuv/gojsonpointer' #2846 (@ttaylorr)\n\n## 2.3.4 (18 October, 2017)\n\n### Features\n\n* 'git lfs install' updates filters with 'skip-smudge' option #2673 (@technoweenie)\n\n### Bugs\n\n* FastWalkGitRepo: limit number of concurrent goroutines #2672 (@technoweenie)\n* handle scenario where multiple configuration values exist in ~/.gitconfig #2659 (@shiftkey)\n\n## 2.3.3 (9 October, 2017)\n\n### Bugs\n\n* invoke lfs for 'git update-index', fixing 'status' issues #2647 (@technoweenie)\n* cache http credential helper output by default #2648 (@technoweenie)\n\n## 2.3.2 (3 October, 2017)\n\n### Features\n\n* bump default activity timeout from 10s -> 30s #2632 (@technoweenie)\n\n### Bugs\n\n* ensure files are marked readonly after unlocking by ID #2642 (@technoweenie)\n* add files to index with path relative to current dir #2641 (@technoweenie)\n* better Netrc errors #2633 (@technoweenie)\n* only use askpass if credential.helper is not configured #2637 (@technoweenie)\n* convert backslash to slash when writing to .gitattributes #2625 (@technoweenie)\n\n### Misc\n\n* only copy req headers if there are git-configured extra headers #2622 (@technoweenie)\n* update tracerx to add timestamps #2620 (@rubyist)\n\n## 2.3.1 (27 September, 2017)\n\n### Features\n\n* add support for SSH_ASKPASS #2609 (@technoweenie)\n* `git lfs migrate --verbose` option #2610 (@technoweenie)\n* Support standalone custom transfer based on API URL prefix match #2590 (@sprohaska)\n\n### Bugs\n\n* Improve invalid URL error messages #2614 (@technoweenie)\n* Fix double counting progress bug #2608 (@technoweenie)\n* trim whitespace from GIT_ASKPASS provided passwords #2607 (@technoweenie)\n* remove mmap usage in Packfile reader #2600 (@technoweenie)\n* `git lfs clone`: don't fetch for unborn repositories #2598 (@shiftkey)\n\n### Misc\n\n* Windows Installer fixes:\n  * Show proper icon in add/remove programs list #2585 (@shiftkey)\n  * Make the Inno Setup installer script explicitly check for the binaries #2588 (@sschuberth)\n  * Improve compile-win-installer-unsigned.bat a bit #2586 (@sschuberth)\n* Update migrate docs example for multiple file types #2596 (@technoweenie)\n\n## 2.3.0 (14 September, 2017)\n\nGit LFS v2.3.0 includes performance optimizations for the `git-lfs-migrate(1)`\nand `git-clone(1)` commands, new features, bug-fixes, and more.\n\nThis release was made possible by contributors to Git LFS. Specifically:\n\n- @aleb: added support for \"standalone\" transfer agents, for using `rsync(1)`\n  and similar with Git LFS.\n- @bozaro: added support for custom `.git/lfs/objects` directories via the\n  `lfs.storage` configuration option.\n- @larsxschneider: fixed a recursive process leak when shelling out to Git,\n  added new features to `git lfs ls-files`, extra information in error\n  messages used for debugging, documentation changes and more.\n- @mathstuf: contributed a documentation change clarifying LFS's handling of\n  empty pointer files.\n- @rudineirk and @andyneff: updated our release process to build packages for\n  fedora/26.\n- @ssgelm: ensured that LFS is able to be released on Ubuntu Universe.\n\nTo everyone who has contributed to this or previous releases of Git LFS: Thank\nyou!\n\n### Features\n\n* git/odb/pack: improve `git lfs migrate` performance\n  * git/odb/pack: introduce packed object reassembly #2550 #2551 #2552 #2553 #2554 (@ttaylorr)\n  * git/odb/pack: teach packfile index entry lookups #2420 #2421 #2422 #2423 #2437 #2441 #2461 (@ttaylorr)\n  * git/{odb,githistory}: don't write unchanged objects #2541 (@ttaylorr)\n* commands: improve `git clone` performance with 'delay' capability #2511 #2469 #2468 #2471 #2467 #2476 #2483 (@ttaylorr)\n  * commands: mark `git lfs clone` as deprecated #2526 (@ttaylorr)\n* commands: enable `lfs.allowincompletepush` by default #2574 (@technoweenie)\n* commands: teach '--everything' to `git lfs migrate` #2558 (@ttaylorr)\n* commands: teach `git lfs ls-files` a '--debug' option #2540 (@larsxschneider)\n* commands,lfs: warn on 4gb size conversion during clean #2510 #2507 #2459 (@ttaylorr)\n* lfsapi/creds: teach about GIT_ASKPASS and core.askpass #2500 #2578 (@ttaylorr)\n* commands/status: indicate missing objects #2438 (@ttaylorr)\n* Allow using custom transfer agents directly #2429 (@aleb)\n* Add `lfs.storage` parameter for overriding LFS storage location #2023 (@bozaro)\n* lfsapi: enable credential caching by default #2508 (@ttaylorr)\n* commands/install: teach `--manual` to `git-lfs-install(1)` #2410 (@ttaylorr)\n\n### Bugs\n\n* migrate: fix migrations with subdirectories in '--include' or '--exclude' #2485 (@ttaylorr)\n* commands/migrate: fix hardlinking issue when different filesystem is mounted at `/tmp` #2566 (@ttaylorr)\n* commands: make `git lfs migrate` fetch ref updates before migrating #2538 (@ttaylorr)\n* commands: remove '--above=1mb' default from `git lfs migrate info` #2460 (@ttaylorr)\n* filepathfilter: fix `HasPrefix()` when no '--include' filters present #2579 (@technoweenie)\n* git/githistory/log: fix race condition with `git/githistory/log` tests #2495 (@ttaylorr)\n* git/odb: fix closing object database test #2457 (@ttaylorr)\n* git/githistory: only update local refs after migrations #2559 (@ttaylorr)\n* locking: fix unlocking files not removing write flag #2514 (@ttaylorr)\n* locks: fix unlocking files in a symlinked directory #2505 (@ttaylorr)\n* commands: teach `git lfs unlock` to ignore status errs in appropriate conditions #2475 (@ttaylorr)\n* git: expand `GetAttributePaths` check to include non-LFS lockables #2528 (@ttaylorr)\n* fix multiple `git update-index` invocations #2531 (@larsxschneider)\n* tools: fix SSH credential cacher expiration #2530 (@ttaylorr)\n* lfsapi: fix read/write race condition in credential cacher #2493 (@ttaylorr)\n* lfs: fix cleaning contents larger than 1024 bytes over stdin #2488 (@ttaylorr)\n* fsck only scans current version of objects #2049 (@TheJare)\n* progress: fix writing updates to `$GIT_LFS_PROGRESS` #2465 (@ttaylorr)\n* commands/track: resolve symlinks before comparing attr paths #2463 (@ttaylorr)\n* test: ensure that empty pointers are empty #2458 (@ttaylorr)\n* git/githistory/log: prevent 'NaN' showing up in `*PercentageTask` #2455 (@ttaylorr)\n* tq: teach Batch() API to retry itself after io.EOF's #2516 (@ttaylorr)\n\n### Misc\n\n* script/packagecloud: release LFS on Fedora/26 #2443 #2509 (@rudineirk, @andyneff)\n* git/githistory: change \"Rewriting commits\" when not updating refs #2577 (@ttaylorr)\n* commands: print IP addresses in error logs #2570 (@larsxschneider)\n* commands: print current time in UTC to error logs #2571 (@larsxschneider)\n* commands: Disable lock verification when using a standalone custom-tr\u2026 #2499 (@aleb)\n* docs/man: update `git lfs migrate` documentation with EXAMPLES #2580 (@technoweenie)\n* docs/man: recommend global per-host locking config #2546 (@larsxschneider)\n* commands: use transfer queue's batch size instead of constant #2529 (@ttaylorr)\n* add function to invoke Git with disabled LFS filters #2453 (@larsxschneider)\n* config: warn on unsafe keys in `.lfsconfig` #2502 (@ttaylorr)\n* glide: remove unused dependencies #2501 (@ttaylorr)\n* script/build: pass '-{ld,gc}flags' to compiler, if given #2462 (@ttaylorr)\n* spec: mention that an empty file is its own LFS pointer #2449 (@mathstuf)\n* Update to latest version of github.com/pkg/errors #2426 (@ssgelm)\n* Update gitignore to add some temp files that get created when building debs #2425 (@ssgelm)\n* lfs: indent contents of `git lfs install`, `update` #2392 (@ttaylorr)\n* tq: increase default `lfs.concurrenttransfers` to 8 #2506 (@ttaylorr)\n\n## 2.2.1 (10 July, 2017)\n\n### Bugs\n\n* git lfs status --json only includes lfs files #2374 (@asottile)\n* git/odb: remove temporary files after migration #2388 (@ttaylorr)\n* git/githistory: fix hanging on empty set of commits #2383 (@ttaylorr)\n* migrate: don't checkout HEAD on bare repositories #2389 (@ttaylorr)\n* git/odb: prevent cross-volume link error when saving objects #2382 (@ttaylorr)\n* commands: only pass --jobs to `git clone` if set #2369 (@technoweenie)\n\n### Misc\n\n* lfs: trace hook install, uninstall, upgrade #2393 (@ttaylorr)\n* vendor: remove github.com/cheggaaa/pb #2386 (@ttaylorr)\n* Use FormatBytes from git-lfs/tools/humanize instead of cheggaaa/pb #2377 (@ssgelm)\n\n\n## 2.2.0 (27 June, 2017)\n\nGit LFS v2.2.0 includes bug fixes, minor features, and a brand new `migrate`\ncommand. The `migrate` command rewrites commits, converting large files from\nGit blobs to LFS objects. The most common use case will fix a git push rejected\nfor having large blobs:\n\n```\n$ git push origin master\n# ...\nremote: error: file a.psd is 1.2 gb; this exceeds github's file size limit of 100.00 mb\nto github.com:ttaylorr/demo.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'git@github.com:ttaylorr/demo.git'\n\n$ git lfs migrate info\n*.psd   1.2 GB   27/27 files(s)  100%\n\n$ git lfs migrate import --include=\"*.psd\"\nmigrate: Sorting commits: ..., done\nmigrate: Rewriting commits: 100% (810/810), done\n  master        f18bb746d44e8ea5065fc779bb1acdf3cdae7ed8 -> 35b0fe0a7bf3ae6952ec9584895a7fb6ebcd498b\nmigrate: Updating refs: ..., done\n\n$ git push origin\nGit LFS: (1 of 1 files) 1.2 GB / 1.2 GB\n# ...\nTo github.com:ttaylorr/demo.git\n * [new branch]      master -> master\n```\n\nThe `migrate` command has detailed options described in the `git-lfs-migrate(1)`\nman page. Keep in mind that this is the first pass at such a command, so we\nexpect there to be bugs and performance issues (especially on long git histories).\nFuture updates to the command will be focused on improvements to allow full\nLFS transitions on large repositories.\n\n### Features\n\n* commands: add git-lfs-migrate(1) 'import' subcommand #2353 (@ttaylorr)\n* commands: add git-lfs-migrate(1) 'info' subcommand #2313 (@ttaylorr)\n* Implement status --json #2311 (@asottile)\n* commands/uploader: allow incomplete pushes #2199 (@ttaylorr)\n\n### Bugs\n\n* Retry on timeout or temporary errors #2312 (@jakub-m)\n* commands/uploader: don't verify locks if verification is disabled #2278 (@ttaylorr)\n* Fix tools.TranslateCygwinPath() on MSYS #2277 (@raleksandar)\n* commands/clone: add new flags since Git 2.9 #2251, #2252 (@ttaylorr)\n* Make pull return non-zero error code when some downloads failed #2237 (@seth2810)\n* tq/basic_download: guard against nil HTTP response #2227 (@ttaylorr)\n* Bugfix: cannot push to scp style URL #2198 (@jiangxin)\n* support lfs.<url>.* values where url does not include .git #2192 (@technoweenie)\n* commands: fix logged error not interpolating format qualifiers #2228 (@ttaylorr)\n* commands/help: print helptext to stdout for consistency with Git #2210 (@ttaylorr)\n\n### Misc\n\n* Minor cleanups in help index #2248 (@dpursehouse)\n* Add git-lfs-lock and git-lfs-unlock to help index #2232 (@dpursehouse)\n* packagecloud: add Debian 9 entry to formatted list #2211 (@ttaylorr)\n* Update Xenial is to use stretch packages #2212 (@andyneff)\n\n## 2.1.1 (19 May, 2017)\n\nGit LFS v2.1.1 ships with bug fixes and a security patch fixing a remote code\nexecution vulnerability exploitable by setting a SSH remote via your\nrepository's `.lfsconfig` to contain the string \"-oProxyCommand\". This\nvulnerability is only exploitable if an attacker has write access to your\nrepository, or you clone a repository with a `.lfsconfig` file containing that\nstring.\n\n### Bugs\n\n* Make pull return non-zero error code when some downloads failed #2245 (@seth2810, @technoweenie)\n* lfsapi: support cross-scheme redirection #2243 (@ttaylorr)\n* sanitize ssh options parsed from ssh:// url #2242 (@technoweenie)\n* filepathfilter: interpret as .gitignore syntax #2238 (@technoweenie)\n* tq/basic_download: guard against nil HTTP response #2229 (@ttaylorr)\n* commands: fix logged error not interpolating format qualifiers #2230 (@ttaylorr)\n\n### Misc\n\n* release: backport Debian 9-related changes #2244 (@ssgelm, @andyneff, @ttaylorr)\n* Add git-lfs-lock and git-lfs-unlock to help index #2240 (@dpursehouse)\n* config: allow multiple environments when calling config.Unmarshal #2224 (@ttaylorr)\n\n## 2.1.0 (28 April, 2017)\n\n### Features\n\n* commands/track: teach --no-modify-attrs #2175 (@ttaylorr)\n* commands/status: add blob info to each entry #2070 (@ttaylorr)\n* lfsapi: improve HTTP request/response stats #2184 (@technoweenie)\n* all: support URL-style configuration lookups (@ttaylorr)\n  * commands: support URL-style lookups for `lfs.{url}.locksverify` #2162 (@ttaylorr)\n  * lfsapi: support URL-style lookups for `lfs.{url}.access` #2161 (@ttaylorr)\n  * lfsapi/certs: use `*config.URLConfig` to do per-host config lookup #2160 (@ttaylorr)\n  * lfsapi: support for http.<url>.extraHeader #2159 (@ttaylorr)\n  * config: add prefix to URLConfig type #2158 (@ttaylorr)\n  * config: remove dependency on lfsapi package #2156 (@ttaylorr)\n  * config: support multi-value lookup on URLConfig #2154 (@ttaylorr)\n  * lfsapi: initial httpconfig type #1912 (@technoweenie, @ttaylorr)\n* lfsapi,tq: relative expiration support #2130 (@ttaylorr)\n\n### Bugs\n\n* commands: include error in `LoggedError()` #2179 (@ttaylorr)\n* commands: cross-platform log formatting to files #2178 (@ttaylorr)\n* locks: cross-platform path normalization #2139 (@ttaylorr)\n* commands,locking: don't disable locking for auth errors during verify #2110 (@ttaylorr)\n* commands/status: show partially staged files twice #2067 (@ttaylorr)\n\n### Misc\n\n* all: build on Go 1.8.1 #2145 (@ttaylorr)\n* Polish custom-transfers.md #2171 (@sprohaska)\n* commands/push: Fix typo in comment #2170 (@sprohaska)\n* config: support multi-valued config entries #2152 (@ttaylorr)\n* smudge: use localstorage temp directory, not system #2140 (@ttaylorr)\n* locking: send locks limit to server #2107 (@ttaylorr)\n* lfs: extract `DiffIndexScanner` #2035 (@ttaylorr)\n* status: use DiffIndexScanner to populate results #2042 (@ttaylorr)\n\n## 2.0.2 (29 March, 2017)\n\n### Features\n\n* ssh auth and credential helper caching #2094 (@ttaylorr)\n* commands,tq: specialized logging for missing/corrupt objects #2085 (@ttaylorr)\n* commands/clone: install repo-level hooks after `git lfs clone` #2074\n* (@ttaylorr)\n* debian: Support building on armhf and arm64 #2089 (@p12tic)\n\n### Bugs\n\n* commands,locking: don't disable locking for auth errors during verify #2111\n* (@ttaylorr)\n* commands: show real error while cleaning #2096 (@ttaylorr)\n* lfsapi/auth: optionally prepend an empty scheme to Git remote URLs #2092\n* (@ttaylorr)\n* tq/verify: authenticate verify requests if required #2084 (@ttaylorr)\n* commands/{,un}track: correctly escape '#' and ' ' characters #2079 (@ttaylorr)\n* tq: use initialized lfsapi.Client instances in transfer adapters #2048\n* (@ttaylorr)\n\n### Misc\n\n* locking: send locks limit to server #2109 (@ttaylorr)\n* docs: update configuration documentation #2097 #2019 #2102 (@terrorobe)\n* docs: update locking API documentation #2099 #2101 (@dpursehouse)\n* fixed table markdown in README.md #2095 (@ZaninAndrea)\n* remove the the duplicate work #2098 (@grimreaper)\n\n## 2.0.1 (6 March, 2017)\n\n### Misc\n\n* tq: fallback to `_links` if present #2007 (@ttaylorr)\n\n## 2.0.0 (1 March, 2017)\n\nGit LFS v2.0.0 brings a number of important bug fixes, some new features, and\na lot of internal refactoring. It also completely removes old APIs that were\ndeprecated in Git LFS v0.6.\n\n### Locking\n\nFile Locking is a brand new feature that lets teams communicate when they are\nworking on files that are difficult to merge. Users are not able to edit or push\nchanges to any files that are locked by other users. While the feature has been\nin discussion for a year, we are releasing a basic Locking implementation to\nsolicit feedback from the community.\n\n### Transfer Queue\n\nLFS 2.0 introduces a new Git Scanner, which walks a range of Git commits looking\nfor LFS objects to transfer. The Git Scanner is now asynchronous, initiating\nlarge uploads or downloads in the Transfer Queue immediately once an LFS object\nis found. Previously, the Transfer Queue waited until all of the Git commits\nhave been scanned before initiating the transfer. The Transfer Queue also\nautomatically retries failed uploads and downloads more often.\n\n### Deprecations\n\nGit LFS v2.0.0 also drops support for the legacy API in v0.5.0. If you're still\nusing LFS servers on the old API, you'll have to stick to v1.5.6.\n\n### Features\n\n* Mid-stage locking support #1769 (@sinbad)\n* Define lockable files, make read-only in working copy #1870 (@sinbad)\n* Check that files are not uncommitted before unlock #1896 (@sinbad)\n* Fix `lfs unlock --force` on a missing file #1927 (@technoweenie)\n* locking: teach pre-push hook to check for locks #1815 (@ttaylorr)\n* locking: add `--json` flag #1814 (@ttaylorr)\n* Implement local lock cache, support querying it #1760 (@sinbad)\n* support for client certificates pt 2 #1893 (@technoweenie)\n* Fix clash between progress meter and credential helper #1886 (@technoweenie)\n* Teach uninstall cmd about --local and --system #1887 (@technoweenie)\n* Add `--skip-repo` option to `git lfs install` & use in tests #1868 (@sinbad)\n* commands: convert push, pre-push to use async gitscanner #1812 (@ttaylorr)\n* tq: prioritize transferring retries before new items #1758 (@ttaylorr)\n\n### Bugs\n\n* ensure you're in the correct directory when installing #1793 (@technoweenie)\n* locking: make API requests relative to repository, not root #1818 (@ttaylorr)\n* Teach 'track' about CRLF #1914 (@technoweenie)\n* Teach 'track' how to handle empty lines in .gitattributes #1921 (@technoweenie)\n* Closing stdout pipe before function return #1861 (@monitorjbl)\n* Custom transfer terminate #1847 (@sinbad)\n* Fix Install in root problems #1727 (@technoweenie)\n* cat-file batch: read all of the bytes #1680 (@technoweenie)\n* Fixed file paths on cygwin. #1820, #1965 (@creste, @ttaylorr)\n* tq: decrement uploaded bytes in basic_upload before retry #1958 (@ttaylorr)\n* progress: fix never reading bytes with sufficiently small files #1955 (@ttaylorr)\n* tools: fix truncating string fields between balanced quotes in GIT_SSH_COMMAND #1962 (@ttaylorr)\n* commands/smudge: treat empty pointers as empty files #1954 (@ttaylorr)\n\n### Misc\n\n* all: build using Go 1.8 #1952 (@ttaylorr)\n* Embed the version information into the Windows executable #1689 (@sschuberth)\n* Add more meta-data to the Windows installer executable #1752 (@sschuberth)\n* docs/api: object size must be positive #1779 (@ttaylorr)\n* build: omit DWARF tables by default #1937 (@ttaylorr)\n* Add test to prove set operator [] works in filter matching #1768 (@sinbad)\n* test: add ntlm integration test #1840 (@technoweenie)\n* lfs/tq: completely remove legacy support #1686 (@ttaylorr)\n* remove deprecated features #1679 (@technoweenie)\n* remove legacy api support #1629 (@technoweenie)\n\n## 1.5.6 (16 February, 2017)\n\n## Bugs\n\n* Spool malformed pointers to avoid deadlock #1932 (@ttaylorr)\n\n## 1.5.5 (12 January, 2017)\n\n### Bugs\n\n* lfs: only buffer first 1k when creating a CleanPointerError #1856 (@ttaylorr)\n\n## 1.5.4 (27 December, 2016)\n\n### Bugs\n\n* progress: guard negative padding width, panic in `strings.Repeat` #1807 (@ttaylorr)\n* commands,lfs: handle malformed pointers #1805 (@ttaylorr)\n\n### Misc\n\n* script/packagecloud: release LFS on fedora/25 #1798 (@ttaylorr)\n* backport filepathfilter to v1.5.x #1782 (@technoweenie)\n\n## 1.5.3 (5 December, 2016)\n\n### Bugs\n\n* Support LFS installations at filesystem root #1732 (@technoweenie)\n* git: parse filter process header values containing '=' properly #1733 (@larsxschneider)\n* Fix SSH endpoint parsing #1738 (@technoweenie)\n\n### Misc\n\n* build: release on Go 1.7.4 #1741 (@ttaylorr)\n\n## 1.5.2 (22 November, 2016)\n\n### Features\n\n* Release LFS on Fedora 24 #1685 (@technoweenie)\n\n### Bugs\n\n* filter-process: fix reading 1024 byte files #1708 (@ttaylorr)\n* Support long paths on Windows #1705 (@technoweenie)\n\n### Misc\n\n* filter-process: exit with error if we detect an unknown command from Git #1707 (@ttaylorr)\n* vendor: remove contentaddressable lib #1706 (@technoweenie)\n\n## 1.5.1 (18 November, 2016)\n\n### Bugs\n\n* cat-file --batch parser errors on non-lfs git blobs #1680 (@technoweenie)\n\n## 1.5.0 (17 November, 2016)\n\n### Features\n\n* Filter Protocol Support #1617 (@ttaylorr, @larsxschneider)\n* Fast directory walk #1616 (@sinbad)\n* Allow usage of proxies even when contacting localhost #1605 (@chalstrick)\n\n### Bugs\n\n* start reading off the Watch() channel before sending any input #1671 (@technoweenie)\n* wait for remote ref commands to exit before returning #1656 (@jjgod, @technoweenie)\n\n### Misc\n\n* rewrite new catfilebatch implementation for upcoming gitscanner pkg #1650 (@technoweenie)\n* refactor testutils.FileInput so it's a little more clear #1666 (@technoweenie)\n* Update the lfs track docs #1642 (@technoweenie)\n* Pre push tracing #1638 (@technoweenie)\n* Remove `AllGitConfig()` #1634 (@technoweenie)\n* README: set minimal required Git version to 1.8.5 #1636 (@larsxschneider)\n* 'smudge --info' is deprecated in favor of 'ls-files' #1631 (@technoweenie)\n* travis-ci: test GitLFS with ancient Git version #1626 (@larsxschneider)\n\n## 1.4.4 (24 October, 2016)\n\n### Bugs\n\n* transfer: more descriptive \"expired at\" errors #1603 (@ttaylorr)\n* commands,lfs/tq: Only send unique OIDs to the Transfer Queue #1600 (@ttaylorr)\n* Expose the result message in case of an SSH authentication error #1599 (@sschuberth)\n\n### Misc\n\n* AppVeyor: Do not build branches with open pull requests #1594 (@sschuberth)\n* Update .mailmap #1593 (@dpursehouse)\n\n## 1.4.3 (17 October, 2016)\n\n### Bugs\n\n* lfs/tq: use extra arguments given to tracerx.Printf #1583 (@ttaylorr)\n* api: correctly print legacy API warning to Stderr #1582 (@ttaylorr)\n\n### Misc\n\n* Test storage retries #1585 (@ttaylorr)\n* Test legacy check retries behavior #1584 (@ttaylorr)\n* docs: Fix a link to the legacy API #1579 (@sschuberth)\n* Add a .mailmap file #1577 (@sschuberth)\n* Add a large wizard image to the Windows installer #1575 (@sschuberth)\n* Appveyor badge #1574 (@ttaylorr)\n\n## 1.4.2 (10 October, 2016)\n\nv1.4.2 brings a number of bug fixes and usability improvements to LFS. This\nrelease also adds support for multiple retries within the transfer queue, making\ntransfers much more reliable. To enable this feature, see the documentation for\n`lfs.transfer.maxretries` in `git-lfs-config(5)`.\n\nWe'd also like to extend a special thank-you to @sschuberth who undertook the\nprocess of making LFS's test run on Windows through AppVeyor. Now all pull\nrequests run tests on macOS, Linux, and Windows.\n\n### Features\n\n* lfs: warn on usage of the legacy API #1564 (@ttaylorr)\n* use filepath.Clean() when comparing filenames to include/exclude patterns #1565 (@technoweenie)\n* lfs/transfer_queue: support multiple retries per object #1505, #1528, #1535, #1545 (@ttaylorr)\n* Automatically upgrade old filters instead of requiring \u2014force #1497 (@sinbad)\n* Allow lfs.pushurl in .lfsconfig #1489 (@technoweenie)\n\n### Bugs\n\n* Use \"sha256sum\" on Windows  #1566 (@sschuberth)\n* git: ignore non-root wildcards #1563 (@ttaylorr)\n* Teach status to recognize multiple files with identical contents #1550 (@ttaylorr)\n* Status initial commit #1540 (@sinbad)\n* Make path comparison robust against Windows short / long path issues #1523 (@sschuberth)\n* Allow fetch to run without a remote configured #1507 (@sschuberth)\n\n### Misc\n\n* travis: run tests on Go 1.7.1 #1568 (@ttaylorr)\n* Enable running tests on AppVeyor CI #1567 (@sschuberth)\n* Travis: Only install git if not installed yet #1557 (@sschuberth)\n* Windows test framework fixes #1522 (@sschuberth)\n* Simplify getting the absolute Git root directory #1518 (@sschuberth)\n* Add icons to the Windows installer #1504 (@sschuberth)\n* docs/man: reference git-lfs-pointer(1) in clean documentation #1503 (@ttaylorr)\n* Make AppVeyor CI for Windows work again #1506 (@sschuberth)\n* commands: try out RegisterCommand() #1495 (@technoweenie)\n\n## 1.4.1 (26 August, 2016)\n\n### Features\n\n* retry if file download failed #1454 (@larsxschneider)\n* Support wrapped clone in current directory #1478 (@ttaylorr)\n\n### Misc\n\n* Test `RetriableReader` #1482 (@ttaylorr)\n\n## 1.4.0 (19 August, 2016)\n\n### Features\n\n* Install LFS at the system level when packaged #1460 (@javabrett)\n* Fetch remote urls #1451 (@technoweenie)\n* add object Authenticated property #1452 (@technoweenie)\n* add support for `url.*.insteadof` in git config #1117, #1443 (@artagnon, @technoweenie)\n\n### Bugs\n\n* fix --include bug when multiple files have same lfs content #1458 (@technoweenie)\n* check the git version is ok in some key commands #1461 (@technoweenie)\n* fix duplicate error reporting #1445, #1453 (@dpursehouse, @technoweenie)\n* transfer/custom: encode \"event\" as lowercase #1441 (@ttaylorr)\n\n### Misc\n\n* docs/man: note GIT_LFS_PROGRESS #1469 (@ttaylorr)\n* Reword the description of HTTP 509 status #1467 (@dpursehouse)\n* Update fetch include/exclude docs for pattern matching #1455 (@ralfthewise)\n* config-next: API changes to the `config` package #1425 (@ttaylorr)\n* errors-next: Contextualize error messages #1463 (@ttaylorr, @technoweenie)\n* scope commands to not leak instances of themselves #1434 (@technoweenie)\n* Transfer manifest #1430 (@technoweenie)\n\n## 1.3.1 (2 August 2016)\n\n### Features\n\n* lfs/hook: teach `lfs.Hook` about `core.hooksPath` #1409 (@ttaylorr)\n\n### Bugs\n\n* distinguish between empty include/exclude paths #1411 (@technoweenie)\n* Fix sslCAInfo config lookup when host in config doesn't have a trailing slash #1404 (@dakotahawkins)\n\n### Misc\n\n* Use commands.Config instead of config.Config #1390 (@technoweenie)\n\n## 1.3.0 (21 July 2016)\n\n### Features\n\n* use proxy from git config #1173, #1358 (@jonmagic, @LizzHale, @technoweenie)\n* Enhanced upload/download of LFS content: #1265 #1279 #1297 #1303 #1367 (@sinbad)\n  * Resumable downloads using HTTP range headers\n  * Resumable uploads using [tus.io protocol](http://tus.io)\n  * Pluggable [custom transfer adapters](https://github.com/git-lfs/git-lfs/blob/master/docs/custom-transfers.md)\n* In git 2.9+, run \"git lfs pull\" in submodules after \"git lfs clone\" #1373 (@sinbad)\n* cmd,doc,test: teach `git lfs track --{no-touch,verbose,dry-run}` #1344 (@ttaylorr)\n* \u23f3 Retry transfers with expired actions #1350 (@ttaylorr)\n* Safe track patterns #1346 (@ttaylorr)\n* Add checkout --unstaged flag #1262 (@orivej)\n* cmd/clone: add include/exclude via flags and config #1321 (@ttaylorr)\n* Improve progress reporting when files skipped #1296 (@sinbad)\n* Experimental file locking commands #1236, #1259, #1256, #1386 (@ttaylorr)\n* Implement support for GIT_SSH_COMMAND #1260 (@pdf)\n* Recognize include/exclude filters from config #1257 (@ttaylorr)\n\n### Bugs\n\n* Fix bug in Windows installer under Win32. #1200 (@teo-tsirpanis)\n* Updated request.GetAuthType to handle multi-value auth headers #1379 (@VladimirKhvostov)\n* Windows fixes #1374 (@sinbad)\n* Handle artifactory responses #1371 (@ttaylorr)\n* use `git rev-list --stdin` instead of passing each remote ref #1359 (@technoweenie)\n* docs/man: move \"logs\" subcommands from OPTIONS to COMMANDS #1335 (@ttaylorr)\n* test/zero-len: update test for git v2.9.1 #1369 (@ttaylorr)\n* Unbreak building httputil on OpenBSD #1360 (@jasperla)\n* WIP transferqueue race fix #1255 (@technoweenie)\n* Safety check to `comands.requireStdin` #1349 (@ttaylorr)\n* Removed CentOS 5 from dockers. Fixed #1295. #1298 (@javabrett)\n* Fix 'git lfs fetch' with a sha1 ref #1323 (@omonnier)\n* Ignore HEAD ref when fetching with --all #1310 (@ttaylorr)\n* Return a fully remote ref to reduce chances of ref clashes #1248 (@technoweenie)\n* Fix reporting of `git update-index` errors in `git lfs checkout` and `git lfs pull` #1400 (@technoweenie)\n\n### Misc\n\n* Added Linux Mint Sarah to package cloud script #1384 (@andyneff)\n* travis-ci: require successful tests against upcoming Git core release #1372 (@larsxschneider)\n* travis-ci: add a build job to test against upcoming versions of Git #1361 (@larsxschneider)\n* Create Makefiles for building with gccgo #1222 (@zeldin)\n* README: add @ttaylorr to core team #1332 (@ttaylorr)\n* Enforced a minimum gem version of 1.0.4 for packagecloud-ruby #1292 (@javabrett)\n* I think this should be \"Once installed\" and not \"One installed\", but \u2026 #1305 (@GabLeRoux)\n* script/test: propagate extra args to go test #1324 (@omonnier)\n* Add `lfs.basictransfersonly` option to disable non-basic transfer adapters #1299 (@sinbad)\n* Debian build vendor test excludes #1291 (@javabrett)\n* gitignore: ignore lfstest-\\* files #1271 (@ttaylorr)\n* Disable gojsonschema test, causes failures when firewalls block it #1274 (@sinbad)\n* test: use noop credential helper for auth tests #1267 (@ttaylorr)\n* get git tests passing when run outside of repository #1229 (@technoweenie)\n* Package refactor no.1 #1226 (@sinbad)\n* vendor: vendor dependencies in vendor/ using Glide #1243 (@ttaylorr)\n\n## 1.2.1 (2 June 2016)\n\n### Features\n\n* Add missing config details to `env` command #1217 (@sinbad)\n* Allow smudge filter to return 0 on download failure #1213 (@sinbad)\n* Add `git lfs update --manual` option & promote it on hook install fail #1182 (@sinbad)\n* Pass `git lfs clone` flags through to `git clone` correctly, respect some options #1160 (@sinbad)\n\n### Bugs\n\n* Clean trailing `/` from include/exclude paths #1278 (@ttaylorr)\n* Fix problems with user prompts in `git lfs clone` #1185 (@sinbad)\n* Fix failure to return non-zero exit code when lfs install/update fails to install hooks #1178 (@sinbad)\n* Fix missing man page #1149 (@javabrett)\n* fix concurrent map read and map write #1179 (@technoweenie)\n\n### Misc\n\n* Allow additional fields on request & response schema #1276 (@sinbad)\n* Fix installer error on win32. #1198 (@teo-tsirpanis)\n* Applied same -ldflags -X name value -> name=value fix #1193 (@javabrett)\n* add instructions to install from MacPorts #1186 (@skymoo)\n* Add xenial repo #1170 (@graingert)\n\n## 1.2.0 (14 April 2016)\n\n### Features\n\n* netrc support #715 (@rubyist)\n* `git lfs clone` command #988 (@sinbad)\n* Support self-signed certs #1067 (@sinbad)\n* Support sslverify option for specific hosts #1081 (@sinbad)\n* Stop transferring duplicate objects on major push or fetch operations on multiple refs. #1128 (@technoweenie)\n* Touch existing git tracked files when tracked in LFS so they are flagged as modified #1104 (@sinbad)\n* Support for git reference clones #1007 (@jlehtnie)\n\n### Bugs\n\n* Fix clean/smudge filter string for files starting with - #1083 (@epriestley)\n* Fix silent failure to push LFS objects when ref matches a filename in the working copy #1096 (@epriestley)\n* Fix problems with using LFS in symlinked folders #818 (@sinbad)\n* Fix git lfs push silently misbehaving on ambiguous refs; fail like git push instead #1118 (@sinbad)\n* Whitelist `lfs.*.access` config in local ~/.lfsconfig #1122 (@rjbell4)\n* Only write the encoded pointer information to Stdout #1105 (@sschuberth)\n* Use hardcoded auth from remote or lfs config when accessing the storage api #1136 (@technoweenie, @jonmagic)\n* SSH should be called more strictly with command as one argument #1134 (@sinbad)\n\n## 1.1.2 (1 March, 2016)\n\n* Fix Base64 issues with `?` #989 (@technoweenie)\n* Fix zombie git proc issue #1012 (@rlaakkol)\n* Fix problems with files containing unicode characters #1016 (@technoweenie)\n* Fix panic in `git cat-file` parser #1006 (@technoweenie)\n* Display error messages in non-fatal errors #1028 #1039 #1042 (@technoweenie)\n* Fix concurrent map access in progress meter (@technoweenie)\n\n## 1.1.1 (4 February, 2016)\n\n### Features\n\n* Add copy-on-write support for Linux BTRFS filesystem #952 (@bozaro)\n* convert `git://` remotes to LFS servers automatically #964 (@technoweenie)\n* Fix `git lfs track` handling of absolute paths. #975  (@technoweenie)\n* Allow tunable http client timeouts #977 (@technoweenie)\n\n### Bugs\n\n* Suppress git config warnings for non-LFS keys #861 (@technoweenie)\n* Fix fallthrough when `git-lfs-authenticate` returns an error #909 (@sinbad)\n* Fix progress bar issue #883 (@pokehanai)\n* Support `remote.name.pushurl` config #949 (@sinbad)\n* Fix handling of `GIT_DIR` and `GIT_WORK_TREE` #963, #971 (@technoweenie)\n* Fix handling of zero length files #966 (@nathanhi)\n* Guard against invalid remotes passed to `push` and `pre-push` #974 (@technoweenie)\n* Fix race condition in `git lfs pull` #972 (@technoweenie)\n\n### Extra\n\n* Add server API test tool #868 (@sinbad)\n* Redo windows installer with innosetup #875 (@strich)\n* Pre-built packages are built with Go v1.5.3\n\n## 1.1.0 (18 November, 2015)\n\n* NTLM auth support #820 (@WillHipschman, @technoweenie)\n* Add `prune` command #742 (@sinbad)\n* Use .lfsconfig instead of .gitconfig #837 (@technoweenie)\n* Rename \"init\" command #838 (@technoweenie)\n* Raise error if credentials are needed #842 (@technoweenie)\n* Support git repos in symlinked directories #818 (@sinbad, @difro, @jiangxin)\n* Fix \"git lfs env\" to show correct SSH remote info #828 (@jiangxin)\n\n## 1.0.2 (28 October, 2015)\n\n* Fix issue with 'git lfs smudge' and the batch API. #795 (@technoweenie)\n* Fix race condition in the git scanning code. #801 (@technoweenie)\n\n## 1.0.1 (23 October, 2015)\n\n* Downcase git config keys (prevents Auth loop) #690 (@WillHipschman)\n* Show more info for unexpected http responses #710 (@rubyist)\n* Use separate stdout/stderr buffers for `git-lfs-authenticate` #718 (@bozaro)\n* Use LoggedError instead of Panic if update-index fails in checkout #735 (@sinbad)\n* `smudge` command exits with non-zero if the download fails #732 (@rubyist)\n* Use `git rev-parse` to find the git working dir #692 (@sinbad)\n* Improved default remote behaviour & validation for fetch/pull #713 (@sinbad)\n* Make fetch return error code when 1+ downloads failed #734 (@sinbad)\n* Improve lfs.InRepo() detection in `init`/`update` #756 (@technoweenie)\n* Teach smudge to use the batch api #711 (@rubyist)\n* Fix not setting global attribute when needed to b/c of local state #765 (@sinbad)\n* Fix clone fail when fetch is excluded globally #770 (@sinbad)\n* Fix for partial downloads problem #763 (@technoweenie)\n* Get integration tests passing on Windows #771 (@sinbad)\n\n### Security\n\n* Whitelist the valid keys read from .gitconfig #760 (@technoweenie)\n\nThis prevents unsafe git configuration values from being used by Git LFS.\n\n## v1.0 (1 October, 2015)\n\n* Manual reference is integrated into the \"help\" options #665 @sinbad\n* Fix `ls-files` when run from an empty repository #668 @Aorjoa\n* Support listing duplicate files in `ls-files` #681 @Aorjoa @technoweenie\n* `update` and `init` commands can install the pre-push hook in bare repositories #671 @technoweenie\n* Add `GIT_LFS_SKIP_SMUDGE` and `init --skip-smudge` #679 @technoweenie\n\n## v0.6.0 (10 September, 2015)\n\nThis is the first release that uses the new Batch API by default, while still\nfalling back to the Legacy API automatically. Also, new fetch/checkout/push\ncommands have been added.\n\nRun `git lfs update` in any local repositories to make sure all config settings\nare updated.\n\n### Fetch\n\n* Rename old `git lfs fetch` command to `git lfs pull`. #527 (@sinbad)\n* Add `git lfs checkout` #527 #543 #551 #566 (@sinbad)\n* Add `git lfs fetch` for _just_ downloading objects. #527 (@sinbad)\n  * Add `remote` arg, and default to tracking remote instead of \"origin\". #583 (@sinbad)\n  * Support fetching multiple refs #542 (@sinbad)\n  * Add `--include` and `--exclude` flag for `git lfs fetch` #573 (@sinbad)\n  * Add `--recent` flag for downloading recent files outside of the current\n    checkout. #610 (@sinbad)\n  * Add `--all` option for download all objects from the server. #633 (@sinbad)\n* Fix error handling while `git update-index` is running. #570 (@rubyist)\n\nSee [git-lfs-fetch(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-fetch.1.ronn),\n[git-lfs-checkout(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-checkout.1.ronn),\nand [git-lfs-pull(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-pull.1.ronn)\n for details.\n\n### Push\n\n* Support pushing multiple branches in the pre-push hook. #635 (@sinbad)\n* Fix pushing objects from a branch that's not HEAD. #608 (@sinbad)\n* Check server for objects before failing push because local is missing. #581 (@sinbad)\n* Filter out commits from remote refs when pushing. #578 (@billygor)\n* Support pushing all objects to the server, regardless of the remote ref. #646 (@technoweenie)\n* Fix case where pre-push git hook exits with 0. #582 (@sinbad)\n\nSee [git-lfs-push(1)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-push.1.ronn) for details.\n\n### API Clients\n\n* Fix some race conditions in the Batch API client. #577 #637 (@sinbad, @rubyist)\n* Support retries in the Batch API client. #595 (@rubyist)\n* Fix hanging batch client in certain error conditions. #594 (@rubyist)\n* Treat 401 responses as errors in the Legacy API client. #634 (@rubyist)\n* Fix bug in the Legacy API client when the object already exists on the server. #572 (@billygor)\n\n### Credentials\n\n* Fix how git credentials are checked in certain edge cases. #611 #650 #652 (@technoweenie)\n* Send URI user to git credentials. #626 (@sinbad)\n* Support git credentials with useHttpPath enabled. #554 (@clareliguori)\n\n### Installation\n\n* Docker images and scripts for building and testing linux packages. #511 #526 #555 #603 (@andyneff, @ssgelm)\n* Create Windows GUI installer. #642 (@technoweenie)\n* Binary releases use Go 1.5, which includes fix for Authorization when the\n  request URL includes just the username. [golang/go#11399](https://github.com/golang/go/issues/11399)\n\n### Misc\n\n* Documented Git config values used by Git LFS in [git-lfs-config(5)](https://github.com/git-lfs/git-lfs/blob/v0.6.0/docs/man/git-lfs-config.5.ronn). #610 (@sinbad)\n* Experimental support for Git worktrees (in Git 2.5+) #546 (@sinbad)\n* Experimental extension support. #486 (@ryansimmen)\n\n## v0.5.4 (30 July, 2015)\n\n* Ensure `git lfs uninit` cleans your git config thoroughly. #530 (@technoweenie)\n* Fix issue with asking `git-credentials` for auth details after getting them\nfrom the SSH command. #534 (@technoweenie)\n\n## v0.5.3 (23 July, 2015)\n\n* `git lfs fetch` bugs #429 (@rubyist)\n* Push can crash on 32 bit architectures #450 (@rubyist)\n* Improved SSH support #404, #464 (@sinbad, @technoweenie)\n* Support 307 redirects with relative url #442 (@sinbad)\n* Fix `init` issues when upgrading #446 #451 #452 #465 (@technoweenie, @rubyist)\n* Support chunked Transfer-Encoding #386 (@ryansimmen)\n* Fix issue with pushing deleted objects #461 (@technoweenie)\n* Teach `git lfs push` how to send specific objects #449 (@larsxschneider)\n* Update error message when attempting to push objects that don't exist in `.git/lfs/objects` #447 (@technoweenie)\n* Fix bug in HTTP client when response body is nil #472 #488 (@rubyist, @technoweenie)\n* `-crlf` flag in gitattributes is deprecated #475 (@technoweenie)\n* Improvements to the CentOS and Debian build and package scripts (@andyneff, @ssgelm)\n\n## v0.5.2 (19 June, 2015)\n\n* Add `git lfs fetch` command for downloading objects. #285 (@rubyist)\n* Fix `git lfs track` issues when run outside of a git repository #312, #323 (@michael-k, @Aorjoa)\n* Fix `git lfs track` for paths with spaces in them #327 (@technoweenie)\n* Fix `git lfs track` by writing relative paths to .gitattributes #356 (@michael-k)\n* Fix `git lfs untrack` so it doesn't remove entries incorrectly from .gitattributes #398 (@michael-k)\n* Fix `git lfs clean` bug with zero length files #346 (@technoweenie)\n* Add `git lfs fsck` #373 (@zeroshirts, @michael-k)\n* The Git pre-push warns if Git LFS is not installed #339 (@rubyist)\n* Fix Content-Type header sent by the HTTP client #329 (@joerg)\n* Improve performance tracing while scanning refs #311 (@michael-k)\n* Fix detection of LocalGitDir and LocalWorkingDir #312 #354 #361 (@michael-k)\n* Fix inconsistent file mode bits for directories created by Git LFS #364 (@michael-k)\n* Optimize shell execs #377, #382, #391 (@bozaro)\n* Collect HTTP transfer stats #366, #400 (@rubyist)\n* Support GIT_DIR and GIT_WORK_TREE #370 (@michael-k)\n* Hide Git application window in Windows #381 (@bozaro)\n* Add support for configured URLs containing credentials per RFC1738 #408 (@ewbankkit, @technoweenie)\n* Add experimental support for batch API calls #285 (@rubyist)\n* Improve linux build instructions for CentOS and Debian. #299 #309 #313 #332 (@jsh, @ssgelm, @andyneff)\n\n## v0.5.1 (30 April, 2015)\n\n* Fix Windows install.bat script.  #223 (@PeterDaveHello)\n* Fix bug where `git lfs clean` will clean Git LFS pointers too #271 (@technoweenie)\n* Better timeouts for the HTTP client #215 (@Mistobaan)\n* Concurrent uploads through `git lfs push` #258 (@rubyist)\n* Fix `git lfs smudge` behavior with zero-length file in `.git/lfs/objects` #267 (@technoweenie)\n* Separate out pre-push hook behavior from `git lfs push` #263 (@technoweenie)\n* Add diff/merge properties to .gitattributes #265 (@technoweenie)\n* Respect `GIT_TERMINAL_PROMPT ` #257 (@technoweenie)\n* Fix CLI progress bar output #185 (@technoweenie)\n* Fail fast in `clean` and `smudge` commands when run without STDIN #264 (@technoweenie)\n* Fix shell quoting in pre-push hook.  #235 (@mhagger)\n* Fix progress bar output during file uploads.  #185 (@technoweenie)\n* Change `remote.{name}.lfs_url` to `remote.{name}.lfsurl` #237 (@technoweenie)\n* Swap `git config` order.  #245 (@technoweenie)\n* New `git lfs pointer` command for generating and comparing pointers #246 (@technoweenie)\n* Follow optional \"href\" property from git-lfs-authenticate SSH command #247 (@technoweenie)\n* `.git/lfs/objects` spec clarifications: #212 (@rtyley), #244 (@technoweenie)\n* man page updates: #228 (@mhagger)\n* pointer spec clarifications: #246 (@technoweenie)\n* Code comments for the untrack command: #225 (@thekafkaf)\n\n## v0.5.0 (10 April, 2015)\n\n* Initial public release\n", "package commands\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/git-lfs/git-lfs/config\"\n\t\"github.com/git-lfs/git-lfs/errors\"\n\t\"github.com/git-lfs/git-lfs/filepathfilter\"\n\t\"github.com/git-lfs/git-lfs/git\"\n\t\"github.com/git-lfs/git-lfs/lfs\"\n\t\"github.com/git-lfs/git-lfs/lfsapi\"\n\t\"github.com/git-lfs/git-lfs/locking\"\n\t\"github.com/git-lfs/git-lfs/subprocess\"\n\t\"github.com/git-lfs/git-lfs/tools\"\n\t\"github.com/git-lfs/git-lfs/tq\"\n)\n\n// Populate man pages\n//go:generate go run ../docs/man/mangen.go\n\nvar (\n\tDebugging    = false\n\tErrorBuffer  = &bytes.Buffer{}\n\tErrorWriter  = newMultiWriter(os.Stderr, ErrorBuffer)\n\tOutputWriter = newMultiWriter(os.Stdout, ErrorBuffer)\n\tManPages     = make(map[string]string, 20)\n\ttqManifest   = make(map[string]*tq.Manifest)\n\n\tcfg       *config.Configuration\n\tapiClient *lfsapi.Client\n\tglobal    sync.Mutex\n\n\toldEnv = make(map[string]string)\n\n\tincludeArg string\n\texcludeArg string\n)\n\n// getTransferManifest builds a tq.Manifest from the global os and git\n// environments.\nfunc getTransferManifest() *tq.Manifest {\n\treturn getTransferManifestOperationRemote(\"\", \"\")\n}\n\n// getTransferManifestOperationRemote builds a tq.Manifest from the global os\n// and git environments and operation-specific and remote-specific settings.\n// Operation must be \"download\", \"upload\", or the empty string.\nfunc getTransferManifestOperationRemote(operation, remote string) *tq.Manifest {\n\tc := getAPIClient()\n\n\tglobal.Lock()\n\tdefer global.Unlock()\n\n\tk := fmt.Sprintf(\"%s.%s\", operation, remote)\n\tif tqManifest[k] == nil {\n\t\ttqManifest[k] = tq.NewManifest(cfg.Filesystem(), c, operation, remote)\n\t}\n\n\treturn tqManifest[k]\n}\n\nfunc getAPIClient() *lfsapi.Client {\n\tglobal.Lock()\n\tdefer global.Unlock()\n\n\tif apiClient == nil {\n\t\tc, err := lfsapi.NewClient(cfg)\n\t\tif err != nil {\n\t\t\tExitWithError(err)\n\t\t}\n\t\tapiClient = c\n\t}\n\treturn apiClient\n}\n\nfunc closeAPIClient() error {\n\tglobal.Lock()\n\tdefer global.Unlock()\n\tif apiClient == nil {\n\t\treturn nil\n\t}\n\treturn apiClient.Close()\n}\n\nfunc newLockClient() *locking.Client {\n\tlockClient, err := locking.NewClient(cfg.PushRemote(), getAPIClient(), cfg)\n\tif err == nil {\n\t\ttools.MkdirAll(cfg.LFSStorageDir(), cfg)\n\t\terr = lockClient.SetupFileCache(cfg.LFSStorageDir())\n\t}\n\n\tif err != nil {\n\t\tExit(\"Unable to create lock system: %v\", err.Error())\n\t}\n\n\t// Configure dirs\n\tlockClient.LocalWorkingDir = cfg.LocalWorkingDir()\n\tlockClient.LocalGitDir = cfg.LocalGitDir()\n\tlockClient.SetLockableFilesReadOnly = cfg.SetLockableFilesReadOnly()\n\n\treturn lockClient\n}\n\n// newDownloadCheckQueue builds a checking queue, checks that objects are there but doesn't download\nfunc newDownloadCheckQueue(manifest *tq.Manifest, remote string, options ...tq.Option) *tq.TransferQueue {\n\treturn newDownloadQueue(manifest, remote, append(options,\n\t\ttq.DryRun(true),\n\t)...)\n}\n\n// newDownloadQueue builds a DownloadQueue, allowing concurrent downloads.\nfunc newDownloadQueue(manifest *tq.Manifest, remote string, options ...tq.Option) *tq.TransferQueue {\n\treturn tq.NewTransferQueue(tq.Download, manifest, remote, append(options,\n\t\ttq.RemoteRef(currentRemoteRef()),\n\t)...)\n}\n\nfunc currentRemoteRef() *git.Ref {\n\treturn git.NewRefUpdate(cfg.Git, cfg.PushRemote(), cfg.CurrentRef(), nil).Right()\n}\n\nfunc buildFilepathFilter(config *config.Configuration, includeArg, excludeArg *string, useFetchOptions bool) *filepathfilter.Filter {\n\tinc, exc := determineIncludeExcludePaths(config, includeArg, excludeArg, useFetchOptions)\n\treturn filepathfilter.New(inc, exc)\n}\n\nfunc downloadTransfer(p *lfs.WrappedPointer) (name, path, oid string, size int64, missing bool, err error) {\n\tpath, err = cfg.Filesystem().ObjectPath(p.Oid)\n\treturn p.Name, path, p.Oid, p.Size, false, err\n}\n\n// Get user-readable manual install steps for hooks\nfunc getHookInstallSteps() string {\n\thookDir, err := cfg.HookDir()\n\tif err != nil {\n\t\tExitWithError(err)\n\t}\n\thooks := lfs.LoadHooks(hookDir, cfg)\n\tsteps := make([]string, 0, len(hooks))\n\tfor _, h := range hooks {\n\t\tsteps = append(steps, fmt.Sprintf(\n\t\t\t\"Add the following to .git/hooks/%s:\\n\\n%s\",\n\t\t\th.Type, tools.Indent(h.Contents)))\n\t}\n\n\treturn strings.Join(steps, \"\\n\\n\")\n}\n\nfunc installHooks(force bool) error {\n\thookDir, err := cfg.HookDir()\n\tif err != nil {\n\t\treturn err\n\t}\n\thooks := lfs.LoadHooks(hookDir, cfg)\n\tfor _, h := range hooks {\n\t\tif err := h.Install(force); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// uninstallHooks removes all hooks in range of the `hooks` var.\nfunc uninstallHooks() error {\n\tif !cfg.InRepo() {\n\t\treturn errors.New(\"Not in a git repository\")\n\t}\n\n\thookDir, err := cfg.HookDir()\n\tif err != nil {\n\t\treturn err\n\t}\n\thooks := lfs.LoadHooks(hookDir, cfg)\n\tfor _, h := range hooks {\n\t\tif err := h.Uninstall(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// Error prints a formatted message to Stderr.  It also gets printed to the\n// panic log if one is created for this command.\nfunc Error(format string, args ...interface{}) {\n\tif len(args) == 0 {\n\t\tfmt.Fprintln(ErrorWriter, format)\n\t\treturn\n\t}\n\tfmt.Fprintf(ErrorWriter, format+\"\\n\", args...)\n}\n\n// Print prints a formatted message to Stdout.  It also gets printed to the\n// panic log if one is created for this command.\nfunc Print(format string, args ...interface{}) {\n\tif len(args) == 0 {\n\t\tfmt.Fprintln(OutputWriter, format)\n\t\treturn\n\t}\n\tfmt.Fprintf(OutputWriter, format+\"\\n\", args...)\n}\n\n// Exit prints a formatted message and exits.\nfunc Exit(format string, args ...interface{}) {\n\tError(format, args...)\n\tos.Exit(2)\n}\n\n// ExitWithError either panics with a full stack trace for fatal errors, or\n// simply prints the error message and exits immediately.\nfunc ExitWithError(err error) {\n\terrorWith(err, Panic, Exit)\n}\n\n// FullError prints either a full stack trace for fatal errors, or just the\n// error message.\nfunc FullError(err error) {\n\terrorWith(err, LoggedError, Error)\n}\n\nfunc errorWith(err error, fatalErrFn func(error, string, ...interface{}), errFn func(string, ...interface{})) {\n\tif Debugging || errors.IsFatalError(err) {\n\t\tfatalErrFn(err, \"%s\", err)\n\t\treturn\n\t}\n\n\terrFn(\"%s\", err)\n}\n\n// Debug prints a formatted message if debugging is enabled.  The formatted\n// message also shows up in the panic log, if created.\nfunc Debug(format string, args ...interface{}) {\n\tif !Debugging {\n\t\treturn\n\t}\n\tlog.Printf(format, args...)\n}\n\n// LoggedError prints the given message formatted with its arguments (if any) to\n// Stderr. If an empty string is passed as the \"format\" argument, only the\n// standard error logging message will be printed, and the error's body will be\n// omitted.\n//\n// It also writes a stack trace for the error to a log file without exiting.\nfunc LoggedError(err error, format string, args ...interface{}) {\n\tif len(format) > 0 {\n\t\tError(format, args...)\n\t}\n\tfile := handlePanic(err)\n\n\tif len(file) > 0 {\n\t\tfmt.Fprintf(os.Stderr, \"\\nErrors logged to %s\\nUse `git lfs logs last` to view the log.\\n\", file)\n\t}\n}\n\n// Panic prints a formatted message, and writes a stack trace for the error to\n// a log file before exiting.\nfunc Panic(err error, format string, args ...interface{}) {\n\tLoggedError(err, format, args...)\n\tos.Exit(2)\n}\n\nfunc Cleanup() {\n\tif err := cfg.Cleanup(); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error clearing old temp files: %s\\n\", err)\n\t}\n}\n\nfunc PipeMediaCommand(name string, args ...string) error {\n\treturn PipeCommand(\"bin/\"+name, args...)\n}\n\nfunc PipeCommand(name string, args ...string) error {\n\tcmd := subprocess.ExecCommand(name, args...)\n\tcmd.Stdin = os.Stdin\n\tcmd.Stderr = os.Stderr\n\tcmd.Stdout = os.Stdout\n\treturn cmd.Run()\n}\n\nfunc requireStdin(msg string) {\n\tvar out string\n\n\tstat, err := os.Stdin.Stat()\n\tif err != nil {\n\t\tout = fmt.Sprintf(\"Cannot read from STDIN. %s (%s)\", msg, err)\n\t} else if (stat.Mode() & os.ModeCharDevice) != 0 {\n\t\tout = fmt.Sprintf(\"Cannot read from STDIN. %s\", msg)\n\t}\n\n\tif len(out) > 0 {\n\t\tError(out)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc requireInRepo() {\n\tif !cfg.InRepo() {\n\t\tPrint(\"Not in a git repository.\")\n\t\tos.Exit(128)\n\t}\n}\n\n// requireWorkingCopy requires that the working directory be a work tree, i.e.,\n// that it not be bare. If it is bare (or the state of the repository could not\n// be determined), this function will terminate the program.\nfunc requireWorkingCopy() {\n\tif cfg.LocalWorkingDir() == \"\" {\n\t\tPrint(\"This operation must be run in a work tree.\")\n\t\tos.Exit(128)\n\t}\n}\n\nfunc setupRepository() {\n\trequireInRepo()\n\tbare, err := git.IsBare()\n\tif err != nil {\n\t\tExitWithError(errors.Wrap(\n\t\t\terr, \"fatal: could not determine bareness\"))\n\t}\n\n\tif !bare {\n\t\tchangeToWorkingCopy()\n\t}\n}\n\nfunc setupWorkingCopy() {\n\trequireInRepo()\n\trequireWorkingCopy()\n\tchangeToWorkingCopy()\n}\n\nfunc changeToWorkingCopy() {\n\tworkingDir := cfg.LocalWorkingDir()\n\tcwd, err := tools.Getwd()\n\tif err != nil {\n\t\tExitWithError(errors.Wrap(\n\t\t\terr, \"fatal: could not determine current working directory\"))\n\t}\n\tcwd, err = filepath.EvalSymlinks(cwd)\n\tif err != nil {\n\t\tExitWithError(errors.Wrap(\n\t\t\terr, \"fatal: could not canonicalize current working directory\"))\n\t}\n\n\t// If the current working directory is not within the repository's\n\t// working directory, then let's change directories accordingly.  This\n\t// should only occur if GIT_WORK_TREE is set.\n\tif !(strings.HasPrefix(cwd, workingDir) && (cwd == workingDir || (len(cwd) > len(workingDir) && cwd[len(workingDir)] == os.PathSeparator))) {\n\t\tos.Chdir(workingDir)\n\t}\n}\n\nfunc canonicalizeEnvironment() {\n\tvars := []string{\"GIT_INDEX_FILE\", \"GIT_OBJECT_DIRECTORY\", \"GIT_DIR\", \"GIT_WORK_TREE\", \"GIT_COMMON_DIR\"}\n\tfor _, v := range vars {\n\t\tval, ok := os.LookupEnv(v)\n\t\tif ok {\n\t\t\tpath, err := tools.CanonicalizePath(val, true)\n\t\t\t// We have existing code which relies on users being\n\t\t\t// able to pass invalid paths, so don't fail if the path\n\t\t\t// cannot be canonicalized.\n\t\t\tif err == nil {\n\t\t\t\toldEnv[v] = val\n\t\t\t\tos.Setenv(v, path)\n\t\t\t}\n\t\t}\n\t}\n\tsubprocess.ResetEnvironment()\n}\n\nfunc handlePanic(err error) string {\n\tif err == nil {\n\t\treturn \"\"\n\t}\n\n\treturn logPanic(err)\n}\n\nfunc logPanic(loggedError error) string {\n\tvar (\n\t\tfmtWriter  io.Writer = os.Stderr\n\t\tlineEnding string    = \"\\n\"\n\t)\n\n\tnow := time.Now()\n\tname := now.Format(\"20060102T150405.999999999\")\n\tfull := filepath.Join(cfg.LocalLogDir(), name+\".log\")\n\n\tif err := tools.MkdirAll(cfg.LocalLogDir(), cfg); err != nil {\n\t\tfull = \"\"\n\t\tfmt.Fprintf(fmtWriter, \"Unable to log panic to %s: %s\\n\\n\", cfg.LocalLogDir(), err.Error())\n\t} else if file, err := os.Create(full); err != nil {\n\t\tfilename := full\n\t\tfull = \"\"\n\t\tdefer func() {\n\t\t\tfmt.Fprintf(fmtWriter, \"Unable to log panic to %s\\n\\n\", filename)\n\t\t\tlogPanicToWriter(fmtWriter, err, lineEnding)\n\t\t}()\n\t} else {\n\t\tfmtWriter = file\n\t\tlineEnding = gitLineEnding(cfg.Git)\n\t\tdefer file.Close()\n\t}\n\n\tlogPanicToWriter(fmtWriter, loggedError, lineEnding)\n\n\treturn full\n}\n\nfunc ipAddresses() []string {\n\tips := make([]string, 0, 1)\n\tifaces, err := net.Interfaces()\n\tif err != nil {\n\t\tips = append(ips, \"Error getting network interface: \"+err.Error())\n\t\treturn ips\n\t}\n\tfor _, i := range ifaces {\n\t\tif i.Flags&net.FlagUp == 0 {\n\t\t\tcontinue // interface down\n\t\t}\n\t\tif i.Flags&net.FlagLoopback != 0 {\n\t\t\tcontinue // loopback interface\n\t\t}\n\t\taddrs, _ := i.Addrs()\n\t\tl := make([]string, 0, 1)\n\t\tif err != nil {\n\t\t\tips = append(ips, \"Error getting IP address: \"+err.Error())\n\t\t\tcontinue\n\t\t}\n\t\tfor _, addr := range addrs {\n\t\t\tvar ip net.IP\n\t\t\tswitch v := addr.(type) {\n\t\t\tcase *net.IPNet:\n\t\t\t\tip = v.IP\n\t\t\tcase *net.IPAddr:\n\t\t\t\tip = v.IP\n\t\t\t}\n\t\t\tif ip == nil || ip.IsLoopback() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tl = append(l, ip.String())\n\t\t}\n\t\tif len(l) > 0 {\n\t\t\tips = append(ips, strings.Join(l, \" \"))\n\t\t}\n\t}\n\treturn ips\n}\n\nfunc logPanicToWriter(w io.Writer, loggedError error, le string) {\n\t// log the version\n\tgitV, err := git.Version()\n\tif err != nil {\n\t\tgitV = \"Error getting git version: \" + err.Error()\n\t}\n\n\tfmt.Fprint(w, config.VersionDesc+le)\n\tfmt.Fprint(w, gitV+le)\n\n\t// log the command that was run\n\tfmt.Fprint(w, le)\n\tfmt.Fprintf(w, \"$ %s\", filepath.Base(os.Args[0]))\n\tif len(os.Args) > 0 {\n\t\tfmt.Fprintf(w, \" %s\", strings.Join(os.Args[1:], \" \"))\n\t}\n\tfmt.Fprint(w, le)\n\n\t// log the error message and stack trace\n\tw.Write(ErrorBuffer.Bytes())\n\tfmt.Fprint(w, le)\n\n\tfmt.Fprintf(w, \"%+v\"+le, loggedError)\n\n\tfor key, val := range errors.Context(err) {\n\t\tfmt.Fprintf(w, \"%s=%v\"+le, key, val)\n\t}\n\n\tfmt.Fprint(w, le+\"Current time in UTC: \"+le)\n\tfmt.Fprint(w, time.Now().UTC().Format(\"2006-01-02 15:04:05\")+le)\n\n\tfmt.Fprint(w, le+\"ENV:\"+le)\n\n\t// log the environment\n\tfor _, env := range lfs.Environ(cfg, getTransferManifest(), oldEnv) {\n\t\tfmt.Fprint(w, env+le)\n\t}\n\n\tfmt.Fprint(w, le+\"Client IP addresses:\"+le)\n\n\tfor _, ip := range ipAddresses() {\n\t\tfmt.Fprint(w, ip+le)\n\t}\n}\n\nfunc determineIncludeExcludePaths(config *config.Configuration, includeArg, excludeArg *string, useFetchOptions bool) (include, exclude []string) {\n\tif includeArg == nil {\n\t\tif useFetchOptions {\n\t\t\tinclude = config.FetchIncludePaths()\n\t\t} else {\n\t\t\tinclude = []string{}\n\t\t}\n\t} else {\n\t\tinclude = tools.CleanPaths(*includeArg, \",\")\n\t}\n\tif excludeArg == nil {\n\t\tif useFetchOptions {\n\t\t\texclude = config.FetchExcludePaths()\n\t\t} else {\n\t\t\texclude = []string{}\n\t\t}\n\t} else {\n\t\texclude = tools.CleanPaths(*excludeArg, \",\")\n\t}\n\treturn\n}\n\nfunc buildProgressMeter(dryRun bool, d tq.Direction) *tq.Meter {\n\tm := tq.NewMeter(cfg)\n\tm.Logger = m.LoggerFromEnv(cfg.Os)\n\tm.DryRun = dryRun\n\tm.Direction = d\n\treturn m\n}\n\nfunc requireGitVersion() {\n\tminimumGit := \"1.8.2\"\n\n\tif !git.IsGitVersionAtLeast(minimumGit) {\n\t\tgitver, err := git.Version()\n\t\tif err != nil {\n\t\t\tExit(\"Error getting git version: %s\", err)\n\t\t}\n\t\tExit(\"git version >= %s is required for Git LFS, your version: %s\", minimumGit, gitver)\n\t}\n}\n", "package config\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n\t\"strings\"\n)\n\nvar (\n\tGitCommit   string\n\tVersionDesc string\n\tVendor      string\n)\n\nconst (\n\tVersion = \"2.13.2\"\n)\n\nfunc init() {\n\tgitCommit := \"\"\n\tif len(GitCommit) > 0 {\n\t\tgitCommit = \"; git \" + GitCommit\n\t}\n\tif len(Vendor) == 0 {\n\t\tVendor = \"GitHub\"\n\t}\n\tVersionDesc = fmt.Sprintf(\"git-lfs/%s (%s; %s %s; go %s%s)\",\n\t\tVersion,\n\t\tVendor,\n\t\truntime.GOOS,\n\t\truntime.GOARCH,\n\t\tstrings.Replace(runtime.Version(), \"go\", \"\", 1),\n\t\tgitCommit,\n\t)\n}\n", "package creds\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/git-lfs/git-lfs/config\"\n\t\"github.com/git-lfs/git-lfs/errors\"\n\t\"github.com/git-lfs/git-lfs/subprocess\"\n\t\"github.com/rubyist/tracerx\"\n)\n\n// CredentialHelperWrapper is used to contain the encapsulate the information we need for credential handling during auth.\ntype CredentialHelperWrapper struct {\n\tCredentialHelper CredentialHelper\n\tInput            Creds\n\tUrl              *url.URL\n\tCreds            Creds\n}\n\n// CredentialHelper is an interface used by the lfsapi Client to interact with\n// the 'git credential' command: https://git-scm.com/docs/gitcredentials\n// Other implementations include ASKPASS support, and an in-memory cache.\ntype CredentialHelper interface {\n\tFill(Creds) (Creds, error)\n\tReject(Creds) error\n\tApprove(Creds) error\n}\n\nfunc (credWrapper *CredentialHelperWrapper) FillCreds() error {\n\tcreds, err := credWrapper.CredentialHelper.Fill(credWrapper.Input)\n\tif creds == nil || len(creds) < 1 {\n\t\terrmsg := fmt.Sprintf(\"Git credentials for %s not found\", credWrapper.Url)\n\t\tif err != nil {\n\t\t\terrmsg = fmt.Sprintf(\"%s:\\n%s\", errmsg, err.Error())\n\t\t} else {\n\t\t\terrmsg = fmt.Sprintf(\"%s.\", errmsg)\n\t\t}\n\t\terr = errors.New(errmsg)\n\t}\n\tcredWrapper.Creds = creds\n\treturn err\n}\n\n// Creds represents a set of key/value pairs that are passed to 'git credential'\n// as input.\ntype Creds map[string]string\n\nfunc bufferCreds(c Creds) *bytes.Buffer {\n\tbuf := new(bytes.Buffer)\n\n\tfor k, v := range c {\n\t\tbuf.Write([]byte(k))\n\t\tbuf.Write([]byte(\"=\"))\n\t\tbuf.Write([]byte(v))\n\t\tbuf.Write([]byte(\"\\n\"))\n\t}\n\n\treturn buf\n}\n\ntype CredentialHelperContext struct {\n\tnetrcCredHelper   *netrcCredentialHelper\n\tcommandCredHelper *commandCredentialHelper\n\taskpassCredHelper *AskPassCredentialHelper\n\tcachingCredHelper *credentialCacher\n\n\turlConfig *config.URLConfig\n}\n\nfunc NewCredentialHelperContext(gitEnv config.Environment, osEnv config.Environment) *CredentialHelperContext {\n\tc := &CredentialHelperContext{urlConfig: config.NewURLConfig(gitEnv)}\n\n\tc.netrcCredHelper = newNetrcCredentialHelper(osEnv)\n\n\taskpass, ok := osEnv.Get(\"GIT_ASKPASS\")\n\tif !ok {\n\t\taskpass, ok = gitEnv.Get(\"core.askpass\")\n\t}\n\tif !ok {\n\t\taskpass, _ = osEnv.Get(\"SSH_ASKPASS\")\n\t}\n\tif len(askpass) > 0 {\n\t\tc.askpassCredHelper = &AskPassCredentialHelper{\n\t\t\tProgram: askpass,\n\t\t}\n\t}\n\n\tcacheCreds := gitEnv.Bool(\"lfs.cachecredentials\", true)\n\tif cacheCreds {\n\t\tc.cachingCredHelper = NewCredentialCacher()\n\t}\n\n\tc.commandCredHelper = &commandCredentialHelper{\n\t\tSkipPrompt: osEnv.Bool(\"GIT_TERMINAL_PROMPT\", false),\n\t}\n\n\treturn c\n}\n\n// getCredentialHelper parses a 'credsConfig' from the git and OS environments,\n// returning the appropriate CredentialHelper to authenticate requests with.\n//\n// It returns an error if any configuration was invalid, or otherwise\n// un-useable.\nfunc (ctxt *CredentialHelperContext) GetCredentialHelper(helper CredentialHelper, u *url.URL) CredentialHelperWrapper {\n\trawurl := fmt.Sprintf(\"%s://%s%s\", u.Scheme, u.Host, u.Path)\n\tinput := Creds{\"protocol\": u.Scheme, \"host\": u.Host}\n\tif u.User != nil && u.User.Username() != \"\" {\n\t\tinput[\"username\"] = u.User.Username()\n\t}\n\tif u.Scheme == \"cert\" || ctxt.urlConfig.Bool(\"credential\", rawurl, \"usehttppath\", false) {\n\t\tinput[\"path\"] = strings.TrimPrefix(u.Path, \"/\")\n\t}\n\n\tif helper != nil {\n\t\treturn CredentialHelperWrapper{CredentialHelper: helper, Input: input, Url: u}\n\t}\n\n\thelpers := make([]CredentialHelper, 0, 4)\n\tif ctxt.netrcCredHelper != nil {\n\t\thelpers = append(helpers, ctxt.netrcCredHelper)\n\t}\n\tif ctxt.cachingCredHelper != nil {\n\t\thelpers = append(helpers, ctxt.cachingCredHelper)\n\t}\n\tif ctxt.askpassCredHelper != nil {\n\t\thelper, _ := ctxt.urlConfig.Get(\"credential\", rawurl, \"helper\")\n\t\tif len(helper) == 0 {\n\t\t\thelpers = append(helpers, ctxt.askpassCredHelper)\n\t\t}\n\t}\n\treturn CredentialHelperWrapper{CredentialHelper: NewCredentialHelpers(append(helpers, ctxt.commandCredHelper)), Input: input, Url: u}\n}\n\n// AskPassCredentialHelper implements the CredentialHelper type for GIT_ASKPASS\n// and 'core.askpass' configuration values.\ntype AskPassCredentialHelper struct {\n\t// Program is the executable program's absolute or relative name.\n\tProgram string\n}\n\ntype credValueType int\n\nconst (\n\tcredValueTypeUnknown credValueType = iota\n\tcredValueTypeUsername\n\tcredValueTypePassword\n)\n\n// Fill implements fill by running the ASKPASS program and returning its output\n// as a password encoded in the Creds type given the key \"password\".\n//\n// It accepts the password as coming from the program's stdout, as when invoked\n// with the given arguments (see (*AskPassCredentialHelper).args() below)./\n//\n// If there was an error running the command, it is returned instead of a set of\n// filled credentials.\n//\n// The ASKPASS program is only queried if a credential was not already\n// provided, i.e. through the git URL\nfunc (a *AskPassCredentialHelper) Fill(what Creds) (Creds, error) {\n\tu := &url.URL{\n\t\tScheme: what[\"protocol\"],\n\t\tHost:   what[\"host\"],\n\t\tPath:   what[\"path\"],\n\t}\n\n\tcreds := make(Creds)\n\n\tusername, err := a.getValue(what, credValueTypeUsername, u)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcreds[\"username\"] = username\n\n\tif len(username) > 0 {\n\t\t// If a non-empty username was given, add it to the URL via func\n\t\t// 'net/url.User()'.\n\t\tu.User = url.User(creds[\"username\"])\n\t}\n\n\tpassword, err := a.getValue(what, credValueTypePassword, u)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcreds[\"password\"] = password\n\n\treturn creds, nil\n}\n\nfunc (a *AskPassCredentialHelper) getValue(what Creds, valueType credValueType, u *url.URL) (string, error) {\n\tvar valueString string\n\n\tswitch valueType {\n\tcase credValueTypeUsername:\n\t\tvalueString = \"username\"\n\tcase credValueTypePassword:\n\t\tvalueString = \"password\"\n\tdefault:\n\t\treturn \"\", errors.Errorf(\"Invalid Credential type queried from AskPass\")\n\t}\n\n\t// Return the existing credential if it was already provided, otherwise\n\t// query AskPass for it\n\tif given, ok := what[valueString]; ok {\n\t\treturn given, nil\n\t}\n\treturn a.getFromProgram(valueType, u)\n}\n\nfunc (a *AskPassCredentialHelper) getFromProgram(valueType credValueType, u *url.URL) (string, error) {\n\tvar (\n\t\tvalue bytes.Buffer\n\t\terr   bytes.Buffer\n\n\t\tvalueString string\n\t)\n\n\tswitch valueType {\n\tcase credValueTypeUsername:\n\t\tvalueString = \"Username\"\n\tcase credValueTypePassword:\n\t\tvalueString = \"Password\"\n\tdefault:\n\t\treturn \"\", errors.Errorf(\"Invalid Credential type queried from AskPass\")\n\t}\n\n\t// 'cmd' will run the GIT_ASKPASS (or core.askpass) command prompting\n\t// for the desired valueType (`Username` or `Password`)\n\tcmd := subprocess.ExecCommand(a.Program, a.args(fmt.Sprintf(\"%s for %q\", valueString, u))...)\n\tcmd.Stderr = &err\n\tcmd.Stdout = &value\n\n\ttracerx.Printf(\"creds: filling with GIT_ASKPASS: %s\", strings.Join(cmd.Args, \" \"))\n\tif err := cmd.Run(); err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif err.Len() > 0 {\n\t\treturn \"\", errors.New(err.String())\n\t}\n\n\treturn strings.TrimSpace(value.String()), nil\n}\n\n// Approve implements CredentialHelper.Approve, and returns nil. The ASKPASS\n// credential helper does not implement credential approval.\nfunc (a *AskPassCredentialHelper) Approve(_ Creds) error { return nil }\n\n// Reject implements CredentialHelper.Reject, and returns nil. The ASKPASS\n// credential helper does not implement credential rejection.\nfunc (a *AskPassCredentialHelper) Reject(_ Creds) error { return nil }\n\n// args returns the arguments given to the ASKPASS program, if a prompt was\n// given.\n\n// See: https://git-scm.com/docs/gitcredentials#_requesting_credentials for\n// more.\nfunc (a *AskPassCredentialHelper) args(prompt string) []string {\n\tif len(prompt) == 0 {\n\t\treturn nil\n\t}\n\treturn []string{prompt}\n}\n\ntype commandCredentialHelper struct {\n\tSkipPrompt bool\n}\n\nfunc (h *commandCredentialHelper) Fill(creds Creds) (Creds, error) {\n\ttracerx.Printf(\"creds: git credential fill (%q, %q, %q)\",\n\t\tcreds[\"protocol\"], creds[\"host\"], creds[\"path\"])\n\treturn h.exec(\"fill\", creds)\n}\n\nfunc (h *commandCredentialHelper) Reject(creds Creds) error {\n\t_, err := h.exec(\"reject\", creds)\n\treturn err\n}\n\nfunc (h *commandCredentialHelper) Approve(creds Creds) error {\n\ttracerx.Printf(\"creds: git credential approve (%q, %q, %q)\",\n\t\tcreds[\"protocol\"], creds[\"host\"], creds[\"path\"])\n\t_, err := h.exec(\"approve\", creds)\n\treturn err\n}\n\nfunc (h *commandCredentialHelper) exec(subcommand string, input Creds) (Creds, error) {\n\toutput := new(bytes.Buffer)\n\tcmd := subprocess.ExecCommand(\"git\", \"credential\", subcommand)\n\tcmd.Stdin = bufferCreds(input)\n\tcmd.Stdout = output\n\t/*\n\t   There is a reason we don't read from stderr here:\n\t   Git's credential cache daemon helper does not close its stderr, so if this\n\t   process is the process that fires up the daemon, it will wait forever\n\t   (until the daemon exits, really) trying to read from stderr.\n\n\t   Instead, we simply pass it through to our stderr.\n\n\t   See https://github.com/git-lfs/git-lfs/issues/117 for more details.\n\t*/\n\tcmd.Stderr = os.Stderr\n\n\terr := cmd.Start()\n\tif err == nil {\n\t\terr = cmd.Wait()\n\t}\n\n\tif _, ok := err.(*exec.ExitError); ok {\n\t\tif h.SkipPrompt {\n\t\t\treturn nil, fmt.Errorf(\"change the GIT_TERMINAL_PROMPT env var to be prompted to enter your credentials for %s://%s\",\n\t\t\t\tinput[\"protocol\"], input[\"host\"])\n\t\t}\n\n\t\t// 'git credential' exits with 128 if the helper doesn't fill the username\n\t\t// and password values.\n\t\tif subcommand == \"fill\" && err.Error() == \"exit status 128\" {\n\t\t\treturn nil, nil\n\t\t}\n\t}\n\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"'git credential %s' error: %s\\n\", subcommand, err.Error())\n\t}\n\n\tcreds := make(Creds)\n\tfor _, line := range strings.Split(output.String(), \"\\n\") {\n\t\tpieces := strings.SplitN(line, \"=\", 2)\n\t\tif len(pieces) < 2 || len(pieces[1]) < 1 {\n\t\t\tcontinue\n\t\t}\n\t\tcreds[pieces[0]] = pieces[1]\n\t}\n\n\treturn creds, nil\n}\n\ntype credentialCacher struct {\n\tcreds map[string]Creds\n\tmu    sync.Mutex\n}\n\nfunc NewCredentialCacher() *credentialCacher {\n\treturn &credentialCacher{creds: make(map[string]Creds)}\n}\n\nfunc credCacheKey(creds Creds) string {\n\tparts := []string{\n\t\tcreds[\"protocol\"],\n\t\tcreds[\"host\"],\n\t\tcreds[\"path\"],\n\t}\n\treturn strings.Join(parts, \"//\")\n}\n\nfunc (c *credentialCacher) Fill(what Creds) (Creds, error) {\n\tkey := credCacheKey(what)\n\tc.mu.Lock()\n\tcached, ok := c.creds[key]\n\tc.mu.Unlock()\n\n\tif ok {\n\t\ttracerx.Printf(\"creds: git credential cache (%q, %q, %q)\",\n\t\t\twhat[\"protocol\"], what[\"host\"], what[\"path\"])\n\t\treturn cached, nil\n\t}\n\n\treturn nil, credHelperNoOp\n}\n\nfunc (c *credentialCacher) Approve(what Creds) error {\n\tkey := credCacheKey(what)\n\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tif _, ok := c.creds[key]; ok {\n\t\treturn nil\n\t}\n\n\tc.creds[key] = what\n\treturn credHelperNoOp\n}\n\nfunc (c *credentialCacher) Reject(what Creds) error {\n\tkey := credCacheKey(what)\n\tc.mu.Lock()\n\tdelete(c.creds, key)\n\tc.mu.Unlock()\n\treturn credHelperNoOp\n}\n\n// CredentialHelpers iterates through a slice of CredentialHelper objects\n// CredentialHelpers is a []CredentialHelper that iterates through each\n// credential helper to fill, reject, or approve credentials. Typically, the\n// first success returns immediately. Errors are reported to tracerx, unless\n// all credential helpers return errors. Any erroring credential helpers are\n// skipped for future calls.\n//\n// A CredentialHelper can return a credHelperNoOp error, signaling that the\n// CredentialHelpers should try the next one.\ntype CredentialHelpers struct {\n\thelpers        []CredentialHelper\n\tskippedHelpers map[int]bool\n\tmu             sync.Mutex\n}\n\n// NewCredentialHelpers initializes a new CredentialHelpers from the given\n// slice of CredentialHelper instances.\nfunc NewCredentialHelpers(helpers []CredentialHelper) CredentialHelper {\n\treturn &CredentialHelpers{\n\t\thelpers:        helpers,\n\t\tskippedHelpers: make(map[int]bool),\n\t}\n}\n\nvar credHelperNoOp = errors.New(\"no-op!\")\n\n// Fill implements CredentialHelper.Fill by asking each CredentialHelper in\n// order to fill the credentials.\n//\n// If a fill was successful, it is returned immediately, and no other\n// `CredentialHelper`s are consulted. If any CredentialHelper returns an error,\n// it is reported to tracerx, and the next one is attempted. If they all error,\n// then a collection of all the error messages is returned. Erroring credential\n// helpers are added to the skip list, and never attempted again for the\n// lifetime of the current Git LFS command.\nfunc (s *CredentialHelpers) Fill(what Creds) (Creds, error) {\n\terrs := make([]string, 0, len(s.helpers))\n\tfor i, h := range s.helpers {\n\t\tif s.skipped(i) {\n\t\t\tcontinue\n\t\t}\n\n\t\tcreds, err := h.Fill(what)\n\t\tif err != nil {\n\t\t\tif err != credHelperNoOp {\n\t\t\t\ts.skip(i)\n\t\t\t\ttracerx.Printf(\"credential fill error: %s\", err)\n\t\t\t\terrs = append(errs, err.Error())\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tif creds != nil {\n\t\t\treturn creds, nil\n\t\t}\n\t}\n\n\tif len(errs) > 0 {\n\t\treturn nil, errors.New(\"credential fill errors:\\n\" + strings.Join(errs, \"\\n\"))\n\t}\n\n\treturn nil, nil\n}\n\n// Reject implements CredentialHelper.Reject and rejects the given Creds \"what\"\n// with the first successful attempt.\nfunc (s *CredentialHelpers) Reject(what Creds) error {\n\tfor i, h := range s.helpers {\n\t\tif s.skipped(i) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := h.Reject(what); err != credHelperNoOp {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn errors.New(\"no valid credential helpers to reject\")\n}\n\n// Approve implements CredentialHelper.Approve and approves the given Creds\n// \"what\" with the first successful CredentialHelper. If an error occurrs,\n// it calls Reject() with the same Creds and returns the error immediately. This\n// ensures a caching credential helper removes the cache, since the Erroring\n// CredentialHelper never successfully saved it.\nfunc (s *CredentialHelpers) Approve(what Creds) error {\n\tskipped := make(map[int]bool)\n\tfor i, h := range s.helpers {\n\t\tif s.skipped(i) {\n\t\t\tskipped[i] = true\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := h.Approve(what); err != credHelperNoOp {\n\t\t\tif err != nil && i > 0 { // clear any cached approvals\n\t\t\t\tfor j := 0; j < i; j++ {\n\t\t\t\t\tif !skipped[j] {\n\t\t\t\t\t\ts.helpers[j].Reject(what)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn errors.New(\"no valid credential helpers to approve\")\n}\n\nfunc (s *CredentialHelpers) skip(i int) {\n\ts.mu.Lock()\n\ts.skippedHelpers[i] = true\n\ts.mu.Unlock()\n}\n\nfunc (s *CredentialHelpers) skipped(i int) bool {\n\ts.mu.Lock()\n\tskipped := s.skippedHelpers[i]\n\ts.mu.Unlock()\n\treturn skipped\n}\n\ntype nullCredentialHelper struct{}\n\nvar (\n\tnullCredError = errors.New(\"No credential helper configured\")\n\tNullCreds     = &nullCredentialHelper{}\n)\n\nfunc (h *nullCredentialHelper) Fill(input Creds) (Creds, error) {\n\treturn nil, nullCredError\n}\n\nfunc (h *nullCredentialHelper) Approve(creds Creds) error {\n\treturn nil\n}\n\nfunc (h *nullCredentialHelper) Reject(creds Creds) error {\n\treturn nil\n}\n", "git-lfs (2.13.2) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Wed, 13 Jan 2021 14:29:00 -0000\n\ngit-lfs (2.13.1) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Fri, 11 Dec 2020 14:29:00 -0000\n\ngit-lfs (2.13.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Thu, 10 Dec 2020 14:29:00 -0000\n\ngit-lfs (2.12.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Tue, 1 Sep 2020 14:29:00 -0000\n\ngit-lfs (2.11.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Fri, 08 May 2020 14:29:00 -0000\n\ngit-lfs (2.10.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Tue, 21 Jan 2020 14:29:00 -0000\n\ngit-lfs (2.9.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Thu, 17 Oct 2019 14:29:00 -0000\n\ngit-lfs (2.8.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Tue, 23 Jul 2019 14:29:00 -0000\n\ngit-lfs (2.7.0) stable; urgency=low\n\n  * New upstream version\n\n -- brian m. carlson <bk2204@github.com>  Fri, 15 Feb 2019 14:29:00 -0000\n\ngit-lfs (2.6.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 1 Nov 2018 14:29:00 +0000\n\ngit-lfs (2.5.2) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 17 Sep 2018 14:29:00 +0000\n\ngit-lfs (2.5.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 2 Aug 2018 14:29:00 +0000\n\ngit-lfs (2.5.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 26 Jul 2018 14:29:00 +0000\n\ngit-lfs (2.4.2) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 28 May 2018 14:29:00 +0000\n\ngit-lfs (2.4.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 21 May 2018 14:29:00 +0000\n\ngit-lfs (2.4.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 1 Mar 2018 14:29:00 +0000\n\ngit-lfs (2.3.4) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Wed, 18 Oct 2017 14:29:00 +0000\n\ngit-lfs (2.3.3) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Mon, 9 Oct 2017 14:29:00 +0000\n\ngit-lfs (2.3.2) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Tue, 3 Oct 2017 14:29:00 +0000\n\ngit-lfs (2.3.1) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Wed, 26 Sep 2017 14:29:00 +0000\n\ngit-lfs (2.3.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Thu, 14 Sep 2017 14:29:00 +0000\n\ngit-lfs (2.2.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 10 Jul 2017 14:29:00 +0000\n\ngit-lfs (2.2.0) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Tue, 27 Jun 2017 14:29:00 +0000\n\ngit-lfs (2.1.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Fri, 19 May 2017 14:29:00 +0000\n\ngit-lfs (2.1.0) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Fri, 28 Apr 2017 14:29:00 +0000\n\ngit-lfs (2.0.2) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Wed, 29 Mar 2017 14:29:00 +0000\n\ngit-lfs (2.0.1) stable; urgency=low\n\n  * New upstream version\n\n -- Taylor Blau <me@ttaylorr.com>  Mon, 6 Mar 2017 14:29:00 +0000\n\ngit-lfs (2.0.0) stable; urgency=low\n\n  * New upstream version\n\n -- Rick Olson <technoweenie@gmail.com>  Tue, 1 Mar 2017 14:29:00 +0000\n\ngit-lfs (1.5.6) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 16 Feb 2017 14:29:00 +0000\n\ngit-lfs (1.5.5) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 12 Jan 2017 14:29:00 +0000\n\ngit-lfs (1.5.4) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Tue, 27 Dec 2016 14:29:00 +0000\n\ngit-lfs (1.5.3) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Mon, 5 Dec 2016 14:29:00 +0000\n\ngit-lfs (1.5.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Tue, 22 Nov 2016 14:29:00 +0000\n\ngit-lfs (1.5.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 18 Nov 2016 14:29:00 +0000\n\ngit-lfs (1.5.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 17 Nov 2016 14:29:00 +0000\n\ngit-lfs (1.4.4) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Mon, 24 Oct 2016 14:29:00 +0000\n\ngit-lfs (1.4.3) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Mon, 17 Oct 2016 14:29:00 +0000\n\ngit-lfs (1.4.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Mon, 10 Oct 2016 14:29:00 +0000\n\ngit-lfs (1.4.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 26 Aug 2016 14:29:00 +0000\n\ngit-lfs (1.4.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 19 Aug 2016 14:29:00 +0000\n\ngit-lfs (1.3.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Tue, 2 Aug 2016 14:29:00 +0000\n\ngit-lfs (1.3.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 21 Jul 2016 14:29:00 +0000\n\ngit-lfs (1.2.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 2 Jun 2016 14:29:00 +0000\n\ngit-lfs (1.2.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 14 Apr 2016 14:29:00 +0000\n\ngit-lfs (1.1.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Tue, 1 Mar 2016 14:29:00 +0000\n\ngit-lfs (1.1.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Wed, 4 Feb 2016 14:29:00 +0000\n\ngit-lfs (1.1.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Wed, 12 Nov 2015 14:29:00 +0000\n\ngit-lfs (1.0.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Wed, 28 Oct 2015 14:29:00 +0000\n\ngit-lfs (1.0.1) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 23 Oct 2015 14:29:00 +0000\n\ngit-lfs (1.0.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 1 Oct 2015 14:29:00 +0000\n\ngit-lfs (0.6.0) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Thu, 10 Sep 2015 14:29:00 +0000\n\ngit-lfs (0.5.3) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 24 Jul 2015 20:43:00 +0000\n\ngit-lfs (0.5.2) stable; urgency=low\n\n  * New upstream version\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 12 Jun 2015 02:54:01 +0000\n\ngit-lfs (0.5.1) stable; urgency=medium\n\n  * Initial release.\n\n -- Stephen Gelman <gelman@getbraintree.com>  Fri, 08 May 2015 22:55:45 +0000\n", "package lfs\n\nimport (\n\t\"bytes\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"hash\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/git-lfs/git-lfs/config\"\n\t\"github.com/git-lfs/git-lfs/subprocess\"\n)\n\ntype pipeRequest struct {\n\taction     string\n\treader     io.Reader\n\tfileName   string\n\textensions []config.Extension\n}\n\ntype pipeResponse struct {\n\tfile    *os.File\n\tresults []*pipeExtResult\n}\n\ntype pipeExtResult struct {\n\tname   string\n\toidIn  string\n\toidOut string\n}\n\ntype extCommand struct {\n\tcmd    *subprocess.Cmd\n\tout    io.WriteCloser\n\terr    *bytes.Buffer\n\thasher hash.Hash\n\tresult *pipeExtResult\n}\n\nfunc pipeExtensions(cfg *config.Configuration, request *pipeRequest) (response pipeResponse, err error) {\n\tvar extcmds []*extCommand\n\tdefer func() {\n\t\t// In the case of an early return before the end of this\n\t\t// function (in response to an error, etc), kill all running\n\t\t// processes. Errors are ignored since the function has already\n\t\t// returned.\n\t\t//\n\t\t// In the happy path, the commands will have already been\n\t\t// `Wait()`-ed upon and e.cmd.Process.Kill() will return an\n\t\t// error, but we can ignore it.\n\t\tfor _, e := range extcmds {\n\t\t\tif e.cmd.Process != nil {\n\t\t\t\te.cmd.Process.Kill()\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor _, e := range request.extensions {\n\t\tvar pieces []string\n\t\tswitch request.action {\n\t\tcase \"clean\":\n\t\t\tpieces = strings.Split(e.Clean, \" \")\n\t\tcase \"smudge\":\n\t\t\tpieces = strings.Split(e.Smudge, \" \")\n\t\tdefault:\n\t\t\terr = fmt.Errorf(\"Invalid action: \" + request.action)\n\t\t\treturn\n\t\t}\n\t\tname := strings.Trim(pieces[0], \" \")\n\t\tvar args []string\n\t\tfor _, value := range pieces[1:] {\n\t\t\targ := strings.Replace(value, \"%f\", request.fileName, -1)\n\t\t\targs = append(args, arg)\n\t\t}\n\t\tcmd := subprocess.ExecCommand(name, args...)\n\t\tec := &extCommand{cmd: cmd, result: &pipeExtResult{name: e.Name}}\n\t\textcmds = append(extcmds, ec)\n\t}\n\n\thasher := sha256.New()\n\tpipeReader, pipeWriter := io.Pipe()\n\tmultiWriter := io.MultiWriter(hasher, pipeWriter)\n\n\tvar input io.Reader\n\tvar output io.WriteCloser\n\tinput = pipeReader\n\textcmds[0].cmd.Stdin = input\n\tif response.file, err = TempFile(cfg, \"\"); err != nil {\n\t\treturn\n\t}\n\tdefer response.file.Close()\n\toutput = response.file\n\n\tlast := len(extcmds) - 1\n\tfor i, ec := range extcmds {\n\t\tec.hasher = sha256.New()\n\n\t\tif i == last {\n\t\t\tec.cmd.Stdout = io.MultiWriter(ec.hasher, output)\n\t\t\tec.out = output\n\t\t\tcontinue\n\t\t}\n\n\t\tnextec := extcmds[i+1]\n\t\tvar nextStdin io.WriteCloser\n\t\tvar stdout io.ReadCloser\n\t\tif nextStdin, err = nextec.cmd.StdinPipe(); err != nil {\n\t\t\treturn\n\t\t}\n\t\tif stdout, err = ec.cmd.StdoutPipe(); err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tec.cmd.Stdin = input\n\t\tec.cmd.Stdout = io.MultiWriter(ec.hasher, nextStdin)\n\t\tec.out = nextStdin\n\n\t\tinput = stdout\n\n\t\tvar errBuff bytes.Buffer\n\t\tec.err = &errBuff\n\t\tec.cmd.Stderr = ec.err\n\t}\n\n\tfor _, ec := range extcmds {\n\t\tif err = ec.cmd.Start(); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\tif _, err = io.Copy(multiWriter, request.reader); err != nil {\n\t\treturn\n\t}\n\tif err = pipeWriter.Close(); err != nil {\n\t\treturn\n\t}\n\n\tfor _, ec := range extcmds {\n\t\tif err = ec.cmd.Wait(); err != nil {\n\t\t\tif ec.err != nil {\n\t\t\t\terrStr := ec.err.String()\n\t\t\t\terr = fmt.Errorf(\"extension '%s' failed with: %s\", ec.result.name, errStr)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif err = ec.out.Close(); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\toid := hex.EncodeToString(hasher.Sum(nil))\n\tfor _, ec := range extcmds {\n\t\tec.result.oidIn = oid\n\t\toid = hex.EncodeToString(ec.hasher.Sum(nil))\n\t\tec.result.oidOut = oid\n\t\tresponse.results = append(response.results, ec.result)\n\t}\n\treturn\n}\n", "package lfshttp\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/git-lfs/git-lfs/config\"\n\t\"github.com/git-lfs/git-lfs/subprocess\"\n\t\"github.com/git-lfs/git-lfs/tools\"\n\t\"github.com/rubyist/tracerx\"\n)\n\ntype SSHResolver interface {\n\tResolve(Endpoint, string) (sshAuthResponse, error)\n}\n\nfunc withSSHCache(ssh SSHResolver) SSHResolver {\n\treturn &sshCache{\n\t\tendpoints: make(map[string]*sshAuthResponse),\n\t\tssh:       ssh,\n\t}\n}\n\ntype sshCache struct {\n\tendpoints map[string]*sshAuthResponse\n\tssh       SSHResolver\n}\n\nfunc (c *sshCache) Resolve(e Endpoint, method string) (sshAuthResponse, error) {\n\tif len(e.SshUserAndHost) == 0 {\n\t\treturn sshAuthResponse{}, nil\n\t}\n\n\tkey := strings.Join([]string{e.SshUserAndHost, e.SshPort, e.SshPath, method}, \"//\")\n\tif res, ok := c.endpoints[key]; ok {\n\t\tif _, expired := res.IsExpiredWithin(5 * time.Second); !expired {\n\t\t\ttracerx.Printf(\"ssh cache: %s git-lfs-authenticate %s %s\",\n\t\t\t\te.SshUserAndHost, e.SshPath, endpointOperation(e, method))\n\t\t\treturn *res, nil\n\t\t} else {\n\t\t\ttracerx.Printf(\"ssh cache expired: %s git-lfs-authenticate %s %s\",\n\t\t\t\te.SshUserAndHost, e.SshPath, endpointOperation(e, method))\n\t\t}\n\t}\n\n\tres, err := c.ssh.Resolve(e, method)\n\tif err == nil {\n\t\tc.endpoints[key] = &res\n\t}\n\treturn res, err\n}\n\ntype sshAuthResponse struct {\n\tMessage   string            `json:\"-\"`\n\tHref      string            `json:\"href\"`\n\tHeader    map[string]string `json:\"header\"`\n\tExpiresAt time.Time         `json:\"expires_at\"`\n\tExpiresIn int               `json:\"expires_in\"`\n\n\tcreatedAt time.Time\n}\n\nfunc (r *sshAuthResponse) IsExpiredWithin(d time.Duration) (time.Time, bool) {\n\treturn tools.IsExpiredAtOrIn(r.createdAt, d, r.ExpiresAt,\n\t\ttime.Duration(r.ExpiresIn)*time.Second)\n}\n\ntype sshAuthClient struct {\n\tos  config.Environment\n\tgit config.Environment\n}\n\nfunc (c *sshAuthClient) Resolve(e Endpoint, method string) (sshAuthResponse, error) {\n\tres := sshAuthResponse{}\n\tif len(e.SshUserAndHost) == 0 {\n\t\treturn res, nil\n\t}\n\n\texe, args := sshGetLFSExeAndArgs(c.os, c.git, e, method)\n\tcmd := subprocess.ExecCommand(exe, args...)\n\n\t// Save stdout and stderr in separate buffers\n\tvar outbuf, errbuf bytes.Buffer\n\tcmd.Stdout = &outbuf\n\tcmd.Stderr = &errbuf\n\n\tnow := time.Now()\n\n\t// Execute command\n\terr := cmd.Start()\n\tif err == nil {\n\t\terr = cmd.Wait()\n\t}\n\n\t// Processing result\n\tif err != nil {\n\t\tres.Message = strings.TrimSpace(errbuf.String())\n\t} else {\n\t\terr = json.Unmarshal(outbuf.Bytes(), &res)\n\t\tif res.ExpiresIn == 0 && res.ExpiresAt.IsZero() {\n\t\t\tttl := c.git.Int(\"lfs.defaulttokenttl\", 0)\n\t\t\tif ttl < 0 {\n\t\t\t\tttl = 0\n\t\t\t}\n\t\t\tres.ExpiresIn = ttl\n\t\t}\n\t\tres.createdAt = now\n\t}\n\n\treturn res, err\n}\n\nfunc sshFormatArgs(cmd string, args []string, needShell bool) (string, []string) {\n\tif !needShell {\n\t\treturn cmd, args\n\t}\n\n\treturn subprocess.FormatForShellQuotedArgs(cmd, args)\n}\n\nfunc sshGetLFSExeAndArgs(osEnv config.Environment, gitEnv config.Environment, e Endpoint, method string) (string, []string) {\n\texe, args, needShell := sshGetExeAndArgs(osEnv, gitEnv, e)\n\toperation := endpointOperation(e, method)\n\targs = append(args, fmt.Sprintf(\"git-lfs-authenticate %s %s\", e.SshPath, operation))\n\texe, args = sshFormatArgs(exe, args, needShell)\n\ttracerx.Printf(\"run_command: %s %s\", exe, strings.Join(args, \" \"))\n\treturn exe, args\n}\n\n// Parse command, and if it looks like a valid command, return the ssh binary\n// name, the command to run, and whether we need a shell.  If not, return\n// existing as the ssh binary name.\nfunc sshParseShellCommand(command string, existing string) (ssh string, cmd string, needShell bool) {\n\tssh = existing\n\tif cmdArgs := tools.QuotedFields(command); len(cmdArgs) > 0 {\n\t\tneedShell = true\n\t\tssh = cmdArgs[0]\n\t\tcmd = command\n\t}\n\treturn\n}\n\n// Return the executable name for ssh on this machine and the base args\n// Base args includes port settings, user/host, everything pre the command to execute\nfunc sshGetExeAndArgs(osEnv config.Environment, gitEnv config.Environment, e Endpoint) (exe string, baseargs []string, needShell bool) {\n\tvar cmd string\n\n\tisPlink := false\n\tisTortoise := false\n\n\tssh, _ := osEnv.Get(\"GIT_SSH\")\n\tsshCmd, _ := osEnv.Get(\"GIT_SSH_COMMAND\")\n\tssh, cmd, needShell = sshParseShellCommand(sshCmd, ssh)\n\n\tif ssh == \"\" {\n\t\tsshCmd, _ := gitEnv.Get(\"core.sshcommand\")\n\t\tssh, cmd, needShell = sshParseShellCommand(sshCmd, defaultSSHCmd)\n\t}\n\n\tif cmd == \"\" {\n\t\tcmd = ssh\n\t}\n\n\tbasessh := filepath.Base(ssh)\n\n\tif basessh != defaultSSHCmd {\n\t\t// Strip extension for easier comparison\n\t\tif ext := filepath.Ext(basessh); len(ext) > 0 {\n\t\t\tbasessh = basessh[:len(basessh)-len(ext)]\n\t\t}\n\t\tisPlink = strings.EqualFold(basessh, \"plink\")\n\t\tisTortoise = strings.EqualFold(basessh, \"tortoiseplink\")\n\t}\n\n\targs := make([]string, 0, 7)\n\n\tif isTortoise {\n\t\t// TortoisePlink requires the -batch argument to behave like ssh/plink\n\t\targs = append(args, \"-batch\")\n\t}\n\n\tif len(e.SshPort) > 0 {\n\t\tif isPlink || isTortoise {\n\t\t\targs = append(args, \"-P\")\n\t\t} else {\n\t\t\targs = append(args, \"-p\")\n\t\t}\n\t\targs = append(args, e.SshPort)\n\t}\n\n\tif sep, ok := sshSeparators[basessh]; ok {\n\t\t// inserts a separator between cli -options and host/cmd commands\n\t\t// example: $ ssh -p 12345 -- user@host.com git-lfs-authenticate ...\n\t\targs = append(args, sep, e.SshUserAndHost)\n\t} else {\n\t\t// no prefix supported, strip leading - off host to prevent cmd like:\n\t\t// $ git config lfs.url ssh://-proxycmd=whatever\n\t\t// $ plink -P 12345 -proxycmd=foo git-lfs-authenticate ...\n\t\t//\n\t\t// Instead, it'll attempt this, and eventually return an error\n\t\t// $ plink -P 12345 proxycmd=foo git-lfs-authenticate ...\n\t\targs = append(args, sshOptPrefixRE.ReplaceAllString(e.SshUserAndHost, \"\"))\n\t}\n\n\treturn cmd, args, needShell\n}\n\nconst defaultSSHCmd = \"ssh\"\n\nvar (\n\tsshOptPrefixRE = regexp.MustCompile(`\\A\\-+`)\n\tsshSeparators  = map[string]string{\n\t\t\"ssh\":          \"--\",\n\t\t\"lfs-ssh-echo\": \"--\", // used in lfs integration tests only\n\t}\n)\n", "Name:           git-lfs\nVersion:        2.13.2\nRelease:        1%{?dist}\nSummary:        Git extension for versioning large files\n\nGroup:          Applications/Archiving\nLicense:        MIT\nURL:            https://git-lfs.github.com/\nSource0:        https://github.com/git-lfs/git-lfs/archive/v%{version}/%{name}-%{version}.tar.gz\nBuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)\nBuildRequires:  perl-Digest-SHA\nBuildRequires:  golang, tar, rubygem-ronn, which, git >= 1.8.2\n\nRequires: git >= 1.8.2\n\n%define debug_package %{nil}\n#I think this is because go links with --build-id=none for linux\n\n%description\nGit Large File Storage (LFS) replaces large files such as audio samples,\nvideos, datasets, and graphics with text pointers inside Git, while\nstoring the file contents on a remote server like GitHub.com or GitHub\nEnterprise.\n\n%prep\n%setup -q -n %{name}-%{version}\nmkdir -p src/github.com/git-lfs\nln -s $(pwd) src/github.com/git-lfs/%{name}\n\n%build\n%if 0%{?rhel} == 5\n  export CGO_ENABLED=0\n%endif\n\npushd src/github.com/git-lfs/%{name}\n  %if %{_arch} == i386\n    GOARCH=386 make\n  %else\n    GOARCH=amd64 make\n  %endif\npopd\nmake man\n\n%install\n[ \"$RPM_BUILD_ROOT\" != \"/\" ] && rm -rf $RPM_BUILD_ROOT\ninstall -D bin/git-lfs ${RPM_BUILD_ROOT}/usr/bin/git-lfs\nmkdir -p -m 755 ${RPM_BUILD_ROOT}/usr/share/man/man1\nmkdir -p -m 755 ${RPM_BUILD_ROOT}/usr/share/man/man5\ninstall -D man/*.1 ${RPM_BUILD_ROOT}/usr/share/man/man1\ninstall -D man/*.5 ${RPM_BUILD_ROOT}/usr/share/man/man5\n\n%post\ngit lfs install --system\n\n%preun\ngit lfs uninstall\n\n%check\nexport GIT_LFS_TEST_DIR=$(mktemp -d)\n\n# test/git-lfs-server-api/main.go does not compile because github.com/spf13/cobra\n# cannot be found in vendor, for some reason. It's not needed for installs, so\n# skip it.\nexport SKIPAPITESTCOMPILE=1\n\npushd src/github.com/git-lfs/%{name}\n  make test\n  go get github.com/git-lfs/go-ntlm/ntlm\n  make -C t PROVE_EXTRA_ARGS=-j4 test\npopd\n\nrm -rf ${GIT_LFS_TEST_DIR}\n\n%clean\nrm -rf %{buildroot}\n\n%files\n%defattr(-,root,root,-)\n%doc LICENSE.md README.md\n/usr/bin/git-lfs\n/usr/share/man/man1/*.1.gz\n/usr/share/man/man5/*.5.gz\n\n%changelog\n* Sun Dec 6 2015 Andrew Neff <andyneff@users.noreply.github.com> - 1.1.0-1\n- Added Requires and version for git back in\n\n* Sat Oct 31 2015 Andrew Neff <andyneff@users.noreply.github.com> - 1.0.3-1\n- Added GIT_LFS_TEST_DIR to prevent future test race condition\n\n* Sun Aug 2 2015 Andrew Neff <andyneff@users.noreply.github.com> - 0.5.4-1\n- Added tests back in\n\n* Sat Jul 18 2015 Andrew Neff <andyneff@users.noreply.github.com> - 0.5.2-1\n- Changed Source0 filename\n\n* Mon May 18 2015 Andrew Neff <andyneff@users.noreply.github.com> - 0.5.1-1\n- Initial Spec\n", "#!/usr/bin/env bash\n\n. \"$(dirname \"$0\")/testlib.sh\"\n\nbegin_test \"does not look in current directory for git\"\n(\n  set -e\n\n  reponame=\"$(basename \"$0\" \".sh\")\"\n  git init \"$reponame\"\n  cd \"$reponame\"\n  export PATH=\"$(echo \"$PATH\" | sed -e \"s/:.:/:/g\" -e \"s/::/:/g\")\"\n\n  printf \"#!/bin/sh\\necho exploit >&2\\n\" > git\n  chmod +x git || true\n  printf \"echo exploit 1>&2\\n\" > git.bat\n\n  # This needs to succeed.  If it fails, that could be because our malicious\n  # \"git\" is broken but got invoked anyway.\n  git lfs env > output.log 2>&1\n  ! grep -q 'exploit' output.log\n)\nend_test\n\nbegin_test \"does not look in current directory for git with credential helper\"\n(\n  set -e\n\n  reponame=\"$(basename \"$0\" \".sh\")-credentials\"\n  setup_remote_repo \"$reponame\"\n\n  clone_repo \"$reponame\" credentials-1\n  export PATH=\"$(echo \"$PATH\" | sed -e \"s/:.:/:/g\" -e \"s/::/:/g\")\"\n\n  printf \"#!/bin/sh\\necho exploit >&2\\ntouch exploit\\n\" > git\n  chmod +x git || true\n  printf \"echo exploit 1>&2\\r\\necho >exploit\" > git.bat\n\n  git lfs track \"*.dat\"\n  printf abc > z.dat\n  git add z.dat\n  git add .gitattributes\n  git add git git.bat\n  git commit -m \"Add files\"\n\n  git push origin HEAD\n  cd ..\n\n  unset GIT_ASKPASS SSH_ASKPASS\n\n  # This needs to succeed.  If it fails, that could be because our malicious\n  # \"git\" is broken but got invoked anyway.\n  GIT_LFS_SKIP_SMUDGE=1 clone_repo \"$reponame\" credentials-2\n\n  git lfs pull | tee output.log\n\n  ! grep -q 'exploit' output.log\n  [ ! -f ../exploit ]\n  [ ! -f exploit ]\n)\nend_test\n", "{\n\t\"FixedFileInfo\":\n\t{\n\t\t\"FileVersion\": {\n\t\t\t\"Major\": 2,\n\t\t\t\"Minor\": 13,\n\t\t\t\"Patch\": 2,\n\t\t\t\"Build\": 0\n\t\t}\n\t},\n\t\"StringFileInfo\":\n\t{\n\t\t\"FileDescription\": \"Git LFS\",\n\t\t\"LegalCopyright\": \"GitHub, Inc. and Git LFS contributors\",\n\t\t\"ProductName\": \"Git Large File Storage (LFS)\",\n\t\t\"ProductVersion\": \"2.13.2\"\n\t},\n\t\"IconPath\": \"script/windows-installer/git-lfs-logo.ico\"\n}\n"], "filenames": ["CHANGELOG.md", "commands/commands.go", "config/version.go", "creds/creds.go", "debian/changelog", "lfs/extension.go", "lfshttp/ssh.go", "rpm/SPECS/git-lfs.spec", "t/t-path.sh", "versioninfo.json"], "buggy_code_start_loc": [1, 10, 16, 13, 0, 11, 7, 2, 23, 7], "buggy_code_end_loc": [1, 286, 17, 296, 0, 79, 87, 3, 23, 17], "fixing_code_start_loc": [2, 9, 16, 14, 1, 10, 6, 2, 24, 7], "fixing_code_end_loc": [26, 285, 17, 297, 7, 79, 86, 3, 62, 17], "type": "CWE-426", "message": "Git LFS is a command line extension for managing large files with Git. On Windows, if Git LFS operates on a malicious repository with a git.bat or git.exe file in the current directory, that program would be executed, permitting the attacker to execute arbitrary code. This does not affect Unix systems. This is the result of an incomplete fix for CVE-2020-27955. This issue occurs because on Windows, Go includes (and prefers) the current directory when the name of a command run does not contain a directory separator. Other than avoiding untrusted repositories or using a different operating system, there is no workaround. This is fixed in v2.13.2.", "other": {"cve": {"id": "CVE-2021-21237", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-15T18:15:15.980", "lastModified": "2021-01-29T22:18:12.727", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Git LFS is a command line extension for managing large files with Git. On Windows, if Git LFS operates on a malicious repository with a git.bat or git.exe file in the current directory, that program would be executed, permitting the attacker to execute arbitrary code. This does not affect Unix systems. This is the result of an incomplete fix for CVE-2020-27955. This issue occurs because on Windows, Go includes (and prefers) the current directory when the name of a command run does not contain a directory separator. Other than avoiding untrusted repositories or using a different operating system, there is no workaround. This is fixed in v2.13.2."}, {"lang": "es", "value": "Git LFS es una extensi\u00f3n de l\u00ednea de comandos para administrar archivos grandes con Git.&#xa0;En Windows, si Git LFS opera en un repositorio malicioso con un archivo git.bat o git.exe en el directorio actual, ese programa ser\u00e1 ejecutado, permitiendo al atacante ejecutar c\u00f3digo arbitrario.&#xa0;Esto no afecta a los sistemas Unix.&#xa0;Este es el resultado de una correcci\u00f3n incompleta para CVE-2020-27955.&#xa0;Este problema ocurre porque en Windows, Go incluye (y prefiere) el directorio actual cuando el nombre de un comando ejecutado no contiene un separador de directorio.&#xa0;Aparte de evitar los repositorios que no son confiables o usando un sistema operativo diferente, no se presenta una soluci\u00f3n alternativa.&#xa0;Esto es corregido en versi\u00f3n v2.13.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 0.8, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-426"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:git_large_file_storage_project:git_large_file_storage:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.13.2", "matchCriteriaId": "ED5A8512-DFF5-4912-9924-FE6C511D14A5"}]}]}], "references": [{"url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27955", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/git-lfs/git-lfs/commit/fc664697ed2c2081ee9633010de0a7f9debea72a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/git-lfs/git-lfs/releases/tag/v2.13.2", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/git-lfs/git-lfs/security/advisories/GHSA-cx3w-xqmc-84g5", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/git-lfs/git-lfs/commit/fc664697ed2c2081ee9633010de0a7f9debea72a"}}