{"buggy_code": ["const express = require('express');\nconst common = require('../lib/common');\nconst colors = require('colors');\nconst bcrypt = require('bcryptjs');\nconst url = require('url');\nconst router = express.Router();\n\nrouter.get('/admin/users', common.restrict, (req, res) => {\n    const db = req.app.db;\n    db.users.find({}).toArray((err, users) => {\n        if(err){\n            console.info(err.stack);\n        }\n        res.render('users', {\n            title: 'Users',\n            users: users,\n            admin: true,\n            config: req.app.config,\n            isAdmin: req.session.isAdmin,\n            helpers: req.handlebars.helpers,\n            session: req.session,\n            message: common.clearSessionValue(req.session, 'message'),\n            messageType: common.clearSessionValue(req.session, 'messageType')\n        });\n    });\n});\n\n// edit user\nrouter.get('/admin/user/edit/:id', common.restrict, (req, res) => {\n    const db = req.app.db;\n    db.users.findOne({_id: common.getId(req.params.id)}, (err, user) => {\n        if(err){\n            console.info(err.stack);\n        }\n        // if the user we want to edit is not the current logged in user and the current user is not\n        // an admin we render an access denied message\n        if(user.userEmail !== req.session.user && req.session.isAdmin === false){\n            req.session.message = 'Access denied';\n            req.session.messageType = 'danger';\n            res.redirect('/Users/');\n            return;\n        }\n\n        res.render('user_edit', {\n            title: 'User edit',\n            user: user,\n            admin: true,\n            session: req.session,\n            message: common.clearSessionValue(req.session, 'message'),\n            messageType: common.clearSessionValue(req.session, 'messageType'),\n            helpers: req.handlebars.helpers,\n            config: req.app.config\n        });\n    });\n});\n\n// users new\nrouter.get('/admin/user/new', common.restrict, (req, res) => {\n    res.render('user_new', {\n        title: 'User - New',\n        admin: true,\n        session: req.session,\n        helpers: req.handlebars.helpers,\n        message: common.clearSessionValue(req.session, 'message'),\n        messageType: common.clearSessionValue(req.session, 'messageType'),\n        config: req.app.config\n    });\n});\n\n// delete user\nrouter.get('/admin/user/delete/:id', common.restrict, (req, res) => {\n    const db = req.app.db;\n    if(req.session.isAdmin === true){\n        db.users.remove({_id: common.getId(req.params.id)}, {}, (err, numRemoved) => {\n            if(err){\n                console.info(err.stack);\n            }\n            req.session.message = 'User deleted.';\n            req.session.messageType = 'success';\n            res.redirect('/admin/users');\n        });\n    }else{\n        req.session.message = 'Access denied.';\n        req.session.messageType = 'danger';\n        res.redirect('/admin/users');\n    }\n});\n\n// update a user\nrouter.post('/admin/user/update', common.restrict, (req, res) => {\n    const db = req.app.db;\n\n    let isAdmin = req.body.user_admin === 'on';\n\n    // get the user we want to update\n    db.users.findOne({_id: common.getId(req.body.userId)}, (err, user) => {\n        if(err){\n            console.info(err.stack);\n        }\n\n        // If the current user changing own account ensure isAdmin retains existing\n        if(user.userEmail === req.session.user){\n            isAdmin = user.isAdmin;\n        }\n\n        // if the user we want to edit is not the current logged in user and the current user is not\n        // an admin we render an access denied message\n        if(user.userEmail !== req.session.user && req.session.isAdmin === false){\n            req.session.message = 'Access denied';\n            req.session.messageType = 'danger';\n            res.redirect('/admin/users/');\n            return;\n        }\n\n        // create the update doc\n        let updateDoc = {};\n        updateDoc.isAdmin = isAdmin;\n        updateDoc.usersName = req.body.usersName;\n        if(req.body.userPassword){\n            updateDoc.userPassword = bcrypt.hashSync(req.body.userPassword);\n        }\n\n        db.users.update({_id: common.getId(req.body.userId)},\n            {\n                $set: updateDoc\n            }, {multi: false}, (err, numReplaced) => {\n                if(err){\n                    console.error(colors.red('Failed updating user: ' + err));\n                    req.session.message = 'Failed to update user';\n                    req.session.messageType = 'danger';\n                    res.redirect('/admin/user/edit/' + req.body.userId);\n                }else{\n                    // show the view\n                    req.session.message = 'User account updated.';\n                    req.session.messageType = 'success';\n                    res.redirect('/admin/user/edit/' + req.body.userId);\n                }\n            });\n    });\n});\n\n// insert a user\nrouter.post('/admin/user/insert', common.restrict, (req, res) => {\n    const db = req.app.db;\n\n    // set the account to admin if using the setup form. Eg: First user account\n    let urlParts = url.parse(req.header('Referer'));\n\n    let isAdmin = false;\n    if(urlParts.path === '/admin/setup'){\n        isAdmin = true;\n    }\n\n    let doc = {\n        usersName: req.body.usersName,\n        userEmail: req.body.userEmail,\n        userPassword: bcrypt.hashSync(req.body.userPassword, 10),\n        isAdmin: isAdmin\n    };\n\n    // check for existing user\n    db.users.findOne({'userEmail': req.body.userEmail}, (err, user) => {\n        if(user){\n            // user already exists with that email address\n            console.error(colors.red('Failed to insert user, possibly already exists: ' + err));\n            req.session.message = 'A user with that email address already exists';\n            req.session.messageType = 'danger';\n            res.redirect('/admin/user/new');\n            return;\n        }\n        // email is ok to be used.\n        db.users.insert(doc, (err, doc) => {\n            // show the view\n            if(err){\n                if(doc){\n                    console.error(colors.red('Failed to insert user: ' + err));\n                    req.session.message = 'User exists';\n                    req.session.messageType = 'danger';\n                    res.redirect('/admin/user/edit/' + doc._id);\n                    return;\n                }\n                console.error(colors.red('Failed to insert user: ' + err));\n                req.session.message = 'New user creation failed';\n                req.session.messageType = 'danger';\n                res.redirect('/admin/user/new');\n                return;\n            }\n            req.session.message = 'User account inserted';\n            req.session.messageType = 'success';\n\n            // if from setup we add user to session and redirect to login.\n            // Otherwise we show users screen\n            if(urlParts.path === '/admin/setup'){\n                req.session.user = req.body.userEmail;\n                res.redirect('/admin/login');\n                return;\n            }\n            res.redirect('/admin/users');\n        });\n    });\n});\n\nmodule.exports = router;\n"], "fixing_code": ["const express = require('express');\nconst common = require('../lib/common');\nconst colors = require('colors');\nconst bcrypt = require('bcryptjs');\nconst url = require('url');\nconst router = express.Router();\n\nrouter.get('/admin/users', common.restrict, (req, res) => {\n    const db = req.app.db;\n    db.users.find({}).toArray((err, users) => {\n        if(err){\n            console.info(err.stack);\n        }\n        res.render('users', {\n            title: 'Users',\n            users: users,\n            admin: true,\n            config: req.app.config,\n            isAdmin: req.session.isAdmin,\n            helpers: req.handlebars.helpers,\n            session: req.session,\n            message: common.clearSessionValue(req.session, 'message'),\n            messageType: common.clearSessionValue(req.session, 'messageType')\n        });\n    });\n});\n\n// edit user\nrouter.get('/admin/user/edit/:id', common.restrict, (req, res) => {\n    const db = req.app.db;\n    db.users.findOne({_id: common.getId(req.params.id)}, (err, user) => {\n        if(err){\n            console.info(err.stack);\n        }\n        // if the user we want to edit is not the current logged in user and the current user is not\n        // an admin we render an access denied message\n        if(user.userEmail !== req.session.user && req.session.isAdmin === false){\n            req.session.message = 'Access denied';\n            req.session.messageType = 'danger';\n            res.redirect('/Users/');\n            return;\n        }\n\n        res.render('user_edit', {\n            title: 'User edit',\n            user: user,\n            admin: true,\n            session: req.session,\n            message: common.clearSessionValue(req.session, 'message'),\n            messageType: common.clearSessionValue(req.session, 'messageType'),\n            helpers: req.handlebars.helpers,\n            config: req.app.config\n        });\n    });\n});\n\n// users new\nrouter.get('/admin/user/new', common.restrict, (req, res) => {\n    res.render('user_new', {\n        title: 'User - New',\n        admin: true,\n        session: req.session,\n        helpers: req.handlebars.helpers,\n        message: common.clearSessionValue(req.session, 'message'),\n        messageType: common.clearSessionValue(req.session, 'messageType'),\n        config: req.app.config\n    });\n});\n\n// delete user\nrouter.get('/admin/user/delete/:id', common.restrict, (req, res) => {\n    const db = req.app.db;\n    if(req.session.isAdmin === true){\n        db.users.remove({_id: common.getId(req.params.id)}, {}, (err, numRemoved) => {\n            if(err){\n                console.info(err.stack);\n            }\n            req.session.message = 'User deleted.';\n            req.session.messageType = 'success';\n            res.redirect('/admin/users');\n        });\n    }else{\n        req.session.message = 'Access denied.';\n        req.session.messageType = 'danger';\n        res.redirect('/admin/users');\n    }\n});\n\n// update a user\nrouter.post('/admin/user/update', common.restrict, (req, res) => {\n    const db = req.app.db;\n\n    let isAdmin = req.body.user_admin === 'on';\n\n    // get the user we want to update\n    db.users.findOne({_id: common.getId(req.body.userId)}, (err, user) => {\n        if(err){\n            console.info(err.stack);\n        }\n\n        // If the current user changing own account ensure isAdmin retains existing\n        if(user.userEmail === req.session.user){\n            isAdmin = user.isAdmin;\n        }\n\n        // if the user we want to edit is not the current logged in user and the current user is not\n        // an admin we render an access denied message\n        if(user.userEmail !== req.session.user && req.session.isAdmin === false){\n            req.session.message = 'Access denied';\n            req.session.messageType = 'danger';\n            res.redirect('/admin/users/');\n            return;\n        }\n\n        // create the update doc\n        let updateDoc = {};\n        updateDoc.isAdmin = isAdmin;\n        updateDoc.usersName = req.body.usersName;\n        if(req.body.userPassword){\n            updateDoc.userPassword = bcrypt.hashSync(req.body.userPassword);\n        }\n\n        db.users.update({_id: common.getId(req.body.userId)},\n            {\n                $set: updateDoc\n            }, {multi: false}, (err, numReplaced) => {\n                if(err){\n                    console.error(colors.red('Failed updating user: ' + err));\n                    req.session.message = 'Failed to update user';\n                    req.session.messageType = 'danger';\n                    res.redirect('/admin/user/edit/' + req.body.userId);\n                }else{\n                    // show the view\n                    req.session.message = 'User account updated.';\n                    req.session.messageType = 'success';\n                    res.redirect('/admin/user/edit/' + req.body.userId);\n                }\n            });\n    });\n});\n\n// insert a user\nrouter.post('/admin/user/insert', common.restrict, (req, res) => {\n    const db = req.app.db;\n\n    // set the account to admin if using the setup form. Eg: First user account\n    let urlParts = url.parse(req.header('Referer'));\n\n    // Check number of users\n    db.users.count({}, (err, userCount) => {\n        let isAdmin = false;\n\n        // if no users, setup user as admin\n        if(userCount === 0){\n            isAdmin = true;\n        }\n\n        let doc = {\n            usersName: req.body.usersName,\n            userEmail: req.body.userEmail,\n            userPassword: bcrypt.hashSync(req.body.userPassword, 10),\n            isAdmin: isAdmin\n        };\n\n        // check for existing user\n        db.users.findOne({'userEmail': req.body.userEmail}, (err, user) => {\n            if(user){\n                // user already exists with that email address\n                console.error(colors.red('Failed to insert user, possibly already exists: ' + err));\n                req.session.message = 'A user with that email address already exists';\n                req.session.messageType = 'danger';\n                res.redirect('/admin/user/new');\n                return;\n            }\n            // email is ok to be used.\n            db.users.insert(doc, (err, doc) => {\n                // show the view\n                if(err){\n                    if(doc){\n                        console.error(colors.red('Failed to insert user: ' + err));\n                        req.session.message = 'User exists';\n                        req.session.messageType = 'danger';\n                        res.redirect('/admin/user/edit/' + doc._id);\n                        return;\n                    }\n                    console.error(colors.red('Failed to insert user: ' + err));\n                    req.session.message = 'New user creation failed';\n                    req.session.messageType = 'danger';\n                    res.redirect('/admin/user/new');\n                    return;\n                }\n                req.session.message = 'User account inserted';\n                req.session.messageType = 'success';\n\n                // if from setup we add user to session and redirect to login.\n                // Otherwise we show users screen\n                if(urlParts.path === '/admin/setup'){\n                    req.session.user = req.body.userEmail;\n                    res.redirect('/admin/login');\n                    return;\n                }\n                res.redirect('/admin/users');\n            });\n        });\n    });\n});\n\nmodule.exports = router;\n"], "filenames": ["routes/user.js"], "buggy_code_start_loc": [149], "buggy_code_end_loc": [199], "fixing_code_start_loc": [149], "fixing_code_end_loc": [204], "type": "CWE-732", "message": "expressCart before 1.1.6 allows remote attackers to create an admin user via a /admin/setup Referer header.", "other": {"cve": {"id": "CVE-2018-12457", "sourceIdentifier": "cve@mitre.org", "published": "2018-06-15T14:29:00.227", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "expressCart before 1.1.6 allows remote attackers to create an admin user via a /admin/setup Referer header."}, {"lang": "es", "value": "expressCart en versiones anteriores a la 1.1.6 permite que atacantes remotos creen un usuario administrador mediante una cabecera Referer /admin/setup."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-732"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:expresscart_project:expresscart:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.1.6", "matchCriteriaId": "E8A256AB-EF57-4B9B-B2C9-7F22D000C989"}]}]}], "references": [{"url": "https://github.com/mrvautin/expressCart/commit/baccaae9b0b72f00b10c5453ca00231340ad3e3b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/343626", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/express-cart?activeTab=versions", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mrvautin/expressCart/commit/baccaae9b0b72f00b10c5453ca00231340ad3e3b"}}