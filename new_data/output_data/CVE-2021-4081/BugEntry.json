{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.selector.asset\");\npimcore.element.selector.asset = Class.create(pimcore.element.selector.abstract, {\n\n    initStore: function () {\n        this.store = new Ext.data.Store({\n            autoDestroy: true,\n            remoteSort: true,\n            pageSize: 50,\n            proxy : {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_searchadmin_search_find'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                }\n            },\n            fields: [\"id\",\"fullpath\",\"type\",\"subtype\",\"filename\"]\n        });\n    },\n\n    getTabTitle: function() {\n        return \"asset_search\";\n    },\n\n    getForm: function () {\n\n        var compositeConfig = {\n            xtype: \"toolbar\",\n            items: [{\n                xtype: \"textfield\",\n                name: \"query\",\n                width: 370,\n                hideLabel: true,\n                enableKeyEvents: true,\n                listeners: {\n                    \"keydown\" : function (field, key) {\n                        if (key.getKey() == key.ENTER) {\n                            this.search();\n                        }\n                    }.bind(this),\n                    afterrender: function () {\n                        this.focus(true,500);\n                    }\n                }\n            }, new Ext.Button({\n                handler: function () {\n                    window.open(\"http://dev.mysql.com/doc/refman/5.6/en/fulltext-boolean.html\");\n                },\n                iconCls: \"pimcore_icon_help\"\n            })]\n        };\n\n        // check for restrictions\n        var possibleRestrictions = [\"folder\", \"image\", \"text\", \"audio\", \"video\", \"document\", \"archive\", \"unknown\"];\n        var filterStore = [];\n        var selectedStore = [];\n        for (var i=0; i<possibleRestrictions.length; i++) {\n            if(this.parent.restrictions.subtype.asset && in_array(possibleRestrictions[i],\n                this.parent.restrictions.subtype.asset )) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterStore.length < 1) {\n            for (var i=0; i<possibleRestrictions.length; i++) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        var selectedValue = selectedStore.join(\",\");\n        if(filterStore.length > 1) {\n            filterStore.splice(0,0,[selectedValue, t(\"all_types\")]);\n        }\n\n        compositeConfig.items.push({\n            xtype: \"combo\",\n            store: filterStore,\n            mode: \"local\",\n            name: \"subtype\",\n            triggerAction: \"all\",\n            editable: false,\n            value: selectedValue\n        });\n\n        // add button\n        compositeConfig.items.push({\n            xtype: \"button\",\n            text: t(\"search\"),\n            iconCls: \"pimcore_icon_search\",\n            handler: this.search.bind(this)\n        });\n\n        if(!this.formPanel) {\n            this.formPanel = new Ext.form.FormPanel({\n                region: \"north\",\n                bodyStyle: \"padding: 2px;\",\n                items: [compositeConfig]\n            });\n        }\n\n        return this.formPanel;\n    },\n\n    getSelectionPanel: function () {\n        if(!this.selectionPanel) {\n\n            this.selectionStore = new Ext.data.JsonStore({\n                data: [],\n                fields: [\"id\", \"type\", \"filename\", \"fullpath\", \"subtype\"]\n            });\n\n            this.selectionPanel = new Ext.grid.GridPanel({\n                region: \"east\",\n                title: t(\"your_selection\"),\n                tbar: [{\n                    xtype: \"tbtext\",\n                    text: t(\"double_click_to_add_item_to_selection\"),\n                    autoHeight: true,\n                    style: {\n                        whiteSpace: \"normal\"\n                    }\n                }],\n                tbarCfg: {\n                    autoHeight: true\n                },\n                width: 300,\n                store: this.selectionStore,\n                columns: [\n                    {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype', renderer:\n                        function (value, metaData, record, rowIndex, colIndex, store) {\n                            return '<div style=\"height: 16px;\" class=\"pimcore_icon_asset pimcore_icon_' + value\n                                + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                        }\n                    },\n                    {text: t(\"filename\"), flex: 1, sortable: false, dataIndex: 'filename'}\n                ],\n                viewConfig: {\n                    forceFit: true\n                },\n                listeners: {\n                    rowcontextmenu: function (grid, record, tr, rowIndex, e, eOpts ) {\n                        var menu = new Ext.menu.Menu();\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('remove'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: function (index, item) {\n                                this.selectionStore.removeAt(index);\n                                item.parentMenu.destroy();\n                            }.bind(this, rowIndex)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.getXY());\n                    }.bind(this)\n                },\n                selModel: Ext.create('Ext.selection.RowModel', {}),\n                bbar: [\"->\", {\n                    text: t(\"select\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: function () {\n                        this.parent.commitData(this.getData());\n                    }.bind(this)\n                }]\n            });\n        }\n\n        return this.selectionPanel;\n    },\n\n    getResultPanel: function () {\n        if (!this.resultPanel) {\n            var columns = [\n                {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                        return '<div style=\"height: 16px;\" class=\"pimcore_icon_'\n                            + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                    }\n                },\n                {text: 'ID', width: 40, sortable: true, dataIndex: 'id', hidden: true},\n                {text: t(\"path\"), flex: 200, sortable: true, dataIndex: 'fullpath', renderer: Ext.util.Format.htmlEncode},\n                {text: t(\"filename\"), width: 200, sortable: false, dataIndex: 'filename', hidden: true, renderer: Ext.util.Format.htmlEncode},\n                {text: t(\"preview\"), width: 150, sortable: false, dataIndex: 'subtype',\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                        var routes = {\n                            image: \"pimcore_admin_asset_getimagethumbnail\",\n                            video: \"pimcore_admin_asset_getvideothumbnail\",\n                            document: \"pimcore_admin_asset_getdocumentthumbnail\"\n                        };\n\n                        if (record.data.subtype in routes) {\n                            \n                            var route = routes[record.data.subtype];\n\n                            var params = {\n                                id: record.data.id,\n                                width: 100,\n                                height: 100,\n                                cover: true,\n                                aspectratio: true\n                            };\n\n                            var uri = Routing.generate(route, params);\n\n                            return '<div name=\"' + t(record.data.subtype)\n                                + '\"><img src=\"' + uri + '\" /></div>';\n                        }\n                    }\n                }\n            ];\n\n            this.pagingtoolbar = this.getPagingToolbar();\n\n            this.resultPanel = new Ext.grid.GridPanel({\n                region: \"center\",\n                store: this.store,\n                columns: columns,\n                loadMask: true,\n                columnLines: true,\n                stripeRows: true,\n                viewConfig: {\n                    forceFit: true\n                },\n                plugins: ['gridfilters'],\n                selModel: this.getGridSelModel(),\n                bbar: this.pagingtoolbar,\n                listeners: {\n                    rowdblclick: function (grid, record, tr, rowIndex, e, eOpts ) {\n\n                        var data = grid.getStore().getAt(rowIndex);\n\n                        if(this.parent.multiselect) {\n                            this.addToSelection(data.data);\n                        } else {\n                            // select and close\n                            this.parent.commitData(this.getData());\n                        }\n                    }.bind(this)\n                }\n            });\n        }\n\n\n        if(this.parent.multiselect) {\n            this.resultPanel.on(\"rowcontextmenu\", this.onRowContextmenu.bind(this));\n        }\n\n        return this.resultPanel;\n    },\n\n    getGrid: function () {\n        return this.resultPanel;\n    },\n\n    search: function () {\n        var formValues = this.formPanel.getForm().getFieldValues();\n\n        var proxy = this.store.getProxy();\n        proxy.setExtraParam(\"type\", \"asset\");\n        proxy.setExtraParam(\"query\", formValues.query);\n        proxy.setExtraParam(\"subtype\", formValues.subtype);\n\n        if (this.parent.config && this.parent.config.context) {\n            proxy.setExtraParam(\"context\", Ext.encode(this.parent.config.context));\n        }\n\n        this.pagingtoolbar.moveFirst();\n        this.updateTabTitle(formValues.query);\n    }\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.selector.document\");\npimcore.element.selector.document = Class.create(pimcore.element.selector.abstract, {\n\n    initStore: function () {\n        this.store = new Ext.data.Store({\n            autoDestroy: true,\n            remoteSort: true,\n            pageSize: 50,\n            proxy : {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_searchadmin_search_find'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                }\n            },\n            fields: [\"id\", \"fullpath\", \"type\", \"subtype\", \"published\", \"title\", \"description\", \"name\", \"filename\"]\n        });\n    },\n\n    getTabTitle: function() {\n        return \"document_search\";\n    },\n\n    getForm: function () {\n\n        var compositeConfig = {\n            xtype: \"toolbar\",\n            items: [{\n                xtype: \"textfield\",\n                name: \"query\",\n                width: 370,\n                hideLabel: true,\n                enableKeyEvents: true,\n                listeners: {\n                    \"keydown\" : function (field, key) {\n                        if (key.getKey() == key.ENTER) {\n                            this.search();\n                        }\n                    }.bind(this),\n                    afterrender: function () {\n                        this.focus(true,500);\n                    }\n                }\n            }, new Ext.Button({\n                handler: function () {\n                    window.open(\"http://dev.mysql.com/doc/refman/5.6/en/fulltext-boolean.html\");\n                },\n                iconCls: \"pimcore_icon_help\"\n            })]\n        };\n\n        // check for restrictions\n        var possibleRestrictions = [\"page\", \"snippet\", \"folder\", \"link\", \"hardlink\", \"email\", \"newsletter\"];\n        var filterStore = [];\n        var selectedStore = [];\n        for (var i=0; i<possibleRestrictions.length; i++) {\n            if(this.parent.restrictions.subtype.document && in_array(possibleRestrictions[i],\n                this.parent.restrictions.subtype.document )) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterStore.length < 1) {\n            for (var i=0; i<possibleRestrictions.length; i++) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        var selectedValue = selectedStore.join(\",\");\n        if(filterStore.length > 1) {\n            filterStore.splice(0,0,[selectedValue, t(\"all_types\")]);\n        }\n\n\n        compositeConfig.items.push({\n            xtype: \"combo\",\n            store: filterStore,\n            mode: \"local\",\n            name: \"subtype\",\n            triggerAction: \"all\",\n            editable: false,\n            value: selectedValue\n        });\n\n\n        // add button\n        compositeConfig.items.push({\n            xtype: \"button\",\n            iconCls: \"pimcore_icon_search\",\n            text: t(\"search\"),\n            handler: this.search.bind(this)\n        });\n\n        if(!this.formPanel) {\n            this.formPanel = new Ext.form.FormPanel({\n                region: \"north\",\n                bodyStyle: \"padding: 2px;\",\n                items: [compositeConfig]\n            });\n        }\n\n        return this.formPanel;\n    },\n\n    getSelectionPanel: function () {\n        if(!this.selectionPanel) {\n\n            this.selectionStore = new Ext.data.JsonStore({\n                data: [],\n                fields: [\"id\", \"type\", \"filename\", \"fullpath\", \"subtype\"]\n            });\n\n            this.selectionPanel = new Ext.grid.GridPanel({\n                region: \"east\",\n                title: t(\"your_selection\"),\n                tbar: [{\n                    xtype: \"tbtext\",\n                    text: t(\"double_click_to_add_item_to_selection\"),\n                    autoHeight: true,\n                    style: {\n                        whiteSpace: \"normal\"\n                    }\n                }],\n                tbarCfg: {\n                    autoHeight: true\n                },\n                width: 300,\n                store: this.selectionStore,\n                columns: [\n                    {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                        renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                            return '<div class=\"pimcore_icon_' + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                        }\n                    },\n                    {text: t(\"filename\"), flex: 1, sortable: false, dataIndex: 'filename'}\n                ],\n                viewConfig: {\n                    forceFit: true\n                },\n                listeners: {\n                    rowcontextmenu: function (grid, record, tr, rowIndex, e, eOpts ) {\n                        var menu = new Ext.menu.Menu();\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('remove'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: function (index, item) {\n                                this.selectionStore.removeAt(index);\n                                item.parentMenu.destroy();\n                            }.bind(this, rowIndex)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.getXY());\n                    }.bind(this)\n                },\n                selModel: Ext.create('Ext.selection.RowModel', {}),\n                bbar: [\"->\", {\n                    text: t(\"select\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: function () {\n                        this.parent.commitData(this.getData());\n                    }.bind(this)\n                }]\n            });\n        }\n\n        return this.selectionPanel;\n    },\n\n    getResultPanel: function () {\n        if (!this.resultPanel) {\n            var columns = [\n                {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                        return '<div class=\"pimcore_icon_' + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                    }\n                },\n                {text: 'ID', width: 40, sortable: true, dataIndex: 'id', hidden: true},\n                {text: t(\"published\"), width: 40, sortable: true, dataIndex: 'published', hidden: true},\n                {text: t(\"path\"), flex: 200, sortable: true, dataIndex: 'fullpath'},\n                {text: t(\"title\"), flex: 200, sortable: false, dataIndex: 'title', hidden: false},\n                {text: t(\"description\"), width: 200, sortable: false, dataIndex: 'description', hidden: true},\n                {text: t(\"filename\"), width: 200, sortable: false, dataIndex: 'filename', hidden: true}\n            ];\n\n            this.pagingtoolbar = this.getPagingToolbar();\n\n            this.resultPanel = new Ext.grid.GridPanel({\n                region: \"center\",\n                store: this.store,\n                columns: columns,\n                viewConfig: {\n                    forceFit: true\n                },\n                loadMask: true,\n                columnLines: true,\n                stripeRows: true,\n                selModel: this.getGridSelModel(),\n                bbar: this.pagingtoolbar,\n                listeners: {\n                    rowdblclick: function (grid, record, tr, rowIndex, e, eOpts ) {\n\n                        var data = grid.getStore().getAt(rowIndex);\n\n                        if(this.parent.multiselect) {\n                            this.addToSelection(data.data);\n                        } else {\n                            // select and close\n                            this.parent.commitData(this.getData());\n                        }\n                    }.bind(this)\n                }\n            });\n        }\n\n        if(this.parent.multiselect) {\n            this.resultPanel.on(\"rowcontextmenu\", this.onRowContextmenu.bind(this));\n        }\n\n        return this.resultPanel;\n    },\n\n    getGrid: function () {\n        return this.resultPanel;\n    },\n\n    search: function () {\n        var formValues = this.formPanel.getForm().getFieldValues();\n\n        var proxy = this.store.getProxy();\n        proxy.setExtraParam(\"type\", \"document\");\n        proxy.setExtraParam(\"query\", formValues.query);\n        proxy.setExtraParam(\"subtype\", formValues.subtype);\n\n        if (this.parent.config && this.parent.config.context) {\n            proxy.setExtraParam(\"context\", Ext.encode(this.parent.config.context));\n        }\n\n        this.pagingtoolbar.moveFirst();\n        this.updateTabTitle(formValues.query);\n    }\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.selector.object\");\npimcore.element.selector.object = Class.create(pimcore.element.selector.abstract, {\n\n    fieldObject: {},\n    gridType: 'object',\n\n    initStore: function () {\n        return 0; // dummy\n    },\n\n    getTabTitle: function() {\n        return \"object_search\";\n    },\n\n    getForm: function () {\n        var i;\n\n        //set \"Home\" object ID for search grid column configuration\n        this.object  = {};\n        this.object.id = 1;\n\n        this.searchType = \"search\";\n\n        var compositeConfig = {\n            xtype: \"toolbar\",\n            items: [{\n                xtype: \"textfield\",\n                name: \"query\",\n                width: 340,\n                hideLabel: true,\n                enableKeyEvents: true,\n                listeners: {\n                    \"keydown\" : function (field, key) {\n                        if (key.getKey() == key.ENTER) {\n                            this.search();\n                        }\n                    }.bind(this),\n                    afterrender: function () {\n                        this.focus(true,500);\n                    }\n                }\n            }, new Ext.Button({\n                handler: function () {\n                    window.open(\"http://dev.mysql.com/doc/refman/5.6/en/fulltext-boolean.html\");\n                },\n                iconCls: \"pimcore_icon_help\"\n            })]\n        };\n\n        // check for restrictions\n        var possibleRestrictions = [\"folder\", \"object\", \"variant\"];\n        var filterStore = [];\n        var selectedStore = [];\n        for (i=0; i<possibleRestrictions.length; i++) {\n            if(this.parent.restrictions.subtype.object && in_array(possibleRestrictions[i], this.parent.restrictions.subtype.object )) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterStore.length < 1) {\n            for (var i=0; i<possibleRestrictions.length; i++) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        var selectedValue = selectedStore.join(\",\");\n        if(filterStore.length > 1) {\n            filterStore.splice(0,0,[selectedValue, t(\"all_types\")]);\n        }\n\n        compositeConfig.items.push({\n            xtype: \"combo\",\n            store: filterStore,\n            queryMode: \"local\",\n            name: \"subtype\",\n            triggerAction: \"all\",\n            editable: true,\n            typeAhead:true,\n            forceSelection: true,\n            selectOnFocus: true,\n            value: selectedValue,\n            listeners: {\n                select: function(e) {\n                    if(e.value == 'folder') {\n                        defaultRecord = this.classChangeCombo.getStore().getAt(0);\n                        this.classChangeCombo.setValue(defaultRecord.get(this.classChangeCombo.valueField));\n                        this.classChangeCombo.fireEvent('select', this.classChangeCombo, defaultRecord);\n\n                        this.classChangeCombo.setDisabled(true);\n                    } else {\n                        this.classChangeCombo.setDisabled(false);\n                    }\n                }.bind(this)\n            }\n        });\n\n\n        // classes\n        var possibleClassRestrictions = [];\n        var classStore = pimcore.globalmanager.get(\"object_types_store\");\n        classStore.each(function (rec) {\n            possibleClassRestrictions.push(rec.data.text);\n        });\n\n        var filterClassStore = [];\n        var selectedClassStore = [];\n        for (i=0; i<possibleClassRestrictions.length; i++) {\n            if(in_array(possibleClassRestrictions[i], this.parent.restrictions.specific.classes )) {\n                filterClassStore.push([possibleClassRestrictions[i], t(possibleClassRestrictions[i])]);\n                selectedClassStore.push(possibleClassRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterClassStore.length < 1) {\n            for (i=0; i<possibleClassRestrictions.length; i++) {\n                filterClassStore.push([possibleClassRestrictions[i], possibleClassRestrictions[i]]);\n                selectedClassStore.push(possibleClassRestrictions[i]);\n            }\n        }\n\n        var selectedClassValue = selectedClassStore.join(\",\");\n        if(filterClassStore.length > 1) {\n            filterClassStore.splice(0,0,[selectedClassValue, t(\"all_types\")]);\n        }\n\n        this.classChangeCombo = new Ext.form.ComboBox({\n            store: filterClassStore,\n            queryMode: \"local\",\n            name: \"class\",\n            triggerAction: \"all\",\n            editable: true,\n            typeAhead: true,\n            forceSelection: true,\n            selectOnFocus: true,\n            value: selectedClassValue,\n            listeners: {\n                select: this.changeClass.bind(this)\n            }\n        });\n        if(selectedValue == 'folder') {\n            this.classChangeCombo.setDisabled(true);\n        }\n\n        compositeConfig.items.push(this.classChangeCombo);\n\n\n        // add button\n        compositeConfig.items.push({\n            xtype: \"button\",\n            iconCls: \"pimcore_icon_search\",\n            text: t(\"search\"),\n            handler: this.search.bind(this)\n        });\n\n        this.saveColumnConfigButton = new Ext.Button({\n            tooltip: t('save_grid_options'),\n            iconCls: \"pimcore_icon_publish\",\n            hidden: true,\n            handler: function () {\n                var asCopy = !(this.settings.gridConfigId > 0);\n                this.saveConfig(asCopy)\n            }.bind(this)\n        });\n\n        this.columnConfigButton = new Ext.SplitButton({\n            text: t('grid_options'),\n            hidden: true,\n            iconCls: \"pimcore_icon_table_col pimcore_icon_overlay_edit\",\n            handler: function () {\n                this.openColumnConfig(this.selectedClass, this.classId);\n            }.bind(this),\n            menu: []\n        });\n\n        compositeConfig.items.push(\"->\");\n\n        // add grid config main button\n        compositeConfig.items.push(this.columnConfigButton);\n\n        // add grid config save button\n        compositeConfig.items.push(this.saveColumnConfigButton);\n\n        if(!this.formPanel) {\n            this.formPanel = new Ext.form.FormPanel({\n                region: \"north\",\n                bodyStyle: \"padding: 2px;\",\n                items: [compositeConfig]\n            });\n        }\n\n        return this.formPanel;\n    },\n\n    getSelectionPanel: function () {\n        if(!this.selectionPanel) {\n\n            this.selectionStore = new Ext.data.JsonStore({\n                data: [],\n                fields: [\"id\", \"type\", \"filename\", \"fullpath\", \"subtype\", {name:\"classname\",renderer: function(v){\n                    return t(v);\n                }}]\n            });\n\n            this.selectionPanel = new Ext.grid.GridPanel({\n                region: \"east\",\n                title: t(\"your_selection\"),\n                tbar: [{\n                    xtype: \"tbtext\",\n                    text: t(\"double_click_to_add_item_to_selection\"),\n                    autoHeight: true,\n                    style: {\n                        whiteSpace: \"normal\"\n                    }\n                }],\n                tbarCfg: {\n                    autoHeight: true\n                },\n                width: 300,\n                store: this.selectionStore,\n                columns: [\n                    {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype'},\n                    {text: t(\"filename\"), flex: 1, sortable: false, dataIndex: 'filename'}\n                ],\n                viewConfig: {\n                    forceFit: true\n                },\n                listeners: {\n                    rowcontextmenu: function (grid, record, tr, rowIndex, e, eOpts ) {\n                        var menu = new Ext.menu.Menu();\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('remove'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: function (index, item) {\n                                this.selectionStore.removeAt(index);\n                                item.parentMenu.destroy();\n                            }.bind(this, rowIndex)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.getXY());\n                    }.bind(this)\n                },\n                selModel: Ext.create('Ext.selection.RowModel', {}),\n                bbar: [\"->\", {\n                    text: t(\"select\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: function () {\n                        this.parent.commitData(this.getData());\n                    }.bind(this)\n                }]\n            });\n        }\n\n        return this.selectionPanel;\n    },\n\n    getResultPanel: function () {\n        if (!this.resultPanel) {\n            this.resultPanel = new Ext.Panel({\n                region: \"center\",\n                layout: \"fit\"\n            });\n\n            this.resultPanel.on(\"afterrender\", this.changeClass.bind(this));\n        }\n\n        return this.resultPanel;\n    },\n\n\n    changeClass: function () {\n\n        var selectedClass = this.classChangeCombo.getValue();\n\n        if(selectedClass.indexOf(\",\") > 0) { // multiple classes because of a comma in the string\n\n            //hide column config buttons\n            this.columnConfigButton.hide();\n            this.saveColumnConfigButton.hide();\n\n            // init default store\n            this.initDefaultStore();\n        } else {\n            var classStore = pimcore.globalmanager.get(\"object_types_store\");\n            var classIdx = classStore.findExact(\"text\", selectedClass);\n            this.selectedClass = selectedClass\n            this.classId = classStore.getAt(classIdx).id;\n            this.settings = {};\n\n            // get class definition\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_gridgetcolumnconfig'),\n                params: {\n                    id: this.classId,\n                    objectId: this.object.id,\n                    gridtype: \"search\",\n                    gridConfigId: this.settings ? this.settings.gridConfigId : null,\n                    searchType: \"search\"\n                },\n                success: this.initClassStore.bind(this, selectedClass)\n            });\n        }\n    },\n\n    initClassStore: function (selectedClass, response, save) {\n        var fields = [];\n        if(response.responseText) {\n            response = Ext.decode(response.responseText);\n            fields = response.availableFields;\n            this.gridLanguage = response.language;\n            this.sortinfo = response.sortinfo;\n            this.settings = response.settings;\n            this.availableConfigs = response.availableConfigs;\n            this.sharedConfigs = response.sharedConfigs;\n        } else {\n            fields = response;\n        }\n\n        this.itemsPerPage = pimcore.helpers.grid.getDefaultPageSize(-1);\n        var gridHelper = new pimcore.object.helpers.grid(selectedClass, fields, Routing.generate('pimcore_admin_searchadmin_search_find'), null, true);\n        gridHelper.limit = this.itemsPerPage;\n        this.store = gridHelper.getStore();\n        this.store.setPageSize(this.itemsPerPage);\n        this.applyExtraParamsToStore();\n        var gridColumns = gridHelper.getGridColumns();\n        var gridfilters = gridHelper.getGridFilters();\n\n        this.fieldObject = {};\n        for(var i = 0; i < fields.length; i++) {\n            this.fieldObject[fields[i].key] = fields[i];\n        }\n\n        //TODO set up filter\n\n        this.getGridPanel(gridColumns, gridfilters, selectedClass, save);\n\n        this.buildColumnConfigMenu();\n        this.columnConfigButton.show();\n    },\n\n    initDefaultStore: function () {\n        this.itemsPerPage =  pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.store = new Ext.data.Store({\n            autoDestroy: true,\n            remoteSort: true,\n            pageSize: this.itemsPerPage,\n            proxy : {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_searchadmin_search_find'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                }\n            },\n            fields: [\"id\",\"fullpath\",\"type\",\"subtype\",\"filename\",{name:\"classname\",convert: function(v, rec){\n                return t(rec.data.classname);\n            }},\"published\"]\n        });\n\n        var columns = [\n            {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                    return '<div style=\"height: 16px;\" class=\"pimcore_icon_' + value + '\" name=\"'\n                        + t(record.data.subtype) + '\">&nbsp;</div>';\n                }\n            },\n            {text: 'ID', width: 40, sortable: true, dataIndex: 'id', hidden: true},\n            {text: t(\"published\"), width: 40, sortable: true, dataIndex: 'published', hidden: true},\n            {text: t(\"path\"), flex: 200, sortable: true, dataIndex: 'fullpath', renderer: Ext.util.Format.htmlEncode},\n            {text: t(\"filename\"), width: 200, sortable: false, dataIndex: 'filename', hidden: true, renderer: Ext.util.Format.htmlEncode},\n            {text: t(\"class\"), width: 200, sortable: true, dataIndex: 'classname'}\n        ];\n\n\n        this.getGridPanel(columns, null);\n    },\n\n    getGridPanel: function (columns, gridfilters, selectedClass, save) {\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store,{pageSize: this.itemsPerPage});\n\n        this.gridPanel = Ext.create('Ext.grid.Panel', {\n            store: this.store,\n            border: false,\n            columns: columns,\n            loadMask: true,\n            columnLines: true,\n            stripeRows: true,\n            plugins: ['pimcore.gridfilters'],\n            viewConfig: {\n                forceFit: false,\n                xtype: 'patchedgridview'\n            },\n            cls: 'pimcore_object_grid_panel',\n            selModel: this.getGridSelModel(),\n            bbar: this.pagingtoolbar,\n            listeners: {\n                rowdblclick: function (grid, record, tr, rowIndex, e, eOpts ) {\n\n                    var data = grid.getStore().getAt(rowIndex);\n\n                    if(this.parent.multiselect) {\n                        this.addToSelection(data.data);\n                    } else {\n                        // select and close\n                        this.parent.commitData(this.getData());\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.gridPanel.on(\"afterrender\", function (grid) {\n            if(selectedClass) {\n\n                var classStore = pimcore.globalmanager.get(\"object_types_store\");\n                var classId = null;\n                classStore.each(function (rec) {\n                    if(rec.data.text == selectedClass) {\n                        classId = rec.data.id;\n                    }\n                });\n\n                var columnConfig = new Ext.menu.Item({\n                    text: t(\"grid_options\"),\n                    iconCls: \"pimcore_icon_table_col pimcore_icon_overlay_edit\",\n                    handler: this.openColumnConfig.bind(this, selectedClass, classId)\n                });\n                var menu = grid.headerCt.getMenu();\n                menu.add(columnConfig);\n            }\n        }.bind(this));\n\n        if(this.parent.multiselect) {\n            this.gridPanel.on(\"rowcontextmenu\", this.onRowContextmenu.bind(this));\n        }\n\n        this.resultPanel.removeAll();\n        this.resultPanel.add(this.gridPanel);\n        this.resultPanel.updateLayout();\n\n        if (save == true) {\n            if (this.settings.isShared) {\n                this.settings.gridConfigId = null;\n            }\n            this.saveConfig(false);\n        }\n    },\n\n    openColumnConfig: function(selectedClass, classId) {\n        var fields = this.getGridConfig().columns;\n\n        var fieldKeys = Object.keys(fields);\n\n        var visibleColumns = [];\n        for(var i = 0; i < fieldKeys.length; i++) {\n            var field = fields[fieldKeys[i]];\n            if(!field.hidden) {\n                var fc = {\n                    key: fieldKeys[i],\n                    label: field.fieldConfig.label,\n                    dataType: field.fieldConfig.type,\n                    layout: field.fieldConfig.layout\n                };\n                if (field.fieldConfig.width) {\n                    fc.width = field.fieldConfig.width;\n                }\n\n                if (field.isOperator) {\n                    fc.isOperator = true;\n                    fc.attributes = field.fieldConfig.attributes;\n\n                }\n\n                visibleColumns.push(fc);\n            }\n        }\n\n        var objectId;\n        if(this[\"object\"] && this.object[\"id\"]) {\n            objectId = this.object.id;\n        }\n\n        var columnConfig = {\n            language: this.gridLanguage,\n            classid: classId,\n            selectedGridColumns: visibleColumns\n        };\n\n        var dialog = new pimcore.object.helpers.gridConfigDialog(columnConfig,\n            function(data, settings, save) {\n                this.saveColumnConfigButton.show(); //unhide save config button\n                this.gridLanguage = data.language;\n                this.itemsPerPage = data.pageSize;\n                this.initClassStore(selectedClass, data.columns, save);\n            }.bind(this),\n            function() {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_gridgetcolumnconfig'),\n                    params: {\n                        id: this.classId,\n                        objectId: this.object.id,\n                        gridtype: \"search\",\n                        searchType: this.searchType\n                    },\n                    success: function(response) {\n                        if (response) {\n                            this.initClassStore(selectedClass, response, false);\n                            if (typeof this.saveColumnConfigButton !== \"undefined\") {\n                                this.saveColumnConfigButton.hide();\n                            }\n                        } else {\n                            pimcore.helpers.showNotification(t(\"error\"), t(\"error_resetting_config\"),\n                                \"error\",t(rdata.message));\n                        }\n                    }.bind(this),\n                    failure: function () {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"error_resetting_config\"), \"error\");\n                    }\n                });\n            }.bind(this), true, this.settings,\n            {\n                allowPreview: true,\n                classId: this.classId,\n                objectId: this.object.id\n            }\n        );\n    },\n\n    getGridConfig : function () {\n        var config = {\n            language: this.gridLanguage,\n            sortinfo: this.sortinfo,\n            columns: {}\n        };\n\n        var cm = this.gridPanel.getView().getHeaderCt().getGridColumns();\n\n        for (var i=0; i < cm.length; i++) {\n            if(cm[i].dataIndex) {\n                config.columns[cm[i].dataIndex] = {\n                    name: cm[i].dataIndex,\n                    position: i,\n                    hidden: cm[i].hidden,\n                    width: cm[i].width,\n                    fieldConfig: this.fieldObject[cm[i].dataIndex],\n                    isOperator: this.fieldObject[cm[i].dataIndex].isOperator\n                };\n\n            }\n        }\n\n        return config;\n    },\n\n    getGrid: function () {\n        return this.gridPanel;\n    },\n\n    applyExtraParamsToStore: function () {\n        var formValues = this.formPanel.getForm().getFieldValues();\n\n        var proxy = this.store.getProxy();\n\n        proxy.setExtraParam(\"type\", \"object\");\n        proxy.setExtraParam(\"query\", formValues.query);\n        proxy.setExtraParam(\"subtype\", formValues.subtype);\n        proxy.setExtraParam(\"class\", formValues.class);\n\n        if (this.gridLanguage) {\n            proxy.setExtraParam(\"language\", this.gridLanguage);\n        }\n\n        if (this.parent.config && this.parent.config.context) {\n            proxy.setExtraParam(\"context\", Ext.encode(this.parent.config.context));\n        }\n\n        this.updateTabTitle(formValues.query);\n    },\n\n    search: function () {\n        this.applyExtraParamsToStore();\n        this.pagingtoolbar.moveFirst();\n    },\n\n    createGrid: function (fromConfig, response, settings, save, context) {\n        var selectedClass = this.classChangeCombo.getValue();\n\n        this.initClassStore(selectedClass,response, save);\n    },\n\n    getTableDescription: function () {\n        var selectedClass = this.classChangeCombo.getValue();\n\n        if(selectedClass.indexOf(\",\") > 0) { // multiple classes because of a comma in the string\n            // init default store\n            this.initDefaultStore();\n        } else {\n            // get class definition\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_gridgetcolumnconfig'),\n                params: {\n                    id: this.classId,\n                    objectId: this.object.id,\n                    gridtype: \"search\",\n                    gridConfigId: this.settings ? this.settings.gridConfigId : null,\n                    searchType: this.searchType\n                },\n                success: this.initClassStore.bind(this, selectedClass)\n            });\n        }\n    },\n\n    deleteGridConfig: function () {\n\n        Ext.MessageBox.show({\n            title: t('delete'),\n            msg: t('delete_gridconfig_dblcheck'),\n            buttons: Ext.Msg.OKCANCEL,\n            icon: Ext.MessageBox.INFO,\n            fn: this.deleteGridConfigConfirmed.bind(this)\n        });\n    },\n\n    deleteGridConfigConfirmed: function (btn) {\n        if (btn == 'ok') {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_griddeletecolumnconfig'),\n                params: {\n                    id: this.classId,\n                    objectId:\n                    this.object.id,\n                    gridtype: \"search\",\n                    gridConfigId: this.settings.gridConfigId,\n                    searchType: this.searchType\n                },\n                success: function (response) {\n\n                    decodedResponse = Ext.decode(response.responseText);\n                    if (decodedResponse.deleteSuccess) {\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"gridconfig_removed\"), \"success\");\n                    } else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"gridconfig_not_removed\"), \"error\");\n                    }\n                    success: this.initClassStore.bind(this, selectedClass)\n                }.bind(this)\n            });\n        }\n    },\n});\n\npimcore.element.selector.object.addMethods(pimcore.element.helpers.gridColumnConfig);\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.selector.asset\");\npimcore.element.selector.asset = Class.create(pimcore.element.selector.abstract, {\n\n    initStore: function () {\n        this.store = new Ext.data.Store({\n            autoDestroy: true,\n            remoteSort: true,\n            pageSize: 50,\n            proxy : {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_searchadmin_search_find'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                }\n            },\n            fields: [\"id\",\"fullpath\",\"type\",\"subtype\",\"filename\"]\n        });\n    },\n\n    getTabTitle: function() {\n        return \"asset_search\";\n    },\n\n    getForm: function () {\n\n        var compositeConfig = {\n            xtype: \"toolbar\",\n            items: [{\n                xtype: \"textfield\",\n                name: \"query\",\n                width: 370,\n                hideLabel: true,\n                enableKeyEvents: true,\n                listeners: {\n                    \"keydown\" : function (field, key) {\n                        if (key.getKey() == key.ENTER) {\n                            this.search();\n                        }\n                    }.bind(this),\n                    afterrender: function () {\n                        this.focus(true,500);\n                    }\n                }\n            }, new Ext.Button({\n                handler: function () {\n                    window.open(\"http://dev.mysql.com/doc/refman/5.6/en/fulltext-boolean.html\");\n                },\n                iconCls: \"pimcore_icon_help\"\n            })]\n        };\n\n        // check for restrictions\n        var possibleRestrictions = [\"folder\", \"image\", \"text\", \"audio\", \"video\", \"document\", \"archive\", \"unknown\"];\n        var filterStore = [];\n        var selectedStore = [];\n        for (var i=0; i<possibleRestrictions.length; i++) {\n            if(this.parent.restrictions.subtype.asset && in_array(possibleRestrictions[i],\n                this.parent.restrictions.subtype.asset )) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterStore.length < 1) {\n            for (var i=0; i<possibleRestrictions.length; i++) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        var selectedValue = selectedStore.join(\",\");\n        if(filterStore.length > 1) {\n            filterStore.splice(0,0,[selectedValue, t(\"all_types\")]);\n        }\n\n        compositeConfig.items.push({\n            xtype: \"combo\",\n            store: filterStore,\n            mode: \"local\",\n            name: \"subtype\",\n            triggerAction: \"all\",\n            editable: false,\n            value: selectedValue\n        });\n\n        // add button\n        compositeConfig.items.push({\n            xtype: \"button\",\n            text: t(\"search\"),\n            iconCls: \"pimcore_icon_search\",\n            handler: this.search.bind(this)\n        });\n\n        if(!this.formPanel) {\n            this.formPanel = new Ext.form.FormPanel({\n                region: \"north\",\n                bodyStyle: \"padding: 2px;\",\n                items: [compositeConfig]\n            });\n        }\n\n        return this.formPanel;\n    },\n\n    getSelectionPanel: function () {\n        if(!this.selectionPanel) {\n\n            this.selectionStore = new Ext.data.JsonStore({\n                data: [],\n                fields: [\"id\", \"type\", \"filename\", \"fullpath\", \"subtype\"]\n            });\n\n            this.selectionPanel = new Ext.grid.GridPanel({\n                region: \"east\",\n                title: t(\"your_selection\"),\n                tbar: [{\n                    xtype: \"tbtext\",\n                    text: t(\"double_click_to_add_item_to_selection\"),\n                    autoHeight: true,\n                    style: {\n                        whiteSpace: \"normal\"\n                    }\n                }],\n                tbarCfg: {\n                    autoHeight: true\n                },\n                width: 300,\n                store: this.selectionStore,\n                columns: [\n                    {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype', renderer:\n                        function (value, metaData, record, rowIndex, colIndex, store) {\n                            return '<div style=\"height: 16px;\" class=\"pimcore_icon_asset pimcore_icon_' + value\n                                + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                        }\n                    },\n                    {text: t(\"filename\"), flex: 1, sortable: false, dataIndex: 'filename'}\n                ],\n                viewConfig: {\n                    forceFit: true\n                },\n                listeners: {\n                    rowcontextmenu: function (grid, record, tr, rowIndex, e, eOpts ) {\n                        var menu = new Ext.menu.Menu();\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('remove'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: function (index, item) {\n                                this.selectionStore.removeAt(index);\n                                item.parentMenu.destroy();\n                            }.bind(this, rowIndex)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.getXY());\n                    }.bind(this)\n                },\n                selModel: Ext.create('Ext.selection.RowModel', {}),\n                bbar: [\"->\", {\n                    text: t(\"select\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: function () {\n                        this.parent.commitData(this.getData());\n                    }.bind(this)\n                }]\n            });\n        }\n\n        return this.selectionPanel;\n    },\n\n    getResultPanel: function () {\n        if (!this.resultPanel) {\n            var columns = [\n                {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                        return '<div style=\"height: 16px;\" class=\"pimcore_icon_'\n                            + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                    }\n                },\n                {text: 'ID', width: 40, sortable: true, dataIndex: 'id', hidden: true},\n                {text: t(\"path\"), flex: 200, sortable: true, dataIndex: 'fullpath', renderer: Ext.util.Format.htmlEncode},\n                {text: t(\"filename\"), width: 200, sortable: false, dataIndex: 'filename', hidden: true, renderer: Ext.util.Format.htmlEncode},\n                {text: t(\"preview\"), width: 150, sortable: false, dataIndex: 'subtype',\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                        var routes = {\n                            image: \"pimcore_admin_asset_getimagethumbnail\",\n                            video: \"pimcore_admin_asset_getvideothumbnail\",\n                            document: \"pimcore_admin_asset_getdocumentthumbnail\"\n                        };\n\n                        if (record.data.subtype in routes) {\n                            \n                            var route = routes[record.data.subtype];\n\n                            var params = {\n                                id: record.data.id,\n                                width: 100,\n                                height: 100,\n                                cover: true,\n                                aspectratio: true\n                            };\n\n                            var uri = Routing.generate(route, params);\n\n                            return '<div name=\"' + t(record.data.subtype)\n                                + '\"><img src=\"' + uri + '\" /></div>';\n                        }\n                    }\n                }\n            ];\n\n            this.pagingtoolbar = this.getPagingToolbar();\n\n            this.resultPanel = new Ext.grid.GridPanel({\n                region: \"center\",\n                store: this.store,\n                columns: columns,\n                loadMask: true,\n                columnLines: true,\n                stripeRows: true,\n                viewConfig: {\n                    forceFit: true\n                },\n                plugins: ['gridfilters'],\n                selModel: this.getGridSelModel(),\n                bbar: this.pagingtoolbar,\n                listeners: {\n                    rowdblclick: function (grid, record, tr, rowIndex, e, eOpts ) {\n\n                        var data = grid.getStore().getAt(rowIndex);\n\n                        if(this.parent.multiselect) {\n                            this.addToSelection(data.data);\n                        } else {\n                            // select and close\n                            this.parent.commitData(this.getData());\n                        }\n                    }.bind(this)\n                }\n            });\n        }\n\n\n        if(this.parent.multiselect) {\n            this.resultPanel.on(\"rowcontextmenu\", this.onRowContextmenu.bind(this));\n        }\n\n        return this.resultPanel;\n    },\n\n    getGrid: function () {\n        return this.resultPanel;\n    },\n\n    search: function () {\n        let formValues = this.formPanel.getForm().getFieldValues();\n\n        let proxy = this.store.getProxy();\n        let query = Ext.util.Format.htmlEncode(formValues.query);\n        proxy.setExtraParam(\"type\", \"asset\");\n        proxy.setExtraParam(\"query\", query);\n        proxy.setExtraParam(\"subtype\", formValues.subtype);\n\n        if (this.parent.config && this.parent.config.context) {\n            proxy.setExtraParam(\"context\", Ext.encode(this.parent.config.context));\n        }\n\n        this.pagingtoolbar.moveFirst();\n        this.updateTabTitle(query);\n    }\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.selector.document\");\npimcore.element.selector.document = Class.create(pimcore.element.selector.abstract, {\n\n    initStore: function () {\n        this.store = new Ext.data.Store({\n            autoDestroy: true,\n            remoteSort: true,\n            pageSize: 50,\n            proxy : {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_searchadmin_search_find'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                }\n            },\n            fields: [\"id\", \"fullpath\", \"type\", \"subtype\", \"published\", \"title\", \"description\", \"name\", \"filename\"]\n        });\n    },\n\n    getTabTitle: function() {\n        return \"document_search\";\n    },\n\n    getForm: function () {\n\n        var compositeConfig = {\n            xtype: \"toolbar\",\n            items: [{\n                xtype: \"textfield\",\n                name: \"query\",\n                width: 370,\n                hideLabel: true,\n                enableKeyEvents: true,\n                listeners: {\n                    \"keydown\" : function (field, key) {\n                        if (key.getKey() == key.ENTER) {\n                            this.search();\n                        }\n                    }.bind(this),\n                    afterrender: function () {\n                        this.focus(true,500);\n                    }\n                }\n            }, new Ext.Button({\n                handler: function () {\n                    window.open(\"http://dev.mysql.com/doc/refman/5.6/en/fulltext-boolean.html\");\n                },\n                iconCls: \"pimcore_icon_help\"\n            })]\n        };\n\n        // check for restrictions\n        var possibleRestrictions = [\"page\", \"snippet\", \"folder\", \"link\", \"hardlink\", \"email\", \"newsletter\"];\n        var filterStore = [];\n        var selectedStore = [];\n        for (var i=0; i<possibleRestrictions.length; i++) {\n            if(this.parent.restrictions.subtype.document && in_array(possibleRestrictions[i],\n                this.parent.restrictions.subtype.document )) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterStore.length < 1) {\n            for (var i=0; i<possibleRestrictions.length; i++) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        var selectedValue = selectedStore.join(\",\");\n        if(filterStore.length > 1) {\n            filterStore.splice(0,0,[selectedValue, t(\"all_types\")]);\n        }\n\n\n        compositeConfig.items.push({\n            xtype: \"combo\",\n            store: filterStore,\n            mode: \"local\",\n            name: \"subtype\",\n            triggerAction: \"all\",\n            editable: false,\n            value: selectedValue\n        });\n\n\n        // add button\n        compositeConfig.items.push({\n            xtype: \"button\",\n            iconCls: \"pimcore_icon_search\",\n            text: t(\"search\"),\n            handler: this.search.bind(this)\n        });\n\n        if(!this.formPanel) {\n            this.formPanel = new Ext.form.FormPanel({\n                region: \"north\",\n                bodyStyle: \"padding: 2px;\",\n                items: [compositeConfig]\n            });\n        }\n\n        return this.formPanel;\n    },\n\n    getSelectionPanel: function () {\n        if(!this.selectionPanel) {\n\n            this.selectionStore = new Ext.data.JsonStore({\n                data: [],\n                fields: [\"id\", \"type\", \"filename\", \"fullpath\", \"subtype\"]\n            });\n\n            this.selectionPanel = new Ext.grid.GridPanel({\n                region: \"east\",\n                title: t(\"your_selection\"),\n                tbar: [{\n                    xtype: \"tbtext\",\n                    text: t(\"double_click_to_add_item_to_selection\"),\n                    autoHeight: true,\n                    style: {\n                        whiteSpace: \"normal\"\n                    }\n                }],\n                tbarCfg: {\n                    autoHeight: true\n                },\n                width: 300,\n                store: this.selectionStore,\n                columns: [\n                    {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                        renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                            return '<div class=\"pimcore_icon_' + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                        }\n                    },\n                    {text: t(\"filename\"), flex: 1, sortable: false, dataIndex: 'filename'}\n                ],\n                viewConfig: {\n                    forceFit: true\n                },\n                listeners: {\n                    rowcontextmenu: function (grid, record, tr, rowIndex, e, eOpts ) {\n                        var menu = new Ext.menu.Menu();\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('remove'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: function (index, item) {\n                                this.selectionStore.removeAt(index);\n                                item.parentMenu.destroy();\n                            }.bind(this, rowIndex)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.getXY());\n                    }.bind(this)\n                },\n                selModel: Ext.create('Ext.selection.RowModel', {}),\n                bbar: [\"->\", {\n                    text: t(\"select\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: function () {\n                        this.parent.commitData(this.getData());\n                    }.bind(this)\n                }]\n            });\n        }\n\n        return this.selectionPanel;\n    },\n\n    getResultPanel: function () {\n        if (!this.resultPanel) {\n            var columns = [\n                {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                        return '<div class=\"pimcore_icon_' + value + '\" name=\"' + t(record.data.subtype) + '\">&nbsp;</div>';\n                    }\n                },\n                {text: 'ID', width: 40, sortable: true, dataIndex: 'id', hidden: true},\n                {text: t(\"published\"), width: 40, sortable: true, dataIndex: 'published', hidden: true},\n                {text: t(\"path\"), flex: 200, sortable: true, dataIndex: 'fullpath'},\n                {text: t(\"title\"), flex: 200, sortable: false, dataIndex: 'title', hidden: false},\n                {text: t(\"description\"), width: 200, sortable: false, dataIndex: 'description', hidden: true},\n                {text: t(\"filename\"), width: 200, sortable: false, dataIndex: 'filename', hidden: true}\n            ];\n\n            this.pagingtoolbar = this.getPagingToolbar();\n\n            this.resultPanel = new Ext.grid.GridPanel({\n                region: \"center\",\n                store: this.store,\n                columns: columns,\n                viewConfig: {\n                    forceFit: true\n                },\n                loadMask: true,\n                columnLines: true,\n                stripeRows: true,\n                selModel: this.getGridSelModel(),\n                bbar: this.pagingtoolbar,\n                listeners: {\n                    rowdblclick: function (grid, record, tr, rowIndex, e, eOpts ) {\n\n                        var data = grid.getStore().getAt(rowIndex);\n\n                        if(this.parent.multiselect) {\n                            this.addToSelection(data.data);\n                        } else {\n                            // select and close\n                            this.parent.commitData(this.getData());\n                        }\n                    }.bind(this)\n                }\n            });\n        }\n\n        if(this.parent.multiselect) {\n            this.resultPanel.on(\"rowcontextmenu\", this.onRowContextmenu.bind(this));\n        }\n\n        return this.resultPanel;\n    },\n\n    getGrid: function () {\n        return this.resultPanel;\n    },\n\n    search: function () {\n        let formValues = this.formPanel.getForm().getFieldValues();\n\n        let proxy = this.store.getProxy();\n        let query = Ext.util.Format.htmlEncode(formValues.query);\n        proxy.setExtraParam(\"type\", \"document\");\n        proxy.setExtraParam(\"query\", query);\n        proxy.setExtraParam(\"subtype\", formValues.subtype);\n\n        if (this.parent.config && this.parent.config.context) {\n            proxy.setExtraParam(\"context\", Ext.encode(this.parent.config.context));\n        }\n\n        this.pagingtoolbar.moveFirst();\n        this.updateTabTitle(query);\n    }\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.selector.object\");\npimcore.element.selector.object = Class.create(pimcore.element.selector.abstract, {\n\n    fieldObject: {},\n    gridType: 'object',\n\n    initStore: function () {\n        return 0; // dummy\n    },\n\n    getTabTitle: function() {\n        return \"object_search\";\n    },\n\n    getForm: function () {\n        var i;\n\n        //set \"Home\" object ID for search grid column configuration\n        this.object  = {};\n        this.object.id = 1;\n\n        this.searchType = \"search\";\n\n        var compositeConfig = {\n            xtype: \"toolbar\",\n            items: [{\n                xtype: \"textfield\",\n                name: \"query\",\n                width: 340,\n                hideLabel: true,\n                enableKeyEvents: true,\n                listeners: {\n                    \"keydown\" : function (field, key) {\n                        if (key.getKey() == key.ENTER) {\n                            this.search();\n                        }\n                    }.bind(this),\n                    afterrender: function () {\n                        this.focus(true,500);\n                    }\n                }\n            }, new Ext.Button({\n                handler: function () {\n                    window.open(\"http://dev.mysql.com/doc/refman/5.6/en/fulltext-boolean.html\");\n                },\n                iconCls: \"pimcore_icon_help\"\n            })]\n        };\n\n        // check for restrictions\n        var possibleRestrictions = [\"folder\", \"object\", \"variant\"];\n        var filterStore = [];\n        var selectedStore = [];\n        for (i=0; i<possibleRestrictions.length; i++) {\n            if(this.parent.restrictions.subtype.object && in_array(possibleRestrictions[i], this.parent.restrictions.subtype.object )) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterStore.length < 1) {\n            for (var i=0; i<possibleRestrictions.length; i++) {\n                filterStore.push([possibleRestrictions[i], t(possibleRestrictions[i])]);\n                selectedStore.push(possibleRestrictions[i]);\n            }\n        }\n\n        var selectedValue = selectedStore.join(\",\");\n        if(filterStore.length > 1) {\n            filterStore.splice(0,0,[selectedValue, t(\"all_types\")]);\n        }\n\n        compositeConfig.items.push({\n            xtype: \"combo\",\n            store: filterStore,\n            queryMode: \"local\",\n            name: \"subtype\",\n            triggerAction: \"all\",\n            editable: true,\n            typeAhead:true,\n            forceSelection: true,\n            selectOnFocus: true,\n            value: selectedValue,\n            listeners: {\n                select: function(e) {\n                    if(e.value == 'folder') {\n                        defaultRecord = this.classChangeCombo.getStore().getAt(0);\n                        this.classChangeCombo.setValue(defaultRecord.get(this.classChangeCombo.valueField));\n                        this.classChangeCombo.fireEvent('select', this.classChangeCombo, defaultRecord);\n\n                        this.classChangeCombo.setDisabled(true);\n                    } else {\n                        this.classChangeCombo.setDisabled(false);\n                    }\n                }.bind(this)\n            }\n        });\n\n\n        // classes\n        var possibleClassRestrictions = [];\n        var classStore = pimcore.globalmanager.get(\"object_types_store\");\n        classStore.each(function (rec) {\n            possibleClassRestrictions.push(rec.data.text);\n        });\n\n        var filterClassStore = [];\n        var selectedClassStore = [];\n        for (i=0; i<possibleClassRestrictions.length; i++) {\n            if(in_array(possibleClassRestrictions[i], this.parent.restrictions.specific.classes )) {\n                filterClassStore.push([possibleClassRestrictions[i], t(possibleClassRestrictions[i])]);\n                selectedClassStore.push(possibleClassRestrictions[i]);\n            }\n        }\n\n        // add all to store if empty\n        if(filterClassStore.length < 1) {\n            for (i=0; i<possibleClassRestrictions.length; i++) {\n                filterClassStore.push([possibleClassRestrictions[i], possibleClassRestrictions[i]]);\n                selectedClassStore.push(possibleClassRestrictions[i]);\n            }\n        }\n\n        var selectedClassValue = selectedClassStore.join(\",\");\n        if(filterClassStore.length > 1) {\n            filterClassStore.splice(0,0,[selectedClassValue, t(\"all_types\")]);\n        }\n\n        this.classChangeCombo = new Ext.form.ComboBox({\n            store: filterClassStore,\n            queryMode: \"local\",\n            name: \"class\",\n            triggerAction: \"all\",\n            editable: true,\n            typeAhead: true,\n            forceSelection: true,\n            selectOnFocus: true,\n            value: selectedClassValue,\n            listeners: {\n                select: this.changeClass.bind(this)\n            }\n        });\n        if(selectedValue == 'folder') {\n            this.classChangeCombo.setDisabled(true);\n        }\n\n        compositeConfig.items.push(this.classChangeCombo);\n\n\n        // add button\n        compositeConfig.items.push({\n            xtype: \"button\",\n            iconCls: \"pimcore_icon_search\",\n            text: t(\"search\"),\n            handler: this.search.bind(this)\n        });\n\n        this.saveColumnConfigButton = new Ext.Button({\n            tooltip: t('save_grid_options'),\n            iconCls: \"pimcore_icon_publish\",\n            hidden: true,\n            handler: function () {\n                var asCopy = !(this.settings.gridConfigId > 0);\n                this.saveConfig(asCopy)\n            }.bind(this)\n        });\n\n        this.columnConfigButton = new Ext.SplitButton({\n            text: t('grid_options'),\n            hidden: true,\n            iconCls: \"pimcore_icon_table_col pimcore_icon_overlay_edit\",\n            handler: function () {\n                this.openColumnConfig(this.selectedClass, this.classId);\n            }.bind(this),\n            menu: []\n        });\n\n        compositeConfig.items.push(\"->\");\n\n        // add grid config main button\n        compositeConfig.items.push(this.columnConfigButton);\n\n        // add grid config save button\n        compositeConfig.items.push(this.saveColumnConfigButton);\n\n        if(!this.formPanel) {\n            this.formPanel = new Ext.form.FormPanel({\n                region: \"north\",\n                bodyStyle: \"padding: 2px;\",\n                items: [compositeConfig]\n            });\n        }\n\n        return this.formPanel;\n    },\n\n    getSelectionPanel: function () {\n        if(!this.selectionPanel) {\n\n            this.selectionStore = new Ext.data.JsonStore({\n                data: [],\n                fields: [\"id\", \"type\", \"filename\", \"fullpath\", \"subtype\", {name:\"classname\",renderer: function(v){\n                    return t(v);\n                }}]\n            });\n\n            this.selectionPanel = new Ext.grid.GridPanel({\n                region: \"east\",\n                title: t(\"your_selection\"),\n                tbar: [{\n                    xtype: \"tbtext\",\n                    text: t(\"double_click_to_add_item_to_selection\"),\n                    autoHeight: true,\n                    style: {\n                        whiteSpace: \"normal\"\n                    }\n                }],\n                tbarCfg: {\n                    autoHeight: true\n                },\n                width: 300,\n                store: this.selectionStore,\n                columns: [\n                    {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype'},\n                    {text: t(\"filename\"), flex: 1, sortable: false, dataIndex: 'filename'}\n                ],\n                viewConfig: {\n                    forceFit: true\n                },\n                listeners: {\n                    rowcontextmenu: function (grid, record, tr, rowIndex, e, eOpts ) {\n                        var menu = new Ext.menu.Menu();\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('remove'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: function (index, item) {\n                                this.selectionStore.removeAt(index);\n                                item.parentMenu.destroy();\n                            }.bind(this, rowIndex)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.getXY());\n                    }.bind(this)\n                },\n                selModel: Ext.create('Ext.selection.RowModel', {}),\n                bbar: [\"->\", {\n                    text: t(\"select\"),\n                    iconCls: \"pimcore_icon_apply\",\n                    handler: function () {\n                        this.parent.commitData(this.getData());\n                    }.bind(this)\n                }]\n            });\n        }\n\n        return this.selectionPanel;\n    },\n\n    getResultPanel: function () {\n        if (!this.resultPanel) {\n            this.resultPanel = new Ext.Panel({\n                region: \"center\",\n                layout: \"fit\"\n            });\n\n            this.resultPanel.on(\"afterrender\", this.changeClass.bind(this));\n        }\n\n        return this.resultPanel;\n    },\n\n\n    changeClass: function () {\n\n        var selectedClass = this.classChangeCombo.getValue();\n\n        if(selectedClass.indexOf(\",\") > 0) { // multiple classes because of a comma in the string\n\n            //hide column config buttons\n            this.columnConfigButton.hide();\n            this.saveColumnConfigButton.hide();\n\n            // init default store\n            this.initDefaultStore();\n        } else {\n            var classStore = pimcore.globalmanager.get(\"object_types_store\");\n            var classIdx = classStore.findExact(\"text\", selectedClass);\n            this.selectedClass = selectedClass\n            this.classId = classStore.getAt(classIdx).id;\n            this.settings = {};\n\n            // get class definition\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_gridgetcolumnconfig'),\n                params: {\n                    id: this.classId,\n                    objectId: this.object.id,\n                    gridtype: \"search\",\n                    gridConfigId: this.settings ? this.settings.gridConfigId : null,\n                    searchType: \"search\"\n                },\n                success: this.initClassStore.bind(this, selectedClass)\n            });\n        }\n    },\n\n    initClassStore: function (selectedClass, response, save) {\n        var fields = [];\n        if(response.responseText) {\n            response = Ext.decode(response.responseText);\n            fields = response.availableFields;\n            this.gridLanguage = response.language;\n            this.sortinfo = response.sortinfo;\n            this.settings = response.settings;\n            this.availableConfigs = response.availableConfigs;\n            this.sharedConfigs = response.sharedConfigs;\n        } else {\n            fields = response;\n        }\n\n        this.itemsPerPage = pimcore.helpers.grid.getDefaultPageSize(-1);\n        var gridHelper = new pimcore.object.helpers.grid(selectedClass, fields, Routing.generate('pimcore_admin_searchadmin_search_find'), null, true);\n        gridHelper.limit = this.itemsPerPage;\n        this.store = gridHelper.getStore();\n        this.store.setPageSize(this.itemsPerPage);\n        this.applyExtraParamsToStore();\n        var gridColumns = gridHelper.getGridColumns();\n        var gridfilters = gridHelper.getGridFilters();\n\n        this.fieldObject = {};\n        for(var i = 0; i < fields.length; i++) {\n            this.fieldObject[fields[i].key] = fields[i];\n        }\n\n        //TODO set up filter\n\n        this.getGridPanel(gridColumns, gridfilters, selectedClass, save);\n\n        this.buildColumnConfigMenu();\n        this.columnConfigButton.show();\n    },\n\n    initDefaultStore: function () {\n        this.itemsPerPage =  pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.store = new Ext.data.Store({\n            autoDestroy: true,\n            remoteSort: true,\n            pageSize: this.itemsPerPage,\n            proxy : {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_searchadmin_search_find'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                }\n            },\n            fields: [\"id\",\"fullpath\",\"type\",\"subtype\",\"filename\",{name:\"classname\",convert: function(v, rec){\n                return t(rec.data.classname);\n            }},\"published\"]\n        });\n\n        var columns = [\n            {text: t(\"type\"), width: 40, sortable: true, dataIndex: 'subtype',\n                renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                    return '<div style=\"height: 16px;\" class=\"pimcore_icon_' + value + '\" name=\"'\n                        + t(record.data.subtype) + '\">&nbsp;</div>';\n                }\n            },\n            {text: 'ID', width: 40, sortable: true, dataIndex: 'id', hidden: true},\n            {text: t(\"published\"), width: 40, sortable: true, dataIndex: 'published', hidden: true},\n            {text: t(\"path\"), flex: 200, sortable: true, dataIndex: 'fullpath', renderer: Ext.util.Format.htmlEncode},\n            {text: t(\"filename\"), width: 200, sortable: false, dataIndex: 'filename', hidden: true, renderer: Ext.util.Format.htmlEncode},\n            {text: t(\"class\"), width: 200, sortable: true, dataIndex: 'classname'}\n        ];\n\n\n        this.getGridPanel(columns, null);\n    },\n\n    getGridPanel: function (columns, gridfilters, selectedClass, save) {\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store,{pageSize: this.itemsPerPage});\n\n        this.gridPanel = Ext.create('Ext.grid.Panel', {\n            store: this.store,\n            border: false,\n            columns: columns,\n            loadMask: true,\n            columnLines: true,\n            stripeRows: true,\n            plugins: ['pimcore.gridfilters'],\n            viewConfig: {\n                forceFit: false,\n                xtype: 'patchedgridview'\n            },\n            cls: 'pimcore_object_grid_panel',\n            selModel: this.getGridSelModel(),\n            bbar: this.pagingtoolbar,\n            listeners: {\n                rowdblclick: function (grid, record, tr, rowIndex, e, eOpts ) {\n\n                    var data = grid.getStore().getAt(rowIndex);\n\n                    if(this.parent.multiselect) {\n                        this.addToSelection(data.data);\n                    } else {\n                        // select and close\n                        this.parent.commitData(this.getData());\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.gridPanel.on(\"afterrender\", function (grid) {\n            if(selectedClass) {\n\n                var classStore = pimcore.globalmanager.get(\"object_types_store\");\n                var classId = null;\n                classStore.each(function (rec) {\n                    if(rec.data.text == selectedClass) {\n                        classId = rec.data.id;\n                    }\n                });\n\n                var columnConfig = new Ext.menu.Item({\n                    text: t(\"grid_options\"),\n                    iconCls: \"pimcore_icon_table_col pimcore_icon_overlay_edit\",\n                    handler: this.openColumnConfig.bind(this, selectedClass, classId)\n                });\n                var menu = grid.headerCt.getMenu();\n                menu.add(columnConfig);\n            }\n        }.bind(this));\n\n        if(this.parent.multiselect) {\n            this.gridPanel.on(\"rowcontextmenu\", this.onRowContextmenu.bind(this));\n        }\n\n        this.resultPanel.removeAll();\n        this.resultPanel.add(this.gridPanel);\n        this.resultPanel.updateLayout();\n\n        if (save == true) {\n            if (this.settings.isShared) {\n                this.settings.gridConfigId = null;\n            }\n            this.saveConfig(false);\n        }\n    },\n\n    openColumnConfig: function(selectedClass, classId) {\n        var fields = this.getGridConfig().columns;\n\n        var fieldKeys = Object.keys(fields);\n\n        var visibleColumns = [];\n        for(var i = 0; i < fieldKeys.length; i++) {\n            var field = fields[fieldKeys[i]];\n            if(!field.hidden) {\n                var fc = {\n                    key: fieldKeys[i],\n                    label: field.fieldConfig.label,\n                    dataType: field.fieldConfig.type,\n                    layout: field.fieldConfig.layout\n                };\n                if (field.fieldConfig.width) {\n                    fc.width = field.fieldConfig.width;\n                }\n\n                if (field.isOperator) {\n                    fc.isOperator = true;\n                    fc.attributes = field.fieldConfig.attributes;\n\n                }\n\n                visibleColumns.push(fc);\n            }\n        }\n\n        var objectId;\n        if(this[\"object\"] && this.object[\"id\"]) {\n            objectId = this.object.id;\n        }\n\n        var columnConfig = {\n            language: this.gridLanguage,\n            classid: classId,\n            selectedGridColumns: visibleColumns\n        };\n\n        var dialog = new pimcore.object.helpers.gridConfigDialog(columnConfig,\n            function(data, settings, save) {\n                this.saveColumnConfigButton.show(); //unhide save config button\n                this.gridLanguage = data.language;\n                this.itemsPerPage = data.pageSize;\n                this.initClassStore(selectedClass, data.columns, save);\n            }.bind(this),\n            function() {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_gridgetcolumnconfig'),\n                    params: {\n                        id: this.classId,\n                        objectId: this.object.id,\n                        gridtype: \"search\",\n                        searchType: this.searchType\n                    },\n                    success: function(response) {\n                        if (response) {\n                            this.initClassStore(selectedClass, response, false);\n                            if (typeof this.saveColumnConfigButton !== \"undefined\") {\n                                this.saveColumnConfigButton.hide();\n                            }\n                        } else {\n                            pimcore.helpers.showNotification(t(\"error\"), t(\"error_resetting_config\"),\n                                \"error\",t(rdata.message));\n                        }\n                    }.bind(this),\n                    failure: function () {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"error_resetting_config\"), \"error\");\n                    }\n                });\n            }.bind(this), true, this.settings,\n            {\n                allowPreview: true,\n                classId: this.classId,\n                objectId: this.object.id\n            }\n        );\n    },\n\n    getGridConfig : function () {\n        var config = {\n            language: this.gridLanguage,\n            sortinfo: this.sortinfo,\n            columns: {}\n        };\n\n        var cm = this.gridPanel.getView().getHeaderCt().getGridColumns();\n\n        for (var i=0; i < cm.length; i++) {\n            if(cm[i].dataIndex) {\n                config.columns[cm[i].dataIndex] = {\n                    name: cm[i].dataIndex,\n                    position: i,\n                    hidden: cm[i].hidden,\n                    width: cm[i].width,\n                    fieldConfig: this.fieldObject[cm[i].dataIndex],\n                    isOperator: this.fieldObject[cm[i].dataIndex].isOperator\n                };\n\n            }\n        }\n\n        return config;\n    },\n\n    getGrid: function () {\n        return this.gridPanel;\n    },\n\n    applyExtraParamsToStore: function () {\n        let formValues = this.formPanel.getForm().getFieldValues();\n\n        let proxy = this.store.getProxy();\n        let query = Ext.util.Format.htmlEncode(formValues.query);\n        proxy.setExtraParam(\"type\", \"object\");\n        proxy.setExtraParam(\"query\", query);\n        proxy.setExtraParam(\"subtype\", formValues.subtype);\n        proxy.setExtraParam(\"class\", formValues.class);\n\n        if (this.gridLanguage) {\n            proxy.setExtraParam(\"language\", this.gridLanguage);\n        }\n\n        if (this.parent.config && this.parent.config.context) {\n            proxy.setExtraParam(\"context\", Ext.encode(this.parent.config.context));\n        }\n\n        this.updateTabTitle(query);\n    },\n\n    search: function () {\n        this.applyExtraParamsToStore();\n        this.pagingtoolbar.moveFirst();\n    },\n\n    createGrid: function (fromConfig, response, settings, save, context) {\n        var selectedClass = this.classChangeCombo.getValue();\n\n        this.initClassStore(selectedClass,response, save);\n    },\n\n    getTableDescription: function () {\n        var selectedClass = this.classChangeCombo.getValue();\n\n        if(selectedClass.indexOf(\",\") > 0) { // multiple classes because of a comma in the string\n            // init default store\n            this.initDefaultStore();\n        } else {\n            // get class definition\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_gridgetcolumnconfig'),\n                params: {\n                    id: this.classId,\n                    objectId: this.object.id,\n                    gridtype: \"search\",\n                    gridConfigId: this.settings ? this.settings.gridConfigId : null,\n                    searchType: this.searchType\n                },\n                success: this.initClassStore.bind(this, selectedClass)\n            });\n        }\n    },\n\n    deleteGridConfig: function () {\n\n        Ext.MessageBox.show({\n            title: t('delete'),\n            msg: t('delete_gridconfig_dblcheck'),\n            buttons: Ext.Msg.OKCANCEL,\n            icon: Ext.MessageBox.INFO,\n            fn: this.deleteGridConfigConfirmed.bind(this)\n        });\n    },\n\n    deleteGridConfigConfirmed: function (btn) {\n        if (btn == 'ok') {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_dataobjecthelper_griddeletecolumnconfig'),\n                params: {\n                    id: this.classId,\n                    objectId:\n                    this.object.id,\n                    gridtype: \"search\",\n                    gridConfigId: this.settings.gridConfigId,\n                    searchType: this.searchType\n                },\n                success: function (response) {\n\n                    decodedResponse = Ext.decode(response.responseText);\n                    if (decodedResponse.deleteSuccess) {\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"gridconfig_removed\"), \"success\");\n                    } else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"gridconfig_not_removed\"), \"error\");\n                    }\n                    success: this.initClassStore.bind(this, selectedClass)\n                }.bind(this)\n            });\n        }\n    },\n});\n\npimcore.element.selector.object.addMethods(pimcore.element.helpers.gridColumnConfig);\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/element/selector/asset.js", "bundles/AdminBundle/Resources/public/js/pimcore/element/selector/document.js", "bundles/AdminBundle/Resources/public/js/pimcore/element/selector/object.js"], "buggy_code_start_loc": [272, 246, 577], "buggy_code_end_loc": [285, 259, 595], "fixing_code_start_loc": [272, 246, 577], "fixing_code_end_loc": [286, 260, 595], "type": "CWE-79", "message": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-4081", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-10T11:15:07.620", "lastModified": "2021-12-10T23:06:50.363", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "pimcore es vulnerable a una Neutralizaci\u00f3n Inadecuada de Entradas Durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.2.6", "matchCriteriaId": "E8D98DAD-EBC5-470A-9F38-2A963406010F"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/34ed0e050ff679b4b38414aef48ea1ff956f907a", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/da173e66-76ba-4f98-b8fb-429aabf222d3", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/34ed0e050ff679b4b38414aef48ea1ff956f907a"}}