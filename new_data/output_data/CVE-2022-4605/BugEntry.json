{"buggy_code": ["<?php\n\n/**\n * uploader control panel\n *\n * Type:\n * Name:\n * Date:\n * Purpose:\n * Input:\n *\n * @author NoWhereMan <real_nowhereman at users dot sf dot com>\n *        \n */\nclass admin_uploader extends AdminPanel {\n\n\tvar $panelname = 'uploader';\n\n\tvar $actions = array(\n\t\t'default' => true\n\t);\n\n}\n\nclass admin_uploader_default extends AdminPanelAction {\n\n\tvar $events = array(\n\t\t'upload'\n\t);\n\n\tfunction main() {\n\t\tif ($f = sess_remove('admin_uploader_files')) {\n\t\t\t$this->smarty->assign('uploaded_files', $f);\n\t\t}\n\t}\n\n\tfunction onupload() {\n\t\t$success = false;\n\n\t\t/*\n\t\t * first check if user is logged in\n\t\t * to prevent remote admin.uploader.php script execution\n\t\t *\n\t\t * By testing the admin/main.php made the redirect job\n\t\t * By direct URL call PHP throw a visible error -> AdminPanel class not found!\n\t\t *\n\t\t * 2019-11-23 - laborix\n\t\t */\n\t\tif (!user_loggedin()) {\n\t\t\tutils_redirect(\"login.php\");\n\t\t\tdie();\n\t\t}\n\n\t\tif (!file_exists(IMAGES_DIR))\n\t\t\tfs_mkdir(IMAGES_DIR);\n\n\t\tif (!file_exists(ATTACHS_DIR))\n\t\t\tfs_mkdir(ATTACHS_DIR);\n\t\t/*\n\t\t * Blacklist entries from OWASP and\n\t\t * https://stackoverflow.com/questions/4166762/php-image-upload-security-check-list\n\t\t *\n\t\t * 2019-11-23 - laborix\n\t\t */\n\t\t$blacklist_extensions = array(\n\t\t\t'htaccess',\n\t\t\t'pht',\n\t\t\t'phtm',\n\t\t\t'phtml',\n\t\t\t'ph2',\n\t\t\t'ph3',\n\t\t\t'ph4',\n\t\t\t'ph5',\n\t\t\t'ph6',\n\t\t\t'ph7',\n\t\t\t'ph8',\n\t\t\t'php',\n\t\t\t'php2',\n\t\t\t'php3',\n\t\t\t'php4',\n\t\t\t'php5',\n\t\t\t'php6',\n\t\t\t'php7',\n\t\t\t'php8',\n\t\t\t'phps',\n\t\t\t'cgi',\n\t\t\t'exe',\n\t\t\t'pl',\n\t\t\t'asp',\n\t\t\t'aspx',\n\t\t\t'shtml',\n\t\t\t'shtm',\n\t\t\t'fcgi',\n\t\t\t'fpl',\n\t\t\t'jsp',\n\t\t\t'htm',\n\t\t\t'html',\n\t\t\t'wml'\n\t\t);\n\n\t\t$imgs = array(\n\t\t\t'.jpg',\n\t\t\t'.gif',\n\t\t\t'.png',\n\t\t\t'.jpeg'\n\t\t);\n\n\t\t// intentionally\n\t\t// I've not put BMPs\n\n\t\t$uploaded_files = array();\n\t\t$this->smarty->assign('uploaded_files', $uploaded_files);\n\n\t\tforeach ($_FILES [\"upload\"] [\"error\"] as $key => $error) {\n\n\t\t\t// Upload went wrong -> jump to the next file\n\t\t\tif ($error != UPLOAD_ERR_OK) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$tmp_name = $_FILES [\"upload\"] [\"tmp_name\"] [$key];\n\t\t\t$name = $_FILES [\"upload\"] [\"name\"] [$key];\n\n\t\t\t$dir = ATTACHS_DIR;\n\n\t\t\t/*\n\t\t\t * second check extension list\n\t\t\t * https://stackoverflow.com/questions/4166762/php-image-upload-security-check-list\n\t\t\t *\n\t\t\t * 2019-11-24 - laborix\n\t\t\t */\n\n\t\t\t$uploadfilename = strtolower($name);\n\n\t\t\t$isForbidden = false;\n\t\t\t$deeptest = array();\n\t\t\t$extcount = 0;\n\t\t\t$deeptest = explode('.', $uploadfilename);\n\t\t\t$extcount = count($deeptest);\n\n\t\t\tif ($extcount == 1) {\n\t\t\t\t/*\n\t\t\t\t * none extension like .jpg or something else\n\t\t\t\t *\n\t\t\t\t * possible filename = simple-file-without-extension - linux like ok\n\t\t\t\t */\n\t\t\t\t$isForbidden = false;\n\t\t\t} elseif ($extcount == 2) {\n\t\t\t\t/*\n\t\t\t\t * Only one possible extension\n\t\t\t\t *\n\t\t\t\t * possible filename = 1.jpg\n\t\t\t\t * possible filename = admin.uploader.php\n\t\t\t\t * possible filename = .htaccess\n\t\t\t\t * and so on...\n\t\t\t\t */\n\t\t\t\t$check_ext1 = \"\";\n\t\t\t\t$check_ext1 = trim($deeptest [1], \"\\x00..\\x1F\");\n\t\t\t\tif (in_array($check_ext1, $blacklist_extensions)) {\n\t\t\t\t\t$isForbidden = true;\n\t\t\t\t} else {\n\t\t\t\t\t$isForbidden = false;\n\t\t\t\t}\n\t\t\t} elseif ($extcount > 2) {\n\t\t\t\t/*\n\t\t\t\t * Chekc only the last two possible extensions\n\t\t\t\t *\n\t\t\t\t * Hint: OWASP - Unrestricted File Upload\n\t\t\t\t *\n\t\t\t\t * In Apache, a php file might be executed using the\n\t\t\t\t * double extension technique such as \"file.php.jpg\"\n\t\t\t\t * when \".jpg\" is allowed.\n\t\t\t\t *\n\t\t\t\t * possible filename = 1.PhP.jpg\n\t\t\t\t * possible filename = admin.uploader.php.JPg\n\t\t\t\t * and so on...\n\t\t\t\t */\n\t\t\t\t$check_ext1 = \"\";\n\t\t\t\t$check_ext2 = \"\";\n\t\t\t\t$check_ext1 = trim($deeptest [$extcount - 1], \"\\x00..\\x1F\");\n\t\t\t\tif (in_array($check_ext1, $blacklist_extensions)) {\n\t\t\t\t\t$isForbidden = true;\n\t\t\t\t} else {\n\t\t\t\t\t$isForbidden = false;\n\t\t\t\t}\n\t\t\t\t/* Test only if first extension check are not in the blacklist */\n\t\t\t\tif (!$isForbidden) {\n\t\t\t\t\t$check_ext2 = trim($deeptest [$extcount - 2], \"\\x00..\\x1F\");\n\t\t\t\t\tif (in_array($check_ext2, $blacklist_extensions)) {\n\t\t\t\t\t\t$isForbidden = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$isForbidden = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\t * If one blacklisted extension found then\n\t\t\t * return with -1 = An error occurred while trying to upload.\n\t\t\t */\n\t\t\tif ($isForbidden) {\n\t\t\t\t$this->smarty->assign('success', $success ? 1 : -1);\n\t\t\t\tsess_add('admin_uploader_files', $uploaded_files);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * third check extension\n\t\t\t * if someone upload a .php file as .gif, .jpg or .txt\n\t\t\t * if someone upload a .html file as .gif, .jpg or .txt\n\t\t\t *\n\t\t\t * 2019-11-24 - laborix\n\t\t\t */\n\n\t\t\tif (version_compare(PHP_VERSION, '5.3.0') < 0)\n\t\t\t\treturn -1;\n\t\t\tif (!function_exists('finfo_open'))\n\t\t\t\treturn -1;\n\n\t\t\t$finfo = finfo_open(FILEINFO_MIME_TYPE);\n\t\t\t$mime = finfo_file($finfo, $tmp_name);\n\t\t\tfinfo_close($finfo);\n\n\t\t\tif (($mime == \"text/x-php\") || ($mime == \"text/html\")) {\n\t\t\t\t$this->smarty->assign('success', $success ? 1 : -1);\n\t\t\t\tsess_add('admin_uploader_files', $uploaded_files);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t$ext = strtolower(strrchr($name, '.'));\n\n\t\t\tif (in_array($ext, $imgs)) {\n\t\t\t\t$dir = IMAGES_DIR;\n\t\t\t}\n\n\t\t\t$name = sanitize_title(substr($name, 0, -strlen($ext))) . $ext;\n\n\t\t\t$target = \"$dir/$name\";\n\t\t\t@umask(022);\n\t\t\t$success = move_uploaded_file($tmp_name, $target);\n\t\t\t@chmod($target, 0766);\n\n\t\t\t$uploaded_files [] = $name;\n\n\t\t\t// one failure will make $success == false :)\n\t\t\t$success &= $success;\n\t\t}\n\n\t\tif ($uploaded_files) {\n\t\t\t$this->smarty->assign('success', $success ? 1 : -1);\n\t\t\tsess_add('admin_uploader_files', $uploaded_files);\n\t\t}\n\n\t\treturn 1;\n\t}\n\n}\n\n?>\n"], "fixing_code": ["<?php\n\n/**\n * uploader control panel\n *\n * Type:\n * Name:\n * Date:\n * Purpose:\n * Input:\n *\n * @author NoWhereMan <real_nowhereman at users dot sf dot com>\n *        \n */\nclass admin_uploader extends AdminPanel {\n\n\tvar $panelname = 'uploader';\n\n\tvar $actions = array(\n\t\t'default' => true\n\t);\n\n}\n\nclass admin_uploader_default extends AdminPanelAction {\n\n\tvar $events = array(\n\t\t'upload'\n\t);\n\n\tfunction main() {\n\t\tif ($f = sess_remove('admin_uploader_files')) {\n\t\t\t$this->smarty->assign('uploaded_files', $f);\n\t\t}\n\t}\n\n\tfunction onupload() {\n\t\t$success = false;\n\n\t\t/*\n\t\t * first check if user is logged in\n\t\t * to prevent remote admin.uploader.php script execution\n\t\t *\n\t\t * By testing the admin/main.php made the redirect job\n\t\t * By direct URL call PHP throw a visible error -> AdminPanel class not found!\n\t\t *\n\t\t * 2019-11-23 - laborix\n\t\t */\n\t\tif (!user_loggedin()) {\n\t\t\tutils_redirect(\"login.php\");\n\t\t\tdie();\n\t\t}\n\n\t\tif (!file_exists(IMAGES_DIR))\n\t\t\tfs_mkdir(IMAGES_DIR);\n\n\t\tif (!file_exists(ATTACHS_DIR))\n\t\t\tfs_mkdir(ATTACHS_DIR);\n\t\t/*\n\t\t * Blacklist entries from OWASP and\n\t\t * https://stackoverflow.com/questions/4166762/php-image-upload-security-check-list\n\t\t *\n\t\t * 2019-11-23 - laborix\n\t\t */\n\t\t$blacklist_extensions = array(\n\t\t\t'htaccess',\n\t\t\t'pht',\n\t\t\t'phtm',\n\t\t\t'phtml',\n\t\t\t'ph2',\n\t\t\t'ph3',\n\t\t\t'ph4',\n\t\t\t'ph5',\n\t\t\t'ph6',\n\t\t\t'ph7',\n\t\t\t'ph8',\n\t\t\t'php',\n\t\t\t'php2',\n\t\t\t'php3',\n\t\t\t'php4',\n\t\t\t'php5',\n\t\t\t'php6',\n\t\t\t'php7',\n\t\t\t'php8',\n\t\t\t'phps',\n\t\t\t'cgi',\n\t\t\t'exe',\n\t\t\t'pl',\n\t\t\t'asp',\n\t\t\t'aspx',\n\t\t\t'shtml',\n\t\t\t'shtm',\n\t\t\t'fcgi',\n\t\t\t'fpl',\n\t\t\t'jsp',\n\t\t\t'htm',\n\t\t\t'html',\n\t\t\t'wml',\n\t\t\t'svg'\n\t\t);\n\n\t\t$imgs = array(\n\t\t\t'.jpg',\n\t\t\t'.gif',\n\t\t\t'.png',\n\t\t\t'.jpeg'\n\t\t);\n\n\t\t// intentionally\n\t\t// I've not put BMPs\n\n\t\t$uploaded_files = array();\n\t\t$this->smarty->assign('uploaded_files', $uploaded_files);\n\n\t\tforeach ($_FILES [\"upload\"] [\"error\"] as $key => $error) {\n\n\t\t\t// Upload went wrong -> jump to the next file\n\t\t\tif ($error != UPLOAD_ERR_OK) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$tmp_name = $_FILES [\"upload\"] [\"tmp_name\"] [$key];\n\t\t\t$name = $_FILES [\"upload\"] [\"name\"] [$key];\n\n\t\t\t$dir = ATTACHS_DIR;\n\n\t\t\t/*\n\t\t\t * second check extension list\n\t\t\t * https://stackoverflow.com/questions/4166762/php-image-upload-security-check-list\n\t\t\t *\n\t\t\t * 2019-11-24 - laborix\n\t\t\t */\n\n\t\t\t$uploadfilename = strtolower($name);\n\n\t\t\t$isForbidden = false;\n\t\t\t$deeptest = array();\n\t\t\t$extcount = 0;\n\t\t\t$deeptest = explode('.', $uploadfilename);\n\t\t\t$extcount = count($deeptest);\n\n\t\t\tif ($extcount == 1) {\n\t\t\t\t/*\n\t\t\t\t * none extension like .jpg or something else\n\t\t\t\t *\n\t\t\t\t * possible filename = simple-file-without-extension - linux like ok\n\t\t\t\t */\n\t\t\t\t$isForbidden = false;\n\t\t\t} elseif ($extcount == 2) {\n\t\t\t\t/*\n\t\t\t\t * Only one possible extension\n\t\t\t\t *\n\t\t\t\t * possible filename = 1.jpg\n\t\t\t\t * possible filename = admin.uploader.php\n\t\t\t\t * possible filename = .htaccess\n\t\t\t\t * and so on...\n\t\t\t\t */\n\t\t\t\t$check_ext1 = \"\";\n\t\t\t\t$check_ext1 = trim($deeptest [1], \"\\x00..\\x1F\");\n\t\t\t\tif (in_array($check_ext1, $blacklist_extensions)) {\n\t\t\t\t\t$isForbidden = true;\n\t\t\t\t} else {\n\t\t\t\t\t$isForbidden = false;\n\t\t\t\t}\n\t\t\t} elseif ($extcount > 2) {\n\t\t\t\t/*\n\t\t\t\t * Chekc only the last two possible extensions\n\t\t\t\t *\n\t\t\t\t * Hint: OWASP - Unrestricted File Upload\n\t\t\t\t *\n\t\t\t\t * In Apache, a php file might be executed using the\n\t\t\t\t * double extension technique such as \"file.php.jpg\"\n\t\t\t\t * when \".jpg\" is allowed.\n\t\t\t\t *\n\t\t\t\t * possible filename = 1.PhP.jpg\n\t\t\t\t * possible filename = admin.uploader.php.JPg\n\t\t\t\t * and so on...\n\t\t\t\t */\n\t\t\t\t$check_ext1 = \"\";\n\t\t\t\t$check_ext2 = \"\";\n\t\t\t\t$check_ext1 = trim($deeptest [$extcount - 1], \"\\x00..\\x1F\");\n\t\t\t\tif (in_array($check_ext1, $blacklist_extensions)) {\n\t\t\t\t\t$isForbidden = true;\n\t\t\t\t} else {\n\t\t\t\t\t$isForbidden = false;\n\t\t\t\t}\n\t\t\t\t/* Test only if first extension check are not in the blacklist */\n\t\t\t\tif (!$isForbidden) {\n\t\t\t\t\t$check_ext2 = trim($deeptest [$extcount - 2], \"\\x00..\\x1F\");\n\t\t\t\t\tif (in_array($check_ext2, $blacklist_extensions)) {\n\t\t\t\t\t\t$isForbidden = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$isForbidden = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\t * If one blacklisted extension found then\n\t\t\t * return with -1 = An error occurred while trying to upload.\n\t\t\t */\n\t\t\tif ($isForbidden) {\n\t\t\t\t$this->smarty->assign('success', $success ? 1 : -1);\n\t\t\t\tsess_add('admin_uploader_files', $uploaded_files);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * third check extension\n\t\t\t * if someone upload a .php file as .gif, .jpg or .txt\n\t\t\t * if someone upload a .html file as .gif, .jpg or .txt\n\t\t\t *\n\t\t\t * 2019-11-24 - laborix\n\t\t\t */\n\n\t\t\tif (version_compare(PHP_VERSION, '5.3.0') < 0)\n\t\t\t\treturn -1;\n\t\t\tif (!function_exists('finfo_open'))\n\t\t\t\treturn -1;\n\n\t\t\t$finfo = finfo_open(FILEINFO_MIME_TYPE);\n\t\t\t$mime = finfo_file($finfo, $tmp_name);\n\t\t\tfinfo_close($finfo);\n\n\t\t\tif (($mime == \"text/x-php\") || ($mime == \"text/html\")) {\n\t\t\t\t$this->smarty->assign('success', $success ? 1 : -1);\n\t\t\t\tsess_add('admin_uploader_files', $uploaded_files);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t$ext = strtolower(strrchr($name, '.'));\n\n\t\t\tif (in_array($ext, $imgs)) {\n\t\t\t\t$dir = IMAGES_DIR;\n\t\t\t}\n\n\t\t\t$name = sanitize_title(substr($name, 0, -strlen($ext))) . $ext;\n\n\t\t\t$target = \"$dir/$name\";\n\t\t\t@umask(022);\n\t\t\t$success = move_uploaded_file($tmp_name, $target);\n\t\t\t@chmod($target, 0766);\n\n\t\t\t$uploaded_files [] = $name;\n\n\t\t\t// one failure will make $success == false :)\n\t\t\t$success &= $success;\n\t\t}\n\n\t\tif ($uploaded_files) {\n\t\t\t$this->smarty->assign('success', $success ? 1 : -1);\n\t\t\tsess_add('admin_uploader_files', $uploaded_files);\n\t\t}\n\n\t\treturn 1;\n\t}\n\n}\n\n?>\n"], "filenames": ["admin/panels/uploader/admin.uploader.php"], "buggy_code_start_loc": [98], "buggy_code_end_loc": [99], "fixing_code_start_loc": [98], "fixing_code_end_loc": [100], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository flatpressblog/flatpress prior to 1.3.", "other": {"cve": {"id": "CVE-2022-4605", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-18T14:15:10.103", "lastModified": "2022-12-22T18:49:00.453", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository flatpressblog/flatpress prior to 1.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:flatpress:flatpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.1", "matchCriteriaId": "0B7F86F1-EF82-4C77-8939-18335BDF1537"}]}]}], "references": [{"url": "https://github.com/flatpressblog/flatpress/commit/742f8b04f233e3cc52bed11f79fcc9911faee776", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/df455d44-0dec-470c-b576-8ea86ec5a367", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/flatpressblog/flatpress/commit/742f8b04f233e3cc52bed11f79fcc9911faee776"}}