{"buggy_code": ["# Changelog\n\nFor detailed changes from the prior release, click on the version number, and\nits link will bring up a GitHub listing of changes. Use `git log` on the\ncommand line for details.\n\n## [Unreleased]\n\n## 1.4\n\nJupyterHub 1.4 is a small release, with several enhancements, bug fixes,\nand new configuration options.\n\nThere are no database schema changes requiring migration from 1.3 to 1.4.\n\n1.4 is also the first version to start publishing docker images for arm64.\n\nIn particular, OAuth tokens stored in user cookies,\nused for accessing single-user servers and hub-authenticated services,\nhave changed their expiration from one hour to the expiry of the cookie\nin which they are stored (default: two weeks).\nThis is now also configurable via `JupyterHub.oauth_token_expires_in`.\n\nThe result is that it should be much less likely for auth tokens stored in cookies\nto expire during the lifetime of a server.\n\n### [1.4.2] 2021-06-15\n\n1.4.2 is a small bugfix release for 1.4.\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.4.1...d9860aa98cc537cf685022f81b8f725bfef41304))\n\n#### Bugs fixed\n\n- Fix regression where external services api_token became required [#3531](https://github.com/jupyterhub/jupyterhub/pull/3531) ([@consideRatio](https://github.com/consideRatio))\n- Bug: save_bearer_token (provider.py) passes a float value to the expires_at field (int) [#3484](https://github.com/jupyterhub/jupyterhub/pull/3484) ([@weisdd](https://github.com/weisdd))\n\n#### Maintenance and upkeep improvements\n\n- bump autodoc-traits [#3510](https://github.com/jupyterhub/jupyterhub/pull/3510) ([@minrk](https://github.com/minrk))\n\n#### Documentation improvements\n\n- Fix contributor documentation's link [#3521](https://github.com/jupyterhub/jupyterhub/pull/3521) ([@icankeep](https://github.com/icankeep))\n- Fix typo [#3494](https://github.com/jupyterhub/jupyterhub/pull/3494) ([@davidbrochart](https://github.com/davidbrochart))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2021-05-12&to=2021-07-15&type=c))\n\n[@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2021-05-12..2021-07-15&type=Issues) | [@davidbrochart](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adavidbrochart+updated%3A2021-05-12..2021-07-15&type=Issues) | [@icankeep](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aicankeep+updated%3A2021-05-12..2021-07-15&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2021-05-12..2021-07-15&type=Issues) | [@weisdd](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aweisdd+updated%3A2021-05-12..2021-07-15&type=Issues)\n\n### [1.4.1] 2021-05-12\n\n1.4.1 is a small bugfix release for 1.4.\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.4.0...1.4.1))\n\n#### Enhancements made\n\n#### Bugs fixed\n\n- define Spawner.delete_forever on base Spawner [#3454](https://github.com/jupyterhub/jupyterhub/pull/3454) ([@minrk](https://github.com/minrk))\n- patch base handlers from both jupyter_server and notebook [#3437](https://github.com/jupyterhub/jupyterhub/pull/3437) ([@minrk](https://github.com/minrk))\n\n#### Maintenance and upkeep improvements\n\n- ci: fix typo in environment variable [#3457](https://github.com/jupyterhub/jupyterhub/pull/3457) ([@consideRatio](https://github.com/consideRatio))\n- avoid re-using asyncio.Locks across event loops [#3456](https://github.com/jupyterhub/jupyterhub/pull/3456) ([@minrk](https://github.com/minrk))\n- ci: github workflow security, pin action to sha etc [#3436](https://github.com/jupyterhub/jupyterhub/pull/3436) ([@consideRatio](https://github.com/consideRatio))\n\n#### Documentation improvements\n\n- Fix documentation [#3452](https://github.com/jupyterhub/jupyterhub/pull/3452) ([@davidbrochart](https://github.com/davidbrochart))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2021-04-19&to=2021-05-12&type=c))\n\n[@0mar](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A0mar+updated%3A2021-04-19..2021-05-12&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2021-04-19..2021-05-12&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2021-04-19..2021-05-12&type=Issues) | [@danlester](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adanlester+updated%3A2021-04-19..2021-05-12&type=Issues) | [@davidbrochart](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adavidbrochart+updated%3A2021-04-19..2021-05-12&type=Issues) | [@IvanaH8](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AIvanaH8+updated%3A2021-04-19..2021-05-12&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2021-04-19..2021-05-12&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2021-04-19..2021-05-12&type=Issues) | [@naatebarber](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Anaatebarber+updated%3A2021-04-19..2021-05-12&type=Issues) | [@OrnithOrtion](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AOrnithOrtion+updated%3A2021-04-19..2021-05-12&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2021-04-19..2021-05-12&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2021-04-19..2021-05-12&type=Issues)\n\n### [1.4.0] 2021-04-19\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.3.0...1.4.0))\n\n#### New features added\n\n- Support Proxy.extra_routes [#3430](https://github.com/jupyterhub/jupyterhub/pull/3430) ([@yuvipanda](https://github.com/yuvipanda))\n- login-template: Add a \"login_container\" block inside the div-container. [#3422](https://github.com/jupyterhub/jupyterhub/pull/3422) ([@olifre](https://github.com/olifre))\n- Docker arm64 builds [#3421](https://github.com/jupyterhub/jupyterhub/pull/3421) ([@manics](https://github.com/manics))\n- make oauth token expiry configurable [#3411](https://github.com/jupyterhub/jupyterhub/pull/3411) ([@minrk](https://github.com/minrk))\n- allow the hub to not be the default route [#3373](https://github.com/jupyterhub/jupyterhub/pull/3373) ([@minrk](https://github.com/minrk))\n- Allow customization of service menu via templates [#3345](https://github.com/jupyterhub/jupyterhub/pull/3345) ([@stv0g](https://github.com/stv0g))\n- Add Spawner.delete_forever [#3337](https://github.com/jupyterhub/jupyterhub/pull/3337) ([@nsshah1288](https://github.com/nsshah1288))\n- Allow to set spawner-specific hub connect URL [#3326](https://github.com/jupyterhub/jupyterhub/pull/3326) ([@dtaniwaki](https://github.com/dtaniwaki))\n- Make Authenticator Custom HTML Flexible [#3315](https://github.com/jupyterhub/jupyterhub/pull/3315) ([@dtaniwaki](https://github.com/dtaniwaki))\n\n#### Enhancements made\n\n- Log the exception raised in Spawner.post_stop_hook instead of raising it [#3418](https://github.com/jupyterhub/jupyterhub/pull/3418) ([@jiajunjie](https://github.com/jiajunjie))\n- Don't delete all oauth clients on startup [#3407](https://github.com/jupyterhub/jupyterhub/pull/3407) ([@yuvipanda](https://github.com/yuvipanda))\n- Use 'secrets' module to generate secrets [#3394](https://github.com/jupyterhub/jupyterhub/pull/3394) ([@yuvipanda](https://github.com/yuvipanda))\n- Allow cookie_secret to be set to a hexadecimal string [#3343](https://github.com/jupyterhub/jupyterhub/pull/3343) ([@consideRatio](https://github.com/consideRatio))\n- Clear tornado xsrf cookie on logout [#3341](https://github.com/jupyterhub/jupyterhub/pull/3341) ([@dtaniwaki](https://github.com/dtaniwaki))\n- always log slow requests at least at info-level [#3338](https://github.com/jupyterhub/jupyterhub/pull/3338) ([@minrk](https://github.com/minrk))\n\n#### Bugs fixed\n\n- always start redirect count at 1 when redirecting /hub/user/:name -> /user/:name [#3377](https://github.com/jupyterhub/jupyterhub/pull/3377) ([@minrk](https://github.com/minrk))\n- Always raise on failed token creation [#3370](https://github.com/jupyterhub/jupyterhub/pull/3370) ([@minrk](https://github.com/minrk))\n- make_singleuser_app: patch-in HubAuthenticatedHandler at lower priority [#3347](https://github.com/jupyterhub/jupyterhub/pull/3347) ([@minrk](https://github.com/minrk))\n- Fix pagination with named servers [#3335](https://github.com/jupyterhub/jupyterhub/pull/3335) ([@rcthomas](https://github.com/rcthomas))\n\n#### Maintenance and upkeep improvements\n\n- typos in onbuild, demo images for push [#3429](https://github.com/jupyterhub/jupyterhub/pull/3429) ([@minrk](https://github.com/minrk))\n- Disable docker jupyterhub-demo arm64 build [#3425](https://github.com/jupyterhub/jupyterhub/pull/3425) ([@manics](https://github.com/manics))\n- Docker arm64 builds [#3421](https://github.com/jupyterhub/jupyterhub/pull/3421) ([@manics](https://github.com/manics))\n- avoid deprecated engine.table_names [#3392](https://github.com/jupyterhub/jupyterhub/pull/3392) ([@minrk](https://github.com/minrk))\n- alpine dockerfile: avoid compilation by getting some deps from apk [#3386](https://github.com/jupyterhub/jupyterhub/pull/3386) ([@minrk](https://github.com/minrk))\n- Fix sqlachemy.interfaces.PoolListener deprecation for tests [#3383](https://github.com/jupyterhub/jupyterhub/pull/3383) ([@IvanaH8](https://github.com/IvanaH8))\n- Update pre-commit hooks versions [#3362](https://github.com/jupyterhub/jupyterhub/pull/3362) ([@consideRatio](https://github.com/consideRatio))\n- add (and run) prettier pre-commit hook [#3360](https://github.com/jupyterhub/jupyterhub/pull/3360) ([@minrk](https://github.com/minrk))\n- move get_custom_html to base Authenticator class [#3359](https://github.com/jupyterhub/jupyterhub/pull/3359) ([@minrk](https://github.com/minrk))\n- publish release outputs as artifacts [#3349](https://github.com/jupyterhub/jupyterhub/pull/3349) ([@minrk](https://github.com/minrk))\n- [TST] Do not implicitly create users in auth_header [#3344](https://github.com/jupyterhub/jupyterhub/pull/3344) ([@minrk](https://github.com/minrk))\n- specify minimum alembic 1.4 [#3339](https://github.com/jupyterhub/jupyterhub/pull/3339) ([@minrk](https://github.com/minrk))\n- ci: github actions, allow for manual test runs and fix badge in readme [#3324](https://github.com/jupyterhub/jupyterhub/pull/3324) ([@consideRatio](https://github.com/consideRatio))\n- publish releases from github actions [#3305](https://github.com/jupyterhub/jupyterhub/pull/3305) ([@minrk](https://github.com/minrk))\n\n#### Documentation improvements\n\n- DOC: Conform to numpydoc. [#3428](https://github.com/jupyterhub/jupyterhub/pull/3428) ([@Carreau](https://github.com/Carreau))\n- Fix link to jupyterhub/jupyterhub-the-hard-way [#3417](https://github.com/jupyterhub/jupyterhub/pull/3417) ([@manics](https://github.com/manics))\n- Changelog for 1.4 [#3415](https://github.com/jupyterhub/jupyterhub/pull/3415) ([@minrk](https://github.com/minrk))\n- Fastapi example [#3403](https://github.com/jupyterhub/jupyterhub/pull/3403) ([@kafonek](https://github.com/kafonek))\n- Added Azure AD as a supported authenticator. [#3401](https://github.com/jupyterhub/jupyterhub/pull/3401) ([@maxshowarth](https://github.com/maxshowarth))\n- Remove the hard way guide [#3375](https://github.com/jupyterhub/jupyterhub/pull/3375) ([@manics](https://github.com/manics))\n- :memo: Fix telemetry section [#3333](https://github.com/jupyterhub/jupyterhub/pull/3333) ([@trallard](https://github.com/trallard))\n- Fix the help related to the proxy check [#3332](https://github.com/jupyterhub/jupyterhub/pull/3332) ([@jiajunjie](https://github.com/jiajunjie))\n- Mention Jupyter Server as optional single-user backend in documentation [#3329](https://github.com/jupyterhub/jupyterhub/pull/3329) ([@Zsailer](https://github.com/Zsailer))\n- Fix mixup in comment regarding the sync parameter [#3325](https://github.com/jupyterhub/jupyterhub/pull/3325) ([@andrewisplinghoff](https://github.com/andrewisplinghoff))\n- docs: fix simple typo, funciton -> function [#3314](https://github.com/jupyterhub/jupyterhub/pull/3314) ([@timgates42](https://github.com/timgates42))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-12-11&to=2021-04-19&type=c))\n\n[@00Kai0](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A00Kai0+updated%3A2020-12-11..2021-04-19&type=Issues) | [@8rV1n](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A8rV1n+updated%3A2020-12-11..2021-04-19&type=Issues) | [@akhilputhiry](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aakhilputhiry+updated%3A2020-12-11..2021-04-19&type=Issues) | [@alexal](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexal+updated%3A2020-12-11..2021-04-19&type=Issues) | [@analytically](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aanalytically+updated%3A2020-12-11..2021-04-19&type=Issues) | [@andreamazzoni](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aandreamazzoni+updated%3A2020-12-11..2021-04-19&type=Issues) | [@andrewisplinghoff](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aandrewisplinghoff+updated%3A2020-12-11..2021-04-19&type=Issues) | [@BertR](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ABertR+updated%3A2020-12-11..2021-04-19&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2020-12-11..2021-04-19&type=Issues) | [@bitnik](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abitnik+updated%3A2020-12-11..2021-04-19&type=Issues) | [@bollwyvl](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abollwyvl+updated%3A2020-12-11..2021-04-19&type=Issues) | [@carluri](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acarluri+updated%3A2020-12-11..2021-04-19&type=Issues) | [@Carreau](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ACarreau+updated%3A2020-12-11..2021-04-19&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2020-12-11..2021-04-19&type=Issues) | [@davidedelvento](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adavidedelvento+updated%3A2020-12-11..2021-04-19&type=Issues) | [@dhirschfeld](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adhirschfeld+updated%3A2020-12-11..2021-04-19&type=Issues) | [@dmpe](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Admpe+updated%3A2020-12-11..2021-04-19&type=Issues) | [@dsblank](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adsblank+updated%3A2020-12-11..2021-04-19&type=Issues) | [@dtaniwaki](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adtaniwaki+updated%3A2020-12-11..2021-04-19&type=Issues) | [@echarles](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aecharles+updated%3A2020-12-11..2021-04-19&type=Issues) | [@elgalu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aelgalu+updated%3A2020-12-11..2021-04-19&type=Issues) | [@eran-pinhas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aeran-pinhas+updated%3A2020-12-11..2021-04-19&type=Issues) | [@gaebor](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Agaebor+updated%3A2020-12-11..2021-04-19&type=Issues) | [@GeorgianaElena](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AGeorgianaElena+updated%3A2020-12-11..2021-04-19&type=Issues) | [@gsemet](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Agsemet+updated%3A2020-12-11..2021-04-19&type=Issues) | [@gweis](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Agweis+updated%3A2020-12-11..2021-04-19&type=Issues) | [@hynek2001](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ahynek2001+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ianabc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aianabc+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ibre5041](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aibre5041+updated%3A2020-12-11..2021-04-19&type=Issues) | [@IvanaH8](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AIvanaH8+updated%3A2020-12-11..2021-04-19&type=Issues) | [@jhegedus42](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajhegedus42+updated%3A2020-12-11..2021-04-19&type=Issues) | [@jhermann](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajhermann+updated%3A2020-12-11..2021-04-19&type=Issues) | [@jiajunjie](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajiajunjie+updated%3A2020-12-11..2021-04-19&type=Issues) | [@jtlz2](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajtlz2+updated%3A2020-12-11..2021-04-19&type=Issues) | [@kafonek](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akafonek+updated%3A2020-12-11..2021-04-19&type=Issues) | [@katsar0v](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akatsar0v+updated%3A2020-12-11..2021-04-19&type=Issues) | [@kinow](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akinow+updated%3A2020-12-11..2021-04-19&type=Issues) | [@krinsman](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akrinsman+updated%3A2020-12-11..2021-04-19&type=Issues) | [@laurensdv](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alaurensdv+updated%3A2020-12-11..2021-04-19&type=Issues) | [@lits789](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alits789+updated%3A2020-12-11..2021-04-19&type=Issues) | [@m-alekseev](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Am-alekseev+updated%3A2020-12-11..2021-04-19&type=Issues) | [@mabbasi90](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amabbasi90+updated%3A2020-12-11..2021-04-19&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2020-12-11..2021-04-19&type=Issues) | [@manniche](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanniche+updated%3A2020-12-11..2021-04-19&type=Issues) | [@maxshowarth](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amaxshowarth+updated%3A2020-12-11..2021-04-19&type=Issues) | [@mdivk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amdivk+updated%3A2020-12-11..2021-04-19&type=Issues) | [@meeseeksmachine](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ameeseeksmachine+updated%3A2020-12-11..2021-04-19&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2020-12-11..2021-04-19&type=Issues) | [@mogthesprog](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amogthesprog+updated%3A2020-12-11..2021-04-19&type=Issues) | [@mriedem](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amriedem+updated%3A2020-12-11..2021-04-19&type=Issues) | [@nsshah1288](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ansshah1288+updated%3A2020-12-11..2021-04-19&type=Issues) | [@olifre](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aolifre+updated%3A2020-12-11..2021-04-19&type=Issues) | [@PandaWhoCodes](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3APandaWhoCodes+updated%3A2020-12-11..2021-04-19&type=Issues) | [@pawsaw](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Apawsaw+updated%3A2020-12-11..2021-04-19&type=Issues) | [@phozzy](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aphozzy+updated%3A2020-12-11..2021-04-19&type=Issues) | [@playermanny2](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aplayermanny2+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rabsr](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arabsr+updated%3A2020-12-11..2021-04-19&type=Issues) | [@randy3k](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arandy3k+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rawrgulmuffins](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arawrgulmuffins+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rcthomas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arcthomas+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rebeca-maia](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arebeca-maia+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rebenkoy](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arebenkoy+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rkdarst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkdarst+updated%3A2020-12-11..2021-04-19&type=Issues) | [@robnagler](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arobnagler+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ronaldpetty](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aronaldpetty+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ryanlovett](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aryanlovett+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ryogesh](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aryogesh+updated%3A2020-12-11..2021-04-19&type=Issues) | [@sbailey-auro](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asbailey-auro+updated%3A2020-12-11..2021-04-19&type=Issues) | [@sigurdurb](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asigurdurb+updated%3A2020-12-11..2021-04-19&type=Issues) | [@SivaAccionLabs](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ASivaAccionLabs+updated%3A2020-12-11..2021-04-19&type=Issues) | [@sougou](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asougou+updated%3A2020-12-11..2021-04-19&type=Issues) | [@stv0g](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astv0g+updated%3A2020-12-11..2021-04-19&type=Issues) | [@sudi007](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asudi007+updated%3A2020-12-11..2021-04-19&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2020-12-11..2021-04-19&type=Issues) | [@tathagata](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atathagata+updated%3A2020-12-11..2021-04-19&type=Issues) | [@timgates42](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atimgates42+updated%3A2020-12-11..2021-04-19&type=Issues) | [@trallard](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atrallard+updated%3A2020-12-11..2021-04-19&type=Issues) | [@vlizanae](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Avlizanae+updated%3A2020-12-11..2021-04-19&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2020-12-11..2021-04-19&type=Issues) | [@whitespaceninja](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awhitespaceninja+updated%3A2020-12-11..2021-04-19&type=Issues) | [@whlteXbread](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AwhlteXbread+updated%3A2020-12-11..2021-04-19&type=Issues) | [@willingc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awillingc+updated%3A2020-12-11..2021-04-19&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayuvipanda+updated%3A2020-12-11..2021-04-19&type=Issues) | [@Zsailer](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AZsailer+updated%3A2020-12-11..2021-04-19&type=Issues)\n\n### 1.3\n\nJupyterHub 1.3 is a small feature release. Highlights include:\n\n- Require Python >=3.6 (jupyterhub 1.2 is the last release to support 3.5)\n- Add a `?state=` filter for getting user list, allowing much quicker responses\n  when retrieving a small fraction of users.\n  `state` can be `active`, `inactive`, or `ready`.\n- prometheus metrics now include a `jupyterhub_` prefix,\n  so deployments may need to update their grafana charts to match.\n- page templates can now be [async](https://jinja.palletsprojects.com/en/2.11.x/api/#async-support)!\n\n### [1.3.0]\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.2.1...1.3.0))\n\n#### Enhancements made\n\n- allow services to call /api/user to identify themselves [#3293](https://github.com/jupyterhub/jupyterhub/pull/3293) ([@minrk](https://github.com/minrk))\n- Add optional user agreement to login screen [#3264](https://github.com/jupyterhub/jupyterhub/pull/3264) ([@tlvu](https://github.com/tlvu))\n- [Metrics] Add prefix to prometheus metrics to group all jupyterhub metrics [#3243](https://github.com/jupyterhub/jupyterhub/pull/3243) ([@agp8x](https://github.com/agp8x))\n- Allow options_from_form to be configurable [#3225](https://github.com/jupyterhub/jupyterhub/pull/3225) ([@cbanek](https://github.com/cbanek))\n- add ?state= filter for GET /users [#3177](https://github.com/jupyterhub/jupyterhub/pull/3177) ([@minrk](https://github.com/minrk))\n- Enable async support in jinja2 templates [#3176](https://github.com/jupyterhub/jupyterhub/pull/3176) ([@yuvipanda](https://github.com/yuvipanda))\n\n#### Bugs fixed\n\n- fix increasing pagination limits [#3294](https://github.com/jupyterhub/jupyterhub/pull/3294) ([@minrk](https://github.com/minrk))\n- fix and test TOTAL_USERS count [#3289](https://github.com/jupyterhub/jupyterhub/pull/3289) ([@minrk](https://github.com/minrk))\n- Fix asyncio deprecation asyncio.Task.all_tasks [#3298](https://github.com/jupyterhub/jupyterhub/pull/3298) ([@coffeebenzene](https://github.com/coffeebenzene))\n\n#### Maintenance and upkeep improvements\n\n- bump oldest-required prometheus-client [#3292](https://github.com/jupyterhub/jupyterhub/pull/3292) ([@minrk](https://github.com/minrk))\n- bump black pre-commit hook to 20.8 [#3287](https://github.com/jupyterhub/jupyterhub/pull/3287) ([@minrk](https://github.com/minrk))\n- Test internal_ssl separately [#3266](https://github.com/jupyterhub/jupyterhub/pull/3266) ([@0mar](https://github.com/0mar))\n- wait for pending spawns in spawn_form_admin_access [#3253](https://github.com/jupyterhub/jupyterhub/pull/3253) ([@minrk](https://github.com/minrk))\n- Assume py36 and remove @gen.coroutine etc. [#3242](https://github.com/jupyterhub/jupyterhub/pull/3242) ([@consideRatio](https://github.com/consideRatio))\n\n#### Documentation improvements\n\n- Fix curl in jupyter announcements [#3286](https://github.com/jupyterhub/jupyterhub/pull/3286) ([@Sangarshanan](https://github.com/Sangarshanan))\n- CONTRIBUTING: Fix contributor guide URL [#3281](https://github.com/jupyterhub/jupyterhub/pull/3281) ([@olifre](https://github.com/olifre))\n- Update services.md [#3267](https://github.com/jupyterhub/jupyterhub/pull/3267) ([@slemonide](https://github.com/slemonide))\n- [Docs] Fix https reverse proxy redirect issues [#3244](https://github.com/jupyterhub/jupyterhub/pull/3244) ([@mhwasil](https://github.com/mhwasil))\n- Fixed idle-culler references. [#3300](https://github.com/jupyterhub/jupyterhub/pull/3300) ([@mxjeff](https://github.com/mxjeff))\n- Remove the extra parenthesis in service.md [#3303](https://github.com/jupyterhub/jupyterhub/pull/3303) ([@Sangarshanan](https://github.com/Sangarshanan))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-10-30&to=2020-12-11&type=c))\n\n[@0mar](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A0mar+updated%3A2020-10-30..2020-12-11&type=Issues) | [@agp8x](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aagp8x+updated%3A2020-10-30..2020-12-11&type=Issues) | [@alexweav](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexweav+updated%3A2020-10-30..2020-12-11&type=Issues) | [@belfhi](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abelfhi+updated%3A2020-10-30..2020-12-11&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2020-10-30..2020-12-11&type=Issues) | [@cbanek](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acbanek+updated%3A2020-10-30..2020-12-11&type=Issues) | [@cmd-ntrf](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acmd-ntrf+updated%3A2020-10-30..2020-12-11&type=Issues) | [@coffeebenzene](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acoffeebenzene+updated%3A2020-10-30..2020-12-11&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2020-10-30..2020-12-11&type=Issues) | [@danlester](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adanlester+updated%3A2020-10-30..2020-12-11&type=Issues) | [@fcollonval](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Afcollonval+updated%3A2020-10-30..2020-12-11&type=Issues) | [@GeorgianaElena](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AGeorgianaElena+updated%3A2020-10-30..2020-12-11&type=Issues) | [@ianabc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aianabc+updated%3A2020-10-30..2020-12-11&type=Issues) | [@IvanaH8](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AIvanaH8+updated%3A2020-10-30..2020-12-11&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2020-10-30..2020-12-11&type=Issues) | [@meeseeksmachine](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ameeseeksmachine+updated%3A2020-10-30..2020-12-11&type=Issues) | [@mhwasil](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amhwasil+updated%3A2020-10-30..2020-12-11&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2020-10-30..2020-12-11&type=Issues) | [@mriedem](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amriedem+updated%3A2020-10-30..2020-12-11&type=Issues) | [@mxjeff](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amxjeff+updated%3A2020-10-30..2020-12-11&type=Issues) | [@olifre](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aolifre+updated%3A2020-10-30..2020-12-11&type=Issues) | [@rcthomas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arcthomas+updated%3A2020-10-30..2020-12-11&type=Issues) | [@rgbkrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Argbkrk+updated%3A2020-10-30..2020-12-11&type=Issues) | [@rkdarst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkdarst+updated%3A2020-10-30..2020-12-11&type=Issues) | [@Sangarshanan](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ASangarshanan+updated%3A2020-10-30..2020-12-11&type=Issues) | [@slemonide](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aslemonide+updated%3A2020-10-30..2020-12-11&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2020-10-30..2020-12-11&type=Issues) | [@tlvu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atlvu+updated%3A2020-10-30..2020-12-11&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2020-10-30..2020-12-11&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayuvipanda+updated%3A2020-10-30..2020-12-11&type=Issues)\n\n## 1.2\n\n### [1.2.2] 2020-11-27\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.2.1...41f291c0c973223c33a6aa1fa86d5d57f297be78))\n\n#### Enhancements made\n\n- Standardize \"Sign in\" capitalization on the login page [#3252](https://github.com/jupyterhub/jupyterhub/pull/3252) ([@cmd-ntrf](https://github.com/cmd-ntrf))\n\n#### Bugs fixed\n\n- Fix RootHandler when default_url is a callable [#3265](https://github.com/jupyterhub/jupyterhub/pull/3265) ([@danlester](https://github.com/danlester))\n- Only preserve params when ?next= is unspecified [#3261](https://github.com/jupyterhub/jupyterhub/pull/3261) ([@minrk](https://github.com/minrk))\n- \\[Windows\\] Improve robustness when detecting and closing existing proxy processes [#3237](https://github.com/jupyterhub/jupyterhub/pull/3237) ([@alexweav](https://github.com/alexweav))\n\n#### Maintenance and upkeep improvements\n\n- Environment marker on pamela [#3255](https://github.com/jupyterhub/jupyterhub/pull/3255) ([@fcollonval](https://github.com/fcollonval))\n- remove push-branch conditions for CI [#3250](https://github.com/jupyterhub/jupyterhub/pull/3250) ([@minrk](https://github.com/minrk))\n- Migrate from travis to GitHub actions [#3246](https://github.com/jupyterhub/jupyterhub/pull/3246) ([@consideRatio](https://github.com/consideRatio))\n\n#### Documentation improvements\n\n- Update services-basics.md to use jupyterhub_idle_culler [#3257](https://github.com/jupyterhub/jupyterhub/pull/3257) ([@manics](https://github.com/manics))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-10-30&to=2020-11-27&type=c))\n\n[@alexweav](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexweav+updated%3A2020-10-30..2020-11-27&type=Issues) | [@belfhi](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abelfhi+updated%3A2020-10-30..2020-11-27&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2020-10-30..2020-11-27&type=Issues) | [@cmd-ntrf](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acmd-ntrf+updated%3A2020-10-30..2020-11-27&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2020-10-30..2020-11-27&type=Issues) | [@danlester](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adanlester+updated%3A2020-10-30..2020-11-27&type=Issues) | [@fcollonval](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Afcollonval+updated%3A2020-10-30..2020-11-27&type=Issues) | [@GeorgianaElena](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AGeorgianaElena+updated%3A2020-10-30..2020-11-27&type=Issues) | [@ianabc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aianabc+updated%3A2020-10-30..2020-11-27&type=Issues) | [@IvanaH8](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AIvanaH8+updated%3A2020-10-30..2020-11-27&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2020-10-30..2020-11-27&type=Issues) | [@meeseeksmachine](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ameeseeksmachine+updated%3A2020-10-30..2020-11-27&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2020-10-30..2020-11-27&type=Issues) | [@mriedem](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amriedem+updated%3A2020-10-30..2020-11-27&type=Issues) | [@olifre](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aolifre+updated%3A2020-10-30..2020-11-27&type=Issues) | [@rcthomas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arcthomas+updated%3A2020-10-30..2020-11-27&type=Issues) | [@rgbkrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Argbkrk+updated%3A2020-10-30..2020-11-27&type=Issues) | [@rkdarst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkdarst+updated%3A2020-10-30..2020-11-27&type=Issues) | [@slemonide](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aslemonide+updated%3A2020-10-30..2020-11-27&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2020-10-30..2020-11-27&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2020-10-30..2020-11-27&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayuvipanda+updated%3A2020-10-30..2020-11-27&type=Issues)\n\n### [1.2.1] 2020-10-30\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.2.0...1.2.1))\n\n#### Bugs fixed\n\n- JupyterHub services' oauth_no_confirm configuration regression in 1.2.0 [#3234](https://github.com/jupyterhub/jupyterhub/pull/3234) ([@bitnik](https://github.com/bitnik))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-10-29&to=2020-10-30&type=c))\n\n[@bitnik](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abitnik+updated%3A2020-10-29..2020-10-30&type=Issues)\n\n### [1.2.0] 2020-10-29\n\nJupyterHub 1.2 is an incremental release with lots of small improvements.\nIt is unlikely that users will have to change much to upgrade,\nbut lots of new things are possible and/or better!\n\nThere are no database schema changes requiring migration from 1.1 to 1.2.\n\nHighlights:\n\n- Deprecate black/whitelist configuration fields in favor of more inclusive blocked/allowed language. For example: `c.Authenticator.allowed_users = {'user', ...}`\n- More configuration of page templates and service display\n- Pagination of the admin page improving performance with large numbers of users\n- Improved control of user redirect\n- Support for [jupyter-server](https://jupyter-server.readthedocs.io/en/latest/)-based single-user servers, such as [Voil\u00e0](https://voila-gallery.org) and latest JupyterLab.\n- Lots more improvements to documentation, HTML pages, and customizations\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.1.0...1.2.0))\n\n#### Enhancements made\n\n- make pagination configurable [#3229](https://github.com/jupyterhub/jupyterhub/pull/3229) ([@minrk](https://github.com/minrk))\n- Make api_request to CHP's REST API more reliable [#3223](https://github.com/jupyterhub/jupyterhub/pull/3223) ([@consideRatio](https://github.com/consideRatio))\n- Control service display [#3160](https://github.com/jupyterhub/jupyterhub/pull/3160) ([@rcthomas](https://github.com/rcthomas))\n- Add a footer block + wrap the admin footer in this block [#3136](https://github.com/jupyterhub/jupyterhub/pull/3136) ([@pabepadu](https://github.com/pabepadu))\n- Allow JupyterHub.default_url to be a callable [#3133](https://github.com/jupyterhub/jupyterhub/pull/3133) ([@danlester](https://github.com/danlester))\n- Allow head requests for the health endpoint [#3131](https://github.com/jupyterhub/jupyterhub/pull/3131) ([@rkevin-arch](https://github.com/rkevin-arch))\n- Hide hamburger button menu in mobile/responsive mode and fix other minor issues [#3103](https://github.com/jupyterhub/jupyterhub/pull/3103) ([@kinow](https://github.com/kinow))\n- build jupyterhub/jupyterhub-demo image on docker hub [#3083](https://github.com/jupyterhub/jupyterhub/pull/3083) ([@minrk](https://github.com/minrk))\n- Add JupyterHub Demo docker image [#3059](https://github.com/jupyterhub/jupyterhub/pull/3059) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Warn if both bind_url and ip/port/base_url are set [#3057](https://github.com/jupyterhub/jupyterhub/pull/3057) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- UI Feedback on Submit [#3028](https://github.com/jupyterhub/jupyterhub/pull/3028) ([@possiblyMikeB](https://github.com/possiblyMikeB))\n- Support kubespawner running on a IPv6 only cluster [#3020](https://github.com/jupyterhub/jupyterhub/pull/3020) ([@stv0g](https://github.com/stv0g))\n- Spawn with options passed in query arguments to /spawn [#3013](https://github.com/jupyterhub/jupyterhub/pull/3013) ([@twalcari](https://github.com/twalcari))\n- SpawnHandler POST with user form options displays the spawn-pending page [#2978](https://github.com/jupyterhub/jupyterhub/pull/2978) ([@danlester](https://github.com/danlester))\n- Start named servers by pressing the Enter key [#2960](https://github.com/jupyterhub/jupyterhub/pull/2960) ([@jtpio](https://github.com/jtpio))\n- Keep the URL fragments after spawning an application [#2952](https://github.com/jupyterhub/jupyterhub/pull/2952) ([@kinow](https://github.com/kinow))\n- Allow implicit spawn via javascript redirect [#2941](https://github.com/jupyterhub/jupyterhub/pull/2941) ([@minrk](https://github.com/minrk))\n- make init_spawners check O(running servers) not O(total users) [#2936](https://github.com/jupyterhub/jupyterhub/pull/2936) ([@minrk](https://github.com/minrk))\n- Add favicon to the base page template [#2930](https://github.com/jupyterhub/jupyterhub/pull/2930) ([@JohnPaton](https://github.com/JohnPaton))\n- Adding pagination in the admin panel [#2929](https://github.com/jupyterhub/jupyterhub/pull/2929) ([@cbjuan](https://github.com/cbjuan))\n- Generate prometheus metrics docs [#2891](https://github.com/jupyterhub/jupyterhub/pull/2891) ([@rajat404](https://github.com/rajat404))\n- Add support for Jupyter Server [#2601](https://github.com/jupyterhub/jupyterhub/pull/2601) ([@yuvipanda](https://github.com/yuvipanda))\n\n#### Bugs fixed\n\n- Fix #2284 must be sent from authorization page [#3219](https://github.com/jupyterhub/jupyterhub/pull/3219) ([@elgalu](https://github.com/elgalu))\n- avoid specifying default_value=None in Command traits [#3208](https://github.com/jupyterhub/jupyterhub/pull/3208) ([@minrk](https://github.com/minrk))\n- Prevent OverflowErrors in exponential_backoff() [#3204](https://github.com/jupyterhub/jupyterhub/pull/3204) ([@kreuzert](https://github.com/kreuzert))\n- update prometheus metrics for server spawn when it fails with exception [#3150](https://github.com/jupyterhub/jupyterhub/pull/3150) ([@yhal-nesi](https://github.com/yhal-nesi))\n- jupyterhub/utils: Load system default CA certificates in make_ssl_context [#3140](https://github.com/jupyterhub/jupyterhub/pull/3140) ([@chancez](https://github.com/chancez))\n- admin page sorts on spawner last_activity instead of user last_activity [#3137](https://github.com/jupyterhub/jupyterhub/pull/3137) ([@lydian](https://github.com/lydian))\n- Fix the services dropdown on the admin page [#3132](https://github.com/jupyterhub/jupyterhub/pull/3132) ([@pabepadu](https://github.com/pabepadu))\n- Don't log a warning when slow_spawn_timeout is disabled [#3127](https://github.com/jupyterhub/jupyterhub/pull/3127) ([@mriedem](https://github.com/mriedem))\n- app.py: Work around incompatibility between Tornado 6 and asyncio proactor event loop in python 3.8 on Windows [#3123](https://github.com/jupyterhub/jupyterhub/pull/3123) ([@alexweav](https://github.com/alexweav))\n- jupyterhub/user: clear spawner state after post_stop_hook [#3121](https://github.com/jupyterhub/jupyterhub/pull/3121) ([@rkdarst](https://github.com/rkdarst))\n- fix for stopping named server deleting default server and tests [#3109](https://github.com/jupyterhub/jupyterhub/pull/3109) ([@kxiao-fn](https://github.com/kxiao-fn))\n- Hide hamburger button menu in mobile/responsive mode and fix other minor issues [#3103](https://github.com/jupyterhub/jupyterhub/pull/3103) ([@kinow](https://github.com/kinow))\n- Rename Authenticator.white/blacklist to allowed/blocked [#3090](https://github.com/jupyterhub/jupyterhub/pull/3090) ([@minrk](https://github.com/minrk))\n- Include the query string parameters when redirecting to a new URL [#3089](https://github.com/jupyterhub/jupyterhub/pull/3089) ([@kinow](https://github.com/kinow))\n- Make `delete_invalid_users` configurable [#3087](https://github.com/jupyterhub/jupyterhub/pull/3087) ([@fcollonval](https://github.com/fcollonval))\n- Ensure client dependencies build before wheel [#3082](https://github.com/jupyterhub/jupyterhub/pull/3082) ([@diurnalist](https://github.com/diurnalist))\n- make Spawner.environment config highest priority [#3081](https://github.com/jupyterhub/jupyterhub/pull/3081) ([@minrk](https://github.com/minrk))\n- Changing start my server button link to spawn url once server is stopped [#3042](https://github.com/jupyterhub/jupyterhub/pull/3042) ([@rabsr](https://github.com/rabsr))\n- Fix CSS on admin page version listing [#3035](https://github.com/jupyterhub/jupyterhub/pull/3035) ([@vilhelmen](https://github.com/vilhelmen))\n- Fix user_row endblock in admin template [#3015](https://github.com/jupyterhub/jupyterhub/pull/3015) ([@jtpio](https://github.com/jtpio))\n- Fix --generate-config bug when specifying a filename [#2907](https://github.com/jupyterhub/jupyterhub/pull/2907) ([@consideRatio](https://github.com/consideRatio))\n- Handle the protocol when ssl is enabled and log the right URL [#2773](https://github.com/jupyterhub/jupyterhub/pull/2773) ([@kinow](https://github.com/kinow))\n\n#### Maintenance and upkeep improvements\n\n- Update travis-ci badge in README.md [#3232](https://github.com/jupyterhub/jupyterhub/pull/3232) ([@consideRatio](https://github.com/consideRatio))\n- stop building docs on circleci [#3209](https://github.com/jupyterhub/jupyterhub/pull/3209) ([@minrk](https://github.com/minrk))\n- Upgraded Jquery dep [#3174](https://github.com/jupyterhub/jupyterhub/pull/3174) ([@AngelOnFira](https://github.com/AngelOnFira))\n- Don't allow 'python:3.8 + master dependencies' to fail [#3157](https://github.com/jupyterhub/jupyterhub/pull/3157) ([@manics](https://github.com/manics))\n- Update Dockerfile to ubuntu:focal (Python 3.8) [#3156](https://github.com/jupyterhub/jupyterhub/pull/3156) ([@manics](https://github.com/manics))\n- Simplify code of the health check handler [#3149](https://github.com/jupyterhub/jupyterhub/pull/3149) ([@betatim](https://github.com/betatim))\n- Get error description from error key vs error_description key [#3147](https://github.com/jupyterhub/jupyterhub/pull/3147) ([@jgwerner](https://github.com/jgwerner))\n- Implement singleuser with mixins [#3128](https://github.com/jupyterhub/jupyterhub/pull/3128) ([@minrk](https://github.com/minrk))\n- only build tagged versions on docker tags [#3118](https://github.com/jupyterhub/jupyterhub/pull/3118) ([@minrk](https://github.com/minrk))\n- Log slow_stop_timeout when hit like slow_spawn_timeout [#3111](https://github.com/jupyterhub/jupyterhub/pull/3111) ([@mriedem](https://github.com/mriedem))\n- loosen jupyter-telemetry pin [#3102](https://github.com/jupyterhub/jupyterhub/pull/3102) ([@minrk](https://github.com/minrk))\n- Remove old context-less print statement [#3100](https://github.com/jupyterhub/jupyterhub/pull/3100) ([@mriedem](https://github.com/mriedem))\n- Allow `python:3.8 + master dependencies` to fail [#3079](https://github.com/jupyterhub/jupyterhub/pull/3079) ([@manics](https://github.com/manics))\n- Test with some master dependencies. [#3076](https://github.com/jupyterhub/jupyterhub/pull/3076) ([@Carreau](https://github.com/Carreau))\n- synchronize implementation of expiring values [#3072](https://github.com/jupyterhub/jupyterhub/pull/3072) ([@minrk](https://github.com/minrk))\n- More consistent behavior for UserDict.get and `key in UserDict` [#3071](https://github.com/jupyterhub/jupyterhub/pull/3071) ([@minrk](https://github.com/minrk))\n- pin jupyter_telemetry dependency [#3067](https://github.com/jupyterhub/jupyterhub/pull/3067) ([@Zsailer](https://github.com/Zsailer))\n- Use the issue templates from the central repo [#3056](https://github.com/jupyterhub/jupyterhub/pull/3056) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Update links to the black GitHub repository [#3054](https://github.com/jupyterhub/jupyterhub/pull/3054) ([@jtpio](https://github.com/jtpio))\n- Log successful /health requests as debug level [#3047](https://github.com/jupyterhub/jupyterhub/pull/3047) ([@consideRatio](https://github.com/consideRatio))\n- Fix broken test due to BeautifulSoup 4.9.0 behavior change [#3025](https://github.com/jupyterhub/jupyterhub/pull/3025) ([@twalcari](https://github.com/twalcari))\n- Remove unused imports [#3019](https://github.com/jupyterhub/jupyterhub/pull/3019) ([@stv0g](https://github.com/stv0g))\n- Use pip instead of conda for building the docs on RTD [#3010](https://github.com/jupyterhub/jupyterhub/pull/3010) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Avoid redundant logging of jupyterhub version mismatches [#2971](https://github.com/jupyterhub/jupyterhub/pull/2971) ([@mriedem](https://github.com/mriedem))\n- Add .vscode to gitignore [#2959](https://github.com/jupyterhub/jupyterhub/pull/2959) ([@jtpio](https://github.com/jtpio))\n- preserve auth type when logging obfuscated auth header [#2953](https://github.com/jupyterhub/jupyterhub/pull/2953) ([@minrk](https://github.com/minrk))\n- make spawner:server relationship explicitly one to one [#2944](https://github.com/jupyterhub/jupyterhub/pull/2944) ([@minrk](https://github.com/minrk))\n- Add what we need with some margin to Dockerfile's build stage [#2905](https://github.com/jupyterhub/jupyterhub/pull/2905) ([@consideRatio](https://github.com/consideRatio))\n- bump reorder-imports hook [#2899](https://github.com/jupyterhub/jupyterhub/pull/2899) ([@minrk](https://github.com/minrk))\n\n#### Documentation improvements\n\n- Fix typo in documentation [#3226](https://github.com/jupyterhub/jupyterhub/pull/3226) ([@xlotlu](https://github.com/xlotlu))\n- [docs] Remove duplicate line in changelog for 1.1.0 [#3207](https://github.com/jupyterhub/jupyterhub/pull/3207) ([@kinow](https://github.com/kinow))\n- changelog for 1.2.0b1 [#3192](https://github.com/jupyterhub/jupyterhub/pull/3192) ([@consideRatio](https://github.com/consideRatio))\n- Add SELinux configuration for nginx [#3185](https://github.com/jupyterhub/jupyterhub/pull/3185) ([@rainwoodman](https://github.com/rainwoodman))\n- Mention the PAM pitfall on fedora. [#3184](https://github.com/jupyterhub/jupyterhub/pull/3184) ([@rainwoodman](https://github.com/rainwoodman))\n- Added extra documentation for endpoint /users/{name}/servers/{server_name}. [#3159](https://github.com/jupyterhub/jupyterhub/pull/3159) ([@synchronizing](https://github.com/synchronizing))\n- docs: please docs linter (move_cert docstring) [#3151](https://github.com/jupyterhub/jupyterhub/pull/3151) ([@consideRatio](https://github.com/consideRatio))\n- Needed NoEsacpe (NE) option for apache [#3143](https://github.com/jupyterhub/jupyterhub/pull/3143) ([@basvandervlies](https://github.com/basvandervlies))\n- Document external service api_tokens better [#3142](https://github.com/jupyterhub/jupyterhub/pull/3142) ([@snickell](https://github.com/snickell))\n- Remove idle culler example [#3114](https://github.com/jupyterhub/jupyterhub/pull/3114) ([@yuvipanda](https://github.com/yuvipanda))\n- docs: unsqueeze logo, remove unused CSS and templates [#3107](https://github.com/jupyterhub/jupyterhub/pull/3107) ([@consideRatio](https://github.com/consideRatio))\n- Update version in docs/rest-api.yaml [#3104](https://github.com/jupyterhub/jupyterhub/pull/3104) ([@cmd-ntrf](https://github.com/cmd-ntrf))\n- Replace zonca/remotespawner with NERSC/sshspawner [#3086](https://github.com/jupyterhub/jupyterhub/pull/3086) ([@manics](https://github.com/manics))\n- Remove already done named servers from roadmap [#3084](https://github.com/jupyterhub/jupyterhub/pull/3084) ([@elgalu](https://github.com/elgalu))\n- proxy settings might cause authentication errors [#3078](https://github.com/jupyterhub/jupyterhub/pull/3078) ([@gatoniel](https://github.com/gatoniel))\n- Add Configuration Reference section to docs [#3077](https://github.com/jupyterhub/jupyterhub/pull/3077) ([@kinow](https://github.com/kinow))\n- document upgrading from api_tokens to services config [#3055](https://github.com/jupyterhub/jupyterhub/pull/3055) ([@minrk](https://github.com/minrk))\n- [Docs] Disable proxy_buffering when using nginx reverse proxy [#3048](https://github.com/jupyterhub/jupyterhub/pull/3048) ([@mhwasil](https://github.com/mhwasil))\n- docs: add proxy_http_version 1.1 [#3046](https://github.com/jupyterhub/jupyterhub/pull/3046) ([@ceocoder](https://github.com/ceocoder))\n- #1018 PAM added in prerequisites [#3040](https://github.com/jupyterhub/jupyterhub/pull/3040) ([@romainx](https://github.com/romainx))\n- Fix use of auxiliary verb on index.rst [#3022](https://github.com/jupyterhub/jupyterhub/pull/3022) ([@joshmeek](https://github.com/joshmeek))\n- Fix docs CI test failure: duplicate object description [#3021](https://github.com/jupyterhub/jupyterhub/pull/3021) ([@rkdarst](https://github.com/rkdarst))\n- Update issue templates [#3001](https://github.com/jupyterhub/jupyterhub/pull/3001) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- fix wrong name on firewall [#2997](https://github.com/jupyterhub/jupyterhub/pull/2997) ([@thuvh](https://github.com/thuvh))\n- updating docs theme [#2995](https://github.com/jupyterhub/jupyterhub/pull/2995) ([@choldgraf](https://github.com/choldgraf))\n- Update contributor docs [#2972](https://github.com/jupyterhub/jupyterhub/pull/2972) ([@mriedem](https://github.com/mriedem))\n- Server.user_options rest-api documented [#2966](https://github.com/jupyterhub/jupyterhub/pull/2966) ([@mriedem](https://github.com/mriedem))\n- Pin sphinx theme [#2956](https://github.com/jupyterhub/jupyterhub/pull/2956) ([@manics](https://github.com/manics))\n- [doc] Fix couple typos in the documentation [#2951](https://github.com/jupyterhub/jupyterhub/pull/2951) ([@kinow](https://github.com/kinow))\n- Docs: Fixed grammar on landing page [#2950](https://github.com/jupyterhub/jupyterhub/pull/2950) ([@alexdriedger](https://github.com/alexdriedger))\n- add general faq [#2946](https://github.com/jupyterhub/jupyterhub/pull/2946) ([@minrk](https://github.com/minrk))\n- docs: use metachannel for faster environment solve [#2943](https://github.com/jupyterhub/jupyterhub/pull/2943) ([@minrk](https://github.com/minrk))\n- update docs environments [#2942](https://github.com/jupyterhub/jupyterhub/pull/2942) ([@minrk](https://github.com/minrk))\n- [doc] Add more docs about Cookies used for authentication in JupyterHub [#2940](https://github.com/jupyterhub/jupyterhub/pull/2940) ([@kinow](https://github.com/kinow))\n- [doc] Use fixed commit plus line number in github link [#2939](https://github.com/jupyterhub/jupyterhub/pull/2939) ([@kinow](https://github.com/kinow))\n- [doc] Fix link to SSL encryption from troubleshooting page [#2938](https://github.com/jupyterhub/jupyterhub/pull/2938) ([@kinow](https://github.com/kinow))\n- rest api: fix schema for remove parameter in rest api [#2917](https://github.com/jupyterhub/jupyterhub/pull/2917) ([@minrk](https://github.com/minrk))\n- Add troubleshooting topics [#2914](https://github.com/jupyterhub/jupyterhub/pull/2914) ([@jgwerner](https://github.com/jgwerner))\n- Several fixes to the doc [#2904](https://github.com/jupyterhub/jupyterhub/pull/2904) ([@reneluria](https://github.com/reneluria))\n- fix: 'Non-ASCII character '\\xc3' [#2901](https://github.com/jupyterhub/jupyterhub/pull/2901) ([@jgwerner](https://github.com/jgwerner))\n- Generate prometheus metrics docs [#2891](https://github.com/jupyterhub/jupyterhub/pull/2891) ([@rajat404](https://github.com/rajat404))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-01-17&to=2020-10-29&type=c))\n\n[@0nebody](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A0nebody+updated%3A2020-01-17..2020-10-29&type=Issues) | [@1kastner](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A1kastner+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ahkui](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aahkui+updated%3A2020-01-17..2020-10-29&type=Issues) | [@alexdriedger](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexdriedger+updated%3A2020-01-17..2020-10-29&type=Issues) | [@alexweav](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexweav+updated%3A2020-01-17..2020-10-29&type=Issues) | [@AlJohri](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AAlJohri+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Analect](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AAnalect+updated%3A2020-01-17..2020-10-29&type=Issues) | [@analytically](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aanalytically+updated%3A2020-01-17..2020-10-29&type=Issues) | [@aneagoe](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aaneagoe+updated%3A2020-01-17..2020-10-29&type=Issues) | [@AngelOnFira](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AAngelOnFira+updated%3A2020-01-17..2020-10-29&type=Issues) | [@barrachri](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abarrachri+updated%3A2020-01-17..2020-10-29&type=Issues) | [@basvandervlies](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abasvandervlies+updated%3A2020-01-17..2020-10-29&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2020-01-17..2020-10-29&type=Issues) | [@bigbosst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abigbosst+updated%3A2020-01-17..2020-10-29&type=Issues) | [@blink1073](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ablink1073+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Cadair](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ACadair+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Carreau](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ACarreau+updated%3A2020-01-17..2020-10-29&type=Issues) | [@cbjuan](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acbjuan+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ceocoder](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aceocoder+updated%3A2020-01-17..2020-10-29&type=Issues) | [@chancez](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Achancez+updated%3A2020-01-17..2020-10-29&type=Issues) | [@choldgraf](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acholdgraf+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Chrisjw42](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AChrisjw42+updated%3A2020-01-17..2020-10-29&type=Issues) | [@cmd-ntrf](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acmd-ntrf+updated%3A2020-01-17..2020-10-29&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2020-01-17..2020-10-29&type=Issues) | [@danlester](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adanlester+updated%3A2020-01-17..2020-10-29&type=Issues) | [@diurnalist](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adiurnalist+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Dmitry1987](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ADmitry1987+updated%3A2020-01-17..2020-10-29&type=Issues) | [@dsblank](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adsblank+updated%3A2020-01-17..2020-10-29&type=Issues) | [@dylex](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adylex+updated%3A2020-01-17..2020-10-29&type=Issues) | [@echarles](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aecharles+updated%3A2020-01-17..2020-10-29&type=Issues) | [@elgalu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aelgalu+updated%3A2020-01-17..2020-10-29&type=Issues) | [@fcollonval](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Afcollonval+updated%3A2020-01-17..2020-10-29&type=Issues) | [@gatoniel](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Agatoniel+updated%3A2020-01-17..2020-10-29&type=Issues) | [@GeorgianaElena](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AGeorgianaElena+updated%3A2020-01-17..2020-10-29&type=Issues) | [@hnykda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ahnykda+updated%3A2020-01-17..2020-10-29&type=Issues) | [@itssimon](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aitssimon+updated%3A2020-01-17..2020-10-29&type=Issues) | [@jgwerner](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajgwerner+updated%3A2020-01-17..2020-10-29&type=Issues) | [@JohnPaton](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AJohnPaton+updated%3A2020-01-17..2020-10-29&type=Issues) | [@joshmeek](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajoshmeek+updated%3A2020-01-17..2020-10-29&type=Issues) | [@jtpio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajtpio+updated%3A2020-01-17..2020-10-29&type=Issues) | [@kinow](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akinow+updated%3A2020-01-17..2020-10-29&type=Issues) | [@kreuzert](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akreuzert+updated%3A2020-01-17..2020-10-29&type=Issues) | [@kxiao-fn](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akxiao-fn+updated%3A2020-01-17..2020-10-29&type=Issues) | [@lesiano](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alesiano+updated%3A2020-01-17..2020-10-29&type=Issues) | [@limimiking](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alimimiking+updated%3A2020-01-17..2020-10-29&type=Issues) | [@lydian](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alydian+updated%3A2020-01-17..2020-10-29&type=Issues) | [@mabbasi90](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amabbasi90+updated%3A2020-01-17..2020-10-29&type=Issues) | [@maluhoss](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amaluhoss+updated%3A2020-01-17..2020-10-29&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2020-01-17..2020-10-29&type=Issues) | [@matteoipri](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amatteoipri+updated%3A2020-01-17..2020-10-29&type=Issues) | [@mbmilligan](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ambmilligan+updated%3A2020-01-17..2020-10-29&type=Issues) | [@meeseeksmachine](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ameeseeksmachine+updated%3A2020-01-17..2020-10-29&type=Issues) | [@mhwasil](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amhwasil+updated%3A2020-01-17..2020-10-29&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2020-01-17..2020-10-29&type=Issues) | [@mriedem](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amriedem+updated%3A2020-01-17..2020-10-29&type=Issues) | [@nscozzaro](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Anscozzaro+updated%3A2020-01-17..2020-10-29&type=Issues) | [@pabepadu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Apabepadu+updated%3A2020-01-17..2020-10-29&type=Issues) | [@possiblyMikeB](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ApossiblyMikeB+updated%3A2020-01-17..2020-10-29&type=Issues) | [@psyvision](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Apsyvision+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rabsr](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arabsr+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rainwoodman](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arainwoodman+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rajat404](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arajat404+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rcthomas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arcthomas+updated%3A2020-01-17..2020-10-29&type=Issues) | [@reneluria](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Areneluria+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rgbkrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Argbkrk+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rkdarst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkdarst+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rkevin-arch](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkevin-arch+updated%3A2020-01-17..2020-10-29&type=Issues) | [@romainx](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aromainx+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ryanlovett](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aryanlovett+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ryogesh](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aryogesh+updated%3A2020-01-17..2020-10-29&type=Issues) | [@sdague](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asdague+updated%3A2020-01-17..2020-10-29&type=Issues) | [@snickell](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asnickell+updated%3A2020-01-17..2020-10-29&type=Issues) | [@SonakshiGrover](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ASonakshiGrover+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ssanderson](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Assanderson+updated%3A2020-01-17..2020-10-29&type=Issues) | [@stefanvangastel](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astefanvangastel+updated%3A2020-01-17..2020-10-29&type=Issues) | [@steinad](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asteinad+updated%3A2020-01-17..2020-10-29&type=Issues) | [@stephen-a2z](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astephen-a2z+updated%3A2020-01-17..2020-10-29&type=Issues) | [@stevegore](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astevegore+updated%3A2020-01-17..2020-10-29&type=Issues) | [@stv0g](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astv0g+updated%3A2020-01-17..2020-10-29&type=Issues) | [@subgero](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asubgero+updated%3A2020-01-17..2020-10-29&type=Issues) | [@sudi007](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asudi007+updated%3A2020-01-17..2020-10-29&type=Issues) | [@summerswallow](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asummerswallow+updated%3A2020-01-17..2020-10-29&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2020-01-17..2020-10-29&type=Issues) | [@synchronizing](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asynchronizing+updated%3A2020-01-17..2020-10-29&type=Issues) | [@thuvh](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Athuvh+updated%3A2020-01-17..2020-10-29&type=Issues) | [@tritemio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atritemio+updated%3A2020-01-17..2020-10-29&type=Issues) | [@twalcari](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atwalcari+updated%3A2020-01-17..2020-10-29&type=Issues) | [@vchandvankar](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Avchandvankar+updated%3A2020-01-17..2020-10-29&type=Issues) | [@vilhelmen](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Avilhelmen+updated%3A2020-01-17..2020-10-29&type=Issues) | [@vlizanae](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Avlizanae+updated%3A2020-01-17..2020-10-29&type=Issues) | [@weimin](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aweimin+updated%3A2020-01-17..2020-10-29&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2020-01-17..2020-10-29&type=Issues) | [@willingc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awillingc+updated%3A2020-01-17..2020-10-29&type=Issues) | [@xlotlu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Axlotlu+updated%3A2020-01-17..2020-10-29&type=Issues) | [@yhal-nesi](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayhal-nesi+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ynnelson](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aynnelson+updated%3A2020-01-17..2020-10-29&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayuvipanda+updated%3A2020-01-17..2020-10-29&type=Issues) | [@zonca](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Azonca+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Zsailer](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AZsailer+updated%3A2020-01-17..2020-10-29&type=Issues)\n\n## 1.1\n\n### [1.1.0] 2020-01-17\n\n1.1 is a release with lots of accumulated fixes and improvements,\nespecially in performance, metrics, and customization.\nThere are no database changes in 1.1, so no database upgrade is required\nwhen upgrading from 1.0 to 1.1.\n\nOf particular interest to deployments with automatic health checking and/or large numbers of users is that the slow startup time\nintroduced in 1.0 by additional spawner validation can now be mitigated by `JupyterHub.init_spawners_timeout`,\nallowing the Hub to become responsive before the spawners may have finished validating.\n\nSeveral new Prometheus metrics are added (and others fixed!)\nto measure sources of common performance issues,\nsuch as proxy interactions and startup.\n\n1.1 also begins adoption of the Jupyter telemetry project in JupyterHub,\nSee [The Jupyter Telemetry docs](https://jupyter-telemetry.readthedocs.io)\nfor more info. The only events so far are starting and stopping servers,\nbut more will be added in future releases.\n\nThere are many more fixes and improvements listed below.\nThanks to everyone who has contributed to this release!\n\n#### New\n\n- LocalProcessSpawner should work on windows by using psutil.pid_exists [#2882](https://github.com/jupyterhub/jupyterhub/pull/2882) ([@ociule](https://github.com/ociule))\n- trigger auth_state_hook prior to options form, add auth_state to template namespace [#2881](https://github.com/jupyterhub/jupyterhub/pull/2881) ([@minrk](https://github.com/minrk))\n- Added guide 'install jupyterlab the hard way' #2110 [#2842](https://github.com/jupyterhub/jupyterhub/pull/2842) ([@mangecoeur](https://github.com/mangecoeur))\n- Add prometheus metric to measure hub startup time [#2799](https://github.com/jupyterhub/jupyterhub/pull/2799) ([@rajat404](https://github.com/rajat404))\n- Add Spawner.auth_state_hook [#2555](https://github.com/jupyterhub/jupyterhub/pull/2555) ([@rcthomas](https://github.com/rcthomas))\n- Link services from jupyterhub pages [#2763](https://github.com/jupyterhub/jupyterhub/pull/2763) ([@rcthomas](https://github.com/rcthomas))\n- `JupyterHub.user_redirect_hook` is added to allow admins to customize /user-redirect/ behavior [#2790](https://github.com/jupyterhub/jupyterhub/pull/2790) ([@yuvipanda](https://github.com/yuvipanda))\n- Add prometheus metric to measure hub startup time [#2799](https://github.com/jupyterhub/jupyterhub/pull/2799) ([@rajat404](https://github.com/rajat404))\n- Add prometheus metric to measure proxy route poll times [#2798](https://github.com/jupyterhub/jupyterhub/pull/2798) ([@rajat404](https://github.com/rajat404))\n- `PROXY_DELETE_DURATION_SECONDS` prometheus metric is added, to measure proxy route deletion times [#2788](https://github.com/jupyterhub/jupyterhub/pull/2788) ([@rajat404](https://github.com/rajat404))\n- `Service.oauth_no_confirm` is added, it is useful for admin-managed services that are considered part of the Hub and shouldn't need to prompt the user for access [#2767](https://github.com/jupyterhub/jupyterhub/pull/2767) ([@minrk](https://github.com/minrk))\n- `JupyterHub.default_server_name` is added to make the default server be a named server with provided name [#2735](https://github.com/jupyterhub/jupyterhub/pull/2735) ([@krinsman](https://github.com/krinsman))\n- `JupyterHub.init_spawners_timeout` is introduced to combat slow startups on large JupyterHub deployments [#2721](https://github.com/jupyterhub/jupyterhub/pull/2721) ([@minrk](https://github.com/minrk))\n- The configuration `uids` for local authenticators is added to consistently assign users UNIX id's between installations [#2687](https://github.com/jupyterhub/jupyterhub/pull/2687) ([@rgerkin](https://github.com/rgerkin))\n- `JupyterHub.activity_resolution` is introduced with a default value of 30s improving performance by not updating the database with user activity too often [#2605](https://github.com/jupyterhub/jupyterhub/pull/2605) ([@minrk](https://github.com/minrk))\n- [HubAuth](https://jupyterhub.readthedocs.io/en/stable/api/services.auth.html#jupyterhub.services.auth.HubAuth)'s SSL configuration can now be set through environment variables [#2588](https://github.com/jupyterhub/jupyterhub/pull/2588) ([@cmd-ntrf](https://github.com/cmd-ntrf))\n- Expose spawner.user_options in REST API. [#2755](https://github.com/jupyterhub/jupyterhub/pull/2755) ([@danielballan](https://github.com/danielballan))\n- add block for scripts included in head [#2828](https://github.com/jupyterhub/jupyterhub/pull/2828) ([@bitnik](https://github.com/bitnik))\n- Instrument JupyterHub to record events with jupyter_telemetry [Part II] [#2698](https://github.com/jupyterhub/jupyterhub/pull/2698) ([@Zsailer](https://github.com/Zsailer))\n- Make announcements visible without custom HTML [#2570](https://github.com/jupyterhub/jupyterhub/pull/2570) ([@consideRatio](https://github.com/consideRatio))\n- Display server version on admin page [#2776](https://github.com/jupyterhub/jupyterhub/pull/2776) ([@vilhelmen](https://github.com/vilhelmen))\n\n#### Fixes\n\n- Bugfix: pam_normalize_username didn't return username [#2876](https://github.com/jupyterhub/jupyterhub/pull/2876) ([@rkdarst](https://github.com/rkdarst))\n- Cleanup if spawner stop fails [#2849](https://github.com/jupyterhub/jupyterhub/pull/2849) ([@gabber12](https://github.com/gabber12))\n- Fix an issue occurring with the default spawner and `internal_ssl` enabled [#2785](https://github.com/jupyterhub/jupyterhub/pull/2785) ([@rpwagner](https://github.com/rpwagner))\n- Fix named servers to not be spawnable unless activated [#2772](https://github.com/jupyterhub/jupyterhub/pull/2772) ([@bitnik](https://github.com/bitnik))\n- JupyterHub now awaits proxy availability before accepting web requests [#2750](https://github.com/jupyterhub/jupyterhub/pull/2750) ([@minrk](https://github.com/minrk))\n- Fix a no longer valid assumption that MySQL and MariaDB need to have `innodb_file_format` and `innodb_large_prefix` configured [#2712](https://github.com/jupyterhub/jupyterhub/pull/2712) ([@chicocvenancio](https://github.com/chicocvenancio))\n- Login/Logout button now updates to Login on logout [#2705](https://github.com/jupyterhub/jupyterhub/pull/2705) ([@aar0nTw](https://github.com/aar0nTw))\n- Fix handling of exceptions within `pre_spawn_start` hooks [#2684](https://github.com/jupyterhub/jupyterhub/pull/2684) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Fix an issue where a user could end up spawning a default server instead of a named server as intended [#2682](https://github.com/jupyterhub/jupyterhub/pull/2682) ([@rcthomas](https://github.com/rcthomas))\n- /hub/admin now redirects to login if unauthenticated [#2670](https://github.com/jupyterhub/jupyterhub/pull/2670) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Fix spawning of users with names containing characters that needs to be escaped [#2648](https://github.com/jupyterhub/jupyterhub/pull/2648) ([@nicorikken](https://github.com/nicorikken))\n- Fix `TOTAL_USERS` prometheus metric [#2637](https://github.com/jupyterhub/jupyterhub/pull/2637) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Fix `RUNNING_SERVERS` prometheus metric [#2629](https://github.com/jupyterhub/jupyterhub/pull/2629) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Fix faulty redirects to 404 that could occur with the use of named servers [#2594](https://github.com/jupyterhub/jupyterhub/pull/2594) ([@vilhelmen](https://github.com/vilhelmen))\n- JupyterHub API spec is now a valid OpenAPI spec [#2590](https://github.com/jupyterhub/jupyterhub/pull/2590) ([@sbrunk](https://github.com/sbrunk))\n- Use of `--help` or `--version` previously could output unrelated errors [#2584](https://github.com/jupyterhub/jupyterhub/pull/2584) ([@minrk](https://github.com/minrk))\n- No longer crash on startup in Windows [#2560](https://github.com/jupyterhub/jupyterhub/pull/2560) ([@adelcast](https://github.com/adelcast))\n- Escape usernames in the frontend [#2640](https://github.com/jupyterhub/jupyterhub/pull/2640) ([@nicorikken](https://github.com/nicorikken))\n\n#### Maintenance\n\n- Optimize CI jobs and default to bionic [#2897](https://github.com/jupyterhub/jupyterhub/pull/2897) ([@consideRatio](https://github.com/consideRatio))\n- catch connection error for ssl failures [#2889](https://github.com/jupyterhub/jupyterhub/pull/2889) ([@minrk](https://github.com/minrk))\n- Fix implementation of default server name [#2887](https://github.com/jupyterhub/jupyterhub/pull/2887) ([@krinsman](https://github.com/krinsman))\n- fixup allow_failures [#2880](https://github.com/jupyterhub/jupyterhub/pull/2880) ([@minrk](https://github.com/minrk))\n- Pass tests on Python 3.8 [#2879](https://github.com/jupyterhub/jupyterhub/pull/2879) ([@minrk](https://github.com/minrk))\n- Fixup .travis.yml [#2868](https://github.com/jupyterhub/jupyterhub/pull/2868) ([@consideRatio](https://github.com/consideRatio))\n- Update README's badges [#2867](https://github.com/jupyterhub/jupyterhub/pull/2867) ([@consideRatio](https://github.com/consideRatio))\n- Dockerfile: add build-essential to builder image [#2866](https://github.com/jupyterhub/jupyterhub/pull/2866) ([@rkdarst](https://github.com/rkdarst))\n- Dockerfile: Copy share/ to the final image [#2864](https://github.com/jupyterhub/jupyterhub/pull/2864) ([@rkdarst](https://github.com/rkdarst))\n- chore: Dockerfile updates [#2853](https://github.com/jupyterhub/jupyterhub/pull/2853) ([@jgwerner](https://github.com/jgwerner))\n- simplify Dockerfile [#2840](https://github.com/jupyterhub/jupyterhub/pull/2840) ([@minrk](https://github.com/minrk))\n- docker: fix onbuild image arg [#2839](https://github.com/jupyterhub/jupyterhub/pull/2839) ([@minrk](https://github.com/minrk))\n- remove redundant pip package list in docs environment.yml [#2838](https://github.com/jupyterhub/jupyterhub/pull/2838) ([@minrk](https://github.com/minrk))\n- docs: Update docs to run tests [#2812](https://github.com/jupyterhub/jupyterhub/pull/2812) ([@jgwerner](https://github.com/jgwerner))\n- remove redundant pip package list in docs environment.yml [#2838](https://github.com/jupyterhub/jupyterhub/pull/2838) ([@minrk](https://github.com/minrk))\n- updating to pandas docs theme [#2820](https://github.com/jupyterhub/jupyterhub/pull/2820) ([@choldgraf](https://github.com/choldgraf))\n- Adding institutional faq [#2800](https://github.com/jupyterhub/jupyterhub/pull/2800) ([@choldgraf](https://github.com/choldgraf))\n- Add inline comment to test [#2826](https://github.com/jupyterhub/jupyterhub/pull/2826) ([@consideRatio](https://github.com/consideRatio))\n- Raise error on missing specified config [#2824](https://github.com/jupyterhub/jupyterhub/pull/2824) ([@consideRatio](https://github.com/consideRatio))\n- chore: Refactor Dockerfile [#2816](https://github.com/jupyterhub/jupyterhub/pull/2816) ([@jgwerner](https://github.com/jgwerner))\n- chore: Update python versions in travis matrix [#2811](https://github.com/jupyterhub/jupyterhub/pull/2811) ([@jgwerner](https://github.com/jgwerner))\n- chore: Bump package versions used in pre-commit config [#2810](https://github.com/jupyterhub/jupyterhub/pull/2810) ([@jgwerner](https://github.com/jgwerner))\n- adding docs preview to circleci [#2803](https://github.com/jupyterhub/jupyterhub/pull/2803) ([@choldgraf](https://github.com/choldgraf))\n- adding institutional faq [#2800](https://github.com/jupyterhub/jupyterhub/pull/2800) ([@choldgraf](https://github.com/choldgraf))\n- The proxy's REST API listens on port `8001` [#2795](https://github.com/jupyterhub/jupyterhub/pull/2795) ([@bnuhero](https://github.com/bnuhero))\n- cull_idle_servers.py: rebind max_age and inactive_limit locally [#2794](https://github.com/jupyterhub/jupyterhub/pull/2794) ([@rkdarst](https://github.com/rkdarst))\n- Fix deprecation warnings [#2789](https://github.com/jupyterhub/jupyterhub/pull/2789) ([@tirkarthi](https://github.com/tirkarthi))\n- Log proxy class [#2783](https://github.com/jupyterhub/jupyterhub/pull/2783) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Add docs for fixtures in CONTRIBUTING.md [#2782](https://github.com/jupyterhub/jupyterhub/pull/2782) ([@kinow](https://github.com/kinow))\n- Fix header project name typo [#2775](https://github.com/jupyterhub/jupyterhub/pull/2775) ([@kinow](https://github.com/kinow))\n- Remove unused setupegg.py [#2774](https://github.com/jupyterhub/jupyterhub/pull/2774) ([@kinow](https://github.com/kinow))\n- Log JupyterHub version on startup [#2752](https://github.com/jupyterhub/jupyterhub/pull/2752) ([@consideRatio](https://github.com/consideRatio))\n- Reduce verbosity for \"Failing suspected API request to not-running server\" (new) [#2751](https://github.com/jupyterhub/jupyterhub/pull/2751) ([@rkdarst](https://github.com/rkdarst))\n- Add missing package for json schema doc build [#2744](https://github.com/jupyterhub/jupyterhub/pull/2744) ([@willingc](https://github.com/willingc))\n- block urllib3 versions with encoding bug [#2743](https://github.com/jupyterhub/jupyterhub/pull/2743) ([@minrk](https://github.com/minrk))\n- Remove tornado deprecated/unnecessary AsyncIOMainLoop().install() call [#2740](https://github.com/jupyterhub/jupyterhub/pull/2740) ([@kinow](https://github.com/kinow))\n- Fix deprecated call [#2739](https://github.com/jupyterhub/jupyterhub/pull/2739) ([@kinow](https://github.com/kinow))\n- Remove duplicate hub and authenticator traitlets from Spawner [#2736](https://github.com/jupyterhub/jupyterhub/pull/2736) ([@eslavich](https://github.com/eslavich))\n- Update issue template [#2725](https://github.com/jupyterhub/jupyterhub/pull/2725) ([@willingc](https://github.com/willingc))\n- Use autodoc-traits sphinx extension [#2723](https://github.com/jupyterhub/jupyterhub/pull/2723) ([@willingc](https://github.com/willingc))\n- Add New Server: change redirecting to relative to home page in js [#2714](https://github.com/jupyterhub/jupyterhub/pull/2714) ([@bitnik](https://github.com/bitnik))\n- Create a warning when creating a service implicitly from service_tokens [#2704](https://github.com/jupyterhub/jupyterhub/pull/2704) ([@katsar0v](https://github.com/katsar0v))\n- Fix mistypos [#2702](https://github.com/jupyterhub/jupyterhub/pull/2702) ([@rlukin](https://github.com/rlukin))\n- Add Jupyter community link [#2696](https://github.com/jupyterhub/jupyterhub/pull/2696) ([@mattjshannon](https://github.com/mattjshannon))\n- Fix failing travis tests [#2695](https://github.com/jupyterhub/jupyterhub/pull/2695) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Documentation update: hint for using services instead of service tokens. [#2679](https://github.com/jupyterhub/jupyterhub/pull/2679) ([@katsar0v](https://github.com/katsar0v))\n- Replace header logo: jupyter -> jupyterhub [#2672](https://github.com/jupyterhub/jupyterhub/pull/2672) ([@consideRatio](https://github.com/consideRatio))\n- Update spawn-form example [#2662](https://github.com/jupyterhub/jupyterhub/pull/2662) ([@kinow](https://github.com/kinow))\n- Update flask hub authentication services example in doc [#2658](https://github.com/jupyterhub/jupyterhub/pull/2658) ([@cmd-ntrf](https://github.com/cmd-ntrf))\n- close `<div class=\"container\">` tag in home.html [#2649](https://github.com/jupyterhub/jupyterhub/pull/2649) ([@bitnik](https://github.com/bitnik))\n- Some theme updates; no double NEXT/PREV buttons. [#2647](https://github.com/jupyterhub/jupyterhub/pull/2647) ([@Carreau](https://github.com/Carreau))\n- fix typos on technical reference documentation [#2646](https://github.com/jupyterhub/jupyterhub/pull/2646) ([@ilee38](https://github.com/ilee38))\n- Update links for Hadoop-related subprojects [#2645](https://github.com/jupyterhub/jupyterhub/pull/2645) ([@jcrist](https://github.com/jcrist))\n- corrected docker network create instructions in dockerfiles README [#2632](https://github.com/jupyterhub/jupyterhub/pull/2632) ([@bartolone](https://github.com/bartolone))\n- Fixed docs and testing code to use refactored SimpleLocalProcessSpawner [#2631](https://github.com/jupyterhub/jupyterhub/pull/2631) ([@danlester](https://github.com/danlester))\n- Update the config used for testing [#2628](https://github.com/jupyterhub/jupyterhub/pull/2628) ([@jtpio](https://github.com/jtpio))\n- Update doc: do not suggest depricated config key [#2626](https://github.com/jupyterhub/jupyterhub/pull/2626) ([@lumbric](https://github.com/lumbric))\n- Add missing words [#2625](https://github.com/jupyterhub/jupyterhub/pull/2625) ([@remram44](https://github.com/remram44))\n- cull-idle: Include a hint on how to add custom culling logic [#2613](https://github.com/jupyterhub/jupyterhub/pull/2613) ([@rkdarst](https://github.com/rkdarst))\n- Replace existing redirect code by Tornado's addslash decorator [#2609](https://github.com/jupyterhub/jupyterhub/pull/2609) ([@kinow](https://github.com/kinow))\n- Hide Stop My Server red button after server stopped. [#2577](https://github.com/jupyterhub/jupyterhub/pull/2577) ([@aar0nTw](https://github.com/aar0nTw))\n- Update link of `changelog` [#2565](https://github.com/jupyterhub/jupyterhub/pull/2565) ([@iblis17](https://github.com/iblis17))\n- typo [#2564](https://github.com/jupyterhub/jupyterhub/pull/2564) ([@julienchastang](https://github.com/julienchastang))\n- Update to simplify the language related to spawner options [#2558](https://github.com/jupyterhub/jupyterhub/pull/2558) ([@NikeNano](https://github.com/NikeNano))\n- Adding the use case of the Elucidata: How Jupyter Notebook is used in\u2026 [#2548](https://github.com/jupyterhub/jupyterhub/pull/2548) ([@IamViditAgarwal](https://github.com/IamViditAgarwal))\n- Dict rewritten as literal [#2546](https://github.com/jupyterhub/jupyterhub/pull/2546) ([@remyleone](https://github.com/remyleone))\n\n## 1.0\n\n### [1.0.0] 2019-05-03\n\nJupyterHub 1.0 is a major milestone for JupyterHub.\nHuge thanks to the many people who have contributed to this release,\nwhether it was through discussion, testing, documentation, or development.\n\n#### Major new features\n\n- Support TLS encryption and authentication of all internal communication.\n  Spawners must implement `.move_certs` method to make certificates available\n  to the notebook server if it is not local to the Hub.\n- There is now full UI support for managing named servers.\n  With named servers, each jupyterhub user may have access to more than one named server. For example, a professor may access a server named `research` and another named `teaching`.\n\n  ![named servers on the home page](./images/named-servers-home.png)\n\n- Authenticators can now expire and refresh authentication data by implementing\n  `Authenticator.refresh_user(user)`.\n  This allows things like OAuth data and access tokens to be refreshed.\n  When used together with `Authenticator.refresh_pre_spawn = True`,\n  auth refresh can be forced prior to Spawn,\n  allowing the Authenticator to _require_ that authentication data is fresh\n  immediately before the user's server is launched.\n\n```eval_rst\n.. seealso::\n\n  - :meth:`.Authenticator.refresh_user`\n  - :meth:`.Spawner.create_certs`\n  - :meth:`.Spawner.move_certs`\n```\n\n#### New features\n\n- allow custom spawners, authenticators, and proxies to register themselves via 'entry points', enabling more convenient configuration such as:\n\n  ```python\n  c.JupyterHub.authenticator_class = 'github'\n  c.JupyterHub.spawner_class = 'docker'\n  c.JupyterHub.proxy_class = 'traefik_etcd'\n  ```\n\n- Spawners are passed the tornado Handler object that requested their spawn (as `self.handler`),\n  so they can do things like make decisions based on query arguments in the request.\n- SimpleSpawner and DummyAuthenticator, which are useful for testing, have been merged into JupyterHub itself:\n\n  ```python\n  # For testing purposes only. Should not be used in production.\n  c.JupyterHub.authenticator_class = 'dummy'\n  c.JupyterHub.spawner_class = 'simple'\n  ```\n\n  These classes are **not** appropriate for production use. Only testing.\n\n- Add health check endpoint at `/hub/health`\n- Several prometheus metrics have been added (thanks to [Outreachy](https://www.outreachy.org/) applicants!)\n- A new API for registering user activity.\n  To prepare for the addition of [alternate proxy implementations](https://github.com/jupyterhub/traefik-proxy),\n  responsibility for tracking activity is taken away from the proxy\n  and moved to the notebook server (which already has activity tracking features).\n  Activity is now tracked by pushing it to the Hub from user servers instead of polling the\n  proxy API.\n- Dynamic `options_form` callables may now return an empty string\n  which will result in no options form being rendered.\n- `Spawner.user_options` is persisted to the database to be re-used,\n  so that a server spawned once via the form can be re-spawned via the API\n  with the same options.\n- Added `c.PAMAuthenticator.pam_normalize_username` option for round-tripping\n  usernames through PAM to retrieve the normalized form.\n- Added `c.JupyterHub.named_server_limit_per_user` configuration to limit\n  the number of named servers each user can have.\n  The default is 0, for no limit.\n- API requests to HubAuthenticated services (e.g. single-user servers)\n  may pass a token in the `Authorization` header,\n  matching authentication with the Hub API itself.\n- Added `Authenticator.is_admin(handler, authentication)` method\n  and `Authenticator.admin_groups` configuration for automatically\n  determining that a member of a group should be considered an admin.\n- New `c.Authenticator.post_auth_hook` configuration\n  that can be any callable of the form `async def hook(authenticator, handler, authentication=None):`.\n  This hook may transform the return value of `Authenticator.authenticate()`\n  and return a new authentication dictionary,\n  e.g. specifying admin privileges, group membership,\n  or custom allowed/blocked logic.\n  This hook is called _after_ existing normalization and allowed-username checking.\n- `Spawner.options_from_form` may now be async\n- Added `JupyterHub.shutdown_on_logout` option to trigger shutdown of a user's\n  servers when they log out.\n- When `Spawner.start` raises an Exception,\n  a message can be passed on to the user if the exception has a `.jupyterhub_message` attribute.\n\n#### Changes\n\n- Authentication methods such as `check_whitelist` should now take an additional\n  `authentication` argument\n  that will be a dictionary (default: None) of authentication data,\n  as returned by `Authenticator.authenticate()`:\n\n  ```python\n  def check_whitelist(self, username, authentication=None):\n      ...\n  ```\n\n  `authentication` should have a default value of None\n  for backward-compatibility with jupyterhub < 1.0.\n\n- Prometheus metrics page is now authenticated.\n  Any authenticated user may see the prometheus metrics.\n  To disable prometheus authentication,\n  set `JupyterHub.authenticate_prometheus = False`.\n- Visits to `/user/:name` no longer trigger an implicit launch of the user's server.\n  Instead, a page is shown indicating that the server is not running\n  with a link to request the spawn.\n- API requests to `/user/:name` for a not-running server will have status 503 instead of 404.\n- OAuth includes a confirmation page when attempting to visit another user's server,\n  so that users can choose to cancel authentication with the single-user server.\n  Confirmation is still skipped when accessing your own server.\n\n#### Fixed\n\n- Various fixes to improve Windows compatibility\n  (default Authenticator and Spawner still do not support Windows, but other Spawners may)\n- Fixed compatibility with Oracle db\n- Fewer redirects following a visit to the default `/` url\n- Error when progress is requested before progress is ready\n- Error when API requests are made to a not-running server without authentication\n- Avoid logging database password on connect if password is specified in `JupyterHub.db_url`.\n\n#### Development changes\n\nThere have been several changes to the development process that shouldn't\ngenerally affect users of JupyterHub, but may affect contributors.\nIn general, see `CONTRIBUTING.md` for contribution info or ask if you have questions.\n\n- JupyterHub has adopted `black` as a code autoformatter and `pre-commit`\n  as a tool for automatically running code formatting on commit.\n  This is meant to make it _easier_ to contribute to JupyterHub,\n  so let us know if it's having the opposite effect.\n- JupyterHub has switched its test suite to using `pytest-asyncio` from `pytest-tornado`.\n- OAuth is now implemented internally using `oauthlib` instead of `python-oauth2`. This should have no effect on behavior.\n\n## 0.9\n\n### [0.9.6] 2019-04-01\n\nJupyterHub 0.9.6 is a security release.\n\n- Fixes an Open Redirect vulnerability (CVE-2019-10255).\n\nJupyterHub 0.9.5 included a partial fix for this issue.\n\n### [0.9.4] 2018-09-24\n\nJupyterHub 0.9.4 is a small bugfix release.\n\n- Fixes an issue that required all running user servers to be restarted\n  when performing an upgrade from 0.8 to 0.9.\n- Fixes content-type for API endpoints back to `application/json`.\n  It was `text/html` in 0.9.0-0.9.3.\n\n### [0.9.3] 2018-09-12\n\nJupyterHub 0.9.3 contains small bugfixes and improvements\n\n- Fix token page and model handling of `expires_at`.\n  This field was missing from the REST API model for tokens\n  and could cause the token page to not render\n- Add keep-alive to progress event stream to avoid proxies dropping\n  the connection due to inactivity\n- Documentation and example improvements\n- Disable quit button when using notebook 5.6\n- Prototype new feature (may change prior to 1.0):\n  pass requesting Handler to Spawners during start,\n  accessible as `self.handler`\n\n### [0.9.2] 2018-08-10\n\nJupyterHub 0.9.2 contains small bugfixes and improvements.\n\n- Documentation and example improvements\n- Add `Spawner.consecutive_failure_limit` config for aborting the Hub if too many spawns fail in a row.\n- Fix for handling SIGTERM when run with asyncio (tornado 5)\n- Windows compatibility fixes\n\n### [0.9.1] 2018-07-04\n\nJupyterHub 0.9.1 contains a number of small bugfixes on top of 0.9.\n\n- Use a PID file for the proxy to decrease the likelihood that a leftover proxy process will prevent JupyterHub from restarting\n- `c.LocalProcessSpawner.shell_cmd` is now configurable\n- API requests to stopped servers (requests to the hub for `/user/:name/api/...`) fail with 404 rather than triggering a restart of the server\n- Compatibility fix for notebook 5.6.0 which will introduce further\n  security checks for local connections\n- Managed services always use localhost to talk to the Hub if the Hub listening on all interfaces\n- When using a URL prefix, the Hub route will be `JupyterHub.base_url` instead of unconditionally `/`\n- additional fixes and improvements\n\n### [0.9.0] 2018-06-15\n\nJupyterHub 0.9 is a major upgrade of JupyterHub.\nThere are several changes to the database schema,\nso make sure to backup your database and run:\n\n    jupyterhub upgrade-db\n\nafter upgrading jupyterhub.\n\nThe biggest change for 0.9 is the switch to asyncio coroutines everywhere\ninstead of tornado coroutines. Custom Spawners and Authenticators are still\nfree to use tornado coroutines for async methods, as they will continue to\nwork. As part of this upgrade, JupyterHub 0.9 drops support for Python < 3.5\nand tornado < 5.0.\n\n#### Changed\n\n- Require Python >= 3.5\n- Require tornado >= 5.0\n- Use asyncio coroutines throughout\n- Set status 409 for conflicting actions instead of 400,\n  e.g. creating users or groups that already exist.\n- timestamps in REST API continue to be UTC, but now include 'Z' suffix\n  to identify them as such.\n- REST API User model always includes `servers` dict,\n  not just when named servers are enabled.\n- `server` info is no longer available to oauth identification endpoints,\n  only user info and group membership.\n- `User.last_activity` may be None if a user has not been seen,\n  rather than starting with the user creation time\n  which is now separately stored as `User.created`.\n- static resources are now found in `$PREFIX/share/jupyterhub` instead of `share/jupyter/hub` for improved consistency.\n- Deprecate `.extra_log_file` config. Use pipe redirection instead:\n\n      jupyterhub &>> /var/log/jupyterhub.log\n\n- Add `JupyterHub.bind_url` config for setting the full bind URL of the proxy.\n  Sets ip, port, base_url all at once.\n- Add `JupyterHub.hub_bind_url` for setting the full host+port of the Hub.\n  `hub_bind_url` supports unix domain sockets, e.g.\n  `unix+http://%2Fsrv%2Fjupyterhub.sock`\n- Deprecate `JupyterHub.hub_connect_port` config in favor of `JupyterHub.hub_connect_url`. `hub_connect_ip` is not deprecated\n  and can still be used in the common case where only the ip address of the hub differs from the bind ip.\n\n#### Added\n\n- Spawners can define a `.progress` method which should be an async generator.\n  The generator should yield events of the form:\n  ```python\n  {\n    \"message\": \"some-state-message\",\n    \"progress\": 50,\n  }\n  ```\n  These messages will be shown with a progress bar on the spawn-pending page.\n  The `async_generator` package can be used to make async generators\n  compatible with Python 3.5.\n- track activity of individual API tokens\n- new REST API for managing API tokens at `/hub/api/user/tokens[/token-id]`\n- allow viewing/revoking tokens via token page\n- User creation time is available in the REST API as `User.created`\n- Server start time is stored as `Server.started`\n- `Spawner.start` may return a URL for connecting to a notebook instead of `(ip, port)`. This enables Spawners to launch servers that setup their own HTTPS.\n- Optimize database performance by disabling sqlalchemy expire_on_commit by default.\n- Add `python -m jupyterhub.dbutil shell` entrypoint for quickly\n  launching an IPython session connected to your JupyterHub database.\n- Include `User.auth_state` in user model on single-user REST endpoints for admins only.\n- Include `Server.state` in server model on REST endpoints for admins only.\n- Add `Authenticator.blacklist` for blocking users instead of allowing.\n- Pass `c.JupyterHub.tornado_settings['cookie_options']` down to Spawners\n  so that cookie options (e.g. `expires_days`) can be set globally for the whole application.\n- SIGINFO (`ctrl-t`) handler showing the current status of all running threads,\n  coroutines, and CPU/memory/FD consumption.\n- Add async `Spawner.get_options_form` alternative to `.options_form`, so it can be a coroutine.\n- Add `JupyterHub.redirect_to_server` config to govern whether\n  users should be sent to their server on login or the JupyterHub home page.\n- html page templates can be more easily customized and extended.\n- Allow registering external OAuth clients for using the Hub as an OAuth provider.\n- Add basic prometheus metrics at `/hub/metrics` endpoint.\n- Add session-id cookie, enabling immediate revocation of login tokens.\n- Authenticators may specify that users are admins by specifying the `admin` key when return the user model as a dict.\n- Added \"Start All\" button to admin page for launching all user servers at once.\n- Services have an `info` field which is a dictionary.\n  This is accessible via the REST API.\n- `JupyterHub.extra_handlers` allows defining additional tornado RequestHandlers attached to the Hub.\n- API tokens may now expire.\n  Expiry is available in the REST model as `expires_at`,\n  and settable when creating API tokens by specifying `expires_in`.\n\n#### Fixed\n\n- Remove green from theme to improve accessibility\n- Fix error when proxy deletion fails due to route already being deleted\n- clear `?redirects` from URL on successful launch\n- disable send2trash by default, which is rarely desirable for jupyterhub\n- Put PAM calls in a thread so they don't block the main application\n  in cases where PAM is slow (e.g. LDAP).\n- Remove implicit spawn from login handler,\n  instead relying on subsequent request for `/user/:name` to trigger spawn.\n- Fixed several inconsistencies for initial redirects,\n  depending on whether server is running or not and whether the user is logged in or not.\n- Admin requests for `/user/:name` (when admin-access is enabled) launch the right server if it's not running instead of redirecting to their own.\n- Major performance improvement starting up JupyterHub with many users,\n  especially when most are inactive.\n- Various fixes in race conditions and performance improvements with the default proxy.\n- Fixes for CORS headers\n- Stop setting `.form-control` on spawner form inputs unconditionally.\n- Better recovery from database errors and database connection issues\n  without having to restart the Hub.\n- Fix handling of `~` character in usernames.\n- Fix jupyterhub startup when `getpass.getuser()` would fail,\n  e.g. due to missing entry in passwd file in containers.\n\n## 0.8\n\n### [0.8.1] 2017-11-07\n\nJupyterHub 0.8.1 is a collection of bugfixes and small improvements on 0.8.\n\n#### Added\n\n- Run tornado with AsyncIO by default\n- Add `jupyterhub --upgrade-db` flag for automatically upgrading the database as part of startup.\n  This is useful for cases where manually running `jupyterhub upgrade-db`\n  as a separate step is unwieldy.\n- Avoid creating backups of the database when no changes are to be made by\n  `jupyterhub upgrade-db`.\n\n#### Fixed\n\n- Add some further validation to usernames - `/` is not allowed in usernames.\n- Fix empty logout page when using auto_login\n- Fix autofill of username field in default login form.\n- Fix listing of users on the admin page who have not yet started their server.\n- Fix ever-growing traceback when re-raising Exceptions from spawn failures.\n- Remove use of deprecated `bower` for javascript client dependencies.\n\n### [0.8.0] 2017-10-03\n\nJupyterHub 0.8 is a big release!\n\nPerhaps the biggest change is the use of OAuth to negotiate authentication\nbetween the Hub and single-user services.\nDue to this change, it is important that the single-user server\nand Hub are both running the same version of JupyterHub.\nIf you are using containers (e.g. via DockerSpawner or KubeSpawner),\nthis means upgrading jupyterhub in your user images at the same time as the Hub.\nIn most cases, a\n\n    pip install jupyterhub==version\n\nin your Dockerfile is sufficient.\n\n#### Added\n\n- JupyterHub now defined a `Proxy` API for custom\n  proxy implementations other than the default.\n  The defaults are unchanged,\n  but configuration of the proxy is now done on the `ConfigurableHTTPProxy` class instead of the top-level JupyterHub.\n  TODO: docs for writing a custom proxy.\n- Single-user servers and services\n  (anything that uses HubAuth)\n  can now accept token-authenticated requests via the Authentication header.\n- Authenticators can now store state in the Hub's database.\n  To do so, the `authenticate` method should return a dict of the form\n\n  ```python\n  {\n      'username': 'name',\n      'state': {}\n  }\n  ```\n\n  This data will be encrypted and requires `JUPYTERHUB_CRYPT_KEY` environment variable to be set\n  and the `Authenticator.enable_auth_state` flag to be True.\n  If these are not set, auth_state returned by the Authenticator will not be stored.\n\n- There is preliminary support for multiple (named) servers per user in the REST API.\n  Named servers can be created via API requests, but there is currently no UI for managing them.\n- Add `LocalProcessSpawner.popen_kwargs` and `LocalProcessSpawner.shell_cmd`\n  for customizing how user server processes are launched.\n- Add `Authenticator.auto_login` flag for skipping the \"Login with...\" page explicitly.\n- Add `JupyterHub.hub_connect_ip` configuration\n  for the ip that should be used when connecting to the Hub.\n  This is promoting (and deprecating) `DockerSpawner.hub_ip_connect`\n  for use by all Spawners.\n- Add `Spawner.pre_spawn_hook(spawner)` hook for customizing\n  pre-spawn events.\n- Add `JupyterHub.active_server_limit` and `JupyterHub.concurrent_spawn_limit`\n  for limiting the total number of running user servers and the number of pending spawns, respectively.\n\n#### Changed\n\n- more arguments to spawners are now passed via environment variables (`.get_env()`)\n  rather than CLI arguments (`.get_args()`)\n- internally generated tokens no longer get extra hash rounds,\n  significantly speeding up authentication.\n  The hash rounds were deemed unnecessary because the tokens were already\n  generated with high entropy.\n- `JUPYTERHUB_API_TOKEN` env is available at all times,\n  rather than being removed during single-user start.\n  The token is now accessible to kernel processes,\n  enabling user kernels to make authenticated API requests to Hub-authenticated services.\n- Cookie secrets should be 32B hex instead of large base64 secrets.\n- pycurl is used by default, if available.\n\n#### Fixed\n\nSo many things fixed!\n\n- Collisions are checked when users are renamed\n- Fix bug where OAuth authenticators could not logout users\n  due to being redirected right back through the login process.\n- If there are errors loading your config files,\n  JupyterHub will refuse to start with an informative error.\n  Previously, the bad config would be ignored and JupyterHub would launch with default configuration.\n- Raise 403 error on unauthorized user rather than redirect to login,\n  which could cause redirect loop.\n- Set `httponly` on cookies because it's prudent.\n- Improve support for MySQL as the database backend\n- Many race conditions and performance problems under heavy load have been fixed.\n- Fix alembic tagging of database schema versions.\n\n#### Removed\n\n- End support for Python 3.3\n\n## 0.7\n\n### [0.7.2] - 2017-01-09\n\n#### Added\n\n- Support service environment variables and defaults in `jupyterhub-singleuser`\n  for easier deployment of notebook servers as a Service.\n- Add `--group` parameter for deploying `jupyterhub-singleuser` as a Service with group authentication.\n- Include URL parameters when redirecting through `/user-redirect/`\n\n### Fixed\n\n- Fix group authentication for HubAuthenticated services\n\n### [0.7.1] - 2017-01-02\n\n#### Added\n\n- `Spawner.will_resume` for signaling that a single-user server is paused instead of stopped.\n  This is needed for cases like `DockerSpawner.remove_containers = False`,\n  where the first API token is re-used for subsequent spawns.\n- Warning on startup about single-character usernames,\n  caused by common `set('string')` typo in config.\n\n#### Fixed\n\n- Removed spurious warning about empty `next_url`, which is AOK.\n\n### [0.7.0] - 2016-12-2\n\n#### Added\n\n- Implement Services API [\\#705](https://github.com/jupyterhub/jupyterhub/pull/705)\n- Add `/api/` and `/api/info` endpoints [\\#675](https://github.com/jupyterhub/jupyterhub/pull/675)\n- Add documentation for JupyterLab, pySpark configuration, troubleshooting,\n  and more.\n- Add logging of error if adding users already in database. [\\#689](https://github.com/jupyterhub/jupyterhub/pull/689)\n- Add HubAuth class for authenticating with JupyterHub. This class can\n  be used by any application, even outside tornado.\n- Add user groups.\n- Add `/hub/user-redirect/...` URL for redirecting users to a file on their own server.\n\n#### Changed\n\n- Always install with setuptools but not eggs (effectively require\n  `pip install .`) [\\#722](https://github.com/jupyterhub/jupyterhub/pull/722)\n- Updated formatting of changelog. [\\#711](https://github.com/jupyterhub/jupyterhub/pull/711)\n- Single-user server is provided by JupyterHub package, so single-user servers depend on JupyterHub now.\n\n#### Fixed\n\n- Fix docker repository location [\\#719](https://github.com/jupyterhub/jupyterhub/pull/719)\n- Fix swagger spec conformance and timestamp type in API spec\n- Various redirect-loop-causing bugs have been fixed.\n\n#### Removed\n\n- Deprecate `--no-ssl` command line option. It has no meaning and warns if\n  used. [\\#789](https://github.com/jupyterhub/jupyterhub/pull/789)\n- Deprecate `%U` username substitution in favor of `{username}`. [\\#748](https://github.com/jupyterhub/jupyterhub/pull/748)\n- Removed deprecated SwarmSpawner link. [\\#699](https://github.com/jupyterhub/jupyterhub/pull/699)\n\n## 0.6\n\n### [0.6.1] - 2016-05-04\n\nBugfixes on 0.6:\n\n- statsd is an optional dependency, only needed if in use\n- Notice more quickly when servers have crashed\n- Better error pages for proxy errors\n- Add Stop All button to admin panel for stopping all servers at once\n\n### [0.6.0] - 2016-04-25\n\n- JupyterHub has moved to a new `jupyterhub` namespace on GitHub and Docker. What was `juptyer/jupyterhub` is now `jupyterhub/jupyterhub`, etc.\n- `jupyterhub/jupyterhub` image on DockerHub no longer loads the jupyterhub_config.py in an ONBUILD step. A new `jupyterhub/jupyterhub-onbuild` image does this\n- Add statsd support, via `c.JupyterHub.statsd_{host,port,prefix}`\n- Update to traitlets 4.1 `@default`, `@observe` APIs for traits\n- Allow disabling PAM sessions via `c.PAMAuthenticator.open_sessions = False`. This may be needed on SELinux-enabled systems, where our PAM session logic often does not work properly\n- Add `Spawner.environment` configurable, for defining extra environment variables to load for single-user servers\n- JupyterHub API tokens can be pregenerated and loaded via `JupyterHub.api_tokens`, a dict of `token: username`.\n- JupyterHub API tokens can be requested via the REST API, with a POST request to `/api/authorizations/token`.\n  This can only be used if the Authenticator has a username and password.\n- Various fixes for user URLs and redirects\n\n## [0.5] - 2016-03-07\n\n- Single-user server must be run with Jupyter Notebook \u2265 4.0\n- Require `--no-ssl` confirmation to allow the Hub to be run without SSL (e.g. behind SSL termination in nginx)\n- Add lengths to text fields for MySQL support\n- Add `Spawner.disable_user_config` for preventing user-owned configuration from modifying single-user servers.\n- Fixes for MySQL support.\n- Add ability to run each user's server on its own subdomain. Requires wildcard DNS and wildcard SSL to be feasible. Enable subdomains by setting `JupyterHub.subdomain_host = 'https://jupyterhub.domain.tld[:port]'`.\n- Use `127.0.0.1` for local communication instead of `localhost`, avoiding issues with DNS on some systems.\n- Fix race that could add users to proxy prematurely if spawning is slow.\n\n## 0.4\n\n### [0.4.1] - 2016-02-03\n\nFix removal of `/login` page in 0.4.0, breaking some OAuth providers.\n\n### [0.4.0] - 2016-02-01\n\n- Add `Spawner.user_options_form` for specifying an HTML form to present to users,\n  allowing users to influence the spawning of their own servers.\n- Add `Authenticator.pre_spawn_start` and `Authenticator.post_spawn_stop` hooks,\n  so that Authenticators can do setup or teardown (e.g. passing credentials to Spawner,\n  mounting data sources, etc.).\n  These methods are typically used with custom Authenticator+Spawner pairs.\n- 0.4 will be the last JupyterHub release where single-user servers running IPython 3 is supported instead of Notebook \u2265 4.0.\n\n## [0.3] - 2015-11-04\n\n- No longer make the user starting the Hub an admin\n- start PAM sessions on login\n- hooks for Authenticators to fire before spawners start and after they stop,\n  allowing deeper interaction between Spawner/Authenticator pairs.\n- login redirect fixes\n\n## [0.2] - 2015-07-12\n\n- Based on standalone traitlets instead of IPython.utils.traitlets\n- multiple users in admin panel\n- Fixes for usernames that require escaping\n\n## 0.1 - 2015-03-07\n\nFirst preview release\n\n[unreleased]: https://github.com/jupyterhub/jupyterhub/compare/1.4.1...HEAD\n[1.4.2]: https://github.com/jupyterhub/jupyterhub/compare/1.4.1...1.4.2\n[1.4.1]: https://github.com/jupyterhub/jupyterhub/compare/1.4.0...1.4.1\n[1.4.0]: https://github.com/jupyterhub/jupyterhub/compare/1.3.0...1.4.0\n[1.3.0]: https://github.com/jupyterhub/jupyterhub/compare/1.2.1...1.3.0\n[1.2.2]: https://github.com/jupyterhub/jupyterhub/compare/1.2.1...1.2.2\n[1.2.1]: https://github.com/jupyterhub/jupyterhub/compare/1.2.0...1.2.1\n[1.2.0]: https://github.com/jupyterhub/jupyterhub/compare/1.1.0...1.2.0\n[1.1.0]: https://github.com/jupyterhub/jupyterhub/compare/1.0.0...1.1.0\n[1.0.0]: https://github.com/jupyterhub/jupyterhub/compare/0.9.6...1.0.0\n[0.9.6]: https://github.com/jupyterhub/jupyterhub/compare/0.9.4...0.9.6\n[0.9.4]: https://github.com/jupyterhub/jupyterhub/compare/0.9.3...0.9.4\n[0.9.3]: https://github.com/jupyterhub/jupyterhub/compare/0.9.2...0.9.3\n[0.9.2]: https://github.com/jupyterhub/jupyterhub/compare/0.9.1...0.9.2\n[0.9.1]: https://github.com/jupyterhub/jupyterhub/compare/0.9.0...0.9.1\n[0.9.0]: https://github.com/jupyterhub/jupyterhub/compare/0.8.1...0.9.0\n[0.8.1]: https://github.com/jupyterhub/jupyterhub/compare/0.8.0...0.8.1\n[0.8.0]: https://github.com/jupyterhub/jupyterhub/compare/0.7.2...0.8.0\n[0.7.2]: https://github.com/jupyterhub/jupyterhub/compare/0.7.1...0.7.2\n[0.7.1]: https://github.com/jupyterhub/jupyterhub/compare/0.7.0...0.7.1\n[0.7.0]: https://github.com/jupyterhub/jupyterhub/compare/0.6.1...0.7.0\n[0.6.1]: https://github.com/jupyterhub/jupyterhub/compare/0.6.0...0.6.1\n[0.6.0]: https://github.com/jupyterhub/jupyterhub/compare/0.5.0...0.6.0\n[0.5]: https://github.com/jupyterhub/jupyterhub/compare/0.4.1...0.5.0\n[0.4.1]: https://github.com/jupyterhub/jupyterhub/compare/0.4.0...0.4.1\n[0.4.0]: https://github.com/jupyterhub/jupyterhub/compare/0.3.0...0.4.0\n[0.3]: https://github.com/jupyterhub/jupyterhub/compare/0.2.0...0.3.0\n[0.2]: https://github.com/jupyterhub/jupyterhub/compare/0.1.0...0.2.0\n", "\"\"\"Authenticating services with JupyterHub.\n\nCookies are sent to the Hub for verification. The Hub replies with a JSON\nmodel describing the authenticated user.\n\n``HubAuth`` can be used in any application, even outside tornado.\n\n``HubAuthenticated`` is a mixin class for tornado handlers that should\nauthenticate with the Hub.\n\n\"\"\"\nimport base64\nimport json\nimport os\nimport random\nimport re\nimport socket\nimport string\nimport time\nimport uuid\nimport warnings\nfrom unittest import mock\nfrom urllib.parse import quote\nfrom urllib.parse import urlencode\n\nimport requests\nfrom tornado.httputil import url_concat\nfrom tornado.log import app_log\nfrom tornado.web import HTTPError\nfrom tornado.web import RequestHandler\nfrom traitlets import default\nfrom traitlets import Dict\nfrom traitlets import Instance\nfrom traitlets import Integer\nfrom traitlets import observe\nfrom traitlets import Unicode\nfrom traitlets import validate\nfrom traitlets.config import SingletonConfigurable\n\nfrom ..utils import url_path_join\n\n\nclass _ExpiringDict(dict):\n    \"\"\"Dict-like cache for Hub API requests\n\n    Values will expire after max_age seconds.\n\n    A monotonic timer is used (time.monotonic).\n\n    A max_age of 0 means cache forever.\n    \"\"\"\n\n    max_age = 0\n\n    def __init__(self, max_age=0):\n        self.max_age = max_age\n        self.timestamps = {}\n        self.values = {}\n\n    def __setitem__(self, key, value):\n        \"\"\"Store key and record timestamp\"\"\"\n        self.timestamps[key] = time.monotonic()\n        self.values[key] = value\n\n    def __repr__(self):\n        \"\"\"include values and timestamps in repr\"\"\"\n        now = time.monotonic()\n        return repr(\n            {\n                key: '{value} (age={age:.0f}s)'.format(\n                    value=repr(value)[:16] + '...', age=now - self.timestamps[key]\n                )\n                for key, value in self.values.items()\n            }\n        )\n\n    def _check_age(self, key):\n        \"\"\"Check timestamp for a key\"\"\"\n        if key not in self.values:\n            # not registered, nothing to do\n            return\n        now = time.monotonic()\n        timestamp = self.timestamps[key]\n        if self.max_age > 0 and timestamp + self.max_age < now:\n            self.values.pop(key)\n            self.timestamps.pop(key)\n\n    def __contains__(self, key):\n        \"\"\"dict check for `key in dict`\"\"\"\n        self._check_age(key)\n        return key in self.values\n\n    def __getitem__(self, key):\n        \"\"\"Check age before returning value\"\"\"\n        self._check_age(key)\n        return self.values[key]\n\n    def get(self, key, default=None):\n        \"\"\"dict-like get:\"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def clear(self):\n        \"\"\"Clear the cache\"\"\"\n        self.values.clear()\n        self.timestamps.clear()\n\n\nclass HubAuth(SingletonConfigurable):\n    \"\"\"A class for authenticating with JupyterHub\n\n    This can be used by any application.\n\n    If using tornado, use via :class:`HubAuthenticated` mixin.\n    If using manually, use the ``.user_for_cookie(cookie_value)`` method\n    to identify the user corresponding to a given cookie value.\n\n    The following config must be set:\n\n    - api_token (token for authenticating with JupyterHub API),\n      fetched from the JUPYTERHUB_API_TOKEN env by default.\n\n    The following config MAY be set:\n\n    - api_url: the base URL of the Hub's internal API,\n      fetched from JUPYTERHUB_API_URL by default.\n    - cookie_cache_max_age: the number of seconds responses\n      from the Hub should be cached.\n    - login_url (the *public* ``/hub/login`` URL of the Hub).\n    - cookie_name: the name of the cookie I should be using,\n      if different from the default (unlikely).\n\n    \"\"\"\n\n    hub_host = Unicode(\n        '',\n        help=\"\"\"The public host of JupyterHub\n        \n        Only used if JupyterHub is spreading servers across subdomains.\n        \"\"\",\n    ).tag(config=True)\n\n    @default('hub_host')\n    def _default_hub_host(self):\n        return os.getenv('JUPYTERHUB_HOST', '')\n\n    base_url = Unicode(\n        os.getenv('JUPYTERHUB_SERVICE_PREFIX') or '/',\n        help=\"\"\"The base URL prefix of this application\n\n        e.g. /services/service-name/ or /user/name/\n\n        Default: get from JUPYTERHUB_SERVICE_PREFIX\n        \"\"\",\n    ).tag(config=True)\n\n    @validate('base_url')\n    def _add_slash(self, proposal):\n        \"\"\"Ensure base_url starts and ends with /\"\"\"\n        value = proposal['value']\n        if not value.startswith('/'):\n            value = '/' + value\n        if not value.endswith('/'):\n            value = value + '/'\n        return value\n\n    # where is the hub\n    api_url = Unicode(\n        os.getenv('JUPYTERHUB_API_URL') or 'http://127.0.0.1:8081/hub/api',\n        help=\"\"\"The base API URL of the Hub.\n\n        Typically `http://hub-ip:hub-port/hub/api`\n        \"\"\",\n    ).tag(config=True)\n\n    @default('api_url')\n    def _api_url(self):\n        env_url = os.getenv('JUPYTERHUB_API_URL')\n        if env_url:\n            return env_url\n        else:\n            return 'http://127.0.0.1:8081' + url_path_join(self.hub_prefix, 'api')\n\n    api_token = Unicode(\n        os.getenv('JUPYTERHUB_API_TOKEN', ''),\n        help=\"\"\"API key for accessing Hub API.\n\n        Generate with `jupyterhub token [username]` or add to JupyterHub.services config.\n        \"\"\",\n    ).tag(config=True)\n\n    hub_prefix = Unicode(\n        '/hub/',\n        help=\"\"\"The URL prefix for the Hub itself.\n\n        Typically /hub/\n        \"\"\",\n    ).tag(config=True)\n\n    @default('hub_prefix')\n    def _default_hub_prefix(self):\n        return url_path_join(os.getenv('JUPYTERHUB_BASE_URL') or '/', 'hub') + '/'\n\n    login_url = Unicode(\n        '/hub/login',\n        help=\"\"\"The login URL to use\n\n        Typically /hub/login\n        \"\"\",\n    ).tag(config=True)\n\n    @default('login_url')\n    def _default_login_url(self):\n        return self.hub_host + url_path_join(self.hub_prefix, 'login')\n\n    keyfile = Unicode(\n        os.getenv('JUPYTERHUB_SSL_KEYFILE', ''),\n        help=\"\"\"The ssl key to use for requests\n\n        Use with certfile\n        \"\"\",\n    ).tag(config=True)\n\n    certfile = Unicode(\n        os.getenv('JUPYTERHUB_SSL_CERTFILE', ''),\n        help=\"\"\"The ssl cert to use for requests\n\n        Use with keyfile\n        \"\"\",\n    ).tag(config=True)\n\n    client_ca = Unicode(\n        os.getenv('JUPYTERHUB_SSL_CLIENT_CA', ''),\n        help=\"\"\"The ssl certificate authority to use to verify requests\n\n        Use with keyfile and certfile\n        \"\"\",\n    ).tag(config=True)\n\n    cookie_name = Unicode(\n        'jupyterhub-services', help=\"\"\"The name of the cookie I should be looking for\"\"\"\n    ).tag(config=True)\n\n    cookie_options = Dict(\n        help=\"\"\"Additional options to pass when setting cookies.\n\n        Can include things like `expires_days=None` for session-expiry\n        or `secure=True` if served on HTTPS and default HTTPS discovery fails\n        (e.g. behind some proxies).\n        \"\"\"\n    ).tag(config=True)\n\n    @default('cookie_options')\n    def _default_cookie_options(self):\n        # load default from env\n        options_env = os.environ.get('JUPYTERHUB_COOKIE_OPTIONS')\n        if options_env:\n            return json.loads(options_env)\n        else:\n            return {}\n\n    cookie_cache_max_age = Integer(help=\"DEPRECATED. Use cache_max_age\")\n\n    @observe('cookie_cache_max_age')\n    def _deprecated_cookie_cache(self, change):\n        warnings.warn(\n            \"cookie_cache_max_age is deprecated in JupyterHub 0.8. Use cache_max_age instead.\"\n        )\n        self.cache_max_age = change.new\n\n    cache_max_age = Integer(\n        300,\n        help=\"\"\"The maximum time (in seconds) to cache the Hub's responses for authentication.\n\n        A larger value reduces load on the Hub and occasional response lag.\n        A smaller value reduces propagation time of changes on the Hub (rare).\n\n        Default: 300 (five minutes)\n        \"\"\",\n    ).tag(config=True)\n    cache = Instance(_ExpiringDict, allow_none=False)\n\n    @default('cache')\n    def _default_cache(self):\n        return _ExpiringDict(self.cache_max_age)\n\n    def _check_hub_authorization(self, url, cache_key=None, use_cache=True):\n        \"\"\"Identify a user with the Hub\n\n        Args:\n            url (str): The API URL to check the Hub for authorization\n                       (e.g. http://127.0.0.1:8081/hub/api/authorizations/token/abc-def)\n            cache_key (str): The key for checking the cache\n            use_cache (bool): Specify use_cache=False to skip cached cookie values (default: True)\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n\n        Raises an HTTPError if the request failed for a reason other than no such user.\n        \"\"\"\n        if use_cache:\n            if cache_key is None:\n                raise ValueError(\"cache_key is required when using cache\")\n            # check for a cached reply, so we don't check with the Hub if we don't have to\n            try:\n                return self.cache[cache_key]\n            except KeyError:\n                app_log.debug(\"HubAuth cache miss: %s\", cache_key)\n\n        data = self._api_request('GET', url, allow_404=True)\n        if data is None:\n            app_log.warning(\"No Hub user identified for request\")\n        else:\n            app_log.debug(\"Received request from Hub user %s\", data)\n        if use_cache:\n            # cache result\n            self.cache[cache_key] = data\n        return data\n\n    def _api_request(self, method, url, **kwargs):\n        \"\"\"Make an API request\"\"\"\n        allow_404 = kwargs.pop('allow_404', False)\n        headers = kwargs.setdefault('headers', {})\n        headers.setdefault('Authorization', 'token %s' % self.api_token)\n        if \"cert\" not in kwargs and self.certfile and self.keyfile:\n            kwargs[\"cert\"] = (self.certfile, self.keyfile)\n            if self.client_ca:\n                kwargs[\"verify\"] = self.client_ca\n        try:\n            r = requests.request(method, url, **kwargs)\n        except requests.ConnectionError as e:\n            app_log.error(\"Error connecting to %s: %s\", self.api_url, e)\n            msg = \"Failed to connect to Hub API at %r.\" % self.api_url\n            msg += (\n                \"  Is the Hub accessible at this URL (from host: %s)?\"\n                % socket.gethostname()\n            )\n            if '127.0.0.1' in self.api_url:\n                msg += (\n                    \"  Make sure to set c.JupyterHub.hub_ip to an IP accessible to\"\n                    + \" single-user servers if the servers are not on the same host as the Hub.\"\n                )\n            raise HTTPError(500, msg)\n\n        data = None\n        if r.status_code == 404 and allow_404:\n            pass\n        elif r.status_code == 403:\n            app_log.error(\n                \"I don't have permission to check authorization with JupyterHub, my auth token may have expired: [%i] %s\",\n                r.status_code,\n                r.reason,\n            )\n            app_log.error(r.text)\n            raise HTTPError(\n                500, \"Permission failure checking authorization, I may need a new token\"\n            )\n        elif r.status_code >= 500:\n            app_log.error(\n                \"Upstream failure verifying auth token: [%i] %s\",\n                r.status_code,\n                r.reason,\n            )\n            app_log.error(r.text)\n            raise HTTPError(502, \"Failed to check authorization (upstream problem)\")\n        elif r.status_code >= 400:\n            app_log.warning(\n                \"Failed to check authorization: [%i] %s\", r.status_code, r.reason\n            )\n            app_log.warning(r.text)\n            msg = \"Failed to check authorization\"\n            # pass on error from oauth failure\n            try:\n                response = r.json()\n                # prefer more specific 'error_description', fallback to 'error'\n                description = response.get(\n                    \"error_description\", response.get(\"error\", \"Unknown error\")\n                )\n            except Exception:\n                pass\n            else:\n                msg += \": \" + description\n            raise HTTPError(500, msg)\n        else:\n            data = r.json()\n\n        return data\n\n    def user_for_cookie(self, encrypted_cookie, use_cache=True, session_id=''):\n        \"\"\"Ask the Hub to identify the user for a given cookie.\n\n        Args:\n            encrypted_cookie (str): the cookie value (not decrypted, the Hub will do that)\n            use_cache (bool): Specify use_cache=False to skip cached cookie values (default: True)\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n\n            The 'name' field contains the user's name.\n        \"\"\"\n        return self._check_hub_authorization(\n            url=url_path_join(\n                self.api_url,\n                \"authorizations/cookie\",\n                self.cookie_name,\n                quote(encrypted_cookie, safe=''),\n            ),\n            cache_key='cookie:{}:{}'.format(session_id, encrypted_cookie),\n            use_cache=use_cache,\n        )\n\n    def user_for_token(self, token, use_cache=True, session_id=''):\n        \"\"\"Ask the Hub to identify the user for a given token.\n\n        Args:\n            token (str): the token\n            use_cache (bool): Specify use_cache=False to skip cached cookie values (default: True)\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n\n            The 'name' field contains the user's name.\n        \"\"\"\n        return self._check_hub_authorization(\n            url=url_path_join(\n                self.api_url, \"authorizations/token\", quote(token, safe='')\n            ),\n            cache_key='token:{}:{}'.format(session_id, token),\n            use_cache=use_cache,\n        )\n\n    auth_header_name = 'Authorization'\n    auth_header_pat = re.compile(r'token\\s+(.+)', re.IGNORECASE)\n\n    def get_token(self, handler):\n        \"\"\"Get the user token from a request\n\n        - in URL parameters: ?token=<token>\n        - in header: Authorization: token <token>\n        \"\"\"\n\n        user_token = handler.get_argument('token', '')\n        if not user_token:\n            # get it from Authorization header\n            m = self.auth_header_pat.match(\n                handler.request.headers.get(self.auth_header_name, '')\n            )\n            if m:\n                user_token = m.group(1)\n        return user_token\n\n    def _get_user_cookie(self, handler):\n        \"\"\"Get the user model from a cookie\"\"\"\n        encrypted_cookie = handler.get_cookie(self.cookie_name)\n        session_id = self.get_session_id(handler)\n        if encrypted_cookie:\n            return self.user_for_cookie(encrypted_cookie, session_id=session_id)\n\n    def get_session_id(self, handler):\n        \"\"\"Get the jupyterhub session id\n\n        from the jupyterhub-session-id cookie.\n        \"\"\"\n        return handler.get_cookie('jupyterhub-session-id', '')\n\n    def get_user(self, handler):\n        \"\"\"Get the Hub user for a given tornado handler.\n\n        Checks cookie with the Hub to identify the current user.\n\n        Args:\n            handler (tornado.web.RequestHandler): the current request handler\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n\n            The 'name' field contains the user's name.\n        \"\"\"\n\n        # only allow this to be called once per handler\n        # avoids issues if an error is raised,\n        # since this may be called again when trying to render the error page\n        if hasattr(handler, '_cached_hub_user'):\n            return handler._cached_hub_user\n\n        handler._cached_hub_user = user_model = None\n        session_id = self.get_session_id(handler)\n\n        # check token first\n        token = self.get_token(handler)\n        if token:\n            user_model = self.user_for_token(token, session_id=session_id)\n            if user_model:\n                handler._token_authenticated = True\n\n        # no token, check cookie\n        if user_model is None:\n            user_model = self._get_user_cookie(handler)\n\n        # cache result\n        handler._cached_hub_user = user_model\n        if not user_model:\n            app_log.debug(\"No user identified\")\n        return user_model\n\n\nclass HubOAuth(HubAuth):\n    \"\"\"HubAuth using OAuth for login instead of cookies set by the Hub.\n\n    .. versionadded: 0.8\n    \"\"\"\n\n    # Overrides of HubAuth API\n\n    @default('login_url')\n    def _login_url(self):\n        return url_concat(\n            self.oauth_authorization_url,\n            {\n                'client_id': self.oauth_client_id,\n                'redirect_uri': self.oauth_redirect_uri,\n                'response_type': 'code',\n            },\n        )\n\n    @property\n    def cookie_name(self):\n        \"\"\"Use OAuth client_id for cookie name\n\n        because we don't want to use the same cookie name\n        across OAuth clients.\n        \"\"\"\n        return self.oauth_client_id\n\n    @property\n    def state_cookie_name(self):\n        \"\"\"The cookie name for storing OAuth state\n\n        This cookie is only live for the duration of the OAuth handshake.\n        \"\"\"\n        return self.cookie_name + '-oauth-state'\n\n    def _get_user_cookie(self, handler):\n        token = handler.get_secure_cookie(self.cookie_name)\n        session_id = self.get_session_id(handler)\n        if token:\n            token = token.decode('ascii', 'replace')\n            user_model = self.user_for_token(token, session_id=session_id)\n            if user_model is None:\n                app_log.warning(\"Token stored in cookie may have expired\")\n                handler.clear_cookie(self.cookie_name)\n            return user_model\n\n    # HubOAuth API\n\n    oauth_client_id = Unicode(\n        help=\"\"\"The OAuth client ID for this application.\n        \n        Use JUPYTERHUB_CLIENT_ID by default.\n        \"\"\"\n    ).tag(config=True)\n\n    @default('oauth_client_id')\n    def _client_id(self):\n        return os.getenv('JUPYTERHUB_CLIENT_ID', '')\n\n    @validate('oauth_client_id', 'api_token')\n    def _ensure_not_empty(self, proposal):\n        if not proposal.value:\n            raise ValueError(\"%s cannot be empty.\" % proposal.trait.name)\n        return proposal.value\n\n    oauth_redirect_uri = Unicode(\n        help=\"\"\"OAuth redirect URI\n        \n        Should generally be /base_url/oauth_callback\n        \"\"\"\n    ).tag(config=True)\n\n    @default('oauth_redirect_uri')\n    def _default_redirect(self):\n        return os.getenv('JUPYTERHUB_OAUTH_CALLBACK_URL') or url_path_join(\n            self.base_url, 'oauth_callback'\n        )\n\n    oauth_authorization_url = Unicode(\n        '/hub/api/oauth2/authorize',\n        help=\"The URL to redirect to when starting the OAuth process\",\n    ).tag(config=True)\n\n    @default('oauth_authorization_url')\n    def _auth_url(self):\n        return self.hub_host + url_path_join(self.hub_prefix, 'api/oauth2/authorize')\n\n    oauth_token_url = Unicode(\n        help=\"\"\"The URL for requesting an OAuth token from JupyterHub\"\"\"\n    ).tag(config=True)\n\n    @default('oauth_token_url')\n    def _token_url(self):\n        return url_path_join(self.api_url, 'oauth2/token')\n\n    def token_for_code(self, code):\n        \"\"\"Get token for OAuth temporary code\n\n        This is the last step of OAuth login.\n        Should be called in OAuth Callback handler.\n\n        Args:\n            code (str): oauth code for finishing OAuth login\n        Returns:\n            token (str): JupyterHub API Token\n        \"\"\"\n        # GitHub specifies a POST request yet requires URL parameters\n        params = dict(\n            client_id=self.oauth_client_id,\n            client_secret=self.api_token,\n            grant_type='authorization_code',\n            code=code,\n            redirect_uri=self.oauth_redirect_uri,\n        )\n\n        token_reply = self._api_request(\n            'POST',\n            self.oauth_token_url,\n            data=urlencode(params).encode('utf8'),\n            headers={'Content-Type': 'application/x-www-form-urlencoded'},\n        )\n\n        return token_reply['access_token']\n\n    def _encode_state(self, state):\n        \"\"\"Encode a state dict as url-safe base64\"\"\"\n        # trim trailing `=` because = is itself not url-safe!\n        json_state = json.dumps(state)\n        return (\n            base64.urlsafe_b64encode(json_state.encode('utf8'))\n            .decode('ascii')\n            .rstrip('=')\n        )\n\n    def _decode_state(self, b64_state):\n        \"\"\"Decode a base64 state\n\n        Always returns a dict.\n        The dict will be empty if the state is invalid.\n        \"\"\"\n        if isinstance(b64_state, str):\n            b64_state = b64_state.encode('ascii')\n        if len(b64_state) != 4:\n            # restore padding\n            b64_state = b64_state + (b'=' * (4 - len(b64_state) % 4))\n        try:\n            json_state = base64.urlsafe_b64decode(b64_state).decode('utf8')\n        except ValueError:\n            app_log.error(\"Failed to b64-decode state: %r\", b64_state)\n            return {}\n        try:\n            return json.loads(json_state)\n        except ValueError:\n            app_log.error(\"Failed to json-decode state: %r\", json_state)\n            return {}\n\n    def set_state_cookie(self, handler, next_url=None):\n        \"\"\"Generate an OAuth state and store it in a cookie\n\n        Parameters\n        ----------\n        handler : RequestHandler\n            A tornado RequestHandler\n        next_url : str\n            The page to redirect to on successful login\n\n        Returns\n        -------\n        state : str\n            The OAuth state that has been stored in the cookie (url safe, base64-encoded)\n        \"\"\"\n        extra_state = {}\n        if handler.get_cookie(self.state_cookie_name):\n            # oauth state cookie is already set\n            # use a randomized cookie suffix to avoid collisions\n            # in case of concurrent logins\n            app_log.warning(\"Detected unused OAuth state cookies\")\n            cookie_suffix = ''.join(\n                random.choice(string.ascii_letters) for i in range(8)\n            )\n            cookie_name = '{}-{}'.format(self.state_cookie_name, cookie_suffix)\n            extra_state['cookie_name'] = cookie_name\n        else:\n            cookie_name = self.state_cookie_name\n        b64_state = self.generate_state(next_url, **extra_state)\n        kwargs = {\n            'path': self.base_url,\n            'httponly': True,\n            # Expire oauth state cookie in ten minutes.\n            # Usually this will be cleared by completed login\n            # in less than a few seconds.\n            # OAuth that doesn't complete shouldn't linger too long.\n            'max_age': 600,\n        }\n        if handler.request.protocol == 'https':\n            kwargs['secure'] = True\n        # load user cookie overrides\n        kwargs.update(self.cookie_options)\n        handler.set_secure_cookie(cookie_name, b64_state, **kwargs)\n        return b64_state\n\n    def generate_state(self, next_url=None, **extra_state):\n        \"\"\"Generate a state string, given a next_url redirect target\n\n        Parameters\n        ----------\n        next_url : str\n            The URL of the page to redirect to on successful login.\n\n        Returns\n        -------\n        state (str): The base64-encoded state string.\n        \"\"\"\n        state = {'uuid': uuid.uuid4().hex, 'next_url': next_url}\n        state.update(extra_state)\n        return self._encode_state(state)\n\n    def get_next_url(self, b64_state=''):\n        \"\"\"Get the next_url for redirection, given an encoded OAuth state\"\"\"\n        state = self._decode_state(b64_state)\n        return state.get('next_url') or self.base_url\n\n    def get_state_cookie_name(self, b64_state=''):\n        \"\"\"Get the cookie name for oauth state, given an encoded OAuth state\n\n        Cookie name is stored in the state itself because the cookie name\n        is randomized to deal with races between concurrent oauth sequences.\n        \"\"\"\n        state = self._decode_state(b64_state)\n        return state.get('cookie_name') or self.state_cookie_name\n\n    def set_cookie(self, handler, access_token):\n        \"\"\"Set a cookie recording OAuth result\"\"\"\n        kwargs = {'path': self.base_url, 'httponly': True}\n        if handler.request.protocol == 'https':\n            kwargs['secure'] = True\n        # load user cookie overrides\n        kwargs.update(self.cookie_options)\n        app_log.debug(\n            \"Setting oauth cookie for %s: %s, %s\",\n            handler.request.remote_ip,\n            self.cookie_name,\n            kwargs,\n        )\n        handler.set_secure_cookie(self.cookie_name, access_token, **kwargs)\n\n    def clear_cookie(self, handler):\n        \"\"\"Clear the OAuth cookie\"\"\"\n        handler.clear_cookie(self.cookie_name, path=self.base_url)\n\n\nclass UserNotAllowed(Exception):\n    \"\"\"Exception raised when a user is identified and not allowed\"\"\"\n\n    def __init__(self, model):\n        self.model = model\n\n    def __str__(self):\n        return '<{cls} {kind}={name}>'.format(\n            cls=self.__class__.__name__,\n            kind=self.model['kind'],\n            name=self.model['name'],\n        )\n\n\nclass HubAuthenticated(object):\n    \"\"\"Mixin for tornado handlers that are authenticated with JupyterHub\n\n    A handler that mixes this in must have the following attributes/properties:\n\n    - .hub_auth: A HubAuth instance\n    - .hub_users: A set of usernames to allow.\n      If left unspecified or None, username will not be checked.\n    - .hub_groups: A set of group names to allow.\n      If left unspecified or None, groups will not be checked.\n\n    Examples::\n\n        class MyHandler(HubAuthenticated, web.RequestHandler):\n            hub_users = {'inara', 'mal'}\n\n            def initialize(self, hub_auth):\n                self.hub_auth = hub_auth\n\n            @web.authenticated\n            def get(self):\n                ...\n\n    \"\"\"\n\n    hub_services = None  # set of allowed services\n    hub_users = None  # set of allowed users\n    hub_groups = None  # set of allowed groups\n    allow_admin = False  # allow any admin user access\n\n    @property\n    def allow_all(self):\n        \"\"\"Property indicating that all successfully identified user\n        or service should be allowed.\n        \"\"\"\n        return (\n            self.hub_services is None\n            and self.hub_users is None\n            and self.hub_groups is None\n        )\n\n    # self.hub_auth must be a HubAuth instance.\n    # If nothing specified, use default config,\n    # which will be configured with defaults\n    # based on JupyterHub environment variables for services.\n    _hub_auth = None\n    hub_auth_class = HubAuth\n\n    @property\n    def hub_auth(self):\n        if self._hub_auth is None:\n            self._hub_auth = self.hub_auth_class.instance()\n        return self._hub_auth\n\n    @hub_auth.setter\n    def hub_auth(self, auth):\n        self._hub_auth = auth\n\n    def get_login_url(self):\n        \"\"\"Return the Hub's login URL\"\"\"\n        login_url = self.hub_auth.login_url\n        if isinstance(self.hub_auth, HubOAuth):\n            # add state argument to OAuth url\n            state = self.hub_auth.set_state_cookie(self, next_url=self.request.uri)\n            login_url = url_concat(login_url, {'state': state})\n        # temporary override at setting level,\n        # to allow any subclass overrides of get_login_url to preserve their effect\n        # for example, APIHandler raises 403 to prevent redirects\n        with mock.patch.dict(self.application.settings, {\"login_url\": login_url}):\n            app_log.debug(\"Redirecting to login url: %s\", login_url)\n            return super().get_login_url()\n\n    def check_hub_user(self, model):\n        \"\"\"Check whether Hub-authenticated user or service should be allowed.\n\n        Returns the input if the user should be allowed, None otherwise.\n\n        Override if you want to check anything other than the username's presence in hub_users list.\n\n        Args:\n            model (dict): the user or service model returned from :class:`HubAuth`\n        Returns:\n            user_model (dict): The user model if the user should be allowed, None otherwise.\n        \"\"\"\n\n        name = model['name']\n        kind = model.setdefault('kind', 'user')\n        if self.allow_all:\n            app_log.debug(\n                \"Allowing Hub %s %s (all Hub users and services allowed)\", kind, name\n            )\n            return model\n\n        if self.allow_admin and model.get('admin', False):\n            app_log.debug(\"Allowing Hub admin %s\", name)\n            return model\n\n        if kind == 'service':\n            # it's a service, check hub_services\n            if self.hub_services and name in self.hub_services:\n                app_log.debug(\"Allowing Hub service %s\", name)\n                return model\n            else:\n                app_log.warning(\"Not allowing Hub service %s\", name)\n                raise UserNotAllowed(model)\n\n        if self.hub_users and name in self.hub_users:\n            # user in allowed list\n            app_log.debug(\"Allowing Hub user %s\", name)\n            return model\n        elif self.hub_groups and set(model['groups']).intersection(self.hub_groups):\n            allowed_groups = set(model['groups']).intersection(self.hub_groups)\n            app_log.debug(\n                \"Allowing Hub user %s in group(s) %s\",\n                name,\n                ','.join(sorted(allowed_groups)),\n            )\n            # group in allowed list\n            return model\n        else:\n            app_log.warning(\"Not allowing Hub user %s\", name)\n            raise UserNotAllowed(model)\n\n    def get_current_user(self):\n        \"\"\"Tornado's authentication method\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n        \"\"\"\n        if hasattr(self, '_hub_auth_user_cache'):\n            return self._hub_auth_user_cache\n        user_model = self.hub_auth.get_user(self)\n        if not user_model:\n            self._hub_auth_user_cache = None\n            return\n        try:\n            self._hub_auth_user_cache = self.check_hub_user(user_model)\n        except UserNotAllowed as e:\n            # cache None, in case get_user is called again while processing the error\n            self._hub_auth_user_cache = None\n            # Override redirect so if/when tornado @web.authenticated\n            # tries to redirect to login URL, 403 will be raised instead.\n            # This is not the best, but avoids problems that can be caused\n            # when get_current_user is allowed to raise.\n            def raise_on_redirect(*args, **kwargs):\n                raise HTTPError(\n                    403, \"{kind} {name} is not allowed.\".format(**user_model)\n                )\n\n            self.redirect = raise_on_redirect\n            return\n        except Exception:\n            self._hub_auth_user_cache = None\n            raise\n\n        # store tokens passed via url or header in a cookie for future requests\n        url_token = self.hub_auth.get_token(self)\n        if (\n            user_model\n            and url_token\n            and getattr(self, '_token_authenticated', False)\n            and hasattr(self.hub_auth, 'set_cookie')\n        ):\n            # authenticated via `?token=`\n            # set a cookie for future requests\n            # hub_auth.set_cookie is only available on HubOAuth\n            self.hub_auth.set_cookie(self, url_token)\n        return self._hub_auth_user_cache\n\n\nclass HubOAuthenticated(HubAuthenticated):\n    \"\"\"Simple subclass of HubAuthenticated using OAuth instead of old shared cookies\"\"\"\n\n    hub_auth_class = HubOAuth\n\n\nclass HubOAuthCallbackHandler(HubOAuthenticated, RequestHandler):\n    \"\"\"OAuth Callback handler\n\n    Finishes the OAuth flow, setting a cookie to record the user's info.\n\n    Should be registered at ``SERVICE_PREFIX/oauth_callback``\n\n    .. versionadded: 0.8\n    \"\"\"\n\n    async def get(self):\n        error = self.get_argument(\"error\", False)\n        if error:\n            msg = self.get_argument(\"error_description\", error)\n            raise HTTPError(400, \"Error in oauth: %s\" % msg)\n\n        code = self.get_argument(\"code\", False)\n        if not code:\n            raise HTTPError(400, \"oauth callback made without a token\")\n\n        # validate OAuth state\n        arg_state = self.get_argument(\"state\", None)\n        if arg_state is None:\n            raise HTTPError(500, \"oauth state is missing. Try logging in again.\")\n        cookie_name = self.hub_auth.get_state_cookie_name(arg_state)\n        cookie_state = self.get_secure_cookie(cookie_name)\n        # clear cookie state now that we've consumed it\n        self.clear_cookie(cookie_name, path=self.hub_auth.base_url)\n        if isinstance(cookie_state, bytes):\n            cookie_state = cookie_state.decode('ascii', 'replace')\n        # check that state matches\n        if arg_state != cookie_state:\n            app_log.warning(\"oauth state %r != %r\", arg_state, cookie_state)\n            raise HTTPError(403, \"oauth state does not match. Try logging in again.\")\n        next_url = self.hub_auth.get_next_url(cookie_state)\n        # TODO: make async (in a Thread?)\n        token = self.hub_auth.token_for_code(code)\n        session_id = self.hub_auth.get_session_id(self)\n        user_model = self.hub_auth.user_for_token(token, session_id=session_id)\n        if user_model is None:\n            raise HTTPError(500, \"oauth callback failed to identify a user\")\n        app_log.info(\"Logged-in user %s\", user_model)\n        self.hub_auth.set_cookie(self, token)\n        self.redirect(next_url or self.hub_auth.base_url)\n", "#!/usr/bin/env python\n\"\"\"Mixins to regular notebook server to add JupyterHub auth.\n\nMeant to be compatible with jupyter_server and classic notebook\n\nUse make_singleuser_app to create a compatible Application class\nwith JupyterHub authentication mixins enabled.\n\"\"\"\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\nimport asyncio\nimport json\nimport logging\nimport os\nimport random\nimport secrets\nimport sys\nimport warnings\nfrom datetime import datetime\nfrom datetime import timezone\nfrom textwrap import dedent\nfrom urllib.parse import urlparse\n\nfrom jinja2 import ChoiceLoader\nfrom jinja2 import FunctionLoader\nfrom tornado import ioloop\nfrom tornado.httpclient import AsyncHTTPClient\nfrom tornado.httpclient import HTTPRequest\nfrom tornado.web import RequestHandler\nfrom traitlets import Any\nfrom traitlets import Bool\nfrom traitlets import Bytes\nfrom traitlets import CUnicode\nfrom traitlets import default\nfrom traitlets import import_item\nfrom traitlets import Integer\nfrom traitlets import observe\nfrom traitlets import TraitError\nfrom traitlets import Unicode\nfrom traitlets import validate\nfrom traitlets.config import Configurable\n\nfrom .._version import __version__\nfrom .._version import _check_version\nfrom ..log import log_request\nfrom ..services.auth import HubOAuth\nfrom ..services.auth import HubOAuthCallbackHandler\nfrom ..services.auth import HubOAuthenticated\nfrom ..utils import exponential_backoff\nfrom ..utils import isoformat\nfrom ..utils import make_ssl_context\nfrom ..utils import url_path_join\n\n\n# Authenticate requests with the Hub\n\n\nclass HubAuthenticatedHandler(HubOAuthenticated):\n    \"\"\"Class we are going to patch-in for authentication with the Hub\"\"\"\n\n    @property\n    def allow_admin(self):\n        return self.settings.get(\n            'admin_access', os.getenv('JUPYTERHUB_ADMIN_ACCESS') or False\n        )\n\n    @property\n    def hub_auth(self):\n        return self.settings['hub_auth']\n\n    @property\n    def hub_users(self):\n        return {self.settings['user']}\n\n    @property\n    def hub_groups(self):\n        if self.settings['group']:\n            return {self.settings['group']}\n        return set()\n\n\nclass JupyterHubLoginHandlerMixin:\n    \"\"\"LoginHandler that hooks up Hub authentication\"\"\"\n\n    @staticmethod\n    def login_available(settings):\n        return True\n\n    @staticmethod\n    def is_token_authenticated(handler):\n        \"\"\"Is the request token-authenticated?\"\"\"\n        if getattr(handler, '_cached_hub_user', None) is None:\n            # ensure get_user has been called, so we know if we're token-authenticated\n            handler.get_current_user()\n        return getattr(handler, '_token_authenticated', False)\n\n    @staticmethod\n    def get_user(handler):\n        \"\"\"alternative get_current_user to query the Hub\n\n        Thus shouldn't be called anymore because HubAuthenticatedHandler\n        should have already overridden get_current_user().\n\n        Keep here to protect uncommon circumstance of multiple BaseHandlers\n        from missing auth.\n\n        e.g. when multiple BaseHandler classes are used.\n        \"\"\"\n        if HubAuthenticatedHandler not in handler.__class__.mro():\n            warnings.warn(\n                f\"Expected to see HubAuthenticatedHandler in {handler.__class__}.mro(),\"\n                \" patching in at call time. Hub authentication is still applied.\",\n                RuntimeWarning,\n                stacklevel=2,\n            )\n            # patch HubAuthenticated into the instance\n            handler.__class__ = type(\n                handler.__class__.__name__,\n                (HubAuthenticatedHandler, handler.__class__),\n                {},\n            )\n            # patch into the class itself so this doesn't happen again for the same class\n            patch_base_handler(handler.__class__)\n        return handler.get_current_user()\n\n    @classmethod\n    def validate_security(cls, app, ssl_options=None):\n        \"\"\"Prevent warnings about security from base class\"\"\"\n        return\n\n\nclass JupyterHubLogoutHandlerMixin:\n    def get(self):\n        self.settings['hub_auth'].clear_cookie(self)\n        self.redirect(\n            self.settings['hub_host']\n            + url_path_join(self.settings['hub_prefix'], 'logout')\n        )\n\n\nclass OAuthCallbackHandlerMixin(HubOAuthCallbackHandler):\n    \"\"\"Mixin IPythonHandler to get the right error pages, etc.\"\"\"\n\n    @property\n    def hub_auth(self):\n        return self.settings['hub_auth']\n\n\n# register new hub related command-line aliases\naliases = {\n    'user': 'SingleUserNotebookApp.user',\n    'group': 'SingleUserNotebookApp.group',\n    'cookie-name': 'HubAuth.cookie_name',\n    'hub-prefix': 'SingleUserNotebookApp.hub_prefix',\n    'hub-host': 'SingleUserNotebookApp.hub_host',\n    'hub-api-url': 'SingleUserNotebookApp.hub_api_url',\n    'base-url': 'SingleUserNotebookApp.base_url',\n}\nflags = {\n    'disable-user-config': (\n        {'SingleUserNotebookApp': {'disable_user_config': True}},\n        \"Disable user-controlled configuration of the notebook server.\",\n    )\n}\n\n\npage_template = \"\"\"\n{% extends \"templates/page.html\" %}\n\n{% block header_buttons %}\n{{super()}}\n\n<span>\n    <a href='{{hub_control_panel_url}}'\n       class='btn btn-default btn-sm navbar-btn pull-right'\n       style='margin-right: 4px; margin-left: 2px;'>\n        Control Panel\n    </a>\n</span>\n{% endblock %}\n\n{% block logo %}\n<img src='{{logo_url}}' alt='Jupyter Notebook'/>\n{% endblock logo %}\n\n{% block script %}\n{{ super() }}\n<script type='text/javascript'>\n  function _remove_redirects_param() {\n    // remove ?redirects= param from URL so that\n    // successful page loads don't increment the redirect loop counter\n    if (window.location.search.length <= 1) {\n      return;\n    }\n    var search_parameters = window.location.search.slice(1).split('&');\n    for (var i = 0; i < search_parameters.length; i++) {\n      if (search_parameters[i].split('=')[0] === 'redirects') {\n        // remote token from search parameters\n        search_parameters.splice(i, 1);\n        var new_search = '';\n        if (search_parameters.length) {\n          new_search = '?' + search_parameters.join('&');\n        }\n        var new_url = window.location.origin +\n                      window.location.pathname +\n                      new_search +\n                      window.location.hash;\n        window.history.replaceState({}, \"\", new_url);\n        return;\n      }\n    }\n  }\n  _remove_redirects_param();\n</script>\n{% endblock script %}\n\"\"\"\n\n\ndef _exclude_home(path_list):\n    \"\"\"Filter out any entries in a path list that are in my home directory.\n\n    Used to disable per-user configuration.\n    \"\"\"\n    home = os.path.expanduser('~')\n    for p in path_list:\n        if not p.startswith(home):\n            yield p\n\n\nclass SingleUserNotebookAppMixin(Configurable):\n    \"\"\"A Subclass of the regular NotebookApp that is aware of the parent multiuser context.\"\"\"\n\n    description = dedent(\n        \"\"\"\n    Single-user server for JupyterHub. Extends the Jupyter Notebook server.\n\n    Meant to be invoked by JupyterHub Spawners, not directly.\n    \"\"\"\n    )\n\n    examples = \"\"\n    subcommands = {}\n    version = __version__\n\n    # must be set in mixin subclass\n    # make_singleuser_app sets these\n    # aliases = aliases\n    # flags = flags\n    # login_handler_class = JupyterHubLoginHandler\n    # logout_handler_class = JupyterHubLogoutHandler\n    # oauth_callback_handler_class = OAuthCallbackHandler\n    # classes = NotebookApp.classes + [HubOAuth]\n\n    # disable single-user app's localhost checking\n    allow_remote_access = True\n\n    # don't store cookie secrets\n    cookie_secret_file = ''\n    # always generate a new cookie secret on launch\n    # ensures that each spawn clears any cookies from previous session,\n    # triggering OAuth again\n    cookie_secret = Bytes()\n\n    def _cookie_secret_default(self):\n        return secrets.token_bytes(32)\n\n    user = CUnicode().tag(config=True)\n    group = CUnicode().tag(config=True)\n\n    @default('user')\n    def _default_user(self):\n        return os.environ.get('JUPYTERHUB_USER') or ''\n\n    @default('group')\n    def _default_group(self):\n        return os.environ.get('JUPYTERHUB_GROUP') or ''\n\n    @observe('user')\n    def _user_changed(self, change):\n        self.log.name = change.new\n\n    hub_host = Unicode().tag(config=True)\n\n    hub_prefix = Unicode('/hub/').tag(config=True)\n\n    @default('keyfile')\n    def _keyfile_default(self):\n        return os.environ.get('JUPYTERHUB_SSL_KEYFILE') or ''\n\n    @default('certfile')\n    def _certfile_default(self):\n        return os.environ.get('JUPYTERHUB_SSL_CERTFILE') or ''\n\n    @default('client_ca')\n    def _client_ca_default(self):\n        return os.environ.get('JUPYTERHUB_SSL_CLIENT_CA') or ''\n\n    @default('hub_prefix')\n    def _hub_prefix_default(self):\n        base_url = os.environ.get('JUPYTERHUB_BASE_URL') or '/'\n        return base_url + 'hub/'\n\n    hub_api_url = Unicode().tag(config=True)\n\n    @default('hub_api_url')\n    def _hub_api_url_default(self):\n        return os.environ.get('JUPYTERHUB_API_URL') or 'http://127.0.0.1:8081/hub/api'\n\n    # defaults for some configurables that may come from service env variables:\n    @default('base_url')\n    def _base_url_default(self):\n        return os.environ.get('JUPYTERHUB_SERVICE_PREFIX') or '/'\n\n    # Note: this may be removed if notebook module is >= 5.0.0b1\n    @validate('base_url')\n    def _validate_base_url(self, proposal):\n        \"\"\"ensure base_url starts and ends with /\"\"\"\n        value = proposal.value\n        if not value.startswith('/'):\n            value = '/' + value\n        if not value.endswith('/'):\n            value = value + '/'\n        return value\n\n    @default('port')\n    def _port_default(self):\n        if os.environ.get('JUPYTERHUB_SERVICE_URL'):\n            url = urlparse(os.environ['JUPYTERHUB_SERVICE_URL'])\n            if url.port:\n                return url.port\n            elif url.scheme == 'http':\n                return 80\n            elif url.scheme == 'https':\n                return 443\n        return 8888\n\n    @default('ip')\n    def _ip_default(self):\n        if os.environ.get('JUPYTERHUB_SERVICE_URL'):\n            url = urlparse(os.environ['JUPYTERHUB_SERVICE_URL'])\n            if url.hostname:\n                return url.hostname\n        return '127.0.0.1'\n\n    # disable some single-user configurables\n    token = ''\n    open_browser = False\n    quit_button = False\n    trust_xheaders = True\n\n    port_retries = (\n        0  # disable port-retries, since the Spawner will tell us what port to use\n    )\n\n    disable_user_config = Bool(\n        False,\n        help=\"\"\"Disable user configuration of single-user server.\n\n        Prevents user-writable files that normally configure the single-user server\n        from being loaded, ensuring admins have full control of configuration.\n        \"\"\",\n    ).tag(config=True)\n\n    @validate('notebook_dir')\n    def _notebook_dir_validate(self, proposal):\n        value = os.path.expanduser(proposal['value'])\n        # Strip any trailing slashes\n        # *except* if it's root\n        _, path = os.path.splitdrive(value)\n        if path == os.sep:\n            return value\n        value = value.rstrip(os.sep)\n        if not os.path.isabs(value):\n            # If we receive a non-absolute path, make it absolute.\n            value = os.path.abspath(value)\n        if not os.path.isdir(value):\n            raise TraitError(\"No such notebook dir: %r\" % value)\n        return value\n\n    @default('log_datefmt')\n    def _log_datefmt_default(self):\n        \"\"\"Exclude date from default date format\"\"\"\n        return \"%Y-%m-%d %H:%M:%S\"\n\n    @default('log_format')\n    def _log_format_default(self):\n        \"\"\"override default log format to include time\"\"\"\n        return \"%(color)s[%(levelname)1.1s %(asctime)s.%(msecs).03d %(name)s %(module)s:%(lineno)d]%(end_color)s %(message)s\"\n\n    def _confirm_exit(self):\n        # disable the exit confirmation for background notebook processes\n        self.io_loop.add_callback_from_signal(self.io_loop.stop)\n\n    def migrate_config(self):\n        if self.disable_user_config:\n            # disable config-migration when user config is disabled\n            return\n        else:\n            super().migrate_config()\n\n    @property\n    def config_file_paths(self):\n        path = super().config_file_paths\n\n        if self.disable_user_config:\n            # filter out user-writable config dirs if user config is disabled\n            path = list(_exclude_home(path))\n        return path\n\n    @property\n    def nbextensions_path(self):\n        path = super().nbextensions_path\n\n        if self.disable_user_config:\n            path = list(_exclude_home(path))\n        return path\n\n    @validate('static_custom_path')\n    def _validate_static_custom_path(self, proposal):\n        path = proposal['value']\n        if self.disable_user_config:\n            path = list(_exclude_home(path))\n        return path\n\n    # create dynamic default http client,\n    # configured with any relevant ssl config\n    hub_http_client = Any()\n\n    @default('hub_http_client')\n    def _default_client(self):\n        ssl_context = make_ssl_context(\n            self.keyfile, self.certfile, cafile=self.client_ca\n        )\n        AsyncHTTPClient.configure(None, defaults={\"ssl_options\": ssl_context})\n        return AsyncHTTPClient()\n\n    async def check_hub_version(self):\n        \"\"\"Test a connection to my Hub\n\n        - exit if I can't connect at all\n        - check version and warn on sufficient mismatch\n        \"\"\"\n        client = self.hub_http_client\n        RETRIES = 5\n        for i in range(1, RETRIES + 1):\n            try:\n                resp = await client.fetch(self.hub_api_url)\n            except Exception:\n                self.log.exception(\n                    \"Failed to connect to my Hub at %s (attempt %i/%i). Is it running?\",\n                    self.hub_api_url,\n                    i,\n                    RETRIES,\n                )\n                await asyncio.sleep(min(2 ** i, 16))\n            else:\n                break\n        else:\n            self.exit(1)\n\n        hub_version = resp.headers.get('X-JupyterHub-Version')\n        _check_version(hub_version, __version__, self.log)\n\n    server_name = Unicode()\n\n    @default('server_name')\n    def _server_name_default(self):\n        return os.environ.get('JUPYTERHUB_SERVER_NAME', '')\n\n    hub_activity_url = Unicode(\n        config=True, help=\"URL for sending JupyterHub activity updates\"\n    )\n\n    @default('hub_activity_url')\n    def _default_activity_url(self):\n        return os.environ.get('JUPYTERHUB_ACTIVITY_URL', '')\n\n    hub_activity_interval = Integer(\n        300,\n        config=True,\n        help=\"\"\"\n        Interval (in seconds) on which to update the Hub\n        with our latest activity.\n        \"\"\",\n    )\n\n    @default('hub_activity_interval')\n    def _default_activity_interval(self):\n        env_value = os.environ.get('JUPYTERHUB_ACTIVITY_INTERVAL')\n        if env_value:\n            return int(env_value)\n        else:\n            return 300\n\n    _last_activity_sent = Any(allow_none=True)\n\n    async def notify_activity(self):\n        \"\"\"Notify jupyterhub of activity\"\"\"\n        client = self.hub_http_client\n        last_activity = self.web_app.last_activity()\n        if not last_activity:\n            self.log.debug(\"No activity to send to the Hub\")\n            return\n        if last_activity:\n            # protect against mixed timezone comparisons\n            if not last_activity.tzinfo:\n                # assume naive timestamps are utc\n                self.log.warning(\"last activity is using naive timestamps\")\n                last_activity = last_activity.replace(tzinfo=timezone.utc)\n\n        if self._last_activity_sent and last_activity < self._last_activity_sent:\n            self.log.debug(\"No activity since %s\", self._last_activity_sent)\n            return\n\n        last_activity_timestamp = isoformat(last_activity)\n\n        async def notify():\n            self.log.debug(\"Notifying Hub of activity %s\", last_activity_timestamp)\n            req = HTTPRequest(\n                url=self.hub_activity_url,\n                method='POST',\n                headers={\n                    \"Authorization\": \"token {}\".format(self.hub_auth.api_token),\n                    \"Content-Type\": \"application/json\",\n                },\n                body=json.dumps(\n                    {\n                        'servers': {\n                            self.server_name: {'last_activity': last_activity_timestamp}\n                        },\n                        'last_activity': last_activity_timestamp,\n                    }\n                ),\n            )\n            try:\n                await client.fetch(req)\n            except Exception:\n                self.log.exception(\"Error notifying Hub of activity\")\n                return False\n            else:\n                return True\n\n        await exponential_backoff(\n            notify,\n            fail_message=\"Failed to notify Hub of activity\",\n            start_wait=1,\n            max_wait=15,\n            timeout=60,\n        )\n        self._last_activity_sent = last_activity\n\n    async def keep_activity_updated(self):\n        if not self.hub_activity_url or not self.hub_activity_interval:\n            self.log.warning(\"Activity events disabled\")\n            return\n        self.log.info(\n            \"Updating Hub with activity every %s seconds\", self.hub_activity_interval\n        )\n        while True:\n            try:\n                await self.notify_activity()\n            except Exception as e:\n                self.log.exception(\"Error notifying Hub of activity\")\n            # add 20% jitter to the interval to avoid alignment\n            # of lots of requests from user servers\n            t = self.hub_activity_interval * (1 + 0.2 * (random.random() - 0.5))\n            await asyncio.sleep(t)\n\n    def initialize(self, argv=None):\n        # disable trash by default\n        # this can be re-enabled by config\n        self.config.FileContentsManager.delete_to_trash = False\n        return super().initialize(argv)\n\n    def start(self):\n        self.log.info(\"Starting jupyterhub-singleuser server version %s\", __version__)\n        # start by hitting Hub to check version\n        ioloop.IOLoop.current().run_sync(self.check_hub_version)\n        ioloop.IOLoop.current().add_callback(self.keep_activity_updated)\n        super().start()\n\n    def init_hub_auth(self):\n        api_token = None\n        if os.getenv('JPY_API_TOKEN'):\n            # Deprecated env variable (as of 0.7.2)\n            api_token = os.environ['JPY_API_TOKEN']\n        if os.getenv('JUPYTERHUB_API_TOKEN'):\n            api_token = os.environ['JUPYTERHUB_API_TOKEN']\n\n        if not api_token:\n            self.exit(\n                \"JUPYTERHUB_API_TOKEN env is required to run jupyterhub-singleuser. Did you launch it manually?\"\n            )\n        self.hub_auth = HubOAuth(\n            parent=self,\n            api_token=api_token,\n            api_url=self.hub_api_url,\n            hub_prefix=self.hub_prefix,\n            base_url=self.base_url,\n            keyfile=self.keyfile,\n            certfile=self.certfile,\n            client_ca=self.client_ca,\n        )\n        # smoke check\n        if not self.hub_auth.oauth_client_id:\n            raise ValueError(\"Missing OAuth client ID\")\n\n    def init_webapp(self):\n        # load the hub-related settings into the tornado settings dict\n        self.init_hub_auth()\n        s = self.tornado_settings\n        s['log_function'] = log_request\n        s['user'] = self.user\n        s['group'] = self.group\n        s['hub_prefix'] = self.hub_prefix\n        s['hub_host'] = self.hub_host\n        s['hub_auth'] = self.hub_auth\n        csp_report_uri = s['csp_report_uri'] = self.hub_host + url_path_join(\n            self.hub_prefix, 'security/csp-report'\n        )\n        headers = s.setdefault('headers', {})\n        headers['X-JupyterHub-Version'] = __version__\n        # set CSP header directly to workaround bugs in jupyter/notebook 5.0\n        headers.setdefault(\n            'Content-Security-Policy',\n            ';'.join([\"frame-ancestors 'self'\", \"report-uri \" + csp_report_uri]),\n        )\n        super().init_webapp()\n\n        # add OAuth callback\n        self.web_app.add_handlers(\n            r\".*$\",\n            [\n                (\n                    urlparse(self.hub_auth.oauth_redirect_uri).path,\n                    self.oauth_callback_handler_class,\n                )\n            ],\n        )\n\n        # apply X-JupyterHub-Version to *all* request handlers (even redirects)\n        self.patch_default_headers()\n        self.patch_templates()\n\n    def patch_default_headers(self):\n        if hasattr(RequestHandler, '_orig_set_default_headers'):\n            return\n        RequestHandler._orig_set_default_headers = RequestHandler.set_default_headers\n\n        def set_jupyterhub_header(self):\n            self._orig_set_default_headers()\n            self.set_header('X-JupyterHub-Version', __version__)\n\n        RequestHandler.set_default_headers = set_jupyterhub_header\n\n    def patch_templates(self):\n        \"\"\"Patch page templates to add Hub-related buttons\"\"\"\n\n        self.jinja_template_vars['logo_url'] = self.hub_host + url_path_join(\n            self.hub_prefix, 'logo'\n        )\n        self.jinja_template_vars['hub_host'] = self.hub_host\n        self.jinja_template_vars['hub_prefix'] = self.hub_prefix\n        env = self.web_app.settings['jinja2_env']\n\n        env.globals['hub_control_panel_url'] = self.hub_host + url_path_join(\n            self.hub_prefix, 'home'\n        )\n\n        # patch jinja env loading to modify page template\n        def get_page(name):\n            if name == 'page.html':\n                return page_template\n\n        orig_loader = env.loader\n        env.loader = ChoiceLoader([FunctionLoader(get_page), orig_loader])\n\n\ndef detect_base_package(App):\n    \"\"\"Detect the base package for an App class\n\n    Will return 'notebook' or 'jupyter_server'\n    based on which package App subclasses from.\n\n    Will return None if neither is identified (e.g. fork package, or duck-typing).\n    \"\"\"\n    # guess notebook or jupyter_server based on App class inheritance\n    for cls in App.mro():\n        pkg = cls.__module__.split(\".\", 1)[0]\n        if pkg in {\"notebook\", \"jupyter_server\"}:\n            return pkg\n    return None\n\n\ndef _nice_cls_repr(cls):\n    \"\"\"Nice repr of classes, e.g. 'module.submod.Class'\n\n    Also accepts tuples of classes\n    \"\"\"\n    return f\"{cls.__module__}.{cls.__name__}\"\n\n\ndef patch_base_handler(BaseHandler, log=None):\n    \"\"\"Patch HubAuthenticated into a base handler class\n\n    so anything inheriting from BaseHandler uses Hub authentication.\n    This works *even after* subclasses have imported and inherited from BaseHandler.\n\n    .. versionadded: 1.5\n        Made available as an importable utility\n    \"\"\"\n    if log is None:\n        log = logging.getLogger()\n\n    if HubAuthenticatedHandler not in BaseHandler.__bases__:\n        new_bases = (HubAuthenticatedHandler,) + BaseHandler.__bases__\n        log.info(\n            \"Patching auth into {mod}.{name}({old_bases}) -> {name}({new_bases})\".format(\n                mod=BaseHandler.__module__,\n                name=BaseHandler.__name__,\n                old_bases=', '.join(\n                    _nice_cls_repr(cls) for cls in BaseHandler.__bases__\n                ),\n                new_bases=', '.join(_nice_cls_repr(cls) for cls in new_bases),\n            )\n        )\n        BaseHandler.__bases__ = new_bases\n        # We've now inserted our class as a parent of BaseHandler,\n        # but we also need to ensure BaseHandler *itself* doesn't\n        # override the public tornado API methods we have inserted.\n        # If they are defined in BaseHandler, explicitly replace them with our methods.\n        for name in (\"get_current_user\", \"get_login_url\"):\n            if name in BaseHandler.__dict__:\n                log.debug(\n                    f\"Overriding {BaseHandler}.{name} with HubAuthenticatedHandler.{name}\"\n                )\n                method = getattr(HubAuthenticatedHandler, name)\n                setattr(BaseHandler, name, method)\n    return BaseHandler\n\n\ndef _patch_app_base_handlers(app):\n    \"\"\"Patch Hub Authentication into the base handlers of an app\n\n    Patches HubAuthenticatedHandler into:\n\n    - App.base_handler_class (if defined)\n    - jupyter_server's JupyterHandler (if already imported)\n    - notebook's IPythonHandler (if already imported)\n    \"\"\"\n    BaseHandler = app_base_handler = getattr(app, \"base_handler_class\", None)\n\n    base_handlers = []\n    if BaseHandler is not None:\n        base_handlers.append(BaseHandler)\n\n    # patch juptyer_server and notebook handlers if they have been imported\n    for base_handler_name in [\n        \"jupyter_server.base.handlers.JupyterHandler\",\n        \"notebook.base.handlers.IPythonHandler\",\n    ]:\n        modname, _ = base_handler_name.rsplit(\".\", 1)\n        if modname in sys.modules:\n            base_handlers.append(import_item(base_handler_name))\n\n    if not base_handlers:\n        pkg = detect_base_package(app.__class__)\n        if pkg == \"jupyter_server\":\n            BaseHandler = import_item(\"jupyter_server.base.handlers.JupyterHandler\")\n        elif pkg == \"notebook\":\n            BaseHandler = import_item(\"notebook.base.handlers.IPythonHandler\")\n        else:\n            raise ValueError(\n                \"{}.base_handler_class must be defined\".format(app.__class__.__name__)\n            )\n        base_handlers.append(BaseHandler)\n\n    # patch-in HubAuthenticatedHandler to base handler classes\n    for BaseHandler in base_handlers:\n        patch_base_handler(BaseHandler)\n\n    # return the first entry\n    return base_handlers[0]\n\n\ndef make_singleuser_app(App):\n    \"\"\"Make and return a singleuser notebook app\n\n    given existing notebook or jupyter_server Application classes,\n    mix-in jupyterhub auth.\n\n    Instances of App must have the following attributes defining classes:\n\n    - .login_handler_class\n    - .logout_handler_class\n    - .base_handler_class (only required if not a subclass of the default app\n      in jupyter_server or notebook)\n\n    App should be a subclass of `notebook.notebookapp.NotebookApp`\n    or `jupyter_server.serverapp.ServerApp`.\n    \"\"\"\n\n    empty_parent_app = App()\n    log = empty_parent_app.log\n\n    # detect base classes\n    LoginHandler = empty_parent_app.login_handler_class\n    LogoutHandler = empty_parent_app.logout_handler_class\n    BaseHandler = _patch_app_base_handlers(empty_parent_app)\n\n    # create Handler classes from mixins + bases\n    class JupyterHubLoginHandler(JupyterHubLoginHandlerMixin, LoginHandler):\n        pass\n\n    class JupyterHubLogoutHandler(JupyterHubLogoutHandlerMixin, LogoutHandler):\n        pass\n\n    class OAuthCallbackHandler(OAuthCallbackHandlerMixin, BaseHandler):\n        pass\n\n    # create merged aliases & flags\n    merged_aliases = {}\n    merged_aliases.update(empty_parent_app.aliases or {})\n    merged_aliases.update(aliases)\n\n    merged_flags = {}\n    merged_flags.update(empty_parent_app.flags or {})\n    merged_flags.update(flags)\n    # create mixed-in App class, bringing it all together\n    class SingleUserNotebookApp(SingleUserNotebookAppMixin, App):\n        aliases = merged_aliases\n        flags = merged_flags\n        classes = empty_parent_app.classes + [HubOAuth]\n\n        login_handler_class = JupyterHubLoginHandler\n        logout_handler_class = JupyterHubLogoutHandler\n        oauth_callback_handler_class = OAuthCallbackHandler\n\n        def initialize(self, *args, **kwargs):\n            result = super().initialize(*args, **kwargs)\n            # run patch again after initialize, so extensions have already been loaded\n            # probably a no-op most of the time\n            _patch_app_base_handlers(self)\n            return result\n\n    return SingleUserNotebookApp\n"], "fixing_code": ["# Changelog\n\nFor detailed changes from the prior release, click on the version number, and\nits link will bring up a GitHub listing of changes. Use `git log` on the\ncommand line for details.\n\n## [Unreleased]\n\n## 1.5\n\nJupyterHub 1.5 is a **security release**,\nfixing a vulnerability [ghsa-cw7p-q79f-m2v7][] where JupyterLab users\nwith multiple tabs open could fail to logout completely,\nleaving their browser with valid credentials until they logout again.\n\nA few fully backward-compatible features have been backported from 2.0.\n\n[ghsa-cw7p-q79f-m2v7]: https://github.com/jupyterhub/jupyterhub/security/advisories/GHSA-cw7p-q79f-m2v7\n\n### 1.4.2...1.5.0\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.4.2...1.5.0))\n\n#### New features added\n\n- Backport #3636 to 1.4.x (opt-in support for JupyterHub.use_legacy_stopped_server_status_code) [#3639](https://github.com/jupyterhub/jupyterhub/pull/3639) ([@yuvipanda](https://github.com/yuvipanda))\n- Backport PR #3552 on branch 1.4.x (Add expiration date dropdown to Token page) [#3580](https://github.com/jupyterhub/jupyterhub/pull/3580) ([@meeseeksmachine](https://github.com/meeseeksmachine))\n- Backport PR #3488 on branch 1.4.x (Support auto login when used as a OAuth2 provider) [#3579](https://github.com/jupyterhub/jupyterhub/pull/3579) ([@meeseeksmachine](https://github.com/meeseeksmachine))\n\n#### Maintenance and upkeep improvements\n\n- 1.4.x: update doc requirements [#3677](https://github.com/jupyterhub/jupyterhub/pull/3677) ([@minrk](https://github.com/minrk))\n\n#### Documentation improvements\n\n- use_legacy_stopped_server_status_code: use 1.\\* language [#3676](https://github.com/jupyterhub/jupyterhub/pull/3676) ([@manics](https://github.com/manics))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2021-07-16&to=2021-11-03&type=c))\n\n[@choldgraf](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acholdgraf+updated%3A2021-07-16..2021-11-03&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2021-07-16..2021-11-03&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2021-07-16..2021-11-03&type=Issues) | [@meeseeksmachine](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ameeseeksmachine+updated%3A2021-07-16..2021-11-03&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2021-07-16..2021-11-03&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2021-07-16..2021-11-03&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2021-07-16..2021-11-03&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayuvipanda+updated%3A2021-07-16..2021-11-03&type=Issues)\n\n## 1.4\n\nJupyterHub 1.4 is a small release, with several enhancements, bug fixes,\nand new configuration options.\n\nThere are no database schema changes requiring migration from 1.3 to 1.4.\n\n1.4 is also the first version to start publishing docker images for arm64.\n\nIn particular, OAuth tokens stored in user cookies,\nused for accessing single-user servers and hub-authenticated services,\nhave changed their expiration from one hour to the expiry of the cookie\nin which they are stored (default: two weeks).\nThis is now also configurable via `JupyterHub.oauth_token_expires_in`.\n\nThe result is that it should be much less likely for auth tokens stored in cookies\nto expire during the lifetime of a server.\n\n### [1.4.2] 2021-06-15\n\n1.4.2 is a small bugfix release for 1.4.\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.4.1...d9860aa98cc537cf685022f81b8f725bfef41304))\n\n#### Bugs fixed\n\n- Fix regression where external services api_token became required [#3531](https://github.com/jupyterhub/jupyterhub/pull/3531) ([@consideRatio](https://github.com/consideRatio))\n- Bug: save_bearer_token (provider.py) passes a float value to the expires_at field (int) [#3484](https://github.com/jupyterhub/jupyterhub/pull/3484) ([@weisdd](https://github.com/weisdd))\n\n#### Maintenance and upkeep improvements\n\n- bump autodoc-traits [#3510](https://github.com/jupyterhub/jupyterhub/pull/3510) ([@minrk](https://github.com/minrk))\n\n#### Documentation improvements\n\n- Fix contributor documentation's link [#3521](https://github.com/jupyterhub/jupyterhub/pull/3521) ([@icankeep](https://github.com/icankeep))\n- Fix typo [#3494](https://github.com/jupyterhub/jupyterhub/pull/3494) ([@davidbrochart](https://github.com/davidbrochart))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2021-05-12&to=2021-07-15&type=c))\n\n[@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2021-05-12..2021-07-15&type=Issues) | [@davidbrochart](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adavidbrochart+updated%3A2021-05-12..2021-07-15&type=Issues) | [@icankeep](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aicankeep+updated%3A2021-05-12..2021-07-15&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2021-05-12..2021-07-15&type=Issues) | [@weisdd](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aweisdd+updated%3A2021-05-12..2021-07-15&type=Issues)\n\n### [1.4.1] 2021-05-12\n\n1.4.1 is a small bugfix release for 1.4.\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.4.0...1.4.1))\n\n#### Enhancements made\n\n#### Bugs fixed\n\n- define Spawner.delete_forever on base Spawner [#3454](https://github.com/jupyterhub/jupyterhub/pull/3454) ([@minrk](https://github.com/minrk))\n- patch base handlers from both jupyter_server and notebook [#3437](https://github.com/jupyterhub/jupyterhub/pull/3437) ([@minrk](https://github.com/minrk))\n\n#### Maintenance and upkeep improvements\n\n- ci: fix typo in environment variable [#3457](https://github.com/jupyterhub/jupyterhub/pull/3457) ([@consideRatio](https://github.com/consideRatio))\n- avoid re-using asyncio.Locks across event loops [#3456](https://github.com/jupyterhub/jupyterhub/pull/3456) ([@minrk](https://github.com/minrk))\n- ci: github workflow security, pin action to sha etc [#3436](https://github.com/jupyterhub/jupyterhub/pull/3436) ([@consideRatio](https://github.com/consideRatio))\n\n#### Documentation improvements\n\n- Fix documentation [#3452](https://github.com/jupyterhub/jupyterhub/pull/3452) ([@davidbrochart](https://github.com/davidbrochart))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2021-04-19&to=2021-05-12&type=c))\n\n[@0mar](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A0mar+updated%3A2021-04-19..2021-05-12&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2021-04-19..2021-05-12&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2021-04-19..2021-05-12&type=Issues) | [@danlester](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adanlester+updated%3A2021-04-19..2021-05-12&type=Issues) | [@davidbrochart](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adavidbrochart+updated%3A2021-04-19..2021-05-12&type=Issues) | [@IvanaH8](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AIvanaH8+updated%3A2021-04-19..2021-05-12&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2021-04-19..2021-05-12&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2021-04-19..2021-05-12&type=Issues) | [@naatebarber](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Anaatebarber+updated%3A2021-04-19..2021-05-12&type=Issues) | [@OrnithOrtion](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AOrnithOrtion+updated%3A2021-04-19..2021-05-12&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2021-04-19..2021-05-12&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2021-04-19..2021-05-12&type=Issues)\n\n### [1.4.0] 2021-04-19\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.3.0...1.4.0))\n\n#### New features added\n\n- Support Proxy.extra_routes [#3430](https://github.com/jupyterhub/jupyterhub/pull/3430) ([@yuvipanda](https://github.com/yuvipanda))\n- login-template: Add a \"login_container\" block inside the div-container. [#3422](https://github.com/jupyterhub/jupyterhub/pull/3422) ([@olifre](https://github.com/olifre))\n- Docker arm64 builds [#3421](https://github.com/jupyterhub/jupyterhub/pull/3421) ([@manics](https://github.com/manics))\n- make oauth token expiry configurable [#3411](https://github.com/jupyterhub/jupyterhub/pull/3411) ([@minrk](https://github.com/minrk))\n- allow the hub to not be the default route [#3373](https://github.com/jupyterhub/jupyterhub/pull/3373) ([@minrk](https://github.com/minrk))\n- Allow customization of service menu via templates [#3345](https://github.com/jupyterhub/jupyterhub/pull/3345) ([@stv0g](https://github.com/stv0g))\n- Add Spawner.delete_forever [#3337](https://github.com/jupyterhub/jupyterhub/pull/3337) ([@nsshah1288](https://github.com/nsshah1288))\n- Allow to set spawner-specific hub connect URL [#3326](https://github.com/jupyterhub/jupyterhub/pull/3326) ([@dtaniwaki](https://github.com/dtaniwaki))\n- Make Authenticator Custom HTML Flexible [#3315](https://github.com/jupyterhub/jupyterhub/pull/3315) ([@dtaniwaki](https://github.com/dtaniwaki))\n\n#### Enhancements made\n\n- Log the exception raised in Spawner.post_stop_hook instead of raising it [#3418](https://github.com/jupyterhub/jupyterhub/pull/3418) ([@jiajunjie](https://github.com/jiajunjie))\n- Don't delete all oauth clients on startup [#3407](https://github.com/jupyterhub/jupyterhub/pull/3407) ([@yuvipanda](https://github.com/yuvipanda))\n- Use 'secrets' module to generate secrets [#3394](https://github.com/jupyterhub/jupyterhub/pull/3394) ([@yuvipanda](https://github.com/yuvipanda))\n- Allow cookie_secret to be set to a hexadecimal string [#3343](https://github.com/jupyterhub/jupyterhub/pull/3343) ([@consideRatio](https://github.com/consideRatio))\n- Clear tornado xsrf cookie on logout [#3341](https://github.com/jupyterhub/jupyterhub/pull/3341) ([@dtaniwaki](https://github.com/dtaniwaki))\n- always log slow requests at least at info-level [#3338](https://github.com/jupyterhub/jupyterhub/pull/3338) ([@minrk](https://github.com/minrk))\n\n#### Bugs fixed\n\n- always start redirect count at 1 when redirecting /hub/user/:name -> /user/:name [#3377](https://github.com/jupyterhub/jupyterhub/pull/3377) ([@minrk](https://github.com/minrk))\n- Always raise on failed token creation [#3370](https://github.com/jupyterhub/jupyterhub/pull/3370) ([@minrk](https://github.com/minrk))\n- make_singleuser_app: patch-in HubAuthenticatedHandler at lower priority [#3347](https://github.com/jupyterhub/jupyterhub/pull/3347) ([@minrk](https://github.com/minrk))\n- Fix pagination with named servers [#3335](https://github.com/jupyterhub/jupyterhub/pull/3335) ([@rcthomas](https://github.com/rcthomas))\n\n#### Maintenance and upkeep improvements\n\n- typos in onbuild, demo images for push [#3429](https://github.com/jupyterhub/jupyterhub/pull/3429) ([@minrk](https://github.com/minrk))\n- Disable docker jupyterhub-demo arm64 build [#3425](https://github.com/jupyterhub/jupyterhub/pull/3425) ([@manics](https://github.com/manics))\n- Docker arm64 builds [#3421](https://github.com/jupyterhub/jupyterhub/pull/3421) ([@manics](https://github.com/manics))\n- avoid deprecated engine.table_names [#3392](https://github.com/jupyterhub/jupyterhub/pull/3392) ([@minrk](https://github.com/minrk))\n- alpine dockerfile: avoid compilation by getting some deps from apk [#3386](https://github.com/jupyterhub/jupyterhub/pull/3386) ([@minrk](https://github.com/minrk))\n- Fix sqlachemy.interfaces.PoolListener deprecation for tests [#3383](https://github.com/jupyterhub/jupyterhub/pull/3383) ([@IvanaH8](https://github.com/IvanaH8))\n- Update pre-commit hooks versions [#3362](https://github.com/jupyterhub/jupyterhub/pull/3362) ([@consideRatio](https://github.com/consideRatio))\n- add (and run) prettier pre-commit hook [#3360](https://github.com/jupyterhub/jupyterhub/pull/3360) ([@minrk](https://github.com/minrk))\n- move get_custom_html to base Authenticator class [#3359](https://github.com/jupyterhub/jupyterhub/pull/3359) ([@minrk](https://github.com/minrk))\n- publish release outputs as artifacts [#3349](https://github.com/jupyterhub/jupyterhub/pull/3349) ([@minrk](https://github.com/minrk))\n- [TST] Do not implicitly create users in auth_header [#3344](https://github.com/jupyterhub/jupyterhub/pull/3344) ([@minrk](https://github.com/minrk))\n- specify minimum alembic 1.4 [#3339](https://github.com/jupyterhub/jupyterhub/pull/3339) ([@minrk](https://github.com/minrk))\n- ci: github actions, allow for manual test runs and fix badge in readme [#3324](https://github.com/jupyterhub/jupyterhub/pull/3324) ([@consideRatio](https://github.com/consideRatio))\n- publish releases from github actions [#3305](https://github.com/jupyterhub/jupyterhub/pull/3305) ([@minrk](https://github.com/minrk))\n\n#### Documentation improvements\n\n- DOC: Conform to numpydoc. [#3428](https://github.com/jupyterhub/jupyterhub/pull/3428) ([@Carreau](https://github.com/Carreau))\n- Fix link to jupyterhub/jupyterhub-the-hard-way [#3417](https://github.com/jupyterhub/jupyterhub/pull/3417) ([@manics](https://github.com/manics))\n- Changelog for 1.4 [#3415](https://github.com/jupyterhub/jupyterhub/pull/3415) ([@minrk](https://github.com/minrk))\n- Fastapi example [#3403](https://github.com/jupyterhub/jupyterhub/pull/3403) ([@kafonek](https://github.com/kafonek))\n- Added Azure AD as a supported authenticator. [#3401](https://github.com/jupyterhub/jupyterhub/pull/3401) ([@maxshowarth](https://github.com/maxshowarth))\n- Remove the hard way guide [#3375](https://github.com/jupyterhub/jupyterhub/pull/3375) ([@manics](https://github.com/manics))\n- :memo: Fix telemetry section [#3333](https://github.com/jupyterhub/jupyterhub/pull/3333) ([@trallard](https://github.com/trallard))\n- Fix the help related to the proxy check [#3332](https://github.com/jupyterhub/jupyterhub/pull/3332) ([@jiajunjie](https://github.com/jiajunjie))\n- Mention Jupyter Server as optional single-user backend in documentation [#3329](https://github.com/jupyterhub/jupyterhub/pull/3329) ([@Zsailer](https://github.com/Zsailer))\n- Fix mixup in comment regarding the sync parameter [#3325](https://github.com/jupyterhub/jupyterhub/pull/3325) ([@andrewisplinghoff](https://github.com/andrewisplinghoff))\n- docs: fix simple typo, funciton -> function [#3314](https://github.com/jupyterhub/jupyterhub/pull/3314) ([@timgates42](https://github.com/timgates42))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-12-11&to=2021-04-19&type=c))\n\n[@00Kai0](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A00Kai0+updated%3A2020-12-11..2021-04-19&type=Issues) | [@8rV1n](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A8rV1n+updated%3A2020-12-11..2021-04-19&type=Issues) | [@akhilputhiry](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aakhilputhiry+updated%3A2020-12-11..2021-04-19&type=Issues) | [@alexal](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexal+updated%3A2020-12-11..2021-04-19&type=Issues) | [@analytically](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aanalytically+updated%3A2020-12-11..2021-04-19&type=Issues) | [@andreamazzoni](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aandreamazzoni+updated%3A2020-12-11..2021-04-19&type=Issues) | [@andrewisplinghoff](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aandrewisplinghoff+updated%3A2020-12-11..2021-04-19&type=Issues) | [@BertR](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ABertR+updated%3A2020-12-11..2021-04-19&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2020-12-11..2021-04-19&type=Issues) | [@bitnik](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abitnik+updated%3A2020-12-11..2021-04-19&type=Issues) | [@bollwyvl](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abollwyvl+updated%3A2020-12-11..2021-04-19&type=Issues) | [@carluri](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acarluri+updated%3A2020-12-11..2021-04-19&type=Issues) | [@Carreau](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ACarreau+updated%3A2020-12-11..2021-04-19&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2020-12-11..2021-04-19&type=Issues) | [@davidedelvento](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adavidedelvento+updated%3A2020-12-11..2021-04-19&type=Issues) | [@dhirschfeld](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adhirschfeld+updated%3A2020-12-11..2021-04-19&type=Issues) | [@dmpe](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Admpe+updated%3A2020-12-11..2021-04-19&type=Issues) | [@dsblank](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adsblank+updated%3A2020-12-11..2021-04-19&type=Issues) | [@dtaniwaki](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adtaniwaki+updated%3A2020-12-11..2021-04-19&type=Issues) | [@echarles](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aecharles+updated%3A2020-12-11..2021-04-19&type=Issues) | [@elgalu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aelgalu+updated%3A2020-12-11..2021-04-19&type=Issues) | [@eran-pinhas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aeran-pinhas+updated%3A2020-12-11..2021-04-19&type=Issues) | [@gaebor](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Agaebor+updated%3A2020-12-11..2021-04-19&type=Issues) | [@GeorgianaElena](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AGeorgianaElena+updated%3A2020-12-11..2021-04-19&type=Issues) | [@gsemet](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Agsemet+updated%3A2020-12-11..2021-04-19&type=Issues) | [@gweis](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Agweis+updated%3A2020-12-11..2021-04-19&type=Issues) | [@hynek2001](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ahynek2001+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ianabc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aianabc+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ibre5041](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aibre5041+updated%3A2020-12-11..2021-04-19&type=Issues) | [@IvanaH8](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AIvanaH8+updated%3A2020-12-11..2021-04-19&type=Issues) | [@jhegedus42](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajhegedus42+updated%3A2020-12-11..2021-04-19&type=Issues) | [@jhermann](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajhermann+updated%3A2020-12-11..2021-04-19&type=Issues) | [@jiajunjie](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajiajunjie+updated%3A2020-12-11..2021-04-19&type=Issues) | [@jtlz2](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajtlz2+updated%3A2020-12-11..2021-04-19&type=Issues) | [@kafonek](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akafonek+updated%3A2020-12-11..2021-04-19&type=Issues) | [@katsar0v](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akatsar0v+updated%3A2020-12-11..2021-04-19&type=Issues) | [@kinow](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akinow+updated%3A2020-12-11..2021-04-19&type=Issues) | [@krinsman](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akrinsman+updated%3A2020-12-11..2021-04-19&type=Issues) | [@laurensdv](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alaurensdv+updated%3A2020-12-11..2021-04-19&type=Issues) | [@lits789](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alits789+updated%3A2020-12-11..2021-04-19&type=Issues) | [@m-alekseev](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Am-alekseev+updated%3A2020-12-11..2021-04-19&type=Issues) | [@mabbasi90](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amabbasi90+updated%3A2020-12-11..2021-04-19&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2020-12-11..2021-04-19&type=Issues) | [@manniche](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanniche+updated%3A2020-12-11..2021-04-19&type=Issues) | [@maxshowarth](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amaxshowarth+updated%3A2020-12-11..2021-04-19&type=Issues) | [@mdivk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amdivk+updated%3A2020-12-11..2021-04-19&type=Issues) | [@meeseeksmachine](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ameeseeksmachine+updated%3A2020-12-11..2021-04-19&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2020-12-11..2021-04-19&type=Issues) | [@mogthesprog](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amogthesprog+updated%3A2020-12-11..2021-04-19&type=Issues) | [@mriedem](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amriedem+updated%3A2020-12-11..2021-04-19&type=Issues) | [@nsshah1288](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ansshah1288+updated%3A2020-12-11..2021-04-19&type=Issues) | [@olifre](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aolifre+updated%3A2020-12-11..2021-04-19&type=Issues) | [@PandaWhoCodes](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3APandaWhoCodes+updated%3A2020-12-11..2021-04-19&type=Issues) | [@pawsaw](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Apawsaw+updated%3A2020-12-11..2021-04-19&type=Issues) | [@phozzy](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aphozzy+updated%3A2020-12-11..2021-04-19&type=Issues) | [@playermanny2](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aplayermanny2+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rabsr](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arabsr+updated%3A2020-12-11..2021-04-19&type=Issues) | [@randy3k](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arandy3k+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rawrgulmuffins](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arawrgulmuffins+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rcthomas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arcthomas+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rebeca-maia](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arebeca-maia+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rebenkoy](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arebenkoy+updated%3A2020-12-11..2021-04-19&type=Issues) | [@rkdarst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkdarst+updated%3A2020-12-11..2021-04-19&type=Issues) | [@robnagler](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arobnagler+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ronaldpetty](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aronaldpetty+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ryanlovett](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aryanlovett+updated%3A2020-12-11..2021-04-19&type=Issues) | [@ryogesh](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aryogesh+updated%3A2020-12-11..2021-04-19&type=Issues) | [@sbailey-auro](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asbailey-auro+updated%3A2020-12-11..2021-04-19&type=Issues) | [@sigurdurb](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asigurdurb+updated%3A2020-12-11..2021-04-19&type=Issues) | [@SivaAccionLabs](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ASivaAccionLabs+updated%3A2020-12-11..2021-04-19&type=Issues) | [@sougou](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asougou+updated%3A2020-12-11..2021-04-19&type=Issues) | [@stv0g](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astv0g+updated%3A2020-12-11..2021-04-19&type=Issues) | [@sudi007](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asudi007+updated%3A2020-12-11..2021-04-19&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2020-12-11..2021-04-19&type=Issues) | [@tathagata](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atathagata+updated%3A2020-12-11..2021-04-19&type=Issues) | [@timgates42](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atimgates42+updated%3A2020-12-11..2021-04-19&type=Issues) | [@trallard](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atrallard+updated%3A2020-12-11..2021-04-19&type=Issues) | [@vlizanae](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Avlizanae+updated%3A2020-12-11..2021-04-19&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2020-12-11..2021-04-19&type=Issues) | [@whitespaceninja](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awhitespaceninja+updated%3A2020-12-11..2021-04-19&type=Issues) | [@whlteXbread](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AwhlteXbread+updated%3A2020-12-11..2021-04-19&type=Issues) | [@willingc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awillingc+updated%3A2020-12-11..2021-04-19&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayuvipanda+updated%3A2020-12-11..2021-04-19&type=Issues) | [@Zsailer](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AZsailer+updated%3A2020-12-11..2021-04-19&type=Issues)\n\n### 1.3\n\nJupyterHub 1.3 is a small feature release. Highlights include:\n\n- Require Python >=3.6 (jupyterhub 1.2 is the last release to support 3.5)\n- Add a `?state=` filter for getting user list, allowing much quicker responses\n  when retrieving a small fraction of users.\n  `state` can be `active`, `inactive`, or `ready`.\n- prometheus metrics now include a `jupyterhub_` prefix,\n  so deployments may need to update their grafana charts to match.\n- page templates can now be [async](https://jinja.palletsprojects.com/en/2.11.x/api/#async-support)!\n\n### [1.3.0]\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.2.1...1.3.0))\n\n#### Enhancements made\n\n- allow services to call /api/user to identify themselves [#3293](https://github.com/jupyterhub/jupyterhub/pull/3293) ([@minrk](https://github.com/minrk))\n- Add optional user agreement to login screen [#3264](https://github.com/jupyterhub/jupyterhub/pull/3264) ([@tlvu](https://github.com/tlvu))\n- [Metrics] Add prefix to prometheus metrics to group all jupyterhub metrics [#3243](https://github.com/jupyterhub/jupyterhub/pull/3243) ([@agp8x](https://github.com/agp8x))\n- Allow options_from_form to be configurable [#3225](https://github.com/jupyterhub/jupyterhub/pull/3225) ([@cbanek](https://github.com/cbanek))\n- add ?state= filter for GET /users [#3177](https://github.com/jupyterhub/jupyterhub/pull/3177) ([@minrk](https://github.com/minrk))\n- Enable async support in jinja2 templates [#3176](https://github.com/jupyterhub/jupyterhub/pull/3176) ([@yuvipanda](https://github.com/yuvipanda))\n\n#### Bugs fixed\n\n- fix increasing pagination limits [#3294](https://github.com/jupyterhub/jupyterhub/pull/3294) ([@minrk](https://github.com/minrk))\n- fix and test TOTAL_USERS count [#3289](https://github.com/jupyterhub/jupyterhub/pull/3289) ([@minrk](https://github.com/minrk))\n- Fix asyncio deprecation asyncio.Task.all_tasks [#3298](https://github.com/jupyterhub/jupyterhub/pull/3298) ([@coffeebenzene](https://github.com/coffeebenzene))\n\n#### Maintenance and upkeep improvements\n\n- bump oldest-required prometheus-client [#3292](https://github.com/jupyterhub/jupyterhub/pull/3292) ([@minrk](https://github.com/minrk))\n- bump black pre-commit hook to 20.8 [#3287](https://github.com/jupyterhub/jupyterhub/pull/3287) ([@minrk](https://github.com/minrk))\n- Test internal_ssl separately [#3266](https://github.com/jupyterhub/jupyterhub/pull/3266) ([@0mar](https://github.com/0mar))\n- wait for pending spawns in spawn_form_admin_access [#3253](https://github.com/jupyterhub/jupyterhub/pull/3253) ([@minrk](https://github.com/minrk))\n- Assume py36 and remove @gen.coroutine etc. [#3242](https://github.com/jupyterhub/jupyterhub/pull/3242) ([@consideRatio](https://github.com/consideRatio))\n\n#### Documentation improvements\n\n- Fix curl in jupyter announcements [#3286](https://github.com/jupyterhub/jupyterhub/pull/3286) ([@Sangarshanan](https://github.com/Sangarshanan))\n- CONTRIBUTING: Fix contributor guide URL [#3281](https://github.com/jupyterhub/jupyterhub/pull/3281) ([@olifre](https://github.com/olifre))\n- Update services.md [#3267](https://github.com/jupyterhub/jupyterhub/pull/3267) ([@slemonide](https://github.com/slemonide))\n- [Docs] Fix https reverse proxy redirect issues [#3244](https://github.com/jupyterhub/jupyterhub/pull/3244) ([@mhwasil](https://github.com/mhwasil))\n- Fixed idle-culler references. [#3300](https://github.com/jupyterhub/jupyterhub/pull/3300) ([@mxjeff](https://github.com/mxjeff))\n- Remove the extra parenthesis in service.md [#3303](https://github.com/jupyterhub/jupyterhub/pull/3303) ([@Sangarshanan](https://github.com/Sangarshanan))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-10-30&to=2020-12-11&type=c))\n\n[@0mar](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A0mar+updated%3A2020-10-30..2020-12-11&type=Issues) | [@agp8x](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aagp8x+updated%3A2020-10-30..2020-12-11&type=Issues) | [@alexweav](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexweav+updated%3A2020-10-30..2020-12-11&type=Issues) | [@belfhi](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abelfhi+updated%3A2020-10-30..2020-12-11&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2020-10-30..2020-12-11&type=Issues) | [@cbanek](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acbanek+updated%3A2020-10-30..2020-12-11&type=Issues) | [@cmd-ntrf](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acmd-ntrf+updated%3A2020-10-30..2020-12-11&type=Issues) | [@coffeebenzene](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acoffeebenzene+updated%3A2020-10-30..2020-12-11&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2020-10-30..2020-12-11&type=Issues) | [@danlester](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adanlester+updated%3A2020-10-30..2020-12-11&type=Issues) | [@fcollonval](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Afcollonval+updated%3A2020-10-30..2020-12-11&type=Issues) | [@GeorgianaElena](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AGeorgianaElena+updated%3A2020-10-30..2020-12-11&type=Issues) | [@ianabc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aianabc+updated%3A2020-10-30..2020-12-11&type=Issues) | [@IvanaH8](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AIvanaH8+updated%3A2020-10-30..2020-12-11&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2020-10-30..2020-12-11&type=Issues) | [@meeseeksmachine](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ameeseeksmachine+updated%3A2020-10-30..2020-12-11&type=Issues) | [@mhwasil](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amhwasil+updated%3A2020-10-30..2020-12-11&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2020-10-30..2020-12-11&type=Issues) | [@mriedem](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amriedem+updated%3A2020-10-30..2020-12-11&type=Issues) | [@mxjeff](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amxjeff+updated%3A2020-10-30..2020-12-11&type=Issues) | [@olifre](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aolifre+updated%3A2020-10-30..2020-12-11&type=Issues) | [@rcthomas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arcthomas+updated%3A2020-10-30..2020-12-11&type=Issues) | [@rgbkrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Argbkrk+updated%3A2020-10-30..2020-12-11&type=Issues) | [@rkdarst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkdarst+updated%3A2020-10-30..2020-12-11&type=Issues) | [@Sangarshanan](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ASangarshanan+updated%3A2020-10-30..2020-12-11&type=Issues) | [@slemonide](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aslemonide+updated%3A2020-10-30..2020-12-11&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2020-10-30..2020-12-11&type=Issues) | [@tlvu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atlvu+updated%3A2020-10-30..2020-12-11&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2020-10-30..2020-12-11&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayuvipanda+updated%3A2020-10-30..2020-12-11&type=Issues)\n\n## 1.2\n\n### [1.2.2] 2020-11-27\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.2.1...41f291c0c973223c33a6aa1fa86d5d57f297be78))\n\n#### Enhancements made\n\n- Standardize \"Sign in\" capitalization on the login page [#3252](https://github.com/jupyterhub/jupyterhub/pull/3252) ([@cmd-ntrf](https://github.com/cmd-ntrf))\n\n#### Bugs fixed\n\n- Fix RootHandler when default_url is a callable [#3265](https://github.com/jupyterhub/jupyterhub/pull/3265) ([@danlester](https://github.com/danlester))\n- Only preserve params when ?next= is unspecified [#3261](https://github.com/jupyterhub/jupyterhub/pull/3261) ([@minrk](https://github.com/minrk))\n- \\[Windows\\] Improve robustness when detecting and closing existing proxy processes [#3237](https://github.com/jupyterhub/jupyterhub/pull/3237) ([@alexweav](https://github.com/alexweav))\n\n#### Maintenance and upkeep improvements\n\n- Environment marker on pamela [#3255](https://github.com/jupyterhub/jupyterhub/pull/3255) ([@fcollonval](https://github.com/fcollonval))\n- remove push-branch conditions for CI [#3250](https://github.com/jupyterhub/jupyterhub/pull/3250) ([@minrk](https://github.com/minrk))\n- Migrate from travis to GitHub actions [#3246](https://github.com/jupyterhub/jupyterhub/pull/3246) ([@consideRatio](https://github.com/consideRatio))\n\n#### Documentation improvements\n\n- Update services-basics.md to use jupyterhub_idle_culler [#3257](https://github.com/jupyterhub/jupyterhub/pull/3257) ([@manics](https://github.com/manics))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-10-30&to=2020-11-27&type=c))\n\n[@alexweav](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexweav+updated%3A2020-10-30..2020-11-27&type=Issues) | [@belfhi](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abelfhi+updated%3A2020-10-30..2020-11-27&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2020-10-30..2020-11-27&type=Issues) | [@cmd-ntrf](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acmd-ntrf+updated%3A2020-10-30..2020-11-27&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2020-10-30..2020-11-27&type=Issues) | [@danlester](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adanlester+updated%3A2020-10-30..2020-11-27&type=Issues) | [@fcollonval](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Afcollonval+updated%3A2020-10-30..2020-11-27&type=Issues) | [@GeorgianaElena](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AGeorgianaElena+updated%3A2020-10-30..2020-11-27&type=Issues) | [@ianabc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aianabc+updated%3A2020-10-30..2020-11-27&type=Issues) | [@IvanaH8](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AIvanaH8+updated%3A2020-10-30..2020-11-27&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2020-10-30..2020-11-27&type=Issues) | [@meeseeksmachine](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ameeseeksmachine+updated%3A2020-10-30..2020-11-27&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2020-10-30..2020-11-27&type=Issues) | [@mriedem](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amriedem+updated%3A2020-10-30..2020-11-27&type=Issues) | [@olifre](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aolifre+updated%3A2020-10-30..2020-11-27&type=Issues) | [@rcthomas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arcthomas+updated%3A2020-10-30..2020-11-27&type=Issues) | [@rgbkrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Argbkrk+updated%3A2020-10-30..2020-11-27&type=Issues) | [@rkdarst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkdarst+updated%3A2020-10-30..2020-11-27&type=Issues) | [@slemonide](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aslemonide+updated%3A2020-10-30..2020-11-27&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2020-10-30..2020-11-27&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2020-10-30..2020-11-27&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayuvipanda+updated%3A2020-10-30..2020-11-27&type=Issues)\n\n### [1.2.1] 2020-10-30\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.2.0...1.2.1))\n\n#### Bugs fixed\n\n- JupyterHub services' oauth_no_confirm configuration regression in 1.2.0 [#3234](https://github.com/jupyterhub/jupyterhub/pull/3234) ([@bitnik](https://github.com/bitnik))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-10-29&to=2020-10-30&type=c))\n\n[@bitnik](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abitnik+updated%3A2020-10-29..2020-10-30&type=Issues)\n\n### [1.2.0] 2020-10-29\n\nJupyterHub 1.2 is an incremental release with lots of small improvements.\nIt is unlikely that users will have to change much to upgrade,\nbut lots of new things are possible and/or better!\n\nThere are no database schema changes requiring migration from 1.1 to 1.2.\n\nHighlights:\n\n- Deprecate black/whitelist configuration fields in favor of more inclusive blocked/allowed language. For example: `c.Authenticator.allowed_users = {'user', ...}`\n- More configuration of page templates and service display\n- Pagination of the admin page improving performance with large numbers of users\n- Improved control of user redirect\n- Support for [jupyter-server](https://jupyter-server.readthedocs.io/en/latest/)-based single-user servers, such as [Voil\u00e0](https://voila-gallery.org) and latest JupyterLab.\n- Lots more improvements to documentation, HTML pages, and customizations\n\n([full changelog](https://github.com/jupyterhub/jupyterhub/compare/1.1.0...1.2.0))\n\n#### Enhancements made\n\n- make pagination configurable [#3229](https://github.com/jupyterhub/jupyterhub/pull/3229) ([@minrk](https://github.com/minrk))\n- Make api_request to CHP's REST API more reliable [#3223](https://github.com/jupyterhub/jupyterhub/pull/3223) ([@consideRatio](https://github.com/consideRatio))\n- Control service display [#3160](https://github.com/jupyterhub/jupyterhub/pull/3160) ([@rcthomas](https://github.com/rcthomas))\n- Add a footer block + wrap the admin footer in this block [#3136](https://github.com/jupyterhub/jupyterhub/pull/3136) ([@pabepadu](https://github.com/pabepadu))\n- Allow JupyterHub.default_url to be a callable [#3133](https://github.com/jupyterhub/jupyterhub/pull/3133) ([@danlester](https://github.com/danlester))\n- Allow head requests for the health endpoint [#3131](https://github.com/jupyterhub/jupyterhub/pull/3131) ([@rkevin-arch](https://github.com/rkevin-arch))\n- Hide hamburger button menu in mobile/responsive mode and fix other minor issues [#3103](https://github.com/jupyterhub/jupyterhub/pull/3103) ([@kinow](https://github.com/kinow))\n- build jupyterhub/jupyterhub-demo image on docker hub [#3083](https://github.com/jupyterhub/jupyterhub/pull/3083) ([@minrk](https://github.com/minrk))\n- Add JupyterHub Demo docker image [#3059](https://github.com/jupyterhub/jupyterhub/pull/3059) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Warn if both bind_url and ip/port/base_url are set [#3057](https://github.com/jupyterhub/jupyterhub/pull/3057) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- UI Feedback on Submit [#3028](https://github.com/jupyterhub/jupyterhub/pull/3028) ([@possiblyMikeB](https://github.com/possiblyMikeB))\n- Support kubespawner running on a IPv6 only cluster [#3020](https://github.com/jupyterhub/jupyterhub/pull/3020) ([@stv0g](https://github.com/stv0g))\n- Spawn with options passed in query arguments to /spawn [#3013](https://github.com/jupyterhub/jupyterhub/pull/3013) ([@twalcari](https://github.com/twalcari))\n- SpawnHandler POST with user form options displays the spawn-pending page [#2978](https://github.com/jupyterhub/jupyterhub/pull/2978) ([@danlester](https://github.com/danlester))\n- Start named servers by pressing the Enter key [#2960](https://github.com/jupyterhub/jupyterhub/pull/2960) ([@jtpio](https://github.com/jtpio))\n- Keep the URL fragments after spawning an application [#2952](https://github.com/jupyterhub/jupyterhub/pull/2952) ([@kinow](https://github.com/kinow))\n- Allow implicit spawn via javascript redirect [#2941](https://github.com/jupyterhub/jupyterhub/pull/2941) ([@minrk](https://github.com/minrk))\n- make init_spawners check O(running servers) not O(total users) [#2936](https://github.com/jupyterhub/jupyterhub/pull/2936) ([@minrk](https://github.com/minrk))\n- Add favicon to the base page template [#2930](https://github.com/jupyterhub/jupyterhub/pull/2930) ([@JohnPaton](https://github.com/JohnPaton))\n- Adding pagination in the admin panel [#2929](https://github.com/jupyterhub/jupyterhub/pull/2929) ([@cbjuan](https://github.com/cbjuan))\n- Generate prometheus metrics docs [#2891](https://github.com/jupyterhub/jupyterhub/pull/2891) ([@rajat404](https://github.com/rajat404))\n- Add support for Jupyter Server [#2601](https://github.com/jupyterhub/jupyterhub/pull/2601) ([@yuvipanda](https://github.com/yuvipanda))\n\n#### Bugs fixed\n\n- Fix #2284 must be sent from authorization page [#3219](https://github.com/jupyterhub/jupyterhub/pull/3219) ([@elgalu](https://github.com/elgalu))\n- avoid specifying default_value=None in Command traits [#3208](https://github.com/jupyterhub/jupyterhub/pull/3208) ([@minrk](https://github.com/minrk))\n- Prevent OverflowErrors in exponential_backoff() [#3204](https://github.com/jupyterhub/jupyterhub/pull/3204) ([@kreuzert](https://github.com/kreuzert))\n- update prometheus metrics for server spawn when it fails with exception [#3150](https://github.com/jupyterhub/jupyterhub/pull/3150) ([@yhal-nesi](https://github.com/yhal-nesi))\n- jupyterhub/utils: Load system default CA certificates in make_ssl_context [#3140](https://github.com/jupyterhub/jupyterhub/pull/3140) ([@chancez](https://github.com/chancez))\n- admin page sorts on spawner last_activity instead of user last_activity [#3137](https://github.com/jupyterhub/jupyterhub/pull/3137) ([@lydian](https://github.com/lydian))\n- Fix the services dropdown on the admin page [#3132](https://github.com/jupyterhub/jupyterhub/pull/3132) ([@pabepadu](https://github.com/pabepadu))\n- Don't log a warning when slow_spawn_timeout is disabled [#3127](https://github.com/jupyterhub/jupyterhub/pull/3127) ([@mriedem](https://github.com/mriedem))\n- app.py: Work around incompatibility between Tornado 6 and asyncio proactor event loop in python 3.8 on Windows [#3123](https://github.com/jupyterhub/jupyterhub/pull/3123) ([@alexweav](https://github.com/alexweav))\n- jupyterhub/user: clear spawner state after post_stop_hook [#3121](https://github.com/jupyterhub/jupyterhub/pull/3121) ([@rkdarst](https://github.com/rkdarst))\n- fix for stopping named server deleting default server and tests [#3109](https://github.com/jupyterhub/jupyterhub/pull/3109) ([@kxiao-fn](https://github.com/kxiao-fn))\n- Hide hamburger button menu in mobile/responsive mode and fix other minor issues [#3103](https://github.com/jupyterhub/jupyterhub/pull/3103) ([@kinow](https://github.com/kinow))\n- Rename Authenticator.white/blacklist to allowed/blocked [#3090](https://github.com/jupyterhub/jupyterhub/pull/3090) ([@minrk](https://github.com/minrk))\n- Include the query string parameters when redirecting to a new URL [#3089](https://github.com/jupyterhub/jupyterhub/pull/3089) ([@kinow](https://github.com/kinow))\n- Make `delete_invalid_users` configurable [#3087](https://github.com/jupyterhub/jupyterhub/pull/3087) ([@fcollonval](https://github.com/fcollonval))\n- Ensure client dependencies build before wheel [#3082](https://github.com/jupyterhub/jupyterhub/pull/3082) ([@diurnalist](https://github.com/diurnalist))\n- make Spawner.environment config highest priority [#3081](https://github.com/jupyterhub/jupyterhub/pull/3081) ([@minrk](https://github.com/minrk))\n- Changing start my server button link to spawn url once server is stopped [#3042](https://github.com/jupyterhub/jupyterhub/pull/3042) ([@rabsr](https://github.com/rabsr))\n- Fix CSS on admin page version listing [#3035](https://github.com/jupyterhub/jupyterhub/pull/3035) ([@vilhelmen](https://github.com/vilhelmen))\n- Fix user_row endblock in admin template [#3015](https://github.com/jupyterhub/jupyterhub/pull/3015) ([@jtpio](https://github.com/jtpio))\n- Fix --generate-config bug when specifying a filename [#2907](https://github.com/jupyterhub/jupyterhub/pull/2907) ([@consideRatio](https://github.com/consideRatio))\n- Handle the protocol when ssl is enabled and log the right URL [#2773](https://github.com/jupyterhub/jupyterhub/pull/2773) ([@kinow](https://github.com/kinow))\n\n#### Maintenance and upkeep improvements\n\n- Update travis-ci badge in README.md [#3232](https://github.com/jupyterhub/jupyterhub/pull/3232) ([@consideRatio](https://github.com/consideRatio))\n- stop building docs on circleci [#3209](https://github.com/jupyterhub/jupyterhub/pull/3209) ([@minrk](https://github.com/minrk))\n- Upgraded Jquery dep [#3174](https://github.com/jupyterhub/jupyterhub/pull/3174) ([@AngelOnFira](https://github.com/AngelOnFira))\n- Don't allow 'python:3.8 + master dependencies' to fail [#3157](https://github.com/jupyterhub/jupyterhub/pull/3157) ([@manics](https://github.com/manics))\n- Update Dockerfile to ubuntu:focal (Python 3.8) [#3156](https://github.com/jupyterhub/jupyterhub/pull/3156) ([@manics](https://github.com/manics))\n- Simplify code of the health check handler [#3149](https://github.com/jupyterhub/jupyterhub/pull/3149) ([@betatim](https://github.com/betatim))\n- Get error description from error key vs error_description key [#3147](https://github.com/jupyterhub/jupyterhub/pull/3147) ([@jgwerner](https://github.com/jgwerner))\n- Implement singleuser with mixins [#3128](https://github.com/jupyterhub/jupyterhub/pull/3128) ([@minrk](https://github.com/minrk))\n- only build tagged versions on docker tags [#3118](https://github.com/jupyterhub/jupyterhub/pull/3118) ([@minrk](https://github.com/minrk))\n- Log slow_stop_timeout when hit like slow_spawn_timeout [#3111](https://github.com/jupyterhub/jupyterhub/pull/3111) ([@mriedem](https://github.com/mriedem))\n- loosen jupyter-telemetry pin [#3102](https://github.com/jupyterhub/jupyterhub/pull/3102) ([@minrk](https://github.com/minrk))\n- Remove old context-less print statement [#3100](https://github.com/jupyterhub/jupyterhub/pull/3100) ([@mriedem](https://github.com/mriedem))\n- Allow `python:3.8 + master dependencies` to fail [#3079](https://github.com/jupyterhub/jupyterhub/pull/3079) ([@manics](https://github.com/manics))\n- Test with some master dependencies. [#3076](https://github.com/jupyterhub/jupyterhub/pull/3076) ([@Carreau](https://github.com/Carreau))\n- synchronize implementation of expiring values [#3072](https://github.com/jupyterhub/jupyterhub/pull/3072) ([@minrk](https://github.com/minrk))\n- More consistent behavior for UserDict.get and `key in UserDict` [#3071](https://github.com/jupyterhub/jupyterhub/pull/3071) ([@minrk](https://github.com/minrk))\n- pin jupyter_telemetry dependency [#3067](https://github.com/jupyterhub/jupyterhub/pull/3067) ([@Zsailer](https://github.com/Zsailer))\n- Use the issue templates from the central repo [#3056](https://github.com/jupyterhub/jupyterhub/pull/3056) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Update links to the black GitHub repository [#3054](https://github.com/jupyterhub/jupyterhub/pull/3054) ([@jtpio](https://github.com/jtpio))\n- Log successful /health requests as debug level [#3047](https://github.com/jupyterhub/jupyterhub/pull/3047) ([@consideRatio](https://github.com/consideRatio))\n- Fix broken test due to BeautifulSoup 4.9.0 behavior change [#3025](https://github.com/jupyterhub/jupyterhub/pull/3025) ([@twalcari](https://github.com/twalcari))\n- Remove unused imports [#3019](https://github.com/jupyterhub/jupyterhub/pull/3019) ([@stv0g](https://github.com/stv0g))\n- Use pip instead of conda for building the docs on RTD [#3010](https://github.com/jupyterhub/jupyterhub/pull/3010) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Avoid redundant logging of jupyterhub version mismatches [#2971](https://github.com/jupyterhub/jupyterhub/pull/2971) ([@mriedem](https://github.com/mriedem))\n- Add .vscode to gitignore [#2959](https://github.com/jupyterhub/jupyterhub/pull/2959) ([@jtpio](https://github.com/jtpio))\n- preserve auth type when logging obfuscated auth header [#2953](https://github.com/jupyterhub/jupyterhub/pull/2953) ([@minrk](https://github.com/minrk))\n- make spawner:server relationship explicitly one to one [#2944](https://github.com/jupyterhub/jupyterhub/pull/2944) ([@minrk](https://github.com/minrk))\n- Add what we need with some margin to Dockerfile's build stage [#2905](https://github.com/jupyterhub/jupyterhub/pull/2905) ([@consideRatio](https://github.com/consideRatio))\n- bump reorder-imports hook [#2899](https://github.com/jupyterhub/jupyterhub/pull/2899) ([@minrk](https://github.com/minrk))\n\n#### Documentation improvements\n\n- Fix typo in documentation [#3226](https://github.com/jupyterhub/jupyterhub/pull/3226) ([@xlotlu](https://github.com/xlotlu))\n- [docs] Remove duplicate line in changelog for 1.1.0 [#3207](https://github.com/jupyterhub/jupyterhub/pull/3207) ([@kinow](https://github.com/kinow))\n- changelog for 1.2.0b1 [#3192](https://github.com/jupyterhub/jupyterhub/pull/3192) ([@consideRatio](https://github.com/consideRatio))\n- Add SELinux configuration for nginx [#3185](https://github.com/jupyterhub/jupyterhub/pull/3185) ([@rainwoodman](https://github.com/rainwoodman))\n- Mention the PAM pitfall on fedora. [#3184](https://github.com/jupyterhub/jupyterhub/pull/3184) ([@rainwoodman](https://github.com/rainwoodman))\n- Added extra documentation for endpoint /users/{name}/servers/{server_name}. [#3159](https://github.com/jupyterhub/jupyterhub/pull/3159) ([@synchronizing](https://github.com/synchronizing))\n- docs: please docs linter (move_cert docstring) [#3151](https://github.com/jupyterhub/jupyterhub/pull/3151) ([@consideRatio](https://github.com/consideRatio))\n- Needed NoEsacpe (NE) option for apache [#3143](https://github.com/jupyterhub/jupyterhub/pull/3143) ([@basvandervlies](https://github.com/basvandervlies))\n- Document external service api_tokens better [#3142](https://github.com/jupyterhub/jupyterhub/pull/3142) ([@snickell](https://github.com/snickell))\n- Remove idle culler example [#3114](https://github.com/jupyterhub/jupyterhub/pull/3114) ([@yuvipanda](https://github.com/yuvipanda))\n- docs: unsqueeze logo, remove unused CSS and templates [#3107](https://github.com/jupyterhub/jupyterhub/pull/3107) ([@consideRatio](https://github.com/consideRatio))\n- Update version in docs/rest-api.yaml [#3104](https://github.com/jupyterhub/jupyterhub/pull/3104) ([@cmd-ntrf](https://github.com/cmd-ntrf))\n- Replace zonca/remotespawner with NERSC/sshspawner [#3086](https://github.com/jupyterhub/jupyterhub/pull/3086) ([@manics](https://github.com/manics))\n- Remove already done named servers from roadmap [#3084](https://github.com/jupyterhub/jupyterhub/pull/3084) ([@elgalu](https://github.com/elgalu))\n- proxy settings might cause authentication errors [#3078](https://github.com/jupyterhub/jupyterhub/pull/3078) ([@gatoniel](https://github.com/gatoniel))\n- Add Configuration Reference section to docs [#3077](https://github.com/jupyterhub/jupyterhub/pull/3077) ([@kinow](https://github.com/kinow))\n- document upgrading from api_tokens to services config [#3055](https://github.com/jupyterhub/jupyterhub/pull/3055) ([@minrk](https://github.com/minrk))\n- [Docs] Disable proxy_buffering when using nginx reverse proxy [#3048](https://github.com/jupyterhub/jupyterhub/pull/3048) ([@mhwasil](https://github.com/mhwasil))\n- docs: add proxy_http_version 1.1 [#3046](https://github.com/jupyterhub/jupyterhub/pull/3046) ([@ceocoder](https://github.com/ceocoder))\n- #1018 PAM added in prerequisites [#3040](https://github.com/jupyterhub/jupyterhub/pull/3040) ([@romainx](https://github.com/romainx))\n- Fix use of auxiliary verb on index.rst [#3022](https://github.com/jupyterhub/jupyterhub/pull/3022) ([@joshmeek](https://github.com/joshmeek))\n- Fix docs CI test failure: duplicate object description [#3021](https://github.com/jupyterhub/jupyterhub/pull/3021) ([@rkdarst](https://github.com/rkdarst))\n- Update issue templates [#3001](https://github.com/jupyterhub/jupyterhub/pull/3001) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- fix wrong name on firewall [#2997](https://github.com/jupyterhub/jupyterhub/pull/2997) ([@thuvh](https://github.com/thuvh))\n- updating docs theme [#2995](https://github.com/jupyterhub/jupyterhub/pull/2995) ([@choldgraf](https://github.com/choldgraf))\n- Update contributor docs [#2972](https://github.com/jupyterhub/jupyterhub/pull/2972) ([@mriedem](https://github.com/mriedem))\n- Server.user_options rest-api documented [#2966](https://github.com/jupyterhub/jupyterhub/pull/2966) ([@mriedem](https://github.com/mriedem))\n- Pin sphinx theme [#2956](https://github.com/jupyterhub/jupyterhub/pull/2956) ([@manics](https://github.com/manics))\n- [doc] Fix couple typos in the documentation [#2951](https://github.com/jupyterhub/jupyterhub/pull/2951) ([@kinow](https://github.com/kinow))\n- Docs: Fixed grammar on landing page [#2950](https://github.com/jupyterhub/jupyterhub/pull/2950) ([@alexdriedger](https://github.com/alexdriedger))\n- add general faq [#2946](https://github.com/jupyterhub/jupyterhub/pull/2946) ([@minrk](https://github.com/minrk))\n- docs: use metachannel for faster environment solve [#2943](https://github.com/jupyterhub/jupyterhub/pull/2943) ([@minrk](https://github.com/minrk))\n- update docs environments [#2942](https://github.com/jupyterhub/jupyterhub/pull/2942) ([@minrk](https://github.com/minrk))\n- [doc] Add more docs about Cookies used for authentication in JupyterHub [#2940](https://github.com/jupyterhub/jupyterhub/pull/2940) ([@kinow](https://github.com/kinow))\n- [doc] Use fixed commit plus line number in github link [#2939](https://github.com/jupyterhub/jupyterhub/pull/2939) ([@kinow](https://github.com/kinow))\n- [doc] Fix link to SSL encryption from troubleshooting page [#2938](https://github.com/jupyterhub/jupyterhub/pull/2938) ([@kinow](https://github.com/kinow))\n- rest api: fix schema for remove parameter in rest api [#2917](https://github.com/jupyterhub/jupyterhub/pull/2917) ([@minrk](https://github.com/minrk))\n- Add troubleshooting topics [#2914](https://github.com/jupyterhub/jupyterhub/pull/2914) ([@jgwerner](https://github.com/jgwerner))\n- Several fixes to the doc [#2904](https://github.com/jupyterhub/jupyterhub/pull/2904) ([@reneluria](https://github.com/reneluria))\n- fix: 'Non-ASCII character '\\xc3' [#2901](https://github.com/jupyterhub/jupyterhub/pull/2901) ([@jgwerner](https://github.com/jgwerner))\n- Generate prometheus metrics docs [#2891](https://github.com/jupyterhub/jupyterhub/pull/2891) ([@rajat404](https://github.com/rajat404))\n\n#### Contributors to this release\n\n([GitHub contributors page for this release](https://github.com/jupyterhub/jupyterhub/graphs/contributors?from=2020-01-17&to=2020-10-29&type=c))\n\n[@0nebody](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A0nebody+updated%3A2020-01-17..2020-10-29&type=Issues) | [@1kastner](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3A1kastner+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ahkui](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aahkui+updated%3A2020-01-17..2020-10-29&type=Issues) | [@alexdriedger](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexdriedger+updated%3A2020-01-17..2020-10-29&type=Issues) | [@alexweav](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aalexweav+updated%3A2020-01-17..2020-10-29&type=Issues) | [@AlJohri](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AAlJohri+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Analect](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AAnalect+updated%3A2020-01-17..2020-10-29&type=Issues) | [@analytically](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aanalytically+updated%3A2020-01-17..2020-10-29&type=Issues) | [@aneagoe](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aaneagoe+updated%3A2020-01-17..2020-10-29&type=Issues) | [@AngelOnFira](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AAngelOnFira+updated%3A2020-01-17..2020-10-29&type=Issues) | [@barrachri](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abarrachri+updated%3A2020-01-17..2020-10-29&type=Issues) | [@basvandervlies](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abasvandervlies+updated%3A2020-01-17..2020-10-29&type=Issues) | [@betatim](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abetatim+updated%3A2020-01-17..2020-10-29&type=Issues) | [@bigbosst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Abigbosst+updated%3A2020-01-17..2020-10-29&type=Issues) | [@blink1073](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ablink1073+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Cadair](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ACadair+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Carreau](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ACarreau+updated%3A2020-01-17..2020-10-29&type=Issues) | [@cbjuan](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acbjuan+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ceocoder](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aceocoder+updated%3A2020-01-17..2020-10-29&type=Issues) | [@chancez](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Achancez+updated%3A2020-01-17..2020-10-29&type=Issues) | [@choldgraf](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acholdgraf+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Chrisjw42](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AChrisjw42+updated%3A2020-01-17..2020-10-29&type=Issues) | [@cmd-ntrf](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Acmd-ntrf+updated%3A2020-01-17..2020-10-29&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AconsideRatio+updated%3A2020-01-17..2020-10-29&type=Issues) | [@danlester](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adanlester+updated%3A2020-01-17..2020-10-29&type=Issues) | [@diurnalist](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adiurnalist+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Dmitry1987](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ADmitry1987+updated%3A2020-01-17..2020-10-29&type=Issues) | [@dsblank](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adsblank+updated%3A2020-01-17..2020-10-29&type=Issues) | [@dylex](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Adylex+updated%3A2020-01-17..2020-10-29&type=Issues) | [@echarles](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aecharles+updated%3A2020-01-17..2020-10-29&type=Issues) | [@elgalu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aelgalu+updated%3A2020-01-17..2020-10-29&type=Issues) | [@fcollonval](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Afcollonval+updated%3A2020-01-17..2020-10-29&type=Issues) | [@gatoniel](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Agatoniel+updated%3A2020-01-17..2020-10-29&type=Issues) | [@GeorgianaElena](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AGeorgianaElena+updated%3A2020-01-17..2020-10-29&type=Issues) | [@hnykda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ahnykda+updated%3A2020-01-17..2020-10-29&type=Issues) | [@itssimon](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aitssimon+updated%3A2020-01-17..2020-10-29&type=Issues) | [@jgwerner](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajgwerner+updated%3A2020-01-17..2020-10-29&type=Issues) | [@JohnPaton](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AJohnPaton+updated%3A2020-01-17..2020-10-29&type=Issues) | [@joshmeek](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajoshmeek+updated%3A2020-01-17..2020-10-29&type=Issues) | [@jtpio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ajtpio+updated%3A2020-01-17..2020-10-29&type=Issues) | [@kinow](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akinow+updated%3A2020-01-17..2020-10-29&type=Issues) | [@kreuzert](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akreuzert+updated%3A2020-01-17..2020-10-29&type=Issues) | [@kxiao-fn](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Akxiao-fn+updated%3A2020-01-17..2020-10-29&type=Issues) | [@lesiano](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alesiano+updated%3A2020-01-17..2020-10-29&type=Issues) | [@limimiking](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alimimiking+updated%3A2020-01-17..2020-10-29&type=Issues) | [@lydian](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Alydian+updated%3A2020-01-17..2020-10-29&type=Issues) | [@mabbasi90](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amabbasi90+updated%3A2020-01-17..2020-10-29&type=Issues) | [@maluhoss](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amaluhoss+updated%3A2020-01-17..2020-10-29&type=Issues) | [@manics](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amanics+updated%3A2020-01-17..2020-10-29&type=Issues) | [@matteoipri](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amatteoipri+updated%3A2020-01-17..2020-10-29&type=Issues) | [@mbmilligan](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ambmilligan+updated%3A2020-01-17..2020-10-29&type=Issues) | [@meeseeksmachine](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ameeseeksmachine+updated%3A2020-01-17..2020-10-29&type=Issues) | [@mhwasil](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amhwasil+updated%3A2020-01-17..2020-10-29&type=Issues) | [@minrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aminrk+updated%3A2020-01-17..2020-10-29&type=Issues) | [@mriedem](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Amriedem+updated%3A2020-01-17..2020-10-29&type=Issues) | [@nscozzaro](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Anscozzaro+updated%3A2020-01-17..2020-10-29&type=Issues) | [@pabepadu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Apabepadu+updated%3A2020-01-17..2020-10-29&type=Issues) | [@possiblyMikeB](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ApossiblyMikeB+updated%3A2020-01-17..2020-10-29&type=Issues) | [@psyvision](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Apsyvision+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rabsr](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arabsr+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rainwoodman](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arainwoodman+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rajat404](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arajat404+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rcthomas](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arcthomas+updated%3A2020-01-17..2020-10-29&type=Issues) | [@reneluria](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Areneluria+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rgbkrk](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Argbkrk+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rkdarst](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkdarst+updated%3A2020-01-17..2020-10-29&type=Issues) | [@rkevin-arch](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Arkevin-arch+updated%3A2020-01-17..2020-10-29&type=Issues) | [@romainx](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aromainx+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ryanlovett](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aryanlovett+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ryogesh](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aryogesh+updated%3A2020-01-17..2020-10-29&type=Issues) | [@sdague](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asdague+updated%3A2020-01-17..2020-10-29&type=Issues) | [@snickell](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asnickell+updated%3A2020-01-17..2020-10-29&type=Issues) | [@SonakshiGrover](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3ASonakshiGrover+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ssanderson](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Assanderson+updated%3A2020-01-17..2020-10-29&type=Issues) | [@stefanvangastel](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astefanvangastel+updated%3A2020-01-17..2020-10-29&type=Issues) | [@steinad](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asteinad+updated%3A2020-01-17..2020-10-29&type=Issues) | [@stephen-a2z](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astephen-a2z+updated%3A2020-01-17..2020-10-29&type=Issues) | [@stevegore](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astevegore+updated%3A2020-01-17..2020-10-29&type=Issues) | [@stv0g](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Astv0g+updated%3A2020-01-17..2020-10-29&type=Issues) | [@subgero](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asubgero+updated%3A2020-01-17..2020-10-29&type=Issues) | [@sudi007](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asudi007+updated%3A2020-01-17..2020-10-29&type=Issues) | [@summerswallow](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asummerswallow+updated%3A2020-01-17..2020-10-29&type=Issues) | [@support](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asupport+updated%3A2020-01-17..2020-10-29&type=Issues) | [@synchronizing](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Asynchronizing+updated%3A2020-01-17..2020-10-29&type=Issues) | [@thuvh](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Athuvh+updated%3A2020-01-17..2020-10-29&type=Issues) | [@tritemio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atritemio+updated%3A2020-01-17..2020-10-29&type=Issues) | [@twalcari](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Atwalcari+updated%3A2020-01-17..2020-10-29&type=Issues) | [@vchandvankar](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Avchandvankar+updated%3A2020-01-17..2020-10-29&type=Issues) | [@vilhelmen](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Avilhelmen+updated%3A2020-01-17..2020-10-29&type=Issues) | [@vlizanae](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Avlizanae+updated%3A2020-01-17..2020-10-29&type=Issues) | [@weimin](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aweimin+updated%3A2020-01-17..2020-10-29&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awelcome+updated%3A2020-01-17..2020-10-29&type=Issues) | [@willingc](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Awillingc+updated%3A2020-01-17..2020-10-29&type=Issues) | [@xlotlu](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Axlotlu+updated%3A2020-01-17..2020-10-29&type=Issues) | [@yhal-nesi](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayhal-nesi+updated%3A2020-01-17..2020-10-29&type=Issues) | [@ynnelson](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Aynnelson+updated%3A2020-01-17..2020-10-29&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Ayuvipanda+updated%3A2020-01-17..2020-10-29&type=Issues) | [@zonca](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3Azonca+updated%3A2020-01-17..2020-10-29&type=Issues) | [@Zsailer](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyterhub+involves%3AZsailer+updated%3A2020-01-17..2020-10-29&type=Issues)\n\n## 1.1\n\n### [1.1.0] 2020-01-17\n\n1.1 is a release with lots of accumulated fixes and improvements,\nespecially in performance, metrics, and customization.\nThere are no database changes in 1.1, so no database upgrade is required\nwhen upgrading from 1.0 to 1.1.\n\nOf particular interest to deployments with automatic health checking and/or large numbers of users is that the slow startup time\nintroduced in 1.0 by additional spawner validation can now be mitigated by `JupyterHub.init_spawners_timeout`,\nallowing the Hub to become responsive before the spawners may have finished validating.\n\nSeveral new Prometheus metrics are added (and others fixed!)\nto measure sources of common performance issues,\nsuch as proxy interactions and startup.\n\n1.1 also begins adoption of the Jupyter telemetry project in JupyterHub,\nSee [The Jupyter Telemetry docs](https://jupyter-telemetry.readthedocs.io)\nfor more info. The only events so far are starting and stopping servers,\nbut more will be added in future releases.\n\nThere are many more fixes and improvements listed below.\nThanks to everyone who has contributed to this release!\n\n#### New\n\n- LocalProcessSpawner should work on windows by using psutil.pid_exists [#2882](https://github.com/jupyterhub/jupyterhub/pull/2882) ([@ociule](https://github.com/ociule))\n- trigger auth_state_hook prior to options form, add auth_state to template namespace [#2881](https://github.com/jupyterhub/jupyterhub/pull/2881) ([@minrk](https://github.com/minrk))\n- Added guide 'install jupyterlab the hard way' #2110 [#2842](https://github.com/jupyterhub/jupyterhub/pull/2842) ([@mangecoeur](https://github.com/mangecoeur))\n- Add prometheus metric to measure hub startup time [#2799](https://github.com/jupyterhub/jupyterhub/pull/2799) ([@rajat404](https://github.com/rajat404))\n- Add Spawner.auth_state_hook [#2555](https://github.com/jupyterhub/jupyterhub/pull/2555) ([@rcthomas](https://github.com/rcthomas))\n- Link services from jupyterhub pages [#2763](https://github.com/jupyterhub/jupyterhub/pull/2763) ([@rcthomas](https://github.com/rcthomas))\n- `JupyterHub.user_redirect_hook` is added to allow admins to customize /user-redirect/ behavior [#2790](https://github.com/jupyterhub/jupyterhub/pull/2790) ([@yuvipanda](https://github.com/yuvipanda))\n- Add prometheus metric to measure hub startup time [#2799](https://github.com/jupyterhub/jupyterhub/pull/2799) ([@rajat404](https://github.com/rajat404))\n- Add prometheus metric to measure proxy route poll times [#2798](https://github.com/jupyterhub/jupyterhub/pull/2798) ([@rajat404](https://github.com/rajat404))\n- `PROXY_DELETE_DURATION_SECONDS` prometheus metric is added, to measure proxy route deletion times [#2788](https://github.com/jupyterhub/jupyterhub/pull/2788) ([@rajat404](https://github.com/rajat404))\n- `Service.oauth_no_confirm` is added, it is useful for admin-managed services that are considered part of the Hub and shouldn't need to prompt the user for access [#2767](https://github.com/jupyterhub/jupyterhub/pull/2767) ([@minrk](https://github.com/minrk))\n- `JupyterHub.default_server_name` is added to make the default server be a named server with provided name [#2735](https://github.com/jupyterhub/jupyterhub/pull/2735) ([@krinsman](https://github.com/krinsman))\n- `JupyterHub.init_spawners_timeout` is introduced to combat slow startups on large JupyterHub deployments [#2721](https://github.com/jupyterhub/jupyterhub/pull/2721) ([@minrk](https://github.com/minrk))\n- The configuration `uids` for local authenticators is added to consistently assign users UNIX id's between installations [#2687](https://github.com/jupyterhub/jupyterhub/pull/2687) ([@rgerkin](https://github.com/rgerkin))\n- `JupyterHub.activity_resolution` is introduced with a default value of 30s improving performance by not updating the database with user activity too often [#2605](https://github.com/jupyterhub/jupyterhub/pull/2605) ([@minrk](https://github.com/minrk))\n- [HubAuth](https://jupyterhub.readthedocs.io/en/stable/api/services.auth.html#jupyterhub.services.auth.HubAuth)'s SSL configuration can now be set through environment variables [#2588](https://github.com/jupyterhub/jupyterhub/pull/2588) ([@cmd-ntrf](https://github.com/cmd-ntrf))\n- Expose spawner.user_options in REST API. [#2755](https://github.com/jupyterhub/jupyterhub/pull/2755) ([@danielballan](https://github.com/danielballan))\n- add block for scripts included in head [#2828](https://github.com/jupyterhub/jupyterhub/pull/2828) ([@bitnik](https://github.com/bitnik))\n- Instrument JupyterHub to record events with jupyter_telemetry [Part II] [#2698](https://github.com/jupyterhub/jupyterhub/pull/2698) ([@Zsailer](https://github.com/Zsailer))\n- Make announcements visible without custom HTML [#2570](https://github.com/jupyterhub/jupyterhub/pull/2570) ([@consideRatio](https://github.com/consideRatio))\n- Display server version on admin page [#2776](https://github.com/jupyterhub/jupyterhub/pull/2776) ([@vilhelmen](https://github.com/vilhelmen))\n\n#### Fixes\n\n- Bugfix: pam_normalize_username didn't return username [#2876](https://github.com/jupyterhub/jupyterhub/pull/2876) ([@rkdarst](https://github.com/rkdarst))\n- Cleanup if spawner stop fails [#2849](https://github.com/jupyterhub/jupyterhub/pull/2849) ([@gabber12](https://github.com/gabber12))\n- Fix an issue occurring with the default spawner and `internal_ssl` enabled [#2785](https://github.com/jupyterhub/jupyterhub/pull/2785) ([@rpwagner](https://github.com/rpwagner))\n- Fix named servers to not be spawnable unless activated [#2772](https://github.com/jupyterhub/jupyterhub/pull/2772) ([@bitnik](https://github.com/bitnik))\n- JupyterHub now awaits proxy availability before accepting web requests [#2750](https://github.com/jupyterhub/jupyterhub/pull/2750) ([@minrk](https://github.com/minrk))\n- Fix a no longer valid assumption that MySQL and MariaDB need to have `innodb_file_format` and `innodb_large_prefix` configured [#2712](https://github.com/jupyterhub/jupyterhub/pull/2712) ([@chicocvenancio](https://github.com/chicocvenancio))\n- Login/Logout button now updates to Login on logout [#2705](https://github.com/jupyterhub/jupyterhub/pull/2705) ([@aar0nTw](https://github.com/aar0nTw))\n- Fix handling of exceptions within `pre_spawn_start` hooks [#2684](https://github.com/jupyterhub/jupyterhub/pull/2684) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Fix an issue where a user could end up spawning a default server instead of a named server as intended [#2682](https://github.com/jupyterhub/jupyterhub/pull/2682) ([@rcthomas](https://github.com/rcthomas))\n- /hub/admin now redirects to login if unauthenticated [#2670](https://github.com/jupyterhub/jupyterhub/pull/2670) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Fix spawning of users with names containing characters that needs to be escaped [#2648](https://github.com/jupyterhub/jupyterhub/pull/2648) ([@nicorikken](https://github.com/nicorikken))\n- Fix `TOTAL_USERS` prometheus metric [#2637](https://github.com/jupyterhub/jupyterhub/pull/2637) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Fix `RUNNING_SERVERS` prometheus metric [#2629](https://github.com/jupyterhub/jupyterhub/pull/2629) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Fix faulty redirects to 404 that could occur with the use of named servers [#2594](https://github.com/jupyterhub/jupyterhub/pull/2594) ([@vilhelmen](https://github.com/vilhelmen))\n- JupyterHub API spec is now a valid OpenAPI spec [#2590](https://github.com/jupyterhub/jupyterhub/pull/2590) ([@sbrunk](https://github.com/sbrunk))\n- Use of `--help` or `--version` previously could output unrelated errors [#2584](https://github.com/jupyterhub/jupyterhub/pull/2584) ([@minrk](https://github.com/minrk))\n- No longer crash on startup in Windows [#2560](https://github.com/jupyterhub/jupyterhub/pull/2560) ([@adelcast](https://github.com/adelcast))\n- Escape usernames in the frontend [#2640](https://github.com/jupyterhub/jupyterhub/pull/2640) ([@nicorikken](https://github.com/nicorikken))\n\n#### Maintenance\n\n- Optimize CI jobs and default to bionic [#2897](https://github.com/jupyterhub/jupyterhub/pull/2897) ([@consideRatio](https://github.com/consideRatio))\n- catch connection error for ssl failures [#2889](https://github.com/jupyterhub/jupyterhub/pull/2889) ([@minrk](https://github.com/minrk))\n- Fix implementation of default server name [#2887](https://github.com/jupyterhub/jupyterhub/pull/2887) ([@krinsman](https://github.com/krinsman))\n- fixup allow_failures [#2880](https://github.com/jupyterhub/jupyterhub/pull/2880) ([@minrk](https://github.com/minrk))\n- Pass tests on Python 3.8 [#2879](https://github.com/jupyterhub/jupyterhub/pull/2879) ([@minrk](https://github.com/minrk))\n- Fixup .travis.yml [#2868](https://github.com/jupyterhub/jupyterhub/pull/2868) ([@consideRatio](https://github.com/consideRatio))\n- Update README's badges [#2867](https://github.com/jupyterhub/jupyterhub/pull/2867) ([@consideRatio](https://github.com/consideRatio))\n- Dockerfile: add build-essential to builder image [#2866](https://github.com/jupyterhub/jupyterhub/pull/2866) ([@rkdarst](https://github.com/rkdarst))\n- Dockerfile: Copy share/ to the final image [#2864](https://github.com/jupyterhub/jupyterhub/pull/2864) ([@rkdarst](https://github.com/rkdarst))\n- chore: Dockerfile updates [#2853](https://github.com/jupyterhub/jupyterhub/pull/2853) ([@jgwerner](https://github.com/jgwerner))\n- simplify Dockerfile [#2840](https://github.com/jupyterhub/jupyterhub/pull/2840) ([@minrk](https://github.com/minrk))\n- docker: fix onbuild image arg [#2839](https://github.com/jupyterhub/jupyterhub/pull/2839) ([@minrk](https://github.com/minrk))\n- remove redundant pip package list in docs environment.yml [#2838](https://github.com/jupyterhub/jupyterhub/pull/2838) ([@minrk](https://github.com/minrk))\n- docs: Update docs to run tests [#2812](https://github.com/jupyterhub/jupyterhub/pull/2812) ([@jgwerner](https://github.com/jgwerner))\n- remove redundant pip package list in docs environment.yml [#2838](https://github.com/jupyterhub/jupyterhub/pull/2838) ([@minrk](https://github.com/minrk))\n- updating to pandas docs theme [#2820](https://github.com/jupyterhub/jupyterhub/pull/2820) ([@choldgraf](https://github.com/choldgraf))\n- Adding institutional faq [#2800](https://github.com/jupyterhub/jupyterhub/pull/2800) ([@choldgraf](https://github.com/choldgraf))\n- Add inline comment to test [#2826](https://github.com/jupyterhub/jupyterhub/pull/2826) ([@consideRatio](https://github.com/consideRatio))\n- Raise error on missing specified config [#2824](https://github.com/jupyterhub/jupyterhub/pull/2824) ([@consideRatio](https://github.com/consideRatio))\n- chore: Refactor Dockerfile [#2816](https://github.com/jupyterhub/jupyterhub/pull/2816) ([@jgwerner](https://github.com/jgwerner))\n- chore: Update python versions in travis matrix [#2811](https://github.com/jupyterhub/jupyterhub/pull/2811) ([@jgwerner](https://github.com/jgwerner))\n- chore: Bump package versions used in pre-commit config [#2810](https://github.com/jupyterhub/jupyterhub/pull/2810) ([@jgwerner](https://github.com/jgwerner))\n- adding docs preview to circleci [#2803](https://github.com/jupyterhub/jupyterhub/pull/2803) ([@choldgraf](https://github.com/choldgraf))\n- adding institutional faq [#2800](https://github.com/jupyterhub/jupyterhub/pull/2800) ([@choldgraf](https://github.com/choldgraf))\n- The proxy's REST API listens on port `8001` [#2795](https://github.com/jupyterhub/jupyterhub/pull/2795) ([@bnuhero](https://github.com/bnuhero))\n- cull_idle_servers.py: rebind max_age and inactive_limit locally [#2794](https://github.com/jupyterhub/jupyterhub/pull/2794) ([@rkdarst](https://github.com/rkdarst))\n- Fix deprecation warnings [#2789](https://github.com/jupyterhub/jupyterhub/pull/2789) ([@tirkarthi](https://github.com/tirkarthi))\n- Log proxy class [#2783](https://github.com/jupyterhub/jupyterhub/pull/2783) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Add docs for fixtures in CONTRIBUTING.md [#2782](https://github.com/jupyterhub/jupyterhub/pull/2782) ([@kinow](https://github.com/kinow))\n- Fix header project name typo [#2775](https://github.com/jupyterhub/jupyterhub/pull/2775) ([@kinow](https://github.com/kinow))\n- Remove unused setupegg.py [#2774](https://github.com/jupyterhub/jupyterhub/pull/2774) ([@kinow](https://github.com/kinow))\n- Log JupyterHub version on startup [#2752](https://github.com/jupyterhub/jupyterhub/pull/2752) ([@consideRatio](https://github.com/consideRatio))\n- Reduce verbosity for \"Failing suspected API request to not-running server\" (new) [#2751](https://github.com/jupyterhub/jupyterhub/pull/2751) ([@rkdarst](https://github.com/rkdarst))\n- Add missing package for json schema doc build [#2744](https://github.com/jupyterhub/jupyterhub/pull/2744) ([@willingc](https://github.com/willingc))\n- block urllib3 versions with encoding bug [#2743](https://github.com/jupyterhub/jupyterhub/pull/2743) ([@minrk](https://github.com/minrk))\n- Remove tornado deprecated/unnecessary AsyncIOMainLoop().install() call [#2740](https://github.com/jupyterhub/jupyterhub/pull/2740) ([@kinow](https://github.com/kinow))\n- Fix deprecated call [#2739](https://github.com/jupyterhub/jupyterhub/pull/2739) ([@kinow](https://github.com/kinow))\n- Remove duplicate hub and authenticator traitlets from Spawner [#2736](https://github.com/jupyterhub/jupyterhub/pull/2736) ([@eslavich](https://github.com/eslavich))\n- Update issue template [#2725](https://github.com/jupyterhub/jupyterhub/pull/2725) ([@willingc](https://github.com/willingc))\n- Use autodoc-traits sphinx extension [#2723](https://github.com/jupyterhub/jupyterhub/pull/2723) ([@willingc](https://github.com/willingc))\n- Add New Server: change redirecting to relative to home page in js [#2714](https://github.com/jupyterhub/jupyterhub/pull/2714) ([@bitnik](https://github.com/bitnik))\n- Create a warning when creating a service implicitly from service_tokens [#2704](https://github.com/jupyterhub/jupyterhub/pull/2704) ([@katsar0v](https://github.com/katsar0v))\n- Fix mistypos [#2702](https://github.com/jupyterhub/jupyterhub/pull/2702) ([@rlukin](https://github.com/rlukin))\n- Add Jupyter community link [#2696](https://github.com/jupyterhub/jupyterhub/pull/2696) ([@mattjshannon](https://github.com/mattjshannon))\n- Fix failing travis tests [#2695](https://github.com/jupyterhub/jupyterhub/pull/2695) ([@GeorgianaElena](https://github.com/GeorgianaElena))\n- Documentation update: hint for using services instead of service tokens. [#2679](https://github.com/jupyterhub/jupyterhub/pull/2679) ([@katsar0v](https://github.com/katsar0v))\n- Replace header logo: jupyter -> jupyterhub [#2672](https://github.com/jupyterhub/jupyterhub/pull/2672) ([@consideRatio](https://github.com/consideRatio))\n- Update spawn-form example [#2662](https://github.com/jupyterhub/jupyterhub/pull/2662) ([@kinow](https://github.com/kinow))\n- Update flask hub authentication services example in doc [#2658](https://github.com/jupyterhub/jupyterhub/pull/2658) ([@cmd-ntrf](https://github.com/cmd-ntrf))\n- close `<div class=\"container\">` tag in home.html [#2649](https://github.com/jupyterhub/jupyterhub/pull/2649) ([@bitnik](https://github.com/bitnik))\n- Some theme updates; no double NEXT/PREV buttons. [#2647](https://github.com/jupyterhub/jupyterhub/pull/2647) ([@Carreau](https://github.com/Carreau))\n- fix typos on technical reference documentation [#2646](https://github.com/jupyterhub/jupyterhub/pull/2646) ([@ilee38](https://github.com/ilee38))\n- Update links for Hadoop-related subprojects [#2645](https://github.com/jupyterhub/jupyterhub/pull/2645) ([@jcrist](https://github.com/jcrist))\n- corrected docker network create instructions in dockerfiles README [#2632](https://github.com/jupyterhub/jupyterhub/pull/2632) ([@bartolone](https://github.com/bartolone))\n- Fixed docs and testing code to use refactored SimpleLocalProcessSpawner [#2631](https://github.com/jupyterhub/jupyterhub/pull/2631) ([@danlester](https://github.com/danlester))\n- Update the config used for testing [#2628](https://github.com/jupyterhub/jupyterhub/pull/2628) ([@jtpio](https://github.com/jtpio))\n- Update doc: do not suggest depricated config key [#2626](https://github.com/jupyterhub/jupyterhub/pull/2626) ([@lumbric](https://github.com/lumbric))\n- Add missing words [#2625](https://github.com/jupyterhub/jupyterhub/pull/2625) ([@remram44](https://github.com/remram44))\n- cull-idle: Include a hint on how to add custom culling logic [#2613](https://github.com/jupyterhub/jupyterhub/pull/2613) ([@rkdarst](https://github.com/rkdarst))\n- Replace existing redirect code by Tornado's addslash decorator [#2609](https://github.com/jupyterhub/jupyterhub/pull/2609) ([@kinow](https://github.com/kinow))\n- Hide Stop My Server red button after server stopped. [#2577](https://github.com/jupyterhub/jupyterhub/pull/2577) ([@aar0nTw](https://github.com/aar0nTw))\n- Update link of `changelog` [#2565](https://github.com/jupyterhub/jupyterhub/pull/2565) ([@iblis17](https://github.com/iblis17))\n- typo [#2564](https://github.com/jupyterhub/jupyterhub/pull/2564) ([@julienchastang](https://github.com/julienchastang))\n- Update to simplify the language related to spawner options [#2558](https://github.com/jupyterhub/jupyterhub/pull/2558) ([@NikeNano](https://github.com/NikeNano))\n- Adding the use case of the Elucidata: How Jupyter Notebook is used in\u2026 [#2548](https://github.com/jupyterhub/jupyterhub/pull/2548) ([@IamViditAgarwal](https://github.com/IamViditAgarwal))\n- Dict rewritten as literal [#2546](https://github.com/jupyterhub/jupyterhub/pull/2546) ([@remyleone](https://github.com/remyleone))\n\n## 1.0\n\n### [1.0.0] 2019-05-03\n\nJupyterHub 1.0 is a major milestone for JupyterHub.\nHuge thanks to the many people who have contributed to this release,\nwhether it was through discussion, testing, documentation, or development.\n\n#### Major new features\n\n- Support TLS encryption and authentication of all internal communication.\n  Spawners must implement `.move_certs` method to make certificates available\n  to the notebook server if it is not local to the Hub.\n- There is now full UI support for managing named servers.\n  With named servers, each jupyterhub user may have access to more than one named server. For example, a professor may access a server named `research` and another named `teaching`.\n\n  ![named servers on the home page](./images/named-servers-home.png)\n\n- Authenticators can now expire and refresh authentication data by implementing\n  `Authenticator.refresh_user(user)`.\n  This allows things like OAuth data and access tokens to be refreshed.\n  When used together with `Authenticator.refresh_pre_spawn = True`,\n  auth refresh can be forced prior to Spawn,\n  allowing the Authenticator to _require_ that authentication data is fresh\n  immediately before the user's server is launched.\n\n```eval_rst\n.. seealso::\n\n  - :meth:`.Authenticator.refresh_user`\n  - :meth:`.Spawner.create_certs`\n  - :meth:`.Spawner.move_certs`\n```\n\n#### New features\n\n- allow custom spawners, authenticators, and proxies to register themselves via 'entry points', enabling more convenient configuration such as:\n\n  ```python\n  c.JupyterHub.authenticator_class = 'github'\n  c.JupyterHub.spawner_class = 'docker'\n  c.JupyterHub.proxy_class = 'traefik_etcd'\n  ```\n\n- Spawners are passed the tornado Handler object that requested their spawn (as `self.handler`),\n  so they can do things like make decisions based on query arguments in the request.\n- SimpleSpawner and DummyAuthenticator, which are useful for testing, have been merged into JupyterHub itself:\n\n  ```python\n  # For testing purposes only. Should not be used in production.\n  c.JupyterHub.authenticator_class = 'dummy'\n  c.JupyterHub.spawner_class = 'simple'\n  ```\n\n  These classes are **not** appropriate for production use. Only testing.\n\n- Add health check endpoint at `/hub/health`\n- Several prometheus metrics have been added (thanks to [Outreachy](https://www.outreachy.org/) applicants!)\n- A new API for registering user activity.\n  To prepare for the addition of [alternate proxy implementations](https://github.com/jupyterhub/traefik-proxy),\n  responsibility for tracking activity is taken away from the proxy\n  and moved to the notebook server (which already has activity tracking features).\n  Activity is now tracked by pushing it to the Hub from user servers instead of polling the\n  proxy API.\n- Dynamic `options_form` callables may now return an empty string\n  which will result in no options form being rendered.\n- `Spawner.user_options` is persisted to the database to be re-used,\n  so that a server spawned once via the form can be re-spawned via the API\n  with the same options.\n- Added `c.PAMAuthenticator.pam_normalize_username` option for round-tripping\n  usernames through PAM to retrieve the normalized form.\n- Added `c.JupyterHub.named_server_limit_per_user` configuration to limit\n  the number of named servers each user can have.\n  The default is 0, for no limit.\n- API requests to HubAuthenticated services (e.g. single-user servers)\n  may pass a token in the `Authorization` header,\n  matching authentication with the Hub API itself.\n- Added `Authenticator.is_admin(handler, authentication)` method\n  and `Authenticator.admin_groups` configuration for automatically\n  determining that a member of a group should be considered an admin.\n- New `c.Authenticator.post_auth_hook` configuration\n  that can be any callable of the form `async def hook(authenticator, handler, authentication=None):`.\n  This hook may transform the return value of `Authenticator.authenticate()`\n  and return a new authentication dictionary,\n  e.g. specifying admin privileges, group membership,\n  or custom allowed/blocked logic.\n  This hook is called _after_ existing normalization and allowed-username checking.\n- `Spawner.options_from_form` may now be async\n- Added `JupyterHub.shutdown_on_logout` option to trigger shutdown of a user's\n  servers when they log out.\n- When `Spawner.start` raises an Exception,\n  a message can be passed on to the user if the exception has a `.jupyterhub_message` attribute.\n\n#### Changes\n\n- Authentication methods such as `check_whitelist` should now take an additional\n  `authentication` argument\n  that will be a dictionary (default: None) of authentication data,\n  as returned by `Authenticator.authenticate()`:\n\n  ```python\n  def check_whitelist(self, username, authentication=None):\n      ...\n  ```\n\n  `authentication` should have a default value of None\n  for backward-compatibility with jupyterhub < 1.0.\n\n- Prometheus metrics page is now authenticated.\n  Any authenticated user may see the prometheus metrics.\n  To disable prometheus authentication,\n  set `JupyterHub.authenticate_prometheus = False`.\n- Visits to `/user/:name` no longer trigger an implicit launch of the user's server.\n  Instead, a page is shown indicating that the server is not running\n  with a link to request the spawn.\n- API requests to `/user/:name` for a not-running server will have status 503 instead of 404.\n- OAuth includes a confirmation page when attempting to visit another user's server,\n  so that users can choose to cancel authentication with the single-user server.\n  Confirmation is still skipped when accessing your own server.\n\n#### Fixed\n\n- Various fixes to improve Windows compatibility\n  (default Authenticator and Spawner still do not support Windows, but other Spawners may)\n- Fixed compatibility with Oracle db\n- Fewer redirects following a visit to the default `/` url\n- Error when progress is requested before progress is ready\n- Error when API requests are made to a not-running server without authentication\n- Avoid logging database password on connect if password is specified in `JupyterHub.db_url`.\n\n#### Development changes\n\nThere have been several changes to the development process that shouldn't\ngenerally affect users of JupyterHub, but may affect contributors.\nIn general, see `CONTRIBUTING.md` for contribution info or ask if you have questions.\n\n- JupyterHub has adopted `black` as a code autoformatter and `pre-commit`\n  as a tool for automatically running code formatting on commit.\n  This is meant to make it _easier_ to contribute to JupyterHub,\n  so let us know if it's having the opposite effect.\n- JupyterHub has switched its test suite to using `pytest-asyncio` from `pytest-tornado`.\n- OAuth is now implemented internally using `oauthlib` instead of `python-oauth2`. This should have no effect on behavior.\n\n## 0.9\n\n### [0.9.6] 2019-04-01\n\nJupyterHub 0.9.6 is a security release.\n\n- Fixes an Open Redirect vulnerability (CVE-2019-10255).\n\nJupyterHub 0.9.5 included a partial fix for this issue.\n\n### [0.9.4] 2018-09-24\n\nJupyterHub 0.9.4 is a small bugfix release.\n\n- Fixes an issue that required all running user servers to be restarted\n  when performing an upgrade from 0.8 to 0.9.\n- Fixes content-type for API endpoints back to `application/json`.\n  It was `text/html` in 0.9.0-0.9.3.\n\n### [0.9.3] 2018-09-12\n\nJupyterHub 0.9.3 contains small bugfixes and improvements\n\n- Fix token page and model handling of `expires_at`.\n  This field was missing from the REST API model for tokens\n  and could cause the token page to not render\n- Add keep-alive to progress event stream to avoid proxies dropping\n  the connection due to inactivity\n- Documentation and example improvements\n- Disable quit button when using notebook 5.6\n- Prototype new feature (may change prior to 1.0):\n  pass requesting Handler to Spawners during start,\n  accessible as `self.handler`\n\n### [0.9.2] 2018-08-10\n\nJupyterHub 0.9.2 contains small bugfixes and improvements.\n\n- Documentation and example improvements\n- Add `Spawner.consecutive_failure_limit` config for aborting the Hub if too many spawns fail in a row.\n- Fix for handling SIGTERM when run with asyncio (tornado 5)\n- Windows compatibility fixes\n\n### [0.9.1] 2018-07-04\n\nJupyterHub 0.9.1 contains a number of small bugfixes on top of 0.9.\n\n- Use a PID file for the proxy to decrease the likelihood that a leftover proxy process will prevent JupyterHub from restarting\n- `c.LocalProcessSpawner.shell_cmd` is now configurable\n- API requests to stopped servers (requests to the hub for `/user/:name/api/...`) fail with 404 rather than triggering a restart of the server\n- Compatibility fix for notebook 5.6.0 which will introduce further\n  security checks for local connections\n- Managed services always use localhost to talk to the Hub if the Hub listening on all interfaces\n- When using a URL prefix, the Hub route will be `JupyterHub.base_url` instead of unconditionally `/`\n- additional fixes and improvements\n\n### [0.9.0] 2018-06-15\n\nJupyterHub 0.9 is a major upgrade of JupyterHub.\nThere are several changes to the database schema,\nso make sure to backup your database and run:\n\n    jupyterhub upgrade-db\n\nafter upgrading jupyterhub.\n\nThe biggest change for 0.9 is the switch to asyncio coroutines everywhere\ninstead of tornado coroutines. Custom Spawners and Authenticators are still\nfree to use tornado coroutines for async methods, as they will continue to\nwork. As part of this upgrade, JupyterHub 0.9 drops support for Python < 3.5\nand tornado < 5.0.\n\n#### Changed\n\n- Require Python >= 3.5\n- Require tornado >= 5.0\n- Use asyncio coroutines throughout\n- Set status 409 for conflicting actions instead of 400,\n  e.g. creating users or groups that already exist.\n- timestamps in REST API continue to be UTC, but now include 'Z' suffix\n  to identify them as such.\n- REST API User model always includes `servers` dict,\n  not just when named servers are enabled.\n- `server` info is no longer available to oauth identification endpoints,\n  only user info and group membership.\n- `User.last_activity` may be None if a user has not been seen,\n  rather than starting with the user creation time\n  which is now separately stored as `User.created`.\n- static resources are now found in `$PREFIX/share/jupyterhub` instead of `share/jupyter/hub` for improved consistency.\n- Deprecate `.extra_log_file` config. Use pipe redirection instead:\n\n      jupyterhub &>> /var/log/jupyterhub.log\n\n- Add `JupyterHub.bind_url` config for setting the full bind URL of the proxy.\n  Sets ip, port, base_url all at once.\n- Add `JupyterHub.hub_bind_url` for setting the full host+port of the Hub.\n  `hub_bind_url` supports unix domain sockets, e.g.\n  `unix+http://%2Fsrv%2Fjupyterhub.sock`\n- Deprecate `JupyterHub.hub_connect_port` config in favor of `JupyterHub.hub_connect_url`. `hub_connect_ip` is not deprecated\n  and can still be used in the common case where only the ip address of the hub differs from the bind ip.\n\n#### Added\n\n- Spawners can define a `.progress` method which should be an async generator.\n  The generator should yield events of the form:\n  ```python\n  {\n    \"message\": \"some-state-message\",\n    \"progress\": 50,\n  }\n  ```\n  These messages will be shown with a progress bar on the spawn-pending page.\n  The `async_generator` package can be used to make async generators\n  compatible with Python 3.5.\n- track activity of individual API tokens\n- new REST API for managing API tokens at `/hub/api/user/tokens[/token-id]`\n- allow viewing/revoking tokens via token page\n- User creation time is available in the REST API as `User.created`\n- Server start time is stored as `Server.started`\n- `Spawner.start` may return a URL for connecting to a notebook instead of `(ip, port)`. This enables Spawners to launch servers that setup their own HTTPS.\n- Optimize database performance by disabling sqlalchemy expire_on_commit by default.\n- Add `python -m jupyterhub.dbutil shell` entrypoint for quickly\n  launching an IPython session connected to your JupyterHub database.\n- Include `User.auth_state` in user model on single-user REST endpoints for admins only.\n- Include `Server.state` in server model on REST endpoints for admins only.\n- Add `Authenticator.blacklist` for blocking users instead of allowing.\n- Pass `c.JupyterHub.tornado_settings['cookie_options']` down to Spawners\n  so that cookie options (e.g. `expires_days`) can be set globally for the whole application.\n- SIGINFO (`ctrl-t`) handler showing the current status of all running threads,\n  coroutines, and CPU/memory/FD consumption.\n- Add async `Spawner.get_options_form` alternative to `.options_form`, so it can be a coroutine.\n- Add `JupyterHub.redirect_to_server` config to govern whether\n  users should be sent to their server on login or the JupyterHub home page.\n- html page templates can be more easily customized and extended.\n- Allow registering external OAuth clients for using the Hub as an OAuth provider.\n- Add basic prometheus metrics at `/hub/metrics` endpoint.\n- Add session-id cookie, enabling immediate revocation of login tokens.\n- Authenticators may specify that users are admins by specifying the `admin` key when return the user model as a dict.\n- Added \"Start All\" button to admin page for launching all user servers at once.\n- Services have an `info` field which is a dictionary.\n  This is accessible via the REST API.\n- `JupyterHub.extra_handlers` allows defining additional tornado RequestHandlers attached to the Hub.\n- API tokens may now expire.\n  Expiry is available in the REST model as `expires_at`,\n  and settable when creating API tokens by specifying `expires_in`.\n\n#### Fixed\n\n- Remove green from theme to improve accessibility\n- Fix error when proxy deletion fails due to route already being deleted\n- clear `?redirects` from URL on successful launch\n- disable send2trash by default, which is rarely desirable for jupyterhub\n- Put PAM calls in a thread so they don't block the main application\n  in cases where PAM is slow (e.g. LDAP).\n- Remove implicit spawn from login handler,\n  instead relying on subsequent request for `/user/:name` to trigger spawn.\n- Fixed several inconsistencies for initial redirects,\n  depending on whether server is running or not and whether the user is logged in or not.\n- Admin requests for `/user/:name` (when admin-access is enabled) launch the right server if it's not running instead of redirecting to their own.\n- Major performance improvement starting up JupyterHub with many users,\n  especially when most are inactive.\n- Various fixes in race conditions and performance improvements with the default proxy.\n- Fixes for CORS headers\n- Stop setting `.form-control` on spawner form inputs unconditionally.\n- Better recovery from database errors and database connection issues\n  without having to restart the Hub.\n- Fix handling of `~` character in usernames.\n- Fix jupyterhub startup when `getpass.getuser()` would fail,\n  e.g. due to missing entry in passwd file in containers.\n\n## 0.8\n\n### [0.8.1] 2017-11-07\n\nJupyterHub 0.8.1 is a collection of bugfixes and small improvements on 0.8.\n\n#### Added\n\n- Run tornado with AsyncIO by default\n- Add `jupyterhub --upgrade-db` flag for automatically upgrading the database as part of startup.\n  This is useful for cases where manually running `jupyterhub upgrade-db`\n  as a separate step is unwieldy.\n- Avoid creating backups of the database when no changes are to be made by\n  `jupyterhub upgrade-db`.\n\n#### Fixed\n\n- Add some further validation to usernames - `/` is not allowed in usernames.\n- Fix empty logout page when using auto_login\n- Fix autofill of username field in default login form.\n- Fix listing of users on the admin page who have not yet started their server.\n- Fix ever-growing traceback when re-raising Exceptions from spawn failures.\n- Remove use of deprecated `bower` for javascript client dependencies.\n\n### [0.8.0] 2017-10-03\n\nJupyterHub 0.8 is a big release!\n\nPerhaps the biggest change is the use of OAuth to negotiate authentication\nbetween the Hub and single-user services.\nDue to this change, it is important that the single-user server\nand Hub are both running the same version of JupyterHub.\nIf you are using containers (e.g. via DockerSpawner or KubeSpawner),\nthis means upgrading jupyterhub in your user images at the same time as the Hub.\nIn most cases, a\n\n    pip install jupyterhub==version\n\nin your Dockerfile is sufficient.\n\n#### Added\n\n- JupyterHub now defined a `Proxy` API for custom\n  proxy implementations other than the default.\n  The defaults are unchanged,\n  but configuration of the proxy is now done on the `ConfigurableHTTPProxy` class instead of the top-level JupyterHub.\n  TODO: docs for writing a custom proxy.\n- Single-user servers and services\n  (anything that uses HubAuth)\n  can now accept token-authenticated requests via the Authentication header.\n- Authenticators can now store state in the Hub's database.\n  To do so, the `authenticate` method should return a dict of the form\n\n  ```python\n  {\n      'username': 'name',\n      'state': {}\n  }\n  ```\n\n  This data will be encrypted and requires `JUPYTERHUB_CRYPT_KEY` environment variable to be set\n  and the `Authenticator.enable_auth_state` flag to be True.\n  If these are not set, auth_state returned by the Authenticator will not be stored.\n\n- There is preliminary support for multiple (named) servers per user in the REST API.\n  Named servers can be created via API requests, but there is currently no UI for managing them.\n- Add `LocalProcessSpawner.popen_kwargs` and `LocalProcessSpawner.shell_cmd`\n  for customizing how user server processes are launched.\n- Add `Authenticator.auto_login` flag for skipping the \"Login with...\" page explicitly.\n- Add `JupyterHub.hub_connect_ip` configuration\n  for the ip that should be used when connecting to the Hub.\n  This is promoting (and deprecating) `DockerSpawner.hub_ip_connect`\n  for use by all Spawners.\n- Add `Spawner.pre_spawn_hook(spawner)` hook for customizing\n  pre-spawn events.\n- Add `JupyterHub.active_server_limit` and `JupyterHub.concurrent_spawn_limit`\n  for limiting the total number of running user servers and the number of pending spawns, respectively.\n\n#### Changed\n\n- more arguments to spawners are now passed via environment variables (`.get_env()`)\n  rather than CLI arguments (`.get_args()`)\n- internally generated tokens no longer get extra hash rounds,\n  significantly speeding up authentication.\n  The hash rounds were deemed unnecessary because the tokens were already\n  generated with high entropy.\n- `JUPYTERHUB_API_TOKEN` env is available at all times,\n  rather than being removed during single-user start.\n  The token is now accessible to kernel processes,\n  enabling user kernels to make authenticated API requests to Hub-authenticated services.\n- Cookie secrets should be 32B hex instead of large base64 secrets.\n- pycurl is used by default, if available.\n\n#### Fixed\n\nSo many things fixed!\n\n- Collisions are checked when users are renamed\n- Fix bug where OAuth authenticators could not logout users\n  due to being redirected right back through the login process.\n- If there are errors loading your config files,\n  JupyterHub will refuse to start with an informative error.\n  Previously, the bad config would be ignored and JupyterHub would launch with default configuration.\n- Raise 403 error on unauthorized user rather than redirect to login,\n  which could cause redirect loop.\n- Set `httponly` on cookies because it's prudent.\n- Improve support for MySQL as the database backend\n- Many race conditions and performance problems under heavy load have been fixed.\n- Fix alembic tagging of database schema versions.\n\n#### Removed\n\n- End support for Python 3.3\n\n## 0.7\n\n### [0.7.2] - 2017-01-09\n\n#### Added\n\n- Support service environment variables and defaults in `jupyterhub-singleuser`\n  for easier deployment of notebook servers as a Service.\n- Add `--group` parameter for deploying `jupyterhub-singleuser` as a Service with group authentication.\n- Include URL parameters when redirecting through `/user-redirect/`\n\n### Fixed\n\n- Fix group authentication for HubAuthenticated services\n\n### [0.7.1] - 2017-01-02\n\n#### Added\n\n- `Spawner.will_resume` for signaling that a single-user server is paused instead of stopped.\n  This is needed for cases like `DockerSpawner.remove_containers = False`,\n  where the first API token is re-used for subsequent spawns.\n- Warning on startup about single-character usernames,\n  caused by common `set('string')` typo in config.\n\n#### Fixed\n\n- Removed spurious warning about empty `next_url`, which is AOK.\n\n### [0.7.0] - 2016-12-2\n\n#### Added\n\n- Implement Services API [\\#705](https://github.com/jupyterhub/jupyterhub/pull/705)\n- Add `/api/` and `/api/info` endpoints [\\#675](https://github.com/jupyterhub/jupyterhub/pull/675)\n- Add documentation for JupyterLab, pySpark configuration, troubleshooting,\n  and more.\n- Add logging of error if adding users already in database. [\\#689](https://github.com/jupyterhub/jupyterhub/pull/689)\n- Add HubAuth class for authenticating with JupyterHub. This class can\n  be used by any application, even outside tornado.\n- Add user groups.\n- Add `/hub/user-redirect/...` URL for redirecting users to a file on their own server.\n\n#### Changed\n\n- Always install with setuptools but not eggs (effectively require\n  `pip install .`) [\\#722](https://github.com/jupyterhub/jupyterhub/pull/722)\n- Updated formatting of changelog. [\\#711](https://github.com/jupyterhub/jupyterhub/pull/711)\n- Single-user server is provided by JupyterHub package, so single-user servers depend on JupyterHub now.\n\n#### Fixed\n\n- Fix docker repository location [\\#719](https://github.com/jupyterhub/jupyterhub/pull/719)\n- Fix swagger spec conformance and timestamp type in API spec\n- Various redirect-loop-causing bugs have been fixed.\n\n#### Removed\n\n- Deprecate `--no-ssl` command line option. It has no meaning and warns if\n  used. [\\#789](https://github.com/jupyterhub/jupyterhub/pull/789)\n- Deprecate `%U` username substitution in favor of `{username}`. [\\#748](https://github.com/jupyterhub/jupyterhub/pull/748)\n- Removed deprecated SwarmSpawner link. [\\#699](https://github.com/jupyterhub/jupyterhub/pull/699)\n\n## 0.6\n\n### [0.6.1] - 2016-05-04\n\nBugfixes on 0.6:\n\n- statsd is an optional dependency, only needed if in use\n- Notice more quickly when servers have crashed\n- Better error pages for proxy errors\n- Add Stop All button to admin panel for stopping all servers at once\n\n### [0.6.0] - 2016-04-25\n\n- JupyterHub has moved to a new `jupyterhub` namespace on GitHub and Docker. What was `juptyer/jupyterhub` is now `jupyterhub/jupyterhub`, etc.\n- `jupyterhub/jupyterhub` image on DockerHub no longer loads the jupyterhub_config.py in an ONBUILD step. A new `jupyterhub/jupyterhub-onbuild` image does this\n- Add statsd support, via `c.JupyterHub.statsd_{host,port,prefix}`\n- Update to traitlets 4.1 `@default`, `@observe` APIs for traits\n- Allow disabling PAM sessions via `c.PAMAuthenticator.open_sessions = False`. This may be needed on SELinux-enabled systems, where our PAM session logic often does not work properly\n- Add `Spawner.environment` configurable, for defining extra environment variables to load for single-user servers\n- JupyterHub API tokens can be pregenerated and loaded via `JupyterHub.api_tokens`, a dict of `token: username`.\n- JupyterHub API tokens can be requested via the REST API, with a POST request to `/api/authorizations/token`.\n  This can only be used if the Authenticator has a username and password.\n- Various fixes for user URLs and redirects\n\n## [0.5] - 2016-03-07\n\n- Single-user server must be run with Jupyter Notebook \u2265 4.0\n- Require `--no-ssl` confirmation to allow the Hub to be run without SSL (e.g. behind SSL termination in nginx)\n- Add lengths to text fields for MySQL support\n- Add `Spawner.disable_user_config` for preventing user-owned configuration from modifying single-user servers.\n- Fixes for MySQL support.\n- Add ability to run each user's server on its own subdomain. Requires wildcard DNS and wildcard SSL to be feasible. Enable subdomains by setting `JupyterHub.subdomain_host = 'https://jupyterhub.domain.tld[:port]'`.\n- Use `127.0.0.1` for local communication instead of `localhost`, avoiding issues with DNS on some systems.\n- Fix race that could add users to proxy prematurely if spawning is slow.\n\n## 0.4\n\n### [0.4.1] - 2016-02-03\n\nFix removal of `/login` page in 0.4.0, breaking some OAuth providers.\n\n### [0.4.0] - 2016-02-01\n\n- Add `Spawner.user_options_form` for specifying an HTML form to present to users,\n  allowing users to influence the spawning of their own servers.\n- Add `Authenticator.pre_spawn_start` and `Authenticator.post_spawn_stop` hooks,\n  so that Authenticators can do setup or teardown (e.g. passing credentials to Spawner,\n  mounting data sources, etc.).\n  These methods are typically used with custom Authenticator+Spawner pairs.\n- 0.4 will be the last JupyterHub release where single-user servers running IPython 3 is supported instead of Notebook \u2265 4.0.\n\n## [0.3] - 2015-11-04\n\n- No longer make the user starting the Hub an admin\n- start PAM sessions on login\n- hooks for Authenticators to fire before spawners start and after they stop,\n  allowing deeper interaction between Spawner/Authenticator pairs.\n- login redirect fixes\n\n## [0.2] - 2015-07-12\n\n- Based on standalone traitlets instead of IPython.utils.traitlets\n- multiple users in admin panel\n- Fixes for usernames that require escaping\n\n## 0.1 - 2015-03-07\n\nFirst preview release\n\n[unreleased]: https://github.com/jupyterhub/jupyterhub/compare/1.5.0...HEAD\n[1.5.0]: https://github.com/jupyterhub/jupyterhub/compare/1.4.2...1.5.0\n[1.4.2]: https://github.com/jupyterhub/jupyterhub/compare/1.4.1...1.4.2\n[1.4.1]: https://github.com/jupyterhub/jupyterhub/compare/1.4.0...1.4.1\n[1.4.0]: https://github.com/jupyterhub/jupyterhub/compare/1.3.0...1.4.0\n[1.3.0]: https://github.com/jupyterhub/jupyterhub/compare/1.2.1...1.3.0\n[1.2.2]: https://github.com/jupyterhub/jupyterhub/compare/1.2.1...1.2.2\n[1.2.1]: https://github.com/jupyterhub/jupyterhub/compare/1.2.0...1.2.1\n[1.2.0]: https://github.com/jupyterhub/jupyterhub/compare/1.1.0...1.2.0\n[1.1.0]: https://github.com/jupyterhub/jupyterhub/compare/1.0.0...1.1.0\n[1.0.0]: https://github.com/jupyterhub/jupyterhub/compare/0.9.6...1.0.0\n[0.9.6]: https://github.com/jupyterhub/jupyterhub/compare/0.9.4...0.9.6\n[0.9.4]: https://github.com/jupyterhub/jupyterhub/compare/0.9.3...0.9.4\n[0.9.3]: https://github.com/jupyterhub/jupyterhub/compare/0.9.2...0.9.3\n[0.9.2]: https://github.com/jupyterhub/jupyterhub/compare/0.9.1...0.9.2\n[0.9.1]: https://github.com/jupyterhub/jupyterhub/compare/0.9.0...0.9.1\n[0.9.0]: https://github.com/jupyterhub/jupyterhub/compare/0.8.1...0.9.0\n[0.8.1]: https://github.com/jupyterhub/jupyterhub/compare/0.8.0...0.8.1\n[0.8.0]: https://github.com/jupyterhub/jupyterhub/compare/0.7.2...0.8.0\n[0.7.2]: https://github.com/jupyterhub/jupyterhub/compare/0.7.1...0.7.2\n[0.7.1]: https://github.com/jupyterhub/jupyterhub/compare/0.7.0...0.7.1\n[0.7.0]: https://github.com/jupyterhub/jupyterhub/compare/0.6.1...0.7.0\n[0.6.1]: https://github.com/jupyterhub/jupyterhub/compare/0.6.0...0.6.1\n[0.6.0]: https://github.com/jupyterhub/jupyterhub/compare/0.5.0...0.6.0\n[0.5]: https://github.com/jupyterhub/jupyterhub/compare/0.4.1...0.5.0\n[0.4.1]: https://github.com/jupyterhub/jupyterhub/compare/0.4.0...0.4.1\n[0.4.0]: https://github.com/jupyterhub/jupyterhub/compare/0.3.0...0.4.0\n[0.3]: https://github.com/jupyterhub/jupyterhub/compare/0.2.0...0.3.0\n[0.2]: https://github.com/jupyterhub/jupyterhub/compare/0.1.0...0.2.0\n", "\"\"\"Authenticating services with JupyterHub.\n\nCookies are sent to the Hub for verification. The Hub replies with a JSON\nmodel describing the authenticated user.\n\n``HubAuth`` can be used in any application, even outside tornado.\n\n``HubAuthenticated`` is a mixin class for tornado handlers that should\nauthenticate with the Hub.\n\n\"\"\"\nimport base64\nimport json\nimport os\nimport random\nimport re\nimport socket\nimport string\nimport time\nimport uuid\nimport warnings\nfrom unittest import mock\nfrom urllib.parse import quote\nfrom urllib.parse import urlencode\n\nimport requests\nfrom tornado.httputil import url_concat\nfrom tornado.log import app_log\nfrom tornado.web import HTTPError\nfrom tornado.web import RequestHandler\nfrom traitlets import default\nfrom traitlets import Dict\nfrom traitlets import Instance\nfrom traitlets import Integer\nfrom traitlets import observe\nfrom traitlets import Unicode\nfrom traitlets import validate\nfrom traitlets.config import SingletonConfigurable\n\nfrom ..utils import url_path_join\n\n\nclass _ExpiringDict(dict):\n    \"\"\"Dict-like cache for Hub API requests\n\n    Values will expire after max_age seconds.\n\n    A monotonic timer is used (time.monotonic).\n\n    A max_age of 0 means cache forever.\n    \"\"\"\n\n    max_age = 0\n\n    def __init__(self, max_age=0):\n        self.max_age = max_age\n        self.timestamps = {}\n        self.values = {}\n\n    def __setitem__(self, key, value):\n        \"\"\"Store key and record timestamp\"\"\"\n        self.timestamps[key] = time.monotonic()\n        self.values[key] = value\n\n    def __repr__(self):\n        \"\"\"include values and timestamps in repr\"\"\"\n        now = time.monotonic()\n        return repr(\n            {\n                key: '{value} (age={age:.0f}s)'.format(\n                    value=repr(value)[:16] + '...', age=now - self.timestamps[key]\n                )\n                for key, value in self.values.items()\n            }\n        )\n\n    def _check_age(self, key):\n        \"\"\"Check timestamp for a key\"\"\"\n        if key not in self.values:\n            # not registered, nothing to do\n            return\n        now = time.monotonic()\n        timestamp = self.timestamps[key]\n        if self.max_age > 0 and timestamp + self.max_age < now:\n            self.values.pop(key)\n            self.timestamps.pop(key)\n\n    def __contains__(self, key):\n        \"\"\"dict check for `key in dict`\"\"\"\n        self._check_age(key)\n        return key in self.values\n\n    def __getitem__(self, key):\n        \"\"\"Check age before returning value\"\"\"\n        self._check_age(key)\n        return self.values[key]\n\n    def get(self, key, default=None):\n        \"\"\"dict-like get:\"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def clear(self):\n        \"\"\"Clear the cache\"\"\"\n        self.values.clear()\n        self.timestamps.clear()\n\n\nclass HubAuth(SingletonConfigurable):\n    \"\"\"A class for authenticating with JupyterHub\n\n    This can be used by any application.\n\n    If using tornado, use via :class:`HubAuthenticated` mixin.\n    If using manually, use the ``.user_for_cookie(cookie_value)`` method\n    to identify the user corresponding to a given cookie value.\n\n    The following config must be set:\n\n    - api_token (token for authenticating with JupyterHub API),\n      fetched from the JUPYTERHUB_API_TOKEN env by default.\n\n    The following config MAY be set:\n\n    - api_url: the base URL of the Hub's internal API,\n      fetched from JUPYTERHUB_API_URL by default.\n    - cookie_cache_max_age: the number of seconds responses\n      from the Hub should be cached.\n    - login_url (the *public* ``/hub/login`` URL of the Hub).\n    - cookie_name: the name of the cookie I should be using,\n      if different from the default (unlikely).\n\n    \"\"\"\n\n    hub_host = Unicode(\n        '',\n        help=\"\"\"The public host of JupyterHub\n        \n        Only used if JupyterHub is spreading servers across subdomains.\n        \"\"\",\n    ).tag(config=True)\n\n    @default('hub_host')\n    def _default_hub_host(self):\n        return os.getenv('JUPYTERHUB_HOST', '')\n\n    base_url = Unicode(\n        os.getenv('JUPYTERHUB_SERVICE_PREFIX') or '/',\n        help=\"\"\"The base URL prefix of this application\n\n        e.g. /services/service-name/ or /user/name/\n\n        Default: get from JUPYTERHUB_SERVICE_PREFIX\n        \"\"\",\n    ).tag(config=True)\n\n    @validate('base_url')\n    def _add_slash(self, proposal):\n        \"\"\"Ensure base_url starts and ends with /\"\"\"\n        value = proposal['value']\n        if not value.startswith('/'):\n            value = '/' + value\n        if not value.endswith('/'):\n            value = value + '/'\n        return value\n\n    # where is the hub\n    api_url = Unicode(\n        os.getenv('JUPYTERHUB_API_URL') or 'http://127.0.0.1:8081/hub/api',\n        help=\"\"\"The base API URL of the Hub.\n\n        Typically `http://hub-ip:hub-port/hub/api`\n        \"\"\",\n    ).tag(config=True)\n\n    @default('api_url')\n    def _api_url(self):\n        env_url = os.getenv('JUPYTERHUB_API_URL')\n        if env_url:\n            return env_url\n        else:\n            return 'http://127.0.0.1:8081' + url_path_join(self.hub_prefix, 'api')\n\n    api_token = Unicode(\n        os.getenv('JUPYTERHUB_API_TOKEN', ''),\n        help=\"\"\"API key for accessing Hub API.\n\n        Generate with `jupyterhub token [username]` or add to JupyterHub.services config.\n        \"\"\",\n    ).tag(config=True)\n\n    hub_prefix = Unicode(\n        '/hub/',\n        help=\"\"\"The URL prefix for the Hub itself.\n\n        Typically /hub/\n        \"\"\",\n    ).tag(config=True)\n\n    @default('hub_prefix')\n    def _default_hub_prefix(self):\n        return url_path_join(os.getenv('JUPYTERHUB_BASE_URL') or '/', 'hub') + '/'\n\n    login_url = Unicode(\n        '/hub/login',\n        help=\"\"\"The login URL to use\n\n        Typically /hub/login\n        \"\"\",\n    ).tag(config=True)\n\n    @default('login_url')\n    def _default_login_url(self):\n        return self.hub_host + url_path_join(self.hub_prefix, 'login')\n\n    keyfile = Unicode(\n        os.getenv('JUPYTERHUB_SSL_KEYFILE', ''),\n        help=\"\"\"The ssl key to use for requests\n\n        Use with certfile\n        \"\"\",\n    ).tag(config=True)\n\n    certfile = Unicode(\n        os.getenv('JUPYTERHUB_SSL_CERTFILE', ''),\n        help=\"\"\"The ssl cert to use for requests\n\n        Use with keyfile\n        \"\"\",\n    ).tag(config=True)\n\n    client_ca = Unicode(\n        os.getenv('JUPYTERHUB_SSL_CLIENT_CA', ''),\n        help=\"\"\"The ssl certificate authority to use to verify requests\n\n        Use with keyfile and certfile\n        \"\"\",\n    ).tag(config=True)\n\n    cookie_name = Unicode(\n        'jupyterhub-services', help=\"\"\"The name of the cookie I should be looking for\"\"\"\n    ).tag(config=True)\n\n    cookie_options = Dict(\n        help=\"\"\"Additional options to pass when setting cookies.\n\n        Can include things like `expires_days=None` for session-expiry\n        or `secure=True` if served on HTTPS and default HTTPS discovery fails\n        (e.g. behind some proxies).\n        \"\"\"\n    ).tag(config=True)\n\n    @default('cookie_options')\n    def _default_cookie_options(self):\n        # load default from env\n        options_env = os.environ.get('JUPYTERHUB_COOKIE_OPTIONS')\n        if options_env:\n            return json.loads(options_env)\n        else:\n            return {}\n\n    cookie_cache_max_age = Integer(help=\"DEPRECATED. Use cache_max_age\")\n\n    @observe('cookie_cache_max_age')\n    def _deprecated_cookie_cache(self, change):\n        warnings.warn(\n            \"cookie_cache_max_age is deprecated in JupyterHub 0.8. Use cache_max_age instead.\"\n        )\n        self.cache_max_age = change.new\n\n    cache_max_age = Integer(\n        300,\n        help=\"\"\"The maximum time (in seconds) to cache the Hub's responses for authentication.\n\n        A larger value reduces load on the Hub and occasional response lag.\n        A smaller value reduces propagation time of changes on the Hub (rare).\n\n        Default: 300 (five minutes)\n        \"\"\",\n    ).tag(config=True)\n    cache = Instance(_ExpiringDict, allow_none=False)\n\n    @default('cache')\n    def _default_cache(self):\n        return _ExpiringDict(self.cache_max_age)\n\n    def _check_hub_authorization(self, url, cache_key=None, use_cache=True):\n        \"\"\"Identify a user with the Hub\n\n        Args:\n            url (str): The API URL to check the Hub for authorization\n                       (e.g. http://127.0.0.1:8081/hub/api/authorizations/token/abc-def)\n            cache_key (str): The key for checking the cache\n            use_cache (bool): Specify use_cache=False to skip cached cookie values (default: True)\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n\n        Raises an HTTPError if the request failed for a reason other than no such user.\n        \"\"\"\n        if use_cache:\n            if cache_key is None:\n                raise ValueError(\"cache_key is required when using cache\")\n            # check for a cached reply, so we don't check with the Hub if we don't have to\n            try:\n                return self.cache[cache_key]\n            except KeyError:\n                app_log.debug(\"HubAuth cache miss: %s\", cache_key)\n\n        data = self._api_request('GET', url, allow_404=True)\n        if data is None:\n            app_log.warning(\"No Hub user identified for request\")\n        else:\n            app_log.debug(\"Received request from Hub user %s\", data)\n        if use_cache:\n            # cache result\n            self.cache[cache_key] = data\n        return data\n\n    def _api_request(self, method, url, **kwargs):\n        \"\"\"Make an API request\"\"\"\n        allow_404 = kwargs.pop('allow_404', False)\n        headers = kwargs.setdefault('headers', {})\n        headers.setdefault('Authorization', 'token %s' % self.api_token)\n        if \"cert\" not in kwargs and self.certfile and self.keyfile:\n            kwargs[\"cert\"] = (self.certfile, self.keyfile)\n            if self.client_ca:\n                kwargs[\"verify\"] = self.client_ca\n        try:\n            r = requests.request(method, url, **kwargs)\n        except requests.ConnectionError as e:\n            app_log.error(\"Error connecting to %s: %s\", self.api_url, e)\n            msg = \"Failed to connect to Hub API at %r.\" % self.api_url\n            msg += (\n                \"  Is the Hub accessible at this URL (from host: %s)?\"\n                % socket.gethostname()\n            )\n            if '127.0.0.1' in self.api_url:\n                msg += (\n                    \"  Make sure to set c.JupyterHub.hub_ip to an IP accessible to\"\n                    + \" single-user servers if the servers are not on the same host as the Hub.\"\n                )\n            raise HTTPError(500, msg)\n\n        data = None\n        if r.status_code == 404 and allow_404:\n            pass\n        elif r.status_code == 403:\n            app_log.error(\n                \"I don't have permission to check authorization with JupyterHub, my auth token may have expired: [%i] %s\",\n                r.status_code,\n                r.reason,\n            )\n            app_log.error(r.text)\n            raise HTTPError(\n                500, \"Permission failure checking authorization, I may need a new token\"\n            )\n        elif r.status_code >= 500:\n            app_log.error(\n                \"Upstream failure verifying auth token: [%i] %s\",\n                r.status_code,\n                r.reason,\n            )\n            app_log.error(r.text)\n            raise HTTPError(502, \"Failed to check authorization (upstream problem)\")\n        elif r.status_code >= 400:\n            app_log.warning(\n                \"Failed to check authorization: [%i] %s\", r.status_code, r.reason\n            )\n            app_log.warning(r.text)\n            msg = \"Failed to check authorization\"\n            # pass on error from oauth failure\n            try:\n                response = r.json()\n                # prefer more specific 'error_description', fallback to 'error'\n                description = response.get(\n                    \"error_description\", response.get(\"error\", \"Unknown error\")\n                )\n            except Exception:\n                pass\n            else:\n                msg += \": \" + description\n            raise HTTPError(500, msg)\n        else:\n            data = r.json()\n\n        return data\n\n    def user_for_cookie(self, encrypted_cookie, use_cache=True, session_id=''):\n        \"\"\"Ask the Hub to identify the user for a given cookie.\n\n        Args:\n            encrypted_cookie (str): the cookie value (not decrypted, the Hub will do that)\n            use_cache (bool): Specify use_cache=False to skip cached cookie values (default: True)\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n\n            The 'name' field contains the user's name.\n        \"\"\"\n        return self._check_hub_authorization(\n            url=url_path_join(\n                self.api_url,\n                \"authorizations/cookie\",\n                self.cookie_name,\n                quote(encrypted_cookie, safe=''),\n            ),\n            cache_key='cookie:{}:{}'.format(session_id, encrypted_cookie),\n            use_cache=use_cache,\n        )\n\n    def user_for_token(self, token, use_cache=True, session_id=''):\n        \"\"\"Ask the Hub to identify the user for a given token.\n\n        Args:\n            token (str): the token\n            use_cache (bool): Specify use_cache=False to skip cached cookie values (default: True)\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n\n            The 'name' field contains the user's name.\n        \"\"\"\n        return self._check_hub_authorization(\n            url=url_path_join(\n                self.api_url, \"authorizations/token\", quote(token, safe='')\n            ),\n            cache_key='token:{}:{}'.format(session_id, token),\n            use_cache=use_cache,\n        )\n\n    auth_header_name = 'Authorization'\n    auth_header_pat = re.compile(r'token\\s+(.+)', re.IGNORECASE)\n\n    def get_token(self, handler):\n        \"\"\"Get the user token from a request\n\n        - in URL parameters: ?token=<token>\n        - in header: Authorization: token <token>\n        \"\"\"\n\n        user_token = handler.get_argument('token', '')\n        if not user_token:\n            # get it from Authorization header\n            m = self.auth_header_pat.match(\n                handler.request.headers.get(self.auth_header_name, '')\n            )\n            if m:\n                user_token = m.group(1)\n        return user_token\n\n    def _get_user_cookie(self, handler):\n        \"\"\"Get the user model from a cookie\"\"\"\n        encrypted_cookie = handler.get_cookie(self.cookie_name)\n        session_id = self.get_session_id(handler)\n        if encrypted_cookie:\n            return self.user_for_cookie(encrypted_cookie, session_id=session_id)\n\n    def get_session_id(self, handler):\n        \"\"\"Get the jupyterhub session id\n\n        from the jupyterhub-session-id cookie.\n        \"\"\"\n        return handler.get_cookie('jupyterhub-session-id', '')\n\n    def get_user(self, handler):\n        \"\"\"Get the Hub user for a given tornado handler.\n\n        Checks cookie with the Hub to identify the current user.\n\n        Args:\n            handler (tornado.web.RequestHandler): the current request handler\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n\n            The 'name' field contains the user's name.\n        \"\"\"\n\n        # only allow this to be called once per handler\n        # avoids issues if an error is raised,\n        # since this may be called again when trying to render the error page\n        if hasattr(handler, '_cached_hub_user'):\n            return handler._cached_hub_user\n\n        handler._cached_hub_user = user_model = None\n        session_id = self.get_session_id(handler)\n\n        # check token first\n        token = self.get_token(handler)\n        if token:\n            user_model = self.user_for_token(token, session_id=session_id)\n            if user_model:\n                handler._token_authenticated = True\n\n        # no token, check cookie\n        if user_model is None:\n            user_model = self._get_user_cookie(handler)\n\n        # cache result\n        handler._cached_hub_user = user_model\n        if not user_model:\n            app_log.debug(\"No user identified\")\n        return user_model\n\n\nclass HubOAuth(HubAuth):\n    \"\"\"HubAuth using OAuth for login instead of cookies set by the Hub.\n\n    .. versionadded: 0.8\n    \"\"\"\n\n    # Overrides of HubAuth API\n\n    @default('login_url')\n    def _login_url(self):\n        return url_concat(\n            self.oauth_authorization_url,\n            {\n                'client_id': self.oauth_client_id,\n                'redirect_uri': self.oauth_redirect_uri,\n                'response_type': 'code',\n            },\n        )\n\n    @property\n    def cookie_name(self):\n        \"\"\"Use OAuth client_id for cookie name\n\n        because we don't want to use the same cookie name\n        across OAuth clients.\n        \"\"\"\n        return self.oauth_client_id\n\n    @property\n    def state_cookie_name(self):\n        \"\"\"The cookie name for storing OAuth state\n\n        This cookie is only live for the duration of the OAuth handshake.\n        \"\"\"\n        return self.cookie_name + '-oauth-state'\n\n    def _get_user_cookie(self, handler):\n        token = handler.get_secure_cookie(self.cookie_name)\n        session_id = self.get_session_id(handler)\n        if token:\n            token = token.decode('ascii', 'replace')\n            user_model = self.user_for_token(token, session_id=session_id)\n            if user_model is None:\n                app_log.warning(\"Token stored in cookie may have expired\")\n                handler.clear_cookie(self.cookie_name)\n            return user_model\n\n    # HubOAuth API\n\n    oauth_client_id = Unicode(\n        help=\"\"\"The OAuth client ID for this application.\n        \n        Use JUPYTERHUB_CLIENT_ID by default.\n        \"\"\"\n    ).tag(config=True)\n\n    @default('oauth_client_id')\n    def _client_id(self):\n        return os.getenv('JUPYTERHUB_CLIENT_ID', '')\n\n    @validate('oauth_client_id', 'api_token')\n    def _ensure_not_empty(self, proposal):\n        if not proposal.value:\n            raise ValueError(\"%s cannot be empty.\" % proposal.trait.name)\n        return proposal.value\n\n    oauth_redirect_uri = Unicode(\n        help=\"\"\"OAuth redirect URI\n        \n        Should generally be /base_url/oauth_callback\n        \"\"\"\n    ).tag(config=True)\n\n    @default('oauth_redirect_uri')\n    def _default_redirect(self):\n        return os.getenv('JUPYTERHUB_OAUTH_CALLBACK_URL') or url_path_join(\n            self.base_url, 'oauth_callback'\n        )\n\n    oauth_authorization_url = Unicode(\n        '/hub/api/oauth2/authorize',\n        help=\"The URL to redirect to when starting the OAuth process\",\n    ).tag(config=True)\n\n    @default('oauth_authorization_url')\n    def _auth_url(self):\n        return self.hub_host + url_path_join(self.hub_prefix, 'api/oauth2/authorize')\n\n    oauth_token_url = Unicode(\n        help=\"\"\"The URL for requesting an OAuth token from JupyterHub\"\"\"\n    ).tag(config=True)\n\n    @default('oauth_token_url')\n    def _token_url(self):\n        return url_path_join(self.api_url, 'oauth2/token')\n\n    def token_for_code(self, code):\n        \"\"\"Get token for OAuth temporary code\n\n        This is the last step of OAuth login.\n        Should be called in OAuth Callback handler.\n\n        Args:\n            code (str): oauth code for finishing OAuth login\n        Returns:\n            token (str): JupyterHub API Token\n        \"\"\"\n        # GitHub specifies a POST request yet requires URL parameters\n        params = dict(\n            client_id=self.oauth_client_id,\n            client_secret=self.api_token,\n            grant_type='authorization_code',\n            code=code,\n            redirect_uri=self.oauth_redirect_uri,\n        )\n\n        token_reply = self._api_request(\n            'POST',\n            self.oauth_token_url,\n            data=urlencode(params).encode('utf8'),\n            headers={'Content-Type': 'application/x-www-form-urlencoded'},\n        )\n\n        return token_reply['access_token']\n\n    def _encode_state(self, state):\n        \"\"\"Encode a state dict as url-safe base64\"\"\"\n        # trim trailing `=` because = is itself not url-safe!\n        json_state = json.dumps(state)\n        return (\n            base64.urlsafe_b64encode(json_state.encode('utf8'))\n            .decode('ascii')\n            .rstrip('=')\n        )\n\n    def _decode_state(self, b64_state):\n        \"\"\"Decode a base64 state\n\n        Always returns a dict.\n        The dict will be empty if the state is invalid.\n        \"\"\"\n        if isinstance(b64_state, str):\n            b64_state = b64_state.encode('ascii')\n        if len(b64_state) != 4:\n            # restore padding\n            b64_state = b64_state + (b'=' * (4 - len(b64_state) % 4))\n        try:\n            json_state = base64.urlsafe_b64decode(b64_state).decode('utf8')\n        except ValueError:\n            app_log.error(\"Failed to b64-decode state: %r\", b64_state)\n            return {}\n        try:\n            return json.loads(json_state)\n        except ValueError:\n            app_log.error(\"Failed to json-decode state: %r\", json_state)\n            return {}\n\n    def set_state_cookie(self, handler, next_url=None):\n        \"\"\"Generate an OAuth state and store it in a cookie\n\n        Parameters\n        ----------\n        handler : RequestHandler\n            A tornado RequestHandler\n        next_url : str\n            The page to redirect to on successful login\n\n        Returns\n        -------\n        state : str\n            The OAuth state that has been stored in the cookie (url safe, base64-encoded)\n        \"\"\"\n        extra_state = {}\n        if handler.get_cookie(self.state_cookie_name):\n            # oauth state cookie is already set\n            # use a randomized cookie suffix to avoid collisions\n            # in case of concurrent logins\n            app_log.warning(\"Detected unused OAuth state cookies\")\n            cookie_suffix = ''.join(\n                random.choice(string.ascii_letters) for i in range(8)\n            )\n            cookie_name = '{}-{}'.format(self.state_cookie_name, cookie_suffix)\n            extra_state['cookie_name'] = cookie_name\n        else:\n            cookie_name = self.state_cookie_name\n        b64_state = self.generate_state(next_url, **extra_state)\n        kwargs = {\n            'path': self.base_url,\n            'httponly': True,\n            # Expire oauth state cookie in ten minutes.\n            # Usually this will be cleared by completed login\n            # in less than a few seconds.\n            # OAuth that doesn't complete shouldn't linger too long.\n            'max_age': 600,\n        }\n        if handler.request.protocol == 'https':\n            kwargs['secure'] = True\n        # load user cookie overrides\n        kwargs.update(self.cookie_options)\n        handler.set_secure_cookie(cookie_name, b64_state, **kwargs)\n        return b64_state\n\n    def generate_state(self, next_url=None, **extra_state):\n        \"\"\"Generate a state string, given a next_url redirect target\n\n        Parameters\n        ----------\n        next_url : str\n            The URL of the page to redirect to on successful login.\n\n        Returns\n        -------\n        state (str): The base64-encoded state string.\n        \"\"\"\n        state = {'uuid': uuid.uuid4().hex, 'next_url': next_url}\n        state.update(extra_state)\n        return self._encode_state(state)\n\n    def get_next_url(self, b64_state=''):\n        \"\"\"Get the next_url for redirection, given an encoded OAuth state\"\"\"\n        state = self._decode_state(b64_state)\n        return state.get('next_url') or self.base_url\n\n    def get_state_cookie_name(self, b64_state=''):\n        \"\"\"Get the cookie name for oauth state, given an encoded OAuth state\n\n        Cookie name is stored in the state itself because the cookie name\n        is randomized to deal with races between concurrent oauth sequences.\n        \"\"\"\n        state = self._decode_state(b64_state)\n        return state.get('cookie_name') or self.state_cookie_name\n\n    def set_cookie(self, handler, access_token):\n        \"\"\"Set a cookie recording OAuth result\"\"\"\n        kwargs = {'path': self.base_url, 'httponly': True}\n        if handler.request.protocol == 'https':\n            kwargs['secure'] = True\n        # load user cookie overrides\n        kwargs.update(self.cookie_options)\n        app_log.debug(\n            \"Setting oauth cookie for %s: %s, %s\",\n            handler.request.remote_ip,\n            self.cookie_name,\n            kwargs,\n        )\n        handler.set_secure_cookie(self.cookie_name, access_token, **kwargs)\n\n    def clear_cookie(self, handler):\n        \"\"\"Clear the OAuth cookie\"\"\"\n        handler.clear_cookie(self.cookie_name, path=self.base_url)\n\n\nclass UserNotAllowed(Exception):\n    \"\"\"Exception raised when a user is identified and not allowed\"\"\"\n\n    def __init__(self, model):\n        self.model = model\n\n    def __str__(self):\n        return '<{cls} {kind}={name}>'.format(\n            cls=self.__class__.__name__,\n            kind=self.model['kind'],\n            name=self.model['name'],\n        )\n\n\nclass HubAuthenticated(object):\n    \"\"\"Mixin for tornado handlers that are authenticated with JupyterHub\n\n    A handler that mixes this in must have the following attributes/properties:\n\n    - .hub_auth: A HubAuth instance\n    - .hub_users: A set of usernames to allow.\n      If left unspecified or None, username will not be checked.\n    - .hub_groups: A set of group names to allow.\n      If left unspecified or None, groups will not be checked.\n\n    Examples::\n\n        class MyHandler(HubAuthenticated, web.RequestHandler):\n            hub_users = {'inara', 'mal'}\n\n            def initialize(self, hub_auth):\n                self.hub_auth = hub_auth\n\n            @web.authenticated\n            def get(self):\n                ...\n\n    \"\"\"\n\n    hub_services = None  # set of allowed services\n    hub_users = None  # set of allowed users\n    hub_groups = None  # set of allowed groups\n    allow_admin = False  # allow any admin user access\n\n    @property\n    def allow_all(self):\n        \"\"\"Property indicating that all successfully identified user\n        or service should be allowed.\n        \"\"\"\n        return (\n            self.hub_services is None\n            and self.hub_users is None\n            and self.hub_groups is None\n        )\n\n    # self.hub_auth must be a HubAuth instance.\n    # If nothing specified, use default config,\n    # which will be configured with defaults\n    # based on JupyterHub environment variables for services.\n    _hub_auth = None\n    hub_auth_class = HubAuth\n\n    @property\n    def hub_auth(self):\n        if self._hub_auth is None:\n            self._hub_auth = self.hub_auth_class.instance()\n        return self._hub_auth\n\n    @hub_auth.setter\n    def hub_auth(self, auth):\n        self._hub_auth = auth\n\n    def get_login_url(self):\n        \"\"\"Return the Hub's login URL\"\"\"\n        login_url = self.hub_auth.login_url\n        if isinstance(self.hub_auth, HubOAuth):\n            # add state argument to OAuth url\n            state = self.hub_auth.set_state_cookie(self, next_url=self.request.uri)\n            login_url = url_concat(login_url, {'state': state})\n        # temporary override at setting level,\n        # to allow any subclass overrides of get_login_url to preserve their effect\n        # for example, APIHandler raises 403 to prevent redirects\n        with mock.patch.dict(self.application.settings, {\"login_url\": login_url}):\n            app_log.debug(\"Redirecting to login url: %s\", login_url)\n            return super().get_login_url()\n\n    def check_hub_user(self, model):\n        \"\"\"Check whether Hub-authenticated user or service should be allowed.\n\n        Returns the input if the user should be allowed, None otherwise.\n\n        Override if you want to check anything other than the username's presence in hub_users list.\n\n        Args:\n            model (dict): the user or service model returned from :class:`HubAuth`\n        Returns:\n            user_model (dict): The user model if the user should be allowed, None otherwise.\n        \"\"\"\n\n        name = model['name']\n        kind = model.setdefault('kind', 'user')\n        if self.allow_all:\n            app_log.debug(\n                \"Allowing Hub %s %s (all Hub users and services allowed)\", kind, name\n            )\n            return model\n\n        if self.allow_admin and model.get('admin', False):\n            app_log.debug(\"Allowing Hub admin %s\", name)\n            return model\n\n        if kind == 'service':\n            # it's a service, check hub_services\n            if self.hub_services and name in self.hub_services:\n                app_log.debug(\"Allowing Hub service %s\", name)\n                return model\n            else:\n                app_log.warning(\"Not allowing Hub service %s\", name)\n                raise UserNotAllowed(model)\n\n        if self.hub_users and name in self.hub_users:\n            # user in allowed list\n            app_log.debug(\"Allowing Hub user %s\", name)\n            return model\n        elif self.hub_groups and set(model['groups']).intersection(self.hub_groups):\n            allowed_groups = set(model['groups']).intersection(self.hub_groups)\n            app_log.debug(\n                \"Allowing Hub user %s in group(s) %s\",\n                name,\n                ','.join(sorted(allowed_groups)),\n            )\n            # group in allowed list\n            return model\n        else:\n            app_log.warning(\"Not allowing Hub user %s\", name)\n            raise UserNotAllowed(model)\n\n    def get_current_user(self):\n        \"\"\"Tornado's authentication method\n\n        Returns:\n            user_model (dict): The user model, if a user is identified, None if authentication fails.\n        \"\"\"\n        if hasattr(self, '_hub_auth_user_cache'):\n            return self._hub_auth_user_cache\n        user_model = self.hub_auth.get_user(self)\n        if not user_model:\n            self._hub_auth_user_cache = None\n            return\n        try:\n            self._hub_auth_user_cache = self.check_hub_user(user_model)\n        except UserNotAllowed as e:\n            # cache None, in case get_user is called again while processing the error\n            self._hub_auth_user_cache = None\n            # Override redirect so if/when tornado @web.authenticated\n            # tries to redirect to login URL, 403 will be raised instead.\n            # This is not the best, but avoids problems that can be caused\n            # when get_current_user is allowed to raise.\n            def raise_on_redirect(*args, **kwargs):\n                raise HTTPError(\n                    403, \"{kind} {name} is not allowed.\".format(**user_model)\n                )\n\n            self.redirect = raise_on_redirect\n            return\n        except Exception:\n            self._hub_auth_user_cache = None\n            raise\n\n        # store ?token=... tokens passed via url in a cookie for future requests\n        url_token = self.get_argument('token', '')\n        if (\n            user_model\n            and url_token\n            and getattr(self, '_token_authenticated', False)\n            and hasattr(self.hub_auth, 'set_cookie')\n        ):\n            # authenticated via `?token=`\n            # set a cookie for future requests\n            # hub_auth.set_cookie is only available on HubOAuth\n            self.hub_auth.set_cookie(self, url_token)\n        return self._hub_auth_user_cache\n\n\nclass HubOAuthenticated(HubAuthenticated):\n    \"\"\"Simple subclass of HubAuthenticated using OAuth instead of old shared cookies\"\"\"\n\n    hub_auth_class = HubOAuth\n\n\nclass HubOAuthCallbackHandler(HubOAuthenticated, RequestHandler):\n    \"\"\"OAuth Callback handler\n\n    Finishes the OAuth flow, setting a cookie to record the user's info.\n\n    Should be registered at ``SERVICE_PREFIX/oauth_callback``\n\n    .. versionadded: 0.8\n    \"\"\"\n\n    async def get(self):\n        error = self.get_argument(\"error\", False)\n        if error:\n            msg = self.get_argument(\"error_description\", error)\n            raise HTTPError(400, \"Error in oauth: %s\" % msg)\n\n        code = self.get_argument(\"code\", False)\n        if not code:\n            raise HTTPError(400, \"oauth callback made without a token\")\n\n        # validate OAuth state\n        arg_state = self.get_argument(\"state\", None)\n        if arg_state is None:\n            raise HTTPError(500, \"oauth state is missing. Try logging in again.\")\n        cookie_name = self.hub_auth.get_state_cookie_name(arg_state)\n        cookie_state = self.get_secure_cookie(cookie_name)\n        # clear cookie state now that we've consumed it\n        self.clear_cookie(cookie_name, path=self.hub_auth.base_url)\n        if isinstance(cookie_state, bytes):\n            cookie_state = cookie_state.decode('ascii', 'replace')\n        # check that state matches\n        if arg_state != cookie_state:\n            app_log.warning(\"oauth state %r != %r\", arg_state, cookie_state)\n            raise HTTPError(403, \"oauth state does not match. Try logging in again.\")\n        next_url = self.hub_auth.get_next_url(cookie_state)\n        # TODO: make async (in a Thread?)\n        token = self.hub_auth.token_for_code(code)\n        session_id = self.hub_auth.get_session_id(self)\n        user_model = self.hub_auth.user_for_token(token, session_id=session_id)\n        if user_model is None:\n            raise HTTPError(500, \"oauth callback failed to identify a user\")\n        app_log.info(\"Logged-in user %s\", user_model)\n        self.hub_auth.set_cookie(self, token)\n        self.redirect(next_url or self.hub_auth.base_url)\n", "#!/usr/bin/env python\n\"\"\"Mixins to regular notebook server to add JupyterHub auth.\n\nMeant to be compatible with jupyter_server and classic notebook\n\nUse make_singleuser_app to create a compatible Application class\nwith JupyterHub authentication mixins enabled.\n\"\"\"\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\nimport asyncio\nimport json\nimport logging\nimport os\nimport random\nimport secrets\nimport sys\nimport warnings\nfrom datetime import datetime\nfrom datetime import timezone\nfrom textwrap import dedent\nfrom urllib.parse import urlparse\n\nfrom jinja2 import ChoiceLoader\nfrom jinja2 import FunctionLoader\nfrom tornado import ioloop\nfrom tornado.httpclient import AsyncHTTPClient\nfrom tornado.httpclient import HTTPRequest\nfrom tornado.web import RequestHandler\nfrom traitlets import Any\nfrom traitlets import Bool\nfrom traitlets import Bytes\nfrom traitlets import CUnicode\nfrom traitlets import default\nfrom traitlets import import_item\nfrom traitlets import Integer\nfrom traitlets import observe\nfrom traitlets import TraitError\nfrom traitlets import Unicode\nfrom traitlets import validate\nfrom traitlets.config import Configurable\n\nfrom .._version import __version__\nfrom .._version import _check_version\nfrom ..log import log_request\nfrom ..services.auth import HubOAuth\nfrom ..services.auth import HubOAuthCallbackHandler\nfrom ..services.auth import HubOAuthenticated\nfrom ..utils import exponential_backoff\nfrom ..utils import isoformat\nfrom ..utils import make_ssl_context\nfrom ..utils import url_path_join\n\n\n# Authenticate requests with the Hub\n\n\nclass HubAuthenticatedHandler(HubOAuthenticated):\n    \"\"\"Class we are going to patch-in for authentication with the Hub\"\"\"\n\n    @property\n    def allow_admin(self):\n        return self.settings.get(\n            'admin_access', os.getenv('JUPYTERHUB_ADMIN_ACCESS') or False\n        )\n\n    @property\n    def hub_auth(self):\n        return self.settings['hub_auth']\n\n    @property\n    def hub_users(self):\n        return {self.settings['user']}\n\n    @property\n    def hub_groups(self):\n        if self.settings['group']:\n            return {self.settings['group']}\n        return set()\n\n\nclass JupyterHubLoginHandlerMixin:\n    \"\"\"LoginHandler that hooks up Hub authentication\"\"\"\n\n    @staticmethod\n    def login_available(settings):\n        return True\n\n    @staticmethod\n    def is_token_authenticated(handler):\n        \"\"\"Is the request token-authenticated?\"\"\"\n        if getattr(handler, '_cached_hub_user', None) is None:\n            # ensure get_user has been called, so we know if we're token-authenticated\n            handler.get_current_user()\n        return getattr(handler, '_token_authenticated', False)\n\n    @staticmethod\n    def get_user(handler):\n        \"\"\"alternative get_current_user to query the Hub\n\n        Thus shouldn't be called anymore because HubAuthenticatedHandler\n        should have already overridden get_current_user().\n\n        Keep here to protect uncommon circumstance of multiple BaseHandlers\n        from missing auth.\n\n        e.g. when multiple BaseHandler classes are used.\n        \"\"\"\n        if HubAuthenticatedHandler not in handler.__class__.mro():\n            warnings.warn(\n                f\"Expected to see HubAuthenticatedHandler in {handler.__class__}.mro(),\"\n                \" patching in at call time. Hub authentication is still applied.\",\n                RuntimeWarning,\n                stacklevel=2,\n            )\n            # patch HubAuthenticated into the instance\n            handler.__class__ = type(\n                handler.__class__.__name__,\n                (HubAuthenticatedHandler, handler.__class__),\n                {},\n            )\n            # patch into the class itself so this doesn't happen again for the same class\n            patch_base_handler(handler.__class__)\n        return handler.get_current_user()\n\n    @classmethod\n    def validate_security(cls, app, ssl_options=None):\n        \"\"\"Prevent warnings about security from base class\"\"\"\n        return\n\n\nclass JupyterHubLogoutHandlerMixin:\n    def get(self):\n        self.settings['hub_auth'].clear_cookie(self)\n        self.redirect(\n            self.settings['hub_host']\n            + url_path_join(self.settings['hub_prefix'], 'logout')\n        )\n\n\nclass OAuthCallbackHandlerMixin(HubOAuthCallbackHandler):\n    \"\"\"Mixin IPythonHandler to get the right error pages, etc.\"\"\"\n\n    @property\n    def hub_auth(self):\n        return self.settings['hub_auth']\n\n\n# register new hub related command-line aliases\naliases = {\n    'user': 'SingleUserNotebookApp.user',\n    'group': 'SingleUserNotebookApp.group',\n    'cookie-name': 'HubAuth.cookie_name',\n    'hub-prefix': 'SingleUserNotebookApp.hub_prefix',\n    'hub-host': 'SingleUserNotebookApp.hub_host',\n    'hub-api-url': 'SingleUserNotebookApp.hub_api_url',\n    'base-url': 'SingleUserNotebookApp.base_url',\n}\nflags = {\n    'disable-user-config': (\n        {'SingleUserNotebookApp': {'disable_user_config': True}},\n        \"Disable user-controlled configuration of the notebook server.\",\n    )\n}\n\n\npage_template = \"\"\"\n{% extends \"templates/page.html\" %}\n\n{% block header_buttons %}\n{{super()}}\n\n<span>\n    <a href='{{hub_control_panel_url}}'\n       class='btn btn-default btn-sm navbar-btn pull-right'\n       style='margin-right: 4px; margin-left: 2px;'>\n        Control Panel\n    </a>\n</span>\n{% endblock %}\n\n{% block logo %}\n<img src='{{logo_url}}' alt='Jupyter Notebook'/>\n{% endblock logo %}\n\n{% block script %}\n{{ super() }}\n<script type='text/javascript'>\n  function _remove_redirects_param() {\n    // remove ?redirects= param from URL so that\n    // successful page loads don't increment the redirect loop counter\n    if (window.location.search.length <= 1) {\n      return;\n    }\n    var search_parameters = window.location.search.slice(1).split('&');\n    for (var i = 0; i < search_parameters.length; i++) {\n      if (search_parameters[i].split('=')[0] === 'redirects') {\n        // remote token from search parameters\n        search_parameters.splice(i, 1);\n        var new_search = '';\n        if (search_parameters.length) {\n          new_search = '?' + search_parameters.join('&');\n        }\n        var new_url = window.location.origin +\n                      window.location.pathname +\n                      new_search +\n                      window.location.hash;\n        window.history.replaceState({}, \"\", new_url);\n        return;\n      }\n    }\n  }\n  _remove_redirects_param();\n</script>\n{% endblock script %}\n\"\"\"\n\n\ndef _exclude_home(path_list):\n    \"\"\"Filter out any entries in a path list that are in my home directory.\n\n    Used to disable per-user configuration.\n    \"\"\"\n    home = os.path.expanduser('~')\n    for p in path_list:\n        if not p.startswith(home):\n            yield p\n\n\nclass SingleUserNotebookAppMixin(Configurable):\n    \"\"\"A Subclass of the regular NotebookApp that is aware of the parent multiuser context.\"\"\"\n\n    description = dedent(\n        \"\"\"\n    Single-user server for JupyterHub. Extends the Jupyter Notebook server.\n\n    Meant to be invoked by JupyterHub Spawners, not directly.\n    \"\"\"\n    )\n\n    examples = \"\"\n    subcommands = {}\n    version = __version__\n\n    # must be set in mixin subclass\n    # make_singleuser_app sets these\n    # aliases = aliases\n    # flags = flags\n    # login_handler_class = JupyterHubLoginHandler\n    # logout_handler_class = JupyterHubLogoutHandler\n    # oauth_callback_handler_class = OAuthCallbackHandler\n    # classes = NotebookApp.classes + [HubOAuth]\n\n    # disable single-user app's localhost checking\n    allow_remote_access = True\n\n    # don't store cookie secrets\n    cookie_secret_file = ''\n    # always generate a new cookie secret on launch\n    # ensures that each spawn clears any cookies from previous session,\n    # triggering OAuth again\n    cookie_secret = Bytes()\n\n    def _cookie_secret_default(self):\n        return secrets.token_bytes(32)\n\n    user = CUnicode().tag(config=True)\n    group = CUnicode().tag(config=True)\n\n    @default('user')\n    def _default_user(self):\n        return os.environ.get('JUPYTERHUB_USER') or ''\n\n    @default('group')\n    def _default_group(self):\n        return os.environ.get('JUPYTERHUB_GROUP') or ''\n\n    @observe('user')\n    def _user_changed(self, change):\n        self.log.name = change.new\n\n    hub_host = Unicode().tag(config=True)\n\n    hub_prefix = Unicode('/hub/').tag(config=True)\n\n    @default('keyfile')\n    def _keyfile_default(self):\n        return os.environ.get('JUPYTERHUB_SSL_KEYFILE') or ''\n\n    @default('certfile')\n    def _certfile_default(self):\n        return os.environ.get('JUPYTERHUB_SSL_CERTFILE') or ''\n\n    @default('client_ca')\n    def _client_ca_default(self):\n        return os.environ.get('JUPYTERHUB_SSL_CLIENT_CA') or ''\n\n    @default('hub_prefix')\n    def _hub_prefix_default(self):\n        base_url = os.environ.get('JUPYTERHUB_BASE_URL') or '/'\n        return base_url + 'hub/'\n\n    hub_api_url = Unicode().tag(config=True)\n\n    @default('hub_api_url')\n    def _hub_api_url_default(self):\n        return os.environ.get('JUPYTERHUB_API_URL') or 'http://127.0.0.1:8081/hub/api'\n\n    # defaults for some configurables that may come from service env variables:\n    @default('base_url')\n    def _base_url_default(self):\n        return os.environ.get('JUPYTERHUB_SERVICE_PREFIX') or '/'\n\n    # Note: this may be removed if notebook module is >= 5.0.0b1\n    @validate('base_url')\n    def _validate_base_url(self, proposal):\n        \"\"\"ensure base_url starts and ends with /\"\"\"\n        value = proposal.value\n        if not value.startswith('/'):\n            value = '/' + value\n        if not value.endswith('/'):\n            value = value + '/'\n        return value\n\n    @default('port')\n    def _port_default(self):\n        if os.environ.get('JUPYTERHUB_SERVICE_URL'):\n            url = urlparse(os.environ['JUPYTERHUB_SERVICE_URL'])\n            if url.port:\n                return url.port\n            elif url.scheme == 'http':\n                return 80\n            elif url.scheme == 'https':\n                return 443\n        return 8888\n\n    @default('ip')\n    def _ip_default(self):\n        if os.environ.get('JUPYTERHUB_SERVICE_URL'):\n            url = urlparse(os.environ['JUPYTERHUB_SERVICE_URL'])\n            if url.hostname:\n                return url.hostname\n        return '127.0.0.1'\n\n    # disable some single-user configurables\n    token = ''\n    open_browser = False\n    quit_button = False\n    trust_xheaders = True\n\n    port_retries = (\n        0  # disable port-retries, since the Spawner will tell us what port to use\n    )\n\n    disable_user_config = Bool(\n        False,\n        help=\"\"\"Disable user configuration of single-user server.\n\n        Prevents user-writable files that normally configure the single-user server\n        from being loaded, ensuring admins have full control of configuration.\n        \"\"\",\n    ).tag(config=True)\n\n    @validate('notebook_dir')\n    def _notebook_dir_validate(self, proposal):\n        value = os.path.expanduser(proposal['value'])\n        # Strip any trailing slashes\n        # *except* if it's root\n        _, path = os.path.splitdrive(value)\n        if path == os.sep:\n            return value\n        value = value.rstrip(os.sep)\n        if not os.path.isabs(value):\n            # If we receive a non-absolute path, make it absolute.\n            value = os.path.abspath(value)\n        if not os.path.isdir(value):\n            raise TraitError(\"No such notebook dir: %r\" % value)\n        return value\n\n    @default('log_datefmt')\n    def _log_datefmt_default(self):\n        \"\"\"Exclude date from default date format\"\"\"\n        return \"%Y-%m-%d %H:%M:%S\"\n\n    @default('log_format')\n    def _log_format_default(self):\n        \"\"\"override default log format to include time\"\"\"\n        return \"%(color)s[%(levelname)1.1s %(asctime)s.%(msecs).03d %(name)s %(module)s:%(lineno)d]%(end_color)s %(message)s\"\n\n    def _confirm_exit(self):\n        # disable the exit confirmation for background notebook processes\n        self.io_loop.add_callback_from_signal(self.io_loop.stop)\n\n    def migrate_config(self):\n        if self.disable_user_config:\n            # disable config-migration when user config is disabled\n            return\n        else:\n            super().migrate_config()\n\n    @property\n    def config_file_paths(self):\n        path = super().config_file_paths\n\n        if self.disable_user_config:\n            # filter out user-writable config dirs if user config is disabled\n            path = list(_exclude_home(path))\n        return path\n\n    @property\n    def nbextensions_path(self):\n        path = super().nbextensions_path\n\n        if self.disable_user_config:\n            path = list(_exclude_home(path))\n        return path\n\n    @validate('static_custom_path')\n    def _validate_static_custom_path(self, proposal):\n        path = proposal['value']\n        if self.disable_user_config:\n            path = list(_exclude_home(path))\n        return path\n\n    # create dynamic default http client,\n    # configured with any relevant ssl config\n    hub_http_client = Any()\n\n    @default('hub_http_client')\n    def _default_client(self):\n        ssl_context = make_ssl_context(\n            self.keyfile, self.certfile, cafile=self.client_ca\n        )\n        AsyncHTTPClient.configure(None, defaults={\"ssl_options\": ssl_context})\n        return AsyncHTTPClient()\n\n    async def check_hub_version(self):\n        \"\"\"Test a connection to my Hub\n\n        - exit if I can't connect at all\n        - check version and warn on sufficient mismatch\n        \"\"\"\n        client = self.hub_http_client\n        RETRIES = 5\n        for i in range(1, RETRIES + 1):\n            try:\n                resp = await client.fetch(self.hub_api_url)\n            except Exception:\n                self.log.exception(\n                    \"Failed to connect to my Hub at %s (attempt %i/%i). Is it running?\",\n                    self.hub_api_url,\n                    i,\n                    RETRIES,\n                )\n                await asyncio.sleep(min(2 ** i, 16))\n            else:\n                break\n        else:\n            self.exit(1)\n\n        hub_version = resp.headers.get('X-JupyterHub-Version')\n        _check_version(hub_version, __version__, self.log)\n\n    server_name = Unicode()\n\n    @default('server_name')\n    def _server_name_default(self):\n        return os.environ.get('JUPYTERHUB_SERVER_NAME', '')\n\n    hub_activity_url = Unicode(\n        config=True, help=\"URL for sending JupyterHub activity updates\"\n    )\n\n    @default('hub_activity_url')\n    def _default_activity_url(self):\n        return os.environ.get('JUPYTERHUB_ACTIVITY_URL', '')\n\n    hub_activity_interval = Integer(\n        300,\n        config=True,\n        help=\"\"\"\n        Interval (in seconds) on which to update the Hub\n        with our latest activity.\n        \"\"\",\n    )\n\n    @default('hub_activity_interval')\n    def _default_activity_interval(self):\n        env_value = os.environ.get('JUPYTERHUB_ACTIVITY_INTERVAL')\n        if env_value:\n            return int(env_value)\n        else:\n            return 300\n\n    _last_activity_sent = Any(allow_none=True)\n\n    async def notify_activity(self):\n        \"\"\"Notify jupyterhub of activity\"\"\"\n        client = self.hub_http_client\n        last_activity = self.web_app.last_activity()\n        if not last_activity:\n            self.log.debug(\"No activity to send to the Hub\")\n            return\n        if last_activity:\n            # protect against mixed timezone comparisons\n            if not last_activity.tzinfo:\n                # assume naive timestamps are utc\n                self.log.warning(\"last activity is using naive timestamps\")\n                last_activity = last_activity.replace(tzinfo=timezone.utc)\n\n        if self._last_activity_sent and last_activity < self._last_activity_sent:\n            self.log.debug(\"No activity since %s\", self._last_activity_sent)\n            return\n\n        last_activity_timestamp = isoformat(last_activity)\n\n        async def notify():\n            self.log.debug(\"Notifying Hub of activity %s\", last_activity_timestamp)\n            req = HTTPRequest(\n                url=self.hub_activity_url,\n                method='POST',\n                headers={\n                    \"Authorization\": \"token {}\".format(self.hub_auth.api_token),\n                    \"Content-Type\": \"application/json\",\n                },\n                body=json.dumps(\n                    {\n                        'servers': {\n                            self.server_name: {'last_activity': last_activity_timestamp}\n                        },\n                        'last_activity': last_activity_timestamp,\n                    }\n                ),\n            )\n            try:\n                await client.fetch(req)\n            except Exception:\n                self.log.exception(\"Error notifying Hub of activity\")\n                return False\n            else:\n                return True\n\n        await exponential_backoff(\n            notify,\n            fail_message=\"Failed to notify Hub of activity\",\n            start_wait=1,\n            max_wait=15,\n            timeout=60,\n        )\n        self._last_activity_sent = last_activity\n\n    async def keep_activity_updated(self):\n        if not self.hub_activity_url or not self.hub_activity_interval:\n            self.log.warning(\"Activity events disabled\")\n            return\n        self.log.info(\n            \"Updating Hub with activity every %s seconds\", self.hub_activity_interval\n        )\n        while True:\n            try:\n                await self.notify_activity()\n            except Exception as e:\n                self.log.exception(\"Error notifying Hub of activity\")\n            # add 20% jitter to the interval to avoid alignment\n            # of lots of requests from user servers\n            t = self.hub_activity_interval * (1 + 0.2 * (random.random() - 0.5))\n            await asyncio.sleep(t)\n\n    def initialize(self, argv=None):\n        # disable trash by default\n        # this can be re-enabled by config\n        self.config.FileContentsManager.delete_to_trash = False\n        return super().initialize(argv)\n\n    def start(self):\n        self.log.info(\"Starting jupyterhub-singleuser server version %s\", __version__)\n        # start by hitting Hub to check version\n        ioloop.IOLoop.current().run_sync(self.check_hub_version)\n        ioloop.IOLoop.current().add_callback(self.keep_activity_updated)\n        super().start()\n\n    def init_hub_auth(self):\n        api_token = None\n        if os.getenv('JPY_API_TOKEN'):\n            # Deprecated env variable (as of 0.7.2)\n            api_token = os.environ['JPY_API_TOKEN']\n        if os.getenv('JUPYTERHUB_API_TOKEN'):\n            api_token = os.environ['JUPYTERHUB_API_TOKEN']\n\n        if not api_token:\n            self.exit(\n                \"JUPYTERHUB_API_TOKEN env is required to run jupyterhub-singleuser. Did you launch it manually?\"\n            )\n        self.hub_auth = HubOAuth(\n            parent=self,\n            api_token=api_token,\n            api_url=self.hub_api_url,\n            hub_prefix=self.hub_prefix,\n            base_url=self.base_url,\n            keyfile=self.keyfile,\n            certfile=self.certfile,\n            client_ca=self.client_ca,\n        )\n        # smoke check\n        if not self.hub_auth.oauth_client_id:\n            raise ValueError(\"Missing OAuth client ID\")\n\n    def init_webapp(self):\n        # load the hub-related settings into the tornado settings dict\n        self.init_hub_auth()\n        s = self.tornado_settings\n        s['log_function'] = log_request\n        s['user'] = self.user\n        s['group'] = self.group\n        s['hub_prefix'] = self.hub_prefix\n        s['hub_host'] = self.hub_host\n        s['hub_auth'] = self.hub_auth\n        csp_report_uri = s['csp_report_uri'] = self.hub_host + url_path_join(\n            self.hub_prefix, 'security/csp-report'\n        )\n        headers = s.setdefault('headers', {})\n        headers['X-JupyterHub-Version'] = __version__\n        # set CSP header directly to workaround bugs in jupyter/notebook 5.0\n        headers.setdefault(\n            'Content-Security-Policy',\n            ';'.join([\"frame-ancestors 'self'\", \"report-uri \" + csp_report_uri]),\n        )\n        super().init_webapp()\n\n        # add OAuth callback\n        self.web_app.add_handlers(\n            r\".*$\",\n            [\n                (\n                    urlparse(self.hub_auth.oauth_redirect_uri).path,\n                    self.oauth_callback_handler_class,\n                )\n            ],\n        )\n\n        # apply X-JupyterHub-Version to *all* request handlers (even redirects)\n        self.patch_default_headers()\n        self.patch_templates()\n\n    def patch_default_headers(self):\n        if hasattr(RequestHandler, '_orig_set_default_headers'):\n            return\n        RequestHandler._orig_set_default_headers = RequestHandler.set_default_headers\n\n        def set_jupyterhub_header(self):\n            self._orig_set_default_headers()\n            self.set_header('X-JupyterHub-Version', __version__)\n\n        RequestHandler.set_default_headers = set_jupyterhub_header\n\n    def patch_templates(self):\n        \"\"\"Patch page templates to add Hub-related buttons\"\"\"\n\n        self.jinja_template_vars['logo_url'] = self.hub_host + url_path_join(\n            self.hub_prefix, 'logo'\n        )\n        self.jinja_template_vars['hub_host'] = self.hub_host\n        self.jinja_template_vars['hub_prefix'] = self.hub_prefix\n        env = self.web_app.settings['jinja2_env']\n\n        env.globals['hub_control_panel_url'] = self.hub_host + url_path_join(\n            self.hub_prefix, 'home'\n        )\n\n        # patch jinja env loading to modify page template\n        def get_page(name):\n            if name == 'page.html':\n                return page_template\n\n        orig_loader = env.loader\n        env.loader = ChoiceLoader([FunctionLoader(get_page), orig_loader])\n\n    def load_server_extensions(self):\n        # Loading LabApp sets $JUPYTERHUB_API_TOKEN on load, which is incorrect\n        r = super().load_server_extensions()\n        # clear the token in PageConfig at this step\n        # so that cookie auth is used\n        # FIXME: in the future,\n        # it would probably make sense to set page_config.token to the token\n        # from the current request.\n        if 'page_config_data' in self.web_app.settings:\n            self.web_app.settings['page_config_data']['token'] = ''\n        return r\n\n\ndef detect_base_package(App):\n    \"\"\"Detect the base package for an App class\n\n    Will return 'notebook' or 'jupyter_server'\n    based on which package App subclasses from.\n\n    Will return None if neither is identified (e.g. fork package, or duck-typing).\n    \"\"\"\n    # guess notebook or jupyter_server based on App class inheritance\n    for cls in App.mro():\n        pkg = cls.__module__.split(\".\", 1)[0]\n        if pkg in {\"notebook\", \"jupyter_server\"}:\n            return pkg\n    return None\n\n\ndef _nice_cls_repr(cls):\n    \"\"\"Nice repr of classes, e.g. 'module.submod.Class'\n\n    Also accepts tuples of classes\n    \"\"\"\n    return f\"{cls.__module__}.{cls.__name__}\"\n\n\ndef patch_base_handler(BaseHandler, log=None):\n    \"\"\"Patch HubAuthenticated into a base handler class\n\n    so anything inheriting from BaseHandler uses Hub authentication.\n    This works *even after* subclasses have imported and inherited from BaseHandler.\n\n    .. versionadded: 1.5\n        Made available as an importable utility\n    \"\"\"\n    if log is None:\n        log = logging.getLogger()\n\n    if HubAuthenticatedHandler not in BaseHandler.__bases__:\n        new_bases = (HubAuthenticatedHandler,) + BaseHandler.__bases__\n        log.info(\n            \"Patching auth into {mod}.{name}({old_bases}) -> {name}({new_bases})\".format(\n                mod=BaseHandler.__module__,\n                name=BaseHandler.__name__,\n                old_bases=', '.join(\n                    _nice_cls_repr(cls) for cls in BaseHandler.__bases__\n                ),\n                new_bases=', '.join(_nice_cls_repr(cls) for cls in new_bases),\n            )\n        )\n        BaseHandler.__bases__ = new_bases\n        # We've now inserted our class as a parent of BaseHandler,\n        # but we also need to ensure BaseHandler *itself* doesn't\n        # override the public tornado API methods we have inserted.\n        # If they are defined in BaseHandler, explicitly replace them with our methods.\n        for name in (\"get_current_user\", \"get_login_url\"):\n            if name in BaseHandler.__dict__:\n                log.debug(\n                    f\"Overriding {BaseHandler}.{name} with HubAuthenticatedHandler.{name}\"\n                )\n                method = getattr(HubAuthenticatedHandler, name)\n                setattr(BaseHandler, name, method)\n    return BaseHandler\n\n\ndef _patch_app_base_handlers(app):\n    \"\"\"Patch Hub Authentication into the base handlers of an app\n\n    Patches HubAuthenticatedHandler into:\n\n    - App.base_handler_class (if defined)\n    - jupyter_server's JupyterHandler (if already imported)\n    - notebook's IPythonHandler (if already imported)\n    \"\"\"\n    BaseHandler = app_base_handler = getattr(app, \"base_handler_class\", None)\n\n    base_handlers = []\n    if BaseHandler is not None:\n        base_handlers.append(BaseHandler)\n\n    # patch juptyer_server and notebook handlers if they have been imported\n    for base_handler_name in [\n        \"jupyter_server.base.handlers.JupyterHandler\",\n        \"notebook.base.handlers.IPythonHandler\",\n    ]:\n        modname, _ = base_handler_name.rsplit(\".\", 1)\n        if modname in sys.modules:\n            base_handlers.append(import_item(base_handler_name))\n\n    if not base_handlers:\n        pkg = detect_base_package(app.__class__)\n        if pkg == \"jupyter_server\":\n            BaseHandler = import_item(\"jupyter_server.base.handlers.JupyterHandler\")\n        elif pkg == \"notebook\":\n            BaseHandler = import_item(\"notebook.base.handlers.IPythonHandler\")\n        else:\n            raise ValueError(\n                \"{}.base_handler_class must be defined\".format(app.__class__.__name__)\n            )\n        base_handlers.append(BaseHandler)\n\n    # patch-in HubAuthenticatedHandler to base handler classes\n    for BaseHandler in base_handlers:\n        patch_base_handler(BaseHandler)\n\n    # return the first entry\n    return base_handlers[0]\n\n\ndef make_singleuser_app(App):\n    \"\"\"Make and return a singleuser notebook app\n\n    given existing notebook or jupyter_server Application classes,\n    mix-in jupyterhub auth.\n\n    Instances of App must have the following attributes defining classes:\n\n    - .login_handler_class\n    - .logout_handler_class\n    - .base_handler_class (only required if not a subclass of the default app\n      in jupyter_server or notebook)\n\n    App should be a subclass of `notebook.notebookapp.NotebookApp`\n    or `jupyter_server.serverapp.ServerApp`.\n    \"\"\"\n\n    empty_parent_app = App()\n    log = empty_parent_app.log\n\n    # detect base classes\n    LoginHandler = empty_parent_app.login_handler_class\n    LogoutHandler = empty_parent_app.logout_handler_class\n    BaseHandler = _patch_app_base_handlers(empty_parent_app)\n\n    # create Handler classes from mixins + bases\n    class JupyterHubLoginHandler(JupyterHubLoginHandlerMixin, LoginHandler):\n        pass\n\n    class JupyterHubLogoutHandler(JupyterHubLogoutHandlerMixin, LogoutHandler):\n        pass\n\n    class OAuthCallbackHandler(OAuthCallbackHandlerMixin, BaseHandler):\n        pass\n\n    # create merged aliases & flags\n    merged_aliases = {}\n    merged_aliases.update(empty_parent_app.aliases or {})\n    merged_aliases.update(aliases)\n\n    merged_flags = {}\n    merged_flags.update(empty_parent_app.flags or {})\n    merged_flags.update(flags)\n    # create mixed-in App class, bringing it all together\n    class SingleUserNotebookApp(SingleUserNotebookAppMixin, App):\n        aliases = merged_aliases\n        flags = merged_flags\n        classes = empty_parent_app.classes + [HubOAuth]\n\n        login_handler_class = JupyterHubLoginHandler\n        logout_handler_class = JupyterHubLogoutHandler\n        oauth_callback_handler_class = OAuthCallbackHandler\n\n        def initialize(self, *args, **kwargs):\n            result = super().initialize(*args, **kwargs)\n            # run patch again after initialize, so extensions have already been loaded\n            # probably a no-op most of the time\n            _patch_app_base_handlers(self)\n            return result\n\n    return SingleUserNotebookApp\n"], "filenames": ["docs/source/changelog.md", "jupyterhub/services/auth.py", "jupyterhub/singleuser/mixins.py"], "buggy_code_start_loc": [7, 930, 677], "buggy_code_end_loc": [1101, 932, 677], "fixing_code_start_loc": [8, 930, 678], "fixing_code_end_loc": [1137, 932, 690], "type": "CWE-613", "message": "JupyterHub is an open source multi-user server for Jupyter notebooks. In affected versions users who have multiple JupyterLab tabs open in the same browser session, may see incomplete logout from the single-user server, as fresh credentials (for the single-user server only, not the Hub) reinstated after logout, if another active JupyterLab session is open while the logout takes place. Upgrade to JupyterHub 1.5. For distributed deployments, it is jupyterhub in the _user_ environment that needs patching. There are no patches necessary in the Hub environment. The only workaround is to make sure that only one JupyterLab tab is open when you log out.", "other": {"cve": {"id": "CVE-2021-41247", "sourceIdentifier": "security-advisories@github.com", "published": "2021-11-04T18:15:08.707", "lastModified": "2021-11-10T17:12:52.147", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "JupyterHub is an open source multi-user server for Jupyter notebooks. In affected versions users who have multiple JupyterLab tabs open in the same browser session, may see incomplete logout from the single-user server, as fresh credentials (for the single-user server only, not the Hub) reinstated after logout, if another active JupyterLab session is open while the logout takes place. Upgrade to JupyterHub 1.5. For distributed deployments, it is jupyterhub in the _user_ environment that needs patching. There are no patches necessary in the Hub environment. The only workaround is to make sure that only one JupyterLab tab is open when you log out."}, {"lang": "es", "value": "JupyterHub es un servidor multiusuario de c\u00f3digo abierto para cuadernos Jupyter. En las versiones afectadas, los usuarios que presentan varias pesta\u00f1as de JupyterLab abiertas en la misma sesi\u00f3n del navegador, pueden visualizar el cierre de sesi\u00f3n incompleto del servidor monopuesto, ya que las credenciales frescas (s\u00f3lo para el servidor monopuesto, no para el Hub) son restablecidas despu\u00e9s del cierre de sesi\u00f3n, si otra sesi\u00f3n activa de JupyterLab est\u00e1 abierta mientras se produce el cierre de sesi\u00f3n. Actualiza a JupyterHub 1.5. Para los despliegues distribuidos, es jupyterhub en el entorno del _usuario_ el que necesita parches. No es necesario aplicar parches en el entorno del Hub. La \u00fanica soluci\u00f3n es asegurarse de que s\u00f3lo se presenta una pesta\u00f1a de JupyterLab abierta cuando se cierra la sesi\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-613"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-613"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jupyter:jupyterhub:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.0", "versionEndExcluding": "1.5.0", "matchCriteriaId": "C44BE321-6186-4786-A3CB-458DDEE2FA1A"}]}]}], "references": [{"url": "https://github.com/jupyterhub/jupyterhub/commit/5ac9e7f73a6e1020ffddc40321fc53336829fe27", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jupyterhub/jupyterhub/security/advisories/GHSA-cw7p-q79f-m2v7", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jupyterhub/jupyterhub/commit/5ac9e7f73a6e1020ffddc40321fc53336829fe27"}}