{"buggy_code": ["<?php\n/* Copyright (C) 2004-2012 Laurent Destailleur     <eldy@users.sourceforge.net>\n * Copyright (C) 2004-2010 Folke Ashberg: Some lines of code were inspired from work\n *                         of Folke Ashberg into PHP-Barcode 0.3pl2, available as GPL\n *                         source code at http://www.ashberg.de/bar.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/core/lib/barcode.lib.php\n *\t\\brief      Set of functions used for barcode generation\n *\t\\ingroup    core\n */\n\n/* ******************************************************************** */\n/*                          COLORS                                      */\n/* ******************************************************************** */\n$bar_color=Array(0,0,0);\n$bg_color=Array(255,255,255);\n$text_color=Array(0,0,0);\n\n\n/* ******************************************************************** */\n/*                          FONT FILE                                   */\n/* ******************************************************************** */\nif (defined('DOL_DEFAULT_TTF_BOLD')) $font_loc=constant('DOL_DEFAULT_TTF_BOLD');\n// Automatic-Detection of Font if running Windows\n// DOL_CHANGE LDR\nif (isset($_SERVER['WINDIR']) && @file_exists($_SERVER['WINDIR'])) $font_loc=$_SERVER['WINDIR'].'\\Fonts\\arialbd.ttf';\nif (empty($font_loc)) die('DOL_DEFAULT_TTF_BOLD must de defined with full path to a TTF font.');\n\n\n/* ******************************************************************** */\n/*                          GENBARCODE                                  */\n/* ******************************************************************** */\n/* location of 'genbarcode'\n * leave blank if you don't have them :(\n* genbarcode is needed to render encodings other than EAN-12/EAN-13/ISBN\n*/\n\nif (defined('PHP-BARCODE_PATH_COMMAND')) $genbarcode_loc=constant('PHP-BARCODE_PATH_COMMAND');\nelse $genbarcode_loc = $conf->global->GENBARCODE_LOCATION;\n//dol_syslog(\"genbarcode_loc=\".$genbarcode_loc.\" - env_windows=\".$_SERVER['WINDIR']);\n\n\n\n\n/**\n * Print barcode\n *\n * @param\tstring\t$code\t\tCode\n * @param\tstring\t$encoding\tEncoding\n * @param\tstring\t$scale\t\tScale\n * @param\tstring\t$mode\t\t'png' or 'jpg' ...\n *\n *\n * @return\tarray\t$bars\t\tarray('encoding': the encoding which has been used, 'bars': the bars, 'text': text-positioning info)\n */\nfunction barcode_print($code, $encoding=\"ANY\", $scale = 2 ,$mode = \"png\")\n{\n    // DOLCHANGE LDR Add log\n    dol_syslog(\"barcode.lib.php::barcode_print $code $encoding $scale $mode\");\n\n    $bars=barcode_encode($code,$encoding);\n\n    if (! $bars)\n    {\n        // DOLCHANGE LDR Return error message instead of array\n        $error='Bad Value '.$code.' for encoding '.$encoding;\n        dol_syslog('barcode.lib.php::barcode_print '.$error, LOG_ERR);\n        return $error;\n    }\n    if (! $mode) $mode=\"png\";\n    //if (preg_match(\"/^(text|txt|plain)$/i\",$mode)) print barcode_outtext($bars['text'],$bars['bars']);\n    //elseif (preg_match(\"/^(html|htm)$/i\",$mode)) print barcode_outhtml($bars['text'],$bars['bars'], $scale,0, 0);\n    //else\n    barcode_outimage($bars['text'], $bars['bars'], $scale, $mode);\n    return $bars;\n}\n\n/**\n * Encodes $code with $encoding using genbarcode OR built-in encoder if you don't have genbarcode only EAN-13/ISBN is possible\n *\n * You can use the following encodings (when you have genbarcode):\n *   ANY    choose best-fit (default)\n *   EAN    8 or 13 EAN-Code\n *   UPC    12-digit EAN\n *   ISBN   isbn numbers (still EAN-13)\n *   39     code 39\n *   128    code 128 (a,b,c: autoselection)\n *   128C   code 128 (compact form for digits)\n *   128B   code 128, full printable ascii\n *   I25    interleaved 2 of 5 (only digits)\n *   128RAW Raw code 128 (by Leonid A. Broukhis)\n *   CBR    Codabar (by Leonid A. Broukhis)\n *   MSI    MSI (by Leonid A. Broukhis)\n *   PLS    Plessey (by Leonid A. Broukhis)\n *\n * @param\tstring\t$code\t\tCode\n * @param\tstring\t$encoding\tEncoding\n * @return\tarray\t\t\t\tarray('encoding': the encoding which has been used, 'bars': the bars, 'text': text-positioning info)\n */\nfunction barcode_encode($code,$encoding)\n{\n    global $genbarcode_loc;\n\n    if (\n    ((preg_match(\"/^ean$/i\", $encoding)\n    && ( strlen($code)==12 || strlen($code)==13)))\n\n    || (($encoding) && (preg_match(\"/^isbn$/i\", $encoding))\n    && (( strlen($code)==9 || strlen($code)==10) ||\n    (((preg_match(\"/^978/\", $code) && strlen($code)==12) ||\n    (strlen($code)==13)))))\n\n    || (( !isset($encoding) || !$encoding || (preg_match(\"/^ANY$/i\", $encoding) ))\n    && (preg_match(\"/^[0-9]{12,13}$/\", $code)))\n    )\n    {\n        /* use built-in EAN-Encoder */\n        dol_syslog(\"barcode.lib.php::barcode_encode Use barcode_encode_ean\");\n        $bars=barcode_encode_ean($code, $encoding);\n    }\n    else if (file_exists($genbarcode_loc))\n    {\n        /* use genbarcode */\n        dol_syslog(\"barcode.lib.php::barcode_encode Use genbarcode \".$genbarcode_loc.\" code=\".$code.\" encoding=\".$encoding);\n        $bars=barcode_encode_genbarcode($code, $encoding);\n    }\n    else\n    {\n        print \"barcode_encode needs an external programm for encodings other then EAN/ISBN<BR>\\n\";\n        print \"<UL>\\n\";\n        print \"<LI>download gnu-barcode from <A href=\\\"http://www.gnu.org/software/barcode/\\\">www.gnu.org/software/barcode/</A>\\n\";\n        print \"<LI>compile and install them\\n\";\n        print \"<LI>download genbarcode from <A href=\\\"http://www.ashberg.de/bar/\\\">www.ashberg.de/bar/</A>\\n\";\n        print \"<LI>compile and install them\\n\";\n        print \"<LI>specify path the genbarcode in barcode module setup\\n\";\n        print \"</UL>\\n\";\n        print \"<BR>\\n\";\n        return false;\n    }\n    return $bars;\n}\n\n\n/**\n * Calculate EAN sum\n *\n * @param\tstring\t$ean\tEAN to encode\n * @return\tstring\t\t\tSum\n */\nfunction barcode_gen_ean_sum($ean)\n{\n    $even=true; $esum=0; $osum=0;\n    $ln=strlen($ean)-1;\n    for ($i=$ln; $i>=0; $i--)\n    {\n        if ($even) $esum+=$ean[$i];\telse $osum+=$ean[$i];\n        $even=!$even;\n    }\n    return (10-((3*$esum+$osum)%10))%10;\n}\n\n/**\n * Encode EAN\n *\n * @param\tstring\t$ean\t\tCode\n * @param\tstring\t$encoding\tEncoding\n * @return\tarray\t\t\t\tarray('encoding': the encoding which has been used, 'bars': the bars, 'text': text-positioning info)\n */\nfunction barcode_encode_ean($ean, $encoding = \"EAN-13\")\n{\n    $digits=array(3211,2221,2122,1411,1132,1231,1114,1312,1213,3112);\n    $mirror=array(\"000000\",\"001011\",\"001101\",\"001110\",\"010011\",\"011001\",\"011100\",\"010101\",\"010110\",\"011010\");\n    $guards=array(\"9a1a\",\"1a1a1\",\"a1a\");\n\n    $ean=trim($ean);\n    if (preg_match(\"/[^0-9]/i\",$ean))\n    {\n        return array(\"text\"=>\"Invalid EAN-Code\");\n    }\n    $encoding=strtoupper($encoding);\n    if ($encoding==\"ISBN\")\n    {\n        if (!preg_match(\"/^978/\", $ean)) $ean=\"978\".$ean;\n    }\n    if (preg_match(\"/^978/\", $ean)) $encoding=\"ISBN\";\n    if (strlen($ean)<12 || strlen($ean)>13)\n    {\n        return array(\"text\"=>\"Invalid $encoding Code (must have 12/13 numbers)\");\n    }\n\n    $ean=substr($ean,0,12);\n    $eansum=barcode_gen_ean_sum($ean);\n    $ean.=$eansum;\n    $line=$guards[0];\n    for ($i=1;$i<13;$i++)\n    {\n        $str=$digits[$ean[$i]];\n        if ($i<7 && $mirror[$ean[0]][$i-1]==1) $line.=strrev($str); else $line.=$str;\n        if ($i==6) $line.=$guards[1];\n    }\n    $line.=$guards[2];\n\n    /* create text */\n    $pos=0;\n    $text=\"\";\n    for ($a=0;$a<13;$a++)\n    {\n        if ($a>0) $text.=\" \";\n        $text.=\"$pos:12:{$ean[$a]}\";\n        if ($a==0) $pos+=12;\n        else if ($a==6) $pos+=12;\n        else $pos+=7;\n    }\n\n    return array(\n\t\t\"encoding\" => $encoding,\n\t\t\"bars\" => $line,\n\t\t\"text\" => $text\n    );\n}\n\n/**\n * Encode result of genbarcode command\n *\n * @param\tstring\t$code\t\tCode\n * @param\tstring\t$encoding\tEncoding\n * @return\tarray\t\t\t\tarray('encoding': the encoding which has been used, 'bars': the bars, 'text': text-positioning info)\n */\nfunction barcode_encode_genbarcode($code,$encoding)\n{\n    global $genbarcode_loc;\n\n    // Clean parameters\n    if (preg_match(\"/^ean$/i\", $encoding) && strlen($code)==13) $code=substr($code,0,12);\n    if (!$encoding) $encoding=\"ANY\";\n    $encoding=preg_replace(\"/[\\\\\\|]/\", \"_\", $encoding);\n    $code=preg_replace(\"/[\\\\\\|]/\", \"_\", $code);\n\n    $command=escapeshellarg($genbarcode_loc);\n    $paramclear=\" \\\"\".str_replace(\"\\\"\", \"\\\\\\\"\",$code).\"\\\" \\\"\".str_replace(\"\\\"\", \"\\\\\\\"\",strtoupper($encoding)).\"\\\"\";\n\n    $fullcommandclear=$command.\" \".$paramclear.\" 2>&1\";\n    //print $fullcommandclear.\"<br>\\n\";\n\n    dol_syslog(\"Run command \".$fullcommandclear);\n    $fp=popen($fullcommandclear, \"r\");\n    if ($fp)\n    {\n        $bars=fgets($fp, 1024);\n        $text=fgets($fp, 1024);\n        $encoding=fgets($fp, 1024);\n        pclose($fp);\n    }\n    else\n    {\n        dol_syslog(\"barcode.lib.php::barcode_encode_genbarcode failed to run popen \".$fullcommandclear, LOG_ERR);\n        return false;\n    }\n    //var_dump($bars);\n    $ret=array(\n\t\t\"encoding\" => trim($encoding),\n\t\t\"bars\" => trim($bars),\n\t\t\"text\" => trim($text)\n    );\n    //var_dump($ret);\n    if (!$ret['encoding']) return false;\n    if (!$ret['bars']) return false;\n    if (!$ret['text']) return false;\n    return $ret;\n}\n\n/**\n * Output image onto standard output, or onto disk if global filebarcode is defined\n *\n * @param\tstring\t$text\t\tthe text-line (<position>:<font-size>:<character> ...)\n * @param\tstring\t$bars   \twhere to place the bars  (<space-width><bar-width><space-width><bar-width>...)\n * @param\tint\t\t$scale\t\tscale factor ( 1 < scale < unlimited (scale 50 will produce 5400x300 pixels when using EAN-13!!!))\n * @param\tstring\t$mode   \tpng,gif,jpg (default='png')\n * @param\tint\t\t$total_y\tthe total height of the image ( default: scale * 60 )\n * @param\tarray\t$space\t\tdefault:  $space[top]   = 2 * $scale; $space[bottom]= 2 * $scale;  $space[left]  = 2 * $scale;  $space[right] = 2 * $scale;\n * @return\tvoid\n */\nfunction barcode_outimage($text, $bars, $scale = 1, $mode = \"png\", $total_y = 0, $space = '')\n{\n    global $bar_color, $bg_color, $text_color;\n    global $font_loc, $filebarcode;\n\n    //print \"$text, $bars, $scale, $mode, $total_y, $space, $font_loc, $filebarcode<br>\";\n    //var_dump($text);\n    //var_dump($bars);\n    //var_dump($font_loc);\n\n    /* set defaults */\n    if ($scale<1) $scale=2;\n    $total_y=(int) $total_y;\n    if ($total_y<1) $total_y=(int) $scale * 60;\n    if (!$space)\n    $space=array('top'=>2*$scale,'bottom'=>2*$scale,'left'=>2*$scale,'right'=>2*$scale);\n\n    /* count total width */\n    $xpos=0;\n    $width=true;\n    $ln=strlen($bars);\n    for ($i=0; $i<$ln; $i++)\n    {\n        $val=strtolower($bars[$i]);\n        if ($width)\n        {\n            $xpos+=$val*$scale;\n            $width=false;\n            continue;\n        }\n        if (preg_match(\"/[a-z]/\", $val))\n        {\n            /* tall bar */\n            $val=ord($val)-ord('a')+1;\n        }\n        $xpos+=$val*$scale;\n        $width=true;\n    }\n\n    /* allocate the image */\n    $total_x=( $xpos )+$space['right']+$space['right'];\n    $xpos=$space['left'];\n    if (! function_exists(\"imagecreate\"))\n    {\n        print \"You don't have the gd2 extension enabled<br>\\n\";\n        return \"\";\n    }\n    $im=imagecreate($total_x, $total_y);\n    /* create two images */\n    $col_bg=ImageColorAllocate($im,$bg_color[0],$bg_color[1],$bg_color[2]);\n    $col_bar=ImageColorAllocate($im,$bar_color[0],$bar_color[1],$bar_color[2]);\n    $col_text=ImageColorAllocate($im,$text_color[0],$text_color[1],$text_color[2]);\n    $height=round($total_y-($scale*10));\n    $height2=round($total_y-$space['bottom']);\n\n    /* paint the bars */\n    $width=true;\n    $ln=strlen($bars);\n    for ($i=0; $i<$ln; $i++)\n    {\n        $val=strtolower($bars[$i]);\n        if ($width)\n        {\n            $xpos+=$val*$scale;\n            $width=false;\n            continue;\n        }\n        if (preg_match(\"/[a-z]/\", $val))\n        {\n            /* tall bar */\n            $val=ord($val)-ord('a')+1;\n            $h=$height2;\n        } else $h=$height;\n        imagefilledrectangle($im, $xpos, $space['top'], $xpos+($val*$scale)-1, $h, $col_bar);\n        $xpos+=$val*$scale;\n        $width=true;\n    }\n\n    $chars=explode(\" \", $text);\n    reset($chars);\n    while (list($n, $v)=each($chars))\n    {\n        if (trim($v))\n        {\n            $inf=explode(\":\", $v);\n            $fontsize=$scale*($inf[1]/1.8);\n            $fontheight=$total_y-($fontsize/2.7)+2;\n            imagettftext($im, $fontsize, 0, $space['left']+($scale*$inf[0])+2, $fontheight, $col_text, $font_loc, $inf[2]);\n        }\n    }\n\n    /* output the image */\n    $mode=strtolower($mode);\n    if ($mode=='jpg' || $mode=='jpeg')\n    {\n        header(\"Content-Type: image/jpeg; name=\\\"barcode.jpg\\\"\");\n        imagejpeg($im);\n    }\n    else if ($mode=='gif')\n    {\n        header(\"Content-Type: image/gif; name=\\\"barcode.gif\\\"\");\n        imagegif($im);\n    }\n    else if (! empty($filebarcode))    // To wxrite into  afile onto disk\n    {\n        imagepng($im,$filebarcode);\n    }\n    else\n    {\n        header(\"Content-Type: image/png; name=\\\"barcode.png\\\"\");\n        imagepng($im);\n    }\n}\n\n?>\n"], "fixing_code": ["<?php\n/* Copyright (C) 2004-2012 Laurent Destailleur     <eldy@users.sourceforge.net>\n * Copyright (C) 2004-2010 Folke Ashberg: Some lines of code were inspired from work\n *                         of Folke Ashberg into PHP-Barcode 0.3pl2, available as GPL\n *                         source code at http://www.ashberg.de/bar.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/core/lib/barcode.lib.php\n *\t\\brief      Set of functions used for barcode generation\n *\t\\ingroup    core\n */\n\n/* ******************************************************************** */\n/*                          COLORS                                      */\n/* ******************************************************************** */\n$bar_color=Array(0,0,0);\n$bg_color=Array(255,255,255);\n$text_color=Array(0,0,0);\n\n\n/* ******************************************************************** */\n/*                          FONT FILE                                   */\n/* ******************************************************************** */\nif (defined('DOL_DEFAULT_TTF_BOLD')) $font_loc=constant('DOL_DEFAULT_TTF_BOLD');\n// Automatic-Detection of Font if running Windows\n// DOL_CHANGE LDR\nif (isset($_SERVER['WINDIR']) && @file_exists($_SERVER['WINDIR'])) $font_loc=$_SERVER['WINDIR'].'\\Fonts\\arialbd.ttf';\nif (empty($font_loc)) die('DOL_DEFAULT_TTF_BOLD must de defined with full path to a TTF font.');\n\n\n/* ******************************************************************** */\n/*                          GENBARCODE                                  */\n/* ******************************************************************** */\n/* location of 'genbarcode'\n * leave blank if you don't have them :(\n* genbarcode is needed to render encodings other than EAN-12/EAN-13/ISBN\n*/\n\nif (defined('PHP-BARCODE_PATH_COMMAND')) $genbarcode_loc=constant('PHP-BARCODE_PATH_COMMAND');\nelse $genbarcode_loc = $conf->global->GENBARCODE_LOCATION;\n//dol_syslog(\"genbarcode_loc=\".$genbarcode_loc.\" - env_windows=\".$_SERVER['WINDIR']);\n\n\n\n\n/**\n * Print barcode\n *\n * @param\tstring\t$code\t\tCode\n * @param\tstring\t$encoding\tEncoding\n * @param\tstring\t$scale\t\tScale\n * @param\tstring\t$mode\t\t'png' or 'jpg' ...\n *\n *\n * @return\tarray\t$bars\t\tarray('encoding': the encoding which has been used, 'bars': the bars, 'text': text-positioning info)\n */\nfunction barcode_print($code, $encoding=\"ANY\", $scale = 2 ,$mode = \"png\")\n{\n    // DOLCHANGE LDR Add log\n    dol_syslog(\"barcode.lib.php::barcode_print $code $encoding $scale $mode\");\n\n    $bars=barcode_encode($code,$encoding);\n    if (! $bars || ! empty($bars['error']))\n    {\n        // DOLCHANGE LDR Return error message instead of array\n        if (empty($bars['error'])) $error='Bad Value '.$code.' for encoding '.$encoding;\n        else $error=$bars['error'];\n        dol_syslog('barcode.lib.php::barcode_print '.$error, LOG_ERR);\n        return $error;\n    }\n    if (! $mode) $mode=\"png\";\n    //if (preg_match(\"/^(text|txt|plain)$/i\",$mode)) print barcode_outtext($bars['text'],$bars['bars']);\n    //elseif (preg_match(\"/^(html|htm)$/i\",$mode)) print barcode_outhtml($bars['text'],$bars['bars'], $scale,0, 0);\n    //else\n    barcode_outimage($bars['text'], $bars['bars'], $scale, $mode);\n    return $bars;\n}\n\n/**\n * Encodes $code with $encoding using genbarcode OR built-in encoder if you don't have genbarcode only EAN-13/ISBN is possible\n *\n * You can use the following encodings (when you have genbarcode):\n *   ANY    choose best-fit (default)\n *   EAN    8 or 13 EAN-Code\n *   UPC    12-digit EAN\n *   ISBN   isbn numbers (still EAN-13)\n *   39     code 39\n *   128    code 128 (a,b,c: autoselection)\n *   128C   code 128 (compact form for digits)\n *   128B   code 128, full printable ascii\n *   I25    interleaved 2 of 5 (only digits)\n *   128RAW Raw code 128 (by Leonid A. Broukhis)\n *   CBR    Codabar (by Leonid A. Broukhis)\n *   MSI    MSI (by Leonid A. Broukhis)\n *   PLS    Plessey (by Leonid A. Broukhis)\n *\n * @param\tstring\t$code\t\tCode\n * @param\tstring\t$encoding\tEncoding\n * @return\tarray\t\t\t\tarray('encoding': the encoding which has been used, 'bars': the bars, 'text': text-positioning info)\n */\nfunction barcode_encode($code,$encoding)\n{\n    global $genbarcode_loc;\n\n    if (\n    ((preg_match(\"/^ean$/i\", $encoding)\n    && ( strlen($code)==12 || strlen($code)==13)))\n\n    || (($encoding) && (preg_match(\"/^isbn$/i\", $encoding))\n    && (( strlen($code)==9 || strlen($code)==10) ||\n    (((preg_match(\"/^978/\", $code) && strlen($code)==12) ||\n    (strlen($code)==13)))))\n\n    || (( !isset($encoding) || !$encoding || (preg_match(\"/^ANY$/i\", $encoding) ))\n    && (preg_match(\"/^[0-9]{12,13}$/\", $code)))\n    )\n    {\n        /* use built-in EAN-Encoder */\n        dol_syslog(\"barcode.lib.php::barcode_encode Use barcode_encode_ean\");\n        $bars=barcode_encode_ean($code, $encoding);\n    }\n    else if (file_exists($genbarcode_loc))\t// For example C39\n    {\n        /* use genbarcode */\n        dol_syslog(\"barcode.lib.php::barcode_encode Use genbarcode \".$genbarcode_loc.\" code=\".$code.\" encoding=\".$encoding);\n        $bars=barcode_encode_genbarcode($code, $encoding);\n    }\n    else\n    {\n        print \"barcode_encode needs an external programm for encodings other then EAN/ISBN<BR>\\n\";\n        print \"<UL>\\n\";\n        print \"<LI>download gnu-barcode from <A href=\\\"http://www.gnu.org/software/barcode/\\\">www.gnu.org/software/barcode/</A>\\n\";\n        print \"<LI>compile and install them\\n\";\n        print \"<LI>download genbarcode from <A href=\\\"http://www.ashberg.de/bar/\\\">www.ashberg.de/bar/</A>\\n\";\n        print \"<LI>compile and install them\\n\";\n        print \"<LI>specify path the genbarcode in barcode module setup\\n\";\n        print \"</UL>\\n\";\n        print \"<BR>\\n\";\n        return false;\n    }\n    return $bars;\n}\n\n\n/**\n * Calculate EAN sum\n *\n * @param\tstring\t$ean\tEAN to encode\n * @return\tstring\t\t\tSum\n */\nfunction barcode_gen_ean_sum($ean)\n{\n    $even=true; $esum=0; $osum=0;\n    $ln=strlen($ean)-1;\n    for ($i=$ln; $i>=0; $i--)\n    {\n        if ($even) $esum+=$ean[$i];\telse $osum+=$ean[$i];\n        $even=!$even;\n    }\n    return (10-((3*$esum+$osum)%10))%10;\n}\n\n/**\n * Encode EAN\n *\n * @param\tstring\t$ean\t\tCode\n * @param\tstring\t$encoding\tEncoding\n * @return\tarray\t\t\t\tarray('encoding': the encoding which has been used, 'bars': the bars, 'text': text-positioning info)\n */\nfunction barcode_encode_ean($ean, $encoding = \"EAN-13\")\n{\n    $digits=array(3211,2221,2122,1411,1132,1231,1114,1312,1213,3112);\n    $mirror=array(\"000000\",\"001011\",\"001101\",\"001110\",\"010011\",\"011001\",\"011100\",\"010101\",\"010110\",\"011010\");\n    $guards=array(\"9a1a\",\"1a1a1\",\"a1a\");\n\n    $ean=trim($ean);\n    if (preg_match(\"/[^0-9]/i\",$ean))\n    {\n        return array(\"text\"=>\"Invalid EAN-Code\");\n    }\n    $encoding=strtoupper($encoding);\n    if ($encoding==\"ISBN\")\n    {\n        if (!preg_match(\"/^978/\", $ean)) $ean=\"978\".$ean;\n    }\n    if (preg_match(\"/^978/\", $ean)) $encoding=\"ISBN\";\n    if (strlen($ean)<12 || strlen($ean)>13)\n    {\n        return array(\"text\"=>\"Invalid $encoding Code (must have 12/13 numbers)\");\n    }\n\n    $ean=substr($ean,0,12);\n    $eansum=barcode_gen_ean_sum($ean);\n    $ean.=$eansum;\n    $line=$guards[0];\n    for ($i=1;$i<13;$i++)\n    {\n        $str=$digits[$ean[$i]];\n        if ($i<7 && $mirror[$ean[0]][$i-1]==1) $line.=strrev($str); else $line.=$str;\n        if ($i==6) $line.=$guards[1];\n    }\n    $line.=$guards[2];\n\n    /* create text */\n    $pos=0;\n    $text=\"\";\n    for ($a=0;$a<13;$a++)\n    {\n        if ($a>0) $text.=\" \";\n        $text.=\"$pos:12:{$ean[$a]}\";\n        if ($a==0) $pos+=12;\n        else if ($a==6) $pos+=12;\n        else $pos+=7;\n    }\n\n    return array(\n\t\t\"encoding\" => $encoding,\n\t\t\"bars\" => $line,\n\t\t\"text\" => $text\n    );\n}\n\n/**\n * Encode result of genbarcode command\n *\n * @param\tstring\t$code\t\tCode\n * @param\tstring\t$encoding\tEncoding\n * @return\tarray\t\t\t\tarray('encoding': the encoding which has been used, 'bars': the bars, 'text': text-positioning info)\n */\nfunction barcode_encode_genbarcode($code,$encoding)\n{\n    global $genbarcode_loc;\n\n    // Clean parameters\n    if (preg_match(\"/^ean$/i\", $encoding) && strlen($code)==13) $code=substr($code,0,12);\n    if (!$encoding) $encoding=\"ANY\";\n    $encoding=preg_replace(\"/[\\\\\\|]/\", \"_\", $encoding);\n    $code=preg_replace(\"/[\\\\\\|]/\", \"_\", $code);\n\n    $command=escapeshellarg($genbarcode_loc);\n    //$paramclear=\" \\\"\".str_replace(\"\\\"\", \"\\\\\\\"\",$code).\"\\\" \\\"\".str_replace(\"\\\"\", \"\\\\\\\"\",strtoupper($encoding)).\"\\\"\";\n    $paramclear=\" \".escapeshellarg($code).\" \".escapeshellarg(strtoupper($encoding));\r\n    \n    $fullcommandclear=$command.\" \".$paramclear.\" 2>&1\";\n    //print $fullcommandclear.\"<br>\\n\";exit;\n\n    dol_syslog(\"Run command \".$fullcommandclear);\n    $fp=popen($fullcommandclear, \"r\");\n    if ($fp)\n    {\n        $bars=fgets($fp, 1024);\n        $text=fgets($fp, 1024);\n        $encoding=fgets($fp, 1024);\n        pclose($fp);\n    }\n    else\n    {\n        dol_syslog(\"barcode.lib.php::barcode_encode_genbarcode failed to run popen \".$fullcommandclear, LOG_ERR);\n        return false;\n    }\n    //var_dump($bars);\n    $ret=array(\n\t\t\"bars\" => trim($bars),\n\t\t\"text\" => trim($text),\n\t\t\"encoding\" => trim($encoding),\n    \t\"error\" => \"\"\n    );\n    //var_dump($ret);\n    if (preg_match('/permission denied/i',$ret['bars'])) \n    { \n    \t$ret['error']=$ret['bars']; $ret['bars']='';\n    \treturn $ret;\n    }\n    if (!$ret['bars']) return false;\n    if (!$ret['text']) return false;\n    if (!$ret['encoding']) return false;\n    return $ret;\n}\n\n/**\n * Output image onto standard output, or onto disk if global filebarcode is defined\n *\n * @param\tstring\t$text\t\tthe text-line (<position>:<font-size>:<character> ...)\n * @param\tstring\t$bars   \twhere to place the bars  (<space-width><bar-width><space-width><bar-width>...)\n * @param\tint\t\t$scale\t\tscale factor ( 1 < scale < unlimited (scale 50 will produce 5400x300 pixels when using EAN-13!!!))\n * @param\tstring\t$mode   \tpng,gif,jpg (default='png')\n * @param\tint\t\t$total_y\tthe total height of the image ( default: scale * 60 )\n * @param\tarray\t$space\t\tdefault:  $space[top]   = 2 * $scale; $space[bottom]= 2 * $scale;  $space[left]  = 2 * $scale;  $space[right] = 2 * $scale;\n * @return\tvoid\n */\nfunction barcode_outimage($text, $bars, $scale = 1, $mode = \"png\", $total_y = 0, $space = '')\n{\n    global $bar_color, $bg_color, $text_color;\n    global $font_loc, $filebarcode;\n\n    //print \"$text, $bars, $scale, $mode, $total_y, $space, $font_loc, $filebarcode<br>\";\n    //var_dump($text);\n    //var_dump($bars);\n    //var_dump($font_loc);\n\n    /* set defaults */\n    if ($scale<1) $scale=2;\n    $total_y=(int) $total_y;\n    if ($total_y<1) $total_y=(int) $scale * 60;\n    if (!$space)\n    $space=array('top'=>2*$scale,'bottom'=>2*$scale,'left'=>2*$scale,'right'=>2*$scale);\n\n    /* count total width */\n    $xpos=0;\n    $width=true;\n    $ln=strlen($bars);\n    for ($i=0; $i<$ln; $i++)\n    {\n        $val=strtolower($bars[$i]);\n        if ($width)\n        {\n            $xpos+=$val*$scale;\n            $width=false;\n            continue;\n        }\n        if (preg_match(\"/[a-z]/\", $val))\n        {\n            /* tall bar */\n            $val=ord($val)-ord('a')+1;\n        }\n        $xpos+=$val*$scale;\n        $width=true;\n    }\n\n    /* allocate the image */\n    $total_x=( $xpos )+$space['right']+$space['right'];\n    $xpos=$space['left'];\n    if (! function_exists(\"imagecreate\"))\n    {\n        print \"You don't have the gd2 extension enabled<br>\\n\";\n        return \"\";\n    }\n    $im=imagecreate($total_x, $total_y);\n    /* create two images */\n    $col_bg=ImageColorAllocate($im,$bg_color[0],$bg_color[1],$bg_color[2]);\n    $col_bar=ImageColorAllocate($im,$bar_color[0],$bar_color[1],$bar_color[2]);\n    $col_text=ImageColorAllocate($im,$text_color[0],$text_color[1],$text_color[2]);\n    $height=round($total_y-($scale*10));\n    $height2=round($total_y-$space['bottom']);\n\n    /* paint the bars */\n    $width=true;\n    $ln=strlen($bars);\n    for ($i=0; $i<$ln; $i++)\n    {\n        $val=strtolower($bars[$i]);\n        if ($width)\n        {\n            $xpos+=$val*$scale;\n            $width=false;\n            continue;\n        }\n        if (preg_match(\"/[a-z]/\", $val))\n        {\n            /* tall bar */\n            $val=ord($val)-ord('a')+1;\n            $h=$height2;\n        } else $h=$height;\n        imagefilledrectangle($im, $xpos, $space['top'], $xpos+($val*$scale)-1, $h, $col_bar);\n        $xpos+=$val*$scale;\n        $width=true;\n    }\n\n    $chars=explode(\" \", $text);\n    reset($chars);\n    while (list($n, $v)=each($chars))\n    {\n        if (trim($v))\n        {\n            $inf=explode(\":\", $v);\n            $fontsize=$scale*($inf[1]/1.8);\n            $fontheight=$total_y-($fontsize/2.7)+2;\n            imagettftext($im, $fontsize, 0, $space['left']+($scale*$inf[0])+2, $fontheight, $col_text, $font_loc, $inf[2]);\n        }\n    }\n\n    /* output the image */\n    $mode=strtolower($mode);\n    if ($mode=='jpg' || $mode=='jpeg')\n    {\n        header(\"Content-Type: image/jpeg; name=\\\"barcode.jpg\\\"\");\n        imagejpeg($im);\n    }\n    else if ($mode=='gif')\n    {\n        header(\"Content-Type: image/gif; name=\\\"barcode.gif\\\"\");\n        imagegif($im);\n    }\n    else if (! empty($filebarcode))    // To wxrite into  afile onto disk\n    {\n        imagepng($im,$filebarcode);\n    }\n    else\n    {\n        header(\"Content-Type: image/png; name=\\\"barcode.png\\\"\");\n        imagepng($im);\n    }\n}\n\n?>\n"], "filenames": ["htdocs/core/lib/barcode.lib.php"], "buggy_code_start_loc": [77], "buggy_code_end_loc": [283], "fixing_code_start_loc": [77], "fixing_code_end_loc": [291], "type": "CWE-20", "message": "Dolibarr ERP/CRM 3.3.1 does not properly validate user input in viewimage.php and barcode.lib.php which allows remote attackers to execute arbitrary commands.", "other": {"cve": {"id": "CVE-2013-2093", "sourceIdentifier": "secalert@redhat.com", "published": "2019-11-20T21:15:11.337", "lastModified": "2022-11-17T17:21:59.260", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Dolibarr ERP/CRM 3.3.1 does not properly validate user input in viewimage.php and barcode.lib.php which allows remote attackers to execute arbitrary commands."}, {"lang": "es", "value": "Dolibarr ERP/CRM versi\u00f3n 3.3.1 no valida apropiadamente la entrada del usuario en los archivos viewimage.php y barcode.lib.php, lo que permite a atacantes remotos ejecutar comandos arbitrarios."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 10.0}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:3.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "B7BE6392-FFEB-406B-81C4-172729C06D93"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2013/05/14/3", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/84249", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/Dolibarr/dolibarr/commit/526a80dd202bbca396687a502d52c27e06e97fff", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security-tracker.debian.org/tracker/CVE-2013-2093", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Dolibarr/dolibarr/commit/526a80dd202bbca396687a502d52c27e06e97fff"}}