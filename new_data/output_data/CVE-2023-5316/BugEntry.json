{"buggy_code": ["<?php\n\n/**\n * AJAX: lists the complete configuration items as text/html.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Thomas Zeithaml <tom@annatom.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-12-26\n */\n\nuse Abraham\\TwitterOAuth\\TwitterOAuth;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\AdministrationHelper;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Helper\\PermissionHelper;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Utils;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\nif (!empty($_SESSION['access_token'])) {\n    $connection = new TwitterOAuth(\n        $faqConfig->get('socialnetworks.twitterConsumerKey'),\n        $faqConfig->get('socialnetworks.twitterConsumerSecret'),\n        $_SESSION['access_token']['oauth_token'],\n        $_SESSION['access_token']['oauth_token_secret']\n    );\n\n    $content = $connection->get('account/verify_credentials');\n}\n\n$configMode = Filter::filterInput(INPUT_GET, 'conf', FILTER_UNSAFE_RAW, 'main');\n\n/**\n * @param mixed $key\n * @param string $type\n */\nfunction renderInputForm($key, $type)\n{\n    global $PMF_LANG, $faqConfig;\n\n    switch ($type) {\n        case 'area':\n            printf(\n                '<textarea name=\"edit[%s]\" rows=\"4\" class=\"form-control\">%s</textarea>',\n                $key,\n                str_replace('<', '&lt;', str_replace('>', '&gt;', $faqConfig->get($key)))\n            );\n            printf(\"</div>\\n\");\n            break;\n\n        case 'input':\n            if (\n                '' === $faqConfig->get($key) && 'socialnetworks.twitterAccessTokenKey' == $key &&\n                isset($_SESSION['access_token'])\n            ) {\n                $value = $_SESSION['access_token']['oauth_token'];\n            } elseif (\n                '' === $faqConfig->get($key) && 'socialnetworks.twitterAccessTokenSecret' == $key &&\n                isset($_SESSION['access_token'])\n            ) {\n                $value = $_SESSION['access_token']['oauth_token_secret'];\n            } else {\n                $value = str_replace('\"', '&quot;', $faqConfig->get($key));\n            }\n            echo '<div class=\"input-group\">';\n\n            switch ($key) {\n                case 'main.administrationMail':\n                    $type = 'email';\n                    break;\n                case 'main.referenceURL':\n                case 'main.privacyURL':\n                    $type = 'url';\n                    break;\n                default:\n                    $type = 'text';\n                    break;\n            }\n\n            printf(\n                '<input class=\"form-control\" type=\"%s\" name=\"edit[%s]\" id=\"edit[%s]\" value=\"%s\" step=\"1\" min=\"0\">',\n                is_numeric($value) ? 'number' : $type,\n                $key,\n                $key,\n                $value\n            );\n            if ('api.apiClientToken' === $key) {\n                echo '<div class=\"input-group-append\">';\n                echo '<button class=\"btn btn-dark\" id=\"pmf-generate-api-token\" type=\"button\">Generate API Client Token</button>';\n                echo '</div>';\n                ?>\n                <script>\n                  try {\n                    const generateUUID = () => {\n                      let date = new Date().getTime();\n\n                      if (window.performance && typeof window.performance.now === 'function') {\n                        date += performance.now();\n                      }\n\n                      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (char) => {\n                        const random = (date + Math.random() * 16) % 16 | 0;\n                        date = Math.floor(date / 16);\n                        return (char === 'x' ? random : (random & 0x3 | 0x8)).toString(16);\n                      });\n                    }\n\n                    const buttonGenerateApiToken = document.getElementById('pmf-generate-api-token');\n                    const inputConfigurationApiToken = document.getElementById('edit[api.apiClientToken]');\n\n                    if (buttonGenerateApiToken) {\n                      if (inputConfigurationApiToken.value !== '') {\n                        buttonGenerateApiToken.disabled = true;\n                      }\n                      buttonGenerateApiToken.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        inputConfigurationApiToken.value = generateUUID();\n                      });\n                    }\n                  } catch (e) {\n                    // do nothing\n                  }\n                </script>\n                <?php\n            }\n            echo '</div></div>';\n            break;\n\n        case 'password':\n            printf(\n                '<input class=\"form-control\" type=\"password\" autocomplete=\"off\" name=\"edit[%s]\" value=\"%s\">',\n                $key,\n                $faqConfig->get($key)\n            );\n            echo \"</div>\\n\";\n            break;\n\n        case 'select':\n            printf('<select name=\"edit[%s]\" class=\"form-control\">', $key);\n\n            switch ($key) {\n                case 'main.language':\n                    $languages = LanguageHelper::getAvailableLanguages();\n                    if (count($languages) > 0) {\n                        echo LanguageHelper::renderLanguageOptions(\n                            str_replace(\n                                [ 'language_', '.php', ],\n                                '',\n                                $faqConfig->get('main.language')\n                            ),\n                            false,\n                            true\n                        );\n                    } else {\n                        echo '<option value=\"language_en.php\">English</option>';\n                    }\n                    break;\n\n                case 'records.orderby':\n                    echo Configuration::sortingOptions($faqConfig->get($key));\n                    break;\n\n                case 'records.sortby':\n                    printf(\n                        '<option value=\"DESC\" %s>%s</option>',\n                        ('DESC' == $faqConfig->get($key)) ? 'selected' : '',\n                        $PMF_LANG['ad_conf_desc']\n                    );\n                    printf(\n                        '<option value=\"ASC\" %s>%s</option>',\n                        ('ASC' == $faqConfig->get($key)) ? 'selected' : '',\n                        $PMF_LANG['ad_conf_asc']\n                    );\n                    break;\n\n                case 'security.permLevel':\n                    echo PermissionHelper::permOptions($faqConfig->get($key));\n                    break;\n\n                case 'main.templateSet':\n                    $faqSystem = new System();\n                    $templates = $faqSystem->getAvailableTemplates();\n\n                    foreach ($templates as $template => $selected) {\n                        printf(\n                            '<option%s>%s</option>',\n                            ($selected === true ? ' selected' : ''),\n                            $template\n                        );\n                    }\n                    break;\n\n                case 'records.attachmentsStorageType':\n                    foreach ($PMF_LANG['att_storage_type'] as $i => $item) {\n                        $selected = (int)$faqConfig->get($key) === $i ? ' selected' : '';\n                        printf('<option value=\"%d\"%s>%s</option>', $i, $selected, $item);\n                    }\n                    break;\n\n                case 'records.orderingPopularFaqs':\n                    printf(\n                        '<option value=\"visits\"%s>%s</option>',\n                        ('visits' === $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['records.orderingPopularFaqs.visits']\n                    );\n                    printf(\n                        '<option value=\"voting\"%s>%s</option>',\n                        ('voting' === $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['records.orderingPopularFaqs.voting']\n                    );\n                    break;\n\n                case 'search.relevance':\n                    printf(\n                        '<option value=\"thema,content,keywords\"%s>%s</option>',\n                        ('thema,content,keywords' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.thema-content-keywords']\n                    );\n                    printf(\n                        '<option value=\"thema,keywords,content\"%s>%s</option>',\n                        (\n                            'thema,keywords,content' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.thema-keywords-content']\n                    );\n                    printf(\n                        '<option value=\"content,thema,keywords\"%s>%s</option>',\n                        ('content,thema,keywords' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.content-thema-keywords']\n                    );\n                    printf(\n                        '<option value=\"content,keywords,thema\"%s>%s</option>',\n                        ('content,keywords,thema' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.content-keywords-thema']\n                    );\n                    printf(\n                        '<option value=\"keywords,content,thema\"%s>%s</option>',\n                        ('keywords,content,thema' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.keywords-content-thema']\n                    );\n                    printf(\n                        '<option value=\"keywords,thema,content\"%s>%s</option>',\n                        ('keywords,thema,content' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.keywords-thema-content']\n                    );\n                    break;\n\n                case 'seo.metaTagsHome':\n                case 'seo.metaTagsFaqs':\n                case 'seo.metaTagsCategories':\n                case 'seo.metaTagsPages':\n                case 'seo.metaTagsAdmin':\n                    $adminHelper = new AdministrationHelper();\n                    echo $adminHelper->renderMetaRobotsDropdown($faqConfig->get($key));\n                    break;\n            }\n\n            echo \"</select>\\n</div>\\n\";\n            break;\n\n        case 'checkbox':\n            printf(\n                '<div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" name=\"edit[%s]\" value=\"true\"',\n                $key\n            );\n            if ($faqConfig->get($key)) {\n                echo ' checked';\n            }\n            if ('ldap.ldapSupport' === $key && !extension_loaded('ldap')) {\n                echo ' disabled';\n            }\n            if ('security.useSslForLogins' === $key && empty($_SERVER['HTTPS'])) {\n                echo ' disabled';\n            }\n            if ('security.useSslOnly' === $key && empty($_SERVER['HTTPS'])) {\n                echo ' disabled';\n            }\n            if ('security.ssoSupport' === $key && empty($_SERVER['REMOTE_USER'])) {\n                echo ' disabled';\n            }\n            echo '></div></div>';\n            break;\n\n        case 'print':\n            printf(\n                '<input type=\"text\" readonly name=\"edit[%s]\" class=\"form-control-plaintext\" value=\"%s\"></div>',\n                $key,\n                str_replace('\"', '&quot;', $faqConfig->get($key)),\n                $faqConfig->get($key)\n            );\n            break;\n    }\n}\n\nheader('Content-type: text/html; charset=utf-8');\n\nUtils::moveToTop($LANG_CONF, 'main.maintenanceMode');\n\nforeach ($LANG_CONF as $key => $value) {\n    if (strpos($key, $configMode) === 0) {\n        if ('socialnetworks.twitterConsumerKey' == $key) {\n            echo '<div class=\"form-group row\"><label class=\"col-form-label col-lg-3\"></label>';\n            echo '<div class=\"col-lg-9\">';\n            if (\n                '' == $faqConfig->get('socialnetworks.twitterConsumerKey') ||\n                '' == $faqConfig->get('socialnetworks.twitterConsumerSecret')\n            ) {\n                echo '<a target=\"_blank\" href=\"https://dev.twitter.com/apps/new\">Create Twitter App for your FAQ</a>';\n                echo \"<br>\\n\";\n                echo 'Your Callback URL is: ' . $faqConfig->getDefaultUrl() . 'services/twitter/callback.php';\n            }\n\n            if (!isset($content)) {\n                echo '<br><a target=\"_blank\" href=\"../services/twitter/redirect.php\">';\n                echo '<img src=\"../assets/img/twitter.signin.png\" alt=\"Sign in with Twitter\"/></a>';\n            } else {\n                echo $content->screen_name . \"<br>\\n\";\n                echo \"<img alt=\\\"Twitter profile\\\" src='\" . $content->profile_image_url_https . \"'><br>\\n\";\n                echo 'Follower: ' . $content->followers_count . \"<br>\\n\";\n                echo 'Status Count: ' . $content->statuses_count . \"<br>\\n\";\n                echo 'Status: ' . $content->status->text;\n            }\n            echo '</div></div>';\n        }\n\n        printf(\n            '<div class=\"form-group row\"><label class=\"col-lg-3 col-form-label %s\">',\n            $value[0] === 'checkbox' || $value[0] === 'radio' ? 'pt-0' : ''\n        );\n\n        switch ($key) {\n            case 'records.maxAttachmentSize':\n                printf($value[1], ini_get('upload_max_filesize'));\n                break;\n            case 'main.dateFormat':\n                printf(\n                    '<a target=\"_blank\" href=\"http://www.php.net/manual/%s/function.date.php\">%s</a>',\n                    $faqLangCode,\n                    $value[1]\n                );\n                break;\n            default:\n                echo $value[1];\n                break;\n        }\n        ?>\n      </label>\n      <div class=\"col-lg-9\">\n          <?php renderInputForm($key, $value[0]) ?>\n      </div>\n        <?php\n    }\n}\n?>\n\n"], "fixing_code": ["<?php\n\n/**\n * AJAX: lists the complete configuration items as text/html.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Thomas Zeithaml <tom@annatom.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-12-26\n */\n\nuse Abraham\\TwitterOAuth\\TwitterOAuth;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\AdministrationHelper;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Helper\\PermissionHelper;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Utils;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\nif (!empty($_SESSION['access_token'])) {\n    $connection = new TwitterOAuth(\n        $faqConfig->get('socialnetworks.twitterConsumerKey'),\n        $faqConfig->get('socialnetworks.twitterConsumerSecret'),\n        $_SESSION['access_token']['oauth_token'],\n        $_SESSION['access_token']['oauth_token_secret']\n    );\n\n    $content = $connection->get('account/verify_credentials');\n}\n\n$configMode = Filter::filterInput(INPUT_GET, 'conf', FILTER_UNSAFE_RAW, 'main');\n\n/**\n * @param mixed $key\n * @param string $type\n */\nfunction renderInputForm($key, $type)\n{\n    global $PMF_LANG, $faqConfig;\n\n    switch ($type) {\n        case 'area':\n            printf(\n                '<textarea name=\"edit[%s]\" rows=\"4\" class=\"form-control\">%s</textarea>',\n                $key,\n                str_replace('<', '&lt;', str_replace('>', '&gt;', $faqConfig->get($key)))\n            );\n            printf(\"</div>\\n\");\n            break;\n\n        case 'input':\n            if (\n                '' === $faqConfig->get($key) && 'socialnetworks.twitterAccessTokenKey' == $key &&\n                isset($_SESSION['access_token'])\n            ) {\n                $value = $_SESSION['access_token']['oauth_token'];\n            } elseif (\n                '' === $faqConfig->get($key) && 'socialnetworks.twitterAccessTokenSecret' == $key &&\n                isset($_SESSION['access_token'])\n            ) {\n                $value = $_SESSION['access_token']['oauth_token_secret'];\n            } else {\n                $value = str_replace('\"', '&quot;', $faqConfig->get($key));\n            }\n            echo '<div class=\"input-group\">';\n\n            switch ($key) {\n                case 'main.administrationMail':\n                    $type = 'email';\n                    break;\n                case 'main.referenceURL':\n                case 'main.privacyURL':\n                    $type = 'url';\n                    break;\n                default:\n                    $type = 'text';\n                    break;\n            }\n\n            printf(\n                '<input class=\"form-control\" type=\"%s\" name=\"edit[%s]\" id=\"edit[%s]\" value=\"%s\" step=\"1\" min=\"0\">',\n                is_numeric($value) ? 'number' : $type,\n                $key,\n                $key,\n                Strings::htmlentities($value)\n            );\n            if ('api.apiClientToken' === $key) {\n                echo '<div class=\"input-group-append\">';\n                echo '<button class=\"btn btn-dark\" id=\"pmf-generate-api-token\" type=\"button\">Generate API Client Token</button>';\n                echo '</div>';\n                ?>\n                <script>\n                  try {\n                    const generateUUID = () => {\n                      let date = new Date().getTime();\n\n                      if (window.performance && typeof window.performance.now === 'function') {\n                        date += performance.now();\n                      }\n\n                      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (char) => {\n                        const random = (date + Math.random() * 16) % 16 | 0;\n                        date = Math.floor(date / 16);\n                        return (char === 'x' ? random : (random & 0x3 | 0x8)).toString(16);\n                      });\n                    }\n\n                    const buttonGenerateApiToken = document.getElementById('pmf-generate-api-token');\n                    const inputConfigurationApiToken = document.getElementById('edit[api.apiClientToken]');\n\n                    if (buttonGenerateApiToken) {\n                      if (inputConfigurationApiToken.value !== '') {\n                        buttonGenerateApiToken.disabled = true;\n                      }\n                      buttonGenerateApiToken.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        inputConfigurationApiToken.value = generateUUID();\n                      });\n                    }\n                  } catch (e) {\n                    // do nothing\n                  }\n                </script>\n                <?php\n            }\n            echo '</div></div>';\n            break;\n\n        case 'password':\n            printf(\n                '<input class=\"form-control\" type=\"password\" autocomplete=\"off\" name=\"edit[%s]\" value=\"%s\">',\n                $key,\n                Strings::htmlentities($faqConfig->get($key))\n            );\n            echo \"</div>\\n\";\n            break;\n\n        case 'select':\n            printf('<select name=\"edit[%s]\" class=\"form-control\">', $key);\n\n            switch ($key) {\n                case 'main.language':\n                    $languages = LanguageHelper::getAvailableLanguages();\n                    if (count($languages) > 0) {\n                        echo LanguageHelper::renderLanguageOptions(\n                            str_replace(\n                                [ 'language_', '.php', ],\n                                '',\n                                $faqConfig->get('main.language')\n                            ),\n                            false,\n                            true\n                        );\n                    } else {\n                        echo '<option value=\"language_en.php\">English</option>';\n                    }\n                    break;\n\n                case 'records.orderby':\n                    echo Configuration::sortingOptions($faqConfig->get($key));\n                    break;\n\n                case 'records.sortby':\n                    printf(\n                        '<option value=\"DESC\" %s>%s</option>',\n                        ('DESC' == $faqConfig->get($key)) ? 'selected' : '',\n                        $PMF_LANG['ad_conf_desc']\n                    );\n                    printf(\n                        '<option value=\"ASC\" %s>%s</option>',\n                        ('ASC' == $faqConfig->get($key)) ? 'selected' : '',\n                        $PMF_LANG['ad_conf_asc']\n                    );\n                    break;\n\n                case 'security.permLevel':\n                    echo PermissionHelper::permOptions($faqConfig->get($key));\n                    break;\n\n                case 'main.templateSet':\n                    $faqSystem = new System();\n                    $templates = $faqSystem->getAvailableTemplates();\n\n                    foreach ($templates as $template => $selected) {\n                        printf(\n                            '<option%s>%s</option>',\n                            ($selected === true ? ' selected' : ''),\n                            $template\n                        );\n                    }\n                    break;\n\n                case 'records.attachmentsStorageType':\n                    foreach ($PMF_LANG['att_storage_type'] as $i => $item) {\n                        $selected = (int)$faqConfig->get($key) === $i ? ' selected' : '';\n                        printf('<option value=\"%d\"%s>%s</option>', $i, $selected, $item);\n                    }\n                    break;\n\n                case 'records.orderingPopularFaqs':\n                    printf(\n                        '<option value=\"visits\"%s>%s</option>',\n                        ('visits' === $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['records.orderingPopularFaqs.visits']\n                    );\n                    printf(\n                        '<option value=\"voting\"%s>%s</option>',\n                        ('voting' === $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['records.orderingPopularFaqs.voting']\n                    );\n                    break;\n\n                case 'search.relevance':\n                    printf(\n                        '<option value=\"thema,content,keywords\"%s>%s</option>',\n                        ('thema,content,keywords' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.thema-content-keywords']\n                    );\n                    printf(\n                        '<option value=\"thema,keywords,content\"%s>%s</option>',\n                        (\n                            'thema,keywords,content' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.thema-keywords-content']\n                    );\n                    printf(\n                        '<option value=\"content,thema,keywords\"%s>%s</option>',\n                        ('content,thema,keywords' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.content-thema-keywords']\n                    );\n                    printf(\n                        '<option value=\"content,keywords,thema\"%s>%s</option>',\n                        ('content,keywords,thema' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.content-keywords-thema']\n                    );\n                    printf(\n                        '<option value=\"keywords,content,thema\"%s>%s</option>',\n                        ('keywords,content,thema' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.keywords-content-thema']\n                    );\n                    printf(\n                        '<option value=\"keywords,thema,content\"%s>%s</option>',\n                        ('keywords,thema,content' == $faqConfig->get($key)) ? ' selected' : '',\n                        $PMF_LANG['search.relevance.keywords-thema-content']\n                    );\n                    break;\n\n                case 'seo.metaTagsHome':\n                case 'seo.metaTagsFaqs':\n                case 'seo.metaTagsCategories':\n                case 'seo.metaTagsPages':\n                case 'seo.metaTagsAdmin':\n                    $adminHelper = new AdministrationHelper();\n                    echo $adminHelper->renderMetaRobotsDropdown($faqConfig->get($key));\n                    break;\n            }\n\n            echo \"</select>\\n</div>\\n\";\n            break;\n\n        case 'checkbox':\n            printf(\n                '<div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" name=\"edit[%s]\" value=\"true\"',\n                $key\n            );\n            if ($faqConfig->get($key)) {\n                echo ' checked';\n            }\n            if ('ldap.ldapSupport' === $key && !extension_loaded('ldap')) {\n                echo ' disabled';\n            }\n            if ('security.useSslForLogins' === $key && empty($_SERVER['HTTPS'])) {\n                echo ' disabled';\n            }\n            if ('security.useSslOnly' === $key && empty($_SERVER['HTTPS'])) {\n                echo ' disabled';\n            }\n            if ('security.ssoSupport' === $key && empty($_SERVER['REMOTE_USER'])) {\n                echo ' disabled';\n            }\n            echo '></div></div>';\n            break;\n\n        case 'print':\n            printf(\n                '<input type=\"text\" readonly name=\"edit[%s]\" class=\"form-control-plaintext\" value=\"%s\"></div>',\n                $key,\n                str_replace('\"', '&quot;', $faqConfig->get($key)),\n                $faqConfig->get($key)\n            );\n            break;\n    }\n}\n\nheader('Content-type: text/html; charset=utf-8');\n\nUtils::moveToTop($LANG_CONF, 'main.maintenanceMode');\n\nforeach ($LANG_CONF as $key => $value) {\n    if (strpos($key, $configMode) === 0) {\n        if ('socialnetworks.twitterConsumerKey' == $key) {\n            echo '<div class=\"form-group row\"><label class=\"col-form-label col-lg-3\"></label>';\n            echo '<div class=\"col-lg-9\">';\n            if (\n                '' == $faqConfig->get('socialnetworks.twitterConsumerKey') ||\n                '' == $faqConfig->get('socialnetworks.twitterConsumerSecret')\n            ) {\n                echo '<a target=\"_blank\" href=\"https://dev.twitter.com/apps/new\">Create Twitter App for your FAQ</a>';\n                echo \"<br>\\n\";\n                echo 'Your Callback URL is: ' . $faqConfig->getDefaultUrl() . 'services/twitter/callback.php';\n            }\n\n            if (!isset($content)) {\n                echo '<br><a target=\"_blank\" href=\"../services/twitter/redirect.php\">';\n                echo '<img src=\"../assets/img/twitter.signin.png\" alt=\"Sign in with Twitter\"/></a>';\n            } else {\n                echo $content->screen_name . \"<br>\\n\";\n                echo \"<img alt=\\\"Twitter profile\\\" src='\" . $content->profile_image_url_https . \"'><br>\\n\";\n                echo 'Follower: ' . $content->followers_count . \"<br>\\n\";\n                echo 'Status Count: ' . $content->statuses_count . \"<br>\\n\";\n                echo 'Status: ' . $content->status->text;\n            }\n            echo '</div></div>';\n        }\n\n        printf(\n            '<div class=\"form-group row\"><label class=\"col-lg-3 col-form-label %s\">',\n            $value[0] === 'checkbox' || $value[0] === 'radio' ? 'pt-0' : ''\n        );\n\n        switch ($key) {\n            case 'records.maxAttachmentSize':\n                printf($value[1], ini_get('upload_max_filesize'));\n                break;\n            case 'main.dateFormat':\n                printf(\n                    '<a target=\"_blank\" href=\"http://www.php.net/manual/%s/function.date.php\">%s</a>',\n                    $faqLangCode,\n                    $value[1]\n                );\n                break;\n            default:\n                echo $value[1];\n                break;\n        }\n        ?>\n      </label>\n      <div class=\"col-lg-9\">\n          <?php renderInputForm($key, $value[0]) ?>\n      </div>\n        <?php\n    }\n}\n?>\n\n"], "filenames": ["phpmyfaq/admin/ajax.config_list.php"], "buggy_code_start_loc": [24], "buggy_code_end_loc": [147], "fixing_code_start_loc": [25], "fixing_code_end_loc": [148], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - DOM in GitHub repository thorsten/phpmyfaq prior to 3.1.18.", "other": {"cve": {"id": "CVE-2023-5316", "sourceIdentifier": "security@huntr.dev", "published": "2023-09-30T01:15:39.150", "lastModified": "2023-10-02T16:51:52.093", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - DOM in GitHub repository thorsten/phpmyfaq prior to 3.1.18."}, {"lang": "es", "value": "Cross-site Scripting (XSS): DOM en el repositorio de GitHub thorsten/phpmyfaq anterior a 3.1.18."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.3}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.18", "matchCriteriaId": "4AC7B224-C622-408D-A05F-74FE33C70B68"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/332d2e4a83251d406ca58dd11c27c598673aa5fa", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/f877e65a-e647-457b-b105-7e5c9f58fb43", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/332d2e4a83251d406ca58dd11c27c598673aa5fa"}}