{"buggy_code": ["<?php\n/* Copyright (c) 1998-2013 ILIAS open source, Extended GPL, see docs/LICENSE */\n\ninclude_once 'Services/Table/interfaces/interface.ilTableFilterItem.php';\n\n/**\n* input GUI for a time span (start and end date)\n*\n* @author Stefan Meyer <smeyer.ilias@gmx.de>\n* @version $Id$\n*\n* @ingroup ServicesForm\n*/\nclass ilDateDurationInputGUI extends ilSubEnabledFormPropertyGUI implements ilTableFilterItem\n{\n\t/**\n\t * @var ilLanguage\n\t */\n\tprotected $lng;\n\n\t/**\n\t * @var ilObjUser\n\t */\n\tprotected $user;\n\n\tprotected $start = null;\n\tprotected $startyear = null;\t\n\tprotected $start_text = null;\n\tprotected $end_text = null;\t\n\tprotected $minute_step_size = 5;\n\tprotected $end = null;\t\n\tprotected $showtime = false;\t\n\tprotected $toggle_fulltime = false;\n\tprotected $toggle_fulltime_txt = '';\n\tprotected $toggle_fulltime_checked = false;\n\t\n\t/**\n\t* Constructor\n\t*\n\t* @param\tstring\t$a_title\tTitle\n\t* @param\tstring\t$a_postvar\tPost Variable\n\t*/\n\tpublic function __construct($a_title = \"\", $a_postvar = \"\")\n\t{\n\t\tglobal $DIC;\n\n\t\t$this->lng = $DIC->language();\n\t\t$this->user = $DIC->user();\n\t\tparent::__construct($a_title, $a_postvar);\n\t\t$this->setType(\"dateduration\");\n\t}\n\t\n\t/**\n\t * Enable toggling between date and time\n\t * @param object $a_title\n\t * @param object $a_checked\n\t * @return \n\t */\n\tpublic function enableToggleFullTime($a_title,$a_checked)\n\t{\n\t\t$this->toggle_fulltime_txt = $a_title;\n\t\t$this->toggle_fulltime_checked = $a_checked;\t\t\n\t\t$this->toggle_fulltime = true;\n\t}\n\t\n\t/**\n\t * Check if toggling between date and time enabled\n\t * @return \n\t */\n\tpublic function enabledToggleFullTime()\n\t{\n\t\treturn $this->toggle_fulltime;\n\t}\n\t\n\t/**\n\t* Set start date\n\t* E.g\t$dt_form->setDate(new ilDateTime(time(),IL_CAL_UTC));\n\t* or \t$dt_form->setDate(new ilDateTime('2008-06-12 08:00:00',IL_CAL_DATETIME));\n\t* \n\t* For fullday (no timezone conversion) events use:\n\t* \n\t* \t\t$dt_form->setDate(new ilDate('2008-08-01',IL_CAL_DATE));\n\t*\t\t\n\t* @param\tobject\t$a_date\tilDate or ilDateTime  object\n\t*/\n\tpublic function setStart(ilDateTime $a_date = null)\n\t{\n\t\t$this->start = $a_date;\n\t}\n\t\n\t/**\n\t * Set text, which will be shown before the start date\n\t * @param object $a_txt\n\t * @return \n\t */\n\tpublic function setStartText($a_txt)\n\t{\n\t\t$this->start_text = $a_txt;\n\t}\n\t\n\t/**\n\t * get start text\n\t * @return \n\t */\n\tpublic function getStartText()\n\t{\n\t\treturn $this->start_text;\n\t}\n\n\t/**\n\t * Set text, which will be shown before the end date\n\t * @param object $a_txt\n\t * @return \n\t */\n\tpublic function setEndText($a_txt)\n\t{\n\t\t$this->end_text = $a_txt;\n\t}\n\t\n\t/**\n\t * Get end text\n\t * @return \n\t */\n\tpublic function getEndText()\n\t{\n\t\treturn $this->end_text;\n\t}\n\n\t/**\n\t* Get Date, yyyy-mm-dd.\n\t*\n\t* @return\tobject\tDate, yyyy-mm-dd\n\t*/\n\tpublic function getStart()\n\t{\n\t\treturn $this->start;\n\t}\n\t\n\t/**\n\t* Set end date\n\t* E.g\t$dt_form->setDate(new ilDateTime(time(),IL_CAL_UTC));\n\t* or \t$dt_form->setDate(new ilDateTime('2008-06-12 08:00:00',IL_CAL_DATETIME));\n\t* \n\t* For fullday (no timezone conversion) events use:\n\t* \n\t* \t\t$dt_form->setDate(new ilDate('2008-08-01',IL_CAL_DATE));\n\t*\t\t\n\t* @param\tobject\t$a_date\tilDate or ilDateTime  object\n\t*/\n\tpublic function setEnd(ilDateTime $a_date = null)\n\t{\n\t\t$this->end = $a_date;\n\t}\n\n\t/**\n\t* Get Date, yyyy-mm-dd.\n\t*\n\t* @return\tobject\tDate, yyyy-mm-dd\n\t*/\n\tpublic function getEnd()\n\t{\n\t\treturn $this->end;\n\t}\n\t\n\t/**\n\t* Set Show Time Information.\n\t*\n\t* @param\tboolean\t$a_showtime\tShow Time Information\n\t*/\n\tpublic function setShowTime($a_showtime)\n\t{\n\t\t$this->showtime = $a_showtime;\n\t}\n\n\t/**\n\t* Get Show Time Information.\n\t*\n\t* @return\tboolean\tShow Time Information\n\t*/\n\tpublic function getShowTime()\n\t{\n\t\treturn $this->showtime;\n\t}\n\t\n\t/**\n\t * Show seconds not implemented yet\n\t * @return \n\t */\n\tpublic function getShowSeconds()\n\t{\n\t\treturn false;\n\t}\n\t\n\t/**\n\t* Set start year\n\t*\n\t* @param\tinteger\tStart year\n\t*/\n\tpublic function setStartYear($a_year)\n\t{\n\t\t$this->startyear = $a_year;\n\t}\n\t\n\t/**\n\t* Get start year\n\t*\n\t* @return\tinteger\tStart year\n\t*/\n\tpublic function getStartYear()\n\t{\n\t\treturn $this->startyear;\n\t}\n\t\n\t/**\n\t * Set minute step size\n\t * E.g 5 => The selection will only show 00,05,10... minutes \n\t *\n\t * @access public\n\t * @param int minute step_size 1,5,10,15,20...\n\t * \n\t */\n\tpublic function setMinuteStepSize($a_step_size)\n\t{\n\t \t$this->minute_step_size = $a_step_size;\n\t}\n\t\n\t/**\n\t * Get minute step size\n\t *\n\t * @access public\n\t * \n\t */\n\tpublic function getMinuteStepSize()\n\t{\n\t \treturn $this->minute_step_size;\n\t}\n\t\n\t/**\n\t* Set value by array\n\t*\n\t* @param\tarray\t$a_values\tvalue array\n\t*/\n\tpublic function setValueByArray($a_values)\n\t{\t\t\n\t\t$incoming = $a_values[$this->getPostVar()];\n\t\tif(is_array($incoming))\n\t\t{\n\t\t\t$format = $incoming['tgl'] ?  0 : $this->getDatePickerTimeFormat();\n\t\t\t$this->toggle_fulltime_checked = (bool) $incoming['tgl'];\n\t\t\t$this->setStart(ilCalendarUtil::parseIncomingDate($incoming[\"start\"], $format));\n\t\t\t$this->setEnd(ilCalendarUtil::parseIncomingDate($incoming[\"end\"], $format));\n\t\t}\n\t\t\n\t\tforeach($this->getSubItems() as $item)\n\t\t{\n\t\t\t$item->setValueByArray($a_values);\n\t\t}\n\t}\n\t\n\t/**\n\t* Check input, strip slashes etc. set alert, if input is not ok.\n\t*\n\t* @return\tboolean\t\tInput ok, true/false\n\t*/\t\n\tpublic function checkInput()\n\t{\n\t\t$lng = $this->lng;\n\t\t\n\t\tif($this->getDisabled())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t$post = $_POST[$this->getPostVar()];\n\t\tif(!is_array($post))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t$start = $post[\"start\"];\n\t\t$end = $post[\"end\"];\n\t\t\n\t\t// if full day is active, ignore time format\n\t\t$format = $post['tgl']\n\t\t\t? 0\n\t\t\t: $this->getDatePickerTimeFormat();\n\t\t\n\t\t// always done to make sure there are no obsolete values left\n\t\t$this->setStart(null);\n\t\t$this->setEnd(null);\n\t\t\n\t\t$valid_start = false;\n\t\tif(trim($start))\n\t\t{\n\t\t\t$parsed = ilCalendarUtil::parseIncomingDate($start, $format);\n\t\t\tif($parsed)\n\t\t\t{\t\t\t\t\t\t\t\t\t\n\t\t\t\t$this->setStart($parsed);\n\t\t\t\t$valid_start = true;\n\t\t\t}\t\t\t\t\t\t\n\t\t}\n\t\telse if(!$this->getRequired() && !trim($end))\n\t\t{\n\t\t\t$valid_start = true;\t\t\t\n\t\t}\n\t\t\t\t\t\t\t\t\n\t\t$valid_end = false;\t\t\n\t\tif(trim($end))\n\t\t{\t\t\t\n\t\t\t$parsed = ilCalendarUtil::parseIncomingDate($end, $format);\t\t\n\t\t\tif($parsed)\n\t\t\t{\n\t\t\t\t$this->setEnd($parsed);\n\t\t\t\t$valid_end = true;\n\t\t\t}\t\t\t\t\t\n\t\t}\n\t\telse if(!$this->getRequired() && !trim($start))\n\t\t{\t\t\t\t\t\n\t\t\t$valid_end = true;\t\t\t\n\t\t}\n\t\t\n\t\tif($this->getStartYear())\n\t\t{\n\t\t\tif($valid_start && \n\t\t\t\t$this->getStart()->get(IL_CAL_FKT_DATE, \"Y\") < $this->getStartYear())\n\t\t\t{\n\t\t\t\t$valid_start = false;\n\t\t\t}\n\t\t\tif($valid_end && \n\t\t\t\t$this->getEnd()->get(IL_CAL_FKT_DATE, \"Y\") < $this->getStartYear())\n\t\t\t{\n\t\t\t\t$valid_end = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\t$valid = ($valid_start && $valid_end);\t\n\t\t\n\t\tif($valid && \n\t\t\t$this->getStart() && \n\t\t\t$this->getEnd() &&\n\t\t\tilDateTime::_after($this->getStart(), $this->getEnd()))\t\t\t\n\t\t{\n\t\t\t$valid = false;\t\t\t\n\t\t}\n\t\t\n\t\tif(!$valid)\n\t\t{\n\t\t\t$this->invalid_input_start = $start;\n\t\t\t$this->invalid_input_end = $end;\n\t\t\t\n\t\t\t$_POST[$this->getPostVar()][\"start\"] = null;\n\t\t\t$_POST[$this->getPostVar()][\"end\"] = null;\n\t\t\t\n\t\t\t$this->setAlert($lng->txt(\"form_msg_wrong_date\"));\n\t\t}\t\n\t\telse\n\t\t{\n\t\t\tif(\n\t\t\t\t!$this->getStart() ||\n\t\t\t\t!$this->getEnd()\n\t\t\t)\n\t\t\t{\n\t\t\t\t$_POST[$this->getPostVar()][\"start\"] = null;\n\t\t\t\t$_POST[$this->getPostVar()][\"end\"] = null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif($valid)\n\t\t{\n\t\t\t$valid = $this->checkSubItemsInput();\n\t\t}\n\t\t\n\t\treturn $valid;\n\t}\n\t\n\tprotected function getDatePickerTimeFormat()\n\t{\t\t\t\t\t\n\t\treturn (int)$this->getShowTime() + (int)$this->getShowSeconds();\n\t}\n\t\n\t/**\n\t * parse properties to datepicker config\n\t * \n\t * @return array\n\t */\n\tprotected function parseDatePickerConfig()\n\t{\n\t\t$config = null;\n\t\tif($this->getMinuteStepSize())\n\t\t{\n\t\t\t$config['stepping'] = (int)$this->getMinuteStepSize();\n\t\t}\n\t\tif($this->getStartYear())\n\t\t{\n\t\t\t$config['minDate'] = $this->getStartYear().'-01-01';\n\t\t}\t\t\t\t\t\n\t\treturn $config;\n\t}\n\t\n\t/**\n\t* Insert property html\n\t*\n\t*/\n\tpublic function render()\n\t{\n\t\t$ilUser = $this->user;\n\t\t$lng = $this->lng;\n\t\t\n\t\t$tpl = new ilTemplate(\"tpl.prop_datetime_duration.html\", true, true, \"Services/Form\");\n\t\t\n\t\tif($this->enabledToggleFullTime())\n\t\t{\n\t\t\t$this->setShowTime(true);\n\t\t\t\n\t\t\t$toggle_id = md5($this->getPostVar().'_fulltime'); // :TODO: unique?\n\t\t\t\n\t\t\t$tpl->setCurrentBlock('toggle_fullday');\n\t\t\t$tpl->setVariable('DATE_TOGGLE_ID', $this->getPostVar().'[tgl]');\n\t\t\t$tpl->setVariable('FULLDAY_TOGGLE_ID', $toggle_id);\n\t\t\t$tpl->setVariable('FULLDAY_TOGGLE_CHECKED', $this->toggle_fulltime_checked ? 'checked=\"checked\"' : '');\n\t\t\t$tpl->setVariable('FULLDAY_TOGGLE_DISABLED', $this->getDisabled() ? 'disabled=\"disabled\"' : '');\n\t\t\t$tpl->setVariable('TXT_TOGGLE_FULLDAY', $this->toggle_fulltime_txt);\n\t\t\t$tpl->parseCurrentBlock();\t\t\t\n\t\t}\n\t\t\n\t\t// config picker\t\t\n\t\tif(!$this->getDisabled())\n\t\t{\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t// :TODO: unique?\n\t\t\t$picker_start_id = md5($this->getPostVar().'_start'); \n\t\t\t$picker_end_id = md5($this->getPostVar().'_end');\t\n\t\t\t\n\t\t\t$tpl->setVariable('DATEPICKER_START_ID', $picker_start_id);\t\t\t\t\n\t\t\t$tpl->setVariable('DATEPICKER_END_ID', $picker_end_id);\t\t\t\n\t\t\t\n\t\t\tilCalendarUtil::addDateTimePicker(\n\t\t\t\t$picker_start_id, \n\t\t\t\t$this->getDatePickerTimeFormat(),\n\t\t\t\t$this->parseDatePickerConfig(),\n\t\t\t\t$picker_end_id,\n\t\t\t\t$this->parseDatePickerConfig(),\n\t\t\t\t$toggle_id,\n\t\t\t\t\"subform_\".$this->getPostVar()\n\t\t\t);\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$tpl->setVariable('DATEPICKER_START_DISABLED', 'disabled=\"disabled\" ');\t\n\t\t\t$tpl->setVariable('DATEPICKER_END_DISABLED', 'disabled=\"disabled\" ');\t\n\t\t}\t\t\n\t\t\n\t\t$start_txt = $this->getStartText();\n\t\tif($start_txt === null)\n\t\t{\n\t\t\t$start_txt = $lng->txt(\"form_date_duration_start\");\n\t\t}\n\t\tif(trim($start_txt))\n\t\t{\n\t\t\t$tpl->setVariable('START_LABEL', $start_txt);\n\t\t\t$tpl->touchBlock('start_width_bl');\n\t\t}\n\t\t\n\t\t$end_txt = $this->getEndText();\n\t\tif($end_txt === null)\n\t\t{\n\t\t\t$end_txt = $lng->txt(\"form_date_duration_end\");\n\t\t}\n\t\tif(trim($end_txt))\n\t\t{\n\t\t\t$tpl->setVariable('END_LABEL', $end_txt);\n\t\t\t$tpl->touchBlock('end_width_bl');\n\t\t}\n\t\t\n\t\t\n\t\t$tpl->setVariable('DATE_START_ID', $this->getPostVar().'[start]');\t\t\n\t\t$tpl->setVariable('DATE_END_ID', $this->getPostVar().'[end]');\n\t\t\n\t\t// placeholder \n\t\t// :TODO: i18n?\n\t\t$pl_format = ilCalendarUtil::getUserDateFormat($this->getDatePickerTimeFormat());\t\n\t\t$tpl->setVariable('START_PLACEHOLDER', $pl_format);\t\n\t\t$tpl->setVariable('END_PLACEHOLDER', $pl_format);\t\n\t\t\n\t\t\n\t\t// values\n\t\t\n\t\t$date_value = $this->invalid_input_start;\t\t\t\n\t\tif(!$date_value &&\n\t\t\t$this->getStart())\n\t\t{\t\t\t\t\t\t\n\t\t\t$out_format = ilCalendarUtil::getUserDateFormat($this->getDatePickerTimeFormat(), true);\t\n\t\t\t$date_value = $this->getStart()->get(IL_CAL_FKT_DATE, $out_format, $ilUser->getTimeZone());\t\t\t\t\t\t\t\t\n\t\t}\n\t\t$tpl->setVariable('DATEPICKER_START_VALUE', $date_value);\n\t\t\n\t\t$date_value = $this->invalid_input_end;\t\t\t\n\t\tif(!$date_value &&\n\t\t\t$this->getEnd())\n\t\t{\t\t\t\t\t\t\n\t\t\t$out_format = ilCalendarUtil::getUserDateFormat($this->getDatePickerTimeFormat(), true);\t\n\t\t\t$date_value = $this->getEnd()->get(IL_CAL_FKT_DATE, $out_format, $ilUser->getTimeZone());\t\t\t\t\t\t\t\t\n\t\t}\n\t\t$tpl->setVariable('DATEPICKER_END_VALUE', $date_value);\n\t\t\t\t\t\t\n\t\tif($this->getRequired())\n\t\t{\n\t\t\t$tpl->setVariable(\"START_REQUIRED\", \"required=\\\"required\\\"\");\n\t\t\t$tpl->setVariable(\"END_REQUIRED\", \"required=\\\"required\\\"\");\n\t\t}\t\t\n\t\t\n\t\treturn $tpl->get();\n\t}\n\t\n\t/**\n\t* Insert property html\n\t*\n\t* @return\tint\tSize\n\t*/\n\tpublic function insert($a_tpl)\n\t{\n\t\t$html = $this->render();\n\n\t\t$a_tpl->setCurrentBlock(\"prop_generic\");\n\t\t$a_tpl->setVariable(\"PROP_GENERIC\", $html);\n\t\t$a_tpl->parseCurrentBlock();\n\t}\n\n\t/**\n\t * Used for table filter presentation\n\t * @return string\n\t */\n\tpublic function getTableFilterHTML()\n\t{\n\t\treturn $this->render();\n\t}\n\n\t/**\n\t * Used for storing the date duration data in session for table gui filters\n\t * @return array\n\t */\n\tpublic function getValue()\n\t{\n\t\treturn array(\n\t\t\t'start' => $this->getStart()->get(IL_CAL_UNIX),\n\t\t\t'end'   => $this->getEnd()->get(IL_CAL_UNIX)\n\t\t);\n\t}\n\n\t/**\n\t * Called from table gui with the stored session value\n\t * Attention: If the user resets the table filter, a boolean false is passed by the table gui\n\t * @see getValue()\n\t * @param array|bool $value\n\t */\n\tpublic function setValue($value)\n\t{\n\t\tif(is_array($value))\n\t\t{\n\t\t\t$this->setStart(new ilDateTime($value['start'], IL_CAL_UNIX));\n\t\t\t$this->setEnd(new ilDateTime($value['end'], IL_CAL_UNIX));\n\t\t}\n\t}\n\t\t\t\n\tpublic function hideSubForm()\n\t{\n\t\tif($this->invalid_input_start ||\n\t\t\t$this->invalid_input_end)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn ((!$this->getStart() || $this->getStart()->isNull()) &&\n\t\t\t(!$this->getEnd() || $this->getEnd()->isNull()));\n\t}\n}\n"], "fixing_code": ["<?php\n/* Copyright (c) 1998-2013 ILIAS open source, Extended GPL, see docs/LICENSE */\n\ninclude_once 'Services/Table/interfaces/interface.ilTableFilterItem.php';\n\n/**\n* input GUI for a time span (start and end date)\n*\n* @author Stefan Meyer <smeyer.ilias@gmx.de>\n* @version $Id$\n*\n* @ingroup ServicesForm\n*/\nclass ilDateDurationInputGUI extends ilSubEnabledFormPropertyGUI implements ilTableFilterItem\n{\n\t/**\n\t * @var ilLanguage\n\t */\n\tprotected $lng;\n\n\t/**\n\t * @var ilObjUser\n\t */\n\tprotected $user;\n\n\tprotected $start = null;\n\tprotected $startyear = null;\t\n\tprotected $start_text = null;\n\tprotected $end_text = null;\t\n\tprotected $minute_step_size = 5;\n\tprotected $end = null;\t\n\tprotected $showtime = false;\t\n\tprotected $toggle_fulltime = false;\n\tprotected $toggle_fulltime_txt = '';\n\tprotected $toggle_fulltime_checked = false;\n\t\n\t/**\n\t* Constructor\n\t*\n\t* @param\tstring\t$a_title\tTitle\n\t* @param\tstring\t$a_postvar\tPost Variable\n\t*/\n\tpublic function __construct($a_title = \"\", $a_postvar = \"\")\n\t{\n\t\tglobal $DIC;\n\n\t\t$this->lng = $DIC->language();\n\t\t$this->user = $DIC->user();\n\t\tparent::__construct($a_title, $a_postvar);\n\t\t$this->setType(\"dateduration\");\n\t}\n\t\n\t/**\n\t * Enable toggling between date and time\n\t * @param object $a_title\n\t * @param object $a_checked\n\t * @return \n\t */\n\tpublic function enableToggleFullTime($a_title,$a_checked)\n\t{\n\t\t$this->toggle_fulltime_txt = $a_title;\n\t\t$this->toggle_fulltime_checked = $a_checked;\t\t\n\t\t$this->toggle_fulltime = true;\n\t}\n\t\n\t/**\n\t * Check if toggling between date and time enabled\n\t * @return \n\t */\n\tpublic function enabledToggleFullTime()\n\t{\n\t\treturn $this->toggle_fulltime;\n\t}\n\t\n\t/**\n\t* Set start date\n\t* E.g\t$dt_form->setDate(new ilDateTime(time(),IL_CAL_UTC));\n\t* or \t$dt_form->setDate(new ilDateTime('2008-06-12 08:00:00',IL_CAL_DATETIME));\n\t* \n\t* For fullday (no timezone conversion) events use:\n\t* \n\t* \t\t$dt_form->setDate(new ilDate('2008-08-01',IL_CAL_DATE));\n\t*\t\t\n\t* @param\tobject\t$a_date\tilDate or ilDateTime  object\n\t*/\n\tpublic function setStart(ilDateTime $a_date = null)\n\t{\n\t\t$this->start = $a_date;\n\t}\n\t\n\t/**\n\t * Set text, which will be shown before the start date\n\t * @param object $a_txt\n\t * @return \n\t */\n\tpublic function setStartText($a_txt)\n\t{\n\t\t$this->start_text = $a_txt;\n\t}\n\t\n\t/**\n\t * get start text\n\t * @return \n\t */\n\tpublic function getStartText()\n\t{\n\t\treturn $this->start_text;\n\t}\n\n\t/**\n\t * Set text, which will be shown before the end date\n\t * @param object $a_txt\n\t * @return \n\t */\n\tpublic function setEndText($a_txt)\n\t{\n\t\t$this->end_text = $a_txt;\n\t}\n\t\n\t/**\n\t * Get end text\n\t * @return \n\t */\n\tpublic function getEndText()\n\t{\n\t\treturn $this->end_text;\n\t}\n\n\t/**\n\t* Get Date, yyyy-mm-dd.\n\t*\n\t* @return\tobject\tDate, yyyy-mm-dd\n\t*/\n\tpublic function getStart()\n\t{\n\t\treturn $this->start;\n\t}\n\t\n\t/**\n\t* Set end date\n\t* E.g\t$dt_form->setDate(new ilDateTime(time(),IL_CAL_UTC));\n\t* or \t$dt_form->setDate(new ilDateTime('2008-06-12 08:00:00',IL_CAL_DATETIME));\n\t* \n\t* For fullday (no timezone conversion) events use:\n\t* \n\t* \t\t$dt_form->setDate(new ilDate('2008-08-01',IL_CAL_DATE));\n\t*\t\t\n\t* @param\tobject\t$a_date\tilDate or ilDateTime  object\n\t*/\n\tpublic function setEnd(ilDateTime $a_date = null)\n\t{\n\t\t$this->end = $a_date;\n\t}\n\n\t/**\n\t* Get Date, yyyy-mm-dd.\n\t*\n\t* @return\tobject\tDate, yyyy-mm-dd\n\t*/\n\tpublic function getEnd()\n\t{\n\t\treturn $this->end;\n\t}\n\t\n\t/**\n\t* Set Show Time Information.\n\t*\n\t* @param\tboolean\t$a_showtime\tShow Time Information\n\t*/\n\tpublic function setShowTime($a_showtime)\n\t{\n\t\t$this->showtime = $a_showtime;\n\t}\n\n\t/**\n\t* Get Show Time Information.\n\t*\n\t* @return\tboolean\tShow Time Information\n\t*/\n\tpublic function getShowTime()\n\t{\n\t\treturn $this->showtime;\n\t}\n\t\n\t/**\n\t * Show seconds not implemented yet\n\t * @return \n\t */\n\tpublic function getShowSeconds()\n\t{\n\t\treturn false;\n\t}\n\t\n\t/**\n\t* Set start year\n\t*\n\t* @param\tinteger\tStart year\n\t*/\n\tpublic function setStartYear($a_year)\n\t{\n\t\t$this->startyear = $a_year;\n\t}\n\t\n\t/**\n\t* Get start year\n\t*\n\t* @return\tinteger\tStart year\n\t*/\n\tpublic function getStartYear()\n\t{\n\t\treturn $this->startyear;\n\t}\n\t\n\t/**\n\t * Set minute step size\n\t * E.g 5 => The selection will only show 00,05,10... minutes \n\t *\n\t * @access public\n\t * @param int minute step_size 1,5,10,15,20...\n\t * \n\t */\n\tpublic function setMinuteStepSize($a_step_size)\n\t{\n\t \t$this->minute_step_size = $a_step_size;\n\t}\n\t\n\t/**\n\t * Get minute step size\n\t *\n\t * @access public\n\t * \n\t */\n\tpublic function getMinuteStepSize()\n\t{\n\t \treturn $this->minute_step_size;\n\t}\n\t\n\t/**\n\t* Set value by array\n\t*\n\t* @param\tarray\t$a_values\tvalue array\n\t*/\n\tpublic function setValueByArray($a_values)\n\t{\t\t\n\t\t$incoming = $a_values[$this->getPostVar()];\n\t\tif(is_array($incoming))\n\t\t{\n\t\t\t$format = $incoming['tgl'] ?  0 : $this->getDatePickerTimeFormat();\n\t\t\t$this->toggle_fulltime_checked = (bool) $incoming['tgl'];\n\t\t\t$this->setStart(ilCalendarUtil::parseIncomingDate($incoming[\"start\"], $format));\n\t\t\t$this->setEnd(ilCalendarUtil::parseIncomingDate($incoming[\"end\"], $format));\n\t\t}\n\t\t\n\t\tforeach($this->getSubItems() as $item)\n\t\t{\n\t\t\t$item->setValueByArray($a_values);\n\t\t}\n\t}\n\t\n\t/**\n\t* Check input, strip slashes etc. set alert, if input is not ok.\n\t*\n\t* @return\tboolean\t\tInput ok, true/false\n\t*/\t\n\tpublic function checkInput()\n\t{\n\t\t$lng = $this->lng;\n\t\t\n\t\tif($this->getDisabled())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t$post = $_POST[$this->getPostVar()];\n\t\tif(!is_array($post))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t$start = $post[\"start\"];\n\t\t$end = $post[\"end\"];\n\t\t\n\t\t// if full day is active, ignore time format\n\t\t$format = $post['tgl']\n\t\t\t? 0\n\t\t\t: $this->getDatePickerTimeFormat();\n\t\t\n\t\t// always done to make sure there are no obsolete values left\n\t\t$this->setStart(null);\n\t\t$this->setEnd(null);\n\t\t\n\t\t$valid_start = false;\n\t\tif(trim($start))\n\t\t{\n\t\t\t$parsed = ilCalendarUtil::parseIncomingDate($start, $format);\n\t\t\tif($parsed)\n\t\t\t{\t\t\t\t\t\t\t\t\t\n\t\t\t\t$this->setStart($parsed);\n\t\t\t\t$valid_start = true;\n\t\t\t}\t\t\t\t\t\t\n\t\t}\n\t\telse if(!$this->getRequired() && !trim($end))\n\t\t{\n\t\t\t$valid_start = true;\t\t\t\n\t\t}\n\t\t\t\t\t\t\t\t\n\t\t$valid_end = false;\t\t\n\t\tif(trim($end))\n\t\t{\t\t\t\n\t\t\t$parsed = ilCalendarUtil::parseIncomingDate($end, $format);\t\t\n\t\t\tif($parsed)\n\t\t\t{\n\t\t\t\t$this->setEnd($parsed);\n\t\t\t\t$valid_end = true;\n\t\t\t}\t\t\t\t\t\n\t\t}\n\t\telse if(!$this->getRequired() && !trim($start))\n\t\t{\t\t\t\t\t\n\t\t\t$valid_end = true;\t\t\t\n\t\t}\n\t\t\n\t\tif($this->getStartYear())\n\t\t{\n\t\t\tif($valid_start && \n\t\t\t\t$this->getStart()->get(IL_CAL_FKT_DATE, \"Y\") < $this->getStartYear())\n\t\t\t{\n\t\t\t\t$valid_start = false;\n\t\t\t}\n\t\t\tif($valid_end && \n\t\t\t\t$this->getEnd()->get(IL_CAL_FKT_DATE, \"Y\") < $this->getStartYear())\n\t\t\t{\n\t\t\t\t$valid_end = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\t$valid = ($valid_start && $valid_end);\t\n\t\t\n\t\tif($valid && \n\t\t\t$this->getStart() && \n\t\t\t$this->getEnd() &&\n\t\t\tilDateTime::_after($this->getStart(), $this->getEnd()))\t\t\t\n\t\t{\n\t\t\t$valid = false;\t\t\t\n\t\t}\n\t\t\n\t\tif(!$valid)\n\t\t{\n\t\t\t$this->invalid_input_start = $start;\n\t\t\t$this->invalid_input_end = $end;\n\t\t\t\n\t\t\t$_POST[$this->getPostVar()][\"start\"] = null;\n\t\t\t$_POST[$this->getPostVar()][\"end\"] = null;\n\t\t\t\n\t\t\t$this->setAlert($lng->txt(\"form_msg_wrong_date\"));\n\t\t}\t\n\t\telse\n\t\t{\n\t\t\tif(\n\t\t\t\t!$this->getStart() ||\n\t\t\t\t!$this->getEnd()\n\t\t\t)\n\t\t\t{\n\t\t\t\t$_POST[$this->getPostVar()][\"start\"] = null;\n\t\t\t\t$_POST[$this->getPostVar()][\"end\"] = null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif($valid)\n\t\t{\n\t\t\t$valid = $this->checkSubItemsInput();\n\t\t}\n\t\t\n\t\treturn $valid;\n\t}\n\t\n\tprotected function getDatePickerTimeFormat()\n\t{\t\t\t\t\t\n\t\treturn (int)$this->getShowTime() + (int)$this->getShowSeconds();\n\t}\n\t\n\t/**\n\t * parse properties to datepicker config\n\t * \n\t * @return array\n\t */\n\tprotected function parseDatePickerConfig()\n\t{\n\t\t$config = null;\n\t\tif($this->getMinuteStepSize())\n\t\t{\n\t\t\t$config['stepping'] = (int)$this->getMinuteStepSize();\n\t\t}\n\t\tif($this->getStartYear())\n\t\t{\n\t\t\t$config['minDate'] = $this->getStartYear().'-01-01';\n\t\t}\t\t\t\t\t\n\t\treturn $config;\n\t}\n\t\n\t/**\n\t* Insert property html\n\t*\n\t*/\n\tpublic function render()\n\t{\n\t\t$ilUser = $this->user;\n\t\t$lng = $this->lng;\n\t\t\n\t\t$tpl = new ilTemplate(\"tpl.prop_datetime_duration.html\", true, true, \"Services/Form\");\n\t\t\n\t\tif($this->enabledToggleFullTime())\n\t\t{\n\t\t\t$this->setShowTime(true);\n\t\t\t\n\t\t\t$toggle_id = md5($this->getPostVar().'_fulltime'); // :TODO: unique?\n\t\t\t\n\t\t\t$tpl->setCurrentBlock('toggle_fullday');\n\t\t\t$tpl->setVariable('DATE_TOGGLE_ID', $this->getPostVar().'[tgl]');\n\t\t\t$tpl->setVariable('FULLDAY_TOGGLE_ID', $toggle_id);\n\t\t\t$tpl->setVariable('FULLDAY_TOGGLE_CHECKED', $this->toggle_fulltime_checked ? 'checked=\"checked\"' : '');\n\t\t\t$tpl->setVariable('FULLDAY_TOGGLE_DISABLED', $this->getDisabled() ? 'disabled=\"disabled\"' : '');\n\t\t\t$tpl->setVariable('TXT_TOGGLE_FULLDAY', $this->toggle_fulltime_txt);\n\t\t\t$tpl->parseCurrentBlock();\t\t\t\n\t\t}\n\t\t\n\t\t// config picker\t\t\n\t\tif(!$this->getDisabled())\n\t\t{\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t// :TODO: unique?\n\t\t\t$picker_start_id = md5($this->getPostVar().'_start'); \n\t\t\t$picker_end_id = md5($this->getPostVar().'_end');\t\n\t\t\t\n\t\t\t$tpl->setVariable('DATEPICKER_START_ID', $picker_start_id);\t\t\t\t\n\t\t\t$tpl->setVariable('DATEPICKER_END_ID', $picker_end_id);\t\t\t\n\t\t\t\n\t\t\tilCalendarUtil::addDateTimePicker(\n\t\t\t\t$picker_start_id, \n\t\t\t\t$this->getDatePickerTimeFormat(),\n\t\t\t\t$this->parseDatePickerConfig(),\n\t\t\t\t$picker_end_id,\n\t\t\t\t$this->parseDatePickerConfig(),\n\t\t\t\t$toggle_id,\n\t\t\t\t\"subform_\".$this->getPostVar()\n\t\t\t);\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$tpl->setVariable('DATEPICKER_START_DISABLED', 'disabled=\"disabled\" ');\t\n\t\t\t$tpl->setVariable('DATEPICKER_END_DISABLED', 'disabled=\"disabled\" ');\t\n\t\t}\t\t\n\t\t\n\t\t$start_txt = $this->getStartText();\n\t\tif($start_txt === null)\n\t\t{\n\t\t\t$start_txt = $lng->txt(\"form_date_duration_start\");\n\t\t}\n\t\tif(trim($start_txt))\n\t\t{\n\t\t\t$tpl->setVariable('START_LABEL', $start_txt);\n\t\t\t$tpl->touchBlock('start_width_bl');\n\t\t}\n\t\t\n\t\t$end_txt = $this->getEndText();\n\t\tif($end_txt === null)\n\t\t{\n\t\t\t$end_txt = $lng->txt(\"form_date_duration_end\");\n\t\t}\n\t\tif(trim($end_txt))\n\t\t{\n\t\t\t$tpl->setVariable('END_LABEL', $end_txt);\n\t\t\t$tpl->touchBlock('end_width_bl');\n\t\t}\n\t\t\n\t\t\n\t\t$tpl->setVariable('DATE_START_ID', $this->getPostVar().'[start]');\t\t\n\t\t$tpl->setVariable('DATE_END_ID', $this->getPostVar().'[end]');\n\t\t\n\t\t// placeholder \n\t\t// :TODO: i18n?\n\t\t$pl_format = ilCalendarUtil::getUserDateFormat($this->getDatePickerTimeFormat());\t\n\t\t$tpl->setVariable('START_PLACEHOLDER', $pl_format);\t\n\t\t$tpl->setVariable('END_PLACEHOLDER', $pl_format);\t\n\t\t\n\t\t\n\t\t// values\n\t\t\n\t\t$date_value = htmlspecialchars($this->invalid_input_start);\t\t\t\n\t\tif(!$date_value &&\n\t\t\t$this->getStart())\n\t\t{\t\t\t\t\t\t\n\t\t\t$out_format = ilCalendarUtil::getUserDateFormat($this->getDatePickerTimeFormat(), true);\t\n\t\t\t$date_value = $this->getStart()->get(IL_CAL_FKT_DATE, $out_format, $ilUser->getTimeZone());\t\t\t\t\t\t\t\t\n\t\t}\n\t\t$tpl->setVariable('DATEPICKER_START_VALUE', $date_value);\n\t\t\n\t\t$date_value = htmlspecialchars($this->invalid_input_end);\t\t\t\n\t\tif(!$date_value &&\n\t\t\t$this->getEnd())\n\t\t{\t\t\t\t\t\t\n\t\t\t$out_format = ilCalendarUtil::getUserDateFormat($this->getDatePickerTimeFormat(), true);\t\n\t\t\t$date_value = $this->getEnd()->get(IL_CAL_FKT_DATE, $out_format, $ilUser->getTimeZone());\t\t\t\t\t\t\t\t\n\t\t}\n\t\t$tpl->setVariable('DATEPICKER_END_VALUE', $date_value);\n\t\t\t\t\t\t\n\t\tif($this->getRequired())\n\t\t{\n\t\t\t$tpl->setVariable(\"START_REQUIRED\", \"required=\\\"required\\\"\");\n\t\t\t$tpl->setVariable(\"END_REQUIRED\", \"required=\\\"required\\\"\");\n\t\t}\t\t\n\t\t\n\t\treturn $tpl->get();\n\t}\n\t\n\t/**\n\t* Insert property html\n\t*\n\t* @return\tint\tSize\n\t*/\n\tpublic function insert($a_tpl)\n\t{\n\t\t$html = $this->render();\n\n\t\t$a_tpl->setCurrentBlock(\"prop_generic\");\n\t\t$a_tpl->setVariable(\"PROP_GENERIC\", $html);\n\t\t$a_tpl->parseCurrentBlock();\n\t}\n\n\t/**\n\t * Used for table filter presentation\n\t * @return string\n\t */\n\tpublic function getTableFilterHTML()\n\t{\n\t\treturn $this->render();\n\t}\n\n\t/**\n\t * Used for storing the date duration data in session for table gui filters\n\t * @return array\n\t */\n\tpublic function getValue()\n\t{\n\t\treturn array(\n\t\t\t'start' => $this->getStart()->get(IL_CAL_UNIX),\n\t\t\t'end'   => $this->getEnd()->get(IL_CAL_UNIX)\n\t\t);\n\t}\n\n\t/**\n\t * Called from table gui with the stored session value\n\t * Attention: If the user resets the table filter, a boolean false is passed by the table gui\n\t * @see getValue()\n\t * @param array|bool $value\n\t */\n\tpublic function setValue($value)\n\t{\n\t\tif(is_array($value))\n\t\t{\n\t\t\t$this->setStart(new ilDateTime($value['start'], IL_CAL_UNIX));\n\t\t\t$this->setEnd(new ilDateTime($value['end'], IL_CAL_UNIX));\n\t\t}\n\t}\n\t\t\t\n\tpublic function hideSubForm()\n\t{\n\t\tif($this->invalid_input_start ||\n\t\t\t$this->invalid_input_end)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn ((!$this->getStart() || $this->getStart()->isNull()) &&\n\t\t\t(!$this->getEnd() || $this->getEnd()->isNull()));\n\t}\n}\n"], "filenames": ["Services/Form/classes/class.ilDateDurationInputGUI.php"], "buggy_code_start_loc": [487], "buggy_code_end_loc": [497], "fixing_code_start_loc": [487], "fixing_code_end_loc": [497], "type": "CWE-79", "message": "Services/Form/classes/class.ilDateDurationInputGUI.php and Services/Form/classes/class.ilDateTimeInputGUI.php in ILIAS 5.1.x through 5.3.x before 5.3.4 allow XSS via an invalid date.", "other": {"cve": {"id": "CVE-2018-10306", "sourceIdentifier": "cve@mitre.org", "published": "2018-05-18T13:29:00.330", "lastModified": "2018-06-19T15:12:15.387", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Services/Form/classes/class.ilDateDurationInputGUI.php and Services/Form/classes/class.ilDateTimeInputGUI.php in ILIAS 5.1.x through 5.3.x before 5.3.4 allow XSS via an invalid date."}, {"lang": "es", "value": "Services/Form/classes/class.ilDateDurationInputGUI.php y Services/Form/classes/class.ilDateTimeInputGUI.php en ILIAS, de las versiones 5.1.x hasta las 5.3.x anteriores a la 5.3.4, permiten Cross-Site Scripting (XSS) mediante una fecha inv\u00e1lida."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.1.0", "versionEndExcluding": "5.3.4", "matchCriteriaId": "BB0D9697-AD3E-4004-B2DB-043440601700"}]}]}], "references": [{"url": "https://github.com/ILIAS-eLearning/ILIAS/commit/95870b2db3e71154102b2cd2f05334fc741c6e39", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/ILIAS-eLearning/ILIAS/commit/eb0272c8023818b1eb10a93e115c9e7960b62a62", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://www.ilias.de/docu/goto_docu_pg_116799_35.html", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/ILIAS-eLearning/ILIAS/commit/95870b2db3e71154102b2cd2f05334fc741c6e39"}}