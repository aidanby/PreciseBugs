{"buggy_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.xwiki.platform</groupId>\n    <artifactId>xwiki-platform-rest</artifactId>\n    <version>15.2-SNAPSHOT</version>\n  </parent>\n  <artifactId>xwiki-platform-rest-server</artifactId>\n  <packaging>jar</packaging>\n  <name>XWiki Platform - REST - Server</name>\n  <description>Service for accessing XWiki through a RESTful API</description>\n  <properties>\n    <xwiki.jacoco.instructionRatio>0.29</xwiki.jacoco.instructionRatio>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.commons</groupId>\n      <artifactId>commons-lang3</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>commons-io</groupId>\n      <artifactId>commons-io</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-component-api</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-context</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-job-api</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-repository-model</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-script</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.rendering</groupId>\n      <artifactId>xwiki-rendering-api</artifactId>\n      <version>${rendering.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-rest-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-rest-model</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-localization-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-model-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-query-manager</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-rendering-configuration-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-security-authorization-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-wiki-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <!-- Needed to resolve the user serializer component -->\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-user-default</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.restlet.jse</groupId>\n      <artifactId>org.restlet</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.restlet.jee</groupId>\n      <artifactId>org.restlet.ext.servlet</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.restlet.jse</groupId>\n      <artifactId>org.restlet.ext.jaxrs</artifactId>\n    </dependency>\n    <!-- Replace the version triggered by restlet by a more accurate and up to date one -->\n    <dependency>\n      <groupId>com.tdunning</groupId>\n      <artifactId>json</artifactId>\n    </dependency>\n    <dependency>\n      <!-- We need Jackson for a proper JSON representation of our REST resources.\n        See XWIKI-9136: Rest API JSON does not retrieve inherited fields -->\n      <groupId>org.restlet.jse</groupId>\n      <artifactId>org.restlet.ext.jackson</artifactId>\n    </dependency>\n    <!-- We need a JAXB converter for XML representation because we model our REST resources using JAXB. Jackson (see\n        above) has a module that understands JAXB annotations but the output of the Restlet Jackson converter is not very\n        good (missing XML declaration and namespace, attributes serialized as elements) so we prefer to use a dedicated\n        JAXB converter for XML representation. -->\n    <dependency>\n      <groupId>org.restlet.jse</groupId>\n      <artifactId>org.restlet.ext.jaxb</artifactId>\n    </dependency>\n    <!-- Replace the version triggered by Restlet by a more accurate one -->\n    <dependency>\n      <groupId>org.glassfish.jaxb</groupId>\n      <artifactId>jaxb-runtime</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-oldcore</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-wiki-user-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.jvnet.jaxb2_commons</groupId>\n      <artifactId>jaxb2-fluent-api</artifactId>\n      <version>3.0</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-icon-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n\n    <!-- Test dependencies -->\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-tool-test-component</artifactId>\n      <version>${commons.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-test-oldcore</artifactId>\n      <version>${project.version}</version>\n      <type>pom</type>\n      <scope>test</scope>\n    </dependency>\n    <!-- Required to test the templates. -->\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-test-page</artifactId>\n      <version>${project.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-web-templates</artifactId>\n      <version>${project.version}</version>\n      <type>jar</type>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <!-- Apply the Checkstyle configurations defined in the top level pom.xml file -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <executions>\n          <execution>\n            <!-- Specify the \"default\" execution id so that the \"blocker\" one is always executed -->\n            <id>default</id>\n            <configuration>\n              <failsOnError>true</failsOnError>\n              <suppressionsLocation>${basedir}/src/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>\n              <excludes>\n                org/xwiki/rest/Constants.java,\n                org/xwiki/rest/XWikiResource.java,\n                org/xwiki/rest/internal/DomainObjectFactory.java,\n                org/xwiki/rest/internal/ModelFactory.java,\n                org/xwiki/rest/internal/RangeIterable.java,\n                org/xwiki/rest/internal/Utils.java,\n                org/xwiki/rest/internal/XWikiAuthentication.java,\n                org/xwiki/rest/internal/resources/BaseAttachmentsResource.java,\n                org/xwiki/rest/internal/resources/BaseSearchResult.java,\n                org/xwiki/rest/internal/resources/BrowserAuthenticationResource.java,\n                org/xwiki/rest/internal/resources/pages/PagesResourceImpl.java,\n                org/xwiki/rest/internal/resources/search/AbstractDatabaseSearchSource.java,\n                org/xwiki/rest/internal/resources/search/SearchSource.java,\n                org/xwiki/rest/internal/resources/wikis/WikiPagesResourceImpl.java\n              </excludes>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>fr.inria.gforge.spoon</groupId>\n        <artifactId>spoon-maven-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>spoon-main</id>\n            <configuration>\n              <processorProperties combine.children=\"append\">\n                <processorProperty>\n                  <name>org.xwiki.tool.spoon.InjectAnnotationProcessor</name>\n                  <properties>\n                    <property>\n                      <!-- Exclude javax.ws.rs.core.Application & org.restlet.ext.jaxrs.ObjectFactory since we use an\n                           Inject on them. These are special cases when we don't inject on an interface with a @Role\n                           and there's no way for the Spoon checker to find out about this, since only the Component\n                           Manager knows what has been registered in it. -->\n                      <name>excludedFieldTypes</name>\n                      <value><![CDATA[\n                        [\"javax.ws.rs.core.Application\", \"org.restlet.ext.jaxrs.ObjectFactory\"]\n                      ]]></value>\n                    </property>\n                  </properties>\n                </processorProperty>\n              </processorProperties>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rest.internal;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Formatter;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Set;\nimport java.util.Vector;\nimport java.util.stream.Collectors;\n\nimport javax.inject.Inject;\nimport javax.inject.Provider;\nimport javax.inject.Singleton;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.slf4j.Logger;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.job.DefaultRequest;\nimport org.xwiki.job.Request;\nimport org.xwiki.logging.LogLevel;\nimport org.xwiki.logging.event.LogEvent;\nimport org.xwiki.logging.tail.LogTail;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.ObjectReference;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.rest.Relations;\nimport org.xwiki.rest.XWikiRestException;\nimport org.xwiki.rest.model.jaxb.Attachment;\nimport org.xwiki.rest.model.jaxb.Attribute;\nimport org.xwiki.rest.model.jaxb.Class;\nimport org.xwiki.rest.model.jaxb.Hierarchy;\nimport org.xwiki.rest.model.jaxb.HierarchyItem;\nimport org.xwiki.rest.model.jaxb.JobId;\nimport org.xwiki.rest.model.jaxb.JobLog;\nimport org.xwiki.rest.model.jaxb.JobProgress;\nimport org.xwiki.rest.model.jaxb.JobRequest;\nimport org.xwiki.rest.model.jaxb.JobStatus;\nimport org.xwiki.rest.model.jaxb.Link;\nimport org.xwiki.rest.model.jaxb.MapEntry;\nimport org.xwiki.rest.model.jaxb.Object;\nimport org.xwiki.rest.model.jaxb.ObjectFactory;\nimport org.xwiki.rest.model.jaxb.ObjectSummary;\nimport org.xwiki.rest.model.jaxb.Page;\nimport org.xwiki.rest.model.jaxb.PageSummary;\nimport org.xwiki.rest.model.jaxb.Property;\nimport org.xwiki.rest.model.jaxb.Space;\nimport org.xwiki.rest.model.jaxb.Translation;\nimport org.xwiki.rest.model.jaxb.Translations;\nimport org.xwiki.rest.model.jaxb.Wiki;\nimport org.xwiki.rest.resources.ModificationsResource;\nimport org.xwiki.rest.resources.SyntaxesResource;\nimport org.xwiki.rest.resources.attachments.AttachmentMetadataResource;\nimport org.xwiki.rest.resources.attachments.AttachmentResource;\nimport org.xwiki.rest.resources.attachments.AttachmentVersionResource;\nimport org.xwiki.rest.resources.attachments.AttachmentsAtPageVersionResource;\nimport org.xwiki.rest.resources.attachments.AttachmentsResource;\nimport org.xwiki.rest.resources.classes.ClassPropertiesResource;\nimport org.xwiki.rest.resources.classes.ClassPropertyResource;\nimport org.xwiki.rest.resources.classes.ClassResource;\nimport org.xwiki.rest.resources.classes.ClassesResource;\nimport org.xwiki.rest.resources.comments.CommentsResource;\nimport org.xwiki.rest.resources.comments.CommentsVersionResource;\nimport org.xwiki.rest.resources.objects.AllObjectsForClassNameResource;\nimport org.xwiki.rest.resources.objects.ObjectAtPageVersionResource;\nimport org.xwiki.rest.resources.objects.ObjectPropertiesAtPageVersionResource;\nimport org.xwiki.rest.resources.objects.ObjectPropertiesResource;\nimport org.xwiki.rest.resources.objects.ObjectPropertyAtPageVersionResource;\nimport org.xwiki.rest.resources.objects.ObjectPropertyResource;\nimport org.xwiki.rest.resources.objects.ObjectResource;\nimport org.xwiki.rest.resources.objects.ObjectsAtPageVersionResource;\nimport org.xwiki.rest.resources.objects.ObjectsResource;\nimport org.xwiki.rest.resources.pages.PageChildrenResource;\nimport org.xwiki.rest.resources.pages.PageHistoryResource;\nimport org.xwiki.rest.resources.pages.PageResource;\nimport org.xwiki.rest.resources.pages.PageTagsResource;\nimport org.xwiki.rest.resources.pages.PageTranslationHistoryResource;\nimport org.xwiki.rest.resources.pages.PageTranslationResource;\nimport org.xwiki.rest.resources.pages.PagesResource;\nimport org.xwiki.rest.resources.spaces.SpaceResource;\nimport org.xwiki.rest.resources.spaces.SpaceSearchResource;\nimport org.xwiki.rest.resources.spaces.SpacesResource;\nimport org.xwiki.rest.resources.wikis.WikiSearchQueryResource;\nimport org.xwiki.rest.resources.wikis.WikiSearchResource;\nimport org.xwiki.security.authorization.ContextualAuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.user.UserReferenceSerializer;\nimport org.xwiki.wiki.descriptor.WikiDescriptor;\nimport org.xwiki.wiki.descriptor.WikiDescriptorManager;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.api.Document;\nimport com.xpn.xwiki.api.PropertyClass;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.BaseProperty;\nimport com.xpn.xwiki.objects.PropertyInterface;\nimport com.xpn.xwiki.objects.classes.BaseClass;\nimport com.xpn.xwiki.objects.classes.ComputedFieldClass;\nimport com.xpn.xwiki.objects.classes.ListClass;\n\n/**\n * Various common tools for resources.\n * \n * @version $Id$\n * @since 7.3M1\n */\n@Component(roles = ModelFactory.class)\n@Singleton\npublic class ModelFactory\n{\n    private static final String PASSWORD_TYPE = \"Password\";\n\n    private final ObjectFactory objectFactory;\n\n    @Inject\n    private Provider<XWikiContext> xcontextProvider;\n\n    @Inject\n    private EntityReferenceSerializer<String> serializer;\n\n    @Inject\n    private JAXBConverter jaxbConverter;\n\n    @Inject\n    private Provider<ContextualAuthorizationManager> authorizationManagerProvider;\n\n    @Inject\n    private Logger logger;\n\n    @Inject\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;\n\n    @Inject\n    private WikiDescriptorManager wikiDescriptorManager;\n\n    @Inject\n    private UserReferenceSerializer<String> userReferenceSerializer;\n\n    public ModelFactory()\n    {\n        this.objectFactory = new ObjectFactory();\n    }\n\n    public boolean toDocument(Document doc, org.xwiki.rest.model.jaxb.Page restPage) throws XWikiException\n    {\n        boolean modified = false;\n\n        if (restPage.getContent() != null) {\n            doc.setContent(restPage.getContent());\n            modified = true;\n        }\n\n        if (restPage.getTitle() != null) {\n            doc.setTitle(restPage.getTitle());\n            modified = true;\n        }\n\n        if (restPage.getParent() != null) {\n            doc.setParent(restPage.getParent());\n            modified = true;\n        }\n\n        if (restPage.getSyntax() != null) {\n            doc.setSyntaxId(restPage.getSyntax());\n            modified = true;\n        }\n\n        doc.setHidden(restPage.isHidden());\n\n        // Set objects\n        if (restPage.getObjects() != null) {\n            Set<ObjectReference> newReferences = new HashSet<>();\n\n            // Add/update objects\n            for (ObjectSummary restObjectSummary : restPage.getObjects().getObjectSummaries()) {\n                if (restObjectSummary != null) {\n                    org.xwiki.rest.model.jaxb.Object restObject = (org.xwiki.rest.model.jaxb.Object) restObjectSummary;\n                    com.xpn.xwiki.api.Object xwikiObject =\n                        doc.getObject(restObject.getClassName(), restObject.getNumber());\n                    if (xwikiObject == null) {\n                        xwikiObject = doc.newObject(restObject.getClassName());\n                    }\n                    toObject(xwikiObject, restObject);\n                    modified = true;\n\n                    newReferences.add(xwikiObject.getReference());\n                }\n            }\n\n            // Remove objects\n            List<com.xpn.xwiki.api.Object> toRemove = new ArrayList<>();\n            for (Vector<com.xpn.xwiki.api.Object> objects : doc.getxWikiObjects().values()) {\n                for (com.xpn.xwiki.api.Object object : objects) {\n                    if (!newReferences.contains(object.getReference())) {\n                        toRemove.add(object);\n                    }\n                }\n            }\n            for (com.xpn.xwiki.api.Object obj : toRemove) {\n                doc.removeObject(obj);\n                modified = true;\n            }\n        }\n\n        // TODO: add support for class, see https://jira.xwiki.org/browse/XWIKI-12597\n\n        // TODO: add attachment content to the REST model ?\n\n        return modified;\n    }\n\n    private void fillObjectSummary(ObjectSummary objectSummary, Document doc, BaseObject xwikiObject,\n        Boolean withPrettyNames)\n    {\n        objectSummary.setId(String.format(\"%s:%s\", doc.getPrefixedFullName(), xwikiObject.getGuid()));\n        objectSummary.setGuid(xwikiObject.getGuid());\n        objectSummary.setPageId(doc.getPrefixedFullName());\n        objectSummary.setPageVersion(doc.getVersion());\n        objectSummary.setPageAuthor(doc.getAuthor());\n        if (withPrettyNames) {\n            XWikiContext xwikiContext = this.xcontextProvider.get();\n            objectSummary\n                .setPageAuthorName(xwikiContext.getWiki().getUserName(doc.getAuthor(), null, false, xwikiContext));\n        }\n        objectSummary.setWiki(doc.getWiki());\n        objectSummary.setSpace(doc.getSpace());\n        objectSummary.setPageName(doc.getDocumentReference().getName());\n        objectSummary.setClassName(xwikiObject.getClassName());\n        objectSummary.setNumber(xwikiObject.getNumber());\n\n        String[] propertyNames = xwikiObject.getPropertyNames();\n        if (propertyNames.length > 0) {\n            try {\n                objectSummary.setHeadline(serializePropertyValue(xwikiObject.get(propertyNames[0])));\n            } catch (XWikiException e) {\n                // Should never happen\n            }\n        }\n    }\n\n    public ObjectSummary toRestObjectSummary(URI baseUri, Document doc, BaseObject xwikiObject, boolean useVersion,\n        Boolean withPrettyNames)\n    {\n        ObjectSummary objectSummary = objectFactory.createObjectSummary();\n        fillObjectSummary(objectSummary, doc, xwikiObject, withPrettyNames);\n\n        Link objectLink = getObjectLink(objectFactory, baseUri, doc, xwikiObject, useVersion, Relations.OBJECT);\n        objectSummary.getLinks().add(objectLink);\n\n        String propertiesUri;\n        if (useVersion) {\n            propertiesUri = Utils.createURI(baseUri, ObjectPropertiesAtPageVersionResource.class, doc.getWiki(),\n                Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(), doc.getVersion(),\n                xwikiObject.getClassName(), xwikiObject.getNumber()).toString();\n        } else {\n            propertiesUri = Utils.createURI(baseUri, ObjectPropertiesResource.class, doc.getWiki(),\n                Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(),\n                xwikiObject.getClassName(), xwikiObject.getNumber()).toString();\n        }\n\n        Link propertyLink = objectFactory.createLink();\n        propertyLink.setHref(propertiesUri);\n        propertyLink.setRel(Relations.PROPERTIES);\n        objectSummary.getLinks().add(propertyLink);\n\n        return objectSummary;\n    }\n\n    public void toObject(com.xpn.xwiki.api.Object xwikiObject, org.xwiki.rest.model.jaxb.Object restObject)\n    {\n        for (Property restProperty : restObject.getProperties()) {\n            xwikiObject.set(restProperty.getName(), restProperty.getValue());\n        }\n    }\n\n    public Object toRestObject(URI baseUri, Document doc, BaseObject xwikiObject, boolean useVersion,\n        Boolean withPrettyNames)\n    {\n        Object object = this.objectFactory.createObject();\n        fillObjectSummary(object, doc, xwikiObject, withPrettyNames);\n\n        XWikiContext xwikiContext = this.xcontextProvider.get();\n        BaseClass xwikiClass = xwikiObject.getXClass(xwikiContext);\n\n        for (java.lang.Object propertyClassObject : xwikiClass.getProperties()) {\n            com.xpn.xwiki.objects.classes.PropertyClass propertyClass =\n                (com.xpn.xwiki.objects.classes.PropertyClass) propertyClassObject;\n\n            Property property = this.objectFactory.createProperty();\n\n            for (java.lang.Object o : propertyClass.getProperties()) {\n                BaseProperty baseProperty = (BaseProperty) o;\n                Attribute attribute = this.objectFactory.createAttribute();\n                attribute.setName(baseProperty.getName());\n\n                /* Check for null values in order to prevent NPEs */\n                if (baseProperty.getValue() != null) {\n                    attribute.setValue(baseProperty.getValue().toString());\n                } else {\n                    attribute.setValue(\"\");\n                }\n\n                property.getAttributes().add(attribute);\n            }\n\n            if (propertyClass instanceof ListClass) {\n                ListClass listClass = (ListClass) propertyClass;\n\n                List allowedValueList = listClass.getList(xwikiContext);\n\n                if (!allowedValueList.isEmpty()) {\n                    Formatter f = new Formatter();\n                    for (int i = 0; i < allowedValueList.size(); i++) {\n                        if (i != allowedValueList.size() - 1) {\n                            f.format(\"%s,\", allowedValueList.get(i).toString());\n                        } else {\n                            f.format(\"%s\", allowedValueList.get(i).toString());\n                        }\n                    }\n\n                    Attribute attribute = this.objectFactory.createAttribute();\n                    attribute.setName(Constants.ALLOWED_VALUES_ATTRIBUTE_NAME);\n                    attribute.setValue(f.toString());\n                    property.getAttributes().add(attribute);\n                }\n            }\n\n            property.setName(propertyClass.getName());\n            property.setType(propertyClass.getClassType());\n            if (hasAccess(property)) {\n                try {\n                    property.setValue(\n                        serializePropertyValue(xwikiObject.get(propertyClass.getName()), propertyClass, xwikiContext));\n                } catch (XWikiException e) {\n                    // Should never happen\n                    logger.error(\"Unexpected exception when accessing property [{}]\", propertyClass.getName(), e);\n                }\n            }\n\n            String propertyUri;\n\n            if (useVersion) {\n                propertyUri = Utils\n                    .createURI(baseUri, ObjectPropertyAtPageVersionResource.class, doc.getWiki(),\n                        Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(),\n                        doc.getVersion(), xwikiObject.getClassName(), xwikiObject.getNumber(), propertyClass.getName())\n                    .toString();\n            } else {\n                propertyUri = Utils.createURI(baseUri, ObjectPropertyResource.class, doc.getWiki(),\n                    Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(),\n                    xwikiObject.getClassName(), xwikiObject.getNumber(), propertyClass.getName()).toString();\n            }\n            Link propertyLink = this.objectFactory.createLink();\n            propertyLink.setHref(propertyUri);\n            propertyLink.setRel(Relations.SELF);\n            property.getLinks().add(propertyLink);\n\n            object.getProperties().add(property);\n        }\n\n        Link objectLink = getObjectLink(this.objectFactory, baseUri, doc, xwikiObject, useVersion, Relations.SELF);\n        object.getLinks().add(objectLink);\n\n        return object;\n    }\n\n    private static Link getObjectLink(ObjectFactory objectFactory, URI baseUri, Document doc, BaseObject xwikiObject,\n        boolean useVersion, String relation)\n    {\n        String objectUri;\n\n        if (useVersion) {\n            objectUri = Utils.createURI(baseUri, ObjectAtPageVersionResource.class, doc.getWiki(),\n                Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(), doc.getVersion(),\n                xwikiObject.getClassName(), xwikiObject.getNumber()).toString();\n        } else {\n            objectUri = Utils\n                .createURI(baseUri, ObjectResource.class, doc.getWiki(), Utils.getSpacesFromSpaceId(doc.getSpace()),\n                    doc.getDocumentReference().getName(), xwikiObject.getClassName(), xwikiObject.getNumber())\n                .toString();\n        }\n        Link objectLink = objectFactory.createLink();\n        objectLink.setHref(objectUri);\n        objectLink.setRel(relation);\n\n        return objectLink;\n    }\n\n    // To REST\n\n    public Wiki toRestWiki(URI baseUri, String wikiName)\n    {\n        Wiki wiki = this.objectFactory.createWiki().withId(wikiName).withName(wikiName);\n\n        String spacesUri = Utils.createURI(baseUri, SpacesResource.class, wikiName).toString();\n        Link spacesLink = this.objectFactory.createLink();\n        spacesLink.setHref(spacesUri);\n        spacesLink.setRel(Relations.SPACES);\n        wiki.getLinks().add(spacesLink);\n\n        String classesUri = Utils.createURI(baseUri, ClassesResource.class, wikiName).toString();\n        Link classesLink = this.objectFactory.createLink();\n        classesLink.setHref(classesUri);\n        classesLink.setRel(Relations.CLASSES);\n        wiki.getLinks().add(classesLink);\n\n        String modificationsUri = Utils.createURI(baseUri, ModificationsResource.class, wikiName).toString();\n        Link modificationsLink = this.objectFactory.createLink();\n        modificationsLink.setHref(modificationsUri);\n        modificationsLink.setRel(Relations.MODIFICATIONS);\n        wiki.getLinks().add(modificationsLink);\n\n        String searchUri = Utils.createURI(baseUri, WikiSearchResource.class, wikiName).toString();\n        Link searchLink = this.objectFactory.createLink();\n        searchLink.setHref(searchUri);\n        searchLink.setRel(Relations.SEARCH);\n        wiki.getLinks().add(searchLink);\n\n        String queryUri = Utils.createURI(baseUri, WikiSearchQueryResource.class, wikiName).toString();\n        Link queryLink = this.objectFactory.createLink();\n        queryLink.setHref(queryUri);\n        queryLink.setRel(Relations.QUERY);\n        wiki.getLinks().add(queryLink);\n\n        return wiki;\n    }\n\n    public Space toRestSpace(URI baseUri, String wikiName, List<String> spaces, Document home)\n    {\n        Space space = this.objectFactory.createSpace();\n        space.setId(Utils.getSpaceId(wikiName, spaces));\n        space.setWiki(wikiName);\n        // the name of the space is the last element of the spaces list\n        space.setName(spaces.get(spaces.size() - 1));\n        if (home != null) {\n            space.setHome(home.getPrefixedFullName());\n            space.setXwikiRelativeUrl(home.getURL(\"view\"));\n            space.setXwikiAbsoluteUrl(home.getExternalURL(\"view\"));\n        }\n\n        String pagesUri = Utils.createURI(baseUri, PagesResource.class, wikiName, spaces).toString();\n        Link pagesLink = this.objectFactory.createLink();\n        pagesLink.setHref(pagesUri);\n        pagesLink.setRel(Relations.PAGES);\n        space.getLinks().add(pagesLink);\n\n        if (home != null) {\n            String homeUri =\n                Utils.createURI(baseUri, PageResource.class, wikiName, spaces, home.getDocumentReference().getName())\n                    .toString();\n            Link homeLink = this.objectFactory.createLink();\n            homeLink.setHref(homeUri);\n            homeLink.setRel(Relations.HOME);\n            space.getLinks().add(homeLink);\n        }\n\n        String searchUri = Utils.createURI(baseUri, SpaceSearchResource.class, wikiName, spaces).toString();\n        Link searchLink = this.objectFactory.createLink();\n        searchLink.setHref(searchUri);\n        searchLink.setRel(Relations.SEARCH);\n        space.getLinks().add(searchLink);\n\n        return space;\n    }\n\n    public Translations toRestTranslations(URI baseUri, Document doc) throws XWikiException\n    {\n        Translations translations = this.objectFactory.createTranslations();\n        Locale defaultLocale = getDefaultLocale(doc);\n        translations.setDefault(defaultLocale.toString());\n\n        List<Locale> locales = doc.getTranslationLocales();\n\n        List<String> spaces = Utils.getSpacesFromSpaceId(doc.getSpace());\n\n        // Add the default (original) page translation, if it makes sense.\n        if (!locales.isEmpty() && !Locale.ROOT.equals(defaultLocale)) {\n            Translation translation = this.objectFactory.createTranslation();\n            translation.setLanguage(translations.getDefault());\n\n            String pageTranslationUri = Utils\n                .createURI(baseUri, PageResource.class, doc.getWiki(), spaces, doc.getDocumentReference().getName())\n                .toString();\n            Link pageTranslationLink = this.objectFactory.createLink();\n            pageTranslationLink.setHref(pageTranslationUri);\n            pageTranslationLink.setRel(Relations.PAGE);\n            translation.getLinks().add(pageTranslationLink);\n\n            String historyUri = Utils.createURI(baseUri, PageHistoryResource.class, doc.getWiki(), spaces,\n                doc.getDocumentReference().getName()).toString();\n            Link historyLink = this.objectFactory.createLink();\n            historyLink.setHref(historyUri);\n            historyLink.setRel(Relations.HISTORY);\n            translation.getLinks().add(historyLink);\n\n            translations.getTranslations().add(translation);\n        }\n\n        for (Locale locale : locales) {\n            Translation translation = this.objectFactory.createTranslation();\n            translation.setLanguage(locale.toString());\n\n            String pageTranslationUri = Utils.createURI(baseUri, PageTranslationResource.class, doc.getWiki(), spaces,\n                doc.getDocumentReference().getName(), locale).toString();\n            Link pageTranslationLink = this.objectFactory.createLink();\n            pageTranslationLink.setHref(pageTranslationUri);\n            pageTranslationLink.setRel(Relations.PAGE);\n            translation.getLinks().add(pageTranslationLink);\n\n            String historyUri = Utils.createURI(baseUri, PageTranslationHistoryResource.class, doc.getWiki(), spaces,\n                doc.getDocumentReference().getName(), locale).toString();\n            Link historyLink = this.objectFactory.createLink();\n            historyLink.setHref(historyUri);\n            historyLink.setRel(Relations.HISTORY);\n            translation.getLinks().add(historyLink);\n\n            translations.getTranslations().add(translation);\n        }\n\n        return translations;\n    }\n\n    private Locale getDefaultLocale(Document document)\n    {\n        if (document.isTranslation()) {\n            // The default locale field is not always set on document translations:\n            //\n            // * it is empty for translation pages created by the user because the save action doesn't set it and the\n            // edit form doesn't include this field;\n            // * it may be set for translation pages that are part of an XWiki extension because the XAR Maven plugin\n            // used to build the extension has a rule to enforce it;\n            //\n            // So we should take the default locale from the original document.\n            try {\n                XWikiContext xcontext = this.xcontextProvider.get();\n                return xcontext.getWiki().getDocument(document.getDocumentReference(), xcontext).getRealLocale();\n            } catch (XWikiException e) {\n                this.logger.warn(\"Failed to get the default locale from [{}]. Root cause is [{}].\",\n                    document.getDocumentReference(), ExceptionUtils.getRootCauseMessage(e));\n                // Fall-back on the default locale specified on the translation page, which may not be accurate.\n                return document.getDefaultLocale();\n            }\n        } else {\n            return document.getRealLocale();\n        }\n    }\n\n    /**\n     * This method is used to fill the \"common part\" of a Page and a PageSummary.\n     */\n    private void toRestPageSummary(PageSummary pageSummary, URI baseUri, Document doc, boolean useVersion,\n        Boolean withPrettyNames) throws XWikiException\n    {\n        XWikiContext xwikiContext = this.xcontextProvider.get();\n\n        pageSummary.setWiki(doc.getWiki());\n        pageSummary.setFullName(doc.getFullName());\n        pageSummary.setId(doc.getPrefixedFullName());\n        pageSummary.setSpace(doc.getSpace());\n        pageSummary.setName(doc.getDocumentReference().getName());\n        pageSummary.setTitle(doc.getDisplayTitle());\n        pageSummary.setRawTitle(doc.getTitle());\n        pageSummary.setXwikiRelativeUrl(doc.getURL(\"view\"));\n        pageSummary.setXwikiAbsoluteUrl(doc.getExternalURL(\"view\"));\n        pageSummary.setTranslations(toRestTranslations(baseUri, doc));\n        pageSummary.setSyntax(doc.getSyntax().toIdString());\n        pageSummary.setVersion(doc.getVersion());\n        pageSummary.setAuthor(doc.getAuthor());\n        if (withPrettyNames) {\n            pageSummary.setAuthorName(xwikiContext.getWiki().getUserName(doc.getAuthor(), null, false, xwikiContext));\n        }\n\n        pageSummary.setParent(doc.getParent());\n        DocumentReference parentReference = doc.getParentReference();\n        boolean parentExist = parentReference != null && xwikiContext.getWiki().exists(parentReference, xwikiContext);\n        // parentId must not be set if the parent document does not exist.\n        if (parentExist) {\n            pageSummary.setParentId(this.serializer.serialize(parentReference));\n        } else {\n            pageSummary.setParentId(\"\");\n        }\n\n        List<String> spaces = Utils.getSpacesFromSpaceId(doc.getSpace());\n        String spaceUri = Utils.createURI(baseUri, SpaceResource.class, doc.getWiki(), spaces).toString();\n        Link spaceLink = this.objectFactory.createLink();\n        spaceLink.setHref(spaceUri);\n        spaceLink.setRel(Relations.SPACE);\n        pageSummary.getLinks().add(spaceLink);\n\n        if (parentExist) {\n            String parentUri = Utils.createURI(baseUri, PageResource.class,\n                parentReference.getWikiReference().getName(), spaces, parentReference.getName()).toString();\n            Link parentLink = this.objectFactory.createLink();\n            parentLink.setHref(parentUri);\n            parentLink.setRel(Relations.PARENT);\n            pageSummary.getLinks().add(parentLink);\n        }\n\n        String historyUri = Utils.createURI(baseUri, PageHistoryResource.class, doc.getWiki(),\n            Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName()).toString();\n        Link historyLink = this.objectFactory.createLink();\n        historyLink.setHref(historyUri);\n        historyLink.setRel(Relations.HISTORY);\n        pageSummary.getLinks().add(historyLink);\n\n        if (!doc.getChildren().isEmpty()) {\n            String pageChildrenUri = Utils.createURI(baseUri, PageChildrenResource.class, doc.getWiki(), spaces,\n                doc.getDocumentReference().getName()).toString();\n            Link pageChildrenLink = this.objectFactory.createLink();\n            pageChildrenLink.setHref(pageChildrenUri);\n            pageChildrenLink.setRel(Relations.CHILDREN);\n            pageSummary.getLinks().add(pageChildrenLink);\n        }\n\n        if (!doc.getComments().isEmpty()) {\n            String commentsUri;\n            if (useVersion) {\n                commentsUri = Utils.createURI(baseUri, CommentsVersionResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName(), doc.getVersion()).toString();\n            } else {\n                commentsUri = Utils.createURI(baseUri, CommentsResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName()).toString();\n            }\n\n            Link commentsLink = this.objectFactory.createLink();\n            commentsLink.setHref(commentsUri);\n            commentsLink.setRel(Relations.COMMENTS);\n            pageSummary.getLinks().add(commentsLink);\n        }\n\n        if (!doc.getAttachmentList().isEmpty()) {\n            String attachmentsUri;\n            if (useVersion) {\n                attachmentsUri = Utils.createURI(baseUri, AttachmentsAtPageVersionResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName(), doc.getVersion()).toString();\n            } else {\n                attachmentsUri = Utils.createURI(baseUri, AttachmentsResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName()).toString();\n            }\n\n            Link attachmentsLink = this.objectFactory.createLink();\n            attachmentsLink.setHref(attachmentsUri);\n            attachmentsLink.setRel(Relations.ATTACHMENTS);\n            pageSummary.getLinks().add(attachmentsLink);\n        }\n\n        if (!doc.getxWikiObjects().keySet().isEmpty()) {\n            String objectsUri;\n\n            if (useVersion) {\n                objectsUri = Utils.createURI(baseUri, ObjectsAtPageVersionResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName(), doc.getVersion()).toString();\n            } else {\n                objectsUri = Utils.createURI(baseUri, ObjectsResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName()).toString();\n            }\n            Link objectsLink = this.objectFactory.createLink();\n            objectsLink.setHref(objectsUri);\n            objectsLink.setRel(Relations.OBJECTS);\n            pageSummary.getLinks().add(objectsLink);\n        }\n\n        com.xpn.xwiki.api.Object tagsObject = doc.getObject(\"XWiki.TagClass\", 0);\n        if (tagsObject != null) {\n            if (tagsObject.getProperty(\"tags\") != null) {\n                String tagsUri = Utils.createURI(baseUri, PageTagsResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName()).toString();\n                Link tagsLink = this.objectFactory.createLink();\n                tagsLink.setHref(tagsUri);\n                tagsLink.setRel(Relations.TAGS);\n                pageSummary.getLinks().add(tagsLink);\n            }\n        }\n\n        String syntaxesUri = Utils.createURI(baseUri, SyntaxesResource.class).toString();\n        Link syntaxesLink = this.objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        pageSummary.getLinks().add(syntaxesLink);\n    }\n\n    public PageSummary toRestPageSummary(URI baseUri, Document doc, Boolean withPrettyNames) throws XWikiException\n    {\n        PageSummary pageSummary = this.objectFactory.createPageSummary();\n        toRestPageSummary(pageSummary, baseUri, doc, false, withPrettyNames);\n\n        String pageUri = Utils.createURI(baseUri, PageResource.class, doc.getWiki(),\n            Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName()).toString();\n        Link pageLink = this.objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        pageSummary.getLinks().add(pageLink);\n\n        return pageSummary;\n    }\n\n    public Page toRestPage(URI baseUri, URI self, Document doc, boolean useVersion, Boolean withPrettyNames,\n        Boolean withObjects, Boolean withXClass, Boolean withAttachments) throws XWikiException\n    {\n        Page page = this.objectFactory.createPage();\n        toRestPageSummary(page, baseUri, doc, useVersion, withPrettyNames);\n\n        XWikiContext xwikiContext = this.xcontextProvider.get();\n\n        page.setMajorVersion(doc.getRCSVersion().at(0));\n        page.setMinorVersion(doc.getRCSVersion().at(1));\n        page.setHidden(doc.isHidden());\n        page.setLanguage(doc.getLocale().toString());\n        page.setCreator(doc.getCreator());\n        if (withPrettyNames) {\n            page.setCreatorName(xwikiContext.getWiki().getUserName(doc.getCreator(), null, false, xwikiContext));\n        }\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(doc.getCreationDate());\n        page.setCreated(calendar);\n\n        page.setModifier(doc.getContentAuthor());\n        if (withPrettyNames) {\n            page.setModifierName(xwikiContext.getWiki().getUserName(doc.getContentAuthor(), null, false, xwikiContext));\n        }\n\n        String originalAuthor = this.userReferenceSerializer.serialize(doc.getAuthors().getOriginalMetadataAuthor());\n        page.setOriginalMetadataAuthor(originalAuthor);\n        if (withPrettyNames) {\n            page.setOriginalMetadataAuthorName(\n                xwikiContext.getWiki().getUserName(originalAuthor, null, false, xwikiContext));\n        }\n\n\n        calendar = Calendar.getInstance();\n        calendar.setTime(doc.getContentUpdateDate());\n        page.setModified(calendar);\n\n        page.setComment(doc.getComment());\n        page.setContent(doc.getContent());\n        page.setHierarchy(toRestHierarchy(doc.getDocumentReference(), withPrettyNames));\n\n        if (self != null) {\n            Link pageLink = this.objectFactory.createLink();\n            pageLink.setHref(self.toString());\n            pageLink.setRel(Relations.SELF);\n            page.getLinks().add(pageLink);\n        }\n\n        com.xpn.xwiki.api.Class xwikiClass = doc.getxWikiClass();\n        if (xwikiClass != null) {\n            String classUri =\n                Utils.createURI(baseUri, ClassResource.class, doc.getWiki(), xwikiClass.getName()).toString();\n            Link classLink = this.objectFactory.createLink();\n            classLink.setHref(classUri);\n            classLink.setRel(Relations.CLASS);\n            page.getLinks().add(classLink);\n        }\n\n        XWikiContext xcontext = xcontextProvider.get();\n\n        // Add attachments\n        if (withAttachments) {\n            page.setAttachments(objectFactory.createAttachments());\n\n            for (com.xpn.xwiki.api.Attachment attachment : doc.getAttachmentList()) {\n                URL url = xcontext.getURLFactory().createAttachmentURL(attachment.getFilename(), doc.getSpace(),\n                    doc.getDocumentReference().getName(), \"download\", null, doc.getWiki(), xcontext);\n                String attachmentXWikiAbsoluteUrl = url.toString();\n                String attachmentXWikiRelativeUrl = xcontext.getURLFactory().getURL(url, xcontext);\n\n                page.getAttachments().getAttachments().add(toRestAttachment(baseUri, attachment,\n                    attachmentXWikiRelativeUrl, attachmentXWikiAbsoluteUrl, withPrettyNames, false));\n            }\n        }\n\n        // Add objects\n        if (withObjects) {\n            page.setObjects(objectFactory.createObjects());\n\n            XWikiDocument xwikiDocument = xcontext.getWiki().getDocument(doc.getDocumentReference(), xcontext);\n\n            for (List<BaseObject> objects : xwikiDocument.getXObjects().values()) {\n                for (BaseObject object : objects) {\n                    // Deleting an object leads to a null entry in the list of objects.\n                    if (object != null) {\n                        page.getObjects().getObjectSummaries()\n                            .add(toRestObject(baseUri, doc, object, false, withPrettyNames));\n                    }\n                }\n            }\n        }\n\n        // Add xclass\n        if (withXClass) {\n            page.setClazz(toRestClass(baseUri, doc.getxWikiClass()));\n        }\n\n        return page;\n    }\n\n    public Class toRestClass(URI baseUri, com.xpn.xwiki.api.Class xwikiClass)\n    {\n        Class clazz = this.objectFactory.createClass();\n        clazz.setId(xwikiClass.getName());\n        clazz.setName(xwikiClass.getName());\n\n        DocumentReference reference = xwikiClass.getReference();\n        String wikiName = reference.getWikiReference().getName();\n\n        for (java.lang.Object xwikiPropertyClassObject : xwikiClass.getProperties()) {\n            PropertyClass xwikiPropertyClass = (PropertyClass) xwikiPropertyClassObject;\n\n            Property property = this.objectFactory.createProperty();\n            property.setName(xwikiPropertyClass.getName());\n            property.setType(xwikiPropertyClass.getxWikiClass().getName());\n\n            for (java.lang.Object xwikiPropertyObject : xwikiPropertyClass.getProperties()) {\n                com.xpn.xwiki.api.Property xwikiProperty = (com.xpn.xwiki.api.Property) xwikiPropertyObject;\n                java.lang.Object value = xwikiProperty.getValue();\n\n                Attribute attribute = this.objectFactory.createAttribute();\n                attribute.setName(xwikiProperty.getName());\n\n                if (value != null) {\n                    attribute.setValue(value.toString());\n                } else {\n                    attribute.setValue(\"\");\n                }\n\n                property.getAttributes().add(attribute);\n            }\n\n            String propertyUri = Utils.createURI(baseUri, ClassPropertyResource.class, wikiName, xwikiClass.getName(),\n                xwikiPropertyClass.getName()).toString();\n            Link propertyLink = this.objectFactory.createLink();\n            propertyLink.setHref(propertyUri);\n            propertyLink.setRel(Relations.SELF);\n            property.getLinks().add(propertyLink);\n\n            clazz.getProperties().add(property);\n        }\n\n        String classUri = Utils.createURI(baseUri, ClassResource.class, wikiName, xwikiClass.getName()).toString();\n        Link classLink = this.objectFactory.createLink();\n        classLink.setHref(classUri);\n        classLink.setRel(Relations.SELF);\n        clazz.getLinks().add(classLink);\n\n        String propertiesUri =\n            Utils.createURI(baseUri, ClassPropertiesResource.class, wikiName, xwikiClass.getName()).toString();\n        Link propertyLink = this.objectFactory.createLink();\n        propertyLink.setHref(propertiesUri);\n        propertyLink.setRel(Relations.PROPERTIES);\n        clazz.getLinks().add(propertyLink);\n\n        String objectsUri =\n            Utils.createURI(baseUri, AllObjectsForClassNameResource.class, wikiName, xwikiClass.getName()).toString();\n        Link objectsLink = this.objectFactory.createLink();\n        objectsLink.setHref(objectsUri);\n        objectsLink.setRel(Relations.OBJECTS);\n        clazz.getLinks().add(objectsLink);\n\n        return clazz;\n    }\n\n    public Attachment toRestAttachment(URI baseUri, com.xpn.xwiki.api.Attachment xwikiAttachment,\n        Boolean withPrettyNames, boolean versionURL)\n    {\n        XWikiContext xcontext = this.xcontextProvider.get();\n        String relativeURL = xcontext.getWiki().getURL(xwikiAttachment.getReference(), xcontext);\n        String absoluteURL = xcontext.getWiki().getExternalAttachmentURL(xwikiAttachment.getDocument().getFullName(),\n            xwikiAttachment.getFilename(), xcontext);\n        return toRestAttachment(baseUri, xwikiAttachment, relativeURL, absoluteURL, withPrettyNames, versionURL);\n    }\n\n    public Attachment toRestAttachment(URI baseUri, com.xpn.xwiki.api.Attachment xwikiAttachment,\n        String xwikiRelativeUrl, String xwikiAbsoluteUrl, Boolean withPrettyNames, boolean versionURL)\n    {\n        Attachment attachment = this.objectFactory.createAttachment();\n\n        DocumentReference documentReference = xwikiAttachment.getReference().getDocumentReference();\n        attachment.setPageId(this.defaultEntityReferenceSerializer.serialize(documentReference));\n        attachment.setPageVersion(xwikiAttachment.getDocument().getVersion());\n\n        attachment.setId(this.defaultEntityReferenceSerializer.serialize(xwikiAttachment.getReference()));\n        attachment.setName(xwikiAttachment.getFilename());\n        attachment.setLongSize(xwikiAttachment.getLongSize());\n        attachment.setSize((int) xwikiAttachment.getLongSize());\n        attachment.setVersion(xwikiAttachment.getVersion());\n        attachment.setMimeType(xwikiAttachment.getMimeType());\n        attachment.setAuthor(xwikiAttachment.getAuthor());\n        if (withPrettyNames) {\n            XWikiContext xcontext = this.xcontextProvider.get();\n            attachment\n                .setAuthorName(xcontext.getWiki().getUserName(xwikiAttachment.getAuthor(), null, false, xcontext));\n        }\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(xwikiAttachment.getDate());\n        attachment.setDate(calendar);\n\n        attachment.setXwikiRelativeUrl(xwikiRelativeUrl);\n        attachment.setXwikiAbsoluteUrl(xwikiAbsoluteUrl);\n        attachment.setHierarchy(toRestHierarchy(xwikiAttachment.getReference(), withPrettyNames));\n\n        String wiki = documentReference.getWikiReference().getName();\n        List<String> spaces = Utils.getSpacesHierarchy(documentReference.getLastSpaceReference());\n\n        String pageUri =\n            Utils.createURI(baseUri, PageResource.class, wiki, spaces, documentReference.getName()).toString();\n        Link pageLink = this.objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        attachment.getLinks().add(pageLink);\n\n        String attachmentUri;\n        if (versionURL) {\n            attachmentUri = Utils.createURI(baseUri, AttachmentVersionResource.class, wiki, spaces,\n                documentReference.getName(), xwikiAttachment.getFilename(), xwikiAttachment.getVersion()).toString();\n        } else {\n            attachmentUri = Utils.createURI(baseUri, AttachmentResource.class, wiki, spaces,\n                documentReference.getName(), xwikiAttachment.getFilename()).toString();\n        }\n\n        Link attachmentLink = this.objectFactory.createLink();\n        attachmentLink.setHref(attachmentUri);\n        attachmentLink.setRel(Relations.ATTACHMENT_DATA);\n        attachment.getLinks().add(attachmentLink);\n\n        Link attachmentMetadataLink = this.objectFactory.createLink();\n        attachmentMetadataLink.setHref(Utils.createURI(baseUri, AttachmentMetadataResource.class, wiki, spaces,\n            documentReference.getName(), xwikiAttachment.getFilename()).toString());\n        attachmentMetadataLink.setRel(Relations.ATTACHMENT_METADATA);\n        attachment.getLinks().add(attachmentMetadataLink);\n\n        return attachment;\n    }\n\n    public Hierarchy toRestHierarchy(EntityReference targetEntityReference, Boolean withPrettyNames)\n    {\n        XWikiContext xcontext = this.xcontextProvider.get();\n        XWiki xwiki = xcontext.getWiki();\n        Hierarchy hierarchy = new Hierarchy();\n        for (EntityReference entityReference : targetEntityReference.getReversedReferenceChain()) {\n            HierarchyItem hierarchyItem = new HierarchyItem();\n            hierarchyItem.setName(entityReference.getName());\n            hierarchyItem.setLabel(entityReference.getName());\n            hierarchyItem.setType(entityReference.getType().getLowerCase());\n            hierarchyItem.setUrl(xwiki.getURL(entityReference, xcontext));\n            if (withPrettyNames) {\n                try {\n                    if (entityReference.getType() == EntityType.SPACE\n                        || entityReference.getType() == EntityType.DOCUMENT) {\n                        XWikiDocument document =\n                            xwiki.getDocument(entityReference, xcontext).getTranslatedDocument(xcontext);\n                        hierarchyItem.setLabel(document.getRenderedTitle(Syntax.PLAIN_1_0, xcontext));\n                        hierarchyItem.setUrl(xwiki.getURL(document.getDocumentReferenceWithLocale(), xcontext));\n                    } else if (entityReference.getType() == EntityType.WIKI) {\n                        WikiDescriptor wikiDescriptor = this.wikiDescriptorManager.getById(entityReference.getName());\n                        if (wikiDescriptor != null) {\n                            hierarchyItem.setLabel(wikiDescriptor.getPrettyName());\n                        }\n                    }\n                } catch (Exception e) {\n                    this.logger.warn(\n                        \"Failed to get the pretty name of entity [{}]. Continue using the entity name. Root cause is [{}].\",\n                        entityReference, ExceptionUtils.getRootCauseMessage(e));\n                }\n            }\n            hierarchy.withItems(hierarchyItem);\n        }\n        return hierarchy;\n    }\n\n    /**\n     * Serializes the value of the given XObject property. {@link ComputedFieldClass} properties are not evaluated.\n     *\n     * @param property an XObject property\n     * @return the String representation of the property value\n     */\n    private static String serializePropertyValue(PropertyInterface property)\n    {\n        if (property == null) {\n            return \"\";\n        }\n\n        java.lang.Object value = ((BaseProperty) property).getValue();\n        if (value instanceof List) {\n            return StringUtils.join((List) value, \"|\");\n        } else if (value != null) {\n            return value.toString();\n        } else {\n            return \"\";\n        }\n    }\n\n    /**\n     * Serializes the value of the given XObject property. In case the property is an instance of\n     * {@link ComputedFieldClass}, the serialized value is the computed property value.\n     * \n     * @param property an XObject property\n     * @param propertyClass the PropertyClass of that XObject proprety\n     * @param context the XWikiContext\n     * @return the String representation of the property value\n     */\n    private String serializePropertyValue(PropertyInterface property,\n        com.xpn.xwiki.objects.classes.PropertyClass propertyClass, XWikiContext context)\n    {\n        if (propertyClass instanceof ComputedFieldClass) {\n            // TODO: the XWikiDocument needs to be explicitely set in the context, otherwise method\n            // PropertyClass.renderInContext fires a null pointer exception: bug?\n            XWikiDocument document = context.getDoc();\n            try {\n                context.setDoc(property.getObject().getOwnerDocument());\n                ComputedFieldClass computedFieldClass = (ComputedFieldClass) propertyClass;\n                return computedFieldClass.getComputedValue(propertyClass.getName(), \"\", property.getObject(), context);\n            } catch (Exception e) {\n                logger.error(\"Error while computing property value [{}] of [{}]\", propertyClass.getName(),\n                    property.getObject(), e);\n                return serializePropertyValue(property);\n            } finally {\n                // Reset the context document to its original value, even if an exception is raised.\n                context.setDoc(document);\n            }\n        } else {\n            return serializePropertyValue(property);\n        }\n    }\n\n    public JobRequest toRestJobRequest(Request request) throws XWikiRestException\n    {\n        JobRequest restJobRequest = this.objectFactory.createJobRequest();\n\n        restJobRequest.setId(toRestJobId(request.getId()));\n        restJobRequest.setInteractive(request.isInteractive());\n        restJobRequest.setRemote(request.isRemote());\n        restJobRequest.setVerbose(request.isVerbose());\n        restJobRequest.setStatusSerialized(request.isStatusSerialized());\n        restJobRequest.setStatusLogIsolated(request.isStatusLogIsolated());\n\n        for (String key : request.getPropertyNames()) {\n            restJobRequest.getProperties().add(toRestMapEntry(key, request.getProperty(key)));\n        }\n\n        return restJobRequest;\n    }\n\n    public JobId toRestJobId(List<String> id)\n    {\n        if (id == null) {\n            return null;\n        }\n\n        JobId restJobId = this.objectFactory.createJobId();\n\n        restJobId.withElements(id);\n\n        return restJobId;\n    }\n\n    public MapEntry toRestMapEntry(String key, java.lang.Object value) throws XWikiRestException\n    {\n        MapEntry restMapEntry = this.objectFactory.createMapEntry();\n\n        restMapEntry.setKey(key);\n        try {\n            restMapEntry.setValue(this.jaxbConverter.serializeAny(value));\n        } catch (ParserConfigurationException e) {\n            throw new XWikiRestException(\"Failed to serialize property [\" + key + \"] with value [\" + value + \"]\", e);\n        }\n\n        return restMapEntry;\n    }\n\n    public DefaultRequest toJobRequest(JobRequest restJobRequest)\n    {\n        DefaultRequest request = new DefaultRequest();\n\n        if (restJobRequest.getId() != null) {\n            request.setId(restJobRequest.getId().getElements());\n        }\n\n        request.setInteractive(restJobRequest.isInteractive());\n        request.setVerbose(restJobRequest.isVerbose());\n        request.setStatusSerialized(restJobRequest.isStatusSerialized());\n        request.setStatusLogIsolated(restJobRequest.isStatusLogIsolated());\n\n        for (MapEntry restEntry : restJobRequest.getProperties()) {\n            request.setProperty(restEntry.getKey(), this.jaxbConverter.unserializeAny(restEntry.getValue()));\n        }\n\n        return request;\n    }\n\n    public JobStatus toRestJobStatus(org.xwiki.job.event.status.JobStatus jobStatus, URI self, boolean request,\n        boolean progress, boolean log, String logFromLevel) throws XWikiRestException\n    {\n        JobStatus status = this.objectFactory.createJobStatus();\n        status.setId(StringUtils.join(jobStatus.getRequest().getId(), \"/\"));\n        status.setState(jobStatus.getState().name());\n        if (jobStatus.getStartDate() != null) {\n            Calendar calendarStartDate = Calendar.getInstance();\n            calendarStartDate.setTime(jobStatus.getStartDate());\n            status.setStartDate(calendarStartDate);\n        }\n        if (jobStatus.getEndDate() != null) {\n            Calendar calendarEndDate = Calendar.getInstance();\n            calendarEndDate.setTime(jobStatus.getEndDate());\n            status.setEndDate(calendarEndDate);\n        }\n        if (jobStatus.getError() != null) {\n            status.setErrorMessage(ExceptionUtils.getStackTrace(jobStatus.getError()));\n        }\n\n        // Request\n        if (request) {\n            status.setRequest(toRestJobRequest(jobStatus.getRequest()));\n        }\n\n        // Progress\n        if (progress) {\n            status.setProgress(toRestJobProgress(jobStatus.getProgress()));\n        }\n\n        // Log\n        if (log) {\n            try {\n                status.setLog(toRestJobLog(jobStatus.getLogTail(), self, null, logFromLevel));\n            } catch (IOException e) {\n                this.logger.error(\"Failed to access the log of job {}\", jobStatus.getRequest().getId(), e);\n            }\n        }\n\n        // Link\n        if (self != null) {\n            Link link = objectFactory.createLink();\n            link.setHref(self.toString());\n            link.setRel(Relations.SELF);\n            status.getLinks().add(link);\n        }\n\n        // Log isolation\n        status.setIsolated(jobStatus.isIsolated());\n        // Status serialization\n        status.setSerialized(jobStatus.isSerialized());\n\n        return status;\n    }\n\n    public JobProgress toRestJobProgress(org.xwiki.job.event.status.JobProgress progress)\n    {\n        JobProgress restJobProgress = this.objectFactory.createJobProgress();\n\n        restJobProgress.setOffset(progress.getOffset());\n        restJobProgress.setCurrentLevelOffset(progress.getCurrentLevelOffset());\n\n        // TODO: add support for steps\n\n        return restJobProgress;\n    }\n\n    public JobLog toRestJobLog(LogTail logQueue, URI self, String level, String fromLevel) throws IOException\n    {\n        // Filter log\n        Iterable<LogEvent> logs;\n        if (level != null) {\n            LogLevel logLevel = LogLevel.valueOf(level.toUpperCase());\n            logs = logQueue.getLogEvents(logLevel).stream().filter(log -> log.getLevel() == logLevel)\n                .collect(Collectors.toList());\n        } else if (fromLevel != null) {\n            logs = logQueue.getLogEvents(LogLevel.valueOf(fromLevel.toUpperCase()));\n        } else {\n            logs = logQueue;\n        }\n\n        return toRestJobLog(logs, self);\n    }\n\n    public JobLog toRestJobLog(Iterable<LogEvent> logs, URI self)\n    {\n        JobLog log = this.objectFactory.createJobLog();\n\n        // Serialize log\n        for (LogEvent logEvent : logs) {\n            // TODO: add support for log arguments\n            // TODO: add support for log Marker\n            org.xwiki.rest.model.jaxb.LogEvent event = this.objectFactory.createLogEvent();\n            event.setLevel(logEvent.getLevel().name());\n            Calendar calendarDate = Calendar.getInstance();\n            calendarDate.setTimeInMillis(logEvent.getTimeStamp());\n            event.setDate(calendarDate);\n            event.setFormattedMessage(logEvent.getFormattedMessage());\n            log.getLogEvents().add(event);\n        }\n\n        // Set link\n        if (self != null) {\n            Link link = this.objectFactory.createLink();\n            link.setHref(self.toString());\n            link.setRel(Relations.SELF);\n            log.getLinks().add(link);\n        }\n\n        return log;\n    }\n\n    /**\n     * Check if the given property should be exposed via REST.\n     * \n     * @param restProperty the property to be read/written\n     * @return true if the property is considered accessible\n     */\n    private boolean hasAccess(Property restProperty)\n    {\n        if (PASSWORD_TYPE.equals(restProperty.getType())) {\n            return authorizationManagerProvider.get().hasAccess(Right.ADMIN, xcontextProvider.get().getWikiReference());\n        }\n\n        return true;\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rest.internal;\n\nimport java.net.URI;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Vector;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.RegisterExtension;\nimport org.mockito.Mock;\nimport org.xwiki.component.manager.ComponentManager;\nimport org.xwiki.model.reference.AttachmentReference;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.SpaceReference;\nimport org.xwiki.model.reference.SpaceReferenceResolver;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.rest.model.jaxb.Attachment;\nimport org.xwiki.rest.model.jaxb.Hierarchy;\nimport org.xwiki.rest.model.jaxb.HierarchyItem;\nimport org.xwiki.rest.model.jaxb.Object;\nimport org.xwiki.rest.model.jaxb.PageSummary;\nimport org.xwiki.rest.model.jaxb.Property;\nimport org.xwiki.rest.model.jaxb.Translations;\nimport org.xwiki.security.authorization.ContextualAuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.LogLevel;\nimport org.xwiki.test.junit5.LogCaptureExtension;\nimport org.xwiki.test.junit5.mockito.InjectComponentManager;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.wiki.descriptor.WikiDescriptor;\nimport org.xwiki.wiki.descriptor.WikiDescriptorManager;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.api.Document;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.StringProperty;\nimport com.xpn.xwiki.objects.classes.BaseClass;\nimport com.xpn.xwiki.objects.classes.PasswordClass;\nimport com.xpn.xwiki.objects.classes.StringClass;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n@OldcoreTest\nclass ModelFactoryTest\n{\n    private static final String TEST_STRING_FIELD = \"textValue\";\n\n    private static final String TEST_STRING_VALUE = \"abcd\";\n\n    private static final String TEST_PASSWORD_FIELD = \"passwordValue\";\n\n    private static final String TEST_PASSWORD_VALUE = \"secret\";\n\n    @RegisterExtension\n    private LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n\n    @InjectComponentManager\n    private ComponentManager componentManager;\n\n    @MockComponent\n    private ContextualAuthorizationManager authorizationManager;\n\n    @MockComponent\n    private SpaceReferenceResolver<String> resolver;\n\n    @MockComponent\n    private WikiDescriptorManager wikiDescriptorManager;\n\n    @MockComponent\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;\n\n    @InjectMockComponents\n    private ModelFactory modelFactory;\n\n    @InjectMockitoOldcore\n    private MockitoOldcore oldCore;\n\n    private XWikiContext xcontext;\n\n    @Mock\n    private XWiki xwiki;\n\n    private URI baseURI;\n\n    @Mock\n    private Document testDocument;\n\n    @Mock\n    private XWikiDocument testXWikiDocument;\n\n    @BeforeEach\n    void mockUpTestDocument() throws Exception\n    {\n        baseURI = new URI(\"https://localhost/\");\n        DocumentReference documentReference = new DocumentReference(\"wiki\", Arrays.asList(\"Path\", \"To\"), \"Page\");\n        when(testDocument.getPrefixedFullName()).thenReturn(\"wiki:Path.To.Page\");\n        when(testDocument.getWiki()).thenReturn(\"wiki\");\n        when(testDocument.getSpace()).thenReturn(\"Path.To\");\n        when(testDocument.getName()).thenReturn(\"Page\");\n        when(testDocument.getDocumentReference()).thenReturn(documentReference);\n\n        this.xcontext = this.oldCore.getXWikiContext();\n        this.xcontext.setWikiReference(documentReference.getWikiReference());\n        this.xcontext.setWiki(this.xwiki);\n        when(this.xwiki.getDocument(documentReference, this.xcontext)).thenReturn(this.testXWikiDocument);\n    }\n\n    /**\n     * A separate set up only for tests which needs an object.\n     * \n     * @return the object for test, prefilled witha few values\n     */\n    private BaseObject setUpTestObject() throws Exception\n    {\n        BaseObject xwikiObject = mock(BaseObject.class);\n        BaseClass xwikiClass = mock(BaseClass.class);\n\n        when(xwikiObject.getPropertyNames()).thenReturn(new String[] {});\n        when(xwikiObject.getXClass(xcontext)).thenReturn(xwikiClass);\n        when(xwikiObject.getClassName()).thenReturn(\"Some.XClass\");\n        when(xwikiObject.getNumber()).thenReturn(0);\n\n        StringClass stringField = new StringClass();\n        stringField.setName(TEST_STRING_FIELD);\n        StringProperty textElement = new StringProperty();\n        textElement.setName(TEST_STRING_FIELD);\n        textElement.setClassType(\"String\");\n        textElement.setValue(TEST_STRING_VALUE);\n        when(xwikiObject.get(TEST_STRING_FIELD)).thenReturn(textElement);\n\n        PasswordClass pwField = new PasswordClass();\n        pwField.setName(TEST_PASSWORD_FIELD);\n        StringProperty pwElement = new StringProperty();\n        pwElement.setName(TEST_PASSWORD_FIELD);\n        pwElement.setClassType(\"Password\");\n        pwElement.setValue(TEST_PASSWORD_VALUE);\n        when(xwikiObject.get(TEST_PASSWORD_FIELD)).thenReturn(pwElement);\n\n        when(xwikiClass.getProperties()).thenReturn(new java.lang.Object[] {stringField, pwField});\n\n        return xwikiObject;\n    }\n\n    @Test\n    void toRestObjectCheckWhichObjectValuesAreAvailableForNonAdmins() throws Exception\n    {\n        when(authorizationManager.hasAccess(Right.ADMIN, new WikiReference(\"wiki\"))).thenReturn(false);\n\n        BaseObject xwikiObject = setUpTestObject();\n\n        Object result = modelFactory.toRestObject(baseURI, testDocument, xwikiObject, false, false);\n\n        Map<String, String> expectedValues = new HashMap<>();\n        expectedValues.put(TEST_STRING_FIELD, TEST_STRING_VALUE);\n        expectedValues.put(TEST_PASSWORD_FIELD, null);\n        assertExpectedPropertyValues(result.getProperties(), expectedValues);\n    }\n\n    @Test\n    void toRestObjectCheckWhichObjectValuesAreAvailableForAdmins() throws Exception\n    {\n        when(authorizationManager.hasAccess(Right.ADMIN, new WikiReference(\"wiki\"))).thenReturn(true);\n\n        BaseObject xwikiObject = setUpTestObject();\n\n        Object result = modelFactory.toRestObject(baseURI, testDocument, xwikiObject, false, false);\n\n        Map<String, String> expectedValues = new HashMap<>();\n        expectedValues.put(TEST_STRING_FIELD, TEST_STRING_VALUE);\n        expectedValues.put(TEST_PASSWORD_FIELD, TEST_PASSWORD_VALUE);\n        assertExpectedPropertyValues(result.getProperties(), expectedValues);\n    }\n\n    private void assertExpectedPropertyValues(List<Property> properties, Map<String, String> expectedValues)\n    {\n        Set<String> propertiesFound = new HashSet<>();\n        for (Property prop : properties) {\n            String expectedValue = expectedValues.get(prop.getName());\n            assertEquals(expectedValue, prop.getValue(),\n                String.format(\"unexpected value for property name [%s]\", prop.getName()));\n            propertiesFound.add(prop.getName());\n        }\n        Set<String> missingProperties = new HashSet<>(expectedValues.keySet());\n        missingProperties.removeAll(propertiesFound);\n\n        assertTrue(missingProperties.isEmpty(), String.format(\"missing properties %s in result\", missingProperties));\n    }\n\n    @Test\n    void toRestHierarchyFromSpaceWithoutPrettyNames()\n    {\n        SpaceReference spaceReference = new SpaceReference(\"dev\", \"API\");\n        when(this.xwiki.getURL(spaceReference.getParent(), this.xcontext)).thenReturn(\"wiki URL\");\n        when(this.xwiki.getURL(spaceReference, this.xcontext)).thenReturn(\"space URL\");\n\n        Hierarchy hierarchy = this.modelFactory.toRestHierarchy(spaceReference, false);\n\n        assertEquals(2, hierarchy.getItems().size());\n\n        HierarchyItem item = hierarchy.getItems().get(0);\n        assertEquals(item.getLabel(), item.getName());\n        assertEquals(\"dev\", item.getName());\n        assertEquals(\"wiki\", item.getType());\n        assertEquals(\"wiki URL\", item.getUrl());\n\n        item = hierarchy.getItems().get(1);\n        assertEquals(item.getLabel(), item.getName());\n        assertEquals(\"API\", item.getName());\n        assertEquals(\"space\", item.getType());\n        assertEquals(\"space URL\", item.getUrl());\n    }\n\n    @Test\n    void toRestHierarchyFromDocumentWithPrettyNames() throws Exception\n    {\n        DocumentReference documentReference = new DocumentReference(\"dev\", \"API\", \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class, \"en\");\n        when(this.xwiki.getDocument((EntityReference) documentReference, this.xcontext)).thenReturn(document);\n        when(this.xwiki.getDocument(documentReference.getParent(), this.xcontext)).thenReturn(document);\n\n        XWikiDocument translatedDocument = mock(XWikiDocument.class, \"fr\");\n        when(document.getTranslatedDocument(this.xcontext)).thenReturn(translatedDocument);\n        when(translatedDocument.getRenderedTitle(Syntax.PLAIN_1_0, this.xcontext)).thenReturn(\"API Title\");\n\n        DocumentReference documentReferenceWithLocale = new DocumentReference(documentReference, Locale.FRENCH);\n        when(translatedDocument.getDocumentReferenceWithLocale()).thenReturn(documentReferenceWithLocale);\n        when(this.xwiki.getURL(documentReferenceWithLocale, this.xcontext)).thenReturn(\"tdoc URL\");\n\n        WikiDescriptor wikiDescriptor = new WikiDescriptor(\"dev\", \"dev\");\n        wikiDescriptor.setPrettyName(\"Development Wiki\");\n        when(this.wikiDescriptorManager.getById(\"dev\")).thenReturn(wikiDescriptor);\n\n        Hierarchy hierarchy = this.modelFactory.toRestHierarchy(documentReference, true);\n\n        assertEquals(3, hierarchy.getItems().size());\n\n        HierarchyItem item = hierarchy.getItems().get(0);\n        assertEquals(\"Development Wiki\", item.getLabel());\n\n        item = hierarchy.getItems().get(1);\n        assertEquals(\"API Title\", item.getLabel());\n        assertEquals(\"tdoc URL\", item.getUrl());\n\n        item = hierarchy.getItems().get(2);\n        assertEquals(\"API Title\", item.getLabel());\n        assertEquals(\"tdoc URL\", item.getUrl());\n    }\n\n    @Test\n    void toRestAttachment()\n    {\n        com.xpn.xwiki.api.Attachment xwikiAttachment = mock(com.xpn.xwiki.api.Attachment.class);\n        when(xwikiAttachment.getLongSize()).thenReturn(123L);\n        when(xwikiAttachment.getVersion()).thenReturn(\"2.1\");\n        when(xwikiAttachment.getMimeType()).thenReturn(\"image/png\");\n        when(xwikiAttachment.getAuthor()).thenReturn(\"XWiki.Admin\");\n        when(xwikiAttachment.getDate()).thenReturn(new Date(1559347200000L));\n\n        AttachmentReference attachmentReference =\n            new AttachmentReference(\"logo.png\", new DocumentReference(\"test\", \"Space\", \"Page\"));\n        when(xwikiAttachment.getReference()).thenReturn(attachmentReference);\n        when(xwikiAttachment.getFilename()).thenReturn(attachmentReference.getName());\n\n        Document document = mock(Document.class);\n        when(xwikiAttachment.getDocument()).thenReturn(document);\n        when(document.getFullName()).thenReturn(\"Space.Page\");\n        when(document.getVersion()).thenReturn(\"5.2\");\n\n        when(this.xwiki.getURL(attachmentReference, this.xcontext)).thenReturn(\"attachment URL\");\n        when(this.xwiki.getExternalAttachmentURL(\"Space.Page\", \"logo.png\", this.xcontext))\n            .thenReturn(\"attachment external URL\");\n\n        when(this.defaultEntityReferenceSerializer.serialize(attachmentReference.getParent()))\n            .thenReturn(\"test:Space.Page\");\n        when(this.defaultEntityReferenceSerializer.serialize(attachmentReference))\n            .thenReturn(\"test:Space.Page@logo.png\");\n\n        Attachment restAttachment = this.modelFactory.toRestAttachment(this.baseURI, xwikiAttachment, false, false);\n\n        assertEquals(xwikiAttachment.getAuthor(), restAttachment.getAuthor());\n        assertEquals(xwikiAttachment.getDate(), restAttachment.getDate().getTime());\n        assertEquals(4, restAttachment.getHierarchy().getItems().size());\n        assertEquals(\"test:Space.Page@logo.png\", restAttachment.getId());\n        assertEquals(3, restAttachment.getLinks().size());\n        assertEquals(xwikiAttachment.getLongSize(), restAttachment.getLongSize());\n        assertEquals(xwikiAttachment.getMimeType(), restAttachment.getMimeType());\n        assertEquals(xwikiAttachment.getFilename(), restAttachment.getName());\n        assertEquals(\"test:Space.Page\", restAttachment.getPageId());\n        assertEquals(document.getVersion(), restAttachment.getPageVersion());\n        assertEquals(123, restAttachment.getSize());\n        assertEquals(xwikiAttachment.getVersion(), restAttachment.getVersion());\n        assertEquals(\"attachment external URL\", restAttachment.getXwikiAbsoluteUrl());\n        assertEquals(\"attachment URL\", restAttachment.getXwikiRelativeUrl());\n    }\n\n    @Test\n    void toRestTranslations() throws XWikiException\n    {\n        when(this.testDocument.getRealLocale()).thenReturn(Locale.FRENCH);\n        when(this.testDocument.getTranslationLocales()).thenReturn(Arrays.asList(Locale.ENGLISH, Locale.GERMAN));\n\n        Translations translations = this.modelFactory.toRestTranslations(this.baseURI, this.testDocument);\n\n        assertEquals(\"fr\", translations.getDefault());\n        // We include the default (original) translation.\n        assertEquals(3, translations.getTranslations().size());\n        assertEquals(\"fr\", translations.getTranslations().get(0).getLanguage());\n        assertEquals(\"en\", translations.getTranslations().get(1).getLanguage());\n        assertEquals(\"de\", translations.getTranslations().get(2).getLanguage());\n    }\n\n    @Test\n    void toRestTranslationsWhenNoTranslation() throws XWikiException\n    {\n        when(this.testDocument.isTranslation()).thenReturn(true);\n        when(this.testDocument.getDefaultLocale()).thenReturn(Locale.ROOT);\n        when(this.testXWikiDocument.getRealLocale()).thenReturn(new Locale(\"foo\", \"bar\", \"test\"));\n\n        Translations translations = this.modelFactory.toRestTranslations(this.baseURI, this.testDocument);\n\n        assertEquals(\"foo_BAR_test\", translations.getDefault());\n        assertTrue(translations.getTranslations().isEmpty());\n    }\n\n    @Test\n    void toRestTranslationsForRootLocale() throws XWikiException\n    {\n        when(this.testDocument.getRealLocale()).thenReturn(Locale.ROOT);\n\n        Translations translations = this.modelFactory.toRestTranslations(this.baseURI, this.testDocument);\n\n        assertEquals(\"\", translations.getDefault());\n        assertTrue(translations.getTranslations().isEmpty());\n    }\n\n    @Test\n    void toRestTranslationsFailsToLoadDefaultLocale() throws XWikiException\n    {\n        when(this.testDocument.isTranslation()).thenReturn(true);\n        when(this.xwiki.getDocument(this.testDocument.getDocumentReference(), this.xcontext))\n            .thenThrow(new XWikiException(0, 0, \"test\"));\n        when(this.testDocument.getDefaultLocale()).thenReturn(Locale.CANADA_FRENCH);\n\n        Translations translations = this.modelFactory.toRestTranslations(this.baseURI, this.testDocument);\n\n        assertEquals(\"Failed to get the default locale from [wiki:Path.To.Page]. \"\n            + \"Root cause is [XWikiException: Error number 0 in 0: test].\", this.logCapture.getMessage(0));\n        assertEquals(\"fr_CA\", translations.getDefault());\n        assertTrue(translations.getTranslations().isEmpty());\n    }\n\n    @Test\n    void toRestPageSummary() throws Exception\n    {\n        when(this.testDocument.getTitle()).thenReturn(\"Some > title\");\n        when(this.testDocument.getDisplayTitle()).thenReturn(\"Some &gt; title\");\n        when(this.testDocument.getRealLocale()).thenReturn(Locale.ITALIAN);\n        when(this.testDocument.getSyntax()).thenReturn(Syntax.XWIKI_2_1);\n        when(this.testDocument.getComments()).thenReturn(new Vector<>());\n\n        PageSummary pageSummary = this.modelFactory.toRestPageSummary(this.baseURI, this.testDocument, true);\n\n        assertEquals(this.testDocument.getDisplayTitle(), pageSummary.getTitle());\n        assertEquals(this.testDocument.getTitle(), pageSummary.getRawTitle());\n    }\n}\n"], "fixing_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.xwiki.platform</groupId>\n    <artifactId>xwiki-platform-rest</artifactId>\n    <version>15.2-SNAPSHOT</version>\n  </parent>\n  <artifactId>xwiki-platform-rest-server</artifactId>\n  <packaging>jar</packaging>\n  <name>XWiki Platform - REST - Server</name>\n  <description>Service for accessing XWiki through a RESTful API</description>\n  <properties>\n    <xwiki.jacoco.instructionRatio>0.29</xwiki.jacoco.instructionRatio>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.commons</groupId>\n      <artifactId>commons-lang3</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>commons-io</groupId>\n      <artifactId>commons-io</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-component-api</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-context</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-job-api</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-repository-model</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-script</artifactId>\n      <version>${commons.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.rendering</groupId>\n      <artifactId>xwiki-rendering-api</artifactId>\n      <version>${rendering.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-rest-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-rest-model</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-localization-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-model-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-query-manager</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-rendering-configuration-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-security-authorization-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-wiki-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <!-- Needed to resolve the user serializer component -->\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-user-default</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.restlet.jse</groupId>\n      <artifactId>org.restlet</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.restlet.jee</groupId>\n      <artifactId>org.restlet.ext.servlet</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.restlet.jse</groupId>\n      <artifactId>org.restlet.ext.jaxrs</artifactId>\n    </dependency>\n    <!-- Replace the version triggered by restlet by a more accurate and up to date one -->\n    <dependency>\n      <groupId>com.tdunning</groupId>\n      <artifactId>json</artifactId>\n    </dependency>\n    <dependency>\n      <!-- We need Jackson for a proper JSON representation of our REST resources.\n        See XWIKI-9136: Rest API JSON does not retrieve inherited fields -->\n      <groupId>org.restlet.jse</groupId>\n      <artifactId>org.restlet.ext.jackson</artifactId>\n    </dependency>\n    <!-- We need a JAXB converter for XML representation because we model our REST resources using JAXB. Jackson (see\n        above) has a module that understands JAXB annotations but the output of the Restlet Jackson converter is not very\n        good (missing XML declaration and namespace, attributes serialized as elements) so we prefer to use a dedicated\n        JAXB converter for XML representation. -->\n    <dependency>\n      <groupId>org.restlet.jse</groupId>\n      <artifactId>org.restlet.ext.jaxb</artifactId>\n    </dependency>\n    <!-- Replace the version triggered by Restlet by a more accurate one -->\n    <dependency>\n      <groupId>org.glassfish.jaxb</groupId>\n      <artifactId>jaxb-runtime</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-oldcore</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-wiki-user-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.jvnet.jaxb2_commons</groupId>\n      <artifactId>jaxb2-fluent-api</artifactId>\n      <version>3.0</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-icon-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-mail-api</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n\n    <!-- Test dependencies -->\n    <dependency>\n      <groupId>org.xwiki.commons</groupId>\n      <artifactId>xwiki-commons-tool-test-component</artifactId>\n      <version>${commons.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-test-oldcore</artifactId>\n      <version>${project.version}</version>\n      <type>pom</type>\n      <scope>test</scope>\n    </dependency>\n    <!-- Required to test the templates. -->\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-test-page</artifactId>\n      <version>${project.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.xwiki.platform</groupId>\n      <artifactId>xwiki-platform-web-templates</artifactId>\n      <version>${project.version}</version>\n      <type>jar</type>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <!-- Apply the Checkstyle configurations defined in the top level pom.xml file -->\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <executions>\n          <execution>\n            <!-- Specify the \"default\" execution id so that the \"blocker\" one is always executed -->\n            <id>default</id>\n            <configuration>\n              <failsOnError>true</failsOnError>\n              <suppressionsLocation>${basedir}/src/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>\n              <excludes>\n                org/xwiki/rest/Constants.java,\n                org/xwiki/rest/XWikiResource.java,\n                org/xwiki/rest/internal/DomainObjectFactory.java,\n                org/xwiki/rest/internal/ModelFactory.java,\n                org/xwiki/rest/internal/RangeIterable.java,\n                org/xwiki/rest/internal/Utils.java,\n                org/xwiki/rest/internal/XWikiAuthentication.java,\n                org/xwiki/rest/internal/resources/BaseAttachmentsResource.java,\n                org/xwiki/rest/internal/resources/BaseSearchResult.java,\n                org/xwiki/rest/internal/resources/BrowserAuthenticationResource.java,\n                org/xwiki/rest/internal/resources/pages/PagesResourceImpl.java,\n                org/xwiki/rest/internal/resources/search/AbstractDatabaseSearchSource.java,\n                org/xwiki/rest/internal/resources/search/SearchSource.java,\n                org/xwiki/rest/internal/resources/wikis/WikiPagesResourceImpl.java\n              </excludes>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>fr.inria.gforge.spoon</groupId>\n        <artifactId>spoon-maven-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>spoon-main</id>\n            <configuration>\n              <processorProperties combine.children=\"append\">\n                <processorProperty>\n                  <name>org.xwiki.tool.spoon.InjectAnnotationProcessor</name>\n                  <properties>\n                    <property>\n                      <!-- Exclude javax.ws.rs.core.Application & org.restlet.ext.jaxrs.ObjectFactory since we use an\n                           Inject on them. These are special cases when we don't inject on an interface with a @Role\n                           and there's no way for the Spoon checker to find out about this, since only the Component\n                           Manager knows what has been registered in it. -->\n                      <name>excludedFieldTypes</name>\n                      <value><![CDATA[\n                        [\"javax.ws.rs.core.Application\", \"org.restlet.ext.jaxrs.ObjectFactory\"]\n                      ]]></value>\n                    </property>\n                  </properties>\n                </processorProperty>\n              </processorProperties>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rest.internal;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Formatter;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.Vector;\nimport java.util.stream.Collectors;\n\nimport javax.inject.Inject;\nimport javax.inject.Provider;\nimport javax.inject.Singleton;\nimport javax.mail.internet.AddressException;\nimport javax.mail.internet.InternetAddress;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.slf4j.Logger;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.job.DefaultRequest;\nimport org.xwiki.job.Request;\nimport org.xwiki.logging.LogLevel;\nimport org.xwiki.logging.event.LogEvent;\nimport org.xwiki.logging.tail.LogTail;\nimport org.xwiki.mail.EmailAddressObfuscator;\nimport org.xwiki.mail.GeneralMailConfiguration;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.ObjectReference;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.rest.Relations;\nimport org.xwiki.rest.XWikiRestException;\nimport org.xwiki.rest.model.jaxb.Attachment;\nimport org.xwiki.rest.model.jaxb.Attribute;\nimport org.xwiki.rest.model.jaxb.Class;\nimport org.xwiki.rest.model.jaxb.Hierarchy;\nimport org.xwiki.rest.model.jaxb.HierarchyItem;\nimport org.xwiki.rest.model.jaxb.JobId;\nimport org.xwiki.rest.model.jaxb.JobLog;\nimport org.xwiki.rest.model.jaxb.JobProgress;\nimport org.xwiki.rest.model.jaxb.JobRequest;\nimport org.xwiki.rest.model.jaxb.JobStatus;\nimport org.xwiki.rest.model.jaxb.Link;\nimport org.xwiki.rest.model.jaxb.MapEntry;\nimport org.xwiki.rest.model.jaxb.Object;\nimport org.xwiki.rest.model.jaxb.ObjectFactory;\nimport org.xwiki.rest.model.jaxb.ObjectSummary;\nimport org.xwiki.rest.model.jaxb.Page;\nimport org.xwiki.rest.model.jaxb.PageSummary;\nimport org.xwiki.rest.model.jaxb.Property;\nimport org.xwiki.rest.model.jaxb.Space;\nimport org.xwiki.rest.model.jaxb.Translation;\nimport org.xwiki.rest.model.jaxb.Translations;\nimport org.xwiki.rest.model.jaxb.Wiki;\nimport org.xwiki.rest.resources.ModificationsResource;\nimport org.xwiki.rest.resources.SyntaxesResource;\nimport org.xwiki.rest.resources.attachments.AttachmentMetadataResource;\nimport org.xwiki.rest.resources.attachments.AttachmentResource;\nimport org.xwiki.rest.resources.attachments.AttachmentVersionResource;\nimport org.xwiki.rest.resources.attachments.AttachmentsAtPageVersionResource;\nimport org.xwiki.rest.resources.attachments.AttachmentsResource;\nimport org.xwiki.rest.resources.classes.ClassPropertiesResource;\nimport org.xwiki.rest.resources.classes.ClassPropertyResource;\nimport org.xwiki.rest.resources.classes.ClassResource;\nimport org.xwiki.rest.resources.classes.ClassesResource;\nimport org.xwiki.rest.resources.comments.CommentsResource;\nimport org.xwiki.rest.resources.comments.CommentsVersionResource;\nimport org.xwiki.rest.resources.objects.AllObjectsForClassNameResource;\nimport org.xwiki.rest.resources.objects.ObjectAtPageVersionResource;\nimport org.xwiki.rest.resources.objects.ObjectPropertiesAtPageVersionResource;\nimport org.xwiki.rest.resources.objects.ObjectPropertiesResource;\nimport org.xwiki.rest.resources.objects.ObjectPropertyAtPageVersionResource;\nimport org.xwiki.rest.resources.objects.ObjectPropertyResource;\nimport org.xwiki.rest.resources.objects.ObjectResource;\nimport org.xwiki.rest.resources.objects.ObjectsAtPageVersionResource;\nimport org.xwiki.rest.resources.objects.ObjectsResource;\nimport org.xwiki.rest.resources.pages.PageChildrenResource;\nimport org.xwiki.rest.resources.pages.PageHistoryResource;\nimport org.xwiki.rest.resources.pages.PageResource;\nimport org.xwiki.rest.resources.pages.PageTagsResource;\nimport org.xwiki.rest.resources.pages.PageTranslationHistoryResource;\nimport org.xwiki.rest.resources.pages.PageTranslationResource;\nimport org.xwiki.rest.resources.pages.PagesResource;\nimport org.xwiki.rest.resources.spaces.SpaceResource;\nimport org.xwiki.rest.resources.spaces.SpaceSearchResource;\nimport org.xwiki.rest.resources.spaces.SpacesResource;\nimport org.xwiki.rest.resources.wikis.WikiSearchQueryResource;\nimport org.xwiki.rest.resources.wikis.WikiSearchResource;\nimport org.xwiki.security.authorization.ContextualAuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.user.UserReferenceSerializer;\nimport org.xwiki.wiki.descriptor.WikiDescriptor;\nimport org.xwiki.wiki.descriptor.WikiDescriptorManager;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.api.Document;\nimport com.xpn.xwiki.api.PropertyClass;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.BaseProperty;\nimport com.xpn.xwiki.objects.PropertyInterface;\nimport com.xpn.xwiki.objects.classes.BaseClass;\nimport com.xpn.xwiki.objects.classes.ComputedFieldClass;\nimport com.xpn.xwiki.objects.classes.ListClass;\n\nimport static org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseMessage;\n\n/**\n * Various common tools for resources.\n * \n * @version $Id$\n * @since 7.3M1\n */\n@Component(roles = ModelFactory.class)\n@Singleton\npublic class ModelFactory\n{\n    private static final String PASSWORD_TYPE = \"Password\";\n\n    private final ObjectFactory objectFactory;\n\n    @Inject\n    private Provider<XWikiContext> xcontextProvider;\n\n    @Inject\n    private EntityReferenceSerializer<String> serializer;\n\n    @Inject\n    private JAXBConverter jaxbConverter;\n\n    @Inject\n    private Provider<ContextualAuthorizationManager> authorizationManagerProvider;\n\n    @Inject\n    private Logger logger;\n\n    @Inject\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;\n\n    @Inject\n    private WikiDescriptorManager wikiDescriptorManager;\n\n    @Inject\n    private UserReferenceSerializer<String> userReferenceSerializer;\n\n    @Inject\n    private GeneralMailConfiguration generalMailConfiguration;\n\n    @Inject\n    private EmailAddressObfuscator emailAddressObfuscator;\n\n    public ModelFactory()\n    {\n        this.objectFactory = new ObjectFactory();\n    }\n\n    public boolean toDocument(Document doc, org.xwiki.rest.model.jaxb.Page restPage) throws XWikiException\n    {\n        boolean modified = false;\n\n        if (restPage.getContent() != null) {\n            doc.setContent(restPage.getContent());\n            modified = true;\n        }\n\n        if (restPage.getTitle() != null) {\n            doc.setTitle(restPage.getTitle());\n            modified = true;\n        }\n\n        if (restPage.getParent() != null) {\n            doc.setParent(restPage.getParent());\n            modified = true;\n        }\n\n        if (restPage.getSyntax() != null) {\n            doc.setSyntaxId(restPage.getSyntax());\n            modified = true;\n        }\n\n        doc.setHidden(restPage.isHidden());\n\n        // Set objects\n        if (restPage.getObjects() != null) {\n            Set<ObjectReference> newReferences = new HashSet<>();\n\n            // Add/update objects\n            for (ObjectSummary restObjectSummary : restPage.getObjects().getObjectSummaries()) {\n                if (restObjectSummary != null) {\n                    org.xwiki.rest.model.jaxb.Object restObject = (org.xwiki.rest.model.jaxb.Object) restObjectSummary;\n                    com.xpn.xwiki.api.Object xwikiObject =\n                        doc.getObject(restObject.getClassName(), restObject.getNumber());\n                    if (xwikiObject == null) {\n                        xwikiObject = doc.newObject(restObject.getClassName());\n                    }\n                    toObject(xwikiObject, restObject);\n                    modified = true;\n\n                    newReferences.add(xwikiObject.getReference());\n                }\n            }\n\n            // Remove objects\n            List<com.xpn.xwiki.api.Object> toRemove = new ArrayList<>();\n            for (Vector<com.xpn.xwiki.api.Object> objects : doc.getxWikiObjects().values()) {\n                for (com.xpn.xwiki.api.Object object : objects) {\n                    if (!newReferences.contains(object.getReference())) {\n                        toRemove.add(object);\n                    }\n                }\n            }\n            for (com.xpn.xwiki.api.Object obj : toRemove) {\n                doc.removeObject(obj);\n                modified = true;\n            }\n        }\n\n        // TODO: add support for class, see https://jira.xwiki.org/browse/XWIKI-12597\n\n        // TODO: add attachment content to the REST model ?\n\n        return modified;\n    }\n\n    private void fillObjectSummary(ObjectSummary objectSummary, Document doc, BaseObject xwikiObject,\n        Boolean withPrettyNames)\n    {\n        objectSummary.setId(String.format(\"%s:%s\", doc.getPrefixedFullName(), xwikiObject.getGuid()));\n        objectSummary.setGuid(xwikiObject.getGuid());\n        objectSummary.setPageId(doc.getPrefixedFullName());\n        objectSummary.setPageVersion(doc.getVersion());\n        objectSummary.setPageAuthor(doc.getAuthor());\n        if (withPrettyNames) {\n            XWikiContext xwikiContext = this.xcontextProvider.get();\n            objectSummary\n                .setPageAuthorName(xwikiContext.getWiki().getUserName(doc.getAuthor(), null, false, xwikiContext));\n        }\n        objectSummary.setWiki(doc.getWiki());\n        objectSummary.setSpace(doc.getSpace());\n        objectSummary.setPageName(doc.getDocumentReference().getName());\n        objectSummary.setClassName(xwikiObject.getClassName());\n        objectSummary.setNumber(xwikiObject.getNumber());\n\n        String[] propertyNames = xwikiObject.getPropertyNames();\n        if (propertyNames.length > 0) {\n            try {\n                String firstPropertyName = propertyNames[0];\n                BaseClass baseClass = xwikiObject.getXClass(this.xcontextProvider.get());\n                PropertyInterface field = baseClass.getField(firstPropertyName);\n                // The property might not exist in the class. But if it does, it will be a PropertyClass. \n                if (field != null) {\n                    String classType = ((com.xpn.xwiki.objects.classes.PropertyClass) field).getClassType();\n                    objectSummary.setHeadline(cleanupBeforeMakingPublic(classType, xwikiObject.get(firstPropertyName)));\n                } else {\n                    objectSummary.setHeadline(serializePropertyValue(xwikiObject.get(firstPropertyName)));\n                }\n            } catch (XWikiException e) {\n                // Should never happen\n            }\n        }\n    }\n\n    public ObjectSummary toRestObjectSummary(URI baseUri, Document doc, BaseObject xwikiObject, boolean useVersion,\n        Boolean withPrettyNames)\n    {\n        ObjectSummary objectSummary = objectFactory.createObjectSummary();\n        fillObjectSummary(objectSummary, doc, xwikiObject, withPrettyNames);\n\n        Link objectLink = getObjectLink(objectFactory, baseUri, doc, xwikiObject, useVersion, Relations.OBJECT);\n        objectSummary.getLinks().add(objectLink);\n\n        String propertiesUri;\n        if (useVersion) {\n            propertiesUri = Utils.createURI(baseUri, ObjectPropertiesAtPageVersionResource.class, doc.getWiki(),\n                Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(), doc.getVersion(),\n                xwikiObject.getClassName(), xwikiObject.getNumber()).toString();\n        } else {\n            propertiesUri = Utils.createURI(baseUri, ObjectPropertiesResource.class, doc.getWiki(),\n                Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(),\n                xwikiObject.getClassName(), xwikiObject.getNumber()).toString();\n        }\n\n        Link propertyLink = objectFactory.createLink();\n        propertyLink.setHref(propertiesUri);\n        propertyLink.setRel(Relations.PROPERTIES);\n        objectSummary.getLinks().add(propertyLink);\n\n        return objectSummary;\n    }\n\n    public void toObject(com.xpn.xwiki.api.Object xwikiObject, org.xwiki.rest.model.jaxb.Object restObject)\n    {\n        for (Property restProperty : restObject.getProperties()) {\n            xwikiObject.set(restProperty.getName(), restProperty.getValue());\n        }\n    }\n\n    public Object toRestObject(URI baseUri, Document doc, BaseObject xwikiObject, boolean useVersion,\n        Boolean withPrettyNames)\n    {\n        Object object = this.objectFactory.createObject();\n        fillObjectSummary(object, doc, xwikiObject, withPrettyNames);\n\n        XWikiContext xwikiContext = this.xcontextProvider.get();\n        BaseClass xwikiClass = xwikiObject.getXClass(xwikiContext);\n\n        for (java.lang.Object propertyClassObject : xwikiClass.getProperties()) {\n            com.xpn.xwiki.objects.classes.PropertyClass propertyClass =\n                (com.xpn.xwiki.objects.classes.PropertyClass) propertyClassObject;\n\n            Property property = this.objectFactory.createProperty();\n\n            for (java.lang.Object o : propertyClass.getProperties()) {\n                BaseProperty baseProperty = (BaseProperty) o;\n                Attribute attribute = this.objectFactory.createAttribute();\n                attribute.setName(baseProperty.getName());\n\n                /* Check for null values in order to prevent NPEs */\n                if (baseProperty.getValue() != null) {\n                    attribute.setValue(baseProperty.getValue().toString());\n                } else {\n                    attribute.setValue(\"\");\n                }\n\n                property.getAttributes().add(attribute);\n            }\n\n            if (propertyClass instanceof ListClass) {\n                ListClass listClass = (ListClass) propertyClass;\n\n                List allowedValueList = listClass.getList(xwikiContext);\n\n                if (!allowedValueList.isEmpty()) {\n                    Formatter f = new Formatter();\n                    for (int i = 0; i < allowedValueList.size(); i++) {\n                        if (i != allowedValueList.size() - 1) {\n                            f.format(\"%s,\", allowedValueList.get(i).toString());\n                        } else {\n                            f.format(\"%s\", allowedValueList.get(i).toString());\n                        }\n                    }\n\n                    Attribute attribute = this.objectFactory.createAttribute();\n                    attribute.setName(Constants.ALLOWED_VALUES_ATTRIBUTE_NAME);\n                    attribute.setValue(f.toString());\n                    property.getAttributes().add(attribute);\n                }\n            }\n\n            property.setName(propertyClass.getName());\n            property.setType(propertyClass.getClassType());\n            if (hasAccess(property)) {\n                try {\n                    property.setValue(\n                        serializePropertyValue(xwikiObject.get(propertyClass.getName()), propertyClass, xwikiContext));\n                } catch (XWikiException e) {\n                    // Should never happen\n                    logger.error(\"Unexpected exception when accessing property [{}]\", propertyClass.getName(), e);\n                }\n            }\n\n            String propertyUri;\n\n            if (useVersion) {\n                propertyUri = Utils\n                    .createURI(baseUri, ObjectPropertyAtPageVersionResource.class, doc.getWiki(),\n                        Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(),\n                        doc.getVersion(), xwikiObject.getClassName(), xwikiObject.getNumber(), propertyClass.getName())\n                    .toString();\n            } else {\n                propertyUri = Utils.createURI(baseUri, ObjectPropertyResource.class, doc.getWiki(),\n                    Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(),\n                    xwikiObject.getClassName(), xwikiObject.getNumber(), propertyClass.getName()).toString();\n            }\n            Link propertyLink = this.objectFactory.createLink();\n            propertyLink.setHref(propertyUri);\n            propertyLink.setRel(Relations.SELF);\n            property.getLinks().add(propertyLink);\n\n            object.getProperties().add(property);\n        }\n\n        Link objectLink = getObjectLink(this.objectFactory, baseUri, doc, xwikiObject, useVersion, Relations.SELF);\n        object.getLinks().add(objectLink);\n\n        return object;\n    }\n\n    private static Link getObjectLink(ObjectFactory objectFactory, URI baseUri, Document doc, BaseObject xwikiObject,\n        boolean useVersion, String relation)\n    {\n        String objectUri;\n\n        if (useVersion) {\n            objectUri = Utils.createURI(baseUri, ObjectAtPageVersionResource.class, doc.getWiki(),\n                Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName(), doc.getVersion(),\n                xwikiObject.getClassName(), xwikiObject.getNumber()).toString();\n        } else {\n            objectUri = Utils\n                .createURI(baseUri, ObjectResource.class, doc.getWiki(), Utils.getSpacesFromSpaceId(doc.getSpace()),\n                    doc.getDocumentReference().getName(), xwikiObject.getClassName(), xwikiObject.getNumber())\n                .toString();\n        }\n        Link objectLink = objectFactory.createLink();\n        objectLink.setHref(objectUri);\n        objectLink.setRel(relation);\n\n        return objectLink;\n    }\n\n    // To REST\n\n    public Wiki toRestWiki(URI baseUri, String wikiName)\n    {\n        Wiki wiki = this.objectFactory.createWiki().withId(wikiName).withName(wikiName);\n\n        String spacesUri = Utils.createURI(baseUri, SpacesResource.class, wikiName).toString();\n        Link spacesLink = this.objectFactory.createLink();\n        spacesLink.setHref(spacesUri);\n        spacesLink.setRel(Relations.SPACES);\n        wiki.getLinks().add(spacesLink);\n\n        String classesUri = Utils.createURI(baseUri, ClassesResource.class, wikiName).toString();\n        Link classesLink = this.objectFactory.createLink();\n        classesLink.setHref(classesUri);\n        classesLink.setRel(Relations.CLASSES);\n        wiki.getLinks().add(classesLink);\n\n        String modificationsUri = Utils.createURI(baseUri, ModificationsResource.class, wikiName).toString();\n        Link modificationsLink = this.objectFactory.createLink();\n        modificationsLink.setHref(modificationsUri);\n        modificationsLink.setRel(Relations.MODIFICATIONS);\n        wiki.getLinks().add(modificationsLink);\n\n        String searchUri = Utils.createURI(baseUri, WikiSearchResource.class, wikiName).toString();\n        Link searchLink = this.objectFactory.createLink();\n        searchLink.setHref(searchUri);\n        searchLink.setRel(Relations.SEARCH);\n        wiki.getLinks().add(searchLink);\n\n        String queryUri = Utils.createURI(baseUri, WikiSearchQueryResource.class, wikiName).toString();\n        Link queryLink = this.objectFactory.createLink();\n        queryLink.setHref(queryUri);\n        queryLink.setRel(Relations.QUERY);\n        wiki.getLinks().add(queryLink);\n\n        return wiki;\n    }\n\n    public Space toRestSpace(URI baseUri, String wikiName, List<String> spaces, Document home)\n    {\n        Space space = this.objectFactory.createSpace();\n        space.setId(Utils.getSpaceId(wikiName, spaces));\n        space.setWiki(wikiName);\n        // the name of the space is the last element of the spaces list\n        space.setName(spaces.get(spaces.size() - 1));\n        if (home != null) {\n            space.setHome(home.getPrefixedFullName());\n            space.setXwikiRelativeUrl(home.getURL(\"view\"));\n            space.setXwikiAbsoluteUrl(home.getExternalURL(\"view\"));\n        }\n\n        String pagesUri = Utils.createURI(baseUri, PagesResource.class, wikiName, spaces).toString();\n        Link pagesLink = this.objectFactory.createLink();\n        pagesLink.setHref(pagesUri);\n        pagesLink.setRel(Relations.PAGES);\n        space.getLinks().add(pagesLink);\n\n        if (home != null) {\n            String homeUri =\n                Utils.createURI(baseUri, PageResource.class, wikiName, spaces, home.getDocumentReference().getName())\n                    .toString();\n            Link homeLink = this.objectFactory.createLink();\n            homeLink.setHref(homeUri);\n            homeLink.setRel(Relations.HOME);\n            space.getLinks().add(homeLink);\n        }\n\n        String searchUri = Utils.createURI(baseUri, SpaceSearchResource.class, wikiName, spaces).toString();\n        Link searchLink = this.objectFactory.createLink();\n        searchLink.setHref(searchUri);\n        searchLink.setRel(Relations.SEARCH);\n        space.getLinks().add(searchLink);\n\n        return space;\n    }\n\n    public Translations toRestTranslations(URI baseUri, Document doc) throws XWikiException\n    {\n        Translations translations = this.objectFactory.createTranslations();\n        Locale defaultLocale = getDefaultLocale(doc);\n        translations.setDefault(defaultLocale.toString());\n\n        List<Locale> locales = doc.getTranslationLocales();\n\n        List<String> spaces = Utils.getSpacesFromSpaceId(doc.getSpace());\n\n        // Add the default (original) page translation, if it makes sense.\n        if (!locales.isEmpty() && !Locale.ROOT.equals(defaultLocale)) {\n            Translation translation = this.objectFactory.createTranslation();\n            translation.setLanguage(translations.getDefault());\n\n            String pageTranslationUri = Utils\n                .createURI(baseUri, PageResource.class, doc.getWiki(), spaces, doc.getDocumentReference().getName())\n                .toString();\n            Link pageTranslationLink = this.objectFactory.createLink();\n            pageTranslationLink.setHref(pageTranslationUri);\n            pageTranslationLink.setRel(Relations.PAGE);\n            translation.getLinks().add(pageTranslationLink);\n\n            String historyUri = Utils.createURI(baseUri, PageHistoryResource.class, doc.getWiki(), spaces,\n                doc.getDocumentReference().getName()).toString();\n            Link historyLink = this.objectFactory.createLink();\n            historyLink.setHref(historyUri);\n            historyLink.setRel(Relations.HISTORY);\n            translation.getLinks().add(historyLink);\n\n            translations.getTranslations().add(translation);\n        }\n\n        for (Locale locale : locales) {\n            Translation translation = this.objectFactory.createTranslation();\n            translation.setLanguage(locale.toString());\n\n            String pageTranslationUri = Utils.createURI(baseUri, PageTranslationResource.class, doc.getWiki(), spaces,\n                doc.getDocumentReference().getName(), locale).toString();\n            Link pageTranslationLink = this.objectFactory.createLink();\n            pageTranslationLink.setHref(pageTranslationUri);\n            pageTranslationLink.setRel(Relations.PAGE);\n            translation.getLinks().add(pageTranslationLink);\n\n            String historyUri = Utils.createURI(baseUri, PageTranslationHistoryResource.class, doc.getWiki(), spaces,\n                doc.getDocumentReference().getName(), locale).toString();\n            Link historyLink = this.objectFactory.createLink();\n            historyLink.setHref(historyUri);\n            historyLink.setRel(Relations.HISTORY);\n            translation.getLinks().add(historyLink);\n\n            translations.getTranslations().add(translation);\n        }\n\n        return translations;\n    }\n\n    private Locale getDefaultLocale(Document document)\n    {\n        if (document.isTranslation()) {\n            // The default locale field is not always set on document translations:\n            //\n            // * it is empty for translation pages created by the user because the save action doesn't set it and the\n            // edit form doesn't include this field;\n            // * it may be set for translation pages that are part of an XWiki extension because the XAR Maven plugin\n            // used to build the extension has a rule to enforce it;\n            //\n            // So we should take the default locale from the original document.\n            try {\n                XWikiContext xcontext = this.xcontextProvider.get();\n                return xcontext.getWiki().getDocument(document.getDocumentReference(), xcontext).getRealLocale();\n            } catch (XWikiException e) {\n                this.logger.warn(\"Failed to get the default locale from [{}]. Root cause is [{}].\",\n                    document.getDocumentReference(), getRootCauseMessage(e));\n                // Fall-back on the default locale specified on the translation page, which may not be accurate.\n                return document.getDefaultLocale();\n            }\n        } else {\n            return document.getRealLocale();\n        }\n    }\n\n    /**\n     * This method is used to fill the \"common part\" of a Page and a PageSummary.\n     */\n    private void toRestPageSummary(PageSummary pageSummary, URI baseUri, Document doc, boolean useVersion,\n        Boolean withPrettyNames) throws XWikiException\n    {\n        XWikiContext xwikiContext = this.xcontextProvider.get();\n\n        pageSummary.setWiki(doc.getWiki());\n        pageSummary.setFullName(doc.getFullName());\n        pageSummary.setId(doc.getPrefixedFullName());\n        pageSummary.setSpace(doc.getSpace());\n        pageSummary.setName(doc.getDocumentReference().getName());\n        pageSummary.setTitle(doc.getDisplayTitle());\n        pageSummary.setRawTitle(doc.getTitle());\n        pageSummary.setXwikiRelativeUrl(doc.getURL(\"view\"));\n        pageSummary.setXwikiAbsoluteUrl(doc.getExternalURL(\"view\"));\n        pageSummary.setTranslations(toRestTranslations(baseUri, doc));\n        pageSummary.setSyntax(doc.getSyntax().toIdString());\n        pageSummary.setVersion(doc.getVersion());\n        pageSummary.setAuthor(doc.getAuthor());\n        if (withPrettyNames) {\n            pageSummary.setAuthorName(xwikiContext.getWiki().getUserName(doc.getAuthor(), null, false, xwikiContext));\n        }\n\n        pageSummary.setParent(doc.getParent());\n        DocumentReference parentReference = doc.getParentReference();\n        boolean parentExist = parentReference != null && xwikiContext.getWiki().exists(parentReference, xwikiContext);\n        // parentId must not be set if the parent document does not exist.\n        if (parentExist) {\n            pageSummary.setParentId(this.serializer.serialize(parentReference));\n        } else {\n            pageSummary.setParentId(\"\");\n        }\n\n        List<String> spaces = Utils.getSpacesFromSpaceId(doc.getSpace());\n        String spaceUri = Utils.createURI(baseUri, SpaceResource.class, doc.getWiki(), spaces).toString();\n        Link spaceLink = this.objectFactory.createLink();\n        spaceLink.setHref(spaceUri);\n        spaceLink.setRel(Relations.SPACE);\n        pageSummary.getLinks().add(spaceLink);\n\n        if (parentExist) {\n            String parentUri = Utils.createURI(baseUri, PageResource.class,\n                parentReference.getWikiReference().getName(), spaces, parentReference.getName()).toString();\n            Link parentLink = this.objectFactory.createLink();\n            parentLink.setHref(parentUri);\n            parentLink.setRel(Relations.PARENT);\n            pageSummary.getLinks().add(parentLink);\n        }\n\n        String historyUri = Utils.createURI(baseUri, PageHistoryResource.class, doc.getWiki(),\n            Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName()).toString();\n        Link historyLink = this.objectFactory.createLink();\n        historyLink.setHref(historyUri);\n        historyLink.setRel(Relations.HISTORY);\n        pageSummary.getLinks().add(historyLink);\n\n        if (!doc.getChildren().isEmpty()) {\n            String pageChildrenUri = Utils.createURI(baseUri, PageChildrenResource.class, doc.getWiki(), spaces,\n                doc.getDocumentReference().getName()).toString();\n            Link pageChildrenLink = this.objectFactory.createLink();\n            pageChildrenLink.setHref(pageChildrenUri);\n            pageChildrenLink.setRel(Relations.CHILDREN);\n            pageSummary.getLinks().add(pageChildrenLink);\n        }\n\n        if (!doc.getComments().isEmpty()) {\n            String commentsUri;\n            if (useVersion) {\n                commentsUri = Utils.createURI(baseUri, CommentsVersionResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName(), doc.getVersion()).toString();\n            } else {\n                commentsUri = Utils.createURI(baseUri, CommentsResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName()).toString();\n            }\n\n            Link commentsLink = this.objectFactory.createLink();\n            commentsLink.setHref(commentsUri);\n            commentsLink.setRel(Relations.COMMENTS);\n            pageSummary.getLinks().add(commentsLink);\n        }\n\n        if (!doc.getAttachmentList().isEmpty()) {\n            String attachmentsUri;\n            if (useVersion) {\n                attachmentsUri = Utils.createURI(baseUri, AttachmentsAtPageVersionResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName(), doc.getVersion()).toString();\n            } else {\n                attachmentsUri = Utils.createURI(baseUri, AttachmentsResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName()).toString();\n            }\n\n            Link attachmentsLink = this.objectFactory.createLink();\n            attachmentsLink.setHref(attachmentsUri);\n            attachmentsLink.setRel(Relations.ATTACHMENTS);\n            pageSummary.getLinks().add(attachmentsLink);\n        }\n\n        if (!doc.getxWikiObjects().keySet().isEmpty()) {\n            String objectsUri;\n\n            if (useVersion) {\n                objectsUri = Utils.createURI(baseUri, ObjectsAtPageVersionResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName(), doc.getVersion()).toString();\n            } else {\n                objectsUri = Utils.createURI(baseUri, ObjectsResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName()).toString();\n            }\n            Link objectsLink = this.objectFactory.createLink();\n            objectsLink.setHref(objectsUri);\n            objectsLink.setRel(Relations.OBJECTS);\n            pageSummary.getLinks().add(objectsLink);\n        }\n\n        com.xpn.xwiki.api.Object tagsObject = doc.getObject(\"XWiki.TagClass\", 0);\n        if (tagsObject != null) {\n            if (tagsObject.getProperty(\"tags\") != null) {\n                String tagsUri = Utils.createURI(baseUri, PageTagsResource.class, doc.getWiki(), spaces,\n                    doc.getDocumentReference().getName()).toString();\n                Link tagsLink = this.objectFactory.createLink();\n                tagsLink.setHref(tagsUri);\n                tagsLink.setRel(Relations.TAGS);\n                pageSummary.getLinks().add(tagsLink);\n            }\n        }\n\n        String syntaxesUri = Utils.createURI(baseUri, SyntaxesResource.class).toString();\n        Link syntaxesLink = this.objectFactory.createLink();\n        syntaxesLink.setHref(syntaxesUri);\n        syntaxesLink.setRel(Relations.SYNTAXES);\n        pageSummary.getLinks().add(syntaxesLink);\n    }\n\n    public PageSummary toRestPageSummary(URI baseUri, Document doc, Boolean withPrettyNames) throws XWikiException\n    {\n        PageSummary pageSummary = this.objectFactory.createPageSummary();\n        toRestPageSummary(pageSummary, baseUri, doc, false, withPrettyNames);\n\n        String pageUri = Utils.createURI(baseUri, PageResource.class, doc.getWiki(),\n            Utils.getSpacesFromSpaceId(doc.getSpace()), doc.getDocumentReference().getName()).toString();\n        Link pageLink = this.objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        pageSummary.getLinks().add(pageLink);\n\n        return pageSummary;\n    }\n\n    public Page toRestPage(URI baseUri, URI self, Document doc, boolean useVersion, Boolean withPrettyNames,\n        Boolean withObjects, Boolean withXClass, Boolean withAttachments) throws XWikiException\n    {\n        Page page = this.objectFactory.createPage();\n        toRestPageSummary(page, baseUri, doc, useVersion, withPrettyNames);\n\n        XWikiContext xwikiContext = this.xcontextProvider.get();\n\n        page.setMajorVersion(doc.getRCSVersion().at(0));\n        page.setMinorVersion(doc.getRCSVersion().at(1));\n        page.setHidden(doc.isHidden());\n        page.setLanguage(doc.getLocale().toString());\n        page.setCreator(doc.getCreator());\n        if (withPrettyNames) {\n            page.setCreatorName(xwikiContext.getWiki().getUserName(doc.getCreator(), null, false, xwikiContext));\n        }\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(doc.getCreationDate());\n        page.setCreated(calendar);\n\n        page.setModifier(doc.getContentAuthor());\n        if (withPrettyNames) {\n            page.setModifierName(xwikiContext.getWiki().getUserName(doc.getContentAuthor(), null, false, xwikiContext));\n        }\n\n        String originalAuthor = this.userReferenceSerializer.serialize(doc.getAuthors().getOriginalMetadataAuthor());\n        page.setOriginalMetadataAuthor(originalAuthor);\n        if (withPrettyNames) {\n            page.setOriginalMetadataAuthorName(\n                xwikiContext.getWiki().getUserName(originalAuthor, null, false, xwikiContext));\n        }\n\n\n        calendar = Calendar.getInstance();\n        calendar.setTime(doc.getContentUpdateDate());\n        page.setModified(calendar);\n\n        page.setComment(doc.getComment());\n        page.setContent(doc.getContent());\n        page.setHierarchy(toRestHierarchy(doc.getDocumentReference(), withPrettyNames));\n\n        if (self != null) {\n            Link pageLink = this.objectFactory.createLink();\n            pageLink.setHref(self.toString());\n            pageLink.setRel(Relations.SELF);\n            page.getLinks().add(pageLink);\n        }\n\n        com.xpn.xwiki.api.Class xwikiClass = doc.getxWikiClass();\n        if (xwikiClass != null) {\n            String classUri =\n                Utils.createURI(baseUri, ClassResource.class, doc.getWiki(), xwikiClass.getName()).toString();\n            Link classLink = this.objectFactory.createLink();\n            classLink.setHref(classUri);\n            classLink.setRel(Relations.CLASS);\n            page.getLinks().add(classLink);\n        }\n\n        XWikiContext xcontext = xcontextProvider.get();\n\n        // Add attachments\n        if (withAttachments) {\n            page.setAttachments(objectFactory.createAttachments());\n\n            for (com.xpn.xwiki.api.Attachment attachment : doc.getAttachmentList()) {\n                URL url = xcontext.getURLFactory().createAttachmentURL(attachment.getFilename(), doc.getSpace(),\n                    doc.getDocumentReference().getName(), \"download\", null, doc.getWiki(), xcontext);\n                String attachmentXWikiAbsoluteUrl = url.toString();\n                String attachmentXWikiRelativeUrl = xcontext.getURLFactory().getURL(url, xcontext);\n\n                page.getAttachments().getAttachments().add(toRestAttachment(baseUri, attachment,\n                    attachmentXWikiRelativeUrl, attachmentXWikiAbsoluteUrl, withPrettyNames, false));\n            }\n        }\n\n        // Add objects\n        if (withObjects) {\n            page.setObjects(objectFactory.createObjects());\n\n            XWikiDocument xwikiDocument = xcontext.getWiki().getDocument(doc.getDocumentReference(), xcontext);\n\n            for (List<BaseObject> objects : xwikiDocument.getXObjects().values()) {\n                for (BaseObject object : objects) {\n                    // Deleting an object leads to a null entry in the list of objects.\n                    if (object != null) {\n                        page.getObjects().getObjectSummaries()\n                            .add(toRestObject(baseUri, doc, object, false, withPrettyNames));\n                    }\n                }\n            }\n        }\n\n        // Add xclass\n        if (withXClass) {\n            page.setClazz(toRestClass(baseUri, doc.getxWikiClass()));\n        }\n\n        return page;\n    }\n\n    public Class toRestClass(URI baseUri, com.xpn.xwiki.api.Class xwikiClass)\n    {\n        Class clazz = this.objectFactory.createClass();\n        clazz.setId(xwikiClass.getName());\n        clazz.setName(xwikiClass.getName());\n\n        DocumentReference reference = xwikiClass.getReference();\n        String wikiName = reference.getWikiReference().getName();\n\n        for (java.lang.Object xwikiPropertyClassObject : xwikiClass.getProperties()) {\n            PropertyClass xwikiPropertyClass = (PropertyClass) xwikiPropertyClassObject;\n\n            Property property = this.objectFactory.createProperty();\n            property.setName(xwikiPropertyClass.getName());\n            property.setType(xwikiPropertyClass.getxWikiClass().getName());\n\n            for (java.lang.Object xwikiPropertyObject : xwikiPropertyClass.getProperties()) {\n                com.xpn.xwiki.api.Property xwikiProperty = (com.xpn.xwiki.api.Property) xwikiPropertyObject;\n                java.lang.Object value = xwikiProperty.getValue();\n\n                Attribute attribute = this.objectFactory.createAttribute();\n                attribute.setName(xwikiProperty.getName());\n\n                if (value != null) {\n                    attribute.setValue(value.toString());\n                } else {\n                    attribute.setValue(\"\");\n                }\n\n                property.getAttributes().add(attribute);\n            }\n\n            String propertyUri = Utils.createURI(baseUri, ClassPropertyResource.class, wikiName, xwikiClass.getName(),\n                xwikiPropertyClass.getName()).toString();\n            Link propertyLink = this.objectFactory.createLink();\n            propertyLink.setHref(propertyUri);\n            propertyLink.setRel(Relations.SELF);\n            property.getLinks().add(propertyLink);\n\n            clazz.getProperties().add(property);\n        }\n\n        String classUri = Utils.createURI(baseUri, ClassResource.class, wikiName, xwikiClass.getName()).toString();\n        Link classLink = this.objectFactory.createLink();\n        classLink.setHref(classUri);\n        classLink.setRel(Relations.SELF);\n        clazz.getLinks().add(classLink);\n\n        String propertiesUri =\n            Utils.createURI(baseUri, ClassPropertiesResource.class, wikiName, xwikiClass.getName()).toString();\n        Link propertyLink = this.objectFactory.createLink();\n        propertyLink.setHref(propertiesUri);\n        propertyLink.setRel(Relations.PROPERTIES);\n        clazz.getLinks().add(propertyLink);\n\n        String objectsUri =\n            Utils.createURI(baseUri, AllObjectsForClassNameResource.class, wikiName, xwikiClass.getName()).toString();\n        Link objectsLink = this.objectFactory.createLink();\n        objectsLink.setHref(objectsUri);\n        objectsLink.setRel(Relations.OBJECTS);\n        clazz.getLinks().add(objectsLink);\n\n        return clazz;\n    }\n\n    public Attachment toRestAttachment(URI baseUri, com.xpn.xwiki.api.Attachment xwikiAttachment,\n        Boolean withPrettyNames, boolean versionURL)\n    {\n        XWikiContext xcontext = this.xcontextProvider.get();\n        String relativeURL = xcontext.getWiki().getURL(xwikiAttachment.getReference(), xcontext);\n        String absoluteURL = xcontext.getWiki().getExternalAttachmentURL(xwikiAttachment.getDocument().getFullName(),\n            xwikiAttachment.getFilename(), xcontext);\n        return toRestAttachment(baseUri, xwikiAttachment, relativeURL, absoluteURL, withPrettyNames, versionURL);\n    }\n\n    public Attachment toRestAttachment(URI baseUri, com.xpn.xwiki.api.Attachment xwikiAttachment,\n        String xwikiRelativeUrl, String xwikiAbsoluteUrl, Boolean withPrettyNames, boolean versionURL)\n    {\n        Attachment attachment = this.objectFactory.createAttachment();\n\n        DocumentReference documentReference = xwikiAttachment.getReference().getDocumentReference();\n        attachment.setPageId(this.defaultEntityReferenceSerializer.serialize(documentReference));\n        attachment.setPageVersion(xwikiAttachment.getDocument().getVersion());\n\n        attachment.setId(this.defaultEntityReferenceSerializer.serialize(xwikiAttachment.getReference()));\n        attachment.setName(xwikiAttachment.getFilename());\n        attachment.setLongSize(xwikiAttachment.getLongSize());\n        attachment.setSize((int) xwikiAttachment.getLongSize());\n        attachment.setVersion(xwikiAttachment.getVersion());\n        attachment.setMimeType(xwikiAttachment.getMimeType());\n        attachment.setAuthor(xwikiAttachment.getAuthor());\n        if (withPrettyNames) {\n            XWikiContext xcontext = this.xcontextProvider.get();\n            attachment\n                .setAuthorName(xcontext.getWiki().getUserName(xwikiAttachment.getAuthor(), null, false, xcontext));\n        }\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(xwikiAttachment.getDate());\n        attachment.setDate(calendar);\n\n        attachment.setXwikiRelativeUrl(xwikiRelativeUrl);\n        attachment.setXwikiAbsoluteUrl(xwikiAbsoluteUrl);\n        attachment.setHierarchy(toRestHierarchy(xwikiAttachment.getReference(), withPrettyNames));\n\n        String wiki = documentReference.getWikiReference().getName();\n        List<String> spaces = Utils.getSpacesHierarchy(documentReference.getLastSpaceReference());\n\n        String pageUri =\n            Utils.createURI(baseUri, PageResource.class, wiki, spaces, documentReference.getName()).toString();\n        Link pageLink = this.objectFactory.createLink();\n        pageLink.setHref(pageUri);\n        pageLink.setRel(Relations.PAGE);\n        attachment.getLinks().add(pageLink);\n\n        String attachmentUri;\n        if (versionURL) {\n            attachmentUri = Utils.createURI(baseUri, AttachmentVersionResource.class, wiki, spaces,\n                documentReference.getName(), xwikiAttachment.getFilename(), xwikiAttachment.getVersion()).toString();\n        } else {\n            attachmentUri = Utils.createURI(baseUri, AttachmentResource.class, wiki, spaces,\n                documentReference.getName(), xwikiAttachment.getFilename()).toString();\n        }\n\n        Link attachmentLink = this.objectFactory.createLink();\n        attachmentLink.setHref(attachmentUri);\n        attachmentLink.setRel(Relations.ATTACHMENT_DATA);\n        attachment.getLinks().add(attachmentLink);\n\n        Link attachmentMetadataLink = this.objectFactory.createLink();\n        attachmentMetadataLink.setHref(Utils.createURI(baseUri, AttachmentMetadataResource.class, wiki, spaces,\n            documentReference.getName(), xwikiAttachment.getFilename()).toString());\n        attachmentMetadataLink.setRel(Relations.ATTACHMENT_METADATA);\n        attachment.getLinks().add(attachmentMetadataLink);\n\n        return attachment;\n    }\n\n    public Hierarchy toRestHierarchy(EntityReference targetEntityReference, Boolean withPrettyNames)\n    {\n        XWikiContext xcontext = this.xcontextProvider.get();\n        XWiki xwiki = xcontext.getWiki();\n        Hierarchy hierarchy = new Hierarchy();\n        for (EntityReference entityReference : targetEntityReference.getReversedReferenceChain()) {\n            HierarchyItem hierarchyItem = new HierarchyItem();\n            hierarchyItem.setName(entityReference.getName());\n            hierarchyItem.setLabel(entityReference.getName());\n            hierarchyItem.setType(entityReference.getType().getLowerCase());\n            hierarchyItem.setUrl(xwiki.getURL(entityReference, xcontext));\n            if (withPrettyNames) {\n                try {\n                    if (entityReference.getType() == EntityType.SPACE\n                        || entityReference.getType() == EntityType.DOCUMENT) {\n                        XWikiDocument document =\n                            xwiki.getDocument(entityReference, xcontext).getTranslatedDocument(xcontext);\n                        hierarchyItem.setLabel(document.getRenderedTitle(Syntax.PLAIN_1_0, xcontext));\n                        hierarchyItem.setUrl(xwiki.getURL(document.getDocumentReferenceWithLocale(), xcontext));\n                    } else if (entityReference.getType() == EntityType.WIKI) {\n                        WikiDescriptor wikiDescriptor = this.wikiDescriptorManager.getById(entityReference.getName());\n                        if (wikiDescriptor != null) {\n                            hierarchyItem.setLabel(wikiDescriptor.getPrettyName());\n                        }\n                    }\n                } catch (Exception e) {\n                    this.logger.warn(\n                        \"Failed to get the pretty name of entity [{}]. Continue using the entity name. Root cause is [{}].\",\n                        entityReference, getRootCauseMessage(e));\n                }\n            }\n            hierarchy.withItems(hierarchyItem);\n        }\n        return hierarchy;\n    }\n\n    /**\n     * Serializes the value of the given XObject property. {@link ComputedFieldClass} properties are not evaluated.\n     *\n     * @param property an XObject property\n     * @return the String representation of the property value\n     */\n    private static String serializePropertyValue(PropertyInterface property)\n    {\n        if (property == null) {\n            return \"\";\n        }\n\n        java.lang.Object value = ((BaseProperty) property).getValue();\n        if (value instanceof List) {\n            return StringUtils.join((List) value, \"|\");\n        } else if (value != null) {\n            return value.toString();\n        } else {\n            return \"\";\n        }\n    }\n\n    /**\n     * Serializes the value of the given XObject property. In case the property is an instance of\n     * {@link ComputedFieldClass}, the serialized value is the computed property value.\n     * \n     * @param property an XObject property\n     * @param propertyClass the PropertyClass of that XObject proprety\n     * @param context the XWikiContext\n     * @return the String representation of the property value\n     */\n    private String serializePropertyValue(PropertyInterface property,\n        com.xpn.xwiki.objects.classes.PropertyClass propertyClass, XWikiContext context)\n    {\n        if (propertyClass instanceof ComputedFieldClass) {\n            // TODO: the XWikiDocument needs to be explicitely set in the context, otherwise method\n            // PropertyClass.renderInContext fires a null pointer exception: bug?\n            XWikiDocument document = context.getDoc();\n            try {\n                context.setDoc(property.getObject().getOwnerDocument());\n                ComputedFieldClass computedFieldClass = (ComputedFieldClass) propertyClass;\n                return computedFieldClass.getComputedValue(propertyClass.getName(), \"\", property.getObject(), context);\n            } catch (Exception e) {\n                logger.error(\"Error while computing property value [{}] of [{}]\", propertyClass.getName(),\n                    property.getObject(), e);\n                return serializePropertyValue(property);\n            } finally {\n                // Reset the context document to its original value, even if an exception is raised.\n                context.setDoc(document);\n            }\n        } else {\n            return cleanupBeforeMakingPublic(propertyClass.getClassType(), property);\n        }\n    }\n\n    public JobRequest toRestJobRequest(Request request) throws XWikiRestException\n    {\n        JobRequest restJobRequest = this.objectFactory.createJobRequest();\n\n        restJobRequest.setId(toRestJobId(request.getId()));\n        restJobRequest.setInteractive(request.isInteractive());\n        restJobRequest.setRemote(request.isRemote());\n        restJobRequest.setVerbose(request.isVerbose());\n        restJobRequest.setStatusSerialized(request.isStatusSerialized());\n        restJobRequest.setStatusLogIsolated(request.isStatusLogIsolated());\n\n        for (String key : request.getPropertyNames()) {\n            restJobRequest.getProperties().add(toRestMapEntry(key, request.getProperty(key)));\n        }\n\n        return restJobRequest;\n    }\n\n    public JobId toRestJobId(List<String> id)\n    {\n        if (id == null) {\n            return null;\n        }\n\n        JobId restJobId = this.objectFactory.createJobId();\n\n        restJobId.withElements(id);\n\n        return restJobId;\n    }\n\n    public MapEntry toRestMapEntry(String key, java.lang.Object value) throws XWikiRestException\n    {\n        MapEntry restMapEntry = this.objectFactory.createMapEntry();\n\n        restMapEntry.setKey(key);\n        try {\n            restMapEntry.setValue(this.jaxbConverter.serializeAny(value));\n        } catch (ParserConfigurationException e) {\n            throw new XWikiRestException(\"Failed to serialize property [\" + key + \"] with value [\" + value + \"]\", e);\n        }\n\n        return restMapEntry;\n    }\n\n    public DefaultRequest toJobRequest(JobRequest restJobRequest)\n    {\n        DefaultRequest request = new DefaultRequest();\n\n        if (restJobRequest.getId() != null) {\n            request.setId(restJobRequest.getId().getElements());\n        }\n\n        request.setInteractive(restJobRequest.isInteractive());\n        request.setVerbose(restJobRequest.isVerbose());\n        request.setStatusSerialized(restJobRequest.isStatusSerialized());\n        request.setStatusLogIsolated(restJobRequest.isStatusLogIsolated());\n\n        for (MapEntry restEntry : restJobRequest.getProperties()) {\n            request.setProperty(restEntry.getKey(), this.jaxbConverter.unserializeAny(restEntry.getValue()));\n        }\n\n        return request;\n    }\n\n    public JobStatus toRestJobStatus(org.xwiki.job.event.status.JobStatus jobStatus, URI self, boolean request,\n        boolean progress, boolean log, String logFromLevel) throws XWikiRestException\n    {\n        JobStatus status = this.objectFactory.createJobStatus();\n        status.setId(StringUtils.join(jobStatus.getRequest().getId(), \"/\"));\n        status.setState(jobStatus.getState().name());\n        if (jobStatus.getStartDate() != null) {\n            Calendar calendarStartDate = Calendar.getInstance();\n            calendarStartDate.setTime(jobStatus.getStartDate());\n            status.setStartDate(calendarStartDate);\n        }\n        if (jobStatus.getEndDate() != null) {\n            Calendar calendarEndDate = Calendar.getInstance();\n            calendarEndDate.setTime(jobStatus.getEndDate());\n            status.setEndDate(calendarEndDate);\n        }\n        if (jobStatus.getError() != null) {\n            status.setErrorMessage(ExceptionUtils.getStackTrace(jobStatus.getError()));\n        }\n\n        // Request\n        if (request) {\n            status.setRequest(toRestJobRequest(jobStatus.getRequest()));\n        }\n\n        // Progress\n        if (progress) {\n            status.setProgress(toRestJobProgress(jobStatus.getProgress()));\n        }\n\n        // Log\n        if (log) {\n            try {\n                status.setLog(toRestJobLog(jobStatus.getLogTail(), self, null, logFromLevel));\n            } catch (IOException e) {\n                this.logger.error(\"Failed to access the log of job {}\", jobStatus.getRequest().getId(), e);\n            }\n        }\n\n        // Link\n        if (self != null) {\n            Link link = objectFactory.createLink();\n            link.setHref(self.toString());\n            link.setRel(Relations.SELF);\n            status.getLinks().add(link);\n        }\n\n        // Log isolation\n        status.setIsolated(jobStatus.isIsolated());\n        // Status serialization\n        status.setSerialized(jobStatus.isSerialized());\n\n        return status;\n    }\n\n    public JobProgress toRestJobProgress(org.xwiki.job.event.status.JobProgress progress)\n    {\n        JobProgress restJobProgress = this.objectFactory.createJobProgress();\n\n        restJobProgress.setOffset(progress.getOffset());\n        restJobProgress.setCurrentLevelOffset(progress.getCurrentLevelOffset());\n\n        // TODO: add support for steps\n\n        return restJobProgress;\n    }\n\n    public JobLog toRestJobLog(LogTail logQueue, URI self, String level, String fromLevel) throws IOException\n    {\n        // Filter log\n        Iterable<LogEvent> logs;\n        if (level != null) {\n            LogLevel logLevel = LogLevel.valueOf(level.toUpperCase());\n            logs = logQueue.getLogEvents(logLevel).stream().filter(log -> log.getLevel() == logLevel)\n                .collect(Collectors.toList());\n        } else if (fromLevel != null) {\n            logs = logQueue.getLogEvents(LogLevel.valueOf(fromLevel.toUpperCase()));\n        } else {\n            logs = logQueue;\n        }\n\n        return toRestJobLog(logs, self);\n    }\n\n    public JobLog toRestJobLog(Iterable<LogEvent> logs, URI self)\n    {\n        JobLog log = this.objectFactory.createJobLog();\n\n        // Serialize log\n        for (LogEvent logEvent : logs) {\n            // TODO: add support for log arguments\n            // TODO: add support for log Marker\n            org.xwiki.rest.model.jaxb.LogEvent event = this.objectFactory.createLogEvent();\n            event.setLevel(logEvent.getLevel().name());\n            Calendar calendarDate = Calendar.getInstance();\n            calendarDate.setTimeInMillis(logEvent.getTimeStamp());\n            event.setDate(calendarDate);\n            event.setFormattedMessage(logEvent.getFormattedMessage());\n            log.getLogEvents().add(event);\n        }\n\n        // Set link\n        if (self != null) {\n            Link link = this.objectFactory.createLink();\n            link.setHref(self.toString());\n            link.setRel(Relations.SELF);\n            log.getLinks().add(link);\n        }\n\n        return log;\n    }\n\n    /**\n     * Check if the given property should be exposed via REST.\n     * \n     * @param restProperty the property to be read/written\n     * @return true if the property is considered accessible\n     */\n    private boolean hasAccess(Property restProperty)\n    {\n        if (PASSWORD_TYPE.equals(restProperty.getType())) {\n            return authorizationManagerProvider.get().hasAccess(Right.ADMIN, xcontextProvider.get().getWikiReference());\n        }\n\n        return true;\n    }\n\n    private String cleanupBeforeMakingPublic(String type, PropertyInterface baseProperty)\n    {\n        String cleanedUpStringValue;\n        if (Objects.equals(type, PASSWORD_TYPE)) {\n            cleanedUpStringValue = null;\n        } else {\n            cleanedUpStringValue = serializePropertyValue(baseProperty);\n            // We obfuscate the email only if the obfuscation has been activated, and if the current user does not have \n            // the right to edit the document containing the base property.\n            // A user allowed to edit a document has to view the unescaped email to be able to edit it correctly. \n            if (Objects.equals(type, \"Email\") && this.generalMailConfiguration.shouldObfuscate()\n                && !this.authorizationManagerProvider.get().hasAccess(Right.EDIT, baseProperty.getReference()))\n            {\n                try {\n                    cleanedUpStringValue =\n                        this.emailAddressObfuscator.obfuscate(InternetAddress.parse(cleanedUpStringValue)[0]);\n                } catch (AddressException e) {\n                    this.logger.warn(\"Failed to parse [{}] to an email address. Cause: [{}]\", cleanedUpStringValue,\n                        getRootCauseMessage(e));\n                    cleanedUpStringValue = \"\";\n                }\n            }\n        }\n        return cleanedUpStringValue;\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rest.internal;\n\nimport java.net.URI;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Vector;\nimport java.util.stream.Stream;\n\nimport javax.mail.internet.InternetAddress;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.RegisterExtension;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.mockito.Mock;\nimport org.xwiki.mail.EmailAddressObfuscator;\nimport org.xwiki.mail.GeneralMailConfiguration;\nimport org.xwiki.model.reference.AttachmentReference;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.ObjectReference;\nimport org.xwiki.model.reference.SpaceReference;\nimport org.xwiki.model.reference.SpaceReferenceResolver;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.rest.model.jaxb.Attachment;\nimport org.xwiki.rest.model.jaxb.Hierarchy;\nimport org.xwiki.rest.model.jaxb.HierarchyItem;\nimport org.xwiki.rest.model.jaxb.Object;\nimport org.xwiki.rest.model.jaxb.PageSummary;\nimport org.xwiki.rest.model.jaxb.Property;\nimport org.xwiki.rest.model.jaxb.Translations;\nimport org.xwiki.security.authorization.ContextualAuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.LogLevel;\nimport org.xwiki.test.junit5.LogCaptureExtension;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.wiki.descriptor.WikiDescriptor;\nimport org.xwiki.wiki.descriptor.WikiDescriptorManager;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.api.Document;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseCollection;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.StringProperty;\nimport com.xpn.xwiki.objects.classes.BaseClass;\nimport com.xpn.xwiki.objects.classes.EmailClass;\nimport com.xpn.xwiki.objects.classes.PasswordClass;\nimport com.xpn.xwiki.objects.classes.StringClass;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n\nimport ch.qos.logback.classic.Level;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n@OldcoreTest\nclass ModelFactoryTest\n{\n    private static final String TEST_STRING_FIELD = \"textValue\";\n\n    private static final String TEST_STRING_VALUE = \"abcd\";\n\n    private static final String TEST_PASSWORD_FIELD = \"passwordValue\";\n\n    private static final String TEST_PASSWORD_VALUE = \"secret\";\n\n    @RegisterExtension\n    private LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n\n    @MockComponent\n    private ContextualAuthorizationManager authorizationManager;\n\n    @MockComponent\n    private SpaceReferenceResolver<String> resolver;\n\n    @MockComponent\n    private WikiDescriptorManager wikiDescriptorManager;\n\n    @MockComponent\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;\n\n    @MockComponent\n    private GeneralMailConfiguration generalMailConfiguration;\n\n    @MockComponent\n    private EmailAddressObfuscator emailAddressObfuscator;\n\n    @InjectMockComponents\n    private ModelFactory modelFactory;\n\n    @InjectMockitoOldcore\n    private MockitoOldcore oldCore;\n\n    private XWikiContext xcontext;\n\n    @Mock\n    private XWiki xwiki;\n\n    private URI baseURI;\n\n    @Mock\n    private Document testDocument;\n\n    @Mock\n    private XWikiDocument testXWikiDocument;\n\n    @BeforeEach\n    void mockUpTestDocument() throws Exception\n    {\n        baseURI = new URI(\"https://localhost/\");\n        DocumentReference documentReference = new DocumentReference(\"wiki\", Arrays.asList(\"Path\", \"To\"), \"Page\");\n        when(testDocument.getPrefixedFullName()).thenReturn(\"wiki:Path.To.Page\");\n        when(testDocument.getWiki()).thenReturn(\"wiki\");\n        when(testDocument.getSpace()).thenReturn(\"Path.To\");\n        when(testDocument.getName()).thenReturn(\"Page\");\n        when(testDocument.getDocumentReference()).thenReturn(documentReference);\n\n        this.xcontext = this.oldCore.getXWikiContext();\n        this.xcontext.setWikiReference(documentReference.getWikiReference());\n        this.xcontext.setWiki(this.xwiki);\n        when(this.xwiki.getDocument(documentReference, this.xcontext)).thenReturn(this.testXWikiDocument);\n    }\n\n    /**\n     * A separate set up only for tests which needs an object.\n     * \n     * @return the object for test, prefilled witha few values\n     */\n    private BaseObject setUpTestObject() throws Exception\n    {\n        BaseObject xwikiObject = mock(BaseObject.class);\n        BaseClass xwikiClass = mock(BaseClass.class);\n\n        when(xwikiObject.getPropertyNames()).thenReturn(new String[] {});\n        when(xwikiObject.getXClass(xcontext)).thenReturn(xwikiClass);\n        when(xwikiObject.getClassName()).thenReturn(\"Some.XClass\");\n        when(xwikiObject.getNumber()).thenReturn(0);\n\n        StringClass stringField = new StringClass();\n        stringField.setName(TEST_STRING_FIELD);\n        StringProperty textElement = new StringProperty();\n        textElement.setName(TEST_STRING_FIELD);\n        textElement.setClassType(\"String\");\n        textElement.setValue(TEST_STRING_VALUE);\n        when(xwikiObject.get(TEST_STRING_FIELD)).thenReturn(textElement);\n\n        PasswordClass pwField = new PasswordClass();\n        pwField.setName(TEST_PASSWORD_FIELD);\n        StringProperty pwElement = new StringProperty();\n        pwElement.setName(TEST_PASSWORD_FIELD);\n        pwElement.setClassType(\"Password\");\n        pwElement.setValue(TEST_PASSWORD_VALUE);\n        when(xwikiObject.get(TEST_PASSWORD_FIELD)).thenReturn(pwElement);\n\n        when(xwikiClass.getProperties()).thenReturn(new java.lang.Object[] {stringField, pwField});\n\n        return xwikiObject;\n    }\n\n    @Test\n    void toRestObjectCheckWhichObjectValuesAreAvailableForNonAdmins() throws Exception\n    {\n        when(authorizationManager.hasAccess(Right.ADMIN, new WikiReference(\"wiki\"))).thenReturn(false);\n\n        BaseObject xwikiObject = setUpTestObject();\n\n        Object result = modelFactory.toRestObject(baseURI, testDocument, xwikiObject, false, false);\n\n        Map<String, String> expectedValues = new HashMap<>();\n        expectedValues.put(TEST_STRING_FIELD, TEST_STRING_VALUE);\n        expectedValues.put(TEST_PASSWORD_FIELD, null);\n        assertExpectedPropertyValues(result.getProperties(), expectedValues);\n    }\n\n    @Test\n    void toRestObjectCheckWhichObjectValuesAreAvailableForAdmins() throws Exception\n    {\n        when(authorizationManager.hasAccess(Right.ADMIN, new WikiReference(\"wiki\"))).thenReturn(true);\n\n        BaseObject xwikiObject = setUpTestObject();\n\n        Object result = modelFactory.toRestObject(baseURI, testDocument, xwikiObject, false, false);\n\n        Map<String, String> expectedValues = new HashMap<>();\n        expectedValues.put(TEST_STRING_FIELD, TEST_STRING_VALUE);\n        expectedValues.put(TEST_PASSWORD_FIELD, null);\n        assertExpectedPropertyValues(result.getProperties(), expectedValues);\n    }\n\n    public static Stream<Arguments> toRestObjectWithObfuscatedMailSource()\n    {\n        return Stream.of(\n            // no mail obfuscation\n            Arguments.of(false, true, \"user@domain.tld\", \"user@domain.tld\", null),\n            // mail obfuscation activated but the current user has edit rights\n            Arguments.of(true, true, \"user@domain.tld\", \"user@domain.tld\", null),\n            // mail obfuscation activated and the current user does not have edit rights \n            Arguments.of(true, false, \"user@domain.tld\", \"u...@domain.tld\", null),\n            // mail obfuscation activated, the current user does not have edit rights and the mail is badly formatted\n            Arguments.of(true, false, \"wrong@\", \"\",\n                \"Failed to parse [wrong@] to an email address. Cause: [AddressException: Missing domain]\")\n        );\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"toRestObjectWithObfuscatedMailSource\")\n    void toRestObjectWithObfuscatedMail(boolean shouldObfuscate, boolean hasEditRight, String inputMail,\n        String expectedEmail, String expectedWarning) throws Exception\n    {\n        ObjectReference objectReference = mock(ObjectReference.class);\n        when(this.generalMailConfiguration.shouldObfuscate()).thenReturn(shouldObfuscate);\n        when(this.authorizationManager.hasAccess(Right.EDIT, objectReference)).thenReturn(hasEditRight);\n        when(this.emailAddressObfuscator.obfuscate(any(InternetAddress.class))).thenReturn(expectedEmail);\n\n        BaseObject xwikiObject = mock(BaseObject.class);\n        BaseClass xwikiClass = mock(BaseClass.class);\n\n        when(xwikiObject.getPropertyNames()).thenReturn(new String[] {});\n        when(xwikiObject.getXClass(this.xcontext)).thenReturn(xwikiClass);\n        when(xwikiObject.getClassName()).thenReturn(\"Some.XClass\");\n        when(xwikiObject.getNumber()).thenReturn(0);\n\n        EmailClass emailField = new EmailClass();\n        emailField.setName(\"emailValue\");\n        StringProperty emailElement = new StringProperty();\n        emailElement.setName(\"emailValue\");\n        emailElement.setClassType(\"Password\");\n        emailElement.setValue(inputMail);\n        BaseCollection baseCollection = mock(BaseCollection.class);\n        when(baseCollection.getReference()).thenReturn(objectReference);\n        emailElement.setObject(baseCollection);\n        when(xwikiObject.get(\"emailValue\")).thenReturn(emailElement);\n\n        when(xwikiClass.getProperties()).thenReturn(new java.lang.Object[] { emailField });\n\n        Object result = this.modelFactory.toRestObject(this.baseURI, this.testDocument, xwikiObject, false, false);\n\n        assertExpectedPropertyValues(result.getProperties(), Map.of(\"emailValue\", expectedEmail));\n\n        if (expectedWarning != null) {\n            assertEquals(expectedWarning, this.logCapture.getMessage(0));\n            assertEquals(Level.WARN, this.logCapture.getLogEvent(0).getLevel());\n        }\n    }\n\n    @Test\n    void toRestObjectWithObfuscatedMailInHeader() throws Exception\n    {\n        ObjectReference objectReference = mock(ObjectReference.class);\n        when(this.generalMailConfiguration.shouldObfuscate()).thenReturn(true);\n        when(this.authorizationManager.hasAccess(Right.EDIT, objectReference)).thenReturn(false);\n        when(this.emailAddressObfuscator.obfuscate(any(InternetAddress.class))).thenReturn(\"u...@domain.tld\");\n\n        BaseObject xwikiObject = mock(BaseObject.class);\n        BaseClass xwikiClass = mock(BaseClass.class);\n\n        when(xwikiObject.getPropertyNames()).thenReturn(new String[] {});\n        when(xwikiObject.getXClass(this.xcontext)).thenReturn(xwikiClass);\n        when(xwikiObject.getClassName()).thenReturn(\"Some.XClass\");\n        when(xwikiObject.getNumber()).thenReturn(0);\n\n        EmailClass emailField = new EmailClass();\n        emailField.setName(\"emailValue\");\n        StringProperty emailElement = new StringProperty();\n        emailElement.setName(\"emailValue\");\n        emailElement.setClassType(\"Password\");\n        emailElement.setValue(\"user@domain.tld\");\n        BaseCollection baseCollection = mock(BaseCollection.class);\n        when(baseCollection.getReference()).thenReturn(objectReference);\n        emailElement.setObject(baseCollection);\n        when(xwikiObject.get(\"emailValue\")).thenReturn(emailElement);\n\n        when(xwikiClass.getProperties()).thenReturn(new java.lang.Object[] { emailField });\n        when(xwikiObject.getPropertyNames()).thenReturn(new String[] { \"emailValue\" });\n\n        Object result = this.modelFactory.toRestObject(this.baseURI, this.testDocument, xwikiObject, false, false);\n\n        assertExpectedPropertyValues(result.getProperties(), Map.of(\"emailValue\", \"u...@domain.tld\"));\n    }\n\n    private void assertExpectedPropertyValues(List<Property> properties, Map<String, String> expectedValues)\n    {\n        Set<String> propertiesFound = new HashSet<>();\n        for (Property prop : properties) {\n            String expectedValue = expectedValues.get(prop.getName());\n            assertEquals(expectedValue, prop.getValue(),\n                String.format(\"unexpected value for property name [%s]\", prop.getName()));\n            propertiesFound.add(prop.getName());\n        }\n        Set<String> missingProperties = new HashSet<>(expectedValues.keySet());\n        missingProperties.removeAll(propertiesFound);\n\n        assertTrue(missingProperties.isEmpty(), String.format(\"missing properties %s in result\", missingProperties));\n    }\n\n    @Test\n    void toRestHierarchyFromSpaceWithoutPrettyNames()\n    {\n        SpaceReference spaceReference = new SpaceReference(\"dev\", \"API\");\n        when(this.xwiki.getURL(spaceReference.getParent(), this.xcontext)).thenReturn(\"wiki URL\");\n        when(this.xwiki.getURL(spaceReference, this.xcontext)).thenReturn(\"space URL\");\n\n        Hierarchy hierarchy = this.modelFactory.toRestHierarchy(spaceReference, false);\n\n        assertEquals(2, hierarchy.getItems().size());\n\n        HierarchyItem item = hierarchy.getItems().get(0);\n        assertEquals(item.getLabel(), item.getName());\n        assertEquals(\"dev\", item.getName());\n        assertEquals(\"wiki\", item.getType());\n        assertEquals(\"wiki URL\", item.getUrl());\n\n        item = hierarchy.getItems().get(1);\n        assertEquals(item.getLabel(), item.getName());\n        assertEquals(\"API\", item.getName());\n        assertEquals(\"space\", item.getType());\n        assertEquals(\"space URL\", item.getUrl());\n    }\n\n    @Test\n    void toRestHierarchyFromDocumentWithPrettyNames() throws Exception\n    {\n        DocumentReference documentReference = new DocumentReference(\"dev\", \"API\", \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class, \"en\");\n        when(this.xwiki.getDocument((EntityReference) documentReference, this.xcontext)).thenReturn(document);\n        when(this.xwiki.getDocument(documentReference.getParent(), this.xcontext)).thenReturn(document);\n\n        XWikiDocument translatedDocument = mock(XWikiDocument.class, \"fr\");\n        when(document.getTranslatedDocument(this.xcontext)).thenReturn(translatedDocument);\n        when(translatedDocument.getRenderedTitle(Syntax.PLAIN_1_0, this.xcontext)).thenReturn(\"API Title\");\n\n        DocumentReference documentReferenceWithLocale = new DocumentReference(documentReference, Locale.FRENCH);\n        when(translatedDocument.getDocumentReferenceWithLocale()).thenReturn(documentReferenceWithLocale);\n        when(this.xwiki.getURL(documentReferenceWithLocale, this.xcontext)).thenReturn(\"tdoc URL\");\n\n        WikiDescriptor wikiDescriptor = new WikiDescriptor(\"dev\", \"dev\");\n        wikiDescriptor.setPrettyName(\"Development Wiki\");\n        when(this.wikiDescriptorManager.getById(\"dev\")).thenReturn(wikiDescriptor);\n\n        Hierarchy hierarchy = this.modelFactory.toRestHierarchy(documentReference, true);\n\n        assertEquals(3, hierarchy.getItems().size());\n\n        HierarchyItem item = hierarchy.getItems().get(0);\n        assertEquals(\"Development Wiki\", item.getLabel());\n\n        item = hierarchy.getItems().get(1);\n        assertEquals(\"API Title\", item.getLabel());\n        assertEquals(\"tdoc URL\", item.getUrl());\n\n        item = hierarchy.getItems().get(2);\n        assertEquals(\"API Title\", item.getLabel());\n        assertEquals(\"tdoc URL\", item.getUrl());\n    }\n\n    @Test\n    void toRestAttachment()\n    {\n        com.xpn.xwiki.api.Attachment xwikiAttachment = mock(com.xpn.xwiki.api.Attachment.class);\n        when(xwikiAttachment.getLongSize()).thenReturn(123L);\n        when(xwikiAttachment.getVersion()).thenReturn(\"2.1\");\n        when(xwikiAttachment.getMimeType()).thenReturn(\"image/png\");\n        when(xwikiAttachment.getAuthor()).thenReturn(\"XWiki.Admin\");\n        when(xwikiAttachment.getDate()).thenReturn(new Date(1559347200000L));\n\n        AttachmentReference attachmentReference =\n            new AttachmentReference(\"logo.png\", new DocumentReference(\"test\", \"Space\", \"Page\"));\n        when(xwikiAttachment.getReference()).thenReturn(attachmentReference);\n        when(xwikiAttachment.getFilename()).thenReturn(attachmentReference.getName());\n\n        Document document = mock(Document.class);\n        when(xwikiAttachment.getDocument()).thenReturn(document);\n        when(document.getFullName()).thenReturn(\"Space.Page\");\n        when(document.getVersion()).thenReturn(\"5.2\");\n\n        when(this.xwiki.getURL(attachmentReference, this.xcontext)).thenReturn(\"attachment URL\");\n        when(this.xwiki.getExternalAttachmentURL(\"Space.Page\", \"logo.png\", this.xcontext))\n            .thenReturn(\"attachment external URL\");\n\n        when(this.defaultEntityReferenceSerializer.serialize(attachmentReference.getParent()))\n            .thenReturn(\"test:Space.Page\");\n        when(this.defaultEntityReferenceSerializer.serialize(attachmentReference))\n            .thenReturn(\"test:Space.Page@logo.png\");\n\n        Attachment restAttachment = this.modelFactory.toRestAttachment(this.baseURI, xwikiAttachment, false, false);\n\n        assertEquals(xwikiAttachment.getAuthor(), restAttachment.getAuthor());\n        assertEquals(xwikiAttachment.getDate(), restAttachment.getDate().getTime());\n        assertEquals(4, restAttachment.getHierarchy().getItems().size());\n        assertEquals(\"test:Space.Page@logo.png\", restAttachment.getId());\n        assertEquals(3, restAttachment.getLinks().size());\n        assertEquals(xwikiAttachment.getLongSize(), restAttachment.getLongSize());\n        assertEquals(xwikiAttachment.getMimeType(), restAttachment.getMimeType());\n        assertEquals(xwikiAttachment.getFilename(), restAttachment.getName());\n        assertEquals(\"test:Space.Page\", restAttachment.getPageId());\n        assertEquals(document.getVersion(), restAttachment.getPageVersion());\n        assertEquals(123, restAttachment.getSize());\n        assertEquals(xwikiAttachment.getVersion(), restAttachment.getVersion());\n        assertEquals(\"attachment external URL\", restAttachment.getXwikiAbsoluteUrl());\n        assertEquals(\"attachment URL\", restAttachment.getXwikiRelativeUrl());\n    }\n\n    @Test\n    void toRestTranslations() throws XWikiException\n    {\n        when(this.testDocument.getRealLocale()).thenReturn(Locale.FRENCH);\n        when(this.testDocument.getTranslationLocales()).thenReturn(Arrays.asList(Locale.ENGLISH, Locale.GERMAN));\n\n        Translations translations = this.modelFactory.toRestTranslations(this.baseURI, this.testDocument);\n\n        assertEquals(\"fr\", translations.getDefault());\n        // We include the default (original) translation.\n        assertEquals(3, translations.getTranslations().size());\n        assertEquals(\"fr\", translations.getTranslations().get(0).getLanguage());\n        assertEquals(\"en\", translations.getTranslations().get(1).getLanguage());\n        assertEquals(\"de\", translations.getTranslations().get(2).getLanguage());\n    }\n\n    @Test\n    void toRestTranslationsWhenNoTranslation() throws XWikiException\n    {\n        when(this.testDocument.isTranslation()).thenReturn(true);\n        when(this.testDocument.getDefaultLocale()).thenReturn(Locale.ROOT);\n        when(this.testXWikiDocument.getRealLocale()).thenReturn(new Locale(\"foo\", \"bar\", \"test\"));\n\n        Translations translations = this.modelFactory.toRestTranslations(this.baseURI, this.testDocument);\n\n        assertEquals(\"foo_BAR_test\", translations.getDefault());\n        assertTrue(translations.getTranslations().isEmpty());\n    }\n\n    @Test\n    void toRestTranslationsForRootLocale() throws XWikiException\n    {\n        when(this.testDocument.getRealLocale()).thenReturn(Locale.ROOT);\n\n        Translations translations = this.modelFactory.toRestTranslations(this.baseURI, this.testDocument);\n\n        assertEquals(\"\", translations.getDefault());\n        assertTrue(translations.getTranslations().isEmpty());\n    }\n\n    @Test\n    void toRestTranslationsFailsToLoadDefaultLocale() throws XWikiException\n    {\n        when(this.testDocument.isTranslation()).thenReturn(true);\n        when(this.xwiki.getDocument(this.testDocument.getDocumentReference(), this.xcontext))\n            .thenThrow(new XWikiException(0, 0, \"test\"));\n        when(this.testDocument.getDefaultLocale()).thenReturn(Locale.CANADA_FRENCH);\n\n        Translations translations = this.modelFactory.toRestTranslations(this.baseURI, this.testDocument);\n\n        assertEquals(\"Failed to get the default locale from [wiki:Path.To.Page]. \"\n            + \"Root cause is [XWikiException: Error number 0 in 0: test].\", this.logCapture.getMessage(0));\n        assertEquals(\"fr_CA\", translations.getDefault());\n        assertTrue(translations.getTranslations().isEmpty());\n    }\n\n    @Test\n    void toRestPageSummary() throws Exception\n    {\n        when(this.testDocument.getTitle()).thenReturn(\"Some > title\");\n        when(this.testDocument.getDisplayTitle()).thenReturn(\"Some &gt; title\");\n        when(this.testDocument.getRealLocale()).thenReturn(Locale.ITALIAN);\n        when(this.testDocument.getSyntax()).thenReturn(Syntax.XWIKI_2_1);\n        when(this.testDocument.getComments()).thenReturn(new Vector<>());\n\n        PageSummary pageSummary = this.modelFactory.toRestPageSummary(this.baseURI, this.testDocument, true);\n\n        assertEquals(this.testDocument.getDisplayTitle(), pageSummary.getTitle());\n        assertEquals(this.testDocument.getTitle(), pageSummary.getRawTitle());\n    }\n}\n"], "filenames": ["xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-server/pom.xml", "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-server/src/main/java/org/xwiki/rest/internal/ModelFactory.java", "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-server/src/test/java/org/xwiki/rest/internal/ModelFactoryTest.java"], "buggy_code_start_loc": [180, 30, 31], "buggy_code_end_loc": [180, 1248, 210], "fixing_code_start_loc": [181, 31, 32], "fixing_code_end_loc": [186, 1297, 317], "type": "CWE-668", "message": "XWiki Platform is a generic wiki platform. Starting in version 7.3-milestone-1 and prior to versions 14.4.8, 14.10.6, and 15.1, ny user can call a REST endpoint and obtain the obfuscated passwords, even when the mail obfuscation is activated. The issue has been patched in XWiki 14.4.8, 14.10.6, and 15.1. There is no known workaround.", "other": {"cve": {"id": "CVE-2023-35151", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-23T17:15:09.457", "lastModified": "2023-06-30T07:28:34.187", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform. Starting in version 7.3-milestone-1 and prior to versions 14.4.8, 14.10.6, and 15.1, ny user can call a REST endpoint and obtain the obfuscated passwords, even when the mail obfuscation is activated. The issue has been patched in XWiki 14.4.8, 14.10.6, and 15.1. There is no known workaround."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-668"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-359"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.4", "versionEndExcluding": "14.4.8", "matchCriteriaId": "F15FA67A-285D-46DF-98F0-2FCE86D7AC66"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.10", "versionEndExcluding": "14.10.6", "matchCriteriaId": "F74638E1-2D3D-4FFD-921E-09C383F880DF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:7.3:milestone1:*:*:*:*:*:*", "matchCriteriaId": "4E11F6C8-8A49-4C44-B976-270ED12FA2E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "8F9D9551-B148-44B6-A5B3-889E6E7B72E8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "88E41345-F81E-401A-BD67-66AF4B3925D4"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/824cd742ecf5439971247da11bfe7e0ad2b10ede", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-8g9c-c9cm-9c56", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-16138", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/824cd742ecf5439971247da11bfe7e0ad2b10ede"}}