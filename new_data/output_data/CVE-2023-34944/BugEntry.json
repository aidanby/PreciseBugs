{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * FILE UPLOAD LIBRARY.\n *\n * This is the file upload library for Chamilo.\n * Include/require it in your code to use its functionality.\n *\n * @package chamilo.library\n *\n * @todo test and reorganise\n */\n\n/**\n * Changes the file name extension from .php to .phps\n * Useful for securing a site.\n *\n * @author Hugues Peeters <peeters@ipm.ucl.ac.be>\n *\n * @param string $file_name Name of a file\n *\n * @return string the filename phps'ized\n */\nfunction php2phps($file_name)\n{\n    return preg_replace('/\\.(phar.?|php.?|phtml.?)(\\.){0,1}.*$/i', '.phps', $file_name);\n}\n\n/**\n * Renames .htaccess & .HTACCESS to htaccess.txt.\n *\n * @param string $filename\n *\n * @return string\n */\nfunction htaccess2txt($filename)\n{\n    return str_replace(['.htaccess', '.HTACCESS'], ['htaccess.txt', 'htaccess.txt'], $filename);\n}\n\n/**\n * This function executes our safety precautions\n * more functions can be added.\n *\n * @param string $filename\n *\n * @return string\n *\n * @see php2phps()\n * @see htaccess2txt()\n */\nfunction disable_dangerous_file($filename)\n{\n    return htaccess2txt(php2phps($filename));\n}\n\n/**\n * Returns the name without extension, used for the title.\n *\n * @param string $name\n *\n * @return name without the extension\n */\nfunction get_document_title($name)\n{\n    // If they upload .htaccess...\n    $name = disable_dangerous_file($name);\n    $ext = substr(strrchr($name, '.'), 0);\n\n    if (empty($ext)) {\n        return substr($name, 0, strlen($name));\n    }\n\n    return substr($name, 0, strlen($name) - strlen(strstr($name, $ext)));\n}\n\n/**\n * This function checks if the upload succeeded.\n *\n * @param array $uploaded_file ($_FILES)\n *\n * @return true if upload succeeded\n */\nfunction process_uploaded_file($uploaded_file, $show_output = true)\n{\n    // Checking the error code sent with the file upload.\n    if (isset($uploaded_file['error'])) {\n        switch ($uploaded_file['error']) {\n            case 1:\n                // The uploaded file exceeds the upload_max_filesize directive in php.ini.\n                if ($show_output) {\n                    Display::addFlash(\n                        Display::return_message(\n                            get_lang('UplExceedMaxServerUpload').ini_get('upload_max_filesize'),\n                            'error'\n                        )\n                    );\n                }\n\n                return false;\n            case 2:\n                // The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.\n                // Not used at the moment, but could be handy if we want to limit the size of an upload\n                // (e.g. image upload in html editor).\n                $max_file_size = (int) $_POST['MAX_FILE_SIZE'];\n                if ($show_output) {\n                    Display::addFlash(\n                        Display::return_message(\n                            get_lang('UplExceedMaxPostSize').format_file_size($max_file_size),\n                            'error'\n                        )\n                    );\n                }\n\n                return false;\n            case 3:\n                // The uploaded file was only partially uploaded.\n                if ($show_output) {\n                    Display::addFlash(\n                        Display::return_message(\n                            get_lang('UplPartialUpload').' '.get_lang('PleaseTryAgain'),\n                            'error'\n                        )\n                    );\n                }\n\n                return false;\n            case 4:\n                // No file was uploaded.\n                if ($show_output) {\n                    Display::addFlash(\n                        Display::return_message(\n                            get_lang('UplNoFileUploaded').' '.get_lang('UplSelectFileFirst'),\n                            'error'\n                        )\n                    );\n                }\n\n                return false;\n        }\n    }\n\n    if (!file_exists($uploaded_file['tmp_name'])) {\n        // No file was uploaded.\n        if ($show_output) {\n            Display::addFlash(Display::return_message(get_lang('UplUploadFailed'), 'error'));\n        }\n\n        return false;\n    }\n\n    if (file_exists($uploaded_file['tmp_name'])) {\n        $filesize = filesize($uploaded_file['tmp_name']);\n        if (empty($filesize)) {\n            // No file was uploaded.\n            if ($show_output) {\n                Display::addFlash(\n                    Display::return_message(\n                        get_lang('UplUploadFailedSizeIsZero'),\n                        'error'\n                    )\n                );\n            }\n\n            return false;\n        }\n    }\n\n    $course_id = api_get_course_id();\n\n    //Checking course quota if we are in a course\n    if (!empty($course_id)) {\n        $max_filled_space = DocumentManager::get_course_quota();\n        // Check if there is enough space to save the file\n        if (!DocumentManager::enough_space($uploaded_file['size'], $max_filled_space)) {\n            if ($show_output) {\n                Display::addFlash(\n                    Display::return_message(\n                        get_lang('UplNotEnoughSpace'),\n                        'error'\n                    )\n                );\n            }\n\n            return false;\n        }\n    }\n\n    // case 0: default: We assume there is no error, the file uploaded with success.\n    return true;\n}\n\n/**\n * This function does the save-work for the documents.\n * It handles the uploaded file and adds the properties to the database\n * If unzip=1 and the file is a zipfile, it is extracted\n * If we decide to save ALL kinds of documents in one database,\n * we could extend this with a $type='document', 'scormdocument',...\n *\n * @param array  $courseInfo\n * @param array  $uploadedFile            ($_FILES)\n *                                        array(\n *                                        'name' => 'picture.jpg',\n *                                        'tmp_name' => '...', // absolute path\n *                                        );\n * @param string $documentDir             Example: /var/www/chamilo/courses/ABC/document\n * @param string $uploadPath              Example: /folder1/folder2/\n * @param int    $userId\n * @param int    $groupId                 group.id\n * @param int    $toUserId                User ID, or NULL for everybody\n * @param int    $unzip                   1/0\n * @param string $whatIfFileExists        overwrite, rename or warn if exists (default)\n * @param bool   $output                  optional output parameter\n * @param bool   $onlyUploadFile\n * @param string $comment\n * @param int    $sessionId\n * @param bool   $treat_spaces_as_hyphens\n *\n * So far only use for unzip_uploaded_document function.\n * If no output wanted on success, set to false.\n *\n * @return string path of the saved file\n */\nfunction handle_uploaded_document(\n    $courseInfo,\n    $uploadedFile,\n    $documentDir,\n    $uploadPath,\n    $userId,\n    $groupId = 0,\n    $toUserId = null,\n    $unzip = 0,\n    $whatIfFileExists = '',\n    $output = true,\n    $onlyUploadFile = false,\n    $comment = null,\n    $sessionId = null,\n    $treat_spaces_as_hyphens = true\n) {\n    if (empty($uploadedFile) || empty($userId) || empty($courseInfo) || empty($documentDir) || empty($uploadPath)) {\n        return false;\n    }\n\n    $userInfo = api_get_user_info();\n    $uploadedFile['name'] = stripslashes($uploadedFile['name']);\n    // Add extension to files without one (if possible)\n    $uploadedFile['name'] = add_ext_on_mime($uploadedFile['name'], $uploadedFile['type']);\n    $sessionId = (int) $sessionId;\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    }\n\n    $groupInfo = [];\n    if (!empty($groupId)) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n    }\n\n    // Just in case process_uploaded_file is not called\n    $maxSpace = DocumentManager::get_course_quota();\n    // Check if there is enough space to save the file\n    if (!DocumentManager::enough_space($uploadedFile['size'], $maxSpace)) {\n        if ($output) {\n            Display::addFlash(Display::return_message(get_lang('UplNotEnoughSpace'), 'error'));\n        }\n\n        return false;\n    }\n\n    if (!Security::check_abs_path($documentDir.$uploadPath, $documentDir.'/')) {\n        Display::addFlash(\n            Display::return_message(\n                get_lang('Forbidden'),\n                'error'\n            )\n        );\n\n        return false;\n    }\n\n    // If the want to unzip, check if the file has a .zip (or ZIP,Zip,ZiP,...) extension\n    if ($unzip == 1 && preg_match('/.zip$/', strtolower($uploadedFile['name']))) {\n        return unzip_uploaded_document(\n            $courseInfo,\n            $userInfo,\n            $uploadedFile,\n            $uploadPath,\n            $documentDir,\n            $maxSpace,\n            $sessionId,\n            $groupId,\n            $output,\n            $onlyUploadFile,\n            $whatIfFileExists\n        );\n    } elseif ($unzip == 1 && !preg_match('/.zip$/', strtolower($uploadedFile['name']))) {\n        // We can only unzip ZIP files (no gz, tar,...)\n        if ($output) {\n            Display::addFlash(\n                Display::return_message(get_lang('UplNotAZip').\" \".get_lang('PleaseTryAgain'), 'error')\n            );\n        }\n\n        return false;\n    } else {\n        // Clean up the name, only ASCII characters should stay. (and strict)\n        $cleanName = api_replace_dangerous_char($uploadedFile['name'], $treat_spaces_as_hyphens);\n\n        // No \"dangerous\" files\n        $cleanName = disable_dangerous_file($cleanName);\n\n        // Checking file extension\n        if (!filter_extension($cleanName)) {\n            if ($output) {\n                Display::addFlash(\n                    Display::return_message(get_lang('UplUnableToSaveFileFilteredExtension'), 'error')\n                );\n            }\n\n            return false;\n        } else {\n            // If the upload path differs from / (= root) it will need a slash at the end\n            if ($uploadPath !== '/') {\n                $uploadPath = $uploadPath.'/';\n            }\n\n            // Full path to where we want to store the file with trailing slash\n            $whereToSave = $documentDir.$uploadPath;\n\n            // At least if the directory doesn't exist, tell so\n            if (!is_dir($whereToSave)) {\n                if (!mkdir($whereToSave, api_get_permissions_for_new_directories())) {\n                    if ($output) {\n                        Display::addFlash(\n                            Display::return_message(\n                                get_lang('DestDirectoryDoesntExist').' ('.$uploadPath.')',\n                                'error'\n                            )\n                        );\n                    }\n\n                    return false;\n                }\n            }\n\n            // Just upload the file \"as is\"\n            if ($onlyUploadFile) {\n                $errorResult = moveUploadedFile($uploadedFile, $whereToSave.$cleanName);\n                if ($errorResult) {\n                    return $whereToSave.$cleanName;\n                } else {\n                    return $errorResult;\n                }\n            }\n\n            /*\n                Based in the clean name we generate a new filesystem name\n                Using the session_id and group_id if values are not empty\n            */\n            $fileSystemName = DocumentManager::fixDocumentName(\n                $cleanName,\n                'file',\n                $courseInfo,\n                $sessionId,\n                $groupId\n            );\n\n            // Name of the document without the extension (for the title)\n            $documentTitle = get_document_title($uploadedFile['name']);\n\n            // Size of the uploaded file (in bytes)\n            $fileSize = $uploadedFile['size'];\n\n            // File permissions\n            $filePermissions = api_get_permissions_for_new_files();\n\n            // Example: /var/www/chamilo/courses/xxx/document/folder/picture.jpg\n            $fullPath = $whereToSave.$fileSystemName;\n\n            // Example: /folder/picture.jpg\n            $filePath = $uploadPath.$fileSystemName;\n\n            $docId = DocumentManager::get_document_id(\n                $courseInfo,\n                $filePath,\n                $sessionId\n            );\n\n            // What to do if the target file exists\n            switch ($whatIfFileExists) {\n                // Overwrite the file if it exists\n                case 'overwrite':\n                    // Check if the target file exists, so we can give another message\n                    $fileExists = file_exists($fullPath);\n\n                    if (moveUploadedFile($uploadedFile, $fullPath)) {\n                        chmod($fullPath, $filePermissions);\n\n                        if ($fileExists && $docId) {\n                            // UPDATE DATABASE\n                            $documentId = DocumentManager::get_document_id(\n                                $courseInfo,\n                                $filePath\n                            );\n                            if (is_numeric($documentId)) {\n                                // Update file size\n                                update_existing_document(\n                                    $courseInfo,\n                                    $documentId,\n                                    $uploadedFile['size']\n                                );\n\n                                // Update document item_property\n                                api_item_property_update(\n                                    $courseInfo,\n                                    TOOL_DOCUMENT,\n                                    $documentId,\n                                    'DocumentUpdated',\n                                    $userId,\n                                    $groupInfo,\n                                    $toUserId,\n                                    null,\n                                    null,\n                                    $sessionId\n                                );\n\n                                // Redo visibility\n                                api_set_default_visibility(\n                                    $documentId,\n                                    TOOL_DOCUMENT,\n                                    null,\n                                    $courseInfo\n                                );\n                            } else {\n                                // There might be cases where the file exists on disk but there is no registration of\n                                // that in the database\n                                // In this case, and if we are in overwrite mode, overwrite and create the db record\n                                $documentId = add_document(\n                                    $courseInfo,\n                                    $filePath,\n                                    'file',\n                                    $fileSize,\n                                    $documentTitle,\n                                    $comment,\n                                    0,\n                                    true,\n                                    $groupId,\n                                    $sessionId\n                                );\n\n                                if ($documentId) {\n                                    // Put the document in item_property update\n                                    api_item_property_update(\n                                        $courseInfo,\n                                        TOOL_DOCUMENT,\n                                        $documentId,\n                                        'DocumentAdded',\n                                        $userId,\n                                        $groupInfo,\n                                        $toUserId,\n                                        null,\n                                        null,\n                                        $sessionId\n                                    );\n\n                                    // Redo visibility\n                                    api_set_default_visibility(\n                                        $documentId,\n                                        TOOL_DOCUMENT,\n                                        null,\n                                        $courseInfo\n                                    );\n                                }\n                            }\n\n                            // If the file is in a folder, we need to update all parent folders\n                            item_property_update_on_folder($courseInfo, $uploadPath, $userId);\n\n                            // Display success message with extra info to user\n                            if ($output) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('UplUploadSucceeded').'<br /> '.\n                                        $documentTitle.' '.get_lang('UplFileOverwritten'),\n                                        'confirmation',\n                                        false\n                                    )\n                                );\n                            }\n\n                            return $filePath;\n                        } else {\n                            // Put the document data in the database\n                            $documentId = add_document(\n                                $courseInfo,\n                                $filePath,\n                                'file',\n                                $fileSize,\n                                $documentTitle,\n                                $comment,\n                                0,\n                                true,\n                                $groupId,\n                                $sessionId\n                            );\n\n                            if ($documentId) {\n                                // Put the document in item_property update\n                                api_item_property_update(\n                                    $courseInfo,\n                                    TOOL_DOCUMENT,\n                                    $documentId,\n                                    'DocumentAdded',\n                                    $userId,\n                                    $groupInfo,\n                                    $toUserId,\n                                    null,\n                                    null,\n                                    $sessionId\n                                );\n\n                                // Redo visibility\n                                api_set_default_visibility($documentId, TOOL_DOCUMENT, null, $courseInfo);\n                            }\n\n                            // If the file is in a folder, we need to update all parent folders\n                            item_property_update_on_folder($courseInfo, $uploadPath, $userId);\n\n                            // Display success message to user\n                            if ($output) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('UplUploadSucceeded').'<br /> '.$documentTitle,\n                                        'confirmation',\n                                        false\n                                    )\n                                );\n                            }\n\n                            return $filePath;\n                        }\n                    } else {\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message(\n                                    get_lang('UplUnableToSaveFile'),\n                                    'error',\n                                    false\n                                )\n                            );\n                        }\n\n                        return false;\n                    }\n                    break;\n                case 'rename':\n                    // Rename the file if it exists\n                    // Always rename.\n                    $cleanName = DocumentManager::getUniqueFileName(\n                        $uploadPath,\n                        $cleanName,\n                        $courseInfo,\n                        $sessionId,\n                        $groupId\n                    );\n\n                    $fileSystemName = DocumentManager::fixDocumentName(\n                        $cleanName,\n                        'file',\n                        $courseInfo,\n                        $sessionId,\n                        $groupId\n                    );\n\n                    $documentTitle = disable_dangerous_file($cleanName);\n                    $fullPath = $whereToSave.$fileSystemName;\n                    $filePath = $uploadPath.$fileSystemName;\n\n                    if (moveUploadedFile($uploadedFile, $fullPath)) {\n                        chmod($fullPath, $filePermissions);\n                        // Put the document data in the database\n                        $documentId = add_document(\n                            $courseInfo,\n                            $filePath,\n                            'file',\n                            $fileSize,\n                            $documentTitle,\n                            $comment, // comment\n                            0, // read only\n                            true, // save visibility\n                            $groupId,\n                            $sessionId\n                        );\n\n                        if ($documentId) {\n                            // Update document item_property\n                            api_item_property_update(\n                                $courseInfo,\n                                TOOL_DOCUMENT,\n                                $documentId,\n                                'DocumentAdded',\n                                $userId,\n                                $groupInfo,\n                                $toUserId,\n                                null,\n                                null,\n                                $sessionId\n                            );\n\n                            // Redo visibility\n                            api_set_default_visibility($documentId, TOOL_DOCUMENT, null, $courseInfo);\n                        }\n\n                        // If the file is in a folder, we need to update all parent folders\n                        item_property_update_on_folder($courseInfo, $uploadPath, $userId);\n\n                        // Display success message to user\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message(\n                                    get_lang('UplUploadSucceeded').'<br />'.\n                                    get_lang('UplFileSavedAs').' '.$documentTitle,\n                                    'success',\n                                    false\n                                )\n                            );\n                        }\n\n                        return $filePath;\n                    } else {\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message(\n                                    get_lang('UplUnableToSaveFile'),\n                                    'error',\n                                    false\n                                )\n                            );\n                        }\n\n                        return false;\n                    }\n                    break;\n                case 'nothing':\n                    $fileExists = file_exists($fullPath);\n                    if ($fileExists) {\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message(\n                                    $uploadPath.$cleanName.' '.get_lang('UplAlreadyExists'),\n                                    'warning',\n                                    false\n                                )\n                            );\n                        }\n                        break;\n                    }\n                    // no break\n                default:\n                    // Only save the file if it doesn't exist or warn user if it does exist\n                    if (file_exists($fullPath) && $docId) {\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message($cleanName.' '.get_lang('UplAlreadyExists'), 'warning', false)\n                            );\n                        }\n                    } else {\n                        if (moveUploadedFile($uploadedFile, $fullPath)) {\n                            chmod($fullPath, $filePermissions);\n\n                            // Put the document data in the database\n                            $documentId = add_document(\n                                $courseInfo,\n                                $filePath,\n                                'file',\n                                $fileSize,\n                                $documentTitle,\n                                $comment,\n                                0,\n                                true,\n                                $groupId,\n                                $sessionId\n                            );\n\n                            if ($documentId) {\n                                // Update document item_property\n                                api_item_property_update(\n                                    $courseInfo,\n                                    TOOL_DOCUMENT,\n                                    $documentId,\n                                    'DocumentAdded',\n                                    $userId,\n                                    $groupInfo,\n                                    $toUserId,\n                                    null,\n                                    null,\n                                    $sessionId\n                                );\n                                // Redo visibility\n                                api_set_default_visibility($documentId, TOOL_DOCUMENT, null, $courseInfo);\n                            }\n\n                            // If the file is in a folder, we need to update all parent folders\n                            item_property_update_on_folder(\n                                $courseInfo,\n                                $uploadPath,\n                                $userId\n                            );\n\n                            // Display success message to user\n                            if ($output) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('UplUploadSucceeded').'<br /> '.$documentTitle,\n                                        'confirm',\n                                        false\n                                    )\n                                );\n                            }\n\n                            return $filePath;\n                        } else {\n                            if ($output) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('UplUnableToSaveFile'),\n                                        'error',\n                                        false\n                                    )\n                                );\n                            }\n\n                            return false;\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nfunction moveUploadedFile(array $file, string $storePath): bool\n{\n    $handleFromFile = isset($file['from_file']) && $file['from_file'];\n    $moveFile = isset($file['move_file']) && $file['move_file'];\n    $copyFile = isset($file['copy_file']) && $file['copy_file'];\n    if ($moveFile) {\n        $copied = copy($file['tmp_name'], $storePath);\n\n        if (!$copied) {\n            return false;\n        }\n    }\n\n    if ($copyFile) {\n        $copied = copy($file['tmp_name'], $storePath);\n        unlink($file['tmp_name']);\n\n        return $copied;\n    }\n\n    if ($handleFromFile) {\n        return file_exists($file['tmp_name']);\n    } else {\n        return move_uploaded_file($file['tmp_name'], $storePath);\n    }\n}\n\n/**\n * Checks if there is enough place to add a file on a directory\n * on the base of a maximum directory size allowed\n * deprecated: use enough_space instead!\n *\n * @author Hugues Peeters <peeters@ipm.ucl.ac.be>\n *\n * @param int    $file_size     Size of the file in byte\n * @param string $dir           Path of the directory where the file should be added\n * @param int    $max_dir_space Maximum size of the diretory in byte\n *\n * @return bool true if there is enough space, false otherwise\n *\n * @see enough_size() uses  dir_total_space() function\n */\nfunction enough_size($file_size, $dir, $max_dir_space)\n{\n    // If the directory is the archive directory, safely ignore the size limit\n    if (api_get_path(SYS_ARCHIVE_PATH) == $dir) {\n        return true;\n    }\n\n    if ($max_dir_space) {\n        $already_filled_space = dir_total_space($dir);\n        if (($file_size + $already_filled_space) > $max_dir_space) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Computes the size already occupied by a directory and is subdirectories.\n *\n * @author Hugues Peeters <peeters@ipm.ucl.ac.be>\n *\n * @param string $dir_path Size of the file in byte\n *\n * @return int Return the directory size in bytes\n */\nfunction dir_total_space($dir_path)\n{\n    $save_dir = getcwd();\n    chdir($dir_path);\n    $handle = opendir($dir_path);\n    $sumSize = 0;\n    $dirList = [];\n    while ($element = readdir($handle)) {\n        if ($element == '.' || $element == '..') {\n            continue; // Skip the current and parent directories\n        }\n        if (is_file($element)) {\n            $sumSize += filesize($element);\n        }\n        if (is_dir($element)) {\n            $dirList[] = $dir_path.'/'.$element;\n        }\n    }\n\n    closedir($handle);\n\n    if (sizeof($dirList) > 0) {\n        foreach ($dirList as $j) {\n            $sizeDir = dir_total_space($j); // Recursivity\n            $sumSize += $sizeDir;\n        }\n    }\n    chdir($save_dir); // Return to initial position\n\n    return $sumSize;\n}\n\n/**\n * Tries to add an extension to files without extension\n * Some applications on Macintosh computers don't add an extension to the files.\n * This subroutine try to fix this on the basis of the MIME type sent\n * by the browser.\n *\n * Note : some browsers don't send the MIME Type (e.g. Netscape 4).\n *        We don't have solution for this kind of situation\n *\n * @author Hugues Peeters <peeters@ipm.ucl.ac.be>\n * @author Bert Vanderkimpen\n *\n * @param string $file_name Name of the file\n * @param string $file_type Type of the file\n *\n * @return string File name\n */\nfunction add_ext_on_mime($file_name, $file_type)\n{\n    // Check whether the file has an extension AND whether the browser has sent a MIME Type\n\n    if (!preg_match('/^.*\\.[a-zA-Z_0-9]+$/', $file_name) && $file_type) {\n        // Build a \"MIME-types / extensions\" connection table\n        static $mime_type = [];\n\n        $mime_type[] = 'application/msword';\n        $extension[] = '.doc';\n        $mime_type[] = 'application/rtf';\n        $extension[] = '.rtf';\n        $mime_type[] = 'application/vnd.ms-powerpoint';\n        $extension[] = '.ppt';\n        $mime_type[] = 'application/vnd.ms-excel';\n        $extension[] = '.xls';\n        $mime_type[] = 'application/pdf';\n        $extension[] = '.pdf';\n        $mime_type[] = 'application/postscript';\n        $extension[] = '.ps';\n        $mime_type[] = 'application/mac-binhex40';\n        $extension[] = '.hqx';\n        $mime_type[] = 'application/x-gzip';\n        $extension[] = 'tar.gz';\n        $mime_type[] = 'application/x-shockwave-flash';\n        $extension[] = '.swf';\n        $mime_type[] = 'application/x-stuffit';\n        $extension[] = '.sit';\n        $mime_type[] = 'application/x-tar';\n        $extension[] = '.tar';\n        $mime_type[] = 'application/zip';\n        $extension[] = '.zip';\n        $mime_type[] = 'application/x-tar';\n        $extension[] = '.tar';\n        $mime_type[] = 'text/html';\n        $extension[] = '.html';\n        $mime_type[] = 'text/plain';\n        $extension[] = '.txt';\n        $mime_type[] = 'text/rtf';\n        $extension[] = '.rtf';\n        $mime_type[] = 'img/gif';\n        $extension[] = '.gif';\n        $mime_type[] = 'img/jpeg';\n        $extension[] = '.jpg';\n        $mime_type[] = 'img/png';\n        $extension[] = '.png';\n        $mime_type[] = 'audio/midi';\n        $extension[] = '.mid';\n        $mime_type[] = 'audio/mpeg';\n        $extension[] = '.mp3';\n        $mime_type[] = 'audio/x-aiff';\n        $extension[] = '.aif';\n        $mime_type[] = 'audio/x-pn-realaudio';\n        $extension[] = '.rm';\n        $mime_type[] = 'audio/x-pn-realaudio-plugin';\n        $extension[] = '.rpm';\n        $mime_type[] = 'audio/x-wav';\n        $extension[] = '.wav';\n        $mime_type[] = 'video/mpeg';\n        $extension[] = '.mpg';\n        $mime_type[] = 'video/mpeg4-generic';\n        $extension[] = '.mp4';\n        $mime_type[] = 'video/quicktime';\n        $extension[] = '.mov';\n        $mime_type[] = 'video/x-msvideo';\n        $extension[] = '.avi';\n\n        $mime_type[] = 'video/x-ms-wmv';\n        $extension[] = '.wmv';\n        $mime_type[] = 'video/x-flv';\n        $extension[] = '.flv';\n        $mime_type[] = 'image/svg+xml';\n        $extension[] = '.svg';\n        $mime_type[] = 'image/svg+xml';\n        $extension[] = '.svgz';\n        $mime_type[] = 'video/ogg';\n        $extension[] = '.ogv';\n        $mime_type[] = 'audio/ogg';\n        $extension[] = '.oga';\n        $mime_type[] = 'application/ogg';\n        $extension[] = '.ogg';\n        $mime_type[] = 'application/ogg';\n        $extension[] = '.ogx';\n        $mime_type[] = 'application/x-freemind';\n        $extension[] = '.mm';\n\n        $mime_type[] = 'application/vnd.ms-word.document.macroEnabled.12';\n        $extension[] = '.docm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n        $extension[] = '.docx';\n        $mime_type[] = 'application/vnd.ms-word.template.macroEnabled.12';\n        $extension[] = '.dotm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.wordprocessingml.template';\n        $extension[] = '.dotx';\n        $mime_type[] = 'application/vnd.ms-powerpoint.template.macroEnabled.12';\n        $extension[] = '.potm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.presentationml.template';\n        $extension[] = '.potx';\n        $mime_type[] = 'application/vnd.ms-powerpoint.addin.macroEnabled.12';\n        $extension[] = '.ppam';\n        $mime_type[] = 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12';\n        $extension[] = '.ppsm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.presentationml.slideshow';\n        $extension[] = '.ppsx';\n        $mime_type[] = 'application/vnd.ms-powerpoint.presentation.macroEnabled.12';\n        $extension[] = '.pptm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.presentationml.presentation';\n        $extension[] = '.pptx';\n        $mime_type[] = 'application/vnd.ms-excel.addin.macroEnabled.12';\n        $extension[] = '.xlam';\n        $mime_type[] = 'application/vnd.ms-excel.sheet.binary.macroEnabled.12';\n        $extension[] = '.xlsb';\n        $mime_type[] = 'application/vnd.ms-excel.sheet.macroEnabled.12';\n        $extension[] = '.xlsm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n        $extension[] = '.xlsx';\n        $mime_type[] = 'application/vnd.ms-excel.template.macroEnabled.12';\n        $extension[] = '.xltm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.template';\n        $extension[] = '.xltx';\n\n        // Test on PC (files with no extension get application/octet-stream)\n        //$mime_type[] = 'application/octet-stream';      $extension[] = '.ext';\n        // Check whether the MIME type sent by the browser is within the table\n        foreach ($mime_type as $key => &$type) {\n            if ($type == $file_type) {\n                $file_name .= $extension[$key];\n                break;\n            }\n        }\n\n        unset($mime_type, $extension, $type, $key); // Delete to eschew possible collisions\n    }\n\n    return $file_name;\n}\n\n/**\n * Manages all the unzipping process of an uploaded file.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n *\n * @param array  $uploaded_file    - follows the $_FILES Structure\n * @param string $upload_path      - destination of the upload.\n *                                 This path is to append to $base_work_dir\n * @param string $base_work_dir    - base working directory of the module\n * @param int    $max_filled_space - amount of bytes to not exceed in the base\n *                                 working directory\n *\n * @return bool true if it succeeds false otherwise\n */\nfunction unzip_uploaded_file($uploaded_file, $upload_path, $base_work_dir, $max_filled_space)\n{\n    $zip_file = new PclZip($uploaded_file['tmp_name']);\n\n    // Check the zip content (real size and file extension)\n    if (file_exists($uploaded_file['tmp_name'])) {\n        $zip_content_array = $zip_file->listContent();\n        $ok_scorm = false;\n        $realFileSize = 0;\n        $ok_plantyn_scorm1 = false;\n        $ok_plantyn_scorm2 = false;\n        $ok_plantyn_scorm3 = false;\n        $ok_aicc_scorm = false;\n        foreach ($zip_content_array as $this_content) {\n            if (preg_match('~.(php.*|phtml|phar|htaccess)$~i', $this_content['filename'])) {\n                Display::addFlash(\n                    Display::return_message(get_lang('ZipNoPhp'))\n                );\n\n                return false;\n            } elseif (stristr($this_content['filename'], 'imsmanifest.xml')) {\n                $ok_scorm = true;\n            } elseif (stristr($this_content['filename'], 'LMS')) {\n                $ok_plantyn_scorm1 = true;\n            } elseif (stristr($this_content['filename'], 'REF')) {\n                $ok_plantyn_scorm2 = true;\n            } elseif (stristr($this_content['filename'], 'SCO')) {\n                $ok_plantyn_scorm3 = true;\n            } elseif (stristr($this_content['filename'], 'AICC')) {\n                $ok_aicc_scorm = true;\n            }\n            $realFileSize += $this_content['size'];\n        }\n\n        if (($ok_plantyn_scorm1 && $ok_plantyn_scorm2 && $ok_plantyn_scorm3) || $ok_aicc_scorm) {\n            $ok_scorm = true;\n        }\n\n        if (!$ok_scorm && defined('CHECK_FOR_SCORM') && CHECK_FOR_SCORM) {\n            Display::addFlash(\n                Display::return_message(get_lang('NotScormContent'))\n            );\n\n            return false;\n        }\n\n        if (!enough_size($realFileSize, $base_work_dir, $max_filled_space)) {\n            Display::addFlash(\n                Display::return_message(get_lang('NoSpace'))\n            );\n\n            return false;\n        }\n\n        // It happens on Linux that $upload_path sometimes doesn't start with '/'\n        if ($upload_path[0] != '/' && substr($base_work_dir, -1, 1) != '/') {\n            $upload_path = '/'.$upload_path;\n        }\n\n        if ($upload_path[strlen($upload_path) - 1] == '/') {\n            $upload_path = substr($upload_path, 0, -1);\n        }\n\n        /*\tUncompressing phase */\n        $save_dir = getcwd();\n        chdir($base_work_dir.$upload_path);\n        $unzippingState = $zip_file->extract();\n        for ($j = 0; $j < count($unzippingState); $j++) {\n            $state = $unzippingState[$j];\n            // Fix relative links in html files\n            $extension = strrchr($state['stored_filename'], '.');\n        }\n        if ($dir = @opendir($base_work_dir.$upload_path)) {\n            while ($file = readdir($dir)) {\n                if ($file != '.' && $file != '..') {\n                    $filetype = 'file';\n                    if (is_dir($base_work_dir.$upload_path.'/'.$file)) {\n                        $filetype = 'folder';\n                    }\n\n                    $safe_file = api_replace_dangerous_char($file);\n                    $safe_file = disable_dangerous_file($safe_file);\n\n                    @rename($base_work_dir.$upload_path.'/'.$file, $base_work_dir.$upload_path.'/'.$safe_file);\n                    set_default_settings($upload_path, $safe_file, $filetype);\n                }\n            }\n\n            closedir($dir);\n        } else {\n            error_log('Could not create directory '.$base_work_dir.$upload_path.' to unzip files');\n        }\n        chdir($save_dir); // Back to previous dir position\n    }\n\n    return true;\n}\n\n/**\n * Manages all the unzipping process of an uploaded document\n * This uses the item_property table for properties of documents.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n * @author Bert Vanderkimpen\n *\n * @param array  $courseInfo\n * @param array  $userInfo\n * @param array  $uploaded_file    - follows the $_FILES Structure\n * @param string $uploadPath       - destination of the upload.\n *                                 This path is to append to $base_work_dir\n * @param string $base_work_dir    - base working directory of the module\n * @param int    $maxFilledSpace   - amount of bytes to not exceed in the base\n *                                 working directory\n * @param int    $sessionId\n * @param int    $groupId          group.id\n * @param bool   $output           Optional. If no output not wanted on success, set to false.\n * @param bool   $onlyUploadFile\n * @param string $whatIfFileExists (only works if $onlyUploadFile is false)\n *\n * @return bool true if it succeeds false otherwise\n */\nfunction unzip_uploaded_document(\n    $courseInfo,\n    $userInfo,\n    $uploaded_file,\n    $uploadPath,\n    $base_work_dir,\n    $maxFilledSpace,\n    $sessionId = 0,\n    $groupId = 0,\n    $output = true,\n    $onlyUploadFile = false,\n    $whatIfFileExists = 'overwrite'\n) {\n    if (empty($courseInfo) || empty($userInfo) || empty($uploaded_file) || empty($uploadPath)) {\n        return false;\n    }\n\n    $zip = new PclZip($uploaded_file['tmp_name']);\n\n    // Check the zip content (real size and file extension)\n    $zip_content_array = (array) $zip->listContent();\n    $realSize = 0;\n    foreach ($zip_content_array as &$this_content) {\n        $realSize += $this_content['size'];\n    }\n\n    if (!DocumentManager::enough_space($realSize, $maxFilledSpace)) {\n        echo Display::return_message(get_lang('UplNotEnoughSpace'), 'error');\n\n        return false;\n    }\n\n    $folder = api_get_unique_id();\n    $destinationDir = api_get_path(SYS_ARCHIVE_PATH).$folder;\n    mkdir($destinationDir, api_get_permissions_for_new_directories(), true);\n\n    // Uncompress zip file\n    // We extract using a callback function that \"cleans\" the path\n    $zip->extract(\n        PCLZIP_OPT_PATH,\n        $destinationDir,\n        PCLZIP_CB_PRE_EXTRACT,\n        'clean_up_files_in_zip',\n        PCLZIP_OPT_REPLACE_NEWER\n    );\n\n    if ($onlyUploadFile === false) {\n        // Add all documents in the unzipped folder to the database\n        add_all_documents_in_folder_to_database(\n            $courseInfo,\n            $userInfo,\n            $base_work_dir,\n            $destinationDir,\n            $sessionId,\n            $groupId,\n            $output,\n            ['path' => $uploadPath],\n            $whatIfFileExists\n        );\n    } else {\n        // Copy result\n        $fs = new \\Symfony\\Component\\Filesystem\\Filesystem();\n        $fs->mirror($destinationDir, $base_work_dir.$uploadPath, null, ['overwrite']);\n    }\n\n    if (is_dir($destinationDir)) {\n        rmdirr($destinationDir);\n    }\n\n    return true;\n}\n\n/**\n * This function is a callback function that is used while extracting a zipfile\n * http://www.phpconcept.net/pclzip/man/en/index.php?options-pclzip_cb_pre_extract.\n *\n * @param array $p_event\n * @param array $p_header\n *\n * @return int (If the function returns 1, then the extraction is resumed, if 0 the path was skipped)\n */\nfunction clean_up_files_in_zip($p_event, &$p_header)\n{\n    $originalStoredFileName = $p_header['stored_filename'];\n    $baseName = basename($originalStoredFileName);\n    // Skip files\n    $skipFiles = [\n        '__MACOSX',\n        '.Thumbs.db',\n        'Thumbs.db',\n    ];\n\n    if (in_array($baseName, $skipFiles)) {\n        return 0;\n    }\n    $modifiedStoredFileName = clean_up_path($originalStoredFileName);\n    $p_header['filename'] = str_replace($originalStoredFileName, $modifiedStoredFileName, $p_header['filename']);\n\n    return 1;\n}\n\nfunction cleanZipFilesNoRename($p_event, &$p_header)\n{\n    $originalStoredFileName = $p_header['stored_filename'];\n    $baseName = basename($originalStoredFileName);\n    // Skip files\n    $skipFiles = [\n        '__MACOSX',\n        '.Thumbs.db',\n        'Thumbs.db',\n    ];\n\n    if (in_array($baseName, $skipFiles)) {\n        return 0;\n    }\n    $modifiedStoredFileName = clean_up_path($originalStoredFileName, false);\n    $p_header['filename'] = str_replace($originalStoredFileName, $modifiedStoredFileName, $p_header['filename']);\n\n    return 1;\n}\n\n/**\n * Allow .htaccess file.\n *\n * @param $p_event\n * @param $p_header\n *\n * @return int\n */\nfunction cleanZipFilesAllowHtaccess($p_event, &$p_header)\n{\n    $originalStoredFileName = $p_header['stored_filename'];\n    $baseName = basename($originalStoredFileName);\n\n    $allowFiles = ['.htaccess'];\n    if (in_array($baseName, $allowFiles)) {\n        return 1;\n    }\n\n    // Skip files\n    $skipFiles = [\n        '__MACOSX',\n        '.Thumbs.db',\n        'Thumbs.db',\n    ];\n\n    if (in_array($baseName, $skipFiles)) {\n        return 0;\n    }\n    $modifiedStoredFileName = clean_up_path($originalStoredFileName);\n    $p_header['filename'] = str_replace($originalStoredFileName, $modifiedStoredFileName, $p_header['filename']);\n\n    return 1;\n}\n\n/**\n * This function cleans up a given path\n * by eliminating dangerous file names and cleaning them.\n *\n * @param string $path\n * @param bool   $replaceName\n *\n * @return string\n *\n * @see disable_dangerous_file()\n * @see api_replace_dangerous_char()\n */\nfunction clean_up_path($path, $replaceName = true)\n{\n    // Split the path in folders and files\n    $path_array = explode('/', $path);\n    // Clean up every folder and filename in the path\n    foreach ($path_array as $key => &$val) {\n        // We don't want to lose the dots in ././folder/file (cfr. zipfile)\n        if ($val != '.') {\n            if ($replaceName) {\n                $val = api_replace_dangerous_char($val);\n            }\n            $val = disable_dangerous_file($val);\n        }\n    }\n    // Join the \"cleaned\" path (modified in-place as passed by reference)\n    $path = implode('/', $path_array);\n    filter_extension($path);\n\n    return $path;\n}\n\n/**\n * Checks if the file is dangerous, based on extension and/or mimetype.\n * The list of extensions accepted/rejected can be found from\n * api_get_setting('upload_extensions_exclude') and api_get_setting('upload_extensions_include').\n *\n * @param string $filename passed by reference. The filename will be modified\n *                         if filter rules say so! (you can include path but the filename should look like 'abc.html')\n *\n * @return int 0 to skip file, 1 to keep file\n */\nfunction filter_extension(&$filename)\n{\n    if (substr($filename, -1) == '/') {\n        return 1; // Authorize directories\n    }\n    $blacklist = api_get_setting('upload_extensions_list_type');\n    if ($blacklist != 'whitelist') { // if = blacklist\n        $extensions = explode(';', strtolower(api_get_setting('upload_extensions_blacklist')));\n\n        $skip = api_get_setting('upload_extensions_skip');\n        $ext = strrchr($filename, '.');\n        $ext = substr($ext, 1);\n        if (empty($ext)) {\n            return 1; // We're in blacklist mode, so accept empty extensions\n        }\n        if (in_array(strtolower($ext), $extensions)) {\n            if ($skip == 'true') {\n                return 0;\n            } else {\n                $new_ext = getReplacedByExtension();\n                $filename = str_replace('.'.$ext, '.'.$new_ext, $filename);\n\n                return 1;\n            }\n        } else {\n            return 1;\n        }\n    } else {\n        $extensions = explode(';', strtolower(api_get_setting('upload_extensions_whitelist')));\n        $skip = api_get_setting('upload_extensions_skip');\n        $ext = strrchr($filename, '.');\n        $ext = substr($ext, 1);\n        if (empty($ext)) {\n            return 1; // Accept empty extensions\n        }\n        if (!in_array(strtolower($ext), $extensions)) {\n            if ($skip == 'true') {\n                return 0;\n            } else {\n                $new_ext = getReplacedByExtension();\n                $filename = str_replace('.'.$ext, '.'.$new_ext, $filename);\n\n                return 1;\n            }\n        } else {\n            return 1;\n        }\n    }\n}\n\nfunction getReplacedByExtension()\n{\n    $extension = api_get_setting('upload_extensions_replace_by');\n\n    return 'REPLACED_'.api_replace_dangerous_char(str_replace('.', '', $extension));\n}\n\n/**\n * Adds a new document to the database.\n *\n * @param array  $courseInfo\n * @param string $path\n * @param string $fileType\n * @param int    $fileSize\n * @param string $title\n * @param string $comment\n * @param int    $readonly\n * @param bool   $saveVisibility\n * @param int    $group_id         group.id\n * @param int    $sessionId        Session ID, if any\n * @param int    $userId           creator user id\n * @param bool   $sendNotification\n *\n * @return int id if inserted document\n */\nfunction add_document(\n    $courseInfo,\n    $path,\n    $fileType,\n    $fileSize,\n    $title,\n    $comment = null,\n    $readonly = 0,\n    $saveVisibility = true,\n    $group_id = 0,\n    $sessionId = 0,\n    $userId = 0,\n    $sendNotification = true\n) {\n    $sessionId = empty($sessionId) ? api_get_session_id() : $sessionId;\n    $userId = empty($userId) ? api_get_user_id() : $userId;\n\n    $readonly = (int) $readonly;\n    $c_id = $courseInfo['real_id'];\n    $params = [\n        'c_id' => $c_id,\n        'path' => $path,\n        'filetype' => $fileType,\n        'size' => $fileSize,\n        'title' => $title,\n        'comment' => $comment,\n        'readonly' => $readonly,\n        'session_id' => $sessionId,\n    ];\n    $table = Database::get_course_table(TABLE_DOCUMENT);\n    $documentId = Database::insert($table, $params);\n    if ($documentId) {\n        $sql = \"UPDATE $table SET id = iid WHERE iid = $documentId\";\n        Database::query($sql);\n\n        if ($saveVisibility) {\n            api_set_default_visibility(\n                $documentId,\n                TOOL_DOCUMENT,\n                $group_id,\n                $courseInfo,\n                $sessionId,\n                $userId\n            );\n        }\n\n        $allowNotification = api_get_configuration_value('send_notification_when_document_added');\n        if ($sendNotification && $allowNotification) {\n            $courseTitle = $courseInfo['title'];\n            if (!empty($sessionId)) {\n                $sessionInfo = api_get_session_info($sessionId);\n                $courseTitle .= \" ( \".$sessionInfo['name'].\") \";\n            }\n\n            $url = api_get_path(WEB_CODE_PATH).\n                'document/showinframes.php?cidReq='.$courseInfo['code'].'&id_session='.$sessionId.'&id='.$documentId;\n            $link = Display::url(basename($title), $url, ['target' => '_blank']);\n            $userInfo = api_get_user_info($userId);\n\n            $message = sprintf(\n                get_lang('DocumentXHasBeenAddedToDocumentInYourCourseXByUserX'),\n                $link,\n                $courseTitle,\n                $userInfo['complete_name']\n            );\n            $subject = sprintf(get_lang('NewDocumentAddedToCourseX'), $courseTitle);\n            MessageManager::sendMessageToAllUsersInCourse($subject, $message, $courseInfo, $sessionId);\n        }\n\n        return $documentId;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Updates an existing document in the database\n * as the file exists, we only need to change the size.\n *\n * @param array $_course\n * @param int   $documentId\n * @param int   $filesize\n * @param int   $readonly\n *\n * @return bool true /false\n */\nfunction update_existing_document($_course, $documentId, $filesize, $readonly = 0)\n{\n    $document_table = Database::get_course_table(TABLE_DOCUMENT);\n    $documentId = intval($documentId);\n    $filesize = intval($filesize);\n    $readonly = intval($readonly);\n    $course_id = $_course['real_id'];\n\n    $sql = \"UPDATE $document_table SET\n            size = '$filesize',\n            readonly = '$readonly'\n\t\t\tWHERE c_id = $course_id AND id = $documentId\";\n    if (Database::query($sql)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * This function updates the last_edit_date, last edit user id on all folders in a given path.\n *\n * @param array  $_course\n * @param string $path\n * @param int    $user_id\n */\nfunction item_property_update_on_folder($_course, $path, $user_id)\n{\n    // If we are in the root, just return... no need to update anything\n    if ($path == '/') {\n        return;\n    }\n\n    $user_id = intval($user_id);\n\n    // If the given path ends with a / we remove it\n    $endchar = substr($path, strlen($path) - 1, 1);\n    if ($endchar == '/') {\n        $path = substr($path, 0, strlen($path) - 1);\n    }\n\n    $table = Database::get_course_table(TABLE_ITEM_PROPERTY);\n\n    // Get the time\n    $time = api_get_utc_datetime();\n\n    // Det all paths in the given path\n    // /folder/subfolder/subsubfolder/file\n    // if file is updated, subsubfolder, subfolder and folder are updated\n    $exploded_path = explode('/', $path);\n    $course_id = api_get_course_int_id();\n    $newpath = '';\n    foreach ($exploded_path as $key => &$value) {\n        // We don't want a slash before our first slash\n        if ($key != 0) {\n            $newpath .= '/'.$value;\n            // Select ID of given folder\n            $folder_id = DocumentManager::get_document_id($_course, $newpath);\n\n            if ($folder_id) {\n                $sql = \"UPDATE $table SET\n\t\t\t\t        lastedit_date = '$time',\n\t\t\t\t        lastedit_type = 'DocumentInFolderUpdated',\n\t\t\t\t        lastedit_user_id='$user_id'\n\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t    c_id = $course_id AND\n\t\t\t\t\t\t    tool='\".TOOL_DOCUMENT.\"' AND\n\t\t\t\t\t\t    ref = '$folder_id'\";\n                Database::query($sql);\n            }\n        }\n    }\n}\n\n/**\n * Adds file to document table in database\n * deprecated: use file_set_default_settings instead.\n *\n * @author\tOlivier Cauberghe <olivier.cauberghe@ugent.be>\n *\n * @param\tpath,filename\n * action:\tAdds an entry to the document table with the default settings\n */\nfunction set_default_settings($upload_path, $filename, $filetype = 'file')\n{\n    $dbTable = Database::get_course_table(TABLE_DOCUMENT);\n    global $default_visibility;\n\n    if (!$default_visibility) {\n        $default_visibility = 'v';\n    }\n    $filetype = Database::escape_string($filetype);\n\n    $upload_path = str_replace('\\\\', '/', $upload_path);\n    $upload_path = str_replace('//', '/', $upload_path);\n\n    if ($upload_path == '/') {\n        $upload_path = '';\n    } elseif (!empty($upload_path) && $upload_path[0] != '/') {\n        $upload_path = \"/$upload_path\";\n    }\n\n    $endchar = substr($filename, strlen($filename) - 1, 1);\n\n    if ($endchar == '/') {\n        $filename = substr($filename, 0, -1);\n    }\n    $filename = Database::escape_string($filename);\n    $query = \"SELECT count(*) as bestaat FROM $dbTable\n              WHERE path='$upload_path/$filename'\";\n    $result = Database::query($query);\n    $row = Database::fetch_array($result);\n    if ($row['bestaat'] > 0) {\n        $query = \"UPDATE $dbTable SET\n\t\t            path='$upload_path/$filename',\n\t\t            visibility='$default_visibility',\n\t\t            filetype='$filetype'\n\t\t          WHERE path='$upload_path/$filename'\";\n    } else {\n        $query = \"INSERT INTO $dbTable (path,visibility,filetype)\n\t\t          VALUES('$upload_path/$filename','$default_visibility','$filetype')\";\n    }\n    Database::query($query);\n}\n\n/**\n * Retrieves the image path list in a html file.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n *\n * @param string $html_file\n *\n * @return array -  images path list\n */\nfunction search_img_from_html($html_file)\n{\n    $img_path_list = [];\n\n    if (!$fp = fopen($html_file, 'r')) {\n        return;\n    }\n\n    // Aearch and store occurences of the <img> tag in an array\n    $size_file = (filesize($html_file) === 0) ? 1 : filesize($html_file);\n    if (isset($fp) && $fp !== false) {\n        $buffer = fread($fp, $size_file);\n        if (strlen($buffer) >= 0 && $buffer !== false) {\n        } else {\n            exit('<center>Can not read file.</center>');\n        }\n    } else {\n        exit('<center>Can not read file.</center>');\n    }\n    $matches = [];\n    if (preg_match_all('~<[[:space:]]*img[^>]*>~i', $buffer, $matches)) {\n        $img_tag_list = $matches[0];\n    }\n\n    fclose($fp);\n    unset($buffer);\n\n    // Search the image file path from all the <IMG> tag detected\n\n    if (sizeof($img_tag_list) > 0) {\n        foreach ($img_tag_list as &$this_img_tag) {\n            if (preg_match('~src[[:space:]]*=[[:space:]]*[\\\"]{1}([^\\\"]+)[\\\"]{1}~i', $this_img_tag, $matches)) {\n                $img_path_list[] = $matches[1];\n            }\n        }\n        $img_path_list = array_unique($img_path_list); // Remove duplicate entries\n    }\n\n    return $img_path_list;\n}\n\n/**\n * Creates a new directory trying to find a directory name\n * that doesn't already exist.\n *\n * @author  Hugues Peeters <hugues.peeters@claroline.net>\n * @author  Bert Vanderkimpen\n *\n * @param array  $_course                 current course information\n * @param int    $user_id                 current user id\n * @param int    $session_id\n * @param int    $to_group_id             group.id\n * @param int    $to_user_id\n * @param string $base_work_dir           /var/www/chamilo/courses/ABC/document\n * @param string $desired_dir_name        complete path of the desired name\n *                                        Example: /folder1/folder2\n * @param string $title                   \"folder2\"\n * @param int    $visibility              (0 for invisible, 1 for visible, 2 for deleted)\n * @param bool   $generateNewNameIfExists\n * @param bool   $sendNotification        depends in conf setting \"send_notification_when_document_added\"\n *\n * @return string actual directory name if it succeeds,\n *                boolean false otherwise\n */\nfunction create_unexisting_directory(\n    $_course,\n    $user_id,\n    $session_id,\n    $to_group_id,\n    $to_user_id,\n    $base_work_dir,\n    $desired_dir_name,\n    $title = '',\n    $visibility = '',\n    $generateNewNameIfExists = false,\n    $sendNotification = true\n) {\n    $course_id = $_course['real_id'];\n    $session_id = (int) $session_id;\n\n    $folderExists = DocumentManager::folderExists(\n        $desired_dir_name,\n        $_course,\n        $session_id,\n        $to_group_id\n    );\n\n    if ($folderExists === true) {\n        if ($generateNewNameIfExists) {\n            $counter = 1;\n            while (1) {\n                $folderExists = DocumentManager::folderExists(\n                    $desired_dir_name.'_'.$counter,\n                    $_course,\n                    $session_id,\n                    $to_group_id\n                );\n\n                if ($folderExists === false) {\n                    break;\n                }\n                $counter++;\n            }\n            $desired_dir_name = $desired_dir_name.'_'.$counter;\n        } else {\n            return false;\n        }\n    }\n\n    $systemFolderName = $desired_dir_name;\n\n    // Adding suffix\n    $suffix = DocumentManager::getDocumentSuffix(\n        $_course,\n        $session_id,\n        $to_group_id\n    );\n\n    $systemFolderName .= $suffix;\n\n    if ($title == null) {\n        $title = basename($desired_dir_name);\n    }\n\n    if (!is_dir($base_work_dir.$systemFolderName)) {\n        $result = @mkdir(\n            $base_work_dir.$systemFolderName,\n            api_get_permissions_for_new_directories(),\n            true\n        );\n\n        if ($result) {\n            // Check if pathname already exists inside document table\n            $tbl_document = Database::get_course_table(TABLE_DOCUMENT);\n            $sql = \"SELECT id, path FROM $tbl_document\n                    WHERE\n                        c_id = $course_id AND\n                        (\n                            path = '\".Database::escape_string($systemFolderName).\"'\n                        )\n            \";\n\n            $groupInfo = [];\n            if (!empty($to_group_id)) {\n                $groupInfo = GroupManager::get_group_properties($to_group_id);\n            }\n\n            $rs = Database::query($sql);\n            if (Database::num_rows($rs) == 0) {\n                $document_id = add_document(\n                    $_course,\n                    $systemFolderName,\n                    'folder',\n                    0,\n                    $title,\n                    null,\n                    0,\n                    true,\n                    $to_group_id,\n                    $session_id,\n                    $user_id,\n                    $sendNotification\n                );\n\n                if ($document_id) {\n                    $lastEditType = [\n                        0 => 'invisible',\n                        1 => 'visible',\n                        2 => 'delete',\n                    ];\n                    // Update document item_property\n                    if (isset($lastEditType[$visibility])) {\n                        api_item_property_update(\n                            $_course,\n                            TOOL_DOCUMENT,\n                            $document_id,\n                            $lastEditType[$visibility],\n                            $user_id,\n                            $groupInfo,\n                            $to_user_id,\n                            null,\n                            null,\n                            $session_id\n                        );\n                    } else {\n                        api_item_property_update(\n                            $_course,\n                            TOOL_DOCUMENT,\n                            $document_id,\n                            'FolderCreated',\n                            $user_id,\n                            $groupInfo,\n                            $to_user_id,\n                            null,\n                            null,\n                            $session_id\n                        );\n                    }\n\n                    $documentData = DocumentManager::get_document_data_by_id(\n                        $document_id,\n                        $_course['code'],\n                        false,\n                        $session_id\n                    );\n\n                    return $documentData;\n                }\n            } else {\n                $document = Database::fetch_array($rs);\n                $documentData = DocumentManager::get_document_data_by_id(\n                    $document['id'],\n                    $_course['code'],\n                    false,\n                    $session_id\n                );\n\n                /* This means the folder NOT exist in the filesystem\n                 (now this was created) but there is a record in the Database*/\n\n                return $documentData;\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * Handles uploaded missing images.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n * @author Bert Vanderkimpen\n *\n * @param array  $_course\n * @param array  $uploaded_file_collection - follows the $_FILES Structure\n * @param string $base_work_dir\n * @param string $missing_files_dir\n * @param int    $user_id\n * @param int    $to_group_id              group.id\n */\nfunction move_uploaded_file_collection_into_directory(\n    $_course,\n    $uploaded_file_collection,\n    $base_work_dir,\n    $missing_files_dir,\n    $user_id,\n    $to_group_id,\n    $to_user_id,\n    $max_filled_space\n) {\n    $number_of_uploaded_images = count($uploaded_file_collection['name']);\n    $list = [];\n    for ($i = 0; $i < $number_of_uploaded_images; $i++) {\n        $missing_file['name'] = $uploaded_file_collection['name'][$i];\n        $missing_file['type'] = $uploaded_file_collection['type'][$i];\n        $missing_file['tmp_name'] = $uploaded_file_collection['tmp_name'][$i];\n        $missing_file['error'] = $uploaded_file_collection['error'][$i];\n        $missing_file['size'] = $uploaded_file_collection['size'][$i];\n\n        $upload_ok = process_uploaded_file($missing_file);\n        if ($upload_ok) {\n            $list[] = handle_uploaded_document(\n                $_course,\n                $missing_file,\n                $base_work_dir,\n                $missing_files_dir,\n                $user_id,\n                $to_group_id,\n                $to_user_id,\n                $max_filled_space,\n                0,\n                'overwrite'\n            );\n        }\n        unset($missing_file);\n    }\n\n    return $list;\n}\n\n/**\n * Opens the old html file and replace the src path into the img tag\n * This also works for files in subdirectories.\n *\n * @param $original_img_path is an array\n * @param $new_img_path is an array\n */\nfunction replace_img_path_in_html_file($original_img_path, $new_img_path, $html_file)\n{\n    // Open the file\n    $fp = fopen($html_file, 'r');\n    $buffer = fread($fp, filesize($html_file));\n    $new_html_content = '';\n\n    // Fix the image tags\n    for ($i = 0, $fileNb = count($original_img_path); $i < $fileNb; $i++) {\n        $replace_what = $original_img_path[$i];\n        // We only need the directory and the filename /path/to/file_html_files/missing_file.gif -> file_html_files/missing_file.gif\n        $exploded_file_path = explode('/', $new_img_path[$i]);\n        $replace_by = $exploded_file_path[count($exploded_file_path) - 2].'/'.$exploded_file_path[count($exploded_file_path) - 1];\n        $buffer = str_replace($replace_what, $replace_by, $buffer);\n    }\n\n    $new_html_content .= $buffer;\n\n    @fclose($fp);\n\n    // Write the resulted new file\n\n    if (!$fp = fopen($html_file, 'w')) {\n        return;\n    }\n\n    if (!fwrite($fp, $new_html_content)) {\n        return;\n    }\n}\n\n/**\n * Checks the extension of a file, if it's .htm or .html\n * we use search_img_from_html to get all image paths in the file.\n *\n * @param string $file\n *\n * @return array paths\n *\n * @see check_for_missing_files() uses search_img_from_html()\n */\nfunction check_for_missing_files($file)\n{\n    if (strrchr($file, '.') == '.htm' || strrchr($file, '.') == '.html') {\n        $img_file_path = search_img_from_html($file);\n\n        return $img_file_path;\n    }\n\n    return false;\n}\n\n/**\n * This function builds a form that asks for the missing images in a html file\n * maybe we should do this another way?\n *\n * @param array  $missing_files\n * @param string $upload_path\n * @param string $file_name\n *\n * @return string the form\n */\nfunction build_missing_files_form($missing_files, $upload_path, $file_name)\n{\n    // Do we need a / or not?\n    $added_slash = ($upload_path == '/') ? '' : '/';\n    $folder_id = DocumentManager::get_document_id(api_get_course_info(), $upload_path);\n    // Build the form\n    $form = \"<p><strong>\".get_lang('MissingImagesDetected').\"</strong></p>\"\n        .\"<form method=\\\"post\\\" action=\\\"\".api_get_self().\"\\\" enctype=\\\"multipart/form-data\\\">\"\n        // Related_file is the path to the file that has missing images\n        .\"<input type=\\\"hidden\\\" name=\\\"related_file\\\" value=\\\"\".$upload_path.$added_slash.$file_name.\"\\\" />\"\n        .\"<input type=\\\"hidden\\\" name=\\\"upload_path\\\" value=\\\"\".$upload_path.\"\\\" />\"\n        .\"<input type=\\\"hidden\\\" name=\\\"id\\\" value=\\\"\".$folder_id.\"\\\" />\"\n        .\"<table border=\\\"0\\\">\";\n    foreach ($missing_files as &$this_img_file_path) {\n        $form .= \"<tr>\"\n            .\"<td>\".basename($this_img_file_path).\" : </td>\"\n            .\"<td>\"\n            .\"<input type=\\\"file\\\" name=\\\"img_file[]\\\"/>\"\n            .\"<input type=\\\"hidden\\\" name=\\\"img_file_path[]\\\" value=\\\"\".$this_img_file_path.\"\\\" />\"\n            .\"</td>\"\n            .\"</tr>\";\n    }\n    $form .= \"</table>\"\n        .\"<button type='submit' name=\\\"cancel_submit_image\\\" value=\\\"\".get_lang('Cancel').\"\\\" class=\\\"cancel\\\">\".get_lang('Cancel').\"</button>\"\n        .\"<button type='submit' name=\\\"submit_image\\\" value=\\\"\".get_lang('Ok').\"\\\" class=\\\"save\\\">\".get_lang('Ok').\"</button>\"\n        .\"</form>\";\n\n    return $form;\n}\n\n/**\n * This recursive function can be used during the upgrade process form older\n * versions of Chamilo\n * It crawls the given directory, checks if the file is in the DB and adds\n * it if it's not.\n *\n * @param array  $courseInfo\n * @param array  $userInfo\n * @param string $base_work_dir    course document dir\n * @param string $folderPath       folder to read\n * @param int    $sessionId\n * @param int    $groupId          group.id\n * @param bool   $output\n * @param array  $parent\n * @param string $whatIfFileExists\n *\n * @return bool\n */\nfunction add_all_documents_in_folder_to_database(\n    $courseInfo,\n    $userInfo,\n    $base_work_dir,\n    $folderPath,\n    $sessionId = 0,\n    $groupId = 0,\n    $output = false,\n    $parent = [],\n    $whatIfFileExists = 'overwrite'\n) {\n    if (empty($userInfo) || empty($courseInfo)) {\n        return false;\n    }\n\n    $userId = $userInfo['user_id'];\n\n    // Open dir\n    $handle = opendir($folderPath);\n\n    if (is_dir($folderPath)) {\n        // Run trough\n        while ($file = readdir($handle)) {\n            if ($file == '.' || $file == '..') {\n                continue;\n            }\n\n            $parentPath = '';\n            if (!empty($parent) && isset($parent['path'])) {\n                $parentPath = $parent['path'];\n                if ($parentPath == '/') {\n                    $parentPath = '';\n                }\n            }\n\n            $completePath = $parentPath.'/'.$file;\n            $sysFolderPath = $folderPath.'/'.$file;\n\n            // Is directory?\n            if (is_dir($sysFolderPath)) {\n                $folderExists = DocumentManager::folderExists(\n                    $completePath,\n                    $courseInfo,\n                    $sessionId,\n                    $groupId\n                );\n\n                if ($folderExists === true) {\n                    switch ($whatIfFileExists) {\n                        case 'overwrite':\n                            $documentId = DocumentManager::get_document_id($courseInfo, $completePath, $sessionId);\n                            if ($documentId) {\n                                $newFolderData = DocumentManager::get_document_data_by_id(\n                                    $documentId,\n                                    $courseInfo['code'],\n                                    false,\n                                    $sessionId\n                                );\n                            }\n                            break;\n                        case 'rename':\n                            $newFolderData = create_unexisting_directory(\n                                $courseInfo,\n                                $userId,\n                                $sessionId,\n                                $groupId,\n                                null,\n                                $base_work_dir,\n                                $completePath,\n                                null,\n                                null,\n                                true\n                            );\n                            break;\n                        case 'nothing':\n                            if ($output) {\n                                $documentId = DocumentManager::get_document_id($courseInfo, $completePath, $sessionId);\n                                if ($documentId) {\n                                    $folderData = DocumentManager::get_document_data_by_id(\n                                        $documentId,\n                                        $courseInfo['code'],\n                                        false,\n                                        $sessionId\n                                    );\n                                    Display::addFlash(\n                                        Display::return_message(\n                                            $folderData['path'].' '.get_lang('UplAlreadyExists'),\n                                            'warning'\n                                        )\n                                    );\n                                }\n                            }\n                            continue 2;\n                            break;\n                    }\n                } else {\n                    $newFolderData = create_unexisting_directory(\n                        $courseInfo,\n                        $userId,\n                        $sessionId,\n                        $groupId,\n                        null,\n                        $base_work_dir,\n                        $completePath,\n                        null,\n                        null,\n                        false\n                    );\n                }\n\n                // Recursive\n                add_all_documents_in_folder_to_database(\n                    $courseInfo,\n                    $userInfo,\n                    $base_work_dir,\n                    $sysFolderPath,\n                    $sessionId,\n                    $groupId,\n                    $output,\n                    $newFolderData,\n                    $whatIfFileExists\n                );\n            } else {\n                // Rename\n                $uploadedFile = [\n                    'name' => $file,\n                    'tmp_name' => $sysFolderPath,\n                    'size' => filesize($sysFolderPath),\n                    'type' => null,\n                    'from_file' => true,\n                    'move_file' => true,\n                ];\n\n                handle_uploaded_document(\n                    $courseInfo,\n                    $uploadedFile,\n                    $base_work_dir,\n                    $parentPath,\n                    $userId,\n                    $groupId,\n                    null,\n                    0,\n                    $whatIfFileExists,\n                    $output,\n                    false,\n                    null,\n                    $sessionId\n                );\n            }\n        }\n    }\n}\n\n/**\n * Get the uploax max filesize from ini php in bytes.\n *\n * @return int\n */\nfunction getIniMaxFileSizeInBytes($humanReadable = false, $checkMessageSetting = false)\n{\n    $maxSize = 0;\n    $uploadMaxFilesize = ini_get('upload_max_filesize');\n    $fileSizeForTeacher = getFileUploadSizeLimitForTeacher();\n    if (!empty($fileSizeForTeacher)) {\n        $uploadMaxFilesize = $fileSizeForTeacher.'M';\n    }\n\n    if (empty($fileSizeForTeacher) && $checkMessageSetting) {\n        $uploadMaxFilesize = api_get_setting('message_max_upload_filesize'); // in bytes\n        if ($humanReadable) {\n            $uploadMaxFilesize = format_file_size($uploadMaxFilesize);\n        }\n\n        return $uploadMaxFilesize;\n    }\n\n    if ($humanReadable) {\n        return $uploadMaxFilesize;\n    }\n\n    if (preg_match('/^([0-9]+)([a-zA-Z]*)$/', $uploadMaxFilesize, $matches)) {\n        // see http://www.php.net/manual/en/faq.using.php#faq.using.shorthandbytes\n        switch (strtoupper($matches['2'])) {\n            case 'G':\n                $maxSize = $matches['1'] * 1073741824;\n                break;\n            case 'M':\n                $maxSize = $matches['1'] * 1048576;\n                break;\n            case 'K':\n                $maxSize = $matches['1'] * 1024;\n                break;\n            default:\n                $maxSize = $matches['1'];\n        }\n    }\n    $maxSize = (int) $maxSize;\n\n    return $maxSize;\n}\n\n/**\n * Get the uploax max filesize from configuration.php for trainers in bytes.\n *\n * @return int\n */\nfunction getFileUploadSizeLimitForTeacher()\n{\n    $size = 0;\n    $settingValue = (int) api_get_configuration_value('file_upload_size_limit_for_teacher'); // setting value in MB\n    if ($settingValue > 0 && (api_is_allowed_to_create_course() && !api_is_platform_admin())) {\n        $size = $settingValue;\n    }\n\n    return $size;\n}\n"], "fixing_code": ["<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * FILE UPLOAD LIBRARY.\n *\n * This is the file upload library for Chamilo.\n * Include/require it in your code to use its functionality.\n *\n * @package chamilo.library\n *\n * @todo test and reorganise\n */\n\nuse enshrined\\svgSanitize\\Sanitizer;\n\n/**\n * Changes the file name extension from .php to .phps\n * Useful for securing a site.\n *\n * @author Hugues Peeters <peeters@ipm.ucl.ac.be>\n *\n * @param string $file_name Name of a file\n *\n * @return string the filename phps'ized\n */\nfunction php2phps($file_name)\n{\n    return preg_replace('/\\.(phar.?|php.?|phtml.?)(\\.){0,1}.*$/i', '.phps', $file_name);\n}\n\n/**\n * Renames .htaccess & .HTACCESS to htaccess.txt.\n *\n * @param string $filename\n *\n * @return string\n */\nfunction htaccess2txt($filename)\n{\n    return str_replace(['.htaccess', '.HTACCESS'], ['htaccess.txt', 'htaccess.txt'], $filename);\n}\n\n/**\n * This function executes our safety precautions\n * more functions can be added.\n *\n * @param string $filename\n *\n * @return string\n *\n * @see php2phps()\n * @see htaccess2txt()\n */\nfunction disable_dangerous_file($filename)\n{\n    return htaccess2txt(php2phps($filename));\n}\n\n/**\n * Returns the name without extension, used for the title.\n *\n * @param string $name\n *\n * @return name without the extension\n */\nfunction get_document_title($name)\n{\n    // If they upload .htaccess...\n    $name = disable_dangerous_file($name);\n    $ext = substr(strrchr($name, '.'), 0);\n\n    if (empty($ext)) {\n        return substr($name, 0, strlen($name));\n    }\n\n    return substr($name, 0, strlen($name) - strlen(strstr($name, $ext)));\n}\n\n/**\n * This function checks if the upload succeeded.\n *\n * @param array $uploaded_file ($_FILES)\n *\n * @return true if upload succeeded\n */\nfunction process_uploaded_file($uploaded_file, $show_output = true)\n{\n    // Checking the error code sent with the file upload.\n    if (isset($uploaded_file['error'])) {\n        switch ($uploaded_file['error']) {\n            case 1:\n                // The uploaded file exceeds the upload_max_filesize directive in php.ini.\n                if ($show_output) {\n                    Display::addFlash(\n                        Display::return_message(\n                            get_lang('UplExceedMaxServerUpload').ini_get('upload_max_filesize'),\n                            'error'\n                        )\n                    );\n                }\n\n                return false;\n            case 2:\n                // The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.\n                // Not used at the moment, but could be handy if we want to limit the size of an upload\n                // (e.g. image upload in html editor).\n                $max_file_size = (int) $_POST['MAX_FILE_SIZE'];\n                if ($show_output) {\n                    Display::addFlash(\n                        Display::return_message(\n                            get_lang('UplExceedMaxPostSize').format_file_size($max_file_size),\n                            'error'\n                        )\n                    );\n                }\n\n                return false;\n            case 3:\n                // The uploaded file was only partially uploaded.\n                if ($show_output) {\n                    Display::addFlash(\n                        Display::return_message(\n                            get_lang('UplPartialUpload').' '.get_lang('PleaseTryAgain'),\n                            'error'\n                        )\n                    );\n                }\n\n                return false;\n            case 4:\n                // No file was uploaded.\n                if ($show_output) {\n                    Display::addFlash(\n                        Display::return_message(\n                            get_lang('UplNoFileUploaded').' '.get_lang('UplSelectFileFirst'),\n                            'error'\n                        )\n                    );\n                }\n\n                return false;\n        }\n    }\n\n    if (!file_exists($uploaded_file['tmp_name'])) {\n        // No file was uploaded.\n        if ($show_output) {\n            Display::addFlash(Display::return_message(get_lang('UplUploadFailed'), 'error'));\n        }\n\n        return false;\n    }\n\n    if (file_exists($uploaded_file['tmp_name'])) {\n        $filesize = filesize($uploaded_file['tmp_name']);\n        if (empty($filesize)) {\n            // No file was uploaded.\n            if ($show_output) {\n                Display::addFlash(\n                    Display::return_message(\n                        get_lang('UplUploadFailedSizeIsZero'),\n                        'error'\n                    )\n                );\n            }\n\n            return false;\n        }\n    }\n\n    $course_id = api_get_course_id();\n\n    //Checking course quota if we are in a course\n    if (!empty($course_id)) {\n        $max_filled_space = DocumentManager::get_course_quota();\n        // Check if there is enough space to save the file\n        if (!DocumentManager::enough_space($uploaded_file['size'], $max_filled_space)) {\n            if ($show_output) {\n                Display::addFlash(\n                    Display::return_message(\n                        get_lang('UplNotEnoughSpace'),\n                        'error'\n                    )\n                );\n            }\n\n            return false;\n        }\n    }\n\n    // case 0: default: We assume there is no error, the file uploaded with success.\n    return true;\n}\n\nfunction sanitizeSvgFile(string $fullPath)\n{\n    $fileType = mime_content_type($fullPath);\n\n    if ('image/svg+xml' !== $fileType) {\n        return;\n    }\n\n    $svgContent = file_get_contents($fullPath);\n\n    $sanitizer = new Sanitizer();\n    $cleanSvg = $sanitizer->sanitize($svgContent);\n\n    file_put_contents($fullPath, $cleanSvg);\n}\n\n/**\n * This function does the save-work for the documents.\n * It handles the uploaded file and adds the properties to the database\n * If unzip=1 and the file is a zipfile, it is extracted\n * If we decide to save ALL kinds of documents in one database,\n * we could extend this with a $type='document', 'scormdocument',...\n *\n * @param array  $courseInfo\n * @param array  $uploadedFile            ($_FILES)\n *                                        array(\n *                                        'name' => 'picture.jpg',\n *                                        'tmp_name' => '...', // absolute path\n *                                        );\n * @param string $documentDir             Example: /var/www/chamilo/courses/ABC/document\n * @param string $uploadPath              Example: /folder1/folder2/\n * @param int    $userId\n * @param int    $groupId                 group.id\n * @param int    $toUserId                User ID, or NULL for everybody\n * @param int    $unzip                   1/0\n * @param string $whatIfFileExists        overwrite, rename or warn if exists (default)\n * @param bool   $output                  optional output parameter\n * @param bool   $onlyUploadFile\n * @param string $comment\n * @param int    $sessionId\n * @param bool   $treat_spaces_as_hyphens\n *\n * So far only use for unzip_uploaded_document function.\n * If no output wanted on success, set to false.\n *\n * @return string path of the saved file\n */\nfunction handle_uploaded_document(\n    $courseInfo,\n    $uploadedFile,\n    $documentDir,\n    $uploadPath,\n    $userId,\n    $groupId = 0,\n    $toUserId = null,\n    $unzip = 0,\n    $whatIfFileExists = '',\n    $output = true,\n    $onlyUploadFile = false,\n    $comment = null,\n    $sessionId = null,\n    $treat_spaces_as_hyphens = true\n) {\n    if (empty($uploadedFile) || empty($userId) || empty($courseInfo) || empty($documentDir) || empty($uploadPath)) {\n        return false;\n    }\n\n    $userInfo = api_get_user_info();\n    $uploadedFile['name'] = stripslashes($uploadedFile['name']);\n    // Add extension to files without one (if possible)\n    $uploadedFile['name'] = add_ext_on_mime($uploadedFile['name'], $uploadedFile['type']);\n    $sessionId = (int) $sessionId;\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    }\n\n    $groupInfo = [];\n    if (!empty($groupId)) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n    }\n\n    // Just in case process_uploaded_file is not called\n    $maxSpace = DocumentManager::get_course_quota();\n    // Check if there is enough space to save the file\n    if (!DocumentManager::enough_space($uploadedFile['size'], $maxSpace)) {\n        if ($output) {\n            Display::addFlash(Display::return_message(get_lang('UplNotEnoughSpace'), 'error'));\n        }\n\n        return false;\n    }\n\n    if (!Security::check_abs_path($documentDir.$uploadPath, $documentDir.'/')) {\n        Display::addFlash(\n            Display::return_message(\n                get_lang('Forbidden'),\n                'error'\n            )\n        );\n\n        return false;\n    }\n\n    // If the want to unzip, check if the file has a .zip (or ZIP,Zip,ZiP,...) extension\n    if ($unzip == 1 && preg_match('/.zip$/', strtolower($uploadedFile['name']))) {\n        return unzip_uploaded_document(\n            $courseInfo,\n            $userInfo,\n            $uploadedFile,\n            $uploadPath,\n            $documentDir,\n            $maxSpace,\n            $sessionId,\n            $groupId,\n            $output,\n            $onlyUploadFile,\n            $whatIfFileExists\n        );\n    } elseif ($unzip == 1 && !preg_match('/.zip$/', strtolower($uploadedFile['name']))) {\n        // We can only unzip ZIP files (no gz, tar,...)\n        if ($output) {\n            Display::addFlash(\n                Display::return_message(get_lang('UplNotAZip').\" \".get_lang('PleaseTryAgain'), 'error')\n            );\n        }\n\n        return false;\n    } else {\n        // Clean up the name, only ASCII characters should stay. (and strict)\n        $cleanName = api_replace_dangerous_char($uploadedFile['name'], $treat_spaces_as_hyphens);\n\n        // No \"dangerous\" files\n        $cleanName = disable_dangerous_file($cleanName);\n\n        // Checking file extension\n        if (!filter_extension($cleanName)) {\n            if ($output) {\n                Display::addFlash(\n                    Display::return_message(get_lang('UplUnableToSaveFileFilteredExtension'), 'error')\n                );\n            }\n\n            return false;\n        } else {\n            // If the upload path differs from / (= root) it will need a slash at the end\n            if ($uploadPath !== '/') {\n                $uploadPath = $uploadPath.'/';\n            }\n\n            // Full path to where we want to store the file with trailing slash\n            $whereToSave = $documentDir.$uploadPath;\n\n            // At least if the directory doesn't exist, tell so\n            if (!is_dir($whereToSave)) {\n                if (!mkdir($whereToSave, api_get_permissions_for_new_directories())) {\n                    if ($output) {\n                        Display::addFlash(\n                            Display::return_message(\n                                get_lang('DestDirectoryDoesntExist').' ('.$uploadPath.')',\n                                'error'\n                            )\n                        );\n                    }\n\n                    return false;\n                }\n            }\n\n            // Just upload the file \"as is\"\n            if ($onlyUploadFile) {\n                $errorResult = moveUploadedFile($uploadedFile, $whereToSave.$cleanName);\n                if ($errorResult) {\n                    return $whereToSave.$cleanName;\n                } else {\n                    return $errorResult;\n                }\n            }\n\n            /*\n                Based in the clean name we generate a new filesystem name\n                Using the session_id and group_id if values are not empty\n            */\n            $fileSystemName = DocumentManager::fixDocumentName(\n                $cleanName,\n                'file',\n                $courseInfo,\n                $sessionId,\n                $groupId\n            );\n\n            // Name of the document without the extension (for the title)\n            $documentTitle = get_document_title($uploadedFile['name']);\n\n            // Size of the uploaded file (in bytes)\n            $fileSize = $uploadedFile['size'];\n\n            // File permissions\n            $filePermissions = api_get_permissions_for_new_files();\n\n            // Example: /var/www/chamilo/courses/xxx/document/folder/picture.jpg\n            $fullPath = $whereToSave.$fileSystemName;\n\n            // Example: /folder/picture.jpg\n            $filePath = $uploadPath.$fileSystemName;\n\n            $docId = DocumentManager::get_document_id(\n                $courseInfo,\n                $filePath,\n                $sessionId\n            );\n\n            // What to do if the target file exists\n            switch ($whatIfFileExists) {\n                // Overwrite the file if it exists\n                case 'overwrite':\n                    // Check if the target file exists, so we can give another message\n                    $fileExists = file_exists($fullPath);\n\n                    if (moveUploadedFile($uploadedFile, $fullPath)) {\n                        sanitizeSvgFile($fullPath);\n                        chmod($fullPath, $filePermissions);\n\n                        if ($fileExists && $docId) {\n                            // UPDATE DATABASE\n                            $documentId = DocumentManager::get_document_id(\n                                $courseInfo,\n                                $filePath\n                            );\n                            if (is_numeric($documentId)) {\n                                // Update file size\n                                update_existing_document(\n                                    $courseInfo,\n                                    $documentId,\n                                    $uploadedFile['size']\n                                );\n\n                                // Update document item_property\n                                api_item_property_update(\n                                    $courseInfo,\n                                    TOOL_DOCUMENT,\n                                    $documentId,\n                                    'DocumentUpdated',\n                                    $userId,\n                                    $groupInfo,\n                                    $toUserId,\n                                    null,\n                                    null,\n                                    $sessionId\n                                );\n\n                                // Redo visibility\n                                api_set_default_visibility(\n                                    $documentId,\n                                    TOOL_DOCUMENT,\n                                    null,\n                                    $courseInfo\n                                );\n                            } else {\n                                // There might be cases where the file exists on disk but there is no registration of\n                                // that in the database\n                                // In this case, and if we are in overwrite mode, overwrite and create the db record\n                                $documentId = add_document(\n                                    $courseInfo,\n                                    $filePath,\n                                    'file',\n                                    $fileSize,\n                                    $documentTitle,\n                                    $comment,\n                                    0,\n                                    true,\n                                    $groupId,\n                                    $sessionId\n                                );\n\n                                if ($documentId) {\n                                    // Put the document in item_property update\n                                    api_item_property_update(\n                                        $courseInfo,\n                                        TOOL_DOCUMENT,\n                                        $documentId,\n                                        'DocumentAdded',\n                                        $userId,\n                                        $groupInfo,\n                                        $toUserId,\n                                        null,\n                                        null,\n                                        $sessionId\n                                    );\n\n                                    // Redo visibility\n                                    api_set_default_visibility(\n                                        $documentId,\n                                        TOOL_DOCUMENT,\n                                        null,\n                                        $courseInfo\n                                    );\n                                }\n                            }\n\n                            // If the file is in a folder, we need to update all parent folders\n                            item_property_update_on_folder($courseInfo, $uploadPath, $userId);\n\n                            // Display success message with extra info to user\n                            if ($output) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('UplUploadSucceeded').'<br /> '.\n                                        $documentTitle.' '.get_lang('UplFileOverwritten'),\n                                        'confirmation',\n                                        false\n                                    )\n                                );\n                            }\n\n                            return $filePath;\n                        } else {\n                            // Put the document data in the database\n                            $documentId = add_document(\n                                $courseInfo,\n                                $filePath,\n                                'file',\n                                $fileSize,\n                                $documentTitle,\n                                $comment,\n                                0,\n                                true,\n                                $groupId,\n                                $sessionId\n                            );\n\n                            if ($documentId) {\n                                // Put the document in item_property update\n                                api_item_property_update(\n                                    $courseInfo,\n                                    TOOL_DOCUMENT,\n                                    $documentId,\n                                    'DocumentAdded',\n                                    $userId,\n                                    $groupInfo,\n                                    $toUserId,\n                                    null,\n                                    null,\n                                    $sessionId\n                                );\n\n                                // Redo visibility\n                                api_set_default_visibility($documentId, TOOL_DOCUMENT, null, $courseInfo);\n                            }\n\n                            // If the file is in a folder, we need to update all parent folders\n                            item_property_update_on_folder($courseInfo, $uploadPath, $userId);\n\n                            // Display success message to user\n                            if ($output) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('UplUploadSucceeded').'<br /> '.$documentTitle,\n                                        'confirmation',\n                                        false\n                                    )\n                                );\n                            }\n\n                            return $filePath;\n                        }\n                    } else {\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message(\n                                    get_lang('UplUnableToSaveFile'),\n                                    'error',\n                                    false\n                                )\n                            );\n                        }\n\n                        return false;\n                    }\n                    break;\n                case 'rename':\n                    // Rename the file if it exists\n                    // Always rename.\n                    $cleanName = DocumentManager::getUniqueFileName(\n                        $uploadPath,\n                        $cleanName,\n                        $courseInfo,\n                        $sessionId,\n                        $groupId\n                    );\n\n                    $fileSystemName = DocumentManager::fixDocumentName(\n                        $cleanName,\n                        'file',\n                        $courseInfo,\n                        $sessionId,\n                        $groupId\n                    );\n\n                    $documentTitle = disable_dangerous_file($cleanName);\n                    $fullPath = $whereToSave.$fileSystemName;\n                    $filePath = $uploadPath.$fileSystemName;\n\n                    if (moveUploadedFile($uploadedFile, $fullPath)) {\n                        sanitizeSvgFile($fullPath);\n                        chmod($fullPath, $filePermissions);\n                        // Put the document data in the database\n                        $documentId = add_document(\n                            $courseInfo,\n                            $filePath,\n                            'file',\n                            $fileSize,\n                            $documentTitle,\n                            $comment, // comment\n                            0, // read only\n                            true, // save visibility\n                            $groupId,\n                            $sessionId\n                        );\n\n                        if ($documentId) {\n                            // Update document item_property\n                            api_item_property_update(\n                                $courseInfo,\n                                TOOL_DOCUMENT,\n                                $documentId,\n                                'DocumentAdded',\n                                $userId,\n                                $groupInfo,\n                                $toUserId,\n                                null,\n                                null,\n                                $sessionId\n                            );\n\n                            // Redo visibility\n                            api_set_default_visibility($documentId, TOOL_DOCUMENT, null, $courseInfo);\n                        }\n\n                        // If the file is in a folder, we need to update all parent folders\n                        item_property_update_on_folder($courseInfo, $uploadPath, $userId);\n\n                        // Display success message to user\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message(\n                                    get_lang('UplUploadSucceeded').'<br />'.\n                                    get_lang('UplFileSavedAs').' '.$documentTitle,\n                                    'success',\n                                    false\n                                )\n                            );\n                        }\n\n                        return $filePath;\n                    } else {\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message(\n                                    get_lang('UplUnableToSaveFile'),\n                                    'error',\n                                    false\n                                )\n                            );\n                        }\n\n                        return false;\n                    }\n                    break;\n                case 'nothing':\n                    $fileExists = file_exists($fullPath);\n                    if ($fileExists) {\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message(\n                                    $uploadPath.$cleanName.' '.get_lang('UplAlreadyExists'),\n                                    'warning',\n                                    false\n                                )\n                            );\n                        }\n                        break;\n                    }\n                    // no break\n                default:\n                    // Only save the file if it doesn't exist or warn user if it does exist\n                    if (file_exists($fullPath) && $docId) {\n                        if ($output) {\n                            Display::addFlash(\n                                Display::return_message($cleanName.' '.get_lang('UplAlreadyExists'), 'warning', false)\n                            );\n                        }\n                    } else {\n                        if (moveUploadedFile($uploadedFile, $fullPath)) {\n                            chmod($fullPath, $filePermissions);\n\n                            // Put the document data in the database\n                            $documentId = add_document(\n                                $courseInfo,\n                                $filePath,\n                                'file',\n                                $fileSize,\n                                $documentTitle,\n                                $comment,\n                                0,\n                                true,\n                                $groupId,\n                                $sessionId\n                            );\n\n                            if ($documentId) {\n                                // Update document item_property\n                                api_item_property_update(\n                                    $courseInfo,\n                                    TOOL_DOCUMENT,\n                                    $documentId,\n                                    'DocumentAdded',\n                                    $userId,\n                                    $groupInfo,\n                                    $toUserId,\n                                    null,\n                                    null,\n                                    $sessionId\n                                );\n                                // Redo visibility\n                                api_set_default_visibility($documentId, TOOL_DOCUMENT, null, $courseInfo);\n                            }\n\n                            // If the file is in a folder, we need to update all parent folders\n                            item_property_update_on_folder(\n                                $courseInfo,\n                                $uploadPath,\n                                $userId\n                            );\n\n                            // Display success message to user\n                            if ($output) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('UplUploadSucceeded').'<br /> '.$documentTitle,\n                                        'confirm',\n                                        false\n                                    )\n                                );\n                            }\n\n                            return $filePath;\n                        } else {\n                            if ($output) {\n                                Display::addFlash(\n                                    Display::return_message(\n                                        get_lang('UplUnableToSaveFile'),\n                                        'error',\n                                        false\n                                    )\n                                );\n                            }\n\n                            return false;\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nfunction moveUploadedFile(array $file, string $storePath): bool\n{\n    $handleFromFile = isset($file['from_file']) && $file['from_file'];\n    $moveFile = isset($file['move_file']) && $file['move_file'];\n    $copyFile = isset($file['copy_file']) && $file['copy_file'];\n    if ($moveFile) {\n        $copied = copy($file['tmp_name'], $storePath);\n\n        if (!$copied) {\n            return false;\n        }\n    }\n\n    if ($copyFile) {\n        $copied = copy($file['tmp_name'], $storePath);\n        unlink($file['tmp_name']);\n\n        return $copied;\n    }\n\n    if ($handleFromFile) {\n        return file_exists($file['tmp_name']);\n    } else {\n        return move_uploaded_file($file['tmp_name'], $storePath);\n    }\n}\n\n/**\n * Checks if there is enough place to add a file on a directory\n * on the base of a maximum directory size allowed\n * deprecated: use enough_space instead!\n *\n * @author Hugues Peeters <peeters@ipm.ucl.ac.be>\n *\n * @param int    $file_size     Size of the file in byte\n * @param string $dir           Path of the directory where the file should be added\n * @param int    $max_dir_space Maximum size of the diretory in byte\n *\n * @return bool true if there is enough space, false otherwise\n *\n * @see enough_size() uses  dir_total_space() function\n */\nfunction enough_size($file_size, $dir, $max_dir_space)\n{\n    // If the directory is the archive directory, safely ignore the size limit\n    if (api_get_path(SYS_ARCHIVE_PATH) == $dir) {\n        return true;\n    }\n\n    if ($max_dir_space) {\n        $already_filled_space = dir_total_space($dir);\n        if (($file_size + $already_filled_space) > $max_dir_space) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Computes the size already occupied by a directory and is subdirectories.\n *\n * @author Hugues Peeters <peeters@ipm.ucl.ac.be>\n *\n * @param string $dir_path Size of the file in byte\n *\n * @return int Return the directory size in bytes\n */\nfunction dir_total_space($dir_path)\n{\n    $save_dir = getcwd();\n    chdir($dir_path);\n    $handle = opendir($dir_path);\n    $sumSize = 0;\n    $dirList = [];\n    while ($element = readdir($handle)) {\n        if ($element == '.' || $element == '..') {\n            continue; // Skip the current and parent directories\n        }\n        if (is_file($element)) {\n            $sumSize += filesize($element);\n        }\n        if (is_dir($element)) {\n            $dirList[] = $dir_path.'/'.$element;\n        }\n    }\n\n    closedir($handle);\n\n    if (sizeof($dirList) > 0) {\n        foreach ($dirList as $j) {\n            $sizeDir = dir_total_space($j); // Recursivity\n            $sumSize += $sizeDir;\n        }\n    }\n    chdir($save_dir); // Return to initial position\n\n    return $sumSize;\n}\n\n/**\n * Tries to add an extension to files without extension\n * Some applications on Macintosh computers don't add an extension to the files.\n * This subroutine try to fix this on the basis of the MIME type sent\n * by the browser.\n *\n * Note : some browsers don't send the MIME Type (e.g. Netscape 4).\n *        We don't have solution for this kind of situation\n *\n * @author Hugues Peeters <peeters@ipm.ucl.ac.be>\n * @author Bert Vanderkimpen\n *\n * @param string $file_name Name of the file\n * @param string $file_type Type of the file\n *\n * @return string File name\n */\nfunction add_ext_on_mime($file_name, $file_type)\n{\n    // Check whether the file has an extension AND whether the browser has sent a MIME Type\n\n    if (!preg_match('/^.*\\.[a-zA-Z_0-9]+$/', $file_name) && $file_type) {\n        // Build a \"MIME-types / extensions\" connection table\n        static $mime_type = [];\n\n        $mime_type[] = 'application/msword';\n        $extension[] = '.doc';\n        $mime_type[] = 'application/rtf';\n        $extension[] = '.rtf';\n        $mime_type[] = 'application/vnd.ms-powerpoint';\n        $extension[] = '.ppt';\n        $mime_type[] = 'application/vnd.ms-excel';\n        $extension[] = '.xls';\n        $mime_type[] = 'application/pdf';\n        $extension[] = '.pdf';\n        $mime_type[] = 'application/postscript';\n        $extension[] = '.ps';\n        $mime_type[] = 'application/mac-binhex40';\n        $extension[] = '.hqx';\n        $mime_type[] = 'application/x-gzip';\n        $extension[] = 'tar.gz';\n        $mime_type[] = 'application/x-shockwave-flash';\n        $extension[] = '.swf';\n        $mime_type[] = 'application/x-stuffit';\n        $extension[] = '.sit';\n        $mime_type[] = 'application/x-tar';\n        $extension[] = '.tar';\n        $mime_type[] = 'application/zip';\n        $extension[] = '.zip';\n        $mime_type[] = 'application/x-tar';\n        $extension[] = '.tar';\n        $mime_type[] = 'text/html';\n        $extension[] = '.html';\n        $mime_type[] = 'text/plain';\n        $extension[] = '.txt';\n        $mime_type[] = 'text/rtf';\n        $extension[] = '.rtf';\n        $mime_type[] = 'img/gif';\n        $extension[] = '.gif';\n        $mime_type[] = 'img/jpeg';\n        $extension[] = '.jpg';\n        $mime_type[] = 'img/png';\n        $extension[] = '.png';\n        $mime_type[] = 'audio/midi';\n        $extension[] = '.mid';\n        $mime_type[] = 'audio/mpeg';\n        $extension[] = '.mp3';\n        $mime_type[] = 'audio/x-aiff';\n        $extension[] = '.aif';\n        $mime_type[] = 'audio/x-pn-realaudio';\n        $extension[] = '.rm';\n        $mime_type[] = 'audio/x-pn-realaudio-plugin';\n        $extension[] = '.rpm';\n        $mime_type[] = 'audio/x-wav';\n        $extension[] = '.wav';\n        $mime_type[] = 'video/mpeg';\n        $extension[] = '.mpg';\n        $mime_type[] = 'video/mpeg4-generic';\n        $extension[] = '.mp4';\n        $mime_type[] = 'video/quicktime';\n        $extension[] = '.mov';\n        $mime_type[] = 'video/x-msvideo';\n        $extension[] = '.avi';\n\n        $mime_type[] = 'video/x-ms-wmv';\n        $extension[] = '.wmv';\n        $mime_type[] = 'video/x-flv';\n        $extension[] = '.flv';\n        $mime_type[] = 'image/svg+xml';\n        $extension[] = '.svg';\n        $mime_type[] = 'image/svg+xml';\n        $extension[] = '.svgz';\n        $mime_type[] = 'video/ogg';\n        $extension[] = '.ogv';\n        $mime_type[] = 'audio/ogg';\n        $extension[] = '.oga';\n        $mime_type[] = 'application/ogg';\n        $extension[] = '.ogg';\n        $mime_type[] = 'application/ogg';\n        $extension[] = '.ogx';\n        $mime_type[] = 'application/x-freemind';\n        $extension[] = '.mm';\n\n        $mime_type[] = 'application/vnd.ms-word.document.macroEnabled.12';\n        $extension[] = '.docm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n        $extension[] = '.docx';\n        $mime_type[] = 'application/vnd.ms-word.template.macroEnabled.12';\n        $extension[] = '.dotm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.wordprocessingml.template';\n        $extension[] = '.dotx';\n        $mime_type[] = 'application/vnd.ms-powerpoint.template.macroEnabled.12';\n        $extension[] = '.potm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.presentationml.template';\n        $extension[] = '.potx';\n        $mime_type[] = 'application/vnd.ms-powerpoint.addin.macroEnabled.12';\n        $extension[] = '.ppam';\n        $mime_type[] = 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12';\n        $extension[] = '.ppsm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.presentationml.slideshow';\n        $extension[] = '.ppsx';\n        $mime_type[] = 'application/vnd.ms-powerpoint.presentation.macroEnabled.12';\n        $extension[] = '.pptm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.presentationml.presentation';\n        $extension[] = '.pptx';\n        $mime_type[] = 'application/vnd.ms-excel.addin.macroEnabled.12';\n        $extension[] = '.xlam';\n        $mime_type[] = 'application/vnd.ms-excel.sheet.binary.macroEnabled.12';\n        $extension[] = '.xlsb';\n        $mime_type[] = 'application/vnd.ms-excel.sheet.macroEnabled.12';\n        $extension[] = '.xlsm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n        $extension[] = '.xlsx';\n        $mime_type[] = 'application/vnd.ms-excel.template.macroEnabled.12';\n        $extension[] = '.xltm';\n        $mime_type[] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.template';\n        $extension[] = '.xltx';\n\n        // Test on PC (files with no extension get application/octet-stream)\n        //$mime_type[] = 'application/octet-stream';      $extension[] = '.ext';\n        // Check whether the MIME type sent by the browser is within the table\n        foreach ($mime_type as $key => &$type) {\n            if ($type == $file_type) {\n                $file_name .= $extension[$key];\n                break;\n            }\n        }\n\n        unset($mime_type, $extension, $type, $key); // Delete to eschew possible collisions\n    }\n\n    return $file_name;\n}\n\n/**\n * Manages all the unzipping process of an uploaded file.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n *\n * @param array  $uploaded_file    - follows the $_FILES Structure\n * @param string $upload_path      - destination of the upload.\n *                                 This path is to append to $base_work_dir\n * @param string $base_work_dir    - base working directory of the module\n * @param int    $max_filled_space - amount of bytes to not exceed in the base\n *                                 working directory\n *\n * @return bool true if it succeeds false otherwise\n */\nfunction unzip_uploaded_file($uploaded_file, $upload_path, $base_work_dir, $max_filled_space)\n{\n    $zip_file = new PclZip($uploaded_file['tmp_name']);\n\n    // Check the zip content (real size and file extension)\n    if (file_exists($uploaded_file['tmp_name'])) {\n        $zip_content_array = $zip_file->listContent();\n        $ok_scorm = false;\n        $realFileSize = 0;\n        $ok_plantyn_scorm1 = false;\n        $ok_plantyn_scorm2 = false;\n        $ok_plantyn_scorm3 = false;\n        $ok_aicc_scorm = false;\n        foreach ($zip_content_array as $this_content) {\n            if (preg_match('~.(php.*|phtml|phar|htaccess)$~i', $this_content['filename'])) {\n                Display::addFlash(\n                    Display::return_message(get_lang('ZipNoPhp'))\n                );\n\n                return false;\n            } elseif (stristr($this_content['filename'], 'imsmanifest.xml')) {\n                $ok_scorm = true;\n            } elseif (stristr($this_content['filename'], 'LMS')) {\n                $ok_plantyn_scorm1 = true;\n            } elseif (stristr($this_content['filename'], 'REF')) {\n                $ok_plantyn_scorm2 = true;\n            } elseif (stristr($this_content['filename'], 'SCO')) {\n                $ok_plantyn_scorm3 = true;\n            } elseif (stristr($this_content['filename'], 'AICC')) {\n                $ok_aicc_scorm = true;\n            }\n            $realFileSize += $this_content['size'];\n        }\n\n        if (($ok_plantyn_scorm1 && $ok_plantyn_scorm2 && $ok_plantyn_scorm3) || $ok_aicc_scorm) {\n            $ok_scorm = true;\n        }\n\n        if (!$ok_scorm && defined('CHECK_FOR_SCORM') && CHECK_FOR_SCORM) {\n            Display::addFlash(\n                Display::return_message(get_lang('NotScormContent'))\n            );\n\n            return false;\n        }\n\n        if (!enough_size($realFileSize, $base_work_dir, $max_filled_space)) {\n            Display::addFlash(\n                Display::return_message(get_lang('NoSpace'))\n            );\n\n            return false;\n        }\n\n        // It happens on Linux that $upload_path sometimes doesn't start with '/'\n        if ($upload_path[0] != '/' && substr($base_work_dir, -1, 1) != '/') {\n            $upload_path = '/'.$upload_path;\n        }\n\n        if ($upload_path[strlen($upload_path) - 1] == '/') {\n            $upload_path = substr($upload_path, 0, -1);\n        }\n\n        /*\tUncompressing phase */\n        $save_dir = getcwd();\n        chdir($base_work_dir.$upload_path);\n        $unzippingState = $zip_file->extract();\n        for ($j = 0; $j < count($unzippingState); $j++) {\n            $state = $unzippingState[$j];\n            // Fix relative links in html files\n            $extension = strrchr($state['stored_filename'], '.');\n        }\n        if ($dir = @opendir($base_work_dir.$upload_path)) {\n            while ($file = readdir($dir)) {\n                if ($file != '.' && $file != '..') {\n                    $filetype = 'file';\n                    if (is_dir($base_work_dir.$upload_path.'/'.$file)) {\n                        $filetype = 'folder';\n                    }\n\n                    $safe_file = api_replace_dangerous_char($file);\n                    $safe_file = disable_dangerous_file($safe_file);\n\n                    @rename($base_work_dir.$upload_path.'/'.$file, $base_work_dir.$upload_path.'/'.$safe_file);\n                    set_default_settings($upload_path, $safe_file, $filetype);\n                }\n            }\n\n            closedir($dir);\n        } else {\n            error_log('Could not create directory '.$base_work_dir.$upload_path.' to unzip files');\n        }\n        chdir($save_dir); // Back to previous dir position\n    }\n\n    return true;\n}\n\n/**\n * Manages all the unzipping process of an uploaded document\n * This uses the item_property table for properties of documents.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n * @author Bert Vanderkimpen\n *\n * @param array  $courseInfo\n * @param array  $userInfo\n * @param array  $uploaded_file    - follows the $_FILES Structure\n * @param string $uploadPath       - destination of the upload.\n *                                 This path is to append to $base_work_dir\n * @param string $base_work_dir    - base working directory of the module\n * @param int    $maxFilledSpace   - amount of bytes to not exceed in the base\n *                                 working directory\n * @param int    $sessionId\n * @param int    $groupId          group.id\n * @param bool   $output           Optional. If no output not wanted on success, set to false.\n * @param bool   $onlyUploadFile\n * @param string $whatIfFileExists (only works if $onlyUploadFile is false)\n *\n * @return bool true if it succeeds false otherwise\n */\nfunction unzip_uploaded_document(\n    $courseInfo,\n    $userInfo,\n    $uploaded_file,\n    $uploadPath,\n    $base_work_dir,\n    $maxFilledSpace,\n    $sessionId = 0,\n    $groupId = 0,\n    $output = true,\n    $onlyUploadFile = false,\n    $whatIfFileExists = 'overwrite'\n) {\n    if (empty($courseInfo) || empty($userInfo) || empty($uploaded_file) || empty($uploadPath)) {\n        return false;\n    }\n\n    $zip = new PclZip($uploaded_file['tmp_name']);\n\n    // Check the zip content (real size and file extension)\n    $zip_content_array = (array) $zip->listContent();\n    $realSize = 0;\n    foreach ($zip_content_array as &$this_content) {\n        $realSize += $this_content['size'];\n    }\n\n    if (!DocumentManager::enough_space($realSize, $maxFilledSpace)) {\n        echo Display::return_message(get_lang('UplNotEnoughSpace'), 'error');\n\n        return false;\n    }\n\n    $folder = api_get_unique_id();\n    $destinationDir = api_get_path(SYS_ARCHIVE_PATH).$folder;\n    mkdir($destinationDir, api_get_permissions_for_new_directories(), true);\n\n    // Uncompress zip file\n    // We extract using a callback function that \"cleans\" the path\n    $zip->extract(\n        PCLZIP_OPT_PATH,\n        $destinationDir,\n        PCLZIP_CB_PRE_EXTRACT,\n        'clean_up_files_in_zip',\n        PCLZIP_OPT_REPLACE_NEWER\n    );\n\n    if ($onlyUploadFile === false) {\n        // Add all documents in the unzipped folder to the database\n        add_all_documents_in_folder_to_database(\n            $courseInfo,\n            $userInfo,\n            $base_work_dir,\n            $destinationDir,\n            $sessionId,\n            $groupId,\n            $output,\n            ['path' => $uploadPath],\n            $whatIfFileExists\n        );\n    } else {\n        // Copy result\n        $fs = new \\Symfony\\Component\\Filesystem\\Filesystem();\n        $fs->mirror($destinationDir, $base_work_dir.$uploadPath, null, ['overwrite']);\n    }\n\n    if (is_dir($destinationDir)) {\n        rmdirr($destinationDir);\n    }\n\n    return true;\n}\n\n/**\n * This function is a callback function that is used while extracting a zipfile\n * http://www.phpconcept.net/pclzip/man/en/index.php?options-pclzip_cb_pre_extract.\n *\n * @param array $p_event\n * @param array $p_header\n *\n * @return int (If the function returns 1, then the extraction is resumed, if 0 the path was skipped)\n */\nfunction clean_up_files_in_zip($p_event, &$p_header)\n{\n    $originalStoredFileName = $p_header['stored_filename'];\n    $baseName = basename($originalStoredFileName);\n    // Skip files\n    $skipFiles = [\n        '__MACOSX',\n        '.Thumbs.db',\n        'Thumbs.db',\n    ];\n\n    if (in_array($baseName, $skipFiles)) {\n        return 0;\n    }\n    $modifiedStoredFileName = clean_up_path($originalStoredFileName);\n    $p_header['filename'] = str_replace($originalStoredFileName, $modifiedStoredFileName, $p_header['filename']);\n\n    return 1;\n}\n\nfunction cleanZipFilesNoRename($p_event, &$p_header)\n{\n    $originalStoredFileName = $p_header['stored_filename'];\n    $baseName = basename($originalStoredFileName);\n    // Skip files\n    $skipFiles = [\n        '__MACOSX',\n        '.Thumbs.db',\n        'Thumbs.db',\n    ];\n\n    if (in_array($baseName, $skipFiles)) {\n        return 0;\n    }\n    $modifiedStoredFileName = clean_up_path($originalStoredFileName, false);\n    $p_header['filename'] = str_replace($originalStoredFileName, $modifiedStoredFileName, $p_header['filename']);\n\n    return 1;\n}\n\n/**\n * Allow .htaccess file.\n *\n * @param $p_event\n * @param $p_header\n *\n * @return int\n */\nfunction cleanZipFilesAllowHtaccess($p_event, &$p_header)\n{\n    $originalStoredFileName = $p_header['stored_filename'];\n    $baseName = basename($originalStoredFileName);\n\n    $allowFiles = ['.htaccess'];\n    if (in_array($baseName, $allowFiles)) {\n        return 1;\n    }\n\n    // Skip files\n    $skipFiles = [\n        '__MACOSX',\n        '.Thumbs.db',\n        'Thumbs.db',\n    ];\n\n    if (in_array($baseName, $skipFiles)) {\n        return 0;\n    }\n    $modifiedStoredFileName = clean_up_path($originalStoredFileName);\n    $p_header['filename'] = str_replace($originalStoredFileName, $modifiedStoredFileName, $p_header['filename']);\n\n    return 1;\n}\n\n/**\n * This function cleans up a given path\n * by eliminating dangerous file names and cleaning them.\n *\n * @param string $path\n * @param bool   $replaceName\n *\n * @return string\n *\n * @see disable_dangerous_file()\n * @see api_replace_dangerous_char()\n */\nfunction clean_up_path($path, $replaceName = true)\n{\n    // Split the path in folders and files\n    $path_array = explode('/', $path);\n    // Clean up every folder and filename in the path\n    foreach ($path_array as $key => &$val) {\n        // We don't want to lose the dots in ././folder/file (cfr. zipfile)\n        if ($val != '.') {\n            if ($replaceName) {\n                $val = api_replace_dangerous_char($val);\n            }\n            $val = disable_dangerous_file($val);\n        }\n    }\n    // Join the \"cleaned\" path (modified in-place as passed by reference)\n    $path = implode('/', $path_array);\n    filter_extension($path);\n\n    return $path;\n}\n\n/**\n * Checks if the file is dangerous, based on extension and/or mimetype.\n * The list of extensions accepted/rejected can be found from\n * api_get_setting('upload_extensions_exclude') and api_get_setting('upload_extensions_include').\n *\n * @param string $filename passed by reference. The filename will be modified\n *                         if filter rules say so! (you can include path but the filename should look like 'abc.html')\n *\n * @return int 0 to skip file, 1 to keep file\n */\nfunction filter_extension(&$filename)\n{\n    if (substr($filename, -1) == '/') {\n        return 1; // Authorize directories\n    }\n    $blacklist = api_get_setting('upload_extensions_list_type');\n    if ($blacklist != 'whitelist') { // if = blacklist\n        $extensions = explode(';', strtolower(api_get_setting('upload_extensions_blacklist')));\n\n        $skip = api_get_setting('upload_extensions_skip');\n        $ext = strrchr($filename, '.');\n        $ext = substr($ext, 1);\n        if (empty($ext)) {\n            return 1; // We're in blacklist mode, so accept empty extensions\n        }\n        if (in_array(strtolower($ext), $extensions)) {\n            if ($skip == 'true') {\n                return 0;\n            } else {\n                $new_ext = getReplacedByExtension();\n                $filename = str_replace('.'.$ext, '.'.$new_ext, $filename);\n\n                return 1;\n            }\n        } else {\n            return 1;\n        }\n    } else {\n        $extensions = explode(';', strtolower(api_get_setting('upload_extensions_whitelist')));\n        $skip = api_get_setting('upload_extensions_skip');\n        $ext = strrchr($filename, '.');\n        $ext = substr($ext, 1);\n        if (empty($ext)) {\n            return 1; // Accept empty extensions\n        }\n        if (!in_array(strtolower($ext), $extensions)) {\n            if ($skip == 'true') {\n                return 0;\n            } else {\n                $new_ext = getReplacedByExtension();\n                $filename = str_replace('.'.$ext, '.'.$new_ext, $filename);\n\n                return 1;\n            }\n        } else {\n            return 1;\n        }\n    }\n}\n\nfunction getReplacedByExtension()\n{\n    $extension = api_get_setting('upload_extensions_replace_by');\n\n    return 'REPLACED_'.api_replace_dangerous_char(str_replace('.', '', $extension));\n}\n\n/**\n * Adds a new document to the database.\n *\n * @param array  $courseInfo\n * @param string $path\n * @param string $fileType\n * @param int    $fileSize\n * @param string $title\n * @param string $comment\n * @param int    $readonly\n * @param bool   $saveVisibility\n * @param int    $group_id         group.id\n * @param int    $sessionId        Session ID, if any\n * @param int    $userId           creator user id\n * @param bool   $sendNotification\n *\n * @return int id if inserted document\n */\nfunction add_document(\n    $courseInfo,\n    $path,\n    $fileType,\n    $fileSize,\n    $title,\n    $comment = null,\n    $readonly = 0,\n    $saveVisibility = true,\n    $group_id = 0,\n    $sessionId = 0,\n    $userId = 0,\n    $sendNotification = true\n) {\n    $sessionId = empty($sessionId) ? api_get_session_id() : $sessionId;\n    $userId = empty($userId) ? api_get_user_id() : $userId;\n\n    $readonly = (int) $readonly;\n    $c_id = $courseInfo['real_id'];\n    $params = [\n        'c_id' => $c_id,\n        'path' => $path,\n        'filetype' => $fileType,\n        'size' => $fileSize,\n        'title' => $title,\n        'comment' => $comment,\n        'readonly' => $readonly,\n        'session_id' => $sessionId,\n    ];\n    $table = Database::get_course_table(TABLE_DOCUMENT);\n    $documentId = Database::insert($table, $params);\n    if ($documentId) {\n        $sql = \"UPDATE $table SET id = iid WHERE iid = $documentId\";\n        Database::query($sql);\n\n        if ($saveVisibility) {\n            api_set_default_visibility(\n                $documentId,\n                TOOL_DOCUMENT,\n                $group_id,\n                $courseInfo,\n                $sessionId,\n                $userId\n            );\n        }\n\n        $allowNotification = api_get_configuration_value('send_notification_when_document_added');\n        if ($sendNotification && $allowNotification) {\n            $courseTitle = $courseInfo['title'];\n            if (!empty($sessionId)) {\n                $sessionInfo = api_get_session_info($sessionId);\n                $courseTitle .= \" ( \".$sessionInfo['name'].\") \";\n            }\n\n            $url = api_get_path(WEB_CODE_PATH).\n                'document/showinframes.php?cidReq='.$courseInfo['code'].'&id_session='.$sessionId.'&id='.$documentId;\n            $link = Display::url(basename($title), $url, ['target' => '_blank']);\n            $userInfo = api_get_user_info($userId);\n\n            $message = sprintf(\n                get_lang('DocumentXHasBeenAddedToDocumentInYourCourseXByUserX'),\n                $link,\n                $courseTitle,\n                $userInfo['complete_name']\n            );\n            $subject = sprintf(get_lang('NewDocumentAddedToCourseX'), $courseTitle);\n            MessageManager::sendMessageToAllUsersInCourse($subject, $message, $courseInfo, $sessionId);\n        }\n\n        return $documentId;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Updates an existing document in the database\n * as the file exists, we only need to change the size.\n *\n * @param array $_course\n * @param int   $documentId\n * @param int   $filesize\n * @param int   $readonly\n *\n * @return bool true /false\n */\nfunction update_existing_document($_course, $documentId, $filesize, $readonly = 0)\n{\n    $document_table = Database::get_course_table(TABLE_DOCUMENT);\n    $documentId = intval($documentId);\n    $filesize = intval($filesize);\n    $readonly = intval($readonly);\n    $course_id = $_course['real_id'];\n\n    $sql = \"UPDATE $document_table SET\n            size = '$filesize',\n            readonly = '$readonly'\n\t\t\tWHERE c_id = $course_id AND id = $documentId\";\n    if (Database::query($sql)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * This function updates the last_edit_date, last edit user id on all folders in a given path.\n *\n * @param array  $_course\n * @param string $path\n * @param int    $user_id\n */\nfunction item_property_update_on_folder($_course, $path, $user_id)\n{\n    // If we are in the root, just return... no need to update anything\n    if ($path == '/') {\n        return;\n    }\n\n    $user_id = intval($user_id);\n\n    // If the given path ends with a / we remove it\n    $endchar = substr($path, strlen($path) - 1, 1);\n    if ($endchar == '/') {\n        $path = substr($path, 0, strlen($path) - 1);\n    }\n\n    $table = Database::get_course_table(TABLE_ITEM_PROPERTY);\n\n    // Get the time\n    $time = api_get_utc_datetime();\n\n    // Det all paths in the given path\n    // /folder/subfolder/subsubfolder/file\n    // if file is updated, subsubfolder, subfolder and folder are updated\n    $exploded_path = explode('/', $path);\n    $course_id = api_get_course_int_id();\n    $newpath = '';\n    foreach ($exploded_path as $key => &$value) {\n        // We don't want a slash before our first slash\n        if ($key != 0) {\n            $newpath .= '/'.$value;\n            // Select ID of given folder\n            $folder_id = DocumentManager::get_document_id($_course, $newpath);\n\n            if ($folder_id) {\n                $sql = \"UPDATE $table SET\n\t\t\t\t        lastedit_date = '$time',\n\t\t\t\t        lastedit_type = 'DocumentInFolderUpdated',\n\t\t\t\t        lastedit_user_id='$user_id'\n\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t    c_id = $course_id AND\n\t\t\t\t\t\t    tool='\".TOOL_DOCUMENT.\"' AND\n\t\t\t\t\t\t    ref = '$folder_id'\";\n                Database::query($sql);\n            }\n        }\n    }\n}\n\n/**\n * Adds file to document table in database\n * deprecated: use file_set_default_settings instead.\n *\n * @author\tOlivier Cauberghe <olivier.cauberghe@ugent.be>\n *\n * @param\tpath,filename\n * action:\tAdds an entry to the document table with the default settings\n */\nfunction set_default_settings($upload_path, $filename, $filetype = 'file')\n{\n    $dbTable = Database::get_course_table(TABLE_DOCUMENT);\n    global $default_visibility;\n\n    if (!$default_visibility) {\n        $default_visibility = 'v';\n    }\n    $filetype = Database::escape_string($filetype);\n\n    $upload_path = str_replace('\\\\', '/', $upload_path);\n    $upload_path = str_replace('//', '/', $upload_path);\n\n    if ($upload_path == '/') {\n        $upload_path = '';\n    } elseif (!empty($upload_path) && $upload_path[0] != '/') {\n        $upload_path = \"/$upload_path\";\n    }\n\n    $endchar = substr($filename, strlen($filename) - 1, 1);\n\n    if ($endchar == '/') {\n        $filename = substr($filename, 0, -1);\n    }\n    $filename = Database::escape_string($filename);\n    $query = \"SELECT count(*) as bestaat FROM $dbTable\n              WHERE path='$upload_path/$filename'\";\n    $result = Database::query($query);\n    $row = Database::fetch_array($result);\n    if ($row['bestaat'] > 0) {\n        $query = \"UPDATE $dbTable SET\n\t\t            path='$upload_path/$filename',\n\t\t            visibility='$default_visibility',\n\t\t            filetype='$filetype'\n\t\t          WHERE path='$upload_path/$filename'\";\n    } else {\n        $query = \"INSERT INTO $dbTable (path,visibility,filetype)\n\t\t          VALUES('$upload_path/$filename','$default_visibility','$filetype')\";\n    }\n    Database::query($query);\n}\n\n/**\n * Retrieves the image path list in a html file.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n *\n * @param string $html_file\n *\n * @return array -  images path list\n */\nfunction search_img_from_html($html_file)\n{\n    $img_path_list = [];\n\n    if (!$fp = fopen($html_file, 'r')) {\n        return;\n    }\n\n    // Aearch and store occurences of the <img> tag in an array\n    $size_file = (filesize($html_file) === 0) ? 1 : filesize($html_file);\n    if (isset($fp) && $fp !== false) {\n        $buffer = fread($fp, $size_file);\n        if (strlen($buffer) >= 0 && $buffer !== false) {\n        } else {\n            exit('<center>Can not read file.</center>');\n        }\n    } else {\n        exit('<center>Can not read file.</center>');\n    }\n    $matches = [];\n    if (preg_match_all('~<[[:space:]]*img[^>]*>~i', $buffer, $matches)) {\n        $img_tag_list = $matches[0];\n    }\n\n    fclose($fp);\n    unset($buffer);\n\n    // Search the image file path from all the <IMG> tag detected\n\n    if (sizeof($img_tag_list) > 0) {\n        foreach ($img_tag_list as &$this_img_tag) {\n            if (preg_match('~src[[:space:]]*=[[:space:]]*[\\\"]{1}([^\\\"]+)[\\\"]{1}~i', $this_img_tag, $matches)) {\n                $img_path_list[] = $matches[1];\n            }\n        }\n        $img_path_list = array_unique($img_path_list); // Remove duplicate entries\n    }\n\n    return $img_path_list;\n}\n\n/**\n * Creates a new directory trying to find a directory name\n * that doesn't already exist.\n *\n * @author  Hugues Peeters <hugues.peeters@claroline.net>\n * @author  Bert Vanderkimpen\n *\n * @param array  $_course                 current course information\n * @param int    $user_id                 current user id\n * @param int    $session_id\n * @param int    $to_group_id             group.id\n * @param int    $to_user_id\n * @param string $base_work_dir           /var/www/chamilo/courses/ABC/document\n * @param string $desired_dir_name        complete path of the desired name\n *                                        Example: /folder1/folder2\n * @param string $title                   \"folder2\"\n * @param int    $visibility              (0 for invisible, 1 for visible, 2 for deleted)\n * @param bool   $generateNewNameIfExists\n * @param bool   $sendNotification        depends in conf setting \"send_notification_when_document_added\"\n *\n * @return string actual directory name if it succeeds,\n *                boolean false otherwise\n */\nfunction create_unexisting_directory(\n    $_course,\n    $user_id,\n    $session_id,\n    $to_group_id,\n    $to_user_id,\n    $base_work_dir,\n    $desired_dir_name,\n    $title = '',\n    $visibility = '',\n    $generateNewNameIfExists = false,\n    $sendNotification = true\n) {\n    $course_id = $_course['real_id'];\n    $session_id = (int) $session_id;\n\n    $folderExists = DocumentManager::folderExists(\n        $desired_dir_name,\n        $_course,\n        $session_id,\n        $to_group_id\n    );\n\n    if ($folderExists === true) {\n        if ($generateNewNameIfExists) {\n            $counter = 1;\n            while (1) {\n                $folderExists = DocumentManager::folderExists(\n                    $desired_dir_name.'_'.$counter,\n                    $_course,\n                    $session_id,\n                    $to_group_id\n                );\n\n                if ($folderExists === false) {\n                    break;\n                }\n                $counter++;\n            }\n            $desired_dir_name = $desired_dir_name.'_'.$counter;\n        } else {\n            return false;\n        }\n    }\n\n    $systemFolderName = $desired_dir_name;\n\n    // Adding suffix\n    $suffix = DocumentManager::getDocumentSuffix(\n        $_course,\n        $session_id,\n        $to_group_id\n    );\n\n    $systemFolderName .= $suffix;\n\n    if ($title == null) {\n        $title = basename($desired_dir_name);\n    }\n\n    if (!is_dir($base_work_dir.$systemFolderName)) {\n        $result = @mkdir(\n            $base_work_dir.$systemFolderName,\n            api_get_permissions_for_new_directories(),\n            true\n        );\n\n        if ($result) {\n            // Check if pathname already exists inside document table\n            $tbl_document = Database::get_course_table(TABLE_DOCUMENT);\n            $sql = \"SELECT id, path FROM $tbl_document\n                    WHERE\n                        c_id = $course_id AND\n                        (\n                            path = '\".Database::escape_string($systemFolderName).\"'\n                        )\n            \";\n\n            $groupInfo = [];\n            if (!empty($to_group_id)) {\n                $groupInfo = GroupManager::get_group_properties($to_group_id);\n            }\n\n            $rs = Database::query($sql);\n            if (Database::num_rows($rs) == 0) {\n                $document_id = add_document(\n                    $_course,\n                    $systemFolderName,\n                    'folder',\n                    0,\n                    $title,\n                    null,\n                    0,\n                    true,\n                    $to_group_id,\n                    $session_id,\n                    $user_id,\n                    $sendNotification\n                );\n\n                if ($document_id) {\n                    $lastEditType = [\n                        0 => 'invisible',\n                        1 => 'visible',\n                        2 => 'delete',\n                    ];\n                    // Update document item_property\n                    if (isset($lastEditType[$visibility])) {\n                        api_item_property_update(\n                            $_course,\n                            TOOL_DOCUMENT,\n                            $document_id,\n                            $lastEditType[$visibility],\n                            $user_id,\n                            $groupInfo,\n                            $to_user_id,\n                            null,\n                            null,\n                            $session_id\n                        );\n                    } else {\n                        api_item_property_update(\n                            $_course,\n                            TOOL_DOCUMENT,\n                            $document_id,\n                            'FolderCreated',\n                            $user_id,\n                            $groupInfo,\n                            $to_user_id,\n                            null,\n                            null,\n                            $session_id\n                        );\n                    }\n\n                    $documentData = DocumentManager::get_document_data_by_id(\n                        $document_id,\n                        $_course['code'],\n                        false,\n                        $session_id\n                    );\n\n                    return $documentData;\n                }\n            } else {\n                $document = Database::fetch_array($rs);\n                $documentData = DocumentManager::get_document_data_by_id(\n                    $document['id'],\n                    $_course['code'],\n                    false,\n                    $session_id\n                );\n\n                /* This means the folder NOT exist in the filesystem\n                 (now this was created) but there is a record in the Database*/\n\n                return $documentData;\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * Handles uploaded missing images.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n * @author Bert Vanderkimpen\n *\n * @param array  $_course\n * @param array  $uploaded_file_collection - follows the $_FILES Structure\n * @param string $base_work_dir\n * @param string $missing_files_dir\n * @param int    $user_id\n * @param int    $to_group_id              group.id\n */\nfunction move_uploaded_file_collection_into_directory(\n    $_course,\n    $uploaded_file_collection,\n    $base_work_dir,\n    $missing_files_dir,\n    $user_id,\n    $to_group_id,\n    $to_user_id,\n    $max_filled_space\n) {\n    $number_of_uploaded_images = count($uploaded_file_collection['name']);\n    $list = [];\n    for ($i = 0; $i < $number_of_uploaded_images; $i++) {\n        $missing_file['name'] = $uploaded_file_collection['name'][$i];\n        $missing_file['type'] = $uploaded_file_collection['type'][$i];\n        $missing_file['tmp_name'] = $uploaded_file_collection['tmp_name'][$i];\n        $missing_file['error'] = $uploaded_file_collection['error'][$i];\n        $missing_file['size'] = $uploaded_file_collection['size'][$i];\n\n        $upload_ok = process_uploaded_file($missing_file);\n        if ($upload_ok) {\n            $list[] = handle_uploaded_document(\n                $_course,\n                $missing_file,\n                $base_work_dir,\n                $missing_files_dir,\n                $user_id,\n                $to_group_id,\n                $to_user_id,\n                $max_filled_space,\n                0,\n                'overwrite'\n            );\n        }\n        unset($missing_file);\n    }\n\n    return $list;\n}\n\n/**\n * Opens the old html file and replace the src path into the img tag\n * This also works for files in subdirectories.\n *\n * @param $original_img_path is an array\n * @param $new_img_path is an array\n */\nfunction replace_img_path_in_html_file($original_img_path, $new_img_path, $html_file)\n{\n    // Open the file\n    $fp = fopen($html_file, 'r');\n    $buffer = fread($fp, filesize($html_file));\n    $new_html_content = '';\n\n    // Fix the image tags\n    for ($i = 0, $fileNb = count($original_img_path); $i < $fileNb; $i++) {\n        $replace_what = $original_img_path[$i];\n        // We only need the directory and the filename /path/to/file_html_files/missing_file.gif -> file_html_files/missing_file.gif\n        $exploded_file_path = explode('/', $new_img_path[$i]);\n        $replace_by = $exploded_file_path[count($exploded_file_path) - 2].'/'.$exploded_file_path[count($exploded_file_path) - 1];\n        $buffer = str_replace($replace_what, $replace_by, $buffer);\n    }\n\n    $new_html_content .= $buffer;\n\n    @fclose($fp);\n\n    // Write the resulted new file\n\n    if (!$fp = fopen($html_file, 'w')) {\n        return;\n    }\n\n    if (!fwrite($fp, $new_html_content)) {\n        return;\n    }\n}\n\n/**\n * Checks the extension of a file, if it's .htm or .html\n * we use search_img_from_html to get all image paths in the file.\n *\n * @param string $file\n *\n * @return array paths\n *\n * @see check_for_missing_files() uses search_img_from_html()\n */\nfunction check_for_missing_files($file)\n{\n    if (strrchr($file, '.') == '.htm' || strrchr($file, '.') == '.html') {\n        $img_file_path = search_img_from_html($file);\n\n        return $img_file_path;\n    }\n\n    return false;\n}\n\n/**\n * This function builds a form that asks for the missing images in a html file\n * maybe we should do this another way?\n *\n * @param array  $missing_files\n * @param string $upload_path\n * @param string $file_name\n *\n * @return string the form\n */\nfunction build_missing_files_form($missing_files, $upload_path, $file_name)\n{\n    // Do we need a / or not?\n    $added_slash = ($upload_path == '/') ? '' : '/';\n    $folder_id = DocumentManager::get_document_id(api_get_course_info(), $upload_path);\n    // Build the form\n    $form = \"<p><strong>\".get_lang('MissingImagesDetected').\"</strong></p>\"\n        .\"<form method=\\\"post\\\" action=\\\"\".api_get_self().\"\\\" enctype=\\\"multipart/form-data\\\">\"\n        // Related_file is the path to the file that has missing images\n        .\"<input type=\\\"hidden\\\" name=\\\"related_file\\\" value=\\\"\".$upload_path.$added_slash.$file_name.\"\\\" />\"\n        .\"<input type=\\\"hidden\\\" name=\\\"upload_path\\\" value=\\\"\".$upload_path.\"\\\" />\"\n        .\"<input type=\\\"hidden\\\" name=\\\"id\\\" value=\\\"\".$folder_id.\"\\\" />\"\n        .\"<table border=\\\"0\\\">\";\n    foreach ($missing_files as &$this_img_file_path) {\n        $form .= \"<tr>\"\n            .\"<td>\".basename($this_img_file_path).\" : </td>\"\n            .\"<td>\"\n            .\"<input type=\\\"file\\\" name=\\\"img_file[]\\\"/>\"\n            .\"<input type=\\\"hidden\\\" name=\\\"img_file_path[]\\\" value=\\\"\".$this_img_file_path.\"\\\" />\"\n            .\"</td>\"\n            .\"</tr>\";\n    }\n    $form .= \"</table>\"\n        .\"<button type='submit' name=\\\"cancel_submit_image\\\" value=\\\"\".get_lang('Cancel').\"\\\" class=\\\"cancel\\\">\".get_lang('Cancel').\"</button>\"\n        .\"<button type='submit' name=\\\"submit_image\\\" value=\\\"\".get_lang('Ok').\"\\\" class=\\\"save\\\">\".get_lang('Ok').\"</button>\"\n        .\"</form>\";\n\n    return $form;\n}\n\n/**\n * This recursive function can be used during the upgrade process form older\n * versions of Chamilo\n * It crawls the given directory, checks if the file is in the DB and adds\n * it if it's not.\n *\n * @param array  $courseInfo\n * @param array  $userInfo\n * @param string $base_work_dir    course document dir\n * @param string $folderPath       folder to read\n * @param int    $sessionId\n * @param int    $groupId          group.id\n * @param bool   $output\n * @param array  $parent\n * @param string $whatIfFileExists\n *\n * @return bool\n */\nfunction add_all_documents_in_folder_to_database(\n    $courseInfo,\n    $userInfo,\n    $base_work_dir,\n    $folderPath,\n    $sessionId = 0,\n    $groupId = 0,\n    $output = false,\n    $parent = [],\n    $whatIfFileExists = 'overwrite'\n) {\n    if (empty($userInfo) || empty($courseInfo)) {\n        return false;\n    }\n\n    $userId = $userInfo['user_id'];\n\n    // Open dir\n    $handle = opendir($folderPath);\n\n    if (is_dir($folderPath)) {\n        // Run trough\n        while ($file = readdir($handle)) {\n            if ($file == '.' || $file == '..') {\n                continue;\n            }\n\n            $parentPath = '';\n            if (!empty($parent) && isset($parent['path'])) {\n                $parentPath = $parent['path'];\n                if ($parentPath == '/') {\n                    $parentPath = '';\n                }\n            }\n\n            $completePath = $parentPath.'/'.$file;\n            $sysFolderPath = $folderPath.'/'.$file;\n\n            // Is directory?\n            if (is_dir($sysFolderPath)) {\n                $folderExists = DocumentManager::folderExists(\n                    $completePath,\n                    $courseInfo,\n                    $sessionId,\n                    $groupId\n                );\n\n                if ($folderExists === true) {\n                    switch ($whatIfFileExists) {\n                        case 'overwrite':\n                            $documentId = DocumentManager::get_document_id($courseInfo, $completePath, $sessionId);\n                            if ($documentId) {\n                                $newFolderData = DocumentManager::get_document_data_by_id(\n                                    $documentId,\n                                    $courseInfo['code'],\n                                    false,\n                                    $sessionId\n                                );\n                            }\n                            break;\n                        case 'rename':\n                            $newFolderData = create_unexisting_directory(\n                                $courseInfo,\n                                $userId,\n                                $sessionId,\n                                $groupId,\n                                null,\n                                $base_work_dir,\n                                $completePath,\n                                null,\n                                null,\n                                true\n                            );\n                            break;\n                        case 'nothing':\n                            if ($output) {\n                                $documentId = DocumentManager::get_document_id($courseInfo, $completePath, $sessionId);\n                                if ($documentId) {\n                                    $folderData = DocumentManager::get_document_data_by_id(\n                                        $documentId,\n                                        $courseInfo['code'],\n                                        false,\n                                        $sessionId\n                                    );\n                                    Display::addFlash(\n                                        Display::return_message(\n                                            $folderData['path'].' '.get_lang('UplAlreadyExists'),\n                                            'warning'\n                                        )\n                                    );\n                                }\n                            }\n                            continue 2;\n                            break;\n                    }\n                } else {\n                    $newFolderData = create_unexisting_directory(\n                        $courseInfo,\n                        $userId,\n                        $sessionId,\n                        $groupId,\n                        null,\n                        $base_work_dir,\n                        $completePath,\n                        null,\n                        null,\n                        false\n                    );\n                }\n\n                // Recursive\n                add_all_documents_in_folder_to_database(\n                    $courseInfo,\n                    $userInfo,\n                    $base_work_dir,\n                    $sysFolderPath,\n                    $sessionId,\n                    $groupId,\n                    $output,\n                    $newFolderData,\n                    $whatIfFileExists\n                );\n            } else {\n                // Rename\n                $uploadedFile = [\n                    'name' => $file,\n                    'tmp_name' => $sysFolderPath,\n                    'size' => filesize($sysFolderPath),\n                    'type' => null,\n                    'from_file' => true,\n                    'move_file' => true,\n                ];\n\n                handle_uploaded_document(\n                    $courseInfo,\n                    $uploadedFile,\n                    $base_work_dir,\n                    $parentPath,\n                    $userId,\n                    $groupId,\n                    null,\n                    0,\n                    $whatIfFileExists,\n                    $output,\n                    false,\n                    null,\n                    $sessionId\n                );\n            }\n        }\n    }\n}\n\n/**\n * Get the uploax max filesize from ini php in bytes.\n *\n * @return int\n */\nfunction getIniMaxFileSizeInBytes($humanReadable = false, $checkMessageSetting = false)\n{\n    $maxSize = 0;\n    $uploadMaxFilesize = ini_get('upload_max_filesize');\n    $fileSizeForTeacher = getFileUploadSizeLimitForTeacher();\n    if (!empty($fileSizeForTeacher)) {\n        $uploadMaxFilesize = $fileSizeForTeacher.'M';\n    }\n\n    if (empty($fileSizeForTeacher) && $checkMessageSetting) {\n        $uploadMaxFilesize = api_get_setting('message_max_upload_filesize'); // in bytes\n        if ($humanReadable) {\n            $uploadMaxFilesize = format_file_size($uploadMaxFilesize);\n        }\n\n        return $uploadMaxFilesize;\n    }\n\n    if ($humanReadable) {\n        return $uploadMaxFilesize;\n    }\n\n    if (preg_match('/^([0-9]+)([a-zA-Z]*)$/', $uploadMaxFilesize, $matches)) {\n        // see http://www.php.net/manual/en/faq.using.php#faq.using.shorthandbytes\n        switch (strtoupper($matches['2'])) {\n            case 'G':\n                $maxSize = $matches['1'] * 1073741824;\n                break;\n            case 'M':\n                $maxSize = $matches['1'] * 1048576;\n                break;\n            case 'K':\n                $maxSize = $matches['1'] * 1024;\n                break;\n            default:\n                $maxSize = $matches['1'];\n        }\n    }\n    $maxSize = (int) $maxSize;\n\n    return $maxSize;\n}\n\n/**\n * Get the uploax max filesize from configuration.php for trainers in bytes.\n *\n * @return int\n */\nfunction getFileUploadSizeLimitForTeacher()\n{\n    $size = 0;\n    $settingValue = (int) api_get_configuration_value('file_upload_size_limit_for_teacher'); // setting value in MB\n    if ($settingValue > 0 && (api_is_allowed_to_create_course() && !api_is_platform_admin())) {\n        $size = $settingValue;\n    }\n\n    return $size;\n}\n"], "filenames": ["main/inc/lib/fileUpload.lib.php"], "buggy_code_start_loc": [13], "buggy_code_end_loc": [579], "fixing_code_start_loc": [14], "fixing_code_end_loc": [600], "type": "CWE-434", "message": "An arbitrary file upload vulnerability in the /fileUpload.lib.php component of Chamilo 1.11.* up to v1.11.18 allows attackers to execute arbitrary code via uploading a crafted SVG file.", "other": {"cve": {"id": "CVE-2023-34944", "sourceIdentifier": "cve@mitre.org", "published": "2023-06-13T21:15:10.253", "lastModified": "2023-06-20T17:15:27.857", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An arbitrary file upload vulnerability in the /fileUpload.lib.php component of Chamilo 1.11.* up to v1.11.18 allows attackers to execute arbitrary code via uploading a crafted SVG file."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.18", "matchCriteriaId": "2633146D-0E64-40CC-97EF-DF2774900717"}]}]}], "references": [{"url": "http://chamilo.com", "source": "cve@mitre.org", "tags": ["Product"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/0d0c88c4806280ac9b70a299d6e3099269c9bc54", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/f6e83550c2d17fc93a65ec4be602a78312289f37", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://support.chamilo.org/projects/chamilo-18/wiki/Security_issues#Issue-113-2023-05-31-Low-impact-Low-risk-XSS-through-SVG", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/0d0c88c4806280ac9b70a299d6e3099269c9bc54"}}