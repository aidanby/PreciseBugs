{"buggy_code": ["<?php\n\nclass Store{\n\tprivate static $pdo = null;\n\n\tpublic function __construct(){\n\t\tif(Store::$pdo === null)\n\t\t\t$this->init();\n\t}\n\n\tprivate function init(){\n\t\t$host = 'host=' . Config::$PDO_HOST;\n\t\t$db = 'dbname=' . Config::$PDO_DATABASE;\n\t\t$charset = 'charset=' . Config::$PDO_CHARSET;\n\t\t$user = Config::$PDO_USER;\n\t\tStore::$pdo = new PDO(\n\t\t\t'mysql:' . implode(';', array($host, $db, $charset) ),\n\t\t\tConfig::$PDO_USER,\n\t\t\tConfig::$PDO_PASSWORD\n\t\t);\n\t}\n\n\tprivate function packValue($value){\n\t\tif(is_bool($value)){\n\t\t\t$value = ($value === true) ? '1' : '0';\n\t\t}elseif(is_numeric($value)){\n\t\t\t$value = $value;\n\t\t}else{\n\t\t\t$value = '\"' . $value . '\"';\n\t\t}\n\t\treturn $value;\n\t}\n\n\tpublic function getById($table, $id){\n\t\t$query = 'SELECT * FROM `wuersch`.`' . $table . '` WHERE ';\n\t\tif(!is_numeric($id) && strlen($id)==32){\n\t\t\t$query .= '`id_md5`=\"' . $id . '\"';\n\t\t}else{\n\t\t\t$query .= '`id`=' . $id;\n\t\t}\n\t\t$sth = Store::$pdo->prepare($query . ';');\n\t\t$sth->execute();\n\t\t$result = $sth->fetchAll(PDO::FETCH_CLASS, ucfirst($table));\n\t\tif(count($result) === 1){\n\t\t\treturn $result[0];\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic function getByCustomQuery($query){\n\t\t$sth = Store::$pdo->prepare($query . ';');\n\t\t$sth->execute();\n\t\t$result = $sth->fetchAll(PDO::FETCH_ASSOC);\n\t\treturn $result;\n\t}\n\n\tpublic function getByColumns($table, $columns, $combination = 'AND'){\n\t\t$query = 'SELECT * FROM `wuersch`.`' . $table . '` WHERE ';\n\t\tforeach($columns as $key=>$value){\n\t\t\t$query .= '`' . $key . '`=';\n\t\t\tif(is_numeric($value))\n\t\t\t\t$query .= $value;\n\t\t\telse\n\t\t\t\t$query .= '\"' . $value . '\"';\n\t\t\t$query .= ' ' . $combination . ' ';\n\t\t}\n\t\t$query = substr($query, 0, (-2-strlen($combination)));\n\t\t$sth = Store::$pdo->prepare($query . ' LIMIT 100;');\n\t\t$sth->execute();\n\t\treturn $sth->fetchAll(PDO::FETCH_CLASS, ucfirst($table));\n\t}\n\n\tpublic function insert($table, $data){\n\t\tif(!is_array($data))\n\t\t\treturn -1;\n\t\t$columns = '`' . implode('`, `', array_keys($data)) . '`';\n\t\t$values = '';\n\t\tforeach($data as $value){\n\t\t\t$values .= $this->packValue($value) . ', ';\n\t\t}\n\t\t$values = substr($values, 0, -2);\n\t\t$result = Store::$pdo->exec('INSERT INTO `wuersch`.`' . $table . '`(' . $columns . ') VALUES(' . $values . ');');\n\t\treturn Store::$pdo->lastInsertId();\n\t}\n\n\tpublic function update($table, $id, $data){\n\t\tif(!is_array($data))\n\t\t\treturn false;\n\t\t$columns = '';\n\t\tforeach($data as $name=>$value){\n\t\t\t$columns .= '`' . $name . '`=' . $this->packValue($value) . ', ';\n\t\t}\n\t\t$columns = substr($columns, 0, -2);\n\t\t$query = 'UPDATE `wuersch`.`' . $table . '` SET ' . $columns . ' ';\n\t\tif(!is_numeric($id) && strlen($id)==32){\n\t\t\t$query .= 'WHERE `id_md5`=\"' . $id . '\"';\n\t\t}else{\n\t\t\t$query .= 'WHERE `id`=' . $id;\n\t\t}\n\t\treturn Store::$pdo->exec($query . ';');\n\t}\n}\n\n?>\n"], "fixing_code": ["<?php\n\nclass Store{\n\tprivate static $pdo = null;\n\n\tpublic function __construct(){\n\t\tif(Store::$pdo === null)\n\t\t\t$this->init();\n\t}\n\n\tprivate function init(){\n\t\t$host = 'host=' . Config::$PDO_HOST;\n\t\t$db = 'dbname=' . Config::$PDO_DATABASE;\n\t\t$charset = 'charset=' . Config::$PDO_CHARSET;\n\t\t$user = Config::$PDO_USER;\n\t\tStore::$pdo = new PDO(\n\t\t\t'mysql:' . implode(';', array($host, $db, $charset) ),\n\t\t\tConfig::$PDO_USER,\n\t\t\tConfig::$PDO_PASSWORD\n\t\t);\n\t}\n\n\tprivate function packValue($value){\n\t\tif(is_bool($value)){\n\t\t\t$value = ($value === true) ? '1' : '0';\n\t\t}elseif(is_numeric($value)){\n\t\t\t$value = $value;\n\t\t}else{\n\t\t\t$value = '\"' . $value . '\"';\n\t\t}\n\t\treturn $value;\n\t}\n\n\tpublic function getById($table, $id){\n\t\t$query = 'SELECT * FROM `wuersch`.`' . $table . '` WHERE ';\n\t\tif(!is_numeric($id) && strlen($id)==32){\n\t\t\t$query .= '`id_md5`=?';\n\t\t}else{\n\t\t\t$query .= '`id`=?';\n\t\t}\n\t\t$stmt = Store::$pdo->prepare($query . ';');\n\t\t$stmt->bindParam(1, $id);\n\t\t$stmt->execute();\n\t\t$result = $stmt->fetchAll(PDO::FETCH_CLASS, ucfirst($table));\n\t\tif(count($result) === 1){\n\t\t\treturn $result[0];\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic function getByCustomQuery($query){\n\t\t$sth = Store::$pdo->prepare($query . ';');\n\t\t$sth->execute();\n\t\t$result = $sth->fetchAll(PDO::FETCH_ASSOC);\n\t\treturn $result;\n\t}\n\n\tpublic function getByColumns($table, $columns, $combination = 'AND'){\n\t\t$query = 'SELECT * FROM `wuersch`.`' . $table . '` WHERE ';\n\t\t\n\t\tforeach($columns as $key=>$value){\n\t\t\t$query .= '`' . $key . '`=? ' . $combination . ' ';\n\t\t}\n\t\t$query = substr($query, 0, (-2-strlen($combination)));\n\t\t$stmt = Store::$pdo->prepare($query . ';');\n\t\tforeach(array_values($columns) as $i=>$value)\n\t\t\t$stmt->bindParam($i+1, $value);\n\t\t$stmt->execute();\n\t\treturn $stmt->fetchAll(PDO::FETCH_CLASS, ucfirst($table));\n\t}\n\n\tpublic function insert($table, $data){\n\t\tif(!is_array($data))\n\t\t\treturn -1;\n\t\t$query = 'INSERT INTO `wuersch`.`' . $table . '` (';\n\t\t$query .= '`' . implode('`, `', array_keys($data)) . '`) VALUES (';\n\t\tfor($i=0; $i<count($data); $i++){\n\t\t\t$query .= '?, ';\n\t\t}\n\t\t$query = substr($query, 0, -2) . ');';\n\t\t$stmt = Store::$pdo->prepare($query);\n\t\tforeach(array_values($data) as $i=>$value){\n\t\t\t$stmt->bindParam($i+1, $value);\n\t\t}\n\t\t\n\t\t$result = $stmt->execute();\n\t\treturn Store::$pdo->lastInsertId();\n\t}\n\n\tpublic function update($table, $id, $data){\n\t\tif(!is_array($data))\n\t\t\treturn false;\n\t\t$columns = '';\n\t\t$query = 'UPDATE `wuersch`.`' . $table . '` SET ';\n\t\tforeach($data as $name=>$value){\n\t\t\t$query .= '`' . $name . '`=?, ';\n\t\t}\n\t\t$query = substr($query, 0, -2);\n\t\tif(!is_numeric($id) && strlen($id)==32){\n\t\t\t$query .= ' WHERE `id_md5`=?;';\n\t\t}else{\n\t\t\t$query .= ' WHERE `id`=?;';\n\t\t}\n\t\t$stmt = Store::$pdo->prepare($query);\n\t\tforeach(array_values($data) as $i=>$value)\n\t\t\t$stmt->bindParam($i+1, $value);\n\t\t$stmt->bindParam(count($data)+1, $id);\n\t\treturn $stmt->execute();\n\t}\n}\n\n?>\n"], "filenames": ["backend/base/Store.class.php"], "buggy_code_start_loc": [37], "buggy_code_end_loc": [101], "fixing_code_start_loc": [37], "fixing_code_end_loc": [109], "type": "CWE-89", "message": "A vulnerability was found in tynx wuersch and classified as critical. Affected by this issue is the function packValue/getByCustomQuery of the file backend/base/Store.class.php. The manipulation leads to sql injection. The name of the patch is 66d4718750a741d1053d327a79e285fd50372519. It is recommended to apply a patch to fix this issue. VDB-218462 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10066", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-18T00:15:11.697", "lastModified": "2023-01-25T02:33:05.557", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in tynx wuersch and classified as critical. Affected by this issue is the function packValue/getByCustomQuery of the file backend/base/Store.class.php. The manipulation leads to sql injection. The name of the patch is 66d4718750a741d1053d327a79e285fd50372519. It is recommended to apply a patch to fix this issue. VDB-218462 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wuersch_project:wuersch:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-03-27", "matchCriteriaId": "BFF66861-8B8B-4B08-A85D-3F181A1A44FC"}]}]}], "references": [{"url": "https://github.com/tynx/wuersch/commit/66d4718750a741d1053d327a79e285fd50372519", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218462", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218462", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tynx/wuersch/commit/66d4718750a741d1053d327a79e285fd50372519"}}