{"buggy_code": ["//go:build integration\n// +build integration\n\npackage sqlstore\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/grafana/grafana/pkg/models\"\n\t\"github.com/grafana/grafana/pkg/setting\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestUserDataAccess(t *testing.T) {\n\n\tss := InitTestDB(t)\n\n\tt.Run(\"Testing DB - creates and loads user\", func(t *testing.T) {\n\t\tcmd := models.CreateUserCommand{\n\t\t\tEmail: \"usertest@test.com\",\n\t\t\tName:  \"user name\",\n\t\t\tLogin: \"user_test_login\",\n\t\t}\n\t\tuser, err := ss.CreateUser(context.Background(), cmd)\n\t\trequire.NoError(t, err)\n\n\t\tquery := models.GetUserByIdQuery{Id: user.Id}\n\t\terr = ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Equal(t, query.Result.Email, \"usertest@test.com\")\n\t\trequire.Equal(t, query.Result.Password, \"\")\n\t\trequire.Len(t, query.Result.Rands, 10)\n\t\trequire.Len(t, query.Result.Salt, 10)\n\t\trequire.False(t, query.Result.IsDisabled)\n\n\t\tquery = models.GetUserByIdQuery{Id: user.Id}\n\t\terr = ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Equal(t, query.Result.Email, \"usertest@test.com\")\n\t\trequire.Equal(t, query.Result.Password, \"\")\n\t\trequire.Len(t, query.Result.Rands, 10)\n\t\trequire.Len(t, query.Result.Salt, 10)\n\t\trequire.False(t, query.Result.IsDisabled)\n\t})\n\n\tt.Run(\"Testing DB - creates and loads disabled user\", func(t *testing.T) {\n\t\tss = InitTestDB(t)\n\t\tcmd := models.CreateUserCommand{\n\t\t\tEmail:      \"usertest@test.com\",\n\t\t\tName:       \"user name\",\n\t\t\tLogin:      \"user_test_login\",\n\t\t\tIsDisabled: true,\n\t\t}\n\n\t\tuser, err := ss.CreateUser(context.Background(), cmd)\n\t\trequire.Nil(t, err)\n\n\t\tquery := models.GetUserByIdQuery{Id: user.Id}\n\t\terr = ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Equal(t, query.Result.Email, \"usertest@test.com\")\n\t\trequire.Equal(t, query.Result.Password, \"\")\n\t\trequire.Len(t, query.Result.Rands, 10)\n\t\trequire.Len(t, query.Result.Salt, 10)\n\t\trequire.True(t, query.Result.IsDisabled)\n\t})\n\n\tt.Run(\"Testing DB - create user assigned to other organization\", func(t *testing.T) {\n\t\tss = InitTestDB(t)\n\n\t\tautoAssignOrg := setting.AutoAssignOrg\n\t\tsetting.AutoAssignOrg = true\n\t\tdefer func() {\n\t\t\tsetting.AutoAssignOrg = autoAssignOrg\n\t\t}()\n\n\t\torgCmd := &models.CreateOrgCommand{Name: \"Some Test Org\"}\n\t\terr := CreateOrg(context.Background(), orgCmd)\n\t\trequire.Nil(t, err)\n\n\t\tcmd := models.CreateUserCommand{\n\t\t\tEmail: \"usertest@test.com\",\n\t\t\tName:  \"user name\",\n\t\t\tLogin: \"user_test_login\",\n\t\t\tOrgId: orgCmd.Result.Id,\n\t\t}\n\n\t\tuser, err := ss.CreateUser(context.Background(), cmd)\n\t\trequire.Nil(t, err)\n\n\t\tquery := models.GetUserByIdQuery{Id: user.Id}\n\t\terr = ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Equal(t, query.Result.Email, \"usertest@test.com\")\n\t\trequire.Equal(t, query.Result.Password, \"\")\n\t\trequire.Len(t, query.Result.Rands, 10)\n\t\trequire.Len(t, query.Result.Salt, 10)\n\t\trequire.False(t, query.Result.IsDisabled)\n\t\trequire.Equal(t, query.Result.OrgId, orgCmd.Result.Id)\n\n\t\tconst nonExistingOrgID = 10000\n\t\tcmd = models.CreateUserCommand{\n\t\t\tEmail: \"usertest@test.com\",\n\t\t\tName:  \"user name\",\n\t\t\tLogin: \"user_test_login\",\n\t\t\tOrgId: nonExistingOrgID,\n\t\t}\n\n\t\t_, err = ss.CreateUser(context.Background(), cmd)\n\t\trequire.Equal(t, err, models.ErrOrgNotFound)\n\t})\n\n\tt.Run(\"Testing DB - multiple users\", func(t *testing.T) {\n\t\tss = InitTestDB(t)\n\n\t\tcreateFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\n\t\t// Return the first page of users and a total count\n\t\tquery := models.SearchUsersQuery{Query: \"\", Page: 1, Limit: 3}\n\t\terr := ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 3)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\n\t\t// Return the second page of users and a total count\n\t\tquery = models.SearchUsersQuery{Query: \"\", Page: 2, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 2)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\n\t\t// Return list of users matching query on user name\n\t\tquery = models.SearchUsersQuery{Query: \"use\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 3)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\n\t\tquery = models.SearchUsersQuery{Query: \"ser1\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 1)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 1)\n\n\t\tquery = models.SearchUsersQuery{Query: \"USER1\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 1)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 1)\n\n\t\tquery = models.SearchUsersQuery{Query: \"idontexist\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 0)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 0)\n\n\t\t// Return list of users matching query on email\n\t\tquery = models.SearchUsersQuery{Query: \"ser1@test.com\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 1)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 1)\n\n\t\t// Return list of users matching query on login name\n\t\tquery = models.SearchUsersQuery{Query: \"loginuser1\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 1)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 1)\n\t})\n\n\tt.Run(\"Testing DB - return list users based on their is_disabled flag\", func(t *testing.T) {\n\t\tss = InitTestDB(t)\n\t\tcreateFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: i%2 == 0,\n\t\t\t}\n\t\t})\n\n\t\tisDisabled := false\n\t\tquery := models.SearchUsersQuery{IsDisabled: &isDisabled}\n\t\terr := ss.SearchUsers(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, query.Result.Users, 2)\n\n\t\tfirst, third := false, false\n\t\tfor _, user := range query.Result.Users {\n\t\t\tif user.Name == \"user1\" {\n\t\t\t\tfirst = true\n\t\t\t}\n\n\t\t\tif user.Name == \"user3\" {\n\t\t\t\tthird = true\n\t\t\t}\n\t\t}\n\n\t\trequire.True(t, first)\n\t\trequire.True(t, third)\n\n\t\t// Re-init DB\n\t\tss = InitTestDB(t)\n\t\tusers := createFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\n\t\terr = ss.AddOrgUser(context.Background(), &models.AddOrgUserCommand{\n\t\t\tLoginOrEmail: users[1].Login, Role: models.ROLE_VIEWER,\n\t\t\tOrgId: users[0].OrgId, UserId: users[1].Id,\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\terr = updateDashboardAcl(t, ss, 1, &models.DashboardAcl{\n\t\t\tDashboardID: 1, OrgID: users[0].OrgId, UserID: users[1].Id,\n\t\t\tPermission: models.PERMISSION_EDIT,\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\terr = ss.SavePreferences(context.Background(), &models.SavePreferencesCommand{\n\t\t\tUserId: users[1].Id, OrgId: users[0].OrgId, HomeDashboardId: 1, Theme: \"dark\",\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\t// When the user is deleted\n\t\terr = ss.DeleteUser(context.Background(), &models.DeleteUserCommand{UserId: users[1].Id})\n\t\trequire.Nil(t, err)\n\n\t\tquery1 := &models.GetOrgUsersQuery{OrgId: users[0].OrgId}\n\t\terr = GetOrgUsersForTest(query1)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, query1.Result, 1)\n\n\t\tpermQuery := &models.GetDashboardAclInfoListQuery{DashboardID: 1, OrgID: users[0].OrgId}\n\t\terr = ss.GetDashboardAclInfoList(context.Background(), permQuery)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, permQuery.Result, 0)\n\n\t\tprefsQuery := &models.GetPreferencesQuery{OrgId: users[0].OrgId, UserId: users[1].Id}\n\t\terr = ss.GetPreferences(context.Background(), prefsQuery)\n\t\trequire.Nil(t, err)\n\n\t\trequire.EqualValues(t, prefsQuery.Result.OrgId, 0)\n\t\trequire.EqualValues(t, prefsQuery.Result.UserId, 0)\n\n\t\t// A user is an org member and has been assigned permissions\n\t\t// Re-init DB\n\t\tss = InitTestDB(t)\n\t\tusers = createFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\t\terr = ss.AddOrgUser(context.Background(), &models.AddOrgUserCommand{\n\t\t\tLoginOrEmail: users[1].Login, Role: models.ROLE_VIEWER,\n\t\t\tOrgId: users[0].OrgId, UserId: users[1].Id,\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\terr = updateDashboardAcl(t, ss, 1, &models.DashboardAcl{\n\t\t\tDashboardID: 1, OrgID: users[0].OrgId, UserID: users[1].Id,\n\t\t\tPermission: models.PERMISSION_EDIT,\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\terr = ss.SavePreferences(context.Background(), &models.SavePreferencesCommand{\n\t\t\tUserId: users[1].Id, OrgId: users[0].OrgId, HomeDashboardId: 1, Theme: \"dark\",\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\tss.CacheService.Flush()\n\n\t\tquery3 := &models.GetSignedInUserQuery{OrgId: users[1].OrgId, UserId: users[1].Id}\n\t\terr = ss.GetSignedInUserWithCacheCtx(context.Background(), query3)\n\t\trequire.Nil(t, err)\n\t\trequire.NotNil(t, query3.Result)\n\t\trequire.Equal(t, query3.OrgId, users[1].OrgId)\n\t\terr = ss.SetUsingOrg(context.Background(), &models.SetUsingOrgCommand{UserId: users[1].Id, OrgId: users[0].OrgId})\n\t\trequire.Nil(t, err)\n\t\tquery4 := &models.GetSignedInUserQuery{OrgId: 0, UserId: users[1].Id}\n\t\terr = ss.GetSignedInUserWithCacheCtx(context.Background(), query4)\n\t\trequire.Nil(t, err)\n\t\trequire.NotNil(t, query4.Result)\n\t\trequire.Equal(t, query4.Result.OrgId, users[0].OrgId)\n\n\t\tcacheKey := newSignedInUserCacheKey(query4.Result.OrgId, query4.UserId)\n\t\t_, found := ss.CacheService.Get(cacheKey)\n\t\trequire.True(t, found)\n\n\t\tdisableCmd := models.BatchDisableUsersCommand{\n\t\t\tUserIds:    []int64{users[0].Id, users[1].Id, users[2].Id, users[3].Id, users[4].Id},\n\t\t\tIsDisabled: true,\n\t\t}\n\n\t\terr = ss.BatchDisableUsers(context.Background(), &disableCmd)\n\t\trequire.Nil(t, err)\n\n\t\tisDisabled = true\n\t\tquery5 := &models.SearchUsersQuery{IsDisabled: &isDisabled}\n\t\terr = ss.SearchUsers(context.Background(), query5)\n\n\t\trequire.Nil(t, err)\n\t\trequire.EqualValues(t, query5.Result.TotalCount, 5)\n\n\t\t// the user is deleted\n\t\terr = ss.DeleteUser(context.Background(), &models.DeleteUserCommand{UserId: users[1].Id})\n\t\trequire.Nil(t, err)\n\n\t\t// delete connected org users and permissions\n\t\tquery2 := &models.GetOrgUsersQuery{OrgId: users[0].OrgId}\n\t\terr = GetOrgUsersForTest(query2)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, query2.Result, 1)\n\n\t\tpermQuery = &models.GetDashboardAclInfoListQuery{DashboardID: 1, OrgID: users[0].OrgId}\n\t\terr = ss.GetDashboardAclInfoList(context.Background(), permQuery)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, permQuery.Result, 0)\n\n\t\tprefsQuery = &models.GetPreferencesQuery{OrgId: users[0].OrgId, UserId: users[1].Id}\n\t\terr = ss.GetPreferences(context.Background(), prefsQuery)\n\t\trequire.Nil(t, err)\n\n\t\trequire.EqualValues(t, prefsQuery.Result.OrgId, 0)\n\t\trequire.EqualValues(t, prefsQuery.Result.UserId, 0)\n\t})\n\n\tss = InitTestDB(t)\n\n\tt.Run(\"Testing DB - enable all users\", func(t *testing.T) {\n\n\t\tusers := createFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: true,\n\t\t\t}\n\t\t})\n\n\t\tdisableCmd := models.BatchDisableUsersCommand{\n\t\t\tUserIds:    []int64{users[0].Id, users[1].Id, users[2].Id, users[3].Id, users[4].Id},\n\t\t\tIsDisabled: false,\n\t\t}\n\n\t\terr := ss.BatchDisableUsers(context.Background(), &disableCmd)\n\t\trequire.Nil(t, err)\n\n\t\tisDisabled := false\n\t\tquery := &models.SearchUsersQuery{IsDisabled: &isDisabled}\n\t\terr = ss.SearchUsers(context.Background(), query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\t})\n\n\tss = InitTestDB(t)\n\n\tt.Run(\"Testing DB - disable only specific users\", func(t *testing.T) {\n\t\tusers := createFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\n\t\tuserIdsToDisable := []int64{}\n\t\tfor i := 0; i < 3; i++ {\n\t\t\tuserIdsToDisable = append(userIdsToDisable, users[i].Id)\n\t\t}\n\t\tdisableCmd := models.BatchDisableUsersCommand{\n\t\t\tUserIds:    userIdsToDisable,\n\t\t\tIsDisabled: true,\n\t\t}\n\n\t\terr := ss.BatchDisableUsers(context.Background(), &disableCmd)\n\t\trequire.Nil(t, err)\n\n\t\tquery := models.SearchUsersQuery{}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\t\tfor _, user := range query.Result.Users {\n\t\t\tshouldBeDisabled := false\n\n\t\t\t// Check if user id is in the userIdsToDisable list\n\t\t\tfor _, disabledUserId := range userIdsToDisable {\n\t\t\t\tif user.Id == disabledUserId {\n\t\t\t\t\trequire.True(t, user.IsDisabled)\n\t\t\t\t\tshouldBeDisabled = true\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise user shouldn't be disabled\n\t\t\tif !shouldBeDisabled {\n\t\t\t\trequire.False(t, user.IsDisabled)\n\t\t\t}\n\t\t}\n\t})\n\n\tss = InitTestDB(t)\n\n\tt.Run(\"Testing DB - search users\", func(t *testing.T) {\n\t\t// Since previous tests were destructive\n\t\tcreateFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\t})\n\n\tt.Run(\"Testing DB - grafana admin users\", func(t *testing.T) {\n\n\t\tss = InitTestDB(t)\n\n\t\tcreateUserCmd := models.CreateUserCommand{\n\t\t\tEmail:   fmt.Sprint(\"admin\", \"@test.com\"),\n\t\t\tName:    \"admin\",\n\t\t\tLogin:   \"admin\",\n\t\t\tIsAdmin: true,\n\t\t}\n\t\tuser, err := ss.CreateUser(context.Background(), createUserCmd)\n\t\trequire.Nil(t, err)\n\n\t\t// Cannot make themselves a non-admin\n\t\tupdatePermsError := ss.UpdateUserPermissions(user.Id, false)\n\n\t\trequire.Equal(t, updatePermsError, models.ErrLastGrafanaAdmin)\n\n\t\tquery := models.GetUserByIdQuery{Id: user.Id}\n\t\tgetUserError := ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, getUserError)\n\n\t\trequire.True(t, query.Result.IsAdmin)\n\n\t\t// One user\n\t\tconst email = \"user@test.com\"\n\t\tconst username = \"user\"\n\t\tcreateUserCmd = models.CreateUserCommand{\n\t\t\tEmail: email,\n\t\t\tName:  \"user\",\n\t\t\tLogin: username,\n\t\t}\n\t\t_, err = ss.CreateUser(context.Background(), createUserCmd)\n\t\trequire.Nil(t, err)\n\n\t\t// When trying to create a new user with the same email, an error is returned\n\t\tcreateUserCmd = models.CreateUserCommand{\n\t\t\tEmail:        email,\n\t\t\tName:         \"user2\",\n\t\t\tLogin:        \"user2\",\n\t\t\tSkipOrgSetup: true,\n\t\t}\n\t\t_, err = ss.CreateUser(context.Background(), createUserCmd)\n\t\trequire.Equal(t, err, models.ErrUserAlreadyExists)\n\n\t\t// When trying to create a new user with the same login, an error is returned\n\t\tcreateUserCmd = models.CreateUserCommand{\n\t\t\tEmail:        \"user2@test.com\",\n\t\t\tName:         \"user2\",\n\t\t\tLogin:        username,\n\t\t\tSkipOrgSetup: true,\n\t\t}\n\t\t_, err = ss.CreateUser(context.Background(), createUserCmd)\n\t\trequire.Equal(t, err, models.ErrUserAlreadyExists)\n\t})\n}\n\nfunc GetOrgUsersForTest(query *models.GetOrgUsersQuery) error {\n\tquery.Result = make([]*models.OrgUserDTO, 0)\n\tsess := x.Table(\"org_user\")\n\tsess.Join(\"LEFT \", x.Dialect().Quote(\"user\"), fmt.Sprintf(\"org_user.user_id=%s.id\", x.Dialect().Quote(\"user\")))\n\tsess.Where(\"org_user.org_id=?\", query.OrgId)\n\tsess.Cols(\"org_user.org_id\", \"org_user.user_id\", \"user.email\", \"user.login\", \"org_user.role\")\n\n\terr := sess.Find(&query.Result)\n\treturn err\n}\n\nfunc createFiveTestUsers(t *testing.T, sqlStore *SQLStore, fn func(i int) *models.CreateUserCommand) []models.User {\n\tt.Helper()\n\n\tusers := []models.User{}\n\tfor i := 0; i < 5; i++ {\n\t\tcmd := fn(i)\n\n\t\tuser, err := sqlStore.CreateUser(context.Background(), *cmd)\n\t\tusers = append(users, *user)\n\n\t\trequire.Nil(t, err)\n\t}\n\n\treturn users\n}\n"], "fixing_code": ["//go:build integration\n// +build integration\n\npackage sqlstore\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/grafana/grafana/pkg/models\"\n\t\"github.com/grafana/grafana/pkg/setting\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestUserDataAccess(t *testing.T) {\n\n\tss := InitTestDB(t)\n\n\tt.Run(\"Testing DB - creates and loads user\", func(t *testing.T) {\n\t\tcmd := models.CreateUserCommand{\n\t\t\tEmail: \"usertest@test.com\",\n\t\t\tName:  \"user name\",\n\t\t\tLogin: \"user_test_login\",\n\t\t}\n\t\tuser, err := ss.CreateUser(context.Background(), cmd)\n\t\trequire.NoError(t, err)\n\n\t\tquery := models.GetUserByIdQuery{Id: user.Id}\n\t\terr = ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Equal(t, query.Result.Email, \"usertest@test.com\")\n\t\trequire.Equal(t, query.Result.Password, \"\")\n\t\trequire.Len(t, query.Result.Rands, 10)\n\t\trequire.Len(t, query.Result.Salt, 10)\n\t\trequire.False(t, query.Result.IsDisabled)\n\n\t\tquery = models.GetUserByIdQuery{Id: user.Id}\n\t\terr = ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Equal(t, query.Result.Email, \"usertest@test.com\")\n\t\trequire.Equal(t, query.Result.Password, \"\")\n\t\trequire.Len(t, query.Result.Rands, 10)\n\t\trequire.Len(t, query.Result.Salt, 10)\n\t\trequire.False(t, query.Result.IsDisabled)\n\t})\n\n\tt.Run(\"Get User by login - user_2 uses user_1.email as login\", func(t *testing.T) {\n\t\tss = InitTestDB(t)\n\n\t\t// create user_1\n\t\tcmd := models.CreateUserCommand{\n\t\t\tEmail:      \"user_1@mail.com\",\n\t\t\tName:       \"user_1\",\n\t\t\tLogin:      \"user_1\",\n\t\t\tPassword:   \"user_1_password\",\n\t\t\tIsDisabled: true,\n\t\t}\n\t\tuser_1, err := ss.CreateUser(context.Background(), cmd)\n\t\trequire.Nil(t, err)\n\n\t\t// create user_2\n\t\tcmd = models.CreateUserCommand{\n\t\t\tEmail:      \"user_2@mail.com\",\n\t\t\tName:       \"user_2\",\n\t\t\tLogin:      \"user_1@mail.com\",\n\t\t\tPassword:   \"user_2_password\",\n\t\t\tIsDisabled: true,\n\t\t}\n\t\tuser_2, err := ss.CreateUser(context.Background(), cmd)\n\t\trequire.Nil(t, err)\n\n\t\t// query user database for user_1 email\n\t\tquery := models.GetUserByLoginQuery{LoginOrEmail: \"user_1@mail.com\"}\n\t\terr = ss.GetUserByLogin(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\t// expect user_1 as result\n\t\trequire.Equal(t, user_1.Email, query.Result.Email)\n\t\trequire.Equal(t, user_1.Login, query.Result.Login)\n\t\trequire.Equal(t, user_1.Name, query.Result.Name)\n\t\trequire.NotEqual(t, user_2.Email, query.Result.Email)\n\t\trequire.NotEqual(t, user_2.Login, query.Result.Login)\n\t\trequire.NotEqual(t, user_2.Name, query.Result.Name)\n\t})\n\n\tt.Run(\"Testing DB - creates and loads disabled user\", func(t *testing.T) {\n\t\tss = InitTestDB(t)\n\t\tcmd := models.CreateUserCommand{\n\t\t\tEmail:      \"usertest@test.com\",\n\t\t\tName:       \"user name\",\n\t\t\tLogin:      \"user_test_login\",\n\t\t\tIsDisabled: true,\n\t\t}\n\n\t\tuser, err := ss.CreateUser(context.Background(), cmd)\n\t\trequire.Nil(t, err)\n\n\t\tquery := models.GetUserByIdQuery{Id: user.Id}\n\t\terr = ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Equal(t, query.Result.Email, \"usertest@test.com\")\n\t\trequire.Equal(t, query.Result.Password, \"\")\n\t\trequire.Len(t, query.Result.Rands, 10)\n\t\trequire.Len(t, query.Result.Salt, 10)\n\t\trequire.True(t, query.Result.IsDisabled)\n\t})\n\n\tt.Run(\"Testing DB - create user assigned to other organization\", func(t *testing.T) {\n\t\tss = InitTestDB(t)\n\n\t\tautoAssignOrg := setting.AutoAssignOrg\n\t\tsetting.AutoAssignOrg = true\n\t\tdefer func() {\n\t\t\tsetting.AutoAssignOrg = autoAssignOrg\n\t\t}()\n\n\t\torgCmd := &models.CreateOrgCommand{Name: \"Some Test Org\"}\n\t\terr := CreateOrg(context.Background(), orgCmd)\n\t\trequire.Nil(t, err)\n\n\t\tcmd := models.CreateUserCommand{\n\t\t\tEmail: \"usertest@test.com\",\n\t\t\tName:  \"user name\",\n\t\t\tLogin: \"user_test_login\",\n\t\t\tOrgId: orgCmd.Result.Id,\n\t\t}\n\n\t\tuser, err := ss.CreateUser(context.Background(), cmd)\n\t\trequire.Nil(t, err)\n\n\t\tquery := models.GetUserByIdQuery{Id: user.Id}\n\t\terr = ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Equal(t, query.Result.Email, \"usertest@test.com\")\n\t\trequire.Equal(t, query.Result.Password, \"\")\n\t\trequire.Len(t, query.Result.Rands, 10)\n\t\trequire.Len(t, query.Result.Salt, 10)\n\t\trequire.False(t, query.Result.IsDisabled)\n\t\trequire.Equal(t, query.Result.OrgId, orgCmd.Result.Id)\n\n\t\tconst nonExistingOrgID = 10000\n\t\tcmd = models.CreateUserCommand{\n\t\t\tEmail: \"usertest@test.com\",\n\t\t\tName:  \"user name\",\n\t\t\tLogin: \"user_test_login\",\n\t\t\tOrgId: nonExistingOrgID,\n\t\t}\n\n\t\t_, err = ss.CreateUser(context.Background(), cmd)\n\t\trequire.Equal(t, err, models.ErrOrgNotFound)\n\t})\n\n\tt.Run(\"Testing DB - multiple users\", func(t *testing.T) {\n\t\tss = InitTestDB(t)\n\n\t\tcreateFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\n\t\t// Return the first page of users and a total count\n\t\tquery := models.SearchUsersQuery{Query: \"\", Page: 1, Limit: 3}\n\t\terr := ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 3)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\n\t\t// Return the second page of users and a total count\n\t\tquery = models.SearchUsersQuery{Query: \"\", Page: 2, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 2)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\n\t\t// Return list of users matching query on user name\n\t\tquery = models.SearchUsersQuery{Query: \"use\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 3)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\n\t\tquery = models.SearchUsersQuery{Query: \"ser1\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 1)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 1)\n\n\t\tquery = models.SearchUsersQuery{Query: \"USER1\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 1)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 1)\n\n\t\tquery = models.SearchUsersQuery{Query: \"idontexist\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 0)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 0)\n\n\t\t// Return list of users matching query on email\n\t\tquery = models.SearchUsersQuery{Query: \"ser1@test.com\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 1)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 1)\n\n\t\t// Return list of users matching query on login name\n\t\tquery = models.SearchUsersQuery{Query: \"loginuser1\", Page: 1, Limit: 3}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.Len(t, query.Result.Users, 1)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 1)\n\t})\n\n\tt.Run(\"Testing DB - return list users based on their is_disabled flag\", func(t *testing.T) {\n\t\tss = InitTestDB(t)\n\t\tcreateFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: i%2 == 0,\n\t\t\t}\n\t\t})\n\n\t\tisDisabled := false\n\t\tquery := models.SearchUsersQuery{IsDisabled: &isDisabled}\n\t\terr := ss.SearchUsers(context.Background(), &query)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, query.Result.Users, 2)\n\n\t\tfirst, third := false, false\n\t\tfor _, user := range query.Result.Users {\n\t\t\tif user.Name == \"user1\" {\n\t\t\t\tfirst = true\n\t\t\t}\n\n\t\t\tif user.Name == \"user3\" {\n\t\t\t\tthird = true\n\t\t\t}\n\t\t}\n\n\t\trequire.True(t, first)\n\t\trequire.True(t, third)\n\n\t\t// Re-init DB\n\t\tss = InitTestDB(t)\n\t\tusers := createFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\n\t\terr = ss.AddOrgUser(context.Background(), &models.AddOrgUserCommand{\n\t\t\tLoginOrEmail: users[1].Login, Role: models.ROLE_VIEWER,\n\t\t\tOrgId: users[0].OrgId, UserId: users[1].Id,\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\terr = updateDashboardAcl(t, ss, 1, &models.DashboardAcl{\n\t\t\tDashboardID: 1, OrgID: users[0].OrgId, UserID: users[1].Id,\n\t\t\tPermission: models.PERMISSION_EDIT,\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\terr = ss.SavePreferences(context.Background(), &models.SavePreferencesCommand{\n\t\t\tUserId: users[1].Id, OrgId: users[0].OrgId, HomeDashboardId: 1, Theme: \"dark\",\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\t// When the user is deleted\n\t\terr = ss.DeleteUser(context.Background(), &models.DeleteUserCommand{UserId: users[1].Id})\n\t\trequire.Nil(t, err)\n\n\t\tquery1 := &models.GetOrgUsersQuery{OrgId: users[0].OrgId}\n\t\terr = GetOrgUsersForTest(query1)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, query1.Result, 1)\n\n\t\tpermQuery := &models.GetDashboardAclInfoListQuery{DashboardID: 1, OrgID: users[0].OrgId}\n\t\terr = ss.GetDashboardAclInfoList(context.Background(), permQuery)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, permQuery.Result, 0)\n\n\t\tprefsQuery := &models.GetPreferencesQuery{OrgId: users[0].OrgId, UserId: users[1].Id}\n\t\terr = ss.GetPreferences(context.Background(), prefsQuery)\n\t\trequire.Nil(t, err)\n\n\t\trequire.EqualValues(t, prefsQuery.Result.OrgId, 0)\n\t\trequire.EqualValues(t, prefsQuery.Result.UserId, 0)\n\n\t\t// A user is an org member and has been assigned permissions\n\t\t// Re-init DB\n\t\tss = InitTestDB(t)\n\t\tusers = createFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\t\terr = ss.AddOrgUser(context.Background(), &models.AddOrgUserCommand{\n\t\t\tLoginOrEmail: users[1].Login, Role: models.ROLE_VIEWER,\n\t\t\tOrgId: users[0].OrgId, UserId: users[1].Id,\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\terr = updateDashboardAcl(t, ss, 1, &models.DashboardAcl{\n\t\t\tDashboardID: 1, OrgID: users[0].OrgId, UserID: users[1].Id,\n\t\t\tPermission: models.PERMISSION_EDIT,\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\terr = ss.SavePreferences(context.Background(), &models.SavePreferencesCommand{\n\t\t\tUserId: users[1].Id, OrgId: users[0].OrgId, HomeDashboardId: 1, Theme: \"dark\",\n\t\t})\n\t\trequire.Nil(t, err)\n\n\t\tss.CacheService.Flush()\n\n\t\tquery3 := &models.GetSignedInUserQuery{OrgId: users[1].OrgId, UserId: users[1].Id}\n\t\terr = ss.GetSignedInUserWithCacheCtx(context.Background(), query3)\n\t\trequire.Nil(t, err)\n\t\trequire.NotNil(t, query3.Result)\n\t\trequire.Equal(t, query3.OrgId, users[1].OrgId)\n\t\terr = ss.SetUsingOrg(context.Background(), &models.SetUsingOrgCommand{UserId: users[1].Id, OrgId: users[0].OrgId})\n\t\trequire.Nil(t, err)\n\t\tquery4 := &models.GetSignedInUserQuery{OrgId: 0, UserId: users[1].Id}\n\t\terr = ss.GetSignedInUserWithCacheCtx(context.Background(), query4)\n\t\trequire.Nil(t, err)\n\t\trequire.NotNil(t, query4.Result)\n\t\trequire.Equal(t, query4.Result.OrgId, users[0].OrgId)\n\n\t\tcacheKey := newSignedInUserCacheKey(query4.Result.OrgId, query4.UserId)\n\t\t_, found := ss.CacheService.Get(cacheKey)\n\t\trequire.True(t, found)\n\n\t\tdisableCmd := models.BatchDisableUsersCommand{\n\t\t\tUserIds:    []int64{users[0].Id, users[1].Id, users[2].Id, users[3].Id, users[4].Id},\n\t\t\tIsDisabled: true,\n\t\t}\n\n\t\terr = ss.BatchDisableUsers(context.Background(), &disableCmd)\n\t\trequire.Nil(t, err)\n\n\t\tisDisabled = true\n\t\tquery5 := &models.SearchUsersQuery{IsDisabled: &isDisabled}\n\t\terr = ss.SearchUsers(context.Background(), query5)\n\n\t\trequire.Nil(t, err)\n\t\trequire.EqualValues(t, query5.Result.TotalCount, 5)\n\n\t\t// the user is deleted\n\t\terr = ss.DeleteUser(context.Background(), &models.DeleteUserCommand{UserId: users[1].Id})\n\t\trequire.Nil(t, err)\n\n\t\t// delete connected org users and permissions\n\t\tquery2 := &models.GetOrgUsersQuery{OrgId: users[0].OrgId}\n\t\terr = GetOrgUsersForTest(query2)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, query2.Result, 1)\n\n\t\tpermQuery = &models.GetDashboardAclInfoListQuery{DashboardID: 1, OrgID: users[0].OrgId}\n\t\terr = ss.GetDashboardAclInfoList(context.Background(), permQuery)\n\t\trequire.Nil(t, err)\n\n\t\trequire.Len(t, permQuery.Result, 0)\n\n\t\tprefsQuery = &models.GetPreferencesQuery{OrgId: users[0].OrgId, UserId: users[1].Id}\n\t\terr = ss.GetPreferences(context.Background(), prefsQuery)\n\t\trequire.Nil(t, err)\n\n\t\trequire.EqualValues(t, prefsQuery.Result.OrgId, 0)\n\t\trequire.EqualValues(t, prefsQuery.Result.UserId, 0)\n\t})\n\n\tss = InitTestDB(t)\n\n\tt.Run(\"Testing DB - enable all users\", func(t *testing.T) {\n\n\t\tusers := createFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: true,\n\t\t\t}\n\t\t})\n\n\t\tdisableCmd := models.BatchDisableUsersCommand{\n\t\t\tUserIds:    []int64{users[0].Id, users[1].Id, users[2].Id, users[3].Id, users[4].Id},\n\t\t\tIsDisabled: false,\n\t\t}\n\n\t\terr := ss.BatchDisableUsers(context.Background(), &disableCmd)\n\t\trequire.Nil(t, err)\n\n\t\tisDisabled := false\n\t\tquery := &models.SearchUsersQuery{IsDisabled: &isDisabled}\n\t\terr = ss.SearchUsers(context.Background(), query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\t})\n\n\tss = InitTestDB(t)\n\n\tt.Run(\"Testing DB - disable only specific users\", func(t *testing.T) {\n\t\tusers := createFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\n\t\tuserIdsToDisable := []int64{}\n\t\tfor i := 0; i < 3; i++ {\n\t\t\tuserIdsToDisable = append(userIdsToDisable, users[i].Id)\n\t\t}\n\t\tdisableCmd := models.BatchDisableUsersCommand{\n\t\t\tUserIds:    userIdsToDisable,\n\t\t\tIsDisabled: true,\n\t\t}\n\n\t\terr := ss.BatchDisableUsers(context.Background(), &disableCmd)\n\t\trequire.Nil(t, err)\n\n\t\tquery := models.SearchUsersQuery{}\n\t\terr = ss.SearchUsers(context.Background(), &query)\n\n\t\trequire.Nil(t, err)\n\t\trequire.EqualValues(t, query.Result.TotalCount, 5)\n\t\tfor _, user := range query.Result.Users {\n\t\t\tshouldBeDisabled := false\n\n\t\t\t// Check if user id is in the userIdsToDisable list\n\t\t\tfor _, disabledUserId := range userIdsToDisable {\n\t\t\t\tif user.Id == disabledUserId {\n\t\t\t\t\trequire.True(t, user.IsDisabled)\n\t\t\t\t\tshouldBeDisabled = true\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise user shouldn't be disabled\n\t\t\tif !shouldBeDisabled {\n\t\t\t\trequire.False(t, user.IsDisabled)\n\t\t\t}\n\t\t}\n\t})\n\n\tss = InitTestDB(t)\n\n\tt.Run(\"Testing DB - search users\", func(t *testing.T) {\n\t\t// Since previous tests were destructive\n\t\tcreateFiveTestUsers(t, ss, func(i int) *models.CreateUserCommand {\n\t\t\treturn &models.CreateUserCommand{\n\t\t\t\tEmail:      fmt.Sprint(\"user\", i, \"@test.com\"),\n\t\t\t\tName:       fmt.Sprint(\"user\", i),\n\t\t\t\tLogin:      fmt.Sprint(\"loginuser\", i),\n\t\t\t\tIsDisabled: false,\n\t\t\t}\n\t\t})\n\t})\n\n\tt.Run(\"Testing DB - grafana admin users\", func(t *testing.T) {\n\n\t\tss = InitTestDB(t)\n\n\t\tcreateUserCmd := models.CreateUserCommand{\n\t\t\tEmail:   fmt.Sprint(\"admin\", \"@test.com\"),\n\t\t\tName:    \"admin\",\n\t\t\tLogin:   \"admin\",\n\t\t\tIsAdmin: true,\n\t\t}\n\t\tuser, err := ss.CreateUser(context.Background(), createUserCmd)\n\t\trequire.Nil(t, err)\n\n\t\t// Cannot make themselves a non-admin\n\t\tupdatePermsError := ss.UpdateUserPermissions(user.Id, false)\n\n\t\trequire.Equal(t, updatePermsError, models.ErrLastGrafanaAdmin)\n\n\t\tquery := models.GetUserByIdQuery{Id: user.Id}\n\t\tgetUserError := ss.GetUserById(context.Background(), &query)\n\t\trequire.Nil(t, getUserError)\n\n\t\trequire.True(t, query.Result.IsAdmin)\n\n\t\t// One user\n\t\tconst email = \"user@test.com\"\n\t\tconst username = \"user\"\n\t\tcreateUserCmd = models.CreateUserCommand{\n\t\t\tEmail: email,\n\t\t\tName:  \"user\",\n\t\t\tLogin: username,\n\t\t}\n\t\t_, err = ss.CreateUser(context.Background(), createUserCmd)\n\t\trequire.Nil(t, err)\n\n\t\t// When trying to create a new user with the same email, an error is returned\n\t\tcreateUserCmd = models.CreateUserCommand{\n\t\t\tEmail:        email,\n\t\t\tName:         \"user2\",\n\t\t\tLogin:        \"user2\",\n\t\t\tSkipOrgSetup: true,\n\t\t}\n\t\t_, err = ss.CreateUser(context.Background(), createUserCmd)\n\t\trequire.Equal(t, err, models.ErrUserAlreadyExists)\n\n\t\t// When trying to create a new user with the same login, an error is returned\n\t\tcreateUserCmd = models.CreateUserCommand{\n\t\t\tEmail:        \"user2@test.com\",\n\t\t\tName:         \"user2\",\n\t\t\tLogin:        username,\n\t\t\tSkipOrgSetup: true,\n\t\t}\n\t\t_, err = ss.CreateUser(context.Background(), createUserCmd)\n\t\trequire.Equal(t, err, models.ErrUserAlreadyExists)\n\t})\n}\n\nfunc GetOrgUsersForTest(query *models.GetOrgUsersQuery) error {\n\tquery.Result = make([]*models.OrgUserDTO, 0)\n\tsess := x.Table(\"org_user\")\n\tsess.Join(\"LEFT \", x.Dialect().Quote(\"user\"), fmt.Sprintf(\"org_user.user_id=%s.id\", x.Dialect().Quote(\"user\")))\n\tsess.Where(\"org_user.org_id=?\", query.OrgId)\n\tsess.Cols(\"org_user.org_id\", \"org_user.user_id\", \"user.email\", \"user.login\", \"org_user.role\")\n\n\terr := sess.Find(&query.Result)\n\treturn err\n}\n\nfunc createFiveTestUsers(t *testing.T, sqlStore *SQLStore, fn func(i int) *models.CreateUserCommand) []models.User {\n\tt.Helper()\n\n\tusers := []models.User{}\n\tfor i := 0; i < 5; i++ {\n\t\tcmd := fn(i)\n\n\t\tuser, err := sqlStore.CreateUser(context.Background(), *cmd)\n\t\tusers = append(users, *user)\n\n\t\trequire.Nil(t, err)\n\t}\n\n\treturn users\n}\n"], "filenames": ["pkg/services/sqlstore/user_test.go"], "buggy_code_start_loc": [47], "buggy_code_end_loc": [47], "fixing_code_start_loc": [48], "fixing_code_end_loc": [87], "type": "CWE-287", "message": "Grafana is an open source data visualization platform for metrics, logs, and traces. Versions prior to 9.1.8 and 8.5.14 allow one user to block another user's login attempt by registering someone else'e email address as a username. A Grafana user\u2019s username and email address are unique fields, that means no other user can have the same username or email address as another user. A user can have an email address as a username. However, the login system allows users to log in with either username or email address. Since Grafana allows a user to log in with either their username or email address, this creates an usual behavior where `user_1` can register with one email address and `user_2` can register their username as `user_1`\u2019s email address. This prevents `user_1` logging into the application since `user_1`'s password won\u2019t match with `user_2`'s email address. Versions 9.1.8 and 8.5.14 contain a patch. There are no workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-39229", "sourceIdentifier": "security-advisories@github.com", "published": "2022-10-13T23:15:10.937", "lastModified": "2022-10-19T14:10:31.537", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Grafana is an open source data visualization platform for metrics, logs, and traces. Versions prior to 9.1.8 and 8.5.14 allow one user to block another user's login attempt by registering someone else'e email address as a username. A Grafana user\u2019s username and email address are unique fields, that means no other user can have the same username or email address as another user. A user can have an email address as a username. However, the login system allows users to log in with either username or email address. Since Grafana allows a user to log in with either their username or email address, this creates an usual behavior where `user_1` can register with one email address and `user_2` can register their username as `user_1`\u2019s email address. This prevents `user_1` logging into the application since `user_1`'s password won\u2019t match with `user_2`'s email address. Versions 9.1.8 and 8.5.14 contain a patch. There are no workarounds for this issue."}, {"lang": "es", "value": "Grafana es una plataforma de visualizaci\u00f3n de datos de c\u00f3digo abierto para m\u00e9tricas, registros y trazas. Las versiones anteriores a 9.1.8 y 8.5.14 permiten que un usuario bloquee el intento de inicio de sesi\u00f3n de otro al registrar la direcci\u00f3n de correo electr\u00f3nico de otra persona como nombre de usuario. El nombre de usuario y la direcci\u00f3n de correo electr\u00f3nico de un usuario de Grafana son campos \u00fanicos, lo que significa que ning\u00fan otro usuario puede tener el mismo nombre de usuario o direcci\u00f3n de correo electr\u00f3nico que otro usuario. Un usuario puede tener una direcci\u00f3n de correo electr\u00f3nico como nombre de usuario. Sin embargo, el sistema de inicio de sesi\u00f3n permite a usuarios conectarse con cualquier nombre de usuario o direcci\u00f3n de correo electr\u00f3nico. Dado que Grafana permite que un usuario sea registrado con su nombre de usuario o con su direcci\u00f3n de correo electr\u00f3nico, esto crea un comportamiento habitual en el que \"user_1\" puede registrarse con una direcci\u00f3n de correo electr\u00f3nico y \"user_2\" puede registrar su nombre de usuario como la direcci\u00f3n de correo electr\u00f3nico de \"user_1\". Esto impide que \"user_1\" sea registrado en la aplicaci\u00f3n, ya que la contrase\u00f1a de \"user_1\" no coincide con la direcci\u00f3n de correo electr\u00f3nico de \"user_2\". Las versiones 9.1.8 y 8.5.14 contienen un parche. No se presentan mitigaciones para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:grafana:grafana:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.5.14", "matchCriteriaId": "3959EA7C-8C8F-4CA2-B33F-F9BBAB8CD15C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:grafana:grafana:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.0.0", "versionEndExcluding": "9.1.8", "matchCriteriaId": "E8E1ACC7-F43B-4395-A1FD-44CAEB43430D"}]}]}], "references": [{"url": "https://github.com/grafana/grafana/commit/5644758f0c5ae9955a4e5480d71f9bef57fdce35", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/grafana/grafana/releases/tag/v9.1.8", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/grafana/grafana/security/advisories/GHSA-gj7m-853r-289r", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/grafana/grafana/commit/5644758f0c5ae9955a4e5480d71f9bef57fdce35"}}