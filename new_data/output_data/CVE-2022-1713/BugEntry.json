{"buggy_code": ["/**\n * $Id: ProxyServlet.java,v 1.4 2013/12/13 13:18:11 david Exp $\n * Copyright (c) 2011-2012, JGraph Ltd\n */\npackage com.mxgraph.online;\n\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.net.UnknownHostException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.google.apphosting.api.DeadlineExceededException;\nimport com.mxgraph.online.Utils.UnsupportedContentException;\n\n/**\n * Servlet implementation ProxyServlet\n */\n@SuppressWarnings(\"serial\")\npublic class ProxyServlet extends HttpServlet\n{\n\tprivate static final Logger log = Logger\n\t\t\t.getLogger(HttpServlet.class.getName());\n\n\t/**\n\t * Buffer size for content pass-through.\n\t */\n\tprivate static int BUFFER_SIZE = 3 * 1024;\n\t\n\t/**\n\t * GAE deadline is 30 secs so timeout before that to avoid\n\t * HardDeadlineExceeded errors.\n\t */\n\tprivate static final int TIMEOUT = 29000;\n\t\n\t/**\n\t * A resuable empty byte array instance.\n\t */\n\tprivate static byte[] emptyBytes = new byte[0];\n\n\t/**\n\t * @see HttpServlet#HttpServlet()\n\t */\n\tpublic ProxyServlet()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doGet(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws ServletException, IOException\n\t{\n\t\tString urlParam = request.getParameter(\"url\");\n\n\t\tif (checkUrlParameter(urlParam))\n\t\t{\n\t\t\t// build the UML source from the compressed request parameter\n\t\t\tString ref = request.getHeader(\"referer\");\n\t\t\tString ua = request.getHeader(\"User-Agent\");\n\t\t\tString auth = request.getHeader(\"Authorization\");\n\t\t\tString dom = getCorsDomain(ref, ua);\n\n\t\t\ttry(OutputStream out = response.getOutputStream())\n\t\t\t{\n\t\t\t\trequest.setCharacterEncoding(\"UTF-8\");\n\t\t\t\tresponse.setCharacterEncoding(\"UTF-8\");\n\n\t\t\t\tURL url = new URL(urlParam);\n\t\t\t\tURLConnection connection = url.openConnection();\n\t\t\t\tconnection.setConnectTimeout(TIMEOUT);\n\t\t\t\tconnection.setReadTimeout(TIMEOUT);\n\t\t\t\t\n\t\t\t\tresponse.setHeader(\"Cache-Control\", \"private, max-age=86400\");\n\n\t\t\t\t// Workaround for 451 response from Iconfinder CDN\n\t\t\t\tconnection.setRequestProperty(\"User-Agent\", \"draw.io\");\n\t\t\t\t\n\t\t\t\t//Forward auth header\n\t\t\t\tif (auth  !=  null)\n\t\t\t\t{\n\t\t\t\t\tconnection.setRequestProperty(\"Authorization\", auth);\n\t\t\t\t}\n\n\t\t\t\tif (dom != null && dom.length() > 0)\n\t\t\t\t{\n\t\t\t\t\tresponse.addHeader(\"Access-Control-Allow-Origin\", dom);\n\t\t\t\t}\n\n\t\t\t\t// Status code pass-through and follow redirects\n\t\t\t\tif (connection instanceof HttpURLConnection)\n\t\t\t\t{\n\t\t\t\t\t((HttpURLConnection) connection)\n\t\t\t\t\t\t\t.setInstanceFollowRedirects(true);\n\t\t\t\t\tint status = ((HttpURLConnection) connection)\n\t\t\t\t\t\t\t.getResponseCode();\n\t\t\t\t\tint counter = 0;\n\n\t\t\t\t\t// Follows a maximum of 6 redirects \n\t\t\t\t\twhile (counter++ <= 6\n\t\t\t\t\t\t\t&& (status == HttpURLConnection.HTTP_MOVED_PERM\n\t\t\t\t\t\t\t\t\t|| status == HttpURLConnection.HTTP_MOVED_TEMP))\n\t\t\t\t\t{\n\t\t\t\t\t\tString redirectUrl = connection.getHeaderField(\"Location\");\n\n\t\t\t\t\t\tif (!checkUrlParameter(redirectUrl))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\turl = new URL(redirectUrl);\n\t\t\t\t\t\tconnection = url.openConnection();\n\t\t\t\t\t\t((HttpURLConnection) connection)\n\t\t\t\t\t\t\t\t.setInstanceFollowRedirects(true);\n\t\t\t\t\t\tconnection.setConnectTimeout(TIMEOUT);\n\t\t\t\t\t\tconnection.setReadTimeout(TIMEOUT);\n\n\t\t\t\t\t\t// Workaround for 451 response from Iconfinder CDN\n\t\t\t\t\t\tconnection.setRequestProperty(\"User-Agent\", \"draw.io\");\n\t\t\t\t\t\tstatus = ((HttpURLConnection) connection)\n\t\t\t\t\t\t\t\t.getResponseCode();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (status >= 200 && status <= 299)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponse.setStatus(status);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Copies input stream to output stream\n\t\t\t\t\t\tInputStream is = connection.getInputStream();\n\t\t\t\t\t\tbyte[] head = (contentAlwaysAllowed(urlParam)) ? emptyBytes\n\t\t\t\t\t\t\t\t: Utils.checkStreamContent(is);\n\t\t\t\t\t\tresponse.setContentType(\"application/octet-stream\");\n\t\t\t\t\t\tString base64 = request.getParameter(\"base64\");\n\t\t\t\t\t\tcopyResponse(is, out, head,\n\t\t\t\t\t\t\t\tbase64 != null && base64.equals(\"1\"));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresponse.setStatus(HttpURLConnection.HTTP_PRECON_FAILED);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresponse.setStatus(HttpURLConnection.HTTP_UNSUPPORTED_TYPE);\n\t\t\t\t}\n\n\t\t\t\tout.flush();\n\n\t\t\t\tlog.log(Level.FINEST, \"processed proxy request: url=\"\n\t\t\t\t\t\t+ ((urlParam != null) ? urlParam : \"[null]\")\n\t\t\t\t\t\t+ \", referer=\" + ((ref != null) ? ref : \"[null]\")\n\t\t\t\t\t\t+ \", user agent=\" + ((ua != null) ? ua : \"[null]\"));\n\t\t\t}\n\t\t\tcatch (DeadlineExceededException e)\n\t\t\t{\n\t\t\t\tresponse.setStatus(HttpServletResponse.SC_REQUEST_TIMEOUT);\n\t\t\t}\n\t\t\tcatch (UnknownHostException | FileNotFoundException e)\n\t\t\t{\n\t\t\t\t// do not log 404 and DNS errors\n\t\t\t\tresponse.setStatus(HttpServletResponse.SC_NOT_FOUND);\n\t\t\t}\n\t\t\tcatch (UnsupportedContentException e)\n\t\t\t{\n\t\t\t\tresponse.setStatus(HttpServletResponse.SC_FORBIDDEN);\n\t\t\t\tlog.log(Level.SEVERE, \"proxy request with invalid content: url=\"\n\t\t\t\t\t\t+ ((urlParam != null) ? urlParam : \"[null]\")\n\t\t\t\t\t\t+ \", referer=\" + ((ref != null) ? ref : \"[null]\")\n\t\t\t\t\t\t+ \", user agent=\" + ((ua != null) ? ua : \"[null]\"));\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tresponse.setStatus(\n\t\t\t\t\t\tHttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n\t\t\t\tlog.log(Level.FINE, \"proxy request failed: url=\"\n\t\t\t\t\t\t+ ((urlParam != null) ? urlParam : \"[null]\")\n\t\t\t\t\t\t+ \", referer=\" + ((ref != null) ? ref : \"[null]\")\n\t\t\t\t\t\t+ \", user agent=\" + ((ua != null) ? ua : \"[null]\"));\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n\t\t\tlog.log(Level.SEVERE,\n\t\t\t\t\t\"proxy request with invalid URL parameter: url=\"\n\t\t\t\t\t\t\t+ ((urlParam != null) ? urlParam : \"[null]\"));\n\t\t}\n\t}\n\n\t/**\n\t * Dynamically generated CORS header for known domains.\n\t * @throws IOException \n\t */\n\tprotected void copyResponse(InputStream is, OutputStream out, byte[] head,\n\t\t\tboolean base64) throws IOException\n\t{\n\t\tif (base64)\n\t\t{\n\t\t\ttry (BufferedInputStream in = new BufferedInputStream(is,\n\t\t\t\t\tBUFFER_SIZE))\n\t\t\t{\n\t\t\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n\t\t\t    byte[] buffer = new byte[0xFFFF];\n\n\t\t\t\tos.write(head, 0, head.length);\n\t\t\t\t\n\t\t\t    for (int len = is.read(buffer); len != -1; len = is.read(buffer))\n\t\t\t    { \n\t\t\t        os.write(buffer, 0, len);\n\t\t\t    }\n\n\t\t\t\tout.write(mxBase64.encodeToString(os.toByteArray(), false).getBytes());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tout.write(head);\n\t\t\tUtils.copy(is, out);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the URL parameter is legal.\n\t */\n\tpublic boolean checkUrlParameter(String url)\n\t{\n\t\tif (url != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tURL parsedUrl = new URL(url);\n\t\t\t\tString protocol = parsedUrl.getProtocol();\n\t\t\t\tString host = parsedUrl.getHost().toLowerCase();\n\n\t\t\t\treturn (protocol.equals(\"http\") || protocol.equals(\"https\"))\n\t\t\t\t\t\t&& !host.endsWith(\".internal\")\n\t\t\t\t\t\t&& !host.endsWith(\".local\")\n\t\t\t\t\t\t&& !host.contains(\"localhost\")\n\t\t\t\t\t\t&& !host.startsWith(\"0.\") // 0.0.0.0/8\n\t\t\t\t\t\t&& !host.startsWith(\"10.\") // 10.0.0.0/8\n\t\t\t\t\t\t&& !host.startsWith(\"127.\") // 127.0.0.0/8\n\t\t\t\t\t\t&& !host.startsWith(\"169.254.\") // 169.254.0.0/16\n\t\t\t\t\t\t&& !host.startsWith(\"172.16.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.17.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.18.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.19.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.20.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.21.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.22.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.23.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.24.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.25.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.26.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.27.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.28.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.29.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.30.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"172.31.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !host.startsWith(\"192.0.0.\") // 192.0.0.0/24\n\t\t\t\t\t\t&& !host.startsWith(\"192.168.\") // 192.168.0.0/16\n\t\t\t\t\t\t&& !host.startsWith(\"198.18.\") // 198.18.0.0/15\n\t\t\t\t\t\t&& !host.startsWith(\"198.19.\") // 198.18.0.0/15\n\t\t\t\t\t\t&& !host.endsWith(\".arpa\"); // reverse domain (needed?)\n\t\t\t}\n\t\t\tcatch (MalformedURLException e)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if the content check should be omitted.\n\t */\n\tpublic boolean contentAlwaysAllowed(String url)\n\t{\n\t\treturn url.toLowerCase()\n\t\t\t\t.startsWith(\"https://trello-attachments.s3.amazonaws.com/\")\n\t\t\t\t|| url.toLowerCase().startsWith(\"https://docs.google.com/\");\n\t}\n\n\t/**\n\t * Gets CORS header for request. Returning null means do not respond.\n\t */\n\tprotected String getCorsDomain(String referer, String userAgent)\n\t{\n\t\tString dom = null;\n\n\t\tif (referer != null && referer.toLowerCase()\n\t\t\t\t.matches(\"https?://([a-z0-9,-]+[.])*draw[.]io/.*\"))\n\t\t{\n\t\t\tdom = referer.toLowerCase().substring(0,\n\t\t\t\t\treferer.indexOf(\".draw.io/\") + 8);\n\t\t}\n\t\telse if (referer != null && referer.toLowerCase()\n\t\t\t\t.matches(\"https?://([a-z0-9,-]+[.])*diagrams[.]net/.*\"))\n\t\t{\n\t\t\tdom = referer.toLowerCase().substring(0,\n\t\t\t\t\treferer.indexOf(\".diagrams.net/\") + 13);\n\t\t}\n\t\telse if (referer != null && referer.toLowerCase()\n\t\t\t\t.matches(\"https?://([a-z0-9,-]+[.])*quipelements[.]com/.*\"))\n\t\t{\n\t\t\tdom = referer.toLowerCase().substring(0,\n\t\t\t\t\treferer.indexOf(\".quipelements.com/\") + 17);\n\t\t}\n\t\t// Enables Confluence/Jira proxy via referer or hardcoded user-agent (for old versions)\n\t\t// UA refers to old FF on macOS so low risk and fixes requests from existing servers\n\t\telse if ((referer != null\n\t\t\t\t&& referer.equals(\"draw.io Proxy Confluence Server\"))\n\t\t\t\t|| (userAgent != null && userAgent.equals(\n\t\t\t\t\t\t\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0\")))\n\t\t{\n\t\t\tdom = \"\";\n\t\t}\n\n\t\treturn dom;\n\t}\n\n}\n"], "fixing_code": ["/**\n * $Id: ProxyServlet.java,v 1.4 2013/12/13 13:18:11 david Exp $\n * Copyright (c) 2011-2012, JGraph Ltd\n */\npackage com.mxgraph.online;\n\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.net.UnknownHostException;\nimport java.net.InetAddress;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport com.google.apphosting.api.DeadlineExceededException;\nimport com.mxgraph.online.Utils.UnsupportedContentException;\n\n/**\n * Servlet implementation ProxyServlet\n */\n@SuppressWarnings(\"serial\")\npublic class ProxyServlet extends HttpServlet\n{\n\tprivate static final Logger log = Logger\n\t\t\t.getLogger(HttpServlet.class.getName());\n\n\t/**\n\t * Buffer size for content pass-through.\n\t */\n\tprivate static int BUFFER_SIZE = 3 * 1024;\n\t\n\t/**\n\t * GAE deadline is 30 secs so timeout before that to avoid\n\t * HardDeadlineExceeded errors.\n\t */\n\tprivate static final int TIMEOUT = 29000;\n\t\n\t/**\n\t * A resuable empty byte array instance.\n\t */\n\tprivate static byte[] emptyBytes = new byte[0];\n\n\t/**\n\t * @see HttpServlet#HttpServlet()\n\t */\n\tpublic ProxyServlet()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doGet(HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws ServletException, IOException\n\t{\n\t\tString urlParam = request.getParameter(\"url\");\n\n\t\tif (checkUrlParameter(urlParam))\n\t\t{\n\t\t\t// build the UML source from the compressed request parameter\n\t\t\tString ref = request.getHeader(\"referer\");\n\t\t\tString ua = request.getHeader(\"User-Agent\");\n\t\t\tString auth = request.getHeader(\"Authorization\");\n\t\t\tString dom = getCorsDomain(ref, ua);\n\n\t\t\ttry(OutputStream out = response.getOutputStream())\n\t\t\t{\n\t\t\t\trequest.setCharacterEncoding(\"UTF-8\");\n\t\t\t\tresponse.setCharacterEncoding(\"UTF-8\");\n\n\t\t\t\tURL url = new URL(urlParam);\n\t\t\t\tURLConnection connection = url.openConnection();\n\t\t\t\tconnection.setConnectTimeout(TIMEOUT);\n\t\t\t\tconnection.setReadTimeout(TIMEOUT);\n\t\t\t\t\n\t\t\t\tresponse.setHeader(\"Cache-Control\", \"private, max-age=86400\");\n\n\t\t\t\t// Workaround for 451 response from Iconfinder CDN\n\t\t\t\tconnection.setRequestProperty(\"User-Agent\", \"draw.io\");\n\t\t\t\t\n\t\t\t\t//Forward auth header\n\t\t\t\tif (auth  !=  null)\n\t\t\t\t{\n\t\t\t\t\tconnection.setRequestProperty(\"Authorization\", auth);\n\t\t\t\t}\n\n\t\t\t\tif (dom != null && dom.length() > 0)\n\t\t\t\t{\n\t\t\t\t\tresponse.addHeader(\"Access-Control-Allow-Origin\", dom);\n\t\t\t\t}\n\n\t\t\t\t// Status code pass-through and follow redirects\n\t\t\t\tif (connection instanceof HttpURLConnection)\n\t\t\t\t{\n\t\t\t\t\t((HttpURLConnection) connection)\n\t\t\t\t\t\t\t.setInstanceFollowRedirects(true);\n\t\t\t\t\tint status = ((HttpURLConnection) connection)\n\t\t\t\t\t\t\t.getResponseCode();\n\t\t\t\t\tint counter = 0;\n\n\t\t\t\t\t// Follows a maximum of 6 redirects \n\t\t\t\t\twhile (counter++ <= 6\n\t\t\t\t\t\t\t&& (status == HttpURLConnection.HTTP_MOVED_PERM\n\t\t\t\t\t\t\t\t\t|| status == HttpURLConnection.HTTP_MOVED_TEMP))\n\t\t\t\t\t{\n\t\t\t\t\t\tString redirectUrl = connection.getHeaderField(\"Location\");\n\n\t\t\t\t\t\tif (!checkUrlParameter(redirectUrl))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\turl = new URL(redirectUrl);\n\t\t\t\t\t\tconnection = url.openConnection();\n\t\t\t\t\t\t((HttpURLConnection) connection)\n\t\t\t\t\t\t\t\t.setInstanceFollowRedirects(true);\n\t\t\t\t\t\tconnection.setConnectTimeout(TIMEOUT);\n\t\t\t\t\t\tconnection.setReadTimeout(TIMEOUT);\n\n\t\t\t\t\t\t// Workaround for 451 response from Iconfinder CDN\n\t\t\t\t\t\tconnection.setRequestProperty(\"User-Agent\", \"draw.io\");\n\t\t\t\t\t\tstatus = ((HttpURLConnection) connection)\n\t\t\t\t\t\t\t\t.getResponseCode();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (status >= 200 && status <= 299)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponse.setStatus(status);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Copies input stream to output stream\n\t\t\t\t\t\tInputStream is = connection.getInputStream();\n\t\t\t\t\t\tbyte[] head = (contentAlwaysAllowed(urlParam)) ? emptyBytes\n\t\t\t\t\t\t\t\t: Utils.checkStreamContent(is);\n\t\t\t\t\t\tresponse.setContentType(\"application/octet-stream\");\n\t\t\t\t\t\tString base64 = request.getParameter(\"base64\");\n\t\t\t\t\t\tcopyResponse(is, out, head,\n\t\t\t\t\t\t\t\tbase64 != null && base64.equals(\"1\"));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresponse.setStatus(HttpURLConnection.HTTP_PRECON_FAILED);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresponse.setStatus(HttpURLConnection.HTTP_UNSUPPORTED_TYPE);\n\t\t\t\t}\n\n\t\t\t\tout.flush();\n\n\t\t\t\tlog.log(Level.FINEST, \"processed proxy request: url=\"\n\t\t\t\t\t\t+ ((urlParam != null) ? urlParam : \"[null]\")\n\t\t\t\t\t\t+ \", referer=\" + ((ref != null) ? ref : \"[null]\")\n\t\t\t\t\t\t+ \", user agent=\" + ((ua != null) ? ua : \"[null]\"));\n\t\t\t}\n\t\t\tcatch (DeadlineExceededException e)\n\t\t\t{\n\t\t\t\tresponse.setStatus(HttpServletResponse.SC_REQUEST_TIMEOUT);\n\t\t\t}\n\t\t\tcatch (UnknownHostException | FileNotFoundException e)\n\t\t\t{\n\t\t\t\t// do not log 404 and DNS errors\n\t\t\t\tresponse.setStatus(HttpServletResponse.SC_NOT_FOUND);\n\t\t\t}\n\t\t\tcatch (UnsupportedContentException e)\n\t\t\t{\n\t\t\t\tresponse.setStatus(HttpServletResponse.SC_FORBIDDEN);\n\t\t\t\tlog.log(Level.SEVERE, \"proxy request with invalid content: url=\"\n\t\t\t\t\t\t+ ((urlParam != null) ? urlParam : \"[null]\")\n\t\t\t\t\t\t+ \", referer=\" + ((ref != null) ? ref : \"[null]\")\n\t\t\t\t\t\t+ \", user agent=\" + ((ua != null) ? ua : \"[null]\"));\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tresponse.setStatus(\n\t\t\t\t\t\tHttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n\t\t\t\tlog.log(Level.FINE, \"proxy request failed: url=\"\n\t\t\t\t\t\t+ ((urlParam != null) ? urlParam : \"[null]\")\n\t\t\t\t\t\t+ \", referer=\" + ((ref != null) ? ref : \"[null]\")\n\t\t\t\t\t\t+ \", user agent=\" + ((ua != null) ? ua : \"[null]\"));\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n\t\t\tlog.log(Level.SEVERE,\n\t\t\t\t\t\"proxy request with invalid URL parameter: url=\"\n\t\t\t\t\t\t\t+ ((urlParam != null) ? urlParam : \"[null]\"));\n\t\t}\n\t}\n\n\t/**\n\t * Dynamically generated CORS header for known domains.\n\t * @throws IOException \n\t */\n\tprotected void copyResponse(InputStream is, OutputStream out, byte[] head,\n\t\t\tboolean base64) throws IOException\n\t{\n\t\tif (base64)\n\t\t{\n\t\t\ttry (BufferedInputStream in = new BufferedInputStream(is,\n\t\t\t\t\tBUFFER_SIZE))\n\t\t\t{\n\t\t\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n\t\t\t    byte[] buffer = new byte[0xFFFF];\n\n\t\t\t\tos.write(head, 0, head.length);\n\t\t\t\t\n\t\t\t    for (int len = is.read(buffer); len != -1; len = is.read(buffer))\n\t\t\t    { \n\t\t\t        os.write(buffer, 0, len);\n\t\t\t    }\n\n\t\t\t\tout.write(mxBase64.encodeToString(os.toByteArray(), false).getBytes());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tout.write(head);\n\t\t\tUtils.copy(is, out);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the URL parameter is legal.\n\t */\n\tpublic boolean checkUrlParameter(String url)\n\t{\n\t\tif (url != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tURL parsedUrl = new URL(url);\n\t\t\t\tString protocol = parsedUrl.getProtocol();\n\t\t\t\tString host = parsedUrl.getHost();\n\t\t\t\tInetAddress address = InetAddress.getByName(host);\n\t\t\t\tString hostAddress = address.getHostAddress();\n\t\t\t\thost = host.toLowerCase();\n\n\t\t\t\treturn (protocol.equals(\"http\") || protocol.equals(\"https\"))\n\t\t\t\t\t\t&& !address.isAnyLocalAddress()\n\t\t\t\t\t\t&& !address.isLoopbackAddress()\n\t\t\t\t\t\t&& !host.endsWith(\".internal\") // Redundant\n\t\t\t\t\t\t&& !host.endsWith(\".local\") // Redundant\n\t\t\t\t\t\t&& !host.contains(\"localhost\") // Redundant\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"0.\") // 0.0.0.0/8 \n\t\t\t\t\t\t&& !hostAddress.startsWith(\"10.\") // 10.0.0.0/8\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"127.\") // 127.0.0.0/8\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"169.254.\") // 169.254.0.0/16\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.16.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.17.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.18.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.19.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.20.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.21.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.22.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.23.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.24.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.25.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.26.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.27.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.28.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.29.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.30.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"172.31.\") // 172.16.0.0/12\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"192.0.0.\") // 192.0.0.0/24\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"192.168.\") // 192.168.0.0/16\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"198.18.\") // 198.18.0.0/15\n\t\t\t\t\t\t&& !hostAddress.startsWith(\"198.19.\") // 198.18.0.0/15\n\t\t\t\t\t\t&& !host.endsWith(\".arpa\"); // reverse domain (needed?)\n\t\t\t}\n\t\t\tcatch (MalformedURLException e)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (UnknownHostException e)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if the content check should be omitted.\n\t */\n\tpublic boolean contentAlwaysAllowed(String url)\n\t{\n\t\treturn url.toLowerCase()\n\t\t\t\t.startsWith(\"https://trello-attachments.s3.amazonaws.com/\")\n\t\t\t\t|| url.toLowerCase().startsWith(\"https://docs.google.com/\");\n\t}\n\n\t/**\n\t * Gets CORS header for request. Returning null means do not respond.\n\t */\n\tprotected String getCorsDomain(String referer, String userAgent)\n\t{\n\t\tString dom = null;\n\n\t\tif (referer != null && referer.toLowerCase()\n\t\t\t\t.matches(\"https?://([a-z0-9,-]+[.])*draw[.]io/.*\"))\n\t\t{\n\t\t\tdom = referer.toLowerCase().substring(0,\n\t\t\t\t\treferer.indexOf(\".draw.io/\") + 8);\n\t\t}\n\t\telse if (referer != null && referer.toLowerCase()\n\t\t\t\t.matches(\"https?://([a-z0-9,-]+[.])*diagrams[.]net/.*\"))\n\t\t{\n\t\t\tdom = referer.toLowerCase().substring(0,\n\t\t\t\t\treferer.indexOf(\".diagrams.net/\") + 13);\n\t\t}\n\t\telse if (referer != null && referer.toLowerCase()\n\t\t\t\t.matches(\"https?://([a-z0-9,-]+[.])*quipelements[.]com/.*\"))\n\t\t{\n\t\t\tdom = referer.toLowerCase().substring(0,\n\t\t\t\t\treferer.indexOf(\".quipelements.com/\") + 17);\n\t\t}\n\t\t// Enables Confluence/Jira proxy via referer or hardcoded user-agent (for old versions)\n\t\t// UA refers to old FF on macOS so low risk and fixes requests from existing servers\n\t\telse if ((referer != null\n\t\t\t\t&& referer.equals(\"draw.io Proxy Confluence Server\"))\n\t\t\t\t|| (userAgent != null && userAgent.equals(\n\t\t\t\t\t\t\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0\")))\n\t\t{\n\t\t\tdom = \"\";\n\t\t}\n\n\t\treturn dom;\n\t}\n\n}\n"], "filenames": ["src/main/java/com/mxgraph/online/ProxyServlet.java"], "buggy_code_start_loc": [17], "buggy_code_end_loc": [280], "fixing_code_start_loc": [18], "fixing_code_end_loc": [291], "type": "CWE-918", "message": "SSRF on /proxy in GitHub repository jgraph/drawio prior to 18.0.4. An attacker can make a request as the server and read its contents. This can lead to a leak of sensitive information.", "other": {"cve": {"id": "CVE-2022-1713", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-16T15:15:10.180", "lastModified": "2023-02-16T18:11:12.717", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SSRF on /proxy in GitHub repository jgraph/drawio prior to 18.0.4. An attacker can make a request as the server and read its contents. This can lead to a leak of sensitive information."}, {"lang": "es", "value": "Una vulnerabilidad de tipo SSRF en /proxy en el repositorio de GitHub jgraph/drawio versiones anteriores a 18.0.4. Un atacante puede hacer una petici\u00f3n como el servidor y leer su contenido. Esto puede conllevar a un filtrado de informaci\u00f3n confidencial"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:diagrams:drawio:*:*:*:*:*:*:*:*", "versionEndExcluding": "18.0.4", "matchCriteriaId": "BFEF9A45-A452-4A3E-BB66-69B0C1797904"}]}]}], "references": [{"url": "https://github.com/jgraph/drawio/commit/283d41ec80ad410d68634245cf56114bc19331ee", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/cad3902f-3afb-4ed2-abd0-9f96a248de11", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jgraph/drawio/commit/283d41ec80ad410d68634245cf56114bc19331ee"}}