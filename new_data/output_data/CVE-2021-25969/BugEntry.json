{"buggy_code": ["<% comments.each do |comment| user = comment.comment_user.decorate %>\n    <div class=\"comment-body <%= \"answer\" if children.present? %>\">\n        <div class=\"image <%= \"image_children\" if children.present? %>\">\n            <div class=\"thumbnail\">\n                <%= image_tag user.the_avatar, class: \"img-responsive avatar\"%>\n            </div><!-- /thumbnail -->\n        </div><!-- /col-sm-1 -->\n        <div class=\"comment-content text <%= \"text_children\" if children.present? %>\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                    <strong class=\"<%= (children.present?)? \"pull-right\" : \"\" %>\"><%= user.the_name %></strong> <small class=\"text-muted <%= (children.present?)? \"\" : \"pull-right\" %>\"><%= comment.decorate.the_created_at %></small>\n                </div>\n                <div class=\"panel-body\">\n                    <%= raw comment.content %>\n                </div><!-- /panel-body -->\n            </div><!-- /panel panel-default -->\n        </div><!-- /col-sm-5 -->\n    </div>\n    <%= render partial: \"partials/comments_list\", locals: { comments: comment.children.approveds, children: \"present\" }  if comment.children.present? %>\n<% end %>", "module CamaleonCms::CommentHelper\n  # return common data to save a new comment\n  # user_id, author, aothor_email, author_ip, approved, :agent\n  def cama_comments_get_common_data\n    comment_data = {}\n    comment_data[:user_id] = cama_current_user.id\n    comment_data[:author] = cama_current_user.the_name\n    comment_data[:author_email] = cama_current_user.email\n    comment_data[:author_IP] = request.remote_ip.to_s\n    comment_data[:approved] = \"approved\"\n    comment_data[:agent] = request.user_agent.force_encoding(\"ISO-8859-1\").encode(\"UTF-8\")\n    comment_data\n  end\n\n  # render as html content all comments recursively\n  # comments: collection of comments\n  def cama_comments_render_html(comments)\n    res = \"\"\n    labels = {\"approved\" => \"success\", \"pending\"=>\"warning\", \"spam\" => \"danger\" }\n    comments.decorate.each do |comment|\n      author = comment.the_author\n      res << \"<div class='media'>\n                 <div class='media-left'>\n                    <a href='#{author.the_admin_profile_url}'>#{image_tag author.the_avatar, class: 'media-object', style: 'width: 64px; height: 64px;'}</a>\n                 </div>\n                 <div class='media-body'>\n                    <h4 class='media-heading'>#{author.the_name} <small>#{comment.the_created_at}</small> <span class='label label-#{labels[comment.approved]} pull-right'>#{t(\"camaleon_cms.admin.comments.message.#{comment.approved}\")}</span></h4>\n                    <div class='comment_content'>#{comment.content}</div>\n                    <div class='comment_actions'>\n                        <div class='pull-left'>\n                            <a href='#{cama_admin_post_comment_answer_path(@post.id, comment.id)}' data-comment-id='#{comment.id}' title='#{t('camaleon_cms.admin.comments.tooltip.reply_comment')}' class='btn btn-info reply btn-xs ajax_modal'><span class='fa fa-mail-reply'></span></a>\n                            #{link_to raw('<i class=\"fa fa-trash-o\"></i>'), { action: :destroy, id: comment.id }, method: :delete, data: { confirm: t('camaleon_cms.admin.message.delete') }, class: \"btn btn-danger btn-xs cama_ajax_request\", title: \"#{t('camaleon_cms.admin.comments.tooltip.delete_comment')}\" }\n                        </div>\n                        <div class='pull-right'>\n                            <a href='#{url_for({ action: :toggle_status, comment_id: comment.id, s: \"a\" })}' title='#{t('camaleon_cms.admin.comments.tooltip.approved_comment')}' class='#{\"hidden\" if comment.approved == \"approved\"} btn btn-success approve btn-xs cama_ajax_request'><span class='fa fa-thumbs-o-up'></span></a>\n                            <a href='#{url_for({ action: :toggle_status, comment_id: comment.id, s: \"p\" })}' title='#{t('camaleon_cms.admin.comments.tooltip.comment_pending')}' class='#{\"hidden\" if comment.approved == \"pending\"} btn btn-primary pending btn-xs cama_ajax_request'><span class='fa fa-warning'></span></a>\n                            <a href='#{url_for({ action: :toggle_status, comment_id: comment.id, s: \"s\" })}' title='#{t('camaleon_cms.admin.comments.tooltip.comment_spam')}' class='#{\"hidden\" if comment.approved == \"spam\"} btn btn-danger spam btn-xs cama_ajax_request'><span class='fa fa-bug'></span></a>\n                        </div>\n                    </div>\n                    <hr>\n                    <div class='clearfix'></div>\n                    #{ cama_comments_render_html comment.children }\n                 </div>\n              </div>\"\n    end\n    res\n  end\nend\n", "<% comments.each do |comment| user = comment.comment_user.decorate %>\n    <div class=\"row <%= \"answer\" if children.present? %>\">\n        <div class=\"col-sm-1 <%= \"col-md-offset-1\" if children.present? %>\">\n            <div class=\"thumbnail\">\n                <%= link_to(image_tag(user.the_avatar, class: \"img-responsive\"), user.the_url) %>\n            </div><!-- /thumbnail -->\n        </div><!-- /col-sm-1 -->\n\n        <div class=\"col-sm-<%= children.present? ? \"8\" : \"9\" %>\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                    <strong class=\"\"><%= link_to(user.the_name, user.the_url) %></strong> <small class=\"text-muted pull-right\"><%= comment.decorate.the_created_at %></small>\n                </div>\n                <div class=\"panel-body\">\n                    <%= raw comment.content %>\n                </div><!-- /panel-body -->\n            </div><!-- /panel panel-default -->\n        </div><!-- /col-sm-5 -->\n    </div>\n    <%= render partial: \"partials/comments_list\", locals: { comments: comment.children.approveds, children: \"present\" }  if comment.children.present? %>\n<% end %>", "<ul class=\"media-list comments-list\">\n    <% comments.each do |comment| user = comment.comment_user.decorate %>\n        <li class=\"media\">\n            <div class=\"media-left\">\n                <%= link_to(image_tag(user.the_avatar, class: \"media-object\", style: 'width: 64px;'), user.the_url) %>\n            </div>\n            <div class=\"media-body\">\n                <h4 class=\"media-heading\"><%= link_to(user.the_name, user.the_url) %> <small class=\"pull-right\"><%= comment.decorate.the_created_at %></small></h4>\n                <div><%= raw comment.content %></div>\n                <% comment.children.approveds.each do |answer| user2 = answer.comment_user.decorate %>\n                    <div class=\"media\">\n                        <div class=\"media-left\">\n                            <%= link_to(image_tag(user2.the_avatar, class: \"media-object\", style: 'width: 64px;'), user2.the_url) %>\n                        </div>\n                        <div class=\"media-body\">\n                            <h4 class=\"media-heading\"><%= link_to(user2.the_name, user.the_url) %> <small class=\"pull-right\"><%= answer.decorate.the_created_at %></small></h4>\n                            <div><%= raw answer.content %></div>\n                        </div>\n                    </div>\n                <% end %>\n            </div>\n        </li>\n    <% end %>\n</ul>"], "fixing_code": ["<% comments.each do |comment| user = comment.comment_user.decorate %>\n    <div class=\"comment-body <%= \"answer\" if children.present? %>\">\n        <div class=\"image <%= \"image_children\" if children.present? %>\">\n            <div class=\"thumbnail\">\n                <%= image_tag user.the_avatar, class: \"img-responsive avatar\"%>\n            </div><!-- /thumbnail -->\n        </div><!-- /col-sm-1 -->\n        <div class=\"comment-content text <%= \"text_children\" if children.present? %>\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                    <strong class=\"<%= (children.present?)? \"pull-right\" : \"\" %>\"><%= user.the_name %></strong> <small class=\"text-muted <%= (children.present?)? \"\" : \"pull-right\" %>\"><%= comment.decorate.the_created_at %></small>\n                </div>\n                <div class=\"panel-body\">\n                    <%= comment.content %>\n                </div><!-- /panel-body -->\n            </div><!-- /panel panel-default -->\n        </div><!-- /col-sm-5 -->\n    </div>\n    <%= render partial: \"partials/comments_list\", locals: { comments: comment.children.approveds, children: \"present\" }  if comment.children.present? %>\n<% end %>\n", "module CamaleonCms::CommentHelper\n  # return common data to save a new comment\n  # user_id, author, aothor_email, author_ip, approved, :agent\n  def cama_comments_get_common_data\n    comment_data = {}\n    comment_data[:user_id] = cama_current_user.id\n    comment_data[:author] = cama_current_user.the_name\n    comment_data[:author_email] = cama_current_user.email\n    comment_data[:author_IP] = request.remote_ip.to_s\n    comment_data[:approved] = \"approved\"\n    comment_data[:agent] = request.user_agent.force_encoding(\"ISO-8859-1\").encode(\"UTF-8\")\n    comment_data\n  end\n\n  # render as html content all comments recursively\n  # comments: collection of comments\n  def cama_comments_render_html(comments)\n    res = \"\"\n    labels = {\"approved\" => \"success\", \"pending\"=>\"warning\", \"spam\" => \"danger\" }\n    comments.decorate.each do |comment|\n      author = comment.the_author\n      res << \"<div class='media'>\n                 <div class='media-left'>\n                    <a href='#{author.the_admin_profile_url}'>#{image_tag author.the_avatar, class: 'media-object', style: 'width: 64px; height: 64px;'}</a>\n                 </div>\n                 <div class='media-body'>\n                    <h4 class='media-heading'>#{author.the_name} <small>#{comment.the_created_at}</small> <span class='label label-#{labels[comment.approved]} pull-right'>#{t(\"camaleon_cms.admin.comments.message.#{comment.approved}\")}</span></h4>\n                    <div class='comment_content'>#{sanitize comment.content}</div>\n                    <div class='comment_actions'>\n                        <div class='pull-left'>\n                            <a href='#{cama_admin_post_comment_answer_path(@post.id, comment.id)}' data-comment-id='#{comment.id}' title='#{t('camaleon_cms.admin.comments.tooltip.reply_comment')}' class='btn btn-info reply btn-xs ajax_modal'><span class='fa fa-mail-reply'></span></a>\n                            #{link_to raw('<i class=\"fa fa-trash-o\"></i>'), { action: :destroy, id: comment.id }, method: :delete, data: { confirm: t('camaleon_cms.admin.message.delete') }, class: \"btn btn-danger btn-xs cama_ajax_request\", title: \"#{t('camaleon_cms.admin.comments.tooltip.delete_comment')}\" }\n                        </div>\n                        <div class='pull-right'>\n                            <a href='#{url_for({ action: :toggle_status, comment_id: comment.id, s: \"a\" })}' title='#{t('camaleon_cms.admin.comments.tooltip.approved_comment')}' class='#{\"hidden\" if comment.approved == \"approved\"} btn btn-success approve btn-xs cama_ajax_request'><span class='fa fa-thumbs-o-up'></span></a>\n                            <a href='#{url_for({ action: :toggle_status, comment_id: comment.id, s: \"p\" })}' title='#{t('camaleon_cms.admin.comments.tooltip.comment_pending')}' class='#{\"hidden\" if comment.approved == \"pending\"} btn btn-primary pending btn-xs cama_ajax_request'><span class='fa fa-warning'></span></a>\n                            <a href='#{url_for({ action: :toggle_status, comment_id: comment.id, s: \"s\" })}' title='#{t('camaleon_cms.admin.comments.tooltip.comment_spam')}' class='#{\"hidden\" if comment.approved == \"spam\"} btn btn-danger spam btn-xs cama_ajax_request'><span class='fa fa-bug'></span></a>\n                        </div>\n                    </div>\n                    <hr>\n                    <div class='clearfix'></div>\n                    #{ cama_comments_render_html comment.children }\n                 </div>\n              </div>\"\n    end\n    res\n  end\nend\n", "<% comments.each do |comment| user = comment.comment_user.decorate %>\n    <div class=\"row <%= \"answer\" if children.present? %>\">\n        <div class=\"col-sm-1 <%= \"col-md-offset-1\" if children.present? %>\">\n            <div class=\"thumbnail\">\n                <%= link_to(image_tag(user.the_avatar, class: \"img-responsive\"), user.the_url) %>\n            </div><!-- /thumbnail -->\n        </div><!-- /col-sm-1 -->\n\n        <div class=\"col-sm-<%= children.present? ? \"8\" : \"9\" %>\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                    <strong class=\"\"><%= link_to(user.the_name, user.the_url) %></strong> <small class=\"text-muted pull-right\"><%= comment.decorate.the_created_at %></small>\n                </div>\n                <div class=\"panel-body\">\n                    <%= comment.content %>\n                </div><!-- /panel-body -->\n            </div><!-- /panel panel-default -->\n        </div><!-- /col-sm-5 -->\n    </div>\n    <%= render partial: \"partials/comments_list\", locals: { comments: comment.children.approveds, children: \"present\" }  if comment.children.present? %>\n<% end %>\n", "<ul class=\"media-list comments-list\">\n    <% comments.each do |comment| user = comment.comment_user.decorate %>\n        <li class=\"media\">\n            <div class=\"media-left\">\n                <%= link_to(image_tag(user.the_avatar, class: \"media-object\", style: 'width: 64px;'), user.the_url) %>\n            </div>\n            <div class=\"media-body\">\n                <h4 class=\"media-heading\"><%= link_to(user.the_name, user.the_url) %> <small class=\"pull-right\"><%= comment.decorate.the_created_at %></small></h4>\n                <div><%= comment.content %></div>\n                <% comment.children.approveds.each do |answer| user2 = answer.comment_user.decorate %>\n                    <div class=\"media\">\n                        <div class=\"media-left\">\n                            <%= link_to(image_tag(user2.the_avatar, class: \"media-object\", style: 'width: 64px;'), user2.the_url) %>\n                        </div>\n                        <div class=\"media-body\">\n                            <h4 class=\"media-heading\"><%= link_to(user2.the_name, user.the_url) %> <small class=\"pull-right\"><%= answer.decorate.the_created_at %></small></h4>\n                            <div><%= raw answer.content %></div>\n                        </div>\n                    </div>\n                <% end %>\n            </div>\n        </li>\n    <% end %>\n</ul>\n"], "filenames": ["app/apps/themes/default/views/partials/_comments_list.html.erb", "app/helpers/camaleon_cms/comment_helper.rb", "app/views/camaleon_cms/default_theme/partials/_comments_list.html.erb", "app/views/camaleon_cms/default_theme/partials/_comments_list2.html.erb"], "buggy_code_start_loc": [14, 28, 15, 9], "buggy_code_end_loc": [21, 29, 22, 25], "fixing_code_start_loc": [14, 28, 15, 9], "fixing_code_end_loc": [21, 29, 22, 25], "type": "CWE-79", "message": "In Camaleon CMS application, versions 0.0.1 to 2.6.0 are vulnerable to stored XSS, that allows an unauthenticated attacker to store malicious scripts in the comments section of the post. These scripts are executed in a victim\u2019s browser when they open the page containing the malicious comment.", "other": {"cve": {"id": "CVE-2021-25969", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-10-20T12:15:07.517", "lastModified": "2021-11-29T17:22:02.467", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Camaleon CMS application, versions 0.0.1 to 2.6.0 are vulnerable to stored XSS, that allows an unauthenticated attacker to store malicious scripts in the comments section of the post. These scripts are executed in a victim\u2019s browser when they open the page containing the malicious comment."}, {"lang": "es", "value": "En la aplicaci\u00f3n Camaleon CMS, las versiones 0.0.1 a 2.6.0 son vulnerables a un ataque de tipo XSS almacenado, que permite a un atacante no autentificado almacenar scripts maliciosos en la secci\u00f3n de comentarios del post. Estos scripts se ejecutan en el navegador de la v\u00edctima cuando \u00e9sta abre la p\u00e1gina que contiene el comentario malicioso"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tuzitio:camaleon_cms:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.0.1", "versionEndIncluding": "2.6.0", "matchCriteriaId": "C545A543-CAC5-497C-8BD8-9ED1B2326349"}]}]}], "references": [{"url": "https://github.com/owen2345/camaleon-cms/commit/05506e9087bb05282c0bae6ccfe0283d0332ab3c", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25969", "source": "vulnerabilitylab@mend.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/owen2345/camaleon-cms/commit/05506e9087bb05282c0bae6ccfe0283d0332ab3c"}}