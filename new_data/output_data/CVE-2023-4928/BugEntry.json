{"buggy_code": ["[version]\nmajor = 2\nminor = 16\nbuild = 1\ndate = 20230613", "<?php\nclass admin extends cmsFrontend {\n\n    use icms\\traits\\eventDispatcher;\n\n    const addons_api_key   = '8e13cb202f8bdc27dc765e0448e50d11';\n    const addons_api_point = 'https://api.instantcms.ru/api/method/';\n\n    public $disallow_mapping_redirect = true;\n\n    protected $useOptions = true;\n\n    const perpage = 30;\n\n    public $installer_upload_path = 'installer';\n\n    public $install_folder_exists = false;\n\n\tpublic function routeAction($action_name) {\n\n        if ($this->request->isStandard()) {\n\n            $result = cmsEventsManager::hook('admin_confirm_login', [\n                'allow'     => true,\n                'form'      => null,\n                'errors'    => null,\n                'pagetitle' => null,\n                'title'     => null,\n                'hint'      => null\n            ]);\n\n            if (!$result['allow']) {\n\n                unset($result['allow']);\n\n                $this->current_params = $result;\n\n                return 'confirm_login';\n            }\n        }\n\n        return $action_name;\n    }\n\n    protected function validateParamsCount($class, $method_name, $params) {\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0435 admin \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430\n        return true;\n    }\n\n    public function before($action_name) {\n\n        parent::before($action_name);\n\n        if (!$this->request->isInternal()) {\n\n            if ($this->cms_config->template_admin) {\n                $this->cms_template->setBaseTemplate($this->cms_config->template_admin);\n            }\n\n            if (!$this->cms_user->is_logged) {\n                cmsCore::errorForbidden('', true);\n            }\n\n            if (!$this->cms_user->is_admin) {\n                cmsCore::error404();\n            }\n\n            if (!$this->isAllowByIp()) {\n                cmsCore::errorForbidden(LANG_ADMIN_ACCESS_DENIED_BY_IP);\n            }\n\n            $this->install_folder_exists = file_exists($this->cms_config->root_path . 'install/');\n\n            if ($this->request->isStandard()) {\n\n                $this->cms_template->setLayout('admin');\n\n                $this->cms_template->setMenuItems('cp_main', $this->getAdminMenu($this->cms_template->name === 'admincoreui'));\n\n                $this->cms_template->setLayoutParams([\n                    'user'          => $this->cms_user,\n                    'current_lang'  => cmsCore::getLanguageName(),\n                    'langs'         => cmsCore::getLanguages(),\n                    'hide_sidebar'  => cmsUser::getCookie('hide_sidebar', 'integer'),\n                    'close_sidebar' => cmsUser::getCookie('close_sidebar', 'integer'),\n                    'su'            => $this->getSystemUtilization(),\n                    'update'        => ($this->cms_config->is_check_updates ? $this->cms_updater->checkUpdate(true) : array()),\n                    'notices_count' => cmsCore::getModel('messages')->getNoticesCount($this->cms_user->id)\n                ]);\n            }\n        }\n    }\n\n    private function isAllowByIp() {\n\n        $allow_ips = cmsConfig::get('allow_ips');\n        if (!$allow_ips) { return true; }\n\n        return string_in_mask_list(cmsUser::getIp(), $allow_ips);\n    }\n\n    function getSystemUtilization() {\n\n        $total_size = disk_total_space(PATH);\n        $free_space = disk_free_space(PATH);\n        $taken_space = ($total_size -$free_space);\n        $percent = round($taken_space/$total_size*100);\n\n        $su = [\n            'disk' => [\n                'title'   => LANG_CP_SU_DISK,\n                'hint'    => files_format_bytes($taken_space).'/'.files_format_bytes($total_size),\n                'percent' => $percent,\n                'style'   => ($percent <= 50 ? 'info' : ($percent <= 75 ? 'warning' : 'danger'))\n            ]\n        ];\n\n        if(function_exists('sys_getloadavg')){\n\n            $cpu_count = cmsUser::sessionGet('cpu_count');\n\n            if(!$cpu_count){\n\n                // \u041d\u0443 \u0430 \u0432\u0434\u0440\u0443\u0433 ;-)\n                if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n                    $cmd = 'echo %NUMBER_OF_PROCESSORS%';\n                } else {\n                    $cmd = \"grep -P '^physical id' /proc/cpuinfo|wc -l\";\n                }\n\n                try {\n                    $cpu_count = console_exec_command($cmd);\n\n                    if(!empty($cpu_count[0])){\n                        $cpu_count = trim($cpu_count[0]) ? trim($cpu_count[0]) : 1;\n                    } else {\n                        $cpu_count = 1;\n                    }\n\n                } catch (Exception $exc) {\n                    $cpu_count = 'error';\n                }\n\n                cmsUser::sessionSet('cpu_count', $cpu_count);\n            }\n\n            if($cpu_count && is_numeric($cpu_count)){\n\n                $la = sys_getloadavg();\n\n                if(isset($la[2])){\n\n                    $current_load_average = round(100*($la[2]/$cpu_count));\n\n                    // \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u043e\n                    if($current_load_average > 110){\n                        $cpu_count = round($current_load_average/100);\n                        cmsUser::sessionSet('cpu_count', $cpu_count);\n                        $current_load_average = round(100*($la[2]/$cpu_count));\n                    }\n\n                    $su['cpu'] = [\n                        'title'   => LANG_CP_SU_CPU,\n                        'hint'    => $current_load_average.'%',\n                        'percent' => $current_load_average,\n                        'style'   => ($current_load_average <= 50 ? 'info' : ($current_load_average <= 75 ? 'warning' : 'danger'))\n                    ];\n                }\n\n            }\n\n        }\n\n        return cmsEventsManager::hook('admin_system_utilization', $su);\n    }\n\n    public function buildDatasetFieldsList($controller_name, $fields) {\n\n        $fields_list = [];\n\n        foreach ($fields as $field) {\n\n            if ((!$field['handler']->allow_index || $field['handler']->filter_type === false) && $field['type'] !== 'parent') {\n                continue;\n            }\n\n            $fields_list[] = [\n                'value' => $field['name'],\n                'type'  => $field['handler']->filter_type,\n                'title' => $field['title']\n            ];\n        }\n\n        return cmsEventsManager::hook('admin_' . $controller_name . '_dataset_fields_list', $fields_list);\n    }\n\n    public function getAdminMenu($show_submenu = false){\n\n        $menu = []; $ctype_new_count = 0;\n\n        $ctypes = $this->model_backend_content->getContentTypes();\n\n        if($show_submenu){\n            foreach ($ctypes as $ctype) {\n                $ctype_new_count += $this->model->getTableItemsCount24($this->model->getContentTypeTableName($ctype['name']));\n            }\n        }\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_CONTENT,\n            'url' => href_to($this->name, 'content'),\n            'counter' => ($ctypes && $show_submenu && $ctype_new_count) ? '+'.$ctype_new_count : null,\n            'options' => [\n                'class' => 'item-content',\n                'icon'  => 'file-alt'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_CTYPES,\n            'url' => href_to($this->name, 'ctypes'),\n            'options' => [\n                'class' => 'item-ctypes',\n                'icon'  => 'pencil-ruler'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_MENU,\n            'url' => href_to($this->name, 'menu'),\n            'options' => [\n                'class' => 'item-menu',\n                'icon'  => 'bars'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_WIDGETS,\n            'url' => href_to($this->name, 'widgets'),\n            'options' => [\n                'class' => 'item-widgets',\n                'icon'  => 'th-large'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_CONTROLLERS,\n            'url' => href_to($this->name, 'controllers'),\n            'options' => [\n                'class' => 'item-controllers',\n                'icon'  => 'layer-group'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_OFICIAL_ADDONS,\n            'url' => href_to($this->name, 'addons_list'),\n            'options' => [\n                'class' => 'item-addons',\n                'icon'  => 'puzzle-piece'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_USERS,\n            'url' => href_to($this->name, 'users'),\n            'options' => [\n                'class' => 'item-users',\n                'icon'  => 'users-cog'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_SETTINGS,\n            'url' => href_to($this->name, 'settings'),\n            'options' => [\n                'class' => 'item-settings',\n                'icon'  => 'cog'\n            ]\n        ];\n\n        return cmsEventsManager::hook('adminpanel_menu', $menu);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getCtypeMenu($do = 'add', $id = null) {\n\n        $ctype_menu = [\n            [\n                'title' => LANG_CP_CTYPE_SETTINGS,\n                'url'   => href_to($this->name, 'ctypes', ($do == 'add' ? ['add'] : ['edit', $id]))\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_LABELS,\n                'url'      => href_to($this->name, 'ctypes', ['labels', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_FIELDS,\n                'url'      => href_to($this->name, 'ctypes', ['fields', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_PROPS,\n                'url'      => href_to($this->name, 'ctypes', ['props', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_PERMISSIONS,\n                'url'      => href_to($this->name, 'ctypes', ['perms', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_DATASETS,\n                'url'      => href_to($this->name, 'ctypes', ['datasets', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_FILTERS,\n                'url'      => href_to($this->name, 'ctypes', ['filters', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_MODERATORS,\n                'url'      => href_to($this->name, 'ctypes', ['moderators', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_RELATIONS,\n                'url'      => href_to($this->name, 'ctypes', ['relations', $id]),\n                'disabled' => ($do === 'add')\n            ]\n        ];\n\n        list($ctype_menu, $do, $id) = cmsEventsManager::hook('admin_ctype_menu', [$ctype_menu, $do, $id]);\n\n        if ($do !== 'add') {\n\n            $ctype = $this->model_backend_content->getContentType($id);\n\n            if ($ctype) {\n\n                // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0438 \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043d\u0435\u0433\u043e \u043e\u043f\u0446\u0438\u0438\n                if (cmsCore::isControllerExists($ctype['name'])) {\n                    if (cmsCore::getController($ctype['name'])->options) {\n                        $ctype_menu[] = [\n                            'title'   => LANG_CP_CONTROLLERS_OPTIONS,\n                            'url'     => href_to($this->name, 'controllers', ['edit', $ctype['name'], 'options']),\n                            'options' => [\n                                'icon' => 'cogs'\n                            ]\n                        ];\n                    }\n                }\n\n                list($ctype_menu, $ctype) = cmsEventsManager::hook('admin_' . $ctype['name'] . '_ctype_menu', [$ctype_menu, $ctype]);\n            }\n        }\n\n        return $ctype_menu;\n    }\n\n    public function addCtypeWidgetsPages($ctype){\n\n        $this->model_backend_widgets->addPage(array(\n            'controller' => 'content',\n            'name' => \"{$ctype['name']}.all\",\n            'title_const' => 'LANG_WP_CONTENT_ALL_PAGES',\n            'url_mask' => array(\n                \"{$ctype['name']}\",\n                \"{$ctype['name']}-*\",\n                \"{$ctype['name']}/*\",\n            )\n        ));\n\n        $this->model_backend_widgets->addPage(array(\n            'controller' => 'content',\n            'name' => \"{$ctype['name']}.list\",\n            'title_const' => 'LANG_WP_CONTENT_LIST',\n            'url_mask' => array(\n                \"{$ctype['name']}\",\n                \"{$ctype['name']}-*\",\n                \"{$ctype['name']}/*\",\n            ),\n            'url_mask_not' => array(\n                \"{$ctype['name']}/*/view-*\",\n                \"{$ctype['name']}/*.html\",\n                \"{$ctype['name']}/add\",\n                \"{$ctype['name']}/add?*\",\n                \"{$ctype['name']}/add/%\",\n                \"{$ctype['name']}/addcat\",\n                \"{$ctype['name']}/addcat/%\",\n                \"{$ctype['name']}/editcat/%\",\n                \"{$ctype['name']}/edit/*\",\n            )\n        ));\n\n        $this->model_backend_widgets->addPage(array(\n            'controller' => 'content',\n            'name' => \"{$ctype['name']}.item\",\n            'title_const' => 'LANG_WP_CONTENT_ITEM',\n            'url_mask' => \"{$ctype['name']}/*.html\"\n        ));\n\n        $this->model_backend_widgets->addPage(array(\n            'controller' => 'content',\n            'name' => \"{$ctype['name']}.edit\",\n            'title_const' => 'LANG_WP_CONTENT_ITEM_EDIT',\n            'url_mask' => array(\n                \"{$ctype['name']}/add\",\n                \"{$ctype['name']}/add/%\",\n                \"{$ctype['name']}/edit/*\"\n            )\n        ));\n\n        return true;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getSettingsMenu(){\n\n        $template = new cmsTemplate($this->cms_config->template);\n\n        $menu = [];\n\n        $menu[] = [\n            'title'   => LANG_BASIC_OPTIONS,\n            'url'     => href_to($this->name, 'settings'),\n            'options' => [\n                'icon' => 'tools'\n            ]\n        ];\n        $menu[] = [\n            'title'   => LANG_CP_SCHEDULER,\n            'url'     => href_to($this->name, 'settings', ['scheduler']),\n            'options' => [\n                'icon' => 'clock'\n            ]\n        ];\n        if($template->hasOptions()){\n\n            $is_icon_list_exists = $template->hasIconList();\n\n            $menu[] = [\n                'title'   => LANG_CP_SETTINGS_TEMPLATE_OPTIONS,\n                'url'     => href_to($this->name, 'settings', ['theme', $this->cms_config->template]),\n                'childs_count' => $is_icon_list_exists ? 1 : null,\n                'options' => [\n                    'icon' => 'palette'\n                ]\n            ];\n            if($is_icon_list_exists){\n                $menu[] = [\n                    'title'   => LANG_CP_TEMPLATE_ICONS,\n                    'level' => 2,\n                    'url'     => href_to($this->name, 'settings', ['theme', $this->cms_config->template, 'icon_list']),\n                    'options' => [\n                        'icon' => 'icons'\n                    ]\n                ];\n            }\n        }\n        $menu[] = [\n            'title'   => LANG_CP_CHECK_NESTED,\n            'url'     => href_to($this->name, 'settings', ['check_nested']),\n            'options' => [\n                'icon' => 'tree'\n            ]\n        ];\n\n        return cmsEventsManager::hook('admin_settings_menu', $menu);\n    }\n\n    public function getUserGroupsMenu($action = 'view', $id = 0) {\n\n        return cmsEventsManager::hook('admin_user_groups_menu', [\n            [\n                'title'   => LANG_CONFIG,\n                'url'     => $action !== 'add' ? href_to($this->name, 'users', ['group_edit', $id]) : href_to($this->name, 'users', 'group_add'),\n                'options' => [\n                    'icon' => 'users-cog'\n                ]\n            ],\n            [\n                'title'    => LANG_PERMISSIONS,\n                'disabled' => $action === 'add' ? true : null,\n                'url'      => href_to($this->name, 'users', ['group_perms', $id]),\n                'options'  => [\n                    'icon' => 'key'\n                ]\n            ]\n        ]);\n    }\n\n    public function getAddonsMenu() {\n\n        return cmsEventsManager::hook('admin_addons_menu', [\n            [\n                'title'   => LANG_CP_OFICIAL_ADDONS,\n                'url'     => href_to($this->name, 'addons_list'),\n                'options' => [\n                    'icon' => 'puzzle-piece'\n                ]\n            ],\n            [\n                'title'   => LANG_CP_INSTALL_PACKAGE,\n                'url'     => href_to($this->name, 'install'),\n                'options' => [\n                    'icon' => 'upload'\n                ]\n            ],\n            [\n                'title'   => LANG_CP_SECTION_CONTROLLERS,\n                'url'     => href_to($this->name, 'controllers'),\n                'options' => [\n                    'icon' => 'layer-group'\n                ]\n            ],\n            [\n                'title'   => LANG_EVENTS_MANAGEMENT,\n                'url'     => href_to($this->name, 'controllers', 'events'),\n                'options' => [\n                    'icon' => 'business-time'\n                ]\n            ]\n        ]);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function loadControllerBackend($controller_name, $request){\n\n        $ctrl_file = $this->cms_config->root_path . 'system/controllers/'.$controller_name.'/backend.php';\n\n        if(!file_exists($ctrl_file)){\n            cmsCore::error(sprintf(LANG_CP_ERR_BACKEND_NOT_FOUND, $controller_name));\n        }\n\n        include_once($ctrl_file);\n\n        $controller_class = 'backend'.ucfirst($controller_name);\n\n        $backend = new $controller_class($request);\n\n        $backend->controller_admin = $this;\n\n        return $backend;\n\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function parsePackageManifest(){\n\n        $path = $this->cms_config->upload_path . $this->installer_upload_path;\n\n        $ini_file = $path . '/' . \"manifest.{$this->cms_config->language}.ini\";\n        $ini_file_default = $path . '/manifest.ru.ini';\n\n        if (!file_exists($ini_file)){ $ini_file = $ini_file_default; }\n        if (!file_exists($ini_file)){ return false; }\n\n        $manifest = parse_ini_file($ini_file, true);\n\n        if (file_exists($this->cms_config->upload_path . $this->installer_upload_path . '/' . 'package')){\n            $manifest['contents'] = $this->getPackageContentsList();\n            if($manifest['contents']){\n                if(!empty($manifest['contents']['system']['core'])){\n                    foreach ($manifest['contents']['system']['core'] as $file) {\n                        if(file_exists($this->cms_config->root_path . 'system/core/'.$file)){\n                            $manifest['notice_system_files'] = LANG_INSTALL_NOTICE_SYSTEM_FILE;\n                            break;\n                        }\n                    }\n                }\n                if(!empty($manifest['contents']['system']['config'])){\n                    foreach ($manifest['contents']['system']['config'] as $file) {\n                        if(file_exists($this->cms_config->root_path . 'system/config/'.$file)){\n                            $manifest['notice_system_files'] = LANG_INSTALL_NOTICE_SYSTEM_FILE;\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n\t\t\t$manifest['contents'] = false;\n\t\t}\n\n        if (isset($manifest['info']['image'])){\n            $manifest['info']['image'] = $this->cms_config->upload_host . '/' .\n                                            $this->installer_upload_path . '/' .\n                                            $manifest['info']['image'];\n        }\n\n        if (isset($manifest['info']['image_hint'])){\n            $manifest['info']['image_hint'] = $this->cms_config->upload_path .\n                                            $this->installer_upload_path . '/' .\n                                            $manifest['info']['image_hint'];\n        }\n\n        if((isset($manifest['install']) || isset($manifest['update']))){\n\n            $action = (isset($manifest['install']) ? 'install' : 'update');\n\n            if(isset($manifest[$action]['type']) && isset($manifest[$action]['name'])){\n\n                $manifest['package'] = array(\n                    'type'       => $manifest[$action]['type'],\n                    'type_hint'  => constant('LANG_CP_PACKAGE_TYPE_'.strtoupper($manifest[$action]['type']).'_'.strtoupper($action)),\n                    'action'     => $action,\n                    'name'       => $manifest[$action]['name'],\n                    'controller' => (isset($manifest[$action]['controller']) ? $manifest[$action]['controller'] : null),\n                );\n\n                // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e\n                if(method_exists($this, $manifest[$action]['type'].'Installed')){\n                    $manifest['package']['installed_version'] = call_user_func(array($this, $manifest[$action]['type'].'Installed'), $manifest['package']);\n                }\n            }\n\n\n        }\n\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432 \u0438 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u043e\u0432\n        if(!empty($manifest['package_controllers']['controller'])){\n            $manifest['package_controllers'] = $manifest['package_controllers']['controller'];\n        } else {\n            $manifest['package_controllers'] = false;\n        }\n\n        $dir = $path.'/package/system/controllers';\n\n        if (!$manifest['package_controllers'] && is_dir($dir)) {\n\n            $dir_context = opendir($dir);\n            $controllers = array();\n\n            while ($next = readdir($dir_context)){\n                if (in_array($next, array('.', '..'))){ continue; }\n                if (strpos($next, '.') === 0){ continue; }\n                if (!is_dir($dir.'/'.$next)) { continue; }\n                $controllers[] = $next;\n            }\n\n            if($controllers){\n\n                asort($controllers);\n\n                $manifest['package_controllers'] = $controllers;\n\n            }\n\n        }\n\n        return $manifest;\n\n    }\n\n    public function componentInstalled($manifest_package) {\n\n        $model = new cmsModel();\n\n        return $model->filterEqual('name', $manifest_package['name'])->getFieldFiltered('controllers', 'version');\n\n    }\n\n    public function widgetInstalled($manifest_package) {\n\n        $model = new cmsModel();\n\n        return $model->filterEqual('name', $manifest_package['name'])->\n                filterEqual('controller', $manifest_package['controller'])->\n                getFieldFiltered('widgets', 'version');\n\n    }\n\n    public function getPackageContentsList() {\n\n        $path = $this->cms_config->upload_path . $this->installer_upload_path . '/' . 'package';\n\n        if (!is_dir($path)) {\n            return false;\n        }\n\n        return files_tree_to_array($path);\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0445\u0443\u043a\u043e\u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432\n     * \u0427\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0444\u0430\u0439\u043b\u044b \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 hooks \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\n     *\n     * @return array\n     */\n    public function getControllersFilesEvents() {\n\n        $events = [];\n\n        $controllers = cmsCore::getDirsList('system/controllers', true);\n\n        $index = 0;\n\n        foreach ($controllers as $controller_name) {\n\n            $ctrl_file = $this->cms_config->root_path . 'system/controllers/'.$controller_name.'/frontend.php';\n            if(!is_readable($ctrl_file)){ continue; }\n\n            $hooks = cmsCore::getFilesList('system/controllers/' . $controller_name . '/hooks', '*.php', true, true);\n            if (!$hooks) { continue; }\n\n            $controller_object = cmsCore::getController($controller_name);\n\n            foreach ($hooks as $event_name) {\n\n                $hook_class_name = 'on' . string_to_camel('_', $controller_name) . string_to_camel('_', $event_name);\n\n                $hook_object = new $hook_class_name($controller_object);\n\n                // \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0443\u043a\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445,\n                // \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0445\u0443\u043a\u0438 \u0434\u043b\u044f CRON \u0438\u043b\u0438 \u0438\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e\n                // \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u043e $disallow_event_db_register \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 \u0445\u0443\u043a\u0430 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u0443\u0435\u0442 \u044d\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\n                if(empty($hook_object->disallow_event_db_register)){\n\n                    $events[$controller_name][$index] = $event_name;\n\n                    $index++;\n                }\n            }\n        }\n\n        return $events;\n    }\n\n    public function getEventsDifferences($event_controller = false) {\n\n        $result = [\n            'added'   => [],\n            'deleted' => []\n        ];\n\n        $manifests_events = $this->getControllersFilesEvents();\n        $database_events  = cmsCore::getControllersEvents(false);\n\n        if ($event_controller) {\n            if (isset($manifests_events[$event_controller])) {\n                $manifests_events = [\n                    $event_controller => $manifests_events[$event_controller]\n                ];\n            } else {\n                $manifests_events = [];\n            }\n            if (isset($database_events[$event_controller])) {\n                $database_events = [\n                    $event_controller => $database_events[$event_controller]\n                ];\n            } else {\n                $database_events = [];\n            }\n        }\n\n        // \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435: \u0435\u0441\u0442\u044c \u0432 $manifests_events, \u043d\u0435\u0442 \u0432 $database_events\n        if ($manifests_events) {\n            foreach ($manifests_events as $controller => $events) {\n                foreach ($events as $event) {\n                    if (empty($database_events[$controller])) {\n                        $result['added'][$controller][] = $event;\n                    }\n                    if (!empty($database_events[$controller]) && !in_array($event, $database_events[$controller])) {\n                        $result['added'][$controller][] = $event;\n                    }\n                }\n            }\n        }\n\n        // \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u0435: \u0435\u0441\u0442\u044c \u0432 $database_events, \u043d\u0435\u0442 \u0432 $manifests_events\n        if ($database_events) {\n            foreach ($database_events as $controller => $events) {\n                foreach ($events as $event) {\n                    if (empty($manifests_events[$controller])) {\n                        $result['deleted'][$controller][] = $event;\n                    }\n                    if (!empty($manifests_events[$controller]) && !in_array($event, $manifests_events[$controller])) {\n                        $result['deleted'][$controller][] = $event;\n                    }\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    public function getWidgetOptionsForm($widget_name, $controller_name = false, $options = false, $template_name = false, $allow_set_cacheable = true) {\n\n        if (!$template_name) {\n            $template_name = $this->cms_config->template;\n        }\n\n        $template = new cmsTemplate($template_name);\n\n        $widget_path = cmsCore::getWidgetPath($widget_name, $controller_name);\n\n        $path = $this->cms_config->system_path . $widget_path;\n\n        $form_file = $path . '/options.form.php';\n\n        $form_name = 'widget' . ($controller_name ? \"_{$controller_name}_\" : '_') . \"{$widget_name}_options\";\n\n        $form = cmsForm::getForm($form_file, $form_name, [$options, $template_name]);\n        if (!$form) {\n            $form = new cmsForm();\n        }\n\n        $form->is_tabbed = true;\n\n        //\n        // \u041e\u043f\u0446\u0438\u0438 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430\n        //\n        $design_fieldset_id = $form->addFieldset(LANG_DESIGN, 'design');\n\n        $form->addField($design_fieldset_id, new fieldList('tpl_wrap', [\n            'title' => LANG_WIDGET_WRAPPER_TPL,\n            'hint'  => LANG_WIDGET_WRAPPER_TPL_HINT,\n            'default' => 'wrapper',\n            'generator' => function ($item) use ($template_name) {\n                return ['' => LANG_WIDGET_WRAPPER_TPL_NO, '-1' => LANG_WIDGET_WRAPPER_TPL_CUST] + $this->cms_template->getAvailableTemplatesFiles('widgets', 'wrapper*.tpl.php', $template_name);\n            }\n        ]));\n\n        // \u0421\u0442\u0438\u043b\u0438 \u043e\u0431\u0451\u0440\u0442\u043e\u043a\n        $preset_file = $template->getTplFilePath('widgets/wrapper_styles.php');\n        if ($preset_file) {\n\n            cmsCore::loadTemplateLanguage($template_name);\n\n            $preset_styles = include $preset_file;\n\n            $form->addField($design_fieldset_id, new fieldList('tpl_wrap_style', [\n                'title' => LANG_CP_WIDGETS_STYLE,\n                'generator' => function ($item) use ($preset_styles) {\n                    $items = ['' => ''];\n                    foreach ($preset_styles as $key => $value) {\n                        $items['opt' . $key] = [$key];\n                        foreach ($value as $k => $v) {\n                            $items[$k] = $v;\n                        }\n                    }\n                    return $items;\n                },\n                'visible_depend' => ['tpl_wrap' => ['show' => array_keys($preset_styles)]]\n            ]));\n        }\n\n        $wrap_custom_fields = [\n            'title' => LANG_TITLE,\n            'id'    => 'ID',\n            'body'  => LANG_WIDGET_BODY\n        ];\n\n        $form->addField($design_fieldset_id, new fieldHtml('tpl_wrap_custom', [\n            'title' => LANG_WIDGET_WRAPPER_TPL_CUST,\n            'patterns_hint' => [\n                'patterns' =>  $wrap_custom_fields,\n                'text_panel' => '',\n                'always_show' => true,\n                'text_pattern' =>  LANG_CP_SEOMETA_HINT_PATTERN\n            ],\n            'options' => ['editor' => 'ace'],\n            'visible_depend' => ['tpl_wrap' => ['show' => ['-1']]]\n        ]));\n\n        $form->addField($design_fieldset_id, new fieldList('tpl_body', [\n            'title' => LANG_WIDGET_BODY_TPL,\n            'hint' => sprintf(LANG_WIDGET_BODY_TPL_HINT, $widget_path),\n            'default' => $widget_name,\n            'generator' => function ($item) use ($template_name, $widget_path) {\n                return $this->cms_template->getAvailableTemplatesFiles($widget_path, '*.tpl.php', $template_name);\n            }\n        ]));\n\n        $form->addField($design_fieldset_id, new fieldString('class_wrap', [\n            'title' => LANG_CSS_CLASS_WRAP,\n            'visible_depend' => ['tpl_wrap' => ['hide' => ['-1']]]\n        ]));\n\n        $form->addField($design_fieldset_id, new fieldString('class_title', [\n            'title' => LANG_CSS_CLASS_TITLE,\n            'visible_depend' => ['tpl_wrap' => ['hide' => ['', 'wrapper_plain', '-1']]]\n        ]));\n\n        $form->addField($design_fieldset_id, new fieldString('class', [\n            'title' => LANG_CSS_CLASS_BODY,\n            'visible_depend' => ['tpl_wrap' => ['hide' => ['', 'wrapper_plain', '-1']]]\n        ]));\n\n        //\n        // \u041e\u043f\u0446\u0438\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\n        //\n        $access_fieldset_id = $form->addFieldset(LANG_PERMISSIONS, 'permissions');\n\n        // \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u0430\u043c\n        $form->addField($access_fieldset_id, new fieldListGroups('groups_view', [\n            'title'       => LANG_SHOW_TO_GROUPS,\n            'show_all'    => true,\n            'show_guests' => true\n        ]));\n\n        // \u041d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u0430\u043c\n        $form->addField($access_fieldset_id, new fieldListGroups('groups_hide', [\n            'title'       => LANG_HIDE_FOR_GROUPS,\n            'show_all'    => false,\n            'show_guests' => true\n        ]));\n\n        $form->addField($access_fieldset_id, new fieldListMultiple('languages', [\n            'title'   => LANG_WIDGET_LANG_SELECT,\n            'default' => 0,\n            'show_all' => true,\n            'generator'   => function ($item) {\n                $langs = cmsCore::getLanguages();\n                $items = [];\n                foreach ($langs as $lang) {\n                    $items[$lang] = $lang;\n                }\n                return $items;\n            }\n        ]));\n\n        $form->addField($access_fieldset_id, new fieldListMultiple('device_types', [\n            'title'   => LANG_WIDGET_DEVICE,\n            'default' => 0,\n            'show_all' => true,\n            'items'   => [\n                'tablet'  => LANG_TABLET_DEVICES,\n                'mobile'  => LANG_MOBILE_DEVICES,\n                'desktop' => LANG_DESKTOP_DEVICES\n            ]\n        ]));\n\n        $form->addField($access_fieldset_id, new fieldListMultiple('template_layouts', [\n            'title'   => LANG_WIDGET_TEMPLATE_LAYOUT,\n            'default' => 0,\n            'show_all' => true,\n            'generator' => function ($item) use ($template_name) {\n                $layouts = $this->cms_template->getAvailableTemplatesFiles('', '*.tpl.php', $template_name);\n                $items = [];\n                if ($layouts) {\n                    foreach ($layouts as $layout) {\n                        if ($layout == 'admin') {\n                            continue;\n                        }\n                        $items[$layout] = string_lang('LANG_' . $template_name . '_THEME_LAYOUT_' . $layout, $layout);\n                    }\n                }\n                return $items;\n            }\n        ]));\n\n        //\n        // \u041e\u043f\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n        //\n        $title_fieldset_id = $form->addFieldsetToBeginning(LANG_BASIC_OPTIONS, 'basic_options');\n\n        // ID \u0432\u0438\u0434\u0436\u0435\u0442\u0430\n        $form->addField($title_fieldset_id, new fieldNumber('id', [\n            'is_hidden' => true\n        ]));\n\n        $form->addField($title_fieldset_id, new fieldString('template', [\n            'is_hidden' => true,\n            'default' => $template_name\n        ]));\n\n        // \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0432\u0438\u0434\u0436\u0435\u0442\u0430\n        $form->addField($title_fieldset_id, new fieldString('title', [\n            'title' => LANG_TITLE,\n            'can_multilanguage' => true,\n            'multilanguage_params' => [\n                'is_table_field' => true,\n                'table' => 'widgets_bind'\n            ],\n            'rules' => [\n                ['required'],\n                ['min_length', 3],\n                ['max_length', 128]\n            ]\n        ]));\n\n        // \u0424\u043b\u0430\u0433 \u043f\u043e\u043a\u0430\u0437\u0430 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n        $form->addField($title_fieldset_id, new fieldCheckbox('is_title', [\n            'title'   => LANG_SHOW_TITLE,\n            'default' => true\n        ]));\n\n        // \u0424\u043b\u0430\u0433 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u043c\n        $form->addField($title_fieldset_id, new fieldCheckbox('is_tab_prev', [\n            'title'   => LANG_WIDGET_TAB_PREV,\n            'default' => false\n        ]));\n\n        // \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c\n        if ($this->cms_config->cache_enabled && $allow_set_cacheable) {\n            $form->addField($title_fieldset_id, new fieldCheckbox('is_cacheable', [\n                'title' => LANG_CP_CACHE\n            ]));\n        }\n\n        // \u0421\u0441\u044b\u043b\u043a\u0438 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435\n        $form->addField($title_fieldset_id, new fieldText('links', [\n            'title' => LANG_WIDGET_TITLE_LINKS,\n            'hint'  => LANG_WIDGET_TITLE_LINKS_HINT,\n            'can_multilanguage' => true,\n            'multilanguage_params' => [\n                'is_table_field' => true,\n                'table' => 'widgets_bind'\n            ],\n            'is_strip_tags' => true\n        ]));\n\n        return cmsEventsManager::hook('widget_options_full_form', $form);\n    }\n\n    public function getAddonsMethod($name, $params = [], $cacheable = false) {\n\n        if (!function_exists('curl_init')) {\n            return false;\n        }\n\n        $cache_file = cmsConfig::get('cache_path') . md5($name . serialize($params)) . '_addons.dat';\n\n        if ($cacheable && is_readable($cache_file)) {\n\n            $timedif = (time() - filemtime($cache_file));\n\n            if ($timedif < 10800) { // \u0442\u0440\u0438 \u0447\u0430\u0441\u0430 \u043a\u044d\u0448\u0430\n                $result = include $cache_file;\n\n                if ($result) {\n                    return $result;\n                } else {\n                    unlink($cache_file);\n                }\n            } else {\n                unlink($cache_file);\n            }\n        }\n\n        $curl = curl_init();\n\n        curl_setopt($curl, CURLOPT_URL, self::addons_api_point . $name . '?api_key=' . self::addons_api_key . '&' . http_build_query($params, '', '&'));\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_HEADER, false);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 5);\n        curl_setopt($curl, CURLOPT_HTTPGET, true);\n\n        $_data = curl_exec($curl);\n        if (!$_data) {\n            return false;\n        }\n\n        $data = json_decode($_data, true);\n\n        curl_close($curl);\n\n        if ($data === false) {\n            return json_last_error_msg();\n        }\n\n        if ($cacheable) {\n            file_put_contents($cache_file, '<?php return ' . var_export($data, true) . ';');\n        }\n\n        return $data;\n    }\n\n    public function getSchemeColForm($do, $row, $col = []) {\n\n        $form = $this->getForm('widgets_cols', [$do, (!empty($col['id']) ? $col['id'] : 0), $row]);\n\n        $col_scheme_options = cmsEventsManager::hookAll('admin_col_scheme_options', ['add', $row, []]);\n\n        if ($col_scheme_options) {\n            foreach ($col_scheme_options as $controller_name => $fields) {\n                foreach ($fields as $field) {\n                    $form->addField('basic', $field);\n                }\n            }\n        }\n\n        return $form;\n    }\n\n    public function getSchemeRowForm($do, $row, $col = []) {\n\n        $form = $this->getForm('widgets_rows', [$do]);\n\n        $row_scheme_options = cmsEventsManager::hookAll('admin_row_scheme_options', [$do, $row, $col]);\n\n        if ($row_scheme_options) {\n            foreach ($row_scheme_options as $controller_name => $fields) {\n                foreach ($fields as $field) {\n                    $form->addField('basic', $field);\n                }\n            }\n        }\n\n        return $form;\n    }\n\n}\n", "<?php\n\nclass actionModerationLogs extends cmsAction {\n\n    public function run($target_controller = null, $target_subject = null, $target_id = null, $moderator_id = null){\n\n        cmsCore::loadAllControllersLanguages();\n\n        $grid = $this->loadDataGrid('logs');\n\n        $url           = href_to($this->root_url, 'logs');\n        $sub_url       = array();\n        $url_query     = array();\n        $additional_h1 = array();\n        $subj_controller = null;\n\n        $action = $this->request->get('action', -1);\n        $only_to_delete = $this->request->get('only_to_delete', 0);\n        if($action > -1){\n\n            $this->model->filterEqual('action', $action);\n\n            if($only_to_delete){\n\n                $this->model->filterNotNull('date_expired');\n\n                $url_query['only_to_delete'] = $only_to_delete;\n\n            }\n\n            $additional_h1[] = string_lang('LANG_MODERATION_ACTION_'.$action);\n\n            $url_query['action'] = $action;\n\n        }\n\n        if(!empty($target_controller)){\n\n            $subj_controller = cmsCore::getController($target_controller);\n\n            $this->model->filterEqual('target_controller', $target_controller);\n\n            $sub_url[] = $target_controller;\n\n            if(!empty($target_subject)){\n\n                $ctype = $subj_controller->getContentTypeForModeration($target_subject);\n\n                if($ctype){\n                    $target_subject = $ctype['name'];\n                } else {\n                    return cmsCore::error404();\n                }\n\n                $this->model->filterEqual('target_subject', $target_subject);\n\n                $sub_url[] = $target_subject;\n\n                if($ctype){\n                    $additional_h1[] = $ctype['title'];\n                }\n\n                if(!empty($target_id)){\n\n                    $this->model->filterEqual('target_id', $target_id);\n\n                    $sub_url[] = $target_id;\n\n                    $this->model->lockFilters();\n\n                        $item = $this->model->getItem('moderators_logs', function ($item, $model){\n                            $item['data'] = cmsModel::yamlToArray($item['data']);\n                            return $item;\n                        });\n\n                        if($item){\n                            $additional_h1[] = $item['data']['title'];\n                        }\n\n                    $this->model->unlockFilters();\n\n                }\n\n            }\n\n        }\n\n        if(!empty($moderator_id)){\n\n            $this->model->filterEqual('moderator_id', $moderator_id);\n\n            if(count($sub_url) == 3){\n                $sub_url[] = $moderator_id;\n            } elseif(count($sub_url) == 2){\n                $sub_url[] = 0;\n                $sub_url[] = $moderator_id;\n            } elseif(count($sub_url) == 1){\n                $sub_url[] = 0;\n                $sub_url[] = 0;\n                $sub_url[] = $moderator_id;\n            } else {\n                $sub_url[] = 0;\n                $sub_url[] = 0;\n                $sub_url[] = 0;\n                $sub_url[] = $moderator_id;\n            }\n\n            $user = cmsCore::getModel('users')->getuser($moderator_id);\n\n            if($user){\n                $additional_h1[] = $user['nickname'];\n            }\n\n        }\n\n        if ($this->request->isAjax()) {\n\n            $filter     = array();\n            $filter_str = $this->request->get('filter', '');\n\n            if ($filter_str){\n                parse_str($filter_str, $filter);\n                $this->model->applyGridFilter($grid, $filter);\n            }\n\n            $total = $this->model->getCount('moderators_logs');\n            $perpage = isset($filter['perpage']) ? $filter['perpage'] : admin::perpage;\n            $pages = ceil($total / $perpage);\n\n            $this->model->joinUserLeft('moderator_id');\n\n            $data = $this->model->get('moderators_logs', function ($item, $model) use($subj_controller){\n\n                $item['data'] = cmsModel::yamlToArray($item['data']);\n\n                $item['controller_title'] = string_lang($item['target_controller'].'_CONTROLLER');\n\n                $item['subject_title'] = $item['controller_title'];\n\n                if($subj_controller !== null){\n\n                    $ctype = $subj_controller->getContentTypeForModeration($item['target_subject']);\n\n                    $item['subject_title'] = $ctype['title'];\n\n                }\n\n                return $item;\n\n            });\n\n            $this->cms_template->renderGridRowsJSON($grid, $data, $total, $pages);\n\n            $this->halt();\n\n        }\n\n        if($additional_h1){\n            $this->cms_template->setPageH1($additional_h1);\n        }\n\n        $this->model->resetFilters();\n\n\t\treturn $this->cms_template->render('backend/logs', array(\n            'grid'      => $grid,\n            'sub_url'   => $sub_url,\n            'url_query' => $url_query,\n            'url'       => $url.($sub_url ? '/'.implode('/', $sub_url) : '').(($action > -1) ? '?'.http_build_query($url_query) : '')\n        ));\n\n    }\n\n}\n", "<?php\n/**\n * \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0433\u0440\u0438\u0434\u0430\u043c (\u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445)\n */\nclass cmsGrid {\n\n    /**\n     * \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0433\u0440\u0438\u0434\u0430\n     *\n     * @var array\n     */\n    private $grid = [\n        // URL, \u043e\u0442\u043a\u0443\u0434\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435\n        'source_url' => '',\n        // \u041e\u043f\u0446\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430\n        'options' => [\n            'order_by'        => 'id',  // \u041f\u043e\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n            'order_to'        => 'asc', // \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n            'show_id'         => true,  // \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c id \u0437\u0430\u043f\u0438\u0441\u0438\n            'is_sortable'     => true,  // \u041c\u043e\u0436\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n            'is_filter'       => true,  // \u041f\u043e\u043b\u044f \u0433\u0440\u0438\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c\n            'advanced_filter' => false, // URL \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n            'is_pagination'   => true,  // \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e\n            'perpage'         => 30,    // \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n            'is_toolbar'      => true,  // \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u0443\u043b\u0431\u0430\u0440\n            'is_draggable'    => false, // \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043c\u044b\u0448\u044c\u044e\n            'drag_save_url'   => '',    // URL \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0434\u0440\u0430\u0433-\u044d\u043d-\u0434\u0440\u043e\u043f\n            'is_selectable'   => false, // \u0421\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f\n            /**\n             * select_actions - \u044d\u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043d\u0430\u0434 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438\n             * \u041f\u0440\u0438\u043c\u0435\u0440 \u0432 system/controllers/admin/grids/grid_content_items.php\n                'title'   => \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435,\n                'action'  => submit || open,\n                'confirm' => \u0424\u0440\u0430\u0437\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f,\n                'url'     => URL \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438\n             */\n            'select_actions'  => false\n        ],\n        // \u041a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n        'columns' => [],\n        // \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043d\u0430\u0434 \u0437\u0430\u043f\u0438\u0441\u044c\u044e\n        'actions' => [],\n        // \u0424\u0438\u043b\u044c\u0442\u0440 \u0437\u0430\u043f\u0438\u0441\u0435\u0439. \u041d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0439\u0442\u0435 \u0435\u0433\u043e \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0433\u0440\u0438\u0434\u0430\n        'filter'  => []\n    ];\n\n    /**\n     * \u0412\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n     * @var array\n     */\n    private $default_column = [\n        'tooltip'           => '',  // \u0422\u0435\u043a\u0441\u0442 \u0432\u0441\u043f\u043b\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438\n        'tooltip_handler'   => null,  // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0430\u044f \u0442\u0435\u043a\u0441\u0442 \u0432\u0441\u043f\u043b\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438\n        'switchable'        => false, // \u041c\u043e\u0436\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f/\u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f\n        'disable'           => false, // \u0415\u0441\u043b\u0438 \u043c\u043e\u0436\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f/\u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n        'sortable'          => true,  // \u041c\u043e\u0436\u0435\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u043d\u0435\u0439\n        'title'             => '',    // \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n        'class'             => '',    // CSS \u043a\u043b\u0430\u0441\u0441\n        'key_alias'         => '',    // \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u043e\u043b\u044f\n        'handler'           => null,  // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n        'flag'              => false, // \u041a\u043e\u043b\u043e\u043d\u043a\u0430 - \u0444\u043b\u0430\u0433 (\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430/\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0430)\n        'flag_on'           => null,  // \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c, \u0447\u0442\u043e\u0431\u044b \u0444\u043b\u0430\u0436\u043e\u043a \u0431\u044b\u043b \u0432\u043a\u043b\u044e\u0447\u0435\u043d\n        'flag_handler'      => null,  // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0444\u043b\u0430\u0433\u0430\n        'flag_toggle'       => '',    // URL \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0444\u043b\u0430\u0433\u0430\n        'href'              => '',    // \u0421\u0441\u044b\u043b\u043a\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n        'href_handler'      => null,  // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0435\u0441\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0442\u043e \u0441\u0441\u044b\u043b\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f\n        'order_by'          => '',    // \u0418\u043c\u044f \u043f\u043e\u043b\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n        'filter_by'         => '',    // \u0418\u043c\u044f \u043f\u043e\u043b\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c\n        'filter'            => '',    // \u0422\u0438\u043f \u0444\u0438\u043b\u044c\u0442\u0440\u0430, \u0441\u043c. applyGridFilter\n        'filter_select'     => ['items' => []], // \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f select \u0442\u0435\u0433\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\n        'filter_attributes' => [],    // \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\n        'editable' => [               // \u041c\u043e\u0436\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n            'rules'            => [],      // \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u0430\u0432\u0438\u043b \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438\n            'renderer'         => null,    // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 vue \u043f\u043e\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e form-input\n            'items'            => null,    // \u041c\u0430\u0441\u0441\u0438\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u0441\u0435\u043b\u0435\u043a\u0442\u0430, \u0435\u0441\u043b\u0438 renderer form-select\n            'language_context' => false,   // \u0415\u0441\u043b\u0438 \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043e, \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043a\u0430\u0442\u044c \u044f\u0437\u044b\u043a\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043b\u043e\u043a\u0430\u043b\u0438\n            'save_action'      => '',      // URL \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f\n            'attributes'       => []       // \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n        ]\n    ];\n\n    /**\n     * \u041a\u043e\u043b\u043e\u043d\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c\n     *\n     * @var ?array\n     */\n    private $visible_columns = null;\n\n    /**\n     * \u0418\u043c\u0435\u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043a\u043b\u044e\u0447\u0438, \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430/\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     *\n     * @var array\n     */\n    private $visible_columns_names = [];\n\n    /**\n     * \u041a\u043e\u043b\u043e\u043d\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0442\u044c\n     *\n     * @var ?array|boolean\n     */\n    private $switchable_columns = null;\n\n    /**\n     * \u041c\u0430\u043f\u043f\u0438\u043d\u0433 \u0438\u043c\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430 => \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (vuejs) \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438\n     * @var array\n     */\n    private $filter_component_map = [\n        'range_date' => 'form-date-range',\n        'range'      => 'form-range',\n        'zero'       => 'form-checkbox',\n        'nn'         => 'form-checkbox',\n        'ni'         => 'form-checkbox',\n        'in'         => 'form-multiselect',\n        'filled'     => 'form-select',\n        'exact'      => 'form-select',\n        'like'       => 'form-input',\n        'ip'         => 'form-input',\n        'date'       => 'form-date'\n    ];\n\n    /**\n     * \u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\n     * @var cmsController\n     */\n    private $controller;\n\n    /**\n     * \u0418\u043c\u044f \u0433\u0440\u0438\u0434\u0430\n     * @var string\n     */\n    private $grid_name = '';\n\n    /**\n     * \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0433\u0440\u0438\u0434\u0430\n     * @var array\n     */\n    private $grid_params = [];\n\n    /**\n     * \u0413\u0440\u0438\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d?\n     * @var boolean\n     */\n    private $is_loaded = false;\n\n    /**\n     * \u0422\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n     * @var ?string\n     */\n    private $error = null;\n\n    /**\n     *\n     * @param cmsController|cmsAction $controller \u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 (cmsAction \u0441 \u043c\u0430\u0433\u0438\u0435\u0439 \u0442\u043e\u0436\u0435), \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0438\u0434\n     * @param string $grid_name \u0418\u043c\u044f \u0433\u0440\u0438\u0434\u0430\n     * @param ?array $grid_params \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n     */\n    public function __construct($controller, $grid_name, $grid_params = null) {\n\n        $this->controller = $controller;\n\n        $this->grid_name = $grid_name;\n\n        if($grid_params) {\n\n            $this->grid_params = !is_array($grid_params) ? [$grid_params] : $grid_params;\n        }\n\n        $this->is_loaded = $this->load();\n    }\n\n    public function &__get($name) {\n        return $this->grid[$name];\n    }\n\n    public function __set($name, $value) {\n        $this->grid[$name] = $value;\n    }\n\n    public function __isset($name) {\n        return isset($this->grid[$name]);\n    }\n\n    public function __unset($name) {\n        unset($this->grid[$name]);\n    }\n\n    /**\n     * \u0413\u0440\u0438\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d?\n     *\n     * @return boolean\n     */\n    public function isLoaded() {\n        return $this->is_loaded;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043e\u0448\u0438\u0431\u043a\u0443\n     *\n     * @return ?string\n     */\n    public function getError() {\n        return $this->error;\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0433\u0440\u0438\u0434\u0430\n     *\n     * @return bool\n     */\n    private function load() {\n\n        $grid_file = $this->controller->root_path . 'grids/grid_' . $this->grid_name . '.php';\n\n        if (!is_readable($grid_file)) {\n\n            $this->error = ERR_FILE_NOT_FOUND . ': '. str_replace(PATH, '', $grid_file);\n\n            return false;\n        }\n\n        include_once $grid_file;\n\n        $grid_func_name = 'grid_' . $this->grid_name;\n\n        if(!function_exists($grid_func_name)){\n\n            $this->error = $grid_func_name.' function not found in '. str_replace(PATH, '', $grid_file);\n\n            return false;\n        }\n\n        $args = [$this->controller];\n\n        foreach ($this->grid_params as $p) {\n            $args[] = $p;\n        }\n\n        $grid = call_user_func_array($grid_func_name, $args);\n\n        foreach ($grid as $key => $data) {\n\n            $this->grid[$key] = array_merge(($this->grid[$key] ?? []), $data);\n        }\n\n        // \u0424\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n        $this->setDefaultFilter();\n\n        $this->grid = cmsEventsManager::hook('grid_' . $this->controller->name . '_' . $this->grid_name, $this->grid);\n\n        if($this->grid['options']['select_actions']){\n            array_unshift($this->grid['options']['select_actions'], [\n                'title' => LANG_SELECTED_ACTIONS,\n                'url'   => ''\n            ]);\n        }\n\n        list($this->grid, $args) = cmsEventsManager::hook(\n            'grid_' . $this->controller->name . '_' . $this->grid_name . '_args',\n            [$this->grid, $args]\n        );\n\n        return true;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0433\u0440\u0438\u0434\u0430 \u0446\u0435\u043b\u0438\u043a\u043e\u043c\n     * @return array\n     */\n    public function getGrid() {\n        return $this->grid;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0433\u0440\u0438\u0434\u0430\n     *\n     * @param string $path \u041f\u0443\u0442\u044c \u0434\u043e \u043a\u043b\u044e\u0447\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 columns:name:title\n     * @return mixed\n     */\n    public function getGridValue($path) {\n        return array_value_recursive($path, $this->grid);\n    }\n\n    /**\n     * \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     * \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043a\u0430\u043a \u0432 \u0444\u043e\u0440\u043c\u0430\u0445\n     *\n     * @param string $field_name\n     * @param mixed $value\n     * @return boolean\n     */\n    public function validateColumnValue($field_name, $value) {\n\n        $rules = $this->grid['columns'][$field_name]['editable']['rules'] ?? [];\n\n        if(!$rules){\n            return true;\n        }\n\n        foreach ($rules as $rule) {\n\n            if (!$rule) { continue; }\n\n            $validate_function = \"validate_{$rule[0]}\";\n\n            $rule[] = $value;\n\n            unset($rule[0]);\n\n            $result = call_user_func_array([$this->controller, $validate_function], $rule);\n\n            // \u043e\u0448\u0438\u0431\u043a\u0430 \u0443\u0436\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\n            if ($result !== true) {\n                return $result;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0430\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0438\u0434\u0438\u043c\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     */\n    private function getVisibleColumns() {\n\n        if ($this->visible_columns === null) {\n\n            foreach ($this->grid['columns'] as $name => $column) {\n\n                $is_disabled = false;\n\n                if (!empty($column['disable'])) {\n                    $is_disabled = true;\n                }\n                if (array_key_exists($name, $this->visible_columns_names)) {\n                    $is_disabled = !$this->visible_columns_names[$name];\n                }\n                if(empty($column['switchable'])){\n                    $is_disabled = false;\n                }\n                if ($is_disabled) {\n                    continue;\n                }\n\n                $this->visible_columns[$name] = $column;\n            }\n        }\n\n        return $this->visible_columns;\n    }\n\n    /**\n     * \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     *\n     * @return array\n     */\n    public function getSwitchableColumns() {\n\n        if ($this->switchable_columns === null) {\n\n            $columns = [];\n\n            foreach ($this->grid['columns'] as $key => $item) {\n                if (!empty($item['switchable'])) {\n                    $columns[$key] = $item['title'];\n                }\n            }\n\n            $this->switchable_columns = $columns ?: false;\n        }\n\n        return $this->switchable_columns;\n    }\n\n    /**\n     * \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430\n     *\n     * @param string $name \u0418\u043c\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     * @return void\n     */\n    public function disableColumn($name) {\n        $this->visible_columns_names[$name] = false;\n    }\n\n    /**\n     * \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430\n     *\n     * @param string $name \u0418\u043c\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     * @return void\n     */\n    public function enableColumn($name) {\n        $this->visible_columns_names[$name] = true;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u0437 \u0411\u0414 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n     *\n     * @return void\n     */\n    private function setDefaultFilter() {\n\n        $this->grid['filter'] = [\n            'page' => 1,\n            'columns' => [],\n            'advanced_filter' => '',\n            'perpage' => $this->grid['options']['perpage']\n        ];\n\n        if ($this->grid['options']['order_by']) {\n            $this->grid['filter']['order_by'] = $this->grid['options']['order_by'];\n        }\n\n        if ($this->grid['options']['order_to']) {\n            $this->grid['filter']['order_to'] = $this->grid['options']['order_to'];\n        }\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0438\u043b\u044c\u0442\u0440\n     *\n     * @param array $filter\n     * @return void\n     */\n    public function addToFilter($filter) {\n        $this->grid['filter'] = array_replace_recursive($this->grid['filter'], $filter);\n    }\n\n    /**\n     * \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043a \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n     *\n     * @param cmsModel $model \u041e\u0431\u044a\u0435\u043a\u0442 \u043c\u043e\u0434\u0435\u043b\u0438, \u0433\u0434\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0438\n     * @param array $filter \u041c\u0430\u0441\u0441\u0438\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\n     * @return cmsModel\n     */\n    public function applyGridFilter(cmsModel $model, $filter) {\n\n        // \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443\n        if (!empty($filter['order_by']) && !empty($filter['order_to'])) {\n\n            // \u0415\u0441\u0442\u044c \u043b\u0438 \u0432\u043e\u043e\u0431\u0449\u0435 \u0442\u0430\u043a\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n            if(empty($this->grid['columns'][$filter['order_by']])){\n                $filter['order_by'] = $this->grid['options']['order_by'];\n            }\n\n            $order_by = $filter['order_by'];\n\n            // \u0415\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n            if (!empty($this->grid['columns'][$order_by]['order_by'])) {\n                $order_by = $this->grid['columns'][$order_by]['order_by'];\n            }\n\n            $model->orderBy($order_by, $filter['order_to']);\n        }\n\n        // \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443\n        if (!empty($filter['page'])) {\n\n            $filter['perpage'] = !empty($filter['perpage']) ? (int) $filter['perpage'] : 30;\n            $filter['page']    = (int) ($filter['page'] <= 0 ? 1 : $filter['page']);\n\n            $model->limitPage($filter['page'], $filter['perpage']);\n        }\n\n        // \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430\n        if(!$this->grid['options']['is_pagination']){\n            $model->limit(false);\n        }\n\n        //\n        // \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n        // \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u043b\u0438 \u0444\u0438\u043b\u044c\u0442\u0440 \u0434\u043b\u044f \u043d\u0435\u0435\n        //\n        foreach ($this->getVisibleColumns() as $field => $column) {\n\n            if (empty($column['filter']) ||\n                    $column['filter'] === 'none' ||\n                    !array_key_exists($field, $filter) ||\n                    is_empty_value($filter[$field])) {\n                continue;\n            }\n\n            if (!empty($column['filter_by'])) {\n                $filter_field = $column['filter_by'];\n            } else {\n                $filter_field = $field;\n            }\n\n            switch ($column['filter']) {\n                case 'range_date':\n                    if (isset($filter[$field]['from']) && !is_empty_value($filter[$field]['from'])) {\n                        $date_from = date('Y-m-d', strtotime($filter[$field]['from']));\n                        $model->filterGtEqual($filter_field, $date_from);\n                    }\n                    if (isset($filter[$field]['to']) && !is_empty_value($filter[$field]['to'])) {\n                        $date_to = date('Y-m-d', strtotime($filter[$field]['to']));\n                        $model->filterLtEqual($filter_field, $date_to);\n                    }\n                case 'range':\n                    if (isset($filter[$field]['from']) && !is_empty_value($filter[$field]['from'])) {\n                        $model->filterGtEqual($filter_field, $filter[$field]['from']);\n                    }\n                    if (isset($filter[$field]['to']) && !is_empty_value($filter[$field]['to'])) {\n                        $model->filterLtEqual($filter_field, $filter[$field]['to']);\n                    }\n                    break;\n                case 'zero':\n                    if($filter[$field]) {\n                        $model->filterEqual($filter_field, 0);\n                    }\n                case 'nn':\n                    if($filter[$field]) {\n                        $model->filterNotNull($filter_field);\n                    }\n                    break;\n                case 'ni':\n                    if($filter[$field]) {\n                        $model->filterIsNull($filter_field);\n                    }\n                    break;\n                case 'in': $model->filterIn($filter_field, !is_array($filter[$field]) ? explode(',', $filter[$field]) : $filter[$field]);\n                    break;\n                case 'filled': ($filter[$field] ? $model->filterNotNull($filter_field) : $model->filterIsNull($filter_field));\n                    break;\n                case 'exact': $model->filterEqual($filter_field, $filter[$field]);\n                    break;\n                case 'ip': $model->filterEqual($filter_field, string_iptobin($filter[$field]), true);\n                    break;\n                case 'like': $model->filterLike($filter_field, \"%{$filter[$field]}%\");\n                    break;\n                case 'date':\n                    $date = date('Y-m-d', strtotime($filter[$field]));\n                    $model->filterLike($filter_field, \"%{$date}%\");\n                    break;\n            }\n        }\n\n        // \u0417\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c\n        $this->grid['filter'] = array_merge($this->grid['filter'], $filter);\n\n        // \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\n        if (!empty($filter['advanced_filter']) && is_string($filter['advanced_filter'])) {\n\n            parse_str($filter['advanced_filter'], $dataset_filters);\n\n            $model->applyDatasetFilters($dataset_filters);\n        }\n\n        return $model;\n    }\n\n    /**\n     * \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     *\n     * @param array|false $dataset \u0414\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0431\u0430\u0437\u044b\n     * @param integer $total \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     * @return array\n     */\n    public function makeGridRows($dataset = false, $total = 0) {\n\n        $rows = [];\n\n        if(is_array($dataset)){\n            foreach($dataset as $row){\n                $rows[] = [\n                    'columns'  => $this->makeRowColumns($row),\n                    'id'       => $row['id'],\n                    'selected' => false,\n                    'edited'   => false\n                ];\n            }\n        }\n\n        return [\n            'dragging'   => -1,\n            'is_loading' => false,\n            'need_load'  => $dataset === false,\n            'source_url' => $this->grid['source_url'] !== '' ? $this->grid['source_url'] : cmsCore::getInstance()->uri_absolute,\n            'options'    => $this->grid['options'],\n            'filter'     => $this->grid['filter'],\n            'rows'       => $rows,\n            'total'      => $total ? $total : count(($dataset ?: [])),\n            'switchable' => [\n                'title'   => LANG_GRID_COLYMNS_SETTINGS,\n                'columns' => $this->getSwitchableColumns()\n            ],\n            'columns'    => $this->makeColumns()\n        ];\n    }\n\n    /**\n     * \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     *\n     * @param array $row\n     * @return array\n     */\n    private function makeRowColumns($row) {\n\n        $columns = [];\n\n        $is_set_dragged_class = false;\n\n        foreach ($this->getVisibleColumns() as $field => $column) {\n\n            if (isset($column['key_alias'])){\n                $field = $column['key_alias'];\n            }\n\n            $class = [];\n\n            if (!empty($column['class'])) {\n                $class[] = $column['class'];\n            }\n\n            if ($field === 'id') {\n                if (!$this->grid['options']['show_id']) {\n\n                    $class[] = 'd-none';\n                } else {\n\n                    $class[] = 'dragged_handle';\n\n                    $is_set_dragged_class = true;\n                }\n            } else if (!$is_set_dragged_class) {\n\n                $class[] = 'dragged_handle';\n\n                $is_set_dragged_class = true;\n            }\n\n            $row_column = [\n                'row_id'   => $row['id'],\n                'tooltip'  => $column['tooltip'] ?? '',\n                'name'     => $field,\n                'value'    => '',\n                'class'    => implode(' ', $class),\n                'editable' => $this->getEditableParams($row, $column, $field),\n                'href'     => false,\n                'renderer' => $column['renderer'] ?? 'basic' // basic, flag, html, actions\n            ];\n\n            // \u042d\u0442\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\n            if (!array_key_exists($field, $row)) {\n\n                $columns[] = $row_column;\n\n                continue;\n            }\n\n            // \u0442\u0443\u043b\u0442\u0438\u043f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n            if (isset($column['tooltip_handler'])) {\n                $row_column['tooltip'] = $column['tooltip_handler']($row);\n            }\n\n            // null - \u0437\u043d\u0430\u0447\u0438\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n            $row_column['value'] = $row[$field] ?? '';\n\n            if (isset($column['href_handler'])) {\n                $is_active_href = $column['href_handler']($row);\n            } else {\n                $is_active_href = true;\n            }\n\n            // \u0435\u0441\u043b\u0438 \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0443, \u0442\u043e \u043f\u0430\u0440\u0441\u0438\u043c \u0448\u0430\u0431\u043b\u043e\u043d\n            // \u0430\u0434\u0440\u0435\u0441\u0430, \u0437\u0430\u043c\u0435\u043d\u044f\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n            if (isset($column['href'])) {\n                if ($is_active_href) {\n                    $row_column['href'] = string_replace_keys_values_extended($column['href'], $row);\n                }\n            }\n\n            // \u0422\u0438\u043f \u0444\u043b\u0430\u0433\n            if (!empty($column['flag'])) {\n\n                if (isset($column['flag_handler'])) {\n\n                    $row_column['value'] = $column['flag_handler']($row_column['value'], $row);\n                }\n\n                // \u0415\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \"\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0441\u0442\u0438\" \u0444\u043b\u0430\u0433\u0430\n                if (isset($column['flag_on'])) {\n\n                    $row_column['value'] = $row_column['value'] == $column['flag_on'] ? 1 : 0;\n                } else {\n\n                    $row_column['value'] = (int) $row_column['value'];\n                }\n\n                // URL \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0444\u043b\u0430\u0433\u0430\n                $flag_toggle_url = $column['flag_toggle'] ?? false;\n                if ($flag_toggle_url) {\n                    $flag_toggle_url = string_replace_keys_values($flag_toggle_url, $row);\n                }\n\n                $row_column['flag_class'] = $column['flag'] === true ? 'flag' : $column['flag'];\n                $row_column['href']       = $is_active_href ? $flag_toggle_url : false;\n                $row_column['confirm']    = $column['flag_confirm'] ?? false;\n                $row_column['renderer']   = 'flag';\n\n                $columns[] = $row_column;\n\n                continue;\n            }\n\n            // \u0415\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u0432\u0435\u0440\u043d\u0451\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0439 HTML\n            if (isset($column['handler'])) {\n\n                $row_column['renderer'] = 'html';\n                $row_column['value']    = $column['handler']($row_column['value'], $row);\n\n                $columns[] = $row_column;\n\n                continue;\n            }\n\n            // \u041c\u0430\u0441\u0441\u0438\u0432\u044b \u043e\u0442\u0434\u0430\u0451\u043c \u043d\u0430 \u043e\u0442\u043a\u0443\u043f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\n            if (is_array($row_column['value'])) {\n\n                if (isset($column['renderer'])) {\n\n                    // \u041c\u043e\u0436\u043d\u043e \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 (vue) \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n                    $row_column['renderer'] = $column['renderer'];\n\n                } else {\n                    $row_column['value'] = '!error grid value!';\n                }\n            }\n\n            $columns[] = $row_column;\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439, \u0442\u043e \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0441\u0441\u044b\u043b\u043e\u043a\n        if ($this->grid['actions']) {\n\n            $row_column = [\n                'row_id'   => $row['id'],\n                'value'    => [],\n                'editable' => false,\n                'class'    => false,\n                'href'     => false,\n                'renderer' => 'actions'\n            ];\n\n            foreach($this->grid['actions'] as $action){\n\n                if (isset($action['handler'])) {\n\n                    $is_active = $action['handler']($row);\n\n                    unset($action['handler']);\n                } else {\n                    $is_active = true;\n                }\n\n                if (!$is_active) {\n                    continue;\n                }\n\n                // \u043f\u0430\u0440\u0441\u0438\u043c \u0448\u0430\u0431\u043b\u043e\u043d \u0430\u0434\u0440\u0435\u0441\u0430, \u0437\u0430\u043c\u0435\u043d\u044f\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n                if (isset($action['href'])){\n                    $action['href'] = string_replace_keys_values_extended($action['href'], $row);\n                }\n\n                // \u043f\u0430\u0440\u0441\u0438\u043c \u0448\u0430\u0431\u043b\u043e\u043d \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f, \u0437\u0430\u043c\u0435\u043d\u044f\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n                if (isset($action['confirm'])) {\n\n                    $action['confirm'] = string_replace_keys_values_extended($action['confirm'], $row);\n                }\n\n                // \u0432\u0441\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435\u043c \u0441\u043d\u0430\u0431\u0436\u0430\u0435\u043c csrf_token\n                if (isset($action['confirm']) && !empty($action['href'])) {\n\n                    $action['href'] .= (strpos($action['href'], '?') !== false ? '&' : '?') . 'csrf_token=' . cmsForm::getCSRFToken();\n                }\n\n                if (!empty($action['icon'])) {\n\n                    $icon_params = explode(':', $action['icon']);\n\n                    if (!isset($icon_params[1])) {\n                        array_unshift($icon_params, 'solid');\n                    }\n\n                    $action['icon'] = html_svg_icon($icon_params[0], $icon_params[1], 16, false);\n                }\n\n                $row_column['value'][] = $action;\n            }\n\n            $columns[] = $row_column;\n        }\n\n        return $columns;\n    }\n\n    /**\n     * \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     *\n     * @return array\n     */\n    private function makeColumns() {\n\n        $columns = [];\n\n        foreach ($this->getVisibleColumns() as $name => $column) {\n\n            $column = array_merge($this->default_column, $column);\n\n            $class = [];\n\n            if (!empty($column['class'])) {\n                $class[] = $column['class'];\n            }\n\n            if ($name === 'id' && !$this->grid['options']['show_id']) {\n                $class[] = 'd-none';\n            }\n\n            $filter = false;\n\n            if($column['filter'] && $column['filter'] !== 'none'){\n\n                $filter = [\n                    'component' => $this->filter_component_map[$column['filter']],\n                    'params'    => [\n                        'attributes' => array_merge($column['filter_attributes'], [\n                            'name' => $name\n                        ])\n                    ]\n                ];\n\n                switch ($filter['component']) {\n                    case 'form-date-range':\n                    case 'form-range':\n                        $filter['params']['lang_from'] = LANG_FROM;\n                        $filter['params']['lang_to'] = LANG_TO;\n                        break;\n                    case 'form-input':\n                        $filter['params']['attributes']['type'] = 'search';\n                        break;\n                    case 'form-checkbox':\n                        $filter['params']['title'] = $column['filter_checkbox'] ?? false;\n                        break;\n                    case 'form-multiselect':\n                    case 'form-select':\n                        $filter['params']['items'] = is_array($column['filter_select']['items']) ? $column['filter_select']['items'] : $column['filter_select']['items']($name);\n                        if(!$filter['params']['items']){\n                            $filter['component'] = 'form-input';\n                            $filter['params']['attributes']['type'] = 'search';\n                        }\n                        break;\n                }\n            }\n\n            $columns[] = [\n                'width'    => $column['width'] ?? '',\n                'title'    => $column['title'] ?? '',\n                'name'     => $name,\n                'filter'   => $filter,\n                'class'    => implode(' ', $class),\n                'sortable' => $this->grid['options']['is_sortable'] && $column['sortable'],\n            ];\n        }\n\n        if ($this->grid['actions']) {\n\n            $filter = [\n                'component' => 'form-filter',\n                'params' => [\n                    'href'        => $this->grid['options']['advanced_filter'],\n                    'lang_filter' => LANG_FILTER,\n                    'lang_cancel' => LANG_CANCEL,\n                    'icon_filter' => html_svg_icon('solid', 'search-plus', 16, false),\n                    'icon_cancel' => html_svg_icon('solid', 'search-minus', 16, false)\n                ]\n            ];\n\n            $columns[] = [\n                'sortable' => false,\n                'width'    => count($this->grid['actions']) * 30,\n                'title'    => LANG_CP_ACTIONS,\n                'class'    => 'text-right align-middle',\n                'name'     => 'advanced_filter',\n                'filter'   => $this->grid['options']['advanced_filter'] ? $filter : false\n            ];\n        }\n\n        return $columns;\n    }\n\n    private function getEditableParams($row, $column, $field) {\n\n        if (!array_key_exists('editable', $column) || empty($row['id'])) {\n            return false;\n        }\n\n        $save_action_query = [\n            'csrf_token' => cmsForm::getCSRFToken(),\n            'name' => $field,\n            'id' => $row['id']\n        ];\n\n        // \u042d\u043a\u0448\u0435\u043d \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n        $save_action = $this->grid['source_url'];\n\n        // @deprecated \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0443\u0441\u0442\u0430\u0440\u0435\u043b\u0430\n        if (!empty($column['editable']['table'])) {\n            $save_action = href_to('admin', 'inline_save', [urlencode($column['editable']['table']), $row['id']]);\n        }\n\n        if (!empty($column['editable']['save_action'])) {\n            $save_action = string_replace_keys_values_extended($column['editable']['save_action'], $row);\n        }\n\n        if(!isset($save_action)){\n            return false;\n        }\n\n        $attributes = ['autocomplete' => 'off'];\n\n        if (!empty($column['editable']['attributes'])) {\n            foreach ($column['editable']['attributes'] as $akey => $avalue) {\n                if (is_string($avalue)) {\n                    $attributes[$akey] = string_replace_keys_values_extended($avalue, $row);\n                } else {\n                    $attributes[$akey] = $avalue;\n                }\n            }\n        }\n\n        return [\n            'component'   => $column['editable']['renderer'] ?? 'form-input',\n            'items'       => $column['editable']['items'] ?? [],\n            'edit_icon'   => html_svg_icon('solid', 'pen', 16, false),\n            'value'       => $row[$field] ?? '',\n            'attributes'  => $attributes,\n            'lang_edit'   => LANG_EDIT,\n            'lang_save'   => LANG_SAVE,\n            'save_action' => $save_action . '?' . http_build_query($save_action_query)\n        ];\n    }\n\n}\n", "<?php\nclass cmsModel {\n\n    public $name;\n\n    /**\n     * \u041e\u0431\u044a\u0435\u043a\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n     * @var \\cmsDatabase\n     */\n    public $db;\n\n    /**\n     * \u0422\u0438\u043f\u044b MySQL JOIN\n     */\n\tconst LEFT_JOIN                = 'LEFT JOIN';\n    const RIGHT_JOIN               = 'RIGHT JOIN';\n    const INNER_JOIN               = 'INNER JOIN';\n    const STRAIGHT_JOIN            = 'STRAIGHT_JOIN';\n    const LEFT_OUTER_JOIN          = 'LEFT OUTER JOIN';\n    const RIGHT_OUTER_JOIN         = 'RIGHT OUTER JOIN';\n    const NATURAL_LEFT_JOIN        = 'NATURAL LEFT JOIN';\n    const NATURAL_LEFT_OUTER_JOIN  = 'NATURAL LEFT OUTER JOIN';\n    const NATURAL_RIGHT_JOIN       = 'NATURAL RIGHT JOIN';\n    const NATURAL_RIGHT_OUTER_JOIN = 'NATURAL RIGHT OUTER JOIN';\n\n    /**\n     * \u0423\u0440\u043e\u0432\u043d\u0438 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439\n     */\n    const READ_UNCOMMITTED = 'READ UNCOMMITTED';\n    const READ_COMMITTED   = 'READ COMMITTED';\n    const REPEATABLE_READ  = 'REPEATABLE READ';\n    const SERIALIZABLE     = 'SERIALIZABLE';\n\n    /**\n     * \u0411\u0443\u043b\u0435\u0432\u044b \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u0442\u044c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438 fulltext search\n     * https://dev.mysql.com/doc/refman/8.0/en/fulltext-boolean.html\n     *\n     * @var array\n     */\n    protected $special_chars = ['+', '-', '>','<', '(', ')', '~', '*', '\"', '@'];\n\n    /**\n     * \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n     */\n    const DEFAULT_TABLE_PREFIX = 'con_';\n    /**\n     * \u041f\u043e\u0441\u0442\u0444\u0438\u043a\u0441 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n     */\n    const DEFAULT_TABLE_CATEGORY_POSTFIX = '_cats';\n\n    /**\n     * \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n     * @var string\n     */\n    public $table_prefix = self::DEFAULT_TABLE_PREFIX;\n\n    /**\n     * \u041f\u043e\u0441\u0442\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n     */\n    public $table_category_postfix = self::DEFAULT_TABLE_CATEGORY_POSTFIX;\n\n    //\u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043e\u043a\n    public $table      = '';\n    public $select     = ['i.*'];\n    public $distinct   = '';\n    public $straight_join = '';\n    public $join       = '';\n    public $where      = '';\n    public $where_separator  = 'AND';\n    public $group_by   = '';\n    public $order_by   = '';\n    public $read_type  = '';\n    public $index_action = '';\n    public $limit      = 1000;\n    public $perpage    = 50;\n    public $encoded_fields = [];\n\n    public $keep_filters = false;\n    public $filter_on  = false;\n\n    protected static $global_localized = false;\n\n    protected $localized = false;\n    protected $privacy_filter_disabled = false;\n    protected $privacy_filtered = false;\n    protected $privacy_filter_value = 0;\n    protected $approved_filter_disabled = false;\n    protected $hidden_parents_filter_disabled = true;\n    protected $delete_filter_disabled = false;\n    protected $approved_filtered = false;\n    protected $available_filtered = false;\n    protected $hp_filtered = false;\n    protected $joined_session_online = [];\n\n    protected static $cached = [];\n\n    protected $cache_key = false;\n\n    protected $lang;\n    protected $default_lang;\n\n    public function __construct() {\n\n        $this->name = strtolower(str_replace('model', '', get_called_class()));\n\n        $this->db = cmsCore::getInstance()->db;\n\n        $this->lang         = cmsCore::getLanguageName();\n        $this->default_lang = cmsConfig::get('language');\n\n        if (cmsConfig::getInstance()->isfindLocalized()) {\n            self::globalLocalizedOn();\n        }\n\n        $this->localized = self::$global_localized;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function useCache($key){\n        $this->cache_key = $key; return $this;\n    }\n\n    protected function stopCache(){\n        $this->cache_key = false;  return $this;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getContentTypeTableName($name){\n        return $this->table_prefix . $name;\n    }\n\n    public function setTablePrefix($prefix){\n        $this->table_prefix = $prefix;\n        return $this;\n    }\n\n    public function setTableCategoryPostfix($postfix){\n        $this->table_category_postfix = $postfix;\n        return $this;\n    }\n\n    public function getContentCategoryTableName($name){\n        return $this->getContentTypeTableName($name).$this->table_category_postfix;\n    }\n\n    public function checkCorrectEqualSlug($table_name, $slug, $item_id, $max_len = 255) {\n\n        $get_scount = function($slug) use($item_id, $table_name){\n            return $this->filterNotEqual('id', $item_id)->\n                filterLike('slug', $slug)->\n                getCount($table_name, 'id', true);\n        };\n\n        if($get_scount($slug)){\n            if(mb_strlen($slug) >= $max_len){\n                $slug = mb_substr($slug, 0, ($max_len - 1));\n            }\n            $i = 2;\n            while($get_scount($slug.$i)){\n                $i++;\n                if(mb_strlen($slug.$i) > $max_len){\n                    $slug = mb_substr($slug, 0, ($max_len - strlen($i)));\n                }\n            }\n            $slug .= $i;\n        }\n\n        return $slug;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getRootCategory($ctype_name) {\n        return $this->db->getFields($this->getContentCategoryTableName($ctype_name), 'parent_id=0');\n    }\n\n    public function getCategory($ctype_name, $id, $by_field = 'id', $array_fields = ['allow_add']) {\n\n        $this->useCache('content.categories');\n\n        $category = $this->getItemByField($this->getContentCategoryTableName($ctype_name), $by_field, $id);\n        if (!$category) { return false; }\n\n        $category['path'] = $this->getCategoryPath($ctype_name, $category, $array_fields);\n\n        if($array_fields){\n            foreach ($array_fields as $array_field) {\n                if (!empty($category[$array_field])) {\n                    $category[$array_field] = cmsModel::yamlToArray($category[$array_field]);\n                }\n            }\n        }\n\n        return $category;\n    }\n\n    public function getCategoryBySLUG($ctype_name, $slug) {\n        return $this->getCategory($ctype_name, $slug, 'slug');\n    }\n\n    public function getCategorySLUG($category, $ctype_name) {\n\n        if (!empty($category['path'])) {\n\n            $slug = '';\n\n            foreach ($category['path'] as $c) {\n                if ($c['id'] == 1) {\n                    continue;\n                }\n                if ($slug) {\n                    $slug .= '/';\n                }\n                $slug .= lang_slug(empty($c['slug_key']) ? str_replace('/', '', $c['title']) : $c['slug_key']);\n            }\n        } else {\n\n            $slug = lang_slug(empty($category['slug_key']) ? str_replace('/', '', $category['title']) : $category['slug_key']);\n        }\n\n        return $this->checkCorrectEqualSlug($this->getContentCategoryTableName($ctype_name), $slug, $category['id'], 255);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getCategoriesTree($ctype_name, $is_show_root = true) {\n\n        if (!$is_show_root) {\n            $this->filterGt('parent_id', 0);\n        }\n\n        if (!$this->order_by) {\n            $this->orderBy('ns_left');\n        }\n\n        $this->useCache('content.categories');\n\n        return $this->get($this->getContentCategoryTableName($ctype_name), function ($node, $model) {\n            if ($node['ns_level'] == 0) {\n                $node['title'] = LANG_ROOT_CATEGORY;\n            }\n            if (!empty($node['allow_add'])) {\n                $node['allow_add'] = cmsModel::yamlToArray($node['allow_add']);\n            }\n            return $node;\n        });\n    }\n\n    public function getSubCategories($ctype_name, $parent_id = 1, $item_callback = false) {\n\n        $this->filterEqual('parent_id', $parent_id);\n        $this->orderBy('ns_left');\n\n        $this->useCache('content.categories');\n\n        return $this->get($this->getContentCategoryTableName($ctype_name), $item_callback);\n    }\n\n    public function getSubCategoriesTree($ctype_name, $parent_id = 1, $level = 1) {\n\n        $parent = $this->getCategory($ctype_name, $parent_id);\n\n        $this->filterGt('ns_left', $parent['ns_left'])->\n            filterLt('ns_right', $parent['ns_right']);\n\n        if ($level) {\n            $this->filterLtEqual('ns_level', $parent['ns_level'] + $level);\n        }\n\n        $this->orderBy('ns_left');\n\n        $this->useCache('content.categories');\n\n        return $this->get($this->getContentCategoryTableName($ctype_name));\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getCategoryPath($ctype_name, $category, $array_fields = []) {\n\n        if (!isset($category['ns_left'])){\n            $category = $this->getCategory($ctype_name, $category['id']);\n        }\n\n        $this->\n            filterLtEqual('ns_left', $category['ns_left'])->\n            filterGtEqual('ns_right', $category['ns_right'])->\n            filterLtEqual('ns_level', $category['ns_level'])->\n            filterGt('ns_level', 0)->\n            orderBy('ns_left');\n\n        $this->useCache('content.categories');\n\n        return $this->get($this->getContentCategoryTableName($ctype_name), function($item, $model) use($array_fields) {\n            if($array_fields){\n                foreach ($array_fields as $array_field) {\n                    if (!empty($item[$array_field])) {\n                        $item[$array_field] = cmsModel::yamlToArray($item[$array_field]);\n                    }\n                }\n            }\n            return $item;\n        });\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e\n     *\n     * @param string $ctype_name \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     * @param array $category \u041c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n     * @param boolean $first_level_slug \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0440\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n     * @return array\n     */\n    public function addCategory($ctype_name, $category, $first_level_slug = false) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        $this->db->nestedSets->setTable($table_name);\n\n        $category['id'] = $this->db->nestedSets->addNode($category['parent_id']);\n\n        if (!$category['id']) {\n            return false;\n        }\n\n        $this->update($table_name, $category['id'], $category);\n\n        if(!$first_level_slug){\n            $category['path'] = $this->getCategoryPath($ctype_name, $category);\n        }\n\n        $category['slug'] = $this->getCategorySLUG($category, $ctype_name);\n\n        $this->update($table_name, $category['id'], [\n            'slug' => $category['slug']\n        ]);\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        return $category;\n    }\n\n    /**\n     * \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n     *\n     * @param string $ctype_name \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     * @param integer $id ID \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n     * @param array $category \u041c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n     * @param boolean $first_level_slug \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0440\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n     * @return array\n     */\n    public function updateCategory($ctype_name, $id, $category, $first_level_slug = false) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        $category_old = $this->getCategory($ctype_name, $id);\n\n        if ($category_old['parent_id'] != $category['parent_id']) {\n            $this->db->nestedSets->setTable($table_name);\n            $this->db->nestedSets->moveNode($id, $category['parent_id']);\n        }\n\n        $this->update($table_name, $id, $category);\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        // \u0415\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044f\u0437\u044b\u043a \u043d\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043d\u0435 \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043c\u0435\u043d\u044f\u0442\u044c slug\n        if ($this->lang !== $this->default_lang) {\n\n            return $this->getCategory($ctype_name, $id);\n        }\n\n        $category['id'] = $id;\n\n        if(!$first_level_slug){\n            $category['path'] = $this->getCategoryPath($ctype_name, ['id' => $id]);\n        }\n\n        $category['slug'] = $this->getCategorySLUG($category, $ctype_name);\n\n        $this->update($table_name, $id, [\n            'slug' => $category['slug']\n        ]);\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        $subcats = $this->getSubCategoriesTree($ctype_name, $id, false);\n\n        if ($subcats) {\n            foreach ($subcats as $subcat) {\n\n                if(!$first_level_slug){\n                    $subcat['path'] = $this->getCategoryPath($ctype_name, ['id' => $subcat['id']]);\n                }\n\n                $subcat['slug'] = $this->getCategorySLUG($subcat, $ctype_name);\n                $this->update($table_name, $subcat['id'], ['slug' => $subcat['slug']]);\n\n                cmsCache::getInstance()->clean('content.categories');\n            }\n        }\n\n        return $category;\n    }\n\n    public function updateCategoryTree($ctype_name, $tree, $categories_count, $first_level_slug = false) {\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        $this->updateCategoryTreeNode($ctype_name, $tree);\n        $this->updateCategoryTreeNodeSlugs($ctype_name, $tree, $first_level_slug);\n\n        $root_keys = [\n            'ns_left'  => 1,\n            'ns_right' => 1 + ($categories_count * 2) + 1\n        ];\n\n        return $this->update($this->getContentCategoryTableName($ctype_name), 1, $root_keys);\n    }\n\n    public function updateCategoryTreeNode($ctype_name, $tree) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        foreach ($tree as $node) {\n\n            $this->update($table_name, $node['key'], [\n                'parent_id' => $node['parent_key'],\n                'ns_left'   => $node['left'],\n                'ns_right'  => $node['right'],\n                'ns_level'  => $node['level'],\n            ]);\n\n            if (!empty($node['children'])) {\n                $this->updateCategoryTreeNode($ctype_name, $node['children']);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u041f\u0435\u0440\u0435\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 slug \u0443 \u0432\u0441\u0435\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     *\n     * @param string $ctype_name \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     * @param array $tree \u0414\u0435\u0440\u0435\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     * @param boolean $first_level_slug \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0440\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n     *\n     * @return array\n     */\n    public function updateCategoryTreeNodeSlugs($ctype_name, $tree, $first_level_slug = false) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        foreach ($tree as $node) {\n\n            if(!$first_level_slug){\n\n                $path = $this->getCategoryPath($ctype_name, [\n                    'id'        => $node['key'],\n                    'parent_id' => $node['parent_key'],\n                    'ns_left'   => $node['left'],\n                    'ns_right'  => $node['right'],\n                    'ns_level'  => $node['level']\n                ]);\n            } else {\n                $path = [];\n            }\n\n            $slug = $this->getCategorySLUG([\n                'path'  => $path,\n                'title' => $node['title'],\n                'slug_key' => $node['slug_key'],\n                'id'    => $node['key']\n            ], $ctype_name);\n\n            $this->update($table_name, $node['key'], [\n                'slug' => $slug\n            ]);\n\n            if (!empty($node['children'])) {\n                $this->updateCategoryTreeNodeSlugs($ctype_name, $node['children'], $first_level_slug);\n            }\n        }\n\n        return true;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function deleteCategory($ctype_name, $id){\n\n        //\n        // \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f\n        // \u0438\u0437 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0435 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438\n        // \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n        //\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        $this->db->nestedSets->setTable($table_name);\n        $this->db->nestedSets->deleteNode($id);\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        return true;\n\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function delete($table_name, $id, $by_field='id'){\n        $this->filterEqual($by_field, $id);\n        return $this->deleteFiltered($table_name);\n    }\n\n    public function deleteFiltered($table_name){\n        $where = $this->where;\n        $this->resetFilters();\n        return $this->db->delete($table_name, $where);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function update($table_name, $id, $data, $skip_check_fields = false, $array_as_json = false){\n        $this->filterEqual('id', $id);\n        return $this->updateFiltered($table_name, $data, $skip_check_fields, $array_as_json);\n    }\n\n    public function updateFiltered($table_name, $data, $skip_check_fields = false, $array_as_json = false){\n        $where = $this->where;\n        $this->resetFilters();\n        return $this->db->update($table_name, $where, $data, $skip_check_fields, $array_as_json);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function insert($table_name, $data, $array_as_json = false, $ignore = false){\n        return $this->db->insert($table_name, $data, false, $array_as_json, $ignore);\n    }\n\n    public function insertOrUpdate($table_name, $insert_data, $update_data = false){\n        return $this->db->insertOrUpdate($table_name, $insert_data, $update_data);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function replaceFieldString($table_name, $search, $replace, $field) {\n\n        $this->filterLike($field, '%'.$search.'%');\n\n        $where = $this->where;\n        $this->resetFilters();\n\n        $search  = $this->db->escape($search);\n        $replace = $this->db->escape($replace);\n\n        return $this->db->query(\"UPDATE `{#}{$table_name}` i SET i.{$field} = REPLACE(i.{$field}, '{$search}', '{$replace}') WHERE {$where}\");\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function lockFilters(){\n        $this->keep_filters = true;\n        return $this;\n    }\n\n    public function unlockFilters(){\n        $this->keep_filters = false;\n        return $this;\n    }\n\n    public function resetFilters(){\n\n        $this->select       = ['i.*'];\n        $this->encoded_fields = [];\n        $this->group_by     = '';\n        $this->order_by     = '';\n        $this->index_action = '';\n        $this->limit        = '';\n        $this->read_type    = '';\n        $this->join         = '';\n        $this->distinct     = '';\n        $this->straight_join = '';\n        $this->joined_session_online = [];\n\n\t\tif ($this->keep_filters) { return $this; }\n\n\t\t$this->filter_on          = false;\n        $this->where              = '';\n        $this->privacy_filtered   = false;\n        $this->privacy_filter_value = 0;\n        $this->approved_filtered  = false;\n        $this->available_filtered = false;\n        $this->hp_filtered        = false;\n\n        return $this;\n    }\n\n    public function setLang($lang) {\n\n        $this->lang = $lang;\n\n        return $this;\n    }\n\n    public function isLocalizedOn() {\n        return $this->localized;\n    }\n\n    public function localizedOn() {\n        $this->localized = true; return $this;\n    }\n\n    public function localizedOff() {\n        $this->localized = false; return $this;\n    }\n\n    public function localizedRestore() {\n        $this->localized = self::$global_localized; return $this;\n    }\n\n    public static function globalLocalizedOn() {\n        self::$global_localized = true;\n    }\n\n    public static function globalLocalizedOff() {\n        self::$global_localized = false;\n    }\n\n    public function replaceTranslatedField($item, $table_name = false) {\n\n        // \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u044f\u0437\u044b\u043a \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 -\n        // \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044f\u0437\u044b\u043a \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f\n        // \u0432 \u044f\u0447\u0435\u0439\u043a\u0430\u0445 \u0431\u0435\u0437 \u043f\u043e\u0441\u0442\u0444\u0438\u043a\u0441\u0430\n        if ($this->lang === $this->default_lang) {\n            return $item;\n        }\n\n        if (!is_array($item)) {\n            return $item;\n        }\n\n        $postfix = '_' . $this->lang;\n\n        foreach ($item as $key => $value) {\n\n            $lang_key = $key . $postfix;\n\n            if (!isset($item[$lang_key])) {\n\n                if (is_array($value) && $value) {\n                    $item[$key] = $this->replaceTranslatedField($value, $table_name);\n                }\n\n                continue;\n            }\n\n            $item[$key] = $item[$lang_key];\n        }\n\n        return $item;\n    }\n\n    public function setStraightJoin() {\n        $this->straight_join = self::STRAIGHT_JOIN; return $this;\n    }\n\n    public function distinctSelect() {\n        $this->distinct = 'DISTINCT'; return $this;\n    }\n\n    public function filter($condition){\n        if ($this->filter_on){\n            $this->where .= ' '.$this->where_separator.' ('.$condition.')';\n        } else {\n            $this->where .= '('.$condition.')';\n            $this->filter_on = true;\n        }\n        $this->where_separator = ' AND ';\n        return $this;\n    }\n\n    public function filterStart(){\n        if ($this->filter_on){\n            $this->where .= ' '.$this->where_separator.' (';\n        } else {\n            $this->where .= '(';\n        }\n        $this->filter_on = false;\n        return $this;\n    }\n\n    public function filterEnd(){\n        $this->where .= ' ) ';\n        return $this;\n    }\n\n    public function filterAnd(){\n        $this->where_separator = ' AND ';\n        return $this;\n    }\n\n    public function filterOr(){\n        $this->where_separator = ' OR ';\n        return $this;\n    }\n\n    public function filterNotNull($field){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $this->filter($field.' IS NOT NULL');\n        return $this;\n    }\n\n    public function filterIsNull($field){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $this->filter($field.' IS NULL');\n        return $this;\n    }\n\n    public function filterEqual($field, $value, $binary = false){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        if (is_null($value)){\n            $this->filter($field.' IS NULL');\n        } else {\n            $value = $this->db->escape($value);\n            $this->filter(($binary ? ' BINARY ' : '').\"$field = '$value'\");\n        }\n        return $this;\n    }\n\n    public function filterFunc($field, $value, $sign='='){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $this->filter(\"$field {$sign} $value\");\n        return $this;\n    }\n\n    public function filterNotEqual($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        if (is_null($value)){\n            $this->filter($field.' IS NOT NULL');\n        } else {\n            $value = $this->db->escape($value);\n            $this->filter(\"$field <> '$value'\");\n        }\n        return $this;\n    }\n\n    public function filterGt($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field > '$value'\");\n        return $this;\n    }\n\n    public function filterLt($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field < '$value'\");\n        return $this;\n    }\n\n    public function filterGtEqual($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field >= '$value'\");\n        return $this;\n    }\n\n    public function filterLtEqual($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field <= '$value'\");\n        return $this;\n    }\n\n    public function filterLike($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field LIKE '$value'\");\n        return $this;\n    }\n\n    public function filterNotLike($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field NOT LIKE '$value'\");\n        return $this;\n    }\n\n    public function filterBetween($field, $start, $end){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $start = $this->db->escape($start);\n        $end = $this->db->escape($end);\n        $this->filter(\"$field BETWEEN '$start' AND '$end'\");\n        return $this;\n    }\n\n    public function filterDateYounger($field, $value, $interval='DAY'){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $interval = $this->db->escape($interval);\n        $this->filter(\"$field >= DATE_SUB(NOW(), INTERVAL {$value} {$interval})\");\n        return $this;\n    }\n\n    public function filterTimestampYounger($field, $value, $interval='DAY'){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = (int)$value;\n        $interval = $this->db->escape($interval);\n        $this->filter(\"TIMESTAMPDIFF({$interval}, {$field}, NOW()) <= {$value}\");\n        return $this;\n    }\n\n    public function filterDateOlder($field, $value, $interval='DAY'){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $interval = $this->db->escape($interval);\n        $this->filter(\"$field < DATE_SUB(NOW(), INTERVAL {$value} {$interval})\");\n        return $this;\n    }\n\n    public function filterTimestampGt($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $field = \"UNIX_TIMESTAMP({$field})\";\n        $value = $this->db->escape($value);\n        $this->filter(\"{$field} > '{$value}'\");\n        return $this;\n    }\n\n    public function filterTimestampLt($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $field = \"UNIX_TIMESTAMP({$field})\";\n        $value = $this->db->escape($value);\n        $this->filter(\"{$field} < '{$value}'\");\n        return $this;\n    }\n\n    public function filterIn($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        if (is_array($value)){\n            if(!$value){ return $this; }\n            foreach($value as $k=>$v){\n                $v = $this->db->escape(strval($v));\n                $value[$k] = \"'{$v}'\";\n            }\n            $value = implode(',', $value);\n        } else {\n            $value = $this->db->escape($value);\n            $value = \"'{$value}'\";\n        }\n        $this->filter(\"{$field} IN ({$value})\");\n        return $this;\n    }\n\n    public function filterNotIn($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        if (is_array($value)){\n            if(!$value){ return $this; }\n            foreach($value as $k=>$v){\n                $v = $this->db->escape($v);\n                $value[$k] = \"'{$v}'\";\n            }\n            $value = implode(',', $value);\n        } else {\n            $value = $this->db->escape($value);\n            $value = \"'{$value}'\";\n        }\n        $this->filter(\"{$field} NOT IN ({$value})\");\n        return $this;\n    }\n\n    /**\n     * \u0424\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f fulltext search\n     * \u0412 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u043d\u0430 $field\n     *\n     * @param string|array $field \u0418\u043c\u044f \u044f\u0447\u0435\u0439\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u044f\u0447\u0435\u0435\u043a\n     * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438\n     * @param string $lang \u042f\u0437\u044b\u043a, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u0442\u043e\u043f\u0441\u043b\u043e\u0432\n     * @return $this\n     */\n    public function filterRelated($field, $value, $lang = false) {\n\n        if(!is_array($field)){\n            $field = [$field];\n        }\n\n        // \u0420\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043b\u0438 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 3\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n        if (mb_strlen($value) <= 3) {\n            return $this->filterLike($field[0], $value . '%');\n        }\n\n        $value = trim(strip_tags(mb_strtolower($value)));\n        $value = trim(preg_replace('/[' . preg_quote(implode('', $this->special_chars)) . ']+/', ' ', $value));\n\n        // \u041f\u043e\u0441\u043b\u0435 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 3\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n        // MySQL \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0438\u0441\u043a\u0430\u0442\u044c \u0432 \u043f\u043e\u043b\u043d\u043e\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0435 \u043f\u043e 3\u043c \u0438 \u043c\u0435\u043d\u0435\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\n        if (mb_strlen($value) <= 3) {\n            return $this->filterLike($field[0], $value . '%');\n        }\n\n        $query = [];\n\n        $words = preg_split('/[\\s,]+/', $value);\n\n        $stopwords = string_get_stopwords($lang ? $lang : cmsConfig::get('language'));\n\n        foreach ($words as $word) {\n\n            if (mb_strlen($word) < 3 || is_numeric($word)) {\n                continue;\n            }\n\n            if ($stopwords && in_array($word, $stopwords, true)) {\n                continue;\n            }\n            if (mb_strlen($word) === 3) {\n                $query[] = $word;\n                continue;\n            }\n\n            if (mb_strlen($word) >= 12) {\n                $word = mb_substr($word, 0, mb_strlen($word) - 3);\n            } else if (mb_strlen($word) >= 10) {\n                $word = mb_substr($word, 0, mb_strlen($word) - 2);\n            } else if (mb_strlen($word) >= 6) {\n                $word = mb_substr($word, 0, mb_strlen($word) - 1);\n            }\n\n            $query[] = $word . '*';\n        }\n\n        if (!$query) {\n\n            $ft_query = '\\\"' . $this->db->escape($value) . '\\\"';\n        } else {\n\n            usort($query, function ($a, $b) {\n                return mb_strlen($b) - mb_strlen($a);\n            });\n            $query = array_slice($query, 0, 5);\n\n            $ft_query = '>\\\"' . $this->db->escape($value) . '\\\" <(';\n            $ft_query .= implode(' ', $this->db->escape($query)) . ')';\n        }\n\n        if (strpos($field[0], '.') === false) {\n            $match_fields_str = 'i.' . implode(', i.', $field);\n        } else {\n            $match_fields_str = implode(', ', $field);\n        }\n\n        $search_param = \"MATCH({$match_fields_str}) AGAINST ('{$ft_query}' IN BOOLEAN MODE)\";\n\n        $this->select($search_param, 'fsort');\n\n        $this->order_by = 'fsort desc';\n\n        return $this->filter($search_param);\n    }\n\n    public function filterCategory($ctype_name, $category, $is_recursive = false, $is_multi_cats = false) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n        $bind_table_name = $table_name . '_bind';\n\n        if (!$is_recursive) {\n\n            $this->joinInner($bind_table_name, 'b', 'b.item_id = i.id')->filterEqual('b.category_id', $category['id']);\n        } else {\n\n            // \u0434\u043b\u044f \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0435 \u043d\u0443\u0436\u043d\u0430\n            if (!$category['parent_id']) {\n                return $this;\n            }\n\n            if($is_multi_cats){\n                $this->distinctSelect();\n            }\n\n            $this->joinInner($bind_table_name, 'b', 'b.item_id = i.id');\n            $this->joinInner($table_name, 'c', 'c.id = b.category_id');\n            $this->filterGtEqual('c.ns_left', $category['ns_left']);\n            $this->filterLtEqual('c.ns_right', $category['ns_right']);\n        }\n\n        return $this;\n    }\n\n    public function filterCategoryId($ctype_name, $category_id, $is_recursive = false) {\n\n        if (!$is_recursive) {\n\n            if ($category_id) {\n                return $this->filterCategory($ctype_name, ['id' => $category_id]);\n            }\n        } else {\n\n            $category = $this->getCategory($ctype_name, $category_id);\n            if ($category) {\n                return $this->filterCategory($ctype_name, $category, true, true);\n            }\n        }\n\n        return $this;\n    }\n\n    public function disablePrivacyFilter(){\n        $this->privacy_filter_disabled = true;\n        $this->privacy_filter_value = 0;\n        return $this;\n    }\n\n    public function disablePrivacyFilterForFriends(){\n        $this->privacy_filter_value = array(0, 1);\n        return $this;\n    }\n\n    public function enablePrivacyFilter(){\n        $this->privacy_filter_disabled = false;\n        $this->privacy_filter_value = 0;\n        return $this;\n    }\n\n    public function isEnablePrivacyFilter(){\n        return $this->privacy_filter_disabled === false;\n    }\n\n    public function filterPrivacy(){\n\n        if ($this->privacy_filtered) { return $this; }\n\n        // \u042d\u0442\u043e\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0447\u0438\u0441\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        // \u0438 \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441\u0430\u043c\u0438\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        // \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u043b\u0430\u0433 \u0447\u0442\u043e\u0431\u044b \u0444\u0438\u043b\u044c\u0442\u0440 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b\n        $this->privacy_filtered = true;\n\n        if(is_array($this->privacy_filter_value)){\n            return $this->filterIn('i.is_private', $this->privacy_filter_value);\n        }\n\n        return $this->filterEqual('i.is_private', $this->privacy_filter_value);\n\n    }\n\n    public function enableDeleteFilter(){\n        $this->delete_filter_disabled = false;\n        return $this;\n    }\n\n    public function disableDeleteFilter(){\n        $this->delete_filter_disabled = true;\n        return $this;\n    }\n\n    public function enableApprovedFilter(){\n        $this->approved_filter_disabled = false;\n        return $this;\n    }\n\n    public function disableApprovedFilter(){\n        $this->approved_filter_disabled = true;\n        return $this;\n    }\n\n    public function enableHiddenParentsFilter(){\n        $this->hidden_parents_filter_disabled = false;\n        return $this;\n    }\n\n    public function disableHiddenParentsFilter(){\n        $this->hidden_parents_filter_disabled = true;\n        return $this;\n    }\n\n    public function isEnableHiddenParentsFilter(){\n        return $this->hidden_parents_filter_disabled === false;\n    }\n\n    public function joinModerationsTasks($ctype_name){\n        $this->select('IF(t.id IS NULL AND i.is_approved < 1, 1, NULL)', 'is_draft');\n        $this->select('t.is_new_item');\n        return $this->joinLeft('moderators_tasks', 't', \"t.item_id = i.id AND t.ctype_name = '{$ctype_name}'\");\n    }\n\n    public function filterByModeratorTask($moderator_id, $ctype_name, $is_admin = false){\n\n        $this->select('m.is_new_item');\n\n        $this->joinInner('moderators_tasks', 'm', 'm.item_id = i.id');\n\n        $this->filterEqual('m.ctype_name', $ctype_name);\n\n        if(!$is_admin){\n            $this->filterEqual('m.moderator_id', $moderator_id);\n        }\n\n        return $this;\n\n    }\n\n    public function filterAvailableOnly(){\n\n        if ($this->available_filtered) { return $this; }\n\n        $this->available_filtered = true;\n\n        return $this->filterIsNull('is_deleted');\n\n    }\n\n    public function filterDeleteOnly(){\n\n        return $this->filterEqual('is_deleted', 1);\n\n    }\n\n    public function filterApprovedOnly(){\n\n        if ($this->approved_filtered) { return $this; }\n\n        // \u042d\u0442\u043e\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0447\u0438\u0441\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        // \u0438 \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441\u0430\u043c\u0438\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        // \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u043b\u0430\u0433 \u0447\u0442\u043e\u0431\u044b \u0444\u0438\u043b\u044c\u0442\u0440 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b\n        $this->approved_filtered = true;\n\n        return $this->filterEqual('is_approved', 1);\n\n    }\n\n    public function filterHiddenParents(){\n\n        if ($this->hp_filtered) { return $this; }\n\n        $this->hp_filtered = true;\n\n        return $this->filterIsNull('is_parent_hidden');\n\n    }\n\n    public function filterSubscribe($user_id){\n        return $this->filterFriends($user_id, 0);\n    }\n\n    public function filterFriendsAndSubscribe($user_id){\n        return $this->filterFriends($user_id, null);\n    }\n\n    public function filterFriends($user_id, $is_mutual = 1){\n\n        $this->joinInner('{users}_friends', 'fr', 'fr.friend_id = i.user_id');\n\n        $this->filterEqual('fr.user_id', (int)$user_id);\n\n        if($is_mutual !== null){\n            $this->filterEqual('fr.is_mutual', $is_mutual);\n        } else {\n            // \u043f\u043e\u0434\u043f\u0438\u0441\u0447\u0438\u043a\u0438 (null) \u0438 \u0434\u0440\u0443\u0437\u044c\u044f (1)\n            $this->filterStart();\n                $this->filterEqual('fr.is_mutual', 1);\n                    $this->filterOr();\n                $this->filterIsNull('fr.is_mutual');\n            $this->filterEnd();\n        }\n\n        return $this;\n\n    }\n\n    public function filterFriendsPrivateOnly($user_id){\n\n        // \u0444\u0438\u043b\u044c\u0442\u0440 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u043d\u0443\u0436\u0435\u043d\n        $this->privacy_filtered = true;\n\n        return $this->filterEqual('i.is_private', 1)->filterFriends($user_id);\n\n    }\n\n    public function filterOnlineUsers() {\n        return $this->filterNotNull('online.user_id')->filterTimestampYounger('online.date_created', cmsUser::USER_ONLINE_INTERVAL, 'SECOND');\n    }\n\n    public function applyDatasetFilters($dataset, $ignore_sorting = false, $allowed_fields = []) {\n\n        if (!empty($dataset['filters'])) {\n\n            foreach ($dataset['filters'] as $filter) {\n\n                // \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\n                // \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\n                if ($allowed_fields && !in_array($filter['field'], $allowed_fields, true)) {\n                    continue;\n                }\n\n                if (isset($filter['callback']) && is_callable($filter['callback'])) {\n                    $filter['callback']($this, $dataset);\n                    continue;\n                }\n\n                if (!isset($filter['value'])) {\n                    continue;\n                }\n                if (($filter['value'] === '') && !in_array($filter['condition'], ['nn', 'ni'])) {\n                    continue;\n                }\n                if (empty($filter['condition'])) {\n                    continue;\n                }\n\n                if ($filter['value'] !== '' && !is_array($filter['value'])) {\n                    $filter['value'] = string_replace_user_properties($filter['value']);\n                }\n\n                switch ($filter['condition']) {\n\n                    // \u043e\u0431\u0449\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\n                    case 'eq': $this->filterEqual($filter['field'], $filter['value']);\n                        break;\n                    case 'gt': $this->filterGt($filter['field'], $filter['value']);\n                        break;\n                    case 'lt': $this->filterLt($filter['field'], $filter['value']);\n                        break;\n                    case 'ge': $this->filterGtEqual($filter['field'], $filter['value']);\n                        break;\n                    case 'le': $this->filterLtEqual($filter['field'], $filter['value']);\n                        break;\n                    case 'nn': $this->filterNotNull($filter['field']);\n                        break;\n                    case 'ni': $this->filterIsNull($filter['field']);\n                        break;\n\n                    // \u0441\u0442\u0440\u043e\u043a\u0438\n                    case 'lk': $this->filterLike($filter['field'], '%' . $filter['value'] . '%');\n                        break;\n                    case 'ln': $this->filterNotLike($filter['field'], '%' . $filter['value'] . '%');\n                        break;\n                    case 'lb': $this->filterLike($filter['field'], $filter['value'] . '%');\n                        break;\n                    case 'lf': $this->filterLike($filter['field'], '%' . $filter['value']);\n                        break;\n\n                    // \u0434\u0430\u0442\u044b\n                    case 'dy': $this->filterDateYounger($filter['field'], $filter['value']);\n                        break;\n                    case 'do': $this->filterDateOlder($filter['field'], $filter['value']);\n                        break;\n\n                    // \u043c\u0430\u0441\u0441\u0438\u0432\n                    case 'in':\n                        if (!is_array($filter['value'])) {\n                            $filter['value'] = explode(',', $filter['value']);\n                        }\n                        $this->filterIn($filter['field'], $filter['value']);\n                        break;\n                }\n            }\n        }\n\n        if (!empty($dataset['sorting']) && !$ignore_sorting) {\n            $this->orderByList($dataset['sorting']);\n        }\n\n        if (!empty($dataset['index'])) {\n            $this->forceIndex($dataset['index'], 2);\n        }\n\n        return true;\n    }\n\n    /**\n     * \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u043f\u043e\u043b\u0435\u0439\n     *\n     * @param array $fields \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043b\u0435\u0439\n     * @param boolean $is_this_only \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445\n     * @param boolean|string $translated_table \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043c\u0443\u043b\u044c\u0442\u0438\u044f\u0437\u044b\u0447\u043d\u043e\u0441\u0442\u0438\n     * @return $this\n     */\n    public function selectList($fields, $is_this_only = false, $translated_table = false) {\n\n        if ($is_this_only) {\n            $this->select = [];\n        }\n\n        foreach ($fields as $field => $alias) {\n\n            if(is_numeric($field)){\n                $field = $alias;\n                $alias = false;\n            }\n\n            if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n\n            if ($translated_table) {\n                $this->selectTranslatedField($field, $translated_table, $alias);\n            } else {\n                $this->select($field, $alias);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u0435\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     * @param mixed $key \u041a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n     * @return $this\n     */\n    public function selectAesDecrypt($field, $as = false, $key = '') {\n\n        $as = $as ? $as : str_replace('enc_', '', $field);\n\n        $this->encoded_fields[] = $as ? $as : $field;\n\n        if ($key) {\n            if (is_callable($key) && ($key instanceof Closure)) {\n                $key = $key($this);\n            } else {\n                $key = \"'\" . $this->db->escape($key) . \"'\";\n            }\n            $field = \"AES_DECRYPT(`{$field}`, {$key})\";\n        } else {\n            $field = \"AES_DECRYPT(`{$field}`, @aeskey)\";\n        }\n\n        return $this->select($field, $as);\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0435 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043e\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, i.title)\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     * @return $this\n     */\n    public function select($field, $as = false) {\n\n        $this->select[] = $as ? $field . ' as `' . $as . '`' : $field;\n\n        return $this;\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0435 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u043f\u044b\u0442\u0430\u044f\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u0435\u0433\u043e\n     * \u0441 \u043f\u043e\u0441\u0442\u0444\u0438\u043a\u0441\u043e\u043c \u044f\u0437\u044b\u043a\u0430\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $table \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043a\u0443\u0434\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u044d\u0442\u043e \u043f\u043e\u043b\u0435\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     * @return $this\n     */\n    public function selectTranslatedField($field, $table, $as = false) {\n\n        if ($this->lang === $this->default_lang) {\n            return $this->select($field, $as);\n        }\n\n        // \u0418\u043c\u044f \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c, \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n        $field_name = $field . '_' . $this->lang;\n\n        // \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e\n        $select_as_name = (strpos($field, '.') === false ? $field : ltrim(strrchr($field, '.'), '.'));\n\n        // \u041d\u0435\u0442 \u043f\u043e\u043b\u044f \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c. \u0412 isFieldExists \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n        if (!$this->db->isFieldExists($table, $select_as_name . '_' . $this->lang)) {\n            $field_name = $field;\n        }\n\n        return $this->select($field_name, ($as ? $as : $select_as_name));\n    }\n\n    /**\n     * \u0412\u044b\u0431\u043e\u0440 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     * @return $this\n     */\n    public function selectOnly($field, $as = false) {\n\n        $this->select = [];\n\n        return $this->select($field, $as);\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043c\u044f \u043f\u043e\u043b\u044f, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u044f\u0437\u044b\u043a\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $table \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u044d\u0442\u043e \u043f\u043e\u043b\u0435 \u0435\u0441\u0442\u044c\n     * @return string\n     */\n    public function getTranslatedFieldName($field, $table = '') {\n\n        if ($this->lang === $this->default_lang) {\n            return $field;\n        }\n\n        // \u0418\u043c\u044f \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c, \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n        $field_name = $field . '_' . $this->lang;\n\n        if($table){\n\n            // \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0430\u043b\u0438\u0430\u0441 \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n            $check_name = (strpos($field_name, '.') === false ? $field_name : ltrim(strrchr($field_name, '.'), '.'));\n\n            // \u041d\u0435\u0442 \u043f\u043e\u043b\u044f \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c\n            if (!$this->db->isFieldExists($table, $check_name)) {\n                $field_name = $field;\n            }\n        }\n\n        return $field_name;\n    }\n\n    public function joinQuery($query, $as, $on, $join_type = self::INNER_JOIN){\n        $this->join .= $join_type.' '.$query.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function join($table_name, $as, $on){\n        return $this->joinInner($table_name, $as, $on);\n    }\n\n    public function joinInner($table_name, $as, $on){\n        $this->join .= self::INNER_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function joinLeft($table_name, $as, $on){\n        $this->join .= self::LEFT_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function joinExcludingLeft($table_name, $as, $right_key, $left_key, $join_where = ''){\n        $this->join .= self::LEFT_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$left_key.'='.$right_key.($join_where ? ' AND '.$join_where : '').PHP_EOL;\n        $this->filter($right_key.' IS NULL');\n        return $this;\n    }\n\n    public function joinRight($table_name, $as, $on){\n        $this->join .= self::RIGHT_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function joinExcludingRight($table_name, $as, $right_key, $left_key, $join_where = ''){\n        $this->join .= self::RIGHT_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$left_key.'='.$right_key.($join_where ? ' AND '.$join_where : '').PHP_EOL;\n        $this->filter($left_key.' IS NULL');\n        return $this;\n    }\n\n    public function joinLeftOuter($table_name, $as, $on){\n        $this->join .= self::LEFT_OUTER_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function joinRightOuter($table_name, $as, $on){\n        $this->join .= self::RIGHT_OUTER_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    /**\n     *  \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n     *\n     * @param string $on_field \u0418\u043c\u044f \u043f\u043e\u043b\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     * @param array $user_fields \u041f\u043e\u043b\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n     * @param boolean $join_direction \u041a\u0430\u043a \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443: left|right|inner\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @return $this\n     */\n    public function joinUser($on_field = 'user_id', $user_fields = [], $join_direction = false, $as = 'u') {\n\n        if (!$user_fields) {\n            $user_fields = [\n                $as . '.nickname'        => 'user_nickname',\n                $as . '.slug'            => 'user_slug',\n                $as . '.is_deleted'      => 'user_is_deleted',\n                $as . '.groups'          => 'user_groups',\n                $as . '.avatar'          => 'user_avatar',\n                $as . '.privacy_options' => 'user_privacy_options'\n            ];\n        }\n\n        foreach ($user_fields as $field => $alias) {\n            $this->select($field, $alias);\n        }\n\n        switch ($join_direction) {\n\n            case 'left':\n                $this->joinLeft('{users}', $as, $as . '.id = i.' . $on_field);\n                break;\n\n            case 'right':\n                $this->joinRight('{users}', $as, $as . '.id = i.' . $on_field);\n                break;\n\n            default:\n                $this->join('{users}', $as, $as . '.id = i.' . $on_field);\n                break;\n        }\n\n        return $this;\n    }\n\n    public function joinUserLeft($on_field='user_id', $user_fields=array()){\n\t\treturn $this->joinUser($on_field, $user_fields, 'left');\n\t}\n\n\tpublic function joinUserRight($on_field='user_id', $user_fields=array()){\n\t\treturn $this->joinUser($on_field, $user_fields, 'right');\n\t}\n\n    public function joinSessionsOnline($as = 'u') {\n\n        if(!empty($this->joined_session_online[$as])){ return $this; }\n\n        $this->joinLeft('sessions_online', 'online', 'online.user_id = '.$as.'.id');\n        $this->select('IF(online.date_created IS NOT NULL AND TIMESTAMPDIFF(SECOND, online.date_created, NOW()) <= '.cmsUser::USER_ONLINE_INTERVAL.', 1, 0)', 'is_online');\n\n        $this->joined_session_online[$as] = true;\n\n        return $this;\n\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n     *\n     * @param array|string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f \u0438\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043b\u0435\u0439\n     * @return $this\n     */\n    public function groupBy($field) {\n\n        $group_by = [];\n\n        if (!is_array($field)) {\n            $field = [$field];\n        }\n\n        foreach ($field as $field_name) {\n\n            if (strpos($field_name, '.') === false) {\n                $field_name = 'i.' . $field_name;\n            }\n\n            $group_by[] = $field_name;\n        }\n\n        $this->group_by = implode(', ', $group_by);\n\n        return $this;\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0435 HAVING \u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439\n     *\n     * @param string $condition \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n     * @return $this\n     */\n    public function havingRaw($condition) {\n\n        if (!$this->group_by) {\n            return $this;\n        }\n\n        $this->group_by .= PHP_EOL . 'HAVING ' . $condition;\n\n        return $this;\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 HAVING \u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $operator \u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\n     * @param mixed $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     * @return $this\n     */\n    public function having($field, $operator, $value) {\n\n        $value = $this->db->escape($value);\n\n        return $this->havingRaw(\"{$field} {$operator} '{$value}'\");\n    }\n\n    /**\n     * \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435\n     * @param string $index_name \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0432 \u0411\u0414\n     * @param string $action FORCE | IGNORE | USE\n     * @param int $for 1 - FOR JOIN, 2 - FOR ORDER BY, 3 - FOR GROUP BY\n     * @return \\cmsModel\n     */\n    protected function indexHint($index_name, $action, $for='') {\n        switch ($for) {\n            case 1:\n                $for_action = 'FOR JOIN';\n                break;\n            case 2:\n                $for_action = 'FOR ORDER BY';\n                break;\n            case 3:\n                $for_action = 'FOR GROUP BY';\n                break;\n            default:\n                $for_action = '';\n                break;\n        }\n        $this->index_action .= \"{$action} INDEX {$for_action} ({$index_name})\\n\";\n        return $this;\n    }\n\n    public function forceIndex($index_name, $for='') {\n        return $this->indexHint($index_name, 'FORCE', $for);\n    }\n\n    public function ignoreIndex($index_name, $for='') {\n        return $this->indexHint($index_name, 'IGNORE', $for);\n    }\n\n    public function useIndex($index_name, $for='') {\n        return $this->indexHint($index_name, 'USE', $for);\n    }\n\n    /**\n     * \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u043f\u043e\u043b\u044e, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\n     * \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u0435 \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u0435\u0441\u0442\u044c, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u043d\u0435\u043c\u0443\n     *\n     * @param string $field \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 \u0411\u0414 \u0431\u0435\u0437 \u044f\u0437\u044b\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\n     * @param string $direction \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n     * @param string $table \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u044f\u0447\u0435\u0439\u043a\u0430. \u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\n     * @return $this\n     */\n    public function orderByTranslatedField($field, $direction = 'asc', $table = '') {\n\n        return $this->orderBy($this->getTranslatedFieldName($field, $table), $direction);\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443\n     *\n     * @param string $order_by\n     * @return $this\n     */\n    public function orderByRaw($order_by) {\n\n        $this->order_by = $order_by;\n\n        return $this;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443\n     *\n     * @param string $field \u041f\u043e\u043b\u0435 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n     * @param string $direction \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n     * @param boolean $is_force_index_by_field deprecated\n     * @return $this\n     */\n    public function orderBy($field, $direction = '', $is_force_index_by_field = false) {\n\n        if (strpos($field, '(') !== false) {\n            return $this;\n        } // \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u043f\u043e\u043b\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n        if ($direction) {\n            $direction = strtolower($direction) === 'desc' ? 'desc' : 'asc';\n        }\n        if (strpos($field, '.') === false) {\n            $field = 'i.' . $field;\n        }\n\n        return $this->orderByRaw($field . ' ' . $direction);\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443\n     *\n     * @param array $list \u041c\u0430\u0441\u0441\u0438\u0432 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0441 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 by \u0438 to\n     * @return $this\n     */\n    public function orderByList($list) {\n\n        $this->order_by = '';\n\n        if (is_array($list)) {\n\n            foreach ($list as $o) {\n\n                if (strpos($o['by'], '(') !== false) {\n                    continue;\n                }\n\n                $field     = $o['by'];\n                $direction = strtolower($o['to']) === 'desc' ? 'desc' : 'asc';\n\n                if (empty($o['strict']) && strpos($field, '.') === false) {\n                    $field = 'i.' . $field;\n                }\n                if ($this->order_by) {\n                    $this->order_by .= ', ';\n                }\n                $this->order_by .= $field . ' ' . $direction;\n            }\n        }\n\n        return $this;\n    }\n\n    public function limit($from, $howmany = 0) {\n\n        $this->limit = (int) $from;\n        $howmany     = (int) $howmany;\n\n        if ($this->limit < 0) {\n            $this->limit = 0;\n        }\n\n        if ($howmany) {\n            if ($howmany <= 0) {\n                $howmany = 15;\n            }\n            $this->limit .= ', ' . $howmany;\n        }\n\n        return $this;\n    }\n\n    public function limitPage($page, $perpage = 0) {\n\n        $page    = (int) $page;\n        $perpage = (int) $perpage;\n\n        if ($perpage <= 0) {\n            $perpage = $this->perpage;\n        }\n\n        return $this->limit(($page - 1) * $perpage, $perpage);\n    }\n\n    public function limitPagePlus($page, $perpage = 0) {\n\n        $page    = (int) $page;\n        $perpage = (int) $perpage;\n\n        if ($perpage <= 0) {\n            $perpage = $this->perpage;\n        }\n\n        return $this->limit(($page - 1) * $perpage, $perpage + 1);\n    }\n\n    public function setPerPage($perpage) {\n\n        $this->perpage = (int) $perpage;\n\n        return $this;\n    }\n\n    public function setReadType($type) {\n\n        $this->read_type = $type;\n\n        return $this;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getField($table_name, $row_id, $field_name) {\n\n        return $this->filterEqual('id', $row_id)->\n                getFieldFiltered($table_name, $field_name);\n    }\n\n    public function getFieldFiltered($table_name, $field_name) {\n\n        $this->selectOnly($field_name);\n\n        $item = $this->getItem($table_name);\n\n        if (!$item) {\n            return false;\n        }\n\n        return $item[$field_name];\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getItem($table_name, $item_callback = false) {\n\n        $this->table = $table_name;\n\n        $this->limit(1);\n\n        $sql = $this->getSQL();\n\n        $encoded_fields = $this->encoded_fields;\n\n        $this->resetFilters();\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0437 \u043a\u0435\u0448\u0430\n        if ($this->cache_key) {\n\n            $cache_key = $this->cache_key . '.' . md5($sql);\n            $cache     = cmsCache::getInstance();\n\n            $item = $cache->get($cache_key);\n\n            if ($item) {\n\n                if (is_callable($item_callback)) {\n                    $item = call_user_func_array($item_callback, [$item, $this]);\n                }\n\n                if ($this->localized) {\n                    $item = $this->replaceTranslatedField($item, $table_name);\n                }\n\n                $this->stopCache();\n\n                return $item;\n            }\n        }\n\n        $result = $this->db->query($sql);\n\n        if (!$this->db->numRows($result)) {\n            return false;\n        }\n\n        $item = $this->db->fetchAssoc($result);\n\n        // \u0434\u043b\u044f \u043a\u0435\u0448\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043b\u043b\u0431\u044d\u043a\u043e\u043c\n        if ($this->cache_key) {\n            $_item = $item;\n        }\n\n        if ($encoded_fields) {\n            foreach ($encoded_fields as $field) {\n                $item[$field] = base64_decode($item[$field]);\n                unset($item['enc_' . $field]);\n            }\n        }\n\n        if (is_callable($item_callback)) {\n            $item = call_user_func_array($item_callback, [$item, $this]);\n        }\n\n        if ($this->localized) {\n            $item = $this->replaceTranslatedField($item, $table_name);\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043a\u0435\u0448\u0435\n        if ($this->cache_key) {\n            $cache->set($cache_key, $_item);\n            $this->stopCache();\n        }\n\n        $this->db->freeResult($result);\n\n        return $item;\n    }\n\n    public function getItemById($table_name, $id, $item_callback = false) {\n\n        return $this->getItemByField($table_name, 'id', $id, $item_callback);\n    }\n\n    public function getItemByField($table_name, $field_name, $field_value, $item_callback = false) {\n\n        return $this->filterEqual($field_name, $field_value)->\n                getItem($table_name, $item_callback);\n    }\n\n//============================================================================//\n//============================================================================//\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\n     *\n     * @param string $table_name \u0418\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @param string $by_field \u041f\u043e\u043b\u0435 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430\n     * @param boolean $reset \u0424\u043b\u0430\u0433 \u0441\u0431\u0440\u043e\u0441\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\n     * @return integer\n     */\n    public function getCount($table_name, $by_field = 'id', $reset = false) {\n\n        if(!$by_field){\n            $select = \"{$this->distinct} 1\";\n        } else {\n            $select = \"COUNT({$this->distinct} i.{$by_field} ) as `count`\";\n        }\n\n        $sql = \"SELECT {$this->straight_join} {$select}\n                FROM {#}{$table_name} i\n                {$this->index_action}\";\n\n        if ($this->join) { $sql .= $this->join; }\n\n        if ($this->where) { $sql .= 'WHERE ' . $this->where . PHP_EOL; }\n\n        if ($this->group_by) { $sql .= 'GROUP BY ' . $this->group_by . PHP_EOL; }\n\n        if ($reset) {\n            $this->resetFilters();\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0437 \u043a\u0435\u0448\u0430\n        if ($this->cache_key) {\n\n            $cache_key = $this->cache_key . '.' . md5($sql);\n            $cache = cmsCache::getInstance();\n\n            if (false !== ($result = $cache->get($cache_key))) {\n                $this->stopCache();\n                return $result;\n            }\n        }\n\n        $result = $this->db->query($sql);\n\n        $num_rows = $this->db->numRows($result);\n\n        if(!$by_field){\n\n            $count = $num_rows;\n\n        } else {\n\n            if (!$num_rows) {\n                $count = 0;\n            } else {\n                $item  = $this->db->fetchAssoc($result);\n                $count = intval($item['count']);\n            }\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043a\u0435\u0448\u0435\n        if ($this->cache_key) {\n            $cache->set($cache_key, $count);\n            $this->stopCache();\n        }\n\n        $this->db->freeResult($result);\n\n        return $count;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044f \u0432\u0441\u0435 \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u043d\u0435\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b\n     *\n     * @param string $table_name \u0418\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @param callable $item_callback \u041a\u043e\u043b\u043b\u0431\u044d\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044f\n     * @param string $key_field \u0418\u043c\u044f \u044f\u0447\u0435\u0439\u043a\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\u0437 \u0411\u0414, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0430\u043d\u0435\u0442 \u043a\u043b\u044e\u0447\u0451\u043c \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n     * @return array\n     */\n    public function get($table_name, $item_callback = false, $key_field = 'id') {\n\n        $this->table = $table_name;\n\n        $items = $_items = [];\n\n        $sql = $this->getSQL();\n\n        $encoded_fields = $this->encoded_fields;\n\n        // \u0441\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u044b\n        $this->resetFilters();\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0437 \u043a\u0435\u0448\u0430\n        if ($this->cache_key) {\n\n            $cache_key = $this->cache_key . '.' . md5($sql);\n\n            $cache = cmsCache::getInstance();\n\n            $_items = $cache->get($cache_key);\n\n            if ($_items !== false) {\n\n                $this->stopCache();\n\n                // \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u043b\u0431\u044d\u043a\u043e\u043c\n                if (is_callable($item_callback)) {\n\n                    foreach ($_items as $key => $item) {\n\n                        $item = call_user_func_array($item_callback, [$item, $this]);\n                        if ($item === false) {\n                            continue;\n                        }\n\n                        if ($this->localized) {\n                            $item = $this->replaceTranslatedField($item, $table_name);\n                        }\n\n                        $items[$key] = $item;\n                    }\n                } else {\n                    return $_items;\n                }\n\n                return $items;\n            } else {\n                $_items = [];\n            }\n        }\n\n        $result = $this->db->query($sql);\n\n        // \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u043b, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043b\u043e\u0436\u044c\n        if (!$this->db->numRows($result)) {\n            return false;\n        }\n\n        // \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0435\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438\n        while ($item = $this->db->fetchAssoc($result)) {\n\n            $key = ($key_field && isset($item[$key_field])) ? $item[$key_field] : false;\n\n            // \u0434\u043b\u044f \u043a\u0435\u0448\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043b\u043b\u0431\u044d\u043a\u043e\u043c\n            if ($this->cache_key) {\n                if ($key) {\n                    $_items[$key] = $item;\n                } else {\n                    $_items[] = $item;\n                }\n            }\n\n            if ($encoded_fields) {\n                foreach ($encoded_fields as $efield) {\n                    $item[$efield] = base64_decode($item[$efield]);\n                    unset($item['enc_' . $efield]);\n                }\n            }\n\n            // \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d \u043a\u043e\u043b\u043b\u0431\u0435\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0442\u0440\u043e\u043a,\n            // \u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u043d\u0435\u0433\u043e\n            if (is_callable($item_callback)) {\n                $item = call_user_func_array($item_callback, [$item, $this]);\n                if ($item === false) {\n                    continue;\n                }\n            }\n\n            if ($this->localized) {\n                $item = $this->replaceTranslatedField($item, $table_name);\n            }\n\n            // \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n            if ($key) {\n                $items[$key] = $item;\n            } else {\n                $items[] = $item;\n            }\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043a\u0435\u0448\u0435\n        // \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043b\u043b\u0431\u044d\u043a\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\n        if ($this->cache_key) {\n            $cache->set($cache_key, $_items);\n            $this->stopCache();\n        }\n\n        $this->db->freeResult($result);\n\n        // \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438\n        return $items;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getSQL() {\n\n        $select = implode(', ', $this->select);\n\n        $sql = \"SELECT {$this->distinct} {$this->straight_join} {$select}\n                FROM {#}{$this->table} i\n                {$this->index_action}\";\n\n        if ($this->join) {\n            $sql .= $this->join;\n        }\n\n        if ($this->where) {\n            $sql .= 'WHERE ' . $this->where . PHP_EOL;\n        }\n\n        if ($this->group_by) {\n            $sql .= 'GROUP BY ' . $this->group_by . PHP_EOL;\n        }\n\n        if ($this->order_by) {\n            $sql .= 'ORDER BY ' . $this->order_by . PHP_EOL;\n        }\n\n        if ($this->limit) {\n            $sql .= 'LIMIT ' . $this->limit . PHP_EOL;\n        }\n\n        if ($this->read_type) {\n            $sql .= $this->read_type . PHP_EOL;\n        }\n\n        return $sql;\n    }\n\n//============================================================================//\n//============================================================================//\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u043b\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435\n     * \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     *\n     * @param string $table \u0422\u0430\u0431\u043b\u0438\u0446\u0430\n     * @param string $field \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f\n     * @param integer $default \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n     * @param string $dir \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435: MAX \u0438\u043b\u0438 MIN\n     * @return integer\n     */\n    public function getMax($table, $field, $default = 0, $dir = 'MAX') {\n\n        $sql = \"SELECT {$dir}(i.{$field}) as {$field}\n                FROM {#}{$table} i\n                \";\n\n        if ($this->where) {\n            $sql .= 'WHERE ' . $this->where . PHP_EOL;\n        }\n\n        $sql .= 'LIMIT 1';\n\n        $result = $this->db->query($sql);\n\n        $this->resetFilters();\n\n        if (!$this->db->numRows($result)) {\n            return $default;\n        }\n\n        $max = $this->db->fetchAssoc($result);\n\n        $this->db->freeResult($result);\n\n        return $max[$field] ?: 0;\n    }\n\n    public function getMin($table, $field, $default = 0) {\n        return $this->getMax($table, $field, $default, 'MIN');\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\n     * @param string $table\n     * @param string $where\n     * @return int\n     */\n    public function getMaxOrdering($table){\n\n        return $this->getMax($table, 'ordering');\n\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     * @param string $table\n     * @param string $where\n     * @return int\n     */\n    public function getNextOrdering($table){\n\n        return $this->getMaxOrdering($table) + 1;\n\n    }\n\n    /**\n     * \u041f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\n     *\n     * @param string $table_name \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0411\u0414\n     * @return boolean\n     */\n    public function reorder($table_name) {\n\n        $list = $this->limit(false)->\n            orderBy('ordering', 'asc')->selectOnly('id')->\n            get($table_name, function ($item, $model) {\n            return $item['id'];\n        }, false) ?: [];\n\n        return $this->reorderByList($table_name, $list);\n    }\n\n    /**\n     * \u0420\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 ID \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     *\n     * @param string $table_name \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0411\u0414\n     * @param array $list \u041c\u0430\u0441\u0441\u0438\u0432 id \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\n     * @param array $additional_fields \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0438 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 ordering\n     * @param string $field_name \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f\n     * @return boolean\n     */\n    public function reorderByList($table_name, $list, $additional_fields = [], $field_name = 'ordering') {\n\n        $ordering = 0;\n\n        foreach ($list as $id) {\n\n            if (is_array($id) || !is_numeric($id)) {\n                continue;\n            }\n\n            $ordering += 1;\n\n            $this->update($table_name, $id, array_merge($additional_fields, [$field_name => $ordering]));\n        }\n\n        return $ordering > 0 ? true : false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u043a \u043c\u043e\u0434\u0435\u043b\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430\n     * \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     *\n     * @param cmsGrid $grid \u041e\u0431\u044a\u0435\u043a\u0442 \u0433\u0440\u0438\u0434\u0430\n     * @param array $filter\n     * @return $this\n     */\n    public function applyGridFilter(cmsGrid $grid, $filter) {\n\n        $grid->applyGridFilter($this, $filter);\n\n        return $this;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043d\u0430 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 $step\n     *\n     * @param string $table \u0418\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param type $step \u0428\u0430\u0433 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n     * @return boolean\n     */\n    public function increment($table, $field, $step = 1) {\n\n        $step = intval($step);\n\n        $sign = $step > 0 ? '+' : '-';\n        $step = abs($step);\n\n        $sql = \"UPDATE {#}{$table} i\n                SET i.{$field} = i.{$field} {$sign} {$step}\n                \";\n\n        if ($this->where) {\n            $sql .= 'WHERE ' . $this->where;\n        }\n\n        $this->resetFilters();\n\n        return $this->db->query($sql, false, true) ? true : false;\n    }\n\n    /**\n     * \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043d\u0430 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 $step \u0441 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u043a\u043e\u043c\n     *\n     * @param string $table \u0418\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param type $step \u0428\u0430\u0433 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n     * @return boolean\n     */\n    public function decrement($table, $field, $step = 1) {\n        return $this->increment($table, $field, $step * -1);\n    }\n\n    /**\n     * \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0435 $name \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \u0411\u0414\n     *\n     * @param string $name \u0418\u043c\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\n     * @return boolean\n     */\n    public function deleteController($name) {\n\n\t\tif(is_numeric($name)){\n            $controller = $this->getItemById('controllers', $name);\n            $name = $controller['name'];\n\t\t}\n\n        $this->filterEqual('controller', $name)->deleteFiltered('{users}_tabs');\n        $this->filterEqual('listener', $name)->deleteFiltered('events');\n\n        cmsCache::getInstance()->clean('events');\n\n        $rule_ids = $this->selectOnly('id')->filterEqual('controller', $name)->get('perms_rules', function($item, $model){\n            return $item['id'];\n        }, false);\n\n        if($rule_ids){\n            $this->filterIn('rule_id', $rule_ids)->deleteFiltered('perms_users');\n            $this->filterEqual('controller', $name)->deleteFiltered('perms_rules');\n        }\n\n        $this->filterEqual('controller', $name)->deleteFiltered('scheduler_tasks');\n\n        return $this->filterEqual('name', $name)->deleteFiltered('controllers');\n    }\n\n    public function fieldsAfterStore($item, $fields, $action = 'add') {\n\n        foreach ($fields as $field) {\n            $field['handler']->afterStore($item, $this, $action);\n        }\n\n        return $this;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0447\u0435\u0440\u043d\u043e\u0432\u0438\u043a\u0430\u0445\n     * \u0414\u043b\u044f \u043d\u0443\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430\n     * \u0432 \u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u044f\u0445\n     *\n     * @param integer $user_id\n     * @return integer | array\n     */\n    public function getDraftCounts($user_id){\n        return 0;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 $items \u0432 \u0432\u0438\u0434\u0435 \u043f\u043b\u043e\u0441\u043a\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430\n     * \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0432\u044f\u0437\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 parent_id\n     * @param array $items\n     * @param array $result_tree\n     * @param int $parent_id\n     * @param int $level\n     */\n    public static function buildTreeRecursive($items, &$result_tree, $parent_id=0, $level=1){\n        $level++;\n        foreach($items as $item){\n            if ($item['parent_id']==$parent_id){\n                $item['level'] = $level-1;\n                if (!isset($result_tree[$item['id']])){\n                    $result_tree[$item['id']] = $item;\n                }\n                self::buildTreeRecursive($items, $result_tree, $item['id'], $level);\n            }\n        }\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 YAML\n     * @param array $input_array\n     * @param integer $indent\n     * @param integer $word_wrap\n     * @return string\n     */\n    public static function arrayToYaml($input_array, $indent = 2, $word_wrap = 40) {\n\n        $array = [];\n\n        if (cmsConfig::get('native_yaml')) {\n\n            if (!empty($input_array)) {\n                $array = $input_array;\n            }\n\n            return yaml_emit($array, YAML_UTF8_ENCODING);\n        }\n\n        if (!empty($input_array)) {\n            foreach ($input_array as $key => $value) {\n                $_k = str_replace(['[', ']'], '', $key); // \u0431\u044b\u043b \u0444\u0430\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0430\u0433, \u0435\u0441\u043b\u0438 \u0432 \u043a\u043b\u044e\u0447\u0430\u0445 \u044d\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u044b\n                $array[$_k] = $value;\n            }\n        }\n\n        return Spyc::YAMLDump($array, $indent, $word_wrap);\n    }\n\n    /**\n     * \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 YAML \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n     * @param string $yaml\n     * @return array\n     */\n    public static function yamlToArray($yaml) {\n\n        if (!$yaml) { return []; }\n\n        if (is_array($yaml)) { return $yaml; }\n\n        if ($yaml === \"---\\n- 0\\n\") { return []; }\n        if ($yaml === \"---\\n- \\\"0\\\"\\n...\\n\") { return []; }\n\n        if (cmsConfig::get('native_yaml')) {\n            return yaml_parse($yaml);\n        }\n\n        return Spyc::YAMLLoadString($yaml);\n    }\n\n    /**\n     * \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443\n     * @param array $input_array\n     * @return string\n     */\n    public static function arrayToString($input_array) {\n        if (!is_array($input_array)) {\n            return null;\n        }\n        return json_encode($input_array, JSON_UNESCAPED_UNICODE);\n    }\n\n    /**\n     * \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n     * @param string $string\n     * @return array\n     */\n    public static function stringToArray($string) {\n        if (!$string) { return []; }\n        return (array) json_decode($string, true);\n    }\n\n    /**\n     * \u041a\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n     * @param string $key \u041a\u043b\u044e\u0447\n     * @param mixed $data \u0414\u0430\u043d\u043d\u044b\u0435\n     */\n    public static function cacheResult($key, $data) {\n        self::$cached[$key] = $data;\n    }\n    public static function getCachedResult($key) {\n        if (isset(self::$cached[$key])) {\n            return self::$cached[$key];\n        }\n        return null;\n    }\n\n}\n", "<?php\n\nnamespace icms\\traits\\controllers\\actions;\n\nuse cmsUser, cmsGrid, cmsForm;\n\n/**\n * \u0422\u0440\u0435\u0439\u0442 \u0434\u043b\u044f \u044d\u043a\u0448\u0435\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0430 \u0433\u0440\u0438\u0434\u0430\n *\n * @property \\cmsTemplate $cms_template\n * @property \\cmsUser $cms_user\n * @property \\cmsRequest $request\n * @property \\cmsModel $model\n * @property \\cmsGrid $grid\n *\n */\ntrait listgrid {\n\n    /**\n     * \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0411\u0414\n     * @required\n     * @var string\n     */\n    protected $table_name = '';\n\n    /**\n     * \u0418\u043c\u044f \u0433\u0440\u0438\u0434\u0430\n     * @required\n     * @var string\n     */\n    protected $grid_name = '';\n\n    /**\n     * \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0433\u0440\u0438\u0434\u0430\n     * @var array\n     */\n    protected $grid_args = false;\n\n    /**\n     * URL \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0433\u0440\u0438\u0434\u0430\n     * @var string\n     */\n    protected $grid_url = '';\n\n    /**\n     * \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * \u041a\u043d\u043e\u043f\u043a\u0438 \u0442\u0443\u043b\u0431\u0430\u0440\u0430\n     * @var array\n     */\n    protected $tool_buttons = [];\n\n    /**\n     * \u0418\u043c\u044f \u0445\u0443\u043a\u0430 \u0434\u043b\u044f \u0442\u0443\u043b\u0431\u0430\u0440\u0430\n     * @var ?string\n     */\n    protected $toolbar_hook = null;\n\n    /**\n     * \u041a\u043e\u043b\u043b\u0431\u044d\u043a \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0433\u0434\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445\n     * @var callable\n     */\n    protected $list_callback = null;\n\n    /**\n     * \u041a\u043e\u043b\u043b\u0431\u044d\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     * @var ?callable\n     */\n    protected $items_callback = null;\n\n    /**\n     * \u041a\u043e\u043b\u043b\u0431\u044d\u043a, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434 get \u043c\u043e\u0434\u0435\u043b\u0438\n     * @var ?callable\n     */\n    protected $item_callback = null;\n\n    /**\n     * \u041a\u043e\u043b\u043b\u0431\u044d\u043a \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\n     * @var callable\n     */\n    protected $filter_callback = null;\n\n    /**\n     * \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u044d\u043a\u0448\u0435\u043d\u0443\n     * @var string\n     */\n    protected $external_action_prefix = '';\n\n    /**\n     * \u041a\u043b\u044e\u0447 UPS\n     * @var string\n     */\n    protected $ups_key = '';\n\n    /**\n     * \u0413\u0440\u0438\u0434\n     * @var array\n     */\n    protected $grid;\n\n    /**\n     * \u041a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n     * @var integer\n     */\n    protected $default_perpage = 30;\n\n    /**\n     * \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0432 run\n     */\n    public function prepareRun() {}\n\n    /**\n     * \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u044d\u043a\u0448\u0435\u043d\u0430\n     *\n     * @param mixed $do\n     * @param mixed $param_two\n     * @return string\n     */\n    public function run($do = null, $param_two = null){\n\n        // \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u044d\u043a\u0448\u0435\u043d\u0443\n        if ($do && !is_numeric($do)) {\n\n            $this->runExternalAction($this->external_action_prefix.$do, array_slice($this->params, 1));\n            return;\n        }\n\n        $this->prepareRun();\n\n        $this->setListGridParams();\n\n        if ($this->request->isAjax()) {\n\n            header('X-Frame-Options: DENY');\n\n            // \u0415\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438\n            if ($this->request->has('save_row_field')) {\n\n                return $this->cms_template->renderJSON($this->saveRowField($this->request->getAll()));\n            }\n\n            // \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n            return $this->cms_template->renderJSON($this->getListItems());\n        }\n\n        return $this->renderListItemsGrid();\n    }\n\n    /**\n     * \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0433\u0440\u0438\u0434\u0430\n     *\n     * @param array $field_data\n     * @return array\n     */\n    public function saveRowField($field_data) {\n\n        if (empty($field_data['csrf_token']) || !cmsForm::validateCSRFToken($field_data['csrf_token'])) {\n            return ['error' => LANG_ERROR . ' #csrf_token'];\n        }\n\n        if (!$field_data) {\n            return ['error' => LANG_ERROR . ' #empty data'];\n        }\n\n        if (empty($field_data['name']) || !is_string($field_data['name'])) {\n\n            return $this->cms_template->renderJSON([\n                'error' => LANG_ERROR . ' #empty data name'\n            ]);\n        }\n\n        if (!array_key_exists('value', $field_data) || is_array($field_data['value'])) {\n\n            return $this->cms_template->renderJSON([\n                'error' => LANG_ERROR . ' #empty data value'\n            ]);\n        }\n\n        if (empty($field_data['id']) || !is_numeric($field_data['id'])) {\n            return ['error' => LANG_ERROR . ' #empty id'];\n        }\n\n        $i = $this->model->getItemByField($this->table_name, 'id', $field_data['id']);\n        if (!$i) {\n            return ['error' => LANG_ERROR . ' #404'];\n        }\n\n        if (!array_key_exists($field_data['name'], $i)) {\n            return ['error' => LANG_ERROR . ' #no field'];\n        }\n\n        $error = $this->grid->validateColumnValue($field_data['name'], $field_data['value']);\n\n        if ($error !== true) {\n            return ['error' => $error];\n        }\n\n        $field_name = $field_data['name'];\n\n        $disable_language_context = $this->grid->getGridValue('columns:' . $field_name . ':editable:language_context');\n\n        if (!$disable_language_context) {\n\n            // \u0418\u0449\u0435\u043c \u043f\u043e\u043b\u0435 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u044f\u0437\u044b\u043a\u0435\n            $field_name = $this->model->getTranslatedFieldName($field_name, $this->table_name);\n\n            // \u041c\u043e\u0433\u043b\u043e \u0431\u044b\u0442\u044c \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445\n            if (!array_key_exists($field_name, $i)) {\n                return ['error' => LANG_ERROR . ' #no translated field'];\n            }\n        }\n\n        $this->model->update($this->table_name, $i['id'], [\n            $field_name => strip_tags($field_data['value'])\n        ]);\n\n        $this->model->limit(1)->filterEqual('id', $field_data['id']);\n\n        $row_data = $this->getListItems(true);\n\n        if (empty($row_data['rows'][0])) {\n            return ['error' => LANG_ERROR . ' #no row data'];\n        }\n\n        return [\n            'error' => false,\n            'row'   => $row_data['rows'][0]\n        ];\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0433\u0440\u0438\u0434\n     *\n     * @return void\n     */\n    public function setListGridParams() {\n\n        $this->ups_key = 'grid_filter.' . $this->ups_key . $this->name . '_' . $this->grid_name;\n\n        $this->grid = new cmsGrid($this->controller, $this->grid_name, $this->grid_args);\n\n        if (!$this->grid->isLoaded()) {\n\n            return cmsCore::error($this->grid->getError());\n        }\n\n        $this->grid->source_url = $this->grid_url ? $this->grid_url : $this->cms_template->href_to($this->current_action, $this->params);\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML \u0433\u0440\u0438\u0434\u0430\n     *\n     * @return string\n     */\n    public function getListItemsGridHtml(){\n\n        $this->cms_template->addToolButtons($this->tool_buttons);\n\n        if ($this->toolbar_hook) {\n\n            $this->cms_template->applyToolbarHook($this->toolbar_hook);\n        }\n\n        return $this->cms_template->getRenderedAsset('ui/grid-data', [\n            'grid'       => $this->grid,\n            'rows'       => $this->getListItems(),\n            'page_title' => $this->title\n        ]);\n    }\n\n    /**\n     * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0433\u0440\u0438\u0434 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438\n     * CSS \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u044b\u0437\u043e\u0432\u0430\n     *\n     * @return string\n     */\n    public function renderListItemsGrid(){\n\n        $html = $this->getListItemsGridHtml();\n\n        if ($this->request->isStandard()) {\n            $this->cms_template->addOutput($html);\n        }\n\n        $css_file = $this->cms_template->getStylesFileName();\n\n        if ($css_file) {\n            $this->cms_template->addCSSFromContext($css_file, $this->request);\n        }\n\n        return $html;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0434\u043b\u044f \u0433\u0440\u0438\u0434\u0430\n     *\n     * @param boolean $ignore_field \u0418\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\n     * @return type\n     */\n    public function getListItems($ignore_field = false){\n\n        if (!$ignore_field) {\n\n            $this->model->setPerPage($this->default_perpage);\n\n            $visible_columns = cmsUser::getUPSActual($this->ups_key.'.visible_columns', $this->request->get('visible_columns', []));\n\n            if ($visible_columns) {\n\n                $switchable_columns = $this->grid->getSwitchableColumns();\n\n                if ($switchable_columns) {\n                    foreach ($switchable_columns as $name => $column) {\n                        if (!in_array($name, $visible_columns)) {\n                            $this->grid->disableColumn($name);\n                        } else {\n                            $this->grid->enableColumn($name);\n                        }\n                    }\n                }\n            }\n\n            $filter     = $this->grid->filter;\n            $pre_filter = cmsUser::getUPSActual($this->ups_key, $this->request->get('filter', ''));\n\n            if ($pre_filter) {\n                parse_str($pre_filter, $filter);\n            }\n\n            if ($filter) {\n\n                if ($this->filter_callback) {\n                    $filter = call_user_func_array($this->filter_callback, [$filter]);\n                }\n\n                $this->grid->applyGridFilter($this->model, $filter);\n            }\n        }\n\n        if($this->list_callback){\n            $this->model = call_user_func_array($this->list_callback, [$this->model]);\n        }\n\n        $total = $this->model->getCount($this->table_name);\n\n        $data = $this->model->get($this->table_name, $this->item_callback) ?: [];\n\n        if($this->items_callback){\n            $data = call_user_func_array($this->items_callback, [$data]);\n        }\n\n        return $this->grid->makeGridRows($data, $total);\n    }\n\n}\n", "[info]\ntitle = \"InstantCMS Update\"\nimage = \"package.png\"\n\n[install]\ntype = \"system\"\n\n[version]\nmajor = \"2\"\nminor = \"16\"\nbuild = \"1\"\ndate  = \"20230613\"\n\n[depends]\ncore = \"2.16.0\"\n\n[author]\nname = \"InstantCMS Team\"\nurl = \"https://instantcms.ru\"\n\n[description]\ntext[] = \"Release details:\"\ntext[] = \"https://instantcms.ru/novosti/release2161.html\"\n", "[info]\ntitle = \"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 InstantCMS\"\nimage = \"package.png\"\n\n[install]\ntype = \"system\"\n\n[version]\nmajor = \"2\"\nminor = \"16\"\nbuild = \"1\"\ndate  = \"20230613\"\n\n[depends]\ncore = \"2.16.0\"\n\n[author]\nname = \"InstantCMS Team\"\nurl = \"https://instantcms.ru\"\n\n[description]\ntext[] = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f:\"\ntext[] = \"https://instantcms.ru/novosti/release2161.html\"\n"], "fixing_code": ["[version]\nmajor = 2\nminor = 16\nbuild = 1\ndate = 20230912", "<?php\nclass admin extends cmsFrontend {\n\n    use icms\\traits\\eventDispatcher;\n\n    const addons_api_key   = '8e13cb202f8bdc27dc765e0448e50d11';\n    const addons_api_point = 'https://api.instantcms.ru/api/method/';\n\n    public $disallow_mapping_redirect = true;\n\n    protected $useOptions = true;\n\n    const perpage = 30;\n\n    public $installer_upload_path = 'installer';\n\n    public $install_folder_exists = false;\n\n\tpublic function routeAction($action_name) {\n\n        if ($this->request->isStandard()) {\n\n            $result = cmsEventsManager::hook('admin_confirm_login', [\n                'allow'     => true,\n                'form'      => null,\n                'errors'    => null,\n                'pagetitle' => null,\n                'title'     => null,\n                'hint'      => null\n            ]);\n\n            if (!$result['allow']) {\n\n                unset($result['allow']);\n\n                $this->current_params = $result;\n\n                return 'confirm_login';\n            }\n        }\n\n        return $action_name;\n    }\n\n    protected function validateParamsCount($class, $method_name, $params) {\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0435 admin \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430\n        return true;\n    }\n\n    public function before($action_name) {\n\n        parent::before($action_name);\n\n        if (!$this->request->isInternal()) {\n\n            if ($this->cms_config->template_admin) {\n                $this->cms_template->setBaseTemplate($this->cms_config->template_admin);\n            }\n\n            if (!$this->cms_user->is_logged) {\n                cmsCore::errorForbidden('', true);\n            }\n\n            if (!$this->cms_user->is_admin) {\n                cmsCore::error404();\n            }\n\n            if (!$this->isAllowByIp()) {\n                cmsCore::errorForbidden(LANG_ADMIN_ACCESS_DENIED_BY_IP);\n            }\n\n            $this->install_folder_exists = file_exists($this->cms_config->root_path . 'install/');\n\n            if ($this->request->isStandard()) {\n\n                $this->cms_template->setLayout('admin');\n\n                $this->cms_template->setMenuItems('cp_main', $this->getAdminMenu($this->cms_template->name === 'admincoreui'));\n\n                $this->cms_template->setLayoutParams([\n                    'user'          => $this->cms_user,\n                    'current_lang'  => cmsCore::getLanguageName(),\n                    'langs'         => cmsCore::getLanguages(),\n                    'hide_sidebar'  => cmsUser::getCookie('hide_sidebar', 'integer'),\n                    'close_sidebar' => cmsUser::getCookie('close_sidebar', 'integer'),\n                    'su'            => $this->getSystemUtilization(),\n                    'update'        => ($this->cms_config->is_check_updates ? $this->cms_updater->checkUpdate(true) : array()),\n                    'notices_count' => cmsCore::getModel('messages')->getNoticesCount($this->cms_user->id)\n                ]);\n            }\n        }\n    }\n\n    private function isAllowByIp() {\n\n        $allow_ips = cmsConfig::get('allow_ips');\n        if (!$allow_ips) { return true; }\n\n        return string_in_mask_list(cmsUser::getIp(), $allow_ips);\n    }\n\n    function getSystemUtilization() {\n\n        $total_size = disk_total_space(PATH);\n        $free_space = disk_free_space(PATH);\n        $taken_space = ($total_size -$free_space);\n        $percent = round($taken_space/$total_size*100);\n\n        $su = [\n            'disk' => [\n                'title'   => LANG_CP_SU_DISK,\n                'hint'    => files_format_bytes($taken_space).'/'.files_format_bytes($total_size),\n                'percent' => $percent,\n                'style'   => ($percent <= 50 ? 'info' : ($percent <= 75 ? 'warning' : 'danger'))\n            ]\n        ];\n\n        if(function_exists('sys_getloadavg')){\n\n            $cpu_count = cmsUser::sessionGet('cpu_count');\n\n            if(!$cpu_count){\n\n                // \u041d\u0443 \u0430 \u0432\u0434\u0440\u0443\u0433 ;-)\n                if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n                    $cmd = 'echo %NUMBER_OF_PROCESSORS%';\n                } else {\n                    $cmd = \"grep -P '^physical id' /proc/cpuinfo|wc -l\";\n                }\n\n                try {\n                    $cpu_count = console_exec_command($cmd);\n\n                    if(!empty($cpu_count[0])){\n                        $cpu_count = trim($cpu_count[0]) ? trim($cpu_count[0]) : 1;\n                    } else {\n                        $cpu_count = 1;\n                    }\n\n                } catch (Exception $exc) {\n                    $cpu_count = 'error';\n                }\n\n                cmsUser::sessionSet('cpu_count', $cpu_count);\n            }\n\n            if($cpu_count && is_numeric($cpu_count)){\n\n                $la = sys_getloadavg();\n\n                if(isset($la[2])){\n\n                    $current_load_average = round(100*($la[2]/$cpu_count));\n\n                    // \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u043e\n                    if($current_load_average > 110){\n                        $cpu_count = round($current_load_average/100);\n                        cmsUser::sessionSet('cpu_count', $cpu_count);\n                        $current_load_average = round(100*($la[2]/$cpu_count));\n                    }\n\n                    $su['cpu'] = [\n                        'title'   => LANG_CP_SU_CPU,\n                        'hint'    => $current_load_average.'%',\n                        'percent' => $current_load_average,\n                        'style'   => ($current_load_average <= 50 ? 'info' : ($current_load_average <= 75 ? 'warning' : 'danger'))\n                    ];\n                }\n\n            }\n\n        }\n\n        return cmsEventsManager::hook('admin_system_utilization', $su);\n    }\n\n    public function buildDatasetFieldsList($controller_name, $fields) {\n\n        $fields_list = [];\n\n        foreach ($fields as $field) {\n\n            if ((!$field['handler']->allow_index || $field['handler']->filter_type === false) && $field['type'] !== 'parent') {\n                continue;\n            }\n\n            $fields_list[] = [\n                'value' => $field['name'],\n                'type'  => $field['handler']->filter_type,\n                'title' => $field['title']\n            ];\n        }\n\n        return cmsEventsManager::hook('admin_' . $controller_name . '_dataset_fields_list', $fields_list);\n    }\n\n    public function getAdminMenu($show_submenu = false){\n\n        $menu = []; $ctype_new_count = 0;\n\n        $ctypes = $this->model_backend_content->getContentTypes();\n\n        if($show_submenu){\n            foreach ($ctypes as $ctype) {\n                $ctype_new_count += $this->model->getTableItemsCount24($this->model->getContentTypeTableName($ctype['name']));\n            }\n        }\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_CONTENT,\n            'url' => href_to($this->name, 'content'),\n            'counter' => ($ctypes && $show_submenu && $ctype_new_count) ? '+'.$ctype_new_count : null,\n            'options' => [\n                'class' => 'item-content',\n                'icon'  => 'file-alt'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_CTYPES,\n            'url' => href_to($this->name, 'ctypes'),\n            'options' => [\n                'class' => 'item-ctypes',\n                'icon'  => 'pencil-ruler'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_MENU,\n            'url' => href_to($this->name, 'menu'),\n            'options' => [\n                'class' => 'item-menu',\n                'icon'  => 'bars'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_WIDGETS,\n            'url' => href_to($this->name, 'widgets'),\n            'options' => [\n                'class' => 'item-widgets',\n                'icon'  => 'th-large'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_CONTROLLERS,\n            'url' => href_to($this->name, 'controllers'),\n            'options' => [\n                'class' => 'item-controllers',\n                'icon'  => 'layer-group'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_OFICIAL_ADDONS,\n            'url' => href_to($this->name, 'addons_list'),\n            'options' => [\n                'class' => 'item-addons',\n                'icon'  => 'puzzle-piece'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_USERS,\n            'url' => href_to($this->name, 'users'),\n            'options' => [\n                'class' => 'item-users',\n                'icon'  => 'users-cog'\n            ]\n        ];\n\n        $menu[] = [\n            'title' => LANG_CP_SECTION_SETTINGS,\n            'url' => href_to($this->name, 'settings'),\n            'options' => [\n                'class' => 'item-settings',\n                'icon'  => 'cog'\n            ]\n        ];\n\n        return cmsEventsManager::hook('adminpanel_menu', $menu);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getCtypeMenu($do = 'add', $id = null) {\n\n        $ctype_menu = [\n            [\n                'title' => LANG_CP_CTYPE_SETTINGS,\n                'url'   => href_to($this->name, 'ctypes', ($do == 'add' ? ['add'] : ['edit', $id]))\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_LABELS,\n                'url'      => href_to($this->name, 'ctypes', ['labels', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_FIELDS,\n                'url'      => href_to($this->name, 'ctypes', ['fields', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_PROPS,\n                'url'      => href_to($this->name, 'ctypes', ['props', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_PERMISSIONS,\n                'url'      => href_to($this->name, 'ctypes', ['perms', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_DATASETS,\n                'url'      => href_to($this->name, 'ctypes', ['datasets', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_FILTERS,\n                'url'      => href_to($this->name, 'ctypes', ['filters', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_MODERATORS,\n                'url'      => href_to($this->name, 'ctypes', ['moderators', $id]),\n                'disabled' => ($do === 'add')\n            ],\n            [\n                'title'    => LANG_CP_CTYPE_RELATIONS,\n                'url'      => href_to($this->name, 'ctypes', ['relations', $id]),\n                'disabled' => ($do === 'add')\n            ]\n        ];\n\n        list($ctype_menu, $do, $id) = cmsEventsManager::hook('admin_ctype_menu', [$ctype_menu, $do, $id]);\n\n        if ($do !== 'add') {\n\n            $ctype = $this->model_backend_content->getContentType($id);\n\n            if ($ctype) {\n\n                // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0438 \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043d\u0435\u0433\u043e \u043e\u043f\u0446\u0438\u0438\n                if (cmsCore::isControllerExists($ctype['name'])) {\n                    if (cmsCore::getController($ctype['name'])->options) {\n                        $ctype_menu[] = [\n                            'title'   => LANG_CP_CONTROLLERS_OPTIONS,\n                            'url'     => href_to($this->name, 'controllers', ['edit', $ctype['name'], 'options']),\n                            'options' => [\n                                'icon' => 'cogs'\n                            ]\n                        ];\n                    }\n                }\n\n                list($ctype_menu, $ctype) = cmsEventsManager::hook('admin_' . $ctype['name'] . '_ctype_menu', [$ctype_menu, $ctype]);\n            }\n        }\n\n        return $ctype_menu;\n    }\n\n    public function addCtypeWidgetsPages($ctype){\n\n        $this->model_backend_widgets->addPage(array(\n            'controller' => 'content',\n            'name' => \"{$ctype['name']}.all\",\n            'title_const' => 'LANG_WP_CONTENT_ALL_PAGES',\n            'url_mask' => array(\n                \"{$ctype['name']}\",\n                \"{$ctype['name']}-*\",\n                \"{$ctype['name']}/*\",\n            )\n        ));\n\n        $this->model_backend_widgets->addPage(array(\n            'controller' => 'content',\n            'name' => \"{$ctype['name']}.list\",\n            'title_const' => 'LANG_WP_CONTENT_LIST',\n            'url_mask' => array(\n                \"{$ctype['name']}\",\n                \"{$ctype['name']}-*\",\n                \"{$ctype['name']}/*\",\n            ),\n            'url_mask_not' => array(\n                \"{$ctype['name']}/*/view-*\",\n                \"{$ctype['name']}/*.html\",\n                \"{$ctype['name']}/add\",\n                \"{$ctype['name']}/add?*\",\n                \"{$ctype['name']}/add/%\",\n                \"{$ctype['name']}/addcat\",\n                \"{$ctype['name']}/addcat/%\",\n                \"{$ctype['name']}/editcat/%\",\n                \"{$ctype['name']}/edit/*\",\n            )\n        ));\n\n        $this->model_backend_widgets->addPage(array(\n            'controller' => 'content',\n            'name' => \"{$ctype['name']}.item\",\n            'title_const' => 'LANG_WP_CONTENT_ITEM',\n            'url_mask' => \"{$ctype['name']}/*.html\"\n        ));\n\n        $this->model_backend_widgets->addPage(array(\n            'controller' => 'content',\n            'name' => \"{$ctype['name']}.edit\",\n            'title_const' => 'LANG_WP_CONTENT_ITEM_EDIT',\n            'url_mask' => array(\n                \"{$ctype['name']}/add\",\n                \"{$ctype['name']}/add/%\",\n                \"{$ctype['name']}/edit/*\"\n            )\n        ));\n\n        return true;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getSettingsMenu(){\n\n        $template = new cmsTemplate($this->cms_config->template);\n\n        $menu = [];\n\n        $menu[] = [\n            'title'   => LANG_BASIC_OPTIONS,\n            'url'     => href_to($this->name, 'settings'),\n            'options' => [\n                'icon' => 'tools'\n            ]\n        ];\n        $menu[] = [\n            'title'   => LANG_CP_SCHEDULER,\n            'url'     => href_to($this->name, 'settings', ['scheduler']),\n            'options' => [\n                'icon' => 'clock'\n            ]\n        ];\n        if($template->hasOptions()){\n\n            $is_icon_list_exists = $template->hasIconList();\n\n            $menu[] = [\n                'title'   => LANG_CP_SETTINGS_TEMPLATE_OPTIONS,\n                'url'     => href_to($this->name, 'settings', ['theme', $this->cms_config->template]),\n                'childs_count' => $is_icon_list_exists ? 1 : null,\n                'options' => [\n                    'icon' => 'palette'\n                ]\n            ];\n            if($is_icon_list_exists){\n                $menu[] = [\n                    'title'   => LANG_CP_TEMPLATE_ICONS,\n                    'level' => 2,\n                    'url'     => href_to($this->name, 'settings', ['theme', $this->cms_config->template, 'icon_list']),\n                    'options' => [\n                        'icon' => 'icons'\n                    ]\n                ];\n            }\n        }\n        $menu[] = [\n            'title'   => LANG_CP_CHECK_NESTED,\n            'url'     => href_to($this->name, 'settings', ['check_nested']),\n            'options' => [\n                'icon' => 'tree'\n            ]\n        ];\n\n        return cmsEventsManager::hook('admin_settings_menu', $menu);\n    }\n\n    public function getUserGroupsMenu($action = 'view', $id = 0) {\n\n        return cmsEventsManager::hook('admin_user_groups_menu', [\n            [\n                'title'   => LANG_CONFIG,\n                'url'     => $action !== 'add' ? href_to($this->name, 'users', ['group_edit', $id]) : href_to($this->name, 'users', 'group_add'),\n                'options' => [\n                    'icon' => 'users-cog'\n                ]\n            ],\n            [\n                'title'    => LANG_PERMISSIONS,\n                'disabled' => $action === 'add' ? true : null,\n                'url'      => href_to($this->name, 'users', ['group_perms', $id]),\n                'options'  => [\n                    'icon' => 'key'\n                ]\n            ]\n        ]);\n    }\n\n    public function getAddonsMenu() {\n\n        return cmsEventsManager::hook('admin_addons_menu', [\n            [\n                'title'   => LANG_CP_OFICIAL_ADDONS,\n                'url'     => href_to($this->name, 'addons_list'),\n                'options' => [\n                    'icon' => 'puzzle-piece'\n                ]\n            ],\n            [\n                'title'   => LANG_CP_INSTALL_PACKAGE,\n                'url'     => href_to($this->name, 'install'),\n                'options' => [\n                    'icon' => 'upload'\n                ]\n            ],\n            [\n                'title'   => LANG_CP_SECTION_CONTROLLERS,\n                'url'     => href_to($this->name, 'controllers'),\n                'options' => [\n                    'icon' => 'layer-group'\n                ]\n            ],\n            [\n                'title'   => LANG_EVENTS_MANAGEMENT,\n                'url'     => href_to($this->name, 'controllers', 'events'),\n                'options' => [\n                    'icon' => 'business-time'\n                ]\n            ]\n        ]);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function loadControllerBackend($controller_name, $request){\n\n        $ctrl_file = $this->cms_config->root_path . 'system/controllers/'.$controller_name.'/backend.php';\n\n        if(!file_exists($ctrl_file)){\n            cmsCore::error(sprintf(LANG_CP_ERR_BACKEND_NOT_FOUND, $controller_name));\n        }\n\n        include_once($ctrl_file);\n\n        $controller_class = 'backend'.ucfirst($controller_name);\n\n        $backend = new $controller_class($request);\n\n        $backend->controller_admin = $this;\n\n        return $backend;\n\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function parsePackageManifest(){\n\n        $path = $this->cms_config->upload_path . $this->installer_upload_path;\n\n        $ini_file = $path . '/' . \"manifest.{$this->cms_config->language}.ini\";\n        $ini_file_default = $path . '/manifest.ru.ini';\n\n        if (!file_exists($ini_file)){ $ini_file = $ini_file_default; }\n        if (!file_exists($ini_file)){ return false; }\n\n        $manifest = parse_ini_file($ini_file, true);\n\n        if (file_exists($this->cms_config->upload_path . $this->installer_upload_path . '/' . 'package')){\n            $manifest['contents'] = $this->getPackageContentsList();\n            if($manifest['contents']){\n                if(!empty($manifest['contents']['system']['core'])){\n                    foreach ($manifest['contents']['system']['core'] as $file) {\n                        if(file_exists($this->cms_config->root_path . 'system/core/'.$file)){\n                            $manifest['notice_system_files'] = LANG_INSTALL_NOTICE_SYSTEM_FILE;\n                            break;\n                        }\n                    }\n                }\n                if(!empty($manifest['contents']['system']['config'])){\n                    foreach ($manifest['contents']['system']['config'] as $file) {\n                        if(file_exists($this->cms_config->root_path . 'system/config/'.$file)){\n                            $manifest['notice_system_files'] = LANG_INSTALL_NOTICE_SYSTEM_FILE;\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n\t\t\t$manifest['contents'] = false;\n\t\t}\n\n        if (isset($manifest['info']['image'])){\n            $manifest['info']['image'] = $this->cms_config->upload_host . '/' .\n                                            $this->installer_upload_path . '/' .\n                                            $manifest['info']['image'];\n        }\n\n        if (isset($manifest['info']['image_hint'])){\n            $manifest['info']['image_hint'] = $this->cms_config->upload_path .\n                                            $this->installer_upload_path . '/' .\n                                            $manifest['info']['image_hint'];\n        }\n\n        if((isset($manifest['install']) || isset($manifest['update']))){\n\n            $action = (isset($manifest['install']) ? 'install' : 'update');\n\n            if(isset($manifest[$action]['type']) && isset($manifest[$action]['name'])){\n\n                $manifest['package'] = array(\n                    'type'       => $manifest[$action]['type'],\n                    'type_hint'  => constant('LANG_CP_PACKAGE_TYPE_'.strtoupper($manifest[$action]['type']).'_'.strtoupper($action)),\n                    'action'     => $action,\n                    'name'       => $manifest[$action]['name'],\n                    'controller' => (isset($manifest[$action]['controller']) ? $manifest[$action]['controller'] : null),\n                );\n\n                // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e\n                if(method_exists($this, $manifest[$action]['type'].'Installed')){\n                    $manifest['package']['installed_version'] = call_user_func(array($this, $manifest[$action]['type'].'Installed'), $manifest['package']);\n                }\n            }\n\n\n        }\n\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432 \u0438 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u043e\u0432\n        if(!empty($manifest['package_controllers']['controller'])){\n            $manifest['package_controllers'] = $manifest['package_controllers']['controller'];\n        } else {\n            $manifest['package_controllers'] = false;\n        }\n\n        $dir = $path.'/package/system/controllers';\n\n        if (!$manifest['package_controllers'] && is_dir($dir)) {\n\n            $dir_context = opendir($dir);\n            $controllers = array();\n\n            while ($next = readdir($dir_context)){\n                if (in_array($next, array('.', '..'))){ continue; }\n                if (strpos($next, '.') === 0){ continue; }\n                if (!is_dir($dir.'/'.$next)) { continue; }\n                $controllers[] = $next;\n            }\n\n            if($controllers){\n\n                asort($controllers);\n\n                $manifest['package_controllers'] = $controllers;\n\n            }\n\n        }\n\n        return $manifest;\n\n    }\n\n    public function componentInstalled($manifest_package) {\n\n        $model = new cmsModel();\n\n        return $model->filterEqual('name', $manifest_package['name'])->getFieldFiltered('controllers', 'version');\n\n    }\n\n    public function widgetInstalled($manifest_package) {\n\n        $model = new cmsModel();\n\n        return $model->filterEqual('name', $manifest_package['name'])->\n                filterEqual('controller', $manifest_package['controller'])->\n                getFieldFiltered('widgets', 'version');\n\n    }\n\n    public function getPackageContentsList() {\n\n        $path = $this->cms_config->upload_path . $this->installer_upload_path . '/' . 'package';\n\n        if (!is_dir($path)) {\n            return false;\n        }\n\n        return files_tree_to_array($path);\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0445\u0443\u043a\u043e\u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432\n     * \u0427\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0444\u0430\u0439\u043b\u044b \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 hooks \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\n     *\n     * @return array\n     */\n    public function getControllersFilesEvents() {\n\n        $events = [];\n\n        $controllers = cmsCore::getDirsList('system/controllers', true);\n\n        $index = 0;\n\n        foreach ($controllers as $controller_name) {\n\n            if (!cmsController::enabled($controller_name)) {\n                continue;\n            }\n\n            $ctrl_file = $this->cms_config->root_path . 'system/controllers/' . $controller_name . '/frontend.php';\n            if (!is_readable($ctrl_file)) {\n                continue;\n            }\n\n            $hooks = cmsCore::getFilesList('system/controllers/' . $controller_name . '/hooks', '*.php', true, true);\n            if (!$hooks) {\n                continue;\n            }\n\n            $controller_object = cmsCore::getController($controller_name);\n\n            foreach ($hooks as $event_name) {\n\n                $hook_class_name = 'on' . string_to_camel('_', $controller_name) . string_to_camel('_', $event_name);\n\n                $hook_object = new $hook_class_name($controller_object);\n\n                // \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0443\u043a\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445,\n                // \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0445\u0443\u043a\u0438 \u0434\u043b\u044f CRON \u0438\u043b\u0438 \u0438\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e\n                // \u0421\u0432\u043e\u0439\u0441\u0442\u0432\u043e $disallow_event_db_register \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 \u0445\u0443\u043a\u0430 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u0443\u0435\u0442 \u044d\u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\n                if (empty($hook_object->disallow_event_db_register)) {\n\n                    $events[$controller_name][$index] = $event_name;\n\n                    $index++;\n                }\n            }\n        }\n\n        return $events;\n    }\n\n    public function getEventsDifferences($event_controller = false) {\n\n        $result = [\n            'added'   => [],\n            'deleted' => []\n        ];\n\n        $manifests_events = $this->getControllersFilesEvents();\n        $database_events  = cmsCore::getControllersEvents(false);\n\n        if ($event_controller) {\n            if (isset($manifests_events[$event_controller])) {\n                $manifests_events = [\n                    $event_controller => $manifests_events[$event_controller]\n                ];\n            } else {\n                $manifests_events = [];\n            }\n            if (isset($database_events[$event_controller])) {\n                $database_events = [\n                    $event_controller => $database_events[$event_controller]\n                ];\n            } else {\n                $database_events = [];\n            }\n        }\n\n        // \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435: \u0435\u0441\u0442\u044c \u0432 $manifests_events, \u043d\u0435\u0442 \u0432 $database_events\n        if ($manifests_events) {\n            foreach ($manifests_events as $controller => $events) {\n                foreach ($events as $event) {\n                    if (empty($database_events[$controller])) {\n                        $result['added'][$controller][] = $event;\n                    }\n                    if (!empty($database_events[$controller]) && !in_array($event, $database_events[$controller])) {\n                        $result['added'][$controller][] = $event;\n                    }\n                }\n            }\n        }\n\n        // \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u0435: \u0435\u0441\u0442\u044c \u0432 $database_events, \u043d\u0435\u0442 \u0432 $manifests_events\n        if ($database_events) {\n            foreach ($database_events as $controller => $events) {\n                foreach ($events as $event) {\n                    if (empty($manifests_events[$controller])) {\n                        $result['deleted'][$controller][] = $event;\n                    }\n                    if (!empty($manifests_events[$controller]) && !in_array($event, $manifests_events[$controller])) {\n                        $result['deleted'][$controller][] = $event;\n                    }\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    public function getWidgetOptionsForm($widget_name, $controller_name = false, $options = false, $template_name = false, $allow_set_cacheable = true) {\n\n        if (!$template_name) {\n            $template_name = $this->cms_config->template;\n        }\n\n        $template = new cmsTemplate($template_name);\n\n        $widget_path = cmsCore::getWidgetPath($widget_name, $controller_name);\n\n        $path = $this->cms_config->system_path . $widget_path;\n\n        $form_file = $path . '/options.form.php';\n\n        $form_name = 'widget' . ($controller_name ? \"_{$controller_name}_\" : '_') . \"{$widget_name}_options\";\n\n        $form = cmsForm::getForm($form_file, $form_name, [$options, $template_name]);\n        if (!$form) {\n            $form = new cmsForm();\n        }\n\n        $form->is_tabbed = true;\n\n        //\n        // \u041e\u043f\u0446\u0438\u0438 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430\n        //\n        $design_fieldset_id = $form->addFieldset(LANG_DESIGN, 'design');\n\n        $form->addField($design_fieldset_id, new fieldList('tpl_wrap', [\n            'title' => LANG_WIDGET_WRAPPER_TPL,\n            'hint'  => LANG_WIDGET_WRAPPER_TPL_HINT,\n            'default' => 'wrapper',\n            'generator' => function ($item) use ($template_name) {\n                return ['' => LANG_WIDGET_WRAPPER_TPL_NO, '-1' => LANG_WIDGET_WRAPPER_TPL_CUST] + $this->cms_template->getAvailableTemplatesFiles('widgets', 'wrapper*.tpl.php', $template_name);\n            }\n        ]));\n\n        // \u0421\u0442\u0438\u043b\u0438 \u043e\u0431\u0451\u0440\u0442\u043e\u043a\n        $preset_file = $template->getTplFilePath('widgets/wrapper_styles.php');\n        if ($preset_file) {\n\n            cmsCore::loadTemplateLanguage($template_name);\n\n            $preset_styles = include $preset_file;\n\n            $form->addField($design_fieldset_id, new fieldList('tpl_wrap_style', [\n                'title' => LANG_CP_WIDGETS_STYLE,\n                'generator' => function ($item) use ($preset_styles) {\n                    $items = ['' => ''];\n                    foreach ($preset_styles as $key => $value) {\n                        $items['opt' . $key] = [$key];\n                        foreach ($value as $k => $v) {\n                            $items[$k] = $v;\n                        }\n                    }\n                    return $items;\n                },\n                'visible_depend' => ['tpl_wrap' => ['show' => array_keys($preset_styles)]]\n            ]));\n        }\n\n        $wrap_custom_fields = [\n            'title' => LANG_TITLE,\n            'id'    => 'ID',\n            'body'  => LANG_WIDGET_BODY\n        ];\n\n        $form->addField($design_fieldset_id, new fieldHtml('tpl_wrap_custom', [\n            'title' => LANG_WIDGET_WRAPPER_TPL_CUST,\n            'patterns_hint' => [\n                'patterns' =>  $wrap_custom_fields,\n                'text_panel' => '',\n                'always_show' => true,\n                'text_pattern' =>  LANG_CP_SEOMETA_HINT_PATTERN\n            ],\n            'options' => ['editor' => 'ace'],\n            'visible_depend' => ['tpl_wrap' => ['show' => ['-1']]]\n        ]));\n\n        $form->addField($design_fieldset_id, new fieldList('tpl_body', [\n            'title' => LANG_WIDGET_BODY_TPL,\n            'hint' => sprintf(LANG_WIDGET_BODY_TPL_HINT, $widget_path),\n            'default' => $widget_name,\n            'generator' => function ($item) use ($template_name, $widget_path) {\n                return $this->cms_template->getAvailableTemplatesFiles($widget_path, '*.tpl.php', $template_name);\n            }\n        ]));\n\n        $form->addField($design_fieldset_id, new fieldString('class_wrap', [\n            'title' => LANG_CSS_CLASS_WRAP,\n            'visible_depend' => ['tpl_wrap' => ['hide' => ['-1']]]\n        ]));\n\n        $form->addField($design_fieldset_id, new fieldString('class_title', [\n            'title' => LANG_CSS_CLASS_TITLE,\n            'visible_depend' => ['tpl_wrap' => ['hide' => ['', 'wrapper_plain', '-1']]]\n        ]));\n\n        $form->addField($design_fieldset_id, new fieldString('class', [\n            'title' => LANG_CSS_CLASS_BODY,\n            'visible_depend' => ['tpl_wrap' => ['hide' => ['', 'wrapper_plain', '-1']]]\n        ]));\n\n        //\n        // \u041e\u043f\u0446\u0438\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\n        //\n        $access_fieldset_id = $form->addFieldset(LANG_PERMISSIONS, 'permissions');\n\n        // \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u0430\u043c\n        $form->addField($access_fieldset_id, new fieldListGroups('groups_view', [\n            'title'       => LANG_SHOW_TO_GROUPS,\n            'show_all'    => true,\n            'show_guests' => true\n        ]));\n\n        // \u041d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u0430\u043c\n        $form->addField($access_fieldset_id, new fieldListGroups('groups_hide', [\n            'title'       => LANG_HIDE_FOR_GROUPS,\n            'show_all'    => false,\n            'show_guests' => true\n        ]));\n\n        $form->addField($access_fieldset_id, new fieldListMultiple('languages', [\n            'title'   => LANG_WIDGET_LANG_SELECT,\n            'default' => 0,\n            'show_all' => true,\n            'generator'   => function ($item) {\n                $langs = cmsCore::getLanguages();\n                $items = [];\n                foreach ($langs as $lang) {\n                    $items[$lang] = $lang;\n                }\n                return $items;\n            }\n        ]));\n\n        $form->addField($access_fieldset_id, new fieldListMultiple('device_types', [\n            'title'   => LANG_WIDGET_DEVICE,\n            'default' => 0,\n            'show_all' => true,\n            'items'   => [\n                'tablet'  => LANG_TABLET_DEVICES,\n                'mobile'  => LANG_MOBILE_DEVICES,\n                'desktop' => LANG_DESKTOP_DEVICES\n            ]\n        ]));\n\n        $form->addField($access_fieldset_id, new fieldListMultiple('template_layouts', [\n            'title'   => LANG_WIDGET_TEMPLATE_LAYOUT,\n            'default' => 0,\n            'show_all' => true,\n            'generator' => function ($item) use ($template_name) {\n                $layouts = $this->cms_template->getAvailableTemplatesFiles('', '*.tpl.php', $template_name);\n                $items = [];\n                if ($layouts) {\n                    foreach ($layouts as $layout) {\n                        if ($layout == 'admin') {\n                            continue;\n                        }\n                        $items[$layout] = string_lang('LANG_' . $template_name . '_THEME_LAYOUT_' . $layout, $layout);\n                    }\n                }\n                return $items;\n            }\n        ]));\n\n        //\n        // \u041e\u043f\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n        //\n        $title_fieldset_id = $form->addFieldsetToBeginning(LANG_BASIC_OPTIONS, 'basic_options');\n\n        // ID \u0432\u0438\u0434\u0436\u0435\u0442\u0430\n        $form->addField($title_fieldset_id, new fieldNumber('id', [\n            'is_hidden' => true\n        ]));\n\n        $form->addField($title_fieldset_id, new fieldString('template', [\n            'is_hidden' => true,\n            'default' => $template_name\n        ]));\n\n        // \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0432\u0438\u0434\u0436\u0435\u0442\u0430\n        $form->addField($title_fieldset_id, new fieldString('title', [\n            'title' => LANG_TITLE,\n            'can_multilanguage' => true,\n            'multilanguage_params' => [\n                'is_table_field' => true,\n                'table' => 'widgets_bind'\n            ],\n            'rules' => [\n                ['required'],\n                ['min_length', 3],\n                ['max_length', 128]\n            ]\n        ]));\n\n        // \u0424\u043b\u0430\u0433 \u043f\u043e\u043a\u0430\u0437\u0430 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\n        $form->addField($title_fieldset_id, new fieldCheckbox('is_title', [\n            'title'   => LANG_SHOW_TITLE,\n            'default' => true\n        ]));\n\n        // \u0424\u043b\u0430\u0433 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0432\u0438\u0434\u0436\u0435\u0442\u043e\u043c\n        $form->addField($title_fieldset_id, new fieldCheckbox('is_tab_prev', [\n            'title'   => LANG_WIDGET_TAB_PREV,\n            'default' => false\n        ]));\n\n        // \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c\n        if ($this->cms_config->cache_enabled && $allow_set_cacheable) {\n            $form->addField($title_fieldset_id, new fieldCheckbox('is_cacheable', [\n                'title' => LANG_CP_CACHE\n            ]));\n        }\n\n        // \u0421\u0441\u044b\u043b\u043a\u0438 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435\n        $form->addField($title_fieldset_id, new fieldText('links', [\n            'title' => LANG_WIDGET_TITLE_LINKS,\n            'hint'  => LANG_WIDGET_TITLE_LINKS_HINT,\n            'can_multilanguage' => true,\n            'multilanguage_params' => [\n                'is_table_field' => true,\n                'table' => 'widgets_bind'\n            ],\n            'is_strip_tags' => true\n        ]));\n\n        return cmsEventsManager::hook('widget_options_full_form', $form);\n    }\n\n    public function getAddonsMethod($name, $params = [], $cacheable = false) {\n\n        if (!function_exists('curl_init')) {\n            return false;\n        }\n\n        $cache_file = cmsConfig::get('cache_path') . md5($name . serialize($params)) . '_addons.dat';\n\n        if ($cacheable && is_readable($cache_file)) {\n\n            $timedif = (time() - filemtime($cache_file));\n\n            if ($timedif < 10800) { // \u0442\u0440\u0438 \u0447\u0430\u0441\u0430 \u043a\u044d\u0448\u0430\n                $result = include $cache_file;\n\n                if ($result) {\n                    return $result;\n                } else {\n                    unlink($cache_file);\n                }\n            } else {\n                unlink($cache_file);\n            }\n        }\n\n        $curl = curl_init();\n\n        curl_setopt($curl, CURLOPT_URL, self::addons_api_point . $name . '?api_key=' . self::addons_api_key . '&' . http_build_query($params, '', '&'));\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_HEADER, false);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 5);\n        curl_setopt($curl, CURLOPT_HTTPGET, true);\n\n        $_data = curl_exec($curl);\n        if (!$_data) {\n            return false;\n        }\n\n        $data = json_decode($_data, true);\n\n        curl_close($curl);\n\n        if ($data === false) {\n            return json_last_error_msg();\n        }\n\n        if ($cacheable) {\n            file_put_contents($cache_file, '<?php return ' . var_export($data, true) . ';');\n        }\n\n        return $data;\n    }\n\n    public function getSchemeColForm($do, $row, $col = []) {\n\n        $form = $this->getForm('widgets_cols', [$do, (!empty($col['id']) ? $col['id'] : 0), $row]);\n\n        $col_scheme_options = cmsEventsManager::hookAll('admin_col_scheme_options', ['add', $row, []]);\n\n        if ($col_scheme_options) {\n            foreach ($col_scheme_options as $controller_name => $fields) {\n                foreach ($fields as $field) {\n                    $form->addField('basic', $field);\n                }\n            }\n        }\n\n        return $form;\n    }\n\n    public function getSchemeRowForm($do, $row, $col = []) {\n\n        $form = $this->getForm('widgets_rows', [$do]);\n\n        $row_scheme_options = cmsEventsManager::hookAll('admin_row_scheme_options', [$do, $row, $col]);\n\n        if ($row_scheme_options) {\n            foreach ($row_scheme_options as $controller_name => $fields) {\n                foreach ($fields as $field) {\n                    $form->addField('basic', $field);\n                }\n            }\n        }\n\n        return $form;\n    }\n\n}\n", "<?php\n\nclass actionModerationLogs extends cmsAction {\n\n    public function run($target_controller = null, $target_subject = null, $target_id = null, $moderator_id = null) {\n\n        cmsCore::loadAllControllersLanguages();\n\n        $grid = $this->loadDataGrid('logs');\n\n        $url             = href_to($this->root_url, 'logs');\n        $sub_url         = [];\n        $url_query       = [];\n        $additional_h1   = [];\n        $subj_controller = null;\n\n        $action         = $this->request->get('action', -1);\n        $only_to_delete = $this->request->get('only_to_delete', 0);\n\n        if ($action > -1) {\n\n            $this->model->filterEqual('action', $action);\n\n            if ($only_to_delete) {\n\n                $this->model->filterNotNull('date_expired');\n\n                $url_query['only_to_delete'] = $only_to_delete;\n            }\n\n            $additional_h1[] = string_lang('LANG_MODERATION_ACTION_' . $action);\n\n            $url_query['action'] = $action;\n        }\n\n        if (!empty($target_controller)) {\n\n            $subj_controller = cmsCore::getController($target_controller);\n\n            $this->model->filterEqual('target_controller', $target_controller);\n\n            $sub_url[] = $target_controller;\n\n            if (!empty($target_subject)) {\n\n                $ctype = $subj_controller->getContentTypeForModeration($target_subject);\n\n                if ($ctype) {\n                    $target_subject = $ctype['name'];\n                } else {\n                    return cmsCore::error404();\n                }\n\n                $this->model->filterEqual('target_subject', $target_subject);\n\n                $sub_url[] = $target_subject;\n\n                if ($ctype) {\n                    $additional_h1[] = $ctype['title'];\n                }\n\n                if (!empty($target_id)) {\n\n                    $this->model->filterEqual('target_id', $target_id);\n\n                    $sub_url[] = $target_id;\n\n                    $this->model->lockFilters();\n\n                    $item = $this->model->getItem('moderators_logs', function ($item, $model) {\n                        $item['data'] = cmsModel::yamlToArray($item['data']);\n                        return $item;\n                    });\n\n                    if ($item) {\n                        $additional_h1[] = $item['data']['title'];\n                    }\n\n                    $this->model->unlockFilters();\n                }\n            }\n        }\n\n        if (!empty($moderator_id)) {\n\n            $this->model->filterEqual('moderator_id', $moderator_id);\n\n            if (count($sub_url) == 3) {\n                $sub_url[] = $moderator_id;\n            } elseif (count($sub_url) == 2) {\n                $sub_url[] = 0;\n                $sub_url[] = $moderator_id;\n            } elseif (count($sub_url) == 1) {\n                $sub_url[] = 0;\n                $sub_url[] = 0;\n                $sub_url[] = $moderator_id;\n            } else {\n                $sub_url[] = 0;\n                $sub_url[] = 0;\n                $sub_url[] = 0;\n                $sub_url[] = $moderator_id;\n            }\n\n            $user = cmsCore::getModel('users')->getuser($moderator_id);\n\n            if ($user) {\n                $additional_h1[] = $user['nickname'];\n            }\n        }\n\n        if ($this->request->isAjax()) {\n\n            $filter     = [];\n            $filter_str = $this->request->get('filter', '');\n\n            if ($filter_str) {\n                parse_str($filter_str, $filter);\n                $grid->applyGridFilter($this->model, $filter, 'moderators_logs');\n            }\n\n            $total = $this->model->getCount('moderators_logs');\n\n            $this->model->joinUserLeft('moderator_id');\n\n            $data = $this->model->get('moderators_logs', function ($item, $model) use ($subj_controller) {\n\n                $item['data'] = cmsModel::yamlToArray($item['data']);\n\n                $item['controller_title'] = string_lang($item['target_controller'] . '_CONTROLLER');\n\n                $item['subject_title'] = $item['controller_title'];\n\n                if ($subj_controller !== null) {\n\n                    $ctype = $subj_controller->getContentTypeForModeration($item['target_subject']);\n\n                    $item['subject_title'] = $ctype['title'];\n                }\n\n                return $item;\n            }) ?: [];\n\n            return $this->cms_template->renderJSON($grid->makeGridRows($data, $total));\n        }\n\n        if ($additional_h1) {\n            $this->cms_template->setPageH1($additional_h1);\n        }\n\n        $this->model->resetFilters();\n\n        return $this->cms_template->render('backend/logs', [\n            'grid'      => $grid,\n            'sub_url'   => $sub_url,\n            'url_query' => $url_query,\n            'url'       => $url . ($sub_url ? '/' . implode('/', $sub_url) : '') . (($action > -1) ? '?' . http_build_query($url_query) : '')\n        ]);\n    }\n}\n", "<?php\n/**\n * \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0433\u0440\u0438\u0434\u0430\u043c (\u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445)\n */\nclass cmsGrid {\n\n    /**\n     * \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0433\u0440\u0438\u0434\u0430\n     *\n     * @var array\n     */\n    private $grid = [\n        // URL, \u043e\u0442\u043a\u0443\u0434\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435\n        'source_url' => '',\n        // \u041e\u043f\u0446\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430\n        'options' => [\n            'order_by'        => 'id',  // \u041f\u043e\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n            'order_to'        => 'asc', // \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n            'show_id'         => true,  // \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c id \u0437\u0430\u043f\u0438\u0441\u0438\n            'is_sortable'     => true,  // \u041c\u043e\u0436\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n            'is_filter'       => true,  // \u041f\u043e\u043b\u044f \u0433\u0440\u0438\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c\n            'advanced_filter' => false, // URL \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n            'is_pagination'   => true,  // \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e\n            'perpage'         => 30,    // \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n            'is_toolbar'      => true,  // \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u0443\u043b\u0431\u0430\u0440\n            'is_draggable'    => false, // \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043c\u044b\u0448\u044c\u044e\n            'drag_save_url'   => '',    // URL \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0434\u0440\u0430\u0433-\u044d\u043d-\u0434\u0440\u043e\u043f\n            'is_selectable'   => false, // \u0421\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f\n            /**\n             * select_actions - \u044d\u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043d\u0430\u0434 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438\n             * \u041f\u0440\u0438\u043c\u0435\u0440 \u0432 system/controllers/admin/grids/grid_content_items.php\n                'title'   => \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435,\n                'action'  => submit || open,\n                'confirm' => \u0424\u0440\u0430\u0437\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f,\n                'url'     => URL \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438\n             */\n            'select_actions'  => false\n        ],\n        // \u041a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n        'columns' => [],\n        // \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043d\u0430\u0434 \u0437\u0430\u043f\u0438\u0441\u044c\u044e\n        'actions' => [],\n        // \u0424\u0438\u043b\u044c\u0442\u0440 \u0437\u0430\u043f\u0438\u0441\u0435\u0439. \u041d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0439\u0442\u0435 \u0435\u0433\u043e \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0433\u0440\u0438\u0434\u0430\n        'filter'  => []\n    ];\n\n    /**\n     * \u0412\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n     * @var array\n     */\n    private $default_column = [\n        'tooltip'           => '',  // \u0422\u0435\u043a\u0441\u0442 \u0432\u0441\u043f\u043b\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438\n        'tooltip_handler'   => null,  // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0430\u044f \u0442\u0435\u043a\u0441\u0442 \u0432\u0441\u043f\u043b\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438\n        'switchable'        => false, // \u041c\u043e\u0436\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f/\u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f\n        'disable'           => false, // \u0415\u0441\u043b\u0438 \u043c\u043e\u0436\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f/\u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n        'sortable'          => true,  // \u041c\u043e\u0436\u0435\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u043d\u0435\u0439\n        'title'             => '',    // \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n        'class'             => '',    // CSS \u043a\u043b\u0430\u0441\u0441\n        'key_alias'         => '',    // \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u043e\u043b\u044f\n        'handler'           => null,  // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n        'flag'              => false, // \u041a\u043e\u043b\u043e\u043d\u043a\u0430 - \u0444\u043b\u0430\u0433 (\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430/\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0430)\n        'flag_on'           => null,  // \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c, \u0447\u0442\u043e\u0431\u044b \u0444\u043b\u0430\u0436\u043e\u043a \u0431\u044b\u043b \u0432\u043a\u043b\u044e\u0447\u0435\u043d\n        'flag_handler'      => null,  // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0444\u043b\u0430\u0433\u0430\n        'flag_toggle'       => '',    // URL \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0444\u043b\u0430\u0433\u0430\n        'href'              => '',    // \u0421\u0441\u044b\u043b\u043a\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n        'href_handler'      => null,  // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0435\u0441\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0442\u043e \u0441\u0441\u044b\u043b\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f\n        'order_by'          => '',    // \u0418\u043c\u044f \u043f\u043e\u043b\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n        'filter_by'         => '',    // \u0418\u043c\u044f \u043f\u043e\u043b\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c\n        'filter'            => '',    // \u0422\u0438\u043f \u0444\u0438\u043b\u044c\u0442\u0440\u0430, \u0441\u043c. applyGridFilter\n        'filter_select'     => ['items' => []], // \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f select \u0442\u0435\u0433\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\n        'filter_attributes' => [],    // \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\n        'editable' => [               // \u041c\u043e\u0436\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n            'rules'            => [],      // \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u0430\u0432\u0438\u043b \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438\n            'renderer'         => null,    // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 vue \u043f\u043e\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e form-input\n            'items'            => null,    // \u041c\u0430\u0441\u0441\u0438\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u0441\u0435\u043b\u0435\u043a\u0442\u0430, \u0435\u0441\u043b\u0438 renderer form-select\n            'language_context' => false,   // \u0415\u0441\u043b\u0438 \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043e, \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043a\u0430\u0442\u044c \u044f\u0437\u044b\u043a\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043b\u043e\u043a\u0430\u043b\u0438\n            'save_action'      => '',      // URL \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f\n            'attributes'       => []       // \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n        ]\n    ];\n\n    /**\n     * \u041a\u043e\u043b\u043e\u043d\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c\n     *\n     * @var ?array\n     */\n    private $visible_columns = null;\n\n    /**\n     * \u0418\u043c\u0435\u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043a\u043b\u044e\u0447\u0438, \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430/\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     *\n     * @var array\n     */\n    private $visible_columns_names = [];\n\n    /**\n     * \u041a\u043e\u043b\u043e\u043d\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0442\u044c\n     *\n     * @var ?array|boolean\n     */\n    private $switchable_columns = null;\n\n    /**\n     * \u041c\u0430\u043f\u043f\u0438\u043d\u0433 \u0438\u043c\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430 => \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (vuejs) \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438\n     * @var array\n     */\n    private $filter_component_map = [\n        'range_date' => 'form-date-range',\n        'range'      => 'form-range',\n        'zero'       => 'form-checkbox',\n        'nn'         => 'form-checkbox',\n        'ni'         => 'form-checkbox',\n        'in'         => 'form-multiselect',\n        'filled'     => 'form-select',\n        'exact'      => 'form-select',\n        'like'       => 'form-input',\n        'ip'         => 'form-input',\n        'date'       => 'form-date'\n    ];\n\n    /**\n     * \u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\n     * @var cmsController\n     */\n    private $controller;\n\n    /**\n     * \u0418\u043c\u044f \u0433\u0440\u0438\u0434\u0430\n     * @var string\n     */\n    private $grid_name = '';\n\n    /**\n     * \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0433\u0440\u0438\u0434\u0430\n     * @var array\n     */\n    private $grid_params = [];\n\n    /**\n     * \u0413\u0440\u0438\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d?\n     * @var boolean\n     */\n    private $is_loaded = false;\n\n    /**\n     * \u0422\u0435\u043a\u0441\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n     * @var ?string\n     */\n    private $error = null;\n\n    /**\n     *\n     * @param cmsController|cmsAction $controller \u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 (cmsAction \u0441 \u043c\u0430\u0433\u0438\u0435\u0439 \u0442\u043e\u0436\u0435), \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0438\u0434\n     * @param string $grid_name \u0418\u043c\u044f \u0433\u0440\u0438\u0434\u0430\n     * @param ?array $grid_params \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n     */\n    public function __construct($controller, $grid_name, $grid_params = null) {\n\n        $this->controller = $controller;\n\n        $this->grid_name = $grid_name;\n\n        if($grid_params) {\n\n            $this->grid_params = !is_array($grid_params) ? [$grid_params] : $grid_params;\n        }\n\n        $this->is_loaded = $this->load();\n    }\n\n    public function &__get($name) {\n        return $this->grid[$name];\n    }\n\n    public function __set($name, $value) {\n        $this->grid[$name] = $value;\n    }\n\n    public function __isset($name) {\n        return isset($this->grid[$name]);\n    }\n\n    public function __unset($name) {\n        unset($this->grid[$name]);\n    }\n\n    /**\n     * \u0413\u0440\u0438\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d?\n     *\n     * @return boolean\n     */\n    public function isLoaded() {\n        return $this->is_loaded;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043e\u0448\u0438\u0431\u043a\u0443\n     *\n     * @return ?string\n     */\n    public function getError() {\n        return $this->error;\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0433\u0440\u0438\u0434\u0430\n     *\n     * @return bool\n     */\n    private function load() {\n\n        $grid_file = $this->controller->root_path . 'grids/grid_' . $this->grid_name . '.php';\n\n        if (!is_readable($grid_file)) {\n\n            $this->error = ERR_FILE_NOT_FOUND . ': '. str_replace(PATH, '', $grid_file);\n\n            return false;\n        }\n\n        include_once $grid_file;\n\n        $grid_func_name = 'grid_' . $this->grid_name;\n\n        if(!function_exists($grid_func_name)){\n\n            $this->error = $grid_func_name.' function not found in '. str_replace(PATH, '', $grid_file);\n\n            return false;\n        }\n\n        $args = [$this->controller];\n\n        foreach ($this->grid_params as $p) {\n            $args[] = $p;\n        }\n\n        $grid = call_user_func_array($grid_func_name, $args);\n\n        foreach ($grid as $key => $data) {\n\n            $this->grid[$key] = is_array($data) ? array_merge(($this->grid[$key] ?? []), $data) : $data;\n        }\n\n        // \u0424\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n        $this->setDefaultFilter();\n\n        $this->grid = cmsEventsManager::hook('grid_' . $this->controller->name . '_' . $this->grid_name, $this->grid);\n\n        if($this->grid['options']['select_actions']){\n            array_unshift($this->grid['options']['select_actions'], [\n                'title' => LANG_SELECTED_ACTIONS,\n                'url'   => ''\n            ]);\n        }\n\n        list($this->grid, $args) = cmsEventsManager::hook(\n            'grid_' . $this->controller->name . '_' . $this->grid_name . '_args',\n            [$this->grid, $args]\n        );\n\n        return true;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0433\u0440\u0438\u0434\u0430 \u0446\u0435\u043b\u0438\u043a\u043e\u043c\n     * @return array\n     */\n    public function getGrid() {\n        return $this->grid;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0433\u0440\u0438\u0434\u0430\n     *\n     * @param string $path \u041f\u0443\u0442\u044c \u0434\u043e \u043a\u043b\u044e\u0447\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 columns:name:title\n     * @return mixed\n     */\n    public function getGridValue($path) {\n        return array_value_recursive($path, $this->grid);\n    }\n\n    /**\n     * \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     * \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043a\u0430\u043a \u0432 \u0444\u043e\u0440\u043c\u0430\u0445\n     *\n     * @param string $field_name\n     * @param mixed $value\n     * @return boolean\n     */\n    public function validateColumnValue($field_name, $value) {\n\n        $rules = $this->grid['columns'][$field_name]['editable']['rules'] ?? [];\n\n        if(!$rules){\n            return true;\n        }\n\n        foreach ($rules as $rule) {\n\n            if (!$rule) { continue; }\n\n            $validate_function = \"validate_{$rule[0]}\";\n\n            $rule[] = $value;\n\n            unset($rule[0]);\n\n            $result = call_user_func_array([$this->controller, $validate_function], $rule);\n\n            // \u043e\u0448\u0438\u0431\u043a\u0430 \u0443\u0436\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\n            if ($result !== true) {\n                return $result;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0430\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0438\u0434\u0438\u043c\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     */\n    private function getVisibleColumns() {\n\n        if ($this->visible_columns === null) {\n\n            foreach ($this->grid['columns'] as $name => $column) {\n\n                $is_disabled = false;\n\n                if (!empty($column['disable'])) {\n                    $is_disabled = true;\n                }\n                if (array_key_exists($name, $this->visible_columns_names)) {\n                    $is_disabled = !$this->visible_columns_names[$name];\n                }\n                if(empty($column['switchable'])){\n                    $is_disabled = false;\n                }\n                if ($is_disabled) {\n                    continue;\n                }\n\n                $this->visible_columns[$name] = $column;\n            }\n        }\n\n        return $this->visible_columns;\n    }\n\n    /**\n     * \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     *\n     * @return array\n     */\n    public function getSwitchableColumns() {\n\n        if ($this->switchable_columns === null) {\n\n            $columns = [];\n\n            foreach ($this->grid['columns'] as $key => $item) {\n                if (!empty($item['switchable'])) {\n                    $columns[$key] = $item['title'];\n                }\n            }\n\n            $this->switchable_columns = $columns ?: false;\n        }\n\n        return $this->switchable_columns;\n    }\n\n    /**\n     * \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430\n     *\n     * @param string $name \u0418\u043c\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     * @return void\n     */\n    public function disableColumn($name) {\n        $this->visible_columns_names[$name] = false;\n    }\n\n    /**\n     * \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430\n     *\n     * @param string $name \u0418\u043c\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n     * @return void\n     */\n    public function enableColumn($name) {\n        $this->visible_columns_names[$name] = true;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u0437 \u0411\u0414 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n     *\n     * @return void\n     */\n    private function setDefaultFilter() {\n\n        $this->grid['filter'] = [\n            'page' => 1,\n            'columns' => [],\n            'advanced_filter' => '',\n            'perpage' => $this->grid['options']['perpage']\n        ];\n\n        if ($this->grid['options']['order_by']) {\n            $this->grid['filter']['order_by'] = $this->grid['options']['order_by'];\n        }\n\n        if ($this->grid['options']['order_to']) {\n            $this->grid['filter']['order_to'] = $this->grid['options']['order_to'];\n        }\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0438\u043b\u044c\u0442\u0440\n     *\n     * @param array $filter\n     * @return void\n     */\n    public function addToFilter($filter) {\n        $this->grid['filter'] = array_replace_recursive($this->grid['filter'], $filter);\n    }\n\n    /**\n     * \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043a \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n     *\n     * @param cmsModel $model \u041e\u0431\u044a\u0435\u043a\u0442 \u043c\u043e\u0434\u0435\u043b\u0438, \u0433\u0434\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0438\n     * @param array $filter \u041c\u0430\u0441\u0441\u0438\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\n     * @param array $table_name \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u0433\u0434\u0435 \u0438\u0449\u0435\u043c \u043f\u043e\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\n     * @return cmsModel\n     */\n    public function applyGridFilter(cmsModel $model, $filter, $table_name) {\n\n        // \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443\n        if (!empty($filter['order_by']) && !empty($filter['order_to'])) {\n\n            // \u0415\u0441\u0442\u044c \u043b\u0438 \u0432\u043e\u043e\u0431\u0449\u0435 \u0442\u0430\u043a\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n            if(empty($this->grid['columns'][$filter['order_by']])){\n                $filter['order_by'] = $this->grid['options']['order_by'];\n            }\n\n            $order_by = $filter['order_by'];\n\n            // \u0415\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n            if (!empty($this->grid['columns'][$order_by]['order_by'])) {\n                $order_by = $this->grid['columns'][$order_by]['order_by'];\n            }\n\n            $model->orderBy($order_by, $filter['order_to']);\n        }\n\n        // \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443\n        if (!empty($filter['page'])) {\n\n            $filter['perpage'] = !empty($filter['perpage']) ? (int) $filter['perpage'] : 30;\n            $filter['page']    = (int) ($filter['page'] <= 0 ? 1 : $filter['page']);\n\n            $model->limitPage($filter['page'], $filter['perpage']);\n        }\n\n        // \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430\n        if(!$this->grid['options']['is_pagination']){\n            $model->limit(false);\n        }\n\n        //\n        // \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n        // \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u043b\u0438 \u0444\u0438\u043b\u044c\u0442\u0440 \u0434\u043b\u044f \u043d\u0435\u0435\n        //\n        foreach ($this->getVisibleColumns() as $field => $column) {\n\n            if (empty($column['filter']) ||\n                    $column['filter'] === 'none' ||\n                    !array_key_exists($field, $filter) ||\n                    is_empty_value($filter[$field])) {\n                continue;\n            }\n\n            if (!empty($column['filter_by'])) {\n                $filter_field = $column['filter_by'];\n            } else {\n                $filter_field = $field;\n            }\n\n            switch ($column['filter']) {\n                case 'range_date':\n                    if (isset($filter[$field]['from']) && !is_empty_value($filter[$field]['from'])) {\n                        $date_from = date('Y-m-d', strtotime($filter[$field]['from']));\n                        $model->filterGtEqual($filter_field, $date_from);\n                    }\n                    if (isset($filter[$field]['to']) && !is_empty_value($filter[$field]['to'])) {\n                        $date_to = date('Y-m-d', strtotime($filter[$field]['to']));\n                        $model->filterLtEqual($filter_field, $date_to);\n                    }\n                case 'range':\n                    if (isset($filter[$field]['from']) && !is_empty_value($filter[$field]['from'])) {\n                        $model->filterGtEqual($filter_field, $filter[$field]['from']);\n                    }\n                    if (isset($filter[$field]['to']) && !is_empty_value($filter[$field]['to'])) {\n                        $model->filterLtEqual($filter_field, $filter[$field]['to']);\n                    }\n                    break;\n                case 'zero':\n                    if($filter[$field]) {\n                        $model->filterEqual($filter_field, 0);\n                    }\n                case 'nn':\n                    if($filter[$field]) {\n                        $model->filterNotNull($filter_field);\n                    }\n                    break;\n                case 'ni':\n                    if($filter[$field]) {\n                        $model->filterIsNull($filter_field);\n                    }\n                    break;\n                case 'in': $model->filterIn($filter_field, !is_array($filter[$field]) ? explode(',', $filter[$field]) : $filter[$field]);\n                    break;\n                case 'filled': ($filter[$field] ? $model->filterNotNull($filter_field) : $model->filterIsNull($filter_field));\n                    break;\n                case 'exact': $model->filterEqual($filter_field, $filter[$field]);\n                    break;\n                case 'ip': $model->filterEqual($filter_field, string_iptobin($filter[$field]), true);\n                    break;\n                case 'like': $model->filterLike($filter_field, \"%{$filter[$field]}%\");\n                    break;\n                case 'date':\n                    $date = date('Y-m-d', strtotime($filter[$field]));\n                    $model->filterLike($filter_field, \"%{$date}%\");\n                    break;\n            }\n        }\n\n        // \u0417\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c\n        $this->grid['filter'] = array_merge($this->grid['filter'], $filter);\n\n        // \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\n        if (!empty($filter['advanced_filter']) && is_string($filter['advanced_filter'])) {\n\n            $dataset_filters = [];\n\n            parse_str($filter['advanced_filter'], $dataset_filters);\n\n            if (!$model->applyDatasetFilters($dataset_filters, true, [], $table_name)) {\n\n                $this->grid['filter']['advanced_filter'] = '';\n            }\n        }\n\n        return $model;\n    }\n\n    /**\n     * \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     *\n     * @param array|false $dataset \u0414\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0431\u0430\u0437\u044b\n     * @param integer $total \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     * @return array\n     */\n    public function makeGridRows($dataset = false, $total = 0) {\n\n        $rows = [];\n\n        if(is_array($dataset)){\n            foreach($dataset as $row){\n                $rows[] = [\n                    'columns'  => $this->makeRowColumns($row),\n                    'id'       => $row['id'],\n                    'selected' => false,\n                    'edited'   => false\n                ];\n            }\n        }\n\n        return [\n            'dragging'   => -1,\n            'is_loading' => false,\n            'need_load'  => $dataset === false,\n            'source_url' => $this->grid['source_url'] !== '' ? $this->grid['source_url'] : cmsCore::getInstance()->uri_absolute,\n            'options'    => $this->grid['options'],\n            'filter'     => $this->grid['filter'],\n            'rows'       => $rows,\n            'total'      => $total ? $total : count(($dataset ?: [])),\n            'switchable' => [\n                'title'   => LANG_GRID_COLYMNS_SETTINGS,\n                'columns' => $this->getSwitchableColumns()\n            ],\n            'columns'    => $this->makeColumns()\n        ];\n    }\n\n    /**\n     * \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     *\n     * @param array $row\n     * @return array\n     */\n    private function makeRowColumns($row) {\n\n        $columns = [];\n\n        $is_set_dragged_class = false;\n\n        foreach ($this->getVisibleColumns() as $field => $column) {\n\n            if (isset($column['key_alias'])){\n                $field = $column['key_alias'];\n            }\n\n            $class = [];\n\n            if (!empty($column['class'])) {\n                $class[] = $column['class'];\n            }\n\n            if ($field === 'id') {\n                if (!$this->grid['options']['show_id']) {\n\n                    $class[] = 'd-none';\n                } else {\n\n                    $class[] = 'dragged_handle';\n\n                    $is_set_dragged_class = true;\n                }\n            } else if (!$is_set_dragged_class) {\n\n                $class[] = 'dragged_handle';\n\n                $is_set_dragged_class = true;\n            }\n\n            $row_column = [\n                'row_id'   => $row['id'],\n                'tooltip'  => $column['tooltip'] ?? '',\n                'name'     => $field,\n                'value'    => '',\n                'class'    => implode(' ', $class),\n                'editable' => $this->getEditableParams($row, $column, $field),\n                'href'     => false,\n                'renderer' => $column['renderer'] ?? 'basic' // basic, flag, html, actions\n            ];\n\n            // \u042d\u0442\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0440\u0435\u043d\u0434\u0435\u0440\u0435\n            if (!array_key_exists($field, $row)) {\n\n                $columns[] = $row_column;\n\n                continue;\n            }\n\n            // \u0442\u0443\u043b\u0442\u0438\u043f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n            if (isset($column['tooltip_handler'])) {\n                $row_column['tooltip'] = $column['tooltip_handler']($row);\n            }\n\n            // null - \u0437\u043d\u0430\u0447\u0438\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n            $row_column['value'] = $row[$field] ?? '';\n\n            if (isset($column['href_handler'])) {\n                $is_active_href = $column['href_handler']($row);\n            } else {\n                $is_active_href = true;\n            }\n\n            // \u0435\u0441\u043b\u0438 \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0443, \u0442\u043e \u043f\u0430\u0440\u0441\u0438\u043c \u0448\u0430\u0431\u043b\u043e\u043d\n            // \u0430\u0434\u0440\u0435\u0441\u0430, \u0437\u0430\u043c\u0435\u043d\u044f\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n            if (isset($column['href'])) {\n                if ($is_active_href) {\n                    $row_column['href'] = string_replace_keys_values_extended($column['href'], $row);\n                }\n            }\n\n            // \u0422\u0438\u043f \u0444\u043b\u0430\u0433\n            if (!empty($column['flag'])) {\n\n                if (isset($column['flag_handler'])) {\n\n                    $row_column['value'] = $column['flag_handler']($row_column['value'], $row);\n                }\n\n                // \u0415\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \"\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0441\u0442\u0438\" \u0444\u043b\u0430\u0433\u0430\n                if (isset($column['flag_on'])) {\n\n                    $row_column['value'] = $row_column['value'] == $column['flag_on'] ? 1 : 0;\n                } else {\n\n                    $row_column['value'] = (int) $row_column['value'];\n                }\n\n                // URL \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0444\u043b\u0430\u0433\u0430\n                $flag_toggle_url = $column['flag_toggle'] ?? false;\n                if ($flag_toggle_url) {\n                    $flag_toggle_url = string_replace_keys_values($flag_toggle_url, $row);\n                }\n\n                $row_column['flag_class'] = $column['flag'] === true ? 'flag' : $column['flag'];\n                $row_column['href']       = $is_active_href ? $flag_toggle_url : false;\n                $row_column['confirm']    = $column['flag_confirm'] ?? false;\n                $row_column['renderer']   = 'flag';\n\n                $columns[] = $row_column;\n\n                continue;\n            }\n\n            // \u0415\u0441\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u0432\u0435\u0440\u043d\u0451\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0439 HTML\n            if (isset($column['handler'])) {\n\n                $row_column['renderer'] = 'html';\n                $row_column['value']    = $column['handler']($row_column['value'], $row);\n\n                $columns[] = $row_column;\n\n                continue;\n            }\n\n            // \u041c\u0430\u0441\u0441\u0438\u0432\u044b \u043e\u0442\u0434\u0430\u0451\u043c \u043d\u0430 \u043e\u0442\u043a\u0443\u043f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\n            if (is_array($row_column['value'])) {\n\n                if (isset($column['renderer'])) {\n\n                    // \u041c\u043e\u0436\u043d\u043e \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 (vue) \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n                    $row_column['renderer'] = $column['renderer'];\n\n                } else {\n                    $row_column['value'] = '!error grid value!';\n                }\n            }\n\n            $columns[] = $row_column;\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439, \u0442\u043e \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0441\u0441\u044b\u043b\u043e\u043a\n        if ($this->grid['actions']) {\n\n            $row_column = [\n                'row_id'   => $row['id'],\n                'value'    => [],\n                'editable' => false,\n                'class'    => false,\n                'href'     => false,\n                'renderer' => 'actions'\n            ];\n\n            foreach($this->grid['actions'] as $action){\n\n                if (isset($action['handler'])) {\n\n                    $is_active = $action['handler']($row);\n\n                    unset($action['handler']);\n                } else {\n                    $is_active = true;\n                }\n\n                if (!$is_active) {\n                    continue;\n                }\n\n                // \u043f\u0430\u0440\u0441\u0438\u043c \u0448\u0430\u0431\u043b\u043e\u043d \u0430\u0434\u0440\u0435\u0441\u0430, \u0437\u0430\u043c\u0435\u043d\u044f\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n                if (isset($action['href'])){\n                    $action['href'] = string_replace_keys_values_extended($action['href'], $row);\n                }\n\n                // \u043f\u0430\u0440\u0441\u0438\u043c \u0448\u0430\u0431\u043b\u043e\u043d \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f, \u0437\u0430\u043c\u0435\u043d\u044f\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n                if (isset($action['confirm'])) {\n\n                    $action['confirm'] = string_replace_keys_values_extended($action['confirm'], $row);\n                }\n\n                // \u0432\u0441\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435\u043c \u0441\u043d\u0430\u0431\u0436\u0430\u0435\u043c csrf_token\n                if (isset($action['confirm']) && !empty($action['href'])) {\n\n                    $action['href'] .= (strpos($action['href'], '?') !== false ? '&' : '?') . 'csrf_token=' . cmsForm::getCSRFToken();\n                }\n\n                if (!empty($action['icon'])) {\n\n                    $icon_params = explode(':', $action['icon']);\n\n                    if (!isset($icon_params[1])) {\n                        array_unshift($icon_params, 'solid');\n                    }\n\n                    $action['icon'] = html_svg_icon($icon_params[0], $icon_params[1], 16, false);\n                }\n\n                $row_column['value'][] = $action;\n            }\n\n            $columns[] = $row_column;\n        }\n\n        return $columns;\n    }\n\n    /**\n     * \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     *\n     * @return array\n     */\n    private function makeColumns() {\n\n        $columns = [];\n\n        foreach ($this->getVisibleColumns() as $name => $column) {\n\n            $column = array_merge($this->default_column, $column);\n\n            $class = [];\n\n            if (!empty($column['class'])) {\n                $class[] = $column['class'];\n            }\n\n            if ($name === 'id' && !$this->grid['options']['show_id']) {\n                $class[] = 'd-none';\n            }\n\n            $filter = false;\n\n            if($column['filter'] && $column['filter'] !== 'none'){\n\n                $filter = [\n                    'component' => $this->filter_component_map[$column['filter']],\n                    'params'    => [\n                        'attributes' => array_merge($column['filter_attributes'], [\n                            'name' => $name\n                        ])\n                    ]\n                ];\n\n                switch ($filter['component']) {\n                    case 'form-date-range':\n                    case 'form-range':\n                        $filter['params']['lang_from'] = LANG_FROM;\n                        $filter['params']['lang_to'] = LANG_TO;\n                        break;\n                    case 'form-input':\n                        $filter['params']['attributes']['type'] = 'search';\n                        break;\n                    case 'form-checkbox':\n                        $filter['params']['title'] = $column['filter_checkbox'] ?? false;\n                        break;\n                    case 'form-multiselect':\n                    case 'form-select':\n                        $filter['params']['items'] = is_array($column['filter_select']['items']) ? $column['filter_select']['items'] : $column['filter_select']['items']($name);\n                        if(!$filter['params']['items']){\n                            $filter['component'] = 'form-input';\n                            $filter['params']['attributes']['type'] = 'search';\n                        }\n                        break;\n                }\n            }\n\n            $columns[] = [\n                'width'    => $column['width'] ?? '',\n                'title'    => $column['title'] ?? '',\n                'name'     => $name,\n                'filter'   => $filter,\n                'class'    => implode(' ', $class),\n                'sortable' => $this->grid['options']['is_sortable'] && $column['sortable'],\n            ];\n        }\n\n        if ($this->grid['actions']) {\n\n            $filter = [\n                'component' => 'form-filter',\n                'params' => [\n                    'href'        => $this->grid['options']['advanced_filter'],\n                    'lang_filter' => LANG_FILTER,\n                    'lang_cancel' => LANG_CANCEL,\n                    'icon_filter' => html_svg_icon('solid', 'search-plus', 16, false),\n                    'icon_cancel' => html_svg_icon('solid', 'search-minus', 16, false)\n                ]\n            ];\n\n            $columns[] = [\n                'sortable' => false,\n                'width'    => count($this->grid['actions']) * 30,\n                'title'    => LANG_CP_ACTIONS,\n                'class'    => 'text-right align-middle',\n                'name'     => 'advanced_filter',\n                'filter'   => $this->grid['options']['advanced_filter'] ? $filter : false\n            ];\n        }\n\n        return $columns;\n    }\n\n    private function getEditableParams($row, $column, $field) {\n\n        if (!array_key_exists('editable', $column) || empty($row['id'])) {\n            return false;\n        }\n\n        $save_action_query = [\n            'csrf_token' => cmsForm::getCSRFToken(),\n            'name' => $field,\n            'id' => $row['id']\n        ];\n\n        // \u042d\u043a\u0448\u0435\u043d \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n        $save_action = $this->grid['source_url'];\n\n        // @deprecated \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0443\u0441\u0442\u0430\u0440\u0435\u043b\u0430\n        if (!empty($column['editable']['table'])) {\n            $save_action = href_to('admin', 'inline_save', [urlencode($column['editable']['table']), $row['id']]);\n        }\n\n        if (!empty($column['editable']['save_action'])) {\n            $save_action = string_replace_keys_values_extended($column['editable']['save_action'], $row);\n        }\n\n        if(!isset($save_action)){\n            return false;\n        }\n\n        $attributes = ['autocomplete' => 'off'];\n\n        if (!empty($column['editable']['attributes'])) {\n            foreach ($column['editable']['attributes'] as $akey => $avalue) {\n                if (is_string($avalue)) {\n                    $attributes[$akey] = string_replace_keys_values_extended($avalue, $row);\n                } else {\n                    $attributes[$akey] = $avalue;\n                }\n            }\n        }\n\n        return [\n            'component'   => $column['editable']['renderer'] ?? 'form-input',\n            'items'       => $column['editable']['items'] ?? [],\n            'edit_icon'   => html_svg_icon('solid', 'pen', 16, false),\n            'value'       => $row[$field] ?? '',\n            'attributes'  => $attributes,\n            'lang_edit'   => LANG_EDIT,\n            'lang_save'   => LANG_SAVE,\n            'save_action' => $save_action . '?' . http_build_query($save_action_query)\n        ];\n    }\n\n}\n", "<?php\nclass cmsModel {\n\n    public $name;\n\n    /**\n     * \u041e\u0431\u044a\u0435\u043a\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n     * @var \\cmsDatabase\n     */\n    public $db;\n\n    /**\n     * \u0422\u0438\u043f\u044b MySQL JOIN\n     */\n\tconst LEFT_JOIN                = 'LEFT JOIN';\n    const RIGHT_JOIN               = 'RIGHT JOIN';\n    const INNER_JOIN               = 'INNER JOIN';\n    const STRAIGHT_JOIN            = 'STRAIGHT_JOIN';\n    const LEFT_OUTER_JOIN          = 'LEFT OUTER JOIN';\n    const RIGHT_OUTER_JOIN         = 'RIGHT OUTER JOIN';\n    const NATURAL_LEFT_JOIN        = 'NATURAL LEFT JOIN';\n    const NATURAL_LEFT_OUTER_JOIN  = 'NATURAL LEFT OUTER JOIN';\n    const NATURAL_RIGHT_JOIN       = 'NATURAL RIGHT JOIN';\n    const NATURAL_RIGHT_OUTER_JOIN = 'NATURAL RIGHT OUTER JOIN';\n\n    /**\n     * \u0423\u0440\u043e\u0432\u043d\u0438 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439\n     */\n    const READ_UNCOMMITTED = 'READ UNCOMMITTED';\n    const READ_COMMITTED   = 'READ COMMITTED';\n    const REPEATABLE_READ  = 'REPEATABLE READ';\n    const SERIALIZABLE     = 'SERIALIZABLE';\n\n    /**\n     * \u0411\u0443\u043b\u0435\u0432\u044b \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u0442\u044c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438 fulltext search\n     * https://dev.mysql.com/doc/refman/8.0/en/fulltext-boolean.html\n     *\n     * @var array\n     */\n    protected $special_chars = ['+', '-', '>','<', '(', ')', '~', '*', '\"', '@'];\n\n    /**\n     * \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n     */\n    const DEFAULT_TABLE_PREFIX = 'con_';\n    /**\n     * \u041f\u043e\u0441\u0442\u0444\u0438\u043a\u0441 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n     */\n    const DEFAULT_TABLE_CATEGORY_POSTFIX = '_cats';\n\n    /**\n     * \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n     * @var string\n     */\n    public $table_prefix = self::DEFAULT_TABLE_PREFIX;\n\n    /**\n     * \u041f\u043e\u0441\u0442\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n     */\n    public $table_category_postfix = self::DEFAULT_TABLE_CATEGORY_POSTFIX;\n\n    //\u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043e\u043a\n    public $table      = '';\n    public $select     = ['i.*'];\n    public $distinct   = '';\n    public $straight_join = '';\n    public $join       = '';\n    public $where      = '';\n    public $where_separator  = 'AND';\n    public $group_by   = '';\n    public $order_by   = '';\n    public $read_type  = '';\n    public $index_action = '';\n    public $limit      = 1000;\n    public $perpage    = 50;\n    public $encoded_fields = [];\n\n    public $keep_filters = false;\n    public $filter_on  = false;\n\n    protected static $global_localized = false;\n\n    protected $localized = false;\n    protected $privacy_filter_disabled = false;\n    protected $privacy_filtered = false;\n    protected $privacy_filter_value = 0;\n    protected $approved_filter_disabled = false;\n    protected $hidden_parents_filter_disabled = true;\n    protected $delete_filter_disabled = false;\n    protected $approved_filtered = false;\n    protected $available_filtered = false;\n    protected $hp_filtered = false;\n    protected $joined_session_online = [];\n\n    protected static $cached = [];\n\n    protected $cache_key = false;\n\n    protected $lang;\n    protected $default_lang;\n\n    public function __construct() {\n\n        $this->name = strtolower(str_replace('model', '', get_called_class()));\n\n        $this->db = cmsCore::getInstance()->db;\n\n        $this->lang         = cmsCore::getLanguageName();\n        $this->default_lang = cmsConfig::get('language');\n\n        if (cmsConfig::getInstance()->isfindLocalized()) {\n            self::globalLocalizedOn();\n        }\n\n        $this->localized = self::$global_localized;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function useCache($key){\n        $this->cache_key = $key; return $this;\n    }\n\n    protected function stopCache(){\n        $this->cache_key = false;  return $this;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getContentTypeTableName($name){\n        return $this->table_prefix . $name;\n    }\n\n    public function setTablePrefix($prefix){\n        $this->table_prefix = $prefix;\n        return $this;\n    }\n\n    public function setTableCategoryPostfix($postfix){\n        $this->table_category_postfix = $postfix;\n        return $this;\n    }\n\n    public function getContentCategoryTableName($name){\n        return $this->getContentTypeTableName($name).$this->table_category_postfix;\n    }\n\n    public function checkCorrectEqualSlug($table_name, $slug, $item_id, $max_len = 255) {\n\n        $get_scount = function($slug) use($item_id, $table_name){\n            return $this->filterNotEqual('id', $item_id)->\n                filterLike('slug', $slug)->\n                getCount($table_name, 'id', true);\n        };\n\n        if($get_scount($slug)){\n            if(mb_strlen($slug) >= $max_len){\n                $slug = mb_substr($slug, 0, ($max_len - 1));\n            }\n            $i = 2;\n            while($get_scount($slug.$i)){\n                $i++;\n                if(mb_strlen($slug.$i) > $max_len){\n                    $slug = mb_substr($slug, 0, ($max_len - strlen($i)));\n                }\n            }\n            $slug .= $i;\n        }\n\n        return $slug;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getRootCategory($ctype_name) {\n        return $this->db->getFields($this->getContentCategoryTableName($ctype_name), 'parent_id=0');\n    }\n\n    public function getCategory($ctype_name, $id, $by_field = 'id', $array_fields = ['allow_add']) {\n\n        $this->useCache('content.categories');\n\n        $category = $this->getItemByField($this->getContentCategoryTableName($ctype_name), $by_field, $id);\n        if (!$category) { return false; }\n\n        $category['path'] = $this->getCategoryPath($ctype_name, $category, $array_fields);\n\n        if($array_fields){\n            foreach ($array_fields as $array_field) {\n                if (!empty($category[$array_field])) {\n                    $category[$array_field] = cmsModel::yamlToArray($category[$array_field]);\n                }\n            }\n        }\n\n        return $category;\n    }\n\n    public function getCategoryBySLUG($ctype_name, $slug) {\n        return $this->getCategory($ctype_name, $slug, 'slug');\n    }\n\n    public function getCategorySLUG($category, $ctype_name) {\n\n        if (!empty($category['path'])) {\n\n            $slug = '';\n\n            foreach ($category['path'] as $c) {\n                if ($c['id'] == 1) {\n                    continue;\n                }\n                if ($slug) {\n                    $slug .= '/';\n                }\n                $slug .= lang_slug(empty($c['slug_key']) ? str_replace('/', '', $c['title']) : $c['slug_key']);\n            }\n        } else {\n\n            $slug = lang_slug(empty($category['slug_key']) ? str_replace('/', '', $category['title']) : $category['slug_key']);\n        }\n\n        return $this->checkCorrectEqualSlug($this->getContentCategoryTableName($ctype_name), $slug, $category['id'], 255);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getCategoriesTree($ctype_name, $is_show_root = true) {\n\n        if (!$is_show_root) {\n            $this->filterGt('parent_id', 0);\n        }\n\n        if (!$this->order_by) {\n            $this->orderBy('ns_left');\n        }\n\n        $this->useCache('content.categories');\n\n        return $this->get($this->getContentCategoryTableName($ctype_name), function ($node, $model) {\n            if ($node['ns_level'] == 0) {\n                $node['title'] = LANG_ROOT_CATEGORY;\n            }\n            if (!empty($node['allow_add'])) {\n                $node['allow_add'] = cmsModel::yamlToArray($node['allow_add']);\n            }\n            return $node;\n        });\n    }\n\n    public function getSubCategories($ctype_name, $parent_id = 1, $item_callback = false) {\n\n        $this->filterEqual('parent_id', $parent_id);\n        $this->orderBy('ns_left');\n\n        $this->useCache('content.categories');\n\n        return $this->get($this->getContentCategoryTableName($ctype_name), $item_callback);\n    }\n\n    public function getSubCategoriesTree($ctype_name, $parent_id = 1, $level = 1) {\n\n        $parent = $this->getCategory($ctype_name, $parent_id);\n\n        $this->filterGt('ns_left', $parent['ns_left'])->\n            filterLt('ns_right', $parent['ns_right']);\n\n        if ($level) {\n            $this->filterLtEqual('ns_level', $parent['ns_level'] + $level);\n        }\n\n        $this->orderBy('ns_left');\n\n        $this->useCache('content.categories');\n\n        return $this->get($this->getContentCategoryTableName($ctype_name));\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getCategoryPath($ctype_name, $category, $array_fields = []) {\n\n        if (!isset($category['ns_left'])){\n            $category = $this->getCategory($ctype_name, $category['id']);\n        }\n\n        $this->\n            filterLtEqual('ns_left', $category['ns_left'])->\n            filterGtEqual('ns_right', $category['ns_right'])->\n            filterLtEqual('ns_level', $category['ns_level'])->\n            filterGt('ns_level', 0)->\n            orderBy('ns_left');\n\n        $this->useCache('content.categories');\n\n        return $this->get($this->getContentCategoryTableName($ctype_name), function($item, $model) use($array_fields) {\n            if($array_fields){\n                foreach ($array_fields as $array_field) {\n                    if (!empty($item[$array_field])) {\n                        $item[$array_field] = cmsModel::yamlToArray($item[$array_field]);\n                    }\n                }\n            }\n            return $item;\n        });\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e\n     *\n     * @param string $ctype_name \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     * @param array $category \u041c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n     * @param boolean $first_level_slug \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0440\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n     * @return array\n     */\n    public function addCategory($ctype_name, $category, $first_level_slug = false) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        $this->db->nestedSets->setTable($table_name);\n\n        $category['id'] = $this->db->nestedSets->addNode($category['parent_id']);\n\n        if (!$category['id']) {\n            return false;\n        }\n\n        $this->update($table_name, $category['id'], $category);\n\n        if(!$first_level_slug){\n            $category['path'] = $this->getCategoryPath($ctype_name, $category);\n        }\n\n        $category['slug'] = $this->getCategorySLUG($category, $ctype_name);\n\n        $this->update($table_name, $category['id'], [\n            'slug' => $category['slug']\n        ]);\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        return $category;\n    }\n\n    /**\n     * \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n     *\n     * @param string $ctype_name \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     * @param integer $id ID \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n     * @param array $category \u041c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n     * @param boolean $first_level_slug \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0440\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n     * @return array\n     */\n    public function updateCategory($ctype_name, $id, $category, $first_level_slug = false) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        $category_old = $this->getCategory($ctype_name, $id);\n\n        if ($category_old['parent_id'] != $category['parent_id']) {\n            $this->db->nestedSets->setTable($table_name);\n            $this->db->nestedSets->moveNode($id, $category['parent_id']);\n        }\n\n        $this->update($table_name, $id, $category);\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        // \u0415\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044f\u0437\u044b\u043a \u043d\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043d\u0435 \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043c\u0435\u043d\u044f\u0442\u044c slug\n        if ($this->lang !== $this->default_lang) {\n\n            return $this->getCategory($ctype_name, $id);\n        }\n\n        $category['id'] = $id;\n\n        if(!$first_level_slug){\n            $category['path'] = $this->getCategoryPath($ctype_name, ['id' => $id]);\n        }\n\n        $category['slug'] = $this->getCategorySLUG($category, $ctype_name);\n\n        $this->update($table_name, $id, [\n            'slug' => $category['slug']\n        ]);\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        $subcats = $this->getSubCategoriesTree($ctype_name, $id, false);\n\n        if ($subcats) {\n            foreach ($subcats as $subcat) {\n\n                if(!$first_level_slug){\n                    $subcat['path'] = $this->getCategoryPath($ctype_name, ['id' => $subcat['id']]);\n                }\n\n                $subcat['slug'] = $this->getCategorySLUG($subcat, $ctype_name);\n                $this->update($table_name, $subcat['id'], ['slug' => $subcat['slug']]);\n\n                cmsCache::getInstance()->clean('content.categories');\n            }\n        }\n\n        return $category;\n    }\n\n    public function updateCategoryTree($ctype_name, $tree, $categories_count, $first_level_slug = false) {\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        $this->updateCategoryTreeNode($ctype_name, $tree);\n        $this->updateCategoryTreeNodeSlugs($ctype_name, $tree, $first_level_slug);\n\n        $root_keys = [\n            'ns_left'  => 1,\n            'ns_right' => 1 + ($categories_count * 2) + 1\n        ];\n\n        return $this->update($this->getContentCategoryTableName($ctype_name), 1, $root_keys);\n    }\n\n    public function updateCategoryTreeNode($ctype_name, $tree) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        foreach ($tree as $node) {\n\n            $this->update($table_name, $node['key'], [\n                'parent_id' => $node['parent_key'],\n                'ns_left'   => $node['left'],\n                'ns_right'  => $node['right'],\n                'ns_level'  => $node['level'],\n            ]);\n\n            if (!empty($node['children'])) {\n                $this->updateCategoryTreeNode($ctype_name, $node['children']);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u041f\u0435\u0440\u0435\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 slug \u0443 \u0432\u0441\u0435\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     *\n     * @param string $ctype_name \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     * @param array $tree \u0414\u0435\u0440\u0435\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\n     * @param boolean $first_level_slug \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0440\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n     *\n     * @return array\n     */\n    public function updateCategoryTreeNodeSlugs($ctype_name, $tree, $first_level_slug = false) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        foreach ($tree as $node) {\n\n            if(!$first_level_slug){\n\n                $path = $this->getCategoryPath($ctype_name, [\n                    'id'        => $node['key'],\n                    'parent_id' => $node['parent_key'],\n                    'ns_left'   => $node['left'],\n                    'ns_right'  => $node['right'],\n                    'ns_level'  => $node['level']\n                ]);\n            } else {\n                $path = [];\n            }\n\n            $slug = $this->getCategorySLUG([\n                'path'  => $path,\n                'title' => $node['title'],\n                'slug_key' => $node['slug_key'],\n                'id'    => $node['key']\n            ], $ctype_name);\n\n            $this->update($table_name, $node['key'], [\n                'slug' => $slug\n            ]);\n\n            if (!empty($node['children'])) {\n                $this->updateCategoryTreeNodeSlugs($ctype_name, $node['children'], $first_level_slug);\n            }\n        }\n\n        return true;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function deleteCategory($ctype_name, $id){\n\n        //\n        // \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f\n        // \u0438\u0437 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0435 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438\n        // \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n        //\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n\n        $this->db->nestedSets->setTable($table_name);\n        $this->db->nestedSets->deleteNode($id);\n\n        cmsCache::getInstance()->clean('content.categories');\n\n        return true;\n\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function delete($table_name, $id, $by_field='id'){\n        $this->filterEqual($by_field, $id);\n        return $this->deleteFiltered($table_name);\n    }\n\n    public function deleteFiltered($table_name){\n        $where = $this->where;\n        $this->resetFilters();\n        return $this->db->delete($table_name, $where);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function update($table_name, $id, $data, $skip_check_fields = false, $array_as_json = false){\n        $this->filterEqual('id', $id);\n        return $this->updateFiltered($table_name, $data, $skip_check_fields, $array_as_json);\n    }\n\n    public function updateFiltered($table_name, $data, $skip_check_fields = false, $array_as_json = false){\n        $where = $this->where;\n        $this->resetFilters();\n        return $this->db->update($table_name, $where, $data, $skip_check_fields, $array_as_json);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function insert($table_name, $data, $array_as_json = false, $ignore = false){\n        return $this->db->insert($table_name, $data, false, $array_as_json, $ignore);\n    }\n\n    public function insertOrUpdate($table_name, $insert_data, $update_data = false){\n        return $this->db->insertOrUpdate($table_name, $insert_data, $update_data);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function replaceFieldString($table_name, $search, $replace, $field) {\n\n        $this->filterLike($field, '%'.$search.'%');\n\n        $where = $this->where;\n        $this->resetFilters();\n\n        $search  = $this->db->escape($search);\n        $replace = $this->db->escape($replace);\n\n        return $this->db->query(\"UPDATE `{#}{$table_name}` i SET i.{$field} = REPLACE(i.{$field}, '{$search}', '{$replace}') WHERE {$where}\");\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function lockFilters(){\n        $this->keep_filters = true;\n        return $this;\n    }\n\n    public function unlockFilters(){\n        $this->keep_filters = false;\n        return $this;\n    }\n\n    public function resetFilters(){\n\n        $this->select       = ['i.*'];\n        $this->encoded_fields = [];\n        $this->group_by     = '';\n        $this->order_by     = '';\n        $this->index_action = '';\n        $this->limit        = '';\n        $this->read_type    = '';\n        $this->join         = '';\n        $this->distinct     = '';\n        $this->straight_join = '';\n        $this->joined_session_online = [];\n\n\t\tif ($this->keep_filters) { return $this; }\n\n\t\t$this->filter_on          = false;\n        $this->where              = '';\n        $this->privacy_filtered   = false;\n        $this->privacy_filter_value = 0;\n        $this->approved_filtered  = false;\n        $this->available_filtered = false;\n        $this->hp_filtered        = false;\n\n        return $this;\n    }\n\n    public function setLang($lang) {\n\n        $this->lang = $lang;\n\n        return $this;\n    }\n\n    public function isLocalizedOn() {\n        return $this->localized;\n    }\n\n    public function localizedOn() {\n        $this->localized = true; return $this;\n    }\n\n    public function localizedOff() {\n        $this->localized = false; return $this;\n    }\n\n    public function localizedRestore() {\n        $this->localized = self::$global_localized; return $this;\n    }\n\n    public static function globalLocalizedOn() {\n        self::$global_localized = true;\n    }\n\n    public static function globalLocalizedOff() {\n        self::$global_localized = false;\n    }\n\n    public function replaceTranslatedField($item, $table_name = false) {\n\n        // \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u044f\u0437\u044b\u043a \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 -\n        // \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044f\u0437\u044b\u043a \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f\n        // \u0432 \u044f\u0447\u0435\u0439\u043a\u0430\u0445 \u0431\u0435\u0437 \u043f\u043e\u0441\u0442\u0444\u0438\u043a\u0441\u0430\n        if ($this->lang === $this->default_lang) {\n            return $item;\n        }\n\n        if (!is_array($item)) {\n            return $item;\n        }\n\n        $postfix = '_' . $this->lang;\n\n        foreach ($item as $key => $value) {\n\n            $lang_key = $key . $postfix;\n\n            if (!isset($item[$lang_key])) {\n\n                if (is_array($value) && $value) {\n                    $item[$key] = $this->replaceTranslatedField($value, $table_name);\n                }\n\n                continue;\n            }\n\n            $item[$key] = $item[$lang_key];\n        }\n\n        return $item;\n    }\n\n    public function setStraightJoin() {\n        $this->straight_join = self::STRAIGHT_JOIN; return $this;\n    }\n\n    public function distinctSelect() {\n        $this->distinct = 'DISTINCT'; return $this;\n    }\n\n    public function filter($condition){\n        if ($this->filter_on){\n            $this->where .= ' '.$this->where_separator.' ('.$condition.')';\n        } else {\n            $this->where .= '('.$condition.')';\n            $this->filter_on = true;\n        }\n        $this->where_separator = ' AND ';\n        return $this;\n    }\n\n    public function filterStart(){\n        if ($this->filter_on){\n            $this->where .= ' '.$this->where_separator.' (';\n        } else {\n            $this->where .= '(';\n        }\n        $this->filter_on = false;\n        return $this;\n    }\n\n    public function filterEnd(){\n        $this->where .= ' ) ';\n        return $this;\n    }\n\n    public function filterAnd(){\n        $this->where_separator = ' AND ';\n        return $this;\n    }\n\n    public function filterOr(){\n        $this->where_separator = ' OR ';\n        return $this;\n    }\n\n    public function filterNotNull($field){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $this->filter($field.' IS NOT NULL');\n        return $this;\n    }\n\n    public function filterIsNull($field){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $this->filter($field.' IS NULL');\n        return $this;\n    }\n\n    public function filterEqual($field, $value, $binary = false){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        if (is_null($value)){\n            $this->filter($field.' IS NULL');\n        } else {\n            $value = $this->db->escape($value);\n            $this->filter(($binary ? ' BINARY ' : '').\"$field = '$value'\");\n        }\n        return $this;\n    }\n\n    public function filterFunc($field, $value, $sign='='){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $this->filter(\"$field {$sign} $value\");\n        return $this;\n    }\n\n    public function filterNotEqual($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        if (is_null($value)){\n            $this->filter($field.' IS NOT NULL');\n        } else {\n            $value = $this->db->escape($value);\n            $this->filter(\"$field <> '$value'\");\n        }\n        return $this;\n    }\n\n    public function filterGt($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field > '$value'\");\n        return $this;\n    }\n\n    public function filterLt($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field < '$value'\");\n        return $this;\n    }\n\n    public function filterGtEqual($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field >= '$value'\");\n        return $this;\n    }\n\n    public function filterLtEqual($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field <= '$value'\");\n        return $this;\n    }\n\n    public function filterLike($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field LIKE '$value'\");\n        return $this;\n    }\n\n    public function filterNotLike($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $this->filter(\"$field NOT LIKE '$value'\");\n        return $this;\n    }\n\n    public function filterBetween($field, $start, $end){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $start = $this->db->escape($start);\n        $end = $this->db->escape($end);\n        $this->filter(\"$field BETWEEN '$start' AND '$end'\");\n        return $this;\n    }\n\n    public function filterDateYounger($field, $value, $interval='DAY'){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $interval = $this->db->escape($interval);\n        $this->filter(\"$field >= DATE_SUB(NOW(), INTERVAL {$value} {$interval})\");\n        return $this;\n    }\n\n    public function filterTimestampYounger($field, $value, $interval='DAY'){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = (int)$value;\n        $interval = $this->db->escape($interval);\n        $this->filter(\"TIMESTAMPDIFF({$interval}, {$field}, NOW()) <= {$value}\");\n        return $this;\n    }\n\n    public function filterDateOlder($field, $value, $interval='DAY'){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $value = $this->db->escape($value);\n        $interval = $this->db->escape($interval);\n        $this->filter(\"$field < DATE_SUB(NOW(), INTERVAL {$value} {$interval})\");\n        return $this;\n    }\n\n    public function filterTimestampGt($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $field = \"UNIX_TIMESTAMP({$field})\";\n        $value = $this->db->escape($value);\n        $this->filter(\"{$field} > '{$value}'\");\n        return $this;\n    }\n\n    public function filterTimestampLt($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        $field = \"UNIX_TIMESTAMP({$field})\";\n        $value = $this->db->escape($value);\n        $this->filter(\"{$field} < '{$value}'\");\n        return $this;\n    }\n\n    public function filterIn($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        if (is_array($value)){\n            if(!$value){ return $this; }\n            foreach($value as $k=>$v){\n                $v = $this->db->escape(strval($v));\n                $value[$k] = \"'{$v}'\";\n            }\n            $value = implode(',', $value);\n        } else {\n            $value = $this->db->escape($value);\n            $value = \"'{$value}'\";\n        }\n        $this->filter(\"{$field} IN ({$value})\");\n        return $this;\n    }\n\n    public function filterNotIn($field, $value){\n        if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n        if (is_array($value)){\n            if(!$value){ return $this; }\n            foreach($value as $k=>$v){\n                $v = $this->db->escape($v);\n                $value[$k] = \"'{$v}'\";\n            }\n            $value = implode(',', $value);\n        } else {\n            $value = $this->db->escape($value);\n            $value = \"'{$value}'\";\n        }\n        $this->filter(\"{$field} NOT IN ({$value})\");\n        return $this;\n    }\n\n    /**\n     * \u0424\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f fulltext search\n     * \u0412 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u043d\u0430 $field\n     *\n     * @param string|array $field \u0418\u043c\u044f \u044f\u0447\u0435\u0439\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u044f\u0447\u0435\u0435\u043a\n     * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438\n     * @param string $lang \u042f\u0437\u044b\u043a, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u0442\u043e\u043f\u0441\u043b\u043e\u0432\n     * @return $this\n     */\n    public function filterRelated($field, $value, $lang = false) {\n\n        if(!is_array($field)){\n            $field = [$field];\n        }\n\n        // \u0420\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043b\u0438 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 3\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n        if (mb_strlen($value) <= 3) {\n            return $this->filterLike($field[0], $value . '%');\n        }\n\n        $value = trim(strip_tags(mb_strtolower($value)));\n        $value = trim(preg_replace('/[' . preg_quote(implode('', $this->special_chars)) . ']+/', ' ', $value));\n\n        // \u041f\u043e\u0441\u043b\u0435 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 3\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n        // MySQL \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0438\u0441\u043a\u0430\u0442\u044c \u0432 \u043f\u043e\u043b\u043d\u043e\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0435 \u043f\u043e 3\u043c \u0438 \u043c\u0435\u043d\u0435\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\n        if (mb_strlen($value) <= 3) {\n            return $this->filterLike($field[0], $value . '%');\n        }\n\n        $query = [];\n\n        $words = preg_split('/[\\s,]+/', $value);\n\n        $stopwords = string_get_stopwords($lang ? $lang : cmsConfig::get('language'));\n\n        foreach ($words as $word) {\n\n            if (mb_strlen($word) < 3 || is_numeric($word)) {\n                continue;\n            }\n\n            if ($stopwords && in_array($word, $stopwords, true)) {\n                continue;\n            }\n            if (mb_strlen($word) === 3) {\n                $query[] = $word;\n                continue;\n            }\n\n            if (mb_strlen($word) >= 12) {\n                $word = mb_substr($word, 0, mb_strlen($word) - 3);\n            } else if (mb_strlen($word) >= 10) {\n                $word = mb_substr($word, 0, mb_strlen($word) - 2);\n            } else if (mb_strlen($word) >= 6) {\n                $word = mb_substr($word, 0, mb_strlen($word) - 1);\n            }\n\n            $query[] = $word . '*';\n        }\n\n        if (!$query) {\n\n            $ft_query = '\\\"' . $this->db->escape($value) . '\\\"';\n        } else {\n\n            usort($query, function ($a, $b) {\n                return mb_strlen($b) - mb_strlen($a);\n            });\n            $query = array_slice($query, 0, 5);\n\n            $ft_query = '>\\\"' . $this->db->escape($value) . '\\\" <(';\n            $ft_query .= implode(' ', $this->db->escape($query)) . ')';\n        }\n\n        if (strpos($field[0], '.') === false) {\n            $match_fields_str = 'i.' . implode(', i.', $field);\n        } else {\n            $match_fields_str = implode(', ', $field);\n        }\n\n        $search_param = \"MATCH({$match_fields_str}) AGAINST ('{$ft_query}' IN BOOLEAN MODE)\";\n\n        $this->select($search_param, 'fsort');\n\n        $this->order_by = 'fsort desc';\n\n        return $this->filter($search_param);\n    }\n\n    public function filterCategory($ctype_name, $category, $is_recursive = false, $is_multi_cats = false) {\n\n        $table_name = $this->getContentCategoryTableName($ctype_name);\n        $bind_table_name = $table_name . '_bind';\n\n        if (!$is_recursive) {\n\n            $this->joinInner($bind_table_name, 'b', 'b.item_id = i.id')->filterEqual('b.category_id', $category['id']);\n        } else {\n\n            // \u0434\u043b\u044f \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0435 \u043d\u0443\u0436\u043d\u0430\n            if (!$category['parent_id']) {\n                return $this;\n            }\n\n            if($is_multi_cats){\n                $this->distinctSelect();\n            }\n\n            $this->joinInner($bind_table_name, 'b', 'b.item_id = i.id');\n            $this->joinInner($table_name, 'c', 'c.id = b.category_id');\n            $this->filterGtEqual('c.ns_left', $category['ns_left']);\n            $this->filterLtEqual('c.ns_right', $category['ns_right']);\n        }\n\n        return $this;\n    }\n\n    public function filterCategoryId($ctype_name, $category_id, $is_recursive = false) {\n\n        if (!$is_recursive) {\n\n            if ($category_id) {\n                return $this->filterCategory($ctype_name, ['id' => $category_id]);\n            }\n        } else {\n\n            $category = $this->getCategory($ctype_name, $category_id);\n            if ($category) {\n                return $this->filterCategory($ctype_name, $category, true, true);\n            }\n        }\n\n        return $this;\n    }\n\n    public function disablePrivacyFilter(){\n        $this->privacy_filter_disabled = true;\n        $this->privacy_filter_value = 0;\n        return $this;\n    }\n\n    public function disablePrivacyFilterForFriends(){\n        $this->privacy_filter_value = array(0, 1);\n        return $this;\n    }\n\n    public function enablePrivacyFilter(){\n        $this->privacy_filter_disabled = false;\n        $this->privacy_filter_value = 0;\n        return $this;\n    }\n\n    public function isEnablePrivacyFilter(){\n        return $this->privacy_filter_disabled === false;\n    }\n\n    public function filterPrivacy(){\n\n        if ($this->privacy_filtered) { return $this; }\n\n        // \u042d\u0442\u043e\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0447\u0438\u0441\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        // \u0438 \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441\u0430\u043c\u0438\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        // \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u043b\u0430\u0433 \u0447\u0442\u043e\u0431\u044b \u0444\u0438\u043b\u044c\u0442\u0440 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b\n        $this->privacy_filtered = true;\n\n        if(is_array($this->privacy_filter_value)){\n            return $this->filterIn('i.is_private', $this->privacy_filter_value);\n        }\n\n        return $this->filterEqual('i.is_private', $this->privacy_filter_value);\n\n    }\n\n    public function enableDeleteFilter(){\n        $this->delete_filter_disabled = false;\n        return $this;\n    }\n\n    public function disableDeleteFilter(){\n        $this->delete_filter_disabled = true;\n        return $this;\n    }\n\n    public function enableApprovedFilter(){\n        $this->approved_filter_disabled = false;\n        return $this;\n    }\n\n    public function disableApprovedFilter(){\n        $this->approved_filter_disabled = true;\n        return $this;\n    }\n\n    public function enableHiddenParentsFilter(){\n        $this->hidden_parents_filter_disabled = false;\n        return $this;\n    }\n\n    public function disableHiddenParentsFilter(){\n        $this->hidden_parents_filter_disabled = true;\n        return $this;\n    }\n\n    public function isEnableHiddenParentsFilter(){\n        return $this->hidden_parents_filter_disabled === false;\n    }\n\n    public function joinModerationsTasks($ctype_name){\n        $this->select('IF(t.id IS NULL AND i.is_approved < 1, 1, NULL)', 'is_draft');\n        $this->select('t.is_new_item');\n        return $this->joinLeft('moderators_tasks', 't', \"t.item_id = i.id AND t.ctype_name = '{$ctype_name}'\");\n    }\n\n    public function filterByModeratorTask($moderator_id, $ctype_name, $is_admin = false){\n\n        $this->select('m.is_new_item');\n\n        $this->joinInner('moderators_tasks', 'm', 'm.item_id = i.id');\n\n        $this->filterEqual('m.ctype_name', $ctype_name);\n\n        if(!$is_admin){\n            $this->filterEqual('m.moderator_id', $moderator_id);\n        }\n\n        return $this;\n\n    }\n\n    public function filterAvailableOnly(){\n\n        if ($this->available_filtered) { return $this; }\n\n        $this->available_filtered = true;\n\n        return $this->filterIsNull('is_deleted');\n\n    }\n\n    public function filterDeleteOnly(){\n\n        return $this->filterEqual('is_deleted', 1);\n\n    }\n\n    public function filterApprovedOnly(){\n\n        if ($this->approved_filtered) { return $this; }\n\n        // \u042d\u0442\u043e\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u0447\u0438\u0441\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        // \u0438 \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441\u0430\u043c\u0438\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        // \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u043b\u0430\u0433 \u0447\u0442\u043e\u0431\u044b \u0444\u0438\u043b\u044c\u0442\u0440 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u0434\u0432\u0430\u0436\u0434\u044b\n        $this->approved_filtered = true;\n\n        return $this->filterEqual('is_approved', 1);\n\n    }\n\n    public function filterHiddenParents(){\n\n        if ($this->hp_filtered) { return $this; }\n\n        $this->hp_filtered = true;\n\n        return $this->filterIsNull('is_parent_hidden');\n\n    }\n\n    public function filterSubscribe($user_id){\n        return $this->filterFriends($user_id, 0);\n    }\n\n    public function filterFriendsAndSubscribe($user_id){\n        return $this->filterFriends($user_id, null);\n    }\n\n    public function filterFriends($user_id, $is_mutual = 1){\n\n        $this->joinInner('{users}_friends', 'fr', 'fr.friend_id = i.user_id');\n\n        $this->filterEqual('fr.user_id', (int)$user_id);\n\n        if($is_mutual !== null){\n            $this->filterEqual('fr.is_mutual', $is_mutual);\n        } else {\n            // \u043f\u043e\u0434\u043f\u0438\u0441\u0447\u0438\u043a\u0438 (null) \u0438 \u0434\u0440\u0443\u0437\u044c\u044f (1)\n            $this->filterStart();\n                $this->filterEqual('fr.is_mutual', 1);\n                    $this->filterOr();\n                $this->filterIsNull('fr.is_mutual');\n            $this->filterEnd();\n        }\n\n        return $this;\n\n    }\n\n    public function filterFriendsPrivateOnly($user_id){\n\n        // \u0444\u0438\u043b\u044c\u0442\u0440 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u043d\u0443\u0436\u0435\u043d\n        $this->privacy_filtered = true;\n\n        return $this->filterEqual('i.is_private', 1)->filterFriends($user_id);\n\n    }\n\n    public function filterOnlineUsers() {\n        return $this->filterNotNull('online.user_id')->filterTimestampYounger('online.date_created', cmsUser::USER_ONLINE_INTERVAL, 'SECOND');\n    }\n\n    /**\n     * \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n     *\n     * @param array $dataset \u041c\u0430\u0441\u0441\u0438\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432/\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n     * @param boolean $only_filters \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u044b\n     * @param array $allowed_fields \u0420\u0430\u0437\u0440\u0435\u0448\u0451\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\n     * @param string $table_name \u0418\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b: \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e, \u0432\u0441\u0435 \u043f\u043e\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u0432 \u043d\u0435\u0439\n     * @return boolean true, \u0435\u0441\u043b\u0438 \u0447\u0442\u043e-\u043b\u0438\u0431\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c, false, \u0435\u0441\u043b\u0438 \u043d\u0438\u0447\u0435\u0433\u043e\n     */\n    public function applyDatasetFilters($dataset, $only_filters = false, $allowed_fields = [], $table_name = '') {\n\n        $success = false;\n\n        if (!empty($dataset['filters']) && is_array($dataset['filters'])) {\n\n            foreach ($dataset['filters'] as $filter) {\n\n                // \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\n                if (\n                    empty($filter['field']) || !is_string($filter['field']) ||\n                    empty($filter['condition'] || !is_string($filter['condition'])) ||\n                    !array_key_exists('value', $filter) || (!is_string($filter['value']) && $filter['condition'] !== 'in')\n                    ) {\n                    continue;\n                }\n\n                // \u0415\u0441\u0442\u044c \u043b\u0438 \u0442\u0430\u043a\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\n                if ($table_name && !$this->db->isFieldExists($table_name, $filter['field'])) {\n                    continue;\n                }\n\n                // \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\n                // \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\n                if ($allowed_fields && !in_array($filter['field'], $allowed_fields, true)) {\n                    continue;\n                }\n\n                // \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 field \u0432 $dataset \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u043b\u044e\u0431\u044b\u0435\n                if (!$table_name && isset($filter['callback']) && is_callable($filter['callback'])) {\n                    $filter['callback']($this, $dataset);\n                    continue;\n                }\n\n                if (($filter['value'] === '') && !in_array($filter['condition'], ['nn', 'ni'])) {\n                    continue;\n                }\n\n                if ($filter['value'] !== '' && !is_array($filter['value'])) {\n                    $filter['value'] = string_replace_user_properties($filter['value']);\n                }\n\n                $success = true;\n\n                switch ($filter['condition']) {\n\n                    // \u043e\u0431\u0449\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\n                    case 'eq': $this->filterEqual($filter['field'], $filter['value']);\n                        break;\n                    case 'gt': $this->filterGt($filter['field'], $filter['value']);\n                        break;\n                    case 'lt': $this->filterLt($filter['field'], $filter['value']);\n                        break;\n                    case 'ge': $this->filterGtEqual($filter['field'], $filter['value']);\n                        break;\n                    case 'le': $this->filterLtEqual($filter['field'], $filter['value']);\n                        break;\n                    case 'nn': $this->filterNotNull($filter['field']);\n                        break;\n                    case 'ni': $this->filterIsNull($filter['field']);\n                        break;\n\n                    // \u0441\u0442\u0440\u043e\u043a\u0438\n                    case 'lk': $this->filterLike($filter['field'], '%' . $filter['value'] . '%');\n                        break;\n                    case 'ln': $this->filterNotLike($filter['field'], '%' . $filter['value'] . '%');\n                        break;\n                    case 'lb': $this->filterLike($filter['field'], $filter['value'] . '%');\n                        break;\n                    case 'lf': $this->filterLike($filter['field'], '%' . $filter['value']);\n                        break;\n\n                    // \u0434\u0430\u0442\u044b\n                    case 'dy': $this->filterDateYounger($filter['field'], $filter['value']);\n                        break;\n                    case 'do': $this->filterDateOlder($filter['field'], $filter['value']);\n                        break;\n\n                    // \u043c\u0430\u0441\u0441\u0438\u0432\n                    case 'in':\n                        if (!is_array($filter['value'])) {\n                            $filter['value'] = explode(',', $filter['value']);\n                        }\n                        $this->filterIn($filter['field'], $filter['value']);\n                        break;\n                }\n            }\n        }\n\n        if (!empty($dataset['sorting']) && !$only_filters) {\n\n            $success = true;\n\n            $this->orderByList($dataset['sorting']);\n        }\n\n        if (!empty($dataset['index']) && !$only_filters) {\n\n            $success = true;\n\n            $this->forceIndex($dataset['index'], 2);\n        }\n\n        return $success;\n    }\n\n    /**\n     * \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u043f\u043e\u043b\u0435\u0439\n     *\n     * @param array $fields \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043b\u0435\u0439\n     * @param boolean $is_this_only \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445\n     * @param boolean|string $translated_table \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043c\u0443\u043b\u044c\u0442\u0438\u044f\u0437\u044b\u0447\u043d\u043e\u0441\u0442\u0438\n     * @return $this\n     */\n    public function selectList($fields, $is_this_only = false, $translated_table = false) {\n\n        if ($is_this_only) {\n            $this->select = [];\n        }\n\n        foreach ($fields as $field => $alias) {\n\n            if(is_numeric($field)){\n                $field = $alias;\n                $alias = false;\n            }\n\n            if (strpos($field, '.') === false){ $field = 'i.' . $field; }\n\n            if ($translated_table) {\n                $this->selectTranslatedField($field, $translated_table, $alias);\n            } else {\n                $this->select($field, $alias);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u0435\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     * @param mixed $key \u041a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n     * @return $this\n     */\n    public function selectAesDecrypt($field, $as = false, $key = '') {\n\n        $as = $as ? $as : str_replace('enc_', '', $field);\n\n        $this->encoded_fields[] = $as ? $as : $field;\n\n        if ($key) {\n            if (is_callable($key) && ($key instanceof Closure)) {\n                $key = $key($this);\n            } else {\n                $key = \"'\" . $this->db->escape($key) . \"'\";\n            }\n            $field = \"AES_DECRYPT(`{$field}`, {$key})\";\n        } else {\n            $field = \"AES_DECRYPT(`{$field}`, @aeskey)\";\n        }\n\n        return $this->select($field, $as);\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0435 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043e\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, i.title)\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     * @return $this\n     */\n    public function select($field, $as = false) {\n\n        $this->select[] = $as ? $field . ' as `' . $as . '`' : $field;\n\n        return $this;\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0435 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u043f\u044b\u0442\u0430\u044f\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u0435\u0433\u043e\n     * \u0441 \u043f\u043e\u0441\u0442\u0444\u0438\u043a\u0441\u043e\u043c \u044f\u0437\u044b\u043a\u0430\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $table \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043a\u0443\u0434\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u044d\u0442\u043e \u043f\u043e\u043b\u0435\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     * @return $this\n     */\n    public function selectTranslatedField($field, $table, $as = false) {\n\n        if ($this->lang === $this->default_lang) {\n            return $this->select($field, $as);\n        }\n\n        // \u0418\u043c\u044f \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c, \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n        $field_name = $field . '_' . $this->lang;\n\n        // \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e\n        $select_as_name = (strpos($field, '.') === false ? $field : ltrim(strrchr($field, '.'), '.'));\n\n        // \u041d\u0435\u0442 \u043f\u043e\u043b\u044f \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c. \u0412 isFieldExists \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n        if (!$this->db->isFieldExists($table, $select_as_name . '_' . $this->lang)) {\n            $field_name = $field;\n        }\n\n        return $this->select($field_name, ($as ? $as : $select_as_name));\n    }\n\n    /**\n     * \u0412\u044b\u0431\u043e\u0440 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n     * @return $this\n     */\n    public function selectOnly($field, $as = false) {\n\n        $this->select = [];\n\n        return $this->select($field, $as);\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043c\u044f \u043f\u043e\u043b\u044f, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u044f\u0437\u044b\u043a\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $table \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u044d\u0442\u043e \u043f\u043e\u043b\u0435 \u0435\u0441\u0442\u044c\n     * @return string\n     */\n    public function getTranslatedFieldName($field, $table = '') {\n\n        if ($this->lang === $this->default_lang) {\n            return $field;\n        }\n\n        // \u0418\u043c\u044f \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c, \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n        $field_name = $field . '_' . $this->lang;\n\n        if($table){\n\n            // \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0430\u043b\u0438\u0430\u0441 \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n            $check_name = (strpos($field_name, '.') === false ? $field_name : ltrim(strrchr($field_name, '.'), '.'));\n\n            // \u041d\u0435\u0442 \u043f\u043e\u043b\u044f \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c\n            if (!$this->db->isFieldExists($table, $check_name)) {\n                $field_name = $field;\n            }\n        }\n\n        return $field_name;\n    }\n\n    public function joinQuery($query, $as, $on, $join_type = self::INNER_JOIN){\n        $this->join .= $join_type.' '.$query.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function join($table_name, $as, $on){\n        return $this->joinInner($table_name, $as, $on);\n    }\n\n    public function joinInner($table_name, $as, $on){\n        $this->join .= self::INNER_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function joinLeft($table_name, $as, $on){\n        $this->join .= self::LEFT_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function joinExcludingLeft($table_name, $as, $right_key, $left_key, $join_where = ''){\n        $this->join .= self::LEFT_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$left_key.'='.$right_key.($join_where ? ' AND '.$join_where : '').PHP_EOL;\n        $this->filter($right_key.' IS NULL');\n        return $this;\n    }\n\n    public function joinRight($table_name, $as, $on){\n        $this->join .= self::RIGHT_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function joinExcludingRight($table_name, $as, $right_key, $left_key, $join_where = ''){\n        $this->join .= self::RIGHT_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$left_key.'='.$right_key.($join_where ? ' AND '.$join_where : '').PHP_EOL;\n        $this->filter($left_key.' IS NULL');\n        return $this;\n    }\n\n    public function joinLeftOuter($table_name, $as, $on){\n        $this->join .= self::LEFT_OUTER_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    public function joinRightOuter($table_name, $as, $on){\n        $this->join .= self::RIGHT_OUTER_JOIN.' {#}'.$table_name.' as '.$as.' ON '.$on.PHP_EOL;\n        return $this;\n    }\n\n    /**\n     *  \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n     *\n     * @param string $on_field \u0418\u043c\u044f \u043f\u043e\u043b\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     * @param array $user_fields \u041f\u043e\u043b\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n     * @param boolean $join_direction \u041a\u0430\u043a \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443: left|right|inner\n     * @param string $as \u041f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @return $this\n     */\n    public function joinUser($on_field = 'user_id', $user_fields = [], $join_direction = false, $as = 'u') {\n\n        if (!$user_fields) {\n            $user_fields = [\n                $as . '.nickname'        => 'user_nickname',\n                $as . '.slug'            => 'user_slug',\n                $as . '.is_deleted'      => 'user_is_deleted',\n                $as . '.groups'          => 'user_groups',\n                $as . '.avatar'          => 'user_avatar',\n                $as . '.privacy_options' => 'user_privacy_options'\n            ];\n        }\n\n        foreach ($user_fields as $field => $alias) {\n            $this->select($field, $alias);\n        }\n\n        switch ($join_direction) {\n\n            case 'left':\n                $this->joinLeft('{users}', $as, $as . '.id = i.' . $on_field);\n                break;\n\n            case 'right':\n                $this->joinRight('{users}', $as, $as . '.id = i.' . $on_field);\n                break;\n\n            default:\n                $this->join('{users}', $as, $as . '.id = i.' . $on_field);\n                break;\n        }\n\n        return $this;\n    }\n\n    public function joinUserLeft($on_field='user_id', $user_fields=array()){\n\t\treturn $this->joinUser($on_field, $user_fields, 'left');\n\t}\n\n\tpublic function joinUserRight($on_field='user_id', $user_fields=array()){\n\t\treturn $this->joinUser($on_field, $user_fields, 'right');\n\t}\n\n    public function joinSessionsOnline($as = 'u') {\n\n        if(!empty($this->joined_session_online[$as])){ return $this; }\n\n        $this->joinLeft('sessions_online', 'online', 'online.user_id = '.$as.'.id');\n        $this->select('IF(online.date_created IS NOT NULL AND TIMESTAMPDIFF(SECOND, online.date_created, NOW()) <= '.cmsUser::USER_ONLINE_INTERVAL.', 1, 0)', 'is_online');\n\n        $this->joined_session_online[$as] = true;\n\n        return $this;\n\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n     *\n     * @param array|string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f \u0438\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043b\u0435\u0439\n     * @return $this\n     */\n    public function groupBy($field) {\n\n        $group_by = [];\n\n        if (!is_array($field)) {\n            $field = [$field];\n        }\n\n        foreach ($field as $field_name) {\n\n            if (strpos($field_name, '.') === false) {\n                $field_name = 'i.' . $field_name;\n            }\n\n            $group_by[] = $field_name;\n        }\n\n        $this->group_by = implode(', ', $group_by);\n\n        return $this;\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0435 HAVING \u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439\n     *\n     * @param string $condition \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n     * @return $this\n     */\n    public function havingRaw($condition) {\n\n        if (!$this->group_by) {\n            return $this;\n        }\n\n        $this->group_by .= PHP_EOL . 'HAVING ' . $condition;\n\n        return $this;\n    }\n\n    /**\n     * \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 HAVING \u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439\n     *\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param string $operator \u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\n     * @param mixed $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     * @return $this\n     */\n    public function having($field, $operator, $value) {\n\n        $value = $this->db->escape($value);\n\n        return $this->havingRaw(\"{$field} {$operator} '{$value}'\");\n    }\n\n    /**\n     * \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435\n     * @param string $index_name \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0432 \u0411\u0414\n     * @param string $action FORCE | IGNORE | USE\n     * @param int $for 1 - FOR JOIN, 2 - FOR ORDER BY, 3 - FOR GROUP BY\n     * @return \\cmsModel\n     */\n    protected function indexHint($index_name, $action, $for='') {\n        switch ($for) {\n            case 1:\n                $for_action = 'FOR JOIN';\n                break;\n            case 2:\n                $for_action = 'FOR ORDER BY';\n                break;\n            case 3:\n                $for_action = 'FOR GROUP BY';\n                break;\n            default:\n                $for_action = '';\n                break;\n        }\n        $this->index_action .= \"{$action} INDEX {$for_action} ({$index_name})\\n\";\n        return $this;\n    }\n\n    public function forceIndex($index_name, $for='') {\n        return $this->indexHint($index_name, 'FORCE', $for);\n    }\n\n    public function ignoreIndex($index_name, $for='') {\n        return $this->indexHint($index_name, 'IGNORE', $for);\n    }\n\n    public function useIndex($index_name, $for='') {\n        return $this->indexHint($index_name, 'USE', $for);\n    }\n\n    /**\n     * \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u043f\u043e\u043b\u044e, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\n     * \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u0435 \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u0435\u0441\u0442\u044c, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u043d\u0435\u043c\u0443\n     *\n     * @param string $field \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 \u0411\u0414 \u0431\u0435\u0437 \u044f\u0437\u044b\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\n     * @param string $direction \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n     * @param string $table \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u044f\u0447\u0435\u0439\u043a\u0430. \u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\n     * @return $this\n     */\n    public function orderByTranslatedField($field, $direction = 'asc', $table = '') {\n\n        return $this->orderBy($this->getTranslatedFieldName($field, $table), $direction);\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443\n     *\n     * @param string $order_by\n     * @return $this\n     */\n    public function orderByRaw($order_by) {\n\n        $this->order_by = $order_by;\n\n        return $this;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443\n     *\n     * @param string $field \u041f\u043e\u043b\u0435 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n     * @param string $direction \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n     * @param boolean $is_force_index_by_field deprecated\n     * @return $this\n     */\n    public function orderBy($field, $direction = '', $is_force_index_by_field = false) {\n\n        if (strpos($field, '(') !== false) {\n            return $this;\n        } // \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u043f\u043e\u043b\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n        if ($direction) {\n            $direction = strtolower($direction) === 'desc' ? 'desc' : 'asc';\n        }\n        if (strpos($field, '.') === false) {\n            $field = 'i.' . $field;\n        }\n\n        return $this->orderByRaw($field . ' ' . $direction);\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443\n     *\n     * @param array $list \u041c\u0430\u0441\u0441\u0438\u0432 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0441 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 by \u0438 to\n     * @return $this\n     */\n    public function orderByList($list) {\n\n        $this->order_by = '';\n\n        if (is_array($list)) {\n\n            foreach ($list as $o) {\n\n                if (strpos($o['by'], '(') !== false) {\n                    continue;\n                }\n\n                $field     = $o['by'];\n                $direction = strtolower($o['to']) === 'desc' ? 'desc' : 'asc';\n\n                if (empty($o['strict']) && strpos($field, '.') === false) {\n                    $field = 'i.' . $field;\n                }\n                if ($this->order_by) {\n                    $this->order_by .= ', ';\n                }\n                $this->order_by .= $field . ' ' . $direction;\n            }\n        }\n\n        return $this;\n    }\n\n    public function limit($from, $howmany = 0) {\n\n        $this->limit = (int) $from;\n        $howmany     = (int) $howmany;\n\n        if ($this->limit < 0) {\n            $this->limit = 0;\n        }\n\n        if ($howmany) {\n            if ($howmany <= 0) {\n                $howmany = 15;\n            }\n            $this->limit .= ', ' . $howmany;\n        }\n\n        return $this;\n    }\n\n    public function limitPage($page, $perpage = 0) {\n\n        $page    = (int) $page;\n        $perpage = (int) $perpage;\n\n        if ($perpage <= 0) {\n            $perpage = $this->perpage;\n        }\n\n        return $this->limit(($page - 1) * $perpage, $perpage);\n    }\n\n    public function limitPagePlus($page, $perpage = 0) {\n\n        $page    = (int) $page;\n        $perpage = (int) $perpage;\n\n        if ($perpage <= 0) {\n            $perpage = $this->perpage;\n        }\n\n        return $this->limit(($page - 1) * $perpage, $perpage + 1);\n    }\n\n    public function setPerPage($perpage) {\n\n        $this->perpage = (int) $perpage;\n\n        return $this;\n    }\n\n    public function setReadType($type) {\n\n        $this->read_type = $type;\n\n        return $this;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getField($table_name, $row_id, $field_name) {\n\n        return $this->filterEqual('id', $row_id)->\n                getFieldFiltered($table_name, $field_name);\n    }\n\n    public function getFieldFiltered($table_name, $field_name) {\n\n        $this->selectOnly($field_name);\n\n        $item = $this->getItem($table_name);\n\n        if (!$item) {\n            return false;\n        }\n\n        return $item[$field_name];\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getItem($table_name, $item_callback = false) {\n\n        $this->table = $table_name;\n\n        $this->limit(1);\n\n        $sql = $this->getSQL();\n\n        $encoded_fields = $this->encoded_fields;\n\n        $this->resetFilters();\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0437 \u043a\u0435\u0448\u0430\n        if ($this->cache_key) {\n\n            $cache_key = $this->cache_key . '.' . md5($sql);\n            $cache     = cmsCache::getInstance();\n\n            $item = $cache->get($cache_key);\n\n            if ($item) {\n\n                if (is_callable($item_callback)) {\n                    $item = call_user_func_array($item_callback, [$item, $this]);\n                }\n\n                if ($this->localized) {\n                    $item = $this->replaceTranslatedField($item, $table_name);\n                }\n\n                $this->stopCache();\n\n                return $item;\n            }\n        }\n\n        $result = $this->db->query($sql);\n\n        if (!$this->db->numRows($result)) {\n            return false;\n        }\n\n        $item = $this->db->fetchAssoc($result);\n\n        // \u0434\u043b\u044f \u043a\u0435\u0448\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043b\u043b\u0431\u044d\u043a\u043e\u043c\n        if ($this->cache_key) {\n            $_item = $item;\n        }\n\n        if ($encoded_fields) {\n            foreach ($encoded_fields as $field) {\n                $item[$field] = base64_decode($item[$field]);\n                unset($item['enc_' . $field]);\n            }\n        }\n\n        if (is_callable($item_callback)) {\n            $item = call_user_func_array($item_callback, [$item, $this]);\n        }\n\n        if ($this->localized) {\n            $item = $this->replaceTranslatedField($item, $table_name);\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043a\u0435\u0448\u0435\n        if ($this->cache_key) {\n            $cache->set($cache_key, $_item);\n            $this->stopCache();\n        }\n\n        $this->db->freeResult($result);\n\n        return $item;\n    }\n\n    public function getItemById($table_name, $id, $item_callback = false) {\n\n        return $this->getItemByField($table_name, 'id', $id, $item_callback);\n    }\n\n    public function getItemByField($table_name, $field_name, $field_value, $item_callback = false) {\n\n        return $this->filterEqual($field_name, $field_value)->\n                getItem($table_name, $item_callback);\n    }\n\n//============================================================================//\n//============================================================================//\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\n     *\n     * @param string $table_name \u0418\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @param string $by_field \u041f\u043e\u043b\u0435 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430\n     * @param boolean $reset \u0424\u043b\u0430\u0433 \u0441\u0431\u0440\u043e\u0441\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\n     * @return integer\n     */\n    public function getCount($table_name, $by_field = 'id', $reset = false) {\n\n        if(!$by_field){\n            $select = \"{$this->distinct} 1\";\n        } else {\n            $select = \"COUNT({$this->distinct} i.{$by_field} ) as `count`\";\n        }\n\n        $sql = \"SELECT {$this->straight_join} {$select}\n                FROM {#}{$table_name} i\n                {$this->index_action}\";\n\n        if ($this->join) { $sql .= $this->join; }\n\n        if ($this->where) { $sql .= 'WHERE ' . $this->where . PHP_EOL; }\n\n        if ($this->group_by) { $sql .= 'GROUP BY ' . $this->group_by . PHP_EOL; }\n\n        if ($reset) {\n            $this->resetFilters();\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0437 \u043a\u0435\u0448\u0430\n        if ($this->cache_key) {\n\n            $cache_key = $this->cache_key . '.' . md5($sql);\n            $cache = cmsCache::getInstance();\n\n            if (false !== ($result = $cache->get($cache_key))) {\n                $this->stopCache();\n                return $result;\n            }\n        }\n\n        $result = $this->db->query($sql);\n\n        $num_rows = $this->db->numRows($result);\n\n        if(!$by_field){\n\n            $count = $num_rows;\n\n        } else {\n\n            if (!$num_rows) {\n                $count = 0;\n            } else {\n                $item  = $this->db->fetchAssoc($result);\n                $count = intval($item['count']);\n            }\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043a\u0435\u0448\u0435\n        if ($this->cache_key) {\n            $cache->set($cache_key, $count);\n            $this->stopCache();\n        }\n\n        $this->db->freeResult($result);\n\n        return $count;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044f \u0432\u0441\u0435 \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u043d\u0435\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b\n     *\n     * @param string $table_name \u0418\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @param callable $item_callback \u041a\u043e\u043b\u043b\u0431\u044d\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044f\n     * @param string $key_field \u0418\u043c\u044f \u044f\u0447\u0435\u0439\u043a\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\u0437 \u0411\u0414, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0430\u043d\u0435\u0442 \u043a\u043b\u044e\u0447\u0451\u043c \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n     * @return array\n     */\n    public function get($table_name, $item_callback = false, $key_field = 'id') {\n\n        $this->table = $table_name;\n\n        $items = $_items = [];\n\n        $sql = $this->getSQL();\n\n        $encoded_fields = $this->encoded_fields;\n\n        // \u0441\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u044b\n        $this->resetFilters();\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0437 \u043a\u0435\u0448\u0430\n        if ($this->cache_key) {\n\n            $cache_key = $this->cache_key . '.' . md5($sql);\n\n            $cache = cmsCache::getInstance();\n\n            $_items = $cache->get($cache_key);\n\n            if ($_items !== false) {\n\n                $this->stopCache();\n\n                // \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u043b\u0431\u044d\u043a\u043e\u043c\n                if (is_callable($item_callback)) {\n\n                    foreach ($_items as $key => $item) {\n\n                        $item = call_user_func_array($item_callback, [$item, $this]);\n                        if ($item === false) {\n                            continue;\n                        }\n\n                        if ($this->localized) {\n                            $item = $this->replaceTranslatedField($item, $table_name);\n                        }\n\n                        $items[$key] = $item;\n                    }\n                } else {\n                    return $_items;\n                }\n\n                return $items;\n            } else {\n                $_items = [];\n            }\n        }\n\n        $result = $this->db->query($sql);\n\n        // \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u043b, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043b\u043e\u0436\u044c\n        if (!$this->db->numRows($result)) {\n            return false;\n        }\n\n        // \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0435\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438\n        while ($item = $this->db->fetchAssoc($result)) {\n\n            $key = ($key_field && isset($item[$key_field])) ? $item[$key_field] : false;\n\n            // \u0434\u043b\u044f \u043a\u0435\u0448\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043b\u043b\u0431\u044d\u043a\u043e\u043c\n            if ($this->cache_key) {\n                if ($key) {\n                    $_items[$key] = $item;\n                } else {\n                    $_items[] = $item;\n                }\n            }\n\n            if ($encoded_fields) {\n                foreach ($encoded_fields as $efield) {\n                    $item[$efield] = base64_decode($item[$efield]);\n                    unset($item['enc_' . $efield]);\n                }\n            }\n\n            // \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d \u043a\u043e\u043b\u043b\u0431\u0435\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0442\u0440\u043e\u043a,\n            // \u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u043d\u0435\u0433\u043e\n            if (is_callable($item_callback)) {\n                $item = call_user_func_array($item_callback, [$item, $this]);\n                if ($item === false) {\n                    continue;\n                }\n            }\n\n            if ($this->localized) {\n                $item = $this->replaceTranslatedField($item, $table_name);\n            }\n\n            // \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n            if ($key) {\n                $items[$key] = $item;\n            } else {\n                $items[] = $item;\n            }\n        }\n\n        // \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u043a\u043b\u044e\u0447 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        // \u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043a\u0435\u0448\u0435\n        // \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043b\u043b\u0431\u044d\u043a\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\n        if ($this->cache_key) {\n            $cache->set($cache_key, $_items);\n            $this->stopCache();\n        }\n\n        $this->db->freeResult($result);\n\n        // \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438\n        return $items;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function getSQL() {\n\n        $select = implode(', ', $this->select);\n\n        $sql = \"SELECT {$this->distinct} {$this->straight_join} {$select}\n                FROM {#}{$this->table} i\n                {$this->index_action}\";\n\n        if ($this->join) {\n            $sql .= $this->join;\n        }\n\n        if ($this->where) {\n            $sql .= 'WHERE ' . $this->where . PHP_EOL;\n        }\n\n        if ($this->group_by) {\n            $sql .= 'GROUP BY ' . $this->group_by . PHP_EOL;\n        }\n\n        if ($this->order_by) {\n            $sql .= 'ORDER BY ' . $this->order_by . PHP_EOL;\n        }\n\n        if ($this->limit) {\n            $sql .= 'LIMIT ' . $this->limit . PHP_EOL;\n        }\n\n        if ($this->read_type) {\n            $sql .= $this->read_type . PHP_EOL;\n        }\n\n        return $sql;\n    }\n\n//============================================================================//\n//============================================================================//\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u043b\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435\n     * \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     *\n     * @param string $table \u0422\u0430\u0431\u043b\u0438\u0446\u0430\n     * @param string $field \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f\n     * @param integer $default \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n     * @param string $dir \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435: MAX \u0438\u043b\u0438 MIN\n     * @return integer\n     */\n    public function getMax($table, $field, $default = 0, $dir = 'MAX') {\n\n        $sql = \"SELECT {$dir}(i.{$field}) as {$field}\n                FROM {#}{$table} i\n                \";\n\n        if ($this->where) {\n            $sql .= 'WHERE ' . $this->where . PHP_EOL;\n        }\n\n        $sql .= 'LIMIT 1';\n\n        $result = $this->db->query($sql);\n\n        $this->resetFilters();\n\n        if (!$this->db->numRows($result)) {\n            return $default;\n        }\n\n        $max = $this->db->fetchAssoc($result);\n\n        $this->db->freeResult($result);\n\n        return $max[$field] ?: 0;\n    }\n\n    public function getMin($table, $field, $default = 0) {\n        return $this->getMax($table, $field, $default, 'MIN');\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\n     * @param string $table\n     * @param string $where\n     * @return int\n     */\n    public function getMaxOrdering($table){\n\n        return $this->getMax($table, 'ordering');\n\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     * @param string $table\n     * @param string $where\n     * @return int\n     */\n    public function getNextOrdering($table){\n\n        return $this->getMaxOrdering($table) + 1;\n\n    }\n\n    /**\n     * \u041f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\n     *\n     * @param string $table_name \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0411\u0414\n     * @return boolean\n     */\n    public function reorder($table_name) {\n\n        $list = $this->limit(false)->\n            orderBy('ordering', 'asc')->selectOnly('id')->\n            get($table_name, function ($item, $model) {\n            return $item['id'];\n        }, false) ?: [];\n\n        return $this->reorderByList($table_name, $list);\n    }\n\n    /**\n     * \u0420\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 ID \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     *\n     * @param string $table_name \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0411\u0414\n     * @param array $list \u041c\u0430\u0441\u0441\u0438\u0432 id \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\n     * @param array $additional_fields \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0438 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 ordering\n     * @param string $field_name \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f\n     * @return boolean\n     */\n    public function reorderByList($table_name, $list, $additional_fields = [], $field_name = 'ordering') {\n\n        $ordering = 0;\n\n        foreach ($list as $id) {\n\n            if (is_array($id) || !is_numeric($id)) {\n                continue;\n            }\n\n            $ordering += 1;\n\n            $this->update($table_name, $id, array_merge($additional_fields, [$field_name => $ordering]));\n        }\n\n        return $ordering > 0 ? true : false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u043a \u043c\u043e\u0434\u0435\u043b\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430\n     * \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     * \u041c\u0435\u0442\u043e\u0434 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043e\n     *\n     * @param cmsGrid $grid \u041e\u0431\u044a\u0435\u043a\u0442 \u0433\u0440\u0438\u0434\u0430\n     * @param array $filter\n     * @param string $table_name\n     * @return $this\n     */\n    public function applyGridFilter(cmsGrid $grid, $filter, $table_name = '') {\n\n        $grid->applyGridFilter($this, $filter, $table_name);\n\n        return $this;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043d\u0430 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 $step\n     *\n     * @param string $table \u0418\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param type $step \u0428\u0430\u0433 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n     * @return boolean\n     */\n    public function increment($table, $field, $step = 1) {\n\n        $step = intval($step);\n\n        $sign = $step > 0 ? '+' : '-';\n        $step = abs($step);\n\n        $sql = \"UPDATE {#}{$table} i\n                SET i.{$field} = i.{$field} {$sign} {$step}\n                \";\n\n        if ($this->where) {\n            $sql .= 'WHERE ' . $this->where;\n        }\n\n        $this->resetFilters();\n\n        return $this->db->query($sql, false, true) ? true : false;\n    }\n\n    /**\n     * \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043d\u0430 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 $step \u0441 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u043a\u043e\u043c\n     *\n     * @param string $table \u0418\u043c\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n     * @param string $field \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n     * @param type $step \u0428\u0430\u0433 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n     * @return boolean\n     */\n    public function decrement($table, $field, $step = 1) {\n        return $this->increment($table, $field, $step * -1);\n    }\n\n    /**\n     * \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0435 $name \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \u0411\u0414\n     *\n     * @param string $name \u0418\u043c\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430\n     * @return boolean\n     */\n    public function deleteController($name) {\n\n\t\tif(is_numeric($name)){\n            $controller = $this->getItemById('controllers', $name);\n            $name = $controller['name'];\n\t\t}\n\n        $this->filterEqual('controller', $name)->deleteFiltered('{users}_tabs');\n        $this->filterEqual('listener', $name)->deleteFiltered('events');\n\n        cmsCache::getInstance()->clean('events');\n\n        $rule_ids = $this->selectOnly('id')->filterEqual('controller', $name)->get('perms_rules', function($item, $model){\n            return $item['id'];\n        }, false);\n\n        if($rule_ids){\n            $this->filterIn('rule_id', $rule_ids)->deleteFiltered('perms_users');\n            $this->filterEqual('controller', $name)->deleteFiltered('perms_rules');\n        }\n\n        $this->filterEqual('controller', $name)->deleteFiltered('scheduler_tasks');\n\n        return $this->filterEqual('name', $name)->deleteFiltered('controllers');\n    }\n\n    public function fieldsAfterStore($item, $fields, $action = 'add') {\n\n        foreach ($fields as $field) {\n            $field['handler']->afterStore($item, $this, $action);\n        }\n\n        return $this;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0447\u0435\u0440\u043d\u043e\u0432\u0438\u043a\u0430\u0445\n     * \u0414\u043b\u044f \u043d\u0443\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430\n     * \u0432 \u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u044f\u0445\n     *\n     * @param integer $user_id\n     * @return integer | array\n     */\n    public function getDraftCounts($user_id){\n        return 0;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 $items \u0432 \u0432\u0438\u0434\u0435 \u043f\u043b\u043e\u0441\u043a\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430\n     * \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0432\u044f\u0437\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 parent_id\n     * @param array $items\n     * @param array $result_tree\n     * @param int $parent_id\n     * @param int $level\n     */\n    public static function buildTreeRecursive($items, &$result_tree, $parent_id=0, $level=1){\n        $level++;\n        foreach($items as $item){\n            if ($item['parent_id']==$parent_id){\n                $item['level'] = $level-1;\n                if (!isset($result_tree[$item['id']])){\n                    $result_tree[$item['id']] = $item;\n                }\n                self::buildTreeRecursive($items, $result_tree, $item['id'], $level);\n            }\n        }\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 YAML\n     * @param array $input_array\n     * @param integer $indent\n     * @param integer $word_wrap\n     * @return string\n     */\n    public static function arrayToYaml($input_array, $indent = 2, $word_wrap = 40) {\n\n        $array = [];\n\n        if (cmsConfig::get('native_yaml')) {\n\n            if (!empty($input_array)) {\n                $array = $input_array;\n            }\n\n            return yaml_emit($array, YAML_UTF8_ENCODING);\n        }\n\n        if (!empty($input_array)) {\n            foreach ($input_array as $key => $value) {\n                $_k = str_replace(['[', ']'], '', $key); // \u0431\u044b\u043b \u0444\u0430\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0430\u0433, \u0435\u0441\u043b\u0438 \u0432 \u043a\u043b\u044e\u0447\u0430\u0445 \u044d\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u044b\n                $array[$_k] = $value;\n            }\n        }\n\n        return Spyc::YAMLDump($array, $indent, $word_wrap);\n    }\n\n    /**\n     * \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 YAML \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n     * @param string $yaml\n     * @return array\n     */\n    public static function yamlToArray($yaml) {\n\n        if (!$yaml) { return []; }\n\n        if (is_array($yaml)) { return $yaml; }\n\n        if ($yaml === \"---\\n- 0\\n\") { return []; }\n        if ($yaml === \"---\\n- \\\"0\\\"\\n...\\n\") { return []; }\n\n        if (cmsConfig::get('native_yaml')) {\n            return yaml_parse($yaml);\n        }\n\n        return Spyc::YAMLLoadString($yaml);\n    }\n\n    /**\n     * \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443\n     * @param array $input_array\n     * @return string\n     */\n    public static function arrayToString($input_array) {\n        if (!is_array($input_array)) {\n            return null;\n        }\n        return json_encode($input_array, JSON_UNESCAPED_UNICODE);\n    }\n\n    /**\n     * \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n     * @param string $string\n     * @return array\n     */\n    public static function stringToArray($string) {\n        if (!$string) { return []; }\n        return (array) json_decode($string, true);\n    }\n\n    /**\n     * \u041a\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n     * @param string $key \u041a\u043b\u044e\u0447\n     * @param mixed $data \u0414\u0430\u043d\u043d\u044b\u0435\n     */\n    public static function cacheResult($key, $data) {\n        self::$cached[$key] = $data;\n    }\n    public static function getCachedResult($key) {\n        if (isset(self::$cached[$key])) {\n            return self::$cached[$key];\n        }\n        return null;\n    }\n\n}\n", "<?php\n\nnamespace icms\\traits\\controllers\\actions;\n\nuse cmsUser, cmsGrid, cmsForm;\n\n/**\n * \u0422\u0440\u0435\u0439\u0442 \u0434\u043b\u044f \u044d\u043a\u0448\u0435\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0430 \u0433\u0440\u0438\u0434\u0430\n *\n * @property \\cmsTemplate $cms_template\n * @property \\cmsUser $cms_user\n * @property \\cmsRequest $request\n * @property \\cmsModel $model\n * @property \\cmsGrid $grid\n *\n */\ntrait listgrid {\n\n    /**\n     * \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0411\u0414\n     * @required\n     * @var string\n     */\n    protected $table_name = '';\n\n    /**\n     * \u0418\u043c\u044f \u0433\u0440\u0438\u0434\u0430\n     * @required\n     * @var string\n     */\n    protected $grid_name = '';\n\n    /**\n     * \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0433\u0440\u0438\u0434\u0430\n     * @var array\n     */\n    protected $grid_args = false;\n\n    /**\n     * URL \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0433\u0440\u0438\u0434\u0430\n     * @var string\n     */\n    protected $grid_url = '';\n\n    /**\n     * \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n     * @var string\n     */\n    protected $title = '';\n\n    /**\n     * \u041a\u043d\u043e\u043f\u043a\u0438 \u0442\u0443\u043b\u0431\u0430\u0440\u0430\n     * @var array\n     */\n    protected $tool_buttons = [];\n\n    /**\n     * \u0418\u043c\u044f \u0445\u0443\u043a\u0430 \u0434\u043b\u044f \u0442\u0443\u043b\u0431\u0430\u0440\u0430\n     * @var ?string\n     */\n    protected $toolbar_hook = null;\n\n    /**\n     * \u041a\u043e\u043b\u043b\u0431\u044d\u043a \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0433\u0434\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445\n     * @var callable\n     */\n    protected $list_callback = null;\n\n    /**\n     * \u041a\u043e\u043b\u043b\u0431\u044d\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n     * @var ?callable\n     */\n    protected $items_callback = null;\n\n    /**\n     * \u041a\u043e\u043b\u043b\u0431\u044d\u043a, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434 get \u043c\u043e\u0434\u0435\u043b\u0438\n     * @var ?callable\n     */\n    protected $item_callback = null;\n\n    /**\n     * \u041a\u043e\u043b\u043b\u0431\u044d\u043a \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\n     * @var callable\n     */\n    protected $filter_callback = null;\n\n    /**\n     * \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u044d\u043a\u0448\u0435\u043d\u0443\n     * @var string\n     */\n    protected $external_action_prefix = '';\n\n    /**\n     * \u041a\u043b\u044e\u0447 UPS\n     * @var string\n     */\n    protected $ups_key = '';\n\n    /**\n     * \u0413\u0440\u0438\u0434\n     * @var array\n     */\n    protected $grid;\n\n    /**\n     * \u041a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n     * @var integer\n     */\n    protected $default_perpage = 30;\n\n    /**\n     * \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0432 run\n     */\n    public function prepareRun() {}\n\n    /**\n     * \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u044d\u043a\u0448\u0435\u043d\u0430\n     *\n     * @param mixed $do\n     * @param mixed $param_two\n     * @return string\n     */\n    public function run($do = null, $param_two = null){\n\n        // \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u044d\u043a\u0448\u0435\u043d\u0443\n        if ($do && !is_numeric($do)) {\n\n            $this->runExternalAction($this->external_action_prefix.$do, array_slice($this->params, 1));\n            return;\n        }\n\n        $this->prepareRun();\n\n        $this->setListGridParams();\n\n        if ($this->request->isAjax()) {\n\n            header('X-Frame-Options: DENY');\n\n            // \u0415\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438\n            if ($this->request->has('save_row_field')) {\n\n                return $this->cms_template->renderJSON($this->saveRowField($this->request->getAll()));\n            }\n\n            // \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n            return $this->cms_template->renderJSON($this->getListItems());\n        }\n\n        return $this->renderListItemsGrid();\n    }\n\n    /**\n     * \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0433\u0440\u0438\u0434\u0430\n     *\n     * @param array $field_data\n     * @return array\n     */\n    public function saveRowField($field_data) {\n\n        if (empty($field_data['csrf_token']) || !cmsForm::validateCSRFToken($field_data['csrf_token'])) {\n            return ['error' => LANG_ERROR . ' #csrf_token'];\n        }\n\n        if (!$field_data) {\n            return ['error' => LANG_ERROR . ' #empty data'];\n        }\n\n        if (empty($field_data['name']) || !is_string($field_data['name'])) {\n\n            return $this->cms_template->renderJSON([\n                'error' => LANG_ERROR . ' #empty data name'\n            ]);\n        }\n\n        if (!array_key_exists('value', $field_data) || is_array($field_data['value'])) {\n\n            return $this->cms_template->renderJSON([\n                'error' => LANG_ERROR . ' #empty data value'\n            ]);\n        }\n\n        if (empty($field_data['id']) || !is_numeric($field_data['id'])) {\n            return ['error' => LANG_ERROR . ' #empty id'];\n        }\n\n        $i = $this->model->getItemByField($this->table_name, 'id', $field_data['id']);\n        if (!$i) {\n            return ['error' => LANG_ERROR . ' #404'];\n        }\n\n        if (!array_key_exists($field_data['name'], $i)) {\n            return ['error' => LANG_ERROR . ' #no field'];\n        }\n\n        $error = $this->grid->validateColumnValue($field_data['name'], $field_data['value']);\n\n        if ($error !== true) {\n            return ['error' => $error];\n        }\n\n        $field_name = $field_data['name'];\n\n        $disable_language_context = $this->grid->getGridValue('columns:' . $field_name . ':editable:language_context');\n\n        if (!$disable_language_context) {\n\n            // \u0418\u0449\u0435\u043c \u043f\u043e\u043b\u0435 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u044f\u0437\u044b\u043a\u0435\n            $field_name = $this->model->getTranslatedFieldName($field_name, $this->table_name);\n\n            // \u041c\u043e\u0433\u043b\u043e \u0431\u044b\u0442\u044c \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445\n            if (!array_key_exists($field_name, $i)) {\n                return ['error' => LANG_ERROR . ' #no translated field'];\n            }\n        }\n\n        $this->model->update($this->table_name, $i['id'], [\n            $field_name => strip_tags($field_data['value'])\n        ]);\n\n        $this->model->limit(1)->filterEqual('id', $field_data['id']);\n\n        $row_data = $this->getListItems(true);\n\n        if (empty($row_data['rows'][0])) {\n            return ['error' => LANG_ERROR . ' #no row data'];\n        }\n\n        return [\n            'error' => false,\n            'row'   => $row_data['rows'][0]\n        ];\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0433\u0440\u0438\u0434\n     *\n     * @return void\n     */\n    public function setListGridParams() {\n\n        $this->ups_key = 'grid_filter.' . $this->ups_key . $this->name . '_' . $this->grid_name;\n\n        $this->grid = new cmsGrid($this->controller, $this->grid_name, $this->grid_args);\n\n        if (!$this->grid->isLoaded()) {\n\n            return cmsCore::error($this->grid->getError());\n        }\n\n        $this->grid->source_url = $this->grid_url ? $this->grid_url : $this->cms_template->href_to($this->current_action, $this->params);\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML \u0433\u0440\u0438\u0434\u0430\n     *\n     * @return string\n     */\n    public function getListItemsGridHtml(){\n\n        $this->cms_template->addToolButtons($this->tool_buttons);\n\n        if ($this->toolbar_hook) {\n\n            $this->cms_template->applyToolbarHook($this->toolbar_hook);\n        }\n\n        return $this->cms_template->getRenderedAsset('ui/grid-data', [\n            'grid'       => $this->grid,\n            'rows'       => $this->getListItems(),\n            'page_title' => $this->title\n        ]);\n    }\n\n    /**\n     * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0433\u0440\u0438\u0434 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438\n     * CSS \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432\u044b\u0437\u043e\u0432\u0430\n     *\n     * @return string\n     */\n    public function renderListItemsGrid(){\n\n        $html = $this->getListItemsGridHtml();\n\n        if ($this->request->isStandard()) {\n            $this->cms_template->addOutput($html);\n        }\n\n        $css_file = $this->cms_template->getStylesFileName();\n\n        if ($css_file) {\n            $this->cms_template->addCSSFromContext($css_file, $this->request);\n        }\n\n        return $html;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0434\u043b\u044f \u0433\u0440\u0438\u0434\u0430\n     *\n     * @param boolean $ignore_field \u0418\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\n     * @return type\n     */\n    public function getListItems($ignore_field = false){\n\n        if (!$ignore_field) {\n\n            $this->model->setPerPage($this->default_perpage);\n\n            $visible_columns = cmsUser::getUPSActual($this->ups_key.'.visible_columns', $this->request->get('visible_columns', []));\n\n            if ($visible_columns) {\n\n                $switchable_columns = $this->grid->getSwitchableColumns();\n\n                if ($switchable_columns) {\n                    foreach ($switchable_columns as $name => $column) {\n                        if (!in_array($name, $visible_columns)) {\n                            $this->grid->disableColumn($name);\n                        } else {\n                            $this->grid->enableColumn($name);\n                        }\n                    }\n                }\n            }\n\n            $filter     = $this->grid->filter;\n            $pre_filter = cmsUser::getUPSActual($this->ups_key, $this->request->get('filter', ''));\n\n            if ($pre_filter) {\n                parse_str($pre_filter, $filter);\n            }\n\n            if ($filter) {\n\n                if ($this->filter_callback) {\n                    $filter = call_user_func_array($this->filter_callback, [$filter]);\n                }\n\n                $this->grid->applyGridFilter($this->model, $filter, $this->table_name);\n            }\n        }\n\n        if($this->list_callback){\n            $this->model = call_user_func_array($this->list_callback, [$this->model]);\n        }\n\n        $total = $this->model->getCount($this->table_name);\n\n        $data = $this->model->get($this->table_name, $this->item_callback) ?: [];\n\n        if($this->items_callback){\n            $data = call_user_func_array($this->items_callback, [$data]);\n        }\n\n        return $this->grid->makeGridRows($data, $total);\n    }\n\n}\n", "[info]\ntitle = \"InstantCMS Update\"\nimage = \"package.png\"\n\n[install]\ntype = \"system\"\n\n[version]\nmajor = \"2\"\nminor = \"16\"\nbuild = \"1\"\ndate  = \"20230912\"\n\n[depends]\ncore = \"2.16.0\"\n\n[author]\nname = \"InstantCMS Team\"\nurl = \"https://instantcms.ru\"\n\n[description]\ntext[] = \"Release details:\"\ntext[] = \"https://instantcms.ru/novosti/release2161.html\"\n", "[info]\ntitle = \"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 InstantCMS\"\nimage = \"package.png\"\n\n[install]\ntype = \"system\"\n\n[version]\nmajor = \"2\"\nminor = \"16\"\nbuild = \"1\"\ndate  = \"20230912\"\n\n[depends]\ncore = \"2.16.0\"\n\n[author]\nname = \"InstantCMS Team\"\nurl = \"https://instantcms.ru\"\n\n[description]\ntext[] = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f:\"\ntext[] = \"https://instantcms.ru/novosti/release2161.html\"\n"], "filenames": ["system/config/version.ini", "system/controllers/admin/frontend.php", "system/controllers/moderation/backend/actions/logs.php", "system/core/grid.php", "system/core/model.php", "system/traits/controllers/actions/listgrid.php", "update/current/manifest.en.ini", "update/current/manifest.ru.ini"], "buggy_code_start_loc": [5, 710, 5, 242, 1199, 340, 12, 12], "buggy_code_end_loc": [6, 728, 173, 545, 2262, 341, 13, 13], "fixing_code_start_loc": [5, 710, 5, 242, 1199, 340, 12, 12], "fixing_code_end_loc": [6, 736, 158, 551, 2292, 341, 13, 13], "type": "CWE-89", "message": " SQL Injection in GitHub repository instantsoft/icms2 prior to 2.16.1.", "other": {"cve": {"id": "CVE-2023-4928", "sourceIdentifier": "security@huntr.dev", "published": "2023-09-13T01:15:07.893", "lastModified": "2023-09-15T13:29:36.227", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": " SQL Injection in GitHub repository instantsoft/icms2 prior to 2.16.1."}, {"lang": "es", "value": "Inyecci\u00f3n SQL en el repositorio de GitHub instantsoft/icms2 anterior a 2.16.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:instantcms:icms2:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.16.1", "matchCriteriaId": "B25EE390-12B6-448E-9705-FEE1DA42364F"}]}]}], "references": [{"url": "https://github.com/instantsoft/icms2/commit/3a6b148fa2c943ee7647e0cd14bf68e026b15548", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/cb72cc17-5a0d-4392-9a5f-a13aa773de9e", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/instantsoft/icms2/commit/3a6b148fa2c943ee7647e0cd14bf68e026b15548"}}