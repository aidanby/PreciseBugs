{"buggy_code": ["/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.para.core.utils;\n\nimport com.erudika.para.core.ParaObject;\nimport com.erudika.para.core.annotations.Email;\nimport com.samskivert.mustache.Mustache;\nimport com.vladsch.flexmark.ast.Link;\nimport com.vladsch.flexmark.ext.autolink.AutolinkExtension;\nimport com.vladsch.flexmark.ext.emoji.EmojiExtension;\nimport com.vladsch.flexmark.ext.emoji.EmojiImageType;\nimport com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension;\nimport com.vladsch.flexmark.ext.gfm.tasklist.TaskListExtension;\nimport com.vladsch.flexmark.ext.media.tags.MediaTagsExtension;\nimport com.vladsch.flexmark.ext.tables.TablesExtension;\nimport com.vladsch.flexmark.html.AttributeProvider;\nimport com.vladsch.flexmark.html.HtmlRenderer;\nimport com.vladsch.flexmark.html.IndependentAttributeProviderFactory;\nimport com.vladsch.flexmark.html.renderer.AttributablePart;\nimport com.vladsch.flexmark.html.renderer.LinkResolverContext;\nimport com.vladsch.flexmark.parser.Parser;\nimport com.vladsch.flexmark.util.ast.Document;\nimport com.vladsch.flexmark.util.ast.Node;\nimport com.vladsch.flexmark.util.data.MutableDataHolder;\nimport com.vladsch.flexmark.util.data.MutableDataSet;\nimport com.vladsch.flexmark.util.html.MutableAttributes;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.net.MalformedURLException;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.text.DateFormatSymbols;\nimport java.text.MessageFormat;\nimport java.text.NumberFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.regex.Pattern;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.validation.constraints.NotNull;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.lang3.LocaleUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.commons.lang3.time.DateFormatUtils;\nimport org.apache.commons.text.StringEscapeUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.safety.Safelist;\nimport org.mindrot.jbcrypt.BCrypt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Miscellaneous Para utilities.\n * @author Alex Bogdanovski [alex@erudika.com]\n */\n@SuppressWarnings(\"unchecked\")\npublic final class Utils {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(Utils.class);\n\t// maps lowercase simple names to class objects\n\tprivate static final Pattern EMAIL_PATTERN = Pattern.compile(Email.EMAIL_PATTERN);\n\tprivate static final NumberFormat NUMBER_FORMAT = NumberFormat.getInstance();\n\tprivate static final Safelist SAFE_HTML_TAGS = getHTMLTagsWhitelist();\n\tprivate static final MutableDataHolder MD_OPTIONS = getMarkdownOptions();\n\tprivate static final Parser MD_PARSER = Parser.builder(MD_OPTIONS).build();\n\tprivate static final HtmlRenderer HTML_RENDERER_STRICT = HtmlRenderer.builder(MD_OPTIONS).build();\n\tprivate static final HtmlRenderer HTML_RENDERER_LOOSE = HtmlRenderer.\n\t\t\tbuilder(MD_OPTIONS.set(HtmlRenderer.ESCAPE_HTML, false)).build();\n\n\tprivate static HumanTime humantime;\n\tprivate static Utils instance;\n\n\t//////////  ID GEN VARS  //////////////\n\tprivate static final long TIMER_OFFSET = 1310084584692L; // ~July 2011\n\tprivate static final long WORKER_ID_BITS = 5L;\n\tprivate static final long DATACENTER_ID_BITS = 5L;\n\tprivate static final long MAX_WORKER_ID = -1L ^ (-1L << WORKER_ID_BITS);\n\tprivate static final long MAX_DATACENTER_ID = -1L ^ (-1L << DATACENTER_ID_BITS);\n\tprivate static final long SEQUENCE_BITS = 12L;\n\tprivate static final long WORKER_ID_SHIFT = SEQUENCE_BITS;\n\tprivate static final long DATACENTER_ID_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS;\n\tprivate static final long TIMESTAMP_LEFT_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS + DATACENTER_ID_BITS;\n\tprivate static final long SEQUENCE_MASK = -1L ^ (-1L << SEQUENCE_BITS);\n\tprivate static long lastTimestamp = -1L;\n\tprivate static long dataCenterId = 0L;\t// only one datacenter atm\n\tprivate static long workerId;\t// max 1024\n\tprivate static long sequence = 0L;\n\n\tstatic {\n\t\tinitIdGenerator();\n\t\tNUMBER_FORMAT.setMinimumFractionDigits(2);\n\t\tNUMBER_FORMAT.setMaximumFractionDigits(2);\n\t}\n\n\tprivate Utils() { }\n\n\t/**\n\t * Returns an instance of this class.\n\t * @return an instance\n\t */\n\tpublic static Utils getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new Utils();\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * HumanTime - a relative time formatter.\n\t * @return humantime instance\n\t */\n\tpublic static HumanTime getHumanTime() {\n\t\tif (humantime == null) {\n\t\t\thumantime = new HumanTime();\n\t\t}\n\t\treturn humantime;\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   INIT FUNCTIONS\n\t/////////////////////////////////////////////\n\n\tprivate static void initIdGenerator() {\n\t\tString workerID = Para.getConfig().workerId();\n\t\tworkerId = NumberUtils.toLong(workerID, 1);\n\n\t\tif (workerId > MAX_WORKER_ID || workerId < 0) {\n\t\t\tworkerId = ThreadLocalRandom.current().nextInt((int) MAX_WORKER_ID + 1);\n\t\t}\n\n\t\tif (dataCenterId > MAX_DATACENTER_ID || dataCenterId < 0) {\n\t\t\tdataCenterId =  ThreadLocalRandom.current().nextInt((int) MAX_DATACENTER_ID + 1);\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   HASH UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * md5 hash function.\n\t * @param s the string to be hashed\n\t * @return an md5 hash\n\t */\n\tpublic static String md5(String s) {\n\t\tif (s == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\t\tmd.update(s.getBytes());\n\n\t\t\tbyte[] byteData = md.digest();\n\n\t\t\t//convert the byte to hex format method 1\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (int i = 0; i < byteData.length; i++) {\n\t\t\t\tsb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t} catch (NoSuchAlgorithmException ex) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * Computes the HmacSHA256 hash of a message.\n\t * @param message a message as UTF-8 encoded string\n\t * @param secret a secret key\n\t * @return base64(hmacSHA256(message, secret))\n\t */\n\tpublic static String hmacSHA256(String message, String secret) {\n\t\ttry {\n\t\t\tMac hmac = Mac.getInstance(\"HmacSHA256\");\n\t\t\thmac.init(new SecretKeySpec(secret.getBytes(Para.getConfig().defaultEncoding()), \"HmacSHA256\"));\n\t\t\treturn Utils.base64enc(hmac.doFinal(message.getBytes(Para.getConfig().defaultEncoding())));\n\t\t} catch (Exception e) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * bcrypt hash function implemented by Spring Security.\n\t *\n\t * @param s the string to be hashed\n\t * @return the hash\n\t */\n\tpublic static String bcrypt(String s) {\n\t\treturn (s == null) ? s : BCrypt.hashpw(s, BCrypt.gensalt(12));\n\t}\n\n\t/**\n\t * Checks if a hash matches a string.\n\t *\n\t * @param plain plain text string\n\t * @param storedHash hashed string\n\t * @return true if the hash matches\n\t */\n\tpublic static boolean bcryptMatches(String plain, String storedHash) {\n\t\tif (StringUtils.isBlank(plain) || StringUtils.isBlank(storedHash)) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn BCrypt.checkpw(plain, storedHash);\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Generates an authentication token - a random string encoded in Base64.\n\t * @param length the length of the generated token\n\t * @param urlSafe switches to a URL safe encoding\n\t * @return a random string\n\t */\n\tpublic static String generateSecurityToken(int length, boolean urlSafe) {\n\t\tfinal byte[] bytes = new byte[length];\n\t\tSecureRandom rand;\n\t\ttry {\n\t\t\trand = SecureRandom.getInstance(\"SHA1PRNG\");\n\t\t} catch (NoSuchAlgorithmException ex) {\n\t\t\tlogger.error(null, ex);\n\t\t\trand = new SecureRandom();\n\t\t}\n\t\trand.nextBytes(bytes);\n\t\treturn urlSafe ? base64encURL(bytes) : base64enc(bytes);\n\t}\n\n\t/**\n\t * Generates an authentication token - a random string encoded in Base64.\n\t * @param length the length of the generated token\n\t * @return a random string\n\t */\n\tpublic static String generateSecurityToken(int length) {\n\t\treturn generateSecurityToken(length, false);\n\t}\n\n\t/**\n\t * Generates an authentication token - a random 32 byte string encoded in Base64.\n\t * @return a random string\n\t */\n\tpublic static String generateSecurityToken() {\n\t\treturn generateSecurityToken(32);\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   STRING UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Escapes JavaScript.\n\t * @param str a javascript string\n\t * @return the escaped javascript string\n\t */\n\tpublic static String escapeJavascript(String str) {\n\t\treturn (str == null) ? \"\" : StringEscapeUtils.escapeEcmaScript(str);\n\t}\n\n\t/**\n\t * Strips all HTML tags from a string.\n\t * @param html HTML string\n\t * @return just the text\n\t */\n\tpublic static String stripHtml(String html) {\n\t\treturn (html == null) ? \"\" : Jsoup.parse(html).text();\n\t}\n\n\t/**\n\t * Converts Markdown to HTML.\n\t * @param markdownString Markdown\n\t * @return HTML\n\t */\n\tpublic static String markdownToHtml(String markdownString) {\n\t\treturn markdownToHtml(markdownString, false);\n\t}\n\n\t/**\n\t * Converts Markdown to HTML.\n\t * @param markdownString Markdown\n\t * @param htmlTagsRenderingEnabled if true, basic HTML tags will be rendered instead of escaped\n\t * @return HTML\n\t */\n\tpublic static String markdownToHtml(String markdownString, boolean htmlTagsRenderingEnabled) {\n\t\tif (StringUtils.isBlank(markdownString)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tDocument parsed = MD_PARSER.parse(markdownString);\n\t\tif (htmlTagsRenderingEnabled) {\n\t\t\treturn Jsoup.clean(HTML_RENDERER_LOOSE.render(parsed), SAFE_HTML_TAGS);\n\t\t} else {\n\t\t\treturn HTML_RENDERER_STRICT.render(parsed);\n\t\t}\n\t}\n\n\t/**\n\t * Compiles a mustache template with a given scope (map of fields and values).\n\t * @param context a map of fields and values\n\t * @param template a Mustache template\n\t * @return the compiled template string\n\t */\n\tpublic static String compileMustache(Map<String, Object> context, String template) {\n\t\tif (context == null || StringUtils.isBlank(template)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tWriter writer = new StringWriter();\n\t\ttry {\n\t\t\tMustache.compiler().escapeHTML(false).emptyStringIsFalse(true).compile(template).execute(context, writer);\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\twriter.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.error(null, e);\n\t\t\t}\n\t\t}\n\t\treturn writer.toString();\n\t}\n\n\t/**\n\t * Abbreviates a string.\n\t * @param str a string\n\t * @param max max length\n\t * @return a substring of that string\n\t */\n\tpublic static String abbreviate(String str, int max) {\n\t\treturn StringUtils.isBlank(str) ? \"\" : StringUtils.abbreviate(str, max);\n\t}\n\n\t/**\n\t * Joins a list of strings to String using a separator.\n\t * @param arr a list of strings\n\t * @param separator a separator string\n\t * @return a string\n\t */\n\tpublic static String arrayJoin(List<String> arr, String separator) {\n\t\treturn (arr == null || separator == null) ? \"\" : StringUtils.join(arr, separator);\n\t}\n\n\t/**\n\t * Strips all symbols, punctuation, whitespace and control chars from a string.\n\t * @param str a dirty string\n\t * @return a clean string\n\t */\n\tpublic static String stripAndTrim(String str) {\n\t\treturn stripAndTrim(str, \"\");\n\t}\n\n\t/**\n\t * Strips all symbols, punctuation, whitespace and control chars from a string.\n\t * @param str a dirty string\n\t * @param replaceWith a string to replace spaces with\n\t * @return a clean string\n\t */\n\tpublic static String stripAndTrim(String str, String replaceWith) {\n\t\treturn stripAndTrim(str, replaceWith, false);\n\t}\n\n\t/**\n\t * Strips all symbols, punctuation, whitespace and control chars from a string.\n\t * @param str a dirty string\n\t * @param replaceWith a string to replace spaces with\n\t * @param asciiOnly if true, all non-ASCII characters will be stripped\n\t * @return a clean string\n\t */\n\tpublic static String stripAndTrim(String str, String replaceWith, boolean asciiOnly) {\n\t\tif (StringUtils.isBlank(str)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString s = str;\n\t\tif (asciiOnly) {\n\t\t\ts = str.replaceAll(\"[^\\\\p{ASCII}]\", \"\");\n\t\t}\n\t\treturn s.replaceAll(\"[\\\\p{S}\\\\p{P}\\\\p{C}]\", replaceWith).replaceAll(\"\\\\p{Z}+\", \" \").trim();\n\t}\n\n\t/**\n\t * Converts spaces to dashes.\n\t * @param str a string with spaces\n\t * @param replaceWith a string to replace spaces with\n\t * @return a string with dashes\n\t */\n\tpublic static String noSpaces(String str, String replaceWith) {\n\t\treturn StringUtils.isBlank(str) ? \"\" : str.trim().replaceAll(\"[\\\\p{C}\\\\p{Z}]+\",\n\t\t\t\tStringUtils.trimToEmpty(replaceWith)).toLowerCase();\n\t}\n\n\t/**\n\t * Formats a messages containing {0}, {1}... etc. Used for translation.\n\t * @param msg a message with placeholders\n\t * @param params objects used to populate the placeholders\n\t * @return a formatted message\n\t */\n\tpublic static String formatMessage(String msg, Object... params) {\n\t\ttry {\n\t\t\t// required by MessageFormat, single quotes break string interpolation!\n\t\t\tmsg = StringUtils.replace(msg, \"'\", \"''\");\n\t\t\treturn StringUtils.isBlank(msg) ? \"\" : MessageFormat.format(msg, params);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\treturn msg;\n\t\t}\n\t}\n\n\t/**\n\t * Encodes a byte array to Base64.\n\t * @param str the byte array\n\t * @return an encoded string\n\t */\n\tpublic static String base64enc(byte[] str) {\n\t\tif (str == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn new String(Base64.encodeBase64(str));\n\t}\n\n\t/**\n\t * Encodes a byte array to Base64. URL safe.\n\t * @param str the byte array\n\t * @return an encoded string\n\t */\n\tpublic static String base64encURL(byte[] str) {\n\t\tif (str == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn new String(Base64.encodeBase64URLSafe(str));\n\t}\n\n\t/**\n\t * Decodes a string from Base64.\n\t * @param str the encoded string\n\t * @return a decoded string\n\t */\n\tpublic static String base64dec(String str) {\n\t\tif (str == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\ttry {\n\t\t\treturn new String(Base64.decodeBase64(str), Para.getConfig().defaultEncoding());\n\t\t} catch (Exception ex) {\n\t\t\tlogger.error(\"Failed to decode base64 string '{}'.\", str, ex);\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   MARKDOWN UTILS\n\t/////////////////////////////////////////////\n\n\tprivate static MutableDataHolder getMarkdownOptions() {\n\t\treturn new MutableDataSet()\n\t\t\t\t.set(HtmlRenderer.ESCAPE_HTML, true)\n\t\t\t\t.set(HtmlRenderer.SUPPRESSED_LINKS, \"(?i)javascript:.*\")\n\t\t\t\t.set(HtmlRenderer.SOFT_BREAK, Para.getConfig().markdownSoftBreak())\n\t\t\t\t.set(HtmlRenderer.AUTOLINK_WWW_PREFIX, \"https://\")\n\t\t\t\t.set(EmojiExtension.USE_IMAGE_TYPE, EmojiImageType.UNICODE_FALLBACK_TO_IMAGE)\n\t\t\t\t// for full GFM table compatibility add the following table extension options:\n\t\t\t\t.set(TablesExtension.COLUMN_SPANS, false)\n\t\t\t\t.set(TablesExtension.APPEND_MISSING_COLUMNS, true)\n\t\t\t\t.set(TablesExtension.DISCARD_EXTRA_COLUMNS, true)\n\t\t\t\t.set(TablesExtension.HEADER_SEPARATOR_COLUMN_MATCH, true)\n\t\t\t\t.set(Parser.EXTENSIONS, Arrays.asList(\n\t\t\t\t\t\tTablesExtension.create(),\n\t\t\t\t\t\tEmojiExtension.create(),\n\t\t\t\t\t\tStrikethroughExtension.create(),\n\t\t\t\t\t\tTaskListExtension.create(),\n\t\t\t\t\t\tAutolinkExtension.create(),\n\t\t\t\t\t\tRelAttributeExtension.create(),\n\t\t\t\t\t\tMediaTagsExtension.create()));\n\t}\n\n\tprivate static Safelist getHTMLTagsWhitelist() {\n\t\tSafelist whitelist = Safelist.relaxed();\n\t\twhitelist.addTags(\"abbr\", \"hr\", \"del\", \"details\", \"summary\", \"center\", \"audio\", \"video\", \"source\");\n\t\twhitelist.addProtocols(\"a\", \"href\", \"#\");\n\t\twhitelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow noreferrer\");\n\t\twhitelist.addAttributes(\"abbr\", \"title\");\n\t\twhitelist.addAttributes(\"th\", \"align\");\n\t\twhitelist.addAttributes(\"td\", \"align\");\n\t\twhitelist.addAttributes(\"code\", \"class\");\n\t\twhitelist.addAttributes(\"div\", \"class\");\n\t\twhitelist.addAttributes(\"a\", \"rel\");\n\t\twhitelist.addAttributes(\"audio\", \"controls\", \"autoplay\", \"muted\", \"loop\");\n\t\twhitelist.addAttributes(\"video\", \"controls\", \"autoplay\", \"muted\", \"playsinline\", \"loop\");\n\t\twhitelist.addAttributes(\"source\", \"src\", \"type\");\n\t\twhitelist.addAttributes(\"details\", \"class\", \"open\");\n\t\twhitelist.addAttributes(\"h1\", \"id\");\n\t\twhitelist.addAttributes(\"h2\", \"id\");\n\t\twhitelist.addAttributes(\"h3\", \"id\");\n\t\twhitelist.addAttributes(\"h4\", \"id\");\n\t\twhitelist.addAttributes(\"h5\", \"id\");\n\t\twhitelist.addAttributes(\"h6\", \"id\");\n\t\twhitelist.addAttributes(\"h7\", \"id\");\n\t\treturn whitelist;\n\t}\n\n\tstatic class RelAttributeExtension implements HtmlRenderer.HtmlRendererExtension {\n\n\t\tpublic void rendererOptions(@NotNull MutableDataHolder options) { }\n\n\t\tpublic void extend(@NotNull HtmlRenderer.Builder htmlRendererBuilder, @NotNull String rendererType) {\n\t\t\thtmlRendererBuilder.attributeProviderFactory(new IndependentAttributeProviderFactory() {\n\t\t\t\tpublic AttributeProvider apply(@NotNull LinkResolverContext context) {\n\t\t\t\t\treturn new RelAttributeProvider();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tstatic RelAttributeExtension create() {\n\t\t\treturn new RelAttributeExtension();\n\t\t}\n\t}\n\n\tstatic class RelAttributeProvider implements AttributeProvider {\n\t\tpublic void setAttributes(@NotNull Node node, @NotNull AttributablePart part, @NotNull MutableAttributes attributes) {\n\t\t\tif (node instanceof Link && part == AttributablePart.LINK) {\n\t\t\t\tattributes.replaceValue(\"rel\", \"nofollow noreferrer\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   DATE UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Formats a date in a specific format.\n\t * @param timestamp the Java timestamp\n\t * @param format the date format\n\t * @param loc the locale instance\n\t * @return a formatted date\n\t */\n\tpublic static String formatDate(Long timestamp, String format, Locale loc) {\n\t\tif (StringUtils.isBlank(format)) {\n\t\t\tformat = DateFormatUtils.ISO_8601_EXTENDED_DATE_FORMAT.getPattern();\n\t\t}\n\t\tif (timestamp == null) {\n\t\t\ttimestamp = timestamp();\n\t\t}\n\t\tif (loc == null) {\n\t\t\tloc = Locale.US;\n\t\t}\n\t\treturn DateFormatUtils.format(timestamp, format, loc);\n\t}\n\n\t/**\n\t * Formats the date for today, in a specific format.\n\t * @param format the date format\n\t * @param loc the locale instance\n\t * @return today's date formatted\n\t */\n\tpublic static String formatDate(String format, Locale loc) {\n\t\treturn formatDate(timestamp(), format, loc);\n\t}\n\n\t/**\n\t * Returns the current year.\n\t * @return this year\n\t */\n\tpublic static int getCurrentYear() {\n\t\treturn Calendar.getInstance().get(Calendar.YEAR);\n\t}\n\n\t/**\n\t * Java timestamp.\n\t * @return {@link java.lang.System#currentTimeMillis()}\n\t */\n\tpublic static long timestamp() {\n\t\treturn System.currentTimeMillis();\n\t}\n\n\t/**\n\t * Returns an array of the months in the Gregorian calendar.\n\t * @param locale the locale used for the months' names\n\t * @return an array of the 12 months\n\t */\n\tpublic static String[] getMonths(Locale locale) {\n\t\tif (locale == null) {\n\t\t\tlocale = Locale.US;\n\t\t}\n\t\tDateFormatSymbols dfs = DateFormatSymbols.getInstance(locale);\n\t\treturn dfs.getMonths();\n\t}\n\n\t/**\n\t * @param localeStr locale string\n\t * @return a {@link Locale} instance from a locale string.\n\t */\n\tpublic static Locale getLocale(String localeStr) {\n\t\ttry {\n\t\t\treturn LocaleUtils.toLocale(localeStr);\n\t\t} catch (Exception e) {\n\t\t\treturn Locale.US;\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   NUMBER UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Rounds a float to an int.\n\t * @param d a float\n\t * @return a rounded int\n\t */\n\tpublic static int round(float d) {\n\t\treturn Math.round(d);\n\t}\n\n\t/**\n\t * Returns the price with two fractional digits at the end.\n\t * @param price a price\n\t * @return $###.##\n\t */\n\tpublic static String formatPrice(double price) {\n\t\treturn NUMBER_FORMAT.format(price);\n\t}\n\n\t/**\n\t * Round up a double using the \"half up\" method.\n\t * @param d a double\n\t * @return a double\n\t */\n\tpublic static double roundHalfUp(double d) {\n\t\treturn roundHalfUp(d, 2);\n\t}\n\n\t/**\n\t * Round up a double using the \"half up\" method.\n\t * @param d a double\n\t * @param scale the scale\n\t * @return a double\n\t */\n\tpublic static double roundHalfUp(double d, int scale) {\n\t\treturn BigDecimal.valueOf(d).setScale(scale, RoundingMode.HALF_UP).doubleValue();\n\t}\n\n\t/**\n\t * Abbreviates an integer by adding a letter suffix at the end.\n\t * E.g. \"M\" for millions, \"K\" for thousands, etc.\n\t * @param number a big integer\n\t * @param decPlaces decimal places\n\t * @return the rounded integer as a string\n\t */\n\tpublic static String abbreviateInt(Number number, int decPlaces) {\n\t\tif (number == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString abbrevn = number.toString();\n\t\t// 2 decimal places => 100, 3 => 1000, etc\n\t\tdecPlaces = (int) Math.pow(10, decPlaces);\n\t\t// Enumerate number abbreviations\n\t\tString[] abbrev = {\"K\", \"M\", \"B\", \"T\"};\n\t\tboolean done = false;\n\t\t// Go through the array backwards, so we do the largest first\n\t\tfor (int i = abbrev.length - 1; i >= 0 && !done; i--) {\n\t\t\t// Convert array index to \"1000\", \"1000000\", etc\n\t\t\tint size = (int) Math.pow(10, (double) (i + 1) * 3);\n\t\t\t// If the number is bigger or equal do the abbreviation\n\t\t\tif (size <= number.intValue()) {\n\t\t\t\t// Here, we multiply by decPlaces, round, and then divide by decPlaces.\n\t\t\t\t// This gives us nice rounding to a particular decimal place.\n\t\t\t\tnumber = Math.round(number.intValue() * decPlaces / (float) size) / decPlaces;\n\t\t\t\t// Add the letter for the abbreviation\n\t\t\t\tabbrevn = number + abbrev[i];\n\t\t\t\t// We are done... stop\n\t\t\t\tdone = true;\n\t\t\t}\n\t\t}\n\t\treturn abbrevn;\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   URL UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Decodes a URL-encoded string.\n\t * @param s a string\n\t * @return the decoded string\n\t */\n\tpublic static String urlDecode(String s) {\n\t\tif (s == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString decoded = s;\n\t\ttry {\n\t\t\tdecoded = URLDecoder.decode(s, Para.getConfig().defaultEncoding());\n\t\t} catch (UnsupportedEncodingException ex) {\n\t\t\tlogger.error(null, ex);\n\t\t}\n\t\treturn decoded;\n\t}\n\n\t/**\n\t * URL-encodes a string.\n\t * @param s a string\n\t * @return the encoded string\n\t */\n\tpublic static String urlEncode(String s) {\n\t\tif (s == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString encoded = s;\n\t\ttry {\n\t\t\tencoded = URLEncoder.encode(s, Para.getConfig().defaultEncoding());\n\t\t} catch (UnsupportedEncodingException ex) {\n\t\t\tlogger.error(null, ex);\n\t\t}\n\t\treturn encoded;\n\t}\n\n\t/**\n\t * URL validation.\n\t * @param url a URL\n\t * @return true if the URL is valid\n\t */\n\tpublic static boolean isValidURL(String url) {\n\t\treturn toURL(url) != null;\n\t}\n\n\t/**\n\t * Email validation.\n\t * @param email email address\n\t * @return true if the URL is valid\n\t */\n\tpublic static boolean isValidEmail(String email) {\n\t\treturn email != null && EMAIL_PATTERN.matcher(email).matches();\n\t}\n\n\t/**\n\t * Returns the host part of the URL.\n\t * @param url a URL\n\t * @return just the host\n\t */\n\tpublic static String getHostFromURL(String url) {\n\t\tURL u = toURL(url);\n\t\tString host = (u == null) ? \"\" : u.getHost();\n\t\treturn host;\n\t}\n\n\t/**\n\t * The basic URL without any parameters: &gt;scheme&lt;:&gt;authority&lt;.\n\t * @param url a full URL\n\t * @return the basic URL\n\t */\n\tpublic static String getBaseURL(String url) {\n\t\tURL u = toURL(url);\n\t\tString base = null;\n\t\tif (u != null) {\n\t\t\ttry {\n\t\t\t\tbase = u.toURI().getScheme().concat(\"://\").concat(u.getAuthority());\n\t\t\t} catch (URISyntaxException ex) {\n\t\t\t\tbase = null;\n\t\t\t}\n\t\t}\n\t\treturn base;\n\t}\n\n\tprivate static URL toURL(String url) {\n\t\tif (StringUtils.isBlank(url)) {\n\t\t\treturn null;\n\t\t}\n\t\tURL u;\n\t\ttry {\n\t\t\tu = new URL(url);\n\t\t} catch (MalformedURLException e) {\n\t\t\t// the URL is not in a valid form\n\t\t\tu = null;\n\t\t}\n\t\treturn u;\n\t}\n\n\t/**\n\t * Returns the default URL for a given domain object.\n\t * @param obj the domain object\n\t * @param includeName true if we want to include the name of the object in the URL\n\t * @param includeId true if we want to include the ID of the object in the URL\n\t * @return the object's URL - e.g. /users/123-name, /users/, /users/123\n\t */\n\tpublic static String getObjectURI(ParaObject obj, boolean includeName, boolean includeId) {\n\t\tif (obj == null) {\n\t\t\treturn \"/\";\n\t\t}\n\t\tif (includeId && obj.getId() != null) {\n\t\t\treturn (includeName && !StringUtils.isBlank(obj.getName())) ? obj.getObjectURI().concat(\"-\").\n\t\t\t\t\tconcat(urlEncode(noSpaces(obj.getName(), \"-\"))) : obj.getObjectURI();\n\t\t} else {\n\t\t\treturn obj.getObjectURI();\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t//    \t        MISC UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Same as {@link java.lang.System#getProperty(java.lang.String)}.\n\t * @param name the name of the property\n\t * @return the property value\n\t */\n\tpublic static String getSystemProperty(String name) {\n\t\treturn StringUtils.isBlank(name) ? \"\" : System.getProperty(name);\n\t}\n\n\t/**\n\t * Checks if a response is of type JSON.\n\t * @param contentType the value of \"Content-Type\" header\n\t * @return true if JSON\n\t */\n\tpublic static boolean isJsonType(String contentType) {\n\t\treturn StringUtils.startsWith(contentType, \"application/json\") ||\n\t\t\t\tStringUtils.startsWith(contentType, \"application/javascript\") ||\n\t\t\t\tStringUtils.startsWith(contentType, \"text/javascript\");\t// F U facebook!\n\t}\n\n\t/**\n\t * Quick and dirty singular to plural conversion.\n\t * @param singul a word\n\t * @return a guess of its plural form\n\t */\n\tpublic static String singularToPlural(String singul) {\n\t\tif (!StringUtils.isAsciiPrintable(singul)) {\n\t\t\treturn singul;\n\t\t}\n\t\treturn (StringUtils.isBlank(singul) || singul.endsWith(\"es\") || singul.endsWith(\"ies\")) ? singul :\n\t\t\t\t(singul.endsWith(\"s\") ? singul + \"es\" :\n\t\t\t\t(singul.endsWith(\"y\") ? StringUtils.removeEndIgnoreCase(singul, \"y\") + \"ies\" :\n\t\t\t\t\t\t\t\t\t\tsingul + \"s\"));\n\t}\n\n\t/**\n\t * Checks if a class is primitive, String or a primitive wrapper.\n\t *\n\t * @param clazz a class\n\t * @return true if primitive or wrapper\n\t */\n\tpublic static boolean isBasicType(Class<?> clazz) {\n\t\treturn (clazz == null) ? false : (clazz.isPrimitive()\n\t\t\t\t|| clazz.equals(String.class)\n\t\t\t\t|| clazz.equals(Long.class)\n\t\t\t\t|| clazz.equals(Integer.class)\n\t\t\t\t|| clazz.equals(Boolean.class)\n\t\t\t\t|| clazz.equals(Byte.class)\n\t\t\t\t|| clazz.equals(Short.class)\n\t\t\t\t|| clazz.equals(Float.class)\n\t\t\t\t|| clazz.equals(Double.class)\n\t\t\t\t|| clazz.equals(Character.class));\n\t}\n\n\t/**\n\t * Returns the simple name of a class in lowercase (AKA the type).\n\t *\n\t * @param clazz a core class\n\t * @return just the name in lowercase or an empty string if clazz is null\n\t */\n\tpublic static String type(Class<? extends ParaObject> clazz) {\n\t\treturn (clazz == null) ? \"\" : clazz.getSimpleName().toLowerCase();\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t\t\t\tANNOTATIONS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Returns a list of all declared fields in a class. Transient and serialVersionUID fields are skipped.\n\t * This method scans parent classes as well.\n\t * @param clazz a class to scan\n\t * @return a list of fields including those of the parent classes excluding the Object class.\n\t */\n\tpublic static List<Field> getAllDeclaredFields(Class<? extends ParaObject> clazz) {\n\t\tLinkedList<Field> fields = new LinkedList<>();\n\t\tif (clazz == null) {\n\t\t\treturn fields;\n\t\t}\n\t\tClass<?> parent = clazz;\n\t\tdo {\n\t\t\tfor (Field field : parent.getDeclaredFields()) {\n\t\t\t\tif (!Modifier.isTransient(field.getModifiers()) &&\n\t\t\t\t\t\t!field.getName().equals(\"serialVersionUID\")) {\n\t\t\t\t\tfields.add(field);\n\t\t\t\t}\n\t\t\t}\n\t\t\tparent = parent.getSuperclass();\n\t\t} while (!parent.equals(Object.class));\n\t\treturn fields;\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t        MODIFIED SNOWFLAKE\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Distributed id generator. Relies on node/worker ids and datacenter ids to prevent collisions.\n\t * @return a long unique ID string of digits\n\t */\n\tpublic static synchronized String getNewId() {\n\t\t// unique across JVMs as long as each has a different workerID\n\t\t// based on Twitter's Snowflake algorithm\n\t\tlong timestamp = timestamp();\n\n\t\tif (lastTimestamp == timestamp) {\n\t\t\tsequence = (sequence + 1) & SEQUENCE_MASK;\n\t\t\tif (sequence == 0) {\n\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);\n\t\t\t}\n\t\t} else {\n\t\t\tsequence = 0;\n\t\t}\n\n\t\tif (timestamp < lastTimestamp) {\n\t\t\tthrow new IllegalStateException(String.format(\"Clock moved backwards.  \"\n\t\t\t\t\t+ \"Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n\t\t}\n\n\t\tlastTimestamp = timestamp;\n\t\treturn Long.toString(((timestamp - TIMER_OFFSET) << TIMESTAMP_LEFT_SHIFT) |\n\t\t\t\t\t\t\t\t\t\t\t(dataCenterId << DATACENTER_ID_SHIFT) |\n\t\t\t\t\t\t\t\t\t\t\t\t\t(workerId << WORKER_ID_SHIFT) |\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(sequence));\n\n\t}\n\n\tprivate static long tilNextMillis(long lastTimestamp) {\n\t\tlong timestamp = timestamp();\n\n\t\twhile (timestamp <= lastTimestamp) {\n\t\t\ttimestamp = timestamp();\n\t\t}\n\n\t\treturn timestamp;\n\t}\n\n}\n", "/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.para.core.utils;\n\nimport com.erudika.para.core.utils.Config;\nimport com.erudika.para.core.utils.Utils;\nimport com.erudika.para.core.annotations.Locked;\nimport com.erudika.para.core.App;\nimport com.erudika.para.core.ParaObject;\nimport com.erudika.para.core.Sysprop;\nimport com.erudika.para.core.Tag;\nimport com.erudika.para.core.User;\nimport com.erudika.para.core.Votable;\nimport static com.erudika.para.core.utils.Utils.*;\nimport static com.erudika.para.core.utils.ParaObjectUtils.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.commons.lang3.StringUtils;\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\n/**\n *\n * @author Alex Bogdanovski [alex@erudika.com]\n */\npublic class UtilsTest {\n\n\tpublic UtilsTest() {\n\t}\n\n\t@Test\n\tpublic void testMD5() {\n\t\tassertEquals(\"098f6bcd4621d373cade4e832627b4f6\", md5(\"test\"));\n\t\tassertEquals(\"47ec2dd791e31e2ef2076caf64ed9b3d\", md5(\"test123456\"));\n\t\tassertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", md5(\"\"));\n\t\tassertEquals(\"\", md5(null));\n\t}\n\n\t@Test\n\tpublic void testBcrypt() {\n\t\tassertNull(bcrypt(null));\n\t\tassertFalse(bcrypt(\"\").isEmpty());\n\t\tassertFalse(bcrypt(\"test\").isEmpty());\n\t\tassertNotEquals(bcrypt(\"testpass\"), bcrypt(\"testpass\")); // bcrypt hashes are salted i.e. !=\n\t}\n\t@Test\n\tpublic void testBcryptMatches() {\n\t\tassertFalse(bcryptMatches(null, null));\n\t\tassertFalse(bcryptMatches(null, \"test\"));\n\t\tassertFalse(bcryptMatches(\"\", \"test\"));\n\t\tassertFalse(bcryptMatches(\"test\", \"test\"));\n\t\tassertTrue(bcryptMatches(\"testpass\", \"$2a$12$OQXURSOiBPvDHZc0xzSn.erVlBGChnY8hi.OLLZVBczquUaOTJTg.\"));\n\t\tString unicodeHash = bcrypt(\"\u3042\u3044\u3046\u3048\u304a\u304a\");\n\t\tassertTrue(bcryptMatches(\"\u3042\u3044\u3046\u3048\u304a\u304a\", unicodeHash));\n\t}\n\n\t@Test\n\tpublic void testGenerateSecurityToken() {\n\t\tString tok1 = generateSecurityToken();\n\t\tString tok2 = generateSecurityToken();\n\t\tassertFalse(StringUtils.isBlank(tok1));\n\t\tassertFalse(StringUtils.isBlank(tok2));\n\t\tassertNotEquals(tok1, tok2);\n\t}\n\n\t@Test\n\tpublic void testEscapeJavascript() {\n\t\tassertNotNull(escapeJavascript(null));\n\t\tassertNotNull(escapeJavascript(\"\"));\n\t}\n\n\t@Test\n\tpublic void testStripHtml() {\n\t\tassertNotNull(stripHtml(null));\n\t\tassertNotNull(stripHtml(\"\"));\n\t\tassertEquals(\"text\", stripHtml(\"<html>text</html>\"));\n\t}\n\n\t@Test\n\tpublic void testMarkdownToHtml() {\n\t\tassertNotNull(markdownToHtml(null));\n\t\tassertNotNull(markdownToHtml(\"\"));\n\t\tassertFalse(markdownToHtml(\"*bold*\").isEmpty());\n\t\tassertTrue(markdownToHtml(\"<center/>\", false).startsWith(\"<p>&lt;center\"));\n\t\tassertEquals(\"<center></center>\", markdownToHtml(\"<center/>\", true));\n\t}\n\n\t@Test\n\tpublic void testCompileMustache() {\n\t\tassertNotNull(compileMustache(null, \"\"));\n\t\tassertNotNull(compileMustache(new HashMap<>(), \"test\"));\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tmap.put(\"test\", \"string\");\n\t\tassertEquals(\"<html>string</html>\", compileMustache(map, \"<html>{{test}}</html>\"));\n\t}\n\n\t@Test\n\tpublic void testAbbreviate() {\n\t\tassertNotNull(abbreviate(null, 0));\n\t\tassertNotNull(abbreviate(\"\", 0));\n\t\tassertFalse(abbreviate(\"this is a test\", 4).isEmpty());\n\t}\n\n\t@Test\n\tpublic void testArrayJoin() {\n\t\tassertNotNull(arrayJoin(null, null));\n\t\tassertNotNull(arrayJoin(new ArrayList<>(), null));\n\t\tassertEquals(\"one,two,three\", arrayJoin(Arrays.asList(\"one\",\"two\",\"three\"), \",\"));\n\t\tassertEquals(\"onetwothree\", arrayJoin(Arrays.asList(\"one\",\"two\",\"three\"), \"\"));\n\t}\n\n\t@Test\n\tpublic void testStripAndTrim() {\n\t\tassertNotNull(stripAndTrim(null));\n\t\tassertNotNull(stripAndTrim(\"\"));\n\t\tassertEquals(\"test\", stripAndTrim(\"  $% ^&test-?<?> \u00a7 \u00b1<_ ) (/.,\"));\n\t\tassertEquals(\"test 123 test\", stripAndTrim(\"  $% ^&test\t\t-?<? 123    > \u00a7 \u00b1test<_ ) (/.,\"));\n\t\tassertEquals(\"\u0442\u0435\u0441\u0442 asd 123\", stripAndTrim(\"\u0442\u0435\u0441\u0442 asd 123 \u00a9\"));\n\t\tassertEquals(\"asd--123\", stripAndTrim(\"\u0442\u0435\u0441\u0442 asd()123 \u00a9\", \"-\", true));\n\t}\n\n\t@Test\n\tpublic void testNoSpaces() {\n\t\tassertNotNull(noSpaces(null, \"-\"));\n\t\tassertNotNull(noSpaces(\"\", \"-\"));\n\t\tassertEquals(\"test-123-456-789-000\", noSpaces(\"test 123 456      789\t000\", \"-\"));\n\t}\n\n\t@Test\n\tpublic void testFormatMessage() {\n\t\tassertNotNull(formatMessage(null));\n\t\tassertNotNull(formatMessage(\"\"));\n\t\tassertNotNull(formatMessage(\"\", null, null));\n\t\tassertEquals(\"test\", formatMessage(\"test\", \"one\"));\n\t\tassertEquals(\"test two\", formatMessage(\"test {0}\", \"two\"));\n\t}\n\n\t@Test\n\tpublic void testBase64enc() {\n\t\tassertNotNull(base64enc(null));\n\t\tassertNotNull(base64enc(new byte[0]));\n\t\tassertEquals(\"dGVzdDEyMyBzdHJpbmc=\", base64enc(\"test123 string\".getBytes()));\n\t\tassertEquals(\"dGVzdDEyMyBzdHJpbmc\", base64encURL(\"test123 string\".getBytes()));\n\t\tassertEquals(\"ICAg\", base64enc(\"   \".getBytes()));\n\t\tassertEquals(\"MTIz\", base64enc(base64dec(\"MTIz\").getBytes()));\n\t}\n\n\t@Test\n\tpublic void testBase64dec() {\n\t\tassertNotNull(base64dec(null));\n\t\tassertNotNull(base64dec(\"\"));\n\t\tassertEquals(\"test123 string\", base64dec(\"dGVzdDEyMyBzdHJpbmc=\"));\n\t\tassertEquals(\"   \", base64dec(\"ICAg\"));\n\t\tassertEquals(\"123\", base64dec(base64enc(\"123\".getBytes())));\n//\t\tassertEquals(\"\", base64dec(\"asd=\")); // error for invalid encoding\n\t}\n\n\t@Test\n\tpublic void testFormatDate() {\n\t\tassertNotNull(formatDate(null, null));\n\t\tassertNotNull(formatDate(null, null, null));\n\t\tassertEquals(\"2001\", formatDate(1000000000000L, \"yyyy\", Locale.US));\n\t}\n\n\t@Test\n\tpublic void testGetCurrentYear() {\n\t\tassertTrue(getCurrentYear() > 2013);\n\t}\n\n\t@Test\n\tpublic void testGetMonths() {\n\t\tassertEquals(\"January\", getMonths(null)[0]);\n\t}\n\n\t@Test\n\tpublic void testAbbreviateInt() {\n\t\tassertNotNull(abbreviateInt(null, 0));\n\t\tassertEquals(\"1K\", abbreviateInt(1000, 0));\n\t\tassertEquals(\"1K\", abbreviateInt(1000, 1));\n\t\tassertEquals(\"1M\", abbreviateInt(1000000, 1));\n\t}\n\n\t@Test\n\tpublic void testUrlDecode() {\n\t\tassertNotNull(urlDecode(null));\n\t\tassertEquals(\" \", urlDecode(\"%20\"));\n\t\tassertEquals(\"&\", urlDecode(\"&\"));\n\t}\n\n\t@Test\n\tpublic void testUrlEncode() {\n\t\tassertNotNull(urlEncode(null));\n\t\tassertEquals(\"+\", urlEncode(\" \"));\n\t\tassertEquals(\"a\", urlEncode(\"a\"));\n\t\tassertEquals(\" \", urlDecode(urlEncode(\" \")));\n\t\tassertEquals(\"?test! \", urlDecode(urlEncode(\"?test! \")));\n\t}\n\n\t@Test\n\tpublic void testIsValidURL() {\n\t\tassertFalse(isValidURL(null));\n\t\tassertFalse(isValidURL(\"\"));\n\t\tassertTrue(isValidURL(\"http://test.com\"));\n\t\tassertFalse(isValidURL(\"test.com\"));\n\t\tassertFalse(isValidURL(\"test.com\"));\n\t}\n\n\t@Test\n\tpublic void testGetHostFromURL() {\n\t\tassertNotNull(getHostFromURL(null));\n\t\tassertNotNull(getHostFromURL(\"\"));\n\t\tassertEquals(\"test.com\", getHostFromURL(\"http://test.com\"));\n\t}\n\n\t@Test\n\tpublic void testGetBaseURL() {\n\t\tassertNull(getBaseURL(null));\n\t\tassertNull(getBaseURL(\"\"));\n\t\tassertEquals(\"http://test.com\", getBaseURL(\"http://test.com/index.html\"));\n\t}\n\n\t@Test\n\tpublic void testGetSystemProperty() {\n\t\tassertEquals(null, getSystemProperty(\"test.test.prop\"));\n\t\tSystem.setProperty(\"test.test.prop\", \"test123\");\n\t\tassertEquals(\"test123\", getSystemProperty(\"test.test.prop\"));\n\t}\n\n\t@Test\n\tpublic void testGetObjectURI() {\n\t\tUser u = new User(\"123\");\n\t\tassertNotNull(getObjectURI(null, false, false));\n\t\tassertEquals(u.getObjectURI(), getObjectURI(u, false, true));\n\t}\n\n\t@Test\n\tpublic void testSingularToPlural() {\n\t\tassertNull(singularToPlural(null));\n\t\tassertNotNull(singularToPlural(\"\"));\n\t\tassertEquals(\"users\", singularToPlural(\"user\"));\n\t\tassertEquals(\"recipes\", singularToPlural(\"recipe\"));\n\t\tassertEquals(\"recipes\", singularToPlural(\"recipes\"));\n\t\tassertEquals(\"cities\", singularToPlural(\"city\"));\n\t\tassertEquals(\"cities\", singularToPlural(\"cities\"));\n\t}\n\n//\t@Test\n//\tpublic void testPopulate() {\n//\t\tMap<String, String[]> map = new HashMap<String, String[]>();\n//\t\tlong timestamp = 1390052381000L;\n//\t\tmap.put(Config._EMAIL, new String[]{\"u@test.co\"});\n//\t\tmap.put(Config._NAME, new String[]{\"User Name\"});\n//\t\tmap.put(Config._TAGS, new String[]{\"tag1\", \"tag2\", \"tag3\"});\n//\t\tmap.put(Config._TIMESTAMP, new String[]{Long.toString(timestamp)});\n//\n//\t\tUser u = new User();\n//\t\tu.setActive(true);\n//\t\tpopulate(u, null);\n//\t\tassertNull(u.getEmail());\n//\t\tpopulate(u, new HashMap<String, String[]>());\n//\t\tassertNull(u.getEmail());\n//\t\tpopulate(u, map);\n//\t\tassertEquals(map.get(Config._EMAIL)[0], u.getEmail());\n//\t\tassertEquals(map.get(Config._NAME)[0], u.getName());\n//\t\tassertTrue(u.getTags().contains(map.get(Config._TAGS)[0]));\n//\t\tassertEquals(timestamp, u.getTimestamp().longValue());\n//\t\tassertEquals(true, u.getActive());\n//\t}\n\n\t@Test\n\tpublic void testTypesMatch() {\n\t\tUser u = new User();\n\t\tassertTrue(typesMatch(u));\n\t\tu.setType(\"usr\");\n\t\tassertFalse(typesMatch(u));\n\t\tassertFalse(typesMatch(null));\n\t}\n\n\t@Test\n\tpublic void testGetAnnotatedFields() {\n\t\tUser u = new User();\n\t\tassertTrue(getAnnotatedFields(null).isEmpty());\n\t\tassertFalse(getAnnotatedFields(u).isEmpty());\n\t\tMap<String, Object> fm1 = getAnnotatedFields(u);\n\t\tMap<String, Object> fm2 = getAnnotatedFields(u, Locked.class);\n\t\tassertFalse(fm1.isEmpty());\n\t\tassertFalse(fm2.isEmpty());\n\t\tassertTrue(fm1.containsKey(Config._ID));\n\t\tassertFalse(fm2.containsKey(Config._ID));\n\t\tassertTrue(fm1.containsKey(Config._TAGS));\n\t\tassertTrue(fm2.containsKey(Config._TAGS));\n\t\tassertTrue(fm1.containsKey(Config._EMAIL));\n\t\tassertTrue(fm2.containsKey(Config._EMAIL));\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void testSetAnnotatedFields() {\n\t\tassertNull(setAnnotatedFields(null));\n\t\tassertNull(setAnnotatedFields(new HashMap<>()));\n\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tlong timestamp = 1390052381000L;\n\t\tmap.put(Config._ID, \"123\");\n\t\tmap.put(Config._TYPE, Utils.type(User.class));\n\t\tmap.put(Config._EMAIL, \"u@test.co\");\n\t\tmap.put(Config._NAME, \"User Name\");\n\t\tmap.put(Config._TAGS, \"[\\\"tag1\\\",\\\"tag2\\\"]\");\t// flattened JSON string\n\t\tmap.put(Config._TIMESTAMP, Long.toString(timestamp));\n\n\t\tUser obj = setAnnotatedFields(map);\n\t\tassertNotNull(obj);\n\t\tassertEquals(map.get(Config._ID), obj.getId());\n\t\tassertEquals(map.get(Config._NAME), obj.getName());\n\t\tassertEquals(map.get(Config._EMAIL), obj.getEmail());\n\t\tassertEquals(timestamp, obj.getTimestamp().longValue());\n\t\tassertTrue(obj.getTags().contains(\"tag1\") && obj.getTags().contains(\"tag2\"));\n\n\t\tUser obj2 = new User(\"234\");\n\t\tobj2.setActive(true);\n\t\tsetAnnotatedFields(obj2, map, null);\n\t\tassertEquals(map.get(Config._ID), obj2.getId());\n\t\tassertEquals(map.get(Config._NAME), obj2.getName());\n\t\tassertEquals(map.get(Config._EMAIL), obj2.getEmail());\n\t\tassertEquals(timestamp, obj2.getTimestamp().longValue());\n\t\tassertEquals(true, obj2.getActive());\n\n\t\t// complex nested objects coming from Jackson\n\t\tMap<String, Object> map1 = new HashMap<>();\n\t\tMap<String, Object> props = new HashMap<String, Object>(){{\n\t\t\tput(\"testprop1\", \"test\");\n\t\t\tput(\"testprop2\", true);\n\t\t\tput(\"testprop3\", 5);\n\t\t\tput(\"testprop4\", Collections.singletonList(\"list\"));\n\t\t}};\n\n\t\tmap1.put(Config._ID, \"123\");\n\t\tmap1.put(Config._TYPE, Utils.type(Sysprop.class));\n\t\tmap1.put(Config._NAME, \"Sysprop\");\n\t\tmap1.put(Config._TIMESTAMP, timestamp);\n\t\tmap1.put(\"properties\", props);\n\n\t\tSysprop sys = setAnnotatedFields(map1);\n\t\tassertNotNull(sys);\n\t\tassertEquals(map1.get(Config._ID), sys.getId());\n\t\tassertEquals(map1.get(Config._TYPE), sys.getType());\n\t\tassertEquals(map1.get(Config._NAME), sys.getName());\n\t\tassertEquals(map1.get(Config._TIMESTAMP), sys.getTimestamp());\n\t\tassertEquals(props.size(), sys.getProperties().size());\n\t\tassertEquals(props.get(\"testprop1\"), sys.getProperties().get(\"testprop1\"));\n\t\tassertEquals(props.get(\"testprop2\"), sys.getProperties().get(\"testprop2\"));\n\t\tassertEquals(props.get(\"testprop3\"), sys.getProperties().get(\"testprop3\"));\n\t\tassertEquals(props.get(\"testprop4\"), sys.getProperties().get(\"testprop4\"));\n\t\tassertEquals(((List<String>) props.get(\"testprop4\")).get(0),\n\t\t\t\t((List<String>) sys.getProperties().get(\"testprop4\")).get(0));\n\n\t\t// unknown fields and custom types test\n\t\tmap1.put(Config._TYPE, \"customtype\");\n\t\tmap1.put(\"animal\", \"cat\");\n\t\tmap1.put(\"hair\", \"long\");\n\t\tmap1.put(\"colour\", \"white\");\n\t\tmap1.put(\"legs\", 4);\n\n\t\tSysprop sys2 = setAnnotatedFields(map1);\n\t\tassertNotNull(sys2);\n\t\tassertEquals(map1.get(Config._ID), sys2.getId());\n\t\tassertEquals(map1.get(Config._TYPE), sys2.getType());\n\t\tassertEquals(map1.get(Config._NAME), sys2.getName());\n\t\tassertEquals(map1.get(Config._TIMESTAMP), sys2.getTimestamp());\n\t\tassertEquals(8, sys2.getProperties().size());\n\t\tassertEquals(map1.get(\"animal\"), sys2.getProperties().get(\"animal\"));\n\t\tassertEquals(map1.get(\"hair\"), sys2.getProperties().get(\"hair\"));\n\t\tassertEquals(map1.get(\"colour\"), sys2.getProperties().get(\"colour\"));\n\t\tassertEquals(map1.get(\"legs\"), sys2.getProperties().get(\"legs\"));\n\n\t\tmap1.put(\"animal\", null);\n\t\tmap1.put(\"hair\", null);\n\t\tmap1.put(\"colour\", null);\n\t\tmap1.put(\"legs\", null);\n\t\t// update\n\t\tsetAnnotatedFields(sys2, map1, Locked.class);\n\t\tassertEquals(4, sys2.getProperties().size());\n\t}\n\n\t@Test\n\tpublic void testToObject() {\n\t\tassertNotNull(toObject(null, null));\n\t\tassertNotNull(toObject(null, \"\"));\n\t\tassertNotNull(toObject(null, \"test123\"));\n\t\tassertEquals(Sysprop.class, toObject(null, \"test123\").getClass());\n\t\tassertEquals(User.class, toObject(null, Utils.type(User.class)).getClass());\n\t\tassertEquals(Tag.class, toObject(null, Utils.type(Tag.class)).getClass());\n\n\t\tApp app = new App();\n\t\tapp.addDatatype(\"wolves\", \"wolf\");\n\t\tassertEquals(\"wolf\", toObject(app, \"wolves\").getType());\n\t\tassertEquals(\"wolf\", toObject(app, \"wolf\").getType());\n\t\tassertEquals(\"wolfs\", toObject(app, \"wolfs\").getType());\n\t}\n\n\t@Test\n\tpublic void testToClass() {\n\t\tassertNotNull(toClass(null));\n\t\tassertNotNull(toClass(\"\"));\n\t\tassertEquals(Sysprop.class, toClass(\"test123\"));\n\t\tassertEquals(User.class, toClass(Utils.type(User.class)));\n\t\tassertEquals(Tag.class, toClass(Utils.type(Tag.class)));\n\t}\n\n\t@Test\n\tpublic void testGetCoreClassesMap() {\n\t\tSet<Class<? extends ParaObject>> set = new HashSet<>();\n\t\tset.addAll(getCoreClassesMap().values());\n\t\tassertFalse(set.isEmpty());\n\t\tassertTrue(set.contains(Tag.class));\n\t\tassertFalse(set.contains(Votable.class));\n\t\tassertFalse(set.contains(ParaObject.class));\n\t}\n\n\t@Test\n\tpublic void testFromJSON() {\n\t\tassertNull(fromJSON(\"\"));\n\t\tassertNull(fromJSON(\"{}\")); // depending on how Jackson is configured this may be null or not\n\n\t\tParaObject obj1 = fromJSON(\"{\\\"type\\\":\\\"testtype\\\", \\\"name\\\":\\\"testname\\\", \\\"id\\\":\\\"123\\\"}\");\n\t\tParaObject obj2 = fromJSON(\"{\\\"type\\\":\\\"user\\\", \\\"name\\\":\\\"user name\\\", \\\"id\\\":\\\"111\\\"}\");\n\t\tParaObject obj3 = fromJSON(\"{\\\"user\\\":\\\"one\\\", \\\"alias\\\":\\\"user1\\\", \\\"id\\\":\\\"456\\\", \\\"name\\\":\\\"name\\\"}\");\n\n\t\tassertNotNull(obj1);\n\t\tassertEquals(Sysprop.class, obj1.getClass());\n\t\tassertEquals(\"123\", obj1.getId());\n\t\tassertEquals(\"testname\", obj1.getName());\n\n\t\tassertNotNull(obj2);\n\t\tassertEquals(User.class, obj2.getClass());\n\t\tassertEquals(\"111\", obj2.getId());\n\t\tassertEquals(\"user name\", obj2.getName());\n\n\t\tassertNotNull(obj3);\n\t\tassertEquals(Sysprop.class, obj3.getClass());\n\t\tassertEquals(\"456\", obj3.getId());\n\t\tassertEquals(\"name\", obj3.getName());\n\t}\n\n\t@Test\n\tpublic void testToJSON() {\n\t\tassertNotNull(toJSON(null));\n\t\tassertFalse(toJSON(new User()).isEmpty());\n\t}\n\n\t@Test\n\tpublic void testIsBasicType() {\n\t\tassertFalse(isBasicType(null));\n\t\tassertTrue(isBasicType(Integer.class));\n\t\tassertTrue(isBasicType(Long.class));\n\t\tassertFalse(isBasicType(Object.class));\n\t\tassertFalse(isBasicType(ParaObject.class));\n\t\t// etc.\n\t}\n\n\t@Test\n\tpublic void testGetNewId() {\n\t\tassertFalse(getNewId().isEmpty());\n\t}\n\n\t@Test\n\tpublic void testGetAllDeclaredFields() {\n\t\tassertTrue(getAllDeclaredFields(null).isEmpty());\n\t\tassertTrue(getAllDeclaredFields(null).isEmpty());\n\t\tassertFalse(getAllDeclaredFields(User.class).isEmpty());\n\t}\n}"], "fixing_code": ["/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.para.core.utils;\n\nimport com.erudika.para.core.ParaObject;\nimport com.erudika.para.core.annotations.Email;\nimport com.samskivert.mustache.Mustache;\nimport com.vladsch.flexmark.ast.Link;\nimport com.vladsch.flexmark.ext.autolink.AutolinkExtension;\nimport com.vladsch.flexmark.ext.emoji.EmojiExtension;\nimport com.vladsch.flexmark.ext.emoji.EmojiImageType;\nimport com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension;\nimport com.vladsch.flexmark.ext.gfm.tasklist.TaskListExtension;\nimport com.vladsch.flexmark.ext.media.tags.MediaTagsExtension;\nimport com.vladsch.flexmark.ext.tables.TablesExtension;\nimport com.vladsch.flexmark.html.AttributeProvider;\nimport com.vladsch.flexmark.html.HtmlRenderer;\nimport com.vladsch.flexmark.html.IndependentAttributeProviderFactory;\nimport com.vladsch.flexmark.html.renderer.AttributablePart;\nimport com.vladsch.flexmark.html.renderer.LinkResolverContext;\nimport com.vladsch.flexmark.parser.Parser;\nimport com.vladsch.flexmark.util.ast.Document;\nimport com.vladsch.flexmark.util.ast.Node;\nimport com.vladsch.flexmark.util.data.MutableDataHolder;\nimport com.vladsch.flexmark.util.data.MutableDataSet;\nimport com.vladsch.flexmark.util.html.MutableAttributes;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.net.MalformedURLException;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.text.DateFormatSymbols;\nimport java.text.MessageFormat;\nimport java.text.NumberFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.regex.Pattern;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.validation.constraints.NotNull;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.lang3.LocaleUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.commons.lang3.time.DateFormatUtils;\nimport org.apache.commons.text.StringEscapeUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.safety.Safelist;\nimport org.mindrot.jbcrypt.BCrypt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Miscellaneous Para utilities.\n * @author Alex Bogdanovski [alex@erudika.com]\n */\n@SuppressWarnings(\"unchecked\")\npublic final class Utils {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(Utils.class);\n\t// maps lowercase simple names to class objects\n\tprivate static final Pattern EMAIL_PATTERN = Pattern.compile(Email.EMAIL_PATTERN);\n\tprivate static final NumberFormat NUMBER_FORMAT = NumberFormat.getInstance();\n\tprivate static final Safelist SAFE_HTML_TAGS = getHTMLTagsWhitelist();\n\tprivate static final MutableDataHolder MD_OPTIONS = getMarkdownOptions();\n\tprivate static final Parser MD_PARSER = Parser.builder(MD_OPTIONS).build();\n\tprivate static final HtmlRenderer HTML_RENDERER_STRICT = HtmlRenderer.builder(MD_OPTIONS).build();\n\tprivate static final HtmlRenderer HTML_RENDERER_LOOSE = HtmlRenderer.\n\t\t\tbuilder(MD_OPTIONS.set(HtmlRenderer.ESCAPE_HTML, false)).build();\n\n\tprivate static HumanTime humantime;\n\tprivate static Utils instance;\n\n\t//////////  ID GEN VARS  //////////////\n\tprivate static final long TIMER_OFFSET = 1310084584692L; // ~July 2011\n\tprivate static final long WORKER_ID_BITS = 5L;\n\tprivate static final long DATACENTER_ID_BITS = 5L;\n\tprivate static final long MAX_WORKER_ID = -1L ^ (-1L << WORKER_ID_BITS);\n\tprivate static final long MAX_DATACENTER_ID = -1L ^ (-1L << DATACENTER_ID_BITS);\n\tprivate static final long SEQUENCE_BITS = 12L;\n\tprivate static final long WORKER_ID_SHIFT = SEQUENCE_BITS;\n\tprivate static final long DATACENTER_ID_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS;\n\tprivate static final long TIMESTAMP_LEFT_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS + DATACENTER_ID_BITS;\n\tprivate static final long SEQUENCE_MASK = -1L ^ (-1L << SEQUENCE_BITS);\n\tprivate static long lastTimestamp = -1L;\n\tprivate static long dataCenterId = 0L;\t// only one datacenter atm\n\tprivate static long workerId;\t// max 1024\n\tprivate static long sequence = 0L;\n\n\tstatic {\n\t\tinitIdGenerator();\n\t\tNUMBER_FORMAT.setMinimumFractionDigits(2);\n\t\tNUMBER_FORMAT.setMaximumFractionDigits(2);\n\t}\n\n\tprivate Utils() { }\n\n\t/**\n\t * Returns an instance of this class.\n\t * @return an instance\n\t */\n\tpublic static Utils getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new Utils();\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * HumanTime - a relative time formatter.\n\t * @return humantime instance\n\t */\n\tpublic static HumanTime getHumanTime() {\n\t\tif (humantime == null) {\n\t\t\thumantime = new HumanTime();\n\t\t}\n\t\treturn humantime;\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   INIT FUNCTIONS\n\t/////////////////////////////////////////////\n\n\tprivate static void initIdGenerator() {\n\t\tString workerID = Para.getConfig().workerId();\n\t\tworkerId = NumberUtils.toLong(workerID, 1);\n\n\t\tif (workerId > MAX_WORKER_ID || workerId < 0) {\n\t\t\tworkerId = ThreadLocalRandom.current().nextInt((int) MAX_WORKER_ID + 1);\n\t\t}\n\n\t\tif (dataCenterId > MAX_DATACENTER_ID || dataCenterId < 0) {\n\t\t\tdataCenterId =  ThreadLocalRandom.current().nextInt((int) MAX_DATACENTER_ID + 1);\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   HASH UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * md5 hash function.\n\t * @param s the string to be hashed\n\t * @return an md5 hash\n\t */\n\tpublic static String md5(String s) {\n\t\tif (s == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\t\tmd.update(s.getBytes());\n\n\t\t\tbyte[] byteData = md.digest();\n\n\t\t\t//convert the byte to hex format method 1\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (int i = 0; i < byteData.length; i++) {\n\t\t\t\tsb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t} catch (NoSuchAlgorithmException ex) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * Computes the HmacSHA256 hash of a message.\n\t * @param message a message as UTF-8 encoded string\n\t * @param secret a secret key\n\t * @return base64(hmacSHA256(message, secret))\n\t */\n\tpublic static String hmacSHA256(String message, String secret) {\n\t\ttry {\n\t\t\tMac hmac = Mac.getInstance(\"HmacSHA256\");\n\t\t\thmac.init(new SecretKeySpec(secret.getBytes(Para.getConfig().defaultEncoding()), \"HmacSHA256\"));\n\t\t\treturn Utils.base64enc(hmac.doFinal(message.getBytes(Para.getConfig().defaultEncoding())));\n\t\t} catch (Exception e) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * bcrypt hash function implemented by Spring Security.\n\t *\n\t * @param s the string to be hashed\n\t * @return the hash\n\t */\n\tpublic static String bcrypt(String s) {\n\t\treturn (s == null) ? s : BCrypt.hashpw(s, BCrypt.gensalt(12));\n\t}\n\n\t/**\n\t * Checks if a hash matches a string.\n\t *\n\t * @param plain plain text string\n\t * @param storedHash hashed string\n\t * @return true if the hash matches\n\t */\n\tpublic static boolean bcryptMatches(String plain, String storedHash) {\n\t\tif (StringUtils.isBlank(plain) || StringUtils.isBlank(storedHash)) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn BCrypt.checkpw(plain, storedHash);\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Generates an authentication token - a random string encoded in Base64.\n\t * @param length the length of the generated token\n\t * @param urlSafe switches to a URL safe encoding\n\t * @return a random string\n\t */\n\tpublic static String generateSecurityToken(int length, boolean urlSafe) {\n\t\tfinal byte[] bytes = new byte[length];\n\t\tSecureRandom rand;\n\t\ttry {\n\t\t\trand = SecureRandom.getInstance(\"SHA1PRNG\");\n\t\t} catch (NoSuchAlgorithmException ex) {\n\t\t\tlogger.error(null, ex);\n\t\t\trand = new SecureRandom();\n\t\t}\n\t\trand.nextBytes(bytes);\n\t\treturn urlSafe ? base64encURL(bytes) : base64enc(bytes);\n\t}\n\n\t/**\n\t * Generates an authentication token - a random string encoded in Base64.\n\t * @param length the length of the generated token\n\t * @return a random string\n\t */\n\tpublic static String generateSecurityToken(int length) {\n\t\treturn generateSecurityToken(length, false);\n\t}\n\n\t/**\n\t * Generates an authentication token - a random 32 byte string encoded in Base64.\n\t * @return a random string\n\t */\n\tpublic static String generateSecurityToken() {\n\t\treturn generateSecurityToken(32);\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   STRING UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Escapes JavaScript.\n\t * @param str a javascript string\n\t * @return the escaped javascript string\n\t */\n\tpublic static String escapeJavascript(String str) {\n\t\treturn (str == null) ? \"\" : StringEscapeUtils.escapeEcmaScript(str);\n\t}\n\n\t/**\n\t * Strips all HTML tags from a string.\n\t * @param html HTML string\n\t * @return just the text\n\t */\n\tpublic static String stripHtml(String html) {\n\t\treturn (html == null) ? \"\" : Jsoup.parse(html).text();\n\t}\n\n\t/**\n\t * Converts Markdown to HTML.\n\t * @param markdownString Markdown\n\t * @return HTML\n\t */\n\tpublic static String markdownToHtml(String markdownString) {\n\t\treturn markdownToHtml(markdownString, false);\n\t}\n\n\t/**\n\t * Converts Markdown to HTML.\n\t * @param markdownString Markdown\n\t * @param htmlTagsRenderingEnabled if true, basic HTML tags will be rendered instead of escaped\n\t * @return HTML\n\t */\n\tpublic static String markdownToHtml(String markdownString, boolean htmlTagsRenderingEnabled) {\n\t\tif (StringUtils.isBlank(markdownString)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tDocument parsed = MD_PARSER.parse(markdownString);\n\t\tif (htmlTagsRenderingEnabled) {\n\t\t\treturn Jsoup.clean(HTML_RENDERER_LOOSE.render(parsed), SAFE_HTML_TAGS);\n\t\t} else {\n\t\t\treturn HTML_RENDERER_STRICT.render(parsed);\n\t\t}\n\t}\n\n\t/**\n\t * Compiles a mustache template with a given scope (map of fields and values).\n\t * @param context a map of fields and values\n\t * @param template a Mustache template\n\t * @return the compiled template string\n\t */\n\tpublic static String compileMustache(Map<String, Object> context, String template, boolean escapeHtml) {\n\t\tif (context == null || StringUtils.isBlank(template)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tWriter writer = new StringWriter();\n\t\ttry {\n\t\t\tMustache.compiler().escapeHTML(escapeHtml).emptyStringIsFalse(true).compile(template).execute(context, writer);\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\twriter.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.error(null, e);\n\t\t\t}\n\t\t}\n\t\treturn writer.toString();\n\t}\n\n\t/**\n\t * @see #compileMustache(java.util.Map, java.lang.String, boolean)\n\t * @param context a map of fields and values\n\t * @param template a Mustache template\n\t * @return the compiled template string\n\t */\n\tpublic static String compileMustache(Map<String, Object> context, String template) {\n\t\treturn compileMustache(context, template, false);\n\t}\n\n\t/**\n\t * Abbreviates a string.\n\t * @param str a string\n\t * @param max max length\n\t * @return a substring of that string\n\t */\n\tpublic static String abbreviate(String str, int max) {\n\t\treturn StringUtils.isBlank(str) ? \"\" : StringUtils.abbreviate(str, max);\n\t}\n\n\t/**\n\t * Joins a list of strings to String using a separator.\n\t * @param arr a list of strings\n\t * @param separator a separator string\n\t * @return a string\n\t */\n\tpublic static String arrayJoin(List<String> arr, String separator) {\n\t\treturn (arr == null || separator == null) ? \"\" : StringUtils.join(arr, separator);\n\t}\n\n\t/**\n\t * Strips all symbols, punctuation, whitespace and control chars from a string.\n\t * @param str a dirty string\n\t * @return a clean string\n\t */\n\tpublic static String stripAndTrim(String str) {\n\t\treturn stripAndTrim(str, \"\");\n\t}\n\n\t/**\n\t * Strips all symbols, punctuation, whitespace and control chars from a string.\n\t * @param str a dirty string\n\t * @param replaceWith a string to replace spaces with\n\t * @return a clean string\n\t */\n\tpublic static String stripAndTrim(String str, String replaceWith) {\n\t\treturn stripAndTrim(str, replaceWith, false);\n\t}\n\n\t/**\n\t * Strips all symbols, punctuation, whitespace and control chars from a string.\n\t * @param str a dirty string\n\t * @param replaceWith a string to replace spaces with\n\t * @param asciiOnly if true, all non-ASCII characters will be stripped\n\t * @return a clean string\n\t */\n\tpublic static String stripAndTrim(String str, String replaceWith, boolean asciiOnly) {\n\t\tif (StringUtils.isBlank(str)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString s = str;\n\t\tif (asciiOnly) {\n\t\t\ts = str.replaceAll(\"[^\\\\p{ASCII}]\", \"\");\n\t\t}\n\t\treturn s.replaceAll(\"[\\\\p{S}\\\\p{P}\\\\p{C}]\", replaceWith).replaceAll(\"\\\\p{Z}+\", \" \").trim();\n\t}\n\n\t/**\n\t * Converts spaces to dashes.\n\t * @param str a string with spaces\n\t * @param replaceWith a string to replace spaces with\n\t * @return a string with dashes\n\t */\n\tpublic static String noSpaces(String str, String replaceWith) {\n\t\treturn StringUtils.isBlank(str) ? \"\" : str.trim().replaceAll(\"[\\\\p{C}\\\\p{Z}]+\",\n\t\t\t\tStringUtils.trimToEmpty(replaceWith)).toLowerCase();\n\t}\n\n\t/**\n\t * Formats a messages containing {0}, {1}... etc. Used for translation.\n\t * @param msg a message with placeholders\n\t * @param params objects used to populate the placeholders\n\t * @return a formatted message\n\t */\n\tpublic static String formatMessage(String msg, Object... params) {\n\t\ttry {\n\t\t\t// required by MessageFormat, single quotes break string interpolation!\n\t\t\tmsg = StringUtils.replace(msg, \"'\", \"''\");\n\t\t\treturn StringUtils.isBlank(msg) ? \"\" : MessageFormat.format(msg, params);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\treturn msg;\n\t\t}\n\t}\n\n\t/**\n\t * Encodes a byte array to Base64.\n\t * @param str the byte array\n\t * @return an encoded string\n\t */\n\tpublic static String base64enc(byte[] str) {\n\t\tif (str == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn new String(Base64.encodeBase64(str));\n\t}\n\n\t/**\n\t * Encodes a byte array to Base64. URL safe.\n\t * @param str the byte array\n\t * @return an encoded string\n\t */\n\tpublic static String base64encURL(byte[] str) {\n\t\tif (str == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn new String(Base64.encodeBase64URLSafe(str));\n\t}\n\n\t/**\n\t * Decodes a string from Base64.\n\t * @param str the encoded string\n\t * @return a decoded string\n\t */\n\tpublic static String base64dec(String str) {\n\t\tif (str == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\ttry {\n\t\t\treturn new String(Base64.decodeBase64(str), Para.getConfig().defaultEncoding());\n\t\t} catch (Exception ex) {\n\t\t\tlogger.error(\"Failed to decode base64 string '{}'.\", str, ex);\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   MARKDOWN UTILS\n\t/////////////////////////////////////////////\n\n\tprivate static MutableDataHolder getMarkdownOptions() {\n\t\treturn new MutableDataSet()\n\t\t\t\t.set(HtmlRenderer.ESCAPE_HTML, true)\n\t\t\t\t.set(HtmlRenderer.SUPPRESSED_LINKS, \"(?i)javascript:.*\")\n\t\t\t\t.set(HtmlRenderer.SOFT_BREAK, Para.getConfig().markdownSoftBreak())\n\t\t\t\t.set(HtmlRenderer.AUTOLINK_WWW_PREFIX, \"https://\")\n\t\t\t\t.set(EmojiExtension.USE_IMAGE_TYPE, EmojiImageType.UNICODE_FALLBACK_TO_IMAGE)\n\t\t\t\t// for full GFM table compatibility add the following table extension options:\n\t\t\t\t.set(TablesExtension.COLUMN_SPANS, false)\n\t\t\t\t.set(TablesExtension.APPEND_MISSING_COLUMNS, true)\n\t\t\t\t.set(TablesExtension.DISCARD_EXTRA_COLUMNS, true)\n\t\t\t\t.set(TablesExtension.HEADER_SEPARATOR_COLUMN_MATCH, true)\n\t\t\t\t.set(Parser.EXTENSIONS, Arrays.asList(\n\t\t\t\t\t\tTablesExtension.create(),\n\t\t\t\t\t\tEmojiExtension.create(),\n\t\t\t\t\t\tStrikethroughExtension.create(),\n\t\t\t\t\t\tTaskListExtension.create(),\n\t\t\t\t\t\tAutolinkExtension.create(),\n\t\t\t\t\t\tRelAttributeExtension.create(),\n\t\t\t\t\t\tMediaTagsExtension.create()));\n\t}\n\n\tprivate static Safelist getHTMLTagsWhitelist() {\n\t\tSafelist whitelist = Safelist.relaxed();\n\t\twhitelist.addTags(\"abbr\", \"hr\", \"del\", \"details\", \"summary\", \"center\", \"audio\", \"video\", \"source\");\n\t\twhitelist.addProtocols(\"a\", \"href\", \"#\");\n\t\twhitelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow noreferrer\");\n\t\twhitelist.addAttributes(\"abbr\", \"title\");\n\t\twhitelist.addAttributes(\"th\", \"align\");\n\t\twhitelist.addAttributes(\"td\", \"align\");\n\t\twhitelist.addAttributes(\"code\", \"class\");\n\t\twhitelist.addAttributes(\"div\", \"class\");\n\t\twhitelist.addAttributes(\"a\", \"rel\");\n\t\twhitelist.addAttributes(\"audio\", \"controls\", \"autoplay\", \"muted\", \"loop\");\n\t\twhitelist.addAttributes(\"video\", \"controls\", \"autoplay\", \"muted\", \"playsinline\", \"loop\");\n\t\twhitelist.addAttributes(\"source\", \"src\", \"type\");\n\t\twhitelist.addAttributes(\"details\", \"class\", \"open\");\n\t\twhitelist.addAttributes(\"h1\", \"id\");\n\t\twhitelist.addAttributes(\"h2\", \"id\");\n\t\twhitelist.addAttributes(\"h3\", \"id\");\n\t\twhitelist.addAttributes(\"h4\", \"id\");\n\t\twhitelist.addAttributes(\"h5\", \"id\");\n\t\twhitelist.addAttributes(\"h6\", \"id\");\n\t\twhitelist.addAttributes(\"h7\", \"id\");\n\t\treturn whitelist;\n\t}\n\n\tstatic class RelAttributeExtension implements HtmlRenderer.HtmlRendererExtension {\n\n\t\tpublic void rendererOptions(@NotNull MutableDataHolder options) { }\n\n\t\tpublic void extend(@NotNull HtmlRenderer.Builder htmlRendererBuilder, @NotNull String rendererType) {\n\t\t\thtmlRendererBuilder.attributeProviderFactory(new IndependentAttributeProviderFactory() {\n\t\t\t\tpublic AttributeProvider apply(@NotNull LinkResolverContext context) {\n\t\t\t\t\treturn new RelAttributeProvider();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tstatic RelAttributeExtension create() {\n\t\t\treturn new RelAttributeExtension();\n\t\t}\n\t}\n\n\tstatic class RelAttributeProvider implements AttributeProvider {\n\t\tpublic void setAttributes(@NotNull Node node, @NotNull AttributablePart part, @NotNull MutableAttributes attributes) {\n\t\t\tif (node instanceof Link && part == AttributablePart.LINK) {\n\t\t\t\tattributes.replaceValue(\"rel\", \"nofollow noreferrer\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   DATE UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Formats a date in a specific format.\n\t * @param timestamp the Java timestamp\n\t * @param format the date format\n\t * @param loc the locale instance\n\t * @return a formatted date\n\t */\n\tpublic static String formatDate(Long timestamp, String format, Locale loc) {\n\t\tif (StringUtils.isBlank(format)) {\n\t\t\tformat = DateFormatUtils.ISO_8601_EXTENDED_DATE_FORMAT.getPattern();\n\t\t}\n\t\tif (timestamp == null) {\n\t\t\ttimestamp = timestamp();\n\t\t}\n\t\tif (loc == null) {\n\t\t\tloc = Locale.US;\n\t\t}\n\t\treturn DateFormatUtils.format(timestamp, format, loc);\n\t}\n\n\t/**\n\t * Formats the date for today, in a specific format.\n\t * @param format the date format\n\t * @param loc the locale instance\n\t * @return today's date formatted\n\t */\n\tpublic static String formatDate(String format, Locale loc) {\n\t\treturn formatDate(timestamp(), format, loc);\n\t}\n\n\t/**\n\t * Returns the current year.\n\t * @return this year\n\t */\n\tpublic static int getCurrentYear() {\n\t\treturn Calendar.getInstance().get(Calendar.YEAR);\n\t}\n\n\t/**\n\t * Java timestamp.\n\t * @return {@link java.lang.System#currentTimeMillis()}\n\t */\n\tpublic static long timestamp() {\n\t\treturn System.currentTimeMillis();\n\t}\n\n\t/**\n\t * Returns an array of the months in the Gregorian calendar.\n\t * @param locale the locale used for the months' names\n\t * @return an array of the 12 months\n\t */\n\tpublic static String[] getMonths(Locale locale) {\n\t\tif (locale == null) {\n\t\t\tlocale = Locale.US;\n\t\t}\n\t\tDateFormatSymbols dfs = DateFormatSymbols.getInstance(locale);\n\t\treturn dfs.getMonths();\n\t}\n\n\t/**\n\t * @param localeStr locale string\n\t * @return a {@link Locale} instance from a locale string.\n\t */\n\tpublic static Locale getLocale(String localeStr) {\n\t\ttry {\n\t\t\treturn LocaleUtils.toLocale(localeStr);\n\t\t} catch (Exception e) {\n\t\t\treturn Locale.US;\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   NUMBER UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Rounds a float to an int.\n\t * @param d a float\n\t * @return a rounded int\n\t */\n\tpublic static int round(float d) {\n\t\treturn Math.round(d);\n\t}\n\n\t/**\n\t * Returns the price with two fractional digits at the end.\n\t * @param price a price\n\t * @return $###.##\n\t */\n\tpublic static String formatPrice(double price) {\n\t\treturn NUMBER_FORMAT.format(price);\n\t}\n\n\t/**\n\t * Round up a double using the \"half up\" method.\n\t * @param d a double\n\t * @return a double\n\t */\n\tpublic static double roundHalfUp(double d) {\n\t\treturn roundHalfUp(d, 2);\n\t}\n\n\t/**\n\t * Round up a double using the \"half up\" method.\n\t * @param d a double\n\t * @param scale the scale\n\t * @return a double\n\t */\n\tpublic static double roundHalfUp(double d, int scale) {\n\t\treturn BigDecimal.valueOf(d).setScale(scale, RoundingMode.HALF_UP).doubleValue();\n\t}\n\n\t/**\n\t * Abbreviates an integer by adding a letter suffix at the end.\n\t * E.g. \"M\" for millions, \"K\" for thousands, etc.\n\t * @param number a big integer\n\t * @param decPlaces decimal places\n\t * @return the rounded integer as a string\n\t */\n\tpublic static String abbreviateInt(Number number, int decPlaces) {\n\t\tif (number == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString abbrevn = number.toString();\n\t\t// 2 decimal places => 100, 3 => 1000, etc\n\t\tdecPlaces = (int) Math.pow(10, decPlaces);\n\t\t// Enumerate number abbreviations\n\t\tString[] abbrev = {\"K\", \"M\", \"B\", \"T\"};\n\t\tboolean done = false;\n\t\t// Go through the array backwards, so we do the largest first\n\t\tfor (int i = abbrev.length - 1; i >= 0 && !done; i--) {\n\t\t\t// Convert array index to \"1000\", \"1000000\", etc\n\t\t\tint size = (int) Math.pow(10, (double) (i + 1) * 3);\n\t\t\t// If the number is bigger or equal do the abbreviation\n\t\t\tif (size <= number.intValue()) {\n\t\t\t\t// Here, we multiply by decPlaces, round, and then divide by decPlaces.\n\t\t\t\t// This gives us nice rounding to a particular decimal place.\n\t\t\t\tnumber = Math.round(number.intValue() * decPlaces / (float) size) / decPlaces;\n\t\t\t\t// Add the letter for the abbreviation\n\t\t\t\tabbrevn = number + abbrev[i];\n\t\t\t\t// We are done... stop\n\t\t\t\tdone = true;\n\t\t\t}\n\t\t}\n\t\treturn abbrevn;\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t    \t   URL UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Decodes a URL-encoded string.\n\t * @param s a string\n\t * @return the decoded string\n\t */\n\tpublic static String urlDecode(String s) {\n\t\tif (s == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString decoded = s;\n\t\ttry {\n\t\t\tdecoded = URLDecoder.decode(s, Para.getConfig().defaultEncoding());\n\t\t} catch (UnsupportedEncodingException ex) {\n\t\t\tlogger.error(null, ex);\n\t\t}\n\t\treturn decoded;\n\t}\n\n\t/**\n\t * URL-encodes a string.\n\t * @param s a string\n\t * @return the encoded string\n\t */\n\tpublic static String urlEncode(String s) {\n\t\tif (s == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString encoded = s;\n\t\ttry {\n\t\t\tencoded = URLEncoder.encode(s, Para.getConfig().defaultEncoding());\n\t\t} catch (UnsupportedEncodingException ex) {\n\t\t\tlogger.error(null, ex);\n\t\t}\n\t\treturn encoded;\n\t}\n\n\t/**\n\t * URL validation.\n\t * @param url a URL\n\t * @return true if the URL is valid\n\t */\n\tpublic static boolean isValidURL(String url) {\n\t\treturn toURL(url) != null;\n\t}\n\n\t/**\n\t * Email validation.\n\t * @param email email address\n\t * @return true if the URL is valid\n\t */\n\tpublic static boolean isValidEmail(String email) {\n\t\treturn email != null && EMAIL_PATTERN.matcher(email).matches();\n\t}\n\n\t/**\n\t * Returns the host part of the URL.\n\t * @param url a URL\n\t * @return just the host\n\t */\n\tpublic static String getHostFromURL(String url) {\n\t\tURL u = toURL(url);\n\t\tString host = (u == null) ? \"\" : u.getHost();\n\t\treturn host;\n\t}\n\n\t/**\n\t * The basic URL without any parameters: &gt;scheme&lt;:&gt;authority&lt;.\n\t * @param url a full URL\n\t * @return the basic URL\n\t */\n\tpublic static String getBaseURL(String url) {\n\t\tURL u = toURL(url);\n\t\tString base = null;\n\t\tif (u != null) {\n\t\t\ttry {\n\t\t\t\tbase = u.toURI().getScheme().concat(\"://\").concat(u.getAuthority());\n\t\t\t} catch (URISyntaxException ex) {\n\t\t\t\tbase = null;\n\t\t\t}\n\t\t}\n\t\treturn base;\n\t}\n\n\tprivate static URL toURL(String url) {\n\t\tif (StringUtils.isBlank(url)) {\n\t\t\treturn null;\n\t\t}\n\t\tURL u;\n\t\ttry {\n\t\t\tu = new URL(url);\n\t\t} catch (MalformedURLException e) {\n\t\t\t// the URL is not in a valid form\n\t\t\tu = null;\n\t\t}\n\t\treturn u;\n\t}\n\n\t/**\n\t * Returns the default URL for a given domain object.\n\t * @param obj the domain object\n\t * @param includeName true if we want to include the name of the object in the URL\n\t * @param includeId true if we want to include the ID of the object in the URL\n\t * @return the object's URL - e.g. /users/123-name, /users/, /users/123\n\t */\n\tpublic static String getObjectURI(ParaObject obj, boolean includeName, boolean includeId) {\n\t\tif (obj == null) {\n\t\t\treturn \"/\";\n\t\t}\n\t\tif (includeId && obj.getId() != null) {\n\t\t\treturn (includeName && !StringUtils.isBlank(obj.getName())) ? obj.getObjectURI().concat(\"-\").\n\t\t\t\t\tconcat(urlEncode(noSpaces(obj.getName(), \"-\"))) : obj.getObjectURI();\n\t\t} else {\n\t\t\treturn obj.getObjectURI();\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t//    \t        MISC UTILS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Same as {@link java.lang.System#getProperty(java.lang.String)}.\n\t * @param name the name of the property\n\t * @return the property value\n\t */\n\tpublic static String getSystemProperty(String name) {\n\t\treturn StringUtils.isBlank(name) ? \"\" : System.getProperty(name);\n\t}\n\n\t/**\n\t * Checks if a response is of type JSON.\n\t * @param contentType the value of \"Content-Type\" header\n\t * @return true if JSON\n\t */\n\tpublic static boolean isJsonType(String contentType) {\n\t\treturn StringUtils.startsWith(contentType, \"application/json\") ||\n\t\t\t\tStringUtils.startsWith(contentType, \"application/javascript\") ||\n\t\t\t\tStringUtils.startsWith(contentType, \"text/javascript\");\t// F U facebook!\n\t}\n\n\t/**\n\t * Quick and dirty singular to plural conversion.\n\t * @param singul a word\n\t * @return a guess of its plural form\n\t */\n\tpublic static String singularToPlural(String singul) {\n\t\tif (!StringUtils.isAsciiPrintable(singul)) {\n\t\t\treturn singul;\n\t\t}\n\t\treturn (StringUtils.isBlank(singul) || singul.endsWith(\"es\") || singul.endsWith(\"ies\")) ? singul :\n\t\t\t\t(singul.endsWith(\"s\") ? singul + \"es\" :\n\t\t\t\t(singul.endsWith(\"y\") ? StringUtils.removeEndIgnoreCase(singul, \"y\") + \"ies\" :\n\t\t\t\t\t\t\t\t\t\tsingul + \"s\"));\n\t}\n\n\t/**\n\t * Checks if a class is primitive, String or a primitive wrapper.\n\t *\n\t * @param clazz a class\n\t * @return true if primitive or wrapper\n\t */\n\tpublic static boolean isBasicType(Class<?> clazz) {\n\t\treturn (clazz == null) ? false : (clazz.isPrimitive()\n\t\t\t\t|| clazz.equals(String.class)\n\t\t\t\t|| clazz.equals(Long.class)\n\t\t\t\t|| clazz.equals(Integer.class)\n\t\t\t\t|| clazz.equals(Boolean.class)\n\t\t\t\t|| clazz.equals(Byte.class)\n\t\t\t\t|| clazz.equals(Short.class)\n\t\t\t\t|| clazz.equals(Float.class)\n\t\t\t\t|| clazz.equals(Double.class)\n\t\t\t\t|| clazz.equals(Character.class));\n\t}\n\n\t/**\n\t * Returns the simple name of a class in lowercase (AKA the type).\n\t *\n\t * @param clazz a core class\n\t * @return just the name in lowercase or an empty string if clazz is null\n\t */\n\tpublic static String type(Class<? extends ParaObject> clazz) {\n\t\treturn (clazz == null) ? \"\" : clazz.getSimpleName().toLowerCase();\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t\t\t\tANNOTATIONS\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Returns a list of all declared fields in a class. Transient and serialVersionUID fields are skipped.\n\t * This method scans parent classes as well.\n\t * @param clazz a class to scan\n\t * @return a list of fields including those of the parent classes excluding the Object class.\n\t */\n\tpublic static List<Field> getAllDeclaredFields(Class<? extends ParaObject> clazz) {\n\t\tLinkedList<Field> fields = new LinkedList<>();\n\t\tif (clazz == null) {\n\t\t\treturn fields;\n\t\t}\n\t\tClass<?> parent = clazz;\n\t\tdo {\n\t\t\tfor (Field field : parent.getDeclaredFields()) {\n\t\t\t\tif (!Modifier.isTransient(field.getModifiers()) &&\n\t\t\t\t\t\t!field.getName().equals(\"serialVersionUID\")) {\n\t\t\t\t\tfields.add(field);\n\t\t\t\t}\n\t\t\t}\n\t\t\tparent = parent.getSuperclass();\n\t\t} while (!parent.equals(Object.class));\n\t\treturn fields;\n\t}\n\n\t/////////////////////////////////////////////\n\t//\t        MODIFIED SNOWFLAKE\n\t/////////////////////////////////////////////\n\n\t/**\n\t * Distributed id generator. Relies on node/worker ids and datacenter ids to prevent collisions.\n\t * @return a long unique ID string of digits\n\t */\n\tpublic static synchronized String getNewId() {\n\t\t// unique across JVMs as long as each has a different workerID\n\t\t// based on Twitter's Snowflake algorithm\n\t\tlong timestamp = timestamp();\n\n\t\tif (lastTimestamp == timestamp) {\n\t\t\tsequence = (sequence + 1) & SEQUENCE_MASK;\n\t\t\tif (sequence == 0) {\n\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);\n\t\t\t}\n\t\t} else {\n\t\t\tsequence = 0;\n\t\t}\n\n\t\tif (timestamp < lastTimestamp) {\n\t\t\tthrow new IllegalStateException(String.format(\"Clock moved backwards.  \"\n\t\t\t\t\t+ \"Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n\t\t}\n\n\t\tlastTimestamp = timestamp;\n\t\treturn Long.toString(((timestamp - TIMER_OFFSET) << TIMESTAMP_LEFT_SHIFT) |\n\t\t\t\t\t\t\t\t\t\t\t(dataCenterId << DATACENTER_ID_SHIFT) |\n\t\t\t\t\t\t\t\t\t\t\t\t\t(workerId << WORKER_ID_SHIFT) |\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(sequence));\n\n\t}\n\n\tprivate static long tilNextMillis(long lastTimestamp) {\n\t\tlong timestamp = timestamp();\n\n\t\twhile (timestamp <= lastTimestamp) {\n\t\t\ttimestamp = timestamp();\n\t\t}\n\n\t\treturn timestamp;\n\t}\n\n}\n", "/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.para.core.utils;\n\nimport com.erudika.para.core.App;\nimport com.erudika.para.core.ParaObject;\nimport com.erudika.para.core.Sysprop;\nimport com.erudika.para.core.Tag;\nimport com.erudika.para.core.User;\nimport com.erudika.para.core.Votable;\nimport com.erudika.para.core.annotations.Locked;\nimport static com.erudika.para.core.utils.ParaObjectUtils.*;\nimport static com.erudika.para.core.utils.Utils.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.commons.lang3.StringUtils;\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\n/**\n *\n * @author Alex Bogdanovski [alex@erudika.com]\n */\npublic class UtilsTest {\n\n\tpublic UtilsTest() {\n\t}\n\n\t@Test\n\tpublic void testMD5() {\n\t\tassertEquals(\"098f6bcd4621d373cade4e832627b4f6\", md5(\"test\"));\n\t\tassertEquals(\"47ec2dd791e31e2ef2076caf64ed9b3d\", md5(\"test123456\"));\n\t\tassertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", md5(\"\"));\n\t\tassertEquals(\"\", md5(null));\n\t}\n\n\t@Test\n\tpublic void testBcrypt() {\n\t\tassertNull(bcrypt(null));\n\t\tassertFalse(bcrypt(\"\").isEmpty());\n\t\tassertFalse(bcrypt(\"test\").isEmpty());\n\t\tassertNotEquals(bcrypt(\"testpass\"), bcrypt(\"testpass\")); // bcrypt hashes are salted i.e. !=\n\t}\n\t@Test\n\tpublic void testBcryptMatches() {\n\t\tassertFalse(bcryptMatches(null, null));\n\t\tassertFalse(bcryptMatches(null, \"test\"));\n\t\tassertFalse(bcryptMatches(\"\", \"test\"));\n\t\tassertFalse(bcryptMatches(\"test\", \"test\"));\n\t\tassertTrue(bcryptMatches(\"testpass\", \"$2a$12$OQXURSOiBPvDHZc0xzSn.erVlBGChnY8hi.OLLZVBczquUaOTJTg.\"));\n\t\tString unicodeHash = bcrypt(\"\u3042\u3044\u3046\u3048\u304a\u304a\");\n\t\tassertTrue(bcryptMatches(\"\u3042\u3044\u3046\u3048\u304a\u304a\", unicodeHash));\n\t}\n\n\t@Test\n\tpublic void testGenerateSecurityToken() {\n\t\tString tok1 = generateSecurityToken();\n\t\tString tok2 = generateSecurityToken();\n\t\tassertFalse(StringUtils.isBlank(tok1));\n\t\tassertFalse(StringUtils.isBlank(tok2));\n\t\tassertNotEquals(tok1, tok2);\n\t}\n\n\t@Test\n\tpublic void testEscapeJavascript() {\n\t\tassertNotNull(escapeJavascript(null));\n\t\tassertNotNull(escapeJavascript(\"\"));\n\t}\n\n\t@Test\n\tpublic void testStripHtml() {\n\t\tassertNotNull(stripHtml(null));\n\t\tassertNotNull(stripHtml(\"\"));\n\t\tassertEquals(\"text\", stripHtml(\"<html>text</html>\"));\n\t}\n\n\t@Test\n\tpublic void testMarkdownToHtml() {\n\t\tassertNotNull(markdownToHtml(null));\n\t\tassertNotNull(markdownToHtml(\"\"));\n\t\tassertFalse(markdownToHtml(\"*bold*\").isEmpty());\n\t\tassertTrue(markdownToHtml(\"<center/>\", false).startsWith(\"<p>&lt;center\"));\n\t\tassertEquals(\"<center></center>\", markdownToHtml(\"<center/>\", true));\n\t}\n\n\t@Test\n\tpublic void testCompileMustache() {\n\t\tassertNotNull(compileMustache(null, \"\"));\n\t\tassertNotNull(compileMustache(new HashMap<>(), \"test\"));\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tmap.put(\"test\", \"string\");\n\t\tassertEquals(\"<html>string</html>\", compileMustache(map, \"<html>{{test}}</html>\"));\n\t\tmap.put(\"test\", \"<b>string</b>\");\n\t\tassertEquals(\"<html>&lt;b&gt;string&lt;/b&gt;</html>\", compileMustache(map, \"<html>{{test}}</html>\", true));\n\t}\n\n\t@Test\n\tpublic void testAbbreviate() {\n\t\tassertNotNull(abbreviate(null, 0));\n\t\tassertNotNull(abbreviate(\"\", 0));\n\t\tassertFalse(abbreviate(\"this is a test\", 4).isEmpty());\n\t}\n\n\t@Test\n\tpublic void testArrayJoin() {\n\t\tassertNotNull(arrayJoin(null, null));\n\t\tassertNotNull(arrayJoin(new ArrayList<>(), null));\n\t\tassertEquals(\"one,two,three\", arrayJoin(Arrays.asList(\"one\",\"two\",\"three\"), \",\"));\n\t\tassertEquals(\"onetwothree\", arrayJoin(Arrays.asList(\"one\",\"two\",\"three\"), \"\"));\n\t}\n\n\t@Test\n\tpublic void testStripAndTrim() {\n\t\tassertNotNull(stripAndTrim(null));\n\t\tassertNotNull(stripAndTrim(\"\"));\n\t\tassertEquals(\"test\", stripAndTrim(\"  $% ^&test-?<?> \u00a7 \u00b1<_ ) (/.,\"));\n\t\tassertEquals(\"test 123 test\", stripAndTrim(\"  $% ^&test\t\t-?<? 123    > \u00a7 \u00b1test<_ ) (/.,\"));\n\t\tassertEquals(\"\u0442\u0435\u0441\u0442 asd 123\", stripAndTrim(\"\u0442\u0435\u0441\u0442 asd 123 \u00a9\"));\n\t\tassertEquals(\"asd--123\", stripAndTrim(\"\u0442\u0435\u0441\u0442 asd()123 \u00a9\", \"-\", true));\n\t}\n\n\t@Test\n\tpublic void testNoSpaces() {\n\t\tassertNotNull(noSpaces(null, \"-\"));\n\t\tassertNotNull(noSpaces(\"\", \"-\"));\n\t\tassertEquals(\"test-123-456-789-000\", noSpaces(\"test 123 456      789\t000\", \"-\"));\n\t}\n\n\t@Test\n\tpublic void testFormatMessage() {\n\t\tassertNotNull(formatMessage(null));\n\t\tassertNotNull(formatMessage(\"\"));\n\t\tassertNotNull(formatMessage(\"\", null, null));\n\t\tassertEquals(\"test\", formatMessage(\"test\", \"one\"));\n\t\tassertEquals(\"test two\", formatMessage(\"test {0}\", \"two\"));\n\t}\n\n\t@Test\n\tpublic void testBase64enc() {\n\t\tassertNotNull(base64enc(null));\n\t\tassertNotNull(base64enc(new byte[0]));\n\t\tassertEquals(\"dGVzdDEyMyBzdHJpbmc=\", base64enc(\"test123 string\".getBytes()));\n\t\tassertEquals(\"dGVzdDEyMyBzdHJpbmc\", base64encURL(\"test123 string\".getBytes()));\n\t\tassertEquals(\"ICAg\", base64enc(\"   \".getBytes()));\n\t\tassertEquals(\"MTIz\", base64enc(base64dec(\"MTIz\").getBytes()));\n\t}\n\n\t@Test\n\tpublic void testBase64dec() {\n\t\tassertNotNull(base64dec(null));\n\t\tassertNotNull(base64dec(\"\"));\n\t\tassertEquals(\"test123 string\", base64dec(\"dGVzdDEyMyBzdHJpbmc=\"));\n\t\tassertEquals(\"   \", base64dec(\"ICAg\"));\n\t\tassertEquals(\"123\", base64dec(base64enc(\"123\".getBytes())));\n//\t\tassertEquals(\"\", base64dec(\"asd=\")); // error for invalid encoding\n\t}\n\n\t@Test\n\tpublic void testFormatDate() {\n\t\tassertNotNull(formatDate(null, null));\n\t\tassertNotNull(formatDate(null, null, null));\n\t\tassertEquals(\"2001\", formatDate(1000000000000L, \"yyyy\", Locale.US));\n\t}\n\n\t@Test\n\tpublic void testGetCurrentYear() {\n\t\tassertTrue(getCurrentYear() > 2013);\n\t}\n\n\t@Test\n\tpublic void testGetMonths() {\n\t\tassertEquals(\"January\", getMonths(null)[0]);\n\t}\n\n\t@Test\n\tpublic void testAbbreviateInt() {\n\t\tassertNotNull(abbreviateInt(null, 0));\n\t\tassertEquals(\"1K\", abbreviateInt(1000, 0));\n\t\tassertEquals(\"1K\", abbreviateInt(1000, 1));\n\t\tassertEquals(\"1M\", abbreviateInt(1000000, 1));\n\t}\n\n\t@Test\n\tpublic void testUrlDecode() {\n\t\tassertNotNull(urlDecode(null));\n\t\tassertEquals(\" \", urlDecode(\"%20\"));\n\t\tassertEquals(\"&\", urlDecode(\"&\"));\n\t}\n\n\t@Test\n\tpublic void testUrlEncode() {\n\t\tassertNotNull(urlEncode(null));\n\t\tassertEquals(\"+\", urlEncode(\" \"));\n\t\tassertEquals(\"a\", urlEncode(\"a\"));\n\t\tassertEquals(\" \", urlDecode(urlEncode(\" \")));\n\t\tassertEquals(\"?test! \", urlDecode(urlEncode(\"?test! \")));\n\t}\n\n\t@Test\n\tpublic void testIsValidURL() {\n\t\tassertFalse(isValidURL(null));\n\t\tassertFalse(isValidURL(\"\"));\n\t\tassertTrue(isValidURL(\"http://test.com\"));\n\t\tassertFalse(isValidURL(\"test.com\"));\n\t\tassertFalse(isValidURL(\"test.com\"));\n\t}\n\n\t@Test\n\tpublic void testGetHostFromURL() {\n\t\tassertNotNull(getHostFromURL(null));\n\t\tassertNotNull(getHostFromURL(\"\"));\n\t\tassertEquals(\"test.com\", getHostFromURL(\"http://test.com\"));\n\t}\n\n\t@Test\n\tpublic void testGetBaseURL() {\n\t\tassertNull(getBaseURL(null));\n\t\tassertNull(getBaseURL(\"\"));\n\t\tassertEquals(\"http://test.com\", getBaseURL(\"http://test.com/index.html\"));\n\t}\n\n\t@Test\n\tpublic void testGetSystemProperty() {\n\t\tassertEquals(null, getSystemProperty(\"test.test.prop\"));\n\t\tSystem.setProperty(\"test.test.prop\", \"test123\");\n\t\tassertEquals(\"test123\", getSystemProperty(\"test.test.prop\"));\n\t}\n\n\t@Test\n\tpublic void testGetObjectURI() {\n\t\tUser u = new User(\"123\");\n\t\tassertNotNull(getObjectURI(null, false, false));\n\t\tassertEquals(u.getObjectURI(), getObjectURI(u, false, true));\n\t}\n\n\t@Test\n\tpublic void testSingularToPlural() {\n\t\tassertNull(singularToPlural(null));\n\t\tassertNotNull(singularToPlural(\"\"));\n\t\tassertEquals(\"users\", singularToPlural(\"user\"));\n\t\tassertEquals(\"recipes\", singularToPlural(\"recipe\"));\n\t\tassertEquals(\"recipes\", singularToPlural(\"recipes\"));\n\t\tassertEquals(\"cities\", singularToPlural(\"city\"));\n\t\tassertEquals(\"cities\", singularToPlural(\"cities\"));\n\t}\n\n//\t@Test\n//\tpublic void testPopulate() {\n//\t\tMap<String, String[]> map = new HashMap<String, String[]>();\n//\t\tlong timestamp = 1390052381000L;\n//\t\tmap.put(Config._EMAIL, new String[]{\"u@test.co\"});\n//\t\tmap.put(Config._NAME, new String[]{\"User Name\"});\n//\t\tmap.put(Config._TAGS, new String[]{\"tag1\", \"tag2\", \"tag3\"});\n//\t\tmap.put(Config._TIMESTAMP, new String[]{Long.toString(timestamp)});\n//\n//\t\tUser u = new User();\n//\t\tu.setActive(true);\n//\t\tpopulate(u, null);\n//\t\tassertNull(u.getEmail());\n//\t\tpopulate(u, new HashMap<String, String[]>());\n//\t\tassertNull(u.getEmail());\n//\t\tpopulate(u, map);\n//\t\tassertEquals(map.get(Config._EMAIL)[0], u.getEmail());\n//\t\tassertEquals(map.get(Config._NAME)[0], u.getName());\n//\t\tassertTrue(u.getTags().contains(map.get(Config._TAGS)[0]));\n//\t\tassertEquals(timestamp, u.getTimestamp().longValue());\n//\t\tassertEquals(true, u.getActive());\n//\t}\n\n\t@Test\n\tpublic void testTypesMatch() {\n\t\tUser u = new User();\n\t\tassertTrue(typesMatch(u));\n\t\tu.setType(\"usr\");\n\t\tassertFalse(typesMatch(u));\n\t\tassertFalse(typesMatch(null));\n\t}\n\n\t@Test\n\tpublic void testGetAnnotatedFields() {\n\t\tUser u = new User();\n\t\tassertTrue(getAnnotatedFields(null).isEmpty());\n\t\tassertFalse(getAnnotatedFields(u).isEmpty());\n\t\tMap<String, Object> fm1 = getAnnotatedFields(u);\n\t\tMap<String, Object> fm2 = getAnnotatedFields(u, Locked.class);\n\t\tassertFalse(fm1.isEmpty());\n\t\tassertFalse(fm2.isEmpty());\n\t\tassertTrue(fm1.containsKey(Config._ID));\n\t\tassertFalse(fm2.containsKey(Config._ID));\n\t\tassertTrue(fm1.containsKey(Config._TAGS));\n\t\tassertTrue(fm2.containsKey(Config._TAGS));\n\t\tassertTrue(fm1.containsKey(Config._EMAIL));\n\t\tassertTrue(fm2.containsKey(Config._EMAIL));\n\t}\n\n\t@Test\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void testSetAnnotatedFields() {\n\t\tassertNull(setAnnotatedFields(null));\n\t\tassertNull(setAnnotatedFields(new HashMap<>()));\n\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tlong timestamp = 1390052381000L;\n\t\tmap.put(Config._ID, \"123\");\n\t\tmap.put(Config._TYPE, Utils.type(User.class));\n\t\tmap.put(Config._EMAIL, \"u@test.co\");\n\t\tmap.put(Config._NAME, \"User Name\");\n\t\tmap.put(Config._TAGS, \"[\\\"tag1\\\",\\\"tag2\\\"]\");\t// flattened JSON string\n\t\tmap.put(Config._TIMESTAMP, Long.toString(timestamp));\n\n\t\tUser obj = setAnnotatedFields(map);\n\t\tassertNotNull(obj);\n\t\tassertEquals(map.get(Config._ID), obj.getId());\n\t\tassertEquals(map.get(Config._NAME), obj.getName());\n\t\tassertEquals(map.get(Config._EMAIL), obj.getEmail());\n\t\tassertEquals(timestamp, obj.getTimestamp().longValue());\n\t\tassertTrue(obj.getTags().contains(\"tag1\") && obj.getTags().contains(\"tag2\"));\n\n\t\tUser obj2 = new User(\"234\");\n\t\tobj2.setActive(true);\n\t\tsetAnnotatedFields(obj2, map, null);\n\t\tassertEquals(map.get(Config._ID), obj2.getId());\n\t\tassertEquals(map.get(Config._NAME), obj2.getName());\n\t\tassertEquals(map.get(Config._EMAIL), obj2.getEmail());\n\t\tassertEquals(timestamp, obj2.getTimestamp().longValue());\n\t\tassertEquals(true, obj2.getActive());\n\n\t\t// complex nested objects coming from Jackson\n\t\tMap<String, Object> map1 = new HashMap<>();\n\t\tMap<String, Object> props = new HashMap<String, Object>(){{\n\t\t\tput(\"testprop1\", \"test\");\n\t\t\tput(\"testprop2\", true);\n\t\t\tput(\"testprop3\", 5);\n\t\t\tput(\"testprop4\", Collections.singletonList(\"list\"));\n\t\t}};\n\n\t\tmap1.put(Config._ID, \"123\");\n\t\tmap1.put(Config._TYPE, Utils.type(Sysprop.class));\n\t\tmap1.put(Config._NAME, \"Sysprop\");\n\t\tmap1.put(Config._TIMESTAMP, timestamp);\n\t\tmap1.put(\"properties\", props);\n\n\t\tSysprop sys = setAnnotatedFields(map1);\n\t\tassertNotNull(sys);\n\t\tassertEquals(map1.get(Config._ID), sys.getId());\n\t\tassertEquals(map1.get(Config._TYPE), sys.getType());\n\t\tassertEquals(map1.get(Config._NAME), sys.getName());\n\t\tassertEquals(map1.get(Config._TIMESTAMP), sys.getTimestamp());\n\t\tassertEquals(props.size(), sys.getProperties().size());\n\t\tassertEquals(props.get(\"testprop1\"), sys.getProperties().get(\"testprop1\"));\n\t\tassertEquals(props.get(\"testprop2\"), sys.getProperties().get(\"testprop2\"));\n\t\tassertEquals(props.get(\"testprop3\"), sys.getProperties().get(\"testprop3\"));\n\t\tassertEquals(props.get(\"testprop4\"), sys.getProperties().get(\"testprop4\"));\n\t\tassertEquals(((List<String>) props.get(\"testprop4\")).get(0),\n\t\t\t\t((List<String>) sys.getProperties().get(\"testprop4\")).get(0));\n\n\t\t// unknown fields and custom types test\n\t\tmap1.put(Config._TYPE, \"customtype\");\n\t\tmap1.put(\"animal\", \"cat\");\n\t\tmap1.put(\"hair\", \"long\");\n\t\tmap1.put(\"colour\", \"white\");\n\t\tmap1.put(\"legs\", 4);\n\n\t\tSysprop sys2 = setAnnotatedFields(map1);\n\t\tassertNotNull(sys2);\n\t\tassertEquals(map1.get(Config._ID), sys2.getId());\n\t\tassertEquals(map1.get(Config._TYPE), sys2.getType());\n\t\tassertEquals(map1.get(Config._NAME), sys2.getName());\n\t\tassertEquals(map1.get(Config._TIMESTAMP), sys2.getTimestamp());\n\t\tassertEquals(8, sys2.getProperties().size());\n\t\tassertEquals(map1.get(\"animal\"), sys2.getProperties().get(\"animal\"));\n\t\tassertEquals(map1.get(\"hair\"), sys2.getProperties().get(\"hair\"));\n\t\tassertEquals(map1.get(\"colour\"), sys2.getProperties().get(\"colour\"));\n\t\tassertEquals(map1.get(\"legs\"), sys2.getProperties().get(\"legs\"));\n\n\t\tmap1.put(\"animal\", null);\n\t\tmap1.put(\"hair\", null);\n\t\tmap1.put(\"colour\", null);\n\t\tmap1.put(\"legs\", null);\n\t\t// update\n\t\tsetAnnotatedFields(sys2, map1, Locked.class);\n\t\tassertEquals(4, sys2.getProperties().size());\n\t}\n\n\t@Test\n\tpublic void testToObject() {\n\t\tassertNotNull(toObject(null, null));\n\t\tassertNotNull(toObject(null, \"\"));\n\t\tassertNotNull(toObject(null, \"test123\"));\n\t\tassertEquals(Sysprop.class, toObject(null, \"test123\").getClass());\n\t\tassertEquals(User.class, toObject(null, Utils.type(User.class)).getClass());\n\t\tassertEquals(Tag.class, toObject(null, Utils.type(Tag.class)).getClass());\n\n\t\tApp app = new App();\n\t\tapp.addDatatype(\"wolves\", \"wolf\");\n\t\tassertEquals(\"wolf\", toObject(app, \"wolves\").getType());\n\t\tassertEquals(\"wolf\", toObject(app, \"wolf\").getType());\n\t\tassertEquals(\"wolfs\", toObject(app, \"wolfs\").getType());\n\t}\n\n\t@Test\n\tpublic void testToClass() {\n\t\tassertNotNull(toClass(null));\n\t\tassertNotNull(toClass(\"\"));\n\t\tassertEquals(Sysprop.class, toClass(\"test123\"));\n\t\tassertEquals(User.class, toClass(Utils.type(User.class)));\n\t\tassertEquals(Tag.class, toClass(Utils.type(Tag.class)));\n\t}\n\n\t@Test\n\tpublic void testGetCoreClassesMap() {\n\t\tSet<Class<? extends ParaObject>> set = new HashSet<>();\n\t\tset.addAll(getCoreClassesMap().values());\n\t\tassertFalse(set.isEmpty());\n\t\tassertTrue(set.contains(Tag.class));\n\t\tassertFalse(set.contains(Votable.class));\n\t\tassertFalse(set.contains(ParaObject.class));\n\t}\n\n\t@Test\n\tpublic void testFromJSON() {\n\t\tassertNull(fromJSON(\"\"));\n\t\tassertNull(fromJSON(\"{}\")); // depending on how Jackson is configured this may be null or not\n\n\t\tParaObject obj1 = fromJSON(\"{\\\"type\\\":\\\"testtype\\\", \\\"name\\\":\\\"testname\\\", \\\"id\\\":\\\"123\\\"}\");\n\t\tParaObject obj2 = fromJSON(\"{\\\"type\\\":\\\"user\\\", \\\"name\\\":\\\"user name\\\", \\\"id\\\":\\\"111\\\"}\");\n\t\tParaObject obj3 = fromJSON(\"{\\\"user\\\":\\\"one\\\", \\\"alias\\\":\\\"user1\\\", \\\"id\\\":\\\"456\\\", \\\"name\\\":\\\"name\\\"}\");\n\n\t\tassertNotNull(obj1);\n\t\tassertEquals(Sysprop.class, obj1.getClass());\n\t\tassertEquals(\"123\", obj1.getId());\n\t\tassertEquals(\"testname\", obj1.getName());\n\n\t\tassertNotNull(obj2);\n\t\tassertEquals(User.class, obj2.getClass());\n\t\tassertEquals(\"111\", obj2.getId());\n\t\tassertEquals(\"user name\", obj2.getName());\n\n\t\tassertNotNull(obj3);\n\t\tassertEquals(Sysprop.class, obj3.getClass());\n\t\tassertEquals(\"456\", obj3.getId());\n\t\tassertEquals(\"name\", obj3.getName());\n\t}\n\n\t@Test\n\tpublic void testToJSON() {\n\t\tassertNotNull(toJSON(null));\n\t\tassertFalse(toJSON(new User()).isEmpty());\n\t}\n\n\t@Test\n\tpublic void testIsBasicType() {\n\t\tassertFalse(isBasicType(null));\n\t\tassertTrue(isBasicType(Integer.class));\n\t\tassertTrue(isBasicType(Long.class));\n\t\tassertFalse(isBasicType(Object.class));\n\t\tassertFalse(isBasicType(ParaObject.class));\n\t\t// etc.\n\t}\n\n\t@Test\n\tpublic void testGetNewId() {\n\t\tassertFalse(getNewId().isEmpty());\n\t}\n\n\t@Test\n\tpublic void testGetAllDeclaredFields() {\n\t\tassertTrue(getAllDeclaredFields(null).isEmpty());\n\t\tassertTrue(getAllDeclaredFields(null).isEmpty());\n\t\tassertFalse(getAllDeclaredFields(User.class).isEmpty());\n\t}\n}"], "filenames": ["para-core/src/main/java/com/erudika/para/core/utils/Utils.java", "para-server/src/test/java/com/erudika/para/core/utils/UtilsTest.java"], "buggy_code_start_loc": [333, 20], "buggy_code_end_loc": [347, 116], "fixing_code_start_loc": [333, 19], "fixing_code_end_loc": [358, 117], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository erudika/para prior to v1.45.11.", "other": {"cve": {"id": "CVE-2022-1782", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-18T15:15:08.837", "lastModified": "2022-05-26T03:00:33.513", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository erudika/para prior to v1.45.11."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Gen\u00e9rico en el repositorio de GitHub erudika/para versiones anteriores a v1.45.11"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 9.4, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:erudika:para:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.45.11", "matchCriteriaId": "9681E6A4-3CDB-4FE4-958A-136719A981BE"}]}]}], "references": [{"url": "https://github.com/erudika/para/commit/9d844f31333475a0394dd14b901ea50674b281f8", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/7555693f-94e4-4183-98cb-3497da6df028", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/erudika/para/commit/9d844f31333475a0394dd14b901ea50674b281f8"}}