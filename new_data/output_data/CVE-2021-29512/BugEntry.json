{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/math_ops.cc.\n\n#include \"tensorflow/core/platform/errors.h\"\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/kernels/bincount_op.h\"\n#include \"tensorflow/core/kernels/fill_functor.h\"\n#include \"tensorflow/core/lib/core/threadpool.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\nusing thread::ThreadPool;\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace functor {\n\ntemplate <typename Tidx, typename T>\nstruct BincountFunctor<CPUDevice, Tidx, T, true> {\n  static Status Compute(OpKernelContext* context,\n                        const typename TTypes<Tidx, 1>::ConstTensor& arr,\n                        const typename TTypes<T, 1>::ConstTensor& weights,\n                        typename TTypes<T, 1>::Tensor& output,\n                        const Tidx num_bins) {\n    Tensor all_nonneg_t;\n    TF_RETURN_IF_ERROR(context->allocate_temp(\n        DT_BOOL, TensorShape({}), &all_nonneg_t, AllocatorAttributes()));\n    all_nonneg_t.scalar<bool>().device(context->eigen_cpu_device()) =\n        (arr >= Tidx(0)).all();\n    if (!all_nonneg_t.scalar<bool>()()) {\n      return errors::InvalidArgument(\"Input arr must be non-negative!\");\n    }\n\n    // Allocate partial output bin sums for each worker thread. Worker ids in\n    // ParallelForWithWorkerId range from 0 to NumThreads() inclusive.\n    ThreadPool* thread_pool =\n        context->device()->tensorflow_cpu_worker_threads()->workers;\n    const int64 num_threads = thread_pool->NumThreads() + 1;\n    Tensor partial_bins_t;\n    TF_RETURN_IF_ERROR(context->allocate_temp(\n        DT_BOOL, TensorShape({num_threads, num_bins}), &partial_bins_t));\n    auto partial_bins = partial_bins_t.matrix<bool>();\n    partial_bins.setZero();\n    thread_pool->ParallelForWithWorkerId(\n        arr.size(), 8 /* cost */,\n        [&](int64 start_ind, int64 limit_ind, int64 worker_id) {\n          for (int64 i = start_ind; i < limit_ind; i++) {\n            Tidx value = arr(i);\n            if (value < num_bins) {\n              partial_bins(worker_id, value) = true;\n            }\n          }\n        });\n\n    // Sum the partial bins along the 0th axis.\n    Eigen::array<int, 1> reduce_dim({0});\n    output.device(context->eigen_cpu_device()) =\n        partial_bins.any(reduce_dim).cast<T>();\n    return Status::OK();\n  }\n};\n\ntemplate <typename Tidx, typename T>\nstruct BincountFunctor<CPUDevice, Tidx, T, false> {\n  static Status Compute(OpKernelContext* context,\n                        const typename TTypes<Tidx, 1>::ConstTensor& arr,\n                        const typename TTypes<T, 1>::ConstTensor& weights,\n                        typename TTypes<T, 1>::Tensor& output,\n                        const Tidx num_bins) {\n    Tensor all_nonneg_t;\n    TF_RETURN_IF_ERROR(context->allocate_temp(\n        DT_BOOL, TensorShape({}), &all_nonneg_t, AllocatorAttributes()));\n    all_nonneg_t.scalar<bool>().device(context->eigen_cpu_device()) =\n        (arr >= Tidx(0)).all();\n    if (!all_nonneg_t.scalar<bool>()()) {\n      return errors::InvalidArgument(\"Input arr must be non-negative!\");\n    }\n\n    // Allocate partial output bin sums for each worker thread. Worker ids in\n    // ParallelForWithWorkerId range from 0 to NumThreads() inclusive.\n    ThreadPool* thread_pool =\n        context->device()->tensorflow_cpu_worker_threads()->workers;\n    const int64 num_threads = thread_pool->NumThreads() + 1;\n    Tensor partial_bins_t;\n    TF_RETURN_IF_ERROR(context->allocate_temp(\n        DataTypeToEnum<T>::value, TensorShape({num_threads, num_bins}),\n        &partial_bins_t));\n    auto partial_bins = partial_bins_t.matrix<T>();\n    partial_bins.setZero();\n    thread_pool->ParallelForWithWorkerId(\n        arr.size(), 8 /* cost */,\n        [&](int64 start_ind, int64 limit_ind, int64 worker_id) {\n          for (int64 i = start_ind; i < limit_ind; i++) {\n            Tidx value = arr(i);\n            if (value < num_bins) {\n              if (weights.size()) {\n                partial_bins(worker_id, value) += weights(i);\n              } else {\n                // Complex numbers don't support \"++\".\n                partial_bins(worker_id, value) += T(1);\n              }\n            }\n          }\n        });\n\n    // Sum the partial bins along the 0th axis.\n    Eigen::array<int, 1> reduce_dim({0});\n    output.device(context->eigen_cpu_device()) = partial_bins.sum(reduce_dim);\n    return Status::OK();\n  }\n};\n\ntemplate <typename Tidx, typename T, bool binary_output>\nstruct BincountReduceFunctor<CPUDevice, Tidx, T, binary_output> {\n  static Status Compute(OpKernelContext* context,\n                        const typename TTypes<Tidx, 2>::ConstTensor& in,\n                        const typename TTypes<T, 2>::ConstTensor& weights,\n                        typename TTypes<T, 2>::Tensor& out,\n                        const Tidx num_bins) {\n    const int num_rows = out.dimension(0);\n    const int num_cols = in.dimension(1);\n    ThreadPool* thread_pool =\n        context->device()->tensorflow_cpu_worker_threads()->workers;\n    thread_pool->ParallelForWithWorkerId(\n        num_rows, 8 /* cost */,\n        [&](int64 start_row, int64 end_row, int64 worker_id) {\n          for (int64 i = start_row; i < end_row; ++i) {\n            for (int64 j = 0; j < num_cols; ++j) {\n              Tidx value = in(i, j);\n              if (value < num_bins) {\n                if (binary_output) {\n                  out(i, value) = T(1);\n                } else {\n                  if (weights.size()) {\n                    out(i, value) += weights(i, j);\n                  } else {\n                    out(i, value) += T(1);\n                  }\n                }\n              }\n            }\n          }\n        });\n    return Status::OK();\n  }\n};\n\n}  // namespace functor\n\ntemplate <typename Device, typename T>\nclass BincountOp : public OpKernel {\n public:\n  explicit BincountOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& arr_t = ctx->input(0);\n    const Tensor& size_tensor = ctx->input(1);\n    OP_REQUIRES(ctx, size_tensor.dims() == 0,\n                errors::InvalidArgument(\"Shape must be rank 0 but is rank \",\n                                        size_tensor.dims()));\n    int32 size = size_tensor.scalar<int32>()();\n    OP_REQUIRES(\n        ctx, size >= 0,\n        errors::InvalidArgument(\"size (\", size, \") must be non-negative\"));\n\n    const Tensor& weights_t = ctx->input(2);\n    const auto arr = arr_t.flat<int32>();\n    const auto weights = weights_t.flat<T>();\n    Tensor* output_t;\n    OP_REQUIRES_OK(ctx,\n                   ctx->allocate_output(0, TensorShape({size}), &output_t));\n    auto output = output_t->flat<T>();\n    OP_REQUIRES_OK(ctx,\n                   functor::BincountFunctor<Device, int32, T, false>::Compute(\n                       ctx, arr, weights, output, size));\n  }\n};\n\n#define REGISTER_KERNELS(type)                                       \\\n  REGISTER_KERNEL_BUILDER(                                           \\\n      Name(\"Bincount\").Device(DEVICE_CPU).TypeConstraint<type>(\"T\"), \\\n      BincountOp<CPUDevice, type>)\n\nTF_CALL_NUMBER_TYPES(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_KERNELS(type)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"Bincount\")                \\\n                              .Device(DEVICE_GPU)         \\\n                              .HostMemory(\"size\")         \\\n                              .TypeConstraint<type>(\"T\"), \\\n                          BincountOp<GPUDevice, type>)\n\nTF_CALL_int32(REGISTER_KERNELS);\nTF_CALL_float(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename Tidx, typename T>\nclass DenseBincountOp : public OpKernel {\n public:\n  explicit DenseBincountOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& data = ctx->input(0);\n    OP_REQUIRES(ctx, data.dims() <= 2,\n                errors::InvalidArgument(\n                    \"Shape must be at most rank 2 but is rank \", data.dims()));\n\n    const Tensor& size_t = ctx->input(1);\n    const Tensor& weights = ctx->input(2);\n\n    Tidx size = size_t.scalar<Tidx>()();\n    OP_REQUIRES(\n        ctx, size >= 0,\n        errors::InvalidArgument(\"size (\", size, \") must be non-negative\"));\n\n    Tensor* out_t;\n    functor::SetZeroFunctor<Device, T> fill;\n    if (data.dims() == 1) {\n      OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({size}), &out_t));\n      auto out = out_t->flat<T>();\n      fill(ctx->eigen_device<Device>(), out);\n      if (binary_output_) {\n        OP_REQUIRES_OK(\n            ctx, functor::BincountFunctor<Device, Tidx, T, true>::Compute(\n                     ctx, data.flat<Tidx>(), weights.flat<T>(), out, size));\n      } else {\n        OP_REQUIRES_OK(\n            ctx, functor::BincountFunctor<Device, Tidx, T, false>::Compute(\n                     ctx, data.flat<Tidx>(), weights.flat<T>(), out, size));\n      }\n    } else if (data.dims() == 2) {\n      const int64 num_rows = data.dim_size(0);\n      auto weight_matrix =\n          (weights.NumElements() == 0)\n              ? weights.shaped<T, 2>(gtl::InlinedVector<int64, 2>(2, 0))\n              : weights.matrix<T>();\n      OP_REQUIRES_OK(\n          ctx, ctx->allocate_output(0, TensorShape({num_rows, size}), &out_t));\n      auto out = out_t->matrix<T>();\n      fill(ctx->eigen_device<Device>(), out_t->flat<T>());\n      if (binary_output_) {\n        OP_REQUIRES_OK(\n            ctx, functor::BincountReduceFunctor<Device, Tidx, T, true>::Compute(\n                     ctx, data.matrix<Tidx>(), weight_matrix, out, size));\n      } else {\n        OP_REQUIRES_OK(\n            ctx,\n            functor::BincountReduceFunctor<Device, Tidx, T, false>::Compute(\n                ctx, data.matrix<Tidx>(), weight_matrix, out, size));\n      }\n    }\n  }\n\n private:\n  bool binary_output_;\n};\n\n#define REGISTER_KERNELS(Tidx, T)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"DenseBincount\")              \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<Tidx>(\"Tidx\"), \\\n                          DenseBincountOp<CPUDevice, Tidx, T>);\n#define REGISTER_CPU_KERNELS(T) \\\n  REGISTER_KERNELS(int32, T);   \\\n  REGISTER_KERNELS(int64, T);\n\nTF_CALL_NUMBER_TYPES(REGISTER_CPU_KERNELS);\n#undef REGISTER_CPU_KERNELS\n#undef REGISTER_KERNELS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_KERNELS(Tidx, T)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"DenseBincount\")              \\\n                              .Device(DEVICE_GPU)            \\\n                              .HostMemory(\"size\")            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<Tidx>(\"Tidx\"), \\\n                          DenseBincountOp<GPUDevice, Tidx, T>);\n#define REGISTER_GPU_KERNELS(T) \\\n  REGISTER_KERNELS(int32, T);   \\\n  REGISTER_KERNELS(int64, T);\n\nTF_CALL_int32(REGISTER_GPU_KERNELS);\nTF_CALL_float(REGISTER_GPU_KERNELS);\n#undef REGISTER_GPU_KERNELS\n#undef REGISTER_KERNELS\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename Tidx, typename T>\nclass SparseBincountOp : public OpKernel {\n public:\n  explicit SparseBincountOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& indices = ctx->input(0);\n    const auto values = ctx->input(1).flat<Tidx>();\n    const Tensor& dense_shape = ctx->input(2);\n    const Tensor& size_t = ctx->input(3);\n    const auto weights = ctx->input(4).flat<T>();\n    const int64 weights_size = weights.size();\n\n    Tidx size = size_t.scalar<Tidx>()();\n    OP_REQUIRES(\n        ctx, size >= 0,\n        errors::InvalidArgument(\"size (\", size, \") must be non-negative\"));\n\n    bool is_1d = dense_shape.NumElements() == 1;\n\n    Tensor* out_t;\n    functor::SetZeroFunctor<Device, T> fill;\n    if (is_1d) {\n      OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({size}), &out_t));\n      auto out = out_t->flat<T>();\n      fill(ctx->eigen_device<Device>(), out);\n      if (binary_output_) {\n        OP_REQUIRES_OK(ctx,\n                       functor::BincountFunctor<Device, Tidx, T, true>::Compute(\n                           ctx, values, weights, out, size));\n      } else {\n        OP_REQUIRES_OK(\n            ctx, functor::BincountFunctor<Device, Tidx, T, false>::Compute(\n                     ctx, values, weights, out, size));\n      }\n    } else {\n      const auto shape = dense_shape.flat<int64>();\n      const int64 num_rows = shape(0);\n      OP_REQUIRES_OK(\n          ctx, ctx->allocate_output(0, TensorShape({num_rows, size}), &out_t));\n      const auto out = out_t->matrix<T>();\n      fill(ctx->eigen_device<Device>(), out_t->flat<T>());\n      const auto indices_mat = indices.matrix<int64>();\n      for (int64 i = 0; i < indices_mat.dimension(0); ++i) {\n        const int64 batch = indices_mat(i, 0);\n        const Tidx bin = values(i);\n        if (bin < size) {\n          if (binary_output_) {\n            out(batch, bin) = T(1);\n          } else {\n            if (weights_size) {\n              out(batch, bin) += weights(i);\n            } else {\n              out(batch, bin) += T(1);\n            }\n          }\n        }\n      }\n    }\n  }\n\n private:\n  bool binary_output_;\n};\n\n#define REGISTER_KERNELS(Tidx, T)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseBincount\")             \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<Tidx>(\"Tidx\"), \\\n                          SparseBincountOp<CPUDevice, Tidx, T>);\n#define REGISTER_CPU_KERNELS(T) \\\n  REGISTER_KERNELS(int32, T);   \\\n  REGISTER_KERNELS(int64, T);\n\nTF_CALL_NUMBER_TYPES(REGISTER_CPU_KERNELS);\n#undef REGISTER_CPU_KERNELS\n#undef REGISTER_KERNELS\n\ntemplate <typename Device, typename Tidx, typename T>\nclass RaggedBincountOp : public OpKernel {\n public:\n  explicit RaggedBincountOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const auto splits = ctx->input(0).flat<int64>();\n    const auto values = ctx->input(1).flat<Tidx>();\n    const Tensor& size_t = ctx->input(2);\n    const auto weights = ctx->input(3).flat<T>();\n    const int64 weights_size = weights.size();\n\n    Tidx size = size_t.scalar<Tidx>()();\n    OP_REQUIRES(\n        ctx, size >= 0,\n        errors::InvalidArgument(\"size (\", size, \") must be non-negative\"));\n\n    int num_rows = splits.size() - 1;\n    int num_values = values.size();\n    int batch_idx = 0;\n\n    Tensor* out_t;\n    OP_REQUIRES_OK(\n        ctx, ctx->allocate_output(0, TensorShape({num_rows, size}), &out_t));\n    functor::SetZeroFunctor<Device, T> fill;\n    fill(ctx->eigen_device<Device>(), out_t->flat<T>());\n    const auto out = out_t->matrix<T>();\n\n    for (int idx = 0; idx < num_values; ++idx) {\n      while (idx >= splits(batch_idx)) {\n        batch_idx++;\n      }\n      Tidx bin = values(idx);\n      OP_REQUIRES(ctx, bin >= 0,\n                  errors::InvalidArgument(\"Input must be non-negative\"));\n      if (bin < size) {\n        if (binary_output_) {\n          out(batch_idx - 1, bin) = T(1);\n        } else {\n          T value = (weights_size > 0) ? weights(idx) : T(1);\n          out(batch_idx - 1, bin) += value;\n        }\n      }\n    }\n  }\n\n private:\n  bool binary_output_;\n};\n\n#define REGISTER_KERNELS(Tidx, T)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"RaggedBincount\")             \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<Tidx>(\"Tidx\"), \\\n                          RaggedBincountOp<CPUDevice, Tidx, T>);\n#define REGISTER_CPU_KERNELS(T) \\\n  REGISTER_KERNELS(int32, T);   \\\n  REGISTER_KERNELS(int64, T);\n\nTF_CALL_NUMBER_TYPES(REGISTER_CPU_KERNELS);\n#undef REGISTER_CPU_KERNELS\n#undef REGISTER_KERNELS\n\n}  // end namespace tensorflow\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/math_ops.cc.\n\n#include \"tensorflow/core/platform/errors.h\"\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/kernels/bincount_op.h\"\n#include \"tensorflow/core/kernels/fill_functor.h\"\n#include \"tensorflow/core/lib/core/threadpool.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\nusing thread::ThreadPool;\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace functor {\n\ntemplate <typename Tidx, typename T>\nstruct BincountFunctor<CPUDevice, Tidx, T, true> {\n  static Status Compute(OpKernelContext* context,\n                        const typename TTypes<Tidx, 1>::ConstTensor& arr,\n                        const typename TTypes<T, 1>::ConstTensor& weights,\n                        typename TTypes<T, 1>::Tensor& output,\n                        const Tidx num_bins) {\n    Tensor all_nonneg_t;\n    TF_RETURN_IF_ERROR(context->allocate_temp(\n        DT_BOOL, TensorShape({}), &all_nonneg_t, AllocatorAttributes()));\n    all_nonneg_t.scalar<bool>().device(context->eigen_cpu_device()) =\n        (arr >= Tidx(0)).all();\n    if (!all_nonneg_t.scalar<bool>()()) {\n      return errors::InvalidArgument(\"Input arr must be non-negative!\");\n    }\n\n    // Allocate partial output bin sums for each worker thread. Worker ids in\n    // ParallelForWithWorkerId range from 0 to NumThreads() inclusive.\n    ThreadPool* thread_pool =\n        context->device()->tensorflow_cpu_worker_threads()->workers;\n    const int64 num_threads = thread_pool->NumThreads() + 1;\n    Tensor partial_bins_t;\n    TF_RETURN_IF_ERROR(context->allocate_temp(\n        DT_BOOL, TensorShape({num_threads, num_bins}), &partial_bins_t));\n    auto partial_bins = partial_bins_t.matrix<bool>();\n    partial_bins.setZero();\n    thread_pool->ParallelForWithWorkerId(\n        arr.size(), 8 /* cost */,\n        [&](int64 start_ind, int64 limit_ind, int64 worker_id) {\n          for (int64 i = start_ind; i < limit_ind; i++) {\n            Tidx value = arr(i);\n            if (value < num_bins) {\n              partial_bins(worker_id, value) = true;\n            }\n          }\n        });\n\n    // Sum the partial bins along the 0th axis.\n    Eigen::array<int, 1> reduce_dim({0});\n    output.device(context->eigen_cpu_device()) =\n        partial_bins.any(reduce_dim).cast<T>();\n    return Status::OK();\n  }\n};\n\ntemplate <typename Tidx, typename T>\nstruct BincountFunctor<CPUDevice, Tidx, T, false> {\n  static Status Compute(OpKernelContext* context,\n                        const typename TTypes<Tidx, 1>::ConstTensor& arr,\n                        const typename TTypes<T, 1>::ConstTensor& weights,\n                        typename TTypes<T, 1>::Tensor& output,\n                        const Tidx num_bins) {\n    Tensor all_nonneg_t;\n    TF_RETURN_IF_ERROR(context->allocate_temp(\n        DT_BOOL, TensorShape({}), &all_nonneg_t, AllocatorAttributes()));\n    all_nonneg_t.scalar<bool>().device(context->eigen_cpu_device()) =\n        (arr >= Tidx(0)).all();\n    if (!all_nonneg_t.scalar<bool>()()) {\n      return errors::InvalidArgument(\"Input arr must be non-negative!\");\n    }\n\n    // Allocate partial output bin sums for each worker thread. Worker ids in\n    // ParallelForWithWorkerId range from 0 to NumThreads() inclusive.\n    ThreadPool* thread_pool =\n        context->device()->tensorflow_cpu_worker_threads()->workers;\n    const int64 num_threads = thread_pool->NumThreads() + 1;\n    Tensor partial_bins_t;\n    TF_RETURN_IF_ERROR(context->allocate_temp(\n        DataTypeToEnum<T>::value, TensorShape({num_threads, num_bins}),\n        &partial_bins_t));\n    auto partial_bins = partial_bins_t.matrix<T>();\n    partial_bins.setZero();\n    thread_pool->ParallelForWithWorkerId(\n        arr.size(), 8 /* cost */,\n        [&](int64 start_ind, int64 limit_ind, int64 worker_id) {\n          for (int64 i = start_ind; i < limit_ind; i++) {\n            Tidx value = arr(i);\n            if (value < num_bins) {\n              if (weights.size()) {\n                partial_bins(worker_id, value) += weights(i);\n              } else {\n                // Complex numbers don't support \"++\".\n                partial_bins(worker_id, value) += T(1);\n              }\n            }\n          }\n        });\n\n    // Sum the partial bins along the 0th axis.\n    Eigen::array<int, 1> reduce_dim({0});\n    output.device(context->eigen_cpu_device()) = partial_bins.sum(reduce_dim);\n    return Status::OK();\n  }\n};\n\ntemplate <typename Tidx, typename T, bool binary_output>\nstruct BincountReduceFunctor<CPUDevice, Tidx, T, binary_output> {\n  static Status Compute(OpKernelContext* context,\n                        const typename TTypes<Tidx, 2>::ConstTensor& in,\n                        const typename TTypes<T, 2>::ConstTensor& weights,\n                        typename TTypes<T, 2>::Tensor& out,\n                        const Tidx num_bins) {\n    const int num_rows = out.dimension(0);\n    const int num_cols = in.dimension(1);\n    ThreadPool* thread_pool =\n        context->device()->tensorflow_cpu_worker_threads()->workers;\n    thread_pool->ParallelForWithWorkerId(\n        num_rows, 8 /* cost */,\n        [&](int64 start_row, int64 end_row, int64 worker_id) {\n          for (int64 i = start_row; i < end_row; ++i) {\n            for (int64 j = 0; j < num_cols; ++j) {\n              Tidx value = in(i, j);\n              if (value < num_bins) {\n                if (binary_output) {\n                  out(i, value) = T(1);\n                } else {\n                  if (weights.size()) {\n                    out(i, value) += weights(i, j);\n                  } else {\n                    out(i, value) += T(1);\n                  }\n                }\n              }\n            }\n          }\n        });\n    return Status::OK();\n  }\n};\n\n}  // namespace functor\n\ntemplate <typename Device, typename T>\nclass BincountOp : public OpKernel {\n public:\n  explicit BincountOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& arr_t = ctx->input(0);\n    const Tensor& size_tensor = ctx->input(1);\n    OP_REQUIRES(ctx, size_tensor.dims() == 0,\n                errors::InvalidArgument(\"Shape must be rank 0 but is rank \",\n                                        size_tensor.dims()));\n    int32 size = size_tensor.scalar<int32>()();\n    OP_REQUIRES(\n        ctx, size >= 0,\n        errors::InvalidArgument(\"size (\", size, \") must be non-negative\"));\n\n    const Tensor& weights_t = ctx->input(2);\n    const auto arr = arr_t.flat<int32>();\n    const auto weights = weights_t.flat<T>();\n    Tensor* output_t;\n    OP_REQUIRES_OK(ctx,\n                   ctx->allocate_output(0, TensorShape({size}), &output_t));\n    auto output = output_t->flat<T>();\n    OP_REQUIRES_OK(ctx,\n                   functor::BincountFunctor<Device, int32, T, false>::Compute(\n                       ctx, arr, weights, output, size));\n  }\n};\n\n#define REGISTER_KERNELS(type)                                       \\\n  REGISTER_KERNEL_BUILDER(                                           \\\n      Name(\"Bincount\").Device(DEVICE_CPU).TypeConstraint<type>(\"T\"), \\\n      BincountOp<CPUDevice, type>)\n\nTF_CALL_NUMBER_TYPES(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_KERNELS(type)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"Bincount\")                \\\n                              .Device(DEVICE_GPU)         \\\n                              .HostMemory(\"size\")         \\\n                              .TypeConstraint<type>(\"T\"), \\\n                          BincountOp<GPUDevice, type>)\n\nTF_CALL_int32(REGISTER_KERNELS);\nTF_CALL_float(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename Tidx, typename T>\nclass DenseBincountOp : public OpKernel {\n public:\n  explicit DenseBincountOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& data = ctx->input(0);\n    OP_REQUIRES(ctx, data.dims() <= 2,\n                errors::InvalidArgument(\n                    \"Shape must be at most rank 2 but is rank \", data.dims()));\n\n    const Tensor& size_t = ctx->input(1);\n    const Tensor& weights = ctx->input(2);\n\n    Tidx size = size_t.scalar<Tidx>()();\n    OP_REQUIRES(\n        ctx, size >= 0,\n        errors::InvalidArgument(\"size (\", size, \") must be non-negative\"));\n\n    Tensor* out_t;\n    functor::SetZeroFunctor<Device, T> fill;\n    if (data.dims() == 1) {\n      OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({size}), &out_t));\n      auto out = out_t->flat<T>();\n      fill(ctx->eigen_device<Device>(), out);\n      if (binary_output_) {\n        OP_REQUIRES_OK(\n            ctx, functor::BincountFunctor<Device, Tidx, T, true>::Compute(\n                     ctx, data.flat<Tidx>(), weights.flat<T>(), out, size));\n      } else {\n        OP_REQUIRES_OK(\n            ctx, functor::BincountFunctor<Device, Tidx, T, false>::Compute(\n                     ctx, data.flat<Tidx>(), weights.flat<T>(), out, size));\n      }\n    } else if (data.dims() == 2) {\n      const int64 num_rows = data.dim_size(0);\n      auto weight_matrix =\n          (weights.NumElements() == 0)\n              ? weights.shaped<T, 2>(gtl::InlinedVector<int64, 2>(2, 0))\n              : weights.matrix<T>();\n      OP_REQUIRES_OK(\n          ctx, ctx->allocate_output(0, TensorShape({num_rows, size}), &out_t));\n      auto out = out_t->matrix<T>();\n      fill(ctx->eigen_device<Device>(), out_t->flat<T>());\n      if (binary_output_) {\n        OP_REQUIRES_OK(\n            ctx, functor::BincountReduceFunctor<Device, Tidx, T, true>::Compute(\n                     ctx, data.matrix<Tidx>(), weight_matrix, out, size));\n      } else {\n        OP_REQUIRES_OK(\n            ctx,\n            functor::BincountReduceFunctor<Device, Tidx, T, false>::Compute(\n                ctx, data.matrix<Tidx>(), weight_matrix, out, size));\n      }\n    }\n  }\n\n private:\n  bool binary_output_;\n};\n\n#define REGISTER_KERNELS(Tidx, T)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"DenseBincount\")              \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<Tidx>(\"Tidx\"), \\\n                          DenseBincountOp<CPUDevice, Tidx, T>);\n#define REGISTER_CPU_KERNELS(T) \\\n  REGISTER_KERNELS(int32, T);   \\\n  REGISTER_KERNELS(int64, T);\n\nTF_CALL_NUMBER_TYPES(REGISTER_CPU_KERNELS);\n#undef REGISTER_CPU_KERNELS\n#undef REGISTER_KERNELS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_KERNELS(Tidx, T)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"DenseBincount\")              \\\n                              .Device(DEVICE_GPU)            \\\n                              .HostMemory(\"size\")            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<Tidx>(\"Tidx\"), \\\n                          DenseBincountOp<GPUDevice, Tidx, T>);\n#define REGISTER_GPU_KERNELS(T) \\\n  REGISTER_KERNELS(int32, T);   \\\n  REGISTER_KERNELS(int64, T);\n\nTF_CALL_int32(REGISTER_GPU_KERNELS);\nTF_CALL_float(REGISTER_GPU_KERNELS);\n#undef REGISTER_GPU_KERNELS\n#undef REGISTER_KERNELS\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename Tidx, typename T>\nclass SparseBincountOp : public OpKernel {\n public:\n  explicit SparseBincountOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor& indices = ctx->input(0);\n    const auto values = ctx->input(1).flat<Tidx>();\n    const Tensor& dense_shape = ctx->input(2);\n    const Tensor& size_t = ctx->input(3);\n    const auto weights = ctx->input(4).flat<T>();\n    const int64 weights_size = weights.size();\n\n    Tidx size = size_t.scalar<Tidx>()();\n    OP_REQUIRES(\n        ctx, size >= 0,\n        errors::InvalidArgument(\"size (\", size, \") must be non-negative\"));\n\n    bool is_1d = dense_shape.NumElements() == 1;\n\n    Tensor* out_t;\n    functor::SetZeroFunctor<Device, T> fill;\n    if (is_1d) {\n      OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({size}), &out_t));\n      auto out = out_t->flat<T>();\n      fill(ctx->eigen_device<Device>(), out);\n      if (binary_output_) {\n        OP_REQUIRES_OK(ctx,\n                       functor::BincountFunctor<Device, Tidx, T, true>::Compute(\n                           ctx, values, weights, out, size));\n      } else {\n        OP_REQUIRES_OK(\n            ctx, functor::BincountFunctor<Device, Tidx, T, false>::Compute(\n                     ctx, values, weights, out, size));\n      }\n    } else {\n      const auto shape = dense_shape.flat<int64>();\n      const int64 num_rows = shape(0);\n      OP_REQUIRES_OK(\n          ctx, ctx->allocate_output(0, TensorShape({num_rows, size}), &out_t));\n      const auto out = out_t->matrix<T>();\n      fill(ctx->eigen_device<Device>(), out_t->flat<T>());\n      const auto indices_mat = indices.matrix<int64>();\n      for (int64 i = 0; i < indices_mat.dimension(0); ++i) {\n        const int64 batch = indices_mat(i, 0);\n        const Tidx bin = values(i);\n        if (bin < size) {\n          if (binary_output_) {\n            out(batch, bin) = T(1);\n          } else {\n            if (weights_size) {\n              out(batch, bin) += weights(i);\n            } else {\n              out(batch, bin) += T(1);\n            }\n          }\n        }\n      }\n    }\n  }\n\n private:\n  bool binary_output_;\n};\n\n#define REGISTER_KERNELS(Tidx, T)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseBincount\")             \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<Tidx>(\"Tidx\"), \\\n                          SparseBincountOp<CPUDevice, Tidx, T>);\n#define REGISTER_CPU_KERNELS(T) \\\n  REGISTER_KERNELS(int32, T);   \\\n  REGISTER_KERNELS(int64, T);\n\nTF_CALL_NUMBER_TYPES(REGISTER_CPU_KERNELS);\n#undef REGISTER_CPU_KERNELS\n#undef REGISTER_KERNELS\n\ntemplate <typename Device, typename Tidx, typename T>\nclass RaggedBincountOp : public OpKernel {\n public:\n  explicit RaggedBincountOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const auto splits = ctx->input(0).flat<int64>();\n    const auto values = ctx->input(1).flat<Tidx>();\n    const Tensor& size_t = ctx->input(2);\n    const auto weights = ctx->input(3).flat<T>();\n    const int64 weights_size = weights.size();\n\n    Tidx size = size_t.scalar<Tidx>()();\n    OP_REQUIRES(\n        ctx, size >= 0,\n        errors::InvalidArgument(\"size (\", size, \") must be non-negative\"));\n\n    int num_rows = splits.size() - 1;\n    int num_values = values.size();\n    int batch_idx = 0;\n\n    OP_REQUIRES(ctx, splits(0) == 0,\n                errors::InvalidArgument(\"Splits must start with 0, not with \",\n                                        splits(0)));\n\n    OP_REQUIRES(ctx, splits(num_rows) == num_values,\n                errors::InvalidArgument(\n                    \"Splits must end with the number of values, got \",\n                    splits(num_rows), \" instead of \", num_values));\n\n    Tensor* out_t;\n    OP_REQUIRES_OK(\n        ctx, ctx->allocate_output(0, TensorShape({num_rows, size}), &out_t));\n    functor::SetZeroFunctor<Device, T> fill;\n    fill(ctx->eigen_device<Device>(), out_t->flat<T>());\n    const auto out = out_t->matrix<T>();\n\n    for (int idx = 0; idx < num_values; ++idx) {\n      while (idx >= splits(batch_idx)) {\n        batch_idx++;\n      }\n      Tidx bin = values(idx);\n      OP_REQUIRES(ctx, bin >= 0,\n                  errors::InvalidArgument(\"Input must be non-negative\"));\n      if (bin < size) {\n        if (binary_output_) {\n          out(batch_idx - 1, bin) = T(1);\n        } else {\n          T value = (weights_size > 0) ? weights(idx) : T(1);\n          out(batch_idx - 1, bin) += value;\n        }\n      }\n    }\n  }\n\n private:\n  bool binary_output_;\n};\n\n#define REGISTER_KERNELS(Tidx, T)                            \\\n  REGISTER_KERNEL_BUILDER(Name(\"RaggedBincount\")             \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<Tidx>(\"Tidx\"), \\\n                          RaggedBincountOp<CPUDevice, Tidx, T>);\n#define REGISTER_CPU_KERNELS(T) \\\n  REGISTER_KERNELS(int32, T);   \\\n  REGISTER_KERNELS(int64, T);\n\nTF_CALL_NUMBER_TYPES(REGISTER_CPU_KERNELS);\n#undef REGISTER_CPU_KERNELS\n#undef REGISTER_KERNELS\n\n}  // end namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/bincount_op.cc"], "buggy_code_start_loc": [422], "buggy_code_end_loc": [422], "fixing_code_start_loc": [423], "fixing_code_end_loc": [432], "type": "CWE-787", "message": "TensorFlow is an end-to-end open source platform for machine learning. If the `splits` argument of `RaggedBincount` does not specify a valid `SparseTensor`(https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the `splits` tensor buffer in the implementation of the `RaggedBincount` op(https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the `for` loop, `batch_idx` is set to 0. The user controls the `splits` array, making it contain only one element, 0. Thus, the code in the `while` loop would increment `batch_idx` and then try to read `splits(1)`, which is outside of bounds. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3, as these are also affected.", "other": {"cve": {"id": "CVE-2021-29512", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T19:15:07.753", "lastModified": "2021-05-19T21:09:06.147", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. If the `splits` argument of `RaggedBincount` does not specify a valid `SparseTensor`(https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), then an attacker can trigger a heap buffer overflow. This will cause a read from outside the bounds of the `splits` tensor buffer in the implementation of the `RaggedBincount` op(https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op.cc#L430-L433). Before the `for` loop, `batch_idx` is set to 0. The user controls the `splits` array, making it contain only one element, 0. Thus, the code in the `while` loop would increment `batch_idx` and then try to read `splits(1)`, which is outside of bounds. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2 and TensorFlow 2.3.3, as these are also affected."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;Si el argumento \"splits\" de \"RaggedBincount\" no especifica un \"SparseTensor\" v\u00e1lido (https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor), entonces un atacante puede desencadenar un desbordamiento del b\u00fafer de la pila.&#xa0;Esto causar\u00e1 una lectura desde fuera de l\u00edmites del b\u00fafer tensorial \"splits\" en una implementaci\u00f3n de la operaci\u00f3n \"RaggedBincount\" (https://github.com/tensorflow/tensorflow/blob/8b677d79167799f71c42fd3fa074476e0295413a/tensorflow/core/kernels/bincount_op. cc#L430-L433).&#xa0;Antes del bucle \"for\",\"batch_idx\" es ajustado en 0. El usuario controla la matriz \"splits\", haciendo que contenga solo un elemento, 0. Por lo tanto, el c\u00f3digo en el bucle \"while\" incrementar\u00eda \"batch_idx\" y luego intenta leer \"splits(1)\", que est\u00e1 fuera de l\u00edmites.&#xa0;La correcci\u00f3n ser\u00e1 inclu\u00edda en TensorFlow versi\u00f3n 2.5.0. Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2 y TensorFlow versi\u00f3n 2.3.3, ya que estos tambi\u00e9n est\u00e1n afectados"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-120"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/eebb96c2830d48597d055d247c0e9aebaea94cd5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-4278-2v5v-65r4", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/eebb96c2830d48597d055d247c0e9aebaea94cd5"}}