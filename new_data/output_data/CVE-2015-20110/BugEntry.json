{"buggy_code": ["package <%=packageName%>.security.xauth;\n\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.crypto.codec.Hex;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class TokenProvider {\n\n    private final String secretKey;\n    private final int tokenValidity;\n\n    public TokenProvider(String secretKey, int tokenValidity) {\n        this.secretKey = secretKey;\n        this.tokenValidity = tokenValidity;\n    }\n\n    public Token createToken(UserDetails userDetails) {\n        long expires = System.currentTimeMillis() + 1000L * tokenValidity;\n        String token = userDetails.getUsername() + \":\" + expires + \":\" + computeSignature(userDetails, expires);\n        return new Token(token, expires);\n    }\n\n    public String computeSignature(UserDetails userDetails, long expires) {\n        StringBuilder signatureBuilder = new StringBuilder();\n        signatureBuilder.append(userDetails.getUsername()).append(\":\");\n        signatureBuilder.append(expires).append(\":\");\n        signatureBuilder.append(userDetails.getPassword()).append(\":\");\n        signatureBuilder.append(secretKey);\n\n        MessageDigest digest;\n        try {\n            digest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(\"No MD5 algorithm available!\");\n        }\n        return new String(Hex.encode(digest.digest(signatureBuilder.toString().getBytes())));\n    }\n\n    public String getUserNameFromToken(String authToken) {\n        if (null == authToken) {\n            return null;\n        }\n        String[] parts = authToken.split(\":\");\n        return parts[0];\n    }\n\n    public boolean validateToken(String authToken, UserDetails userDetails) {\n        String[] parts = authToken.split(\":\");\n        long expires = Long.parseLong(parts[1]);\n        String signature = parts[2];\n        String signatureToMatch = computeSignature(userDetails, expires);\n        return expires >= System.currentTimeMillis() && signature.equals(signatureToMatch);\n    }\n}\n"], "fixing_code": ["package <%=packageName%>.security.xauth;\n\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.crypto.codec.Hex;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class TokenProvider {\n\n    private final String secretKey;\n    private final int tokenValidity;\n\n    public TokenProvider(String secretKey, int tokenValidity) {\n        this.secretKey = secretKey;\n        this.tokenValidity = tokenValidity;\n    }\n\n    public Token createToken(UserDetails userDetails) {\n        long expires = System.currentTimeMillis() + 1000L * tokenValidity;\n        String token = userDetails.getUsername() + \":\" + expires + \":\" + computeSignature(userDetails, expires);\n        return new Token(token, expires);\n    }\n\n    public String computeSignature(UserDetails userDetails, long expires) {\n        StringBuilder signatureBuilder = new StringBuilder();\n        signatureBuilder.append(userDetails.getUsername()).append(\":\");\n        signatureBuilder.append(expires).append(\":\");\n        signatureBuilder.append(userDetails.getPassword()).append(\":\");\n        signatureBuilder.append(secretKey);\n\n        MessageDigest digest;\n        try {\n            digest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(\"No MD5 algorithm available!\");\n        }\n        return new String(Hex.encode(digest.digest(signatureBuilder.toString().getBytes())));\n    }\n\n    public String getUserNameFromToken(String authToken) {\n        if (null == authToken) {\n            return null;\n        }\n        String[] parts = authToken.split(\":\");\n        return parts[0];\n    }\n\n    public boolean validateToken(String authToken, UserDetails userDetails) {\n        String[] parts = authToken.split(\":\");\n        long expires = Long.parseLong(parts[1]);\n        String signature = parts[2];\n        String signatureToMatch = computeSignature(userDetails, expires);\n        return expires >= System.currentTimeMillis() && constantTimeEquals(signature, signatureToMatch));\n    }\n\n    /**\n     * String comparison that doesn't stop at the first character that is different but instead always\n     * iterates the whole string length to prevent timing attacks.\n     */\n    private boolean constantTimeEquals(String a, String b) {\n        if (a.length() != b.length()) {\n            return false;\n        } else {\n            int equal = 0;\n            for (int i = 0; i < a.length(); i++) {\n                equal |= a.charAt(i) ^ b.charAt(i);\n            }\n            return equal == 0;\n        }\n    }\n\n}\n"], "filenames": ["app/templates/src/main/java/package/security/xauth/_TokenProvider.java"], "buggy_code_start_loc": [54], "buggy_code_end_loc": [55], "fixing_code_start_loc": [54], "fixing_code_end_loc": [73], "type": "CWE-307", "message": "JHipster generator-jhipster before 2.23.0 allows a timing attack against validateToken due to a string comparison that stops at the first character that is different. Attackers can guess tokens by brute forcing one character at a time and observing the timing. This of course drastically reduces the search space to a linear amount of guesses based on the token length times the possible characters.", "other": {"cve": {"id": "CVE-2015-20110", "sourceIdentifier": "cve@mitre.org", "published": "2023-10-31T03:15:07.613", "lastModified": "2023-11-08T17:39:35.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "JHipster generator-jhipster before 2.23.0 allows a timing attack against validateToken due to a string comparison that stops at the first character that is different. Attackers can guess tokens by brute forcing one character at a time and observing the timing. This of course drastically reduces the search space to a linear amount of guesses based on the token length times the possible characters."}, {"lang": "es", "value": "JHipster generador-jhipster anterior a 2.23.0 permite un ataque de tiempo contra validarToken debido a una comparaci\u00f3n de cadenas que se detiene en el primer car\u00e1cter que es diferente. Los atacantes pueden adivinar fichas forzando bruscamente un personaje a la vez y observando el tiempo. Por supuesto, esto reduce dr\u00e1sticamente el espacio de b\u00fasqueda a una cantidad lineal de conjeturas basadas en la longitud del token multiplicada por los caracteres posibles."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-307"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jhipster:jhipster:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.23.0", "matchCriteriaId": "975D9B1E-D46A-4E51-9190-4A5C1F050EB6"}]}]}], "references": [{"url": "https://github.com/jhipster/generator-jhipster/commit/79fe5626cb1bb80f9ac86cf46980748e65d2bdbc", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/jhipster/generator-jhipster/commit/7c49ab3d45dc4921b831a2ca55fb1e2a2db1ee25", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/jhipster/generator-jhipster/compare/v2.22.0...v2.23.0", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes"]}, {"url": "https://github.com/jhipster/generator-jhipster/issues/2095", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/jhipster/generator-jhipster/commit/79fe5626cb1bb80f9ac86cf46980748e65d2bdbc"}}