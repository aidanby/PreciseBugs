{"buggy_code": ["-----------\nv3.0.17-git\n-----------\n\n[jan] Update Italian translation (Massimo Malabotta <mmalabotta@units.it>).\n[jan] Improve print styles.\n[jan] Catch if external client doesn't send LAST-MODIFIED attributes (Bug\n      #11130).\n[jan] Don't stop agenda script if there is an error with a single user (Bug\n      #11129).\n[jan] Update Hungarian translation (Zolt\u00e1n N\u00e9meth <nemeth.zoltan@etit.hu>).\n[jan] Show round corners only on the start and end of multi-day events\n      (Request #11067).\n\n\n-------\nv3.0.16\n-------\n\n[jan] Use preferred date format in week and agenda views (Bug #11089).\n[jan] Fix fatal error if no external calendars are available (Bug #11079).\n[jan] Fix positioning of events on DST changing dates (Bug #11070).\n[mjr] Fix bug that caused time shift of all day events when imported from\n      ActiveSync devices for users in certain timezones (Bug #10991).\n[mjr] Correctly deal with deleted calendars in sync clients (Bug #10969).\n\n\n-------\nv3.0.15\n-------\n\n[jan] Search complete names and addresses when auto-completing attendees.\n[jan] Fix syntax error in migration script (Bug #10902).\n\n\n-------\nv3.0.14\n-------\n\n[mjr] Fix bug that could cause incorrect event exceptions to be created when\n      drag and dropping events in month view.\n[jan] Fix page titles not always updating correctly.\n[jan] Display event time in dynamic view if requested (Request #9866).\n[jan] Only show end time if different from start time.\n[jan] Fix day sorting in agenda view.\n[jan] Sort user and group names in permission screen (Request #10896).\n\n\n-------\nv3.0.13\n-------\n\n[jan] Hide disabled calendar sections (Bug #9815).\n[gwr] Fixed recurrence handling with the Kolab backend.\n[gwr] Fixed naming of the default calendar for the Kolab backend.\n[gwr] Fixed deleting events with the Kolab backend.\n[gwr] Fixed migrations for SQLite as database backend.\n[mjr] Fix keyboard navigation of time entry fields in dynamic view (Bug\n      #10799).\n[mjr] Fix parsing display_cal variables for internal calendar links on various\n      blocks and embedded imples (Bug #10767).\n[mjr] Fix adding events directly to a resource's calendar (Bug #10827).\n[mjr] Fix regression introduced in 3.0.12 that broke checking a Resource's\n      availability in certain cases (Bug #10806).\n[jan] Don't fail on empty CalDAV calendars (christof@buergi.lugs.ch, Bug\n      #10739).\n[jan] Check permissions when building application drop down\n      (sberthelot@emisfr.com, Bug #10811).\n[gwr] Fix saving Kolab events.\n[jan] Update Japanese translation (Hiromi Kimura <hiromi@tac.tsukuba.ac.jp>).\n\n\n-------\nv3.0.12\n-------\n\n[jan] Show status of events in agenda messages (Request #10517).\n[mjr] Fix selecting custom time from time selection drop down (Bug #10737).\n[jan] Always use fresh Horde_Http_Client instances for remote calendars (Bug\n      #10740).\n[jan] Add confirmation screen when deleting events in dynamic view (Request\n      #10725).\n[jan] Fix holidays disappearing from month view if deleting another event.\n[jan] Fix resetting attendee response status when saving events in dynamic\n      view (Bug #10620).\n[jan] Support CalDAV servers that don't use DAV: as the default namespace\n      (christof@buergi.lugs.ch, Bug #10716).\n[jan] Allow to view and create copies of holiday events (Bug #10650).\n[jan] Don't show import/export tabs in dynamic view if disabled (Bug #10705).\n[jan] Don't show option to share with everyone in basic permissions if disabled\n      (piper@hrz.uni-marburg.de, Bug #10706).\n[mjr] Only set ORGANIZER field if the event is a group meeting (Bug #10697).\n\n\n-------\nv3.0.11\n-------\n\n[mjr] Fix alarms for recurring events (Bug #10678).\n[mjr] Allow filtering listTagInfo results by user.\n[jan] Fix uncompleting tasks in dynamic view (Carlos Tim\u00f3teo, Bug #10653).\n[cjh/jan] Improve design.\n[mjr] Fix displaying resources when no attendees are present (Bug #10507).\n\n\n-------\nv3.0.10\n-------\n\n[jan] Fix opening events from agenda view.\n[mjr] Always included the current default calendar in the sync_calendars\n      preference.\n[mjr] Ensure exception gets start and end times when created from month view\n      (Bug #10496)\n[jan] Update group permission when changing group down list in basic\n      permissions (Bug #10482).\n[jan] Fix race condition when editing group permission in basic permission\n      screen (Bug #10482).\n[mjr] Fix removeUserData API (Bug #10241).\n[jan] Fix deleting events with a WebDAV client (Bug #10478).\n\n\n------\nv3.0.9\n------\n\n[jan] Fix fatal error while searching if hitting certain recurring events.\n[jan] Fix exporting events with snoozed alarms (Bug #10438).\n\n\n------\nv3.0.8\n------\n\n[jan] Fix deleting resources (Bug #10427)\n[jan] Support snoozing alarms with Sundbird/Lightning (Request #7470).\n[jan] Import VALARM components from iCalendar 2.0 data (Request #6665).\n[jan] Fix exporting all-day events to Funambol clients (Thomas Ilsche\n      <git@zulan.net>, Bug #10349).\n[jan] Fix creating events from dynamic view on Windows (Bug #9916).\n[mjr] Fix displaying of freebusy data in dynamic view (adominguez@cne.gob.ve,\n      Bug #10347).\n\n\n------\nv3.0.7\n------\n\n[mjr] Fix updating attendees (Bug #10411).\n[jan] Fix error if Nag is not installed (Bug #10406).\n\n\n------\nv3.0.6\n------\n\n[jan] Display event time in dynamic agenda/search view.\n[jan] Don't load all shares with requested permissions from the backend if\n      $conf['share']['hidden'] is enabled.\n[jan] Improve exporting all-day events to Funambol clients.\n[mjr] Fix removing an exception from a recurrence series (Bug # 10365).\n[jan] Close session while listing events to speed up parallel loading from\n      different calendars.\n[jan] Share list of displayed task lists with Nag (requires Nag 3.0.3).\n[jan] Don't show import/export link in preferences if using the dynamic view.\n[mjr] Force ActiveSync device reset after sync_calendars pref is changed\n      (Request #10342).\n[jan] Try to work with remote servers even if they don't support a recent\n      WebDAV protocol version.\n[jan] Support updating attendees from vCalendar 1.0 iTip responses.\n[jan] Fix sending invitations to attendees from traditional view.\n[jan] Fix organizer attribute when exporting to vCalendar 1.0.\n[mjr] Fix issue that prevented synching when no sync_calendar pref was set\n      (Bug #10329).\n\n\n------\nv3.0.5\n------\n\n[jan] Update task due date in interface after dragging a task (Bug #10001).\n[jan] Correctly sort events in portal block or widget if only displaying a\n      single calendar (Bug #10099).\n[mjr] Allow syncing of multiple owner-owned calendars (Request #8734).\n[jan] Don't show calendar drop down in event form without delete permissions\n      (Bug #10201).\n[jan] Don't change event creator when saving events.\n[jan] Fetch events immediately after saving remote calendar.\n\n\n------\nv3.0.4\n------\n\n[jan] Fix holidays being off with certain system timezones (Bug #9989).\n[jan] Only highlight days in the mini calendar that are currently displayed\n      (Bug #10048).\n[jan] Fix advanced search with empty search criteria (Bug #10038).\n\n\n------\nv3.0.3\n------\n\n[jan] Add header for timeobjects calendars.\n[jan] Fix date picker in advanced search form (Bug #10039).\n[mjr] Remove visible exceptions when deleting recurring events (Bug #10013).\n[mjr] Fix issue causing listTimeObject calendars to not appear (Bug #10012).\n\n\n------\nv3.0.2\n------\n\n[jan] Don't show event edit links if user doesn't have edit permissions on any\n      calendar.\n[jan] Fix parsing of recurrence end date in dynamic view (Bug #10025).\n[jan] Fix displaying of new tasks in new task lists.\n[jan] Fix displaying colors of task lists.\n[jan] Delete tasks from tasks view when deleting tasks lists.\n[jan] Don't export multi-day events as multiple events to iCalendar data (Bug\n      #10007).\n[jan] Fix dragging tasks in the dynamic view.\n\n\n------\nv3.0.1\n------\n\n[mjr] Fix calendar embedding.\n[jan] Don't store all task lists in the session.\n[jan] Fix new task lists not showing up until next login (Bug #9814).\n[mjr] Fix broken event alarm links in sidebar (Bug #9897).\n[mjr] Fix drag/drop editing of recurring events (Bug #9880).\n[jan] Fix undefined function on Windows (Bug #9916).\n[jan] Support adding and editing of CalDAV events in dynamic view (Bug #9865).\n[mjr] Allow migrations to complete despite of missing shares.\n[jan] Remove debug code in Ajax library (Bug #9818).\n\n\n----\nv3.0\n----\n\n[jan] Fix application-specific permission checks (Bug #9786).\n[jan] Fix fatal error when using the max_events permission (Bug #9784).\n[mjr] Datatree share to SQL upgrade script refactored for Horde 4.\n[mjr] Add migration for mysql specific geospatial fields (Bug #9758).\n[jan] Set default alarm in dynamic view (Bug #9752).\n[jan] Move all executable scripts to bin/ and prefix with kronolith-.\n\n\n--------\nv3.0-RC2\n--------\n\n[jan] Fix javascript error when viewing events with desktop notifications\n      (Bug #9727).\n\n\n--------\nv3.0-RC1\n--------\n\n[jan] Update installation and upgrade instructions.\n[jan] Fix custom event alarm settings in traditional view (Bug #9154).\n\n\n----------\nv3.0-BETA1\n----------\n\n[jan] Only load external events in IFRAME if configured.\n[jan] Fix retrieving event UIDs without date limit (Simon B\u00fchler, Bug #9651).\n[jan] Fix saving display status of other applications' calendars (Bug #9636).\n[mjr] Add migration for converting existing event categories to tags.\n\n\n-----------\nv3.0-ALPHA1\n-----------\n\n[jan] Add configuration whether to load other applications in an IFRAME.\n[jan] Provide default configuration files instead of .dist versions.\n[jan] Send a subscription link with the notification about shared\n      calendars if necessary.\n[jan] Default calendars no longer have the user name as the ID.\n[jan] Create a default calendar if the user doesn't own any yet.\n[jan] Add CalDAV client support (Request #8525).\n[jan] Send agenda emails with HTML part and convert to Horde_View.\n[mjr] More complete handling of recurring event exceptions when dealing with the\n      iCalendar format (Request #9091).\n[jan] Add remote calendars to the possible list of calendars for free/busy\n      information.\n[jan] Send alarm and iTip notifications with HTML part and convert to\n      Horde_View.\n[jan] Add option to notify users about calendar permission changes.\n[mjr] listTimeObject calendars are now viewable independently in the calendar\n      portal blocks (Request #8530).\n[mjr] Recurring event exceptions are now indicated as such in the UI.\n[mjr] Deleting a recurring event now also deletes all exceptions to that event.\n[mjr] Add support for inline maps to the Ajax interface.\n[jan] Add preference to limit the events per day in the month view.\n[jan] Add system calendars (Request #2059).\n[jan] Add URL field to events.\n[jan] Add task management capabilities to the Ajax interface.\n[jan] Manage holidays like any other calendar driver.\n[mjr] Add resource scheduling.\n[jan] Integrate tasks into Ajax interface (Gon\u00e7alo Queir\u00f3s\n      <mail@goncaloqueiros.net>).\n[mjr] Extend listTimeObjects API to include optional links and icons.\n[jan] Allow searching of any type of calendar and improve searching of\n      recurring events.\n[cjh] With only SHOW permissions, display event titles as \"busy\".\n[mjr] Replace categories and keywords by tags.\n[jan] Set colors per calendar (Request #7480).\n[jan] Add individual notification methods for single events (Alfonso Mar\u00edn\n      Mar\u00edn <almarin@um.es>).\n[jan] Add Ajax interface.\n[jan] Store events in UTC and convert to the user's timezone on the fly.\n[jan] Remove alarm reminder code.\n[jan] Change listEvents API method to return keys as dates instead of\n      timestamps.\n\n\n------\nv2.3.6\n------\n\n[jan] Add upgrade scripts for next-generation SQL share driver.\n[jan] Export recurrence exceptions in a more portable way.\n\n\n------\nv2.3.5\n------\n\n[gwr] Fix moving events between calendars for the Kolab driver (Bug #7932)\n[jan] Import and export the privacy field in CSV data (Request #9139).\n[mjr] Send an iTip REQUEST, not ADD, when updating an existing event\n      (Bug #9131).\n[jan] Fix all-day events sometimes showing up an day early too (Bug #9012).\n[mjr] Sort exception list before displaying (Request #7688).\n[mjr] Do not remove history entries when removing user data (Bug #8755).\n\n\n------\nv2.3.4\n------\n\n[jan] Delete Horde alarms when resetting an event alarm.\n[jan] Set an alarm to one minute, if users try to set an alarm without time.\n[gwr] Fix editing the start date of recurring events (kolab/issue3885).\n\n\n------\nv2.3.3\n------\n\n[jan] Fix editing URLs of remote calendars.\n[gwr] Fix recurring weekly events with fixed number of occurences but multiple\n      incidences per week (kolab/issue3846).\n[gwr] Fix recurring weekly events with intervals > 1 (Bug #8546).\n[jan] Optimize event link generation (patrick.abiven@apitech.fr).\n[jan] Fix Oracle SQL scripts.\n[jan] Fix charset of ajax responses.\n[jan] Add Croatian translation (Matej Vela <matej.vela@carnet.hr>).\n[jan] Speed up listing alarms (patrick.abiven@apitech.fr, Request #8638).\n[jan] Simplify and improve portability of listing events without date limits\n      in the SQL driver (Bug #8590).\n[mjr] Fix issue that caused the default alarm time to be applied to\n      listTimeObjects events (Bug #8588).\n\n\n------\nv2.3.2\n------\n\n[mms] Upgrade prototype.js to v1.6.1.\n[jan] Allow to add address lists as attendees through the address book popup\n      (Bug #7834).\n[jan] Fix exporting certain weekday recurrence rules to iCalendar\n      (lst_hoe02@kwsoft.de, Bug #8501).\n[jan] Export recurrence end dates as date-time values in iCalendar data to\n      improve compatibility with external clients (Bug #7846).\n[jan] Fix synchronization with output compression enabled (Bug #7769).\n[jan] Add configuration whether to show user drop down list or text field in\n      permissions dialog (requires Horde 3.3.5).\n[jan] Propagate the 'modified' API method (Request #8274).\n[cjh] Fix the signature of the kronolith/import API method\n      (rpolli@babel.it, Bug #8309).\n[jan] Correctly create all-day events if using the all-day link in the day\n      view (stpierre@nebrwesleyan.edu, Bug #8220).\n[jan] Fix rendering of all-day events (Bug #8176).\n\n\n------\nv2.3.1\n------\n\n[jan] Render contact autocompletion list on top of free/busy blocks (Bug #7273).\n[jan] Save recurrence exceptions when copying events (Bug #7689).\n[jan] Prevent warnings if trying to add address lists as attendees (Bug #7834).\n[jan] Fix start and end time calculation of multi-day events (Bug #7788).\n[jan] Wrap URL in calendar information in IE7 (almarin@um.es, Bug #8043).\n[jan] Fix \"Date-string has wrong format\" error with holidays (Bug #7961).\n[jan] Use improved translation support in Date_Holidays (requires 0.21.0 now,\n      Bug #7272).\n[jan] Empty view cache when changing calendar selection\n      (stpierre@nebrwesleyan.edu, Bug #7879).\n[mjr] Fix category CSS being included on embedded widgets.\n[cjh] Work around BC break with Horde versions before 3.2 (Bug #7820).\n[jan] Allow to manually change attendee responses (paul@carnie.com.au,\n      Request #7443).\n[jan] Fix linking to last week across certain year boundaries (Bug #7827).\n[jan] Add script to import events from SquirrelMail database.\n[cjh] Add private-***.png graphics to Tango and Silver themes (Bug #7531).\n[cjh] Fix listing of users in the calendar/browse API call.\n[jan] Set timezone per user preference and fix recurring events when sending\n      reminders through Kronolith (develop@kristov.de, Bug #7038).\n[cjh] Add a PostgreSQL-specific upgrade script for 2.2 to 2.3\n      (michael.menge@zdv.uni-tuebingen.de, Bug #7454).\n[mms] Upgrade prototype.js to v1.6.0.3.\n\n\n----\nv2.3\n----\n\n[jan] Change group field in shares table to work with LDAP groups (Bug #6883).\n[jan] Fix user name conversion with user hooks in the calendar panel\n      (Bug #7366).\n[gwr] Fixed handling of free events in the Kolab driver\n      (noethen@uni-paderborn.de, Bug #7192).\n[jan] Differentiate between days with events and days with busy events in the\n      year view.\n\n\n--------\nv2.3-RC1\n--------\n\n[jan] Send correct iTip notifications when deleting recurring event instances\n      (Bug #6636).\n[mjr] Add support for embedding calendar widgets on external websites.\n[jan] Log moving of events in the history backend (Bug #3207).\n[jan] Fix listing alarms of recurring events crossing day boundaries\n      (Bug #7035).\n[jan] Fix deleting all events over WebDAV (Bug #7005).\n[jan] Add Atom feeds.\n[jan] Fix encoding of holiday names.\n[jan] Add Estonian translation (Alar Sing <alar.sing@err.ee>).\n[jan] Consider RECURRENCE-ID attributes in iCalendar data.\n[cjh] Fix a problem with the put() API call and events that already exist\n      (almarin@um.es, Bug #7088).\n[jan] Fix importing iCalendar events with only a single recurrence exception\n      (guyzdm@gmail.com, Bug #7068).\n[jan] Add Basque translation (Euskal Herriko Unibertsitatea EHU/UPV\n      <xabier.arrieta@ehu.es>).\n[mjr] Add support for maintenance tasks and add a task for purging old events.\n[jan] Fix future events not being received under certain circumstances\n      (Bugs #6946, #6966).\n[jan] Correctly sort recurring events (develop@kristov.de, Bug #7037).\n[jan] Fix display of recurring events crossing midnight in the portal block\n      (develop@kristov.de, Bug #7036).\n[jan] Fix agenda emails containing wrong events.\n[mjr] Remove user permissions on all shares when deleting a user.\n[jan] Fix warning when importing events through the API (Bug #6865).\n[cjh] Be case insensitive when comparing attendees\n      (aloyse.gilbert@gmail.com, Bug #6833).\n[jan] Use smaller icons for private events.\n\n\n----\nv2.2\n----\n\n[jan] Identify the correct event when using attend.php to update invitations\n      (Bug #6606).\n[cjh] Improve resource usage in datatree_to_sql share migration script\n      (Bug #6740).\n[jan] Decode user names and passwords when editing remote calendars.\n[cjh] Ensure that event_category is always a string (Bug #6696).\n\n\n--------\nv2.2-RC3\n--------\n\n[cjh] Apply fix for http://dev.rubyonrails.org/ticket/11473 to prototype.js\n      (Request #6590).\n[cjh] In WebDAV PUT operations, only look for existing events on the calendar\n      being uploaded (Bug #6617).\n[cjh] Add an upgrade script for the new SQL share driver (Request #6109).\n[cjh] Use json_encode and json_decode if they are available (Bug #6457).\n[cjh] Use the first matching free/busy URL if more than one is found\n      (almarin@um.es, Request #6638).\n[cjh] Allow subscribing/unsubscribing from external calendars through the API\n      (duck@obala.net, Request #6626).\n[jan] Add another directory level for calendar owners to the WebDAV interface.\n[jan] Cut off categories at 80 characters to save them correctly (Bug #5211).\n[gwr] Fixed removal of recurrence in the Kolab driver.\n[jan] Show full title in email alarms (Bug #6510).\n[jan] Add export of single events.\n[gwr] Fixed History support in the Kolab driver.\n[cjh] Don't report cancelled events as busy (m.gabriel@das-netzwerkteam.de,\n      Bug #6376).\n[cjh] Show who created or made the last change to an event along with the date\n      (Request #6305).\n[cjh] Make sure event time and location are shown in the day and week views\n      (Bug #6158).\n[cjh] Include Location and Attendee information in the plain-text portion\n      of iTip messages (almarin@um.es, Request #6271).\n[jan] Add Turkish translation (METU <horde-tr@metu.edu.tr>).\n\n\n--------\nv2.2-RC2\n--------\n\n[jan] SECURITY: Fix privilege escalation in Horde API.\n[cjh] SECURITY: Fix missing ownership validation on share changes.\n[cjh] Fix month links in the year view when the first day of the month is on\n      the first day of the week (hofsteda@gmail.com, Bug #6172).\n[cjh] Make sure calendar info boxes show the full remote URL (Bug #6134).\n[jan] Fix importing of events with an existing UID (Bug #6122).\n[cjh] Fix timestamps in portal block event links.\n[mjr] Fix issue that caused recurring events on 2/29 to appear on 3/1 when\n      recurrence type is HORDE_DATE_RECUR_YEARLY_DATE.\n[cjh] If JavaScript is available, open the Attendees window set to the current\n      event's date (Request #5813).\n[cjh] Fix display of events that end at 00:00 at a non-zero second (Bug #6047).\n[cjh] Fix handling of local names in attendees.php\n      (m.gabriel@das-netzwerkteam.de, Bug #6041).\n[cjh] Fix inline calendar search in the calendar panel.\n[cjh] New share management UI that doesn't require JavaScript.\n\n\n--------\nv2.2-RC1\n--------\n\n[jan] Don't allow to modify private events throught the API (Bug #5736).\n[jan] Don't overwrite event owner when changing events over WebDAV (Bug #5736).\n[jan] Implement WebDAV DELETE.\n[cjh] Event exceptions are now correctly reflected when subscribing to\n      Kronolith calendars from Apple iCal.\n[cjh] When adding attendees, parse email groups and add each member\n      individually (Bug #5812).\n[cjh] External events are now enabled/disabled by individual category, such\n      as showing a particular tasklist on your calendar, but not all tasks\n      (Request #4581).\n[jan] Add SQL upgrade script.\n[cjh] Let the \"show\" URL of a calendar always show that calendar, instead of\n      toggling whether or not it is displayed.\n[cjh] Fix permissions granted to remote calendar subscribers on calendars\n      that do not have guest permissions.\n[cjh] Fix generation of UIDs with PHP 5.2+.\n[cjh] Add preferences for showing event times and locations in screen\n      views, print views, both, or neither (Request #1982).\n[cjh] Run attendee email address through MIME::encodeAddress() before\n      validating them (Bug #5670).\n\n\n----------\nv2.2-ALPHA\n----------\n\n[cjh] Add vCalendar 2.0 alarm export (munzli@olmero.ch, Bug #4851).\n[jan] Add Ukrainian translation (Andriy Kopystyansky <anri@polynet.lviv.ua>).\n[cjh] Inline PHP-generated javascript to avoid cross-domain leaking\n      (Bug #5307).\n[cjh] Add a preference to not send notifications to the person who is\n      adding/updating/deleting the event (steven.deboeck@excentis.com,\n      Request #4770).\n[cjh] Add calendar/subscribe and calendar/unsubscribe methods for adding/\n      removing calendars to the currently displayed calendars\n      (duck@obala.net).\n[cjh] Remove unneeded Kronolith_Driver::close method.\n[cjh] Fix error handling when moving events\n      (thomas.jarosch@intra2net.com, Bug #5401).\n[jan] Show icon for private events (Request #5190).\n[jan] Allow to edit existing event attendees.\n[jan] Add links to delete exceptions from recurring events.\n[jan] Add recurrence types by day of year and weekday of year.\n[jan] Add recurrence durations by number of recurrences.\n[jan] Allow to edit exceptions from recurring events.\n[jan] Allow to specify attendees without email addresses.\n[jan] Allow to specify attendee names with the email addresses.\n[cjh] Link to remote URLs in iCalendar events, if present (Duck).\n[jan] Hide less important event settings in the edit form by default.\n[jan] Add support for the Horde_Alarm framework (requires Horde 3.2).\n[cjh] Add ContactAutoCompleter javascript to the attendees screen\n      (Request #1635).\n[jan] Add month tab to free/busy view (Gunnar Wrobel <wrobel@pardus.de>,\n      Request #4896).\n[cjh] Use extended Free/Busy information from Kolab (wrobel@pardus.de,\n      Request #4869).\n[ben] Add daily agenda reminder (Request #4655).\n[cjh] Include event location in reminders (webmgr@muskingum.edu,\n      Request #4771).\n[cjh] Use global proxy configuration for HTTP requests (Request #1039).\n[jan] Display holidays generated with the Date_Holiday package (Stephan\n      Hohmann <webmaster@dasourcerer.net>, Request #3862).\n[cjh] Consider failing to find any attendees to update an error\n      (Bug #4588).\n[cjh] Include a summary of which calendars were printed in print views\n      (Request #3263).\n[jan] Add support for reading and saving events through external clients\n      (requires Horde 3.2, d.bussink@student.utwente.nl, Request #3032).\n[jan] Limit number of events in portal summary block (Duck <duck@obala.net>).\n[cjh] Add a live search to the calendar panel (Request #4607).\n[mas] Conform to WCAG 1.0 Priority 2/Section 508 accessibility guidelines.\n      (Request #4080)\n[cjh] Fix Day and Week display of events that overlap with an event that\n      doesn't start all the way to the left (Bug #2967).\n[cjh] Move calendar selection/deselection to a collapsible panel.\n[jan] Allow to set user name and password for remote calendars\n      (tevans@tachometry.com, Request #3696).\n[jan] Allow to edit remote calendars (tevans@tachometry.com, Request #3696).\n[cjh] Move almost all hiding of elements during printing to CSS classes.\n[cjh] Allow the listEvents api call to list events from multiple calendars,\n      and filter by whether or not events have an alarm\n      (Ben Klang <ben@alkaloid.net>, Bug #4104).\n[mjr] Support for removing user data from backend when user is removed from\n      Horde.\n[jan] Add private flag.\n[cjh] Add a default alarm preference.\n[cjh] Always include X-WR-CALNAME in iCalendar exports (Request #3618).\n[jan] Add multidomain support for Kolab servers (tokoe@kde.org, Request #3579).\n[jan] Allow delegation of events.\n[cjh] Dynamic switching between Display, Edit, and Delete screens.\n[jan] Add preference to force day and week views to selected hours.\n[cjh] Make the duration input a text field instead of a 365-day dropdown.\n[mdj] Add support for split read/write database.\n[mdj] Add failover support for SQL backend.\n[cjh] Use partial page fetches to update the main \"page\" div if the browser\n      supports the necessary JavaScript.\n\n\n------\nv2.1.7\n------\n\n[jan] SECURITY: Fix privilege escalation in Horde API.\n[cjh] SECURITY: Fix missing ownership validation on share changes.\n[jan] Set the user's timezone in the free/busy information.\n[jan] Fix redirection after editing an event from the sidebar menu (Bug #5769).\n\n\n------\nv2.1.6\n------\n\n[cjh] Display attendees list correctly without a mail/compose method (Bug\n      #5127).\n[cjh] Send iCalendar data as UTF-8 (Bug #5427).\n[jan] Fix duration of remote and imported full-day events (Bugs #4617, #4794).\n[jan] Fix recurring multiday events crossing a month border (Bug #5205).\n[jan] Fix duration calculation in edit form for events covering more than a\n      month (Bug #5120).\n\n\n------\nv2.1.5\n------\n\n[jan] Fix character set encoding of exported vCalendar/iCalendar data.\n[jan] Fixed MS-SQL driver (Bug #5088).\n[jan] Add Catalan translation (Jordi Giralt <projecte.k2@upcnet.es>).\n[jan] Fix searching for non-ascii strings (Bug #4773).\n[cjh] Display partial hours in free/busy view (cbs@cts.ucla.edu,\n      Request #4755).\n[cjh] Honor date_format preference in reminders and notifications (Bug #4726).\n\n\n------\nv2.1.4\n------\n\n[cjh] SECURITY: Close arbitrary file inclusion in free/busy views.\n\n\n------\nv2.1.3\n------\n\n[cjh] Set vEvent ORGANIZER to the event creator, not the calendar owner\n      (kajtzu@basen.net, Bug #4527).\n[jan] Fix importing of events without end date and duration (Bug #4519).\n[jan] Correctly display recurring events spanning multiple days (Bug #4438).\n[jan] Fix recurrence end dates with SQLite backends (Bug #4219).\n[jan] Fix calculation of recurrence ends with imported and remote events\n      (Bug #2813).\n[cjh] Consolidate the check for whether or not users can add events in\n      the day and month views (Bug #4373).\n[jan] Fix alarms for recurring events in Kolab driver\n      (michael.sheldon@credativ.de, Bug #4326).\n[jan] Show error message if imported file didn't contain events.\n[cjh] Fix the SQL types of several recurrence fields.\n[jan] Add categories from imported events to the user's categories.\n[jan] Add Slovenian translation (Duck <duck@obala.net>).\n[jan] Deal with attendee email addresses case insensitively.\n[jan] Don't consider events from remote calendars as busy time.\n[jan] Always try to return the correct event instance if requesting an event\n      by its UID (Thorsten Schaub, Bug #1994).\n[cjh] Fix permissions for the calendar list in advanced search (Bug #4093).\n\n\n------\nv2.1.2\n------\n\n[jan] Don't show calendar creation form if multiple calendars are not allowed\n      (Bug #3988).\n[jan] Add \"Save and Finish\" button to attendees popup (Request #1158).\n[jan] Add parameter to Upcoming Events portal block to limit number of\n      displayed events (dorm@dorm.org, Request #3905).\n[jan] Allow adding of events if not using a permanent DataTree backend.\n[jan] Fix fatal error for new users on some sytems (Bug #3711).\n\n\n------\nv2.1.1\n------\n\n[jan] Fix updating attendee status from KOrganizer replies.\n[jan] Fix events of status \"free\" being included in busy information.\n[jan] Automatically add current user's free/busy information to meeting\n      planner.\n[jan] Add 1.1 to 2.x upgrade script for Oracle.\n[cjh] Prevent listAlarms() from causing a fatal error if no calendar is\n      open (Bug #3717).\n[jan] Update free/busy information on Kolab server after editing events\n      (requires Horde 3.1.1) (tokoe@kde.org, Request #3654).\n[cjh] Honor time format and language preferences in email notifications\n      (Bug #2064).\n[cjh] Add missing display_contact preference (Bug #3575).\n[cjh] Fix fatal error during first login of new users.\n\n\n----\nv2.1\n----\n\n[cjh] There are now several guards against users being stuck with no selected\n      calendars and no way to select one (Bug #3538).\n\n\n--------\nv2.1-RC3\n--------\n\n[jan] Fix retrieving of free/busy URLs from Kolab servers (tokoe@kde.org,\n      Bug #3450).\n[jan] Fix recurring events without end dates using the Kolab driver\n      (tokoe@kde.org, Bug #2734).\n[jan] Allow to specify port and protocol of Kolab server for free/busy request\n      (aseigo@kde.org, tokoe@kde.org, Request #2178).\n[jan] Improve attendees and contacts forms.\n\n\n--------\nv2.1-RC2\n--------\n\n[jan] Show subscription URL for calendars in \"My Calendars\" overview\n      (kevin_myer@iu13.org, Request #3256).\n[jan] Fix browser redirection after saving events.\n\n\n--------\nv2.1-RC1\n--------\n\n[cjh] The calendar(s) to export data from are now configurable (Request #2330).\n[jan] Add Portuguese translation (Manuel Menezes de Sequeira\n      <Manuel.Sequeira>).\n[cjh] Use HTTP_Request to retrieve Free/Busy information so we don't\n      rely on allow_url_fopen.\n[cjh] Remove disabled PDB import code.\n[cjh] Fix display when only remote calendars are active (Bug #2777).\n[cjh] Fix alarms for recurring events.\n[ben] Add RSVP to iTip so Outlook will send a reply message when the\n      invitation is accepted/declined/etc.\n[jan] Allow automatic sharing of new calendars with users' groups\n      (gauret@free.fr, Request #1366).\n[jan] Add preference to only retrieve event reminders for certain calendars\n      (kevin_myer@iu13.org, Request #649).\n[jan] Always return to last screen after editing or deleting events.\n[jan] Allow to freely set event years.\n[jan] Add event status of \"Free\".\n[jan] Add CLI script to import iCalendar/vCalendar data.\n[cjh] Deprecate the MCAL driver.\n[mas] Allow replacing a calendar with an imported one. (Bug #1364)\n[mas] Change any output of <b> and <i> tags to <strong> and <em> for better\n      accessibility support.\n[cjh] Use CSS for all category colors instead of generating them inline.\n[cjh] Use Horde_Template for day and week view rows.\n[cjh] The length of time slots in the day and week views is now configurable\n      (Bug #1952).\n[cjh] Add a tree block for showing current alarms.\n[jan] Add permissions to restrict number of events.\n[cjh] Show event owners in tooltips.\n[cjh] Fix assumptions about users being logged in when fetching free/busy\n      information (tasin (at) fhm (dot) edu, Bug #1850).\n[jan] Add calendar popup window to side-by-side view to search for calendars\n      and toggle their visibility.\n[jan] Add icon to calendar names to remove calendars from side-by-side view.\n[cjh] fb.php now accepts ?u= arguments as well as ?c=, for displaying a user's\n      chosen free/busy calendars, allowing users control of which calendars\n      block out free/busy time without changing the free/busy URL\n      (kevin_myer@iu13.org, Bug #1683).\n[cjh] Add exists() method to calendar drivers for checking if events exist by\n      UID (Roel Gloudemans <roel@gloudemans.info>).\n[jan] Send links in iTip requests to let users quickly reply to an invitation.\n[cjh] Add ics.php (also mirrored by an exportCalendar() API method), which can\n      be used for integration with Sunbird, iCal, et. al. (srrafa@usc.es,\n      Bug #917).\n[jan] Add preference to send email notifications to users when events have\n      been added, edited, or deleted in their calendars.\n[cjh] Add a Year view (mbydalek@mobilemini.com) (Bug #1238).\n[jan] Use OPTGROUPs in calendar drop down list.\n\n\n------\nv2.0.7\n------\n\n[cjh] SECURITY: Close arbitrary file inclusion in free/busy views.\n\n\n------\nv2.0.6\n------\n\n[cjh] Close several XSS problems with calendar and event fields.\n\n\n------\nv2.0.5\n------\n\n[jan] Fix warnings with Internet Explorer on HTTPS connections.\n[jan] Fix reminder emails.\n\n\n------\nv2.0.4\n------\n\n[jan] Allow to import more than one event from iCalendar data at once.\n[cjh] Avoid loops and other errors by immediately failing nextRecurrence()\n      checking for any event with a recurInterval of 0 (Bug #2709).\n\n\n----------\nv2.0.4-RC1\n----------\n\n[jan] Fix navigation popup with Safari browsers (t.zell@gmx.de, Bug #2447).\n[cjh] Fix infinite loop with some recurring events (Bug #2346).\n[cjh] Fix All Past and All Future searches (Bug #2257).\n[cjh] Be smarter about enforcing \"end before beginning\" check for\n      am/pm users when creating an event than spans noon (Bug #1731).\n[jan] Sort search results by start date and show category colors.\n[cjh] Respect twenty_four preference in reminders script (Bug #1896).\n\n\n------\nv2.0.3\n------\n\n[jan] Respect SMTP authentication settings when sending reminders and\n      notifications (requires Horde 3.0.4).\n[jan] Include date in reminder message (Bug #1855).\n[jan] Fix time grids in free/busy view (Bugs #1557, #1868, tasin@fhm.edu).\n\n\n----------\nv2.0.3-RC1\n----------\n\n[jan] Fix browsing through work weeks in attendees view (Bug #1852,\n      tasin@fhm.edu).\n[jan] Fix updating of attendee status in attendees view (Bug #1188).\n[jan] Don't show tasks without due dates in all timezones (Bug #514).\n[jan] Include attendees in iTip event invitations (Bug #1676).\n[jan] Fix generated HTML if no calendar has been selected.\n[cjh] Add a PostgreSQL upgrade script (Bug #1778).\n[cjh] Show the calendar selection dropdown if there are remote calendars\n      regardless of number of shares (Bug #1640).\n[cjh] Separate buttons on attendees screen (kevin_myer@iu13.org, Bug #1635).\n[cjh] Use bind variables in the SQL drivers (selsky@columbia.edu, Bugs #1669,\n      #1670).\n[jan] Send reminders in users' languages (Bug #1654).\n[cjh] Don't leave events in the database with no recurrences left (Bug #1503).\n[cjh] Make sure that remote events can be edited for saving as new, and never\n      show a delete button for them (Bug #1639).\n[cjh] Always use eventID, not eventIndex. Fixes problems with only one remote\n      event showing up per day (Bug #1630).\n[jan] Fix free/busy generation on broken PHP CGI SAPIs (Bug #1599).\n[cjh] Set recurrence end date if present in iCal data (Bug #1365, #1582).\n[cjh] Alarms that are a calendar day or more in the future are now sent on\n      time (Bug #1356)\n[jan] Catch errors if importing incomplete events (Bug #1429).\n[cjh] Fix display errors with overlapping repeating events and PHP4\n      (Bug #1200).\n[ben] Allow setting the default domain on attendee email addresses when\n      checking for freebusy urls.\n[cjh] Treat webcal:// URLs as http:// for remote calendars (Bug #1480).\n[cjh] Fix problems with PostgreSQL and non-ISO date formats (Bug #1482).\n[jan] Workaround IE warning when entering Kronolith over HTTPS (Bug #910).\n[jan] Add shortcut icon (favicon.ico).\n[jan] Sort whole day events alphabetically (Bug #222).\n\n\n------\nv2.0.2\n------\n\n[jan] Fix portal block for missing events at the turn of the year (Bug #1337).\n\n\n----------\nv2.0.2-RC1\n----------\n\n[jan] Fix free/busy views with some languages (Bug #1036).\n[cjh] Prevent infinite loops if events are set to recur weekly on no\n      weekdays (Bug #1074).\n[cjh] Set iCalendar events with weekly recurrence to recur on the day\n      of the week of the first recurrence if no BYDAY data is present\n      (Bug #1074).\n[cjh] Make sure that event UIDs are properly set in iTip notifications\n      (Bug #1153).\n[jan] Add Japanese translation (Hiromi Kimura <hiromi@tac.tsukuba.ac.jp>).\n[cjh] Check the completion status of tasks, not just their due date,\n      before showing them on the calendar (Bug #947).\n\n\n------\nv2.0.1\n------\n\n[cjh] Fix one page load delay in showing new/removing deleted shares\n      on the My Calendars screen (Bug #1048).\n[cjh] Fix labeling of weekday columns in the Month view when the\n      week starts on Monday and show_shared_side_by_side preference\n      is on (Bug #1049).\n[cjh] Fix fatal error when in calendar/import API call\n      (Sebasti\u00e1n Calero <scalero@datadec.es>).\n[cjh] Fix a week boundary problem that took you to the previous\n      week when switching between the week and work week views.\n[cjh] Fix several errors in calculating the week number at the\n      rollover between years.\n[cjh] Fix an off-by-one error in the work week view when the user\n      views weeks starts on Sunday (Bug #1046).\n[cjh] Add PostgreSQL version of 2004-12-21_add_event_uid (Bug #1028).\n[cjh] Fix typo that prevented attendees from being saved (Bug #1019).\n\n\n----\nv2.0\n----\n\n[cjh] UIDs need to be stored in the History system with a kronolith:\n      prefix and with the calendar so as not to confuse different\n      instances of the same event (if two users both have a event on\n      their seperate calendars, they should have unique histories for\n      that event).\n[cjh] The My Calendars page now has a tool for generating Free/Busy URLs\n      (Bug #571).\n[cjh] Pass Horde_Date objects instead of timestamps when exporting to\n      iCalendar (Bug #950).\n[cjh] Clone events before changing their start dates to the current day\n      in the day view so that the week view isn't wrong.\n[cjh] Fix an off-by-one error in the week view when the user views weeks\n      starting on Sunday.\n[cjh] Add a preference for whether or not to show the background color\n      for tasks shown on the calendar.\n[cjh] Don't produce invalid exception dates when exporting iCal files or\n      when loading SQL events.\n[cjh] Users can now get to the category/color edit screen directly\n      from the category legend, instead of having to find them in\n      Horde's prefs.\n\n\n--------\nv2.0-RC3\n--------\n\n[cjh] Add All Past as an option on simple searches.\n[cjh] Add My Calendars menu entry.\n[cjh] Event exceptions are now correctly exported in iCalendar files.\n[cjh] Fix recurring events that recur on the same day of the month every n\n      months where n > 1 (Bug #907).\n[cjh] Fix month view for months starting on Sunday with the first displayed\n      day set to Monday (Bug #907).\n[cjh] Show event state by CSS styling (Derek P. Moore <derekm@hackunix.org>).\n[jan] Correctly highlight the current view's tab (Bug #896).\n\n\n--------\nv2.0-RC2\n--------\n\n[jan] Fix recurring events from remote calendars (Bug #559).\n[cjh] The menubar Goto popup is now always on top of <select> boxes,\n      even in Internet Explorer (Bug #822).\n[cjh] Menubar Goto link works on the Options screen again.\n\n\n--------\nv2.0-RC1\n--------\n\n[cjh] Fix the menubar popup date navigator on the New Event screen.\n[cjh] Remove unused specialized notification listener.\n[cjh] Update icons.\n[jan] Fix importing of non-recurring events.\n[jan] Save categories of imported events.\n[cjh] Show different calendar views in tabs, not in the menu.\n[cjh] Show free/busy view only in the event screen.\n\n\n---------\nv2.0-BETA\n---------\n\n[cjh] The guts of Kronolith_Event objects are now based on Horde_Date\n      objects instead of timestamps.\n[cjh] Lots of date-related functions moved to the Horde_Date class.\n[jan] Add preference for address books to search for free/busy urls.\n[jan] Add special black-on-white styles for message printing.\n[cjh] Add title field to the basic search.\n[cjh] Allow searches for \"All Future\" events.\n[cjh] Add search functionality (Meilof <meilof@gmail.com>).\n[jan] Add access keys.\n[cjh] Add Kolab drivers (Stuart Bing\u00eb <s.binge@codefusion.co.za>).\n\n\n----------\nv2.0-ALPHA\n----------\n\n[cjh] Remote calendars are now parsed with the Horde_iCalendar library,\n      which allows for much better iCalendar support, better handling of\n      timezones, etc.\n[cjh] The month view no longer shows blank boxes for days in the grid that are\n      outside of the current month - instead, it goes back into the previous\n      month and forward into the next month however many days are showable.\n[cjh] Kronolith now includes the functionality, previously in Moment,\n      to track attendees for events, send invitations, updates, and\n      cancellations, and do scheduling based on freebusy information\n      (Stuart Binge <s.binge@codefusion.co.za>).\n[cjh] Kronolith_Driver::move() added to prevent event IDs changing when moving\n      between calendars, if possible.\n[cjh] GUIDs now only contain kronolith: and the event ID - sharename is not\n      needed.\n[cjh] Event IDs are now 32-character unique strings, to be useable as GUIDs.\n      The SQL table definition has changed; conversion scripts are in scripts/.\n[cjh] eventd now uses the Horde_Scheduler API's ability to serialize and\n      save state; it's now meant to be run out of cron every minute (no\n      more slow memory munching).\n[cjh] Show start and end times in event tooltips\n      (Payton <payton@repligen.com>).\n[cjh] Fix events that recur every n months (where n != 1) on the same\n      weekday when using the SQL driver.\n[cjh] Track addition, modification, and deletion of events\n      with the Horde History:: API.\n[cjh] The event editor now switches the list of categories to match the\n      calendar that you are adding the event to.\n[cjh] Show tooltips with event descriptions.\n[cjh] Show a legend mapping categories to colors\n      (Jason Rust <jrust@rustyparts.com>).\n[mir] listEvents now supports an option to NOT do recurrence (useful for\n      synchronizing with other systems).\n[cjh] First shot at a reminder daemon, written in PHP and using the\n      Horde_Scheduler framework.\n[cjh] Cache free/busy information for an hour.\n[cjh] Add viewing of shared calendars side-by-side in the month view\n      (j.huinink@wanadoo.nl).\n[cjh] Kronolith now generates free/busy information for any calendar that the\n      viewer has PERMS_SHOW permission to. This can be used in, e.g., Outlook\n      for scheduling meetings, etc.\n[cjh] Support for guest calendars.\n[cjh] Use the global shares editing page for changing/assigning share\n      permissions.\n[mac] Add support for subscribing to remote iCalendar files.\n[cjh] Remove the Share header for now; takes up far too much space\n      to communicate limited information.\n[mac] Add ability to display multiple calendars at a time.\n[cjh] Palm DateBook (PDB) import support.\n[mac] Add shared calendars support (Joel Vandal <joel@scopserv.com>).\n[cjh] Kronolith can now send iCalendar invitations to an event.\n[cjh] Import/Export of iCalendar data works for basic attributes now.\n[cjh] Use Horde::compressOutput() for output compression.\n\n\n------\nv1.1.4\n------\n\n[jan] Close XSS when setting the parent frame's page title by javascript (cjh).\n\n\n------\nv1.1.3\n------\n\n[jan] Fix display of category colors in week and day views (Bj\u00f6rn Tackmann\n      <bjoern.tackmann@consultico.de>).\n[jan] Add Latvian translation (Ivars Stivrins <ivars@kraslava.lv>).\n[jan] Fix erroneous javascript in recurrence input fields of the event form\n      (Bugs 403, 408).\n\n\n------\nv1.1.2\n------\n\n[cjh] Fix a bug in the SQL driver preventing events from being displayed.\n\n\n------\nv1.1.1\n------\n\n[jan] Fix some display bugs with recurring events in the sql driver (cjh).\n\n\n----------\nv1.1.1-RC1\n----------\n\n[jan] Fix broken image tag in day and week views.\n[jan] Fix \"New Category\" selection in event edit view.\n[jan] Add Arabic (Syria) translation (Platinum Development Team\n      <devteam@platinum-sy.net>).\n\n\n----\nv1.1\n----\n\n[cjh] Kronolith_Event objects now know how to obtain their driver,\n      rather than storing a reference. Makes for much smaller/better\n      return values over XML-RPC, at least.\n[cjh] Fix a bug in the spanning algorithm when there were two\n      independant sets of overlapping events that were not common\n      factors (i.e, a set of 2 events and a set of 3 events). Also\n      start to document the row spanning code.\n[mir] Implement week of month recurrence for SQL driver.\n[cjh] Use Kronolith::listEvents() everywhere, so there is only one body\n      of code to debug/add to for listing of events.\n[cjh] Show Nag tasks, if requested, on all views.\n[cjh] Use Kronolith::listEvents() in the week views; should be much\n      more efficient (fewer SQL queries/MCAL calls).\n[cjh] Fix summary display of events after an empty day.\n[cjh] Fix links to events on other calendars in the summary.\n[cjh] Show category colors in the Kronolith summary.\n[cjh] Show current category color in category color options screen\n      (Jan Kuipers <jrkuipers@lauwerscollege.nl>).\n[jan] Add Romanian translation (Eugen Hoanca <eugenh@urban-grafx.ro>,\n      Marius Dragulescu <mariusd@urban-grafx.ro>).\n[jan] Add Print button for day, week, month views (mac).\n[jan] Clean up url creation and XHTML (mac).\n[jan] Add Norwegian Bokmaal translation (Torstein S. Hansen <huleboer@techbee.no>).\n[jan] Add Kronolith::addParameter().\n[jan] Add Lithuanian translation (Darius Matuliauskas <darius@lnk.lt>).\n[mac] Clean up url creation and XHTML.\n[jan] Add Simplified Chinese translation (Zhang Bo <boozhang@sdb.ac.cn>).\n[jan] Add Bulgarian translation (Miroslav Pendev <miro@cybershade.us>).\n[jan] Replace <?= with <?php echo, and remove the short_open_tags requirement.\n[jan] Add delete link to event view.\n[jan] Remove deprecated DB::isWarning() calls.\n\n\n----\nv1.0\n----\n\n[jan] Add Hungarian translation (Laszlo L. Tornoci <torlasz@xenia.sote.hu>).\n[jan] Add Korean translation (J.I Kim <aporie@netian.com>).\n[jan] Add Danish translation (Bill Edgington <horde@0x20.com>).\n[jan] Add Norwegian Nynorsk translation (Per-Stian Vatne <psv@orsta.org>).\n[jan] Add event view page and make it the standard if clicking on an event\n      link (Brandon Knitter <knitterb@blandsite.org>).\n[jan] Show event description in link tooltip.\n[jan] Add Event::getLink().\n[cjh] Track when events are modified.\n[cjh] Add exceptions to recurring events.\n[cjh] Allow same deletion options as Palm for recurring events.\n[cjh] Add a preference for confirming event deletion.\n[jan] Add Slovak translation (Leo Mrafko <leo@oel.sk>).\n[jan] Add \"Save as new\" button (Michael Cochrane <mike@graftonhall.co.nz>).\n[cjh] Close a potential problem with register_globals On and $js_onLoad.\n[jan] Add Finnish translation (Leena Heino <liinu@uta.fi>).\n[cjh] Add new event link to the summary (Quinn Wilson <qwilson@midworld.org>).\n[cjh] Use the new PrefsUI class.\n[cjh] Show events that extend past the end hour of the day view.\n[jon] Adapt to the new Horde::img() syntax.\n[cjh] Switch output compression to ob_gzhandler().\n[cjh] Fix column widths in week view to be consistent\n      (Jeff Graves <jeff@image-src.com>).\n[jan] Add Polish translation (Maciek Uhlig <muhlig@us.edu.pl>).\n[cjh] Add preferences for the hour range shown in the day/week views.\n[cjh] Use KRONOLITH_TEMPLATES constant for all template paths.\n[cjh] Use $registry->get() for all Registry information.\n[cjh] Use the new Notification system.\n[jan] Add Swedish translation (Andreas Dahl\u00e9n <andreas@dahlen.ws>).\n[jon] Enable the \"portability\" option in the SQL driver.\n[jan] Use the new notification framework. This breaks compatibility with\n      Horde 2.0.\n[jan] Remove the standard value for the language preference. The language to\n      fall back to should be set Horde wide in lang.php instead.\n[jan] Change '24hr' preference to 'twentyFour' to be ldap compliant.\n\n\n------\nv0.0.3\n------\n\n[bjn] Change 'en' and 'en_EN' locales to 'en_US' (default).\n[jan] Add Brazilian Portuguese translation (Samuel Mota\n      <samuel@bumerangue.com>).\n[jan] Add DHTML date navigator.\n[jan] Add Greek translation (Stefanos I. Dimitriou <sdimitri@teiath.gr>).\n[jan] Add Russian translation (Anton Nekhoroshih <anton@valuehost.ru>).\n[jan] Recode the html display functions and add extra row for all day events.\n[cjh] Let the Registry handle retrieving preferences.\n[jan] Add icon for recurring events.\n[jan] Add preference to show due tasks from Nag in the calendar.\n[jan] Add import/export capability.\n[jan] Add Italian translation (Giovanni Meneghetti <gmeneghetti@infvic.it>).\n[cjh] Add Traditional Chinese translation (David Chang <david@thbuo.gov.tw>).\n[jan] Add support for timezones\n[jan] Put new-event-link into week header instead around times in week view.\n[jan] Add day of month into week headers\n[cjh] Add Czech translation (pchytil@asp.ogi.edu).\n[jan] The menu buttons now open the day/week/month view corresponding to the\n      actual view. New 'Today' button.\n[jan] Make sure that events before 8am are shown correctly.\n[cjh] Add an initial MySQL driver (Luc Saillard <luc+kronolith@alcove.fr>).\n[avsm] Replace $conf['paths'] with the $registry equivalents.\n[jan] Let the week alternatively start with Sunday. ISO conform week number\n      calculation.\n[cjh] Prevent all day events from causing the day to start displaying at 12am.\n[cjh] Add $conf['menu']['apps'] support and a help link.\n[jan] Let the users alternatively select end time or duration of an event.\n[jan] Add support for alarms.\n[cjh] Add a preference to use hour increments instead of half-hour (Jan\n      Schneider <janmailing@gmx.de>).\n[cjh] Bold in progress events in the summary and don't show events that are\n      over (Jan Schneider <janmailing@gmx.de>).\n[cjh] Add delete links on event edit pages, and make sure delete and cancel\n      work without javascript (Jan Schneider <janmailing@gmx.de>).\n[cjh] Add translation framework.\n[cjh] Make sure events are sorted by time in the summary.\n[cjh] Use the *url() functions more consistently to make sure that\n      cookie-less sessions work.\n\n\n------\nv0.0.2\n------\n\n[cjh] Allow all-day events and montly-on-weekday recurrence.\n[cjh] Add a Horde summary API function.\n[cjh] Use 24hr time preference (Jan Schneider <janmailing@gmx.de>).\n[cjh] Added Preferences framework into Kronolith.\n[jon] Merge doctype.inc into common-header.inc.\n[jon] Allow the registry to handle Kronolith's configuration values.\n[jon] HORDE_BASE is now defined in lib/base.php instead of config/conf.php.\n[cjh] Define the HORDE_BASE constant in config/conf.php, and use it when\n      referring to any of Horde's files.\n[jon] Retired config/menu.txt in favor of config/menu.php.  This file follows\n      a new format based on native PHP data structures.\n[cjh] Add an optional keywords section, and a keywords definition file.\n[cjh] Add a location field to events.\n[cjh] Add the ability to re-label the category field, and to make it a\n      system-defined list of options.\n[cjh] Added Kronolith::weeksInYear($year) and Kronolith_Day::isToday().\n[cjh] Add week and workweek (mon-fri) views.\n[cjh] Allow events to recur every other week, every 3 days, etc.\n[cjh] Reorganize the event adding/editing screen and add javascript to give\n      the user sane defaults.\n[cjh] Remove year.php; it's ugly and not really useful.\n[cjh] Open the calender in base.php.\n[cjh] Remove most of the remaining mcal-dependent code.\n[cjh] Kronolith now uses Horde authentication instead of its own. This means\n      that whatever auth method you are using for Horde will be used to\n      authenticate to Kronolith, and in return you get single sign-on with any\n      other apps using Horde authentication. This also means that Kronolith\n      is completely independent of MCAL for authentication now; if you have\n      one MCAL user, that's enough to provide calendars for all Horde users.\n[cjh] Add lib/base.php to include all globally needed conf files and\n      libraries, set up the language, etc.\n[cjh] Abstract the event creation/edit code into the\n      Kronolith_Driver/Kronolith_Event classes.\n[cjh] Changes to work with register_globals = Off. (IN PROGRESS)\n[cjh] Add an optional \"get the time this event would start on day x\" feature\n      to the Kronolith_Event:: class, allowing status.php to work with\n      recurring events.\n[cjh] We now have the Kronolith_Event abstraction class that abstracts away\n      details of events, so that the frontend scripts aren't dependant on\n      mcal.\n[cjh] Display events which are in progress, just starting, or start in under\n      two hours along with other messages just under the menu.\n[cjh] Much slicker UI.\n[cjh] Use mcal_popen instead of mcal_open - might give us a performance gain.\n\n\n------\nv0.0.1\n------\n\n[cjh] Don't display delete links in month view; slimmer UI.\n[jon] Silence session_start warnings.\n[jon] Use Horde::url() in place of the deprecated buildURL() function.\n[cjh] Update to work with new slimmed down/Horde:: integrated session code.\n[cjh] Use the new css.php script to generate our stylesheets.\n[cjh] Revising the look and feel to use the new stylesheets and conventions.\n[cjh] Added initial CHANGES file and documentation.\n", "/**\n * kronolith.js - Base application logic.\n *\n * Copyright 2008-2012 Horde LLC (http://www.horde.org/)\n *\n * See the enclosed file COPYING for license information (GPL). If you\n * did not receive this file, see http://www.horde.org/licenses/gpl.\n *\n * @author Jan Schneider <jan@horde.org>\n */\n\n/* Kronolith object. */\nKronolithCore = {\n    // Vars used and defaulting to null/false:\n    //   DMenu, Growler, inAjaxCallback, is_logout, weekSizes, daySizes,\n    //   groupLoading, colorPicker, duration, timeMarker, monthDays,\n    //   allDays, eventsWeek, eventTagAc, calendarTagAc, attendeesAc\n\n    view: '',\n    ecache: $H(),\n    cacheStart: null,\n    cacheEnd: null,\n    holidays: [],\n    tcache: $H(),\n    eventsLoading: {},\n    loading: 0,\n    viewLoading: [],\n    fbLoading: 0,\n    redBoxLoading: false,\n    inPrefs: false,\n    date: Date.today(),\n    tasktype: 'incomplete',\n    growls: 0,\n    alarms: [],\n    knl: {},\n    wrongFormat: $H(),\n    mapMarker: null,\n    map: null,\n    mapInitialized: false,\n    freeBusy: $H(),\n    search: 'future',\n    effectDur: 0.4,\n    macos: navigator.appVersion.indexOf('Mac') != -1,\n\n    /**\n     * The location that was open before the current location.\n     *\n     * @var string\n     */\n    lastLocation: '',\n\n    /**\n     * The currently open location.\n     *\n     * @var string\n     */\n    openLocation: '',\n\n    /**\n     * The current (main) location.\n     *\n     * This is different from openLocation as it isn't updated for any\n     * locations that are opened in a popup view, e.g. events.\n     *\n     * @var string\n     */\n    currentLocation: '',\n\n    kronolithBody: $('kronolithBody'),\n\n    doActionOpts: {\n        onException: function(parentfunc, r, e)\n        {\n            /* Make sure loading images are closed. */\n            this.loading--;\n            if (!this.loading) {\n                $('kronolithLoading').hide();\n            }\n            this.closeRedBox();\n            this.showNotifications([ { type: 'horde.error', message: Kronolith.text.ajax_error } ]);\n            this.debug('onException', e);\n        }.bind(this),\n        onFailure: function(t, o) {\n            KronolithCore.debug('onFailure', t);\n            KronolithCore.showNotifications([ { type: 'horde.error', message: Kronolith.text.ajax_error } ]);\n        },\n        evalJS: false,\n        evalJSON: true\n    },\n\n    debug: function(label, e)\n    {\n        if (!this.is_logout && window.console && window.console.error) {\n            window.console.error(label, Prototype.Browser.Gecko ? e : $H(e).inspect());\n        }\n    },\n\n    /* 'action' -> if action begins with a '*', the exact string will be used\n     *  instead of sending the action to the ajax handler. */\n    doAction: function(action, params, callback, opts)\n    {\n        opts = Object.extend(this.doActionOpts, opts || {});\n        params = $H(params);\n        action = action.startsWith('*')\n            ? action.substring(1)\n            : Kronolith.conf.URI_AJAX + action;\n        if (Kronolith.conf.SESSION_ID) {\n            params.update(Kronolith.conf.SESSION_ID.toQueryParams());\n        }\n        opts.parameters = params.toQueryString();\n        opts.onComplete = function(t, o) { this.doActionComplete(t, callback); }.bind(this);\n        new Ajax.Request(action, opts);\n    },\n\n    doActionComplete: function(request, callback)\n    {\n        this.inAjaxCallback = true;\n\n        if (!request.responseJSON) {\n            if (++this.server_error == 3) {\n                this.showNotifications([ { type: 'horde.error', message: Kronolith.text.ajax_timeout } ]);\n            }\n            this.inAjaxCallback = false;\n            return;\n        }\n\n        var r = request.responseJSON;\n        if (!r.msgs) {\n            r.msgs = [];\n        }\n\n        if (r.response && Object.isFunction(callback)) {\n            try {\n                callback(r);\n            } catch (e) {\n                this.debug('doActionComplete', e);\n            }\n        }\n\n        if (this.server_error >= 3) {\n            r.msgs.push({ type: 'horde.success', message: Kronolith.text.ajax_recover });\n        }\n        this.server_error = 0;\n\n        this.showNotifications(r.msgs);\n        this.inAjaxCallback = false;\n    },\n\n    setTitle: function(title)\n    {\n        document.title = Kronolith.conf.name + ' :: ' + title;\n        return title;\n    },\n\n    showNotifications: function(msgs)\n    {\n        if (!msgs.size() || this.is_logout) {\n            return;\n        }\n\n        msgs.find(function(m) {\n            switch (m.type) {\n            case 'horde.ajaxtimeout':\n                this.logout(m.message);\n                return true;\n\n            case 'horde.alarm':\n                var alarm = m.flags.alarm;\n                // Only show one instance of an alarm growl.\n                if (this.alarms.include(alarm.id)) {\n                    break;\n                }\n\n                this.alarms.push(alarm.id);\n\n                var message = alarm.title.escapeHTML();\n                if (alarm.params && alarm.params.notify) {\n                    if (alarm.params.notify.ajax) {\n                        message = new Element('a')\n                            .insert(message)\n                            .observe('click', function(e) {\n                                this.Growler.ungrowl(e.findElement('div'));\n                                this.go(alarm.params.notify.ajax);\n                            }.bindAsEventListener(this));\n                    } else if (alarm.params.notify.url) {\n                        message = new Element('a', { href: alarm.params.notify.url })\n                            .insert(message);\n                    }\n                    if (alarm.params.notify.sound) {\n                        Sound.play(alarm.params.notify.sound);\n                    }\n                }\n                message = new Element('div')\n                    .insert(message);\n                if (alarm.params && alarm.params.notify &&\n                    alarm.params.notify.subtitle) {\n                    message.insert(new Element('br')).insert(alarm.params.notify.subtitle);\n                }\n                if (alarm.user) {\n                    var select = '<select>';\n                    $H(Kronolith.conf.snooze).each(function(snooze) {\n                        select += '<option value=\"' + snooze.key + '\">' + snooze.value + '</option>';\n                    });\n                    select += '</select>';\n                    message.insert('<br /><br />' + Kronolith.text.snooze.interpolate({ time: select, dismiss_start: '<input type=\"button\" value=\"', dismiss_end: '\" class=\"button ko\" />' }));\n                }\n                var growl = this.Growler.growl(message, {\n                    className: 'horde-alarm',\n                    life: 8,\n                    log: false,\n                    sticky: true\n                });\n                growl.store('alarm', alarm.id);\n\n                document.observe('Growler:destroyed', function(e) {\n                    var id = e.element().retrieve('alarm');\n                    if (id) {\n                        this.alarms = this.alarms.without(id);\n                    }\n                }.bindAsEventListener(this));\n\n                if (alarm.user) {\n                    message.down('select').observe('change', function(e) {\n                        if (e.element().getValue()) {\n                            this.Growler.ungrowl(growl);\n                            new Ajax.Request(\n                                Kronolith.conf.URI_SNOOZE,\n                                { parameters: { alarm: alarm.id,\n                                                snooze: e.element().getValue() } });\n                        }\n                    }.bindAsEventListener(this))\n                    .observe('click', function(e) {\n                        e.stop();\n                    });\n                    message.down('input[type=button]').observe('click', function(e) {\n                        new Ajax.Request(\n                            Kronolith.conf.URI_SNOOZE,\n                            { parameters: { alarm: alarm.id,\n                                            snooze: -1 } });\n                    }.bindAsEventListener(this));\n                }\n                break;\n\n            case 'horde.error':\n            case 'horde.warning':\n            case 'horde.message':\n            case 'horde.success':\n                this.Growler.growl(\n                    m.flags && m.flags.include('content.raw')\n                        ? m.message.replace(new RegExp('<a href=\"([^\"]+)\"'), '<a href=\"#\" onclick=\"KronolithCore.loadPage(\\'$1\\')\"')\n                        : m.message.escapeHTML(),\n                    {\n                        className: m.type.replace('.', '-'),\n                        life: 8,\n                        log: true,\n                        sticky: m.type == 'horde.error'\n                    });\n                var notify = $('kronolithNotifications'),\n                    className = m.type.replace(/\\./, '-'),\n                    order = 'horde-error,horde-warning,horde-message,horde-success,kronolithNotifications',\n                    open = notify.hasClassName('kronolithClose');\n                notify.removeClassName('kronolithClose');\n                if (order.indexOf(notify.className) > order.indexOf(className)) {\n                    notify.className = className;\n                }\n                if (open) {\n                    notify.addClassName('kronolithClose');\n                }\n                break;\n            }\n        }, this);\n    },\n\n    logout: function(url)\n    {\n        this.is_logout = true;\n        this.redirect(url || (Kronolith.conf.URI_AJAX + 'logOut'));\n    },\n\n    // url = (string) URL to redirect to\n    // hash = (boolean) If true, url is treated as hash information to alter\n    //        on the current page\n    redirect: function(url, hash)\n    {\n        if (hash) {\n            window.location.hash = escape(url);\n            window.location.reload();\n        } else {\n            window.location.assign(this.addURLParam(url));\n        }\n    },\n\n    addURLParam: function(url, params)\n    {\n        var q = url.indexOf('?');\n        params = $H(params);\n\n        if (Kronolith.conf.SESSION_ID) {\n            params.update(Kronolith.conf.SESSION_ID.toQueryParams());\n        }\n\n        if (q != -1) {\n            params.update(url.toQueryParams());\n            url = url.substring(0, q);\n        }\n\n        return params.size() ? (url + '?' + params.toQueryString()) : url;\n    },\n\n    go: function(fullloc, data)\n    {\n        if (this.viewLoading.size()) {\n            this.viewLoading.push([ fullloc, data ]);\n            return;\n        }\n\n        var locParts = fullloc.split(':');\n        var loc = locParts.shift();\n\n        if (this.inPrefs && loc != 'prefs') {\n            this.redirect(fullloc, true);\n            return;\n        }\n        if (this.openLocation == fullloc) {\n            return;\n        }\n\n        this.viewLoading.push([ fullloc, data ]);\n\n        if (loc != 'search') {\n            $('kronolithSearchTerm').setValue($('kronolithSearchTerm').readAttribute('default'));\n        }\n\n        switch (loc) {\n        case 'day':\n        case 'week':\n        case 'month':\n        case 'year':\n        case 'agenda':\n        case 'tasks':\n            this.closeView(loc);\n            var locCap = loc.capitalize();\n            $('kronolithNav' + locCap).addClassName('on');\n\n            switch (loc) {\n            case 'day':\n            case 'agenda':\n            case 'week':\n            case 'month':\n            case 'year':\n                var date = locParts.shift();\n                if (date) {\n                    date = this.parseDate(date);\n                } else {\n                    date = this.date;\n                }\n\n                if (this.view != 'agenda' &&\n                    this.view == loc && date.getYear() == this.date.getYear() &&\n                    ((loc == 'year') ||\n                     (loc == 'month' && date.getMonth() == this.date.getMonth()) ||\n                     (loc == 'week' && date.getRealWeek() == this.date.getRealWeek()) ||\n                     ((loc == 'day'  || loc == 'agenda') && date.dateString() == this.date.dateString()))) {\n                         this.setViewTitle(date, loc);\n                         this.addHistory(fullloc);\n                         this.loadNextView();\n                         return;\n                }\n\n                this.addHistory(fullloc);\n                this.view = loc;\n                this.date = date;\n                this.updateView(date, loc);\n                var dates = this.viewDates(date, loc);\n                this.loadEvents(dates[0], dates[1], loc);\n                $('kronolithView' + locCap).appear({\n                        duration: this.effectDur,\n                        queue: 'end',\n                        afterFinish: function() {\n                            if (loc == 'week' || loc == 'day') {\n                                this.calculateRowSizes(loc + 'Sizes', 'kronolithView' + locCap);\n                                if ($('kronolithTimeMarker')) {\n                                    this.positionTimeMarker();\n                                }\n                                if ($('kronolithTimeMarker')) {\n                                    $('kronolithTimeMarker').show();\n                                }\n                                // Scroll to the work day start time.\n                                $('kronolithView' + locCap).down('.kronolithViewBody').scrollTop = 9 * this[loc + 'Sizes'].height;\n                            }\n                            this.loadNextView();\n                        }.bind(this)\n                });\n                $('kronolithLoading' + loc).insert($('kronolithLoading').remove());\n                this.updateMinical(date, loc);\n\n                break;\n\n            case 'tasks':\n                var tasktype = locParts.shift() || this.tasktype;\n                this.setTitle(Kronolith.text.tasks);\n                if (this.view == loc && this.tasktype == tasktype) {\n                    this.addHistory(fullloc);\n                    this.loadNextView();\n                    return;\n                }\n                if (!$w('all complete incomplete future').include(tasktype)) {\n                    this.loadNextView();\n                    return;\n                }\n\n                this.addHistory(fullloc);\n                this.view = loc;\n                this.tasktype = tasktype;\n                $w('All Complete Incomplete Future').each(function(tasktype) {\n                    $('kronolithTasks' + tasktype).up().removeClassName('activeTab');\n                });\n                $('kronolithTasks' + this.tasktype.capitalize()).up().addClassName('activeTab');\n                this.loadTasks(this.tasktype);\n                $('kronolithView' + locCap).appear({\n                    duration: this.effectDur,\n                    queue: 'end',\n                    afterFinish: function() {\n                        this.loadNextView();\n                    }.bind(this) });\n                $('kronolithLoading' + loc).insert($('kronolithLoading').remove());\n                this.updateMinical(this.date);\n\n                break;\n\n            default:\n                if (!$('kronolithView' + locCap)) {\n                    break;\n                }\n                this.addHistory(fullloc);\n                this.view = loc;\n                $('kronolithView' + locCap).appear({\n                    duration: this.effectDur,\n                    queue: 'end',\n                    afterFinish: function() {\n                        this.loadNextView();\n                    }.bind(this) });\n                break;\n            }\n\n            break;\n\n        case 'search':\n            var cals = [], time = locParts[0], term = locParts[1],\n                query = Object.toJSON({ title: term });\n\n            if (!($w('all past future').include(time))) {\n                this.loadNextView();\n                return;\n            }\n\n            this.addHistory(fullloc);\n            this.search = time;\n            $w('All Past Future').each(function(time) {\n                $('kronolithSearch' + time).up().removeClassName('activeTab');\n            });\n            $('kronolithSearch' + this.search.capitalize()).up().addClassName('activeTab');\n            this.closeView('agenda');\n            this.view = 'agenda';\n            this.updateView(null, 'search', term);\n            $H(Kronolith.conf.calendars).each(function(type) {\n                $H(type.value).each(function(calendar) {\n                    if (calendar.value.show) {\n                        cals.push(type.key + '|' + calendar.key);\n                    }\n                });\n            });\n            $('kronolithAgendaNoItems').hide();\n            this.startLoading('search', query);\n            this.doAction('searchEvents',\n                          { cals: Object.toJSON(cals), query: query, time: this.search },\n                          function(r) {\n                              // Hide spinner.\n                              this.loading--;\n                              if (!this.loading) {\n                                  $('kronolithLoading').hide();\n                              }\n                              if (r.response.view != 'search' ||\n                                  r.response.query != this.eventsLoading.search) {\n                                  return;\n                              }\n                              if (Object.isUndefined(r.response.events)) {\n                                  $('kronolithAgendaNoItems').show();\n                                  return;\n                              }\n                              delete this.eventsLoading.search;\n                              $H(r.response.events).each(function(calendars) {\n                                  $H(calendars.value).each(function(events) {\n                                      this.createAgendaDay(events.key);\n                                      $H(events.value).each(function(event) {\n                                          event.value.calendar = calendars.key;\n                                          event.value.start = Date.parse(event.value.s);\n                                          event.value.end = Date.parse(event.value.e);\n                                          this.insertEvent(event, events.key, 'agenda');\n                                      }, this);\n                                  }, this);\n                              }, this);\n                          }.bind(this));\n            $('kronolithViewAgenda').appear({\n                duration: this.effectDur,\n                queue: 'end',\n                afterFinish: function() {\n                    this.loadNextView();\n                }.bind(this) });\n            $('kronolithLoadingagenda').insert($('kronolithLoading').remove());\n            this.updateMinical(this.date);\n            break;\n\n        case 'event':\n            // Load view first if necessary.\n            if (!this.view ) {\n                this.viewLoading.pop();\n                this.go(Kronolith.conf.login_view);\n                this.go.bind(this, fullloc, data).defer();\n                return;\n            }\n\n            if (this.currentLocation == fullloc) {\n                this.loadNextView();\n                return;\n            }\n\n            this.addHistory(fullloc, false);\n            switch (locParts.length) {\n            case 0:\n                // New event.\n                this.editEvent();\n                break;\n            case 1:\n                // New event on a certain date.\n                this.editEvent(null, null, locParts[0]);\n                break;\n            default:\n                // Editing event.\n                var date = locParts.pop(),\n                    event = locParts.pop(),\n                    calendar = locParts.join(':');\n                this.editEvent(calendar, event, date);\n                break;\n            }\n            this.loadNextView();\n            break;\n\n        case 'task':\n            switch (locParts.length) {\n            case 0:\n                this.addHistory(fullloc, false);\n                this.editTask();\n                break;\n            case 2:\n                this.addHistory(fullloc, false);\n                this.editTask(locParts[0], locParts[1]);\n                break;\n            }\n            this.loadNextView();\n            break;\n\n        case 'calendar':\n            if (!this.view) {\n                this.viewLoading.pop();\n                this.go(Kronolith.conf.login_view);\n                this.go.bind(this, fullloc, data).defer();\n                return;\n            }\n            this.addHistory(fullloc, false);\n            this.editCalendar(locParts.join(':'));\n            this.loadNextView();\n            break;\n\n        case 'prefs':\n            var url = Kronolith.conf.prefs_url;\n            if (data) {\n                url += (url.include('?') ? '&' : '?') + $H(data).toQueryString();\n            }\n            this.addHistory(loc);\n            this.inPrefs = true;\n            this.closeView('iframe');\n            this.iframeContent(url);\n            this.setTitle(Kronolith.text.prefs);\n            this.updateMinical(this.date);\n            this.loadNextView();\n            break;\n\n        case 'app':\n            this.addHistory(fullloc);\n            this.closeView('iframe');\n            var app = locParts.shift();\n            if (data) {\n                this.loadPage(data);\n            } else if (Kronolith.conf.app_urls[app]) {\n                this.loadPage(Kronolith.conf.app_urls[app]);\n            }\n            this.updateMinical(this.date);\n            this.view = 'iframe';\n            this.loadNextView();\n            break;\n\n        default:\n            this.loadNextView();\n            break;\n        }\n    },\n\n    /**\n     * Removes the last loaded view from the stack and loads the last added\n     * view, if the stack is still not empty.\n     *\n     * We want to load views from a LIFO queue, because the queue is only\n     * building up if the user switches to another view while the current view\n     * still loads. In that case we can go directly to the most recently\n     * clicked view and drop the remaining queue.\n     */\n    loadNextView: function()\n    {\n        var current = this.viewLoading.shift();\n        if (this.viewLoading.size()) {\n            var next = this.viewLoading.pop();\n            this.viewLoading = [];\n            if (current[0] != next[0] || current[1] || next[1]) {\n                this.go(next[0], next[1]);\n            }\n        }\n    },\n\n    /**\n     * Rebuilds one of the calendar views for a new date.\n     *\n     * @param Date date    The date to show in the calendar.\n     * @param string view  The view that's rebuilt.\n     * @param mixed data   Any additional data that might be required.\n     */\n    updateView: function(date, view, data)\n    {\n        this.holidays = [];\n\n        switch (view) {\n        case 'day':\n            var today = Date.today();\n            this.dayEvents = [];\n            this.dayGroups = [];\n            this.allDayEvents = [];\n            $('kronolithViewDay')\n                .down('caption span')\n                .update(this.setViewTitle(date, view, data));\n            $('kronolithViewDay')\n                .down('.kronolithAllDayContainer')\n                .store('date', date.dateString());\n            $('kronolithEventsDay').store('date', date.dateString());\n            if (date.equals(today)) {\n                this.addTimeMarker('kronolithEventsDay');\n            }\n            break;\n\n        case 'week':\n            this.dayEvents = [];\n            this.dayGroups = [];\n            this.allDayEvents = [];\n            this.allDays = {};\n            this.eventsWeek = {};\n            var div = $('kronolithEventsWeek').down('div'),\n                th = $('kronolithViewWeekHead').down('.kronolithWeekDay'),\n                td = $('kronolithViewWeekHead').down('tbody td').next('td'),\n                hourRow = $('kronolithViewWeekBody').down('tr'),\n                dates = this.viewDates(date, view),\n                today = Date.today(),\n                day, dateString, i, hourCol;\n\n            $('kronolithViewWeek')\n                .down('caption span')\n                .update(this.setViewTitle(date, view, data));\n\n            for (i = 0; i < 24; i++) {\n                day = dates[0].clone();\n                hourCol = hourRow.down('td').next('td');\n                while (hourCol) {\n                    hourCol.removeClassName('kronolithToday');\n                    if (day.equals(today)) {\n                        hourCol.addClassName('kronolithToday');\n                    }\n                    hourCol = hourCol.next('td');\n                    day.next().day();\n                }\n                hourRow = hourRow.next('tr');\n            }\n            day = dates[0].clone();\n            for (i = 0; i < 7; i++) {\n                dateString = day.dateString();\n                this.allDays['kronolithAllDay' + dateString] = td.down('div');\n                this.eventsWeek['kronolithEventsWeek' + dateString] = div;\n                div.store('date', dateString)\n                    .writeAttribute('id', 'kronolithEventsWeek' + dateString);\n                th.store('date', dateString)\n                    .down('span').update(day.toString('dddd, d'));\n                td.removeClassName('kronolithToday');\n                this.allDays['kronolithAllDay' + dateString]\n                    .writeAttribute('id', 'kronolithAllDay' + dateString)\n                    .store('date', dateString);\n                if (day.equals(today)) {\n                    td.addClassName('kronolithToday');\n                    this.addTimeMarker('kronolithEventsWeek' + dateString);\n                }\n                new Drop(td.down('div'));\n                div = div.next('div');\n                th = th.next('td');\n                td = td.next('td');\n                day.next().day();\n            }\n            break;\n\n        case 'month':\n            var tbody = $('kronolithViewMonthBody'),\n                dates = this.viewDates(date, view),\n                day = dates[0].clone();\n\n            $('kronolithViewMonth')\n                .down('caption span')\n                .update(this.setViewTitle(date, view, data));\n\n            // Remove old rows. Maybe we should only rebuild the calendars if\n            // necessary.\n            tbody.childElements().each(function(row) {\n                if (row.identify() != 'kronolithRowTemplate') {\n                    row.purge();\n                    row.remove();\n                }\n            });\n\n            // Build new calendar view.\n            this.monthDays = {};\n            while (!day.isAfter(dates[1])) {\n                tbody.insert(this.createWeekRow(day, date.getMonth(), dates).show());\n                day.next().week();\n            }\n            this.equalRowHeights(tbody);\n\n            break;\n\n        case 'year':\n            var month;\n\n            $('kronolithYearDate').update(this.setViewTitle(date, view, data));\n\n            // Build new calendar view.\n            for (month = 0; month < 12; month++) {\n                $('kronolithYear' + month).update(this.createYearMonth(date.getFullYear(), month, 'kronolithYear').show());\n            }\n\n            break;\n\n        case 'agenda':\n        case 'search':\n            // Agenda days are only created on demand, if there are any events\n            // to add.\n            if (view == 'agenda') {\n                var dates = this.viewDates(date, view);\n                $('kronolithAgendaDate')\n                    .update(this.setViewTitle(date, view, data));\n                $('kronolithAgendaNavigation').show();\n                $('kronolithSearchNavigation').hide();\n            } else {\n                $('kronolithAgendaDate')\n                    .update(this.setViewTitle(date, view, data));\n                $('kronolithAgendaNavigation').hide();\n                $('kronolithSearchNavigation').show();\n            }\n\n            // Remove old rows. Maybe we should only rebuild the calendars if\n            // necessary.\n            tbody = $('kronolithViewAgendaBody').childElements().each(function(row) {\n                if (row.identify() != 'kronolithAgendaTemplate' &&\n                    row.identify() != 'kronolithAgendaNoItems') {\n                    row.purge();\n                    row.remove();\n                }\n            });\n\n            break;\n        }\n    },\n\n    /**\n     * Sets the browser title of the calendar views.\n     *\n     * @param Date date    The date to show in the calendar.\n     * @param string view  The view that's displayed.\n     * @param mixed data   Any additional data that might be required.\n     */\n    setViewTitle: function(date, view, data)\n    {\n        switch (view) {\n        case 'day':\n            return this.setTitle(date.toString('D'));\n\n        case 'week':\n            var dates = this.viewDates(date, view);\n            return this.setTitle(dates[0].toString(Kronolith.conf.date_format) + ' - ' + dates[1].toString(Kronolith.conf.date_format));\n\n        case 'month':\n            return this.setTitle(date.toString('MMMM yyyy'));\n\n        case 'year':\n            return this.setTitle(date.toString('yyyy'));\n\n        case 'agenda':\n            var dates = this.viewDates(date, view);\n            return this.setTitle(Kronolith.text.agenda + ' ' + dates[0].toString(Kronolith.conf.date_format) + ' - ' + dates[1].toString(Kronolith.conf.date_format));\n\n        case 'search':\n            return this.setTitle(Kronolith.text.searching.interpolate({ term: data }));\n        }\n    },\n\n    /**\n     * Closes the currently active view.\n     */\n    closeView: function(loc)\n    {\n        $w('Day Week Month Year Tasks Agenda').each(function(a) {\n            a = $('kronolithNav' + a);\n            if (a) {\n                a.removeClassName('on');\n            }\n        });\n        if (this.view && this.view != loc) {\n            $('kronolithView' + this.view.capitalize()).fade({\n                duration: this.effectDur,\n                queue: 'end'\n            });\n            this.view = null;\n        }\n    },\n\n    /**\n     * Creates a single row of day cells for usage in the month and multi-week\n     * views.\n     *\n     * @param Date date        The first day to show in the row.\n     * @param integer month    The current month. Days not from the current\n     *                         month get the kronolithOtherMonth CSS class\n     *                         assigned.\n     * @param array viewDates  Array of Date objects with the start and end\n     *                         dates of the view.\n     *\n     * @return Element  The element rendering a week row.\n     */\n    createWeekRow: function(date, month, viewDates)\n    {\n        var day = date.clone(), today = new Date().dateString(),\n            row, cell, dateString;\n\n        // Create a copy of the row template.\n        row = $('kronolithRowTemplate').clone(true);\n        row.removeAttribute('id');\n\n        // Fill week number and day cells.\n        cell = row.down()\n            .setText(date.getRealWeek())\n            .store('date', date.dateString())\n            .next();\n        while (cell) {\n            dateString = day.dateString();\n            this.monthDays['kronolithMonthDay' + dateString] = cell;\n            cell.id = 'kronolithMonthDay' + dateString;\n            cell.store('date', dateString);\n            cell.removeClassName('kronolithOtherMonth').removeClassName('kronolithToday');\n            if (day.getMonth() != month) {\n                cell.addClassName('kronolithOtherMonth');\n            }\n            if (dateString == today) {\n                cell.addClassName('kronolithToday');\n            }\n            new Drop(cell);\n            cell.store('date', dateString)\n                .down('.kronolithDay')\n                .store('date', dateString)\n                .update(day.getDate());\n\n            cell = cell.next();\n            day.add(1).day();\n        }\n\n        return row;\n    },\n\n    /**\n     * Creates a table row for a single day in the agenda view, if it doesn't\n     * exist yet.\n     *\n     * @param string date    The day to show in the row.\n     *\n     * @return Element  The element rendering a week row.\n     */\n    createAgendaDay: function(date)\n    {\n        // Exit if row exists already.\n        if ($('kronolithAgendaDay' + date)) {\n            return;\n        }\n\n        // Create a copy of the row template.\n        var body = $('kronolithViewAgendaBody'),\n            row = $('kronolithAgendaTemplate').clone(true);\n\n        // Fill week number and day cells.\n        row.store('date', date)\n            .down()\n            .setText(this.parseDate(date).toString('D'))\n            .next()\n            .writeAttribute('id', 'kronolithAgendaDay' + date);\n        row.removeAttribute('id');\n\n        // Insert row.\n        var nextRow;\n        body.childElements().each(function(elm) {\n            if (elm.retrieve('date') > date) {\n                nextRow = elm;\n                throw $break;\n            }\n        });\n        if (nextRow) {\n            nextRow.insert({ before: row.show() });\n        } else {\n            body.insert(row.show());\n        }\n\n        return row;\n    },\n\n    /**\n     * Creates a table for a single month in the year view.\n     *\n     * @param integer year     The year.\n     * @param integer month    The month.\n     * @param string idPrefix  If present, each day will get a DOM ID with this\n     *                         prefix\n     *\n     * @return Element  The element rendering a month table.\n     */\n    createYearMonth: function(year, month, idPrefix)\n    {\n        // Create a copy of the month template.\n        var table = $('kronolithYearTemplate').clone(true),\n            tbody = table.down('tbody');\n        table.removeAttribute('id');\n        tbody.writeAttribute('id', 'kronolithYearTable' + month);\n\n        // Set month name.\n        table.down('span')\n            .store('date', year.toPaddedString(4) + (month + 1).toPaddedString(2) + '01')\n            .update(Date.CultureInfo.monthNames[month]);\n\n        // Build month table.\n        this.buildMinical(tbody, new Date(year, month, 1), null, idPrefix);\n\n        return table;\n    },\n\n    equalRowHeights: function(tbody)\n    {\n        var children = tbody.childElements();\n        children.invoke('setStyle', { height: (100 / (children.size() - 1)) + '%' });\n    },\n\n    /**\n     * Calculates some dimensions for the day and week view.\n     *\n     * @param string storage  Property name where the dimensions are stored.\n     * @param string view     DOM node ID of the view.\n     */\n    calculateRowSizes: function(storage, view)\n    {\n        if (!Object.isUndefined(this[storage])) {\n            return;\n        }\n\n        var td = $(view).down('.kronolithViewBody tr td').next('td'),\n            layout = td.getLayout(),\n            spacing = td.up('table').getStyle('borderSpacing');\n\n        // FIXME: spacing is hardcoded for IE 7 because it doesn't know about\n        // border-spacing, but still uses it. WTF?\n        spacing = spacing ? parseInt($w(spacing)[1], 10) : 2;\n        this[storage] = {};\n        this[storage].height = layout.get('margin-box-height') + spacing;\n        this[storage].spacing = this[storage].height - layout.get('padding-box-height') - layout.get('border-bottom');\n    },\n\n    /**\n     * Adds a horizontal ruler representing the current time to the specified\n     * container.\n     *\n     * @param string|Element  The container of the current day.\n     */\n    addTimeMarker: function(container)\n    {\n        if ($('kronolithTimeMarker')) {\n            $('kronolithTimeMarker').remove();\n            this.timeMarker.stop();\n        }\n        $(container).insert(new Element('div', { id: 'kronolithTimeMarker' }).setStyle({ position: 'absolute' }).hide());\n        this.timeMarker = new PeriodicalExecuter(this.positionTimeMarker.bind(this), 60);\n    },\n\n    /**\n     * Updates the horizontal ruler representing the current time.\n     */\n    positionTimeMarker: function()\n    {\n        var today = Date.today(), now;\n\n        switch (this.view) {\n        case 'day':\n            if (!this.date.equals(today)) {\n                $('kronolithTimeMarker').remove();\n                this.timeMarker.stop();\n                return;\n            }\n            break;\n        case 'week':\n            if ($('kronolithTimeMarker').up().retrieve('date') != today.dateString()) {\n                var newContainer = this.eventsWeek['kronolithEventsWeek' + today.dateString()];\n                $('kronolithTimeMarker').remove();\n                if (newContainer) {\n                    this.addTimeMarker(newContainer);\n                } else {\n                    this.timeMarker.stop();\n                }\n                return;\n            }\n            break;\n        default:\n            $('kronolithTimeMarker').remove();\n            this.timeMarker.stop();\n            return;\n        }\n\n        now = new Date();\n        $('kronolithTimeMarker').setStyle({ top: ((now.getHours() * 60 + now.getMinutes()) * this[this.view + 'Sizes'].height / 60 | 0) + 'px' });\n    },\n\n    /**\n     * Rebuilds the mini calendar.\n     *\n     * @param Date date    The date to show in the calendar.\n     * @param string view  The view that's displayed, determines which days in\n     *                     the mini calendar are highlighted.\n     */\n    updateMinical: function(date, view)\n    {\n        // Update header.\n        $('kronolithMinicalDate')\n            .store('date', date.dateString())\n            .update(date.toString('MMMM yyyy'));\n\n        this.buildMinical($('kronolithMinical').down('tbody'), date, view);\n    },\n\n    /**\n     * Creates a mini calendar suitable for the navigation calendar and the\n     * year view.\n     *\n     * @param Element tbody    The table body to add the days to.\n     * @param Date date        The date to show in the calendar.\n     * @param string view      The view that's displayed, determines which days\n     *                         in the mini calendar are highlighted.\n     * @param string idPrefix  If present, each day will get a DOM ID with this\n     *                         prefix\n     */\n    buildMinical: function(tbody, date, view, idPrefix)\n    {\n        var dates = this.viewDates(date, 'month'),\n            day = dates[0].clone(),\n            date7 = date.clone().add(1).week(),\n            today = Date.today(),\n            week = this.viewDates(this.date, 'week'),\n            dateString, td, tr, i;\n\n        // Remove old calendar rows. Maybe we should only rebuild the minical\n        // if necessary.\n        tbody.childElements().invoke('remove');\n\n        for (i = 0; i < 42; i++) {\n            dateString = day.dateString();\n            // Create calendar row and insert week number.\n            if (day.getDay() == Kronolith.conf.week_start) {\n                tr = new Element('tr');\n                tbody.insert(tr);\n                td = new Element('td', { className: 'kronolithMinicalWeek' })\n                    .store('weekdate', dateString);\n                td.update(day.getRealWeek());\n                tr.insert(td);\n                weekStart = day.clone();\n                weekEnd = day.clone();\n                weekEnd.add(6).days();\n            }\n\n            // Insert day cell.\n            td = new Element('td').store('date', dateString);\n            if (day.getMonth() != date.getMonth()) {\n                td.addClassName('kronolithMinicalEmpty');\n            } else if (!Object.isUndefined(idPrefix)) {\n                td.id = idPrefix + dateString;\n            }\n\n            // Highlight days currently being displayed.\n            if (view &&\n                ((view == 'month' && this.date.between(dates[0], dates[1])) ||\n                 (view == 'week' && day.between(week[0], week[1])) ||\n                 (view == 'day' && day.equals(this.date)) ||\n                 (view == 'agenda' && !day.isBefore(date) && day.isBefore(date7)))) {\n                td.addClassName('kronolithSelected');\n            }\n\n            // Highlight today.\n            if (day.equals(today)) {\n                td.addClassName('kronolithToday');\n            }\n            td.update(day.getDate());\n            tr.insert(td);\n            day.next().day();\n        }\n    },\n\n    /**\n     * Inserts a calendar entry in the sidebar menu.\n     *\n     * @param string type  The calendar type.\n     * @param string id    The calendar id.\n     * @param object cal   The calendar object.\n     * @param Element div  Container DIV where to add the entry (optional).\n     */\n    insertCalendarInList: function(type, id, cal, div)\n    {\n        var noItems, calendar;\n        if (!div) {\n            div = this.getCalendarList(type, cal.owner);\n        }\n        noItems = div.previous();\n        if (noItems &&\n            noItems.tagName == 'DIV' &&\n            noItems.className == 'kronolithDialogInfo') {\n            noItems.hide();\n        }\n        if (type != 'holiday' && type != 'external') {\n            div.insert(new Element('span', { className: 'kronolithCalEdit' })\n                   .setStyle({ backgroundColor: cal.bg, color: cal.fg })\n                   .insert('&#9658;'));\n        }\n        calendar = new Element('div', { className: cal.show ? 'kronolithCalOn' : 'kronolithCalOff' })\n            .store('calendar', id)\n            .store('calendarclass', type)\n            .setStyle({ backgroundColor: cal.bg, color: cal.fg })\n            .insert(cal.name.escapeHTML());\n        this.addShareIcon(cal, calendar);\n        div.insert(calendar);\n    },\n\n    /**\n     * Add the share icon after the calendar name in the calendar list.\n     *\n     * @param object cal       A calendar object from Kronolith.conf.calendars.\n     * @param Element element  The calendar element in the list.\n     */\n    addShareIcon: function(cal, element)\n    {\n        if (cal.owner && cal.perms) {\n            $H(cal.perms).each(function(perm) {\n                if (perm.key != 'type' &&\n                    ((Object.isArray(perm.value) && perm.value.size()) ||\n                     (!Object.isArray(perm.value) && perm.value))) {\n                    element.insert(' ').insert(new Element('img', { src: Kronolith.conf.images.attendees.replace(/fff/, cal.fg.substring(1)), title: Kronolith.text.shared }));\n                    throw $break;\n                }\n            });\n        }\n    },\n\n    /**\n     * Rebuilds the list of calendars.\n     */\n    updateCalendarList: function()\n    {\n        var ext = $H(), extNames = $H(),\n            extContainer = $('kronolithExternalCalendars');\n\n        $H(Kronolith.conf.calendars.internal).each(function(cal) {\n            this.insertCalendarInList('internal', cal.key, cal.value);\n        }, this);\n\n        if (Kronolith.conf.tasks) {\n            $H(Kronolith.conf.calendars.tasklists).each(function(cal) {\n                this.insertCalendarInList('tasklists', cal.key, cal.value);\n            }, this);\n        }\n\n        $H(Kronolith.conf.calendars.external).each(function(cal) {\n            var parts = cal.key.split('/'), api = parts.shift();\n            if (!ext.get(api)) {\n                ext.set(api, $H());\n            }\n            ext.get(api).set(parts.join('/'), cal.value);\n            extNames.set(api, cal.value.api ? cal.value.api : Kronolith.text.external_category);\n        });\n        ext.each(function(api) {\n            extContainer\n                .insert(new Element('h3')\n                        .insert({ bottom: extNames.get(api.key).escapeHTML() }))\n                .insert(new Element('div', { id: 'kronolithExternalCalendar' + api.key, className: 'kronolithCalendars' }));\n            api.value.each(function(cal) {\n                this.insertCalendarInList('external', api.key + '/' + cal.key, cal.value, $('kronolithExternalCalendar' + api.key));\n            }, this);\n        }, this);\n\n        $H(Kronolith.conf.calendars.remote).each(function(cal) {\n            this.insertCalendarInList('remote', cal.key, cal.value);\n        }, this);\n\n        $H(Kronolith.conf.calendars.holiday).each(function(cal) {\n            if (cal.value.show) {\n               this.insertCalendarInList('holiday', cal.key, cal.value);\n            }\n        }, this);\n    },\n\n    /**\n     * Returns the DIV container that holds all calendars of a certain type.\n     *\n     * @param string type  A calendar type\n     *\n     * @return Element  The container of the calendar type.\n     */\n    getCalendarList: function(type, personal)\n    {\n        switch (type) {\n        case 'internal':\n            return personal\n                ? $('kronolithMyCalendars')\n                : $('kronolithSharedCalendars');\n        case 'tasklists':\n            return personal\n                ? $('kronolithMyTasklists')\n                : $('kronolithSharedTasklists');\n        case 'external':\n            return $('kronolithExternalCalendars');\n        case 'remote':\n            return $('kronolithRemoteCalendars');\n        case 'holiday':\n            return $('kronolithHolidayCalendars');\n        }\n    },\n\n    /**\n     * Loads a certain calendar, if the current view is still a calendar view.\n     *\n     * @param string type      The calendar type.\n     * @param string calendar  The calendar id.\n     */\n    loadCalendar: function(type, calendar)\n    {\n        if (Kronolith.conf.calendars[type][calendar].show &&\n            $w('day week month year agenda').include(this.view)) {\n            var dates = this.viewDates(this.date, this.view);\n            this.deleteCache([type, calendar]);\n            this.loadEvents(dates[0], dates[1], this.view, [[type, calendar]]);\n        }\n    },\n\n    /**\n     * Toggles a calendars visibility.\n     *\n     * @param string type      The calendar type.\n     * @param string calendar  The calendar id.\n     */\n    toggleCalendar: function(type, calendar)\n    {\n        var elt = $('kronolithMenuCalendars').select('div').find(function(div) {\n            return div.retrieve('calendarclass') == type &&\n            div.retrieve('calendar') == calendar;\n        });\n\n        Kronolith.conf.calendars[type][calendar].show = !Kronolith.conf.calendars[type][calendar].show;\n        elt.toggleClassName('kronolithCalOn');\n        elt.toggleClassName('kronolithCalOff');\n\n        switch (this.view) {\n        case 'month':\n        case 'agenda':\n            if (Object.isUndefined(this.ecache.get(type)) ||\n                Object.isUndefined(this.ecache.get(type).get(calendar))) {\n                this.loadCalendar(type, calendar);\n            } else {\n                var allEvents = this.kronolithBody.select('div').findAll(function(el) {\n                    return el.retrieve('calendar') == type + '|' + calendar;\n                });\n                if (this.view == 'month' && Kronolith.conf.max_events) {\n                    var dates = this.viewDates(this.date, this.view);\n                    if (elt.hasClassName('kronolithCalOff')) {\n                        var day, more, events, calendars = [];\n                        $H(Kronolith.conf.calendars).each(function(type) {\n                            $H(type.value).each(function(cal) {\n                                if (cal.value.show) {\n                                    calendars.push(type.key + '|' + cal.key);\n                                }\n                            });\n                        });\n                        allEvents.each(function(el) {\n                            if (el.retrieve('calendar').startsWith('holiday|')) {\n                                this.holidays = this.holidays.without(el.retrieve('eventid'));\n                            }\n                            el.remove();\n                        }, this);\n                        for (var date = dates[0]; !date.isAfter(dates[1]); date.add(1).days()) {\n                            day = this.monthDays['kronolithMonthDay' + date.dateString()];\n                            more = day.select('.kronolithMore');\n                            events = day.select('.kronolithEvent');\n                            if (more.size() &&\n                                events.size() < Kronolith.conf.max_events) {\n                                more[0].purge();\n                                more[0].remove();\n                                events.invoke('remove');\n                                calendars.each(function(calendar) {\n                                    this.insertEvents([date, date], 'month', calendar);\n                                }, this);\n                            }\n                        }\n                    } else {\n                        this.insertEvents(dates, 'month', type + '|' + calendar);\n                    }\n                } else {\n                    allEvents.invoke('toggle');\n                }\n            }\n            break;\n\n        case 'year':\n        case 'week':\n        case 'day':\n            if (Object.isUndefined(this.ecache.get(type)) ||\n                Object.isUndefined(this.ecache.get(type).get(calendar))) {\n                this.loadCalendar(type, calendar);\n            } else {\n                this.insertEvents(this.viewDates(this.date, this.view), this.view);\n            }\n            break;\n\n        case 'tasks':\n            if (type != 'tasklists') {\n                break;\n            }\n            var tasklist = calendar.substr(6);\n            if (elt.hasClassName('kronolithCalOff')) {\n                $('kronolithViewTasksBody').select('tr').findAll(function(el) {\n                    return el.retrieve('tasklist') == tasklist;\n                }).invoke('remove');\n            } else {\n                this.loadTasks(this.tasktype, [ tasklist ]);\n            }\n            break;\n        }\n\n        if ($w('tasklists remote external holiday').include(type)) {\n            calendar = type + '_' + calendar;\n        }\n        this.doAction('saveCalPref', { toggle_calendar: calendar });\n    },\n\n    /**\n     * Propagates a SELECT drop down list with the editable calendars.\n     *\n     * @param string id  The id of the SELECT element.\n     */\n    updateCalendarDropDown: function(id)\n    {\n        $(id).update();\n        ['internal', 'remote'].each(function(type) {\n            $H(Kronolith.conf.calendars[type]).each(function(cal) {\n                if (cal.value.edit) {\n                    $(id).insert(new Element('option', { value: type + '|' + cal.key })\n                                 .setStyle({ backgroundColor: cal.value.bg, color: cal.value.fg })\n                                 .update(cal.value.name.escapeHTML()));\n                }\n            });\n        });\n    },\n\n    /**\n     * Opens a tab in a form.\n     *\n     * @param Element  The A element of a tab.\n     */\n    openTab: function(elt)\n    {\n        var dialog = elt.up('form'), tab = $(elt.id.replace(/Link/, 'Tab')),\n            field;\n        dialog.select('.kronolithTabsOption').invoke('hide');\n        dialog.select('.tabset li').invoke('removeClassName', 'activeTab');\n        tab.show();\n        elt.up().addClassName('activeTab');\n        if (elt.id == 'kronolithEventLinkMap') {\n            if (!this.mapInitialized) {\n                this.initializeMap();\n            }\n        }\n        field = tab.down('textarea');\n        if (!field) {\n            field = tab.down('input');\n        }\n        if (field) {\n            try {\n                field.focus();\n            } catch (e) {}\n        }\n    },\n\n    /**\n     * Sets the load signature and show the loading spinner.\n     *\n     * @param string resource   The loading resource.\n     * @param string signatrue  The signature for this request.\n     */\n    startLoading: function(resource, signature)\n    {\n        this.eventsLoading[resource] = signature;\n        this.loading++;\n        $('kronolithLoading').show();\n    },\n\n    /**\n     */\n    loadEvents: function(firstDay, lastDay, view, calendars)\n    {\n        var loading = false;\n\n        if (typeof calendars == 'undefined') {\n            calendars = [];\n            $H(Kronolith.conf.calendars).each(function(type) {\n                $H(type.value).each(function(cal) {\n                    if (cal.value.show) {\n                        calendars.push([type.key, cal.key]);\n                    }\n                });\n            });\n        }\n\n        calendars.each(function(cal) {\n            var startDay = firstDay.clone(), endDay = lastDay.clone(),\n                cals = this.ecache.get(cal[0]);\n\n            if (typeof cals != 'undefined' &&\n                typeof cals.get(cal[1]) != 'undefined') {\n                cals = cals.get(cal[1]);\n                while (!Object.isUndefined(cals.get(startDay.dateString())) &&\n                       startDay.isBefore(endDay)) {\n                    if (view != 'year') {\n                        this.insertEvents([startDay, startDay], view, cal.join('|'));\n                    }\n                    startDay.add(1).day();\n                }\n                while (!Object.isUndefined(cals.get(endDay.dateString())) &&\n                       (!startDay.isAfter(endDay))) {\n                    if (view != 'year') {\n                        this.insertEvents([endDay, endDay], view, cal.join('|'));\n                    }\n                    endDay.add(-1).day();\n                }\n                if (startDay.compareTo(endDay) > 0) {\n                    return;\n                }\n            }\n            var start = startDay.dateString(), end = endDay.dateString(),\n                calendar = cal.join('|');\n            loading = true;\n            this.startLoading(calendar, start + end);\n            this.storeCache($H(), calendar, null, true);\n            this.doAction('listEvents',\n                          {\n                              start: start,\n                              end: end,\n                              cal: calendar,\n                              sig: start + end,\n                              view: view\n                          },\n                          function(r) {\n                              this.loadEventsCallback(r, true);\n                          }.bind(this));\n        }, this);\n\n        if (!loading && view == 'year') {\n            this.insertEvents([firstDay, lastDay], 'year');\n        }\n    },\n\n    /**\n     * Callback method for inserting events in the current view.\n     *\n     * @param object r             The ajax response object.\n     * @param boolean createCache  Whether to create a cache list entry for the\n     *                             response, if none exists yet. Useful for\n     *                             (not) adding individual events to the cache\n     *                             if it doesn't match any cached views.\n     */\n    loadEventsCallback: function(r, createCache)\n    {\n        // Hide spinner.\n        this.loading--;\n        if (!this.loading) {\n            $('kronolithLoading').hide();\n        }\n\n        var start = this.parseDate(r.response.sig.substr(0, 8)),\n            end = this.parseDate(r.response.sig.substr(8, 8)),\n            dates = [start, end],\n            currentDates;\n\n        this.storeCache(r.response.events || {}, r.response.cal, dates, createCache);\n\n        // Check if this is the still the result of the most current request.\n        if (r.response.sig != this.eventsLoading[r.response.cal]) {\n            return;\n        }\n        delete this.eventsLoading[r.response.cal];\n\n        // Check if the calendar is still visible.\n        var calendar = r.response.cal.split('|');\n        if (!Kronolith.conf.calendars[calendar[0]][calendar[1]].show) {\n            return;\n        }\n\n        // Check if the result is still for the current view.\n        currentDates = this.viewDates(this.date, this.view);\n        if (r.response.view != this.view ||\n            !start.between(currentDates[0], currentDates[1])) {\n\n            return;\n        }\n\n        if (this.view == 'day' ||\n            this.view == 'week' ||\n            this.view == 'month' ||\n            this.view == 'agenda' ||\n            (this.view == 'year' && !$H(this.eventsLoading).size())) {\n            this.insertEvents(dates, this.view, r.response.cal);\n        }\n    },\n\n    /**\n     * Reads events from the cache and inserts them into the view.\n     *\n     * If inserting events into day and week views, the calendar parameter is\n     * ignored, and events from all visible calendars are inserted instead.\n     * This is necessary because the complete view has to be re-rendered if\n     * events are not in chronological order.\n     * The year view is specially handled too because there are no individual\n     * events, only a summary of all events per day.\n     *\n     * @param Array dates      Start and end of dates to process.\n     * @param string view      The view to update.\n     * @param string calendar  The calendar to update.\n     */\n    insertEvents: function(dates, view, calendar)\n    {\n        switch (view) {\n        case 'day':\n        case 'week':\n            // The day and week views require the view to be completely\n            // loaded, to correctly calculate the dimensions.\n            if (this.viewLoading.size() || this.view != view) {\n                this.insertEvents.bind(this, [dates[0].clone(), dates[1].clone()], view, calendar).defer();\n                return;\n            }\n            break;\n        }\n\n        var day = dates[0].clone(),\n                  viewDates = this.viewDates(this.date, this.view),\n                  date, more, title, busy, events, monthDay;\n        while (!day.isAfter(dates[1])) {\n            // Skip if somehow events slipped in though the view is gone.\n            if (!day.between(viewDates[0], viewDates[1])) {\n                if (window.console) {\n                    window.console.trace();\n                }\n                day.next().day();\n                continue;\n            }\n\n            date = day.dateString();\n            switch (view) {\n            case 'day':\n            case 'week':\n                this.dayEvents = [];\n                this.dayGroups = [];\n                this.allDayEvents = [];\n                if (view == 'day') {\n                    $$('.kronolithEvent').invoke('remove');\n                } else {\n                    this.eventsWeek['kronolithEventsWeek' + date]\n                        .select('.kronolithEvent')\n                        .invoke('remove');\n                    this.allDays['kronolithAllDay' + date]\n                        .childElements()\n                        .invoke('remove');\n                }\n                break;\n\n            case 'month':\n                monthDay = this.monthDays['kronolithMonthDay' + date];\n                monthDay.select('div')\n                    .findAll(function(el) { return el.retrieve('calendar') == calendar; })\n                    .invoke('remove');\n                break;\n\n            case 'year':\n                title = '';\n                busy = false;\n            }\n\n            if (view == 'month' || view == 'agenda') {\n                events = this.getCacheForDate(date, calendar);\n            } else {\n                events = this.getCacheForDate(date);\n            }\n            events.sortBy(this.sortEvents).each(function(event) {\n                switch (view) {\n                case 'month':\n                case 'agenda':\n                    if (calendar.startsWith('holiday|')) {\n                        if (this.holidays.include(event.key)) {\n                            return;\n                        }\n                        this.holidays.push(event.key);\n                    }\n                    if (view == 'month' && Kronolith.conf.max_events) {\n                        more = monthDay.down('.kronolithMore');\n                        if (more) {\n                            more.purge();\n                            more.remove();\n                        }\n                    }\n                    if (view == 'month' && Kronolith.conf.max_events) {\n                        var events = monthDay.select('.kronolithEvent');\n                        if (events.size() >= Kronolith.conf.max_events) {\n                            if (date == (new Date().dateString())) {\n                                // This is today.\n                                if (event.value.al || event.value.end.isBefore()) {\n                                    // No room for all-day or finished events.\n                                    this.insertMore(date);\n                                    return;\n                                }\n                                var remove, max;\n                                // Find an event that is earlier than now or\n                                // later then the current event.\n                                events.each(function(elm) {\n                                    var calendar = elm.retrieve('calendar').split('|'),\n                                        event = this.ecache.get(calendar[0]).get(calendar[1]).get(date).get(elm.retrieve('eventid'));\n                                    if (event.start.isBefore()) {\n                                        remove = elm;\n                                        throw $break;\n                                    }\n                                    if (!max || event.start.isAfter(max)) {\n                                        max = event.start;\n                                        remove = elm;\n                                    }\n                                }, this);\n                                if (remove) {\n                                    remove.purge();\n                                    remove.remove();\n                                } else {\n                                    this.insertMore(date);\n                                    return;\n                                }\n                            } else {\n                                // Not today.\n                                var allDays = events.findAll(function(elm) {\n                                    var calendar = elm.retrieve('calendar').split('|');\n                                    return this.ecache.get(calendar[0]).get(calendar[1]).get(date).get(elm.retrieve('eventid')).al;\n                                }.bind(this));\n                                if (event.value.al) {\n                                    // We want one all-day event.\n                                    if (allDays.size()) {\n                                        // There already is an all-day event.\n                                        if (event.value.x == Kronolith.conf.status.confirmed ||\n                                            event.value.x == Kronolith.conf.status.tentative) {\n                                            // But is there a less important\n                                            // one?\n                                            var status = [Kronolith.conf.status.free, Kronolith.conf.status.cancelled];\n                                            if (event.value.x == Kronolith.conf.status.confirmed) {\n                                                status.push(Kronolith.conf.status.tentative);\n                                            }\n                                            var free = allDays.detect(function(elm) {\n                                                var calendar = elm.retrieve('calendar').split('|');\n                                                return status.include(this.ecache.get(calendar[0]).get(calendar[1]).get(date).get(elm.retrieve('eventid')).x);\n                                            }.bind(this));\n                                            if (!free) {\n                                                this.insertMore(date);\n                                                return;\n                                            }\n                                            free.purge();\n                                            free.remove();\n                                        } else {\n                                            // No.\n                                            this.insertMore(date);\n                                            return;\n                                        }\n                                    } else {\n                                        // Remove the last event to make room\n                                        // for this one.\n                                        var elm = events.pop();\n                                        elm.purge();\n                                        elm.remove();\n                                    }\n                                } else {\n                                    if (allDays.size() > 1) {\n                                        // We don't want more than one all-day\n                                        // event.\n                                        var elm = allDays.pop();\n                                        elm.purge();\n                                        elm.remove();\n                                    } else {\n                                        // This day is full.\n                                        this.insertMore(date);\n                                        return;\n                                    }\n                                }\n                            }\n                            this.insertMore(date);\n                        }\n                    }\n                    break;\n\n                case 'year':\n                    if (event.value.al) {\n                        title += Kronolith.text.allday;\n                    } else {\n                        title += event.value.start.toString('t') + '-' + event.value.end.toString('t');\n                    }\n                    if (event.value.t) {\n                        title += ': ' + event.value.t.escapeHTML();\n                    }\n                    if (event.value.x == Kronolith.conf.status.tentative ||\n                        event.value.x == Kronolith.conf.status.confirmed) {\n                        busy = true;\n                    }\n                    title += '<br />';\n                    return;\n                }\n                this.insertEvent(event, date, view);\n            }, this);\n\n            switch (view) {\n            case 'agenda':\n                if ($('kronolithViewAgendaBody').select('tr').length > 2) {\n                    $('kronolithAgendaNoItems').hide();\n                } else {\n                    $('kronolithAgendaNoItems').show();\n                }\n                break;\n\n            case 'year':\n                var td = $('kronolithYear' + date);\n                if (td.className == 'kronolithMinicalEmpty') {\n                    continue;\n                }\n                if (td.hasClassName('kronolithToday')) {\n                    td.className = 'kronolithToday';\n                } else {\n                    td.className = '';\n                }\n                if (td.retrieve('nicetitle')) {\n                    Horde_ToolTips.detach(td);\n                    td.store('nicetitle');\n                }\n                if (title) {\n                    td.addClassName('kronolithHasEvents');\n                    td.store('nicetitle', title);\n                    td.observe('mouseover', Horde_ToolTips.onMouseover.bindAsEventListener(Horde_ToolTips));\n                    td.observe('mouseout', Horde_ToolTips.out.bind(Horde_ToolTips));\n                    if (busy) {\n                        td.addClassName('kronolithIsBusy');\n                    }\n                }\n            }\n\n            day.next().day();\n        }\n        // Workaround Firebug bug.\n        Prototype.emptyFunction();\n    },\n\n    /**\n     * Creates the DOM node for an event bubble and inserts it into the view.\n     *\n     * @param object event  A Hash member with the event to insert.\n     * @param string date   The day to update.\n     * @param string view   The view to update.\n     */\n    insertEvent: function(event, date, view)\n    {\n        var calendar = event.value.calendar.split('|');\n        event.value.nodeId = ('kronolithEvent' + view + event.value.calendar + date + event.key).replace(new RegExp('[^a-zA-Z0-9]', 'g'), '');\n\n        var _createElement = function(event) {\n            var className ='kronolithEvent';\n            switch (event.value.x) {\n            case 3:\n                className += ' kronolithEventCancelled';\n                break;\n            case 1:\n            case 4:\n                className += ' kronolithEventTentative';\n                break;\n            }\n            var el = new Element('div', { id: event.value.nodeId, className: className })\n                .store('calendar', event.value.calendar)\n                .store('eventid', event.key);\n            if (!Object.isUndefined(event.value.aj)) {\n                el.store('ajax', event.value.aj);\n            }\n            return el;\n        };\n\n        switch (view) {\n        case 'day':\n        case 'week':\n            var storage = view + 'Sizes',\n                div = _createElement(event),\n                margin = view == 'day' ? 1 : 3,\n                style = { backgroundColor: Kronolith.conf.calendars[calendar[0]][calendar[1]].bg,\n                          color: Kronolith.conf.calendars[calendar[0]][calendar[1]].fg };\n\n            div.writeAttribute('title', event.value.t);\n\n            if (event.value.al) {\n                if (view == 'day') {\n                    $('kronolithViewDay').down('.kronolithAllDayContainer').insert(div.setStyle(style));\n                } else {\n                    var allDay = this.allDays['kronolithAllDay' + date],\n                        existing = allDay.childElements(),\n                        weekHead = $('kronolithViewWeekHead');\n                    if (existing.size() == 3) {\n                        if (existing[2].className != 'kronolithMore') {\n                            existing[2].purge();\n                            existing[2].remove();\n                            allDay.insert({ bottom: new Element('span', { className: 'kronolithMore' }).store('date', date).insert(Kronolith.text.more) });\n                        }\n                    } else {\n                        allDay.insert(div.setStyle(style));\n                        if (event.value.pe) {\n                            div.addClassName('kronolithEditable');\n                            var layout = div.getLayout(),\n                                minLeft = weekHead.down('.kronolithFirstCol').getWidth() + this[storage].spacing + (parseInt(div.getStyle('marginLeft'), 10) || 0),\n                                minTop = weekHead.down('thead').getHeight() + this[storage].spacing + (parseInt(div.getStyle('marginTop'), 10) || 0),\n                                maxLeft = weekHead.getWidth() - layout.get('margin-box-width'),\n                                maxTop = weekHead.down('thead').getHeight() + weekHead.down('.kronolithAllDay').getHeight(),\n                                opts = {\n                                    threshold: 5,\n                                    parentElement: function() {\n                                        return $('kronolithViewWeek').down('.kronolithViewHead');\n                                    },\n                                    snap: function(x, y) {\n                                        return [Math.min(Math.max(x, minLeft), maxLeft),\n                                                Math.min(Math.max(y, minTop), maxTop - div.getHeight())];\n                                    }\n                                };\n                            new Drag(event.value.nodeId, opts);\n                        }\n                    }\n                }\n                break;\n            }\n\n            var midnight = this.parseDate(date),\n                resizable = event.value.pe && (Object.isUndefined(event.value.vl) || event.value.vl),\n                innerDiv = new Element('div', { className: 'kronolithEventInfo' }),\n                parentElement = view == 'day' ? $('kronolithEventsDay') : this.eventsWeek['kronolithEventsWeek' + date],\n                elapsed = (event.value.start.getHours() - midnight.getHours()) * 60 + (event.value.start.getMinutes() - midnight.getMinutes()),\n                minHeight = 0,\n                draggerTop, draggerBottom;\n            if (event.value.fi) {\n                div.addClassName('kronolithFirst');\n                if (resizable) {\n                    draggerTop = new Element('div', { id: event.value.nodeId + 'top', className: 'kronolithDragger kronolithDraggerTop' }).setStyle(style);\n                }\n            } else {\n                innerDiv.setStyle({ top: 0 });\n            }\n            if (event.value.la) {\n                div.addClassName('kronolithLast');\n                if (resizable) {\n                    draggerBottom = new Element('div', { id: event.value.nodeId + 'bottom', className: 'kronolithDragger kronolithDraggerBottom' }).setStyle(style);\n                }\n            } else {\n                innerDiv.setStyle({ bottom: 0 });\n            }\n\n            div.setStyle({\n                top: (elapsed * this[storage].height / 60 | 0) + 'px',\n                width: 100 - margin + '%'\n            })\n                .insert(innerDiv.setStyle(style));\n            if (draggerTop) {\n                div.insert(draggerTop);\n            }\n            if (draggerBottom) {\n                div.insert(draggerBottom);\n            }\n            parentElement.insert(div);\n            if (draggerTop) {\n                minHeight += draggerTop.getHeight();\n            }\n            if (draggerBottom) {\n                minHeight += draggerBottom.getHeight();\n            }\n            if (!minHeight) {\n                minHeight = parseInt(innerDiv.getStyle('lineHeight'), 10)\n                    + (parseInt(innerDiv.getStyle('paddingTop'), 10) || 0)\n                    + (parseInt(innerDiv.getStyle('paddingBottom'), 10) || 0);\n            }\n            div.setStyle({ height: Math.max(Math.round(event.value.start.getElapsed(event.value.end) / 60000) * this[storage].height / 60 - this[storage].spacing | 0, minHeight) + 'px' });\n\n            if (event.value.pe) {\n                div.addClassName('kronolithEditable');\n                div.store('drags', []);\n                // Number of pixels that cover 10 minutes.\n                var step = this[storage].height / 6,\n                    stepX, minLeft, maxLeft, maxTop,\n                    minBottom, maxBottom, dragBottomHeight;\n                if (draggerBottom) {\n                    // Height of bottom dragger\n                    dragBottomHeight = draggerBottom.getHeight();\n                }\n                if (draggerTop) {\n                    // Bottom-most position (maximum y) of top dragger\n                    maxTop = div.offsetTop\n                        - draggerTop.getHeight()\n                        - parseInt(innerDiv.getStyle('lineHeight'), 10);\n                    if (draggerBottom) {\n                        maxTop += draggerBottom.offsetTop;\n                    }\n                }\n                if (draggerBottom) {\n                    // Top-most position (minimum y) of bottom dragger (upper\n                    // edge)\n                    minBottom = div.offsetTop\n                        + parseInt(innerDiv.getStyle('lineHeight'), 10);\n                    // Bottom-most position (maximum y) of bottom dragger\n                    // (upper edge)\n                    maxBottom = 24 * this[storage].height\n                        + dragBottomHeight;\n                    if (draggerTop) {\n                        minBottom += draggerTop.getHeight();\n                    }\n                }\n                    // Height of the whole event div\n                var divHeight = div.getHeight(),\n                    // Maximum height of the whole event div\n                    maxDiv = 24 * this[storage].height - divHeight,\n                    // Whether the top dragger is dragged, vs. the bottom\n                    // dragger\n                    opts = {\n                        threshold: 5,\n                        constraint: 'vertical',\n                        scroll: this.kronolithBody,\n                        nodrop: true,\n                        parentElement: function() {\n                            return parentElement;\n                        }\n                    };\n\n                if (draggerTop) {\n                    opts.snap = function(x, y) {\n                        y = Math.max(0, step * (Math.min(maxTop, y - this.scrollTop) / step | 0));\n                        return [0, y];\n                    }.bind(this);\n                    var d = new Drag(event.value.nodeId + 'top', opts);\n                    Object.extend(d, {\n                        event: event,\n                        innerDiv: innerDiv,\n                        midnight: midnight\n                    });\n                    div.retrieve('drags').push(d);\n                }\n\n                if (draggerBottom) {\n                    opts.snap = function(x, y) {\n                        y = Math.min(maxBottom + dragBottomHeight + KronolithCore[storage].spacing, step * ((Math.max(minBottom, y - this.scrollTop) + dragBottomHeight + KronolithCore[storage].spacing) / step | 0)) - dragBottomHeight - KronolithCore[storage].spacing;\n                        return [0, y];\n                    }.bind(this);\n                    var d = new Drag(event.value.nodeId + 'bottom', opts);\n                    Object.extend(d, {\n                        event: event,\n                        innerDiv: innerDiv,\n                        midnight: midnight\n                    });\n                    div.retrieve('drags').push(d);\n                }\n\n                if (view == 'week') {\n                    var dates = this.viewDates(midnight, view);\n                    minLeft = this.eventsWeek['kronolithEventsWeek' + dates[0].dateString()].offsetLeft - this.eventsWeek['kronolithEventsWeek' + date].offsetLeft;\n                    maxLeft = this.eventsWeek['kronolithEventsWeek' + dates[1].dateString()].offsetLeft - this.eventsWeek['kronolithEventsWeek' + date].offsetLeft;\n                    stepX = (maxLeft - minLeft) / 6;\n                }\n                var d = new Drag(div, {\n                    threshold: 5,\n                    nodrop: true,\n                    parentElement: function() { return parentElement; },\n                    snap: function(x, y) {\n                        x = (view == 'week')\n                            ? Math.max(minLeft, stepX * ((Math.min(maxLeft, x - (x < 0 ? stepX : 0)) + stepX / 2) / stepX | 0))\n                            : 0;\n                        y = Math.max(0, step * (Math.min(maxDiv, y - this.scrollTop) / step | 0));\n                        return [x, y];\n                    }.bind(this)\n                });\n                Object.extend(d, {\n                    divHeight: divHeight,\n                    startTop: div.offsetTop,\n                    event: event,\n                    midnight: midnight,\n                    stepX: stepX\n                });\n                div.retrieve('drags').push(d);\n            }\n\n            var\n                // The current column that we're probing for available space.\n                column = 1,\n                // The number of columns in the current conflict group.\n                columns,\n                // The column width in the current conflict group.\n                width,\n                // The first event that conflict with the current event.\n                conflict = false,\n                // The conflict group where this event should go.\n                pos = this.dayGroups.length,\n                // The event below the current event fits.\n                placeFound = false,\n                // The minimum (virtual) duration of each event, defined by the\n                // minimum height of an event DIV.\n                minMinutes = (minHeight + this[storage].spacing) * 60 / this[storage].height;\n\n            // this.dayEvents contains all events of the current day.\n            // this.dayGroups contains conflict groups, i.e. all events that\n            // conflict with each other and share a set of columns.\n            //\n            // Go through all events that have been added to this day already.\n            this.dayEvents.each(function(ev) {\n                // Due to the minimum height of an event DIV, events might\n                // visually overlap, even if they physically don't.\n                var minEnd = ev.start.clone().add(minMinutes).minutes(),\n                    end = ev.end.isAfter(minEnd) ? ev.end : minEnd;\n                // If it doesn't conflict with the current event, rember it\n                // as a possible event below that we can put the current event\n                // and go ahead.\n                if (!end.isAfter(event.value.start)) {\n                    placeFound = ev;\n                    return;\n                }\n\n                if (!conflict) {\n                    // This is the first conflicting event.\n                    conflict = ev;\n                    for (var i = 0; i < this.dayGroups.length; i++) {\n                        // Find the conflict group of the conflicting event.\n                        if (this.dayGroups[i].indexOf(conflict) != -1) {\n                            // If our possible candidate \"above\" is a member of\n                            // this group, it's no longer a candidate.\n                            if (this.dayGroups[i].indexOf(placeFound) == -1) {\n                                placeFound = false;\n                            }\n                            break;\n                        }\n                    }\n                }\n                // We didn't find a place, put the event a column further right.\n                if (!placeFound) {\n                    column++;\n                }\n            }, this);\n            event.value.column = column;\n\n            if (conflict) {\n                // We had a conflict, find the matching conflict group and add\n                // the current event there.\n                for (var i = 0; i < this.dayGroups.length; i++) {\n                    if (this.dayGroups[i].indexOf(conflict) != -1) {\n                        pos = i;\n                        break;\n                    }\n                }\n                // See if the current event had to add yet another column.\n                columns = Math.max(conflict.columns, column);\n            } else {\n                columns = column;\n            }\n            if (Object.isUndefined(this.dayGroups[pos])) {\n                this.dayGroups[pos] = [];\n            }\n            this.dayGroups[pos].push(event.value);\n            // Update the widths of all events in a conflict group.\n            width = 100 / columns;\n            this.dayGroups[pos].each(function(ev) {\n                ev.columns = columns;\n                $(ev.nodeId).setStyle({ width: width - margin + '%', left: (width * (ev.column - 1)) + '%' });\n            });\n            this.dayEvents.push(event.value);\n\n            div = innerDiv;\n            break;\n\n        case 'month':\n            var monthDay = this.monthDays['kronolithMonthDay' + date],\n                div = _createElement(event)\n                .setStyle({ backgroundColor: Kronolith.conf.calendars[calendar[0]][calendar[1]].bg,\n                            color: Kronolith.conf.calendars[calendar[0]][calendar[1]].fg });\n            div.writeAttribute('title', event.value.t);\n            monthDay.insert(div);\n            if (event.value.pe) {\n                div.setStyle({ cursor: 'move' });\n                new Drag(event.value.nodeId, { threshold: 5, parentElement: function() { return $('kronolithViewMonthContainer'); }, snapToParent: true });\n            }\n            if (Kronolith.conf.max_events) {\n                var more = monthDay.down('.kronolithMore');\n                if (more) {\n                    monthDay.insert({ bottom: more.remove() });\n                }\n            }\n            break;\n\n        case 'agenda':\n            var div = _createElement(event)\n                .setStyle({ backgroundColor: Kronolith.conf.calendars[calendar[0]][calendar[1]].bg,\n                            color: Kronolith.conf.calendars[calendar[0]][calendar[1]].fg });\n            this.createAgendaDay(date);\n            $('kronolithAgendaDay' + date).insert(div);\n            break;\n        }\n\n        this.setEventText(div, event.value,\n                          { time: view == 'agenda' || Kronolith.conf.show_time })\n            .observe('mouseover', div.addClassName.curry('kronolithSelected'))\n            .observe('mouseout', div.removeClassName.curry('kronolithSelected'));\n    },\n\n    /**\n     * Re-renders the necessary parts of the current view, if any event changes\n     * in those parts require re-rendering.\n     *\n     * @param Array dates  The date strings of days to re-render.\n     */\n    reRender: function(dates)\n    {\n        switch (this.view) {\n        case 'week':\n        case 'day':\n            dates.each(function(date) {\n                date = this.parseDate(date);\n                this.insertEvents([ date, date ], this.view);\n            }, this);\n            break;\n        case 'month':\n            dates.each(function(date) {\n                var day = this.monthDays['kronolithMonthDay' + date];\n                day.select('.kronolithEvent').each(function(event) {\n                    if (event.retrieve('calendar').startsWith('holiday')) {\n                        delete this.holidays[event.retrieve('eventid')];\n                    }\n                    event.remove();\n                });\n                day.select('.kronolithMore').invoke('remove');\n                date = this.parseDate(date);\n                this.loadEvents(date, date, 'month');\n            }, this);\n            break;\n        }\n    },\n\n    /**\n     * Returns all dates of the current view that contain (recurrences) of a\n     * certain event.\n     *\n     * @param String cal      A calendar string.\n     * @param String eventid  An event id.\n     *\n     * @return Array  A list of date strings that contain a recurrence of the\n     *                event.\n     */\n    findEventDays: function(cal, eventid)\n    {\n        cal = cal.split('|');\n        var cache = this.ecache.get(cal[0]).get(cal[1]),\n            dates = this.viewDates(this.date, this.view),\n            day = dates[0], days = [], dateString;\n        while (!day.isAfter(dates[1])) {\n            dateString = day.dateString();\n            if (cache.get(dateString).get(eventid)) {\n                days.push(dateString);\n            }\n            day.add(1).days();\n        }\n        return days;\n    },\n\n    /**\n     * Adds a \"more...\" button to the month view cell that links to the days,\n     * or moves it to the buttom.\n     *\n     * @param string date  The date string of the day cell.\n     */\n    insertMore: function(date)\n    {\n        var monthDay = this.monthDays['kronolithMonthDay' + date],\n            more = monthDay.down('.kronolithMore');\n        if (more) {\n            monthDay.insert({ bottom: more.remove() });\n        } else {\n            monthDay.insert({ bottom: new Element('span', { className: 'kronolithMore' }).store('date', date).insert(Kronolith.text.more) });\n        }\n    },\n\n    setEventText: function(div, event, opts)\n    {\n        var calendar = event.calendar.split('|'),\n            span = new Element('span');\n        opts = Object.extend({ time: false }, opts || {}),\n\n        div.update();\n        if (event.ic) {\n            div.insert(new Element('img', { src: event.ic, className: 'kronolithEventIcon' }));\n        }\n        if (opts.time && !event.al) {\n            div.insert(event.start.toString(Kronolith.conf.time_format));\n            if (!event.start.equals(event.end)) {\n                div.insert('-' + event.end.toString(Kronolith.conf.time_format));\n            }\n            div.insert(': ');\n        }\n        div.insert(event.t.escapeHTML());\n        div.insert(span);\n        if (event.a) {\n            span.insert(' ')\n                .insert(new Element('img', { src: Kronolith.conf.images.alarm.replace(/fff/, Kronolith.conf.calendars[calendar[0]][calendar[1]].fg.substr(1)), title: Kronolith.text.alarm + ' ' + event.a }));\n        }\n        if (event.r) {\n            span.insert(' ')\n                .insert(new Element('img', { src: Kronolith.conf.images.recur.replace(/fff/, Kronolith.conf.calendars[calendar[0]][calendar[1]].fg.substr(1)), title: Kronolith.text.recur[event.r] }));\n        } else if (event.bid) {\n            div.store('bid', event.bid);\n            span.insert(' ')\n                .insert(new Element('img', { src: Kronolith.conf.images.exception.replace(/fff/, Kronolith.conf.calendars[calendar[0]][calendar[1]].fg.substr(1)), title: Kronolith.text.recur.exception }));\n        }\n        return div;\n    },\n\n    /**\n     * Finally removes events from the DOM and the cache.\n     *\n     * @param string calendar  A calendar name.\n     * @param string event     An event id. If empty, all events from the\n     *                         calendar are deleted.\n     */\n    removeEvent: function(calendar, event)\n    {\n        this.deleteCache(calendar, event);\n        this.kronolithBody.select('div.kronolithEvent').findAll(function(el) {\n            return el.retrieve('calendar') == calendar &&\n                (!event || el.retrieve('eventid') == event);\n        }).invoke('remove');\n    },\n\n    removeException: function(calendar, uid)\n    {\n        this.kronolithBody.select('div.kronolithEvent').findAll(function(el) {\n            if (el.retrieve('calendar') == calendar && el.retrieve('bid') == uid) {\n                this.removeEvent(calendar, el.retrieve('eventid'));\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Calculates the event's start and end dates based on some drag and drop\n     * information.\n     */\n    calculateEventDates: function(event, storage, step, offset, height, start, end)\n    {\n        if (!Object.isUndefined(start)) {\n            event.start = start;\n            event.end = end;\n        }\n        event.start.set({\n            hour: offset / this[storage].height | 0,\n            minute: Math.round(offset % this[storage].height / step * 10)\n        });\n        var hour = (offset + height + this[storage].spacing) / this[storage].height | 0,\n            minute = Math.round((offset + height + this[storage].spacing) % this[storage].height / step * 10),\n            second = 0;\n        if (hour == 24) {\n            hour = 23;\n            minute = 59;\n            second = 59;\n        }\n        event.end.set({\n            hour: hour,\n            minute: minute,\n            second: second\n        });\n    },\n\n    /**\n     * Returns the task cache storage names that hold the tasks of the\n     * requested task type.\n     *\n     * @param string tasktype  The task type.\n     *\n     * @return array  The list of task cache storage names.\n     */\n    getTaskStorage: function(tasktype)\n    {\n        var tasktypes;\n        if (tasktype == 'all' || tasktype == 'future') {\n            tasktypes = [ 'complete', 'incomplete' ];\n        } else {\n            tasktypes = [ tasktype ];\n        }\n        return tasktypes;\n    },\n\n    /**\n     * Loads tasks, either from cache or from the server.\n     *\n     * @param integer tasktype  The tasks type (all, incomplete, complete, or\n     *                          future).\n     * @param Array tasksLists  The lists from where to obtain the tasks.\n     */\n    loadTasks: function(tasktype, tasklists)\n    {\n        var tasktypes = this.getTaskStorage(tasktype), loading = false,\n            spinner = $('kronolithLoading');\n\n        if (Object.isUndefined(tasklists)) {\n            tasklists = [];\n            $H(Kronolith.conf.calendars.tasklists).each(function(tasklist) {\n                if (tasklist.value.show)\n                {\n                    tasklists.push(tasklist.key.substring(6));\n                }\n            });\n        }\n\n        tasktypes.each(function(type) {\n            tasklists.each(function(list) {\n                if (Object.isUndefined(this.tcache.get(type)) ||\n                    Object.isUndefined(this.tcache.get(type).get(list))) {\n                    loading = true;\n                    this.loading++;\n                    spinner.show();\n                    this.doAction('listTasks',\n                                  { type: type,\n                                    list: list },\n                                  function(r) {\n                                      this.loadTasksCallback(r, true);\n                                  }.bind(this));\n                }\n            }, this);\n        }, this);\n\n        if (!loading) {\n            tasklists.each(function(list) {\n                this.insertTasks(tasktype, list);\n            }, this);\n        }\n    },\n\n    /**\n     * Callback method for inserting tasks in the current view.\n     *\n     * @param object r             The ajax response object.\n     * @param boolean createCache  Whether to create a cache list entry for the\n     *                             response, if none exists yet. Useful for\n     *                             (not) adding individual tasks to the cache\n     *                             without assuming to have all tasks of the\n     *                             list.\n     */\n    loadTasksCallback: function(r, createCache)\n    {\n        // Hide spinner.\n        this.loading--;\n        if (!this.loading) {\n            $('kronolithLoading').hide();\n        }\n\n        this.storeTasksCache(r.response.tasks || {}, r.response.type, r.response.list, createCache);\n        if (Object.isUndefined(r.response.tasks)) {\n            return;\n        }\n\n        // Check if result is still valid for the current view.\n        // There could be a rare race condition where two responses for the\n        // same task(s) arrive in the wrong order. Checking this too, like we\n        // do for events seems not worth it.\n        var tasktypes = this.getTaskStorage(this.tasktype),\n            tasklist = Kronolith.conf.calendars.tasklists['tasks/' + r.response.list];\n        if (this.view != 'tasks' ||\n            !tasklist || !tasklist.show ||\n            !tasktypes.include(r.response.type)) {\n            return;\n        }\n        this.insertTasks(this.tasktype, r.response.list);\n    },\n\n    /**\n     * Reads tasks from the cache and inserts them into the view.\n     *\n     * @param integer tasktype  The tasks type (all, incomplete, complete, or\n     *                          future).\n     * @param string tasksList  The task list to be drawn.\n     */\n    insertTasks: function(tasktype, tasklist)\n    {\n        var tasktypes = this.getTaskStorage(tasktype), now = new Date();\n\n        $('kronolithViewTasksBody').select('tr').findAll(function(el) {\n            return el.retrieve('tasklist') == tasklist;\n        }).invoke('remove');\n\n        tasktypes.each(function(type) {\n            if (!this.tcache.get(type)) {\n                return;\n            }\n            var tasks = this.tcache.get(type).get(tasklist);\n            $H(tasks).each(function(task) {\n                switch (tasktype) {\n                case 'complete':\n                    if (!task.value.cp ||\n                        (!Object.isUndefined(task.value.start) &&\n                         task.value.start.isAfter(now))) {\n                        return;\n                    }\n                    break;\n                case 'incomplete':\n                    if (task.value.cp ||\n                        (!Object.isUndefined(task.value.start) &&\n                         task.value.start.isAfter(now))) {\n                        return;\n                    }\n                    break;\n                case 'future':\n                    if (Object.isUndefined(task.value.start) ||\n                        !task.value.start.isAfter(now)) {\n                        return;\n                    }\n                    break;\n                }\n                this.insertTask(task);\n            }, this);\n        }, this);\n\n        if ($('kronolithViewTasksBody').select('tr').length > 3) {\n            $('kronolithTasksNoItems').hide();\n        } else {\n            $('kronolithTasksNoItems').show();\n        }\n    },\n\n    /**\n     * Creates the DOM node for a task and inserts it into the view.\n     *\n     * @param object task  A Hash with the task to insert\n     */\n    insertTask: function(task)\n    {\n        var row = $('kronolithTasksTemplate').clone(true),\n            col = row.down();\n\n        row.removeAttribute('id');\n        row.store('tasklist', task.value.l);\n        row.store('taskid', task.key);\n        col.addClassName('kronolithTask' + (!!task.value.cp ? 'Completed' : ''));\n        col.insert(task.value.n.escapeHTML());\n        if (!Object.isUndefined(task.value.due)) {\n            var now = new Date();\n            if (!now.isBefore(task.value.due)) {\n                col.addClassName('kronolithTaskDue');\n            }\n            col.insert(new Element('span', { className: 'kronolithSeparator' }).update(' &middot; '));\n            col.insert(new Element('span', { className: 'kronolithDate' }).update(task.value.due.toString(Kronolith.conf.date_format)));\n        }\n\n        if (!Object.isUndefined(task.value.sd)) {\n            col.insert(new Element('span', { className: 'kronolithSeparator' }).update(' &middot; '));\n            col.insert(new Element('span', { className: 'kronolithInfo' }).update(task.value.sd));\n        }\n\n        row.insert(col.show());\n        this.insertTaskPosition(row, task);\n    },\n\n    /**\n     * Inserts the task row in the correct position.\n     *\n     * @param Element newRow  The new row to be inserted.\n     * @param object newTask  A Hash with the task being added.\n     */\n    insertTaskPosition: function(newRow, newTask)\n    {\n        var rows = $('kronolithViewTasksBody').select('tr');\n        // The first row is the add task row, the second a template, ignoring.\n        for (var i = 3; i < rows.length; i++) {\n            var rowTasklist = rows[i].retrieve('tasklist');\n            var rowTaskId = rows[i].retrieve('taskid');\n            var rowTask = this.tcache.inject(null, function(acc, list) {\n                if (acc) {\n                    return acc;\n                }\n                if (!Object.isUndefined(list.value.get(rowTasklist))) {\n                    return list.value.get(rowTasklist).get(rowTaskId);\n                }\n            });\n\n            if (Object.isUndefined(rowTask)) {\n                // TODO: Throw error\n                return;\n            }\n            if (!this.isTaskAfter(newTask.value, rowTask)) {\n                break;\n            }\n        }\n        rows[--i].insert({ after: newRow.show() });\n    },\n\n    /**\n     * Analyzes which task should be drawn first.\n     *\n     * TODO: Very incomplete, only a dummy version\n     */\n    isTaskAfter: function(taskA, taskB)\n    {\n        // TODO: Make all ordering system\n        return (taskA.pr >= taskB.pr);\n    },\n\n    /**\n     * Completes/uncompletes a task.\n     *\n     * @param string tasklist  The task list to which the tasks belongs\n     * @param string taskid    The id of the task\n     */\n    toggleCompletion: function(tasklist, taskid)\n    {\n        // Update the cache.\n        var task = this.tcache.inject(null, function(acc, list) {\n            if (acc) {\n                return acc;\n            }\n            if (!Object.isUndefined(list.value.get(tasklist))) {\n                return list.value.get(tasklist).get(taskid);\n            }\n        });\n        if (Object.isUndefined(task)) {\n            // This shouldn't happen.\n            this.toggleCompletionClass(taskid);\n            return;\n        }\n        task.cp = !task.cp;\n\n        if (this.tcache.get(task.cp ? 'complete' : 'incomplete')) {\n            this.tcache.get(task.cp ? 'complete' : 'incomplete').get(tasklist).set(taskid, task);\n        }\n        this.tcache.get(task.cp ? 'incomplete' : 'complete').get(tasklist).unset(taskid);\n\n        // Remove row if necessary.\n        var row = this.getTaskRow(taskid);\n        if (!row) {\n            return;\n        }\n        if ((this.tasktype == 'complete' && !task.cp) ||\n            ((this.tasktype == 'incomplete' || this.tasktype == 'future_incomplete') && task.cp)) {\n            row.fade({\n                duration: this.effectDur,\n                afterFinish: function() {\n                    row.purge();\n                    row.remove();\n                }\n            });\n        }\n    },\n\n    /**\n     * Toggles the CSS class to show that a task is completed/uncompleted.\n     *\n     * @param string taskid  The id of the task.\n     */\n    toggleCompletionClass: function(taskid)\n    {\n        var row = this.getTaskRow(taskid);\n        if (!row) {\n            return;\n        }\n        var col = row.down('td.kronolithTaskCol');\n        col.toggleClassName('kronolithTask');\n        col.toggleClassName('kronolithTaskCompleted');\n    },\n\n    /**\n     * Returns the table row of a task.\n     *\n     * @param string taskid  The id of the task.\n     *\n     * @return Element  The table row of the task list, if found.\n     */\n    getTaskRow: function(taskid)\n    {\n        return $('kronolithViewTasksBody').select('tr').find(function(el) {\n            return el.retrieve('taskid') == taskid;\n        });\n    },\n\n    editTask: function(tasklist, id)\n    {\n        if (this.redBoxLoading) {\n            return;\n        }\n\n        this.closeRedBox();\n        this.quickClose();\n        this.redBoxOnDisplay = RedBox.onDisplay;\n        RedBox.onDisplay = function() {\n            if (this.redBoxOnDisplay) {\n                this.redBoxOnDisplay();\n            }\n            try {\n                $('kronolithTaskForm').focusFirstElement();\n            } catch(e) {}\n            RedBox.onDisplay = this.redBoxOnDisplay;\n        }.bind(this);\n\n        this.openTab($('kronolithTaskForm').down('.tabset a.kronolithTabLink'));\n        $('kronolithTaskForm').enable();\n        $('kronolithTaskForm').reset();\n        $('kronolithTaskSave').show().enable();\n        $('kronolithTaskDelete').show().enable();\n        $('kronolithTaskForm').down('.kronolithFormActions .kronolithSeparator').show();\n        this.updateTasklistDropDown();\n        this.disableAlarmMethods('Task');\n        this.knl.kronolithTaskDueTime.markSelected();\n        if (id) {\n            RedBox.loading();\n            this.doAction('getTask', { list: tasklist, id: id }, this.editTaskCallback.bind(this));\n        } else {\n            $('kronolithTaskId').clear();\n            $('kronolithTaskOldList').clear();\n            $('kronolithTaskList').setValue(Kronolith.conf.tasks.default_tasklist);\n            //$('kronolithTaskLocation').setValue('http://');\n            $('kronolithTaskPriority').setValue(3);\n            if (Kronolith.conf.tasks.default_due) {\n                this.setDefaultDue();\n            }\n            $('kronolithTaskDelete').hide();\n            this.redBoxLoading = true;\n            RedBox.showHtml($('kronolithTaskDialog').show());\n        }\n    },\n\n    /**\n     * Callback method for showing task forms.\n     *\n     * @param object r  The ajax response object.\n     */\n    editTaskCallback: function(r)\n    {\n        if (!r.response.task) {\n            RedBox.close();\n            this.go(this.lastLocation);\n            return;\n        }\n\n        var task = r.response.task;\n\n        /* Basic information */\n        $('kronolithTaskId').setValue(task.id);\n        $('kronolithTaskOldList').setValue(task.l);\n        $('kronolithTaskList').setValue(task.l);\n        $('kronolithTaskTitle').setValue(task.n);\n        //$('kronolithTaskLocation').setValue(task.l);\n        if (task.dd) {\n            $('kronolithTaskDueDate').setValue(task.dd);\n        }\n        if (task.dt) {\n            $('kronolithTaskDueTime').setValue(task.dt);\n            this.knl.kronolithTaskDueTime.setSelected(task.dt);\n        }\n        $('kronolithTaskDescription').setValue(task.de);\n        $('kronolithTaskPriority').setValue(task.pr);\n        $('kronolithTaskCompleted').setValue(task.cp);\n\n        /* Alarm */\n        if (task.a) {\n            this.enableAlarm('Task', task.a);\n            if (task.m) {\n                $('kronolithTaskAlarmDefaultOff').checked = true;\n                $H(task.m).each(function(method) {\n                    if (!$('kronolithTaskAlarm' + method.key)) {\n                        return;\n                    }\n                    $('kronolithTaskAlarm' + method.key).setValue(1);\n                    if ($('kronolithTaskAlarm' + method.key + 'Params')) {\n                        $('kronolithTaskAlarm' + method.key + 'Params').show();\n                    }\n                    $H(method.value).each(function(param) {\n                        var input = $('kronolithTaskAlarmParam' + param.key);\n                        if (!input) {\n                            return;\n                        }\n                        if (input.type == 'radio') {\n                            input.up('form').select('input[type=radio]').each(function(radio) {\n                                if (radio.name == input.name &&\n                                    radio.value == param.value) {\n                                    radio.setValue(1);\n                                    throw $break;\n                                }\n                            });\n                        } else {\n                            input.setValue(param.value);\n                        }\n                    });\n                });\n            }\n        } else {\n            $('kronolithTaskAlarmOff').setValue(true);\n        }\n\n        if (!task.pe) {\n            $('kronolithTaskSave').hide();\n            $('kronolithTaskForm').disable();\n        }\n        if (!task.pd) {\n            $('kronolithTaskDelete').show();\n        }\n        if (!task.pe && !task.pd) {\n            $('kronolithTaskForm').down('.kronolithFormActions .kronolithSeparator').hide();\n        }\n\n        this.setTitle(task.n);\n        this.redBoxLoading = true;\n        RedBox.showHtml($('kronolithTaskDialog').show());\n    },\n\n    /**\n     * Propagates a SELECT drop down list with the editable task lists.\n     *\n     * @param string id  The id of the SELECT element.\n     */\n    updateTasklistDropDown: function()\n    {\n        var tasklist = $('kronolithTaskList');\n        tasklist.update();\n        $H(Kronolith.conf.calendars.tasklists).each(function(cal) {\n            if (cal.value.edit) {\n                tasklist.insert(new Element('option', { value: cal.key.substring(6) })\n                                .setStyle({ backgroundColor: cal.value.bg, color: cal.value.fg })\n                                .update(cal.value.name.escapeHTML()));\n            }\n        });\n    },\n\n    /**\n     * Sets the default due date and time for tasks.\n     */\n    setDefaultDue: function()\n    {\n        if ($F('kronolithTaskDueDate') || $F('kronolithTaskDueTime')) {\n            return;\n        }\n        $('kronolithTaskDueDate').setValue(new Date().add(Kronolith.conf.tasks.default_due_days).days().toString(Kronolith.conf.date_format));\n        if (Kronolith.conf.tasks.default_due_time == 'now') {\n            $('kronolithTaskDueTime').setValue(new Date().toString(Kronolith.conf.time_format));\n        } else {\n            var date = new Date();\n            date.setHours(Kronolith.conf.tasks.default_due_time.replace(/:.*$/, ''));\n            date.setMinutes(0);\n            $('kronolithTaskDueTime').setValue(date.toString(Kronolith.conf.time_format));\n        }\n    },\n\n    /**\n     * Finally removes tasks from the DOM and the cache.\n     *\n     * @param string list  A task list name.\n     * @param string task  A task id. If empty, all tasks from the list are\n     *                     deleted.\n     */\n    removeTask: function(list, task)\n    {\n        this.deleteTasksCache(list, task);\n        $('kronolithViewTasksBody').select('tr').findAll(function(el) {\n            return el.retrieve('tasklist') == list &&\n                (!task || el.retrieve('taskid') == task);\n        }).invoke('remove');\n        this.removeEvent('tasklists|tasks/' + list, task ? '_tasks' + task : null);\n        if ($('kronolithViewTasksBody').select('tr').length > 3) {\n            $('kronolithTasksNoItems').hide();\n        } else {\n            $('kronolithTasksNoItems').show();\n        }\n    },\n\n    /**\n     * Submits the task edit form to create or update a task.\n     */\n    saveTask: function()\n    {\n        if (this.wrongFormat.size()) {\n            this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.fix_form_values }]);\n            return;\n        }\n\n        var tasklist = $F('kronolithTaskOldList'),\n            target = $F('kronolithTaskList'),\n            taskid = $F('kronolithTaskId'),\n            viewDates = this.viewDates(this.date, this.view),\n            start = viewDates[0].dateString(),\n            end = viewDates[1].dateString();\n\n        $('kronolithTaskSave').disable();\n        this.startLoading('tasklists|tasks/' + target, start + end + this.tasktype);\n        this.loading++;\n        $('kronolithLoading').show();\n        this.doAction('saveTask',\n                      $H($('kronolithTaskForm').serialize({ hash: true }))\n                          .merge({\n                              sig: start + end + this.tasktype,\n                              view: this.view,\n                              view_start: start,\n                              view_end: end\n                          }),\n                      function(r) {\n                          if (r.response.tasks && taskid) {\n                              this.removeTask(tasklist, taskid);\n                          }\n                          this.loadTasksCallback(r, false);\n                          this.loadEventsCallback(r, false);\n                          if (r.response.tasks) {\n                              this.closeRedBox();\n                              this.go(this.lastLocation);\n                          } else {\n                              $('kronolithTaskSave').enable();\n                          }\n                      }.bind(this));\n    },\n\n    /**\n     * Opens the form for editing a calendar.\n     *\n     * @param string calendar  Calendar type and calendar id, separated by '|'.\n     */\n    editCalendar: function(calendar)\n    {\n        if (this.redBoxLoading) {\n            return;\n        }\n\n        this.closeRedBox();\n        this.quickClose();\n\n        var type = calendar.split('|')[0], cal = calendar.split('|')[1];\n        if (!$w('internal tasklists remote holiday').include(type)) {\n            return;\n        }\n\n        if (cal &&\n            (Object.isUndefined(Kronolith.conf.calendars[type]) ||\n             Object.isUndefined(Kronolith.conf.calendars[type][cal])) &&\n            (type == 'internal' || type == 'tasklists')) {\n            this.doAction('getCalendar', { type: type, cal: cal }, function(r) {\n                if (r.response.calendar) {\n                    Kronolith.conf.calendars[type][cal] = r.response.calendar;\n                    this.insertCalendarInList(type, cal, r.response.calendar);\n                    $('kronolithSharedCalendars').show();\n                    this.editCalendar(type + '|' + cal);\n                } else {\n                    this.go(this.lastLocation);\n                }\n            }.bind(this));\n            return;\n        }\n\n        this.redBoxOnDisplay = RedBox.onDisplay;\n        RedBox.onDisplay = function() {\n            if (this.redBoxOnDisplay) {\n                this.redBoxOnDisplay();\n            }\n            try {\n                $('kronolithCalendarForm' + type).focusFirstElement();\n            } catch(e) {}\n            RedBox.onDisplay = this.redBoxOnDisplay;\n        }.bind(this);\n\n        if ($('kronolithCalendarDialog')) {\n            this.redBoxLoading = true;\n            RedBox.showHtml($('kronolithCalendarDialog').show());\n            this.editCalendarCallback(calendar);\n        } else {\n            RedBox.loading();\n            this.doAction('chunkContent', { chunk: 'calendar' }, function(r) {\n                if (r.response.chunk) {\n                    this.redBoxLoading = true;\n                    RedBox.showHtml(r.response.chunk);\n                    ['internal', 'tasklists'].each(function(type) {\n                        $('kronolithC' + type + 'PGList').observe('change', function() {\n                            $('kronolithC' + type + 'PG').setValue(1);\n                            this.permsClickHandler(type, 'G');\n                        }.bind(this));\n                    }, this);\n                    this.editCalendarCallback(calendar);\n                } else {\n                    this.closeRedBox();\n                }\n            }.bind(this));\n        }\n    },\n\n    /**\n     * Callback for editing a calendar. Fills the edit form with the correct\n     * values.\n     *\n     * @param string calendar  Calendar type and calendar id, separated by '|'.\n     */\n    editCalendarCallback: function(calendar)\n    {\n        calendar = calendar.split('|');\n        var type = calendar[0];\n        calendar = calendar.length == 1 ? null : calendar[1];\n\n        var form = $('kronolithCalendarForm' + type),\n            firstTab = form.down('.tabset a.kronolithTabLink'),\n            info;\n\n        form.enable();\n        form.reset();\n        if (firstTab) {\n            this.openTab(firstTab);\n        }\n        $('kronolithCalendarDialog').select('.kronolithCalendarDiv').invoke('hide');\n        $('kronolithCalendar' + type + '1').show();\n        form.select('.kronolithCalendarContinue').invoke('enable');\n\n        if (type == 'internal' || type == 'tasklists') {\n        }\n\n        var newCalendar = !calendar;\n        if (calendar &&\n            (Object.isUndefined(Kronolith.conf.calendars[type]) ||\n             Object.isUndefined(Kronolith.conf.calendars[type][calendar]))) {\n            if (type != 'remote') {\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                return;\n            }\n            newCalendar = true;\n        }\n        if (newCalendar) {\n            switch (type) {\n            case 'internal':\n                this.calendarTagAc.reset();\n                // Fall through.\n            case 'tasklists':\n                $('kronolithCalendar' + type + 'LinkExport').up('span').hide();\n                break;\n            case 'remote':\n                if (calendar) {\n                    $('kronolithCalendarremoteUrl').setValue(calendar);\n                    $('kronolithCalendarremoteId').setValue(calendar);\n                }\n                break;\n            case 'holiday':\n                $('kronolithCalendarholidayDriver').update();\n                $H(Kronolith.conf.calendars.holiday).each(function(calendar) {\n                    calendar = calendar.value;\n                    if (calendar.show) {\n                        return;\n                    }\n                    $('kronolithCalendarholidayDriver').insert(\n                        new Element('option', { value: calendar.name })\n                            .setStyle({ color: calendar.fg, backgroundColor: calendar.bg })\n                            .insert(calendar.name)\n                    );\n                });\n                break;\n            }\n            $('kronolithCalendar' + type + 'Id').clear();\n            var color = '#', i;\n            for (i = 0; i < 3; i++) {\n                color += (Math.random() * 256 | 0).toColorPart();\n            }\n            $('kronolithCalendar' + type + 'Color').setValue(color).setStyle({ backgroundColor: color, color: Color.brightness(Color.hex2rgb(color)) < 125 ? '#fff' : '#000' });\n            form.down('.kronolithCalendarDelete').hide();\n        } else {\n            info = Kronolith.conf.calendars[type][calendar];\n\n            $('kronolithCalendar' + type + 'Id').setValue(calendar);\n            $('kronolithCalendar' + type + 'Name').setValue(info.name);\n            $('kronolithCalendar' + type + 'Color').setValue(info.bg).setStyle({ backgroundColor: info.bg, color: info.fg });\n\n            switch (type) {\n            case 'internal':\n                this.calendarTagAc.reset(Kronolith.conf.calendars.internal[calendar].tg);\n                $('kronolithCalendar' + type + 'ImportCal').setValue('internal_' + calendar);\n                if (info.edit) {\n                    $('kronolithCalendar' + type + 'LinkImport').up('li').show();\n                } else {\n                    $('kronolithCalendar' + type + 'LinkImport').up('li').hide();\n                }\n                $('kronolithCalendar' + type + 'UrlFeed').setValue(info.feed);\n                $('kronolithCalendar' + type + 'EmbedUrl').setValue(info.embed);\n                // Fall through.\n            case 'tasklists':\n                $('kronolithCalendar' + type + 'Description').setValue(info.desc);\n                $('kronolithCalendar' + type + 'LinkExport').up('span').show();\n                $('kronolithCalendar' + type + 'Export').href = type == 'internal'\n                    ? Kronolith.conf.URI_CALENDAR_EXPORT + calendar\n                    : Kronolith.conf.tasks.URI_TASKLIST_EXPORT + '=' + calendar.substring(6);\n                $('kronolithCalendar' + type + 'LinkUrls').up().show();\n                $('kronolithCalendar' + type + 'UrlSub').setValue(info.sub);\n                break;\n            case 'remote':\n                $('kronolithCalendarremoteUrl').setValue(calendar);\n                $('kronolithCalendarremoteDescription').setValue(info.desc);\n                $('kronolithCalendarremoteUsername').setValue(info.user);\n                $('kronolithCalendarremotePassword').setValue(info.password);\n                break;\n            }\n        }\n\n        if (newCalendar || info.owner) {\n            if (type == 'internal' || type == 'tasklists') {\n                this.updateGroupDropDown([['kronolithC' + type + 'PGList', this.updateGroupPerms.bind(this, type)],\n                                          ['kronolithC' + type + 'PGNew']]);\n                $('kronolithC' + type + 'PBasic').show();\n                $('kronolithC' + type + 'PAdvanced').hide();\n                $('kronolithC' + type + 'PNone').setValue(1);\n                $('kronolithC' + type + 'PAllShow').disable();\n                $('kronolithC' + type + 'PGList').disable();\n                $('kronolithC' + type + 'PGPerms').disable();\n                $('kronolithC' + type + 'PUList').disable();\n                $('kronolithC' + type + 'PUPerms').disable();\n                $('kronolithC' + type + 'PAdvanced').select('tr').findAll(function(tr) {\n                    return tr.retrieve('remove');\n                }).invoke('remove');\n                $('kronolithCalendar' + type + 'LinkUrls').up().show();\n                form.down('.kronolithColorPicker').show();\n                if (type == 'internal') {\n                    this.doAction('listTopTags', null, this.topTagsCallback.curry('kronolithCalendarinternalTopTags', 'kronolithCalendarTag'));\n                }\n                form.down('.kronolithCalendarSubscribe').hide();\n                form.down('.kronolithCalendarUnsubscribe').hide();\n                $('kronolithCalendar' + type + 'LinkPerms').up('span').show();\n                if (!Object.isUndefined(info) && info.owner) {\n                    this.setPermsFields(type, info.perms);\n                }\n            }\n            if (type == 'remote' || type == 'internal' || type == 'tasklists') {\n                if (newCalendar ||\n                    (type == 'internal' && calendar == Kronolith.conf.user) ||\n                    (type == 'tasklists' && calendar == 'tasks/' + Kronolith.conf.user)) {\n                    form.select('.kronolithCalendarDelete').invoke('hide');\n                } else {\n                    form.select('.kronolithCalendarDelete').invoke('show');\n                }\n            }\n            form.down('.kronolithCalendarSave').show();\n            form.down('.kronolithFormActions .kronolithSeparator').show();\n        } else {\n            form.disable();\n            form.down('.kronolithColorPicker').hide();\n            form.down('.kronolithCalendarDelete').hide();\n            form.down('.kronolithCalendarSave').hide();\n            if (type == 'internal' || type == 'tasklists') {\n                $('kronolithCalendar' + type + 'UrlSub').enable();\n                if (type == 'internal') {\n                    $('kronolithCalendar' + type + 'UrlFeed').enable();\n                    $('kronolithCalendar' + type + 'EmbedUrl').enable();\n                }\n                this.calendarTagAc.disable();\n                if (Kronolith.conf.calendars[type][calendar].show) {\n                    form.down('.kronolithCalendarSubscribe').hide();\n                    form.down('.kronolithCalendarUnsubscribe').show().enable();\n                } else {\n                    form.down('.kronolithCalendarSubscribe').show().enable();\n                    form.down('.kronolithCalendarUnsubscribe').hide();\n                }\n                form.down('.kronolithFormActions .kronolithSeparator').show();\n                $('kronolithCalendar' + type + 'LinkPerms').up('span').hide();\n            } else {\n                form.down('.kronolithFormActions .kronolithSeparator').hide();\n            }\n        }\n    },\n\n    /**\n     * Handles clicks on the radio boxes of the basic permissions screen.\n     *\n     * @param string type  The calendar type, 'internal' or 'taskslists'.\n     * @param string perm  The permission to activate, 'None', 'All', or\n     *                     'Group'.\n     */\n    permsClickHandler: function(type, perm)\n    {\n        $('kronolithC' + type + 'PAdvanced')\n            .select('input[type=checkbox]')\n            .invoke('setValue', 0);\n        $('kronolithC' + type + 'PAdvanced').select('tr').findAll(function(tr) {\n            return tr.retrieve('remove');\n        }).invoke('remove');\n\n        switch (perm) {\n        case 'None':\n            $('kronolithC' + type + 'PAllShow').disable();\n            $('kronolithC' + type + 'PGList').disable();\n            $('kronolithC' + type + 'PGPerms').disable();\n            $('kronolithC' + type + 'PUList').disable();\n            $('kronolithC' + type + 'PUPerms').disable();\n            break;\n        case 'All':\n            $('kronolithC' + type + 'PAllShow').enable();\n            $('kronolithC' + type + 'PGList').disable();\n            $('kronolithC' + type + 'PGPerms').disable();\n            $('kronolithC' + type + 'PUList').disable();\n            $('kronolithC' + type + 'PUPerms').disable();\n            var perms = {\n                'default': Kronolith.conf.perms.read,\n                'guest': Kronolith.conf.perms.read\n            };\n            if ($F('kronolithC' + type + 'PAllShow')) {\n                perms['default'] |= Kronolith.conf.perms.show;\n                perms['guest'] |= Kronolith.conf.perms.show;\n            }\n            this.setPermsFields(type, perms);\n            break;\n        case 'G':\n            $('kronolithC' + type + 'PAllShow').disable();\n            $('kronolithC' + type + 'PGList').enable();\n            $('kronolithC' + type + 'PGPerms').enable();\n            $('kronolithC' + type + 'PUList').disable();\n            $('kronolithC' + type + 'PUPerms').disable();\n            var group = $F('kronolithC' + type + 'PGSingle')\n                ? $F('kronolithC' + type + 'PGSingle')\n                : $F('kronolithC' + type + 'PGList');\n            this.insertGroupOrUser(type, 'group', group, true);\n            $('kronolithC' + type + 'PGshow_' + group).setValue(1);\n            $('kronolithC' + type + 'PGread_' + group).setValue(1);\n            if ($F('kronolithC' + type + 'PGPerms') == 'edit') {\n                $('kronolithC' + type + 'PGedit_' + group).setValue(1);\n            } else {\n                $('kronolithC' + type + 'PGedit_' + group).setValue(0);\n            }\n            $('kronolithC' + type + 'PGdelete_' + group).setValue(0);\n            if ($('kronolithC' + type + 'PGdelegate_' + group)) {\n                $('kronolithC' + type + 'PGdelegate_' + group).setValue(0);\n            }\n            break;\n        case 'U':\n            $('kronolithC' + type + 'PAllShow').disable();\n            $('kronolithC' + type + 'PGList').disable();\n            $('kronolithC' + type + 'PGPerms').disable();\n            $('kronolithC' + type + 'PUList').enable();\n            $('kronolithC' + type + 'PUPerms').enable();\n            var users = $F('kronolithC' + type + 'PUList').strip();\n            users = users ? users.split(/,\\s*/) : [];\n            users.each(function(user) {\n                this.insertGroupOrUser(type, 'user', user, true);\n                $('kronolithC' + type + 'PUshow_' + user).setValue(1);\n                $('kronolithC' + type + 'PUread_' + user).setValue(1);\n                if ($F('kronolithC' + type + 'PUPerms') == 'edit') {\n                    $('kronolithC' + type + 'PUedit_' + user).setValue(1);\n                } else {\n                    $('kronolithC' + type + 'PUedit_' + user).setValue(0);\n                }\n                $('kronolithC' + type + 'PUdelete_' + user).setValue(0);\n                if ($('kronolithC' + type + 'PUdelegate_' + user)) {\n                    $('kronolithC' + type + 'PUdelegate_' + user).setValue(0);\n                }\n            }, this);\n            break;\n        }\n    },\n\n    /**\n     * Populates the permissions field matrix.\n     *\n     * @param string type   The calendar type, 'internal' or 'taskslists'.\n     * @param object perms  An object with the resource permissions.\n     */\n    setPermsFields: function(type, perms)\n    {\n        if (this.groupLoading) {\n            this.setPermsFields.bind(this, type, perms).defer();\n            return;\n        }\n\n        var allperms = $H(Kronolith.conf.perms),\n            advanced = false, users = [],\n            basic, same, groupPerms, groupId, userPerms;\n        $H(perms).each(function(perm) {\n            switch (perm.key) {\n            case 'default':\n            case 'guest':\n                if (Object.isUndefined(same)) {\n                    same = perm.value;\n                } else if (Object.isUndefined(basic) &&\n                           same == perm.value &&\n                           (perm.value == Kronolith.conf.perms.read ||\n                            perm.value == (Kronolith.conf.perms.read | Kronolith.conf.perms.show))) {\n                    basic = perm.value == Kronolith.conf.perms.read ? 'all_read' : 'all_show';\n                } else if (perm.value != 0) {\n                    advanced = true;\n                }\n                break;\n            case 'creator':\n                if (perm.value != 0) {\n                    advanced = true;\n                }\n                break;\n            case 'groups':\n                if (!Object.isArray(perm.value)) {\n                    $H(perm.value).each(function(group) {\n                        this.insertGroupOrUser(type, 'group', group.key);\n                        if (!$('kronolithC' + type + 'PGshow_' + group.key)) {\n                            // Group doesn't exist anymore.\n                            delete perm.value[group.key];\n                            return;\n                        }\n                        groupPerms = group.value;\n                        groupId = group.key;\n                    }, this);\n                    if (Object.isUndefined(basic) &&\n                        $H(perm.value).size() == 1 &&\n                        (groupPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read) ||\n                         groupPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read | Kronolith.conf.perms.edit))) {\n                        basic = groupPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read) ? 'group_read' : 'group_edit';\n                    } else {\n                        advanced = true;\n                    }\n                }\n                break;\n            case 'users':\n                if (!Object.isArray(perm.value)) {\n                    $H(perm.value).each(function(user) {\n                        if (user.key != Kronolith.conf.user) {\n                            this.insertGroupOrUser(type, 'user', user.key);\n                            if (!$('kronolithC' + type + 'PUshow_' + user.key)) {\n                                // User doesn't exist anymore.\n                                delete perm.value[user.key];\n                                return;\n                            }\n                            // Check if we already have other basic permissions.\n                            if (Object.isUndefined(userPerms) &&\n                                !Object.isUndefined(basic)) {\n                                advanced = true;\n                            }\n                            // Check if all users have the same permissions.\n                            if (!Object.isUndefined(userPerms) &&\n                                userPerms != user.value) {\n                                advanced = true;\n                            }\n                            userPerms = user.value;\n                            if (!advanced &&\n                                (userPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read) ||\n                                 userPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read | Kronolith.conf.perms.edit))) {\n                                basic = userPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read) ? 'user_read' : 'user_edit';\n                                users.push(user.key);\n                            } else {\n                                advanced = true;\n                            }\n                        }\n                    }, this);\n                }\n                break;\n            }\n\n            allperms.each(function(baseperm) {\n                if (baseperm.key == 'all') {\n                    return;\n                }\n                switch (perm.key) {\n                case 'default':\n                case 'guest':\n                case 'creator':\n                    if (baseperm.value & perm.value) {\n                        $('kronolithC' + type + 'P' + perm.key + baseperm.key).setValue(1);\n                    }\n                    break;\n                case 'groups':\n                    $H(perm.value).each(function(group) {\n                        if (baseperm.value & group.value) {\n                            $('kronolithC' + type + 'PG' + baseperm.key + '_' + group.key).setValue(1);\n                        }\n                    });\n                    break;\n                case 'users':\n                    $H(perm.value).each(function(user) {\n                        if (baseperm.value & user.value &&\n                            user.key != Kronolith.conf.user) {\n                            $('kronolithC' + type + 'PU' + baseperm.key + '_' + user.key).setValue(1);\n                        }\n                    });\n                    break;\n                }\n            });\n        }.bind(this));\n\n        if (advanced) {\n            this.activateAdvancedPerms(type);\n        } else {\n            switch (basic) {\n            case 'all_read':\n                $('kronolithC' + type + 'PAll').setValue(1);\n                $('kronolithC' + type + 'PAllShow').setValue(0);\n                $('kronolithC' + type + 'PAllShow').enable();\n                break;\n            case 'all_show':\n                $('kronolithC' + type + 'PAll').setValue(1);\n                $('kronolithC' + type + 'PAllShow').setValue(1);\n                $('kronolithC' + type + 'PAllShow').enable();\n                break;\n            case 'group_read':\n            case 'group_edit':\n                var setGroup = function(group) {\n                    if ($('kronolithC' + type + 'PGList').visible()) {\n                        $('kronolithC' + type + 'PGList').setValue(group);\n                        if ($('kronolithC' + type + 'PGList').getValue() != group) {\n                            // Group no longer exists.\n                            this.permsClickHandler(type, 'None');\n                        }\n                    } else if ($('kronolithC' + type + 'PGSingle').getValue() != group) {\n                        // Group no longer exists.\n                        this.permsClickHandler(type, 'None');\n                    }\n                }.bind(this, groupId);\n                if (this.groupLoading) {\n                    setGroup.defer();\n                } else {\n                    setGroup();\n                }\n                $('kronolithC' + type + 'PG').setValue(1);\n                $('kronolithC' + type + 'PGPerms').setValue(basic.substring(6));\n                $('kronolithC' + type + 'PAdvanced').hide();\n                $('kronolithC' + type + 'PBasic').show();\n                $('kronolithC' + type + 'PGPerms').enable();\n                break;\n            case 'user_read':\n            case 'user_edit':\n                $('kronolithC' + type + 'PUList').enable().setValue(users.join(', '));\n                $('kronolithC' + type + 'PU').setValue(1);\n                $('kronolithC' + type + 'PUPerms').setValue(basic.substring(5));\n                $('kronolithC' + type + 'PAdvanced').hide();\n                $('kronolithC' + type + 'PBasic').show();\n                $('kronolithC' + type + 'PUPerms').enable();\n                break;\n            }\n        }\n   },\n\n    /**\n     * Propagates a SELECT drop down list with the groups.\n     *\n     * @param array params  A two-dimensional array with the following values\n     *                      in each element:\n     *                      - The id of the SELECT element.\n     *                      - A callback method that is invoked with the group\n     *                        list passes as an argument.\n     */\n    updateGroupDropDown: function(params)\n    {\n        this.groupLoading = true;\n        params.each(function(param) {\n            var elm = $(param[0]), options = elm.childElements();\n            options.shift();\n            options.invoke('remove');\n            elm.up('form').disable();\n        });\n        this.doAction('listGroups', null, function(r) {\n            var groups;\n            if (r.response.groups) {\n                groups = $H(r.response.groups);\n                params.each(function(param) {\n                    groups.each(function(group) {\n                        $(param[0]).insert(new Element('option', { value: group.key })\n                                           .update(group.value.escapeHTML()));\n                    });\n                });\n            }\n            params.each(function(param) {\n                $(param[0]).up('form').enable();\n                if (param[1]) {\n                    param[1](groups);\n                }\n            });\n            this.groupLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Updates the group permission interface after the group list has\n     * been loaded.\n     *\n     * @param string type  The calendar type, 'internal' or 'taskslists'.\n     * @param Hash groups  The list of groups.\n     */\n    updateGroupPerms: function(type, groups)\n    {\n        $('kronolithC' + type + 'PGSingle').clear();\n        if (!groups) {\n            $('kronolithC' + type + 'PGNew').up('div').hide();\n            $('kronolithC' + type + 'PG').up('span').hide();\n        } else {\n            $('kronolithC' + type + 'PGNew').up('div').show();\n            $('kronolithC' + type + 'PG').up('span').show();\n            if (groups.size() == 1) {\n                $('kronolithC' + type + 'PGName')\n                    .update('&quot;' + groups.values()[0].escapeHTML() + '&quot;')\n                    .show();\n                $('kronolithC' + type + 'PGSingle').setValue(groups.keys()[0]);\n                $('kronolithC' + type + 'PGList').hide();\n            } else {\n                $('kronolithC' + type + 'PGName').hide();\n                $('kronolithC' + type + 'PGList').show();\n            }\n        }\n    },\n\n    /**\n     * Inserts a group or user row into the advanced permissions interface.\n     *\n     * @param string type          The calendar type, 'internal' or\n     *                             'taskslists'.\n     * @param what string          Either 'group' or 'user'.\n     * @param group string         The group id or user name to insert.\n     *                             Defaults to the value of the drop down.\n     * @param notadvanced boolean  Enforces to NOT switch to the advanced\n     *                             permissions screen.\n     */\n    insertGroupOrUser: function(type, what, id, notadvanced)\n    {\n        var elm = $(what == 'user' ? 'kronolithC' + type + 'PUNew' : 'kronolithC' + type + 'PGNew');\n        if (id) {\n            elm.setValue(id);\n        }\n        var value = elm.getValue();\n        if (!value) {\n            return;\n        }\n\n        var tr = elm.up('tr'),\n            row = tr.clone(true).store('remove', true),\n            td = row.down('td'),\n            clearName = elm.tagName == 'SELECT' ? elm.options[elm.selectedIndex].text: elm.getValue();\n\n        td.update();\n        td.insert(clearName.escapeHTML())\n            .insert(new Element('input', { type: 'hidden', name: (what == 'user' ? 'u' : 'g') + '_names[' + value + ']', value: value }));\n        row.select('input[type=checkbox]').each(function(input) {\n            input.writeAttribute('name', input.name.replace(/\\[.*?$/, '[' + value + ']'))\n                .writeAttribute('id', input.id.replace(/new/, value))\n                .next()\n                .writeAttribute('for', input.id);\n        });\n        tr.insert({ before: row });\n\n        if (elm.tagName == 'SELECT') {\n            elm.options[elm.selectedIndex].writeAttribute('disabled', true);\n            elm.selectedIndex = 0;\n        } else {\n            elm.clear();\n        }\n\n        if (!notadvanced) {\n            this.activateAdvancedPerms(type);\n        }\n    },\n\n    /**\n     * Activates the advanced permissions.\n     *\n     * @param string type  The calendar type, 'internal' or 'taskslists'.\n     */\n    activateAdvancedPerms: function(type)\n    {\n        [$('kronolithC' + type + 'PNone'),\n         $('kronolithC' + type + 'PAll'),\n         $('kronolithC' + type + 'PU'),\n         $('kronolithC' + type + 'PG')].each(function(radio) {\n            radio.checked = false;\n        });\n        $('kronolithC' + type + 'PBasic').hide();\n        $('kronolithC' + type + 'PAdvanced').show();\n    },\n\n    /**\n     * Opens the next screen of the calendar management wizard.\n     *\n     * @param string type  The calendar type.\n     */\n    calendarNext: function(type)\n    {\n        var i = 1;\n        while (!$('kronolithCalendar' + type + i).visible()) {\n            i++;\n        }\n        $('kronolithCalendar' + type + i).hide();\n        $('kronolithCalendar' + type + (++i)).show();\n        if (this.colorPicker) {\n            this.colorPicker.hide();\n        }\n    },\n\n    /**\n     * Submits the calendar form to save the calendar data.\n     *\n     * @param Element form  The form node.\n     *\n     * @return boolean  Whether the save request was successfully sent.\n     */\n    saveCalendar: function(form)\n    {\n        if (this.colorPicker) {\n            this.colorPicker.hide();\n        }\n        var data = form.serialize({ hash: true });\n\n        if (data.type == 'holiday') {\n            this.insertCalendarInList('holiday', data.driver, Kronolith.conf.calendars.holiday[data.driver]);\n            this.toggleCalendar('holiday', data.driver);\n            form.down('.kronolithCalendarSave').enable();\n            this.closeRedBox();\n            this.go(this.lastLocation);\n            return;\n        }\n\n        if (data.name.empty()) {\n            this.showNotifications([ { type: 'horde.warning', message: data.type == 'tasklists' ? Kronolith.text.no_tasklist_title : Kronolith.text.no_calendar_title }]);\n            $('kronolithCalendar' + data.type + 'Name').focus();\n            return false;\n        }\n        this.doAction('saveCalendar', data,\n                      this.saveCalendarCallback.bind(this, form, data));\n        return true;\n    },\n\n    /**\n     * Callback method after saving a calendar.\n     *\n     * @param Element form  The form node.\n     * @param object data   The serialized form data.\n     * @param object r      The ajax response object.\n     */\n    saveCalendarCallback: function(form, data, r)\n    {\n        var type = form.id.replace(/kronolithCalendarForm/, '');\n\n        // If saving the calendar changed the owner, we need to delete\n        // and re-insert the calendar.\n        if (r.response.deleted) {\n            this.deleteCalendar(type, data.calendar);\n            delete data.calendar;\n        }\n        if (r.response.saved) {\n            if ($F('kronolithCalendarinternalImport')) {\n                this.loading++;\n                $('kronolithLoading').show();\n                var name = 'kronolithIframe' + Math.round(Math.random() * 1000),\n                    iframe = new Element('iframe', { src: 'about:blank', name: name, id: name }).setStyle({ display: 'none' });\n                document.body.insert(iframe);\n                form.target = name;\n                form.submit();\n            }\n            var cal = r.response.calendar, id;\n            if (data.calendar) {\n                var color = {\n                    backgroundColor: cal.bg,\n                    color: cal.fg\n                };\n                id = data.calendar;\n                this.getCalendarList(type, cal.owner).select('div').each(function(element) {\n                    if (element.retrieve('calendar') == id) {\n                        element\n                            .setStyle(color)\n                            .update(cal.name.escapeHTML());\n                        this.addShareIcon(cal, element);\n                        throw $break;\n                    }\n                }, this);\n                this.kronolithBody.select('div').each(function(el) {\n                    if (el.retrieve('calendar') == type + '|' + id) {\n                        el.setStyle(color);\n                    }\n                });\n                Kronolith.conf.calendars[type][id] = cal;\n            } else {\n                id = r.response.id;\n                if (!Kronolith.conf.calendars[type]) {\n                    Kronolith.conf.calendars[type] = [];\n                }\n                Kronolith.conf.calendars[type][id] = cal;\n                this.insertCalendarInList(type, id, cal);\n                this.storeCache($H(), [type, id], this.viewDates(this.date, this.view), true);\n                if (type == 'tasklists') {\n                    this.storeTasksCache($H(), this.tasktype, id.replace(/^tasks\\//, ''), true);\n                }\n            }\n            if (type == 'remote') {\n                this.loadCalendar(type, id);\n            }\n        }\n        form.down('.kronolithCalendarSave').enable();\n        this.closeRedBox();\n        this.go(this.lastLocation);\n    },\n\n    /**\n     * Deletes a calendar and all its events from the interface and cache.\n     *\n     * @param string type      The calendar type.\n     * @param string calendar  The calendar id.\n     */\n    deleteCalendar: function(type, calendar)\n    {\n        var container = this.getCalendarList(type, Kronolith.conf.calendars[type][calendar].owner),\n            noItems = container.previous(),\n            div = container.select('div').find(function(element) {\n                return element.retrieve('calendar') == calendar;\n            }),\n            arrow = div.previous('span');\n        arrow.purge();\n        arrow.remove();\n        div.purge();\n        div.remove();\n        if (noItems &&\n            noItems.tagName == 'DIV' &&\n            noItems.className == 'kronolithDialogInfo' &&\n            !container.childElements().size()) {\n            noItems.show();\n        }\n        this.removeEvent(type + '|' + calendar);\n        this.deleteCache([type, calendar]);\n        if (type == 'tasklists' && this.view == 'tasks') {\n            this.removeTask(calendar.replace(/^tasks\\//, ''));\n        }\n        delete Kronolith.conf.calendars[type][calendar];\n    },\n\n    /**\n     * Parses a date attribute string into a Date object.\n     *\n     * For other strings use Date.parse().\n     *\n     * @param string date  A yyyyMMdd date string.\n     *\n     * @return Date  A date object.\n     */\n    parseDate: function(date)\n    {\n        var d = new Date(date.substr(0, 4), date.substr(4, 2) - 1, date.substr(6, 2));\n        if (date.length == 12) {\n            d.setHours(date.substr(8, 2));\n            d.setMinutes(date.substr(10, 2));\n        }\n        return d;\n    },\n\n    /**\n     * Calculates first and last days being displayed.\n     *\n     * @var Date date    The date of the view.\n     * @var string view  A view name.\n     *\n     * @return array  Array with first and last day of the view.\n     */\n    viewDates: function(date, view)\n    {\n        var start = date.clone(), end = date.clone();\n\n        switch (view) {\n        case 'week':\n            start.moveToBeginOfWeek(Kronolith.conf.week_start);\n            end.moveToEndOfWeek(Kronolith.conf.week_start);\n            break;\n        case 'month':\n            start.setDate(1);\n            start.moveToBeginOfWeek(Kronolith.conf.week_start);\n            end.moveToLastDayOfMonth();\n            end.moveToEndOfWeek(Kronolith.conf.week_start);\n            break;\n        case 'year':\n            start.setDate(1);\n            start.setMonth(0);\n            end.setMonth(11);\n            end.moveToLastDayOfMonth();\n            break;\n        case 'agenda':\n            end.add(6).days();\n            break;\n        }\n\n        return [start, end];\n    },\n\n    /**\n     * Stores a set of events in the cache.\n     *\n     * For dates in the specified date ranges that don't contain any events,\n     * empty cache entries are created so that those dates aren't re-fetched\n     * each time.\n     *\n     * @param object events        A list of calendars and events as returned\n     *                             from an ajax request.\n     * @param string calendar      A calendar string or array.\n     * @param string dates         A date range in the format yyyymmddyyyymmdd\n     *                             as used in the ajax response signature.\n     * @param boolean createCache  Whether to create a cache list entry for the\n     *                             response, if none exists yet.\n     */\n    storeCache: function(events, calendar, dates, createCache)\n    {\n        if (Object.isString(calendar)) {\n            calendar = calendar.split('|');\n        }\n\n        // Create cache entry for the calendar.\n        if (!this.ecache.get(calendar[0])) {\n            if (!createCache) {\n                return;\n            }\n            this.ecache.set(calendar[0], $H());\n        }\n        if (!this.ecache.get(calendar[0]).get(calendar[1])) {\n            if (!createCache) {\n                return;\n            }\n            this.ecache.get(calendar[0]).set(calendar[1], $H());\n        }\n        var calHash = this.ecache.get(calendar[0]).get(calendar[1]);\n\n        // Create empty cache entries for all dates.\n        if (!!dates) {\n            var day = dates[0].clone(), date;\n            while (!day.isAfter(dates[1])) {\n                date = day.dateString();\n                if (!calHash.get(date)) {\n                    if (!createCache) {\n                        return;\n                    }\n                    if (!this.cacheStart || this.cacheStart.isAfter(day)) {\n                        this.cacheStart = day.clone();\n                    }\n                    if (!this.cacheEnd || this.cacheEnd.isBefore(day)) {\n                        this.cacheEnd = day.clone();\n                    }\n                    calHash.set(date, $H());\n                }\n                day.add(1).day();\n            }\n        }\n\n        var cal = calendar.join('|');\n        $H(events).each(function(date) {\n            // We might not have a cache for this date if the event lasts\n            // longer than the current view\n            if (!calHash.get(date.key)) {\n                return;\n            }\n\n            // Store calendar string and other useful information in event\n            // objects.\n            $H(date.value).each(function(event) {\n                event.value.calendar = cal;\n                event.value.start = Date.parse(event.value.s);\n                event.value.end = Date.parse(event.value.e);\n                event.value.sort = event.value.start.toString('HHmmss')\n                    + (240000 - parseInt(event.value.end.toString('HHmmss'), 10)).toPaddedString(6);\n            });\n\n            // Store events in cache.\n            calHash.set(date.key, calHash.get(date.key).merge(date.value));\n        });\n    },\n\n    /**\n     * Stores a set of tasks in the cache.\n     *\n     * @param Hash tasks           The tasks to be stored.\n     * @param string tasktypes     The task type that's being stored.\n     * @param string tasklist      The task list to which the tasks belong.\n     * @param boolean createCache  Whether to create a cache list entry for the\n     *                             response, if none exists yet.\n     */\n    storeTasksCache: function(tasks, tasktypes, tasklist, createCache)\n    {\n        var taskHashes = {}, cacheExists = {};\n\n        if (tasktypes == 'all' || tasktypes == 'future') {\n            tasktypes = [ 'complete', 'incomplete' ];\n        } else {\n            tasktypes = [ tasktypes ];\n        }\n\n        tasktypes.each(function(tasktype) {\n            cacheExists[tasktype] = false;\n            if (!this.tcache.get(tasktype)) {\n                if (!createCache) {\n                    return;\n                }\n                this.tcache.set(tasktype, $H());\n            }\n            if (!tasklist) {\n                return;\n            }\n            if (!this.tcache.get(tasktype).get(tasklist)) {\n                if (!createCache) {\n                    return;\n                }\n                this.tcache.get(tasktype).set(tasklist, $H());\n                cacheExists[tasktype] = true;\n            } else {\n                cacheExists[tasktype] = true;\n            }\n            taskHashes[tasktype] = this.tcache.get(tasktype).get(tasklist);\n        }, this);\n\n        $H(tasks).each(function(task) {\n            var tasktype = task.value.cp ? 'complete' : 'incomplete';\n            if (!cacheExists[tasktype]) {\n                return;\n            }\n            if (!Object.isUndefined(task.value.s)) {\n                task.value.start = Date.parse(task.value.s);\n            }\n            if (!Object.isUndefined(task.value.du)) {\n                task.value.due = Date.parse(task.value.du);\n            }\n            taskHashes[tasktype].set(task.key, task.value);\n        });\n    },\n\n    /**\n     * Deletes an event or a complete calendar from the cache.\n     *\n     * @param string calendar  A calendar string or array.\n     * @param string event     An event ID or empty if deleting the calendar.\n     */\n    deleteCache: function(calendar, event)\n    {\n        if (Object.isString(calendar)) {\n            calendar = calendar.split('|');\n        }\n        if (!this.ecache.get(calendar[0]) ||\n            !this.ecache.get(calendar[0]).get(calendar[1])) {\n            return;\n        }\n        if (event) {\n            this.ecache.get(calendar[0]).get(calendar[1]).each(function(day) {\n                day.value.unset(event);\n            });\n        } else {\n            this.ecache.get(calendar[0]).unset(calendar[1]);\n        }\n    },\n\n    /**\n     * Deletes tasks from the cache.\n     *\n     * @param string list  A task list string.\n     * @param string task  A task ID. If empty, all tasks from the list are\n     *                     deleted.\n     */\n    deleteTasksCache: function(list, task)\n    {\n        this.deleteCache([ 'external', 'tasks/' + list ], task);\n        $w('complete incomplete').each(function(type) {\n            if (!Object.isUndefined(this.tcache.get(type)) &&\n                !Object.isUndefined(this.tcache.get(type).get(list))) {\n                if (task) {\n                    this.tcache.get(type).get(list).unset(task);\n                } else {\n                    this.tcache.get(type).unset(list);\n                }\n            }\n        }, this);\n    },\n\n    /**\n     * Return all events for a single day from all displayed calendars merged\n     * into a single hash.\n     *\n     * @param string date  A yyyymmdd date string.\n     *\n     * @return Hash  An event hash which event ids as keys and event objects as\n     *               values.\n     */\n    getCacheForDate: function(date, calendar)\n    {\n        if (calendar) {\n            var cals = calendar.split('|');\n            if (!this.ecache.get(cals[0]) ||\n                !this.ecache.get(cals[0]).get(cals[1])) {\n                return $H();\n            }\n            return this.ecache.get(cals[0]).get(cals[1]).get(date);\n        }\n\n        var events = $H();\n        this.ecache.each(function(type) {\n            type.value.each(function(cal) {\n                if (!Kronolith.conf.calendars[type.key][cal.key].show) {\n                    return;\n                }\n                events = events.merge(cal.value.get(date));\n            });\n        });\n        return events;\n    },\n\n    /**\n     * Helper method for Enumerable.sortBy to sort events first by start time,\n     * second by end time reversed.\n     *\n     * @param Hash event  A hash entry with the event object as the value.\n     *\n     * @return string  A comparable string.\n     */\n    sortEvents: function(event)\n    {\n        return event.value.sort;\n    },\n\n    /**\n     * Adds a new location to the history and displays it in the URL hash.\n     *\n     * This is not really a history, because only the current and the last\n     * location are stored.\n     *\n     * @param string loc    The location to save.\n     * @param boolean save  Whether to actually save the location. This should\n     *                      be false for any location that are displayed on top\n     *                      of another location, i.e. in a popup view.\n     */\n    addHistory: function(loc, save)\n    {\n        location.hash = encodeURIComponent(loc);\n        this.lastLocation = this.currentLocation;\n        if (Object.isUndefined(save) || save) {\n            this.currentLocation = loc;\n        }\n        this.openLocation = loc;\n    },\n\n    /**\n     * Loads an external page.\n     *\n     * @param string loc  The URL of the page to load.\n     */\n    loadPage: function(loc)\n    {\n        if (Kronolith.conf.use_iframe) {\n            this.iframeContent(loc);\n        } else {\n            window.location.assign(loc);\n        }\n    },\n\n    /**\n     * Loads a page into the iframe view.\n     *\n     * @param string loc  The URL of the page to load.\n     */\n    iframeContent: function(loc)\n    {\n        var view = $('kronolithViewIframe'), iframe = $('kronolithIframe');\n        view.hide();\n        if (!iframe) {\n            view.insert(new Element('iframe', { id: 'kronolithIframe', className: 'kronolithIframe', frameBorder: 0 }));\n            iframe = $('kronolithIframe');\n        }\n        iframe.observe('load', function() {\n            view.appear({ duration: this.effectDur, queue: 'end' });\n            iframe.stopObserving('load');\n        }.bind(this));\n        iframe.src = this.addURLParam(loc, { ajaxui: 1 });\n        this.view = 'iframe';\n    },\n\n    /* Keydown event handler */\n    keydownHandler: function(e)\n    {\n        if (e.stopped) {\n            return;\n        }\n\n        var kc = e.keyCode || e.charCode,\n            form = e.findElement('FORM'), trigger = e.findElement();\n\n        switch (trigger.id) {\n        case 'kronolithEventLocation':\n            if (kc == Event.KEY_RETURN && $F('kronolithEventLocation')) {\n                this.initializeMap(true);\n                this.geocode($F('kronolithEventLocation'));\n                e.stop();\n                return;\n            }\n            break;\n\n        case 'kronolithCalendarinternalUrlSub':\n        case 'kronolithCalendarinternalUrlFeed':\n        case 'kronolithCalendartasklistsUrlSub':\n            if (String.fromCharCode(kc) != 'C' ||\n                (this.macos && !e.metaKey) ||\n                (!this.macos && !e.ctrlKey)) {\n                e.stop();\n                return;\n            }\n            break;\n        }\n\n        if (form) {\n            switch (kc) {\n            case Event.KEY_RETURN:\n                switch (form.identify()) {\n                case 'kronolithEventForm':\n                    if (e.element().tagName != 'TEXTAREA') {\n                        this.saveEvent();\n                        e.stop();\n                    }\n                    break;\n\n                case 'kronolithTaskForm':\n                    if (e.element().tagName != 'TEXTAREA') {\n                        this.saveTask();\n                        e.stop();\n                    }\n                    break;\n\n                case 'kronolithSearchForm':\n                    this.go('search:' + this.search + ':' + $F('kronolithSearchTerm'));\n                    e.stop();\n                    break;\n\n                case 'kronolithQuickinsertForm':\n                    this.quickSaveEvent();\n                    e.stop();\n                    break;\n\n                case 'kronolithCalendarForminternal':\n                case 'kronolithCalendarFormtasklists':\n                case 'kronolithCalendarFormremote':\n                    // Disabled for now, we have to also catch Continue buttons.\n                    //var saveButton = form.down('.kronolithCalendarSave');\n                    //saveButton.disable();\n                    //if (!this.saveCalendar(form)) {\n                    //    saveButton.enable();\n                    //}\n                    //e.stop();\n                    break;\n                }\n                break;\n\n            case Event.KEY_ESC:\n                switch (form.identify()) {\n                case 'kronolithQuickinsertForm':\n                    this.quickClose();\n                    break;\n                case 'kronolithEventForm':\n                    Horde_Calendar.hideCal();\n                    this.closeRedBox();\n                    this.go(this.lastLocation);\n                    break;\n                }\n                break;\n            }\n\n            return;\n        }\n\n        switch (kc) {\n        case Event.KEY_ESC:\n            Horde_Calendar.hideCal();\n            this.closeRedBox();\n            break;\n        }\n    },\n\n    keyupHandler: function(e)\n    {\n        switch (e.element().readAttribute('id')) {\n        case 'kronolithEventLocation':\n            if ($F('kronolithEventLocation') && Kronolith.conf.maps.driver) {\n                $('kronolithEventMapLink').show();\n            } else if (Kronolith.conf.maps.driver) {\n                $('kronolithEventMapLink').hide();\n                this.removeMapMarker();\n            }\n            return;\n\n        case 'kronolithEventStartTime':\n        case 'kronolithEventEndTime':\n            var field = $(e.element().readAttribute('id')), kc = e.keyCode;\n\n            switch(e.keyCode) {\n            case Event.KEY_UP:\n            case Event.KEY_DOWN:\n            case Event.KEY_RIGHT:\n            case Event.KEY_LEFT:\n                return;\n            default:\n                if ($F(field) !== this.knl[field.identify()].getCurrentEntry()) {\n                    this.knl[field.identify()].markSelected(null);\n                }\n                return;\n            }\n        }\n\n    },\n\n    clickHandler: function(e, dblclick)\n    {\n        if (e.isRightClick() || typeof e.element != 'function') {\n            return;\n        }\n\n        var elt = e.element(),\n            orig = e.element(),\n            id, tmp, calendar;\n\n        while (Object.isElement(elt)) {\n            id = elt.readAttribute('id');\n\n            switch (id) {\n            case 'kronolithLogo':\n                if (Kronolith.conf.URI_HOME) {\n                    this.redirect(Kronolith.conf.URI_HOME);\n                } else {\n                    this.go(Kronolith.conf.login_view);\n                }\n                e.stop();\n                return;\n\n            case 'kronolithNewEvent':\n                this.go('event');\n                e.stop();\n                return;\n\n            case 'kronolithNewTask':\n                this.go('task');\n                e.stop();\n                return;\n\n            case 'kronolithQuickEvent':\n                this.updateCalendarDropDown('kronolithQuickinsertCalendars');\n                $('kronolithQuickinsertCalendars').setValue(Kronolith.conf.default_calendar);\n                $('kronolithQuickinsert').appear({\n                    duration: this.effectDur,\n                    afterFinish: function() {\n                        $('kronolithQuickinsertQ').focus();\n                    }\n                });\n                e.stop();\n                return;\n\n            case 'kronolithQuickinsertSave':\n                this.quickSaveEvent();\n                e.stop();\n                return;\n\n            case 'kronolithQuickinsertCancel':\n                this.quickClose();\n                e.stop();\n                return;\n\n            case 'kronolithEventAllday':\n                this.toggleAllDay();\n                break;\n\n            case 'kronolithEventAlarmDefaultOn':\n                this.disableAlarmMethods('Event');\n                break;\n\n            case 'kronolithTaskAlarmDefaultOn':\n                this.disableAlarmMethods('Task');\n                break;\n\n            case 'kronolithEventAlarmPrefs':\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                this.go('prefs', { app: 'kronolith', group: 'notification' });\n                e.stop();\n                break;\n\n            case 'kronolithTaskAlarmPrefs':\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                this.go('prefs', { app: 'nag', group: 'notification' });\n                e.stop();\n                break;\n\n            case 'kronolithEventLinkNone':\n            case 'kronolithEventLinkDaily':\n            case 'kronolithEventLinkWeekly':\n            case 'kronolithEventLinkMonthly':\n            case 'kronolithEventLinkYearly':\n            case 'kronolithEventLinkLength':\n                this.toggleRecurrence(id.substring(18));\n                break;\n\n            case 'kronolithEventRepeatDaily':\n            case 'kronolithEventRepeatWeekly':\n            case 'kronolithEventRepeatMonthly':\n            case 'kronolithEventRepeatYearly':\n            case 'kronolithEventRepeatLength':\n                this.toggleRecurrence(id.substring(20));\n                break;\n\n            case 'kronolithEventSave':\n                if (!elt.disabled) {\n                    this.saveEvent();\n                }\n                e.stop();\n                break;\n\n            case 'kronolithEventSaveAsNew':\n                if (!elt.disabled) {\n                    this.saveEvent(true);\n                }\n                e.stop();\n                break;\n\n            case 'kronolithTaskSave':\n                if (!elt.disabled) {\n                    this.saveTask();\n                }\n                e.stop();\n                break;\n\n            case 'kronolithEventDelete':\n                $('kronolithEventDiv').hide();\n                $('kronolithDeleteDiv').show();\n                break;\n\n            case 'kronolithEventDeleteCancel':\n                $('kronolithDeleteDiv').hide();\n                $('kronolithEventDiv').show();\n                return;\n\n            case 'kronolithEventDeleteConfirm':\n                if (elt.disabled) {\n                    e.stop();\n                    break;\n                }\n\n                elt.disable();\n                var cal = $F('kronolithEventCalendar'),\n                    eventid = $F('kronolithEventId');\n                this.kronolithBody.select('div').findAll(function(el) {\n                    return el.retrieve('calendar') == cal &&\n                        el.retrieve('eventid') == eventid;\n                }).invoke('hide');\n                this.doAction('deleteEvent',\n                              { cal: cal, id: eventid },\n                              function(r) {\n                                  if (r.response.deleted) {\n                                      var days;\n                                      if ((this.view == 'month' &&\n                                           Kronolith.conf.max_events) ||\n                                          this.view == 'week' ||\n                                          this.view == 'day') {\n                                          days = this.findEventDays(cal, eventid);\n                                      }\n                                      this.removeEvent(cal, eventid);\n                                      if (r.response.uid) {\n                                          this.removeException(cal, r.response.uid);\n                                      }\n                                      if (days && days.length) {\n                                          this.reRender(days);\n                                      }\n                                  } else {\n                                      elt.enable();\n                                      this.kronolithBody.select('div').findAll(function(el) {\n                                          return el.retrieve('calendar') == cal &&\n                                              el.retrieve('eventid') == eventid;\n                                      }).invoke('show');\n                                  }\n                              }.bind(this));\n                $('kronolithDeleteDiv').hide();\n                $('kronolithEventDiv').show();\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                e.stop();\n                break;\n\n            case 'kronolithTaskDelete':\n                if (elt.disabled) {\n                    e.stop();\n                    break;\n                }\n\n                elt.disable();\n                var tasklist = $F('kronolithTaskOldList'),\n                    taskid = $F('kronolithTaskId');\n                this.doAction('deleteTask',\n                              { list: tasklist, id: taskid },\n                              function(r) {\n                                  if (r.response.deleted) {\n                                      this.removeTask(tasklist, taskid);\n                                  } else {\n                                      elt.enable();\n                                      $('kronolithViewTasksBody').select('tr').find(function(el) {\n                                          return el.retrieve('tasklist') == tasklist &&\n                                              el.retrieve('taskid') == taskid;\n                                      }).toggle();\n                                  }\n                              }.bind(this));\n                var taskrow = $('kronolithViewTasksBody').select('tr').find(function(el) {\n                    return el.retrieve('tasklist') == tasklist &&\n                        el.retrieve('taskid') == taskid;\n                });\n                if (taskrow) {\n                    taskrow.hide();\n                }\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                e.stop();\n                break;\n\n            case 'kronolithCinternalPMore':\n            case 'kronolithCinternalPLess':\n            case 'kronolithCtasklistsPMore':\n            case 'kronolithCtasklistsPLess':\n                var type = id.match(/kronolithC(.*)P/)[1];\n                $('kronolithC' + type + 'PBasic').toggle();\n                $('kronolithC' + type + 'PAdvanced').toggle();\n                e.stop();\n                break;\n\n            case 'kronolithCinternalPNone':\n            case 'kronolithCinternalPAll':\n            case 'kronolithCinternalPG':\n            case 'kronolithCinternalPU':\n            case 'kronolithCtasklistsPNone':\n            case 'kronolithCtasklistsPAll':\n            case 'kronolithCtasklistsPG':\n            case 'kronolithCtasklistsPU':\n                var info = id.match(/kronolithC(.*)P(.*)/);\n                this.permsClickHandler(info[1], info[2]);\n                break;\n\n            case 'kronolithCinternalPAllShow':\n            case 'kronolithCtasklistsPAllShow':\n                var type = id.match(/kronolithC(.*)P/)[1];\n                this.permsClickHandler(type, 'All');\n                break;\n\n            case 'kronolithCinternalPAdvanced':\n            case 'kronolithCtasklistsPAdvanced':\n                var type = id.match(/kronolithC(.*)P/)[1];\n                if (orig.tagName != 'INPUT') {\n                    break;\n                }\n                this.activateAdvancedPerms(type);\n                if (orig.name.match(/u_.*||new/)) {\n                    this.insertGroupOrUser(type, 'user');\n                }\n                break;\n\n            case 'kronolithCinternalPUAdd':\n            case 'kronolithCinternalPGAdd':\n            case 'kronolithCtasklistsPUAdd':\n            case 'kronolithCtasklistsPGAdd':\n                var info = id.match(/kronolithC(.*)P(.)/);\n                this.insertGroupOrUser(info[1], info[2] == 'U' ? 'user' : 'group');\n                break;\n\n            case 'kronolithNavDay':\n            case 'kronolithNavWeek':\n            case 'kronolithNavMonth':\n            case 'kronolithNavYear':\n            case 'kronolithNavAgenda':\n                this.go(id.substring(12).toLowerCase() + ':' + this.date.dateString());\n                e.stop();\n                return;\n\n            case 'kronolithNavTasks':\n                this.go('tasks');\n                e.stop();\n                return;\n\n            case 'kronolithTasksAll':\n            case 'kronolithTasksComplete':\n            case 'kronolithTasksIncomplete':\n            case 'kronolithTasksFuture':\n                this.go('tasks:' + id.substring(14).toLowerCase());\n                e.stop();\n                return;\n\n            case 'kronolithOptions':\n                this.go('prefs');\n                e.stop();\n                return;\n\n            case 'kronolithLogout':\n                this.logout();\n                e.stop();\n                return;\n\n            case 'kronolithMinicalDate':\n                this.go('month:' + orig.retrieve('date'));\n                e.stop();\n                return;\n\n            case 'kronolithMinical':\n                if (orig.id == 'kronolithMinicalPrev') {\n                    var date = this.parseDate($('kronolithMinicalDate').retrieve('date'));\n                    date.previous().month();\n                    this.updateMinical(date, date.getMonth() == this.date.getMonth() ? this.view : undefined);\n                    e.stop();\n                    return;\n                }\n                if (orig.id == 'kronolithMinicalNext') {\n                    var date = this.parseDate($('kronolithMinicalDate').retrieve('date'));\n                    date.next().month();\n                    this.updateMinical(date, date.getMonth() == this.date.getMonth() ? this.view : null);\n                    e.stop();\n                    return;\n                }\n\n                var tmp = orig;\n                if (tmp.tagName != 'td') {\n                    tmp.up('td');\n                }\n                if (tmp) {\n                    if (tmp.retrieve('weekdate') &&\n                        tmp.hasClassName('kronolithMinicalWeek')) {\n                        this.go('week:' + tmp.retrieve('weekdate'));\n                    } else if (tmp.retrieve('date') &&\n                               !tmp.hasClassName('empty')) {\n                        this.go('day:' + tmp.retrieve('date'));\n                    }\n                }\n                e.stop();\n                return;\n\n            case 'kronolithEventsDay':\n                var date = this.date.clone();\n                date.add(Math.round((e.pointerY() - elt.cumulativeOffset().top + elt.up('.kronolithViewBody').scrollTop) / this.daySizes.height * 2) * 30).minutes();\n                this.go('event:' + date.toString('yyyyMMddHHmm'));\n                e.stop();\n                return;\n\n            case 'kronolithViewMonth':\n                if (orig.hasClassName('kronolithFirstCol')) {\n                    var date = orig.retrieve('date');\n                    if (date) {\n                        this.go('week:' + date);\n                        e.stop();\n                        return;\n                    }\n                }\n                e.stop();\n                return;\n\n            case 'kronolithViewYear':\n                var tmp = orig;\n                if (tmp.tagName != 'td') {\n                    tmp.up('td');\n                }\n                if (tmp) {\n                    if (tmp.retrieve('weekdate') &&\n                        tmp.hasClassName('kronolithMinicalWeek')) {\n                        this.go('week:' + tmp.retrieve('weekdate'));\n                    } else if (tmp.hasClassName('kronolithMinicalDate')) {\n                        this.go('month:' + tmp.retrieve('date'));\n                    } else if (tmp.retrieve('date') &&\n                               !tmp.hasClassName('empty')) {\n                        this.go('day:' + tmp.retrieve('date'));\n                    }\n                }\n                e.stop();\n                return;\n\n            case 'kronolithViewAgendaBody':\n                var tmp = orig;\n                if (tmp.tagName != 'TR') {\n                    tmp = tmp.up('tr');\n                }\n                if (tmp && tmp.retrieve('date')) {\n                    this.go('day:' + tmp.retrieve('date'));\n                }\n                e.stop();\n                return;\n\n            case 'kronolithSearchButton':\n                this.go('search:' + this.search + ':' + $F('kronolithSearchTerm'));\n                e.stop();\n                break;\n\n            case 'kronolithSearchFuture':\n                if (this.search != 'future') {\n                    this.go('search:future:' + $F('kronolithSearchTerm'));\n                }\n                e.stop();\n                break;\n\n            case 'kronolithSearchPast':\n                if (this.search != 'past') {\n                    this.go('search:past:' + $F('kronolithSearchTerm'));\n                }\n                e.stop();\n                break;\n\n            case 'kronolithSearchAll':\n                if (this.search != 'all') {\n                    this.go('search:all:' + $F('kronolithSearchTerm'));\n                }\n                e.stop();\n                break;\n\n            case 'kronolithNotifications':\n                this.Growler.toggleLog();\n                break;\n\n            case 'kronolithEventDialog':\n            case 'kronolithTaskDialog':\n                Horde_Calendar.hideCal();\n                return;\n\n            case 'kronolithCalendarDialog':\n                if (this.colorPicker) {\n                    this.colorPicker.hide();\n                }\n                return;\n            }\n\n            // Caution, this only works if the element has definitely only a\n            // single CSS class.\n            switch (elt.className) {\n            case 'kronolithDateChoice':\n            case 'kronolithGotoToday':\n                var view = this.view;\n                if (!$w('day week month year agenda').include(view)) {\n                    view = Kronolith.conf.login_view;\n                }\n                this.go(view + ':' + new Date().dateString());\n                e.stop();\n                return;\n\n            case 'kronolithPrev':\n            case 'kronolithNext':\n                var newDate = this.date.clone(),\n                    offset = elt.className == 'kronolithPrev' ? -1 : 1;\n                switch (this.view) {\n                case 'day':\n                case 'agenda':\n                    newDate.add(offset).day();\n                    break;\n                case 'week':\n                    newDate.add(offset).week();\n                    break;\n                case 'month':\n                    newDate.add(offset).month();\n                    break;\n                case 'year':\n                    newDate.add(offset).year();\n                    break;\n                }\n                this.go(this.view + ':' + newDate.dateString());\n                e.stop();\n                return;\n\n            case 'kronolithAdd':\n                this.go('calendar:' + id.replace(/kronolithAdd/, ''));\n                e.stop();\n                return;\n\n            case 'kronolithTabLink':\n                this.openTab(elt);\n                e.stop();\n                break;\n\n            case 'kronolithFormCancel':\n                this.closeRedBox();\n                this.resetMap();\n                this.go(this.lastLocation);\n                e.stop();\n                break;\n\n            case 'kronolithEventTag':\n                this.eventTagAc.addNewItemNode(elt.getText());\n                e.stop();\n                break;\n\n            case 'kronolithCalendarTag':\n                this.calendarTagAc.addNewItemNode(elt.getText());\n                e.stop();\n                break;\n\n            case 'kronolithEventGeo':\n                this.initializeMap(true);\n                this.geocode($F('kronolithEventLocation'));\n                e.stop();\n                break;\n\n            case 'kronolithTaskRow':\n                if (elt.retrieve('taskid')) {\n                    this.go('task:' + elt.retrieve('tasklist') + ':' + elt.retrieve('taskid'));\n                }\n                e.stop();\n                return;\n\n            case 'kronolithCalEdit':\n                this.go('calendar:' + elt.next().retrieve('calendarclass') + '|' + elt.next().retrieve('calendar'));\n                e.stop();\n                return;\n\n            case 'kronolithMore':\n                this.go('day:' + elt.retrieve('date'));\n                e.stop();\n                return;\n\n            case 'kronolithDatePicker':\n                id = elt.readAttribute('id');\n                Horde_Calendar.open(id, Date.parseExact($F(id.replace(/Picker$/, 'Date')), Kronolith.conf.date_format));\n                e.stop();\n                return;\n\n            case 'kronolithColorPicker':\n                var input = elt.previous();\n                this.colorPicker = new ColorPicker({\n                    color: $F(input),\n                    offsetParent: elt,\n                    update: [[input, 'value'],\n                             [input, 'background']]\n                });\n                e.stop();\n                return;\n            }\n\n            if (elt.hasClassName('kronolithEvent')) {\n                if (!Object.isUndefined(elt.retrieve('ajax'))) {\n                    this.go(elt.retrieve('ajax'));\n                } else {\n                    this.go('event:' + elt.retrieve('calendar') + ':' + elt.retrieve('eventid') + ':' + elt.up().retrieve('date'));\n                }\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithMonthDay')) {\n                if (orig.hasClassName('kronolithDay')) {\n                    var date = orig.retrieve('date');\n                    if (date) {\n                        this.go('day:' + date);\n                        e.stop();\n                        return;\n                    }\n                }\n                this.go('event:' + elt.retrieve('date'));\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithWeekDay')) {\n                this.go('day:' + elt.retrieve('date'));\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithEventsWeek') ||\n                       elt.hasClassName('kronolithAllDayContainer')) {\n                var date = elt.retrieve('date');\n                if (elt.hasClassName('kronolithAllDayContainer')) {\n                    date += 'all';\n                } else {\n                    date = this.parseDate(date);\n                    date.add(Math.round((e.pointerY() - elt.cumulativeOffset().top + elt.up('.kronolithViewBody').scrollTop) / this.weekSizes.height * 2) * 30).minutes();\n                    date = date.toString('yyyyMMddHHmm');\n                }\n                this.go('event:' + date);\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithTaskCheckbox')) {\n                var taskid = elt.up('tr.kronolithTaskRow', 0).retrieve('taskid'),\n                    tasklist = elt.up('tr.kronolithTaskRow', 0).retrieve('tasklist');\n                this.toggleCompletionClass(taskid);\n                this.doAction('toggleCompletion',\n                              { list: tasklist, id: taskid },\n                              function(r) {\n                                  if (r.response.toggled) {\n                                      this.toggleCompletion(tasklist, taskid);\n                                  } else {\n                                      this.toggleCompletionClass(taskid);\n                                  }\n                              }.bind(this));\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithCalendarSave')) {\n                if (!elt.disabled) {\n                    elt.disable();\n                    if (!this.saveCalendar(elt.up('form'))) {\n                        elt.enable();\n                    }\n                }\n                e.stop();\n                break;\n            } else if (elt.hasClassName('kronolithCalendarContinue')) {\n                if (elt.disabled) {\n                    e.stop();\n                    break;\n                }\n\n                elt.disable();\n                var form = elt.up('form'),\n                    type = form.id.replace(/kronolithCalendarForm/, ''),\n                    i = 1;\n                while (!$('kronolithCalendar' + type + i).visible()) {\n                    i++;\n                }\n                if (type == 'remote') {\n                    var params = { url: $F('kronolithCalendarremoteUrl') };\n                    if (i == 1) {\n                        if (!$F('kronolithCalendarremoteUrl')) {\n                            this.showNotifications([ { type: 'horde.warning', message: Kronolith.text.no_url }]);\n                            e.stop();\n                            break;\n                        }\n                        this.doAction('getRemoteInfo',\n                                      params,\n                                      function(r) {\n                                          if (r.response.success) {\n                                              if (r.response.name) {\n                                                  $('kronolithCalendarremoteName').setValue(r.response.name);\n                                              }\n                                              if (r.response.desc) {\n                                                  $('kronolithCalendarremoteDescription').setValue(r.response.desc);\n                                              }\n                                              this.calendarNext(type);\n                                              this.calendarNext(type);\n                                          } else if (r.response.auth) {\n                                              this.calendarNext(type);\n                                          } else {\n                                              elt.enable();\n                                          }\n                                      }.bind(this),\n                                      { asynchronous: false });\n                    }\n                    if (i == 2) {\n                        if ($F('kronolithCalendarremoteUsername')) {\n                            params.user = $F('kronolithCalendarremoteUsername');\n                            params.password =  $F('kronolithCalendarremotePassword');\n                        }\n                        this.doAction('getRemoteInfo',\n                                      params,\n                                      function(r) {\n                                          if (r.response.success) {\n                                              if (r.response.name &&\n                                                  !$F('kronolithCalendarremoteName')) {\n                                                  $('kronolithCalendarremoteName').setValue(r.response.name);\n                                              }\n                                              if (r.response.desc &&\n                                                  !$F('kronolithCalendarremoteDescription')) {\n                                                  $('kronolithCalendarremoteDescription').setValue(r.response.desc);\n                                              }\n                                              this.calendarNext(type);\n                                          } else if (r.response.auth) {\n                                              this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.wrong_auth }]);\n                                              elt.enable();\n                                          } else {\n                                              elt.enable();\n                                          }\n                                      }.bind(this));\n                    }\n                    e.stop();\n                    break;\n                }\n                this.calendarNext(type);\n                e.stop();\n                break;\n            } else if (elt.hasClassName('kronolithCalendarDelete')) {\n                var form = elt.up('form'),\n                    type = form.id.replace(/kronolithCalendarForm/, ''),\n                    calendar = $F('kronolithCalendar' + type + 'Id');\n\n                if ((type == 'tasklists' &&\n                     !window.confirm(Kronolith.text.delete_tasklist)) ||\n                    (type != 'tasklists' &&\n                     !window.confirm(Kronolith.text.delete_calendar))) {\n                    e.stop();\n                    break;\n                }\n\n                if (!elt.disabled) {\n                    elt.disable();\n                    this.doAction('deleteCalendar',\n                                  { type: type, calendar: calendar },\n                                  function(r) {\n                                      if (r.response.deleted) {\n                                          this.deleteCalendar(type, calendar);\n                                      }\n                                      this.closeRedBox();\n                                      this.go(this.lastLocation);\n                                  }.bind(this));\n                }\n                e.stop();\n                break;\n            } else if (elt.hasClassName('kronolithCalendarSubscribe') ||\n                       elt.hasClassName('kronolithCalendarUnsubscribe')) {\n                var form = elt.up('form');\n                this.toggleCalendar($F(form.down('input[name=type]')),\n                                    $F(form.down('input[name=calendar]')));\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                e.stop();\n                break;\n            } else if (elt.tagName == 'INPUT' &&\n                       (elt.name == 'event_alarms[]' ||\n                        elt.name == 'task[alarm_methods][]')) {\n                if (elt.name == 'event_alarms[]') {\n                    $('kronolithEventAlarmOn').setValue(1);\n                    $('kronolithEventAlarmDefaultOff').setValue(1);\n                } else {\n                    $('kronolithTaskAlarmOn').setValue(1);\n                    $('kronolithTaskAlarmDefaultOff').setValue(1);\n                }\n                if ($(elt.id + 'Params')) {\n                    if (elt.getValue()) {\n                        $(elt.id + 'Params').show();\n                    } else {\n                        $(elt.id + 'Params').hide();\n                    }\n                }\n                break;\n            }\n\n            var calClass = elt.retrieve('calendarclass');\n            if (calClass) {\n                this.toggleCalendar(calClass, elt.retrieve('calendar'));\n                e.stop();\n                return;\n            }\n\n            elt = elt.up();\n        }\n        // Workaround Firebug bug.\n        Prototype.emptyFunction();\n    },\n\n    /**\n     * Handles date selections from a date picker.\n     */\n    datePickerHandler: function(e)\n    {\n        var field = e.element().previous();\n        field.setValue(e.memo.toString(Kronolith.conf.date_format));\n        this.updateTimeFields(field.identify());\n    },\n\n    /**\n     * Handles moving an event to a different day in month view.\n     */\n    onDrop: function(e)\n    {\n        var drop = e.element(),\n            el = e.memo.element;\n\n        if (drop == el.up()) {\n            return;\n        }\n\n        var lastDate = this.parseDate(el.up().retrieve('date')),\n            newDate = this.parseDate(drop.retrieve('date')),\n            diff = newDate.subtract(lastDate),\n            eventid = el.retrieve('eventid'),\n            cal = el.retrieve('calendar'),\n            viewDates = this.viewDates(this.date, this.view),\n            start = viewDates[0].toString('yyyyMMdd'),\n            end = viewDates[1].toString('yyyyMMdd'),\n            sig = start + end + (Math.random() + '').slice(2),\n            events = this.getCacheForDate(lastDate.toString('yyyyMMdd'), cal),\n            attributes = $H({ offDays: diff }),\n            event = events.find(function(e) { return e.key == eventid; });\n\n        drop.insert(el);\n        this.startLoading(cal, sig);\n        if (event.value.r) {\n            attributes.set('rday', lastDate);\n            attributes.set('cstart', this.cacheStart);\n            attributes.set('cend', this.cacheEnd);\n        }\n        this.doAction('updateEvent',\n                      {\n                          cal: cal,\n                          id: eventid,\n                          view: this.view,\n                          sig: sig,\n                          view_start: start,\n                          view_end: end,\n                          att: Object.toJSON(attributes)\n                      },\n                      function(r) {\n                          if (r.response.events) {\n                              // Check if this is the still the result of the\n                              // most current request.\n                              if (r.response.sig == this.eventsLoading[r.response.cal]) {\n                                  var days;\n                                  if ((this.view == 'month' &&\n                                       Kronolith.conf.max_events) ||\n                                      this.view == 'week' ||\n                                      this.view == 'day') {\n                                      days = this.findEventDays(cal, eventid);\n                                  }\n                                  this.removeEvent(cal, eventid);\n                                  if (days && days.length) {\n                                      this.reRender(days);\n                                  }\n                              }\n                              $H(r.response.events).each(function(days) {\n                                  $H(days.value).each(function(event) {\n                                      if (event.value.c.startsWith('tasks/')) {\n                                          var tasklist = event.value.c.substr(6),\n                                              task = event.key.substr(6),\n                                              taskObject;\n                                          if (this.tcache.get('incomplete') &&\n                                              this.tcache.get('incomplete').get(tasklist) &&\n                                              this.tcache.get('incomplete').get(tasklist).get(task)) {\n                                              taskObject = this.tcache.get('incomplete').get(tasklist).get(task);\n                                              taskObject.due = Date.parse(event.value.s);\n                                              this.tcache.get('incomplete').get(tasklist).set(task, taskObject);\n                                          }\n                                      }\n                                  }, this);\n                              }, this);\n                          }\n                          this.loadEventsCallback(r, false);\n                      }.bind(this));\n    },\n\n    onDragStart: function(e)\n    {\n        if (this.view == 'month') {\n            return;\n        }\n\n        var elt = e.element();\n\n        if (elt.hasClassName('kronolithDragger')) {\n            elt.up().addClassName('kronolithSelected');\n            DragDrop.Drags.getDrag(elt).top = elt.cumulativeOffset().top;\n        } else if (elt.hasClassName('kronolithEditable')) {\n            elt.addClassName('kronolithSelected').setStyle({ left: 0, width: this.view == 'week' ? '90%' : '95%', zIndex: 1 });\n        }\n\n        this.scrollTop = $(this.view == 'day' ? 'kronolithViewDay' : 'kronolithViewWeek').down('.kronolithViewBody').scrollTop;\n        this.scrollLast = this.scrollTop;\n    },\n\n    onDrag: function(e)\n    {\n        if (this.view == 'month') {\n            return;\n        }\n\n        var elt = e.element(),\n            drag = DragDrop.Drags.getDrag(elt),\n            event = drag.event.value,\n            storage = this.view + 'Sizes',\n            step = this[storage].height / 6;\n\n        if (elt.hasClassName('kronolithDragger')) {\n            // Resizing the event.\n            var div = elt.up(),\n                top = drag.ghost.cumulativeOffset().top,\n                scrollTop = $(this.view == 'day' ? 'kronolithViewDay' : 'kronolithViewWeek').down('.kronolithViewBody').scrollTop,\n                offset = 0,\n                height;\n\n            // Check if view has scrolled since last call.\n            if (scrollTop != this.scrollLast) {\n                offset = scrollTop - this.scrollLast;\n                this.scrollLast = scrollTop;\n            }\n            if (elt.hasClassName('kronolithDraggerTop')) {\n                offset += top - drag.top;\n                height = div.offsetHeight - offset;\n                div.setStyle({\n                    top: (div.offsetTop + offset) + 'px'\n                });\n                offset = drag.ghost.offsetTop;\n                drag.top = top;\n            } else {\n                offset += top - drag.top;\n                height = div.offsetHeight + offset;\n                offset = div.offsetTop;\n                drag.top = top;\n            }\n            div.setStyle({\n                height: height + 'px'\n            });\n\n            this.calculateEventDates(event, storage, step, offset, height);\n            drag.innerDiv.update('(' + event.start.toString(Kronolith.conf.time_format) + ' - ' + event.end.toString(Kronolith.conf.time_format) + ') ' + event.t.escapeHTML());\n        } else if (elt.hasClassName('kronolithEditable')) {\n            // Moving the event.\n            if (Object.isUndefined(drag.innerDiv)) {\n                drag.innerDiv = drag.ghost.down('.kronolithEventInfo');\n            }\n            if (this.view == 'week') {\n                var offsetX = Math.round(drag.ghost.offsetLeft / drag.stepX);\n                event.offsetDays = offsetX;\n                this.calculateEventDates(event, storage, step, drag.ghost.offsetTop, drag.divHeight, event.start.clone().addDays(offsetX), event.end.clone().addDays(offsetX));\n            } else {\n                event.offsetDays = 0;\n                this.calculateEventDates(event, storage, step, drag.ghost.offsetTop, drag.divHeight);\n            }\n            event.offsetTop = drag.ghost.offsetTop - drag.startTop;\n            drag.innerDiv.update('(' + event.start.toString(Kronolith.conf.time_format) + ' - ' + event.end.toString(Kronolith.conf.time_format) + ') ' + event.t.escapeHTML());\n            elt.clonePosition(drag.ghost, { offsetLeft: this.view == 'week' ? -2 : 0 });\n        }\n    },\n\n    onDragEnd: function(e)\n    {\n        if (this.view == 'month') {\n            return;\n        }\n\n        if (!e.element().hasClassName('kronolithDragger') &&\n            !e.element().hasClassName('kronolithEditable')) {\n            return;\n        }\n\n        var div = e.element(),\n            drag = DragDrop.Drags.getDrag(div),\n            event = drag.event,\n            date = drag.midnight,\n            storage = this.view + 'Sizes',\n            step = this[storage].height / 6,\n            dates = this.viewDates(date, this.view),\n            start = dates[0].dateString(),\n            end = dates[1].dateString(),\n            sig = start + end + (Math.random() + '').slice(2),\n            element, attributes;\n\n        div.removeClassName('kronolithSelected');\n        if (!Object.isUndefined(drag.innerDiv)) {\n            this.setEventText(drag.innerDiv, event.value);\n        }\n        this.startLoading(event.value.calendar, sig);\n        if (!Object.isUndefined(event.value.offsetTop)) {\n            attributes = $H({ offDays: event.value.offsetDays,\n                              offMins: event.value.offsetTop / step * 10 });\n            element = div;\n        } else if (div.hasClassName('kronolithDraggerTop')) {\n            attributes = $H({ start: event.value.start });\n            element = div.up();\n        } else if (div.hasClassName('kronolithDraggerBottom')) {\n            attributes = $H({ end: event.value.end });\n            element = div.up();\n        } else {\n            attributes = $H({ start: event.value.start,\n                              end: event.value.end });\n            element = div;\n        }\n        if (event.value.r) {\n            attributes.set('rstart', event.value.s);\n            attributes.set('rend', event.value.e);\n            attributes.set('cstart', this.cacheStart);\n            attributes.set('cend', this.cacheEnd);\n        }\n\n        element.retrieve('drags').invoke('destroy');\n\n        this.doAction(\n            'updateEvent',\n            {\n                cal: event.value.calendar,\n                id: event.key,\n                view: this.view,\n                sig: sig,\n                view_start: start,\n                view_end: end,\n                att: Object.toJSON(attributes)\n            },\n            function(r) {\n                // Check if this is the still the result of the most current\n                // request.\n                if (r.response.events &&\n                    r.response.sig == this.eventsLoading[r.response.cal]) {\n                    this.removeEvent(event.value.calendar, event.key);\n                }\n                this.loadEventsCallback(r, false);\n            }.bind(this));\n    },\n\n    editEvent: function(calendar, id, date, title)\n    {\n        if (this.redBoxLoading) {\n            return;\n        }\n        if (Object.isUndefined(this.eventTagAc)) {\n            this.editEvent.bind(this, calendar, id, date).defer();\n            return;\n        }\n\n        this.closeRedBox();\n        this.quickClose();\n        this.redBoxOnDisplay = RedBox.onDisplay;\n        RedBox.onDisplay = function() {\n            if (this.redBoxOnDisplay) {\n                this.redBoxOnDisplay();\n            }\n            try {\n                $('kronolithEventForm').focusFirstElement();\n            } catch(e) {}\n            if (Kronolith.conf.maps.driver &&\n                $('kronolithEventLinkMap').up().hasClassName('activeTab') &&\n                !this.mapInitialized) {\n\n                this.initializeMap();\n            }\n            RedBox.onDisplay = this.redBoxOnDisplay;\n        }.bind(this);\n\n        this.updateCalendarDropDown('kronolithEventTarget');\n        this.toggleAllDay(false);\n        this.openTab($('kronolithEventForm').down('.tabset a.kronolithTabLink'));\n        this.disableAlarmMethods('Event');\n        this.knl.kronolithEventStartTime.markSelected();\n        this.knl.kronolithEventEndTime.markSelected();\n        $('kronolithEventForm').reset();\n        this.resetMap();\n        this.attendeesAc.reset();\n        this.eventTagAc.reset();\n        $('kronolithEventAttendeesList').select('tr').invoke('remove');\n        if (Kronolith.conf.maps.driver) {\n            $('kronolithEventMapLink').hide();\n        }\n        $('kronolithEventSave').show().enable();\n        $('kronolithEventSaveAsNew').show().enable();\n        $('kronolithEventDelete').show().enable();\n        $('kronolithEventDeleteConfirm').enable();\n        $('kronolithEventTarget').show();\n        $('kronolithEventTargetRO').hide();\n        $('kronolithEventForm').down('.kronolithFormActions .kronolithSeparator').show();\n        if (id) {\n            RedBox.loading();\n            this.doAction('getEvent', { cal: calendar, id: id, date: date }, this.editEventCallback.bind(this));\n            $('kronolithEventTopTags').update();\n        } else {\n            this.doAction('listTopTags', null, this.topTagsCallback.curry('kronolithEventTopTags', 'kronolithEventTag'));\n            var d;\n            if (date) {\n                if (date.endsWith('all')) {\n                    date = date.substring(0, date.length - 3);\n                    $('kronolithEventAllday').setValue(true);\n                    this.toggleAllDay(true);\n                }\n                d = this.parseDate(date);\n            } else {\n                d = new Date();\n            }\n            if (title) {\n                $('kronolithEventTitle').setValue(title);\n            }\n            $('kronolithEventId').clear();\n            $('kronolithEventCalendar').clear();\n            $('kronolithEventTarget').setValue(Kronolith.conf.default_calendar);\n            $('kronolithEventDelete').hide();\n            $('kronolithEventStartDate').setValue(d.toString(Kronolith.conf.date_format));\n            $('kronolithEventStartTime').setValue(d.toString(Kronolith.conf.time_format));\n            d.add(1).hour();\n            this.duration = 60;\n            $('kronolithEventEndDate').setValue(d.toString(Kronolith.conf.date_format));\n            $('kronolithEventEndTime').setValue(d.toString(Kronolith.conf.time_format));\n            $('kronolithEventLinkExport').up('span').hide();\n            $('kronolithEventSaveAsNew').hide();\n            this.toggleRecurrence('None');\n            this.enableAlarm('Event', Kronolith.conf.default_alarm);\n            this.redBoxLoading = true;\n            RedBox.showHtml($('kronolithEventDialog').show());\n        }\n    },\n\n    /**\n     * Generates ajax request parameters for requests to save events.\n     *\n     * @return object  An object with request parameters.\n     */\n    saveEventParams: function()\n    {\n        var start, end, sig,\n            viewDates = this.viewDates(this.date, this.view),\n            params = { sig: viewDates[0].dateString() + viewDates[1].dateString() };\n        if (this.cacheStart) {\n            start = this.cacheStart.dateString();\n            end = this.cacheEnd.dateString();\n            params.view_start = start;\n            params.view_end = end;\n        }\n        params.view = this.view;\n        return params;\n    },\n\n    /**\n     * Submits the event edit form to create or update an event.\n     */\n    saveEvent: function(asnew)\n    {\n        if (this.wrongFormat.size()) {\n            this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.fix_form_values }]);\n            return;\n        }\n\n        var cal = $F('kronolithEventCalendar'),\n            target = $F('kronolithEventTarget'),\n            eventid = $F('kronolithEventId'),\n            params;\n\n        if (this.mapInitialized) {\n            $('kronolithEventMapZoom').value = this.map.getZoom();\n        }\n\n        params = $H($('kronolithEventForm').serialize({ hash: true }))\n            .merge(this.saveEventParams());\n        params.set('as_new', asnew ? 1 : 0);\n\n        this.eventTagAc.shutdown();\n        $('kronolithEventSave').disable();\n        $('kronolithEventSaveAsNew').disable();\n        $('kronolithEventDelete').disable();\n        this.startLoading(target, params.get('sig'));\n        this.doAction('saveEvent',\n                      params,\n                      function(r) {\n                          if (!asnew && r.response.events && eventid) {\n                              this.removeEvent(cal, eventid);\n                          }\n                          this.loadEventsCallback(r, false);\n                          if (r.response.events) {\n                              this.resetMap();\n                              this.closeRedBox();\n                              this.go(this.lastLocation);\n                          } else {\n                              $('kronolithEventSave').enable();\n                              $('kronolithEventSaveAsNew').enable();\n                              $('kronolithEventDelete').enable();\n                          }\n                      }.bind(this));\n    },\n\n    quickSaveEvent: function()\n    {\n        var text = $F('kronolithQuickinsertQ'),\n            cal = $F('kronolithQuickinsertCalendars'),\n            params;\n\n        params = $H($('kronolithEventForm').serialize({ hash: true }))\n            .merge(this.saveEventParams());\n        params.set('text', text);\n        params.set('cal', cal);\n\n        $('kronolithQuickinsert').fade({ duration: this.effectDur });\n        this.startLoading(cal, params.get('sig'));\n        this.doAction('quickSaveEvent',\n                      params,\n                      function(r) {\n                          this.loadEventsCallback(r, false);\n                          if (r.msgs.size()) {\n                              this.editEvent(null, null, null, text);\n                          } else {\n                              $('kronolithQuickinsertQ').value = '';\n                          }\n                      }.bind(this));\n    },\n\n    /**\n     * Closes and resets the quick event form.\n     */\n    quickClose: function()\n    {\n        $('kronolithQuickinsert').fade({ duration: this.effectDur });\n        $('kronolithQuickinsertQ').value = '';\n    },\n\n    topTagsCallback: function(update, tagclass, r)\n    {\n        $('kronolithEventTabTags').select('label').invoke('show');\n        if (!r.response.tags) {\n            $(update).update();\n            return;\n        }\n\n        var t = new Element('div');\n        r.response.tags.each(function(tag) {\n            if (tag == null) {\n                return;\n            }\n            t.insert(new Element('span', { className: tagclass }).update(tag.escapeHTML()));\n        });\n        $(update).update(t);\n    },\n\n    /**\n     * Callback method for showing event forms.\n     *\n     * @param object r  The ajax response object.\n     */\n    editEventCallback: function(r)\n    {\n        if (!r.response.event) {\n            RedBox.close();\n            this.go(this.lastLocation);\n            return;\n        }\n\n        var ev = r.response.event;\n\n        if (!Object.isUndefined(ev.ln)) {\n            this.loadPage(ev.ln);\n            this.closeRedBox();\n            return;\n        }\n\n        /* Basic information */\n        $('kronolithEventId').setValue(ev.id);\n        $('kronolithEventCalendar').setValue(ev.ty + '|' + ev.c);\n        $('kronolithEventTarget').setValue(ev.ty + '|' + ev.c);\n        $('kronolithEventTargetRO').update(Kronolith.conf.calendars[ev.ty][ev.c].name);\n        $('kronolithEventTitle').setValue(ev.t);\n        $('kronolithEventLocation').setValue(ev.l);\n        if (ev.l && Kronolith.conf.maps.driver) {\n            $('kronolithEventMapLink').show();\n        }\n        $('kronolithEventUrl').setValue(ev.u);\n        $('kronolithEventAllday').setValue(ev.al);\n        this.toggleAllDay(ev.al);\n        $('kronolithEventStartDate').setValue(ev.sd);\n        $('kronolithEventStartTime').setValue(ev.st);\n        this.knl.kronolithEventStartTime.setSelected(ev.st);\n        $('kronolithEventEndDate').setValue(ev.ed);\n        $('kronolithEventEndTime').setValue(ev.et);\n        this.knl.kronolithEventEndTime.setSelected(ev.et);\n        this.duration = Math.abs(Date.parse(ev.e).getTime() - Date.parse(ev.s).getTime()) / 60000;\n        $('kronolithEventStatus').setValue(ev.x);\n        $('kronolithEventDescription').setValue(ev.d);\n        $('kronolithEventPrivate').setValue(ev.pv);\n        $('kronolithEventLinkExport').up('span').show();\n        $('kronolithEventExport').href = Kronolith.conf.URI_EVENT_EXPORT.interpolate({ id: ev.id, calendar: ev.c, type: ev.ty });\n\n        /* Alarm */\n        if (ev.a) {\n            this.enableAlarm('Event', ev.a);\n            if (ev.m) {\n                $('kronolithEventAlarmDefaultOff').checked = true;\n                $H(ev.m).each(function(method) {\n                    $('kronolithEventAlarm' + method.key).setValue(1);\n                    if ($('kronolithEventAlarm' + method.key + 'Params')) {\n                        $('kronolithEventAlarm' + method.key + 'Params').show();\n                        $H(method.value).each(function(param) {\n                            var input = $('kronolithEventAlarmParam' + param.key);\n                            if (input.type == 'radio') {\n                                input.up('form').select('input[type=radio]').each(function(radio) {\n                                    if (radio.name == input.name &&\n                                        radio.value == param.value) {\n                                        radio.setValue(1);\n                                        throw $break;\n                                    }\n                                });\n                            } else {\n                                input.setValue(param.value);\n                            }\n                        });\n                    }\n                });\n            }\n        } else {\n            $('kronolithEventAlarmOff').setValue(true);\n        }\n\n        /* Recurrence */\n        if (ev.r) {\n            var scheme = Kronolith.conf.recur[ev.r.t],\n                schemeLower = scheme.toLowerCase(),\n                div = $('kronolithEventRepeat' + scheme);\n            $('kronolithEventLink' + scheme).setValue(true);\n            if (scheme == 'Monthly' || scheme == 'Yearly') {\n                div.down('input[name=recur_' + schemeLower + '_scheme][value=' + ev.r.t + ']').setValue(true);\n            }\n            if (scheme == 'Weekly') {\n                div.select('input[type=checkbox]').each(function(input) {\n                    if (input.name == 'weekly[]' &&\n                        input.value & ev.r.d) {\n                        input.setValue(true);\n                    }\n                });\n            }\n            if (ev.r.i == 1) {\n                div.down('input[name=recur_' + schemeLower + '][value=1]').setValue(true);\n            } else {\n                div.down('input[name=recur_' + schemeLower + '][value=0]').setValue(true);\n                div.down('input[name=recur_' + schemeLower + '_interval]').setValue(ev.r.i);\n            }\n            if (!Object.isUndefined(ev.r.e)) {\n                $('kronolithEventRepeatLength').down('input[name=recur_end_type][value=date]').setValue(true);\n                $('kronolithEventRecurDate').setValue(Date.parse(ev.r.e).toString(Kronolith.conf.date_format));\n            } else if (!Object.isUndefined(ev.r.c)) {\n                $('kronolithEventRepeatLength').down('input[name=recur_end_type][value=count]').setValue(true);\n                $('kronolithEventRecurCount').setValue(ev.r.c);\n            } else {\n                $('kronolithEventRepeatLength').down('input[name=recur_end_type][value=none]').setValue(true);\n            }\n            this.toggleRecurrence(scheme);\n        } else if (ev.bid) {\n            var div = $('kronolithEventRepeatException');\n            div.down('span').update(ev.eod);\n            this.toggleRecurrence('Exception');\n        } else {\n            this.toggleRecurrence('None');\n        }\n\n        /* Attendees */\n        if (this.attendeeStartDateHandler) {\n            $('kronolithEventStartDate').stopObserving('change', this.attendeeStartDateHandler);\n        }\n        if (!Object.isUndefined(ev.at)) {\n            this.attendeesAc.reset(ev.at.pluck('l'));\n            ev.at.each(this.addAttendee.bind(this));\n            if (this.fbLoading) {\n                $('kronolithFBLoading').show();\n            }\n            this.attendeeStartDateHandler = function() {\n                ev.at.each(function(attendee) {\n                    this.insertFreeBusy(attendee.l);\n                }, this);\n            }.bind(this);\n            $('kronolithEventStartDate').observe('change', this.attendeeStartDateHandler);\n        }\n\n        /* Tags */\n        this.eventTagAc.reset(ev.tg);\n\n        /* Geo */\n        if (ev.gl) {\n            $('kronolithEventLocationLat').value = ev.gl.lat;\n            $('kronolithEventLocationLon').value = ev.gl.lon;\n            $('kronolithEventMapZoom').value = Math.max(1, ev.gl.zoom);\n        }\n\n        if (!ev.pe) {\n            $('kronolithEventSave').hide();\n            this.eventTagAc.disable();\n            $('kronolithEventTabTags').select('label').invoke('hide');\n        } else {\n             this.doAction('listTopTags', null, this.topTagsCallback.curry('kronolithEventTopTags', 'kronolithEventTag'));\n        }\n        if (!ev.pd) {\n            $('kronolithEventDelete').hide();\n            $('kronolithEventTarget').hide();\n            $('kronolithEventTargetRO').show();\n        }\n\n        this.setTitle(ev.t);\n        this.redBoxLoading = true;\n        RedBox.showHtml($('kronolithEventDialog').show());\n\n        /* Hide alarm message for this event. */\n        if (r.msgs) {\n            r.msgs = r.msgs.reject(function(msg) {\n                if (msg.type != 'horde.alarm') {\n                    return false;\n                }\n                var alarm = msg.flags.alarm;\n                if (alarm.params && alarm.params.notify &&\n                    alarm.params.notify.show &&\n                    alarm.params.notify.show.calendar &&\n                    alarm.params.notify.show.event &&\n                    alarm.params.notify.show.calendar == ev.c &&\n                    alarm.params.notify.show.event == ev.id) {\n                    return true;\n                }\n                return false;\n            });\n        }\n    },\n\n    /**\n     * Adds an attendee row to the free/busy table.\n     *\n     * @param object attendee  An attendee object with the properties:\n     *                         - e: email address\n     *                         - l: the display name of the attendee\n     */\n    addAttendee: function(attendee)\n    {\n        if (typeof attendee == 'string') {\n            if (attendee.include('@')) {\n                this.doAction('parseEmailAddress',\n                              { email: attendee },\n                              function (r) {\n                                  if (r.response.email) {\n                                      this.addAttendee({ e: r.response.email, l: attendee });\n                                  }\n                              }.bind(this));\n                return;\n            } else {\n                attendee = { l: attendee };\n            }\n        }\n\n        if (attendee.e) {\n            this.fbLoading++;\n            this.doAction('getFreeBusy',\n                          { email: attendee.e },\n                          function(r) {\n                              this.fbLoading--;\n                              if (!this.fbLoading) {\n                                  $('kronolithFBLoading').hide();\n                              }\n                              if (Object.isUndefined(r.response.fb)) {\n                                  return;\n                              }\n                              this.freeBusy.get(attendee.l)[1] = r.response.fb;\n                              this.insertFreeBusy(attendee.l);\n                          }.bind(this));\n        }\n\n        var tr = new Element('tr'), response, i;\n        this.freeBusy.set(attendee.l, [ tr ]);\n        switch (attendee.r) {\n            case 1: response = 'None'; break;\n            case 2: response = 'Accepted'; break;\n            case 3: response = 'Declined'; break;\n            case 4: response = 'Tentative'; break;\n        }\n        tr.insert(new Element('td')\n                  .writeAttribute('title', attendee.l)\n                  .addClassName('kronolithAttendee' + response)\n                  .insert(attendee.e ? attendee.e.escapeHTML() : attendee.l.escapeHTML()));\n        for (i = 0; i < 24; i++) {\n            tr.insert(new Element('td', { className: 'kronolithFBUnknown' }));\n        }\n        $('kronolithEventAttendeesList').down('tbody').insert(tr);\n    },\n\n    /**\n     * Removes an attendee row from the free/busy table.\n     *\n     * @param object attendee  An attendee object with the properties:\n     *                         - e: email address\n     *                         - l: the display name of the attendee\n     */\n    removeAttendee: function(attendee)\n    {\n        var row = this.freeBusy.get(attendee)[0];\n        row.purge();\n        row.remove();\n    },\n\n    /**\n     * Updates rows with free/busy information in the attendees table.\n     *\n     * @todo Update when changing dates; only show free time for fb times we\n     *       actually received.\n     *\n     * @param string attendee  An attendee display name as the free/busy\n     *                         identifier.\n     */\n    insertFreeBusy: function(attendee)\n    {\n        if (!$('kronolithEventDialog').visible() ||\n            !this.freeBusy.get(attendee)) {\n            return;\n        }\n        var fb = this.freeBusy.get(attendee)[1],\n            tr = this.freeBusy.get(attendee)[0],\n            td = tr.select('td')[1],\n            div = td.down('div');\n        if (!td.getWidth()) {\n            this.insertFreeBusy.bind(this, attendee).defer();\n            return;\n        }\n        tr.select('td').each(function(td, i) {\n            if (i != 0) {\n                td.className = 'kronolithFBFree';\n            }\n            i++;\n        });\n        if (div) {\n            div.purge();\n            div.remove();\n        }\n        var start = Date.parseExact($F('kronolithEventStartDate'), Kronolith.conf.date_format),\n            end = start.clone().add(1).days(),\n            width = td.getWidth();\n        div = new Element('div').setStyle({ position: 'relative', height: td.offsetHeight + 'px' });\n        td.insert(div);\n        $H(fb.b).each(function(busy) {\n            var from = new Date(), to = new Date(), left;\n            from.setTime(busy.key * 1000);\n            to.setTime(busy.value * 1000);\n            if (from.isAfter(end) || to.isBefore(start)) {\n                return;\n            }\n            if (from.isBefore(start)) {\n                from = start.clone();\n            }\n            if (to.isAfter(end)) {\n                to = end.clone();\n            }\n            if (to.getHours() === 0 && to.getMinutes() === 0) {\n                to.add(-1).minutes();\n            }\n            left = from.getHours() + from.getMinutes() / 60;\n            div.insert(new Element('div', { className: 'kronolithFBBusy' }).setStyle({ zIndex: 1, top: 0, left: (left * width) + 'px', width: (((to.getHours() + to.getMinutes() / 60) - left) * width) + 'px' }));\n        });\n    },\n\n    /**\n     * Toggles the start and end time fields of the event edit form on and off.\n     *\n     * @param boolean on  Whether the event is an all-day event, i.e. the time\n     *                    fields should be turned off. If not specified, the\n     *                    current state is toggled.\n     */\n    toggleAllDay: function(on)\n    {\n        if (Object.isUndefined(on)) {\n            on = $('kronolithEventStartTimeLabel').getStyle('visibility') == 'visible';\n        }\n        $('kronolithEventStartTimeLabel').setStyle({ visibility: on ? 'hidden' : 'visible' });\n        $('kronolithEventEndTimeLabel').setStyle({ visibility: on ? 'hidden' : 'visible' });\n    },\n\n    /**\n     * Enables the alarm in the event or task form and sets the correct value\n     * and unit.\n     *\n     * @param string type    The object type, either 'Event' or 'Task'.\n     * @param integer alarm  The alarm time in seconds.\n     */\n    enableAlarm: function(type, alarm) {\n        if (!alarm) {\n            return;\n        }\n        type = 'kronolith' + type + 'Alarm';\n        $(type + 'On').setValue(true);\n        [10080, 1440, 60, 1].each(function(unit) {\n            if (alarm % unit === 0) {\n                $(type + 'Value').setValue(alarm / unit);\n                $(type + 'Unit').setValue(unit);\n                throw $break;\n            }\n        });\n    },\n\n    /**\n     * Disables all custom alarm methods in the event form.\n     */\n    disableAlarmMethods: function(type) {\n        $('kronolith' + type + 'TabReminder').select('input').each(function(input) {\n            if (input.name == (type == 'Event' ? 'event_alarms[]' : 'task[alarm_methods][]')) {\n                input.setValue(0);\n                if ($(input.id + 'Params')) {\n                    $(input.id + 'Params').hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Toggles the recurrence fields of the event edit form.\n     *\n     * @param string recur  The recurrence part of the field name, i.e. 'None',\n     *                      'Daily', etc.\n     */\n    toggleRecurrence: function(recur)\n    {\n        if (recur == 'Exception') {\n            if (!$('kronolithEventRepeatException').visible()) {\n                $('kronolithEventTabRecur').select('div').invoke('hide');\n                $('kronolithEventRepeatException').show();\n            }\n        } else if (recur != 'None') {\n            var div = $('kronolithEventRepeat' + recur),\n                length = $('kronolithEventRepeatLength');\n            if (!div.visible()) {\n                $('kronolithEventTabRecur').select('div').invoke('hide');\n                div.show();\n                length.show();\n                $('kronolithEventRepeatType').show();\n            }\n            switch (recur) {\n            case 'Daily':\n            case 'Weekly':\n            case 'Monthly':\n            case 'Yearly':\n                var recurLower = recur.toLowerCase();\n                if (div.down('input[name=recur_' + recurLower + '][value=1]').checked) {\n                    div.down('input[name=recur_' + recurLower + '_interval]').disable();\n                } else {\n                    div.down('input[name=recur_' + recurLower + '_interval]').enable();\n                }\n                break;\n            }\n\n            if (length.down('input[name=recur_end_type][value=date]').checked) {\n                $('kronolithEventRecurDate').enable();\n                $('kronolithEventRecurPicker').setStyle({ visibility: 'visible' });\n            } else {\n                $('kronolithEventRecurDate').disable();\n                $('kronolithEventRecurPicker').setStyle({ visibility: 'hidden' });\n            }\n            if (length.down('input[name=recur_end_type][value=count]').checked) {\n                $('kronolithEventRecurCount').enable();\n            } else {\n                $('kronolithEventRecurCount').disable();\n            }\n        } else {\n            if (!$('kronolithEventRepeatType').visible()) {\n                $('kronolithEventTabRecur').select('div').invoke('hide');\n                $('kronolithEventRepeatType').show();\n            }\n        }\n    },\n\n    /**\n     * Returns the Date object representing the date and time specified in the\n     * event form's start or end fields.\n     *\n     * @param string what  Which fields to parse, either 'start' or 'end'.\n     *\n     * @return Date  The date object or null if the fields can't be parsed.\n     */\n    getDate: function(what) {\n        var dateElm, timeElm, date, time;\n        if (what == 'start') {\n            dateElm = 'kronolithEventStartDate';\n            timeElm = 'kronolithEventStartTime';\n        } else {\n            dateElm = 'kronolithEventEndDate';\n            timeElm = 'kronolithEventEndTime';\n        }\n        date = Date.parseExact($F(dateElm), Kronolith.conf.date_format)\n            || Date.parse($F(dateElm));\n        if (date) {\n            time = Date.parseExact($F(timeElm), Kronolith.conf.time_format);\n            if (!time) {\n                time = Date.parse($F(timeElm));\n            }\n            if (time) {\n                date.setHours(time.getHours());\n                date.setMinutes(time.getMinutes());\n            }\n        }\n        return date;\n    },\n\n    checkDate: function(e) {\n        var elm = e.element();\n        if ($F(elm)) {\n            var date = Date.parseExact($F(elm), Kronolith.conf.date_format) || Date.parse($F(elm));\n            if (date) {\n                elm.setValue(date.toString(Kronolith.conf.date_format));\n                this.wrongFormat.unset(elm.id);\n            } else {\n                this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.wrong_date_format.interpolate({ wrong: $F(elm), right: new Date().toString(Kronolith.conf.date_format) }) }]);\n                this.wrongFormat.set(elm.id, true);\n            }\n        }\n    },\n\n    /**\n     * Attaches a KeyNavList drop down to one of the time fields.\n     *\n     * @param string|Element field  A time field (id).\n     *\n     * @return KeyNavList  The drop down list object.\n     */\n    attachTimeDropDown: function(field)\n    {\n        var list = [], d = new Date(), time, opts;\n\n        d.setHours(0);\n        d.setMinutes(0);\n        do {\n            time = d.toString(Kronolith.conf.time_format);\n            list.push({ l: time, v: time });\n            d.add(30).minutes();\n        } while (d.getHours() !== 0 || d.getMinutes() !== 0);\n\n        field = $(field);\n        opts = {\n            list: list,\n            domParent: field.up('.kronolithDialog'),\n            onChoose: function(value) {\n                if (value) {\n                    field.setValue(value);\n                }\n                this.updateTimeFields(field.identify());\n            }.bind(this)\n        };\n\n        this.knl[field.id] = new KeyNavList(field, opts);\n\n        return this.knl[field.id];\n    },\n\n    checkTime: function(e) {\n        var elm = e.element();\n        if ($F(elm)) {\n            var time = Date.parseExact(new Date().toString(Kronolith.conf.date_format) + ' ' + $F(elm), Kronolith.conf.date_format + ' ' + Kronolith.conf.time_format) || Date.parse(new Date().toString('yyyy-MM-dd ') + $F(elm));\n            if (time) {\n                elm.setValue(time.toString(Kronolith.conf.time_format));\n                this.wrongFormat.unset(elm.id);\n            } else {\n                this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.wrong_time_format.interpolate({ wrong: $F(elm), right: new Date().toString(Kronolith.conf.time_format) }) }]);\n                this.wrongFormat.set(elm.id, true);\n            }\n        }\n    },\n\n    /**\n     * Updates the end time in the event form after changing the start time.\n     */\n    updateEndTime: function() {\n        var date = this.getDate('start');\n        if (!date) {\n            return;\n        }\n        date.add(this.duration).minutes();\n        $('kronolithEventEndDate').setValue(date.toString(Kronolith.conf.date_format));\n        $('kronolithEventEndTime').setValue(date.toString(Kronolith.conf.time_format));\n    },\n\n    /**\n     * Event handler for scrolling the mouse over the date field.\n     *\n     * @param Event e       The mouse event.\n     * @param string field  The field name.\n     */\n    scrollDateField: function(e, field) {\n        var date = Date.parseExact($F(field), Kronolith.conf.date_format);\n        if (!date || (!e.wheelData && !e.detail)) {\n            return;\n        }\n        date.add(e.wheelData > 0 || e.detail < 0 ? 1 : -1).days();\n        $(field).setValue(date.toString(Kronolith.conf.date_format));\n        switch (field) {\n        case 'kronolithEventStartDate':\n            this.updateEndTime();\n            break;\n        case 'kronolithEventEndDate':\n            var start = this.getDate('start'), end = this.getDate('end');\n            if (start) {\n                if (start.isAfter(end)) {\n                    $('kronolithEventStartDate').setValue(date.toString(Kronolith.conf.date_format));\n                    $('kronolithEventStartTime').setValue($F('kronolithEventEndTime'));\n                }\n                this.duration = Math.abs(date.getTime() - start.getTime()) / 60000;\n            }\n            break;\n        }\n    },\n\n    /**\n     * Event handler for scrolling the mouse over the time field.\n     *\n     * @param Event e       The mouse event.\n     * @param string field  The field name.\n     */\n    scrollTimeField: function(e, field) {\n        var time = Date.parseExact($F(field), Kronolith.conf.time_format) || Date.parse($F(field)),\n            newTime, minute;\n        if (!time || (!e.wheelData && !e.detail)) {\n            return;\n        }\n\n        newTime = time.clone();\n        newTime.add(e.wheelData > 0 || e.detail < 0 ? 10 : -10).minutes();\n        minute = newTime.getMinutes();\n        if (minute % 10) {\n            if (e.wheelData > 0 || e.detail < 0) {\n                minute = minute / 10 | 0;\n            } else {\n                minute = (minute - 10) / 10 | 0;\n            }\n            minute *= 10;\n            newTime.setMinutes(minute);\n        }\n        if (newTime.getDate() != time.getDate()) {\n            if (newTime.isAfter(time)) {\n                newTime = time.clone().set({ hour: 23, minute: 59 });\n            } else {\n                newTime = time.clone().set({ hour: 0, minute: 0 });\n            }\n        }\n\n        $(field).setValue(newTime.toString(Kronolith.conf.time_format));\n        this.updateTimeFields(field);\n\n        /* Mozilla bug https://bugzilla.mozilla.org/show_bug.cgi?id=502818\n         * Need to stop or else multiple scroll events may be fired. We\n         * lose the ability to have the mousescroll bubble up, but that is\n         * more desirable than having the wrong scrolling behavior. */\n        if (Prototype.Browser.Gecko && !e.stop) {\n            Event.stop(e);\n        }\n    },\n\n    /**\n     * Updates the time fields of the event dialog after either has been\n     * changed.\n     *\n     * @param string field  The id of the field that has been changed.\n     */\n    updateTimeFields: function(field)\n    {\n        switch (field) {\n        case 'kronolithEventStartDate':\n        case 'kronolithEventStartTime':\n            this.updateEndTime();\n            break;\n        case 'kronolithEventEndDate':\n        case 'kronolithEventEndTime':\n            var start = this.getDate('start'), end = this.getDate('end');\n            if (start) {\n                if (start.isAfter(end)) {\n                    $('kronolithEventStartDate').setValue(end.toString(Kronolith.conf.date_format));\n                    $('kronolithEventStartTime').setValue($F('kronolithEventEndTime'));\n                }\n                this.duration = Math.abs(end.getTime() - start.getTime()) / 60000;\n            }\n            break;\n        }\n    },\n\n    /**\n     * Closes a RedBox overlay, after saving its content to the body.\n     */\n    closeRedBox: function()\n    {\n        if (!RedBox.getWindow()) {\n            return;\n        }\n        var content = RedBox.getWindowContents();\n        if (content) {\n            document.body.insert(content.hide());\n        }\n        RedBox.close();\n    },\n\n    // By default, no context onShow action\n    contextOnShow: Prototype.emptyFunction,\n\n    // By default, no context onClick action\n    contextOnClick: Prototype.emptyFunction,\n\n    // Map\n    initializeMap: function(ignoreLL)\n    {\n        if (this.mapInitialized) {\n            return;\n        }\n        var layers = [];\n        if (Kronolith.conf.maps.providers) {\n            Kronolith.conf.maps.providers.each(function(l) {\n                var p = new HordeMap[l]();\n                $H(p.getLayers()).values().each(function(e) {layers.push(e);});\n            });\n        }\n\n        this.map = new HordeMap.Map[Kronolith.conf.maps.driver]({\n            elt: 'kronolithEventMap',\n            delayed: true,\n            layers: layers,\n            markerDragEnd: this.onMarkerDragEnd.bind(this),\n            mapClick: this.afterClickMap.bind(this)\n        });\n\n        if ($('kronolithEventLocationLat').value && !ignoreLL) {\n            var ll = { lat:$('kronolithEventLocationLat').value, lon: $('kronolithEventLocationLon').value };\n            // Note that we need to cast the value of zoom to an integer here,\n            // otherwise the map display breaks.\n            this.placeMapMarker(ll, true, $('kronolithEventMapZoom').value - 0);\n        }\n        //@TODO: check for Location field - and if present, but no lat/lon value, attempt to\n        // geocode it.\n        this.map.display();\n        this.mapInitialized = true;\n    },\n\n    resetMap: function()\n    {\n        this.mapInitialized = false;\n        $('kronolithEventLocationLat').value = null;\n        $('kronolithEventLocationLon').value = null;\n        $('kronolithEventMapZoom').value = null;\n        if (this.mapMarker) {\n            this.map.removeMarker(this.mapMarker, {});\n            this.mapMarker = null;\n        }\n        if (this.map) {\n            this.map.destroy();\n            this.map = null;\n        }\n    },\n\n    /**\n     * Callback for handling marker drag end.\n     *\n     * @param object r  An object that implenents a getLonLat() method to obtain\n     *                  the new location of the marker.\n     */\n    onMarkerDragEnd: function(r)\n    {\n        var ll = r.getLonLat();\n        $('kronolithEventLocationLon').value = ll.lon;\n        $('kronolithEventLocationLat').value = ll.lat;\n        var gc = new HordeMap.Geocoder[Kronolith.conf.maps.geocoder](this.map.map, 'kronolithEventMap');\n        gc.reverseGeocode(ll, this.onReverseGeocode.bind(this), this.onGeocodeError.bind(this) );\n    },\n\n    /**\n     * Callback for handling a reverse geocode request.\n     *\n     * @param array r  An array of objects containing the results. Each object in\n     *                 the array is {lat:, lon:, address}\n     */\n    onReverseGeocode: function(r)\n    {\n        if (!r.length) {\n            return;\n        }\n        $('kronolithEventLocation').value = r[0].address;\n    },\n\n    onGeocodeError: function(r)\n    {\n        $('kronolithEventGeo_loading_img').toggle();\n        KronolithCore.showNotifications([ { type: 'horde.error', message: Kronolith.text.geocode_error + ' ' + r} ]);\n    },\n\n    /**\n     * Callback for geocoding calls.\n     */\n    onGeocode: function(r)\n    {\n        $('kronolithEventGeo_loading_img').toggle();\n        r = r.shift();\n        if (r.precision) {\n            zoom = r.precision * 2;\n        } else {\n            zoom = null;\n        }\n        this.ensureMap(true);\n        this.placeMapMarker({ lat: r.lat, lon: r.lon }, true, zoom);\n    },\n\n    geocode: function(a) {\n        if (!a) {\n            return;\n        }\n        $('kronolithEventGeo_loading_img').toggle();\n        var gc = new HordeMap.Geocoder[Kronolith.conf.maps.geocoder](this.map.map, 'kronolithEventMap');\n        gc.geocode(a, this.onGeocode.bind(this), this.onGeocodeError);\n    },\n\n    /**\n     * Place the event marker on the map, at point ll, ensuring it exists.\n     * Optionally center the map on the marker and zoom. Zoom only honored if\n     * center is set, and if center is set, but zoom is null, we zoomToFit().\n     *\n     */\n    placeMapMarker: function(ll, center, zoom)\n    {\n        if (!this.mapMarker) {\n            this.mapMarker = this.map.addMarker(\n                    ll,\n                    { draggable: true },\n                    {\n                        context: this,\n                        dragend: this.onMarkerDragEnd\n                    });\n        } else {\n            this.map.moveMarker(this.mapMarker, ll);\n        }\n\n        if (center) {\n            this.map.setCenter(ll, zoom);\n            if (!zoom) {\n                this.map.zoomToFit();\n            }\n        }\n        $('kronolithEventLocationLon').value = ll.lon;\n        $('kronolithEventLocationLat').value = ll.lat;\n    },\n\n    /**\n     * Remove the event marker from the map. Called after clearing the location\n     * field.\n     */\n    removeMapMarker: function()\n    {\n        if (this.mapMarker) {\n            this.map.removeMarker(this.mapMarker, {});\n            $('kronolithEventLocationLon').value = null;\n            $('kronolithEventLocationLat').value = null;\n        }\n\n        this.mapMarker = false;\n    },\n\n    /**\n     * Ensures the map tab is visible and sets UI elements accordingly.\n     */\n    ensureMap: function(ignoreLL)\n    {\n        if (!this.mapInitialized) {\n            this.initializeMap(ignoreLL);\n        }\n        var dialog = $('kronolithEventForm');\n        dialog.select('.kronolithTabsOption').invoke('hide');\n        dialog.select('.tabset li').invoke('removeClassName', 'activeTab');\n        $('kronolithEventTabMap').show();\n        $('kronolithEventLinkMap').up().addClassName('activeTab');\n    },\n\n    /**\n     * Callback that gets called after a new marker has been placed on the map\n     * due to a single click on the map.\n     *\n     * @return object o  { lonlat: }\n     */\n    afterClickMap: function(o)\n    {\n        this.placeMapMarker(o.lonlat, false);\n        var gc = new HordeMap.Geocoder[Kronolith.conf.maps.geocoder](this.map.map, 'kronolithEventMap');\n        gc.reverseGeocode(o.lonlat, this.onReverseGeocode.bind(this), this.onGeocodeError.bind(this) );\n    },\n\n    /* Onload function. */\n    onDomLoad: function()\n    {\n        var dateFields, timeFields;\n\n        if (typeof ContextSensitive != 'undefined') {\n            this.DMenu = new ContextSensitive({ onClick: this.contextOnClick, onShow: this.contextOnShow });\n        }\n\n        RedBox.onDisplay = function() {\n            this.redBoxLoading = false;\n        }.bind(this);\n        RedBox.duration = this.effectDur;\n\n        $('kronolithSearchTerm').observe('focus', function() {\n            if ($F(this) == this.readAttribute('default')) {\n                this.clear();\n            }\n        });\n        $('kronolithSearchTerm').observe('blur', function() {\n            if (!$F(this)) {\n                this.setValue(this.readAttribute('default'));\n            }\n        });\n\n        $('kronolithEventStartDate', 'kronolithEventEndDate', 'kronolithTaskDueDate').compact().invoke('observe', 'blur', this.checkDate.bind(this));\n        var timeFields = $('kronolithEventStartTime', 'kronolithEventEndTime', 'kronolithTaskDueTime').compact();\n        timeFields.invoke('observe', 'blur', this.checkTime.bind(this));\n        timeFields.each(function(field) {\n            var dropDown = this.attachTimeDropDown(field);\n            field.observe('click', function() { dropDown.show(); });\n        }, this);\n        $('kronolithEventStartDate', 'kronolithEventStartTime').invoke('observe', 'change', this.updateEndTime.bind(this));\n\n        if (Kronolith.conf.has_tasks) {\n            $('kronolithTaskDueDate', 'kronolithTaskDueTime').compact().invoke('observe', 'focus', this.setDefaultDue.bind(this));\n        }\n\n        document.observe('keydown', KronolithCore.keydownHandler.bindAsEventListener(KronolithCore));\n        document.observe('keyup', KronolithCore.keyupHandler.bindAsEventListener(KronolithCore));\n        document.observe('click', KronolithCore.clickHandler.bindAsEventListener(KronolithCore));\n        document.observe('dblclick', KronolithCore.clickHandler.bindAsEventListener(KronolithCore, true));\n\n        // Mouse wheel handler.\n        dateFields = [ 'kronolithEventStartDate', 'kronolithEventEndDate' ];\n        timeFields = [ 'kronolithEventStartTime', 'kronolithEventEndTime' ];\n        if (Kronolith.conf.has_tasks) {\n            dateFields.push('kronolithTaskDueDate');\n            timeFields.push('kronolithTaskDueTime');\n        }\n        dateFields.each(function(field) {\n            $(field).observe(Prototype.Browser.Gecko ? 'DOMMouseScroll' : 'mousewheel', this.scrollDateField.bindAsEventListener(this, field));\n        }, this);\n        timeFields.each(function(field) {\n            $(field).observe(Prototype.Browser.Gecko ? 'DOMMouseScroll' : 'mousewheel', this.scrollTimeField.bindAsEventListener(this, field));\n        }, this);\n\n        this.updateCalendarList();\n        this.updateMinical(this.date);\n\n        /* Initialize the starting page. */\n        var tmp = location.hash;\n        if (!tmp.empty() && tmp.startsWith('#')) {\n            tmp = (tmp.length == 1) ? '' : tmp.substring(1);\n        }\n        if (!tmp.empty()) {\n            this.go(decodeURIComponent(tmp));\n        } else {\n            this.go(Kronolith.conf.login_view);\n        }\n\n        $('kronolithMenu').select('div.kronolithCalendars div').each(function(s) {\n            s.observe('mouseover', s.addClassName.curry('kronolithCalOver'));\n            s.observe('mouseout', s.removeClassName.curry('kronolithCalOver'));\n        });\n\n        /* Add Growler notifications. */\n        this.Growler = new Growler({\n            log: true,\n            location: 'br',\n            noalerts: Kronolith.text.noalerts,\n            info: Kronolith.text.growlerinfo\n        });\n        this.Growler.growlerlog.observe('Growler:toggled', function(e) {\n            var button = $('kronolithNotifications');\n            if (e.memo.visible) {\n                button.title = Kronolith.text.hidelog;\n                button.addClassName('kronolithClose');\n            } else {\n                button.title = Kronolith.text.alerts.interpolate({ count: this.growls });\n                button.removeClassName('kronolithClose');\n            }\n            Horde_ToolTips.detach(button);\n            Horde_ToolTips.attach(button);\n        }.bindAsEventListener(this));\n\n        /* Start polling. */\n        new PeriodicalExecuter(this.doAction.bind(this, 'poll', {}, null, {}), 60);\n    }\n\n};\n\n/* Initialize global event handlers. */\ndocument.observe('dom:loaded', KronolithCore.onDomLoad.bind(KronolithCore));\ndocument.observe('DragDrop2:drag', KronolithCore.onDrag.bindAsEventListener(KronolithCore));\ndocument.observe('DragDrop2:drop', KronolithCore.onDrop.bindAsEventListener(KronolithCore));\ndocument.observe('DragDrop2:end', KronolithCore.onDragEnd.bindAsEventListener(KronolithCore));\ndocument.observe('DragDrop2:start', KronolithCore.onDragStart.bindAsEventListener(KronolithCore));\ndocument.observe('Horde_Calendar:select', KronolithCore.datePickerHandler.bindAsEventListener(KronolithCore));\nif (Prototype.Browser.IE) {\n    $('kronolithBody').observe('selectstart', Event.stop);\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<package packagerversion=\"1.9.2\" version=\"2.0\" xmlns=\"http://pear.php.net/dtd/package-2.0\" xmlns:tasks=\"http://pear.php.net/dtd/tasks-1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://pear.php.net/dtd/tasks-1.0 http://pear.php.net/dtd/tasks-1.0.xsd http://pear.php.net/dtd/package-2.0 http://pear.php.net/dtd/package-2.0.xsd\">\n <name>kronolith</name>\n <channel>pear.horde.org</channel>\n <summary>A web based calendar</summary>\n <description>Kronolith is the Horde calendar application. It provides web-based calendars backed by a SQL database or a Kolab server. Supported features include Ajax and mobile interfaces, shared calendars, remote calendars, invitation management (iCalendar/iTip), free/busy management, resource management, alarms, recurring events, and a sophisticated day/week view which handles arbitrary numbers of overlapping events.</description>\n <lead>\n  <name>Jan Schneider</name>\n  <user>jan</user>\n  <email>jan@horde.org</email>\n  <active>yes</active>\n </lead>\n <lead>\n  <name>Chuck Hagenbuch</name>\n  <user>chuck</user>\n  <email>chuck@horde.org</email>\n  <active>yes</active>\n </lead>\n <lead>\n  <name>Michael J Rubinsky</name>\n  <user>mrubinsk</user>\n  <email>mrubinsk@horde.org</email>\n  <active>yes</active>\n </lead>\n <date>2012-03-20</date>\n <time>11:00:03</time>\n <version>\n  <release>3.0.17</release>\n  <api>3.0.0</api>\n </version>\n <stability>\n  <release>stable</release>\n  <api>stable</api>\n </stability>\n <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n <notes>\n* [jan] Update Italian translation (Massimo Malabotta &lt;mmalabotta@units.it&gt;).\n* [jan] Improve print styles.\n* [jan] Catch if external client doesn&apos;t send LAST-MODIFIED attributes (Bug #11130).\n* [jan] Don&apos;t stop agenda script if there is an error with a single user (Bug #11129).\n* [jan] Update Hungarian translation (Zolt\u00e1n N\u00e9meth &lt;nemeth.zoltan@etit.hu&gt;).\n* [jan] Show round corners only on the start and end of multi-day events (Request #11067).\n </notes>\n <contents>\n  <dir baseinstalldir=\"/\" name=\"/\">\n   <dir name=\"bin\">\n    <file name=\"kronolith-agenda\" role=\"script\" />\n    <file name=\"kronolith-convert-datatree-shares-to-sql\" role=\"script\" />\n    <file name=\"kronolith-convert-sql-shares-to-sqlng\" role=\"script\" />\n    <file name=\"kronolith-convert-to-utc\" role=\"script\" />\n    <file name=\"kronolith-import-icals\" role=\"script\" />\n    <file name=\"kronolith-import-squirrelmail-calendar\" role=\"script\" />\n   </dir> <!-- /bin -->\n   <dir name=\"calendars\">\n    <file name=\"create.php\" role=\"horde\" />\n    <file name=\"delete.php\" role=\"horde\" />\n    <file name=\"edit.php\" role=\"horde\" />\n    <file name=\"index.php\" role=\"horde\" />\n    <file name=\"info.php\" role=\"horde\" />\n    <file name=\"remote_edit.php\" role=\"horde\" />\n    <file name=\"remote_subscribe.php\" role=\"horde\" />\n    <file name=\"remote_unsubscribe.php\" role=\"horde\" />\n    <file name=\"subscribe.php\" role=\"horde\" />\n   </dir> <!-- /calendars -->\n   <dir name=\"config\">\n    <file name=\".htaccess\" role=\"horde\" />\n    <file name=\"conf.xml\" role=\"horde\" />\n    <file name=\"hooks.php.dist\" role=\"horde\" />\n    <file name=\"menu.php.dist\" role=\"horde\" />\n    <file name=\"prefs.php\" role=\"horde\" />\n   </dir> <!-- /config -->\n   <dir name=\"docs\">\n    <file name=\"CHANGES\" role=\"doc\" />\n    <file name=\"CREDITS\" role=\"doc\" />\n    <file name=\"INSTALL\" role=\"doc\" />\n    <file name=\"lighttpd-kronolith.conf\" role=\"doc\" />\n    <file name=\"RELEASE_NOTES\" role=\"doc\" />\n    <file name=\"TODO\" role=\"doc\" />\n    <file name=\"UPGRADING\" role=\"doc\" />\n   </dir> <!-- /docs -->\n   <dir name=\"feed\">\n    <file name=\".htaccess\" role=\"horde\" />\n    <file name=\"index.php\" role=\"horde\" />\n   </dir> <!-- /feed -->\n   <dir name=\"js\">\n    <file name=\"calendar-panel.js\" role=\"horde\" />\n    <file name=\"dragdrop2.js\" role=\"horde\" />\n    <file name=\"edit.js\" role=\"horde\" />\n    <file name=\"embed.js\" role=\"horde\" />\n    <file name=\"goto.js\" role=\"horde\" />\n    <file name=\"kronolith.js\" role=\"horde\" />\n    <file name=\"mobile.js\" role=\"horde\" />\n    <file name=\"tagactions.js\" role=\"horde\" />\n    <file name=\"views.js\" role=\"horde\" />\n   </dir> <!-- /js -->\n   <dir name=\"lib\">\n    <dir name=\"Ajax\">\n     <dir name=\"Imple\">\n      <file name=\"ContactAutoCompleter.php\" role=\"horde\" />\n      <file name=\"Embed.php\" role=\"horde\" />\n      <file name=\"TagActions.php\" role=\"horde\" />\n      <file name=\"TagAutoCompleter.php\" role=\"horde\" />\n     </dir> <!-- /lib/Ajax/Imple -->\n     <file name=\"Application.php\" role=\"horde\" />\n    </dir> <!-- /lib/Ajax -->\n    <dir name=\"Block\">\n     <file name=\"Month.php\" role=\"horde\" />\n     <file name=\"Monthlist.php\" role=\"horde\" />\n     <file name=\"Prevmonthlist.php\" role=\"horde\" />\n     <file name=\"Summary.php\" role=\"horde\" />\n    </dir> <!-- /lib/Block -->\n    <dir name=\"Calendar\">\n     <dir name=\"External\">\n      <file name=\"Tasks.php\" role=\"horde\" />\n     </dir> <!-- /lib/Calendar/External -->\n     <file name=\"External.php\" role=\"horde\" />\n     <file name=\"Holiday.php\" role=\"horde\" />\n     <file name=\"Internal.php\" role=\"horde\" />\n     <file name=\"Remote.php\" role=\"horde\" />\n     <file name=\"Resource.php\" role=\"horde\" />\n    </dir> <!-- /lib/Calendar -->\n    <dir name=\"Calendars\">\n     <file name=\"Base.php\" role=\"horde\" />\n     <file name=\"Default.php\" role=\"horde\" />\n     <file name=\"Kolab.php\" role=\"horde\" />\n    </dir> <!-- /lib/Calendars -->\n    <dir name=\"Driver\">\n     <file name=\"Holidays.php\" role=\"horde\" />\n     <file name=\"Horde.php\" role=\"horde\" />\n     <file name=\"Ical.php\" role=\"horde\" />\n     <file name=\"Kolab.php\" role=\"horde\" />\n     <file name=\"Mock.php\" role=\"horde\" />\n     <file name=\"Resource.php\" role=\"horde\" />\n     <file name=\"Sql.php\" role=\"horde\" />\n    </dir> <!-- /lib/Driver -->\n    <dir name=\"Event\">\n     <file name=\"Holidays.php\" role=\"horde\" />\n     <file name=\"Horde.php\" role=\"horde\" />\n     <file name=\"Ical.php\" role=\"horde\" />\n     <file name=\"Kolab.php\" role=\"horde\" />\n     <file name=\"Resource.php\" role=\"horde\" />\n     <file name=\"Sql.php\" role=\"horde\" />\n    </dir> <!-- /lib/Event -->\n    <dir name=\"Factory\">\n     <file name=\"Calendars.php\" role=\"horde\" />\n     <file name=\"Driver.php\" role=\"horde\" />\n     <file name=\"Geo.php\" role=\"horde\" />\n     <file name=\"Storage.php\" role=\"horde\" />\n    </dir> <!-- /lib/Factory -->\n    <dir name=\"Form\">\n     <file name=\"CreateCalendar.php\" role=\"horde\" />\n     <file name=\"CreateResource.php\" role=\"horde\" />\n     <file name=\"CreateResourceGroup.php\" role=\"horde\" />\n     <file name=\"DeleteCalendar.php\" role=\"horde\" />\n     <file name=\"DeleteResource.php\" role=\"horde\" />\n     <file name=\"DeleteResourceGroup.php\" role=\"horde\" />\n     <file name=\"EditCalendar.php\" role=\"horde\" />\n     <file name=\"EditRemoteCalendar.php\" role=\"horde\" />\n     <file name=\"EditResource.php\" role=\"horde\" />\n     <file name=\"EditResourceGroup.php\" role=\"horde\" />\n     <file name=\"SubscribeRemoteCalendar.php\" role=\"horde\" />\n     <file name=\"UnsubscribeRemoteCalendar.php\" role=\"horde\" />\n    </dir> <!-- /lib/Form -->\n    <dir name=\"FreeBusy\">\n     <dir name=\"View\">\n      <file name=\"Day.php\" role=\"horde\" />\n      <file name=\"Month.php\" role=\"horde\" />\n      <file name=\"Week.php\" role=\"horde\" />\n      <file name=\"Workweek.php\" role=\"horde\" />\n     </dir> <!-- /lib/FreeBusy/View -->\n     <file name=\"View.php\" role=\"horde\" />\n    </dir> <!-- /lib/FreeBusy -->\n    <dir name=\"Geo\">\n     <file name=\"Base.php\" role=\"horde\" />\n     <file name=\"Mysql.php\" role=\"horde\" />\n     <file name=\"Sql.php\" role=\"horde\" />\n    </dir> <!-- /lib/Geo -->\n    <dir name=\"LoginTasks\">\n     <dir name=\"SystemTask\">\n      <file name=\"Upgrade.php\" role=\"horde\" />\n     </dir> <!-- /lib/LoginTasks/SystemTask -->\n     <dir name=\"Task\">\n      <file name=\"PurgeEvents.php\" role=\"horde\" />\n     </dir> <!-- /lib/LoginTasks/Task -->\n    </dir> <!-- /lib/LoginTasks -->\n    <dir name=\"Notification\">\n     <dir name=\"Listener\">\n      <file name=\"AjaxStatus.php\" role=\"horde\" />\n     </dir> <!-- /lib/Notification/Listener -->\n    </dir> <!-- /lib/Notification -->\n    <dir name=\"Resource\">\n     <file name=\"Base.php\" role=\"horde\" />\n     <file name=\"Group.php\" role=\"horde\" />\n     <file name=\"Single.php\" role=\"horde\" />\n    </dir> <!-- /lib/Resource -->\n    <dir name=\"Storage\">\n     <file name=\"Kolab.php\" role=\"horde\" />\n     <file name=\"Sql.php\" role=\"horde\" />\n    </dir> <!-- /lib/Storage -->\n    <dir name=\"View\">\n     <file name=\"Day.php\" role=\"horde\" />\n     <file name=\"DeleteEvent.php\" role=\"horde\" />\n     <file name=\"EditEvent.php\" role=\"horde\" />\n     <file name=\"Event.php\" role=\"horde\" />\n     <file name=\"ExportEvent.php\" role=\"horde\" />\n     <file name=\"Month.php\" role=\"horde\" />\n     <file name=\"Week.php\" role=\"horde\" />\n     <file name=\"WorkWeek.php\" role=\"horde\" />\n     <file name=\"Year.php\" role=\"horde\" />\n    </dir> <!-- /lib/View -->\n    <file name=\".htaccess\" role=\"horde\" />\n    <file name=\"Api.php\" role=\"horde\" />\n    <file name=\"Application.php\" role=\"horde\" />\n    <file name=\"Calendar.php\" role=\"horde\" />\n    <file name=\"Day.php\" role=\"horde\" />\n    <file name=\"Driver.php\" role=\"horde\" />\n    <file name=\"Event.php\" role=\"horde\" />\n    <file name=\"Exception.php\" role=\"horde\" />\n    <file name=\"FreeBusy.php\" role=\"horde\" />\n    <file name=\"Kronolith.php\" role=\"horde\" />\n    <file name=\"Resource.php\" role=\"horde\" />\n    <file name=\"Storage.php\" role=\"horde\" />\n    <file name=\"Tagger.php\" role=\"horde\" />\n    <file name=\"Test.php\" role=\"horde\" />\n   </dir> <!-- /lib -->\n   <dir name=\"locale\">\n    <dir name=\"ar\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ar/LC_MESSAGES -->\n    </dir> <!-- /locale/ar -->\n    <dir name=\"bg\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/bg/LC_MESSAGES -->\n    </dir> <!-- /locale/bg -->\n    <dir name=\"ca\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ca/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/ca -->\n    <dir name=\"cs\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/cs/LC_MESSAGES -->\n    </dir> <!-- /locale/cs -->\n    <dir name=\"da\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/da/LC_MESSAGES -->\n    </dir> <!-- /locale/da -->\n    <dir name=\"de\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/de/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/de -->\n    <dir name=\"el\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/el/LC_MESSAGES -->\n    </dir> <!-- /locale/el -->\n    <dir name=\"en\">\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/en -->\n    <dir name=\"es\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/es/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/es -->\n    <dir name=\"et\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/et/LC_MESSAGES -->\n    </dir> <!-- /locale/et -->\n    <dir name=\"eu\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/eu/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/eu -->\n    <dir name=\"fi\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/fi/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/fi -->\n    <dir name=\"fr\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/fr/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/fr -->\n    <dir name=\"hr\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/hr/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/hr -->\n    <dir name=\"hu\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/hu/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/hu -->\n    <dir name=\"it\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/it/LC_MESSAGES -->\n    </dir> <!-- /locale/it -->\n    <dir name=\"ja\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ja/LC_MESSAGES -->\n    </dir> <!-- /locale/ja -->\n    <dir name=\"ko\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ko/LC_MESSAGES -->\n    </dir> <!-- /locale/ko -->\n    <dir name=\"lt\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/lt/LC_MESSAGES -->\n    </dir> <!-- /locale/lt -->\n    <dir name=\"lv\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/lv/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/lv -->\n    <dir name=\"nb\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/nb/LC_MESSAGES -->\n    </dir> <!-- /locale/nb -->\n    <dir name=\"nl\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/nl/LC_MESSAGES -->\n    </dir> <!-- /locale/nl -->\n    <dir name=\"nn\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/nn/LC_MESSAGES -->\n    </dir> <!-- /locale/nn -->\n    <dir name=\"pl\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/pl/LC_MESSAGES -->\n    </dir> <!-- /locale/pl -->\n    <dir name=\"pt\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/pt/LC_MESSAGES -->\n    </dir> <!-- /locale/pt -->\n    <dir name=\"pt_BR\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/pt_BR/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/pt_BR -->\n    <dir name=\"ro\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ro/LC_MESSAGES -->\n    </dir> <!-- /locale/ro -->\n    <dir name=\"ru\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ru/LC_MESSAGES -->\n    </dir> <!-- /locale/ru -->\n    <dir name=\"sk\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/sk/LC_MESSAGES -->\n    </dir> <!-- /locale/sk -->\n    <dir name=\"sl\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/sl/LC_MESSAGES -->\n    </dir> <!-- /locale/sl -->\n    <dir name=\"sv\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/sv/LC_MESSAGES -->\n    </dir> <!-- /locale/sv -->\n    <dir name=\"tr\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/tr/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/tr -->\n    <dir name=\"uk\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/uk/LC_MESSAGES -->\n    </dir> <!-- /locale/uk -->\n    <dir name=\"zh_CN\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/zh_CN/LC_MESSAGES -->\n    </dir> <!-- /locale/zh_CN -->\n    <dir name=\"zh_TW\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/zh_TW/LC_MESSAGES -->\n    </dir> <!-- /locale/zh_TW -->\n    <file name=\".htaccess\" role=\"horde\" />\n    <file name=\"kronolith.pot\" role=\"horde\" />\n   </dir> <!-- /locale -->\n   <dir name=\"migration\">\n    <file name=\"1_kronolith_base_tables.php\" role=\"horde\" />\n    <file name=\"2_kronolith_upgrade_autoincrement.php\" role=\"horde\" />\n    <file name=\"3_kronolith_upgrade_addallday.php\" role=\"horde\" />\n    <file name=\"4_kronolith_upgrade_addalarmmethods.php\" role=\"horde\" />\n    <file name=\"5_kronolith_upgrade_addcolor.php\" role=\"horde\" />\n    <file name=\"6_kronolith_upgrade_addresources.php\" role=\"horde\" />\n    <file name=\"7_kronolith_upgrade_resourceautoincrement.php\" role=\"horde\" />\n    <file name=\"8_kronolith_upgrade_addgeo.php\" role=\"horde\" />\n    <file name=\"9_kronolith_upgrade_addurl.php\" role=\"horde\" />\n    <file name=\"10_kronolith_upgrade_exceptions.php\" role=\"horde\" />\n    <file name=\"11_kronolith_upgrade_resourceemail.php\" role=\"horde\" />\n    <file name=\"12_kronolith_upgrade_addzoom.php\" role=\"horde\" />\n    <file name=\"13_kronolith_upgrade_systemshares.php\" role=\"horde\" />\n    <file name=\"14_kronolith_upgrade_missingresourcefield.php\" role=\"horde\" />\n    <file name=\"15_kronolith_upgrade_sqlng.php\" role=\"horde\" />\n    <file name=\"16_kronolith_upgrade_sqlhierarchical.php\" role=\"horde\" />\n    <file name=\"17_kronolith_upgrade_sqlnghierarchical.php\" role=\"horde\" />\n    <file name=\"18_kronolith_upgrade_categoriestotags.php\" role=\"horde\" />\n    <file name=\"19_kronolith_upgrade_addmysqlgeo.php\" role=\"horde\" />\n   </dir> <!-- /migration -->\n   <dir name=\"resources\">\n    <dir name=\"groups\">\n     <file name=\"create.php\" role=\"horde\" />\n     <file name=\"delete.php\" role=\"horde\" />\n     <file name=\"edit.php\" role=\"horde\" />\n     <file name=\"index.php\" role=\"horde\" />\n    </dir> <!-- /resources/groups -->\n    <file name=\"create.php\" role=\"horde\" />\n    <file name=\"delete.php\" role=\"horde\" />\n    <file name=\"edit.php\" role=\"horde\" />\n    <file name=\"index.php\" role=\"horde\" />\n   </dir> <!-- /resources -->\n   <dir name=\"templates\">\n    <dir name=\"agenda\">\n     <file name=\"notification.html.php\" role=\"horde\" />\n     <file name=\"notification.plain.php\" role=\"horde\" />\n    </dir> <!-- /templates/agenda -->\n    <dir name=\"alarm\">\n     <file name=\"mail.html.php\" role=\"horde\" />\n     <file name=\"mail.plain.php\" role=\"horde\" />\n    </dir> <!-- /templates/alarm -->\n    <dir name=\"attendees\">\n     <file name=\"attendees.inc\" role=\"horde\" />\n    </dir> <!-- /templates/attendees -->\n    <dir name=\"chunks\">\n     <file name=\"calendar.php\" role=\"horde\" />\n     <file name=\"permissions.inc\" role=\"horde\" />\n    </dir> <!-- /templates/chunks -->\n    <dir name=\"contacts\">\n     <file name=\"contacts.inc\" role=\"horde\" />\n    </dir> <!-- /templates/contacts -->\n    <dir name=\"data\">\n     <file name=\"export.inc\" role=\"horde\" />\n     <file name=\"import.inc\" role=\"horde\" />\n    </dir> <!-- /templates/data -->\n    <dir name=\"day\">\n     <file name=\"all_day.inc\" role=\"horde\" />\n     <file name=\"head.inc\" role=\"horde\" />\n     <file name=\"head_side_by_side.inc\" role=\"horde\" />\n     <file name=\"rows.html\" role=\"horde\" />\n    </dir> <!-- /templates/day -->\n    <dir name=\"delete\">\n     <file name=\"delete.inc\" role=\"horde\" />\n     <file name=\"one.inc\" role=\"horde\" />\n    </dir> <!-- /templates/delete -->\n    <dir name=\"edit\">\n     <file name=\"edit.inc\" role=\"horde\" />\n     <file name=\"edit_timespan.inc\" role=\"horde\" />\n    </dir> <!-- /templates/edit -->\n    <dir name=\"fbview\">\n     <file name=\"busyblock.html\" role=\"horde\" />\n     <file name=\"emptyblock.html\" role=\"horde\" />\n     <file name=\"header.html\" role=\"horde\" />\n     <file name=\"legend.html\" role=\"horde\" />\n     <file name=\"meetingblock.html\" role=\"horde\" />\n     <file name=\"row.html\" role=\"horde\" />\n     <file name=\"section.html\" role=\"horde\" />\n     <file name=\"unknownblock.html\" role=\"horde\" />\n    </dir> <!-- /templates/fbview -->\n    <dir name=\"feeds\">\n     <file name=\"atom.xml\" role=\"horde\" />\n    </dir> <!-- /templates/feeds -->\n    <dir name=\"index\">\n     <file name=\"agenda.inc\" role=\"horde\" />\n     <file name=\"day.inc\" role=\"horde\" />\n     <file name=\"edit.inc\" role=\"horde\" />\n     <file name=\"index.inc\" role=\"horde\" />\n     <file name=\"month.inc\" role=\"horde\" />\n     <file name=\"task.inc\" role=\"horde\" />\n     <file name=\"tasks.inc\" role=\"horde\" />\n     <file name=\"week.inc\" role=\"horde\" />\n     <file name=\"year.inc\" role=\"horde\" />\n    </dir> <!-- /templates/index -->\n    <dir name=\"itip\">\n     <file name=\"notification.html.php\" role=\"horde\" />\n     <file name=\"notification.plain.php\" role=\"horde\" />\n    </dir> <!-- /templates/itip -->\n    <dir name=\"mobile\">\n     <file name=\"day.html.php\" role=\"horde\" />\n     <file name=\"event.html.php\" role=\"horde\" />\n     <file name=\"head.html.php\" role=\"horde\" />\n     <file name=\"javascript_defs.php\" role=\"horde\" />\n     <file name=\"month.html.php\" role=\"horde\" />\n     <file name=\"notice.html.php\" role=\"horde\" />\n     <file name=\"summary.html.php\" role=\"horde\" />\n    </dir> <!-- /templates/mobile -->\n    <dir name=\"month\">\n     <file name=\"head.inc\" role=\"horde\" />\n     <file name=\"head_side_by_side.inc\" role=\"horde\" />\n    </dir> <!-- /templates/month -->\n    <dir name=\"perms\">\n     <file name=\"perms.inc\" role=\"horde\" />\n    </dir> <!-- /templates/perms -->\n    <dir name=\"prefs\">\n     <file name=\"defaultalarm.html\" role=\"horde\" />\n    </dir> <!-- /templates/prefs -->\n    <dir name=\"resources\">\n     <file name=\"form-header.inc\" role=\"horde\" />\n     <file name=\"resource-form.php\" role=\"horde\" />\n    </dir> <!-- /templates/resources -->\n    <dir name=\"search\">\n     <file name=\"empty.inc\" role=\"horde\" />\n     <file name=\"event_footers.inc\" role=\"horde\" />\n     <file name=\"event_headers.inc\" role=\"horde\" />\n     <file name=\"event_summaries.inc\" role=\"horde\" />\n     <file name=\"header.inc\" role=\"horde\" />\n     <file name=\"search.inc\" role=\"horde\" />\n     <file name=\"search_advanced.inc\" role=\"horde\" />\n    </dir> <!-- /templates/search -->\n    <dir name=\"share\">\n     <file name=\"notification.html.php\" role=\"horde\" />\n     <file name=\"notification.plain.php\" role=\"horde\" />\n    </dir> <!-- /templates/share -->\n    <dir name=\"view\">\n     <file name=\"view.inc\" role=\"horde\" />\n    </dir> <!-- /templates/view -->\n    <dir name=\"week\">\n     <file name=\"head.inc\" role=\"horde\" />\n     <file name=\"head_side_by_side.inc\" role=\"horde\" />\n    </dir> <!-- /templates/week -->\n    <dir name=\"year\">\n     <file name=\"head.inc\" role=\"horde\" />\n    </dir> <!-- /templates/year -->\n    <file name=\"calendar_info.php\" role=\"horde\" />\n    <file name=\"calendar_list.php\" role=\"horde\" />\n    <file name=\"calendar_titles.inc\" role=\"horde\" />\n    <file name=\"javascript_defs.php\" role=\"horde\" />\n    <file name=\"panel.inc\" role=\"horde\" />\n   </dir> <!-- /templates -->\n   <dir name=\"test\">\n    <dir name=\"Kronolith\">\n     <dir name=\"fixtures\">\n      <file name=\"allday.ics\" role=\"test\" />\n      <file name=\"bug7068.ics\" role=\"test\" />\n      <file name=\"export1.ics\" role=\"test\" />\n      <file name=\"export2.ics\" role=\"test\" />\n      <file name=\"export3.ics\" role=\"test\" />\n      <file name=\"export4.ics\" role=\"test\" />\n      <file name=\"fromicalendar.ics\" role=\"test\" />\n     </dir> <!-- /test/Kronolith/fixtures -->\n     <dir name=\"Integration\">\n      <dir name=\"Driver\">\n       <dir name=\"Sql\">\n        <dir name=\"Pdo\">\n         <file name=\"SqliteTest.php\" role=\"test\" />\n        </dir> <!-- /test/Kronolith/Integration/Driver/Sql/Pdo -->\n        <file name=\"Base.php\" role=\"test\" />\n       </dir> <!-- /test/Kronolith/Integration/Driver/Sql -->\n       <file name=\"Base.php\" role=\"test\" />\n       <file name=\"KolabTest.php\" role=\"test\" />\n      </dir> <!-- /test/Kronolith/Integration/Driver -->\n      <dir name=\"Kronolith\">\n       <dir name=\"Sql\">\n        <dir name=\"Pdo\">\n         <file name=\"SqliteTest.php\" role=\"test\" />\n        </dir> <!-- /test/Kronolith/Integration/Kronolith/Sql/Pdo -->\n        <file name=\"Base.php\" role=\"test\" />\n       </dir> <!-- /test/Kronolith/Integration/Kronolith/Sql -->\n       <file name=\"Base.php\" role=\"test\" />\n       <file name=\"KolabTest.php\" role=\"test\" />\n      </dir> <!-- /test/Kronolith/Integration/Kronolith -->\n      <file name=\"AllDayTest.php\" role=\"test\" />\n      <file name=\"FromIcalendarTest.php\" role=\"test\" />\n      <file name=\"ToIcalendarTest.php\" role=\"test\" />\n     </dir> <!-- /test/Kronolith/Integration -->\n     <dir name=\"Stub\">\n      <file name=\"Driver.php\" role=\"test\" />\n      <file name=\"Registry.php\" role=\"test\" />\n      <file name=\"ShareFactory.php\" role=\"test\" />\n      <file name=\"Tagger.php\" role=\"test\" />\n      <file name=\"Types.php\" role=\"test\" />\n     </dir> <!-- /test/Kronolith/Stub -->\n     <file name=\"AllTests.php\" role=\"test\" />\n     <file name=\"Autoload.php\" role=\"test\" />\n     <file name=\"phpunit.xml\" role=\"test\" />\n     <file name=\"TestCase.php\" role=\"test\" />\n    </dir> <!-- /test/Kronolith -->\n   </dir> <!-- /test -->\n   <dir name=\"themes\">\n    <dir name=\"bluewhite\">\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/bluewhite -->\n    <dir name=\"burntorange\">\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/burntorange -->\n    <dir name=\"default\">\n     <dir name=\"graphics\">\n      <dir name=\"alerts\">\n       <file name=\"alarm.png\" role=\"horde\" />\n       <file name=\"error.png\" role=\"horde\" />\n       <file name=\"message.png\" role=\"horde\" />\n       <file name=\"success.png\" role=\"horde\" />\n       <file name=\"warning.png\" role=\"horde\" />\n      </dir> <!-- /themes/default/graphics/alerts -->\n      <file name=\"addressbook_browse.png\" role=\"horde\" />\n      <file name=\"agenda.png\" role=\"horde\" />\n      <file name=\"alarm-000.png\" role=\"horde\" />\n      <file name=\"alarm-fff.png\" role=\"horde\" />\n      <file name=\"alarm.png\" role=\"horde\" />\n      <file name=\"attendee-accepted.png\" role=\"horde\" />\n      <file name=\"attendee-declined.png\" role=\"horde\" />\n      <file name=\"attendee-none.png\" role=\"horde\" />\n      <file name=\"attendee-tentative.png\" role=\"horde\" />\n      <file name=\"attendees-000.png\" role=\"horde\" />\n      <file name=\"attendees-fff.png\" role=\"horde\" />\n      <file name=\"attendees.png\" role=\"horde\" />\n      <file name=\"back_quick.png\" role=\"horde\" />\n      <file name=\"big_agenda.png\" role=\"horde\" />\n      <file name=\"big_alarm.png\" role=\"horde\" />\n      <file name=\"big_invitation.png\" role=\"horde\" />\n      <file name=\"big_share.png\" role=\"horde\" />\n      <file name=\"calendars.png\" role=\"horde\" />\n      <file name=\"checkbox_off.png\" role=\"horde\" />\n      <file name=\"checkbox_on.png\" role=\"horde\" />\n      <file name=\"checkbox_over.png\" role=\"horde\" />\n      <file name=\"close.png\" role=\"horde\" />\n      <file name=\"dayview.png\" role=\"horde\" />\n      <file name=\"delete-000.png\" role=\"horde\" />\n      <file name=\"delete-fff.png\" role=\"horde\" />\n      <file name=\"drag-handle.png\" role=\"horde\" />\n      <file name=\"edit-000.png\" role=\"horde\" />\n      <file name=\"edit-fff.png\" role=\"horde\" />\n      <file name=\"exception-000.png\" role=\"horde\" />\n      <file name=\"exception-fff.png\" role=\"horde\" />\n      <file name=\"favicon.ico\" role=\"horde\" />\n      <file name=\"goto.png\" role=\"horde\" />\n      <file name=\"help.png\" role=\"horde\" />\n      <file name=\"kronolith.png\" role=\"horde\" />\n      <file name=\"left.png\" role=\"horde\" />\n      <file name=\"loading.gif\" role=\"horde\" />\n      <file name=\"logout.png\" role=\"horde\" />\n      <file name=\"minus.png\" role=\"horde\" />\n      <file name=\"monthview.png\" role=\"horde\" />\n      <file name=\"new.png\" role=\"horde\" />\n      <file name=\"new_big.png\" role=\"horde\" />\n      <file name=\"new_small.png\" role=\"horde\" />\n      <file name=\"new_small_fade.png\" role=\"horde\" />\n      <file name=\"new_task.png\" role=\"horde\" />\n      <file name=\"picker.png\" role=\"horde\" />\n      <file name=\"plus.png\" role=\"horde\" />\n      <file name=\"prefs.png\" role=\"horde\" />\n      <file name=\"print.png\" role=\"horde\" />\n      <file name=\"private-000.png\" role=\"horde\" />\n      <file name=\"private-fff.png\" role=\"horde\" />\n      <file name=\"recur-000.png\" role=\"horde\" />\n      <file name=\"recur-fff.png\" role=\"horde\" />\n      <file name=\"right.png\" role=\"horde\" />\n      <file name=\"search.png\" role=\"horde\" />\n      <file name=\"tasks.png\" role=\"horde\" />\n      <file name=\"today.png\" role=\"horde\" />\n      <file name=\"unknown-background.png\" role=\"horde\" />\n      <file name=\"weekview.png\" role=\"horde\" />\n      <file name=\"workweekview.png\" role=\"horde\" />\n      <file name=\"yearview.png\" role=\"horde\" />\n     </dir> <!-- /themes/default/graphics -->\n     <file name=\"embed.css\" role=\"horde\" />\n     <file name=\"ie7.css\" role=\"horde\" />\n     <file name=\"ie8.css\" role=\"horde\" />\n     <file name=\"mobile.css\" role=\"horde\" />\n     <file name=\"opera.css\" role=\"horde\" />\n     <file name=\"screen.css\" role=\"horde\" />\n     <file name=\"webkit.css\" role=\"horde\" />\n    </dir> <!-- /themes/default -->\n    <dir name=\"fadetogreen\">\n     <dir name=\"graphics\">\n      <file name=\"headerbox.png\" role=\"horde\" />\n     </dir> <!-- /themes/fadetogreen/graphics -->\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/fadetogreen -->\n    <dir name=\"mozilla\">\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/mozilla -->\n    <dir name=\"silver\">\n     <dir name=\"graphics\">\n      <dir name=\"alerts\">\n       <file name=\"alarm.png\" role=\"horde\" />\n       <file name=\"error.png\" role=\"horde\" />\n       <file name=\"message.png\" role=\"horde\" />\n       <file name=\"success.png\" role=\"horde\" />\n       <file name=\"warning.png\" role=\"horde\" />\n      </dir> <!-- /themes/silver/graphics/alerts -->\n      <file name=\"addressbook_browse.png\" role=\"horde\" />\n      <file name=\"agenda.png\" role=\"horde\" />\n      <file name=\"alarm-000.png\" role=\"horde\" />\n      <file name=\"alarm-fff.png\" role=\"horde\" />\n      <file name=\"alarm.png\" role=\"horde\" />\n      <file name=\"attendee-accepted.png\" role=\"horde\" />\n      <file name=\"attendee-declined.png\" role=\"horde\" />\n      <file name=\"attendee-none.png\" role=\"horde\" />\n      <file name=\"attendee-tentative.png\" role=\"horde\" />\n      <file name=\"attendees-000.png\" role=\"horde\" />\n      <file name=\"attendees-fff.png\" role=\"horde\" />\n      <file name=\"attendees.png\" role=\"horde\" />\n      <file name=\"calendars.png\" role=\"horde\" />\n      <file name=\"close.png\" role=\"horde\" />\n      <file name=\"dayview.png\" role=\"horde\" />\n      <file name=\"delete-000.png\" role=\"horde\" />\n      <file name=\"delete-fff.png\" role=\"horde\" />\n      <file name=\"edit-000.png\" role=\"horde\" />\n      <file name=\"edit-fff.png\" role=\"horde\" />\n      <file name=\"exception-000.png\" role=\"horde\" />\n      <file name=\"exception-fff.png\" role=\"horde\" />\n      <file name=\"favicon.ico\" role=\"horde\" />\n      <file name=\"goto.png\" role=\"horde\" />\n      <file name=\"help.png\" role=\"horde\" />\n      <file name=\"kronolith.png\" role=\"horde\" />\n      <file name=\"left.png\" role=\"horde\" />\n      <file name=\"loading.gif\" role=\"horde\" />\n      <file name=\"logout.png\" role=\"horde\" />\n      <file name=\"menu-active.png\" role=\"horde\" />\n      <file name=\"menu.png\" role=\"horde\" />\n      <file name=\"minus.png\" role=\"horde\" />\n      <file name=\"monthview.png\" role=\"horde\" />\n      <file name=\"new.png\" role=\"horde\" />\n      <file name=\"new_big.png\" role=\"horde\" />\n      <file name=\"new_small.png\" role=\"horde\" />\n      <file name=\"new_task.png\" role=\"horde\" />\n      <file name=\"picker.png\" role=\"horde\" />\n      <file name=\"plus.png\" role=\"horde\" />\n      <file name=\"prefs.png\" role=\"horde\" />\n      <file name=\"print.png\" role=\"horde\" />\n      <file name=\"private-000.png\" role=\"horde\" />\n      <file name=\"private-fff.png\" role=\"horde\" />\n      <file name=\"recur-000.png\" role=\"horde\" />\n      <file name=\"recur-fff.png\" role=\"horde\" />\n      <file name=\"right.png\" role=\"horde\" />\n      <file name=\"search.png\" role=\"horde\" />\n      <file name=\"tasks.png\" role=\"horde\" />\n      <file name=\"today.png\" role=\"horde\" />\n      <file name=\"unknown-background.png\" role=\"horde\" />\n      <file name=\"weekview.png\" role=\"horde\" />\n      <file name=\"workweekview.png\" role=\"horde\" />\n      <file name=\"yearview.png\" role=\"horde\" />\n     </dir> <!-- /themes/silver/graphics -->\n     <file name=\"ie7.css\" role=\"horde\" />\n     <file name=\"ie8.css\" role=\"horde\" />\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/silver -->\n    <dir name=\"simplex\">\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/simplex -->\n    <dir name=\"tango-blue\">\n     <dir name=\"graphics\">\n      <dir name=\"alerts\">\n       <file name=\"alarm.png\" role=\"horde\" />\n       <file name=\"error.png\" role=\"horde\" />\n       <file name=\"message.png\" role=\"horde\" />\n       <file name=\"success.png\" role=\"horde\" />\n       <file name=\"warning.png\" role=\"horde\" />\n      </dir> <!-- /themes/tango-blue/graphics/alerts -->\n      <file name=\"addressbook_browse.png\" role=\"horde\" />\n      <file name=\"alarm-000.png\" role=\"horde\" />\n      <file name=\"alarm-fff.png\" role=\"horde\" />\n      <file name=\"alarm.png\" role=\"horde\" />\n      <file name=\"attendee-accepted.png\" role=\"horde\" />\n      <file name=\"attendee-declined.png\" role=\"horde\" />\n      <file name=\"attendee-none.png\" role=\"horde\" />\n      <file name=\"attendee-tentative.png\" role=\"horde\" />\n      <file name=\"attendees-000.png\" role=\"horde\" />\n      <file name=\"attendees-fff.png\" role=\"horde\" />\n      <file name=\"attendees.png\" role=\"horde\" />\n      <file name=\"calendars.png\" role=\"horde\" />\n      <file name=\"close.png\" role=\"horde\" />\n      <file name=\"dayview.png\" role=\"horde\" />\n      <file name=\"delete-000.png\" role=\"horde\" />\n      <file name=\"delete-fff.png\" role=\"horde\" />\n      <file name=\"edit-000.png\" role=\"horde\" />\n      <file name=\"edit-fff.png\" role=\"horde\" />\n      <file name=\"exception-000.png\" role=\"horde\" />\n      <file name=\"exception-fff.png\" role=\"horde\" />\n      <file name=\"favicon.ico\" role=\"horde\" />\n      <file name=\"goto.png\" role=\"horde\" />\n      <file name=\"kronolith.png\" role=\"horde\" />\n      <file name=\"loading.gif\" role=\"horde\" />\n      <file name=\"minus.png\" role=\"horde\" />\n      <file name=\"monthview.png\" role=\"horde\" />\n      <file name=\"new.png\" role=\"horde\" />\n      <file name=\"new_big.png\" role=\"horde\" />\n      <file name=\"new_small.png\" role=\"horde\" />\n      <file name=\"picker.png\" role=\"horde\" />\n      <file name=\"plus.png\" role=\"horde\" />\n      <file name=\"print.png\" role=\"horde\" />\n      <file name=\"private-000.png\" role=\"horde\" />\n      <file name=\"private-fff.png\" role=\"horde\" />\n      <file name=\"recur-000.png\" role=\"horde\" />\n      <file name=\"recur-fff.png\" role=\"horde\" />\n      <file name=\"search.png\" role=\"horde\" />\n      <file name=\"today.png\" role=\"horde\" />\n      <file name=\"unknown-background.png\" role=\"horde\" />\n      <file name=\"weekview.png\" role=\"horde\" />\n      <file name=\"workweekview.png\" role=\"horde\" />\n      <file name=\"yearview.png\" role=\"horde\" />\n     </dir> <!-- /themes/tango-blue/graphics -->\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/tango-blue -->\n   </dir> <!-- /themes -->\n   <file name=\"add.php\" role=\"horde\" />\n   <file name=\"attend.php\" role=\"horde\" />\n   <file name=\"attendees.php\" role=\"horde\" />\n   <file name=\"contacts.php\" role=\"horde\" />\n   <file name=\"COPYING\" role=\"doc\" />\n   <file name=\"data.php\" role=\"horde\" />\n   <file name=\"day.php\" role=\"horde\" />\n   <file name=\"delete.php\" role=\"horde\" />\n   <file name=\"edit.php\" role=\"horde\" />\n   <file name=\"event.php\" role=\"horde\" />\n   <file name=\"fb.php\" role=\"horde\" />\n   <file name=\"index.php\" role=\"horde\" />\n   <file name=\"mobile.php\" role=\"horde\" />\n   <file name=\"month.php\" role=\"horde\" />\n   <file name=\"new.php\" role=\"horde\" />\n   <file name=\"perms.php\" role=\"horde\" />\n   <file name=\"README\" role=\"doc\" />\n   <file name=\"search.php\" role=\"horde\" />\n   <file name=\"view.php\" role=\"horde\" />\n   <file name=\"week.php\" role=\"horde\" />\n   <file name=\"workweek.php\" role=\"horde\" />\n   <file name=\"year.php\" role=\"horde\" />\n  </dir> <!-- / -->\n </contents>\n <dependencies>\n  <required>\n   <php>\n    <min>5.2.0</min>\n   </php>\n   <pearinstaller>\n    <min>1.7.0</min>\n   </pearinstaller>\n   <package>\n    <name>content</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>horde</name>\n    <channel>pear.horde.org</channel>\n    <min>4.0.0</min>\n    <max>5.0.0</max>\n    <exclude>5.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Auth</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.4</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Autoloader</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Core</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Data</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Date</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Date_Parser</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Exception</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Form</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Group</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Http</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_History</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Icalendar</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Image</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Lock</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_LoginTasks</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Mail</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Mime</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Nls</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Notification</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Perms</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.3</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Serialize</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Share</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Support</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Text_Filter</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Url</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Util</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_View</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Date</name>\n    <channel>pear.php.net</channel>\n   </package>\n   <extension>\n    <name>gettext</name>\n   </extension>\n   <extension>\n    <name>json</name>\n   </extension>\n   <extension>\n    <name>SimpleXML</name>\n   </extension>\n  </required>\n  <optional>\n   <package>\n    <name>timeobjects</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_ActiveSync</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Db</name>\n    <channel>pear.horde.org</channel>\n    <min>1.2.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Test</name>\n    <channel>pear.horde.org</channel>\n    <min>1.3.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Date_Holidays</name>\n    <channel>pear.php.net</channel>\n    <min>0.21.0</min>\n   </package>\n   <extension>\n    <name>xmlwriter</name>\n   </extension>\n  </optional>\n </dependencies>\n <usesrole>\n  <role>horde</role>\n  <package>Role</package>\n  <channel>pear.horde.org</channel>\n </usesrole>\n <phprelease>\n  <filelist>\n   <install as=\"kronolith-agenda\" name=\"bin/kronolith-agenda\" />\n   <install as=\"kronolith-convert-datatree-shares-to-sql\" name=\"bin/kronolith-convert-datatree-shares-to-sql\" />\n   <install as=\"kronolith-convert-sql-shares-to-sqlng\" name=\"bin/kronolith-convert-sql-shares-to-sqlng\" />\n   <install as=\"kronolith-convert-to-utc\" name=\"bin/kronolith-convert-to-utc\" />\n   <install as=\"kronolith-import-icals\" name=\"bin/kronolith-import-icals\" />\n   <install as=\"kronolith-import-squirrelmail-calendar\" name=\"bin/kronolith-import-squirrelmail-calendar\" />\n   <install as=\"kronolith/calendars/create.php\" name=\"calendars/create.php\" />\n   <install as=\"kronolith/calendars/delete.php\" name=\"calendars/delete.php\" />\n   <install as=\"kronolith/calendars/edit.php\" name=\"calendars/edit.php\" />\n   <install as=\"kronolith/calendars/index.php\" name=\"calendars/index.php\" />\n   <install as=\"kronolith/calendars/info.php\" name=\"calendars/info.php\" />\n   <install as=\"kronolith/calendars/remote_edit.php\" name=\"calendars/remote_edit.php\" />\n   <install as=\"kronolith/calendars/remote_subscribe.php\" name=\"calendars/remote_subscribe.php\" />\n   <install as=\"kronolith/calendars/remote_unsubscribe.php\" name=\"calendars/remote_unsubscribe.php\" />\n   <install as=\"kronolith/calendars/subscribe.php\" name=\"calendars/subscribe.php\" />\n   <install as=\"kronolith/config/.htaccess\" name=\"config/.htaccess\" />\n   <install as=\"kronolith/config/conf.xml\" name=\"config/conf.xml\" />\n   <install as=\"kronolith/config/hooks.php.dist\" name=\"config/hooks.php.dist\" />\n   <install as=\"kronolith/config/menu.php.dist\" name=\"config/menu.php.dist\" />\n   <install as=\"kronolith/config/prefs.php\" name=\"config/prefs.php\" />\n   <install as=\"CHANGES\" name=\"docs/CHANGES\" />\n   <install as=\"CREDITS\" name=\"docs/CREDITS\" />\n   <install as=\"INSTALL\" name=\"docs/INSTALL\" />\n   <install as=\"lighttpd-kronolith.conf\" name=\"docs/lighttpd-kronolith.conf\" />\n   <install as=\"RELEASE_NOTES\" name=\"docs/RELEASE_NOTES\" />\n   <install as=\"TODO\" name=\"docs/TODO\" />\n   <install as=\"UPGRADING\" name=\"docs/UPGRADING\" />\n   <install as=\"kronolith/feed/.htaccess\" name=\"feed/.htaccess\" />\n   <install as=\"kronolith/feed/index.php\" name=\"feed/index.php\" />\n   <install as=\"kronolith/js/calendar-panel.js\" name=\"js/calendar-panel.js\" />\n   <install as=\"kronolith/js/dragdrop2.js\" name=\"js/dragdrop2.js\" />\n   <install as=\"kronolith/js/edit.js\" name=\"js/edit.js\" />\n   <install as=\"kronolith/js/embed.js\" name=\"js/embed.js\" />\n   <install as=\"kronolith/js/goto.js\" name=\"js/goto.js\" />\n   <install as=\"kronolith/js/kronolith.js\" name=\"js/kronolith.js\" />\n   <install as=\"kronolith/js/mobile.js\" name=\"js/mobile.js\" />\n   <install as=\"kronolith/js/tagactions.js\" name=\"js/tagactions.js\" />\n   <install as=\"kronolith/js/views.js\" name=\"js/views.js\" />\n   <install as=\"kronolith/lib/.htaccess\" name=\"lib/.htaccess\" />\n   <install as=\"kronolith/lib/Api.php\" name=\"lib/Api.php\" />\n   <install as=\"kronolith/lib/Application.php\" name=\"lib/Application.php\" />\n   <install as=\"kronolith/lib/Calendar.php\" name=\"lib/Calendar.php\" />\n   <install as=\"kronolith/lib/Day.php\" name=\"lib/Day.php\" />\n   <install as=\"kronolith/lib/Driver.php\" name=\"lib/Driver.php\" />\n   <install as=\"kronolith/lib/Event.php\" name=\"lib/Event.php\" />\n   <install as=\"kronolith/lib/Exception.php\" name=\"lib/Exception.php\" />\n   <install as=\"kronolith/lib/FreeBusy.php\" name=\"lib/FreeBusy.php\" />\n   <install as=\"kronolith/lib/Kronolith.php\" name=\"lib/Kronolith.php\" />\n   <install as=\"kronolith/lib/Resource.php\" name=\"lib/Resource.php\" />\n   <install as=\"kronolith/lib/Storage.php\" name=\"lib/Storage.php\" />\n   <install as=\"kronolith/lib/Tagger.php\" name=\"lib/Tagger.php\" />\n   <install as=\"kronolith/lib/Test.php\" name=\"lib/Test.php\" />\n   <install as=\"kronolith/lib/Ajax/Application.php\" name=\"lib/Ajax/Application.php\" />\n   <install as=\"kronolith/lib/Ajax/Imple/ContactAutoCompleter.php\" name=\"lib/Ajax/Imple/ContactAutoCompleter.php\" />\n   <install as=\"kronolith/lib/Ajax/Imple/Embed.php\" name=\"lib/Ajax/Imple/Embed.php\" />\n   <install as=\"kronolith/lib/Ajax/Imple/TagActions.php\" name=\"lib/Ajax/Imple/TagActions.php\" />\n   <install as=\"kronolith/lib/Ajax/Imple/TagAutoCompleter.php\" name=\"lib/Ajax/Imple/TagAutoCompleter.php\" />\n   <install as=\"kronolith/lib/Block/Month.php\" name=\"lib/Block/Month.php\" />\n   <install as=\"kronolith/lib/Block/Monthlist.php\" name=\"lib/Block/Monthlist.php\" />\n   <install as=\"kronolith/lib/Block/Prevmonthlist.php\" name=\"lib/Block/Prevmonthlist.php\" />\n   <install as=\"kronolith/lib/Block/Summary.php\" name=\"lib/Block/Summary.php\" />\n   <install as=\"kronolith/lib/Calendar/External.php\" name=\"lib/Calendar/External.php\" />\n   <install as=\"kronolith/lib/Calendar/Holiday.php\" name=\"lib/Calendar/Holiday.php\" />\n   <install as=\"kronolith/lib/Calendar/Internal.php\" name=\"lib/Calendar/Internal.php\" />\n   <install as=\"kronolith/lib/Calendar/Remote.php\" name=\"lib/Calendar/Remote.php\" />\n   <install as=\"kronolith/lib/Calendar/Resource.php\" name=\"lib/Calendar/Resource.php\" />\n   <install as=\"kronolith/lib/Calendar/External/Tasks.php\" name=\"lib/Calendar/External/Tasks.php\" />\n   <install as=\"kronolith/lib/Calendars/Base.php\" name=\"lib/Calendars/Base.php\" />\n   <install as=\"kronolith/lib/Calendars/Default.php\" name=\"lib/Calendars/Default.php\" />\n   <install as=\"kronolith/lib/Calendars/Kolab.php\" name=\"lib/Calendars/Kolab.php\" />\n   <install as=\"kronolith/lib/Driver/Holidays.php\" name=\"lib/Driver/Holidays.php\" />\n   <install as=\"kronolith/lib/Driver/Horde.php\" name=\"lib/Driver/Horde.php\" />\n   <install as=\"kronolith/lib/Driver/Ical.php\" name=\"lib/Driver/Ical.php\" />\n   <install as=\"kronolith/lib/Driver/Kolab.php\" name=\"lib/Driver/Kolab.php\" />\n   <install as=\"kronolith/lib/Driver/Mock.php\" name=\"lib/Driver/Mock.php\" />\n   <install as=\"kronolith/lib/Driver/Resource.php\" name=\"lib/Driver/Resource.php\" />\n   <install as=\"kronolith/lib/Driver/Sql.php\" name=\"lib/Driver/Sql.php\" />\n   <install as=\"kronolith/lib/Event/Holidays.php\" name=\"lib/Event/Holidays.php\" />\n   <install as=\"kronolith/lib/Event/Horde.php\" name=\"lib/Event/Horde.php\" />\n   <install as=\"kronolith/lib/Event/Ical.php\" name=\"lib/Event/Ical.php\" />\n   <install as=\"kronolith/lib/Event/Kolab.php\" name=\"lib/Event/Kolab.php\" />\n   <install as=\"kronolith/lib/Event/Resource.php\" name=\"lib/Event/Resource.php\" />\n   <install as=\"kronolith/lib/Event/Sql.php\" name=\"lib/Event/Sql.php\" />\n   <install as=\"kronolith/lib/Factory/Calendars.php\" name=\"lib/Factory/Calendars.php\" />\n   <install as=\"kronolith/lib/Factory/Driver.php\" name=\"lib/Factory/Driver.php\" />\n   <install as=\"kronolith/lib/Factory/Geo.php\" name=\"lib/Factory/Geo.php\" />\n   <install as=\"kronolith/lib/Factory/Storage.php\" name=\"lib/Factory/Storage.php\" />\n   <install as=\"kronolith/lib/Form/CreateCalendar.php\" name=\"lib/Form/CreateCalendar.php\" />\n   <install as=\"kronolith/lib/Form/CreateResource.php\" name=\"lib/Form/CreateResource.php\" />\n   <install as=\"kronolith/lib/Form/CreateResourceGroup.php\" name=\"lib/Form/CreateResourceGroup.php\" />\n   <install as=\"kronolith/lib/Form/DeleteCalendar.php\" name=\"lib/Form/DeleteCalendar.php\" />\n   <install as=\"kronolith/lib/Form/DeleteResource.php\" name=\"lib/Form/DeleteResource.php\" />\n   <install as=\"kronolith/lib/Form/DeleteResourceGroup.php\" name=\"lib/Form/DeleteResourceGroup.php\" />\n   <install as=\"kronolith/lib/Form/EditCalendar.php\" name=\"lib/Form/EditCalendar.php\" />\n   <install as=\"kronolith/lib/Form/EditRemoteCalendar.php\" name=\"lib/Form/EditRemoteCalendar.php\" />\n   <install as=\"kronolith/lib/Form/EditResource.php\" name=\"lib/Form/EditResource.php\" />\n   <install as=\"kronolith/lib/Form/EditResourceGroup.php\" name=\"lib/Form/EditResourceGroup.php\" />\n   <install as=\"kronolith/lib/Form/SubscribeRemoteCalendar.php\" name=\"lib/Form/SubscribeRemoteCalendar.php\" />\n   <install as=\"kronolith/lib/Form/UnsubscribeRemoteCalendar.php\" name=\"lib/Form/UnsubscribeRemoteCalendar.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View.php\" name=\"lib/FreeBusy/View.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View/Day.php\" name=\"lib/FreeBusy/View/Day.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View/Month.php\" name=\"lib/FreeBusy/View/Month.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View/Week.php\" name=\"lib/FreeBusy/View/Week.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View/Workweek.php\" name=\"lib/FreeBusy/View/Workweek.php\" />\n   <install as=\"kronolith/lib/Geo/Base.php\" name=\"lib/Geo/Base.php\" />\n   <install as=\"kronolith/lib/Geo/Mysql.php\" name=\"lib/Geo/Mysql.php\" />\n   <install as=\"kronolith/lib/Geo/Sql.php\" name=\"lib/Geo/Sql.php\" />\n   <install as=\"kronolith/lib/LoginTasks/SystemTask/Upgrade.php\" name=\"lib/LoginTasks/SystemTask/Upgrade.php\" />\n   <install as=\"kronolith/lib/LoginTasks/Task/PurgeEvents.php\" name=\"lib/LoginTasks/Task/PurgeEvents.php\" />\n   <install as=\"kronolith/lib/Notification/Listener/AjaxStatus.php\" name=\"lib/Notification/Listener/AjaxStatus.php\" />\n   <install as=\"kronolith/lib/Resource/Base.php\" name=\"lib/Resource/Base.php\" />\n   <install as=\"kronolith/lib/Resource/Group.php\" name=\"lib/Resource/Group.php\" />\n   <install as=\"kronolith/lib/Resource/Single.php\" name=\"lib/Resource/Single.php\" />\n   <install as=\"kronolith/lib/Storage/Kolab.php\" name=\"lib/Storage/Kolab.php\" />\n   <install as=\"kronolith/lib/Storage/Sql.php\" name=\"lib/Storage/Sql.php\" />\n   <install as=\"kronolith/lib/View/Day.php\" name=\"lib/View/Day.php\" />\n   <install as=\"kronolith/lib/View/DeleteEvent.php\" name=\"lib/View/DeleteEvent.php\" />\n   <install as=\"kronolith/lib/View/EditEvent.php\" name=\"lib/View/EditEvent.php\" />\n   <install as=\"kronolith/lib/View/Event.php\" name=\"lib/View/Event.php\" />\n   <install as=\"kronolith/lib/View/ExportEvent.php\" name=\"lib/View/ExportEvent.php\" />\n   <install as=\"kronolith/lib/View/Month.php\" name=\"lib/View/Month.php\" />\n   <install as=\"kronolith/lib/View/Week.php\" name=\"lib/View/Week.php\" />\n   <install as=\"kronolith/lib/View/WorkWeek.php\" name=\"lib/View/WorkWeek.php\" />\n   <install as=\"kronolith/lib/View/Year.php\" name=\"lib/View/Year.php\" />\n   <install as=\"kronolith/locale/.htaccess\" name=\"locale/.htaccess\" />\n   <install as=\"kronolith/locale/kronolith.pot\" name=\"locale/kronolith.pot\" />\n   <install as=\"kronolith/locale/ar/LC_MESSAGES/kronolith.mo\" name=\"locale/ar/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ar/LC_MESSAGES/kronolith.po\" name=\"locale/ar/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/bg/LC_MESSAGES/kronolith.mo\" name=\"locale/bg/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/bg/LC_MESSAGES/kronolith.po\" name=\"locale/bg/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ca/help.xml\" name=\"locale/ca/help.xml\" />\n   <install as=\"kronolith/locale/ca/LC_MESSAGES/kronolith.mo\" name=\"locale/ca/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ca/LC_MESSAGES/kronolith.po\" name=\"locale/ca/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/cs/LC_MESSAGES/kronolith.mo\" name=\"locale/cs/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/cs/LC_MESSAGES/kronolith.po\" name=\"locale/cs/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/da/LC_MESSAGES/kronolith.mo\" name=\"locale/da/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/da/LC_MESSAGES/kronolith.po\" name=\"locale/da/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/de/help.xml\" name=\"locale/de/help.xml\" />\n   <install as=\"kronolith/locale/de/LC_MESSAGES/kronolith.mo\" name=\"locale/de/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/de/LC_MESSAGES/kronolith.po\" name=\"locale/de/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/el/LC_MESSAGES/kronolith.mo\" name=\"locale/el/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/el/LC_MESSAGES/kronolith.po\" name=\"locale/el/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/en/help.xml\" name=\"locale/en/help.xml\" />\n   <install as=\"kronolith/locale/es/help.xml\" name=\"locale/es/help.xml\" />\n   <install as=\"kronolith/locale/es/LC_MESSAGES/kronolith.mo\" name=\"locale/es/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/es/LC_MESSAGES/kronolith.po\" name=\"locale/es/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/et/LC_MESSAGES/kronolith.mo\" name=\"locale/et/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/et/LC_MESSAGES/kronolith.po\" name=\"locale/et/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/eu/help.xml\" name=\"locale/eu/help.xml\" />\n   <install as=\"kronolith/locale/eu/LC_MESSAGES/kronolith.mo\" name=\"locale/eu/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/eu/LC_MESSAGES/kronolith.po\" name=\"locale/eu/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/fi/help.xml\" name=\"locale/fi/help.xml\" />\n   <install as=\"kronolith/locale/fi/LC_MESSAGES/kronolith.mo\" name=\"locale/fi/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/fi/LC_MESSAGES/kronolith.po\" name=\"locale/fi/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/fr/help.xml\" name=\"locale/fr/help.xml\" />\n   <install as=\"kronolith/locale/fr/LC_MESSAGES/kronolith.mo\" name=\"locale/fr/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/fr/LC_MESSAGES/kronolith.po\" name=\"locale/fr/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/hr/help.xml\" name=\"locale/hr/help.xml\" />\n   <install as=\"kronolith/locale/hr/LC_MESSAGES/kronolith.mo\" name=\"locale/hr/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/hr/LC_MESSAGES/kronolith.po\" name=\"locale/hr/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/hu/help.xml\" name=\"locale/hu/help.xml\" />\n   <install as=\"kronolith/locale/hu/LC_MESSAGES/kronolith.mo\" name=\"locale/hu/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/hu/LC_MESSAGES/kronolith.po\" name=\"locale/hu/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/it/LC_MESSAGES/kronolith.mo\" name=\"locale/it/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/it/LC_MESSAGES/kronolith.po\" name=\"locale/it/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ja/LC_MESSAGES/kronolith.mo\" name=\"locale/ja/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ja/LC_MESSAGES/kronolith.po\" name=\"locale/ja/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ko/LC_MESSAGES/kronolith.mo\" name=\"locale/ko/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ko/LC_MESSAGES/kronolith.po\" name=\"locale/ko/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/lt/LC_MESSAGES/kronolith.mo\" name=\"locale/lt/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/lt/LC_MESSAGES/kronolith.po\" name=\"locale/lt/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/lv/help.xml\" name=\"locale/lv/help.xml\" />\n   <install as=\"kronolith/locale/lv/LC_MESSAGES/kronolith.mo\" name=\"locale/lv/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/lv/LC_MESSAGES/kronolith.po\" name=\"locale/lv/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/nb/LC_MESSAGES/kronolith.mo\" name=\"locale/nb/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/nb/LC_MESSAGES/kronolith.po\" name=\"locale/nb/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/nl/LC_MESSAGES/kronolith.mo\" name=\"locale/nl/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/nl/LC_MESSAGES/kronolith.po\" name=\"locale/nl/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/nn/LC_MESSAGES/kronolith.mo\" name=\"locale/nn/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/nn/LC_MESSAGES/kronolith.po\" name=\"locale/nn/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/pl/LC_MESSAGES/kronolith.mo\" name=\"locale/pl/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/pl/LC_MESSAGES/kronolith.po\" name=\"locale/pl/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/pt/LC_MESSAGES/kronolith.mo\" name=\"locale/pt/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/pt/LC_MESSAGES/kronolith.po\" name=\"locale/pt/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/pt_BR/help.xml\" name=\"locale/pt_BR/help.xml\" />\n   <install as=\"kronolith/locale/pt_BR/LC_MESSAGES/kronolith.mo\" name=\"locale/pt_BR/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/pt_BR/LC_MESSAGES/kronolith.po\" name=\"locale/pt_BR/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ro/LC_MESSAGES/kronolith.mo\" name=\"locale/ro/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ro/LC_MESSAGES/kronolith.po\" name=\"locale/ro/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ru/LC_MESSAGES/kronolith.mo\" name=\"locale/ru/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ru/LC_MESSAGES/kronolith.po\" name=\"locale/ru/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/sk/LC_MESSAGES/kronolith.mo\" name=\"locale/sk/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/sk/LC_MESSAGES/kronolith.po\" name=\"locale/sk/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/sl/LC_MESSAGES/kronolith.mo\" name=\"locale/sl/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/sl/LC_MESSAGES/kronolith.po\" name=\"locale/sl/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/sv/LC_MESSAGES/kronolith.mo\" name=\"locale/sv/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/sv/LC_MESSAGES/kronolith.po\" name=\"locale/sv/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/tr/help.xml\" name=\"locale/tr/help.xml\" />\n   <install as=\"kronolith/locale/tr/LC_MESSAGES/kronolith.mo\" name=\"locale/tr/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/tr/LC_MESSAGES/kronolith.po\" name=\"locale/tr/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/uk/LC_MESSAGES/kronolith.mo\" name=\"locale/uk/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/uk/LC_MESSAGES/kronolith.po\" name=\"locale/uk/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/zh_CN/LC_MESSAGES/kronolith.mo\" name=\"locale/zh_CN/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/zh_CN/LC_MESSAGES/kronolith.po\" name=\"locale/zh_CN/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/zh_TW/LC_MESSAGES/kronolith.mo\" name=\"locale/zh_TW/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/zh_TW/LC_MESSAGES/kronolith.po\" name=\"locale/zh_TW/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/migration/1_kronolith_base_tables.php\" name=\"migration/1_kronolith_base_tables.php\" />\n   <install as=\"kronolith/migration/2_kronolith_upgrade_autoincrement.php\" name=\"migration/2_kronolith_upgrade_autoincrement.php\" />\n   <install as=\"kronolith/migration/3_kronolith_upgrade_addallday.php\" name=\"migration/3_kronolith_upgrade_addallday.php\" />\n   <install as=\"kronolith/migration/4_kronolith_upgrade_addalarmmethods.php\" name=\"migration/4_kronolith_upgrade_addalarmmethods.php\" />\n   <install as=\"kronolith/migration/5_kronolith_upgrade_addcolor.php\" name=\"migration/5_kronolith_upgrade_addcolor.php\" />\n   <install as=\"kronolith/migration/6_kronolith_upgrade_addresources.php\" name=\"migration/6_kronolith_upgrade_addresources.php\" />\n   <install as=\"kronolith/migration/7_kronolith_upgrade_resourceautoincrement.php\" name=\"migration/7_kronolith_upgrade_resourceautoincrement.php\" />\n   <install as=\"kronolith/migration/8_kronolith_upgrade_addgeo.php\" name=\"migration/8_kronolith_upgrade_addgeo.php\" />\n   <install as=\"kronolith/migration/9_kronolith_upgrade_addurl.php\" name=\"migration/9_kronolith_upgrade_addurl.php\" />\n   <install as=\"kronolith/migration/10_kronolith_upgrade_exceptions.php\" name=\"migration/10_kronolith_upgrade_exceptions.php\" />\n   <install as=\"kronolith/migration/11_kronolith_upgrade_resourceemail.php\" name=\"migration/11_kronolith_upgrade_resourceemail.php\" />\n   <install as=\"kronolith/migration/12_kronolith_upgrade_addzoom.php\" name=\"migration/12_kronolith_upgrade_addzoom.php\" />\n   <install as=\"kronolith/migration/13_kronolith_upgrade_systemshares.php\" name=\"migration/13_kronolith_upgrade_systemshares.php\" />\n   <install as=\"kronolith/migration/14_kronolith_upgrade_missingresourcefield.php\" name=\"migration/14_kronolith_upgrade_missingresourcefield.php\" />\n   <install as=\"kronolith/migration/15_kronolith_upgrade_sqlng.php\" name=\"migration/15_kronolith_upgrade_sqlng.php\" />\n   <install as=\"kronolith/migration/16_kronolith_upgrade_sqlhierarchical.php\" name=\"migration/16_kronolith_upgrade_sqlhierarchical.php\" />\n   <install as=\"kronolith/migration/17_kronolith_upgrade_sqlnghierarchical.php\" name=\"migration/17_kronolith_upgrade_sqlnghierarchical.php\" />\n   <install as=\"kronolith/migration/18_kronolith_upgrade_categoriestotags.php\" name=\"migration/18_kronolith_upgrade_categoriestotags.php\" />\n   <install as=\"kronolith/migration/19_kronolith_upgrade_addmysqlgeo.php\" name=\"migration/19_kronolith_upgrade_addmysqlgeo.php\" />\n   <install as=\"kronolith/resources/create.php\" name=\"resources/create.php\" />\n   <install as=\"kronolith/resources/delete.php\" name=\"resources/delete.php\" />\n   <install as=\"kronolith/resources/edit.php\" name=\"resources/edit.php\" />\n   <install as=\"kronolith/resources/index.php\" name=\"resources/index.php\" />\n   <install as=\"kronolith/resources/groups/create.php\" name=\"resources/groups/create.php\" />\n   <install as=\"kronolith/resources/groups/delete.php\" name=\"resources/groups/delete.php\" />\n   <install as=\"kronolith/resources/groups/edit.php\" name=\"resources/groups/edit.php\" />\n   <install as=\"kronolith/resources/groups/index.php\" name=\"resources/groups/index.php\" />\n   <install as=\"kronolith/templates/calendar_info.php\" name=\"templates/calendar_info.php\" />\n   <install as=\"kronolith/templates/calendar_list.php\" name=\"templates/calendar_list.php\" />\n   <install as=\"kronolith/templates/calendar_titles.inc\" name=\"templates/calendar_titles.inc\" />\n   <install as=\"kronolith/templates/javascript_defs.php\" name=\"templates/javascript_defs.php\" />\n   <install as=\"kronolith/templates/panel.inc\" name=\"templates/panel.inc\" />\n   <install as=\"kronolith/templates/agenda/notification.html.php\" name=\"templates/agenda/notification.html.php\" />\n   <install as=\"kronolith/templates/agenda/notification.plain.php\" name=\"templates/agenda/notification.plain.php\" />\n   <install as=\"kronolith/templates/alarm/mail.html.php\" name=\"templates/alarm/mail.html.php\" />\n   <install as=\"kronolith/templates/alarm/mail.plain.php\" name=\"templates/alarm/mail.plain.php\" />\n   <install as=\"kronolith/templates/attendees/attendees.inc\" name=\"templates/attendees/attendees.inc\" />\n   <install as=\"kronolith/templates/chunks/calendar.php\" name=\"templates/chunks/calendar.php\" />\n   <install as=\"kronolith/templates/chunks/permissions.inc\" name=\"templates/chunks/permissions.inc\" />\n   <install as=\"kronolith/templates/contacts/contacts.inc\" name=\"templates/contacts/contacts.inc\" />\n   <install as=\"kronolith/templates/data/export.inc\" name=\"templates/data/export.inc\" />\n   <install as=\"kronolith/templates/data/import.inc\" name=\"templates/data/import.inc\" />\n   <install as=\"kronolith/templates/day/all_day.inc\" name=\"templates/day/all_day.inc\" />\n   <install as=\"kronolith/templates/day/head.inc\" name=\"templates/day/head.inc\" />\n   <install as=\"kronolith/templates/day/head_side_by_side.inc\" name=\"templates/day/head_side_by_side.inc\" />\n   <install as=\"kronolith/templates/day/rows.html\" name=\"templates/day/rows.html\" />\n   <install as=\"kronolith/templates/delete/delete.inc\" name=\"templates/delete/delete.inc\" />\n   <install as=\"kronolith/templates/delete/one.inc\" name=\"templates/delete/one.inc\" />\n   <install as=\"kronolith/templates/edit/edit.inc\" name=\"templates/edit/edit.inc\" />\n   <install as=\"kronolith/templates/edit/edit_timespan.inc\" name=\"templates/edit/edit_timespan.inc\" />\n   <install as=\"kronolith/templates/fbview/busyblock.html\" name=\"templates/fbview/busyblock.html\" />\n   <install as=\"kronolith/templates/fbview/emptyblock.html\" name=\"templates/fbview/emptyblock.html\" />\n   <install as=\"kronolith/templates/fbview/header.html\" name=\"templates/fbview/header.html\" />\n   <install as=\"kronolith/templates/fbview/legend.html\" name=\"templates/fbview/legend.html\" />\n   <install as=\"kronolith/templates/fbview/meetingblock.html\" name=\"templates/fbview/meetingblock.html\" />\n   <install as=\"kronolith/templates/fbview/row.html\" name=\"templates/fbview/row.html\" />\n   <install as=\"kronolith/templates/fbview/section.html\" name=\"templates/fbview/section.html\" />\n   <install as=\"kronolith/templates/fbview/unknownblock.html\" name=\"templates/fbview/unknownblock.html\" />\n   <install as=\"kronolith/templates/feeds/atom.xml\" name=\"templates/feeds/atom.xml\" />\n   <install as=\"kronolith/templates/index/agenda.inc\" name=\"templates/index/agenda.inc\" />\n   <install as=\"kronolith/templates/index/day.inc\" name=\"templates/index/day.inc\" />\n   <install as=\"kronolith/templates/index/edit.inc\" name=\"templates/index/edit.inc\" />\n   <install as=\"kronolith/templates/index/index.inc\" name=\"templates/index/index.inc\" />\n   <install as=\"kronolith/templates/index/month.inc\" name=\"templates/index/month.inc\" />\n   <install as=\"kronolith/templates/index/task.inc\" name=\"templates/index/task.inc\" />\n   <install as=\"kronolith/templates/index/tasks.inc\" name=\"templates/index/tasks.inc\" />\n   <install as=\"kronolith/templates/index/week.inc\" name=\"templates/index/week.inc\" />\n   <install as=\"kronolith/templates/index/year.inc\" name=\"templates/index/year.inc\" />\n   <install as=\"kronolith/templates/itip/notification.html.php\" name=\"templates/itip/notification.html.php\" />\n   <install as=\"kronolith/templates/itip/notification.plain.php\" name=\"templates/itip/notification.plain.php\" />\n   <install as=\"kronolith/templates/mobile/day.html.php\" name=\"templates/mobile/day.html.php\" />\n   <install as=\"kronolith/templates/mobile/event.html.php\" name=\"templates/mobile/event.html.php\" />\n   <install as=\"kronolith/templates/mobile/head.html.php\" name=\"templates/mobile/head.html.php\" />\n   <install as=\"kronolith/templates/mobile/javascript_defs.php\" name=\"templates/mobile/javascript_defs.php\" />\n   <install as=\"kronolith/templates/mobile/month.html.php\" name=\"templates/mobile/month.html.php\" />\n   <install as=\"kronolith/templates/mobile/notice.html.php\" name=\"templates/mobile/notice.html.php\" />\n   <install as=\"kronolith/templates/mobile/summary.html.php\" name=\"templates/mobile/summary.html.php\" />\n   <install as=\"kronolith/templates/month/head.inc\" name=\"templates/month/head.inc\" />\n   <install as=\"kronolith/templates/month/head_side_by_side.inc\" name=\"templates/month/head_side_by_side.inc\" />\n   <install as=\"kronolith/templates/perms/perms.inc\" name=\"templates/perms/perms.inc\" />\n   <install as=\"kronolith/templates/prefs/defaultalarm.html\" name=\"templates/prefs/defaultalarm.html\" />\n   <install as=\"kronolith/templates/resources/form-header.inc\" name=\"templates/resources/form-header.inc\" />\n   <install as=\"kronolith/templates/resources/resource-form.php\" name=\"templates/resources/resource-form.php\" />\n   <install as=\"kronolith/templates/search/empty.inc\" name=\"templates/search/empty.inc\" />\n   <install as=\"kronolith/templates/search/event_footers.inc\" name=\"templates/search/event_footers.inc\" />\n   <install as=\"kronolith/templates/search/event_headers.inc\" name=\"templates/search/event_headers.inc\" />\n   <install as=\"kronolith/templates/search/event_summaries.inc\" name=\"templates/search/event_summaries.inc\" />\n   <install as=\"kronolith/templates/search/header.inc\" name=\"templates/search/header.inc\" />\n   <install as=\"kronolith/templates/search/search.inc\" name=\"templates/search/search.inc\" />\n   <install as=\"kronolith/templates/search/search_advanced.inc\" name=\"templates/search/search_advanced.inc\" />\n   <install as=\"kronolith/templates/share/notification.html.php\" name=\"templates/share/notification.html.php\" />\n   <install as=\"kronolith/templates/share/notification.plain.php\" name=\"templates/share/notification.plain.php\" />\n   <install as=\"kronolith/templates/view/view.inc\" name=\"templates/view/view.inc\" />\n   <install as=\"kronolith/templates/week/head.inc\" name=\"templates/week/head.inc\" />\n   <install as=\"kronolith/templates/week/head_side_by_side.inc\" name=\"templates/week/head_side_by_side.inc\" />\n   <install as=\"kronolith/templates/year/head.inc\" name=\"templates/year/head.inc\" />\n   <install as=\"Kronolith/AllTests.php\" name=\"test/Kronolith/AllTests.php\" />\n   <install as=\"Kronolith/Autoload.php\" name=\"test/Kronolith/Autoload.php\" />\n   <install as=\"Kronolith/phpunit.xml\" name=\"test/Kronolith/phpunit.xml\" />\n   <install as=\"Kronolith/TestCase.php\" name=\"test/Kronolith/TestCase.php\" />\n   <install as=\"Kronolith/fixtures/allday.ics\" name=\"test/Kronolith/fixtures/allday.ics\" />\n   <install as=\"Kronolith/fixtures/bug7068.ics\" name=\"test/Kronolith/fixtures/bug7068.ics\" />\n   <install as=\"Kronolith/fixtures/export1.ics\" name=\"test/Kronolith/fixtures/export1.ics\" />\n   <install as=\"Kronolith/fixtures/export2.ics\" name=\"test/Kronolith/fixtures/export2.ics\" />\n   <install as=\"Kronolith/fixtures/export3.ics\" name=\"test/Kronolith/fixtures/export3.ics\" />\n   <install as=\"Kronolith/fixtures/export4.ics\" name=\"test/Kronolith/fixtures/export4.ics\" />\n   <install as=\"Kronolith/fixtures/fromicalendar.ics\" name=\"test/Kronolith/fixtures/fromicalendar.ics\" />\n   <install as=\"Kronolith/Integration/AllDayTest.php\" name=\"test/Kronolith/Integration/AllDayTest.php\" />\n   <install as=\"Kronolith/Integration/FromIcalendarTest.php\" name=\"test/Kronolith/Integration/FromIcalendarTest.php\" />\n   <install as=\"Kronolith/Integration/ToIcalendarTest.php\" name=\"test/Kronolith/Integration/ToIcalendarTest.php\" />\n   <install as=\"Kronolith/Integration/Driver/Base.php\" name=\"test/Kronolith/Integration/Driver/Base.php\" />\n   <install as=\"Kronolith/Integration/Driver/KolabTest.php\" name=\"test/Kronolith/Integration/Driver/KolabTest.php\" />\n   <install as=\"Kronolith/Integration/Driver/Sql/Base.php\" name=\"test/Kronolith/Integration/Driver/Sql/Base.php\" />\n   <install as=\"Kronolith/Integration/Driver/Sql/Pdo/SqliteTest.php\" name=\"test/Kronolith/Integration/Driver/Sql/Pdo/SqliteTest.php\" />\n   <install as=\"Kronolith/Integration/Kronolith/Base.php\" name=\"test/Kronolith/Integration/Kronolith/Base.php\" />\n   <install as=\"Kronolith/Integration/Kronolith/KolabTest.php\" name=\"test/Kronolith/Integration/Kronolith/KolabTest.php\" />\n   <install as=\"Kronolith/Integration/Kronolith/Sql/Base.php\" name=\"test/Kronolith/Integration/Kronolith/Sql/Base.php\" />\n   <install as=\"Kronolith/Integration/Kronolith/Sql/Pdo/SqliteTest.php\" name=\"test/Kronolith/Integration/Kronolith/Sql/Pdo/SqliteTest.php\" />\n   <install as=\"Kronolith/Stub/Driver.php\" name=\"test/Kronolith/Stub/Driver.php\" />\n   <install as=\"Kronolith/Stub/Registry.php\" name=\"test/Kronolith/Stub/Registry.php\" />\n   <install as=\"Kronolith/Stub/ShareFactory.php\" name=\"test/Kronolith/Stub/ShareFactory.php\" />\n   <install as=\"Kronolith/Stub/Tagger.php\" name=\"test/Kronolith/Stub/Tagger.php\" />\n   <install as=\"Kronolith/Stub/Types.php\" name=\"test/Kronolith/Stub/Types.php\" />\n   <install as=\"kronolith/themes/bluewhite/screen.css\" name=\"themes/bluewhite/screen.css\" />\n   <install as=\"kronolith/themes/burntorange/screen.css\" name=\"themes/burntorange/screen.css\" />\n   <install as=\"kronolith/themes/default/embed.css\" name=\"themes/default/embed.css\" />\n   <install as=\"kronolith/themes/default/ie7.css\" name=\"themes/default/ie7.css\" />\n   <install as=\"kronolith/themes/default/ie8.css\" name=\"themes/default/ie8.css\" />\n   <install as=\"kronolith/themes/default/mobile.css\" name=\"themes/default/mobile.css\" />\n   <install as=\"kronolith/themes/default/opera.css\" name=\"themes/default/opera.css\" />\n   <install as=\"kronolith/themes/default/screen.css\" name=\"themes/default/screen.css\" />\n   <install as=\"kronolith/themes/default/webkit.css\" name=\"themes/default/webkit.css\" />\n   <install as=\"kronolith/themes/default/graphics/addressbook_browse.png\" name=\"themes/default/graphics/addressbook_browse.png\" />\n   <install as=\"kronolith/themes/default/graphics/agenda.png\" name=\"themes/default/graphics/agenda.png\" />\n   <install as=\"kronolith/themes/default/graphics/alarm-000.png\" name=\"themes/default/graphics/alarm-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/alarm-fff.png\" name=\"themes/default/graphics/alarm-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/alarm.png\" name=\"themes/default/graphics/alarm.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendee-accepted.png\" name=\"themes/default/graphics/attendee-accepted.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendee-declined.png\" name=\"themes/default/graphics/attendee-declined.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendee-none.png\" name=\"themes/default/graphics/attendee-none.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendee-tentative.png\" name=\"themes/default/graphics/attendee-tentative.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendees-000.png\" name=\"themes/default/graphics/attendees-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendees-fff.png\" name=\"themes/default/graphics/attendees-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendees.png\" name=\"themes/default/graphics/attendees.png\" />\n   <install as=\"kronolith/themes/default/graphics/back_quick.png\" name=\"themes/default/graphics/back_quick.png\" />\n   <install as=\"kronolith/themes/default/graphics/big_agenda.png\" name=\"themes/default/graphics/big_agenda.png\" />\n   <install as=\"kronolith/themes/default/graphics/big_alarm.png\" name=\"themes/default/graphics/big_alarm.png\" />\n   <install as=\"kronolith/themes/default/graphics/big_invitation.png\" name=\"themes/default/graphics/big_invitation.png\" />\n   <install as=\"kronolith/themes/default/graphics/big_share.png\" name=\"themes/default/graphics/big_share.png\" />\n   <install as=\"kronolith/themes/default/graphics/calendars.png\" name=\"themes/default/graphics/calendars.png\" />\n   <install as=\"kronolith/themes/default/graphics/checkbox_off.png\" name=\"themes/default/graphics/checkbox_off.png\" />\n   <install as=\"kronolith/themes/default/graphics/checkbox_on.png\" name=\"themes/default/graphics/checkbox_on.png\" />\n   <install as=\"kronolith/themes/default/graphics/checkbox_over.png\" name=\"themes/default/graphics/checkbox_over.png\" />\n   <install as=\"kronolith/themes/default/graphics/close.png\" name=\"themes/default/graphics/close.png\" />\n   <install as=\"kronolith/themes/default/graphics/dayview.png\" name=\"themes/default/graphics/dayview.png\" />\n   <install as=\"kronolith/themes/default/graphics/delete-000.png\" name=\"themes/default/graphics/delete-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/delete-fff.png\" name=\"themes/default/graphics/delete-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/drag-handle.png\" name=\"themes/default/graphics/drag-handle.png\" />\n   <install as=\"kronolith/themes/default/graphics/edit-000.png\" name=\"themes/default/graphics/edit-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/edit-fff.png\" name=\"themes/default/graphics/edit-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/exception-000.png\" name=\"themes/default/graphics/exception-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/exception-fff.png\" name=\"themes/default/graphics/exception-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/favicon.ico\" name=\"themes/default/graphics/favicon.ico\" />\n   <install as=\"kronolith/themes/default/graphics/goto.png\" name=\"themes/default/graphics/goto.png\" />\n   <install as=\"kronolith/themes/default/graphics/help.png\" name=\"themes/default/graphics/help.png\" />\n   <install as=\"kronolith/themes/default/graphics/kronolith.png\" name=\"themes/default/graphics/kronolith.png\" />\n   <install as=\"kronolith/themes/default/graphics/left.png\" name=\"themes/default/graphics/left.png\" />\n   <install as=\"kronolith/themes/default/graphics/loading.gif\" name=\"themes/default/graphics/loading.gif\" />\n   <install as=\"kronolith/themes/default/graphics/logout.png\" name=\"themes/default/graphics/logout.png\" />\n   <install as=\"kronolith/themes/default/graphics/minus.png\" name=\"themes/default/graphics/minus.png\" />\n   <install as=\"kronolith/themes/default/graphics/monthview.png\" name=\"themes/default/graphics/monthview.png\" />\n   <install as=\"kronolith/themes/default/graphics/new.png\" name=\"themes/default/graphics/new.png\" />\n   <install as=\"kronolith/themes/default/graphics/new_big.png\" name=\"themes/default/graphics/new_big.png\" />\n   <install as=\"kronolith/themes/default/graphics/new_small.png\" name=\"themes/default/graphics/new_small.png\" />\n   <install as=\"kronolith/themes/default/graphics/new_small_fade.png\" name=\"themes/default/graphics/new_small_fade.png\" />\n   <install as=\"kronolith/themes/default/graphics/new_task.png\" name=\"themes/default/graphics/new_task.png\" />\n   <install as=\"kronolith/themes/default/graphics/picker.png\" name=\"themes/default/graphics/picker.png\" />\n   <install as=\"kronolith/themes/default/graphics/plus.png\" name=\"themes/default/graphics/plus.png\" />\n   <install as=\"kronolith/themes/default/graphics/prefs.png\" name=\"themes/default/graphics/prefs.png\" />\n   <install as=\"kronolith/themes/default/graphics/print.png\" name=\"themes/default/graphics/print.png\" />\n   <install as=\"kronolith/themes/default/graphics/private-000.png\" name=\"themes/default/graphics/private-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/private-fff.png\" name=\"themes/default/graphics/private-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/recur-000.png\" name=\"themes/default/graphics/recur-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/recur-fff.png\" name=\"themes/default/graphics/recur-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/right.png\" name=\"themes/default/graphics/right.png\" />\n   <install as=\"kronolith/themes/default/graphics/search.png\" name=\"themes/default/graphics/search.png\" />\n   <install as=\"kronolith/themes/default/graphics/tasks.png\" name=\"themes/default/graphics/tasks.png\" />\n   <install as=\"kronolith/themes/default/graphics/today.png\" name=\"themes/default/graphics/today.png\" />\n   <install as=\"kronolith/themes/default/graphics/unknown-background.png\" name=\"themes/default/graphics/unknown-background.png\" />\n   <install as=\"kronolith/themes/default/graphics/weekview.png\" name=\"themes/default/graphics/weekview.png\" />\n   <install as=\"kronolith/themes/default/graphics/workweekview.png\" name=\"themes/default/graphics/workweekview.png\" />\n   <install as=\"kronolith/themes/default/graphics/yearview.png\" name=\"themes/default/graphics/yearview.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/alarm.png\" name=\"themes/default/graphics/alerts/alarm.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/error.png\" name=\"themes/default/graphics/alerts/error.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/message.png\" name=\"themes/default/graphics/alerts/message.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/success.png\" name=\"themes/default/graphics/alerts/success.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/warning.png\" name=\"themes/default/graphics/alerts/warning.png\" />\n   <install as=\"kronolith/themes/fadetogreen/screen.css\" name=\"themes/fadetogreen/screen.css\" />\n   <install as=\"kronolith/themes/fadetogreen/graphics/headerbox.png\" name=\"themes/fadetogreen/graphics/headerbox.png\" />\n   <install as=\"kronolith/themes/mozilla/screen.css\" name=\"themes/mozilla/screen.css\" />\n   <install as=\"kronolith/themes/silver/ie7.css\" name=\"themes/silver/ie7.css\" />\n   <install as=\"kronolith/themes/silver/ie8.css\" name=\"themes/silver/ie8.css\" />\n   <install as=\"kronolith/themes/silver/screen.css\" name=\"themes/silver/screen.css\" />\n   <install as=\"kronolith/themes/silver/graphics/addressbook_browse.png\" name=\"themes/silver/graphics/addressbook_browse.png\" />\n   <install as=\"kronolith/themes/silver/graphics/agenda.png\" name=\"themes/silver/graphics/agenda.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alarm-000.png\" name=\"themes/silver/graphics/alarm-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alarm-fff.png\" name=\"themes/silver/graphics/alarm-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alarm.png\" name=\"themes/silver/graphics/alarm.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendee-accepted.png\" name=\"themes/silver/graphics/attendee-accepted.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendee-declined.png\" name=\"themes/silver/graphics/attendee-declined.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendee-none.png\" name=\"themes/silver/graphics/attendee-none.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendee-tentative.png\" name=\"themes/silver/graphics/attendee-tentative.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendees-000.png\" name=\"themes/silver/graphics/attendees-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendees-fff.png\" name=\"themes/silver/graphics/attendees-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendees.png\" name=\"themes/silver/graphics/attendees.png\" />\n   <install as=\"kronolith/themes/silver/graphics/calendars.png\" name=\"themes/silver/graphics/calendars.png\" />\n   <install as=\"kronolith/themes/silver/graphics/close.png\" name=\"themes/silver/graphics/close.png\" />\n   <install as=\"kronolith/themes/silver/graphics/dayview.png\" name=\"themes/silver/graphics/dayview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/delete-000.png\" name=\"themes/silver/graphics/delete-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/delete-fff.png\" name=\"themes/silver/graphics/delete-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/edit-000.png\" name=\"themes/silver/graphics/edit-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/edit-fff.png\" name=\"themes/silver/graphics/edit-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/exception-000.png\" name=\"themes/silver/graphics/exception-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/exception-fff.png\" name=\"themes/silver/graphics/exception-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/favicon.ico\" name=\"themes/silver/graphics/favicon.ico\" />\n   <install as=\"kronolith/themes/silver/graphics/goto.png\" name=\"themes/silver/graphics/goto.png\" />\n   <install as=\"kronolith/themes/silver/graphics/help.png\" name=\"themes/silver/graphics/help.png\" />\n   <install as=\"kronolith/themes/silver/graphics/kronolith.png\" name=\"themes/silver/graphics/kronolith.png\" />\n   <install as=\"kronolith/themes/silver/graphics/left.png\" name=\"themes/silver/graphics/left.png\" />\n   <install as=\"kronolith/themes/silver/graphics/loading.gif\" name=\"themes/silver/graphics/loading.gif\" />\n   <install as=\"kronolith/themes/silver/graphics/logout.png\" name=\"themes/silver/graphics/logout.png\" />\n   <install as=\"kronolith/themes/silver/graphics/menu-active.png\" name=\"themes/silver/graphics/menu-active.png\" />\n   <install as=\"kronolith/themes/silver/graphics/menu.png\" name=\"themes/silver/graphics/menu.png\" />\n   <install as=\"kronolith/themes/silver/graphics/minus.png\" name=\"themes/silver/graphics/minus.png\" />\n   <install as=\"kronolith/themes/silver/graphics/monthview.png\" name=\"themes/silver/graphics/monthview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/new.png\" name=\"themes/silver/graphics/new.png\" />\n   <install as=\"kronolith/themes/silver/graphics/new_big.png\" name=\"themes/silver/graphics/new_big.png\" />\n   <install as=\"kronolith/themes/silver/graphics/new_small.png\" name=\"themes/silver/graphics/new_small.png\" />\n   <install as=\"kronolith/themes/silver/graphics/new_task.png\" name=\"themes/silver/graphics/new_task.png\" />\n   <install as=\"kronolith/themes/silver/graphics/picker.png\" name=\"themes/silver/graphics/picker.png\" />\n   <install as=\"kronolith/themes/silver/graphics/plus.png\" name=\"themes/silver/graphics/plus.png\" />\n   <install as=\"kronolith/themes/silver/graphics/prefs.png\" name=\"themes/silver/graphics/prefs.png\" />\n   <install as=\"kronolith/themes/silver/graphics/print.png\" name=\"themes/silver/graphics/print.png\" />\n   <install as=\"kronolith/themes/silver/graphics/private-000.png\" name=\"themes/silver/graphics/private-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/private-fff.png\" name=\"themes/silver/graphics/private-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/recur-000.png\" name=\"themes/silver/graphics/recur-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/recur-fff.png\" name=\"themes/silver/graphics/recur-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/right.png\" name=\"themes/silver/graphics/right.png\" />\n   <install as=\"kronolith/themes/silver/graphics/search.png\" name=\"themes/silver/graphics/search.png\" />\n   <install as=\"kronolith/themes/silver/graphics/tasks.png\" name=\"themes/silver/graphics/tasks.png\" />\n   <install as=\"kronolith/themes/silver/graphics/today.png\" name=\"themes/silver/graphics/today.png\" />\n   <install as=\"kronolith/themes/silver/graphics/unknown-background.png\" name=\"themes/silver/graphics/unknown-background.png\" />\n   <install as=\"kronolith/themes/silver/graphics/weekview.png\" name=\"themes/silver/graphics/weekview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/workweekview.png\" name=\"themes/silver/graphics/workweekview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/yearview.png\" name=\"themes/silver/graphics/yearview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/alarm.png\" name=\"themes/silver/graphics/alerts/alarm.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/error.png\" name=\"themes/silver/graphics/alerts/error.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/message.png\" name=\"themes/silver/graphics/alerts/message.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/success.png\" name=\"themes/silver/graphics/alerts/success.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/warning.png\" name=\"themes/silver/graphics/alerts/warning.png\" />\n   <install as=\"kronolith/themes/simplex/screen.css\" name=\"themes/simplex/screen.css\" />\n   <install as=\"kronolith/themes/tango-blue/screen.css\" name=\"themes/tango-blue/screen.css\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/addressbook_browse.png\" name=\"themes/tango-blue/graphics/addressbook_browse.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alarm-000.png\" name=\"themes/tango-blue/graphics/alarm-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alarm-fff.png\" name=\"themes/tango-blue/graphics/alarm-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alarm.png\" name=\"themes/tango-blue/graphics/alarm.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendee-accepted.png\" name=\"themes/tango-blue/graphics/attendee-accepted.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendee-declined.png\" name=\"themes/tango-blue/graphics/attendee-declined.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendee-none.png\" name=\"themes/tango-blue/graphics/attendee-none.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendee-tentative.png\" name=\"themes/tango-blue/graphics/attendee-tentative.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendees-000.png\" name=\"themes/tango-blue/graphics/attendees-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendees-fff.png\" name=\"themes/tango-blue/graphics/attendees-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendees.png\" name=\"themes/tango-blue/graphics/attendees.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/calendars.png\" name=\"themes/tango-blue/graphics/calendars.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/close.png\" name=\"themes/tango-blue/graphics/close.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/dayview.png\" name=\"themes/tango-blue/graphics/dayview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/delete-000.png\" name=\"themes/tango-blue/graphics/delete-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/delete-fff.png\" name=\"themes/tango-blue/graphics/delete-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/edit-000.png\" name=\"themes/tango-blue/graphics/edit-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/edit-fff.png\" name=\"themes/tango-blue/graphics/edit-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/exception-000.png\" name=\"themes/tango-blue/graphics/exception-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/exception-fff.png\" name=\"themes/tango-blue/graphics/exception-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/favicon.ico\" name=\"themes/tango-blue/graphics/favicon.ico\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/goto.png\" name=\"themes/tango-blue/graphics/goto.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/kronolith.png\" name=\"themes/tango-blue/graphics/kronolith.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/loading.gif\" name=\"themes/tango-blue/graphics/loading.gif\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/minus.png\" name=\"themes/tango-blue/graphics/minus.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/monthview.png\" name=\"themes/tango-blue/graphics/monthview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/new.png\" name=\"themes/tango-blue/graphics/new.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/new_big.png\" name=\"themes/tango-blue/graphics/new_big.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/new_small.png\" name=\"themes/tango-blue/graphics/new_small.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/picker.png\" name=\"themes/tango-blue/graphics/picker.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/plus.png\" name=\"themes/tango-blue/graphics/plus.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/print.png\" name=\"themes/tango-blue/graphics/print.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/private-000.png\" name=\"themes/tango-blue/graphics/private-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/private-fff.png\" name=\"themes/tango-blue/graphics/private-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/recur-000.png\" name=\"themes/tango-blue/graphics/recur-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/recur-fff.png\" name=\"themes/tango-blue/graphics/recur-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/search.png\" name=\"themes/tango-blue/graphics/search.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/today.png\" name=\"themes/tango-blue/graphics/today.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/unknown-background.png\" name=\"themes/tango-blue/graphics/unknown-background.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/weekview.png\" name=\"themes/tango-blue/graphics/weekview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/workweekview.png\" name=\"themes/tango-blue/graphics/workweekview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/yearview.png\" name=\"themes/tango-blue/graphics/yearview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/alarm.png\" name=\"themes/tango-blue/graphics/alerts/alarm.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/error.png\" name=\"themes/tango-blue/graphics/alerts/error.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/message.png\" name=\"themes/tango-blue/graphics/alerts/message.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/success.png\" name=\"themes/tango-blue/graphics/alerts/success.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/warning.png\" name=\"themes/tango-blue/graphics/alerts/warning.png\" />\n   <install as=\"kronolith/add.php\" name=\"add.php\" />\n   <install as=\"kronolith/attend.php\" name=\"attend.php\" />\n   <install as=\"kronolith/attendees.php\" name=\"attendees.php\" />\n   <install as=\"kronolith/contacts.php\" name=\"contacts.php\" />\n   <install as=\"COPYING\" name=\"COPYING\" />\n   <install as=\"kronolith/data.php\" name=\"data.php\" />\n   <install as=\"kronolith/day.php\" name=\"day.php\" />\n   <install as=\"kronolith/delete.php\" name=\"delete.php\" />\n   <install as=\"kronolith/edit.php\" name=\"edit.php\" />\n   <install as=\"kronolith/event.php\" name=\"event.php\" />\n   <install as=\"kronolith/fb.php\" name=\"fb.php\" />\n   <install as=\"kronolith/index.php\" name=\"index.php\" />\n   <install as=\"kronolith/mobile.php\" name=\"mobile.php\" />\n   <install as=\"kronolith/month.php\" name=\"month.php\" />\n   <install as=\"kronolith/new.php\" name=\"new.php\" />\n   <install as=\"kronolith/perms.php\" name=\"perms.php\" />\n   <install as=\"README\" name=\"README\" />\n   <install as=\"kronolith/search.php\" name=\"search.php\" />\n   <install as=\"kronolith/view.php\" name=\"view.php\" />\n   <install as=\"kronolith/week.php\" name=\"week.php\" />\n   <install as=\"kronolith/workweek.php\" name=\"workweek.php\" />\n   <install as=\"kronolith/year.php\" name=\"year.php\" />\n  </filelist>\n </phprelease>\n <changelog>\n  <release>\n   <version>\n    <release>3.0.0alpha1</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>alpha</release>\n    <api>alpha</api>\n   </stability>\n   <date>2011-03-09</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* First alpha release for Horde 4.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.0beta1</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2011-03-16</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* Only load external events in IFRAME if configured.\n* Fix retrieving event UIDs without date limit (Simon B\u00fchler, Bug #9651).\n* Fix saving display status of other applications&apos; calendars (Bug #9636).\n* Add migration for converting existing event categories to tags.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.0RC1</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2011-03-23</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* First release candidate for Horde 4.\n* [jan] Fix custom event alarm settings in traditional view (Bug #9154).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.0RC2</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2011-03-29</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* Second release candidate for Horde 4.\n* [jan] Fix javascript error when viewing events with desktop notifications (Bug #9727).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.0</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2011-04-06</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* First stable release for Horde 4.\n* [jan] Fix application-specific permission checks (Bug #9786).\n* [jan] Fix fatal error when using the max_events permission (Bug #9784).\n* [mjr] Datatree share to SQL upgrade script refactored for Horde 4.\n* [mjr] Add migration for mysql specific geospatial fields (Bug #9758).\n* [jan] Set default alarm in dynamic view (Bug #9752).\n* [jan] Set default alarm in dynamic view (Bug #9752).\n* [jan] Move all executable scripts to bin/ and prefix with kronolith-.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.1</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-04-20</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Don&apos;t store all task lists in the session.\n* [jan] Fix new task lists not showing up until next login (Bug #9814).\n* [mjr] Fix broken event alarm links in sidebar (Bug #9897).\n* [mjr] Fix drag/drop editing of recurring events (Bug #9880).\n* [jan] Fix undefined function on Windows (Bug #9916).\n* [jan] Support adding and editing of CalDAV events in dynamic view (Bug #9865).\n* [mjr] Allow migrations to complete despite of missing shares.\n* [jan] Remove debug code in Ajax library (Bug #9818).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.2</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-05-03</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Don&apos;t show event edit links if user doesn&apos;t have edit permissions on any calendar.\n* [jan] Fix parsing of recurrence end date in dynamic view (Bug #10025).\n* [jan] Fix displaying of new tasks in new task lists.\n* [jan] Delete tasks from tasks view when deleting tasks lists.\n* [jan] Don&apos;t export multi-day events as multiple events to iCalendar data (Bug #10007).\n* [jan] Fix dragging tasks in the dynamic view.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.3</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-05-18</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Add header for timeobjects calendars.\n* [jan] Fix date picker in advanced search form (Bug #10039).\n* [mjr] Remove visible exceptions when deleting recurring events (Bug #10013).\n* [mjr] Fix issue causing listTimeObject calendars to not appear (Bug #10012).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.4</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-06-14</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Only highlight days in the mini calendar that are currently displayed (Bug #10048).\n* [jan] Fix advanced search with empty search criteria (Bug #10038).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.5</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-07-05</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Update task due date in interface after dragging a task (Bug #10001).\n* [jan] Correctly sort events in portal block or widget if only displaying a single calendar (Bug #10099).\n* [mjr] Allow syncing of multiple owner-owned calendars (Request #8734).\n* [jan] Don&apos;t show calendar drop down in event form without delete permissions (Bug #10201).\n* [jan] Don&apos;t change event creator when saving events.\n* [jan] Fetch events immediately after saving remote calendar.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.6</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-08-02</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Display event time in dynamic agenda/search view.\n* [jan] Don&apos;t load all shares with requested permissions from the backend if $conf[&apos;share&apos;][&apos;hidden&apos;] is enabled.\n* [jan] Improve exporting all-day events to Funambol clients.\n* [mjr] Fix removing an exception from a recurrence series (Bug # 10365).\n* [jan] Close session while listing events to speed up parallel loading from different calendars.\n* [jan] Share list of displayed task lists with Nag (requires Nag 3.0.3).\n* [jan] Don&apos;t show import/export link in preferences if using the dynamic view.\n* [mjr] Force ActiveSync device reset after sync_calendars pref is changed (Request #10342).\n* [jan] Support updating attendees from vCalendar 1.0 iTip responses.\n* [jan] Fix sending invitations to attendees from traditional view.\n* [jan] Fix organizer attribute when exporting to vCalendar 1.0.\n* [mjr] Fix issue that prevented synching when no sync_calendar pref was set (Bug #10329).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.7</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-08-05</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [mjr] Fix updating attendees (Bug #10411).\n* [jan] Fix error if Nag is not installed (Bug #10406).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.8</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-08-17</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Fix deleting resources (Bug #10427)\n* [jan] Support snoozing alarms with Sundbird/Lightning (Request #7470).\n* [jan] Import VALARM components from iCalendar 2.0 data (Request #6665).\n* [jan] Fix creating events from dynamic view on Windows (Bug #9916).\n* [mjr] Fix displaying of freebusy data in dynamic view (adominguez@cne.gob.ve, Bug #10347).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.9</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-08-30</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Fix fatal error while searching if hitting certain recurring events.\n* [jan] Fix exporting events with snoozed alarms (Bug #10438).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.10</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-09-21</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Fix opening events from agenda view.\n* [mjr] The current default calendar is always included in the sync_calendars pref.\n* [mjr] Ensure exception gets start and end times when created from month view (Bug #10496)\n* [jan] Update group permission when changing group down list in basic permissions (Bug #10482).\n* [jan] Fix race condition when editing group permission in basic permission screen (Bug #10482).\n* [mjr] Fix removeUserData API (Bug #10241).\n* [jan] Fix deleting events with a WebDAV client (Bug #10478).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.11</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-11-02</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [mjr] Fix alarms for recurring events (Bug #10678).\n* [mjr] Allow filtering listTagInfo results by user.\n* [jan] Fix uncompleting tasks in dynamic view (Carlos Tim\u00f3teo, Bug #10653).\n* [cjh/jan] Improve design.\n* [mjr] Fix displaying resources when no attendees are present (Bug #10507).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.12</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-11-22</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Show status of events in agenda messages (Request #10517).\n* [mjr] Fix selecting custom time from time selection drop down (Bug #10737).\n* [jan] Always use fresh Horde_Http_Client instances for remote calendars (Bug #10740).\n* [jan] Add confirmation screen when deleting events in dynamic view (Request #10725).\n* [jan] Fix holidays disappearing from month view if deleting another event.\n* [jan] Fix resetting attendee response status when saving events in dynamic view (Bug #10620).\n* [jan] Support CalDAV servers that don&apos;t use DAV: as the default namespace (christof@buergi.lugs.ch, Bug #10716).\n* [jan] Allow to view and create copies of holiday events (Bug #10650).\n* [jan] Don&apos;t show import/export tabs in dynamic view if disabled (Bug #10705).\n* [jan] Don&apos;t show option to share with everyone in basic permissions if disabled (piper@hrz.uni-marburg.de, Bug #10706).\n* [mjr] Only set ORGANIZER field if the event is a group meeting (Bug #10697).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.13</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-12-13</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Hide disabled calendar sections (Bug #9815).\n* [gwr] Fixed recurrence handling with the Kolab backend.\n* [gwr] Fixed naming of the default calendar for the Kolab backend.\n* [gwr] Fixed deleting events with the Kolab backend.\n* [gwr] Fixed migrations for SQLite as database backend.\n* [mjr] Fix keyboard navigation of time entry fields in dynamic view (Bug #10799).\n* [mjr] Fix parsing display_cal variables for internal calendar links on various blocks and embedded imples (Bug #10767).\n* [mjr] Fix adding events directly to a resource&apos;s calendar (Bug #10827).\n* [mjr] Fix regression introduced in 3.0.12 that broke checking a Resource&apos;s availability in certain cases (Bug #10806).\n* [jan] Don&apos;t fail on empty CalDAV calendars (christof@buergi.lugs.ch, Bug #10739).\n* [jan] Check permissions when building application drop down (sberthelot@emisfr.com, Bug #10811).\n* [gwr] Fix saving Kolab events.\n* [jan] Update Japanese translation (Hiromi Kimura &lt;hiromi@tac.tsukuba.ac.jp&gt;).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.14</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2012-01-17</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [mjr] Fix bug that could cause incorrect event exceptions to be created when drag and dropping events in month view.\n* [jan] Fix page titles not always updating correctly.\n* [jan] Display event time in dynamic view if requested (Request #9866).\n* [jan] Only show end time if different from start time.\n* [jan] Fix day sorting in agenda view.\n* [jan] Sort user and group names in permission screen (Request #10896).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.15</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2012-01-31</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Search complete names and addresses when auto-completing attendees.\n* [jan] Fix syntax error in migration script (Bug #10902).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.16</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2012-03-20</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Use preferred date format in week and agenda views (Bug #11089).\n* [jan] Fix fatal error if no external calendars are available (Bug #11079).\n* [jan] Fix positioning of events on DST changing dates (Bug #11070).\n* [mjr] Fix bug that caused time shift of all day events when imported from ActiveSync devices for users in certain timezones (Bug #10991).\n* [mjr] Correctly deal with deleted calendars in sync clients (Bug #10969).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.17</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2012-03-20</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Update Italian translation (Massimo Malabotta &lt;mmalabotta@units.it&gt;).\n* [jan] Improve print styles.\n* [jan] Catch if external client doesn&apos;t send LAST-MODIFIED attributes (Bug #11130).\n* [jan] Don&apos;t stop agenda script if there is an error with a single user (Bug #11129).\n* [jan] Update Hungarian translation (Zolt\u00e1n N\u00e9meth &lt;nemeth.zoltan@etit.hu&gt;).\n* [jan] Show round corners only on the start and end of multi-day events (Request #11067).\n   </notes>\n  </release>\n </changelog>\n</package>\n"], "fixing_code": ["-----------\nv3.0.17-git\n-----------\n\n[jan] SECURITY: Fix XSS vulnerabilities in tasks view and search view (Bug\n      #11189).\n[jan] Update Italian translation (Massimo Malabotta <mmalabotta@units.it>).\n[jan] Improve print styles.\n[jan] Catch if external client doesn't send LAST-MODIFIED attributes (Bug\n      #11130).\n[jan] Don't stop agenda script if there is an error with a single user (Bug\n      #11129).\n[jan] Update Hungarian translation (Zolt\u00e1n N\u00e9meth <nemeth.zoltan@etit.hu>).\n[jan] Show round corners only on the start and end of multi-day events\n      (Request #11067).\n\n\n-------\nv3.0.16\n-------\n\n[jan] Use preferred date format in week and agenda views (Bug #11089).\n[jan] Fix fatal error if no external calendars are available (Bug #11079).\n[jan] Fix positioning of events on DST changing dates (Bug #11070).\n[mjr] Fix bug that caused time shift of all day events when imported from\n      ActiveSync devices for users in certain timezones (Bug #10991).\n[mjr] Correctly deal with deleted calendars in sync clients (Bug #10969).\n\n\n-------\nv3.0.15\n-------\n\n[jan] Search complete names and addresses when auto-completing attendees.\n[jan] Fix syntax error in migration script (Bug #10902).\n\n\n-------\nv3.0.14\n-------\n\n[mjr] Fix bug that could cause incorrect event exceptions to be created when\n      drag and dropping events in month view.\n[jan] Fix page titles not always updating correctly.\n[jan] Display event time in dynamic view if requested (Request #9866).\n[jan] Only show end time if different from start time.\n[jan] Fix day sorting in agenda view.\n[jan] Sort user and group names in permission screen (Request #10896).\n\n\n-------\nv3.0.13\n-------\n\n[jan] Hide disabled calendar sections (Bug #9815).\n[gwr] Fixed recurrence handling with the Kolab backend.\n[gwr] Fixed naming of the default calendar for the Kolab backend.\n[gwr] Fixed deleting events with the Kolab backend.\n[gwr] Fixed migrations for SQLite as database backend.\n[mjr] Fix keyboard navigation of time entry fields in dynamic view (Bug\n      #10799).\n[mjr] Fix parsing display_cal variables for internal calendar links on various\n      blocks and embedded imples (Bug #10767).\n[mjr] Fix adding events directly to a resource's calendar (Bug #10827).\n[mjr] Fix regression introduced in 3.0.12 that broke checking a Resource's\n      availability in certain cases (Bug #10806).\n[jan] Don't fail on empty CalDAV calendars (christof@buergi.lugs.ch, Bug\n      #10739).\n[jan] Check permissions when building application drop down\n      (sberthelot@emisfr.com, Bug #10811).\n[gwr] Fix saving Kolab events.\n[jan] Update Japanese translation (Hiromi Kimura <hiromi@tac.tsukuba.ac.jp>).\n\n\n-------\nv3.0.12\n-------\n\n[jan] Show status of events in agenda messages (Request #10517).\n[mjr] Fix selecting custom time from time selection drop down (Bug #10737).\n[jan] Always use fresh Horde_Http_Client instances for remote calendars (Bug\n      #10740).\n[jan] Add confirmation screen when deleting events in dynamic view (Request\n      #10725).\n[jan] Fix holidays disappearing from month view if deleting another event.\n[jan] Fix resetting attendee response status when saving events in dynamic\n      view (Bug #10620).\n[jan] Support CalDAV servers that don't use DAV: as the default namespace\n      (christof@buergi.lugs.ch, Bug #10716).\n[jan] Allow to view and create copies of holiday events (Bug #10650).\n[jan] Don't show import/export tabs in dynamic view if disabled (Bug #10705).\n[jan] Don't show option to share with everyone in basic permissions if disabled\n      (piper@hrz.uni-marburg.de, Bug #10706).\n[mjr] Only set ORGANIZER field if the event is a group meeting (Bug #10697).\n\n\n-------\nv3.0.11\n-------\n\n[mjr] Fix alarms for recurring events (Bug #10678).\n[mjr] Allow filtering listTagInfo results by user.\n[jan] Fix uncompleting tasks in dynamic view (Carlos Tim\u00f3teo, Bug #10653).\n[cjh/jan] Improve design.\n[mjr] Fix displaying resources when no attendees are present (Bug #10507).\n\n\n-------\nv3.0.10\n-------\n\n[jan] Fix opening events from agenda view.\n[mjr] Always included the current default calendar in the sync_calendars\n      preference.\n[mjr] Ensure exception gets start and end times when created from month view\n      (Bug #10496)\n[jan] Update group permission when changing group down list in basic\n      permissions (Bug #10482).\n[jan] Fix race condition when editing group permission in basic permission\n      screen (Bug #10482).\n[mjr] Fix removeUserData API (Bug #10241).\n[jan] Fix deleting events with a WebDAV client (Bug #10478).\n\n\n------\nv3.0.9\n------\n\n[jan] Fix fatal error while searching if hitting certain recurring events.\n[jan] Fix exporting events with snoozed alarms (Bug #10438).\n\n\n------\nv3.0.8\n------\n\n[jan] Fix deleting resources (Bug #10427)\n[jan] Support snoozing alarms with Sundbird/Lightning (Request #7470).\n[jan] Import VALARM components from iCalendar 2.0 data (Request #6665).\n[jan] Fix exporting all-day events to Funambol clients (Thomas Ilsche\n      <git@zulan.net>, Bug #10349).\n[jan] Fix creating events from dynamic view on Windows (Bug #9916).\n[mjr] Fix displaying of freebusy data in dynamic view (adominguez@cne.gob.ve,\n      Bug #10347).\n\n\n------\nv3.0.7\n------\n\n[mjr] Fix updating attendees (Bug #10411).\n[jan] Fix error if Nag is not installed (Bug #10406).\n\n\n------\nv3.0.6\n------\n\n[jan] Display event time in dynamic agenda/search view.\n[jan] Don't load all shares with requested permissions from the backend if\n      $conf['share']['hidden'] is enabled.\n[jan] Improve exporting all-day events to Funambol clients.\n[mjr] Fix removing an exception from a recurrence series (Bug # 10365).\n[jan] Close session while listing events to speed up parallel loading from\n      different calendars.\n[jan] Share list of displayed task lists with Nag (requires Nag 3.0.3).\n[jan] Don't show import/export link in preferences if using the dynamic view.\n[mjr] Force ActiveSync device reset after sync_calendars pref is changed\n      (Request #10342).\n[jan] Try to work with remote servers even if they don't support a recent\n      WebDAV protocol version.\n[jan] Support updating attendees from vCalendar 1.0 iTip responses.\n[jan] Fix sending invitations to attendees from traditional view.\n[jan] Fix organizer attribute when exporting to vCalendar 1.0.\n[mjr] Fix issue that prevented synching when no sync_calendar pref was set\n      (Bug #10329).\n\n\n------\nv3.0.5\n------\n\n[jan] Update task due date in interface after dragging a task (Bug #10001).\n[jan] Correctly sort events in portal block or widget if only displaying a\n      single calendar (Bug #10099).\n[mjr] Allow syncing of multiple owner-owned calendars (Request #8734).\n[jan] Don't show calendar drop down in event form without delete permissions\n      (Bug #10201).\n[jan] Don't change event creator when saving events.\n[jan] Fetch events immediately after saving remote calendar.\n\n\n------\nv3.0.4\n------\n\n[jan] Fix holidays being off with certain system timezones (Bug #9989).\n[jan] Only highlight days in the mini calendar that are currently displayed\n      (Bug #10048).\n[jan] Fix advanced search with empty search criteria (Bug #10038).\n\n\n------\nv3.0.3\n------\n\n[jan] Add header for timeobjects calendars.\n[jan] Fix date picker in advanced search form (Bug #10039).\n[mjr] Remove visible exceptions when deleting recurring events (Bug #10013).\n[mjr] Fix issue causing listTimeObject calendars to not appear (Bug #10012).\n\n\n------\nv3.0.2\n------\n\n[jan] Don't show event edit links if user doesn't have edit permissions on any\n      calendar.\n[jan] Fix parsing of recurrence end date in dynamic view (Bug #10025).\n[jan] Fix displaying of new tasks in new task lists.\n[jan] Fix displaying colors of task lists.\n[jan] Delete tasks from tasks view when deleting tasks lists.\n[jan] Don't export multi-day events as multiple events to iCalendar data (Bug\n      #10007).\n[jan] Fix dragging tasks in the dynamic view.\n\n\n------\nv3.0.1\n------\n\n[mjr] Fix calendar embedding.\n[jan] Don't store all task lists in the session.\n[jan] Fix new task lists not showing up until next login (Bug #9814).\n[mjr] Fix broken event alarm links in sidebar (Bug #9897).\n[mjr] Fix drag/drop editing of recurring events (Bug #9880).\n[jan] Fix undefined function on Windows (Bug #9916).\n[jan] Support adding and editing of CalDAV events in dynamic view (Bug #9865).\n[mjr] Allow migrations to complete despite of missing shares.\n[jan] Remove debug code in Ajax library (Bug #9818).\n\n\n----\nv3.0\n----\n\n[jan] Fix application-specific permission checks (Bug #9786).\n[jan] Fix fatal error when using the max_events permission (Bug #9784).\n[mjr] Datatree share to SQL upgrade script refactored for Horde 4.\n[mjr] Add migration for mysql specific geospatial fields (Bug #9758).\n[jan] Set default alarm in dynamic view (Bug #9752).\n[jan] Move all executable scripts to bin/ and prefix with kronolith-.\n\n\n--------\nv3.0-RC2\n--------\n\n[jan] Fix javascript error when viewing events with desktop notifications\n      (Bug #9727).\n\n\n--------\nv3.0-RC1\n--------\n\n[jan] Update installation and upgrade instructions.\n[jan] Fix custom event alarm settings in traditional view (Bug #9154).\n\n\n----------\nv3.0-BETA1\n----------\n\n[jan] Only load external events in IFRAME if configured.\n[jan] Fix retrieving event UIDs without date limit (Simon B\u00fchler, Bug #9651).\n[jan] Fix saving display status of other applications' calendars (Bug #9636).\n[mjr] Add migration for converting existing event categories to tags.\n\n\n-----------\nv3.0-ALPHA1\n-----------\n\n[jan] Add configuration whether to load other applications in an IFRAME.\n[jan] Provide default configuration files instead of .dist versions.\n[jan] Send a subscription link with the notification about shared\n      calendars if necessary.\n[jan] Default calendars no longer have the user name as the ID.\n[jan] Create a default calendar if the user doesn't own any yet.\n[jan] Add CalDAV client support (Request #8525).\n[jan] Send agenda emails with HTML part and convert to Horde_View.\n[mjr] More complete handling of recurring event exceptions when dealing with the\n      iCalendar format (Request #9091).\n[jan] Add remote calendars to the possible list of calendars for free/busy\n      information.\n[jan] Send alarm and iTip notifications with HTML part and convert to\n      Horde_View.\n[jan] Add option to notify users about calendar permission changes.\n[mjr] listTimeObject calendars are now viewable independently in the calendar\n      portal blocks (Request #8530).\n[mjr] Recurring event exceptions are now indicated as such in the UI.\n[mjr] Deleting a recurring event now also deletes all exceptions to that event.\n[mjr] Add support for inline maps to the Ajax interface.\n[jan] Add preference to limit the events per day in the month view.\n[jan] Add system calendars (Request #2059).\n[jan] Add URL field to events.\n[jan] Add task management capabilities to the Ajax interface.\n[jan] Manage holidays like any other calendar driver.\n[mjr] Add resource scheduling.\n[jan] Integrate tasks into Ajax interface (Gon\u00e7alo Queir\u00f3s\n      <mail@goncaloqueiros.net>).\n[mjr] Extend listTimeObjects API to include optional links and icons.\n[jan] Allow searching of any type of calendar and improve searching of\n      recurring events.\n[cjh] With only SHOW permissions, display event titles as \"busy\".\n[mjr] Replace categories and keywords by tags.\n[jan] Set colors per calendar (Request #7480).\n[jan] Add individual notification methods for single events (Alfonso Mar\u00edn\n      Mar\u00edn <almarin@um.es>).\n[jan] Add Ajax interface.\n[jan] Store events in UTC and convert to the user's timezone on the fly.\n[jan] Remove alarm reminder code.\n[jan] Change listEvents API method to return keys as dates instead of\n      timestamps.\n\n\n------\nv2.3.6\n------\n\n[jan] Add upgrade scripts for next-generation SQL share driver.\n[jan] Export recurrence exceptions in a more portable way.\n\n\n------\nv2.3.5\n------\n\n[gwr] Fix moving events between calendars for the Kolab driver (Bug #7932)\n[jan] Import and export the privacy field in CSV data (Request #9139).\n[mjr] Send an iTip REQUEST, not ADD, when updating an existing event\n      (Bug #9131).\n[jan] Fix all-day events sometimes showing up an day early too (Bug #9012).\n[mjr] Sort exception list before displaying (Request #7688).\n[mjr] Do not remove history entries when removing user data (Bug #8755).\n\n\n------\nv2.3.4\n------\n\n[jan] Delete Horde alarms when resetting an event alarm.\n[jan] Set an alarm to one minute, if users try to set an alarm without time.\n[gwr] Fix editing the start date of recurring events (kolab/issue3885).\n\n\n------\nv2.3.3\n------\n\n[jan] Fix editing URLs of remote calendars.\n[gwr] Fix recurring weekly events with fixed number of occurences but multiple\n      incidences per week (kolab/issue3846).\n[gwr] Fix recurring weekly events with intervals > 1 (Bug #8546).\n[jan] Optimize event link generation (patrick.abiven@apitech.fr).\n[jan] Fix Oracle SQL scripts.\n[jan] Fix charset of ajax responses.\n[jan] Add Croatian translation (Matej Vela <matej.vela@carnet.hr>).\n[jan] Speed up listing alarms (patrick.abiven@apitech.fr, Request #8638).\n[jan] Simplify and improve portability of listing events without date limits\n      in the SQL driver (Bug #8590).\n[mjr] Fix issue that caused the default alarm time to be applied to\n      listTimeObjects events (Bug #8588).\n\n\n------\nv2.3.2\n------\n\n[mms] Upgrade prototype.js to v1.6.1.\n[jan] Allow to add address lists as attendees through the address book popup\n      (Bug #7834).\n[jan] Fix exporting certain weekday recurrence rules to iCalendar\n      (lst_hoe02@kwsoft.de, Bug #8501).\n[jan] Export recurrence end dates as date-time values in iCalendar data to\n      improve compatibility with external clients (Bug #7846).\n[jan] Fix synchronization with output compression enabled (Bug #7769).\n[jan] Add configuration whether to show user drop down list or text field in\n      permissions dialog (requires Horde 3.3.5).\n[jan] Propagate the 'modified' API method (Request #8274).\n[cjh] Fix the signature of the kronolith/import API method\n      (rpolli@babel.it, Bug #8309).\n[jan] Correctly create all-day events if using the all-day link in the day\n      view (stpierre@nebrwesleyan.edu, Bug #8220).\n[jan] Fix rendering of all-day events (Bug #8176).\n\n\n------\nv2.3.1\n------\n\n[jan] Render contact autocompletion list on top of free/busy blocks (Bug #7273).\n[jan] Save recurrence exceptions when copying events (Bug #7689).\n[jan] Prevent warnings if trying to add address lists as attendees (Bug #7834).\n[jan] Fix start and end time calculation of multi-day events (Bug #7788).\n[jan] Wrap URL in calendar information in IE7 (almarin@um.es, Bug #8043).\n[jan] Fix \"Date-string has wrong format\" error with holidays (Bug #7961).\n[jan] Use improved translation support in Date_Holidays (requires 0.21.0 now,\n      Bug #7272).\n[jan] Empty view cache when changing calendar selection\n      (stpierre@nebrwesleyan.edu, Bug #7879).\n[mjr] Fix category CSS being included on embedded widgets.\n[cjh] Work around BC break with Horde versions before 3.2 (Bug #7820).\n[jan] Allow to manually change attendee responses (paul@carnie.com.au,\n      Request #7443).\n[jan] Fix linking to last week across certain year boundaries (Bug #7827).\n[jan] Add script to import events from SquirrelMail database.\n[cjh] Add private-***.png graphics to Tango and Silver themes (Bug #7531).\n[cjh] Fix listing of users in the calendar/browse API call.\n[jan] Set timezone per user preference and fix recurring events when sending\n      reminders through Kronolith (develop@kristov.de, Bug #7038).\n[cjh] Add a PostgreSQL-specific upgrade script for 2.2 to 2.3\n      (michael.menge@zdv.uni-tuebingen.de, Bug #7454).\n[mms] Upgrade prototype.js to v1.6.0.3.\n\n\n----\nv2.3\n----\n\n[jan] Change group field in shares table to work with LDAP groups (Bug #6883).\n[jan] Fix user name conversion with user hooks in the calendar panel\n      (Bug #7366).\n[gwr] Fixed handling of free events in the Kolab driver\n      (noethen@uni-paderborn.de, Bug #7192).\n[jan] Differentiate between days with events and days with busy events in the\n      year view.\n\n\n--------\nv2.3-RC1\n--------\n\n[jan] Send correct iTip notifications when deleting recurring event instances\n      (Bug #6636).\n[mjr] Add support for embedding calendar widgets on external websites.\n[jan] Log moving of events in the history backend (Bug #3207).\n[jan] Fix listing alarms of recurring events crossing day boundaries\n      (Bug #7035).\n[jan] Fix deleting all events over WebDAV (Bug #7005).\n[jan] Add Atom feeds.\n[jan] Fix encoding of holiday names.\n[jan] Add Estonian translation (Alar Sing <alar.sing@err.ee>).\n[jan] Consider RECURRENCE-ID attributes in iCalendar data.\n[cjh] Fix a problem with the put() API call and events that already exist\n      (almarin@um.es, Bug #7088).\n[jan] Fix importing iCalendar events with only a single recurrence exception\n      (guyzdm@gmail.com, Bug #7068).\n[jan] Add Basque translation (Euskal Herriko Unibertsitatea EHU/UPV\n      <xabier.arrieta@ehu.es>).\n[mjr] Add support for maintenance tasks and add a task for purging old events.\n[jan] Fix future events not being received under certain circumstances\n      (Bugs #6946, #6966).\n[jan] Correctly sort recurring events (develop@kristov.de, Bug #7037).\n[jan] Fix display of recurring events crossing midnight in the portal block\n      (develop@kristov.de, Bug #7036).\n[jan] Fix agenda emails containing wrong events.\n[mjr] Remove user permissions on all shares when deleting a user.\n[jan] Fix warning when importing events through the API (Bug #6865).\n[cjh] Be case insensitive when comparing attendees\n      (aloyse.gilbert@gmail.com, Bug #6833).\n[jan] Use smaller icons for private events.\n\n\n----\nv2.2\n----\n\n[jan] Identify the correct event when using attend.php to update invitations\n      (Bug #6606).\n[cjh] Improve resource usage in datatree_to_sql share migration script\n      (Bug #6740).\n[jan] Decode user names and passwords when editing remote calendars.\n[cjh] Ensure that event_category is always a string (Bug #6696).\n\n\n--------\nv2.2-RC3\n--------\n\n[cjh] Apply fix for http://dev.rubyonrails.org/ticket/11473 to prototype.js\n      (Request #6590).\n[cjh] In WebDAV PUT operations, only look for existing events on the calendar\n      being uploaded (Bug #6617).\n[cjh] Add an upgrade script for the new SQL share driver (Request #6109).\n[cjh] Use json_encode and json_decode if they are available (Bug #6457).\n[cjh] Use the first matching free/busy URL if more than one is found\n      (almarin@um.es, Request #6638).\n[cjh] Allow subscribing/unsubscribing from external calendars through the API\n      (duck@obala.net, Request #6626).\n[jan] Add another directory level for calendar owners to the WebDAV interface.\n[jan] Cut off categories at 80 characters to save them correctly (Bug #5211).\n[gwr] Fixed removal of recurrence in the Kolab driver.\n[jan] Show full title in email alarms (Bug #6510).\n[jan] Add export of single events.\n[gwr] Fixed History support in the Kolab driver.\n[cjh] Don't report cancelled events as busy (m.gabriel@das-netzwerkteam.de,\n      Bug #6376).\n[cjh] Show who created or made the last change to an event along with the date\n      (Request #6305).\n[cjh] Make sure event time and location are shown in the day and week views\n      (Bug #6158).\n[cjh] Include Location and Attendee information in the plain-text portion\n      of iTip messages (almarin@um.es, Request #6271).\n[jan] Add Turkish translation (METU <horde-tr@metu.edu.tr>).\n\n\n--------\nv2.2-RC2\n--------\n\n[jan] SECURITY: Fix privilege escalation in Horde API.\n[cjh] SECURITY: Fix missing ownership validation on share changes.\n[cjh] Fix month links in the year view when the first day of the month is on\n      the first day of the week (hofsteda@gmail.com, Bug #6172).\n[cjh] Make sure calendar info boxes show the full remote URL (Bug #6134).\n[jan] Fix importing of events with an existing UID (Bug #6122).\n[cjh] Fix timestamps in portal block event links.\n[mjr] Fix issue that caused recurring events on 2/29 to appear on 3/1 when\n      recurrence type is HORDE_DATE_RECUR_YEARLY_DATE.\n[cjh] If JavaScript is available, open the Attendees window set to the current\n      event's date (Request #5813).\n[cjh] Fix display of events that end at 00:00 at a non-zero second (Bug #6047).\n[cjh] Fix handling of local names in attendees.php\n      (m.gabriel@das-netzwerkteam.de, Bug #6041).\n[cjh] Fix inline calendar search in the calendar panel.\n[cjh] New share management UI that doesn't require JavaScript.\n\n\n--------\nv2.2-RC1\n--------\n\n[jan] Don't allow to modify private events throught the API (Bug #5736).\n[jan] Don't overwrite event owner when changing events over WebDAV (Bug #5736).\n[jan] Implement WebDAV DELETE.\n[cjh] Event exceptions are now correctly reflected when subscribing to\n      Kronolith calendars from Apple iCal.\n[cjh] When adding attendees, parse email groups and add each member\n      individually (Bug #5812).\n[cjh] External events are now enabled/disabled by individual category, such\n      as showing a particular tasklist on your calendar, but not all tasks\n      (Request #4581).\n[jan] Add SQL upgrade script.\n[cjh] Let the \"show\" URL of a calendar always show that calendar, instead of\n      toggling whether or not it is displayed.\n[cjh] Fix permissions granted to remote calendar subscribers on calendars\n      that do not have guest permissions.\n[cjh] Fix generation of UIDs with PHP 5.2+.\n[cjh] Add preferences for showing event times and locations in screen\n      views, print views, both, or neither (Request #1982).\n[cjh] Run attendee email address through MIME::encodeAddress() before\n      validating them (Bug #5670).\n\n\n----------\nv2.2-ALPHA\n----------\n\n[cjh] Add vCalendar 2.0 alarm export (munzli@olmero.ch, Bug #4851).\n[jan] Add Ukrainian translation (Andriy Kopystyansky <anri@polynet.lviv.ua>).\n[cjh] Inline PHP-generated javascript to avoid cross-domain leaking\n      (Bug #5307).\n[cjh] Add a preference to not send notifications to the person who is\n      adding/updating/deleting the event (steven.deboeck@excentis.com,\n      Request #4770).\n[cjh] Add calendar/subscribe and calendar/unsubscribe methods for adding/\n      removing calendars to the currently displayed calendars\n      (duck@obala.net).\n[cjh] Remove unneeded Kronolith_Driver::close method.\n[cjh] Fix error handling when moving events\n      (thomas.jarosch@intra2net.com, Bug #5401).\n[jan] Show icon for private events (Request #5190).\n[jan] Allow to edit existing event attendees.\n[jan] Add links to delete exceptions from recurring events.\n[jan] Add recurrence types by day of year and weekday of year.\n[jan] Add recurrence durations by number of recurrences.\n[jan] Allow to edit exceptions from recurring events.\n[jan] Allow to specify attendees without email addresses.\n[jan] Allow to specify attendee names with the email addresses.\n[cjh] Link to remote URLs in iCalendar events, if present (Duck).\n[jan] Hide less important event settings in the edit form by default.\n[jan] Add support for the Horde_Alarm framework (requires Horde 3.2).\n[cjh] Add ContactAutoCompleter javascript to the attendees screen\n      (Request #1635).\n[jan] Add month tab to free/busy view (Gunnar Wrobel <wrobel@pardus.de>,\n      Request #4896).\n[cjh] Use extended Free/Busy information from Kolab (wrobel@pardus.de,\n      Request #4869).\n[ben] Add daily agenda reminder (Request #4655).\n[cjh] Include event location in reminders (webmgr@muskingum.edu,\n      Request #4771).\n[cjh] Use global proxy configuration for HTTP requests (Request #1039).\n[jan] Display holidays generated with the Date_Holiday package (Stephan\n      Hohmann <webmaster@dasourcerer.net>, Request #3862).\n[cjh] Consider failing to find any attendees to update an error\n      (Bug #4588).\n[cjh] Include a summary of which calendars were printed in print views\n      (Request #3263).\n[jan] Add support for reading and saving events through external clients\n      (requires Horde 3.2, d.bussink@student.utwente.nl, Request #3032).\n[jan] Limit number of events in portal summary block (Duck <duck@obala.net>).\n[cjh] Add a live search to the calendar panel (Request #4607).\n[mas] Conform to WCAG 1.0 Priority 2/Section 508 accessibility guidelines.\n      (Request #4080)\n[cjh] Fix Day and Week display of events that overlap with an event that\n      doesn't start all the way to the left (Bug #2967).\n[cjh] Move calendar selection/deselection to a collapsible panel.\n[jan] Allow to set user name and password for remote calendars\n      (tevans@tachometry.com, Request #3696).\n[jan] Allow to edit remote calendars (tevans@tachometry.com, Request #3696).\n[cjh] Move almost all hiding of elements during printing to CSS classes.\n[cjh] Allow the listEvents api call to list events from multiple calendars,\n      and filter by whether or not events have an alarm\n      (Ben Klang <ben@alkaloid.net>, Bug #4104).\n[mjr] Support for removing user data from backend when user is removed from\n      Horde.\n[jan] Add private flag.\n[cjh] Add a default alarm preference.\n[cjh] Always include X-WR-CALNAME in iCalendar exports (Request #3618).\n[jan] Add multidomain support for Kolab servers (tokoe@kde.org, Request #3579).\n[jan] Allow delegation of events.\n[cjh] Dynamic switching between Display, Edit, and Delete screens.\n[jan] Add preference to force day and week views to selected hours.\n[cjh] Make the duration input a text field instead of a 365-day dropdown.\n[mdj] Add support for split read/write database.\n[mdj] Add failover support for SQL backend.\n[cjh] Use partial page fetches to update the main \"page\" div if the browser\n      supports the necessary JavaScript.\n\n\n------\nv2.1.7\n------\n\n[jan] SECURITY: Fix privilege escalation in Horde API.\n[cjh] SECURITY: Fix missing ownership validation on share changes.\n[jan] Set the user's timezone in the free/busy information.\n[jan] Fix redirection after editing an event from the sidebar menu (Bug #5769).\n\n\n------\nv2.1.6\n------\n\n[cjh] Display attendees list correctly without a mail/compose method (Bug\n      #5127).\n[cjh] Send iCalendar data as UTF-8 (Bug #5427).\n[jan] Fix duration of remote and imported full-day events (Bugs #4617, #4794).\n[jan] Fix recurring multiday events crossing a month border (Bug #5205).\n[jan] Fix duration calculation in edit form for events covering more than a\n      month (Bug #5120).\n\n\n------\nv2.1.5\n------\n\n[jan] Fix character set encoding of exported vCalendar/iCalendar data.\n[jan] Fixed MS-SQL driver (Bug #5088).\n[jan] Add Catalan translation (Jordi Giralt <projecte.k2@upcnet.es>).\n[jan] Fix searching for non-ascii strings (Bug #4773).\n[cjh] Display partial hours in free/busy view (cbs@cts.ucla.edu,\n      Request #4755).\n[cjh] Honor date_format preference in reminders and notifications (Bug #4726).\n\n\n------\nv2.1.4\n------\n\n[cjh] SECURITY: Close arbitrary file inclusion in free/busy views.\n\n\n------\nv2.1.3\n------\n\n[cjh] Set vEvent ORGANIZER to the event creator, not the calendar owner\n      (kajtzu@basen.net, Bug #4527).\n[jan] Fix importing of events without end date and duration (Bug #4519).\n[jan] Correctly display recurring events spanning multiple days (Bug #4438).\n[jan] Fix recurrence end dates with SQLite backends (Bug #4219).\n[jan] Fix calculation of recurrence ends with imported and remote events\n      (Bug #2813).\n[cjh] Consolidate the check for whether or not users can add events in\n      the day and month views (Bug #4373).\n[jan] Fix alarms for recurring events in Kolab driver\n      (michael.sheldon@credativ.de, Bug #4326).\n[jan] Show error message if imported file didn't contain events.\n[cjh] Fix the SQL types of several recurrence fields.\n[jan] Add categories from imported events to the user's categories.\n[jan] Add Slovenian translation (Duck <duck@obala.net>).\n[jan] Deal with attendee email addresses case insensitively.\n[jan] Don't consider events from remote calendars as busy time.\n[jan] Always try to return the correct event instance if requesting an event\n      by its UID (Thorsten Schaub, Bug #1994).\n[cjh] Fix permissions for the calendar list in advanced search (Bug #4093).\n\n\n------\nv2.1.2\n------\n\n[jan] Don't show calendar creation form if multiple calendars are not allowed\n      (Bug #3988).\n[jan] Add \"Save and Finish\" button to attendees popup (Request #1158).\n[jan] Add parameter to Upcoming Events portal block to limit number of\n      displayed events (dorm@dorm.org, Request #3905).\n[jan] Allow adding of events if not using a permanent DataTree backend.\n[jan] Fix fatal error for new users on some sytems (Bug #3711).\n\n\n------\nv2.1.1\n------\n\n[jan] Fix updating attendee status from KOrganizer replies.\n[jan] Fix events of status \"free\" being included in busy information.\n[jan] Automatically add current user's free/busy information to meeting\n      planner.\n[jan] Add 1.1 to 2.x upgrade script for Oracle.\n[cjh] Prevent listAlarms() from causing a fatal error if no calendar is\n      open (Bug #3717).\n[jan] Update free/busy information on Kolab server after editing events\n      (requires Horde 3.1.1) (tokoe@kde.org, Request #3654).\n[cjh] Honor time format and language preferences in email notifications\n      (Bug #2064).\n[cjh] Add missing display_contact preference (Bug #3575).\n[cjh] Fix fatal error during first login of new users.\n\n\n----\nv2.1\n----\n\n[cjh] There are now several guards against users being stuck with no selected\n      calendars and no way to select one (Bug #3538).\n\n\n--------\nv2.1-RC3\n--------\n\n[jan] Fix retrieving of free/busy URLs from Kolab servers (tokoe@kde.org,\n      Bug #3450).\n[jan] Fix recurring events without end dates using the Kolab driver\n      (tokoe@kde.org, Bug #2734).\n[jan] Allow to specify port and protocol of Kolab server for free/busy request\n      (aseigo@kde.org, tokoe@kde.org, Request #2178).\n[jan] Improve attendees and contacts forms.\n\n\n--------\nv2.1-RC2\n--------\n\n[jan] Show subscription URL for calendars in \"My Calendars\" overview\n      (kevin_myer@iu13.org, Request #3256).\n[jan] Fix browser redirection after saving events.\n\n\n--------\nv2.1-RC1\n--------\n\n[cjh] The calendar(s) to export data from are now configurable (Request #2330).\n[jan] Add Portuguese translation (Manuel Menezes de Sequeira\n      <Manuel.Sequeira>).\n[cjh] Use HTTP_Request to retrieve Free/Busy information so we don't\n      rely on allow_url_fopen.\n[cjh] Remove disabled PDB import code.\n[cjh] Fix display when only remote calendars are active (Bug #2777).\n[cjh] Fix alarms for recurring events.\n[ben] Add RSVP to iTip so Outlook will send a reply message when the\n      invitation is accepted/declined/etc.\n[jan] Allow automatic sharing of new calendars with users' groups\n      (gauret@free.fr, Request #1366).\n[jan] Add preference to only retrieve event reminders for certain calendars\n      (kevin_myer@iu13.org, Request #649).\n[jan] Always return to last screen after editing or deleting events.\n[jan] Allow to freely set event years.\n[jan] Add event status of \"Free\".\n[jan] Add CLI script to import iCalendar/vCalendar data.\n[cjh] Deprecate the MCAL driver.\n[mas] Allow replacing a calendar with an imported one. (Bug #1364)\n[mas] Change any output of <b> and <i> tags to <strong> and <em> for better\n      accessibility support.\n[cjh] Use CSS for all category colors instead of generating them inline.\n[cjh] Use Horde_Template for day and week view rows.\n[cjh] The length of time slots in the day and week views is now configurable\n      (Bug #1952).\n[cjh] Add a tree block for showing current alarms.\n[jan] Add permissions to restrict number of events.\n[cjh] Show event owners in tooltips.\n[cjh] Fix assumptions about users being logged in when fetching free/busy\n      information (tasin (at) fhm (dot) edu, Bug #1850).\n[jan] Add calendar popup window to side-by-side view to search for calendars\n      and toggle their visibility.\n[jan] Add icon to calendar names to remove calendars from side-by-side view.\n[cjh] fb.php now accepts ?u= arguments as well as ?c=, for displaying a user's\n      chosen free/busy calendars, allowing users control of which calendars\n      block out free/busy time without changing the free/busy URL\n      (kevin_myer@iu13.org, Bug #1683).\n[cjh] Add exists() method to calendar drivers for checking if events exist by\n      UID (Roel Gloudemans <roel@gloudemans.info>).\n[jan] Send links in iTip requests to let users quickly reply to an invitation.\n[cjh] Add ics.php (also mirrored by an exportCalendar() API method), which can\n      be used for integration with Sunbird, iCal, et. al. (srrafa@usc.es,\n      Bug #917).\n[jan] Add preference to send email notifications to users when events have\n      been added, edited, or deleted in their calendars.\n[cjh] Add a Year view (mbydalek@mobilemini.com) (Bug #1238).\n[jan] Use OPTGROUPs in calendar drop down list.\n\n\n------\nv2.0.7\n------\n\n[cjh] SECURITY: Close arbitrary file inclusion in free/busy views.\n\n\n------\nv2.0.6\n------\n\n[cjh] Close several XSS problems with calendar and event fields.\n\n\n------\nv2.0.5\n------\n\n[jan] Fix warnings with Internet Explorer on HTTPS connections.\n[jan] Fix reminder emails.\n\n\n------\nv2.0.4\n------\n\n[jan] Allow to import more than one event from iCalendar data at once.\n[cjh] Avoid loops and other errors by immediately failing nextRecurrence()\n      checking for any event with a recurInterval of 0 (Bug #2709).\n\n\n----------\nv2.0.4-RC1\n----------\n\n[jan] Fix navigation popup with Safari browsers (t.zell@gmx.de, Bug #2447).\n[cjh] Fix infinite loop with some recurring events (Bug #2346).\n[cjh] Fix All Past and All Future searches (Bug #2257).\n[cjh] Be smarter about enforcing \"end before beginning\" check for\n      am/pm users when creating an event than spans noon (Bug #1731).\n[jan] Sort search results by start date and show category colors.\n[cjh] Respect twenty_four preference in reminders script (Bug #1896).\n\n\n------\nv2.0.3\n------\n\n[jan] Respect SMTP authentication settings when sending reminders and\n      notifications (requires Horde 3.0.4).\n[jan] Include date in reminder message (Bug #1855).\n[jan] Fix time grids in free/busy view (Bugs #1557, #1868, tasin@fhm.edu).\n\n\n----------\nv2.0.3-RC1\n----------\n\n[jan] Fix browsing through work weeks in attendees view (Bug #1852,\n      tasin@fhm.edu).\n[jan] Fix updating of attendee status in attendees view (Bug #1188).\n[jan] Don't show tasks without due dates in all timezones (Bug #514).\n[jan] Include attendees in iTip event invitations (Bug #1676).\n[jan] Fix generated HTML if no calendar has been selected.\n[cjh] Add a PostgreSQL upgrade script (Bug #1778).\n[cjh] Show the calendar selection dropdown if there are remote calendars\n      regardless of number of shares (Bug #1640).\n[cjh] Separate buttons on attendees screen (kevin_myer@iu13.org, Bug #1635).\n[cjh] Use bind variables in the SQL drivers (selsky@columbia.edu, Bugs #1669,\n      #1670).\n[jan] Send reminders in users' languages (Bug #1654).\n[cjh] Don't leave events in the database with no recurrences left (Bug #1503).\n[cjh] Make sure that remote events can be edited for saving as new, and never\n      show a delete button for them (Bug #1639).\n[cjh] Always use eventID, not eventIndex. Fixes problems with only one remote\n      event showing up per day (Bug #1630).\n[jan] Fix free/busy generation on broken PHP CGI SAPIs (Bug #1599).\n[cjh] Set recurrence end date if present in iCal data (Bug #1365, #1582).\n[cjh] Alarms that are a calendar day or more in the future are now sent on\n      time (Bug #1356)\n[jan] Catch errors if importing incomplete events (Bug #1429).\n[cjh] Fix display errors with overlapping repeating events and PHP4\n      (Bug #1200).\n[ben] Allow setting the default domain on attendee email addresses when\n      checking for freebusy urls.\n[cjh] Treat webcal:// URLs as http:// for remote calendars (Bug #1480).\n[cjh] Fix problems with PostgreSQL and non-ISO date formats (Bug #1482).\n[jan] Workaround IE warning when entering Kronolith over HTTPS (Bug #910).\n[jan] Add shortcut icon (favicon.ico).\n[jan] Sort whole day events alphabetically (Bug #222).\n\n\n------\nv2.0.2\n------\n\n[jan] Fix portal block for missing events at the turn of the year (Bug #1337).\n\n\n----------\nv2.0.2-RC1\n----------\n\n[jan] Fix free/busy views with some languages (Bug #1036).\n[cjh] Prevent infinite loops if events are set to recur weekly on no\n      weekdays (Bug #1074).\n[cjh] Set iCalendar events with weekly recurrence to recur on the day\n      of the week of the first recurrence if no BYDAY data is present\n      (Bug #1074).\n[cjh] Make sure that event UIDs are properly set in iTip notifications\n      (Bug #1153).\n[jan] Add Japanese translation (Hiromi Kimura <hiromi@tac.tsukuba.ac.jp>).\n[cjh] Check the completion status of tasks, not just their due date,\n      before showing them on the calendar (Bug #947).\n\n\n------\nv2.0.1\n------\n\n[cjh] Fix one page load delay in showing new/removing deleted shares\n      on the My Calendars screen (Bug #1048).\n[cjh] Fix labeling of weekday columns in the Month view when the\n      week starts on Monday and show_shared_side_by_side preference\n      is on (Bug #1049).\n[cjh] Fix fatal error when in calendar/import API call\n      (Sebasti\u00e1n Calero <scalero@datadec.es>).\n[cjh] Fix a week boundary problem that took you to the previous\n      week when switching between the week and work week views.\n[cjh] Fix several errors in calculating the week number at the\n      rollover between years.\n[cjh] Fix an off-by-one error in the work week view when the user\n      views weeks starts on Sunday (Bug #1046).\n[cjh] Add PostgreSQL version of 2004-12-21_add_event_uid (Bug #1028).\n[cjh] Fix typo that prevented attendees from being saved (Bug #1019).\n\n\n----\nv2.0\n----\n\n[cjh] UIDs need to be stored in the History system with a kronolith:\n      prefix and with the calendar so as not to confuse different\n      instances of the same event (if two users both have a event on\n      their seperate calendars, they should have unique histories for\n      that event).\n[cjh] The My Calendars page now has a tool for generating Free/Busy URLs\n      (Bug #571).\n[cjh] Pass Horde_Date objects instead of timestamps when exporting to\n      iCalendar (Bug #950).\n[cjh] Clone events before changing their start dates to the current day\n      in the day view so that the week view isn't wrong.\n[cjh] Fix an off-by-one error in the week view when the user views weeks\n      starting on Sunday.\n[cjh] Add a preference for whether or not to show the background color\n      for tasks shown on the calendar.\n[cjh] Don't produce invalid exception dates when exporting iCal files or\n      when loading SQL events.\n[cjh] Users can now get to the category/color edit screen directly\n      from the category legend, instead of having to find them in\n      Horde's prefs.\n\n\n--------\nv2.0-RC3\n--------\n\n[cjh] Add All Past as an option on simple searches.\n[cjh] Add My Calendars menu entry.\n[cjh] Event exceptions are now correctly exported in iCalendar files.\n[cjh] Fix recurring events that recur on the same day of the month every n\n      months where n > 1 (Bug #907).\n[cjh] Fix month view for months starting on Sunday with the first displayed\n      day set to Monday (Bug #907).\n[cjh] Show event state by CSS styling (Derek P. Moore <derekm@hackunix.org>).\n[jan] Correctly highlight the current view's tab (Bug #896).\n\n\n--------\nv2.0-RC2\n--------\n\n[jan] Fix recurring events from remote calendars (Bug #559).\n[cjh] The menubar Goto popup is now always on top of <select> boxes,\n      even in Internet Explorer (Bug #822).\n[cjh] Menubar Goto link works on the Options screen again.\n\n\n--------\nv2.0-RC1\n--------\n\n[cjh] Fix the menubar popup date navigator on the New Event screen.\n[cjh] Remove unused specialized notification listener.\n[cjh] Update icons.\n[jan] Fix importing of non-recurring events.\n[jan] Save categories of imported events.\n[cjh] Show different calendar views in tabs, not in the menu.\n[cjh] Show free/busy view only in the event screen.\n\n\n---------\nv2.0-BETA\n---------\n\n[cjh] The guts of Kronolith_Event objects are now based on Horde_Date\n      objects instead of timestamps.\n[cjh] Lots of date-related functions moved to the Horde_Date class.\n[jan] Add preference for address books to search for free/busy urls.\n[jan] Add special black-on-white styles for message printing.\n[cjh] Add title field to the basic search.\n[cjh] Allow searches for \"All Future\" events.\n[cjh] Add search functionality (Meilof <meilof@gmail.com>).\n[jan] Add access keys.\n[cjh] Add Kolab drivers (Stuart Bing\u00eb <s.binge@codefusion.co.za>).\n\n\n----------\nv2.0-ALPHA\n----------\n\n[cjh] Remote calendars are now parsed with the Horde_iCalendar library,\n      which allows for much better iCalendar support, better handling of\n      timezones, etc.\n[cjh] The month view no longer shows blank boxes for days in the grid that are\n      outside of the current month - instead, it goes back into the previous\n      month and forward into the next month however many days are showable.\n[cjh] Kronolith now includes the functionality, previously in Moment,\n      to track attendees for events, send invitations, updates, and\n      cancellations, and do scheduling based on freebusy information\n      (Stuart Binge <s.binge@codefusion.co.za>).\n[cjh] Kronolith_Driver::move() added to prevent event IDs changing when moving\n      between calendars, if possible.\n[cjh] GUIDs now only contain kronolith: and the event ID - sharename is not\n      needed.\n[cjh] Event IDs are now 32-character unique strings, to be useable as GUIDs.\n      The SQL table definition has changed; conversion scripts are in scripts/.\n[cjh] eventd now uses the Horde_Scheduler API's ability to serialize and\n      save state; it's now meant to be run out of cron every minute (no\n      more slow memory munching).\n[cjh] Show start and end times in event tooltips\n      (Payton <payton@repligen.com>).\n[cjh] Fix events that recur every n months (where n != 1) on the same\n      weekday when using the SQL driver.\n[cjh] Track addition, modification, and deletion of events\n      with the Horde History:: API.\n[cjh] The event editor now switches the list of categories to match the\n      calendar that you are adding the event to.\n[cjh] Show tooltips with event descriptions.\n[cjh] Show a legend mapping categories to colors\n      (Jason Rust <jrust@rustyparts.com>).\n[mir] listEvents now supports an option to NOT do recurrence (useful for\n      synchronizing with other systems).\n[cjh] First shot at a reminder daemon, written in PHP and using the\n      Horde_Scheduler framework.\n[cjh] Cache free/busy information for an hour.\n[cjh] Add viewing of shared calendars side-by-side in the month view\n      (j.huinink@wanadoo.nl).\n[cjh] Kronolith now generates free/busy information for any calendar that the\n      viewer has PERMS_SHOW permission to. This can be used in, e.g., Outlook\n      for scheduling meetings, etc.\n[cjh] Support for guest calendars.\n[cjh] Use the global shares editing page for changing/assigning share\n      permissions.\n[mac] Add support for subscribing to remote iCalendar files.\n[cjh] Remove the Share header for now; takes up far too much space\n      to communicate limited information.\n[mac] Add ability to display multiple calendars at a time.\n[cjh] Palm DateBook (PDB) import support.\n[mac] Add shared calendars support (Joel Vandal <joel@scopserv.com>).\n[cjh] Kronolith can now send iCalendar invitations to an event.\n[cjh] Import/Export of iCalendar data works for basic attributes now.\n[cjh] Use Horde::compressOutput() for output compression.\n\n\n------\nv1.1.4\n------\n\n[jan] Close XSS when setting the parent frame's page title by javascript (cjh).\n\n\n------\nv1.1.3\n------\n\n[jan] Fix display of category colors in week and day views (Bj\u00f6rn Tackmann\n      <bjoern.tackmann@consultico.de>).\n[jan] Add Latvian translation (Ivars Stivrins <ivars@kraslava.lv>).\n[jan] Fix erroneous javascript in recurrence input fields of the event form\n      (Bugs 403, 408).\n\n\n------\nv1.1.2\n------\n\n[cjh] Fix a bug in the SQL driver preventing events from being displayed.\n\n\n------\nv1.1.1\n------\n\n[jan] Fix some display bugs with recurring events in the sql driver (cjh).\n\n\n----------\nv1.1.1-RC1\n----------\n\n[jan] Fix broken image tag in day and week views.\n[jan] Fix \"New Category\" selection in event edit view.\n[jan] Add Arabic (Syria) translation (Platinum Development Team\n      <devteam@platinum-sy.net>).\n\n\n----\nv1.1\n----\n\n[cjh] Kronolith_Event objects now know how to obtain their driver,\n      rather than storing a reference. Makes for much smaller/better\n      return values over XML-RPC, at least.\n[cjh] Fix a bug in the spanning algorithm when there were two\n      independant sets of overlapping events that were not common\n      factors (i.e, a set of 2 events and a set of 3 events). Also\n      start to document the row spanning code.\n[mir] Implement week of month recurrence for SQL driver.\n[cjh] Use Kronolith::listEvents() everywhere, so there is only one body\n      of code to debug/add to for listing of events.\n[cjh] Show Nag tasks, if requested, on all views.\n[cjh] Use Kronolith::listEvents() in the week views; should be much\n      more efficient (fewer SQL queries/MCAL calls).\n[cjh] Fix summary display of events after an empty day.\n[cjh] Fix links to events on other calendars in the summary.\n[cjh] Show category colors in the Kronolith summary.\n[cjh] Show current category color in category color options screen\n      (Jan Kuipers <jrkuipers@lauwerscollege.nl>).\n[jan] Add Romanian translation (Eugen Hoanca <eugenh@urban-grafx.ro>,\n      Marius Dragulescu <mariusd@urban-grafx.ro>).\n[jan] Add Print button for day, week, month views (mac).\n[jan] Clean up url creation and XHTML (mac).\n[jan] Add Norwegian Bokmaal translation (Torstein S. Hansen <huleboer@techbee.no>).\n[jan] Add Kronolith::addParameter().\n[jan] Add Lithuanian translation (Darius Matuliauskas <darius@lnk.lt>).\n[mac] Clean up url creation and XHTML.\n[jan] Add Simplified Chinese translation (Zhang Bo <boozhang@sdb.ac.cn>).\n[jan] Add Bulgarian translation (Miroslav Pendev <miro@cybershade.us>).\n[jan] Replace <?= with <?php echo, and remove the short_open_tags requirement.\n[jan] Add delete link to event view.\n[jan] Remove deprecated DB::isWarning() calls.\n\n\n----\nv1.0\n----\n\n[jan] Add Hungarian translation (Laszlo L. Tornoci <torlasz@xenia.sote.hu>).\n[jan] Add Korean translation (J.I Kim <aporie@netian.com>).\n[jan] Add Danish translation (Bill Edgington <horde@0x20.com>).\n[jan] Add Norwegian Nynorsk translation (Per-Stian Vatne <psv@orsta.org>).\n[jan] Add event view page and make it the standard if clicking on an event\n      link (Brandon Knitter <knitterb@blandsite.org>).\n[jan] Show event description in link tooltip.\n[jan] Add Event::getLink().\n[cjh] Track when events are modified.\n[cjh] Add exceptions to recurring events.\n[cjh] Allow same deletion options as Palm for recurring events.\n[cjh] Add a preference for confirming event deletion.\n[jan] Add Slovak translation (Leo Mrafko <leo@oel.sk>).\n[jan] Add \"Save as new\" button (Michael Cochrane <mike@graftonhall.co.nz>).\n[cjh] Close a potential problem with register_globals On and $js_onLoad.\n[jan] Add Finnish translation (Leena Heino <liinu@uta.fi>).\n[cjh] Add new event link to the summary (Quinn Wilson <qwilson@midworld.org>).\n[cjh] Use the new PrefsUI class.\n[cjh] Show events that extend past the end hour of the day view.\n[jon] Adapt to the new Horde::img() syntax.\n[cjh] Switch output compression to ob_gzhandler().\n[cjh] Fix column widths in week view to be consistent\n      (Jeff Graves <jeff@image-src.com>).\n[jan] Add Polish translation (Maciek Uhlig <muhlig@us.edu.pl>).\n[cjh] Add preferences for the hour range shown in the day/week views.\n[cjh] Use KRONOLITH_TEMPLATES constant for all template paths.\n[cjh] Use $registry->get() for all Registry information.\n[cjh] Use the new Notification system.\n[jan] Add Swedish translation (Andreas Dahl\u00e9n <andreas@dahlen.ws>).\n[jon] Enable the \"portability\" option in the SQL driver.\n[jan] Use the new notification framework. This breaks compatibility with\n      Horde 2.0.\n[jan] Remove the standard value for the language preference. The language to\n      fall back to should be set Horde wide in lang.php instead.\n[jan] Change '24hr' preference to 'twentyFour' to be ldap compliant.\n\n\n------\nv0.0.3\n------\n\n[bjn] Change 'en' and 'en_EN' locales to 'en_US' (default).\n[jan] Add Brazilian Portuguese translation (Samuel Mota\n      <samuel@bumerangue.com>).\n[jan] Add DHTML date navigator.\n[jan] Add Greek translation (Stefanos I. Dimitriou <sdimitri@teiath.gr>).\n[jan] Add Russian translation (Anton Nekhoroshih <anton@valuehost.ru>).\n[jan] Recode the html display functions and add extra row for all day events.\n[cjh] Let the Registry handle retrieving preferences.\n[jan] Add icon for recurring events.\n[jan] Add preference to show due tasks from Nag in the calendar.\n[jan] Add import/export capability.\n[jan] Add Italian translation (Giovanni Meneghetti <gmeneghetti@infvic.it>).\n[cjh] Add Traditional Chinese translation (David Chang <david@thbuo.gov.tw>).\n[jan] Add support for timezones\n[jan] Put new-event-link into week header instead around times in week view.\n[jan] Add day of month into week headers\n[cjh] Add Czech translation (pchytil@asp.ogi.edu).\n[jan] The menu buttons now open the day/week/month view corresponding to the\n      actual view. New 'Today' button.\n[jan] Make sure that events before 8am are shown correctly.\n[cjh] Add an initial MySQL driver (Luc Saillard <luc+kronolith@alcove.fr>).\n[avsm] Replace $conf['paths'] with the $registry equivalents.\n[jan] Let the week alternatively start with Sunday. ISO conform week number\n      calculation.\n[cjh] Prevent all day events from causing the day to start displaying at 12am.\n[cjh] Add $conf['menu']['apps'] support and a help link.\n[jan] Let the users alternatively select end time or duration of an event.\n[jan] Add support for alarms.\n[cjh] Add a preference to use hour increments instead of half-hour (Jan\n      Schneider <janmailing@gmx.de>).\n[cjh] Bold in progress events in the summary and don't show events that are\n      over (Jan Schneider <janmailing@gmx.de>).\n[cjh] Add delete links on event edit pages, and make sure delete and cancel\n      work without javascript (Jan Schneider <janmailing@gmx.de>).\n[cjh] Add translation framework.\n[cjh] Make sure events are sorted by time in the summary.\n[cjh] Use the *url() functions more consistently to make sure that\n      cookie-less sessions work.\n\n\n------\nv0.0.2\n------\n\n[cjh] Allow all-day events and montly-on-weekday recurrence.\n[cjh] Add a Horde summary API function.\n[cjh] Use 24hr time preference (Jan Schneider <janmailing@gmx.de>).\n[cjh] Added Preferences framework into Kronolith.\n[jon] Merge doctype.inc into common-header.inc.\n[jon] Allow the registry to handle Kronolith's configuration values.\n[jon] HORDE_BASE is now defined in lib/base.php instead of config/conf.php.\n[cjh] Define the HORDE_BASE constant in config/conf.php, and use it when\n      referring to any of Horde's files.\n[jon] Retired config/menu.txt in favor of config/menu.php.  This file follows\n      a new format based on native PHP data structures.\n[cjh] Add an optional keywords section, and a keywords definition file.\n[cjh] Add a location field to events.\n[cjh] Add the ability to re-label the category field, and to make it a\n      system-defined list of options.\n[cjh] Added Kronolith::weeksInYear($year) and Kronolith_Day::isToday().\n[cjh] Add week and workweek (mon-fri) views.\n[cjh] Allow events to recur every other week, every 3 days, etc.\n[cjh] Reorganize the event adding/editing screen and add javascript to give\n      the user sane defaults.\n[cjh] Remove year.php; it's ugly and not really useful.\n[cjh] Open the calender in base.php.\n[cjh] Remove most of the remaining mcal-dependent code.\n[cjh] Kronolith now uses Horde authentication instead of its own. This means\n      that whatever auth method you are using for Horde will be used to\n      authenticate to Kronolith, and in return you get single sign-on with any\n      other apps using Horde authentication. This also means that Kronolith\n      is completely independent of MCAL for authentication now; if you have\n      one MCAL user, that's enough to provide calendars for all Horde users.\n[cjh] Add lib/base.php to include all globally needed conf files and\n      libraries, set up the language, etc.\n[cjh] Abstract the event creation/edit code into the\n      Kronolith_Driver/Kronolith_Event classes.\n[cjh] Changes to work with register_globals = Off. (IN PROGRESS)\n[cjh] Add an optional \"get the time this event would start on day x\" feature\n      to the Kronolith_Event:: class, allowing status.php to work with\n      recurring events.\n[cjh] We now have the Kronolith_Event abstraction class that abstracts away\n      details of events, so that the frontend scripts aren't dependant on\n      mcal.\n[cjh] Display events which are in progress, just starting, or start in under\n      two hours along with other messages just under the menu.\n[cjh] Much slicker UI.\n[cjh] Use mcal_popen instead of mcal_open - might give us a performance gain.\n\n\n------\nv0.0.1\n------\n\n[cjh] Don't display delete links in month view; slimmer UI.\n[jon] Silence session_start warnings.\n[jon] Use Horde::url() in place of the deprecated buildURL() function.\n[cjh] Update to work with new slimmed down/Horde:: integrated session code.\n[cjh] Use the new css.php script to generate our stylesheets.\n[cjh] Revising the look and feel to use the new stylesheets and conventions.\n[cjh] Added initial CHANGES file and documentation.\n", "/**\n * kronolith.js - Base application logic.\n *\n * Copyright 2008-2012 Horde LLC (http://www.horde.org/)\n *\n * See the enclosed file COPYING for license information (GPL). If you\n * did not receive this file, see http://www.horde.org/licenses/gpl.\n *\n * @author Jan Schneider <jan@horde.org>\n */\n\n/* Kronolith object. */\nKronolithCore = {\n    // Vars used and defaulting to null/false:\n    //   DMenu, Growler, inAjaxCallback, is_logout, weekSizes, daySizes,\n    //   groupLoading, colorPicker, duration, timeMarker, monthDays,\n    //   allDays, eventsWeek, eventTagAc, calendarTagAc, attendeesAc\n\n    view: '',\n    ecache: $H(),\n    cacheStart: null,\n    cacheEnd: null,\n    holidays: [],\n    tcache: $H(),\n    eventsLoading: {},\n    loading: 0,\n    viewLoading: [],\n    fbLoading: 0,\n    redBoxLoading: false,\n    inPrefs: false,\n    date: Date.today(),\n    tasktype: 'incomplete',\n    growls: 0,\n    alarms: [],\n    knl: {},\n    wrongFormat: $H(),\n    mapMarker: null,\n    map: null,\n    mapInitialized: false,\n    freeBusy: $H(),\n    search: 'future',\n    effectDur: 0.4,\n    macos: navigator.appVersion.indexOf('Mac') != -1,\n\n    /**\n     * The location that was open before the current location.\n     *\n     * @var string\n     */\n    lastLocation: '',\n\n    /**\n     * The currently open location.\n     *\n     * @var string\n     */\n    openLocation: '',\n\n    /**\n     * The current (main) location.\n     *\n     * This is different from openLocation as it isn't updated for any\n     * locations that are opened in a popup view, e.g. events.\n     *\n     * @var string\n     */\n    currentLocation: '',\n\n    kronolithBody: $('kronolithBody'),\n\n    doActionOpts: {\n        onException: function(parentfunc, r, e)\n        {\n            /* Make sure loading images are closed. */\n            this.loading--;\n            if (!this.loading) {\n                $('kronolithLoading').hide();\n            }\n            this.closeRedBox();\n            this.showNotifications([ { type: 'horde.error', message: Kronolith.text.ajax_error } ]);\n            this.debug('onException', e);\n        }.bind(this),\n        onFailure: function(t, o) {\n            KronolithCore.debug('onFailure', t);\n            KronolithCore.showNotifications([ { type: 'horde.error', message: Kronolith.text.ajax_error } ]);\n        },\n        evalJS: false,\n        evalJSON: true\n    },\n\n    debug: function(label, e)\n    {\n        if (!this.is_logout && window.console && window.console.error) {\n            window.console.error(label, Prototype.Browser.Gecko ? e : $H(e).inspect());\n        }\n    },\n\n    /* 'action' -> if action begins with a '*', the exact string will be used\n     *  instead of sending the action to the ajax handler. */\n    doAction: function(action, params, callback, opts)\n    {\n        opts = Object.extend(this.doActionOpts, opts || {});\n        params = $H(params);\n        action = action.startsWith('*')\n            ? action.substring(1)\n            : Kronolith.conf.URI_AJAX + action;\n        if (Kronolith.conf.SESSION_ID) {\n            params.update(Kronolith.conf.SESSION_ID.toQueryParams());\n        }\n        opts.parameters = params.toQueryString();\n        opts.onComplete = function(t, o) { this.doActionComplete(t, callback); }.bind(this);\n        new Ajax.Request(action, opts);\n    },\n\n    doActionComplete: function(request, callback)\n    {\n        this.inAjaxCallback = true;\n\n        if (!request.responseJSON) {\n            if (++this.server_error == 3) {\n                this.showNotifications([ { type: 'horde.error', message: Kronolith.text.ajax_timeout } ]);\n            }\n            this.inAjaxCallback = false;\n            return;\n        }\n\n        var r = request.responseJSON;\n        if (!r.msgs) {\n            r.msgs = [];\n        }\n\n        if (r.response && Object.isFunction(callback)) {\n            try {\n                callback(r);\n            } catch (e) {\n                this.debug('doActionComplete', e);\n            }\n        }\n\n        if (this.server_error >= 3) {\n            r.msgs.push({ type: 'horde.success', message: Kronolith.text.ajax_recover });\n        }\n        this.server_error = 0;\n\n        this.showNotifications(r.msgs);\n        this.inAjaxCallback = false;\n    },\n\n    setTitle: function(title)\n    {\n        document.title = Kronolith.conf.name + ' :: ' + title;\n        return title;\n    },\n\n    showNotifications: function(msgs)\n    {\n        if (!msgs.size() || this.is_logout) {\n            return;\n        }\n\n        msgs.find(function(m) {\n            switch (m.type) {\n            case 'horde.ajaxtimeout':\n                this.logout(m.message);\n                return true;\n\n            case 'horde.alarm':\n                var alarm = m.flags.alarm;\n                // Only show one instance of an alarm growl.\n                if (this.alarms.include(alarm.id)) {\n                    break;\n                }\n\n                this.alarms.push(alarm.id);\n\n                var message = alarm.title.escapeHTML();\n                if (alarm.params && alarm.params.notify) {\n                    if (alarm.params.notify.ajax) {\n                        message = new Element('a')\n                            .insert(message)\n                            .observe('click', function(e) {\n                                this.Growler.ungrowl(e.findElement('div'));\n                                this.go(alarm.params.notify.ajax);\n                            }.bindAsEventListener(this));\n                    } else if (alarm.params.notify.url) {\n                        message = new Element('a', { href: alarm.params.notify.url })\n                            .insert(message);\n                    }\n                    if (alarm.params.notify.sound) {\n                        Sound.play(alarm.params.notify.sound);\n                    }\n                }\n                message = new Element('div')\n                    .insert(message);\n                if (alarm.params && alarm.params.notify &&\n                    alarm.params.notify.subtitle) {\n                    message.insert(new Element('br')).insert(alarm.params.notify.subtitle.escapeHTML());\n                }\n                if (alarm.user) {\n                    var select = '<select>';\n                    $H(Kronolith.conf.snooze).each(function(snooze) {\n                        select += '<option value=\"' + snooze.key + '\">' + snooze.value + '</option>';\n                    });\n                    select += '</select>';\n                    message.insert('<br /><br />' + Kronolith.text.snooze.interpolate({ time: select, dismiss_start: '<input type=\"button\" value=\"', dismiss_end: '\" class=\"button ko\" />' }));\n                }\n                var growl = this.Growler.growl(message, {\n                    className: 'horde-alarm',\n                    life: 8,\n                    log: false,\n                    sticky: true\n                });\n                growl.store('alarm', alarm.id);\n\n                document.observe('Growler:destroyed', function(e) {\n                    var id = e.element().retrieve('alarm');\n                    if (id) {\n                        this.alarms = this.alarms.without(id);\n                    }\n                }.bindAsEventListener(this));\n\n                if (alarm.user) {\n                    message.down('select').observe('change', function(e) {\n                        if (e.element().getValue()) {\n                            this.Growler.ungrowl(growl);\n                            new Ajax.Request(\n                                Kronolith.conf.URI_SNOOZE,\n                                { parameters: { alarm: alarm.id,\n                                                snooze: e.element().getValue() } });\n                        }\n                    }.bindAsEventListener(this))\n                    .observe('click', function(e) {\n                        e.stop();\n                    });\n                    message.down('input[type=button]').observe('click', function(e) {\n                        new Ajax.Request(\n                            Kronolith.conf.URI_SNOOZE,\n                            { parameters: { alarm: alarm.id,\n                                            snooze: -1 } });\n                    }.bindAsEventListener(this));\n                }\n                break;\n\n            case 'horde.error':\n            case 'horde.warning':\n            case 'horde.message':\n            case 'horde.success':\n                this.Growler.growl(\n                    m.flags && m.flags.include('content.raw')\n                        ? m.message.replace(new RegExp('<a href=\"([^\"]+)\"'), '<a href=\"#\" onclick=\"KronolithCore.loadPage(\\'$1\\')\"')\n                        : m.message.escapeHTML(),\n                    {\n                        className: m.type.replace('.', '-'),\n                        life: 8,\n                        log: true,\n                        sticky: m.type == 'horde.error'\n                    });\n                var notify = $('kronolithNotifications'),\n                    className = m.type.replace(/\\./, '-'),\n                    order = 'horde-error,horde-warning,horde-message,horde-success,kronolithNotifications',\n                    open = notify.hasClassName('kronolithClose');\n                notify.removeClassName('kronolithClose');\n                if (order.indexOf(notify.className) > order.indexOf(className)) {\n                    notify.className = className;\n                }\n                if (open) {\n                    notify.addClassName('kronolithClose');\n                }\n                break;\n            }\n        }, this);\n    },\n\n    logout: function(url)\n    {\n        this.is_logout = true;\n        this.redirect(url || (Kronolith.conf.URI_AJAX + 'logOut'));\n    },\n\n    // url = (string) URL to redirect to\n    // hash = (boolean) If true, url is treated as hash information to alter\n    //        on the current page\n    redirect: function(url, hash)\n    {\n        if (hash) {\n            window.location.hash = escape(url);\n            window.location.reload();\n        } else {\n            window.location.assign(this.addURLParam(url));\n        }\n    },\n\n    addURLParam: function(url, params)\n    {\n        var q = url.indexOf('?');\n        params = $H(params);\n\n        if (Kronolith.conf.SESSION_ID) {\n            params.update(Kronolith.conf.SESSION_ID.toQueryParams());\n        }\n\n        if (q != -1) {\n            params.update(url.toQueryParams());\n            url = url.substring(0, q);\n        }\n\n        return params.size() ? (url + '?' + params.toQueryString()) : url;\n    },\n\n    go: function(fullloc, data)\n    {\n        if (this.viewLoading.size()) {\n            this.viewLoading.push([ fullloc, data ]);\n            return;\n        }\n\n        var locParts = fullloc.split(':');\n        var loc = locParts.shift();\n\n        if (this.inPrefs && loc != 'prefs') {\n            this.redirect(fullloc, true);\n            return;\n        }\n        if (this.openLocation == fullloc) {\n            return;\n        }\n\n        this.viewLoading.push([ fullloc, data ]);\n\n        if (loc != 'search') {\n            $('kronolithSearchTerm').setValue($('kronolithSearchTerm').readAttribute('default'));\n        }\n\n        switch (loc) {\n        case 'day':\n        case 'week':\n        case 'month':\n        case 'year':\n        case 'agenda':\n        case 'tasks':\n            this.closeView(loc);\n            var locCap = loc.capitalize();\n            $('kronolithNav' + locCap).addClassName('on');\n\n            switch (loc) {\n            case 'day':\n            case 'agenda':\n            case 'week':\n            case 'month':\n            case 'year':\n                var date = locParts.shift();\n                if (date) {\n                    date = this.parseDate(date);\n                } else {\n                    date = this.date;\n                }\n\n                if (this.view != 'agenda' &&\n                    this.view == loc && date.getYear() == this.date.getYear() &&\n                    ((loc == 'year') ||\n                     (loc == 'month' && date.getMonth() == this.date.getMonth()) ||\n                     (loc == 'week' && date.getRealWeek() == this.date.getRealWeek()) ||\n                     ((loc == 'day'  || loc == 'agenda') && date.dateString() == this.date.dateString()))) {\n                         this.setViewTitle(date, loc);\n                         this.addHistory(fullloc);\n                         this.loadNextView();\n                         return;\n                }\n\n                this.addHistory(fullloc);\n                this.view = loc;\n                this.date = date;\n                this.updateView(date, loc);\n                var dates = this.viewDates(date, loc);\n                this.loadEvents(dates[0], dates[1], loc);\n                $('kronolithView' + locCap).appear({\n                        duration: this.effectDur,\n                        queue: 'end',\n                        afterFinish: function() {\n                            if (loc == 'week' || loc == 'day') {\n                                this.calculateRowSizes(loc + 'Sizes', 'kronolithView' + locCap);\n                                if ($('kronolithTimeMarker')) {\n                                    this.positionTimeMarker();\n                                }\n                                if ($('kronolithTimeMarker')) {\n                                    $('kronolithTimeMarker').show();\n                                }\n                                // Scroll to the work day start time.\n                                $('kronolithView' + locCap).down('.kronolithViewBody').scrollTop = 9 * this[loc + 'Sizes'].height;\n                            }\n                            this.loadNextView();\n                        }.bind(this)\n                });\n                $('kronolithLoading' + loc).insert($('kronolithLoading').remove());\n                this.updateMinical(date, loc);\n\n                break;\n\n            case 'tasks':\n                var tasktype = locParts.shift() || this.tasktype;\n                this.setTitle(Kronolith.text.tasks);\n                if (this.view == loc && this.tasktype == tasktype) {\n                    this.addHistory(fullloc);\n                    this.loadNextView();\n                    return;\n                }\n                if (!$w('all complete incomplete future').include(tasktype)) {\n                    this.loadNextView();\n                    return;\n                }\n\n                this.addHistory(fullloc);\n                this.view = loc;\n                this.tasktype = tasktype;\n                $w('All Complete Incomplete Future').each(function(tasktype) {\n                    $('kronolithTasks' + tasktype).up().removeClassName('activeTab');\n                });\n                $('kronolithTasks' + this.tasktype.capitalize()).up().addClassName('activeTab');\n                this.loadTasks(this.tasktype);\n                $('kronolithView' + locCap).appear({\n                    duration: this.effectDur,\n                    queue: 'end',\n                    afterFinish: function() {\n                        this.loadNextView();\n                    }.bind(this) });\n                $('kronolithLoading' + loc).insert($('kronolithLoading').remove());\n                this.updateMinical(this.date);\n\n                break;\n\n            default:\n                if (!$('kronolithView' + locCap)) {\n                    break;\n                }\n                this.addHistory(fullloc);\n                this.view = loc;\n                $('kronolithView' + locCap).appear({\n                    duration: this.effectDur,\n                    queue: 'end',\n                    afterFinish: function() {\n                        this.loadNextView();\n                    }.bind(this) });\n                break;\n            }\n\n            break;\n\n        case 'search':\n            var cals = [], time = locParts[0], term = locParts[1],\n                query = Object.toJSON({ title: term });\n\n            if (!($w('all past future').include(time))) {\n                this.loadNextView();\n                return;\n            }\n\n            this.addHistory(fullloc);\n            this.search = time;\n            $w('All Past Future').each(function(time) {\n                $('kronolithSearch' + time).up().removeClassName('activeTab');\n            });\n            $('kronolithSearch' + this.search.capitalize()).up().addClassName('activeTab');\n            this.closeView('agenda');\n            this.view = 'agenda';\n            this.updateView(null, 'search', term);\n            $H(Kronolith.conf.calendars).each(function(type) {\n                $H(type.value).each(function(calendar) {\n                    if (calendar.value.show) {\n                        cals.push(type.key + '|' + calendar.key);\n                    }\n                });\n            });\n            $('kronolithAgendaNoItems').hide();\n            this.startLoading('search', query);\n            this.doAction('searchEvents',\n                          { cals: Object.toJSON(cals), query: query, time: this.search },\n                          function(r) {\n                              // Hide spinner.\n                              this.loading--;\n                              if (!this.loading) {\n                                  $('kronolithLoading').hide();\n                              }\n                              if (r.response.view != 'search' ||\n                                  r.response.query != this.eventsLoading.search) {\n                                  return;\n                              }\n                              if (Object.isUndefined(r.response.events)) {\n                                  $('kronolithAgendaNoItems').show();\n                                  return;\n                              }\n                              delete this.eventsLoading.search;\n                              $H(r.response.events).each(function(calendars) {\n                                  $H(calendars.value).each(function(events) {\n                                      this.createAgendaDay(events.key);\n                                      $H(events.value).each(function(event) {\n                                          event.value.calendar = calendars.key;\n                                          event.value.start = Date.parse(event.value.s);\n                                          event.value.end = Date.parse(event.value.e);\n                                          this.insertEvent(event, events.key, 'agenda');\n                                      }, this);\n                                  }, this);\n                              }, this);\n                          }.bind(this));\n            $('kronolithViewAgenda').appear({\n                duration: this.effectDur,\n                queue: 'end',\n                afterFinish: function() {\n                    this.loadNextView();\n                }.bind(this) });\n            $('kronolithLoadingagenda').insert($('kronolithLoading').remove());\n            this.updateMinical(this.date);\n            break;\n\n        case 'event':\n            // Load view first if necessary.\n            if (!this.view ) {\n                this.viewLoading.pop();\n                this.go(Kronolith.conf.login_view);\n                this.go.bind(this, fullloc, data).defer();\n                return;\n            }\n\n            if (this.currentLocation == fullloc) {\n                this.loadNextView();\n                return;\n            }\n\n            this.addHistory(fullloc, false);\n            switch (locParts.length) {\n            case 0:\n                // New event.\n                this.editEvent();\n                break;\n            case 1:\n                // New event on a certain date.\n                this.editEvent(null, null, locParts[0]);\n                break;\n            default:\n                // Editing event.\n                var date = locParts.pop(),\n                    event = locParts.pop(),\n                    calendar = locParts.join(':');\n                this.editEvent(calendar, event, date);\n                break;\n            }\n            this.loadNextView();\n            break;\n\n        case 'task':\n            switch (locParts.length) {\n            case 0:\n                this.addHistory(fullloc, false);\n                this.editTask();\n                break;\n            case 2:\n                this.addHistory(fullloc, false);\n                this.editTask(locParts[0], locParts[1]);\n                break;\n            }\n            this.loadNextView();\n            break;\n\n        case 'calendar':\n            if (!this.view) {\n                this.viewLoading.pop();\n                this.go(Kronolith.conf.login_view);\n                this.go.bind(this, fullloc, data).defer();\n                return;\n            }\n            this.addHistory(fullloc, false);\n            this.editCalendar(locParts.join(':'));\n            this.loadNextView();\n            break;\n\n        case 'prefs':\n            var url = Kronolith.conf.prefs_url;\n            if (data) {\n                url += (url.include('?') ? '&' : '?') + $H(data).toQueryString();\n            }\n            this.addHistory(loc);\n            this.inPrefs = true;\n            this.closeView('iframe');\n            this.iframeContent(url);\n            this.setTitle(Kronolith.text.prefs);\n            this.updateMinical(this.date);\n            this.loadNextView();\n            break;\n\n        case 'app':\n            this.addHistory(fullloc);\n            this.closeView('iframe');\n            var app = locParts.shift();\n            if (data) {\n                this.loadPage(data);\n            } else if (Kronolith.conf.app_urls[app]) {\n                this.loadPage(Kronolith.conf.app_urls[app]);\n            }\n            this.updateMinical(this.date);\n            this.view = 'iframe';\n            this.loadNextView();\n            break;\n\n        default:\n            this.loadNextView();\n            break;\n        }\n    },\n\n    /**\n     * Removes the last loaded view from the stack and loads the last added\n     * view, if the stack is still not empty.\n     *\n     * We want to load views from a LIFO queue, because the queue is only\n     * building up if the user switches to another view while the current view\n     * still loads. In that case we can go directly to the most recently\n     * clicked view and drop the remaining queue.\n     */\n    loadNextView: function()\n    {\n        var current = this.viewLoading.shift();\n        if (this.viewLoading.size()) {\n            var next = this.viewLoading.pop();\n            this.viewLoading = [];\n            if (current[0] != next[0] || current[1] || next[1]) {\n                this.go(next[0], next[1]);\n            }\n        }\n    },\n\n    /**\n     * Rebuilds one of the calendar views for a new date.\n     *\n     * @param Date date    The date to show in the calendar.\n     * @param string view  The view that's rebuilt.\n     * @param mixed data   Any additional data that might be required.\n     */\n    updateView: function(date, view, data)\n    {\n        this.holidays = [];\n\n        switch (view) {\n        case 'day':\n            var today = Date.today();\n            this.dayEvents = [];\n            this.dayGroups = [];\n            this.allDayEvents = [];\n            $('kronolithViewDay')\n                .down('caption span')\n                .update(this.setViewTitle(date, view, data));\n            $('kronolithViewDay')\n                .down('.kronolithAllDayContainer')\n                .store('date', date.dateString());\n            $('kronolithEventsDay').store('date', date.dateString());\n            if (date.equals(today)) {\n                this.addTimeMarker('kronolithEventsDay');\n            }\n            break;\n\n        case 'week':\n            this.dayEvents = [];\n            this.dayGroups = [];\n            this.allDayEvents = [];\n            this.allDays = {};\n            this.eventsWeek = {};\n            var div = $('kronolithEventsWeek').down('div'),\n                th = $('kronolithViewWeekHead').down('.kronolithWeekDay'),\n                td = $('kronolithViewWeekHead').down('tbody td').next('td'),\n                hourRow = $('kronolithViewWeekBody').down('tr'),\n                dates = this.viewDates(date, view),\n                today = Date.today(),\n                day, dateString, i, hourCol;\n\n            $('kronolithViewWeek')\n                .down('caption span')\n                .update(this.setViewTitle(date, view, data));\n\n            for (i = 0; i < 24; i++) {\n                day = dates[0].clone();\n                hourCol = hourRow.down('td').next('td');\n                while (hourCol) {\n                    hourCol.removeClassName('kronolithToday');\n                    if (day.equals(today)) {\n                        hourCol.addClassName('kronolithToday');\n                    }\n                    hourCol = hourCol.next('td');\n                    day.next().day();\n                }\n                hourRow = hourRow.next('tr');\n            }\n            day = dates[0].clone();\n            for (i = 0; i < 7; i++) {\n                dateString = day.dateString();\n                this.allDays['kronolithAllDay' + dateString] = td.down('div');\n                this.eventsWeek['kronolithEventsWeek' + dateString] = div;\n                div.store('date', dateString)\n                    .writeAttribute('id', 'kronolithEventsWeek' + dateString);\n                th.store('date', dateString)\n                    .down('span').update(day.toString('dddd, d'));\n                td.removeClassName('kronolithToday');\n                this.allDays['kronolithAllDay' + dateString]\n                    .writeAttribute('id', 'kronolithAllDay' + dateString)\n                    .store('date', dateString);\n                if (day.equals(today)) {\n                    td.addClassName('kronolithToday');\n                    this.addTimeMarker('kronolithEventsWeek' + dateString);\n                }\n                new Drop(td.down('div'));\n                div = div.next('div');\n                th = th.next('td');\n                td = td.next('td');\n                day.next().day();\n            }\n            break;\n\n        case 'month':\n            var tbody = $('kronolithViewMonthBody'),\n                dates = this.viewDates(date, view),\n                day = dates[0].clone();\n\n            $('kronolithViewMonth')\n                .down('caption span')\n                .update(this.setViewTitle(date, view, data));\n\n            // Remove old rows. Maybe we should only rebuild the calendars if\n            // necessary.\n            tbody.childElements().each(function(row) {\n                if (row.identify() != 'kronolithRowTemplate') {\n                    row.purge();\n                    row.remove();\n                }\n            });\n\n            // Build new calendar view.\n            this.monthDays = {};\n            while (!day.isAfter(dates[1])) {\n                tbody.insert(this.createWeekRow(day, date.getMonth(), dates).show());\n                day.next().week();\n            }\n            this.equalRowHeights(tbody);\n\n            break;\n\n        case 'year':\n            var month;\n\n            $('kronolithYearDate').update(this.setViewTitle(date, view, data));\n\n            // Build new calendar view.\n            for (month = 0; month < 12; month++) {\n                $('kronolithYear' + month).update(this.createYearMonth(date.getFullYear(), month, 'kronolithYear').show());\n            }\n\n            break;\n\n        case 'agenda':\n        case 'search':\n            // Agenda days are only created on demand, if there are any events\n            // to add.\n            if (view == 'agenda') {\n                var dates = this.viewDates(date, view);\n                $('kronolithAgendaDate')\n                    .update(this.setViewTitle(date, view, data));\n                $('kronolithAgendaNavigation').show();\n                $('kronolithSearchNavigation').hide();\n            } else {\n                $('kronolithAgendaDate')\n                    .update(this.setViewTitle(date, view, data));\n                $('kronolithAgendaNavigation').hide();\n                $('kronolithSearchNavigation').show();\n            }\n\n            // Remove old rows. Maybe we should only rebuild the calendars if\n            // necessary.\n            tbody = $('kronolithViewAgendaBody').childElements().each(function(row) {\n                if (row.identify() != 'kronolithAgendaTemplate' &&\n                    row.identify() != 'kronolithAgendaNoItems') {\n                    row.purge();\n                    row.remove();\n                }\n            });\n\n            break;\n        }\n    },\n\n    /**\n     * Sets the browser title of the calendar views.\n     *\n     * @param Date date    The date to show in the calendar.\n     * @param string view  The view that's displayed.\n     * @param mixed data   Any additional data that might be required.\n     */\n    setViewTitle: function(date, view, data)\n    {\n        switch (view) {\n        case 'day':\n            return this.setTitle(date.toString('D'));\n\n        case 'week':\n            var dates = this.viewDates(date, view);\n            return this.setTitle(dates[0].toString(Kronolith.conf.date_format) + ' - ' + dates[1].toString(Kronolith.conf.date_format));\n\n        case 'month':\n            return this.setTitle(date.toString('MMMM yyyy'));\n\n        case 'year':\n            return this.setTitle(date.toString('yyyy'));\n\n        case 'agenda':\n            var dates = this.viewDates(date, view);\n            return this.setTitle(Kronolith.text.agenda + ' ' + dates[0].toString(Kronolith.conf.date_format) + ' - ' + dates[1].toString(Kronolith.conf.date_format));\n\n        case 'search':\n            return this.setTitle(Kronolith.text.searching.interpolate({ term: data })).escapeHTML();\n        }\n    },\n\n    /**\n     * Closes the currently active view.\n     */\n    closeView: function(loc)\n    {\n        $w('Day Week Month Year Tasks Agenda').each(function(a) {\n            a = $('kronolithNav' + a);\n            if (a) {\n                a.removeClassName('on');\n            }\n        });\n        if (this.view && this.view != loc) {\n            $('kronolithView' + this.view.capitalize()).fade({\n                duration: this.effectDur,\n                queue: 'end'\n            });\n            this.view = null;\n        }\n    },\n\n    /**\n     * Creates a single row of day cells for usage in the month and multi-week\n     * views.\n     *\n     * @param Date date        The first day to show in the row.\n     * @param integer month    The current month. Days not from the current\n     *                         month get the kronolithOtherMonth CSS class\n     *                         assigned.\n     * @param array viewDates  Array of Date objects with the start and end\n     *                         dates of the view.\n     *\n     * @return Element  The element rendering a week row.\n     */\n    createWeekRow: function(date, month, viewDates)\n    {\n        var day = date.clone(), today = new Date().dateString(),\n            row, cell, dateString;\n\n        // Create a copy of the row template.\n        row = $('kronolithRowTemplate').clone(true);\n        row.removeAttribute('id');\n\n        // Fill week number and day cells.\n        cell = row.down()\n            .setText(date.getRealWeek())\n            .store('date', date.dateString())\n            .next();\n        while (cell) {\n            dateString = day.dateString();\n            this.monthDays['kronolithMonthDay' + dateString] = cell;\n            cell.id = 'kronolithMonthDay' + dateString;\n            cell.store('date', dateString);\n            cell.removeClassName('kronolithOtherMonth').removeClassName('kronolithToday');\n            if (day.getMonth() != month) {\n                cell.addClassName('kronolithOtherMonth');\n            }\n            if (dateString == today) {\n                cell.addClassName('kronolithToday');\n            }\n            new Drop(cell);\n            cell.store('date', dateString)\n                .down('.kronolithDay')\n                .store('date', dateString)\n                .update(day.getDate());\n\n            cell = cell.next();\n            day.add(1).day();\n        }\n\n        return row;\n    },\n\n    /**\n     * Creates a table row for a single day in the agenda view, if it doesn't\n     * exist yet.\n     *\n     * @param string date    The day to show in the row.\n     *\n     * @return Element  The element rendering a week row.\n     */\n    createAgendaDay: function(date)\n    {\n        // Exit if row exists already.\n        if ($('kronolithAgendaDay' + date)) {\n            return;\n        }\n\n        // Create a copy of the row template.\n        var body = $('kronolithViewAgendaBody'),\n            row = $('kronolithAgendaTemplate').clone(true);\n\n        // Fill week number and day cells.\n        row.store('date', date)\n            .down()\n            .setText(this.parseDate(date).toString('D'))\n            .next()\n            .writeAttribute('id', 'kronolithAgendaDay' + date);\n        row.removeAttribute('id');\n\n        // Insert row.\n        var nextRow;\n        body.childElements().each(function(elm) {\n            if (elm.retrieve('date') > date) {\n                nextRow = elm;\n                throw $break;\n            }\n        });\n        if (nextRow) {\n            nextRow.insert({ before: row.show() });\n        } else {\n            body.insert(row.show());\n        }\n\n        return row;\n    },\n\n    /**\n     * Creates a table for a single month in the year view.\n     *\n     * @param integer year     The year.\n     * @param integer month    The month.\n     * @param string idPrefix  If present, each day will get a DOM ID with this\n     *                         prefix\n     *\n     * @return Element  The element rendering a month table.\n     */\n    createYearMonth: function(year, month, idPrefix)\n    {\n        // Create a copy of the month template.\n        var table = $('kronolithYearTemplate').clone(true),\n            tbody = table.down('tbody');\n        table.removeAttribute('id');\n        tbody.writeAttribute('id', 'kronolithYearTable' + month);\n\n        // Set month name.\n        table.down('span')\n            .store('date', year.toPaddedString(4) + (month + 1).toPaddedString(2) + '01')\n            .update(Date.CultureInfo.monthNames[month]);\n\n        // Build month table.\n        this.buildMinical(tbody, new Date(year, month, 1), null, idPrefix);\n\n        return table;\n    },\n\n    equalRowHeights: function(tbody)\n    {\n        var children = tbody.childElements();\n        children.invoke('setStyle', { height: (100 / (children.size() - 1)) + '%' });\n    },\n\n    /**\n     * Calculates some dimensions for the day and week view.\n     *\n     * @param string storage  Property name where the dimensions are stored.\n     * @param string view     DOM node ID of the view.\n     */\n    calculateRowSizes: function(storage, view)\n    {\n        if (!Object.isUndefined(this[storage])) {\n            return;\n        }\n\n        var td = $(view).down('.kronolithViewBody tr td').next('td'),\n            layout = td.getLayout(),\n            spacing = td.up('table').getStyle('borderSpacing');\n\n        // FIXME: spacing is hardcoded for IE 7 because it doesn't know about\n        // border-spacing, but still uses it. WTF?\n        spacing = spacing ? parseInt($w(spacing)[1], 10) : 2;\n        this[storage] = {};\n        this[storage].height = layout.get('margin-box-height') + spacing;\n        this[storage].spacing = this[storage].height - layout.get('padding-box-height') - layout.get('border-bottom');\n    },\n\n    /**\n     * Adds a horizontal ruler representing the current time to the specified\n     * container.\n     *\n     * @param string|Element  The container of the current day.\n     */\n    addTimeMarker: function(container)\n    {\n        if ($('kronolithTimeMarker')) {\n            $('kronolithTimeMarker').remove();\n            this.timeMarker.stop();\n        }\n        $(container).insert(new Element('div', { id: 'kronolithTimeMarker' }).setStyle({ position: 'absolute' }).hide());\n        this.timeMarker = new PeriodicalExecuter(this.positionTimeMarker.bind(this), 60);\n    },\n\n    /**\n     * Updates the horizontal ruler representing the current time.\n     */\n    positionTimeMarker: function()\n    {\n        var today = Date.today(), now;\n\n        switch (this.view) {\n        case 'day':\n            if (!this.date.equals(today)) {\n                $('kronolithTimeMarker').remove();\n                this.timeMarker.stop();\n                return;\n            }\n            break;\n        case 'week':\n            if ($('kronolithTimeMarker').up().retrieve('date') != today.dateString()) {\n                var newContainer = this.eventsWeek['kronolithEventsWeek' + today.dateString()];\n                $('kronolithTimeMarker').remove();\n                if (newContainer) {\n                    this.addTimeMarker(newContainer);\n                } else {\n                    this.timeMarker.stop();\n                }\n                return;\n            }\n            break;\n        default:\n            $('kronolithTimeMarker').remove();\n            this.timeMarker.stop();\n            return;\n        }\n\n        now = new Date();\n        $('kronolithTimeMarker').setStyle({ top: ((now.getHours() * 60 + now.getMinutes()) * this[this.view + 'Sizes'].height / 60 | 0) + 'px' });\n    },\n\n    /**\n     * Rebuilds the mini calendar.\n     *\n     * @param Date date    The date to show in the calendar.\n     * @param string view  The view that's displayed, determines which days in\n     *                     the mini calendar are highlighted.\n     */\n    updateMinical: function(date, view)\n    {\n        // Update header.\n        $('kronolithMinicalDate')\n            .store('date', date.dateString())\n            .update(date.toString('MMMM yyyy'));\n\n        this.buildMinical($('kronolithMinical').down('tbody'), date, view);\n    },\n\n    /**\n     * Creates a mini calendar suitable for the navigation calendar and the\n     * year view.\n     *\n     * @param Element tbody    The table body to add the days to.\n     * @param Date date        The date to show in the calendar.\n     * @param string view      The view that's displayed, determines which days\n     *                         in the mini calendar are highlighted.\n     * @param string idPrefix  If present, each day will get a DOM ID with this\n     *                         prefix\n     */\n    buildMinical: function(tbody, date, view, idPrefix)\n    {\n        var dates = this.viewDates(date, 'month'),\n            day = dates[0].clone(),\n            date7 = date.clone().add(1).week(),\n            today = Date.today(),\n            week = this.viewDates(this.date, 'week'),\n            dateString, td, tr, i;\n\n        // Remove old calendar rows. Maybe we should only rebuild the minical\n        // if necessary.\n        tbody.childElements().invoke('remove');\n\n        for (i = 0; i < 42; i++) {\n            dateString = day.dateString();\n            // Create calendar row and insert week number.\n            if (day.getDay() == Kronolith.conf.week_start) {\n                tr = new Element('tr');\n                tbody.insert(tr);\n                td = new Element('td', { className: 'kronolithMinicalWeek' })\n                    .store('weekdate', dateString);\n                td.update(day.getRealWeek());\n                tr.insert(td);\n                weekStart = day.clone();\n                weekEnd = day.clone();\n                weekEnd.add(6).days();\n            }\n\n            // Insert day cell.\n            td = new Element('td').store('date', dateString);\n            if (day.getMonth() != date.getMonth()) {\n                td.addClassName('kronolithMinicalEmpty');\n            } else if (!Object.isUndefined(idPrefix)) {\n                td.id = idPrefix + dateString;\n            }\n\n            // Highlight days currently being displayed.\n            if (view &&\n                ((view == 'month' && this.date.between(dates[0], dates[1])) ||\n                 (view == 'week' && day.between(week[0], week[1])) ||\n                 (view == 'day' && day.equals(this.date)) ||\n                 (view == 'agenda' && !day.isBefore(date) && day.isBefore(date7)))) {\n                td.addClassName('kronolithSelected');\n            }\n\n            // Highlight today.\n            if (day.equals(today)) {\n                td.addClassName('kronolithToday');\n            }\n            td.update(day.getDate());\n            tr.insert(td);\n            day.next().day();\n        }\n    },\n\n    /**\n     * Inserts a calendar entry in the sidebar menu.\n     *\n     * @param string type  The calendar type.\n     * @param string id    The calendar id.\n     * @param object cal   The calendar object.\n     * @param Element div  Container DIV where to add the entry (optional).\n     */\n    insertCalendarInList: function(type, id, cal, div)\n    {\n        var noItems, calendar;\n        if (!div) {\n            div = this.getCalendarList(type, cal.owner);\n        }\n        noItems = div.previous();\n        if (noItems &&\n            noItems.tagName == 'DIV' &&\n            noItems.className == 'kronolithDialogInfo') {\n            noItems.hide();\n        }\n        if (type != 'holiday' && type != 'external') {\n            div.insert(new Element('span', { className: 'kronolithCalEdit' })\n                   .setStyle({ backgroundColor: cal.bg, color: cal.fg })\n                   .insert('&#9658;'));\n        }\n        calendar = new Element('div', { className: cal.show ? 'kronolithCalOn' : 'kronolithCalOff' })\n            .store('calendar', id)\n            .store('calendarclass', type)\n            .setStyle({ backgroundColor: cal.bg, color: cal.fg })\n            .insert(cal.name.escapeHTML());\n        this.addShareIcon(cal, calendar);\n        div.insert(calendar);\n    },\n\n    /**\n     * Add the share icon after the calendar name in the calendar list.\n     *\n     * @param object cal       A calendar object from Kronolith.conf.calendars.\n     * @param Element element  The calendar element in the list.\n     */\n    addShareIcon: function(cal, element)\n    {\n        if (cal.owner && cal.perms) {\n            $H(cal.perms).each(function(perm) {\n                if (perm.key != 'type' &&\n                    ((Object.isArray(perm.value) && perm.value.size()) ||\n                     (!Object.isArray(perm.value) && perm.value))) {\n                    element.insert(' ').insert(new Element('img', { src: Kronolith.conf.images.attendees.replace(/fff/, cal.fg.substring(1)), title: Kronolith.text.shared }));\n                    throw $break;\n                }\n            });\n        }\n    },\n\n    /**\n     * Rebuilds the list of calendars.\n     */\n    updateCalendarList: function()\n    {\n        var ext = $H(), extNames = $H(),\n            extContainer = $('kronolithExternalCalendars');\n\n        $H(Kronolith.conf.calendars.internal).each(function(cal) {\n            this.insertCalendarInList('internal', cal.key, cal.value);\n        }, this);\n\n        if (Kronolith.conf.tasks) {\n            $H(Kronolith.conf.calendars.tasklists).each(function(cal) {\n                this.insertCalendarInList('tasklists', cal.key, cal.value);\n            }, this);\n        }\n\n        $H(Kronolith.conf.calendars.external).each(function(cal) {\n            var parts = cal.key.split('/'), api = parts.shift();\n            if (!ext.get(api)) {\n                ext.set(api, $H());\n            }\n            ext.get(api).set(parts.join('/'), cal.value);\n            extNames.set(api, cal.value.api ? cal.value.api : Kronolith.text.external_category);\n        });\n        ext.each(function(api) {\n            extContainer\n                .insert(new Element('h3')\n                        .insert({ bottom: extNames.get(api.key).escapeHTML() }))\n                .insert(new Element('div', { id: 'kronolithExternalCalendar' + api.key, className: 'kronolithCalendars' }));\n            api.value.each(function(cal) {\n                this.insertCalendarInList('external', api.key + '/' + cal.key, cal.value, $('kronolithExternalCalendar' + api.key));\n            }, this);\n        }, this);\n\n        $H(Kronolith.conf.calendars.remote).each(function(cal) {\n            this.insertCalendarInList('remote', cal.key, cal.value);\n        }, this);\n\n        $H(Kronolith.conf.calendars.holiday).each(function(cal) {\n            if (cal.value.show) {\n               this.insertCalendarInList('holiday', cal.key, cal.value);\n            }\n        }, this);\n    },\n\n    /**\n     * Returns the DIV container that holds all calendars of a certain type.\n     *\n     * @param string type  A calendar type\n     *\n     * @return Element  The container of the calendar type.\n     */\n    getCalendarList: function(type, personal)\n    {\n        switch (type) {\n        case 'internal':\n            return personal\n                ? $('kronolithMyCalendars')\n                : $('kronolithSharedCalendars');\n        case 'tasklists':\n            return personal\n                ? $('kronolithMyTasklists')\n                : $('kronolithSharedTasklists');\n        case 'external':\n            return $('kronolithExternalCalendars');\n        case 'remote':\n            return $('kronolithRemoteCalendars');\n        case 'holiday':\n            return $('kronolithHolidayCalendars');\n        }\n    },\n\n    /**\n     * Loads a certain calendar, if the current view is still a calendar view.\n     *\n     * @param string type      The calendar type.\n     * @param string calendar  The calendar id.\n     */\n    loadCalendar: function(type, calendar)\n    {\n        if (Kronolith.conf.calendars[type][calendar].show &&\n            $w('day week month year agenda').include(this.view)) {\n            var dates = this.viewDates(this.date, this.view);\n            this.deleteCache([type, calendar]);\n            this.loadEvents(dates[0], dates[1], this.view, [[type, calendar]]);\n        }\n    },\n\n    /**\n     * Toggles a calendars visibility.\n     *\n     * @param string type      The calendar type.\n     * @param string calendar  The calendar id.\n     */\n    toggleCalendar: function(type, calendar)\n    {\n        var elt = $('kronolithMenuCalendars').select('div').find(function(div) {\n            return div.retrieve('calendarclass') == type &&\n            div.retrieve('calendar') == calendar;\n        });\n\n        Kronolith.conf.calendars[type][calendar].show = !Kronolith.conf.calendars[type][calendar].show;\n        elt.toggleClassName('kronolithCalOn');\n        elt.toggleClassName('kronolithCalOff');\n\n        switch (this.view) {\n        case 'month':\n        case 'agenda':\n            if (Object.isUndefined(this.ecache.get(type)) ||\n                Object.isUndefined(this.ecache.get(type).get(calendar))) {\n                this.loadCalendar(type, calendar);\n            } else {\n                var allEvents = this.kronolithBody.select('div').findAll(function(el) {\n                    return el.retrieve('calendar') == type + '|' + calendar;\n                });\n                if (this.view == 'month' && Kronolith.conf.max_events) {\n                    var dates = this.viewDates(this.date, this.view);\n                    if (elt.hasClassName('kronolithCalOff')) {\n                        var day, more, events, calendars = [];\n                        $H(Kronolith.conf.calendars).each(function(type) {\n                            $H(type.value).each(function(cal) {\n                                if (cal.value.show) {\n                                    calendars.push(type.key + '|' + cal.key);\n                                }\n                            });\n                        });\n                        allEvents.each(function(el) {\n                            if (el.retrieve('calendar').startsWith('holiday|')) {\n                                this.holidays = this.holidays.without(el.retrieve('eventid'));\n                            }\n                            el.remove();\n                        }, this);\n                        for (var date = dates[0]; !date.isAfter(dates[1]); date.add(1).days()) {\n                            day = this.monthDays['kronolithMonthDay' + date.dateString()];\n                            more = day.select('.kronolithMore');\n                            events = day.select('.kronolithEvent');\n                            if (more.size() &&\n                                events.size() < Kronolith.conf.max_events) {\n                                more[0].purge();\n                                more[0].remove();\n                                events.invoke('remove');\n                                calendars.each(function(calendar) {\n                                    this.insertEvents([date, date], 'month', calendar);\n                                }, this);\n                            }\n                        }\n                    } else {\n                        this.insertEvents(dates, 'month', type + '|' + calendar);\n                    }\n                } else {\n                    allEvents.invoke('toggle');\n                }\n            }\n            break;\n\n        case 'year':\n        case 'week':\n        case 'day':\n            if (Object.isUndefined(this.ecache.get(type)) ||\n                Object.isUndefined(this.ecache.get(type).get(calendar))) {\n                this.loadCalendar(type, calendar);\n            } else {\n                this.insertEvents(this.viewDates(this.date, this.view), this.view);\n            }\n            break;\n\n        case 'tasks':\n            if (type != 'tasklists') {\n                break;\n            }\n            var tasklist = calendar.substr(6);\n            if (elt.hasClassName('kronolithCalOff')) {\n                $('kronolithViewTasksBody').select('tr').findAll(function(el) {\n                    return el.retrieve('tasklist') == tasklist;\n                }).invoke('remove');\n            } else {\n                this.loadTasks(this.tasktype, [ tasklist ]);\n            }\n            break;\n        }\n\n        if ($w('tasklists remote external holiday').include(type)) {\n            calendar = type + '_' + calendar;\n        }\n        this.doAction('saveCalPref', { toggle_calendar: calendar });\n    },\n\n    /**\n     * Propagates a SELECT drop down list with the editable calendars.\n     *\n     * @param string id  The id of the SELECT element.\n     */\n    updateCalendarDropDown: function(id)\n    {\n        $(id).update();\n        ['internal', 'remote'].each(function(type) {\n            $H(Kronolith.conf.calendars[type]).each(function(cal) {\n                if (cal.value.edit) {\n                    $(id).insert(new Element('option', { value: type + '|' + cal.key })\n                                 .setStyle({ backgroundColor: cal.value.bg, color: cal.value.fg })\n                                 .update(cal.value.name.escapeHTML()));\n                }\n            });\n        });\n    },\n\n    /**\n     * Opens a tab in a form.\n     *\n     * @param Element  The A element of a tab.\n     */\n    openTab: function(elt)\n    {\n        var dialog = elt.up('form'), tab = $(elt.id.replace(/Link/, 'Tab')),\n            field;\n        dialog.select('.kronolithTabsOption').invoke('hide');\n        dialog.select('.tabset li').invoke('removeClassName', 'activeTab');\n        tab.show();\n        elt.up().addClassName('activeTab');\n        if (elt.id == 'kronolithEventLinkMap') {\n            if (!this.mapInitialized) {\n                this.initializeMap();\n            }\n        }\n        field = tab.down('textarea');\n        if (!field) {\n            field = tab.down('input');\n        }\n        if (field) {\n            try {\n                field.focus();\n            } catch (e) {}\n        }\n    },\n\n    /**\n     * Sets the load signature and show the loading spinner.\n     *\n     * @param string resource   The loading resource.\n     * @param string signatrue  The signature for this request.\n     */\n    startLoading: function(resource, signature)\n    {\n        this.eventsLoading[resource] = signature;\n        this.loading++;\n        $('kronolithLoading').show();\n    },\n\n    /**\n     */\n    loadEvents: function(firstDay, lastDay, view, calendars)\n    {\n        var loading = false;\n\n        if (typeof calendars == 'undefined') {\n            calendars = [];\n            $H(Kronolith.conf.calendars).each(function(type) {\n                $H(type.value).each(function(cal) {\n                    if (cal.value.show) {\n                        calendars.push([type.key, cal.key]);\n                    }\n                });\n            });\n        }\n\n        calendars.each(function(cal) {\n            var startDay = firstDay.clone(), endDay = lastDay.clone(),\n                cals = this.ecache.get(cal[0]);\n\n            if (typeof cals != 'undefined' &&\n                typeof cals.get(cal[1]) != 'undefined') {\n                cals = cals.get(cal[1]);\n                while (!Object.isUndefined(cals.get(startDay.dateString())) &&\n                       startDay.isBefore(endDay)) {\n                    if (view != 'year') {\n                        this.insertEvents([startDay, startDay], view, cal.join('|'));\n                    }\n                    startDay.add(1).day();\n                }\n                while (!Object.isUndefined(cals.get(endDay.dateString())) &&\n                       (!startDay.isAfter(endDay))) {\n                    if (view != 'year') {\n                        this.insertEvents([endDay, endDay], view, cal.join('|'));\n                    }\n                    endDay.add(-1).day();\n                }\n                if (startDay.compareTo(endDay) > 0) {\n                    return;\n                }\n            }\n            var start = startDay.dateString(), end = endDay.dateString(),\n                calendar = cal.join('|');\n            loading = true;\n            this.startLoading(calendar, start + end);\n            this.storeCache($H(), calendar, null, true);\n            this.doAction('listEvents',\n                          {\n                              start: start,\n                              end: end,\n                              cal: calendar,\n                              sig: start + end,\n                              view: view\n                          },\n                          function(r) {\n                              this.loadEventsCallback(r, true);\n                          }.bind(this));\n        }, this);\n\n        if (!loading && view == 'year') {\n            this.insertEvents([firstDay, lastDay], 'year');\n        }\n    },\n\n    /**\n     * Callback method for inserting events in the current view.\n     *\n     * @param object r             The ajax response object.\n     * @param boolean createCache  Whether to create a cache list entry for the\n     *                             response, if none exists yet. Useful for\n     *                             (not) adding individual events to the cache\n     *                             if it doesn't match any cached views.\n     */\n    loadEventsCallback: function(r, createCache)\n    {\n        // Hide spinner.\n        this.loading--;\n        if (!this.loading) {\n            $('kronolithLoading').hide();\n        }\n\n        var start = this.parseDate(r.response.sig.substr(0, 8)),\n            end = this.parseDate(r.response.sig.substr(8, 8)),\n            dates = [start, end],\n            currentDates;\n\n        this.storeCache(r.response.events || {}, r.response.cal, dates, createCache);\n\n        // Check if this is the still the result of the most current request.\n        if (r.response.sig != this.eventsLoading[r.response.cal]) {\n            return;\n        }\n        delete this.eventsLoading[r.response.cal];\n\n        // Check if the calendar is still visible.\n        var calendar = r.response.cal.split('|');\n        if (!Kronolith.conf.calendars[calendar[0]][calendar[1]].show) {\n            return;\n        }\n\n        // Check if the result is still for the current view.\n        currentDates = this.viewDates(this.date, this.view);\n        if (r.response.view != this.view ||\n            !start.between(currentDates[0], currentDates[1])) {\n\n            return;\n        }\n\n        if (this.view == 'day' ||\n            this.view == 'week' ||\n            this.view == 'month' ||\n            this.view == 'agenda' ||\n            (this.view == 'year' && !$H(this.eventsLoading).size())) {\n            this.insertEvents(dates, this.view, r.response.cal);\n        }\n    },\n\n    /**\n     * Reads events from the cache and inserts them into the view.\n     *\n     * If inserting events into day and week views, the calendar parameter is\n     * ignored, and events from all visible calendars are inserted instead.\n     * This is necessary because the complete view has to be re-rendered if\n     * events are not in chronological order.\n     * The year view is specially handled too because there are no individual\n     * events, only a summary of all events per day.\n     *\n     * @param Array dates      Start and end of dates to process.\n     * @param string view      The view to update.\n     * @param string calendar  The calendar to update.\n     */\n    insertEvents: function(dates, view, calendar)\n    {\n        switch (view) {\n        case 'day':\n        case 'week':\n            // The day and week views require the view to be completely\n            // loaded, to correctly calculate the dimensions.\n            if (this.viewLoading.size() || this.view != view) {\n                this.insertEvents.bind(this, [dates[0].clone(), dates[1].clone()], view, calendar).defer();\n                return;\n            }\n            break;\n        }\n\n        var day = dates[0].clone(),\n                  viewDates = this.viewDates(this.date, this.view),\n                  date, more, title, busy, events, monthDay;\n        while (!day.isAfter(dates[1])) {\n            // Skip if somehow events slipped in though the view is gone.\n            if (!day.between(viewDates[0], viewDates[1])) {\n                if (window.console) {\n                    window.console.trace();\n                }\n                day.next().day();\n                continue;\n            }\n\n            date = day.dateString();\n            switch (view) {\n            case 'day':\n            case 'week':\n                this.dayEvents = [];\n                this.dayGroups = [];\n                this.allDayEvents = [];\n                if (view == 'day') {\n                    $$('.kronolithEvent').invoke('remove');\n                } else {\n                    this.eventsWeek['kronolithEventsWeek' + date]\n                        .select('.kronolithEvent')\n                        .invoke('remove');\n                    this.allDays['kronolithAllDay' + date]\n                        .childElements()\n                        .invoke('remove');\n                }\n                break;\n\n            case 'month':\n                monthDay = this.monthDays['kronolithMonthDay' + date];\n                monthDay.select('div')\n                    .findAll(function(el) { return el.retrieve('calendar') == calendar; })\n                    .invoke('remove');\n                break;\n\n            case 'year':\n                title = '';\n                busy = false;\n            }\n\n            if (view == 'month' || view == 'agenda') {\n                events = this.getCacheForDate(date, calendar);\n            } else {\n                events = this.getCacheForDate(date);\n            }\n            events.sortBy(this.sortEvents).each(function(event) {\n                switch (view) {\n                case 'month':\n                case 'agenda':\n                    if (calendar.startsWith('holiday|')) {\n                        if (this.holidays.include(event.key)) {\n                            return;\n                        }\n                        this.holidays.push(event.key);\n                    }\n                    if (view == 'month' && Kronolith.conf.max_events) {\n                        more = monthDay.down('.kronolithMore');\n                        if (more) {\n                            more.purge();\n                            more.remove();\n                        }\n                    }\n                    if (view == 'month' && Kronolith.conf.max_events) {\n                        var events = monthDay.select('.kronolithEvent');\n                        if (events.size() >= Kronolith.conf.max_events) {\n                            if (date == (new Date().dateString())) {\n                                // This is today.\n                                if (event.value.al || event.value.end.isBefore()) {\n                                    // No room for all-day or finished events.\n                                    this.insertMore(date);\n                                    return;\n                                }\n                                var remove, max;\n                                // Find an event that is earlier than now or\n                                // later then the current event.\n                                events.each(function(elm) {\n                                    var calendar = elm.retrieve('calendar').split('|'),\n                                        event = this.ecache.get(calendar[0]).get(calendar[1]).get(date).get(elm.retrieve('eventid'));\n                                    if (event.start.isBefore()) {\n                                        remove = elm;\n                                        throw $break;\n                                    }\n                                    if (!max || event.start.isAfter(max)) {\n                                        max = event.start;\n                                        remove = elm;\n                                    }\n                                }, this);\n                                if (remove) {\n                                    remove.purge();\n                                    remove.remove();\n                                } else {\n                                    this.insertMore(date);\n                                    return;\n                                }\n                            } else {\n                                // Not today.\n                                var allDays = events.findAll(function(elm) {\n                                    var calendar = elm.retrieve('calendar').split('|');\n                                    return this.ecache.get(calendar[0]).get(calendar[1]).get(date).get(elm.retrieve('eventid')).al;\n                                }.bind(this));\n                                if (event.value.al) {\n                                    // We want one all-day event.\n                                    if (allDays.size()) {\n                                        // There already is an all-day event.\n                                        if (event.value.x == Kronolith.conf.status.confirmed ||\n                                            event.value.x == Kronolith.conf.status.tentative) {\n                                            // But is there a less important\n                                            // one?\n                                            var status = [Kronolith.conf.status.free, Kronolith.conf.status.cancelled];\n                                            if (event.value.x == Kronolith.conf.status.confirmed) {\n                                                status.push(Kronolith.conf.status.tentative);\n                                            }\n                                            var free = allDays.detect(function(elm) {\n                                                var calendar = elm.retrieve('calendar').split('|');\n                                                return status.include(this.ecache.get(calendar[0]).get(calendar[1]).get(date).get(elm.retrieve('eventid')).x);\n                                            }.bind(this));\n                                            if (!free) {\n                                                this.insertMore(date);\n                                                return;\n                                            }\n                                            free.purge();\n                                            free.remove();\n                                        } else {\n                                            // No.\n                                            this.insertMore(date);\n                                            return;\n                                        }\n                                    } else {\n                                        // Remove the last event to make room\n                                        // for this one.\n                                        var elm = events.pop();\n                                        elm.purge();\n                                        elm.remove();\n                                    }\n                                } else {\n                                    if (allDays.size() > 1) {\n                                        // We don't want more than one all-day\n                                        // event.\n                                        var elm = allDays.pop();\n                                        elm.purge();\n                                        elm.remove();\n                                    } else {\n                                        // This day is full.\n                                        this.insertMore(date);\n                                        return;\n                                    }\n                                }\n                            }\n                            this.insertMore(date);\n                        }\n                    }\n                    break;\n\n                case 'year':\n                    if (event.value.al) {\n                        title += Kronolith.text.allday;\n                    } else {\n                        title += event.value.start.toString('t') + '-' + event.value.end.toString('t');\n                    }\n                    if (event.value.t) {\n                        title += ': ' + event.value.t.escapeHTML();\n                    }\n                    if (event.value.x == Kronolith.conf.status.tentative ||\n                        event.value.x == Kronolith.conf.status.confirmed) {\n                        busy = true;\n                    }\n                    title += '<br />';\n                    return;\n                }\n                this.insertEvent(event, date, view);\n            }, this);\n\n            switch (view) {\n            case 'agenda':\n                if ($('kronolithViewAgendaBody').select('tr').length > 2) {\n                    $('kronolithAgendaNoItems').hide();\n                } else {\n                    $('kronolithAgendaNoItems').show();\n                }\n                break;\n\n            case 'year':\n                var td = $('kronolithYear' + date);\n                if (td.className == 'kronolithMinicalEmpty') {\n                    continue;\n                }\n                if (td.hasClassName('kronolithToday')) {\n                    td.className = 'kronolithToday';\n                } else {\n                    td.className = '';\n                }\n                if (td.retrieve('nicetitle')) {\n                    Horde_ToolTips.detach(td);\n                    td.store('nicetitle');\n                }\n                if (title) {\n                    td.addClassName('kronolithHasEvents');\n                    td.store('nicetitle', title);\n                    td.observe('mouseover', Horde_ToolTips.onMouseover.bindAsEventListener(Horde_ToolTips));\n                    td.observe('mouseout', Horde_ToolTips.out.bind(Horde_ToolTips));\n                    if (busy) {\n                        td.addClassName('kronolithIsBusy');\n                    }\n                }\n            }\n\n            day.next().day();\n        }\n        // Workaround Firebug bug.\n        Prototype.emptyFunction();\n    },\n\n    /**\n     * Creates the DOM node for an event bubble and inserts it into the view.\n     *\n     * @param object event  A Hash member with the event to insert.\n     * @param string date   The day to update.\n     * @param string view   The view to update.\n     */\n    insertEvent: function(event, date, view)\n    {\n        var calendar = event.value.calendar.split('|');\n        event.value.nodeId = ('kronolithEvent' + view + event.value.calendar + date + event.key).replace(new RegExp('[^a-zA-Z0-9]', 'g'), '');\n\n        var _createElement = function(event) {\n            var className ='kronolithEvent';\n            switch (event.value.x) {\n            case 3:\n                className += ' kronolithEventCancelled';\n                break;\n            case 1:\n            case 4:\n                className += ' kronolithEventTentative';\n                break;\n            }\n            var el = new Element('div', { id: event.value.nodeId, className: className })\n                .store('calendar', event.value.calendar)\n                .store('eventid', event.key);\n            if (!Object.isUndefined(event.value.aj)) {\n                el.store('ajax', event.value.aj);\n            }\n            return el;\n        };\n\n        switch (view) {\n        case 'day':\n        case 'week':\n            var storage = view + 'Sizes',\n                div = _createElement(event),\n                margin = view == 'day' ? 1 : 3,\n                style = { backgroundColor: Kronolith.conf.calendars[calendar[0]][calendar[1]].bg,\n                          color: Kronolith.conf.calendars[calendar[0]][calendar[1]].fg };\n\n            div.writeAttribute('title', event.value.t);\n\n            if (event.value.al) {\n                if (view == 'day') {\n                    $('kronolithViewDay').down('.kronolithAllDayContainer').insert(div.setStyle(style));\n                } else {\n                    var allDay = this.allDays['kronolithAllDay' + date],\n                        existing = allDay.childElements(),\n                        weekHead = $('kronolithViewWeekHead');\n                    if (existing.size() == 3) {\n                        if (existing[2].className != 'kronolithMore') {\n                            existing[2].purge();\n                            existing[2].remove();\n                            allDay.insert({ bottom: new Element('span', { className: 'kronolithMore' }).store('date', date).insert(Kronolith.text.more) });\n                        }\n                    } else {\n                        allDay.insert(div.setStyle(style));\n                        if (event.value.pe) {\n                            div.addClassName('kronolithEditable');\n                            var layout = div.getLayout(),\n                                minLeft = weekHead.down('.kronolithFirstCol').getWidth() + this[storage].spacing + (parseInt(div.getStyle('marginLeft'), 10) || 0),\n                                minTop = weekHead.down('thead').getHeight() + this[storage].spacing + (parseInt(div.getStyle('marginTop'), 10) || 0),\n                                maxLeft = weekHead.getWidth() - layout.get('margin-box-width'),\n                                maxTop = weekHead.down('thead').getHeight() + weekHead.down('.kronolithAllDay').getHeight(),\n                                opts = {\n                                    threshold: 5,\n                                    parentElement: function() {\n                                        return $('kronolithViewWeek').down('.kronolithViewHead');\n                                    },\n                                    snap: function(x, y) {\n                                        return [Math.min(Math.max(x, minLeft), maxLeft),\n                                                Math.min(Math.max(y, minTop), maxTop - div.getHeight())];\n                                    }\n                                };\n                            new Drag(event.value.nodeId, opts);\n                        }\n                    }\n                }\n                break;\n            }\n\n            var midnight = this.parseDate(date),\n                resizable = event.value.pe && (Object.isUndefined(event.value.vl) || event.value.vl),\n                innerDiv = new Element('div', { className: 'kronolithEventInfo' }),\n                parentElement = view == 'day' ? $('kronolithEventsDay') : this.eventsWeek['kronolithEventsWeek' + date],\n                elapsed = (event.value.start.getHours() - midnight.getHours()) * 60 + (event.value.start.getMinutes() - midnight.getMinutes()),\n                minHeight = 0,\n                draggerTop, draggerBottom;\n            if (event.value.fi) {\n                div.addClassName('kronolithFirst');\n                if (resizable) {\n                    draggerTop = new Element('div', { id: event.value.nodeId + 'top', className: 'kronolithDragger kronolithDraggerTop' }).setStyle(style);\n                }\n            } else {\n                innerDiv.setStyle({ top: 0 });\n            }\n            if (event.value.la) {\n                div.addClassName('kronolithLast');\n                if (resizable) {\n                    draggerBottom = new Element('div', { id: event.value.nodeId + 'bottom', className: 'kronolithDragger kronolithDraggerBottom' }).setStyle(style);\n                }\n            } else {\n                innerDiv.setStyle({ bottom: 0 });\n            }\n\n            div.setStyle({\n                top: (elapsed * this[storage].height / 60 | 0) + 'px',\n                width: 100 - margin + '%'\n            })\n                .insert(innerDiv.setStyle(style));\n            if (draggerTop) {\n                div.insert(draggerTop);\n            }\n            if (draggerBottom) {\n                div.insert(draggerBottom);\n            }\n            parentElement.insert(div);\n            if (draggerTop) {\n                minHeight += draggerTop.getHeight();\n            }\n            if (draggerBottom) {\n                minHeight += draggerBottom.getHeight();\n            }\n            if (!minHeight) {\n                minHeight = parseInt(innerDiv.getStyle('lineHeight'), 10)\n                    + (parseInt(innerDiv.getStyle('paddingTop'), 10) || 0)\n                    + (parseInt(innerDiv.getStyle('paddingBottom'), 10) || 0);\n            }\n            div.setStyle({ height: Math.max(Math.round(event.value.start.getElapsed(event.value.end) / 60000) * this[storage].height / 60 - this[storage].spacing | 0, minHeight) + 'px' });\n\n            if (event.value.pe) {\n                div.addClassName('kronolithEditable');\n                div.store('drags', []);\n                // Number of pixels that cover 10 minutes.\n                var step = this[storage].height / 6,\n                    stepX, minLeft, maxLeft, maxTop,\n                    minBottom, maxBottom, dragBottomHeight;\n                if (draggerBottom) {\n                    // Height of bottom dragger\n                    dragBottomHeight = draggerBottom.getHeight();\n                }\n                if (draggerTop) {\n                    // Bottom-most position (maximum y) of top dragger\n                    maxTop = div.offsetTop\n                        - draggerTop.getHeight()\n                        - parseInt(innerDiv.getStyle('lineHeight'), 10);\n                    if (draggerBottom) {\n                        maxTop += draggerBottom.offsetTop;\n                    }\n                }\n                if (draggerBottom) {\n                    // Top-most position (minimum y) of bottom dragger (upper\n                    // edge)\n                    minBottom = div.offsetTop\n                        + parseInt(innerDiv.getStyle('lineHeight'), 10);\n                    // Bottom-most position (maximum y) of bottom dragger\n                    // (upper edge)\n                    maxBottom = 24 * this[storage].height\n                        + dragBottomHeight;\n                    if (draggerTop) {\n                        minBottom += draggerTop.getHeight();\n                    }\n                }\n                    // Height of the whole event div\n                var divHeight = div.getHeight(),\n                    // Maximum height of the whole event div\n                    maxDiv = 24 * this[storage].height - divHeight,\n                    // Whether the top dragger is dragged, vs. the bottom\n                    // dragger\n                    opts = {\n                        threshold: 5,\n                        constraint: 'vertical',\n                        scroll: this.kronolithBody,\n                        nodrop: true,\n                        parentElement: function() {\n                            return parentElement;\n                        }\n                    };\n\n                if (draggerTop) {\n                    opts.snap = function(x, y) {\n                        y = Math.max(0, step * (Math.min(maxTop, y - this.scrollTop) / step | 0));\n                        return [0, y];\n                    }.bind(this);\n                    var d = new Drag(event.value.nodeId + 'top', opts);\n                    Object.extend(d, {\n                        event: event,\n                        innerDiv: innerDiv,\n                        midnight: midnight\n                    });\n                    div.retrieve('drags').push(d);\n                }\n\n                if (draggerBottom) {\n                    opts.snap = function(x, y) {\n                        y = Math.min(maxBottom + dragBottomHeight + KronolithCore[storage].spacing, step * ((Math.max(minBottom, y - this.scrollTop) + dragBottomHeight + KronolithCore[storage].spacing) / step | 0)) - dragBottomHeight - KronolithCore[storage].spacing;\n                        return [0, y];\n                    }.bind(this);\n                    var d = new Drag(event.value.nodeId + 'bottom', opts);\n                    Object.extend(d, {\n                        event: event,\n                        innerDiv: innerDiv,\n                        midnight: midnight\n                    });\n                    div.retrieve('drags').push(d);\n                }\n\n                if (view == 'week') {\n                    var dates = this.viewDates(midnight, view);\n                    minLeft = this.eventsWeek['kronolithEventsWeek' + dates[0].dateString()].offsetLeft - this.eventsWeek['kronolithEventsWeek' + date].offsetLeft;\n                    maxLeft = this.eventsWeek['kronolithEventsWeek' + dates[1].dateString()].offsetLeft - this.eventsWeek['kronolithEventsWeek' + date].offsetLeft;\n                    stepX = (maxLeft - minLeft) / 6;\n                }\n                var d = new Drag(div, {\n                    threshold: 5,\n                    nodrop: true,\n                    parentElement: function() { return parentElement; },\n                    snap: function(x, y) {\n                        x = (view == 'week')\n                            ? Math.max(minLeft, stepX * ((Math.min(maxLeft, x - (x < 0 ? stepX : 0)) + stepX / 2) / stepX | 0))\n                            : 0;\n                        y = Math.max(0, step * (Math.min(maxDiv, y - this.scrollTop) / step | 0));\n                        return [x, y];\n                    }.bind(this)\n                });\n                Object.extend(d, {\n                    divHeight: divHeight,\n                    startTop: div.offsetTop,\n                    event: event,\n                    midnight: midnight,\n                    stepX: stepX\n                });\n                div.retrieve('drags').push(d);\n            }\n\n            var\n                // The current column that we're probing for available space.\n                column = 1,\n                // The number of columns in the current conflict group.\n                columns,\n                // The column width in the current conflict group.\n                width,\n                // The first event that conflict with the current event.\n                conflict = false,\n                // The conflict group where this event should go.\n                pos = this.dayGroups.length,\n                // The event below the current event fits.\n                placeFound = false,\n                // The minimum (virtual) duration of each event, defined by the\n                // minimum height of an event DIV.\n                minMinutes = (minHeight + this[storage].spacing) * 60 / this[storage].height;\n\n            // this.dayEvents contains all events of the current day.\n            // this.dayGroups contains conflict groups, i.e. all events that\n            // conflict with each other and share a set of columns.\n            //\n            // Go through all events that have been added to this day already.\n            this.dayEvents.each(function(ev) {\n                // Due to the minimum height of an event DIV, events might\n                // visually overlap, even if they physically don't.\n                var minEnd = ev.start.clone().add(minMinutes).minutes(),\n                    end = ev.end.isAfter(minEnd) ? ev.end : minEnd;\n                // If it doesn't conflict with the current event, rember it\n                // as a possible event below that we can put the current event\n                // and go ahead.\n                if (!end.isAfter(event.value.start)) {\n                    placeFound = ev;\n                    return;\n                }\n\n                if (!conflict) {\n                    // This is the first conflicting event.\n                    conflict = ev;\n                    for (var i = 0; i < this.dayGroups.length; i++) {\n                        // Find the conflict group of the conflicting event.\n                        if (this.dayGroups[i].indexOf(conflict) != -1) {\n                            // If our possible candidate \"above\" is a member of\n                            // this group, it's no longer a candidate.\n                            if (this.dayGroups[i].indexOf(placeFound) == -1) {\n                                placeFound = false;\n                            }\n                            break;\n                        }\n                    }\n                }\n                // We didn't find a place, put the event a column further right.\n                if (!placeFound) {\n                    column++;\n                }\n            }, this);\n            event.value.column = column;\n\n            if (conflict) {\n                // We had a conflict, find the matching conflict group and add\n                // the current event there.\n                for (var i = 0; i < this.dayGroups.length; i++) {\n                    if (this.dayGroups[i].indexOf(conflict) != -1) {\n                        pos = i;\n                        break;\n                    }\n                }\n                // See if the current event had to add yet another column.\n                columns = Math.max(conflict.columns, column);\n            } else {\n                columns = column;\n            }\n            if (Object.isUndefined(this.dayGroups[pos])) {\n                this.dayGroups[pos] = [];\n            }\n            this.dayGroups[pos].push(event.value);\n            // Update the widths of all events in a conflict group.\n            width = 100 / columns;\n            this.dayGroups[pos].each(function(ev) {\n                ev.columns = columns;\n                $(ev.nodeId).setStyle({ width: width - margin + '%', left: (width * (ev.column - 1)) + '%' });\n            });\n            this.dayEvents.push(event.value);\n\n            div = innerDiv;\n            break;\n\n        case 'month':\n            var monthDay = this.monthDays['kronolithMonthDay' + date],\n                div = _createElement(event)\n                .setStyle({ backgroundColor: Kronolith.conf.calendars[calendar[0]][calendar[1]].bg,\n                            color: Kronolith.conf.calendars[calendar[0]][calendar[1]].fg });\n            div.writeAttribute('title', event.value.t);\n            monthDay.insert(div);\n            if (event.value.pe) {\n                div.setStyle({ cursor: 'move' });\n                new Drag(event.value.nodeId, { threshold: 5, parentElement: function() { return $('kronolithViewMonthContainer'); }, snapToParent: true });\n            }\n            if (Kronolith.conf.max_events) {\n                var more = monthDay.down('.kronolithMore');\n                if (more) {\n                    monthDay.insert({ bottom: more.remove() });\n                }\n            }\n            break;\n\n        case 'agenda':\n            var div = _createElement(event)\n                .setStyle({ backgroundColor: Kronolith.conf.calendars[calendar[0]][calendar[1]].bg,\n                            color: Kronolith.conf.calendars[calendar[0]][calendar[1]].fg });\n            this.createAgendaDay(date);\n            $('kronolithAgendaDay' + date).insert(div);\n            break;\n        }\n\n        this.setEventText(div, event.value,\n                          { time: view == 'agenda' || Kronolith.conf.show_time })\n            .observe('mouseover', div.addClassName.curry('kronolithSelected'))\n            .observe('mouseout', div.removeClassName.curry('kronolithSelected'));\n    },\n\n    /**\n     * Re-renders the necessary parts of the current view, if any event changes\n     * in those parts require re-rendering.\n     *\n     * @param Array dates  The date strings of days to re-render.\n     */\n    reRender: function(dates)\n    {\n        switch (this.view) {\n        case 'week':\n        case 'day':\n            dates.each(function(date) {\n                date = this.parseDate(date);\n                this.insertEvents([ date, date ], this.view);\n            }, this);\n            break;\n        case 'month':\n            dates.each(function(date) {\n                var day = this.monthDays['kronolithMonthDay' + date];\n                day.select('.kronolithEvent').each(function(event) {\n                    if (event.retrieve('calendar').startsWith('holiday')) {\n                        delete this.holidays[event.retrieve('eventid')];\n                    }\n                    event.remove();\n                });\n                day.select('.kronolithMore').invoke('remove');\n                date = this.parseDate(date);\n                this.loadEvents(date, date, 'month');\n            }, this);\n            break;\n        }\n    },\n\n    /**\n     * Returns all dates of the current view that contain (recurrences) of a\n     * certain event.\n     *\n     * @param String cal      A calendar string.\n     * @param String eventid  An event id.\n     *\n     * @return Array  A list of date strings that contain a recurrence of the\n     *                event.\n     */\n    findEventDays: function(cal, eventid)\n    {\n        cal = cal.split('|');\n        var cache = this.ecache.get(cal[0]).get(cal[1]),\n            dates = this.viewDates(this.date, this.view),\n            day = dates[0], days = [], dateString;\n        while (!day.isAfter(dates[1])) {\n            dateString = day.dateString();\n            if (cache.get(dateString).get(eventid)) {\n                days.push(dateString);\n            }\n            day.add(1).days();\n        }\n        return days;\n    },\n\n    /**\n     * Adds a \"more...\" button to the month view cell that links to the days,\n     * or moves it to the buttom.\n     *\n     * @param string date  The date string of the day cell.\n     */\n    insertMore: function(date)\n    {\n        var monthDay = this.monthDays['kronolithMonthDay' + date],\n            more = monthDay.down('.kronolithMore');\n        if (more) {\n            monthDay.insert({ bottom: more.remove() });\n        } else {\n            monthDay.insert({ bottom: new Element('span', { className: 'kronolithMore' }).store('date', date).insert(Kronolith.text.more) });\n        }\n    },\n\n    setEventText: function(div, event, opts)\n    {\n        var calendar = event.calendar.split('|'),\n            span = new Element('span');\n        opts = Object.extend({ time: false }, opts || {}),\n\n        div.update();\n        if (event.ic) {\n            div.insert(new Element('img', { src: event.ic, className: 'kronolithEventIcon' }));\n        }\n        if (opts.time && !event.al) {\n            div.insert(event.start.toString(Kronolith.conf.time_format));\n            if (!event.start.equals(event.end)) {\n                div.insert('-' + event.end.toString(Kronolith.conf.time_format));\n            }\n            div.insert(': ');\n        }\n        div.insert(event.t.escapeHTML());\n        div.insert(span);\n        if (event.a) {\n            span.insert(' ')\n                .insert(new Element('img', { src: Kronolith.conf.images.alarm.replace(/fff/, Kronolith.conf.calendars[calendar[0]][calendar[1]].fg.substr(1)), title: Kronolith.text.alarm + ' ' + event.a }));\n        }\n        if (event.r) {\n            span.insert(' ')\n                .insert(new Element('img', { src: Kronolith.conf.images.recur.replace(/fff/, Kronolith.conf.calendars[calendar[0]][calendar[1]].fg.substr(1)), title: Kronolith.text.recur[event.r] }));\n        } else if (event.bid) {\n            div.store('bid', event.bid);\n            span.insert(' ')\n                .insert(new Element('img', { src: Kronolith.conf.images.exception.replace(/fff/, Kronolith.conf.calendars[calendar[0]][calendar[1]].fg.substr(1)), title: Kronolith.text.recur.exception }));\n        }\n        return div;\n    },\n\n    /**\n     * Finally removes events from the DOM and the cache.\n     *\n     * @param string calendar  A calendar name.\n     * @param string event     An event id. If empty, all events from the\n     *                         calendar are deleted.\n     */\n    removeEvent: function(calendar, event)\n    {\n        this.deleteCache(calendar, event);\n        this.kronolithBody.select('div.kronolithEvent').findAll(function(el) {\n            return el.retrieve('calendar') == calendar &&\n                (!event || el.retrieve('eventid') == event);\n        }).invoke('remove');\n    },\n\n    removeException: function(calendar, uid)\n    {\n        this.kronolithBody.select('div.kronolithEvent').findAll(function(el) {\n            if (el.retrieve('calendar') == calendar && el.retrieve('bid') == uid) {\n                this.removeEvent(calendar, el.retrieve('eventid'));\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Calculates the event's start and end dates based on some drag and drop\n     * information.\n     */\n    calculateEventDates: function(event, storage, step, offset, height, start, end)\n    {\n        if (!Object.isUndefined(start)) {\n            event.start = start;\n            event.end = end;\n        }\n        event.start.set({\n            hour: offset / this[storage].height | 0,\n            minute: Math.round(offset % this[storage].height / step * 10)\n        });\n        var hour = (offset + height + this[storage].spacing) / this[storage].height | 0,\n            minute = Math.round((offset + height + this[storage].spacing) % this[storage].height / step * 10),\n            second = 0;\n        if (hour == 24) {\n            hour = 23;\n            minute = 59;\n            second = 59;\n        }\n        event.end.set({\n            hour: hour,\n            minute: minute,\n            second: second\n        });\n    },\n\n    /**\n     * Returns the task cache storage names that hold the tasks of the\n     * requested task type.\n     *\n     * @param string tasktype  The task type.\n     *\n     * @return array  The list of task cache storage names.\n     */\n    getTaskStorage: function(tasktype)\n    {\n        var tasktypes;\n        if (tasktype == 'all' || tasktype == 'future') {\n            tasktypes = [ 'complete', 'incomplete' ];\n        } else {\n            tasktypes = [ tasktype ];\n        }\n        return tasktypes;\n    },\n\n    /**\n     * Loads tasks, either from cache or from the server.\n     *\n     * @param integer tasktype  The tasks type (all, incomplete, complete, or\n     *                          future).\n     * @param Array tasksLists  The lists from where to obtain the tasks.\n     */\n    loadTasks: function(tasktype, tasklists)\n    {\n        var tasktypes = this.getTaskStorage(tasktype), loading = false,\n            spinner = $('kronolithLoading');\n\n        if (Object.isUndefined(tasklists)) {\n            tasklists = [];\n            $H(Kronolith.conf.calendars.tasklists).each(function(tasklist) {\n                if (tasklist.value.show)\n                {\n                    tasklists.push(tasklist.key.substring(6));\n                }\n            });\n        }\n\n        tasktypes.each(function(type) {\n            tasklists.each(function(list) {\n                if (Object.isUndefined(this.tcache.get(type)) ||\n                    Object.isUndefined(this.tcache.get(type).get(list))) {\n                    loading = true;\n                    this.loading++;\n                    spinner.show();\n                    this.doAction('listTasks',\n                                  { type: type,\n                                    list: list },\n                                  function(r) {\n                                      this.loadTasksCallback(r, true);\n                                  }.bind(this));\n                }\n            }, this);\n        }, this);\n\n        if (!loading) {\n            tasklists.each(function(list) {\n                this.insertTasks(tasktype, list);\n            }, this);\n        }\n    },\n\n    /**\n     * Callback method for inserting tasks in the current view.\n     *\n     * @param object r             The ajax response object.\n     * @param boolean createCache  Whether to create a cache list entry for the\n     *                             response, if none exists yet. Useful for\n     *                             (not) adding individual tasks to the cache\n     *                             without assuming to have all tasks of the\n     *                             list.\n     */\n    loadTasksCallback: function(r, createCache)\n    {\n        // Hide spinner.\n        this.loading--;\n        if (!this.loading) {\n            $('kronolithLoading').hide();\n        }\n\n        this.storeTasksCache(r.response.tasks || {}, r.response.type, r.response.list, createCache);\n        if (Object.isUndefined(r.response.tasks)) {\n            return;\n        }\n\n        // Check if result is still valid for the current view.\n        // There could be a rare race condition where two responses for the\n        // same task(s) arrive in the wrong order. Checking this too, like we\n        // do for events seems not worth it.\n        var tasktypes = this.getTaskStorage(this.tasktype),\n            tasklist = Kronolith.conf.calendars.tasklists['tasks/' + r.response.list];\n        if (this.view != 'tasks' ||\n            !tasklist || !tasklist.show ||\n            !tasktypes.include(r.response.type)) {\n            return;\n        }\n        this.insertTasks(this.tasktype, r.response.list);\n    },\n\n    /**\n     * Reads tasks from the cache and inserts them into the view.\n     *\n     * @param integer tasktype  The tasks type (all, incomplete, complete, or\n     *                          future).\n     * @param string tasksList  The task list to be drawn.\n     */\n    insertTasks: function(tasktype, tasklist)\n    {\n        var tasktypes = this.getTaskStorage(tasktype), now = new Date();\n\n        $('kronolithViewTasksBody').select('tr').findAll(function(el) {\n            return el.retrieve('tasklist') == tasklist;\n        }).invoke('remove');\n\n        tasktypes.each(function(type) {\n            if (!this.tcache.get(type)) {\n                return;\n            }\n            var tasks = this.tcache.get(type).get(tasklist);\n            $H(tasks).each(function(task) {\n                switch (tasktype) {\n                case 'complete':\n                    if (!task.value.cp ||\n                        (!Object.isUndefined(task.value.start) &&\n                         task.value.start.isAfter(now))) {\n                        return;\n                    }\n                    break;\n                case 'incomplete':\n                    if (task.value.cp ||\n                        (!Object.isUndefined(task.value.start) &&\n                         task.value.start.isAfter(now))) {\n                        return;\n                    }\n                    break;\n                case 'future':\n                    if (Object.isUndefined(task.value.start) ||\n                        !task.value.start.isAfter(now)) {\n                        return;\n                    }\n                    break;\n                }\n                this.insertTask(task);\n            }, this);\n        }, this);\n\n        if ($('kronolithViewTasksBody').select('tr').length > 3) {\n            $('kronolithTasksNoItems').hide();\n        } else {\n            $('kronolithTasksNoItems').show();\n        }\n    },\n\n    /**\n     * Creates the DOM node for a task and inserts it into the view.\n     *\n     * @param object task  A Hash with the task to insert\n     */\n    insertTask: function(task)\n    {\n        var row = $('kronolithTasksTemplate').clone(true),\n            col = row.down();\n\n        row.removeAttribute('id');\n        row.store('tasklist', task.value.l);\n        row.store('taskid', task.key);\n        col.addClassName('kronolithTask' + (!!task.value.cp ? 'Completed' : ''));\n        col.insert(task.value.n.escapeHTML());\n        if (!Object.isUndefined(task.value.due)) {\n            var now = new Date();\n            if (!now.isBefore(task.value.due)) {\n                col.addClassName('kronolithTaskDue');\n            }\n            col.insert(new Element('span', { className: 'kronolithSeparator' }).update(' &middot; '));\n            col.insert(new Element('span', { className: 'kronolithDate' }).update(task.value.due.toString(Kronolith.conf.date_format)));\n        }\n\n        if (!Object.isUndefined(task.value.sd)) {\n            col.insert(new Element('span', { className: 'kronolithSeparator' }).update(' &middot; '));\n            col.insert(new Element('span', { className: 'kronolithInfo' }).update(task.value.sd.escapeHTML()));\n        }\n\n        row.insert(col.show());\n        this.insertTaskPosition(row, task);\n    },\n\n    /**\n     * Inserts the task row in the correct position.\n     *\n     * @param Element newRow  The new row to be inserted.\n     * @param object newTask  A Hash with the task being added.\n     */\n    insertTaskPosition: function(newRow, newTask)\n    {\n        var rows = $('kronolithViewTasksBody').select('tr');\n        // The first row is the add task row, the second a template, ignoring.\n        for (var i = 3; i < rows.length; i++) {\n            var rowTasklist = rows[i].retrieve('tasklist');\n            var rowTaskId = rows[i].retrieve('taskid');\n            var rowTask = this.tcache.inject(null, function(acc, list) {\n                if (acc) {\n                    return acc;\n                }\n                if (!Object.isUndefined(list.value.get(rowTasklist))) {\n                    return list.value.get(rowTasklist).get(rowTaskId);\n                }\n            });\n\n            if (Object.isUndefined(rowTask)) {\n                // TODO: Throw error\n                return;\n            }\n            if (!this.isTaskAfter(newTask.value, rowTask)) {\n                break;\n            }\n        }\n        rows[--i].insert({ after: newRow.show() });\n    },\n\n    /**\n     * Analyzes which task should be drawn first.\n     *\n     * TODO: Very incomplete, only a dummy version\n     */\n    isTaskAfter: function(taskA, taskB)\n    {\n        // TODO: Make all ordering system\n        return (taskA.pr >= taskB.pr);\n    },\n\n    /**\n     * Completes/uncompletes a task.\n     *\n     * @param string tasklist  The task list to which the tasks belongs\n     * @param string taskid    The id of the task\n     */\n    toggleCompletion: function(tasklist, taskid)\n    {\n        // Update the cache.\n        var task = this.tcache.inject(null, function(acc, list) {\n            if (acc) {\n                return acc;\n            }\n            if (!Object.isUndefined(list.value.get(tasklist))) {\n                return list.value.get(tasklist).get(taskid);\n            }\n        });\n        if (Object.isUndefined(task)) {\n            // This shouldn't happen.\n            this.toggleCompletionClass(taskid);\n            return;\n        }\n        task.cp = !task.cp;\n\n        if (this.tcache.get(task.cp ? 'complete' : 'incomplete')) {\n            this.tcache.get(task.cp ? 'complete' : 'incomplete').get(tasklist).set(taskid, task);\n        }\n        this.tcache.get(task.cp ? 'incomplete' : 'complete').get(tasklist).unset(taskid);\n\n        // Remove row if necessary.\n        var row = this.getTaskRow(taskid);\n        if (!row) {\n            return;\n        }\n        if ((this.tasktype == 'complete' && !task.cp) ||\n            ((this.tasktype == 'incomplete' || this.tasktype == 'future_incomplete') && task.cp)) {\n            row.fade({\n                duration: this.effectDur,\n                afterFinish: function() {\n                    row.purge();\n                    row.remove();\n                }\n            });\n        }\n    },\n\n    /**\n     * Toggles the CSS class to show that a task is completed/uncompleted.\n     *\n     * @param string taskid  The id of the task.\n     */\n    toggleCompletionClass: function(taskid)\n    {\n        var row = this.getTaskRow(taskid);\n        if (!row) {\n            return;\n        }\n        var col = row.down('td.kronolithTaskCol');\n        col.toggleClassName('kronolithTask');\n        col.toggleClassName('kronolithTaskCompleted');\n    },\n\n    /**\n     * Returns the table row of a task.\n     *\n     * @param string taskid  The id of the task.\n     *\n     * @return Element  The table row of the task list, if found.\n     */\n    getTaskRow: function(taskid)\n    {\n        return $('kronolithViewTasksBody').select('tr').find(function(el) {\n            return el.retrieve('taskid') == taskid;\n        });\n    },\n\n    editTask: function(tasklist, id)\n    {\n        if (this.redBoxLoading) {\n            return;\n        }\n\n        this.closeRedBox();\n        this.quickClose();\n        this.redBoxOnDisplay = RedBox.onDisplay;\n        RedBox.onDisplay = function() {\n            if (this.redBoxOnDisplay) {\n                this.redBoxOnDisplay();\n            }\n            try {\n                $('kronolithTaskForm').focusFirstElement();\n            } catch(e) {}\n            RedBox.onDisplay = this.redBoxOnDisplay;\n        }.bind(this);\n\n        this.openTab($('kronolithTaskForm').down('.tabset a.kronolithTabLink'));\n        $('kronolithTaskForm').enable();\n        $('kronolithTaskForm').reset();\n        $('kronolithTaskSave').show().enable();\n        $('kronolithTaskDelete').show().enable();\n        $('kronolithTaskForm').down('.kronolithFormActions .kronolithSeparator').show();\n        this.updateTasklistDropDown();\n        this.disableAlarmMethods('Task');\n        this.knl.kronolithTaskDueTime.markSelected();\n        if (id) {\n            RedBox.loading();\n            this.doAction('getTask', { list: tasklist, id: id }, this.editTaskCallback.bind(this));\n        } else {\n            $('kronolithTaskId').clear();\n            $('kronolithTaskOldList').clear();\n            $('kronolithTaskList').setValue(Kronolith.conf.tasks.default_tasklist);\n            //$('kronolithTaskLocation').setValue('http://');\n            $('kronolithTaskPriority').setValue(3);\n            if (Kronolith.conf.tasks.default_due) {\n                this.setDefaultDue();\n            }\n            $('kronolithTaskDelete').hide();\n            this.redBoxLoading = true;\n            RedBox.showHtml($('kronolithTaskDialog').show());\n        }\n    },\n\n    /**\n     * Callback method for showing task forms.\n     *\n     * @param object r  The ajax response object.\n     */\n    editTaskCallback: function(r)\n    {\n        if (!r.response.task) {\n            RedBox.close();\n            this.go(this.lastLocation);\n            return;\n        }\n\n        var task = r.response.task;\n\n        /* Basic information */\n        $('kronolithTaskId').setValue(task.id);\n        $('kronolithTaskOldList').setValue(task.l);\n        $('kronolithTaskList').setValue(task.l);\n        $('kronolithTaskTitle').setValue(task.n);\n        //$('kronolithTaskLocation').setValue(task.l);\n        if (task.dd) {\n            $('kronolithTaskDueDate').setValue(task.dd);\n        }\n        if (task.dt) {\n            $('kronolithTaskDueTime').setValue(task.dt);\n            this.knl.kronolithTaskDueTime.setSelected(task.dt);\n        }\n        $('kronolithTaskDescription').setValue(task.de);\n        $('kronolithTaskPriority').setValue(task.pr);\n        $('kronolithTaskCompleted').setValue(task.cp);\n\n        /* Alarm */\n        if (task.a) {\n            this.enableAlarm('Task', task.a);\n            if (task.m) {\n                $('kronolithTaskAlarmDefaultOff').checked = true;\n                $H(task.m).each(function(method) {\n                    if (!$('kronolithTaskAlarm' + method.key)) {\n                        return;\n                    }\n                    $('kronolithTaskAlarm' + method.key).setValue(1);\n                    if ($('kronolithTaskAlarm' + method.key + 'Params')) {\n                        $('kronolithTaskAlarm' + method.key + 'Params').show();\n                    }\n                    $H(method.value).each(function(param) {\n                        var input = $('kronolithTaskAlarmParam' + param.key);\n                        if (!input) {\n                            return;\n                        }\n                        if (input.type == 'radio') {\n                            input.up('form').select('input[type=radio]').each(function(radio) {\n                                if (radio.name == input.name &&\n                                    radio.value == param.value) {\n                                    radio.setValue(1);\n                                    throw $break;\n                                }\n                            });\n                        } else {\n                            input.setValue(param.value);\n                        }\n                    });\n                });\n            }\n        } else {\n            $('kronolithTaskAlarmOff').setValue(true);\n        }\n\n        if (!task.pe) {\n            $('kronolithTaskSave').hide();\n            $('kronolithTaskForm').disable();\n        }\n        if (!task.pd) {\n            $('kronolithTaskDelete').show();\n        }\n        if (!task.pe && !task.pd) {\n            $('kronolithTaskForm').down('.kronolithFormActions .kronolithSeparator').hide();\n        }\n\n        this.setTitle(task.n);\n        this.redBoxLoading = true;\n        RedBox.showHtml($('kronolithTaskDialog').show());\n    },\n\n    /**\n     * Propagates a SELECT drop down list with the editable task lists.\n     *\n     * @param string id  The id of the SELECT element.\n     */\n    updateTasklistDropDown: function()\n    {\n        var tasklist = $('kronolithTaskList');\n        tasklist.update();\n        $H(Kronolith.conf.calendars.tasklists).each(function(cal) {\n            if (cal.value.edit) {\n                tasklist.insert(new Element('option', { value: cal.key.substring(6) })\n                                .setStyle({ backgroundColor: cal.value.bg, color: cal.value.fg })\n                                .update(cal.value.name.escapeHTML()));\n            }\n        });\n    },\n\n    /**\n     * Sets the default due date and time for tasks.\n     */\n    setDefaultDue: function()\n    {\n        if ($F('kronolithTaskDueDate') || $F('kronolithTaskDueTime')) {\n            return;\n        }\n        $('kronolithTaskDueDate').setValue(new Date().add(Kronolith.conf.tasks.default_due_days).days().toString(Kronolith.conf.date_format));\n        if (Kronolith.conf.tasks.default_due_time == 'now') {\n            $('kronolithTaskDueTime').setValue(new Date().toString(Kronolith.conf.time_format));\n        } else {\n            var date = new Date();\n            date.setHours(Kronolith.conf.tasks.default_due_time.replace(/:.*$/, ''));\n            date.setMinutes(0);\n            $('kronolithTaskDueTime').setValue(date.toString(Kronolith.conf.time_format));\n        }\n    },\n\n    /**\n     * Finally removes tasks from the DOM and the cache.\n     *\n     * @param string list  A task list name.\n     * @param string task  A task id. If empty, all tasks from the list are\n     *                     deleted.\n     */\n    removeTask: function(list, task)\n    {\n        this.deleteTasksCache(list, task);\n        $('kronolithViewTasksBody').select('tr').findAll(function(el) {\n            return el.retrieve('tasklist') == list &&\n                (!task || el.retrieve('taskid') == task);\n        }).invoke('remove');\n        this.removeEvent('tasklists|tasks/' + list, task ? '_tasks' + task : null);\n        if ($('kronolithViewTasksBody').select('tr').length > 3) {\n            $('kronolithTasksNoItems').hide();\n        } else {\n            $('kronolithTasksNoItems').show();\n        }\n    },\n\n    /**\n     * Submits the task edit form to create or update a task.\n     */\n    saveTask: function()\n    {\n        if (this.wrongFormat.size()) {\n            this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.fix_form_values }]);\n            return;\n        }\n\n        var tasklist = $F('kronolithTaskOldList'),\n            target = $F('kronolithTaskList'),\n            taskid = $F('kronolithTaskId'),\n            viewDates = this.viewDates(this.date, this.view),\n            start = viewDates[0].dateString(),\n            end = viewDates[1].dateString();\n\n        $('kronolithTaskSave').disable();\n        this.startLoading('tasklists|tasks/' + target, start + end + this.tasktype);\n        this.loading++;\n        $('kronolithLoading').show();\n        this.doAction('saveTask',\n                      $H($('kronolithTaskForm').serialize({ hash: true }))\n                          .merge({\n                              sig: start + end + this.tasktype,\n                              view: this.view,\n                              view_start: start,\n                              view_end: end\n                          }),\n                      function(r) {\n                          if (r.response.tasks && taskid) {\n                              this.removeTask(tasklist, taskid);\n                          }\n                          this.loadTasksCallback(r, false);\n                          this.loadEventsCallback(r, false);\n                          if (r.response.tasks) {\n                              this.closeRedBox();\n                              this.go(this.lastLocation);\n                          } else {\n                              $('kronolithTaskSave').enable();\n                          }\n                      }.bind(this));\n    },\n\n    /**\n     * Opens the form for editing a calendar.\n     *\n     * @param string calendar  Calendar type and calendar id, separated by '|'.\n     */\n    editCalendar: function(calendar)\n    {\n        if (this.redBoxLoading) {\n            return;\n        }\n\n        this.closeRedBox();\n        this.quickClose();\n\n        var type = calendar.split('|')[0], cal = calendar.split('|')[1];\n        if (!$w('internal tasklists remote holiday').include(type)) {\n            return;\n        }\n\n        if (cal &&\n            (Object.isUndefined(Kronolith.conf.calendars[type]) ||\n             Object.isUndefined(Kronolith.conf.calendars[type][cal])) &&\n            (type == 'internal' || type == 'tasklists')) {\n            this.doAction('getCalendar', { type: type, cal: cal }, function(r) {\n                if (r.response.calendar) {\n                    Kronolith.conf.calendars[type][cal] = r.response.calendar;\n                    this.insertCalendarInList(type, cal, r.response.calendar);\n                    $('kronolithSharedCalendars').show();\n                    this.editCalendar(type + '|' + cal);\n                } else {\n                    this.go(this.lastLocation);\n                }\n            }.bind(this));\n            return;\n        }\n\n        this.redBoxOnDisplay = RedBox.onDisplay;\n        RedBox.onDisplay = function() {\n            if (this.redBoxOnDisplay) {\n                this.redBoxOnDisplay();\n            }\n            try {\n                $('kronolithCalendarForm' + type).focusFirstElement();\n            } catch(e) {}\n            RedBox.onDisplay = this.redBoxOnDisplay;\n        }.bind(this);\n\n        if ($('kronolithCalendarDialog')) {\n            this.redBoxLoading = true;\n            RedBox.showHtml($('kronolithCalendarDialog').show());\n            this.editCalendarCallback(calendar);\n        } else {\n            RedBox.loading();\n            this.doAction('chunkContent', { chunk: 'calendar' }, function(r) {\n                if (r.response.chunk) {\n                    this.redBoxLoading = true;\n                    RedBox.showHtml(r.response.chunk);\n                    ['internal', 'tasklists'].each(function(type) {\n                        $('kronolithC' + type + 'PGList').observe('change', function() {\n                            $('kronolithC' + type + 'PG').setValue(1);\n                            this.permsClickHandler(type, 'G');\n                        }.bind(this));\n                    }, this);\n                    this.editCalendarCallback(calendar);\n                } else {\n                    this.closeRedBox();\n                }\n            }.bind(this));\n        }\n    },\n\n    /**\n     * Callback for editing a calendar. Fills the edit form with the correct\n     * values.\n     *\n     * @param string calendar  Calendar type and calendar id, separated by '|'.\n     */\n    editCalendarCallback: function(calendar)\n    {\n        calendar = calendar.split('|');\n        var type = calendar[0];\n        calendar = calendar.length == 1 ? null : calendar[1];\n\n        var form = $('kronolithCalendarForm' + type),\n            firstTab = form.down('.tabset a.kronolithTabLink'),\n            info;\n\n        form.enable();\n        form.reset();\n        if (firstTab) {\n            this.openTab(firstTab);\n        }\n        $('kronolithCalendarDialog').select('.kronolithCalendarDiv').invoke('hide');\n        $('kronolithCalendar' + type + '1').show();\n        form.select('.kronolithCalendarContinue').invoke('enable');\n\n        if (type == 'internal' || type == 'tasklists') {\n        }\n\n        var newCalendar = !calendar;\n        if (calendar &&\n            (Object.isUndefined(Kronolith.conf.calendars[type]) ||\n             Object.isUndefined(Kronolith.conf.calendars[type][calendar]))) {\n            if (type != 'remote') {\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                return;\n            }\n            newCalendar = true;\n        }\n        if (newCalendar) {\n            switch (type) {\n            case 'internal':\n                this.calendarTagAc.reset();\n                // Fall through.\n            case 'tasklists':\n                $('kronolithCalendar' + type + 'LinkExport').up('span').hide();\n                break;\n            case 'remote':\n                if (calendar) {\n                    $('kronolithCalendarremoteUrl').setValue(calendar);\n                    $('kronolithCalendarremoteId').setValue(calendar);\n                }\n                break;\n            case 'holiday':\n                $('kronolithCalendarholidayDriver').update();\n                $H(Kronolith.conf.calendars.holiday).each(function(calendar) {\n                    calendar = calendar.value;\n                    if (calendar.show) {\n                        return;\n                    }\n                    $('kronolithCalendarholidayDriver').insert(\n                        new Element('option', { value: calendar.name })\n                            .setStyle({ color: calendar.fg, backgroundColor: calendar.bg })\n                            .insert(calendar.name.escapeHTML())\n                    );\n                });\n                break;\n            }\n            $('kronolithCalendar' + type + 'Id').clear();\n            var color = '#', i;\n            for (i = 0; i < 3; i++) {\n                color += (Math.random() * 256 | 0).toColorPart();\n            }\n            $('kronolithCalendar' + type + 'Color').setValue(color).setStyle({ backgroundColor: color, color: Color.brightness(Color.hex2rgb(color)) < 125 ? '#fff' : '#000' });\n            form.down('.kronolithCalendarDelete').hide();\n        } else {\n            info = Kronolith.conf.calendars[type][calendar];\n\n            $('kronolithCalendar' + type + 'Id').setValue(calendar);\n            $('kronolithCalendar' + type + 'Name').setValue(info.name);\n            $('kronolithCalendar' + type + 'Color').setValue(info.bg).setStyle({ backgroundColor: info.bg, color: info.fg });\n\n            switch (type) {\n            case 'internal':\n                this.calendarTagAc.reset(Kronolith.conf.calendars.internal[calendar].tg);\n                $('kronolithCalendar' + type + 'ImportCal').setValue('internal_' + calendar);\n                if (info.edit) {\n                    $('kronolithCalendar' + type + 'LinkImport').up('li').show();\n                } else {\n                    $('kronolithCalendar' + type + 'LinkImport').up('li').hide();\n                }\n                $('kronolithCalendar' + type + 'UrlFeed').setValue(info.feed);\n                $('kronolithCalendar' + type + 'EmbedUrl').setValue(info.embed);\n                // Fall through.\n            case 'tasklists':\n                $('kronolithCalendar' + type + 'Description').setValue(info.desc);\n                $('kronolithCalendar' + type + 'LinkExport').up('span').show();\n                $('kronolithCalendar' + type + 'Export').href = type == 'internal'\n                    ? Kronolith.conf.URI_CALENDAR_EXPORT + calendar\n                    : Kronolith.conf.tasks.URI_TASKLIST_EXPORT + '=' + calendar.substring(6);\n                $('kronolithCalendar' + type + 'LinkUrls').up().show();\n                $('kronolithCalendar' + type + 'UrlSub').setValue(info.sub);\n                break;\n            case 'remote':\n                $('kronolithCalendarremoteUrl').setValue(calendar);\n                $('kronolithCalendarremoteDescription').setValue(info.desc);\n                $('kronolithCalendarremoteUsername').setValue(info.user);\n                $('kronolithCalendarremotePassword').setValue(info.password);\n                break;\n            }\n        }\n\n        if (newCalendar || info.owner) {\n            if (type == 'internal' || type == 'tasklists') {\n                this.updateGroupDropDown([['kronolithC' + type + 'PGList', this.updateGroupPerms.bind(this, type)],\n                                          ['kronolithC' + type + 'PGNew']]);\n                $('kronolithC' + type + 'PBasic').show();\n                $('kronolithC' + type + 'PAdvanced').hide();\n                $('kronolithC' + type + 'PNone').setValue(1);\n                $('kronolithC' + type + 'PAllShow').disable();\n                $('kronolithC' + type + 'PGList').disable();\n                $('kronolithC' + type + 'PGPerms').disable();\n                $('kronolithC' + type + 'PUList').disable();\n                $('kronolithC' + type + 'PUPerms').disable();\n                $('kronolithC' + type + 'PAdvanced').select('tr').findAll(function(tr) {\n                    return tr.retrieve('remove');\n                }).invoke('remove');\n                $('kronolithCalendar' + type + 'LinkUrls').up().show();\n                form.down('.kronolithColorPicker').show();\n                if (type == 'internal') {\n                    this.doAction('listTopTags', null, this.topTagsCallback.curry('kronolithCalendarinternalTopTags', 'kronolithCalendarTag'));\n                }\n                form.down('.kronolithCalendarSubscribe').hide();\n                form.down('.kronolithCalendarUnsubscribe').hide();\n                $('kronolithCalendar' + type + 'LinkPerms').up('span').show();\n                if (!Object.isUndefined(info) && info.owner) {\n                    this.setPermsFields(type, info.perms);\n                }\n            }\n            if (type == 'remote' || type == 'internal' || type == 'tasklists') {\n                if (newCalendar ||\n                    (type == 'internal' && calendar == Kronolith.conf.user) ||\n                    (type == 'tasklists' && calendar == 'tasks/' + Kronolith.conf.user)) {\n                    form.select('.kronolithCalendarDelete').invoke('hide');\n                } else {\n                    form.select('.kronolithCalendarDelete').invoke('show');\n                }\n            }\n            form.down('.kronolithCalendarSave').show();\n            form.down('.kronolithFormActions .kronolithSeparator').show();\n        } else {\n            form.disable();\n            form.down('.kronolithColorPicker').hide();\n            form.down('.kronolithCalendarDelete').hide();\n            form.down('.kronolithCalendarSave').hide();\n            if (type == 'internal' || type == 'tasklists') {\n                $('kronolithCalendar' + type + 'UrlSub').enable();\n                if (type == 'internal') {\n                    $('kronolithCalendar' + type + 'UrlFeed').enable();\n                    $('kronolithCalendar' + type + 'EmbedUrl').enable();\n                }\n                this.calendarTagAc.disable();\n                if (Kronolith.conf.calendars[type][calendar].show) {\n                    form.down('.kronolithCalendarSubscribe').hide();\n                    form.down('.kronolithCalendarUnsubscribe').show().enable();\n                } else {\n                    form.down('.kronolithCalendarSubscribe').show().enable();\n                    form.down('.kronolithCalendarUnsubscribe').hide();\n                }\n                form.down('.kronolithFormActions .kronolithSeparator').show();\n                $('kronolithCalendar' + type + 'LinkPerms').up('span').hide();\n            } else {\n                form.down('.kronolithFormActions .kronolithSeparator').hide();\n            }\n        }\n    },\n\n    /**\n     * Handles clicks on the radio boxes of the basic permissions screen.\n     *\n     * @param string type  The calendar type, 'internal' or 'taskslists'.\n     * @param string perm  The permission to activate, 'None', 'All', or\n     *                     'Group'.\n     */\n    permsClickHandler: function(type, perm)\n    {\n        $('kronolithC' + type + 'PAdvanced')\n            .select('input[type=checkbox]')\n            .invoke('setValue', 0);\n        $('kronolithC' + type + 'PAdvanced').select('tr').findAll(function(tr) {\n            return tr.retrieve('remove');\n        }).invoke('remove');\n\n        switch (perm) {\n        case 'None':\n            $('kronolithC' + type + 'PAllShow').disable();\n            $('kronolithC' + type + 'PGList').disable();\n            $('kronolithC' + type + 'PGPerms').disable();\n            $('kronolithC' + type + 'PUList').disable();\n            $('kronolithC' + type + 'PUPerms').disable();\n            break;\n        case 'All':\n            $('kronolithC' + type + 'PAllShow').enable();\n            $('kronolithC' + type + 'PGList').disable();\n            $('kronolithC' + type + 'PGPerms').disable();\n            $('kronolithC' + type + 'PUList').disable();\n            $('kronolithC' + type + 'PUPerms').disable();\n            var perms = {\n                'default': Kronolith.conf.perms.read,\n                'guest': Kronolith.conf.perms.read\n            };\n            if ($F('kronolithC' + type + 'PAllShow')) {\n                perms['default'] |= Kronolith.conf.perms.show;\n                perms['guest'] |= Kronolith.conf.perms.show;\n            }\n            this.setPermsFields(type, perms);\n            break;\n        case 'G':\n            $('kronolithC' + type + 'PAllShow').disable();\n            $('kronolithC' + type + 'PGList').enable();\n            $('kronolithC' + type + 'PGPerms').enable();\n            $('kronolithC' + type + 'PUList').disable();\n            $('kronolithC' + type + 'PUPerms').disable();\n            var group = $F('kronolithC' + type + 'PGSingle')\n                ? $F('kronolithC' + type + 'PGSingle')\n                : $F('kronolithC' + type + 'PGList');\n            this.insertGroupOrUser(type, 'group', group, true);\n            $('kronolithC' + type + 'PGshow_' + group).setValue(1);\n            $('kronolithC' + type + 'PGread_' + group).setValue(1);\n            if ($F('kronolithC' + type + 'PGPerms') == 'edit') {\n                $('kronolithC' + type + 'PGedit_' + group).setValue(1);\n            } else {\n                $('kronolithC' + type + 'PGedit_' + group).setValue(0);\n            }\n            $('kronolithC' + type + 'PGdelete_' + group).setValue(0);\n            if ($('kronolithC' + type + 'PGdelegate_' + group)) {\n                $('kronolithC' + type + 'PGdelegate_' + group).setValue(0);\n            }\n            break;\n        case 'U':\n            $('kronolithC' + type + 'PAllShow').disable();\n            $('kronolithC' + type + 'PGList').disable();\n            $('kronolithC' + type + 'PGPerms').disable();\n            $('kronolithC' + type + 'PUList').enable();\n            $('kronolithC' + type + 'PUPerms').enable();\n            var users = $F('kronolithC' + type + 'PUList').strip();\n            users = users ? users.split(/,\\s*/) : [];\n            users.each(function(user) {\n                this.insertGroupOrUser(type, 'user', user, true);\n                $('kronolithC' + type + 'PUshow_' + user).setValue(1);\n                $('kronolithC' + type + 'PUread_' + user).setValue(1);\n                if ($F('kronolithC' + type + 'PUPerms') == 'edit') {\n                    $('kronolithC' + type + 'PUedit_' + user).setValue(1);\n                } else {\n                    $('kronolithC' + type + 'PUedit_' + user).setValue(0);\n                }\n                $('kronolithC' + type + 'PUdelete_' + user).setValue(0);\n                if ($('kronolithC' + type + 'PUdelegate_' + user)) {\n                    $('kronolithC' + type + 'PUdelegate_' + user).setValue(0);\n                }\n            }, this);\n            break;\n        }\n    },\n\n    /**\n     * Populates the permissions field matrix.\n     *\n     * @param string type   The calendar type, 'internal' or 'taskslists'.\n     * @param object perms  An object with the resource permissions.\n     */\n    setPermsFields: function(type, perms)\n    {\n        if (this.groupLoading) {\n            this.setPermsFields.bind(this, type, perms).defer();\n            return;\n        }\n\n        var allperms = $H(Kronolith.conf.perms),\n            advanced = false, users = [],\n            basic, same, groupPerms, groupId, userPerms;\n        $H(perms).each(function(perm) {\n            switch (perm.key) {\n            case 'default':\n            case 'guest':\n                if (Object.isUndefined(same)) {\n                    same = perm.value;\n                } else if (Object.isUndefined(basic) &&\n                           same == perm.value &&\n                           (perm.value == Kronolith.conf.perms.read ||\n                            perm.value == (Kronolith.conf.perms.read | Kronolith.conf.perms.show))) {\n                    basic = perm.value == Kronolith.conf.perms.read ? 'all_read' : 'all_show';\n                } else if (perm.value != 0) {\n                    advanced = true;\n                }\n                break;\n            case 'creator':\n                if (perm.value != 0) {\n                    advanced = true;\n                }\n                break;\n            case 'groups':\n                if (!Object.isArray(perm.value)) {\n                    $H(perm.value).each(function(group) {\n                        this.insertGroupOrUser(type, 'group', group.key);\n                        if (!$('kronolithC' + type + 'PGshow_' + group.key)) {\n                            // Group doesn't exist anymore.\n                            delete perm.value[group.key];\n                            return;\n                        }\n                        groupPerms = group.value;\n                        groupId = group.key;\n                    }, this);\n                    if (Object.isUndefined(basic) &&\n                        $H(perm.value).size() == 1 &&\n                        (groupPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read) ||\n                         groupPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read | Kronolith.conf.perms.edit))) {\n                        basic = groupPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read) ? 'group_read' : 'group_edit';\n                    } else {\n                        advanced = true;\n                    }\n                }\n                break;\n            case 'users':\n                if (!Object.isArray(perm.value)) {\n                    $H(perm.value).each(function(user) {\n                        if (user.key != Kronolith.conf.user) {\n                            this.insertGroupOrUser(type, 'user', user.key);\n                            if (!$('kronolithC' + type + 'PUshow_' + user.key)) {\n                                // User doesn't exist anymore.\n                                delete perm.value[user.key];\n                                return;\n                            }\n                            // Check if we already have other basic permissions.\n                            if (Object.isUndefined(userPerms) &&\n                                !Object.isUndefined(basic)) {\n                                advanced = true;\n                            }\n                            // Check if all users have the same permissions.\n                            if (!Object.isUndefined(userPerms) &&\n                                userPerms != user.value) {\n                                advanced = true;\n                            }\n                            userPerms = user.value;\n                            if (!advanced &&\n                                (userPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read) ||\n                                 userPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read | Kronolith.conf.perms.edit))) {\n                                basic = userPerms == (Kronolith.conf.perms.show | Kronolith.conf.perms.read) ? 'user_read' : 'user_edit';\n                                users.push(user.key);\n                            } else {\n                                advanced = true;\n                            }\n                        }\n                    }, this);\n                }\n                break;\n            }\n\n            allperms.each(function(baseperm) {\n                if (baseperm.key == 'all') {\n                    return;\n                }\n                switch (perm.key) {\n                case 'default':\n                case 'guest':\n                case 'creator':\n                    if (baseperm.value & perm.value) {\n                        $('kronolithC' + type + 'P' + perm.key + baseperm.key).setValue(1);\n                    }\n                    break;\n                case 'groups':\n                    $H(perm.value).each(function(group) {\n                        if (baseperm.value & group.value) {\n                            $('kronolithC' + type + 'PG' + baseperm.key + '_' + group.key).setValue(1);\n                        }\n                    });\n                    break;\n                case 'users':\n                    $H(perm.value).each(function(user) {\n                        if (baseperm.value & user.value &&\n                            user.key != Kronolith.conf.user) {\n                            $('kronolithC' + type + 'PU' + baseperm.key + '_' + user.key).setValue(1);\n                        }\n                    });\n                    break;\n                }\n            });\n        }.bind(this));\n\n        if (advanced) {\n            this.activateAdvancedPerms(type);\n        } else {\n            switch (basic) {\n            case 'all_read':\n                $('kronolithC' + type + 'PAll').setValue(1);\n                $('kronolithC' + type + 'PAllShow').setValue(0);\n                $('kronolithC' + type + 'PAllShow').enable();\n                break;\n            case 'all_show':\n                $('kronolithC' + type + 'PAll').setValue(1);\n                $('kronolithC' + type + 'PAllShow').setValue(1);\n                $('kronolithC' + type + 'PAllShow').enable();\n                break;\n            case 'group_read':\n            case 'group_edit':\n                var setGroup = function(group) {\n                    if ($('kronolithC' + type + 'PGList').visible()) {\n                        $('kronolithC' + type + 'PGList').setValue(group);\n                        if ($('kronolithC' + type + 'PGList').getValue() != group) {\n                            // Group no longer exists.\n                            this.permsClickHandler(type, 'None');\n                        }\n                    } else if ($('kronolithC' + type + 'PGSingle').getValue() != group) {\n                        // Group no longer exists.\n                        this.permsClickHandler(type, 'None');\n                    }\n                }.bind(this, groupId);\n                if (this.groupLoading) {\n                    setGroup.defer();\n                } else {\n                    setGroup();\n                }\n                $('kronolithC' + type + 'PG').setValue(1);\n                $('kronolithC' + type + 'PGPerms').setValue(basic.substring(6));\n                $('kronolithC' + type + 'PAdvanced').hide();\n                $('kronolithC' + type + 'PBasic').show();\n                $('kronolithC' + type + 'PGPerms').enable();\n                break;\n            case 'user_read':\n            case 'user_edit':\n                $('kronolithC' + type + 'PUList').enable().setValue(users.join(', '));\n                $('kronolithC' + type + 'PU').setValue(1);\n                $('kronolithC' + type + 'PUPerms').setValue(basic.substring(5));\n                $('kronolithC' + type + 'PAdvanced').hide();\n                $('kronolithC' + type + 'PBasic').show();\n                $('kronolithC' + type + 'PUPerms').enable();\n                break;\n            }\n        }\n   },\n\n    /**\n     * Propagates a SELECT drop down list with the groups.\n     *\n     * @param array params  A two-dimensional array with the following values\n     *                      in each element:\n     *                      - The id of the SELECT element.\n     *                      - A callback method that is invoked with the group\n     *                        list passes as an argument.\n     */\n    updateGroupDropDown: function(params)\n    {\n        this.groupLoading = true;\n        params.each(function(param) {\n            var elm = $(param[0]), options = elm.childElements();\n            options.shift();\n            options.invoke('remove');\n            elm.up('form').disable();\n        });\n        this.doAction('listGroups', null, function(r) {\n            var groups;\n            if (r.response.groups) {\n                groups = $H(r.response.groups);\n                params.each(function(param) {\n                    groups.each(function(group) {\n                        $(param[0]).insert(new Element('option', { value: group.key })\n                                           .update(group.value.escapeHTML()));\n                    });\n                });\n            }\n            params.each(function(param) {\n                $(param[0]).up('form').enable();\n                if (param[1]) {\n                    param[1](groups);\n                }\n            });\n            this.groupLoading = false;\n        }.bind(this));\n    },\n\n    /**\n     * Updates the group permission interface after the group list has\n     * been loaded.\n     *\n     * @param string type  The calendar type, 'internal' or 'taskslists'.\n     * @param Hash groups  The list of groups.\n     */\n    updateGroupPerms: function(type, groups)\n    {\n        $('kronolithC' + type + 'PGSingle').clear();\n        if (!groups) {\n            $('kronolithC' + type + 'PGNew').up('div').hide();\n            $('kronolithC' + type + 'PG').up('span').hide();\n        } else {\n            $('kronolithC' + type + 'PGNew').up('div').show();\n            $('kronolithC' + type + 'PG').up('span').show();\n            if (groups.size() == 1) {\n                $('kronolithC' + type + 'PGName')\n                    .update('&quot;' + groups.values()[0].escapeHTML() + '&quot;')\n                    .show();\n                $('kronolithC' + type + 'PGSingle').setValue(groups.keys()[0]);\n                $('kronolithC' + type + 'PGList').hide();\n            } else {\n                $('kronolithC' + type + 'PGName').hide();\n                $('kronolithC' + type + 'PGList').show();\n            }\n        }\n    },\n\n    /**\n     * Inserts a group or user row into the advanced permissions interface.\n     *\n     * @param string type          The calendar type, 'internal' or\n     *                             'taskslists'.\n     * @param what string          Either 'group' or 'user'.\n     * @param group string         The group id or user name to insert.\n     *                             Defaults to the value of the drop down.\n     * @param notadvanced boolean  Enforces to NOT switch to the advanced\n     *                             permissions screen.\n     */\n    insertGroupOrUser: function(type, what, id, notadvanced)\n    {\n        var elm = $(what == 'user' ? 'kronolithC' + type + 'PUNew' : 'kronolithC' + type + 'PGNew');\n        if (id) {\n            elm.setValue(id);\n        }\n        var value = elm.getValue();\n        if (!value) {\n            return;\n        }\n\n        var tr = elm.up('tr'),\n            row = tr.clone(true).store('remove', true),\n            td = row.down('td'),\n            clearName = elm.tagName == 'SELECT' ? elm.options[elm.selectedIndex].text: elm.getValue();\n\n        td.update();\n        td.insert(clearName.escapeHTML())\n            .insert(new Element('input', { type: 'hidden', name: (what == 'user' ? 'u' : 'g') + '_names[' + value + ']', value: value }));\n        row.select('input[type=checkbox]').each(function(input) {\n            input.writeAttribute('name', input.name.replace(/\\[.*?$/, '[' + value + ']'))\n                .writeAttribute('id', input.id.replace(/new/, value))\n                .next()\n                .writeAttribute('for', input.id);\n        });\n        tr.insert({ before: row });\n\n        if (elm.tagName == 'SELECT') {\n            elm.options[elm.selectedIndex].writeAttribute('disabled', true);\n            elm.selectedIndex = 0;\n        } else {\n            elm.clear();\n        }\n\n        if (!notadvanced) {\n            this.activateAdvancedPerms(type);\n        }\n    },\n\n    /**\n     * Activates the advanced permissions.\n     *\n     * @param string type  The calendar type, 'internal' or 'taskslists'.\n     */\n    activateAdvancedPerms: function(type)\n    {\n        [$('kronolithC' + type + 'PNone'),\n         $('kronolithC' + type + 'PAll'),\n         $('kronolithC' + type + 'PU'),\n         $('kronolithC' + type + 'PG')].each(function(radio) {\n            radio.checked = false;\n        });\n        $('kronolithC' + type + 'PBasic').hide();\n        $('kronolithC' + type + 'PAdvanced').show();\n    },\n\n    /**\n     * Opens the next screen of the calendar management wizard.\n     *\n     * @param string type  The calendar type.\n     */\n    calendarNext: function(type)\n    {\n        var i = 1;\n        while (!$('kronolithCalendar' + type + i).visible()) {\n            i++;\n        }\n        $('kronolithCalendar' + type + i).hide();\n        $('kronolithCalendar' + type + (++i)).show();\n        if (this.colorPicker) {\n            this.colorPicker.hide();\n        }\n    },\n\n    /**\n     * Submits the calendar form to save the calendar data.\n     *\n     * @param Element form  The form node.\n     *\n     * @return boolean  Whether the save request was successfully sent.\n     */\n    saveCalendar: function(form)\n    {\n        if (this.colorPicker) {\n            this.colorPicker.hide();\n        }\n        var data = form.serialize({ hash: true });\n\n        if (data.type == 'holiday') {\n            this.insertCalendarInList('holiday', data.driver, Kronolith.conf.calendars.holiday[data.driver]);\n            this.toggleCalendar('holiday', data.driver);\n            form.down('.kronolithCalendarSave').enable();\n            this.closeRedBox();\n            this.go(this.lastLocation);\n            return;\n        }\n\n        if (data.name.empty()) {\n            this.showNotifications([ { type: 'horde.warning', message: data.type == 'tasklists' ? Kronolith.text.no_tasklist_title : Kronolith.text.no_calendar_title }]);\n            $('kronolithCalendar' + data.type + 'Name').focus();\n            return false;\n        }\n        this.doAction('saveCalendar', data,\n                      this.saveCalendarCallback.bind(this, form, data));\n        return true;\n    },\n\n    /**\n     * Callback method after saving a calendar.\n     *\n     * @param Element form  The form node.\n     * @param object data   The serialized form data.\n     * @param object r      The ajax response object.\n     */\n    saveCalendarCallback: function(form, data, r)\n    {\n        var type = form.id.replace(/kronolithCalendarForm/, '');\n\n        // If saving the calendar changed the owner, we need to delete\n        // and re-insert the calendar.\n        if (r.response.deleted) {\n            this.deleteCalendar(type, data.calendar);\n            delete data.calendar;\n        }\n        if (r.response.saved) {\n            if ($F('kronolithCalendarinternalImport')) {\n                this.loading++;\n                $('kronolithLoading').show();\n                var name = 'kronolithIframe' + Math.round(Math.random() * 1000),\n                    iframe = new Element('iframe', { src: 'about:blank', name: name, id: name }).setStyle({ display: 'none' });\n                document.body.insert(iframe);\n                form.target = name;\n                form.submit();\n            }\n            var cal = r.response.calendar, id;\n            if (data.calendar) {\n                var color = {\n                    backgroundColor: cal.bg,\n                    color: cal.fg\n                };\n                id = data.calendar;\n                this.getCalendarList(type, cal.owner).select('div').each(function(element) {\n                    if (element.retrieve('calendar') == id) {\n                        element\n                            .setStyle(color)\n                            .update(cal.name.escapeHTML());\n                        this.addShareIcon(cal, element);\n                        throw $break;\n                    }\n                }, this);\n                this.kronolithBody.select('div').each(function(el) {\n                    if (el.retrieve('calendar') == type + '|' + id) {\n                        el.setStyle(color);\n                    }\n                });\n                Kronolith.conf.calendars[type][id] = cal;\n            } else {\n                id = r.response.id;\n                if (!Kronolith.conf.calendars[type]) {\n                    Kronolith.conf.calendars[type] = [];\n                }\n                Kronolith.conf.calendars[type][id] = cal;\n                this.insertCalendarInList(type, id, cal);\n                this.storeCache($H(), [type, id], this.viewDates(this.date, this.view), true);\n                if (type == 'tasklists') {\n                    this.storeTasksCache($H(), this.tasktype, id.replace(/^tasks\\//, ''), true);\n                }\n            }\n            if (type == 'remote') {\n                this.loadCalendar(type, id);\n            }\n        }\n        form.down('.kronolithCalendarSave').enable();\n        this.closeRedBox();\n        this.go(this.lastLocation);\n    },\n\n    /**\n     * Deletes a calendar and all its events from the interface and cache.\n     *\n     * @param string type      The calendar type.\n     * @param string calendar  The calendar id.\n     */\n    deleteCalendar: function(type, calendar)\n    {\n        var container = this.getCalendarList(type, Kronolith.conf.calendars[type][calendar].owner),\n            noItems = container.previous(),\n            div = container.select('div').find(function(element) {\n                return element.retrieve('calendar') == calendar;\n            }),\n            arrow = div.previous('span');\n        arrow.purge();\n        arrow.remove();\n        div.purge();\n        div.remove();\n        if (noItems &&\n            noItems.tagName == 'DIV' &&\n            noItems.className == 'kronolithDialogInfo' &&\n            !container.childElements().size()) {\n            noItems.show();\n        }\n        this.removeEvent(type + '|' + calendar);\n        this.deleteCache([type, calendar]);\n        if (type == 'tasklists' && this.view == 'tasks') {\n            this.removeTask(calendar.replace(/^tasks\\//, ''));\n        }\n        delete Kronolith.conf.calendars[type][calendar];\n    },\n\n    /**\n     * Parses a date attribute string into a Date object.\n     *\n     * For other strings use Date.parse().\n     *\n     * @param string date  A yyyyMMdd date string.\n     *\n     * @return Date  A date object.\n     */\n    parseDate: function(date)\n    {\n        var d = new Date(date.substr(0, 4), date.substr(4, 2) - 1, date.substr(6, 2));\n        if (date.length == 12) {\n            d.setHours(date.substr(8, 2));\n            d.setMinutes(date.substr(10, 2));\n        }\n        return d;\n    },\n\n    /**\n     * Calculates first and last days being displayed.\n     *\n     * @var Date date    The date of the view.\n     * @var string view  A view name.\n     *\n     * @return array  Array with first and last day of the view.\n     */\n    viewDates: function(date, view)\n    {\n        var start = date.clone(), end = date.clone();\n\n        switch (view) {\n        case 'week':\n            start.moveToBeginOfWeek(Kronolith.conf.week_start);\n            end.moveToEndOfWeek(Kronolith.conf.week_start);\n            break;\n        case 'month':\n            start.setDate(1);\n            start.moveToBeginOfWeek(Kronolith.conf.week_start);\n            end.moveToLastDayOfMonth();\n            end.moveToEndOfWeek(Kronolith.conf.week_start);\n            break;\n        case 'year':\n            start.setDate(1);\n            start.setMonth(0);\n            end.setMonth(11);\n            end.moveToLastDayOfMonth();\n            break;\n        case 'agenda':\n            end.add(6).days();\n            break;\n        }\n\n        return [start, end];\n    },\n\n    /**\n     * Stores a set of events in the cache.\n     *\n     * For dates in the specified date ranges that don't contain any events,\n     * empty cache entries are created so that those dates aren't re-fetched\n     * each time.\n     *\n     * @param object events        A list of calendars and events as returned\n     *                             from an ajax request.\n     * @param string calendar      A calendar string or array.\n     * @param string dates         A date range in the format yyyymmddyyyymmdd\n     *                             as used in the ajax response signature.\n     * @param boolean createCache  Whether to create a cache list entry for the\n     *                             response, if none exists yet.\n     */\n    storeCache: function(events, calendar, dates, createCache)\n    {\n        if (Object.isString(calendar)) {\n            calendar = calendar.split('|');\n        }\n\n        // Create cache entry for the calendar.\n        if (!this.ecache.get(calendar[0])) {\n            if (!createCache) {\n                return;\n            }\n            this.ecache.set(calendar[0], $H());\n        }\n        if (!this.ecache.get(calendar[0]).get(calendar[1])) {\n            if (!createCache) {\n                return;\n            }\n            this.ecache.get(calendar[0]).set(calendar[1], $H());\n        }\n        var calHash = this.ecache.get(calendar[0]).get(calendar[1]);\n\n        // Create empty cache entries for all dates.\n        if (!!dates) {\n            var day = dates[0].clone(), date;\n            while (!day.isAfter(dates[1])) {\n                date = day.dateString();\n                if (!calHash.get(date)) {\n                    if (!createCache) {\n                        return;\n                    }\n                    if (!this.cacheStart || this.cacheStart.isAfter(day)) {\n                        this.cacheStart = day.clone();\n                    }\n                    if (!this.cacheEnd || this.cacheEnd.isBefore(day)) {\n                        this.cacheEnd = day.clone();\n                    }\n                    calHash.set(date, $H());\n                }\n                day.add(1).day();\n            }\n        }\n\n        var cal = calendar.join('|');\n        $H(events).each(function(date) {\n            // We might not have a cache for this date if the event lasts\n            // longer than the current view\n            if (!calHash.get(date.key)) {\n                return;\n            }\n\n            // Store calendar string and other useful information in event\n            // objects.\n            $H(date.value).each(function(event) {\n                event.value.calendar = cal;\n                event.value.start = Date.parse(event.value.s);\n                event.value.end = Date.parse(event.value.e);\n                event.value.sort = event.value.start.toString('HHmmss')\n                    + (240000 - parseInt(event.value.end.toString('HHmmss'), 10)).toPaddedString(6);\n            });\n\n            // Store events in cache.\n            calHash.set(date.key, calHash.get(date.key).merge(date.value));\n        });\n    },\n\n    /**\n     * Stores a set of tasks in the cache.\n     *\n     * @param Hash tasks           The tasks to be stored.\n     * @param string tasktypes     The task type that's being stored.\n     * @param string tasklist      The task list to which the tasks belong.\n     * @param boolean createCache  Whether to create a cache list entry for the\n     *                             response, if none exists yet.\n     */\n    storeTasksCache: function(tasks, tasktypes, tasklist, createCache)\n    {\n        var taskHashes = {}, cacheExists = {};\n\n        if (tasktypes == 'all' || tasktypes == 'future') {\n            tasktypes = [ 'complete', 'incomplete' ];\n        } else {\n            tasktypes = [ tasktypes ];\n        }\n\n        tasktypes.each(function(tasktype) {\n            cacheExists[tasktype] = false;\n            if (!this.tcache.get(tasktype)) {\n                if (!createCache) {\n                    return;\n                }\n                this.tcache.set(tasktype, $H());\n            }\n            if (!tasklist) {\n                return;\n            }\n            if (!this.tcache.get(tasktype).get(tasklist)) {\n                if (!createCache) {\n                    return;\n                }\n                this.tcache.get(tasktype).set(tasklist, $H());\n                cacheExists[tasktype] = true;\n            } else {\n                cacheExists[tasktype] = true;\n            }\n            taskHashes[tasktype] = this.tcache.get(tasktype).get(tasklist);\n        }, this);\n\n        $H(tasks).each(function(task) {\n            var tasktype = task.value.cp ? 'complete' : 'incomplete';\n            if (!cacheExists[tasktype]) {\n                return;\n            }\n            if (!Object.isUndefined(task.value.s)) {\n                task.value.start = Date.parse(task.value.s);\n            }\n            if (!Object.isUndefined(task.value.du)) {\n                task.value.due = Date.parse(task.value.du);\n            }\n            taskHashes[tasktype].set(task.key, task.value);\n        });\n    },\n\n    /**\n     * Deletes an event or a complete calendar from the cache.\n     *\n     * @param string calendar  A calendar string or array.\n     * @param string event     An event ID or empty if deleting the calendar.\n     */\n    deleteCache: function(calendar, event)\n    {\n        if (Object.isString(calendar)) {\n            calendar = calendar.split('|');\n        }\n        if (!this.ecache.get(calendar[0]) ||\n            !this.ecache.get(calendar[0]).get(calendar[1])) {\n            return;\n        }\n        if (event) {\n            this.ecache.get(calendar[0]).get(calendar[1]).each(function(day) {\n                day.value.unset(event);\n            });\n        } else {\n            this.ecache.get(calendar[0]).unset(calendar[1]);\n        }\n    },\n\n    /**\n     * Deletes tasks from the cache.\n     *\n     * @param string list  A task list string.\n     * @param string task  A task ID. If empty, all tasks from the list are\n     *                     deleted.\n     */\n    deleteTasksCache: function(list, task)\n    {\n        this.deleteCache([ 'external', 'tasks/' + list ], task);\n        $w('complete incomplete').each(function(type) {\n            if (!Object.isUndefined(this.tcache.get(type)) &&\n                !Object.isUndefined(this.tcache.get(type).get(list))) {\n                if (task) {\n                    this.tcache.get(type).get(list).unset(task);\n                } else {\n                    this.tcache.get(type).unset(list);\n                }\n            }\n        }, this);\n    },\n\n    /**\n     * Return all events for a single day from all displayed calendars merged\n     * into a single hash.\n     *\n     * @param string date  A yyyymmdd date string.\n     *\n     * @return Hash  An event hash which event ids as keys and event objects as\n     *               values.\n     */\n    getCacheForDate: function(date, calendar)\n    {\n        if (calendar) {\n            var cals = calendar.split('|');\n            if (!this.ecache.get(cals[0]) ||\n                !this.ecache.get(cals[0]).get(cals[1])) {\n                return $H();\n            }\n            return this.ecache.get(cals[0]).get(cals[1]).get(date);\n        }\n\n        var events = $H();\n        this.ecache.each(function(type) {\n            type.value.each(function(cal) {\n                if (!Kronolith.conf.calendars[type.key][cal.key].show) {\n                    return;\n                }\n                events = events.merge(cal.value.get(date));\n            });\n        });\n        return events;\n    },\n\n    /**\n     * Helper method for Enumerable.sortBy to sort events first by start time,\n     * second by end time reversed.\n     *\n     * @param Hash event  A hash entry with the event object as the value.\n     *\n     * @return string  A comparable string.\n     */\n    sortEvents: function(event)\n    {\n        return event.value.sort;\n    },\n\n    /**\n     * Adds a new location to the history and displays it in the URL hash.\n     *\n     * This is not really a history, because only the current and the last\n     * location are stored.\n     *\n     * @param string loc    The location to save.\n     * @param boolean save  Whether to actually save the location. This should\n     *                      be false for any location that are displayed on top\n     *                      of another location, i.e. in a popup view.\n     */\n    addHistory: function(loc, save)\n    {\n        location.hash = encodeURIComponent(loc);\n        this.lastLocation = this.currentLocation;\n        if (Object.isUndefined(save) || save) {\n            this.currentLocation = loc;\n        }\n        this.openLocation = loc;\n    },\n\n    /**\n     * Loads an external page.\n     *\n     * @param string loc  The URL of the page to load.\n     */\n    loadPage: function(loc)\n    {\n        if (Kronolith.conf.use_iframe) {\n            this.iframeContent(loc);\n        } else {\n            window.location.assign(loc);\n        }\n    },\n\n    /**\n     * Loads a page into the iframe view.\n     *\n     * @param string loc  The URL of the page to load.\n     */\n    iframeContent: function(loc)\n    {\n        var view = $('kronolithViewIframe'), iframe = $('kronolithIframe');\n        view.hide();\n        if (!iframe) {\n            view.insert(new Element('iframe', { id: 'kronolithIframe', className: 'kronolithIframe', frameBorder: 0 }));\n            iframe = $('kronolithIframe');\n        }\n        iframe.observe('load', function() {\n            view.appear({ duration: this.effectDur, queue: 'end' });\n            iframe.stopObserving('load');\n        }.bind(this));\n        iframe.src = this.addURLParam(loc, { ajaxui: 1 });\n        this.view = 'iframe';\n    },\n\n    /* Keydown event handler */\n    keydownHandler: function(e)\n    {\n        if (e.stopped) {\n            return;\n        }\n\n        var kc = e.keyCode || e.charCode,\n            form = e.findElement('FORM'), trigger = e.findElement();\n\n        switch (trigger.id) {\n        case 'kronolithEventLocation':\n            if (kc == Event.KEY_RETURN && $F('kronolithEventLocation')) {\n                this.initializeMap(true);\n                this.geocode($F('kronolithEventLocation'));\n                e.stop();\n                return;\n            }\n            break;\n\n        case 'kronolithCalendarinternalUrlSub':\n        case 'kronolithCalendarinternalUrlFeed':\n        case 'kronolithCalendartasklistsUrlSub':\n            if (String.fromCharCode(kc) != 'C' ||\n                (this.macos && !e.metaKey) ||\n                (!this.macos && !e.ctrlKey)) {\n                e.stop();\n                return;\n            }\n            break;\n        }\n\n        if (form) {\n            switch (kc) {\n            case Event.KEY_RETURN:\n                switch (form.identify()) {\n                case 'kronolithEventForm':\n                    if (e.element().tagName != 'TEXTAREA') {\n                        this.saveEvent();\n                        e.stop();\n                    }\n                    break;\n\n                case 'kronolithTaskForm':\n                    if (e.element().tagName != 'TEXTAREA') {\n                        this.saveTask();\n                        e.stop();\n                    }\n                    break;\n\n                case 'kronolithSearchForm':\n                    this.go('search:' + this.search + ':' + $F('kronolithSearchTerm'));\n                    e.stop();\n                    break;\n\n                case 'kronolithQuickinsertForm':\n                    this.quickSaveEvent();\n                    e.stop();\n                    break;\n\n                case 'kronolithCalendarForminternal':\n                case 'kronolithCalendarFormtasklists':\n                case 'kronolithCalendarFormremote':\n                    // Disabled for now, we have to also catch Continue buttons.\n                    //var saveButton = form.down('.kronolithCalendarSave');\n                    //saveButton.disable();\n                    //if (!this.saveCalendar(form)) {\n                    //    saveButton.enable();\n                    //}\n                    //e.stop();\n                    break;\n                }\n                break;\n\n            case Event.KEY_ESC:\n                switch (form.identify()) {\n                case 'kronolithQuickinsertForm':\n                    this.quickClose();\n                    break;\n                case 'kronolithEventForm':\n                    Horde_Calendar.hideCal();\n                    this.closeRedBox();\n                    this.go(this.lastLocation);\n                    break;\n                }\n                break;\n            }\n\n            return;\n        }\n\n        switch (kc) {\n        case Event.KEY_ESC:\n            Horde_Calendar.hideCal();\n            this.closeRedBox();\n            break;\n        }\n    },\n\n    keyupHandler: function(e)\n    {\n        switch (e.element().readAttribute('id')) {\n        case 'kronolithEventLocation':\n            if ($F('kronolithEventLocation') && Kronolith.conf.maps.driver) {\n                $('kronolithEventMapLink').show();\n            } else if (Kronolith.conf.maps.driver) {\n                $('kronolithEventMapLink').hide();\n                this.removeMapMarker();\n            }\n            return;\n\n        case 'kronolithEventStartTime':\n        case 'kronolithEventEndTime':\n            var field = $(e.element().readAttribute('id')), kc = e.keyCode;\n\n            switch(e.keyCode) {\n            case Event.KEY_UP:\n            case Event.KEY_DOWN:\n            case Event.KEY_RIGHT:\n            case Event.KEY_LEFT:\n                return;\n            default:\n                if ($F(field) !== this.knl[field.identify()].getCurrentEntry()) {\n                    this.knl[field.identify()].markSelected(null);\n                }\n                return;\n            }\n        }\n\n    },\n\n    clickHandler: function(e, dblclick)\n    {\n        if (e.isRightClick() || typeof e.element != 'function') {\n            return;\n        }\n\n        var elt = e.element(),\n            orig = e.element(),\n            id, tmp, calendar;\n\n        while (Object.isElement(elt)) {\n            id = elt.readAttribute('id');\n\n            switch (id) {\n            case 'kronolithLogo':\n                if (Kronolith.conf.URI_HOME) {\n                    this.redirect(Kronolith.conf.URI_HOME);\n                } else {\n                    this.go(Kronolith.conf.login_view);\n                }\n                e.stop();\n                return;\n\n            case 'kronolithNewEvent':\n                this.go('event');\n                e.stop();\n                return;\n\n            case 'kronolithNewTask':\n                this.go('task');\n                e.stop();\n                return;\n\n            case 'kronolithQuickEvent':\n                this.updateCalendarDropDown('kronolithQuickinsertCalendars');\n                $('kronolithQuickinsertCalendars').setValue(Kronolith.conf.default_calendar);\n                $('kronolithQuickinsert').appear({\n                    duration: this.effectDur,\n                    afterFinish: function() {\n                        $('kronolithQuickinsertQ').focus();\n                    }\n                });\n                e.stop();\n                return;\n\n            case 'kronolithQuickinsertSave':\n                this.quickSaveEvent();\n                e.stop();\n                return;\n\n            case 'kronolithQuickinsertCancel':\n                this.quickClose();\n                e.stop();\n                return;\n\n            case 'kronolithEventAllday':\n                this.toggleAllDay();\n                break;\n\n            case 'kronolithEventAlarmDefaultOn':\n                this.disableAlarmMethods('Event');\n                break;\n\n            case 'kronolithTaskAlarmDefaultOn':\n                this.disableAlarmMethods('Task');\n                break;\n\n            case 'kronolithEventAlarmPrefs':\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                this.go('prefs', { app: 'kronolith', group: 'notification' });\n                e.stop();\n                break;\n\n            case 'kronolithTaskAlarmPrefs':\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                this.go('prefs', { app: 'nag', group: 'notification' });\n                e.stop();\n                break;\n\n            case 'kronolithEventLinkNone':\n            case 'kronolithEventLinkDaily':\n            case 'kronolithEventLinkWeekly':\n            case 'kronolithEventLinkMonthly':\n            case 'kronolithEventLinkYearly':\n            case 'kronolithEventLinkLength':\n                this.toggleRecurrence(id.substring(18));\n                break;\n\n            case 'kronolithEventRepeatDaily':\n            case 'kronolithEventRepeatWeekly':\n            case 'kronolithEventRepeatMonthly':\n            case 'kronolithEventRepeatYearly':\n            case 'kronolithEventRepeatLength':\n                this.toggleRecurrence(id.substring(20));\n                break;\n\n            case 'kronolithEventSave':\n                if (!elt.disabled) {\n                    this.saveEvent();\n                }\n                e.stop();\n                break;\n\n            case 'kronolithEventSaveAsNew':\n                if (!elt.disabled) {\n                    this.saveEvent(true);\n                }\n                e.stop();\n                break;\n\n            case 'kronolithTaskSave':\n                if (!elt.disabled) {\n                    this.saveTask();\n                }\n                e.stop();\n                break;\n\n            case 'kronolithEventDelete':\n                $('kronolithEventDiv').hide();\n                $('kronolithDeleteDiv').show();\n                break;\n\n            case 'kronolithEventDeleteCancel':\n                $('kronolithDeleteDiv').hide();\n                $('kronolithEventDiv').show();\n                return;\n\n            case 'kronolithEventDeleteConfirm':\n                if (elt.disabled) {\n                    e.stop();\n                    break;\n                }\n\n                elt.disable();\n                var cal = $F('kronolithEventCalendar'),\n                    eventid = $F('kronolithEventId');\n                this.kronolithBody.select('div').findAll(function(el) {\n                    return el.retrieve('calendar') == cal &&\n                        el.retrieve('eventid') == eventid;\n                }).invoke('hide');\n                this.doAction('deleteEvent',\n                              { cal: cal, id: eventid },\n                              function(r) {\n                                  if (r.response.deleted) {\n                                      var days;\n                                      if ((this.view == 'month' &&\n                                           Kronolith.conf.max_events) ||\n                                          this.view == 'week' ||\n                                          this.view == 'day') {\n                                          days = this.findEventDays(cal, eventid);\n                                      }\n                                      this.removeEvent(cal, eventid);\n                                      if (r.response.uid) {\n                                          this.removeException(cal, r.response.uid);\n                                      }\n                                      if (days && days.length) {\n                                          this.reRender(days);\n                                      }\n                                  } else {\n                                      elt.enable();\n                                      this.kronolithBody.select('div').findAll(function(el) {\n                                          return el.retrieve('calendar') == cal &&\n                                              el.retrieve('eventid') == eventid;\n                                      }).invoke('show');\n                                  }\n                              }.bind(this));\n                $('kronolithDeleteDiv').hide();\n                $('kronolithEventDiv').show();\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                e.stop();\n                break;\n\n            case 'kronolithTaskDelete':\n                if (elt.disabled) {\n                    e.stop();\n                    break;\n                }\n\n                elt.disable();\n                var tasklist = $F('kronolithTaskOldList'),\n                    taskid = $F('kronolithTaskId');\n                this.doAction('deleteTask',\n                              { list: tasklist, id: taskid },\n                              function(r) {\n                                  if (r.response.deleted) {\n                                      this.removeTask(tasklist, taskid);\n                                  } else {\n                                      elt.enable();\n                                      $('kronolithViewTasksBody').select('tr').find(function(el) {\n                                          return el.retrieve('tasklist') == tasklist &&\n                                              el.retrieve('taskid') == taskid;\n                                      }).toggle();\n                                  }\n                              }.bind(this));\n                var taskrow = $('kronolithViewTasksBody').select('tr').find(function(el) {\n                    return el.retrieve('tasklist') == tasklist &&\n                        el.retrieve('taskid') == taskid;\n                });\n                if (taskrow) {\n                    taskrow.hide();\n                }\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                e.stop();\n                break;\n\n            case 'kronolithCinternalPMore':\n            case 'kronolithCinternalPLess':\n            case 'kronolithCtasklistsPMore':\n            case 'kronolithCtasklistsPLess':\n                var type = id.match(/kronolithC(.*)P/)[1];\n                $('kronolithC' + type + 'PBasic').toggle();\n                $('kronolithC' + type + 'PAdvanced').toggle();\n                e.stop();\n                break;\n\n            case 'kronolithCinternalPNone':\n            case 'kronolithCinternalPAll':\n            case 'kronolithCinternalPG':\n            case 'kronolithCinternalPU':\n            case 'kronolithCtasklistsPNone':\n            case 'kronolithCtasklistsPAll':\n            case 'kronolithCtasklistsPG':\n            case 'kronolithCtasklistsPU':\n                var info = id.match(/kronolithC(.*)P(.*)/);\n                this.permsClickHandler(info[1], info[2]);\n                break;\n\n            case 'kronolithCinternalPAllShow':\n            case 'kronolithCtasklistsPAllShow':\n                var type = id.match(/kronolithC(.*)P/)[1];\n                this.permsClickHandler(type, 'All');\n                break;\n\n            case 'kronolithCinternalPAdvanced':\n            case 'kronolithCtasklistsPAdvanced':\n                var type = id.match(/kronolithC(.*)P/)[1];\n                if (orig.tagName != 'INPUT') {\n                    break;\n                }\n                this.activateAdvancedPerms(type);\n                if (orig.name.match(/u_.*||new/)) {\n                    this.insertGroupOrUser(type, 'user');\n                }\n                break;\n\n            case 'kronolithCinternalPUAdd':\n            case 'kronolithCinternalPGAdd':\n            case 'kronolithCtasklistsPUAdd':\n            case 'kronolithCtasklistsPGAdd':\n                var info = id.match(/kronolithC(.*)P(.)/);\n                this.insertGroupOrUser(info[1], info[2] == 'U' ? 'user' : 'group');\n                break;\n\n            case 'kronolithNavDay':\n            case 'kronolithNavWeek':\n            case 'kronolithNavMonth':\n            case 'kronolithNavYear':\n            case 'kronolithNavAgenda':\n                this.go(id.substring(12).toLowerCase() + ':' + this.date.dateString());\n                e.stop();\n                return;\n\n            case 'kronolithNavTasks':\n                this.go('tasks');\n                e.stop();\n                return;\n\n            case 'kronolithTasksAll':\n            case 'kronolithTasksComplete':\n            case 'kronolithTasksIncomplete':\n            case 'kronolithTasksFuture':\n                this.go('tasks:' + id.substring(14).toLowerCase());\n                e.stop();\n                return;\n\n            case 'kronolithOptions':\n                this.go('prefs');\n                e.stop();\n                return;\n\n            case 'kronolithLogout':\n                this.logout();\n                e.stop();\n                return;\n\n            case 'kronolithMinicalDate':\n                this.go('month:' + orig.retrieve('date'));\n                e.stop();\n                return;\n\n            case 'kronolithMinical':\n                if (orig.id == 'kronolithMinicalPrev') {\n                    var date = this.parseDate($('kronolithMinicalDate').retrieve('date'));\n                    date.previous().month();\n                    this.updateMinical(date, date.getMonth() == this.date.getMonth() ? this.view : undefined);\n                    e.stop();\n                    return;\n                }\n                if (orig.id == 'kronolithMinicalNext') {\n                    var date = this.parseDate($('kronolithMinicalDate').retrieve('date'));\n                    date.next().month();\n                    this.updateMinical(date, date.getMonth() == this.date.getMonth() ? this.view : null);\n                    e.stop();\n                    return;\n                }\n\n                var tmp = orig;\n                if (tmp.tagName != 'td') {\n                    tmp.up('td');\n                }\n                if (tmp) {\n                    if (tmp.retrieve('weekdate') &&\n                        tmp.hasClassName('kronolithMinicalWeek')) {\n                        this.go('week:' + tmp.retrieve('weekdate'));\n                    } else if (tmp.retrieve('date') &&\n                               !tmp.hasClassName('empty')) {\n                        this.go('day:' + tmp.retrieve('date'));\n                    }\n                }\n                e.stop();\n                return;\n\n            case 'kronolithEventsDay':\n                var date = this.date.clone();\n                date.add(Math.round((e.pointerY() - elt.cumulativeOffset().top + elt.up('.kronolithViewBody').scrollTop) / this.daySizes.height * 2) * 30).minutes();\n                this.go('event:' + date.toString('yyyyMMddHHmm'));\n                e.stop();\n                return;\n\n            case 'kronolithViewMonth':\n                if (orig.hasClassName('kronolithFirstCol')) {\n                    var date = orig.retrieve('date');\n                    if (date) {\n                        this.go('week:' + date);\n                        e.stop();\n                        return;\n                    }\n                }\n                e.stop();\n                return;\n\n            case 'kronolithViewYear':\n                var tmp = orig;\n                if (tmp.tagName != 'td') {\n                    tmp.up('td');\n                }\n                if (tmp) {\n                    if (tmp.retrieve('weekdate') &&\n                        tmp.hasClassName('kronolithMinicalWeek')) {\n                        this.go('week:' + tmp.retrieve('weekdate'));\n                    } else if (tmp.hasClassName('kronolithMinicalDate')) {\n                        this.go('month:' + tmp.retrieve('date'));\n                    } else if (tmp.retrieve('date') &&\n                               !tmp.hasClassName('empty')) {\n                        this.go('day:' + tmp.retrieve('date'));\n                    }\n                }\n                e.stop();\n                return;\n\n            case 'kronolithViewAgendaBody':\n                var tmp = orig;\n                if (tmp.tagName != 'TR') {\n                    tmp = tmp.up('tr');\n                }\n                if (tmp && tmp.retrieve('date')) {\n                    this.go('day:' + tmp.retrieve('date'));\n                }\n                e.stop();\n                return;\n\n            case 'kronolithSearchButton':\n                this.go('search:' + this.search + ':' + $F('kronolithSearchTerm'));\n                e.stop();\n                break;\n\n            case 'kronolithSearchFuture':\n                if (this.search != 'future') {\n                    this.go('search:future:' + $F('kronolithSearchTerm'));\n                }\n                e.stop();\n                break;\n\n            case 'kronolithSearchPast':\n                if (this.search != 'past') {\n                    this.go('search:past:' + $F('kronolithSearchTerm'));\n                }\n                e.stop();\n                break;\n\n            case 'kronolithSearchAll':\n                if (this.search != 'all') {\n                    this.go('search:all:' + $F('kronolithSearchTerm'));\n                }\n                e.stop();\n                break;\n\n            case 'kronolithNotifications':\n                this.Growler.toggleLog();\n                break;\n\n            case 'kronolithEventDialog':\n            case 'kronolithTaskDialog':\n                Horde_Calendar.hideCal();\n                return;\n\n            case 'kronolithCalendarDialog':\n                if (this.colorPicker) {\n                    this.colorPicker.hide();\n                }\n                return;\n            }\n\n            // Caution, this only works if the element has definitely only a\n            // single CSS class.\n            switch (elt.className) {\n            case 'kronolithDateChoice':\n            case 'kronolithGotoToday':\n                var view = this.view;\n                if (!$w('day week month year agenda').include(view)) {\n                    view = Kronolith.conf.login_view;\n                }\n                this.go(view + ':' + new Date().dateString());\n                e.stop();\n                return;\n\n            case 'kronolithPrev':\n            case 'kronolithNext':\n                var newDate = this.date.clone(),\n                    offset = elt.className == 'kronolithPrev' ? -1 : 1;\n                switch (this.view) {\n                case 'day':\n                case 'agenda':\n                    newDate.add(offset).day();\n                    break;\n                case 'week':\n                    newDate.add(offset).week();\n                    break;\n                case 'month':\n                    newDate.add(offset).month();\n                    break;\n                case 'year':\n                    newDate.add(offset).year();\n                    break;\n                }\n                this.go(this.view + ':' + newDate.dateString());\n                e.stop();\n                return;\n\n            case 'kronolithAdd':\n                this.go('calendar:' + id.replace(/kronolithAdd/, ''));\n                e.stop();\n                return;\n\n            case 'kronolithTabLink':\n                this.openTab(elt);\n                e.stop();\n                break;\n\n            case 'kronolithFormCancel':\n                this.closeRedBox();\n                this.resetMap();\n                this.go(this.lastLocation);\n                e.stop();\n                break;\n\n            case 'kronolithEventTag':\n                this.eventTagAc.addNewItemNode(elt.getText());\n                e.stop();\n                break;\n\n            case 'kronolithCalendarTag':\n                this.calendarTagAc.addNewItemNode(elt.getText());\n                e.stop();\n                break;\n\n            case 'kronolithEventGeo':\n                this.initializeMap(true);\n                this.geocode($F('kronolithEventLocation'));\n                e.stop();\n                break;\n\n            case 'kronolithTaskRow':\n                if (elt.retrieve('taskid')) {\n                    this.go('task:' + elt.retrieve('tasklist') + ':' + elt.retrieve('taskid'));\n                }\n                e.stop();\n                return;\n\n            case 'kronolithCalEdit':\n                this.go('calendar:' + elt.next().retrieve('calendarclass') + '|' + elt.next().retrieve('calendar'));\n                e.stop();\n                return;\n\n            case 'kronolithMore':\n                this.go('day:' + elt.retrieve('date'));\n                e.stop();\n                return;\n\n            case 'kronolithDatePicker':\n                id = elt.readAttribute('id');\n                Horde_Calendar.open(id, Date.parseExact($F(id.replace(/Picker$/, 'Date')), Kronolith.conf.date_format));\n                e.stop();\n                return;\n\n            case 'kronolithColorPicker':\n                var input = elt.previous();\n                this.colorPicker = new ColorPicker({\n                    color: $F(input),\n                    offsetParent: elt,\n                    update: [[input, 'value'],\n                             [input, 'background']]\n                });\n                e.stop();\n                return;\n            }\n\n            if (elt.hasClassName('kronolithEvent')) {\n                if (!Object.isUndefined(elt.retrieve('ajax'))) {\n                    this.go(elt.retrieve('ajax'));\n                } else {\n                    this.go('event:' + elt.retrieve('calendar') + ':' + elt.retrieve('eventid') + ':' + elt.up().retrieve('date'));\n                }\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithMonthDay')) {\n                if (orig.hasClassName('kronolithDay')) {\n                    var date = orig.retrieve('date');\n                    if (date) {\n                        this.go('day:' + date);\n                        e.stop();\n                        return;\n                    }\n                }\n                this.go('event:' + elt.retrieve('date'));\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithWeekDay')) {\n                this.go('day:' + elt.retrieve('date'));\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithEventsWeek') ||\n                       elt.hasClassName('kronolithAllDayContainer')) {\n                var date = elt.retrieve('date');\n                if (elt.hasClassName('kronolithAllDayContainer')) {\n                    date += 'all';\n                } else {\n                    date = this.parseDate(date);\n                    date.add(Math.round((e.pointerY() - elt.cumulativeOffset().top + elt.up('.kronolithViewBody').scrollTop) / this.weekSizes.height * 2) * 30).minutes();\n                    date = date.toString('yyyyMMddHHmm');\n                }\n                this.go('event:' + date);\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithTaskCheckbox')) {\n                var taskid = elt.up('tr.kronolithTaskRow', 0).retrieve('taskid'),\n                    tasklist = elt.up('tr.kronolithTaskRow', 0).retrieve('tasklist');\n                this.toggleCompletionClass(taskid);\n                this.doAction('toggleCompletion',\n                              { list: tasklist, id: taskid },\n                              function(r) {\n                                  if (r.response.toggled) {\n                                      this.toggleCompletion(tasklist, taskid);\n                                  } else {\n                                      this.toggleCompletionClass(taskid);\n                                  }\n                              }.bind(this));\n                e.stop();\n                return;\n            } else if (elt.hasClassName('kronolithCalendarSave')) {\n                if (!elt.disabled) {\n                    elt.disable();\n                    if (!this.saveCalendar(elt.up('form'))) {\n                        elt.enable();\n                    }\n                }\n                e.stop();\n                break;\n            } else if (elt.hasClassName('kronolithCalendarContinue')) {\n                if (elt.disabled) {\n                    e.stop();\n                    break;\n                }\n\n                elt.disable();\n                var form = elt.up('form'),\n                    type = form.id.replace(/kronolithCalendarForm/, ''),\n                    i = 1;\n                while (!$('kronolithCalendar' + type + i).visible()) {\n                    i++;\n                }\n                if (type == 'remote') {\n                    var params = { url: $F('kronolithCalendarremoteUrl') };\n                    if (i == 1) {\n                        if (!$F('kronolithCalendarremoteUrl')) {\n                            this.showNotifications([ { type: 'horde.warning', message: Kronolith.text.no_url }]);\n                            e.stop();\n                            break;\n                        }\n                        this.doAction('getRemoteInfo',\n                                      params,\n                                      function(r) {\n                                          if (r.response.success) {\n                                              if (r.response.name) {\n                                                  $('kronolithCalendarremoteName').setValue(r.response.name);\n                                              }\n                                              if (r.response.desc) {\n                                                  $('kronolithCalendarremoteDescription').setValue(r.response.desc);\n                                              }\n                                              this.calendarNext(type);\n                                              this.calendarNext(type);\n                                          } else if (r.response.auth) {\n                                              this.calendarNext(type);\n                                          } else {\n                                              elt.enable();\n                                          }\n                                      }.bind(this),\n                                      { asynchronous: false });\n                    }\n                    if (i == 2) {\n                        if ($F('kronolithCalendarremoteUsername')) {\n                            params.user = $F('kronolithCalendarremoteUsername');\n                            params.password =  $F('kronolithCalendarremotePassword');\n                        }\n                        this.doAction('getRemoteInfo',\n                                      params,\n                                      function(r) {\n                                          if (r.response.success) {\n                                              if (r.response.name &&\n                                                  !$F('kronolithCalendarremoteName')) {\n                                                  $('kronolithCalendarremoteName').setValue(r.response.name);\n                                              }\n                                              if (r.response.desc &&\n                                                  !$F('kronolithCalendarremoteDescription')) {\n                                                  $('kronolithCalendarremoteDescription').setValue(r.response.desc);\n                                              }\n                                              this.calendarNext(type);\n                                          } else if (r.response.auth) {\n                                              this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.wrong_auth }]);\n                                              elt.enable();\n                                          } else {\n                                              elt.enable();\n                                          }\n                                      }.bind(this));\n                    }\n                    e.stop();\n                    break;\n                }\n                this.calendarNext(type);\n                e.stop();\n                break;\n            } else if (elt.hasClassName('kronolithCalendarDelete')) {\n                var form = elt.up('form'),\n                    type = form.id.replace(/kronolithCalendarForm/, ''),\n                    calendar = $F('kronolithCalendar' + type + 'Id');\n\n                if ((type == 'tasklists' &&\n                     !window.confirm(Kronolith.text.delete_tasklist)) ||\n                    (type != 'tasklists' &&\n                     !window.confirm(Kronolith.text.delete_calendar))) {\n                    e.stop();\n                    break;\n                }\n\n                if (!elt.disabled) {\n                    elt.disable();\n                    this.doAction('deleteCalendar',\n                                  { type: type, calendar: calendar },\n                                  function(r) {\n                                      if (r.response.deleted) {\n                                          this.deleteCalendar(type, calendar);\n                                      }\n                                      this.closeRedBox();\n                                      this.go(this.lastLocation);\n                                  }.bind(this));\n                }\n                e.stop();\n                break;\n            } else if (elt.hasClassName('kronolithCalendarSubscribe') ||\n                       elt.hasClassName('kronolithCalendarUnsubscribe')) {\n                var form = elt.up('form');\n                this.toggleCalendar($F(form.down('input[name=type]')),\n                                    $F(form.down('input[name=calendar]')));\n                this.closeRedBox();\n                this.go(this.lastLocation);\n                e.stop();\n                break;\n            } else if (elt.tagName == 'INPUT' &&\n                       (elt.name == 'event_alarms[]' ||\n                        elt.name == 'task[alarm_methods][]')) {\n                if (elt.name == 'event_alarms[]') {\n                    $('kronolithEventAlarmOn').setValue(1);\n                    $('kronolithEventAlarmDefaultOff').setValue(1);\n                } else {\n                    $('kronolithTaskAlarmOn').setValue(1);\n                    $('kronolithTaskAlarmDefaultOff').setValue(1);\n                }\n                if ($(elt.id + 'Params')) {\n                    if (elt.getValue()) {\n                        $(elt.id + 'Params').show();\n                    } else {\n                        $(elt.id + 'Params').hide();\n                    }\n                }\n                break;\n            }\n\n            var calClass = elt.retrieve('calendarclass');\n            if (calClass) {\n                this.toggleCalendar(calClass, elt.retrieve('calendar'));\n                e.stop();\n                return;\n            }\n\n            elt = elt.up();\n        }\n        // Workaround Firebug bug.\n        Prototype.emptyFunction();\n    },\n\n    /**\n     * Handles date selections from a date picker.\n     */\n    datePickerHandler: function(e)\n    {\n        var field = e.element().previous();\n        field.setValue(e.memo.toString(Kronolith.conf.date_format));\n        this.updateTimeFields(field.identify());\n    },\n\n    /**\n     * Handles moving an event to a different day in month view.\n     */\n    onDrop: function(e)\n    {\n        var drop = e.element(),\n            el = e.memo.element;\n\n        if (drop == el.up()) {\n            return;\n        }\n\n        var lastDate = this.parseDate(el.up().retrieve('date')),\n            newDate = this.parseDate(drop.retrieve('date')),\n            diff = newDate.subtract(lastDate),\n            eventid = el.retrieve('eventid'),\n            cal = el.retrieve('calendar'),\n            viewDates = this.viewDates(this.date, this.view),\n            start = viewDates[0].toString('yyyyMMdd'),\n            end = viewDates[1].toString('yyyyMMdd'),\n            sig = start + end + (Math.random() + '').slice(2),\n            events = this.getCacheForDate(lastDate.toString('yyyyMMdd'), cal),\n            attributes = $H({ offDays: diff }),\n            event = events.find(function(e) { return e.key == eventid; });\n\n        drop.insert(el);\n        this.startLoading(cal, sig);\n        if (event.value.r) {\n            attributes.set('rday', lastDate);\n            attributes.set('cstart', this.cacheStart);\n            attributes.set('cend', this.cacheEnd);\n        }\n        this.doAction('updateEvent',\n                      {\n                          cal: cal,\n                          id: eventid,\n                          view: this.view,\n                          sig: sig,\n                          view_start: start,\n                          view_end: end,\n                          att: Object.toJSON(attributes)\n                      },\n                      function(r) {\n                          if (r.response.events) {\n                              // Check if this is the still the result of the\n                              // most current request.\n                              if (r.response.sig == this.eventsLoading[r.response.cal]) {\n                                  var days;\n                                  if ((this.view == 'month' &&\n                                       Kronolith.conf.max_events) ||\n                                      this.view == 'week' ||\n                                      this.view == 'day') {\n                                      days = this.findEventDays(cal, eventid);\n                                  }\n                                  this.removeEvent(cal, eventid);\n                                  if (days && days.length) {\n                                      this.reRender(days);\n                                  }\n                              }\n                              $H(r.response.events).each(function(days) {\n                                  $H(days.value).each(function(event) {\n                                      if (event.value.c.startsWith('tasks/')) {\n                                          var tasklist = event.value.c.substr(6),\n                                              task = event.key.substr(6),\n                                              taskObject;\n                                          if (this.tcache.get('incomplete') &&\n                                              this.tcache.get('incomplete').get(tasklist) &&\n                                              this.tcache.get('incomplete').get(tasklist).get(task)) {\n                                              taskObject = this.tcache.get('incomplete').get(tasklist).get(task);\n                                              taskObject.due = Date.parse(event.value.s);\n                                              this.tcache.get('incomplete').get(tasklist).set(task, taskObject);\n                                          }\n                                      }\n                                  }, this);\n                              }, this);\n                          }\n                          this.loadEventsCallback(r, false);\n                      }.bind(this));\n    },\n\n    onDragStart: function(e)\n    {\n        if (this.view == 'month') {\n            return;\n        }\n\n        var elt = e.element();\n\n        if (elt.hasClassName('kronolithDragger')) {\n            elt.up().addClassName('kronolithSelected');\n            DragDrop.Drags.getDrag(elt).top = elt.cumulativeOffset().top;\n        } else if (elt.hasClassName('kronolithEditable')) {\n            elt.addClassName('kronolithSelected').setStyle({ left: 0, width: this.view == 'week' ? '90%' : '95%', zIndex: 1 });\n        }\n\n        this.scrollTop = $(this.view == 'day' ? 'kronolithViewDay' : 'kronolithViewWeek').down('.kronolithViewBody').scrollTop;\n        this.scrollLast = this.scrollTop;\n    },\n\n    onDrag: function(e)\n    {\n        if (this.view == 'month') {\n            return;\n        }\n\n        var elt = e.element(),\n            drag = DragDrop.Drags.getDrag(elt),\n            event = drag.event.value,\n            storage = this.view + 'Sizes',\n            step = this[storage].height / 6;\n\n        if (elt.hasClassName('kronolithDragger')) {\n            // Resizing the event.\n            var div = elt.up(),\n                top = drag.ghost.cumulativeOffset().top,\n                scrollTop = $(this.view == 'day' ? 'kronolithViewDay' : 'kronolithViewWeek').down('.kronolithViewBody').scrollTop,\n                offset = 0,\n                height;\n\n            // Check if view has scrolled since last call.\n            if (scrollTop != this.scrollLast) {\n                offset = scrollTop - this.scrollLast;\n                this.scrollLast = scrollTop;\n            }\n            if (elt.hasClassName('kronolithDraggerTop')) {\n                offset += top - drag.top;\n                height = div.offsetHeight - offset;\n                div.setStyle({\n                    top: (div.offsetTop + offset) + 'px'\n                });\n                offset = drag.ghost.offsetTop;\n                drag.top = top;\n            } else {\n                offset += top - drag.top;\n                height = div.offsetHeight + offset;\n                offset = div.offsetTop;\n                drag.top = top;\n            }\n            div.setStyle({\n                height: height + 'px'\n            });\n\n            this.calculateEventDates(event, storage, step, offset, height);\n            drag.innerDiv.update('(' + event.start.toString(Kronolith.conf.time_format) + ' - ' + event.end.toString(Kronolith.conf.time_format) + ') ' + event.t.escapeHTML());\n        } else if (elt.hasClassName('kronolithEditable')) {\n            // Moving the event.\n            if (Object.isUndefined(drag.innerDiv)) {\n                drag.innerDiv = drag.ghost.down('.kronolithEventInfo');\n            }\n            if (this.view == 'week') {\n                var offsetX = Math.round(drag.ghost.offsetLeft / drag.stepX);\n                event.offsetDays = offsetX;\n                this.calculateEventDates(event, storage, step, drag.ghost.offsetTop, drag.divHeight, event.start.clone().addDays(offsetX), event.end.clone().addDays(offsetX));\n            } else {\n                event.offsetDays = 0;\n                this.calculateEventDates(event, storage, step, drag.ghost.offsetTop, drag.divHeight);\n            }\n            event.offsetTop = drag.ghost.offsetTop - drag.startTop;\n            drag.innerDiv.update('(' + event.start.toString(Kronolith.conf.time_format) + ' - ' + event.end.toString(Kronolith.conf.time_format) + ') ' + event.t.escapeHTML());\n            elt.clonePosition(drag.ghost, { offsetLeft: this.view == 'week' ? -2 : 0 });\n        }\n    },\n\n    onDragEnd: function(e)\n    {\n        if (this.view == 'month') {\n            return;\n        }\n\n        if (!e.element().hasClassName('kronolithDragger') &&\n            !e.element().hasClassName('kronolithEditable')) {\n            return;\n        }\n\n        var div = e.element(),\n            drag = DragDrop.Drags.getDrag(div),\n            event = drag.event,\n            date = drag.midnight,\n            storage = this.view + 'Sizes',\n            step = this[storage].height / 6,\n            dates = this.viewDates(date, this.view),\n            start = dates[0].dateString(),\n            end = dates[1].dateString(),\n            sig = start + end + (Math.random() + '').slice(2),\n            element, attributes;\n\n        div.removeClassName('kronolithSelected');\n        if (!Object.isUndefined(drag.innerDiv)) {\n            this.setEventText(drag.innerDiv, event.value);\n        }\n        this.startLoading(event.value.calendar, sig);\n        if (!Object.isUndefined(event.value.offsetTop)) {\n            attributes = $H({ offDays: event.value.offsetDays,\n                              offMins: event.value.offsetTop / step * 10 });\n            element = div;\n        } else if (div.hasClassName('kronolithDraggerTop')) {\n            attributes = $H({ start: event.value.start });\n            element = div.up();\n        } else if (div.hasClassName('kronolithDraggerBottom')) {\n            attributes = $H({ end: event.value.end });\n            element = div.up();\n        } else {\n            attributes = $H({ start: event.value.start,\n                              end: event.value.end });\n            element = div;\n        }\n        if (event.value.r) {\n            attributes.set('rstart', event.value.s);\n            attributes.set('rend', event.value.e);\n            attributes.set('cstart', this.cacheStart);\n            attributes.set('cend', this.cacheEnd);\n        }\n\n        element.retrieve('drags').invoke('destroy');\n\n        this.doAction(\n            'updateEvent',\n            {\n                cal: event.value.calendar,\n                id: event.key,\n                view: this.view,\n                sig: sig,\n                view_start: start,\n                view_end: end,\n                att: Object.toJSON(attributes)\n            },\n            function(r) {\n                // Check if this is the still the result of the most current\n                // request.\n                if (r.response.events &&\n                    r.response.sig == this.eventsLoading[r.response.cal]) {\n                    this.removeEvent(event.value.calendar, event.key);\n                }\n                this.loadEventsCallback(r, false);\n            }.bind(this));\n    },\n\n    editEvent: function(calendar, id, date, title)\n    {\n        if (this.redBoxLoading) {\n            return;\n        }\n        if (Object.isUndefined(this.eventTagAc)) {\n            this.editEvent.bind(this, calendar, id, date).defer();\n            return;\n        }\n\n        this.closeRedBox();\n        this.quickClose();\n        this.redBoxOnDisplay = RedBox.onDisplay;\n        RedBox.onDisplay = function() {\n            if (this.redBoxOnDisplay) {\n                this.redBoxOnDisplay();\n            }\n            try {\n                $('kronolithEventForm').focusFirstElement();\n            } catch(e) {}\n            if (Kronolith.conf.maps.driver &&\n                $('kronolithEventLinkMap').up().hasClassName('activeTab') &&\n                !this.mapInitialized) {\n\n                this.initializeMap();\n            }\n            RedBox.onDisplay = this.redBoxOnDisplay;\n        }.bind(this);\n\n        this.updateCalendarDropDown('kronolithEventTarget');\n        this.toggleAllDay(false);\n        this.openTab($('kronolithEventForm').down('.tabset a.kronolithTabLink'));\n        this.disableAlarmMethods('Event');\n        this.knl.kronolithEventStartTime.markSelected();\n        this.knl.kronolithEventEndTime.markSelected();\n        $('kronolithEventForm').reset();\n        this.resetMap();\n        this.attendeesAc.reset();\n        this.eventTagAc.reset();\n        $('kronolithEventAttendeesList').select('tr').invoke('remove');\n        if (Kronolith.conf.maps.driver) {\n            $('kronolithEventMapLink').hide();\n        }\n        $('kronolithEventSave').show().enable();\n        $('kronolithEventSaveAsNew').show().enable();\n        $('kronolithEventDelete').show().enable();\n        $('kronolithEventDeleteConfirm').enable();\n        $('kronolithEventTarget').show();\n        $('kronolithEventTargetRO').hide();\n        $('kronolithEventForm').down('.kronolithFormActions .kronolithSeparator').show();\n        if (id) {\n            RedBox.loading();\n            this.doAction('getEvent', { cal: calendar, id: id, date: date }, this.editEventCallback.bind(this));\n            $('kronolithEventTopTags').update();\n        } else {\n            this.doAction('listTopTags', null, this.topTagsCallback.curry('kronolithEventTopTags', 'kronolithEventTag'));\n            var d;\n            if (date) {\n                if (date.endsWith('all')) {\n                    date = date.substring(0, date.length - 3);\n                    $('kronolithEventAllday').setValue(true);\n                    this.toggleAllDay(true);\n                }\n                d = this.parseDate(date);\n            } else {\n                d = new Date();\n            }\n            if (title) {\n                $('kronolithEventTitle').setValue(title);\n            }\n            $('kronolithEventId').clear();\n            $('kronolithEventCalendar').clear();\n            $('kronolithEventTarget').setValue(Kronolith.conf.default_calendar);\n            $('kronolithEventDelete').hide();\n            $('kronolithEventStartDate').setValue(d.toString(Kronolith.conf.date_format));\n            $('kronolithEventStartTime').setValue(d.toString(Kronolith.conf.time_format));\n            d.add(1).hour();\n            this.duration = 60;\n            $('kronolithEventEndDate').setValue(d.toString(Kronolith.conf.date_format));\n            $('kronolithEventEndTime').setValue(d.toString(Kronolith.conf.time_format));\n            $('kronolithEventLinkExport').up('span').hide();\n            $('kronolithEventSaveAsNew').hide();\n            this.toggleRecurrence('None');\n            this.enableAlarm('Event', Kronolith.conf.default_alarm);\n            this.redBoxLoading = true;\n            RedBox.showHtml($('kronolithEventDialog').show());\n        }\n    },\n\n    /**\n     * Generates ajax request parameters for requests to save events.\n     *\n     * @return object  An object with request parameters.\n     */\n    saveEventParams: function()\n    {\n        var start, end, sig,\n            viewDates = this.viewDates(this.date, this.view),\n            params = { sig: viewDates[0].dateString() + viewDates[1].dateString() };\n        if (this.cacheStart) {\n            start = this.cacheStart.dateString();\n            end = this.cacheEnd.dateString();\n            params.view_start = start;\n            params.view_end = end;\n        }\n        params.view = this.view;\n        return params;\n    },\n\n    /**\n     * Submits the event edit form to create or update an event.\n     */\n    saveEvent: function(asnew)\n    {\n        if (this.wrongFormat.size()) {\n            this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.fix_form_values }]);\n            return;\n        }\n\n        var cal = $F('kronolithEventCalendar'),\n            target = $F('kronolithEventTarget'),\n            eventid = $F('kronolithEventId'),\n            params;\n\n        if (this.mapInitialized) {\n            $('kronolithEventMapZoom').value = this.map.getZoom();\n        }\n\n        params = $H($('kronolithEventForm').serialize({ hash: true }))\n            .merge(this.saveEventParams());\n        params.set('as_new', asnew ? 1 : 0);\n\n        this.eventTagAc.shutdown();\n        $('kronolithEventSave').disable();\n        $('kronolithEventSaveAsNew').disable();\n        $('kronolithEventDelete').disable();\n        this.startLoading(target, params.get('sig'));\n        this.doAction('saveEvent',\n                      params,\n                      function(r) {\n                          if (!asnew && r.response.events && eventid) {\n                              this.removeEvent(cal, eventid);\n                          }\n                          this.loadEventsCallback(r, false);\n                          if (r.response.events) {\n                              this.resetMap();\n                              this.closeRedBox();\n                              this.go(this.lastLocation);\n                          } else {\n                              $('kronolithEventSave').enable();\n                              $('kronolithEventSaveAsNew').enable();\n                              $('kronolithEventDelete').enable();\n                          }\n                      }.bind(this));\n    },\n\n    quickSaveEvent: function()\n    {\n        var text = $F('kronolithQuickinsertQ'),\n            cal = $F('kronolithQuickinsertCalendars'),\n            params;\n\n        params = $H($('kronolithEventForm').serialize({ hash: true }))\n            .merge(this.saveEventParams());\n        params.set('text', text);\n        params.set('cal', cal);\n\n        $('kronolithQuickinsert').fade({ duration: this.effectDur });\n        this.startLoading(cal, params.get('sig'));\n        this.doAction('quickSaveEvent',\n                      params,\n                      function(r) {\n                          this.loadEventsCallback(r, false);\n                          if (r.msgs.size()) {\n                              this.editEvent(null, null, null, text);\n                          } else {\n                              $('kronolithQuickinsertQ').value = '';\n                          }\n                      }.bind(this));\n    },\n\n    /**\n     * Closes and resets the quick event form.\n     */\n    quickClose: function()\n    {\n        $('kronolithQuickinsert').fade({ duration: this.effectDur });\n        $('kronolithQuickinsertQ').value = '';\n    },\n\n    topTagsCallback: function(update, tagclass, r)\n    {\n        $('kronolithEventTabTags').select('label').invoke('show');\n        if (!r.response.tags) {\n            $(update).update();\n            return;\n        }\n\n        var t = new Element('div');\n        r.response.tags.each(function(tag) {\n            if (tag == null) {\n                return;\n            }\n            t.insert(new Element('span', { className: tagclass }).update(tag.escapeHTML()));\n        });\n        $(update).update(t);\n    },\n\n    /**\n     * Callback method for showing event forms.\n     *\n     * @param object r  The ajax response object.\n     */\n    editEventCallback: function(r)\n    {\n        if (!r.response.event) {\n            RedBox.close();\n            this.go(this.lastLocation);\n            return;\n        }\n\n        var ev = r.response.event;\n\n        if (!Object.isUndefined(ev.ln)) {\n            this.loadPage(ev.ln);\n            this.closeRedBox();\n            return;\n        }\n\n        /* Basic information */\n        $('kronolithEventId').setValue(ev.id);\n        $('kronolithEventCalendar').setValue(ev.ty + '|' + ev.c);\n        $('kronolithEventTarget').setValue(ev.ty + '|' + ev.c);\n        $('kronolithEventTargetRO').update(Kronolith.conf.calendars[ev.ty][ev.c].name.escapeHTML());\n        $('kronolithEventTitle').setValue(ev.t);\n        $('kronolithEventLocation').setValue(ev.l);\n        if (ev.l && Kronolith.conf.maps.driver) {\n            $('kronolithEventMapLink').show();\n        }\n        $('kronolithEventUrl').setValue(ev.u);\n        $('kronolithEventAllday').setValue(ev.al);\n        this.toggleAllDay(ev.al);\n        $('kronolithEventStartDate').setValue(ev.sd);\n        $('kronolithEventStartTime').setValue(ev.st);\n        this.knl.kronolithEventStartTime.setSelected(ev.st);\n        $('kronolithEventEndDate').setValue(ev.ed);\n        $('kronolithEventEndTime').setValue(ev.et);\n        this.knl.kronolithEventEndTime.setSelected(ev.et);\n        this.duration = Math.abs(Date.parse(ev.e).getTime() - Date.parse(ev.s).getTime()) / 60000;\n        $('kronolithEventStatus').setValue(ev.x);\n        $('kronolithEventDescription').setValue(ev.d);\n        $('kronolithEventPrivate').setValue(ev.pv);\n        $('kronolithEventLinkExport').up('span').show();\n        $('kronolithEventExport').href = Kronolith.conf.URI_EVENT_EXPORT.interpolate({ id: ev.id, calendar: ev.c, type: ev.ty });\n\n        /* Alarm */\n        if (ev.a) {\n            this.enableAlarm('Event', ev.a);\n            if (ev.m) {\n                $('kronolithEventAlarmDefaultOff').checked = true;\n                $H(ev.m).each(function(method) {\n                    $('kronolithEventAlarm' + method.key).setValue(1);\n                    if ($('kronolithEventAlarm' + method.key + 'Params')) {\n                        $('kronolithEventAlarm' + method.key + 'Params').show();\n                        $H(method.value).each(function(param) {\n                            var input = $('kronolithEventAlarmParam' + param.key);\n                            if (input.type == 'radio') {\n                                input.up('form').select('input[type=radio]').each(function(radio) {\n                                    if (radio.name == input.name &&\n                                        radio.value == param.value) {\n                                        radio.setValue(1);\n                                        throw $break;\n                                    }\n                                });\n                            } else {\n                                input.setValue(param.value);\n                            }\n                        });\n                    }\n                });\n            }\n        } else {\n            $('kronolithEventAlarmOff').setValue(true);\n        }\n\n        /* Recurrence */\n        if (ev.r) {\n            var scheme = Kronolith.conf.recur[ev.r.t],\n                schemeLower = scheme.toLowerCase(),\n                div = $('kronolithEventRepeat' + scheme);\n            $('kronolithEventLink' + scheme).setValue(true);\n            if (scheme == 'Monthly' || scheme == 'Yearly') {\n                div.down('input[name=recur_' + schemeLower + '_scheme][value=' + ev.r.t + ']').setValue(true);\n            }\n            if (scheme == 'Weekly') {\n                div.select('input[type=checkbox]').each(function(input) {\n                    if (input.name == 'weekly[]' &&\n                        input.value & ev.r.d) {\n                        input.setValue(true);\n                    }\n                });\n            }\n            if (ev.r.i == 1) {\n                div.down('input[name=recur_' + schemeLower + '][value=1]').setValue(true);\n            } else {\n                div.down('input[name=recur_' + schemeLower + '][value=0]').setValue(true);\n                div.down('input[name=recur_' + schemeLower + '_interval]').setValue(ev.r.i);\n            }\n            if (!Object.isUndefined(ev.r.e)) {\n                $('kronolithEventRepeatLength').down('input[name=recur_end_type][value=date]').setValue(true);\n                $('kronolithEventRecurDate').setValue(Date.parse(ev.r.e).toString(Kronolith.conf.date_format));\n            } else if (!Object.isUndefined(ev.r.c)) {\n                $('kronolithEventRepeatLength').down('input[name=recur_end_type][value=count]').setValue(true);\n                $('kronolithEventRecurCount').setValue(ev.r.c);\n            } else {\n                $('kronolithEventRepeatLength').down('input[name=recur_end_type][value=none]').setValue(true);\n            }\n            this.toggleRecurrence(scheme);\n        } else if (ev.bid) {\n            var div = $('kronolithEventRepeatException');\n            div.down('span').update(ev.eod);\n            this.toggleRecurrence('Exception');\n        } else {\n            this.toggleRecurrence('None');\n        }\n\n        /* Attendees */\n        if (this.attendeeStartDateHandler) {\n            $('kronolithEventStartDate').stopObserving('change', this.attendeeStartDateHandler);\n        }\n        if (!Object.isUndefined(ev.at)) {\n            this.attendeesAc.reset(ev.at.pluck('l'));\n            ev.at.each(this.addAttendee.bind(this));\n            if (this.fbLoading) {\n                $('kronolithFBLoading').show();\n            }\n            this.attendeeStartDateHandler = function() {\n                ev.at.each(function(attendee) {\n                    this.insertFreeBusy(attendee.l);\n                }, this);\n            }.bind(this);\n            $('kronolithEventStartDate').observe('change', this.attendeeStartDateHandler);\n        }\n\n        /* Tags */\n        this.eventTagAc.reset(ev.tg);\n\n        /* Geo */\n        if (ev.gl) {\n            $('kronolithEventLocationLat').value = ev.gl.lat;\n            $('kronolithEventLocationLon').value = ev.gl.lon;\n            $('kronolithEventMapZoom').value = Math.max(1, ev.gl.zoom);\n        }\n\n        if (!ev.pe) {\n            $('kronolithEventSave').hide();\n            this.eventTagAc.disable();\n            $('kronolithEventTabTags').select('label').invoke('hide');\n        } else {\n             this.doAction('listTopTags', null, this.topTagsCallback.curry('kronolithEventTopTags', 'kronolithEventTag'));\n        }\n        if (!ev.pd) {\n            $('kronolithEventDelete').hide();\n            $('kronolithEventTarget').hide();\n            $('kronolithEventTargetRO').show();\n        }\n\n        this.setTitle(ev.t);\n        this.redBoxLoading = true;\n        RedBox.showHtml($('kronolithEventDialog').show());\n\n        /* Hide alarm message for this event. */\n        if (r.msgs) {\n            r.msgs = r.msgs.reject(function(msg) {\n                if (msg.type != 'horde.alarm') {\n                    return false;\n                }\n                var alarm = msg.flags.alarm;\n                if (alarm.params && alarm.params.notify &&\n                    alarm.params.notify.show &&\n                    alarm.params.notify.show.calendar &&\n                    alarm.params.notify.show.event &&\n                    alarm.params.notify.show.calendar == ev.c &&\n                    alarm.params.notify.show.event == ev.id) {\n                    return true;\n                }\n                return false;\n            });\n        }\n    },\n\n    /**\n     * Adds an attendee row to the free/busy table.\n     *\n     * @param object attendee  An attendee object with the properties:\n     *                         - e: email address\n     *                         - l: the display name of the attendee\n     */\n    addAttendee: function(attendee)\n    {\n        if (typeof attendee == 'string') {\n            if (attendee.include('@')) {\n                this.doAction('parseEmailAddress',\n                              { email: attendee },\n                              function (r) {\n                                  if (r.response.email) {\n                                      this.addAttendee({ e: r.response.email, l: attendee });\n                                  }\n                              }.bind(this));\n                return;\n            } else {\n                attendee = { l: attendee };\n            }\n        }\n\n        if (attendee.e) {\n            this.fbLoading++;\n            this.doAction('getFreeBusy',\n                          { email: attendee.e },\n                          function(r) {\n                              this.fbLoading--;\n                              if (!this.fbLoading) {\n                                  $('kronolithFBLoading').hide();\n                              }\n                              if (Object.isUndefined(r.response.fb)) {\n                                  return;\n                              }\n                              this.freeBusy.get(attendee.l)[1] = r.response.fb;\n                              this.insertFreeBusy(attendee.l);\n                          }.bind(this));\n        }\n\n        var tr = new Element('tr'), response, i;\n        this.freeBusy.set(attendee.l, [ tr ]);\n        switch (attendee.r) {\n            case 1: response = 'None'; break;\n            case 2: response = 'Accepted'; break;\n            case 3: response = 'Declined'; break;\n            case 4: response = 'Tentative'; break;\n        }\n        tr.insert(new Element('td')\n                  .writeAttribute('title', attendee.l)\n                  .addClassName('kronolithAttendee' + response)\n                  .insert(attendee.e ? attendee.e.escapeHTML() : attendee.l.escapeHTML()));\n        for (i = 0; i < 24; i++) {\n            tr.insert(new Element('td', { className: 'kronolithFBUnknown' }));\n        }\n        $('kronolithEventAttendeesList').down('tbody').insert(tr);\n    },\n\n    /**\n     * Removes an attendee row from the free/busy table.\n     *\n     * @param object attendee  An attendee object with the properties:\n     *                         - e: email address\n     *                         - l: the display name of the attendee\n     */\n    removeAttendee: function(attendee)\n    {\n        var row = this.freeBusy.get(attendee)[0];\n        row.purge();\n        row.remove();\n    },\n\n    /**\n     * Updates rows with free/busy information in the attendees table.\n     *\n     * @todo Update when changing dates; only show free time for fb times we\n     *       actually received.\n     *\n     * @param string attendee  An attendee display name as the free/busy\n     *                         identifier.\n     */\n    insertFreeBusy: function(attendee)\n    {\n        if (!$('kronolithEventDialog').visible() ||\n            !this.freeBusy.get(attendee)) {\n            return;\n        }\n        var fb = this.freeBusy.get(attendee)[1],\n            tr = this.freeBusy.get(attendee)[0],\n            td = tr.select('td')[1],\n            div = td.down('div');\n        if (!td.getWidth()) {\n            this.insertFreeBusy.bind(this, attendee).defer();\n            return;\n        }\n        tr.select('td').each(function(td, i) {\n            if (i != 0) {\n                td.className = 'kronolithFBFree';\n            }\n            i++;\n        });\n        if (div) {\n            div.purge();\n            div.remove();\n        }\n        var start = Date.parseExact($F('kronolithEventStartDate'), Kronolith.conf.date_format),\n            end = start.clone().add(1).days(),\n            width = td.getWidth();\n        div = new Element('div').setStyle({ position: 'relative', height: td.offsetHeight + 'px' });\n        td.insert(div);\n        $H(fb.b).each(function(busy) {\n            var from = new Date(), to = new Date(), left;\n            from.setTime(busy.key * 1000);\n            to.setTime(busy.value * 1000);\n            if (from.isAfter(end) || to.isBefore(start)) {\n                return;\n            }\n            if (from.isBefore(start)) {\n                from = start.clone();\n            }\n            if (to.isAfter(end)) {\n                to = end.clone();\n            }\n            if (to.getHours() === 0 && to.getMinutes() === 0) {\n                to.add(-1).minutes();\n            }\n            left = from.getHours() + from.getMinutes() / 60;\n            div.insert(new Element('div', { className: 'kronolithFBBusy' }).setStyle({ zIndex: 1, top: 0, left: (left * width) + 'px', width: (((to.getHours() + to.getMinutes() / 60) - left) * width) + 'px' }));\n        });\n    },\n\n    /**\n     * Toggles the start and end time fields of the event edit form on and off.\n     *\n     * @param boolean on  Whether the event is an all-day event, i.e. the time\n     *                    fields should be turned off. If not specified, the\n     *                    current state is toggled.\n     */\n    toggleAllDay: function(on)\n    {\n        if (Object.isUndefined(on)) {\n            on = $('kronolithEventStartTimeLabel').getStyle('visibility') == 'visible';\n        }\n        $('kronolithEventStartTimeLabel').setStyle({ visibility: on ? 'hidden' : 'visible' });\n        $('kronolithEventEndTimeLabel').setStyle({ visibility: on ? 'hidden' : 'visible' });\n    },\n\n    /**\n     * Enables the alarm in the event or task form and sets the correct value\n     * and unit.\n     *\n     * @param string type    The object type, either 'Event' or 'Task'.\n     * @param integer alarm  The alarm time in seconds.\n     */\n    enableAlarm: function(type, alarm) {\n        if (!alarm) {\n            return;\n        }\n        type = 'kronolith' + type + 'Alarm';\n        $(type + 'On').setValue(true);\n        [10080, 1440, 60, 1].each(function(unit) {\n            if (alarm % unit === 0) {\n                $(type + 'Value').setValue(alarm / unit);\n                $(type + 'Unit').setValue(unit);\n                throw $break;\n            }\n        });\n    },\n\n    /**\n     * Disables all custom alarm methods in the event form.\n     */\n    disableAlarmMethods: function(type) {\n        $('kronolith' + type + 'TabReminder').select('input').each(function(input) {\n            if (input.name == (type == 'Event' ? 'event_alarms[]' : 'task[alarm_methods][]')) {\n                input.setValue(0);\n                if ($(input.id + 'Params')) {\n                    $(input.id + 'Params').hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Toggles the recurrence fields of the event edit form.\n     *\n     * @param string recur  The recurrence part of the field name, i.e. 'None',\n     *                      'Daily', etc.\n     */\n    toggleRecurrence: function(recur)\n    {\n        if (recur == 'Exception') {\n            if (!$('kronolithEventRepeatException').visible()) {\n                $('kronolithEventTabRecur').select('div').invoke('hide');\n                $('kronolithEventRepeatException').show();\n            }\n        } else if (recur != 'None') {\n            var div = $('kronolithEventRepeat' + recur),\n                length = $('kronolithEventRepeatLength');\n            if (!div.visible()) {\n                $('kronolithEventTabRecur').select('div').invoke('hide');\n                div.show();\n                length.show();\n                $('kronolithEventRepeatType').show();\n            }\n            switch (recur) {\n            case 'Daily':\n            case 'Weekly':\n            case 'Monthly':\n            case 'Yearly':\n                var recurLower = recur.toLowerCase();\n                if (div.down('input[name=recur_' + recurLower + '][value=1]').checked) {\n                    div.down('input[name=recur_' + recurLower + '_interval]').disable();\n                } else {\n                    div.down('input[name=recur_' + recurLower + '_interval]').enable();\n                }\n                break;\n            }\n\n            if (length.down('input[name=recur_end_type][value=date]').checked) {\n                $('kronolithEventRecurDate').enable();\n                $('kronolithEventRecurPicker').setStyle({ visibility: 'visible' });\n            } else {\n                $('kronolithEventRecurDate').disable();\n                $('kronolithEventRecurPicker').setStyle({ visibility: 'hidden' });\n            }\n            if (length.down('input[name=recur_end_type][value=count]').checked) {\n                $('kronolithEventRecurCount').enable();\n            } else {\n                $('kronolithEventRecurCount').disable();\n            }\n        } else {\n            if (!$('kronolithEventRepeatType').visible()) {\n                $('kronolithEventTabRecur').select('div').invoke('hide');\n                $('kronolithEventRepeatType').show();\n            }\n        }\n    },\n\n    /**\n     * Returns the Date object representing the date and time specified in the\n     * event form's start or end fields.\n     *\n     * @param string what  Which fields to parse, either 'start' or 'end'.\n     *\n     * @return Date  The date object or null if the fields can't be parsed.\n     */\n    getDate: function(what) {\n        var dateElm, timeElm, date, time;\n        if (what == 'start') {\n            dateElm = 'kronolithEventStartDate';\n            timeElm = 'kronolithEventStartTime';\n        } else {\n            dateElm = 'kronolithEventEndDate';\n            timeElm = 'kronolithEventEndTime';\n        }\n        date = Date.parseExact($F(dateElm), Kronolith.conf.date_format)\n            || Date.parse($F(dateElm));\n        if (date) {\n            time = Date.parseExact($F(timeElm), Kronolith.conf.time_format);\n            if (!time) {\n                time = Date.parse($F(timeElm));\n            }\n            if (time) {\n                date.setHours(time.getHours());\n                date.setMinutes(time.getMinutes());\n            }\n        }\n        return date;\n    },\n\n    checkDate: function(e) {\n        var elm = e.element();\n        if ($F(elm)) {\n            var date = Date.parseExact($F(elm), Kronolith.conf.date_format) || Date.parse($F(elm));\n            if (date) {\n                elm.setValue(date.toString(Kronolith.conf.date_format));\n                this.wrongFormat.unset(elm.id);\n            } else {\n                this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.wrong_date_format.interpolate({ wrong: $F(elm), right: new Date().toString(Kronolith.conf.date_format) }) }]);\n                this.wrongFormat.set(elm.id, true);\n            }\n        }\n    },\n\n    /**\n     * Attaches a KeyNavList drop down to one of the time fields.\n     *\n     * @param string|Element field  A time field (id).\n     *\n     * @return KeyNavList  The drop down list object.\n     */\n    attachTimeDropDown: function(field)\n    {\n        var list = [], d = new Date(), time, opts;\n\n        d.setHours(0);\n        d.setMinutes(0);\n        do {\n            time = d.toString(Kronolith.conf.time_format);\n            list.push({ l: time, v: time });\n            d.add(30).minutes();\n        } while (d.getHours() !== 0 || d.getMinutes() !== 0);\n\n        field = $(field);\n        opts = {\n            list: list,\n            domParent: field.up('.kronolithDialog'),\n            onChoose: function(value) {\n                if (value) {\n                    field.setValue(value);\n                }\n                this.updateTimeFields(field.identify());\n            }.bind(this)\n        };\n\n        this.knl[field.id] = new KeyNavList(field, opts);\n\n        return this.knl[field.id];\n    },\n\n    checkTime: function(e) {\n        var elm = e.element();\n        if ($F(elm)) {\n            var time = Date.parseExact(new Date().toString(Kronolith.conf.date_format) + ' ' + $F(elm), Kronolith.conf.date_format + ' ' + Kronolith.conf.time_format) || Date.parse(new Date().toString('yyyy-MM-dd ') + $F(elm));\n            if (time) {\n                elm.setValue(time.toString(Kronolith.conf.time_format));\n                this.wrongFormat.unset(elm.id);\n            } else {\n                this.showNotifications([{ type: 'horde.warning', message: Kronolith.text.wrong_time_format.interpolate({ wrong: $F(elm), right: new Date().toString(Kronolith.conf.time_format) }) }]);\n                this.wrongFormat.set(elm.id, true);\n            }\n        }\n    },\n\n    /**\n     * Updates the end time in the event form after changing the start time.\n     */\n    updateEndTime: function() {\n        var date = this.getDate('start');\n        if (!date) {\n            return;\n        }\n        date.add(this.duration).minutes();\n        $('kronolithEventEndDate').setValue(date.toString(Kronolith.conf.date_format));\n        $('kronolithEventEndTime').setValue(date.toString(Kronolith.conf.time_format));\n    },\n\n    /**\n     * Event handler for scrolling the mouse over the date field.\n     *\n     * @param Event e       The mouse event.\n     * @param string field  The field name.\n     */\n    scrollDateField: function(e, field) {\n        var date = Date.parseExact($F(field), Kronolith.conf.date_format);\n        if (!date || (!e.wheelData && !e.detail)) {\n            return;\n        }\n        date.add(e.wheelData > 0 || e.detail < 0 ? 1 : -1).days();\n        $(field).setValue(date.toString(Kronolith.conf.date_format));\n        switch (field) {\n        case 'kronolithEventStartDate':\n            this.updateEndTime();\n            break;\n        case 'kronolithEventEndDate':\n            var start = this.getDate('start'), end = this.getDate('end');\n            if (start) {\n                if (start.isAfter(end)) {\n                    $('kronolithEventStartDate').setValue(date.toString(Kronolith.conf.date_format));\n                    $('kronolithEventStartTime').setValue($F('kronolithEventEndTime'));\n                }\n                this.duration = Math.abs(date.getTime() - start.getTime()) / 60000;\n            }\n            break;\n        }\n    },\n\n    /**\n     * Event handler for scrolling the mouse over the time field.\n     *\n     * @param Event e       The mouse event.\n     * @param string field  The field name.\n     */\n    scrollTimeField: function(e, field) {\n        var time = Date.parseExact($F(field), Kronolith.conf.time_format) || Date.parse($F(field)),\n            newTime, minute;\n        if (!time || (!e.wheelData && !e.detail)) {\n            return;\n        }\n\n        newTime = time.clone();\n        newTime.add(e.wheelData > 0 || e.detail < 0 ? 10 : -10).minutes();\n        minute = newTime.getMinutes();\n        if (minute % 10) {\n            if (e.wheelData > 0 || e.detail < 0) {\n                minute = minute / 10 | 0;\n            } else {\n                minute = (minute - 10) / 10 | 0;\n            }\n            minute *= 10;\n            newTime.setMinutes(minute);\n        }\n        if (newTime.getDate() != time.getDate()) {\n            if (newTime.isAfter(time)) {\n                newTime = time.clone().set({ hour: 23, minute: 59 });\n            } else {\n                newTime = time.clone().set({ hour: 0, minute: 0 });\n            }\n        }\n\n        $(field).setValue(newTime.toString(Kronolith.conf.time_format));\n        this.updateTimeFields(field);\n\n        /* Mozilla bug https://bugzilla.mozilla.org/show_bug.cgi?id=502818\n         * Need to stop or else multiple scroll events may be fired. We\n         * lose the ability to have the mousescroll bubble up, but that is\n         * more desirable than having the wrong scrolling behavior. */\n        if (Prototype.Browser.Gecko && !e.stop) {\n            Event.stop(e);\n        }\n    },\n\n    /**\n     * Updates the time fields of the event dialog after either has been\n     * changed.\n     *\n     * @param string field  The id of the field that has been changed.\n     */\n    updateTimeFields: function(field)\n    {\n        switch (field) {\n        case 'kronolithEventStartDate':\n        case 'kronolithEventStartTime':\n            this.updateEndTime();\n            break;\n        case 'kronolithEventEndDate':\n        case 'kronolithEventEndTime':\n            var start = this.getDate('start'), end = this.getDate('end');\n            if (start) {\n                if (start.isAfter(end)) {\n                    $('kronolithEventStartDate').setValue(end.toString(Kronolith.conf.date_format));\n                    $('kronolithEventStartTime').setValue($F('kronolithEventEndTime'));\n                }\n                this.duration = Math.abs(end.getTime() - start.getTime()) / 60000;\n            }\n            break;\n        }\n    },\n\n    /**\n     * Closes a RedBox overlay, after saving its content to the body.\n     */\n    closeRedBox: function()\n    {\n        if (!RedBox.getWindow()) {\n            return;\n        }\n        var content = RedBox.getWindowContents();\n        if (content) {\n            document.body.insert(content.hide());\n        }\n        RedBox.close();\n    },\n\n    // By default, no context onShow action\n    contextOnShow: Prototype.emptyFunction,\n\n    // By default, no context onClick action\n    contextOnClick: Prototype.emptyFunction,\n\n    // Map\n    initializeMap: function(ignoreLL)\n    {\n        if (this.mapInitialized) {\n            return;\n        }\n        var layers = [];\n        if (Kronolith.conf.maps.providers) {\n            Kronolith.conf.maps.providers.each(function(l) {\n                var p = new HordeMap[l]();\n                $H(p.getLayers()).values().each(function(e) {layers.push(e);});\n            });\n        }\n\n        this.map = new HordeMap.Map[Kronolith.conf.maps.driver]({\n            elt: 'kronolithEventMap',\n            delayed: true,\n            layers: layers,\n            markerDragEnd: this.onMarkerDragEnd.bind(this),\n            mapClick: this.afterClickMap.bind(this)\n        });\n\n        if ($('kronolithEventLocationLat').value && !ignoreLL) {\n            var ll = { lat:$('kronolithEventLocationLat').value, lon: $('kronolithEventLocationLon').value };\n            // Note that we need to cast the value of zoom to an integer here,\n            // otherwise the map display breaks.\n            this.placeMapMarker(ll, true, $('kronolithEventMapZoom').value - 0);\n        }\n        //@TODO: check for Location field - and if present, but no lat/lon value, attempt to\n        // geocode it.\n        this.map.display();\n        this.mapInitialized = true;\n    },\n\n    resetMap: function()\n    {\n        this.mapInitialized = false;\n        $('kronolithEventLocationLat').value = null;\n        $('kronolithEventLocationLon').value = null;\n        $('kronolithEventMapZoom').value = null;\n        if (this.mapMarker) {\n            this.map.removeMarker(this.mapMarker, {});\n            this.mapMarker = null;\n        }\n        if (this.map) {\n            this.map.destroy();\n            this.map = null;\n        }\n    },\n\n    /**\n     * Callback for handling marker drag end.\n     *\n     * @param object r  An object that implenents a getLonLat() method to obtain\n     *                  the new location of the marker.\n     */\n    onMarkerDragEnd: function(r)\n    {\n        var ll = r.getLonLat();\n        $('kronolithEventLocationLon').value = ll.lon;\n        $('kronolithEventLocationLat').value = ll.lat;\n        var gc = new HordeMap.Geocoder[Kronolith.conf.maps.geocoder](this.map.map, 'kronolithEventMap');\n        gc.reverseGeocode(ll, this.onReverseGeocode.bind(this), this.onGeocodeError.bind(this) );\n    },\n\n    /**\n     * Callback for handling a reverse geocode request.\n     *\n     * @param array r  An array of objects containing the results. Each object in\n     *                 the array is {lat:, lon:, address}\n     */\n    onReverseGeocode: function(r)\n    {\n        if (!r.length) {\n            return;\n        }\n        $('kronolithEventLocation').value = r[0].address;\n    },\n\n    onGeocodeError: function(r)\n    {\n        $('kronolithEventGeo_loading_img').toggle();\n        KronolithCore.showNotifications([ { type: 'horde.error', message: Kronolith.text.geocode_error + ' ' + r} ]);\n    },\n\n    /**\n     * Callback for geocoding calls.\n     */\n    onGeocode: function(r)\n    {\n        $('kronolithEventGeo_loading_img').toggle();\n        r = r.shift();\n        if (r.precision) {\n            zoom = r.precision * 2;\n        } else {\n            zoom = null;\n        }\n        this.ensureMap(true);\n        this.placeMapMarker({ lat: r.lat, lon: r.lon }, true, zoom);\n    },\n\n    geocode: function(a) {\n        if (!a) {\n            return;\n        }\n        $('kronolithEventGeo_loading_img').toggle();\n        var gc = new HordeMap.Geocoder[Kronolith.conf.maps.geocoder](this.map.map, 'kronolithEventMap');\n        gc.geocode(a, this.onGeocode.bind(this), this.onGeocodeError);\n    },\n\n    /**\n     * Place the event marker on the map, at point ll, ensuring it exists.\n     * Optionally center the map on the marker and zoom. Zoom only honored if\n     * center is set, and if center is set, but zoom is null, we zoomToFit().\n     *\n     */\n    placeMapMarker: function(ll, center, zoom)\n    {\n        if (!this.mapMarker) {\n            this.mapMarker = this.map.addMarker(\n                    ll,\n                    { draggable: true },\n                    {\n                        context: this,\n                        dragend: this.onMarkerDragEnd\n                    });\n        } else {\n            this.map.moveMarker(this.mapMarker, ll);\n        }\n\n        if (center) {\n            this.map.setCenter(ll, zoom);\n            if (!zoom) {\n                this.map.zoomToFit();\n            }\n        }\n        $('kronolithEventLocationLon').value = ll.lon;\n        $('kronolithEventLocationLat').value = ll.lat;\n    },\n\n    /**\n     * Remove the event marker from the map. Called after clearing the location\n     * field.\n     */\n    removeMapMarker: function()\n    {\n        if (this.mapMarker) {\n            this.map.removeMarker(this.mapMarker, {});\n            $('kronolithEventLocationLon').value = null;\n            $('kronolithEventLocationLat').value = null;\n        }\n\n        this.mapMarker = false;\n    },\n\n    /**\n     * Ensures the map tab is visible and sets UI elements accordingly.\n     */\n    ensureMap: function(ignoreLL)\n    {\n        if (!this.mapInitialized) {\n            this.initializeMap(ignoreLL);\n        }\n        var dialog = $('kronolithEventForm');\n        dialog.select('.kronolithTabsOption').invoke('hide');\n        dialog.select('.tabset li').invoke('removeClassName', 'activeTab');\n        $('kronolithEventTabMap').show();\n        $('kronolithEventLinkMap').up().addClassName('activeTab');\n    },\n\n    /**\n     * Callback that gets called after a new marker has been placed on the map\n     * due to a single click on the map.\n     *\n     * @return object o  { lonlat: }\n     */\n    afterClickMap: function(o)\n    {\n        this.placeMapMarker(o.lonlat, false);\n        var gc = new HordeMap.Geocoder[Kronolith.conf.maps.geocoder](this.map.map, 'kronolithEventMap');\n        gc.reverseGeocode(o.lonlat, this.onReverseGeocode.bind(this), this.onGeocodeError.bind(this) );\n    },\n\n    /* Onload function. */\n    onDomLoad: function()\n    {\n        var dateFields, timeFields;\n\n        if (typeof ContextSensitive != 'undefined') {\n            this.DMenu = new ContextSensitive({ onClick: this.contextOnClick, onShow: this.contextOnShow });\n        }\n\n        RedBox.onDisplay = function() {\n            this.redBoxLoading = false;\n        }.bind(this);\n        RedBox.duration = this.effectDur;\n\n        $('kronolithSearchTerm').observe('focus', function() {\n            if ($F(this) == this.readAttribute('default')) {\n                this.clear();\n            }\n        });\n        $('kronolithSearchTerm').observe('blur', function() {\n            if (!$F(this)) {\n                this.setValue(this.readAttribute('default'));\n            }\n        });\n\n        $('kronolithEventStartDate', 'kronolithEventEndDate', 'kronolithTaskDueDate').compact().invoke('observe', 'blur', this.checkDate.bind(this));\n        var timeFields = $('kronolithEventStartTime', 'kronolithEventEndTime', 'kronolithTaskDueTime').compact();\n        timeFields.invoke('observe', 'blur', this.checkTime.bind(this));\n        timeFields.each(function(field) {\n            var dropDown = this.attachTimeDropDown(field);\n            field.observe('click', function() { dropDown.show(); });\n        }, this);\n        $('kronolithEventStartDate', 'kronolithEventStartTime').invoke('observe', 'change', this.updateEndTime.bind(this));\n\n        if (Kronolith.conf.has_tasks) {\n            $('kronolithTaskDueDate', 'kronolithTaskDueTime').compact().invoke('observe', 'focus', this.setDefaultDue.bind(this));\n        }\n\n        document.observe('keydown', KronolithCore.keydownHandler.bindAsEventListener(KronolithCore));\n        document.observe('keyup', KronolithCore.keyupHandler.bindAsEventListener(KronolithCore));\n        document.observe('click', KronolithCore.clickHandler.bindAsEventListener(KronolithCore));\n        document.observe('dblclick', KronolithCore.clickHandler.bindAsEventListener(KronolithCore, true));\n\n        // Mouse wheel handler.\n        dateFields = [ 'kronolithEventStartDate', 'kronolithEventEndDate' ];\n        timeFields = [ 'kronolithEventStartTime', 'kronolithEventEndTime' ];\n        if (Kronolith.conf.has_tasks) {\n            dateFields.push('kronolithTaskDueDate');\n            timeFields.push('kronolithTaskDueTime');\n        }\n        dateFields.each(function(field) {\n            $(field).observe(Prototype.Browser.Gecko ? 'DOMMouseScroll' : 'mousewheel', this.scrollDateField.bindAsEventListener(this, field));\n        }, this);\n        timeFields.each(function(field) {\n            $(field).observe(Prototype.Browser.Gecko ? 'DOMMouseScroll' : 'mousewheel', this.scrollTimeField.bindAsEventListener(this, field));\n        }, this);\n\n        this.updateCalendarList();\n        this.updateMinical(this.date);\n\n        /* Initialize the starting page. */\n        var tmp = location.hash;\n        if (!tmp.empty() && tmp.startsWith('#')) {\n            tmp = (tmp.length == 1) ? '' : tmp.substring(1);\n        }\n        if (!tmp.empty()) {\n            this.go(decodeURIComponent(tmp));\n        } else {\n            this.go(Kronolith.conf.login_view);\n        }\n\n        $('kronolithMenu').select('div.kronolithCalendars div').each(function(s) {\n            s.observe('mouseover', s.addClassName.curry('kronolithCalOver'));\n            s.observe('mouseout', s.removeClassName.curry('kronolithCalOver'));\n        });\n\n        /* Add Growler notifications. */\n        this.Growler = new Growler({\n            log: true,\n            location: 'br',\n            noalerts: Kronolith.text.noalerts,\n            info: Kronolith.text.growlerinfo\n        });\n        this.Growler.growlerlog.observe('Growler:toggled', function(e) {\n            var button = $('kronolithNotifications');\n            if (e.memo.visible) {\n                button.title = Kronolith.text.hidelog;\n                button.addClassName('kronolithClose');\n            } else {\n                button.title = Kronolith.text.alerts.interpolate({ count: this.growls });\n                button.removeClassName('kronolithClose');\n            }\n            Horde_ToolTips.detach(button);\n            Horde_ToolTips.attach(button);\n        }.bindAsEventListener(this));\n\n        /* Start polling. */\n        new PeriodicalExecuter(this.doAction.bind(this, 'poll', {}, null, {}), 60);\n    }\n\n};\n\n/* Initialize global event handlers. */\ndocument.observe('dom:loaded', KronolithCore.onDomLoad.bind(KronolithCore));\ndocument.observe('DragDrop2:drag', KronolithCore.onDrag.bindAsEventListener(KronolithCore));\ndocument.observe('DragDrop2:drop', KronolithCore.onDrop.bindAsEventListener(KronolithCore));\ndocument.observe('DragDrop2:end', KronolithCore.onDragEnd.bindAsEventListener(KronolithCore));\ndocument.observe('DragDrop2:start', KronolithCore.onDragStart.bindAsEventListener(KronolithCore));\ndocument.observe('Horde_Calendar:select', KronolithCore.datePickerHandler.bindAsEventListener(KronolithCore));\nif (Prototype.Browser.IE) {\n    $('kronolithBody').observe('selectstart', Event.stop);\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<package packagerversion=\"1.9.2\" version=\"2.0\" xmlns=\"http://pear.php.net/dtd/package-2.0\" xmlns:tasks=\"http://pear.php.net/dtd/tasks-1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://pear.php.net/dtd/tasks-1.0 http://pear.php.net/dtd/tasks-1.0.xsd http://pear.php.net/dtd/package-2.0 http://pear.php.net/dtd/package-2.0.xsd\">\n <name>kronolith</name>\n <channel>pear.horde.org</channel>\n <summary>A web based calendar</summary>\n <description>Kronolith is the Horde calendar application. It provides web-based calendars backed by a SQL database or a Kolab server. Supported features include Ajax and mobile interfaces, shared calendars, remote calendars, invitation management (iCalendar/iTip), free/busy management, resource management, alarms, recurring events, and a sophisticated day/week view which handles arbitrary numbers of overlapping events.</description>\n <lead>\n  <name>Jan Schneider</name>\n  <user>jan</user>\n  <email>jan@horde.org</email>\n  <active>yes</active>\n </lead>\n <lead>\n  <name>Chuck Hagenbuch</name>\n  <user>chuck</user>\n  <email>chuck@horde.org</email>\n  <active>yes</active>\n </lead>\n <lead>\n  <name>Michael J Rubinsky</name>\n  <user>mrubinsk</user>\n  <email>mrubinsk@horde.org</email>\n  <active>yes</active>\n </lead>\n <date>2012-03-20</date>\n <time>11:00:03</time>\n <version>\n  <release>3.0.17</release>\n  <api>3.0.0</api>\n </version>\n <stability>\n  <release>stable</release>\n  <api>stable</api>\n </stability>\n <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n <notes>\n* [jan] SECURITY: Fix XSS vulnerabilities in tasks view and search view (Bug #11189).\n* [jan] Update Italian translation (Massimo Malabotta &lt;mmalabotta@units.it&gt;).\n* [jan] Improve print styles.\n* [jan] Catch if external client doesn&apos;t send LAST-MODIFIED attributes (Bug #11130).\n* [jan] Don&apos;t stop agenda script if there is an error with a single user (Bug #11129).\n* [jan] Update Hungarian translation (Zolt\u00e1n N\u00e9meth &lt;nemeth.zoltan@etit.hu&gt;).\n* [jan] Show round corners only on the start and end of multi-day events (Request #11067).\n </notes>\n <contents>\n  <dir baseinstalldir=\"/\" name=\"/\">\n   <dir name=\"bin\">\n    <file name=\"kronolith-agenda\" role=\"script\" />\n    <file name=\"kronolith-convert-datatree-shares-to-sql\" role=\"script\" />\n    <file name=\"kronolith-convert-sql-shares-to-sqlng\" role=\"script\" />\n    <file name=\"kronolith-convert-to-utc\" role=\"script\" />\n    <file name=\"kronolith-import-icals\" role=\"script\" />\n    <file name=\"kronolith-import-squirrelmail-calendar\" role=\"script\" />\n   </dir> <!-- /bin -->\n   <dir name=\"calendars\">\n    <file name=\"create.php\" role=\"horde\" />\n    <file name=\"delete.php\" role=\"horde\" />\n    <file name=\"edit.php\" role=\"horde\" />\n    <file name=\"index.php\" role=\"horde\" />\n    <file name=\"info.php\" role=\"horde\" />\n    <file name=\"remote_edit.php\" role=\"horde\" />\n    <file name=\"remote_subscribe.php\" role=\"horde\" />\n    <file name=\"remote_unsubscribe.php\" role=\"horde\" />\n    <file name=\"subscribe.php\" role=\"horde\" />\n   </dir> <!-- /calendars -->\n   <dir name=\"config\">\n    <file name=\".htaccess\" role=\"horde\" />\n    <file name=\"conf.xml\" role=\"horde\" />\n    <file name=\"hooks.php.dist\" role=\"horde\" />\n    <file name=\"menu.php.dist\" role=\"horde\" />\n    <file name=\"prefs.php\" role=\"horde\" />\n   </dir> <!-- /config -->\n   <dir name=\"docs\">\n    <file name=\"CHANGES\" role=\"doc\" />\n    <file name=\"CREDITS\" role=\"doc\" />\n    <file name=\"INSTALL\" role=\"doc\" />\n    <file name=\"lighttpd-kronolith.conf\" role=\"doc\" />\n    <file name=\"RELEASE_NOTES\" role=\"doc\" />\n    <file name=\"TODO\" role=\"doc\" />\n    <file name=\"UPGRADING\" role=\"doc\" />\n   </dir> <!-- /docs -->\n   <dir name=\"feed\">\n    <file name=\".htaccess\" role=\"horde\" />\n    <file name=\"index.php\" role=\"horde\" />\n   </dir> <!-- /feed -->\n   <dir name=\"js\">\n    <file name=\"calendar-panel.js\" role=\"horde\" />\n    <file name=\"dragdrop2.js\" role=\"horde\" />\n    <file name=\"edit.js\" role=\"horde\" />\n    <file name=\"embed.js\" role=\"horde\" />\n    <file name=\"goto.js\" role=\"horde\" />\n    <file name=\"kronolith.js\" role=\"horde\" />\n    <file name=\"mobile.js\" role=\"horde\" />\n    <file name=\"tagactions.js\" role=\"horde\" />\n    <file name=\"views.js\" role=\"horde\" />\n   </dir> <!-- /js -->\n   <dir name=\"lib\">\n    <dir name=\"Ajax\">\n     <dir name=\"Imple\">\n      <file name=\"ContactAutoCompleter.php\" role=\"horde\" />\n      <file name=\"Embed.php\" role=\"horde\" />\n      <file name=\"TagActions.php\" role=\"horde\" />\n      <file name=\"TagAutoCompleter.php\" role=\"horde\" />\n     </dir> <!-- /lib/Ajax/Imple -->\n     <file name=\"Application.php\" role=\"horde\" />\n    </dir> <!-- /lib/Ajax -->\n    <dir name=\"Block\">\n     <file name=\"Month.php\" role=\"horde\" />\n     <file name=\"Monthlist.php\" role=\"horde\" />\n     <file name=\"Prevmonthlist.php\" role=\"horde\" />\n     <file name=\"Summary.php\" role=\"horde\" />\n    </dir> <!-- /lib/Block -->\n    <dir name=\"Calendar\">\n     <dir name=\"External\">\n      <file name=\"Tasks.php\" role=\"horde\" />\n     </dir> <!-- /lib/Calendar/External -->\n     <file name=\"External.php\" role=\"horde\" />\n     <file name=\"Holiday.php\" role=\"horde\" />\n     <file name=\"Internal.php\" role=\"horde\" />\n     <file name=\"Remote.php\" role=\"horde\" />\n     <file name=\"Resource.php\" role=\"horde\" />\n    </dir> <!-- /lib/Calendar -->\n    <dir name=\"Calendars\">\n     <file name=\"Base.php\" role=\"horde\" />\n     <file name=\"Default.php\" role=\"horde\" />\n     <file name=\"Kolab.php\" role=\"horde\" />\n    </dir> <!-- /lib/Calendars -->\n    <dir name=\"Driver\">\n     <file name=\"Holidays.php\" role=\"horde\" />\n     <file name=\"Horde.php\" role=\"horde\" />\n     <file name=\"Ical.php\" role=\"horde\" />\n     <file name=\"Kolab.php\" role=\"horde\" />\n     <file name=\"Mock.php\" role=\"horde\" />\n     <file name=\"Resource.php\" role=\"horde\" />\n     <file name=\"Sql.php\" role=\"horde\" />\n    </dir> <!-- /lib/Driver -->\n    <dir name=\"Event\">\n     <file name=\"Holidays.php\" role=\"horde\" />\n     <file name=\"Horde.php\" role=\"horde\" />\n     <file name=\"Ical.php\" role=\"horde\" />\n     <file name=\"Kolab.php\" role=\"horde\" />\n     <file name=\"Resource.php\" role=\"horde\" />\n     <file name=\"Sql.php\" role=\"horde\" />\n    </dir> <!-- /lib/Event -->\n    <dir name=\"Factory\">\n     <file name=\"Calendars.php\" role=\"horde\" />\n     <file name=\"Driver.php\" role=\"horde\" />\n     <file name=\"Geo.php\" role=\"horde\" />\n     <file name=\"Storage.php\" role=\"horde\" />\n    </dir> <!-- /lib/Factory -->\n    <dir name=\"Form\">\n     <file name=\"CreateCalendar.php\" role=\"horde\" />\n     <file name=\"CreateResource.php\" role=\"horde\" />\n     <file name=\"CreateResourceGroup.php\" role=\"horde\" />\n     <file name=\"DeleteCalendar.php\" role=\"horde\" />\n     <file name=\"DeleteResource.php\" role=\"horde\" />\n     <file name=\"DeleteResourceGroup.php\" role=\"horde\" />\n     <file name=\"EditCalendar.php\" role=\"horde\" />\n     <file name=\"EditRemoteCalendar.php\" role=\"horde\" />\n     <file name=\"EditResource.php\" role=\"horde\" />\n     <file name=\"EditResourceGroup.php\" role=\"horde\" />\n     <file name=\"SubscribeRemoteCalendar.php\" role=\"horde\" />\n     <file name=\"UnsubscribeRemoteCalendar.php\" role=\"horde\" />\n    </dir> <!-- /lib/Form -->\n    <dir name=\"FreeBusy\">\n     <dir name=\"View\">\n      <file name=\"Day.php\" role=\"horde\" />\n      <file name=\"Month.php\" role=\"horde\" />\n      <file name=\"Week.php\" role=\"horde\" />\n      <file name=\"Workweek.php\" role=\"horde\" />\n     </dir> <!-- /lib/FreeBusy/View -->\n     <file name=\"View.php\" role=\"horde\" />\n    </dir> <!-- /lib/FreeBusy -->\n    <dir name=\"Geo\">\n     <file name=\"Base.php\" role=\"horde\" />\n     <file name=\"Mysql.php\" role=\"horde\" />\n     <file name=\"Sql.php\" role=\"horde\" />\n    </dir> <!-- /lib/Geo -->\n    <dir name=\"LoginTasks\">\n     <dir name=\"SystemTask\">\n      <file name=\"Upgrade.php\" role=\"horde\" />\n     </dir> <!-- /lib/LoginTasks/SystemTask -->\n     <dir name=\"Task\">\n      <file name=\"PurgeEvents.php\" role=\"horde\" />\n     </dir> <!-- /lib/LoginTasks/Task -->\n    </dir> <!-- /lib/LoginTasks -->\n    <dir name=\"Notification\">\n     <dir name=\"Listener\">\n      <file name=\"AjaxStatus.php\" role=\"horde\" />\n     </dir> <!-- /lib/Notification/Listener -->\n    </dir> <!-- /lib/Notification -->\n    <dir name=\"Resource\">\n     <file name=\"Base.php\" role=\"horde\" />\n     <file name=\"Group.php\" role=\"horde\" />\n     <file name=\"Single.php\" role=\"horde\" />\n    </dir> <!-- /lib/Resource -->\n    <dir name=\"Storage\">\n     <file name=\"Kolab.php\" role=\"horde\" />\n     <file name=\"Sql.php\" role=\"horde\" />\n    </dir> <!-- /lib/Storage -->\n    <dir name=\"View\">\n     <file name=\"Day.php\" role=\"horde\" />\n     <file name=\"DeleteEvent.php\" role=\"horde\" />\n     <file name=\"EditEvent.php\" role=\"horde\" />\n     <file name=\"Event.php\" role=\"horde\" />\n     <file name=\"ExportEvent.php\" role=\"horde\" />\n     <file name=\"Month.php\" role=\"horde\" />\n     <file name=\"Week.php\" role=\"horde\" />\n     <file name=\"WorkWeek.php\" role=\"horde\" />\n     <file name=\"Year.php\" role=\"horde\" />\n    </dir> <!-- /lib/View -->\n    <file name=\".htaccess\" role=\"horde\" />\n    <file name=\"Api.php\" role=\"horde\" />\n    <file name=\"Application.php\" role=\"horde\" />\n    <file name=\"Calendar.php\" role=\"horde\" />\n    <file name=\"Day.php\" role=\"horde\" />\n    <file name=\"Driver.php\" role=\"horde\" />\n    <file name=\"Event.php\" role=\"horde\" />\n    <file name=\"Exception.php\" role=\"horde\" />\n    <file name=\"FreeBusy.php\" role=\"horde\" />\n    <file name=\"Kronolith.php\" role=\"horde\" />\n    <file name=\"Resource.php\" role=\"horde\" />\n    <file name=\"Storage.php\" role=\"horde\" />\n    <file name=\"Tagger.php\" role=\"horde\" />\n    <file name=\"Test.php\" role=\"horde\" />\n   </dir> <!-- /lib -->\n   <dir name=\"locale\">\n    <dir name=\"ar\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ar/LC_MESSAGES -->\n    </dir> <!-- /locale/ar -->\n    <dir name=\"bg\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/bg/LC_MESSAGES -->\n    </dir> <!-- /locale/bg -->\n    <dir name=\"ca\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ca/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/ca -->\n    <dir name=\"cs\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/cs/LC_MESSAGES -->\n    </dir> <!-- /locale/cs -->\n    <dir name=\"da\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/da/LC_MESSAGES -->\n    </dir> <!-- /locale/da -->\n    <dir name=\"de\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/de/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/de -->\n    <dir name=\"el\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/el/LC_MESSAGES -->\n    </dir> <!-- /locale/el -->\n    <dir name=\"en\">\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/en -->\n    <dir name=\"es\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/es/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/es -->\n    <dir name=\"et\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/et/LC_MESSAGES -->\n    </dir> <!-- /locale/et -->\n    <dir name=\"eu\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/eu/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/eu -->\n    <dir name=\"fi\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/fi/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/fi -->\n    <dir name=\"fr\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/fr/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/fr -->\n    <dir name=\"hr\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/hr/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/hr -->\n    <dir name=\"hu\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/hu/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/hu -->\n    <dir name=\"it\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/it/LC_MESSAGES -->\n    </dir> <!-- /locale/it -->\n    <dir name=\"ja\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ja/LC_MESSAGES -->\n    </dir> <!-- /locale/ja -->\n    <dir name=\"ko\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ko/LC_MESSAGES -->\n    </dir> <!-- /locale/ko -->\n    <dir name=\"lt\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/lt/LC_MESSAGES -->\n    </dir> <!-- /locale/lt -->\n    <dir name=\"lv\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/lv/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/lv -->\n    <dir name=\"nb\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/nb/LC_MESSAGES -->\n    </dir> <!-- /locale/nb -->\n    <dir name=\"nl\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/nl/LC_MESSAGES -->\n    </dir> <!-- /locale/nl -->\n    <dir name=\"nn\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/nn/LC_MESSAGES -->\n    </dir> <!-- /locale/nn -->\n    <dir name=\"pl\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/pl/LC_MESSAGES -->\n    </dir> <!-- /locale/pl -->\n    <dir name=\"pt\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/pt/LC_MESSAGES -->\n    </dir> <!-- /locale/pt -->\n    <dir name=\"pt_BR\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/pt_BR/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/pt_BR -->\n    <dir name=\"ro\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ro/LC_MESSAGES -->\n    </dir> <!-- /locale/ro -->\n    <dir name=\"ru\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/ru/LC_MESSAGES -->\n    </dir> <!-- /locale/ru -->\n    <dir name=\"sk\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/sk/LC_MESSAGES -->\n    </dir> <!-- /locale/sk -->\n    <dir name=\"sl\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/sl/LC_MESSAGES -->\n    </dir> <!-- /locale/sl -->\n    <dir name=\"sv\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/sv/LC_MESSAGES -->\n    </dir> <!-- /locale/sv -->\n    <dir name=\"tr\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/tr/LC_MESSAGES -->\n     <file name=\"help.xml\" role=\"horde\" />\n    </dir> <!-- /locale/tr -->\n    <dir name=\"uk\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/uk/LC_MESSAGES -->\n    </dir> <!-- /locale/uk -->\n    <dir name=\"zh_CN\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/zh_CN/LC_MESSAGES -->\n    </dir> <!-- /locale/zh_CN -->\n    <dir name=\"zh_TW\">\n     <dir name=\"LC_MESSAGES\">\n      <file name=\"kronolith.mo\" role=\"horde\" />\n      <file name=\"kronolith.po\" role=\"horde\" />\n     </dir> <!-- /locale/zh_TW/LC_MESSAGES -->\n    </dir> <!-- /locale/zh_TW -->\n    <file name=\".htaccess\" role=\"horde\" />\n    <file name=\"kronolith.pot\" role=\"horde\" />\n   </dir> <!-- /locale -->\n   <dir name=\"migration\">\n    <file name=\"1_kronolith_base_tables.php\" role=\"horde\" />\n    <file name=\"2_kronolith_upgrade_autoincrement.php\" role=\"horde\" />\n    <file name=\"3_kronolith_upgrade_addallday.php\" role=\"horde\" />\n    <file name=\"4_kronolith_upgrade_addalarmmethods.php\" role=\"horde\" />\n    <file name=\"5_kronolith_upgrade_addcolor.php\" role=\"horde\" />\n    <file name=\"6_kronolith_upgrade_addresources.php\" role=\"horde\" />\n    <file name=\"7_kronolith_upgrade_resourceautoincrement.php\" role=\"horde\" />\n    <file name=\"8_kronolith_upgrade_addgeo.php\" role=\"horde\" />\n    <file name=\"9_kronolith_upgrade_addurl.php\" role=\"horde\" />\n    <file name=\"10_kronolith_upgrade_exceptions.php\" role=\"horde\" />\n    <file name=\"11_kronolith_upgrade_resourceemail.php\" role=\"horde\" />\n    <file name=\"12_kronolith_upgrade_addzoom.php\" role=\"horde\" />\n    <file name=\"13_kronolith_upgrade_systemshares.php\" role=\"horde\" />\n    <file name=\"14_kronolith_upgrade_missingresourcefield.php\" role=\"horde\" />\n    <file name=\"15_kronolith_upgrade_sqlng.php\" role=\"horde\" />\n    <file name=\"16_kronolith_upgrade_sqlhierarchical.php\" role=\"horde\" />\n    <file name=\"17_kronolith_upgrade_sqlnghierarchical.php\" role=\"horde\" />\n    <file name=\"18_kronolith_upgrade_categoriestotags.php\" role=\"horde\" />\n    <file name=\"19_kronolith_upgrade_addmysqlgeo.php\" role=\"horde\" />\n   </dir> <!-- /migration -->\n   <dir name=\"resources\">\n    <dir name=\"groups\">\n     <file name=\"create.php\" role=\"horde\" />\n     <file name=\"delete.php\" role=\"horde\" />\n     <file name=\"edit.php\" role=\"horde\" />\n     <file name=\"index.php\" role=\"horde\" />\n    </dir> <!-- /resources/groups -->\n    <file name=\"create.php\" role=\"horde\" />\n    <file name=\"delete.php\" role=\"horde\" />\n    <file name=\"edit.php\" role=\"horde\" />\n    <file name=\"index.php\" role=\"horde\" />\n   </dir> <!-- /resources -->\n   <dir name=\"templates\">\n    <dir name=\"agenda\">\n     <file name=\"notification.html.php\" role=\"horde\" />\n     <file name=\"notification.plain.php\" role=\"horde\" />\n    </dir> <!-- /templates/agenda -->\n    <dir name=\"alarm\">\n     <file name=\"mail.html.php\" role=\"horde\" />\n     <file name=\"mail.plain.php\" role=\"horde\" />\n    </dir> <!-- /templates/alarm -->\n    <dir name=\"attendees\">\n     <file name=\"attendees.inc\" role=\"horde\" />\n    </dir> <!-- /templates/attendees -->\n    <dir name=\"chunks\">\n     <file name=\"calendar.php\" role=\"horde\" />\n     <file name=\"permissions.inc\" role=\"horde\" />\n    </dir> <!-- /templates/chunks -->\n    <dir name=\"contacts\">\n     <file name=\"contacts.inc\" role=\"horde\" />\n    </dir> <!-- /templates/contacts -->\n    <dir name=\"data\">\n     <file name=\"export.inc\" role=\"horde\" />\n     <file name=\"import.inc\" role=\"horde\" />\n    </dir> <!-- /templates/data -->\n    <dir name=\"day\">\n     <file name=\"all_day.inc\" role=\"horde\" />\n     <file name=\"head.inc\" role=\"horde\" />\n     <file name=\"head_side_by_side.inc\" role=\"horde\" />\n     <file name=\"rows.html\" role=\"horde\" />\n    </dir> <!-- /templates/day -->\n    <dir name=\"delete\">\n     <file name=\"delete.inc\" role=\"horde\" />\n     <file name=\"one.inc\" role=\"horde\" />\n    </dir> <!-- /templates/delete -->\n    <dir name=\"edit\">\n     <file name=\"edit.inc\" role=\"horde\" />\n     <file name=\"edit_timespan.inc\" role=\"horde\" />\n    </dir> <!-- /templates/edit -->\n    <dir name=\"fbview\">\n     <file name=\"busyblock.html\" role=\"horde\" />\n     <file name=\"emptyblock.html\" role=\"horde\" />\n     <file name=\"header.html\" role=\"horde\" />\n     <file name=\"legend.html\" role=\"horde\" />\n     <file name=\"meetingblock.html\" role=\"horde\" />\n     <file name=\"row.html\" role=\"horde\" />\n     <file name=\"section.html\" role=\"horde\" />\n     <file name=\"unknownblock.html\" role=\"horde\" />\n    </dir> <!-- /templates/fbview -->\n    <dir name=\"feeds\">\n     <file name=\"atom.xml\" role=\"horde\" />\n    </dir> <!-- /templates/feeds -->\n    <dir name=\"index\">\n     <file name=\"agenda.inc\" role=\"horde\" />\n     <file name=\"day.inc\" role=\"horde\" />\n     <file name=\"edit.inc\" role=\"horde\" />\n     <file name=\"index.inc\" role=\"horde\" />\n     <file name=\"month.inc\" role=\"horde\" />\n     <file name=\"task.inc\" role=\"horde\" />\n     <file name=\"tasks.inc\" role=\"horde\" />\n     <file name=\"week.inc\" role=\"horde\" />\n     <file name=\"year.inc\" role=\"horde\" />\n    </dir> <!-- /templates/index -->\n    <dir name=\"itip\">\n     <file name=\"notification.html.php\" role=\"horde\" />\n     <file name=\"notification.plain.php\" role=\"horde\" />\n    </dir> <!-- /templates/itip -->\n    <dir name=\"mobile\">\n     <file name=\"day.html.php\" role=\"horde\" />\n     <file name=\"event.html.php\" role=\"horde\" />\n     <file name=\"head.html.php\" role=\"horde\" />\n     <file name=\"javascript_defs.php\" role=\"horde\" />\n     <file name=\"month.html.php\" role=\"horde\" />\n     <file name=\"notice.html.php\" role=\"horde\" />\n     <file name=\"summary.html.php\" role=\"horde\" />\n    </dir> <!-- /templates/mobile -->\n    <dir name=\"month\">\n     <file name=\"head.inc\" role=\"horde\" />\n     <file name=\"head_side_by_side.inc\" role=\"horde\" />\n    </dir> <!-- /templates/month -->\n    <dir name=\"perms\">\n     <file name=\"perms.inc\" role=\"horde\" />\n    </dir> <!-- /templates/perms -->\n    <dir name=\"prefs\">\n     <file name=\"defaultalarm.html\" role=\"horde\" />\n    </dir> <!-- /templates/prefs -->\n    <dir name=\"resources\">\n     <file name=\"form-header.inc\" role=\"horde\" />\n     <file name=\"resource-form.php\" role=\"horde\" />\n    </dir> <!-- /templates/resources -->\n    <dir name=\"search\">\n     <file name=\"empty.inc\" role=\"horde\" />\n     <file name=\"event_footers.inc\" role=\"horde\" />\n     <file name=\"event_headers.inc\" role=\"horde\" />\n     <file name=\"event_summaries.inc\" role=\"horde\" />\n     <file name=\"header.inc\" role=\"horde\" />\n     <file name=\"search.inc\" role=\"horde\" />\n     <file name=\"search_advanced.inc\" role=\"horde\" />\n    </dir> <!-- /templates/search -->\n    <dir name=\"share\">\n     <file name=\"notification.html.php\" role=\"horde\" />\n     <file name=\"notification.plain.php\" role=\"horde\" />\n    </dir> <!-- /templates/share -->\n    <dir name=\"view\">\n     <file name=\"view.inc\" role=\"horde\" />\n    </dir> <!-- /templates/view -->\n    <dir name=\"week\">\n     <file name=\"head.inc\" role=\"horde\" />\n     <file name=\"head_side_by_side.inc\" role=\"horde\" />\n    </dir> <!-- /templates/week -->\n    <dir name=\"year\">\n     <file name=\"head.inc\" role=\"horde\" />\n    </dir> <!-- /templates/year -->\n    <file name=\"calendar_info.php\" role=\"horde\" />\n    <file name=\"calendar_list.php\" role=\"horde\" />\n    <file name=\"calendar_titles.inc\" role=\"horde\" />\n    <file name=\"javascript_defs.php\" role=\"horde\" />\n    <file name=\"panel.inc\" role=\"horde\" />\n   </dir> <!-- /templates -->\n   <dir name=\"test\">\n    <dir name=\"Kronolith\">\n     <dir name=\"fixtures\">\n      <file name=\"allday.ics\" role=\"test\" />\n      <file name=\"bug7068.ics\" role=\"test\" />\n      <file name=\"export1.ics\" role=\"test\" />\n      <file name=\"export2.ics\" role=\"test\" />\n      <file name=\"export3.ics\" role=\"test\" />\n      <file name=\"export4.ics\" role=\"test\" />\n      <file name=\"fromicalendar.ics\" role=\"test\" />\n     </dir> <!-- /test/Kronolith/fixtures -->\n     <dir name=\"Integration\">\n      <dir name=\"Driver\">\n       <dir name=\"Sql\">\n        <dir name=\"Pdo\">\n         <file name=\"SqliteTest.php\" role=\"test\" />\n        </dir> <!-- /test/Kronolith/Integration/Driver/Sql/Pdo -->\n        <file name=\"Base.php\" role=\"test\" />\n       </dir> <!-- /test/Kronolith/Integration/Driver/Sql -->\n       <file name=\"Base.php\" role=\"test\" />\n       <file name=\"KolabTest.php\" role=\"test\" />\n      </dir> <!-- /test/Kronolith/Integration/Driver -->\n      <dir name=\"Kronolith\">\n       <dir name=\"Sql\">\n        <dir name=\"Pdo\">\n         <file name=\"SqliteTest.php\" role=\"test\" />\n        </dir> <!-- /test/Kronolith/Integration/Kronolith/Sql/Pdo -->\n        <file name=\"Base.php\" role=\"test\" />\n       </dir> <!-- /test/Kronolith/Integration/Kronolith/Sql -->\n       <file name=\"Base.php\" role=\"test\" />\n       <file name=\"KolabTest.php\" role=\"test\" />\n      </dir> <!-- /test/Kronolith/Integration/Kronolith -->\n      <file name=\"AllDayTest.php\" role=\"test\" />\n      <file name=\"FromIcalendarTest.php\" role=\"test\" />\n      <file name=\"ToIcalendarTest.php\" role=\"test\" />\n     </dir> <!-- /test/Kronolith/Integration -->\n     <dir name=\"Stub\">\n      <file name=\"Driver.php\" role=\"test\" />\n      <file name=\"Registry.php\" role=\"test\" />\n      <file name=\"ShareFactory.php\" role=\"test\" />\n      <file name=\"Tagger.php\" role=\"test\" />\n      <file name=\"Types.php\" role=\"test\" />\n     </dir> <!-- /test/Kronolith/Stub -->\n     <file name=\"AllTests.php\" role=\"test\" />\n     <file name=\"Autoload.php\" role=\"test\" />\n     <file name=\"phpunit.xml\" role=\"test\" />\n     <file name=\"TestCase.php\" role=\"test\" />\n    </dir> <!-- /test/Kronolith -->\n   </dir> <!-- /test -->\n   <dir name=\"themes\">\n    <dir name=\"bluewhite\">\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/bluewhite -->\n    <dir name=\"burntorange\">\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/burntorange -->\n    <dir name=\"default\">\n     <dir name=\"graphics\">\n      <dir name=\"alerts\">\n       <file name=\"alarm.png\" role=\"horde\" />\n       <file name=\"error.png\" role=\"horde\" />\n       <file name=\"message.png\" role=\"horde\" />\n       <file name=\"success.png\" role=\"horde\" />\n       <file name=\"warning.png\" role=\"horde\" />\n      </dir> <!-- /themes/default/graphics/alerts -->\n      <file name=\"addressbook_browse.png\" role=\"horde\" />\n      <file name=\"agenda.png\" role=\"horde\" />\n      <file name=\"alarm-000.png\" role=\"horde\" />\n      <file name=\"alarm-fff.png\" role=\"horde\" />\n      <file name=\"alarm.png\" role=\"horde\" />\n      <file name=\"attendee-accepted.png\" role=\"horde\" />\n      <file name=\"attendee-declined.png\" role=\"horde\" />\n      <file name=\"attendee-none.png\" role=\"horde\" />\n      <file name=\"attendee-tentative.png\" role=\"horde\" />\n      <file name=\"attendees-000.png\" role=\"horde\" />\n      <file name=\"attendees-fff.png\" role=\"horde\" />\n      <file name=\"attendees.png\" role=\"horde\" />\n      <file name=\"back_quick.png\" role=\"horde\" />\n      <file name=\"big_agenda.png\" role=\"horde\" />\n      <file name=\"big_alarm.png\" role=\"horde\" />\n      <file name=\"big_invitation.png\" role=\"horde\" />\n      <file name=\"big_share.png\" role=\"horde\" />\n      <file name=\"calendars.png\" role=\"horde\" />\n      <file name=\"checkbox_off.png\" role=\"horde\" />\n      <file name=\"checkbox_on.png\" role=\"horde\" />\n      <file name=\"checkbox_over.png\" role=\"horde\" />\n      <file name=\"close.png\" role=\"horde\" />\n      <file name=\"dayview.png\" role=\"horde\" />\n      <file name=\"delete-000.png\" role=\"horde\" />\n      <file name=\"delete-fff.png\" role=\"horde\" />\n      <file name=\"drag-handle.png\" role=\"horde\" />\n      <file name=\"edit-000.png\" role=\"horde\" />\n      <file name=\"edit-fff.png\" role=\"horde\" />\n      <file name=\"exception-000.png\" role=\"horde\" />\n      <file name=\"exception-fff.png\" role=\"horde\" />\n      <file name=\"favicon.ico\" role=\"horde\" />\n      <file name=\"goto.png\" role=\"horde\" />\n      <file name=\"help.png\" role=\"horde\" />\n      <file name=\"kronolith.png\" role=\"horde\" />\n      <file name=\"left.png\" role=\"horde\" />\n      <file name=\"loading.gif\" role=\"horde\" />\n      <file name=\"logout.png\" role=\"horde\" />\n      <file name=\"minus.png\" role=\"horde\" />\n      <file name=\"monthview.png\" role=\"horde\" />\n      <file name=\"new.png\" role=\"horde\" />\n      <file name=\"new_big.png\" role=\"horde\" />\n      <file name=\"new_small.png\" role=\"horde\" />\n      <file name=\"new_small_fade.png\" role=\"horde\" />\n      <file name=\"new_task.png\" role=\"horde\" />\n      <file name=\"picker.png\" role=\"horde\" />\n      <file name=\"plus.png\" role=\"horde\" />\n      <file name=\"prefs.png\" role=\"horde\" />\n      <file name=\"print.png\" role=\"horde\" />\n      <file name=\"private-000.png\" role=\"horde\" />\n      <file name=\"private-fff.png\" role=\"horde\" />\n      <file name=\"recur-000.png\" role=\"horde\" />\n      <file name=\"recur-fff.png\" role=\"horde\" />\n      <file name=\"right.png\" role=\"horde\" />\n      <file name=\"search.png\" role=\"horde\" />\n      <file name=\"tasks.png\" role=\"horde\" />\n      <file name=\"today.png\" role=\"horde\" />\n      <file name=\"unknown-background.png\" role=\"horde\" />\n      <file name=\"weekview.png\" role=\"horde\" />\n      <file name=\"workweekview.png\" role=\"horde\" />\n      <file name=\"yearview.png\" role=\"horde\" />\n     </dir> <!-- /themes/default/graphics -->\n     <file name=\"embed.css\" role=\"horde\" />\n     <file name=\"ie7.css\" role=\"horde\" />\n     <file name=\"ie8.css\" role=\"horde\" />\n     <file name=\"mobile.css\" role=\"horde\" />\n     <file name=\"opera.css\" role=\"horde\" />\n     <file name=\"screen.css\" role=\"horde\" />\n     <file name=\"webkit.css\" role=\"horde\" />\n    </dir> <!-- /themes/default -->\n    <dir name=\"fadetogreen\">\n     <dir name=\"graphics\">\n      <file name=\"headerbox.png\" role=\"horde\" />\n     </dir> <!-- /themes/fadetogreen/graphics -->\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/fadetogreen -->\n    <dir name=\"mozilla\">\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/mozilla -->\n    <dir name=\"silver\">\n     <dir name=\"graphics\">\n      <dir name=\"alerts\">\n       <file name=\"alarm.png\" role=\"horde\" />\n       <file name=\"error.png\" role=\"horde\" />\n       <file name=\"message.png\" role=\"horde\" />\n       <file name=\"success.png\" role=\"horde\" />\n       <file name=\"warning.png\" role=\"horde\" />\n      </dir> <!-- /themes/silver/graphics/alerts -->\n      <file name=\"addressbook_browse.png\" role=\"horde\" />\n      <file name=\"agenda.png\" role=\"horde\" />\n      <file name=\"alarm-000.png\" role=\"horde\" />\n      <file name=\"alarm-fff.png\" role=\"horde\" />\n      <file name=\"alarm.png\" role=\"horde\" />\n      <file name=\"attendee-accepted.png\" role=\"horde\" />\n      <file name=\"attendee-declined.png\" role=\"horde\" />\n      <file name=\"attendee-none.png\" role=\"horde\" />\n      <file name=\"attendee-tentative.png\" role=\"horde\" />\n      <file name=\"attendees-000.png\" role=\"horde\" />\n      <file name=\"attendees-fff.png\" role=\"horde\" />\n      <file name=\"attendees.png\" role=\"horde\" />\n      <file name=\"calendars.png\" role=\"horde\" />\n      <file name=\"close.png\" role=\"horde\" />\n      <file name=\"dayview.png\" role=\"horde\" />\n      <file name=\"delete-000.png\" role=\"horde\" />\n      <file name=\"delete-fff.png\" role=\"horde\" />\n      <file name=\"edit-000.png\" role=\"horde\" />\n      <file name=\"edit-fff.png\" role=\"horde\" />\n      <file name=\"exception-000.png\" role=\"horde\" />\n      <file name=\"exception-fff.png\" role=\"horde\" />\n      <file name=\"favicon.ico\" role=\"horde\" />\n      <file name=\"goto.png\" role=\"horde\" />\n      <file name=\"help.png\" role=\"horde\" />\n      <file name=\"kronolith.png\" role=\"horde\" />\n      <file name=\"left.png\" role=\"horde\" />\n      <file name=\"loading.gif\" role=\"horde\" />\n      <file name=\"logout.png\" role=\"horde\" />\n      <file name=\"menu-active.png\" role=\"horde\" />\n      <file name=\"menu.png\" role=\"horde\" />\n      <file name=\"minus.png\" role=\"horde\" />\n      <file name=\"monthview.png\" role=\"horde\" />\n      <file name=\"new.png\" role=\"horde\" />\n      <file name=\"new_big.png\" role=\"horde\" />\n      <file name=\"new_small.png\" role=\"horde\" />\n      <file name=\"new_task.png\" role=\"horde\" />\n      <file name=\"picker.png\" role=\"horde\" />\n      <file name=\"plus.png\" role=\"horde\" />\n      <file name=\"prefs.png\" role=\"horde\" />\n      <file name=\"print.png\" role=\"horde\" />\n      <file name=\"private-000.png\" role=\"horde\" />\n      <file name=\"private-fff.png\" role=\"horde\" />\n      <file name=\"recur-000.png\" role=\"horde\" />\n      <file name=\"recur-fff.png\" role=\"horde\" />\n      <file name=\"right.png\" role=\"horde\" />\n      <file name=\"search.png\" role=\"horde\" />\n      <file name=\"tasks.png\" role=\"horde\" />\n      <file name=\"today.png\" role=\"horde\" />\n      <file name=\"unknown-background.png\" role=\"horde\" />\n      <file name=\"weekview.png\" role=\"horde\" />\n      <file name=\"workweekview.png\" role=\"horde\" />\n      <file name=\"yearview.png\" role=\"horde\" />\n     </dir> <!-- /themes/silver/graphics -->\n     <file name=\"ie7.css\" role=\"horde\" />\n     <file name=\"ie8.css\" role=\"horde\" />\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/silver -->\n    <dir name=\"simplex\">\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/simplex -->\n    <dir name=\"tango-blue\">\n     <dir name=\"graphics\">\n      <dir name=\"alerts\">\n       <file name=\"alarm.png\" role=\"horde\" />\n       <file name=\"error.png\" role=\"horde\" />\n       <file name=\"message.png\" role=\"horde\" />\n       <file name=\"success.png\" role=\"horde\" />\n       <file name=\"warning.png\" role=\"horde\" />\n      </dir> <!-- /themes/tango-blue/graphics/alerts -->\n      <file name=\"addressbook_browse.png\" role=\"horde\" />\n      <file name=\"alarm-000.png\" role=\"horde\" />\n      <file name=\"alarm-fff.png\" role=\"horde\" />\n      <file name=\"alarm.png\" role=\"horde\" />\n      <file name=\"attendee-accepted.png\" role=\"horde\" />\n      <file name=\"attendee-declined.png\" role=\"horde\" />\n      <file name=\"attendee-none.png\" role=\"horde\" />\n      <file name=\"attendee-tentative.png\" role=\"horde\" />\n      <file name=\"attendees-000.png\" role=\"horde\" />\n      <file name=\"attendees-fff.png\" role=\"horde\" />\n      <file name=\"attendees.png\" role=\"horde\" />\n      <file name=\"calendars.png\" role=\"horde\" />\n      <file name=\"close.png\" role=\"horde\" />\n      <file name=\"dayview.png\" role=\"horde\" />\n      <file name=\"delete-000.png\" role=\"horde\" />\n      <file name=\"delete-fff.png\" role=\"horde\" />\n      <file name=\"edit-000.png\" role=\"horde\" />\n      <file name=\"edit-fff.png\" role=\"horde\" />\n      <file name=\"exception-000.png\" role=\"horde\" />\n      <file name=\"exception-fff.png\" role=\"horde\" />\n      <file name=\"favicon.ico\" role=\"horde\" />\n      <file name=\"goto.png\" role=\"horde\" />\n      <file name=\"kronolith.png\" role=\"horde\" />\n      <file name=\"loading.gif\" role=\"horde\" />\n      <file name=\"minus.png\" role=\"horde\" />\n      <file name=\"monthview.png\" role=\"horde\" />\n      <file name=\"new.png\" role=\"horde\" />\n      <file name=\"new_big.png\" role=\"horde\" />\n      <file name=\"new_small.png\" role=\"horde\" />\n      <file name=\"picker.png\" role=\"horde\" />\n      <file name=\"plus.png\" role=\"horde\" />\n      <file name=\"print.png\" role=\"horde\" />\n      <file name=\"private-000.png\" role=\"horde\" />\n      <file name=\"private-fff.png\" role=\"horde\" />\n      <file name=\"recur-000.png\" role=\"horde\" />\n      <file name=\"recur-fff.png\" role=\"horde\" />\n      <file name=\"search.png\" role=\"horde\" />\n      <file name=\"today.png\" role=\"horde\" />\n      <file name=\"unknown-background.png\" role=\"horde\" />\n      <file name=\"weekview.png\" role=\"horde\" />\n      <file name=\"workweekview.png\" role=\"horde\" />\n      <file name=\"yearview.png\" role=\"horde\" />\n     </dir> <!-- /themes/tango-blue/graphics -->\n     <file name=\"screen.css\" role=\"horde\" />\n    </dir> <!-- /themes/tango-blue -->\n   </dir> <!-- /themes -->\n   <file name=\"add.php\" role=\"horde\" />\n   <file name=\"attend.php\" role=\"horde\" />\n   <file name=\"attendees.php\" role=\"horde\" />\n   <file name=\"contacts.php\" role=\"horde\" />\n   <file name=\"COPYING\" role=\"doc\" />\n   <file name=\"data.php\" role=\"horde\" />\n   <file name=\"day.php\" role=\"horde\" />\n   <file name=\"delete.php\" role=\"horde\" />\n   <file name=\"edit.php\" role=\"horde\" />\n   <file name=\"event.php\" role=\"horde\" />\n   <file name=\"fb.php\" role=\"horde\" />\n   <file name=\"index.php\" role=\"horde\" />\n   <file name=\"mobile.php\" role=\"horde\" />\n   <file name=\"month.php\" role=\"horde\" />\n   <file name=\"new.php\" role=\"horde\" />\n   <file name=\"perms.php\" role=\"horde\" />\n   <file name=\"README\" role=\"doc\" />\n   <file name=\"search.php\" role=\"horde\" />\n   <file name=\"view.php\" role=\"horde\" />\n   <file name=\"week.php\" role=\"horde\" />\n   <file name=\"workweek.php\" role=\"horde\" />\n   <file name=\"year.php\" role=\"horde\" />\n  </dir> <!-- / -->\n </contents>\n <dependencies>\n  <required>\n   <php>\n    <min>5.2.0</min>\n   </php>\n   <pearinstaller>\n    <min>1.7.0</min>\n   </pearinstaller>\n   <package>\n    <name>content</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>horde</name>\n    <channel>pear.horde.org</channel>\n    <min>4.0.0</min>\n    <max>5.0.0</max>\n    <exclude>5.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Auth</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.4</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Autoloader</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Core</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Data</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Date</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Date_Parser</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Exception</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Form</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Group</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Http</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_History</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Icalendar</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Image</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Lock</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_LoginTasks</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Mail</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Mime</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Nls</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Notification</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Perms</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.3</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Serialize</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Share</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Support</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Text_Filter</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Url</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Util</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_View</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Date</name>\n    <channel>pear.php.net</channel>\n   </package>\n   <extension>\n    <name>gettext</name>\n   </extension>\n   <extension>\n    <name>json</name>\n   </extension>\n   <extension>\n    <name>SimpleXML</name>\n   </extension>\n  </required>\n  <optional>\n   <package>\n    <name>timeobjects</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_ActiveSync</name>\n    <channel>pear.horde.org</channel>\n    <min>1.0.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Db</name>\n    <channel>pear.horde.org</channel>\n    <min>1.2.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Horde_Test</name>\n    <channel>pear.horde.org</channel>\n    <min>1.3.0</min>\n    <max>2.0.0</max>\n    <exclude>2.0.0</exclude>\n   </package>\n   <package>\n    <name>Date_Holidays</name>\n    <channel>pear.php.net</channel>\n    <min>0.21.0</min>\n   </package>\n   <extension>\n    <name>xmlwriter</name>\n   </extension>\n  </optional>\n </dependencies>\n <usesrole>\n  <role>horde</role>\n  <package>Role</package>\n  <channel>pear.horde.org</channel>\n </usesrole>\n <phprelease>\n  <filelist>\n   <install as=\"kronolith-agenda\" name=\"bin/kronolith-agenda\" />\n   <install as=\"kronolith-convert-datatree-shares-to-sql\" name=\"bin/kronolith-convert-datatree-shares-to-sql\" />\n   <install as=\"kronolith-convert-sql-shares-to-sqlng\" name=\"bin/kronolith-convert-sql-shares-to-sqlng\" />\n   <install as=\"kronolith-convert-to-utc\" name=\"bin/kronolith-convert-to-utc\" />\n   <install as=\"kronolith-import-icals\" name=\"bin/kronolith-import-icals\" />\n   <install as=\"kronolith-import-squirrelmail-calendar\" name=\"bin/kronolith-import-squirrelmail-calendar\" />\n   <install as=\"kronolith/calendars/create.php\" name=\"calendars/create.php\" />\n   <install as=\"kronolith/calendars/delete.php\" name=\"calendars/delete.php\" />\n   <install as=\"kronolith/calendars/edit.php\" name=\"calendars/edit.php\" />\n   <install as=\"kronolith/calendars/index.php\" name=\"calendars/index.php\" />\n   <install as=\"kronolith/calendars/info.php\" name=\"calendars/info.php\" />\n   <install as=\"kronolith/calendars/remote_edit.php\" name=\"calendars/remote_edit.php\" />\n   <install as=\"kronolith/calendars/remote_subscribe.php\" name=\"calendars/remote_subscribe.php\" />\n   <install as=\"kronolith/calendars/remote_unsubscribe.php\" name=\"calendars/remote_unsubscribe.php\" />\n   <install as=\"kronolith/calendars/subscribe.php\" name=\"calendars/subscribe.php\" />\n   <install as=\"kronolith/config/.htaccess\" name=\"config/.htaccess\" />\n   <install as=\"kronolith/config/conf.xml\" name=\"config/conf.xml\" />\n   <install as=\"kronolith/config/hooks.php.dist\" name=\"config/hooks.php.dist\" />\n   <install as=\"kronolith/config/menu.php.dist\" name=\"config/menu.php.dist\" />\n   <install as=\"kronolith/config/prefs.php\" name=\"config/prefs.php\" />\n   <install as=\"CHANGES\" name=\"docs/CHANGES\" />\n   <install as=\"CREDITS\" name=\"docs/CREDITS\" />\n   <install as=\"INSTALL\" name=\"docs/INSTALL\" />\n   <install as=\"lighttpd-kronolith.conf\" name=\"docs/lighttpd-kronolith.conf\" />\n   <install as=\"RELEASE_NOTES\" name=\"docs/RELEASE_NOTES\" />\n   <install as=\"TODO\" name=\"docs/TODO\" />\n   <install as=\"UPGRADING\" name=\"docs/UPGRADING\" />\n   <install as=\"kronolith/feed/.htaccess\" name=\"feed/.htaccess\" />\n   <install as=\"kronolith/feed/index.php\" name=\"feed/index.php\" />\n   <install as=\"kronolith/js/calendar-panel.js\" name=\"js/calendar-panel.js\" />\n   <install as=\"kronolith/js/dragdrop2.js\" name=\"js/dragdrop2.js\" />\n   <install as=\"kronolith/js/edit.js\" name=\"js/edit.js\" />\n   <install as=\"kronolith/js/embed.js\" name=\"js/embed.js\" />\n   <install as=\"kronolith/js/goto.js\" name=\"js/goto.js\" />\n   <install as=\"kronolith/js/kronolith.js\" name=\"js/kronolith.js\" />\n   <install as=\"kronolith/js/mobile.js\" name=\"js/mobile.js\" />\n   <install as=\"kronolith/js/tagactions.js\" name=\"js/tagactions.js\" />\n   <install as=\"kronolith/js/views.js\" name=\"js/views.js\" />\n   <install as=\"kronolith/lib/.htaccess\" name=\"lib/.htaccess\" />\n   <install as=\"kronolith/lib/Api.php\" name=\"lib/Api.php\" />\n   <install as=\"kronolith/lib/Application.php\" name=\"lib/Application.php\" />\n   <install as=\"kronolith/lib/Calendar.php\" name=\"lib/Calendar.php\" />\n   <install as=\"kronolith/lib/Day.php\" name=\"lib/Day.php\" />\n   <install as=\"kronolith/lib/Driver.php\" name=\"lib/Driver.php\" />\n   <install as=\"kronolith/lib/Event.php\" name=\"lib/Event.php\" />\n   <install as=\"kronolith/lib/Exception.php\" name=\"lib/Exception.php\" />\n   <install as=\"kronolith/lib/FreeBusy.php\" name=\"lib/FreeBusy.php\" />\n   <install as=\"kronolith/lib/Kronolith.php\" name=\"lib/Kronolith.php\" />\n   <install as=\"kronolith/lib/Resource.php\" name=\"lib/Resource.php\" />\n   <install as=\"kronolith/lib/Storage.php\" name=\"lib/Storage.php\" />\n   <install as=\"kronolith/lib/Tagger.php\" name=\"lib/Tagger.php\" />\n   <install as=\"kronolith/lib/Test.php\" name=\"lib/Test.php\" />\n   <install as=\"kronolith/lib/Ajax/Application.php\" name=\"lib/Ajax/Application.php\" />\n   <install as=\"kronolith/lib/Ajax/Imple/ContactAutoCompleter.php\" name=\"lib/Ajax/Imple/ContactAutoCompleter.php\" />\n   <install as=\"kronolith/lib/Ajax/Imple/Embed.php\" name=\"lib/Ajax/Imple/Embed.php\" />\n   <install as=\"kronolith/lib/Ajax/Imple/TagActions.php\" name=\"lib/Ajax/Imple/TagActions.php\" />\n   <install as=\"kronolith/lib/Ajax/Imple/TagAutoCompleter.php\" name=\"lib/Ajax/Imple/TagAutoCompleter.php\" />\n   <install as=\"kronolith/lib/Block/Month.php\" name=\"lib/Block/Month.php\" />\n   <install as=\"kronolith/lib/Block/Monthlist.php\" name=\"lib/Block/Monthlist.php\" />\n   <install as=\"kronolith/lib/Block/Prevmonthlist.php\" name=\"lib/Block/Prevmonthlist.php\" />\n   <install as=\"kronolith/lib/Block/Summary.php\" name=\"lib/Block/Summary.php\" />\n   <install as=\"kronolith/lib/Calendar/External.php\" name=\"lib/Calendar/External.php\" />\n   <install as=\"kronolith/lib/Calendar/Holiday.php\" name=\"lib/Calendar/Holiday.php\" />\n   <install as=\"kronolith/lib/Calendar/Internal.php\" name=\"lib/Calendar/Internal.php\" />\n   <install as=\"kronolith/lib/Calendar/Remote.php\" name=\"lib/Calendar/Remote.php\" />\n   <install as=\"kronolith/lib/Calendar/Resource.php\" name=\"lib/Calendar/Resource.php\" />\n   <install as=\"kronolith/lib/Calendar/External/Tasks.php\" name=\"lib/Calendar/External/Tasks.php\" />\n   <install as=\"kronolith/lib/Calendars/Base.php\" name=\"lib/Calendars/Base.php\" />\n   <install as=\"kronolith/lib/Calendars/Default.php\" name=\"lib/Calendars/Default.php\" />\n   <install as=\"kronolith/lib/Calendars/Kolab.php\" name=\"lib/Calendars/Kolab.php\" />\n   <install as=\"kronolith/lib/Driver/Holidays.php\" name=\"lib/Driver/Holidays.php\" />\n   <install as=\"kronolith/lib/Driver/Horde.php\" name=\"lib/Driver/Horde.php\" />\n   <install as=\"kronolith/lib/Driver/Ical.php\" name=\"lib/Driver/Ical.php\" />\n   <install as=\"kronolith/lib/Driver/Kolab.php\" name=\"lib/Driver/Kolab.php\" />\n   <install as=\"kronolith/lib/Driver/Mock.php\" name=\"lib/Driver/Mock.php\" />\n   <install as=\"kronolith/lib/Driver/Resource.php\" name=\"lib/Driver/Resource.php\" />\n   <install as=\"kronolith/lib/Driver/Sql.php\" name=\"lib/Driver/Sql.php\" />\n   <install as=\"kronolith/lib/Event/Holidays.php\" name=\"lib/Event/Holidays.php\" />\n   <install as=\"kronolith/lib/Event/Horde.php\" name=\"lib/Event/Horde.php\" />\n   <install as=\"kronolith/lib/Event/Ical.php\" name=\"lib/Event/Ical.php\" />\n   <install as=\"kronolith/lib/Event/Kolab.php\" name=\"lib/Event/Kolab.php\" />\n   <install as=\"kronolith/lib/Event/Resource.php\" name=\"lib/Event/Resource.php\" />\n   <install as=\"kronolith/lib/Event/Sql.php\" name=\"lib/Event/Sql.php\" />\n   <install as=\"kronolith/lib/Factory/Calendars.php\" name=\"lib/Factory/Calendars.php\" />\n   <install as=\"kronolith/lib/Factory/Driver.php\" name=\"lib/Factory/Driver.php\" />\n   <install as=\"kronolith/lib/Factory/Geo.php\" name=\"lib/Factory/Geo.php\" />\n   <install as=\"kronolith/lib/Factory/Storage.php\" name=\"lib/Factory/Storage.php\" />\n   <install as=\"kronolith/lib/Form/CreateCalendar.php\" name=\"lib/Form/CreateCalendar.php\" />\n   <install as=\"kronolith/lib/Form/CreateResource.php\" name=\"lib/Form/CreateResource.php\" />\n   <install as=\"kronolith/lib/Form/CreateResourceGroup.php\" name=\"lib/Form/CreateResourceGroup.php\" />\n   <install as=\"kronolith/lib/Form/DeleteCalendar.php\" name=\"lib/Form/DeleteCalendar.php\" />\n   <install as=\"kronolith/lib/Form/DeleteResource.php\" name=\"lib/Form/DeleteResource.php\" />\n   <install as=\"kronolith/lib/Form/DeleteResourceGroup.php\" name=\"lib/Form/DeleteResourceGroup.php\" />\n   <install as=\"kronolith/lib/Form/EditCalendar.php\" name=\"lib/Form/EditCalendar.php\" />\n   <install as=\"kronolith/lib/Form/EditRemoteCalendar.php\" name=\"lib/Form/EditRemoteCalendar.php\" />\n   <install as=\"kronolith/lib/Form/EditResource.php\" name=\"lib/Form/EditResource.php\" />\n   <install as=\"kronolith/lib/Form/EditResourceGroup.php\" name=\"lib/Form/EditResourceGroup.php\" />\n   <install as=\"kronolith/lib/Form/SubscribeRemoteCalendar.php\" name=\"lib/Form/SubscribeRemoteCalendar.php\" />\n   <install as=\"kronolith/lib/Form/UnsubscribeRemoteCalendar.php\" name=\"lib/Form/UnsubscribeRemoteCalendar.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View.php\" name=\"lib/FreeBusy/View.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View/Day.php\" name=\"lib/FreeBusy/View/Day.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View/Month.php\" name=\"lib/FreeBusy/View/Month.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View/Week.php\" name=\"lib/FreeBusy/View/Week.php\" />\n   <install as=\"kronolith/lib/FreeBusy/View/Workweek.php\" name=\"lib/FreeBusy/View/Workweek.php\" />\n   <install as=\"kronolith/lib/Geo/Base.php\" name=\"lib/Geo/Base.php\" />\n   <install as=\"kronolith/lib/Geo/Mysql.php\" name=\"lib/Geo/Mysql.php\" />\n   <install as=\"kronolith/lib/Geo/Sql.php\" name=\"lib/Geo/Sql.php\" />\n   <install as=\"kronolith/lib/LoginTasks/SystemTask/Upgrade.php\" name=\"lib/LoginTasks/SystemTask/Upgrade.php\" />\n   <install as=\"kronolith/lib/LoginTasks/Task/PurgeEvents.php\" name=\"lib/LoginTasks/Task/PurgeEvents.php\" />\n   <install as=\"kronolith/lib/Notification/Listener/AjaxStatus.php\" name=\"lib/Notification/Listener/AjaxStatus.php\" />\n   <install as=\"kronolith/lib/Resource/Base.php\" name=\"lib/Resource/Base.php\" />\n   <install as=\"kronolith/lib/Resource/Group.php\" name=\"lib/Resource/Group.php\" />\n   <install as=\"kronolith/lib/Resource/Single.php\" name=\"lib/Resource/Single.php\" />\n   <install as=\"kronolith/lib/Storage/Kolab.php\" name=\"lib/Storage/Kolab.php\" />\n   <install as=\"kronolith/lib/Storage/Sql.php\" name=\"lib/Storage/Sql.php\" />\n   <install as=\"kronolith/lib/View/Day.php\" name=\"lib/View/Day.php\" />\n   <install as=\"kronolith/lib/View/DeleteEvent.php\" name=\"lib/View/DeleteEvent.php\" />\n   <install as=\"kronolith/lib/View/EditEvent.php\" name=\"lib/View/EditEvent.php\" />\n   <install as=\"kronolith/lib/View/Event.php\" name=\"lib/View/Event.php\" />\n   <install as=\"kronolith/lib/View/ExportEvent.php\" name=\"lib/View/ExportEvent.php\" />\n   <install as=\"kronolith/lib/View/Month.php\" name=\"lib/View/Month.php\" />\n   <install as=\"kronolith/lib/View/Week.php\" name=\"lib/View/Week.php\" />\n   <install as=\"kronolith/lib/View/WorkWeek.php\" name=\"lib/View/WorkWeek.php\" />\n   <install as=\"kronolith/lib/View/Year.php\" name=\"lib/View/Year.php\" />\n   <install as=\"kronolith/locale/.htaccess\" name=\"locale/.htaccess\" />\n   <install as=\"kronolith/locale/kronolith.pot\" name=\"locale/kronolith.pot\" />\n   <install as=\"kronolith/locale/ar/LC_MESSAGES/kronolith.mo\" name=\"locale/ar/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ar/LC_MESSAGES/kronolith.po\" name=\"locale/ar/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/bg/LC_MESSAGES/kronolith.mo\" name=\"locale/bg/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/bg/LC_MESSAGES/kronolith.po\" name=\"locale/bg/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ca/help.xml\" name=\"locale/ca/help.xml\" />\n   <install as=\"kronolith/locale/ca/LC_MESSAGES/kronolith.mo\" name=\"locale/ca/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ca/LC_MESSAGES/kronolith.po\" name=\"locale/ca/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/cs/LC_MESSAGES/kronolith.mo\" name=\"locale/cs/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/cs/LC_MESSAGES/kronolith.po\" name=\"locale/cs/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/da/LC_MESSAGES/kronolith.mo\" name=\"locale/da/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/da/LC_MESSAGES/kronolith.po\" name=\"locale/da/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/de/help.xml\" name=\"locale/de/help.xml\" />\n   <install as=\"kronolith/locale/de/LC_MESSAGES/kronolith.mo\" name=\"locale/de/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/de/LC_MESSAGES/kronolith.po\" name=\"locale/de/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/el/LC_MESSAGES/kronolith.mo\" name=\"locale/el/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/el/LC_MESSAGES/kronolith.po\" name=\"locale/el/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/en/help.xml\" name=\"locale/en/help.xml\" />\n   <install as=\"kronolith/locale/es/help.xml\" name=\"locale/es/help.xml\" />\n   <install as=\"kronolith/locale/es/LC_MESSAGES/kronolith.mo\" name=\"locale/es/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/es/LC_MESSAGES/kronolith.po\" name=\"locale/es/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/et/LC_MESSAGES/kronolith.mo\" name=\"locale/et/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/et/LC_MESSAGES/kronolith.po\" name=\"locale/et/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/eu/help.xml\" name=\"locale/eu/help.xml\" />\n   <install as=\"kronolith/locale/eu/LC_MESSAGES/kronolith.mo\" name=\"locale/eu/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/eu/LC_MESSAGES/kronolith.po\" name=\"locale/eu/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/fi/help.xml\" name=\"locale/fi/help.xml\" />\n   <install as=\"kronolith/locale/fi/LC_MESSAGES/kronolith.mo\" name=\"locale/fi/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/fi/LC_MESSAGES/kronolith.po\" name=\"locale/fi/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/fr/help.xml\" name=\"locale/fr/help.xml\" />\n   <install as=\"kronolith/locale/fr/LC_MESSAGES/kronolith.mo\" name=\"locale/fr/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/fr/LC_MESSAGES/kronolith.po\" name=\"locale/fr/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/hr/help.xml\" name=\"locale/hr/help.xml\" />\n   <install as=\"kronolith/locale/hr/LC_MESSAGES/kronolith.mo\" name=\"locale/hr/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/hr/LC_MESSAGES/kronolith.po\" name=\"locale/hr/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/hu/help.xml\" name=\"locale/hu/help.xml\" />\n   <install as=\"kronolith/locale/hu/LC_MESSAGES/kronolith.mo\" name=\"locale/hu/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/hu/LC_MESSAGES/kronolith.po\" name=\"locale/hu/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/it/LC_MESSAGES/kronolith.mo\" name=\"locale/it/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/it/LC_MESSAGES/kronolith.po\" name=\"locale/it/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ja/LC_MESSAGES/kronolith.mo\" name=\"locale/ja/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ja/LC_MESSAGES/kronolith.po\" name=\"locale/ja/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ko/LC_MESSAGES/kronolith.mo\" name=\"locale/ko/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ko/LC_MESSAGES/kronolith.po\" name=\"locale/ko/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/lt/LC_MESSAGES/kronolith.mo\" name=\"locale/lt/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/lt/LC_MESSAGES/kronolith.po\" name=\"locale/lt/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/lv/help.xml\" name=\"locale/lv/help.xml\" />\n   <install as=\"kronolith/locale/lv/LC_MESSAGES/kronolith.mo\" name=\"locale/lv/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/lv/LC_MESSAGES/kronolith.po\" name=\"locale/lv/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/nb/LC_MESSAGES/kronolith.mo\" name=\"locale/nb/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/nb/LC_MESSAGES/kronolith.po\" name=\"locale/nb/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/nl/LC_MESSAGES/kronolith.mo\" name=\"locale/nl/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/nl/LC_MESSAGES/kronolith.po\" name=\"locale/nl/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/nn/LC_MESSAGES/kronolith.mo\" name=\"locale/nn/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/nn/LC_MESSAGES/kronolith.po\" name=\"locale/nn/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/pl/LC_MESSAGES/kronolith.mo\" name=\"locale/pl/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/pl/LC_MESSAGES/kronolith.po\" name=\"locale/pl/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/pt/LC_MESSAGES/kronolith.mo\" name=\"locale/pt/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/pt/LC_MESSAGES/kronolith.po\" name=\"locale/pt/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/pt_BR/help.xml\" name=\"locale/pt_BR/help.xml\" />\n   <install as=\"kronolith/locale/pt_BR/LC_MESSAGES/kronolith.mo\" name=\"locale/pt_BR/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/pt_BR/LC_MESSAGES/kronolith.po\" name=\"locale/pt_BR/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ro/LC_MESSAGES/kronolith.mo\" name=\"locale/ro/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ro/LC_MESSAGES/kronolith.po\" name=\"locale/ro/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/ru/LC_MESSAGES/kronolith.mo\" name=\"locale/ru/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/ru/LC_MESSAGES/kronolith.po\" name=\"locale/ru/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/sk/LC_MESSAGES/kronolith.mo\" name=\"locale/sk/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/sk/LC_MESSAGES/kronolith.po\" name=\"locale/sk/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/sl/LC_MESSAGES/kronolith.mo\" name=\"locale/sl/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/sl/LC_MESSAGES/kronolith.po\" name=\"locale/sl/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/sv/LC_MESSAGES/kronolith.mo\" name=\"locale/sv/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/sv/LC_MESSAGES/kronolith.po\" name=\"locale/sv/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/tr/help.xml\" name=\"locale/tr/help.xml\" />\n   <install as=\"kronolith/locale/tr/LC_MESSAGES/kronolith.mo\" name=\"locale/tr/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/tr/LC_MESSAGES/kronolith.po\" name=\"locale/tr/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/uk/LC_MESSAGES/kronolith.mo\" name=\"locale/uk/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/uk/LC_MESSAGES/kronolith.po\" name=\"locale/uk/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/zh_CN/LC_MESSAGES/kronolith.mo\" name=\"locale/zh_CN/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/zh_CN/LC_MESSAGES/kronolith.po\" name=\"locale/zh_CN/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/locale/zh_TW/LC_MESSAGES/kronolith.mo\" name=\"locale/zh_TW/LC_MESSAGES/kronolith.mo\" />\n   <install as=\"kronolith/locale/zh_TW/LC_MESSAGES/kronolith.po\" name=\"locale/zh_TW/LC_MESSAGES/kronolith.po\" />\n   <install as=\"kronolith/migration/1_kronolith_base_tables.php\" name=\"migration/1_kronolith_base_tables.php\" />\n   <install as=\"kronolith/migration/2_kronolith_upgrade_autoincrement.php\" name=\"migration/2_kronolith_upgrade_autoincrement.php\" />\n   <install as=\"kronolith/migration/3_kronolith_upgrade_addallday.php\" name=\"migration/3_kronolith_upgrade_addallday.php\" />\n   <install as=\"kronolith/migration/4_kronolith_upgrade_addalarmmethods.php\" name=\"migration/4_kronolith_upgrade_addalarmmethods.php\" />\n   <install as=\"kronolith/migration/5_kronolith_upgrade_addcolor.php\" name=\"migration/5_kronolith_upgrade_addcolor.php\" />\n   <install as=\"kronolith/migration/6_kronolith_upgrade_addresources.php\" name=\"migration/6_kronolith_upgrade_addresources.php\" />\n   <install as=\"kronolith/migration/7_kronolith_upgrade_resourceautoincrement.php\" name=\"migration/7_kronolith_upgrade_resourceautoincrement.php\" />\n   <install as=\"kronolith/migration/8_kronolith_upgrade_addgeo.php\" name=\"migration/8_kronolith_upgrade_addgeo.php\" />\n   <install as=\"kronolith/migration/9_kronolith_upgrade_addurl.php\" name=\"migration/9_kronolith_upgrade_addurl.php\" />\n   <install as=\"kronolith/migration/10_kronolith_upgrade_exceptions.php\" name=\"migration/10_kronolith_upgrade_exceptions.php\" />\n   <install as=\"kronolith/migration/11_kronolith_upgrade_resourceemail.php\" name=\"migration/11_kronolith_upgrade_resourceemail.php\" />\n   <install as=\"kronolith/migration/12_kronolith_upgrade_addzoom.php\" name=\"migration/12_kronolith_upgrade_addzoom.php\" />\n   <install as=\"kronolith/migration/13_kronolith_upgrade_systemshares.php\" name=\"migration/13_kronolith_upgrade_systemshares.php\" />\n   <install as=\"kronolith/migration/14_kronolith_upgrade_missingresourcefield.php\" name=\"migration/14_kronolith_upgrade_missingresourcefield.php\" />\n   <install as=\"kronolith/migration/15_kronolith_upgrade_sqlng.php\" name=\"migration/15_kronolith_upgrade_sqlng.php\" />\n   <install as=\"kronolith/migration/16_kronolith_upgrade_sqlhierarchical.php\" name=\"migration/16_kronolith_upgrade_sqlhierarchical.php\" />\n   <install as=\"kronolith/migration/17_kronolith_upgrade_sqlnghierarchical.php\" name=\"migration/17_kronolith_upgrade_sqlnghierarchical.php\" />\n   <install as=\"kronolith/migration/18_kronolith_upgrade_categoriestotags.php\" name=\"migration/18_kronolith_upgrade_categoriestotags.php\" />\n   <install as=\"kronolith/migration/19_kronolith_upgrade_addmysqlgeo.php\" name=\"migration/19_kronolith_upgrade_addmysqlgeo.php\" />\n   <install as=\"kronolith/resources/create.php\" name=\"resources/create.php\" />\n   <install as=\"kronolith/resources/delete.php\" name=\"resources/delete.php\" />\n   <install as=\"kronolith/resources/edit.php\" name=\"resources/edit.php\" />\n   <install as=\"kronolith/resources/index.php\" name=\"resources/index.php\" />\n   <install as=\"kronolith/resources/groups/create.php\" name=\"resources/groups/create.php\" />\n   <install as=\"kronolith/resources/groups/delete.php\" name=\"resources/groups/delete.php\" />\n   <install as=\"kronolith/resources/groups/edit.php\" name=\"resources/groups/edit.php\" />\n   <install as=\"kronolith/resources/groups/index.php\" name=\"resources/groups/index.php\" />\n   <install as=\"kronolith/templates/calendar_info.php\" name=\"templates/calendar_info.php\" />\n   <install as=\"kronolith/templates/calendar_list.php\" name=\"templates/calendar_list.php\" />\n   <install as=\"kronolith/templates/calendar_titles.inc\" name=\"templates/calendar_titles.inc\" />\n   <install as=\"kronolith/templates/javascript_defs.php\" name=\"templates/javascript_defs.php\" />\n   <install as=\"kronolith/templates/panel.inc\" name=\"templates/panel.inc\" />\n   <install as=\"kronolith/templates/agenda/notification.html.php\" name=\"templates/agenda/notification.html.php\" />\n   <install as=\"kronolith/templates/agenda/notification.plain.php\" name=\"templates/agenda/notification.plain.php\" />\n   <install as=\"kronolith/templates/alarm/mail.html.php\" name=\"templates/alarm/mail.html.php\" />\n   <install as=\"kronolith/templates/alarm/mail.plain.php\" name=\"templates/alarm/mail.plain.php\" />\n   <install as=\"kronolith/templates/attendees/attendees.inc\" name=\"templates/attendees/attendees.inc\" />\n   <install as=\"kronolith/templates/chunks/calendar.php\" name=\"templates/chunks/calendar.php\" />\n   <install as=\"kronolith/templates/chunks/permissions.inc\" name=\"templates/chunks/permissions.inc\" />\n   <install as=\"kronolith/templates/contacts/contacts.inc\" name=\"templates/contacts/contacts.inc\" />\n   <install as=\"kronolith/templates/data/export.inc\" name=\"templates/data/export.inc\" />\n   <install as=\"kronolith/templates/data/import.inc\" name=\"templates/data/import.inc\" />\n   <install as=\"kronolith/templates/day/all_day.inc\" name=\"templates/day/all_day.inc\" />\n   <install as=\"kronolith/templates/day/head.inc\" name=\"templates/day/head.inc\" />\n   <install as=\"kronolith/templates/day/head_side_by_side.inc\" name=\"templates/day/head_side_by_side.inc\" />\n   <install as=\"kronolith/templates/day/rows.html\" name=\"templates/day/rows.html\" />\n   <install as=\"kronolith/templates/delete/delete.inc\" name=\"templates/delete/delete.inc\" />\n   <install as=\"kronolith/templates/delete/one.inc\" name=\"templates/delete/one.inc\" />\n   <install as=\"kronolith/templates/edit/edit.inc\" name=\"templates/edit/edit.inc\" />\n   <install as=\"kronolith/templates/edit/edit_timespan.inc\" name=\"templates/edit/edit_timespan.inc\" />\n   <install as=\"kronolith/templates/fbview/busyblock.html\" name=\"templates/fbview/busyblock.html\" />\n   <install as=\"kronolith/templates/fbview/emptyblock.html\" name=\"templates/fbview/emptyblock.html\" />\n   <install as=\"kronolith/templates/fbview/header.html\" name=\"templates/fbview/header.html\" />\n   <install as=\"kronolith/templates/fbview/legend.html\" name=\"templates/fbview/legend.html\" />\n   <install as=\"kronolith/templates/fbview/meetingblock.html\" name=\"templates/fbview/meetingblock.html\" />\n   <install as=\"kronolith/templates/fbview/row.html\" name=\"templates/fbview/row.html\" />\n   <install as=\"kronolith/templates/fbview/section.html\" name=\"templates/fbview/section.html\" />\n   <install as=\"kronolith/templates/fbview/unknownblock.html\" name=\"templates/fbview/unknownblock.html\" />\n   <install as=\"kronolith/templates/feeds/atom.xml\" name=\"templates/feeds/atom.xml\" />\n   <install as=\"kronolith/templates/index/agenda.inc\" name=\"templates/index/agenda.inc\" />\n   <install as=\"kronolith/templates/index/day.inc\" name=\"templates/index/day.inc\" />\n   <install as=\"kronolith/templates/index/edit.inc\" name=\"templates/index/edit.inc\" />\n   <install as=\"kronolith/templates/index/index.inc\" name=\"templates/index/index.inc\" />\n   <install as=\"kronolith/templates/index/month.inc\" name=\"templates/index/month.inc\" />\n   <install as=\"kronolith/templates/index/task.inc\" name=\"templates/index/task.inc\" />\n   <install as=\"kronolith/templates/index/tasks.inc\" name=\"templates/index/tasks.inc\" />\n   <install as=\"kronolith/templates/index/week.inc\" name=\"templates/index/week.inc\" />\n   <install as=\"kronolith/templates/index/year.inc\" name=\"templates/index/year.inc\" />\n   <install as=\"kronolith/templates/itip/notification.html.php\" name=\"templates/itip/notification.html.php\" />\n   <install as=\"kronolith/templates/itip/notification.plain.php\" name=\"templates/itip/notification.plain.php\" />\n   <install as=\"kronolith/templates/mobile/day.html.php\" name=\"templates/mobile/day.html.php\" />\n   <install as=\"kronolith/templates/mobile/event.html.php\" name=\"templates/mobile/event.html.php\" />\n   <install as=\"kronolith/templates/mobile/head.html.php\" name=\"templates/mobile/head.html.php\" />\n   <install as=\"kronolith/templates/mobile/javascript_defs.php\" name=\"templates/mobile/javascript_defs.php\" />\n   <install as=\"kronolith/templates/mobile/month.html.php\" name=\"templates/mobile/month.html.php\" />\n   <install as=\"kronolith/templates/mobile/notice.html.php\" name=\"templates/mobile/notice.html.php\" />\n   <install as=\"kronolith/templates/mobile/summary.html.php\" name=\"templates/mobile/summary.html.php\" />\n   <install as=\"kronolith/templates/month/head.inc\" name=\"templates/month/head.inc\" />\n   <install as=\"kronolith/templates/month/head_side_by_side.inc\" name=\"templates/month/head_side_by_side.inc\" />\n   <install as=\"kronolith/templates/perms/perms.inc\" name=\"templates/perms/perms.inc\" />\n   <install as=\"kronolith/templates/prefs/defaultalarm.html\" name=\"templates/prefs/defaultalarm.html\" />\n   <install as=\"kronolith/templates/resources/form-header.inc\" name=\"templates/resources/form-header.inc\" />\n   <install as=\"kronolith/templates/resources/resource-form.php\" name=\"templates/resources/resource-form.php\" />\n   <install as=\"kronolith/templates/search/empty.inc\" name=\"templates/search/empty.inc\" />\n   <install as=\"kronolith/templates/search/event_footers.inc\" name=\"templates/search/event_footers.inc\" />\n   <install as=\"kronolith/templates/search/event_headers.inc\" name=\"templates/search/event_headers.inc\" />\n   <install as=\"kronolith/templates/search/event_summaries.inc\" name=\"templates/search/event_summaries.inc\" />\n   <install as=\"kronolith/templates/search/header.inc\" name=\"templates/search/header.inc\" />\n   <install as=\"kronolith/templates/search/search.inc\" name=\"templates/search/search.inc\" />\n   <install as=\"kronolith/templates/search/search_advanced.inc\" name=\"templates/search/search_advanced.inc\" />\n   <install as=\"kronolith/templates/share/notification.html.php\" name=\"templates/share/notification.html.php\" />\n   <install as=\"kronolith/templates/share/notification.plain.php\" name=\"templates/share/notification.plain.php\" />\n   <install as=\"kronolith/templates/view/view.inc\" name=\"templates/view/view.inc\" />\n   <install as=\"kronolith/templates/week/head.inc\" name=\"templates/week/head.inc\" />\n   <install as=\"kronolith/templates/week/head_side_by_side.inc\" name=\"templates/week/head_side_by_side.inc\" />\n   <install as=\"kronolith/templates/year/head.inc\" name=\"templates/year/head.inc\" />\n   <install as=\"Kronolith/AllTests.php\" name=\"test/Kronolith/AllTests.php\" />\n   <install as=\"Kronolith/Autoload.php\" name=\"test/Kronolith/Autoload.php\" />\n   <install as=\"Kronolith/phpunit.xml\" name=\"test/Kronolith/phpunit.xml\" />\n   <install as=\"Kronolith/TestCase.php\" name=\"test/Kronolith/TestCase.php\" />\n   <install as=\"Kronolith/fixtures/allday.ics\" name=\"test/Kronolith/fixtures/allday.ics\" />\n   <install as=\"Kronolith/fixtures/bug7068.ics\" name=\"test/Kronolith/fixtures/bug7068.ics\" />\n   <install as=\"Kronolith/fixtures/export1.ics\" name=\"test/Kronolith/fixtures/export1.ics\" />\n   <install as=\"Kronolith/fixtures/export2.ics\" name=\"test/Kronolith/fixtures/export2.ics\" />\n   <install as=\"Kronolith/fixtures/export3.ics\" name=\"test/Kronolith/fixtures/export3.ics\" />\n   <install as=\"Kronolith/fixtures/export4.ics\" name=\"test/Kronolith/fixtures/export4.ics\" />\n   <install as=\"Kronolith/fixtures/fromicalendar.ics\" name=\"test/Kronolith/fixtures/fromicalendar.ics\" />\n   <install as=\"Kronolith/Integration/AllDayTest.php\" name=\"test/Kronolith/Integration/AllDayTest.php\" />\n   <install as=\"Kronolith/Integration/FromIcalendarTest.php\" name=\"test/Kronolith/Integration/FromIcalendarTest.php\" />\n   <install as=\"Kronolith/Integration/ToIcalendarTest.php\" name=\"test/Kronolith/Integration/ToIcalendarTest.php\" />\n   <install as=\"Kronolith/Integration/Driver/Base.php\" name=\"test/Kronolith/Integration/Driver/Base.php\" />\n   <install as=\"Kronolith/Integration/Driver/KolabTest.php\" name=\"test/Kronolith/Integration/Driver/KolabTest.php\" />\n   <install as=\"Kronolith/Integration/Driver/Sql/Base.php\" name=\"test/Kronolith/Integration/Driver/Sql/Base.php\" />\n   <install as=\"Kronolith/Integration/Driver/Sql/Pdo/SqliteTest.php\" name=\"test/Kronolith/Integration/Driver/Sql/Pdo/SqliteTest.php\" />\n   <install as=\"Kronolith/Integration/Kronolith/Base.php\" name=\"test/Kronolith/Integration/Kronolith/Base.php\" />\n   <install as=\"Kronolith/Integration/Kronolith/KolabTest.php\" name=\"test/Kronolith/Integration/Kronolith/KolabTest.php\" />\n   <install as=\"Kronolith/Integration/Kronolith/Sql/Base.php\" name=\"test/Kronolith/Integration/Kronolith/Sql/Base.php\" />\n   <install as=\"Kronolith/Integration/Kronolith/Sql/Pdo/SqliteTest.php\" name=\"test/Kronolith/Integration/Kronolith/Sql/Pdo/SqliteTest.php\" />\n   <install as=\"Kronolith/Stub/Driver.php\" name=\"test/Kronolith/Stub/Driver.php\" />\n   <install as=\"Kronolith/Stub/Registry.php\" name=\"test/Kronolith/Stub/Registry.php\" />\n   <install as=\"Kronolith/Stub/ShareFactory.php\" name=\"test/Kronolith/Stub/ShareFactory.php\" />\n   <install as=\"Kronolith/Stub/Tagger.php\" name=\"test/Kronolith/Stub/Tagger.php\" />\n   <install as=\"Kronolith/Stub/Types.php\" name=\"test/Kronolith/Stub/Types.php\" />\n   <install as=\"kronolith/themes/bluewhite/screen.css\" name=\"themes/bluewhite/screen.css\" />\n   <install as=\"kronolith/themes/burntorange/screen.css\" name=\"themes/burntorange/screen.css\" />\n   <install as=\"kronolith/themes/default/embed.css\" name=\"themes/default/embed.css\" />\n   <install as=\"kronolith/themes/default/ie7.css\" name=\"themes/default/ie7.css\" />\n   <install as=\"kronolith/themes/default/ie8.css\" name=\"themes/default/ie8.css\" />\n   <install as=\"kronolith/themes/default/mobile.css\" name=\"themes/default/mobile.css\" />\n   <install as=\"kronolith/themes/default/opera.css\" name=\"themes/default/opera.css\" />\n   <install as=\"kronolith/themes/default/screen.css\" name=\"themes/default/screen.css\" />\n   <install as=\"kronolith/themes/default/webkit.css\" name=\"themes/default/webkit.css\" />\n   <install as=\"kronolith/themes/default/graphics/addressbook_browse.png\" name=\"themes/default/graphics/addressbook_browse.png\" />\n   <install as=\"kronolith/themes/default/graphics/agenda.png\" name=\"themes/default/graphics/agenda.png\" />\n   <install as=\"kronolith/themes/default/graphics/alarm-000.png\" name=\"themes/default/graphics/alarm-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/alarm-fff.png\" name=\"themes/default/graphics/alarm-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/alarm.png\" name=\"themes/default/graphics/alarm.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendee-accepted.png\" name=\"themes/default/graphics/attendee-accepted.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendee-declined.png\" name=\"themes/default/graphics/attendee-declined.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendee-none.png\" name=\"themes/default/graphics/attendee-none.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendee-tentative.png\" name=\"themes/default/graphics/attendee-tentative.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendees-000.png\" name=\"themes/default/graphics/attendees-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendees-fff.png\" name=\"themes/default/graphics/attendees-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/attendees.png\" name=\"themes/default/graphics/attendees.png\" />\n   <install as=\"kronolith/themes/default/graphics/back_quick.png\" name=\"themes/default/graphics/back_quick.png\" />\n   <install as=\"kronolith/themes/default/graphics/big_agenda.png\" name=\"themes/default/graphics/big_agenda.png\" />\n   <install as=\"kronolith/themes/default/graphics/big_alarm.png\" name=\"themes/default/graphics/big_alarm.png\" />\n   <install as=\"kronolith/themes/default/graphics/big_invitation.png\" name=\"themes/default/graphics/big_invitation.png\" />\n   <install as=\"kronolith/themes/default/graphics/big_share.png\" name=\"themes/default/graphics/big_share.png\" />\n   <install as=\"kronolith/themes/default/graphics/calendars.png\" name=\"themes/default/graphics/calendars.png\" />\n   <install as=\"kronolith/themes/default/graphics/checkbox_off.png\" name=\"themes/default/graphics/checkbox_off.png\" />\n   <install as=\"kronolith/themes/default/graphics/checkbox_on.png\" name=\"themes/default/graphics/checkbox_on.png\" />\n   <install as=\"kronolith/themes/default/graphics/checkbox_over.png\" name=\"themes/default/graphics/checkbox_over.png\" />\n   <install as=\"kronolith/themes/default/graphics/close.png\" name=\"themes/default/graphics/close.png\" />\n   <install as=\"kronolith/themes/default/graphics/dayview.png\" name=\"themes/default/graphics/dayview.png\" />\n   <install as=\"kronolith/themes/default/graphics/delete-000.png\" name=\"themes/default/graphics/delete-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/delete-fff.png\" name=\"themes/default/graphics/delete-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/drag-handle.png\" name=\"themes/default/graphics/drag-handle.png\" />\n   <install as=\"kronolith/themes/default/graphics/edit-000.png\" name=\"themes/default/graphics/edit-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/edit-fff.png\" name=\"themes/default/graphics/edit-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/exception-000.png\" name=\"themes/default/graphics/exception-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/exception-fff.png\" name=\"themes/default/graphics/exception-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/favicon.ico\" name=\"themes/default/graphics/favicon.ico\" />\n   <install as=\"kronolith/themes/default/graphics/goto.png\" name=\"themes/default/graphics/goto.png\" />\n   <install as=\"kronolith/themes/default/graphics/help.png\" name=\"themes/default/graphics/help.png\" />\n   <install as=\"kronolith/themes/default/graphics/kronolith.png\" name=\"themes/default/graphics/kronolith.png\" />\n   <install as=\"kronolith/themes/default/graphics/left.png\" name=\"themes/default/graphics/left.png\" />\n   <install as=\"kronolith/themes/default/graphics/loading.gif\" name=\"themes/default/graphics/loading.gif\" />\n   <install as=\"kronolith/themes/default/graphics/logout.png\" name=\"themes/default/graphics/logout.png\" />\n   <install as=\"kronolith/themes/default/graphics/minus.png\" name=\"themes/default/graphics/minus.png\" />\n   <install as=\"kronolith/themes/default/graphics/monthview.png\" name=\"themes/default/graphics/monthview.png\" />\n   <install as=\"kronolith/themes/default/graphics/new.png\" name=\"themes/default/graphics/new.png\" />\n   <install as=\"kronolith/themes/default/graphics/new_big.png\" name=\"themes/default/graphics/new_big.png\" />\n   <install as=\"kronolith/themes/default/graphics/new_small.png\" name=\"themes/default/graphics/new_small.png\" />\n   <install as=\"kronolith/themes/default/graphics/new_small_fade.png\" name=\"themes/default/graphics/new_small_fade.png\" />\n   <install as=\"kronolith/themes/default/graphics/new_task.png\" name=\"themes/default/graphics/new_task.png\" />\n   <install as=\"kronolith/themes/default/graphics/picker.png\" name=\"themes/default/graphics/picker.png\" />\n   <install as=\"kronolith/themes/default/graphics/plus.png\" name=\"themes/default/graphics/plus.png\" />\n   <install as=\"kronolith/themes/default/graphics/prefs.png\" name=\"themes/default/graphics/prefs.png\" />\n   <install as=\"kronolith/themes/default/graphics/print.png\" name=\"themes/default/graphics/print.png\" />\n   <install as=\"kronolith/themes/default/graphics/private-000.png\" name=\"themes/default/graphics/private-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/private-fff.png\" name=\"themes/default/graphics/private-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/recur-000.png\" name=\"themes/default/graphics/recur-000.png\" />\n   <install as=\"kronolith/themes/default/graphics/recur-fff.png\" name=\"themes/default/graphics/recur-fff.png\" />\n   <install as=\"kronolith/themes/default/graphics/right.png\" name=\"themes/default/graphics/right.png\" />\n   <install as=\"kronolith/themes/default/graphics/search.png\" name=\"themes/default/graphics/search.png\" />\n   <install as=\"kronolith/themes/default/graphics/tasks.png\" name=\"themes/default/graphics/tasks.png\" />\n   <install as=\"kronolith/themes/default/graphics/today.png\" name=\"themes/default/graphics/today.png\" />\n   <install as=\"kronolith/themes/default/graphics/unknown-background.png\" name=\"themes/default/graphics/unknown-background.png\" />\n   <install as=\"kronolith/themes/default/graphics/weekview.png\" name=\"themes/default/graphics/weekview.png\" />\n   <install as=\"kronolith/themes/default/graphics/workweekview.png\" name=\"themes/default/graphics/workweekview.png\" />\n   <install as=\"kronolith/themes/default/graphics/yearview.png\" name=\"themes/default/graphics/yearview.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/alarm.png\" name=\"themes/default/graphics/alerts/alarm.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/error.png\" name=\"themes/default/graphics/alerts/error.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/message.png\" name=\"themes/default/graphics/alerts/message.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/success.png\" name=\"themes/default/graphics/alerts/success.png\" />\n   <install as=\"kronolith/themes/default/graphics/alerts/warning.png\" name=\"themes/default/graphics/alerts/warning.png\" />\n   <install as=\"kronolith/themes/fadetogreen/screen.css\" name=\"themes/fadetogreen/screen.css\" />\n   <install as=\"kronolith/themes/fadetogreen/graphics/headerbox.png\" name=\"themes/fadetogreen/graphics/headerbox.png\" />\n   <install as=\"kronolith/themes/mozilla/screen.css\" name=\"themes/mozilla/screen.css\" />\n   <install as=\"kronolith/themes/silver/ie7.css\" name=\"themes/silver/ie7.css\" />\n   <install as=\"kronolith/themes/silver/ie8.css\" name=\"themes/silver/ie8.css\" />\n   <install as=\"kronolith/themes/silver/screen.css\" name=\"themes/silver/screen.css\" />\n   <install as=\"kronolith/themes/silver/graphics/addressbook_browse.png\" name=\"themes/silver/graphics/addressbook_browse.png\" />\n   <install as=\"kronolith/themes/silver/graphics/agenda.png\" name=\"themes/silver/graphics/agenda.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alarm-000.png\" name=\"themes/silver/graphics/alarm-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alarm-fff.png\" name=\"themes/silver/graphics/alarm-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alarm.png\" name=\"themes/silver/graphics/alarm.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendee-accepted.png\" name=\"themes/silver/graphics/attendee-accepted.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendee-declined.png\" name=\"themes/silver/graphics/attendee-declined.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendee-none.png\" name=\"themes/silver/graphics/attendee-none.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendee-tentative.png\" name=\"themes/silver/graphics/attendee-tentative.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendees-000.png\" name=\"themes/silver/graphics/attendees-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendees-fff.png\" name=\"themes/silver/graphics/attendees-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/attendees.png\" name=\"themes/silver/graphics/attendees.png\" />\n   <install as=\"kronolith/themes/silver/graphics/calendars.png\" name=\"themes/silver/graphics/calendars.png\" />\n   <install as=\"kronolith/themes/silver/graphics/close.png\" name=\"themes/silver/graphics/close.png\" />\n   <install as=\"kronolith/themes/silver/graphics/dayview.png\" name=\"themes/silver/graphics/dayview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/delete-000.png\" name=\"themes/silver/graphics/delete-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/delete-fff.png\" name=\"themes/silver/graphics/delete-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/edit-000.png\" name=\"themes/silver/graphics/edit-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/edit-fff.png\" name=\"themes/silver/graphics/edit-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/exception-000.png\" name=\"themes/silver/graphics/exception-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/exception-fff.png\" name=\"themes/silver/graphics/exception-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/favicon.ico\" name=\"themes/silver/graphics/favicon.ico\" />\n   <install as=\"kronolith/themes/silver/graphics/goto.png\" name=\"themes/silver/graphics/goto.png\" />\n   <install as=\"kronolith/themes/silver/graphics/help.png\" name=\"themes/silver/graphics/help.png\" />\n   <install as=\"kronolith/themes/silver/graphics/kronolith.png\" name=\"themes/silver/graphics/kronolith.png\" />\n   <install as=\"kronolith/themes/silver/graphics/left.png\" name=\"themes/silver/graphics/left.png\" />\n   <install as=\"kronolith/themes/silver/graphics/loading.gif\" name=\"themes/silver/graphics/loading.gif\" />\n   <install as=\"kronolith/themes/silver/graphics/logout.png\" name=\"themes/silver/graphics/logout.png\" />\n   <install as=\"kronolith/themes/silver/graphics/menu-active.png\" name=\"themes/silver/graphics/menu-active.png\" />\n   <install as=\"kronolith/themes/silver/graphics/menu.png\" name=\"themes/silver/graphics/menu.png\" />\n   <install as=\"kronolith/themes/silver/graphics/minus.png\" name=\"themes/silver/graphics/minus.png\" />\n   <install as=\"kronolith/themes/silver/graphics/monthview.png\" name=\"themes/silver/graphics/monthview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/new.png\" name=\"themes/silver/graphics/new.png\" />\n   <install as=\"kronolith/themes/silver/graphics/new_big.png\" name=\"themes/silver/graphics/new_big.png\" />\n   <install as=\"kronolith/themes/silver/graphics/new_small.png\" name=\"themes/silver/graphics/new_small.png\" />\n   <install as=\"kronolith/themes/silver/graphics/new_task.png\" name=\"themes/silver/graphics/new_task.png\" />\n   <install as=\"kronolith/themes/silver/graphics/picker.png\" name=\"themes/silver/graphics/picker.png\" />\n   <install as=\"kronolith/themes/silver/graphics/plus.png\" name=\"themes/silver/graphics/plus.png\" />\n   <install as=\"kronolith/themes/silver/graphics/prefs.png\" name=\"themes/silver/graphics/prefs.png\" />\n   <install as=\"kronolith/themes/silver/graphics/print.png\" name=\"themes/silver/graphics/print.png\" />\n   <install as=\"kronolith/themes/silver/graphics/private-000.png\" name=\"themes/silver/graphics/private-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/private-fff.png\" name=\"themes/silver/graphics/private-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/recur-000.png\" name=\"themes/silver/graphics/recur-000.png\" />\n   <install as=\"kronolith/themes/silver/graphics/recur-fff.png\" name=\"themes/silver/graphics/recur-fff.png\" />\n   <install as=\"kronolith/themes/silver/graphics/right.png\" name=\"themes/silver/graphics/right.png\" />\n   <install as=\"kronolith/themes/silver/graphics/search.png\" name=\"themes/silver/graphics/search.png\" />\n   <install as=\"kronolith/themes/silver/graphics/tasks.png\" name=\"themes/silver/graphics/tasks.png\" />\n   <install as=\"kronolith/themes/silver/graphics/today.png\" name=\"themes/silver/graphics/today.png\" />\n   <install as=\"kronolith/themes/silver/graphics/unknown-background.png\" name=\"themes/silver/graphics/unknown-background.png\" />\n   <install as=\"kronolith/themes/silver/graphics/weekview.png\" name=\"themes/silver/graphics/weekview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/workweekview.png\" name=\"themes/silver/graphics/workweekview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/yearview.png\" name=\"themes/silver/graphics/yearview.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/alarm.png\" name=\"themes/silver/graphics/alerts/alarm.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/error.png\" name=\"themes/silver/graphics/alerts/error.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/message.png\" name=\"themes/silver/graphics/alerts/message.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/success.png\" name=\"themes/silver/graphics/alerts/success.png\" />\n   <install as=\"kronolith/themes/silver/graphics/alerts/warning.png\" name=\"themes/silver/graphics/alerts/warning.png\" />\n   <install as=\"kronolith/themes/simplex/screen.css\" name=\"themes/simplex/screen.css\" />\n   <install as=\"kronolith/themes/tango-blue/screen.css\" name=\"themes/tango-blue/screen.css\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/addressbook_browse.png\" name=\"themes/tango-blue/graphics/addressbook_browse.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alarm-000.png\" name=\"themes/tango-blue/graphics/alarm-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alarm-fff.png\" name=\"themes/tango-blue/graphics/alarm-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alarm.png\" name=\"themes/tango-blue/graphics/alarm.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendee-accepted.png\" name=\"themes/tango-blue/graphics/attendee-accepted.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendee-declined.png\" name=\"themes/tango-blue/graphics/attendee-declined.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendee-none.png\" name=\"themes/tango-blue/graphics/attendee-none.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendee-tentative.png\" name=\"themes/tango-blue/graphics/attendee-tentative.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendees-000.png\" name=\"themes/tango-blue/graphics/attendees-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendees-fff.png\" name=\"themes/tango-blue/graphics/attendees-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/attendees.png\" name=\"themes/tango-blue/graphics/attendees.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/calendars.png\" name=\"themes/tango-blue/graphics/calendars.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/close.png\" name=\"themes/tango-blue/graphics/close.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/dayview.png\" name=\"themes/tango-blue/graphics/dayview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/delete-000.png\" name=\"themes/tango-blue/graphics/delete-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/delete-fff.png\" name=\"themes/tango-blue/graphics/delete-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/edit-000.png\" name=\"themes/tango-blue/graphics/edit-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/edit-fff.png\" name=\"themes/tango-blue/graphics/edit-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/exception-000.png\" name=\"themes/tango-blue/graphics/exception-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/exception-fff.png\" name=\"themes/tango-blue/graphics/exception-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/favicon.ico\" name=\"themes/tango-blue/graphics/favicon.ico\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/goto.png\" name=\"themes/tango-blue/graphics/goto.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/kronolith.png\" name=\"themes/tango-blue/graphics/kronolith.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/loading.gif\" name=\"themes/tango-blue/graphics/loading.gif\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/minus.png\" name=\"themes/tango-blue/graphics/minus.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/monthview.png\" name=\"themes/tango-blue/graphics/monthview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/new.png\" name=\"themes/tango-blue/graphics/new.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/new_big.png\" name=\"themes/tango-blue/graphics/new_big.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/new_small.png\" name=\"themes/tango-blue/graphics/new_small.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/picker.png\" name=\"themes/tango-blue/graphics/picker.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/plus.png\" name=\"themes/tango-blue/graphics/plus.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/print.png\" name=\"themes/tango-blue/graphics/print.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/private-000.png\" name=\"themes/tango-blue/graphics/private-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/private-fff.png\" name=\"themes/tango-blue/graphics/private-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/recur-000.png\" name=\"themes/tango-blue/graphics/recur-000.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/recur-fff.png\" name=\"themes/tango-blue/graphics/recur-fff.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/search.png\" name=\"themes/tango-blue/graphics/search.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/today.png\" name=\"themes/tango-blue/graphics/today.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/unknown-background.png\" name=\"themes/tango-blue/graphics/unknown-background.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/weekview.png\" name=\"themes/tango-blue/graphics/weekview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/workweekview.png\" name=\"themes/tango-blue/graphics/workweekview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/yearview.png\" name=\"themes/tango-blue/graphics/yearview.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/alarm.png\" name=\"themes/tango-blue/graphics/alerts/alarm.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/error.png\" name=\"themes/tango-blue/graphics/alerts/error.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/message.png\" name=\"themes/tango-blue/graphics/alerts/message.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/success.png\" name=\"themes/tango-blue/graphics/alerts/success.png\" />\n   <install as=\"kronolith/themes/tango-blue/graphics/alerts/warning.png\" name=\"themes/tango-blue/graphics/alerts/warning.png\" />\n   <install as=\"kronolith/add.php\" name=\"add.php\" />\n   <install as=\"kronolith/attend.php\" name=\"attend.php\" />\n   <install as=\"kronolith/attendees.php\" name=\"attendees.php\" />\n   <install as=\"kronolith/contacts.php\" name=\"contacts.php\" />\n   <install as=\"COPYING\" name=\"COPYING\" />\n   <install as=\"kronolith/data.php\" name=\"data.php\" />\n   <install as=\"kronolith/day.php\" name=\"day.php\" />\n   <install as=\"kronolith/delete.php\" name=\"delete.php\" />\n   <install as=\"kronolith/edit.php\" name=\"edit.php\" />\n   <install as=\"kronolith/event.php\" name=\"event.php\" />\n   <install as=\"kronolith/fb.php\" name=\"fb.php\" />\n   <install as=\"kronolith/index.php\" name=\"index.php\" />\n   <install as=\"kronolith/mobile.php\" name=\"mobile.php\" />\n   <install as=\"kronolith/month.php\" name=\"month.php\" />\n   <install as=\"kronolith/new.php\" name=\"new.php\" />\n   <install as=\"kronolith/perms.php\" name=\"perms.php\" />\n   <install as=\"README\" name=\"README\" />\n   <install as=\"kronolith/search.php\" name=\"search.php\" />\n   <install as=\"kronolith/view.php\" name=\"view.php\" />\n   <install as=\"kronolith/week.php\" name=\"week.php\" />\n   <install as=\"kronolith/workweek.php\" name=\"workweek.php\" />\n   <install as=\"kronolith/year.php\" name=\"year.php\" />\n  </filelist>\n </phprelease>\n <changelog>\n  <release>\n   <version>\n    <release>3.0.0alpha1</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>alpha</release>\n    <api>alpha</api>\n   </stability>\n   <date>2011-03-09</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* First alpha release for Horde 4.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.0beta1</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2011-03-16</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* Only load external events in IFRAME if configured.\n* Fix retrieving event UIDs without date limit (Simon B\u00fchler, Bug #9651).\n* Fix saving display status of other applications&apos; calendars (Bug #9636).\n* Add migration for converting existing event categories to tags.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.0RC1</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2011-03-23</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* First release candidate for Horde 4.\n* [jan] Fix custom event alarm settings in traditional view (Bug #9154).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.0RC2</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2011-03-29</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* Second release candidate for Horde 4.\n* [jan] Fix javascript error when viewing events with desktop notifications (Bug #9727).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.0</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2011-04-06</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* First stable release for Horde 4.\n* [jan] Fix application-specific permission checks (Bug #9786).\n* [jan] Fix fatal error when using the max_events permission (Bug #9784).\n* [mjr] Datatree share to SQL upgrade script refactored for Horde 4.\n* [mjr] Add migration for mysql specific geospatial fields (Bug #9758).\n* [jan] Set default alarm in dynamic view (Bug #9752).\n* [jan] Set default alarm in dynamic view (Bug #9752).\n* [jan] Move all executable scripts to bin/ and prefix with kronolith-.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.1</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-04-20</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Don&apos;t store all task lists in the session.\n* [jan] Fix new task lists not showing up until next login (Bug #9814).\n* [mjr] Fix broken event alarm links in sidebar (Bug #9897).\n* [mjr] Fix drag/drop editing of recurring events (Bug #9880).\n* [jan] Fix undefined function on Windows (Bug #9916).\n* [jan] Support adding and editing of CalDAV events in dynamic view (Bug #9865).\n* [mjr] Allow migrations to complete despite of missing shares.\n* [jan] Remove debug code in Ajax library (Bug #9818).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.2</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-05-03</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Don&apos;t show event edit links if user doesn&apos;t have edit permissions on any calendar.\n* [jan] Fix parsing of recurrence end date in dynamic view (Bug #10025).\n* [jan] Fix displaying of new tasks in new task lists.\n* [jan] Delete tasks from tasks view when deleting tasks lists.\n* [jan] Don&apos;t export multi-day events as multiple events to iCalendar data (Bug #10007).\n* [jan] Fix dragging tasks in the dynamic view.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.3</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-05-18</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Add header for timeobjects calendars.\n* [jan] Fix date picker in advanced search form (Bug #10039).\n* [mjr] Remove visible exceptions when deleting recurring events (Bug #10013).\n* [mjr] Fix issue causing listTimeObject calendars to not appear (Bug #10012).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.4</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-06-14</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Only highlight days in the mini calendar that are currently displayed (Bug #10048).\n* [jan] Fix advanced search with empty search criteria (Bug #10038).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.5</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-07-05</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Update task due date in interface after dragging a task (Bug #10001).\n* [jan] Correctly sort events in portal block or widget if only displaying a single calendar (Bug #10099).\n* [mjr] Allow syncing of multiple owner-owned calendars (Request #8734).\n* [jan] Don&apos;t show calendar drop down in event form without delete permissions (Bug #10201).\n* [jan] Don&apos;t change event creator when saving events.\n* [jan] Fetch events immediately after saving remote calendar.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.6</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-08-02</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Display event time in dynamic agenda/search view.\n* [jan] Don&apos;t load all shares with requested permissions from the backend if $conf[&apos;share&apos;][&apos;hidden&apos;] is enabled.\n* [jan] Improve exporting all-day events to Funambol clients.\n* [mjr] Fix removing an exception from a recurrence series (Bug # 10365).\n* [jan] Close session while listing events to speed up parallel loading from different calendars.\n* [jan] Share list of displayed task lists with Nag (requires Nag 3.0.3).\n* [jan] Don&apos;t show import/export link in preferences if using the dynamic view.\n* [mjr] Force ActiveSync device reset after sync_calendars pref is changed (Request #10342).\n* [jan] Support updating attendees from vCalendar 1.0 iTip responses.\n* [jan] Fix sending invitations to attendees from traditional view.\n* [jan] Fix organizer attribute when exporting to vCalendar 1.0.\n* [mjr] Fix issue that prevented synching when no sync_calendar pref was set (Bug #10329).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.7</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-08-05</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [mjr] Fix updating attendees (Bug #10411).\n* [jan] Fix error if Nag is not installed (Bug #10406).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.8</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-08-17</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Fix deleting resources (Bug #10427)\n* [jan] Support snoozing alarms with Sundbird/Lightning (Request #7470).\n* [jan] Import VALARM components from iCalendar 2.0 data (Request #6665).\n* [jan] Fix creating events from dynamic view on Windows (Bug #9916).\n* [mjr] Fix displaying of freebusy data in dynamic view (adominguez@cne.gob.ve, Bug #10347).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.9</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-08-30</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Fix fatal error while searching if hitting certain recurring events.\n* [jan] Fix exporting events with snoozed alarms (Bug #10438).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.10</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-09-21</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Fix opening events from agenda view.\n* [mjr] The current default calendar is always included in the sync_calendars pref.\n* [mjr] Ensure exception gets start and end times when created from month view (Bug #10496)\n* [jan] Update group permission when changing group down list in basic permissions (Bug #10482).\n* [jan] Fix race condition when editing group permission in basic permission screen (Bug #10482).\n* [mjr] Fix removeUserData API (Bug #10241).\n* [jan] Fix deleting events with a WebDAV client (Bug #10478).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.11</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-11-02</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [mjr] Fix alarms for recurring events (Bug #10678).\n* [mjr] Allow filtering listTagInfo results by user.\n* [jan] Fix uncompleting tasks in dynamic view (Carlos Tim\u00f3teo, Bug #10653).\n* [cjh/jan] Improve design.\n* [mjr] Fix displaying resources when no attendees are present (Bug #10507).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.12</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-11-22</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Show status of events in agenda messages (Request #10517).\n* [mjr] Fix selecting custom time from time selection drop down (Bug #10737).\n* [jan] Always use fresh Horde_Http_Client instances for remote calendars (Bug #10740).\n* [jan] Add confirmation screen when deleting events in dynamic view (Request #10725).\n* [jan] Fix holidays disappearing from month view if deleting another event.\n* [jan] Fix resetting attendee response status when saving events in dynamic view (Bug #10620).\n* [jan] Support CalDAV servers that don&apos;t use DAV: as the default namespace (christof@buergi.lugs.ch, Bug #10716).\n* [jan] Allow to view and create copies of holiday events (Bug #10650).\n* [jan] Don&apos;t show import/export tabs in dynamic view if disabled (Bug #10705).\n* [jan] Don&apos;t show option to share with everyone in basic permissions if disabled (piper@hrz.uni-marburg.de, Bug #10706).\n* [mjr] Only set ORGANIZER field if the event is a group meeting (Bug #10697).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.13</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2011-12-13</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Hide disabled calendar sections (Bug #9815).\n* [gwr] Fixed recurrence handling with the Kolab backend.\n* [gwr] Fixed naming of the default calendar for the Kolab backend.\n* [gwr] Fixed deleting events with the Kolab backend.\n* [gwr] Fixed migrations for SQLite as database backend.\n* [mjr] Fix keyboard navigation of time entry fields in dynamic view (Bug #10799).\n* [mjr] Fix parsing display_cal variables for internal calendar links on various blocks and embedded imples (Bug #10767).\n* [mjr] Fix adding events directly to a resource&apos;s calendar (Bug #10827).\n* [mjr] Fix regression introduced in 3.0.12 that broke checking a Resource&apos;s availability in certain cases (Bug #10806).\n* [jan] Don&apos;t fail on empty CalDAV calendars (christof@buergi.lugs.ch, Bug #10739).\n* [jan] Check permissions when building application drop down (sberthelot@emisfr.com, Bug #10811).\n* [gwr] Fix saving Kolab events.\n* [jan] Update Japanese translation (Hiromi Kimura &lt;hiromi@tac.tsukuba.ac.jp&gt;).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.14</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2012-01-17</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [mjr] Fix bug that could cause incorrect event exceptions to be created when drag and dropping events in month view.\n* [jan] Fix page titles not always updating correctly.\n* [jan] Display event time in dynamic view if requested (Request #9866).\n* [jan] Only show end time if different from start time.\n* [jan] Fix day sorting in agenda view.\n* [jan] Sort user and group names in permission screen (Request #10896).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.15</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2012-01-31</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Search complete names and addresses when auto-completing attendees.\n* [jan] Fix syntax error in migration script (Bug #10902).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.16</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2012-03-20</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] Use preferred date format in week and agenda views (Bug #11089).\n* [jan] Fix fatal error if no external calendars are available (Bug #11079).\n* [jan] Fix positioning of events on DST changing dates (Bug #11070).\n* [mjr] Fix bug that caused time shift of all day events when imported from ActiveSync devices for users in certain timezones (Bug #10991).\n* [mjr] Correctly deal with deleted calendars in sync clients (Bug #10969).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>3.0.17</release>\n    <api>3.0.0</api></version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api></stability>\n   <date>2012-03-20</date>\n   <license uri=\"http://www.horde.org/licenses/gpl\">GPL-2.0</license>\n   <notes>\n* [jan] SECURITY: Fix XSS vulnerabilities in tasks view and search view (Bug #11189).\n* [jan] Update Italian translation (Massimo Malabotta &lt;mmalabotta@units.it&gt;).\n* [jan] Improve print styles.\n* [jan] Catch if external client doesn&apos;t send LAST-MODIFIED attributes (Bug #11130).\n* [jan] Don&apos;t stop agenda script if there is an error with a single user (Bug #11129).\n* [jan] Update Hungarian translation (Zolt\u00e1n N\u00e9meth &lt;nemeth.zoltan@etit.hu&gt;).\n* [jan] Show round corners only on the start and end of multi-day events (Request #11067).\n   </notes>\n  </release>\n </changelog>\n</package>\n"], "filenames": ["kronolith/docs/CHANGES", "kronolith/js/kronolith.js", "kronolith/package.xml"], "buggy_code_start_loc": [4, 197, 36], "buggy_code_end_loc": [4, 5333, 2084], "fixing_code_start_loc": [5, 197, 37], "fixing_code_end_loc": [7, 5333, 2087], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in the (1) tasks and (2) search views in Horde Kronolith H4 before 3.0.17 allow remote attackers to inject arbitrary web script or HTML via unspecified vectors.", "other": {"cve": {"id": "CVE-2012-6620", "sourceIdentifier": "cve@mitre.org", "published": "2014-01-16T21:55:04.410", "lastModified": "2017-08-29T01:32:58.747", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in the (1) tasks and (2) search views in Horde Kronolith H4 before 3.0.17 allow remote attackers to inject arbitrary web script or HTML via unspecified vectors."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades cross-site scripting (XSS) en (1) tareas y (2) vistas de b\u00fasqueda en Horde Kronolith H4 anteriores a 3.0.17 permite a atacantes remotos inyectar script web o HTML de forma arbitraria a trav\u00e9s de vectores no especificados."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.0.16", "matchCriteriaId": "66A1075D-78B7-4890-BBD4-C45214F87713"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0:*:*:*:*:*:*:*", "matchCriteriaId": "F75CC603-45D1-4FAB-8E4D-B5CF7F6FC99A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "C3C905F8-1A2F-46A4-AD0F-9118AC3CC16D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "B60EDA48-5703-4A6D-906D-8BB833B3CC34"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "B887A9E9-C8D2-4622-A4E8-A39E5DCD0301"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "BD8032AE-F6E0-498C-A473-B1215DD4FF25"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "1823C3C8-3C94-4991-9ADE-7D966093F2C2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "1E5535C3-442C-41C1-9EDD-BC5FA23C9E80"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "5F4111B8-1AC2-4C36-8366-1E70FDA8EF49"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "5CEEE7D7-13BA-4F25-8E82-00F59CA52CD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "4D2EAFA0-CC18-4B73-B72F-A467AEE62803"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "8007A3CC-5916-42A9-9892-969A3BC49E7F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "5581E8B0-344B-41DB-9892-F4F36324E743"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "7E82DBE7-5230-45A8-B6E7-2C73B1867134"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "02646219-43E5-4912-B003-F6556582C399"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "54D4B84A-713E-4918-AB12-603D300901FD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.11:*:*:*:*:*:*:*", "matchCriteriaId": "B804D928-5962-4C23-93FE-532E58891B43"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.12:*:*:*:*:*:*:*", "matchCriteriaId": "ABC86F11-5EED-4BB3-A53C-D3749103EF1C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.13:*:*:*:*:*:*:*", "matchCriteriaId": "AB1D4DCE-A86A-4155-A249-2BB5B875A934"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.14:*:*:*:*:*:*:*", "matchCriteriaId": "E54F5C8A-7E89-4C80-9228-BCB121D8DA6C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:kronolith_h4:3.0.15:*:*:*:*:*:*:*", "matchCriteriaId": "25BE11AE-6988-4754-9102-4704707F6182"}]}]}], "references": [{"url": "http://bugs.horde.org/ticket/11189", "source": "cve@mitre.org"}, {"url": "http://lists.horde.org/archives/announce/2012/000766.html", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/53731", "source": "cve@mitre.org"}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/75563", "source": "cve@mitre.org"}, {"url": "https://github.com/horde/horde/commit/1228a6825a8dab3333d0a8c8986fc10d1f3d11b2", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/horde/horde/commit/1228a6825a8dab3333d0a8c8986fc10d1f3d11b2"}}