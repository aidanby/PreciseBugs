{"buggy_code": ["<?php\n/* Copyright (C) 2002-2007 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2008 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2007 Regis Houssin        <regis@dolibarr.fr>\n * Copyright (C) 2007      Simon Desee          <simon@dedisoft.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       \thtdocs/lib/databases/mssql.lib.php\n *\t\\brief\t\t\tFichier de la classe permettant de gerer une base mssql\n *\t\\version\t\t$Id: mssql.lib.php,v 1.87 2011/08/04 13:58:14 eldy Exp $\n */\n\n// Pour compatibilite lors de l'upgrade\nif (! defined('DOL_DOCUMENT_ROOT'))\t define('DOL_DOCUMENT_ROOT', '../..');\nif (! defined('ADODB_DATE_VERSION')) include_once(DOL_DOCUMENT_ROOT.\"/includes/adodbtime/adodb-time.inc.php\");\n\n\n/**\n *\t\\class      DoliDb\n *\t\\brief      Classe de gestion de la database de dolibarr\n *\t\\remarks\tWorks with PHP5 Only\n */\nclass DoliDb\n{\n\t//! Database handler\n\tvar $db;\n\t//! Database type\n\tvar $type='mssql';\n\t//! Database label\n\tvar $label='MSSQL';\n\t//! Charset used to force charset when creating database\n\tvar $forcecharset='latin1';\n\t//! Collate used to force collate when creating database\n\tvar $forcecollate='latin1_swedish_ci';\n\t//! Version min database\n\tvar $versionmin=array(2000);\n\t//! Resultset de la derniere requete\n\tvar $results;\n\t//! 1 si connecte, 0 sinon\n\tvar $connected;\n\t//! 1 si base selectionne, 0 sinon\n\tvar $database_selected;\n\t//! Nom base selectionnee\n\tvar $database_name;\n\t//! Nom user base\n\tvar $database_user;\n\t//! 1 si une transaction est en cours, 0 sinon\n\tvar $transaction_opened;\n\t//! Derniere requete executee\n\tvar $lastquery;\n\t//! Derniere requete executee avec echec\n\tvar $lastqueryerror;\n\t//! Message erreur mysql\n\tvar $lasterror;\n\t//! Message erreur mysql\n\tvar $lasterrno;\n\n\tvar $ok;\n\tvar $error;\n\n\n\t/**\n\t *\tOuverture d'une connexion vers le serveur et eventuellement une database.\n\t *\t@param      type\t\tType de base de donnees (mysql ou pgsql)\n\t *\t@param\t    host\t\tAddresse de la base de donnees\n\t *\t@param\t    user\t\tNom de l'utilisateur autorise\n\t *\t@param\t    pass\t\tMot de passe\n\t *\t@param\t    name\t\tNom de la database\n\t *\t@param\t    port\t\tPort of database server\n\t *\t@return     int\t\t\t1 en cas de succes, 0 sinon\n\t */\n\tfunction DoliDb($type='mssql', $host, $user, $pass, $name='', $port=0)\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$this->database_user=$user;\n\t\t$this->transaction_opened=0;\n\n\t\tif (! function_exists(\"mssql_connect\"))\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=\"Mssql PHP functions for using MSSql driver are not available in this version of PHP\";\n\t\t\tdol_syslog(\"DoliDB::DoliDB : MSsql PHP functions for using MSsql driver are not available in this version of PHP\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\tif (! $host)\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=$langs->trans(\"ErrorWrongHostParameter\");\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect, wrong host parameters\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\t// Essai connexion serveur\n\t\t$this->db = $this->connect($host, $user, $pass, $name, $port);\n\t\tif ($this->db)\n\t\t{\n\t\t\t// Si client connecte avec charset different de celui de la base Dolibarr\n\t\t\t// (La base Dolibarr a ete forcee en this->forcecharset a l'install)\n\t\t\t$this->connected = 1;\n\t\t\t$this->ok = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// host, login ou password incorrect\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=mssql_get_last_message();\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect mssql_get_last_message=\".$this->error,LOG_ERR);\n\t\t}\n\n\t\t// Si connexion serveur ok et si connexion base demandee, on essaie connexion base\n\t\tif ($this->connected && $name)\n\t\t{\n\t\t\tif ($this->select_db($name))\n\t\t\t{\n\t\t\t\t$this->database_selected = 1;\n\t\t\t\t$this->database_name = $name;\n\t\t\t\t$this->ok = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->database_selected = 0;\n\t\t\t\t$this->database_name = '';\n\t\t\t\t$this->ok = 0;\n\t\t\t\t$this->error=$this->error();\n\t\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Select_db \".$this->error,LOG_ERR);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Pas de selection de base demandee, ok ou ko\n\t\t\t$this->database_selected = 0;\n\t\t}\n\n\t\treturn $this->ok;\n\t}\n\n    /**\n     *  Convert a SQL request in Mysql syntax to PostgreSQL syntax\n     *  @param     line     SQL request line to convert\n     *  @param     type     Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *  @return    string   SQL request line converted\n     */\n\tfunction convertSQLFromMysql($line,$type='ddl')\n\t{\n\t\treturn $line;\n\t}\n\n\t/**\n\t * \tSelectionne une database.\n\t *\t@param\t    database\t\tNom de la database\n\t *\t@return\t    boolean         true si ok, false si ko\n\t */\n\tfunction select_db($database)\n\t{\n\t\treturn mssql_select_db($database, $this->db);\n\t}\n\n\t/**\n\t *     Connection vers le serveur\n\t *     @param\thost\t\taddresse de la base de donnees\n\t *     @param\tlogin\t\tnom de l'utilisateur autoris\n\t *     @param\tpasswd\t\tmot de passe\n\t *     @param\tname\t\tnom de la database (ne sert pas sous mysql, sert sous pgsql)\n\t *     @param\tport\t\tPort of database server\n\t *     @return\tresource\thandler d'acces a la base\n\t *     @see    \tclose\n\t */\n\tfunction connect($host, $login, $passwd, $name, $port=0)\n\t{\n\t\tdol_syslog(\"DoliDB::connect host=$host, port=$port, login=$login, passwd=--hidden--, name=$name\");\n\t\t$newhost=$host;\n\t\tif ($port) $newhost.=':'.$port;\n\t\t$this->db  = @mssql_connect($newhost, $login, $passwd);\n\t\t//force les enregistrement en latin1 si la base est en utf8 par defaut\n\t\t// Supprime car plante sur mon PHP-Mysql. De plus, la base est forcement en latin1 avec\n\t\t// les nouvelles version de Dolibarr car force par l'install Dolibarr.\n\t\t//$this->query('SET NAMES '.$this->forcecharset);\n\t\t//print \"Resultat fonction connect: \".$this->db;\n\t\treturn $this->db;\n\t}\n\n\t/**\n\t * \\brief          \tReturn label of manager\n\t * \\return\t\t\tstring      Label\n\t */\n\tfunction getLabel()\n\t{\n\t\treturn $this->label;\n\t}\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur\n\t *\t\\return\t        string      Chaine version\n\t */\n\tfunction getVersion()\n\t{\n\t\t$resql=$this->query(\"SELECT @@VERSION\");\n\t\t$version=$this->fetch_array($resql);\n\t\treturn $version['computed'];\n\t}\n\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur dans un tableau\n\t *\t\\return\t        array  \t\tTableau de chaque niveau de version\n\t */\n\tfunction getVersionArray()\n\t{\n\t\treturn explode('.',$this->getVersion());\n\t}\n\n\n    /**\n     *  Close database connexion\n     *  @return     boolean     True if disconnect successfull, false otherwise\n     *  @see        connect\n     */\n    function close()\n    {\n        if ($this->db)\n        {\n          //dol_syslog(\"DoliDB::disconnect\",LOG_DEBUG);\n          $this->connected=0;\n          return mssql_close($this->db);\n        }\n        return false;\n    }\n\n\n\t/**\n\t *\t\\brief      Debut d'une transaction.\n\t *\t\\return\t    int         1 si ouverture transaction ok ou deja ouverte, 0 en cas d'erreur\n\t */\n\tfunction begin()\n\t{\n\t\tif (! $this->transaction_opened)\n\t\t{\n\t\t\t$ret=$this->query(\"BEGIN TRANSACTION\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened++;\n\t\t\t\tdol_syslog(\"BEGIN Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened++;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n     * Validate a database transaction\n     * @param       log         Add more log to default log line\n     * @return      int         1 if validation is OK or transaction level no started, 0 if ERROR\n\t */\n\tfunction commit()\n\t{\n\t\tif ($this->transaction_opened <= 1)\n\t\t{\n\t\t\t$ret=$this->query(\"COMMIT TRANSACTION\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened=0;\n\t\t\t\tdol_syslog(\"COMMIT Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * \\brief      Annulation d'une transaction et retour aux anciennes valeurs\n\t * \\return\t    int         1 si annulation ok ou transaction non ouverte, 0 en cas d'erreur\n\t */\n\tfunction rollback()\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"ROLLBACK TRANSACTION\");\n\t\t\t$this->transaction_opened=0;\n\t\t\tdol_syslog(\"ROLLBACK Transaction\",LOG_DEBUG);\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n     *  Execute a SQL request and return the resultset\n     *  @param      query           SQL query string\n     *  @param      usesavepoint    0=Default mode, 1=Run a savepoint before and a rollbock to savepoint if error (this allow to have some request with errors inside global transactions).\n     *                              Note that with Mysql, this parameter is not used as Myssql can already commit a transaction even if one request is in error, without using savepoints.\n     *  @param      type            Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *  @return     resource        Resultset of answer\n\t */\n\tfunction query($query,$usesavepoint=0,$type='auto')\n\t{\n\t\t$query = trim($query);\n\n\t\t// Conversion syntaxe MySql vers MSDE.\n\t\t$query = str_ireplace(\"now()\", \"getdate()\", $query);\n\t\t// Erreur SQL: cannot update timestamp field\n\t\t$query = str_ireplace(\", tms = tms\", \"\", $query);\n\t\t// Voir si l'on peut directement utiliser $query = str_ireplace(\"file\", \"[file]\", $query);\n\t\t// au lieu des 3 lignes ci-dessous\n\t\t$query = str_ireplace(\".file\", \".[file]\", $query);\n\t\t$query = str_ireplace(\" file \", \" [file] \", $query);\n\t\t$query = str_ireplace(\" file,\", \" [file],\", $query);\n\t\t// Idem file\n\t\t$query = str_ireplace(\".percent\", \".[percent]\", $query);\n\t\t$query = str_ireplace(\" percent \", \" [percent] \", $query);\n\t\t$query = str_ireplace(\"percent,\", \"[percent],\", $query);\n\t\t$query = str_ireplace(\"percent=\", \"[percent]=\", $query);\n\t\t$query = str_ireplace(\"\\'\", \"''\", $query);\n\n\n\t\t$itemfound = stripos($query, \" limit \");\n\t\tif ($itemfound !== false) {\n\t\t\t// Extraire le nombre limite\n\t\t\t$number = stristr($query, \" limit \");\n\t\t\t$number = substr($number, 7);\n\t\t\t// Inserer l'instruction TOP et le nombre limite\n\t\t\t$query = str_ireplace(\"select \", \"select top \".$number.\" \", $query);\n\t\t\t// Supprimer l'instruction MySql\n\t\t\t$query = str_ireplace(\" limit \".$number, \"\", $query);\n\t\t}\n\n\t\t$itemfound = stripos($query, \" week(\");\n\t\tif ($itemfound !== false) {\n\t\t\t// Recreer une requete sans instruction Mysql\n\t\t\t$positionMySql = stripos($query, \" week(\");\n\t\t\t$newquery = substr($query, 0, $positionMySql);\n\n\t\t\t// Recuperer la date passee en parametre\n\t\t\t$extractvalue = stristr($query, \" week(\");\n\t\t\t$extractvalue = substr($extractvalue, 6);\n\t\t\t$positionMySql = stripos($extractvalue, \")\");\n\t\t\t// Conserver la fin de la requete\n\t\t\t$endofquery = substr($extractvalue, $positionMySql);\n\t\t\t$extractvalue = substr($extractvalue, 0, $positionMySql);\n\n\t\t\t// Remplacer l'instruction MySql en Sql Server\n\t\t\t// Inserer la date en parametre et le reste de la requete\n\t\t\t$query = $newquery.\" DATEPART(week, \".$extractvalue.$endofquery;\n\t\t}\n\n\t\t//print \"<!--\".$query.\"-->\";\n\n\t\tif (! $this->database_name)\n\t\t{\n\t\t\t// Ordre SQL ne necessitant pas de connexion a une base (exemple: CREATE DATABASE)\n\t\t\t$ret = mssql_query($query, $this->db);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret = mssql_query($query, $this->db);\n\t\t}\n\n\t\tif (! preg_match(\"/^COMMIT/i\",$query) && ! preg_match(\"/^ROLLBACK/i\",$query))\n\t\t{\n\t\t\t// Si requete utilisateur, on la sauvegarde ainsi que son resultset\n\t\t\tif (! $ret)\n\t\t\t{\n\t\t\t\t$result = mssql_query(\"SELECT @@ERROR as code\", $this->db);\n\t\t\t\t$row = mssql_fetch_array($result);\n\n                $this->lastqueryerror = $query;\n\t\t\t\t$this->lasterror = $this->error();\n\t\t\t\t$this->lasterrno = $row[\"code\"];\n                dol_syslog(\"Mssql.lib::query SQL error: \".$query, LOG_WARNING);\n\t\t\t}\n\t\t\t$this->lastquery=$query;\n\t\t\t$this->results = $ret;\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie la ligne courante (comme un objet) pour le curseur resultset.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    object\t\tObject result line or false if KO or end of cursor\n\t */\n\tfunction fetch_object($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mssql_fetch_object($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie les donnees dans un tableau.\n\t * \\param      resultset           Curseur de la requete voulue\n\t * \\return\t   array\n\t */\n\tfunction fetch_array($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mssql_fetch_array($resultset);\n\t}\n\n\n\t/**\n\t * \\brief      Renvoie les donnees comme un tableau.\n\t * \\param      resultset           Curseur de la requete voulue\n\t * \\return\t   array\n\t */\n\tfunction fetch_row($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn @mssql_fetch_row($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie le nombre de lignes dans le resultat d'une requete SELECT\n\t * \\see    \t   affected_rows\n\t * \\param      resultset           Curseur de la requete voulue\n\t * \\return     int\t\t           Nombre de lignes\n\t */\n\tfunction num_rows($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mssql_num_rows($resultset);\n\t}\n\n\t/**\n\t \\brief      Renvoie le nombre de lignes dans le resultat d'une requete INSERT, DELETE ou UPDATE\n\t \\see    \tnum_rows\n\t \\param      resultset   Curseur de la requete voulue\n\t \\return     int\t\t    Nombre de lignes\n\t */\n\tfunction affected_rows($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// mssql necessite un link de base pour cette fonction contrairement\n\t\t// a pqsql qui prend un resultset\n\t\t$rsRows = mssql_query(\"select @@rowcount as rows\", $this->db);\n\t\treturn mssql_result($rsRows, 0, \"rows\");\n\t\t//return mssql_affected_rows($this->db);\n\t}\n\n\n\t/**\n\t * \\brief      Libere le dernier resultset utilise sur cette connexion.\n\t * \\param      resultset   Curseur de la requete voulue\n\t */\n\tfunction free($resultset=0)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// Si resultset en est un, on libere la memoire\n\t\tif (is_resource($resultset)) mssql_free_result($resultset);\n\t}\n\n\n\t/**\n\t * \\brief      Defini les limites de la requete.\n\t * \\param\t    limit       nombre maximum de lignes retournees\n\t * \\param\t    offset      numero de la ligne a partir de laquelle recuperer les ligne\n\t * \\return\t    string      chaine exprimant la syntax sql de la limite\n\t */\n\tfunction plimit($limit=0,$offset=0)\n\t{\n\t\tglobal $conf;\n\t\tif (! $limit) $limit=$conf->liste_limit;\n\t\tif ($offset > 0) return \" LIMIT $offset,$limit \";\n\t\telse return \" LIMIT $limit \";\n\t}\n\n\n\t/**\n\t * Define sort criteria of request\n\t * @param\t    sortfield   List of sort fields\n\t * @param\t    sortorder   Sort order\n\t * @return\t    string      String to provide syntax of a sort sql string\n\t * TODO\t\t\tMutualized this into a mother class\n\t */\n\tfunction order($sortfield=0,$sortorder=0)\n\t{\n\t\tif ($sortfield)\n\t\t{\n\t\t\t$return='';\n\t\t\t$fields=explode(',',$sortfield);\n\t\t\tforeach($fields as $val)\n\t\t\t{\n\t\t\t\tif (! $return) $return.=' ORDER BY ';\n\t\t\t\telse $return.=',';\n\n\t\t\t\t$return.=$val;\n\t\t\t\tif ($sortorder) $return.=' '.$sortorder;\n\t\t\t}\n\t\t\treturn $return;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t}\n\n\n\t/**\n\t *     Escape a string to insert data.\n\t *     @param\t    stringtoencode\t\tString to escape\n\t *     @return\t    string\t\t\t\tString escaped\n\t */\n\tfunction escape($stringtoencode)\n\t{\n\t\treturn addslashes($stringtoencode);\n\t}\n\n\n\t/**\n\t *   Convert (by PHP) a GM Timestamp date into a PHP server TZ to insert into a date field.\n\t *   Function to use to build INSERT, UPDATE or WHERE predica\n\t *   @param\t    param       Date TMS to convert\n\t *   @return\tstring      Date in a string YYYYMMDDHHMMSS\n\t */\n\tfunction idate($param)\n\t{\n\t\treturn adodb_strftime(\"%Y-%m-%d %H:%M:%S\",$param);\n\t}\n\n\t/**\n\t *\tConvert (by PHP) a PHP server TZ string date into a GM Timestamps date\n\t * \t19700101020000 -> 3600 with TZ+1\n\t * \t@param\t\tstring\t\t\tDate in a string (YYYYMMDDHHMMSS, YYYYMMDD, YYYY-MM-DD HH:MM:SS)\n\t *\t@return\t\tdate\t\t\tDate TMS\n\t */\n\tfunction jdate($string)\n\t{\n\t\t$string=preg_replace('/([^0-9])/i','',$string);\n\t\t$tmp=$string.'000000';\n\t\t$date=dol_mktime(substr($tmp,8,2),substr($tmp,10,2),substr($tmp,12,2),substr($tmp,4,2),substr($tmp,6,2),substr($tmp,0,4));\n\t\treturn $date;\n\t}\n\n\t/**\n     *  Formate a SQL IF\n\t *\t@param\t\ttest            chaine test\n\t *\t@param\t\tresok           resultat si test egal\n\t *\t@param\t\tresko           resultat si test non egal\n\t *\t@return\t\tstring          chaine formate SQL\n\t */\n\tfunction ifsql($test,$resok,$resko)\n\t{\n\t\treturn 'IF('.$test.','.$resok.','.$resko.')';\n\t}\n\n\n\t/**\n\t *\t\\brief      Renvoie la derniere requete soumise par la methode query()\n\t *\t\\return\t    lastquery\n\t */\n\tfunction lastquery()\n\t{\n\t\treturn $this->lastquery;\n\t}\n\n\t/**\n\t \\brief      Renvoie la derniere requete en erreur\n\t \\return\t    string\tlastqueryerror\n\t */\n\tfunction lastqueryerror()\n\t{\n\t\treturn $this->lastqueryerror;\n\t}\n\n\t/**\n\t \\brief      Renvoie le libelle derniere erreur\n\t \\return\t    string\tlasterror\n\t */\n\tfunction lasterror()\n\t{\n\t\treturn $this->lasterror;\n\t}\n\n\t/**\n\t \\brief      Renvoie le code derniere erreur\n\t \\return\t    string\tlasterrno\n\t */\n\tfunction lasterrno()\n\t{\n\t\treturn $this->lasterrno;\n\t}\n\n\t/**\n\t \\brief     Renvoie le code erreur generique de l'operation precedente.\n\t \\return    error_num       (Exemples: DB_ERROR_TABLE_ALREADY_EXISTS, DB_ERROR_RECORD_ALREADY_EXISTS...)\n\t */\n\tfunction errno()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide.\n\t\t\treturn 'DB_ERROR_FAILED_TO_CONNECT';\n\t\t}\n\t\telse {\n\t\t\t// Constants to convert a MSSql error code to a generic Dolibarr error code\n\t\t\t$errorcode_map = array(\n\t\t\t1004 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1005 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1006 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1007 => 'DB_ERROR_ALREADY_EXISTS',\n\t\t\t1008 => 'DB_ERROR_CANNOT_DROP',\n\t\t\t1025 => 'DB_ERROR_NO_FOREIGN_KEY_TO_DROP',\n\t\t\t1046 => 'DB_ERROR_NODBSELECTED',\n\t\t\t1048 => 'DB_ERROR_CONSTRAINT',\n\t\t\t2714 => 'DB_ERROR_TABLE_ALREADY_EXISTS',\n\t\t\t1051 => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t1054 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1060 => 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n\t\t\t1061 => 'DB_ERROR_KEY_NAME_ALREADY_EXISTS',\n\t\t\t2627 => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n\t\t\t102  => 'DB_ERROR_SYNTAX',\n\t\t\t8120 => 'DB_ERROR_GROUP_BY_SYNTAX',\n\t\t\t1068 => 'DB_ERROR_PRIMARY_KEY_ALREADY_EXISTS',\n\t\t\t1075 => 'DB_ERROR_CANT_DROP_PRIMARY_KEY',\n\t\t\t1091 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1100 => 'DB_ERROR_NOT_LOCKED',\n\t\t\t1136 => 'DB_ERROR_VALUE_COUNT_ON_ROW',\n\t\t\t1146 => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t1216 => 'DB_ERROR_NO_PARENT',\n\t\t\t1217 => 'DB_ERROR_CHILD_EXISTS',\n\t\t\t1451 => 'DB_ERROR_CHILD_EXISTS'\n\t\t\t);\n\n\t\t\tif (isset($errorcode_map[$this->lasterrno]))\n\t\t\t{\n\t\t\t\treturn $errorcode_map[$this->lasterrno];\n\t\t\t}\n\t\t\t$errno=$this->lasterrno;\n\t\t\treturn ($errno?'DB_ERROR_'.$errno:'0');\n\t\t}\n\t}\n\n\t/**\n\t \\brief     Renvoie le texte de l'erreur mssql de l'operation precedente.\n\t \\return    error_text\n\t */\n\tfunction error()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide pour mssql_get_last_message.\n\t\t\treturn 'Not connected. Check setup parameters in conf/conf.php file and your mssql client and server versions';\n\t\t}\n\t\telse {\n\t\t\treturn mssql_get_last_message($this->db);\n\t\t}\n\t}\n\n\t/**\n\t \\brief     Recupere l'id genere par le dernier INSERT.\n\t \\param     tab     Nom de la table concernee par l'insert. Ne sert pas sous mssql mais requis pour compatibilite avec Postgresql\n\t \\return    int     id\n\t */\n\tfunction last_insert_id($tab)\n\t{\n\t\t$res = $this->query(\"SELECT @@IDENTITY as id\");\n\t\tif ($data = $this->fetch_array($res))\n\t\t{\n\t\t\treturn $data[\"id\"];\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n     *  Encrypt sensitive data in database\n     *  Warning: This function includes the escape, so it must use direct value\n     *  @param          fieldorvalue    Field name or value to encrypt\n     *  @param          withQuotes      Return string with quotes\n     *  @return         return          XXX(field) or XXX('value') or field or 'value'\n\t */\n\tfunction encrypt($fieldorvalue, $withQuotes=0)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $fieldorvalue;\n\t\treturn ($withQuotes?\"'\":\"\").$this->escape($return).($withQuotes?\"'\":\"\");\n\t}\n\n\t/**\n\t *\t\\brief          Decrypt sensitive data in database\n\t *\t\\param\t        value\t\t\tValue to decrypt\n\t * \t\\return\t        return\t\t\tDecrypted value if used\n\t */\n\tfunction decrypt($value)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $value;\n\t\treturn $return;\n\t}\n\n\n\t// Next function are not required. Only minor features use them.\n\t//--------------------------------------------------------------\n\n\t/**\n\t *\t\\brief          Renvoie l'id de la connexion\n\t *\t\\return\t        string      Id connexion\n\t */\n\tfunction DDLGetConnectId()\n\t{\n\t\t$resql=$this->query('SELECT CONNECTION_ID()');\n\t\t$row=$this->fetch_row($resql);\n\t\treturn $row[0];\n\t}\n\n\t/**\n\t *\t\\brief          Create a new database\n\t *\t\\param\t        database\t\tDatabase name to create\n\t * \t\\param\t\t\tcharset\t\t\tCharset used to store data\n\t * \t\\param\t\t\tcollation\t\tCharset used to sort data\n\t * \t\\return\t        resource\t\tresource defined if OK, null if KO\n\t * \t\\remarks        Ne pas utiliser les fonctions xxx_create_db (xxx=mssql, ...) car elles sont deprecated\n\t *\t\t\t\t\tOn force creation de la base avec le charset forcecharset\n\t */\n\tfunction DDLCreateDb($database,$charset='',$collation='')\n\t{\n\t\t// ALTER DATABASE dolibarr_db DEFAULT CHARACTER SET latin DEFAULT COLLATE latin1_swedish_ci\n\t\t$sql = 'CREATE DATABASE '.$database;\n\t\t$sql.= ' DEFAULT CHARACTER SET '.$this->forcecharset.' DEFAULT COLLATE '.$this->forcecollate;\n\t\t$ret=$this->query($sql);\n\t\tif (! $ret)\n\t\t{\n\t\t\t// On reessaie pour compatibilite avec mssql < 5.0\n\t\t\t$sql = 'CREATE DATABASE '.$database;\n\t\t\t$ret=$this->query($sql);\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief     \tList tables into a database.\n\t *\t\\param\t    database\t\tName of database\n\t *\t\\param\t    table   \t\tFilter on some tables\n\t *\t\\return\t    array\t\t\tArray list of tables\n\t */\n\tfunction DDLListTables($database,$table='')\n\t{\n\t\t$this->results = mssql_list_tables($database, $this->db);\n\t\treturn $this->results;\n\t}\n\n\t/**\n\t \\brief      Cree une table\n\t \\param\t    table \t\t\tNom de la table\n\t \\param\t    fields \t\t\tTableau associatif [nom champ][tableau des descriptions]\n\t \\param\t    primary_key \tNom du champ qui sera la clef primaire\n\t \\param\t    unique_keys \tTableau associatifs Nom de champs qui seront clef unique => valeur\n\t \\param\t    fulltext \t\tTableau des Nom de champs qui seront indexes en fulltext\n\t \\param\t    key \t\t\tTableau des champs cles noms => valeur\n\t \\param\t    type \t\t\tType de la table\n\t \\return\t    int\t\t\t\t<0 si KO, >=0 si OK\n\t */\n\tfunction DDLCreateTable($table,$fields,$primary_key,$type,$unique_keys=\"\",$fulltext_keys=\"\",$keys=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (fields) : type,value,attribute,null,default,extra\n\t\t// ex. : $fields['rowid'] = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql = \"create table \".$table.\"(\";\n\t\t$i=0;\n\t\tforeach($fields as $field_name => $field_desc)\n\t\t{\n\t\t\t$sqlfields[$i] = $field_name.\" \";\n\t\t\t$sqlfields[$i]  .= $field_desc['type'];\n\t\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t\t$sqlfields[$i]  .= \"(\".$field_desc['value'].\")\";\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['attribute'];\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\t\t{\n\t\t\t\tif(preg_match(\"/null/i\",$field_desc['default']))\n\t\t\t\t$sqlfields[$i]  .= \" default \".$field_desc['default'];\n\t\t\t\telse\n\t\t\t\t$sqlfields[$i]  .= \" default '\".$field_desc['default'].\"'\";\n\t\t\t}\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['null'];\n\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['extra'];\n\t\t\t$i++;\n\t\t}\n\t\tif($primary_key != \"\")\n\t\t$pk = \"primary key(\".$primary_key.\")\";\n\n\t\tif($unique_keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($unique_keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqluq[$i] = \"UNIQUE KEY '\".$key.\"' ('\".$value.\"')\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\tif($keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqlk[$i] = \"KEY \".$key.\" (\".$value.\")\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\t$sql .= implode(',',$sqlfields);\n\t\tif($primary_key != \"\")\n\t\t$sql .= \",\".$pk;\n\t\tif($unique_keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqluq);\n\t\tif($keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqlk);\n\t\t$sql .=\") type=\".$type;\n\n\t\tdol_syslog($sql);\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t \\brief      decrit une table dans une database.\n\t\t\\param\t    table\tNom de la table\n\t\t\\param\t    field\tOptionnel : Nom du champ si l'on veut la desc d'un champ\n\t\t\\return\t    resource\n\t\t*/\n\tfunction DDLDescTable($table,$field=\"\")\n\t{\n\t\t$sql=\"DESC \".$table.\" \".$field;\n\n\t\tdol_syslog($sql);\n\t\t$this->results = $this->query($sql);\n\t\treturn $this->results;\n\t}\n\n\t/**\n\t *\t\\brief      Insert a new field in table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t\tfield_name \t\tNom du champ a inserer\n\t *\t\\param\t    field_desc \t\tTableau associatif de description du champ a inserer[nom du parametre][valeur du parametre]\n\t *\t\\param\t    field_position \tOptionnel ex.: \"after champtruc\"\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLAddField($table,$field_name,$field_desc,$field_position=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (field_desc) : type,value,attribute,null,default,extra\n\t\t// ex. : $field_desc = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql= \"ALTER TABLE \".$table.\" ADD \".$field_name.\" \";\n\t\t$sql .= $field_desc['type'];\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t$sql  .= \"(\".$field_desc['value'].\")\";\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t$sql  .= \" \".$field_desc['attribute'];\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t$sql  .= \" \".$field_desc['null'];\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\tif(preg_match(\"/null/i\",$field_desc['default']))\n\t\t$sql  .= \" default \".$field_desc['default'];\n\t\telse\n\t\t$sql  .= \" default '\".$field_desc['default'].\"'\";\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t$sql  .= \" \".$field_desc['extra'];\n\t\t$sql .= \" \".$field_position;\n\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\tUpdate format of a field into a table\n\t *\t@param\t    table \t\t\tName of table\n\t *\t@param\t\tfield_name \t\tName of field to modify\n\t *\t@param\t    field_desc \t\tArray with description of field format\n\t *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction DDLUpdateField($table,$field_name,$field_desc)\n\t{\n\t\t$sql = \"ALTER TABLE \".$table;\n\t\t$sql .= \" MODIFY COLUMN \".$field_name.\" \".$field_desc['type'];\n\t\tif ($field_desc['type'] == 'int' || $field_desc['type'] == 'varchar') $sql.=\"(\".$field_desc['value'].\")\";\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\t\\brief      Drop a field in table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t\tfield_name \t\tNom du champ a inserer\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLDropField($table,$field_name)\n\t{\n\t\t$sql= \"ALTER TABLE \".$table.\" DROP COLUMN `\".$field_name.\"`\";\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\t{\n\t\t\t$this->error=$this->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\telse return 1;\n\t}\n\n\n\tfunction getDefaultCharacterSetDatabase(){\n\t\t/*\n\t\t $resql=$this->query('SHOW VARIABLES LIKE \\'character_set_database\\'');\n\t\t if (!$resql)\n\t\t {\n\t\t return $this->forcecharset;\n\t\t }\n\t\t $liste=$this->fetch_array($resql);\n\t\t return $liste['Value'];\n\t\t */\n\t\treturn '';\n\t}\n\n\tfunction getListOfCharacterSet(){\n\t\t/*\n\t\t $resql=$this->query('SHOW CHARSET');\n\t\t $liste = array();\n\t\t if ($resql)\n\t\t {\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t$liste[$i]['charset'] = $obj->Charset;\n\t\t\t$liste[$i]['description'] = $obj->Description;\n\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t  } else {\n\t  return null;\n\t  }\n\t  return $liste;\n\t  */\n\t\treturn ''; // attente debuggage\n\t}\n\n\tfunction getDefaultCollationDatabase()\n\t{\n\t\t$resql=$this->query(\"SELECT SERVERPROPERTY('collation')\");\n\t\tif (!$resql)\n\t\t{\n\t\t\treturn $this->forcecollate;\n\t\t}\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['computed'];\n\t}\n\n\tfunction getListOfCollation()\n\t{\n\t\t/*\n\t\t $resql=$this->query('SHOW COLLATION');\n\t\t $liste = array();\n\t\t if ($resql)\n\t\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t$liste[$i]['collation'] = $obj->Collation;\n\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t\t} else {\n\t\t\treturn null;\n\t\t\t}\n\t\t\treturn $liste;\n\t\t\t*/\n\t\treturn ''; // attente debugage\n\t}\n\n\t/*\n\t *  Return full path of dump program\n\t *\t@return\t\tstring\t\tFull path of dump program\n\t */\n\tfunction getPathOfDump()\n\t{\n\n\t    return '';\n\t}\n\n    /**\n     *\tReturn full path of restore program\n     *\t@return\t\tstring\t\tFull path of restore program\n     */\n\tfunction getPathOfRestore()\n\t{\n\n\t    return '';\n\t}\n}\n\n?>\n", "<?php\n/* Copyright (C) 2001      Fabien Seisen        <seisen@linuxfr.org>\n * Copyright (C) 2002-2007 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2008 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2006      Andre Cianfarani     <acianfa@free.fr>\n * Copyright (C) 2005-2009 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       \thtdocs/lib/databases/mysql.lib.php\n *\t\\brief      \tClass file to manage Dolibarr database access for a Mysql database\n *\t\\version\t\t$Id: mysql.lib.php,v 1.121 2011/08/04 13:58:55 eldy Exp $\n */\n// For compatibility during upgrade\nif (! defined('DOL_DOCUMENT_ROOT'))\t define('DOL_DOCUMENT_ROOT', '../..');\nif (! defined('ADODB_DATE_VERSION')) include_once(DOL_DOCUMENT_ROOT.\"/includes/adodbtime/adodb-time.inc.php\");\n\n\n/**\n *\t\\class      DoliDb\n *\t\\brief      Class to manage Dolibarr database access for a Mysql database\n */\nclass DoliDb\n{\n\t//! Database handler\n\tvar $db;\n\t//! Database type\n\tvar $type='mysql';\n\t//! Database label\n\tvar $label='MySQL';\n\t//! Charset used to force charset when creating database\n\tvar $forcecharset='utf8';\t// latin1, utf8\n\t//! Collate used to force collate when creating database\n\tvar $forcecollate='utf8_general_ci';\t// latin1_swedish_ci, utf8_general_ci\n\t//! Version min database\n\tvar $versionmin=array(3,1,0);\n\t//! Resultset of last request\n\tvar $results;\n\t//! 1 if connected, 0 else\n\tvar $connected;\n\t//! 1 if database selected, 0 else\n\tvar $database_selected;\n\t//! Database name selected\n\tvar $database_name;\n\t//! Nom user base\n\tvar $database_user;\n\t//! 1 si une transaction est en cours, 0 sinon\n\tvar $transaction_opened;\n\t//! Last executed request\n\tvar $lastquery;\n\t//! Last failed executed request\n\tvar $lastqueryerror;\n\t//! Message erreur mysql\n\tvar $lasterror;\n\t//! Message erreur mysql\n\tvar $lasterrno;\n\n\tvar $ok;\n\tvar $error;\n\n\n\t/**\n\t *\tOuverture d'une connexion vers le serveur et eventuellement une database.\n\t *\t@param      type\t\tType de base de donnees (mysql ou pgsql)\n\t *\t@param\t    host\t\tAddresse de la base de donnees\n\t *\t@param\t    user\t\tNom de l'utilisateur autorise\n\t *\t@param\t    pass\t\tMot de passe\n\t *\t@param\t    name\t\tNom de la database\n\t *\t@param\t    port\t\tPort of database server\n\t *\t@return\t    int\t\t\t1 en cas de succes, 0 sinon\n\t */\n\tfunction DoliDb($type='mysql', $host, $user, $pass, $name='', $port=0)\n\t{\n\t\tglobal $conf,$langs;\n\n\t\tif (! empty($conf->db->character_set)) $this->forcecharset=$conf->db->character_set;\n\t\tif (! empty($conf->db->dolibarr_main_db_collation))\t$this->forcecollate=$conf->db->dolibarr_main_db_collation;\n\n\t\t$this->database_user=$user;\n\n\t\t$this->transaction_opened=0;\n\n\t\t//print \"Name DB: $host,$user,$pass,$name<br>\";\n\n\t\tif (! function_exists(\"mysql_connect\"))\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=\"Mysql PHP functions for using MySql driver are not available in this version of PHP. Try to use another driver.\";\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Mysql PHP functions for using Mysql driver are not available in this version of PHP. Try to use another driver.\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\tif (! $host)\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=$langs->trans(\"ErrorWrongHostParameter\");\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect, wrong host parameters\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\t// Essai connexion serveur\n\t\t$this->db = $this->connect($host, $user, $pass, $name, $port);\n\t\tif ($this->db)\n\t\t{\n\t\t\t$this->connected = 1;\n\t\t\t$this->ok = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// host, login ou password incorrect\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=mysql_error();\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect mysql_error=\".$this->error,LOG_ERR);\n\t\t}\n\n\t\t// Si connexion serveur ok et si connexion base demandee, on essaie connexion base\n\t\tif ($this->connected && $name)\n\t\t{\n\t\t\tif ($this->select_db($name))\n\t\t\t{\n\t\t\t\t$this->database_selected = 1;\n\t\t\t\t$this->database_name = $name;\n\t\t\t\t$this->ok = 1;\n\n\t\t\t\t// If client connected with different charset than Dolibarr HTML output\n\t\t\t\t$clientmustbe='';\n\t\t\t\tif (preg_match('/UTF-8/i',$conf->file->character_set_client))      $clientmustbe='utf8';\n\t\t\t\tif (preg_match('/ISO-8859-1/i',$conf->file->character_set_client)) $clientmustbe='latin1';\n\t\t\t\tif (mysql_client_encoding($this->db) != $clientmustbe)\n\t\t\t\t{\n\t\t\t\t\t$this->query(\"SET NAMES '\".$clientmustbe.\"'\", $this->db);\n\t\t\t\t\t//$this->query(\"SET CHARACTER SET \". $this->forcecharset);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->database_selected = 0;\n\t\t\t\t$this->database_name = '';\n\t\t\t\t$this->ok = 0;\n\t\t\t\t$this->error=$this->error();\n\t\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Select_db \".$this->error,LOG_ERR);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Pas de selection de base demandee, ok ou ko\n\t\t\t$this->database_selected = 0;\n\n\t\t\tif ($this->connected)\n\t\t\t{\n\t\t\t\t// If client connected with different charset than Dolibarr HTML output\n\t\t\t\t$clientmustbe='';\n\t\t\t\tif (preg_match('/UTF-8/i',$conf->file->character_set_client))      $clientmustbe='utf8';\n\t\t\t\tif (preg_match('/ISO-8859-1/i',$conf->file->character_set_client)) $clientmustbe='latin1';\n\t\t\t\tif (mysql_client_encoding($this->db) != $clientmustbe)\n\t\t\t\t{\n\t\t\t\t\t$this->query(\"SET NAMES '\".$clientmustbe.\"'\", $this->db);\n\t\t\t\t\t//$this->query(\"SET CHARACTER SET \". $this->forcecharset);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $this->ok;\n\t}\n\n\n    /**\n     *  Convert a SQL request in Mysql syntax to PostgreSQL syntax\n     *  @param     line     SQL request line to convert\n     *  @param     type     Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *  @return    string   SQL request line converted\n     */\n\tfunction convertSQLFromMysql($line,$type='ddl')\n\t{\n\t\treturn $line;\n\t}\n\n\t/**\n\t *\t\\brief      Selectionne une database.\n\t *\t\\param\t    database\t\tNom de la database\n\t *\t\\return\t    boolean         true si ok, false si ko\n\t */\n\tfunction select_db($database)\n\t{\n\t\tdol_syslog(\"DoliDB::select_db database=\".$database, LOG_DEBUG);\n\t\treturn mysql_select_db($database, $this->db);\n\t}\n\n\t/**\n\t *\t\\brief\t\tConnexion to server\n\t *\t\\param\t    host\t\tdatabase server host\n\t *\t\\param\t    login\t\tlogin\n\t *\t\\param\t    passwd\t\tpassword\n\t *\t\\param\t\tname\t\tnom de la database (ne sert pas sous mysql, sert sous pgsql)\n\t *\t\\param\t\tport\t\tPort of database server\n\t *\t\\return\t\tresource\tDatabase access handler\n\t *\t\\seealso\tclose\n\t */\n\tfunction connect($host, $login, $passwd, $name, $port=0)\n\t{\n\t\tdol_syslog(\"DoliDB::connect host=$host, port=$port, login=$login, passwd=--hidden--, name=$name\",LOG_DEBUG);\n\n\t\t$newhost=$host;\n\n\t\t// With mysql, port must be in hostname\n\t\tif ($port) $newhost.=':'.$port;\n\n\t\t$this->db  = @mysql_connect($newhost, $login, $passwd);\n\n\t\t//print \"Resultat fonction connect: \".$this->db;\n\t\treturn $this->db;\n\t}\n\n\t/**\n\t * \\brief          \tReturn label of manager\n\t * \\return\t\t\tstring      Label\n\t */\n\tfunction getLabel()\n\t{\n\t\treturn $this->label;\n\t}\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur\n\t *\t\\return\t        string      Chaine version\n\t */\n\tfunction getVersion()\n\t{\n\t\treturn mysql_get_server_info($this->db);\n\t}\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur sous forme de nombre\n\t *\t\\return\t        string      Chaine version\n\t */\n\tfunction getIntVersion()\n\t{\n\t\t$version=\t$this->getVersion();\n\t\t$vlist=preg_split('/[.-]/',$version);\n\t\tif (dol_strlen($vlist[1])==1){\n\t\t\t$vlist[1]=\"0\".$vlist[1];\n\t\t}\n\t\tif (dol_strlen($vlist[2])==1){\n\t\t\t$vlist[2]=\"0\".$vlist[2];\n\t\t}\n\t\treturn $vlist[0].$vlist[1].$vlist[2];\n\t}\n\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur dans un tableau\n\t *\t\\return\t        array  \t\tTableau de chaque niveau de version\n\t */\n\tfunction getVersionArray()\n\t{\n\t\treturn explode('.',$this->getVersion());\n\t}\n\n\n    /**\n     *  Close database connexion\n     *  @return     boolean     True if disconnect successfull, false otherwise\n     *  @see        connect\n     */\n    function close()\n    {\n        if ($this->db)\n        {\n          //dol_syslog(\"DoliDB::disconnect\",LOG_DEBUG);\n          $this->connected=0;\n          return mysql_close($this->db);\n        }\n        return false;\n    }\n\n\n\t/**\n\t *\t\\brief      Debut d'une transaction.\n\t *\t\\return\t    int         1 si ouverture transaction ok ou deja ouverte, 0 en cas d'erreur\n\t */\n\tfunction begin()\n\t{\n\t\tif (! $this->transaction_opened)\n\t\t{\n\t\t\t$ret=$this->query(\"BEGIN\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened++;\n\t\t\t\tdol_syslog(\"BEGIN Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened++;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n     * Validate a database transaction\n     * @param       log         Add more log to default log line\n     * @return      int         1 if validation is OK or transaction level no started, 0 if ERROR\n\t */\n\tfunction commit($log='')\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"COMMIT\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened=0;\n\t\t\t\tdol_syslog(\"COMMIT Transaction\".($log?' '.$log:''),LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t *\t\\brief      Annulation d'une transaction et retour aux anciennes valeurs\n\t * \t\\param\t\tlog\t\t\tAdd more log to default log line\n\t * \t\\return\t    int         1 si annulation ok ou transaction non ouverte, 0 en cas d'erreur\n\t */\n\tfunction rollback($log='')\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"ROLLBACK\");\n\t\t\t$this->transaction_opened=0;\n\t\t\tdol_syslog(\"ROLLBACK Transaction\".($log?' '.$log:''),LOG_DEBUG);\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Execute a SQL request and return the resultset\n\t * @param\t\tquery\t\t\tSQL query string\n\t * @param\t\tusesavepoint\t0=Default mode, 1=Run a savepoint before and a rollbock to savepoint if error (this allow to have some request with errors inside global transactions).\n\t * \t\t\t\t\t\t\t\tNote that with Mysql, this parameter is not used as Myssql can already commit a transaction even if one request is in error, without using savepoints.\n     * @param       type            Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n\t * @return\t    resource    \tResultset of answer\n\t */\n\tfunction query($query,$usesavepoint=0,$type='auto')\n\t{\n\t\t$query = trim($query);\n\n\t\tif (! $this->database_name)\n\t\t{\n\t\t\t// Ordre SQL ne necessitant pas de connexion a une base (exemple: CREATE DATABASE)\n\t\t\t$ret = mysql_query($query, $this->db);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmysql_select_db($this->database_name);\n\t\t\t$ret = mysql_query($query, $this->db);\n\t\t}\n\n\t\tif (! preg_match(\"/^COMMIT/i\",$query) && ! preg_match(\"/^ROLLBACK/i\",$query))\n\t\t{\n\t\t\t// Si requete utilisateur, on la sauvegarde ainsi que son resultset\n\t\t\tif (! $ret)\n\t\t\t{\n\t\t\t\t$this->lastqueryerror = $query;\n\t\t\t\t$this->lasterror = $this->error();\n\t\t\t\t$this->lasterrno = $this->errno();\n                dol_syslog(\"Mysql.lib::query SQL error: \".$query.\" \".$this->lasterrno, LOG_WARNING);\n\t\t\t}\n\t\t\t$this->lastquery=$query;\n\t\t\t$this->results = $ret;\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie la ligne courante (comme un objet) pour le curseur resultset.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    object\t\tObject result line or false if KO or end of cursor\n\t */\n\tfunction fetch_object($resultset)\n\t{\n\t\t// If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mysql_fetch_object($resultset);\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie les donnees dans un tableau.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    array\n\t */\n\tfunction fetch_array($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mysql_fetch_array($resultset);\n\t}\n\n\n\t/**\n\t *\t\\brief      Renvoie les donnees comme un tableau.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    array\n\t */\n\tfunction fetch_row($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn @mysql_fetch_row($resultset);\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie le nombre de lignes dans le resultat d'une requete SELECT\n\t *\t\\see    \taffected_rows\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return     int\t\t    Nombre de lignes\n\t */\n\tfunction num_rows($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mysql_num_rows($resultset);\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie le nombre de lignes dans le resultat d'une requete INSERT, DELETE ou UPDATE\n\t *\t\\see    \tnum_rows\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return     int\t\t    Nombre de lignes\n\t */\n\tfunction affected_rows($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// mysql necessite un link de base pour cette fonction contrairement\n\t\t// a pqsql qui prend un resultset\n\t\treturn mysql_affected_rows($this->db);\n\t}\n\n\n\t/**\n\t *\t\\brief      Libere le dernier resultset utilise sur cette connexion.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t */\n\tfunction free($resultset=0)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// Si resultset en est un, on libere la memoire\n\t\tif (is_resource($resultset)) mysql_free_result($resultset);\n\t}\n\n\n\t/**\n\t *\t\\brief      Defini les limites de la requete.\n\t *\t\\param\t    limit       nombre maximum de lignes retournees\n\t *\t\\param\t    offset      numero de la ligne a partir de laquelle recuperer les ligne\n\t *\t\\return\t    string      chaine exprimant la syntax sql de la limite\n\t */\n\tfunction plimit($limit=0,$offset=0)\n\t{\n\t\tglobal $conf;\n\t\tif (! $limit) $limit=$conf->liste_limit;\n\t\tif ($offset > 0) return \" LIMIT $offset,$limit \";\n\t\telse return \" LIMIT $limit \";\n\t}\n\n\n\t/**\n\t * Define sort criteria of request\n\t * @param\t    sortfield   List of sort fields\n\t * @param\t    sortorder   Sort order\n\t * @return\t    string      String to provide syntax of a sort sql string\n\t * TODO\t\t\tMutualized this into a mother class\n\t */\n\tfunction order($sortfield=0,$sortorder=0)\n\t{\n\t\tif ($sortfield)\n\t\t{\n\t\t\t$return='';\n\t\t\t$fields=explode(',',$sortfield);\n\t\t\tforeach($fields as $val)\n\t\t\t{\n\t\t\t\tif (! $return) $return.=' ORDER BY ';\n\t\t\t\telse $return.=',';\n\n\t\t\t\t$return.=$val;\n\t\t\t\tif ($sortorder) $return.=' '.$sortorder;\n\t\t\t}\n\t\t\treturn $return;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t}\n\n\n\t/**\n\t *\t   Escape a string to insert data.\n\t *     @param\t    stringtoencode\t\tString to escape\n\t *     @return\t    string\t\t\t\tString escaped\n\t */\n\tfunction escape($stringtoencode)\n\t{\n\t\treturn addslashes($stringtoencode);\n\t}\n\n\n\t/**\n\t *   Convert (by PHP) a GM Timestamp date into a string date with PHP server TZ to insert into a date field.\n\t *   Function to use to build INSERT, UPDATE or WHERE predica\n\t *   @param\t    param       Date TMS to convert\n\t *   @return\tstring      Date in a string YYYYMMDDHHMMSS\n\t */\n\tfunction idate($param)\n\t{\n\t\treturn adodb_strftime(\"%Y%m%d%H%M%S\",$param);\n\t}\n\n\t/**\n\t *\tConvert (by PHP) a PHP server TZ string date into a GM Timestamps date\n\t * \t19700101020000 -> 3600 with TZ+1\n\t * \t@param\t\tstring\t\t\tDate in a string (YYYYMMDDHHMMSS, YYYYMMDD, YYYY-MM-DD HH:MM:SS)\n\t *\t@return\t\tdate\t\t\tDate TMS\n\t */\n\tfunction jdate($string)\n\t{\n\t\t$string=preg_replace('/([^0-9])/i','',$string);\n\t\t$tmp=$string.'000000';\n\t\t$date=dol_mktime(substr($tmp,8,2),substr($tmp,10,2),substr($tmp,12,2),substr($tmp,4,2),substr($tmp,6,2),substr($tmp,0,4));\n\t\treturn $date;\n\t}\n\n\t/**\n\t *\tFormate a SQL IF\n\t *\t@param\t\ttest            chaine test\n\t *\t@param\t\tresok           resultat si test egal\n\t *\t@param\t\tresko           resultat si test non egal\n\t *\t@return\t\tstring          chaine formate SQL\n\t */\n\tfunction ifsql($test,$resok,$resko)\n\t{\n\t\treturn 'IF('.$test.','.$resok.','.$resko.')';\n\t}\n\n\n\t/**\n\t *\t\\brief      Renvoie la derniere requete soumise par la methode query()\n\t *\t\\return\t    lastquery\n\t */\n\tfunction lastquery()\n\t{\n\t\treturn $this->lastquery;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie la derniere requete en erreur\n\t *\t\\return\t    string\tlastqueryerror\n\t */\n\tfunction lastqueryerror()\n\t{\n\t\treturn $this->lastqueryerror;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie le libelle derniere erreur\n\t *\t\\return\t    string\tlasterror\n\t */\n\tfunction lasterror()\n\t{\n\t\treturn $this->lasterror;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie le code derniere erreur\n\t *\t\\return\t    string\tlasterrno\n\t */\n\tfunction lasterrno()\n\t{\n\t\treturn $this->lasterrno;\n\t}\n\n\t/**\n\t *\t\\brief     Renvoie le code erreur generique de l'operation precedente.\n\t *\t\\return    error_num       (Exemples: DB_ERROR_TABLE_ALREADY_EXISTS, DB_ERROR_RECORD_ALREADY_EXISTS...)\n\t */\n\tfunction errno()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide.\n\t\t\treturn 'DB_ERROR_FAILED_TO_CONNECT';\n\t\t}\n\t\telse {\n\t\t\t// Constants to convert a MySql error code to a generic Dolibarr error code\n\t\t\t$errorcode_map = array(\n\t\t\t1004 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1005 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1006 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1007 => 'DB_ERROR_ALREADY_EXISTS',\n\t\t\t1008 => 'DB_ERROR_CANNOT_DROP',\n\t\t\t1025 => 'DB_ERROR_NO_FOREIGN_KEY_TO_DROP',\n\t\t\t1044 => 'DB_ERROR_ACCESSDENIED',\n\t\t\t1046 => 'DB_ERROR_NODBSELECTED',\n\t\t\t1048 => 'DB_ERROR_CONSTRAINT',\n\t\t\t1050 => 'DB_ERROR_TABLE_ALREADY_EXISTS',\n\t\t\t1051 => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t1054 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1060 => 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n\t\t\t1061 => 'DB_ERROR_KEY_NAME_ALREADY_EXISTS',\n\t\t\t1062 => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n\t\t\t1064 => 'DB_ERROR_SYNTAX',\n\t\t\t1068 => 'DB_ERROR_PRIMARY_KEY_ALREADY_EXISTS',\n\t\t\t1075 => 'DB_ERROR_CANT_DROP_PRIMARY_KEY',\n\t\t\t1091 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1100 => 'DB_ERROR_NOT_LOCKED',\n\t\t\t1136 => 'DB_ERROR_VALUE_COUNT_ON_ROW',\n\t\t\t1146 => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t1216 => 'DB_ERROR_NO_PARENT',\n\t\t\t1217 => 'DB_ERROR_CHILD_EXISTS',\n\t\t\t1451 => 'DB_ERROR_CHILD_EXISTS'\n\t\t\t);\n\n\t\t\tif (isset($errorcode_map[mysql_errno($this->db)]))\n\t\t\t{\n\t\t\t\treturn $errorcode_map[mysql_errno($this->db)];\n\t\t\t}\n\t\t\t$errno=mysql_errno($this->db);\n\t\t\treturn ($errno?'DB_ERROR_'.$errno:'0');\n\t\t}\n\t}\n\n\t/**\n\t \\brief     Renvoie le texte de l'erreur mysql de l'operation precedente.\n\t \\return    error_text\n\t */\n\tfunction error()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide pour mysql_error.\n\t\t\treturn 'Not connected. Check setup parameters in conf/conf.php file and your mysql client and server versions';\n\t\t}\n\t\telse {\n\t\t\treturn mysql_error($this->db);\n\t\t}\n\t}\n\n\t/**\n\t \\brief     Recupere l'id genere par le dernier INSERT.\n\t \\param     tab     Nom de la table concernee par l'insert. Ne sert pas sous MySql mais requis pour compatibilite avec Postgresql\n\t \\return    int     id\n\t */\n\tfunction last_insert_id($tab)\n\t{\n\t\treturn mysql_insert_id($this->db);\n\t}\n\n\n\n\t// Next functions are not required. Only minor features use them.\n\t//---------------------------------------------------------------\n\n\t/**\n     *  Encrypt sensitive data in database\n     *  Warning: This function includes the escape, so it must use direct value\n     *  @param          fieldorvalue    Field name or value to encrypt\n     *  @param          withQuotes      Return string with quotes\n     *  @return         return          XXX(field) or XXX('value') or field or 'value'\n\t */\n\tfunction encrypt($fieldorvalue, $withQuotes=0)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = ($withQuotes?\"'\":\"\").$this->escape($fieldorvalue).($withQuotes?\"'\":\"\");\n\n\t\tif ($cryptType && !empty($cryptKey))\n\t\t{\n\t\t\tif ($cryptType == 2)\n\t\t\t{\n\t\t\t\t$return = 'AES_ENCRYPT('.$return.',\\''.$cryptKey.'\\')';\n\t\t\t}\n\t\t\telse if ($cryptType == 1)\n\t\t\t{\n\t\t\t\t$return = 'DES_ENCRYPT('.$return.',\\''.$cryptKey.'\\')';\n\t\t\t}\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t *\t\\brief          Decrypt sensitive data in database\n\t *\t\\param\t        value\t\t\tValue to decrypt\n\t * \t\\return\t        return\t\t\tDecrypted value if used\n\t */\n\tfunction decrypt($value)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $value;\n\n\t\tif ($cryptType && !empty($cryptKey))\n\t\t{\n\t\t\tif ($cryptType == 2)\n\t\t\t{\n\t\t\t\t$return = 'AES_DECRYPT('.$value.',\\''.$cryptKey.'\\')';\n\t\t\t}\n\t\t\telse if ($cryptType == 1)\n\t\t\t{\n\t\t\t\t$return = 'DES_DECRYPT('.$value.',\\''.$cryptKey.'\\')';\n\t\t\t}\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\n\t/**\n\t *\t\\brief          Renvoie l'id de la connexion\n\t *\t\\return\t        string      Id connexion\n\t */\n\tfunction DDLGetConnectId()\n\t{\n\t\t$resql=$this->query('SELECT CONNECTION_ID()');\n\t\t$row=$this->fetch_row($resql);\n\t\treturn $row[0];\n\t}\n\n\n\t/**\n\t *\t\\brief          Create a new database\n\t *\t\\param\t        database\t\tDatabase name to create\n\t * \t\\param\t\t\tcharset\t\t\tCharset used to store data\n\t * \t\\param\t\t\tcollation\t\tCharset used to sort data\n\t * \t\\param\t\t\towner\t\t\tUsername of database owner\n\t * \t\\return\t        resource\t\tresource defined if OK, null if KO\n\t *\t\\remarks        Do not use function xxx_create_db (xxx=mysql, ...) as they are deprecated\n\t *\t\t\t\t\tWe force to create database with charset this->forcecharset and collate this->forcecollate\n\t */\n\tfunction DDLCreateDb($database,$charset='',$collation='',$owner='')\n\t{\n\t\tif (empty($charset))   $charset=$this->forcecharset;\n\t\tif (empty($collation)) $collation=$this->collation;\n\n\t\t// ALTER DATABASE dolibarr_db DEFAULT CHARACTER SET latin DEFAULT COLLATE latin1_swedish_ci\n\t\t$sql = 'CREATE DATABASE '.$database;\n\t\t$sql.= ' DEFAULT CHARACTER SET '.$charset.' DEFAULT COLLATE '.$collation;\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\t$ret=$this->query($sql);\n\t\tif (! $ret)\n\t\t{\n\t\t\t// We try again for compatibility with Mysql < 4.1.1\n\t\t\t$sql = 'CREATE DATABASE '.$database;\n\t\t\t$ret=$this->query($sql);\n\t\t\tdol_syslog($sql,LOG_DEBUG);\n\t\t}\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief     \tList tables into a database.\n\t *\t\\param\t    database\t\tName of database\n\t *\t\\param\t    table   \t\tFilter on some tables\n\t *\t\\return\t    array\t\t\tArray list of tables\n\t */\n\tfunction DDLListTables($database, $table='')\n\t{\n\t\t$listtables=array();\n\n\t\t$like = '';\n\t\tif ($table) $like = \"LIKE '\".$table.\"'\";\n\t\t$sql=\"SHOW TABLES FROM \".$database.\" \".$like.\";\";\n\t\t//print $sql;\n\t\t$result = $this->query($sql);\n\t\twhile($row = $this->fetch_row($result))\n\t\t{\n\t\t\t$listtables[] = $row[0];\n\t\t}\n\t\treturn $listtables;\n\t}\n\n\t/**\n\t *\t\\brief     \tListe les informations des champs d'une table.\n\t *\t\\param\t    table\t\t\tNom de la table\n\t *\t\\return\t    array\t\t\tTableau des informations des champs de la table\n\t */\n\tfunction DDLInfoTable($table)\n\t{\n\t\t$infotables=array();\n\n\t\t$sql=\"SHOW FULL COLUMNS FROM \".$table.\";\";\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\t$result = $this->query($sql);\n\t\twhile($row = $this->fetch_row($result))\n\t\t{\n\t\t\t$infotables[] = $row;\n\t\t}\n\t\treturn $infotables;\n\t}\n\n\t/**\n\t *\t\\brief      Cree une table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t    fields \t\t\tTableau associatif [nom champ][tableau des descriptions]\n\t *\t\\param\t    primary_key \tNom du champ qui sera la clef primaire\n\t *\t\\param\t    unique_keys \tTableau associatifs Nom de champs qui seront clef unique => valeur\n\t *\t\\param\t    fulltext \t\tTableau des Nom de champs qui seront indexes en fulltext\n\t *\t\\param\t    key \t\t\tTableau des champs cles noms => valeur\n\t *\t\\param\t    type \t\t\tType de la table\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >=0 si OK\n\t */\n\tfunction DDLCreateTable($table,$fields,$primary_key,$type,$unique_keys=\"\",$fulltext_keys=\"\",$keys=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (fields) : type,value,attribute,null,default,extra\n\t\t// ex. : $fields['rowid'] = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql = \"create table \".$table.\"(\";\n\t\t$i=0;\n\t\tforeach($fields as $field_name => $field_desc)\n\t\t{\n\t\t\t$sqlfields[$i] = $field_name.\" \";\n\t\t\t$sqlfields[$i]  .= $field_desc['type'];\n\t\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t\t$sqlfields[$i]  .= \"(\".$field_desc['value'].\")\";\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['attribute'];\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\t\t{\n\t\t\t\tif(preg_match(\"/null/i\",$field_desc['default']))\n\t\t\t\t$sqlfields[$i]  .= \" default \".$field_desc['default'];\n\t\t\t\telse\n\t\t\t\t$sqlfields[$i]  .= \" default '\".$field_desc['default'].\"'\";\n\t\t\t}\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['null'];\n\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['extra'];\n\t\t\t$i++;\n\t\t}\n\t\tif($primary_key != \"\")\n\t\t$pk = \"primary key(\".$primary_key.\")\";\n\n\t\tif($unique_keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($unique_keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqluq[$i] = \"UNIQUE KEY '\".$key.\"' ('\".$value.\"')\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\tif($keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqlk[$i] = \"KEY \".$key.\" (\".$value.\")\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\t$sql .= implode(',',$sqlfields);\n\t\tif($primary_key != \"\")\n\t\t$sql .= \",\".$pk;\n\t\tif($unique_keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqluq);\n\t\tif($keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqlk);\n\t\t$sql .=\") type=\".$type;\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n     *  Return a pointer on fields describing table\n     *  @param      table   Nom de la table\n     *  @param      field   Optionnel : Nom du champ si l'on veut la desc d'un champ\n     *  @return     resource\n\t */\n\tfunction DDLDescTable($table,$field=\"\")\n\t{\n\t\t$sql=\"DESC \".$table.\" \".$field;\n\n\t\tdol_syslog(get_class($this).\"::DDLDescTable \".$sql,LOG_DEBUG);\n\t\t$this->results = $this->query($sql);\n\t\treturn $this->results;\n\t}\n\n    /**\n     *  Insert a new field in table\n     *  @param      table           Table name\n     *  @param      field_name      Name of field\n     *  @param      field_desc      Array with properties describing new field\n     *  @param      field_position  Optionnal ie.: \"after fielddummy\"\n     *  @return     int             <0 if KO, >0 if OK\n     */\n    function DDLAddField($table,$field_name,$field_desc,$field_position=\"\")\n    {\n        // cles recherchees dans le tableau des descriptions (field_desc) : type,value,attribute,null,default,extra\n        // ex. : $field_desc = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n        $sql= \"ALTER TABLE \".$table.\" ADD \".$field_name.\" \";\n        $sql.= $field_desc['type'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n        if (! in_array($field_desc['type'],array('date','datetime')))\n        {\n            $sql.= \"(\".$field_desc['value'].\")\";\n        }\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n        $sql.= \" \".$field_desc['attribute'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n        $sql.= \" \".$field_desc['null'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n        {\n            if(preg_match(\"/null/i\",$field_desc['default']))\n            $sql.= \" default \".$field_desc['default'];\n            else\n            $sql.= \" default '\".$field_desc['default'].\"'\";\n        }\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n        $sql.= \" \".$field_desc['extra'];\n        $sql.= \" \".$field_position;\n\n        dol_syslog(get_class($this).\"::DDLAddField \".$sql,LOG_DEBUG);\n        if(! $this->query($sql))\n        {\n            return -1;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n\t/**\n\t *\tUpdate format of a field into a table\n\t *\t@param\t    table \t\t\tName of table\n\t *\t@param\t\tfield_name \t\tName of field to modify\n\t *\t@param\t    field_desc \t\tArray with description of field format\n\t *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction DDLUpdateField($table,$field_name,$field_desc)\n\t{\n\t\t$sql = \"ALTER TABLE \".$table;\n\t\t$sql .= \" MODIFY COLUMN \".$field_name.\" \".$field_desc['type'];\n\t\tif ($field_desc['type'] == 'int' || $field_desc['type'] == 'varchar') $sql.=\"(\".$field_desc['value'].\")\";\n\n\t\tdol_syslog(get_class($this).\"::DDLUpdateField \".$sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\tDrop a field in table\n\t *\t@param\t    table \t\t\tNom de la table\n\t *\t@param\t\tfield_name \t\tNom du champ a inserer\n\t *\t@return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLDropField($table,$field_name)\n\t{\n\t\t$sql= \"ALTER TABLE \".$table.\" DROP COLUMN `\".$field_name.\"`\";\n\t\tdol_syslog(get_class($this).\"::DDLDropField \".$sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\t{\n\t\t\t$this->error=$this->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\telse return 1;\n\t}\n\n\n\t/**\n\t *\t\\brief      Create a user and privileges to connect to database (even if database does not exists yet)\n\t *\t\\param\t    dolibarr_main_db_host \t\tIp server\n\t *\t\\param\t    dolibarr_main_db_user \t\tUsername to create\n\t *\t\\param\t    dolibarr_main_db_pass \t\tPassword\n\t *\t\\param\t\tdolibarr_main_db_name\t\tDatabase name where user must be granted\n\t *\t\\return\t    int\t\t\t\t\t\t\t<0 if KO, >=0 if OK\n\t */\n\tfunction DDLCreateUser($dolibarr_main_db_host,$dolibarr_main_db_user,$dolibarr_main_db_pass,$dolibarr_main_db_name)\n\t{\n\t\t$sql = \"INSERT INTO user \";\n\t\t$sql.= \"(Host,User,password,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Index_Priv,Alter_priv,Lock_tables_priv)\";\n\t\t$sql.= \" VALUES ('\".addslashes($dolibarr_main_db_host).\"','\".addslashes($dolibarr_main_db_user).\"',password('\".addslashes($dolibarr_main_db_pass).\"')\";\n\t\t$sql.= \",'Y','Y','Y','Y','Y','Y','Y','Y','Y')\";\n\n\t\tdol_syslog(\"mysql.lib::DDLCreateUser\", LOG_DEBUG);\t// No sql to avoid password in log\n\t\t$resql=$this->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\tdol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"INSERT INTO db \";\n\t\t$sql.= \"(Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Index_Priv,Alter_priv,Lock_tables_priv)\";\n\t\t$sql.= \" VALUES ('\".addslashes($dolibarr_main_db_host).\"','\".addslashes($dolibarr_main_db_name).\"','\".addslashes($dolibarr_main_db_user).\"'\";\n\t\t$sql.= \",'Y','Y','Y','Y','Y','Y','Y','Y','Y')\";\n\n\t\tdol_syslog(\"mysql.lib::DDLCreateUser sql=\".$sql,LOG_DEBUG);\n\t\t$resql=$this->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\tdol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql=\"FLUSH Privileges\";\n\n\t\tdol_syslog(\"mysql.lib::DDLCreateUser sql=\".$sql,LOG_DEBUG);\n\t\t$resql=$this->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\tdol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn charset used to store data in database\n\t *\t\\return\t\tstring\t\tCharset\n\t */\n\tfunction getDefaultCharacterSetDatabase()\n\t{\n\t\t$resql=$this->query('SHOW VARIABLES LIKE \\'character_set_database\\'');\n\t\tif (!$resql)\n\t\t{\n\t\t\t// version Mysql < 4.1.1\n\t\t\treturn $this->forcecharset;\n\t\t}\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['Value'];\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn list of available charset that can be used to store data in database\n\t *\t\\return\t\tarray\t\tList of Charset\n\t */\n\tfunction getListOfCharacterSet()\n\t{\n\t\t$resql=$this->query('SHOW CHARSET');\n\t\t$liste = array();\n\t\tif ($resql)\n\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t\t$liste[$i]['charset'] = $obj->Charset;\n\t\t\t\t$liste[$i]['description'] = $obj->Description;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t} else {\n\t\t\t// version Mysql < 4.1.1\n\t\t\treturn null;\n\t\t}\n\t\treturn $liste;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn collation used in database\n\t *\t\\return\t\tstring\t\tCollation value\n\t */\n\tfunction getDefaultCollationDatabase()\n\t{\n\t\t$resql=$this->query('SHOW VARIABLES LIKE \\'collation_database\\'');\n\t\tif (!$resql)\n\t\t{\n\t\t\t// version Mysql < 4.1.1\n\t\t\treturn $this->forcecollate;\n\t\t}\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['Value'];\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn list of available collation that can be used for database\n\t *\t\\return\t\tarray\t\tListe of Collation\n\t */\n\tfunction getListOfCollation()\n\t{\n\t\t$resql=$this->query('SHOW COLLATION');\n\t\t$liste = array();\n\t\tif ($resql)\n\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t\t$liste[$i]['collation'] = $obj->Collation;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t} else {\n\t\t\t// version Mysql < 4.1.1\n\t\t\treturn null;\n\t\t}\n\t\treturn $liste;\n\t}\n\n\t/**\n\t *\tReturn full path of dump program\n\t *\t@return\t\tstring\t\tFull path of dump program\n\t */\n\tfunction getPathOfDump()\n\t{\n\t\t$fullpathofdump='/pathtomysqldump/mysqldump';\n\n\t\t$resql=$this->query('SHOW VARIABLES LIKE \\'basedir\\'');\n\t\tif ($resql)\n\t\t{\n\t\t\t$liste=$this->fetch_array($resql);\n\t\t\t$basedir=$liste['Value'];\n\t\t\t$fullpathofdump=$basedir.(preg_match('/\\/$/',$basedir)?'':'/').'bin/mysqldump';\n\t\t}\n\t\treturn $fullpathofdump;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn full path of restore program\n\t *\t\\return\t\tstring\t\tFull path of restore program\n\t */\n\tfunction getPathOfRestore()\n\t{\n\t\t$fullpathofimport='/pathtomysql/mysql';\n\n\t\t$resql=$this->query('SHOW VARIABLES LIKE \\'basedir\\'');\n\t\tif ($resql)\n\t\t{\n\t\t\t$liste=$this->fetch_array($resql);\n\t\t\t$basedir=$liste['Value'];\n\t\t\t$fullpathofimport=$basedir.(preg_match('/\\/$/',$basedir)?'':'/').'bin/mysql';\n\t\t}\n\t\treturn $fullpathofimport;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn value of server parameters\n\t * \t\\param\t\tfilter\t\tFilter list on a particular value\n\t * \t\\return\t\tstring\t\tValue for parameter\n\t */\n\tfunction getServerParametersValues($filter='')\n\t{\n\t\t$result=array();\n\n\t\t$sql='SHOW VARIABLES';\n\t\tif ($filter) $sql.=\" LIKE '\".addslashes($key).\"'\";\n\t\t$resql=$this->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$this->fetch_object($resql);\n\t\t\t$result[$obj->Variable_name]=$obj->Value;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn value of server status\n\t * \t\\param\t\tfilter\t\tFilter list on a particular value\n\t * \t\\return\t\tstring\t\tValue for parameter\n\t */\n\tfunction getServerStatusValues($key,$filter='')\n\t{\n\t\t$result=array();\n\n\t\t$sql='SHOW STATUS';\n\t\tif ($filter) $sql.=\" LIKE '\".addslashes($key).\"'\";\n\t\t$resql=$this->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$this->fetch_object($resql);\n\t\t\t$result[$obj->Variable_name]=$obj->Value;\n\t\t}\n\n\t\treturn $result;\n\t}\n}\n\n?>\n", "<?php\n/* Copyright (C) 2001      Fabien Seisen        <seisen@linuxfr.org>\n * Copyright (C) 2002-2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2011 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2006      Andre Cianfarani     <acianfa@free.fr>\n * Copyright (C) 2005-2009 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/lib/databases/mysqli.lib.php\n *\t\\brief      Class file to manage Dolibarr database access for a Mysql database\n *\t\\version\t$Id: mysqli.lib.php,v 1.115 2011/08/04 13:58:55 eldy Exp $\n */\n\n// For compatibility during upgrade\nif (! defined('DOL_DOCUMENT_ROOT'))\t define('DOL_DOCUMENT_ROOT', '../..');\nif (! defined('ADODB_DATE_VERSION')) include_once(DOL_DOCUMENT_ROOT.\"/includes/adodbtime/adodb-time.inc.php\");\n\n\n/**\n *\t\\class      DoliDb\n *\t\\brief      Class to manage Dolibarr database access for a Mysql database\n */\nclass DoliDb\n{\n    //! Database handler\n    var $db;\n    //! Database type\n    var $type='mysqli';\n    //! Database label\n    var $label='MySQL';\n    //! Charset used to force charset when creating database\n    var $forcecharset='utf8';\t// latin1, utf8\n    //! Collate used to force collate when creating database\n    var $forcecollate='utf8_general_ci';\t// latin1_swedish_ci, utf8_general_ci\n    //! Version min database\n    var $versionmin=array(4,1,0);\n    //! Resultset of last request\n    var $results;\n    //! 1 if connected, 0 else\n    var $connected;\n    //! 1 if database selected, 0 else\n    var $database_selected;\n    //! Database name selected\n    var $database_name;\n    //! Nom user base\n    var $database_user;\n    //! 1 si une transaction est en cours, 0 sinon\n    var $transaction_opened;\n    //! Last executed request\n    var $lastquery;\n    //! Last failed executed request\n    var $lastqueryerror;\n    //! Message erreur mysql\n    var $lasterror;\n    //! Message erreur mysql\n    var $lasterrno;\n\n    var $ok;\n    var $error;\n\n\n    /**\n     *\tOuverture d'une connexion vers le serveur et eventuellement une database.\n     *\t@param     type\t\tType de base de donnees (mysql ou pgsql)\n     *\t@param\t   host\t\tAddresse de la base de donnees\n     *\t@param\t   user\t\tNom de l'utilisateur autorise\n     *\t@param\t   pass\t\tMot de passe\n     *\t@param\t   name\t\tNom de la database\n     *\t@param\t   port\t\tPort of database server\n     *\t@return    int\t\t1 en cas de succes, 0 sinon\n     */\n    function DoliDb($type='mysqli', $host, $user, $pass, $name='', $port=0)\n    {\n        global $conf,$langs;\n\n        if (! empty($conf->db->character_set)) $this->forcecharset=$conf->db->character_set;\n        if (! empty($conf->db->dolibarr_main_db_collation)) $this->forcecollate=$conf->db->dolibarr_main_db_collation;\n\n        $this->database_user=$user;\n\n        $this->transaction_opened=0;\n\n        //print \"Name DB: $host,$user,$pass,$name<br>\";\n\n        if (! function_exists(\"mysqli_connect\"))\n        {\n            $this->connected = 0;\n            $this->ok = 0;\n            $this->error=\"Mysqli PHP functions for using Mysqli driver are not available in this version of PHP. Try to use another driver.\";\n            dol_syslog(\"DoliDB::DoliDB : Mysqli PHP functions for using Mysqli driver are not available in this version of PHP. Try to use another driver.\",LOG_ERR);\n            return $this->ok;\n        }\n\n        if (! $host)\n        {\n            $this->connected = 0;\n            $this->ok = 0;\n            $this->error=$langs->trans(\"ErrorWrongHostParameter\");\n            dol_syslog(\"DoliDB::DoliDB : Erreur Connect, wrong host parameters\",LOG_ERR);\n            return $this->ok;\n        }\n\n        // Essai connexion serveur\n        // We do not try to connect to database, only to server. Connect to database is done later in constrcutor\n        $this->db = $this->connect($host, $user, $pass, '', $port);\n\n        if ($this->db)\n        {\n            $this->connected = 1;\n            $this->ok = 1;\n        }\n        else\n        {\n            // host, login ou password incorrect\n            $this->connected = 0;\n            $this->ok = 0;\n            $this->error=mysqli_connect_error();\n            dol_syslog(\"DoliDB::DoliDB : Erreur Connect mysqli_connect_error=\".$this->error,LOG_ERR);\n        }\n\n        // Si connexion serveur ok et si connexion base demandee, on essaie connexion base\n        if ($this->connected && $name)\n        {\n            if ($this->select_db($name))\n            {\n                $this->database_selected = 1;\n                $this->database_name = $name;\n                $this->ok = 1;\n\n                // If client connected with different charset than Dolibarr HTML output\n                $clientmustbe='';\n                if (preg_match('/UTF-8/i',$conf->file->character_set_client))      $clientmustbe='utf8';\n                if (preg_match('/ISO-8859-1/i',$conf->file->character_set_client)) $clientmustbe='latin1';\n                if (mysqli_client_encoding($this->db) != $clientmustbe)\n                {\n                    $this->query(\"SET NAMES '\".$clientmustbe.\"'\", $this->db);\n                    //$this->query(\"SET CHARACTER SET \". $this->forcecharset);\n                }\n            }\n            else\n            {\n                $this->database_selected = 0;\n                $this->database_name = '';\n                $this->ok = 0;\n                $this->error=$this->error();\n                dol_syslog(\"DoliDB::DoliDB : Erreur Select_db \".$this->error,LOG_ERR);\n            }\n        }\n        else\n        {\n            // Pas de selection de base demandee, ok ou ko\n            $this->database_selected = 0;\n\n            if ($this->connected)\n            {\n                // If client connected with different charset than Dolibarr HTML output\n                $clientmustbe='';\n                if (preg_match('/UTF-8/i',$conf->file->character_set_client))      $clientmustbe='utf8';\n                if (preg_match('/ISO-8859-1/i',$conf->file->character_set_client)) $clientmustbe='latin1';\n                if (mysqli_client_encoding($this->db) != $clientmustbe)\n                {\n                    $this->query(\"SET NAMES '\".$clientmustbe.\"'\", $this->db);\n                    //$this->query(\"SET CHARACTER SET \". $this->forcecharset);\n                }\n            }\n        }\n\n        return $this->ok;\n    }\n\n\n    /**\n     *  Convert a SQL request in Mysql syntax to PostgreSQL syntax\n     *  @param     line     SQL request line to convert\n     *  @param     type     Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *  @return    string   SQL request line converted\n     */\n    function convertSQLFromMysql($line,$type='ddl')\n    {\n        return $line;\n    }\n\n    /**\n     *\t\\brief      Selectionne une database.\n     *\t\\param\t    database\t\tNom de la database\n     *\t\\return\t    boolean         true si ok, false si ko\n     */\n    function select_db($database)\n    {\n        dol_syslog(\"DoliDB::select_db database=\".$database, LOG_DEBUG);\n        return mysqli_select_db($this->db,$database);\n    }\n\n\n    /**\n     *\t\\brief      Connexion to server\n     *\t\\param\t    host\t\tdatabase server host\n     *\t\\param\t    login\t\tlogin\n     *\t\\param\t    passwd\t\tpassword\n     *\t\\param\t\tname\t\tnom de la database (ne sert pas sous mysql, sert sous pgsql)\n     *\t\\param\t\tport\t\tPort of database server\n     *\t\\return\t\tresource\tDatabase access handler\n     *\t\\seealso\tclose\n     */\n    function connect($host, $login, $passwd, $name, $port=0)\n    {\n        dol_syslog(\"DoliDB::connect host=$host, port=$port, login=$login, passwd=--hidden--, name=$name\",LOG_DEBUG);\n\n        $newhost=$host;\n        $newport=$port;\n\n        // With mysqli, port must be in connect parameters\n        if (! $newport) $newport=3306;\n\n        $this->db  = @mysqli_connect($newhost, $login, $passwd, $name, $newport);\n\n        //print \"Resultat fonction connect: \".$this->db;\n        return $this->db;\n    }\n\n    /**\n     * \\brief          \tReturn label of manager\n     * \\return\t\t\tstring      Label\n     */\n    function getLabel()\n    {\n        return $this->label;\n    }\n\n    /**\n     *\t\\brief          Renvoie la version du serveur\n     *\t\\return\t        string      Chaine version\n     */\n    function getVersion()\n    {\n        //        $resql=$this->query('SELECT VERSION()');\n        //        $row=$this->fetch_row($resql);\n        //        return $row[0];\n        return mysqli_get_server_info($this->db);\n    }\n\n    /**\n     *\t\\brief          Renvoie la version du serveur sous forme de nombre\n     *\t\\return\t        string      Chaine version\n     */\n    function getIntVersion()\n    {\n        $version=\t$this->getVersion();\n        $vlist=preg_split('/[.-]/',$version);\n        if (dol_strlen($vlist[1])==1){\n            $vlist[1]=\"0\".$vlist[1];\n        }\n        if (dol_strlen($vlist[2])==1){\n            $vlist[2]=\"0\".$vlist[2];\n        }\n        return $vlist[0].$vlist[1].$vlist[2];\n    }\n\n    /**\n     *\t\\brief          Renvoie la version du serveur dans un tableau\n     *\t\\return\t        array  \t\tTableau de chaque niveau de version\n     */\n    function getVersionArray()\n    {\n        return explode('.',$this->getVersion());\n    }\n\n\n    /**\n     *\tClose database connexion\n     *\t@return\t    boolean     True if disconnect successfull, false otherwise\n     *\t@see    \tconnect\n     */\n    function close()\n    {\n        if ($this->db)\n        {\n            //dol_syslog(\"DoliDB::disconnect\",LOG_DEBUG);\n            $this->connected=0;\n            return mysqli_close($this->db);\n        }\n        return false;\n    }\n\n\n    /**\n     *\t\\brief      Debut d'une transaction.\n     *\t\\return\t    int         1 si ouverture transaction ok ou deja ouverte, 0 en cas d'erreur\n     */\n    function begin()\n    {\n        if (! $this->transaction_opened)\n        {\n            $ret=$this->query(\"BEGIN\");\n            if ($ret)\n            {\n                $this->transaction_opened++;\n                dol_syslog(\"BEGIN Transaction\",LOG_DEBUG);\n            }\n            return $ret;\n        }\n        else\n        {\n            $this->transaction_opened++;\n            return 1;\n        }\n    }\n\n    /**\n     * Validate a database transaction\n     * @param\t\tlog\t\t\tAdd more log to default log line\n     * @return\t    int         1 if validation is OK or transaction level no started, 0 if ERROR\n     */\n    function commit($log='')\n    {\n        if ($this->transaction_opened<=1)\n        {\n            $ret=$this->query(\"COMMIT\");\n            if ($ret)\n            {\n                $this->transaction_opened=0;\n                dol_syslog(\"COMMIT Transaction\".($log?' '.$log:''),LOG_DEBUG);\n            }\n            return $ret;\n        }\n        else\n        {\n            $this->transaction_opened--;\n            return 1;\n        }\n    }\n\n    /**\n     *\t\\brief      Annulation d'une transaction et retour aux anciennes valeurs\n     * \t\\param\t\tlog\t\t\tAdd more log to default log line\n     * \t\\return\t    int         1 si annulation ok ou transaction non ouverte, 0 en cas d'erreur\n     */\n    function rollback($log='')\n    {\n        if ($this->transaction_opened<=1)\n        {\n            $ret=$this->query(\"ROLLBACK\");\n            $this->transaction_opened=0;\n            dol_syslog(\"ROLLBACK Transaction\".($log?' '.$log:''),LOG_DEBUG);\n            return $ret;\n        }\n        else\n        {\n            $this->transaction_opened--;\n            return 1;\n        }\n    }\n\n    /**\n     * \tExecute a SQL request and return the resultset\n     * \t@param\t\tquery\t\t\tSQL query string\n     * \t@param\t\tusesavepoint\t0=Default mode, 1=Run a savepoint before and a rollbock to savepoint if error (this allow to have some request with errors inside global transactions).\n     * \t\t\t\t\t\t\t\tNote that with Mysql, this parameter is not used as Myssql can already commit a transaction even if one request is in error, without using savepoints.\n     *  @param      type            Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *\t@return\t    resource    \tResultset of answer\n     */\n    function query($query,$usesavepoint=0,$type='auto')\n    {\n        $query = trim($query);\n        if (! $this->database_name)\n        {\n            // Ordre SQL ne necessitant pas de connexion a une base (exemple: CREATE DATABASE)\n            $ret = mysqli_query($this->db,$query);\n        }\n        else\n        {\n            $ret = mysqli_query($this->db,$query);\n        }\n\n        if (! preg_match(\"/^COMMIT/i\",$query) && ! preg_match(\"/^ROLLBACK/i\",$query))\n        {\n            // Si requete utilisateur, on la sauvegarde ainsi que son resultset\n            if (! $ret)\n            {\n                $this->lastqueryerror = $query;\n                $this->lasterror = $this->error();\n                $this->lasterrno = $this->errno();\n                dol_syslog(\"Mysqli.lib::query SQL error: \".$query.\" \".$this->lasterrno, LOG_WARNING);\n            }\n            $this->lastquery=$query;\n            $this->results = $ret;\n        }\n\n        return $ret;\n    }\n\n    /**\n     *\t\\brief      Renvoie la ligne courante (comme un objet) pour le curseur resultset.\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return\t    object\t\tObject result line or false if KO or end of cursor\n     */\n    function fetch_object($resultset)\n    {\n        // Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        return mysqli_fetch_object($resultset);\n    }\n\n\n    /**\n     *\t\\brief      Renvoie les donnees dans un tableau.\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return\t    array\n     */\n    function fetch_array($resultset)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        return mysqli_fetch_array($resultset);\n    }\n\n    /**\n     *\t\\brief      Renvoie les donnees comme un tableau.\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return\t    array\n     */\n    function fetch_row($resultset)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_bool($resultset))\n        {\n            if (! is_object($resultset)) { $resultset=$this->results; }\n            return mysqli_fetch_row($resultset);\n        }\n        else\n        {\n            // si le curseur est un booleen on retourne la valeur 0\n            return 0;\n        }\n    }\n\n    /**\n     *\t\\brief      Renvoie le nombre de lignes dans le resultat d'une requete SELECT\n     *\t\\see    \taffected_rows\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return     int\t\t    Nombre de lignes\n     */\n    function num_rows($resultset)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        return mysqli_num_rows($resultset);\n    }\n\n    /**\n     *\t\\brief      Renvoie le nombre de lignes dans le resultat d'une requete INSERT, DELETE ou UPDATE\n     *\t\\see    \tnum_rows\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return     int\t\t    Nombre de lignes\n     */\n\n    function affected_rows($resultset)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        // mysql necessite un link de base pour cette fonction contrairement\n        // a pqsql qui prend un resultset\n        return mysqli_affected_rows($this->db);\n    }\n\n\n    /**\n     *\t\\brief      Libere le dernier resultset utilise sur cette connexion.\n     *\t\\param      resultset   Curseur de la requete voulue\n     */\n    function free($resultset=0)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        // Si resultset en est un, on libere la memoire\n        if (is_object($resultset)) mysqli_free_result($resultset);\n    }\n\n\n    /**\n     *\t\\brief      Defini les limites de la requete.\n     *\t\\param\t    limit       nombre maximum de lignes retournees\n     *\t\\param\t    offset      numero de la ligne a partir de laquelle recuperer les ligne\n     *\t\\return\t    string      chaine exprimant la syntax sql de la limite\n     */\n    function plimit($limit=0,$offset=0)\n    {\n        global $conf;\n        if (! $limit) $limit=$conf->liste_limit;\n        if ($offset > 0) return \" LIMIT $offset,$limit \";\n        else return \" LIMIT $limit \";\n    }\n\n\n    /**\n     * Define sort criteria of request\n     * @param\t    sortfield   List of sort fields\n     * @param\t    sortorder   Sort order\n     * @return\t    string      String to provide syntax of a sort sql string\n     * TODO\t\t\tMutualized this into a mother class\n     */\n    function order($sortfield=0,$sortorder=0)\n    {\n        if ($sortfield)\n        {\n            $return='';\n            $fields=explode(',',$sortfield);\n            foreach($fields as $val)\n            {\n                if (! $return) $return.=' ORDER BY ';\n                else $return.=',';\n\n                $return.=$val;\n                if ($sortorder) $return.=' '.$sortorder;\n            }\n            return $return;\n        }\n        else\n        {\n            return '';\n        }\n    }\n\n\n    /**\n     *\tEscape a string to insert data.\n     *\t@param\t    stringtoencode\t\tString to escape\n     *\t@return\t    string\t\t\t\tString escaped\n     */\n    function escape($stringtoencode)\n    {\n        return addslashes($stringtoencode);\n    }\n\n    /**\n     *   Convert (by PHP) a GM Timestamp date into a PHP server TZ to insert into a date field.\n     *   Function to use to build INSERT, UPDATE or WHERE predica\n     *   @param\t    param       Date TMS to convert\n     *   @return\tstring      Date in a string YYYYMMDDHHMMSS\n     */\n    function idate($param)\n    {\n        return adodb_strftime(\"%Y%m%d%H%M%S\",$param);\n    }\n\n    /**\n     *\tConvert (by PHP) a PHP server TZ string date into a GM Timestamps date\n     * \t19700101020000 -> 3600 with TZ+1\n     * \t@param\t\tstring\t\t\tDate in a string (YYYYMMDDHHMMSS, YYYYMMDD, YYYY-MM-DD HH:MM:SS)\n     *\t@return\t\tdate\t\t\tDate TMS\n     */\n    function jdate($string)\n    {\n        $string=preg_replace('/([^0-9])/i','',$string);\n        $tmp=$string.'000000';\n        $date=dol_mktime(substr($tmp,8,2),substr($tmp,10,2),substr($tmp,12,2),substr($tmp,4,2),substr($tmp,6,2),substr($tmp,0,4));\n        return $date;\n    }\n\n    /**\n     *  Formate a SQL IF\n     *\t@param\t\ttest            chaine test\n     *\t@param\t\tresok           resultat si test egal\n     *\t@param\t\tresko           resultat si test non egal\n     *\t@return\t\tstring          chaine formatee SQL\n     */\n    function ifsql($test,$resok,$resko)\n    {\n        return 'IF('.$test.','.$resok.','.$resko.')';\n    }\n\n\n    /**\n     *\t\\brief      Renvoie la derniere requete soumise par la methode query()\n     *\t\\return\t    lastquery\n     */\n    function lastquery()\n    {\n        return $this->lastquery;\n    }\n\n    /**\n     *\t\\brief      Renvoie la derniere requete en erreur\n     *\t\\return\t    string\tlastqueryerror\n     */\n    function lastqueryerror()\n    {\n        return $this->lastqueryerror;\n    }\n\n    /**\n     *\t\\brief      Renvoie le libelle derniere erreur\n     *\t\\return\t    string\tlasterror\n     */\n    function lasterror()\n    {\n        return $this->lasterror;\n    }\n\n    /**\n     *\t\\brief      Renvoie le code derniere erreur\n     *\t\\return\t    string\tlasterrno\n     */\n    function lasterrno()\n    {\n        return $this->lasterrno;\n    }\n\n    /**\n     *\t\\brief     Renvoie le code erreur generique de l'operation precedente.\n     *\t\\return    error_num       (Exemples: DB_ERROR_TABLE_ALREADY_EXISTS, DB_ERROR_RECORD_ALREADY_EXISTS...)\n     */\n    function errno()\n    {\n        if (! $this->connected) {\n            // Si il y a eu echec de connexion, $this->db n'est pas valide.\n            return 'DB_ERROR_FAILED_TO_CONNECT';\n        }\n        else {\n            // Constants to convert a MySql error code to a generic Dolibarr error code\n            $errorcode_map = array(\n            1004 => 'DB_ERROR_CANNOT_CREATE',\n            1005 => 'DB_ERROR_CANNOT_CREATE',\n            1006 => 'DB_ERROR_CANNOT_CREATE',\n            1007 => 'DB_ERROR_ALREADY_EXISTS',\n            1008 => 'DB_ERROR_CANNOT_DROP',\n            1025 => 'DB_ERROR_NO_FOREIGN_KEY_TO_DROP',\n            1044 => 'DB_ERROR_ACCESSDENIED',\n            1046 => 'DB_ERROR_NODBSELECTED',\n            1048 => 'DB_ERROR_CONSTRAINT',\n            1050 => 'DB_ERROR_TABLE_ALREADY_EXISTS',\n            1051 => 'DB_ERROR_NOSUCHTABLE',\n            1054 => 'DB_ERROR_NOSUCHFIELD',\n            1060 => 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n            1061 => 'DB_ERROR_KEY_NAME_ALREADY_EXISTS',\n            1062 => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n            1064 => 'DB_ERROR_SYNTAX',\n            1068 => 'DB_ERROR_PRIMARY_KEY_ALREADY_EXISTS',\n            1075 => 'DB_ERROR_CANT_DROP_PRIMARY_KEY',\n            1091 => 'DB_ERROR_NOSUCHFIELD',\n            1100 => 'DB_ERROR_NOT_LOCKED',\n            1136 => 'DB_ERROR_VALUE_COUNT_ON_ROW',\n            1146 => 'DB_ERROR_NOSUCHTABLE',\n            1216 => 'DB_ERROR_NO_PARENT',\n            1217 => 'DB_ERROR_CHILD_EXISTS',\n            1451 => 'DB_ERROR_CHILD_EXISTS'\n            );\n\n            if (isset($errorcode_map[mysqli_errno($this->db)]))\n            {\n                return $errorcode_map[mysqli_errno($this->db)];\n            }\n            $errno=mysqli_errno($this->db);\n            return ($errno?'DB_ERROR_'.$errno:'0');\n        }\n    }\n\n    /**\n     *\t\\brief     Renvoie le texte de l'erreur mysql de l'operation precedente.\n     *\t\\return    error_text\n     */\n    function error()\n    {\n        if (! $this->connected) {\n            // Si il y a eu echec de connexion, $this->db n'est pas valide pour mysqli_error.\n            return 'Not connected. Check setup parameters in conf/conf.php file and your mysql client and server versions';\n        }\n        else {\n            return mysqli_error($this->db);\n        }\n    }\n\n    /**\n     *\t\\brief     Recupere l'id genere par le dernier INSERT.\n     *\t\\param     tab     Nom de la table concernee par l'insert. Ne sert pas sous MySql mais requis pour compatibilite avec Postgresql\n     *\t\\return    int     id\n     */\n    function last_insert_id($tab)\n    {\n        return mysqli_insert_id($this->db);\n    }\n\n    /**\n     *\tEncrypt sensitive data in database\n     *  Warning: This function includes the escape, so it must use direct value\n     *\t@param\t        fieldorvalue\tField name or value to encrypt\n     * \t@param\t\t\twithQuotes\t\tReturn string with quotes\n     * \t@return\t        return\t\t\tXXX(field) or XXX('value') or field or 'value'\n     *\n     */\n    function encrypt($fieldorvalue, $withQuotes=0)\n    {\n        global $conf;\n\n        // Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n        $cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n        //Encryption key\n        $cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n        $return = ($withQuotes?\"'\":\"\").$this->escape($fieldorvalue).($withQuotes?\"'\":\"\");\n\n        if ($cryptType && !empty($cryptKey))\n        {\n            if ($cryptType == 2)\n            {\n                $return = 'AES_ENCRYPT('.$return.',\\''.$cryptKey.'\\')';\n            }\n            else if ($cryptType == 1)\n            {\n                $return = 'DES_ENCRYPT('.$return.',\\''.$cryptKey.'\\')';\n            }\n        }\n\n        return $return;\n    }\n\n    /**\n     *\t\\brief          Decrypt sensitive data in database\n     *\t\\param\t        value\t\t\tValue to decrypt\n     * \t\\return\t        return\t\t\tDecrypted value if used\n     */\n    function decrypt($value)\n    {\n        global $conf;\n\n        // Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n        $cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n        //Encryption key\n        $cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n        $return = $value;\n\n        if ($cryptType && !empty($cryptKey))\n        {\n            if ($cryptType == 2)\n            {\n                $return = 'AES_DECRYPT('.$value.',\\''.$cryptKey.'\\')';\n            }\n            else if ($cryptType == 1)\n            {\n                $return = 'DES_DECRYPT('.$value.',\\''.$cryptKey.'\\')';\n            }\n        }\n\n        return $return;\n    }\n\n\n    // Next functions are not required. Only minor features use them.\n    //---------------------------------------------------------------\n\n    /**\n     *\t\\brief          Renvoie l'id de la connexion\n     *\t\\return\t        string      Id connexion\n     */\n    function DDLGetConnectId()\n    {\n        $resql=$this->query('SELECT CONNECTION_ID()');\n        $row=$this->fetch_row($resql);\n        return $row[0];\n    }\n\n    /**\n     *\t\\brief          Create a new database\n     *\t\\param\t        database\t\tDatabase name to create\n     * \t\\param\t\t\tcharset\t\t\tCharset used to store data\n     * \t\\param\t\t\tcollation\t\tCharset used to sort data\n     * \t\\param\t\t\towner\t\t\tUsername of database owner\n     * \t\\return\t        resource\t\tresource defined if OK, null if KO\n     *\t\\remarks        Do not use function xxx_create_db (xxx=mysql, ...) as they are deprecated\n     *\t\t\t\t\tWe force to create database with charset this->forcecharset and collate this->forcecollate\n     */\n    function DDLCreateDb($database,$charset='',$collation='',$owner='')\n    {\n        if (empty($charset))   $charset=$this->forcecharset;\n        if (empty($collation)) $collation=$this->collation;\n\n        // ALTER DATABASE dolibarr_db DEFAULT CHARACTER SET latin DEFAULT COLLATE latin1_swedish_ci\n        $sql = 'CREATE DATABASE '.$database;\n        $sql.= ' DEFAULT CHARACTER SET '.$charset.' DEFAULT COLLATE '.$collation;\n\n        dol_syslog($sql,LOG_DEBUG);\n        $ret=$this->query($sql);\n        if (! $ret)\n        {\n            // We try again for compatibility with Mysql < 4.1.1\n            $sql = 'CREATE DATABASE '.$database;\n            $ret=$this->query($sql);\n            dol_syslog($sql,LOG_DEBUG);\n        }\n        return $ret;\n    }\n\n    /**\n     *\t\\brief     \tList tables into a database.\n     *\t\\param\t    database\t\tName of database\n     *\t\\param\t    table   \t\tFilter on some tables\n     *\t\\return\t    array\t\t\tArray list of tables\n     */\n    function DDLListTables($database, $table='')\n    {\n        $listtables=array();\n\n        $like = '';\n        if ($table) $like = \"LIKE '\".$table.\"'\";\n        $sql=\"SHOW TABLES FROM \".$database.\" \".$like.\";\";\n        //print $sql;\n        $result = $this->query($sql);\n        while($row = $this->fetch_row($result))\n        {\n            $listtables[] = $row[0];\n        }\n        return $listtables;\n    }\n\n    /**\n     *\t\\brief     \tListe les informations des champs d'une table.\n     *\t\\param\t    table\t\t\tNom de la table\n     *\t\\return\t    array\t\t\tTableau des informations des champs de la table\n     */\n    function DDLInfoTable($table)\n    {\n        $infotables=array();\n\n        $sql=\"SHOW FULL COLUMNS FROM \".$table.\";\";\n\n        dol_syslog($sql,LOG_DEBUG);\n        $result = $this->query($sql);\n        while($row = $this->fetch_row($result))\n        {\n            $infotables[] = $row;\n        }\n        return $infotables;\n    }\n\n    /**\n     *\t\\brief      Cree une table\n     *\t\\param\t    table \t\t\tNom de la table\n     *\t\\param\t    fields \t\t\tTableau associatif [nom champ][tableau des descriptions]\n     *\t\\param\t    primary_key \tNom du champ qui sera la clef primaire\n     *\t\\param\t    unique_keys \tTableau associatifs Nom de champs qui seront clef unique => valeur\n     *\t\\param\t    fulltext \t\tTableau des Nom de champs qui seront indexes en fulltext\n     *\t\\param\t    key \t\t\tTableau des champs cles noms => valeur\n     *\t\\param\t    type \t\t\tType de la table\n     *\t\\return\t    int\t\t\t\t<0 si KO, >=0 si OK\n     */\n    function DDLCreateTable($table,$fields,$primary_key,$type,$unique_keys=\"\",$fulltext_keys=\"\",$keys=\"\")\n    {\n        // cles recherchees dans le tableau des descriptions (fields) : type,value,attribute,null,default,extra\n        // ex. : $fields['rowid'] = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n        $sql = \"create table \".$table.\"(\";\n        $i=0;\n        foreach($fields as $field_name => $field_desc)\n        {\n            $sqlfields[$i] = $field_name.\" \";\n            $sqlfields[$i]  .= $field_desc['type'];\n            if( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n            $sqlfields[$i]  .= \"(\".$field_desc['value'].\")\";\n            else if( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n            $sqlfields[$i]  .= \" \".$field_desc['attribute'];\n            else if( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n            {\n                if(preg_match(\"/null/i\",$field_desc['default']))\n                $sqlfields[$i]  .= \" default \".$field_desc['default'];\n                else\n                $sqlfields[$i]  .= \" default '\".$field_desc['default'].\"'\";\n            }\n            else if( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n            $sqlfields[$i]  .= \" \".$field_desc['null'];\n\n            else if( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n            $sqlfields[$i]  .= \" \".$field_desc['extra'];\n            $i++;\n        }\n        if($primary_key != \"\")\n        $pk = \"primary key(\".$primary_key.\")\";\n\n        if($unique_keys != \"\")\n        {\n            $i = 0;\n            foreach($unique_keys as $key => $value)\n            {\n                $sqluq[$i] = \"UNIQUE KEY '\".$key.\"' ('\".$value.\"')\";\n                $i++;\n            }\n        }\n        if($keys != \"\")\n        {\n            $i = 0;\n            foreach($keys as $key => $value)\n            {\n                $sqlk[$i] = \"KEY \".$key.\" (\".$value.\")\";\n                $i++;\n            }\n        }\n        $sql .= implode(',',$sqlfields);\n        if($primary_key != \"\")\n        $sql .= \",\".$pk;\n        if($unique_keys != \"\")\n        $sql .= \",\".implode(',',$sqluq);\n        if($keys != \"\")\n        $sql .= \",\".implode(',',$sqlk);\n        $sql .=\") type=\".$type;\n\n        dol_syslog($sql,LOG_DEBUG);\n        if(! $this -> query($sql))\n        return -1;\n        else\n        return 1;\n    }\n\n    /**\n     *\tReturn a pointer on fields describing table\n     *\t@param\t    table\tNom de la table\n     *\t@param\t    field\tOptionnel : Nom du champ si l'on veut la desc d'un champ\n     *\t@return\t    resource\n     */\n    function DDLDescTable($table,$field=\"\")\n    {\n        $sql=\"DESC \".$table.\" \".$field;\n\n        dol_syslog(get_class($this).\"::DDLDescTable \".$sql,LOG_DEBUG);\n        $this->results = $this->query($sql);\n        return $this->results;\n    }\n\n    /**\n     *\tInsert a new field in table\n     *\t@param\t    table \t\t\tTable name\n     *\t@param\t\tfield_name \t\tName of field\n     *\t@param\t    field_desc \t\tArray with properties describing new field\n     *\t@param\t    field_position \tOptionnal ie.: \"after fielddummy\"\n     *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n     */\n    function DDLAddField($table,$field_name,$field_desc,$field_position=\"\")\n    {\n        // cles recherchees dans le tableau des descriptions (field_desc) : type,value,attribute,null,default,extra\n        // ex. : $field_desc = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n        $sql= \"ALTER TABLE \".$table.\" ADD \".$field_name.\" \";\n        $sql.= $field_desc['type'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n        if (! in_array($field_desc['type'],array('date','datetime')))\n        {\n            $sql.= \"(\".$field_desc['value'].\")\";\n        }\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n        $sql.= \" \".$field_desc['attribute'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n        $sql.= \" \".$field_desc['null'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n        {\n            if(preg_match(\"/null/i\",$field_desc['default']))\n            $sql.= \" default \".$field_desc['default'];\n            else\n            $sql.= \" default '\".$field_desc['default'].\"'\";\n        }\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n        $sql.= \" \".$field_desc['extra'];\n        $sql.= \" \".$field_position;\n\n        dol_syslog(get_class($this).\"::DDLAddField \".$sql,LOG_DEBUG);\n        if(! $this->query($sql))\n        {\n            return -1;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n    /**\n     *\tUpdate format of a field into a table\n     *\t@param\t    table \t\t\tName of table\n     *\t@param\t\tfield_name \t\tName of field to modify\n     *\t@param\t    field_desc \t\tArray with description of field format\n     *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n     */\n    function DDLUpdateField($table,$field_name,$field_desc)\n    {\n        $sql = \"ALTER TABLE \".$table;\n        $sql .= \" MODIFY COLUMN \".$field_name.\" \".$field_desc['type'];\n        if ($field_desc['type'] == 'int' || $field_desc['type'] == 'varchar') $sql.=\"(\".$field_desc['value'].\")\";\n\n        dol_syslog(get_class($this).\"::DDLUpdateField \".$sql,LOG_DEBUG);\n        if (! $this->query($sql))\n        return -1;\n        else\n        return 1;\n    }\n\n    /**\n     *\tDrop a field in table\n     *\t@param\t    table \t\t\tNom de la table\n     *\t@param\t\tfield_name \t\tNom du champ a inserer\n     *\t@return\t    int\t\t\t\t<0 si KO, >0 si OK\n     */\n    function DDLDropField($table,$field_name)\n    {\n        $sql= \"ALTER TABLE \".$table.\" DROP COLUMN `\".$field_name.\"`\";\n        dol_syslog(get_class($this).\"::DDLDropField \".$sql,LOG_DEBUG);\n        if (! $this->query($sql))\n        {\n            $this->error=$this->lasterror();\n            return -1;\n        }\n        else return 1;\n    }\n\n\n    /**\n     *\t\\brief      Create a user and privileges to connect to database (even if database does not exists yet)\n     *\t\\param\t    dolibarr_main_db_host \t\tIp server\n     *\t\\param\t    dolibarr_main_db_user \t\tUsername to create\n     *\t\\param\t    dolibarr_main_db_pass \t\tPassword\n     *\t\\param\t\tdolibarr_main_db_name\t\tDatabase name where user must be granted\n     *\t\\return\t    int\t\t\t\t\t\t\t<0 if KO, >=0 if OK\n     */\n    function DDLCreateUser($dolibarr_main_db_host,$dolibarr_main_db_user,$dolibarr_main_db_pass,$dolibarr_main_db_name)\n    {\n        $sql = \"INSERT INTO user \";\n        $sql.= \"(Host,User,password,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Index_Priv,Alter_priv,Lock_tables_priv)\";\n        $sql.= \" VALUES ('\".addslashes($dolibarr_main_db_host).\"','\".addslashes($dolibarr_main_db_user).\"',password('\".addslashes($dolibarr_main_db_pass).\"')\";\n        $sql.= \",'Y','Y','Y','Y','Y','Y','Y','Y','Y')\";\n\n        dol_syslog(\"mysqli.lib::DDLCreateUser\", LOG_DEBUG);\t// No sql to avoid password in log\n        $resql=$this->query($sql);\n        if (! $resql)\n        {\n            dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n            return -1;\n        }\n\n        $sql = \"INSERT INTO db \";\n        $sql.= \"(Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Index_Priv,Alter_priv,Lock_tables_priv)\";\n        $sql.= \" VALUES ('\".addslashes($dolibarr_main_db_host).\"','\".addslashes($dolibarr_main_db_name).\"','\".addslashes($dolibarr_main_db_user).\"'\";\n        $sql.= \",'Y','Y','Y','Y','Y','Y','Y','Y','Y')\";\n\n        dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql);\n        $resql=$this->query($sql);\n        if (! $resql)\n        {\n            dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n            return -1;\n        }\n\n        $sql=\"FLUSH Privileges\";\n\n        dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql);\n        $resql=$this->query($sql);\n        if (! $resql)\n        {\n            dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n            return -1;\n        }\n\n        return 1;\n    }\n\n    /**\n     *\t\\brief\t\tReturn charset used to store data in database\n     *\t\\return\t\tstring\t\tCharset\n     */\n    function getDefaultCharacterSetDatabase()\n    {\n        $resql=$this->query('SHOW VARIABLES LIKE \\'character_set_database\\'');\n        if (!$resql)\n        {\n            // version Mysql < 4.1.1\n            return $this->forcecharset;\n        }\n        $liste=$this->fetch_array($resql);\n        return $liste['Value'];\n    }\n\n    /**\n     *\t\\brief\t\tReturn list of available charset that can be used to store data in database\n     *\t\\return\t\tarray\t\tList of Charset\n     */\n    function getListOfCharacterSet()\n    {\n        $resql=$this->query('SHOW CHARSET');\n        $liste = array();\n        if ($resql)\n        {\n            $i = 0;\n            while ($obj = $this->fetch_object($resql) )\n            {\n                $liste[$i]['charset'] = $obj->Charset;\n                $liste[$i]['description'] = $obj->Description;\n                $i++;\n            }\n            $this->free($resql);\n        } else {\n            // version Mysql < 4.1.1\n            return null;\n        }\n        return $liste;\n    }\n\n    /**\n     *\t\\brief\t\tReturn collation used in database\n     *\t\\return\t\tstring\t\tCollation value\n     */\n    function getDefaultCollationDatabase()\n    {\n        $resql=$this->query('SHOW VARIABLES LIKE \\'collation_database\\'');\n        if (!$resql)\n        {\n            // version Mysql < 4.1.1\n            return $this->forcecollate;\n        }\n        $liste=$this->fetch_array($resql);\n        return $liste['Value'];\n    }\n\n    /**\n     *\t\\brief\t\tReturn list of available collation that can be used for database\n     *\t\\return\t\tarray\t\tListe of Collation\n     */\n    function getListOfCollation()\n    {\n        $resql=$this->query('SHOW COLLATION');\n        $liste = array();\n        if ($resql)\n        {\n            $i = 0;\n            while ($obj = $this->fetch_object($resql) )\n            {\n                $liste[$i]['collation'] = $obj->Collation;\n                $i++;\n            }\n            $this->free($resql);\n        } else {\n            // version Mysql < 4.1.1\n            return null;\n        }\n        return $liste;\n    }\n\n    /**\n\t *\tReturn full path of dump program\n\t *\t@return\t\tstring\t\tFull path of dump program\n     */\n    function getPathOfDump()\n    {\n        $fullpathofdump='/pathtomysqldump/mysqldump';\n\n        $resql=$this->query('SHOW VARIABLES LIKE \\'basedir\\'');\n        if ($resql)\n        {\n            $liste=$this->fetch_array($resql);\n            $basedir=$liste['Value'];\n            $fullpathofdump=$basedir.(preg_match('/\\/$/',$basedir)?'':'/').'bin/mysqldump';\n        }\n        return $fullpathofdump;\n    }\n\n    /**\n     *\tReturn full path of restore program\n     *\t@return\t\tstring\t\tFull path of restore program\n     */\n    function getPathOfRestore()\n    {\n        $fullpathofimport='/pathtomysql/mysql';\n\n        $resql=$this->query('SHOW VARIABLES LIKE \\'basedir\\'');\n        if ($resql)\n        {\n            $liste=$this->fetch_array($resql);\n            $basedir=$liste['Value'];\n            $fullpathofimport=$basedir.(preg_match('/\\/$/',$basedir)?'':'/').'bin/mysql';\n        }\n        return $fullpathofimport;\n    }\n\n    /**\n     *\t\\brief\t\tReturn value of server parameters\n     * \t\\param\t\tfilter\t\tFilter list on a particular value\n     * \t\\return\t\tstring\t\tValue for parameter\n     */\n    function getServerParametersValues($key,$filter='')\n    {\n        $result=array();\n\n        $sql='SHOW VARIABLES';\n        if ($filter) $sql.=\" LIKE '\".addslashes($key).\"'\";\n        $resql=$this->query($sql);\n        if ($resql)\n        {\n            $obj=$this->fetch_object($resql);\n            $result[$obj->Variable_name]=$obj->Value;\n        }\n\n        return $result;\n    }\n\n    /**\n     *\t\\brief\t\tReturn value of server status\n     * \t\\param\t\tfilter\t\tFilter list on a particular value\n     * \t\\return\t\tstring\t\tValue for parameter\n     */\n    function getServerStatusValues($filter='')\n    {\n        $result=array();\n\n        $sql='SHOW STATUS';\n        if ($filter) $sql.=\" LIKE '\".addslashes($key).\"'\";\n        $resql=$this->query($sql);\n        if ($resql)\n        {\n            $obj=$this->fetch_object($resql);\n            $result[$obj->Variable_name]=$obj->Value;\n        }\n\n        return $result;\n    }\n}\n\n?>\n", "<?php\n/* Copyright (C) 2001      Fabien Seisen        <seisen@linuxfr.org>\n * Copyright (C) 2002-2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Sebastien Di Cintio  <sdicintio@ressource-toi.org>\n * Copyright (C) 2004      Benoit Mortier\t\t<benoit.mortier@opensides.be>\n * Copyright (C) 2005-2009 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/lib/databases/pgsql.lib.php\n *\t\\brief      Fichier de la classe permettant de gerer une base pgsql\n *\t\\version\t$Id: pgsql.lib.php,v 1.111 2011/08/04 13:58:14 eldy Exp $\n */\n// For compatibility during upgrade\nif (! defined('DOL_DOCUMENT_ROOT'))\t define('DOL_DOCUMENT_ROOT', '../..');\nif (! defined('ADODB_DATE_VERSION')) include_once(DOL_DOCUMENT_ROOT.\"/includes/adodbtime/adodb-time.inc.php\");\n\n\n/**\n *\t\\class      DoliDb\n *\t\\brief      Class to drive a Postgresql database for Dolibarr\n */\nclass DoliDb\n{\n\tvar $db;                      // Database handler\n\tvar $type='pgsql';            // Name of manager\n\tvar $label='PostgreSQL';      // Label of manager\n\t//! Charset\n\tvar $forcecharset='latin1';\n\tvar $versionmin=array(8,4,0);\t// Version min database\n\n\tvar $results;                 // Resultset de la derniere requete\n\n\tvar $connected;               // 1 si connecte, 0 sinon\n\tvar $database_selected;       // 1 si base selectionne, 0 sinon\n\tvar $database_name;\t\t\t//! Nom base selectionnee\n\tvar $database_user;\t   \t\t//! Nom user base\n\tvar $transaction_opened;      // 1 si une transaction est en cours, 0 sinon\n\tvar $lastquery;\n\tvar $lastqueryerror;\t\t// Ajout d'une variable en cas d'erreur\n\n\tvar $unescapeslashquot=0;              // By default we do not force the unescape of \\'. This is used only to process sql with mysql escaped data.\n\tvar $standard_conforming_strings=1;    // Database has option standard_conforming_strings to on\n\n\tvar $ok;\n\tvar $error;\n\tvar $lasterror;\n\n\n\n\t/**\n\t * \\brief      Ouverture d'une connexion vers le serveur et une database.\n\t * \\param\t\ttype\t\ttype de base de donnees (mysql ou pgsql)\n\t * \\param\t\thost\t\taddresse de la base de donnees\n\t * \\param\t    user\t\tnom de l'utilisateur autorise\n\t * \\param\t\tpass\t\tmot de passe\n\t * \\param\t\tname\t\tnom de la database\n\t * \\param\t    port\t\tPort of database server\n\t * \\return\t\tint\t\t\t1 en cas de succes, 0 sinon\n\t */\n\tfunction DoliDb($type='pgsql', $host, $user, $pass, $name='', $port=0)\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$this->forcecharset=$conf->file->character_set_client;\n\t\t$this->forcecollate=$conf->db->dolibarr_main_db_collation;\n\t\t$this->database_user=$user;\n\n\t\t$this->transaction_opened=0;\n\n\t\t//print \"Name DB: $host,$user,$pass,$name<br>\";\n\n\t\tif (! function_exists(\"pg_connect\"))\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=\"Pgsql PHP functions are not available in this version of PHP\";\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Pgsql PHP functions are not available in this version of PHP\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\tif (! $host)\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=$langs->trans(\"ErrorWrongHostParameter\");\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect, wrong host parameters\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\t// Essai connexion serveur\n\t\t//print \"$host, $user, $pass, $name, $port\";\n\t\t$this->db = $this->connect($host, $user, $pass, $name, $port);\n\t\tif ($this->db)\n\t\t{\n\t\t\t$this->connected = 1;\n\t\t\t$this->ok = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// host, login ou password incorrect\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error='Host, login or password incorrect';\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect \".$this->error,LOG_ERR);\n\t\t}\n\n\t\t// Si connexion serveur ok et si connexion base demandee, on essaie connexion base\n\t\tif ($this->connected && $name)\n\t\t{\n\t\t\tif ($this->select_db($name))\n\t\t\t{\n\t\t\t\t$this->database_selected = 1;\n\t\t\t\t$this->database_name = $name;\n\t\t\t\t$this->ok = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->database_selected = 0;\n\t\t\t\t$this->database_name = '';\n\t\t\t\t$this->ok = 0;\n\t\t\t\t$this->error=$this->error();\n\t\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Select_db \".$this->error,LOG_ERR);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Pas de selection de base demandee, ok ou ko\n\t\t\t$this->database_selected = 0;\n\t\t}\n\n\t\treturn $this->ok;\n\t}\n\n\n\t/**\n\t *\tConvert a SQL request in Mysql syntax to PostgreSQL syntax\n\t * \t@param     line\t\tSQL request line to convert\n\t *  @param     type     Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n\t * \t@return    string\tSQL request line converted\n\t */\n\tfunction convertSQLFromMysql($line,$type='auto')\n\t{\n\t\t# Removed empty line if this is a comment line for SVN tagging\n\t\tif (preg_match('/^--\\s\\$Id/i',$line)) {\n\t\t\treturn '';\n\t\t}\n\t\t# Return line if this is a comment\n\t\tif (preg_match('/^#/i',$line) || preg_match('/^$/i',$line) || preg_match('/^--/i',$line))\n\t\t{\n\t\t\treturn $line;\n\t\t}\n\t\tif ($line != \"\")\n\t\t{\n\t\t    if ($type == 'auto')\n\t\t    {\n              if (preg_match('/ALTER TABLE/i',$line)) $type='dml';\n              else if (preg_match('/CREATE TABLE/i',$line)) $type='dml';\n              else if (preg_match('/DROP TABLE/i',$line)) $type='dml';\n\t\t    }\n\n\t\t    if ($type == 'dml')\n\t\t    {\n                $line=preg_replace('/\\s/',' ',$line);   // Replace tabulation with space\n\n\t\t        # we are inside create table statement so lets process datatypes\n    \t\t\tif (preg_match('/(ISAM|innodb)/i',$line)) { # end of create table sequence\n    \t\t\t\t$line=preg_replace('/\\)[\\s\\t]*type[\\s\\t]*=[\\s\\t]*(MyISAM|innodb);/i',');',$line);\n    \t\t\t\t$line=preg_replace('/\\)[\\s\\t]*engine[\\s\\t]*=[\\s\\t]*(MyISAM|innodb);/i',');',$line);\n    \t\t\t\t$line=preg_replace('/,$/','',$line);\n    \t\t\t}\n\n    \t\t\t// Process case: \"CREATE TABLE llx_mytable(rowid integer NOT NULL AUTO_INCREMENT PRIMARY KEY,code...\"\n    \t\t\tif (preg_match('/[\\s\\t\\(]*(\\w*)[\\s\\t]+int.*auto_increment/i',$line,$reg)) {\n    \t\t\t\t$newline=preg_replace('/([\\s\\t\\(]*)([a-zA-Z_0-9]*)[\\s\\t]+int.*auto_increment[^,]*/i','\\\\1 \\\\2 SERIAL PRIMARY KEY',$line);\n                    //$line = \"-- \".$line.\" replaced by --\\n\".$newline;\n                    $line=$newline;\n    \t\t\t}\n\n    \t\t\t# tinyint type conversion\n    \t\t\t$line=str_replace('tinyint','smallint',$line);\n\n    \t\t\t# nuke unsigned\n    \t\t\t$line=preg_replace('/(int\\w+|smallint)\\s+unsigned/i','\\\\1',$line);\n\n    \t\t\t# blob -> text\n    \t\t\t$line=preg_replace('/\\w*blob/i','text',$line);\n\n    \t\t\t# tinytext/mediumtext -> text\n    \t\t\t$line=preg_replace('/tinytext/i','text',$line);\n    \t\t\t$line=preg_replace('/mediumtext/i','text',$line);\n\n    \t\t\t# change not null datetime field to null valid ones\n    \t\t\t# (to support remapping of \"zero time\" to null\n    \t\t\t$line=preg_replace('/datetime not null/i','datetime',$line);\n    \t\t\t$line=preg_replace('/datetime/i','timestamp',$line);\n\n    \t\t\t# double -> numeric\n    \t\t\t$line=preg_replace('/^double/i','numeric',$line);\n    \t\t\t$line=preg_replace('/(\\s*)double/i','\\\\1numeric',$line);\n    \t\t\t# float -> numeric\n    \t\t\t$line=preg_replace('/^float/i','numeric',$line);\n    \t\t\t$line=preg_replace('/(\\s*)float/i','\\\\1numeric',$line);\n\n    \t\t\t# unique index(field1,field2)\n    \t\t\tif (preg_match('/unique index\\s*\\((\\w+\\s*,\\s*\\w+)\\)/i',$line))\n    \t\t\t{\n    \t\t\t\t$line=preg_replace('/unique index\\s*\\((\\w+\\s*,\\s*\\w+)\\)/i','UNIQUE\\(\\\\1\\)',$line);\n    \t\t\t}\n\n    \t\t\t# We remove end of requests \"AFTER fieldxxx\"\n    \t\t\t$line=preg_replace('/AFTER [a-z0-9_]+/i','',$line);\n\n    \t\t\t# We remove start of requests \"ALTER TABLE tablexxx\" if this is a DROP INDEX\n    \t\t\t$line=preg_replace('/ALTER TABLE [a-z0-9_]+ DROP INDEX/i','DROP INDEX',$line);\n\n                # Translate order to rename fields\n                if (preg_match('/ALTER TABLE ([a-z0-9_]+) CHANGE(?: COLUMN)? ([a-z0-9_]+) ([a-z0-9_]+)(.*)$/i',$line,$reg))\n                {\n                \t$line = \"-- \".$line.\" replaced by --\\n\";\n                    $line.= \"ALTER TABLE \".$reg[1].\" RENAME COLUMN \".$reg[2].\" TO \".$reg[3];\n                }\n\n                # Translate order to modify field format\n                if (preg_match('/ALTER TABLE ([a-z0-9_]+) MODIFY(?: COLUMN)? ([a-z0-9_]+) (.*)$/i',$line,$reg))\n                {\n                    $line = \"-- \".$line.\" replaced by --\\n\";\n                    $newreg3=$reg[3];\n                    $newreg3=preg_replace('/ DEFAULT NULL/i','',$newreg3);\n                    $newreg3=preg_replace('/ NOT NULL/i','',$newreg3);\n                    $newreg3=preg_replace('/ NULL/i','',$newreg3);\n                    $newreg3=preg_replace('/ DEFAULT 0/i','',$newreg3);\n                    $newreg3=preg_replace('/ DEFAULT \\'[0-9a-zA-Z_@]*\\'/i','',$newreg3);\n                    $line.= \"ALTER TABLE \".$reg[1].\" ALTER COLUMN \".$reg[2].\" TYPE \".$newreg3;\n                    // TODO Add alter to set default value or null/not null if there is this in $reg[3]\n                }\n\n                # alter table add primary key (field1, field2 ...) -> We remove the primary key name not accepted by PostGreSQL\n    \t\t\t# ALTER TABLE llx_dolibarr_modules ADD PRIMARY KEY pk_dolibarr_modules (numero, entity);\n    \t\t\tif (preg_match('/ALTER\\s+TABLE\\s*(.*)\\s*ADD\\s+PRIMARY\\s+KEY\\s*(.*)\\s*\\((.*)$/i',$line,$reg))\n    \t\t\t{\n    \t\t\t\t$line = \"-- \".$line.\" replaced by --\\n\";\n    \t\t\t\t$line.= \"ALTER TABLE \".$reg[1].\" ADD PRIMARY KEY (\".$reg[3];\n    \t\t\t}\n\n                # Translate order to drop foreign keys\n                # ALTER TABLE llx_dolibarr_modules DROP FOREIGN KEY fk_xxx;\n                if (preg_match('/ALTER\\s+TABLE\\s*(.*)\\s*DROP\\s+FOREIGN\\s+KEY\\s*(.*)$/i',$line,$reg))\n                {\n                    $line = \"-- \".$line.\" replaced by --\\n\";\n                    $line.= \"ALTER TABLE \".$reg[1].\" DROP CONSTRAINT \".$reg[2];\n                }\n\n    \t\t\t# alter table add [unique] [index] (field1, field2 ...)\n    \t\t\t# ALTER TABLE llx_accountingaccount ADD INDEX idx_accountingaccount_fk_pcg_version (fk_pcg_version)\n    \t\t\tif (preg_match('/ALTER\\s+TABLE\\s*(.*)\\s*ADD\\s+(UNIQUE INDEX|INDEX|UNIQUE)\\s+(.*)\\s*\\(([\\w,\\s]+)\\)/i',$line,$reg))\n    \t\t\t{\n    \t\t\t\t$fieldlist=$reg[4];\n    \t\t\t\t$idxname=$reg[3];\n    \t\t\t\t$tablename=$reg[1];\n    \t\t\t\t$line = \"-- \".$line.\" replaced by --\\n\";\n    \t\t\t\t$line.= \"CREATE \".(preg_match('/UNIQUE/',$reg[2])?'UNIQUE ':'').\"INDEX \".$idxname.\" ON \".$tablename.\" (\".$fieldlist.\")\";\n    \t\t\t}\n            }\n\n            // To have postgresql case sensitive\n            $line=str_replace(' LIKE \\'',' ILIKE \\'',$line);\n\n\t\t\t// Delete using criteria on other table must not declare twice the deleted table\n\t\t\t// DELETE FROM tabletodelete USING tabletodelete, othertable -> DELETE FROM tabletodelete USING othertable\n\t\t\tif (preg_match('/DELETE FROM ([a-z_]+) USING ([a-z_]+), ([a-z_]+)/i',$line,$reg))\n\t\t\t{\n\t\t\t\tif ($reg[1] == $reg[2])\t// If same table, we remove second one\n\t\t\t\t{\n\t\t\t\t\t$line=preg_replace('/DELETE FROM ([a-z_]+) USING ([a-z_]+), ([a-z_]+)/i','DELETE FROM \\\\1 USING \\\\3', $line);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove () in the tables in FROM if one table\n\t\t\t$line=preg_replace('/FROM\\s*\\((([a-z_]+)\\s+as\\s+([a-z_]+)\\s*)\\)/i','FROM \\\\1',$line);\n\t\t\t//print $line.\"\\n\";\n\n\t\t\t// Remove () in the tables in FROM if two table\n\t\t\t$line=preg_replace('/FROM\\s*\\(([a-z_]+\\s+as\\s+[a-z_]+)\\s*,\\s*([a-z_]+\\s+as\\s+[a-z_]+\\s*)\\)/i','FROM \\\\1, \\\\2',$line);\n\t\t\t//print $line.\"\\n\";\n\n\t\t\t// Remove () in the tables in FROM if two table\n\t\t\t$line=preg_replace('/FROM\\s*\\(([a-z_]+\\s+as\\s+[a-z_]+)\\s*,\\s*([a-z_]+\\s+as\\s+[a-z_]+\\s*),\\s*([a-z_]+\\s+as\\s+[a-z_]+\\s*)\\)/i','FROM \\\\1, \\\\2, \\\\3',$line);\n\t\t\t//print $line.\"\\n\";\n\n\t\t\t// Replace espacing \\' by ''.\n\t\t\t// By default we do not (should be already done by db->escape function if required)\n\t\t\tif (! empty($this->unescapeslashquot))\n\t\t\t{\n                // Except for sql insert in data file that\n                // are mysql escaped so we removed them to be compatible with standard_conforming_strings=on\n                // that considers \\ as ordinary character).\n                if ($this->standard_conforming_strings)\n                {\n\t\t\t\t    $line=preg_replace(\"/\\\\\\'/\",\"''\",$line);\n                }\n\t\t\t}\n\n\t\t\t//print \"type=\".$type.\" newline=\".$line.\"<br>\\n\";\n\t\t}\n\n\t\treturn $line;\n\t}\n\n\t/**\n\t * Select a database.\n     * Ici postgresql n'a aucune fonction equivalente de mysql_select_db\n     * On compare juste manuellement si la database choisie est bien celle activee par la connexion\n\t * @param\t\tdatabase\t\tnom de la database\n\t * @return\t\tboolean         true si ok, false si ko\n\t */\n\tfunction select_db($database)\n\t{\n\t\tif ($database == $this->database_name) return true;\n\t\telse return false;\n\t}\n\n\t/**\n\t * Connection vers le serveur\n\t * @param\t\thost\t\taddresse de la base de donnees\n\t * @param\t\tlogin\t\tnom de l'utilisateur autorise\n\t * @param\t\tpasswd\t\tmot de passe\n\t * @param\t\tname\t\tnom de la database (ne sert pas sous mysql, sert sous pgsql)\n\t * @param\t\tport\t\tPort of database server\n\t * @return\t\tresource\thandler d'acces a la base\n\t */\n\tfunction connect($host, $login, $passwd, $name, $port=0)\n\t{\n\t\tif (!$name){\n\t\t\t$name=\"postgres\";\n\t\t}\n\t\tif (!$port){\n\t\t\t$port=5432;\n\t\t}\n\t\t$con_string = \"host=$host port=$port dbname=$name user=$login password=$passwd\";\n        //print 'xxx'.$con_string;\n        //$this->db = pg_pconnect($con_string);   // To us persistent connection because this one cost 1ms, non ersisten cost 30ms\n        $this->db = pg_connect($con_string);\n\t\tif ($this->db)\n\t\t{\n\t\t\t$this->database_name = $name;\n\t\t\tpg_set_error_verbosity($this->db, PGSQL_ERRORS_VERBOSE);\t// Set verbosity to max\n\n\t\t}\n\t\treturn $this->db;\n\t}\n\n\t/**\n\t * \\brief          \tReturn label of manager\n\t * \\return\t\t\tstring      Label\n\t */\n\tfunction getLabel()\n\t{\n\t\treturn $this->label;\n\t}\n\n\t/**\n\t * \\brief          Return version of server\n\t * \\return\t       string      String with version\n\t */\n\tfunction getVersion()\n\t{\n\t\t$resql=$this->query('SHOW server_version');\n\t\tif ($resql)\n\t\t{\n\t\t  $liste=$this->fetch_array($resql);\n\t\t  return $liste['server_version'];\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * \\brief\t\tRenvoie la version du serveur sous forme de nombre\n\t * \\return\t\tstring      Chaine version\n\t */\n\tfunction getIntVersion()\n\t{\n\t\t$version = $this->getVersion();\n\t\t$vlist = preg_split('/[.-]/',$version);\n\t\tif (dol_strlen($vlist[1])==1){\n\t\t\t$vlist[1]=\"0\".$vlist[1];\n\t\t}\n\t\tif (dol_strlen($vlist[2])==1){\n\t\t\t$vlist[2]=\"0\".$vlist[2];\n\t\t}\n\t\treturn $vlist[0].$vlist[1].$vlist[2];\n\t}\n\n\t/**\n\t * \\brief\t\tRenvoie la version du serveur dans un tableau\n\t * \\return\t\tarray  \t\tTableau de chaque niveau de version\n\t */\n\tfunction getVersionArray()\n\t{\n\t\treturn explode('.',$this->getVersion());\n\t}\n\n    /**\n     *  Close database connexion\n     *  @return     boolean     True if disconnect successfull, false otherwise\n     *  @see        connect\n     */\n    function close()\n    {\n        if ($this->db)\n        {\n          //dol_syslog(\"DoliDB::disconnect\",LOG_DEBUG);\n          $this->connected=0;\n          return pg_close($this->db);\n        }\n        return false;\n    }\n\n\t/**\n\t * \\brief      Debut d'une transaction.\n\t * \\return\t    int         1 si ouverture transaction ok ou deja ouverte, 0 en cas d'erreur\n\t */\n\tfunction begin()\n\t{\n\t\tif (! $this->transaction_opened)\n\t\t{\n\t\t\t$ret=$this->query(\"BEGIN;\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened++;\n\t\t\t\tdol_syslog(\"BEGIN Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened++;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n     * Validate a database transaction\n     * @param       log         Add more log to default log line\n     * @return      int         1 if validation is OK or transaction level no started, 0 if ERROR\n\t */\n\tfunction commit($log='')\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"COMMIT;\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened=0;\n\t\t\t\tdol_syslog(\"COMMIT Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * \\brief      Annulation d'une transaction et retour aux anciennes valeurs\n\t * \\return\t    int         1 si annulation ok ou transaction non ouverte, 0 en cas d'erreur\n\t */\n\tfunction rollback()\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"ROLLBACK;\");\n\t\t\t$this->transaction_opened=0;\n\t\t\tdol_syslog(\"ROLLBACK Transaction\",LOG_DEBUG);\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t/**\n\t * Convert request to PostgreSQL syntax, execute it and return the resultset.\n\t * @param\t\tquery\t\t\tSQL query string\n\t * @param\t\tusesavepoint\t0=Default mode, 1=Run a savepoint before and a rollback to savepoint if error (this allow to have some request with errors inside global transactions).\n     * @param       type            Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n\t * @return\t    resource    \tResultset of answer\n\t */\n\tfunction query($query,$usesavepoint=0,$type='auto')\n\t{\n\t\t$query = trim($query);\n\n\t\t// Convert MySQL syntax to PostgresSQL syntax\n\t\t$query=$this->convertSQLFromMysql($query,$type);\n\t\t//print \"FF\\n\".$query.\"<br>\\n\";\n\n\t\t// Fix bad formed requests. If request contains a date without quotes, we fix this but this should not occurs.\n\t\t$loop=true;\n\t\twhile ($loop)\n\t\t{\n\t\t\tif (preg_match('/([^\\'])([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9])/',$query))\n\t\t\t{\n\t\t\t\t$query=preg_replace('/([^\\'])([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9])/','\\\\1\\'\\\\2\\'',$query);\n\t\t\t\tdol_syslog(\"Warning: Bad formed request converted into \".$query,LOG_WARNING);\n\t\t\t}\n\t\t\telse $loop=false;\n\t\t}\n\n\t\tif ($usesavepoint && $this->transaction_opened)\n\t\t{\n\t\t\t@pg_query($this->db, 'SAVEPOINT mysavepoint');\n\t\t}\n\n\t\t$ret = @pg_query($this->db, $query);\n\t\t//print $query;\n\t\tif (! preg_match(\"/^COMMIT/i\",$query) && ! preg_match(\"/^ROLLBACK/i\",$query)) // Si requete utilisateur, on la sauvegarde ainsi que son resultset\n\t\t{\n\t\t\tif (! $ret)\n\t\t\t{\n\t\t\t\t$this->lastqueryerror = $query;\n\t\t\t\t$this->lasterror = $this->error();\n\t\t\t\t$this->lasterrno = $this->errno();\n\t\t\t\tdol_syslog(\"Pgsql.lib::query SQL error: \".$query.\" \".$this->lasterrno, LOG_WARNING);\n\t\t\t\t//print \"\\n>> \".$query.\"<br>\\n\";\n\t\t\t\t//print '>> '.$this->lasterrno.' - '.$this->lasterror.' - '.$this->lastqueryerror.\"<br>\\n\";\n\n\t\t\t\tif ($usesavepoint && $this->transaction_opened)\n\t\t\t\t{\n\t\t\t\t\t@pg_query($this->db, 'ROLLBACK TO SAVEPOINT mysavepoint');\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->lastquery=$query;\n\t\t\t$this->results = $ret;\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie la ligne courante (comme un objet) pour le curseur resultset.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    object \t\tObject result line or false if KO or end of cursor\n\t */\n\tfunction fetch_object($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn pg_fetch_object($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie les donnees dans un tableau.\n\t * \\param      resultset   Curseur de la requete voulue\n\t * \\return\t\tarray\n\t */\n\tfunction fetch_array($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn pg_fetch_array($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie les donnees comme un tableau.\n\t * \\param      resultset   Curseur de la requete voulue\n\t * \\return\t    array\n\t */\n\tfunction fetch_row($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn pg_fetch_row($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie le nombre de lignes dans le resultat d'une requete SELECT\n\t * \\see    \t   affected_rows\n\t * \\param      resultset   Curseur de la requete voulue\n\t * \\return     int\t\t    Nombre de lignes\n\t */\n\tfunction num_rows($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn pg_num_rows($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie le nombre de lignes dans le resultat d'une requete INSERT, DELETE ou UPDATE\n\t * \\see    \t   num_rows\n\t * \\param      resultset   Curseur de la requete voulue\n\t * \\return     int\t\t    Nombre de lignes\n\t */\n\tfunction affected_rows($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// pgsql necessite un resultset pour cette fonction contrairement\n\t\t// a mysql qui prend un link de base\n\t\treturn pg_affected_rows($resultset);\n\t}\n\n\n\t/**\n\t * \\brief      Libere le dernier resultset utilise sur cette connexion.\n\t * \\param      resultset   Curseur de la requete voulue\n\t */\n\tfunction free($resultset=0)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// Si resultset en est un, on libere la memoire\n\t\tif (is_resource($resultset)) pg_free_result($resultset);\n\t}\n\n\n\t/**\n\t * \\brief       Defini les limites de la requete.\n\t * \\param\t    limit       nombre maximum de lignes retournees\n\t * \\param\t    offset      numero de la ligne a partir de laquelle recuperer les lignes\n\t * \\return\t    string      chaine exprimant la syntax sql de la limite\n\t */\n\tfunction plimit($limit=0,$offset=0)\n\t{\n\t\tglobal $conf;\n\t\tif (! $limit) $limit=$conf->liste_limit;\n\t\tif ($offset > 0) return \" LIMIT \".$limit.\" OFFSET \".$offset.\" \";\n\t\telse return \" LIMIT $limit \";\n\t}\n\n\n\t/**\n\t * Define sort criteria of request\n\t * @param\t    sortfield   List of sort fields\n\t * @param\t    sortorder   Sort order\n\t * @return\t    string      String to provide syntax of a sort sql string\n\t * TODO\t\t\tMutualized this into a mother class\n\t */\n\tfunction order($sortfield=0,$sortorder=0)\n\t{\n\t\tif ($sortfield)\n\t\t{\n\t\t\t$return='';\n\t\t\t$fields=explode(',',$sortfield);\n\t\t\tforeach($fields as $val)\n\t\t\t{\n\t\t\t\tif (! $return) $return.=' ORDER BY ';\n\t\t\t\telse $return.=',';\n\n\t\t\t\t$return.=$val;\n\t\t\t\tif ($sortorder) $return.=' '.$sortorder;\n\t\t\t}\n\t\t\treturn $return;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t}\n\n\n\t/**\n\t *   Escape a string to insert data.\n\t *   @param\t    stringtoencode\t\tString to escape\n\t *   @return\tstring\t\t\t\tString escaped\n\t */\n\tfunction escape($stringtoencode)\n\t{\n\t\treturn pg_escape_string($stringtoencode);\n\t}\n\n    /**\n\t *   Convert (by PHP) a GM Timestamp date into a GM string date to insert into a date field.\n\t *   Function to use to build INSERT, UPDATE or WHERE predica\n\t *   @param\t    param       Date TMS to convert\n\t *   @return\tstring      Date in a string YYYYMMDDHHMMSS\n\t */\n\tfunction idate($param)\n\t{\n\t\treturn adodb_strftime(\"%Y-%m-%d %H:%M:%S\",$param);\n\t}\n\n\t/**\n\t *\tConvert (by PHP) a PHP server TZ string date into a GM Timestamps date\n\t * \t19700101020000 -> 3600 with TZ+1\n\t * \t@param\t\tstring\t\t\tDate in a string (YYYYMMDDHHMMSS, YYYYMMDD, YYYY-MM-DD HH:MM:SS)\n\t *\t@return\t\tdate\t\t\tDate TMS\n\t */\n\tfunction jdate($string)\n\t{\n\t\t$string=preg_replace('/([^0-9])/i','',$string);\n\t\t$tmp=$string.'000000';\n\t\t$date=dol_mktime(substr($tmp,8,2),substr($tmp,10,2),substr($tmp,12,2),substr($tmp,4,2),substr($tmp,6,2),substr($tmp,0,4));\n\t\treturn $date;\n\t}\n\n\t/**\n     *  Formate a SQL IF\n\t *  @param\t\ttest            chaine test\n\t *  @param\t\tresok           resultat si test egal\n\t *  @param\t\tresko           resultat si test non egal\n\t *  @return\t\tstring          chaine formate SQL\n\t */\n\tfunction ifsql($test,$resok,$resko)\n\t{\n\t\treturn '(CASE WHEN '.$test.' THEN '.$resok.' ELSE '.$resko.' END)';\n\t}\n\n\n\t/**\n\t *   \\brief      Renvoie la derniere requete soumise par la methode query()\n\t *   \\return\t    lastquery\n\t */\n\tfunction lastquery()\n\t{\n\t\treturn $this->lastquery;\n\t}\n\n\t/**\n\t *   \\brief      Renvoie la derniere requete en erreur\n\t *   \\return\t    string\tlastqueryerror\n\t */\n\tfunction lastqueryerror()\n\t{\n\t\treturn $this->lastqueryerror;\n\t}\n\n\t/**\n\t * \\brief      Renvoie le libelle derniere erreur\n\t * \\return\t    string\tlasterror\n\t */\n\tfunction lasterror()\n\t{\n\t\treturn $this->lasterror;\n\t}\n\n\t/**\n\t * \\brief      Renvoie le code derniere erreur\n\t * \\return\t    string\tlasterrno\n\t */\n\tfunction lasterrno()\n\t{\n\t\treturn $this->lasterrno;\n\t}\n\n\t/**\n\t * \\brief     Renvoie le code erreur generique de l'operation precedente.\n\t * \\return    error_num       (Exemples: DB_ERROR_TABLE_ALREADY_EXISTS, DB_ERROR_RECORD_ALREADY_EXISTS...)\n\t */\n\tfunction errno()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide.\n\t\t\treturn 'DB_ERROR_FAILED_TO_CONNECT';\n\t\t}\n\t\telse {\n\t\t\t// Constants to convert a MySql error code to a generic Dolibarr error code\n\t\t\t$errorcode_map = array(\n\t\t\t1004 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1005 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1006 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1007 => 'DB_ERROR_ALREADY_EXISTS',\n\t\t\t1008 => 'DB_ERROR_CANNOT_DROP',\n\t\t\t1025 => 'DB_ERROR_NO_FOREIGN_KEY_TO_DROP',\n\t\t\t1044 => 'DB_ERROR_ACCESSDENIED',\n\t\t\t1046 => 'DB_ERROR_NODBSELECTED',\n\t\t\t1048 => 'DB_ERROR_CONSTRAINT',\n\t\t\t'42P07' => 'DB_ERROR_TABLE_OR_KEY_ALREADY_EXISTS',\n\t\t\t'42703' => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1060 => 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n\t\t\t42701=> 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n\t\t\t'42710' => 'DB_ERROR_KEY_NAME_ALREADY_EXISTS',\n\t\t\t'23505' => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n\t\t\t'42704' => 'DB_ERROR_NO_INDEX_TO_DROP',\n\t\t\t'42601' => 'DB_ERROR_SYNTAX',\n\t\t\t'42P16' => 'DB_ERROR_PRIMARY_KEY_ALREADY_EXISTS',\n\t\t\t1075 => 'DB_ERROR_CANT_DROP_PRIMARY_KEY',\n\t\t\t1091 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1100 => 'DB_ERROR_NOT_LOCKED',\n\t\t\t1136 => 'DB_ERROR_VALUE_COUNT_ON_ROW',\n\t\t\t'42P01' => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t'23503' => 'DB_ERROR_NO_PARENT',\n\t\t\t1217 => 'DB_ERROR_CHILD_EXISTS',\n\t\t\t1451 => 'DB_ERROR_CHILD_EXISTS',\n\t\t\t'42P04' => 'DB_DATABASE_ALREADY_EXISTS'\n\t\t\t);\n\n\t\t\t$errorlabel=pg_last_error($this->db);\n\t\t\t$errorcode='';\n\t\t\tif (preg_match('/: *([0-9P]+):/',$errorlabel,$reg))\n\t\t\t{\n\t\t\t\t$errorcode=$reg[1];\n\t\t\t\tif (isset($errorcode_map[$errorcode]))\n\t\t\t\t{\n\t\t\t\t\treturn $errorcode_map[$errorcode];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$errno=$errorcode?$errorcode:$errorlabel;\n\t\t\treturn ($errno?'DB_ERROR_'.$errno:'0');\n\t\t}\n\t\t//                '/(Table does not exist\\.|Relation [\\\"\\'].*[\\\"\\'] does not exist|sequence does not exist|class \".+\" not found)$/' => 'DB_ERROR_NOSUCHTABLE',\n\t\t//                '/table [\\\"\\'].*[\\\"\\'] does not exist/' => 'DB_ERROR_NOSUCHTABLE',\n\t\t//                '/Relation [\\\"\\'].*[\\\"\\'] already exists|Cannot insert a duplicate key into (a )?unique index.*/'      => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n\t\t//                '/divide by zero$/'                     => 'DB_ERROR_DIVZERO',\n\t\t//                '/pg_atoi: error in .*: can\\'t parse /' => 'DB_ERROR_INVALID_NUMBER',\n\t\t//                '/ttribute [\\\"\\'].*[\\\"\\'] not found$|Relation [\\\"\\'].*[\\\"\\'] does not have attribute [\\\"\\'].*[\\\"\\']/' => 'DB_ERROR_NOSUCHFIELD',\n\t\t//                '/parser: parse error at or near \\\"/'   => 'DB_ERROR_SYNTAX',\n\t\t//                '/referential integrity violation/'     => 'DB_ERROR_CONSTRAINT'\n\t}\n\n\t/**\n\t * \\brief \t\tRenvoie le texte de l'erreur pgsql de l'operation precedente.\n\t * \\return\t\terror_text\n\t */\n\tfunction error()\n\t{\n\t\treturn pg_last_error($this->db);\n\t}\n\n\t/**\n\t * \\brief\t\tGet last ID after an insert INSERT.\n\t * \\param     \ttab     Table name concerned by insert. Ne sert pas sous MySql mais requis pour compatibilite avec Postgresql\n\t * \\return     \tint     id\n\t */\n\tfunction last_insert_id($tab,$fieldid='rowid')\n\t{\n\t\t//$result = pg_query($this->db,\"SELECT MAX(\".$fieldid.\") FROM \".$tab);\n\t\t$result = pg_query($this->db,\"SELECT currval('\".$tab.\"_\".$fieldid.\"_seq')\");\n\t\tif (! $result)\n\t\t{\n\t\t\tprint pg_last_error($this->db);\n\t\t\texit;\n\t\t}\n\t\t//$nbre = pg_num_rows($result);\n\t\t$row = pg_fetch_result($result,0,0);\n\t\treturn $row;\n\t}\n\n\t/**\n     *  Encrypt sensitive data in database\n     *  Warning: This function includes the escape, so it must use direct value\n     *  @param          fieldorvalue    Field name or value to encrypt\n     *  @param          withQuotes      Return string with quotes\n     *  @return         return          XXX(field) or XXX('value') or field or 'value'\n\t */\n\tfunction encrypt($fieldorvalue, $withQuotes=0)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $fieldorvalue;\n\t\treturn ($withQuotes?\"'\":\"\").$this->escape($return).($withQuotes?\"'\":\"\");\n\t}\n\n\n\t/**\n\t *\t\\brief          Decrypt sensitive data in database\n\t *\t\\param\t        value\t\t\tValue to decrypt\n\t * \t\\return\t        return\t\t\tDecrypted value if used\n\t */\n\tfunction decrypt($value)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $value;\n\t\treturn $return;\n\t}\n\n\n\t// Next function are not required. Only minor features use them.\n\t//--------------------------------------------------------------\n\n\n\t/**\n\t * \\brief          Renvoie l'id de la connexion\n\t * \\return\t        string      Id connexion\n\t */\n\tfunction DDLGetConnectId()\n\t{\n\t\treturn '?';\n\t}\n\n\n\n\t/**\n\t *\t\\brief          Create a new database\n\t *\t\\param\t        database\t\tDatabase name to create\n\t * \t\\param\t\t\tcharset\t\t\tCharset used to store data\n\t * \t\\param\t\t\tcollation\t\tCharset used to sort data\n\t * \t\\param\t\t\towner\t\t\tUsername of database owner\n\t * \t\\return\t        resource\t\tresource defined if OK, null if KO\n\t *  \\remarks        Ne pas utiliser les fonctions xxx_create_db (xxx=mysql, ...) car elles sont deprecated\n\t */\n\tfunction DDLCreateDb($database,$charset='',$collation='',$owner='')\n\t{\n\t\tif (empty($charset))   $charset=$this->forcecharset;\n\t\tif (empty($collation)) $collation=$this->collation;\n\n\t\t$ret=$this->query('CREATE DATABASE '.$database.' OWNER '.$owner.' ENCODING \\''.$charset.'\\'');\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \\brief      Liste des tables dans une database.\n\t * \\param\t    database\tNom de la database\n\t * \\return\t    resource\n\t */\n\tfunction DDLListTables($database, $table='')\n\t{\n\t\t$listtables=array();\n\n\t\t$like = '';\n\t\tif ($table) $like = \" AND table_name LIKE '\".$table.\"'\";\n\t\t$result = pg_query($this->db, \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'\".$like.\" ORDER BY table_name\");\n\t\twhile($row = $this->fetch_row($result))\n\t\t{\n\t\t\t$listtables[] = $row[0];\n\t\t}\n\t\treturn  $listtables;\n\t}\n\n\t/**\n\t *\t\\brief     \tListe les informations des champs d'une table.\n\t *\t\\param\t    table\t\t\tNom de la table\n\t *\t\\return\t    array\t\t\tTableau des informations des champs de la table\n\t *\tTODO modifier pour postgresql\n\t */\n\tfunction DDLInfoTable($table)\n\t{\n\t\t/*\n\t\t $infotables=array();\n\n\t\t $sql=\"SHOW FULL COLUMNS FROM \".$table.\";\";\n\n\t\t dol_syslog($sql,LOG_DEBUG);\n\t\t $result = $this->pg_query($this->db,$sql);\n\t\t while($row = $this->fetch_row($result))\n\t\t {\n\t\t\t$infotables[] = $row;\n\t\t\t}\n\t\t\treturn $infotables;\n\t\t\t*/\n\t}\n\n\n\t/**\n\t *\t\\brief      Cree une table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t    fields \t\t\tTableau associatif [nom champ][tableau des descriptions]\n\t *\t\\param\t    primary_key \tNom du champ qui sera la clef primaire\n\t *\t\\param\t    unique_keys \tTableau associatifs Nom de champs qui seront clef unique => valeur\n\t *\t\\param\t    fulltext \t\tTableau des Nom de champs qui seront indexes en fulltext\n\t *\t\\param\t    key \t\t\tTableau des champs cles noms => valeur\n\t *\t\\param\t    type \t\t\tType de la table\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >=0 si OK\n\t * TODO\n\t */\n\tfunction DDLCreateTable($table,$fields,$primary_key,$type,$unique_keys=\"\",$fulltext_keys=\"\",$keys=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (fields) : type,value,attribute,null,default,extra\n\t\t// ex. : $fields['rowid'] = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql = \"create table \".$table.\"(\";\n\t\t$i=0;\n\t\tforeach($fields as $field_name => $field_desc)\n\t\t{\n\t\t\t$sqlfields[$i] = $field_name.\" \";\n\t\t\t$sqlfields[$i]  .= $field_desc['type'];\n\t\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t\t$sqlfields[$i]  .= \"(\".$field_desc['value'].\")\";\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['attribute'];\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\t\t{\n\t\t\t\tif(preg_match(\"/null/i\",$field_desc['default']))\n\t\t\t\t$sqlfields[$i]  .= \" default \".$field_desc['default'];\n\t\t\t\telse\n\t\t\t\t$sqlfields[$i]  .= \" default '\".$field_desc['default'].\"'\";\n\t\t\t}\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['null'];\n\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['extra'];\n\t\t\t$i++;\n\t\t}\n\t\tif($primary_key != \"\")\n\t\t$pk = \"primary key(\".$primary_key.\")\";\n\n\t\tif($unique_keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($unique_keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqluq[$i] = \"UNIQUE KEY '\".$key.\"' ('\".$value.\"')\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\tif($keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqlk[$i] = \"KEY \".$key.\" (\".$value.\")\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\t$sql .= implode(',',$sqlfields);\n\t\tif($primary_key != \"\")\n\t\t$sql .= \",\".$pk;\n\t\tif($unique_keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqluq);\n\t\tif($keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqlk);\n\t\t$sql .=\") type=\".$type;\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t * \t\\brief      Create a user\n\t *\t\\param\t    dolibarr_main_db_host \t\tIp serveur\n\t *\t\\param\t    dolibarr_main_db_user \t\tNom user a creer\n\t *\t\\param\t    dolibarr_main_db_pass \t\tMot de passe user a creer\n\t *\t\\param\t\tdolibarr_main_db_name\t\tDatabase name where user must be granted\n\t *\t\\return\t    int\t\t\t\t\t\t\t<0 si KO, >=0 si OK\n\t */\n\tfunction DDLCreateUser($dolibarr_main_db_host,$dolibarr_main_db_user,$dolibarr_main_db_pass,$dolibarr_main_db_name)\n\t{\n\t\t$sql = \"create user \\\"\".addslashes($dolibarr_main_db_user).\"\\\" with password '\".addslashes($dolibarr_main_db_pass).\"'\";\n\n\t\tdol_syslog(\"pgsql.lib::DDLCreateUser\", LOG_DEBUG);\t// No sql to avoid password in log\n\t\t$resql=$this->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\t\\brief      decrit une table dans une database.\n\t *\t\\param\t    table\tNom de la table\n\t *\t\\param\t    field\tOptionnel : Nom du champ si l'on veut la desc d'un champ\n\t *\t\\return\t    resource\n\t */\n\tfunction DDLDescTable($table,$field=\"\")\n\t{\n\t\t$sql =\"SELECT attname FROM pg_attribute, pg_type WHERE typname = '\".$table.\"' AND attrelid = typrelid\";\n\t\t$sql.=\" AND attname NOT IN ('cmin', 'cmax', 'ctid', 'oid', 'tableoid', 'xmin', 'xmax')\";\n\t\tif ($field) $sql.= \" AND attname = '\".$field.\"'\";\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\t$this->results = $this->query($sql);\n\t\treturn $this->results;\n\t}\n\n\t/**\n\t *\t\\brief      Insert a new field in table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t\tfield_name \t\tNom du champ a inserer\n\t *\t\\param\t    field_desc \t\tTableau associatif de description du champ a inserer[nom du parametre][valeur du parametre]\n\t *\t\\param\t    field_position \tOptionnel ex.: \"after champtruc\"\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLAddField($table,$field_name,$field_desc,$field_position=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (field_desc) : type,value,attribute,null,default,extra\n\t\t// ex. : $field_desc = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql= \"ALTER TABLE \".$table.\" ADD \".$field_name.\" \";\n\t\t$sql .= $field_desc['type'];\n\t\tif ($field_desc['type'] != 'int' && preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t$sql .= \"(\".$field_desc['value'].\")\";\n\t\tif (preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t$sql .= \" \".$field_desc['attribute'];\n\t\tif (preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t$sql .= \" \".$field_desc['null'];\n\t\tif (preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\tif (preg_match(\"/null/i\",$field_desc['default']))\n\t\t$sql .= \" default \".$field_desc['default'];\n\t\telse\n\t\t$sql .= \" default '\".$field_desc['default'].\"'\";\n\t\tif (preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t$sql .= \" \".$field_desc['extra'];\n\t\t$sql .= \" \".$field_position;\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\tUpdate format of a field into a table\n\t *\t@param\t    table \t\t\tName of table\n\t *\t@param\t\tfield_name \t\tName of field to modify\n\t *\t@param\t    field_desc \t\tArray with description of field format\n\t *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction DDLUpdateField($table,$field_name,$field_desc)\n\t{\n\t\t$sql = \"ALTER TABLE \".$table;\n\t\t$sql .= \" MODIFY COLUMN \".$field_name.\" \".$field_desc['type'];\n\t\tif ($field_desc['type'] == 'int' || $field_desc['type'] == 'varchar') $sql.=\"(\".$field_desc['value'].\")\";\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\t\\brief      Drop a field in table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t\tfield_name \t\tNom du champ a inserer\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLDropField($table,$field_name)\n\t{\n\t\t$sql= \"ALTER TABLE \".$table.\" DROP COLUMN `\".$field_name.\"`\";\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\t{\n\t\t\t$this->error=$this->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\telse return 1;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn charset used to store data in database\n\t *\t\\return\t\tstring\t\tCharset\n\t */\n\tfunction getDefaultCharacterSetDatabase()\n\t{\n\t\t$resql=$this->query('SHOW SERVER_ENCODING');\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['server_encoding'];\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn list of available charset that can be used to store data in database\n\t *\t\\return\t\tarray\t\tList of Charset\n\t */\n\tfunction getListOfCharacterSet()\n\t{\n\t\t$resql=$this->query('SHOW SERVER_ENCODING');\n\t\t$liste = array();\n\t\tif ($resql)\n\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t\t$liste[$i]['charset'] = $obj->server_encoding;\n\t\t\t\t$liste[$i]['description'] = 'Default database charset';\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\treturn $liste;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn collation used in database\n\t *\t\\return\t\tstring\t\tCollation value\n\t */\n\tfunction getDefaultCollationDatabase()\n\t{\n\t\t$resql=$this->query('SHOW LC_COLLATE');\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['lc_collate'];\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn list of available collation that can be used for database\n\t *\t\\return\t\tarray\t\tListe of Collation\n\t */\n\tfunction getListOfCollation()\n\t{\n\t\t$resql=$this->query('SHOW LC_COLLATE');\n\t\t$liste = array();\n\t\tif ($resql)\n\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t\t$liste[$i]['collation'] = $obj->lc_collate;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\treturn $liste;\n\t}\n\n\t/**\n\t *\tReturn full path of dump program\n\t *\t@return\t\tstring\t\tFull path of dump program\n\t */\n\tfunction getPathOfDump()\n\t{\n\t\t$fullpathofdump='/pathtopgdump/pg_dump';\n\n\t\tif (file_exists('/usr/bin/pg_dump'))\n\t\t{\n\t\t    $fullpathofdump='/usr/bin/pg_dump';\n\t\t}\n\t\telse\n\t\t{\n            // TODO L'utilisateur de la base doit etre un superadmin pour lancer cette commande\n\t\t    $resql=$this->query('SHOW data_directory');\n    \t\tif ($resql)\n    \t\t{\n    \t\t\t$liste=$this->fetch_array($resql);\n    \t\t\t$basedir=$liste['data_directory'];\n    \t\t\t$fullpathofdump=preg_replace('/data$/','bin',$basedir).'/pg_dump';\n    \t\t}\n\t\t}\n\n\t\treturn $fullpathofdump;\n\t}\n\n    /**\n     *\tReturn full path of restore program\n     *\t@return\t\tstring\t\tFull path of restore program\n     */\n\tfunction getPathOfRestore()\n\t{\n\t\t$fullpathofdump='/pathtopgrestore/pg_restore';\n\n        if (file_exists('/usr/bin/pg_restore'))\n        {\n            $fullpathofdump='/usr/bin/pg_restore';\n        }\n        else\n        {\n            // TODO L'utilisateur de la base doit etre un superadmin pour lancer cette commande\n            $resql=$this->query('SHOW data_directory');\n            if ($resql)\n            {\n                $liste=$this->fetch_array($resql);\n                $basedir=$liste['data_directory'];\n                $fullpathofdump=preg_replace('/data$/','bin',$basedir).'/pg_restore';\n            }\n        }\n\n\t\treturn $fullpathofdump;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn value of server parameters\n\t * \t\\param\t\tfilter\t\tFilter list on a particular value\n\t *\t\\return\t\tstring\t\tValue for parameter\n\t */\n\tfunction getServerParametersValues($filter='')\n\t{\n\t\t$result=array();\n\n\t\t$resql='select name,setting from pg_settings';\n\t\tif ($filter) $resql.=\" WHERE name = '\".addslashes($filter).\"'\";\n\t\t$resql=$this->query($resql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$this->fetch_object($resql);\n\t\t\t$result[$obj->name]=$obj->setting;\n\t\t}\n\n\t\treturn $result;\n\t}\n}\n?>\n", "<?php\n/* Copyright (C) 2002-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2011 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Eric Seigne          <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2011 Regis Houssin        <regis@dolibarr.fr>\n * Copyright (C) 2005      Lionel Cousteix      <etm_ltd@tiscali.co.uk>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/fiche.php\n *       \\brief      Tab of user card\n *       \\version    $Id: fiche.php,v 1.275 2011/07/31 23:19:43 eldy Exp $\n */\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/user/class/user.class.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/user/class/usergroup.class.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/contact/class/contact.class.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/images.lib.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/usergroups.lib.php\");\nif ($conf->ldap->enabled) require_once(DOL_DOCUMENT_ROOT.\"/lib/ldap.class.php\");\nif ($conf->adherent->enabled) require_once(DOL_DOCUMENT_ROOT.\"/adherents/class/adherent.class.php\");\n\n// Define value to know what current user can do on users\n$canadduser=($user->admin || $user->rights->user->user->creer);\n$canreaduser=($user->admin || $user->rights->user->user->lire);\n$canedituser=($user->admin || $user->rights->user->user->creer);\n$candisableuser=($user->admin || $user->rights->user->user->supprimer);\n$canreadgroup=$canreaduser;\n$caneditgroup=$canedituser;\nif (! empty($conf->global->MAIN_USE_ADVANCED_PERMS))\n{\n    $canreadgroup=($user->admin || $user->rights->user->group_advance->read);\n    $caneditgroup=($user->admin || $user->rights->user->group_advance->write);\n}\n// Define value to know what current user can do on properties of edited user\nif ($_GET[\"id\"])\n{\n    // $user est le user qui edite, $_GET[\"id\"] est l'id de l'utilisateur edite\n    $caneditfield=( (($user->id == $_GET[\"id\"]) && $user->rights->user->self->creer)\n    || (($user->id != $_GET[\"id\"]) && $user->rights->user->user->creer) );\n    $caneditpassword=( (($user->id == $_GET[\"id\"]) && $user->rights->user->self->password)\n    || (($user->id != $_GET[\"id\"]) && $user->rights->user->user->password) );\n}\n\n$action=GETPOST(\"action\");\n$group=GETPOST(\"group\",\"int\",3);\n$confirm=GETPOST(\"confirm\");\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2='user';\nif ($user->id == $_GET[\"id\"]) { $feature2=''; $canreaduser=1; } // A user can always read its own card\n$result = restrictedArea($user, 'user', $_GET[\"id\"], '', $feature2);\nif ($user->id <> $_GET[\"id\"] && ! $canreaduser) accessforbidden();\n\n$langs->load(\"users\");\n$langs->load(\"companies\");\n$langs->load(\"ldap\");\n\n$form = new Form($db);\n\n\n/**\n * Actions\n */\nif ($_GET[\"subaction\"] == 'addrights' && $canedituser)\n{\n    $edituser = new User($db);\n    $edituser->fetch($_GET[\"id\"]);\n    $edituser->addrights($_GET[\"rights\"]);\n}\n\nif ($_GET[\"subaction\"] == 'delrights' && $canedituser)\n{\n    $edituser = new User($db);\n    $edituser->fetch($_GET[\"id\"]);\n    $edituser->delrights($_GET[\"rights\"]);\n}\n\nif ($action == 'confirm_disable' && $confirm == \"yes\" && $candisableuser)\n{\n    if ($_GET[\"id\"] <> $user->id)\n    {\n        $edituser = new User($db);\n        $edituser->fetch($_GET[\"id\"]);\n        $edituser->setstatus(0);\n        Header(\"Location: \".DOL_URL_ROOT.'/user/fiche.php?id='.$_GET[\"id\"]);\n        exit;\n    }\n}\nif ($action == 'confirm_enable' && $confirm == \"yes\" && $candisableuser)\n{\n    if ($_GET[\"id\"] <> $user->id)\n    {\n        $message='';\n\n        $edituser = new User($db);\n        $edituser->fetch($_GET[\"id\"]);\n\n        if (!empty($conf->file->main_limit_users))\n        {\n            $nb = $edituser->getNbOfUsers(\"active\");\n            if ($nb >= $conf->file->main_limit_users)\n            {\n                $message='<div class=\"error\">'.$langs->trans(\"YourQuotaOfUsersIsReached\").'</div>';\n            }\n        }\n\n        if (! $message)\n        {\n            $edituser->setstatus(1);\n            Header(\"Location: \".DOL_URL_ROOT.'/user/fiche.php?id='.$_GET[\"id\"]);\n            exit;\n        }\n    }\n}\n\nif ($action == 'confirm_delete' && $confirm == \"yes\" && $candisableuser)\n{\n    if ($_GET[\"id\"] <> $user->id)\n    {\n        $edituser = new User($db);\n        $edituser->id=$_GET[\"id\"];\n        $result = $edituser->delete();\n        if ($result < 0)\n        {\n            $langs->load(\"errors\");\n            $message='<div class=\"error\">'.$langs->trans(\"ErrorUserCannotBeDelete\").'</div>';\n        }\n        else\n        {\n            Header(\"Location: index.php\");\n            exit;\n        }\n    }\n}\n\n// Action ajout user\nif ($_POST[\"action\"] == 'add' && $canadduser)\n{\n    $message=\"\";\n    if (! $_POST[\"nom\"]) {\n        $message='<div class=\"error\">'.$langs->trans(\"NameNotDefined\").'</div>';\n        $action=\"create\";       // Go back to create page\n    }\n    if (! $_POST[\"login\"]) {\n        $message='<div class=\"error\">'.$langs->trans(\"LoginNotDefined\").'</div>';\n        $action=\"create\";       // Go back to create page\n    }\n\n    $edituser = new User($db);\n\n    if (!empty($conf->file->main_limit_users)) // If option to limit users is set\n    {\n        $nb = $edituser->getNbOfUsers(\"active\");\n        if ($nb >= $conf->file->main_limit_users)\n        {\n            $message='<div class=\"error\">'.$langs->trans(\"YourQuotaOfUsersIsReached\").'</div>';\n            $action=\"create\";       // Go back to create page\n        }\n    }\n\n    if (! $message)\n    {\n        $edituser->nom           = $_POST[\"nom\"];\n        $edituser->prenom        = $_POST[\"prenom\"];\n        $edituser->login         = $_POST[\"login\"];\n        $edituser->admin         = $_POST[\"admin\"];\n        $edituser->office_phone  = $_POST[\"office_phone\"];\n        $edituser->office_fax    = $_POST[\"office_fax\"];\n        $edituser->user_mobile   = $_POST[\"user_mobile\"];\n        $edituser->email         = $_POST[\"email\"];\n        $edituser->webcal_login  = $_POST[\"webcal_login\"];\n        $edituser->signature     = $_POST[\"signature\"];\n        $edituser->phenix_login  = $_POST[\"phenix_login\"];\n        $edituser->phenix_pass   = $_POST[\"phenix_pass\"];\n        $edituser->note          = $_POST[\"note\"];\n        $edituser->ldap_sid      = $_POST[\"ldap_sid\"];\n        // If multicompany is off, admin users must all be on entity 0.\n        $edituser->entity        = ( ! empty($_POST[\"admin\"]) && (! empty($_POST[\"superadmin\"]) || empty($conf->multicompany->enabled)) ? 0 : $_POST[\"entity\"]);\n\n        $db->begin();\n\n        $id = $edituser->create($user);\n        if ($id > 0)\n        {\n            if (isset($_POST['password']) && trim($_POST['password']))\n            {\n                $edituser->setPassword($user,trim($_POST['password']));\n            }\n\n            $db->commit();\n\n            Header(\"Location: fiche.php?id=$id\");\n            exit;\n        }\n        else\n        {\n            $langs->load(\"errors\");\n            $db->rollback();\n            if (is_array($edituser->errors) && count($edituser->errors)) $message='<div class=\"error\">'.join('<br>',$langs->trans($edituser->errors)).'</div>';\n            else $message='<div class=\"error\">'.$langs->trans($edituser->error).'</div>';\n            $action=\"create\";       // Go back to create page\n        }\n\n    }\n}\n\n// Action ajout groupe utilisateur\nif (($action == 'addgroup' || $action == 'removegroup') && $caneditfield)\n{\n    if ($group)\n    {\n        $editgroup = new UserGroup($db);\n        $editgroup->fetch($group);\n        $editgroup->oldcopy=dol_clone($editgroup);\n\n        $edituser = new User($db);\n        $edituser->fetch($_GET[\"id\"]);\n        if ($action == 'addgroup')    $edituser->SetInGroup($group,GETPOST('entity'));\n        if ($action == 'removegroup') $edituser->RemoveFromGroup($group,GETPOST('entity'));\n\n        if ($result > 0)\n        {\n            header(\"Location: fiche.php?id=\".$_GET[\"id\"]);\n            exit;\n        }\n        else\n        {\n            $message.=$edituser->error;\n        }\n    }\n}\n\nif ($action == 'update' && ! $_POST[\"cancel\"])\n{\n    require_once(DOL_DOCUMENT_ROOT.\"/lib/files.lib.php\");\n\n    if ($caneditfield)\t// Case we can edit all field\n    {\n        $message=\"\";\n\n        if (! $_POST[\"nom\"])\n        {\n            $message='<div class=\"error\">'.$langs->trans(\"NameNotDefined\").'</div>';\n            $action=\"edit\";       // Go back to create page\n        }\n        if (! $_POST[\"login\"])\n        {\n            $message='<div class=\"error\">'.$langs->trans(\"LoginNotDefined\").'</div>';\n            $action=\"edit\";       // Go back to create page\n        }\n\n        if (! $message)\n        {\n            $db->begin();\n            $edituser = new User($db);\n            $edituser->fetch($_GET[\"id\"]);\n\n            $edituser->oldcopy=dol_clone($edituser);\n\n            $edituser->nom           = $_POST[\"nom\"];\n            $edituser->prenom        = $_POST[\"prenom\"];\n            $edituser->login         = $_POST[\"login\"];\n            $edituser->pass          = $_POST[\"password\"];\n            $edituser->admin         = $_POST[\"admin\"];\n            $edituser->office_phone  = $_POST[\"office_phone\"];\n            $edituser->office_fax    = $_POST[\"office_fax\"];\n            $edituser->user_mobile   = $_POST[\"user_mobile\"];\n            $edituser->email         = $_POST[\"email\"];\n            $edituser->signature     = $_POST[\"signature\"];\n            $edituser->openid        = $_POST[\"openid\"];\n            $edituser->webcal_login  = $_POST[\"webcal_login\"];\n            $edituser->phenix_login  = $_POST[\"phenix_login\"];\n            $edituser->phenix_pass   = $_POST[\"phenix_pass\"];\n            $edituser->entity        = ( (! empty($_POST[\"superadmin\"]) && ! empty($_POST[\"admin\"])) ? 0 : $_POST[\"entity\"]);\n            if (GETPOST('deletephoto')) $edituser->photo='';\n            if (! empty($_FILES['photo']['name'])) $edituser->photo = dol_sanitizeFileName($_FILES['photo']['name']);\n\n            $ret=$edituser->update($user);\n            if ($ret < 0)\n            {\n                if ($db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS')\n                {\n                    $langs->load(\"errors\");\n                    $message.='<div class=\"error\">'.$langs->trans(\"ErrorLoginAlreadyExists\",$edituser->login).'</div>';\n                }\n                else\n                {\n                    $message.='<div class=\"error\">'.$edituser->error.'</div>';\n                }\n            }\n\n            if ($ret >=0 && ! count($edituser->errors))\n            {\n                if (GETPOST('deletephoto') && $edituser->photo)\n                {\n                    $fileimg=$conf->user->dir_output.'/'.get_exdir($edituser->id,2,0,1).'/logos/'.$edituser->photo;\n                    $dirthumbs=$conf->user->dir_output.'/'.get_exdir($edituser->id,2,0,1).'/logos/thumbs';\n                    dol_delete_file($fileimg);\n                    dol_delete_dir_recursive($dirthumbs);\n                }\n\n                if (isset($_FILES['photo']['tmp_name']) && trim($_FILES['photo']['tmp_name']))\n                {\n                    $dir= $conf->user->dir_output . '/' . get_exdir($edituser->id,2,0,1);\n\n                    create_exdir($dir);\n\n                    if (@is_dir($dir))\n                    {\n                        $newfile=$dir.'/'.dol_sanitizeFileName($_FILES['photo']['name']);\n                        $result=dol_move_uploaded_file($_FILES['photo']['tmp_name'],$newfile,1,0,$_FILES['photo']['error']);\n\n                        if (! $result > 0)\n                        {\n                            $message .= '<div class=\"error\">'.$langs->trans(\"ErrorFailedToSaveFile\").'</div>';\n                        }\n                        else\n                        {\n                            // Create small thumbs for company (Ratio is near 16/9)\n                            // Used on logon for example\n                            $imgThumbSmall = vignette($newfile, $maxwidthsmall, $maxheightsmall, '_small', $quality);\n\n                            // Create mini thumbs for company (Ratio is near 16/9)\n                            // Used on menu or for setup page for example\n                            $imgThumbMini = vignette($newfile, $maxwidthmini, $maxheightmini, '_mini', $quality);\n                        }\n                    }\n                }\n            }\n\n            if ($ret >= 0 && ! count($edituser->errors))\n            {\n                $message.='<div class=\"ok\">'.$langs->trans(\"UserModified\").'</div>';\n                $db->commit();\n            }\n            else\n            {\n                $db->rollback();\n            }\n        }\n    }\n    else if ($caneditpassword)\t// Case we can edit only password\n    {\n        $edituser = new User($db);\n        $edituser->fetch($_GET[\"id\"]);\n\n        $edituser->oldcopy=dol_clone($edituser);\n\n        $ret=$edituser->setPassword($user,$_POST[\"password\"]);\n        if ($ret < 0)\n        {\n            $message.='<div class=\"error\">'.$edituser->error.'</div>';\n        }\n    }\n}\n\n// Change password with a new generated one\nif ((($action == 'confirm_password' && $confirm == 'yes')\n|| ($action == 'confirm_passwordsend' && $confirm == 'yes')) && $caneditpassword)\n{\n    $edituser = new User($db);\n    $edituser->fetch($_GET[\"id\"]);\n\n    $newpassword=$edituser->setPassword($user,'');\n    if ($newpassword < 0)\n    {\n        // Echec\n        $message = '<div class=\"error\">'.$langs->trans(\"ErrorFailedToSetNewPassword\").'</div>';\n    }\n    else\n    {\n        // Succes\n        if ($action == 'confirm_passwordsend' && $confirm == 'yes')\n        {\n            if ($edituser->send_password($user,$newpassword) > 0)\n            {\n                $message = '<div class=\"ok\">'.$langs->trans(\"PasswordChangedAndSentTo\",$edituser->email).'</div>';\n                //$message.=$newpassword;\n            }\n            else\n            {\n                $message = '<div class=\"ok\">'.$langs->trans(\"PasswordChangedTo\",$newpassword).'</div>';\n                $message.= '<div class=\"error\">'.$edituser->error.'</div>';\n            }\n        }\n        else\n        {\n            $message = '<div class=\"ok\">'.$langs->trans(\"PasswordChangedTo\",$newpassword).'</div>';\n        }\n    }\n}\n\n// Action initialisation donnees depuis record LDAP\nif ($_POST[\"action\"] == 'adduserldap')\n{\n    $selecteduser = $_POST['users'];\n\n    $required_fields = array(\n    $conf->global->LDAP_FIELD_NAME,\n    $conf->global->LDAP_FIELD_FIRSTNAME,\n    $conf->global->LDAP_FIELD_LOGIN,\n    $conf->global->LDAP_FIELD_LOGIN_SAMBA,\n    $conf->global->LDAP_FIELD_PASSWORD,\n    $conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n    $conf->global->LDAP_FIELD_PHONE,\n    $conf->global->LDAP_FIELD_FAX,\n    $conf->global->LDAP_FIELD_MOBILE,\n    $conf->global->LDAP_FIELD_MAIL,\n    $conf->global->LDAP_FIELD_SID);\n\n    $ldap = new Ldap();\n    $result = $ldap->connect_bind();\n    if ($result >= 0)\n    {\n        // Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n        $required_fields=array_unique(array_values(array_filter($required_fields, \"dolValidElement\")));\n\n        $ldapusers = $ldap->getRecords($selecteduser, $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields);\n        //print_r($ldapusers);\n\n        if (is_array($ldapusers))\n        {\n            foreach ($ldapusers as $key => $attribute)\n            {\n                $ldap_nom    = $attribute[$conf->global->LDAP_FIELD_NAME];\n                $ldap_prenom = $attribute[$conf->global->LDAP_FIELD_FIRSTNAME];\n                $ldap_login  = $attribute[$conf->global->LDAP_FIELD_LOGIN];\n                $ldap_loginsmb = $attribute[$conf->global->LDAP_FIELD_LOGIN_SAMBA];\n                $ldap_pass         = $attribute[$conf->global->LDAP_FIELD_PASSWORD];\n                $ldap_pass_crypted = $attribute[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED];\n                $ldap_phone  = $attribute[$conf->global->LDAP_FIELD_PHONE];\n                $ldap_fax    = $attribute[$conf->global->LDAP_FIELD_FAX];\n                $ldap_mobile = $attribute[$conf->global->LDAP_FIELD_MOBILE];\n                $ldap_mail   = $attribute[$conf->global->LDAP_FIELD_MAIL];\n                $ldap_sid    = $attribute[$conf->global->LDAP_FIELD_SID];\n            }\n        }\n    }\n    else\n    {\n        $message='<div class=\"error\">'.$ldap->error.'</div>';\n    }\n}\n\n\n\n/*\n * Affichage page\n */\n\nllxHeader('',$langs->trans(\"UserCard\"));\n\n$html = new Form($db);\n\nif (($action == 'create') || ($action == 'adduserldap'))\n{\n    /* ************************************************************************** */\n    /*                                                                            */\n    /* Affichage fiche en mode creation                                           */\n    /*                                                                            */\n    /* ************************************************************************** */\n\n    print_fiche_titre($langs->trans(\"NewUser\"));\n\n    print $langs->trans(\"CreateInternalUserDesc\");\n    print \"<br>\";\n    print \"<br>\";\n\n    if ($conf->ldap->enabled && $conf->global->LDAP_SYNCHRO_ACTIVE == 'ldap2dolibarr')\n    {\n        /*\n         * Affiche formulaire d'ajout d'un compte depuis LDAP\n         * si on est en synchro LDAP vers Dolibarr\n         */\n\n        $ldap = new Ldap();\n        $result = $ldap->connect_bind();\n        if ($result >= 0)\n        {\n            $required_fields=array($conf->global->LDAP_KEY_USERS,\n            $conf->global->LDAP_FIELD_FULLNAME,\n            $conf->global->LDAP_FIELD_NAME,\n            $conf->global->LDAP_FIELD_FIRSTNAME,\n            $conf->global->LDAP_FIELD_LOGIN,\n            $conf->global->LDAP_FIELD_LOGIN_SAMBA);\n\n            // Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n            $required_fields=array_unique(array_values(array_filter($required_fields, \"dolValidElement\")));\n\n            // Get from LDAP database an array of results\n            $ldapusers = $ldap->getRecords('*', $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields, 1);\n            if (is_array($ldapusers))\n            {\n                $liste=array();\n                foreach ($ldapusers as $key => $ldapuser)\n                {\n                    // Define the label string for this user\n                    $label='';\n                    foreach ($required_fields as $value)\n                    {\n                        if ($value)\n                        {\n                            $label.=$value.\"=\".$ldapuser[$value].\" \";\n                        }\n                    }\n                    $liste[$key] = $label;\n                }\n\n            }\n            else\n            {\n                $message='<div class=\"error\">'.$ldap->error.'</div>';\n            }\n        }\n        else\n        {\n            $message='<div class=\"error\">'.$ldap->error.'</div>';\n        }\n    }\n\n    dol_htmloutput_errors($message);\n\n    if ($conf->ldap->enabled && $conf->global->LDAP_SYNCHRO_ACTIVE == 'ldap2dolibarr')\n    {\n        // Si la liste des users est rempli, on affiche la liste deroulante\n        if (is_array($liste))\n        {\n            print \"\\n\\n<!-- Form liste LDAP debut -->\\n\";\n\n            print '<form name=\"add_user_ldap\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"post\">';\n            print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n            print '<table width=\"100%\" class=\"border\"><tr>';\n            print '<td width=\"160\">';\n            print $langs->trans(\"LDAPUsers\");\n            print '</td>';\n            print '<td>';\n            print '<input type=\"hidden\" name=\"action\" value=\"adduserldap\">';\n            print $html->selectarray('users', $liste, '', 1);\n            print '</td><td align=\"center\">';\n            print '<input type=\"submit\" class=\"button\" value=\"'.$langs->trans('Get').'\">';\n            print '</td></tr></table>';\n            print '</form>';\n\n            print \"\\n<!-- Form liste LDAP fin -->\\n\\n\";\n            print '<br>';\n        }\n    }\n\n    print '<form action=\"fiche.php\" method=\"post\" name=\"createuser\">';\n    print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n    print '<input type=\"hidden\" name=\"action\" value=\"add\">';\n    if ($ldap_sid) print '<input type=\"hidden\" name=\"ldap_sid\" value=\"'.$ldap_sid.'\">';\n    print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n\n    print '<table class=\"border\" width=\"100%\">';\n\n    print '<tr>';\n\n    // Nom\n    print '<td valign=\"top\" width=\"160\"><span class=\"fieldrequired\">'.$langs->trans(\"Lastname\").'</span></td>';\n    print '<td>';\n    if ($ldap_nom)\n    {\n        print '<input type=\"hidden\" name=\"nom\" value=\"'.$ldap_nom.'\">';\n        print $ldap_nom;\n    }\n    else\n    {\n        print '<input size=\"30\" type=\"text\" name=\"nom\" value=\"'.$_POST[\"nom\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Prenom\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Firstname\").'</td>';\n    print '<td>';\n    if ($ldap_prenom)\n    {\n        print '<input type=\"hidden\" name=\"prenom\" value=\"'.$ldap_prenom.'\">';\n        print $ldap_prenom;\n    }\n    else\n    {\n        print '<input size=\"30\" type=\"text\" name=\"prenom\" value=\"'.$_POST[\"prenom\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Login\n    print '<tr><td valign=\"top\"><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n    print '<td>';\n    if ($ldap_login)\n    {\n        print '<input type=\"hidden\" name=\"login\" value=\"'.$ldap_login.'\">';\n        print $ldap_login;\n    }\n    elseif ($ldap_loginsmb)\n    {\n        print '<input type=\"hidden\" name=\"login\" value=\"'.$ldap_loginsmb.'\">';\n        print $ldap_loginsmb;\n    }\n    else\n    {\n        print '<input size=\"20\" maxsize=\"24\" type=\"text\" name=\"login\" value=\"'.$_POST[\"login\"].'\">';\n    }\n    print '</td></tr>';\n\n    $generated_password='';\n    if (! $ldap_sid)\n    {\n        include_once(DOL_DOCUMENT_ROOT.'/lib/security.lib.php');\n        $generated_password=getRandomPassword('');\n    }\n    $password=$generated_password;\n\n    // Mot de passe\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Password\").'</td>';\n    print '<td>';\n    if ($ldap_sid)\n    {\n        print 'Mot de passe du domaine';\n    }\n    else\n    {\n        if ($ldap_pass)\n        {\n            print '<input type=\"hidden\" name=\"password\" value=\"'.$ldap_pass.'\">';\n            print preg_replace('/./i','*',$ldap_pass);\n        }\n        else\n        {\n            // We do not use a field password but a field text to show new password to use.\n            print '<input size=\"30\" maxsize=\"32\" type=\"text\" name=\"password\" value=\"'.$password.'\">';\n        }\n    }\n    print '</td></tr>';\n\n    // Administrateur\n    if ($user->admin)\n    {\n        print '<tr><td valign=\"top\">'.$langs->trans(\"Administrator\").'</td>';\n        print '<td>';\n        print $form->selectyesno('admin',$_POST[\"admin\"],1);\n\n        if (! empty($conf->multicompany->enabled) && ! $user->entity)\n        {\n            if ($conf->use_javascript_ajax)\n            {\n                print '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t$(function() {\n\t\t\t\t\t\t\t\t$(\"select[name=admin]\").change(function() {\n\t\t\t\t\t\t\t\t\t if ( $(this).val() == 0 ) {\n\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t \t\t.attr(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t \t\t.attr(\"checked\", false);\n\t\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t \t\t.attr(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t</script>';\n            }\n            $checked=($_POST[\"superadmin\"]?' checked':'');\n            $disabled=($_POST[\"superadmin\"]?'':' disabled');\n            print '<input type=\"checkbox\" name=\"superadmin\" value=\"1\"'.$checked.$disabled.' /> '.$langs->trans(\"SuperAdministrator\");\n        }\n        print \"</td></tr>\\n\";\n    }\n\n    // Type\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Type\").'</td>';\n    print '<td>';\n    print $html->textwithpicto($langs->trans(\"Internal\"),$langs->trans(\"InternalExternalDesc\"));\n    print '</td></tr>';\n\n    // Tel\n    print '<tr><td valign=\"top\">'.$langs->trans(\"PhonePro\").'</td>';\n    print '<td>';\n    if ($ldap_phone)\n    {\n        print '<input type=\"hidden\" name=\"office_phone\" value=\"'.$ldap_phone.'\">';\n        print $ldap_phone;\n    }\n    else\n    {\n        print '<input size=\"20\" type=\"text\" name=\"office_phone\" value=\"'.$_POST[\"office_phone\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Tel portable\n    print '<tr><td valign=\"top\">'.$langs->trans(\"PhoneMobile\").'</td>';\n    print '<td>';\n    if ($ldap_mobile)\n    {\n        print '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$ldap_mobile.'\">';\n        print $ldap_mobile;\n    }\n    else\n    {\n        print '<input size=\"20\" type=\"text\" name=\"user_mobile\" value=\"'.$_POST[\"user_mobile\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Fax\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Fax\").'</td>';\n    print '<td>';\n    if ($ldap_fax)\n    {\n        print '<input type=\"hidden\" name=\"office_fax\" value=\"'.$ldap_fax.'\">';\n        print $ldap_fax;\n    }\n    else\n    {\n        print '<input size=\"20\" type=\"text\" name=\"office_fax\" value=\"'.$_POST[\"office_fax\"].'\">';\n    }\n    print '</td></tr>';\n\n    // EMail\n    print '<tr><td valign=\"top\"'.($conf->global->USER_MAIL_REQUIRED?' class=\"fieldrequired\"':'').'>'.$langs->trans(\"EMail\").'</td>';\n    print '<td>';\n    if ($ldap_mail)\n    {\n        print '<input type=\"hidden\" name=\"email\" value=\"'.$ldap_mail.'\">';\n        print $ldap_mail;\n    }\n    else\n    {\n        print '<input size=\"40\" type=\"text\" name=\"email\" value=\"'.$_POST[\"email\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Signature\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Signature\").'</td>';\n    print '<td>';\n    print '<textarea rows=\"'.ROWS_5.'\" cols=\"90\" name=\"signature\">'.$_POST[\"signature\"].'</textarea>';\n    print '</td></tr>';\n\n    // Note\n    print '<tr><td valign=\"top\">';\n    print $langs->trans(\"Note\");\n    print '</td><td>';\n    if ($conf->fckeditor->enabled && $conf->global->FCKEDITOR_ENABLE_USER)\n    {\n        require_once(DOL_DOCUMENT_ROOT.\"/lib/doleditor.class.php\");\n        $doleditor=new DolEditor('note','','',180,'dolibarr_notes','',false);\n        $doleditor->Create();\n    }\n    else\n    {\n        print '<textarea class=\"flat\" name=\"note\" rows=\"'.ROWS_4.'\" cols=\"90\">';\n        print $_POST[\"note\"];\n        print '</textarea>';\n    }\n    print \"</td></tr>\\n\";\n\n    // Autres caracteristiques issus des autres modules\n\n    // Module Webcalendar\n    if ($conf->webcalendar->enabled)\n    {\n        print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"LoginWebcal\").'</td>';\n        print '<td><input size=\"30\" type=\"text\" name=\"webcal_login\" value=\"'.$_POST[\"webcal_login\"].'\"></td></tr>';\n    }\n\n    // Module Phenix\n    if ($conf->phenix->enabled)\n    {\n        print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"LoginPenix\").'</td>';\n        print '<td><input size=\"30\" type=\"text\" name=\"phenix_login\" value=\"'.$_POST[\"phenix_login\"].'\"></td></tr>';\n        print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"PassPenix\").'</td>';\n        print '<td><input size=\"30\" type=\"text\" name=\"phenix_pass\" value=\"'.$_POST[\"phenix_pass\"].'\"></td></tr>';\n    }\n\n    print \"<tr>\".'<td align=\"center\" colspan=\"2\"><input class=\"button\" value=\"'.$langs->trans(\"CreateUser\").'\" type=\"submit\"></td></tr>';\n    print \"</table>\\n\";\n    print \"</form>\";\n}\nelse\n{\n    /* ************************************************************************** */\n    /*                                                                            */\n    /* Visu et edition                                                            */\n    /*                                                                            */\n    /* ************************************************************************** */\n\n    if ($_GET[\"id\"])\n    {\n        $fuser = new User($db);\n        $fuser->fetch($_GET[\"id\"]);\n\n        // Connexion ldap\n        // pour recuperer passDoNotExpire et userChangePassNextLogon\n        if ($conf->ldap->enabled && $fuser->ldap_sid)\n        {\n            $ldap = new Ldap();\n            $result=$ldap->connect_bind();\n            if ($result > 0)\n            {\n                $userSearchFilter = '('.$conf->global->LDAP_FILTER_CONNECTION.'('.$this->getUserIdentifier().'='.$fuser->login.'))';\n                $entries = $ldap->fetch($fuser->login,$userSearchFilter);\n                if (! $entries)\n                {\n                    $message .= $ldap->error;\n                }\n\n                $passDoNotExpire = 0;\n                $userChangePassNextLogon = 0;\n                $userDisabled = 0;\n                $statutUACF = '';\n\n                //On verifie les options du compte\n                if (count($ldap->uacf) > 0)\n                {\n                    foreach ($ldap->uacf as $key => $statut)\n                    {\n                        if ($key == 65536)\n                        {\n                            $passDoNotExpire = 1;\n                            $statutUACF = $statut;\n                        }\n                    }\n                }\n                else\n                {\n                    $userDisabled = 1;\n                    $statutUACF = \"ACCOUNTDISABLE\";\n                }\n\n                if ($ldap->pwdlastset == 0)\n                {\n                    $userChangePassNextLogon = 1;\n                }\n            }\n        }\n\n        /*\n         * Affichage onglets\n         */\n        $head = user_prepare_head($fuser);\n\n        $title = $langs->trans(\"User\");\n        dol_fiche_head($head, 'user', $title, 0, 'user');\n\n        /*\n         * Confirmation reinitialisation mot de passe\n         */\n        if ($action == 'password')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"ReinitPassword\"),$langs->trans(\"ConfirmReinitPassword\",$fuser->login),\"confirm_password\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        /*\n         * Confirmation envoi mot de passe\n         */\n        if ($action == 'passwordsend')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"SendNewPassword\"),$langs->trans(\"ConfirmSendNewPassword\",$fuser->login),\"confirm_passwordsend\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        /*\n         * Confirmation desactivation\n         */\n        if ($action == 'disable')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"DisableAUser\"),$langs->trans(\"ConfirmDisableUser\",$fuser->login),\"confirm_disable\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        /*\n         * Confirmation activation\n         */\n        if ($action == 'enable')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"EnableAUser\"),$langs->trans(\"ConfirmEnableUser\",$fuser->login),\"confirm_enable\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        /*\n         * Confirmation suppression\n         */\n        if ($action == 'delete')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"DeleteAUser\"),$langs->trans(\"ConfirmDeleteUser\",$fuser->login),\"confirm_delete\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        dol_htmloutput_mesg($message);\n\n        /*\n         * Fiche en mode visu\n         */\n        if ($_GET[\"action\"] != 'edit')\n        {\n            print '<table class=\"border\" width=\"100%\">';\n\n            // Ref\n            print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Ref\").'</td>';\n            print '<td colspan=\"2\">';\n            print $html->showrefnav($fuser,'id','',$user->rights->user->user->lire || $user->admin);\n            print '</td>';\n            print '</tr>'.\"\\n\";\n\n            $rowspan=14;\n            if ($conf->societe->enabled) $rowspan++;\n            if ($conf->adherent->enabled) $rowspan++;\n            if ($conf->webcalendar->enabled) $rowspan++;\n            if ($conf->phenix->enabled) $rowspan+=2;\n\n            // Lastname\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Lastname\").'</td>';\n            print '<td>'.$fuser->nom.'</td>';\n\n            // Photo\n            print '<td align=\"center\" valign=\"middle\" width=\"25%\" rowspan=\"'.$rowspan.'\">';\n            print $html->showphoto('userphoto',$fuser,100);\n            print '</td>';\n\n            print '</tr>'.\"\\n\";\n\n            // Firstname\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Firstname\").'</td>';\n            print '<td>'.$fuser->prenom.'</td>';\n            print '</tr>'.\"\\n\";\n\n            // Login\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Login\").'</td>';\n            if ($fuser->ldap_sid && $fuser->statut==0)\n            {\n                print '<td class=\"error\">'.$langs->trans(\"LoginAccountDisableInDolibarr\").'</td>';\n            }\n            else\n            {\n                print '<td>'.$fuser->login.'</td>';\n            }\n            print '</tr>'.\"\\n\";\n\n            // Password\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Password\").'</td>';\n            if ($fuser->ldap_sid)\n            {\n                if ($passDoNotExpire)\n                {\n                    print '<td>'.$langs->trans(\"LdapUacf_\".$statutUACF).'</td>';\n                }\n                else if($userChangePassNextLogon)\n                {\n                    print '<td class=\"warning\">'.$langs->trans(\"UserMustChangePassNextLogon\",$ldap->domainFQDN).'</td>';\n                }\n                else if($userDisabled)\n                {\n                    print '<td class=\"warning\">'.$langs->trans(\"LdapUacf_\".$statutUACF,$ldap->domainFQDN).'</td>';\n                }\n                else\n                {\n                    print '<td>'.$langs->trans(\"DomainPassword\").'</td>';\n                }\n            }\n            else\n            {\n                print '<td>';\n                if ($fuser->pass) print preg_replace('/./i','*',$fuser->pass);\n                else\n                {\n                    if ($user->admin) print $langs->trans(\"Crypted\").': '.$fuser->pass_indatabase_crypted;\n                    else print $langs->trans(\"Hidden\");\n                }\n                print \"</td>\";\n            }\n            print '</tr>'.\"\\n\";\n\n            // Administrator\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Administrator\").'</td><td>';\n            if (! empty($conf->multicompany->enabled) && $fuser->admin && ! $fuser->entity)\n            {\n                print $html->textwithpicto(yn($fuser->admin),$langs->trans(\"SuperAdministratorDesc\"),1,\"superadmin\");\n            }\n            else if ($fuser->admin)\n            {\n                print $html->textwithpicto(yn($fuser->admin),$langs->trans(\"AdministratorDesc\"),1,\"admin\");\n            }\n            else\n            {\n                print yn($fuser->admin);\n            }\n            print '</td></tr>'.\"\\n\";\n\n            // Type\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Type\").'</td><td>';\n            if ($fuser->societe_id)\n            {\n                print $html->textwithpicto($langs->trans(\"External\"),$langs->trans(\"InternalExternalDesc\"));\n            }\n            else if ($fuser->ldap_sid)\n            {\n                print $langs->trans(\"DomainUser\",$ldap->domainFQDN);\n            }\n            else\n            {\n                print $html->textwithpicto($langs->trans(\"Internal\"),$langs->trans(\"InternalExternalDesc\"));\n            }\n            print '</td></tr>'.\"\\n\";\n\n            // Tel pro\n            print '<tr><td valign=\"top\">'.$langs->trans(\"PhonePro\").'</td>';\n            print '<td>'.dol_print_phone($fuser->office_phone,'',0,0,1).'</td>';\n            print '</tr>'.\"\\n\";\n\n            // Tel mobile\n            print '<tr><td valign=\"top\">'.$langs->trans(\"PhoneMobile\").'</td>';\n            print '<td>'.dol_print_phone($fuser->user_mobile,'',0,0,1).'</td>';\n            print '</tr>'.\"\\n\";\n\n            // Fax\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Fax\").'</td>';\n            print '<td>'.dol_print_phone($fuser->office_fax,'',0,0,1).'</td>';\n            print '</tr>'.\"\\n\";\n\n            // EMail\n            print '<tr><td valign=\"top\">'.$langs->trans(\"EMail\").'</td>';\n            print '<td>'.dol_print_email($fuser->email,0,0,1).'</td>';\n            print \"</tr>\\n\";\n\n            // Signature\n            print '<tr><td valign=\"top\">'.$langs->trans('Signature').'</td>';\n            print '<td>'.$fuser->signature.'</td>';\n            print \"</tr>\\n\";\n\n            // Statut\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Status\").'</td>';\n            print '<td>';\n            print $fuser->getLibStatut(4);\n            print '</td>';\n            print '</tr>'.\"\\n\";\n\n            print '<tr><td valign=\"top\">'.$langs->trans(\"LastConnexion\").'</td>';\n            print '<td>'.dol_print_date($fuser->datelastlogin,\"dayhour\").'</td>';\n            print \"</tr>\\n\";\n\n            print '<tr><td valign=\"top\">'.$langs->trans(\"PreviousConnexion\").'</td>';\n            print '<td>'.dol_print_date($fuser->datepreviouslogin,\"dayhour\").'</td>';\n            print \"</tr>\\n\";\n\n\n            if (preg_match('/myopenid/',$conf->authmode))\n            {\n                print '<tr><td valign=\"top\">'.$langs->trans(\"url_openid\").'</td>';\n                print '<td>'.$fuser->openid.'</td>';\n                print \"</tr>\\n\";\n            }\n            // Autres caracteristiques issus des autres modules\n\n            // Module Webcalendar\n            if ($conf->webcalendar->enabled)\n            {\n                $langs->load(\"other\");\n                print '<tr><td valign=\"top\">'.$langs->trans(\"LoginWebcal\").'</td>';\n                print '<td>'.$fuser->webcal_login.'&nbsp;</td>';\n                print '</tr>'.\"\\n\";\n            }\n\n            // Module Phenix\n            if ($conf->phenix->enabled)\n            {\n                $langs->load(\"other\");\n                print '<tr><td valign=\"top\">'.$langs->trans(\"LoginPhenix\").'</td>';\n                print '<td>'.$fuser->phenix_login.'&nbsp;</td>';\n                print \"</tr>\\n\";\n                print '<tr><td valign=\"top\">'.$langs->trans(\"PassPhenix\").'</td>';\n                print '<td>'.preg_replace('/./i','*',$fuser->phenix_pass_crypted).'&nbsp;</td>';\n                print '</tr>'.\"\\n\";\n            }\n\n            // Company / Contact\n            if ($conf->societe->enabled)\n            {\n                print '<tr><td valign=\"top\">'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n                print '<td>';\n                if ($fuser->societe_id > 0)\n                {\n                    $societe = new Societe($db);\n                    $societe->fetch($fuser->societe_id);\n                    print $societe->getNomUrl(1,'');\n                }\n                else\n                {\n                    print $langs->trans(\"ThisUserIsNot\");\n                }\n                if ($fuser->contact_id)\n                {\n                    $contact = new Contact($db);\n                    $contact->fetch($fuser->contact_id);\n                    if ($fuser->societe_id > 0) print ' / ';\n                    else print '<br>';\n                    print '<a href=\"'.DOL_URL_ROOT.'/contact/fiche.php?id='.$fuser->contact_id.'\">'.img_object($langs->trans(\"ShowContact\"),'contact').' '.dol_trunc($contact->getFullName($langs),32).'</a>';\n                }\n                print '</td>';\n                print '</tr>'.\"\\n\";\n            }\n\n            // Module Adherent\n            if ($conf->adherent->enabled)\n            {\n                $langs->load(\"members\");\n                print '<tr><td valign=\"top\">'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n                print '<td>';\n                if ($fuser->fk_member)\n                {\n                    $adh=new Adherent($db);\n                    $adh->fetch($fuser->fk_member);\n                    $adh->ref=$adh->getFullname($langs);\t// Force to show login instead of id\n                    print $adh->getNomUrl(1);\n                }\n                else\n                {\n                    print $langs->trans(\"UserNotLinkedToMember\");\n                }\n                print '</td>';\n                print '</tr>'.\"\\n\";\n            }\n\n            print \"</table>\\n\";\n\n            print \"</div>\\n\";\n\n\n            /*\n             * Barre d'actions\n             */\n\n            print '<div class=\"tabsAction\">';\n\n            if ($caneditfield &&\n            (empty($conf->multicompany->enabled) || (($fuser->entity == $conf->entity) || $fuser->entity == $user->entity)) )\n            {\n                if (! empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED))\n                {\n                    print '<a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"DisabledInMonoUserMode\")).'\">'.$langs->trans(\"Modify\").'</a>';\n                }\n                else\n                {\n                    print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=edit\">'.$langs->trans(\"Modify\").'</a>';\n                }\n            }\n            elseif ($caneditpassword && ! $fuser->ldap_sid &&\n            (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n            {\n                print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=edit\">'.$langs->trans(\"EditPassword\").'</a>';\n            }\n\n            // Si on a un gestionnaire de generation de mot de passe actif\n            if ($conf->global->USER_PASSWORD_GENERATED != 'none')\n            {\n                if (($user->id != $_GET[\"id\"] && $caneditpassword) && $fuser->login && !$fuser->ldap_sid &&\n                (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)))\n                {\n                    print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=password\">'.$langs->trans(\"ReinitPassword\").'</a>';\n                }\n\n                if (($user->id != $_GET[\"id\"] && $caneditpassword) && $fuser->login && !$fuser->ldap_sid &&\n                (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n                {\n                    if ($fuser->email) print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=passwordsend\">'.$langs->trans(\"SendNewPassword\").'</a>';\n                    else print '<a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans(\"SendNewPassword\").'</a>';\n                }\n            }\n\n            // Activer\n            if ($user->id <> $_GET[\"id\"] && $candisableuser && $fuser->statut == 0 &&\n            (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n            {\n                print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=enable\">'.$langs->trans(\"Reactivate\").'</a>';\n            }\n            // Desactiver\n            if ($user->id <> $_GET[\"id\"] && $candisableuser && $fuser->statut == 1 &&\n            (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n            {\n                print '<a class=\"butActionDelete\" href=\"fiche.php?action=disable&amp;id='.$fuser->id.'\">'.$langs->trans(\"DisableUser\").'</a>';\n            }\n            // Delete\n            if ($user->id <> $_GET[\"id\"] && $candisableuser &&\n            (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n            {\n                print '<a class=\"butActionDelete\" href=\"fiche.php?action=delete&amp;id='.$fuser->id.'\">'.$langs->trans(\"DeleteUser\").'</a>';\n            }\n\n            print \"</div>\\n\";\n            print \"<br>\\n\";\n\n\n\n            /*\n             * Liste des groupes dans lequel est l'utilisateur\n             */\n\n            if ($canreadgroup)\n            {\n                print_fiche_titre($langs->trans(\"ListOfGroupsForUser\"),'','');\n\n                // On selectionne les groupes auquel fait parti le user\n                $exclude = array();\n\n                $usergroup=new UserGroup($db);\n                $groupslist = $usergroup->listGroupsForUser($fuser->id);\n\n                if (! empty($groupslist))\n                {\n                    foreach($groupslist as $groupforuser)\n                    {\n                        $exclude[]=$groupforuser->id;\n                    }\n                }\n\n                if ($caneditgroup)\n                {\n                    $form = new Form($db);\n                    print '<form action=\"fiche.php?id='.$_GET[\"id\"].'\" method=\"post\">'.\"\\n\";\n                    print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n                    print '<input type=\"hidden\" name=\"action\" value=\"addgroup\">';\n                    print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n                    print '<table class=\"noborder\" width=\"100%\">'.\"\\n\";\n                    print '<tr class=\"liste_titre\"><td class=\"liste_titre\" width=\"25%\">'.$langs->trans(\"GroupsToAdd\").'</td>'.\"\\n\";\n                    print '<td>';\n                    print $form->select_dolgroups('','group',1,$exclude);\n                    print ' &nbsp; ';\n                    print '<input type=\"submit\" class=\"button\" value=\"'.$langs->trans(\"Add\").'\">';\n                    print '</td></tr>'.\"\\n\";\n                    print '</table></form>'.\"\\n\";\n\n                    print '<br>';\n                }\n\n                /*\n                 * Groupes affectes\n                 */\n                print '<table class=\"noborder\" width=\"100%\">';\n                print '<tr class=\"liste_titre\">';\n                print '<td class=\"liste_titre\" width=\"25%\">'.$langs->trans(\"Groups\").'</td>';\n                print \"<td>&nbsp;</td></tr>\\n\";\n\n                if (! empty($groupslist))\n                {\n                    $var=true;\n\n                    foreach($groupslist as $group)\n                    {\n                        $var=!$var;\n\n                        print \"<tr \".$bc[$var].\">\";\n                        print '<td>';\n                        if ($caneditgroup)\n                        {\n                            print '<a href=\"'.DOL_URL_ROOT.'/user/group/fiche.php?id='.$group->id.'\">'.img_object($langs->trans(\"ShowGroup\"),\"group\").' '.$group->nom.'</a>';\n                        }\n                        else\n                        {\n                            print img_object($langs->trans(\"ShowGroup\"),\"group\").' '.$group->nom;\n                        }\n                        print '</td>';\n                        print '<td align=\"right\">';\n\n                        if ($caneditgroup)\n                        {\n                            print '<a href=\"'.$_SERVER['PHP_SELF'].'?id='.$fuser->id.'&amp;action=removegroup&amp;group='.$group->id.'&amp;entity='.$group->usergroup_entity.'\">';\n                            print img_delete($langs->trans(\"RemoveFromGroup\"));\n                        }\n                        else\n                        {\n                            print \"&nbsp;\";\n                        }\n                        print \"</td></tr>\\n\";\n                    }\n                }\n                else\n                {\n                    print '<tr '.$bc[false].'><td colspan=2>'.$langs->trans(\"None\").'</td></tr>';\n                }\n\n                print \"</table>\";\n                print \"<br>\";\n            }\n        }\n\n\n        /*\n         * Fiche en mode edition\n         */\n\n        if ($_GET[\"action\"] == 'edit' && ($canedituser || ($user->id == $fuser->id)))\n        {\n\n            print '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$fuser->id.'\" method=\"POST\" name=\"updateuser\" enctype=\"multipart/form-data\">';\n            print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n            print '<input type=\"hidden\" name=\"action\" value=\"update\">';\n            print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n            print '<table width=\"100%\" class=\"border\">';\n\n            $rowspan=12;\n            if ($conf->societe->enabled) $rowspan++;\n            if ($conf->adherent->enabled) $rowspan++;\n            if ($conf->webcalendar->enabled) $rowspan++;\n            if ($conf->phenix->enabled) $rowspan+=2;\n\n            print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Ref\").'</td>';\n            print '<td colspan=\"2\">';\n            print $fuser->id;\n            print '</td>';\n            print '</tr>';\n\n            // Lastname\n            print \"<tr>\";\n            print '<td valign=\"top\" class=\"fieldrequired\">'.$langs->trans(\"Lastname\").'</td>';\n            print '<td>';\n            if ($caneditfield && !$fuser->ldap_sid)\n            {\n                print '<input size=\"30\" type=\"text\" class=\"flat\" name=\"nom\" value=\"'.$fuser->nom.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"nom\" value=\"'.$fuser->nom.'\">';\n                print $fuser->nom;\n            }\n            print '</td>';\n            // Photo\n            print '<td align=\"center\" valign=\"middle\" width=\"25%\" rowspan=\"'.$rowspan.'\">';\n            print $html->showphoto('userphoto',$fuser);\n            if ($caneditfield)\n            {\n                if ($fuser->photo) print \"<br>\\n\";\n                print '<table class=\"nobordernopadding\">';\n                if ($fuser->photo) print '<tr><td align=\"center\"><input type=\"checkbox\" class=\"flat\" name=\"deletephoto\" id=\"photodelete\"> '.$langs->trans(\"Delete\").'<br><br></td></tr>';\n                print '<tr><td>'.$langs->trans(\"PhotoFile\").'</td></tr>';\n                print '<tr><td><input type=\"file\" class=\"flat\" name=\"photo\" id=\"photoinput\"></td></tr>';\n                print '</table>';\n            }\n            print '</td>';\n            print '</tr>';\n\n            // Firstname\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"Firstname\").'</td>';\n            print '<td>';\n            if ($caneditfield && !$fuser->ldap_sid)\n            {\n                print '<input size=\"30\" type=\"text\" class=\"flat\" name=\"prenom\" value=\"'.$fuser->prenom.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"prenom\" value=\"'.$fuser->prenom.'\">';\n                print $fuser->prenom;\n            }\n            print '</td></tr>';\n\n            // Login\n            print \"<tr>\".'<td valign=\"top\"><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n            print '<td>';\n            if ($user->admin  && !$fuser->ldap_sid)\n            {\n                print '<input size=\"12\" maxlength=\"24\" type=\"text\" class=\"flat\" name=\"login\" value=\"'.$fuser->login.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"login\" value=\"'.$fuser->login.'\">';\n                print $fuser->login;\n            }\n            print '</td>';\n            print '</tr>';\n\n            // Pass\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Password\").'</td>';\n            print '<td>';\n            if ($fuser->ldap_sid)\n            {\n                $text=$langs->trans(\"DomainPassword\");\n            }\n            else if ($caneditpassword)\n            {\n                $text='<input size=\"12\" maxlength=\"32\" type=\"password\" class=\"flat\" name=\"password\" value=\"'.$fuser->pass.'\">';\n                if ($dolibarr_main_authentication && $dolibarr_main_authentication == 'http')\n                {\n                    $text=$html->textwithpicto($text,$langs->trans(\"DolibarrInHttpAuthenticationSoPasswordUseless\",$dolibarr_main_authentication),1,'warning');\n                }\n            }\n            else\n            {\n                $text=preg_replace('/./i','*',$fuser->pass);\n            }\n            print $text;\n            print \"</td></tr>\\n\";\n\n            // Administrator\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"Administrator\").'</td>';\n            if ($fuser->societe_id > 0)\n            {\n                print '<td>';\n                print '<input type=\"hidden\" name=\"admin\" value=\"'.$fuser->admin.'\">'.yn($fuser->admin);\n                print ' ('.$langs->trans(\"ExternalUser\").')';\n                print '</td></tr>';\n            }\n            else\n            {\n                print '<td>';\n                $nbSuperAdmin = $user->getNbOfUsers('superadmin');\n                if ($user->admin\n                && ($user->id != $fuser->id)                    // Don't downgrade ourself\n                && ($fuser->entity > 0 || $nbSuperAdmin > 1)    // Don't downgrade a superadmin if alone\n                )\n                {\n                    print $form->selectyesno('admin',$fuser->admin,1);\n\n                    if (! empty($conf->multicompany->enabled) && ! $user->entity)\n                    {\n                        if ($conf->use_javascript_ajax)\n                        {\n                            print '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t\t\t$(function() {\n\t\t\t\t\t\t\t\t\t\tvar admin = $(\"select[name=admin]\");\n\t\t\t\t\t\t\t\t\t\tif (admin.val() == 0) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.attr(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.attr(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$(\"select[name=admin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\t if ( $(this).val() == 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t \t\t.attr(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t \t\t.attr(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t \t\t.attr(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t</script>';\n                        }\n\n                        $checked=(($fuser->admin && ! $fuser->entity) ? ' checked' : '');\n                        print '<input type=\"checkbox\" name=\"superadmin\" value=\"1\"'.$checked.' /> '.$langs->trans(\"SuperAdministrator\");\n                    }\n                }\n                else\n                {\n                    $yn = yn($fuser->admin);\n                    print '<input type=\"hidden\" name=\"admin\" value=\"'.$fuser->admin.'\">';\n                    if (! empty($conf->multicompany->enabled) && ! $fuser->entity) print $html->textwithpicto($yn,$langs->trans(\"DontDowngradeSuperAdmin\"),1,'warning');\n                    else print $yn;\n                }\n                print '</td></tr>';\n            }\n\n            // Type\n            print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Type\").'</td>';\n            print '<td>';\n            if ($fuser->societe_id)\n            {\n                print $langs->trans(\"External\");\n            }\n            else if ($fuser->ldap_sid)\n            {\n                print $langs->trans(\"DomainUser\");\n            }\n            else\n            {\n                print $langs->trans(\"Internal\");\n            }\n            print '</td></tr>';\n\n            // Tel pro\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"PhonePro\").'</td>';\n            print '<td>';\n            if ($caneditfield  && !$fuser->ldap_sid)\n            {\n                print '<input size=\"20\" type=\"text\" name=\"office_phone\" class=\"flat\" value=\"'.$fuser->office_phone.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"office_phone\" value=\"'.$fuser->office_phone.'\">';\n                print $fuser->office_phone;\n            }\n            print '</td></tr>';\n\n            // Tel mobile\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"PhoneMobile\").'</td>';\n            print '<td>';\n            if ($caneditfield && !$fuser->ldap_sid)\n            {\n                print '<input size=\"20\" type=\"text\" name=\"user_mobile\" class=\"flat\" value=\"'.$fuser->user_mobile.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$fuser->user_mobile.'\">';\n                print $fuser->user_mobile;\n            }\n            print '</td></tr>';\n\n            // Fax\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"Fax\").'</td>';\n            print '<td>';\n            if ($caneditfield  && !$fuser->ldap_sid)\n            {\n                print '<input size=\"20\" type=\"text\" name=\"office_fax\" class=\"flat\" value=\"'.$fuser->office_fax.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"office_fax\" value=\"'.$fuser->office_fax.'\">';\n                print $fuser->office_fax;\n            }\n            print '</td></tr>';\n\n            // EMail\n            print \"<tr>\".'<td valign=\"top\"'.($conf->global->USER_MAIL_REQUIRED?' class=\"fieldrequired\"':'').'>'.$langs->trans(\"EMail\").'</td>';\n            print '<td>';\n            if ($caneditfield  && !$fuser->ldap_sid)\n            {\n                print '<input size=\"40\" type=\"text\" name=\"email\" class=\"flat\" value=\"'.$fuser->email.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"email\" value=\"'.$fuser->email.'\">';\n                print $fuser->email;\n            }\n            print '</td></tr>';\n\n            // Signature\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"Signature\").'</td>';\n            print '<td>';\n            print '<textarea name=\"signature\" rows=\"5\" cols=\"90\">'.dol_htmlentitiesbr_decode($fuser->signature).'</textarea>';\n            print '</td></tr>';\n\n            // openid\n            if (preg_match('/myopenid/',$conf->authmode))\n            {\n                print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"url_openid\").'</td>';\n                print '<td>';\n                if ($caneditfield  && !$fuser->ldap_sid)\n                {\n                    print '<input size=\"40\" type=\"text\" name=\"openid\" class=\"flat\" value=\"'.$fuser->openid.'\">';\n                }\n                else\n                {\n                    print '<input type=\"hidden\" name=\"openid\" value=\"'.$fuser->openid.'\">';\n                    print $fuser->openid;\n                }\n                print '</td></tr>';\n            }\n\n            // Statut\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Status\").'</td>';\n            print '<td>';\n            print $fuser->getLibStatut(4);\n            print '</td></tr>';\n\n            // Autres caracteristiques issus des autres modules\n\n            // Module Webcalendar\n            if ($conf->webcalendar->enabled)\n            {\n                $langs->load(\"other\");\n                print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"LoginWebcal\").'</td>';\n                print '<td>';\n                if ($caneditfield) print '<input size=\"30\" type=\"text\" class=\"flat\" name=\"webcal_login\" value=\"'.$fuser->webcal_login.'\">';\n                else print $fuser->webcal_login;\n                print '</td></tr>';\n            }\n\n            // Module Phenix\n            if ($conf->phenix->enabled)\n            {\n                $langs->load(\"other\");\n                print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"LoginPhenix\").'</td>';\n                print '<td>';\n                if ($caneditfield) print '<input size=\"30\" type=\"text\" class=\"flat\" name=\"phenix_login\" value=\"'.$fuser->phenix_login.'\">';\n                else print $fuser->phenix_login;\n                print '</td></tr>';\n                print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"PassPhenix\").'</td>';\n                print '<td>';\n                if ($caneditfield) print '<input size=\"30\" type=\"password\" class=\"flat\" name=\"phenix_pass\" value=\"'.$fuser->phenix_pass_crypted.'\">';\n                else print preg_replace('/./i','*',$fuser->phenix_pass_crypted);\n                print '</td></tr>';\n            }\n\n            // Company / Contact\n            if ($conf->societe->enabled)\n            {\n                print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n                print '<td>';\n                if ($fuser->societe_id > 0)\n                {\n                    $societe = new Societe($db);\n                    $societe->fetch($fuser->societe_id);\n                    print $societe->getNomUrl(1,'');\n                    if ($fuser->contact_id)\n                    {\n                        $contact = new Contact($db);\n                        $contact->fetch($fuser->contact_id);\n                        print ' / <a href=\"'.DOL_URL_ROOT.'/contact/fiche.php?id='.$fuser->contact_id.'\">'.img_object($langs->trans(\"ShowContact\"),'contact').' '.dol_trunc($contact->getFullName($langs),32).'</a>';\n                    }\n                }\n                else\n                {\n                    print $langs->trans(\"ThisUserIsNot\");\n                }\n                print '</td>';\n                print \"</tr>\\n\";\n            }\n\n            // Module Adherent\n            if ($conf->adherent->enabled)\n            {\n                $langs->load(\"members\");\n                print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n                print '<td>';\n                if ($fuser->fk_member)\n                {\n                    $adh=new Adherent($db);\n                    $adh->fetch($fuser->fk_member);\n                    $adh->ref=$adh->login;\t// Force to show login instead of id\n                    print $adh->getNomUrl(1);\n                }\n                else\n                {\n                    print $langs->trans(\"UserNotLinkedToMember\");\n                }\n                print '</td>';\n                print \"</tr>\\n\";\n            }\n\n            print '</table>';\n\n            print '<br><center>';\n            print '<input value=\"'.$langs->trans(\"Save\").'\" class=\"button\" type=\"submit\" name=\"save\">';\n            print ' &nbsp; ';\n            print '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button\" type=\"submit\" name=\"cancel\">';\n            print '</center>';\n\n            print '</form>';\n\n            print '</div>';\n        }\n\n        $ldap->close;\n    }\n}\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:43 $ - $Revision: 1.275 $');\n\n\n\n/**\n * Return if var element is ok\n * @param   string      $element    Variable to check\n * @return  boolean                 Return true of variable is not empty\n */\nfunction dolValidElement($element)\n{\n    return (trim($element) != '');\n}\n\n?>\n", "<?php\n/* Copyright (C) 2002-2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2011 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2010 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *      \\file       htdocs/user/index.php\n * \t\t\\ingroup\tcore\n *      \\brief      Page of users\n *      \\version    $Id: index.php,v 1.51 2011/07/31 23:19:42 eldy Exp $\n */\n\nrequire(\"../main.inc.php\");\n\nif (! $user->rights->user->user->lire && ! $user->admin) accessforbidden();\n\n$langs->load(\"users\");\n$langs->load(\"companies\");\n\n// Security check (for external users)\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n\n$sall=isset($_GET[\"sall\"])?$_GET[\"sall\"]:$_POST[\"sall\"];\n\n$sortfield = GETPOST(\"sortfield\",'alpha');\n$sortorder = GETPOST(\"sortorder\",'alpha');\n$page = GETPOST(\"page\",'int');\nif ($page == -1) { $page = 0; }\n$offset = $conf->liste_limit * $page;\n$pageprev = $page - 1;\n$pagenext = $page + 1;\n$limit = $conf->liste_limit;\nif (! $sortfield) $sortfield=\"u.login\";\nif (! $sortorder) $sortorder=\"ASC\";\n\n$userstatic=new User($db);\n$companystatic = new Societe($db);\n\n/*\n * View\n */\n\nllxHeader();\n\nprint_fiche_titre($langs->trans(\"ListOfUsers\"));\n\n$sql = \"SELECT u.rowid, u.name, u.firstname, u.admin, u.fk_societe, u.login,\";\n$sql.= \" u.datec,\";\n$sql.= \" u.tms as datem,\";\n$sql.= \" u.datelastlogin,\";\n$sql.= \" u.ldap_sid, u.statut, u.entity,\";\n$sql.= \" s.nom, s.canvas\";\n$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n$sql.= \" LEFT JOIN \".MAIN_DB_PREFIX.\"societe as s ON u.fk_societe = s.rowid\";\n$sql.= \" WHERE u.entity IN (0,\".$conf->entity.\")\";\nif (!empty($socid)) $sql.= \" AND u.fk_societe = \".$socid;\nif ($_POST[\"search_user\"])\n{\n    $sql.= \" AND (u.login like '%\".$_POST[\"search_user\"].\"%' OR u.name like '%\".$_POST[\"search_user\"].\"%' OR u.firstname like '%\".$_POST[\"search_user\"].\"%')\";\n}\nif ($sall) $sql.= \" AND (u.login like '%\".$sall.\"%' OR u.name like '%\".$sall.\"%' OR u.firstname like '%\".$sall.\"%' OR u.email like '%\".$sall.\"%' OR u.note like '%\".$sall.\"%')\";\nif ($sortfield) $sql.=\" ORDER BY $sortfield $sortorder\";\n\n$result = $db->query($sql);\nif ($result)\n{\n    $num = $db->num_rows($result);\n    $i = 0;\n\n    $param=\"search_user=$search_user&amp;sall=$sall\";\n    print \"<table class=\\\"noborder\\\" width=\\\"100%\\\">\";\n    print '<tr class=\"liste_titre\">';\n    print_liste_field_titre($langs->trans(\"Login\"),\"index.php\",\"u.login\",$param,\"\",\"\",$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"LastName\"),\"index.php\",\"u.name\",$param,\"\",\"\",$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"FirstName\"),\"index.php\",\"u.firstname\",$param,\"\",\"\",$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"Company\"),\"index.php\",\"u.fk_societe\",$param,\"\",\"\",$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"DateCreation\"),\"index.php\",\"u.datec\",$param,\"\",'align=\"center\"',$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"LastConnexion\"),\"index.php\",\"u.datelastlogin\",$param,\"\",'align=\"center\"',$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"Status\"),\"index.php\",\"u.status\",$param,\"\",'align=\"right\"',$sortfield,$sortorder);\n    print \"</tr>\\n\";\n    $var=True;\n    while ($i < $num)\n    {\n        $obj = $db->fetch_object($result);\n        $var=!$var;\n\n        print \"<tr $bc[$var]>\";\n        print '<td><a href=\"fiche.php?id='.$obj->rowid.'\">'.img_object($langs->trans(\"ShowUser\"),\"user\").' '.$obj->login.'</a>';\n        if ($conf->global->MAIN_MODULE_MULTICOMPANY && $obj->admin && ! $obj->entity)\n        {\n          \tprint img_redstar($langs->trans(\"SuperAdministrator\"));\n        }\n        else if ($obj->admin)\n        {\n        \tprint img_picto($langs->trans(\"Administrator\"),'star');\n        }\n        print '</td>';\n        print '<td>'.ucfirst($obj->name).'</td>';\n        print '<td>'.ucfirst($obj->firstname).'</td>';\n        print \"<td>\";\n        if ($obj->fk_societe)\n        {\n            $companystatic->id=$obj->fk_societe;\n            $companystatic->nom=$obj->nom;\n            $companystatic->canvas=$obj->canvas;\n            print $companystatic->getNomUrl(1);\n        }\n        else if ($obj->ldap_sid)\n        {\n        \tprint $langs->trans(\"DomainUser\");\n        }\n        else print $langs->trans(\"InternalUser\");\n        print '</td>';\n\n        // Date creation\n        print '<td nowrap=\"nowrap\" align=\"center\">'.dol_print_date($db->jdate($obj->datec),\"dayhour\").'</td>';\n\n        // Date last login\n        print '<td nowrap=\"nowrap\" align=\"center\">'.dol_print_date($db->jdate($obj->datelastlogin),\"dayhour\").'</td>';\n\n\t\t// Statut\n\t\t$userstatic->statut=$obj->statut;\n        print '<td width=\"100\" align=\"right\">'.$userstatic->getLibStatut(5).'</td>';\n        print \"</tr>\\n\";\n        $i++;\n    }\n    print \"</table>\";\n    $db->free($result);\n}\nelse\n{\n    dol_print_error($db);\n}\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:42 $ - $Revision: 1.51 $');\n?>\n", "<?php\n/* Copyright (C) 2004-2007 Laurent Destailleur  <eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *      \\file       htdocs/user/info.php\n *      \\ingroup    core\n *\t\t\\brief      Page des informations d'un utilisateur\n *\t\t\\version    $Id: info.php,v 1.19 2011/07/31 23:19:42 eldy Exp $\n*/\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/functions2.lib.php\");\nrequire_once(DOL_DOCUMENT_ROOT.'/lib/usergroups.lib.php');\nrequire_once(DOL_DOCUMENT_ROOT.\"/user/class/user.class.php\");\n\n$langs->load(\"users\");\n\n// Security check\n$id = isset($_GET[\"id\"])?$_GET[\"id\"]:'';\n$fuser = new User($db);\n$fuser->fetch($id);\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2 = (($socid && $user->rights->user->self->creer)?'':'user');\nif ($user->id == $_GET[\"id\"])\t// A user can always read its own card\n{\n\t$feature2='';\n}\n$result = restrictedArea($user, 'user', $_GET[\"id\"], '', $feature2);\n\n// If user is not user read and no permission to read other users, we stop\nif (($fuser->id != $user->id) && (! $user->rights->user->user->lire))\n  accessforbidden();\n\n\n\n/*\n * View\n */\n\nllxHeader();\n\n$fuser->info($_GET[\"id\"]);\n\n$head = user_prepare_head($fuser);\n\n$title = $langs->trans(\"User\");\ndol_fiche_head($head, 'info', $title, 0, 'user');\n\n\nprint '<table width=\"100%\"><tr><td>';\ndol_print_object_info($fuser);\nprint '</td></tr></table>';\n\nprint '</div>';\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:42 $ - $Revision: 1.19 $');\n?>\n", "<?php\n/* Copyright (C) 2004      Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2011 Laurent Destailleur  <eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *      \\file       htdocs/user/note.php\n *      \\ingroup    usergroup\n *      \\brief      Fiche de notes sur un utilisateur Dolibarr\n *\t\t\\version    $Id: note.php,v 1.24 2011/07/31 23:19:42 eldy Exp $\n */\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.'/lib/usergroups.lib.php');\nrequire_once(DOL_DOCUMENT_ROOT.'/user/class/user.class.php');\n\n$action=isset($_GET[\"action\"])?$_GET[\"action\"]:(isset($_POST[\"action\"])?$_POST[\"action\"]:\"\");\n$id=isset($_GET[\"id\"])?$_GET[\"id\"]:(isset($_POST[\"id\"])?$_POST[\"id\"]:\"\");\n\n$langs->load(\"companies\");\n$langs->load(\"members\");\n$langs->load(\"bills\");\n$langs->load(\"users\");\n\n$fuser = new User($db);\n$fuser->fetch($id);\n\n// If user is not user read and no permission to read other users, we stop\nif (($fuser->id != $user->id) && (! $user->rights->user->user->lire))\n  accessforbidden();\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2 = (($socid && $user->rights->user->self->creer)?'':'user');\nif ($user->id == $_GET[\"id\"])\t// A user can always read its own card\n{\n\t$feature2='';\n}\n$result = restrictedArea($user, 'user', $_GET[\"id\"], '', $feature2);\n\n\n\n/******************************************************************************/\n/*                     Actions                                                */\n/******************************************************************************/\n\nif ($_POST[\"action\"] == 'update' && $user->rights->user->user->creer && ! $_POST[\"cancel\"])\n{\n\t$db->begin();\n\n\t$res=$fuser->update_note($_POST[\"note\"],$user);\n\tif ($res < 0)\n\t{\n\t\t$mesg='<div class=\"error\">'.$adh->error.'</div>';\n\t\t$db->rollback();\n\t}\n\telse\n\t{\n\t\t$db->commit();\n\t}\n}\n\n\n\n/******************************************************************************/\n/* Affichage fiche                                                            */\n/******************************************************************************/\n\nllxHeader();\n\n$html = new Form($db);\n\nif ($id)\n{\n\t$head = user_prepare_head($fuser);\n\n\t$title = $langs->trans(\"User\");\n\tdol_fiche_head($head, 'note', $title, 0, 'user');\n\n\tif ($msg) print '<div class=\"error\">'.$msg.'</div>';\n\n\tprint \"<form method=\\\"post\\\" action=\\\"note.php\\\">\";\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n\n    print '<table class=\"border\" width=\"100%\">';\n\n    // Reference\n\tprint '<tr><td width=\"20%\">'.$langs->trans('Ref').'</td>';\n\tprint '<td colspan=\"3\">';\n\tprint $html->showrefnav($fuser,'id','',$user->rights->user->user->lire || $user->admin);\n\tprint '</td>';\n\tprint '</tr>';\n\n    // Nom\n    print '<tr><td>'.$langs->trans(\"Lastname\").'</td><td class=\"valeur\" colspan=\"3\">'.$fuser->nom.'&nbsp;</td>';\n\tprint '</tr>';\n\n    // Prenom\n    print '<tr><td>'.$langs->trans(\"Firstname\").'</td><td class=\"valeur\" colspan=\"3\">'.$fuser->prenom.'&nbsp;</td></tr>';\n\n    // Login\n    print '<tr><td>'.$langs->trans(\"Login\").'</td><td class=\"valeur\" colspan=\"3\">'.$fuser->login.'&nbsp;</td></tr>';\n\n\t// Note\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Note\").'</td>';\n\tprint '<td valign=\"top\" colspan=\"3\">';\n\tif ($action == 'edit' && $user->rights->user->user->creer)\n\t{\n\t\tprint \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"update\\\">\";\n\t\tprint \"<input type=\\\"hidden\\\" name=\\\"id\\\" value=\\\"\".$fuser->id.\"\\\">\";\n\t    // Editeur wysiwyg\n\t\trequire_once(DOL_DOCUMENT_ROOT.\"/lib/doleditor.class.php\");\n\t\t$doleditor=new DolEditor('note',$fuser->note,'',280,'dolibarr_notes','In',true,false,$conf->fckeditor->enabled && $conf->global->FCKEDITOR_ENABLE_USER,10,80);\n\t\t$doleditor->Create();\n\t}\n\telse\n\t{\n\t\tprint dol_textishtml($fuser->note)?$fuser->note:dol_nl2br($fuser->note,1,true);\n\t}\n\tprint \"</td></tr>\";\n\n\tif ($action == 'edit')\n\t{\n\t\tprint '<tr><td colspan=\"4\" align=\"center\">';\n\t\tprint '<input type=\"submit\" class=\"button\" name=\"update\" value=\"'.$langs->trans(\"Save\").'\">';\n\t\tprint '&nbsp; &nbsp;';\n\t\tprint '<input type=\"submit\" class=\"button\" name=\"cancel\" value=\"'.$langs->trans(\"Cancel\").'\">';\n\t\tprint '</td></tr>';\n\t}\n\n    print \"</table>\";\n\tprint \"</form>\\n\";\n\n\n    /*\n    * Actions\n    */\n    print '</div>';\n    print '<div class=\"tabsAction\">';\n\n    if ($user->rights->user->user->creer && $action != 'edit')\n    {\n        print \"<a class=\\\"butAction\\\" href=\\\"note.php?id=\".$fuser->id.\"&amp;action=edit\\\">\".$langs->trans('Modify').\"</a>\";\n    }\n\n    print \"</div>\";\n\n\n}\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:42 $ - $Revision: 1.24 $');\n?>\n", "<?php\n/* Copyright (C) 2005-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2010      Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/param_ihm.php\n *       \\brief      Page to show user setup for display\n *       \\version    $Id: param_ihm.php,v 1.53 2011/07/31 23:19:43 eldy Exp $\n */\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/functions2.lib.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/usergroups.lib.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/core/class/html.formadmin.class.php\");\n\n$langs->load(\"companies\");\n$langs->load(\"products\");\n$langs->load(\"admin\");\n$langs->load(\"users\");\n$langs->load(\"languages\");\n\n// Defini si peux lire/modifier permisssions\n$canreaduser=($user->admin || $user->rights->user->user->lire);\n\nif ($_REQUEST[\"id\"])\n{\n    // $user est le user qui edite, $_REQUEST[\"id\"] est l'id de l'utilisateur edite\n    $caneditfield=( (($user->id == $_REQUEST[\"id\"]) && $user->rights->user->self->creer)\n    || (($user->id != $_REQUEST[\"id\"]) && $user->rights->user->user->creer));\n}\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2 = (($socid && $user->rights->user->self->creer)?'':'user');\nif ($user->id == $_REQUEST[\"id\"])\t// A user can always read its own card\n{\n    $feature2='';\n    $canreaduser=1;\n}\n$result = restrictedArea($user, 'user', $_REQUEST[\"id\"], '', $feature2);\nif ($user->id <> $_REQUEST[\"id\"] && ! $canreaduser) accessforbidden();\n\n\n$id=! empty($_GET[\"id\"])?$_GET[\"id\"]:$_POST[\"id\"];\n$dirtop = \"../includes/menus/standard\";\n$dirleft = \"../includes/menus/standard\";\n\n// Charge utilisateur edite\n$fuser = new User($db);\n$fuser->fetch($id);\n$fuser->getrights();\n\n// Liste des zone de recherche permanentes supportees\n$searchform=array(\"main_searchform_societe\",\"main_searchform_contact\",\"main_searchform_produitservice\");\n$searchformconst=array($conf->global->MAIN_SEARCHFORM_SOCIETE,$conf->global->MAIN_SEARCHFORM_CONTACT,$conf->global->MAIN_SEARCHFORM_PRODUITSERVICE);\n$searchformtitle=array($langs->trans(\"Companies\"),$langs->trans(\"Contacts\"),$langs->trans(\"ProductsAndServices\"));\n\n$html = new Form($db);\n$formadmin=new FormAdmin($db);\n\n\n/*\n * Actions\n */\nif ($_POST[\"action\"] == 'update' && ($caneditfield  || $user->admin))\n{\n    if ($_POST[\"cancel\"])\n    {\n        $_GET[\"id\"]=$_POST[\"id\"];\n    }\n    else\n    {\n        $tabparam=array();\n\n        if ($_POST[\"check_MAIN_LANG_DEFAULT\"]==\"on\") $tabparam[\"MAIN_LANG_DEFAULT\"]=$_POST[\"main_lang_default\"];\n        else $tabparam[\"MAIN_LANG_DEFAULT\"]='';\n\n        $tabparam[\"MAIN_MENU_STANDARD\"]=$_POST[\"MAIN_MENU_STANDARD\"];\n\n        if ($_POST[\"check_SIZE_LISTE_LIMIT\"]==\"on\") $tabparam[\"MAIN_SIZE_LISTE_LIMIT\"]=$_POST[\"main_size_liste_limit\"];\n        else $tabparam[\"MAIN_SIZE_LISTE_LIMIT\"]='';\n\n        if ($_POST[\"check_MAIN_THEME\"]==\"on\") $tabparam[\"MAIN_THEME\"]=$_POST[\"main_theme\"];\n        else $tabparam[\"MAIN_THEME\"]='';\n\n        $tabparam[\"MAIN_SEARCHFORM_CONTACT\"]=$_POST[\"main_searchform_contact\"];\n        $tabparam[\"MAIN_SEARCHFORM_SOCIETE\"]=$_POST[\"main_searchform_societe\"];\n        $tabparam[\"MAIN_SEARCHFORM_PRODUITSERVICE\"]=$_POST[\"main_searchform_produitservice\"];\n\n        $result=dol_set_user_param($db, $conf, $fuser, $tabparam);\n\n        $_SESSION[\"mainmenu\"]=\"\";   // Le gestionnaire de menu a pu changer\n\n        Header('Location: '.$_SERVER[\"PHP_SELF\"].'?id='.$_POST[\"id\"]);\n        exit;\n    }\n}\n\n\n\n/*\n * View\n */\n\nllxHeader();\n\n$head = user_prepare_head($fuser);\n\n$title = $langs->trans(\"User\");\ndol_fiche_head($head, 'guisetup', $title, 0, 'user');\n\n\nprint '<table class=\"border\" width=\"100%\">';\n\n// Ref\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Ref\").'</td>';\nprint '<td colspan=\"2\">';\nprint $html->showrefnav($fuser,'id','',$user->rights->user->user->lire || $user->admin);\nprint '</td>';\nprint '</tr>';\n\n// Nom\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"LastName\").'</td>';\nprint '<td colspan=\"2\">'.$fuser->nom.'</td>';\nprint \"</tr>\\n\";\n\n// Prenom\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"FirstName\").'</td>';\nprint '<td colspan=\"2\">'.$fuser->prenom.'</td>';\nprint \"</tr>\\n\";\n\nprint '</table><br>';\n\n\nif ($_GET[\"action\"] == 'edit')\n{\n    print '<form method=\"post\" action=\"'.$_SERVER[\"PHP_SELF\"].'\">';\n    print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n    print '<input type=\"hidden\" name=\"action\" value=\"update\">';\n    print '<input type=\"hidden\" name=\"id\" value=\"'.$_GET[\"id\"].'\">';\n\n    clearstatcache();\n    $var=true;\n\n    print '<table class=\"noborder\" width=\"100%\">';\n    print '<tr class=\"liste_titre\"><td width=\"25%\">'.$langs->trans(\"Parameter\").'</td><td width=\"25%\">'.$langs->trans(\"DefaultValue\").'</td><td>&nbsp;</td><td>'.$langs->trans(\"PersonalValue\").'</td></tr>';\n\n    // Langue par defaut\n    $var=!$var;\n    print '<tr '.$bc[$var].'><td>'.$langs->trans(\"Language\").'</td>';\n    print '<td>';\n    $s=picto_from_langcode($conf->global->MAIN_LANG_DEFAULT);\n    print $s?$s.' ':'';\n    print ($conf->global->MAIN_LANG_DEFAULT=='auto'?$langs->trans(\"AutoDetectLang\"):$langs->trans(\"Language_\".$conf->global->MAIN_LANG_DEFAULT));\n    print '</td>';\n    print '<td align=\"left\" nowrap=\"nowrap\" width=\"20%\"><input '.$bc[$var].' name=\"check_MAIN_LANG_DEFAULT\" type=\"checkbox\" '.($fuser->conf->MAIN_LANG_DEFAULT?\" checked\":\"\");\n    print ! empty($dolibarr_main_demo)?' disabled=\"true\"':'';\t// Disabled for demo\n    print '> '.$langs->trans(\"UsePersonalValue\").'</td>';\n    print '<td>';\n    print $formadmin->select_language($fuser->conf->MAIN_LANG_DEFAULT,'main_lang_default',1);\n    print '</td></tr>';\n\n    // Taille max des listes\n    $var=!$var;\n    print '<tr '.$bc[$var].'><td>'.$langs->trans(\"MaxSizeList\").'</td>';\n    print '<td>'.$conf->global->MAIN_SIZE_LISTE_LIMIT.'</td>';\n    print '<td align=\"left\" nowrap=\"nowrap\" width=\"20%\"><input '.$bc[$var].' name=\"check_SIZE_LISTE_LIMIT\" type=\"checkbox\" '.($fuser->conf->MAIN_SIZE_LISTE_LIMIT?\" checked\":\"\");\n    print ! empty($dolibarr_main_demo)?' disabled=\"true\"':'';\t// Disabled for demo\n    print '> '.$langs->trans(\"UsePersonalValue\").'</td>';\n    print '<td><input class=\"flat\" name=\"main_size_liste_limit\" size=\"4\" value=\"' . $fuser->conf->SIZE_LISTE_LIMIT . '\"></td></tr>';\n\n    print '</table><br>';\n\n\n    // Theme\n    show_theme($fuser,empty($dolibarr_main_demo)?1:0,true);\n\n    print '</div>';\n\n    print '<center>';\n    print '<input type=\"submit\" class=\"button\" name=\"save\" value=\"'.$langs->trans(\"Save\").'\">';\n    print ' &nbsp; &nbsp; ';\n    print '<input type=\"submit\" class=\"button\" name=\"cancel\" value=\"'.$langs->trans(\"Cancel\").'\">';\n    print '</center>';\n    print '</form>';\n\n}\nelse\n{\n    $var=true;\n\n    print '<table class=\"noborder\" width=\"100%\">';\n    print '<tr class=\"liste_titre\"><td width=\"25%\">'.$langs->trans(\"Parameter\").'</td><td width=\"25%\">'.$langs->trans(\"DefaultValue\").'</td><td>&nbsp;</td><td>'.$langs->trans(\"PersonalValue\").'</td></tr>';\n\n    $var=!$var;\n    print '<tr '.$bc[$var].'><td>'.$langs->trans(\"Language\").'</td>';\n    print '<td>';\n    $s=picto_from_langcode($conf->global->MAIN_LANG_DEFAULT);\n    print ($s?$s.' ':'');\n    print ($conf->global->MAIN_LANG_DEFAULT=='auto'?$langs->trans(\"AutoDetectLang\"):$langs->trans(\"Language_\".$conf->global->MAIN_LANG_DEFAULT));\n    print '</td>';\n    print '<td align=\"left\" nowrap=\"nowrap\" width=\"20%\"><input '.$bc[$var].' type=\"checkbox\" disabled '.($fuser->conf->MAIN_LANG_DEFAULT?\" checked\":\"\").'> '.$langs->trans(\"UsePersonalValue\").'</td>';\n    print '<td>';\n    $s=picto_from_langcode($fuser->conf->MAIN_LANG_DEFAULT);\n    print ($s?$s.' ':'');\n    print ($fuser->conf->MAIN_LANG_DEFAULT=='auto'?$langs->trans(\"AutoDetectLang\"):($fuser->conf->MAIN_LANG_DEFAULT?$langs->trans(\"Language_\".$fuser->conf->MAIN_LANG_DEFAULT):''));\n    print '</td></tr>';\n\n    $var=!$var;\n    print '<tr '.$bc[$var].'><td>'.$langs->trans(\"MaxSizeList\").'</td>';\n    print '<td>'.$conf->global->MAIN_SIZE_LISTE_LIMIT.'</td>';\n    print '<td align=\"left\" nowrap=\"nowrap\" width=\"20%\"><input '.$bc[$var].' type=\"checkbox\" disabled '.($fuser->conf->MAIN_SIZE_LISTE_LIMIT?\" checked\":\"\").'> '.$langs->trans(\"UsePersonalValue\").'</td>';\n    print '<td>' . $fuser->conf->MAIN_SIZE_LISTE_LIMIT . '</td></tr>';\n\n    print '</table><br>';\n\n\n    // Skin\n    show_theme($fuser,0,true);\n\n    print '</div>';\n\n    print '<div class=\"tabsAction\">';\n    if (! empty($dolibarr_main_demo))\n    {\n        print \"<a class=\\\"butActionRefused\\\" title=\\\"\".$langs->trans(\"FeatureDisabledInDemo\").\"\\\" href=\\\"#\\\">\".$langs->trans(\"Modify\").\"</a>\";\n    }\n    else\n    {\n        if ($user->id == $fuser->id || $user->admin)       // Si utilisateur edite = utilisateur courant (pas besoin de droits particulier car il s'agit d'une page de modif d'output et non de donn\u00e9es) ou si admin\n        {\n            print '<a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=edit&amp;id='.$fuser->id.'\">'.$langs->trans(\"Modify\").'</a>';\n        }\n        else\n        {\n            print \"<a class=\\\"butActionRefused\\\" title=\\\"\".$langs->trans(\"NotEnoughPermissions\").\"\\\" href=\\\"#\\\">\".$langs->trans(\"Modify\").\"</a>\";\n        }\n    }\n\n    print '</div>';\n\n}\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:43 $ - $Revision: 1.53 $');\n?>\n", "<?php\n/* Copyright (C) 2002-2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Eric Seigne          <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2011 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/perms.php\n *       \\brief      Onglet user et permissions de la fiche utilisateur\n *       \\version    $Id: perms.php,v 1.57 2011/08/01 13:15:54 hregis Exp $\n */\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/usergroups.lib.php\");\n\n$langs->load(\"users\");\n$langs->load(\"admin\");\n\n$module=isset($_GET[\"module\"])?$_GET[\"module\"]:$_POST[\"module\"];\n\nif (! isset($_GET[\"id\"]) || empty($_GET[\"id\"])) accessforbidden();\n\n// Defini si peux lire les permissions\n$canreaduser=($user->admin || $user->rights->user->user->lire);\n// Defini si peux modifier les autres utilisateurs et leurs permisssions\n$caneditperms=($user->admin || $user->rights->user->user->creer);\n// Advanced permissions\nif (! empty($conf->global->MAIN_USE_ADVANCED_PERMS))\n{\n\t$canreaduser=($user->admin || ($user->rights->user->user->lire && $user->rights->user->user_advance->readperms));\n\t$caneditselfperms=($user->id == $_GET[\"id\"] && $user->rights->user->self_advance->writeperms);\n\t$caneditperms = '('.$caneditperms.' || '.$caneditselfperms.')';\n}\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2 = (($socid && $user->rights->user->self->creer)?'':'user');\nif ($user->id == $_GET[\"id\"])\t// A user can always read its own card\n{\n\t$feature2='';\n\t$canreaduser=1;\n}\n$result = restrictedArea($user, 'user', $_GET[\"id\"], '', $feature2);\nif ($user->id <> $_REQUEST[\"id\"] && ! $canreaduser) accessforbidden();\n\n\n/**\n * Actions\n */\nif ($_GET[\"action\"] == 'addrights' && $caneditperms)\n{\n    $edituser = new User($db);\n\t$edituser->fetch($_GET[\"id\"]);\n    $edituser->addrights($_GET[\"rights\"],$module);\n\n\t// Si on a touche a ses propres droits, on recharge\n\tif ($_GET[\"id\"] == $user->id)\n\t{\n\t\t$user->clearrights();\n\t\t$user->getrights();\n\t}\n}\n\nif ($_GET[\"action\"] == 'delrights' && $caneditperms)\n{\n    $edituser = new User($db);\n\t$edituser->fetch($_GET[\"id\"]);\n    $edituser->delrights($_GET[\"rights\"],$module);\n\n\t// Si on a touche a ses propres droits, on recharge\n\tif ($_GET[\"id\"] == $user->id)\n\t{\n\t\t$user->clearrights();\n\t\t$user->getrights();\n\t}\n}\n\n\n\n/* ************************************************************************** */\n/*                                                                            */\n/* Visu et edition                                                            */\n/*                                                                            */\n/* ************************************************************************** */\n\nllxHeader('',$langs->trans(\"Permissions\"));\n\n$form=new Form($db);\n\n$fuser = new User($db);\n$fuser->fetch($_GET[\"id\"]);\n$fuser->getrights();\n\n/*\n * Affichage onglets\n */\n$head = user_prepare_head($fuser);\n\n$title = $langs->trans(\"User\");\ndol_fiche_head($head, 'rights', $title, 0, 'user');\n\n\n$db->begin();\n\n// Search all modules with permission and reload permissions def.\n$modules = array();\n$modulesdir = array();\n\nforeach ($conf->file->dol_document_root as $type => $dirroot)\n{\n\t$modulesdir[] = $dirroot . \"/includes/modules/\";\n\t\n\tif ($type == 'alt')\n\t{\t\n\t\t$handle=@opendir($dirroot);\n\t\tif (is_resource($handle))\n\t\t{\n\t\t\twhile (($file = readdir($handle))!==false)\n\t\t\t{\n\t\t\t    if (is_dir($dirroot.'/'.$file) && substr($file, 0, 1) <> '.' && substr($file, 0, 3) <> 'CVS' && $file != 'includes')\n\t\t\t    {\n\t\t\t    \tif (is_dir($dirroot . '/' . $file . '/includes/modules/'))\n\t\t\t    \t{\n\t\t\t    \t\t$modulesdir[] = $dirroot . '/' . $file . '/includes/modules/';\n\t\t\t    \t}\n\t\t\t    }\n\t\t\t}\n\t\t\tclosedir($handle);\n\t\t}\n\t}\n}\n\nforeach($modulesdir as $dir)\n{\n\t$handle=opendir($dir);\n    if (is_resource($handle))\n    {\n    \twhile (($file = readdir($handle))!==false)\n    \t{\n    \t    if (is_readable($dir.$file) && substr($file, 0, 3) == 'mod'  && substr($file, dol_strlen($file) - 10) == '.class.php')\n    \t    {\n    \t        $modName = substr($file, 0, dol_strlen($file) - 10);\n\n    \t        if ($modName)\n    \t        {\n    \t            include_once($dir.$file);\n    \t            $objMod = new $modName($db);\n    \t            // Load all lang files of module\n    \t            if (isset($objMod->langfiles) && is_array($objMod->langfiles))\n    \t            {\n    \t            \tforeach($objMod->langfiles as $domain)\n    \t            \t{\n    \t            \t\t$langs->load($domain);\n    \t            \t}\n    \t            }\n    \t            // Load all permissions\n    \t            if ($objMod->rights_class) {\n\n    \t                $ret=$objMod->insert_permissions(0);\n\n    \t                $modules[$objMod->rights_class]=$objMod;\n    \t                //print \"modules[\".$objMod->rights_class.\"]=$objMod;\";\n    \t            }\n    \t        }\n    \t    }\n    \t}\n    }\n}\n\n$db->commit();\n\n// Lecture des droits utilisateurs\n$permsuser = array();\n\n$sql = \"SELECT r.id, r.libelle, r.module\";\n$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def as r,\";\n$sql.= \" \".MAIN_DB_PREFIX.\"user_rights as ur\";\n$sql.= \" WHERE ur.fk_id = r.id\";\n$sql.= \" AND r.entity = \".$conf->entity;\n$sql.= \" AND ur.fk_user = \".$fuser->id;\n\n$result=$db->query($sql);\nif ($result)\n{\n    $num = $db->num_rows($result);\n    $i = 0;\n    while ($i < $num)\n    {\n        $obj = $db->fetch_object($result);\n        array_push($permsuser,$obj->id);\n        $i++;\n    }\n    $db->free($result);\n}\nelse\n{\n    dol_print_error($db);\n}\n\n// Lecture des droits groupes\n$permsgroup = array();\n\n$sql = \"SELECT r.id, r.libelle, r.module\";\n$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def as r,\";\n$sql.= \" \".MAIN_DB_PREFIX.\"usergroup_rights as gr,\";\n$sql.= \" \".MAIN_DB_PREFIX.\"usergroup_user as gu\";\n$sql.= \" WHERE gr.fk_id = r.id\";\n$sql.= \" AND r.entity = \".$conf->entity;\n$sql.= \" AND gu.entity IN (0,\".$conf->entity.\")\";\n$sql.= \" AND gr.fk_usergroup = gu.fk_usergroup\";\n$sql.= \" AND gu.fk_user = \".$fuser->id;\n\n$result=$db->query($sql);\nif ($result)\n{\n    $num = $db->num_rows($result);\n    $i = 0;\n    while ($i < $num)\n    {\n        $obj = $db->fetch_object($result);\n        array_push($permsgroup,$obj->id);\n        $i++;\n    }\n    $db->free($result);\n}\nelse\n{\n    dol_print_error($db);\n}\n\n\n/*\n * Ecran ajout/suppression permission\n */\n\nprint '<table class=\"border\" width=\"100%\">';\n\n// Ref\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Ref\").'</td>';\nprint '<td>';\nprint $form->showrefnav($fuser,'id','',$user->rights->user->user->lire || $user->admin);\nprint '</td>';\nprint '</tr>'.\"\\n\";\n\n// Nom\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Lastname\").'</td>';\nprint '<td>'.$fuser->nom.'</td>';\nprint '</tr>'.\"\\n\";\n\n// Prenom\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Firstname\").'</td>';\nprint '<td>'.$fuser->prenom.'</td>';\nprint '</tr>'.\"\\n\";\n\nprint '</table><br>';\n\nif ($user->admin) print info_admin($langs->trans(\"WarningOnlyPermissionOfActivatedModules\"));\n\nprint \"\\n\";\nprint '<table width=\"100%\" class=\"noborder\">';\nprint '<tr class=\"liste_titre\">';\nprint '<td>'.$langs->trans(\"Module\").'</td>';\nif ($caneditperms) print '<td>&nbsp</td>';\nprint '<td align=\"center\" width=\"24\">&nbsp;</td>';\nprint '<td>'.$langs->trans(\"Permissions\").'</td>';\nprint '</tr>'.\"\\n\";\n\n//print \"xx\".$conf->global->MAIN_USE_ADVANCED_PERMS;\n$sql = \"SELECT r.id, r.libelle, r.module\";\n$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def as r\";\n$sql.= \" WHERE r.libelle NOT LIKE 'tou%'\";    // On ignore droits \"tous\"\n$sql.= \" AND r.entity = \".$conf->entity;\nif (empty($conf->global->MAIN_USE_ADVANCED_PERMS)) $sql.= \" AND r.perms NOT LIKE '%_advance'\";  // Hide advanced perms if option is disable\n$sql.= \" ORDER BY r.module, r.id\";\n\n$result=$db->query($sql);\nif ($result)\n{\n    $num = $db->num_rows($result);\n    $i = 0;\n    $var = True;\n    while ($i < $num)\n    {\n        $obj = $db->fetch_object($result);\n\n        // Si la ligne correspond a un module qui n'existe plus (absent de includes/module), on l'ignore\n        if (! $modules[$obj->module])\n        {\n            $i++;\n            continue;\n        }\n\n        if ($oldmod <> $obj->module)\n        {\n            $oldmod = $obj->module;\n            $var = !$var;\n\n            // Rupture detectee, on recupere objMod\n            $objMod=$modules[$obj->module];\n            $picto=($objMod->picto?$objMod->picto:'generic');\n\n            if ($caneditperms && (! $objMod->rights_admin_allowed || ! $fuser->admin))\n            {\n                // On affiche ligne pour modifier droits\n                print '<tr '. $bc[$var].'>';\n                print '<td nowrap=\"nowrap\">'.img_object('',$picto).' '.$objMod->getName();\n                print '<a name=\"'.$objMod->getName().'\">&nbsp;</a></td>';\n                print '<td align=\"center\" nowrap=\"nowrap\">';\n                print '<a title=\"'.dol_escape_htmltag($langs->trans(\"All\")).'\" alt=\"'.dol_escape_htmltag($langs->trans(\"All\")).'\" href=\"perms.php?id='.$fuser->id.'&amp;action=addrights&amp;module='.$obj->module.'#'.$objMod->getName().'\">'.$langs->trans(\"All\").\"</a>\";\n                print '/';\n                print '<a title=\"'.dol_escape_htmltag($langs->trans(\"None\")).'\" alt=\"'.dol_escape_htmltag($langs->trans(\"None\")).'\" href=\"perms.php?id='.$fuser->id.'&amp;action=delrights&amp;module='.$obj->module.'#'.$objMod->getName().'\">'.$langs->trans(\"None\").\"</a>\";\n                print '</td>';\n                print '<td colspan=\"2\">&nbsp;</td>';\n                print '</tr>'.\"\\n\";\n            }\n        }\n\n        print '<tr '. $bc[$var].'>';\n\n        // Picto and label of permission\n        print '<td>'.img_object('',$picto).' '.$objMod->getName();\n        print '</td>';\n\n        // Permission and tick\n        if ($fuser->admin && $objMod->rights_admin_allowed)\n        {\n            // Permission own because admin\n            if ($caneditperms)\n            {\n                print '<td align=\"center\">'.img_picto($langs->trans(\"Administrator\"),'star').'</td>';\n            }\n            print '<td align=\"center\" nowrap=\"nowrap\">';\n            print img_tick();\n            print '</td>';\n        }\n        else if (in_array($obj->id, $permsuser))\n        {\n            // Permission own by user\n            if ($caneditperms)\n            {\n                print '<td align=\"center\"><a href=\"perms.php?id='.$fuser->id.'&amp;action=delrights&amp;rights='.$obj->id.'#'.$objMod->getName().'\">'.img_edit_remove($langs->trans(\"Remove\")).'</a></td>';\n            }\n            print '<td align=\"center\" nowrap=\"nowrap\">';\n            print img_tick();\n            print '</td>';\n        }\n        else if (in_array($obj->id, $permsgroup)) {\n            // Permission own by group\n            if ($caneditperms)\n            {\n                print '<td align=\"center\">';\n\t\t\t\tprint $form->textwithtooltip($langs->trans(\"Inherited\"),$langs->trans(\"PermissionInheritedFromAGroup\"));\n\t\t\t\t//print '<a href=\"'.DOL_URL_ROOT.'/user/fiche.php?id='.$fuser->id.'\" title=\"'.$langs->trans(\"PermissionInheritedFromAGroup\").'\">';\n\t\t\t\tprint '</td>';\n            }\n            print '<td align=\"center\" nowrap=\"nowrap\">';\n            print img_tick();\n            print '</td>';\n        }\n        else\n        {\n            // Do not own permission\n            if ($caneditperms)\n            {\n                print '<td align=\"center\"><a href=\"perms.php?id='.$fuser->id.'&amp;action=addrights&amp;rights='.$obj->id.'#'.$objMod->getName().'\">'.img_edit_add($langs->trans(\"Add\")).'</a></td>';\n            }\n            print '<td>&nbsp</td>';\n        }\n\n        $perm_libelle=($conf->global->MAIN_USE_ADVANCED_PERMS && ($langs->trans(\"PermissionAdvanced\".$obj->id)!=(\"PermissionAdvanced\".$obj->id))?$langs->trans(\"PermissionAdvanced\".$obj->id):(($langs->trans(\"Permission\".$obj->id)!=(\"Permission\".$obj->id))?$langs->trans(\"Permission\".$obj->id):$obj->libelle));\n        print '<td>'.$perm_libelle. '</td>';\n\n        print '</tr>'.\"\\n\";\n\n        $i++;\n    }\n}\nprint '</table>';\n\n$db->close();\n\nllxFooter('$Date: 2011/08/01 13:15:54 $ - $Revision: 1.57 $');\n?>\n"], "fixing_code": ["<?php\n/* Copyright (C) 2002-2007 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2008 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2007 Regis Houssin        <regis@dolibarr.fr>\n * Copyright (C) 2007      Simon Desee          <simon@dedisoft.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       \thtdocs/lib/databases/mssql.lib.php\n *\t\\brief\t\t\tFichier de la classe permettant de gerer une base mssql\n *\t\\version\t\t$Id: mssql.lib.php,v 1.87 2011/08/04 13:58:14 eldy Exp $\n */\n\n// Pour compatibilite lors de l'upgrade\nif (! defined('DOL_DOCUMENT_ROOT'))\t define('DOL_DOCUMENT_ROOT', '../..');\nif (! defined('ADODB_DATE_VERSION')) include_once(DOL_DOCUMENT_ROOT.\"/includes/adodbtime/adodb-time.inc.php\");\n\n\n/**\n *\t\\class      DoliDb\n *\t\\brief      Classe de gestion de la database de dolibarr\n *\t\\remarks\tWorks with PHP5 Only\n */\nclass DoliDb\n{\n\t//! Database handler\n\tvar $db;\n\t//! Database type\n\tvar $type='mssql';\n\t//! Database label\n\tvar $label='MSSQL';\n\t//! Charset used to force charset when creating database\n\tvar $forcecharset='latin1';\n\t//! Collate used to force collate when creating database\n\tvar $forcecollate='latin1_swedish_ci';\n\t//! Version min database\n\tvar $versionmin=array(2000);\n\t//! Resultset de la derniere requete\n\tvar $results;\n\t//! 1 si connecte, 0 sinon\n\tvar $connected;\n\t//! 1 si base selectionne, 0 sinon\n\tvar $database_selected;\n\t//! Nom base selectionnee\n\tvar $database_name;\n\t//! Nom user base\n\tvar $database_user;\n\t//! 1 si une transaction est en cours, 0 sinon\n\tvar $transaction_opened;\n\t//! Derniere requete executee\n\tvar $lastquery;\n\t//! Derniere requete executee avec echec\n\tvar $lastqueryerror;\n\t//! Message erreur mysql\n\tvar $lasterror;\n\t//! Message erreur mysql\n\tvar $lasterrno;\n\n\tvar $ok;\n\tvar $error;\n\n\n\t/**\n\t *\tOuverture d'une connexion vers le serveur et eventuellement une database.\n\t *\t@param      type\t\tType de base de donnees (mysql ou pgsql)\n\t *\t@param\t    host\t\tAddresse de la base de donnees\n\t *\t@param\t    user\t\tNom de l'utilisateur autorise\n\t *\t@param\t    pass\t\tMot de passe\n\t *\t@param\t    name\t\tNom de la database\n\t *\t@param\t    port\t\tPort of database server\n\t *\t@return     int\t\t\t1 en cas de succes, 0 sinon\n\t */\n\tfunction DoliDb($type='mssql', $host, $user, $pass, $name='', $port=0)\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$this->database_user=$user;\n\t\t$this->transaction_opened=0;\n\n\t\tif (! function_exists(\"mssql_connect\"))\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=\"Mssql PHP functions for using MSSql driver are not available in this version of PHP\";\n\t\t\tdol_syslog(\"DoliDB::DoliDB : MSsql PHP functions for using MSsql driver are not available in this version of PHP\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\tif (! $host)\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=$langs->trans(\"ErrorWrongHostParameter\");\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect, wrong host parameters\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\t// Essai connexion serveur\n\t\t$this->db = $this->connect($host, $user, $pass, $name, $port);\n\t\tif ($this->db)\n\t\t{\n\t\t\t// Si client connecte avec charset different de celui de la base Dolibarr\n\t\t\t// (La base Dolibarr a ete forcee en this->forcecharset a l'install)\n\t\t\t$this->connected = 1;\n\t\t\t$this->ok = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// host, login ou password incorrect\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=mssql_get_last_message();\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect mssql_get_last_message=\".$this->error,LOG_ERR);\n\t\t}\n\n\t\t// Si connexion serveur ok et si connexion base demandee, on essaie connexion base\n\t\tif ($this->connected && $name)\n\t\t{\n\t\t\tif ($this->select_db($name))\n\t\t\t{\n\t\t\t\t$this->database_selected = 1;\n\t\t\t\t$this->database_name = $name;\n\t\t\t\t$this->ok = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->database_selected = 0;\n\t\t\t\t$this->database_name = '';\n\t\t\t\t$this->ok = 0;\n\t\t\t\t$this->error=$this->error();\n\t\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Select_db \".$this->error,LOG_ERR);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Pas de selection de base demandee, ok ou ko\n\t\t\t$this->database_selected = 0;\n\t\t}\n\n\t\treturn $this->ok;\n\t}\n\n    /**\n     *  Convert a SQL request in Mysql syntax to PostgreSQL syntax\n     *  @param     line     SQL request line to convert\n     *  @param     type     Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *  @return    string   SQL request line converted\n     */\n\tfunction convertSQLFromMysql($line,$type='ddl')\n\t{\n\t\treturn $line;\n\t}\n\n\t/**\n\t * \tSelectionne une database.\n\t *\t@param\t    database\t\tNom de la database\n\t *\t@return\t    boolean         true si ok, false si ko\n\t */\n\tfunction select_db($database)\n\t{\n\t\treturn mssql_select_db($database, $this->db);\n\t}\n\n\t/**\n\t *     Connection vers le serveur\n\t *     @param\thost\t\taddresse de la base de donnees\n\t *     @param\tlogin\t\tnom de l'utilisateur autoris\n\t *     @param\tpasswd\t\tmot de passe\n\t *     @param\tname\t\tnom de la database (ne sert pas sous mysql, sert sous pgsql)\n\t *     @param\tport\t\tPort of database server\n\t *     @return\tresource\thandler d'acces a la base\n\t *     @see    \tclose\n\t */\n\tfunction connect($host, $login, $passwd, $name, $port=0)\n\t{\n\t\tdol_syslog(\"DoliDB::connect host=$host, port=$port, login=$login, passwd=--hidden--, name=$name\");\n\t\t$newhost=$host;\n\t\tif ($port) $newhost.=':'.$port;\n\t\t$this->db  = @mssql_connect($newhost, $login, $passwd);\n\t\t//force les enregistrement en latin1 si la base est en utf8 par defaut\n\t\t// Supprime car plante sur mon PHP-Mysql. De plus, la base est forcement en latin1 avec\n\t\t// les nouvelles version de Dolibarr car force par l'install Dolibarr.\n\t\t//$this->query('SET NAMES '.$this->forcecharset);\n\t\t//print \"Resultat fonction connect: \".$this->db;\n\t\treturn $this->db;\n\t}\n\n\t/**\n\t * \\brief          \tReturn label of manager\n\t * \\return\t\t\tstring      Label\n\t */\n\tfunction getLabel()\n\t{\n\t\treturn $this->label;\n\t}\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur\n\t *\t\\return\t        string      Chaine version\n\t */\n\tfunction getVersion()\n\t{\n\t\t$resql=$this->query(\"SELECT @@VERSION\");\n\t\t$version=$this->fetch_array($resql);\n\t\treturn $version['computed'];\n\t}\n\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur dans un tableau\n\t *\t\\return\t        array  \t\tTableau de chaque niveau de version\n\t */\n\tfunction getVersionArray()\n\t{\n\t\treturn explode('.',$this->getVersion());\n\t}\n\n\n    /**\n     *  Close database connexion\n     *  @return     boolean     True if disconnect successfull, false otherwise\n     *  @see        connect\n     */\n    function close()\n    {\n        if ($this->db)\n        {\n          //dol_syslog(\"DoliDB::disconnect\",LOG_DEBUG);\n          $this->connected=0;\n          return mssql_close($this->db);\n        }\n        return false;\n    }\n\n\n\t/**\n\t *\t\\brief      Debut d'une transaction.\n\t *\t\\return\t    int         1 si ouverture transaction ok ou deja ouverte, 0 en cas d'erreur\n\t */\n\tfunction begin()\n\t{\n\t\tif (! $this->transaction_opened)\n\t\t{\n\t\t\t$ret=$this->query(\"BEGIN TRANSACTION\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened++;\n\t\t\t\tdol_syslog(\"BEGIN Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened++;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n     * Validate a database transaction\n     * @param       log         Add more log to default log line\n     * @return      int         1 if validation is OK or transaction level no started, 0 if ERROR\n\t */\n\tfunction commit()\n\t{\n\t\tif ($this->transaction_opened <= 1)\n\t\t{\n\t\t\t$ret=$this->query(\"COMMIT TRANSACTION\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened=0;\n\t\t\t\tdol_syslog(\"COMMIT Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * \\brief      Annulation d'une transaction et retour aux anciennes valeurs\n\t * \\return\t    int         1 si annulation ok ou transaction non ouverte, 0 en cas d'erreur\n\t */\n\tfunction rollback()\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"ROLLBACK TRANSACTION\");\n\t\t\t$this->transaction_opened=0;\n\t\t\tdol_syslog(\"ROLLBACK Transaction\",LOG_DEBUG);\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n     *  Execute a SQL request and return the resultset\n     *  @param      query           SQL query string\n     *  @param      usesavepoint    0=Default mode, 1=Run a savepoint before and a rollbock to savepoint if error (this allow to have some request with errors inside global transactions).\n     *                              Note that with Mysql, this parameter is not used as Myssql can already commit a transaction even if one request is in error, without using savepoints.\n     *  @param      type            Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *  @return     resource        Resultset of answer\n\t */\n\tfunction query($query,$usesavepoint=0,$type='auto')\n\t{\n\t\t$query = trim($query);\n\n\t\t// Conversion syntaxe MySql vers MSDE.\n\t\t$query = str_ireplace(\"now()\", \"getdate()\", $query);\n\t\t// Erreur SQL: cannot update timestamp field\n\t\t$query = str_ireplace(\", tms = tms\", \"\", $query);\n\t\t// Voir si l'on peut directement utiliser $query = str_ireplace(\"file\", \"[file]\", $query);\n\t\t// au lieu des 3 lignes ci-dessous\n\t\t$query = str_ireplace(\".file\", \".[file]\", $query);\n\t\t$query = str_ireplace(\" file \", \" [file] \", $query);\n\t\t$query = str_ireplace(\" file,\", \" [file],\", $query);\n\t\t// Idem file\n\t\t$query = str_ireplace(\".percent\", \".[percent]\", $query);\n\t\t$query = str_ireplace(\" percent \", \" [percent] \", $query);\n\t\t$query = str_ireplace(\"percent,\", \"[percent],\", $query);\n\t\t$query = str_ireplace(\"percent=\", \"[percent]=\", $query);\n\t\t$query = str_ireplace(\"\\'\", \"''\", $query);\n\n\n\t\t$itemfound = stripos($query, \" limit \");\n\t\tif ($itemfound !== false) {\n\t\t\t// Extraire le nombre limite\n\t\t\t$number = stristr($query, \" limit \");\n\t\t\t$number = substr($number, 7);\n\t\t\t// Inserer l'instruction TOP et le nombre limite\n\t\t\t$query = str_ireplace(\"select \", \"select top \".$number.\" \", $query);\n\t\t\t// Supprimer l'instruction MySql\n\t\t\t$query = str_ireplace(\" limit \".$number, \"\", $query);\n\t\t}\n\n\t\t$itemfound = stripos($query, \" week(\");\n\t\tif ($itemfound !== false) {\n\t\t\t// Recreer une requete sans instruction Mysql\n\t\t\t$positionMySql = stripos($query, \" week(\");\n\t\t\t$newquery = substr($query, 0, $positionMySql);\n\n\t\t\t// Recuperer la date passee en parametre\n\t\t\t$extractvalue = stristr($query, \" week(\");\n\t\t\t$extractvalue = substr($extractvalue, 6);\n\t\t\t$positionMySql = stripos($extractvalue, \")\");\n\t\t\t// Conserver la fin de la requete\n\t\t\t$endofquery = substr($extractvalue, $positionMySql);\n\t\t\t$extractvalue = substr($extractvalue, 0, $positionMySql);\n\n\t\t\t// Remplacer l'instruction MySql en Sql Server\n\t\t\t// Inserer la date en parametre et le reste de la requete\n\t\t\t$query = $newquery.\" DATEPART(week, \".$extractvalue.$endofquery;\n\t\t}\n\n\t\t//print \"<!--\".$query.\"-->\";\n\n\t\tif (! $this->database_name)\n\t\t{\n\t\t\t// Ordre SQL ne necessitant pas de connexion a une base (exemple: CREATE DATABASE)\n\t\t\t$ret = mssql_query($query, $this->db);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret = mssql_query($query, $this->db);\n\t\t}\n\n\t\tif (! preg_match(\"/^COMMIT/i\",$query) && ! preg_match(\"/^ROLLBACK/i\",$query))\n\t\t{\n\t\t\t// Si requete utilisateur, on la sauvegarde ainsi que son resultset\n\t\t\tif (! $ret)\n\t\t\t{\n\t\t\t\t$result = mssql_query(\"SELECT @@ERROR as code\", $this->db);\n\t\t\t\t$row = mssql_fetch_array($result);\n\n                $this->lastqueryerror = $query;\n\t\t\t\t$this->lasterror = $this->error();\n\t\t\t\t$this->lasterrno = $row[\"code\"];\n                dol_syslog(\"Mssql.lib::query SQL error: \".$query, LOG_WARNING);\n\t\t\t}\n\t\t\t$this->lastquery=$query;\n\t\t\t$this->results = $ret;\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie la ligne courante (comme un objet) pour le curseur resultset.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    object\t\tObject result line or false if KO or end of cursor\n\t */\n\tfunction fetch_object($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mssql_fetch_object($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie les donnees dans un tableau.\n\t * \\param      resultset           Curseur de la requete voulue\n\t * \\return\t   array\n\t */\n\tfunction fetch_array($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mssql_fetch_array($resultset);\n\t}\n\n\n\t/**\n\t * \\brief      Renvoie les donnees comme un tableau.\n\t * \\param      resultset           Curseur de la requete voulue\n\t * \\return\t   array\n\t */\n\tfunction fetch_row($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn @mssql_fetch_row($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie le nombre de lignes dans le resultat d'une requete SELECT\n\t * \\see    \t   affected_rows\n\t * \\param      resultset           Curseur de la requete voulue\n\t * \\return     int\t\t           Nombre de lignes\n\t */\n\tfunction num_rows($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mssql_num_rows($resultset);\n\t}\n\n\t/**\n\t \\brief      Renvoie le nombre de lignes dans le resultat d'une requete INSERT, DELETE ou UPDATE\n\t \\see    \tnum_rows\n\t \\param      resultset   Curseur de la requete voulue\n\t \\return     int\t\t    Nombre de lignes\n\t */\n\tfunction affected_rows($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// mssql necessite un link de base pour cette fonction contrairement\n\t\t// a pqsql qui prend un resultset\n\t\t$rsRows = mssql_query(\"select @@rowcount as rows\", $this->db);\n\t\treturn mssql_result($rsRows, 0, \"rows\");\n\t\t//return mssql_affected_rows($this->db);\n\t}\n\n\n\t/**\n\t * \\brief      Libere le dernier resultset utilise sur cette connexion.\n\t * \\param      resultset   Curseur de la requete voulue\n\t */\n\tfunction free($resultset=0)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// Si resultset en est un, on libere la memoire\n\t\tif (is_resource($resultset)) mssql_free_result($resultset);\n\t}\n\n\n\t/**\n\t * \\brief      Defini les limites de la requete.\n\t * \\param\t    limit       nombre maximum de lignes retournees\n\t * \\param\t    offset      numero de la ligne a partir de laquelle recuperer les ligne\n\t * \\return\t    string      chaine exprimant la syntax sql de la limite\n\t */\n\tfunction plimit($limit=0,$offset=0)\n\t{\n\t\tglobal $conf;\n\t\tif (! $limit) $limit=$conf->liste_limit;\n\t\tif ($offset > 0) return \" LIMIT $offset,$limit \";\n\t\telse return \" LIMIT $limit \";\n\t}\n\n\n\t/**\n\t * Define sort criteria of request\n\t * @param\t    sortfield   List of sort fields\n\t * @param\t    sortorder   Sort order\n\t * @return\t    string      String to provide syntax of a sort sql string\n\t * TODO\t\t\tMutualized this into a mother class\n\t */\n\tfunction order($sortfield=0,$sortorder=0)\n\t{\n\t\tif ($sortfield)\n\t\t{\n\t\t\t$return='';\n\t\t\t$fields=explode(',',$sortfield);\n\t\t\tforeach($fields as $val)\n\t\t\t{\n\t\t\t\tif (! $return) $return.=' ORDER BY ';\n\t\t\t\telse $return.=',';\n\n\t\t\t\t$return.=preg_replace('/[^0-9a-z_\\.]/i','',$val);\n\t\t\t\tif ($sortorder) $return.=' '.preg_replace('/[^0-9a-z]/i','',$sortorder);\n\t\t\t}\n\t\t\treturn $return;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t}\n\n\n\t/**\n\t *     Escape a string to insert data.\n\t *     @param\t    stringtoencode\t\tString to escape\n\t *     @return\t    string\t\t\t\tString escaped\n\t */\n\tfunction escape($stringtoencode)\n\t{\n\t\treturn addslashes($stringtoencode);\n\t}\n\n\n\t/**\n\t *   Convert (by PHP) a GM Timestamp date into a PHP server TZ to insert into a date field.\n\t *   Function to use to build INSERT, UPDATE or WHERE predica\n\t *   @param\t    param       Date TMS to convert\n\t *   @return\tstring      Date in a string YYYYMMDDHHMMSS\n\t */\n\tfunction idate($param)\n\t{\n\t\treturn adodb_strftime(\"%Y-%m-%d %H:%M:%S\",$param);\n\t}\n\n\t/**\n\t *\tConvert (by PHP) a PHP server TZ string date into a GM Timestamps date\n\t * \t19700101020000 -> 3600 with TZ+1\n\t * \t@param\t\tstring\t\t\tDate in a string (YYYYMMDDHHMMSS, YYYYMMDD, YYYY-MM-DD HH:MM:SS)\n\t *\t@return\t\tdate\t\t\tDate TMS\n\t */\n\tfunction jdate($string)\n\t{\n\t\t$string=preg_replace('/([^0-9])/i','',$string);\n\t\t$tmp=$string.'000000';\n\t\t$date=dol_mktime(substr($tmp,8,2),substr($tmp,10,2),substr($tmp,12,2),substr($tmp,4,2),substr($tmp,6,2),substr($tmp,0,4));\n\t\treturn $date;\n\t}\n\n\t/**\n     *  Formate a SQL IF\n\t *\t@param\t\ttest            chaine test\n\t *\t@param\t\tresok           resultat si test egal\n\t *\t@param\t\tresko           resultat si test non egal\n\t *\t@return\t\tstring          chaine formate SQL\n\t */\n\tfunction ifsql($test,$resok,$resko)\n\t{\n\t\treturn 'IF('.$test.','.$resok.','.$resko.')';\n\t}\n\n\n\t/**\n\t *\t\\brief      Renvoie la derniere requete soumise par la methode query()\n\t *\t\\return\t    lastquery\n\t */\n\tfunction lastquery()\n\t{\n\t\treturn $this->lastquery;\n\t}\n\n\t/**\n\t \\brief      Renvoie la derniere requete en erreur\n\t \\return\t    string\tlastqueryerror\n\t */\n\tfunction lastqueryerror()\n\t{\n\t\treturn $this->lastqueryerror;\n\t}\n\n\t/**\n\t \\brief      Renvoie le libelle derniere erreur\n\t \\return\t    string\tlasterror\n\t */\n\tfunction lasterror()\n\t{\n\t\treturn $this->lasterror;\n\t}\n\n\t/**\n\t \\brief      Renvoie le code derniere erreur\n\t \\return\t    string\tlasterrno\n\t */\n\tfunction lasterrno()\n\t{\n\t\treturn $this->lasterrno;\n\t}\n\n\t/**\n\t \\brief     Renvoie le code erreur generique de l'operation precedente.\n\t \\return    error_num       (Exemples: DB_ERROR_TABLE_ALREADY_EXISTS, DB_ERROR_RECORD_ALREADY_EXISTS...)\n\t */\n\tfunction errno()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide.\n\t\t\treturn 'DB_ERROR_FAILED_TO_CONNECT';\n\t\t}\n\t\telse {\n\t\t\t// Constants to convert a MSSql error code to a generic Dolibarr error code\n\t\t\t$errorcode_map = array(\n\t\t\t1004 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1005 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1006 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1007 => 'DB_ERROR_ALREADY_EXISTS',\n\t\t\t1008 => 'DB_ERROR_CANNOT_DROP',\n\t\t\t1025 => 'DB_ERROR_NO_FOREIGN_KEY_TO_DROP',\n\t\t\t1046 => 'DB_ERROR_NODBSELECTED',\n\t\t\t1048 => 'DB_ERROR_CONSTRAINT',\n\t\t\t2714 => 'DB_ERROR_TABLE_ALREADY_EXISTS',\n\t\t\t1051 => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t1054 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1060 => 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n\t\t\t1061 => 'DB_ERROR_KEY_NAME_ALREADY_EXISTS',\n\t\t\t2627 => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n\t\t\t102  => 'DB_ERROR_SYNTAX',\n\t\t\t8120 => 'DB_ERROR_GROUP_BY_SYNTAX',\n\t\t\t1068 => 'DB_ERROR_PRIMARY_KEY_ALREADY_EXISTS',\n\t\t\t1075 => 'DB_ERROR_CANT_DROP_PRIMARY_KEY',\n\t\t\t1091 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1100 => 'DB_ERROR_NOT_LOCKED',\n\t\t\t1136 => 'DB_ERROR_VALUE_COUNT_ON_ROW',\n\t\t\t1146 => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t1216 => 'DB_ERROR_NO_PARENT',\n\t\t\t1217 => 'DB_ERROR_CHILD_EXISTS',\n\t\t\t1451 => 'DB_ERROR_CHILD_EXISTS'\n\t\t\t);\n\n\t\t\tif (isset($errorcode_map[$this->lasterrno]))\n\t\t\t{\n\t\t\t\treturn $errorcode_map[$this->lasterrno];\n\t\t\t}\n\t\t\t$errno=$this->lasterrno;\n\t\t\treturn ($errno?'DB_ERROR_'.$errno:'0');\n\t\t}\n\t}\n\n\t/**\n\t \\brief     Renvoie le texte de l'erreur mssql de l'operation precedente.\n\t \\return    error_text\n\t */\n\tfunction error()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide pour mssql_get_last_message.\n\t\t\treturn 'Not connected. Check setup parameters in conf/conf.php file and your mssql client and server versions';\n\t\t}\n\t\telse {\n\t\t\treturn mssql_get_last_message($this->db);\n\t\t}\n\t}\n\n\t/**\n\t \\brief     Recupere l'id genere par le dernier INSERT.\n\t \\param     tab     Nom de la table concernee par l'insert. Ne sert pas sous mssql mais requis pour compatibilite avec Postgresql\n\t \\return    int     id\n\t */\n\tfunction last_insert_id($tab)\n\t{\n\t\t$res = $this->query(\"SELECT @@IDENTITY as id\");\n\t\tif ($data = $this->fetch_array($res))\n\t\t{\n\t\t\treturn $data[\"id\"];\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n     *  Encrypt sensitive data in database\n     *  Warning: This function includes the escape, so it must use direct value\n     *  @param          fieldorvalue    Field name or value to encrypt\n     *  @param          withQuotes      Return string with quotes\n     *  @return         return          XXX(field) or XXX('value') or field or 'value'\n\t */\n\tfunction encrypt($fieldorvalue, $withQuotes=0)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $fieldorvalue;\n\t\treturn ($withQuotes?\"'\":\"\").$this->escape($return).($withQuotes?\"'\":\"\");\n\t}\n\n\t/**\n\t *\t\\brief          Decrypt sensitive data in database\n\t *\t\\param\t        value\t\t\tValue to decrypt\n\t * \t\\return\t        return\t\t\tDecrypted value if used\n\t */\n\tfunction decrypt($value)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $value;\n\t\treturn $return;\n\t}\n\n\n\t// Next function are not required. Only minor features use them.\n\t//--------------------------------------------------------------\n\n\t/**\n\t *\t\\brief          Renvoie l'id de la connexion\n\t *\t\\return\t        string      Id connexion\n\t */\n\tfunction DDLGetConnectId()\n\t{\n\t\t$resql=$this->query('SELECT CONNECTION_ID()');\n\t\t$row=$this->fetch_row($resql);\n\t\treturn $row[0];\n\t}\n\n\t/**\n\t *\t\\brief          Create a new database\n\t *\t\\param\t        database\t\tDatabase name to create\n\t * \t\\param\t\t\tcharset\t\t\tCharset used to store data\n\t * \t\\param\t\t\tcollation\t\tCharset used to sort data\n\t * \t\\return\t        resource\t\tresource defined if OK, null if KO\n\t * \t\\remarks        Ne pas utiliser les fonctions xxx_create_db (xxx=mssql, ...) car elles sont deprecated\n\t *\t\t\t\t\tOn force creation de la base avec le charset forcecharset\n\t */\n\tfunction DDLCreateDb($database,$charset='',$collation='')\n\t{\n\t\t// ALTER DATABASE dolibarr_db DEFAULT CHARACTER SET latin DEFAULT COLLATE latin1_swedish_ci\n\t\t$sql = 'CREATE DATABASE '.$database;\n\t\t$sql.= ' DEFAULT CHARACTER SET '.$this->forcecharset.' DEFAULT COLLATE '.$this->forcecollate;\n\t\t$ret=$this->query($sql);\n\t\tif (! $ret)\n\t\t{\n\t\t\t// On reessaie pour compatibilite avec mssql < 5.0\n\t\t\t$sql = 'CREATE DATABASE '.$database;\n\t\t\t$ret=$this->query($sql);\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief     \tList tables into a database.\n\t *\t\\param\t    database\t\tName of database\n\t *\t\\param\t    table   \t\tFilter on some tables\n\t *\t\\return\t    array\t\t\tArray list of tables\n\t */\n\tfunction DDLListTables($database,$table='')\n\t{\n\t\t$this->results = mssql_list_tables($database, $this->db);\n\t\treturn $this->results;\n\t}\n\n\t/**\n\t \\brief      Cree une table\n\t \\param\t    table \t\t\tNom de la table\n\t \\param\t    fields \t\t\tTableau associatif [nom champ][tableau des descriptions]\n\t \\param\t    primary_key \tNom du champ qui sera la clef primaire\n\t \\param\t    unique_keys \tTableau associatifs Nom de champs qui seront clef unique => valeur\n\t \\param\t    fulltext \t\tTableau des Nom de champs qui seront indexes en fulltext\n\t \\param\t    key \t\t\tTableau des champs cles noms => valeur\n\t \\param\t    type \t\t\tType de la table\n\t \\return\t    int\t\t\t\t<0 si KO, >=0 si OK\n\t */\n\tfunction DDLCreateTable($table,$fields,$primary_key,$type,$unique_keys=\"\",$fulltext_keys=\"\",$keys=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (fields) : type,value,attribute,null,default,extra\n\t\t// ex. : $fields['rowid'] = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql = \"create table \".$table.\"(\";\n\t\t$i=0;\n\t\tforeach($fields as $field_name => $field_desc)\n\t\t{\n\t\t\t$sqlfields[$i] = $field_name.\" \";\n\t\t\t$sqlfields[$i]  .= $field_desc['type'];\n\t\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t\t$sqlfields[$i]  .= \"(\".$field_desc['value'].\")\";\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['attribute'];\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\t\t{\n\t\t\t\tif(preg_match(\"/null/i\",$field_desc['default']))\n\t\t\t\t$sqlfields[$i]  .= \" default \".$field_desc['default'];\n\t\t\t\telse\n\t\t\t\t$sqlfields[$i]  .= \" default '\".$field_desc['default'].\"'\";\n\t\t\t}\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['null'];\n\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['extra'];\n\t\t\t$i++;\n\t\t}\n\t\tif($primary_key != \"\")\n\t\t$pk = \"primary key(\".$primary_key.\")\";\n\n\t\tif($unique_keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($unique_keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqluq[$i] = \"UNIQUE KEY '\".$key.\"' ('\".$value.\"')\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\tif($keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqlk[$i] = \"KEY \".$key.\" (\".$value.\")\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\t$sql .= implode(',',$sqlfields);\n\t\tif($primary_key != \"\")\n\t\t$sql .= \",\".$pk;\n\t\tif($unique_keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqluq);\n\t\tif($keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqlk);\n\t\t$sql .=\") type=\".$type;\n\n\t\tdol_syslog($sql);\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t \\brief      decrit une table dans une database.\n\t\t\\param\t    table\tNom de la table\n\t\t\\param\t    field\tOptionnel : Nom du champ si l'on veut la desc d'un champ\n\t\t\\return\t    resource\n\t\t*/\n\tfunction DDLDescTable($table,$field=\"\")\n\t{\n\t\t$sql=\"DESC \".$table.\" \".$field;\n\n\t\tdol_syslog($sql);\n\t\t$this->results = $this->query($sql);\n\t\treturn $this->results;\n\t}\n\n\t/**\n\t *\t\\brief      Insert a new field in table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t\tfield_name \t\tNom du champ a inserer\n\t *\t\\param\t    field_desc \t\tTableau associatif de description du champ a inserer[nom du parametre][valeur du parametre]\n\t *\t\\param\t    field_position \tOptionnel ex.: \"after champtruc\"\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLAddField($table,$field_name,$field_desc,$field_position=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (field_desc) : type,value,attribute,null,default,extra\n\t\t// ex. : $field_desc = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql= \"ALTER TABLE \".$table.\" ADD \".$field_name.\" \";\n\t\t$sql .= $field_desc['type'];\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t$sql  .= \"(\".$field_desc['value'].\")\";\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t$sql  .= \" \".$field_desc['attribute'];\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t$sql  .= \" \".$field_desc['null'];\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\tif(preg_match(\"/null/i\",$field_desc['default']))\n\t\t$sql  .= \" default \".$field_desc['default'];\n\t\telse\n\t\t$sql  .= \" default '\".$field_desc['default'].\"'\";\n\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t$sql  .= \" \".$field_desc['extra'];\n\t\t$sql .= \" \".$field_position;\n\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\tUpdate format of a field into a table\n\t *\t@param\t    table \t\t\tName of table\n\t *\t@param\t\tfield_name \t\tName of field to modify\n\t *\t@param\t    field_desc \t\tArray with description of field format\n\t *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction DDLUpdateField($table,$field_name,$field_desc)\n\t{\n\t\t$sql = \"ALTER TABLE \".$table;\n\t\t$sql .= \" MODIFY COLUMN \".$field_name.\" \".$field_desc['type'];\n\t\tif ($field_desc['type'] == 'int' || $field_desc['type'] == 'varchar') $sql.=\"(\".$field_desc['value'].\")\";\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\t\\brief      Drop a field in table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t\tfield_name \t\tNom du champ a inserer\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLDropField($table,$field_name)\n\t{\n\t\t$sql= \"ALTER TABLE \".$table.\" DROP COLUMN `\".$field_name.\"`\";\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\t{\n\t\t\t$this->error=$this->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\telse return 1;\n\t}\n\n\n\tfunction getDefaultCharacterSetDatabase(){\n\t\t/*\n\t\t $resql=$this->query('SHOW VARIABLES LIKE \\'character_set_database\\'');\n\t\t if (!$resql)\n\t\t {\n\t\t return $this->forcecharset;\n\t\t }\n\t\t $liste=$this->fetch_array($resql);\n\t\t return $liste['Value'];\n\t\t */\n\t\treturn '';\n\t}\n\n\tfunction getListOfCharacterSet(){\n\t\t/*\n\t\t $resql=$this->query('SHOW CHARSET');\n\t\t $liste = array();\n\t\t if ($resql)\n\t\t {\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t$liste[$i]['charset'] = $obj->Charset;\n\t\t\t$liste[$i]['description'] = $obj->Description;\n\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t  } else {\n\t  return null;\n\t  }\n\t  return $liste;\n\t  */\n\t\treturn ''; // attente debuggage\n\t}\n\n\tfunction getDefaultCollationDatabase()\n\t{\n\t\t$resql=$this->query(\"SELECT SERVERPROPERTY('collation')\");\n\t\tif (!$resql)\n\t\t{\n\t\t\treturn $this->forcecollate;\n\t\t}\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['computed'];\n\t}\n\n\tfunction getListOfCollation()\n\t{\n\t\t/*\n\t\t $resql=$this->query('SHOW COLLATION');\n\t\t $liste = array();\n\t\t if ($resql)\n\t\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t$liste[$i]['collation'] = $obj->Collation;\n\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t\t} else {\n\t\t\treturn null;\n\t\t\t}\n\t\t\treturn $liste;\n\t\t\t*/\n\t\treturn ''; // attente debugage\n\t}\n\n\t/*\n\t *  Return full path of dump program\n\t *\t@return\t\tstring\t\tFull path of dump program\n\t */\n\tfunction getPathOfDump()\n\t{\n\n\t    return '';\n\t}\n\n    /**\n     *\tReturn full path of restore program\n     *\t@return\t\tstring\t\tFull path of restore program\n     */\n\tfunction getPathOfRestore()\n\t{\n\n\t    return '';\n\t}\n}\n\n?>\n", "<?php\n/* Copyright (C) 2001      Fabien Seisen        <seisen@linuxfr.org>\n * Copyright (C) 2002-2007 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2008 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2006      Andre Cianfarani     <acianfa@free.fr>\n * Copyright (C) 2005-2009 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       \thtdocs/lib/databases/mysql.lib.php\n *\t\\brief      \tClass file to manage Dolibarr database access for a Mysql database\n *\t\\version\t\t$Id: mysql.lib.php,v 1.121 2011/08/04 13:58:55 eldy Exp $\n */\n// For compatibility during upgrade\nif (! defined('DOL_DOCUMENT_ROOT'))\t define('DOL_DOCUMENT_ROOT', '../..');\nif (! defined('ADODB_DATE_VERSION')) include_once(DOL_DOCUMENT_ROOT.\"/includes/adodbtime/adodb-time.inc.php\");\n\n\n/**\n *\t\\class      DoliDb\n *\t\\brief      Class to manage Dolibarr database access for a Mysql database\n */\nclass DoliDb\n{\n\t//! Database handler\n\tvar $db;\n\t//! Database type\n\tvar $type='mysql';\n\t//! Database label\n\tvar $label='MySQL';\n\t//! Charset used to force charset when creating database\n\tvar $forcecharset='utf8';\t// latin1, utf8\n\t//! Collate used to force collate when creating database\n\tvar $forcecollate='utf8_general_ci';\t// latin1_swedish_ci, utf8_general_ci\n\t//! Version min database\n\tvar $versionmin=array(3,1,0);\n\t//! Resultset of last request\n\tvar $results;\n\t//! 1 if connected, 0 else\n\tvar $connected;\n\t//! 1 if database selected, 0 else\n\tvar $database_selected;\n\t//! Database name selected\n\tvar $database_name;\n\t//! Nom user base\n\tvar $database_user;\n\t//! 1 si une transaction est en cours, 0 sinon\n\tvar $transaction_opened;\n\t//! Last executed request\n\tvar $lastquery;\n\t//! Last failed executed request\n\tvar $lastqueryerror;\n\t//! Message erreur mysql\n\tvar $lasterror;\n\t//! Message erreur mysql\n\tvar $lasterrno;\n\n\tvar $ok;\n\tvar $error;\n\n\n\t/**\n\t *\tOuverture d'une connexion vers le serveur et eventuellement une database.\n\t *\t@param      type\t\tType de base de donnees (mysql ou pgsql)\n\t *\t@param\t    host\t\tAddresse de la base de donnees\n\t *\t@param\t    user\t\tNom de l'utilisateur autorise\n\t *\t@param\t    pass\t\tMot de passe\n\t *\t@param\t    name\t\tNom de la database\n\t *\t@param\t    port\t\tPort of database server\n\t *\t@return\t    int\t\t\t1 en cas de succes, 0 sinon\n\t */\n\tfunction DoliDb($type='mysql', $host, $user, $pass, $name='', $port=0)\n\t{\n\t\tglobal $conf,$langs;\n\n\t\tif (! empty($conf->db->character_set)) $this->forcecharset=$conf->db->character_set;\n\t\tif (! empty($conf->db->dolibarr_main_db_collation))\t$this->forcecollate=$conf->db->dolibarr_main_db_collation;\n\n\t\t$this->database_user=$user;\n\n\t\t$this->transaction_opened=0;\n\n\t\t//print \"Name DB: $host,$user,$pass,$name<br>\";\n\n\t\tif (! function_exists(\"mysql_connect\"))\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=\"Mysql PHP functions for using MySql driver are not available in this version of PHP. Try to use another driver.\";\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Mysql PHP functions for using Mysql driver are not available in this version of PHP. Try to use another driver.\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\tif (! $host)\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=$langs->trans(\"ErrorWrongHostParameter\");\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect, wrong host parameters\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\t// Essai connexion serveur\n\t\t$this->db = $this->connect($host, $user, $pass, $name, $port);\n\t\tif ($this->db)\n\t\t{\n\t\t\t$this->connected = 1;\n\t\t\t$this->ok = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// host, login ou password incorrect\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=mysql_error();\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect mysql_error=\".$this->error,LOG_ERR);\n\t\t}\n\n\t\t// Si connexion serveur ok et si connexion base demandee, on essaie connexion base\n\t\tif ($this->connected && $name)\n\t\t{\n\t\t\tif ($this->select_db($name))\n\t\t\t{\n\t\t\t\t$this->database_selected = 1;\n\t\t\t\t$this->database_name = $name;\n\t\t\t\t$this->ok = 1;\n\n\t\t\t\t// If client connected with different charset than Dolibarr HTML output\n\t\t\t\t$clientmustbe='';\n\t\t\t\tif (preg_match('/UTF-8/i',$conf->file->character_set_client))      $clientmustbe='utf8';\n\t\t\t\tif (preg_match('/ISO-8859-1/i',$conf->file->character_set_client)) $clientmustbe='latin1';\n\t\t\t\tif (mysql_client_encoding($this->db) != $clientmustbe)\n\t\t\t\t{\n\t\t\t\t\t$this->query(\"SET NAMES '\".$clientmustbe.\"'\", $this->db);\n\t\t\t\t\t//$this->query(\"SET CHARACTER SET \". $this->forcecharset);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->database_selected = 0;\n\t\t\t\t$this->database_name = '';\n\t\t\t\t$this->ok = 0;\n\t\t\t\t$this->error=$this->error();\n\t\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Select_db \".$this->error,LOG_ERR);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Pas de selection de base demandee, ok ou ko\n\t\t\t$this->database_selected = 0;\n\n\t\t\tif ($this->connected)\n\t\t\t{\n\t\t\t\t// If client connected with different charset than Dolibarr HTML output\n\t\t\t\t$clientmustbe='';\n\t\t\t\tif (preg_match('/UTF-8/i',$conf->file->character_set_client))      $clientmustbe='utf8';\n\t\t\t\tif (preg_match('/ISO-8859-1/i',$conf->file->character_set_client)) $clientmustbe='latin1';\n\t\t\t\tif (mysql_client_encoding($this->db) != $clientmustbe)\n\t\t\t\t{\n\t\t\t\t\t$this->query(\"SET NAMES '\".$clientmustbe.\"'\", $this->db);\n\t\t\t\t\t//$this->query(\"SET CHARACTER SET \". $this->forcecharset);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $this->ok;\n\t}\n\n\n    /**\n     *  Convert a SQL request in Mysql syntax to PostgreSQL syntax\n     *  @param     line     SQL request line to convert\n     *  @param     type     Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *  @return    string   SQL request line converted\n     */\n\tfunction convertSQLFromMysql($line,$type='ddl')\n\t{\n\t\treturn $line;\n\t}\n\n\t/**\n\t *\t\\brief      Selectionne une database.\n\t *\t\\param\t    database\t\tNom de la database\n\t *\t\\return\t    boolean         true si ok, false si ko\n\t */\n\tfunction select_db($database)\n\t{\n\t\tdol_syslog(\"DoliDB::select_db database=\".$database, LOG_DEBUG);\n\t\treturn mysql_select_db($database, $this->db);\n\t}\n\n\t/**\n\t *\t\\brief\t\tConnexion to server\n\t *\t\\param\t    host\t\tdatabase server host\n\t *\t\\param\t    login\t\tlogin\n\t *\t\\param\t    passwd\t\tpassword\n\t *\t\\param\t\tname\t\tnom de la database (ne sert pas sous mysql, sert sous pgsql)\n\t *\t\\param\t\tport\t\tPort of database server\n\t *\t\\return\t\tresource\tDatabase access handler\n\t *\t\\seealso\tclose\n\t */\n\tfunction connect($host, $login, $passwd, $name, $port=0)\n\t{\n\t\tdol_syslog(\"DoliDB::connect host=$host, port=$port, login=$login, passwd=--hidden--, name=$name\",LOG_DEBUG);\n\n\t\t$newhost=$host;\n\n\t\t// With mysql, port must be in hostname\n\t\tif ($port) $newhost.=':'.$port;\n\n\t\t$this->db  = @mysql_connect($newhost, $login, $passwd);\n\n\t\t//print \"Resultat fonction connect: \".$this->db;\n\t\treturn $this->db;\n\t}\n\n\t/**\n\t * \\brief          \tReturn label of manager\n\t * \\return\t\t\tstring      Label\n\t */\n\tfunction getLabel()\n\t{\n\t\treturn $this->label;\n\t}\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur\n\t *\t\\return\t        string      Chaine version\n\t */\n\tfunction getVersion()\n\t{\n\t\treturn mysql_get_server_info($this->db);\n\t}\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur sous forme de nombre\n\t *\t\\return\t        string      Chaine version\n\t */\n\tfunction getIntVersion()\n\t{\n\t\t$version=\t$this->getVersion();\n\t\t$vlist=preg_split('/[.-]/',$version);\n\t\tif (dol_strlen($vlist[1])==1){\n\t\t\t$vlist[1]=\"0\".$vlist[1];\n\t\t}\n\t\tif (dol_strlen($vlist[2])==1){\n\t\t\t$vlist[2]=\"0\".$vlist[2];\n\t\t}\n\t\treturn $vlist[0].$vlist[1].$vlist[2];\n\t}\n\n\n\t/**\n\t *\t\\brief          Renvoie la version du serveur dans un tableau\n\t *\t\\return\t        array  \t\tTableau de chaque niveau de version\n\t */\n\tfunction getVersionArray()\n\t{\n\t\treturn explode('.',$this->getVersion());\n\t}\n\n\n    /**\n     *  Close database connexion\n     *  @return     boolean     True if disconnect successfull, false otherwise\n     *  @see        connect\n     */\n    function close()\n    {\n        if ($this->db)\n        {\n          //dol_syslog(\"DoliDB::disconnect\",LOG_DEBUG);\n          $this->connected=0;\n          return mysql_close($this->db);\n        }\n        return false;\n    }\n\n\n\t/**\n\t *\t\\brief      Debut d'une transaction.\n\t *\t\\return\t    int         1 si ouverture transaction ok ou deja ouverte, 0 en cas d'erreur\n\t */\n\tfunction begin()\n\t{\n\t\tif (! $this->transaction_opened)\n\t\t{\n\t\t\t$ret=$this->query(\"BEGIN\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened++;\n\t\t\t\tdol_syslog(\"BEGIN Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened++;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n     * Validate a database transaction\n     * @param       log         Add more log to default log line\n     * @return      int         1 if validation is OK or transaction level no started, 0 if ERROR\n\t */\n\tfunction commit($log='')\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"COMMIT\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened=0;\n\t\t\t\tdol_syslog(\"COMMIT Transaction\".($log?' '.$log:''),LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t *\t\\brief      Annulation d'une transaction et retour aux anciennes valeurs\n\t * \t\\param\t\tlog\t\t\tAdd more log to default log line\n\t * \t\\return\t    int         1 si annulation ok ou transaction non ouverte, 0 en cas d'erreur\n\t */\n\tfunction rollback($log='')\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"ROLLBACK\");\n\t\t\t$this->transaction_opened=0;\n\t\t\tdol_syslog(\"ROLLBACK Transaction\".($log?' '.$log:''),LOG_DEBUG);\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Execute a SQL request and return the resultset\n\t * @param\t\tquery\t\t\tSQL query string\n\t * @param\t\tusesavepoint\t0=Default mode, 1=Run a savepoint before and a rollbock to savepoint if error (this allow to have some request with errors inside global transactions).\n\t * \t\t\t\t\t\t\t\tNote that with Mysql, this parameter is not used as Myssql can already commit a transaction even if one request is in error, without using savepoints.\n     * @param       type            Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n\t * @return\t    resource    \tResultset of answer\n\t */\n\tfunction query($query,$usesavepoint=0,$type='auto')\n\t{\n\t\t$query = trim($query);\n\n\t\tif (! $this->database_name)\n\t\t{\n\t\t\t// Ordre SQL ne necessitant pas de connexion a une base (exemple: CREATE DATABASE)\n\t\t\t$ret = mysql_query($query, $this->db);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmysql_select_db($this->database_name);\n\t\t\t$ret = mysql_query($query, $this->db);\n\t\t}\n\n\t\tif (! preg_match(\"/^COMMIT/i\",$query) && ! preg_match(\"/^ROLLBACK/i\",$query))\n\t\t{\n\t\t\t// Si requete utilisateur, on la sauvegarde ainsi que son resultset\n\t\t\tif (! $ret)\n\t\t\t{\n\t\t\t\t$this->lastqueryerror = $query;\n\t\t\t\t$this->lasterror = $this->error();\n\t\t\t\t$this->lasterrno = $this->errno();\n                dol_syslog(\"Mysql.lib::query SQL error: \".$query.\" \".$this->lasterrno, LOG_WARNING);\n\t\t\t}\n\t\t\t$this->lastquery=$query;\n\t\t\t$this->results = $ret;\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie la ligne courante (comme un objet) pour le curseur resultset.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    object\t\tObject result line or false if KO or end of cursor\n\t */\n\tfunction fetch_object($resultset)\n\t{\n\t\t// If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mysql_fetch_object($resultset);\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie les donnees dans un tableau.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    array\n\t */\n\tfunction fetch_array($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mysql_fetch_array($resultset);\n\t}\n\n\n\t/**\n\t *\t\\brief      Renvoie les donnees comme un tableau.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    array\n\t */\n\tfunction fetch_row($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn @mysql_fetch_row($resultset);\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie le nombre de lignes dans le resultat d'une requete SELECT\n\t *\t\\see    \taffected_rows\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return     int\t\t    Nombre de lignes\n\t */\n\tfunction num_rows($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn mysql_num_rows($resultset);\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie le nombre de lignes dans le resultat d'une requete INSERT, DELETE ou UPDATE\n\t *\t\\see    \tnum_rows\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return     int\t\t    Nombre de lignes\n\t */\n\tfunction affected_rows($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// mysql necessite un link de base pour cette fonction contrairement\n\t\t// a pqsql qui prend un resultset\n\t\treturn mysql_affected_rows($this->db);\n\t}\n\n\n\t/**\n\t *\t\\brief      Libere le dernier resultset utilise sur cette connexion.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t */\n\tfunction free($resultset=0)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// Si resultset en est un, on libere la memoire\n\t\tif (is_resource($resultset)) mysql_free_result($resultset);\n\t}\n\n\n\t/**\n\t *\t\\brief      Defini les limites de la requete.\n\t *\t\\param\t    limit       nombre maximum de lignes retournees\n\t *\t\\param\t    offset      numero de la ligne a partir de laquelle recuperer les ligne\n\t *\t\\return\t    string      chaine exprimant la syntax sql de la limite\n\t */\n\tfunction plimit($limit=0,$offset=0)\n\t{\n\t\tglobal $conf;\n\t\tif (! $limit) $limit=$conf->liste_limit;\n\t\tif ($offset > 0) return \" LIMIT $offset,$limit \";\n\t\telse return \" LIMIT $limit \";\n\t}\n\n\n\t/**\n\t * Define sort criteria of request\n\t *\n\t * @param\t    sortfield   List of sort fields\n\t * @param\t    sortorder   Sort order\n\t * @return\t    string      String to provide syntax of a sort sql string\n\t * TODO\t\t\tMutualized this into a mother class\n\t */\n\tfunction order($sortfield=0,$sortorder=0)\n\t{\n\t\tif ($sortfield)\n\t\t{\n\t\t\t$return='';\n\t\t\t$fields=explode(',',$sortfield);\n\t\t\tforeach($fields as $val)\n\t\t\t{\n\t\t\t\tif (! $return) $return.=' ORDER BY ';\n\t\t\t\telse $return.=',';\n\n\t\t\t\t$return.=preg_replace('/[^0-9a-z_\\.]/i','',$val);\n\t\t\t\tif ($sortorder) $return.=' '.preg_replace('/[^0-9a-z]/i','',$sortorder);\n\t\t\t}\n\t\t\treturn $return;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t}\n\n\n\t/**\n\t *\t   Escape a string to insert data.\n\t *     @param\t    stringtoencode\t\tString to escape\n\t *     @return\t    string\t\t\t\tString escaped\n\t */\n\tfunction escape($stringtoencode)\n\t{\n\t\treturn addslashes($stringtoencode);\n\t}\n\n\n\t/**\n\t *   Convert (by PHP) a GM Timestamp date into a string date with PHP server TZ to insert into a date field.\n\t *   Function to use to build INSERT, UPDATE or WHERE predica\n\t *   @param\t    param       Date TMS to convert\n\t *   @return\tstring      Date in a string YYYYMMDDHHMMSS\n\t */\n\tfunction idate($param)\n\t{\n\t\treturn adodb_strftime(\"%Y%m%d%H%M%S\",$param);\n\t}\n\n\t/**\n\t *\tConvert (by PHP) a PHP server TZ string date into a GM Timestamps date\n\t * \t19700101020000 -> 3600 with TZ+1\n\t * \t@param\t\tstring\t\t\tDate in a string (YYYYMMDDHHMMSS, YYYYMMDD, YYYY-MM-DD HH:MM:SS)\n\t *\t@return\t\tdate\t\t\tDate TMS\n\t */\n\tfunction jdate($string)\n\t{\n\t\t$string=preg_replace('/([^0-9])/i','',$string);\n\t\t$tmp=$string.'000000';\n\t\t$date=dol_mktime(substr($tmp,8,2),substr($tmp,10,2),substr($tmp,12,2),substr($tmp,4,2),substr($tmp,6,2),substr($tmp,0,4));\n\t\treturn $date;\n\t}\n\n\t/**\n\t *\tFormate a SQL IF\n\t *\t@param\t\ttest            chaine test\n\t *\t@param\t\tresok           resultat si test egal\n\t *\t@param\t\tresko           resultat si test non egal\n\t *\t@return\t\tstring          chaine formate SQL\n\t */\n\tfunction ifsql($test,$resok,$resko)\n\t{\n\t\treturn 'IF('.$test.','.$resok.','.$resko.')';\n\t}\n\n\n\t/**\n\t *\t\\brief      Renvoie la derniere requete soumise par la methode query()\n\t *\t\\return\t    lastquery\n\t */\n\tfunction lastquery()\n\t{\n\t\treturn $this->lastquery;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie la derniere requete en erreur\n\t *\t\\return\t    string\tlastqueryerror\n\t */\n\tfunction lastqueryerror()\n\t{\n\t\treturn $this->lastqueryerror;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie le libelle derniere erreur\n\t *\t\\return\t    string\tlasterror\n\t */\n\tfunction lasterror()\n\t{\n\t\treturn $this->lasterror;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie le code derniere erreur\n\t *\t\\return\t    string\tlasterrno\n\t */\n\tfunction lasterrno()\n\t{\n\t\treturn $this->lasterrno;\n\t}\n\n\t/**\n\t *\t\\brief     Renvoie le code erreur generique de l'operation precedente.\n\t *\t\\return    error_num       (Exemples: DB_ERROR_TABLE_ALREADY_EXISTS, DB_ERROR_RECORD_ALREADY_EXISTS...)\n\t */\n\tfunction errno()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide.\n\t\t\treturn 'DB_ERROR_FAILED_TO_CONNECT';\n\t\t}\n\t\telse {\n\t\t\t// Constants to convert a MySql error code to a generic Dolibarr error code\n\t\t\t$errorcode_map = array(\n\t\t\t1004 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1005 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1006 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1007 => 'DB_ERROR_ALREADY_EXISTS',\n\t\t\t1008 => 'DB_ERROR_CANNOT_DROP',\n\t\t\t1025 => 'DB_ERROR_NO_FOREIGN_KEY_TO_DROP',\n\t\t\t1044 => 'DB_ERROR_ACCESSDENIED',\n\t\t\t1046 => 'DB_ERROR_NODBSELECTED',\n\t\t\t1048 => 'DB_ERROR_CONSTRAINT',\n\t\t\t1050 => 'DB_ERROR_TABLE_ALREADY_EXISTS',\n\t\t\t1051 => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t1054 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1060 => 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n\t\t\t1061 => 'DB_ERROR_KEY_NAME_ALREADY_EXISTS',\n\t\t\t1062 => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n\t\t\t1064 => 'DB_ERROR_SYNTAX',\n\t\t\t1068 => 'DB_ERROR_PRIMARY_KEY_ALREADY_EXISTS',\n\t\t\t1075 => 'DB_ERROR_CANT_DROP_PRIMARY_KEY',\n\t\t\t1091 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1100 => 'DB_ERROR_NOT_LOCKED',\n\t\t\t1136 => 'DB_ERROR_VALUE_COUNT_ON_ROW',\n\t\t\t1146 => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t1216 => 'DB_ERROR_NO_PARENT',\n\t\t\t1217 => 'DB_ERROR_CHILD_EXISTS',\n\t\t\t1451 => 'DB_ERROR_CHILD_EXISTS'\n\t\t\t);\n\n\t\t\tif (isset($errorcode_map[mysql_errno($this->db)]))\n\t\t\t{\n\t\t\t\treturn $errorcode_map[mysql_errno($this->db)];\n\t\t\t}\n\t\t\t$errno=mysql_errno($this->db);\n\t\t\treturn ($errno?'DB_ERROR_'.$errno:'0');\n\t\t}\n\t}\n\n\t/**\n\t \\brief     Renvoie le texte de l'erreur mysql de l'operation precedente.\n\t \\return    error_text\n\t */\n\tfunction error()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide pour mysql_error.\n\t\t\treturn 'Not connected. Check setup parameters in conf/conf.php file and your mysql client and server versions';\n\t\t}\n\t\telse {\n\t\t\treturn mysql_error($this->db);\n\t\t}\n\t}\n\n\t/**\n\t \\brief     Recupere l'id genere par le dernier INSERT.\n\t \\param     tab     Nom de la table concernee par l'insert. Ne sert pas sous MySql mais requis pour compatibilite avec Postgresql\n\t \\return    int     id\n\t */\n\tfunction last_insert_id($tab)\n\t{\n\t\treturn mysql_insert_id($this->db);\n\t}\n\n\n\n\t// Next functions are not required. Only minor features use them.\n\t//---------------------------------------------------------------\n\n\t/**\n     *  Encrypt sensitive data in database\n     *  Warning: This function includes the escape, so it must use direct value\n     *  @param          fieldorvalue    Field name or value to encrypt\n     *  @param          withQuotes      Return string with quotes\n     *  @return         return          XXX(field) or XXX('value') or field or 'value'\n\t */\n\tfunction encrypt($fieldorvalue, $withQuotes=0)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = ($withQuotes?\"'\":\"\").$this->escape($fieldorvalue).($withQuotes?\"'\":\"\");\n\n\t\tif ($cryptType && !empty($cryptKey))\n\t\t{\n\t\t\tif ($cryptType == 2)\n\t\t\t{\n\t\t\t\t$return = 'AES_ENCRYPT('.$return.',\\''.$cryptKey.'\\')';\n\t\t\t}\n\t\t\telse if ($cryptType == 1)\n\t\t\t{\n\t\t\t\t$return = 'DES_ENCRYPT('.$return.',\\''.$cryptKey.'\\')';\n\t\t\t}\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t *\t\\brief          Decrypt sensitive data in database\n\t *\t\\param\t        value\t\t\tValue to decrypt\n\t * \t\\return\t        return\t\t\tDecrypted value if used\n\t */\n\tfunction decrypt($value)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $value;\n\n\t\tif ($cryptType && !empty($cryptKey))\n\t\t{\n\t\t\tif ($cryptType == 2)\n\t\t\t{\n\t\t\t\t$return = 'AES_DECRYPT('.$value.',\\''.$cryptKey.'\\')';\n\t\t\t}\n\t\t\telse if ($cryptType == 1)\n\t\t\t{\n\t\t\t\t$return = 'DES_DECRYPT('.$value.',\\''.$cryptKey.'\\')';\n\t\t\t}\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\n\t/**\n\t *\t\\brief          Renvoie l'id de la connexion\n\t *\t\\return\t        string      Id connexion\n\t */\n\tfunction DDLGetConnectId()\n\t{\n\t\t$resql=$this->query('SELECT CONNECTION_ID()');\n\t\t$row=$this->fetch_row($resql);\n\t\treturn $row[0];\n\t}\n\n\n\t/**\n\t *\t\\brief          Create a new database\n\t *\t\\param\t        database\t\tDatabase name to create\n\t * \t\\param\t\t\tcharset\t\t\tCharset used to store data\n\t * \t\\param\t\t\tcollation\t\tCharset used to sort data\n\t * \t\\param\t\t\towner\t\t\tUsername of database owner\n\t * \t\\return\t        resource\t\tresource defined if OK, null if KO\n\t *\t\\remarks        Do not use function xxx_create_db (xxx=mysql, ...) as they are deprecated\n\t *\t\t\t\t\tWe force to create database with charset this->forcecharset and collate this->forcecollate\n\t */\n\tfunction DDLCreateDb($database,$charset='',$collation='',$owner='')\n\t{\n\t\tif (empty($charset))   $charset=$this->forcecharset;\n\t\tif (empty($collation)) $collation=$this->collation;\n\n\t\t// ALTER DATABASE dolibarr_db DEFAULT CHARACTER SET latin DEFAULT COLLATE latin1_swedish_ci\n\t\t$sql = 'CREATE DATABASE '.$database;\n\t\t$sql.= ' DEFAULT CHARACTER SET '.$charset.' DEFAULT COLLATE '.$collation;\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\t$ret=$this->query($sql);\n\t\tif (! $ret)\n\t\t{\n\t\t\t// We try again for compatibility with Mysql < 4.1.1\n\t\t\t$sql = 'CREATE DATABASE '.$database;\n\t\t\t$ret=$this->query($sql);\n\t\t\tdol_syslog($sql,LOG_DEBUG);\n\t\t}\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief     \tList tables into a database.\n\t *\t\\param\t    database\t\tName of database\n\t *\t\\param\t    table   \t\tFilter on some tables\n\t *\t\\return\t    array\t\t\tArray list of tables\n\t */\n\tfunction DDLListTables($database, $table='')\n\t{\n\t\t$listtables=array();\n\n\t\t$like = '';\n\t\tif ($table) $like = \"LIKE '\".$table.\"'\";\n\t\t$sql=\"SHOW TABLES FROM \".$database.\" \".$like.\";\";\n\t\t//print $sql;\n\t\t$result = $this->query($sql);\n\t\twhile($row = $this->fetch_row($result))\n\t\t{\n\t\t\t$listtables[] = $row[0];\n\t\t}\n\t\treturn $listtables;\n\t}\n\n\t/**\n\t *\t\\brief     \tListe les informations des champs d'une table.\n\t *\t\\param\t    table\t\t\tNom de la table\n\t *\t\\return\t    array\t\t\tTableau des informations des champs de la table\n\t */\n\tfunction DDLInfoTable($table)\n\t{\n\t\t$infotables=array();\n\n\t\t$sql=\"SHOW FULL COLUMNS FROM \".$table.\";\";\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\t$result = $this->query($sql);\n\t\twhile($row = $this->fetch_row($result))\n\t\t{\n\t\t\t$infotables[] = $row;\n\t\t}\n\t\treturn $infotables;\n\t}\n\n\t/**\n\t *\t\\brief      Cree une table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t    fields \t\t\tTableau associatif [nom champ][tableau des descriptions]\n\t *\t\\param\t    primary_key \tNom du champ qui sera la clef primaire\n\t *\t\\param\t    unique_keys \tTableau associatifs Nom de champs qui seront clef unique => valeur\n\t *\t\\param\t    fulltext \t\tTableau des Nom de champs qui seront indexes en fulltext\n\t *\t\\param\t    key \t\t\tTableau des champs cles noms => valeur\n\t *\t\\param\t    type \t\t\tType de la table\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >=0 si OK\n\t */\n\tfunction DDLCreateTable($table,$fields,$primary_key,$type,$unique_keys=\"\",$fulltext_keys=\"\",$keys=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (fields) : type,value,attribute,null,default,extra\n\t\t// ex. : $fields['rowid'] = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql = \"create table \".$table.\"(\";\n\t\t$i=0;\n\t\tforeach($fields as $field_name => $field_desc)\n\t\t{\n\t\t\t$sqlfields[$i] = $field_name.\" \";\n\t\t\t$sqlfields[$i]  .= $field_desc['type'];\n\t\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t\t$sqlfields[$i]  .= \"(\".$field_desc['value'].\")\";\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['attribute'];\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\t\t{\n\t\t\t\tif(preg_match(\"/null/i\",$field_desc['default']))\n\t\t\t\t$sqlfields[$i]  .= \" default \".$field_desc['default'];\n\t\t\t\telse\n\t\t\t\t$sqlfields[$i]  .= \" default '\".$field_desc['default'].\"'\";\n\t\t\t}\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['null'];\n\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['extra'];\n\t\t\t$i++;\n\t\t}\n\t\tif($primary_key != \"\")\n\t\t$pk = \"primary key(\".$primary_key.\")\";\n\n\t\tif($unique_keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($unique_keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqluq[$i] = \"UNIQUE KEY '\".$key.\"' ('\".$value.\"')\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\tif($keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqlk[$i] = \"KEY \".$key.\" (\".$value.\")\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\t$sql .= implode(',',$sqlfields);\n\t\tif($primary_key != \"\")\n\t\t$sql .= \",\".$pk;\n\t\tif($unique_keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqluq);\n\t\tif($keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqlk);\n\t\t$sql .=\") type=\".$type;\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n     *  Return a pointer on fields describing table\n     *  @param      table   Nom de la table\n     *  @param      field   Optionnel : Nom du champ si l'on veut la desc d'un champ\n     *  @return     resource\n\t */\n\tfunction DDLDescTable($table,$field=\"\")\n\t{\n\t\t$sql=\"DESC \".$table.\" \".$field;\n\n\t\tdol_syslog(get_class($this).\"::DDLDescTable \".$sql,LOG_DEBUG);\n\t\t$this->results = $this->query($sql);\n\t\treturn $this->results;\n\t}\n\n    /**\n     *  Insert a new field in table\n     *  @param      table           Table name\n     *  @param      field_name      Name of field\n     *  @param      field_desc      Array with properties describing new field\n     *  @param      field_position  Optionnal ie.: \"after fielddummy\"\n     *  @return     int             <0 if KO, >0 if OK\n     */\n    function DDLAddField($table,$field_name,$field_desc,$field_position=\"\")\n    {\n        // cles recherchees dans le tableau des descriptions (field_desc) : type,value,attribute,null,default,extra\n        // ex. : $field_desc = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n        $sql= \"ALTER TABLE \".$table.\" ADD \".$field_name.\" \";\n        $sql.= $field_desc['type'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n        if (! in_array($field_desc['type'],array('date','datetime')))\n        {\n            $sql.= \"(\".$field_desc['value'].\")\";\n        }\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n        $sql.= \" \".$field_desc['attribute'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n        $sql.= \" \".$field_desc['null'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n        {\n            if(preg_match(\"/null/i\",$field_desc['default']))\n            $sql.= \" default \".$field_desc['default'];\n            else\n            $sql.= \" default '\".$field_desc['default'].\"'\";\n        }\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n        $sql.= \" \".$field_desc['extra'];\n        $sql.= \" \".$field_position;\n\n        dol_syslog(get_class($this).\"::DDLAddField \".$sql,LOG_DEBUG);\n        if(! $this->query($sql))\n        {\n            return -1;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n\t/**\n\t *\tUpdate format of a field into a table\n\t *\t@param\t    table \t\t\tName of table\n\t *\t@param\t\tfield_name \t\tName of field to modify\n\t *\t@param\t    field_desc \t\tArray with description of field format\n\t *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction DDLUpdateField($table,$field_name,$field_desc)\n\t{\n\t\t$sql = \"ALTER TABLE \".$table;\n\t\t$sql .= \" MODIFY COLUMN \".$field_name.\" \".$field_desc['type'];\n\t\tif ($field_desc['type'] == 'int' || $field_desc['type'] == 'varchar') $sql.=\"(\".$field_desc['value'].\")\";\n\n\t\tdol_syslog(get_class($this).\"::DDLUpdateField \".$sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\tDrop a field in table\n\t *\t@param\t    table \t\t\tNom de la table\n\t *\t@param\t\tfield_name \t\tNom du champ a inserer\n\t *\t@return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLDropField($table,$field_name)\n\t{\n\t\t$sql= \"ALTER TABLE \".$table.\" DROP COLUMN `\".$field_name.\"`\";\n\t\tdol_syslog(get_class($this).\"::DDLDropField \".$sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\t{\n\t\t\t$this->error=$this->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\telse return 1;\n\t}\n\n\n\t/**\n\t *\t\\brief      Create a user and privileges to connect to database (even if database does not exists yet)\n\t *\t\\param\t    dolibarr_main_db_host \t\tIp server\n\t *\t\\param\t    dolibarr_main_db_user \t\tUsername to create\n\t *\t\\param\t    dolibarr_main_db_pass \t\tPassword\n\t *\t\\param\t\tdolibarr_main_db_name\t\tDatabase name where user must be granted\n\t *\t\\return\t    int\t\t\t\t\t\t\t<0 if KO, >=0 if OK\n\t */\n\tfunction DDLCreateUser($dolibarr_main_db_host,$dolibarr_main_db_user,$dolibarr_main_db_pass,$dolibarr_main_db_name)\n\t{\n\t\t$sql = \"INSERT INTO user \";\n\t\t$sql.= \"(Host,User,password,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Index_Priv,Alter_priv,Lock_tables_priv)\";\n\t\t$sql.= \" VALUES ('\".addslashes($dolibarr_main_db_host).\"','\".addslashes($dolibarr_main_db_user).\"',password('\".addslashes($dolibarr_main_db_pass).\"')\";\n\t\t$sql.= \",'Y','Y','Y','Y','Y','Y','Y','Y','Y')\";\n\n\t\tdol_syslog(\"mysql.lib::DDLCreateUser\", LOG_DEBUG);\t// No sql to avoid password in log\n\t\t$resql=$this->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\tdol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"INSERT INTO db \";\n\t\t$sql.= \"(Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Index_Priv,Alter_priv,Lock_tables_priv)\";\n\t\t$sql.= \" VALUES ('\".addslashes($dolibarr_main_db_host).\"','\".addslashes($dolibarr_main_db_name).\"','\".addslashes($dolibarr_main_db_user).\"'\";\n\t\t$sql.= \",'Y','Y','Y','Y','Y','Y','Y','Y','Y')\";\n\n\t\tdol_syslog(\"mysql.lib::DDLCreateUser sql=\".$sql,LOG_DEBUG);\n\t\t$resql=$this->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\tdol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql=\"FLUSH Privileges\";\n\n\t\tdol_syslog(\"mysql.lib::DDLCreateUser sql=\".$sql,LOG_DEBUG);\n\t\t$resql=$this->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\tdol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn charset used to store data in database\n\t *\t\\return\t\tstring\t\tCharset\n\t */\n\tfunction getDefaultCharacterSetDatabase()\n\t{\n\t\t$resql=$this->query('SHOW VARIABLES LIKE \\'character_set_database\\'');\n\t\tif (!$resql)\n\t\t{\n\t\t\t// version Mysql < 4.1.1\n\t\t\treturn $this->forcecharset;\n\t\t}\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['Value'];\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn list of available charset that can be used to store data in database\n\t *\t\\return\t\tarray\t\tList of Charset\n\t */\n\tfunction getListOfCharacterSet()\n\t{\n\t\t$resql=$this->query('SHOW CHARSET');\n\t\t$liste = array();\n\t\tif ($resql)\n\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t\t$liste[$i]['charset'] = $obj->Charset;\n\t\t\t\t$liste[$i]['description'] = $obj->Description;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t} else {\n\t\t\t// version Mysql < 4.1.1\n\t\t\treturn null;\n\t\t}\n\t\treturn $liste;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn collation used in database\n\t *\t\\return\t\tstring\t\tCollation value\n\t */\n\tfunction getDefaultCollationDatabase()\n\t{\n\t\t$resql=$this->query('SHOW VARIABLES LIKE \\'collation_database\\'');\n\t\tif (!$resql)\n\t\t{\n\t\t\t// version Mysql < 4.1.1\n\t\t\treturn $this->forcecollate;\n\t\t}\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['Value'];\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn list of available collation that can be used for database\n\t *\t\\return\t\tarray\t\tListe of Collation\n\t */\n\tfunction getListOfCollation()\n\t{\n\t\t$resql=$this->query('SHOW COLLATION');\n\t\t$liste = array();\n\t\tif ($resql)\n\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t\t$liste[$i]['collation'] = $obj->Collation;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t} else {\n\t\t\t// version Mysql < 4.1.1\n\t\t\treturn null;\n\t\t}\n\t\treturn $liste;\n\t}\n\n\t/**\n\t *\tReturn full path of dump program\n\t *\t@return\t\tstring\t\tFull path of dump program\n\t */\n\tfunction getPathOfDump()\n\t{\n\t\t$fullpathofdump='/pathtomysqldump/mysqldump';\n\n\t\t$resql=$this->query('SHOW VARIABLES LIKE \\'basedir\\'');\n\t\tif ($resql)\n\t\t{\n\t\t\t$liste=$this->fetch_array($resql);\n\t\t\t$basedir=$liste['Value'];\n\t\t\t$fullpathofdump=$basedir.(preg_match('/\\/$/',$basedir)?'':'/').'bin/mysqldump';\n\t\t}\n\t\treturn $fullpathofdump;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn full path of restore program\n\t *\t\\return\t\tstring\t\tFull path of restore program\n\t */\n\tfunction getPathOfRestore()\n\t{\n\t\t$fullpathofimport='/pathtomysql/mysql';\n\n\t\t$resql=$this->query('SHOW VARIABLES LIKE \\'basedir\\'');\n\t\tif ($resql)\n\t\t{\n\t\t\t$liste=$this->fetch_array($resql);\n\t\t\t$basedir=$liste['Value'];\n\t\t\t$fullpathofimport=$basedir.(preg_match('/\\/$/',$basedir)?'':'/').'bin/mysql';\n\t\t}\n\t\treturn $fullpathofimport;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn value of server parameters\n\t * \t\\param\t\tfilter\t\tFilter list on a particular value\n\t * \t\\return\t\tstring\t\tValue for parameter\n\t */\n\tfunction getServerParametersValues($filter='')\n\t{\n\t\t$result=array();\n\n\t\t$sql='SHOW VARIABLES';\n\t\tif ($filter) $sql.=\" LIKE '\".addslashes($key).\"'\";\n\t\t$resql=$this->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$this->fetch_object($resql);\n\t\t\t$result[$obj->Variable_name]=$obj->Value;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn value of server status\n\t * \t\\param\t\tfilter\t\tFilter list on a particular value\n\t * \t\\return\t\tstring\t\tValue for parameter\n\t */\n\tfunction getServerStatusValues($key,$filter='')\n\t{\n\t\t$result=array();\n\n\t\t$sql='SHOW STATUS';\n\t\tif ($filter) $sql.=\" LIKE '\".addslashes($key).\"'\";\n\t\t$resql=$this->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$this->fetch_object($resql);\n\t\t\t$result[$obj->Variable_name]=$obj->Value;\n\t\t}\n\n\t\treturn $result;\n\t}\n}\n\n?>\n", "<?php\n/* Copyright (C) 2001      Fabien Seisen        <seisen@linuxfr.org>\n * Copyright (C) 2002-2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2011 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2006      Andre Cianfarani     <acianfa@free.fr>\n * Copyright (C) 2005-2009 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/lib/databases/mysqli.lib.php\n *\t\\brief      Class file to manage Dolibarr database access for a Mysql database\n *\t\\version\t$Id: mysqli.lib.php,v 1.115 2011/08/04 13:58:55 eldy Exp $\n */\n\n// For compatibility during upgrade\nif (! defined('DOL_DOCUMENT_ROOT'))\t define('DOL_DOCUMENT_ROOT', '../..');\nif (! defined('ADODB_DATE_VERSION')) include_once(DOL_DOCUMENT_ROOT.\"/includes/adodbtime/adodb-time.inc.php\");\n\n\n/**\n *\t\\class      DoliDb\n *\t\\brief      Class to manage Dolibarr database access for a Mysql database\n */\nclass DoliDb\n{\n    //! Database handler\n    var $db;\n    //! Database type\n    var $type='mysqli';\n    //! Database label\n    var $label='MySQL';\n    //! Charset used to force charset when creating database\n    var $forcecharset='utf8';\t// latin1, utf8\n    //! Collate used to force collate when creating database\n    var $forcecollate='utf8_general_ci';\t// latin1_swedish_ci, utf8_general_ci\n    //! Version min database\n    var $versionmin=array(4,1,0);\n    //! Resultset of last request\n    var $results;\n    //! 1 if connected, 0 else\n    var $connected;\n    //! 1 if database selected, 0 else\n    var $database_selected;\n    //! Database name selected\n    var $database_name;\n    //! Nom user base\n    var $database_user;\n    //! 1 si une transaction est en cours, 0 sinon\n    var $transaction_opened;\n    //! Last executed request\n    var $lastquery;\n    //! Last failed executed request\n    var $lastqueryerror;\n    //! Message erreur mysql\n    var $lasterror;\n    //! Message erreur mysql\n    var $lasterrno;\n\n    var $ok;\n    var $error;\n\n\n    /**\n     *\tOuverture d'une connexion vers le serveur et eventuellement une database.\n     *\t@param     type\t\tType de base de donnees (mysql ou pgsql)\n     *\t@param\t   host\t\tAddresse de la base de donnees\n     *\t@param\t   user\t\tNom de l'utilisateur autorise\n     *\t@param\t   pass\t\tMot de passe\n     *\t@param\t   name\t\tNom de la database\n     *\t@param\t   port\t\tPort of database server\n     *\t@return    int\t\t1 en cas de succes, 0 sinon\n     */\n    function DoliDb($type='mysqli', $host, $user, $pass, $name='', $port=0)\n    {\n        global $conf,$langs;\n\n        if (! empty($conf->db->character_set)) $this->forcecharset=$conf->db->character_set;\n        if (! empty($conf->db->dolibarr_main_db_collation)) $this->forcecollate=$conf->db->dolibarr_main_db_collation;\n\n        $this->database_user=$user;\n\n        $this->transaction_opened=0;\n\n        //print \"Name DB: $host,$user,$pass,$name<br>\";\n\n        if (! function_exists(\"mysqli_connect\"))\n        {\n            $this->connected = 0;\n            $this->ok = 0;\n            $this->error=\"Mysqli PHP functions for using Mysqli driver are not available in this version of PHP. Try to use another driver.\";\n            dol_syslog(\"DoliDB::DoliDB : Mysqli PHP functions for using Mysqli driver are not available in this version of PHP. Try to use another driver.\",LOG_ERR);\n            return $this->ok;\n        }\n\n        if (! $host)\n        {\n            $this->connected = 0;\n            $this->ok = 0;\n            $this->error=$langs->trans(\"ErrorWrongHostParameter\");\n            dol_syslog(\"DoliDB::DoliDB : Erreur Connect, wrong host parameters\",LOG_ERR);\n            return $this->ok;\n        }\n\n        // Essai connexion serveur\n        // We do not try to connect to database, only to server. Connect to database is done later in constrcutor\n        $this->db = $this->connect($host, $user, $pass, '', $port);\n\n        if ($this->db)\n        {\n            $this->connected = 1;\n            $this->ok = 1;\n        }\n        else\n        {\n            // host, login ou password incorrect\n            $this->connected = 0;\n            $this->ok = 0;\n            $this->error=mysqli_connect_error();\n            dol_syslog(\"DoliDB::DoliDB : Erreur Connect mysqli_connect_error=\".$this->error,LOG_ERR);\n        }\n\n        // Si connexion serveur ok et si connexion base demandee, on essaie connexion base\n        if ($this->connected && $name)\n        {\n            if ($this->select_db($name))\n            {\n                $this->database_selected = 1;\n                $this->database_name = $name;\n                $this->ok = 1;\n\n                // If client connected with different charset than Dolibarr HTML output\n                $clientmustbe='';\n                if (preg_match('/UTF-8/i',$conf->file->character_set_client))      $clientmustbe='utf8';\n                if (preg_match('/ISO-8859-1/i',$conf->file->character_set_client)) $clientmustbe='latin1';\n                if (mysqli_client_encoding($this->db) != $clientmustbe)\n                {\n                    $this->query(\"SET NAMES '\".$clientmustbe.\"'\", $this->db);\n                    //$this->query(\"SET CHARACTER SET \". $this->forcecharset);\n                }\n            }\n            else\n            {\n                $this->database_selected = 0;\n                $this->database_name = '';\n                $this->ok = 0;\n                $this->error=$this->error();\n                dol_syslog(\"DoliDB::DoliDB : Erreur Select_db \".$this->error,LOG_ERR);\n            }\n        }\n        else\n        {\n            // Pas de selection de base demandee, ok ou ko\n            $this->database_selected = 0;\n\n            if ($this->connected)\n            {\n                // If client connected with different charset than Dolibarr HTML output\n                $clientmustbe='';\n                if (preg_match('/UTF-8/i',$conf->file->character_set_client))      $clientmustbe='utf8';\n                if (preg_match('/ISO-8859-1/i',$conf->file->character_set_client)) $clientmustbe='latin1';\n                if (mysqli_client_encoding($this->db) != $clientmustbe)\n                {\n                    $this->query(\"SET NAMES '\".$clientmustbe.\"'\", $this->db);\n                    //$this->query(\"SET CHARACTER SET \". $this->forcecharset);\n                }\n            }\n        }\n\n        return $this->ok;\n    }\n\n\n    /**\n     *  Convert a SQL request in Mysql syntax to PostgreSQL syntax\n     *  @param     line     SQL request line to convert\n     *  @param     type     Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *  @return    string   SQL request line converted\n     */\n    function convertSQLFromMysql($line,$type='ddl')\n    {\n        return $line;\n    }\n\n    /**\n     *\t\\brief      Selectionne une database.\n     *\t\\param\t    database\t\tNom de la database\n     *\t\\return\t    boolean         true si ok, false si ko\n     */\n    function select_db($database)\n    {\n        dol_syslog(\"DoliDB::select_db database=\".$database, LOG_DEBUG);\n        return mysqli_select_db($this->db,$database);\n    }\n\n\n    /**\n     *\t\\brief      Connexion to server\n     *\t\\param\t    host\t\tdatabase server host\n     *\t\\param\t    login\t\tlogin\n     *\t\\param\t    passwd\t\tpassword\n     *\t\\param\t\tname\t\tnom de la database (ne sert pas sous mysql, sert sous pgsql)\n     *\t\\param\t\tport\t\tPort of database server\n     *\t\\return\t\tresource\tDatabase access handler\n     *\t\\seealso\tclose\n     */\n    function connect($host, $login, $passwd, $name, $port=0)\n    {\n        dol_syslog(\"DoliDB::connect host=$host, port=$port, login=$login, passwd=--hidden--, name=$name\",LOG_DEBUG);\n\n        $newhost=$host;\n        $newport=$port;\n\n        // With mysqli, port must be in connect parameters\n        if (! $newport) $newport=3306;\n\n        $this->db  = @mysqli_connect($newhost, $login, $passwd, $name, $newport);\n\n        //print \"Resultat fonction connect: \".$this->db;\n        return $this->db;\n    }\n\n    /**\n     * \\brief          \tReturn label of manager\n     * \\return\t\t\tstring      Label\n     */\n    function getLabel()\n    {\n        return $this->label;\n    }\n\n    /**\n     *\t\\brief          Renvoie la version du serveur\n     *\t\\return\t        string      Chaine version\n     */\n    function getVersion()\n    {\n        //        $resql=$this->query('SELECT VERSION()');\n        //        $row=$this->fetch_row($resql);\n        //        return $row[0];\n        return mysqli_get_server_info($this->db);\n    }\n\n    /**\n     *\t\\brief          Renvoie la version du serveur sous forme de nombre\n     *\t\\return\t        string      Chaine version\n     */\n    function getIntVersion()\n    {\n        $version=\t$this->getVersion();\n        $vlist=preg_split('/[.-]/',$version);\n        if (dol_strlen($vlist[1])==1){\n            $vlist[1]=\"0\".$vlist[1];\n        }\n        if (dol_strlen($vlist[2])==1){\n            $vlist[2]=\"0\".$vlist[2];\n        }\n        return $vlist[0].$vlist[1].$vlist[2];\n    }\n\n    /**\n     *\t\\brief          Renvoie la version du serveur dans un tableau\n     *\t\\return\t        array  \t\tTableau de chaque niveau de version\n     */\n    function getVersionArray()\n    {\n        return explode('.',$this->getVersion());\n    }\n\n\n    /**\n     *\tClose database connexion\n     *\t@return\t    boolean     True if disconnect successfull, false otherwise\n     *\t@see    \tconnect\n     */\n    function close()\n    {\n        if ($this->db)\n        {\n            //dol_syslog(\"DoliDB::disconnect\",LOG_DEBUG);\n            $this->connected=0;\n            return mysqli_close($this->db);\n        }\n        return false;\n    }\n\n\n    /**\n     *\t\\brief      Debut d'une transaction.\n     *\t\\return\t    int         1 si ouverture transaction ok ou deja ouverte, 0 en cas d'erreur\n     */\n    function begin()\n    {\n        if (! $this->transaction_opened)\n        {\n            $ret=$this->query(\"BEGIN\");\n            if ($ret)\n            {\n                $this->transaction_opened++;\n                dol_syslog(\"BEGIN Transaction\",LOG_DEBUG);\n            }\n            return $ret;\n        }\n        else\n        {\n            $this->transaction_opened++;\n            return 1;\n        }\n    }\n\n    /**\n     * Validate a database transaction\n     * @param\t\tlog\t\t\tAdd more log to default log line\n     * @return\t    int         1 if validation is OK or transaction level no started, 0 if ERROR\n     */\n    function commit($log='')\n    {\n        if ($this->transaction_opened<=1)\n        {\n            $ret=$this->query(\"COMMIT\");\n            if ($ret)\n            {\n                $this->transaction_opened=0;\n                dol_syslog(\"COMMIT Transaction\".($log?' '.$log:''),LOG_DEBUG);\n            }\n            return $ret;\n        }\n        else\n        {\n            $this->transaction_opened--;\n            return 1;\n        }\n    }\n\n    /**\n     *\t\\brief      Annulation d'une transaction et retour aux anciennes valeurs\n     * \t\\param\t\tlog\t\t\tAdd more log to default log line\n     * \t\\return\t    int         1 si annulation ok ou transaction non ouverte, 0 en cas d'erreur\n     */\n    function rollback($log='')\n    {\n        if ($this->transaction_opened<=1)\n        {\n            $ret=$this->query(\"ROLLBACK\");\n            $this->transaction_opened=0;\n            dol_syslog(\"ROLLBACK Transaction\".($log?' '.$log:''),LOG_DEBUG);\n            return $ret;\n        }\n        else\n        {\n            $this->transaction_opened--;\n            return 1;\n        }\n    }\n\n    /**\n     * \tExecute a SQL request and return the resultset\n     * \t@param\t\tquery\t\t\tSQL query string\n     * \t@param\t\tusesavepoint\t0=Default mode, 1=Run a savepoint before and a rollbock to savepoint if error (this allow to have some request with errors inside global transactions).\n     * \t\t\t\t\t\t\t\tNote that with Mysql, this parameter is not used as Myssql can already commit a transaction even if one request is in error, without using savepoints.\n     *  @param      type            Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n     *\t@return\t    resource    \tResultset of answer\n     */\n    function query($query,$usesavepoint=0,$type='auto')\n    {\n        $query = trim($query);\n        if (! $this->database_name)\n        {\n            // Ordre SQL ne necessitant pas de connexion a une base (exemple: CREATE DATABASE)\n            $ret = mysqli_query($this->db,$query);\n        }\n        else\n        {\n            $ret = mysqli_query($this->db,$query);\n        }\n\n        if (! preg_match(\"/^COMMIT/i\",$query) && ! preg_match(\"/^ROLLBACK/i\",$query))\n        {\n            // Si requete utilisateur, on la sauvegarde ainsi que son resultset\n            if (! $ret)\n            {\n                $this->lastqueryerror = $query;\n                $this->lasterror = $this->error();\n                $this->lasterrno = $this->errno();\n                dol_syslog(\"Mysqli.lib::query SQL error: \".$query.\" \".$this->lasterrno, LOG_WARNING);\n            }\n            $this->lastquery=$query;\n            $this->results = $ret;\n        }\n\n        return $ret;\n    }\n\n    /**\n     *\t\\brief      Renvoie la ligne courante (comme un objet) pour le curseur resultset.\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return\t    object\t\tObject result line or false if KO or end of cursor\n     */\n    function fetch_object($resultset)\n    {\n        // Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        return mysqli_fetch_object($resultset);\n    }\n\n\n    /**\n     *\t\\brief      Renvoie les donnees dans un tableau.\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return\t    array\n     */\n    function fetch_array($resultset)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        return mysqli_fetch_array($resultset);\n    }\n\n    /**\n     *\t\\brief      Renvoie les donnees comme un tableau.\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return\t    array\n     */\n    function fetch_row($resultset)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_bool($resultset))\n        {\n            if (! is_object($resultset)) { $resultset=$this->results; }\n            return mysqli_fetch_row($resultset);\n        }\n        else\n        {\n            // si le curseur est un booleen on retourne la valeur 0\n            return 0;\n        }\n    }\n\n    /**\n     *\t\\brief      Renvoie le nombre de lignes dans le resultat d'une requete SELECT\n     *\t\\see    \taffected_rows\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return     int\t\t    Nombre de lignes\n     */\n    function num_rows($resultset)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        return mysqli_num_rows($resultset);\n    }\n\n    /**\n     *\t\\brief      Renvoie le nombre de lignes dans le resultat d'une requete INSERT, DELETE ou UPDATE\n     *\t\\see    \tnum_rows\n     *\t\\param      resultset   Curseur de la requete voulue\n     *\t\\return     int\t\t    Nombre de lignes\n     */\n\n    function affected_rows($resultset)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        // mysql necessite un link de base pour cette fonction contrairement\n        // a pqsql qui prend un resultset\n        return mysqli_affected_rows($this->db);\n    }\n\n\n    /**\n     *\t\\brief      Libere le dernier resultset utilise sur cette connexion.\n     *\t\\param      resultset   Curseur de la requete voulue\n     */\n    function free($resultset=0)\n    {\n        // If resultset not provided, we take the last used by connexion\n        if (! is_object($resultset)) { $resultset=$this->results; }\n        // Si resultset en est un, on libere la memoire\n        if (is_object($resultset)) mysqli_free_result($resultset);\n    }\n\n\n    /**\n     *\t\\brief      Defini les limites de la requete.\n     *\t\\param\t    limit       nombre maximum de lignes retournees\n     *\t\\param\t    offset      numero de la ligne a partir de laquelle recuperer les ligne\n     *\t\\return\t    string      chaine exprimant la syntax sql de la limite\n     */\n    function plimit($limit=0,$offset=0)\n    {\n        global $conf;\n        if (! $limit) $limit=$conf->liste_limit;\n        if ($offset > 0) return \" LIMIT $offset,$limit \";\n        else return \" LIMIT $limit \";\n    }\n\n\n    /**\n     * Define sort criteria of request\n     * @param\t    sortfield   List of sort fields\n     * @param\t    sortorder   Sort order\n     * @return\t    string      String to provide syntax of a sort sql string\n     * TODO\t\t\tMutualized this into a mother class\n     */\n    function order($sortfield=0,$sortorder=0)\n    {\n        if ($sortfield)\n        {\n            $return='';\n            $fields=explode(',',$sortfield);\n            foreach($fields as $val)\n            {\n                if (! $return) $return.=' ORDER BY ';\n                else $return.=',';\n\n\t\t\t\t$return.=preg_replace('/[^0-9a-z_\\.]/i','',$val);\n                if ($sortorder) $return.=' '.preg_replace('/[^0-9a-z]/i','',$sortorder);\n            }\n            return $return;\n        }\n        else\n        {\n            return '';\n        }\n    }\n\n\n    /**\n     *\tEscape a string to insert data.\n     *\t@param\t    stringtoencode\t\tString to escape\n     *\t@return\t    string\t\t\t\tString escaped\n     */\n    function escape($stringtoencode)\n    {\n        return addslashes($stringtoencode);\n    }\n\n    /**\n     *   Convert (by PHP) a GM Timestamp date into a PHP server TZ to insert into a date field.\n     *   Function to use to build INSERT, UPDATE or WHERE predica\n     *   @param\t    param       Date TMS to convert\n     *   @return\tstring      Date in a string YYYYMMDDHHMMSS\n     */\n    function idate($param)\n    {\n        return adodb_strftime(\"%Y%m%d%H%M%S\",$param);\n    }\n\n    /**\n     *\tConvert (by PHP) a PHP server TZ string date into a GM Timestamps date\n     * \t19700101020000 -> 3600 with TZ+1\n     * \t@param\t\tstring\t\t\tDate in a string (YYYYMMDDHHMMSS, YYYYMMDD, YYYY-MM-DD HH:MM:SS)\n     *\t@return\t\tdate\t\t\tDate TMS\n     */\n    function jdate($string)\n    {\n        $string=preg_replace('/([^0-9])/i','',$string);\n        $tmp=$string.'000000';\n        $date=dol_mktime(substr($tmp,8,2),substr($tmp,10,2),substr($tmp,12,2),substr($tmp,4,2),substr($tmp,6,2),substr($tmp,0,4));\n        return $date;\n    }\n\n    /**\n     *  Formate a SQL IF\n     *\t@param\t\ttest            chaine test\n     *\t@param\t\tresok           resultat si test egal\n     *\t@param\t\tresko           resultat si test non egal\n     *\t@return\t\tstring          chaine formatee SQL\n     */\n    function ifsql($test,$resok,$resko)\n    {\n        return 'IF('.$test.','.$resok.','.$resko.')';\n    }\n\n\n    /**\n     *\t\\brief      Renvoie la derniere requete soumise par la methode query()\n     *\t\\return\t    lastquery\n     */\n    function lastquery()\n    {\n        return $this->lastquery;\n    }\n\n    /**\n     *\t\\brief      Renvoie la derniere requete en erreur\n     *\t\\return\t    string\tlastqueryerror\n     */\n    function lastqueryerror()\n    {\n        return $this->lastqueryerror;\n    }\n\n    /**\n     *\t\\brief      Renvoie le libelle derniere erreur\n     *\t\\return\t    string\tlasterror\n     */\n    function lasterror()\n    {\n        return $this->lasterror;\n    }\n\n    /**\n     *\t\\brief      Renvoie le code derniere erreur\n     *\t\\return\t    string\tlasterrno\n     */\n    function lasterrno()\n    {\n        return $this->lasterrno;\n    }\n\n    /**\n     *\t\\brief     Renvoie le code erreur generique de l'operation precedente.\n     *\t\\return    error_num       (Exemples: DB_ERROR_TABLE_ALREADY_EXISTS, DB_ERROR_RECORD_ALREADY_EXISTS...)\n     */\n    function errno()\n    {\n        if (! $this->connected) {\n            // Si il y a eu echec de connexion, $this->db n'est pas valide.\n            return 'DB_ERROR_FAILED_TO_CONNECT';\n        }\n        else {\n            // Constants to convert a MySql error code to a generic Dolibarr error code\n            $errorcode_map = array(\n            1004 => 'DB_ERROR_CANNOT_CREATE',\n            1005 => 'DB_ERROR_CANNOT_CREATE',\n            1006 => 'DB_ERROR_CANNOT_CREATE',\n            1007 => 'DB_ERROR_ALREADY_EXISTS',\n            1008 => 'DB_ERROR_CANNOT_DROP',\n            1025 => 'DB_ERROR_NO_FOREIGN_KEY_TO_DROP',\n            1044 => 'DB_ERROR_ACCESSDENIED',\n            1046 => 'DB_ERROR_NODBSELECTED',\n            1048 => 'DB_ERROR_CONSTRAINT',\n            1050 => 'DB_ERROR_TABLE_ALREADY_EXISTS',\n            1051 => 'DB_ERROR_NOSUCHTABLE',\n            1054 => 'DB_ERROR_NOSUCHFIELD',\n            1060 => 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n            1061 => 'DB_ERROR_KEY_NAME_ALREADY_EXISTS',\n            1062 => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n            1064 => 'DB_ERROR_SYNTAX',\n            1068 => 'DB_ERROR_PRIMARY_KEY_ALREADY_EXISTS',\n            1075 => 'DB_ERROR_CANT_DROP_PRIMARY_KEY',\n            1091 => 'DB_ERROR_NOSUCHFIELD',\n            1100 => 'DB_ERROR_NOT_LOCKED',\n            1136 => 'DB_ERROR_VALUE_COUNT_ON_ROW',\n            1146 => 'DB_ERROR_NOSUCHTABLE',\n            1216 => 'DB_ERROR_NO_PARENT',\n            1217 => 'DB_ERROR_CHILD_EXISTS',\n            1451 => 'DB_ERROR_CHILD_EXISTS'\n            );\n\n            if (isset($errorcode_map[mysqli_errno($this->db)]))\n            {\n                return $errorcode_map[mysqli_errno($this->db)];\n            }\n            $errno=mysqli_errno($this->db);\n            return ($errno?'DB_ERROR_'.$errno:'0');\n        }\n    }\n\n    /**\n     *\t\\brief     Renvoie le texte de l'erreur mysql de l'operation precedente.\n     *\t\\return    error_text\n     */\n    function error()\n    {\n        if (! $this->connected) {\n            // Si il y a eu echec de connexion, $this->db n'est pas valide pour mysqli_error.\n            return 'Not connected. Check setup parameters in conf/conf.php file and your mysql client and server versions';\n        }\n        else {\n            return mysqli_error($this->db);\n        }\n    }\n\n    /**\n     *\t\\brief     Recupere l'id genere par le dernier INSERT.\n     *\t\\param     tab     Nom de la table concernee par l'insert. Ne sert pas sous MySql mais requis pour compatibilite avec Postgresql\n     *\t\\return    int     id\n     */\n    function last_insert_id($tab)\n    {\n        return mysqli_insert_id($this->db);\n    }\n\n    /**\n     *\tEncrypt sensitive data in database\n     *  Warning: This function includes the escape, so it must use direct value\n     *\t@param\t        fieldorvalue\tField name or value to encrypt\n     * \t@param\t\t\twithQuotes\t\tReturn string with quotes\n     * \t@return\t        return\t\t\tXXX(field) or XXX('value') or field or 'value'\n     *\n     */\n    function encrypt($fieldorvalue, $withQuotes=0)\n    {\n        global $conf;\n\n        // Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n        $cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n        //Encryption key\n        $cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n        $return = ($withQuotes?\"'\":\"\").$this->escape($fieldorvalue).($withQuotes?\"'\":\"\");\n\n        if ($cryptType && !empty($cryptKey))\n        {\n            if ($cryptType == 2)\n            {\n                $return = 'AES_ENCRYPT('.$return.',\\''.$cryptKey.'\\')';\n            }\n            else if ($cryptType == 1)\n            {\n                $return = 'DES_ENCRYPT('.$return.',\\''.$cryptKey.'\\')';\n            }\n        }\n\n        return $return;\n    }\n\n    /**\n     *\t\\brief          Decrypt sensitive data in database\n     *\t\\param\t        value\t\t\tValue to decrypt\n     * \t\\return\t        return\t\t\tDecrypted value if used\n     */\n    function decrypt($value)\n    {\n        global $conf;\n\n        // Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n        $cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n        //Encryption key\n        $cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n        $return = $value;\n\n        if ($cryptType && !empty($cryptKey))\n        {\n            if ($cryptType == 2)\n            {\n                $return = 'AES_DECRYPT('.$value.',\\''.$cryptKey.'\\')';\n            }\n            else if ($cryptType == 1)\n            {\n                $return = 'DES_DECRYPT('.$value.',\\''.$cryptKey.'\\')';\n            }\n        }\n\n        return $return;\n    }\n\n\n    // Next functions are not required. Only minor features use them.\n    //---------------------------------------------------------------\n\n    /**\n     *\t\\brief          Renvoie l'id de la connexion\n     *\t\\return\t        string      Id connexion\n     */\n    function DDLGetConnectId()\n    {\n        $resql=$this->query('SELECT CONNECTION_ID()');\n        $row=$this->fetch_row($resql);\n        return $row[0];\n    }\n\n    /**\n     *\t\\brief          Create a new database\n     *\t\\param\t        database\t\tDatabase name to create\n     * \t\\param\t\t\tcharset\t\t\tCharset used to store data\n     * \t\\param\t\t\tcollation\t\tCharset used to sort data\n     * \t\\param\t\t\towner\t\t\tUsername of database owner\n     * \t\\return\t        resource\t\tresource defined if OK, null if KO\n     *\t\\remarks        Do not use function xxx_create_db (xxx=mysql, ...) as they are deprecated\n     *\t\t\t\t\tWe force to create database with charset this->forcecharset and collate this->forcecollate\n     */\n    function DDLCreateDb($database,$charset='',$collation='',$owner='')\n    {\n        if (empty($charset))   $charset=$this->forcecharset;\n        if (empty($collation)) $collation=$this->collation;\n\n        // ALTER DATABASE dolibarr_db DEFAULT CHARACTER SET latin DEFAULT COLLATE latin1_swedish_ci\n        $sql = 'CREATE DATABASE '.$database;\n        $sql.= ' DEFAULT CHARACTER SET '.$charset.' DEFAULT COLLATE '.$collation;\n\n        dol_syslog($sql,LOG_DEBUG);\n        $ret=$this->query($sql);\n        if (! $ret)\n        {\n            // We try again for compatibility with Mysql < 4.1.1\n            $sql = 'CREATE DATABASE '.$database;\n            $ret=$this->query($sql);\n            dol_syslog($sql,LOG_DEBUG);\n        }\n        return $ret;\n    }\n\n    /**\n     *\t\\brief     \tList tables into a database.\n     *\t\\param\t    database\t\tName of database\n     *\t\\param\t    table   \t\tFilter on some tables\n     *\t\\return\t    array\t\t\tArray list of tables\n     */\n    function DDLListTables($database, $table='')\n    {\n        $listtables=array();\n\n        $like = '';\n        if ($table) $like = \"LIKE '\".$table.\"'\";\n        $sql=\"SHOW TABLES FROM \".$database.\" \".$like.\";\";\n        //print $sql;\n        $result = $this->query($sql);\n        while($row = $this->fetch_row($result))\n        {\n            $listtables[] = $row[0];\n        }\n        return $listtables;\n    }\n\n    /**\n     *\t\\brief     \tListe les informations des champs d'une table.\n     *\t\\param\t    table\t\t\tNom de la table\n     *\t\\return\t    array\t\t\tTableau des informations des champs de la table\n     */\n    function DDLInfoTable($table)\n    {\n        $infotables=array();\n\n        $sql=\"SHOW FULL COLUMNS FROM \".$table.\";\";\n\n        dol_syslog($sql,LOG_DEBUG);\n        $result = $this->query($sql);\n        while($row = $this->fetch_row($result))\n        {\n            $infotables[] = $row;\n        }\n        return $infotables;\n    }\n\n    /**\n     *\t\\brief      Cree une table\n     *\t\\param\t    table \t\t\tNom de la table\n     *\t\\param\t    fields \t\t\tTableau associatif [nom champ][tableau des descriptions]\n     *\t\\param\t    primary_key \tNom du champ qui sera la clef primaire\n     *\t\\param\t    unique_keys \tTableau associatifs Nom de champs qui seront clef unique => valeur\n     *\t\\param\t    fulltext \t\tTableau des Nom de champs qui seront indexes en fulltext\n     *\t\\param\t    key \t\t\tTableau des champs cles noms => valeur\n     *\t\\param\t    type \t\t\tType de la table\n     *\t\\return\t    int\t\t\t\t<0 si KO, >=0 si OK\n     */\n    function DDLCreateTable($table,$fields,$primary_key,$type,$unique_keys=\"\",$fulltext_keys=\"\",$keys=\"\")\n    {\n        // cles recherchees dans le tableau des descriptions (fields) : type,value,attribute,null,default,extra\n        // ex. : $fields['rowid'] = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n        $sql = \"create table \".$table.\"(\";\n        $i=0;\n        foreach($fields as $field_name => $field_desc)\n        {\n            $sqlfields[$i] = $field_name.\" \";\n            $sqlfields[$i]  .= $field_desc['type'];\n            if( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n            $sqlfields[$i]  .= \"(\".$field_desc['value'].\")\";\n            else if( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n            $sqlfields[$i]  .= \" \".$field_desc['attribute'];\n            else if( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n            {\n                if(preg_match(\"/null/i\",$field_desc['default']))\n                $sqlfields[$i]  .= \" default \".$field_desc['default'];\n                else\n                $sqlfields[$i]  .= \" default '\".$field_desc['default'].\"'\";\n            }\n            else if( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n            $sqlfields[$i]  .= \" \".$field_desc['null'];\n\n            else if( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n            $sqlfields[$i]  .= \" \".$field_desc['extra'];\n            $i++;\n        }\n        if($primary_key != \"\")\n        $pk = \"primary key(\".$primary_key.\")\";\n\n        if($unique_keys != \"\")\n        {\n            $i = 0;\n            foreach($unique_keys as $key => $value)\n            {\n                $sqluq[$i] = \"UNIQUE KEY '\".$key.\"' ('\".$value.\"')\";\n                $i++;\n            }\n        }\n        if($keys != \"\")\n        {\n            $i = 0;\n            foreach($keys as $key => $value)\n            {\n                $sqlk[$i] = \"KEY \".$key.\" (\".$value.\")\";\n                $i++;\n            }\n        }\n        $sql .= implode(',',$sqlfields);\n        if($primary_key != \"\")\n        $sql .= \",\".$pk;\n        if($unique_keys != \"\")\n        $sql .= \",\".implode(',',$sqluq);\n        if($keys != \"\")\n        $sql .= \",\".implode(',',$sqlk);\n        $sql .=\") type=\".$type;\n\n        dol_syslog($sql,LOG_DEBUG);\n        if(! $this -> query($sql))\n        return -1;\n        else\n        return 1;\n    }\n\n    /**\n     *\tReturn a pointer on fields describing table\n     *\t@param\t    table\tNom de la table\n     *\t@param\t    field\tOptionnel : Nom du champ si l'on veut la desc d'un champ\n     *\t@return\t    resource\n     */\n    function DDLDescTable($table,$field=\"\")\n    {\n        $sql=\"DESC \".$table.\" \".$field;\n\n        dol_syslog(get_class($this).\"::DDLDescTable \".$sql,LOG_DEBUG);\n        $this->results = $this->query($sql);\n        return $this->results;\n    }\n\n    /**\n     *\tInsert a new field in table\n     *\t@param\t    table \t\t\tTable name\n     *\t@param\t\tfield_name \t\tName of field\n     *\t@param\t    field_desc \t\tArray with properties describing new field\n     *\t@param\t    field_position \tOptionnal ie.: \"after fielddummy\"\n     *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n     */\n    function DDLAddField($table,$field_name,$field_desc,$field_position=\"\")\n    {\n        // cles recherchees dans le tableau des descriptions (field_desc) : type,value,attribute,null,default,extra\n        // ex. : $field_desc = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n        $sql= \"ALTER TABLE \".$table.\" ADD \".$field_name.\" \";\n        $sql.= $field_desc['type'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n        if (! in_array($field_desc['type'],array('date','datetime')))\n        {\n            $sql.= \"(\".$field_desc['value'].\")\";\n        }\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n        $sql.= \" \".$field_desc['attribute'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n        $sql.= \" \".$field_desc['null'];\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n        {\n            if(preg_match(\"/null/i\",$field_desc['default']))\n            $sql.= \" default \".$field_desc['default'];\n            else\n            $sql.= \" default '\".$field_desc['default'].\"'\";\n        }\n        if(preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n        $sql.= \" \".$field_desc['extra'];\n        $sql.= \" \".$field_position;\n\n        dol_syslog(get_class($this).\"::DDLAddField \".$sql,LOG_DEBUG);\n        if(! $this->query($sql))\n        {\n            return -1;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n    /**\n     *\tUpdate format of a field into a table\n     *\t@param\t    table \t\t\tName of table\n     *\t@param\t\tfield_name \t\tName of field to modify\n     *\t@param\t    field_desc \t\tArray with description of field format\n     *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n     */\n    function DDLUpdateField($table,$field_name,$field_desc)\n    {\n        $sql = \"ALTER TABLE \".$table;\n        $sql .= \" MODIFY COLUMN \".$field_name.\" \".$field_desc['type'];\n        if ($field_desc['type'] == 'int' || $field_desc['type'] == 'varchar') $sql.=\"(\".$field_desc['value'].\")\";\n\n        dol_syslog(get_class($this).\"::DDLUpdateField \".$sql,LOG_DEBUG);\n        if (! $this->query($sql))\n        return -1;\n        else\n        return 1;\n    }\n\n    /**\n     *\tDrop a field in table\n     *\t@param\t    table \t\t\tNom de la table\n     *\t@param\t\tfield_name \t\tNom du champ a inserer\n     *\t@return\t    int\t\t\t\t<0 si KO, >0 si OK\n     */\n    function DDLDropField($table,$field_name)\n    {\n        $sql= \"ALTER TABLE \".$table.\" DROP COLUMN `\".$field_name.\"`\";\n        dol_syslog(get_class($this).\"::DDLDropField \".$sql,LOG_DEBUG);\n        if (! $this->query($sql))\n        {\n            $this->error=$this->lasterror();\n            return -1;\n        }\n        else return 1;\n    }\n\n\n    /**\n     *\t\\brief      Create a user and privileges to connect to database (even if database does not exists yet)\n     *\t\\param\t    dolibarr_main_db_host \t\tIp server\n     *\t\\param\t    dolibarr_main_db_user \t\tUsername to create\n     *\t\\param\t    dolibarr_main_db_pass \t\tPassword\n     *\t\\param\t\tdolibarr_main_db_name\t\tDatabase name where user must be granted\n     *\t\\return\t    int\t\t\t\t\t\t\t<0 if KO, >=0 if OK\n     */\n    function DDLCreateUser($dolibarr_main_db_host,$dolibarr_main_db_user,$dolibarr_main_db_pass,$dolibarr_main_db_name)\n    {\n        $sql = \"INSERT INTO user \";\n        $sql.= \"(Host,User,password,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Index_Priv,Alter_priv,Lock_tables_priv)\";\n        $sql.= \" VALUES ('\".addslashes($dolibarr_main_db_host).\"','\".addslashes($dolibarr_main_db_user).\"',password('\".addslashes($dolibarr_main_db_pass).\"')\";\n        $sql.= \",'Y','Y','Y','Y','Y','Y','Y','Y','Y')\";\n\n        dol_syslog(\"mysqli.lib::DDLCreateUser\", LOG_DEBUG);\t// No sql to avoid password in log\n        $resql=$this->query($sql);\n        if (! $resql)\n        {\n            dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n            return -1;\n        }\n\n        $sql = \"INSERT INTO db \";\n        $sql.= \"(Host,Db,User,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Index_Priv,Alter_priv,Lock_tables_priv)\";\n        $sql.= \" VALUES ('\".addslashes($dolibarr_main_db_host).\"','\".addslashes($dolibarr_main_db_name).\"','\".addslashes($dolibarr_main_db_user).\"'\";\n        $sql.= \",'Y','Y','Y','Y','Y','Y','Y','Y','Y')\";\n\n        dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql);\n        $resql=$this->query($sql);\n        if (! $resql)\n        {\n            dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n            return -1;\n        }\n\n        $sql=\"FLUSH Privileges\";\n\n        dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql);\n        $resql=$this->query($sql);\n        if (! $resql)\n        {\n            dol_syslog(\"mysqli.lib::DDLCreateUser sql=\".$sql, LOG_ERR);\n            return -1;\n        }\n\n        return 1;\n    }\n\n    /**\n     *\t\\brief\t\tReturn charset used to store data in database\n     *\t\\return\t\tstring\t\tCharset\n     */\n    function getDefaultCharacterSetDatabase()\n    {\n        $resql=$this->query('SHOW VARIABLES LIKE \\'character_set_database\\'');\n        if (!$resql)\n        {\n            // version Mysql < 4.1.1\n            return $this->forcecharset;\n        }\n        $liste=$this->fetch_array($resql);\n        return $liste['Value'];\n    }\n\n    /**\n     *\t\\brief\t\tReturn list of available charset that can be used to store data in database\n     *\t\\return\t\tarray\t\tList of Charset\n     */\n    function getListOfCharacterSet()\n    {\n        $resql=$this->query('SHOW CHARSET');\n        $liste = array();\n        if ($resql)\n        {\n            $i = 0;\n            while ($obj = $this->fetch_object($resql) )\n            {\n                $liste[$i]['charset'] = $obj->Charset;\n                $liste[$i]['description'] = $obj->Description;\n                $i++;\n            }\n            $this->free($resql);\n        } else {\n            // version Mysql < 4.1.1\n            return null;\n        }\n        return $liste;\n    }\n\n    /**\n     *\t\\brief\t\tReturn collation used in database\n     *\t\\return\t\tstring\t\tCollation value\n     */\n    function getDefaultCollationDatabase()\n    {\n        $resql=$this->query('SHOW VARIABLES LIKE \\'collation_database\\'');\n        if (!$resql)\n        {\n            // version Mysql < 4.1.1\n            return $this->forcecollate;\n        }\n        $liste=$this->fetch_array($resql);\n        return $liste['Value'];\n    }\n\n    /**\n     *\t\\brief\t\tReturn list of available collation that can be used for database\n     *\t\\return\t\tarray\t\tListe of Collation\n     */\n    function getListOfCollation()\n    {\n        $resql=$this->query('SHOW COLLATION');\n        $liste = array();\n        if ($resql)\n        {\n            $i = 0;\n            while ($obj = $this->fetch_object($resql) )\n            {\n                $liste[$i]['collation'] = $obj->Collation;\n                $i++;\n            }\n            $this->free($resql);\n        } else {\n            // version Mysql < 4.1.1\n            return null;\n        }\n        return $liste;\n    }\n\n    /**\n\t *\tReturn full path of dump program\n\t *\t@return\t\tstring\t\tFull path of dump program\n     */\n    function getPathOfDump()\n    {\n        $fullpathofdump='/pathtomysqldump/mysqldump';\n\n        $resql=$this->query('SHOW VARIABLES LIKE \\'basedir\\'');\n        if ($resql)\n        {\n            $liste=$this->fetch_array($resql);\n            $basedir=$liste['Value'];\n            $fullpathofdump=$basedir.(preg_match('/\\/$/',$basedir)?'':'/').'bin/mysqldump';\n        }\n        return $fullpathofdump;\n    }\n\n    /**\n     *\tReturn full path of restore program\n     *\t@return\t\tstring\t\tFull path of restore program\n     */\n    function getPathOfRestore()\n    {\n        $fullpathofimport='/pathtomysql/mysql';\n\n        $resql=$this->query('SHOW VARIABLES LIKE \\'basedir\\'');\n        if ($resql)\n        {\n            $liste=$this->fetch_array($resql);\n            $basedir=$liste['Value'];\n            $fullpathofimport=$basedir.(preg_match('/\\/$/',$basedir)?'':'/').'bin/mysql';\n        }\n        return $fullpathofimport;\n    }\n\n    /**\n     *\t\\brief\t\tReturn value of server parameters\n     * \t\\param\t\tfilter\t\tFilter list on a particular value\n     * \t\\return\t\tstring\t\tValue for parameter\n     */\n    function getServerParametersValues($key,$filter='')\n    {\n        $result=array();\n\n        $sql='SHOW VARIABLES';\n        if ($filter) $sql.=\" LIKE '\".addslashes($key).\"'\";\n        $resql=$this->query($sql);\n        if ($resql)\n        {\n            $obj=$this->fetch_object($resql);\n            $result[$obj->Variable_name]=$obj->Value;\n        }\n\n        return $result;\n    }\n\n    /**\n     *\t\\brief\t\tReturn value of server status\n     * \t\\param\t\tfilter\t\tFilter list on a particular value\n     * \t\\return\t\tstring\t\tValue for parameter\n     */\n    function getServerStatusValues($filter='')\n    {\n        $result=array();\n\n        $sql='SHOW STATUS';\n        if ($filter) $sql.=\" LIKE '\".addslashes($key).\"'\";\n        $resql=$this->query($sql);\n        if ($resql)\n        {\n            $obj=$this->fetch_object($resql);\n            $result[$obj->Variable_name]=$obj->Value;\n        }\n\n        return $result;\n    }\n}\n\n?>\n", "<?php\n/* Copyright (C) 2001      Fabien Seisen        <seisen@linuxfr.org>\n * Copyright (C) 2002-2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Sebastien Di Cintio  <sdicintio@ressource-toi.org>\n * Copyright (C) 2004      Benoit Mortier\t\t<benoit.mortier@opensides.be>\n * Copyright (C) 2005-2009 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/lib/databases/pgsql.lib.php\n *\t\\brief      Fichier de la classe permettant de gerer une base pgsql\n *\t\\version\t$Id: pgsql.lib.php,v 1.111 2011/08/04 13:58:14 eldy Exp $\n */\n// For compatibility during upgrade\nif (! defined('DOL_DOCUMENT_ROOT'))\t define('DOL_DOCUMENT_ROOT', '../..');\nif (! defined('ADODB_DATE_VERSION')) include_once(DOL_DOCUMENT_ROOT.\"/includes/adodbtime/adodb-time.inc.php\");\n\n\n/**\n *\t\\class      DoliDb\n *\t\\brief      Class to drive a Postgresql database for Dolibarr\n */\nclass DoliDb\n{\n\tvar $db;                      // Database handler\n\tvar $type='pgsql';            // Name of manager\n\tvar $label='PostgreSQL';      // Label of manager\n\t//! Charset\n\tvar $forcecharset='latin1';\n\tvar $versionmin=array(8,4,0);\t// Version min database\n\n\tvar $results;                 // Resultset de la derniere requete\n\n\tvar $connected;               // 1 si connecte, 0 sinon\n\tvar $database_selected;       // 1 si base selectionne, 0 sinon\n\tvar $database_name;\t\t\t//! Nom base selectionnee\n\tvar $database_user;\t   \t\t//! Nom user base\n\tvar $transaction_opened;      // 1 si une transaction est en cours, 0 sinon\n\tvar $lastquery;\n\tvar $lastqueryerror;\t\t// Ajout d'une variable en cas d'erreur\n\n\tvar $unescapeslashquot=0;              // By default we do not force the unescape of \\'. This is used only to process sql with mysql escaped data.\n\tvar $standard_conforming_strings=1;    // Database has option standard_conforming_strings to on\n\n\tvar $ok;\n\tvar $error;\n\tvar $lasterror;\n\n\n\n\t/**\n\t * \\brief      Ouverture d'une connexion vers le serveur et une database.\n\t * \\param\t\ttype\t\ttype de base de donnees (mysql ou pgsql)\n\t * \\param\t\thost\t\taddresse de la base de donnees\n\t * \\param\t    user\t\tnom de l'utilisateur autorise\n\t * \\param\t\tpass\t\tmot de passe\n\t * \\param\t\tname\t\tnom de la database\n\t * \\param\t    port\t\tPort of database server\n\t * \\return\t\tint\t\t\t1 en cas de succes, 0 sinon\n\t */\n\tfunction DoliDb($type='pgsql', $host, $user, $pass, $name='', $port=0)\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$this->forcecharset=$conf->file->character_set_client;\n\t\t$this->forcecollate=$conf->db->dolibarr_main_db_collation;\n\t\t$this->database_user=$user;\n\n\t\t$this->transaction_opened=0;\n\n\t\t//print \"Name DB: $host,$user,$pass,$name<br>\";\n\n\t\tif (! function_exists(\"pg_connect\"))\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=\"Pgsql PHP functions are not available in this version of PHP\";\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Pgsql PHP functions are not available in this version of PHP\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\tif (! $host)\n\t\t{\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error=$langs->trans(\"ErrorWrongHostParameter\");\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect, wrong host parameters\",LOG_ERR);\n\t\t\treturn $this->ok;\n\t\t}\n\n\t\t// Essai connexion serveur\n\t\t//print \"$host, $user, $pass, $name, $port\";\n\t\t$this->db = $this->connect($host, $user, $pass, $name, $port);\n\t\tif ($this->db)\n\t\t{\n\t\t\t$this->connected = 1;\n\t\t\t$this->ok = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// host, login ou password incorrect\n\t\t\t$this->connected = 0;\n\t\t\t$this->ok = 0;\n\t\t\t$this->error='Host, login or password incorrect';\n\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Connect \".$this->error,LOG_ERR);\n\t\t}\n\n\t\t// Si connexion serveur ok et si connexion base demandee, on essaie connexion base\n\t\tif ($this->connected && $name)\n\t\t{\n\t\t\tif ($this->select_db($name))\n\t\t\t{\n\t\t\t\t$this->database_selected = 1;\n\t\t\t\t$this->database_name = $name;\n\t\t\t\t$this->ok = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->database_selected = 0;\n\t\t\t\t$this->database_name = '';\n\t\t\t\t$this->ok = 0;\n\t\t\t\t$this->error=$this->error();\n\t\t\t\tdol_syslog(\"DoliDB::DoliDB : Erreur Select_db \".$this->error,LOG_ERR);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Pas de selection de base demandee, ok ou ko\n\t\t\t$this->database_selected = 0;\n\t\t}\n\n\t\treturn $this->ok;\n\t}\n\n\n\t/**\n\t *\tConvert a SQL request in Mysql syntax to PostgreSQL syntax\n\t * \t@param     line\t\tSQL request line to convert\n\t *  @param     type     Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n\t * \t@return    string\tSQL request line converted\n\t */\n\tfunction convertSQLFromMysql($line,$type='auto')\n\t{\n\t\t# Removed empty line if this is a comment line for SVN tagging\n\t\tif (preg_match('/^--\\s\\$Id/i',$line)) {\n\t\t\treturn '';\n\t\t}\n\t\t# Return line if this is a comment\n\t\tif (preg_match('/^#/i',$line) || preg_match('/^$/i',$line) || preg_match('/^--/i',$line))\n\t\t{\n\t\t\treturn $line;\n\t\t}\n\t\tif ($line != \"\")\n\t\t{\n\t\t    if ($type == 'auto')\n\t\t    {\n              if (preg_match('/ALTER TABLE/i',$line)) $type='dml';\n              else if (preg_match('/CREATE TABLE/i',$line)) $type='dml';\n              else if (preg_match('/DROP TABLE/i',$line)) $type='dml';\n\t\t    }\n\n\t\t    if ($type == 'dml')\n\t\t    {\n                $line=preg_replace('/\\s/',' ',$line);   // Replace tabulation with space\n\n\t\t        # we are inside create table statement so lets process datatypes\n    \t\t\tif (preg_match('/(ISAM|innodb)/i',$line)) { # end of create table sequence\n    \t\t\t\t$line=preg_replace('/\\)[\\s\\t]*type[\\s\\t]*=[\\s\\t]*(MyISAM|innodb);/i',');',$line);\n    \t\t\t\t$line=preg_replace('/\\)[\\s\\t]*engine[\\s\\t]*=[\\s\\t]*(MyISAM|innodb);/i',');',$line);\n    \t\t\t\t$line=preg_replace('/,$/','',$line);\n    \t\t\t}\n\n    \t\t\t// Process case: \"CREATE TABLE llx_mytable(rowid integer NOT NULL AUTO_INCREMENT PRIMARY KEY,code...\"\n    \t\t\tif (preg_match('/[\\s\\t\\(]*(\\w*)[\\s\\t]+int.*auto_increment/i',$line,$reg)) {\n    \t\t\t\t$newline=preg_replace('/([\\s\\t\\(]*)([a-zA-Z_0-9]*)[\\s\\t]+int.*auto_increment[^,]*/i','\\\\1 \\\\2 SERIAL PRIMARY KEY',$line);\n                    //$line = \"-- \".$line.\" replaced by --\\n\".$newline;\n                    $line=$newline;\n    \t\t\t}\n\n    \t\t\t# tinyint type conversion\n    \t\t\t$line=str_replace('tinyint','smallint',$line);\n\n    \t\t\t# nuke unsigned\n    \t\t\t$line=preg_replace('/(int\\w+|smallint)\\s+unsigned/i','\\\\1',$line);\n\n    \t\t\t# blob -> text\n    \t\t\t$line=preg_replace('/\\w*blob/i','text',$line);\n\n    \t\t\t# tinytext/mediumtext -> text\n    \t\t\t$line=preg_replace('/tinytext/i','text',$line);\n    \t\t\t$line=preg_replace('/mediumtext/i','text',$line);\n\n    \t\t\t# change not null datetime field to null valid ones\n    \t\t\t# (to support remapping of \"zero time\" to null\n    \t\t\t$line=preg_replace('/datetime not null/i','datetime',$line);\n    \t\t\t$line=preg_replace('/datetime/i','timestamp',$line);\n\n    \t\t\t# double -> numeric\n    \t\t\t$line=preg_replace('/^double/i','numeric',$line);\n    \t\t\t$line=preg_replace('/(\\s*)double/i','\\\\1numeric',$line);\n    \t\t\t# float -> numeric\n    \t\t\t$line=preg_replace('/^float/i','numeric',$line);\n    \t\t\t$line=preg_replace('/(\\s*)float/i','\\\\1numeric',$line);\n\n    \t\t\t# unique index(field1,field2)\n    \t\t\tif (preg_match('/unique index\\s*\\((\\w+\\s*,\\s*\\w+)\\)/i',$line))\n    \t\t\t{\n    \t\t\t\t$line=preg_replace('/unique index\\s*\\((\\w+\\s*,\\s*\\w+)\\)/i','UNIQUE\\(\\\\1\\)',$line);\n    \t\t\t}\n\n    \t\t\t# We remove end of requests \"AFTER fieldxxx\"\n    \t\t\t$line=preg_replace('/AFTER [a-z0-9_]+/i','',$line);\n\n    \t\t\t# We remove start of requests \"ALTER TABLE tablexxx\" if this is a DROP INDEX\n    \t\t\t$line=preg_replace('/ALTER TABLE [a-z0-9_]+ DROP INDEX/i','DROP INDEX',$line);\n\n                # Translate order to rename fields\n                if (preg_match('/ALTER TABLE ([a-z0-9_]+) CHANGE(?: COLUMN)? ([a-z0-9_]+) ([a-z0-9_]+)(.*)$/i',$line,$reg))\n                {\n                \t$line = \"-- \".$line.\" replaced by --\\n\";\n                    $line.= \"ALTER TABLE \".$reg[1].\" RENAME COLUMN \".$reg[2].\" TO \".$reg[3];\n                }\n\n                # Translate order to modify field format\n                if (preg_match('/ALTER TABLE ([a-z0-9_]+) MODIFY(?: COLUMN)? ([a-z0-9_]+) (.*)$/i',$line,$reg))\n                {\n                    $line = \"-- \".$line.\" replaced by --\\n\";\n                    $newreg3=$reg[3];\n                    $newreg3=preg_replace('/ DEFAULT NULL/i','',$newreg3);\n                    $newreg3=preg_replace('/ NOT NULL/i','',$newreg3);\n                    $newreg3=preg_replace('/ NULL/i','',$newreg3);\n                    $newreg3=preg_replace('/ DEFAULT 0/i','',$newreg3);\n                    $newreg3=preg_replace('/ DEFAULT \\'[0-9a-zA-Z_@]*\\'/i','',$newreg3);\n                    $line.= \"ALTER TABLE \".$reg[1].\" ALTER COLUMN \".$reg[2].\" TYPE \".$newreg3;\n                    // TODO Add alter to set default value or null/not null if there is this in $reg[3]\n                }\n\n                # alter table add primary key (field1, field2 ...) -> We remove the primary key name not accepted by PostGreSQL\n    \t\t\t# ALTER TABLE llx_dolibarr_modules ADD PRIMARY KEY pk_dolibarr_modules (numero, entity);\n    \t\t\tif (preg_match('/ALTER\\s+TABLE\\s*(.*)\\s*ADD\\s+PRIMARY\\s+KEY\\s*(.*)\\s*\\((.*)$/i',$line,$reg))\n    \t\t\t{\n    \t\t\t\t$line = \"-- \".$line.\" replaced by --\\n\";\n    \t\t\t\t$line.= \"ALTER TABLE \".$reg[1].\" ADD PRIMARY KEY (\".$reg[3];\n    \t\t\t}\n\n                # Translate order to drop foreign keys\n                # ALTER TABLE llx_dolibarr_modules DROP FOREIGN KEY fk_xxx;\n                if (preg_match('/ALTER\\s+TABLE\\s*(.*)\\s*DROP\\s+FOREIGN\\s+KEY\\s*(.*)$/i',$line,$reg))\n                {\n                    $line = \"-- \".$line.\" replaced by --\\n\";\n                    $line.= \"ALTER TABLE \".$reg[1].\" DROP CONSTRAINT \".$reg[2];\n                }\n\n    \t\t\t# alter table add [unique] [index] (field1, field2 ...)\n    \t\t\t# ALTER TABLE llx_accountingaccount ADD INDEX idx_accountingaccount_fk_pcg_version (fk_pcg_version)\n    \t\t\tif (preg_match('/ALTER\\s+TABLE\\s*(.*)\\s*ADD\\s+(UNIQUE INDEX|INDEX|UNIQUE)\\s+(.*)\\s*\\(([\\w,\\s]+)\\)/i',$line,$reg))\n    \t\t\t{\n    \t\t\t\t$fieldlist=$reg[4];\n    \t\t\t\t$idxname=$reg[3];\n    \t\t\t\t$tablename=$reg[1];\n    \t\t\t\t$line = \"-- \".$line.\" replaced by --\\n\";\n    \t\t\t\t$line.= \"CREATE \".(preg_match('/UNIQUE/',$reg[2])?'UNIQUE ':'').\"INDEX \".$idxname.\" ON \".$tablename.\" (\".$fieldlist.\")\";\n    \t\t\t}\n            }\n\n            // To have postgresql case sensitive\n            $line=str_replace(' LIKE \\'',' ILIKE \\'',$line);\n\n\t\t\t// Delete using criteria on other table must not declare twice the deleted table\n\t\t\t// DELETE FROM tabletodelete USING tabletodelete, othertable -> DELETE FROM tabletodelete USING othertable\n\t\t\tif (preg_match('/DELETE FROM ([a-z_]+) USING ([a-z_]+), ([a-z_]+)/i',$line,$reg))\n\t\t\t{\n\t\t\t\tif ($reg[1] == $reg[2])\t// If same table, we remove second one\n\t\t\t\t{\n\t\t\t\t\t$line=preg_replace('/DELETE FROM ([a-z_]+) USING ([a-z_]+), ([a-z_]+)/i','DELETE FROM \\\\1 USING \\\\3', $line);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove () in the tables in FROM if one table\n\t\t\t$line=preg_replace('/FROM\\s*\\((([a-z_]+)\\s+as\\s+([a-z_]+)\\s*)\\)/i','FROM \\\\1',$line);\n\t\t\t//print $line.\"\\n\";\n\n\t\t\t// Remove () in the tables in FROM if two table\n\t\t\t$line=preg_replace('/FROM\\s*\\(([a-z_]+\\s+as\\s+[a-z_]+)\\s*,\\s*([a-z_]+\\s+as\\s+[a-z_]+\\s*)\\)/i','FROM \\\\1, \\\\2',$line);\n\t\t\t//print $line.\"\\n\";\n\n\t\t\t// Remove () in the tables in FROM if two table\n\t\t\t$line=preg_replace('/FROM\\s*\\(([a-z_]+\\s+as\\s+[a-z_]+)\\s*,\\s*([a-z_]+\\s+as\\s+[a-z_]+\\s*),\\s*([a-z_]+\\s+as\\s+[a-z_]+\\s*)\\)/i','FROM \\\\1, \\\\2, \\\\3',$line);\n\t\t\t//print $line.\"\\n\";\n\n\t\t\t// Replace espacing \\' by ''.\n\t\t\t// By default we do not (should be already done by db->escape function if required)\n\t\t\tif (! empty($this->unescapeslashquot))\n\t\t\t{\n                // Except for sql insert in data file that\n                // are mysql escaped so we removed them to be compatible with standard_conforming_strings=on\n                // that considers \\ as ordinary character).\n                if ($this->standard_conforming_strings)\n                {\n\t\t\t\t    $line=preg_replace(\"/\\\\\\'/\",\"''\",$line);\n                }\n\t\t\t}\n\n\t\t\t//print \"type=\".$type.\" newline=\".$line.\"<br>\\n\";\n\t\t}\n\n\t\treturn $line;\n\t}\n\n\t/**\n\t * Select a database.\n     * Ici postgresql n'a aucune fonction equivalente de mysql_select_db\n     * On compare juste manuellement si la database choisie est bien celle activee par la connexion\n\t * @param\t\tdatabase\t\tnom de la database\n\t * @return\t\tboolean         true si ok, false si ko\n\t */\n\tfunction select_db($database)\n\t{\n\t\tif ($database == $this->database_name) return true;\n\t\telse return false;\n\t}\n\n\t/**\n\t * Connection vers le serveur\n\t * @param\t\thost\t\taddresse de la base de donnees\n\t * @param\t\tlogin\t\tnom de l'utilisateur autorise\n\t * @param\t\tpasswd\t\tmot de passe\n\t * @param\t\tname\t\tnom de la database (ne sert pas sous mysql, sert sous pgsql)\n\t * @param\t\tport\t\tPort of database server\n\t * @return\t\tresource\thandler d'acces a la base\n\t */\n\tfunction connect($host, $login, $passwd, $name, $port=0)\n\t{\n\t\tif (!$name){\n\t\t\t$name=\"postgres\";\n\t\t}\n\t\tif (!$port){\n\t\t\t$port=5432;\n\t\t}\n\t\t$con_string = \"host=$host port=$port dbname=$name user=$login password=$passwd\";\n        //print 'xxx'.$con_string;\n        //$this->db = pg_pconnect($con_string);   // To us persistent connection because this one cost 1ms, non ersisten cost 30ms\n        $this->db = pg_connect($con_string);\n\t\tif ($this->db)\n\t\t{\n\t\t\t$this->database_name = $name;\n\t\t\tpg_set_error_verbosity($this->db, PGSQL_ERRORS_VERBOSE);\t// Set verbosity to max\n\n\t\t}\n\t\treturn $this->db;\n\t}\n\n\t/**\n\t * \\brief          \tReturn label of manager\n\t * \\return\t\t\tstring      Label\n\t */\n\tfunction getLabel()\n\t{\n\t\treturn $this->label;\n\t}\n\n\t/**\n\t * \\brief          Return version of server\n\t * \\return\t       string      String with version\n\t */\n\tfunction getVersion()\n\t{\n\t\t$resql=$this->query('SHOW server_version');\n\t\tif ($resql)\n\t\t{\n\t\t  $liste=$this->fetch_array($resql);\n\t\t  return $liste['server_version'];\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * \\brief\t\tRenvoie la version du serveur sous forme de nombre\n\t * \\return\t\tstring      Chaine version\n\t */\n\tfunction getIntVersion()\n\t{\n\t\t$version = $this->getVersion();\n\t\t$vlist = preg_split('/[.-]/',$version);\n\t\tif (dol_strlen($vlist[1])==1){\n\t\t\t$vlist[1]=\"0\".$vlist[1];\n\t\t}\n\t\tif (dol_strlen($vlist[2])==1){\n\t\t\t$vlist[2]=\"0\".$vlist[2];\n\t\t}\n\t\treturn $vlist[0].$vlist[1].$vlist[2];\n\t}\n\n\t/**\n\t * \\brief\t\tRenvoie la version du serveur dans un tableau\n\t * \\return\t\tarray  \t\tTableau de chaque niveau de version\n\t */\n\tfunction getVersionArray()\n\t{\n\t\treturn explode('.',$this->getVersion());\n\t}\n\n    /**\n     *  Close database connexion\n     *  @return     boolean     True if disconnect successfull, false otherwise\n     *  @see        connect\n     */\n    function close()\n    {\n        if ($this->db)\n        {\n          //dol_syslog(\"DoliDB::disconnect\",LOG_DEBUG);\n          $this->connected=0;\n          return pg_close($this->db);\n        }\n        return false;\n    }\n\n\t/**\n\t * \\brief      Debut d'une transaction.\n\t * \\return\t    int         1 si ouverture transaction ok ou deja ouverte, 0 en cas d'erreur\n\t */\n\tfunction begin()\n\t{\n\t\tif (! $this->transaction_opened)\n\t\t{\n\t\t\t$ret=$this->query(\"BEGIN;\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened++;\n\t\t\t\tdol_syslog(\"BEGIN Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened++;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n     * Validate a database transaction\n     * @param       log         Add more log to default log line\n     * @return      int         1 if validation is OK or transaction level no started, 0 if ERROR\n\t */\n\tfunction commit($log='')\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"COMMIT;\");\n\t\t\tif ($ret)\n\t\t\t{\n\t\t\t\t$this->transaction_opened=0;\n\t\t\t\tdol_syslog(\"COMMIT Transaction\",LOG_DEBUG);\n\t\t\t}\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * \\brief      Annulation d'une transaction et retour aux anciennes valeurs\n\t * \\return\t    int         1 si annulation ok ou transaction non ouverte, 0 en cas d'erreur\n\t */\n\tfunction rollback()\n\t{\n\t\tif ($this->transaction_opened<=1)\n\t\t{\n\t\t\t$ret=$this->query(\"ROLLBACK;\");\n\t\t\t$this->transaction_opened=0;\n\t\t\tdol_syslog(\"ROLLBACK Transaction\",LOG_DEBUG);\n\t\t\treturn $ret;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->transaction_opened--;\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t/**\n\t * Convert request to PostgreSQL syntax, execute it and return the resultset.\n\t * @param\t\tquery\t\t\tSQL query string\n\t * @param\t\tusesavepoint\t0=Default mode, 1=Run a savepoint before and a rollback to savepoint if error (this allow to have some request with errors inside global transactions).\n     * @param       type            Type of SQL order ('ddl' for insert, update, select, delete or 'dml' for create, alter...)\n\t * @return\t    resource    \tResultset of answer\n\t */\n\tfunction query($query,$usesavepoint=0,$type='auto')\n\t{\n\t\t$query = trim($query);\n\n\t\t// Convert MySQL syntax to PostgresSQL syntax\n\t\t$query=$this->convertSQLFromMysql($query,$type);\n\t\t//print \"FF\\n\".$query.\"<br>\\n\";\n\n\t\t// Fix bad formed requests. If request contains a date without quotes, we fix this but this should not occurs.\n\t\t$loop=true;\n\t\twhile ($loop)\n\t\t{\n\t\t\tif (preg_match('/([^\\'])([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9])/',$query))\n\t\t\t{\n\t\t\t\t$query=preg_replace('/([^\\'])([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9])/','\\\\1\\'\\\\2\\'',$query);\n\t\t\t\tdol_syslog(\"Warning: Bad formed request converted into \".$query,LOG_WARNING);\n\t\t\t}\n\t\t\telse $loop=false;\n\t\t}\n\n\t\tif ($usesavepoint && $this->transaction_opened)\n\t\t{\n\t\t\t@pg_query($this->db, 'SAVEPOINT mysavepoint');\n\t\t}\n\n\t\t$ret = @pg_query($this->db, $query);\n\t\t//print $query;\n\t\tif (! preg_match(\"/^COMMIT/i\",$query) && ! preg_match(\"/^ROLLBACK/i\",$query)) // Si requete utilisateur, on la sauvegarde ainsi que son resultset\n\t\t{\n\t\t\tif (! $ret)\n\t\t\t{\n\t\t\t\t$this->lastqueryerror = $query;\n\t\t\t\t$this->lasterror = $this->error();\n\t\t\t\t$this->lasterrno = $this->errno();\n\t\t\t\tdol_syslog(\"Pgsql.lib::query SQL error: \".$query.\" \".$this->lasterrno, LOG_WARNING);\n\t\t\t\t//print \"\\n>> \".$query.\"<br>\\n\";\n\t\t\t\t//print '>> '.$this->lasterrno.' - '.$this->lasterror.' - '.$this->lastqueryerror.\"<br>\\n\";\n\n\t\t\t\tif ($usesavepoint && $this->transaction_opened)\n\t\t\t\t{\n\t\t\t\t\t@pg_query($this->db, 'ROLLBACK TO SAVEPOINT mysavepoint');\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->lastquery=$query;\n\t\t\t$this->results = $ret;\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\t/**\n\t *\t\\brief      Renvoie la ligne courante (comme un objet) pour le curseur resultset.\n\t *\t\\param      resultset   Curseur de la requete voulue\n\t *\t\\return\t    object \t\tObject result line or false if KO or end of cursor\n\t */\n\tfunction fetch_object($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn pg_fetch_object($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie les donnees dans un tableau.\n\t * \\param      resultset   Curseur de la requete voulue\n\t * \\return\t\tarray\n\t */\n\tfunction fetch_array($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn pg_fetch_array($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie les donnees comme un tableau.\n\t * \\param      resultset   Curseur de la requete voulue\n\t * \\return\t    array\n\t */\n\tfunction fetch_row($resultset)\n\t{\n\t\t// Si le resultset n'est pas fourni, on prend le dernier utilise sur cette connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn pg_fetch_row($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie le nombre de lignes dans le resultat d'une requete SELECT\n\t * \\see    \t   affected_rows\n\t * \\param      resultset   Curseur de la requete voulue\n\t * \\return     int\t\t    Nombre de lignes\n\t */\n\tfunction num_rows($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\treturn pg_num_rows($resultset);\n\t}\n\n\t/**\n\t * \\brief      Renvoie le nombre de lignes dans le resultat d'une requete INSERT, DELETE ou UPDATE\n\t * \\see    \t   num_rows\n\t * \\param      resultset   Curseur de la requete voulue\n\t * \\return     int\t\t    Nombre de lignes\n\t */\n\tfunction affected_rows($resultset)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// pgsql necessite un resultset pour cette fonction contrairement\n\t\t// a mysql qui prend un link de base\n\t\treturn pg_affected_rows($resultset);\n\t}\n\n\n\t/**\n\t * \\brief      Libere le dernier resultset utilise sur cette connexion.\n\t * \\param      resultset   Curseur de la requete voulue\n\t */\n\tfunction free($resultset=0)\n\t{\n        // If resultset not provided, we take the last used by connexion\n\t\tif (! is_resource($resultset)) { $resultset=$this->results; }\n\t\t// Si resultset en est un, on libere la memoire\n\t\tif (is_resource($resultset)) pg_free_result($resultset);\n\t}\n\n\n\t/**\n\t * \\brief       Defini les limites de la requete.\n\t * \\param\t    limit       nombre maximum de lignes retournees\n\t * \\param\t    offset      numero de la ligne a partir de laquelle recuperer les lignes\n\t * \\return\t    string      chaine exprimant la syntax sql de la limite\n\t */\n\tfunction plimit($limit=0,$offset=0)\n\t{\n\t\tglobal $conf;\n\t\tif (! $limit) $limit=$conf->liste_limit;\n\t\tif ($offset > 0) return \" LIMIT \".$limit.\" OFFSET \".$offset.\" \";\n\t\telse return \" LIMIT $limit \";\n\t}\n\n\n\t/**\n\t * Define sort criteria of request\n\t * @param\t    sortfield   List of sort fields\n\t * @param\t    sortorder   Sort order\n\t * @return\t    string      String to provide syntax of a sort sql string\n\t * TODO\t\t\tMutualized this into a mother class\n\t */\n\tfunction order($sortfield=0,$sortorder=0)\n\t{\n\t\tif ($sortfield)\n\t\t{\n\t\t\t$return='';\n\t\t\t$fields=explode(',',$sortfield);\n\t\t\tforeach($fields as $val)\n\t\t\t{\n\t\t\t\tif (! $return) $return.=' ORDER BY ';\n\t\t\t\telse $return.=',';\n\n\t\t\t\t$return.=preg_replace('/[^0-9a-z_\\.]/i','',$val);\n\t\t\t\tif ($sortorder) $return.=' '.preg_replace('/[^0-9a-z]/i','',$sortorder);\n\t\t\t}\n\t\t\treturn $return;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t}\n\n\n\t/**\n\t *   Escape a string to insert data.\n\t *   @param\t    stringtoencode\t\tString to escape\n\t *   @return\tstring\t\t\t\tString escaped\n\t */\n\tfunction escape($stringtoencode)\n\t{\n\t\treturn pg_escape_string($stringtoencode);\n\t}\n\n    /**\n\t *   Convert (by PHP) a GM Timestamp date into a GM string date to insert into a date field.\n\t *   Function to use to build INSERT, UPDATE or WHERE predica\n\t *   @param\t    param       Date TMS to convert\n\t *   @return\tstring      Date in a string YYYYMMDDHHMMSS\n\t */\n\tfunction idate($param)\n\t{\n\t\treturn adodb_strftime(\"%Y-%m-%d %H:%M:%S\",$param);\n\t}\n\n\t/**\n\t *\tConvert (by PHP) a PHP server TZ string date into a GM Timestamps date\n\t * \t19700101020000 -> 3600 with TZ+1\n\t * \t@param\t\tstring\t\t\tDate in a string (YYYYMMDDHHMMSS, YYYYMMDD, YYYY-MM-DD HH:MM:SS)\n\t *\t@return\t\tdate\t\t\tDate TMS\n\t */\n\tfunction jdate($string)\n\t{\n\t\t$string=preg_replace('/([^0-9])/i','',$string);\n\t\t$tmp=$string.'000000';\n\t\t$date=dol_mktime(substr($tmp,8,2),substr($tmp,10,2),substr($tmp,12,2),substr($tmp,4,2),substr($tmp,6,2),substr($tmp,0,4));\n\t\treturn $date;\n\t}\n\n\t/**\n     *  Formate a SQL IF\n\t *  @param\t\ttest            chaine test\n\t *  @param\t\tresok           resultat si test egal\n\t *  @param\t\tresko           resultat si test non egal\n\t *  @return\t\tstring          chaine formate SQL\n\t */\n\tfunction ifsql($test,$resok,$resko)\n\t{\n\t\treturn '(CASE WHEN '.$test.' THEN '.$resok.' ELSE '.$resko.' END)';\n\t}\n\n\n\t/**\n\t *   \\brief      Renvoie la derniere requete soumise par la methode query()\n\t *   \\return\t    lastquery\n\t */\n\tfunction lastquery()\n\t{\n\t\treturn $this->lastquery;\n\t}\n\n\t/**\n\t *   \\brief      Renvoie la derniere requete en erreur\n\t *   \\return\t    string\tlastqueryerror\n\t */\n\tfunction lastqueryerror()\n\t{\n\t\treturn $this->lastqueryerror;\n\t}\n\n\t/**\n\t * \\brief      Renvoie le libelle derniere erreur\n\t * \\return\t    string\tlasterror\n\t */\n\tfunction lasterror()\n\t{\n\t\treturn $this->lasterror;\n\t}\n\n\t/**\n\t * \\brief      Renvoie le code derniere erreur\n\t * \\return\t    string\tlasterrno\n\t */\n\tfunction lasterrno()\n\t{\n\t\treturn $this->lasterrno;\n\t}\n\n\t/**\n\t * \\brief     Renvoie le code erreur generique de l'operation precedente.\n\t * \\return    error_num       (Exemples: DB_ERROR_TABLE_ALREADY_EXISTS, DB_ERROR_RECORD_ALREADY_EXISTS...)\n\t */\n\tfunction errno()\n\t{\n\t\tif (! $this->connected) {\n\t\t\t// Si il y a eu echec de connexion, $this->db n'est pas valide.\n\t\t\treturn 'DB_ERROR_FAILED_TO_CONNECT';\n\t\t}\n\t\telse {\n\t\t\t// Constants to convert a MySql error code to a generic Dolibarr error code\n\t\t\t$errorcode_map = array(\n\t\t\t1004 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1005 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1006 => 'DB_ERROR_CANNOT_CREATE',\n\t\t\t1007 => 'DB_ERROR_ALREADY_EXISTS',\n\t\t\t1008 => 'DB_ERROR_CANNOT_DROP',\n\t\t\t1025 => 'DB_ERROR_NO_FOREIGN_KEY_TO_DROP',\n\t\t\t1044 => 'DB_ERROR_ACCESSDENIED',\n\t\t\t1046 => 'DB_ERROR_NODBSELECTED',\n\t\t\t1048 => 'DB_ERROR_CONSTRAINT',\n\t\t\t'42P07' => 'DB_ERROR_TABLE_OR_KEY_ALREADY_EXISTS',\n\t\t\t'42703' => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1060 => 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n\t\t\t42701=> 'DB_ERROR_COLUMN_ALREADY_EXISTS',\n\t\t\t'42710' => 'DB_ERROR_KEY_NAME_ALREADY_EXISTS',\n\t\t\t'23505' => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n\t\t\t'42704' => 'DB_ERROR_NO_INDEX_TO_DROP',\n\t\t\t'42601' => 'DB_ERROR_SYNTAX',\n\t\t\t'42P16' => 'DB_ERROR_PRIMARY_KEY_ALREADY_EXISTS',\n\t\t\t1075 => 'DB_ERROR_CANT_DROP_PRIMARY_KEY',\n\t\t\t1091 => 'DB_ERROR_NOSUCHFIELD',\n\t\t\t1100 => 'DB_ERROR_NOT_LOCKED',\n\t\t\t1136 => 'DB_ERROR_VALUE_COUNT_ON_ROW',\n\t\t\t'42P01' => 'DB_ERROR_NOSUCHTABLE',\n\t\t\t'23503' => 'DB_ERROR_NO_PARENT',\n\t\t\t1217 => 'DB_ERROR_CHILD_EXISTS',\n\t\t\t1451 => 'DB_ERROR_CHILD_EXISTS',\n\t\t\t'42P04' => 'DB_DATABASE_ALREADY_EXISTS'\n\t\t\t);\n\n\t\t\t$errorlabel=pg_last_error($this->db);\n\t\t\t$errorcode='';\n\t\t\tif (preg_match('/: *([0-9P]+):/',$errorlabel,$reg))\n\t\t\t{\n\t\t\t\t$errorcode=$reg[1];\n\t\t\t\tif (isset($errorcode_map[$errorcode]))\n\t\t\t\t{\n\t\t\t\t\treturn $errorcode_map[$errorcode];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$errno=$errorcode?$errorcode:$errorlabel;\n\t\t\treturn ($errno?'DB_ERROR_'.$errno:'0');\n\t\t}\n\t\t//                '/(Table does not exist\\.|Relation [\\\"\\'].*[\\\"\\'] does not exist|sequence does not exist|class \".+\" not found)$/' => 'DB_ERROR_NOSUCHTABLE',\n\t\t//                '/table [\\\"\\'].*[\\\"\\'] does not exist/' => 'DB_ERROR_NOSUCHTABLE',\n\t\t//                '/Relation [\\\"\\'].*[\\\"\\'] already exists|Cannot insert a duplicate key into (a )?unique index.*/'      => 'DB_ERROR_RECORD_ALREADY_EXISTS',\n\t\t//                '/divide by zero$/'                     => 'DB_ERROR_DIVZERO',\n\t\t//                '/pg_atoi: error in .*: can\\'t parse /' => 'DB_ERROR_INVALID_NUMBER',\n\t\t//                '/ttribute [\\\"\\'].*[\\\"\\'] not found$|Relation [\\\"\\'].*[\\\"\\'] does not have attribute [\\\"\\'].*[\\\"\\']/' => 'DB_ERROR_NOSUCHFIELD',\n\t\t//                '/parser: parse error at or near \\\"/'   => 'DB_ERROR_SYNTAX',\n\t\t//                '/referential integrity violation/'     => 'DB_ERROR_CONSTRAINT'\n\t}\n\n\t/**\n\t * \\brief \t\tRenvoie le texte de l'erreur pgsql de l'operation precedente.\n\t * \\return\t\terror_text\n\t */\n\tfunction error()\n\t{\n\t\treturn pg_last_error($this->db);\n\t}\n\n\t/**\n\t * \\brief\t\tGet last ID after an insert INSERT.\n\t * \\param     \ttab     Table name concerned by insert. Ne sert pas sous MySql mais requis pour compatibilite avec Postgresql\n\t * \\return     \tint     id\n\t */\n\tfunction last_insert_id($tab,$fieldid='rowid')\n\t{\n\t\t//$result = pg_query($this->db,\"SELECT MAX(\".$fieldid.\") FROM \".$tab);\n\t\t$result = pg_query($this->db,\"SELECT currval('\".$tab.\"_\".$fieldid.\"_seq')\");\n\t\tif (! $result)\n\t\t{\n\t\t\tprint pg_last_error($this->db);\n\t\t\texit;\n\t\t}\n\t\t//$nbre = pg_num_rows($result);\n\t\t$row = pg_fetch_result($result,0,0);\n\t\treturn $row;\n\t}\n\n\t/**\n     *  Encrypt sensitive data in database\n     *  Warning: This function includes the escape, so it must use direct value\n     *  @param          fieldorvalue    Field name or value to encrypt\n     *  @param          withQuotes      Return string with quotes\n     *  @return         return          XXX(field) or XXX('value') or field or 'value'\n\t */\n\tfunction encrypt($fieldorvalue, $withQuotes=0)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $fieldorvalue;\n\t\treturn ($withQuotes?\"'\":\"\").$this->escape($return).($withQuotes?\"'\":\"\");\n\t}\n\n\n\t/**\n\t *\t\\brief          Decrypt sensitive data in database\n\t *\t\\param\t        value\t\t\tValue to decrypt\n\t * \t\\return\t        return\t\t\tDecrypted value if used\n\t */\n\tfunction decrypt($value)\n\t{\n\t\tglobal $conf;\n\n\t\t// Type of encryption (2: AES (recommended), 1: DES , 0: no encryption)\n\t\t$cryptType = ($conf->db->dolibarr_main_db_encryption?$conf->db->dolibarr_main_db_encryption:0);\n\n\t\t//Encryption key\n\t\t$cryptKey = (!empty($conf->db->dolibarr_main_db_cryptkey)?$conf->db->dolibarr_main_db_cryptkey:'');\n\n\t\t$return = $value;\n\t\treturn $return;\n\t}\n\n\n\t// Next function are not required. Only minor features use them.\n\t//--------------------------------------------------------------\n\n\n\t/**\n\t * \\brief          Renvoie l'id de la connexion\n\t * \\return\t        string      Id connexion\n\t */\n\tfunction DDLGetConnectId()\n\t{\n\t\treturn '?';\n\t}\n\n\n\n\t/**\n\t *\t\\brief          Create a new database\n\t *\t\\param\t        database\t\tDatabase name to create\n\t * \t\\param\t\t\tcharset\t\t\tCharset used to store data\n\t * \t\\param\t\t\tcollation\t\tCharset used to sort data\n\t * \t\\param\t\t\towner\t\t\tUsername of database owner\n\t * \t\\return\t        resource\t\tresource defined if OK, null if KO\n\t *  \\remarks        Ne pas utiliser les fonctions xxx_create_db (xxx=mysql, ...) car elles sont deprecated\n\t */\n\tfunction DDLCreateDb($database,$charset='',$collation='',$owner='')\n\t{\n\t\tif (empty($charset))   $charset=$this->forcecharset;\n\t\tif (empty($collation)) $collation=$this->collation;\n\n\t\t$ret=$this->query('CREATE DATABASE '.$database.' OWNER '.$owner.' ENCODING \\''.$charset.'\\'');\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \\brief      Liste des tables dans une database.\n\t * \\param\t    database\tNom de la database\n\t * \\return\t    resource\n\t */\n\tfunction DDLListTables($database, $table='')\n\t{\n\t\t$listtables=array();\n\n\t\t$like = '';\n\t\tif ($table) $like = \" AND table_name LIKE '\".$table.\"'\";\n\t\t$result = pg_query($this->db, \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'\".$like.\" ORDER BY table_name\");\n\t\twhile($row = $this->fetch_row($result))\n\t\t{\n\t\t\t$listtables[] = $row[0];\n\t\t}\n\t\treturn  $listtables;\n\t}\n\n\t/**\n\t *\t\\brief     \tListe les informations des champs d'une table.\n\t *\t\\param\t    table\t\t\tNom de la table\n\t *\t\\return\t    array\t\t\tTableau des informations des champs de la table\n\t *\tTODO modifier pour postgresql\n\t */\n\tfunction DDLInfoTable($table)\n\t{\n\t\t/*\n\t\t $infotables=array();\n\n\t\t $sql=\"SHOW FULL COLUMNS FROM \".$table.\";\";\n\n\t\t dol_syslog($sql,LOG_DEBUG);\n\t\t $result = $this->pg_query($this->db,$sql);\n\t\t while($row = $this->fetch_row($result))\n\t\t {\n\t\t\t$infotables[] = $row;\n\t\t\t}\n\t\t\treturn $infotables;\n\t\t\t*/\n\t}\n\n\n\t/**\n\t *\t\\brief      Cree une table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t    fields \t\t\tTableau associatif [nom champ][tableau des descriptions]\n\t *\t\\param\t    primary_key \tNom du champ qui sera la clef primaire\n\t *\t\\param\t    unique_keys \tTableau associatifs Nom de champs qui seront clef unique => valeur\n\t *\t\\param\t    fulltext \t\tTableau des Nom de champs qui seront indexes en fulltext\n\t *\t\\param\t    key \t\t\tTableau des champs cles noms => valeur\n\t *\t\\param\t    type \t\t\tType de la table\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >=0 si OK\n\t * TODO\n\t */\n\tfunction DDLCreateTable($table,$fields,$primary_key,$type,$unique_keys=\"\",$fulltext_keys=\"\",$keys=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (fields) : type,value,attribute,null,default,extra\n\t\t// ex. : $fields['rowid'] = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql = \"create table \".$table.\"(\";\n\t\t$i=0;\n\t\tforeach($fields as $field_name => $field_desc)\n\t\t{\n\t\t\t$sqlfields[$i] = $field_name.\" \";\n\t\t\t$sqlfields[$i]  .= $field_desc['type'];\n\t\t\tif( preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t\t$sqlfields[$i]  .= \"(\".$field_desc['value'].\")\";\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['attribute'];\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\t\t{\n\t\t\t\tif(preg_match(\"/null/i\",$field_desc['default']))\n\t\t\t\t$sqlfields[$i]  .= \" default \".$field_desc['default'];\n\t\t\t\telse\n\t\t\t\t$sqlfields[$i]  .= \" default '\".$field_desc['default'].\"'\";\n\t\t\t}\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['null'];\n\n\t\t\telse if( preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t\t$sqlfields[$i]  .= \" \".$field_desc['extra'];\n\t\t\t$i++;\n\t\t}\n\t\tif($primary_key != \"\")\n\t\t$pk = \"primary key(\".$primary_key.\")\";\n\n\t\tif($unique_keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($unique_keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqluq[$i] = \"UNIQUE KEY '\".$key.\"' ('\".$value.\"')\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\tif($keys != \"\")\n\t\t{\n\t\t\t$i = 0;\n\t\t\tforeach($keys as $key => $value)\n\t\t\t{\n\t\t\t\t$sqlk[$i] = \"KEY \".$key.\" (\".$value.\")\";\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\t$sql .= implode(',',$sqlfields);\n\t\tif($primary_key != \"\")\n\t\t$sql .= \",\".$pk;\n\t\tif($unique_keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqluq);\n\t\tif($keys != \"\")\n\t\t$sql .= \",\".implode(',',$sqlk);\n\t\t$sql .=\") type=\".$type;\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t * \t\\brief      Create a user\n\t *\t\\param\t    dolibarr_main_db_host \t\tIp serveur\n\t *\t\\param\t    dolibarr_main_db_user \t\tNom user a creer\n\t *\t\\param\t    dolibarr_main_db_pass \t\tMot de passe user a creer\n\t *\t\\param\t\tdolibarr_main_db_name\t\tDatabase name where user must be granted\n\t *\t\\return\t    int\t\t\t\t\t\t\t<0 si KO, >=0 si OK\n\t */\n\tfunction DDLCreateUser($dolibarr_main_db_host,$dolibarr_main_db_user,$dolibarr_main_db_pass,$dolibarr_main_db_name)\n\t{\n\t\t$sql = \"create user \\\"\".addslashes($dolibarr_main_db_user).\"\\\" with password '\".addslashes($dolibarr_main_db_pass).\"'\";\n\n\t\tdol_syslog(\"pgsql.lib::DDLCreateUser\", LOG_DEBUG);\t// No sql to avoid password in log\n\t\t$resql=$this->query($sql);\n\t\tif (! $resql)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\t\\brief      decrit une table dans une database.\n\t *\t\\param\t    table\tNom de la table\n\t *\t\\param\t    field\tOptionnel : Nom du champ si l'on veut la desc d'un champ\n\t *\t\\return\t    resource\n\t */\n\tfunction DDLDescTable($table,$field=\"\")\n\t{\n\t\t$sql =\"SELECT attname FROM pg_attribute, pg_type WHERE typname = '\".$table.\"' AND attrelid = typrelid\";\n\t\t$sql.=\" AND attname NOT IN ('cmin', 'cmax', 'ctid', 'oid', 'tableoid', 'xmin', 'xmax')\";\n\t\tif ($field) $sql.= \" AND attname = '\".$field.\"'\";\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\t$this->results = $this->query($sql);\n\t\treturn $this->results;\n\t}\n\n\t/**\n\t *\t\\brief      Insert a new field in table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t\tfield_name \t\tNom du champ a inserer\n\t *\t\\param\t    field_desc \t\tTableau associatif de description du champ a inserer[nom du parametre][valeur du parametre]\n\t *\t\\param\t    field_position \tOptionnel ex.: \"after champtruc\"\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLAddField($table,$field_name,$field_desc,$field_position=\"\")\n\t{\n\t\t// cles recherchees dans le tableau des descriptions (field_desc) : type,value,attribute,null,default,extra\n\t\t// ex. : $field_desc = array('type'=>'int','value'=>'11','null'=>'not null','extra'=> 'auto_increment');\n\t\t$sql= \"ALTER TABLE \".$table.\" ADD \".$field_name.\" \";\n\t\t$sql .= $field_desc['type'];\n\t\tif ($field_desc['type'] != 'int' && preg_match(\"/^[^\\s]/i\",$field_desc['value']))\n\t\t$sql .= \"(\".$field_desc['value'].\")\";\n\t\tif (preg_match(\"/^[^\\s]/i\",$field_desc['attribute']))\n\t\t$sql .= \" \".$field_desc['attribute'];\n\t\tif (preg_match(\"/^[^\\s]/i\",$field_desc['null']))\n\t\t$sql .= \" \".$field_desc['null'];\n\t\tif (preg_match(\"/^[^\\s]/i\",$field_desc['default']))\n\t\tif (preg_match(\"/null/i\",$field_desc['default']))\n\t\t$sql .= \" default \".$field_desc['default'];\n\t\telse\n\t\t$sql .= \" default '\".$field_desc['default'].\"'\";\n\t\tif (preg_match(\"/^[^\\s]/i\",$field_desc['extra']))\n\t\t$sql .= \" \".$field_desc['extra'];\n\t\t$sql .= \" \".$field_position;\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif(! $this -> query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\tUpdate format of a field into a table\n\t *\t@param\t    table \t\t\tName of table\n\t *\t@param\t\tfield_name \t\tName of field to modify\n\t *\t@param\t    field_desc \t\tArray with description of field format\n\t *\t@return\t    int\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction DDLUpdateField($table,$field_name,$field_desc)\n\t{\n\t\t$sql = \"ALTER TABLE \".$table;\n\t\t$sql .= \" MODIFY COLUMN \".$field_name.\" \".$field_desc['type'];\n\t\tif ($field_desc['type'] == 'int' || $field_desc['type'] == 'varchar') $sql.=\"(\".$field_desc['value'].\")\";\n\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\treturn -1;\n\t\telse\n\t\treturn 1;\n\t}\n\n\t/**\n\t *\t\\brief      Drop a field in table\n\t *\t\\param\t    table \t\t\tNom de la table\n\t *\t\\param\t\tfield_name \t\tNom du champ a inserer\n\t *\t\\return\t    int\t\t\t\t<0 si KO, >0 si OK\n\t */\n\tfunction DDLDropField($table,$field_name)\n\t{\n\t\t$sql= \"ALTER TABLE \".$table.\" DROP COLUMN `\".$field_name.\"`\";\n\t\tdol_syslog($sql,LOG_DEBUG);\n\t\tif (! $this->query($sql))\n\t\t{\n\t\t\t$this->error=$this->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\telse return 1;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn charset used to store data in database\n\t *\t\\return\t\tstring\t\tCharset\n\t */\n\tfunction getDefaultCharacterSetDatabase()\n\t{\n\t\t$resql=$this->query('SHOW SERVER_ENCODING');\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['server_encoding'];\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn list of available charset that can be used to store data in database\n\t *\t\\return\t\tarray\t\tList of Charset\n\t */\n\tfunction getListOfCharacterSet()\n\t{\n\t\t$resql=$this->query('SHOW SERVER_ENCODING');\n\t\t$liste = array();\n\t\tif ($resql)\n\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t\t$liste[$i]['charset'] = $obj->server_encoding;\n\t\t\t\t$liste[$i]['description'] = 'Default database charset';\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\treturn $liste;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn collation used in database\n\t *\t\\return\t\tstring\t\tCollation value\n\t */\n\tfunction getDefaultCollationDatabase()\n\t{\n\t\t$resql=$this->query('SHOW LC_COLLATE');\n\t\t$liste=$this->fetch_array($resql);\n\t\treturn $liste['lc_collate'];\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn list of available collation that can be used for database\n\t *\t\\return\t\tarray\t\tListe of Collation\n\t */\n\tfunction getListOfCollation()\n\t{\n\t\t$resql=$this->query('SHOW LC_COLLATE');\n\t\t$liste = array();\n\t\tif ($resql)\n\t\t{\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->fetch_object($resql) )\n\t\t\t{\n\t\t\t\t$liste[$i]['collation'] = $obj->lc_collate;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->free($resql);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\treturn $liste;\n\t}\n\n\t/**\n\t *\tReturn full path of dump program\n\t *\t@return\t\tstring\t\tFull path of dump program\n\t */\n\tfunction getPathOfDump()\n\t{\n\t\t$fullpathofdump='/pathtopgdump/pg_dump';\n\n\t\tif (file_exists('/usr/bin/pg_dump'))\n\t\t{\n\t\t    $fullpathofdump='/usr/bin/pg_dump';\n\t\t}\n\t\telse\n\t\t{\n            // TODO L'utilisateur de la base doit etre un superadmin pour lancer cette commande\n\t\t    $resql=$this->query('SHOW data_directory');\n    \t\tif ($resql)\n    \t\t{\n    \t\t\t$liste=$this->fetch_array($resql);\n    \t\t\t$basedir=$liste['data_directory'];\n    \t\t\t$fullpathofdump=preg_replace('/data$/','bin',$basedir).'/pg_dump';\n    \t\t}\n\t\t}\n\n\t\treturn $fullpathofdump;\n\t}\n\n    /**\n     *\tReturn full path of restore program\n     *\t@return\t\tstring\t\tFull path of restore program\n     */\n\tfunction getPathOfRestore()\n\t{\n\t\t$fullpathofdump='/pathtopgrestore/pg_restore';\n\n        if (file_exists('/usr/bin/pg_restore'))\n        {\n            $fullpathofdump='/usr/bin/pg_restore';\n        }\n        else\n        {\n            // TODO L'utilisateur de la base doit etre un superadmin pour lancer cette commande\n            $resql=$this->query('SHOW data_directory');\n            if ($resql)\n            {\n                $liste=$this->fetch_array($resql);\n                $basedir=$liste['data_directory'];\n                $fullpathofdump=preg_replace('/data$/','bin',$basedir).'/pg_restore';\n            }\n        }\n\n\t\treturn $fullpathofdump;\n\t}\n\n\t/**\n\t *\t\\brief\t\tReturn value of server parameters\n\t * \t\\param\t\tfilter\t\tFilter list on a particular value\n\t *\t\\return\t\tstring\t\tValue for parameter\n\t */\n\tfunction getServerParametersValues($filter='')\n\t{\n\t\t$result=array();\n\n\t\t$resql='select name,setting from pg_settings';\n\t\tif ($filter) $resql.=\" WHERE name = '\".addslashes($filter).\"'\";\n\t\t$resql=$this->query($resql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$this->fetch_object($resql);\n\t\t\t$result[$obj->name]=$obj->setting;\n\t\t}\n\n\t\treturn $result;\n\t}\n}\n?>\n", "<?php\n/* Copyright (C) 2002-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2011 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Eric Seigne          <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2011 Regis Houssin        <regis@dolibarr.fr>\n * Copyright (C) 2005      Lionel Cousteix      <etm_ltd@tiscali.co.uk>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/fiche.php\n *       \\brief      Tab of user card\n *       \\version    $Id: fiche.php,v 1.275 2011/07/31 23:19:43 eldy Exp $\n */\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/user/class/user.class.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/user/class/usergroup.class.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/contact/class/contact.class.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/images.lib.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/usergroups.lib.php\");\nif ($conf->ldap->enabled) require_once(DOL_DOCUMENT_ROOT.\"/lib/ldap.class.php\");\nif ($conf->adherent->enabled) require_once(DOL_DOCUMENT_ROOT.\"/adherents/class/adherent.class.php\");\n\n$id=GETPOST('id','int');\n$action=GETPOST(\"action\");\n$group=GETPOST(\"group\",\"int\",3);\n$confirm=GETPOST(\"confirm\");\n\n// Define value to know what current user can do on users\n$canadduser=($user->admin || $user->rights->user->user->creer);\n$canreaduser=($user->admin || $user->rights->user->user->lire);\n$canedituser=($user->admin || $user->rights->user->user->creer);\n$candisableuser=($user->admin || $user->rights->user->user->supprimer);\n$canreadgroup=$canreaduser;\n$caneditgroup=$canedituser;\nif (! empty($conf->global->MAIN_USE_ADVANCED_PERMS))\n{\n    $canreadgroup=($user->admin || $user->rights->user->group_advance->read);\n    $caneditgroup=($user->admin || $user->rights->user->group_advance->write);\n}\n// Define value to know what current user can do on properties of edited user\nif ($id)\n{\n    // $user est le user qui edite, $id est l'id de l'utilisateur edite\n    $caneditfield=( (($user->id == $id) && $user->rights->user->self->creer)\n    || (($user->id != $id) && $user->rights->user->user->creer) );\n    $caneditpassword=( (($user->id == $id) && $user->rights->user->self->password)\n    || (($user->id != $id) && $user->rights->user->user->password) );\n}\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2='user';\nif ($user->id == $id) { $feature2=''; $canreaduser=1; } // A user can always read its own card\n$result = restrictedArea($user, 'user', $id, '', $feature2);\nif ($user->id <> $id && ! $canreaduser) accessforbidden();\n\n$langs->load(\"users\");\n$langs->load(\"companies\");\n$langs->load(\"ldap\");\n\n$form = new Form($db);\n\n\n/**\n * Actions\n */\nif ($_GET[\"subaction\"] == 'addrights' && $canedituser)\n{\n    $edituser = new User($db);\n    $edituser->fetch($id);\n    $edituser->addrights($_GET[\"rights\"]);\n}\n\nif ($_GET[\"subaction\"] == 'delrights' && $canedituser)\n{\n    $edituser = new User($db);\n    $edituser->fetch($id);\n    $edituser->delrights($_GET[\"rights\"]);\n}\n\nif ($action == 'confirm_disable' && $confirm == \"yes\" && $candisableuser)\n{\n    if ($id <> $user->id)\n    {\n        $edituser = new User($db);\n        $edituser->fetch($id);\n        $edituser->setstatus(0);\n        Header(\"Location: \".DOL_URL_ROOT.'/user/fiche.php?id='.$id);\n        exit;\n    }\n}\nif ($action == 'confirm_enable' && $confirm == \"yes\" && $candisableuser)\n{\n    if ($id <> $user->id)\n    {\n        $message='';\n\n        $edituser = new User($db);\n        $edituser->fetch($id);\n\n        if (!empty($conf->file->main_limit_users))\n        {\n            $nb = $edituser->getNbOfUsers(\"active\");\n            if ($nb >= $conf->file->main_limit_users)\n            {\n                $message='<div class=\"error\">'.$langs->trans(\"YourQuotaOfUsersIsReached\").'</div>';\n            }\n        }\n\n        if (! $message)\n        {\n            $edituser->setstatus(1);\n            Header(\"Location: \".DOL_URL_ROOT.'/user/fiche.php?id='.$id);\n            exit;\n        }\n    }\n}\n\nif ($action == 'confirm_delete' && $confirm == \"yes\" && $candisableuser)\n{\n    if ($id <> $user->id)\n    {\n        $edituser = new User($db);\n        $edituser->id=$id;\n        $result = $edituser->delete();\n        if ($result < 0)\n        {\n            $langs->load(\"errors\");\n            $message='<div class=\"error\">'.$langs->trans(\"ErrorUserCannotBeDelete\").'</div>';\n        }\n        else\n        {\n            Header(\"Location: index.php\");\n            exit;\n        }\n    }\n}\n\n// Action ajout user\nif ($_POST[\"action\"] == 'add' && $canadduser)\n{\n    $message=\"\";\n    if (! $_POST[\"nom\"]) {\n        $message='<div class=\"error\">'.$langs->trans(\"NameNotDefined\").'</div>';\n        $action=\"create\";       // Go back to create page\n    }\n    if (! $_POST[\"login\"]) {\n        $message='<div class=\"error\">'.$langs->trans(\"LoginNotDefined\").'</div>';\n        $action=\"create\";       // Go back to create page\n    }\n\n    $edituser = new User($db);\n\n    if (!empty($conf->file->main_limit_users)) // If option to limit users is set\n    {\n        $nb = $edituser->getNbOfUsers(\"active\");\n        if ($nb >= $conf->file->main_limit_users)\n        {\n            $message='<div class=\"error\">'.$langs->trans(\"YourQuotaOfUsersIsReached\").'</div>';\n            $action=\"create\";       // Go back to create page\n        }\n    }\n\n    if (! $message)\n    {\n        $edituser->nom           = $_POST[\"nom\"];\n        $edituser->prenom        = $_POST[\"prenom\"];\n        $edituser->login         = $_POST[\"login\"];\n        $edituser->admin         = $_POST[\"admin\"];\n        $edituser->office_phone  = $_POST[\"office_phone\"];\n        $edituser->office_fax    = $_POST[\"office_fax\"];\n        $edituser->user_mobile   = $_POST[\"user_mobile\"];\n        $edituser->email         = $_POST[\"email\"];\n        $edituser->webcal_login  = $_POST[\"webcal_login\"];\n        $edituser->signature     = $_POST[\"signature\"];\n        $edituser->phenix_login  = $_POST[\"phenix_login\"];\n        $edituser->phenix_pass   = $_POST[\"phenix_pass\"];\n        $edituser->note          = $_POST[\"note\"];\n        $edituser->ldap_sid      = $_POST[\"ldap_sid\"];\n        // If multicompany is off, admin users must all be on entity 0.\n        $edituser->entity        = ( ! empty($_POST[\"admin\"]) && (! empty($_POST[\"superadmin\"]) || empty($conf->multicompany->enabled)) ? 0 : $_POST[\"entity\"]);\n\n        $db->begin();\n\n        $id = $edituser->create($user);\n        if ($id > 0)\n        {\n            if (isset($_POST['password']) && trim($_POST['password']))\n            {\n                $edituser->setPassword($user,trim($_POST['password']));\n            }\n\n            $db->commit();\n\n            Header(\"Location: fiche.php?id=$id\");\n            exit;\n        }\n        else\n        {\n            $langs->load(\"errors\");\n            $db->rollback();\n            if (is_array($edituser->errors) && count($edituser->errors)) $message='<div class=\"error\">'.join('<br>',$langs->trans($edituser->errors)).'</div>';\n            else $message='<div class=\"error\">'.$langs->trans($edituser->error).'</div>';\n            $action=\"create\";       // Go back to create page\n        }\n\n    }\n}\n\n// Action ajout groupe utilisateur\nif (($action == 'addgroup' || $action == 'removegroup') && $caneditfield)\n{\n    if ($group)\n    {\n        $editgroup = new UserGroup($db);\n        $editgroup->fetch($group);\n        $editgroup->oldcopy=dol_clone($editgroup);\n\n        $edituser = new User($db);\n        $edituser->fetch($id);\n        if ($action == 'addgroup')    $edituser->SetInGroup($group,GETPOST('entity'));\n        if ($action == 'removegroup') $edituser->RemoveFromGroup($group,GETPOST('entity'));\n\n        if ($result > 0)\n        {\n            header(\"Location: fiche.php?id=\".$id);\n            exit;\n        }\n        else\n        {\n            $message.=$edituser->error;\n        }\n    }\n}\n\nif ($action == 'update' && ! $_POST[\"cancel\"])\n{\n    require_once(DOL_DOCUMENT_ROOT.\"/lib/files.lib.php\");\n\n    if ($caneditfield)\t// Case we can edit all field\n    {\n        $message=\"\";\n\n        if (! $_POST[\"nom\"])\n        {\n            $message='<div class=\"error\">'.$langs->trans(\"NameNotDefined\").'</div>';\n            $action=\"edit\";       // Go back to create page\n        }\n        if (! $_POST[\"login\"])\n        {\n            $message='<div class=\"error\">'.$langs->trans(\"LoginNotDefined\").'</div>';\n            $action=\"edit\";       // Go back to create page\n        }\n\n        if (! $message)\n        {\n            $db->begin();\n            $edituser = new User($db);\n            $edituser->fetch($id);\n\n            $edituser->oldcopy=dol_clone($edituser);\n\n            $edituser->nom           = $_POST[\"nom\"];\n            $edituser->prenom        = $_POST[\"prenom\"];\n            $edituser->login         = $_POST[\"login\"];\n            $edituser->pass          = $_POST[\"password\"];\n            $edituser->admin         = $_POST[\"admin\"];\n            $edituser->office_phone  = $_POST[\"office_phone\"];\n            $edituser->office_fax    = $_POST[\"office_fax\"];\n            $edituser->user_mobile   = $_POST[\"user_mobile\"];\n            $edituser->email         = $_POST[\"email\"];\n            $edituser->signature     = $_POST[\"signature\"];\n            $edituser->openid        = $_POST[\"openid\"];\n            $edituser->webcal_login  = $_POST[\"webcal_login\"];\n            $edituser->phenix_login  = $_POST[\"phenix_login\"];\n            $edituser->phenix_pass   = $_POST[\"phenix_pass\"];\n            $edituser->entity        = ( (! empty($_POST[\"superadmin\"]) && ! empty($_POST[\"admin\"])) ? 0 : $_POST[\"entity\"]);\n            if (GETPOST('deletephoto')) $edituser->photo='';\n            if (! empty($_FILES['photo']['name'])) $edituser->photo = dol_sanitizeFileName($_FILES['photo']['name']);\n\n            $ret=$edituser->update($user);\n            if ($ret < 0)\n            {\n                if ($db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS')\n                {\n                    $langs->load(\"errors\");\n                    $message.='<div class=\"error\">'.$langs->trans(\"ErrorLoginAlreadyExists\",$edituser->login).'</div>';\n                }\n                else\n                {\n                    $message.='<div class=\"error\">'.$edituser->error.'</div>';\n                }\n            }\n\n            if ($ret >=0 && ! count($edituser->errors))\n            {\n                if (GETPOST('deletephoto') && $edituser->photo)\n                {\n                    $fileimg=$conf->user->dir_output.'/'.get_exdir($edituser->id,2,0,1).'/logos/'.$edituser->photo;\n                    $dirthumbs=$conf->user->dir_output.'/'.get_exdir($edituser->id,2,0,1).'/logos/thumbs';\n                    dol_delete_file($fileimg);\n                    dol_delete_dir_recursive($dirthumbs);\n                }\n\n                if (isset($_FILES['photo']['tmp_name']) && trim($_FILES['photo']['tmp_name']))\n                {\n                    $dir= $conf->user->dir_output . '/' . get_exdir($edituser->id,2,0,1);\n\n                    create_exdir($dir);\n\n                    if (@is_dir($dir))\n                    {\n                        $newfile=$dir.'/'.dol_sanitizeFileName($_FILES['photo']['name']);\n                        $result=dol_move_uploaded_file($_FILES['photo']['tmp_name'],$newfile,1,0,$_FILES['photo']['error']);\n\n                        if (! $result > 0)\n                        {\n                            $message .= '<div class=\"error\">'.$langs->trans(\"ErrorFailedToSaveFile\").'</div>';\n                        }\n                        else\n                        {\n                            // Create small thumbs for company (Ratio is near 16/9)\n                            // Used on logon for example\n                            $imgThumbSmall = vignette($newfile, $maxwidthsmall, $maxheightsmall, '_small', $quality);\n\n                            // Create mini thumbs for company (Ratio is near 16/9)\n                            // Used on menu or for setup page for example\n                            $imgThumbMini = vignette($newfile, $maxwidthmini, $maxheightmini, '_mini', $quality);\n                        }\n                    }\n                }\n            }\n\n            if ($ret >= 0 && ! count($edituser->errors))\n            {\n                $message.='<div class=\"ok\">'.$langs->trans(\"UserModified\").'</div>';\n                $db->commit();\n            }\n            else\n            {\n                $db->rollback();\n            }\n        }\n    }\n    else if ($caneditpassword)\t// Case we can edit only password\n    {\n        $edituser = new User($db);\n        $edituser->fetch($id);\n\n        $edituser->oldcopy=dol_clone($edituser);\n\n        $ret=$edituser->setPassword($user,$_POST[\"password\"]);\n        if ($ret < 0)\n        {\n            $message.='<div class=\"error\">'.$edituser->error.'</div>';\n        }\n    }\n}\n\n// Change password with a new generated one\nif ((($action == 'confirm_password' && $confirm == 'yes')\n|| ($action == 'confirm_passwordsend' && $confirm == 'yes')) && $caneditpassword)\n{\n    $edituser = new User($db);\n    $edituser->fetch($id);\n\n    $newpassword=$edituser->setPassword($user,'');\n    if ($newpassword < 0)\n    {\n        // Echec\n        $message = '<div class=\"error\">'.$langs->trans(\"ErrorFailedToSetNewPassword\").'</div>';\n    }\n    else\n    {\n        // Succes\n        if ($action == 'confirm_passwordsend' && $confirm == 'yes')\n        {\n            if ($edituser->send_password($user,$newpassword) > 0)\n            {\n                $message = '<div class=\"ok\">'.$langs->trans(\"PasswordChangedAndSentTo\",$edituser->email).'</div>';\n                //$message.=$newpassword;\n            }\n            else\n            {\n                $message = '<div class=\"ok\">'.$langs->trans(\"PasswordChangedTo\",$newpassword).'</div>';\n                $message.= '<div class=\"error\">'.$edituser->error.'</div>';\n            }\n        }\n        else\n        {\n            $message = '<div class=\"ok\">'.$langs->trans(\"PasswordChangedTo\",$newpassword).'</div>';\n        }\n    }\n}\n\n// Action initialisation donnees depuis record LDAP\nif ($_POST[\"action\"] == 'adduserldap')\n{\n    $selecteduser = $_POST['users'];\n\n    $required_fields = array(\n    $conf->global->LDAP_FIELD_NAME,\n    $conf->global->LDAP_FIELD_FIRSTNAME,\n    $conf->global->LDAP_FIELD_LOGIN,\n    $conf->global->LDAP_FIELD_LOGIN_SAMBA,\n    $conf->global->LDAP_FIELD_PASSWORD,\n    $conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n    $conf->global->LDAP_FIELD_PHONE,\n    $conf->global->LDAP_FIELD_FAX,\n    $conf->global->LDAP_FIELD_MOBILE,\n    $conf->global->LDAP_FIELD_MAIL,\n    $conf->global->LDAP_FIELD_SID);\n\n    $ldap = new Ldap();\n    $result = $ldap->connect_bind();\n    if ($result >= 0)\n    {\n        // Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n        $required_fields=array_unique(array_values(array_filter($required_fields, \"dolValidElement\")));\n\n        $ldapusers = $ldap->getRecords($selecteduser, $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields);\n        //print_r($ldapusers);\n\n        if (is_array($ldapusers))\n        {\n            foreach ($ldapusers as $key => $attribute)\n            {\n                $ldap_nom    = $attribute[$conf->global->LDAP_FIELD_NAME];\n                $ldap_prenom = $attribute[$conf->global->LDAP_FIELD_FIRSTNAME];\n                $ldap_login  = $attribute[$conf->global->LDAP_FIELD_LOGIN];\n                $ldap_loginsmb = $attribute[$conf->global->LDAP_FIELD_LOGIN_SAMBA];\n                $ldap_pass         = $attribute[$conf->global->LDAP_FIELD_PASSWORD];\n                $ldap_pass_crypted = $attribute[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED];\n                $ldap_phone  = $attribute[$conf->global->LDAP_FIELD_PHONE];\n                $ldap_fax    = $attribute[$conf->global->LDAP_FIELD_FAX];\n                $ldap_mobile = $attribute[$conf->global->LDAP_FIELD_MOBILE];\n                $ldap_mail   = $attribute[$conf->global->LDAP_FIELD_MAIL];\n                $ldap_sid    = $attribute[$conf->global->LDAP_FIELD_SID];\n            }\n        }\n    }\n    else\n    {\n        $message='<div class=\"error\">'.$ldap->error.'</div>';\n    }\n}\n\n\n\n/*\n * Affichage page\n */\n\nllxHeader('',$langs->trans(\"UserCard\"));\n\n$html = new Form($db);\n\nif (($action == 'create') || ($action == 'adduserldap'))\n{\n    /* ************************************************************************** */\n    /*                                                                            */\n    /* Affichage fiche en mode creation                                           */\n    /*                                                                            */\n    /* ************************************************************************** */\n\n    print_fiche_titre($langs->trans(\"NewUser\"));\n\n    print $langs->trans(\"CreateInternalUserDesc\");\n    print \"<br>\";\n    print \"<br>\";\n\n    if ($conf->ldap->enabled && $conf->global->LDAP_SYNCHRO_ACTIVE == 'ldap2dolibarr')\n    {\n        /*\n         * Affiche formulaire d'ajout d'un compte depuis LDAP\n         * si on est en synchro LDAP vers Dolibarr\n         */\n\n        $ldap = new Ldap();\n        $result = $ldap->connect_bind();\n        if ($result >= 0)\n        {\n            $required_fields=array($conf->global->LDAP_KEY_USERS,\n            $conf->global->LDAP_FIELD_FULLNAME,\n            $conf->global->LDAP_FIELD_NAME,\n            $conf->global->LDAP_FIELD_FIRSTNAME,\n            $conf->global->LDAP_FIELD_LOGIN,\n            $conf->global->LDAP_FIELD_LOGIN_SAMBA);\n\n            // Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n            $required_fields=array_unique(array_values(array_filter($required_fields, \"dolValidElement\")));\n\n            // Get from LDAP database an array of results\n            $ldapusers = $ldap->getRecords('*', $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields, 1);\n            if (is_array($ldapusers))\n            {\n                $liste=array();\n                foreach ($ldapusers as $key => $ldapuser)\n                {\n                    // Define the label string for this user\n                    $label='';\n                    foreach ($required_fields as $value)\n                    {\n                        if ($value)\n                        {\n                            $label.=$value.\"=\".$ldapuser[$value].\" \";\n                        }\n                    }\n                    $liste[$key] = $label;\n                }\n\n            }\n            else\n            {\n                $message='<div class=\"error\">'.$ldap->error.'</div>';\n            }\n        }\n        else\n        {\n            $message='<div class=\"error\">'.$ldap->error.'</div>';\n        }\n    }\n\n    dol_htmloutput_errors($message);\n\n    if ($conf->ldap->enabled && $conf->global->LDAP_SYNCHRO_ACTIVE == 'ldap2dolibarr')\n    {\n        // Si la liste des users est rempli, on affiche la liste deroulante\n        if (is_array($liste))\n        {\n            print \"\\n\\n<!-- Form liste LDAP debut -->\\n\";\n\n            print '<form name=\"add_user_ldap\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"post\">';\n            print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n            print '<table width=\"100%\" class=\"border\"><tr>';\n            print '<td width=\"160\">';\n            print $langs->trans(\"LDAPUsers\");\n            print '</td>';\n            print '<td>';\n            print '<input type=\"hidden\" name=\"action\" value=\"adduserldap\">';\n            print $html->selectarray('users', $liste, '', 1);\n            print '</td><td align=\"center\">';\n            print '<input type=\"submit\" class=\"button\" value=\"'.$langs->trans('Get').'\">';\n            print '</td></tr></table>';\n            print '</form>';\n\n            print \"\\n<!-- Form liste LDAP fin -->\\n\\n\";\n            print '<br>';\n        }\n    }\n\n    print '<form action=\"fiche.php\" method=\"post\" name=\"createuser\">';\n    print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n    print '<input type=\"hidden\" name=\"action\" value=\"add\">';\n    if ($ldap_sid) print '<input type=\"hidden\" name=\"ldap_sid\" value=\"'.$ldap_sid.'\">';\n    print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n\n    print '<table class=\"border\" width=\"100%\">';\n\n    print '<tr>';\n\n    // Nom\n    print '<td valign=\"top\" width=\"160\"><span class=\"fieldrequired\">'.$langs->trans(\"Lastname\").'</span></td>';\n    print '<td>';\n    if ($ldap_nom)\n    {\n        print '<input type=\"hidden\" name=\"nom\" value=\"'.$ldap_nom.'\">';\n        print $ldap_nom;\n    }\n    else\n    {\n        print '<input size=\"30\" type=\"text\" name=\"nom\" value=\"'.$_POST[\"nom\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Prenom\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Firstname\").'</td>';\n    print '<td>';\n    if ($ldap_prenom)\n    {\n        print '<input type=\"hidden\" name=\"prenom\" value=\"'.$ldap_prenom.'\">';\n        print $ldap_prenom;\n    }\n    else\n    {\n        print '<input size=\"30\" type=\"text\" name=\"prenom\" value=\"'.$_POST[\"prenom\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Login\n    print '<tr><td valign=\"top\"><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n    print '<td>';\n    if ($ldap_login)\n    {\n        print '<input type=\"hidden\" name=\"login\" value=\"'.$ldap_login.'\">';\n        print $ldap_login;\n    }\n    elseif ($ldap_loginsmb)\n    {\n        print '<input type=\"hidden\" name=\"login\" value=\"'.$ldap_loginsmb.'\">';\n        print $ldap_loginsmb;\n    }\n    else\n    {\n        print '<input size=\"20\" maxsize=\"24\" type=\"text\" name=\"login\" value=\"'.$_POST[\"login\"].'\">';\n    }\n    print '</td></tr>';\n\n    $generated_password='';\n    if (! $ldap_sid)\n    {\n        include_once(DOL_DOCUMENT_ROOT.'/lib/security.lib.php');\n        $generated_password=getRandomPassword('');\n    }\n    $password=$generated_password;\n\n    // Mot de passe\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Password\").'</td>';\n    print '<td>';\n    if ($ldap_sid)\n    {\n        print 'Mot de passe du domaine';\n    }\n    else\n    {\n        if ($ldap_pass)\n        {\n            print '<input type=\"hidden\" name=\"password\" value=\"'.$ldap_pass.'\">';\n            print preg_replace('/./i','*',$ldap_pass);\n        }\n        else\n        {\n            // We do not use a field password but a field text to show new password to use.\n            print '<input size=\"30\" maxsize=\"32\" type=\"text\" name=\"password\" value=\"'.$password.'\">';\n        }\n    }\n    print '</td></tr>';\n\n    // Administrateur\n    if ($user->admin)\n    {\n        print '<tr><td valign=\"top\">'.$langs->trans(\"Administrator\").'</td>';\n        print '<td>';\n        print $form->selectyesno('admin',$_POST[\"admin\"],1);\n\n        if (! empty($conf->multicompany->enabled) && ! $user->entity)\n        {\n            if ($conf->use_javascript_ajax)\n            {\n                print '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t$(function() {\n\t\t\t\t\t\t\t\t$(\"select[name=admin]\").change(function() {\n\t\t\t\t\t\t\t\t\t if ( $(this).val() == 0 ) {\n\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t \t\t.attr(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t \t\t.attr(\"checked\", false);\n\t\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t \t\t.attr(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t</script>';\n            }\n            $checked=($_POST[\"superadmin\"]?' checked':'');\n            $disabled=($_POST[\"superadmin\"]?'':' disabled');\n            print '<input type=\"checkbox\" name=\"superadmin\" value=\"1\"'.$checked.$disabled.' /> '.$langs->trans(\"SuperAdministrator\");\n        }\n        print \"</td></tr>\\n\";\n    }\n\n    // Type\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Type\").'</td>';\n    print '<td>';\n    print $html->textwithpicto($langs->trans(\"Internal\"),$langs->trans(\"InternalExternalDesc\"));\n    print '</td></tr>';\n\n    // Tel\n    print '<tr><td valign=\"top\">'.$langs->trans(\"PhonePro\").'</td>';\n    print '<td>';\n    if ($ldap_phone)\n    {\n        print '<input type=\"hidden\" name=\"office_phone\" value=\"'.$ldap_phone.'\">';\n        print $ldap_phone;\n    }\n    else\n    {\n        print '<input size=\"20\" type=\"text\" name=\"office_phone\" value=\"'.$_POST[\"office_phone\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Tel portable\n    print '<tr><td valign=\"top\">'.$langs->trans(\"PhoneMobile\").'</td>';\n    print '<td>';\n    if ($ldap_mobile)\n    {\n        print '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$ldap_mobile.'\">';\n        print $ldap_mobile;\n    }\n    else\n    {\n        print '<input size=\"20\" type=\"text\" name=\"user_mobile\" value=\"'.$_POST[\"user_mobile\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Fax\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Fax\").'</td>';\n    print '<td>';\n    if ($ldap_fax)\n    {\n        print '<input type=\"hidden\" name=\"office_fax\" value=\"'.$ldap_fax.'\">';\n        print $ldap_fax;\n    }\n    else\n    {\n        print '<input size=\"20\" type=\"text\" name=\"office_fax\" value=\"'.$_POST[\"office_fax\"].'\">';\n    }\n    print '</td></tr>';\n\n    // EMail\n    print '<tr><td valign=\"top\"'.($conf->global->USER_MAIL_REQUIRED?' class=\"fieldrequired\"':'').'>'.$langs->trans(\"EMail\").'</td>';\n    print '<td>';\n    if ($ldap_mail)\n    {\n        print '<input type=\"hidden\" name=\"email\" value=\"'.$ldap_mail.'\">';\n        print $ldap_mail;\n    }\n    else\n    {\n        print '<input size=\"40\" type=\"text\" name=\"email\" value=\"'.$_POST[\"email\"].'\">';\n    }\n    print '</td></tr>';\n\n    // Signature\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Signature\").'</td>';\n    print '<td>';\n    print '<textarea rows=\"'.ROWS_5.'\" cols=\"90\" name=\"signature\">'.$_POST[\"signature\"].'</textarea>';\n    print '</td></tr>';\n\n    // Note\n    print '<tr><td valign=\"top\">';\n    print $langs->trans(\"Note\");\n    print '</td><td>';\n    if ($conf->fckeditor->enabled && $conf->global->FCKEDITOR_ENABLE_USER)\n    {\n        require_once(DOL_DOCUMENT_ROOT.\"/lib/doleditor.class.php\");\n        $doleditor=new DolEditor('note','','',180,'dolibarr_notes','',false);\n        $doleditor->Create();\n    }\n    else\n    {\n        print '<textarea class=\"flat\" name=\"note\" rows=\"'.ROWS_4.'\" cols=\"90\">';\n        print $_POST[\"note\"];\n        print '</textarea>';\n    }\n    print \"</td></tr>\\n\";\n\n    // Autres caracteristiques issus des autres modules\n\n    // Module Webcalendar\n    if ($conf->webcalendar->enabled)\n    {\n        print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"LoginWebcal\").'</td>';\n        print '<td><input size=\"30\" type=\"text\" name=\"webcal_login\" value=\"'.$_POST[\"webcal_login\"].'\"></td></tr>';\n    }\n\n    // Module Phenix\n    if ($conf->phenix->enabled)\n    {\n        print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"LoginPenix\").'</td>';\n        print '<td><input size=\"30\" type=\"text\" name=\"phenix_login\" value=\"'.$_POST[\"phenix_login\"].'\"></td></tr>';\n        print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"PassPenix\").'</td>';\n        print '<td><input size=\"30\" type=\"text\" name=\"phenix_pass\" value=\"'.$_POST[\"phenix_pass\"].'\"></td></tr>';\n    }\n\n    print \"<tr>\".'<td align=\"center\" colspan=\"2\"><input class=\"button\" value=\"'.$langs->trans(\"CreateUser\").'\" type=\"submit\"></td></tr>';\n    print \"</table>\\n\";\n    print \"</form>\";\n}\nelse\n{\n    /* ************************************************************************** */\n    /*                                                                            */\n    /* Visu et edition                                                            */\n    /*                                                                            */\n    /* ************************************************************************** */\n\n    if ($id)\n    {\n        $fuser = new User($db);\n        $fuser->fetch($id);\n\n        // Connexion ldap\n        // pour recuperer passDoNotExpire et userChangePassNextLogon\n        if ($conf->ldap->enabled && $fuser->ldap_sid)\n        {\n            $ldap = new Ldap();\n            $result=$ldap->connect_bind();\n            if ($result > 0)\n            {\n                $userSearchFilter = '('.$conf->global->LDAP_FILTER_CONNECTION.'('.$this->getUserIdentifier().'='.$fuser->login.'))';\n                $entries = $ldap->fetch($fuser->login,$userSearchFilter);\n                if (! $entries)\n                {\n                    $message .= $ldap->error;\n                }\n\n                $passDoNotExpire = 0;\n                $userChangePassNextLogon = 0;\n                $userDisabled = 0;\n                $statutUACF = '';\n\n                //On verifie les options du compte\n                if (count($ldap->uacf) > 0)\n                {\n                    foreach ($ldap->uacf as $key => $statut)\n                    {\n                        if ($key == 65536)\n                        {\n                            $passDoNotExpire = 1;\n                            $statutUACF = $statut;\n                        }\n                    }\n                }\n                else\n                {\n                    $userDisabled = 1;\n                    $statutUACF = \"ACCOUNTDISABLE\";\n                }\n\n                if ($ldap->pwdlastset == 0)\n                {\n                    $userChangePassNextLogon = 1;\n                }\n            }\n        }\n\n        /*\n         * Affichage onglets\n         */\n        $head = user_prepare_head($fuser);\n\n        $title = $langs->trans(\"User\");\n        dol_fiche_head($head, 'user', $title, 0, 'user');\n\n        /*\n         * Confirmation reinitialisation mot de passe\n         */\n        if ($action == 'password')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"ReinitPassword\"),$langs->trans(\"ConfirmReinitPassword\",$fuser->login),\"confirm_password\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        /*\n         * Confirmation envoi mot de passe\n         */\n        if ($action == 'passwordsend')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"SendNewPassword\"),$langs->trans(\"ConfirmSendNewPassword\",$fuser->login),\"confirm_passwordsend\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        /*\n         * Confirmation desactivation\n         */\n        if ($action == 'disable')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"DisableAUser\"),$langs->trans(\"ConfirmDisableUser\",$fuser->login),\"confirm_disable\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        /*\n         * Confirmation activation\n         */\n        if ($action == 'enable')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"EnableAUser\"),$langs->trans(\"ConfirmEnableUser\",$fuser->login),\"confirm_enable\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        /*\n         * Confirmation suppression\n         */\n        if ($action == 'delete')\n        {\n            $ret=$html->form_confirm(\"fiche.php?id=$fuser->id\",$langs->trans(\"DeleteAUser\"),$langs->trans(\"ConfirmDeleteUser\",$fuser->login),\"confirm_delete\", '', 0, 1);\n            if ($ret == 'html') print '<br>';\n        }\n\n        dol_htmloutput_mesg($message);\n\n        /*\n         * Fiche en mode visu\n         */\n        if ($_GET[\"action\"] != 'edit')\n        {\n            print '<table class=\"border\" width=\"100%\">';\n\n            // Ref\n            print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Ref\").'</td>';\n            print '<td colspan=\"2\">';\n            print $html->showrefnav($fuser,'id','',$user->rights->user->user->lire || $user->admin);\n            print '</td>';\n            print '</tr>'.\"\\n\";\n\n            $rowspan=14;\n            if ($conf->societe->enabled) $rowspan++;\n            if ($conf->adherent->enabled) $rowspan++;\n            if ($conf->webcalendar->enabled) $rowspan++;\n            if ($conf->phenix->enabled) $rowspan+=2;\n\n            // Lastname\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Lastname\").'</td>';\n            print '<td>'.$fuser->nom.'</td>';\n\n            // Photo\n            print '<td align=\"center\" valign=\"middle\" width=\"25%\" rowspan=\"'.$rowspan.'\">';\n            print $html->showphoto('userphoto',$fuser,100);\n            print '</td>';\n\n            print '</tr>'.\"\\n\";\n\n            // Firstname\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Firstname\").'</td>';\n            print '<td>'.$fuser->prenom.'</td>';\n            print '</tr>'.\"\\n\";\n\n            // Login\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Login\").'</td>';\n            if ($fuser->ldap_sid && $fuser->statut==0)\n            {\n                print '<td class=\"error\">'.$langs->trans(\"LoginAccountDisableInDolibarr\").'</td>';\n            }\n            else\n            {\n                print '<td>'.$fuser->login.'</td>';\n            }\n            print '</tr>'.\"\\n\";\n\n            // Password\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Password\").'</td>';\n            if ($fuser->ldap_sid)\n            {\n                if ($passDoNotExpire)\n                {\n                    print '<td>'.$langs->trans(\"LdapUacf_\".$statutUACF).'</td>';\n                }\n                else if($userChangePassNextLogon)\n                {\n                    print '<td class=\"warning\">'.$langs->trans(\"UserMustChangePassNextLogon\",$ldap->domainFQDN).'</td>';\n                }\n                else if($userDisabled)\n                {\n                    print '<td class=\"warning\">'.$langs->trans(\"LdapUacf_\".$statutUACF,$ldap->domainFQDN).'</td>';\n                }\n                else\n                {\n                    print '<td>'.$langs->trans(\"DomainPassword\").'</td>';\n                }\n            }\n            else\n            {\n                print '<td>';\n                if ($fuser->pass) print preg_replace('/./i','*',$fuser->pass);\n                else\n                {\n                    if ($user->admin) print $langs->trans(\"Crypted\").': '.$fuser->pass_indatabase_crypted;\n                    else print $langs->trans(\"Hidden\");\n                }\n                print \"</td>\";\n            }\n            print '</tr>'.\"\\n\";\n\n            // Administrator\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Administrator\").'</td><td>';\n            if (! empty($conf->multicompany->enabled) && $fuser->admin && ! $fuser->entity)\n            {\n                print $html->textwithpicto(yn($fuser->admin),$langs->trans(\"SuperAdministratorDesc\"),1,\"superadmin\");\n            }\n            else if ($fuser->admin)\n            {\n                print $html->textwithpicto(yn($fuser->admin),$langs->trans(\"AdministratorDesc\"),1,\"admin\");\n            }\n            else\n            {\n                print yn($fuser->admin);\n            }\n            print '</td></tr>'.\"\\n\";\n\n            // Type\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Type\").'</td><td>';\n            if ($fuser->societe_id)\n            {\n                print $html->textwithpicto($langs->trans(\"External\"),$langs->trans(\"InternalExternalDesc\"));\n            }\n            else if ($fuser->ldap_sid)\n            {\n                print $langs->trans(\"DomainUser\",$ldap->domainFQDN);\n            }\n            else\n            {\n                print $html->textwithpicto($langs->trans(\"Internal\"),$langs->trans(\"InternalExternalDesc\"));\n            }\n            print '</td></tr>'.\"\\n\";\n\n            // Tel pro\n            print '<tr><td valign=\"top\">'.$langs->trans(\"PhonePro\").'</td>';\n            print '<td>'.dol_print_phone($fuser->office_phone,'',0,0,1).'</td>';\n            print '</tr>'.\"\\n\";\n\n            // Tel mobile\n            print '<tr><td valign=\"top\">'.$langs->trans(\"PhoneMobile\").'</td>';\n            print '<td>'.dol_print_phone($fuser->user_mobile,'',0,0,1).'</td>';\n            print '</tr>'.\"\\n\";\n\n            // Fax\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Fax\").'</td>';\n            print '<td>'.dol_print_phone($fuser->office_fax,'',0,0,1).'</td>';\n            print '</tr>'.\"\\n\";\n\n            // EMail\n            print '<tr><td valign=\"top\">'.$langs->trans(\"EMail\").'</td>';\n            print '<td>'.dol_print_email($fuser->email,0,0,1).'</td>';\n            print \"</tr>\\n\";\n\n            // Signature\n            print '<tr><td valign=\"top\">'.$langs->trans('Signature').'</td>';\n            print '<td>'.$fuser->signature.'</td>';\n            print \"</tr>\\n\";\n\n            // Statut\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Status\").'</td>';\n            print '<td>';\n            print $fuser->getLibStatut(4);\n            print '</td>';\n            print '</tr>'.\"\\n\";\n\n            print '<tr><td valign=\"top\">'.$langs->trans(\"LastConnexion\").'</td>';\n            print '<td>'.dol_print_date($fuser->datelastlogin,\"dayhour\").'</td>';\n            print \"</tr>\\n\";\n\n            print '<tr><td valign=\"top\">'.$langs->trans(\"PreviousConnexion\").'</td>';\n            print '<td>'.dol_print_date($fuser->datepreviouslogin,\"dayhour\").'</td>';\n            print \"</tr>\\n\";\n\n\n            if (preg_match('/myopenid/',$conf->authmode))\n            {\n                print '<tr><td valign=\"top\">'.$langs->trans(\"url_openid\").'</td>';\n                print '<td>'.$fuser->openid.'</td>';\n                print \"</tr>\\n\";\n            }\n            // Autres caracteristiques issus des autres modules\n\n            // Module Webcalendar\n            if ($conf->webcalendar->enabled)\n            {\n                $langs->load(\"other\");\n                print '<tr><td valign=\"top\">'.$langs->trans(\"LoginWebcal\").'</td>';\n                print '<td>'.$fuser->webcal_login.'&nbsp;</td>';\n                print '</tr>'.\"\\n\";\n            }\n\n            // Module Phenix\n            if ($conf->phenix->enabled)\n            {\n                $langs->load(\"other\");\n                print '<tr><td valign=\"top\">'.$langs->trans(\"LoginPhenix\").'</td>';\n                print '<td>'.$fuser->phenix_login.'&nbsp;</td>';\n                print \"</tr>\\n\";\n                print '<tr><td valign=\"top\">'.$langs->trans(\"PassPhenix\").'</td>';\n                print '<td>'.preg_replace('/./i','*',$fuser->phenix_pass_crypted).'&nbsp;</td>';\n                print '</tr>'.\"\\n\";\n            }\n\n            // Company / Contact\n            if ($conf->societe->enabled)\n            {\n                print '<tr><td valign=\"top\">'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n                print '<td>';\n                if ($fuser->societe_id > 0)\n                {\n                    $societe = new Societe($db);\n                    $societe->fetch($fuser->societe_id);\n                    print $societe->getNomUrl(1,'');\n                }\n                else\n                {\n                    print $langs->trans(\"ThisUserIsNot\");\n                }\n                if ($fuser->contact_id)\n                {\n                    $contact = new Contact($db);\n                    $contact->fetch($fuser->contact_id);\n                    if ($fuser->societe_id > 0) print ' / ';\n                    else print '<br>';\n                    print '<a href=\"'.DOL_URL_ROOT.'/contact/fiche.php?id='.$fuser->contact_id.'\">'.img_object($langs->trans(\"ShowContact\"),'contact').' '.dol_trunc($contact->getFullName($langs),32).'</a>';\n                }\n                print '</td>';\n                print '</tr>'.\"\\n\";\n            }\n\n            // Module Adherent\n            if ($conf->adherent->enabled)\n            {\n                $langs->load(\"members\");\n                print '<tr><td valign=\"top\">'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n                print '<td>';\n                if ($fuser->fk_member)\n                {\n                    $adh=new Adherent($db);\n                    $adh->fetch($fuser->fk_member);\n                    $adh->ref=$adh->getFullname($langs);\t// Force to show login instead of id\n                    print $adh->getNomUrl(1);\n                }\n                else\n                {\n                    print $langs->trans(\"UserNotLinkedToMember\");\n                }\n                print '</td>';\n                print '</tr>'.\"\\n\";\n            }\n\n            print \"</table>\\n\";\n\n            print \"</div>\\n\";\n\n\n            /*\n             * Barre d'actions\n             */\n\n            print '<div class=\"tabsAction\">';\n\n            if ($caneditfield &&\n            (empty($conf->multicompany->enabled) || (($fuser->entity == $conf->entity) || $fuser->entity == $user->entity)) )\n            {\n                if (! empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED))\n                {\n                    print '<a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"DisabledInMonoUserMode\")).'\">'.$langs->trans(\"Modify\").'</a>';\n                }\n                else\n                {\n                    print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=edit\">'.$langs->trans(\"Modify\").'</a>';\n                }\n            }\n            elseif ($caneditpassword && ! $fuser->ldap_sid &&\n            (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n            {\n                print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=edit\">'.$langs->trans(\"EditPassword\").'</a>';\n            }\n\n            // Si on a un gestionnaire de generation de mot de passe actif\n            if ($conf->global->USER_PASSWORD_GENERATED != 'none')\n            {\n                if (($user->id != $id && $caneditpassword) && $fuser->login && !$fuser->ldap_sid &&\n                (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)))\n                {\n                    print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=password\">'.$langs->trans(\"ReinitPassword\").'</a>';\n                }\n\n                if (($user->id != $id && $caneditpassword) && $fuser->login && !$fuser->ldap_sid &&\n                (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n                {\n                    if ($fuser->email) print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=passwordsend\">'.$langs->trans(\"SendNewPassword\").'</a>';\n                    else print '<a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans(\"SendNewPassword\").'</a>';\n                }\n            }\n\n            // Activer\n            if ($user->id <> $id && $candisableuser && $fuser->statut == 0 &&\n            (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n            {\n                print '<a class=\"butAction\" href=\"fiche.php?id='.$fuser->id.'&amp;action=enable\">'.$langs->trans(\"Reactivate\").'</a>';\n            }\n            // Desactiver\n            if ($user->id <> $id && $candisableuser && $fuser->statut == 1 &&\n            (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n            {\n                print '<a class=\"butActionDelete\" href=\"fiche.php?action=disable&amp;id='.$fuser->id.'\">'.$langs->trans(\"DisableUser\").'</a>';\n            }\n            // Delete\n            if ($user->id <> $id && $candisableuser &&\n            (empty($conf->multicompany->enabled) || ($fuser->entity == $conf->entity)) )\n            {\n                print '<a class=\"butActionDelete\" href=\"fiche.php?action=delete&amp;id='.$fuser->id.'\">'.$langs->trans(\"DeleteUser\").'</a>';\n            }\n\n            print \"</div>\\n\";\n            print \"<br>\\n\";\n\n\n\n            /*\n             * Liste des groupes dans lequel est l'utilisateur\n             */\n\n            if ($canreadgroup)\n            {\n                print_fiche_titre($langs->trans(\"ListOfGroupsForUser\"),'','');\n\n                // On selectionne les groupes auquel fait parti le user\n                $exclude = array();\n\n                $usergroup=new UserGroup($db);\n                $groupslist = $usergroup->listGroupsForUser($fuser->id);\n\n                if (! empty($groupslist))\n                {\n                    foreach($groupslist as $groupforuser)\n                    {\n                        $exclude[]=$groupforuser->id;\n                    }\n                }\n\n                if ($caneditgroup)\n                {\n                    $form = new Form($db);\n                    print '<form action=\"fiche.php?id='.$id.'\" method=\"post\">'.\"\\n\";\n                    print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n                    print '<input type=\"hidden\" name=\"action\" value=\"addgroup\">';\n                    print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n                    print '<table class=\"noborder\" width=\"100%\">'.\"\\n\";\n                    print '<tr class=\"liste_titre\"><td class=\"liste_titre\" width=\"25%\">'.$langs->trans(\"GroupsToAdd\").'</td>'.\"\\n\";\n                    print '<td>';\n                    print $form->select_dolgroups('','group',1,$exclude);\n                    print ' &nbsp; ';\n                    print '<input type=\"submit\" class=\"button\" value=\"'.$langs->trans(\"Add\").'\">';\n                    print '</td></tr>'.\"\\n\";\n                    print '</table></form>'.\"\\n\";\n\n                    print '<br>';\n                }\n\n                /*\n                 * Groupes affectes\n                 */\n                print '<table class=\"noborder\" width=\"100%\">';\n                print '<tr class=\"liste_titre\">';\n                print '<td class=\"liste_titre\" width=\"25%\">'.$langs->trans(\"Groups\").'</td>';\n                print \"<td>&nbsp;</td></tr>\\n\";\n\n                if (! empty($groupslist))\n                {\n                    $var=true;\n\n                    foreach($groupslist as $group)\n                    {\n                        $var=!$var;\n\n                        print \"<tr \".$bc[$var].\">\";\n                        print '<td>';\n                        if ($caneditgroup)\n                        {\n                            print '<a href=\"'.DOL_URL_ROOT.'/user/group/fiche.php?id='.$group->id.'\">'.img_object($langs->trans(\"ShowGroup\"),\"group\").' '.$group->nom.'</a>';\n                        }\n                        else\n                        {\n                            print img_object($langs->trans(\"ShowGroup\"),\"group\").' '.$group->nom;\n                        }\n                        print '</td>';\n                        print '<td align=\"right\">';\n\n                        if ($caneditgroup)\n                        {\n                            print '<a href=\"'.$_SERVER['PHP_SELF'].'?id='.$fuser->id.'&amp;action=removegroup&amp;group='.$group->id.'&amp;entity='.$group->usergroup_entity.'\">';\n                            print img_delete($langs->trans(\"RemoveFromGroup\"));\n                        }\n                        else\n                        {\n                            print \"&nbsp;\";\n                        }\n                        print \"</td></tr>\\n\";\n                    }\n                }\n                else\n                {\n                    print '<tr '.$bc[false].'><td colspan=2>'.$langs->trans(\"None\").'</td></tr>';\n                }\n\n                print \"</table>\";\n                print \"<br>\";\n            }\n        }\n\n\n        /*\n         * Fiche en mode edition\n         */\n\n        if ($_GET[\"action\"] == 'edit' && ($canedituser || ($user->id == $fuser->id)))\n        {\n\n            print '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$fuser->id.'\" method=\"POST\" name=\"updateuser\" enctype=\"multipart/form-data\">';\n            print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n            print '<input type=\"hidden\" name=\"action\" value=\"update\">';\n            print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n            print '<table width=\"100%\" class=\"border\">';\n\n            $rowspan=12;\n            if ($conf->societe->enabled) $rowspan++;\n            if ($conf->adherent->enabled) $rowspan++;\n            if ($conf->webcalendar->enabled) $rowspan++;\n            if ($conf->phenix->enabled) $rowspan+=2;\n\n            print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Ref\").'</td>';\n            print '<td colspan=\"2\">';\n            print $fuser->id;\n            print '</td>';\n            print '</tr>';\n\n            // Lastname\n            print \"<tr>\";\n            print '<td valign=\"top\" class=\"fieldrequired\">'.$langs->trans(\"Lastname\").'</td>';\n            print '<td>';\n            if ($caneditfield && !$fuser->ldap_sid)\n            {\n                print '<input size=\"30\" type=\"text\" class=\"flat\" name=\"nom\" value=\"'.$fuser->nom.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"nom\" value=\"'.$fuser->nom.'\">';\n                print $fuser->nom;\n            }\n            print '</td>';\n            // Photo\n            print '<td align=\"center\" valign=\"middle\" width=\"25%\" rowspan=\"'.$rowspan.'\">';\n            print $html->showphoto('userphoto',$fuser);\n            if ($caneditfield)\n            {\n                if ($fuser->photo) print \"<br>\\n\";\n                print '<table class=\"nobordernopadding\">';\n                if ($fuser->photo) print '<tr><td align=\"center\"><input type=\"checkbox\" class=\"flat\" name=\"deletephoto\" id=\"photodelete\"> '.$langs->trans(\"Delete\").'<br><br></td></tr>';\n                print '<tr><td>'.$langs->trans(\"PhotoFile\").'</td></tr>';\n                print '<tr><td><input type=\"file\" class=\"flat\" name=\"photo\" id=\"photoinput\"></td></tr>';\n                print '</table>';\n            }\n            print '</td>';\n            print '</tr>';\n\n            // Firstname\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"Firstname\").'</td>';\n            print '<td>';\n            if ($caneditfield && !$fuser->ldap_sid)\n            {\n                print '<input size=\"30\" type=\"text\" class=\"flat\" name=\"prenom\" value=\"'.$fuser->prenom.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"prenom\" value=\"'.$fuser->prenom.'\">';\n                print $fuser->prenom;\n            }\n            print '</td></tr>';\n\n            // Login\n            print \"<tr>\".'<td valign=\"top\"><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n            print '<td>';\n            if ($user->admin  && !$fuser->ldap_sid)\n            {\n                print '<input size=\"12\" maxlength=\"24\" type=\"text\" class=\"flat\" name=\"login\" value=\"'.$fuser->login.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"login\" value=\"'.$fuser->login.'\">';\n                print $fuser->login;\n            }\n            print '</td>';\n            print '</tr>';\n\n            // Pass\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Password\").'</td>';\n            print '<td>';\n            if ($fuser->ldap_sid)\n            {\n                $text=$langs->trans(\"DomainPassword\");\n            }\n            else if ($caneditpassword)\n            {\n                $text='<input size=\"12\" maxlength=\"32\" type=\"password\" class=\"flat\" name=\"password\" value=\"'.$fuser->pass.'\">';\n                if ($dolibarr_main_authentication && $dolibarr_main_authentication == 'http')\n                {\n                    $text=$html->textwithpicto($text,$langs->trans(\"DolibarrInHttpAuthenticationSoPasswordUseless\",$dolibarr_main_authentication),1,'warning');\n                }\n            }\n            else\n            {\n                $text=preg_replace('/./i','*',$fuser->pass);\n            }\n            print $text;\n            print \"</td></tr>\\n\";\n\n            // Administrator\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"Administrator\").'</td>';\n            if ($fuser->societe_id > 0)\n            {\n                print '<td>';\n                print '<input type=\"hidden\" name=\"admin\" value=\"'.$fuser->admin.'\">'.yn($fuser->admin);\n                print ' ('.$langs->trans(\"ExternalUser\").')';\n                print '</td></tr>';\n            }\n            else\n            {\n                print '<td>';\n                $nbSuperAdmin = $user->getNbOfUsers('superadmin');\n                if ($user->admin\n                && ($user->id != $fuser->id)                    // Don't downgrade ourself\n                && ($fuser->entity > 0 || $nbSuperAdmin > 1)    // Don't downgrade a superadmin if alone\n                )\n                {\n                    print $form->selectyesno('admin',$fuser->admin,1);\n\n                    if (! empty($conf->multicompany->enabled) && ! $user->entity)\n                    {\n                        if ($conf->use_javascript_ajax)\n                        {\n                            print '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t\t\t$(function() {\n\t\t\t\t\t\t\t\t\t\tvar admin = $(\"select[name=admin]\");\n\t\t\t\t\t\t\t\t\t\tif (admin.val() == 0) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.attr(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.attr(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$(\"select[name=admin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\t if ( $(this).val() == 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t \t\t.attr(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t \t\t.attr(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t \t\t.attr(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t</script>';\n                        }\n\n                        $checked=(($fuser->admin && ! $fuser->entity) ? ' checked' : '');\n                        print '<input type=\"checkbox\" name=\"superadmin\" value=\"1\"'.$checked.' /> '.$langs->trans(\"SuperAdministrator\");\n                    }\n                }\n                else\n                {\n                    $yn = yn($fuser->admin);\n                    print '<input type=\"hidden\" name=\"admin\" value=\"'.$fuser->admin.'\">';\n                    if (! empty($conf->multicompany->enabled) && ! $fuser->entity) print $html->textwithpicto($yn,$langs->trans(\"DontDowngradeSuperAdmin\"),1,'warning');\n                    else print $yn;\n                }\n                print '</td></tr>';\n            }\n\n            // Type\n            print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Type\").'</td>';\n            print '<td>';\n            if ($fuser->societe_id)\n            {\n                print $langs->trans(\"External\");\n            }\n            else if ($fuser->ldap_sid)\n            {\n                print $langs->trans(\"DomainUser\");\n            }\n            else\n            {\n                print $langs->trans(\"Internal\");\n            }\n            print '</td></tr>';\n\n            // Tel pro\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"PhonePro\").'</td>';\n            print '<td>';\n            if ($caneditfield  && !$fuser->ldap_sid)\n            {\n                print '<input size=\"20\" type=\"text\" name=\"office_phone\" class=\"flat\" value=\"'.$fuser->office_phone.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"office_phone\" value=\"'.$fuser->office_phone.'\">';\n                print $fuser->office_phone;\n            }\n            print '</td></tr>';\n\n            // Tel mobile\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"PhoneMobile\").'</td>';\n            print '<td>';\n            if ($caneditfield && !$fuser->ldap_sid)\n            {\n                print '<input size=\"20\" type=\"text\" name=\"user_mobile\" class=\"flat\" value=\"'.$fuser->user_mobile.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$fuser->user_mobile.'\">';\n                print $fuser->user_mobile;\n            }\n            print '</td></tr>';\n\n            // Fax\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"Fax\").'</td>';\n            print '<td>';\n            if ($caneditfield  && !$fuser->ldap_sid)\n            {\n                print '<input size=\"20\" type=\"text\" name=\"office_fax\" class=\"flat\" value=\"'.$fuser->office_fax.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"office_fax\" value=\"'.$fuser->office_fax.'\">';\n                print $fuser->office_fax;\n            }\n            print '</td></tr>';\n\n            // EMail\n            print \"<tr>\".'<td valign=\"top\"'.($conf->global->USER_MAIL_REQUIRED?' class=\"fieldrequired\"':'').'>'.$langs->trans(\"EMail\").'</td>';\n            print '<td>';\n            if ($caneditfield  && !$fuser->ldap_sid)\n            {\n                print '<input size=\"40\" type=\"text\" name=\"email\" class=\"flat\" value=\"'.$fuser->email.'\">';\n            }\n            else\n            {\n                print '<input type=\"hidden\" name=\"email\" value=\"'.$fuser->email.'\">';\n                print $fuser->email;\n            }\n            print '</td></tr>';\n\n            // Signature\n            print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"Signature\").'</td>';\n            print '<td>';\n            print '<textarea name=\"signature\" rows=\"5\" cols=\"90\">'.dol_htmlentitiesbr_decode($fuser->signature).'</textarea>';\n            print '</td></tr>';\n\n            // openid\n            if (preg_match('/myopenid/',$conf->authmode))\n            {\n                print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"url_openid\").'</td>';\n                print '<td>';\n                if ($caneditfield  && !$fuser->ldap_sid)\n                {\n                    print '<input size=\"40\" type=\"text\" name=\"openid\" class=\"flat\" value=\"'.$fuser->openid.'\">';\n                }\n                else\n                {\n                    print '<input type=\"hidden\" name=\"openid\" value=\"'.$fuser->openid.'\">';\n                    print $fuser->openid;\n                }\n                print '</td></tr>';\n            }\n\n            // Statut\n            print '<tr><td valign=\"top\">'.$langs->trans(\"Status\").'</td>';\n            print '<td>';\n            print $fuser->getLibStatut(4);\n            print '</td></tr>';\n\n            // Autres caracteristiques issus des autres modules\n\n            // Module Webcalendar\n            if ($conf->webcalendar->enabled)\n            {\n                $langs->load(\"other\");\n                print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"LoginWebcal\").'</td>';\n                print '<td>';\n                if ($caneditfield) print '<input size=\"30\" type=\"text\" class=\"flat\" name=\"webcal_login\" value=\"'.$fuser->webcal_login.'\">';\n                else print $fuser->webcal_login;\n                print '</td></tr>';\n            }\n\n            // Module Phenix\n            if ($conf->phenix->enabled)\n            {\n                $langs->load(\"other\");\n                print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"LoginPhenix\").'</td>';\n                print '<td>';\n                if ($caneditfield) print '<input size=\"30\" type=\"text\" class=\"flat\" name=\"phenix_login\" value=\"'.$fuser->phenix_login.'\">';\n                else print $fuser->phenix_login;\n                print '</td></tr>';\n                print \"<tr>\".'<td valign=\"top\">'.$langs->trans(\"PassPhenix\").'</td>';\n                print '<td>';\n                if ($caneditfield) print '<input size=\"30\" type=\"password\" class=\"flat\" name=\"phenix_pass\" value=\"'.$fuser->phenix_pass_crypted.'\">';\n                else print preg_replace('/./i','*',$fuser->phenix_pass_crypted);\n                print '</td></tr>';\n            }\n\n            // Company / Contact\n            if ($conf->societe->enabled)\n            {\n                print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n                print '<td>';\n                if ($fuser->societe_id > 0)\n                {\n                    $societe = new Societe($db);\n                    $societe->fetch($fuser->societe_id);\n                    print $societe->getNomUrl(1,'');\n                    if ($fuser->contact_id)\n                    {\n                        $contact = new Contact($db);\n                        $contact->fetch($fuser->contact_id);\n                        print ' / <a href=\"'.DOL_URL_ROOT.'/contact/fiche.php?id='.$fuser->contact_id.'\">'.img_object($langs->trans(\"ShowContact\"),'contact').' '.dol_trunc($contact->getFullName($langs),32).'</a>';\n                    }\n                }\n                else\n                {\n                    print $langs->trans(\"ThisUserIsNot\");\n                }\n                print '</td>';\n                print \"</tr>\\n\";\n            }\n\n            // Module Adherent\n            if ($conf->adherent->enabled)\n            {\n                $langs->load(\"members\");\n                print '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n                print '<td>';\n                if ($fuser->fk_member)\n                {\n                    $adh=new Adherent($db);\n                    $adh->fetch($fuser->fk_member);\n                    $adh->ref=$adh->login;\t// Force to show login instead of id\n                    print $adh->getNomUrl(1);\n                }\n                else\n                {\n                    print $langs->trans(\"UserNotLinkedToMember\");\n                }\n                print '</td>';\n                print \"</tr>\\n\";\n            }\n\n            print '</table>';\n\n            print '<br><center>';\n            print '<input value=\"'.$langs->trans(\"Save\").'\" class=\"button\" type=\"submit\" name=\"save\">';\n            print ' &nbsp; ';\n            print '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button\" type=\"submit\" name=\"cancel\">';\n            print '</center>';\n\n            print '</form>';\n\n            print '</div>';\n        }\n\n        $ldap->close;\n    }\n}\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:43 $ - $Revision: 1.275 $');\n\n\n\n/**\n * Return if var element is ok\n * @param   string      $element    Variable to check\n * @return  boolean                 Return true of variable is not empty\n */\nfunction dolValidElement($element)\n{\n    return (trim($element) != '');\n}\n\n?>\n", "<?php\n/* Copyright (C) 2002-2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2011 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2010 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *      \\file       htdocs/user/index.php\n * \t\t\\ingroup\tcore\n *      \\brief      Page of users\n *      \\version    $Id: index.php,v 1.51 2011/07/31 23:19:42 eldy Exp $\n */\n\nrequire(\"../main.inc.php\");\n\nif (! $user->rights->user->user->lire && ! $user->admin) accessforbidden();\n\n$langs->load(\"users\");\n$langs->load(\"companies\");\n\n// Security check (for external users)\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n\n$sall=GETPOST(\"sall\");\n\n$sortfield = GETPOST(\"sortfield\",'alpha');\n$sortorder = GETPOST(\"sortorder\",'alpha');\n$page = GETPOST(\"page\",'int');\nif ($page == -1) { $page = 0; }\n$offset = $conf->liste_limit * $page;\n$pageprev = $page - 1;\n$pagenext = $page + 1;\n$limit = $conf->liste_limit;\nif (! $sortfield) $sortfield=\"u.login\";\nif (! $sortorder) $sortorder=\"ASC\";\n\n$userstatic=new User($db);\n$companystatic = new Societe($db);\n\n\n/*\n * View\n */\n\nllxHeader();\n\nprint_fiche_titre($langs->trans(\"ListOfUsers\"));\n\n$sql = \"SELECT u.rowid, u.name, u.firstname, u.admin, u.fk_societe, u.login,\";\n$sql.= \" u.datec,\";\n$sql.= \" u.tms as datem,\";\n$sql.= \" u.datelastlogin,\";\n$sql.= \" u.ldap_sid, u.statut, u.entity,\";\n$sql.= \" s.nom, s.canvas\";\n$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n$sql.= \" LEFT JOIN \".MAIN_DB_PREFIX.\"societe as s ON u.fk_societe = s.rowid\";\n$sql.= \" WHERE u.entity IN (0,\".$conf->entity.\")\";\nif (!empty($socid)) $sql.= \" AND u.fk_societe = \".$socid;\nif ($_POST[\"search_user\"])\n{\n    $sql.= \" AND (u.login like '%\".$_POST[\"search_user\"].\"%' OR u.name like '%\".$_POST[\"search_user\"].\"%' OR u.firstname like '%\".$_POST[\"search_user\"].\"%')\";\n}\nif ($sall) $sql.= \" AND (u.login like '%\".$db->escape($sall).\"%' OR u.name like '%\".$db->escape($sall).\"%' OR u.firstname like '%\".$db->escape($sall).\"%' OR u.email like '%\".$db->escape($sall).\"%' OR u.note like '%\".$db->escape($sall).\"%')\";\n$sql.=$db->order($sortfield,$sortorder);\n$result = $db->query($sql);\nif ($result)\n{\n    $num = $db->num_rows($result);\n    $i = 0;\n\n    $param=\"search_user=$search_user&amp;sall=$sall\";\n    print \"<table class=\\\"noborder\\\" width=\\\"100%\\\">\";\n    print '<tr class=\"liste_titre\">';\n    print_liste_field_titre($langs->trans(\"Login\"),\"index.php\",\"u.login\",$param,\"\",\"\",$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"LastName\"),\"index.php\",\"u.name\",$param,\"\",\"\",$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"FirstName\"),\"index.php\",\"u.firstname\",$param,\"\",\"\",$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"Company\"),\"index.php\",\"u.fk_societe\",$param,\"\",\"\",$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"DateCreation\"),\"index.php\",\"u.datec\",$param,\"\",'align=\"center\"',$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"LastConnexion\"),\"index.php\",\"u.datelastlogin\",$param,\"\",'align=\"center\"',$sortfield,$sortorder);\n    print_liste_field_titre($langs->trans(\"Status\"),\"index.php\",\"u.status\",$param,\"\",'align=\"right\"',$sortfield,$sortorder);\n    print \"</tr>\\n\";\n    $var=True;\n    while ($i < $num)\n    {\n        $obj = $db->fetch_object($result);\n        $var=!$var;\n\n        print \"<tr $bc[$var]>\";\n        print '<td><a href=\"fiche.php?id='.$obj->rowid.'\">'.img_object($langs->trans(\"ShowUser\"),\"user\").' '.$obj->login.'</a>';\n        if ($conf->global->MAIN_MODULE_MULTICOMPANY && $obj->admin && ! $obj->entity)\n        {\n          \tprint img_redstar($langs->trans(\"SuperAdministrator\"));\n        }\n        else if ($obj->admin)\n        {\n        \tprint img_picto($langs->trans(\"Administrator\"),'star');\n        }\n        print '</td>';\n        print '<td>'.ucfirst($obj->name).'</td>';\n        print '<td>'.ucfirst($obj->firstname).'</td>';\n        print \"<td>\";\n        if ($obj->fk_societe)\n        {\n            $companystatic->id=$obj->fk_societe;\n            $companystatic->nom=$obj->nom;\n            $companystatic->canvas=$obj->canvas;\n            print $companystatic->getNomUrl(1);\n        }\n        else if ($obj->ldap_sid)\n        {\n        \tprint $langs->trans(\"DomainUser\");\n        }\n        else print $langs->trans(\"InternalUser\");\n        print '</td>';\n\n        // Date creation\n        print '<td nowrap=\"nowrap\" align=\"center\">'.dol_print_date($db->jdate($obj->datec),\"dayhour\").'</td>';\n\n        // Date last login\n        print '<td nowrap=\"nowrap\" align=\"center\">'.dol_print_date($db->jdate($obj->datelastlogin),\"dayhour\").'</td>';\n\n\t\t// Statut\n\t\t$userstatic->statut=$obj->statut;\n        print '<td width=\"100\" align=\"right\">'.$userstatic->getLibStatut(5).'</td>';\n        print \"</tr>\\n\";\n        $i++;\n    }\n    print \"</table>\";\n    $db->free($result);\n}\nelse\n{\n    dol_print_error($db);\n}\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:42 $ - $Revision: 1.51 $');\n?>\n", "<?php\n/* Copyright (C) 2004-2007 Laurent Destailleur  <eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *      \\file       htdocs/user/info.php\n *      \\ingroup    core\n *\t\t\\brief      Page des informations d'un utilisateur\n *\t\t\\version    $Id: info.php,v 1.19 2011/07/31 23:19:42 eldy Exp $\n*/\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/functions2.lib.php\");\nrequire_once(DOL_DOCUMENT_ROOT.'/lib/usergroups.lib.php');\nrequire_once(DOL_DOCUMENT_ROOT.\"/user/class/user.class.php\");\n\n$langs->load(\"users\");\n\n// Security check\n$id = GETPOST('id','int');\n$fuser = new User($db);\n$fuser->fetch($id);\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2 = (($socid && $user->rights->user->self->creer)?'':'user');\nif ($user->id == $_GET[\"id\"])\t// A user can always read its own card\n{\n\t$feature2='';\n}\n$result = restrictedArea($user, 'user', $_GET[\"id\"], '', $feature2);\n\n// If user is not user read and no permission to read other users, we stop\nif (($fuser->id != $user->id) && (! $user->rights->user->user->lire))\n  accessforbidden();\n\n\n\n/*\n * View\n */\n\nllxHeader();\n\n$fuser->info($_GET[\"id\"]);\n\n$head = user_prepare_head($fuser);\n\n$title = $langs->trans(\"User\");\ndol_fiche_head($head, 'info', $title, 0, 'user');\n\n\nprint '<table width=\"100%\"><tr><td>';\ndol_print_object_info($fuser);\nprint '</td></tr></table>';\n\nprint '</div>';\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:42 $ - $Revision: 1.19 $');\n?>\n", "<?php\n/* Copyright (C) 2004      Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2011 Laurent Destailleur  <eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *      \\file       htdocs/user/note.php\n *      \\ingroup    usergroup\n *      \\brief      Fiche de notes sur un utilisateur Dolibarr\n *\t\t\\version    $Id: note.php,v 1.24 2011/07/31 23:19:42 eldy Exp $\n */\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.'/lib/usergroups.lib.php');\nrequire_once(DOL_DOCUMENT_ROOT.'/user/class/user.class.php');\n\n$action=GETPOST('action');\n$id=GETPOST('id','int');\n\n$langs->load(\"companies\");\n$langs->load(\"members\");\n$langs->load(\"bills\");\n$langs->load(\"users\");\n\n$fuser = new User($db);\n$fuser->fetch($id);\n\n// If user is not user read and no permission to read other users, we stop\nif (($fuser->id != $user->id) && (! $user->rights->user->user->lire))\n  accessforbidden();\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2 = (($socid && $user->rights->user->self->creer)?'':'user');\nif ($user->id == $_GET[\"id\"])\t// A user can always read its own card\n{\n\t$feature2='';\n}\n$result = restrictedArea($user, 'user', $_GET[\"id\"], '', $feature2);\n\n\n\n/******************************************************************************/\n/*                     Actions                                                */\n/******************************************************************************/\n\nif ($_POST[\"action\"] == 'update' && $user->rights->user->user->creer && ! $_POST[\"cancel\"])\n{\n\t$db->begin();\n\n\t$res=$fuser->update_note($_POST[\"note\"],$user);\n\tif ($res < 0)\n\t{\n\t\t$mesg='<div class=\"error\">'.$adh->error.'</div>';\n\t\t$db->rollback();\n\t}\n\telse\n\t{\n\t\t$db->commit();\n\t}\n}\n\n\n\n/******************************************************************************/\n/* Affichage fiche                                                            */\n/******************************************************************************/\n\nllxHeader();\n\n$html = new Form($db);\n\nif ($id)\n{\n\t$head = user_prepare_head($fuser);\n\n\t$title = $langs->trans(\"User\");\n\tdol_fiche_head($head, 'note', $title, 0, 'user');\n\n\tif ($msg) print '<div class=\"error\">'.$msg.'</div>';\n\n\tprint \"<form method=\\\"post\\\" action=\\\"note.php\\\">\";\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n\n    print '<table class=\"border\" width=\"100%\">';\n\n    // Reference\n\tprint '<tr><td width=\"20%\">'.$langs->trans('Ref').'</td>';\n\tprint '<td colspan=\"3\">';\n\tprint $html->showrefnav($fuser,'id','',$user->rights->user->user->lire || $user->admin);\n\tprint '</td>';\n\tprint '</tr>';\n\n    // Nom\n    print '<tr><td>'.$langs->trans(\"Lastname\").'</td><td class=\"valeur\" colspan=\"3\">'.$fuser->nom.'&nbsp;</td>';\n\tprint '</tr>';\n\n    // Prenom\n    print '<tr><td>'.$langs->trans(\"Firstname\").'</td><td class=\"valeur\" colspan=\"3\">'.$fuser->prenom.'&nbsp;</td></tr>';\n\n    // Login\n    print '<tr><td>'.$langs->trans(\"Login\").'</td><td class=\"valeur\" colspan=\"3\">'.$fuser->login.'&nbsp;</td></tr>';\n\n\t// Note\n    print '<tr><td valign=\"top\">'.$langs->trans(\"Note\").'</td>';\n\tprint '<td valign=\"top\" colspan=\"3\">';\n\tif ($action == 'edit' && $user->rights->user->user->creer)\n\t{\n\t\tprint \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"update\\\">\";\n\t\tprint \"<input type=\\\"hidden\\\" name=\\\"id\\\" value=\\\"\".$fuser->id.\"\\\">\";\n\t    // Editeur wysiwyg\n\t\trequire_once(DOL_DOCUMENT_ROOT.\"/lib/doleditor.class.php\");\n\t\t$doleditor=new DolEditor('note',$fuser->note,'',280,'dolibarr_notes','In',true,false,$conf->fckeditor->enabled && $conf->global->FCKEDITOR_ENABLE_USER,10,80);\n\t\t$doleditor->Create();\n\t}\n\telse\n\t{\n\t\tprint dol_textishtml($fuser->note)?$fuser->note:dol_nl2br($fuser->note,1,true);\n\t}\n\tprint \"</td></tr>\";\n\n\tif ($action == 'edit')\n\t{\n\t\tprint '<tr><td colspan=\"4\" align=\"center\">';\n\t\tprint '<input type=\"submit\" class=\"button\" name=\"update\" value=\"'.$langs->trans(\"Save\").'\">';\n\t\tprint '&nbsp; &nbsp;';\n\t\tprint '<input type=\"submit\" class=\"button\" name=\"cancel\" value=\"'.$langs->trans(\"Cancel\").'\">';\n\t\tprint '</td></tr>';\n\t}\n\n    print \"</table>\";\n\tprint \"</form>\\n\";\n\n\n    /*\n    * Actions\n    */\n    print '</div>';\n    print '<div class=\"tabsAction\">';\n\n    if ($user->rights->user->user->creer && $action != 'edit')\n    {\n        print \"<a class=\\\"butAction\\\" href=\\\"note.php?id=\".$fuser->id.\"&amp;action=edit\\\">\".$langs->trans('Modify').\"</a>\";\n    }\n\n    print \"</div>\";\n\n\n}\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:42 $ - $Revision: 1.24 $');\n?>\n", "<?php\n/* Copyright (C) 2005-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2010      Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/param_ihm.php\n *       \\brief      Page to show user setup for display\n *       \\version    $Id: param_ihm.php,v 1.53 2011/07/31 23:19:43 eldy Exp $\n */\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/functions2.lib.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/usergroups.lib.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/core/class/html.formadmin.class.php\");\n\n$langs->load(\"companies\");\n$langs->load(\"products\");\n$langs->load(\"admin\");\n$langs->load(\"users\");\n$langs->load(\"languages\");\n\n$id=GETPOST('id','int');\n\n// Defini si peux lire/modifier permisssions\n$canreaduser=($user->admin || $user->rights->user->user->lire);\n\nif ($id)\n{\n    // $user est le user qui edite, $id est l'id de l'utilisateur edite\n    $caneditfield=( (($user->id == $id) && $user->rights->user->self->creer)\n    || (($user->id != $id) && $user->rights->user->user->creer));\n}\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2 = (($socid && $user->rights->user->self->creer)?'':'user');\nif ($user->id == $id)\t// A user can always read its own card\n{\n    $feature2='';\n    $canreaduser=1;\n}\n$result = restrictedArea($user, 'user', $id, '', $feature2);\nif ($user->id <> $id && ! $canreaduser) accessforbidden();\n\n\n$dirtop = \"../includes/menus/standard\";\n$dirleft = \"../includes/menus/standard\";\n\n// Charge utilisateur edite\n$fuser = new User($db);\n$fuser->fetch($id);\n$fuser->getrights();\n\n// Liste des zone de recherche permanentes supportees\n$searchform=array(\"main_searchform_societe\",\"main_searchform_contact\",\"main_searchform_produitservice\");\n$searchformconst=array($conf->global->MAIN_SEARCHFORM_SOCIETE,$conf->global->MAIN_SEARCHFORM_CONTACT,$conf->global->MAIN_SEARCHFORM_PRODUITSERVICE);\n$searchformtitle=array($langs->trans(\"Companies\"),$langs->trans(\"Contacts\"),$langs->trans(\"ProductsAndServices\"));\n\n$html = new Form($db);\n$formadmin=new FormAdmin($db);\n\n\n/*\n * Actions\n */\nif ($_POST[\"action\"] == 'update' && ($caneditfield  || $user->admin))\n{\n    if ($_POST[\"cancel\"])\n    {\n        $_GET[\"id\"]=$_POST[\"id\"];\n    }\n    else\n    {\n        $tabparam=array();\n\n        if ($_POST[\"check_MAIN_LANG_DEFAULT\"]==\"on\") $tabparam[\"MAIN_LANG_DEFAULT\"]=$_POST[\"main_lang_default\"];\n        else $tabparam[\"MAIN_LANG_DEFAULT\"]='';\n\n        $tabparam[\"MAIN_MENU_STANDARD\"]=$_POST[\"MAIN_MENU_STANDARD\"];\n\n        if ($_POST[\"check_SIZE_LISTE_LIMIT\"]==\"on\") $tabparam[\"MAIN_SIZE_LISTE_LIMIT\"]=$_POST[\"main_size_liste_limit\"];\n        else $tabparam[\"MAIN_SIZE_LISTE_LIMIT\"]='';\n\n        if ($_POST[\"check_MAIN_THEME\"]==\"on\") $tabparam[\"MAIN_THEME\"]=$_POST[\"main_theme\"];\n        else $tabparam[\"MAIN_THEME\"]='';\n\n        $tabparam[\"MAIN_SEARCHFORM_CONTACT\"]=$_POST[\"main_searchform_contact\"];\n        $tabparam[\"MAIN_SEARCHFORM_SOCIETE\"]=$_POST[\"main_searchform_societe\"];\n        $tabparam[\"MAIN_SEARCHFORM_PRODUITSERVICE\"]=$_POST[\"main_searchform_produitservice\"];\n\n        $result=dol_set_user_param($db, $conf, $fuser, $tabparam);\n\n        $_SESSION[\"mainmenu\"]=\"\";   // Le gestionnaire de menu a pu changer\n\n        Header('Location: '.$_SERVER[\"PHP_SELF\"].'?id='.$_POST[\"id\"]);\n        exit;\n    }\n}\n\n\n\n/*\n * View\n */\n\nllxHeader();\n\n$head = user_prepare_head($fuser);\n\n$title = $langs->trans(\"User\");\ndol_fiche_head($head, 'guisetup', $title, 0, 'user');\n\n\nprint '<table class=\"border\" width=\"100%\">';\n\n// Ref\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Ref\").'</td>';\nprint '<td colspan=\"2\">';\nprint $html->showrefnav($fuser,'id','',$user->rights->user->user->lire || $user->admin);\nprint '</td>';\nprint '</tr>';\n\n// Nom\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"LastName\").'</td>';\nprint '<td colspan=\"2\">'.$fuser->nom.'</td>';\nprint \"</tr>\\n\";\n\n// Prenom\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"FirstName\").'</td>';\nprint '<td colspan=\"2\">'.$fuser->prenom.'</td>';\nprint \"</tr>\\n\";\n\nprint '</table><br>';\n\n\nif ($_GET[\"action\"] == 'edit')\n{\n    print '<form method=\"post\" action=\"'.$_SERVER[\"PHP_SELF\"].'\">';\n    print '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n    print '<input type=\"hidden\" name=\"action\" value=\"update\">';\n    print '<input type=\"hidden\" name=\"id\" value=\"'.$_GET[\"id\"].'\">';\n\n    clearstatcache();\n    $var=true;\n\n    print '<table class=\"noborder\" width=\"100%\">';\n    print '<tr class=\"liste_titre\"><td width=\"25%\">'.$langs->trans(\"Parameter\").'</td><td width=\"25%\">'.$langs->trans(\"DefaultValue\").'</td><td>&nbsp;</td><td>'.$langs->trans(\"PersonalValue\").'</td></tr>';\n\n    // Langue par defaut\n    $var=!$var;\n    print '<tr '.$bc[$var].'><td>'.$langs->trans(\"Language\").'</td>';\n    print '<td>';\n    $s=picto_from_langcode($conf->global->MAIN_LANG_DEFAULT);\n    print $s?$s.' ':'';\n    print ($conf->global->MAIN_LANG_DEFAULT=='auto'?$langs->trans(\"AutoDetectLang\"):$langs->trans(\"Language_\".$conf->global->MAIN_LANG_DEFAULT));\n    print '</td>';\n    print '<td align=\"left\" nowrap=\"nowrap\" width=\"20%\"><input '.$bc[$var].' name=\"check_MAIN_LANG_DEFAULT\" type=\"checkbox\" '.($fuser->conf->MAIN_LANG_DEFAULT?\" checked\":\"\");\n    print ! empty($dolibarr_main_demo)?' disabled=\"true\"':'';\t// Disabled for demo\n    print '> '.$langs->trans(\"UsePersonalValue\").'</td>';\n    print '<td>';\n    print $formadmin->select_language($fuser->conf->MAIN_LANG_DEFAULT,'main_lang_default',1);\n    print '</td></tr>';\n\n    // Taille max des listes\n    $var=!$var;\n    print '<tr '.$bc[$var].'><td>'.$langs->trans(\"MaxSizeList\").'</td>';\n    print '<td>'.$conf->global->MAIN_SIZE_LISTE_LIMIT.'</td>';\n    print '<td align=\"left\" nowrap=\"nowrap\" width=\"20%\"><input '.$bc[$var].' name=\"check_SIZE_LISTE_LIMIT\" type=\"checkbox\" '.($fuser->conf->MAIN_SIZE_LISTE_LIMIT?\" checked\":\"\");\n    print ! empty($dolibarr_main_demo)?' disabled=\"true\"':'';\t// Disabled for demo\n    print '> '.$langs->trans(\"UsePersonalValue\").'</td>';\n    print '<td><input class=\"flat\" name=\"main_size_liste_limit\" size=\"4\" value=\"' . $fuser->conf->SIZE_LISTE_LIMIT . '\"></td></tr>';\n\n    print '</table><br>';\n\n\n    // Theme\n    show_theme($fuser,empty($dolibarr_main_demo)?1:0,true);\n\n    print '</div>';\n\n    print '<center>';\n    print '<input type=\"submit\" class=\"button\" name=\"save\" value=\"'.$langs->trans(\"Save\").'\">';\n    print ' &nbsp; &nbsp; ';\n    print '<input type=\"submit\" class=\"button\" name=\"cancel\" value=\"'.$langs->trans(\"Cancel\").'\">';\n    print '</center>';\n    print '</form>';\n\n}\nelse\n{\n    $var=true;\n\n    print '<table class=\"noborder\" width=\"100%\">';\n    print '<tr class=\"liste_titre\"><td width=\"25%\">'.$langs->trans(\"Parameter\").'</td><td width=\"25%\">'.$langs->trans(\"DefaultValue\").'</td><td>&nbsp;</td><td>'.$langs->trans(\"PersonalValue\").'</td></tr>';\n\n    $var=!$var;\n    print '<tr '.$bc[$var].'><td>'.$langs->trans(\"Language\").'</td>';\n    print '<td>';\n    $s=picto_from_langcode($conf->global->MAIN_LANG_DEFAULT);\n    print ($s?$s.' ':'');\n    print ($conf->global->MAIN_LANG_DEFAULT=='auto'?$langs->trans(\"AutoDetectLang\"):$langs->trans(\"Language_\".$conf->global->MAIN_LANG_DEFAULT));\n    print '</td>';\n    print '<td align=\"left\" nowrap=\"nowrap\" width=\"20%\"><input '.$bc[$var].' type=\"checkbox\" disabled '.($fuser->conf->MAIN_LANG_DEFAULT?\" checked\":\"\").'> '.$langs->trans(\"UsePersonalValue\").'</td>';\n    print '<td>';\n    $s=picto_from_langcode($fuser->conf->MAIN_LANG_DEFAULT);\n    print ($s?$s.' ':'');\n    print ($fuser->conf->MAIN_LANG_DEFAULT=='auto'?$langs->trans(\"AutoDetectLang\"):($fuser->conf->MAIN_LANG_DEFAULT?$langs->trans(\"Language_\".$fuser->conf->MAIN_LANG_DEFAULT):''));\n    print '</td></tr>';\n\n    $var=!$var;\n    print '<tr '.$bc[$var].'><td>'.$langs->trans(\"MaxSizeList\").'</td>';\n    print '<td>'.$conf->global->MAIN_SIZE_LISTE_LIMIT.'</td>';\n    print '<td align=\"left\" nowrap=\"nowrap\" width=\"20%\"><input '.$bc[$var].' type=\"checkbox\" disabled '.($fuser->conf->MAIN_SIZE_LISTE_LIMIT?\" checked\":\"\").'> '.$langs->trans(\"UsePersonalValue\").'</td>';\n    print '<td>' . $fuser->conf->MAIN_SIZE_LISTE_LIMIT . '</td></tr>';\n\n    print '</table><br>';\n\n\n    // Skin\n    show_theme($fuser,0,true);\n\n    print '</div>';\n\n    print '<div class=\"tabsAction\">';\n    if (! empty($dolibarr_main_demo))\n    {\n        print \"<a class=\\\"butActionRefused\\\" title=\\\"\".$langs->trans(\"FeatureDisabledInDemo\").\"\\\" href=\\\"#\\\">\".$langs->trans(\"Modify\").\"</a>\";\n    }\n    else\n    {\n        if ($user->id == $fuser->id || $user->admin)       // Si utilisateur edite = utilisateur courant (pas besoin de droits particulier car il s'agit d'une page de modif d'output et non de donn\u00e9es) ou si admin\n        {\n            print '<a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=edit&amp;id='.$fuser->id.'\">'.$langs->trans(\"Modify\").'</a>';\n        }\n        else\n        {\n            print \"<a class=\\\"butActionRefused\\\" title=\\\"\".$langs->trans(\"NotEnoughPermissions\").\"\\\" href=\\\"#\\\">\".$langs->trans(\"Modify\").\"</a>\";\n        }\n    }\n\n    print '</div>';\n\n}\n\n$db->close();\n\nllxFooter('$Date: 2011/07/31 23:19:43 $ - $Revision: 1.53 $');\n?>\n", "<?php\n/* Copyright (C) 2002-2005 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Eric Seigne          <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2011 Regis Houssin        <regis@dolibarr.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/perms.php\n *       \\brief      Onglet user et permissions de la fiche utilisateur\n *       \\version    $Id: perms.php,v 1.57 2011/08/01 13:15:54 hregis Exp $\n */\n\nrequire(\"../main.inc.php\");\nrequire_once(DOL_DOCUMENT_ROOT.\"/lib/usergroups.lib.php\");\n\n$langs->load(\"users\");\n$langs->load(\"admin\");\n\n$module=isset($_GET[\"module\"])?$_GET[\"module\"]:$_POST[\"module\"];\n$id = GETPOST('id','int');\n\nif (! $id) accessforbidden();\n\n// Defini si peux lire les permissions\n$canreaduser=($user->admin || $user->rights->user->user->lire);\n// Defini si peux modifier les autres utilisateurs et leurs permisssions\n$caneditperms=($user->admin || $user->rights->user->user->creer);\n// Advanced permissions\nif (! empty($conf->global->MAIN_USE_ADVANCED_PERMS))\n{\n\t$canreaduser=($user->admin || ($user->rights->user->user->lire && $user->rights->user->user_advance->readperms));\n\t$caneditselfperms=($user->id == $id && $user->rights->user->self_advance->writeperms);\n\t$caneditperms = '('.$caneditperms.' || '.$caneditselfperms.')';\n}\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2 = (($socid && $user->rights->user->self->creer)?'':'user');\nif ($user->id == $id)\t// A user can always read its own card\n{\n\t$feature2='';\n\t$canreaduser=1;\n}\n$result = restrictedArea($user, 'user', $id, '', $feature2);\nif ($user->id <> $_REQUEST[\"id\"] && ! $canreaduser) accessforbidden();\n\n\n/**\n * Actions\n */\nif ($_GET[\"action\"] == 'addrights' && $caneditperms)\n{\n    $edituser = new User($db);\n\t$edituser->fetch($id);\n    $edituser->addrights($_GET[\"rights\"],$module);\n\n\t// Si on a touche a ses propres droits, on recharge\n\tif ($id == $user->id)\n\t{\n\t\t$user->clearrights();\n\t\t$user->getrights();\n\t}\n}\n\nif ($_GET[\"action\"] == 'delrights' && $caneditperms)\n{\n    $edituser = new User($db);\n\t$edituser->fetch($id);\n    $edituser->delrights($_GET[\"rights\"],$module);\n\n\t// Si on a touche a ses propres droits, on recharge\n\tif ($id == $user->id)\n\t{\n\t\t$user->clearrights();\n\t\t$user->getrights();\n\t}\n}\n\n\n\n/* ************************************************************************** */\n/*                                                                            */\n/* Visu et edition                                                            */\n/*                                                                            */\n/* ************************************************************************** */\n\nllxHeader('',$langs->trans(\"Permissions\"));\n\n$form=new Form($db);\n\n$fuser = new User($db);\n$fuser->fetch($id);\n$fuser->getrights();\n\n/*\n * Affichage onglets\n */\n$head = user_prepare_head($fuser);\n\n$title = $langs->trans(\"User\");\ndol_fiche_head($head, 'rights', $title, 0, 'user');\n\n\n$db->begin();\n\n// Search all modules with permission and reload permissions def.\n$modules = array();\n$modulesdir = array();\n\nforeach ($conf->file->dol_document_root as $type => $dirroot)\n{\n\t$modulesdir[] = $dirroot . \"/includes/modules/\";\n\n\tif ($type == 'alt')\n\t{\n\t\t$handle=@opendir($dirroot);\n\t\tif (is_resource($handle))\n\t\t{\n\t\t\twhile (($file = readdir($handle))!==false)\n\t\t\t{\n\t\t\t    if (is_dir($dirroot.'/'.$file) && substr($file, 0, 1) <> '.' && substr($file, 0, 3) <> 'CVS' && $file != 'includes')\n\t\t\t    {\n\t\t\t    \tif (is_dir($dirroot . '/' . $file . '/includes/modules/'))\n\t\t\t    \t{\n\t\t\t    \t\t$modulesdir[] = $dirroot . '/' . $file . '/includes/modules/';\n\t\t\t    \t}\n\t\t\t    }\n\t\t\t}\n\t\t\tclosedir($handle);\n\t\t}\n\t}\n}\n\nforeach($modulesdir as $dir)\n{\n\t$handle=opendir($dir);\n    if (is_resource($handle))\n    {\n    \twhile (($file = readdir($handle))!==false)\n    \t{\n    \t    if (is_readable($dir.$file) && substr($file, 0, 3) == 'mod'  && substr($file, dol_strlen($file) - 10) == '.class.php')\n    \t    {\n    \t        $modName = substr($file, 0, dol_strlen($file) - 10);\n\n    \t        if ($modName)\n    \t        {\n    \t            include_once($dir.$file);\n    \t            $objMod = new $modName($db);\n    \t            // Load all lang files of module\n    \t            if (isset($objMod->langfiles) && is_array($objMod->langfiles))\n    \t            {\n    \t            \tforeach($objMod->langfiles as $domain)\n    \t            \t{\n    \t            \t\t$langs->load($domain);\n    \t            \t}\n    \t            }\n    \t            // Load all permissions\n    \t            if ($objMod->rights_class) {\n\n    \t                $ret=$objMod->insert_permissions(0);\n\n    \t                $modules[$objMod->rights_class]=$objMod;\n    \t                //print \"modules[\".$objMod->rights_class.\"]=$objMod;\";\n    \t            }\n    \t        }\n    \t    }\n    \t}\n    }\n}\n\n$db->commit();\n\n// Lecture des droits utilisateurs\n$permsuser = array();\n\n$sql = \"SELECT r.id, r.libelle, r.module\";\n$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def as r,\";\n$sql.= \" \".MAIN_DB_PREFIX.\"user_rights as ur\";\n$sql.= \" WHERE ur.fk_id = r.id\";\n$sql.= \" AND r.entity = \".$conf->entity;\n$sql.= \" AND ur.fk_user = \".$fuser->id;\n\n$result=$db->query($sql);\nif ($result)\n{\n    $num = $db->num_rows($result);\n    $i = 0;\n    while ($i < $num)\n    {\n        $obj = $db->fetch_object($result);\n        array_push($permsuser,$obj->id);\n        $i++;\n    }\n    $db->free($result);\n}\nelse\n{\n    dol_print_error($db);\n}\n\n// Lecture des droits groupes\n$permsgroup = array();\n\n$sql = \"SELECT r.id, r.libelle, r.module\";\n$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def as r,\";\n$sql.= \" \".MAIN_DB_PREFIX.\"usergroup_rights as gr,\";\n$sql.= \" \".MAIN_DB_PREFIX.\"usergroup_user as gu\";\n$sql.= \" WHERE gr.fk_id = r.id\";\n$sql.= \" AND r.entity = \".$conf->entity;\n$sql.= \" AND gu.entity IN (0,\".$conf->entity.\")\";\n$sql.= \" AND gr.fk_usergroup = gu.fk_usergroup\";\n$sql.= \" AND gu.fk_user = \".$fuser->id;\n\n$result=$db->query($sql);\nif ($result)\n{\n    $num = $db->num_rows($result);\n    $i = 0;\n    while ($i < $num)\n    {\n        $obj = $db->fetch_object($result);\n        array_push($permsgroup,$obj->id);\n        $i++;\n    }\n    $db->free($result);\n}\nelse\n{\n    dol_print_error($db);\n}\n\n\n/*\n * Ecran ajout/suppression permission\n */\n\nprint '<table class=\"border\" width=\"100%\">';\n\n// Ref\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Ref\").'</td>';\nprint '<td>';\nprint $form->showrefnav($fuser,'id','',$user->rights->user->user->lire || $user->admin);\nprint '</td>';\nprint '</tr>'.\"\\n\";\n\n// Nom\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Lastname\").'</td>';\nprint '<td>'.$fuser->nom.'</td>';\nprint '</tr>'.\"\\n\";\n\n// Prenom\nprint '<tr><td width=\"25%\" valign=\"top\">'.$langs->trans(\"Firstname\").'</td>';\nprint '<td>'.$fuser->prenom.'</td>';\nprint '</tr>'.\"\\n\";\n\nprint '</table><br>';\n\nif ($user->admin) print info_admin($langs->trans(\"WarningOnlyPermissionOfActivatedModules\"));\n\nprint \"\\n\";\nprint '<table width=\"100%\" class=\"noborder\">';\nprint '<tr class=\"liste_titre\">';\nprint '<td>'.$langs->trans(\"Module\").'</td>';\nif ($caneditperms) print '<td>&nbsp</td>';\nprint '<td align=\"center\" width=\"24\">&nbsp;</td>';\nprint '<td>'.$langs->trans(\"Permissions\").'</td>';\nprint '</tr>'.\"\\n\";\n\n//print \"xx\".$conf->global->MAIN_USE_ADVANCED_PERMS;\n$sql = \"SELECT r.id, r.libelle, r.module\";\n$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def as r\";\n$sql.= \" WHERE r.libelle NOT LIKE 'tou%'\";    // On ignore droits \"tous\"\n$sql.= \" AND r.entity = \".$conf->entity;\nif (empty($conf->global->MAIN_USE_ADVANCED_PERMS)) $sql.= \" AND r.perms NOT LIKE '%_advance'\";  // Hide advanced perms if option is disable\n$sql.= \" ORDER BY r.module, r.id\";\n\n$result=$db->query($sql);\nif ($result)\n{\n    $num = $db->num_rows($result);\n    $i = 0;\n    $var = True;\n    while ($i < $num)\n    {\n        $obj = $db->fetch_object($result);\n\n        // Si la ligne correspond a un module qui n'existe plus (absent de includes/module), on l'ignore\n        if (! $modules[$obj->module])\n        {\n            $i++;\n            continue;\n        }\n\n        if ($oldmod <> $obj->module)\n        {\n            $oldmod = $obj->module;\n            $var = !$var;\n\n            // Rupture detectee, on recupere objMod\n            $objMod=$modules[$obj->module];\n            $picto=($objMod->picto?$objMod->picto:'generic');\n\n            if ($caneditperms && (! $objMod->rights_admin_allowed || ! $fuser->admin))\n            {\n                // On affiche ligne pour modifier droits\n                print '<tr '. $bc[$var].'>';\n                print '<td nowrap=\"nowrap\">'.img_object('',$picto).' '.$objMod->getName();\n                print '<a name=\"'.$objMod->getName().'\">&nbsp;</a></td>';\n                print '<td align=\"center\" nowrap=\"nowrap\">';\n                print '<a title=\"'.dol_escape_htmltag($langs->trans(\"All\")).'\" alt=\"'.dol_escape_htmltag($langs->trans(\"All\")).'\" href=\"perms.php?id='.$fuser->id.'&amp;action=addrights&amp;module='.$obj->module.'#'.$objMod->getName().'\">'.$langs->trans(\"All\").\"</a>\";\n                print '/';\n                print '<a title=\"'.dol_escape_htmltag($langs->trans(\"None\")).'\" alt=\"'.dol_escape_htmltag($langs->trans(\"None\")).'\" href=\"perms.php?id='.$fuser->id.'&amp;action=delrights&amp;module='.$obj->module.'#'.$objMod->getName().'\">'.$langs->trans(\"None\").\"</a>\";\n                print '</td>';\n                print '<td colspan=\"2\">&nbsp;</td>';\n                print '</tr>'.\"\\n\";\n            }\n        }\n\n        print '<tr '. $bc[$var].'>';\n\n        // Picto and label of permission\n        print '<td>'.img_object('',$picto).' '.$objMod->getName();\n        print '</td>';\n\n        // Permission and tick\n        if ($fuser->admin && $objMod->rights_admin_allowed)\n        {\n            // Permission own because admin\n            if ($caneditperms)\n            {\n                print '<td align=\"center\">'.img_picto($langs->trans(\"Administrator\"),'star').'</td>';\n            }\n            print '<td align=\"center\" nowrap=\"nowrap\">';\n            print img_tick();\n            print '</td>';\n        }\n        else if (in_array($obj->id, $permsuser))\n        {\n            // Permission own by user\n            if ($caneditperms)\n            {\n                print '<td align=\"center\"><a href=\"perms.php?id='.$fuser->id.'&amp;action=delrights&amp;rights='.$obj->id.'#'.$objMod->getName().'\">'.img_edit_remove($langs->trans(\"Remove\")).'</a></td>';\n            }\n            print '<td align=\"center\" nowrap=\"nowrap\">';\n            print img_tick();\n            print '</td>';\n        }\n        else if (in_array($obj->id, $permsgroup)) {\n            // Permission own by group\n            if ($caneditperms)\n            {\n                print '<td align=\"center\">';\n\t\t\t\tprint $form->textwithtooltip($langs->trans(\"Inherited\"),$langs->trans(\"PermissionInheritedFromAGroup\"));\n\t\t\t\t//print '<a href=\"'.DOL_URL_ROOT.'/user/fiche.php?id='.$fuser->id.'\" title=\"'.$langs->trans(\"PermissionInheritedFromAGroup\").'\">';\n\t\t\t\tprint '</td>';\n            }\n            print '<td align=\"center\" nowrap=\"nowrap\">';\n            print img_tick();\n            print '</td>';\n        }\n        else\n        {\n            // Do not own permission\n            if ($caneditperms)\n            {\n                print '<td align=\"center\"><a href=\"perms.php?id='.$fuser->id.'&amp;action=addrights&amp;rights='.$obj->id.'#'.$objMod->getName().'\">'.img_edit_add($langs->trans(\"Add\")).'</a></td>';\n            }\n            print '<td>&nbsp</td>';\n        }\n\n        $perm_libelle=($conf->global->MAIN_USE_ADVANCED_PERMS && ($langs->trans(\"PermissionAdvanced\".$obj->id)!=(\"PermissionAdvanced\".$obj->id))?$langs->trans(\"PermissionAdvanced\".$obj->id):(($langs->trans(\"Permission\".$obj->id)!=(\"Permission\".$obj->id))?$langs->trans(\"Permission\".$obj->id):$obj->libelle));\n        print '<td>'.$perm_libelle. '</td>';\n\n        print '</tr>'.\"\\n\";\n\n        $i++;\n    }\n}\nprint '</table>';\n\n$db->close();\n\nllxFooter('$Date: 2011/08/01 13:15:54 $ - $Revision: 1.57 $');\n?>\n"], "filenames": ["htdocs/lib/databases/mssql.lib.php", "htdocs/lib/databases/mysql.lib.php", "htdocs/lib/databases/mysqli.lib.php", "htdocs/lib/databases/pgsql.lib.php", "htdocs/user/fiche.php", "htdocs/user/index.php", "htdocs/user/info.php", "htdocs/user/note.php", "htdocs/user/param_ihm.php", "htdocs/user/perms.php"], "buggy_code_start_loc": [521, 496, 527, 669, 37, 38, 33, 30, 35, 35], "buggy_code_end_loc": [523, 515, 529, 671, 1236, 79, 34, 32, 60, 131], "fixing_code_start_loc": [521, 497, 527, 669, 38, 38, 33, 30, 36, 35], "fixing_code_end_loc": [523, 516, 529, 671, 1237, 79, 34, 32, 61, 132], "type": "CWE-89", "message": "Multiple SQL injection vulnerabilities in Dolibarr 3.1.0 RC and probably earlier allow remote authenticated users to execute arbitrary SQL commands via the (1) sortfield, (2) sortorder, and (3) sall parameters to user/index.php and (b) user/group/index.php; the id parameter to (4) info.php, (5) perms.php, (6) param_ihm.php, (7) note.php, and (8) fiche.php in user/; and (9) rowid parameter to admin/boxes.php.", "other": {"cve": {"id": "CVE-2011-4802", "sourceIdentifier": "cve@mitre.org", "published": "2011-12-14T00:55:04.543", "lastModified": "2023-02-02T18:08:13.390", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple SQL injection vulnerabilities in Dolibarr 3.1.0 RC and probably earlier allow remote authenticated users to execute arbitrary SQL commands via the (1) sortfield, (2) sortorder, and (3) sall parameters to user/index.php and (b) user/group/index.php; the id parameter to (4) info.php, (5) perms.php, (6) param_ihm.php, (7) note.php, and (8) fiche.php in user/; and (9) rowid parameter to admin/boxes.php."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de inyecci\u00f3n SQL en Dolibarr v3.1.0 RC y probablemente anteriores, permite a usuarios autenticados remotamente ejecutar comandos SQL de su elecci\u00f3n a trav\u00e9s del par\u00e1metro (1) sortfield, (2) sortorder, y (3) sall de user/index.php y (b) user/group/index.php; el par\u00e1metro id de (4) info.php, (5) perms.php, (6) param_ihm.php, (7) note.php, y (8) fiche.php en user/; y (9) el par\u00e1metro rowid de admin/boxes.php."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:*:rc:*:*:*:*:*:*", "versionEndIncluding": "3.1.0", "matchCriteriaId": "8435A171-ACA4-4931-B646-E829980EB50B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:2.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "A142CF43-7F6C-458D-A33A-95122F9FFD1B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:2.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "B60D0BC1-9AD6-423B-854E-1220D5ABD816"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:2.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "5708BC71-BFEE-45C8-AD13-0EB80A3A9061"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:2.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "D72FE70D-4B44-4E4A-A329-A0C4ADD9BA77"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:2.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "3D7F53EC-2A03-451E-B10D-4C5B948459EB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:2.8.0:*:*:*:*:*:*:*", "matchCriteriaId": "1E1C8870-EFA2-409E-8117-BFA501D5175C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:2.8.1:*:*:*:*:*:*:*", "matchCriteriaId": "8CFBFBAA-2FA6-4E79-AD8C-F25C0F32B38A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:2.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "076C9D6B-D37B-4F85-8742-210B52BC3F1E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "B2ADB858-5C11-4ADC-B199-50D44CA9B625"}, {"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "5097EB36-40E2-4C73-B5B1-787917BE22F3"}]}]}], "references": [{"url": "http://www.securityfocus.com/archive/1/520619/100/0/threaded", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securityfocus.com/bid/50777", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/Dolibarr/dolibarr/commit/63820ab37537fdff842539425b2bf2881f0d8e91", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/Dolibarr/dolibarr/commit/762f98ab4137749d0993612b4e3544a4207e78a1", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/Dolibarr/dolibarr/commit/c539155d6ac2f5b6ea75b87a16f298c0090e535a", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/Dolibarr/dolibarr/commit/d08d28c0cda1f762a47cc205d4363de03df16675", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://www.htbridge.ch/advisory/multiple_vulnerabilities_in_dolibarr.html", "source": "cve@mitre.org", "tags": ["Exploit"]}]}, "github_commit_url": "https://github.com/Dolibarr/dolibarr/commit/63820ab37537fdff842539425b2bf2881f0d8e91"}}