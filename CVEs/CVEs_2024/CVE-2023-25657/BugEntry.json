{"buggy_code": ["import os\nimport platform\nimport re\nimport sys\n\nfrom django.contrib.messages import constants as messages\nimport django.forms\n\nfrom nautobot import __version__\nfrom nautobot.core.settings_funcs import is_truthy, parse_redis_connection  # noqa: F401\n\n#\n# Environment setup\n#\n\n# This is used for display in the UI.\nVERSION = __version__\n\n# Hostname of the system. This is displayed in the web UI footers along with the\n# version.\nHOSTNAME = platform.node()\n\n# Set the base directory two levels up (i.e. the base nautobot/ directory)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Set the swapable User model to the Nautobot custom User model\nAUTH_USER_MODEL = \"users.User\"\n\n# Set the default AutoField for 3rd party apps\n# N.B. Ideally this would be a `UUIDField`, but due to Django restrictions\n#      we can\u2019t do that yet\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\n\n###############################################################\n# NAUTOBOT - Settings for Nautobot internals/plugins/defaults #\n###############################################################\n\n#\n# Nautobot optional settings/defaults\n#\nALLOWED_URL_SCHEMES = (\n    \"file\",\n    \"ftp\",\n    \"ftps\",\n    \"http\",\n    \"https\",\n    \"irc\",\n    \"mailto\",\n    \"sftp\",\n    \"ssh\",\n    \"tel\",\n    \"telnet\",\n    \"tftp\",\n    \"vnc\",\n    \"xmpp\",\n)\n\n# Base directory wherein all created files (jobs, git repositories, file uploads, static files) will be stored)\nNAUTOBOT_ROOT = os.getenv(\"NAUTOBOT_ROOT\", os.path.expanduser(\"~/.nautobot\"))\n\n# By default, Nautobot will permit users to create duplicate prefixes and IP addresses in the global\n# table (that is, those which are not assigned to any VRF). This behavior can be disabled by setting\n# ENFORCE_GLOBAL_UNIQUE to True.\nENFORCE_GLOBAL_UNIQUE = is_truthy(os.getenv(\"NAUTOBOT_ENFORCE_GLOBAL_UNIQUE\", \"False\"))\n\n# Exclude potentially sensitive models from wildcard view exemption. These may still be exempted\n# by specifying the model individually in the EXEMPT_VIEW_PERMISSIONS configuration parameter.\nEXEMPT_EXCLUDE_MODELS = (\n    (\"auth\", \"group\"),\n    (\"users\", \"user\"),\n    (\"users\", \"objectpermission\"),\n)\n\nEXEMPT_VIEW_PERMISSIONS = []\nGIT_ROOT = os.getenv(\"NAUTOBOT_GIT_ROOT\", os.path.join(NAUTOBOT_ROOT, \"git\").rstrip(\"/\"))\nHTTP_PROXIES = None\nJOBS_ROOT = os.getenv(\"NAUTOBOT_JOBS_ROOT\", os.path.join(NAUTOBOT_ROOT, \"jobs\").rstrip(\"/\"))\n\n# Log Nautobot deprecation warnings. Note that this setting is ignored (deprecation logs always enabled) if DEBUG = True\nLOG_DEPRECATION_WARNINGS = is_truthy(os.getenv(\"NAUTOBOT_LOG_DEPRECATION_WARNINGS\", \"False\"))\n\nMAINTENANCE_MODE = is_truthy(os.getenv(\"NAUTOBOT_MAINTENANCE_MODE\", \"False\"))\n# Metrics\nMETRICS_ENABLED = is_truthy(os.getenv(\"NAUTOBOT_METRICS_ENABLED\", \"False\"))\n\n# Napalm\nNAPALM_ARGS = {}\nNAPALM_PASSWORD = os.getenv(\"NAUTOBOT_NAPALM_PASSWORD\", \"\")\nNAPALM_TIMEOUT = int(os.getenv(\"NAUTOBOT_NAPALM_TIMEOUT\", \"30\"))\nNAPALM_USERNAME = os.getenv(\"NAUTOBOT_NAPALM_USERNAME\", \"\")\n\n# Plugins\nPLUGINS = []\nPLUGINS_CONFIG = {}\n\n# Global 3rd-party authentication settings\nEXTERNAL_AUTH_DEFAULT_GROUPS = []\nEXTERNAL_AUTH_DEFAULT_PERMISSIONS = {}\n\n# Remote auth backend settings\nREMOTE_AUTH_AUTO_CREATE_USER = False\nREMOTE_AUTH_HEADER = \"HTTP_REMOTE_USER\"\n\n# SSO backend settings https://python-social-auth.readthedocs.io/en/latest/configuration/settings.html\nSOCIAL_AUTH_POSTGRES_JSONFIELD = False\n# Nautobot related - May be overridden if using custom social auth backend\nSOCIAL_AUTH_BACKEND_PREFIX = \"social_core.backends\"\n\n# Job log entry sanitization and similar\nSANITIZER_PATTERNS = [\n    # General removal of username-like and password-like tokens\n    (re.compile(r\"(https?://)?\\S+\\s*@\", re.IGNORECASE), r\"\\1{replacement}@\"),\n    (re.compile(r\"(username|password|passwd|pwd)(\\s*i?s?\\s*:?\\s*)?\\S+\", re.IGNORECASE), r\"\\1\\2{replacement}\"),\n]\n\n# Storage\nSTORAGE_BACKEND = None\nSTORAGE_CONFIG = {}\n\n# Test runner that is aware of our use of \"integration\" tags and only runs\n# integration tests if explicitly passed in with `nautobot-server test --tag integration`.\nTEST_RUNNER = \"nautobot.core.tests.runner.NautobotTestRunner\"\n# Disable test data factories by default so as not to cause issues for plugins.\n# The nautobot_config.py that Nautobot core uses for its own tests will override this to True.\nTEST_USE_FACTORIES = is_truthy(os.getenv(\"NAUTOBOT_TEST_USE_FACTORIES\", \"False\"))\n# Pseudo-random number generator seed, for reproducibility of test results.\nTEST_FACTORY_SEED = os.getenv(\"NAUTOBOT_TEST_FACTORY_SEED\", None)\n\n#\n# django-slowtests\n#\n\n# Performance test uses `NautobotPerformanceTestRunner` to run, which is only available once you have `django-slowtests` installed in your dev environment.\n# `invoke performance-test` and adding `--performance-report` or `--performance-snapshot` at the end of the `invoke` command\n# will automatically opt to NautobotPerformanceTestRunner to run the tests.\n\n# The baseline file that the performance test is running against\n# TODO we need to replace the baselines in this file with more consistent results at least for CI\nTEST_PERFORMANCE_BASELINE_FILE = os.getenv(\n    \"NAUTOBOT_TEST_PERFORMANCE_BASELINE_FILE\", \"nautobot/core/tests/performance_baselines.yml\"\n)\n\n#\n# Django cryptography\n#\n\n# CRYPTOGRAPHY_BACKEND = cryptography.hazmat.backends.default_backend()\n# CRYPTOGRAPHY_DIGEST = cryptography.hazmat.primitives.hashes.SHA256\nCRYPTOGRAPHY_KEY = None  # Defaults to SECRET_KEY if unset\nCRYPTOGRAPHY_SALT = \"nautobot-cryptography\"\n\n\n#\n# Django Prometheus\n#\n\nPROMETHEUS_EXPORT_MIGRATIONS = False\n\n\n#\n# Django filters\n#\n\nFILTERS_NULL_CHOICE_LABEL = \"None\"\nFILTERS_NULL_CHOICE_VALUE = \"null\"\n\nSTRICT_FILTERING = is_truthy(os.getenv(\"NAUTOBOT_STRICT_FILTERING\", \"True\"))\n\n#\n# Django REST framework (API)\n#\n\nREST_FRAMEWORK_VERSION = VERSION.rsplit(\".\", 1)[0]  # Use major.minor as API version\ncurrent_major, current_minor = REST_FRAMEWORK_VERSION.split(\".\")\n# We support all major.minor API versions from 1.2 to the present latest version.\n# This will need to be elaborated upon when we move to version 2.0\n# Similar logic exists in tasks.py, please keep them in sync!\nassert current_major == \"1\", f\"REST_FRAMEWORK_ALLOWED_VERSIONS needs to be updated to handle version {current_major}\"\nREST_FRAMEWORK_ALLOWED_VERSIONS = [f\"{current_major}.{minor}\" for minor in range(2, int(current_minor) + 1)]\n\nREST_FRAMEWORK = {\n    \"ALLOWED_VERSIONS\": REST_FRAMEWORK_ALLOWED_VERSIONS,\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.SessionAuthentication\",\n        \"nautobot.core.api.authentication.TokenAuthentication\",\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": (\"nautobot.core.api.filter_backends.NautobotFilterBackend\",),\n    \"DEFAULT_METADATA_CLASS\": \"nautobot.core.api.metadata.BulkOperationMetadata\",\n    \"DEFAULT_PAGINATION_CLASS\": \"nautobot.core.api.pagination.OptionalLimitOffsetPagination\",\n    \"DEFAULT_PERMISSION_CLASSES\": (\"nautobot.core.api.authentication.TokenPermissions\",),\n    \"DEFAULT_RENDERER_CLASSES\": (\n        \"rest_framework.renderers.JSONRenderer\",\n        \"nautobot.core.api.renderers.FormlessBrowsableAPIRenderer\",\n    ),\n    \"DEFAULT_PARSER_CLASSES\": (\"rest_framework.parsers.JSONParser\",),\n    \"DEFAULT_SCHEMA_CLASS\": \"nautobot.core.api.schema.NautobotAutoSchema\",\n    # Version to use if the client doesn't request otherwise.\n    # This should only change (if at all) with Nautobot major (breaking) releases.\n    \"DEFAULT_VERSION\": \"1.2\",\n    \"DEFAULT_VERSIONING_CLASS\": \"nautobot.core.api.versioning.NautobotAPIVersioning\",\n    \"PAGE_SIZE\": None,\n    \"SCHEMA_COERCE_METHOD_NAMES\": {\n        # Default mappings\n        \"retrieve\": \"read\",\n        \"destroy\": \"delete\",\n        # Custom operations\n        \"bulk_destroy\": \"bulk_delete\",\n    },\n    \"VIEW_NAME_FUNCTION\": \"nautobot.utilities.api.get_view_name\",\n}\n\n\n#\n# drf_spectacular (OpenAPI/Swagger)\n#\n\nSPECTACULAR_SETTINGS = {\n    \"TITLE\": \"API Documentation\",\n    \"DESCRIPTION\": \"Source of truth and network automation platform\",\n    \"LICENSE\": {\"name\": \"Apache v2 License\"},\n    \"VERSION\": VERSION,\n    # For a semblance of backwards-compatibility with drf-yasg / OpenAPI 2.0, where \"/api\" was a common \"basePath\"\n    # in the schema.\n    # OpenAPI 3.0 removes \"basePath\" in favor of \"servers\", so we now declare \"/api\" as the server relative URL and\n    # trim it from all of the individual paths correspondingly.\n    # See also https://github.com/nautobot/nautobot-ansible/pull/135 for an example of why this is desirable.\n    \"SERVERS\": [{\"url\": \"/api\"}],\n    \"SCHEMA_PATH_PREFIX\": \"/api\",\n    \"SCHEMA_PATH_PREFIX_TRIM\": True,\n    # use sidecar - locally packaged UI files, not CDN\n    \"SWAGGER_UI_DIST\": \"SIDECAR\",\n    \"SWAGGER_UI_FAVICON_HREF\": \"SIDECAR\",\n    \"REDOC_DIST\": \"SIDECAR\",\n    \"ENUM_NAME_OVERRIDES\": {\n        # These choice enums need to be overridden because they get assigned to the `type` field and\n        # result in this error:\n        #    enum naming encountered a non-optimally resolvable collision for fields named \"type\".\n        \"CableTypeChoices\": \"nautobot.dcim.choices.CableTypeChoices\",\n        \"ConsolePortTypeChoices\": \"nautobot.dcim.choices.ConsolePortTypeChoices\",\n        \"CustomFieldTypeChoices\": \"nautobot.extras.choices.CustomFieldTypeChoices\",\n        \"InterfaceTypeChoices\": \"nautobot.dcim.choices.InterfaceTypeChoices\",\n        \"PortTypeChoices\": \"nautobot.dcim.choices.PortTypeChoices\",\n        \"PowerFeedTypeChoices\": \"nautobot.dcim.choices.PowerFeedTypeChoices\",\n        \"PowerOutletTypeChoices\": \"nautobot.dcim.choices.PowerOutletTypeChoices\",\n        \"PowerPortTypeChoices\": \"nautobot.dcim.choices.PowerPortTypeChoices\",\n        \"RackTypeChoices\": \"nautobot.dcim.choices.RackTypeChoices\",\n        \"RelationshipTypeChoices\": \"nautobot.extras.choices.RelationshipTypeChoices\",\n        # Each of these StatusModels has bulk and non-bulk serializers, with the same status options,\n        # which confounds drf-spectacular's automatic naming of enums, resulting in the below warning:\n        #   enum naming encountered a non-optimally resolvable collision for fields named \"status\"\n        # By explicitly naming the enums ourselves we avoid this warning.\n        \"CableStatusChoices\": \"nautobot.dcim.api.serializers.CableSerializer.status_choices\",\n        \"CircuitStatusChoices\": \"nautobot.circuits.api.serializers.CircuitSerializer.status_choices\",\n        \"DeviceStatusChoices\": \"nautobot.dcim.api.serializers.DeviceWithConfigContextSerializer.status_choices\",\n        \"InterfaceStatusChoices\": \"nautobot.dcim.api.serializers.InterfaceSerializer.status_choices\",\n        \"IPAddressStatusChoices\": \"nautobot.ipam.api.serializers.IPAddressSerializer.status_choices\",\n        \"LocationStatusChoices\": \"nautobot.dcim.api.serializers.LocationSerializer.status_choices\",\n        \"PowerFeedStatusChoices\": \"nautobot.dcim.api.serializers.PowerFeedSerializer.status_choices\",\n        \"PrefixStatusChoices\": \"nautobot.ipam.api.serializers.PrefixSerializer.status_choices\",\n        \"RackStatusChoices\": \"nautobot.dcim.api.serializers.RackSerializer.status_choices\",\n        \"VirtualMachineStatusChoices\": \"nautobot.virtualization.api.serializers.VirtualMachineWithConfigContextSerializer.status_choices\",\n        \"VLANStatusChoices\": \"nautobot.ipam.api.serializers.VLANSerializer.status_choices\",\n        # These choice enums need to be overridden because they get assigned to different names with the same choice set and\n        # result in this error:\n        #   encountered multiple names for the same choice set\n        \"JobExecutionTypeIntervalChoices\": \"nautobot.extras.choices.JobExecutionType\",\n    },\n    # Create separate schema components for PATCH requests (fields generally are not `required` on PATCH)\n    \"COMPONENT_SPLIT_PATCH\": True,\n    # Create separate schema components for request vs response where appropriate\n    \"COMPONENT_SPLIT_REQUEST\": True,\n}\n\n\n##############################################\n# DJANGO - Core settings required for Django #\n##############################################\n\n#\n# Databases\n#\n\n# Only PostgresSQL is supported, so database driver is hard-coded. This can\n# still be overloaded in custom settings.\n# https://docs.djangoproject.com/en/stable/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"NAME\": os.getenv(\"NAUTOBOT_DB_NAME\", \"nautobot\"),\n        \"USER\": os.getenv(\"NAUTOBOT_DB_USER\", \"\"),\n        \"PASSWORD\": os.getenv(\"NAUTOBOT_DB_PASSWORD\", \"\"),\n        \"HOST\": os.getenv(\"NAUTOBOT_DB_HOST\", \"localhost\"),\n        \"PORT\": os.getenv(\"NAUTOBOT_DB_PORT\", \"\"),\n        \"CONN_MAX_AGE\": int(os.getenv(\"NAUTOBOT_DB_TIMEOUT\", \"300\")),\n        \"ENGINE\": os.getenv(\"NAUTOBOT_DB_ENGINE\", \"django.db.backends.postgresql\"),\n    }\n}\n\n# Ensure proper Unicode handling for MySQL\nif DATABASES[\"default\"][\"ENGINE\"] == \"django.db.backends.mysql\":\n    DATABASES[\"default\"][\"OPTIONS\"] = {\"charset\": \"utf8mb4\"}\n\n# The secret key is used to encrypt session keys and salt passwords.\nSECRET_KEY = os.getenv(\"NAUTOBOT_SECRET_KEY\")\n\n# Default overrides\nALLOWED_HOSTS = os.getenv(\"NAUTOBOT_ALLOWED_HOSTS\", \"\").split(\" \")\nCSRF_TRUSTED_ORIGINS = []\nCSRF_FAILURE_VIEW = \"nautobot.core.views.csrf_failure\"\nDATE_FORMAT = os.getenv(\"NAUTOBOT_DATE_FORMAT\", \"N j, Y\")\nDATETIME_FORMAT = os.getenv(\"NAUTOBOT_DATETIME_FORMAT\", \"N j, Y g:i a\")\nDEBUG = is_truthy(os.getenv(\"NAUTOBOT_DEBUG\", \"False\"))\nINTERNAL_IPS = (\"127.0.0.1\", \"::1\")\nFORCE_SCRIPT_NAME = None\n\nTESTING = len(sys.argv) > 1 and sys.argv[1] == \"test\"\n\nLOG_LEVEL = \"DEBUG\" if DEBUG else \"INFO\"\n\nif TESTING:\n    # keep log quiet by default when running unit/integration tests\n    LOGGING = {}\nelse:\n    LOGGING = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,\n        \"formatters\": {\n            \"normal\": {\n                \"format\": \"%(asctime)s.%(msecs)03d %(levelname)-7s %(name)s :\\n  %(message)s\",\n                \"datefmt\": \"%H:%M:%S\",\n            },\n            \"verbose\": {\n                \"format\": \"%(asctime)s.%(msecs)03d %(levelname)-7s %(name)-20s %(filename)-15s %(funcName)30s() :\\n  %(message)s\",\n                \"datefmt\": \"%H:%M:%S\",\n            },\n        },\n        \"handlers\": {\n            \"normal_console\": {\n                \"level\": \"INFO\",\n                \"class\": \"logging.StreamHandler\",\n                \"formatter\": \"normal\",\n            },\n            \"verbose_console\": {\n                \"level\": \"DEBUG\",\n                \"class\": \"logging.StreamHandler\",\n                \"formatter\": \"verbose\",\n            },\n        },\n        \"loggers\": {\n            \"django\": {\"handlers\": [\"normal_console\"], \"level\": \"INFO\"},\n            \"nautobot\": {\n                \"handlers\": [\"verbose_console\" if DEBUG else \"normal_console\"],\n                \"level\": LOG_LEVEL,\n            },\n        },\n    }\n\nMEDIA_ROOT = os.path.join(NAUTOBOT_ROOT, \"media\").rstrip(\"/\")\nSESSION_COOKIE_AGE = int(os.getenv(\"NAUTOBOT_SESSION_COOKIE_AGE\", \"1209600\"))  # 2 weeks, in seconds\nSESSION_FILE_PATH = os.getenv(\"NAUTOBOT_SESSION_FILE_PATH\", None)\nSHORT_DATE_FORMAT = os.getenv(\"NAUTOBOT_SHORT_DATE_FORMAT\", \"Y-m-d\")\nSHORT_DATETIME_FORMAT = os.getenv(\"NAUTOBOT_SHORT_DATETIME_FORMAT\", \"Y-m-d H:i\")\nSHORT_TIME_FORMAT = os.getenv(\"NAUTOBOT_SHORT_TIME_FORMAT\", \"H:i:s\")\nTIME_FORMAT = os.getenv(\"NAUTOBOT_TIME_FORMAT\", \"g:i a\")\nTIME_ZONE = os.getenv(\"NAUTOBOT_TIME_ZONE\", \"UTC\")\n\n# Disable importing the WSGI module before starting the server application. This is required for\n# uWSGI postfork callbacks to execute as is currently required in `nautobot.core.wsgi`.\nWEBSERVER_WARMUP = False\n\n# Installed apps and Django plugins. Nautobot plugins will be appended here later.\nINSTALLED_APPS = [\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.humanize\",\n    \"cacheops\",  # v2 TODO(jathan); Remove cacheops.\n    \"corsheaders\",\n    \"django_filters\",\n    \"django_jinja\",\n    \"django_tables2\",\n    \"django_prometheus\",\n    \"mptt\",\n    \"social_django\",\n    \"taggit\",\n    \"timezone_field\",\n    \"nautobot.core.apps.NautobotConstanceConfig\",  # overridden form of \"constance\" AppConfig\n    \"nautobot.core\",\n    \"django.contrib.admin\",  # Must be after `nautobot.core` for template overrides\n    \"django_celery_beat\",  # Must be after `nautobot.core` for template overrides\n    \"rest_framework\",  # Must be after `nautobot.core` for template overrides\n    \"db_file_storage\",\n    \"nautobot.circuits\",\n    \"nautobot.dcim\",\n    \"nautobot.ipam\",\n    \"nautobot.extras\",\n    \"nautobot.tenancy\",\n    \"nautobot.users\",\n    \"nautobot.utilities\",\n    \"nautobot.virtualization\",\n    \"django_rq\",  # Must come after nautobot.extras to allow overriding management commands\n    \"drf_spectacular\",\n    \"drf_spectacular_sidecar\",\n    \"graphene_django\",\n    \"health_check\",\n    \"health_check.storage\",\n    \"django_extensions\",\n    \"constance.backends.database\",\n    \"django_ajax_tables\",\n]\n\n# Middleware\nMIDDLEWARE = [\n    \"django_prometheus.middleware.PrometheusBeforeMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"nautobot.core.middleware.ExceptionHandlingMiddleware\",\n    \"nautobot.core.middleware.RemoteUserMiddleware\",\n    \"nautobot.core.middleware.ExternalAuthMiddleware\",\n    \"nautobot.core.middleware.ObjectChangeMiddleware\",\n    \"django_prometheus.middleware.PrometheusAfterMiddleware\",\n]\n\nROOT_URLCONF = \"nautobot.core.urls\"\n\nTEMPLATES = [\n    {\n        \"NAME\": \"django\",\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.template.context_processors.media\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"social_django.context_processors.backends\",\n                \"social_django.context_processors.login_redirect\",\n                \"nautobot.core.context_processors.settings\",\n                \"nautobot.core.context_processors.sso_auth\",\n            ],\n        },\n    },\n    {\n        \"NAME\": \"jinja\",\n        \"BACKEND\": \"django_jinja.backend.Jinja2\",\n        \"DIRS\": [],\n        \"APP_DIRS\": False,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.template.context_processors.media\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"social_django.context_processors.backends\",\n                \"social_django.context_processors.login_redirect\",\n                \"nautobot.core.context_processors.settings\",\n                \"nautobot.core.context_processors.sso_auth\",\n            ],\n        },\n    },\n]\n\n# Set up authentication backends\nAUTHENTICATION_BACKENDS = [\n    # Always check object permissions\n    \"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n\n# Internationalization\nLANGUAGE_CODE = \"en-us\"\nUSE_I18N = True\nUSE_TZ = True\n\n# WSGI\nWSGI_APPLICATION = \"nautobot.core.wsgi.application\"\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\nUSE_X_FORWARDED_HOST = True\nX_FRAME_OPTIONS = \"DENY\"\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_ROOT = os.path.join(NAUTOBOT_ROOT, \"static\")\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, \"project-static\"),)\n\n# Media\nMEDIA_URL = \"media/\"\n\n# Disable default limit of 1000 fields per request. Needed for bulk deletion of objects. (Added in Django 1.10.)\nDATA_UPLOAD_MAX_NUMBER_FIELDS = None\n\n# Messages\nMESSAGE_TAGS = {\n    messages.ERROR: \"danger\",\n}\n\n# Authentication URLs\n# This is the URL route name for the login view.\nLOGIN_URL = \"login\"\n\n# This is the URL route name for the home page (index) view.\nLOGIN_REDIRECT_URL = \"home\"\n\n#\n# django-constance\n#\n\nCONSTANCE_BACKEND = \"constance.backends.database.DatabaseBackend\"\nCONSTANCE_DATABASE_PREFIX = \"constance:nautobot:\"\nCONSTANCE_IGNORE_ADMIN_VERSION_CHECK = True  # avoid potential errors in a multi-node deployment\n\nCONSTANCE_ADDITIONAL_FIELDS = {\n    \"per_page_defaults_field\": [\n        \"nautobot.utilities.forms.fields.JSONArrayFormField\",\n        {\n            \"widget\": \"django.forms.TextInput\",\n            \"base_field\": django.forms.IntegerField(min_value=1),\n        },\n    ],\n    \"release_check_timeout_field\": [\n        \"django.forms.IntegerField\",\n        {\n            \"min_value\": 3600,\n        },\n    ],\n    \"release_check_url_field\": [\n        \"django.forms.URLField\",\n        {\n            \"required\": False,\n        },\n    ],\n}\n\nCONSTANCE_CONFIG = {\n    \"BANNER_BOTTOM\": [\n        \"\",\n        \"Custom HTML to display in a banner at the bottom of all pages.\",\n    ],\n    \"BANNER_LOGIN\": [\n        \"\",\n        \"Custom HTML to display in a banner at the top of the login page.\",\n    ],\n    \"BANNER_TOP\": [\n        \"\",\n        \"Custom HTML to display in a banner at the top of all pages.\",\n    ],\n    \"CHANGELOG_RETENTION\": [\n        90,\n        \"Number of days to retain object changelog history.\\nSet this to 0 to retain changes indefinitely.\",\n    ],\n    \"DISABLE_PREFIX_LIST_HIERARCHY\": [\n        False,\n        \"Disable rendering parent/child relationships in the IPAM Prefix list view and instead show a flat list.\",\n    ],\n    \"HIDE_RESTRICTED_UI\": [\n        False,\n        \"If set to True, users with limited permissions will not be shown menu items and home-page elements that \"\n        \"they do not have permission to access.\",\n    ],\n    \"MAX_PAGE_SIZE\": [\n        1000,\n        \"Maximum number of objects that a user can list in one UI page or one API call.\\n\"\n        \"If set to 0, a user can retrieve an unlimited number of objects.\",\n    ],\n    \"PAGINATE_COUNT\": [\n        50,\n        \"Default number of objects to display per page when listing objects in the UI and/or REST API.\",\n    ],\n    \"PER_PAGE_DEFAULTS\": [\n        [25, 50, 100, 250, 500, 1000],\n        \"Pagination options to present to the user to choose amongst.\\n\"\n        \"For proper user experience, this list should include the PAGINATE_COUNT and MAX_PAGE_SIZE values as options.\",\n        # Use custom field type defined above\n        \"per_page_defaults_field\",\n    ],\n    \"PREFER_IPV4\": [\n        False,\n        \"Whether to prefer IPv4 primary addresses over IPv6 primary addresses for devices.\",\n    ],\n    \"RACK_ELEVATION_DEFAULT_UNIT_HEIGHT\": [\n        22,\n        \"Default height (in pixels) of a rack unit in a rack elevation diagram\",\n    ],\n    \"RACK_ELEVATION_DEFAULT_UNIT_WIDTH\": [\n        230,\n        \"Default width (in pixels) of a rack unit in a rack elevation diagram\",\n    ],\n    \"RELEASE_CHECK_TIMEOUT\": [\n        24 * 3600,\n        \"Number of seconds (must be at least 3600, or one hour) to cache the result of a release check \"\n        \"before checking again for a new release.\",\n        # Use custom field type defined above\n        \"release_check_timeout_field\",\n    ],\n    \"RELEASE_CHECK_URL\": [\n        \"\",\n        \"URL of GitHub repository REST API endpoint to poll periodically for availability of new Nautobot releases.\\n\"\n        'This can be set to the official repository \"https://api.github.com/repos/nautobot/nautobot/releases\" or '\n        \"a custom fork.\\nSet this to an empty string to disable automatic update checks.\",\n        # Use custom field type defined above\n        \"release_check_url_field\",\n    ],\n}\n\nCONSTANCE_CONFIG_FIELDSETS = {\n    \"Banners\": [\"BANNER_LOGIN\", \"BANNER_TOP\", \"BANNER_BOTTOM\"],\n    \"Change Logging\": [\"CHANGELOG_RETENTION\"],\n    \"Device Connectivity\": [\"PREFER_IPV4\"],\n    \"Pagination\": [\"PAGINATE_COUNT\", \"MAX_PAGE_SIZE\", \"PER_PAGE_DEFAULTS\"],\n    \"Rack Elevation Rendering\": [\"RACK_ELEVATION_DEFAULT_UNIT_HEIGHT\", \"RACK_ELEVATION_DEFAULT_UNIT_WIDTH\"],\n    \"Release Checking\": [\"RELEASE_CHECK_URL\", \"RELEASE_CHECK_TIMEOUT\"],\n    \"User Interface\": [\"DISABLE_PREFIX_LIST_HIERARCHY\", \"HIDE_RESTRICTED_UI\"],\n}\n\n#\n# From django-cors-headers\n#\n\n# If True, all origins will be allowed. Other settings restricting allowed origins will be ignored.\n# Defaults to False. Setting this to True can be dangerous, as it allows any website to make\n# cross-origin requests to yours. Generally you'll want to restrict the list of allowed origins with\n# CORS_ALLOWED_ORIGINS or CORS_ALLOWED_ORIGIN_REGEXES.\nCORS_ALLOW_ALL_ORIGINS = is_truthy(os.getenv(\"NAUTOBOT_CORS_ALLOW_ALL_ORIGINS\", \"False\"))\n\n# A list of strings representing regexes that match Origins that are authorized to make cross-site\n# HTTP requests. Defaults to [].\nCORS_ALLOWED_ORIGIN_REGEXES = []\n\n# A list of origins that are authorized to make cross-site HTTP requests. Defaults to [].\nCORS_ALLOWED_ORIGINS = []\n\n#\n# GraphQL\n#\n\nGRAPHENE = {\n    \"SCHEMA\": \"nautobot.core.graphql.schema_init.schema\",\n    \"DJANGO_CHOICE_FIELD_ENUM_V3_NAMING\": True,  # any field with a name of type will break in Graphene otherwise.\n}\nGRAPHQL_CUSTOM_FIELD_PREFIX = \"cf\"\nGRAPHQL_RELATIONSHIP_PREFIX = \"rel\"\nGRAPHQL_COMPUTED_FIELD_PREFIX = \"cpf\"\n\n\n#\n# Caching\n#\n\n# v2 TODO(jathan): Remove all cacheops settings.\n# The django-cacheops plugin is used to cache querysets. The built-in Django\n# caching is not used.\nCACHEOPS = {\n    \"auth.user\": {\"ops\": \"get\", \"timeout\": 60 * 15},\n    \"auth.*\": {\"ops\": (\"fetch\", \"get\")},\n    \"auth.permission\": {\"ops\": \"all\"},\n    \"circuits.*\": {\"ops\": \"all\"},\n    \"dcim.inventoryitem\": None,  # MPTT models are exempt due to raw SQL\n    \"dcim.region\": None,  # MPTT models are exempt due to raw SQL\n    \"dcim.rackgroup\": None,  # MPTT models are exempt due to raw SQL\n    \"dcim.*\": {\"ops\": \"all\"},\n    \"ipam.*\": {\"ops\": \"all\"},\n    \"extras.*\": {\"ops\": \"all\"},\n    \"users.*\": {\"ops\": \"all\"},\n    \"tenancy.tenantgroup\": None,  # MPTT models are exempt due to raw SQL\n    \"tenancy.*\": {\"ops\": \"all\"},\n    \"virtualization.*\": {\"ops\": \"all\"},\n}\nCACHEOPS_DEGRADE_ON_FAILURE = True\nCACHEOPS_ENABLED = is_truthy(os.getenv(\"NAUTOBOT_CACHEOPS_ENABLED\", \"False\"))\nCACHEOPS_REDIS = os.getenv(\"NAUTOBOT_CACHEOPS_REDIS\", parse_redis_connection(redis_database=1))\nCACHEOPS_DEFAULTS = {\"timeout\": int(os.getenv(\"NAUTOBOT_CACHEOPS_TIMEOUT\", \"900\"))}\n\n# The django-redis cache is used to establish concurrent locks using Redis. The\n# django-rq settings will use the same instance/database by default.\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": parse_redis_connection(redis_database=0),\n        \"TIMEOUT\": 300,\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"PASSWORD\": \"\",\n        },\n    }\n}\n\n#\n# Django RQ (used for legacy background processesing)\n#\n\n# These defaults utilize the Django caches setting defined for django-redis.\n# See: https://github.com/rq/django-rq#support-for-django-redis-and-django-redis-cache\nRQ_QUEUES = {\n    \"default\": {\n        \"USE_REDIS_CACHE\": \"default\",\n    },\n    \"check_releases\": {\n        \"USE_REDIS_CACHE\": \"default\",\n    },\n    \"custom_fields\": {\n        \"USE_REDIS_CACHE\": \"default\",\n    },\n    \"webhooks\": {\n        \"USE_REDIS_CACHE\": \"default\",\n    },\n}\n\n#\n# Celery (used for background processing)\n#\n\n# Celery broker URL used to tell workers where queues are located\nCELERY_BROKER_URL = os.getenv(\"NAUTOBOT_CELERY_BROKER_URL\", parse_redis_connection(redis_database=0))\n\n# Celery results backend URL to tell workers where to publish task results\nCELERY_RESULT_BACKEND = os.getenv(\"NAUTOBOT_CELERY_RESULT_BACKEND\", parse_redis_connection(redis_database=0))\n\n# Instruct celery to report the started status of a job, instead of just `pending`, `finished`, or `failed`\nCELERY_TASK_TRACK_STARTED = True\n\n# Default celery queue name that will be used by workers and tasks if no queue is specified\nCELERY_TASK_DEFAULT_QUEUE = os.getenv(\"NAUTOBOT_CELERY_TASK_DEFAULT_QUEUE\", \"default\")\n\n# Global task time limits (seconds)\n# Exceeding the soft limit will result in a SoftTimeLimitExceeded exception,\n# while exceeding the hard limit will result in a SIGKILL.\nCELERY_TASK_SOFT_TIME_LIMIT = int(os.getenv(\"NAUTOBOT_CELERY_TASK_SOFT_TIME_LIMIT\", str(5 * 60)))\nCELERY_TASK_TIME_LIMIT = int(os.getenv(\"NAUTOBOT_CELERY_TASK_TIME_LIMIT\", str(10 * 60)))\n\n# These settings define the custom nautobot serialization encoding as an accepted data encoding format\n# and register that format for task input and result serialization\nCELERY_ACCEPT_CONTENT = [\"nautobot_json\"]\nCELERY_RESULT_ACCEPT_CONTENT = [\"nautobot_json\"]\nCELERY_TASK_SERIALIZER = \"nautobot_json\"\nCELERY_RESULT_SERIALIZER = \"nautobot_json\"\n\nCELERY_BEAT_SCHEDULER = \"nautobot.core.celery.schedulers:NautobotDatabaseScheduler\"\n\n# Sets an age out timer of redis lock. This is NOT implicitly applied to locks, must be added\n# to a lock creation as `timeout=settings.REDIS_LOCK_TIMEOUT`\nREDIS_LOCK_TIMEOUT = int(os.getenv(\"NAUTOBOT_REDIS_LOCK_TIMEOUT\", \"600\"))\n\n#\n# Custom branding (logo and title)\n#\n\n# Branding logo locations. The logo takes the place of the Nautobot logo in the top right of the nav bar.\n# The filepath should be relative to the `MEDIA_ROOT`.\nBRANDING_FILEPATHS = {\n    \"logo\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_LOGO\", None),  # Navbar logo\n    \"favicon\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_FAVICON\", None),  # Browser favicon\n    \"icon_16\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_16\", None),  # 16x16px icon\n    \"icon_32\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_32\", None),  # 32x32px icon\n    \"icon_180\": os.getenv(\n        \"NAUTOBOT_BRANDING_FILEPATHS_ICON_180\", None\n    ),  # 180x180px icon - used for the apple-touch-icon header\n    \"icon_192\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_192\", None),  # 192x192px icon\n    \"icon_mask\": os.getenv(\n        \"NAUTOBOT_BRANDING_FILEPATHS_ICON_MASK\", None\n    ),  # mono-chrome icon used for the mask-icon header\n}\n\n# Title to use in place of \"Nautobot\"\nBRANDING_TITLE = os.getenv(\"NAUTOBOT_BRANDING_TITLE\", \"Nautobot\")\n\n# Prepended to CSV, YAML and export template filenames (i.e. `nautobot_device.yml`)\nBRANDING_PREPENDED_FILENAME = os.getenv(\"NAUTOBOT_BRANDING_PREPENDED_FILENAME\", \"nautobot_\")\n\n# Branding URLs (links in the bottom right of the footer)\nBRANDING_URLS = {\n    \"code\": os.getenv(\"NAUTOBOT_BRANDING_URLS_CODE\", \"https://github.com/nautobot/nautobot\"),\n    \"docs\": os.getenv(\"NAUTOBOT_BRANDING_URLS_DOCS\", None),\n    \"help\": os.getenv(\"NAUTOBOT_BRANDING_URLS_HELP\", \"https://github.com/nautobot/nautobot/wiki\"),\n}\n\n# Undocumented link in the bottom right of the footer which is meant to persist any custom branding changes.\nBRANDING_POWERED_BY_URL = \"https://docs.nautobot.com/\"\n\n#\n# Django extensions settings\n#\n\n# Dont load the 'taggit' app, since we have our own custom `Tag` and `TaggedItem` models\nSHELL_PLUS_DONT_LOAD = [\"taggit\"]\n\n#\n# UI settings\n#\n\n\n# UI_RACK_VIEW_TRUNCATE_FUNCTION\ndef UI_RACK_VIEW_TRUNCATE_FUNCTION(device_display_name):\n    \"\"\"Given device display name, truncate to fit the rack elevation view.\n\n    :param device_display_name: Full display name of the device attempting to be rendered in the rack elevation.\n    :type device_display_name: str\n\n    :return: Truncated device name\n    :type: str\n    \"\"\"\n    return str(device_display_name).split(\".\")[0]\n", "# Device Redundancy Groups\n\n+++ 1.5.0\n\nDevice Redundancy Groups represent logical relationships between multiple devices. Typically, a redundancy group could represent a failover pair, failover group, or a load sharing cluster.\nDevice Redundancy Groups are created first, before the devices are assigned to the group.\n\nA failover strategy represents intended operation mode of the group. Supported failover strategy are: Active/Active and Active/Standby.\n\nSecrets groups could be used to inform store secret information used by failover or a cluster of devices.\n\nDevice Redundancy Group Priority is a Device attribute defined during assigning a Device to a Device Redundancy Group. This field represents the priority the device has in the device redundancy group.\n\n## Example use of Device Redundancy Groups - Cisco ASA 5500 Series Active/Standby Failover\n\nThis document provides an example of generating a Cisco ASA device's desired failover configuration based on data stored in Nautobot Device Redundancy Groups.\nA GraphQL query is used to retrieve the relevant data, which is then rendered through a Jinja2 template to produce the desired configuration.\n\nAs one of the use cases for Device Redundacy Groups, introduced in Nautobot 1.5 release, is to model failover pairs, we will use the ASA 5500 Series in this example with details as follows:\n\n* Firewall failover pair is composed of two devices named \"nyc-fw-primary\" and \"nyc-fw-secondary\"\n* Each firewall device forming a failover cluster has a virtual interface dedicated for failover usage (named \"failover-link\") and addressed in 172.27.48.0/31 network\n* Virtual failover interface has a physical parent interface assigned (\"gigabitethernet0/3\")\n* Following redundancy group priorities are assigned in a failover pair:\n    * Priority 100 for a Primary Failover unit\n    * Priority 50 for a Secondary Failover unit\n\n### Querying for the data\n\nTo retrieve information about devices forming an ASA Failover pair, we will use a GraphQL query and the `get_gql_failover_details` Python method.\nThis method takes a `device_name` as an argument.\n\n```python\nimport json\nimport pynautobot\n\nquery = \"\"\"\nquery ($device_name: [String]) {\n    devices(name__ie: $device_name) {\n        name\n        device_redundancy_group {\n            name\n            members {\n                name\n                device_redundancy_group_priority\n                interfaces(name__ie: \"failover-link\") {\n                    type\n                    name\n                    ip_addresses {\n                        host\n                        prefix_length\n                    }\n                    parent_interface {\n                        name\n                        type\n                    }\n                }\n            }\n        }\n    }\n}\n\"\"\"\n\ndef get_gql_failover_details(device_name):\n    variables = {\"device_name\": device_name}\n    nb = pynautobot.api(\n        url=\"http://localhost:8080\",\n        token=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    )\n    return nb.graphql.query(query=query, variables=variables)\n```\n\n### Retrieving the data - Primary Failover Unit (\"nyc-fw-primary\")\n\nWe will demonstrate how to execute the command for Primary Unit only, however you could repeat the process for a secondary unit. An example data returned from Nautobot is presented below.\n\n```python\n>>> hostname = \"nyc-fw-primary\"\n>>> gql_data = get_gql_failover_details(hostname).json\n```\n\n```json\n{\n    \"data\": {\n        \"devices\": [\n            {\n                \"name\": \"nyc-fw-primary\",\n                \"device_redundancy_group\": {\n                    \"name\": \"nyc-firewalls\",\n                    \"members\": [\n                        {\n                            \"name\": \"nyc-fw-primary\",\n                            \"device_redundancy_group_priority\": 100,\n                            \"interfaces\": [\n                                {\n                                    \"type\": \"VIRTUAL\",\n                                    \"name\": \"failover-link\",\n                                    \"ip_addresses\": [\n                                        {\n                                            \"host\": \"172.27.48.0\",\n                                            \"prefix_length\": 31\n                                        }\n                                    ],\n                                    \"parent_interface\": {\n                                        \"name\": \"gigabitethernet0/3\",\n                                        \"type\": \"A_1000BASE_T\"\n                                    }\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"nyc-fw-secondary\",\n                            \"device_redundancy_group_priority\": 50,\n                            \"interfaces\": [\n                                {\n                                    \"type\": \"VIRTUAL\",\n                                    \"name\": \"failover-link\",\n                                    \"ip_addresses\": [\n                                        {\n                                            \"host\": \"172.27.48.1\",\n                                            \"prefix_length\": 31\n                                        }\n                                    ],\n                                    \"parent_interface\": {\n                                        \"name\": \"gigabitethernet0/3\",\n                                        \"type\": \"A_1000BASE_T\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n### Creating Cisco ASA Configuration Template - Common for Primary and Secondary Units\n\nThe following snippet represents an example Cisco ASA failover configuration template:\n\n```python\n# Configuration Template for Cisco ASA\ntemplate_body=\"\"\"\n{% set redundancy_members = gql_data['data']['devices'][0]['device_redundancy_group']['members'] %}\n{% set failover_device_local = redundancy_members[0] if redundancy_members[0].name == device else redundancy_members[1] %}\n{% set failover_device_peer = redundancy_members[0] if redundancy_members[0].name != device else redundancy_members[1] %}\n{% set failover_local_vif = failover_device_local.interfaces | first %}\n{% set failover_peer_vif = failover_device_peer.interfaces | first %}\n!\nhostname {{ device.name }}\n!\nfailover lan unit {{ priority_mapping[failover_device_local.device_redundancy_group_priority] }}\nfailover lan interface {{ failover_local_vif.name }} {{ failover_local_vif.parent_interface.name }} \n!\nfailover interface ip {{ failover_local_vif.name }} {{ failover_local_vif.ip_addresses[0].host }}/{{ failover_local_vif.ip_addresses[0].prefix_length }} standby {{ failover_peer_vif.ip_addresses[0].host }}\ninterface {{ failover_local_vif.parent_interface.name }} \n  no shutdown\n!\nfailover link {{ failover_local_vif.name }} {{ failover_local_vif.parent_interface.name }} \n!\n!failover ipsec pre-shared-key !Nautobot Secrets\n!\nfailover\n!\n\"\"\"\n```\n\n### Rendering Cisco ASA Configuration Template with the data retrieved from GraphQL\n\nFollowing snippet represents an example Cisco ASA Failover rendered configuration:\n\n```python\nfrom jinja2 import Template\n\ntm=Template(template_body)\n\nnyc_fw_primary_config = tm.render(\n    device=hostname,\n    gql_data=gql_data,\n    priority_mapping={50: 'secondary', 100: 'primary'}\n)\n\nprint(nyc_fw_primary_config)\n```\n\n```text\n!\nhostname nyc-fw-primary\n!\nfailover lan unit\nfailover lan interface failover-link gigabitethernet0/3\n!\nfailover interface ip failover-link 172.27.48.0/31 standby 172.27.48.1\ninterface gigabitethernet0/3\n  no shutdown\n!\nfailover link failover-link gigabitethernet0/3\n!\n!failover ipsec pre-shared-key !Nautobot Secrets\n!\nfailover\n!\n```\n\n## Example use of Device Redundancy Groups - Spine Redundancy in a Leaf and Spine (Clos) Topology\n\nAnother example for the redundancy group use case could be a spine redundancy in the Leaf and Spine topology.\nSpine redundancy is important while performing the Day-2 operations, such as OS-updates.\n\nIn this scenario, no more than 1 device participating in a Device Redundancy Group should be updated and rebooted at the same time. In order to track this, we will create a new Device custom field  named `upgrade_operational_state` and assign it one of the statues: `pre_upgrade`, `in_reboot`, `post_upgrade`. If a device with a spine role assigned is in state `in_reboot`, no other redundancy group members should be OS-upgraded at the same time.\n\n### Querying for the data - Spine Redundancy in a Leaf and Spine (Clos) Topology\n\nTo retrieve the data about devices forming a Spine redundancy group, we will use the following GraphQL query:\n\n```text\nquery {\n    device_redundancy_groups(name__ie: \"nyc-spines\") {\n        name\n        members {\n          name\n          device_role {\n            slug\n          }\n          cf_upgrade_operational_state\n        }\n    }\n}\n```\n\n### Retrieving the data - Spine Redundancy in a Leaf and Spine (Clos) Topology\n\nAn example data returned from Nautobot is presented below.\n\n```json\n{\n  \"data\": {\n    \"device_redundancy_groups\": [\n      {\n        \"name\": \"nyc-spines\",\n        \"members\": [\n          {\n            \"name\": \"spine-1\",\n            \"device_role\": {\n              \"slug\": \"spine\"\n            },\n            \"cf_upgrade_operational_state\": \"in_reboot\"\n          },\n          {\n            \"name\": \"spine-2\",\n            \"device_role\": {\n              \"slug\": \"spine\"\n            },\n            \"cf_upgrade_operational_state\": null\n          },\n          {\n            \"name\": \"spine-3\",\n            \"device_role\": {\n              \"slug\": \"spine\"\n            },\n            \"cf_upgrade_operational_state\": null\n          },\n          {\n            \"name\": \"spine-4\",\n            \"device_role\": {\n              \"slug\": \"spine\"\n            },\n            \"cf_upgrade_operational_state\": null\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nBased on the output, `spine-1` device is being rebooted at the moment of the GraphQL query response. This could be used by an automation system to prevent OS upgrades on `spine-2`, `spine-3`, `spine-4`.\n", "from django.test import TestCase\nfrom jinja2.exceptions import TemplateAssertionError\n\nfrom netutils.utils import jinja2_convenience_function\n\nfrom nautobot.utilities.utils import render_jinja2\n\n\nclass NautobotJinjaFilterTest(TestCase):\n    def test_invalid_templatetags_raise_exception(self):\n        \"\"\"Validate that executing render_jinja2 with an invalid filter will raise TemplateAssertionError.\"\"\"\n        helpers_not_valid = [\"notvalid\"]\n\n        for helper in helpers_not_valid:\n            with self.assertRaises(TemplateAssertionError):\n                render_jinja2(\"{{ data | \" + helper + \" }}\", {\"data\": None})\n\n    def test_templatetags_helpers_in_jinja(self):\n        \"\"\"\n        Only validate that all templatetags helpers have been properly registered as Django Jinja\n        no need to check the returned value since we already have some unit tests for that\n        \"\"\"\n\n        helpers_to_validate = [\n            \"placeholder\",\n            \"render_json\",\n            \"render_yaml\",\n            \"render_markdown\",\n            \"meta\",\n            \"viewname\",\n            \"validated_viewname\",\n            \"bettertitle\",\n            \"humanize_speed\",\n            \"tzoffset\",\n            \"fgcolor\",\n            \"divide\",\n            \"percentage\",\n            \"get_docs_url\",\n            \"has_perms\",\n            \"has_one_or_more_perms\",\n            \"split\",\n            \"as_range\",\n            \"meters_to_feet\",\n            \"get_item\",\n        ]\n\n        # For each helper, try to render a jinja template with render_jinja2 and fail if TemplateAssertionError is raised\n        for helper in helpers_to_validate:\n            try:\n                render_jinja2(\"{{ data | \" + helper + \" }}\", {\"data\": None})\n            except TemplateAssertionError:\n                raise\n            except Exception:\n                pass\n\n    def test_netutils_filters_in_jinja(self):\n        \"\"\"Import the list of all Jinja filters from Netutils and validate that all of them have been properly loaded in Django Jinja\"\"\"\n        filters = jinja2_convenience_function()\n\n        for filter_ in filters.keys():\n            try:\n                render_jinja2(\"{{ data | \" + filter_ + \" }}\", {\"data\": None})\n            except TemplateAssertionError:\n                raise\n            except Exception:\n                pass\n"], "fixing_code": ["import os\nimport platform\nimport re\nimport sys\n\nfrom django.contrib.messages import constants as messages\nimport django.forms\n\nfrom nautobot import __version__\nfrom nautobot.core.settings_funcs import is_truthy, parse_redis_connection  # noqa: F401\n\n#\n# Environment setup\n#\n\n# This is used for display in the UI.\nVERSION = __version__\n\n# Hostname of the system. This is displayed in the web UI footers along with the\n# version.\nHOSTNAME = platform.node()\n\n# Set the base directory two levels up (i.e. the base nautobot/ directory)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Set the swapable User model to the Nautobot custom User model\nAUTH_USER_MODEL = \"users.User\"\n\n# Set the default AutoField for 3rd party apps\n# N.B. Ideally this would be a `UUIDField`, but due to Django restrictions\n#      we can\u2019t do that yet\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\n\n###############################################################\n# NAUTOBOT - Settings for Nautobot internals/plugins/defaults #\n###############################################################\n\n#\n# Nautobot optional settings/defaults\n#\nALLOWED_URL_SCHEMES = (\n    \"file\",\n    \"ftp\",\n    \"ftps\",\n    \"http\",\n    \"https\",\n    \"irc\",\n    \"mailto\",\n    \"sftp\",\n    \"ssh\",\n    \"tel\",\n    \"telnet\",\n    \"tftp\",\n    \"vnc\",\n    \"xmpp\",\n)\n\n# Base directory wherein all created files (jobs, git repositories, file uploads, static files) will be stored)\nNAUTOBOT_ROOT = os.getenv(\"NAUTOBOT_ROOT\", os.path.expanduser(\"~/.nautobot\"))\n\n# By default, Nautobot will permit users to create duplicate prefixes and IP addresses in the global\n# table (that is, those which are not assigned to any VRF). This behavior can be disabled by setting\n# ENFORCE_GLOBAL_UNIQUE to True.\nENFORCE_GLOBAL_UNIQUE = is_truthy(os.getenv(\"NAUTOBOT_ENFORCE_GLOBAL_UNIQUE\", \"False\"))\n\n# Exclude potentially sensitive models from wildcard view exemption. These may still be exempted\n# by specifying the model individually in the EXEMPT_VIEW_PERMISSIONS configuration parameter.\nEXEMPT_EXCLUDE_MODELS = (\n    (\"auth\", \"group\"),\n    (\"users\", \"user\"),\n    (\"users\", \"objectpermission\"),\n)\n\nEXEMPT_VIEW_PERMISSIONS = []\nGIT_ROOT = os.getenv(\"NAUTOBOT_GIT_ROOT\", os.path.join(NAUTOBOT_ROOT, \"git\").rstrip(\"/\"))\nHTTP_PROXIES = None\nJOBS_ROOT = os.getenv(\"NAUTOBOT_JOBS_ROOT\", os.path.join(NAUTOBOT_ROOT, \"jobs\").rstrip(\"/\"))\n\n# Log Nautobot deprecation warnings. Note that this setting is ignored (deprecation logs always enabled) if DEBUG = True\nLOG_DEPRECATION_WARNINGS = is_truthy(os.getenv(\"NAUTOBOT_LOG_DEPRECATION_WARNINGS\", \"False\"))\n\nMAINTENANCE_MODE = is_truthy(os.getenv(\"NAUTOBOT_MAINTENANCE_MODE\", \"False\"))\n# Metrics\nMETRICS_ENABLED = is_truthy(os.getenv(\"NAUTOBOT_METRICS_ENABLED\", \"False\"))\n\n# Napalm\nNAPALM_ARGS = {}\nNAPALM_PASSWORD = os.getenv(\"NAUTOBOT_NAPALM_PASSWORD\", \"\")\nNAPALM_TIMEOUT = int(os.getenv(\"NAUTOBOT_NAPALM_TIMEOUT\", \"30\"))\nNAPALM_USERNAME = os.getenv(\"NAUTOBOT_NAPALM_USERNAME\", \"\")\n\n# Plugins\nPLUGINS = []\nPLUGINS_CONFIG = {}\n\n# Global 3rd-party authentication settings\nEXTERNAL_AUTH_DEFAULT_GROUPS = []\nEXTERNAL_AUTH_DEFAULT_PERMISSIONS = {}\n\n# Remote auth backend settings\nREMOTE_AUTH_AUTO_CREATE_USER = False\nREMOTE_AUTH_HEADER = \"HTTP_REMOTE_USER\"\n\n# SSO backend settings https://python-social-auth.readthedocs.io/en/latest/configuration/settings.html\nSOCIAL_AUTH_POSTGRES_JSONFIELD = False\n# Nautobot related - May be overridden if using custom social auth backend\nSOCIAL_AUTH_BACKEND_PREFIX = \"social_core.backends\"\n\n# Job log entry sanitization and similar\nSANITIZER_PATTERNS = [\n    # General removal of username-like and password-like tokens\n    (re.compile(r\"(https?://)?\\S+\\s*@\", re.IGNORECASE), r\"\\1{replacement}@\"),\n    (re.compile(r\"(username|password|passwd|pwd)(\\s*i?s?\\s*:?\\s*)?\\S+\", re.IGNORECASE), r\"\\1\\2{replacement}\"),\n]\n\n# Storage\nSTORAGE_BACKEND = None\nSTORAGE_CONFIG = {}\n\n# Test runner that is aware of our use of \"integration\" tags and only runs\n# integration tests if explicitly passed in with `nautobot-server test --tag integration`.\nTEST_RUNNER = \"nautobot.core.tests.runner.NautobotTestRunner\"\n# Disable test data factories by default so as not to cause issues for plugins.\n# The nautobot_config.py that Nautobot core uses for its own tests will override this to True.\nTEST_USE_FACTORIES = is_truthy(os.getenv(\"NAUTOBOT_TEST_USE_FACTORIES\", \"False\"))\n# Pseudo-random number generator seed, for reproducibility of test results.\nTEST_FACTORY_SEED = os.getenv(\"NAUTOBOT_TEST_FACTORY_SEED\", None)\n\n#\n# django-slowtests\n#\n\n# Performance test uses `NautobotPerformanceTestRunner` to run, which is only available once you have `django-slowtests` installed in your dev environment.\n# `invoke performance-test` and adding `--performance-report` or `--performance-snapshot` at the end of the `invoke` command\n# will automatically opt to NautobotPerformanceTestRunner to run the tests.\n\n# The baseline file that the performance test is running against\n# TODO we need to replace the baselines in this file with more consistent results at least for CI\nTEST_PERFORMANCE_BASELINE_FILE = os.getenv(\n    \"NAUTOBOT_TEST_PERFORMANCE_BASELINE_FILE\", \"nautobot/core/tests/performance_baselines.yml\"\n)\n\n#\n# Django cryptography\n#\n\n# CRYPTOGRAPHY_BACKEND = cryptography.hazmat.backends.default_backend()\n# CRYPTOGRAPHY_DIGEST = cryptography.hazmat.primitives.hashes.SHA256\nCRYPTOGRAPHY_KEY = None  # Defaults to SECRET_KEY if unset\nCRYPTOGRAPHY_SALT = \"nautobot-cryptography\"\n\n\n#\n# Django Prometheus\n#\n\nPROMETHEUS_EXPORT_MIGRATIONS = False\n\n\n#\n# Django filters\n#\n\nFILTERS_NULL_CHOICE_LABEL = \"None\"\nFILTERS_NULL_CHOICE_VALUE = \"null\"\n\nSTRICT_FILTERING = is_truthy(os.getenv(\"NAUTOBOT_STRICT_FILTERING\", \"True\"))\n\n#\n# Django REST framework (API)\n#\n\nREST_FRAMEWORK_VERSION = VERSION.rsplit(\".\", 1)[0]  # Use major.minor as API version\ncurrent_major, current_minor = REST_FRAMEWORK_VERSION.split(\".\")\n# We support all major.minor API versions from 1.2 to the present latest version.\n# This will need to be elaborated upon when we move to version 2.0\n# Similar logic exists in tasks.py, please keep them in sync!\nassert current_major == \"1\", f\"REST_FRAMEWORK_ALLOWED_VERSIONS needs to be updated to handle version {current_major}\"\nREST_FRAMEWORK_ALLOWED_VERSIONS = [f\"{current_major}.{minor}\" for minor in range(2, int(current_minor) + 1)]\n\nREST_FRAMEWORK = {\n    \"ALLOWED_VERSIONS\": REST_FRAMEWORK_ALLOWED_VERSIONS,\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.SessionAuthentication\",\n        \"nautobot.core.api.authentication.TokenAuthentication\",\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": (\"nautobot.core.api.filter_backends.NautobotFilterBackend\",),\n    \"DEFAULT_METADATA_CLASS\": \"nautobot.core.api.metadata.BulkOperationMetadata\",\n    \"DEFAULT_PAGINATION_CLASS\": \"nautobot.core.api.pagination.OptionalLimitOffsetPagination\",\n    \"DEFAULT_PERMISSION_CLASSES\": (\"nautobot.core.api.authentication.TokenPermissions\",),\n    \"DEFAULT_RENDERER_CLASSES\": (\n        \"rest_framework.renderers.JSONRenderer\",\n        \"nautobot.core.api.renderers.FormlessBrowsableAPIRenderer\",\n    ),\n    \"DEFAULT_PARSER_CLASSES\": (\"rest_framework.parsers.JSONParser\",),\n    \"DEFAULT_SCHEMA_CLASS\": \"nautobot.core.api.schema.NautobotAutoSchema\",\n    # Version to use if the client doesn't request otherwise.\n    # This should only change (if at all) with Nautobot major (breaking) releases.\n    \"DEFAULT_VERSION\": \"1.2\",\n    \"DEFAULT_VERSIONING_CLASS\": \"nautobot.core.api.versioning.NautobotAPIVersioning\",\n    \"PAGE_SIZE\": None,\n    \"SCHEMA_COERCE_METHOD_NAMES\": {\n        # Default mappings\n        \"retrieve\": \"read\",\n        \"destroy\": \"delete\",\n        # Custom operations\n        \"bulk_destroy\": \"bulk_delete\",\n    },\n    \"VIEW_NAME_FUNCTION\": \"nautobot.utilities.api.get_view_name\",\n}\n\n\n#\n# drf_spectacular (OpenAPI/Swagger)\n#\n\nSPECTACULAR_SETTINGS = {\n    \"TITLE\": \"API Documentation\",\n    \"DESCRIPTION\": \"Source of truth and network automation platform\",\n    \"LICENSE\": {\"name\": \"Apache v2 License\"},\n    \"VERSION\": VERSION,\n    # For a semblance of backwards-compatibility with drf-yasg / OpenAPI 2.0, where \"/api\" was a common \"basePath\"\n    # in the schema.\n    # OpenAPI 3.0 removes \"basePath\" in favor of \"servers\", so we now declare \"/api\" as the server relative URL and\n    # trim it from all of the individual paths correspondingly.\n    # See also https://github.com/nautobot/nautobot-ansible/pull/135 for an example of why this is desirable.\n    \"SERVERS\": [{\"url\": \"/api\"}],\n    \"SCHEMA_PATH_PREFIX\": \"/api\",\n    \"SCHEMA_PATH_PREFIX_TRIM\": True,\n    # use sidecar - locally packaged UI files, not CDN\n    \"SWAGGER_UI_DIST\": \"SIDECAR\",\n    \"SWAGGER_UI_FAVICON_HREF\": \"SIDECAR\",\n    \"REDOC_DIST\": \"SIDECAR\",\n    \"ENUM_NAME_OVERRIDES\": {\n        # These choice enums need to be overridden because they get assigned to the `type` field and\n        # result in this error:\n        #    enum naming encountered a non-optimally resolvable collision for fields named \"type\".\n        \"CableTypeChoices\": \"nautobot.dcim.choices.CableTypeChoices\",\n        \"ConsolePortTypeChoices\": \"nautobot.dcim.choices.ConsolePortTypeChoices\",\n        \"CustomFieldTypeChoices\": \"nautobot.extras.choices.CustomFieldTypeChoices\",\n        \"InterfaceTypeChoices\": \"nautobot.dcim.choices.InterfaceTypeChoices\",\n        \"PortTypeChoices\": \"nautobot.dcim.choices.PortTypeChoices\",\n        \"PowerFeedTypeChoices\": \"nautobot.dcim.choices.PowerFeedTypeChoices\",\n        \"PowerOutletTypeChoices\": \"nautobot.dcim.choices.PowerOutletTypeChoices\",\n        \"PowerPortTypeChoices\": \"nautobot.dcim.choices.PowerPortTypeChoices\",\n        \"RackTypeChoices\": \"nautobot.dcim.choices.RackTypeChoices\",\n        \"RelationshipTypeChoices\": \"nautobot.extras.choices.RelationshipTypeChoices\",\n        # Each of these StatusModels has bulk and non-bulk serializers, with the same status options,\n        # which confounds drf-spectacular's automatic naming of enums, resulting in the below warning:\n        #   enum naming encountered a non-optimally resolvable collision for fields named \"status\"\n        # By explicitly naming the enums ourselves we avoid this warning.\n        \"CableStatusChoices\": \"nautobot.dcim.api.serializers.CableSerializer.status_choices\",\n        \"CircuitStatusChoices\": \"nautobot.circuits.api.serializers.CircuitSerializer.status_choices\",\n        \"DeviceStatusChoices\": \"nautobot.dcim.api.serializers.DeviceWithConfigContextSerializer.status_choices\",\n        \"InterfaceStatusChoices\": \"nautobot.dcim.api.serializers.InterfaceSerializer.status_choices\",\n        \"IPAddressStatusChoices\": \"nautobot.ipam.api.serializers.IPAddressSerializer.status_choices\",\n        \"LocationStatusChoices\": \"nautobot.dcim.api.serializers.LocationSerializer.status_choices\",\n        \"PowerFeedStatusChoices\": \"nautobot.dcim.api.serializers.PowerFeedSerializer.status_choices\",\n        \"PrefixStatusChoices\": \"nautobot.ipam.api.serializers.PrefixSerializer.status_choices\",\n        \"RackStatusChoices\": \"nautobot.dcim.api.serializers.RackSerializer.status_choices\",\n        \"VirtualMachineStatusChoices\": \"nautobot.virtualization.api.serializers.VirtualMachineWithConfigContextSerializer.status_choices\",\n        \"VLANStatusChoices\": \"nautobot.ipam.api.serializers.VLANSerializer.status_choices\",\n        # These choice enums need to be overridden because they get assigned to different names with the same choice set and\n        # result in this error:\n        #   encountered multiple names for the same choice set\n        \"JobExecutionTypeIntervalChoices\": \"nautobot.extras.choices.JobExecutionType\",\n    },\n    # Create separate schema components for PATCH requests (fields generally are not `required` on PATCH)\n    \"COMPONENT_SPLIT_PATCH\": True,\n    # Create separate schema components for request vs response where appropriate\n    \"COMPONENT_SPLIT_REQUEST\": True,\n}\n\n\n##############################################\n# DJANGO - Core settings required for Django #\n##############################################\n\n#\n# Databases\n#\n\n# Only PostgresSQL is supported, so database driver is hard-coded. This can\n# still be overloaded in custom settings.\n# https://docs.djangoproject.com/en/stable/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"NAME\": os.getenv(\"NAUTOBOT_DB_NAME\", \"nautobot\"),\n        \"USER\": os.getenv(\"NAUTOBOT_DB_USER\", \"\"),\n        \"PASSWORD\": os.getenv(\"NAUTOBOT_DB_PASSWORD\", \"\"),\n        \"HOST\": os.getenv(\"NAUTOBOT_DB_HOST\", \"localhost\"),\n        \"PORT\": os.getenv(\"NAUTOBOT_DB_PORT\", \"\"),\n        \"CONN_MAX_AGE\": int(os.getenv(\"NAUTOBOT_DB_TIMEOUT\", \"300\")),\n        \"ENGINE\": os.getenv(\"NAUTOBOT_DB_ENGINE\", \"django.db.backends.postgresql\"),\n    }\n}\n\n# Ensure proper Unicode handling for MySQL\nif DATABASES[\"default\"][\"ENGINE\"] == \"django.db.backends.mysql\":\n    DATABASES[\"default\"][\"OPTIONS\"] = {\"charset\": \"utf8mb4\"}\n\n# The secret key is used to encrypt session keys and salt passwords.\nSECRET_KEY = os.getenv(\"NAUTOBOT_SECRET_KEY\")\n\n# Default overrides\nALLOWED_HOSTS = os.getenv(\"NAUTOBOT_ALLOWED_HOSTS\", \"\").split(\" \")\nCSRF_TRUSTED_ORIGINS = []\nCSRF_FAILURE_VIEW = \"nautobot.core.views.csrf_failure\"\nDATE_FORMAT = os.getenv(\"NAUTOBOT_DATE_FORMAT\", \"N j, Y\")\nDATETIME_FORMAT = os.getenv(\"NAUTOBOT_DATETIME_FORMAT\", \"N j, Y g:i a\")\nDEBUG = is_truthy(os.getenv(\"NAUTOBOT_DEBUG\", \"False\"))\nINTERNAL_IPS = (\"127.0.0.1\", \"::1\")\nFORCE_SCRIPT_NAME = None\n\nTESTING = len(sys.argv) > 1 and sys.argv[1] == \"test\"\n\nLOG_LEVEL = \"DEBUG\" if DEBUG else \"INFO\"\n\nif TESTING:\n    # keep log quiet by default when running unit/integration tests\n    LOGGING = {}\nelse:\n    LOGGING = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,\n        \"formatters\": {\n            \"normal\": {\n                \"format\": \"%(asctime)s.%(msecs)03d %(levelname)-7s %(name)s :\\n  %(message)s\",\n                \"datefmt\": \"%H:%M:%S\",\n            },\n            \"verbose\": {\n                \"format\": \"%(asctime)s.%(msecs)03d %(levelname)-7s %(name)-20s %(filename)-15s %(funcName)30s() :\\n  %(message)s\",\n                \"datefmt\": \"%H:%M:%S\",\n            },\n        },\n        \"handlers\": {\n            \"normal_console\": {\n                \"level\": \"INFO\",\n                \"class\": \"logging.StreamHandler\",\n                \"formatter\": \"normal\",\n            },\n            \"verbose_console\": {\n                \"level\": \"DEBUG\",\n                \"class\": \"logging.StreamHandler\",\n                \"formatter\": \"verbose\",\n            },\n        },\n        \"loggers\": {\n            \"django\": {\"handlers\": [\"normal_console\"], \"level\": \"INFO\"},\n            \"nautobot\": {\n                \"handlers\": [\"verbose_console\" if DEBUG else \"normal_console\"],\n                \"level\": LOG_LEVEL,\n            },\n        },\n    }\n\nMEDIA_ROOT = os.path.join(NAUTOBOT_ROOT, \"media\").rstrip(\"/\")\nSESSION_COOKIE_AGE = int(os.getenv(\"NAUTOBOT_SESSION_COOKIE_AGE\", \"1209600\"))  # 2 weeks, in seconds\nSESSION_FILE_PATH = os.getenv(\"NAUTOBOT_SESSION_FILE_PATH\", None)\nSHORT_DATE_FORMAT = os.getenv(\"NAUTOBOT_SHORT_DATE_FORMAT\", \"Y-m-d\")\nSHORT_DATETIME_FORMAT = os.getenv(\"NAUTOBOT_SHORT_DATETIME_FORMAT\", \"Y-m-d H:i\")\nSHORT_TIME_FORMAT = os.getenv(\"NAUTOBOT_SHORT_TIME_FORMAT\", \"H:i:s\")\nTIME_FORMAT = os.getenv(\"NAUTOBOT_TIME_FORMAT\", \"g:i a\")\nTIME_ZONE = os.getenv(\"NAUTOBOT_TIME_ZONE\", \"UTC\")\n\n# Disable importing the WSGI module before starting the server application. This is required for\n# uWSGI postfork callbacks to execute as is currently required in `nautobot.core.wsgi`.\nWEBSERVER_WARMUP = False\n\n# Installed apps and Django plugins. Nautobot plugins will be appended here later.\nINSTALLED_APPS = [\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.humanize\",\n    \"cacheops\",  # v2 TODO(jathan); Remove cacheops.\n    \"corsheaders\",\n    \"django_filters\",\n    \"django_jinja\",\n    \"django_tables2\",\n    \"django_prometheus\",\n    \"mptt\",\n    \"social_django\",\n    \"taggit\",\n    \"timezone_field\",\n    \"nautobot.core.apps.NautobotConstanceConfig\",  # overridden form of \"constance\" AppConfig\n    \"nautobot.core\",\n    \"django.contrib.admin\",  # Must be after `nautobot.core` for template overrides\n    \"django_celery_beat\",  # Must be after `nautobot.core` for template overrides\n    \"rest_framework\",  # Must be after `nautobot.core` for template overrides\n    \"db_file_storage\",\n    \"nautobot.circuits\",\n    \"nautobot.dcim\",\n    \"nautobot.ipam\",\n    \"nautobot.extras\",\n    \"nautobot.tenancy\",\n    \"nautobot.users\",\n    \"nautobot.utilities\",\n    \"nautobot.virtualization\",\n    \"django_rq\",  # Must come after nautobot.extras to allow overriding management commands\n    \"drf_spectacular\",\n    \"drf_spectacular_sidecar\",\n    \"graphene_django\",\n    \"health_check\",\n    \"health_check.storage\",\n    \"django_extensions\",\n    \"constance.backends.database\",\n    \"django_ajax_tables\",\n]\n\n# Middleware\nMIDDLEWARE = [\n    \"django_prometheus.middleware.PrometheusBeforeMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"nautobot.core.middleware.ExceptionHandlingMiddleware\",\n    \"nautobot.core.middleware.RemoteUserMiddleware\",\n    \"nautobot.core.middleware.ExternalAuthMiddleware\",\n    \"nautobot.core.middleware.ObjectChangeMiddleware\",\n    \"django_prometheus.middleware.PrometheusAfterMiddleware\",\n]\n\nROOT_URLCONF = \"nautobot.core.urls\"\n\nTEMPLATES = [\n    {\n        \"NAME\": \"django\",\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.template.context_processors.media\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"social_django.context_processors.backends\",\n                \"social_django.context_processors.login_redirect\",\n                \"nautobot.core.context_processors.settings\",\n                \"nautobot.core.context_processors.sso_auth\",\n            ],\n        },\n    },\n    {\n        \"NAME\": \"jinja\",\n        \"BACKEND\": \"django_jinja.backend.Jinja2\",\n        \"DIRS\": [],\n        \"APP_DIRS\": False,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.template.context_processors.media\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"social_django.context_processors.backends\",\n                \"social_django.context_processors.login_redirect\",\n                \"nautobot.core.context_processors.settings\",\n                \"nautobot.core.context_processors.sso_auth\",\n            ],\n            \"environment\": \"jinja2.sandbox.SandboxedEnvironment\",\n        },\n    },\n]\n\n# Set up authentication backends\nAUTHENTICATION_BACKENDS = [\n    # Always check object permissions\n    \"nautobot.core.authentication.ObjectPermissionBackend\",\n]\n\n# Internationalization\nLANGUAGE_CODE = \"en-us\"\nUSE_I18N = True\nUSE_TZ = True\n\n# WSGI\nWSGI_APPLICATION = \"nautobot.core.wsgi.application\"\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\nUSE_X_FORWARDED_HOST = True\nX_FRAME_OPTIONS = \"DENY\"\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_ROOT = os.path.join(NAUTOBOT_ROOT, \"static\")\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, \"project-static\"),)\n\n# Media\nMEDIA_URL = \"media/\"\n\n# Disable default limit of 1000 fields per request. Needed for bulk deletion of objects. (Added in Django 1.10.)\nDATA_UPLOAD_MAX_NUMBER_FIELDS = None\n\n# Messages\nMESSAGE_TAGS = {\n    messages.ERROR: \"danger\",\n}\n\n# Authentication URLs\n# This is the URL route name for the login view.\nLOGIN_URL = \"login\"\n\n# This is the URL route name for the home page (index) view.\nLOGIN_REDIRECT_URL = \"home\"\n\n#\n# django-constance\n#\n\nCONSTANCE_BACKEND = \"constance.backends.database.DatabaseBackend\"\nCONSTANCE_DATABASE_PREFIX = \"constance:nautobot:\"\nCONSTANCE_IGNORE_ADMIN_VERSION_CHECK = True  # avoid potential errors in a multi-node deployment\n\nCONSTANCE_ADDITIONAL_FIELDS = {\n    \"per_page_defaults_field\": [\n        \"nautobot.utilities.forms.fields.JSONArrayFormField\",\n        {\n            \"widget\": \"django.forms.TextInput\",\n            \"base_field\": django.forms.IntegerField(min_value=1),\n        },\n    ],\n    \"release_check_timeout_field\": [\n        \"django.forms.IntegerField\",\n        {\n            \"min_value\": 3600,\n        },\n    ],\n    \"release_check_url_field\": [\n        \"django.forms.URLField\",\n        {\n            \"required\": False,\n        },\n    ],\n}\n\nCONSTANCE_CONFIG = {\n    \"BANNER_BOTTOM\": [\n        \"\",\n        \"Custom HTML to display in a banner at the bottom of all pages.\",\n    ],\n    \"BANNER_LOGIN\": [\n        \"\",\n        \"Custom HTML to display in a banner at the top of the login page.\",\n    ],\n    \"BANNER_TOP\": [\n        \"\",\n        \"Custom HTML to display in a banner at the top of all pages.\",\n    ],\n    \"CHANGELOG_RETENTION\": [\n        90,\n        \"Number of days to retain object changelog history.\\nSet this to 0 to retain changes indefinitely.\",\n    ],\n    \"DISABLE_PREFIX_LIST_HIERARCHY\": [\n        False,\n        \"Disable rendering parent/child relationships in the IPAM Prefix list view and instead show a flat list.\",\n    ],\n    \"HIDE_RESTRICTED_UI\": [\n        False,\n        \"If set to True, users with limited permissions will not be shown menu items and home-page elements that \"\n        \"they do not have permission to access.\",\n    ],\n    \"MAX_PAGE_SIZE\": [\n        1000,\n        \"Maximum number of objects that a user can list in one UI page or one API call.\\n\"\n        \"If set to 0, a user can retrieve an unlimited number of objects.\",\n    ],\n    \"PAGINATE_COUNT\": [\n        50,\n        \"Default number of objects to display per page when listing objects in the UI and/or REST API.\",\n    ],\n    \"PER_PAGE_DEFAULTS\": [\n        [25, 50, 100, 250, 500, 1000],\n        \"Pagination options to present to the user to choose amongst.\\n\"\n        \"For proper user experience, this list should include the PAGINATE_COUNT and MAX_PAGE_SIZE values as options.\",\n        # Use custom field type defined above\n        \"per_page_defaults_field\",\n    ],\n    \"PREFER_IPV4\": [\n        False,\n        \"Whether to prefer IPv4 primary addresses over IPv6 primary addresses for devices.\",\n    ],\n    \"RACK_ELEVATION_DEFAULT_UNIT_HEIGHT\": [\n        22,\n        \"Default height (in pixels) of a rack unit in a rack elevation diagram\",\n    ],\n    \"RACK_ELEVATION_DEFAULT_UNIT_WIDTH\": [\n        230,\n        \"Default width (in pixels) of a rack unit in a rack elevation diagram\",\n    ],\n    \"RELEASE_CHECK_TIMEOUT\": [\n        24 * 3600,\n        \"Number of seconds (must be at least 3600, or one hour) to cache the result of a release check \"\n        \"before checking again for a new release.\",\n        # Use custom field type defined above\n        \"release_check_timeout_field\",\n    ],\n    \"RELEASE_CHECK_URL\": [\n        \"\",\n        \"URL of GitHub repository REST API endpoint to poll periodically for availability of new Nautobot releases.\\n\"\n        'This can be set to the official repository \"https://api.github.com/repos/nautobot/nautobot/releases\" or '\n        \"a custom fork.\\nSet this to an empty string to disable automatic update checks.\",\n        # Use custom field type defined above\n        \"release_check_url_field\",\n    ],\n}\n\nCONSTANCE_CONFIG_FIELDSETS = {\n    \"Banners\": [\"BANNER_LOGIN\", \"BANNER_TOP\", \"BANNER_BOTTOM\"],\n    \"Change Logging\": [\"CHANGELOG_RETENTION\"],\n    \"Device Connectivity\": [\"PREFER_IPV4\"],\n    \"Pagination\": [\"PAGINATE_COUNT\", \"MAX_PAGE_SIZE\", \"PER_PAGE_DEFAULTS\"],\n    \"Rack Elevation Rendering\": [\"RACK_ELEVATION_DEFAULT_UNIT_HEIGHT\", \"RACK_ELEVATION_DEFAULT_UNIT_WIDTH\"],\n    \"Release Checking\": [\"RELEASE_CHECK_URL\", \"RELEASE_CHECK_TIMEOUT\"],\n    \"User Interface\": [\"DISABLE_PREFIX_LIST_HIERARCHY\", \"HIDE_RESTRICTED_UI\"],\n}\n\n#\n# From django-cors-headers\n#\n\n# If True, all origins will be allowed. Other settings restricting allowed origins will be ignored.\n# Defaults to False. Setting this to True can be dangerous, as it allows any website to make\n# cross-origin requests to yours. Generally you'll want to restrict the list of allowed origins with\n# CORS_ALLOWED_ORIGINS or CORS_ALLOWED_ORIGIN_REGEXES.\nCORS_ALLOW_ALL_ORIGINS = is_truthy(os.getenv(\"NAUTOBOT_CORS_ALLOW_ALL_ORIGINS\", \"False\"))\n\n# A list of strings representing regexes that match Origins that are authorized to make cross-site\n# HTTP requests. Defaults to [].\nCORS_ALLOWED_ORIGIN_REGEXES = []\n\n# A list of origins that are authorized to make cross-site HTTP requests. Defaults to [].\nCORS_ALLOWED_ORIGINS = []\n\n#\n# GraphQL\n#\n\nGRAPHENE = {\n    \"SCHEMA\": \"nautobot.core.graphql.schema_init.schema\",\n    \"DJANGO_CHOICE_FIELD_ENUM_V3_NAMING\": True,  # any field with a name of type will break in Graphene otherwise.\n}\nGRAPHQL_CUSTOM_FIELD_PREFIX = \"cf\"\nGRAPHQL_RELATIONSHIP_PREFIX = \"rel\"\nGRAPHQL_COMPUTED_FIELD_PREFIX = \"cpf\"\n\n\n#\n# Caching\n#\n\n# v2 TODO(jathan): Remove all cacheops settings.\n# The django-cacheops plugin is used to cache querysets. The built-in Django\n# caching is not used.\nCACHEOPS = {\n    \"auth.user\": {\"ops\": \"get\", \"timeout\": 60 * 15},\n    \"auth.*\": {\"ops\": (\"fetch\", \"get\")},\n    \"auth.permission\": {\"ops\": \"all\"},\n    \"circuits.*\": {\"ops\": \"all\"},\n    \"dcim.inventoryitem\": None,  # MPTT models are exempt due to raw SQL\n    \"dcim.region\": None,  # MPTT models are exempt due to raw SQL\n    \"dcim.rackgroup\": None,  # MPTT models are exempt due to raw SQL\n    \"dcim.*\": {\"ops\": \"all\"},\n    \"ipam.*\": {\"ops\": \"all\"},\n    \"extras.*\": {\"ops\": \"all\"},\n    \"users.*\": {\"ops\": \"all\"},\n    \"tenancy.tenantgroup\": None,  # MPTT models are exempt due to raw SQL\n    \"tenancy.*\": {\"ops\": \"all\"},\n    \"virtualization.*\": {\"ops\": \"all\"},\n}\nCACHEOPS_DEGRADE_ON_FAILURE = True\nCACHEOPS_ENABLED = is_truthy(os.getenv(\"NAUTOBOT_CACHEOPS_ENABLED\", \"False\"))\nCACHEOPS_REDIS = os.getenv(\"NAUTOBOT_CACHEOPS_REDIS\", parse_redis_connection(redis_database=1))\nCACHEOPS_DEFAULTS = {\"timeout\": int(os.getenv(\"NAUTOBOT_CACHEOPS_TIMEOUT\", \"900\"))}\n\n# The django-redis cache is used to establish concurrent locks using Redis. The\n# django-rq settings will use the same instance/database by default.\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": parse_redis_connection(redis_database=0),\n        \"TIMEOUT\": 300,\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"PASSWORD\": \"\",\n        },\n    }\n}\n\n#\n# Django RQ (used for legacy background processesing)\n#\n\n# These defaults utilize the Django caches setting defined for django-redis.\n# See: https://github.com/rq/django-rq#support-for-django-redis-and-django-redis-cache\nRQ_QUEUES = {\n    \"default\": {\n        \"USE_REDIS_CACHE\": \"default\",\n    },\n    \"check_releases\": {\n        \"USE_REDIS_CACHE\": \"default\",\n    },\n    \"custom_fields\": {\n        \"USE_REDIS_CACHE\": \"default\",\n    },\n    \"webhooks\": {\n        \"USE_REDIS_CACHE\": \"default\",\n    },\n}\n\n#\n# Celery (used for background processing)\n#\n\n# Celery broker URL used to tell workers where queues are located\nCELERY_BROKER_URL = os.getenv(\"NAUTOBOT_CELERY_BROKER_URL\", parse_redis_connection(redis_database=0))\n\n# Celery results backend URL to tell workers where to publish task results\nCELERY_RESULT_BACKEND = os.getenv(\"NAUTOBOT_CELERY_RESULT_BACKEND\", parse_redis_connection(redis_database=0))\n\n# Instruct celery to report the started status of a job, instead of just `pending`, `finished`, or `failed`\nCELERY_TASK_TRACK_STARTED = True\n\n# Default celery queue name that will be used by workers and tasks if no queue is specified\nCELERY_TASK_DEFAULT_QUEUE = os.getenv(\"NAUTOBOT_CELERY_TASK_DEFAULT_QUEUE\", \"default\")\n\n# Global task time limits (seconds)\n# Exceeding the soft limit will result in a SoftTimeLimitExceeded exception,\n# while exceeding the hard limit will result in a SIGKILL.\nCELERY_TASK_SOFT_TIME_LIMIT = int(os.getenv(\"NAUTOBOT_CELERY_TASK_SOFT_TIME_LIMIT\", str(5 * 60)))\nCELERY_TASK_TIME_LIMIT = int(os.getenv(\"NAUTOBOT_CELERY_TASK_TIME_LIMIT\", str(10 * 60)))\n\n# These settings define the custom nautobot serialization encoding as an accepted data encoding format\n# and register that format for task input and result serialization\nCELERY_ACCEPT_CONTENT = [\"nautobot_json\"]\nCELERY_RESULT_ACCEPT_CONTENT = [\"nautobot_json\"]\nCELERY_TASK_SERIALIZER = \"nautobot_json\"\nCELERY_RESULT_SERIALIZER = \"nautobot_json\"\n\nCELERY_BEAT_SCHEDULER = \"nautobot.core.celery.schedulers:NautobotDatabaseScheduler\"\n\n# Sets an age out timer of redis lock. This is NOT implicitly applied to locks, must be added\n# to a lock creation as `timeout=settings.REDIS_LOCK_TIMEOUT`\nREDIS_LOCK_TIMEOUT = int(os.getenv(\"NAUTOBOT_REDIS_LOCK_TIMEOUT\", \"600\"))\n\n#\n# Custom branding (logo and title)\n#\n\n# Branding logo locations. The logo takes the place of the Nautobot logo in the top right of the nav bar.\n# The filepath should be relative to the `MEDIA_ROOT`.\nBRANDING_FILEPATHS = {\n    \"logo\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_LOGO\", None),  # Navbar logo\n    \"favicon\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_FAVICON\", None),  # Browser favicon\n    \"icon_16\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_16\", None),  # 16x16px icon\n    \"icon_32\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_32\", None),  # 32x32px icon\n    \"icon_180\": os.getenv(\n        \"NAUTOBOT_BRANDING_FILEPATHS_ICON_180\", None\n    ),  # 180x180px icon - used for the apple-touch-icon header\n    \"icon_192\": os.getenv(\"NAUTOBOT_BRANDING_FILEPATHS_ICON_192\", None),  # 192x192px icon\n    \"icon_mask\": os.getenv(\n        \"NAUTOBOT_BRANDING_FILEPATHS_ICON_MASK\", None\n    ),  # mono-chrome icon used for the mask-icon header\n}\n\n# Title to use in place of \"Nautobot\"\nBRANDING_TITLE = os.getenv(\"NAUTOBOT_BRANDING_TITLE\", \"Nautobot\")\n\n# Prepended to CSV, YAML and export template filenames (i.e. `nautobot_device.yml`)\nBRANDING_PREPENDED_FILENAME = os.getenv(\"NAUTOBOT_BRANDING_PREPENDED_FILENAME\", \"nautobot_\")\n\n# Branding URLs (links in the bottom right of the footer)\nBRANDING_URLS = {\n    \"code\": os.getenv(\"NAUTOBOT_BRANDING_URLS_CODE\", \"https://github.com/nautobot/nautobot\"),\n    \"docs\": os.getenv(\"NAUTOBOT_BRANDING_URLS_DOCS\", None),\n    \"help\": os.getenv(\"NAUTOBOT_BRANDING_URLS_HELP\", \"https://github.com/nautobot/nautobot/wiki\"),\n}\n\n# Undocumented link in the bottom right of the footer which is meant to persist any custom branding changes.\nBRANDING_POWERED_BY_URL = \"https://docs.nautobot.com/\"\n\n#\n# Django extensions settings\n#\n\n# Dont load the 'taggit' app, since we have our own custom `Tag` and `TaggedItem` models\nSHELL_PLUS_DONT_LOAD = [\"taggit\"]\n\n#\n# UI settings\n#\n\n\n# UI_RACK_VIEW_TRUNCATE_FUNCTION\ndef UI_RACK_VIEW_TRUNCATE_FUNCTION(device_display_name):\n    \"\"\"Given device display name, truncate to fit the rack elevation view.\n\n    :param device_display_name: Full display name of the device attempting to be rendered in the rack elevation.\n    :type device_display_name: str\n\n    :return: Truncated device name\n    :type: str\n    \"\"\"\n    return str(device_display_name).split(\".\")[0]\n", "# Device Redundancy Groups\n\n+++ 1.5.0\n\nDevice Redundancy Groups represent logical relationships between multiple devices. Typically, a redundancy group could represent a failover pair, failover group, or a load sharing cluster.\nDevice Redundancy Groups are created first, before the devices are assigned to the group.\n\nA failover strategy represents intended operation mode of the group. Supported failover strategy are: Active/Active and Active/Standby.\n\nSecrets groups could be used to inform store secret information used by failover or a cluster of devices.\n\nDevice Redundancy Group Priority is a Device attribute defined during assigning a Device to a Device Redundancy Group. This field represents the priority the device has in the device redundancy group.\n\n## Example use of Device Redundancy Groups - Cisco ASA 5500 Series Active/Standby Failover\n\nThis document provides an example of generating a Cisco ASA device's desired failover configuration based on data stored in Nautobot Device Redundancy Groups.\nA GraphQL query is used to retrieve the relevant data, which is then rendered through a Jinja2 template to produce the desired configuration.\n\nAs one of the use cases for Device Redundacy Groups, introduced in Nautobot 1.5 release, is to model failover pairs, we will use the ASA 5500 Series in this example with details as follows:\n\n* Firewall failover pair is composed of two devices named \"nyc-fw-primary\" and \"nyc-fw-secondary\"\n* Each firewall device forming a failover cluster has a virtual interface dedicated for failover usage (named \"failover-link\") and addressed in 172.27.48.0/31 network\n* Virtual failover interface has a physical parent interface assigned (\"gigabitethernet0/3\")\n* Following redundancy group priorities are assigned in a failover pair:\n    * Priority 100 for a Primary Failover unit\n    * Priority 50 for a Secondary Failover unit\n\n### Querying for the data\n\nTo retrieve information about devices forming an ASA Failover pair, we will use a GraphQL query and the `get_gql_failover_details` Python method.\nThis method takes a `device_name` as an argument.\n\n```python\nimport json\nimport pynautobot\n\nquery = \"\"\"\nquery ($device_name: [String]) {\n    devices(name__ie: $device_name) {\n        name\n        device_redundancy_group {\n            name\n            members {\n                name\n                device_redundancy_group_priority\n                interfaces(name__ie: \"failover-link\") {\n                    type\n                    name\n                    ip_addresses {\n                        host\n                        prefix_length\n                    }\n                    parent_interface {\n                        name\n                        type\n                    }\n                }\n            }\n        }\n    }\n}\n\"\"\"\n\ndef get_gql_failover_details(device_name):\n    variables = {\"device_name\": device_name}\n    nb = pynautobot.api(\n        url=\"http://localhost:8080\",\n        token=\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n    )\n    return nb.graphql.query(query=query, variables=variables)\n```\n\n### Retrieving the data - Primary Failover Unit (\"nyc-fw-primary\")\n\nWe will demonstrate how to execute the command for Primary Unit only, however you could repeat the process for a secondary unit. An example data returned from Nautobot is presented below.\n\n```python\n>>> hostname = \"nyc-fw-primary\"\n>>> gql_data = get_gql_failover_details(hostname).json\n```\n\n```json\n{\n    \"data\": {\n        \"devices\": [\n            {\n                \"name\": \"nyc-fw-primary\",\n                \"device_redundancy_group\": {\n                    \"name\": \"nyc-firewalls\",\n                    \"members\": [\n                        {\n                            \"name\": \"nyc-fw-primary\",\n                            \"device_redundancy_group_priority\": 100,\n                            \"interfaces\": [\n                                {\n                                    \"type\": \"VIRTUAL\",\n                                    \"name\": \"failover-link\",\n                                    \"ip_addresses\": [\n                                        {\n                                            \"host\": \"172.27.48.0\",\n                                            \"prefix_length\": 31\n                                        }\n                                    ],\n                                    \"parent_interface\": {\n                                        \"name\": \"gigabitethernet0/3\",\n                                        \"type\": \"A_1000BASE_T\"\n                                    }\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"nyc-fw-secondary\",\n                            \"device_redundancy_group_priority\": 50,\n                            \"interfaces\": [\n                                {\n                                    \"type\": \"VIRTUAL\",\n                                    \"name\": \"failover-link\",\n                                    \"ip_addresses\": [\n                                        {\n                                            \"host\": \"172.27.48.1\",\n                                            \"prefix_length\": 31\n                                        }\n                                    ],\n                                    \"parent_interface\": {\n                                        \"name\": \"gigabitethernet0/3\",\n                                        \"type\": \"A_1000BASE_T\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n```\n\n### Creating Cisco ASA Configuration Template - Common for Primary and Secondary Units\n\nThe following snippet represents an example Cisco ASA failover configuration template:\n\n```python\n# Configuration Template for Cisco ASA\ntemplate_code = \"\"\"\n{% set redundancy_members = gql_data['data']['devices'][0]['device_redundancy_group']['members'] %}\n{% set failover_device_local = redundancy_members[0] if redundancy_members[0].name == device else redundancy_members[1] %}\n{% set failover_device_peer = redundancy_members[0] if redundancy_members[0].name != device else redundancy_members[1] %}\n{% set failover_local_vif = failover_device_local.interfaces | first %}\n{% set failover_peer_vif = failover_device_peer.interfaces | first %}\n!\nhostname {{ device.name }}\n!\nfailover lan unit {{ priority_mapping[failover_device_local.device_redundancy_group_priority] }}\nfailover lan interface {{ failover_local_vif.name }} {{ failover_local_vif.parent_interface.name }} \n!\nfailover interface ip {{ failover_local_vif.name }} {{ failover_local_vif.ip_addresses[0].host }}/{{ failover_local_vif.ip_addresses[0].prefix_length }} standby {{ failover_peer_vif.ip_addresses[0].host }}\ninterface {{ failover_local_vif.parent_interface.name }} \n  no shutdown\n!\nfailover link {{ failover_local_vif.name }} {{ failover_local_vif.parent_interface.name }} \n!\n!failover ipsec pre-shared-key !Nautobot Secrets\n!\nfailover\n!\n\"\"\"\n```\n\n### Rendering Cisco ASA Configuration Template with the data retrieved from GraphQL\n\nFollowing snippet represents an example Cisco ASA Failover rendered configuration:\n\n```python\nfrom nautobot.utilities.utils import render_jinja2\n\n\ncontext = dict(\n    device=hostname,\n    gql_data=gql_data,\n    priority_mapping={50: 'secondary', 100: 'primary'}\n)\nnyc_fw_primary_config = render_jinja2(template_code=template_code, context=context)\n\nprint(nyc_fw_primary_config)\n```\n\n```text\n!\nhostname nyc-fw-primary\n!\nfailover lan unit\nfailover lan interface failover-link gigabitethernet0/3\n!\nfailover interface ip failover-link 172.27.48.0/31 standby 172.27.48.1\ninterface gigabitethernet0/3\n  no shutdown\n!\nfailover link failover-link gigabitethernet0/3\n!\n!failover ipsec pre-shared-key !Nautobot Secrets\n!\nfailover\n!\n```\n\n## Example use of Device Redundancy Groups - Spine Redundancy in a Leaf and Spine (Clos) Topology\n\nAnother example for the redundancy group use case could be a spine redundancy in the Leaf and Spine topology.\nSpine redundancy is important while performing the Day-2 operations, such as OS-updates.\n\nIn this scenario, no more than 1 device participating in a Device Redundancy Group should be updated and rebooted at the same time. In order to track this, we will create a new Device custom field  named `upgrade_operational_state` and assign it one of the statues: `pre_upgrade`, `in_reboot`, `post_upgrade`. If a device with a spine role assigned is in state `in_reboot`, no other redundancy group members should be OS-upgraded at the same time.\n\n### Querying for the data - Spine Redundancy in a Leaf and Spine (Clos) Topology\n\nTo retrieve the data about devices forming a Spine redundancy group, we will use the following GraphQL query:\n\n```text\nquery {\n    device_redundancy_groups(name__ie: \"nyc-spines\") {\n        name\n        members {\n          name\n          device_role {\n            slug\n          }\n          cf_upgrade_operational_state\n        }\n    }\n}\n```\n\n### Retrieving the data - Spine Redundancy in a Leaf and Spine (Clos) Topology\n\nAn example data returned from Nautobot is presented below.\n\n```json\n{\n  \"data\": {\n    \"device_redundancy_groups\": [\n      {\n        \"name\": \"nyc-spines\",\n        \"members\": [\n          {\n            \"name\": \"spine-1\",\n            \"device_role\": {\n              \"slug\": \"spine\"\n            },\n            \"cf_upgrade_operational_state\": \"in_reboot\"\n          },\n          {\n            \"name\": \"spine-2\",\n            \"device_role\": {\n              \"slug\": \"spine\"\n            },\n            \"cf_upgrade_operational_state\": null\n          },\n          {\n            \"name\": \"spine-3\",\n            \"device_role\": {\n              \"slug\": \"spine\"\n            },\n            \"cf_upgrade_operational_state\": null\n          },\n          {\n            \"name\": \"spine-4\",\n            \"device_role\": {\n              \"slug\": \"spine\"\n            },\n            \"cf_upgrade_operational_state\": null\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nBased on the output, `spine-1` device is being rebooted at the moment of the GraphQL query response. This could be used by an automation system to prevent OS upgrades on `spine-2`, `spine-3`, `spine-4`.\n", "from django.test import TestCase\nfrom jinja2.exceptions import SecurityError, TemplateAssertionError\nfrom netutils.utils import jinja2_convenience_function\n\nfrom nautobot.utilities.utils import render_jinja2\nfrom nautobot.dcim.models import Site\n\n\nclass NautobotJinjaFilterTest(TestCase):\n    def test_invalid_templatetags_raise_exception(self):\n        \"\"\"Validate that executing render_jinja2 with an invalid filter will raise TemplateAssertionError.\"\"\"\n        helpers_not_valid = [\"notvalid\"]\n\n        for helper in helpers_not_valid:\n            with self.assertRaises(TemplateAssertionError):\n                render_jinja2(\"{{ data | \" + helper + \" }}\", {\"data\": None})\n\n    def test_templatetags_helpers_in_jinja(self):\n        \"\"\"\n        Only validate that all templatetags helpers have been properly registered as Django Jinja\n        no need to check the returned value since we already have some unit tests for that\n        \"\"\"\n\n        helpers_to_validate = [\n            \"placeholder\",\n            \"render_json\",\n            \"render_yaml\",\n            \"render_markdown\",\n            \"meta\",\n            \"viewname\",\n            \"validated_viewname\",\n            \"bettertitle\",\n            \"humanize_speed\",\n            \"tzoffset\",\n            \"fgcolor\",\n            \"divide\",\n            \"percentage\",\n            \"get_docs_url\",\n            \"has_perms\",\n            \"has_one_or_more_perms\",\n            \"split\",\n            \"as_range\",\n            \"meters_to_feet\",\n            \"get_item\",\n        ]\n\n        # For each helper, try to render a jinja template with render_jinja2 and fail if TemplateAssertionError is raised\n        for helper in helpers_to_validate:\n            try:\n                render_jinja2(\"{{ data | \" + helper + \" }}\", {\"data\": None})\n            except TemplateAssertionError:\n                raise\n            except Exception:\n                pass\n\n    def test_netutils_filters_in_jinja(self):\n        \"\"\"Import the list of all Jinja filters from Netutils and validate that all of them have been properly loaded in Django Jinja\"\"\"\n        filters = jinja2_convenience_function()\n\n        for filter_ in filters.keys():\n            try:\n                render_jinja2(\"{{ data | \" + filter_ + \" }}\", {\"data\": None})\n            except TemplateAssertionError:\n                raise\n            except Exception:\n                pass\n\n    def test_sandboxed_render(self):\n        \"\"\"Assert that Jinja template rendering is sandboxed.\"\"\"\n        template_code = \"{{ ''.__class__.__name__ }}\"\n        with self.assertRaises(SecurityError):\n            render_jinja2(template_code=template_code, context={})\n\n    def test_safe_render(self):\n        \"\"\"Assert that safe Jinja rendering still works.\"\"\"\n        site = Site.objects.filter(region__isnull=False).first()\n        template_code = \"{{ obj.region.name }}\"\n        try:\n            value = render_jinja2(template_code=template_code, context={\"obj\": site})\n        except SecurityError:\n            self.fail(\"SecurityError raised on safe Jinja template render\")\n        else:\n            self.assertEqual(value, site.region.name)\n"], "filenames": ["nautobot/core/settings.py", "nautobot/docs/models/dcim/deviceredundancygroup.md", "nautobot/utilities/tests/test_jinja_filters.py"], "buggy_code_start_loc": [470, 145, 2], "buggy_code_end_loc": [470, 183, 66], "fixing_code_start_loc": [471, 145, 2], "fixing_code_end_loc": [472, 184, 84], "type": "NVD-CWE-noinfo", "message": "Nautobot is a Network Source of Truth and Network Automation Platform. All users of Nautobot versions earlier than 1.5.7 are impacted by a remote code execution vulnerability. Nautobot did not properly sandbox Jinja2 template rendering. In Nautobot 1.5.7 has enabled sandboxed environments for the Jinja2 template engine used internally for template rendering for the following objects: `extras.ComputedField`, `extras.CustomLink`, `extras.ExportTemplate`, `extras.Secret`, `extras.Webhook`. While no active exploits of this vulnerability are known this change has been made as a preventative measure to protect against any potential remote code execution attacks utilizing maliciously crafted template code. This change forces the Jinja2 template engine to use a `SandboxedEnvironment` on all new installations of Nautobot. This addresses any potential unsafe code execution everywhere the helper function `nautobot.utilities.utils.render_jinja2` is called. Additionally, the documentation that had previously suggesting the direct use of `jinja2.Template` has been revised to suggest `render_jinja2`. Users are advised to upgrade to Nautobot 1.5.7 or newer. For users that are unable to upgrade to the latest release of Nautobot, you may add the following setting to your `nautobot_config.py` to apply the sandbox environment enforcement: `TEMPLATES[1][\"OPTIONS\"][\"environment\"] = \"jinja2.sandbox.SandboxedEnvironment\"` After applying this change, you must restart all Nautobot services, including any Celery worker processes. **Note:** *Nautobot specifies two template engines by default, the first being \u201cdjango\u201d for the Django built-in template engine, and the second being \u201cjinja\u201d for the Jinja2 template engine. This recommended setting will update the second item in the list of template engines, which is the Jinja2 engine.* For users that are unable to immediately update their configuration such as if a Nautobot service restart is too disruptive to operations, access to provide custom Jinja2 template values may be mitigated using permissions to restrict \u201cchange\u201d (write) actions to the affected object types listed in the first section. **Note:** *This solution is intended to be stopgap until you can successfully update your `nautobot_config.py` or upgrade your Nautobot instance to apply the sandboxed environment enforcement.*", "other": {"cve": {"id": "CVE-2023-25657", "sourceIdentifier": "security-advisories@github.com", "published": "2023-02-21T21:15:11.243", "lastModified": "2023-03-02T22:35:11.183", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Nautobot is a Network Source of Truth and Network Automation Platform. All users of Nautobot versions earlier than 1.5.7 are impacted by a remote code execution vulnerability. Nautobot did not properly sandbox Jinja2 template rendering. In Nautobot 1.5.7 has enabled sandboxed environments for the Jinja2 template engine used internally for template rendering for the following objects: `extras.ComputedField`, `extras.CustomLink`, `extras.ExportTemplate`, `extras.Secret`, `extras.Webhook`. While no active exploits of this vulnerability are known this change has been made as a preventative measure to protect against any potential remote code execution attacks utilizing maliciously crafted template code. This change forces the Jinja2 template engine to use a `SandboxedEnvironment` on all new installations of Nautobot. This addresses any potential unsafe code execution everywhere the helper function `nautobot.utilities.utils.render_jinja2` is called. Additionally, the documentation that had previously suggesting the direct use of `jinja2.Template` has been revised to suggest `render_jinja2`. Users are advised to upgrade to Nautobot 1.5.7 or newer. For users that are unable to upgrade to the latest release of Nautobot, you may add the following setting to your `nautobot_config.py` to apply the sandbox environment enforcement: `TEMPLATES[1][\"OPTIONS\"][\"environment\"] = \"jinja2.sandbox.SandboxedEnvironment\"` After applying this change, you must restart all Nautobot services, including any Celery worker processes. **Note:** *Nautobot specifies two template engines by default, the first being \u201cdjango\u201d for the Django built-in template engine, and the second being \u201cjinja\u201d for the Jinja2 template engine. This recommended setting will update the second item in the list of template engines, which is the Jinja2 engine.* For users that are unable to immediately update their configuration such as if a Nautobot service restart is too disruptive to operations, access to provide custom Jinja2 template values may be mitigated using permissions to restrict \u201cchange\u201d (write) actions to the affected object types listed in the first section. **Note:** *This solution is intended to be stopgap until you can successfully update your `nautobot_config.py` or upgrade your Nautobot instance to apply the sandboxed environment enforcement.*"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:networktocode:nautobot:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.7", "matchCriteriaId": "DA68D12E-E223-46ED-8C8F-A996B7FFEE07"}]}]}], "references": [{"url": "https://github.com/nautobot/nautobot/commit/d47f157e83b0c353bb2b697f911882c71cf90ca0", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/nautobot/nautobot/security/advisories/GHSA-8mfq-f5wj-vw5m", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://jinja.palletsprojects.com/en/3.0.x/sandbox/#sandbox", "source": "security-advisories@github.com", "tags": ["Product"]}]}, "github_commit_url": "https://github.com/nautobot/nautobot/commit/d47f157e83b0c353bb2b697f911882c71cf90ca0"}}