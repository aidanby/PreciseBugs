{"buggy_code": ["<?php\n/*\n#########################################\n#\n# Copyright (C) 2017 EyesOfNetwork Team\n# DEV NAME : Jean-Philippe LEVY\n# VERSION : 5.3\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\nsession_start();\n# Internationalization\ninclude(\"classes/Translator.class.php\");\n\n# Actions\ninclude(\"classes/Actions.class.php\");\t\nif(file_exists(dirname(__FILE__).\"/classes/Custom.Actions.class.php\")) { \n\tinclude(\"classes/Custom.Actions.class.php\"); \n}\n$CustomActions = class_exists(\"CustomActions\") ? new CustomActions() : new Actions();\n\n// Display Error Message \nfunction message($id, $text, $type){\n\t\n\tglobal $array_msg;\n\t\n\t// Get standard message if exists\n\tif(isset($array_msg[$id])) { $tempid=$array_msg[$id]; } \n\telse { $tempid=\"\"; }\n\t\n\t// Define the message type and icon\n\tswitch($type)\n\t{\n\t\tcase \"critical\":\n\t\t\t$alert_type = \"danger\";\n\t\t\t$alert_icon = \"fa-exclamation-circle\";\n\t\t\tbreak;\n\t\tcase \"warning\":\n\t\t\t$alert_type = \"warning\";\n\t\t\t$alert_icon = \"fa-warning\";\n\t\t\tbreak;\n   \t\tcase \"ok\":\n   \t\t\t$alert_type = \"success\";\n\t\t\t$alert_icon = \"fa-check-circle\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$alert_type = \"info\";\n\t\t\t$alert_icon = \"fa-info-circle\";\n\t\t\tbreak;\n\t}\n\n\t// Display the message\n\techo \"<p class='alert alert-dismissible alert-\".$alert_type.\" fade in'>\n\t\t\t<button type='button' class='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t  <span aria-hidden='true'>&times;</span>\n\t\t\t</button>\n\t\t\t<i class='fa \".$alert_icon.\"'></i> $tempid $text\n\t\t  </p>\";\n}\n\n// Connect to Database\nfunction sqlrequest($database,$sql,$id=false,$prepare=false){\n\n\t// Get the global value\n\tglobal $database_host;\n\tglobal $database_username;\n\tglobal $database_password;\n\n\t$connexion = mysqli_connect($database_host, $database_username, $database_password, $database);\n\tif (!$connexion) {\n\t\techo \"<ul>\";\n\t\techo \"<li class='msg_title'>Alert EyesOfNetwork - Message EON-database connect</li>\";\n\t\techo \"<li class='msg'> Could not connect to database : $database ($database_host)</li>\";\n\t\techo \"</ul>\";\n\t\texit(1);\n\t}\n\n\tif ( $database == \"eonweb\" ) {\n\t\t// Force UTF-8\n\t\tmysqli_query($connexion, \"SET NAMES 'utf8'\");\n\t}\n\t\n\tif(is_array($prepare)) {\n\t\t$stmt = mysqli_prepare($connexion,$sql);\n\t\t\n\t\tif(isset($prepare[0]) && isset($prepare[1])) {\n\t\t\t$ref = new ReflectionClass('mysqli_stmt');\n\t\t\t$method = $ref->getMethod(\"bind_param\");\n\t\t\t$method->invokeArgs($stmt,$prepare);\n\t\t}\n\t\t\n\t\tmysqli_stmt_execute($stmt);\n\t\t$result = mysqli_stmt_get_result($stmt);\n\t} else {\n\t\t$result=mysqli_query($connexion, \"$sql\");\n\t}\n\t\t\n\tif($id==true)\n\t\t$result=mysqli_insert_id($connexion);\n\t\t\n\tmysqli_close($connexion);\n\treturn $result;\n}\n\nfunction connexionDB($database){\n    global $database_host;\n    global $database_username;\n    global $database_password;\n    try {\n        $dbh = new PDO(\"mysql:host=$database_host;dbname=$database\", $database_username, $database_password);\n        return $dbh;\n    } catch (PDOException $e) {\n        print \"Erreur !: \" . $e->getMessage() . \"<br/>\";\n        die();\n    }\n}\n\n// Display array value\nfunction display_value($value, $key){\n\techo \"$value\\n\";\n}\n\n// Function Edit and Modify a file\nfunction filemodify($path,$get=false){\n\tif(is_writable($path)) {\n\t\n\t\t// Test If Update or Display.\n\t\tif (isset($_POST['maj'])) {\n\t\t\tif (!$fconf = fopen($path, \"w\")) message(2,$path,\"critical\");\n\t\t\t// Write the change\n\t\t\tif (fwrite ($fconf, str_replace(\"\\r\\n\", \"\\n\", $_POST['maj'])) === FALSE) message(3,$path,\"critical\");\n\t\t\telse { \n\t\t\t\tmessage(6,\" : File updated\",\"ok\");\n\t\t\t}\n\t\t\tfclose ($fconf);\n\t\t\tif (!$fconf = fopen($path, \"r\")) message(2,$path,\"critical\");\n\t\t}\n\t\telse if (!$fconf = fopen($path, \"r\")) message(2,$path,\"critical\");\n\n\t\t// Display the Text Area and button\n\t\techo \"<form method='post' action='./index.php\";\n\t\tif($get)\n\t\t\techo \"?file=$get\";\n\t\techo \"'>\";\n\t\techo '<div class=\"form-group\">';\n\t\techo \"<textarea class='form-control textarea' cols='100' rows='20' name='maj' scrolling='no'>\";\n\t\t\tprint file_get_contents($path);\n\t\techo \"</textarea>\";\n\t\techo '</div>';\n\t\techo '<div class=\"form-group\">';\n\t\techo \"<input class='btn btn-primary' type='submit' value='\".getLabel(\"action.update\").\"'>\";\n\t\techo '</div>';\n\t\techo \"</form>\";\n\t\tfclose ($fconf);\n\t}\n\telse message(3,$path,\"critical\");\n}\n\n// Host List form Nagios\nfunction get_host_list_from_nagios($field=false, $queue = false){\n\tglobal $database_lilac;\n\tglobal $database_ged;\n\t$hosts=array();\n\n\tif($field && $field != 'owner'){\n\t\tswitch ($field) {\n\t\t\tcase 'service': $column = 'description'; break;\n\t\t\tcase 'description': echo json_encode($hosts); return; break;\n\t\t\tdefault: $column = 'name'; break;\n\t\t}\n\t\t$request=\"SELECT DISTINCT $column FROM nagios_$field ORDER BY $column\";\n\t\t$db = $database_lilac;\n\t} elseif ($field && $field === 'owner') {\n\t\t$request=\"SELECT DISTINCT owner FROM nagios_queue_$queue WHERE owner != '' ORDER BY owner\";\n\t\t$db = $database_ged;\n\t}\n\telse {\n\t\t$request=\"SELECT name FROM nagios_host\n\t\tUNION SELECT name from nagios_hostgroup\n\t\tUNION SELECT DISTINCT description from nagios_service\n\t\tUNION SELECT name from nagios_service_group\n\t\tORDER BY name\";\n\t\t$db = $database_lilac;\n\t}\n\n\t$result=sqlrequest($db,$request);\n \twhile ($line = mysqli_fetch_array($result)){ \n\t\tarray_push($hosts, $line[0]);\n\t}\n\techo json_encode($hosts);\n}\n\n// Host and Address list from nagios. //TODO send the adress\nfunction get_host_list(){\n\tglobal $database_lilac;\n\t$hosts=array();\n\n\t$result=sqlrequest($database_lilac,\"SELECT name,address FROM nagios_host ORDER BY name\");\n\n \twhile ($line = mysqli_fetch_array($result)){ \n\t\t$hosts[]=$line[0];\n\t\t$hosts[]=$line[1];\n\t}\n\techo json_encode($hosts);\n}\n\n// Host and Address listbox from nagios. //TODO send the adress\nfunction get_host_listbox_from_nagios(){\n\tglobal $database_lilac;\n\t\n\t// create input autocomplete with all nagios host values\n\techo \"<label>Host</label>\";\n\t$result=sqlrequest($database_lilac,\"SELECT DISTINCT name FROM nagios_host UNION ALL SELECT DISTINCT address FROM nagios_host\");\n\t$input = \"<input id='host_list' class='form-control' type='text' name='host_list' onFocus='$(this).autocomplete({source: [\";\n\twhile ($line = mysqli_fetch_array($result))\n\t{\n\t\t$input .= '\"'.$line[0].'\",';\n\t}\n\t$input = rtrim($input, \",\");\n\t$input .= \"]})'>\";\n\t\n\techo '<div class=\"input-group\">';\n\techo \t$input;\n\techo \t'<span class=\"input-group-btn\">\n\t\t\t\t<input class=\"btn btn-primary\" type=\"submit\" name=\"run\" value=\"'.getLabel(\"action.run\").'\" >\n\t\t\t</span>\n\t\t\t';\n\techo '</div>';\n}\n\n// Host list from CACTI\nfunction get_title_list_from_cacti(){\n\n\tglobal $database_cacti;\n\n\t$titles=array();\n\t$request=\"SELECT DISTINCT graph_templates_graph.title FROM graph_local,graph_templates_graph WHERE graph_templates_graph.local_graph_id=graph_local.id ORDER BY title\";\n\t$result=sqlrequest($database_cacti,$request);\n\twhile ($line = mysqli_fetch_array($result)){\n\t$line[0]=str_replace(\"|host_description| - \",\"\",$line[0]);\n\t\t$titles[]=$line[0];\n\t}\n\techo json_encode($titles);\n}\n\n// Host listbox from CACTI\nfunction get_host_listbox_from_cacti(){\n\t\n\tglobal $database_cacti;\n\t\n\t$ref = \"\";\n\tif( isset($_GET['host']) ){\n\t\t$ref = $_GET['host'];\n\t}\n\t\n\t$result=sqlrequest($database_cacti,\"SELECT DISTINCT host.id,hostname,description FROM host INNER JOIN graph_local ON host.id = graph_local.host_id ORDER BY hostname ASC\");\n\techo \"<SELECT name='host' class='form-control' size=7>\";\n        while ($line = mysqli_fetch_array($result))\n        {\n\t\t\techo \"<OPTION value='$line[0]' \";\n\t\t\tif($ref == $line[0]){echo 'selected=\"selected\"';}\n\t\t\techo \">&nbsp;$line[1] ($line[2])&nbsp;</OPTION>\";\n        }\n        echo \"</SELECT><br>\";\n}\n\n// system function : CUT\nfunction cut($string, $width, $padding = \"...\"){\n    return (strlen($string) > $width ? substr($string, 0, $width-strlen($padding)).$padding : $string);\n} \n\n// Get graph from CACTI\nfunction get_graph_listbox_from_cacti(){\n\t\n\tglobal $database_cacti;\n\t\n\t$ref = \"\";\n\tif( isset($_GET['graph']) ){\n\t\t$ref = $_GET['graph'];\n\t}\n\t\n\t$result=sqlrequest($database_cacti,\"SELECT DISTINCT graph_templates.id,name FROM graph_templates INNER JOIN graph_local ON graph_local.graph_template_id = graph_templates.id ORDER BY name ASC\");\n\techo \"<SELECT name='graph' class='form-control' size=7>\";\n\twhile ($line = mysqli_fetch_array($result))\n\t{\n\t\techo \"<OPTION value='$line[0]' \";\n\t\tif($ref == $line[0]){echo 'selected=\"selected\"';}\n\t\techo \">&nbsp;$line[1]&nbsp;</OPTION>\";\n\t}\n\techo \"</SELECT><br>\";\n}\n\n// Display TOOL list\nfunction get_tool_listbox(){\n\t// Get the global table\n\tglobal $array_tools;\n\t\n\techo \"<label>\".getLabel(\"label.tool_all.tool\").\"</label>\";\t\n\n\t// Get the first array key\n\treset($array_tools);\n\n\t// Display the list of tool\n\techo \"<SELECT id='tool_list' name='tool_list' class='form-control'>\";\n \twhile (list($tool_name, $tool_url) = each($array_tools)) \n\t{\n\t\techo \"<OPTION value='$tool_url'>$tool_name</OPTION>\";\n\t}\n\techo \"</SELECT>\";\n}\n\n// Display min and max port value for show port tool\nfunction get_toolport_ports(){\n\tglobal $default_minport;\n\tglobal $default_maxport;\n\t\n\techo \"<label>Port min - Port max</label>\";\n\techo \"<div class='row'><div class='col-md-4'><input id='min_port' class='form-control' type=text name='min_port' value=$default_minport size=8></div>\";\n\techo \"<div class='col-md-4'><input id='max_port' class='form-control' type=text name='max_port' value=$default_maxport size=8></div></div>\";\n}\n\n// Display User list\nfunction get_user_listbox(){\n\techo \"<h2>Select user : </h2>\";\n        global $database_eonweb;\n\n        $result=sqlrequest($database_eonweb,\"SELECT DISTINCT user_name,user_id,group_id,user_descr FROM users ORDER BY user_name\");\n        print \"<SELECT name='users_list' class='select' size=15>\";\n        while ($line = mysqli_fetch_array($result))\n        {\n                print \"<OPTION value='$line[1]'>$line[0] : $line[3]</OPTION>\";\n        }\n        print \"</SELECT>\";\n}\n\n// Retrive form data\nfunction retrieve_form_data($field_name,$default_value){\n\tif (!isset ($_GET[$field_name]))\n\t\tif (!isset ($_POST[$field_name]))\n\t\t\treturn $default_value;\n\t\telse\n\t\t\treturn $_POST[$field_name];\t\n\telse \n\t\treturn $_GET[$field_name];\n}\n\n// Delete accents\nfunction stripAccents($str, $charset='utf-8'){\n    $str = htmlentities($str, ENT_NOQUOTES, $charset);\n\n    $str = preg_replace('#\\&([A-za-z])(?:acute|cedil|circ|grave|ring|tilde|uml)\\;#', '\\1', $str);\n    $str = preg_replace('#\\&([A-za-z]{2})(?:lig)\\;#', '\\1', $str); \n    $str = preg_replace('#\\&[^;]+\\;#', '', $str); \n\n    return $str;\n}\n\n// Add Logs\nfunction logging($module,$command,$user=false){\n\tglobal $database_eonweb;\n\tglobal $dateformat;\n\tif($user)\n\t\tsqlrequest($database_eonweb,\"insert into logs values ('','\".time().\"','$user','$module','$command','\".$_SERVER[\"REMOTE_ADDR\"].\"');\");\n\telseif(isset($_COOKIE['user_name']))\n\t\tsqlrequest($database_eonweb,\"insert into logs values ('','\".time().\"','\".$_COOKIE['user_name'].\"','$module','$command','\".$_SERVER[\"REMOTE_ADDR\"].\"');\");\n}\n\n// Time\nfunction getmtime(){\n  \n    $temps = microtime();\n    $temps = explode(' ', $temps);\n    return $temps[1] + $temps[0];\n \n}\n\n// Get the informations of nagios' config's file.\nfunction getBpProcess(){\n\t\n\tglobal $path_nagiosbpcfg ;\n\tglobal $path_nagiosbpcfg_lock ;\n\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file\n    fputs($fp,getmypid());\n    fclose($fp);\n\n    $tabProcess = array() ;\n\t$lines = file($path_nagiosbpcfg);\n\tif (!$lines) {\n\t\tunlink($path_nagiosbpcfg_lock);\t//Unlock the file\n\t\tmessage(2,$path_nagiosbpcfg,\"critical\");\n\t}\n\tforeach( $lines as $line) {\n\t\t\n\t\tif ( trim($line) == \"# Fin def\") {\t//End of definition\n\t\t\t$tabProcess[] = $tabProp ;\n\t\t\t$tabProp = null ;\n\t\t}\n\t\telseif ( preg_match(\"/^# (ET|OU|MIN)$/\", $line, $match)) {\n\t\t\t$tabProp['type'] = $match[1];\t//Get the type of the process\n\t\t}\n\t\telseif ( preg_match(\"/^display (\\d)*/\", $line, $match)) {\t//Get the prirority\n\t\t\t$tabProp['prio'] = $match[1] ;\n\t\t\t$tab = explode(\";\",$line);\n\t\t\t$tabProp['pnom'] = $tab[2];\n\t\t}\n\t\telseif ( strpos($line,\"info_url\") !== false) {\t//Get the link\n\t\t\t$tab = explode(\";\", $line);\n\t\t\t$tabProp['url'] = $tab[count($tab)-1] ;\n\t\t}\n\t\telseif ( strpos($line,\"external_info\") !== false) {\t//Get the command\n\t\t\t$tab = explode(\";\", $line);\n\t\t\t$tabProp['cmd'] = $tab[count($tab)-1] ;\n\t\t}\n\t\telseif ( strpos($line,\"=\") !== false) {\t//Get the name, the minimun, and the services\n\t\t\t$tab = explode(\"=\", $line);\n\t\t\t$tabProp['nom'] = trim($tab[0]);\n\t\t\tif ($tabProp['type'] == \"MIN\") {\n\t\t\t\t$tabProp['min'] = (int)trim($tab[1]);\n\t\t\t\t$tab = explode(\":\",$tab[1]);\n\t\t\t\t$tabProp['serv'] = $tab[1];\n\t\t\t}\n\t\t\telse $tabProp['serv'] = $tab[1];\n\t\t}\n\t}\n\n\tunlink($path_nagiosbpcfg_lock);\t//Unlock the file\n\treturn $tabProcess ;\n}\n\n// Wait the end of modification of a file\nfunction wait($file){\n\t$retry = 0 ;\n\n\twhile (file_exists($file)){\n\t\tif($retry>20) { die (\"$file is already in use!\"); }\n        $retry++;\n        sleep(1);\n\t}\n}\n\n// Insert a value in an array\nfunction array_push_after($src,$in,$pos){\n    if(is_int($pos)) $R=array_merge(array_slice($src,0,$pos+1), $in, array_slice($src,$pos+1));\n    else{\n        foreach($src as $k=>$v){\n            $R[$k]=$v;\n            if($k==$pos)$R=array_merge($R,$in);\n        }\n    }return $R;\n}\n\n//Format the nagios.conf file\nfunction formatFile(){\n\tglobal $path_nagiosbpcfg;\n\tglobal $path_nagiosbpcfg_lock;\n\tglobal $database_nagios;\n\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file.\n\tfputs($fp,getmypid());\n\tfclose($fp);\n\n\t$lines = file($path_nagiosbpcfg);\n\t$file[0] = \"# Checked\\n\";\n\tif ( empty($lines) || trim($lines[0]) != \"# Checked\"){\t//Not checked. Let's read it !\n\n\t\twrite_file($path_nagiosbpcfg,array_merge($file,$lines),\"w\",\" : File updated\");\n\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp\");\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp_services\");\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp_links\");\n\t\t$tabName = array();\n\t\t$tabDef = array();\t\t\t\n\n\t\tforeach($lines as $i => $line){\n\t\t\tif ($line[0] == \"#\"){\n\t\t\t\tunset($lines[$i]); continue;\t//A commented line. Delete.\n\t\t\t}\n\t\t\tif (($posComment = strpos($line,\"#\")) !== false){\t//Found a commentary. Delete.\n\t\t\t\t$line = substr($line,0,$posComment);\t\n\t\t\t}\n\t\t\t//No more commentary in the file\n\n\t\t\tif (strpos($line,\"=\") !== false){\t//Found a name\n\t\t\t\t$tab = explode(\"=\",$line);\n\t\t\t\t$tabName[] = trim($tab[0]);\t//Keep the name\n\t\t\t\t$vals = explode(\"=\",$line);\n\t\t\t\t$tabDef[] = $vals[1];\t//Keep the whole line\n\t\t\t\tunset($lines[$i]);\n\t\t\t}\n\t\t}\n\n\t\t//There we got all the names.\n\t\t$serv = null;\n\t\tforeach($tabName as $i => $name){\n\t\t\t$type = $prio = $url = $cmd = $val = $desc = \"\" ;\n\t\t\t//Try to get the type. Default ET\n\t\t\tif ( strpos($tabDef[$i], \":\")){\n\t\t\t\t$vals = explode(\"of:\",$tabDef[$i]);\n\t\t\t\t$val = trim($vals[0]);\n\t\t\t\t$type = \"MIN\";\n\t\t\t\t$serv = $vals[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( strpos($tabDef[$i], \"&\")) $type = \"ET\";\n\t\t\t\telseif ( strpos($tabDef[$i], \"|\")) $type = \"OU\";\n\t\t\t\telse $type = \"ET\";\n\t\t\t\t$serv = $tabDef[$i];\n\t\t\t}\n\t\t\t\n\t\t\tforeach($lines as $j=>$line){\n\t\t\t\tif (strpos($line,\"$name;\") !== false){\t//We found a name\n\t\t\t\t\tif ( preg_match(\"/^display (\\d)+/\", $line,$match)){\n\t\t\t\t\t\t$prio = $match[1];\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$desc = trim($vals[2]);\n\t\t\t\t\t} \n\t\t\t\t\telseif ( strpos($line,\"info_url\") !== false) {\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$url = trim($vals[1]);\n\t\t\t\t\t}\n\t\t\t\t\telseif ( strpos($line,\"external_info\") !== false) {\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$cmd= trim($vals[1]);\n\t\t\t\t\t}\n\t\t\t\t\tunset($lines[$j]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($prio == \"\" ) $prio = \"null\";\n\t\t\tsqlrequest($database_nagios,\"INSERT INTO bp VALUES('$name','$desc','$prio','$type','$cmd','$url','$val','1')\");\n\n\t\t\tswitch ($type){\n\t\t\t\tcase \"ET\": $vals = explode(\"&\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"OU\": $vals = explode(\"|\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"MIN\": $vals = explode(\"+\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tforeach ($vals as $v) {\n\t\t\t\tif ( strpos($v,\";\") !== false ){\n\t\t\t\t\t$val = explode(\";\",$v); $host=trim($val[0]); $service=trim($val[1]);\n\t\t\t\t\tsqlrequest($database_nagios,\"INSERT INTO bp_services VALUES('','$name','$host','$service')\");\n\t\t\t\t}\n\t\t\t\telse sqlrequest($database_nagios,\"INSERT INTO bp_links VALUES('','$name','\".trim($v).\"')\");\n\t\t\t}\n\t\t}\n\t\tmessage(6,\" : Database updated with configuration file\",\"ok\");\n\t}\n\tunlink($path_nagiosbpcfg_lock);\n}\n\n//Write in a file, with error or succes message\nfunction write_file($file,$contenu,$mode,$message = null){\n\tif(is_writable($file)){\n\t\t$error = 0 ;\n\t\tif (!$fconf = fopen($file, $mode)) message(2,$file,\"critical\");\n\t\t\n\t\tif ( is_array($contenu)){\n\t\t\tforeach ($contenu as $line) {\n\t\t\t\tif (fwrite ($fconf, $line) === FALSE) $error = 1 ;\n\t\t\t}\n\t\t}\n\t\telse if (fwrite ($fconf, $contenu) === FALSE) $error = 1 ;\n\n\t\tif ($error) message(3,$file,\"critical\");\n\t\telse if ( $message != null )message(6,$message,\"ok\");\n\t\tfclose ($fconf);\n\t}\n\telse \n\t\tmessage(3,$file,\"critical\");\n}\n\n// MySQL request in php array \nfunction sqlArrayNagios($request){\n\tglobal $database_nagios;\n\t$result = sqlrequest($database_nagios,$request);\n\t$values = array();\n\tfor ($i=0; $i<mysqli_num_rows($result); ++$i) $values[] = mysqli_fetch_assoc($result);\n\treturn $values ;\n}\n\n// NagiosBP file backup\nfunction backup_file($start){\n\tglobal $path_nagiosbpcfg;\n\tglobal $path_nagiosbpcfg_bu;\n\n\tfor ($i = $start; $i > 0; $i--){\n\t\tif ( file_exists($path_nagiosbpcfg_bu.$i)){\n\t\t\tif ( $i == $start) unlink($path_nagiosbpcfg_bu.$i);\n\t\t\telse {\n\t\t\t\trename($path_nagiosbpcfg_bu.$i,$path_nagiosbpcfg_bu.($i+1));\n\t\t\t}\n\t\t}\n\t}\n\tcopy($path_nagiosbpcfg,$path_nagiosbpcfg_bu.'1');\n}\n\n// NagiosBP file creation\nfunction buildFile(){\n\n\tglobal $path_nagiosbpcfg_lock;\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file.\n\tfputs($fp,getmypid());\n\tfclose($fp);\n\n\tglobal $max_bu_file;\n\tbackup_file($max_bu_file);\n\tglobal $path_nagiosbpcfg;\n\t$request = \"SELECT * FROM bp WHERE `name` NOT IN (SELECT bp_name FROM bp_links) AND `is_define`='1'\";\n\t$values = sqlArrayNagios($request);\n\t$prevRequest = str_replace(\"*\",\"name\",$request); \n\n\t$file[] = \"# Checked\";\n\tforeach( $values as $metier){\n\t\t$writenBP[] = $metier['name'];\n\t  \tswitch( $metier['type']) {\n\t   \t\tcase \"ET\" : $sep = \"&\";break;\n\t   \t\tcase \"OU\" : $sep = \"|\";break;\n\t   \t\tcase \"MIN\" : $sep = \"+\";break;\n\t   \t}\n\t   \t$result = sqlArrayNagios(\"SELECT host,service FROM bp_services WHERE bp_name='$metier[name]'\");\n\t   \t$strServ = $string = null;\n\t   \tforeach($result as $serv){\n\t   \t\tif ( is_null($strServ) ) {\n\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t   \t\t\t$strServ = \"$serv[host];$serv[service]\";\n\t   \t\t}\n\t   \t\telse $strServ .= \" $sep $serv[host];$serv[service]\";\n\t   \t}\n\t   \t$string .= $strServ.\"\\n\";\n\t   \tif ( $metier['priority'] != \"null\") $string .= \"display $metier[priority];$metier[name];$metier[description]\\n\";\n\t   \tif ( $metier['command'] != \"\") $string .= \"external_info $metier[name];$metier[command]\\n\";\n\t   \tif ( $metier['url'] != \"\") $string .= \"info_url $metier[name];$metier[url]\\n\";\n\t   \t$file[] = $string;\n    }\n\n\tif ( $values ) build($prevRequest,$file,$writenBP);\n    write_file($path_nagiosbpcfg,$file,\"w\",\" : File updated\");\n    unlink($path_nagiosbpcfg_lock);\n}\n\n// Nagiosbp build\nfunction build($pRequest,&$file,$pWritenBP){\n\n\t$values = sqlArrayNagios($pRequest);\n\tunset($r);\n\tforeach( $values as $v){\n\t\tif ( !isset($r) ) $r = \"SELECT bp_name FROM bp_links WHERE (bp_link='$v[name]' \";\n\t\telse $r .= \" OR bp_link='$v[name]'\";\n\t}\n\t$values = sqlArrayNagios($r.\")\");\n\n\tif ($values){\n\t\tunset($r);\n\t\tforeach ($values as $v) {\n\t\t\tif ( !isset($r) ) $r = \"SELECT * FROM bp WHERE (name='$v[bp_name]' \";\n\t\t\telse $r .= \" OR name='$v[bp_name]'\";\n\t\t}\n\t\t$values = sqlArrayNagios($r.\") AND `is_define`='1'\");\n\t\t/*$request = \"SELECT * FROM bp WHERE `name` IN (SELECT bp_name FROM bp_links WHERE bp_link IN ($pRequest)) AND `is_define`='1'\";\n\t\t$values = sqlArrayNagios($request);\n\t\tsql takes to much time with this type of request. We split it in multiple request instead.*/\n\t\t$prevRequest = str_replace(\"*\",\"name\",$r.\") AND `is_define`='1'\");\n\t\t$writenBP = $pWritenBP;\n\n\n\t\tforeach ($pWritenBP as $r) {\n\t\t\tif ( !isset($reqC)) $reqC = \"SELECT COUNT(bp_name) AS nbr FROM bp_links WHERE (bp_link='$r' \";\n\t\t\telse $reqC .= \" OR bp_link='$r'\";\n\t\t}\n\n\t\tforeach( $values as $metier){\n\t\t\tif (in_array($metier, $pWritenBP)) continue;\n\t\t\t\n\t\t\t$requestC = $reqC.\") AND bp_name='$metier[name]'\";\n\t\t\t$count = sqlArrayNagios($requestC);\n\t\t\t$cnt = sqlArrayNagios(\"SELECT COUNT(bp_name) AS nbr FROM bp_links WHERE bp_name='$metier[name]'\");\n\t\t\t\n\t\t\tif ( $count[0]['nbr'] == $cnt[0]['nbr']){\n\t\t\t\t$writenBP[] = $metier['name'];\n\t\t\t  \tswitch( $metier['type']) {\n\t\t\t   \t\tcase \"ET\" : $sep = \"&\";break;\n\t\t\t   \t\tcase \"OU\" : $sep = \"|\";break;\n\t\t\t   \t\tcase \"MIN\" : $sep = \"+\";break;\n\t\t\t   \t}\n\t\t\t   \t$result = sqlArrayNagios(\"SELECT host,service FROM bp_services WHERE bp_name='$metier[name]'\");\n\t\t\t   \t$strServ = $string = null;\n\n\t\t\t   \tforeach($result as $serv){\n\t\t\t   \t\tif ( is_null($strServ) ) {\n\t\t\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t\t\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t\t\t   \t\t\t$strServ = \"$serv[host];$serv[service]\";\n\t\t\t   \t\t}\n\t\t\t   \t\telse $strServ .= \" $sep $serv[host];$serv[service]\";\n\t\t\t   \t}\n\t\t\t   \t$result = sqlArrayNagios(\"SELECT bp_link FROM bp_links WHERE bp_name='$metier[name]'\");\n\t\t\t   \tforeach($result as $serv){\n\t\t\t   \t\tif ( is_null($strServ) ) {\n\t\t\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t\t\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t\t\t   \t\t\t$strServ = \"$serv[bp_link]\";\n\t\t\t   \t\t}\n\t\t\t   \t\telse $strServ .= \" $sep $serv[bp_link]\";\n\t\t\t   \t}\n\t\t\t   \t$string .= $strServ.\"\\n\";\n\t\t\t   \tif ( $metier['priority'] != \"null\") $string .= \"display $metier[priority];$metier[name];$metier[description]\\n\";\n\t\t\t   \tif ( $metier['command'] != \"\") $string .= \"external_info $metier[name];$metier[command]\\n\";\n\t\t\t   \tif ( $metier['url'] != \"\") $string .= \"info_url $metier[name];$metier[url]\\n\";\n\t\t\t   \t$file[] = $string;\n\t\t\t}\n\t    }\n\n\t    build($prevRequest,$file,$writenBP);\n\t}\n}\n\n// Ldap escape special caracters\nfunction ldap_escape($str, $login=false, $escape=false){\n\n\t$str = trim($str);\n\tif ( $login ) {\n\t\t$search = array(\"\\\\\\\\\",'\"','+','>','<');\n\t\t$replace = array(\"\\\\\",'\\\"','\\\\2B','\\>','\\<');\n\t} else {\n\t\t$search = array(\"\\\\\",\"'\",'\"');\n\t\t$replace = array(\"\\\\\\\\\",\"\\'\",'\\\"');\n\t}\n\t\n\t$str = str_replace($search, $replace, $str);\n\tif ( $escape ) { $str = str_replace(\"\\\\\", \"\\\\\\\\\", $str); }\n\t\n\treturn $str;\n\n}\n\n// User creation\nfunction insert_user($user_name, $user_descr, $user_group, $user_password1, $user_password2, $user_type, $user_location, $user_mail, $user_limitation, $message, $in_nagvis = false, $in_cacti = false, $nagvis_group = false, $user_language = false, $theme = false){\n\tglobal $database_host;\n\tglobal $database_cacti;\n\tglobal $database_username;\n\tglobal $database_password;\n\n\tglobal $database_eonweb;\n\tglobal $database_lilac;\n\t$user_id=null;\n\n\t// Check if user exist\n\t$user_exist=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT count('user_name') from users where user_name='$user_name';\"),0);\n\n\t// Check user descr\n\tif($user_descr==\"\")\n\t\t$user_descr=$user_name;\n\n\tif($user_location != \"\" && $user_location != null){\n\t\tif( strpos($user_location, \" -- \") !== false && strpos($user_location, \"|\") !== false ){\n\t\t\t$user_location_parts = explode(\" -- \", $user_location);\n\t\t\t$user_loc = explode(\"|\", $user_location_parts[1]);\n\t\t\t$user_dn_name = $user_loc[0];\n\t\t\t$user_name = $user_dn_name;\n\t\t\t$user_location = $user_loc[1];\n\t\t}\n\t\telse{\n\t\t\t$user_location = $user_location;\n\t\t}\n\t}\n\t\n\tif (($user_name != \"\") && ($user_name != null) && ($user_exist == 0)) {\n\t\tif (($user_password1 != \"\") && ($user_password1 != null) && ($user_password1 == $user_password2)) {\n\t\t\t$user_password = md5($user_password1);\n\t\t\t\n\t\t\t// Insert into eonweb\n\t\t\tsqlrequest(\"$database_eonweb\",\"INSERT INTO users (user_name,user_descr,group_id,user_passwd,user_type,user_location,user_limitation,user_language,theme) VALUES('$user_name', '$user_descr', '$user_group', '$user_password', '$user_type', '$user_location', '$user_limitation', '$user_language', '$theme')\");\n\t\t\t$user_id=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT user_id FROM users WHERE user_name='$user_name'\"),0,\"user_id\");\n\t\t\t$group_name=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT group_name FROM groups WHERE group_id='$user_group'\"),0,\"group_name\");\n\n\t\t\t// Insert into lilac\n\t\t\t$lilac_period=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_timeperiod limit 1\"),0,\"id\");\n\t\t\t\n\t\t\trequire_once('/srv/eyesofnetwork/lilac/includes/config.inc');\n\t\t\t$contact_array = array(\n\t\t\t\t\"contact_name\"=>$user_name,\n\t\t\t\t\"alias\"=>$user_descr,\n\t\t\t\t\"email\"=>$user_mail,\n\t\t\t\t\"host_notifications_enabled\"=>1,\n\t\t\t\t\"service_notifications_enabled\"=>1,\n\t\t\t\t\"host_notification_period\"=>$lilac_period,\n\t\t\t\t\"service_notification_period\"=>$lilac_period,\n\t\t\t\t\"host_notification_on_down\"=>1,\n\t\t\t\t\"host_notification_on_unreachable\"=>1,\n\t\t\t\t\"host_notification_on_recovery\"=>1,\n\t\t\t\t\"host_notification_on_flapping\"=>1,\n\t\t\t\t\"service_notification_on_warning\"=>1,\n\t\t\t\t\"service_notification_on_unknown\"=>1,\n\t\t\t\t\"service_notification_on_critical\"=>1,\n\t\t\t\t\"service_notification_on_recovery\"=>1,\n\t\t\t\t\"service_notification_on_flapping\"=>1,\n\t\t\t\t\"can_submit_commands\"=>1,\n\t\t\t\t\"retain_status_information\"=>1,\n\t\t\t\t\"retain_nonstatus_information\"=>1,\n\t\t\t\t\"host_notification_on_scheduled_downtime\"=>1\n\t\t\t);\n\t\t\t$lilac->add_contact($contact_array);\n\n\t\t\t// Lilac contact_group_member\n\t\t\t$lilac_contactgroupid=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_contact_group WHERE name='$group_name'\"),0,\"id\");\n\t\t\t$lilac_contactid=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_contact where name='$user_name'\"),0,\"id\");\n\t\t\tif($lilac_contactgroupid!=\"\" and $lilac_contactid!=\"\" and $user_limitation!=\"1\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_group_member (contactgroup, contact) VALUES ('$lilac_contactgroupid', '$lilac_contactid')\");\n\n\t\t\t// Insert into nagvis\n\t\t\tif($in_nagvis == \"yes\"){\n\t\t\t\t$bdd = new PDO('sqlite:/srv/eyesofnetwork/nagvis/etc/auth.db');\n\n\t\t\t\t$req = $bdd->query(\"SELECT count(*) FROM users WHERE name = '$user_name'\");\n\t\t\t\t$nagvis_user_exist = $req->fetch();\n\n\t\t\t\tif ($nagvis_user_exist[\"count(*)\"] == 0){\n\t\t\t\t\t// this is nagvis default salt for password encryption security\n\t\t\t\t\t$nagvis_salt = '29d58ead6a65f5c00342ae03cdc6d26565e20954';\n\t\t\t\t\t\n\t\t\t\t\t// insert user in nagvis SQLite DB\n\t\t\t\t\t$sql = \"INSERT INTO users (name, password) VALUES ('$user_name', '\".sha1($nagvis_salt.$user_password1).\"')\";\n\t\t\t\t\t$bdd->exec($sql);\n\n\t\t\t\t\t// insert user's right as \"Guest\" by default\n\t\t\t\t\t$sql = \"SELECT userId FROM users WHERE name = '$user_name'\";\n\t\t\t\t\t$req = $bdd->query($sql);\n\t\t\t\t\t$result = $req->fetch();\n\t\t\t\t\t$nagvis_id = $result['userId'];\n\n\t\t\t\t\t$sql = \"INSERT INTO users2roles (userId, roleId) VALUES ($nagvis_id, $nagvis_group)\";\n\t\t\t\t\t$bdd->exec($sql);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Insert into cacti\n\t\t\tif($in_cacti == \"yes\"){\n\t\t\t\t$bdd = new PDO('mysql:host='.$database_host.';dbname='.$database_cacti, $database_username, $database_password);\n\t\t\t\t$req = $bdd->query(\"SELECT count(*) FROM user_auth WHERE username='$user_name'\");\n\t\t\t\t$cacti_user_exist = $req->fetch();\n\t\t\t\tif ($cacti_user_exist[\"count(*)\"] == 0){\n\t\t\t\t\t$bdd->exec(\"INSERT INTO user_auth (username,password,realm,full_name,show_tree,show_list,show_preview,graph_settings,login_opts,policy_graphs,policy_trees,policy_hosts,policy_graph_templates,enabled) VALUES ('$user_name','',2,'$user_descr','on','on','on','on',3,2,2,2,2,'on')\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Messages\n\t\t\tlogging(\"admin_user\",\"INSERT : $user_name $user_descr $user_limitation $user_group $user_type $user_location\");\n\t\t\tif($message){ message(8,\" : User Inserted\",'ok'); }\n\n\t\t\t// Lilac contact_commands\n\t\t\t$lilac_contact_hcommand=mysqli_result(sqlrequest(\"$database_lilac\",\"select id from nagios_command where name like 'notify-by-email-host'\"),0,\"id\");\n\t\t\t$lilac_contact_scommand=mysqli_result(sqlrequest(\"$database_lilac\",\"select id from nagios_command where name like 'notify-by-email-service'\"),0,\"id\");\n\t\t\tif($lilac_contactid!=\"\" and $lilac_contact_hcommand!=\"\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_notification_command (contact_id,command,type) values ('$lilac_contactid','$lilac_contact_hcommand','host')\");\n\t\t\telseif($lilac_contact_hcommand==\"\")\n\t\t\t\tmessage(8,\" : Verify contact 'notify-by-email-host' command in nagios configurator\",'warning');\n\t\t\tif($lilac_contactid!=\"\" and $lilac_contact_scommand!=\"\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_notification_command (contact_id,command,type) values ('$lilac_contactid','$lilac_contact_scommand','service')\");\n\t\t\telseif($lilac_contact_scommand==\"\")\n\t\t\t\tmessage(8,\" : Verify contact 'notify-by-email-service' command in nagios configurator\",'warning');\n\t\t}\n\t\telse\n\t\t\tmessage(8,\" : Passwords do not match or are empty\",'warning');\n\t}\n\telseif($user_exist != 0 )\n\t\tmessage(8,\" : User $user_name already exists\",'warning');\n\telse\n\t\tmessage(8,\" : User name can not be empty\",'warning');\n\treturn $user_id;\n}\n\n// \"mysqli\" version of mysql_result\nfunction mysqli_result($res, $row, $field=0){\n    $res->data_seek($row);\n\tif(gettype($field) == \"string\"){\n\t\t$datarow = $res->fetch_assoc();\n\t}\n    else{\n\t\t$datarow = $res->fetch_array();\n\t}\n    return $datarow[$field];\n}\n\n// get traduction words\nfunction getLabel($reference){\n\n        global $dictionnary;\n        global $path_messages;\n        global $path_messages_custom;\n        global $t;\n\n        // Load dictionnary if not isset\n        if(!isset($t)) {\n                $t = new Translator();\n                $t->initFile($path_messages,$path_messages_custom);\n                $dictionnary = $t->createPHPDictionnary();\n        }\n\n        // Display dictionnary reference if isset or reference\n        if(isset($dictionnary[$reference])) {\n                $label = $dictionnary[$reference];\n        }\n        else {\n                $label = $reference;\n        }\n\n        return $label;\n\n}\n\n// get default page\nfunction getDefaultPage($usrlimit=0){\n\n\tglobal $t;\n\tglobal $defaultpage;\n\tglobal $path_frame;\n\tglobal $path_menu_limited;\n\tglobal $path_menu_limited_custom;\n\tglobal $path_menus;\n\tglobal $path_menus_custom;\n\n\t// load dictionnary if not isset\n\tif(!isset($t)) {\n\t\t$t = new Translator();\n\t}\n\t\n\t// get json file\n\tif(isset($_COOKIE[\"user_limitation\"])) { $usrlimit = $_COOKIE[\"user_limitation\"]; }\n\tif($usrlimit == 1){\n\t\t$file=$t->getFile($path_menu_limited, $path_menu_limited_custom);\n\t\t$json_content = file_get_contents($file);\n\t\t$links = json_decode($json_content, true);\n\t\tforeach ($links[\"link\"] as $link) {\n\t\t\tif(isset($link[\"default\"])) {\n\t\t\t\tif( $link[\"default\"] != null ){\n\t\t\t\t\tif($link[\"target\"]==\"frame\") { $link[\"url\"]=$path_frame.urlencode($link['url']); }\n\t\t\t\t\t$defaultpage = $link[\"url\"];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} \n\t\n\treturn $defaultpage;\n\n}\n\n// get frame url\nfunction getFrameURL($url){\n\tglobal $path_frame;\n\t\n\t$frame_url = $path_frame.urlencode($url);\n\treturn $frame_url;\n}\n\nfunction pieChart($queue, $field, $search, $period)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tif($queue == \"active\"){ global $ged_active_intervals; extract($ged_active_intervals); }\n\telse{ global $ged_history_intervals; extract($ged_history_intervals); }\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\t// set the period clause (according to checkboxes checked)\n\t$period_clause = \"\";\n\tif( isset($period) && $period != \"\" )\n\t{\n\t\tswitch($period)\n\t\t{\n\t\t\tcase \"day\": $period_clause = \" AND o_sec >= $day\"; break;\n\t\t\tcase \"week\": $period_clause = \" AND o_sec >= $week AND o_sec < $day\"; break;\n\t\t\tcase \"month\": $period_clause = \" AND o_sec >= $month AND o_sec < $week\"; break;\n\t\t\tcase \"year\": $period_clause = \" AND o_sec >= $year AND o_sec < $month\"; break;\n\t\t}\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($array_ged_states as $key => $state)\n\t\t{\n\t\t\tif($key == \"ok\")\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif( !isset($array_result[\"$key\"]) ){\n\t\t\t\t$array_result[\"$key\"] = 0;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"'\";\n\t\t\t$sql .= $search_clause;\n\t\t\t$sql .= $period_clause;\n\t\t\t\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t$result = mysqli_fetch_row($result);\n\t\t\t$array_result[\"$key\"] += $result[0];\n\t\t}\n\t}\n\treturn json_encode($array_result);\n}\n\nfunction barChart($queue, $field, $search)\n{\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tif($queue == \"active\"){ global $ged_active_intervals; extract($ged_active_intervals); }\n\telse{ global $ged_history_intervals; extract($ged_history_intervals); }\n\t\n\t\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t$array_result = array();\n\t$array_now_day = array();\n\t$array_day_week = array();\n\t$array_week_month = array();\n\t$array_month_year = array();\n\t$array_year_more = array();\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($array_ged_states as $key => $state)\n\t\t{\n\t\t\tif($key == \"ok\")\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif( !isset($array_now_day[\"$key\"]) ){$array_now_day[\"$key\"] = 0;}\n\t\t\tif( !isset($array_day_week[\"$key\"]) ){$array_day_week[\"$key\"] = 0;}\n\t\t\tif( !isset($array_week_month[\"$key\"]) ){$array_week_month[\"$key\"] = 0;}\n\t\t\tif( !isset($array_month_year[\"$key\"]) ){$array_month_year[\"$key\"] = 0;}\n\t\t\tif( !isset($array_year_more[\"$key\"]) ){$array_year_more[\"$key\"] = 0;}\n\t\t\t$sql = \"\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $day\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $week AND o_sec < $day\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $month AND o_sec < $week\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $year AND o_sec < $month\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec < $year\".$search_clause;\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t\n\t\t\t$cpt = 0;\n\t\t\twhile( $row = mysqli_fetch_row($result) )\n\t\t\t{\n\t\t\t\tswitch($cpt)\n\t\t\t\t{\n\t\t\t\t\tcase 0: $array_now_day[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 1: $array_day_week[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 2: $array_week_month[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 3: $array_month_year[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 4: $array_year_more[\"$key\"] += $row[0]; break;\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t}\n\t}\n\tarray_push($array_result, $array_now_day);\n\tarray_push($array_result, $array_day_week);\n\tarray_push($array_result, $array_week_month);\n\tarray_push($array_result, $array_month_year);\n\tarray_push($array_result, $array_year_more);\n\t\n\treturn json_encode($array_result);\n}\n\nfunction slaPieChart($field, $search, $period)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $ged_sla_intervals;\n\tglobal $ged_history_intervals;\n\textract($ged_sla_intervals);\n\textract($ged_history_intervals);\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\t// set the period clause (according to checkboxes checked)\n\t$period_clause = \"\";\n\tif( isset($period) && $period != \"\" )\n\t{\n\t\tswitch($period)\n\t\t{\n\t\t\tcase \"day\": $period_clause = \" AND o_sec >= $day\"; break;\n\t\t\tcase \"week\": $period_clause = \" AND o_sec >= $week AND o_sec < $day\"; break;\n\t\t\tcase \"month\": $period_clause = \" AND o_sec >= $month AND o_sec < $week\"; break;\n\t\t\tcase \"year\": $period_clause = \" AND o_sec >= $year AND o_sec < $month\"; break;\n\t\t}\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($ged_sla_intervals as $key => $value)\n\t\t{\n\t\t\tif( !isset($array_result[\"$key\"]) ){\n\t\t\t\t$array_result[\"$key\"] = 0;\n\t\t\t}\n\t\t\t\n\t\t\t$sla_clause = \"\";\n\t\t\tswitch($key)\n\t\t\t{\n\t\t\t\tcase \"first\" : $sla_clause = \" AND a_sec-o_sec < $first\"; break;\n\t\t\t\tcase \"second\": $sla_clause = \" AND a_sec-o_sec >= $first AND a_sec-o_sec < $second\"; break;\n\t\t\t\tcase \"third\" : $sla_clause = \" AND a_sec-o_sec >= $second AND a_sec-o_sec < $third\"; break;\n\t\t\t\tcase \"fourth\": $sla_clause = \" AND a_sec-o_sec >= $third\"; break;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state!='0'\".$sla_clause;\n\t\t\t$sql .= $search_clause;\n\t\t\t$sql .= $period_clause;\n\t\t\t\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t$result = mysqli_fetch_row($result);\n\t\t\t$array_result[\"$key\"] += $result[0];\n\t\t}\n\t}\n\treturn json_encode($array_result);\n}\n\nfunction slaBarChart($field, $search)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tglobal $ged_sla_intervals;\n\tglobal $ged_history_intervals;\n\textract($ged_sla_intervals);\n\textract($ged_history_intervals);\n\t\n\t$array_result = array();\n\t$array_now_day = array();\n\t$array_day_week = array();\n\t$array_week_month = array();\n\t$array_month_year = array();\n\t$array_year_more = array();\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($ged_sla_intervals as $key => $value)\n\t\t{\n\t\t\tif( !isset($array_now_day[\"$key\"]) ){$array_now_day[\"$key\"] = 0;}\n\t\t\tif( !isset($array_day_week[\"$key\"]) ){$array_day_week[\"$key\"] = 0;}\n\t\t\tif( !isset($array_week_month[\"$key\"]) ){$array_week_month[\"$key\"] = 0;}\n\t\t\tif( !isset($array_month_year[\"$key\"]) ){$array_month_year[\"$key\"] = 0;}\n\t\t\tif( !isset($array_year_more[\"$key\"]) ){$array_year_more[\"$key\"] = 0;}\n\t\t\t\n\t\t\tswitch($key)\n\t\t\t{\n\t\t\t\tcase \"first\" : $sla_clause = \" AND a_sec-o_sec < $first\"; break;\n\t\t\t\tcase \"second\": $sla_clause = \" AND a_sec-o_sec >= $first AND a_sec-o_sec < $second\"; break;\n\t\t\t\tcase \"third\" : $sla_clause = \" AND a_sec-o_sec >= $second AND a_sec-o_sec < $third\"; break;\n\t\t\t\tcase \"fourth\": $sla_clause = \" AND a_sec-o_sec >= $third\"; break;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $day\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $week AND o_sec < $day\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $month AND o_sec < $week\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $year AND o_sec < $month\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec < $year\".$sla_clause.$search_clause;\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t\n\t\t\t$cpt = 0;\n\t\t\twhile( $row = mysqli_fetch_row($result) )\n\t\t\t{\n\t\t\t\tswitch($cpt)\n\t\t\t\t{\n\t\t\t\t\tcase 0: $array_now_day[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 1: $array_day_week[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 2: $array_week_month[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 3: $array_month_year[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 4: $array_year_more[\"$key\"] += $row[0]; break;\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t}\n\t}\n\tarray_push($array_result, $array_now_day);\n\tarray_push($array_result, $array_day_week);\n\tarray_push($array_result, $array_week_month);\n\tarray_push($array_result, $array_month_year);\n\tarray_push($array_result, $array_year_more);\n\t\n\treturn json_encode($array_result);\n}\n\n# Convert seconds to human readable\nfunction strTime($s) {\n\n\t$d = intval($s/86400);\n\t$s -= $d*86400;\n\t$h = intval($s/3600);\n\t$s -= $h*3600;\n\t$m = intval($s/60);\n\t$s -= $m*60;\n\n\tif($d<10) $d=\"0\".$d;\n\tif($h<10) $h=\"0\".$h;\n\tif($m<10) $m=\"0\".$m;\n\tif($s<10) $s=\"0\".$s;\n\n\tif ($d) $str = $d . 'd ';\n\telse $str = '00d ';\n\tif ($h) $str .= $h . 'h ';\n\telse $str .= '00h ';\n\tif ($m) $str .= $m . 'm ';\n\telse $str .= '00m ';\n\tif ($s) $str .= $s . 's';\n\telse $str .= '00s';\n\n\treturn $str;\n\n}\n\n# Get eon config values\nfunction getEonConfig($name,$type=false)\n{\n\n\tglobal $database_eonweb;\n\tglobal ${$name};\n\t\n\t// mysql request\t\n\t$sql = \"SELECT value FROM configs WHERE name='\".$name.\"'\";\n\t$value = sqlrequest($database_eonweb, $sql);\n\t$result = mysqli_fetch_row($value);\n\t\n\t// return value if exists\n\tif(count($result)==0) {\n\t\treturn ${$name};\n\t} elseif($type==\"array\") {\n\t\treturn explode(\",\",$result[0]);\n\t} else {\n\t\treturn $result[0];\n\t}\n\t\n}\n\nfunction startSessionTheme(){\n\tglobal $database_eonweb;\n\n\tif(isset($_COOKIE[\"user_name\"])){\n\n\t\t\t$conn = connexionDB($database_eonweb);\n\t\t\t$sql = $conn->prepare(\"SELECT `theme` FROM users WHERE user_name = :userName\");\n\t\t\t$sql->bindParam(\"userName\", $_COOKIE[\"user_name\"]);\n\t\t\t$sql->execute();\n\t\t\t$result = $sql->fetch();\n\t\t\t$conn = null;\n\t\t\t$sql = null;\n\t\t\t$theme_value = $result[\"theme\"];\n\t\t\tif($theme_value == \"Default\"){\n\t\t\t\t$conn = connexionDB($database_eonweb);\n\t\t\t\t$sql = \"SELECT value FROM configs WHERE name = 'theme'\";\n\t\t\t\t$result = $conn->query($sql);\n\t\t\t\t$data = $result->fetch();\n\t\t\t\t$theme_value = $data[\"value\"];\n\t\t\t\t$conn = null;\n\t\t\t\t$sql = null;\n\t\t\t} \n\n\t\t\t$_SESSION[\"theme\"] = $theme_value;\n\n\t} else {\n\t\t$conn = connexionDB($database_eonweb);\n\t\t$sql = \"SELECT value FROM configs WHERE name = 'theme'\";\n\t\t$result = $conn->query($sql);\n\t\t$data = $result->fetch();\n\t\t$theme_value = $data[\"value\"];\n\t\t$conn = null;\n\t\t$sql = null;\n\t\t$_SESSION[\"theme\"] = $theme_value;\n\t}\n}\n\nfunction checkUpdateDB(){\n\tglobal $version;\n\tglobal $database_eonweb;\n\tglobal $database_password;\n\tglobal $path_eon;\n\n\t$database_username=\"root\";\n\t$dir=$path_eon.\"conf/eonweb/updates/\";\n\n\t$version_sql = sqlrequest($database_eonweb,\"SELECT count(value) as value FROM configs WHERE name='version'\");\n\tif(mysqli_result($version_sql,0,\"value\") == 0){\n\t\t$version_sql = sqlrequest($database_eonweb,\"INSERT INTO configs (name, value) VALUES('version', '\".$version.\"')\");\n\n\t\t// execution de tous les .sql jusqu'\u00e0 la version donn\u00e9 dans config\n\t\t$SQL_Files = array_slice(scandir($dir), 2);\n\t\tusort($SQL_Files, 'version_compare');\n\n\t\tforeach($SQL_Files as $file){\n\t\tif(version_compare(rtrim($file,'.sql'), $version) >= 0) {\n\t\t\texec(\"mysql -f -u $database_username --password=$database_password < $dir$file\");\n\t\t}\n\t}\n\t}else{\n\t\t$versionBD = mysqli_result(sqlrequest($database_eonweb,\"SELECT value FROM configs WHERE name='version'\"),0,\"value\");\n\n\t\t// execution des .sql entre version en BD et celle config\n\t\t$SQL_Files = array_slice(scandir($dir), 2);\n\t\tusort($SQL_Files, 'version_compare');\n\t\t$version=rtrim(end($SQL_Files),'.sql');\n\n\t\tif($versionBD!=$version) {\n\t\t\tforeach($SQL_Files as $file){\n\t\t\t\tif(version_compare(rtrim($file,'.sql'), $versionBD) >= 0) {\n\t\t\t\t\texec(\"mysql -f -u $database_username --password=$database_password < $dir$file\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tsqlrequest($database_eonweb,\"UPDATE configs SET value='$version' WHERE name='version'\");\n\t\t}\n\t}\n}\n\n?>\n"], "fixing_code": ["<?php\n/*\n#########################################\n#\n# Copyright (C) 2017 EyesOfNetwork Team\n# DEV NAME : Jean-Philippe LEVY\n# VERSION : 5.3\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\nsession_start();\n# Internationalization\ninclude(\"classes/Translator.class.php\");\n\n# Actions\ninclude(\"classes/Actions.class.php\");\t\nif(file_exists(dirname(__FILE__).\"/classes/Custom.Actions.class.php\")) { \n\tinclude(\"classes/Custom.Actions.class.php\"); \n}\n$CustomActions = class_exists(\"CustomActions\") ? new CustomActions() : new Actions();\n\n// Display Error Message \nfunction message($id, $text, $type){\n\t\n\tglobal $array_msg;\n\t\n\t// Get standard message if exists\n\tif(isset($array_msg[$id])) { $tempid=$array_msg[$id]; } \n\telse { $tempid=\"\"; }\n\t\n\t// Define the message type and icon\n\tswitch($type)\n\t{\n\t\tcase \"critical\":\n\t\t\t$alert_type = \"danger\";\n\t\t\t$alert_icon = \"fa-exclamation-circle\";\n\t\t\tbreak;\n\t\tcase \"warning\":\n\t\t\t$alert_type = \"warning\";\n\t\t\t$alert_icon = \"fa-warning\";\n\t\t\tbreak;\n   \t\tcase \"ok\":\n   \t\t\t$alert_type = \"success\";\n\t\t\t$alert_icon = \"fa-check-circle\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$alert_type = \"info\";\n\t\t\t$alert_icon = \"fa-info-circle\";\n\t\t\tbreak;\n\t}\n\n\t// Display the message\n\techo \"<p class='alert alert-dismissible alert-\".$alert_type.\" fade in'>\n\t\t\t<button type='button' class='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t  <span aria-hidden='true'>&times;</span>\n\t\t\t</button>\n\t\t\t<i class='fa \".$alert_icon.\"'></i> $tempid $text\n\t\t  </p>\";\n}\n\n// Connect to Database\nfunction sqlrequest($database,$sql,$id=false,$prepare=false){\n\n\t// Get the global value\n\tglobal $database_host;\n\tglobal $database_username;\n\tglobal $database_password;\n\n\t$connexion = mysqli_connect($database_host, $database_username, $database_password, $database);\n\tif (!$connexion) {\n\t\techo \"<ul>\";\n\t\techo \"<li class='msg_title'>Alert EyesOfNetwork - Message EON-database connect</li>\";\n\t\techo \"<li class='msg'> Could not connect to database : $database ($database_host)</li>\";\n\t\techo \"</ul>\";\n\t\texit(1);\n\t}\n\n\tif ( $database == \"eonweb\" ) {\n\t\t// Force UTF-8\n\t\tmysqli_query($connexion, \"SET NAMES 'utf8'\");\n\t}\n\t\n\tif(is_array($prepare)) {\n\t\t$stmt = mysqli_prepare($connexion,$sql);\n\t\t\n\t\tif(isset($prepare[0]) && isset($prepare[1])) {\n\t\t\t$ref = new ReflectionClass('mysqli_stmt');\n\t\t\t$method = $ref->getMethod(\"bind_param\");\n\t\t\t$method->invokeArgs($stmt,$prepare);\n\t\t}\n\t\t\n\t\tmysqli_stmt_execute($stmt);\n\t\t$result = mysqli_stmt_get_result($stmt);\n\t} else {\n\t\t$result=mysqli_query($connexion, \"$sql\");\n\t}\n\t\t\n\tif($id==true)\n\t\t$result=mysqli_insert_id($connexion);\n\t\t\n\tmysqli_close($connexion);\n\treturn $result;\n}\n\nfunction connexionDB($database){\n    global $database_host;\n    global $database_username;\n    global $database_password;\n    try {\n        $dbh = new PDO(\"mysql:host=$database_host;dbname=$database\", $database_username, $database_password);\n        return $dbh;\n    } catch (PDOException $e) {\n        print \"Erreur !: \" . $e->getMessage() . \"<br/>\";\n        die();\n    }\n}\n\n// Display array value\nfunction display_value($value, $key){\n\techo \"$value\\n\";\n}\n\n// Function Edit and Modify a file\nfunction filemodify($path,$get=false){\n\tif(is_writable($path)) {\n\t\n\t\t// Test If Update or Display.\n\t\tif (isset($_POST['maj'])) {\n\t\t\tif (!$fconf = fopen($path, \"w\")) message(2,$path,\"critical\");\n\t\t\t// Write the change\n\t\t\tif (fwrite ($fconf, str_replace(\"\\r\\n\", \"\\n\", $_POST['maj'])) === FALSE) message(3,$path,\"critical\");\n\t\t\telse { \n\t\t\t\tmessage(6,\" : File updated\",\"ok\");\n\t\t\t}\n\t\t\tfclose ($fconf);\n\t\t\tif (!$fconf = fopen($path, \"r\")) message(2,$path,\"critical\");\n\t\t}\n\t\telse if (!$fconf = fopen($path, \"r\")) message(2,$path,\"critical\");\n\n\t\t// Display the Text Area and button\n\t\techo \"<form method='post' action='./index.php\";\n\t\tif($get)\n\t\t\techo \"?file=$get\";\n\t\techo \"'>\";\n\t\techo '<div class=\"form-group\">';\n\t\techo \"<textarea class='form-control textarea' cols='100' rows='20' name='maj' scrolling='no'>\";\n\t\t\tprint file_get_contents($path);\n\t\techo \"</textarea>\";\n\t\techo '</div>';\n\t\techo '<div class=\"form-group\">';\n\t\techo \"<input class='btn btn-primary' type='submit' value='\".getLabel(\"action.update\").\"'>\";\n\t\techo '</div>';\n\t\techo \"</form>\";\n\t\tfclose ($fconf);\n\t}\n\telse message(3,$path,\"critical\");\n}\n\n// Host List form Nagios\nfunction get_host_list_from_nagios($field=false, $queue = false){\n\tglobal $database_lilac;\n\tglobal $database_ged;\n\t$hosts=array();\n\n\tif($field && $field != 'owner'){\n\t\tswitch ($field) {\n\t\t\tcase 'service': $column = 'description'; break;\n\t\t\tcase 'description': echo json_encode($hosts); return; break;\n\t\t\tdefault: $column = 'name'; break;\n\t\t}\n\t\t$request=\"SELECT DISTINCT $column FROM nagios_$field ORDER BY $column\";\n\t\t$db = $database_lilac;\n\t} elseif ($field && $field === 'owner') {\n\t\t$request=\"SELECT DISTINCT owner FROM nagios_queue_$queue WHERE owner != '' ORDER BY owner\";\n\t\t$db = $database_ged;\n\t}\n\telse {\n\t\t$request=\"SELECT name FROM nagios_host\n\t\tUNION SELECT name from nagios_hostgroup\n\t\tUNION SELECT DISTINCT description from nagios_service\n\t\tUNION SELECT name from nagios_service_group\n\t\tORDER BY name\";\n\t\t$db = $database_lilac;\n\t}\n\n\t$result=sqlrequest($db,$request);\n \twhile ($line = mysqli_fetch_array($result)){ \n\t\tarray_push($hosts, $line[0]);\n\t}\n\techo json_encode($hosts);\n}\n\n// Host and Address list from nagios. //TODO send the adress\nfunction get_host_list(){\n\tglobal $database_lilac;\n\t$hosts=array();\n\n\t$result=sqlrequest($database_lilac,\"SELECT name,address FROM nagios_host ORDER BY name\");\n\n \twhile ($line = mysqli_fetch_array($result)){ \n\t\t$hosts[]=$line[0];\n\t\t$hosts[]=$line[1];\n\t}\n\techo json_encode($hosts);\n}\n\n// Host and Address listbox from nagios. //TODO send the adress\nfunction get_host_listbox_from_nagios(){\n\tglobal $database_lilac;\n\t\n\t// create input autocomplete with all nagios host values\n\techo \"<label>Host</label>\";\n\t$result=sqlrequest($database_lilac,\"SELECT DISTINCT name FROM nagios_host UNION ALL SELECT DISTINCT address FROM nagios_host\");\n\t$input = \"<input id='host_list' class='form-control' type='text' name='host_list' onFocus='$(this).autocomplete({source: [\";\n\twhile ($line = mysqli_fetch_array($result))\n\t{\n\t\t$input .= '\"'.$line[0].'\",';\n\t}\n\t$input = rtrim($input, \",\");\n\t$input .= \"]})'>\";\n\t\n\techo '<div class=\"input-group\">';\n\techo \t$input;\n\techo \t'<span class=\"input-group-btn\">\n\t\t\t\t<input class=\"btn btn-primary\" type=\"submit\" name=\"run\" value=\"'.getLabel(\"action.run\").'\" >\n\t\t\t</span>\n\t\t\t';\n\techo '</div>';\n}\n\n// Host list from CACTI\nfunction get_title_list_from_cacti(){\n\n\tglobal $database_cacti;\n\n\t$titles=array();\n\t$request=\"SELECT DISTINCT graph_templates_graph.title FROM graph_local,graph_templates_graph WHERE graph_templates_graph.local_graph_id=graph_local.id ORDER BY title\";\n\t$result=sqlrequest($database_cacti,$request);\n\twhile ($line = mysqli_fetch_array($result)){\n\t$line[0]=str_replace(\"|host_description| - \",\"\",$line[0]);\n\t\t$titles[]=$line[0];\n\t}\n\techo json_encode($titles);\n}\n\n// Host listbox from CACTI\nfunction get_host_listbox_from_cacti(){\n\t\n\tglobal $database_cacti;\n\t\n\t$ref = \"\";\n\tif( isset($_GET['host']) ){\n\t\t$ref = $_GET['host'];\n\t}\n\t\n\t$result=sqlrequest($database_cacti,\"SELECT DISTINCT host.id,hostname,description FROM host INNER JOIN graph_local ON host.id = graph_local.host_id ORDER BY hostname ASC\");\n\techo \"<SELECT name='host' class='form-control' size=7>\";\n        while ($line = mysqli_fetch_array($result))\n        {\n\t\t\techo \"<OPTION value='$line[0]' \";\n\t\t\tif($ref == $line[0]){echo 'selected=\"selected\"';}\n\t\t\techo \">&nbsp;$line[1] ($line[2])&nbsp;</OPTION>\";\n        }\n        echo \"</SELECT><br>\";\n}\n\n// system function : CUT\nfunction cut($string, $width, $padding = \"...\"){\n    return (strlen($string) > $width ? substr($string, 0, $width-strlen($padding)).$padding : $string);\n} \n\n// Get graph from CACTI\nfunction get_graph_listbox_from_cacti(){\n\t\n\tglobal $database_cacti;\n\t\n\t$ref = \"\";\n\tif( isset($_GET['graph']) ){\n\t\t$ref = $_GET['graph'];\n\t}\n\t\n\t$result=sqlrequest($database_cacti,\"SELECT DISTINCT graph_templates.id,name FROM graph_templates INNER JOIN graph_local ON graph_local.graph_template_id = graph_templates.id ORDER BY name ASC\");\n\techo \"<SELECT name='graph' class='form-control' size=7>\";\n\twhile ($line = mysqli_fetch_array($result))\n\t{\n\t\techo \"<OPTION value='$line[0]' \";\n\t\tif($ref == $line[0]){echo 'selected=\"selected\"';}\n\t\techo \">&nbsp;$line[1]&nbsp;</OPTION>\";\n\t}\n\techo \"</SELECT><br>\";\n}\n\n// Display TOOL list\nfunction get_tool_listbox(){\n\t// Get the global table\n\tglobal $array_tools;\n\t\n\techo \"<label>\".getLabel(\"label.tool_all.tool\").\"</label>\";\t\n\n\t// Get the first array key\n\treset($array_tools);\n\n\t// Display the list of tool\n\techo \"<SELECT id='tool_list' name='tool_list' class='form-control'>\";\n \twhile (list($tool_name, $tool_url) = each($array_tools)) \n\t{\n\t\techo \"<OPTION value='$tool_url'>$tool_name</OPTION>\";\n\t}\n\techo \"</SELECT>\";\n}\n\n// Display min and max port value for show port tool\nfunction get_toolport_ports(){\n\tglobal $default_minport;\n\tglobal $default_maxport;\n\t\n\techo \"<label>Port min - Port max</label>\";\n\techo \"<div class='row'><div class='col-md-4'><input id='min_port' class='form-control' type=text name='min_port' value=$default_minport size=8></div>\";\n\techo \"<div class='col-md-4'><input id='max_port' class='form-control' type=text name='max_port' value=$default_maxport size=8></div></div>\";\n}\n\n// Display User list\nfunction get_user_listbox(){\n\techo \"<h2>Select user : </h2>\";\n        global $database_eonweb;\n\n        $result=sqlrequest($database_eonweb,\"SELECT DISTINCT user_name,user_id,group_id,user_descr FROM users ORDER BY user_name\");\n        print \"<SELECT name='users_list' class='select' size=15>\";\n        while ($line = mysqli_fetch_array($result))\n        {\n                print \"<OPTION value='$line[1]'>$line[0] : $line[3]</OPTION>\";\n        }\n        print \"</SELECT>\";\n}\n\n// Retrive form data\nfunction retrieve_form_data($field_name,$default_value){\n\tif (!isset ($_GET[$field_name]))\n\t\tif (!isset ($_POST[$field_name]))\n\t\t\treturn $default_value;\n\t\telse\n\t\t\treturn $_POST[$field_name];\t\n\telse \n\t\treturn $_GET[$field_name];\n}\n\n// Delete accents\nfunction stripAccents($str, $charset='utf-8'){\n    $str = htmlentities($str, ENT_NOQUOTES, $charset);\n\n    $str = preg_replace('#\\&([A-za-z])(?:acute|cedil|circ|grave|ring|tilde|uml)\\;#', '\\1', $str);\n    $str = preg_replace('#\\&([A-za-z]{2})(?:lig)\\;#', '\\1', $str); \n    $str = preg_replace('#\\&[^;]+\\;#', '', $str); \n\n    return $str;\n}\n\n// Add Logs\nfunction logging($module,$command,$user=false){\n\tglobal $database_eonweb;\n\tglobal $dateformat;\n\tif($user){\n\t\t$user = htmlspecialchars($user);\n\t\tsqlrequest($database_eonweb,\"insert into logs values ('','\".time().\"','$user','$module','$command','\".$_SERVER[\"REMOTE_ADDR\"].\"');\");\n\t}elseif(isset($_COOKIE['user_name'])){\n\t\t$user = htmlspecialchars($_COOKIE['user_name']);\n\t\tsqlrequest($database_eonweb,\"insert into logs values ('','\".time().\"','\".$user.\"','$module','$command','\".$_SERVER[\"REMOTE_ADDR\"].\"');\");\n\t}\n}\n\n// Time\nfunction getmtime(){\n  \n    $temps = microtime();\n    $temps = explode(' ', $temps);\n    return $temps[1] + $temps[0];\n \n}\n\n// Get the informations of nagios' config's file.\nfunction getBpProcess(){\n\t\n\tglobal $path_nagiosbpcfg ;\n\tglobal $path_nagiosbpcfg_lock ;\n\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file\n    fputs($fp,getmypid());\n    fclose($fp);\n\n    $tabProcess = array() ;\n\t$lines = file($path_nagiosbpcfg);\n\tif (!$lines) {\n\t\tunlink($path_nagiosbpcfg_lock);\t//Unlock the file\n\t\tmessage(2,$path_nagiosbpcfg,\"critical\");\n\t}\n\tforeach( $lines as $line) {\n\t\t\n\t\tif ( trim($line) == \"# Fin def\") {\t//End of definition\n\t\t\t$tabProcess[] = $tabProp ;\n\t\t\t$tabProp = null ;\n\t\t}\n\t\telseif ( preg_match(\"/^# (ET|OU|MIN)$/\", $line, $match)) {\n\t\t\t$tabProp['type'] = $match[1];\t//Get the type of the process\n\t\t}\n\t\telseif ( preg_match(\"/^display (\\d)*/\", $line, $match)) {\t//Get the prirority\n\t\t\t$tabProp['prio'] = $match[1] ;\n\t\t\t$tab = explode(\";\",$line);\n\t\t\t$tabProp['pnom'] = $tab[2];\n\t\t}\n\t\telseif ( strpos($line,\"info_url\") !== false) {\t//Get the link\n\t\t\t$tab = explode(\";\", $line);\n\t\t\t$tabProp['url'] = $tab[count($tab)-1] ;\n\t\t}\n\t\telseif ( strpos($line,\"external_info\") !== false) {\t//Get the command\n\t\t\t$tab = explode(\";\", $line);\n\t\t\t$tabProp['cmd'] = $tab[count($tab)-1] ;\n\t\t}\n\t\telseif ( strpos($line,\"=\") !== false) {\t//Get the name, the minimun, and the services\n\t\t\t$tab = explode(\"=\", $line);\n\t\t\t$tabProp['nom'] = trim($tab[0]);\n\t\t\tif ($tabProp['type'] == \"MIN\") {\n\t\t\t\t$tabProp['min'] = (int)trim($tab[1]);\n\t\t\t\t$tab = explode(\":\",$tab[1]);\n\t\t\t\t$tabProp['serv'] = $tab[1];\n\t\t\t}\n\t\t\telse $tabProp['serv'] = $tab[1];\n\t\t}\n\t}\n\n\tunlink($path_nagiosbpcfg_lock);\t//Unlock the file\n\treturn $tabProcess ;\n}\n\n// Wait the end of modification of a file\nfunction wait($file){\n\t$retry = 0 ;\n\n\twhile (file_exists($file)){\n\t\tif($retry>20) { die (\"$file is already in use!\"); }\n        $retry++;\n        sleep(1);\n\t}\n}\n\n// Insert a value in an array\nfunction array_push_after($src,$in,$pos){\n    if(is_int($pos)) $R=array_merge(array_slice($src,0,$pos+1), $in, array_slice($src,$pos+1));\n    else{\n        foreach($src as $k=>$v){\n            $R[$k]=$v;\n            if($k==$pos)$R=array_merge($R,$in);\n        }\n    }return $R;\n}\n\n//Format the nagios.conf file\nfunction formatFile(){\n\tglobal $path_nagiosbpcfg;\n\tglobal $path_nagiosbpcfg_lock;\n\tglobal $database_nagios;\n\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file.\n\tfputs($fp,getmypid());\n\tfclose($fp);\n\n\t$lines = file($path_nagiosbpcfg);\n\t$file[0] = \"# Checked\\n\";\n\tif ( empty($lines) || trim($lines[0]) != \"# Checked\"){\t//Not checked. Let's read it !\n\n\t\twrite_file($path_nagiosbpcfg,array_merge($file,$lines),\"w\",\" : File updated\");\n\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp\");\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp_services\");\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp_links\");\n\t\t$tabName = array();\n\t\t$tabDef = array();\t\t\t\n\n\t\tforeach($lines as $i => $line){\n\t\t\tif ($line[0] == \"#\"){\n\t\t\t\tunset($lines[$i]); continue;\t//A commented line. Delete.\n\t\t\t}\n\t\t\tif (($posComment = strpos($line,\"#\")) !== false){\t//Found a commentary. Delete.\n\t\t\t\t$line = substr($line,0,$posComment);\t\n\t\t\t}\n\t\t\t//No more commentary in the file\n\n\t\t\tif (strpos($line,\"=\") !== false){\t//Found a name\n\t\t\t\t$tab = explode(\"=\",$line);\n\t\t\t\t$tabName[] = trim($tab[0]);\t//Keep the name\n\t\t\t\t$vals = explode(\"=\",$line);\n\t\t\t\t$tabDef[] = $vals[1];\t//Keep the whole line\n\t\t\t\tunset($lines[$i]);\n\t\t\t}\n\t\t}\n\n\t\t//There we got all the names.\n\t\t$serv = null;\n\t\tforeach($tabName as $i => $name){\n\t\t\t$type = $prio = $url = $cmd = $val = $desc = \"\" ;\n\t\t\t//Try to get the type. Default ET\n\t\t\tif ( strpos($tabDef[$i], \":\")){\n\t\t\t\t$vals = explode(\"of:\",$tabDef[$i]);\n\t\t\t\t$val = trim($vals[0]);\n\t\t\t\t$type = \"MIN\";\n\t\t\t\t$serv = $vals[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( strpos($tabDef[$i], \"&\")) $type = \"ET\";\n\t\t\t\telseif ( strpos($tabDef[$i], \"|\")) $type = \"OU\";\n\t\t\t\telse $type = \"ET\";\n\t\t\t\t$serv = $tabDef[$i];\n\t\t\t}\n\t\t\t\n\t\t\tforeach($lines as $j=>$line){\n\t\t\t\tif (strpos($line,\"$name;\") !== false){\t//We found a name\n\t\t\t\t\tif ( preg_match(\"/^display (\\d)+/\", $line,$match)){\n\t\t\t\t\t\t$prio = $match[1];\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$desc = trim($vals[2]);\n\t\t\t\t\t} \n\t\t\t\t\telseif ( strpos($line,\"info_url\") !== false) {\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$url = trim($vals[1]);\n\t\t\t\t\t}\n\t\t\t\t\telseif ( strpos($line,\"external_info\") !== false) {\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$cmd= trim($vals[1]);\n\t\t\t\t\t}\n\t\t\t\t\tunset($lines[$j]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($prio == \"\" ) $prio = \"null\";\n\t\t\tsqlrequest($database_nagios,\"INSERT INTO bp VALUES('$name','$desc','$prio','$type','$cmd','$url','$val','1')\");\n\n\t\t\tswitch ($type){\n\t\t\t\tcase \"ET\": $vals = explode(\"&\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"OU\": $vals = explode(\"|\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"MIN\": $vals = explode(\"+\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tforeach ($vals as $v) {\n\t\t\t\tif ( strpos($v,\";\") !== false ){\n\t\t\t\t\t$val = explode(\";\",$v); $host=trim($val[0]); $service=trim($val[1]);\n\t\t\t\t\tsqlrequest($database_nagios,\"INSERT INTO bp_services VALUES('','$name','$host','$service')\");\n\t\t\t\t}\n\t\t\t\telse sqlrequest($database_nagios,\"INSERT INTO bp_links VALUES('','$name','\".trim($v).\"')\");\n\t\t\t}\n\t\t}\n\t\tmessage(6,\" : Database updated with configuration file\",\"ok\");\n\t}\n\tunlink($path_nagiosbpcfg_lock);\n}\n\n//Write in a file, with error or succes message\nfunction write_file($file,$contenu,$mode,$message = null){\n\tif(is_writable($file)){\n\t\t$error = 0 ;\n\t\tif (!$fconf = fopen($file, $mode)) message(2,$file,\"critical\");\n\t\t\n\t\tif ( is_array($contenu)){\n\t\t\tforeach ($contenu as $line) {\n\t\t\t\tif (fwrite ($fconf, $line) === FALSE) $error = 1 ;\n\t\t\t}\n\t\t}\n\t\telse if (fwrite ($fconf, $contenu) === FALSE) $error = 1 ;\n\n\t\tif ($error) message(3,$file,\"critical\");\n\t\telse if ( $message != null )message(6,$message,\"ok\");\n\t\tfclose ($fconf);\n\t}\n\telse \n\t\tmessage(3,$file,\"critical\");\n}\n\n// MySQL request in php array \nfunction sqlArrayNagios($request){\n\tglobal $database_nagios;\n\t$result = sqlrequest($database_nagios,$request);\n\t$values = array();\n\tfor ($i=0; $i<mysqli_num_rows($result); ++$i) $values[] = mysqli_fetch_assoc($result);\n\treturn $values ;\n}\n\n// NagiosBP file backup\nfunction backup_file($start){\n\tglobal $path_nagiosbpcfg;\n\tglobal $path_nagiosbpcfg_bu;\n\n\tfor ($i = $start; $i > 0; $i--){\n\t\tif ( file_exists($path_nagiosbpcfg_bu.$i)){\n\t\t\tif ( $i == $start) unlink($path_nagiosbpcfg_bu.$i);\n\t\t\telse {\n\t\t\t\trename($path_nagiosbpcfg_bu.$i,$path_nagiosbpcfg_bu.($i+1));\n\t\t\t}\n\t\t}\n\t}\n\tcopy($path_nagiosbpcfg,$path_nagiosbpcfg_bu.'1');\n}\n\n// NagiosBP file creation\nfunction buildFile(){\n\n\tglobal $path_nagiosbpcfg_lock;\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file.\n\tfputs($fp,getmypid());\n\tfclose($fp);\n\n\tglobal $max_bu_file;\n\tbackup_file($max_bu_file);\n\tglobal $path_nagiosbpcfg;\n\t$request = \"SELECT * FROM bp WHERE `name` NOT IN (SELECT bp_name FROM bp_links) AND `is_define`='1'\";\n\t$values = sqlArrayNagios($request);\n\t$prevRequest = str_replace(\"*\",\"name\",$request); \n\n\t$file[] = \"# Checked\";\n\tforeach( $values as $metier){\n\t\t$writenBP[] = $metier['name'];\n\t  \tswitch( $metier['type']) {\n\t   \t\tcase \"ET\" : $sep = \"&\";break;\n\t   \t\tcase \"OU\" : $sep = \"|\";break;\n\t   \t\tcase \"MIN\" : $sep = \"+\";break;\n\t   \t}\n\t   \t$result = sqlArrayNagios(\"SELECT host,service FROM bp_services WHERE bp_name='$metier[name]'\");\n\t   \t$strServ = $string = null;\n\t   \tforeach($result as $serv){\n\t   \t\tif ( is_null($strServ) ) {\n\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t   \t\t\t$strServ = \"$serv[host];$serv[service]\";\n\t   \t\t}\n\t   \t\telse $strServ .= \" $sep $serv[host];$serv[service]\";\n\t   \t}\n\t   \t$string .= $strServ.\"\\n\";\n\t   \tif ( $metier['priority'] != \"null\") $string .= \"display $metier[priority];$metier[name];$metier[description]\\n\";\n\t   \tif ( $metier['command'] != \"\") $string .= \"external_info $metier[name];$metier[command]\\n\";\n\t   \tif ( $metier['url'] != \"\") $string .= \"info_url $metier[name];$metier[url]\\n\";\n\t   \t$file[] = $string;\n    }\n\n\tif ( $values ) build($prevRequest,$file,$writenBP);\n    write_file($path_nagiosbpcfg,$file,\"w\",\" : File updated\");\n    unlink($path_nagiosbpcfg_lock);\n}\n\n// Nagiosbp build\nfunction build($pRequest,&$file,$pWritenBP){\n\n\t$values = sqlArrayNagios($pRequest);\n\tunset($r);\n\tforeach( $values as $v){\n\t\tif ( !isset($r) ) $r = \"SELECT bp_name FROM bp_links WHERE (bp_link='$v[name]' \";\n\t\telse $r .= \" OR bp_link='$v[name]'\";\n\t}\n\t$values = sqlArrayNagios($r.\")\");\n\n\tif ($values){\n\t\tunset($r);\n\t\tforeach ($values as $v) {\n\t\t\tif ( !isset($r) ) $r = \"SELECT * FROM bp WHERE (name='$v[bp_name]' \";\n\t\t\telse $r .= \" OR name='$v[bp_name]'\";\n\t\t}\n\t\t$values = sqlArrayNagios($r.\") AND `is_define`='1'\");\n\t\t/*$request = \"SELECT * FROM bp WHERE `name` IN (SELECT bp_name FROM bp_links WHERE bp_link IN ($pRequest)) AND `is_define`='1'\";\n\t\t$values = sqlArrayNagios($request);\n\t\tsql takes to much time with this type of request. We split it in multiple request instead.*/\n\t\t$prevRequest = str_replace(\"*\",\"name\",$r.\") AND `is_define`='1'\");\n\t\t$writenBP = $pWritenBP;\n\n\n\t\tforeach ($pWritenBP as $r) {\n\t\t\tif ( !isset($reqC)) $reqC = \"SELECT COUNT(bp_name) AS nbr FROM bp_links WHERE (bp_link='$r' \";\n\t\t\telse $reqC .= \" OR bp_link='$r'\";\n\t\t}\n\n\t\tforeach( $values as $metier){\n\t\t\tif (in_array($metier, $pWritenBP)) continue;\n\t\t\t\n\t\t\t$requestC = $reqC.\") AND bp_name='$metier[name]'\";\n\t\t\t$count = sqlArrayNagios($requestC);\n\t\t\t$cnt = sqlArrayNagios(\"SELECT COUNT(bp_name) AS nbr FROM bp_links WHERE bp_name='$metier[name]'\");\n\t\t\t\n\t\t\tif ( $count[0]['nbr'] == $cnt[0]['nbr']){\n\t\t\t\t$writenBP[] = $metier['name'];\n\t\t\t  \tswitch( $metier['type']) {\n\t\t\t   \t\tcase \"ET\" : $sep = \"&\";break;\n\t\t\t   \t\tcase \"OU\" : $sep = \"|\";break;\n\t\t\t   \t\tcase \"MIN\" : $sep = \"+\";break;\n\t\t\t   \t}\n\t\t\t   \t$result = sqlArrayNagios(\"SELECT host,service FROM bp_services WHERE bp_name='$metier[name]'\");\n\t\t\t   \t$strServ = $string = null;\n\n\t\t\t   \tforeach($result as $serv){\n\t\t\t   \t\tif ( is_null($strServ) ) {\n\t\t\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t\t\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t\t\t   \t\t\t$strServ = \"$serv[host];$serv[service]\";\n\t\t\t   \t\t}\n\t\t\t   \t\telse $strServ .= \" $sep $serv[host];$serv[service]\";\n\t\t\t   \t}\n\t\t\t   \t$result = sqlArrayNagios(\"SELECT bp_link FROM bp_links WHERE bp_name='$metier[name]'\");\n\t\t\t   \tforeach($result as $serv){\n\t\t\t   \t\tif ( is_null($strServ) ) {\n\t\t\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t\t\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t\t\t   \t\t\t$strServ = \"$serv[bp_link]\";\n\t\t\t   \t\t}\n\t\t\t   \t\telse $strServ .= \" $sep $serv[bp_link]\";\n\t\t\t   \t}\n\t\t\t   \t$string .= $strServ.\"\\n\";\n\t\t\t   \tif ( $metier['priority'] != \"null\") $string .= \"display $metier[priority];$metier[name];$metier[description]\\n\";\n\t\t\t   \tif ( $metier['command'] != \"\") $string .= \"external_info $metier[name];$metier[command]\\n\";\n\t\t\t   \tif ( $metier['url'] != \"\") $string .= \"info_url $metier[name];$metier[url]\\n\";\n\t\t\t   \t$file[] = $string;\n\t\t\t}\n\t    }\n\n\t    build($prevRequest,$file,$writenBP);\n\t}\n}\n\n// Ldap escape special caracters\nfunction ldap_escape($str, $login=false, $escape=false){\n\n\t$str = trim($str);\n\tif ( $login ) {\n\t\t$search = array(\"\\\\\\\\\",'\"','+','>','<');\n\t\t$replace = array(\"\\\\\",'\\\"','\\\\2B','\\>','\\<');\n\t} else {\n\t\t$search = array(\"\\\\\",\"'\",'\"');\n\t\t$replace = array(\"\\\\\\\\\",\"\\'\",'\\\"');\n\t}\n\t\n\t$str = str_replace($search, $replace, $str);\n\tif ( $escape ) { $str = str_replace(\"\\\\\", \"\\\\\\\\\", $str); }\n\t\n\treturn $str;\n\n}\n\n// User creation\nfunction insert_user($user_name, $user_descr, $user_group, $user_password1, $user_password2, $user_type, $user_location, $user_mail, $user_limitation, $message, $in_nagvis = false, $in_cacti = false, $nagvis_group = false, $user_language = false, $theme = false){\n\tglobal $database_host;\n\tglobal $database_cacti;\n\tglobal $database_username;\n\tglobal $database_password;\n\n\tglobal $database_eonweb;\n\tglobal $database_lilac;\n\t$user_id=null;\n\n\t// Check if user exist\n\t$user_exist=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT count('user_name') from users where user_name='$user_name';\"),0);\n\n\t// Check user descr\n\tif($user_descr==\"\")\n\t\t$user_descr=$user_name;\n\n\tif($user_location != \"\" && $user_location != null){\n\t\tif( strpos($user_location, \" -- \") !== false && strpos($user_location, \"|\") !== false ){\n\t\t\t$user_location_parts = explode(\" -- \", $user_location);\n\t\t\t$user_loc = explode(\"|\", $user_location_parts[1]);\n\t\t\t$user_dn_name = $user_loc[0];\n\t\t\t$user_name = $user_dn_name;\n\t\t\t$user_location = $user_loc[1];\n\t\t}\n\t\telse{\n\t\t\t$user_location = $user_location;\n\t\t}\n\t}\n\t\n\tif (($user_name != \"\") && ($user_name != null) && ($user_exist == 0)) {\n\t\tif (($user_password1 != \"\") && ($user_password1 != null) && ($user_password1 == $user_password2)) {\n\t\t\t$user_password = md5($user_password1);\n\t\t\t\n\t\t\t// Insert into eonweb\n\t\t\tsqlrequest(\"$database_eonweb\",\"INSERT INTO users (user_name,user_descr,group_id,user_passwd,user_type,user_location,user_limitation,user_language,theme) VALUES('$user_name', '$user_descr', '$user_group', '$user_password', '$user_type', '$user_location', '$user_limitation', '$user_language', '$theme')\");\n\t\t\t$user_id=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT user_id FROM users WHERE user_name='$user_name'\"),0,\"user_id\");\n\t\t\t$group_name=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT group_name FROM groups WHERE group_id='$user_group'\"),0,\"group_name\");\n\n\t\t\t// Insert into lilac\n\t\t\t$lilac_period=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_timeperiod limit 1\"),0,\"id\");\n\t\t\t\n\t\t\trequire_once('/srv/eyesofnetwork/lilac/includes/config.inc');\n\t\t\t$contact_array = array(\n\t\t\t\t\"contact_name\"=>$user_name,\n\t\t\t\t\"alias\"=>$user_descr,\n\t\t\t\t\"email\"=>$user_mail,\n\t\t\t\t\"host_notifications_enabled\"=>1,\n\t\t\t\t\"service_notifications_enabled\"=>1,\n\t\t\t\t\"host_notification_period\"=>$lilac_period,\n\t\t\t\t\"service_notification_period\"=>$lilac_period,\n\t\t\t\t\"host_notification_on_down\"=>1,\n\t\t\t\t\"host_notification_on_unreachable\"=>1,\n\t\t\t\t\"host_notification_on_recovery\"=>1,\n\t\t\t\t\"host_notification_on_flapping\"=>1,\n\t\t\t\t\"service_notification_on_warning\"=>1,\n\t\t\t\t\"service_notification_on_unknown\"=>1,\n\t\t\t\t\"service_notification_on_critical\"=>1,\n\t\t\t\t\"service_notification_on_recovery\"=>1,\n\t\t\t\t\"service_notification_on_flapping\"=>1,\n\t\t\t\t\"can_submit_commands\"=>1,\n\t\t\t\t\"retain_status_information\"=>1,\n\t\t\t\t\"retain_nonstatus_information\"=>1,\n\t\t\t\t\"host_notification_on_scheduled_downtime\"=>1\n\t\t\t);\n\t\t\t$lilac->add_contact($contact_array);\n\n\t\t\t// Lilac contact_group_member\n\t\t\t$lilac_contactgroupid=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_contact_group WHERE name='$group_name'\"),0,\"id\");\n\t\t\t$lilac_contactid=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_contact where name='$user_name'\"),0,\"id\");\n\t\t\tif($lilac_contactgroupid!=\"\" and $lilac_contactid!=\"\" and $user_limitation!=\"1\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_group_member (contactgroup, contact) VALUES ('$lilac_contactgroupid', '$lilac_contactid')\");\n\n\t\t\t// Insert into nagvis\n\t\t\tif($in_nagvis == \"yes\"){\n\t\t\t\t$bdd = new PDO('sqlite:/srv/eyesofnetwork/nagvis/etc/auth.db');\n\n\t\t\t\t$req = $bdd->query(\"SELECT count(*) FROM users WHERE name = '$user_name'\");\n\t\t\t\t$nagvis_user_exist = $req->fetch();\n\n\t\t\t\tif ($nagvis_user_exist[\"count(*)\"] == 0){\n\t\t\t\t\t// this is nagvis default salt for password encryption security\n\t\t\t\t\t$nagvis_salt = '29d58ead6a65f5c00342ae03cdc6d26565e20954';\n\t\t\t\t\t\n\t\t\t\t\t// insert user in nagvis SQLite DB\n\t\t\t\t\t$sql = \"INSERT INTO users (name, password) VALUES ('$user_name', '\".sha1($nagvis_salt.$user_password1).\"')\";\n\t\t\t\t\t$bdd->exec($sql);\n\n\t\t\t\t\t// insert user's right as \"Guest\" by default\n\t\t\t\t\t$sql = \"SELECT userId FROM users WHERE name = '$user_name'\";\n\t\t\t\t\t$req = $bdd->query($sql);\n\t\t\t\t\t$result = $req->fetch();\n\t\t\t\t\t$nagvis_id = $result['userId'];\n\n\t\t\t\t\t$sql = \"INSERT INTO users2roles (userId, roleId) VALUES ($nagvis_id, $nagvis_group)\";\n\t\t\t\t\t$bdd->exec($sql);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Insert into cacti\n\t\t\tif($in_cacti == \"yes\"){\n\t\t\t\t$bdd = new PDO('mysql:host='.$database_host.';dbname='.$database_cacti, $database_username, $database_password);\n\t\t\t\t$req = $bdd->query(\"SELECT count(*) FROM user_auth WHERE username='$user_name'\");\n\t\t\t\t$cacti_user_exist = $req->fetch();\n\t\t\t\tif ($cacti_user_exist[\"count(*)\"] == 0){\n\t\t\t\t\t$bdd->exec(\"INSERT INTO user_auth (username,password,realm,full_name,show_tree,show_list,show_preview,graph_settings,login_opts,policy_graphs,policy_trees,policy_hosts,policy_graph_templates,enabled) VALUES ('$user_name','',2,'$user_descr','on','on','on','on',3,2,2,2,2,'on')\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Messages\n\t\t\tlogging(\"admin_user\",\"INSERT : $user_name $user_descr $user_limitation $user_group $user_type $user_location\");\n\t\t\tif($message){ message(8,\" : User Inserted\",'ok'); }\n\n\t\t\t// Lilac contact_commands\n\t\t\t$lilac_contact_hcommand=mysqli_result(sqlrequest(\"$database_lilac\",\"select id from nagios_command where name like 'notify-by-email-host'\"),0,\"id\");\n\t\t\t$lilac_contact_scommand=mysqli_result(sqlrequest(\"$database_lilac\",\"select id from nagios_command where name like 'notify-by-email-service'\"),0,\"id\");\n\t\t\tif($lilac_contactid!=\"\" and $lilac_contact_hcommand!=\"\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_notification_command (contact_id,command,type) values ('$lilac_contactid','$lilac_contact_hcommand','host')\");\n\t\t\telseif($lilac_contact_hcommand==\"\")\n\t\t\t\tmessage(8,\" : Verify contact 'notify-by-email-host' command in nagios configurator\",'warning');\n\t\t\tif($lilac_contactid!=\"\" and $lilac_contact_scommand!=\"\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_notification_command (contact_id,command,type) values ('$lilac_contactid','$lilac_contact_scommand','service')\");\n\t\t\telseif($lilac_contact_scommand==\"\")\n\t\t\t\tmessage(8,\" : Verify contact 'notify-by-email-service' command in nagios configurator\",'warning');\n\t\t}\n\t\telse\n\t\t\tmessage(8,\" : Passwords do not match or are empty\",'warning');\n\t}\n\telseif($user_exist != 0 )\n\t\tmessage(8,\" : User $user_name already exists\",'warning');\n\telse\n\t\tmessage(8,\" : User name can not be empty\",'warning');\n\treturn $user_id;\n}\n\n// \"mysqli\" version of mysql_result\nfunction mysqli_result($res, $row, $field=0){\n    $res->data_seek($row);\n\tif(gettype($field) == \"string\"){\n\t\t$datarow = $res->fetch_assoc();\n\t}\n    else{\n\t\t$datarow = $res->fetch_array();\n\t}\n    return $datarow[$field];\n}\n\n// get traduction words\nfunction getLabel($reference){\n\n        global $dictionnary;\n        global $path_messages;\n        global $path_messages_custom;\n        global $t;\n\n        // Load dictionnary if not isset\n        if(!isset($t)) {\n                $t = new Translator();\n                $t->initFile($path_messages,$path_messages_custom);\n                $dictionnary = $t->createPHPDictionnary();\n        }\n\n        // Display dictionnary reference if isset or reference\n        if(isset($dictionnary[$reference])) {\n                $label = $dictionnary[$reference];\n        }\n        else {\n                $label = $reference;\n        }\n\n        return $label;\n\n}\n\n// get default page\nfunction getDefaultPage($usrlimit=0){\n\n\tglobal $t;\n\tglobal $defaultpage;\n\tglobal $path_frame;\n\tglobal $path_menu_limited;\n\tglobal $path_menu_limited_custom;\n\tglobal $path_menus;\n\tglobal $path_menus_custom;\n\n\t// load dictionnary if not isset\n\tif(!isset($t)) {\n\t\t$t = new Translator();\n\t}\n\t\n\t// get json file\n\tif(isset($_COOKIE[\"user_limitation\"])) { $usrlimit = $_COOKIE[\"user_limitation\"]; }\n\tif($usrlimit == 1){\n\t\t$file=$t->getFile($path_menu_limited, $path_menu_limited_custom);\n\t\t$json_content = file_get_contents($file);\n\t\t$links = json_decode($json_content, true);\n\t\tforeach ($links[\"link\"] as $link) {\n\t\t\tif(isset($link[\"default\"])) {\n\t\t\t\tif( $link[\"default\"] != null ){\n\t\t\t\t\tif($link[\"target\"]==\"frame\") { $link[\"url\"]=$path_frame.urlencode($link['url']); }\n\t\t\t\t\t$defaultpage = $link[\"url\"];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} \n\t\n\treturn $defaultpage;\n\n}\n\n// get frame url\nfunction getFrameURL($url){\n\tglobal $path_frame;\n\t\n\t$frame_url = $path_frame.urlencode($url);\n\treturn $frame_url;\n}\n\nfunction pieChart($queue, $field, $search, $period)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tif($queue == \"active\"){ global $ged_active_intervals; extract($ged_active_intervals); }\n\telse{ global $ged_history_intervals; extract($ged_history_intervals); }\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\t// set the period clause (according to checkboxes checked)\n\t$period_clause = \"\";\n\tif( isset($period) && $period != \"\" )\n\t{\n\t\tswitch($period)\n\t\t{\n\t\t\tcase \"day\": $period_clause = \" AND o_sec >= $day\"; break;\n\t\t\tcase \"week\": $period_clause = \" AND o_sec >= $week AND o_sec < $day\"; break;\n\t\t\tcase \"month\": $period_clause = \" AND o_sec >= $month AND o_sec < $week\"; break;\n\t\t\tcase \"year\": $period_clause = \" AND o_sec >= $year AND o_sec < $month\"; break;\n\t\t}\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($array_ged_states as $key => $state)\n\t\t{\n\t\t\tif($key == \"ok\")\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif( !isset($array_result[\"$key\"]) ){\n\t\t\t\t$array_result[\"$key\"] = 0;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"'\";\n\t\t\t$sql .= $search_clause;\n\t\t\t$sql .= $period_clause;\n\t\t\t\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t$result = mysqli_fetch_row($result);\n\t\t\t$array_result[\"$key\"] += $result[0];\n\t\t}\n\t}\n\treturn json_encode($array_result);\n}\n\nfunction barChart($queue, $field, $search)\n{\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tif($queue == \"active\"){ global $ged_active_intervals; extract($ged_active_intervals); }\n\telse{ global $ged_history_intervals; extract($ged_history_intervals); }\n\t\n\t\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t$array_result = array();\n\t$array_now_day = array();\n\t$array_day_week = array();\n\t$array_week_month = array();\n\t$array_month_year = array();\n\t$array_year_more = array();\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($array_ged_states as $key => $state)\n\t\t{\n\t\t\tif($key == \"ok\")\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif( !isset($array_now_day[\"$key\"]) ){$array_now_day[\"$key\"] = 0;}\n\t\t\tif( !isset($array_day_week[\"$key\"]) ){$array_day_week[\"$key\"] = 0;}\n\t\t\tif( !isset($array_week_month[\"$key\"]) ){$array_week_month[\"$key\"] = 0;}\n\t\t\tif( !isset($array_month_year[\"$key\"]) ){$array_month_year[\"$key\"] = 0;}\n\t\t\tif( !isset($array_year_more[\"$key\"]) ){$array_year_more[\"$key\"] = 0;}\n\t\t\t$sql = \"\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $day\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $week AND o_sec < $day\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $month AND o_sec < $week\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $year AND o_sec < $month\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec < $year\".$search_clause;\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t\n\t\t\t$cpt = 0;\n\t\t\twhile( $row = mysqli_fetch_row($result) )\n\t\t\t{\n\t\t\t\tswitch($cpt)\n\t\t\t\t{\n\t\t\t\t\tcase 0: $array_now_day[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 1: $array_day_week[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 2: $array_week_month[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 3: $array_month_year[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 4: $array_year_more[\"$key\"] += $row[0]; break;\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t}\n\t}\n\tarray_push($array_result, $array_now_day);\n\tarray_push($array_result, $array_day_week);\n\tarray_push($array_result, $array_week_month);\n\tarray_push($array_result, $array_month_year);\n\tarray_push($array_result, $array_year_more);\n\t\n\treturn json_encode($array_result);\n}\n\nfunction slaPieChart($field, $search, $period)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $ged_sla_intervals;\n\tglobal $ged_history_intervals;\n\textract($ged_sla_intervals);\n\textract($ged_history_intervals);\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\t// set the period clause (according to checkboxes checked)\n\t$period_clause = \"\";\n\tif( isset($period) && $period != \"\" )\n\t{\n\t\tswitch($period)\n\t\t{\n\t\t\tcase \"day\": $period_clause = \" AND o_sec >= $day\"; break;\n\t\t\tcase \"week\": $period_clause = \" AND o_sec >= $week AND o_sec < $day\"; break;\n\t\t\tcase \"month\": $period_clause = \" AND o_sec >= $month AND o_sec < $week\"; break;\n\t\t\tcase \"year\": $period_clause = \" AND o_sec >= $year AND o_sec < $month\"; break;\n\t\t}\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($ged_sla_intervals as $key => $value)\n\t\t{\n\t\t\tif( !isset($array_result[\"$key\"]) ){\n\t\t\t\t$array_result[\"$key\"] = 0;\n\t\t\t}\n\t\t\t\n\t\t\t$sla_clause = \"\";\n\t\t\tswitch($key)\n\t\t\t{\n\t\t\t\tcase \"first\" : $sla_clause = \" AND a_sec-o_sec < $first\"; break;\n\t\t\t\tcase \"second\": $sla_clause = \" AND a_sec-o_sec >= $first AND a_sec-o_sec < $second\"; break;\n\t\t\t\tcase \"third\" : $sla_clause = \" AND a_sec-o_sec >= $second AND a_sec-o_sec < $third\"; break;\n\t\t\t\tcase \"fourth\": $sla_clause = \" AND a_sec-o_sec >= $third\"; break;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state!='0'\".$sla_clause;\n\t\t\t$sql .= $search_clause;\n\t\t\t$sql .= $period_clause;\n\t\t\t\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t$result = mysqli_fetch_row($result);\n\t\t\t$array_result[\"$key\"] += $result[0];\n\t\t}\n\t}\n\treturn json_encode($array_result);\n}\n\nfunction slaBarChart($field, $search)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tglobal $ged_sla_intervals;\n\tglobal $ged_history_intervals;\n\textract($ged_sla_intervals);\n\textract($ged_history_intervals);\n\t\n\t$array_result = array();\n\t$array_now_day = array();\n\t$array_day_week = array();\n\t$array_week_month = array();\n\t$array_month_year = array();\n\t$array_year_more = array();\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($ged_sla_intervals as $key => $value)\n\t\t{\n\t\t\tif( !isset($array_now_day[\"$key\"]) ){$array_now_day[\"$key\"] = 0;}\n\t\t\tif( !isset($array_day_week[\"$key\"]) ){$array_day_week[\"$key\"] = 0;}\n\t\t\tif( !isset($array_week_month[\"$key\"]) ){$array_week_month[\"$key\"] = 0;}\n\t\t\tif( !isset($array_month_year[\"$key\"]) ){$array_month_year[\"$key\"] = 0;}\n\t\t\tif( !isset($array_year_more[\"$key\"]) ){$array_year_more[\"$key\"] = 0;}\n\t\t\t\n\t\t\tswitch($key)\n\t\t\t{\n\t\t\t\tcase \"first\" : $sla_clause = \" AND a_sec-o_sec < $first\"; break;\n\t\t\t\tcase \"second\": $sla_clause = \" AND a_sec-o_sec >= $first AND a_sec-o_sec < $second\"; break;\n\t\t\t\tcase \"third\" : $sla_clause = \" AND a_sec-o_sec >= $second AND a_sec-o_sec < $third\"; break;\n\t\t\t\tcase \"fourth\": $sla_clause = \" AND a_sec-o_sec >= $third\"; break;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $day\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $week AND o_sec < $day\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $month AND o_sec < $week\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $year AND o_sec < $month\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec < $year\".$sla_clause.$search_clause;\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t\n\t\t\t$cpt = 0;\n\t\t\twhile( $row = mysqli_fetch_row($result) )\n\t\t\t{\n\t\t\t\tswitch($cpt)\n\t\t\t\t{\n\t\t\t\t\tcase 0: $array_now_day[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 1: $array_day_week[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 2: $array_week_month[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 3: $array_month_year[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 4: $array_year_more[\"$key\"] += $row[0]; break;\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t}\n\t}\n\tarray_push($array_result, $array_now_day);\n\tarray_push($array_result, $array_day_week);\n\tarray_push($array_result, $array_week_month);\n\tarray_push($array_result, $array_month_year);\n\tarray_push($array_result, $array_year_more);\n\t\n\treturn json_encode($array_result);\n}\n\n# Convert seconds to human readable\nfunction strTime($s) {\n\n\t$d = intval($s/86400);\n\t$s -= $d*86400;\n\t$h = intval($s/3600);\n\t$s -= $h*3600;\n\t$m = intval($s/60);\n\t$s -= $m*60;\n\n\tif($d<10) $d=\"0\".$d;\n\tif($h<10) $h=\"0\".$h;\n\tif($m<10) $m=\"0\".$m;\n\tif($s<10) $s=\"0\".$s;\n\n\tif ($d) $str = $d . 'd ';\n\telse $str = '00d ';\n\tif ($h) $str .= $h . 'h ';\n\telse $str .= '00h ';\n\tif ($m) $str .= $m . 'm ';\n\telse $str .= '00m ';\n\tif ($s) $str .= $s . 's';\n\telse $str .= '00s';\n\n\treturn $str;\n\n}\n\n# Get eon config values\nfunction getEonConfig($name,$type=false)\n{\n\n\tglobal $database_eonweb;\n\tglobal ${$name};\n\t\n\t// mysql request\t\n\t$sql = \"SELECT value FROM configs WHERE name='\".$name.\"'\";\n\t$value = sqlrequest($database_eonweb, $sql);\n\t$result = mysqli_fetch_row($value);\n\t\n\t// return value if exists\n\tif(count($result)==0) {\n\t\treturn ${$name};\n\t} elseif($type==\"array\") {\n\t\treturn explode(\",\",$result[0]);\n\t} else {\n\t\treturn $result[0];\n\t}\n\t\n}\n\nfunction startSessionTheme(){\n\tglobal $database_eonweb;\n\n\tif(isset($_COOKIE[\"user_name\"])){\n\n\t\t\t$conn = connexionDB($database_eonweb);\n\t\t\t$sql = $conn->prepare(\"SELECT `theme` FROM users WHERE user_name = :userName\");\n\t\t\t$sql->bindParam(\"userName\", $_COOKIE[\"user_name\"]);\n\t\t\t$sql->execute();\n\t\t\t$result = $sql->fetch();\n\t\t\t$conn = null;\n\t\t\t$sql = null;\n\t\t\t$theme_value = $result[\"theme\"];\n\t\t\tif($theme_value == \"Default\"){\n\t\t\t\t$conn = connexionDB($database_eonweb);\n\t\t\t\t$sql = \"SELECT value FROM configs WHERE name = 'theme'\";\n\t\t\t\t$result = $conn->query($sql);\n\t\t\t\t$data = $result->fetch();\n\t\t\t\t$theme_value = $data[\"value\"];\n\t\t\t\t$conn = null;\n\t\t\t\t$sql = null;\n\t\t\t} \n\n\t\t\t$_SESSION[\"theme\"] = $theme_value;\n\n\t} else {\n\t\t$conn = connexionDB($database_eonweb);\n\t\t$sql = \"SELECT value FROM configs WHERE name = 'theme'\";\n\t\t$result = $conn->query($sql);\n\t\t$data = $result->fetch();\n\t\t$theme_value = $data[\"value\"];\n\t\t$conn = null;\n\t\t$sql = null;\n\t\t$_SESSION[\"theme\"] = $theme_value;\n\t}\n}\n\nfunction checkUpdateDB(){\n\tglobal $version;\n\tglobal $database_eonweb;\n\tglobal $database_password;\n\tglobal $path_eon;\n\n\t$database_username=\"root\";\n\t$dir=$path_eon.\"conf/eonweb/updates/\";\n\n\t$version_sql = sqlrequest($database_eonweb,\"SELECT count(value) as value FROM configs WHERE name='version'\");\n\tif(mysqli_result($version_sql,0,\"value\") == 0){\n\t\t$version_sql = sqlrequest($database_eonweb,\"INSERT INTO configs (name, value) VALUES('version', '\".$version.\"')\");\n\n\t\t// execution de tous les .sql jusqu'\u00e0 la version donn\u00e9 dans config\n\t\t$SQL_Files = array_slice(scandir($dir), 2);\n\t\tusort($SQL_Files, 'version_compare');\n\n\t\tforeach($SQL_Files as $file){\n\t\tif(version_compare(rtrim($file,'.sql'), $version) >= 0) {\n\t\t\texec(\"mysql -f -u $database_username --password=$database_password < $dir$file\");\n\t\t}\n\t}\n\t}else{\n\t\t$versionBD = mysqli_result(sqlrequest($database_eonweb,\"SELECT value FROM configs WHERE name='version'\"),0,\"value\");\n\n\t\t// execution des .sql entre version en BD et celle config\n\t\t$SQL_Files = array_slice(scandir($dir), 2);\n\t\tusort($SQL_Files, 'version_compare');\n\t\t$version=rtrim(end($SQL_Files),'.sql');\n\n\t\tif($versionBD!=$version) {\n\t\t\tforeach($SQL_Files as $file){\n\t\t\t\tif(version_compare(rtrim($file,'.sql'), $versionBD) >= 0) {\n\t\t\t\t\texec(\"mysql -f -u $database_username --password=$database_password < $dir$file\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tsqlrequest($database_eonweb,\"UPDATE configs SET value='$version' WHERE name='version'\");\n\t\t}\n\t}\n}\n\n?>\n"], "filenames": ["include/function.php"], "buggy_code_start_loc": [373], "buggy_code_end_loc": [377], "fixing_code_start_loc": [373], "fixing_code_end_loc": [380], "type": "CWE-79", "message": "eonweb in EyesOfNetwork before 5.3-7 does not properly escape the username on the /module/admin_logs page, which might allow pre-authentication stored XSS during login/logout logs recording.", "other": {"cve": {"id": "CVE-2020-24390", "sourceIdentifier": "cve@mitre.org", "published": "2020-08-27T16:15:11.503", "lastModified": "2020-09-02T16:57:00.263", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "eonweb in EyesOfNetwork before 5.3-7 does not properly escape the username on the /module/admin_logs page, which might allow pre-authentication stored XSS during login/logout logs recording."}, {"lang": "es", "value": "eonweb en EyesOfNetwork versiones anteriores a 5.3-7, no escapa apropiadamente el nombre de usuario en la p\u00e1gina /module/admin_logs, lo que podr\u00eda permitir una autenticaci\u00f3n previa de tipo XSS almacenado durante la grabaci\u00f3n de registros de inicio y cierre de sesi\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:eyesofnetwork:eyesofnetwork:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.3", "matchCriteriaId": "1B3F1A66-3431-4156-ADB3-A72EAD9658F6"}]}]}], "references": [{"url": "https://github.com/EyesOfNetworkCommunity/eonweb/commit/c416b52d3b500d96ab40875f95b7c7939628854b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/EyesOfNetworkCommunity/eonweb/releases/tag/5.3-7", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://www.eyesofnetwork.com/fr/news/fr-CVE-2020-24390", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/EyesOfNetworkCommunity/eonweb/commit/c416b52d3b500d96ab40875f95b7c7939628854b"}}