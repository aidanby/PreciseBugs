{"buggy_code": ["# -*- coding: utf-8 -*-\n\"\"\"\nRDFa 1.1 parser, also referred to as a \u201cRDFa Distiller\u201d. It is\ndeployed, via a CGI front-end, on the U{W3C RDFa 1.1 Distiller page<http://www.w3.org/2012/pyRdfa/>}.\n\nFor details on RDFa, the reader should consult the U{RDFa Core 1.1<http://www.w3.org/TR/rdfa-core/>}, U{XHTML+RDFa1.1<http://www.w3.org/TR/2010/xhtml-rdfa>}, and the U{RDFa 1.1 Lite<http://www.w3.org/TR/rdfa-lite/>} documents.\nThe U{RDFa 1.1 Primer<http://www.w3.org/TR/owl2-primer/>} may also prove helpful.\n\nThis package can also be downloaded U{from GitHub<https://github.com/RDFLib/pyrdfa3>}. The\ndistribution also includes the CGI front-end and a separate utility script to be run locally.\n\nNote that this package is an updated version of a U{previous RDFa distiller<http://www.w3.org/2007/08/pyRdfa>} that was developed\nfor RDFa 1.0. Although it reuses large portions of that code, it has been quite thoroughly rewritten, hence put in a completely\ndifferent project. (The version numbering has been continued, though, to avoid any kind of misunderstandings. This version has version numbers \"3.0.0\" or higher.)\n\n(Simple) Usage\n==============\nFrom a Python file, expecting a Turtle output::\n from pyRdfa import pyRdfa\n print pyRdfa().rdf_from_source('filename')\nOther output formats are also possible. E.g., to produce RDF/XML output, one could use::\n from pyRdfa import pyRdfa\n print pyRdfa().rdf_from_source('filename', outputFormat='pretty-xml')\nIt is also possible to embed an RDFa processing. Eg, using::\n from pyRdfa import pyRdfa\n graph = pyRdfa().graph_from_source('filename')\nreturns an RDFLib.Graph object instead of a serialization thereof. See the the description of the\nL{pyRdfa class<pyRdfa.pyRdfa>} for further possible entry points details.\n\nThere is also, as part of this module, a L{separate entry for CGI calls<processURI>}.\n\nReturn (serialization) formats\n------------------------------\n\nThe package relies on RDFLib. By default, it relies therefore on the serializers coming with the local RDFLib distribution. However, there has been some issues with serializers of older RDFLib releases; also, some output formats, like JSON-LD, are not (yet) part of the standard RDFLib distribution. A companion package, called pyRdfaExtras, is part of the download, and it includes some of those extra serializers. The extra format (not part of the RDFLib core) is U{JSON-LD<http://json-ld.org/spec/latest/json-ld-syntax/>}, whose 'key' is 'json', when used in the 'parse' method of an RDFLib graph.\n\n(Note in 2018: the bugs that needed pyRdfaExtras are gone with the RDFLib versions, and the json-ld serializer and parser can be U{downloaded from github<https://github.com/RDFLib/rdflib-jsonld>} (or installed via pip). This means that importing pyRdfaExtras is done only when running older (i.e., 2.X.X) RDFLib versions and can be safely ignored these days.)  \n\nOptions\n=======\n\nThe package also implements some optional features that are not part of the RDFa recommendations. At the moment these are:\n\n - possibility for plain literals to be normalized in terms of white spaces. Default: false. (The RDFa specification requires keeping the white spaces and leave applications to normalize them, if needed)\n - inclusion of embedded RDF: Turtle content may be enclosed in a C{script} element and typed as C{text/turtle}, U{defined by the RDF Working Group<http://www.w3.org/TR/turtle/>}. Alternatively, some XML dialects (e.g., SVG) allows the usage of RDF/XML as part of their core content to define metadata in RDF. For both of these cases pyRdfa parses these serialized RDF content and adds the resulting triples to the output Graph. Default: true.\n - extra, built-in transformers are executed on the DOM tree prior to RDFa processing (see below). These transformers can be provided by the end user.\n\nOptions are collected in an instance of the L{Options} class and may be passed to the processing functions as an extra argument. E.g., to allow the inclusion of embedded content::\n from pyRdfa.options import Options\n options = Options(embedded_rdf=True)\n print pyRdfa(options=options).rdf_from_source('filename')\n\nSee the description of the L{Options} class for the details.\n\n\nHost Languages\n==============\n\nRDFa 1.1. Core is defined for generic XML; there are specific documents to describe how the generic specification is applied to\nXHTML and HTML5.\n\npyRdfa makes an automatic switch among these based on the content type of the source as returned by an HTTP request. The following are the\npossible host languages:\n - if the content type is C{text/html}, the content is HTML5\n - if the content type is C{application/xhtml+xml} I{and} the right DTD is used, the content is XHTML1\n - if the content type is C{application/xhtml+xml} and no or an unknown DTD is used, the content is XHTML5\n - if the content type is C{application/svg+xml}, the content type is SVG\n - if the content type is C{application/atom+xml}, the content type is SVG\n - if the content type is C{application/xml} or C{application/xxx+xml} (but 'xxx' is not 'atom' or 'svg'), the content type is XML\n\nIf local files are used, pyRdfa makes a guess on the content type based on the file name suffix: C{.html} is for HTML5, C{.xhtml} for XHTML1, C{.svg} for SVG, anything else is considered to be general XML. Finally, the content type may be set by the caller when initializing the L{pyRdfa class<pyRdfa.pyRdfa>}.\n\nBeyond the differences described in the RDFa specification, the main difference is the parser used to parse the source. In the case of HTML5, pyRdfa uses an U{HTML5 parser<http://code.google.com/p/html5lib/>}; for all other cases the simple XML parser, part of the core Python environment, is used. This may be significant in the case of erroneous sources: indeed, the HTML5 parser may do adjustments on\nthe DOM tree before handing it over to the distiller. Furthermore, SVG is also recognized as a type that allows embedded RDF in the form of RDF/XML.\n\nSee the variables in the L{host} module if a new host language is added to the system. The current host language information is available for transformers via the option argument, too, and can be used to control the effect of the transformer.\n\nVocabularies\n============\n\nRDFa 1.1 has the notion of vocabulary files (using the C{@vocab} attribute) that may be used to expand the generated RDF graph. Expansion is based on some very simply RDF Schema and OWL statements on sub-properties and sub-classes, and equivalences.\n\npyRdfa implements this feature, although it does not do this by default. The extra C{vocab_expansion} parameter should be used for this extra step, for example::\n from pyRdfa.options import Options\n options = Options(vocab_expansion=True)\n print pyRdfa(options=options).rdf_from_source('filename')\n\nThe triples in the vocabulary files themselves (i.e., the small ontology in RDF Schema and OWL) are removed from the result, leaving the inferred property and type relationships only (additionally to the \u201ccore\u201d RDF content).\n\nVocabulary caching\n------------------\n\nBy default, pyRdfa uses a caching mechanism instead of fetching the vocabulary files each time their URI is met as a C{@vocab} attribute value. (This behavior can be switched off setting the C{vocab_cache} option to false.)\n\nCaching happens in a file system directory. The directory itself is determined by the platform the tool is used on, namely:\n - On Windows, it is the C{pyRdfa-cache} subdirectory of the C{%APPDATA%} environment variable\n - On MacOS, it is the C{~/Library/Application Support/pyRdfa-cache}\n - Otherwise, it is the C{~/.pyRdfa-cache}\n\nThis automatic choice can be overridden by the C{PyRdfaCacheDir} environment variable.\n\nCaching can be set to be read-only, i.e., the setup might generate the cache files off-line instead of letting the tool writing its own cache when operating, e.g., as a service on the Web. This can be achieved by making the cache directory read only.\n\nIf the directories are neither readable nor writable, the vocabulary files are retrieved via HTTP every time they are hit. This may slow down processing, it is advised to avoid such a setup for the package.\n\nThe cache includes a separate index file and a file for each vocabulary file. Cache control is based upon the C{EXPIRES} header of a vocabulary file\u2019s HTTP return header: when first seen, this data is stored in the index file and controls whether the cache has to be renewed or not. If the HTTP return header does not have this entry, the date is artificially set ot the current date plus one day.\n\n(The cache files themselves are dumped and loaded using U{Python\u2019s built in cPickle package<http://docs.python.org/release/2.7/library/pickle.html#module-cPickle>}. These are binary files. Care should be taken if they are managed by CVS: they must be declared as binary files when adding them to the repository.)\n\nRDFa 1.1 vs. RDFa 1.0\n=====================\n\nUnfortunately, RDFa 1.1 is I{not} fully backward compatible with RDFa 1.0, meaning that, in a few cases, the triples generated from an RDFa 1.1 source are not the same as for RDFa 1.0. (See the separate  U{section in the RDFa 1.1 specification<http://www.w3.org/TR/rdfa-core/#major-differences-with-rdfa-syntax-1.0>} for some further details.)\n\nThis distiller\u2019s default behavior is RDFa 1.1. However, if the source includes, in the top element of the file (e.g., the C{html} element) a C{@version} attribute whose value contains the C{RDFa 1.0} string, then the distiller switches to a RDFa 1.0 mode. (Although the C{@version} attribute is not required in RDFa 1.0, it is fairly commonly used.) Similarly, if the RDFa 1.0 DTD is used in the XHTML source, it will be taken into account (a very frequent setup is that an XHTML file is defined with that DTD and is served as text/html; pyRdfa will consider that file as XHTML5, i.e., parse it with the HTML5 parser, but interpret the RDFa attributes under the RDFa 1.0 rules).\n\nTransformers\n============\n\nThe package uses the concept of 'transformers': the parsed DOM tree is possibly\ntransformed I{before} performing the real RDFa processing. This transformer structure makes it possible to\nadd additional 'services' without distoring the core code of RDFa processing.\n\nA transformer is a function with three arguments:\n\n - C{node}: a DOM node for the top level element of the DOM tree\n - C{options}: the current L{Options} instance\n - C{state}: the current L{ExecutionContext} instance, corresponding to the top level DOM Tree element\n\nThe function may perform any type of change on the DOM tree; the typical behavior is to add or remove attributes on specific elements. Some transformations are included in the package and can be used as examples; see the L{transform} module of the distribution. These are:\n\n - The C{@name} attribute of the C{meta} element is copied into a C{@property} attribute of the same element\n - Interpreting the 'openid' references in the header. See L{transform.OpenID} for further details.\n - Implementing the Dublin Core dialect to include DC statements from the header.  See L{transform.DublinCore} for further details.\n\nThe user of the package may refer add these transformers to L{Options} instance. Here is a possible usage with the \u201copenid\u201d transformer added to the call::\n from pyRdfa.options import Options\n from pyRdfa.transform.OpenID import OpenID_transform\n options = Options(transformers=[OpenID_transform])\n print pyRdfa(options=options).rdf_from_source('filename')\n\n\n@summary: RDFa parser (distiller)\n@requires: Python version 2.7 or python 3.8 or up\n@requires: U{RDFLib<http://rdflib.net>}; version 3.X is preferred.\n@requires: U{html5lib<http://code.google.com/p/html5lib/>} for the HTML5 parsing (note that version 1.0b1 and 1.0b2 should be avoided, it may lead to unicode encoding problems)\n@requires: U{httpheader<http://deron.meranda.us/python/httpheader/>}; however, a small modification had to make on the original file, so for this reason and to make distribution easier this module (single file) is added to the package.\n@organization: U{World Wide Web Consortium<http://www.w3.org>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n\n@var builtInTransformers: List of built-in transformers that are to be run regardless, because they are part of the RDFa spec\n@var CACHE_DIR_VAR: Environment variable used to define cache directories for RDFa vocabularies in case the default setting does not work or is not appropriate.\n@var rdfa_current_version: Current \"official\" version of RDFa that this package implements by default. This can be changed at the invocation of the package\n@var uri_schemes: List of registered (or widely used) URI schemes; used for warnings...\n\"\"\"\n\n__version__ = \"4.0.0\"\n__author__  = 'Ivan Herman'\n__contact__ = 'Ivan Herman, ivan@w3.org'\n__license__ = 'W3C\u00ae SOFTWARE NOTICE AND LICENSE, http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231'\n\nname = \"pyRdfa3\"\n\nimport sys\nPY3 = (sys.version_info[0] >= 3)\n\nif PY3 :\n\tfrom io import StringIO\nelse :\n\tfrom StringIO import StringIO\n\nimport os\nimport xml.dom.minidom\nif PY3 :\n\tfrom urllib.parse import urlparse\nelse :\n\tfrom urlparse import urlparse\n\nimport rdflib\nfrom rdflib\timport URIRef\nfrom rdflib\timport Literal\nfrom rdflib\timport BNode\nfrom rdflib\timport Namespace\nif rdflib.__version__ >= \"3.0.0\" :\n\tfrom rdflib\timport RDF  as ns_rdf\n\tfrom rdflib\timport RDFS as ns_rdfs\n\tfrom rdflib\timport Graph\nelse :\n\tfrom rdflib.RDFS  import RDFSNS as ns_rdfs\n\tfrom rdflib.RDF\t  import RDFNS  as ns_rdf\n\tfrom rdflib.Graph import Graph\n\n# Namespace, in the RDFLib sense, for the rdfa vocabulary\nns_rdfa\t\t= Namespace(\"http://www.w3.org/ns/rdfa#\")\n\nfrom .extras.httpheader   import acceptable_content_type, content_type\nfrom .transform.prototype import handle_prototypes\n\n# Vocabulary terms for vocab reporting\nRDFA_VOCAB  = ns_rdfa[\"usesVocabulary\"]\n\n# Namespace, in the RDFLib sense, for the XSD Datatypes\nns_xsd\t\t= Namespace('http://www.w3.org/2001/XMLSchema#')\n\n# Namespace, in the RDFLib sense, for the distiller vocabulary, used as part of the processor graph\nns_distill\t= Namespace(\"http://www.w3.org/2007/08/pyRdfa/vocab#\")\n\ndebug = False\n\n#########################################################################################################\n\n# Exception/error handling. Essentially, all the different exceptions are re-packaged into\n# separate exception class, to allow for an easier management on the user level\n\nclass RDFaError(Exception) :\n\t\"\"\"Superclass exceptions representing error conditions defined by the RDFa 1.1 specification.\n\tIt does not add any new functionality to the\n\tException class.\"\"\"\n\tdef __init__(self, msg) :\n\t\tself.msg = msg\n\t\tException.__init__(self)\n\nclass FailedSource(RDFaError) :\n\t\"\"\"Raised when the original source cannot be accessed. It does not add any new functionality to the\n\tException class.\"\"\"\n\tdef __init__(self, msg, http_code = None) :\n\t\tself.msg\t\t= msg\n\t\tself.http_code \t= http_code\n\t\tRDFaError.__init__(self, msg)\n\nclass HTTPError(RDFaError) :\n\t\"\"\"Raised when HTTP problems are detected. It does not add any new functionality to the\n\tException class.\"\"\"\n\tdef __init__(self, http_msg, http_code) :\n\t\tself.msg\t\t= http_msg\n\t\tself.http_code\t= http_code\n\t\tRDFaError.__init__(self,http_msg)\n\nclass ProcessingError(RDFaError) :\n\t\"\"\"Error found during processing. It does not add any new functionality to the\n\tException class.\"\"\"\n\tpass\n\nclass pyRdfaError(Exception) :\n\t\"\"\"Superclass exceptions representing error conditions outside the RDFa 1.1 specification.\"\"\"\n\tpass\n\n# Error and Warning RDFS classes\nRDFA_Error                  = ns_rdfa[\"Error\"]\nRDFA_Warning                = ns_rdfa[\"Warning\"]\nRDFA_Info                   = ns_rdfa[\"Information\"]\nNonConformantMarkup         = ns_rdfa[\"DocumentError\"]\nUnresolvablePrefix          = ns_rdfa[\"UnresolvedCURIE\"]\nUnresolvableReference       = ns_rdfa[\"UnresolvedCURIE\"]\nUnresolvableTerm            = ns_rdfa[\"UnresolvedTerm\"]\nVocabReferenceError         = ns_rdfa[\"VocabReferenceError\"]\nPrefixRedefinitionWarning   = ns_rdfa[\"PrefixRedefinition\"]\n\nFileReferenceError          = ns_distill[\"FileReferenceError\"]\nHTError                     = ns_distill[\"HTTPError\"]\nIncorrectPrefixDefinition   = ns_distill[\"IncorrectPrefixDefinition\"]\nIncorrectBlankNodeUsage     = ns_distill[\"IncorrectBlankNodeUsage\"]\nIncorrectLiteral            = ns_distill[\"IncorrectLiteral\"]\n\n# Error message texts\nerr_no_blank_node                    = \"Blank node in %s position is not allowed; ignored\"\n\nerr_redefining_URI_as_prefix        = \"'%s' a registered or an otherwise used URI scheme, but is defined as a prefix here; is this a mistake? (see, eg, http://en.wikipedia.org/wiki/URI_scheme or http://www.iana.org/assignments/uri-schemes.html for further information for most of the URI schemes)\"\nerr_xmlns_deprecated                = \"The usage of 'xmlns' for prefix definition is deprecated; please use the 'prefix' attribute instead (definition for '%s')\"\nerr_bnode_local_prefix              = \"The '_' local CURIE prefix is reserved for blank nodes, and cannot be defined as a prefix\"\nerr_col_local_prefix                = \"The character ':' is not valid in a CURIE Prefix, and cannot be used in a prefix definition (definition for '%s')\"\nerr_missing_URI_prefix              = \"Missing URI in prefix declaration for '%s' (in '%s')\"\nerr_invalid_prefix                  = \"Invalid prefix declaration '%s' (in '%s')\"\nerr_no_default_prefix               = \"Default prefix cannot be changed (in '%s')\"\nerr_prefix_and_xmlns                = \"@prefix setting for '%s' overrides the 'xmlns:%s' setting; may be a source of problem if same file is run through RDFa 1.0\"\nerr_non_ncname_prefix               = \"Non NCNAME '%s' in prefix definition (in '%s'); ignored\"\nerr_absolute_reference              = \"CURIE Reference part contains an authority part: %s (in '%s'); ignored\"\nerr_query_reference                 = \"CURIE Reference query part contains an unauthorized character: %s (in '%s'); ignored\"\nerr_fragment_reference              = \"CURIE Reference fragment part contains an unauthorized character: %s (in '%s'); ignored\"\nerr_lang                            = \"There is a problem with language setting; either both xml:lang and lang used on an element with different values, or, for (X)HTML5, only xml:lang is used.\"\nerr_URI_scheme                      = \"Unusual URI scheme used in <%s>; may that be a mistake, e.g., resulting from using an undefined CURIE prefix or an incorrect CURIE?\"\nerr_illegal_safe_CURIE              = \"Illegal safe CURIE: %s; ignored\"\nerr_no_CURIE_in_safe_CURIE          = \"Safe CURIE is used, but the value does not correspond to a defined CURIE: [%s]; ignored\"\nerr_undefined_terms                 = \"'%s' is used as a term, but has not been defined as such; ignored\"\nerr_non_legal_CURIE_ref             = \"Relative URI is not allowed in this position (or not a legal CURIE reference) '%s'; ignored\"\nerr_undefined_CURIE                 = \"Undefined CURIE: '%s'; ignored\"\nerr_prefix_redefinition             = \"Prefix '%s' (defined in the initial RDFa context or in an ancestor) is redefined\"\n\nerr_unusual_char_in_URI             = \"Unusual character in uri: %s; possible error?\"\n\n#############################################################################################\n\nfrom .state            import ExecutionContext\nfrom .parse            import parse_one_node\nfrom .options          import Options\nfrom .transform        import top_about, empty_safe_curie, vocab_for_role\nfrom .utils            import URIOpener\nfrom .host             import HostLanguage, MediaTypes, preferred_suffixes, content_to_host_language\n\n# Environment variable used to characterize cache directories for RDFa vocabulary files.\nCACHE_DIR_VAR           = \"PyRdfaCacheDir\"\n\n# current \"official\" version of RDFa that this package implements. This can be changed at the invocation of the package\nrdfa_current_version    = \"1.1\"\n\n# I removed schemes that would not appear as a prefix anyway, like iris.beep\n# http://en.wikipedia.org/wiki/URI_scheme seems to be a good source of information\n# as well as http://www.iana.org/assignments/uri-schemes.html\n# There are some overlaps here, but better more than not enough...\n\n# This comes from wikipedia\nregistered_iana_schemes = [\n\t\"aaa\",\"aaas\",\"acap\",\"cap\",\"cid\",\"crid\",\"data\",\"dav\",\"dict\",\"did\",\"dns\",\"fax\",\"file\", \"ftp\",\"geo\",\"go\",\n\t\"gopher\",\"h323\",\"http\",\"https\",\"iax\",\"icap\",\"im\",\"imap\",\"info\",\"ipp\",\"iris\",\"ldap\", \"lsid\",\n\t\"mailto\",\"mid\",\"modem\",\"msrp\",\"msrps\", \"mtqp\", \"mupdate\",\"news\",\"nfs\",\"nntp\",\"opaquelocktoken\",\n\t\"pop\",\"pres\", \"prospero\",\"rstp\",\"rsync\", \"service\",\"shttp\",\"sieve\",\"sip\",\"sips\", \"sms\", \"snmp\", \"soap\", \"tag\",\n\t\"tel\",\"telnet\", \"tftp\", \"thismessage\",\"tn3270\",\"tip\",\"tv\",\"urn\",\"vemmi\",\"wais\",\"ws\", \"wss\", \"xmpp\"\n]\n\n# This comes from wikipedia, too\nunofficial_common = [\n\t\"about\", \"adiumxtra\", \"aim\", \"apt\", \"afp\", \"aw\", \"bitcoin\", \"bolo\", \"callto\", \"chrome\", \"coap\",\n\t\"content\", \"cvs\", \"doi\", \"ed2k\", \"facetime\", \"feed\", \"finger\", \"fish\", \"git\", \"gg\",\n\t\"gizmoproject\", \"gtalk\", \"irc\", \"ircs\", \"irc6\", \"itms\", \"jar\", \"javascript\",\n\t\"keyparc\", \"lastfm\", \"ldaps\", \"magnet\", \"maps\", \"market\", \"message\", \"mms\",\n\t\"msnim\", \"mumble\", \"mvn\", \"notes\", \"palm\", \"paparazzi\", \"psync\", \"rmi\",\n\t\"secondlife\", \"sgn\", \"skype\", \"spotify\", \"ssh\", \"sftp\", \"smb\", \"soldat\",\n\t\"steam\", \"svn\", \"teamspeak\", \"things\", \"udb\", \"unreal\", \"ut2004\",\n\t\"ventrillo\", \"view-source\", \"webcal\", \"wtai\", \"wyciwyg\", \"xfire\", \"xri\", \"ymsgr\"\n]\n\n# These come from the IANA page\nhistorical_iana_schemes = [\n\t\"fax\", \"mailserver\", \"modem\", \"pack\", \"prospero\", \"snews\", \"videotex\", \"wais\"\n]\n\nprovisional_iana_schemes = [\n\t\"afs\", \"dtn\", \"dvb\", \"icon\", \"ipn\", \"jms\", \"oid\", \"rsync\", \"ni\"\n]\n\nother_used_schemes = [\n\t\"hdl\", \"isbn\", \"issn\", \"mstp\", \"rtmp\", \"rtspu\", \"stp\"\n]\n\nuri_schemes = registered_iana_schemes + unofficial_common + historical_iana_schemes + provisional_iana_schemes + other_used_schemes\n\n# List of built-in transformers that are to be run regardless, because they are part of the RDFa spec\nbuiltInTransformers = [\n\tempty_safe_curie, top_about, vocab_for_role\n]\n\n#########################################################################################################\nclass pyRdfa :\n\t\"\"\"Main processing class for the distiller\n\n\t@ivar options: an instance of the L{Options} class\n\t@ivar media_type: the preferred default media type, possibly set at initialization\n\t@ivar base: the base value, possibly set at initialization\n\t@ivar http_status: HTTP Status, to be returned when the package is used via a CGI entry. Initially set to 200, may be modified by exception handlers\n\t\"\"\"\n\tdef __init__(self, options = None, base = \"\", media_type = \"\", rdfa_version = None) :\n\t\t\"\"\"\n\t\t@keyword options: Options for the distiller\n\t\t@type options: L{Options}\n\t\t@keyword base: URI for the default \"base\" value (usually the URI of the file to be processed)\n\t\t@keyword media_type: explicit setting of the preferred media type (a.k.a. content type) of the the RDFa source\n\t\t@keyword rdfa_version: the RDFa version that should be used. If not set, the value of the global L{rdfa_current_version} variable is used\n\t\t\"\"\"\n\t\tself.http_status = 200\n\n\t\tself.base = base\n\t\tif base == \"\" :\n\t\t\tself.required_base = None\n\t\telse :\n\t\t\tself.required_base\t= base\n\t\tself.charset \t\t= None\n\n\t\t# predefined content type\n\t\tself.media_type = media_type\n\n\t\tif options == None :\n\t\t\tself.options = Options()\n\t\telse :\n\t\t\tself.options = options\n\n\t\tif media_type != \"\" :\n\t\t\tself.options.set_host_language(self.media_type)\n\n\t\tif rdfa_version is not None :\n\t\t\tself.rdfa_version = rdfa_version\n\t\telse :\n\t\t\tself.rdfa_version = None\n\n\tdef _get_input(self, name) :\n\t\t\"\"\"\n\t\tTrying to guess whether \"name\" is a URI or a string (for a file); it then tries to open this source accordingly,\n\t\treturning a file-like object. If name is none of these, it returns the input argument (that should\n\t\tbe, supposedly, a file-like object already).\n\n\t\tIf the media type has not been set explicitly at initialization of this instance,\n\t\tthe method also sets the media_type based on the HTTP GET response or the suffix of the file. See\n\t\tL{host.preferred_suffixes} for the suffix to media type mapping.\n\n\t\t@param name: identifier of the input source\n\t\t@type name: string or a file-like object\n\t\t@return: a file like object if opening \"name\" is possible and successful, \"name\" otherwise\n\t\t\"\"\"\n\t\ttry :\n\t\t\t# Python 2 branch\n\t\t\tisstring = isinstance(name, basestring)\n\t\texcept :\n\t\t\t# Python 3 branch\n\t\t\tisstring = isinstance(name, str)\n\n\t\ttry :\n\t\t\tif isstring :\n\t\t\t\t# check if this is a URI, ie, if there is a valid 'scheme' part\n\t\t\t\t# otherwise it is considered to be a simple file\n\t\t\t\tif urlparse(name)[0] != \"\" :\n\t\t\t\t\turl_request \t  = URIOpener(name)\n\t\t\t\t\tself.base \t\t  = url_request.location\n\t\t\t\t\tif self.media_type == \"\" :\n\t\t\t\t\t\tif url_request.content_type in content_to_host_language :\n\t\t\t\t\t\t\tself.media_type = url_request.content_type\n\t\t\t\t\t\telse :\n\t\t\t\t\t\t\tself.media_type = MediaTypes.xml\n\t\t\t\t\t\tself.options.set_host_language(self.media_type)\n\t\t\t\t\tself.charset = url_request.charset\n\t\t\t\t\tif self.required_base == None :\n\t\t\t\t\t\tself.required_base = name\n\t\t\t\t\treturn url_request.data\n\t\t\t\telse :\n\t\t\t\t\t# Creating a File URI for this thing\n\t\t\t\t\tif self.required_base == None :\n\t\t\t\t\t\tself.required_base = \"file://\" + os.path.join(os.getcwd(),name)\n\t\t\t\t\tif self.media_type == \"\" :\n\t\t\t\t\t\tself.media_type = MediaTypes.xml\n\t\t\t\t\t\t# see if the default should be overwritten\n\t\t\t\t\t\tfor suffix in preferred_suffixes :\n\t\t\t\t\t\t\tif name.endswith(suffix) :\n\t\t\t\t\t\t\t\tself.media_type = preferred_suffixes[suffix]\n\t\t\t\t\t\t\t\tself.charset = 'utf-8'\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tself.options.set_host_language(self.media_type)\n\t\t\t\t\treturn open(name)\n\t\t\telse :\n\t\t\t\treturn name\n\t\texcept HTTPError :\n\t\t\traise sys.exc_info()[1]\n\t\texcept RDFaError as e :\n\t\t\traise e\n\t\texcept :\n\t\t\t(type, value, traceback) = sys.exc_info()\n\t\t\traise FailedSource(value)\n\n\t####################################################################################################################\n\t# Externally used methods\n\t#\n\tdef graph_from_DOM(self, dom, graph = None, pgraph = None) :\n\t\t\"\"\"\n\t\tExtract the RDF Graph from a DOM tree. This is where the real processing happens. All other methods get down to this\n\t\tone, eventually (e.g., after opening a URI and parsing it into a DOM).\n\t\t@param dom: a DOM Node element, the top level entry node for the whole tree (i.e., the C{dom.documentElement} is used to initiate processing down the node hierarchy)\n\t\t@keyword graph: an RDF Graph (if None, than a new one is created)\n\t\t@type graph: rdflib Graph instance.\n\t\t@keyword pgraph: an RDF Graph to hold (possibly) the processor graph content. If None, and the error/warning triples are to be generated, they will be added to the returned graph. Otherwise they are stored in this graph.\n\t\t@type pgraph: rdflib Graph instance\n\t\t@return: an RDF Graph\n\t\t@rtype: rdflib Graph instance\n\t\t\"\"\"\n\t\tdef copyGraph(tog, fromg) :\n\t\t\tfor t in fromg :\n\t\t\t\ttog.add(t)\n\t\t\tfor k,ns in fromg.namespaces() :\n\t\t\t\ttog.bind(k,ns)\n\n\t\tif graph == None :\n\t\t\t# Create the RDF Graph, that will contain the return triples...\n\t\t\tgraph   = Graph()\n\n\t\t# this will collect the content, the 'default graph', as called in the RDFa spec\n\t\tdefault_graph = Graph()\n\n\t\t# get the DOM tree\n\t\ttopElement = dom.documentElement\n\n\t\t# Create the initial state. This takes care of things\n\t\t# like base, top level namespace settings, etc.\n\t\tstate = ExecutionContext(topElement, default_graph, base=self.required_base if self.required_base != None else \"\", options=self.options, rdfa_version=self.rdfa_version)\n\n\t\t# Perform the built-in and external transformations on the HTML tree.\n\t\tfor trans in self.options.transformers + builtInTransformers :\n\t\t\ttrans(topElement, self.options, state)\n\n\t\t# This may have changed if the state setting detected an explicit version information:\n\t\tself.rdfa_version = state.rdfa_version\n\n\t\t# The top level subject starts with the current document; this\n\t\t# is used by the recursion\n\t\t# this function is the real workhorse\n\t\tparse_one_node(topElement, default_graph, None, state, [])\n\n\t\t# Massage the output graph in term of rdfa:Pattern and rdfa:copy\n\t\thandle_prototypes(default_graph)\n\n\t\t# If the RDFS expansion has to be made, here is the place...\n\t\tif self.options.vocab_expansion :\n\t\t\tfrom .rdfs.process import process_rdfa_sem\n\t\t\tprocess_rdfa_sem(default_graph, self.options)\n\n\t\t# Experimental feature: nothing for now, this is kept as a placeholder\n\t\tif self.options.experimental_features :\n\t\t\tpass\n\n\t\t# What should be returned depends on the way the options have been set up\n\t\tif self.options.output_default_graph :\n\t\t\tcopyGraph(graph, default_graph)\n\t\t\tif self.options.output_processor_graph :\n\t\t\t\tif pgraph != None :\n\t\t\t\t\tcopyGraph(pgraph, self.options.processor_graph.graph)\n\t\t\t\telse :\n\t\t\t\t\tcopyGraph(graph, self.options.processor_graph.graph)\n\t\telif self.options.output_processor_graph :\n\t\t\tif pgraph != None :\n\t\t\t\tcopyGraph(pgraph, self.options.processor_graph.graph)\n\t\t\telse :\n\t\t\t\tcopyGraph(graph, self.options.processor_graph.graph)\n\n\t\t# this is necessary if several DOM trees are handled in a row...\n\t\tself.options.reset_processor_graph()\n\n\t\treturn graph\n\n\tdef graph_from_source(self, name, graph = None, rdfOutput = False, pgraph = None) :\n\t\t\"\"\"\n\t\tExtract an RDF graph from an RDFa source. The source is parsed, the RDF extracted, and the RDFa Graph is\n\t\treturned. This is a front-end to the L{pyRdfa.graph_from_DOM} method.\n\n\t\t@param name: a URI, a file name, or a file-like object\n\t\t@param graph: rdflib Graph instance. If None, a new one is created.\n\t\t@param pgraph: rdflib Graph instance for the processor graph. If None, and the error/warning triples are to be generated, they will be added to the returned graph. Otherwise they are stored in this graph.\n\t\t@param rdfOutput: whether runtime exceptions should be turned into RDF and returned as part of the processor graph\n\t\t@return: an RDF Graph\n\t\t@rtype: rdflib Graph instance\n\t\t\"\"\"\n\t\tdef copyErrors(tog, options) :\n\t\t\tif tog == None :\n\t\t\t\ttog = Graph()\n\t\t\tif options.output_processor_graph :\n\t\t\t\tfor t in options.processor_graph.graph :\n\t\t\t\t\ttog.add(t)\n\t\t\t\t\tif pgraph != None : pgraph.add(t)\n\t\t\t\tfor k,ns in options.processor_graph.graph.namespaces() :\n\t\t\t\t\ttog.bind(k,ns)\n\t\t\t\t\tif pgraph != None : pgraph.bind(k,ns)\n\t\t\toptions.reset_processor_graph()\n\t\t\treturn tog\n\n\t\t# Separating this for a forward Python 3 compatibility\n\t\ttry :\n\t\t\t# Python 2 branch\n\t\t\tisstring = isinstance(name, basestring)\n\t\texcept :\n\t\t\t# Python 3 branch\n\t\t\tisstring = isinstance(name, str)\n\n\t\ttry :\n\t\t\t# First, open the source... Possible HTTP errors are returned as error triples\n\t\t\tinput = None\n\t\t\ttry :\n\t\t\t\tinput = self._get_input(name)\n\t\t\texcept FailedSource as ex :\n\t\t\t\tf = sys.exc_info()[1]\n\t\t\t\tself.http_status = 400\n\t\t\t\tif not rdfOutput : raise Exception(ex.msg)\n\t\t\t\terr = self.options.add_error(ex.msg, FileReferenceError, name)\n\t\t\t\tself.options.processor_graph.add_http_context(err, 400)\n\t\t\t\treturn copyErrors(graph, self.options)\n\t\t\texcept HTTPError as ex :\n\t\t\t\th = sys.exc_info()[1]\n\t\t\t\tself.http_status = h.http_code\n\t\t\t\tif not rdfOutput : raise Exception(ex.msg)\n\t\t\t\terr = self.options.add_error(\"HTTP Error: %s (%s)\" % (h.http_code,h.msg), HTError, name)\n\t\t\t\tself.options.processor_graph.add_http_context(err, h.http_code)\n\t\t\t\treturn copyErrors(graph, self.options)\n\t\t\texcept RDFaError as ex:\n\t\t\t\te = sys.exc_info()[1]\n\t\t\t\tself.http_status = 500\n\t\t\t\t# Something nasty happened:-(\n\t\t\t\tif not rdfOutput : raise Exception(ex.msg)\n\t\t\t\terr = self.options.add_error(str(ex.msg), context = name)\n\t\t\t\tself.options.processor_graph.add_http_context(err, 500)\n\t\t\t\treturn copyErrors(graph, self.options)\n\t\t\texcept Exception as ex :\n\t\t\t\te = sys.exc_info()[1]\n\t\t\t\tself.http_status = 500\n\t\t\t\t# Something nasty happened:-(\n\t\t\t\tif not rdfOutput : raise ex\n\t\t\t\terr = self.options.add_error(str(e), context = name)\n\t\t\t\tself.options.processor_graph.add_http_context(err, 500)\n\t\t\t\treturn copyErrors(graph, self.options)\n\n\t\t\tdom = None\n\t\t\ttry :\n\t\t\t\tmsg = \"\"\n\t\t\t\tparser = None\n\t\t\t\tif self.options.host_language == HostLanguage.html5 :\n\t\t\t\t\timport warnings\n\t\t\t\t\twarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\t\t\t\t\timport html5lib\n\t\t\t\t\tparser = html5lib.HTMLParser(tree=html5lib.treebuilders.getTreeBuilder(\"dom\"))\n\t\t\t\t\tif self.charset :\n\t\t\t\t\t\t# This means the HTTP header has provided a charset, or the\n\t\t\t\t\t\t# file is a local file when we suppose it to be a utf-8\n\t\t\t\t\t\t#\n\t\t\t\t\t\t# 2020-01-20, Ivan Herman\n\t\t\t\t\t\t#   for some reasons the python3 version ran into a problem with this html5lib call\n\t\t\t\t\t\t#   the override_encoding argument was not accepted.\n\t\t\t\t\t\t# dom = parser.parse(input, override_encoding=self.charset)\n\t\t\t\t\t\tdom = parser.parse(input)\n\t\t\t\t\telse :\n\t\t\t\t\t\t# No charset set. The HTMLLib parser tries to sniff into the\n\t\t\t\t\t\t# the file to find a meta header for the charset; if that\n\t\t\t\t\t\t# works, fine, otherwise it falls back on window-...\n\t\t\t\t\t\tdom = parser.parse(input)\n\n\t\t\t\t\ttry :\n\t\t\t\t\t\tif isstring :\n\t\t\t\t\t\t\tinput.close()\n\t\t\t\t\t\t\tinput = self._get_input(name)\n\t\t\t\t\t\telse :\n\t\t\t\t\t\t\tinput.seek(0)\n\t\t\t\t\t\tfrom .host import adjust_html_version\n\t\t\t\t\t\tself.rdfa_version = adjust_html_version(input, self.rdfa_version)\n\t\t\t\t\texcept :\n\t\t\t\t\t\t# if anything goes wrong, it is not really important; rdfa version stays what it was...\n\t\t\t\t\t\tpass\n\n\t\t\t\telse :\n\t\t\t\t\tfrom .host import adjust_xhtml_and_version\n\t\t\t\t\tif isinstance(input, StringIO) or isinstance(input, file):\n\t\t\t\t\t\tparse = xml.dom.minidom.parse\n\t\t\t\t\telse:\n\t\t\t\t\t\tparse = xml.dom.minidom.parseString\n\t\t\t\t\tdom = parse(input)\n\t\t\t\t\t(adjusted_host_language, version) = adjust_xhtml_and_version(dom, self.options.host_language, self.rdfa_version)\n\t\t\t\t\tself.options.host_language = adjusted_host_language\n\t\t\t\t\tself.rdfa_version          = version\n\t\t\texcept ImportError :\n\t\t\t\tmsg = \"HTML5 parser not available. Try installing html5lib <http://code.google.com/p/html5lib>\"\n\t\t\t\traise ImportError(msg)\n\t\t\texcept Exception :\n\t\t\t\te = sys.exc_info()[1]\n\t\t\t\t# These are various parsing exception. Per spec, this is a case when\n\t\t\t\t# error triples MUST be returned, ie, the usage of rdfOutput (which switches between an HTML formatted\n\t\t\t\t# return page or a graph with error triples) does not apply\n\t\t\t\terr = self.options.add_error(str(e), context = name)\n\t\t\t\tself.http_status = 400\n\t\t\t\tself.options.processor_graph.add_http_context(err, 400)\n\t\t\t\treturn copyErrors(graph, self.options)\n\n\t\t\t# If we got here, we have a DOM tree to operate on...\n\t\t\treturn self.graph_from_DOM(dom, graph, pgraph)\n\t\texcept Exception :\n\t\t\t# Something nasty happened during the generation of the graph...\n\t\t\t(a,b,c) = sys.exc_info()\n\t\t\tsys.excepthook(a,b,c)\n\t\t\tif isinstance(b, ImportError) :\n\t\t\t\tself.http_status = None\n\t\t\telse :\n\t\t\t\tself.http_status = 500\n\t\t\tif not rdfOutput : raise b\n\t\t\terr = self.options.add_error(str(b), context = name)\n\t\t\tself.options.processor_graph.add_http_context(err, 500)\n\t\t\treturn copyErrors(graph, self.options)\n\n\tdef rdf_from_sources(self, names, outputFormat = \"turtle\", rdfOutput = False) :\n\t\t\"\"\"\n\t\tExtract and RDF graph from a list of RDFa sources and serialize them in one graph. The sources are parsed, the RDF\n\t\textracted, and serialization is done in the specified format.\n\t\t@param names: list of sources, each can be a URI, a file name, or a file-like object\n\t\t@keyword outputFormat: serialization format. Can be one of \"turtle\", \"n3\", \"xml\", \"pretty-xml\", \"nt\". \"xml\", \"pretty-xml\", \"json\" or \"json-ld\". \"turtle\" and \"n3\", \"xml\" and \"pretty-xml\", and \"json\" and \"json-ld\" are synonyms, respectively. Note that the JSON-LD serialization works with RDFLib 3.* only.\n\t\t@keyword rdfOutput: controls what happens in case an exception is raised. If the value is False, the caller is responsible handling it; otherwise a graph is returned with an error message included in the processor graph\n\t\t@type rdfOutput: boolean\n\t\t@return: a serialized RDF Graph\n\t\t@rtype: string\n\t\t\"\"\"\n\t\t# This is better because it gives access to the various, non-standard serializations\n\t\t# If it does not work because the extra are not installed, fall back to the standard\n\t\t# rdlib distribution...\n\n\t\tif rdflib.__version__ >= \"3.0.0\" :\n\t\t\tgraph = Graph()\n\t\telse :\n\t\t\t# We may need the extra utilities for older rdflib versions...\n\t\t\ttry :\n\t\t\t\tfrom pyRdfaExtras import MyGraph\n\t\t\t\tgraph = MyGraph()\n\t\t\texcept :\n\t\t\t\tgraph = Graph()\n\n\t\t# graph.bind(\"xsd\", Namespace('http://www.w3.org/2001/XMLSchema#'))\n\t\t# the value of rdfOutput determines the reaction on exceptions...\n\t\tfor name in names :\n\t\t\tself.graph_from_source(name, graph, rdfOutput)\n\n\t\t# Stupid difference between python2 and python3...\n\t\tif PY3 :\n\t\t\treturn str(graph.serialize(format=outputFormat), encoding='utf-8')\n\t\telse :\n\t\t\treturn graph.serialize(format=outputFormat)\n\n\n\tdef rdf_from_source(self, name, outputFormat = \"turtle\", rdfOutput = False) :\n\t\t\"\"\"\n\t\tExtract and RDF graph from an RDFa source and serialize it in one graph. The source is parsed, the RDF\n\t\textracted, and serialization is done in the specified format.\n\t\t@param name: a URI, a file name, or a file-like object\n\t\t@keyword outputFormat: serialization format. Can be one of \"turtle\", \"n3\", \"xml\", \"pretty-xml\", \"nt\". \"xml\", \"pretty-xml\", or \"json-ld\". \"turtle\" and \"n3\", or \"xml\" and \"pretty-xml\" are synonyms, respectively. Note that the JSON-LD serialization works with RDFLib 3.* only.\n\t\t@keyword rdfOutput: controls what happens in case an exception is raised. If the value is False, the caller is responsible handling it; otherwise a graph is returned with an error message included in the processor graph\n\t\t@type rdfOutput: boolean\n\t\t@return: a serialized RDF Graph\n\t\t@rtype: string\n\t\t\"\"\"\n\t\treturn self.rdf_from_sources([name], outputFormat, rdfOutput)\n\n################################################# CGI Entry point\ndef processURI(uri, outputFormat, form={}) :\n\t\"\"\"The standard processing of an RDFa uri options in a form; used as an entry point from a CGI call.\n\n\tThe call accepts extra form options (i.e., HTTP GET options) as follows:\n\n\t - C{graph=[output|processor|output,processor|processor,output]} specifying which graphs are returned. Default: C{output}\n\t - C{space_preserve=[true|false]} means that plain literals are normalized in terms of white spaces. Default: C{false}\n\t - C{rfa_version} provides the RDFa version that should be used for distilling. The string should be of the form \"1.0\" or \"1.1\". Default is the highest version the current package implements, currently \"1.1\"\n\t - C{host_language=[xhtml,html,xml]} : the host language. Used when files are uploaded or text is added verbatim, otherwise the HTTP return header should be used. Default C{xml}\n\t - C{embedded_rdf=[true|false]} : whether embedded turtle or RDF/XML content should be added to the output graph. Default: C{false}\n\t - C{vocab_expansion=[true|false]} : whether the vocabularies should be expanded through the restricted RDFS entailment. Default: C{false}\n\t - C{vocab_cache=[true|false]} : whether vocab caching should be performed or whether it should be ignored and vocabulary files should be picked up every time. Default: C{false}\n\t - C{vocab_cache_report=[true|false]} : whether vocab caching details should be reported. Default: C{false}\n\t - C{vocab_cache_bypass=[true|false]} : whether vocab caches have to be regenerated every time. Default: C{false}\n\t - C{rdfa_lite=[true|false]} : whether warnings should be generated for non RDFa Lite attribute usage. Default: C{false}\n\n\t@param uri: URI to access. Note that the C{text:} and C{uploaded:} fake URI values are treated separately; the former is for textual intput (in which case a StringIO is used to get the data) and the latter is for uploaded file, where the form gives access to the file directly.\n\t@param outputFormat: serialization format, as defined by the package. Currently \"xml\", \"turtle\", \"nt\", or \"json\". Default is \"turtle\", also used if any other string is given.\n\t@param form: extra call options (from the CGI call) to set up the local options\n\t@type form: cgi FieldStorage instance\n\t@return: serialized graph\n\t@rtype: string\n\t\"\"\"\n\tdef _get_option(param, compare_value, default) :\n\t\tparam_old = param.replace('_','-')\n\t\tif param in list(form.keys()) :\n\t\t\tval = form.getfirst(param).lower()\n\t\t\treturn val == compare_value\n\t\telif param_old in list(form.keys()) :\n\t\t\t# this is to ensure the old style parameters are still valid...\n\t\t\t# in the old days I used '-' in the parameters, the standard favours '_'\n\t\t\tval = form.getfirst(param_old).lower()\n\t\t\treturn val == compare_value\n\t\telse :\n\t\t\treturn default\n\n\tif uri == \"uploaded:\" :\n\t\tinput\t= form[\"uploaded\"].file\n\t\tbase\t= \"\"\n\telif uri == \"text:\" :\n\t\tinput\t= StringIO(form.getfirst(\"text\"))\n\t\tbase\t= \"\"\n\telse :\n\t\tinput\t= uri\n\t\tbase\t= uri\n\n\tif \"rdfa_version\" in list(form.keys()) :\n\t\trdfa_version = form.getfirst(\"rdfa_version\")\n\telse :\n\t\trdfa_version = None\n\n\t# working through the possible options\n\t# Host language: HTML, XHTML, or XML\n\t# Note that these options should be used for the upload and inline version only in case of a form\n\t# for real uris the returned content type should be used\n\tif \"host_language\" in list(form.keys()) :\n\t\tif form.getfirst(\"host_language\").lower() == \"xhtml\" :\n\t\t\tmedia_type = MediaTypes.xhtml\n\t\telif form.getfirst(\"host_language\").lower() == \"html\" :\n\t\t\tmedia_type = MediaTypes.html\n\t\telif form.getfirst(\"host_language\").lower() == \"svg\" :\n\t\t\tmedia_type = MediaTypes.svg\n\t\telif form.getfirst(\"host_language\").lower() == \"atom\" :\n\t\t\tmedia_type = MediaTypes.atom\n\t\telse :\n\t\t\tmedia_type = MediaTypes.xml\n\telse :\n\t\tmedia_type = \"\"\n\n\ttransformers = []\n\n\tcheck_lite = \"rdfa_lite\" in list(form.keys()) and form.getfirst(\"rdfa_lite\").lower() == \"true\"\n\n\t# The code below is left for backward compatibility only. In fact, these options are not exposed any more,\n\t# they are not really in use\n\tif \"extras\" in list(form.keys()) and form.getfirst(\"extras\").lower() == \"true\" :\n\t\tfrom .transform.metaname              \timport meta_transform\n\t\tfrom .transform.OpenID                \timport OpenID_transform\n\t\tfrom .transform.DublinCore            \timport DC_transform\n\t\tfor t in [OpenID_transform, DC_transform, meta_transform] :\n\t\t\ttransformers.append(t)\n\telse :\n\t\tif \"extra-meta\" in list(form.keys()) and form.getfirst(\"extra-meta\").lower() == \"true\" :\n\t\t\tfrom .transform.metaname import meta_transform\n\t\t\ttransformers.append(meta_transform)\n\t\tif \"extra-openid\" in list(form.keys()) and form.getfirst(\"extra-openid\").lower() == \"true\" :\n\t\t\tfrom .transform.OpenID import OpenID_transform\n\t\t\ttransformers.append(OpenID_transform)\n\t\tif \"extra-dc\" in list(form.keys()) and form.getfirst(\"extra-dc\").lower() == \"true\" :\n\t\t\tfrom .transform.DublinCore import DC_transform\n\t\t\ttransformers.append(DC_transform)\n\n\toutput_default_graph \t= True\n\toutput_processor_graph \t= False\n\t# Note that I use the 'graph' and the 'rdfagraph' form keys here. Reason is that\n\t# I used 'graph' in the previous versions, including the RDFa 1.0 processor,\n\t# so if I removed that altogether that would create backward incompatibilities\n\t# On the other hand, the RDFa 1.1 doc clearly refers to 'rdfagraph' as the standard\n\t# key.\n\ta = None\n\tif \"graph\" in list(form.keys()) :\n\t\ta = form.getfirst(\"graph\").lower()\n\telif \"rdfagraph\" in list(form.keys()) :\n\t\ta = form.getfirst(\"rdfagraph\").lower()\n\tif a != None :\n\t\tif a == \"processor\" :\n\t\t\toutput_default_graph \t= False\n\t\t\toutput_processor_graph \t= True\n\t\telif a == \"processor,output\" or a == \"output,processor\" :\n\t\t\toutput_processor_graph \t= True\n\n\tembedded_rdf        = _get_option( \"embedded_rdf\", \"true\", False)\n\tspace_preserve      = _get_option( \"space_preserve\", \"true\", True)\n\tvocab_cache         = _get_option( \"vocab_cache\", \"true\", True)\n\tvocab_cache_report  = _get_option( \"vocab_cache_report\", \"true\", False)\n\trefresh_vocab_cache = _get_option( \"vocab_cache_refresh\", \"true\", False)\n\tvocab_expansion     = _get_option( \"vocab_expansion\", \"true\", False)\n\tif vocab_cache_report : output_processor_graph = True\n\n\toptions = Options(output_default_graph   = output_default_graph,\n\t\t\t\t\t  output_processor_graph = output_processor_graph,\n\t\t\t\t\t  space_preserve         = space_preserve,\n\t\t\t\t\t  transformers           = transformers,\n\t\t\t\t\t  vocab_cache            = vocab_cache,\n\t\t\t\t\t  vocab_cache_report     = vocab_cache_report,\n\t\t\t\t\t  refresh_vocab_cache    = refresh_vocab_cache,\n\t\t\t\t\t  vocab_expansion        = vocab_expansion,\n\t\t\t\t\t  embedded_rdf           = embedded_rdf,\n\t\t\t\t\t  check_lite             = check_lite\n\t\t\t\t\t  )\n\tprocessor = pyRdfa(options = options, base = base, media_type = media_type, rdfa_version = rdfa_version)\n\n\t# Decide the output format; the issue is what should happen in case of a top level error like an inaccessibility of\n\t# the html source: should a graph be returned or an HTML page with an error message?\n\n\t# decide whether HTML or RDF should be sent.\n\thtmlOutput = False\n\t#if 'HTTP_ACCEPT' in os.environ :\n\t#\tacc = os.environ['HTTP_ACCEPT']\n\t#\tpossibilities = ['text/html',\n\t#\t\t\t\t\t 'application/rdf+xml',\n\t#\t\t\t\t\t 'text/turtle; charset=utf-8',\n\t#\t\t\t\t\t 'application/json',\n\t#\t\t\t\t\t 'application/ld+json',\n\t#\t\t\t\t\t 'text/rdf+n3']\n\t#\n\t#\t# this nice module does content negotiation and returns the preferred format\n\t#\tsg = acceptable_content_type(acc, possibilities)\n\t#\thtmlOutput = (sg != None and sg[0] == content_type('text/html'))\n\t#\tos.environ['rdfaerror'] = 'true'\n\n\t# This is really for testing purposes only, it is an unpublished flag to force RDF output no\n\t# matter what\n\ttry :\n\t\tgraph = processor.rdf_from_source(input, outputFormat, rdfOutput = (\"forceRDFOutput\" in list(form.keys())) or not htmlOutput)\n\t\tif outputFormat == \"n3\" :\n\t\t\tretval = 'Content-Type: text/rdf+n3; charset=utf-8\\n'\n\t\telif outputFormat == \"nt\" or outputFormat == \"turtle\" :\n\t\t\tretval = 'Content-Type: text/turtle; charset=utf-8\\n'\n\t\telif outputFormat == \"json-ld\" or outputFormat == \"json\" :\n\t\t\tretval = 'Content-Type: application/ld+json; charset=utf-8\\n'\n\t\telse :\n\t\t\tretval = 'Content-Type: application/rdf+xml; charset=utf-8\\n'\n\t\tretval += '\\n'\n\t\tretval += graph\n\t\treturn retval\n\texcept HTTPError :\n\t\t(type,h,traceback) = sys.exc_info()\n\t\timport cgi\n\n\t\tretval = 'Content-type: text/html; charset=utf-8\\nStatus: %s \\n\\n' % h.http_code\n\t\tretval += \"<html>\\n\"\n\t\tretval += \"<head>\\n\"\n\t\tretval += \"<title>HTTP Error in distilling RDFa content</title>\\n\"\n\t\tretval += \"</head><body>\\n\"\n\t\tretval += \"<h1>HTTP Error in distilling RDFa content</h1>\\n\"\n\t\tretval += \"<p>HTTP Error: %s (%s)</p>\\n\" % (h.http_code,h.msg)\n\t\tretval += \"<p>On URI: <code>'%s'</code></p>\\n\" % cgi.escape(uri)\n\t\tretval +=\"</body>\\n\"\n\t\tretval +=\"</html>\\n\"\n\t\treturn retval\n\texcept :\n\t\t# This branch should occur only if an exception is really raised, ie, if it is not turned\n\t\t# into a graph value.\n\t\t(type,value,traceback) = sys.exc_info()\n\n\t\timport traceback, cgi\n\n\t\tretval = 'Content-type: text/html; charset=utf-8\\nStatus: %s\\n\\n' % processor.http_status\n\t\tretval += \"<html>\\n\"\n\t\tretval += \"<head>\\n\"\n\t\tretval += \"<title>Exception in RDFa processing</title>\\n\"\n\t\tretval += \"</head><body>\\n\"\n\t\tretval += \"<h1>Exception in distilling RDFa</h1>\\n\"\n\t\tretval += \"<pre>\\n\"\n\t\tstrio  = StringIO()\n\t\ttraceback.print_exc(file=strio)\n\t\tretval += strio.getvalue()\n\t\tretval +=\"</pre>\\n\"\n\t\tretval +=\"<pre>%s</pre>\\n\" % value\n\t\tretval +=\"<h1>Distiller request details</h1>\\n\"\n\t\tretval +=\"<dl>\\n\"\n\t\tif uri == \"text:\" and \"text\" in form and form[\"text\"].value != None and len(form[\"text\"].value.strip()) != 0 :\n\t\t\tretval +=\"<dt>Text input:</dt><dd>%s</dd>\\n\" % cgi.escape(form[\"text\"].value).replace('\\n','<br/>')\n\t\telif uri == \"uploaded:\" :\n\t\t\tretval +=\"<dt>Uploaded file</dt>\\n\"\n\t\telse :\n\t\t\tretval +=\"<dt>URI received:</dt><dd><code>'%s'</code></dd>\\n\" % cgi.escape(uri)\n\t\tif \"host_language\" in list(form.keys()) :\n\t\t\tretval +=\"<dt>Media Type:</dt><dd>%s</dd>\\n\" % media_type\n\t\tif \"graph\" in list(form.keys()) :\n\t\t\tretval +=\"<dt>Requested graphs:</dt><dd>%s</dd>\\n\" % form.getfirst(\"graph\").lower()\n\t\telse :\n\t\t\tretval +=\"<dt>Requested graphs:</dt><dd>default</dd>\\n\"\n\t\tretval +=\"<dt>Output serialization format:</dt><dd> %s</dd>\\n\" % outputFormat\n\t\tif \"space_preserve\" in form : retval +=\"<dt>Space preserve:</dt><dd> %s</dd>\\n\" % form[\"space_preserve\"].value\n\t\tretval +=\"</dl>\\n\"\n\t\tretval +=\"</body>\\n\"\n\t\tretval +=\"</html>\\n\"\n\t\treturn retval\n"], "fixing_code": ["# -*- coding: utf-8 -*-\n\"\"\"\nRDFa 1.1 parser, also referred to as a \u201cRDFa Distiller\u201d. It is\ndeployed, via a CGI front-end, on the U{W3C RDFa 1.1 Distiller page<http://www.w3.org/2012/pyRdfa/>}.\n\nFor details on RDFa, the reader should consult the U{RDFa Core 1.1<http://www.w3.org/TR/rdfa-core/>}, U{XHTML+RDFa1.1<http://www.w3.org/TR/2010/xhtml-rdfa>}, and the U{RDFa 1.1 Lite<http://www.w3.org/TR/rdfa-lite/>} documents.\nThe U{RDFa 1.1 Primer<http://www.w3.org/TR/owl2-primer/>} may also prove helpful.\n\nThis package can also be downloaded U{from GitHub<https://github.com/RDFLib/pyrdfa3>}. The\ndistribution also includes the CGI front-end and a separate utility script to be run locally.\n\nNote that this package is an updated version of a U{previous RDFa distiller<http://www.w3.org/2007/08/pyRdfa>} that was developed\nfor RDFa 1.0. Although it reuses large portions of that code, it has been quite thoroughly rewritten, hence put in a completely\ndifferent project. (The version numbering has been continued, though, to avoid any kind of misunderstandings. This version has version numbers \"3.0.0\" or higher.)\n\n(Simple) Usage\n==============\nFrom a Python file, expecting a Turtle output::\n from pyRdfa import pyRdfa\n print pyRdfa().rdf_from_source('filename')\nOther output formats are also possible. E.g., to produce RDF/XML output, one could use::\n from pyRdfa import pyRdfa\n print pyRdfa().rdf_from_source('filename', outputFormat='pretty-xml')\nIt is also possible to embed an RDFa processing. Eg, using::\n from pyRdfa import pyRdfa\n graph = pyRdfa().graph_from_source('filename')\nreturns an RDFLib.Graph object instead of a serialization thereof. See the the description of the\nL{pyRdfa class<pyRdfa.pyRdfa>} for further possible entry points details.\n\nThere is also, as part of this module, a L{separate entry for CGI calls<processURI>}.\n\nReturn (serialization) formats\n------------------------------\n\nThe package relies on RDFLib. By default, it relies therefore on the serializers coming with the local RDFLib distribution. However, there has been some issues with serializers of older RDFLib releases; also, some output formats, like JSON-LD, are not (yet) part of the standard RDFLib distribution. A companion package, called pyRdfaExtras, is part of the download, and it includes some of those extra serializers. The extra format (not part of the RDFLib core) is U{JSON-LD<http://json-ld.org/spec/latest/json-ld-syntax/>}, whose 'key' is 'json', when used in the 'parse' method of an RDFLib graph.\n\n(Note in 2018: the bugs that needed pyRdfaExtras are gone with the RDFLib versions, and the json-ld serializer and parser can be U{downloaded from github<https://github.com/RDFLib/rdflib-jsonld>} (or installed via pip). This means that importing pyRdfaExtras is done only when running older (i.e., 2.X.X) RDFLib versions and can be safely ignored these days.)  \n\nOptions\n=======\n\nThe package also implements some optional features that are not part of the RDFa recommendations. At the moment these are:\n\n - possibility for plain literals to be normalized in terms of white spaces. Default: false. (The RDFa specification requires keeping the white spaces and leave applications to normalize them, if needed)\n - inclusion of embedded RDF: Turtle content may be enclosed in a C{script} element and typed as C{text/turtle}, U{defined by the RDF Working Group<http://www.w3.org/TR/turtle/>}. Alternatively, some XML dialects (e.g., SVG) allows the usage of RDF/XML as part of their core content to define metadata in RDF. For both of these cases pyRdfa parses these serialized RDF content and adds the resulting triples to the output Graph. Default: true.\n - extra, built-in transformers are executed on the DOM tree prior to RDFa processing (see below). These transformers can be provided by the end user.\n\nOptions are collected in an instance of the L{Options} class and may be passed to the processing functions as an extra argument. E.g., to allow the inclusion of embedded content::\n from pyRdfa.options import Options\n options = Options(embedded_rdf=True)\n print pyRdfa(options=options).rdf_from_source('filename')\n\nSee the description of the L{Options} class for the details.\n\n\nHost Languages\n==============\n\nRDFa 1.1. Core is defined for generic XML; there are specific documents to describe how the generic specification is applied to\nXHTML and HTML5.\n\npyRdfa makes an automatic switch among these based on the content type of the source as returned by an HTTP request. The following are the\npossible host languages:\n - if the content type is C{text/html}, the content is HTML5\n - if the content type is C{application/xhtml+xml} I{and} the right DTD is used, the content is XHTML1\n - if the content type is C{application/xhtml+xml} and no or an unknown DTD is used, the content is XHTML5\n - if the content type is C{application/svg+xml}, the content type is SVG\n - if the content type is C{application/atom+xml}, the content type is SVG\n - if the content type is C{application/xml} or C{application/xxx+xml} (but 'xxx' is not 'atom' or 'svg'), the content type is XML\n\nIf local files are used, pyRdfa makes a guess on the content type based on the file name suffix: C{.html} is for HTML5, C{.xhtml} for XHTML1, C{.svg} for SVG, anything else is considered to be general XML. Finally, the content type may be set by the caller when initializing the L{pyRdfa class<pyRdfa.pyRdfa>}.\n\nBeyond the differences described in the RDFa specification, the main difference is the parser used to parse the source. In the case of HTML5, pyRdfa uses an U{HTML5 parser<http://code.google.com/p/html5lib/>}; for all other cases the simple XML parser, part of the core Python environment, is used. This may be significant in the case of erroneous sources: indeed, the HTML5 parser may do adjustments on\nthe DOM tree before handing it over to the distiller. Furthermore, SVG is also recognized as a type that allows embedded RDF in the form of RDF/XML.\n\nSee the variables in the L{host} module if a new host language is added to the system. The current host language information is available for transformers via the option argument, too, and can be used to control the effect of the transformer.\n\nVocabularies\n============\n\nRDFa 1.1 has the notion of vocabulary files (using the C{@vocab} attribute) that may be used to expand the generated RDF graph. Expansion is based on some very simply RDF Schema and OWL statements on sub-properties and sub-classes, and equivalences.\n\npyRdfa implements this feature, although it does not do this by default. The extra C{vocab_expansion} parameter should be used for this extra step, for example::\n from pyRdfa.options import Options\n options = Options(vocab_expansion=True)\n print pyRdfa(options=options).rdf_from_source('filename')\n\nThe triples in the vocabulary files themselves (i.e., the small ontology in RDF Schema and OWL) are removed from the result, leaving the inferred property and type relationships only (additionally to the \u201ccore\u201d RDF content).\n\nVocabulary caching\n------------------\n\nBy default, pyRdfa uses a caching mechanism instead of fetching the vocabulary files each time their URI is met as a C{@vocab} attribute value. (This behavior can be switched off setting the C{vocab_cache} option to false.)\n\nCaching happens in a file system directory. The directory itself is determined by the platform the tool is used on, namely:\n - On Windows, it is the C{pyRdfa-cache} subdirectory of the C{%APPDATA%} environment variable\n - On MacOS, it is the C{~/Library/Application Support/pyRdfa-cache}\n - Otherwise, it is the C{~/.pyRdfa-cache}\n\nThis automatic choice can be overridden by the C{PyRdfaCacheDir} environment variable.\n\nCaching can be set to be read-only, i.e., the setup might generate the cache files off-line instead of letting the tool writing its own cache when operating, e.g., as a service on the Web. This can be achieved by making the cache directory read only.\n\nIf the directories are neither readable nor writable, the vocabulary files are retrieved via HTTP every time they are hit. This may slow down processing, it is advised to avoid such a setup for the package.\n\nThe cache includes a separate index file and a file for each vocabulary file. Cache control is based upon the C{EXPIRES} header of a vocabulary file\u2019s HTTP return header: when first seen, this data is stored in the index file and controls whether the cache has to be renewed or not. If the HTTP return header does not have this entry, the date is artificially set ot the current date plus one day.\n\n(The cache files themselves are dumped and loaded using U{Python\u2019s built in cPickle package<http://docs.python.org/release/2.7/library/pickle.html#module-cPickle>}. These are binary files. Care should be taken if they are managed by CVS: they must be declared as binary files when adding them to the repository.)\n\nRDFa 1.1 vs. RDFa 1.0\n=====================\n\nUnfortunately, RDFa 1.1 is I{not} fully backward compatible with RDFa 1.0, meaning that, in a few cases, the triples generated from an RDFa 1.1 source are not the same as for RDFa 1.0. (See the separate  U{section in the RDFa 1.1 specification<http://www.w3.org/TR/rdfa-core/#major-differences-with-rdfa-syntax-1.0>} for some further details.)\n\nThis distiller\u2019s default behavior is RDFa 1.1. However, if the source includes, in the top element of the file (e.g., the C{html} element) a C{@version} attribute whose value contains the C{RDFa 1.0} string, then the distiller switches to a RDFa 1.0 mode. (Although the C{@version} attribute is not required in RDFa 1.0, it is fairly commonly used.) Similarly, if the RDFa 1.0 DTD is used in the XHTML source, it will be taken into account (a very frequent setup is that an XHTML file is defined with that DTD and is served as text/html; pyRdfa will consider that file as XHTML5, i.e., parse it with the HTML5 parser, but interpret the RDFa attributes under the RDFa 1.0 rules).\n\nTransformers\n============\n\nThe package uses the concept of 'transformers': the parsed DOM tree is possibly\ntransformed I{before} performing the real RDFa processing. This transformer structure makes it possible to\nadd additional 'services' without distoring the core code of RDFa processing.\n\nA transformer is a function with three arguments:\n\n - C{node}: a DOM node for the top level element of the DOM tree\n - C{options}: the current L{Options} instance\n - C{state}: the current L{ExecutionContext} instance, corresponding to the top level DOM Tree element\n\nThe function may perform any type of change on the DOM tree; the typical behavior is to add or remove attributes on specific elements. Some transformations are included in the package and can be used as examples; see the L{transform} module of the distribution. These are:\n\n - The C{@name} attribute of the C{meta} element is copied into a C{@property} attribute of the same element\n - Interpreting the 'openid' references in the header. See L{transform.OpenID} for further details.\n - Implementing the Dublin Core dialect to include DC statements from the header.  See L{transform.DublinCore} for further details.\n\nThe user of the package may refer add these transformers to L{Options} instance. Here is a possible usage with the \u201copenid\u201d transformer added to the call::\n from pyRdfa.options import Options\n from pyRdfa.transform.OpenID import OpenID_transform\n options = Options(transformers=[OpenID_transform])\n print pyRdfa(options=options).rdf_from_source('filename')\n\n\n@summary: RDFa parser (distiller)\n@requires: Python version 2.7 or python 3.8 or up\n@requires: U{RDFLib<http://rdflib.net>}; version 3.X is preferred.\n@requires: U{html5lib<http://code.google.com/p/html5lib/>} for the HTML5 parsing (note that version 1.0b1 and 1.0b2 should be avoided, it may lead to unicode encoding problems)\n@requires: U{httpheader<http://deron.meranda.us/python/httpheader/>}; however, a small modification had to make on the original file, so for this reason and to make distribution easier this module (single file) is added to the package.\n@organization: U{World Wide Web Consortium<http://www.w3.org>}\n@author: U{Ivan Herman<a href=\"http://www.w3.org/People/Ivan/\">}\n@license: This software is available for use under the\nU{W3C\u00ae SOFTWARE NOTICE AND LICENSE<href=\"http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\">}\n\n@var builtInTransformers: List of built-in transformers that are to be run regardless, because they are part of the RDFa spec\n@var CACHE_DIR_VAR: Environment variable used to define cache directories for RDFa vocabularies in case the default setting does not work or is not appropriate.\n@var rdfa_current_version: Current \"official\" version of RDFa that this package implements by default. This can be changed at the invocation of the package\n@var uri_schemes: List of registered (or widely used) URI schemes; used for warnings...\n\"\"\"\n\n__version__ = \"4.0.0\"\n__author__  = 'Ivan Herman'\n__contact__ = 'Ivan Herman, ivan@w3.org'\n__license__ = 'W3C\u00ae SOFTWARE NOTICE AND LICENSE, http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231'\n\nname = \"pyRdfa3\"\n\nimport sys\nPY3 = (sys.version_info[0] >= 3)\n\nif PY3 :\n\tfrom io import StringIO\nelse :\n\tfrom StringIO import StringIO\n\nimport os\nimport xml.dom.minidom\nif PY3 :\n\tfrom urllib.parse import urlparse\nelse :\n\tfrom urlparse import urlparse\n\nimport rdflib\nfrom rdflib\timport URIRef\nfrom rdflib\timport Literal\nfrom rdflib\timport BNode\nfrom rdflib\timport Namespace\nif rdflib.__version__ >= \"3.0.0\" :\n\tfrom rdflib\timport RDF  as ns_rdf\n\tfrom rdflib\timport RDFS as ns_rdfs\n\tfrom rdflib\timport Graph\nelse :\n\tfrom rdflib.RDFS  import RDFSNS as ns_rdfs\n\tfrom rdflib.RDF\t  import RDFNS  as ns_rdf\n\tfrom rdflib.Graph import Graph\n\n# Namespace, in the RDFLib sense, for the rdfa vocabulary\nns_rdfa\t\t= Namespace(\"http://www.w3.org/ns/rdfa#\")\n\nfrom .extras.httpheader   import acceptable_content_type, content_type\nfrom .transform.prototype import handle_prototypes\n\n# Vocabulary terms for vocab reporting\nRDFA_VOCAB  = ns_rdfa[\"usesVocabulary\"]\n\n# Namespace, in the RDFLib sense, for the XSD Datatypes\nns_xsd\t\t= Namespace('http://www.w3.org/2001/XMLSchema#')\n\n# Namespace, in the RDFLib sense, for the distiller vocabulary, used as part of the processor graph\nns_distill\t= Namespace(\"http://www.w3.org/2007/08/pyRdfa/vocab#\")\n\ndebug = False\n\n#########################################################################################################\n\n# Exception/error handling. Essentially, all the different exceptions are re-packaged into\n# separate exception class, to allow for an easier management on the user level\n\nclass RDFaError(Exception) :\n\t\"\"\"Superclass exceptions representing error conditions defined by the RDFa 1.1 specification.\n\tIt does not add any new functionality to the\n\tException class.\"\"\"\n\tdef __init__(self, msg) :\n\t\tself.msg = msg\n\t\tException.__init__(self)\n\nclass FailedSource(RDFaError) :\n\t\"\"\"Raised when the original source cannot be accessed. It does not add any new functionality to the\n\tException class.\"\"\"\n\tdef __init__(self, msg, http_code = None) :\n\t\tself.msg\t\t= msg\n\t\tself.http_code \t= http_code\n\t\tRDFaError.__init__(self, msg)\n\nclass HTTPError(RDFaError) :\n\t\"\"\"Raised when HTTP problems are detected. It does not add any new functionality to the\n\tException class.\"\"\"\n\tdef __init__(self, http_msg, http_code) :\n\t\tself.msg\t\t= http_msg\n\t\tself.http_code\t= http_code\n\t\tRDFaError.__init__(self,http_msg)\n\nclass ProcessingError(RDFaError) :\n\t\"\"\"Error found during processing. It does not add any new functionality to the\n\tException class.\"\"\"\n\tpass\n\nclass pyRdfaError(Exception) :\n\t\"\"\"Superclass exceptions representing error conditions outside the RDFa 1.1 specification.\"\"\"\n\tpass\n\n# Error and Warning RDFS classes\nRDFA_Error                  = ns_rdfa[\"Error\"]\nRDFA_Warning                = ns_rdfa[\"Warning\"]\nRDFA_Info                   = ns_rdfa[\"Information\"]\nNonConformantMarkup         = ns_rdfa[\"DocumentError\"]\nUnresolvablePrefix          = ns_rdfa[\"UnresolvedCURIE\"]\nUnresolvableReference       = ns_rdfa[\"UnresolvedCURIE\"]\nUnresolvableTerm            = ns_rdfa[\"UnresolvedTerm\"]\nVocabReferenceError         = ns_rdfa[\"VocabReferenceError\"]\nPrefixRedefinitionWarning   = ns_rdfa[\"PrefixRedefinition\"]\n\nFileReferenceError          = ns_distill[\"FileReferenceError\"]\nHTError                     = ns_distill[\"HTTPError\"]\nIncorrectPrefixDefinition   = ns_distill[\"IncorrectPrefixDefinition\"]\nIncorrectBlankNodeUsage     = ns_distill[\"IncorrectBlankNodeUsage\"]\nIncorrectLiteral            = ns_distill[\"IncorrectLiteral\"]\n\n# Error message texts\nerr_no_blank_node                    = \"Blank node in %s position is not allowed; ignored\"\n\nerr_redefining_URI_as_prefix        = \"'%s' a registered or an otherwise used URI scheme, but is defined as a prefix here; is this a mistake? (see, eg, http://en.wikipedia.org/wiki/URI_scheme or http://www.iana.org/assignments/uri-schemes.html for further information for most of the URI schemes)\"\nerr_xmlns_deprecated                = \"The usage of 'xmlns' for prefix definition is deprecated; please use the 'prefix' attribute instead (definition for '%s')\"\nerr_bnode_local_prefix              = \"The '_' local CURIE prefix is reserved for blank nodes, and cannot be defined as a prefix\"\nerr_col_local_prefix                = \"The character ':' is not valid in a CURIE Prefix, and cannot be used in a prefix definition (definition for '%s')\"\nerr_missing_URI_prefix              = \"Missing URI in prefix declaration for '%s' (in '%s')\"\nerr_invalid_prefix                  = \"Invalid prefix declaration '%s' (in '%s')\"\nerr_no_default_prefix               = \"Default prefix cannot be changed (in '%s')\"\nerr_prefix_and_xmlns                = \"@prefix setting for '%s' overrides the 'xmlns:%s' setting; may be a source of problem if same file is run through RDFa 1.0\"\nerr_non_ncname_prefix               = \"Non NCNAME '%s' in prefix definition (in '%s'); ignored\"\nerr_absolute_reference              = \"CURIE Reference part contains an authority part: %s (in '%s'); ignored\"\nerr_query_reference                 = \"CURIE Reference query part contains an unauthorized character: %s (in '%s'); ignored\"\nerr_fragment_reference              = \"CURIE Reference fragment part contains an unauthorized character: %s (in '%s'); ignored\"\nerr_lang                            = \"There is a problem with language setting; either both xml:lang and lang used on an element with different values, or, for (X)HTML5, only xml:lang is used.\"\nerr_URI_scheme                      = \"Unusual URI scheme used in <%s>; may that be a mistake, e.g., resulting from using an undefined CURIE prefix or an incorrect CURIE?\"\nerr_illegal_safe_CURIE              = \"Illegal safe CURIE: %s; ignored\"\nerr_no_CURIE_in_safe_CURIE          = \"Safe CURIE is used, but the value does not correspond to a defined CURIE: [%s]; ignored\"\nerr_undefined_terms                 = \"'%s' is used as a term, but has not been defined as such; ignored\"\nerr_non_legal_CURIE_ref             = \"Relative URI is not allowed in this position (or not a legal CURIE reference) '%s'; ignored\"\nerr_undefined_CURIE                 = \"Undefined CURIE: '%s'; ignored\"\nerr_prefix_redefinition             = \"Prefix '%s' (defined in the initial RDFa context or in an ancestor) is redefined\"\n\nerr_unusual_char_in_URI             = \"Unusual character in uri: %s; possible error?\"\n\n#############################################################################################\n\nfrom .state            import ExecutionContext\nfrom .parse            import parse_one_node\nfrom .options          import Options\nfrom .transform        import top_about, empty_safe_curie, vocab_for_role\nfrom .utils            import URIOpener\nfrom .host             import HostLanguage, MediaTypes, preferred_suffixes, content_to_host_language\n\n# Environment variable used to characterize cache directories for RDFa vocabulary files.\nCACHE_DIR_VAR           = \"PyRdfaCacheDir\"\n\n# current \"official\" version of RDFa that this package implements. This can be changed at the invocation of the package\nrdfa_current_version    = \"1.1\"\n\n# I removed schemes that would not appear as a prefix anyway, like iris.beep\n# http://en.wikipedia.org/wiki/URI_scheme seems to be a good source of information\n# as well as http://www.iana.org/assignments/uri-schemes.html\n# There are some overlaps here, but better more than not enough...\n\n# This comes from wikipedia\nregistered_iana_schemes = [\n\t\"aaa\",\"aaas\",\"acap\",\"cap\",\"cid\",\"crid\",\"data\",\"dav\",\"dict\",\"did\",\"dns\",\"fax\",\"file\", \"ftp\",\"geo\",\"go\",\n\t\"gopher\",\"h323\",\"http\",\"https\",\"iax\",\"icap\",\"im\",\"imap\",\"info\",\"ipp\",\"iris\",\"ldap\", \"lsid\",\n\t\"mailto\",\"mid\",\"modem\",\"msrp\",\"msrps\", \"mtqp\", \"mupdate\",\"news\",\"nfs\",\"nntp\",\"opaquelocktoken\",\n\t\"pop\",\"pres\", \"prospero\",\"rstp\",\"rsync\", \"service\",\"shttp\",\"sieve\",\"sip\",\"sips\", \"sms\", \"snmp\", \"soap\", \"tag\",\n\t\"tel\",\"telnet\", \"tftp\", \"thismessage\",\"tn3270\",\"tip\",\"tv\",\"urn\",\"vemmi\",\"wais\",\"ws\", \"wss\", \"xmpp\"\n]\n\n# This comes from wikipedia, too\nunofficial_common = [\n\t\"about\", \"adiumxtra\", \"aim\", \"apt\", \"afp\", \"aw\", \"bitcoin\", \"bolo\", \"callto\", \"chrome\", \"coap\",\n\t\"content\", \"cvs\", \"doi\", \"ed2k\", \"facetime\", \"feed\", \"finger\", \"fish\", \"git\", \"gg\",\n\t\"gizmoproject\", \"gtalk\", \"irc\", \"ircs\", \"irc6\", \"itms\", \"jar\", \"javascript\",\n\t\"keyparc\", \"lastfm\", \"ldaps\", \"magnet\", \"maps\", \"market\", \"message\", \"mms\",\n\t\"msnim\", \"mumble\", \"mvn\", \"notes\", \"palm\", \"paparazzi\", \"psync\", \"rmi\",\n\t\"secondlife\", \"sgn\", \"skype\", \"spotify\", \"ssh\", \"sftp\", \"smb\", \"soldat\",\n\t\"steam\", \"svn\", \"teamspeak\", \"things\", \"udb\", \"unreal\", \"ut2004\",\n\t\"ventrillo\", \"view-source\", \"webcal\", \"wtai\", \"wyciwyg\", \"xfire\", \"xri\", \"ymsgr\"\n]\n\n# These come from the IANA page\nhistorical_iana_schemes = [\n\t\"fax\", \"mailserver\", \"modem\", \"pack\", \"prospero\", \"snews\", \"videotex\", \"wais\"\n]\n\nprovisional_iana_schemes = [\n\t\"afs\", \"dtn\", \"dvb\", \"icon\", \"ipn\", \"jms\", \"oid\", \"rsync\", \"ni\"\n]\n\nother_used_schemes = [\n\t\"hdl\", \"isbn\", \"issn\", \"mstp\", \"rtmp\", \"rtspu\", \"stp\"\n]\n\nuri_schemes = registered_iana_schemes + unofficial_common + historical_iana_schemes + provisional_iana_schemes + other_used_schemes\n\n# List of built-in transformers that are to be run regardless, because they are part of the RDFa spec\nbuiltInTransformers = [\n\tempty_safe_curie, top_about, vocab_for_role\n]\n\n#########################################################################################################\nclass pyRdfa :\n\t\"\"\"Main processing class for the distiller\n\n\t@ivar options: an instance of the L{Options} class\n\t@ivar media_type: the preferred default media type, possibly set at initialization\n\t@ivar base: the base value, possibly set at initialization\n\t@ivar http_status: HTTP Status, to be returned when the package is used via a CGI entry. Initially set to 200, may be modified by exception handlers\n\t\"\"\"\n\tdef __init__(self, options = None, base = \"\", media_type = \"\", rdfa_version = None) :\n\t\t\"\"\"\n\t\t@keyword options: Options for the distiller\n\t\t@type options: L{Options}\n\t\t@keyword base: URI for the default \"base\" value (usually the URI of the file to be processed)\n\t\t@keyword media_type: explicit setting of the preferred media type (a.k.a. content type) of the the RDFa source\n\t\t@keyword rdfa_version: the RDFa version that should be used. If not set, the value of the global L{rdfa_current_version} variable is used\n\t\t\"\"\"\n\t\tself.http_status = 200\n\n\t\tself.base = base\n\t\tif base == \"\" :\n\t\t\tself.required_base = None\n\t\telse :\n\t\t\tself.required_base\t= base\n\t\tself.charset \t\t= None\n\n\t\t# predefined content type\n\t\tself.media_type = media_type\n\n\t\tif options == None :\n\t\t\tself.options = Options()\n\t\telse :\n\t\t\tself.options = options\n\n\t\tif media_type != \"\" :\n\t\t\tself.options.set_host_language(self.media_type)\n\n\t\tif rdfa_version is not None :\n\t\t\tself.rdfa_version = rdfa_version\n\t\telse :\n\t\t\tself.rdfa_version = None\n\n\tdef _get_input(self, name) :\n\t\t\"\"\"\n\t\tTrying to guess whether \"name\" is a URI or a string (for a file); it then tries to open this source accordingly,\n\t\treturning a file-like object. If name is none of these, it returns the input argument (that should\n\t\tbe, supposedly, a file-like object already).\n\n\t\tIf the media type has not been set explicitly at initialization of this instance,\n\t\tthe method also sets the media_type based on the HTTP GET response or the suffix of the file. See\n\t\tL{host.preferred_suffixes} for the suffix to media type mapping.\n\n\t\t@param name: identifier of the input source\n\t\t@type name: string or a file-like object\n\t\t@return: a file like object if opening \"name\" is possible and successful, \"name\" otherwise\n\t\t\"\"\"\n\t\ttry :\n\t\t\t# Python 2 branch\n\t\t\tisstring = isinstance(name, basestring)\n\t\texcept :\n\t\t\t# Python 3 branch\n\t\t\tisstring = isinstance(name, str)\n\n\t\ttry :\n\t\t\tif isstring :\n\t\t\t\t# check if this is a URI, ie, if there is a valid 'scheme' part\n\t\t\t\t# otherwise it is considered to be a simple file\n\t\t\t\tif urlparse(name)[0] != \"\" :\n\t\t\t\t\turl_request \t  = URIOpener(name)\n\t\t\t\t\tself.base \t\t  = url_request.location\n\t\t\t\t\tif self.media_type == \"\" :\n\t\t\t\t\t\tif url_request.content_type in content_to_host_language :\n\t\t\t\t\t\t\tself.media_type = url_request.content_type\n\t\t\t\t\t\telse :\n\t\t\t\t\t\t\tself.media_type = MediaTypes.xml\n\t\t\t\t\t\tself.options.set_host_language(self.media_type)\n\t\t\t\t\tself.charset = url_request.charset\n\t\t\t\t\tif self.required_base == None :\n\t\t\t\t\t\tself.required_base = name\n\t\t\t\t\treturn url_request.data\n\t\t\t\telse :\n\t\t\t\t\t# Creating a File URI for this thing\n\t\t\t\t\tif self.required_base == None :\n\t\t\t\t\t\tself.required_base = \"file://\" + os.path.join(os.getcwd(),name)\n\t\t\t\t\tif self.media_type == \"\" :\n\t\t\t\t\t\tself.media_type = MediaTypes.xml\n\t\t\t\t\t\t# see if the default should be overwritten\n\t\t\t\t\t\tfor suffix in preferred_suffixes :\n\t\t\t\t\t\t\tif name.endswith(suffix) :\n\t\t\t\t\t\t\t\tself.media_type = preferred_suffixes[suffix]\n\t\t\t\t\t\t\t\tself.charset = 'utf-8'\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tself.options.set_host_language(self.media_type)\n\t\t\t\t\treturn open(name)\n\t\t\telse :\n\t\t\t\treturn name\n\t\texcept HTTPError :\n\t\t\traise sys.exc_info()[1]\n\t\texcept RDFaError as e :\n\t\t\traise e\n\t\texcept :\n\t\t\t(type, value, traceback) = sys.exc_info()\n\t\t\traise FailedSource(value)\n\n\t@staticmethod\n\tdef _validate_output_format(outputFormat):\n\t\t\"\"\"\n\t\tMalicious actors may create XSS style issues by using an illegal output format... better be careful\n\t\t\"\"\"\n\t\t# protection against possible malicious URL call\n\t\tif outputFormat not in [\"turtle\", \"n3\", \"xml\", \"pretty-xml\", \"nt\", \"json-ld\"] :\n\t\t\toutputFormat = \"turtle\"\n\t\treturn outputFormat\n\t\t\n\t####################################################################################################################\n\t# Externally used methods\n\t#\n\tdef graph_from_DOM(self, dom, graph = None, pgraph = None) :\n\t\t\"\"\"\n\t\tExtract the RDF Graph from a DOM tree. This is where the real processing happens. All other methods get down to this\n\t\tone, eventually (e.g., after opening a URI and parsing it into a DOM).\n\t\t@param dom: a DOM Node element, the top level entry node for the whole tree (i.e., the C{dom.documentElement} is used to initiate processing down the node hierarchy)\n\t\t@keyword graph: an RDF Graph (if None, than a new one is created)\n\t\t@type graph: rdflib Graph instance.\n\t\t@keyword pgraph: an RDF Graph to hold (possibly) the processor graph content. If None, and the error/warning triples are to be generated, they will be added to the returned graph. Otherwise they are stored in this graph.\n\t\t@type pgraph: rdflib Graph instance\n\t\t@return: an RDF Graph\n\t\t@rtype: rdflib Graph instance\n\t\t\"\"\"\n\t\tdef copyGraph(tog, fromg) :\n\t\t\tfor t in fromg :\n\t\t\t\ttog.add(t)\n\t\t\tfor k,ns in fromg.namespaces() :\n\t\t\t\ttog.bind(k,ns)\n\n\t\tif graph == None :\n\t\t\t# Create the RDF Graph, that will contain the return triples...\n\t\t\tgraph   = Graph()\n\n\t\t# this will collect the content, the 'default graph', as called in the RDFa spec\n\t\tdefault_graph = Graph()\n\n\t\t# get the DOM tree\n\t\ttopElement = dom.documentElement\n\n\t\t# Create the initial state. This takes care of things\n\t\t# like base, top level namespace settings, etc.\n\t\tstate = ExecutionContext(topElement, default_graph, base=self.required_base if self.required_base != None else \"\", options=self.options, rdfa_version=self.rdfa_version)\n\n\t\t# Perform the built-in and external transformations on the HTML tree.\n\t\tfor trans in self.options.transformers + builtInTransformers :\n\t\t\ttrans(topElement, self.options, state)\n\n\t\t# This may have changed if the state setting detected an explicit version information:\n\t\tself.rdfa_version = state.rdfa_version\n\n\t\t# The top level subject starts with the current document; this\n\t\t# is used by the recursion\n\t\t# this function is the real workhorse\n\t\tparse_one_node(topElement, default_graph, None, state, [])\n\n\t\t# Massage the output graph in term of rdfa:Pattern and rdfa:copy\n\t\thandle_prototypes(default_graph)\n\n\t\t# If the RDFS expansion has to be made, here is the place...\n\t\tif self.options.vocab_expansion :\n\t\t\tfrom .rdfs.process import process_rdfa_sem\n\t\t\tprocess_rdfa_sem(default_graph, self.options)\n\n\t\t# Experimental feature: nothing for now, this is kept as a placeholder\n\t\tif self.options.experimental_features :\n\t\t\tpass\n\n\t\t# What should be returned depends on the way the options have been set up\n\t\tif self.options.output_default_graph :\n\t\t\tcopyGraph(graph, default_graph)\n\t\t\tif self.options.output_processor_graph :\n\t\t\t\tif pgraph != None :\n\t\t\t\t\tcopyGraph(pgraph, self.options.processor_graph.graph)\n\t\t\t\telse :\n\t\t\t\t\tcopyGraph(graph, self.options.processor_graph.graph)\n\t\telif self.options.output_processor_graph :\n\t\t\tif pgraph != None :\n\t\t\t\tcopyGraph(pgraph, self.options.processor_graph.graph)\n\t\t\telse :\n\t\t\t\tcopyGraph(graph, self.options.processor_graph.graph)\n\n\t\t# this is necessary if several DOM trees are handled in a row...\n\t\tself.options.reset_processor_graph()\n\n\t\treturn graph\n\n\tdef graph_from_source(self, name, graph = None, rdfOutput = False, pgraph = None) :\n\t\t\"\"\"\n\t\tExtract an RDF graph from an RDFa source. The source is parsed, the RDF extracted, and the RDFa Graph is\n\t\treturned. This is a front-end to the L{pyRdfa.graph_from_DOM} method.\n\n\t\t@param name: a URI, a file name, or a file-like object\n\t\t@param graph: rdflib Graph instance. If None, a new one is created.\n\t\t@param pgraph: rdflib Graph instance for the processor graph. If None, and the error/warning triples are to be generated, they will be added to the returned graph. Otherwise they are stored in this graph.\n\t\t@param rdfOutput: whether runtime exceptions should be turned into RDF and returned as part of the processor graph\n\t\t@return: an RDF Graph\n\t\t@rtype: rdflib Graph instance\n\t\t\"\"\"\n\t\tdef copyErrors(tog, options) :\n\t\t\tif tog == None :\n\t\t\t\ttog = Graph()\n\t\t\tif options.output_processor_graph :\n\t\t\t\tfor t in options.processor_graph.graph :\n\t\t\t\t\ttog.add(t)\n\t\t\t\t\tif pgraph != None : pgraph.add(t)\n\t\t\t\tfor k,ns in options.processor_graph.graph.namespaces() :\n\t\t\t\t\ttog.bind(k,ns)\n\t\t\t\t\tif pgraph != None : pgraph.bind(k,ns)\n\t\t\toptions.reset_processor_graph()\n\t\t\treturn tog\n\n\t\t# Separating this for a forward Python 3 compatibility\n\t\ttry :\n\t\t\t# Python 2 branch\n\t\t\tisstring = isinstance(name, basestring)\n\t\texcept :\n\t\t\t# Python 3 branch\n\t\t\tisstring = isinstance(name, str)\n\n\t\ttry :\n\t\t\t# First, open the source... Possible HTTP errors are returned as error triples\n\t\t\tinput = None\n\t\t\ttry :\n\t\t\t\tinput = self._get_input(name)\n\t\t\texcept FailedSource as ex :\n\t\t\t\tf = sys.exc_info()[1]\n\t\t\t\tself.http_status = 400\n\t\t\t\tif not rdfOutput : raise Exception(ex.msg)\n\t\t\t\terr = self.options.add_error(ex.msg, FileReferenceError, name)\n\t\t\t\tself.options.processor_graph.add_http_context(err, 400)\n\t\t\t\treturn copyErrors(graph, self.options)\n\t\t\texcept HTTPError as ex :\n\t\t\t\th = sys.exc_info()[1]\n\t\t\t\tself.http_status = h.http_code\n\t\t\t\tif not rdfOutput : raise Exception(ex.msg)\n\t\t\t\terr = self.options.add_error(\"HTTP Error: %s (%s)\" % (h.http_code,h.msg), HTError, name)\n\t\t\t\tself.options.processor_graph.add_http_context(err, h.http_code)\n\t\t\t\treturn copyErrors(graph, self.options)\n\t\t\texcept RDFaError as ex:\n\t\t\t\te = sys.exc_info()[1]\n\t\t\t\tself.http_status = 500\n\t\t\t\t# Something nasty happened:-(\n\t\t\t\tif not rdfOutput : raise Exception(ex.msg)\n\t\t\t\terr = self.options.add_error(str(ex.msg), context = name)\n\t\t\t\tself.options.processor_graph.add_http_context(err, 500)\n\t\t\t\treturn copyErrors(graph, self.options)\n\t\t\texcept Exception as ex :\n\t\t\t\te = sys.exc_info()[1]\n\t\t\t\tself.http_status = 500\n\t\t\t\t# Something nasty happened:-(\n\t\t\t\tif not rdfOutput : raise ex\n\t\t\t\terr = self.options.add_error(str(e), context = name)\n\t\t\t\tself.options.processor_graph.add_http_context(err, 500)\n\t\t\t\treturn copyErrors(graph, self.options)\n\n\t\t\tdom = None\n\t\t\ttry :\n\t\t\t\tmsg = \"\"\n\t\t\t\tparser = None\n\t\t\t\tif self.options.host_language == HostLanguage.html5 :\n\t\t\t\t\timport warnings\n\t\t\t\t\twarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\t\t\t\t\timport html5lib\n\t\t\t\t\tparser = html5lib.HTMLParser(tree=html5lib.treebuilders.getTreeBuilder(\"dom\"))\n\t\t\t\t\tif self.charset :\n\t\t\t\t\t\t# This means the HTTP header has provided a charset, or the\n\t\t\t\t\t\t# file is a local file when we suppose it to be a utf-8\n\t\t\t\t\t\t#\n\t\t\t\t\t\t# 2020-01-20, Ivan Herman\n\t\t\t\t\t\t#   for some reasons the python3 version ran into a problem with this html5lib call\n\t\t\t\t\t\t#   the override_encoding argument was not accepted.\n\t\t\t\t\t\t# dom = parser.parse(input, override_encoding=self.charset)\n\t\t\t\t\t\tdom = parser.parse(input)\n\t\t\t\t\telse :\n\t\t\t\t\t\t# No charset set. The HTMLLib parser tries to sniff into the\n\t\t\t\t\t\t# the file to find a meta header for the charset; if that\n\t\t\t\t\t\t# works, fine, otherwise it falls back on window-...\n\t\t\t\t\t\tdom = parser.parse(input)\n\n\t\t\t\t\ttry :\n\t\t\t\t\t\tif isstring :\n\t\t\t\t\t\t\tinput.close()\n\t\t\t\t\t\t\tinput = self._get_input(name)\n\t\t\t\t\t\telse :\n\t\t\t\t\t\t\tinput.seek(0)\n\t\t\t\t\t\tfrom .host import adjust_html_version\n\t\t\t\t\t\tself.rdfa_version = adjust_html_version(input, self.rdfa_version)\n\t\t\t\t\texcept :\n\t\t\t\t\t\t# if anything goes wrong, it is not really important; rdfa version stays what it was...\n\t\t\t\t\t\tpass\n\n\t\t\t\telse :\n\t\t\t\t\tfrom .host import adjust_xhtml_and_version\n\t\t\t\t\tif isinstance(input, StringIO) or isinstance(input, file):\n\t\t\t\t\t\tparse = xml.dom.minidom.parse\n\t\t\t\t\telse:\n\t\t\t\t\t\tparse = xml.dom.minidom.parseString\n\t\t\t\t\tdom = parse(input)\n\t\t\t\t\t(adjusted_host_language, version) = adjust_xhtml_and_version(dom, self.options.host_language, self.rdfa_version)\n\t\t\t\t\tself.options.host_language = adjusted_host_language\n\t\t\t\t\tself.rdfa_version          = version\n\t\t\texcept ImportError :\n\t\t\t\tmsg = \"HTML5 parser not available. Try installing html5lib <http://code.google.com/p/html5lib>\"\n\t\t\t\traise ImportError(msg)\n\t\t\texcept Exception :\n\t\t\t\te = sys.exc_info()[1]\n\t\t\t\t# These are various parsing exception. Per spec, this is a case when\n\t\t\t\t# error triples MUST be returned, ie, the usage of rdfOutput (which switches between an HTML formatted\n\t\t\t\t# return page or a graph with error triples) does not apply\n\t\t\t\terr = self.options.add_error(str(e), context = name)\n\t\t\t\tself.http_status = 400\n\t\t\t\tself.options.processor_graph.add_http_context(err, 400)\n\t\t\t\treturn copyErrors(graph, self.options)\n\n\t\t\t# If we got here, we have a DOM tree to operate on...\n\t\t\treturn self.graph_from_DOM(dom, graph, pgraph)\n\t\texcept Exception :\n\t\t\t# Something nasty happened during the generation of the graph...\n\t\t\t(a,b,c) = sys.exc_info()\n\t\t\tsys.excepthook(a,b,c)\n\t\t\tif isinstance(b, ImportError) :\n\t\t\t\tself.http_status = None\n\t\t\telse :\n\t\t\t\tself.http_status = 500\n\t\t\tif not rdfOutput : raise b\n\t\t\terr = self.options.add_error(str(b), context = name)\n\t\t\tself.options.processor_graph.add_http_context(err, 500)\n\t\t\treturn copyErrors(graph, self.options)\n\n\tdef rdf_from_sources(self, names, outputFormat = \"turtle\", rdfOutput = False) :\n\t\t\"\"\"\n\t\tExtract and RDF graph from a list of RDFa sources and serialize them in one graph. The sources are parsed, the RDF\n\t\textracted, and serialization is done in the specified format.\n\t\t@param names: list of sources, each can be a URI, a file name, or a file-like object\n\t\t@keyword outputFormat: serialization format. Can be one of \"turtle\", \"n3\", \"xml\", \"pretty-xml\", \"nt\". \"xml\", \"pretty-xml\", \"json\" or \"json-ld\". \"turtle\" and \"n3\", \"xml\" and \"pretty-xml\", and \"json\" and \"json-ld\" are synonyms, respectively. Note that the JSON-LD serialization works with RDFLib 3.* only.\n\t\t@keyword rdfOutput: controls what happens in case an exception is raised. If the value is False, the caller is responsible handling it; otherwise a graph is returned with an error message included in the processor graph\n\t\t@type rdfOutput: boolean\n\t\t@return: a serialized RDF Graph\n\t\t@rtype: string\n\t\t\"\"\"\n\t\t# protection against possible malicious URL call\n\t\toutputFormat = pyRdfa._validate_output_format(outputFormat);\n\n\t\t# This is better because it gives access to the various, non-standard serializations\n\t\t# If it does not work because the extra are not installed, fall back to the standard\n\t\t# rdlib distribution...\n\t\tif rdflib.__version__ >= \"3.0.0\" :\n\t\t\tgraph = Graph()\n\t\telse :\n\t\t\t# We may need the extra utilities for older rdflib versions...\n\t\t\ttry :\n\t\t\t\tfrom pyRdfaExtras import MyGraph\n\t\t\t\tgraph = MyGraph()\n\t\t\texcept :\n\t\t\t\tgraph = Graph()\n\n\t\t# graph.bind(\"xsd\", Namespace('http://www.w3.org/2001/XMLSchema#'))\n\t\t# the value of rdfOutput determines the reaction on exceptions...\n\t\tfor name in names :\n\t\t\tself.graph_from_source(name, graph, rdfOutput)\n\n\t\t# Stupid difference between python2 and python3...\n\t\tif PY3 :\n\t\t\treturn str(graph.serialize(format=outputFormat), encoding='utf-8')\n\t\telse :\n\t\t\treturn graph.serialize(format=outputFormat)\n\n\n\tdef rdf_from_source(self, name, outputFormat = \"turtle\", rdfOutput = False) :\n\t\t\"\"\"\n\t\tExtract and RDF graph from an RDFa source and serialize it in one graph. The source is parsed, the RDF\n\t\textracted, and serialization is done in the specified format.\n\t\t@param name: a URI, a file name, or a file-like object\n\t\t@keyword outputFormat: serialization format. Can be one of \"turtle\", \"n3\", \"xml\", \"pretty-xml\", \"nt\". \"xml\", \"pretty-xml\", or \"json-ld\". \"turtle\" and \"n3\", or \"xml\" and \"pretty-xml\" are synonyms, respectively. Note that the JSON-LD serialization works with RDFLib 3.* only.\n\t\t@keyword rdfOutput: controls what happens in case an exception is raised. If the value is False, the caller is responsible handling it; otherwise a graph is returned with an error message included in the processor graph\n\t\t@type rdfOutput: boolean\n\t\t@return: a serialized RDF Graph\n\t\t@rtype: string\n\t\t\"\"\"\n\t\treturn self.rdf_from_sources([name], outputFormat, rdfOutput)\n\n################################################# CGI Entry point\ndef processURI(uri, outputFormat, form={}) :\n\t\"\"\"The standard processing of an RDFa uri options in a form; used as an entry point from a CGI call.\n\n\tThe call accepts extra form options (i.e., HTTP GET options) as follows:\n\n\t - C{graph=[output|processor|output,processor|processor,output]} specifying which graphs are returned. Default: C{output}\n\t - C{space_preserve=[true|false]} means that plain literals are normalized in terms of white spaces. Default: C{false}\n\t - C{rfa_version} provides the RDFa version that should be used for distilling. The string should be of the form \"1.0\" or \"1.1\". Default is the highest version the current package implements, currently \"1.1\"\n\t - C{host_language=[xhtml,html,xml]} : the host language. Used when files are uploaded or text is added verbatim, otherwise the HTTP return header should be used. Default C{xml}\n\t - C{embedded_rdf=[true|false]} : whether embedded turtle or RDF/XML content should be added to the output graph. Default: C{false}\n\t - C{vocab_expansion=[true|false]} : whether the vocabularies should be expanded through the restricted RDFS entailment. Default: C{false}\n\t - C{vocab_cache=[true|false]} : whether vocab caching should be performed or whether it should be ignored and vocabulary files should be picked up every time. Default: C{false}\n\t - C{vocab_cache_report=[true|false]} : whether vocab caching details should be reported. Default: C{false}\n\t - C{vocab_cache_bypass=[true|false]} : whether vocab caches have to be regenerated every time. Default: C{false}\n\t - C{rdfa_lite=[true|false]} : whether warnings should be generated for non RDFa Lite attribute usage. Default: C{false}\n\n\t@param uri: URI to access. Note that the C{text:} and C{uploaded:} fake URI values are treated separately; the former is for textual intput (in which case a StringIO is used to get the data) and the latter is for uploaded file, where the form gives access to the file directly.\n\t@param outputFormat: serialization format, as defined by the package. Currently \"xml\", \"turtle\", \"nt\", or \"json\". Default is \"turtle\", also used if any other string is given.\n\t@param form: extra call options (from the CGI call) to set up the local options\n\t@type form: cgi FieldStorage instance\n\t@return: serialized graph\n\t@rtype: string\n\t\"\"\"\n\tdef _get_option(param, compare_value, default) :\n\t\tparam_old = param.replace('_','-')\n\t\tif param in list(form.keys()) :\n\t\t\tval = form.getfirst(param).lower()\n\t\t\treturn val == compare_value\n\t\telif param_old in list(form.keys()) :\n\t\t\t# this is to ensure the old style parameters are still valid...\n\t\t\t# in the old days I used '-' in the parameters, the standard favours '_'\n\t\t\tval = form.getfirst(param_old).lower()\n\t\t\treturn val == compare_value\n\t\telse :\n\t\t\treturn default\n\n\tif uri == \"uploaded:\" :\n\t\tinput\t= form[\"uploaded\"].file\n\t\tbase\t= \"\"\n\telif uri == \"text:\" :\n\t\tinput\t= StringIO(form.getfirst(\"text\"))\n\t\tbase\t= \"\"\n\telse :\n\t\tinput\t= uri\n\t\tbase\t= uri\n\n\tif \"rdfa_version\" in list(form.keys()) :\n\t\trdfa_version = form.getfirst(\"rdfa_version\")\n\telse :\n\t\trdfa_version = None\n\n\t# working through the possible options\n\t# Host language: HTML, XHTML, or XML\n\t# Note that these options should be used for the upload and inline version only in case of a form\n\t# for real uris the returned content type should be used\n\tif \"host_language\" in list(form.keys()) :\n\t\tif form.getfirst(\"host_language\").lower() == \"xhtml\" :\n\t\t\tmedia_type = MediaTypes.xhtml\n\t\telif form.getfirst(\"host_language\").lower() == \"html\" :\n\t\t\tmedia_type = MediaTypes.html\n\t\telif form.getfirst(\"host_language\").lower() == \"svg\" :\n\t\t\tmedia_type = MediaTypes.svg\n\t\telif form.getfirst(\"host_language\").lower() == \"atom\" :\n\t\t\tmedia_type = MediaTypes.atom\n\t\telse :\n\t\t\tmedia_type = MediaTypes.xml\n\telse :\n\t\tmedia_type = \"\"\n\n\ttransformers = []\n\n\tcheck_lite = \"rdfa_lite\" in list(form.keys()) and form.getfirst(\"rdfa_lite\").lower() == \"true\"\n\n\t# The code below is left for backward compatibility only. In fact, these options are not exposed any more,\n\t# they are not really in use\n\tif \"extras\" in list(form.keys()) and form.getfirst(\"extras\").lower() == \"true\" :\n\t\tfrom .transform.metaname              \timport meta_transform\n\t\tfrom .transform.OpenID                \timport OpenID_transform\n\t\tfrom .transform.DublinCore            \timport DC_transform\n\t\tfor t in [OpenID_transform, DC_transform, meta_transform] :\n\t\t\ttransformers.append(t)\n\telse :\n\t\tif \"extra-meta\" in list(form.keys()) and form.getfirst(\"extra-meta\").lower() == \"true\" :\n\t\t\tfrom .transform.metaname import meta_transform\n\t\t\ttransformers.append(meta_transform)\n\t\tif \"extra-openid\" in list(form.keys()) and form.getfirst(\"extra-openid\").lower() == \"true\" :\n\t\t\tfrom .transform.OpenID import OpenID_transform\n\t\t\ttransformers.append(OpenID_transform)\n\t\tif \"extra-dc\" in list(form.keys()) and form.getfirst(\"extra-dc\").lower() == \"true\" :\n\t\t\tfrom .transform.DublinCore import DC_transform\n\t\t\ttransformers.append(DC_transform)\n\n\toutput_default_graph \t= True\n\toutput_processor_graph \t= False\n\t# Note that I use the 'graph' and the 'rdfagraph' form keys here. Reason is that\n\t# I used 'graph' in the previous versions, including the RDFa 1.0 processor,\n\t# so if I removed that altogether that would create backward incompatibilities\n\t# On the other hand, the RDFa 1.1 doc clearly refers to 'rdfagraph' as the standard\n\t# key.\n\ta = None\n\tif \"graph\" in list(form.keys()) :\n\t\ta = form.getfirst(\"graph\").lower()\n\telif \"rdfagraph\" in list(form.keys()) :\n\t\ta = form.getfirst(\"rdfagraph\").lower()\n\tif a != None :\n\t\tif a == \"processor\" :\n\t\t\toutput_default_graph \t= False\n\t\t\toutput_processor_graph \t= True\n\t\telif a == \"processor,output\" or a == \"output,processor\" :\n\t\t\toutput_processor_graph \t= True\n\n\tembedded_rdf        = _get_option( \"embedded_rdf\", \"true\", False)\n\tspace_preserve      = _get_option( \"space_preserve\", \"true\", True)\n\tvocab_cache         = _get_option( \"vocab_cache\", \"true\", True)\n\tvocab_cache_report  = _get_option( \"vocab_cache_report\", \"true\", False)\n\trefresh_vocab_cache = _get_option( \"vocab_cache_refresh\", \"true\", False)\n\tvocab_expansion     = _get_option( \"vocab_expansion\", \"true\", False)\n\tif vocab_cache_report : output_processor_graph = True\n\n\toptions = Options(output_default_graph   = output_default_graph,\n\t\t\t\t\t  output_processor_graph = output_processor_graph,\n\t\t\t\t\t  space_preserve         = space_preserve,\n\t\t\t\t\t  transformers           = transformers,\n\t\t\t\t\t  vocab_cache            = vocab_cache,\n\t\t\t\t\t  vocab_cache_report     = vocab_cache_report,\n\t\t\t\t\t  refresh_vocab_cache    = refresh_vocab_cache,\n\t\t\t\t\t  vocab_expansion        = vocab_expansion,\n\t\t\t\t\t  embedded_rdf           = embedded_rdf,\n\t\t\t\t\t  check_lite             = check_lite\n\t\t\t\t\t  )\n\tprocessor = pyRdfa(options = options, base = base, media_type = media_type, rdfa_version = rdfa_version)\n\n\t# Decide the output format; the issue is what should happen in case of a top level error like an inaccessibility of\n\t# the html source: should a graph be returned or an HTML page with an error message?\n\n\t# decide whether HTML or RDF should be sent.\n\thtmlOutput = False\n\t#if 'HTTP_ACCEPT' in os.environ :\n\t#\tacc = os.environ['HTTP_ACCEPT']\n\t#\tpossibilities = ['text/html',\n\t#\t\t\t\t\t 'application/rdf+xml',\n\t#\t\t\t\t\t 'text/turtle; charset=utf-8',\n\t#\t\t\t\t\t 'application/json',\n\t#\t\t\t\t\t 'application/ld+json',\n\t#\t\t\t\t\t 'text/rdf+n3']\n\t#\n\t#\t# this nice module does content negotiation and returns the preferred format\n\t#\tsg = acceptable_content_type(acc, possibilities)\n\t#\thtmlOutput = (sg != None and sg[0] == content_type('text/html'))\n\t#\tos.environ['rdfaerror'] = 'true'\n\n\t# This is really for testing purposes only, it is an unpublished flag to force RDF output no\n\t# matter what\n\ttry :\n\t\toutputFormat = pyRdfa._validate_output_format(outputFormat);\n\t\tif outputFormat == \"n3\" :\n\t\t\tretval = 'Content-Type: text/rdf+n3; charset=utf-8\\n'\n\t\telif outputFormat == \"nt\" or outputFormat == \"turtle\" :\n\t\t\tretval = 'Content-Type: text/turtle; charset=utf-8\\n'\n\t\telif outputFormat == \"json-ld\" or outputFormat == \"json\" :\n\t\t\tretval = 'Content-Type: application/ld+json; charset=utf-8\\n'\n\t\telse :\n\t\t\tretval = 'Content-Type: application/rdf+xml; charset=utf-8\\n'\n\t\tgraph = processor.rdf_from_source(input, outputFormat, rdfOutput = (\"forceRDFOutput\" in list(form.keys())) or not htmlOutput)\n\t\tretval += '\\n'\n\t\tretval += graph\n\t\treturn retval\n\texcept HTTPError :\n\t\t(type,h,traceback) = sys.exc_info()\n\t\timport cgi\n\n\t\tretval = 'Content-type: text/html; charset=utf-8\\nStatus: %s \\n\\n' % h.http_code\n\t\tretval += \"<html>\\n\"\n\t\tretval += \"<head>\\n\"\n\t\tretval += \"<title>HTTP Error in distilling RDFa content</title>\\n\"\n\t\tretval += \"</head><body>\\n\"\n\t\tretval += \"<h1>HTTP Error in distilling RDFa content</h1>\\n\"\n\t\tretval += \"<p>HTTP Error: %s (%s)</p>\\n\" % (h.http_code,h.msg)\n\t\tretval += \"<p>On URI: <code>'%s'</code></p>\\n\" % cgi.escape(uri)\n\t\tretval +=\"</body>\\n\"\n\t\tretval +=\"</html>\\n\"\n\t\treturn retval\n\texcept :\n\t\t# This branch should occur only if an exception is really raised, ie, if it is not turned\n\t\t# into a graph value.\n\t\t(type,value,traceback) = sys.exc_info()\n\n\t\timport traceback, cgi\n\n\t\tretval = 'Content-type: text/html; charset=utf-8\\nStatus: %s\\n\\n' % processor.http_status\n\t\tretval += \"<html>\\n\"\n\t\tretval += \"<head>\\n\"\n\t\tretval += \"<title>Exception in RDFa processing</title>\\n\"\n\t\tretval += \"</head><body>\\n\"\n\t\tretval += \"<h1>Exception in distilling RDFa</h1>\\n\"\n\t\tretval += \"<pre>\\n\"\n\t\tstrio  = StringIO()\n\t\ttraceback.print_exc(file=strio)\n\t\tretval += strio.getvalue()\n\t\tretval +=\"</pre>\\n\"\n\t\tretval +=\"<pre>%s</pre>\\n\" % value\n\t\tretval +=\"<h1>Distiller request details</h1>\\n\"\n\t\tretval +=\"<dl>\\n\"\n\t\tif uri == \"text:\" and \"text\" in form and form[\"text\"].value != None and len(form[\"text\"].value.strip()) != 0 :\n\t\t\tretval +=\"<dt>Text input:</dt><dd>%s</dd>\\n\" % cgi.escape(form[\"text\"].value).replace('\\n','<br/>')\n\t\telif uri == \"uploaded:\" :\n\t\t\tretval +=\"<dt>Uploaded file</dt>\\n\"\n\t\telse :\n\t\t\tretval +=\"<dt>URI received:</dt><dd><code>'%s'</code></dd>\\n\" % cgi.escape(uri)\n\t\tif \"host_language\" in list(form.keys()) :\n\t\t\tretval +=\"<dt>Media Type:</dt><dd>%s</dd>\\n\" % cgi.escape(media_type)\n\t\tif \"graph\" in list(form.keys()) :\n\t\t\tretval +=\"<dt>Requested graphs:</dt><dd>%s</dd>\\n\" % cgi.escape(form.getfirst(\"graph\").lower())\n\t\telse :\n\t\t\tretval +=\"<dt>Requested graphs:</dt><dd>default</dd>\\n\"\n\t\tretval +=\"<dt>Output serialization format:</dt><dd> %s</dd>\\n\" % outputFormat\n\t\tif \"space_preserve\" in form : retval +=\"<dt>Space preserve:</dt><dd> %s</dd>\\n\" % cgi.escape(form[\"space_preserve\"].value)\n\t\tretval +=\"</dl>\\n\"\n\t\tretval +=\"</body>\\n\"\n\t\tretval +=\"</html>\\n\"\n\t\treturn retval\n"], "filenames": ["pyRdfa/__init__.py"], "buggy_code_start_loc": [457], "buggy_code_end_loc": [946], "fixing_code_start_loc": [458], "fixing_code_end_loc": [959], "type": "CWE-79", "message": "** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in RDFlib pyrdfa3 and classified as problematic. This issue affects the function _get_option of the file pyRdfa/__init__.py. The manipulation leads to cross site scripting. The attack may be initiated remotely. The name of the patch is ffd1d62dd50d5f4190013b39cedcdfbd81f3ce3e. It is recommended to apply a patch to fix this issue. The identifier VDB-215249 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.", "other": {"cve": {"id": "CVE-2022-4396", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-10T12:15:10.797", "lastModified": "2022-12-13T14:57:10.653", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in RDFlib pyrdfa3 and classified as problematic. This issue affects the function _get_option of the file pyRdfa/__init__.py. The manipulation leads to cross site scripting. The attack may be initiated remotely. The name of the patch is ffd1d62dd50d5f4190013b39cedcdfbd81f3ce3e. It is recommended to apply a patch to fix this issue. The identifier VDB-215249 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pyrdfa3_project:pyrdfa3:-:*:*:*:*:python:*:*", "matchCriteriaId": "9F232A28-7BE9-4AA0-968F-3B31AE62E9FA"}]}]}], "references": [{"url": "https://github.com/RDFLib/pyrdfa3/commit/ffd1d62dd50d5f4190013b39cedcdfbd81f3ce3e", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/RDFLib/pyrdfa3/pull/40", "source": "cna@vuldb.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.215249", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/RDFLib/pyrdfa3/commit/ffd1d62dd50d5f4190013b39cedcdfbd81f3ce3e"}}