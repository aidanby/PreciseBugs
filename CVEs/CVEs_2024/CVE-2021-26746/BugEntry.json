{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nrequire_once __DIR__.'/../inc/global.inc.php';\n\n$action = isset($_GET['action']) ? Security::remove_XSS($_GET['action']) : 'calendar_list';\n\n$logInfo = [\n    'tool' => TOOL_CALENDAR_EVENT,\n    'action' => $action,\n];\nEvent::registerLog($logInfo);\n\n$type = isset($_REQUEST['type']) ? $_REQUEST['type'] : null;\n\n$interbreadcrumb[] = [\n    'url' => api_get_path(WEB_CODE_PATH).'calendar/agenda_js.php?type='.Security::remove_XSS($type),\n    'name' => get_lang('Agenda'),\n];\n\n$currentCourseId = api_get_course_int_id();\n$groupId = api_get_group_id();\n\nif (!empty($groupId)) {\n    $groupProperties = GroupManager::get_group_properties($groupId);\n    $groupId = $groupProperties['iid'];\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_CODE_PATH).\"group/group.php?\".api_get_cidreq(),\n        'name' => get_lang('Groups'),\n    ];\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_CODE_PATH).\"group/group_space.php?\".api_get_cidreq(),\n        'name' => get_lang('GroupSpace').' '.$groupProperties['name'],\n    ];\n}\n\n$agenda = new Agenda($type);\n$events = $agenda->getEvents(\n    null,\n    null,\n    $currentCourseId,\n    $groupId,\n    null,\n    'array'\n);\n\n$this_section = SECTION_MYAGENDA;\n\nif (!empty($currentCourseId) && $currentCourseId != -1) {\n    // Agenda is inside a course tool\n    $url = api_get_self().'?'.api_get_cidreq();\n    $this_section = SECTION_COURSES;\n\n    // Order by start date\n    usort($events, function ($a, $b) {\n        $t1 = strtotime($a['start']);\n        $t2 = strtotime($b['start']);\n\n        return $t1 > $t2;\n    });\n} else {\n    // Agenda is out of the course tool (e.g personal agenda)\n\n    // Little hack to sort the events by start date in personal agenda (Agenda events List view - See #8014)\n    usort($events, function ($a, $b) {\n        $t1 = strtotime($a['start']);\n        $t2 = strtotime($b['start']);\n\n        return $t1 - $t2;\n    });\n\n    $url = false;\n    if (!empty($events)) {\n        foreach ($events as &$event) {\n            $courseId = isset($event['course_id']) ? $event['course_id'] : '';\n            $event['url'] = api_get_self().'?cid='.$courseId.'&type='.$event['type'];\n        }\n    }\n}\n\n$actions = $agenda->displayActions('list');\n\n$tpl = new Template(get_lang('Events'));\n$tpl->assign('agenda_events', $events);\n$tpl->assign('url', $url);\n$tpl->assign('show_action', in_array($type, ['course', 'session']));\n$tpl->assign('agenda_actions', $actions);\n$tpl->assign('is_allowed_to_edit', api_is_allowed_to_edit());\n\nif (api_is_allowed_to_edit()) {\n    if ($action == 'change_visibility') {\n        $courseInfo = api_get_course_info();\n        $courseCondition = '';\n        // This happens when list agenda is not inside a course\n        if (($type == 'course' || $type == 'session' && !empty($courseInfo))) {\n            // For course and session event types\n            // Just needs course ID\n            $agenda->changeVisibility($_GET['id'], $_GET['visibility'], $courseInfo);\n        } else {\n            $courseCondition = '&'.api_get_cidreq();\n        }\n        header('Location: '.api_get_self().'?type='.$agenda->type.$courseCondition);\n        exit;\n    }\n}\n\n$templateName = $tpl->get_template('agenda/event_list.tpl');\n$content = $tpl->fetch($templateName);\n$tpl->assign('content', $content);\n$tpl->display_one_col_template();\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nrequire_once __DIR__.'/../inc/global.inc.php';\n\n$action = isset($_GET['action']) ? Security::remove_XSS($_GET['action']) : 'calendar_list';\n\n$logInfo = [\n    'tool' => TOOL_CALENDAR_EVENT,\n    'action' => $action,\n];\nEvent::registerLog($logInfo);\n\n$typeList = ['personal', 'course', 'admin', 'platform'];\n$type = isset($_REQUEST['type']) && in_array($_REQUEST['type'], $typeList, true) ? $_REQUEST['type'] : null;\n\n$interbreadcrumb[] = [\n    'url' => api_get_path(WEB_CODE_PATH).'calendar/agenda_js.php?type='.Security::remove_XSS($type),\n    'name' => get_lang('Agenda'),\n];\n\n$currentCourseId = api_get_course_int_id();\n$groupId = api_get_group_id();\n\nif (!empty($groupId)) {\n    $groupProperties = GroupManager::get_group_properties($groupId);\n    $groupId = $groupProperties['iid'];\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_CODE_PATH).\"group/group.php?\".api_get_cidreq(),\n        'name' => get_lang('Groups'),\n    ];\n    $interbreadcrumb[] = [\n        'url' => api_get_path(WEB_CODE_PATH).\"group/group_space.php?\".api_get_cidreq(),\n        'name' => get_lang('GroupSpace').' '.$groupProperties['name'],\n    ];\n}\n\n$agenda = new Agenda($type);\n$events = $agenda->getEvents(\n    null,\n    null,\n    $currentCourseId,\n    $groupId,\n    null,\n    'array'\n);\n\n$this_section = SECTION_MYAGENDA;\n\nif (!empty($currentCourseId) && $currentCourseId != -1) {\n    // Agenda is inside a course tool\n    $url = api_get_self().'?'.api_get_cidreq();\n    $this_section = SECTION_COURSES;\n\n    // Order by start date\n    usort($events, function ($a, $b) {\n        $t1 = strtotime($a['start']);\n        $t2 = strtotime($b['start']);\n\n        return $t1 > $t2;\n    });\n} else {\n    // Agenda is out of the course tool (e.g personal agenda)\n\n    // Little hack to sort the events by start date in personal agenda (Agenda events List view - See #8014)\n    usort($events, function ($a, $b) {\n        $t1 = strtotime($a['start']);\n        $t2 = strtotime($b['start']);\n\n        return $t1 - $t2;\n    });\n\n    $url = false;\n    if (!empty($events)) {\n        foreach ($events as &$event) {\n            $courseId = isset($event['course_id']) ? $event['course_id'] : '';\n            $event['url'] = api_get_self().'?cid='.$courseId.'&type='.$event['type'];\n        }\n    }\n}\n\n$actions = $agenda->displayActions('list');\n\n$tpl = new Template(get_lang('Events'));\n$tpl->assign('agenda_events', $events);\n$tpl->assign('url', $url);\n$tpl->assign('show_action', in_array($type, ['course', 'session']));\n$tpl->assign('agenda_actions', $actions);\n$tpl->assign('is_allowed_to_edit', api_is_allowed_to_edit());\n\nif (api_is_allowed_to_edit()) {\n    if ($action == 'change_visibility') {\n        $courseInfo = api_get_course_info();\n        $courseCondition = '';\n        // This happens when list agenda is not inside a course\n        if (($type == 'course' || $type == 'session' && !empty($courseInfo))) {\n            // For course and session event types\n            // Just needs course ID\n            $agenda->changeVisibility($_GET['id'], $_GET['visibility'], $courseInfo);\n        } else {\n            $courseCondition = '&'.api_get_cidreq();\n        }\n        header('Location: '.api_get_self().'?type='.$agenda->type.$courseCondition);\n        exit;\n    }\n}\n\n$templateName = $tpl->get_template('agenda/event_list.tpl');\n$content = $tpl->fetch($templateName);\n$tpl->assign('content', $content);\n$tpl->display_one_col_template();\n"], "filenames": ["main/calendar/agenda_list.php"], "buggy_code_start_loc": [15], "buggy_code_end_loc": [16], "fixing_code_start_loc": [15], "fixing_code_end_loc": [17], "type": "CWE-79", "message": "Chamilo 1.11.14 allows XSS via a main/calendar/agenda_list.php?type= URI.", "other": {"cve": {"id": "CVE-2021-26746", "sourceIdentifier": "cve@mitre.org", "published": "2021-02-19T05:15:19.257", "lastModified": "2021-02-25T13:57:05.260", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo 1.11.14 allows XSS via a main/calendar/agenda_list.php?type= URI."}, {"lang": "es", "value": "Chamilo versi\u00f3n 1.11.14, permite un ataque de tipo XSS por medio de un URI main/calendar/agenda_list.php?type="}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo:1.11.14:*:*:*:*:*:*:*", "matchCriteriaId": "53C8A896-7D31-460F-9BD1-C384916B5BCD"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/d939402d83bf68af5377b629883d8e5437d843ec", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://support.chamilo.org/projects/chamilo-18/wiki/Security_issues#Issue-45-2021-01-21-Moderate-impact-moderate-risk-XSS-vulnerability-in-agenda", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://www.netsparker.com/web-applications-advisories/ns-21-001-cross-site-scripting-in-chamilo-lms/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/d939402d83bf68af5377b629883d8e5437d843ec"}}