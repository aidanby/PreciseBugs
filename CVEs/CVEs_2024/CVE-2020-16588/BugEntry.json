{"buggy_code": ["///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2004, Industrial Light & Magic, a division of Lucas\n// Digital Ltd. LLC\n// \n// All rights reserved.\n// \n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n// *       Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// *       Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// *       Neither the name of Industrial Light & Magic nor the names of\n// its contributors may be used to endorse or promote products derived\n// from this software without specific prior written permission. \n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n///////////////////////////////////////////////////////////////////////////\n\n\n//----------------------------------------------------------------------------\n//\n//\tAdd a preview image to an OpenEXR file.\n//\n//----------------------------------------------------------------------------\n\n\n#include \"makePreview.h\"\n\n#include <ImfInputFile.h>\n#include <ImfOutputFile.h>\n#include <ImfTiledOutputFile.h>\n#include <ImfRgbaFile.h>\n#include <ImfPreviewImage.h>\n#include <ImfArray.h>\n#include <ImathMath.h>\n#include <ImathFun.h>\n#include <math.h>\n#include <iostream>\n#include <algorithm>\n\n#include <OpenEXRConfig.h>\nusing namespace OPENEXR_IMF_NAMESPACE;\nusing namespace IMATH_NAMESPACE;\nusing namespace std;\n\n\nnamespace {\n\nfloat\nknee (float x, float f)\n{\n    return log (x * f + 1) / f;\n}\n\n\nunsigned char\ngamma (half h, float m)\n{\n    //\n    // Conversion from half to unsigned char pixel data,\n    // with gamma correction.  The conversion is the same\n    // as in the exrdisplay program's ImageView class,\n    // except with defog, kneeLow, and kneeHigh fixed\n    // at 0.0, 0.0, and 5.0 respectively.\n    //\n\n    float x = max (0.f, h * m);\n\n    if (x > 1)\n\tx = 1 + knee (x - 1, 0.184874f);\n\n    return (unsigned char) (IMATH_NAMESPACE::clamp (Math<float>::pow (x, 0.4545f) * 84.66f, \n\t\t\t\t   0.f,\n\t\t\t\t   255.f));\n}\n\n\nvoid\ngeneratePreview (const char inFileName[],\n\t\t float exposure,\n\t\t int previewWidth,\n\t\t int &previewHeight,\n\t\t Array2D <PreviewRgba> &previewPixels)\n{\n    //\n    // Read the input file\n    //\n\n    RgbaInputFile in (inFileName);\n\n    Box2i dw = in.dataWindow();\n    float a = in.pixelAspectRatio();\n    int w = dw.max.x - dw.min.x + 1;\n    int h = dw.max.y - dw.min.y + 1;\n\n    Array2D <Rgba> pixels (h, w);\n    in.setFrameBuffer (ComputeBasePointer (&pixels[0][0], dw), 1, w);\n    in.readPixels (dw.min.y, dw.max.y);\n\n    //\n    // Make a preview image\n    //\n\n    previewHeight = max (int (h / (w * a) * previewWidth + .5f), 1);\n    previewPixels.resizeErase (previewHeight, previewWidth);\n\n    float fx = (previewWidth  > 0)? (float (w - 1) / (previewWidth  - 1)): 1;\n    float fy = (previewHeight > 0)? (float (h - 1) / (previewHeight - 1)): 1;\n    float m  = Math<float>::pow (2.f, IMATH_NAMESPACE::clamp (exposure + 2.47393f, -20.f, 20.f));\n\n    for (int y = 0; y < previewHeight; ++y)\n    {\n\tfor (int x = 0; x < previewWidth; ++x)\n\t{\n\t    PreviewRgba &preview = previewPixels[y][x];\n\t    const Rgba &pixel = pixels[int (y * fy + .5f)][int (x * fx + .5f)];\n\n\t    preview.r = gamma (pixel.r, m);\n\t    preview.g = gamma (pixel.g, m);\n\t    preview.b = gamma (pixel.b, m);\n\t    preview.a = int (IMATH_NAMESPACE::clamp (pixel.a * 255.f, 0.f, 255.f) + .5f);\n\t}\n    }\n}\n\n} // namespace\n\n\nvoid\nmakePreview (const char inFileName[],\n\t     const char outFileName[],\n\t     int previewWidth,\n\t     float exposure,\n\t     bool verbose)\n{\n    if (verbose)\n\tcout << \"generating preview image\" << endl;\n\n    Array2D <PreviewRgba> previewPixels;\n    int previewHeight;\n\n    generatePreview (inFileName,\n\t\t     exposure,\n\t\t     previewWidth,\n\t\t     previewHeight,\n\t\t     previewPixels);\n\n    InputFile in (inFileName);\n    Header header = in.header();\n\n    header.setPreviewImage\n\t(PreviewImage (previewWidth, previewHeight, &previewPixels[0][0]));\n\n    if (verbose)\n\tcout << \"copying \" << inFileName << \" to \" << outFileName << endl;\n\n    if (header.hasTileDescription())\n    {\n\tTiledOutputFile out (outFileName, header);\n\tout.copyPixels (in);\n    }\n    else\n    {\n\tOutputFile out (outFileName, header);\n\tout.copyPixels (in);\n    }\n\n    if (verbose)\n\tcout << \"done.\" << endl;\n}\n"], "fixing_code": ["///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2004, Industrial Light & Magic, a division of Lucas\n// Digital Ltd. LLC\n// \n// All rights reserved.\n// \n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n// *       Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// *       Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// *       Neither the name of Industrial Light & Magic nor the names of\n// its contributors may be used to endorse or promote products derived\n// from this software without specific prior written permission. \n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n///////////////////////////////////////////////////////////////////////////\n\n\n//----------------------------------------------------------------------------\n//\n//\tAdd a preview image to an OpenEXR file.\n//\n//----------------------------------------------------------------------------\n\n\n#include \"makePreview.h\"\n\n#include <ImfInputFile.h>\n#include <ImfOutputFile.h>\n#include <ImfTiledOutputFile.h>\n#include <ImfRgbaFile.h>\n#include <ImfPreviewImage.h>\n#include <ImfArray.h>\n#include <ImathMath.h>\n#include <ImathFun.h>\n#include <math.h>\n#include <iostream>\n#include <algorithm>\n\n#include <OpenEXRConfig.h>\nusing namespace OPENEXR_IMF_NAMESPACE;\nusing namespace IMATH_NAMESPACE;\nusing namespace std;\n\n\nnamespace {\n\nfloat\nknee (float x, float f)\n{\n    return log (x * f + 1) / f;\n}\n\n\nunsigned char\ngamma (half h, float m)\n{\n    //\n    // Conversion from half to unsigned char pixel data,\n    // with gamma correction.  The conversion is the same\n    // as in the exrdisplay program's ImageView class,\n    // except with defog, kneeLow, and kneeHigh fixed\n    // at 0.0, 0.0, and 5.0 respectively.\n    //\n\n    float x = max (0.f, h * m);\n\n    if (x > 1)\n\tx = 1 + knee (x - 1, 0.184874f);\n\n    return (unsigned char) (IMATH_NAMESPACE::clamp (Math<float>::pow (x, 0.4545f) * 84.66f, \n\t\t\t\t   0.f,\n\t\t\t\t   255.f));\n}\n\n\nvoid\ngeneratePreview (const char inFileName[],\n\t\t float exposure,\n\t\t int previewWidth,\n\t\t int &previewHeight,\n\t\t Array2D <PreviewRgba> &previewPixels)\n{\n    //\n    // Read the input file\n    //\n\n    RgbaInputFile in (inFileName);\n\n    Box2i dw = in.dataWindow();\n    float a = in.pixelAspectRatio();\n    int w = dw.max.x - dw.min.x + 1;\n    int h = dw.max.y - dw.min.y + 1;\n\n    Array2D <Rgba> pixels (h, w);\n    in.setFrameBuffer (ComputeBasePointer (&pixels[0][0], dw), 1, w);\n    in.readPixels (dw.min.y, dw.max.y);\n\n    //\n    // Make a preview image\n    //\n\n    previewHeight = max (int (h / (w * a) * previewWidth + .5f), 1);\n    previewPixels.resizeErase (previewHeight, previewWidth);\n\n    float fx = (previewWidth  > 1)? (float (w - 1) / (previewWidth  - 1)): 1;\n    float fy = (previewHeight > 1)? (float (h - 1) / (previewHeight - 1)): 1;\n    float m  = Math<float>::pow (2.f, IMATH_NAMESPACE::clamp (exposure + 2.47393f, -20.f, 20.f));\n\n    for (int y = 0; y < previewHeight; ++y)\n    {\n\tfor (int x = 0; x < previewWidth; ++x)\n\t{\n\t    PreviewRgba &preview = previewPixels[y][x];\n\t    const Rgba &pixel = pixels[int (y * fy + .5f)][int (x * fx + .5f)];\n\n\t    preview.r = gamma (pixel.r, m);\n\t    preview.g = gamma (pixel.g, m);\n\t    preview.b = gamma (pixel.b, m);\n\t    preview.a = int (IMATH_NAMESPACE::clamp (pixel.a * 255.f, 0.f, 255.f) + .5f);\n\t}\n    }\n}\n\n} // namespace\n\n\nvoid\nmakePreview (const char inFileName[],\n\t     const char outFileName[],\n\t     int previewWidth,\n\t     float exposure,\n\t     bool verbose)\n{\n    if (verbose)\n\tcout << \"generating preview image\" << endl;\n\n    Array2D <PreviewRgba> previewPixels;\n    int previewHeight;\n\n    generatePreview (inFileName,\n\t\t     exposure,\n\t\t     previewWidth,\n\t\t     previewHeight,\n\t\t     previewPixels);\n\n    InputFile in (inFileName);\n    Header header = in.header();\n\n    header.setPreviewImage\n\t(PreviewImage (previewWidth, previewHeight, &previewPixels[0][0]));\n\n    if (verbose)\n\tcout << \"copying \" << inFileName << \" to \" << outFileName << endl;\n\n    if (header.hasTileDescription())\n    {\n\tTiledOutputFile out (outFileName, header);\n\tout.copyPixels (in);\n    }\n    else\n    {\n\tOutputFile out (outFileName, header);\n\tout.copyPixels (in);\n    }\n\n    if (verbose)\n\tcout << \"done.\" << endl;\n}\n"], "filenames": ["OpenEXR/exrmakepreview/makePreview.cpp"], "buggy_code_start_loc": [123], "buggy_code_end_loc": [125], "fixing_code_start_loc": [123], "fixing_code_end_loc": [125], "type": "CWE-476", "message": "A Null Pointer Deference issue exists in Academy Software Foundation OpenEXR 2.3.0 in generatePreview in makePreview.cpp that can cause a denial of service via a crafted EXR file.", "other": {"cve": {"id": "CVE-2020-16588", "sourceIdentifier": "cve@mitre.org", "published": "2020-12-09T21:15:14.913", "lastModified": "2023-02-03T23:52:11.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A Null Pointer Deference issue exists in Academy Software Foundation OpenEXR 2.3.0 in generatePreview in makePreview.cpp that can cause a denial of service via a crafted EXR file."}, {"lang": "es", "value": "Se presenta un problema de Deferencia del Puntero Null en Academy Software Foundation OpenEXR versi\u00f3n 2.3.0 en la funci\u00f3n generatePreview en el archivo makePreview.cpp que puede causar una denegaci\u00f3n de servicio por medio de un archivo EXR dise\u00f1ado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openexr:openexr:2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "211E2557-6796-4695-AE6C-80D0C537B2D9"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/AcademySoftwareFoundation/openexr/commit/74504503cff86e986bac441213c403b0ba28d58f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/AcademySoftwareFoundation/openexr/issues/493", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/12/msg00022.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/AcademySoftwareFoundation/openexr/commit/74504503cff86e986bac441213c403b0ba28d58f"}}