{"buggy_code": ["/*\n * Phosphorus Five, copyright 2014 - 2017, Thomas Hansen, thomas@gaiasoul.com\n * \n * This file is part of Phosphorus Five.\n *\n * Phosphorus Five is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 3, as published by\n * the Free Software Foundation.\n *\n *\n * Phosphorus Five is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Phosphorus Five.  If not, see <http://www.gnu.org/licenses/>.\n * \n * If you cannot for some reasons use the GPL license, Phosphorus\n * Five is also commercially available under Quid Pro Quo terms. Check \n * out our website at http://gaiasoul.com for more details.\n */\n\nusing p5.exp;\nusing p5.core;\nusing p5.exp.exceptions;\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Globalization;\nusing System.Collections.Generic;\nusing CsvHelper;\nusing MySql.Data.MySqlClient;\n\nnamespace p5.mysql\n{\r\n    /// <summary>\n    ///     Class wrapping [p5.mysql.insert] and [p5.mysql.update].\n    /// </summary>\n    public static class NonQuery\n    {\n        /*\n         * Internal helper to map our CSV file to a generic type.\n         */\n        private class CsvRecord {\n            public string [] Fields { get; set; }\n        }\n\n        /// <summary>\n        ///     Inserts or updates data in the given database [p5.mysql.connect] has previously connected to.\n        /// </summary>\n        /// <param name=\"context\">Application Context</param>\n        /// <param name=\"e\">Parameters passed into Active Event</param>\n        [ActiveEvent (Name = \"p5.mysql.insert\")]\n        [ActiveEvent (Name = \"p5.mysql.update\")]\n        [ActiveEvent (Name = \"p5.mysql.delete\")]\r\n        [ActiveEvent (Name = \"p5.mysql.execute\")]\n        public static void p5_mysql_execute (ApplicationContext context, ActiveEventArgs e)\r\n        {\n            // Making sure we clean up after ourselves.\n            using (new ArgsRemover (e.Args, false)) {\r\n\r\n                // Getting connection, and doing some basic sanity check.\r\n                var connection = Connection.Active (context, e.Args);\r\n                if (connection == null)\r\n                    throw new LambdaException (\"No connection has been opened, use [p5.mysql.connect] before trying to invoke this event\", e.Args, context);\r\n\r\n                // Creating command object.\r\n                using (var cmd = e.Args.GetSqlCommand (context, connection)) {\r\n\r\n                    // Executing non-query, returning affected records to caller, and insert id if relevant.\r\n                    e.Args.Value = cmd.ExecuteNonQuery ();\n\n                    if (e.Name == \"p5.mysql.insert\")\n                        e.Args.Add (\"id\", cmd.LastInsertedId);\r\n                }\n            }\n        }\n\n        /// <summary>\n        ///     Loads a CSV file into specified table\u00df.\n        /// </summary>\n        /// <param name=\"context\">Application Context</param>\n        /// <param name=\"e\">Parameters passed into Active Event</param>\n        [ActiveEvent (Name = \"p5.mysql.load-from\")]\n        public static void p5_mysql_load_from (ApplicationContext context, ActiveEventArgs e)\n        {\n            // Making sure we clean up after ourselves.\n            using (new ArgsRemover (e.Args, false)) {\n\n                // Getting connection, and doing some basic sanity check.\n                var connection = Connection.Active (context, e.Args);\n                if (connection == null)\n                    throw new LambdaException (\"No connection has been opened, use [p5.mysql.connect] before trying to invoke this event\", e.Args, context);\n\n                // Figuring out file to import from.\n                var infile = e.Args.GetExChildValue<string> (\"infile\", context, null);\n                if (string.IsNullOrEmpty (infile))\n                    throw new LambdaException (\"No [infile] supplied to [p5.mysql.load-from],\", e.Args, context);\n                \n                // Figuring out table to import into.\n                var table = e.Args.GetExChildValue<string> (\"table\", context, null);\n                if (string.IsNullOrEmpty (table))\n                    throw new LambdaException (\"No [table] supplied to [p5.mysql.load-from],\", e.Args, context);\n\n                // Unrolling [infile].\n                infile = context.RaiseEvent (\"p5.io.unroll-path\", new Node (\"\", infile).Add (\"args\", e.Args)).Get<string> (context);\n\n                // Verifying user is authorized to reading from [infile].\n                context.RaiseEvent (\".p5.io.authorize.read-file\", new Node (\"\", infile).Add (\"args\", e.Args));\n                \n                // Getting server's root filepath.\n                string rootFolder = context.RaiseEvent (\".p5.core.application-folder\").Get<string> (context);\n                \n                // Figuring our DB types of columns.\n                var types = GetDbTypes (connection, table);\n\n                // Opening up [infile] in read-only mode.\n                using (var stream = File.OpenText (rootFolder + infile)) {\n\n                    // Using the generic \"CsvParser\" since we've got no idea of the file's structure.\r\n                    using (var csv = new CsvParser (stream)) {\n\n                        // Reading the headers.\n                        var headers = csv.Read ();\r\n\n                        // Creating our insert SQL, which is reused, only with different parameters.\r\n                        string insertSql = CreateInsertSQL (table, types, headers);\r\n\n                        // Iterating through each record in file.\n                        var record = csv.Read ();\n                        long no = 0;\n                        while (record != null) {\n\n                            // Creating our SQL command.\n                            var cmd = new MySqlCommand (insertSql, connection);\n\n                            // Adding SQL parameters to our command.\n                            for (var idx = 0; idx < headers.Length; idx++) {\n                                if (types [headers [idx]] != MySqlDbType.Timestamp) {\r\n                                    var val = Convert (record [idx], types, headers [idx]);\r\n                                    cmd.Parameters.AddWithValue (\"@val\" + idx, val);\n                                }\n                            }\n\n                            // Executing our SQL command.\n                            cmd.ExecuteNonQuery ();\n\n                            // Reading our next record.\n                            record = csv.Read ();\n\n                            // Incrementing counter.\n                            no += 1;\n                        }\n                        e.Args.Value = no;\n                    }\n                }\n            }\n        }\r\n\n        /*\n         * Helper for above.\n         */\r\n        private static string CreateInsertSQL (string table, Dictionary<string, MySqlDbType> types, string [] headers)\r\n        {\r\n            // Creating our reused insert SQL command text.\r\n            var insertSql = string.Format (\"insert into `{0}` (\", table);\r\n            var first = true;\r\n            foreach (var idxHeader in headers) {\r\n\r\n                // Skipping TIMESTAMP columns.\r\n                if (types [idxHeader] == MySqlDbType.Timestamp)\r\n                    continue;\r\n                if (first)\r\n                    first = false;\r\n                else\r\n                    insertSql += \",\";\r\n                insertSql += \"`\" + idxHeader + \"`\";\r\n            }\r\n            insertSql += \") values (\";\r\n            first = true;\r\n            for (var idx = 0; idx < headers.Length; idx++) {\r\n\r\n                // Skipping TIMESTAMP columns.\r\n                if (types [headers [idx]] == MySqlDbType.Timestamp)\r\n                    continue;\r\n                if (first)\r\n                    first = false;\r\n                else\r\n                    insertSql += \",\";\r\n                insertSql += \"@val\" + idx;\r\n            }\r\n            insertSql += \")\";\r\n            return insertSql;\r\n        }\r\n\r\n        private static object Convert (string val, Dictionary<string, MySqlDbType> types, string colName)\n        {\n            switch (types [colName]) {\n                case MySqlDbType.Binary:\n                    return val;\n                case MySqlDbType.Bit:\n                    return System.Convert.ChangeType (val, typeof (Int16), CultureInfo.InvariantCulture);\n                case MySqlDbType.Blob:\n                    return Encoding.UTF8.GetBytes (val);\n                case MySqlDbType.Byte:\n                    return System.Convert.ChangeType (val, typeof (byte), CultureInfo.InvariantCulture);\n                case MySqlDbType.Date:\n                    return DateTime.ParseExact (val, \"yyyy-MM-ddTHH:mm:ss\", CultureInfo.InvariantCulture);\n                case MySqlDbType.DateTime:\n                    return DateTime.ParseExact (val, \"yyyy-MM-ddTHH:mm:ss\", CultureInfo.InvariantCulture);\n                case MySqlDbType.Decimal:\n                    return System.Convert.ChangeType (val, typeof (decimal), CultureInfo.InvariantCulture);\n                case MySqlDbType.Double:\n                    return System.Convert.ChangeType (val, typeof (double), CultureInfo.InvariantCulture);\n                case MySqlDbType.Enum:\n                    return val;\n                case MySqlDbType.Float:\n                    return System.Convert.ChangeType (val, typeof (float), CultureInfo.InvariantCulture);\n                case MySqlDbType.Guid:\n                    return System.Convert.ChangeType (val, typeof (Guid), CultureInfo.InvariantCulture);\n                case MySqlDbType.Int16:\n                    return System.Convert.ChangeType (val, typeof (Int16), CultureInfo.InvariantCulture);\n                case MySqlDbType.Int24:\n                    return System.Convert.ChangeType (val, typeof (Int32), CultureInfo.InvariantCulture);\n                case MySqlDbType.Int32:\n                    return System.Convert.ChangeType (val, typeof (Int32), CultureInfo.InvariantCulture);\n                case MySqlDbType.Int64:\n                    return System.Convert.ChangeType (val, typeof (long), CultureInfo.InvariantCulture);\n                case MySqlDbType.JSON:\n                    return val;\n                case MySqlDbType.LongBlob:\n                    return Encoding.UTF8.GetBytes (val);\n                case MySqlDbType.LongText:\n                    return val;\n                case MySqlDbType.MediumBlob:\n                    return Encoding.UTF8.GetBytes (val);\n                case MySqlDbType.MediumText:\n                    return val;\n                case MySqlDbType.NewDecimal:\n                    return System.Convert.ChangeType (val, typeof (decimal), CultureInfo.InvariantCulture);\n                case MySqlDbType.Set:\n                    return val;\n                case MySqlDbType.String:\n                    return val;\n                case MySqlDbType.Text:\n                    return val;\n                case MySqlDbType.Time:\n                    return TimeSpan.ParseExact (val, \"c\", CultureInfo.InvariantCulture);\n                case MySqlDbType.TinyBlob:\n                    return Encoding.UTF8.GetBytes (val);\n                case MySqlDbType.TinyText:\n                    return val;\n                case MySqlDbType.UByte:\n                    return System.Convert.ChangeType (val, typeof (byte), CultureInfo.InvariantCulture);\n                case MySqlDbType.UInt16:\n                    return System.Convert.ChangeType (val, typeof (UInt16), CultureInfo.InvariantCulture);\n                case MySqlDbType.UInt24:\n                    return System.Convert.ChangeType (val, typeof (UInt32), CultureInfo.InvariantCulture);\n                case MySqlDbType.UInt32:\n                    return System.Convert.ChangeType (val, typeof (UInt32), CultureInfo.InvariantCulture);\n                case MySqlDbType.UInt64:\n                    return System.Convert.ChangeType (val, typeof (ulong), CultureInfo.InvariantCulture);\n                case MySqlDbType.VarBinary:\n                    return val;\n                case MySqlDbType.VarChar:\n                    return val;\n                case MySqlDbType.VarString:\n                    return val;\n                case MySqlDbType.Year:\n                    return System.Convert.ChangeType (val, typeof (int), CultureInfo.InvariantCulture);\n                default:\n                    throw new ArgumentException (\"You shouldn't have ended up here!\");\n            }\n        }\n        \n        /*\n         * Helper for above.\n         */\n        private static Dictionary<string, MySqlDbType> GetDbTypes (MySqlConnection connection, string table)\n        {\n            // Our return value.\n            var retVal = new Dictionary<string, MySqlDbType> ();\n            \n            // Creating our SQL command.\n            var cmd = new MySqlCommand (\n                string.Format (\"select column_name, data_type from information_schema.columns where table_name = '{0}' and table_schema='{1}';\",\n                               table, connection.Database),\n                connection);\n\r\n            // Creating SQL data reader, and iterating as long as we have resulting rows.\r\n            using (var reader = cmd.ExecuteReader ()) {\n                while (reader.Read ()) {\n                    retVal [(string)reader [0]] = Convert ((string)reader [1]);\n                }\n            }\r\n\r\n            // Returning mappings to caller.\r\n            return retVal;\n        }\n        \n        private static MySqlDbType Convert (string name)\n        {\n            switch (name.ToUpper (CultureInfo.InvariantCulture)) {\n                case \"CHAR\": return MySqlDbType.String;\n                case \"VARCHAR\": return MySqlDbType.VarChar;\n                case \"DATE\": return MySqlDbType.Date;\n                case \"DATETIME\": return MySqlDbType.DateTime;\n                case \"NUMERIC\":\n                case \"DECIMAL\":\n                case \"DEC\":\n                case \"FIXED\":\n                    return MySqlDbType.NewDecimal;\n                case \"YEAR\":\n                    return MySqlDbType.Year;\n                case \"TIME\":\n                    return MySqlDbType.Time;\n                case \"TIMESTAMP\":\n                    return MySqlDbType.Timestamp;\n                case \"SET\": return MySqlDbType.Set;\n                case \"ENUM\": return MySqlDbType.Enum;\n                case \"BIT\": return MySqlDbType.Bit;\n                case \"TINYINT\":\n                    return MySqlDbType.Byte;\n                case \"BOOL\":\n                case \"BOOLEAN\":\n                    return MySqlDbType.Byte;\n                case \"SMALLINT\":\n                    return MySqlDbType.Int16;\n                case \"MEDIUMINT\":\n                    return MySqlDbType.Int24;\n                case \"INT\":\n                case \"INTEGER\":\n                    return MySqlDbType.Int32;\n                case \"SERIAL\":\n                    return MySqlDbType.UInt64;\n                case \"BIGINT\":\n                    return MySqlDbType.Int64;\n                case \"FLOAT\": return MySqlDbType.Float;\n                case \"DOUBLE\": return MySqlDbType.Double;\n                case \"REAL\":\n                    return MySqlDbType.Double;\n                case \"TEXT\":\n                    return MySqlDbType.Text;\n                case \"BLOB\":\n                    return MySqlDbType.Blob;\n                case \"LONGBLOB\":\n                    return MySqlDbType.LongBlob;\n                case \"LONGTEXT\":\n                    return MySqlDbType.LongText;\n                case \"MEDIUMBLOB\":\n                    return MySqlDbType.MediumBlob;\n                case \"MEDIUMTEXT\":\n                    return MySqlDbType.MediumText;\n                case \"TINYBLOB\":\n                    return MySqlDbType.TinyBlob;\n                case \"TINYTEXT\":\n                    return MySqlDbType.TinyText;\n                case \"BINARY\":\n                    return MySqlDbType.Binary;\n                case \"VARBINARY\":\n                    return MySqlDbType.VarBinary;\n            }\n            throw new ArgumentException (\"Never encountered, hopefully!\");\n        }\n    }\n}\n"], "fixing_code": ["/*\n * Phosphorus Five, copyright 2014 - 2017, Thomas Hansen, thomas@gaiasoul.com\n * \n * This file is part of Phosphorus Five.\n *\n * Phosphorus Five is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 3, as published by\n * the Free Software Foundation.\n *\n *\n * Phosphorus Five is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Phosphorus Five.  If not, see <http://www.gnu.org/licenses/>.\n * \n * If you cannot for some reasons use the GPL license, Phosphorus\n * Five is also commercially available under Quid Pro Quo terms. Check \n * out our website at http://gaiasoul.com for more details.\n */\n\nusing p5.exp;\nusing p5.core;\nusing p5.exp.exceptions;\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Globalization;\nusing System.Collections.Generic;\nusing CsvHelper;\nusing MySql.Data.MySqlClient;\n\nnamespace p5.mysql\n{\r\n    /// <summary>\n    ///     Class wrapping [p5.mysql.insert] and [p5.mysql.update].\n    /// </summary>\n    public static class NonQuery\n    {\n        /*\n         * Internal helper to map our CSV file to a generic type.\n         */\n        private class CsvRecord {\n            public string [] Fields { get; set; }\n        }\n\n        /// <summary>\n        ///     Inserts or updates data in the given database [p5.mysql.connect] has previously connected to.\n        /// </summary>\n        /// <param name=\"context\">Application Context</param>\n        /// <param name=\"e\">Parameters passed into Active Event</param>\n        [ActiveEvent (Name = \"p5.mysql.insert\")]\n        [ActiveEvent (Name = \"p5.mysql.update\")]\n        [ActiveEvent (Name = \"p5.mysql.delete\")]\r\n        [ActiveEvent (Name = \"p5.mysql.execute\")]\n        public static void p5_mysql_execute (ApplicationContext context, ActiveEventArgs e)\r\n        {\n            // Making sure we clean up after ourselves.\n            using (new ArgsRemover (e.Args, false)) {\r\n\r\n                // Getting connection, and doing some basic sanity check.\r\n                var connection = Connection.Active (context, e.Args);\r\n                if (connection == null)\r\n                    throw new LambdaException (\"No connection has been opened, use [p5.mysql.connect] before trying to invoke this event\", e.Args, context);\r\n\r\n                // Creating command object.\r\n                using (var cmd = e.Args.GetSqlCommand (context, connection)) {\r\n\r\n                    // Executing non-query, returning affected records to caller, and insert id if relevant.\r\n                    e.Args.Value = cmd.ExecuteNonQuery ();\n\n                    if (e.Name == \"p5.mysql.insert\")\n                        e.Args.Add (\"id\", cmd.LastInsertedId);\r\n                }\n            }\n        }\n\n        /// <summary>\n        ///     Loads a CSV file into specified table\u00df.\n        /// </summary>\n        /// <param name=\"context\">Application Context</param>\n        /// <param name=\"e\">Parameters passed into Active Event</param>\n        [ActiveEvent (Name = \"p5.mysql.load-from\")]\n        public static void p5_mysql_load_from (ApplicationContext context, ActiveEventArgs e)\n        {\n            // Making sure we clean up after ourselves.\n            using (new ArgsRemover (e.Args, false)) {\n\n                // Getting connection, and doing some basic sanity check.\n                var connection = Connection.Active (context, e.Args);\n                if (connection == null)\n                    throw new LambdaException (\"No connection has been opened, use [p5.mysql.connect] before trying to invoke this event\", e.Args, context);\n\n                // Figuring out file to import from.\n                var infile = e.Args.GetExChildValue<string> (\"infile\", context, null);\n                if (string.IsNullOrEmpty (infile))\n                    throw new LambdaException (\"No [infile] supplied to [p5.mysql.load-from],\", e.Args, context);\n                \n                // Figuring out table to import into.\n                var table = e.Args.GetExChildValue<string> (\"table\", context, null);\n                if (string.IsNullOrEmpty (table))\n                    throw new LambdaException (\"No [table] supplied to [p5.mysql.load-from],\", e.Args, context);\n\n                // Unrolling [infile].\n                infile = context.RaiseEvent (\"p5.io.unroll-path\", new Node (\"\", infile).Add (\"args\", e.Args)).Get<string> (context);\n\n                // Verifying user is authorized to reading from [infile].\n                context.RaiseEvent (\".p5.io.authorize.read-file\", new Node (\"\", infile).Add (\"args\", e.Args));\n                \n                // Getting server's root filepath.\n                string rootFolder = context.RaiseEvent (\".p5.core.application-folder\").Get<string> (context);\n                \n                // Figuring our DB types of columns.\n                var types = GetDbTypes (connection, table);\n\n                // Opening up [infile] in read-only mode.\n                using (var stream = File.OpenText (rootFolder + infile)) {\n\n                    // Using the generic \"CsvParser\" since we've got no idea of the file's structure.\r\n                    using (var csv = new CsvParser (stream)) {\n\n                        // Reading the headers.\n                        var headers = csv.Read ();\r\n\n                        // Creating our insert SQL, which is reused, only with different parameters.\r\n                        string insertSql = CreateInsertSQL (table, types, headers);\r\n\n                        // Iterating through each record in file.\n                        var record = csv.Read ();\n                        long no = 0;\n                        while (record != null) {\n\n                            // Creating our SQL command.\n                            var cmd = new MySqlCommand (insertSql, connection);\n\n                            // Adding SQL parameters to our command.\n                            for (var idx = 0; idx < headers.Length; idx++) {\n                                if (types [headers [idx]] != MySqlDbType.Timestamp) {\r\n                                    var val = Convert (record [idx], types, headers [idx]);\r\n                                    cmd.Parameters.AddWithValue (\"@val\" + idx, val);\n                                }\n                            }\n\n                            // Executing our SQL command.\n                            cmd.ExecuteNonQuery ();\n\n                            // Reading our next record.\n                            record = csv.Read ();\n\n                            // Incrementing counter.\n                            no += 1;\n                        }\n                        e.Args.Value = no;\n                    }\n                }\n            }\n        }\r\n\n        /*\n         * Helper for above.\n         */\r\n        private static string CreateInsertSQL (string table, Dictionary<string, MySqlDbType> types, string [] headers)\r\n        {\n            // Creating our reused insert SQL command text.\r\n            var insertSql = string.Format (\"insert into `{0}` (\", table);\r\n            var first = true;\r\n            foreach (var idxHeader in headers) {\n                \n                // Sanity checking column name\n                foreach (var idxChar in idxHeader) {\n                    if (\"0123456789_-abcdefghijklmnopqrstuvwxyz\".IndexOf (idxChar.ToString ().ToLower (CultureInfo.InvariantCulture), StringComparison.InvariantCulture) == -1)\n                        throw new System.Security.SecurityException (\"Unsupported and insecure column name found in your CSV file.\");\n                }\r\n\r\n                // Skipping TIMESTAMP columns.\r\n                if (types [idxHeader] == MySqlDbType.Timestamp)\r\n                    continue;\r\n                if (first)\r\n                    first = false;\r\n                else\r\n                    insertSql += \",\";\r\n                insertSql += \"`\" + idxHeader + \"`\";\r\n            }\r\n            insertSql += \") values (\";\r\n            first = true;\r\n            for (var idx = 0; idx < headers.Length; idx++) {\r\n\r\n                // Skipping TIMESTAMP columns.\r\n                if (types [headers [idx]] == MySqlDbType.Timestamp)\r\n                    continue;\r\n                if (first)\r\n                    first = false;\r\n                else\r\n                    insertSql += \",\";\r\n                insertSql += \"@val\" + idx;\r\n            }\r\n            insertSql += \")\";\r\n            return insertSql;\r\n        }\r\n\r\n        private static object Convert (string val, Dictionary<string, MySqlDbType> types, string colName)\n        {\n            switch (types [colName]) {\n                case MySqlDbType.Binary:\n                    return val;\n                case MySqlDbType.Bit:\n                    return System.Convert.ChangeType (val, typeof (Int16), CultureInfo.InvariantCulture);\n                case MySqlDbType.Blob:\n                    return Encoding.UTF8.GetBytes (val);\n                case MySqlDbType.Byte:\n                    return System.Convert.ChangeType (val, typeof (byte), CultureInfo.InvariantCulture);\n                case MySqlDbType.Date:\n                    return DateTime.ParseExact (val, \"yyyy-MM-ddTHH:mm:ss\", CultureInfo.InvariantCulture);\n                case MySqlDbType.DateTime:\n                    return DateTime.ParseExact (val, \"yyyy-MM-ddTHH:mm:ss\", CultureInfo.InvariantCulture);\n                case MySqlDbType.Decimal:\n                    return System.Convert.ChangeType (val, typeof (decimal), CultureInfo.InvariantCulture);\n                case MySqlDbType.Double:\n                    return System.Convert.ChangeType (val, typeof (double), CultureInfo.InvariantCulture);\n                case MySqlDbType.Enum:\n                    return val;\n                case MySqlDbType.Float:\n                    return System.Convert.ChangeType (val, typeof (float), CultureInfo.InvariantCulture);\n                case MySqlDbType.Guid:\n                    return System.Convert.ChangeType (val, typeof (Guid), CultureInfo.InvariantCulture);\n                case MySqlDbType.Int16:\n                    return System.Convert.ChangeType (val, typeof (Int16), CultureInfo.InvariantCulture);\n                case MySqlDbType.Int24:\n                    return System.Convert.ChangeType (val, typeof (Int32), CultureInfo.InvariantCulture);\n                case MySqlDbType.Int32:\n                    return System.Convert.ChangeType (val, typeof (Int32), CultureInfo.InvariantCulture);\n                case MySqlDbType.Int64:\n                    return System.Convert.ChangeType (val, typeof (long), CultureInfo.InvariantCulture);\n                case MySqlDbType.JSON:\n                    return val;\n                case MySqlDbType.LongBlob:\n                    return Encoding.UTF8.GetBytes (val);\n                case MySqlDbType.LongText:\n                    return val;\n                case MySqlDbType.MediumBlob:\n                    return Encoding.UTF8.GetBytes (val);\n                case MySqlDbType.MediumText:\n                    return val;\n                case MySqlDbType.NewDecimal:\n                    return System.Convert.ChangeType (val, typeof (decimal), CultureInfo.InvariantCulture);\n                case MySqlDbType.Set:\n                    return val;\n                case MySqlDbType.String:\n                    return val;\n                case MySqlDbType.Text:\n                    return val;\n                case MySqlDbType.Time:\n                    return TimeSpan.ParseExact (val, \"c\", CultureInfo.InvariantCulture);\n                case MySqlDbType.TinyBlob:\n                    return Encoding.UTF8.GetBytes (val);\n                case MySqlDbType.TinyText:\n                    return val;\n                case MySqlDbType.UByte:\n                    return System.Convert.ChangeType (val, typeof (byte), CultureInfo.InvariantCulture);\n                case MySqlDbType.UInt16:\n                    return System.Convert.ChangeType (val, typeof (UInt16), CultureInfo.InvariantCulture);\n                case MySqlDbType.UInt24:\n                    return System.Convert.ChangeType (val, typeof (UInt32), CultureInfo.InvariantCulture);\n                case MySqlDbType.UInt32:\n                    return System.Convert.ChangeType (val, typeof (UInt32), CultureInfo.InvariantCulture);\n                case MySqlDbType.UInt64:\n                    return System.Convert.ChangeType (val, typeof (ulong), CultureInfo.InvariantCulture);\n                case MySqlDbType.VarBinary:\n                    return val;\n                case MySqlDbType.VarChar:\n                    return val;\n                case MySqlDbType.VarString:\n                    return val;\n                case MySqlDbType.Year:\n                    return System.Convert.ChangeType (val, typeof (int), CultureInfo.InvariantCulture);\n                default:\n                    throw new ArgumentException (\"You shouldn't have ended up here!\");\n            }\n        }\n        \n        /*\n         * Helper for above.\n         */\n        private static Dictionary<string, MySqlDbType> GetDbTypes (MySqlConnection connection, string table)\n        {\n            // Our return value.\n            var retVal = new Dictionary<string, MySqlDbType> ();\n            \n            // Creating our SQL command.\n            var cmd = new MySqlCommand (\n                string.Format (\"select column_name, data_type from information_schema.columns where table_name = '{0}' and table_schema='{1}';\",\n                               table, connection.Database),\n                connection);\n\r\n            // Creating SQL data reader, and iterating as long as we have resulting rows.\r\n            using (var reader = cmd.ExecuteReader ()) {\n                while (reader.Read ()) {\n                    retVal [(string)reader [0]] = Convert ((string)reader [1]);\n                }\n            }\r\n\r\n            // Returning mappings to caller.\r\n            return retVal;\n        }\n        \n        private static MySqlDbType Convert (string name)\n        {\n            switch (name.ToUpper (CultureInfo.InvariantCulture)) {\n                case \"CHAR\": return MySqlDbType.String;\n                case \"VARCHAR\": return MySqlDbType.VarChar;\n                case \"DATE\": return MySqlDbType.Date;\n                case \"DATETIME\": return MySqlDbType.DateTime;\n                case \"NUMERIC\":\n                case \"DECIMAL\":\n                case \"DEC\":\n                case \"FIXED\":\n                    return MySqlDbType.NewDecimal;\n                case \"YEAR\":\n                    return MySqlDbType.Year;\n                case \"TIME\":\n                    return MySqlDbType.Time;\n                case \"TIMESTAMP\":\n                    return MySqlDbType.Timestamp;\n                case \"SET\": return MySqlDbType.Set;\n                case \"ENUM\": return MySqlDbType.Enum;\n                case \"BIT\": return MySqlDbType.Bit;\n                case \"TINYINT\":\n                    return MySqlDbType.Byte;\n                case \"BOOL\":\n                case \"BOOLEAN\":\n                    return MySqlDbType.Byte;\n                case \"SMALLINT\":\n                    return MySqlDbType.Int16;\n                case \"MEDIUMINT\":\n                    return MySqlDbType.Int24;\n                case \"INT\":\n                case \"INTEGER\":\n                    return MySqlDbType.Int32;\n                case \"SERIAL\":\n                    return MySqlDbType.UInt64;\n                case \"BIGINT\":\n                    return MySqlDbType.Int64;\n                case \"FLOAT\": return MySqlDbType.Float;\n                case \"DOUBLE\": return MySqlDbType.Double;\n                case \"REAL\":\n                    return MySqlDbType.Double;\n                case \"TEXT\":\n                    return MySqlDbType.Text;\n                case \"BLOB\":\n                    return MySqlDbType.Blob;\n                case \"LONGBLOB\":\n                    return MySqlDbType.LongBlob;\n                case \"LONGTEXT\":\n                    return MySqlDbType.LongText;\n                case \"MEDIUMBLOB\":\n                    return MySqlDbType.MediumBlob;\n                case \"MEDIUMTEXT\":\n                    return MySqlDbType.MediumText;\n                case \"TINYBLOB\":\n                    return MySqlDbType.TinyBlob;\n                case \"TINYTEXT\":\n                    return MySqlDbType.TinyText;\n                case \"BINARY\":\n                    return MySqlDbType.Binary;\n                case \"VARBINARY\":\n                    return MySqlDbType.VarBinary;\n            }\n            throw new ArgumentException (\"Never encountered, hopefully!\");\n        }\n    }\n}\n"], "filenames": ["plugins/extras/p5.mysql/NonQuery.cs"], "buggy_code_start_loc": [165], "buggy_code_end_loc": [170], "fixing_code_start_loc": [165], "fixing_code_end_loc": [176], "type": "CWE-89", "message": "A vulnerability has been found in polterguy Phosphorus Five up to 8.2 and classified as critical. This vulnerability affects the function csv.Read of the file plugins/extras/p5.mysql/NonQuery.cs of the component CSV Import. The manipulation leads to sql injection. Upgrading to version 8.3 is able to address this issue. The name of the patch is c179a3d0703db55cfe0cb939b89593f2e7a87246. It is recommended to upgrade the affected component. VDB-217606 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2018-25070", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T11:15:08.910", "lastModified": "2023-01-12T19:58:41.997", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in polterguy Phosphorus Five up to 8.2 and classified as critical. This vulnerability affects the function csv.Read of the file plugins/extras/p5.mysql/NonQuery.cs of the component CSV Import. The manipulation leads to sql injection. Upgrading to version 8.3 is able to address this issue. The name of the patch is c179a3d0703db55cfe0cb939b89593f2e7a87246. It is recommended to upgrade the affected component. VDB-217606 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:aista:phosphorus_five:*:*:*:*:*:*:*:*", "versionEndIncluding": "8.2", "matchCriteriaId": "EA8475F1-86BE-4A57-9715-BCDD43B8FC8F"}]}]}], "references": [{"url": "https://github.com/polterguy/phosphorusfive/commit/c179a3d0703db55cfe0cb939b89593f2e7a87246", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/polterguy/phosphorusfive/releases/tag/v8.3", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217606", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217606", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/polterguy/phosphorusfive/commit/c179a3d0703db55cfe0cb939b89593f2e7a87246"}}