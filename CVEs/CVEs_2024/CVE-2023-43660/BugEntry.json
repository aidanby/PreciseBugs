{"buggy_code": ["# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"aes\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"433cfd6710c9986c576a25ca913c39d66a6474107b406f34f91d4a8923395241\"\ndependencies = [\n \"cfg-if\",\n \"cipher\",\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"aes-gcm\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82e1366e0c69c9f927b1fa5ce2c7bf9eafc8f9268c0b9800729e8b267612447c\"\ndependencies = [\n \"aead\",\n \"aes\",\n \"cipher\",\n \"ctr\",\n \"ghash\",\n \"subtle\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47\"\ndependencies = [\n \"getrandom 0.2.9\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c99f64d1e06488f620f932677e24bc6e2897582980441ae90a671415bd7ec2f\"\ndependencies = [\n \"cfg-if\",\n \"getrandom 0.2.9\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"aliasable\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"250f629c0161ad8107cf89319e990051fae62832fd343083bea452d93e2205fd\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ca84f3628370c59db74ee214b3263d58f9aadd9b4fe7e711fd87dc452b7f163\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is-terminal\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a30da5c5f2d5e72842e00bcb57657162cdabef0931f40e2deb9b4140440cecd\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"938874ff5980b03a87c5524b3ae5b59cf99b1d6bc836848df7bc5ada9643c333\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ca11d4be1bab0c8bc8734a9aa7bf4ee8316d462a08c6ac5052f888fef5b494b\"\ndependencies = [\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"180abfa45703aebe0093f79badacc01b8fd4ea2e35118747e5811127f926e188\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.70\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7de8ce5e0f9f8d88245311066a578d72b7af3e7088f32783804676302df237e4\"\ndependencies = [\n \"backtrace\",\n]\n\n[[package]]\nname = \"argon2\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db4ce4441f99dbd377ca8a8f57b698c44d0d6e712d8329b5040da5a64aa1ce73\"\ndependencies = [\n \"base64ct\",\n \"blake2\",\n \"password-hash 0.4.2\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6\"\n\n[[package]]\nname = \"async-attributes\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3203e79f4dd9bdda415ed03cf14dae5a2bf775c683a00f94e9cd1faf0f596e5\"\ndependencies = [\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"async-channel\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf46fee83e5ccffc220104713af3292ff9bc7c64c7de289f66dae8e38d826833\"\ndependencies = [\n \"concurrent-queue\",\n \"event-listener\",\n \"futures-core\",\n]\n\n[[package]]\nname = \"async-executor\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fa3dc5f2a8564f07759c008b9109dc0d39de92a88d5588b8a5036d286383afb\"\ndependencies = [\n \"async-lock\",\n \"async-task\",\n \"concurrent-queue\",\n \"fastrand\",\n \"futures-lite\",\n \"slab\",\n]\n\n[[package]]\nname = \"async-global-executor\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1b6f5d7df27bd294849f8eec66ecfc63d11814df7a4f5d74168a2394467b776\"\ndependencies = [\n \"async-channel\",\n \"async-executor\",\n \"async-io\",\n \"async-lock\",\n \"blocking\",\n \"futures-lite\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"async-io\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fc5b45d93ef0529756f812ca52e44c221b35341892d3dcc34132ac02f3dd2af\"\ndependencies = [\n \"async-lock\",\n \"autocfg\",\n \"cfg-if\",\n \"concurrent-queue\",\n \"futures-lite\",\n \"log\",\n \"parking\",\n \"polling\",\n \"rustix\",\n \"slab\",\n \"socket2\",\n \"waker-fn\",\n]\n\n[[package]]\nname = \"async-lock\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa24f727524730b077666307f2734b4a1a1c57acb79193127dcc8914d5242dd7\"\ndependencies = [\n \"event-listener\",\n]\n\n[[package]]\nname = \"async-std\"\nversion = \"1.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62565bb4402e926b29953c785397c6dc0391b7b446e45008b0049eb43cec6f5d\"\ndependencies = [\n \"async-attributes\",\n \"async-channel\",\n \"async-global-executor\",\n \"async-io\",\n \"async-lock\",\n \"crossbeam-utils\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-lite\",\n \"gloo-timers\",\n \"kv-log-macro\",\n \"log\",\n \"memchr\",\n \"once_cell\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n \"wasm-bindgen-futures\",\n]\n\n[[package]]\nname = \"async-stream\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd56dd203fef61ac097dd65721a419ddccb106b2d2b70ba60a6b529f03961a51\"\ndependencies = [\n \"async-stream-impl\",\n \"futures-core\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"async-stream-impl\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16e62a023e7c117e27523144c5d2459f4397fcc3cab0085af8e2224f643a0193\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"async-task\"\nversion = \"4.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc7ab41815b3c653ccd2978ec3255c81349336702dfdf62ee6f7069b12a3aae\"\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.73\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc00ceb34980c03614e35a3a4e218276a0a824e911d07651cd0d858a51e8c0f0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"atoi\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f28d99ec8bfea296261ca1af174f24225171fea9664ba9003cbebee704810528\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"atomic-waker\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1181e1e0d1fce796a03db1ae795d67167da795f9cf4a39c37589e85ef57f26d3\"\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi 0.1.19\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"axum\"\nversion = \"0.6.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"113713495a32dd0ab52baf5c10044725aa3aec00b31beda84218e469029b72a3\"\ndependencies = [\n \"async-trait\",\n \"axum-core\",\n \"bitflags 1.3.2\",\n \"bytes\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"itoa\",\n \"matchit\",\n \"memchr\",\n \"mime\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"rustversion\",\n \"serde\",\n \"sync_wrapper\",\n \"tower\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"axum-core\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"759fa577a247914fd3f7f76d62972792636412fbfd634cd452f6a385a74d2d2c\"\ndependencies = [\n \"async-trait\",\n \"bytes\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"mime\",\n \"rustversion\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.67\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"233d376d6d185f2a3093e58f283f60f880315b6c60075b01f36b3b85154564ca\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"base32\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23ce669cd6c8588f79e15cf450314f9638f967fc5770ff1c7c1deb0925ea7cfa\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ea22880d78093b0cbe17c89f64a7d457941e65759157ec6cb31a31d652b05e5\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4a4ddaa51a5bc52a6948f74c06d20aaaddb71924eab79b8c97a8c556e942d6a\"\n\n[[package]]\nname = \"base64ct\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b\"\n\n[[package]]\nname = \"bcrypt-pbkdf\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6aeac2e1fe888769f34f05ac343bbef98b14d1ffb292ab69d4608b3abc86f2a2\"\ndependencies = [\n \"blowfish\",\n \"pbkdf2 0.12.2\",\n \"sha2\",\n]\n\n[[package]]\nname = \"bigdecimal\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6aaf33151a6429fe9211d1b276eafdf70cdff28b071e76c0b0e1503221ea3744\"\ndependencies = [\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"bimap\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"230c5f1ca6a325a32553f8640d31ac9b49f2411e901e427570154868b46da4f7\"\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.59.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bd2a9a458e8f4304c52c43ebb0cfbd520289f8379a52e329a38afda99bf8eb8\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cexpr\",\n \"clang-sys\",\n \"lazy_static\",\n \"lazycell\",\n \"peeking_take_while\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n]\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"630be753d4e58660abd17930c71b647fe46c27ea6b63cc59e1e3851406972e42\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"block-padding\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8894febbff9f758034a5b8e12d87918f56dfc64a8e1fe757d65e29041538d93\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"blocking\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77231a1c8f801696fc0123ec6150ce92cffb8e164a02afb9c8ddee0e9b65ad65\"\ndependencies = [\n \"async-channel\",\n \"async-lock\",\n \"async-task\",\n \"atomic-waker\",\n \"fastrand\",\n \"futures-lite\",\n \"log\",\n]\n\n[[package]]\nname = \"blowfish\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e412e2cd0f2b2d93e02543ceae7917b3c70331573df19ee046bcbc35e45e87d7\"\ndependencies = [\n \"byteorder\",\n \"cipher\",\n]\n\n[[package]]\nname = \"borsh\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4114279215a005bc675e386011e594e1d9b800918cea18fcadadcce864a2046b\"\ndependencies = [\n \"borsh-derive\",\n \"hashbrown 0.13.2\",\n]\n\n[[package]]\nname = \"borsh-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0754613691538d51f329cce9af41d7b7ca150bc973056f1156611489475f54f7\"\ndependencies = [\n \"borsh-derive-internal\",\n \"borsh-schema-derive-internal\",\n \"proc-macro-crate 0.1.5\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"borsh-derive-internal\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afb438156919598d2c7bad7e1c0adf3d26ed3840dbc010db1a882a65583ca2fb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"borsh-schema-derive-internal\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"634205cc43f74a1b9046ef87c4540ebda95696ec0f315024860cad7c5b0f5ccd\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d261e256854913907f67ed06efbc3338dfe6179796deefc1ff763fc1aee5535\"\n\n[[package]]\nname = \"bytecheck\"\nversion = \"0.6.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13fe11640a23eb24562225322cd3e452b93a3d4091d62fab69c70542fcd17d1f\"\ndependencies = [\n \"bytecheck_derive\",\n \"ptr_meta\",\n \"simdutf8\",\n]\n\n[[package]]\nname = \"bytecheck_derive\"\nversion = \"0.6.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e31225543cb46f81a7e224762764f4a6a0f097b1db0b175f69e8065efaa42de5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89b2fd2a0dcf38d7971e2194b6b6eebab45ae01067456a7fd93d5547a61b70be\"\n\n[[package]]\nname = \"cbc\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b52a9543ae338f279b96b0b9fed9c8093744685043739079ce85cd58f289a6\"\ndependencies = [\n \"cipher\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chacha20\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3613f74bd2eac03dad61bd53dbe620703d4371614fe0bc3b9f04dd36fe4e818\"\ndependencies = [\n \"cfg-if\",\n \"cipher\",\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e3c5919066adf22df73762e50cffcde3a758f2a848b113b586d1f86728b673b\"\ndependencies = [\n \"iana-time-zone\",\n \"num-integer\",\n \"num-traits\",\n \"serde\",\n \"winapi\",\n]\n\n[[package]]\nname = \"cipher\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad\"\ndependencies = [\n \"crypto-common\",\n \"inout\",\n]\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c688fc74432808e3eb684cae8830a86be1d66a2bd58e1f248ed0960a590baf6f\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"3.2.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71655c45cb9845d3270c9d6df84ebe72b4dad3c2ba3f7023ad47c144e4e473a5\"\ndependencies = [\n \"atty\",\n \"bitflags 1.3.2\",\n \"clap_derive 3.2.18\",\n \"clap_lex 0.2.4\",\n \"indexmap 1.9.3\",\n \"once_cell\",\n \"strsim\",\n \"termcolor\",\n \"textwrap\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c27cdf28c0f604ba3f512b0c9a409f8de8513e4816705deb0498b627e7c3a3fd\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive 4.3.12\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08a9f1ab5e9f01a9b81f202e8562eb9a10de70abf9eaeac1be465c28b75aa4aa\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex 0.5.0\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"3.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea0c8bce528c4be4da13ea6fead8965e95b6073585a2f05204bd8f4119f82a65\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.3.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54a9bb5758fc5dfe728d1019941681eccaf0cf8a4189b692a0ee2f2ecf90a050\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2850f2f5a82cbf437dd5af4d49848fbdfc27c157c3d010345776f952765261c5\"\ndependencies = [\n \"os_str_bytes\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2da6da31387c7e4ef160ffab6d5e7f00c42626fe39aea70a7b0f1773f7dd6c1b\"\n\n[[package]]\nname = \"cmake\"\nversion = \"0.1.50\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a31c789563b815f77f4250caee12365734369f942439b7defd71e18a48197130\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"codespan-reporting\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e\"\ndependencies = [\n \"termcolor\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7\"\n\n[[package]]\nname = \"concurrent-queue\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62ec6771ecfa0762d24683ee5a32ad78487a3d3afdc0fb8cae19d2c5deb50b7c\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"config\"\nversion = \"0.13.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d379af7f68bfc21714c6c7dea883544201741d2ce8274bb12fa54f89507f52a7\"\ndependencies = [\n \"async-trait\",\n \"lazy_static\",\n \"nom\",\n \"pathdiff\",\n \"serde\",\n \"yaml-rust\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.15.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3d79fbe8970a77e3e34151cc13d3b3e248aa0faaecb9f6091fa07ebefe5ad60\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"unicode-width\",\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"console-api\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e57ff02e8ad8e06ab9731d5dc72dc23bef9200778eae1a89d555d8c42e5d4a86\"\ndependencies = [\n \"prost\",\n \"prost-types\",\n \"tonic\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"console-subscriber\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22a3a81dfaf6b66bce5d159eddae701e3a002f194d378cbf7be5f053c281d9be\"\ndependencies = [\n \"console-api\",\n \"crossbeam-channel\",\n \"crossbeam-utils\",\n \"futures\",\n \"hdrhistogram\",\n \"humantime\",\n \"prost-types\",\n \"serde\",\n \"serde_json\",\n \"thread_local\",\n \"tokio\",\n \"tokio-stream\",\n \"tonic\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"const-oid\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"795bc6e66a8e340f075fcf6227e417a2dc976b92b91f3cdc778bb858778b6747\"\n\n[[package]]\nname = \"constant_time_eq\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13418e745008f7349ec7e449155f419a61b92b58a99cc3616942b926825ec76b\"\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n\n[[package]]\nname = \"cookie\"\nversion = \"0.16.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e859cd57d0710d9e06c381b550c06e76992472a8c6d527aecd2fc673dcc231fb\"\ndependencies = [\n \"aes-gcm\",\n \"base64 0.20.0\",\n \"hkdf\",\n \"hmac\",\n \"percent-encoding\",\n \"rand 0.8.5\",\n \"sha2\",\n \"subtle\",\n \"time\",\n \"version_check\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e496a50fda8aacccc86d7529e2c1e0892dbd0f898a6b5645b5561b89c3210efa\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"280a9f2d8b3a38871a3c8a46fb80db65e5e5ed97da80c4d08bf27fb63e35e181\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc\"\nversion = \"3.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86ec7a15cbe22e59248fc7eadb1907dab5ba09372595da4d73dd805ed4417dfe\"\ndependencies = [\n \"crc-catalog\",\n]\n\n[[package]]\nname = \"crc-catalog\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9cace84e55f07e7301bae1c519df89cdad8cc3cd868413d3fdbdeca9ff3db484\"\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-queue\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1cfb3ea8a53f37c40dea2c7bedcbd88bdfae54f5e2175d6ecaff1c988353add\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c063cd8cc95f5c377ed0d4b49a4b21f632396ff690e8470c29b3359b346984b\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core 0.6.4\",\n \"typenum\",\n]\n\n[[package]]\nname = \"ctor\"\nversion = \"0.1.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d2301688392eb071b0bf1a37be05c469d3cc4dbbd95df672fe28ab021e6a096\"\ndependencies = [\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ctr\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0369ee1ad671834580515889b80f2ea915f23b8be8d0daa4bbaf2ac5c7590835\"\ndependencies = [\n \"cipher\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f711ade317dd348950a9910f81c5947e3d8907ebd2b83f76203ff1807e6a2bc2\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"platforms\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83fdaf97f4804dcebfa5862639bc9ce4121e82140bec2a987ac5140294865b5b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"cxx\"\nversion = \"1.0.94\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f61f1b6389c3fe1c316bf8a4dccc90a38208354b330925bce1f74a6c4756eb93\"\ndependencies = [\n \"cc\",\n \"cxxbridge-flags\",\n \"cxxbridge-macro\",\n \"link-cplusplus\",\n]\n\n[[package]]\nname = \"cxx-build\"\nversion = \"1.0.94\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12cee708e8962df2aeb38f594aae5d827c022b6460ac71a7a3e2c3c2aae5a07b\"\ndependencies = [\n \"cc\",\n \"codespan-reporting\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"scratch\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"cxxbridge-flags\"\nversion = \"1.0.94\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7944172ae7e4068c533afbb984114a56c46e9ccddda550499caa222902c7f7bb\"\n\n[[package]]\nname = \"cxxbridge-macro\"\nversion = \"1.0.94\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2345488264226bf682893e25de0769f3360aac9957980ec49361b083ddaa5bc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a01d95850c592940db9b8194bc39f4bc0e89dee5c4265e4b1807c34a9aba453c\"\ndependencies = [\n \"darling_core 0.13.4\",\n \"darling_macro 0.13.4\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core 0.14.4\",\n \"darling_macro 0.14.4\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"859d65a907b6852c9361e3185c862aae7fafd2887876799fa55f5f99dc40d610\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c972679f83bdf9c42bd905396b6c3588a843a17f0f16dfcfa3e2c5d57441835\"\ndependencies = [\n \"darling_core 0.13.4\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core 0.14.4\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"data-encoding\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23d8666cb01533c39dde32bcbab8e227b4ed6679b2c925eba05feabea39508fb\"\n\n[[package]]\nname = \"delegate\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35c47a31748d9cfa641f6cccb3608385fafe261ba36054f3d40d5a3ca11eb1af\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"der\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fffa369a668c8af7dbf8b5e56c9f744fbd399949ed171606040001947de40b1c\"\ndependencies = [\n \"const-oid\",\n \"pem-rfc7468\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"derivative\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\ndependencies = [\n \"convert_case\",\n \"proc-macro2\",\n \"quote\",\n \"rustc_version\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"dialoguer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59c6f2989294b9a498d3ad5491a79c6deb604617378e1cdc4bfc1c1361fe2f87\"\ndependencies = [\n \"console\",\n \"shell-words\",\n \"tempfile\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"const-oid\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"dotenvy\"\nversion = \"0.15.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1aaf95b3e5c8f23aa320147307562d361db0ae0d51242340f558153b4eb2439b\"\n\n[[package]]\nname = \"ed25519\"\nversion = \"2.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60f6d271ca33075c88028be6f04d502853d63a5ece419d269c15315d4fc1cf1d\"\ndependencies = [\n \"pkcs8\",\n \"signature\",\n]\n\n[[package]]\nname = \"ed25519-dalek\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7277392b266383ef8396db7fdeb1e77b6c52fed775f5df15bb24f35b72156980\"\ndependencies = [\n \"curve25519-dalek\",\n \"ed25519\",\n \"rand_core 0.6.4\",\n \"serde\",\n \"sha2\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071a31f4ee85403370b58aca746f01041ede6f0da2730960ad001edc2b71b394\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bcfec3a70f97c962c307b2d2c56e358cf1d00b558d74262b5f929ee8cc7e73a\"\ndependencies = [\n \"errno-dragonfly\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"errno-dragonfly\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"etcetera\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"136d1b5283a1ab77bd9257427ffd09d8667ced0570b6f938942bc7568ed5b943\"\ndependencies = [\n \"cfg-if\",\n \"home\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"event-listener\"\nversion = \"2.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0206175f82b8d6bf6652ff7d71a1e27fd2e4efde587fd368662814d6ec1d9ce0\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.1.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e825f6987101665dea6ec934c09ec6d721de7bc1bf92248e1d5810c8cd636b77\"\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cbc844cecaee9d4443931972e1289c8ff485cb4cc2767cb03ca139ed6885153\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall 0.2.16\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8a2db397cb1c8772f31494cb8917e48cd1e64f0fa7efac59fbd741a0a8ce841\"\ndependencies = [\n \"crc32fast\",\n \"libz-sys\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"flume\"\nversion = \"0.10.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1657b4441c3403d9f7b3409e47575237dac27b1b5726df654a6ecbf92f0f7577\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n \"pin-project\",\n \"spin 0.9.8\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9c384f161156f5260c24a097c56119f9be8c798586aecc13afbcbe7b7e26bf8\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"frunk\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a89c703bf50009f383a0873845357cc400a95fc535f836feddfe015d7df6e1e0\"\ndependencies = [\n \"frunk_core\",\n \"frunk_derives\",\n \"frunk_proc_macros\",\n]\n\n[[package]]\nname = \"frunk_core\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a446d01a558301dca28ef43222864a9fa2bd9a2e71370f769d5d5d5ec9f3537\"\n\n[[package]]\nname = \"frunk_derives\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b83164912bb4c97cfe0772913c7af7387ee2e00cb6d4636fb65a35b3d0c8f173\"\ndependencies = [\n \"frunk_proc_macro_helpers\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"frunk_proc_macro_helpers\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"015425591bbeb0f5b8a75593340f1789af428e9f887a4f1e36c0c471f067ef50\"\ndependencies = [\n \"frunk_core\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"frunk_proc_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea01524f285deab48affffb342b97f186e657b119c3f1821ac531780e0fbfae0\"\ndependencies = [\n \"frunk_core\",\n \"frunk_proc_macros_impl\",\n \"proc-macro-hack\",\n]\n\n[[package]]\nname = \"frunk_proc_macros_impl\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a802d974cc18ee7fe1a7868fc9ce31086294fd96ba62f8da64ecb44e92a2653\"\ndependencies = [\n \"frunk_core\",\n \"frunk_proc_macro_helpers\",\n \"proc-macro-hack\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"fsevent-sys\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76ee7a02da4d231650c7cea31349b889be2f45ddb3ef3032d2ec8185f6313fd2\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23342abe12aba583913b2e62f22225ff9c950774065e4bfb61a19cd9770fec40\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"955518d47e09b25bbebc7a18df10b81f0c766eaf4c4f1cccef2fca5f2a4fb5f2\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bca583b7e26f571124fe5b7561d49cb2868d79116cfa0eefce955557c6fee8c\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccecee823288125bd88b4d7f565c9e58e41858e47ab72e8ea2d64e93624386e0\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-intrusive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d930c203dd0b6ff06e0201a4a2fe9149b43c684fd4420555b26d21b1a02956f\"\ndependencies = [\n \"futures-core\",\n \"lock_api\",\n \"parking_lot\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fff74096e71ed47f8e023204cfd0aa1289cd54ae5430a9523be060cdb849964\"\n\n[[package]]\nname = \"futures-lite\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49a9d51ce47660b1e808d3c990b4709f2f415d928835a17dfd16991515c46bce\"\ndependencies = [\n \"fastrand\",\n \"futures-core\",\n \"futures-io\",\n \"memchr\",\n \"parking\",\n \"pin-project-lite\",\n \"waker-fn\",\n]\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89ca545a94061b6365f2c7355b4b32bd20df3ff95f02da9329b34ccc3bd6ee72\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f43be4fe21a13b9781a69afa4985b0f6ee0e1afab2c6f454a8cf30e2b2237b6e\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76d3d132be6c0e6aa1534069c705a74a5997a356c0dc2f86a47765e5617c5b65\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b01e40b772d54cf6c6d721c1d1abd0647a0106a12ecaa1c186273392a69533\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.9.0+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c85e1d9ab2eadba7e5040d4e09cbd6d072b76a557ad64e797c2cb9d4da21d7e4\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"libc\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"ghash\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d930750de5717d2dd0b8c0d42c076c0e884c81a73e6cab859bbd2339c71e3e40\"\ndependencies = [\n \"opaque-debug\",\n \"polyval\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.27.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad0a93d233ebf96623465aad4046a8d3aa4da22d4f4beba5388838c8a434bbb4\"\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"gloo-timers\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b995a66bb87bebce9a0f4a95aed01daca4872c050bfcb21653361c03bc35e5c\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"h2\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"17f8a914c2987b688368b5138aa05321db91f4090cf26118185672ad588bce21\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"futures-core\",\n \"futures-sink\",\n \"futures-util\",\n \"http\",\n \"indexmap 1.9.3\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\ndependencies = [\n \"ahash 0.7.6\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e\"\ndependencies = [\n \"ahash 0.8.3\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c6201b9ff9fd90a5a3bac2e56a830d0caa509576f0e503818ee82c181b3437a\"\n\n[[package]]\nname = \"hashlink\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69fe1fcf8b4278d860ad0548329f892a3631fb63f82574df68275f34cdbe0ffa\"\ndependencies = [\n \"hashbrown 0.12.3\",\n]\n\n[[package]]\nname = \"hdrhistogram\"\nversion = \"7.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f19b9f54f7c7f55e31401bb647626ce0cf0f67b0004982ce815b3ee72a02aa8\"\ndependencies = [\n \"base64 0.13.1\",\n \"byteorder\",\n \"flate2\",\n \"nom\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"headers\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3e372db8e5c0d213e0cd0b9be18be2aca3d44cf2fe30a9d46a65581cd454584\"\ndependencies = [\n \"base64 0.13.1\",\n \"bitflags 1.3.2\",\n \"bytes\",\n \"headers-core\",\n \"http\",\n \"httpdate\",\n \"mime\",\n \"sha1\",\n]\n\n[[package]]\nname = \"headers-core\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7f66481bfee273957b1f20485a4ff3362987f85b2c236580d81b4eb7a326429\"\ndependencies = [\n \"http\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"hex-literal\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fe2267d4ed49bc07b63801559be28c718ea06c4738b7a03c94df7386d2cde46\"\n\n[[package]]\nname = \"hkdf\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"791a029f6b9fc27657f6f188ec6e5e43f6911f6f878e0dc5501396e09809d437\"\ndependencies = [\n \"hmac\",\n]\n\n[[package]]\nname = \"hmac\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5444c27eef6923071f7ebcc33e3444508466a76f7a2b93da00ed6e19f30c1ddb\"\ndependencies = [\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd6effc99afb63425aff9b05836f029929e345a6148a14b7ecd5ab67af944482\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5f38f16d184e36f2408a55281cd658ecbd3ca05cce6d6510a176eca393e26d1\"\ndependencies = [\n \"bytes\",\n \"http\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"humantime-serde\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57a3db5ea5923d99402c94e9feb261dc5ee9b4efa158b0315f788cf549cc200c\"\ndependencies = [\n \"humantime\",\n \"serde\",\n]\n\n[[package]]\nname = \"hwaddr\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e414433a9e4338f4e87fa29d0670c883a5e73e7955c45f4a49130c0aa992c85b\"\ndependencies = [\n \"phf\",\n]\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab302d72a6f11a3b910431ff93aae7e773078c769f0a3ef15fb9ec692ed147d4\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n \"want\",\n]\n\n[[package]]\nname = \"hyper-rustls\"\nversion = \"0.23.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1788965e61b367cd03a62950836d5cd41560c3577d90e40e0819373194d1661c\"\ndependencies = [\n \"http\",\n \"hyper\",\n \"rustls\",\n \"tokio\",\n \"tokio-rustls\",\n]\n\n[[package]]\nname = \"hyper-timeout\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbb958482e8c7be4bc3cf272a766a2b0bf1a6755e7a6ae777f017a31d11b13b1\"\ndependencies = [\n \"hyper\",\n \"pin-project-lite\",\n \"tokio\",\n \"tokio-io-timeout\",\n]\n\n[[package]]\nname = \"hyper-tls\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6183ddfa99b85da61a140bea0efc93fdf56ceaa041b37d553518030827f9905\"\ndependencies = [\n \"bytes\",\n \"hyper\",\n \"native-tls\",\n \"tokio\",\n \"tokio-native-tls\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0722cd7114b7de04316e7ea5456a0bbb20e4adb46fd27a3697adb812cff0f37c\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0703ae284fc167426161c2e3f1da3ea71d94b21bedbcc9494e92b28e334e3dca\"\ndependencies = [\n \"cxx\",\n \"cxx-build\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"idna\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e14ddfc70884202db2244c223200c204c2bda1bc6e0998d11b5e024d657209e6\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.12.3\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5477fe2230a79769d8dc68e0eabf5437907c0457a5614a9e8dddb67f65eb65d\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.14.0\",\n]\n\n[[package]]\nname = \"inherent\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce243b1bfa62ffc028f1cc3b6034ec63d649f3031bc8a4fbbb004e1ac17d1f68\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"inotify\"\nversion = \"0.9.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8069d3ec154eb856955c1c0fbffefbf5f3c40a104ec912d4797314c1801abff\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"inotify-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"inotify-sys\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e05c02b5e89bff3b946cedeca278abc628fe811e604f027c45a8aa3cf793d0eb\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"inout\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5\"\ndependencies = [\n \"block-padding\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c66c74d2ae7e79a5a8f7ac924adbe38ee42a859c6539ad869eb51f0b52dc220\"\ndependencies = [\n \"hermit-abi 0.3.1\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12b6ee2129af8d4fb011108c73d99a1b83a85977f23b82460c0ae2e25bb4b57f\"\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adcf93614601c8129ddf72e2d5633df827ba6551541c6d8c59520a371475be1f\"\ndependencies = [\n \"hermit-abi 0.3.1\",\n \"io-lifetimes\",\n \"rustix\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445dde2150c55e483f3d8416706b97ec8e8237c307e5b7b4b8dd15e6af2a0730\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"jsonwebtoken\"\nversion = \"8.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6971da4d9c3aa03c3d8f3ff0f4155b534aad021292003895a469716b2a230378\"\ndependencies = [\n \"base64 0.21.0\",\n \"pem\",\n \"ring\",\n \"serde\",\n \"serde_json\",\n \"simple_asn1\",\n]\n\n[[package]]\nname = \"kqueue\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c8fc60ba15bf51257aa9807a48a61013db043fcf3a78cb0d916e8e396dcad98\"\ndependencies = [\n \"kqueue-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"kqueue-sys\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8367585489f01bc55dd27404dcf56b95e6da061a256a666ab23be9ba96a2e587\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"libc\",\n]\n\n[[package]]\nname = \"kv-log-macro\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0de8b303297635ad57c9f5059fd9cee7a47f8e8daa09df0fcd07dd39fb22977f\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\ndependencies = [\n \"spin 0.5.2\",\n]\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"lexical\"\nversion = \"6.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7aefb36fd43fef7003334742cbf77b243fcd36418a1d1bdd480d613a67968f6\"\ndependencies = [\n \"lexical-core\",\n]\n\n[[package]]\nname = \"lexical-core\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2cde5de06e8d4c2faabc400238f9ae1c74d5412d03a7bd067645ccbc47070e46\"\ndependencies = [\n \"lexical-parse-float\",\n \"lexical-parse-integer\",\n \"lexical-util\",\n \"lexical-write-float\",\n \"lexical-write-integer\",\n]\n\n[[package]]\nname = \"lexical-parse-float\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"683b3a5ebd0130b8fb52ba0bdc718cc56815b6a097e28ae5a6997d0ad17dc05f\"\ndependencies = [\n \"lexical-parse-integer\",\n \"lexical-util\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"lexical-parse-integer\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d0994485ed0c312f6d965766754ea177d07f9c00c9b82a5ee62ed5b47945ee9\"\ndependencies = [\n \"lexical-util\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"lexical-util\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5255b9ff16ff898710eb9eb63cb39248ea8a5bb036bea8085b1a767ff6c4e3fc\"\ndependencies = [\n \"static_assertions\",\n]\n\n[[package]]\nname = \"lexical-write-float\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accabaa1c4581f05a3923d1b4cfd124c329352288b7b9da09e766b0668116862\"\ndependencies = [\n \"lexical-util\",\n \"lexical-write-integer\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"lexical-write-integer\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1b6f3d1f4422866b68192d62f77bc5c700bee84f3069f2469d7bc8c77852446\"\ndependencies = [\n \"lexical-util\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.141\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3304a64d199bb964be99741b7a14d26972741915b3649639149b2479bb46f4b5\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f\"\ndependencies = [\n \"cfg-if\",\n \"winapi\",\n]\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"348108ab3fba42ec82ff6e9564fc4ca0247bdccdc68dd8af9764bbc79c3c8ffb\"\n\n[[package]]\nname = \"libsqlite3-sys\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afc22eff61b133b115c6e8c74e818c628d6d5e7a502afea6f64dee076dd94326\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"libz-sys\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9702761c3935f8cc2f101793272e202c72b99da8f4224a19ddcf1279a6450bbf\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"link-cplusplus\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecd207c9c713c34f95a097a5b029ac2ce6010530c7b49d7fea24d977dede04f5\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f508063cc7bb32987c71511216bd5a32be15bccb6a80b52df8b9d7f01fc3aa2\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e\"\ndependencies = [\n \"cfg-if\",\n \"value-bag\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata\",\n]\n\n[[package]]\nname = \"matchit\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b87248edafb776e59e6ee64a79086f65890d3510f2c656c000bf2a7e8a0aea40\"\n\n[[package]]\nname = \"md-5\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6365506850d44bff6e2fbcb5176cf63650e48bd45ef2fe2665ae1570e0f4b9ca\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"md5\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"490cc448043f947bae3cbee9c203358d62dbee0db12107a74be5c30ccfd09771\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\"\n\n[[package]]\nname = \"mime_guess\"\nversion = \"2.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4192263c238a5f0d0c6bfd21f336a313a4ce1c450542449ca191bb657b4642ef\"\ndependencies = [\n \"mime\",\n \"unicase\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b9d9a46eff5b4ff64b45a9e316a6d1e0bc719ef429cbec4dc630684212bfdf9\"\ndependencies = [\n \"libc\",\n \"log\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"multer\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01acbdc23469fd8fe07ab135923371d5f5a422fbf9c522158677c8eb15bc51c2\"\ndependencies = [\n \"bytes\",\n \"encoding_rs\",\n \"futures-util\",\n \"http\",\n \"httparse\",\n \"log\",\n \"memchr\",\n \"mime\",\n \"spin 0.9.8\",\n \"tokio\",\n \"version_check\",\n]\n\n[[package]]\nname = \"mysql_common\"\nversion = \"0.29.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9006c95034ccf7b903d955f210469119f6c3477fc9c9e7a7845ce38a3e665c2a\"\ndependencies = [\n \"base64 0.13.1\",\n \"bigdecimal\",\n \"bindgen\",\n \"bitflags 1.3.2\",\n \"bitvec\",\n \"byteorder\",\n \"bytes\",\n \"cc\",\n \"cmake\",\n \"crc32fast\",\n \"flate2\",\n \"frunk\",\n \"lazy_static\",\n \"lexical\",\n \"num-bigint\",\n \"num-traits\",\n \"rand 0.8.5\",\n \"regex\",\n \"rust_decimal\",\n \"saturating\",\n \"serde\",\n \"serde_json\",\n \"sha1\",\n \"sha2\",\n \"smallvec\",\n \"subprocess\",\n \"thiserror\",\n \"time\",\n \"uuid\",\n]\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07226173c32f2926027b63cce4bcd8076c3552846cbe7925f3aaffeac0a3b92e\"\ndependencies = [\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"openssl\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"security-framework\",\n \"security-framework-sys\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"notify\"\nversion = \"5.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58ea850aa68a06e48fdb069c0ec44d0d64c8dbffa49bf3b6f7f0a901fdea1ba9\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"crossbeam-channel\",\n \"filetime\",\n \"fsevent-sys\",\n \"inotify\",\n \"kqueue\",\n \"libc\",\n \"mio\",\n \"walkdir\",\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f93ab6289c7b344a8a9f60f88d80aa20032336fe78da341afc91c8a2341fc75f\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n \"rand 0.8.5\",\n]\n\n[[package]]\nname = \"num-bigint-dig\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2399c9463abc5f909349d8aa9ba080e0b88b3ce2885389b60b993f39b1a56905\"\ndependencies = [\n \"byteorder\",\n \"lazy_static\",\n \"libm\",\n \"num-integer\",\n \"num-iter\",\n \"num-traits\",\n \"rand 0.8.5\",\n \"smallvec\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.45\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9\"\ndependencies = [\n \"autocfg\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-iter\"\nversion = \"0.1.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d03e6c028c5dc5cac6e2dec0efda81fc887605bb3d884578bb6d6bf7514e252\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fac9e2da13b5eb447a6ce3d392f23a29d8694bff781bf03a16cd9ac8697593b\"\ndependencies = [\n \"hermit-abi 0.2.6\",\n \"libc\",\n]\n\n[[package]]\nname = \"num_threads\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2819ce041d2ee131036f4fc9d6ae7ae125a3a40e97ba64d04fe799ad9dabbb44\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"oauth2\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eeaf26a72311c087f8c5ba617c96fac67a5c04f430e716ac8d8ab2de62e23368\"\ndependencies = [\n \"base64 0.13.1\",\n \"chrono\",\n \"getrandom 0.2.9\",\n \"http\",\n \"rand 0.8.5\",\n \"reqwest\",\n \"serde\",\n \"serde_json\",\n \"serde_path_to_error\",\n \"sha2\",\n \"thiserror\",\n \"url\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.30.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea86265d3d3dcb6a27fc51bd29a4bf387fae9d2986b823079d4986af253eb439\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.17.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3\"\n\n[[package]]\nname = \"opaque-debug\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5\"\n\n[[package]]\nname = \"openidconnect\"\nversion = \"2.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98dd5b7049bac4fdd2233b8c9767d42c05da8006fdb79cc903258556d2b18009\"\ndependencies = [\n \"base64 0.13.1\",\n \"chrono\",\n \"http\",\n \"itertools\",\n \"log\",\n \"num-bigint\",\n \"oauth2\",\n \"rand 0.8.5\",\n \"ring\",\n \"serde\",\n \"serde-value\",\n \"serde_derive\",\n \"serde_json\",\n \"serde_path_to_error\",\n \"serde_plain\",\n \"serde_with\",\n \"subtle\",\n \"thiserror\",\n \"url\",\n]\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.50\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e30d8bc91859781f0a943411186324d580f2bbeb71b452fe91ae344806af3f1\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-macros\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-src\"\nversion = \"111.25.2+1.1.1t\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"320708a054ad9b3bf314688b5db87cf4d6683d64cfc835e2337924ae62bf4431\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d3d193fb1488ad46ffe3aaabc912cc931d02ee8518fe2959aea8ef52718b0c0\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"openssl-src\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"option-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n\n[[package]]\nname = \"ordered-float\"\nversion = \"2.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7940cf2ca942593318d07fcf2596cdca60a85c9e7fab408a5e21a4f9dcd40d87\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"ordered-float\"\nversion = \"3.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2fc2dbde8f8a79f2102cc474ceb0ad68e3b80b85289ea62389b60e66777e4213\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"os_str_bytes\"\nversion = \"6.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ceedf44fb00f2d1984b0bc98102627ce622e083e49a5bacdb3e514fa4238e267\"\n\n[[package]]\nname = \"ouroboros\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2ba07320d39dfea882faa70554b4bd342a5f273ed59ba7c1c6b4c840492c954\"\ndependencies = [\n \"aliasable\",\n \"ouroboros_macro\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ouroboros_macro\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec4c6225c69b4ca778c0aea097321a64c421cf4577b331c61b229267edabb6f8\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"packet\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c136c7ad0619ed4f88894aecf66ad86c80683e7b5d707996e6a3a7e0e3916944\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"byteorder\",\n \"hwaddr\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"parking\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14f2252c834a40ed9bb5422029649578e63aa341ac401f74e719dd1afda8394e\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9069cbb9f99e3a5083476ccb29ceb1de18b9118cafa53e90c9551235de2b9521\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall 0.2.16\",\n \"smallvec\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"password-hash\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77e0b28ace46c5a396546bcf443bf422b57049617433d8854227352a4a9b24e7\"\ndependencies = [\n \"base64ct\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"password-hash\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7676374caaee8a325c9e7a2ae557f216c5563a171d6997b0ef8a65af35147700\"\ndependencies = [\n \"base64ct\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f746c4065a8fa3fe23974dd82f15431cc8d40779821001404d10d2e79ca7d79\"\n\n[[package]]\nname = \"pathdiff\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8835116a5c179084a830efb3adc117ab007512b535bc1a21c991d3b32a6b44dd\"\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83a0692ec44e4cf1ef28ca317f14f8f07da2d95ec3fa01f86e4467b725e60917\"\ndependencies = [\n \"digest\",\n \"hmac\",\n \"password-hash 0.4.2\",\n \"sha2\",\n]\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8ed6a7761f76e3b9f92dfb0a60a6a6477c61024b775147ff0973a02653abaf2\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"peeking_take_while\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099\"\n\n[[package]]\nname = \"pem\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8835c273a76a90455d7344889b0964598e3316e2a79ede8e36f16bdcf2228b8\"\ndependencies = [\n \"base64 0.13.1\",\n]\n\n[[package]]\nname = \"pem-rfc7468\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b39c9bfcfc231068454382784bb460aae594343fb030d46e9f50a645418412\"\ndependencies = [\n \"base64ct\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"478c572c3d73181ff3c2539045f6eb99e5491218eae919370993b890cdbdd98e\"\n\n[[package]]\nname = \"phf\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3dfb61232e34fcb633f43d12c58f83c1df82962dcdfa565a4e866ffc17dafe12\"\ndependencies = [\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_shared\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c00cf8b9eafe68dde5e9eaa2cef8ee84a9336a47d566ec55ca16589633b65af7\"\ndependencies = [\n \"siphasher\",\n]\n\n[[package]]\nname = \"pin-project\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad29a609b6bcd67fee905812e544992d216af9d755757c05ed2d0e15a74c6ecc\"\ndependencies = [\n \"pin-project-internal\",\n]\n\n[[package]]\nname = \"pin-project-internal\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"069bdb1e05adc7a8990dce9cc75370895fbe4e3d58b9b73bf1aee56359344a55\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkcs1\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8ffb9f10fa047879315e6625af03c164b16962a5368d724ed16323b68ace47f\"\ndependencies = [\n \"der\",\n \"pkcs8\",\n \"spki\",\n]\n\n[[package]]\nname = \"pkcs8\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f950b2377845cebe5cf8b5165cb3cc1a5e0fa5cfa3e1f7f55707d8fd82e0a7b7\"\ndependencies = [\n \"der\",\n \"spki\",\n]\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ac9a59f73473f1b8d852421e59e64809f025994837ef743615c6d0c5b305160\"\n\n[[package]]\nname = \"platforms\"\nversion = \"3.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d7ddaed09e0eb771a79ab0fd64609ba0afb0a8366421957936ad14cbd13630\"\n\n[[package]]\nname = \"poem\"\nversion = \"1.3.55\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0608069d4999c3c02d49dff261663f2e73a8f7b00b7cd364fb5e93e419dafa1\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"base64 0.21.0\",\n \"bytes\",\n \"chrono\",\n \"cookie\",\n \"futures-util\",\n \"headers\",\n \"hex\",\n \"http\",\n \"httpdate\",\n \"hyper\",\n \"mime\",\n \"mime_guess\",\n \"multer\",\n \"parking_lot\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"poem-derive\",\n \"priority-queue\",\n \"quick-xml\",\n \"rand 0.8.5\",\n \"regex\",\n \"rfc7239\",\n \"rust-embed\",\n \"rustls-pemfile\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"serde_yaml 0.9.21\",\n \"smallvec\",\n \"tempfile\",\n \"thiserror\",\n \"time\",\n \"tokio\",\n \"tokio-rustls\",\n \"tokio-stream\",\n \"tokio-tungstenite 0.18.0\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"poem-derive\"\nversion = \"1.3.55\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b839bad877aa933dd00901abd127a44496130e3def48e079d60e43f2c8a33cc\"\ndependencies = [\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"poem-openapi\"\nversion = \"2.0.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1077defedfd8ff15990bb42993970ac75bc46dd8a5b3c0b452ab4e2041b825a4\"\ndependencies = [\n \"base64 0.21.0\",\n \"bytes\",\n \"chrono\",\n \"derive_more\",\n \"futures-util\",\n \"mime\",\n \"num-traits\",\n \"poem\",\n \"poem-openapi-derive\",\n \"quick-xml\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"serde_yaml 0.9.21\",\n \"thiserror\",\n \"tokio\",\n \"uuid\",\n]\n\n[[package]]\nname = \"poem-openapi-derive\"\nversion = \"2.0.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75bf9dc3b9c42bb8744bc633f9581f740b429122e1840fa37c06beeefc35a719\"\ndependencies = [\n \"darling 0.14.4\",\n \"http\",\n \"indexmap 1.9.3\",\n \"mime\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"syn 1.0.109\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"polling\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be1c66a6add46bff50935c313dae30a5030cf8385c5206e8a95e9e9def974aa\"\ndependencies = [\n \"autocfg\",\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"concurrent-queue\",\n \"libc\",\n \"log\",\n \"pin-project-lite\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"poly1305\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8159bd90725d2df49889a078b54f4f79e87f1f8a8444194cdca81d38f5393abf\"\ndependencies = [\n \"cpufeatures\",\n \"opaque-debug\",\n \"universal-hash\",\n]\n\n[[package]]\nname = \"polyval\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ef234e08c11dfcb2e56f79fd70f6f2eb7f025c0ce2333e82f4f0518ecad30c6\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"opaque-debug\",\n \"universal-hash\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"priority-queue\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ca9c6be70d989d21a136eb86c2d83e4b328447fac4a88dace2143c179c86267\"\ndependencies = [\n \"autocfg\",\n \"indexmap 1.9.3\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785\"\ndependencies = [\n \"toml\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-hack\"\nversion = \"0.5.20+deprecated\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc375e1527247fe1a97d8b7156678dfe7c1af2fc075c9a4db3690ecd2a148068\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.66\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18fb31db3f9bddb2ea821cde30a9f70117e3f119938b5ee630b7403aa6e2ead9\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"prost\"\nversion = \"0.11.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b82eaa1d779e9a4bc1c3217db8ffbeabaae1dca241bf70183242128d48681cd\"\ndependencies = [\n \"bytes\",\n \"prost-derive\",\n]\n\n[[package]]\nname = \"prost-derive\"\nversion = \"0.11.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d2d8d10f3c6ded6da8b05b5fb3b8a5082514344d56c9f871412d29b4e075b4\"\ndependencies = [\n \"anyhow\",\n \"itertools\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"prost-types\"\nversion = \"0.11.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"213622a1460818959ac1181aaeb2dc9c7f63df720db7d788b3e24eacd1983e13\"\ndependencies = [\n \"prost\",\n]\n\n[[package]]\nname = \"ptr_meta\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0738ccf7ea06b608c10564b31debd4f5bc5e197fc8bfe088f68ae5ce81e7a4f1\"\ndependencies = [\n \"ptr_meta_derive\",\n]\n\n[[package]]\nname = \"ptr_meta_derive\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b845dbfca988fa33db069c0e230574d15a3088f147a87b64c7589eb662c9ac\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"quick-xml\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f50b1c63b38611e7d4d7f68b82d3ad0cc71a2ad2e7f61fc10f1328d917c93cd\"\ndependencies = [\n \"memchr\",\n \"serde\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50f3b39ccfb720540debaa0164757101c08ecb8d326b15358ce76a62c7e85965\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\ndependencies = [\n \"getrandom 0.1.16\",\n \"libc\",\n \"rand_chacha 0.2.2\",\n \"rand_core 0.5.1\",\n \"rand_hc\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\ndependencies = [\n \"getrandom 0.1.16\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom 0.2.9\",\n]\n\n[[package]]\nname = \"rand_hc\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\ndependencies = [\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rcgen\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ffbe84efe2f38dea12e9bfc1f65377fdf03e53a18cb3b995faedf7934c7e785b\"\ndependencies = [\n \"pem\",\n \"ring\",\n \"time\",\n \"yasna\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b\"\ndependencies = [\n \"getrandom 0.2.9\",\n \"redox_syscall 0.2.16\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b1f693b24f6ac912f4893ef08244d70b6067480d2f1a46e950c9691e6749d1d\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"rend\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"581008d2099240d37fb08d77ad713bcaec2c4d89d50b5b21a8bb1996bbab68ab\"\ndependencies = [\n \"bytecheck\",\n]\n\n[[package]]\nname = \"reqwest\"\nversion = \"0.11.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"27b71749df584b7f4cac2c426c127a7c785a5106cc98f7a8feb044115f0fa254\"\ndependencies = [\n \"base64 0.21.0\",\n \"bytes\",\n \"encoding_rs\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"hyper-rustls\",\n \"hyper-tls\",\n \"ipnet\",\n \"js-sys\",\n \"log\",\n \"mime\",\n \"native-tls\",\n \"once_cell\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"rustls\",\n \"rustls-native-certs\",\n \"rustls-pemfile\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"tokio\",\n \"tokio-native-tls\",\n \"tokio-rustls\",\n \"tokio-util\",\n \"tower-service\",\n \"url\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"wasm-streams\",\n \"web-sys\",\n \"webpki-roots\",\n \"winreg\",\n]\n\n[[package]]\nname = \"rfc7239\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"087317b3cf7eb481f13bd9025d729324b7cd068d6f470e2d76d049e191f5ba47\"\ndependencies = [\n \"uncased\",\n]\n\n[[package]]\nname = \"ring\"\nversion = \"0.16.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"once_cell\",\n \"spin 0.5.2\",\n \"untrusted\",\n \"web-sys\",\n \"winapi\",\n]\n\n[[package]]\nname = \"rkyv\"\nversion = \"0.7.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21499ed91807f07ae081880aabb2ccc0235e9d88011867d984525e9a4c3cfa3e\"\ndependencies = [\n \"bytecheck\",\n \"hashbrown 0.12.3\",\n \"ptr_meta\",\n \"rend\",\n \"rkyv_derive\",\n \"seahash\",\n]\n\n[[package]]\nname = \"rkyv_derive\"\nversion = \"0.7.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac1c672430eb41556291981f45ca900a0239ad007242d1cb4b4167af842db666\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"rsa\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ab43bb47d23c1a631b4b680199a45255dce26fa9ab2fa902581f624ff13e6a8\"\ndependencies = [\n \"byteorder\",\n \"const-oid\",\n \"digest\",\n \"num-bigint-dig\",\n \"num-integer\",\n \"num-iter\",\n \"num-traits\",\n \"pkcs1\",\n \"pkcs8\",\n \"rand_core 0.6.4\",\n \"signature\",\n \"spki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"russh\"\nversion = \"0.38.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae0efcc0f4cd6c062c07e572ce4b806e3967fa029fcbfcc0aa98fb5910a37925\"\ndependencies = [\n \"aes\",\n \"aes-gcm\",\n \"async-trait\",\n \"bitflags 2.3.3\",\n \"byteorder\",\n \"chacha20\",\n \"ctr\",\n \"curve25519-dalek\",\n \"digest\",\n \"flate2\",\n \"futures\",\n \"generic-array\",\n \"hex-literal\",\n \"hmac\",\n \"log\",\n \"num-bigint\",\n \"once_cell\",\n \"openssl\",\n \"poly1305\",\n \"rand 0.8.5\",\n \"russh-cryptovec\",\n \"russh-keys\",\n \"sha1\",\n \"sha2\",\n \"subtle\",\n \"thiserror\",\n \"tokio\",\n \"tokio-util\",\n]\n\n[[package]]\nname = \"russh-cryptovec\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3fdf036c2216b554053d19d4af45c1722d13b00ac494ea19825daf4beac034e\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"russh-keys\"\nversion = \"0.38.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"557ab9190022dff78116ebed5e391abbd3f424b06cd643dfe262346ab91ed8c9\"\ndependencies = [\n \"aes\",\n \"async-trait\",\n \"bcrypt-pbkdf\",\n \"bit-vec\",\n \"block-padding\",\n \"byteorder\",\n \"cbc\",\n \"ctr\",\n \"data-encoding\",\n \"dirs\",\n \"ed25519-dalek\",\n \"futures\",\n \"hmac\",\n \"inout\",\n \"log\",\n \"md5\",\n \"num-bigint\",\n \"num-integer\",\n \"openssl\",\n \"pbkdf2 0.11.0\",\n \"rand 0.7.3\",\n \"rand_core 0.6.4\",\n \"russh-cryptovec\",\n \"serde\",\n \"sha2\",\n \"thiserror\",\n \"tokio\",\n \"tokio-stream\",\n \"yasna\",\n]\n\n[[package]]\nname = \"rust-embed\"\nversion = \"6.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b68543d5527e158213414a92832d2aab11a84d2571a5eb021ebe22c43aab066\"\ndependencies = [\n \"rust-embed-impl\",\n \"rust-embed-utils\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust-embed-impl\"\nversion = \"6.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d4e0f0ced47ded9a68374ac145edd65a6c1fa13a96447b873660b2a568a0fd7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"rust-embed-utils\",\n \"syn 1.0.109\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust-embed-utils\"\nversion = \"7.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512b0ab6853f7e14e3c8754acb43d6f748bb9ced66aa5915a6553ac8213f7731\"\ndependencies = [\n \"sha2\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust_decimal\"\nversion = \"1.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26bd36b60561ee1fb5ec2817f198b6fd09fa571c897a5e86d1487cfc2b096dfc\"\ndependencies = [\n \"arrayvec\",\n \"borsh\",\n \"bytecheck\",\n \"byteorder\",\n \"bytes\",\n \"num-traits\",\n \"rand 0.8.5\",\n \"rkyv\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.37.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"722529a737f5a942fdbac3a46cee213053196737c5eaa3386d52e85b786f2659\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"errno\",\n \"io-lifetimes\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fff78fc74d175294f4e83b28343315ffcfb114b156f0185e9741cb5570f50e2f\"\ndependencies = [\n \"log\",\n \"ring\",\n \"sct\",\n \"webpki\",\n]\n\n[[package]]\nname = \"rustls-native-certs\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0167bac7a9f490495f3c33013e7722b53cb087ecbe082fb0c6387c96f634ea50\"\ndependencies = [\n \"openssl-probe\",\n \"rustls-pemfile\",\n \"schannel\",\n \"security-framework\",\n]\n\n[[package]]\nname = \"rustls-pemfile\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d194b56d58803a43635bdc398cd17e383d6f71f9182b9a192c127ca42494a59b\"\ndependencies = [\n \"base64 0.21.0\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f3208ce4d8448b3f3e7d168a73f5e0c43a61e32930de3bceeccedb388b6bf06\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"saturating\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ece8e78b2f38ec51c51f5d475df0a7187ba5111b2a28bdc761ee05b075d40a71\"\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"713cfb06c7059f3588fb8044c0fad1d09e3c01d225e25b9220dbfdcf16dbb1b3\"\ndependencies = [\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"scratch\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1792db035ce95be60c3f8853017b3999209281c24e2ba5bc8e59bf97a0c590c1\"\n\n[[package]]\nname = \"sct\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d53dcdb7c9f8158937a7981b48accfd39a43af418591a5d008c7b22b5e1b7ca4\"\ndependencies = [\n \"ring\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"sd-notify\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"621e3680f3e07db4c9c2c3fb07c6223ab2fab2e54bd3c04c3ae037990f428c32\"\n\n[[package]]\nname = \"sea-bae\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3bd3534a9978d0aa7edd2808dc1f8f31c4d0ecd31ddf71d997b3c98e9f3c9114\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"sea-orm\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61f6c7daef05dde3476d97001e11fca7a52b655aa3bf4fd610ab2da1176a2ed5\"\ndependencies = [\n \"async-stream\",\n \"async-trait\",\n \"chrono\",\n \"futures\",\n \"log\",\n \"ouroboros\",\n \"sea-orm-macros\",\n \"sea-query\",\n \"sea-query-binder\",\n \"serde\",\n \"serde_json\",\n \"sqlx\",\n \"strum\",\n \"thiserror\",\n \"time\",\n \"tracing\",\n \"url\",\n \"uuid\",\n]\n\n[[package]]\nname = \"sea-orm-cli\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e3f0ff2fa5672e2e7314d107c6498a18e469beeb340a0ed84e3075fce73c2cd\"\ndependencies = [\n \"chrono\",\n \"clap 4.3.21\",\n \"dotenvy\",\n \"glob\",\n \"regex\",\n \"sea-schema\",\n \"tracing\",\n \"tracing-subscriber\",\n \"url\",\n]\n\n[[package]]\nname = \"sea-orm-macros\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd90e73d5f5b184bad525767da29fbfec132b4e62ebd6f60d2f2737ec6468f62\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"sea-bae\",\n \"syn 2.0.28\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sea-orm-migration\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21f673fcefb3a7e7b89a12b6c0e854ec0be14367635ac3435369c8ad7f11e09e\"\ndependencies = [\n \"async-trait\",\n \"clap 4.3.21\",\n \"dotenvy\",\n \"futures\",\n \"sea-orm\",\n \"sea-orm-cli\",\n \"sea-schema\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"sea-query\"\nversion = \"0.30.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6aeb899964df7038e7274306b742951b82a04f835bca8a4683a4c254a6bf35fa\"\ndependencies = [\n \"chrono\",\n \"derivative\",\n \"inherent\",\n \"ordered-float 3.7.0\",\n \"sea-query-derive\",\n \"serde_json\",\n \"uuid\",\n]\n\n[[package]]\nname = \"sea-query-binder\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36bbb68df92e820e4d5aeb17b4acd5cc8b5d18b2c36a4dd6f4626aabfa7ab1b9\"\ndependencies = [\n \"chrono\",\n \"sea-query\",\n \"serde_json\",\n \"sqlx\",\n \"uuid\",\n]\n\n[[package]]\nname = \"sea-query-derive\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd78f2e0ee8e537e9195d1049b752e0433e2cac125426bccb7b5c3e508096117\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"sea-schema\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3e09eb40c78cee8fef8dfbb648036a26b7ad1f618499203ad0e8b6f97593f7f\"\ndependencies = [\n \"futures\",\n \"sea-query\",\n \"sea-schema-derive\",\n]\n\n[[package]]\nname = \"sea-schema-derive\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c6f686050f76bffc4f635cda8aea6df5548666b830b52387e8bc7de11056d11e\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"seahash\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c107b6f4780854c8b126e228ea8869f4d7b71260f962fefb57b996b8959ba6b\"\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a332be01508d814fed64bf28f798a146d73792121129962fdf335bb3c49a4254\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31c9bb296072e961fcbd8853511dd39c2d8be2deb1e17c6860b1d30732b323b4\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.160\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb2f3770c8bce3bcda7e149193a069a0f4365bda1fa5cd88e03bca26afc1216c\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde-value\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3a1a3341211875ef120e117ea7fd5228530ae7e7036a779fdc9117be6b3282c\"\ndependencies = [\n \"ordered-float 2.10.0\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.160\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"291a097c63d8497e00160b166a967a4a79c64f3facdd01cbd7502231688d77df\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.96\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"057d394a50403bcac12672b2b18fb387ab6d289d957dab67dd201875391e52f1\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_path_to_error\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7f05c1d5476066defcdfacce1f52fc3cae3af1d3089727100c02ae92e5abbe0\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_plain\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6018081315db179d0ce57b1fe4b62a12a0028c9cf9bbef868c9cf477b3c34ae\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_urlencoded\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd\"\ndependencies = [\n \"form_urlencoded\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_with\"\nversion = \"1.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"678b5a069e50bf00ecd22d0cd8ddf7c236f68581b03db652061ed5eb13a312ff\"\ndependencies = [\n \"serde\",\n \"serde_with_macros\",\n]\n\n[[package]]\nname = \"serde_with_macros\"\nversion = \"1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e182d6ec6f05393cc0e5ed1bf81ad6db3a8feedf8ee515ecdd369809bcce8082\"\ndependencies = [\n \"darling 0.13.4\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"serde_yaml\"\nversion = \"0.8.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578a7433b776b56a35785ed5ce9a7e777ac0598aac5a6dd1b4b18a307c7fc71b\"\ndependencies = [\n \"indexmap 1.9.3\",\n \"ryu\",\n \"serde\",\n \"yaml-rust\",\n]\n\n[[package]]\nname = \"serde_yaml\"\nversion = \"0.9.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9d684e3ec7de3bf5466b32bd75303ac16f0736426e5a4e0d6e489559ce1249c\"\ndependencies = [\n \"indexmap 1.9.3\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n \"unsafe-libyaml\",\n]\n\n[[package]]\nname = \"sha-1\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5058ada175748e33390e40e872bd0fe59a19f265d0158daa551c5a88a76009c\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha1\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f04293dc80c3993519f2d7f6f511707ee7094fe0c6d3406feb330cdb3540eba3\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82e6b795fe2e3b1e845bafcb27aa35405c4d47cdfc92af5fc8d3002f76cebdc0\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shell-words\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24188a676b6ae68c3b2cb3a01be17fbf7240ce009799bb56d5b1409051e78fde\"\n\n[[package]]\nname = \"shlex\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43b2853a4d09f215c24cc5489c992ce46052d359b5109343cbafbf26bc62f8a3\"\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"signature\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e1788eed21689f9cf370582dfc467ef36ed9c707f073528ddafa8d83e3b8500\"\ndependencies = [\n \"digest\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"simdutf8\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f27f6278552951f1f2b8cf9da965d10969b2efdea95a6ec47987ab46edfe263a\"\n\n[[package]]\nname = \"simple_asn1\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adc4e5204eb1910f40f9cfa375f6f05b68c3abac4b6fd879c8ff5e7ae8a0a085\"\ndependencies = [\n \"num-bigint\",\n \"num-traits\",\n \"thiserror\",\n \"time\",\n]\n\n[[package]]\nname = \"siphasher\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7bd3e3206899af3f8b12af284fafc038cc1dc2b41d1b89dd17297221c5d225de\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6528351c9bc8ab22353f9d776db39a20288e8d6c37ef8cfe3317cf875eecfc2d\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64a4a911eed85daf18834cfaa86a79b7d266ff93ff5ba14005426219480ed662\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\ndependencies = [\n \"lock_api\",\n]\n\n[[package]]\nname = \"spki\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d1e996ef02c474957d681f1b05213dfb0abab947b446a62d37770b23500184a\"\ndependencies = [\n \"base64ct\",\n \"der\",\n]\n\n[[package]]\nname = \"sqlformat\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c12bc9199d1db8234678b7051747c07f517cdcf019262d1847b94ec8b1aee3e\"\ndependencies = [\n \"itertools\",\n \"nom\",\n \"unicode_categories\",\n]\n\n[[package]]\nname = \"sqlx\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e58421b6bc416714d5115a2ca953718f6c621a51b68e4f4922aea5a4391a721\"\ndependencies = [\n \"sqlx-core\",\n \"sqlx-macros\",\n \"sqlx-mysql\",\n \"sqlx-postgres\",\n \"sqlx-sqlite\",\n]\n\n[[package]]\nname = \"sqlx-core\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd4cef4251aabbae751a3710927945901ee1d97ee96d757f6880ebb9a79bfd53\"\ndependencies = [\n \"ahash 0.8.3\",\n \"atoi\",\n \"byteorder\",\n \"bytes\",\n \"chrono\",\n \"crc\",\n \"crossbeam-queue\",\n \"dotenvy\",\n \"either\",\n \"event-listener\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-intrusive\",\n \"futures-io\",\n \"futures-util\",\n \"hashlink\",\n \"hex\",\n \"indexmap 2.0.0\",\n \"log\",\n \"memchr\",\n \"native-tls\",\n \"once_cell\",\n \"paste\",\n \"percent-encoding\",\n \"serde\",\n \"serde_json\",\n \"sha2\",\n \"smallvec\",\n \"sqlformat\",\n \"thiserror\",\n \"tokio\",\n \"tokio-stream\",\n \"tracing\",\n \"url\",\n \"uuid\",\n]\n\n[[package]]\nname = \"sqlx-macros\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"208e3165167afd7f3881b16c1ef3f2af69fa75980897aac8874a0696516d12c2\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"sqlx-core\",\n \"sqlx-macros-core\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"sqlx-macros-core\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a4a8336d278c62231d87f24e8a7a74898156e34c1c18942857be2acb29c7dfc\"\ndependencies = [\n \"dotenvy\",\n \"either\",\n \"heck\",\n \"hex\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"sha2\",\n \"sqlx-core\",\n \"sqlx-mysql\",\n \"sqlx-postgres\",\n \"sqlx-sqlite\",\n \"syn 1.0.109\",\n \"tempfile\",\n \"tokio\",\n \"url\",\n]\n\n[[package]]\nname = \"sqlx-mysql\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ca69bf415b93b60b80dc8fda3cb4ef52b2336614d8da2de5456cc942a110482\"\ndependencies = [\n \"atoi\",\n \"base64 0.21.0\",\n \"bitflags 2.3.3\",\n \"byteorder\",\n \"bytes\",\n \"chrono\",\n \"crc\",\n \"digest\",\n \"dotenvy\",\n \"either\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-util\",\n \"generic-array\",\n \"hex\",\n \"hkdf\",\n \"hmac\",\n \"itoa\",\n \"log\",\n \"md-5\",\n \"memchr\",\n \"once_cell\",\n \"percent-encoding\",\n \"rand 0.8.5\",\n \"rsa\",\n \"serde\",\n \"sha1\",\n \"sha2\",\n \"smallvec\",\n \"sqlx-core\",\n \"stringprep\",\n \"thiserror\",\n \"tracing\",\n \"uuid\",\n \"whoami\",\n]\n\n[[package]]\nname = \"sqlx-postgres\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0db2df1b8731c3651e204629dd55e52adbae0462fa1bdcbed56a2302c18181e\"\ndependencies = [\n \"atoi\",\n \"base64 0.21.0\",\n \"bitflags 2.3.3\",\n \"byteorder\",\n \"chrono\",\n \"crc\",\n \"dotenvy\",\n \"etcetera\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-util\",\n \"hex\",\n \"hkdf\",\n \"hmac\",\n \"home\",\n \"itoa\",\n \"log\",\n \"md-5\",\n \"memchr\",\n \"once_cell\",\n \"rand 0.8.5\",\n \"serde\",\n \"serde_json\",\n \"sha1\",\n \"sha2\",\n \"smallvec\",\n \"sqlx-core\",\n \"stringprep\",\n \"thiserror\",\n \"tracing\",\n \"uuid\",\n \"whoami\",\n]\n\n[[package]]\nname = \"sqlx-sqlite\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be4c21bf34c7cae5b283efb3ac1bcc7670df7561124dc2f8bdc0b59be40f79a2\"\ndependencies = [\n \"atoi\",\n \"chrono\",\n \"flume\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-intrusive\",\n \"futures-util\",\n \"libsqlite3-sys\",\n \"log\",\n \"percent-encoding\",\n \"serde\",\n \"sqlx-core\",\n \"tracing\",\n \"url\",\n \"uuid\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"stringprep\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ee348cb74b87454fff4b551cbf727025810a004f88aeacae7f85b87f4e9a1c1\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.25.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"290d54ea6f91c969195bdbcd7442c8c2a2ba87da8bf60a7ee86a235d4bc1e125\"\n\n[[package]]\nname = \"subprocess\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c2e86926081dda636c546d8c5e641661049d7562a68f5488be4a1f7f66f6086\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6bdef32e8150c2a081110b42772ffe7d7c9032b606bc226c8260fd97e0976601\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04361975b3f5e348b2189d8dc55bc942f278b2d482a6a0365de5bdd62d351567\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sync_wrapper\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160\"\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9fbec84f381d5795b08656e4912bec604d162bff9291d6189a78f4c8ab87998\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"redox_syscall 0.3.5\",\n \"rustix\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"222a222a5bfe1bba4a77b45ec488a741b3cb8872e5e499451fd7d0129c9c7c3d\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.3.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd0cbfecb4d19b5ea75bb31ad904eb5b9fa13f21079c3b92017ebdf4999a5890\"\ndependencies = [\n \"itoa\",\n \"libc\",\n \"num_threads\",\n \"serde\",\n \"time-core\",\n \"time-macros\",\n]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e153e1f1acaef8acc537e68b44906d2db6436e2b35ac2c6b42640fff91f00fd\"\n\n[[package]]\nname = \"time-macros\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd80a657e71da814b8e5d60d3374fc6d35045062245d80224748ae522dd76f36\"\ndependencies = [\n \"time-core\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tokio\"\nversion = \"1.27.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d0de47a4eecbe11f498978a9b29d792f0d2692d1dd003650c24c76510e3bc001\"\ndependencies = [\n \"autocfg\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"num_cpus\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"tracing\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"tokio-io-timeout\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30b74022ada614a1b4834de765f9bb43877f910cc8ce4be40e89042c9223a8bf\"\ndependencies = [\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61a573bdc87985e9d6ddeed1b3d864e8a302c847e40d647746df2f1de209d1ce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"tokio-native-tls\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2\"\ndependencies = [\n \"native-tls\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-rustls\"\nversion = \"0.23.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c43ee83903113e03984cb9e5cebe6c04a5116269e900e3ddba8f068a62adda59\"\ndependencies = [\n \"rustls\",\n \"tokio\",\n \"webpki\",\n]\n\n[[package]]\nname = \"tokio-stream\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fb52b74f05dbf495a8fba459fdc331812b96aa086d9eb78101fa0d4569c3313\"\ndependencies = [\n \"futures-core\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-tungstenite\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f714dd15bead90401d77e04243611caec13726c2408afd5b31901dfcdcb3b181\"\ndependencies = [\n \"futures-util\",\n \"log\",\n \"rustls\",\n \"rustls-native-certs\",\n \"tokio\",\n \"tokio-rustls\",\n \"tungstenite 0.17.3\",\n \"webpki\",\n]\n\n[[package]]\nname = \"tokio-tungstenite\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54319c93411147bced34cb5609a80e0a8e44c5999c93903a81cd866630ec0bfd\"\ndependencies = [\n \"futures-util\",\n \"log\",\n \"tokio\",\n \"tungstenite 0.18.0\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.7.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5427d89453009325de0d8f342c9490009f76e999cb7672d77e46267448f7e6b2\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"pin-project-lite\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ab8ed2edee10b50132aed5f331333428b011c99402b5a534154ed15746f9622\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"239410c8609e8125456927e6707163a3b1fdb40561e4b803bc041f466ccfdc13\"\ndependencies = [\n \"indexmap 1.9.3\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"tonic\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f219fad3b929bef19b1f86fbc0358d35daed8f2cac972037ac0dc10bbb8d5fb\"\ndependencies = [\n \"async-stream\",\n \"async-trait\",\n \"axum\",\n \"base64 0.13.1\",\n \"bytes\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"hyper-timeout\",\n \"percent-encoding\",\n \"pin-project\",\n \"prost\",\n \"prost-derive\",\n \"tokio\",\n \"tokio-stream\",\n \"tokio-util\",\n \"tower\",\n \"tower-layer\",\n \"tower-service\",\n \"tracing\",\n \"tracing-futures\",\n]\n\n[[package]]\nname = \"totp-rs\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"332e333b188e843cb4cc477b2911160a533bcfc6e9e488d7bef25011f9e2ba1b\"\ndependencies = [\n \"base32\",\n \"constant_time_eq\",\n \"hmac\",\n \"sha1\",\n \"sha2\",\n \"url\",\n \"urlencoding\",\n]\n\n[[package]]\nname = \"tower\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c\"\ndependencies = [\n \"futures-core\",\n \"futures-util\",\n \"indexmap 1.9.3\",\n \"pin-project\",\n \"pin-project-lite\",\n \"rand 0.8.5\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tower-layer\",\n \"tower-service\",\n \"tracing\",\n]\n\n[[package]]\nname = \"tower-layer\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c20c8dbed6283a09604c3e69b4b7eeb54e298b8a600d4d5ecb5ad39de609f1d0\"\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8\"\ndependencies = [\n \"cfg-if\",\n \"log\",\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4017f8f45139870ca7e672686113917c71c7a6e02d4924eda67186083c03081a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24eb03ba0eab1fd845050058ce5e616558e8f8d8fca633e6b163fe25c797213a\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-futures\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2\"\ndependencies = [\n \"pin-project\",\n \"tracing\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ddad33d2d10b1ed7eb9d1f518a5674713876e97e5bb9b7345a7984fbb4f922\"\ndependencies = [\n \"lazy_static\",\n \"log\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30a651bc37f915e81f087d86e62a18eec5f79550c7faff886f7090b4ea757c77\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"regex\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"time\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3528ecfd12c466c6f163363caf2d02a71161dd5e1cc6ae7b34207ea2d42d81ed\"\n\n[[package]]\nname = \"tungstenite\"\nversion = \"0.17.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e27992fd6a8c29ee7eef28fc78349aa244134e10ad447ce3b9f0ac0ed0fa4ce0\"\ndependencies = [\n \"base64 0.13.1\",\n \"byteorder\",\n \"bytes\",\n \"http\",\n \"httparse\",\n \"log\",\n \"rand 0.8.5\",\n \"rustls\",\n \"sha-1\",\n \"thiserror\",\n \"url\",\n \"utf-8\",\n \"webpki\",\n]\n\n[[package]]\nname = \"tungstenite\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30ee6ab729cd4cf0fd55218530c4522ed30b7b6081752839b68fcec8d0960788\"\ndependencies = [\n \"base64 0.13.1\",\n \"byteorder\",\n \"bytes\",\n \"http\",\n \"httparse\",\n \"log\",\n \"rand 0.8.5\",\n \"sha1\",\n \"thiserror\",\n \"url\",\n \"utf-8\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"497961ef93d974e23eb6f433eb5fe1b7930b659f06d12dec6fc44a8f554c0bba\"\n\n[[package]]\nname = \"uncased\"\nversion = \"0.9.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09b01702b0fd0b3fadcf98e098780badda8742d4f4a7676615cad90e8ac73622\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"unicase\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92888ba5573ff080736b3648696b70cafad7d250551175acbaa4e0385b3e1460\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5464a87b239f13a63a501f2701565754bae92d243d4bb7eb12f6d57d2269bf4\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b\"\n\n[[package]]\nname = \"unicode_categories\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n\n[[package]]\nname = \"universal-hash\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d3160b73c9a19f7e2939a2fdad446c57c1bbbbf4d919d3213ff1267a580d8b5\"\ndependencies = [\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"unsafe-libyaml\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1865806a559042e51ab5414598446a5871b561d21b6764f2eabb0dd481d880a6\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a\"\n\n[[package]]\nname = \"url\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d68c799ae75762b8c3fe375feb6600ef5602c883c5d21eb51c09f22b83c4643\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n \"serde\",\n]\n\n[[package]]\nname = \"urlencoding\"\nversion = \"2.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8db7427f936968176eaa7cdf81b7f98b980b18495ec28f1b5791ac3bfe3eea9\"\n\n[[package]]\nname = \"utf-8\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"uuid\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b55a3fef2a1e3b3a00ce878640918820d3c51081576ac657d23af9fc7928fdb\"\ndependencies = [\n \"getrandom 0.2.9\",\n \"serde\",\n]\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"value-bag\"\nversion = \"1.0.0-alpha.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2209b78d1249f7e6f3293657c9779fe31ced465df091bbd433a1cf88e916ec55\"\ndependencies = [\n \"ctor\",\n \"version_check\",\n]\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"waker-fn\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d5b2c62b4012a3e1eca5a7e077d13b3bf498c4073e33ccd58626607748ceeca\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36df944cda56c7d8d8b7496af378e6b16de9284591917d307c9b4d313c44e698\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"want\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\ndependencies = [\n \"log\",\n \"try-lock\",\n]\n\n[[package]]\nname = \"warpgate\"\nversion = \"0.7.4\"\ndependencies = [\n \"ansi_term\",\n \"anyhow\",\n \"async-trait\",\n \"atty\",\n \"bytes\",\n \"clap 3.2.23\",\n \"config\",\n \"console\",\n \"console-subscriber\",\n \"data-encoding\",\n \"dialoguer\",\n \"futures\",\n \"notify\",\n \"rcgen\",\n \"sd-notify\",\n \"sea-orm\",\n \"serde_json\",\n \"serde_yaml 0.8.26\",\n \"time\",\n \"tokio\",\n \"tracing\",\n \"tracing-subscriber\",\n \"uuid\",\n \"warpgate-admin\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-db-entities\",\n \"warpgate-protocol-http\",\n \"warpgate-protocol-mysql\",\n \"warpgate-protocol-ssh\",\n]\n\n[[package]]\nname = \"warpgate-admin\"\nversion = \"0.7.4\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"bytes\",\n \"chrono\",\n \"futures\",\n \"hex\",\n \"mime_guess\",\n \"poem\",\n \"poem-openapi\",\n \"regex\",\n \"russh-keys\",\n \"rust-embed\",\n \"sea-orm\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tokio\",\n \"tracing\",\n \"uuid\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-db-entities\",\n \"warpgate-protocol-ssh\",\n]\n\n[[package]]\nname = \"warpgate-common\"\nversion = \"0.7.4\"\ndependencies = [\n \"anyhow\",\n \"argon2\",\n \"async-trait\",\n \"bytes\",\n \"chrono\",\n \"data-encoding\",\n \"delegate\",\n \"futures\",\n \"humantime-serde\",\n \"once_cell\",\n \"password-hash 0.4.2\",\n \"poem\",\n \"poem-openapi\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n \"rustls\",\n \"rustls-pemfile\",\n \"sea-orm\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tokio\",\n \"totp-rs\",\n \"tracing\",\n \"tracing-core\",\n \"url\",\n \"uuid\",\n \"warpgate-sso\",\n \"webpki\",\n]\n\n[[package]]\nname = \"warpgate-core\"\nversion = \"0.7.4\"\ndependencies = [\n \"anyhow\",\n \"argon2\",\n \"async-trait\",\n \"bytes\",\n \"chrono\",\n \"data-encoding\",\n \"futures\",\n \"humantime-serde\",\n \"once_cell\",\n \"packet\",\n \"password-hash 0.4.2\",\n \"poem\",\n \"poem-openapi\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n \"rustls\",\n \"rustls-pemfile\",\n \"sea-orm\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tokio\",\n \"totp-rs\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-subscriber\",\n \"url\",\n \"uuid\",\n \"warpgate-common\",\n \"warpgate-db-entities\",\n \"warpgate-db-migrations\",\n \"warpgate-sso\",\n \"webpki\",\n]\n\n[[package]]\nname = \"warpgate-database-protocols\"\nversion = \"0.7.4\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"bytes\",\n \"futures-core\",\n \"futures-util\",\n \"memchr\",\n \"thiserror\",\n \"tokio\",\n]\n\n[[package]]\nname = \"warpgate-db-entities\"\nversion = \"0.7.4\"\ndependencies = [\n \"chrono\",\n \"poem-openapi\",\n \"sea-orm\",\n \"serde\",\n \"serde_json\",\n \"uuid\",\n \"warpgate-common\",\n]\n\n[[package]]\nname = \"warpgate-db-migrations\"\nversion = \"0.7.4\"\ndependencies = [\n \"async-std\",\n \"chrono\",\n \"sea-orm\",\n \"sea-orm-migration\",\n \"serde_json\",\n \"uuid\",\n]\n\n[[package]]\nname = \"warpgate-protocol-http\"\nversion = \"0.7.4\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"chrono\",\n \"cookie\",\n \"data-encoding\",\n \"delegate\",\n \"futures\",\n \"http\",\n \"once_cell\",\n \"percent-encoding\",\n \"poem\",\n \"poem-openapi\",\n \"regex\",\n \"reqwest\",\n \"serde\",\n \"serde_json\",\n \"tokio\",\n \"tokio-tungstenite 0.17.2\",\n \"tracing\",\n \"uuid\",\n \"warpgate-admin\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-db-entities\",\n \"warpgate-sso\",\n \"warpgate-web\",\n]\n\n[[package]]\nname = \"warpgate-protocol-mysql\"\nversion = \"0.7.4\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"bytes\",\n \"mysql_common\",\n \"once_cell\",\n \"password-hash 0.2.3\",\n \"rand 0.8.5\",\n \"rustls\",\n \"rustls-native-certs\",\n \"rustls-pemfile\",\n \"sha1\",\n \"thiserror\",\n \"tokio\",\n \"tokio-rustls\",\n \"tracing\",\n \"uuid\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-database-protocols\",\n \"warpgate-db-entities\",\n \"webpki\",\n]\n\n[[package]]\nname = \"warpgate-protocol-ssh\"\nversion = \"0.7.4\"\ndependencies = [\n \"ansi_term\",\n \"anyhow\",\n \"async-trait\",\n \"bimap\",\n \"bytes\",\n \"dialoguer\",\n \"futures\",\n \"russh\",\n \"russh-keys\",\n \"sea-orm\",\n \"thiserror\",\n \"time\",\n \"tokio\",\n \"tracing\",\n \"uuid\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-db-entities\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"warpgate-sso\"\nversion = \"0.7.4\"\ndependencies = [\n \"bytes\",\n \"data-encoding\",\n \"jsonwebtoken\",\n \"once_cell\",\n \"openidconnect\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"warpgate-web\"\nversion = \"0.7.4\"\ndependencies = [\n \"rust-embed\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31f8dcbc21f30d9b8f2ea926ecb58f6b91192c17e9d33594b3df58b2007ca53b\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95ce90fd5bcc06af55a641a86428ee4229e44e07033963a2290a8e241607ccb9\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f219e0d211ba40266969f6dbdd90636da12f75bee4fc9d6c23d1260dadb51454\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c21f77c0bedc37fd5dc21f897894a5ca01e7bb159884559461862ae90c0b4c5\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2aff81306fcac3c7515ad4e177f521b5c9a15f2b08f4e32d823066102f35a5f6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0046fef7e28c3804e5e38bfa31ea2a0f73905319b677e57ebe37e49358989b5d\"\n\n[[package]]\nname = \"wasm-streams\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6bbae3363c08332cadccd13b67db371814cd214c2524020932f0804b8cf7c078\"\ndependencies = [\n \"futures-util\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e33b99f4b23ba3eec1a53ac264e35a755f00e966e0065077d6027c0f575b0b97\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"webpki\"\nversion = \"0.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f095d78192e208183081cc07bc5515ef55216397af48b873e5edcd72637fa1bd\"\ndependencies = [\n \"ring\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.22.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c71e40d7d2c34a5106301fb632274ca37242cd0c9d3e64dbece371a40a2d87\"\ndependencies = [\n \"webpki\",\n]\n\n[[package]]\nname = \"whoami\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c70234412ca409cc04e864e89523cb0fc37f5e1344ebed5a3ebf4192b6b9f68\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e686886bc078bc1b0b600cac0147aadb815089b6e4da64016cbd754b6342700f\"\ndependencies = [\n \"windows-targets 0.48.0\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.42.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.42.2\",\n \"windows_aarch64_msvc 0.42.2\",\n \"windows_i686_gnu 0.42.2\",\n \"windows_i686_msvc 0.42.2\",\n \"windows_x86_64_gnu 0.42.2\",\n \"windows_x86_64_gnullvm 0.42.2\",\n \"windows_x86_64_msvc 0.42.2\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\ndependencies = [\n \"windows-targets 0.42.2\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.0\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.42.2\",\n \"windows_aarch64_msvc 0.42.2\",\n \"windows_i686_gnu 0.42.2\",\n \"windows_i686_msvc 0.42.2\",\n \"windows_x86_64_gnu 0.42.2\",\n \"windows_x86_64_gnullvm 0.42.2\",\n \"windows_x86_64_msvc 0.42.2\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.0\",\n \"windows_aarch64_msvc 0.48.0\",\n \"windows_i686_gnu 0.48.0\",\n \"windows_i686_msvc 0.48.0\",\n \"windows_x86_64_gnu 0.48.0\",\n \"windows_x86_64_gnullvm 0.48.0\",\n \"windows_x86_64_msvc 0.48.0\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae8970b36c66498d8ff1d66685dc86b91b29db0c7739899012f63a63814b4b28\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winreg\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"yaml-rust\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85\"\ndependencies = [\n \"linked-hash-map\",\n]\n\n[[package]]\nname = \"yasna\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e17bb3549cc1321ae1296b9cdc2698e2b6cb1992adfa19a8c72e5b7a738f44cd\"\ndependencies = [\n \"bit-vec\",\n \"num-bigint\",\n \"time\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a0956f1ba7c7909bfb66c2e9e4124ab6f6482560f6628b5aaeba39207c9aad9\"\n", "[package]\nedition = \"2021\"\nlicense = \"Apache-2.0\"\nname = \"warpgate-protocol-ssh\"\nversion = \"0.8.0\"\n\n[dependencies]\nansi_term = \"0.12\"\nanyhow = { version = \"1.0\", features = [\"std\"] }\nasync-trait = \"0.1\"\nbimap = \"0.6\"\nbytes = \"1.3\"\ndialoguer = \"0.10\"\nfutures = \"0.3\"\nrussh = { version = \"0.38.0\", features = [\"vendored-openssl\"] }\n# russh = { version = \"0.35.0-beta.6\", features = [\"vendored-openssl\"], path = \"../../russh/russh\"}\nrussh-keys = { version = \"0.38.0\", features = [\"vendored-openssl\"] }\n# russh-keys = { version = \"0.23.0-beta.1\", features = [\"vendored-openssl\"], path = \"../../russh/russh-keys\" }\nsea-orm = { version = \"0.12.2\", features = [\n    \"runtime-tokio-native-tls\",\n], default-features = false }\nthiserror = \"1.0\"\ntime = \"0.3\"\ntokio = { version = \"1.20\", features = [\"tracing\", \"signal\"] }\ntracing = \"0.1\"\nuuid = { version = \"1.2\", features = [\"v4\"] }\nwarpgate-common = { version = \"*\", path = \"../warpgate-common\" }\nwarpgate-core = { version = \"*\", path = \"../warpgate-core\" }\nwarpgate-db-entities = { version = \"*\", path = \"../warpgate-db-entities\" }\nzeroize = \"^1.5\"\n", "use std::fmt::Debug;\n\nuse async_trait::async_trait;\nuse bytes::Bytes;\nuse russh::server::{Auth, Handle, Msg, Session};\nuse russh::{Channel, ChannelId, Pty, Sig};\nuse russh_keys::key::PublicKey;\nuse tokio::sync::mpsc::UnboundedSender;\nuse tokio::sync::oneshot;\nuse tracing::*;\nuse warpgate_common::{Secret, SessionId};\n\nuse crate::common::{PtyRequest, ServerChannelId};\nuse crate::{DirectTCPIPParams, X11Request};\n\npub struct HandleWrapper(pub Handle);\n\nimpl Debug for HandleWrapper {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"HandleWrapper\")\n    }\n}\n\n#[derive(Debug)]\npub enum ServerHandlerEvent {\n    Authenticated(HandleWrapper),\n    ChannelOpenSession(ServerChannelId, oneshot::Sender<bool>),\n    SubsystemRequest(ServerChannelId, String, oneshot::Sender<bool>),\n    PtyRequest(ServerChannelId, PtyRequest, oneshot::Sender<()>),\n    ShellRequest(ServerChannelId, oneshot::Sender<bool>),\n    AuthPublicKey(Secret<String>, PublicKey, oneshot::Sender<Auth>),\n    AuthPassword(Secret<String>, Secret<String>, oneshot::Sender<Auth>),\n    AuthKeyboardInteractive(\n        Secret<String>,\n        Option<Secret<String>>,\n        oneshot::Sender<Auth>,\n    ),\n    Data(ServerChannelId, Bytes, oneshot::Sender<()>),\n    ExtendedData(ServerChannelId, Bytes, u32, oneshot::Sender<()>),\n    ChannelClose(ServerChannelId, oneshot::Sender<()>),\n    ChannelEof(ServerChannelId, oneshot::Sender<()>),\n    WindowChangeRequest(ServerChannelId, PtyRequest, oneshot::Sender<()>),\n    Signal(ServerChannelId, Sig, oneshot::Sender<()>),\n    ExecRequest(ServerChannelId, Bytes, oneshot::Sender<bool>),\n    ChannelOpenDirectTcpIp(ServerChannelId, DirectTCPIPParams, oneshot::Sender<bool>),\n    EnvRequest(ServerChannelId, String, String, oneshot::Sender<()>),\n    X11Request(ServerChannelId, X11Request, oneshot::Sender<()>),\n    TcpIpForward(String, u32, oneshot::Sender<bool>),\n    CancelTcpIpForward(String, u32, oneshot::Sender<bool>),\n    Disconnect,\n}\n\npub struct ServerHandler {\n    pub id: SessionId,\n    pub event_tx: UnboundedSender<ServerHandlerEvent>,\n}\n\n#[derive(thiserror::Error, Debug)]\npub enum ServerHandlerError {\n    #[error(\"channel disconnected\")]\n    ChannelSend,\n}\n\nimpl ServerHandler {\n    fn send_event(&self, event: ServerHandlerEvent) -> Result<(), ServerHandlerError> {\n        self.event_tx\n            .send(event)\n            .map_err(|_| ServerHandlerError::ChannelSend)\n    }\n}\n\n#[async_trait]\nimpl russh::server::Handler for ServerHandler {\n    type Error = anyhow::Error;\n\n    async fn auth_succeeded(self, session: Session) -> Result<(Self, Session), Self::Error> {\n        let handle = session.handle();\n        self.send_event(ServerHandlerEvent::Authenticated(HandleWrapper(handle)))?;\n        Ok((self, session))\n    }\n\n    async fn channel_open_session(\n        self,\n        channel: Channel<Msg>,\n        session: Session,\n    ) -> Result<(Self, bool, Session), Self::Error> {\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::ChannelOpenSession(\n            ServerChannelId(channel.id()),\n            tx,\n        ))?;\n\n        let allowed = rx.await.unwrap_or(false);\n        Ok((self, allowed, session))\n    }\n\n    async fn subsystem_request(\n        self,\n        channel: ChannelId,\n        name: &str,\n        mut session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let name = name.to_string();\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::SubsystemRequest(\n            ServerChannelId(channel),\n            name,\n            tx,\n        ))?;\n\n        if rx.await.unwrap_or(false) {\n            session.channel_success(channel)\n        } else {\n            session.channel_failure(channel)\n        }\n\n        Ok((self, session))\n    }\n\n    async fn pty_request(\n        self,\n        channel: ChannelId,\n        term: &str,\n        col_width: u32,\n        row_height: u32,\n        pix_width: u32,\n        pix_height: u32,\n        modes: &[(Pty, u32)],\n        mut session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let term = term.to_string();\n        let modes = modes\n            .iter()\n            .take_while(|x| (x.0 as u8) > 0 && (x.0 as u8) < 160)\n            .map(Clone::clone)\n            .collect();\n\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::PtyRequest(\n            ServerChannelId(channel),\n            PtyRequest {\n                term,\n                col_width,\n                row_height,\n                pix_width,\n                pix_height,\n                modes,\n            },\n            tx,\n        ))?;\n\n        let _ = rx.await;\n        session.channel_success(channel);\n        Ok((self, session))\n    }\n\n    async fn shell_request(\n        self,\n        channel: ChannelId,\n        mut session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::ShellRequest(\n            ServerChannelId(channel),\n            tx,\n        ))?;\n\n        if rx.await.unwrap_or(false) {\n            session.channel_success(channel)\n        } else {\n            session.channel_failure(channel)\n        }\n\n        Ok((self, session))\n    }\n\n    async fn auth_publickey(\n        self,\n        user: &str,\n        key: &russh_keys::key::PublicKey,\n    ) -> Result<(Self, Auth), Self::Error> {\n        let user = Secret::new(user.to_string());\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::AuthPublicKey(user, key.clone(), tx))?;\n\n        let result = rx.await.unwrap_or(Auth::UnsupportedMethod);\n        Ok((self, result))\n    }\n\n    async fn auth_password(self, user: &str, password: &str) -> Result<(Self, Auth), Self::Error> {\n        let user = Secret::new(user.to_string());\n        let password = Secret::new(password.to_string());\n\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::AuthPassword(user, password, tx))?;\n\n        let result = rx.await.unwrap_or(Auth::UnsupportedMethod);\n        Ok((self, result))\n    }\n\n    async fn auth_keyboard_interactive(\n        self,\n        user: &str,\n        _submethods: &str,\n        response: Option<russh::server::Response<'async_trait>>,\n    ) -> Result<(Self, Auth), Self::Error> {\n        let user = Secret::new(user.to_string());\n        let response = response\n            .and_then(|mut r| r.next())\n            .and_then(|b| String::from_utf8(b.to_vec()).ok())\n            .map(Secret::new);\n\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::AuthKeyboardInteractive(\n            user, response, tx,\n        ))?;\n\n        let result = rx.await.unwrap_or(Auth::UnsupportedMethod);\n        Ok((self, result))\n    }\n\n    async fn data(\n        self,\n        channel: ChannelId,\n        data: &[u8],\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let channel = ServerChannelId(channel);\n        let data = Bytes::from(data.to_vec());\n\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::Data(channel, data, tx))?;\n\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn extended_data(\n        self,\n        channel: ChannelId,\n        code: u32,\n        data: &[u8],\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let channel = ServerChannelId(channel);\n        let data = Bytes::from(data.to_vec());\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::ExtendedData(channel, data, code, tx))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn channel_close(\n        self,\n        channel: ChannelId,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let channel = ServerChannelId(channel);\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::ChannelClose(channel, tx))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn window_change_request(\n        self,\n        channel: ChannelId,\n        col_width: u32,\n        row_height: u32,\n        pix_width: u32,\n        pix_height: u32,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::WindowChangeRequest(\n            ServerChannelId(channel),\n            PtyRequest {\n                term: \"\".to_string(),\n                col_width,\n                row_height,\n                pix_width,\n                pix_height,\n                modes: vec![],\n            },\n            tx,\n        ))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn channel_eof(\n        self,\n        channel: ChannelId,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let channel = ServerChannelId(channel);\n        let (tx, rx) = oneshot::channel();\n\n        self.event_tx\n            .send(ServerHandlerEvent::ChannelEof(channel, tx))\n            .map_err(|_| ServerHandlerError::ChannelSend)?;\n\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn signal(\n        self,\n        channel: ChannelId,\n        signal_name: russh::Sig,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::Signal(\n            ServerChannelId(channel),\n            signal_name,\n            tx,\n        ))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn exec_request(\n        self,\n        channel: ChannelId,\n        data: &[u8],\n        mut session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let data = Bytes::from(data.to_vec());\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::ExecRequest(\n            ServerChannelId(channel),\n            data,\n            tx,\n        ))?;\n\n        if rx.await.unwrap_or(false) {\n            session.channel_success(channel)\n        } else {\n            session.channel_failure(channel)\n        }\n\n        Ok((self, session))\n    }\n\n    async fn env_request(\n        self,\n        channel: ChannelId,\n        variable_name: &str,\n        variable_value: &str,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let variable_name = variable_name.to_string();\n        let variable_value = variable_value.to_string();\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::EnvRequest(\n            ServerChannelId(channel),\n            variable_name,\n            variable_value,\n            tx,\n        ))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn channel_open_direct_tcpip(\n        self,\n        channel: Channel<Msg>,\n        host_to_connect: &str,\n        port_to_connect: u32,\n        originator_address: &str,\n        originator_port: u32,\n        session: Session,\n    ) -> Result<(Self, bool, Session), Self::Error> {\n        let host_to_connect = host_to_connect.to_string();\n        let originator_address = originator_address.to_string();\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::ChannelOpenDirectTcpIp(\n            ServerChannelId(channel.id()),\n            DirectTCPIPParams {\n                host_to_connect,\n                port_to_connect,\n                originator_address,\n                originator_port,\n            },\n            tx,\n        ))?;\n        let allowed = rx.await.unwrap_or(false);\n        Ok((self, allowed, session))\n    }\n\n    async fn x11_request(\n        self,\n        channel: ChannelId,\n        single_conection: bool,\n        x11_auth_protocol: &str,\n        x11_auth_cookie: &str,\n        x11_screen_number: u32,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let x11_auth_protocol = x11_auth_protocol.to_string();\n        let x11_auth_cookie = x11_auth_cookie.to_string();\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::X11Request(\n            ServerChannelId(channel),\n            X11Request {\n                single_conection,\n                x11_auth_protocol,\n                x11_auth_cookie,\n                x11_screen_number,\n            },\n            tx,\n        ))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn tcpip_forward(\n        self,\n        address: &str,\n        port: &mut u32,\n        mut session: Session,\n    ) -> Result<(Self, bool, Session), Self::Error> {\n        let address = address.to_string();\n        let port = *port;\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::TcpIpForward(address, port, tx))?;\n        let allowed = rx.await.unwrap_or(false);\n        if allowed {\n            session.request_success()\n        } else {\n            session.request_failure()\n        }\n        Ok((self, allowed, session))\n    }\n\n    async fn cancel_tcpip_forward(\n        self,\n        address: &str,\n        port: u32,\n        mut session: Session,\n    ) -> Result<(Self, bool, Session), Self::Error> {\n        let address = address.to_string();\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::CancelTcpIpForward(address, port, tx))?;\n        let allowed = rx.await.unwrap_or(false);\n        if allowed {\n            session.request_success()\n        } else {\n            session.request_failure()\n        }\n        Ok((self, allowed, session))\n    }\n}\n\nimpl Drop for ServerHandler {\n    fn drop(&mut self) {\n        debug!(\"Dropped\");\n        let _ = self.event_tx.send(ServerHandlerEvent::Disconnect);\n    }\n}\n\nimpl Debug for ServerHandler {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"ServerHandler\")\n    }\n}\n", "use std::borrow::Cow;\nuse std::collections::hash_map::Entry::Vacant;\nuse std::collections::{HashMap, HashSet};\nuse std::net::{Ipv4Addr, SocketAddr};\nuse std::pin::Pin;\nuse std::str::FromStr;\nuse std::sync::Arc;\nuse std::task::Poll;\n\nuse ansi_term::Colour;\nuse anyhow::{Context, Result};\nuse bimap::BiMap;\nuse bytes::Bytes;\nuse futures::{Future, FutureExt};\nuse russh::{CryptoVec, MethodSet, Sig};\nuse russh_keys::key::{PublicKey, SignatureHash};\nuse russh_keys::PublicKeyBase64;\nuse tokio::sync::mpsc::{UnboundedReceiver, UnboundedSender};\nuse tokio::sync::{broadcast, oneshot, Mutex};\nuse tracing::*;\nuse uuid::Uuid;\nuse warpgate_common::auth::{AuthCredential, AuthResult, AuthSelector, AuthState, CredentialKind};\nuse warpgate_common::eventhub::{EventHub, EventSender, EventSubscription};\nuse warpgate_common::{\n    Secret, SessionId, SshHostKeyVerificationMode, Target, TargetOptions, TargetSSHOptions,\n    WarpgateError,\n};\nuse warpgate_core::recordings::{\n    self, ConnectionRecorder, TerminalRecorder, TerminalRecordingStreamId, TrafficConnectionParams,\n    TrafficRecorder,\n};\nuse warpgate_core::{authorize_ticket, consume_ticket, Services, WarpgateServerHandle};\n\nuse super::channel_writer::ChannelWriter;\nuse super::russh_handler::ServerHandlerEvent;\nuse super::service_output::ServiceOutput;\nuse super::session_handle::SessionHandleCommand;\nuse crate::compat::ContextExt;\nuse crate::server::service_output::ERASE_PROGRESS_SPINNER;\nuse crate::{\n    ChannelOperation, ConnectionError, DirectTCPIPParams, PtyRequest, RCCommand, RCCommandReply,\n    RCEvent, RCState, RemoteClient, ServerChannelId, SshClientError, X11Request,\n};\n\n#[derive(Clone)]\n#[allow(clippy::large_enum_variant)]\nenum TargetSelection {\n    None,\n    NotFound(String),\n    Found(Target, TargetSSHOptions),\n}\n\n#[derive(Debug)]\nenum Event {\n    Command(SessionHandleCommand),\n    ServerHandler(ServerHandlerEvent),\n    ConsoleInput(Bytes),\n    ServiceOutput(Bytes),\n    Client(RCEvent),\n}\n\nenum KeyboardInteractiveState {\n    None,\n    OtpRequested,\n    WebAuthRequested(broadcast::Receiver<AuthResult>),\n}\n\npub struct ServerSession {\n    pub id: SessionId,\n    username: Option<String>,\n    session_handle: Option<russh::server::Handle>,\n    pty_channels: Vec<Uuid>,\n    all_channels: Vec<Uuid>,\n    channel_recorders: HashMap<Uuid, TerminalRecorder>,\n    channel_map: BiMap<ServerChannelId, Uuid>,\n    channel_pty_size_map: HashMap<Uuid, PtyRequest>,\n    rc_tx: UnboundedSender<(RCCommand, Option<RCCommandReply>)>,\n    rc_abort_tx: UnboundedSender<()>,\n    rc_state: RCState,\n    remote_address: SocketAddr,\n    services: Services,\n    server_handle: Arc<Mutex<WarpgateServerHandle>>,\n    target: TargetSelection,\n    traffic_recorders: HashMap<(String, u32), TrafficRecorder>,\n    traffic_connection_recorders: HashMap<Uuid, ConnectionRecorder>,\n    hub: EventHub<Event>,\n    event_sender: EventSender<Event>,\n    main_event_subscription: EventSubscription<Event>,\n    service_output: ServiceOutput,\n    channel_writer: ChannelWriter,\n    auth_state: Option<Arc<Mutex<AuthState>>>,\n    keyboard_interactive_state: KeyboardInteractiveState,\n}\n\nfn session_debug_tag(id: &SessionId, remote_address: &SocketAddr) -> String {\n    format!(\"[{id} - {remote_address}]\")\n}\n\nimpl std::fmt::Debug for ServerSession {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{}\", session_debug_tag(&self.id, &self.remote_address))\n    }\n}\n\nimpl ServerSession {\n    pub async fn start(\n        remote_address: SocketAddr,\n        services: &Services,\n        server_handle: Arc<Mutex<WarpgateServerHandle>>,\n        mut session_handle_rx: UnboundedReceiver<SessionHandleCommand>,\n        mut handler_event_rx: UnboundedReceiver<ServerHandlerEvent>,\n    ) -> Result<impl Future<Output = Result<()>>> {\n        let id = server_handle.lock().await.id();\n\n        let _span = info_span!(\"SSH\", session=%id);\n        let _enter = _span.enter();\n\n        let mut rc_handles = RemoteClient::create(id, services.clone())?;\n\n        let (hub, event_sender) = EventHub::setup();\n        let main_event_subscription = hub\n            .subscribe(|e| !matches!(e, Event::ConsoleInput(_)))\n            .await;\n\n        let mut this = Self {\n            id,\n            username: None,\n            session_handle: None,\n            pty_channels: vec![],\n            all_channels: vec![],\n            channel_recorders: HashMap::new(),\n            channel_map: BiMap::new(),\n            channel_pty_size_map: HashMap::new(),\n            rc_tx: rc_handles.command_tx.clone(),\n            rc_abort_tx: rc_handles.abort_tx,\n            rc_state: RCState::NotInitialized,\n            remote_address,\n            services: services.clone(),\n            server_handle,\n            target: TargetSelection::None,\n            traffic_recorders: HashMap::new(),\n            traffic_connection_recorders: HashMap::new(),\n            hub,\n            event_sender: event_sender.clone(),\n            main_event_subscription,\n            service_output: ServiceOutput::new(),\n            channel_writer: ChannelWriter::new(),\n            auth_state: None,\n            keyboard_interactive_state: KeyboardInteractiveState::None,\n        };\n\n        let mut so_rx = this.service_output.subscribe();\n        let so_sender = event_sender.clone();\n        tokio::spawn(async move {\n            loop {\n                match so_rx.recv().await {\n                    Ok(data) => {\n                        if so_sender\n                            .send_once(Event::ServiceOutput(data))\n                            .await\n                            .is_err()\n                        {\n                            break;\n                        }\n                    }\n                    Err(broadcast::error::RecvError::Closed) => break,\n                    Err(_) => (),\n                }\n            }\n        });\n\n        let name = format!(\"SSH {id} session control\");\n        tokio::task::Builder::new().name(&name).spawn({\n            let sender = event_sender.clone();\n            async move {\n                while let Some(command) = session_handle_rx.recv().await {\n                    if sender.send_once(Event::Command(command)).await.is_err() {\n                        break;\n                    }\n                }\n            }\n        })?;\n\n        let name = format!(\"SSH {id} client events\");\n        tokio::task::Builder::new().name(&name).spawn({\n            let sender = event_sender.clone();\n            async move {\n                while let Some(e) = rc_handles.event_rx.recv().await {\n                    if sender.send_once(Event::Client(e)).await.is_err() {\n                        break;\n                    }\n                }\n            }\n        })?;\n\n        let name = format!(\"SSH {id} server handler events\");\n        tokio::task::Builder::new().name(&name).spawn({\n            let sender = event_sender.clone();\n            async move {\n                while let Some(e) = handler_event_rx.recv().await {\n                    if sender.send_once(Event::ServerHandler(e)).await.is_err() {\n                        break;\n                    }\n                }\n            }\n        })?;\n\n        Ok(async move {\n            while let Some(event) = this.get_next_event().await {\n                this.handle_event(event).await?;\n            }\n            debug!(\"No more events\");\n            Ok::<_, anyhow::Error>(())\n        })\n    }\n\n    async fn get_next_event(&mut self) -> Option<Event> {\n        self.main_event_subscription.recv().await\n    }\n\n    async fn get_auth_state(&mut self, username: &str) -> Result<Arc<Mutex<AuthState>>> {\n        #[allow(clippy::unwrap_used)]\n        if self.auth_state.is_none()\n            || self.auth_state.as_ref().unwrap().lock().await.username() != username\n        {\n            let state = self\n                .services\n                .auth_state_store\n                .lock()\n                .await\n                .create(Some(&self.id), username, crate::PROTOCOL_NAME)\n                .await?\n                .1;\n            self.auth_state = Some(state);\n        }\n        #[allow(clippy::unwrap_used)]\n        Ok(self.auth_state.as_ref().map(Clone::clone).unwrap())\n    }\n\n    pub fn make_logging_span(&self) -> tracing::Span {\n        let client_ip = self.remote_address.ip().to_string();\n        match self.username {\n            Some(ref username) => {\n                info_span!(\"SSH\", session=%self.id, session_username=%username, %client_ip)\n            }\n            None => info_span!(\"SSH\", session=%self.id, %client_ip),\n        }\n    }\n\n    fn map_channel(&self, ch: &ServerChannelId) -> Result<Uuid, WarpgateError> {\n        self.channel_map\n            .get_by_left(ch)\n            .cloned()\n            .ok_or(WarpgateError::InconsistentState)\n    }\n\n    fn map_channel_reverse(&self, ch: &Uuid) -> Result<ServerChannelId> {\n        self.channel_map\n            .get_by_right(ch)\n            .cloned()\n            .ok_or_else(|| anyhow::anyhow!(\"Channel not known\"))\n    }\n\n    pub async fn emit_service_message(&mut self, msg: &str) -> Result<()> {\n        debug!(\"Service message: {}\", msg);\n\n        self.service_output.emit_output(Bytes::from(format!(\n            \"{}{} {}\\r\\n\",\n            ERASE_PROGRESS_SPINNER,\n            Colour::Black.on(Colour::White).paint(\" Warpgate \"),\n            msg.replace('\\n', \"\\r\\n\"),\n        )));\n\n        Ok(())\n    }\n\n    pub async fn emit_pty_output(&mut self, data: &[u8]) -> Result<()> {\n        let channels = self.pty_channels.clone();\n        for channel in channels {\n            let channel = self.map_channel_reverse(&channel)?;\n            if let Some(session) = self.session_handle.clone() {\n                self.channel_writer\n                    .write(session, channel.0, CryptoVec::from_slice(data));\n            }\n        }\n        Ok(())\n    }\n\n    pub async fn maybe_connect_remote(&mut self) -> Result<()> {\n        match self.target.clone() {\n            TargetSelection::None => {\n                anyhow::bail!(\"Invalid session state (target not set)\")\n            }\n            TargetSelection::NotFound(name) => {\n                self.emit_service_message(&format!(\"Selected target not found: {name}\"))\n                    .await?;\n                self.disconnect_server().await;\n                anyhow::bail!(\"Target not found: {}\", name);\n            }\n            TargetSelection::Found(target, ssh_options) => {\n                if self.rc_state == RCState::NotInitialized {\n                    self.connect_remote(target, ssh_options).await?;\n                }\n            }\n        }\n        Ok(())\n    }\n\n    async fn connect_remote(\n        &mut self,\n        target: Target,\n        ssh_options: TargetSSHOptions,\n    ) -> Result<()> {\n        self.rc_state = RCState::Connecting;\n        self.send_command(RCCommand::Connect(ssh_options))\n            .map_err(|_| anyhow::anyhow!(\"cannot send command\"))?;\n        self.service_output.show_progress();\n        self.emit_service_message(&format!(\"Selected target: {}\", target.name))\n            .await?;\n\n        Ok(())\n    }\n\n    fn handle_event<'a>(\n        &'a mut self,\n        event: Event,\n    ) -> Pin<Box<dyn Future<Output = Result<(), WarpgateError>> + Send + 'a>> {\n        async move {\n            match event {\n                Event::Client(RCEvent::Done) => Err(WarpgateError::SessionEnd)?,\n                Event::ServerHandler(ServerHandlerEvent::Disconnect) => {\n                    Err(WarpgateError::SessionEnd)?\n                }\n                Event::Client(e) => {\n                    debug!(event=?e, \"Event\");\n                    let span = self.make_logging_span();\n                    if let Err(err) = self.handle_remote_event(e).instrument(span).await {\n                        error!(\"Client event handler error: {:?}\", err);\n                        // break;\n                    }\n                }\n                Event::ServerHandler(e) => {\n                    let span = self.make_logging_span();\n                    if let Err(err) = self.handle_server_handler_event(e).instrument(span).await {\n                        error!(\"Server event handler error: {:?}\", err);\n                        // break;\n                    }\n                }\n                Event::Command(command) => {\n                    debug!(?command, \"Session control\");\n                    if let Err(err) = self.handle_session_control(command).await {\n                        error!(\"Command handler error: {:?}\", err);\n                        // break;\n                    }\n                }\n                Event::ServiceOutput(data) => {\n                    let _ = self.emit_pty_output(&data).await;\n                }\n                Event::ConsoleInput(_) => (),\n            }\n            Ok(())\n        }\n        .boxed()\n    }\n\n    async fn handle_server_handler_event(&mut self, event: ServerHandlerEvent) -> Result<()> {\n        match event {\n            ServerHandlerEvent::Authenticated(handle) => {\n                self.session_handle = Some(handle.0);\n            }\n\n            ServerHandlerEvent::ChannelOpenSession(server_channel_id, reply) => {\n                let channel = Uuid::new_v4();\n                self.channel_map.insert(server_channel_id, channel);\n\n                info!(%channel, \"Opening session channel\");\n                return match self\n                    .send_command_and_wait(RCCommand::Channel(channel, ChannelOperation::OpenShell))\n                    .await\n                {\n                    Ok(()) => {\n                        self.all_channels.push(channel);\n                        let _ = reply.send(true);\n                        Ok(())\n                    }\n                    Err(SshClientError::Russh(russh::Error::ChannelOpenFailure(_))) => {\n                        let _ = reply.send(false);\n                        Ok(())\n                    }\n                    Err(x) => Err(x.into()),\n                };\n            }\n\n            ServerHandlerEvent::SubsystemRequest(server_channel_id, name, reply) => {\n                return match self\n                    ._channel_subsystem_request(server_channel_id, name)\n                    .await\n                {\n                    Ok(()) => {\n                        let _ = reply.send(true);\n                        Ok(())\n                    }\n                    Err(SshClientError::Russh(russh::Error::ChannelOpenFailure(_))) => {\n                        let _ = reply.send(false);\n                        Ok(())\n                    }\n                    Err(x) => Err(x.into()),\n                }\n            }\n\n            ServerHandlerEvent::PtyRequest(server_channel_id, request, _) => {\n                let channel_id = self.map_channel(&server_channel_id)?;\n                self.channel_pty_size_map\n                    .insert(channel_id, request.clone());\n                if let Some(recorder) = self.channel_recorders.get_mut(&channel_id) {\n                    if let Err(error) = recorder\n                        .write_pty_resize(request.col_width, request.row_height)\n                        .await\n                    {\n                        error!(%channel_id, ?error, \"Failed to record terminal data\");\n                        self.channel_recorders.remove(&channel_id);\n                    }\n                }\n                self.send_command_and_wait(RCCommand::Channel(\n                    channel_id,\n                    ChannelOperation::RequestPty(request),\n                ))\n                .await?;\n                let _ = self\n                    .session_handle\n                    .as_mut()\n                    .context(\"Invalid session state\")?\n                    .channel_success(server_channel_id.0)\n                    .await;\n                self.pty_channels.push(channel_id);\n            }\n\n            ServerHandlerEvent::ShellRequest(server_channel_id, reply) => {\n                let channel_id = self.map_channel(&server_channel_id)?;\n                let _ = self.maybe_connect_remote().await;\n\n                let _ = self.send_command(RCCommand::Channel(\n                    channel_id,\n                    ChannelOperation::RequestShell,\n                ));\n\n                self.start_terminal_recording(\n                    channel_id,\n                    format!(\"shell-channel-{}\", server_channel_id.0),\n                )\n                .await;\n\n                info!(%channel_id, \"Opening shell\");\n\n                let _ = self\n                    .session_handle\n                    .as_mut()\n                    .context(\"Invalid session state\")?\n                    .channel_success(server_channel_id.0)\n                    .await;\n\n                let _ = reply.send(true);\n            }\n\n            ServerHandlerEvent::AuthPublicKey(username, key, reply) => {\n                let _ = reply.send(self._auth_publickey(username, key).await);\n            }\n\n            ServerHandlerEvent::AuthPassword(username, password, reply) => {\n                let _ = reply.send(self._auth_password(username, password).await);\n            }\n\n            ServerHandlerEvent::AuthKeyboardInteractive(username, response, reply) => {\n                let _ = reply.send(self._auth_keyboard_interactive(username, response).await);\n            }\n\n            ServerHandlerEvent::Data(channel, data, _) => {\n                self._data(channel, data).await?;\n            }\n\n            ServerHandlerEvent::ExtendedData(channel, data, code, _) => {\n                self._extended_data(channel, code, data).await?;\n            }\n\n            ServerHandlerEvent::ChannelClose(channel, _) => {\n                self._channel_close(channel).await?;\n            }\n\n            ServerHandlerEvent::ChannelEof(channel, _) => {\n                self._channel_eof(channel).await?;\n            }\n\n            ServerHandlerEvent::WindowChangeRequest(channel, request, _) => {\n                self._window_change_request(channel, request).await?;\n            }\n\n            ServerHandlerEvent::Signal(channel, signal, _) => {\n                self._channel_signal(channel, signal).await?;\n            }\n\n            ServerHandlerEvent::ExecRequest(channel, data, reply) => {\n                self._channel_exec_request(channel, data).await?;\n                let _ = reply.send(true);\n            }\n\n            ServerHandlerEvent::ChannelOpenDirectTcpIp(channel, params, reply) => {\n                let _ = reply.send(self._channel_open_direct_tcpip(channel, params).await?);\n            }\n\n            ServerHandlerEvent::EnvRequest(channel, name, value, _) => {\n                self._channel_env_request(channel, name, value).await?;\n            }\n\n            ServerHandlerEvent::X11Request(channel, request, _) => {\n                self._channel_x11_request(channel, request).await?;\n            }\n\n            ServerHandlerEvent::TcpIpForward(address, port, reply) => {\n                self._tcpip_forward(address, port).await?;\n                let _ = reply.send(true);\n            }\n\n            ServerHandlerEvent::CancelTcpIpForward(address, port, reply) => {\n                self._cancel_tcpip_forward(address, port).await?;\n                let _ = reply.send(true);\n            }\n\n            ServerHandlerEvent::Disconnect => (),\n        }\n\n        Ok(())\n    }\n\n    pub async fn handle_session_control(&mut self, command: SessionHandleCommand) -> Result<()> {\n        match command {\n            SessionHandleCommand::Close => {\n                let _ = self.emit_service_message(\"Session closed by admin\").await;\n                info!(\"Session closed by admin\");\n                self.request_disconnect().await;\n                self.disconnect_server().await;\n            }\n        }\n        Ok(())\n    }\n\n    pub async fn handle_remote_event(&mut self, event: RCEvent) -> Result<()> {\n        match event {\n            RCEvent::State(state) => {\n                self.rc_state = state;\n                match &self.rc_state {\n                    RCState::Connected => {\n                        self.service_output.hide_progress().await;\n                        self.service_output.emit_output(Bytes::from(format!(\n                            \"{}{}\\r\\n\",\n                            ERASE_PROGRESS_SPINNER,\n                            Colour::Black\n                                .on(Colour::Green)\n                                .paint(\" \u2713 Warpgate connected \")\n                        )));\n                    }\n                    RCState::Disconnected => {\n                        self.service_output.hide_progress().await;\n                        self.disconnect_server().await;\n                    }\n                    _ => {}\n                }\n            }\n            RCEvent::ConnectionError(error) => {\n                self.service_output.hide_progress().await;\n\n                match error {\n                    ConnectionError::HostKeyMismatch {\n                        received_key_type,\n                        received_key_base64,\n                        known_key_type,\n                        known_key_base64,\n                    } => {\n                        let msg = format!(\n                            concat!(\n                                \"Host key doesn't match the stored one.\\n\",\n                                \"Stored key   ({}): {}\\n\",\n                                \"Received key ({}): {}\",\n                            ),\n                            known_key_type,\n                            known_key_base64,\n                            received_key_type,\n                            received_key_base64\n                        );\n                        self.emit_service_message(&msg).await?;\n                        self.emit_service_message(\n                            \"If you know that the key is correct (e.g. it has been changed),\",\n                        )\n                        .await?;\n                        self.emit_service_message(\n                        \"you can remove the old key in the Warpgate management UI and try again\",\n                    )\n                    .await?;\n                    }\n                    error => {\n                        self.service_output.emit_output(Bytes::from(format!(\n                            \"{}{} {}\\r\\n\",\n                            ERASE_PROGRESS_SPINNER,\n                            Colour::Black.on(Colour::Red).paint(\" Connection failed \"),\n                            error\n                        )));\n                    }\n                }\n            }\n            RCEvent::Error(e) => {\n                self.service_output.hide_progress().await;\n                let _ = self.emit_service_message(&format!(\"Error: {e}\")).await;\n                self.disconnect_server().await;\n            }\n            RCEvent::Output(channel, data) => {\n                if let Some(recorder) = self.channel_recorders.get_mut(&channel) {\n                    if let Err(error) = recorder\n                        .write(TerminalRecordingStreamId::Output, &data)\n                        .await\n                    {\n                        error!(%channel, ?error, \"Failed to record terminal data\");\n                        self.channel_recorders.remove(&channel);\n                    }\n                }\n\n                if let Some(recorder) = self.traffic_connection_recorders.get_mut(&channel) {\n                    if let Err(error) = recorder.write_rx(&data).await {\n                        error!(%channel, ?error, \"Failed to record traffic data\");\n                        self.traffic_connection_recorders.remove(&channel);\n                    }\n                }\n\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                if let Some(session) = self.session_handle.as_mut() {\n                    let _ = session\n                        .data(server_channel_id.0, CryptoVec::from_slice(&data))\n                        .await;\n                }\n            }\n            RCEvent::Success(channel) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .channel_success(server_channel_id.0)\n                        .await\n                        .context(\"failed to send data\")\n                })\n                .await?;\n            }\n            RCEvent::ChannelFailure(channel) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .channel_failure(server_channel_id.0)\n                        .await\n                        .context(\"failed to send data\")\n                })\n                .await?;\n            }\n            RCEvent::Close(channel) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                let _ = self\n                    .maybe_with_session(|handle| async move {\n                        handle\n                            .close(server_channel_id.0)\n                            .await\n                            .context(\"failed to close ch\")\n                    })\n                    .await;\n            }\n            RCEvent::Eof(channel) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .eof(server_channel_id.0)\n                        .await\n                        .context(\"failed to send eof\")\n                })\n                .await?;\n            }\n            RCEvent::ExitStatus(channel, code) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .exit_status_request(server_channel_id.0, code)\n                        .await\n                        .context(\"failed to send exit status\")\n                })\n                .await?;\n            }\n            RCEvent::ExitSignal {\n                channel,\n                signal_name,\n                core_dumped,\n                error_message,\n                lang_tag,\n            } => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .exit_signal_request(\n                            server_channel_id.0,\n                            signal_name,\n                            core_dumped,\n                            error_message,\n                            lang_tag,\n                        )\n                        .await\n                        .context(\"failed to send exit status\")?;\n                    Ok(())\n                })\n                .await?;\n            }\n            RCEvent::Done => {}\n            RCEvent::ExtendedData { channel, data, ext } => {\n                if let Some(recorder) = self.channel_recorders.get_mut(&channel) {\n                    if let Err(error) = recorder\n                        .write(TerminalRecordingStreamId::Error, &data)\n                        .await\n                    {\n                        error!(%channel, ?error, \"Failed to record session data\");\n                        self.channel_recorders.remove(&channel);\n                    }\n                }\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .extended_data(server_channel_id.0, ext, CryptoVec::from_slice(&data))\n                        .await\n                        .map_err(|_| ())\n                        .context(\"failed to send extended data\")?;\n                    Ok(())\n                })\n                .await?;\n            }\n            RCEvent::HostKeyReceived(key) => {\n                self.emit_service_message(&format!(\n                    \"Host key ({}): {}\",\n                    key.name(),\n                    key.public_key_base64()\n                ))\n                .await?;\n            }\n            RCEvent::HostKeyUnknown(key, reply) => {\n                self.handle_unknown_host_key(key, reply).await?;\n            }\n            RCEvent::ForwardedTcpIp(id, params) => {\n                if let Some(session) = &mut self.session_handle {\n                    let server_channel = session\n                        .channel_open_forwarded_tcpip(\n                            params.connected_address,\n                            params.connected_port,\n                            params.originator_address.clone(),\n                            params.originator_port,\n                        )\n                        .await?;\n\n                    self.channel_map\n                        .insert(ServerChannelId(server_channel.id()), id);\n                    self.all_channels.push(id);\n\n                    let recorder = self\n                        .traffic_recorder_for(\n                            &params.originator_address,\n                            params.originator_port,\n                            \"forwarded-tcpip\",\n                        )\n                        .await;\n                    if let Some(recorder) = recorder {\n                        #[allow(clippy::unwrap_used)]\n                        let mut recorder = recorder.connection(TrafficConnectionParams {\n                            dst_addr: Ipv4Addr::from_str(\"2.2.2.2\").unwrap(),\n                            dst_port: params.connected_port as u16,\n                            src_addr: Ipv4Addr::from_str(\"1.1.1.1\").unwrap(),\n                            src_port: params.originator_port as u16,\n                        });\n                        if let Err(error) = recorder.write_connection_setup().await {\n                            error!(channel=%id, ?error, \"Failed to record connection setup\");\n                        }\n                        self.traffic_connection_recorders.insert(id, recorder);\n                    }\n                }\n            }\n            RCEvent::X11(id, originator_address, originator_port) => {\n                if let Some(session) = &mut self.session_handle {\n                    let server_channel = session\n                        .channel_open_x11(originator_address, originator_port)\n                        .await?;\n\n                    self.channel_map\n                        .insert(ServerChannelId(server_channel.id()), id);\n                    self.all_channels.push(id);\n                }\n            }\n        }\n        Ok(())\n    }\n\n    async fn handle_unknown_host_key(\n        &mut self,\n        key: PublicKey,\n        reply: oneshot::Sender<bool>,\n    ) -> Result<()> {\n        self.service_output.hide_progress().await;\n\n        let mode = self\n            .services\n            .config\n            .lock()\n            .await\n            .store\n            .ssh\n            .host_key_verification;\n\n        if mode == SshHostKeyVerificationMode::AutoAccept {\n            let _ = reply.send(true);\n            info!(\"Accepted untrusted host key (auto-accept is enabled)\");\n            return Ok(());\n        }\n\n        if mode == SshHostKeyVerificationMode::AutoReject {\n            let _ = reply.send(false);\n            info!(\"Rejected untrusted host key (auto-reject is enabled)\");\n            return Ok(());\n        }\n\n        if self.pty_channels.is_empty() {\n            warn!(\"Target host key is not trusted, but there is no active PTY channel to show the trust prompt on.\");\n            warn!(\n                \"Connect to this target with an interactive session once to accept the host key.\"\n            );\n            self.request_disconnect().await;\n            anyhow::bail!(\"No PTY channel to show an interactive prompt on\")\n        }\n\n        self.emit_service_message(&format!(\n            \"There is no trusted {} key for this host.\",\n            key.name()\n        ))\n        .await?;\n        self.emit_service_message(\"Trust this key? (y/n)\").await?;\n\n        let mut sub = self\n            .hub\n            .subscribe(|e| matches!(e, Event::ConsoleInput(_)))\n            .await;\n\n        let mut service_output = self.service_output.clone();\n        tokio::spawn(async move {\n            loop {\n                match sub.recv().await {\n                    Some(Event::ConsoleInput(data)) => {\n                        if data == \"y\".as_bytes() {\n                            let _ = reply.send(true);\n                            break;\n                        } else if data == \"n\".as_bytes() {\n                            let _ = reply.send(false);\n                            break;\n                        }\n                    }\n                    None => break,\n                    _ => (),\n                }\n            }\n            service_output.show_progress();\n        });\n\n        Ok(())\n    }\n\n    async fn maybe_with_session<'a, FN, FT, R>(&'a mut self, f: FN) -> Result<Option<R>>\n    where\n        FN: FnOnce(&'a mut russh::server::Handle) -> FT + 'a,\n        FT: futures::Future<Output = Result<R>>,\n    {\n        if let Some(handle) = &mut self.session_handle {\n            return Ok(Some(f(handle).await?));\n        }\n        Ok(None)\n    }\n\n    async fn _channel_open_direct_tcpip(\n        &mut self,\n        channel: ServerChannelId,\n        params: DirectTCPIPParams,\n    ) -> Result<bool> {\n        let uuid = Uuid::new_v4();\n        self.channel_map.insert(channel, uuid);\n\n        info!(%channel, \"Opening direct TCP/IP channel from {}:{} to {}:{}\", params.originator_address, params.originator_port, params.host_to_connect, params.port_to_connect);\n\n        let _ = self.maybe_connect_remote().await;\n\n        match self\n            .send_command_and_wait(RCCommand::Channel(\n                uuid,\n                ChannelOperation::OpenDirectTCPIP(params.clone()),\n            ))\n            .await\n        {\n            Ok(()) => {\n                self.all_channels.push(uuid);\n\n                let recorder = self\n                    .traffic_recorder_for(\n                        &params.host_to_connect,\n                        params.port_to_connect,\n                        \"direct-tcpip\",\n                    )\n                    .await;\n                if let Some(recorder) = recorder {\n                    #[allow(clippy::unwrap_used)]\n                    let mut recorder = recorder.connection(TrafficConnectionParams {\n                        dst_addr: Ipv4Addr::from_str(\"2.2.2.2\").unwrap(),\n                        dst_port: params.port_to_connect as u16,\n                        src_addr: Ipv4Addr::from_str(\"1.1.1.1\").unwrap(),\n                        src_port: params.originator_port as u16,\n                    });\n                    if let Err(error) = recorder.write_connection_setup().await {\n                        error!(%channel, ?error, \"Failed to record connection setup\");\n                    }\n                    self.traffic_connection_recorders.insert(uuid, recorder);\n                }\n\n                Ok(true)\n            }\n            Err(SshClientError::Russh(russh::Error::ChannelOpenFailure(_))) => Ok(false),\n            Err(x) => Err(x.into()),\n        }\n    }\n\n    async fn _window_change_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        request: PtyRequest,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        self.channel_pty_size_map\n            .insert(channel_id, request.clone());\n        if let Some(recorder) = self.channel_recorders.get_mut(&channel_id) {\n            if let Err(error) = recorder\n                .write_pty_resize(request.col_width, request.row_height)\n                .await\n            {\n                error!(%channel_id, ?error, \"Failed to record terminal data\");\n                self.channel_recorders.remove(&channel_id);\n            }\n        }\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::ResizePty(request),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    async fn _channel_exec_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        data: Bytes,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        match std::str::from_utf8(&data) {\n            Err(e) => {\n                error!(channel=%channel_id, ?data, \"Requested exec - invalid UTF-8\");\n                anyhow::bail!(e)\n            }\n            Ok::<&str, _>(command) => {\n                debug!(channel=%channel_id, %command, \"Requested exec\");\n                let _ = self.maybe_connect_remote().await;\n                let _ = self.send_command(RCCommand::Channel(\n                    channel_id,\n                    ChannelOperation::RequestExec(command.to_string()),\n                ));\n            }\n        }\n\n        self.start_terminal_recording(channel_id, format!(\"exec-channel-{}\", server_channel_id.0))\n            .await;\n        Ok(())\n    }\n\n    async fn start_terminal_recording(&mut self, channel_id: Uuid, name: String) {\n        match async {\n            let mut recorder = self\n                .services\n                .recordings\n                .lock()\n                .await\n                .start::<TerminalRecorder>(&self.id, name)\n                .await?;\n            if let Some(request) = self.channel_pty_size_map.get(&channel_id) {\n                recorder\n                    .write_pty_resize(request.col_width, request.row_height)\n                    .await?;\n            }\n            Ok::<_, recordings::Error>(recorder)\n        }\n        .await\n        {\n            Ok(recorder) => {\n                self.channel_recorders.insert(channel_id, recorder);\n            }\n            Err(error) => match error {\n                recordings::Error::Disabled => (),\n                error => error!(channel=%channel_id, ?error, \"Failed to start recording\"),\n            },\n        }\n    }\n\n    async fn _channel_x11_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        request: X11Request,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, \"Requested X11\");\n        let _ = self.maybe_connect_remote().await;\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::RequestX11(request),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    async fn _channel_env_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        name: String,\n        value: String,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, %name, %value, \"Environment\");\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::RequestEnv(name, value),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    async fn traffic_recorder_for(\n        &mut self,\n        host: &str,\n        port: u32,\n        tag: &str,\n    ) -> Option<&mut TrafficRecorder> {\n        let host = host.to_owned();\n        if let Vacant(e) = self.traffic_recorders.entry((host.clone(), port)) {\n            match self\n                .services\n                .recordings\n                .lock()\n                .await\n                .start(&self.id, format!(\"{tag}-{host}-{port}\"))\n                .await\n            {\n                Ok(recorder) => {\n                    e.insert(recorder);\n                }\n                Err(error) => {\n                    error!(%host, %port, ?error, \"Failed to start recording\");\n                }\n            }\n        }\n        self.traffic_recorders.get_mut(&(host, port))\n    }\n\n    pub async fn _channel_subsystem_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        name: String,\n    ) -> Result<(), SshClientError> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        info!(channel=%channel_id, \"Requesting subsystem {}\", &name);\n        let _ = self.maybe_connect_remote().await;\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::RequestSubsystem(name),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    async fn _data(&mut self, server_channel_id: ServerChannelId, data: Bytes) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%server_channel_id.0, ?data, \"Data\");\n        if self.rc_state == RCState::Connecting && data.first() == Some(&3) {\n            info!(channel=%channel_id, \"User requested connection abort (Ctrl-C)\");\n            self.request_disconnect().await;\n            return Ok(());\n        }\n\n        if let Some(recorder) = self.channel_recorders.get_mut(&channel_id) {\n            if let Err(error) = recorder\n                .write(TerminalRecordingStreamId::Input, &data)\n                .await\n            {\n                error!(channel=%channel_id, ?error, \"Failed to record terminal data\");\n                self.channel_recorders.remove(&channel_id);\n            }\n        }\n\n        if let Some(recorder) = self.traffic_connection_recorders.get_mut(&channel_id) {\n            if let Err(error) = recorder.write_tx(&data).await {\n                error!(channel=%channel_id, ?error, \"Failed to record traffic data\");\n                self.traffic_connection_recorders.remove(&channel_id);\n            }\n        }\n\n        if self.pty_channels.contains(&channel_id) {\n            let _ = self\n                .event_sender\n                .send_once(Event::ConsoleInput(data.clone()))\n                .await;\n        }\n\n        let _ = self.send_command(RCCommand::Channel(channel_id, ChannelOperation::Data(data)));\n        Ok(())\n    }\n\n    async fn _extended_data(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        code: u32,\n        data: Bytes,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%server_channel_id.0, ?data, \"Data\");\n        let _ = self.send_command(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::ExtendedData { ext: code, data },\n        ));\n        Ok(())\n    }\n\n    async fn _tcpip_forward(&mut self, address: String, port: u32) -> Result<()> {\n        info!(%address, %port, \"Remote port forwarding requested\");\n        let _ = self.maybe_connect_remote().await;\n        self.send_command_and_wait(RCCommand::ForwardTCPIP(address, port))\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\n    pub async fn _cancel_tcpip_forward(&mut self, address: String, port: u32) -> Result<()> {\n        info!(%address, %port, \"Remote port forwarding cancelled\");\n        self.send_command_and_wait(RCCommand::CancelTCPIPForward(address, port))\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\n    async fn _auth_publickey(\n        &mut self,\n        ssh_username: Secret<String>,\n        key: PublicKey,\n    ) -> russh::server::Auth {\n        let selector: AuthSelector = ssh_username.expose_secret().into();\n\n        info!(\n            \"Public key auth as {:?} with key {}\",\n            selector,\n            key.public_key_base64()\n        );\n\n        let mut keys = vec![key.clone()];\n        // Try all supported hash algorithms\n        if let PublicKey::RSA { key, hash } = &key {\n            for h in [\n                SignatureHash::SHA1,\n                SignatureHash::SHA2_256,\n                SignatureHash::SHA2_512,\n            ] {\n                if &h != hash {\n                    keys.push(PublicKey::RSA {\n                        key: key.clone(),\n                        hash: h,\n                    });\n                }\n            }\n        }\n\n        let mut result = Ok(AuthResult::Rejected);\n        for key in keys {\n            result = self\n                .try_auth(\n                    &selector,\n                    Some(AuthCredential::PublicKey {\n                        kind: key.name().to_string(),\n                        public_key_bytes: Bytes::from(key.public_key_bytes()),\n                    }),\n                )\n                .await;\n            if let Ok(AuthResult::Accepted { .. }) = result {\n                break;\n            }\n        }\n\n        match result {\n            Ok(AuthResult::Accepted { .. }) => russh::server::Auth::Accept,\n            Ok(AuthResult::Rejected) => russh::server::Auth::Reject {\n                proceed_with_methods: Some(MethodSet::all()),\n            },\n            Ok(AuthResult::Need(kinds)) => russh::server::Auth::Reject {\n                proceed_with_methods: Some(self.get_remaining_auth_methods(kinds)),\n            },\n            Err(error) => {\n                error!(?error, \"Failed to verify credentials\");\n                russh::server::Auth::Reject {\n                    proceed_with_methods: None,\n                }\n            }\n        }\n    }\n\n    async fn _auth_password(\n        &mut self,\n        ssh_username: Secret<String>,\n        password: Secret<String>,\n    ) -> russh::server::Auth {\n        let selector: AuthSelector = ssh_username.expose_secret().into();\n        info!(\"Password auth as {:?}\", selector);\n\n        match self\n            .try_auth(&selector, Some(AuthCredential::Password(password)))\n            .await\n        {\n            Ok(AuthResult::Accepted { .. }) => russh::server::Auth::Accept,\n            Ok(AuthResult::Rejected) => russh::server::Auth::Reject {\n                proceed_with_methods: None,\n            },\n            Ok(AuthResult::Need(_)) => russh::server::Auth::Reject {\n                proceed_with_methods: None,\n            },\n            Err(error) => {\n                error!(?error, \"Failed to verify credentials\");\n                russh::server::Auth::Reject {\n                    proceed_with_methods: None,\n                }\n            }\n        }\n    }\n\n    async fn _auth_keyboard_interactive(\n        &mut self,\n        ssh_username: Secret<String>,\n        response: Option<Secret<String>>,\n    ) -> russh::server::Auth {\n        let selector: AuthSelector = ssh_username.expose_secret().into();\n        info!(\"Keyboard-interactive auth as {:?}\", selector);\n\n        let cred;\n        match &mut self.keyboard_interactive_state {\n            KeyboardInteractiveState::None => {\n                cred = None;\n            }\n            KeyboardInteractiveState::OtpRequested => {\n                cred = response.map(AuthCredential::Otp);\n            }\n            KeyboardInteractiveState::WebAuthRequested(event) => {\n                cred = None;\n                let _ = event.recv().await;\n                // the auth state has been updated by now\n            }\n        }\n\n        self.keyboard_interactive_state = KeyboardInteractiveState::None;\n\n        match self.try_auth(&selector, cred).await {\n            Ok(AuthResult::Accepted { .. }) => russh::server::Auth::Accept,\n            Ok(AuthResult::Rejected) => russh::server::Auth::Reject {\n                proceed_with_methods: None,\n            },\n            Ok(AuthResult::Need(kinds)) => {\n                if kinds.contains(&CredentialKind::Totp) {\n                    self.keyboard_interactive_state = KeyboardInteractiveState::OtpRequested;\n                    russh::server::Auth::Partial {\n                        name: Cow::Borrowed(\"Two-factor authentication\"),\n                        instructions: Cow::Borrowed(\"\"),\n                        prompts: Cow::Owned(vec![(Cow::Borrowed(\"One-time password: \"), true)]),\n                    }\n                } else if kinds.contains(&CredentialKind::WebUserApproval) {\n                    let Some(auth_state) = self.auth_state.as_ref() else {\n                        return russh::server::Auth::Reject { proceed_with_methods: None};\n                    };\n                    let identification_string =\n                        auth_state.lock().await.identification_string().to_owned();\n                    let auth_state_id = *auth_state.lock().await.id();\n                    let event = self\n                        .services\n                        .auth_state_store\n                        .lock()\n                        .await\n                        .subscribe(auth_state_id);\n                    self.keyboard_interactive_state =\n                        KeyboardInteractiveState::WebAuthRequested(event);\n\n                    let mut login_url = match self\n                        .services\n                        .config\n                        .lock()\n                        .await\n                        .construct_external_url(None)\n                    {\n                        Ok(url) => url,\n                        Err(error) => {\n                            error!(?error, \"Failed to construct external URL\");\n                            return russh::server::Auth::Reject {\n                                proceed_with_methods: None,\n                            };\n                        }\n                    };\n\n                    login_url.set_path(\"@warpgate\");\n                    login_url.set_fragment(Some(&format!(\"/login/{auth_state_id}\")));\n\n                    russh::server::Auth::Partial {\n                        name: Cow::Owned(format!(\n                            concat!(\n                            \"-----------------------------------------------------------------------\\n\",\n                            \"Warpgate authentication: please open the following URL in your browser:\\n\",\n                            \"{}\\n\\n\",\n                            \"Make sure you're seeing this security key: {}\\n\",\n                            \"-----------------------------------------------------------------------\\n\"\n                        ),\n                            login_url,\n                            identification_string\n                                .chars()\n                                .map(|x| x.to_string())\n                                .collect::<Vec<_>>()\n                                .join(\" \")\n                        )),\n                        instructions: Cow::Borrowed(\"\"),\n                        prompts: Cow::Owned(vec![(Cow::Borrowed(\"Press Enter when done: \"), true)]),\n                    }\n                } else {\n                    russh::server::Auth::Reject {\n                        proceed_with_methods: None,\n                    }\n                }\n            }\n            Err(error) => {\n                error!(?error, \"Failed to verify credentials\");\n                russh::server::Auth::Reject {\n                    proceed_with_methods: None,\n                }\n            }\n        }\n    }\n\n    fn get_remaining_auth_methods(&self, kinds: HashSet<CredentialKind>) -> MethodSet {\n        let mut m = MethodSet::empty();\n        for kind in kinds {\n            match kind {\n                CredentialKind::Password => m.insert(MethodSet::PASSWORD),\n                CredentialKind::Totp => m.insert(MethodSet::KEYBOARD_INTERACTIVE),\n                CredentialKind::WebUserApproval => m.insert(MethodSet::KEYBOARD_INTERACTIVE),\n                CredentialKind::PublicKey => m.insert(MethodSet::PUBLICKEY),\n                CredentialKind::Sso => m.insert(MethodSet::KEYBOARD_INTERACTIVE),\n            }\n        }\n        m\n    }\n\n    async fn try_auth(\n        &mut self,\n        selector: &AuthSelector,\n        credential: Option<AuthCredential>,\n    ) -> Result<AuthResult> {\n        match selector {\n            AuthSelector::User {\n                username,\n                target_name,\n            } => {\n                let cp = self.services.config_provider.clone();\n\n                let state_arc = self.get_auth_state(username).await?;\n                let mut state = state_arc.lock().await;\n\n                if let Some(credential) = credential {\n                    if cp\n                        .lock()\n                        .await\n                        .validate_credential(username, &credential)\n                        .await?\n                    {\n                        state.add_valid_credential(credential);\n                    }\n                }\n\n                let user_auth_result = state.verify();\n\n                match user_auth_result {\n                    AuthResult::Accepted { username } => {\n                        self.services\n                            .auth_state_store\n                            .lock()\n                            .await\n                            .complete(state.id())\n                            .await;\n                        let target_auth_result = {\n                            self.services\n                                .config_provider\n                                .lock()\n                                .await\n                                .authorize_target(&username, target_name)\n                                .await?\n                        };\n                        if !target_auth_result {\n                            warn!(\n                                \"Target {} not authorized for user {}\",\n                                target_name, username\n                            );\n                            return Ok(AuthResult::Rejected);\n                        }\n                        self._auth_accept(&username, target_name).await?;\n                        Ok(AuthResult::Accepted { username })\n                    }\n                    x => Ok(x),\n                }\n            }\n            AuthSelector::Ticket { secret } => {\n                match authorize_ticket(&self.services.db, secret).await? {\n                    Some(ticket) => {\n                        info!(\"Authorized for {} with a ticket\", ticket.target);\n                        consume_ticket(&self.services.db, &ticket.id).await?;\n                        self._auth_accept(&ticket.username, &ticket.target).await?;\n                        Ok(AuthResult::Accepted {\n                            username: ticket.username.clone(),\n                        })\n                    }\n                    None => Ok(AuthResult::Rejected),\n                }\n            }\n        }\n    }\n\n    async fn _auth_accept(\n        &mut self,\n        username: &str,\n        target_name: &str,\n    ) -> Result<(), WarpgateError> {\n        let _ = self\n            .server_handle\n            .lock()\n            .await\n            .set_username(username.to_string())\n            .await;\n        self.username = Some(username.to_string());\n\n        let target = {\n            self.services\n                .config_provider\n                .lock()\n                .await\n                .list_targets()\n                .await?\n                .iter()\n                .filter_map(|t| match t.options {\n                    TargetOptions::Ssh(ref options) => Some((t, options)),\n                    _ => None,\n                })\n                .find(|(t, _)| t.name == target_name)\n                .map(|(t, opt)| (t.clone(), opt.clone()))\n        };\n\n        let Some((target, mut ssh_options)) = target else {\n            self.target = TargetSelection::NotFound(target_name.to_string());\n            warn!(\"Selected target not found\");\n            return Ok(());\n        };\n\n        // Forward username from the authenticated user to the target, if target has no username\n        if ssh_options.username.is_empty() {\n            ssh_options.username = username.to_string();\n        }\n\n        let _ = self.server_handle.lock().await.set_target(&target).await;\n        self.target = TargetSelection::Found(target, ssh_options);\n        Ok(())\n    }\n\n    async fn _channel_close(&mut self, server_channel_id: ServerChannelId) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, \"Closing channel\");\n        self.send_command_and_wait(RCCommand::Channel(channel_id, ChannelOperation::Close))\n            .await?;\n        Ok(())\n    }\n\n    async fn _channel_eof(&mut self, server_channel_id: ServerChannelId) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, \"EOF\");\n        let _ = self.send_command(RCCommand::Channel(channel_id, ChannelOperation::Eof));\n        Ok(())\n    }\n\n    pub async fn _channel_signal(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        signal: Sig,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, ?signal, \"Signal\");\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::Signal(signal),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    fn send_command(&mut self, command: RCCommand) -> Result<(), RCCommand> {\n        self.rc_tx.send((command, None)).map_err(|e| e.0 .0)\n    }\n\n    async fn send_command_and_wait(&mut self, command: RCCommand) -> Result<(), SshClientError> {\n        let (tx, rx) = oneshot::channel();\n        let mut cmd = match self.rc_tx.send((command, Some(tx))) {\n            Ok(_) => PendingCommand::Waiting(rx),\n            Err(_) => PendingCommand::Failed,\n        };\n\n        loop {\n            tokio::select! {\n                result = &mut cmd => {\n                    return result\n                }\n                event = self.get_next_event() => {\n                    match event {\n                        Some(event) => {\n                            self.handle_event(event).await.map_err(SshClientError::from)?\n                        }\n                        None => {Err(SshClientError::MpscError)?}\n                    };\n                }\n            }\n        }\n    }\n\n    pub async fn _disconnect(&mut self) {\n        debug!(\"Client disconnect requested\");\n        self.request_disconnect().await;\n    }\n\n    async fn request_disconnect(&mut self) {\n        debug!(\"Disconnecting\");\n        let _ = self.rc_abort_tx.send(());\n        if self.rc_state != RCState::NotInitialized && self.rc_state != RCState::Disconnected {\n            let _ = self.send_command(RCCommand::Disconnect);\n        }\n    }\n\n    async fn disconnect_server(&mut self) {\n        let all_channels = std::mem::take(&mut self.all_channels);\n        let channels = all_channels\n            .into_iter()\n            .map(|x| self.map_channel_reverse(&x))\n            .filter_map(|x| x.ok())\n            .collect::<Vec<_>>();\n\n        let _ = self\n            .maybe_with_session(|handle| async move {\n                for ch in channels {\n                    let _ = handle.close(ch.0).await;\n                }\n                Ok(())\n            })\n            .await;\n\n        self.session_handle = None;\n    }\n}\n\nimpl Drop for ServerSession {\n    fn drop(&mut self) {\n        let _ = self.rc_abort_tx.send(());\n        info!(\"Closed session\");\n        debug!(\"Dropped\");\n    }\n}\n\npub enum PendingCommand {\n    Waiting(oneshot::Receiver<Result<(), SshClientError>>),\n    Failed,\n}\n\nimpl Future for PendingCommand {\n    type Output = Result<(), SshClientError>;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut std::task::Context<'_>) -> Poll<Self::Output> {\n        match self.get_mut() {\n            PendingCommand::Waiting(ref mut rx) => match Pin::new(rx).poll(cx) {\n                Poll::Ready(result) => {\n                    Poll::Ready(result.unwrap_or(Err(SshClientError::MpscError)))\n                }\n                Poll::Pending => Poll::Pending,\n            },\n            PendingCommand::Failed => Poll::Ready(Err(SshClientError::MpscError)),\n        }\n    }\n}\n"], "fixing_code": ["# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"aes\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"433cfd6710c9986c576a25ca913c39d66a6474107b406f34f91d4a8923395241\"\ndependencies = [\n \"cfg-if\",\n \"cipher\",\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"aes-gcm\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82e1366e0c69c9f927b1fa5ce2c7bf9eafc8f9268c0b9800729e8b267612447c\"\ndependencies = [\n \"aead\",\n \"aes\",\n \"cipher\",\n \"ctr\",\n \"ghash\",\n \"subtle\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47\"\ndependencies = [\n \"getrandom 0.2.9\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c99f64d1e06488f620f932677e24bc6e2897582980441ae90a671415bd7ec2f\"\ndependencies = [\n \"cfg-if\",\n \"getrandom 0.2.9\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"aliasable\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"250f629c0161ad8107cf89319e990051fae62832fd343083bea452d93e2205fd\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ca84f3628370c59db74ee214b3263d58f9aadd9b4fe7e711fd87dc452b7f163\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is-terminal\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a30da5c5f2d5e72842e00bcb57657162cdabef0931f40e2deb9b4140440cecd\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"938874ff5980b03a87c5524b3ae5b59cf99b1d6bc836848df7bc5ada9643c333\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ca11d4be1bab0c8bc8734a9aa7bf4ee8316d462a08c6ac5052f888fef5b494b\"\ndependencies = [\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"180abfa45703aebe0093f79badacc01b8fd4ea2e35118747e5811127f926e188\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.70\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7de8ce5e0f9f8d88245311066a578d72b7af3e7088f32783804676302df237e4\"\ndependencies = [\n \"backtrace\",\n]\n\n[[package]]\nname = \"argon2\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db4ce4441f99dbd377ca8a8f57b698c44d0d6e712d8329b5040da5a64aa1ce73\"\ndependencies = [\n \"base64ct\",\n \"blake2\",\n \"password-hash 0.4.2\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6\"\n\n[[package]]\nname = \"async-attributes\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3203e79f4dd9bdda415ed03cf14dae5a2bf775c683a00f94e9cd1faf0f596e5\"\ndependencies = [\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"async-channel\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf46fee83e5ccffc220104713af3292ff9bc7c64c7de289f66dae8e38d826833\"\ndependencies = [\n \"concurrent-queue\",\n \"event-listener\",\n \"futures-core\",\n]\n\n[[package]]\nname = \"async-executor\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fa3dc5f2a8564f07759c008b9109dc0d39de92a88d5588b8a5036d286383afb\"\ndependencies = [\n \"async-lock\",\n \"async-task\",\n \"concurrent-queue\",\n \"fastrand\",\n \"futures-lite\",\n \"slab\",\n]\n\n[[package]]\nname = \"async-global-executor\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1b6f5d7df27bd294849f8eec66ecfc63d11814df7a4f5d74168a2394467b776\"\ndependencies = [\n \"async-channel\",\n \"async-executor\",\n \"async-io\",\n \"async-lock\",\n \"blocking\",\n \"futures-lite\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"async-io\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fc5b45d93ef0529756f812ca52e44c221b35341892d3dcc34132ac02f3dd2af\"\ndependencies = [\n \"async-lock\",\n \"autocfg\",\n \"cfg-if\",\n \"concurrent-queue\",\n \"futures-lite\",\n \"log\",\n \"parking\",\n \"polling\",\n \"rustix\",\n \"slab\",\n \"socket2\",\n \"waker-fn\",\n]\n\n[[package]]\nname = \"async-lock\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa24f727524730b077666307f2734b4a1a1c57acb79193127dcc8914d5242dd7\"\ndependencies = [\n \"event-listener\",\n]\n\n[[package]]\nname = \"async-std\"\nversion = \"1.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62565bb4402e926b29953c785397c6dc0391b7b446e45008b0049eb43cec6f5d\"\ndependencies = [\n \"async-attributes\",\n \"async-channel\",\n \"async-global-executor\",\n \"async-io\",\n \"async-lock\",\n \"crossbeam-utils\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-lite\",\n \"gloo-timers\",\n \"kv-log-macro\",\n \"log\",\n \"memchr\",\n \"once_cell\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n \"wasm-bindgen-futures\",\n]\n\n[[package]]\nname = \"async-stream\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd56dd203fef61ac097dd65721a419ddccb106b2d2b70ba60a6b529f03961a51\"\ndependencies = [\n \"async-stream-impl\",\n \"futures-core\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"async-stream-impl\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16e62a023e7c117e27523144c5d2459f4397fcc3cab0085af8e2224f643a0193\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"async-task\"\nversion = \"4.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc7ab41815b3c653ccd2978ec3255c81349336702dfdf62ee6f7069b12a3aae\"\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.73\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc00ceb34980c03614e35a3a4e218276a0a824e911d07651cd0d858a51e8c0f0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"atoi\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f28d99ec8bfea296261ca1af174f24225171fea9664ba9003cbebee704810528\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"atomic-waker\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1181e1e0d1fce796a03db1ae795d67167da795f9cf4a39c37589e85ef57f26d3\"\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi 0.1.19\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"axum\"\nversion = \"0.6.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"113713495a32dd0ab52baf5c10044725aa3aec00b31beda84218e469029b72a3\"\ndependencies = [\n \"async-trait\",\n \"axum-core\",\n \"bitflags 1.3.2\",\n \"bytes\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"itoa\",\n \"matchit\",\n \"memchr\",\n \"mime\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"rustversion\",\n \"serde\",\n \"sync_wrapper\",\n \"tower\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"axum-core\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"759fa577a247914fd3f7f76d62972792636412fbfd634cd452f6a385a74d2d2c\"\ndependencies = [\n \"async-trait\",\n \"bytes\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"mime\",\n \"rustversion\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.67\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"233d376d6d185f2a3093e58f283f60f880315b6c60075b01f36b3b85154564ca\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"base32\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23ce669cd6c8588f79e15cf450314f9638f967fc5770ff1c7c1deb0925ea7cfa\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ea22880d78093b0cbe17c89f64a7d457941e65759157ec6cb31a31d652b05e5\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4a4ddaa51a5bc52a6948f74c06d20aaaddb71924eab79b8c97a8c556e942d6a\"\n\n[[package]]\nname = \"base64ct\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b\"\n\n[[package]]\nname = \"bcrypt-pbkdf\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6aeac2e1fe888769f34f05ac343bbef98b14d1ffb292ab69d4608b3abc86f2a2\"\ndependencies = [\n \"blowfish\",\n \"pbkdf2 0.12.2\",\n \"sha2\",\n]\n\n[[package]]\nname = \"bigdecimal\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6aaf33151a6429fe9211d1b276eafdf70cdff28b071e76c0b0e1503221ea3744\"\ndependencies = [\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"bimap\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"230c5f1ca6a325a32553f8640d31ac9b49f2411e901e427570154868b46da4f7\"\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.59.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bd2a9a458e8f4304c52c43ebb0cfbd520289f8379a52e329a38afda99bf8eb8\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cexpr\",\n \"clang-sys\",\n \"lazy_static\",\n \"lazycell\",\n \"peeking_take_while\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n]\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"630be753d4e58660abd17930c71b647fe46c27ea6b63cc59e1e3851406972e42\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"block-padding\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8894febbff9f758034a5b8e12d87918f56dfc64a8e1fe757d65e29041538d93\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"blocking\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77231a1c8f801696fc0123ec6150ce92cffb8e164a02afb9c8ddee0e9b65ad65\"\ndependencies = [\n \"async-channel\",\n \"async-lock\",\n \"async-task\",\n \"atomic-waker\",\n \"fastrand\",\n \"futures-lite\",\n \"log\",\n]\n\n[[package]]\nname = \"blowfish\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e412e2cd0f2b2d93e02543ceae7917b3c70331573df19ee046bcbc35e45e87d7\"\ndependencies = [\n \"byteorder\",\n \"cipher\",\n]\n\n[[package]]\nname = \"borsh\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4114279215a005bc675e386011e594e1d9b800918cea18fcadadcce864a2046b\"\ndependencies = [\n \"borsh-derive\",\n \"hashbrown 0.13.2\",\n]\n\n[[package]]\nname = \"borsh-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0754613691538d51f329cce9af41d7b7ca150bc973056f1156611489475f54f7\"\ndependencies = [\n \"borsh-derive-internal\",\n \"borsh-schema-derive-internal\",\n \"proc-macro-crate 0.1.5\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"borsh-derive-internal\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afb438156919598d2c7bad7e1c0adf3d26ed3840dbc010db1a882a65583ca2fb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"borsh-schema-derive-internal\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"634205cc43f74a1b9046ef87c4540ebda95696ec0f315024860cad7c5b0f5ccd\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d261e256854913907f67ed06efbc3338dfe6179796deefc1ff763fc1aee5535\"\n\n[[package]]\nname = \"bytecheck\"\nversion = \"0.6.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13fe11640a23eb24562225322cd3e452b93a3d4091d62fab69c70542fcd17d1f\"\ndependencies = [\n \"bytecheck_derive\",\n \"ptr_meta\",\n \"simdutf8\",\n]\n\n[[package]]\nname = \"bytecheck_derive\"\nversion = \"0.6.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e31225543cb46f81a7e224762764f4a6a0f097b1db0b175f69e8065efaa42de5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89b2fd2a0dcf38d7971e2194b6b6eebab45ae01067456a7fd93d5547a61b70be\"\n\n[[package]]\nname = \"cbc\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b52a9543ae338f279b96b0b9fed9c8093744685043739079ce85cd58f289a6\"\ndependencies = [\n \"cipher\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chacha20\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3613f74bd2eac03dad61bd53dbe620703d4371614fe0bc3b9f04dd36fe4e818\"\ndependencies = [\n \"cfg-if\",\n \"cipher\",\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e3c5919066adf22df73762e50cffcde3a758f2a848b113b586d1f86728b673b\"\ndependencies = [\n \"iana-time-zone\",\n \"num-integer\",\n \"num-traits\",\n \"serde\",\n \"winapi\",\n]\n\n[[package]]\nname = \"cipher\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad\"\ndependencies = [\n \"crypto-common\",\n \"inout\",\n]\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c688fc74432808e3eb684cae8830a86be1d66a2bd58e1f248ed0960a590baf6f\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"3.2.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71655c45cb9845d3270c9d6df84ebe72b4dad3c2ba3f7023ad47c144e4e473a5\"\ndependencies = [\n \"atty\",\n \"bitflags 1.3.2\",\n \"clap_derive 3.2.18\",\n \"clap_lex 0.2.4\",\n \"indexmap 1.9.3\",\n \"once_cell\",\n \"strsim\",\n \"termcolor\",\n \"textwrap\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c27cdf28c0f604ba3f512b0c9a409f8de8513e4816705deb0498b627e7c3a3fd\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive 4.3.12\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08a9f1ab5e9f01a9b81f202e8562eb9a10de70abf9eaeac1be465c28b75aa4aa\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex 0.5.0\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"3.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea0c8bce528c4be4da13ea6fead8965e95b6073585a2f05204bd8f4119f82a65\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.3.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54a9bb5758fc5dfe728d1019941681eccaf0cf8a4189b692a0ee2f2ecf90a050\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2850f2f5a82cbf437dd5af4d49848fbdfc27c157c3d010345776f952765261c5\"\ndependencies = [\n \"os_str_bytes\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2da6da31387c7e4ef160ffab6d5e7f00c42626fe39aea70a7b0f1773f7dd6c1b\"\n\n[[package]]\nname = \"cmake\"\nversion = \"0.1.50\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a31c789563b815f77f4250caee12365734369f942439b7defd71e18a48197130\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"codespan-reporting\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e\"\ndependencies = [\n \"termcolor\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7\"\n\n[[package]]\nname = \"concurrent-queue\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62ec6771ecfa0762d24683ee5a32ad78487a3d3afdc0fb8cae19d2c5deb50b7c\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"config\"\nversion = \"0.13.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d379af7f68bfc21714c6c7dea883544201741d2ce8274bb12fa54f89507f52a7\"\ndependencies = [\n \"async-trait\",\n \"lazy_static\",\n \"nom\",\n \"pathdiff\",\n \"serde\",\n \"yaml-rust\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.15.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3d79fbe8970a77e3e34151cc13d3b3e248aa0faaecb9f6091fa07ebefe5ad60\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"unicode-width\",\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"console-api\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e57ff02e8ad8e06ab9731d5dc72dc23bef9200778eae1a89d555d8c42e5d4a86\"\ndependencies = [\n \"prost\",\n \"prost-types\",\n \"tonic\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"console-subscriber\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22a3a81dfaf6b66bce5d159eddae701e3a002f194d378cbf7be5f053c281d9be\"\ndependencies = [\n \"console-api\",\n \"crossbeam-channel\",\n \"crossbeam-utils\",\n \"futures\",\n \"hdrhistogram\",\n \"humantime\",\n \"prost-types\",\n \"serde\",\n \"serde_json\",\n \"thread_local\",\n \"tokio\",\n \"tokio-stream\",\n \"tonic\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"const-oid\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"795bc6e66a8e340f075fcf6227e417a2dc976b92b91f3cdc778bb858778b6747\"\n\n[[package]]\nname = \"constant_time_eq\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13418e745008f7349ec7e449155f419a61b92b58a99cc3616942b926825ec76b\"\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e\"\n\n[[package]]\nname = \"cookie\"\nversion = \"0.16.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e859cd57d0710d9e06c381b550c06e76992472a8c6d527aecd2fc673dcc231fb\"\ndependencies = [\n \"aes-gcm\",\n \"base64 0.20.0\",\n \"hkdf\",\n \"hmac\",\n \"percent-encoding\",\n \"rand 0.8.5\",\n \"sha2\",\n \"subtle\",\n \"time\",\n \"version_check\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e496a50fda8aacccc86d7529e2c1e0892dbd0f898a6b5645b5561b89c3210efa\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"280a9f2d8b3a38871a3c8a46fb80db65e5e5ed97da80c4d08bf27fb63e35e181\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc\"\nversion = \"3.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86ec7a15cbe22e59248fc7eadb1907dab5ba09372595da4d73dd805ed4417dfe\"\ndependencies = [\n \"crc-catalog\",\n]\n\n[[package]]\nname = \"crc-catalog\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9cace84e55f07e7301bae1c519df89cdad8cc3cd868413d3fdbdeca9ff3db484\"\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-queue\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1cfb3ea8a53f37c40dea2c7bedcbd88bdfae54f5e2175d6ecaff1c988353add\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c063cd8cc95f5c377ed0d4b49a4b21f632396ff690e8470c29b3359b346984b\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core 0.6.4\",\n \"typenum\",\n]\n\n[[package]]\nname = \"ctor\"\nversion = \"0.1.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d2301688392eb071b0bf1a37be05c469d3cc4dbbd95df672fe28ab021e6a096\"\ndependencies = [\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ctr\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0369ee1ad671834580515889b80f2ea915f23b8be8d0daa4bbaf2ac5c7590835\"\ndependencies = [\n \"cipher\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f711ade317dd348950a9910f81c5947e3d8907ebd2b83f76203ff1807e6a2bc2\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"platforms\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83fdaf97f4804dcebfa5862639bc9ce4121e82140bec2a987ac5140294865b5b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"cxx\"\nversion = \"1.0.94\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f61f1b6389c3fe1c316bf8a4dccc90a38208354b330925bce1f74a6c4756eb93\"\ndependencies = [\n \"cc\",\n \"cxxbridge-flags\",\n \"cxxbridge-macro\",\n \"link-cplusplus\",\n]\n\n[[package]]\nname = \"cxx-build\"\nversion = \"1.0.94\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12cee708e8962df2aeb38f594aae5d827c022b6460ac71a7a3e2c3c2aae5a07b\"\ndependencies = [\n \"cc\",\n \"codespan-reporting\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"scratch\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"cxxbridge-flags\"\nversion = \"1.0.94\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7944172ae7e4068c533afbb984114a56c46e9ccddda550499caa222902c7f7bb\"\n\n[[package]]\nname = \"cxxbridge-macro\"\nversion = \"1.0.94\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2345488264226bf682893e25de0769f3360aac9957980ec49361b083ddaa5bc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a01d95850c592940db9b8194bc39f4bc0e89dee5c4265e4b1807c34a9aba453c\"\ndependencies = [\n \"darling_core 0.13.4\",\n \"darling_macro 0.13.4\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core 0.14.4\",\n \"darling_macro 0.14.4\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"859d65a907b6852c9361e3185c862aae7fafd2887876799fa55f5f99dc40d610\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c972679f83bdf9c42bd905396b6c3588a843a17f0f16dfcfa3e2c5d57441835\"\ndependencies = [\n \"darling_core 0.13.4\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core 0.14.4\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"data-encoding\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23d8666cb01533c39dde32bcbab8e227b4ed6679b2c925eba05feabea39508fb\"\n\n[[package]]\nname = \"delegate\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35c47a31748d9cfa641f6cccb3608385fafe261ba36054f3d40d5a3ca11eb1af\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"der\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fffa369a668c8af7dbf8b5e56c9f744fbd399949ed171606040001947de40b1c\"\ndependencies = [\n \"const-oid\",\n \"pem-rfc7468\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"derivative\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\ndependencies = [\n \"convert_case\",\n \"proc-macro2\",\n \"quote\",\n \"rustc_version\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"dialoguer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59c6f2989294b9a498d3ad5491a79c6deb604617378e1cdc4bfc1c1361fe2f87\"\ndependencies = [\n \"console\",\n \"shell-words\",\n \"tempfile\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"const-oid\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"dotenvy\"\nversion = \"0.15.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1aaf95b3e5c8f23aa320147307562d361db0ae0d51242340f558153b4eb2439b\"\n\n[[package]]\nname = \"ed25519\"\nversion = \"2.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60f6d271ca33075c88028be6f04d502853d63a5ece419d269c15315d4fc1cf1d\"\ndependencies = [\n \"pkcs8\",\n \"signature\",\n]\n\n[[package]]\nname = \"ed25519-dalek\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7277392b266383ef8396db7fdeb1e77b6c52fed775f5df15bb24f35b72156980\"\ndependencies = [\n \"curve25519-dalek\",\n \"ed25519\",\n \"rand_core 0.6.4\",\n \"serde\",\n \"sha2\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071a31f4ee85403370b58aca746f01041ede6f0da2730960ad001edc2b71b394\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bcfec3a70f97c962c307b2d2c56e358cf1d00b558d74262b5f929ee8cc7e73a\"\ndependencies = [\n \"errno-dragonfly\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"errno-dragonfly\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"etcetera\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"136d1b5283a1ab77bd9257427ffd09d8667ced0570b6f938942bc7568ed5b943\"\ndependencies = [\n \"cfg-if\",\n \"home\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"event-listener\"\nversion = \"2.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0206175f82b8d6bf6652ff7d71a1e27fd2e4efde587fd368662814d6ec1d9ce0\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.1.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e825f6987101665dea6ec934c09ec6d721de7bc1bf92248e1d5810c8cd636b77\"\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cbc844cecaee9d4443931972e1289c8ff485cb4cc2767cb03ca139ed6885153\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall 0.2.16\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8a2db397cb1c8772f31494cb8917e48cd1e64f0fa7efac59fbd741a0a8ce841\"\ndependencies = [\n \"crc32fast\",\n \"libz-sys\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"flume\"\nversion = \"0.10.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1657b4441c3403d9f7b3409e47575237dac27b1b5726df654a6ecbf92f0f7577\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n \"pin-project\",\n \"spin 0.9.8\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a62bc1cf6f830c2ec14a513a9fb124d0a213a629668a4186f329db21fe045652\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"frunk\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a89c703bf50009f383a0873845357cc400a95fc535f836feddfe015d7df6e1e0\"\ndependencies = [\n \"frunk_core\",\n \"frunk_derives\",\n \"frunk_proc_macros\",\n]\n\n[[package]]\nname = \"frunk_core\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a446d01a558301dca28ef43222864a9fa2bd9a2e71370f769d5d5d5ec9f3537\"\n\n[[package]]\nname = \"frunk_derives\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b83164912bb4c97cfe0772913c7af7387ee2e00cb6d4636fb65a35b3d0c8f173\"\ndependencies = [\n \"frunk_proc_macro_helpers\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"frunk_proc_macro_helpers\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"015425591bbeb0f5b8a75593340f1789af428e9f887a4f1e36c0c471f067ef50\"\ndependencies = [\n \"frunk_core\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"frunk_proc_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea01524f285deab48affffb342b97f186e657b119c3f1821ac531780e0fbfae0\"\ndependencies = [\n \"frunk_core\",\n \"frunk_proc_macros_impl\",\n \"proc-macro-hack\",\n]\n\n[[package]]\nname = \"frunk_proc_macros_impl\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a802d974cc18ee7fe1a7868fc9ce31086294fd96ba62f8da64ecb44e92a2653\"\ndependencies = [\n \"frunk_core\",\n \"frunk_proc_macro_helpers\",\n \"proc-macro-hack\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"fsevent-sys\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76ee7a02da4d231650c7cea31349b889be2f45ddb3ef3032d2ec8185f6313fd2\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23342abe12aba583913b2e62f22225ff9c950774065e4bfb61a19cd9770fec40\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"955518d47e09b25bbebc7a18df10b81f0c766eaf4c4f1cccef2fca5f2a4fb5f2\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bca583b7e26f571124fe5b7561d49cb2868d79116cfa0eefce955557c6fee8c\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccecee823288125bd88b4d7f565c9e58e41858e47ab72e8ea2d64e93624386e0\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-intrusive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d930c203dd0b6ff06e0201a4a2fe9149b43c684fd4420555b26d21b1a02956f\"\ndependencies = [\n \"futures-core\",\n \"lock_api\",\n \"parking_lot\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fff74096e71ed47f8e023204cfd0aa1289cd54ae5430a9523be060cdb849964\"\n\n[[package]]\nname = \"futures-lite\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49a9d51ce47660b1e808d3c990b4709f2f415d928835a17dfd16991515c46bce\"\ndependencies = [\n \"fastrand\",\n \"futures-core\",\n \"futures-io\",\n \"memchr\",\n \"parking\",\n \"pin-project-lite\",\n \"waker-fn\",\n]\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89ca545a94061b6365f2c7355b4b32bd20df3ff95f02da9329b34ccc3bd6ee72\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f43be4fe21a13b9781a69afa4985b0f6ee0e1afab2c6f454a8cf30e2b2237b6e\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76d3d132be6c0e6aa1534069c705a74a5997a356c0dc2f86a47765e5617c5b65\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b01e40b772d54cf6c6d721c1d1abd0647a0106a12ecaa1c186273392a69533\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.9.0+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c85e1d9ab2eadba7e5040d4e09cbd6d072b76a557ad64e797c2cb9d4da21d7e4\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"libc\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"ghash\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d930750de5717d2dd0b8c0d42c076c0e884c81a73e6cab859bbd2339c71e3e40\"\ndependencies = [\n \"opaque-debug\",\n \"polyval\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.27.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad0a93d233ebf96623465aad4046a8d3aa4da22d4f4beba5388838c8a434bbb4\"\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"gloo-timers\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b995a66bb87bebce9a0f4a95aed01daca4872c050bfcb21653361c03bc35e5c\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"h2\"\nversion = \"0.3.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"17f8a914c2987b688368b5138aa05321db91f4090cf26118185672ad588bce21\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"futures-core\",\n \"futures-sink\",\n \"futures-util\",\n \"http\",\n \"indexmap 1.9.3\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\ndependencies = [\n \"ahash 0.7.6\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e\"\ndependencies = [\n \"ahash 0.8.3\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c6201b9ff9fd90a5a3bac2e56a830d0caa509576f0e503818ee82c181b3437a\"\n\n[[package]]\nname = \"hashlink\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69fe1fcf8b4278d860ad0548329f892a3631fb63f82574df68275f34cdbe0ffa\"\ndependencies = [\n \"hashbrown 0.12.3\",\n]\n\n[[package]]\nname = \"hdrhistogram\"\nversion = \"7.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f19b9f54f7c7f55e31401bb647626ce0cf0f67b0004982ce815b3ee72a02aa8\"\ndependencies = [\n \"base64 0.13.1\",\n \"byteorder\",\n \"flate2\",\n \"nom\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"headers\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3e372db8e5c0d213e0cd0b9be18be2aca3d44cf2fe30a9d46a65581cd454584\"\ndependencies = [\n \"base64 0.13.1\",\n \"bitflags 1.3.2\",\n \"bytes\",\n \"headers-core\",\n \"http\",\n \"httpdate\",\n \"mime\",\n \"sha1\",\n]\n\n[[package]]\nname = \"headers-core\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7f66481bfee273957b1f20485a4ff3362987f85b2c236580d81b4eb7a326429\"\ndependencies = [\n \"http\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fed44880c466736ef9a5c5b5facefb5ed0785676d0c02d612db14e54f0d84286\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"hex-literal\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fe2267d4ed49bc07b63801559be28c718ea06c4738b7a03c94df7386d2cde46\"\n\n[[package]]\nname = \"hkdf\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"791a029f6b9fc27657f6f188ec6e5e43f6911f6f878e0dc5501396e09809d437\"\ndependencies = [\n \"hmac\",\n]\n\n[[package]]\nname = \"hmac\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5444c27eef6923071f7ebcc33e3444508466a76f7a2b93da00ed6e19f30c1ddb\"\ndependencies = [\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd6effc99afb63425aff9b05836f029929e345a6148a14b7ecd5ab67af944482\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5f38f16d184e36f2408a55281cd658ecbd3ca05cce6d6510a176eca393e26d1\"\ndependencies = [\n \"bytes\",\n \"http\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"humantime-serde\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57a3db5ea5923d99402c94e9feb261dc5ee9b4efa158b0315f788cf549cc200c\"\ndependencies = [\n \"humantime\",\n \"serde\",\n]\n\n[[package]]\nname = \"hwaddr\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e414433a9e4338f4e87fa29d0670c883a5e73e7955c45f4a49130c0aa992c85b\"\ndependencies = [\n \"phf\",\n]\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab302d72a6f11a3b910431ff93aae7e773078c769f0a3ef15fb9ec692ed147d4\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n \"want\",\n]\n\n[[package]]\nname = \"hyper-rustls\"\nversion = \"0.23.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1788965e61b367cd03a62950836d5cd41560c3577d90e40e0819373194d1661c\"\ndependencies = [\n \"http\",\n \"hyper\",\n \"rustls\",\n \"tokio\",\n \"tokio-rustls\",\n]\n\n[[package]]\nname = \"hyper-timeout\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbb958482e8c7be4bc3cf272a766a2b0bf1a6755e7a6ae777f017a31d11b13b1\"\ndependencies = [\n \"hyper\",\n \"pin-project-lite\",\n \"tokio\",\n \"tokio-io-timeout\",\n]\n\n[[package]]\nname = \"hyper-tls\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6183ddfa99b85da61a140bea0efc93fdf56ceaa041b37d553518030827f9905\"\ndependencies = [\n \"bytes\",\n \"hyper\",\n \"native-tls\",\n \"tokio\",\n \"tokio-native-tls\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0722cd7114b7de04316e7ea5456a0bbb20e4adb46fd27a3697adb812cff0f37c\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0703ae284fc167426161c2e3f1da3ea71d94b21bedbcc9494e92b28e334e3dca\"\ndependencies = [\n \"cxx\",\n \"cxx-build\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"idna\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.12.3\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5477fe2230a79769d8dc68e0eabf5437907c0457a5614a9e8dddb67f65eb65d\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.14.0\",\n]\n\n[[package]]\nname = \"inherent\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce243b1bfa62ffc028f1cc3b6034ec63d649f3031bc8a4fbbb004e1ac17d1f68\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"inotify\"\nversion = \"0.9.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8069d3ec154eb856955c1c0fbffefbf5f3c40a104ec912d4797314c1801abff\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"inotify-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"inotify-sys\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e05c02b5e89bff3b946cedeca278abc628fe811e604f027c45a8aa3cf793d0eb\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"inout\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5\"\ndependencies = [\n \"block-padding\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c66c74d2ae7e79a5a8f7ac924adbe38ee42a859c6539ad869eb51f0b52dc220\"\ndependencies = [\n \"hermit-abi 0.3.1\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12b6ee2129af8d4fb011108c73d99a1b83a85977f23b82460c0ae2e25bb4b57f\"\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adcf93614601c8129ddf72e2d5633df827ba6551541c6d8c59520a371475be1f\"\ndependencies = [\n \"hermit-abi 0.3.1\",\n \"io-lifetimes\",\n \"rustix\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445dde2150c55e483f3d8416706b97ec8e8237c307e5b7b4b8dd15e6af2a0730\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"jsonwebtoken\"\nversion = \"8.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6971da4d9c3aa03c3d8f3ff0f4155b534aad021292003895a469716b2a230378\"\ndependencies = [\n \"base64 0.21.0\",\n \"pem\",\n \"ring\",\n \"serde\",\n \"serde_json\",\n \"simple_asn1\",\n]\n\n[[package]]\nname = \"kqueue\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c8fc60ba15bf51257aa9807a48a61013db043fcf3a78cb0d916e8e396dcad98\"\ndependencies = [\n \"kqueue-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"kqueue-sys\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8367585489f01bc55dd27404dcf56b95e6da061a256a666ab23be9ba96a2e587\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"libc\",\n]\n\n[[package]]\nname = \"kv-log-macro\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0de8b303297635ad57c9f5059fd9cee7a47f8e8daa09df0fcd07dd39fb22977f\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\ndependencies = [\n \"spin 0.5.2\",\n]\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"lexical\"\nversion = \"6.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7aefb36fd43fef7003334742cbf77b243fcd36418a1d1bdd480d613a67968f6\"\ndependencies = [\n \"lexical-core\",\n]\n\n[[package]]\nname = \"lexical-core\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2cde5de06e8d4c2faabc400238f9ae1c74d5412d03a7bd067645ccbc47070e46\"\ndependencies = [\n \"lexical-parse-float\",\n \"lexical-parse-integer\",\n \"lexical-util\",\n \"lexical-write-float\",\n \"lexical-write-integer\",\n]\n\n[[package]]\nname = \"lexical-parse-float\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"683b3a5ebd0130b8fb52ba0bdc718cc56815b6a097e28ae5a6997d0ad17dc05f\"\ndependencies = [\n \"lexical-parse-integer\",\n \"lexical-util\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"lexical-parse-integer\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d0994485ed0c312f6d965766754ea177d07f9c00c9b82a5ee62ed5b47945ee9\"\ndependencies = [\n \"lexical-util\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"lexical-util\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5255b9ff16ff898710eb9eb63cb39248ea8a5bb036bea8085b1a767ff6c4e3fc\"\ndependencies = [\n \"static_assertions\",\n]\n\n[[package]]\nname = \"lexical-write-float\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accabaa1c4581f05a3923d1b4cfd124c329352288b7b9da09e766b0668116862\"\ndependencies = [\n \"lexical-util\",\n \"lexical-write-integer\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"lexical-write-integer\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1b6f3d1f4422866b68192d62f77bc5c700bee84f3069f2469d7bc8c77852446\"\ndependencies = [\n \"lexical-util\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.141\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3304a64d199bb964be99741b7a14d26972741915b3649639149b2479bb46f4b5\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f\"\ndependencies = [\n \"cfg-if\",\n \"winapi\",\n]\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"348108ab3fba42ec82ff6e9564fc4ca0247bdccdc68dd8af9764bbc79c3c8ffb\"\n\n[[package]]\nname = \"libsqlite3-sys\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afc22eff61b133b115c6e8c74e818c628d6d5e7a502afea6f64dee076dd94326\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"libz-sys\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9702761c3935f8cc2f101793272e202c72b99da8f4224a19ddcf1279a6450bbf\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"link-cplusplus\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecd207c9c713c34f95a097a5b029ac2ce6010530c7b49d7fea24d977dede04f5\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f508063cc7bb32987c71511216bd5a32be15bccb6a80b52df8b9d7f01fc3aa2\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e\"\ndependencies = [\n \"cfg-if\",\n \"value-bag\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata\",\n]\n\n[[package]]\nname = \"matchit\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b87248edafb776e59e6ee64a79086f65890d3510f2c656c000bf2a7e8a0aea40\"\n\n[[package]]\nname = \"md-5\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6365506850d44bff6e2fbcb5176cf63650e48bd45ef2fe2665ae1570e0f4b9ca\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"md5\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"490cc448043f947bae3cbee9c203358d62dbee0db12107a74be5c30ccfd09771\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\"\n\n[[package]]\nname = \"mime_guess\"\nversion = \"2.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4192263c238a5f0d0c6bfd21f336a313a4ce1c450542449ca191bb657b4642ef\"\ndependencies = [\n \"mime\",\n \"unicase\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b9d9a46eff5b4ff64b45a9e316a6d1e0bc719ef429cbec4dc630684212bfdf9\"\ndependencies = [\n \"libc\",\n \"log\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"multer\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01acbdc23469fd8fe07ab135923371d5f5a422fbf9c522158677c8eb15bc51c2\"\ndependencies = [\n \"bytes\",\n \"encoding_rs\",\n \"futures-util\",\n \"http\",\n \"httparse\",\n \"log\",\n \"memchr\",\n \"mime\",\n \"spin 0.9.8\",\n \"tokio\",\n \"version_check\",\n]\n\n[[package]]\nname = \"mysql_common\"\nversion = \"0.29.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9006c95034ccf7b903d955f210469119f6c3477fc9c9e7a7845ce38a3e665c2a\"\ndependencies = [\n \"base64 0.13.1\",\n \"bigdecimal\",\n \"bindgen\",\n \"bitflags 1.3.2\",\n \"bitvec\",\n \"byteorder\",\n \"bytes\",\n \"cc\",\n \"cmake\",\n \"crc32fast\",\n \"flate2\",\n \"frunk\",\n \"lazy_static\",\n \"lexical\",\n \"num-bigint\",\n \"num-traits\",\n \"rand 0.8.5\",\n \"regex\",\n \"rust_decimal\",\n \"saturating\",\n \"serde\",\n \"serde_json\",\n \"sha1\",\n \"sha2\",\n \"smallvec\",\n \"subprocess\",\n \"thiserror\",\n \"time\",\n \"uuid\",\n]\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07226173c32f2926027b63cce4bcd8076c3552846cbe7925f3aaffeac0a3b92e\"\ndependencies = [\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"openssl\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"security-framework\",\n \"security-framework-sys\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"notify\"\nversion = \"5.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58ea850aa68a06e48fdb069c0ec44d0d64c8dbffa49bf3b6f7f0a901fdea1ba9\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"crossbeam-channel\",\n \"filetime\",\n \"fsevent-sys\",\n \"inotify\",\n \"kqueue\",\n \"libc\",\n \"mio\",\n \"walkdir\",\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f93ab6289c7b344a8a9f60f88d80aa20032336fe78da341afc91c8a2341fc75f\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n \"rand 0.8.5\",\n]\n\n[[package]]\nname = \"num-bigint-dig\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2399c9463abc5f909349d8aa9ba080e0b88b3ce2885389b60b993f39b1a56905\"\ndependencies = [\n \"byteorder\",\n \"lazy_static\",\n \"libm\",\n \"num-integer\",\n \"num-iter\",\n \"num-traits\",\n \"rand 0.8.5\",\n \"smallvec\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.45\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9\"\ndependencies = [\n \"autocfg\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-iter\"\nversion = \"0.1.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d03e6c028c5dc5cac6e2dec0efda81fc887605bb3d884578bb6d6bf7514e252\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fac9e2da13b5eb447a6ce3d392f23a29d8694bff781bf03a16cd9ac8697593b\"\ndependencies = [\n \"hermit-abi 0.2.6\",\n \"libc\",\n]\n\n[[package]]\nname = \"num_threads\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2819ce041d2ee131036f4fc9d6ae7ae125a3a40e97ba64d04fe799ad9dabbb44\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"oauth2\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eeaf26a72311c087f8c5ba617c96fac67a5c04f430e716ac8d8ab2de62e23368\"\ndependencies = [\n \"base64 0.13.1\",\n \"chrono\",\n \"getrandom 0.2.9\",\n \"http\",\n \"rand 0.8.5\",\n \"reqwest\",\n \"serde\",\n \"serde_json\",\n \"serde_path_to_error\",\n \"sha2\",\n \"thiserror\",\n \"url\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.30.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea86265d3d3dcb6a27fc51bd29a4bf387fae9d2986b823079d4986af253eb439\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.17.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3\"\n\n[[package]]\nname = \"opaque-debug\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5\"\n\n[[package]]\nname = \"openidconnect\"\nversion = \"2.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98dd5b7049bac4fdd2233b8c9767d42c05da8006fdb79cc903258556d2b18009\"\ndependencies = [\n \"base64 0.13.1\",\n \"chrono\",\n \"http\",\n \"itertools\",\n \"log\",\n \"num-bigint\",\n \"oauth2\",\n \"rand 0.8.5\",\n \"ring\",\n \"serde\",\n \"serde-value\",\n \"serde_derive\",\n \"serde_json\",\n \"serde_path_to_error\",\n \"serde_plain\",\n \"serde_with\",\n \"subtle\",\n \"thiserror\",\n \"url\",\n]\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.50\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e30d8bc91859781f0a943411186324d580f2bbeb71b452fe91ae344806af3f1\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-macros\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-src\"\nversion = \"111.25.2+1.1.1t\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"320708a054ad9b3bf314688b5db87cf4d6683d64cfc835e2337924ae62bf4431\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d3d193fb1488ad46ffe3aaabc912cc931d02ee8518fe2959aea8ef52718b0c0\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"openssl-src\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"option-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n\n[[package]]\nname = \"ordered-float\"\nversion = \"2.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7940cf2ca942593318d07fcf2596cdca60a85c9e7fab408a5e21a4f9dcd40d87\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"ordered-float\"\nversion = \"3.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2fc2dbde8f8a79f2102cc474ceb0ad68e3b80b85289ea62389b60e66777e4213\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"os_str_bytes\"\nversion = \"6.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ceedf44fb00f2d1984b0bc98102627ce622e083e49a5bacdb3e514fa4238e267\"\n\n[[package]]\nname = \"ouroboros\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2ba07320d39dfea882faa70554b4bd342a5f273ed59ba7c1c6b4c840492c954\"\ndependencies = [\n \"aliasable\",\n \"ouroboros_macro\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ouroboros_macro\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec4c6225c69b4ca778c0aea097321a64c421cf4577b331c61b229267edabb6f8\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"packet\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c136c7ad0619ed4f88894aecf66ad86c80683e7b5d707996e6a3a7e0e3916944\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"byteorder\",\n \"hwaddr\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"parking\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14f2252c834a40ed9bb5422029649578e63aa341ac401f74e719dd1afda8394e\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9069cbb9f99e3a5083476ccb29ceb1de18b9118cafa53e90c9551235de2b9521\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall 0.2.16\",\n \"smallvec\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"password-hash\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77e0b28ace46c5a396546bcf443bf422b57049617433d8854227352a4a9b24e7\"\ndependencies = [\n \"base64ct\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"password-hash\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7676374caaee8a325c9e7a2ae557f216c5563a171d6997b0ef8a65af35147700\"\ndependencies = [\n \"base64ct\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f746c4065a8fa3fe23974dd82f15431cc8d40779821001404d10d2e79ca7d79\"\n\n[[package]]\nname = \"pathdiff\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8835116a5c179084a830efb3adc117ab007512b535bc1a21c991d3b32a6b44dd\"\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83a0692ec44e4cf1ef28ca317f14f8f07da2d95ec3fa01f86e4467b725e60917\"\ndependencies = [\n \"digest\",\n \"hmac\",\n \"password-hash 0.4.2\",\n \"sha2\",\n]\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8ed6a7761f76e3b9f92dfb0a60a6a6477c61024b775147ff0973a02653abaf2\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"peeking_take_while\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099\"\n\n[[package]]\nname = \"pem\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8835c273a76a90455d7344889b0964598e3316e2a79ede8e36f16bdcf2228b8\"\ndependencies = [\n \"base64 0.13.1\",\n]\n\n[[package]]\nname = \"pem-rfc7468\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b39c9bfcfc231068454382784bb460aae594343fb030d46e9f50a645418412\"\ndependencies = [\n \"base64ct\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b2a4787296e9989611394c33f193f676704af1686e70b8f8033ab5ba9a35a94\"\n\n[[package]]\nname = \"phf\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3dfb61232e34fcb633f43d12c58f83c1df82962dcdfa565a4e866ffc17dafe12\"\ndependencies = [\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_shared\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c00cf8b9eafe68dde5e9eaa2cef8ee84a9336a47d566ec55ca16589633b65af7\"\ndependencies = [\n \"siphasher\",\n]\n\n[[package]]\nname = \"pin-project\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad29a609b6bcd67fee905812e544992d216af9d755757c05ed2d0e15a74c6ecc\"\ndependencies = [\n \"pin-project-internal\",\n]\n\n[[package]]\nname = \"pin-project-internal\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"069bdb1e05adc7a8990dce9cc75370895fbe4e3d58b9b73bf1aee56359344a55\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkcs1\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8ffb9f10fa047879315e6625af03c164b16962a5368d724ed16323b68ace47f\"\ndependencies = [\n \"der\",\n \"pkcs8\",\n \"spki\",\n]\n\n[[package]]\nname = \"pkcs8\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f950b2377845cebe5cf8b5165cb3cc1a5e0fa5cfa3e1f7f55707d8fd82e0a7b7\"\ndependencies = [\n \"der\",\n \"spki\",\n]\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ac9a59f73473f1b8d852421e59e64809f025994837ef743615c6d0c5b305160\"\n\n[[package]]\nname = \"platforms\"\nversion = \"3.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d7ddaed09e0eb771a79ab0fd64609ba0afb0a8366421957936ad14cbd13630\"\n\n[[package]]\nname = \"poem\"\nversion = \"1.3.55\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0608069d4999c3c02d49dff261663f2e73a8f7b00b7cd364fb5e93e419dafa1\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"base64 0.21.0\",\n \"bytes\",\n \"chrono\",\n \"cookie\",\n \"futures-util\",\n \"headers\",\n \"hex\",\n \"http\",\n \"httpdate\",\n \"hyper\",\n \"mime\",\n \"mime_guess\",\n \"multer\",\n \"parking_lot\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"poem-derive\",\n \"priority-queue\",\n \"quick-xml\",\n \"rand 0.8.5\",\n \"regex\",\n \"rfc7239\",\n \"rust-embed\",\n \"rustls-pemfile\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"serde_yaml 0.9.21\",\n \"smallvec\",\n \"tempfile\",\n \"thiserror\",\n \"time\",\n \"tokio\",\n \"tokio-rustls\",\n \"tokio-stream\",\n \"tokio-tungstenite 0.18.0\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"poem-derive\"\nversion = \"1.3.55\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b839bad877aa933dd00901abd127a44496130e3def48e079d60e43f2c8a33cc\"\ndependencies = [\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"poem-openapi\"\nversion = \"2.0.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1077defedfd8ff15990bb42993970ac75bc46dd8a5b3c0b452ab4e2041b825a4\"\ndependencies = [\n \"base64 0.21.0\",\n \"bytes\",\n \"chrono\",\n \"derive_more\",\n \"futures-util\",\n \"mime\",\n \"num-traits\",\n \"poem\",\n \"poem-openapi-derive\",\n \"quick-xml\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"serde_yaml 0.9.21\",\n \"thiserror\",\n \"tokio\",\n \"uuid\",\n]\n\n[[package]]\nname = \"poem-openapi-derive\"\nversion = \"2.0.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75bf9dc3b9c42bb8744bc633f9581f740b429122e1840fa37c06beeefc35a719\"\ndependencies = [\n \"darling 0.14.4\",\n \"http\",\n \"indexmap 1.9.3\",\n \"mime\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"syn 1.0.109\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"polling\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be1c66a6add46bff50935c313dae30a5030cf8385c5206e8a95e9e9def974aa\"\ndependencies = [\n \"autocfg\",\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"concurrent-queue\",\n \"libc\",\n \"log\",\n \"pin-project-lite\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"poly1305\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8159bd90725d2df49889a078b54f4f79e87f1f8a8444194cdca81d38f5393abf\"\ndependencies = [\n \"cpufeatures\",\n \"opaque-debug\",\n \"universal-hash\",\n]\n\n[[package]]\nname = \"polyval\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ef234e08c11dfcb2e56f79fd70f6f2eb7f025c0ce2333e82f4f0518ecad30c6\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"opaque-debug\",\n \"universal-hash\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"priority-queue\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ca9c6be70d989d21a136eb86c2d83e4b328447fac4a88dace2143c179c86267\"\ndependencies = [\n \"autocfg\",\n \"indexmap 1.9.3\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785\"\ndependencies = [\n \"toml\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-hack\"\nversion = \"0.5.20+deprecated\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc375e1527247fe1a97d8b7156678dfe7c1af2fc075c9a4db3690ecd2a148068\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.66\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18fb31db3f9bddb2ea821cde30a9f70117e3f119938b5ee630b7403aa6e2ead9\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"prost\"\nversion = \"0.11.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b82eaa1d779e9a4bc1c3217db8ffbeabaae1dca241bf70183242128d48681cd\"\ndependencies = [\n \"bytes\",\n \"prost-derive\",\n]\n\n[[package]]\nname = \"prost-derive\"\nversion = \"0.11.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d2d8d10f3c6ded6da8b05b5fb3b8a5082514344d56c9f871412d29b4e075b4\"\ndependencies = [\n \"anyhow\",\n \"itertools\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"prost-types\"\nversion = \"0.11.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"213622a1460818959ac1181aaeb2dc9c7f63df720db7d788b3e24eacd1983e13\"\ndependencies = [\n \"prost\",\n]\n\n[[package]]\nname = \"ptr_meta\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0738ccf7ea06b608c10564b31debd4f5bc5e197fc8bfe088f68ae5ce81e7a4f1\"\ndependencies = [\n \"ptr_meta_derive\",\n]\n\n[[package]]\nname = \"ptr_meta_derive\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b845dbfca988fa33db069c0e230574d15a3088f147a87b64c7589eb662c9ac\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"quick-xml\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f50b1c63b38611e7d4d7f68b82d3ad0cc71a2ad2e7f61fc10f1328d917c93cd\"\ndependencies = [\n \"memchr\",\n \"serde\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50f3b39ccfb720540debaa0164757101c08ecb8d326b15358ce76a62c7e85965\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\ndependencies = [\n \"getrandom 0.1.16\",\n \"libc\",\n \"rand_chacha 0.2.2\",\n \"rand_core 0.5.1\",\n \"rand_hc\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\ndependencies = [\n \"getrandom 0.1.16\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom 0.2.9\",\n]\n\n[[package]]\nname = \"rand_hc\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\ndependencies = [\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rcgen\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ffbe84efe2f38dea12e9bfc1f65377fdf03e53a18cb3b995faedf7934c7e785b\"\ndependencies = [\n \"pem\",\n \"ring\",\n \"time\",\n \"yasna\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b\"\ndependencies = [\n \"getrandom 0.2.9\",\n \"redox_syscall 0.2.16\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b1f693b24f6ac912f4893ef08244d70b6067480d2f1a46e950c9691e6749d1d\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"rend\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"581008d2099240d37fb08d77ad713bcaec2c4d89d50b5b21a8bb1996bbab68ab\"\ndependencies = [\n \"bytecheck\",\n]\n\n[[package]]\nname = \"reqwest\"\nversion = \"0.11.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"27b71749df584b7f4cac2c426c127a7c785a5106cc98f7a8feb044115f0fa254\"\ndependencies = [\n \"base64 0.21.0\",\n \"bytes\",\n \"encoding_rs\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"hyper-rustls\",\n \"hyper-tls\",\n \"ipnet\",\n \"js-sys\",\n \"log\",\n \"mime\",\n \"native-tls\",\n \"once_cell\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"rustls\",\n \"rustls-native-certs\",\n \"rustls-pemfile\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"tokio\",\n \"tokio-native-tls\",\n \"tokio-rustls\",\n \"tokio-util\",\n \"tower-service\",\n \"url\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"wasm-streams\",\n \"web-sys\",\n \"webpki-roots\",\n \"winreg\",\n]\n\n[[package]]\nname = \"rfc7239\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"087317b3cf7eb481f13bd9025d729324b7cd068d6f470e2d76d049e191f5ba47\"\ndependencies = [\n \"uncased\",\n]\n\n[[package]]\nname = \"ring\"\nversion = \"0.16.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"once_cell\",\n \"spin 0.5.2\",\n \"untrusted\",\n \"web-sys\",\n \"winapi\",\n]\n\n[[package]]\nname = \"rkyv\"\nversion = \"0.7.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21499ed91807f07ae081880aabb2ccc0235e9d88011867d984525e9a4c3cfa3e\"\ndependencies = [\n \"bytecheck\",\n \"hashbrown 0.12.3\",\n \"ptr_meta\",\n \"rend\",\n \"rkyv_derive\",\n \"seahash\",\n]\n\n[[package]]\nname = \"rkyv_derive\"\nversion = \"0.7.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac1c672430eb41556291981f45ca900a0239ad007242d1cb4b4167af842db666\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"rsa\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ab43bb47d23c1a631b4b680199a45255dce26fa9ab2fa902581f624ff13e6a8\"\ndependencies = [\n \"byteorder\",\n \"const-oid\",\n \"digest\",\n \"num-bigint-dig\",\n \"num-integer\",\n \"num-iter\",\n \"num-traits\",\n \"pkcs1\",\n \"pkcs8\",\n \"rand_core 0.6.4\",\n \"signature\",\n \"spki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"russh\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7878311587d0353a854d5be954fbe68bdf6e77873933b484d1e45db12bb2f8cf\"\ndependencies = [\n \"aes\",\n \"aes-gcm\",\n \"async-trait\",\n \"bitflags 2.3.3\",\n \"byteorder\",\n \"chacha20\",\n \"ctr\",\n \"curve25519-dalek\",\n \"digest\",\n \"flate2\",\n \"futures\",\n \"generic-array\",\n \"hex-literal\",\n \"hmac\",\n \"log\",\n \"num-bigint\",\n \"once_cell\",\n \"openssl\",\n \"poly1305\",\n \"rand 0.8.5\",\n \"russh-cryptovec\",\n \"russh-keys\",\n \"sha1\",\n \"sha2\",\n \"subtle\",\n \"thiserror\",\n \"tokio\",\n \"tokio-util\",\n]\n\n[[package]]\nname = \"russh-cryptovec\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3fdf036c2216b554053d19d4af45c1722d13b00ac494ea19825daf4beac034e\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"russh-keys\"\nversion = \"0.38.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"557ab9190022dff78116ebed5e391abbd3f424b06cd643dfe262346ab91ed8c9\"\ndependencies = [\n \"aes\",\n \"async-trait\",\n \"bcrypt-pbkdf\",\n \"bit-vec\",\n \"block-padding\",\n \"byteorder\",\n \"cbc\",\n \"ctr\",\n \"data-encoding\",\n \"dirs\",\n \"ed25519-dalek\",\n \"futures\",\n \"hmac\",\n \"inout\",\n \"log\",\n \"md5\",\n \"num-bigint\",\n \"num-integer\",\n \"openssl\",\n \"pbkdf2 0.11.0\",\n \"rand 0.7.3\",\n \"rand_core 0.6.4\",\n \"russh-cryptovec\",\n \"serde\",\n \"sha2\",\n \"thiserror\",\n \"tokio\",\n \"tokio-stream\",\n \"yasna\",\n]\n\n[[package]]\nname = \"rust-embed\"\nversion = \"6.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b68543d5527e158213414a92832d2aab11a84d2571a5eb021ebe22c43aab066\"\ndependencies = [\n \"rust-embed-impl\",\n \"rust-embed-utils\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust-embed-impl\"\nversion = \"6.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d4e0f0ced47ded9a68374ac145edd65a6c1fa13a96447b873660b2a568a0fd7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"rust-embed-utils\",\n \"syn 1.0.109\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust-embed-utils\"\nversion = \"7.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512b0ab6853f7e14e3c8754acb43d6f748bb9ced66aa5915a6553ac8213f7731\"\ndependencies = [\n \"sha2\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"rust_decimal\"\nversion = \"1.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26bd36b60561ee1fb5ec2817f198b6fd09fa571c897a5e86d1487cfc2b096dfc\"\ndependencies = [\n \"arrayvec\",\n \"borsh\",\n \"bytecheck\",\n \"byteorder\",\n \"bytes\",\n \"num-traits\",\n \"rand 0.8.5\",\n \"rkyv\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.37.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"722529a737f5a942fdbac3a46cee213053196737c5eaa3386d52e85b786f2659\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"errno\",\n \"io-lifetimes\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fff78fc74d175294f4e83b28343315ffcfb114b156f0185e9741cb5570f50e2f\"\ndependencies = [\n \"log\",\n \"ring\",\n \"sct\",\n \"webpki\",\n]\n\n[[package]]\nname = \"rustls-native-certs\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0167bac7a9f490495f3c33013e7722b53cb087ecbe082fb0c6387c96f634ea50\"\ndependencies = [\n \"openssl-probe\",\n \"rustls-pemfile\",\n \"schannel\",\n \"security-framework\",\n]\n\n[[package]]\nname = \"rustls-pemfile\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d194b56d58803a43635bdc398cd17e383d6f71f9182b9a192c127ca42494a59b\"\ndependencies = [\n \"base64 0.21.0\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f3208ce4d8448b3f3e7d168a73f5e0c43a61e32930de3bceeccedb388b6bf06\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"saturating\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ece8e78b2f38ec51c51f5d475df0a7187ba5111b2a28bdc761ee05b075d40a71\"\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"713cfb06c7059f3588fb8044c0fad1d09e3c01d225e25b9220dbfdcf16dbb1b3\"\ndependencies = [\n \"windows-sys 0.42.0\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"scratch\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1792db035ce95be60c3f8853017b3999209281c24e2ba5bc8e59bf97a0c590c1\"\n\n[[package]]\nname = \"sct\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d53dcdb7c9f8158937a7981b48accfd39a43af418591a5d008c7b22b5e1b7ca4\"\ndependencies = [\n \"ring\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"sd-notify\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"621e3680f3e07db4c9c2c3fb07c6223ab2fab2e54bd3c04c3ae037990f428c32\"\n\n[[package]]\nname = \"sea-bae\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3bd3534a9978d0aa7edd2808dc1f8f31c4d0ecd31ddf71d997b3c98e9f3c9114\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"sea-orm\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61f6c7daef05dde3476d97001e11fca7a52b655aa3bf4fd610ab2da1176a2ed5\"\ndependencies = [\n \"async-stream\",\n \"async-trait\",\n \"chrono\",\n \"futures\",\n \"log\",\n \"ouroboros\",\n \"sea-orm-macros\",\n \"sea-query\",\n \"sea-query-binder\",\n \"serde\",\n \"serde_json\",\n \"sqlx\",\n \"strum\",\n \"thiserror\",\n \"time\",\n \"tracing\",\n \"url\",\n \"uuid\",\n]\n\n[[package]]\nname = \"sea-orm-cli\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e3f0ff2fa5672e2e7314d107c6498a18e469beeb340a0ed84e3075fce73c2cd\"\ndependencies = [\n \"chrono\",\n \"clap 4.3.21\",\n \"dotenvy\",\n \"glob\",\n \"regex\",\n \"sea-schema\",\n \"tracing\",\n \"tracing-subscriber\",\n \"url\",\n]\n\n[[package]]\nname = \"sea-orm-macros\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd90e73d5f5b184bad525767da29fbfec132b4e62ebd6f60d2f2737ec6468f62\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"sea-bae\",\n \"syn 2.0.28\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sea-orm-migration\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21f673fcefb3a7e7b89a12b6c0e854ec0be14367635ac3435369c8ad7f11e09e\"\ndependencies = [\n \"async-trait\",\n \"clap 4.3.21\",\n \"dotenvy\",\n \"futures\",\n \"sea-orm\",\n \"sea-orm-cli\",\n \"sea-schema\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"sea-query\"\nversion = \"0.30.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6aeb899964df7038e7274306b742951b82a04f835bca8a4683a4c254a6bf35fa\"\ndependencies = [\n \"chrono\",\n \"derivative\",\n \"inherent\",\n \"ordered-float 3.7.0\",\n \"sea-query-derive\",\n \"serde_json\",\n \"uuid\",\n]\n\n[[package]]\nname = \"sea-query-binder\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36bbb68df92e820e4d5aeb17b4acd5cc8b5d18b2c36a4dd6f4626aabfa7ab1b9\"\ndependencies = [\n \"chrono\",\n \"sea-query\",\n \"serde_json\",\n \"sqlx\",\n \"uuid\",\n]\n\n[[package]]\nname = \"sea-query-derive\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd78f2e0ee8e537e9195d1049b752e0433e2cac125426bccb7b5c3e508096117\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"sea-schema\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3e09eb40c78cee8fef8dfbb648036a26b7ad1f618499203ad0e8b6f97593f7f\"\ndependencies = [\n \"futures\",\n \"sea-query\",\n \"sea-schema-derive\",\n]\n\n[[package]]\nname = \"sea-schema-derive\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c6f686050f76bffc4f635cda8aea6df5548666b830b52387e8bc7de11056d11e\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"seahash\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c107b6f4780854c8b126e228ea8869f4d7b71260f962fefb57b996b8959ba6b\"\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a332be01508d814fed64bf28f798a146d73792121129962fdf335bb3c49a4254\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31c9bb296072e961fcbd8853511dd39c2d8be2deb1e17c6860b1d30732b323b4\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.160\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb2f3770c8bce3bcda7e149193a069a0f4365bda1fa5cd88e03bca26afc1216c\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde-value\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3a1a3341211875ef120e117ea7fd5228530ae7e7036a779fdc9117be6b3282c\"\ndependencies = [\n \"ordered-float 2.10.0\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.160\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"291a097c63d8497e00160b166a967a4a79c64f3facdd01cbd7502231688d77df\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.96\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"057d394a50403bcac12672b2b18fb387ab6d289d957dab67dd201875391e52f1\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_path_to_error\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7f05c1d5476066defcdfacce1f52fc3cae3af1d3089727100c02ae92e5abbe0\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_plain\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6018081315db179d0ce57b1fe4b62a12a0028c9cf9bbef868c9cf477b3c34ae\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_urlencoded\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd\"\ndependencies = [\n \"form_urlencoded\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_with\"\nversion = \"1.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"678b5a069e50bf00ecd22d0cd8ddf7c236f68581b03db652061ed5eb13a312ff\"\ndependencies = [\n \"serde\",\n \"serde_with_macros\",\n]\n\n[[package]]\nname = \"serde_with_macros\"\nversion = \"1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e182d6ec6f05393cc0e5ed1bf81ad6db3a8feedf8ee515ecdd369809bcce8082\"\ndependencies = [\n \"darling 0.13.4\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"serde_yaml\"\nversion = \"0.8.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578a7433b776b56a35785ed5ce9a7e777ac0598aac5a6dd1b4b18a307c7fc71b\"\ndependencies = [\n \"indexmap 1.9.3\",\n \"ryu\",\n \"serde\",\n \"yaml-rust\",\n]\n\n[[package]]\nname = \"serde_yaml\"\nversion = \"0.9.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9d684e3ec7de3bf5466b32bd75303ac16f0736426e5a4e0d6e489559ce1249c\"\ndependencies = [\n \"indexmap 1.9.3\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n \"unsafe-libyaml\",\n]\n\n[[package]]\nname = \"sha-1\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5058ada175748e33390e40e872bd0fe59a19f265d0158daa551c5a88a76009c\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha1\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f04293dc80c3993519f2d7f6f511707ee7094fe0c6d3406feb330cdb3540eba3\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82e6b795fe2e3b1e845bafcb27aa35405c4d47cdfc92af5fc8d3002f76cebdc0\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shell-words\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24188a676b6ae68c3b2cb3a01be17fbf7240ce009799bb56d5b1409051e78fde\"\n\n[[package]]\nname = \"shlex\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43b2853a4d09f215c24cc5489c992ce46052d359b5109343cbafbf26bc62f8a3\"\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"signature\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e1788eed21689f9cf370582dfc467ef36ed9c707f073528ddafa8d83e3b8500\"\ndependencies = [\n \"digest\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"simdutf8\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f27f6278552951f1f2b8cf9da965d10969b2efdea95a6ec47987ab46edfe263a\"\n\n[[package]]\nname = \"simple_asn1\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adc4e5204eb1910f40f9cfa375f6f05b68c3abac4b6fd879c8ff5e7ae8a0a085\"\ndependencies = [\n \"num-bigint\",\n \"num-traits\",\n \"thiserror\",\n \"time\",\n]\n\n[[package]]\nname = \"siphasher\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7bd3e3206899af3f8b12af284fafc038cc1dc2b41d1b89dd17297221c5d225de\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6528351c9bc8ab22353f9d776db39a20288e8d6c37ef8cfe3317cf875eecfc2d\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64a4a911eed85daf18834cfaa86a79b7d266ff93ff5ba14005426219480ed662\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\ndependencies = [\n \"lock_api\",\n]\n\n[[package]]\nname = \"spki\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d1e996ef02c474957d681f1b05213dfb0abab947b446a62d37770b23500184a\"\ndependencies = [\n \"base64ct\",\n \"der\",\n]\n\n[[package]]\nname = \"sqlformat\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c12bc9199d1db8234678b7051747c07f517cdcf019262d1847b94ec8b1aee3e\"\ndependencies = [\n \"itertools\",\n \"nom\",\n \"unicode_categories\",\n]\n\n[[package]]\nname = \"sqlx\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e58421b6bc416714d5115a2ca953718f6c621a51b68e4f4922aea5a4391a721\"\ndependencies = [\n \"sqlx-core\",\n \"sqlx-macros\",\n \"sqlx-mysql\",\n \"sqlx-postgres\",\n \"sqlx-sqlite\",\n]\n\n[[package]]\nname = \"sqlx-core\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd4cef4251aabbae751a3710927945901ee1d97ee96d757f6880ebb9a79bfd53\"\ndependencies = [\n \"ahash 0.8.3\",\n \"atoi\",\n \"byteorder\",\n \"bytes\",\n \"chrono\",\n \"crc\",\n \"crossbeam-queue\",\n \"dotenvy\",\n \"either\",\n \"event-listener\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-intrusive\",\n \"futures-io\",\n \"futures-util\",\n \"hashlink\",\n \"hex\",\n \"indexmap 2.0.0\",\n \"log\",\n \"memchr\",\n \"native-tls\",\n \"once_cell\",\n \"paste\",\n \"percent-encoding\",\n \"serde\",\n \"serde_json\",\n \"sha2\",\n \"smallvec\",\n \"sqlformat\",\n \"thiserror\",\n \"tokio\",\n \"tokio-stream\",\n \"tracing\",\n \"url\",\n \"uuid\",\n]\n\n[[package]]\nname = \"sqlx-macros\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"208e3165167afd7f3881b16c1ef3f2af69fa75980897aac8874a0696516d12c2\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"sqlx-core\",\n \"sqlx-macros-core\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"sqlx-macros-core\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a4a8336d278c62231d87f24e8a7a74898156e34c1c18942857be2acb29c7dfc\"\ndependencies = [\n \"dotenvy\",\n \"either\",\n \"heck\",\n \"hex\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"sha2\",\n \"sqlx-core\",\n \"sqlx-mysql\",\n \"sqlx-postgres\",\n \"sqlx-sqlite\",\n \"syn 1.0.109\",\n \"tempfile\",\n \"tokio\",\n \"url\",\n]\n\n[[package]]\nname = \"sqlx-mysql\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ca69bf415b93b60b80dc8fda3cb4ef52b2336614d8da2de5456cc942a110482\"\ndependencies = [\n \"atoi\",\n \"base64 0.21.0\",\n \"bitflags 2.3.3\",\n \"byteorder\",\n \"bytes\",\n \"chrono\",\n \"crc\",\n \"digest\",\n \"dotenvy\",\n \"either\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-util\",\n \"generic-array\",\n \"hex\",\n \"hkdf\",\n \"hmac\",\n \"itoa\",\n \"log\",\n \"md-5\",\n \"memchr\",\n \"once_cell\",\n \"percent-encoding\",\n \"rand 0.8.5\",\n \"rsa\",\n \"serde\",\n \"sha1\",\n \"sha2\",\n \"smallvec\",\n \"sqlx-core\",\n \"stringprep\",\n \"thiserror\",\n \"tracing\",\n \"uuid\",\n \"whoami\",\n]\n\n[[package]]\nname = \"sqlx-postgres\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0db2df1b8731c3651e204629dd55e52adbae0462fa1bdcbed56a2302c18181e\"\ndependencies = [\n \"atoi\",\n \"base64 0.21.0\",\n \"bitflags 2.3.3\",\n \"byteorder\",\n \"chrono\",\n \"crc\",\n \"dotenvy\",\n \"etcetera\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-util\",\n \"hex\",\n \"hkdf\",\n \"hmac\",\n \"home\",\n \"itoa\",\n \"log\",\n \"md-5\",\n \"memchr\",\n \"once_cell\",\n \"rand 0.8.5\",\n \"serde\",\n \"serde_json\",\n \"sha1\",\n \"sha2\",\n \"smallvec\",\n \"sqlx-core\",\n \"stringprep\",\n \"thiserror\",\n \"tracing\",\n \"uuid\",\n \"whoami\",\n]\n\n[[package]]\nname = \"sqlx-sqlite\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be4c21bf34c7cae5b283efb3ac1bcc7670df7561124dc2f8bdc0b59be40f79a2\"\ndependencies = [\n \"atoi\",\n \"chrono\",\n \"flume\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-intrusive\",\n \"futures-util\",\n \"libsqlite3-sys\",\n \"log\",\n \"percent-encoding\",\n \"serde\",\n \"sqlx-core\",\n \"tracing\",\n \"url\",\n \"uuid\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"stringprep\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ee348cb74b87454fff4b551cbf727025810a004f88aeacae7f85b87f4e9a1c1\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.25.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"290d54ea6f91c969195bdbcd7442c8c2a2ba87da8bf60a7ee86a235d4bc1e125\"\n\n[[package]]\nname = \"subprocess\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c2e86926081dda636c546d8c5e641661049d7562a68f5488be4a1f7f66f6086\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6bdef32e8150c2a081110b42772ffe7d7c9032b606bc226c8260fd97e0976601\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04361975b3f5e348b2189d8dc55bc942f278b2d482a6a0365de5bdd62d351567\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"sync_wrapper\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160\"\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9fbec84f381d5795b08656e4912bec604d162bff9291d6189a78f4c8ab87998\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"redox_syscall 0.3.5\",\n \"rustix\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"222a222a5bfe1bba4a77b45ec488a741b3cb8872e5e499451fd7d0129c9c7c3d\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.3.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd0cbfecb4d19b5ea75bb31ad904eb5b9fa13f21079c3b92017ebdf4999a5890\"\ndependencies = [\n \"itoa\",\n \"libc\",\n \"num_threads\",\n \"serde\",\n \"time-core\",\n \"time-macros\",\n]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e153e1f1acaef8acc537e68b44906d2db6436e2b35ac2c6b42640fff91f00fd\"\n\n[[package]]\nname = \"time-macros\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd80a657e71da814b8e5d60d3374fc6d35045062245d80224748ae522dd76f36\"\ndependencies = [\n \"time-core\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tokio\"\nversion = \"1.27.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d0de47a4eecbe11f498978a9b29d792f0d2692d1dd003650c24c76510e3bc001\"\ndependencies = [\n \"autocfg\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"num_cpus\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"tracing\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"tokio-io-timeout\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30b74022ada614a1b4834de765f9bb43877f910cc8ce4be40e89042c9223a8bf\"\ndependencies = [\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61a573bdc87985e9d6ddeed1b3d864e8a302c847e40d647746df2f1de209d1ce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.28\",\n]\n\n[[package]]\nname = \"tokio-native-tls\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2\"\ndependencies = [\n \"native-tls\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-rustls\"\nversion = \"0.23.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c43ee83903113e03984cb9e5cebe6c04a5116269e900e3ddba8f068a62adda59\"\ndependencies = [\n \"rustls\",\n \"tokio\",\n \"webpki\",\n]\n\n[[package]]\nname = \"tokio-stream\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fb52b74f05dbf495a8fba459fdc331812b96aa086d9eb78101fa0d4569c3313\"\ndependencies = [\n \"futures-core\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-tungstenite\"\nversion = \"0.17.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f714dd15bead90401d77e04243611caec13726c2408afd5b31901dfcdcb3b181\"\ndependencies = [\n \"futures-util\",\n \"log\",\n \"rustls\",\n \"rustls-native-certs\",\n \"tokio\",\n \"tokio-rustls\",\n \"tungstenite 0.17.3\",\n \"webpki\",\n]\n\n[[package]]\nname = \"tokio-tungstenite\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54319c93411147bced34cb5609a80e0a8e44c5999c93903a81cd866630ec0bfd\"\ndependencies = [\n \"futures-util\",\n \"log\",\n \"tokio\",\n \"tungstenite 0.18.0\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.7.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5427d89453009325de0d8f342c9490009f76e999cb7672d77e46267448f7e6b2\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"pin-project-lite\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ab8ed2edee10b50132aed5f331333428b011c99402b5a534154ed15746f9622\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"239410c8609e8125456927e6707163a3b1fdb40561e4b803bc041f466ccfdc13\"\ndependencies = [\n \"indexmap 1.9.3\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"tonic\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f219fad3b929bef19b1f86fbc0358d35daed8f2cac972037ac0dc10bbb8d5fb\"\ndependencies = [\n \"async-stream\",\n \"async-trait\",\n \"axum\",\n \"base64 0.13.1\",\n \"bytes\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"hyper-timeout\",\n \"percent-encoding\",\n \"pin-project\",\n \"prost\",\n \"prost-derive\",\n \"tokio\",\n \"tokio-stream\",\n \"tokio-util\",\n \"tower\",\n \"tower-layer\",\n \"tower-service\",\n \"tracing\",\n \"tracing-futures\",\n]\n\n[[package]]\nname = \"totp-rs\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"332e333b188e843cb4cc477b2911160a533bcfc6e9e488d7bef25011f9e2ba1b\"\ndependencies = [\n \"base32\",\n \"constant_time_eq\",\n \"hmac\",\n \"sha1\",\n \"sha2\",\n \"url\",\n \"urlencoding\",\n]\n\n[[package]]\nname = \"tower\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c\"\ndependencies = [\n \"futures-core\",\n \"futures-util\",\n \"indexmap 1.9.3\",\n \"pin-project\",\n \"pin-project-lite\",\n \"rand 0.8.5\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tower-layer\",\n \"tower-service\",\n \"tracing\",\n]\n\n[[package]]\nname = \"tower-layer\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c20c8dbed6283a09604c3e69b4b7eeb54e298b8a600d4d5ecb5ad39de609f1d0\"\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8\"\ndependencies = [\n \"cfg-if\",\n \"log\",\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4017f8f45139870ca7e672686113917c71c7a6e02d4924eda67186083c03081a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24eb03ba0eab1fd845050058ce5e616558e8f8d8fca633e6b163fe25c797213a\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-futures\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2\"\ndependencies = [\n \"pin-project\",\n \"tracing\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ddad33d2d10b1ed7eb9d1f518a5674713876e97e5bb9b7345a7984fbb4f922\"\ndependencies = [\n \"lazy_static\",\n \"log\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30a651bc37f915e81f087d86e62a18eec5f79550c7faff886f7090b4ea757c77\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"regex\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"time\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3528ecfd12c466c6f163363caf2d02a71161dd5e1cc6ae7b34207ea2d42d81ed\"\n\n[[package]]\nname = \"tungstenite\"\nversion = \"0.17.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e27992fd6a8c29ee7eef28fc78349aa244134e10ad447ce3b9f0ac0ed0fa4ce0\"\ndependencies = [\n \"base64 0.13.1\",\n \"byteorder\",\n \"bytes\",\n \"http\",\n \"httparse\",\n \"log\",\n \"rand 0.8.5\",\n \"rustls\",\n \"sha-1\",\n \"thiserror\",\n \"url\",\n \"utf-8\",\n \"webpki\",\n]\n\n[[package]]\nname = \"tungstenite\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30ee6ab729cd4cf0fd55218530c4522ed30b7b6081752839b68fcec8d0960788\"\ndependencies = [\n \"base64 0.13.1\",\n \"byteorder\",\n \"bytes\",\n \"http\",\n \"httparse\",\n \"log\",\n \"rand 0.8.5\",\n \"sha1\",\n \"thiserror\",\n \"url\",\n \"utf-8\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"497961ef93d974e23eb6f433eb5fe1b7930b659f06d12dec6fc44a8f554c0bba\"\n\n[[package]]\nname = \"uncased\"\nversion = \"0.9.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09b01702b0fd0b3fadcf98e098780badda8742d4f4a7676615cad90e8ac73622\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"unicase\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92888ba5573ff080736b3648696b70cafad7d250551175acbaa4e0385b3e1460\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5464a87b239f13a63a501f2701565754bae92d243d4bb7eb12f6d57d2269bf4\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b\"\n\n[[package]]\nname = \"unicode_categories\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n\n[[package]]\nname = \"universal-hash\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d3160b73c9a19f7e2939a2fdad446c57c1bbbbf4d919d3213ff1267a580d8b5\"\ndependencies = [\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"unsafe-libyaml\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1865806a559042e51ab5414598446a5871b561d21b6764f2eabb0dd481d880a6\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a\"\n\n[[package]]\nname = \"url\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"143b538f18257fac9cad154828a57c6bf5157e1aa604d4816b5995bf6de87ae5\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n \"serde\",\n]\n\n[[package]]\nname = \"urlencoding\"\nversion = \"2.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8db7427f936968176eaa7cdf81b7f98b980b18495ec28f1b5791ac3bfe3eea9\"\n\n[[package]]\nname = \"utf-8\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"uuid\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b55a3fef2a1e3b3a00ce878640918820d3c51081576ac657d23af9fc7928fdb\"\ndependencies = [\n \"getrandom 0.2.9\",\n \"serde\",\n]\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"value-bag\"\nversion = \"1.0.0-alpha.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2209b78d1249f7e6f3293657c9779fe31ced465df091bbd433a1cf88e916ec55\"\ndependencies = [\n \"ctor\",\n \"version_check\",\n]\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"waker-fn\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d5b2c62b4012a3e1eca5a7e077d13b3bf498c4073e33ccd58626607748ceeca\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"36df944cda56c7d8d8b7496af378e6b16de9284591917d307c9b4d313c44e698\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"want\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\ndependencies = [\n \"log\",\n \"try-lock\",\n]\n\n[[package]]\nname = \"warpgate\"\nversion = \"0.8.0\"\ndependencies = [\n \"ansi_term\",\n \"anyhow\",\n \"async-trait\",\n \"atty\",\n \"bytes\",\n \"clap 3.2.23\",\n \"config\",\n \"console\",\n \"console-subscriber\",\n \"data-encoding\",\n \"dialoguer\",\n \"futures\",\n \"notify\",\n \"rcgen\",\n \"sd-notify\",\n \"sea-orm\",\n \"serde_json\",\n \"serde_yaml 0.8.26\",\n \"time\",\n \"tokio\",\n \"tracing\",\n \"tracing-subscriber\",\n \"uuid\",\n \"warpgate-admin\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-db-entities\",\n \"warpgate-protocol-http\",\n \"warpgate-protocol-mysql\",\n \"warpgate-protocol-ssh\",\n]\n\n[[package]]\nname = \"warpgate-admin\"\nversion = \"0.8.0\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"bytes\",\n \"chrono\",\n \"futures\",\n \"hex\",\n \"mime_guess\",\n \"poem\",\n \"poem-openapi\",\n \"regex\",\n \"russh-keys\",\n \"rust-embed\",\n \"sea-orm\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tokio\",\n \"tracing\",\n \"uuid\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-db-entities\",\n \"warpgate-protocol-ssh\",\n]\n\n[[package]]\nname = \"warpgate-common\"\nversion = \"0.8.0\"\ndependencies = [\n \"anyhow\",\n \"argon2\",\n \"async-trait\",\n \"bytes\",\n \"chrono\",\n \"data-encoding\",\n \"delegate\",\n \"futures\",\n \"humantime-serde\",\n \"once_cell\",\n \"password-hash 0.4.2\",\n \"poem\",\n \"poem-openapi\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n \"rustls\",\n \"rustls-pemfile\",\n \"sea-orm\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tokio\",\n \"totp-rs\",\n \"tracing\",\n \"tracing-core\",\n \"url\",\n \"uuid\",\n \"warpgate-sso\",\n \"webpki\",\n]\n\n[[package]]\nname = \"warpgate-core\"\nversion = \"0.8.0\"\ndependencies = [\n \"anyhow\",\n \"argon2\",\n \"async-trait\",\n \"bytes\",\n \"chrono\",\n \"data-encoding\",\n \"futures\",\n \"humantime-serde\",\n \"once_cell\",\n \"packet\",\n \"password-hash 0.4.2\",\n \"poem\",\n \"poem-openapi\",\n \"rand 0.8.5\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n \"rustls\",\n \"rustls-pemfile\",\n \"sea-orm\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tokio\",\n \"totp-rs\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-subscriber\",\n \"url\",\n \"uuid\",\n \"warpgate-common\",\n \"warpgate-db-entities\",\n \"warpgate-db-migrations\",\n \"warpgate-sso\",\n \"webpki\",\n]\n\n[[package]]\nname = \"warpgate-database-protocols\"\nversion = \"0.8.0\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"bytes\",\n \"futures-core\",\n \"futures-util\",\n \"memchr\",\n \"thiserror\",\n \"tokio\",\n]\n\n[[package]]\nname = \"warpgate-db-entities\"\nversion = \"0.8.0\"\ndependencies = [\n \"chrono\",\n \"poem-openapi\",\n \"sea-orm\",\n \"serde\",\n \"serde_json\",\n \"uuid\",\n \"warpgate-common\",\n]\n\n[[package]]\nname = \"warpgate-db-migrations\"\nversion = \"0.8.0\"\ndependencies = [\n \"async-std\",\n \"chrono\",\n \"sea-orm\",\n \"sea-orm-migration\",\n \"serde_json\",\n \"uuid\",\n]\n\n[[package]]\nname = \"warpgate-protocol-http\"\nversion = \"0.8.0\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"chrono\",\n \"cookie\",\n \"data-encoding\",\n \"delegate\",\n \"futures\",\n \"http\",\n \"once_cell\",\n \"percent-encoding\",\n \"poem\",\n \"poem-openapi\",\n \"regex\",\n \"reqwest\",\n \"serde\",\n \"serde_json\",\n \"tokio\",\n \"tokio-tungstenite 0.17.2\",\n \"tracing\",\n \"url\",\n \"uuid\",\n \"warpgate-admin\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-db-entities\",\n \"warpgate-sso\",\n \"warpgate-web\",\n]\n\n[[package]]\nname = \"warpgate-protocol-mysql\"\nversion = \"0.8.0\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"bytes\",\n \"mysql_common\",\n \"once_cell\",\n \"password-hash 0.2.3\",\n \"rand 0.8.5\",\n \"rustls\",\n \"rustls-native-certs\",\n \"rustls-pemfile\",\n \"sha1\",\n \"thiserror\",\n \"tokio\",\n \"tokio-rustls\",\n \"tracing\",\n \"uuid\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-database-protocols\",\n \"warpgate-db-entities\",\n \"webpki\",\n]\n\n[[package]]\nname = \"warpgate-protocol-ssh\"\nversion = \"0.8.0\"\ndependencies = [\n \"ansi_term\",\n \"anyhow\",\n \"async-trait\",\n \"bimap\",\n \"bytes\",\n \"dialoguer\",\n \"futures\",\n \"russh\",\n \"russh-keys\",\n \"sea-orm\",\n \"thiserror\",\n \"time\",\n \"tokio\",\n \"tracing\",\n \"uuid\",\n \"warpgate-common\",\n \"warpgate-core\",\n \"warpgate-db-entities\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"warpgate-sso\"\nversion = \"0.8.0\"\ndependencies = [\n \"bytes\",\n \"data-encoding\",\n \"jsonwebtoken\",\n \"once_cell\",\n \"openidconnect\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tokio\",\n \"tracing\",\n]\n\n[[package]]\nname = \"warpgate-web\"\nversion = \"0.8.0\"\ndependencies = [\n \"rust-embed\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31f8dcbc21f30d9b8f2ea926ecb58f6b91192c17e9d33594b3df58b2007ca53b\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95ce90fd5bcc06af55a641a86428ee4229e44e07033963a2290a8e241607ccb9\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f219e0d211ba40266969f6dbdd90636da12f75bee4fc9d6c23d1260dadb51454\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c21f77c0bedc37fd5dc21f897894a5ca01e7bb159884559461862ae90c0b4c5\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2aff81306fcac3c7515ad4e177f521b5c9a15f2b08f4e32d823066102f35a5f6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.84\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0046fef7e28c3804e5e38bfa31ea2a0f73905319b677e57ebe37e49358989b5d\"\n\n[[package]]\nname = \"wasm-streams\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6bbae3363c08332cadccd13b67db371814cd214c2524020932f0804b8cf7c078\"\ndependencies = [\n \"futures-util\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e33b99f4b23ba3eec1a53ac264e35a755f00e966e0065077d6027c0f575b0b97\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"webpki\"\nversion = \"0.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f095d78192e208183081cc07bc5515ef55216397af48b873e5edcd72637fa1bd\"\ndependencies = [\n \"ring\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.22.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c71e40d7d2c34a5106301fb632274ca37242cd0c9d3e64dbece371a40a2d87\"\ndependencies = [\n \"webpki\",\n]\n\n[[package]]\nname = \"whoami\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c70234412ca409cc04e864e89523cb0fc37f5e1344ebed5a3ebf4192b6b9f68\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e686886bc078bc1b0b600cac0147aadb815089b6e4da64016cbd754b6342700f\"\ndependencies = [\n \"windows-targets 0.48.0\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.42.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.42.2\",\n \"windows_aarch64_msvc 0.42.2\",\n \"windows_i686_gnu 0.42.2\",\n \"windows_i686_msvc 0.42.2\",\n \"windows_x86_64_gnu 0.42.2\",\n \"windows_x86_64_gnullvm 0.42.2\",\n \"windows_x86_64_msvc 0.42.2\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\ndependencies = [\n \"windows-targets 0.42.2\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.0\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.42.2\",\n \"windows_aarch64_msvc 0.42.2\",\n \"windows_i686_gnu 0.42.2\",\n \"windows_i686_msvc 0.42.2\",\n \"windows_x86_64_gnu 0.42.2\",\n \"windows_x86_64_gnullvm 0.42.2\",\n \"windows_x86_64_msvc 0.42.2\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.0\",\n \"windows_aarch64_msvc 0.48.0\",\n \"windows_i686_gnu 0.48.0\",\n \"windows_i686_msvc 0.48.0\",\n \"windows_x86_64_gnu 0.48.0\",\n \"windows_x86_64_gnullvm 0.48.0\",\n \"windows_x86_64_msvc 0.48.0\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae8970b36c66498d8ff1d66685dc86b91b29db0c7739899012f63a63814b4b28\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winreg\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"yaml-rust\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85\"\ndependencies = [\n \"linked-hash-map\",\n]\n\n[[package]]\nname = \"yasna\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e17bb3549cc1321ae1296b9cdc2698e2b6cb1992adfa19a8c72e5b7a738f44cd\"\ndependencies = [\n \"bit-vec\",\n \"num-bigint\",\n \"time\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a0956f1ba7c7909bfb66c2e9e4124ab6f6482560f6628b5aaeba39207c9aad9\"\n", "[package]\nedition = \"2021\"\nlicense = \"Apache-2.0\"\nname = \"warpgate-protocol-ssh\"\nversion = \"0.8.0\"\n\n[dependencies]\nansi_term = \"0.12\"\nanyhow = { version = \"1.0\", features = [\"std\"] }\nasync-trait = \"0.1\"\nbimap = \"0.6\"\nbytes = \"1.3\"\ndialoguer = \"0.10\"\nfutures = \"0.3\"\nrussh = { version = \"0.39.0\", features = [\"vendored-openssl\"] }\n# russh = { version = \"0.35.0-beta.6\", features = [\"vendored-openssl\"], path = \"../../russh/russh\"}\nrussh-keys = { version = \"0.38.0\", features = [\"vendored-openssl\"] }\n# russh-keys = { version = \"0.23.0-beta.1\", features = [\"vendored-openssl\"], path = \"../../russh/russh-keys\" }\nsea-orm = { version = \"0.12.2\", features = [\n    \"runtime-tokio-native-tls\",\n], default-features = false }\nthiserror = \"1.0\"\ntime = \"0.3\"\ntokio = { version = \"1.20\", features = [\"tracing\", \"signal\"] }\ntracing = \"0.1\"\nuuid = { version = \"1.2\", features = [\"v4\"] }\nwarpgate-common = { version = \"*\", path = \"../warpgate-common\" }\nwarpgate-core = { version = \"*\", path = \"../warpgate-core\" }\nwarpgate-db-entities = { version = \"*\", path = \"../warpgate-db-entities\" }\nzeroize = \"^1.5\"\n", "use std::fmt::Debug;\n\nuse async_trait::async_trait;\nuse bytes::Bytes;\nuse russh::server::{Auth, Handle, Msg, Session};\nuse russh::{Channel, ChannelId, Pty, Sig};\nuse russh_keys::key::PublicKey;\nuse tokio::sync::mpsc::UnboundedSender;\nuse tokio::sync::oneshot;\nuse tracing::*;\nuse warpgate_common::{Secret, SessionId};\n\nuse crate::common::{PtyRequest, ServerChannelId};\nuse crate::{DirectTCPIPParams, X11Request};\n\npub struct HandleWrapper(pub Handle);\n\nimpl Debug for HandleWrapper {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"HandleWrapper\")\n    }\n}\n\n#[derive(Debug)]\npub enum ServerHandlerEvent {\n    Authenticated(HandleWrapper),\n    ChannelOpenSession(ServerChannelId, oneshot::Sender<bool>),\n    SubsystemRequest(ServerChannelId, String, oneshot::Sender<bool>),\n    PtyRequest(ServerChannelId, PtyRequest, oneshot::Sender<()>),\n    ShellRequest(ServerChannelId, oneshot::Sender<bool>),\n    AuthPublicKey(Secret<String>, PublicKey, oneshot::Sender<Auth>),\n    AuthPublicKeyOffer(Secret<String>, PublicKey, oneshot::Sender<bool>),\n    AuthPassword(Secret<String>, Secret<String>, oneshot::Sender<Auth>),\n    AuthKeyboardInteractive(\n        Secret<String>,\n        Option<Secret<String>>,\n        oneshot::Sender<Auth>,\n    ),\n    Data(ServerChannelId, Bytes, oneshot::Sender<()>),\n    ExtendedData(ServerChannelId, Bytes, u32, oneshot::Sender<()>),\n    ChannelClose(ServerChannelId, oneshot::Sender<()>),\n    ChannelEof(ServerChannelId, oneshot::Sender<()>),\n    WindowChangeRequest(ServerChannelId, PtyRequest, oneshot::Sender<()>),\n    Signal(ServerChannelId, Sig, oneshot::Sender<()>),\n    ExecRequest(ServerChannelId, Bytes, oneshot::Sender<bool>),\n    ChannelOpenDirectTcpIp(ServerChannelId, DirectTCPIPParams, oneshot::Sender<bool>),\n    EnvRequest(ServerChannelId, String, String, oneshot::Sender<()>),\n    X11Request(ServerChannelId, X11Request, oneshot::Sender<()>),\n    TcpIpForward(String, u32, oneshot::Sender<bool>),\n    CancelTcpIpForward(String, u32, oneshot::Sender<bool>),\n    Disconnect,\n}\n\npub struct ServerHandler {\n    pub id: SessionId,\n    pub event_tx: UnboundedSender<ServerHandlerEvent>,\n}\n\n#[derive(thiserror::Error, Debug)]\npub enum ServerHandlerError {\n    #[error(\"channel disconnected\")]\n    ChannelSend,\n}\n\nimpl ServerHandler {\n    fn send_event(&self, event: ServerHandlerEvent) -> Result<(), ServerHandlerError> {\n        self.event_tx\n            .send(event)\n            .map_err(|_| ServerHandlerError::ChannelSend)\n    }\n}\n\n#[async_trait]\nimpl russh::server::Handler for ServerHandler {\n    type Error = anyhow::Error;\n\n    async fn auth_succeeded(self, session: Session) -> Result<(Self, Session), Self::Error> {\n        let handle = session.handle();\n        self.send_event(ServerHandlerEvent::Authenticated(HandleWrapper(handle)))?;\n        Ok((self, session))\n    }\n\n    async fn channel_open_session(\n        self,\n        channel: Channel<Msg>,\n        session: Session,\n    ) -> Result<(Self, bool, Session), Self::Error> {\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::ChannelOpenSession(\n            ServerChannelId(channel.id()),\n            tx,\n        ))?;\n\n        let allowed = rx.await.unwrap_or(false);\n        Ok((self, allowed, session))\n    }\n\n    async fn subsystem_request(\n        self,\n        channel: ChannelId,\n        name: &str,\n        mut session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let name = name.to_string();\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::SubsystemRequest(\n            ServerChannelId(channel),\n            name,\n            tx,\n        ))?;\n\n        if rx.await.unwrap_or(false) {\n            session.channel_success(channel)\n        } else {\n            session.channel_failure(channel)\n        }\n\n        Ok((self, session))\n    }\n\n    async fn pty_request(\n        self,\n        channel: ChannelId,\n        term: &str,\n        col_width: u32,\n        row_height: u32,\n        pix_width: u32,\n        pix_height: u32,\n        modes: &[(Pty, u32)],\n        mut session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let term = term.to_string();\n        let modes = modes\n            .iter()\n            .take_while(|x| (x.0 as u8) > 0 && (x.0 as u8) < 160)\n            .map(Clone::clone)\n            .collect();\n\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::PtyRequest(\n            ServerChannelId(channel),\n            PtyRequest {\n                term,\n                col_width,\n                row_height,\n                pix_width,\n                pix_height,\n                modes,\n            },\n            tx,\n        ))?;\n\n        let _ = rx.await;\n        session.channel_success(channel);\n        Ok((self, session))\n    }\n\n    async fn shell_request(\n        self,\n        channel: ChannelId,\n        mut session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::ShellRequest(\n            ServerChannelId(channel),\n            tx,\n        ))?;\n\n        if rx.await.unwrap_or(false) {\n            session.channel_success(channel)\n        } else {\n            session.channel_failure(channel)\n        }\n\n        Ok((self, session))\n    }\n\n    async fn auth_publickey_offered(\n        self,\n        user: &str,\n        key: &russh_keys::key::PublicKey,\n    ) -> Result<(Self, Auth), Self::Error> {\n        let user = Secret::new(user.to_string());\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::AuthPublicKeyOffer(\n            user,\n            key.clone(),\n            tx,\n        ))?;\n\n        let result = rx.await.unwrap_or(false);\n        Ok((\n            self,\n            if result {\n                Auth::Accept\n            } else {\n                Auth::Reject {\n                    proceed_with_methods: None,\n                }\n            },\n        ))\n    }\n\n    async fn auth_publickey(\n        self,\n        user: &str,\n        key: &russh_keys::key::PublicKey,\n    ) -> Result<(Self, Auth), Self::Error> {\n        let user = Secret::new(user.to_string());\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::AuthPublicKey(user, key.clone(), tx))?;\n\n        let result = rx.await.unwrap_or(Auth::UnsupportedMethod);\n        Ok((self, result))\n    }\n\n    async fn auth_password(self, user: &str, password: &str) -> Result<(Self, Auth), Self::Error> {\n        let user = Secret::new(user.to_string());\n        let password = Secret::new(password.to_string());\n\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::AuthPassword(user, password, tx))?;\n\n        let result = rx.await.unwrap_or(Auth::UnsupportedMethod);\n        Ok((self, result))\n    }\n\n    async fn auth_keyboard_interactive(\n        self,\n        user: &str,\n        _submethods: &str,\n        response: Option<russh::server::Response<'async_trait>>,\n    ) -> Result<(Self, Auth), Self::Error> {\n        let user = Secret::new(user.to_string());\n        let response = response\n            .and_then(|mut r| r.next())\n            .and_then(|b| String::from_utf8(b.to_vec()).ok())\n            .map(Secret::new);\n\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::AuthKeyboardInteractive(\n            user, response, tx,\n        ))?;\n\n        let result = rx.await.unwrap_or(Auth::UnsupportedMethod);\n        Ok((self, result))\n    }\n\n    async fn data(\n        self,\n        channel: ChannelId,\n        data: &[u8],\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let channel = ServerChannelId(channel);\n        let data = Bytes::from(data.to_vec());\n\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::Data(channel, data, tx))?;\n\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn extended_data(\n        self,\n        channel: ChannelId,\n        code: u32,\n        data: &[u8],\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let channel = ServerChannelId(channel);\n        let data = Bytes::from(data.to_vec());\n        let (tx, rx) = oneshot::channel();\n\n        self.send_event(ServerHandlerEvent::ExtendedData(channel, data, code, tx))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn channel_close(\n        self,\n        channel: ChannelId,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let channel = ServerChannelId(channel);\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::ChannelClose(channel, tx))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn window_change_request(\n        self,\n        channel: ChannelId,\n        col_width: u32,\n        row_height: u32,\n        pix_width: u32,\n        pix_height: u32,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::WindowChangeRequest(\n            ServerChannelId(channel),\n            PtyRequest {\n                term: \"\".to_string(),\n                col_width,\n                row_height,\n                pix_width,\n                pix_height,\n                modes: vec![],\n            },\n            tx,\n        ))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn channel_eof(\n        self,\n        channel: ChannelId,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let channel = ServerChannelId(channel);\n        let (tx, rx) = oneshot::channel();\n\n        self.event_tx\n            .send(ServerHandlerEvent::ChannelEof(channel, tx))\n            .map_err(|_| ServerHandlerError::ChannelSend)?;\n\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn signal(\n        self,\n        channel: ChannelId,\n        signal_name: russh::Sig,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::Signal(\n            ServerChannelId(channel),\n            signal_name,\n            tx,\n        ))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn exec_request(\n        self,\n        channel: ChannelId,\n        data: &[u8],\n        mut session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let data = Bytes::from(data.to_vec());\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::ExecRequest(\n            ServerChannelId(channel),\n            data,\n            tx,\n        ))?;\n\n        if rx.await.unwrap_or(false) {\n            session.channel_success(channel)\n        } else {\n            session.channel_failure(channel)\n        }\n\n        Ok((self, session))\n    }\n\n    async fn env_request(\n        self,\n        channel: ChannelId,\n        variable_name: &str,\n        variable_value: &str,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let variable_name = variable_name.to_string();\n        let variable_value = variable_value.to_string();\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::EnvRequest(\n            ServerChannelId(channel),\n            variable_name,\n            variable_value,\n            tx,\n        ))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn channel_open_direct_tcpip(\n        self,\n        channel: Channel<Msg>,\n        host_to_connect: &str,\n        port_to_connect: u32,\n        originator_address: &str,\n        originator_port: u32,\n        session: Session,\n    ) -> Result<(Self, bool, Session), Self::Error> {\n        let host_to_connect = host_to_connect.to_string();\n        let originator_address = originator_address.to_string();\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::ChannelOpenDirectTcpIp(\n            ServerChannelId(channel.id()),\n            DirectTCPIPParams {\n                host_to_connect,\n                port_to_connect,\n                originator_address,\n                originator_port,\n            },\n            tx,\n        ))?;\n        let allowed = rx.await.unwrap_or(false);\n        Ok((self, allowed, session))\n    }\n\n    async fn x11_request(\n        self,\n        channel: ChannelId,\n        single_conection: bool,\n        x11_auth_protocol: &str,\n        x11_auth_cookie: &str,\n        x11_screen_number: u32,\n        session: Session,\n    ) -> Result<(Self, Session), Self::Error> {\n        let x11_auth_protocol = x11_auth_protocol.to_string();\n        let x11_auth_cookie = x11_auth_cookie.to_string();\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::X11Request(\n            ServerChannelId(channel),\n            X11Request {\n                single_conection,\n                x11_auth_protocol,\n                x11_auth_cookie,\n                x11_screen_number,\n            },\n            tx,\n        ))?;\n        let _ = rx.await;\n        Ok((self, session))\n    }\n\n    async fn tcpip_forward(\n        self,\n        address: &str,\n        port: &mut u32,\n        mut session: Session,\n    ) -> Result<(Self, bool, Session), Self::Error> {\n        let address = address.to_string();\n        let port = *port;\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::TcpIpForward(address, port, tx))?;\n        let allowed = rx.await.unwrap_or(false);\n        if allowed {\n            session.request_success()\n        } else {\n            session.request_failure()\n        }\n        Ok((self, allowed, session))\n    }\n\n    async fn cancel_tcpip_forward(\n        self,\n        address: &str,\n        port: u32,\n        mut session: Session,\n    ) -> Result<(Self, bool, Session), Self::Error> {\n        let address = address.to_string();\n        let (tx, rx) = oneshot::channel();\n        self.send_event(ServerHandlerEvent::CancelTcpIpForward(address, port, tx))?;\n        let allowed = rx.await.unwrap_or(false);\n        if allowed {\n            session.request_success()\n        } else {\n            session.request_failure()\n        }\n        Ok((self, allowed, session))\n    }\n}\n\nimpl Drop for ServerHandler {\n    fn drop(&mut self) {\n        debug!(\"Dropped\");\n        let _ = self.event_tx.send(ServerHandlerEvent::Disconnect);\n    }\n}\n\nimpl Debug for ServerHandler {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"ServerHandler\")\n    }\n}\n", "use std::borrow::Cow;\nuse std::collections::hash_map::Entry::Vacant;\nuse std::collections::{HashMap, HashSet};\nuse std::net::{Ipv4Addr, SocketAddr};\nuse std::pin::Pin;\nuse std::str::FromStr;\nuse std::sync::Arc;\nuse std::task::Poll;\n\nuse ansi_term::Colour;\nuse anyhow::{Context, Result};\nuse bimap::BiMap;\nuse bytes::Bytes;\nuse futures::{Future, FutureExt};\nuse russh::{CryptoVec, MethodSet, Sig};\nuse russh_keys::key::{PublicKey, SignatureHash};\nuse russh_keys::PublicKeyBase64;\nuse tokio::sync::mpsc::{UnboundedReceiver, UnboundedSender};\nuse tokio::sync::{broadcast, oneshot, Mutex};\nuse tracing::*;\nuse uuid::Uuid;\nuse warpgate_common::auth::{AuthCredential, AuthResult, AuthSelector, AuthState, CredentialKind};\nuse warpgate_common::eventhub::{EventHub, EventSender, EventSubscription};\nuse warpgate_common::{\n    Secret, SessionId, SshHostKeyVerificationMode, Target, TargetOptions, TargetSSHOptions,\n    WarpgateError,\n};\nuse warpgate_core::recordings::{\n    self, ConnectionRecorder, TerminalRecorder, TerminalRecordingStreamId, TrafficConnectionParams,\n    TrafficRecorder,\n};\nuse warpgate_core::{authorize_ticket, consume_ticket, Services, WarpgateServerHandle};\n\nuse super::channel_writer::ChannelWriter;\nuse super::russh_handler::ServerHandlerEvent;\nuse super::service_output::ServiceOutput;\nuse super::session_handle::SessionHandleCommand;\nuse crate::compat::ContextExt;\nuse crate::server::service_output::ERASE_PROGRESS_SPINNER;\nuse crate::{\n    ChannelOperation, ConnectionError, DirectTCPIPParams, PtyRequest, RCCommand, RCCommandReply,\n    RCEvent, RCState, RemoteClient, ServerChannelId, SshClientError, X11Request,\n};\n\n#[derive(Clone)]\n#[allow(clippy::large_enum_variant)]\nenum TargetSelection {\n    None,\n    NotFound(String),\n    Found(Target, TargetSSHOptions),\n}\n\n#[derive(Debug)]\nenum Event {\n    Command(SessionHandleCommand),\n    ServerHandler(ServerHandlerEvent),\n    ConsoleInput(Bytes),\n    ServiceOutput(Bytes),\n    Client(RCEvent),\n}\n\nenum KeyboardInteractiveState {\n    None,\n    OtpRequested,\n    WebAuthRequested(broadcast::Receiver<AuthResult>),\n}\n\npub struct ServerSession {\n    pub id: SessionId,\n    username: Option<String>,\n    session_handle: Option<russh::server::Handle>,\n    pty_channels: Vec<Uuid>,\n    all_channels: Vec<Uuid>,\n    channel_recorders: HashMap<Uuid, TerminalRecorder>,\n    channel_map: BiMap<ServerChannelId, Uuid>,\n    channel_pty_size_map: HashMap<Uuid, PtyRequest>,\n    rc_tx: UnboundedSender<(RCCommand, Option<RCCommandReply>)>,\n    rc_abort_tx: UnboundedSender<()>,\n    rc_state: RCState,\n    remote_address: SocketAddr,\n    services: Services,\n    server_handle: Arc<Mutex<WarpgateServerHandle>>,\n    target: TargetSelection,\n    traffic_recorders: HashMap<(String, u32), TrafficRecorder>,\n    traffic_connection_recorders: HashMap<Uuid, ConnectionRecorder>,\n    hub: EventHub<Event>,\n    event_sender: EventSender<Event>,\n    main_event_subscription: EventSubscription<Event>,\n    service_output: ServiceOutput,\n    channel_writer: ChannelWriter,\n    auth_state: Option<Arc<Mutex<AuthState>>>,\n    keyboard_interactive_state: KeyboardInteractiveState,\n}\n\nfn session_debug_tag(id: &SessionId, remote_address: &SocketAddr) -> String {\n    format!(\"[{id} - {remote_address}]\")\n}\n\nimpl std::fmt::Debug for ServerSession {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{}\", session_debug_tag(&self.id, &self.remote_address))\n    }\n}\n\nimpl ServerSession {\n    pub async fn start(\n        remote_address: SocketAddr,\n        services: &Services,\n        server_handle: Arc<Mutex<WarpgateServerHandle>>,\n        mut session_handle_rx: UnboundedReceiver<SessionHandleCommand>,\n        mut handler_event_rx: UnboundedReceiver<ServerHandlerEvent>,\n    ) -> Result<impl Future<Output = Result<()>>> {\n        let id = server_handle.lock().await.id();\n\n        let _span = info_span!(\"SSH\", session=%id);\n        let _enter = _span.enter();\n\n        let mut rc_handles = RemoteClient::create(id, services.clone())?;\n\n        let (hub, event_sender) = EventHub::setup();\n        let main_event_subscription = hub\n            .subscribe(|e| !matches!(e, Event::ConsoleInput(_)))\n            .await;\n\n        let mut this = Self {\n            id,\n            username: None,\n            session_handle: None,\n            pty_channels: vec![],\n            all_channels: vec![],\n            channel_recorders: HashMap::new(),\n            channel_map: BiMap::new(),\n            channel_pty_size_map: HashMap::new(),\n            rc_tx: rc_handles.command_tx.clone(),\n            rc_abort_tx: rc_handles.abort_tx,\n            rc_state: RCState::NotInitialized,\n            remote_address,\n            services: services.clone(),\n            server_handle,\n            target: TargetSelection::None,\n            traffic_recorders: HashMap::new(),\n            traffic_connection_recorders: HashMap::new(),\n            hub,\n            event_sender: event_sender.clone(),\n            main_event_subscription,\n            service_output: ServiceOutput::new(),\n            channel_writer: ChannelWriter::new(),\n            auth_state: None,\n            keyboard_interactive_state: KeyboardInteractiveState::None,\n        };\n\n        let mut so_rx = this.service_output.subscribe();\n        let so_sender = event_sender.clone();\n        tokio::spawn(async move {\n            loop {\n                match so_rx.recv().await {\n                    Ok(data) => {\n                        if so_sender\n                            .send_once(Event::ServiceOutput(data))\n                            .await\n                            .is_err()\n                        {\n                            break;\n                        }\n                    }\n                    Err(broadcast::error::RecvError::Closed) => break,\n                    Err(_) => (),\n                }\n            }\n        });\n\n        let name = format!(\"SSH {id} session control\");\n        tokio::task::Builder::new().name(&name).spawn({\n            let sender = event_sender.clone();\n            async move {\n                while let Some(command) = session_handle_rx.recv().await {\n                    if sender.send_once(Event::Command(command)).await.is_err() {\n                        break;\n                    }\n                }\n            }\n        })?;\n\n        let name = format!(\"SSH {id} client events\");\n        tokio::task::Builder::new().name(&name).spawn({\n            let sender = event_sender.clone();\n            async move {\n                while let Some(e) = rc_handles.event_rx.recv().await {\n                    if sender.send_once(Event::Client(e)).await.is_err() {\n                        break;\n                    }\n                }\n            }\n        })?;\n\n        let name = format!(\"SSH {id} server handler events\");\n        tokio::task::Builder::new().name(&name).spawn({\n            let sender = event_sender.clone();\n            async move {\n                while let Some(e) = handler_event_rx.recv().await {\n                    if sender.send_once(Event::ServerHandler(e)).await.is_err() {\n                        break;\n                    }\n                }\n            }\n        })?;\n\n        Ok(async move {\n            while let Some(event) = this.get_next_event().await {\n                this.handle_event(event).await?;\n            }\n            debug!(\"No more events\");\n            Ok::<_, anyhow::Error>(())\n        })\n    }\n\n    async fn get_next_event(&mut self) -> Option<Event> {\n        self.main_event_subscription.recv().await\n    }\n\n    async fn get_auth_state(&mut self, username: &str) -> Result<Arc<Mutex<AuthState>>> {\n        #[allow(clippy::unwrap_used)]\n        if self.auth_state.is_none()\n            || self.auth_state.as_ref().unwrap().lock().await.username() != username\n        {\n            let state = self\n                .services\n                .auth_state_store\n                .lock()\n                .await\n                .create(Some(&self.id), username, crate::PROTOCOL_NAME)\n                .await?\n                .1;\n            self.auth_state = Some(state);\n        }\n        #[allow(clippy::unwrap_used)]\n        Ok(self.auth_state.as_ref().map(Clone::clone).unwrap())\n    }\n\n    pub fn make_logging_span(&self) -> tracing::Span {\n        let client_ip = self.remote_address.ip().to_string();\n        match self.username {\n            Some(ref username) => {\n                info_span!(\"SSH\", session=%self.id, session_username=%username, %client_ip)\n            }\n            None => info_span!(\"SSH\", session=%self.id, %client_ip),\n        }\n    }\n\n    fn map_channel(&self, ch: &ServerChannelId) -> Result<Uuid, WarpgateError> {\n        self.channel_map\n            .get_by_left(ch)\n            .cloned()\n            .ok_or(WarpgateError::InconsistentState)\n    }\n\n    fn map_channel_reverse(&self, ch: &Uuid) -> Result<ServerChannelId> {\n        self.channel_map\n            .get_by_right(ch)\n            .cloned()\n            .ok_or_else(|| anyhow::anyhow!(\"Channel not known\"))\n    }\n\n    pub async fn emit_service_message(&mut self, msg: &str) -> Result<()> {\n        debug!(\"Service message: {}\", msg);\n\n        self.service_output.emit_output(Bytes::from(format!(\n            \"{}{} {}\\r\\n\",\n            ERASE_PROGRESS_SPINNER,\n            Colour::Black.on(Colour::White).paint(\" Warpgate \"),\n            msg.replace('\\n', \"\\r\\n\"),\n        )));\n\n        Ok(())\n    }\n\n    pub async fn emit_pty_output(&mut self, data: &[u8]) -> Result<()> {\n        let channels = self.pty_channels.clone();\n        for channel in channels {\n            let channel = self.map_channel_reverse(&channel)?;\n            if let Some(session) = self.session_handle.clone() {\n                self.channel_writer\n                    .write(session, channel.0, CryptoVec::from_slice(data));\n            }\n        }\n        Ok(())\n    }\n\n    pub async fn maybe_connect_remote(&mut self) -> Result<()> {\n        match self.target.clone() {\n            TargetSelection::None => {\n                anyhow::bail!(\"Invalid session state (target not set)\")\n            }\n            TargetSelection::NotFound(name) => {\n                self.emit_service_message(&format!(\"Selected target not found: {name}\"))\n                    .await?;\n                self.disconnect_server().await;\n                anyhow::bail!(\"Target not found: {}\", name);\n            }\n            TargetSelection::Found(target, ssh_options) => {\n                if self.rc_state == RCState::NotInitialized {\n                    self.connect_remote(target, ssh_options).await?;\n                }\n            }\n        }\n        Ok(())\n    }\n\n    async fn connect_remote(\n        &mut self,\n        target: Target,\n        ssh_options: TargetSSHOptions,\n    ) -> Result<()> {\n        self.rc_state = RCState::Connecting;\n        self.send_command(RCCommand::Connect(ssh_options))\n            .map_err(|_| anyhow::anyhow!(\"cannot send command\"))?;\n        self.service_output.show_progress();\n        self.emit_service_message(&format!(\"Selected target: {}\", target.name))\n            .await?;\n\n        Ok(())\n    }\n\n    fn handle_event<'a>(\n        &'a mut self,\n        event: Event,\n    ) -> Pin<Box<dyn Future<Output = Result<(), WarpgateError>> + Send + 'a>> {\n        async move {\n            match event {\n                Event::Client(RCEvent::Done) => Err(WarpgateError::SessionEnd)?,\n                Event::ServerHandler(ServerHandlerEvent::Disconnect) => {\n                    Err(WarpgateError::SessionEnd)?\n                }\n                Event::Client(e) => {\n                    debug!(event=?e, \"Event\");\n                    let span = self.make_logging_span();\n                    if let Err(err) = self.handle_remote_event(e).instrument(span).await {\n                        error!(\"Client event handler error: {:?}\", err);\n                        // break;\n                    }\n                }\n                Event::ServerHandler(e) => {\n                    let span = self.make_logging_span();\n                    if let Err(err) = self.handle_server_handler_event(e).instrument(span).await {\n                        error!(\"Server event handler error: {:?}\", err);\n                        // break;\n                    }\n                }\n                Event::Command(command) => {\n                    debug!(?command, \"Session control\");\n                    if let Err(err) = self.handle_session_control(command).await {\n                        error!(\"Command handler error: {:?}\", err);\n                        // break;\n                    }\n                }\n                Event::ServiceOutput(data) => {\n                    let _ = self.emit_pty_output(&data).await;\n                }\n                Event::ConsoleInput(_) => (),\n            }\n            Ok(())\n        }\n        .boxed()\n    }\n\n    async fn handle_server_handler_event(&mut self, event: ServerHandlerEvent) -> Result<()> {\n        match event {\n            ServerHandlerEvent::Authenticated(handle) => {\n                self.session_handle = Some(handle.0);\n            }\n\n            ServerHandlerEvent::ChannelOpenSession(server_channel_id, reply) => {\n                let channel = Uuid::new_v4();\n                self.channel_map.insert(server_channel_id, channel);\n\n                info!(%channel, \"Opening session channel\");\n                return match self\n                    .send_command_and_wait(RCCommand::Channel(channel, ChannelOperation::OpenShell))\n                    .await\n                {\n                    Ok(()) => {\n                        self.all_channels.push(channel);\n                        let _ = reply.send(true);\n                        Ok(())\n                    }\n                    Err(SshClientError::Russh(russh::Error::ChannelOpenFailure(_))) => {\n                        let _ = reply.send(false);\n                        Ok(())\n                    }\n                    Err(x) => Err(x.into()),\n                };\n            }\n\n            ServerHandlerEvent::SubsystemRequest(server_channel_id, name, reply) => {\n                return match self\n                    ._channel_subsystem_request(server_channel_id, name)\n                    .await\n                {\n                    Ok(()) => {\n                        let _ = reply.send(true);\n                        Ok(())\n                    }\n                    Err(SshClientError::Russh(russh::Error::ChannelOpenFailure(_))) => {\n                        let _ = reply.send(false);\n                        Ok(())\n                    }\n                    Err(x) => Err(x.into()),\n                }\n            }\n\n            ServerHandlerEvent::PtyRequest(server_channel_id, request, _) => {\n                let channel_id = self.map_channel(&server_channel_id)?;\n                self.channel_pty_size_map\n                    .insert(channel_id, request.clone());\n                if let Some(recorder) = self.channel_recorders.get_mut(&channel_id) {\n                    if let Err(error) = recorder\n                        .write_pty_resize(request.col_width, request.row_height)\n                        .await\n                    {\n                        error!(%channel_id, ?error, \"Failed to record terminal data\");\n                        self.channel_recorders.remove(&channel_id);\n                    }\n                }\n                self.send_command_and_wait(RCCommand::Channel(\n                    channel_id,\n                    ChannelOperation::RequestPty(request),\n                ))\n                .await?;\n                let _ = self\n                    .session_handle\n                    .as_mut()\n                    .context(\"Invalid session state\")?\n                    .channel_success(server_channel_id.0)\n                    .await;\n                self.pty_channels.push(channel_id);\n            }\n\n            ServerHandlerEvent::ShellRequest(server_channel_id, reply) => {\n                let channel_id = self.map_channel(&server_channel_id)?;\n                let _ = self.maybe_connect_remote().await;\n\n                let _ = self.send_command(RCCommand::Channel(\n                    channel_id,\n                    ChannelOperation::RequestShell,\n                ));\n\n                self.start_terminal_recording(\n                    channel_id,\n                    format!(\"shell-channel-{}\", server_channel_id.0),\n                )\n                .await;\n\n                info!(%channel_id, \"Opening shell\");\n\n                let _ = self\n                    .session_handle\n                    .as_mut()\n                    .context(\"Invalid session state\")?\n                    .channel_success(server_channel_id.0)\n                    .await;\n\n                let _ = reply.send(true);\n            }\n\n            ServerHandlerEvent::AuthPublicKey(username, key, reply) => {\n                let _ = reply.send(self._auth_publickey(username, key).await);\n            }\n\n            ServerHandlerEvent::AuthPublicKeyOffer(username, key, reply) => {\n                let _ = reply.send(self._auth_publickey_offer(username, key).await);\n            }\n\n            ServerHandlerEvent::AuthPassword(username, password, reply) => {\n                let _ = reply.send(self._auth_password(username, password).await);\n            }\n\n            ServerHandlerEvent::AuthKeyboardInteractive(username, response, reply) => {\n                let _ = reply.send(self._auth_keyboard_interactive(username, response).await);\n            }\n\n            ServerHandlerEvent::Data(channel, data, _) => {\n                self._data(channel, data).await?;\n            }\n\n            ServerHandlerEvent::ExtendedData(channel, data, code, _) => {\n                self._extended_data(channel, code, data).await?;\n            }\n\n            ServerHandlerEvent::ChannelClose(channel, _) => {\n                self._channel_close(channel).await?;\n            }\n\n            ServerHandlerEvent::ChannelEof(channel, _) => {\n                self._channel_eof(channel).await?;\n            }\n\n            ServerHandlerEvent::WindowChangeRequest(channel, request, _) => {\n                self._window_change_request(channel, request).await?;\n            }\n\n            ServerHandlerEvent::Signal(channel, signal, _) => {\n                self._channel_signal(channel, signal).await?;\n            }\n\n            ServerHandlerEvent::ExecRequest(channel, data, reply) => {\n                self._channel_exec_request(channel, data).await?;\n                let _ = reply.send(true);\n            }\n\n            ServerHandlerEvent::ChannelOpenDirectTcpIp(channel, params, reply) => {\n                let _ = reply.send(self._channel_open_direct_tcpip(channel, params).await?);\n            }\n\n            ServerHandlerEvent::EnvRequest(channel, name, value, _) => {\n                self._channel_env_request(channel, name, value).await?;\n            }\n\n            ServerHandlerEvent::X11Request(channel, request, _) => {\n                self._channel_x11_request(channel, request).await?;\n            }\n\n            ServerHandlerEvent::TcpIpForward(address, port, reply) => {\n                self._tcpip_forward(address, port).await?;\n                let _ = reply.send(true);\n            }\n\n            ServerHandlerEvent::CancelTcpIpForward(address, port, reply) => {\n                self._cancel_tcpip_forward(address, port).await?;\n                let _ = reply.send(true);\n            }\n\n            ServerHandlerEvent::Disconnect => (),\n        }\n\n        Ok(())\n    }\n\n    pub async fn handle_session_control(&mut self, command: SessionHandleCommand) -> Result<()> {\n        match command {\n            SessionHandleCommand::Close => {\n                let _ = self.emit_service_message(\"Session closed by admin\").await;\n                info!(\"Session closed by admin\");\n                self.request_disconnect().await;\n                self.disconnect_server().await;\n            }\n        }\n        Ok(())\n    }\n\n    pub async fn handle_remote_event(&mut self, event: RCEvent) -> Result<()> {\n        match event {\n            RCEvent::State(state) => {\n                self.rc_state = state;\n                match &self.rc_state {\n                    RCState::Connected => {\n                        self.service_output.hide_progress().await;\n                        self.service_output.emit_output(Bytes::from(format!(\n                            \"{}{}\\r\\n\",\n                            ERASE_PROGRESS_SPINNER,\n                            Colour::Black\n                                .on(Colour::Green)\n                                .paint(\" \u2713 Warpgate connected \")\n                        )));\n                    }\n                    RCState::Disconnected => {\n                        self.service_output.hide_progress().await;\n                        self.disconnect_server().await;\n                    }\n                    _ => {}\n                }\n            }\n            RCEvent::ConnectionError(error) => {\n                self.service_output.hide_progress().await;\n\n                match error {\n                    ConnectionError::HostKeyMismatch {\n                        received_key_type,\n                        received_key_base64,\n                        known_key_type,\n                        known_key_base64,\n                    } => {\n                        let msg = format!(\n                            concat!(\n                                \"Host key doesn't match the stored one.\\n\",\n                                \"Stored key   ({}): {}\\n\",\n                                \"Received key ({}): {}\",\n                            ),\n                            known_key_type,\n                            known_key_base64,\n                            received_key_type,\n                            received_key_base64\n                        );\n                        self.emit_service_message(&msg).await?;\n                        self.emit_service_message(\n                            \"If you know that the key is correct (e.g. it has been changed),\",\n                        )\n                        .await?;\n                        self.emit_service_message(\n                        \"you can remove the old key in the Warpgate management UI and try again\",\n                    )\n                    .await?;\n                    }\n                    error => {\n                        self.service_output.emit_output(Bytes::from(format!(\n                            \"{}{} {}\\r\\n\",\n                            ERASE_PROGRESS_SPINNER,\n                            Colour::Black.on(Colour::Red).paint(\" Connection failed \"),\n                            error\n                        )));\n                    }\n                }\n            }\n            RCEvent::Error(e) => {\n                self.service_output.hide_progress().await;\n                let _ = self.emit_service_message(&format!(\"Error: {e}\")).await;\n                self.disconnect_server().await;\n            }\n            RCEvent::Output(channel, data) => {\n                if let Some(recorder) = self.channel_recorders.get_mut(&channel) {\n                    if let Err(error) = recorder\n                        .write(TerminalRecordingStreamId::Output, &data)\n                        .await\n                    {\n                        error!(%channel, ?error, \"Failed to record terminal data\");\n                        self.channel_recorders.remove(&channel);\n                    }\n                }\n\n                if let Some(recorder) = self.traffic_connection_recorders.get_mut(&channel) {\n                    if let Err(error) = recorder.write_rx(&data).await {\n                        error!(%channel, ?error, \"Failed to record traffic data\");\n                        self.traffic_connection_recorders.remove(&channel);\n                    }\n                }\n\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                if let Some(session) = self.session_handle.as_mut() {\n                    let _ = session\n                        .data(server_channel_id.0, CryptoVec::from_slice(&data))\n                        .await;\n                }\n            }\n            RCEvent::Success(channel) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .channel_success(server_channel_id.0)\n                        .await\n                        .context(\"failed to send data\")\n                })\n                .await?;\n            }\n            RCEvent::ChannelFailure(channel) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .channel_failure(server_channel_id.0)\n                        .await\n                        .context(\"failed to send data\")\n                })\n                .await?;\n            }\n            RCEvent::Close(channel) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                let _ = self\n                    .maybe_with_session(|handle| async move {\n                        handle\n                            .close(server_channel_id.0)\n                            .await\n                            .context(\"failed to close ch\")\n                    })\n                    .await;\n            }\n            RCEvent::Eof(channel) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .eof(server_channel_id.0)\n                        .await\n                        .context(\"failed to send eof\")\n                })\n                .await?;\n            }\n            RCEvent::ExitStatus(channel, code) => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .exit_status_request(server_channel_id.0, code)\n                        .await\n                        .context(\"failed to send exit status\")\n                })\n                .await?;\n            }\n            RCEvent::ExitSignal {\n                channel,\n                signal_name,\n                core_dumped,\n                error_message,\n                lang_tag,\n            } => {\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .exit_signal_request(\n                            server_channel_id.0,\n                            signal_name,\n                            core_dumped,\n                            error_message,\n                            lang_tag,\n                        )\n                        .await\n                        .context(\"failed to send exit status\")?;\n                    Ok(())\n                })\n                .await?;\n            }\n            RCEvent::Done => {}\n            RCEvent::ExtendedData { channel, data, ext } => {\n                if let Some(recorder) = self.channel_recorders.get_mut(&channel) {\n                    if let Err(error) = recorder\n                        .write(TerminalRecordingStreamId::Error, &data)\n                        .await\n                    {\n                        error!(%channel, ?error, \"Failed to record session data\");\n                        self.channel_recorders.remove(&channel);\n                    }\n                }\n                let server_channel_id = self.map_channel_reverse(&channel)?;\n                self.maybe_with_session(|handle| async move {\n                    handle\n                        .extended_data(server_channel_id.0, ext, CryptoVec::from_slice(&data))\n                        .await\n                        .map_err(|_| ())\n                        .context(\"failed to send extended data\")?;\n                    Ok(())\n                })\n                .await?;\n            }\n            RCEvent::HostKeyReceived(key) => {\n                self.emit_service_message(&format!(\n                    \"Host key ({}): {}\",\n                    key.name(),\n                    key.public_key_base64()\n                ))\n                .await?;\n            }\n            RCEvent::HostKeyUnknown(key, reply) => {\n                self.handle_unknown_host_key(key, reply).await?;\n            }\n            RCEvent::ForwardedTcpIp(id, params) => {\n                if let Some(session) = &mut self.session_handle {\n                    let server_channel = session\n                        .channel_open_forwarded_tcpip(\n                            params.connected_address,\n                            params.connected_port,\n                            params.originator_address.clone(),\n                            params.originator_port,\n                        )\n                        .await?;\n\n                    self.channel_map\n                        .insert(ServerChannelId(server_channel.id()), id);\n                    self.all_channels.push(id);\n\n                    let recorder = self\n                        .traffic_recorder_for(\n                            &params.originator_address,\n                            params.originator_port,\n                            \"forwarded-tcpip\",\n                        )\n                        .await;\n                    if let Some(recorder) = recorder {\n                        #[allow(clippy::unwrap_used)]\n                        let mut recorder = recorder.connection(TrafficConnectionParams {\n                            dst_addr: Ipv4Addr::from_str(\"2.2.2.2\").unwrap(),\n                            dst_port: params.connected_port as u16,\n                            src_addr: Ipv4Addr::from_str(\"1.1.1.1\").unwrap(),\n                            src_port: params.originator_port as u16,\n                        });\n                        if let Err(error) = recorder.write_connection_setup().await {\n                            error!(channel=%id, ?error, \"Failed to record connection setup\");\n                        }\n                        self.traffic_connection_recorders.insert(id, recorder);\n                    }\n                }\n            }\n            RCEvent::X11(id, originator_address, originator_port) => {\n                if let Some(session) = &mut self.session_handle {\n                    let server_channel = session\n                        .channel_open_x11(originator_address, originator_port)\n                        .await?;\n\n                    self.channel_map\n                        .insert(ServerChannelId(server_channel.id()), id);\n                    self.all_channels.push(id);\n                }\n            }\n        }\n        Ok(())\n    }\n\n    async fn handle_unknown_host_key(\n        &mut self,\n        key: PublicKey,\n        reply: oneshot::Sender<bool>,\n    ) -> Result<()> {\n        self.service_output.hide_progress().await;\n\n        let mode = self\n            .services\n            .config\n            .lock()\n            .await\n            .store\n            .ssh\n            .host_key_verification;\n\n        if mode == SshHostKeyVerificationMode::AutoAccept {\n            let _ = reply.send(true);\n            info!(\"Accepted untrusted host key (auto-accept is enabled)\");\n            return Ok(());\n        }\n\n        if mode == SshHostKeyVerificationMode::AutoReject {\n            let _ = reply.send(false);\n            info!(\"Rejected untrusted host key (auto-reject is enabled)\");\n            return Ok(());\n        }\n\n        if self.pty_channels.is_empty() {\n            warn!(\"Target host key is not trusted, but there is no active PTY channel to show the trust prompt on.\");\n            warn!(\n                \"Connect to this target with an interactive session once to accept the host key.\"\n            );\n            self.request_disconnect().await;\n            anyhow::bail!(\"No PTY channel to show an interactive prompt on\")\n        }\n\n        self.emit_service_message(&format!(\n            \"There is no trusted {} key for this host.\",\n            key.name()\n        ))\n        .await?;\n        self.emit_service_message(\"Trust this key? (y/n)\").await?;\n\n        let mut sub = self\n            .hub\n            .subscribe(|e| matches!(e, Event::ConsoleInput(_)))\n            .await;\n\n        let mut service_output = self.service_output.clone();\n        tokio::spawn(async move {\n            loop {\n                match sub.recv().await {\n                    Some(Event::ConsoleInput(data)) => {\n                        if data == \"y\".as_bytes() {\n                            let _ = reply.send(true);\n                            break;\n                        } else if data == \"n\".as_bytes() {\n                            let _ = reply.send(false);\n                            break;\n                        }\n                    }\n                    None => break,\n                    _ => (),\n                }\n            }\n            service_output.show_progress();\n        });\n\n        Ok(())\n    }\n\n    async fn maybe_with_session<'a, FN, FT, R>(&'a mut self, f: FN) -> Result<Option<R>>\n    where\n        FN: FnOnce(&'a mut russh::server::Handle) -> FT + 'a,\n        FT: futures::Future<Output = Result<R>>,\n    {\n        if let Some(handle) = &mut self.session_handle {\n            return Ok(Some(f(handle).await?));\n        }\n        Ok(None)\n    }\n\n    async fn _channel_open_direct_tcpip(\n        &mut self,\n        channel: ServerChannelId,\n        params: DirectTCPIPParams,\n    ) -> Result<bool> {\n        let uuid = Uuid::new_v4();\n        self.channel_map.insert(channel, uuid);\n\n        info!(%channel, \"Opening direct TCP/IP channel from {}:{} to {}:{}\", params.originator_address, params.originator_port, params.host_to_connect, params.port_to_connect);\n\n        let _ = self.maybe_connect_remote().await;\n\n        match self\n            .send_command_and_wait(RCCommand::Channel(\n                uuid,\n                ChannelOperation::OpenDirectTCPIP(params.clone()),\n            ))\n            .await\n        {\n            Ok(()) => {\n                self.all_channels.push(uuid);\n\n                let recorder = self\n                    .traffic_recorder_for(\n                        &params.host_to_connect,\n                        params.port_to_connect,\n                        \"direct-tcpip\",\n                    )\n                    .await;\n                if let Some(recorder) = recorder {\n                    #[allow(clippy::unwrap_used)]\n                    let mut recorder = recorder.connection(TrafficConnectionParams {\n                        dst_addr: Ipv4Addr::from_str(\"2.2.2.2\").unwrap(),\n                        dst_port: params.port_to_connect as u16,\n                        src_addr: Ipv4Addr::from_str(\"1.1.1.1\").unwrap(),\n                        src_port: params.originator_port as u16,\n                    });\n                    if let Err(error) = recorder.write_connection_setup().await {\n                        error!(%channel, ?error, \"Failed to record connection setup\");\n                    }\n                    self.traffic_connection_recorders.insert(uuid, recorder);\n                }\n\n                Ok(true)\n            }\n            Err(SshClientError::Russh(russh::Error::ChannelOpenFailure(_))) => Ok(false),\n            Err(x) => Err(x.into()),\n        }\n    }\n\n    async fn _window_change_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        request: PtyRequest,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        self.channel_pty_size_map\n            .insert(channel_id, request.clone());\n        if let Some(recorder) = self.channel_recorders.get_mut(&channel_id) {\n            if let Err(error) = recorder\n                .write_pty_resize(request.col_width, request.row_height)\n                .await\n            {\n                error!(%channel_id, ?error, \"Failed to record terminal data\");\n                self.channel_recorders.remove(&channel_id);\n            }\n        }\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::ResizePty(request),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    async fn _channel_exec_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        data: Bytes,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        match std::str::from_utf8(&data) {\n            Err(e) => {\n                error!(channel=%channel_id, ?data, \"Requested exec - invalid UTF-8\");\n                anyhow::bail!(e)\n            }\n            Ok::<&str, _>(command) => {\n                debug!(channel=%channel_id, %command, \"Requested exec\");\n                let _ = self.maybe_connect_remote().await;\n                let _ = self.send_command(RCCommand::Channel(\n                    channel_id,\n                    ChannelOperation::RequestExec(command.to_string()),\n                ));\n            }\n        }\n\n        self.start_terminal_recording(channel_id, format!(\"exec-channel-{}\", server_channel_id.0))\n            .await;\n        Ok(())\n    }\n\n    async fn start_terminal_recording(&mut self, channel_id: Uuid, name: String) {\n        match async {\n            let mut recorder = self\n                .services\n                .recordings\n                .lock()\n                .await\n                .start::<TerminalRecorder>(&self.id, name)\n                .await?;\n            if let Some(request) = self.channel_pty_size_map.get(&channel_id) {\n                recorder\n                    .write_pty_resize(request.col_width, request.row_height)\n                    .await?;\n            }\n            Ok::<_, recordings::Error>(recorder)\n        }\n        .await\n        {\n            Ok(recorder) => {\n                self.channel_recorders.insert(channel_id, recorder);\n            }\n            Err(error) => match error {\n                recordings::Error::Disabled => (),\n                error => error!(channel=%channel_id, ?error, \"Failed to start recording\"),\n            },\n        }\n    }\n\n    async fn _channel_x11_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        request: X11Request,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, \"Requested X11\");\n        let _ = self.maybe_connect_remote().await;\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::RequestX11(request),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    async fn _channel_env_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        name: String,\n        value: String,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, %name, %value, \"Environment\");\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::RequestEnv(name, value),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    async fn traffic_recorder_for(\n        &mut self,\n        host: &str,\n        port: u32,\n        tag: &str,\n    ) -> Option<&mut TrafficRecorder> {\n        let host = host.to_owned();\n        if let Vacant(e) = self.traffic_recorders.entry((host.clone(), port)) {\n            match self\n                .services\n                .recordings\n                .lock()\n                .await\n                .start(&self.id, format!(\"{tag}-{host}-{port}\"))\n                .await\n            {\n                Ok(recorder) => {\n                    e.insert(recorder);\n                }\n                Err(error) => {\n                    error!(%host, %port, ?error, \"Failed to start recording\");\n                }\n            }\n        }\n        self.traffic_recorders.get_mut(&(host, port))\n    }\n\n    pub async fn _channel_subsystem_request(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        name: String,\n    ) -> Result<(), SshClientError> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        info!(channel=%channel_id, \"Requesting subsystem {}\", &name);\n        let _ = self.maybe_connect_remote().await;\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::RequestSubsystem(name),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    async fn _data(&mut self, server_channel_id: ServerChannelId, data: Bytes) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%server_channel_id.0, ?data, \"Data\");\n        if self.rc_state == RCState::Connecting && data.first() == Some(&3) {\n            info!(channel=%channel_id, \"User requested connection abort (Ctrl-C)\");\n            self.request_disconnect().await;\n            return Ok(());\n        }\n\n        if let Some(recorder) = self.channel_recorders.get_mut(&channel_id) {\n            if let Err(error) = recorder\n                .write(TerminalRecordingStreamId::Input, &data)\n                .await\n            {\n                error!(channel=%channel_id, ?error, \"Failed to record terminal data\");\n                self.channel_recorders.remove(&channel_id);\n            }\n        }\n\n        if let Some(recorder) = self.traffic_connection_recorders.get_mut(&channel_id) {\n            if let Err(error) = recorder.write_tx(&data).await {\n                error!(channel=%channel_id, ?error, \"Failed to record traffic data\");\n                self.traffic_connection_recorders.remove(&channel_id);\n            }\n        }\n\n        if self.pty_channels.contains(&channel_id) {\n            let _ = self\n                .event_sender\n                .send_once(Event::ConsoleInput(data.clone()))\n                .await;\n        }\n\n        let _ = self.send_command(RCCommand::Channel(channel_id, ChannelOperation::Data(data)));\n        Ok(())\n    }\n\n    async fn _extended_data(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        code: u32,\n        data: Bytes,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%server_channel_id.0, ?data, \"Data\");\n        let _ = self.send_command(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::ExtendedData { ext: code, data },\n        ));\n        Ok(())\n    }\n\n    async fn _tcpip_forward(&mut self, address: String, port: u32) -> Result<()> {\n        info!(%address, %port, \"Remote port forwarding requested\");\n        let _ = self.maybe_connect_remote().await;\n        self.send_command_and_wait(RCCommand::ForwardTCPIP(address, port))\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\n    pub async fn _cancel_tcpip_forward(&mut self, address: String, port: u32) -> Result<()> {\n        info!(%address, %port, \"Remote port forwarding cancelled\");\n        self.send_command_and_wait(RCCommand::CancelTCPIPForward(address, port))\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\n    fn _get_public_keys_from_of(&self, key: PublicKey) -> Vec<PublicKey> {\n        let mut keys = vec![key.clone()];\n        // Try all supported hash algorithms\n        if let PublicKey::RSA { key, hash } = &key {\n            for h in [\n                SignatureHash::SHA1,\n                SignatureHash::SHA2_256,\n                SignatureHash::SHA2_512,\n            ] {\n                if &h != hash {\n                    keys.push(PublicKey::RSA {\n                        key: key.clone(),\n                        hash: h,\n                    });\n                }\n            }\n        }\n        keys\n    }\n\n    async fn _auth_publickey_offer(\n        &mut self,\n        ssh_username: Secret<String>,\n        key: PublicKey,\n    ) -> bool {\n        let keys = self._get_public_keys_from_of(key);\n        let selector: AuthSelector = ssh_username.expose_secret().into();\n\n        for key in keys {\n            if let Ok(true) = self\n                .try_validate_public_key_offer(\n                    &selector,\n                    Some(AuthCredential::PublicKey {\n                        kind: key.name().to_string(),\n                        public_key_bytes: Bytes::from(key.public_key_bytes()),\n                    }),\n                )\n                .await\n            {\n                return true;\n            }\n        }\n        false\n    }\n\n    async fn _auth_publickey(\n        &mut self,\n        ssh_username: Secret<String>,\n        key: PublicKey,\n    ) -> russh::server::Auth {\n        let selector: AuthSelector = ssh_username.expose_secret().into();\n\n        info!(\n            \"Public key auth as {:?} with key {}\",\n            selector,\n            key.public_key_base64()\n        );\n\n        let keys = self._get_public_keys_from_of(key);\n\n        let mut result = Ok(AuthResult::Rejected);\n        for key in keys {\n            result = self\n                .try_auth(\n                    &selector,\n                    Some(AuthCredential::PublicKey {\n                        kind: key.name().to_string(),\n                        public_key_bytes: Bytes::from(key.public_key_bytes()),\n                    }),\n                )\n                .await;\n            if let Ok(AuthResult::Accepted { .. }) = result {\n                break;\n            }\n        }\n\n        match result {\n            Ok(AuthResult::Accepted { .. }) => russh::server::Auth::Accept,\n            Ok(AuthResult::Rejected) => russh::server::Auth::Reject {\n                proceed_with_methods: Some(MethodSet::all()),\n            },\n            Ok(AuthResult::Need(kinds)) => russh::server::Auth::Reject {\n                proceed_with_methods: Some(self.get_remaining_auth_methods(kinds)),\n            },\n            Err(error) => {\n                error!(?error, \"Failed to verify credentials\");\n                russh::server::Auth::Reject {\n                    proceed_with_methods: None,\n                }\n            }\n        }\n    }\n\n    async fn _auth_password(\n        &mut self,\n        ssh_username: Secret<String>,\n        password: Secret<String>,\n    ) -> russh::server::Auth {\n        let selector: AuthSelector = ssh_username.expose_secret().into();\n        info!(\"Password auth as {:?}\", selector);\n\n        match self\n            .try_auth(&selector, Some(AuthCredential::Password(password)))\n            .await\n        {\n            Ok(AuthResult::Accepted { .. }) => russh::server::Auth::Accept,\n            Ok(AuthResult::Rejected) => russh::server::Auth::Reject {\n                proceed_with_methods: None,\n            },\n            Ok(AuthResult::Need(_)) => russh::server::Auth::Reject {\n                proceed_with_methods: None,\n            },\n            Err(error) => {\n                error!(?error, \"Failed to verify credentials\");\n                russh::server::Auth::Reject {\n                    proceed_with_methods: None,\n                }\n            }\n        }\n    }\n\n    async fn _auth_keyboard_interactive(\n        &mut self,\n        ssh_username: Secret<String>,\n        response: Option<Secret<String>>,\n    ) -> russh::server::Auth {\n        let selector: AuthSelector = ssh_username.expose_secret().into();\n        info!(\"Keyboard-interactive auth as {:?}\", selector);\n\n        let cred;\n        match &mut self.keyboard_interactive_state {\n            KeyboardInteractiveState::None => {\n                cred = None;\n            }\n            KeyboardInteractiveState::OtpRequested => {\n                cred = response.map(AuthCredential::Otp);\n            }\n            KeyboardInteractiveState::WebAuthRequested(event) => {\n                cred = None;\n                let _ = event.recv().await;\n                // the auth state has been updated by now\n            }\n        }\n\n        self.keyboard_interactive_state = KeyboardInteractiveState::None;\n\n        match self.try_auth(&selector, cred).await {\n            Ok(AuthResult::Accepted { .. }) => russh::server::Auth::Accept,\n            Ok(AuthResult::Rejected) => russh::server::Auth::Reject {\n                proceed_with_methods: None,\n            },\n            Ok(AuthResult::Need(kinds)) => {\n                if kinds.contains(&CredentialKind::Totp) {\n                    self.keyboard_interactive_state = KeyboardInteractiveState::OtpRequested;\n                    russh::server::Auth::Partial {\n                        name: Cow::Borrowed(\"Two-factor authentication\"),\n                        instructions: Cow::Borrowed(\"\"),\n                        prompts: Cow::Owned(vec![(Cow::Borrowed(\"One-time password: \"), true)]),\n                    }\n                } else if kinds.contains(&CredentialKind::WebUserApproval) {\n                    let Some(auth_state) = self.auth_state.as_ref() else {\n                        return russh::server::Auth::Reject { proceed_with_methods: None};\n                    };\n                    let identification_string =\n                        auth_state.lock().await.identification_string().to_owned();\n                    let auth_state_id = *auth_state.lock().await.id();\n                    let event = self\n                        .services\n                        .auth_state_store\n                        .lock()\n                        .await\n                        .subscribe(auth_state_id);\n                    self.keyboard_interactive_state =\n                        KeyboardInteractiveState::WebAuthRequested(event);\n\n                    let mut login_url = match self\n                        .services\n                        .config\n                        .lock()\n                        .await\n                        .construct_external_url(None)\n                    {\n                        Ok(url) => url,\n                        Err(error) => {\n                            error!(?error, \"Failed to construct external URL\");\n                            return russh::server::Auth::Reject {\n                                proceed_with_methods: None,\n                            };\n                        }\n                    };\n\n                    login_url.set_path(\"@warpgate\");\n                    login_url.set_fragment(Some(&format!(\"/login/{auth_state_id}\")));\n\n                    russh::server::Auth::Partial {\n                        name: Cow::Owned(format!(\n                            concat!(\n                            \"-----------------------------------------------------------------------\\n\",\n                            \"Warpgate authentication: please open the following URL in your browser:\\n\",\n                            \"{}\\n\\n\",\n                            \"Make sure you're seeing this security key: {}\\n\",\n                            \"-----------------------------------------------------------------------\\n\"\n                        ),\n                            login_url,\n                            identification_string\n                                .chars()\n                                .map(|x| x.to_string())\n                                .collect::<Vec<_>>()\n                                .join(\" \")\n                        )),\n                        instructions: Cow::Borrowed(\"\"),\n                        prompts: Cow::Owned(vec![(Cow::Borrowed(\"Press Enter when done: \"), true)]),\n                    }\n                } else {\n                    russh::server::Auth::Reject {\n                        proceed_with_methods: None,\n                    }\n                }\n            }\n            Err(error) => {\n                error!(?error, \"Failed to verify credentials\");\n                russh::server::Auth::Reject {\n                    proceed_with_methods: None,\n                }\n            }\n        }\n    }\n\n    fn get_remaining_auth_methods(&self, kinds: HashSet<CredentialKind>) -> MethodSet {\n        let mut m = MethodSet::empty();\n        for kind in kinds {\n            match kind {\n                CredentialKind::Password => m.insert(MethodSet::PASSWORD),\n                CredentialKind::Totp => m.insert(MethodSet::KEYBOARD_INTERACTIVE),\n                CredentialKind::WebUserApproval => m.insert(MethodSet::KEYBOARD_INTERACTIVE),\n                CredentialKind::PublicKey => m.insert(MethodSet::PUBLICKEY),\n                CredentialKind::Sso => m.insert(MethodSet::KEYBOARD_INTERACTIVE),\n            }\n        }\n        m\n    }\n\n    async fn try_validate_public_key_offer(\n        &mut self,\n        selector: &AuthSelector,\n        credential: Option<AuthCredential>,\n    ) -> Result<bool> {\n        match selector {\n            AuthSelector::User { username, .. } => {\n                let cp = self.services.config_provider.clone();\n\n                if let Some(credential) = credential {\n                    return Ok(cp\n                        .lock()\n                        .await\n                        .validate_credential(username, &credential)\n                        .await?);\n                }\n\n                Ok(false)\n            }\n            _ => Ok(false),\n        }\n    }\n\n    async fn try_auth(\n        &mut self,\n        selector: &AuthSelector,\n        credential: Option<AuthCredential>,\n    ) -> Result<AuthResult> {\n        match selector {\n            AuthSelector::User {\n                username,\n                target_name,\n            } => {\n                let cp = self.services.config_provider.clone();\n\n                let state_arc = self.get_auth_state(username).await?;\n                let mut state = state_arc.lock().await;\n\n                if let Some(credential) = credential {\n                    if cp\n                        .lock()\n                        .await\n                        .validate_credential(username, &credential)\n                        .await?\n                    {\n                        state.add_valid_credential(credential);\n                    }\n                }\n\n                let user_auth_result = state.verify();\n\n                match user_auth_result {\n                    AuthResult::Accepted { username } => {\n                        self.services\n                            .auth_state_store\n                            .lock()\n                            .await\n                            .complete(state.id())\n                            .await;\n                        let target_auth_result = {\n                            self.services\n                                .config_provider\n                                .lock()\n                                .await\n                                .authorize_target(&username, target_name)\n                                .await?\n                        };\n                        if !target_auth_result {\n                            warn!(\n                                \"Target {} not authorized for user {}\",\n                                target_name, username\n                            );\n                            return Ok(AuthResult::Rejected);\n                        }\n                        self._auth_accept(&username, target_name).await?;\n                        Ok(AuthResult::Accepted { username })\n                    }\n                    x => Ok(x),\n                }\n            }\n            AuthSelector::Ticket { secret } => {\n                match authorize_ticket(&self.services.db, secret).await? {\n                    Some(ticket) => {\n                        info!(\"Authorized for {} with a ticket\", ticket.target);\n                        consume_ticket(&self.services.db, &ticket.id).await?;\n                        self._auth_accept(&ticket.username, &ticket.target).await?;\n                        Ok(AuthResult::Accepted {\n                            username: ticket.username.clone(),\n                        })\n                    }\n                    None => Ok(AuthResult::Rejected),\n                }\n            }\n        }\n    }\n\n    async fn _auth_accept(\n        &mut self,\n        username: &str,\n        target_name: &str,\n    ) -> Result<(), WarpgateError> {\n        let _ = self\n            .server_handle\n            .lock()\n            .await\n            .set_username(username.to_string())\n            .await;\n        self.username = Some(username.to_string());\n\n        let target = {\n            self.services\n                .config_provider\n                .lock()\n                .await\n                .list_targets()\n                .await?\n                .iter()\n                .filter_map(|t| match t.options {\n                    TargetOptions::Ssh(ref options) => Some((t, options)),\n                    _ => None,\n                })\n                .find(|(t, _)| t.name == target_name)\n                .map(|(t, opt)| (t.clone(), opt.clone()))\n        };\n\n        let Some((target, mut ssh_options)) = target else {\n            self.target = TargetSelection::NotFound(target_name.to_string());\n            warn!(\"Selected target not found\");\n            return Ok(());\n        };\n\n        // Forward username from the authenticated user to the target, if target has no username\n        if ssh_options.username.is_empty() {\n            ssh_options.username = username.to_string();\n        }\n\n        let _ = self.server_handle.lock().await.set_target(&target).await;\n        self.target = TargetSelection::Found(target, ssh_options);\n        Ok(())\n    }\n\n    async fn _channel_close(&mut self, server_channel_id: ServerChannelId) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, \"Closing channel\");\n        self.send_command_and_wait(RCCommand::Channel(channel_id, ChannelOperation::Close))\n            .await?;\n        Ok(())\n    }\n\n    async fn _channel_eof(&mut self, server_channel_id: ServerChannelId) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, \"EOF\");\n        let _ = self.send_command(RCCommand::Channel(channel_id, ChannelOperation::Eof));\n        Ok(())\n    }\n\n    pub async fn _channel_signal(\n        &mut self,\n        server_channel_id: ServerChannelId,\n        signal: Sig,\n    ) -> Result<()> {\n        let channel_id = self.map_channel(&server_channel_id)?;\n        debug!(channel=%channel_id, ?signal, \"Signal\");\n        self.send_command_and_wait(RCCommand::Channel(\n            channel_id,\n            ChannelOperation::Signal(signal),\n        ))\n        .await?;\n        Ok(())\n    }\n\n    fn send_command(&mut self, command: RCCommand) -> Result<(), RCCommand> {\n        self.rc_tx.send((command, None)).map_err(|e| e.0 .0)\n    }\n\n    async fn send_command_and_wait(&mut self, command: RCCommand) -> Result<(), SshClientError> {\n        let (tx, rx) = oneshot::channel();\n        let mut cmd = match self.rc_tx.send((command, Some(tx))) {\n            Ok(_) => PendingCommand::Waiting(rx),\n            Err(_) => PendingCommand::Failed,\n        };\n\n        loop {\n            tokio::select! {\n                result = &mut cmd => {\n                    return result\n                }\n                event = self.get_next_event() => {\n                    match event {\n                        Some(event) => {\n                            self.handle_event(event).await.map_err(SshClientError::from)?\n                        }\n                        None => {Err(SshClientError::MpscError)?}\n                    };\n                }\n            }\n        }\n    }\n\n    pub async fn _disconnect(&mut self) {\n        debug!(\"Client disconnect requested\");\n        self.request_disconnect().await;\n    }\n\n    async fn request_disconnect(&mut self) {\n        debug!(\"Disconnecting\");\n        let _ = self.rc_abort_tx.send(());\n        if self.rc_state != RCState::NotInitialized && self.rc_state != RCState::Disconnected {\n            let _ = self.send_command(RCCommand::Disconnect);\n        }\n    }\n\n    async fn disconnect_server(&mut self) {\n        let all_channels = std::mem::take(&mut self.all_channels);\n        let channels = all_channels\n            .into_iter()\n            .map(|x| self.map_channel_reverse(&x))\n            .filter_map(|x| x.ok())\n            .collect::<Vec<_>>();\n\n        let _ = self\n            .maybe_with_session(|handle| async move {\n                for ch in channels {\n                    let _ = handle.close(ch.0).await;\n                }\n                Ok(())\n            })\n            .await;\n\n        self.session_handle = None;\n    }\n}\n\nimpl Drop for ServerSession {\n    fn drop(&mut self) {\n        let _ = self.rc_abort_tx.send(());\n        info!(\"Closed session\");\n        debug!(\"Dropped\");\n    }\n}\n\npub enum PendingCommand {\n    Waiting(oneshot::Receiver<Result<(), SshClientError>>),\n    Failed,\n}\n\nimpl Future for PendingCommand {\n    type Output = Result<(), SshClientError>;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut std::task::Context<'_>) -> Poll<Self::Output> {\n        match self.get_mut() {\n            PendingCommand::Waiting(ref mut rx) => match Pin::new(rx).poll(cx) {\n                Poll::Ready(result) => {\n                    Poll::Ready(result.unwrap_or(Err(SshClientError::MpscError)))\n                }\n                Poll::Pending => Poll::Pending,\n            },\n            PendingCommand::Failed => Poll::Ready(Err(SshClientError::MpscError)),\n        }\n    }\n}\n"], "filenames": ["Cargo.lock", "warpgate-protocol-ssh/Cargo.toml", "warpgate-protocol-ssh/src/server/russh_handler.rs", "warpgate-protocol-ssh/src/server/session.rs"], "buggy_code_start_loc": [1476, 15, 31, 466], "buggy_code_end_loc": [5539, 16, 180, 1361], "fixing_code_start_loc": [1476, 15, 32, 467], "fixing_code_end_loc": [5540, 16, 209, 1419], "type": "CWE-347", "message": "Warpgate is a smart SSH, HTTPS and MySQL bastion host for Linux that doesn't need special client apps. The SSH key verification for a user can be bypassed by sending an SSH key offer without a signature. This allows bypassing authentication under following conditions: 1. The attacker knows the username and a valid target name 2. The attacked knows the user's public key and 3. Only SSH public key authentication is required for the user account. This issue has been addressed in version 0.8.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-43660", "sourceIdentifier": "security-advisories@github.com", "published": "2023-09-27T22:15:10.730", "lastModified": "2023-10-02T20:21:26.290", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Warpgate is a smart SSH, HTTPS and MySQL bastion host for Linux that doesn't need special client apps. The SSH key verification for a user can be bypassed by sending an SSH key offer without a signature. This allows bypassing authentication under following conditions: 1. The attacker knows the username and a valid target name 2. The attacked knows the user's public key and 3. Only SSH public key authentication is required for the user account. This issue has been addressed in version 0.8.1. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "\"Warpgate es un host bastionado SSH, HTTPS y MySQL inteligente para Linux que no necesita aplicaciones cliente especiales. La verificaci\u00f3n de la clave SSH para un usuario se puede omitir enviando una oferta de clave SSH sin firma. Esto permite eludir la autenticaci\u00f3n bajo las siguientes condiciones: \n1. El atacante conoce el nombre de usuario y un nombre de destino v\u00e1lido \n2. El atacado conoce la clave p\u00fablica del usuario  \n3. Solo se requiere autenticaci\u00f3n de clave p\u00fablica SSH para la cuenta de usuario. \nEste problema se solucion\u00f3 en la versi\u00f3n 0.8.1. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad.\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 2.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-347"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:warpgate_project:warpgate:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.8.1", "matchCriteriaId": "87AAB4E3-1EE5-4781-8209-E180C31BAE14"}]}]}], "references": [{"url": "https://github.com/warp-tech/warpgate/commit/a4df7f7a21395cfaee7a9789d1e3846290caeb63", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/warp-tech/warpgate/security/advisories/GHSA-3cjp-w4cp-m9c8", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/warp-tech/warpgate/commit/a4df7f7a21395cfaee7a9789d1e3846290caeb63"}}