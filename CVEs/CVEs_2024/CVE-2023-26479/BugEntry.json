{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.internal.parser;\n\nimport java.io.StringReader;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Provider;\nimport javax.inject.Singleton;\n\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.component.manager.ComponentLookupException;\nimport org.xwiki.component.manager.ComponentManager;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.listener.MetaData;\nimport org.xwiki.rendering.parser.ContentParser;\nimport org.xwiki.rendering.parser.MissingParserException;\nimport org.xwiki.rendering.parser.ParseException;\nimport org.xwiki.rendering.parser.Parser;\nimport org.xwiki.rendering.syntax.Syntax;\n\n/**\n * Default implementation of {@link ContentParser}.\n * \n * @version $Id$\n * @since 6.0M2\n */\n@Component\n@Singleton\npublic class DefaultContentParser implements ContentParser\n{\n    @Inject\n    @Named(\"context\")\n    private Provider<ComponentManager> componentManagerProvider;\n\n    @Inject\n    private EntityReferenceSerializer<String> serializer;\n\n    @Override\n    public XDOM parse(String content, Syntax syntax) throws ParseException, MissingParserException\n    {\n        return getParser(syntax).parse(new StringReader(content == null ? \"\" : content));\n    }\n\n    @Override\n    public XDOM parse(String content, Syntax syntax, EntityReference source) throws ParseException,\n        MissingParserException\n    {\n        XDOM xdom = parse(content, syntax);\n        if (source != null) {\n            xdom.getMetaData().addMetaData(MetaData.SOURCE, serializer.serialize(source));\n        }\n        return xdom;\n    }\n\n    /**\n     * Return a parser for the given syntax.\n     * \n     * @param syntax the syntax.\n     * @return a parser.\n     * @throws MissingParserException when no parser where found for the given syntax.\n     * @since 6.0M2\n     */\n    private Parser getParser(Syntax syntax) throws MissingParserException\n    {\n        try {\n            return this.componentManagerProvider.get().getInstance(Parser.class, syntax.toIdString());\n        } catch (ComponentLookupException e) {\n            throw new MissingParserException(syntax, e);\n        }\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.internal.parser;\n\nimport static org.hamcrest.CoreMatchers.any;\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.hamcrest.CoreMatchers.nullValue;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.hamcrest.MockitoHamcrest.argThat;\nimport static org.mockito.Mockito.when;\n\nimport java.io.Reader;\nimport java.util.Collections;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.xwiki.component.internal.ContextComponentManagerProvider;\nimport org.xwiki.component.manager.ComponentLookupException;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.rendering.block.Block;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.listener.MetaData;\nimport org.xwiki.rendering.parser.ContentParser;\nimport org.xwiki.rendering.parser.MissingParserException;\nimport org.xwiki.rendering.parser.Parser;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.test.annotation.ComponentList;\nimport org.xwiki.test.mockito.MockitoComponentMockingRule;\n\n/**\n * Unit tests for {@link org.xwiki.rendering.internal.parser.DefaultContentParser}.\n *\n * @version $Id$\n * @since 6.0M2\n */\n@ComponentList(ContextComponentManagerProvider.class)\npublic class DefaultContentParserTest\n{\n    @Rule\n    public final MockitoComponentMockingRule<ContentParser> mocker =\n        new MockitoComponentMockingRule<>(DefaultContentParser.class);\n\n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n\n    private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"wiki\", \"space\", \"page\");\n    private static final String SOURCE = \"wiki:space.page\";\n\n    @Before\n    public void configure() throws Exception\n    {\n        Parser parser = mocker.registerMockComponent(Parser.class, Syntax.PLAIN_1_0.toIdString());\n        when(parser.parse(argThat(any(Reader.class)))).thenReturn(new XDOM(Collections.<Block>emptyList()));\n\n        EntityReferenceSerializer<String> serializer = mocker.getInstance(EntityReferenceSerializer.TYPE_STRING);\n        when(serializer.serialize(DOCUMENT_REFERENCE)).thenReturn(SOURCE);\n    }\n\n    @Test\n    public void parseHasNoMetadataSource() throws Exception\n    {\n        XDOM xdom = mocker.getComponentUnderTest().parse(\"\", Syntax.PLAIN_1_0);\n\n        assertThat(xdom.getMetaData().getMetaData(MetaData.SOURCE), nullValue());\n    }\n\n    @Test\n    public void parseIsAddingMetadataSource() throws Exception\n    {\n        XDOM xdom = mocker.getComponentUnderTest().parse(\"\", Syntax.PLAIN_1_0, DOCUMENT_REFERENCE);\n\n        assertThat(xdom.getMetaData().getMetaData(MetaData.SOURCE), equalTo(SOURCE));\n    }\n\n    @Test\n    public void parseWhenNoParser() throws Exception\n    {\n        thrown.expect(MissingParserException.class);\n        thrown.expectMessage(\"Failed to find a parser for syntax [XWiki 2.1]\");\n        thrown.expectCause(any(ComponentLookupException.class));\n        mocker.getComponentUnderTest().parse(\"\", Syntax.XWIKI_2_1, DOCUMENT_REFERENCE);\n    }\n\n    @Test\n    public void parseWhenNullSource() throws Exception\n    {\n        XDOM xdom = mocker.getComponentUnderTest().parse(null, Syntax.PLAIN_1_0);\n        assertEquals(0, xdom.getChildren().size());\n    }\n}\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.internal.parser;\n\nimport java.io.StringReader;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Provider;\nimport javax.inject.Singleton;\n\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.component.manager.ComponentLookupException;\nimport org.xwiki.component.manager.ComponentManager;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.listener.MetaData;\nimport org.xwiki.rendering.parser.ContentParser;\nimport org.xwiki.rendering.parser.MissingParserException;\nimport org.xwiki.rendering.parser.ParseException;\nimport org.xwiki.rendering.parser.Parser;\nimport org.xwiki.rendering.syntax.Syntax;\n\n/**\n * Default implementation of {@link ContentParser}.\n * \n * @version $Id$\n * @since 6.0M2\n */\n@Component\n@Singleton\npublic class DefaultContentParser implements ContentParser\n{\n    @Inject\n    @Named(\"context\")\n    private Provider<ComponentManager> componentManagerProvider;\n\n    @Inject\n    private EntityReferenceSerializer<String> serializer;\n\n    @Override\n    public XDOM parse(String content, Syntax syntax) throws ParseException, MissingParserException\n    {\n        Parser parser = getParser(syntax);\n        try {\n            return parser.parse(new StringReader(content == null ? \"\" : content));\n        } catch (StackOverflowError | Exception e) {\n            // All exceptions as well as stack overflow errors are captured and wrapped in parse exceptions to make sure\n            // that they are handled correctly by the callers. Without this, some parsing issues can be badly handled,\n            // leading to instability issues.\n            throw new ParseException(String.format(\"Failed to parse with syntax [%s].\", syntax.toIdString()), e);\n        }\n    }\n\n    @Override\n    public XDOM parse(String content, Syntax syntax, EntityReference source) throws ParseException,\n        MissingParserException\n    {\n        XDOM xdom = parse(content, syntax);\n        if (source != null) {\n            xdom.getMetaData().addMetaData(MetaData.SOURCE, serializer.serialize(source));\n        }\n        return xdom;\n    }\n\n    /**\n     * Return a parser for the given syntax.\n     * \n     * @param syntax the syntax.\n     * @return a parser.\n     * @throws MissingParserException when no parser where found for the given syntax.\n     * @since 6.0M2\n     */\n    private Parser getParser(Syntax syntax) throws MissingParserException\n    {\n        try {\n            return this.componentManagerProvider.get().getInstance(Parser.class, syntax.toIdString());\n        } catch (ComponentLookupException e) {\n            throw new MissingParserException(syntax, e);\n        }\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.internal.parser;\n\nimport java.io.Reader;\n\nimport org.hamcrest.CoreMatchers;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.component.internal.ContextComponentManagerProvider;\nimport org.xwiki.component.manager.ComponentLookupException;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.listener.MetaData;\nimport org.xwiki.rendering.parser.MissingParserException;\nimport org.xwiki.rendering.parser.ParseException;\nimport org.xwiki.rendering.parser.Parser;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.test.annotation.ComponentList;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.test.mockito.MockitoComponentManager;\n\nimport static java.util.Collections.emptyList;\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.hamcrest.CoreMatchers.nullValue;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.hamcrest.MockitoHamcrest.argThat;\nimport static org.xwiki.rendering.syntax.Syntax.PLAIN_1_0;\nimport static org.xwiki.rendering.syntax.Syntax.XWIKI_2_1;\n\n/**\n * Unit tests for {@link DefaultContentParser}.\n *\n * @version $Id$\n * @since 6.0M2\n */\n@ComponentTest\n@ComponentList(ContextComponentManagerProvider.class)\nclass DefaultContentParserTest\n{\n    private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"wiki\", \"space\", \"page\");\n\n    private static final String SOURCE = \"wiki:space.page\";\n\n    @InjectMockComponents\n    private DefaultContentParser defaultContentParser;\n\n    @MockComponent\n    private EntityReferenceSerializer<String> serializer;\n\n    private Parser plain10parser;\n\n    @BeforeEach\n    void setUp(MockitoComponentManager componentManager) throws Exception\n    {\n        this.plain10parser = componentManager.registerMockComponent(Parser.class, PLAIN_1_0.toIdString());\n        when(this.plain10parser.parse(argThat(CoreMatchers.any(Reader.class)))).thenReturn(new XDOM(emptyList()));\n        when(this.serializer.serialize(DOCUMENT_REFERENCE)).thenReturn(SOURCE);\n    }\n\n    @Test\n    void parseHasNoMetadataSource() throws Exception\n    {\n        XDOM xdom = this.defaultContentParser.parse(\"\", PLAIN_1_0);\n\n        assertThat(xdom.getMetaData().getMetaData(MetaData.SOURCE), nullValue());\n    }\n\n    @Test\n    void parseIsAddingMetadataSource() throws Exception\n    {\n        XDOM xdom = this.defaultContentParser.parse(\"\", PLAIN_1_0, DOCUMENT_REFERENCE);\n\n        assertThat(xdom.getMetaData().getMetaData(MetaData.SOURCE), equalTo(SOURCE));\n    }\n\n    @Test\n    void parseWhenNoParser()\n    {\n        MissingParserException missingParserException = assertThrows(MissingParserException.class,\n            () -> this.defaultContentParser.parse(\"\", XWIKI_2_1, DOCUMENT_REFERENCE));\n        assertEquals(ComponentLookupException.class, missingParserException.getCause().getClass());\n        assertEquals(\"Failed to find a parser for syntax [XWiki 2.1]\", missingParserException.getMessage());\n    }\n\n    @Test\n    void parseWhenNoParserFail() throws Exception\n    {\n        when(this.plain10parser.parse(any())).thenThrow(StackOverflowError.class);\n\n        ParseException parseErrorException =\n            assertThrows(ParseException.class, () -> this.defaultContentParser.parse(\"content\", PLAIN_1_0));\n\n        assertEquals(StackOverflowError.class, parseErrorException.getCause().getClass());\n        assertEquals(\"Failed to parse with syntax [plain/1.0].\", parseErrorException.getMessage());\n    }\n\n    @Test\n    void parseWhenNoParserFailWithSource() throws Exception\n    {\n        when(this.plain10parser.parse(any())).thenThrow(StackOverflowError.class);\n\n        ParseException parseErrorException =\n            assertThrows(ParseException.class, () -> this.defaultContentParser.parse(\"content\", PLAIN_1_0, null));\n\n        assertEquals(StackOverflowError.class, parseErrorException.getCause().getClass());\n        assertEquals(\"Failed to parse with syntax [plain/1.0].\", parseErrorException.getMessage());\n    }\n\n    @Test\n    void parseWhenNullSource() throws Exception\n    {\n        XDOM xdom = this.defaultContentParser.parse(null, Syntax.PLAIN_1_0);\n        assertEquals(0, xdom.getChildren().size());\n    }\n}\n"], "filenames": ["xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-parser/src/main/java/org/xwiki/rendering/internal/parser/DefaultContentParser.java", "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-parser/src/test/java/org/xwiki/rendering/internal/parser/DefaultContentParserTest.java"], "buggy_code_start_loc": [62, 22], "buggy_code_end_loc": [63, 109], "fixing_code_start_loc": [62, 22], "fixing_code_end_loc": [71, 138], "type": "CWE-755", "message": "XWiki Platform is a generic wiki platform. Starting in version 6.0, users with write rights can insert well-formed content that is not handled well by the parser. As a consequence, some pages becomes unusable, including the user index (if the page containing the faulty content is a user page) and the page index. Note that on the page, the normal UI is completely missing and it is not possible to open the editor directly to revert the change as the stack overflow is already triggered while getting the title of the document. This means that it is quite difficult to remove this content once inserted. This has been patched in XWiki 13.10.10, 14.4.6, and 14.9-rc-1. A temporary workaround to avoid Stack Overflow errors is to increase the memory allocated to the stack by using the `-Xss` JVM parameter (e.g., `-Xss32m`). This should allow the parser to pass and to fix the faulty content. The consequences for other aspects of the system (e.g., performance) are unknown, and this workaround should be only be used as a temporary solution. The workaround does not prevent the issue occurring again with other content. Consequently, it is strongly advised to upgrade to a version where the issue has been patched.", "other": {"cve": {"id": "CVE-2023-26479", "sourceIdentifier": "security-advisories@github.com", "published": "2023-03-02T18:15:11.057", "lastModified": "2023-03-10T05:03:55.530", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform. Starting in version 6.0, users with write rights can insert well-formed content that is not handled well by the parser. As a consequence, some pages becomes unusable, including the user index (if the page containing the faulty content is a user page) and the page index. Note that on the page, the normal UI is completely missing and it is not possible to open the editor directly to revert the change as the stack overflow is already triggered while getting the title of the document. This means that it is quite difficult to remove this content once inserted. This has been patched in XWiki 13.10.10, 14.4.6, and 14.9-rc-1. A temporary workaround to avoid Stack Overflow errors is to increase the memory allocated to the stack by using the `-Xss` JVM parameter (e.g., `-Xss32m`). This should allow the parser to pass and to fix the faulty content. The consequences for other aspects of the system (e.g., performance) are unknown, and this workaround should be only be used as a temporary solution. The workaround does not prevent the issue occurring again with other content. Consequently, it is strongly advised to upgrade to a version where the issue has been patched."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-755"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-755"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.0", "versionEndExcluding": "13.10.10", "matchCriteriaId": "FBF07EE2-1901-4F21-84BB-BCA087436E7D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.0", "versionEndExcluding": "14.4.6", "matchCriteriaId": "4DC3E3FE-42E5-412F-AD0B-6E6531319461"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.5", "versionEndExcluding": "14.9", "matchCriteriaId": "E0DE5CA5-2618-434D-854A-CDAB06A713E2"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/e5b82cd98072464196a468b8f7fe6396dce142a7", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-52vf-hvv3-98h7", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-19838", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/e5b82cd98072464196a468b8f7fe6396dce142a7"}}