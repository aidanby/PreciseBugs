{"buggy_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Features\\Kanban;\n\n$AJAX_INCLUDE = 1;\n\ninclude ('../inc/includes.php');\n\nheader(\"Content-Type: text/html; charset=UTF-8\");\nHtml::header_nocache();\n\nSession::checkLoginUser();\n\nif ($_SERVER['REQUEST_METHOD'] !== 'GET') {\n   // Get AJAX input and load it into $_REQUEST\n   $input = file_get_contents('php://input');\n   parse_str($input, $_REQUEST);\n}\n\nif (!isset($_REQUEST['action'])) {\n   Toolbox::logError(\"Missing action parameter\");\n   http_response_code(400);\n   return;\n}\n$action = $_REQUEST['action'];\n\n$nonkanban_actions = ['update', 'bulk_add_item', 'add_item', 'move_item'];\nif (isset($_REQUEST['itemtype'])) {\n   $traits = class_uses($_REQUEST['itemtype'], true);\n   if (!in_array($_REQUEST['action'], $nonkanban_actions) && (!$traits || !in_array(Kanban::class, $traits, true))) {\n      // Bad request\n      // For all actions, except those in $nonkanban_actions, we expect to be manipulating the Kanban itself.\n      Toolbox::logError(\"Invalid itemtype parameter\");\n      http_response_code(400);\n      return;\n   }\n   /** @var CommonDBTM $item */\n   $itemtype = $_REQUEST['itemtype'];\n   $item = new $itemtype();\n}\n\n// Rights Checks\nif (isset($itemtype)) {\n   if (in_array($action, ['refresh', 'get_switcher_dropdown', 'get_column'])) {\n      if (!$item->canView()) {\n         // Missing rights\n         http_response_code(403);\n         return;\n      }\n   }\n   if (in_array($action, ['update'])) {\n      $item->getFromDB($_REQUEST['items_id']);\n      if (!$item->canUpdateItem()) {\n         // Missing rights\n         http_response_code(403);\n         return;\n      }\n   }\n   if (in_array($action, ['bulk_add_item', 'add_item'])) {\n      if (!$item->canCreate()) {\n         // Missing rights\n         http_response_code(403);\n         return;\n      }\n   }\n}\n\n// Helper to check required parameters\n$checkParams = function($required) {\n   foreach ($required as $param) {\n      if (!isset($_REQUEST[$param])) {\n         Toolbox::logError(\"Missing $param parameter\");\n         http_response_code(400);\n         die();\n      }\n   }\n};\n\n// Action Processing\nif ($_REQUEST['action'] == 'update') {\n   $checkParams(['column_field', 'column_value']);\n   // Update project or task based on changes made in the Kanban\n   $item->update([\n      'id'                          => $_REQUEST['items_id'],\n      $_REQUEST['column_field']     => $_REQUEST['column_value']\n   ]);\n} else if ($_REQUEST['action'] == 'add_item') {\n   $checkParams(['inputs']);\n   $item = new $itemtype();\n   $inputs = [];\n   parse_str($_REQUEST['inputs'], $inputs);\n   $item->add($inputs);\n} else if ($_REQUEST['action'] == 'bulk_add_item') {\n   $checkParams(['inputs']);\n   $item = new $itemtype();\n   $inputs = [];\n   parse_str($_REQUEST['inputs'], $inputs);\n\n   $bulk_item_list = preg_split('/\\r\\n|[\\r\\n]/', $inputs['bulk_item_list']);\n   if (!empty($bulk_item_list)) {\n      unset($inputs['bulk_item_list']);\n      foreach ($bulk_item_list as $item_entry) {\n         $item_entry = trim($item_entry);\n         if (!empty($item_entry)) {\n            $item->add($inputs + ['name' => $item_entry]);\n         }\n      }\n   }\n} else if ($_REQUEST['action'] == 'move_item') {\n   $checkParams(['card', 'column', 'position', 'kanban']);\n   /** @var Kanban|CommonDBTM $kanban */\n   $kanban = new $_REQUEST['kanban']['itemtype'];\n   $can_move = $kanban->canOrderKanbanCard($_REQUEST['kanban']['items_id']);\n   if ($can_move) {\n      Item_Kanban::moveCard($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'],\n         $_REQUEST['card'], $_REQUEST['column'], $_REQUEST['position']);\n   }\n} else if ($_REQUEST['action'] == 'show_column') {\n   $checkParams(['column', 'kanban']);\n   Item_Kanban::showColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'], $_REQUEST['column']);\n} else if ($_REQUEST['action'] == 'hide_column') {\n   $checkParams(['column', 'kanban']);\n   Item_Kanban::hideColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'], $_REQUEST['column']);\n} else if ($_REQUEST['action'] == 'collapse_column') {\n   $checkParams(['column', 'kanban']);\n   Item_Kanban::collapseColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'], $_REQUEST['column']);\n} else if ($_REQUEST['action'] == 'expand_column') {\n   $checkParams(['column', 'kanban']);\n   Item_Kanban::expandColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'], $_REQUEST['column']);\n} else if ($_REQUEST['action'] == 'move_column') {\n   $checkParams(['column', 'kanban', 'position']);\n   Item_Kanban::moveColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'],\n      $_REQUEST['column'], $_REQUEST['position']);\n} else if ($_REQUEST['action'] == 'refresh') {\n   $checkParams(['column_field']);\n   // Get all columns to refresh the kanban\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   $force_columns = Item_Kanban::getAllShownColumns($itemtype, $_REQUEST['items_id']);\n   $columns = $itemtype::getKanbanColumns($_REQUEST['items_id'], $_REQUEST['column_field'], $force_columns, true);\n   echo json_encode($columns, JSON_FORCE_OBJECT);\n} else if ($_REQUEST['action'] == 'get_switcher_dropdown') {\n   $values = $itemtype::getAllForKanban();\n   Dropdown::showFromArray('kanban-board-switcher', $values, [\n      'value'  => isset($_REQUEST['items_id']) ? $_REQUEST['items_id'] : ''\n   ]);\n} else if ($_REQUEST['action'] == 'get_url') {\n   $checkParams(['items_id']);\n   if ($_REQUEST['items_id'] == -1) {\n      echo $itemtype::getFormURL(true).'?showglobalkanban=1';\n      return;\n   }\n   $item->getFromDB($_REQUEST['items_id']);\n   $tabs = $item->defineTabs();\n   $tab_id = array_search(__('Kanban'), $tabs);\n   if (is_null($tab_id) || false === $tab_id) {\n      Toolbox::logError(\"Itemtype does not have a Kanban tab!\");\n      http_response_code(400);\n      return;\n   }\n   echo $itemtype::getFormURLWithID($_REQUEST['items_id'], true).\"&forcetab={$tab_id}\";\n} else if ($_REQUEST['action'] == 'create_column') {\n   $checkParams(['column_field', 'items_id', 'column_name']);\n   $column_field = $_REQUEST['column_field'];\n   $column_itemtype = getItemtypeForForeignKeyField($column_field);\n   if (!$column_itemtype::canCreate() || !$column_itemtype::canView()) {\n      // Missing rights\n      http_response_code(403);\n      return;\n   }\n   $params = $_REQUEST['params'] ?? [];\n   $column_item = new $column_itemtype();\n   $column_id = $column_item->add([\n      'name'   => $_REQUEST['column_name']\n   ] + $params);\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   $column = $itemtype::getKanbanColumns($_REQUEST['items_id'], $column_field, [$column_id]);\n   echo json_encode($column);\n} else if ($_REQUEST['action'] == 'save_column_state') {\n   $checkParams(['items_id', 'state']);\n   Item_Kanban::saveStateForItem($_REQUEST['itemtype'], $_REQUEST['items_id'], $_REQUEST['state']);\n} else if ($_REQUEST['action'] == 'load_column_state') {\n   $checkParams(['items_id', 'last_load']);\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   $response = [\n      'state'     => Item_Kanban::loadStateForItem($_REQUEST['itemtype'], $_REQUEST['items_id'], $_REQUEST['last_load']),\n      'timestamp' => $_SESSION['glpi_currenttime']\n   ];\n   echo json_encode($response, JSON_FORCE_OBJECT);\n} else if ($_REQUEST['action'] == 'list_columns') {\n   $checkParams(['column_field']);\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   echo json_encode($itemtype::getAllKanbanColumns($_REQUEST['column_field']));\n} else if ($_REQUEST['action'] == 'get_column') {\n   $checkParams(['column_id', 'column_field', 'items_id']);\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   $column = $itemtype::getKanbanColumns($_REQUEST['items_id'], $_REQUEST['column_field'], [$_REQUEST['column_id']]);\n   echo json_encode($column, JSON_FORCE_OBJECT);\n}\n"], "fixing_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Features\\Kanban;\n\n$AJAX_INCLUDE = 1;\n\ninclude ('../inc/includes.php');\n\nheader(\"Content-Type: text/html; charset=UTF-8\");\nHtml::header_nocache();\n\nSession::checkLoginUser();\n\nif ($_SERVER['REQUEST_METHOD'] !== 'GET') {\n   // Get AJAX input and load it into $_REQUEST\n   $input = file_get_contents('php://input');\n   parse_str($input, $_REQUEST);\n}\n\n$_REQUEST = Toolbox::clean_cross_side_scripting_deep($_REQUEST);\n\nif (!isset($_REQUEST['action'])) {\n   Toolbox::logError(\"Missing action parameter\");\n   http_response_code(400);\n   return;\n}\n$action = $_REQUEST['action'];\n\n$nonkanban_actions = ['update', 'bulk_add_item', 'add_item', 'move_item'];\nif (isset($_REQUEST['itemtype'])) {\n   $traits = class_uses($_REQUEST['itemtype'], true);\n   if (!in_array($_REQUEST['action'], $nonkanban_actions) && (!$traits || !in_array(Kanban::class, $traits, true))) {\n      // Bad request\n      // For all actions, except those in $nonkanban_actions, we expect to be manipulating the Kanban itself.\n      Toolbox::logError(\"Invalid itemtype parameter\");\n      http_response_code(400);\n      return;\n   }\n   /** @var CommonDBTM $item */\n   $itemtype = $_REQUEST['itemtype'];\n   $item = new $itemtype();\n}\n\n// Rights Checks\nif (isset($itemtype)) {\n   if (in_array($action, ['refresh', 'get_switcher_dropdown', 'get_column'])) {\n      if (!$item->canView()) {\n         // Missing rights\n         http_response_code(403);\n         return;\n      }\n   }\n   if (in_array($action, ['update'])) {\n      $item->getFromDB($_REQUEST['items_id']);\n      if (!$item->canUpdateItem()) {\n         // Missing rights\n         http_response_code(403);\n         return;\n      }\n   }\n   if (in_array($action, ['bulk_add_item', 'add_item'])) {\n      if (!$item->canCreate()) {\n         // Missing rights\n         http_response_code(403);\n         return;\n      }\n   }\n}\n\n// Helper to check required parameters\n$checkParams = function($required) {\n   foreach ($required as $param) {\n      if (!isset($_REQUEST[$param])) {\n         Toolbox::logError(\"Missing $param parameter\");\n         http_response_code(400);\n         die();\n      }\n   }\n};\n\n// Action Processing\nif ($_REQUEST['action'] == 'update') {\n   $checkParams(['column_field', 'column_value']);\n   // Update project or task based on changes made in the Kanban\n   $item->update([\n      'id'                          => $_REQUEST['items_id'],\n      $_REQUEST['column_field']     => $_REQUEST['column_value']\n   ]);\n} else if ($_REQUEST['action'] == 'add_item') {\n   $checkParams(['inputs']);\n   $item = new $itemtype();\n   $inputs = [];\n   parse_str($_REQUEST['inputs'], $inputs);\n   $item->add($inputs);\n} else if ($_REQUEST['action'] == 'bulk_add_item') {\n   $checkParams(['inputs']);\n   $item = new $itemtype();\n   $inputs = [];\n   parse_str($_REQUEST['inputs'], $inputs);\n\n   $bulk_item_list = preg_split('/\\r\\n|[\\r\\n]/', $inputs['bulk_item_list']);\n   if (!empty($bulk_item_list)) {\n      unset($inputs['bulk_item_list']);\n      foreach ($bulk_item_list as $item_entry) {\n         $item_entry = trim($item_entry);\n         if (!empty($item_entry)) {\n            $item->add($inputs + ['name' => $item_entry]);\n         }\n      }\n   }\n} else if ($_REQUEST['action'] == 'move_item') {\n   $checkParams(['card', 'column', 'position', 'kanban']);\n   /** @var Kanban|CommonDBTM $kanban */\n   $kanban = new $_REQUEST['kanban']['itemtype'];\n   $can_move = $kanban->canOrderKanbanCard($_REQUEST['kanban']['items_id']);\n   if ($can_move) {\n      Item_Kanban::moveCard($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'],\n         $_REQUEST['card'], $_REQUEST['column'], $_REQUEST['position']);\n   }\n} else if ($_REQUEST['action'] == 'show_column') {\n   $checkParams(['column', 'kanban']);\n   Item_Kanban::showColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'], $_REQUEST['column']);\n} else if ($_REQUEST['action'] == 'hide_column') {\n   $checkParams(['column', 'kanban']);\n   Item_Kanban::hideColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'], $_REQUEST['column']);\n} else if ($_REQUEST['action'] == 'collapse_column') {\n   $checkParams(['column', 'kanban']);\n   Item_Kanban::collapseColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'], $_REQUEST['column']);\n} else if ($_REQUEST['action'] == 'expand_column') {\n   $checkParams(['column', 'kanban']);\n   Item_Kanban::expandColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'], $_REQUEST['column']);\n} else if ($_REQUEST['action'] == 'move_column') {\n   $checkParams(['column', 'kanban', 'position']);\n   Item_Kanban::moveColumn($_REQUEST['kanban']['itemtype'], $_REQUEST['kanban']['items_id'],\n      $_REQUEST['column'], $_REQUEST['position']);\n} else if ($_REQUEST['action'] == 'refresh') {\n   $checkParams(['column_field']);\n   // Get all columns to refresh the kanban\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   $force_columns = Item_Kanban::getAllShownColumns($itemtype, $_REQUEST['items_id']);\n   $columns = $itemtype::getKanbanColumns($_REQUEST['items_id'], $_REQUEST['column_field'], $force_columns, true);\n   echo json_encode($columns, JSON_FORCE_OBJECT);\n} else if ($_REQUEST['action'] == 'get_switcher_dropdown') {\n   $values = $itemtype::getAllForKanban();\n   Dropdown::showFromArray('kanban-board-switcher', $values, [\n      'value'  => isset($_REQUEST['items_id']) ? $_REQUEST['items_id'] : ''\n   ]);\n} else if ($_REQUEST['action'] == 'get_url') {\n   $checkParams(['items_id']);\n   if ($_REQUEST['items_id'] == -1) {\n      echo $itemtype::getFormURL(true).'?showglobalkanban=1';\n      return;\n   }\n   $item->getFromDB($_REQUEST['items_id']);\n   $tabs = $item->defineTabs();\n   $tab_id = array_search(__('Kanban'), $tabs);\n   if (is_null($tab_id) || false === $tab_id) {\n      Toolbox::logError(\"Itemtype does not have a Kanban tab!\");\n      http_response_code(400);\n      return;\n   }\n   echo $itemtype::getFormURLWithID($_REQUEST['items_id'], true).\"&forcetab={$tab_id}\";\n} else if ($_REQUEST['action'] == 'create_column') {\n   $checkParams(['column_field', 'items_id', 'column_name']);\n   $column_field = $_REQUEST['column_field'];\n   $column_itemtype = getItemtypeForForeignKeyField($column_field);\n   if (!$column_itemtype::canCreate() || !$column_itemtype::canView()) {\n      // Missing rights\n      http_response_code(403);\n      return;\n   }\n   $params = $_REQUEST['params'] ?? [];\n   $column_item = new $column_itemtype();\n   $column_id = $column_item->add([\n      'name'   => $_REQUEST['column_name']\n   ] + $params);\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   $column = $itemtype::getKanbanColumns($_REQUEST['items_id'], $column_field, [$column_id]);\n   echo json_encode($column);\n} else if ($_REQUEST['action'] == 'save_column_state') {\n   $checkParams(['items_id', 'state']);\n   Item_Kanban::saveStateForItem($_REQUEST['itemtype'], $_REQUEST['items_id'], $_REQUEST['state']);\n} else if ($_REQUEST['action'] == 'load_column_state') {\n   $checkParams(['items_id', 'last_load']);\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   $response = [\n      'state'     => Item_Kanban::loadStateForItem($_REQUEST['itemtype'], $_REQUEST['items_id'], $_REQUEST['last_load']),\n      'timestamp' => $_SESSION['glpi_currenttime']\n   ];\n   echo json_encode($response, JSON_FORCE_OBJECT);\n} else if ($_REQUEST['action'] == 'list_columns') {\n   $checkParams(['column_field']);\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   echo json_encode($itemtype::getAllKanbanColumns($_REQUEST['column_field']));\n} else if ($_REQUEST['action'] == 'get_column') {\n   $checkParams(['column_id', 'column_field', 'items_id']);\n   header(\"Content-Type: application/json; charset=UTF-8\", true);\n   $column = $itemtype::getKanbanColumns($_REQUEST['items_id'], $_REQUEST['column_field'], [$_REQUEST['column_id']]);\n   echo json_encode($column, JSON_FORCE_OBJECT);\n}\n"], "filenames": ["ajax/kanban.php"], "buggy_code_start_loc": [48], "buggy_code_end_loc": [48], "fixing_code_start_loc": [49], "fixing_code_end_loc": [51], "type": "CWE-79", "message": "GLPI is an open-source asset and IT management software package that provides ITIL Service Desk features, licenses tracking and software auditing. In GLPI from version 9.5.0 and before version 9.5.4, there is a cross-site scripting injection vulnerability when using ajax/kanban.php. This is fixed in version 9.5.4.", "other": {"cve": {"id": "CVE-2021-21258", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-02T20:15:14.707", "lastModified": "2021-03-09T16:36:42.467", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is an open-source asset and IT management software package that provides ITIL Service Desk features, licenses tracking and software auditing. In GLPI from version 9.5.0 and before version 9.5.4, there is a cross-site scripting injection vulnerability when using ajax/kanban.php. This is fixed in version 9.5.4."}, {"lang": "es", "value": "GLPI es un paquete de software de gesti\u00f3n de activos y TI de c\u00f3digo abierto que proporciona funciones de ITIL Service Desk, seguimiento de licencias y auditor\u00eda de software.&#xa0;En GLPI desde la versi\u00f3n 9.5.0 y anterior a la versi\u00f3n 9.5.4, se presenta una vulnerabilidad de inyecci\u00f3n de tipo cross-site scripting cuando se usa el archivo ajax/kanban.php.&#xa0;Esto es corregido en la versi\u00f3n 9.5.4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.5.0", "versionEndExcluding": "9.5.4", "matchCriteriaId": "931A739B-FA74-4532-9526-BAAB5FBA00DC"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/e7802fc051696de1f76108ea8dc3bd4e2c880f15", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-j4xj-4qmc-mmmx", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/e7802fc051696de1f76108ea8dc3bd4e2c880f15"}}