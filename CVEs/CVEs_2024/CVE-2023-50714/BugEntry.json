{"buggy_code": ["Yii Framework 2 authclient extension Change Log\n===============================================\n\n2.2.15 under development\n------------------------\n\n- Bug #364: Use issuer claim from OpenID Configuration (radwouters)\n- Enh: #367: Throw more specific `ClientErrorResponseException` when the response code in `BaseOAuth::sendRequest()` is a 4xx (rhertogh)  \n\n\n2.2.14 November 18, 2022\n------------------------\n\n- Bug #351: Unable to set TokenParamKey in OAuth2 config, gets hard overwritten in OAuth2::createToken() (DSTester)\n\n\n2.2.13 September 04, 2022\n-------------------------\n\n- Bug #354: Fix PHP 8.1 deprecated message in BaseOAuth `stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated` (marty-macfly)\n\n\n2.2.12 December 03, 2021\n------------------------\n\n- Bug #330: OpenID Connect client now defaults to `'client_secret_basic'` in case `token_endpoint_auth_methods_supported` isn't specified (rhertogh)\n- Bug #331: OpenID Connect `aud` claim can either be a string or a list of strings (azmeuk)\n- Bug #332: OpenID Connect `aud` nonce is passed from the authentication request to the token request (azmeuk)\n- Bug #339: OpenID Connect client now regenerates a new `nonce` when refreshing the access token (rhertogh)\n- Bug #344: Fix Facebook OAuth 400 error when latin characters are used in App name (pawelkania)\n- Enh #279: Add `AuthAction::$defaultClientId` and `AuthAction::getClientId()` (ditibal)\n- Enh #341: OpenID Connect client now uses access token `'id_token'` claim for `getUserAttributes()` if `userinfo_endpoint` is not available (rhertogh)\n- Enh #342: OpenID Connect client support for JWT in `userinfo_endpoint` response (rhertogh)\n\n\n2.2.11 August 09, 2021\n----------------------\n\n- Enh #318: Add `statusCode` from response to init `InvalidResponseException` in `sendRequest` method of `yii\\authclient\\BaseOAuth` class (vleedev)\n- Enh #327: Use `random_int()` when generating OAuth1 nonce (samdark)\n\n\n2.2.10 May 05, 2021\n-------------------\n\n- Chg #315: Add proof key for code exchange PKCE support to oauth2 (AdeAttwood)\n\n\n2.2.9 November 13, 2020\n-----------------------\n\n- Bug #312: do not refresh access token if it is not expired (albertborsos)\n\n\n2.2.8 November 10, 2020\n-----------------------\n\n- Bug #309: Try to refresh token in `BaseOAuth->beforeApiRequestSend()` if `BaseOAuth->autoRefreshAccessToken = true` instead of throwing \"Invalid access token\" exception (marty-macfly)\n- Bug #311: Fix PHP 8 compatibility (samdark)\n\n\n2.2.7 February 12, 2020\n-----------------------\n\n- Bug #292: Updated GitHub token transfer method according to https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api/#authenticating-using-query-parameters (raidkon)\n\n\n2.2.6 November 19, 2019\n-----------------------\n\n- Bug #288: Default request option for turning off SSL peer verification was removed (Rutger, samdark)\n- Enh #205: Add alternative storage system based on cache component (marty-macfly, tunecino)\n\n\n2.2.5 November 05, 2019\n-----------------------\n\n- Enh #217: Replace spomky-labs/jose by JWT Framework (marty-macfly, smcyr)\n\n\n2.2.4 July 02, 2019\n-------------------\n\n- Enh #276: Bumped VK API version to 5.95, according to developers recommendation (EvgeniyRRU)\n- Enh #278: Keep only selected parameters in default return URLs of OAuth services (albertborsos)\n\n\n2.2.3 June 04, 2019\n-------------------\n\n- Chg #273: `OpenIdConnect::validateClaims()` is now protected (samdark)\n\n\n2.2.2 May 14, 2019\n------------------\n\n- Bug #270: Updated Facebook icon to match brand guidelines (ServerDotBiz)\n\n\n2.2.1 April 23, 2019\n--------------------\n\n- Bug #252: Fix bug when `OAuthToken` is incorrectly instantiated if configuration array has incorrect order (rob006)\n\n\n2.2.0 April 16, 2019\n--------------------\n\n- Bug #266: Updated Google client image (nurielmeni)\n- Bug #267: Upgrade LinkedIn client to v2 (machour)\n\n\n2.1.8 January 28, 2019\n----------------------\n\n- Bug #237: Fix redirect from LinkedIn if user refused to authorize permissions request (jakim)\n- Enh #218: Allow configuring user component in `AuthAction` (samdark, lab362)\n- Enh #258: Use Google Sign-in API instead of Google Plus in `yii\\authclient\\clients\\Google` as Google Plus is deprecated (alexeevdv)\n- Enh #259: Allow to pass buildAuthUrl params to OAuth flows in `AuthAction` (albertborsos)\n\n\n2.1.7 September 20, 2018\n------------------------\n\n- Bug #241: Unset parameter `scope` on `defaultReturnUrl` for `OAuth2` class since it was causing bad request response from Google provider (okiwan)\n\n\n2.1.6 September 07, 2018\n------------------------\n\n- Bug #211: `RsaSha` was not passing `$key` to `openssl_pkey_get_private()` in `generateSignature()` (cfhodges)\n- Bug #220: Make `OpenIdConnect` client send token as bearer auth instead of querystring parameter (lukos)\n- Bug #237: Fixed redirect if user cancels login in auth form (msvit1989)\n- Enh #203: Updated VKontakte client to use API version 5.0 (Shketkol)\n\n\n2.1.5 February 08, 2018\n-----------------------\n\n- Enh #187: URL endpoints for `authUrl` and `tokenUrl` for `yii\\authclient\\clients\\LinkedIn` updated (Felli)\n- Enh #195: `yii\\authclient\\AuthAction` refactored to use `yii\\web\\Application::$request` for request data access (klimov-paul)\n- Enh #196: Added `yii\\authclient\\AuthAction::$cancelCallback` allowing custom handling for authentication cancelation (terales, klimov-paul)\n\n\n2.1.4 November 03, 2017\n-----------------------\n\n- Bug #152: Fixed JavaScript callback generated by `\\yii\\authclient\\widgets\\GooglePlusButton` consider 'immediate_failed' as instant auth error (klimov-paul)\n- Bug: Usage of deprecated `yii\\base\\Object` changed to `yii\\base\\BaseObject` allowing compatibility with PHP 7.2 (klimov-paul)\n- Enh #178: Added `yii\\authclient\\clients\\TwitterOAuth2` supporting 'application-only authentication' workflow for Twitter (klimov-paul)\n- Enh #179: Added `apiVersion` at `yii\\authclient\\clients\\VKontakte` (isudakoff)\n- Enh #185: `yii\\authclient\\clients\\VKontakte::initUserAttributes()` now throws verbose exception on unexpected API response instead of PHP error (klimov-paul)\n\n\n2.1.3 June 23, 2017\n-------------------\n\n- Bug #152: Fixed `\\yii\\authclient\\OAuth1::fetchRequestToken()` skips formatting for `yii\\httpclient\\Request` (klimov-paul)\n- Bug #160: Fixed `\\yii\\authclient\\OAuth1::composeSignatureBaseString()` does not take URL query string into account (klimov-paul)\n- Enh #155: Added `\\yii\\authclient\\OpenIdConnect` supporting [OpenID Connect](https://openid.net/connect/) protocol (klimov-paul)\n- Enh #156: Added `\\yii\\authclient\\signature\\RsaSha` and `\\yii\\authclient\\signature\\HmacSha` supporting general 'SHAwithRSA' and 'HMAC SHA' signature methods (klimov-paul)\n- Enh #157: Added `\\yii\\authclient\\OAuth2::authenticateUserJwt()` supporting authentication via JSON Web Token (JWT) (klimov-paul)\n- Enh #163: Added support for exchanging access token at `yii\\authclient\\clients\\Facebook` (klimov-paul)\n- Enh #163: Added support for client-specific access tokens at `yii\\authclient\\clients\\Facebook` (klimov-paul)\n- Chg #163: `yii\\authclient\\clients\\Facebook::$autoRefreshAccessToken` is now disabled by default (klimov-paul)\n\n\n2.1.2 February 15, 2017\n-----------------------\n\n- Bug #135: Fixed `\\yii\\authclient\\OAuth1::fetchRequestToken()` duplicates auth params in the request body, which may cause error on some OAuth 1.0 providers (klimov-paul)\n- Bug #149: Changed `$` to `jQuery` to prevent global conflicts in widget JavaScript (Ariestattoo)\n- Enh #67: Added `appsecret_proof` generation for the API requests at `yii\\authclient\\clients\\Facebook` (blackhpro, SDKiller, klimov-paul)\n\n\n2.1.1 August 29, 2016\n---------------------\n\n- Bug #128: Fixed `\\yii\\authclient\\BaseClient::createRequest()` does not apply `defaultRequestOptions` and `requestOptions` (klimov-paul)\n- Bug #130: Fixed `\\yii\\authclient\\OAuth1::fetchRequestToken()` unable to unset current access token (klimov-paul)\n- Enh #27: Added `\\yii\\authclient\\OAuth1::authorizationHeaderMethods` option allowing to control request methods, which require authorization header (klimov-paul)\n- Enh #132: URL endpoints for `authUrl` and `tokenUrl` for `yii\\authclient\\clients\\VKontakte` updated (KhristenkoYura)\n\n\n2.1.0 August 04, 2016\n---------------------\n\n- Enh #27: This extension no longer require PHP 'cURL' extension to be installed (klimov-paul)\n- Enh #30: Added support for 'client_credentials' grant type via `\\yii\\authclient\\OAuth2::authenticateClient()` (klimov-paul)\n- Enh #33: Added ability to pass raw request content at `\\yii\\authclient\\BaseOAuth::api()` (klimov-paul)\n- Enh #41: Added support for signature generation from request token at `\\yii\\authclient\\OAuth1::fetchAccessToken()` (klimov-paul)\n- Enh #63: Markup for `\\yii\\authclient\\widgets\\AuthChoice` simplified (klimov-paul)\n- Enh #108: This extension now uses `yii2-httpclient` library for the HTTP requests (klimov-paul)\n- Enh #118: Added support for 'password' grant type via `\\yii\\authclient\\OAuth2::authenticateUser()` (klimov-paul)\n- Enh #121: Auth client 'State Storage' abstraction layer extracted (klimov-paul)\n- Enh #124: Methods `clientLink()` and `renderMainContent()` of `yii\\authclient\\widgets\\AuthChoice` reworked to return HTML instead of echo (klimov-paul)\n- Enh #127: Auth 'state' validation added to `OAuth2` for preventing cross-site request forgery (klimov-paul)\n\n\n2.0.6 July 08, 2016\n-------------------\n\n- Bug #37: Fixed `\\yii\\authclient\\widgets\\AuthChoice` overrides any `<a>` tag click behavior between `begin()` and `end()` methods (klimov-paul)\n- Enh #31: Allow to disable automatic 'refresh access token' requests (klimov-paul)\n- Enh #58: Added support for user attribute request params setup for Twitter (umanamente, klimov-paul)\n- Enh #111: `yii\\authclient\\clients\\GitHub` now retrieves user email even if it is set as 'private' at GitHub account (klimov-paul)\n\n\n2.0.5 September 23, 2015\n------------------------\n\n- Bug #25: `yii\\authclient\\BaseOAuth` now can be used without without `session` application component available (klimov-paul)\n- Enh #40: Added `attributeNames` field to `yii\\authclient\\clients\\Facebook`, which allows definition of attributes list fetched from API (samdark)\n- Chg: #47: Default popup size for `yii\\authclient\\clients\\Facebook` has been increased up to 860x480 (lame07, klimov-paul)\n\n\n2.0.4 May 10, 2015\n------------------\n\n- Bug #7224: Fixed incorrect POST fields composition at `yii\\authclient\\OAuth1` (klimov-paul)\n- Bug #7639: Automatic exception throw on 'error' key presence at `yii\\authclient\\BaseOAuth::processResponse()` removed (klimov-paul)\n- Enh #17: Added `attributeNames` field to `yii\\authclient\\clients\\VKontakte` and `yii\\authclient\\clients\\LinkedIn`, which allows definition of attributes list fetched from API (klimov-paul)\n- Enh #6743: Icon for Google at `yii\\authclient\\widgets\\AuthChoice` fixed to follow the Google Brand guidelines (klimov-paul)\n- Enh #7733: `yii\\authclient\\clients\\VKontakte` now gets attributes from access token also (klimov-paul)\n- Enh #7754: New client `yii\\authclient\\clients\\GooglePlus` added to support Google recommended auth flow (klimov-paul)\n- Chg: #7754: `yii\\authclient\\clients\\GoogleOpenId` is now deprecated because this auth method is no longer supported by Google as of April 20, 2015 (klimov-paul)\n\n\n2.0.3 March 01, 2015\n--------------------\n\n- Enh #6892: Default value of `yii\\authclient\\clients\\Twitter::$authUrl` changed to 'authenticate', allowing usage of previous logged user without request an access (kotchuprik)\n\n\n2.0.2 January 11, 2015\n----------------------\n\n- Bug #6502: Fixed `\\yii\\authclient\\OAuth2::refreshAccessToken()` does not save fetched token (sebathi)\n- Bug #6510: Fixed infinite redirect loop using default `\\yii\\authclient\\AuthAction::cancelUrl` (klimov-paul)\n\n\n2.0.1 December 07, 2014\n-----------------------\n\n- Bug #6000: Fixed CCS for `yii\\authclient\\widgets\\AuthChoice` does not loaded if `popupMode` disabled (klimov-paul)\n\n\n2.0.0 October 12, 2014\n----------------------\n\n- Enh #5135: Added ability to operate nested and complex attributes via `yii\\authclient\\BaseClient::normalizeUserAttributeMap` (zinzinday, klimov-paul)\n\n\n2.0.0-rc September 27, 2014\n---------------------------\n\n- Bug #3633: OpenId return URL comparison advanced to prevent url encode problem (klimov-paul)\n- Bug #4490: `yii\\authclient\\widgets\\AuthChoice` does not preserve initial settings while opening popup (klimov-paul)\n- Bug #5011: OAuth API Response with 20x status were not considered success (ychongsaytc)\n- Enh #3416: VKontakte OAuth support added (klimov-paul)\n- Enh #4076: Request HTTP headers argument added to `yii\\authclient\\BaseOAuth::api()` method (klimov-paul)\n- Enh #4134: `yii\\authclient\\InvalidResponseException` added for tracking invalid remote server response (klimov-paul)\n- Enh #4139: User attributes requesting at GoogleOAuth switched to Google+ API (klimov-paul)\n\n\n2.0.0-beta April 13, 2014\n-------------------------\n\n- Initial release.\n\n\n\n", "<?php\n/**\n * @link https://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license https://www.yiiframework.com/license/\n */\n\nnamespace yii\\authclient;\n\nuse Yii;\nuse yii\\helpers\\Json;\nuse yii\\helpers\\Url;\nuse yii\\web\\HttpException;\n\n/**\n * OAuth2 serves as a client for the OAuth 2 flow.\n *\n * In oder to acquire access token perform following sequence:\n *\n * ```php\n * use yii\\authclient\\OAuth2;\n *\n * // assuming class MyAuthClient extends OAuth2\n * $oauthClient = new MyAuthClient();\n * $url = $oauthClient->buildAuthUrl(); // Build authorization URL\n * Yii::$app->getResponse()->redirect($url); // Redirect to authorization URL.\n * // After user returns at our site:\n * $code = Yii::$app->getRequest()->get('code');\n * $accessToken = $oauthClient->fetchAccessToken($code); // Get access token\n * ```\n *\n * @see https://oauth.net/2/\n * @see https://tools.ietf.org/html/rfc6749\n *\n * @author Paul Klimov <klimov.paul@gmail.com>\n * @since 2.0\n */\nabstract class OAuth2 extends BaseOAuth\n{\n    /**\n     * @var string protocol version.\n     */\n    public $version = '2.0';\n    /**\n     * @var string OAuth client ID.\n     */\n    public $clientId;\n    /**\n     * @var string OAuth client secret.\n     */\n    public $clientSecret;\n    /**\n     * @var string token request URL endpoint.\n     */\n    public $tokenUrl;\n    /**\n     * @var bool whether to use and validate auth 'state' parameter in authentication flow.\n     * If enabled - the opaque value will be generated and applied to auth URL to maintain\n     * state between the request and callback. The authorization server includes this value,\n     * when redirecting the user-agent back to the client.\n     * The option is used for preventing cross-site request forgery.\n     * @since 2.1\n     */\n    public $validateAuthState = true;\n    /**\n     * @var bool Whether to enable proof key for code exchange (PKCE) support and add\n     * a `code_challenge` and `code_verifier` to the auth request.\n     * @since 2.2.10\n     *\n     * @see https://oauth.net/2/pkce/\n     */\n    public $enablePkce = false;\n\n\n    /**\n     * Composes user authorization URL.\n     * @param array $params additional auth GET params.\n     * @return string authorization URL.\n     */\n    public function buildAuthUrl(array $params = [])\n    {\n        $defaultParams = [\n            'client_id' => $this->clientId,\n            'response_type' => 'code',\n            'redirect_uri' => $this->getReturnUrl(),\n            'xoauth_displayname' => Yii::$app->name,\n        ];\n        if (!empty($this->scope)) {\n            $defaultParams['scope'] = $this->scope;\n        }\n\n        if ($this->validateAuthState) {\n            $authState = $this->generateAuthState();\n            $this->setState('authState', $authState);\n            $defaultParams['state'] = $authState;\n        }\n\n        if ($this->enablePkce) {\n            $codeVerifier = bin2hex(Yii::$app->security->generateRandomKey(64));\n            $this->setState('authCodeVerifier', $codeVerifier);\n            $defaultParams['code_challenge'] = trim(strtr(base64_encode(hash('sha256', $codeVerifier, true)), '+/', '-_'), '=');\n            $defaultParams['code_challenge_method'] = 'S256';\n        }\n\n        return $this->composeUrl($this->authUrl, array_merge($defaultParams, $params));\n    }\n\n    /**\n     * Fetches access token from authorization code.\n     * @param string $authCode authorization code, usually comes at GET parameter 'code'.\n     * @param array $params additional request params.\n     * @return OAuthToken access token.\n     * @throws HttpException on invalid auth state in case [[enableStateValidation]] is enabled.\n     */\n    public function fetchAccessToken($authCode, array $params = [])\n    {\n        if ($this->validateAuthState) {\n            $authState = $this->getState('authState');\n            $incomingRequest = Yii::$app->getRequest();\n            $incomingState = $incomingRequest->get('state', $incomingRequest->post('state'));\n            if (!isset($incomingState) || empty($authState) || strcmp($incomingState, $authState) !== 0) {\n                throw new HttpException(400, 'Invalid auth state parameter.');\n            }\n            $this->removeState('authState');\n        }\n\n        $defaultParams = [\n            'code' => $authCode,\n            'grant_type' => 'authorization_code',\n            'redirect_uri' => $this->getReturnUrl(),\n        ];\n\n        if ($this->enablePkce) {\n            $defaultParams['code_verifier'] = $this->getState('authCodeVerifier');\n        }\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData(array_merge($defaultParams, $params));\n\n         // Azure AD will complain if there is no `Origin` header.\n        if ($this->enablePkce) {\n            $request->addHeaders(['Origin' => Url::to('/')]);\n        }\n\n        $this->applyClientCredentialsToRequest($request);\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function applyAccessTokenToRequest($request, $accessToken)\n    {\n        $data = $request->getData();\n        $data['access_token'] = $accessToken->getToken();\n        $request->setData($data);\n    }\n\n    /**\n     * Applies client credentials (e.g. [[clientId]] and [[clientSecret]]) to the HTTP request instance.\n     * This method should be invoked before sending any HTTP request, which requires client credentials.\n     * @param \\yii\\httpclient\\Request $request HTTP request instance.\n     * @since 2.1.3\n     */\n    protected function applyClientCredentialsToRequest($request)\n    {\n        $request->addData([\n            'client_id' => $this->clientId,\n            'client_secret' => $this->clientSecret,\n        ]);\n    }\n\n    /**\n     * Gets new auth token to replace expired one.\n     * @param OAuthToken $token expired auth token.\n     * @return OAuthToken new auth token.\n     */\n    public function refreshAccessToken(OAuthToken $token)\n    {\n        $params = [\n            'grant_type' => 'refresh_token'\n        ];\n        $params = array_merge($token->getParams(), $params);\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData($params);\n\n        $this->applyClientCredentialsToRequest($request);\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n\n    /**\n     * Generates the auth state value.\n     * @return string auth state value.\n     * @since 2.1\n     */\n    protected function generateAuthState()\n    {\n        $baseString = get_class($this) . '-' . time();\n        if (Yii::$app->has('session')) {\n            $baseString .= '-' . Yii::$app->session->getId();\n        }\n        return hash('sha256', uniqid($baseString, true));\n    }\n\n    /**\n     * Creates token from its configuration.\n     * @param array $tokenConfig token configuration.\n     * @return OAuthToken token instance.\n     */\n    protected function createToken(array $tokenConfig = [])\n    {\n        $defaultTokenConfig = ['tokenParamKey' => 'access_token'];\n        $tokenConfig = array_merge($defaultTokenConfig, $tokenConfig);\n\n        return parent::createToken($tokenConfig);\n    }\n\n    /**\n     * Authenticate OAuth client directly at the provider without third party (user) involved,\n     * using 'client_credentials' grant type.\n     * @see https://tools.ietf.org/html/rfc6749#section-4.4\n     * @param array $params additional request params.\n     * @return OAuthToken access token.\n     * @since 2.1.0\n     */\n    public function authenticateClient($params = [])\n    {\n        $defaultParams = [\n            'grant_type' => 'client_credentials',\n        ];\n\n        if (!empty($this->scope)) {\n            $defaultParams['scope'] = $this->scope;\n        }\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData(array_merge($defaultParams, $params));\n\n        $this->applyClientCredentialsToRequest($request);\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n\n    /**\n     * Authenticates user directly by 'username/password' pair, using 'password' grant type.\n     * @see https://tools.ietf.org/html/rfc6749#section-4.3\n     * @param string $username user name.\n     * @param string $password user password.\n     * @param array $params additional request params.\n     * @return OAuthToken access token.\n     * @since 2.1.0\n     */\n    public function authenticateUser($username, $password, $params = [])\n    {\n        $defaultParams = [\n            'grant_type' => 'password',\n            'username' => $username,\n            'password' => $password,\n        ];\n\n        if (!empty($this->scope)) {\n            $defaultParams['scope'] = $this->scope;\n        }\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData(array_merge($defaultParams, $params));\n\n        $this->applyClientCredentialsToRequest($request);\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n\n    /**\n     * Authenticates user directly using JSON Web Token (JWT).\n     * @see https://tools.ietf.org/html/rfc7515\n     * @param string $username\n     * @param \\yii\\authclient\\signature\\BaseMethod|array $signature signature method or its array configuration.\n     * If empty - [[signatureMethod]] will be used.\n     * @param array $options additional options. Valid options are:\n     *\n     * - header: array, additional JWS header parameters.\n     * - payload: array, additional JWS payload (message or claim-set) parameters.\n     * - signatureKey: string, signature key to be used, if not set - [[clientSecret]] will be used.\n     *\n     * @param array $params additional request params.\n     * @return OAuthToken access token.\n     * @since 2.1.3\n     */\n    public function authenticateUserJwt($username, $signature = null, $options = [], $params = [])\n    {\n        if (empty($signature)) {\n            $signatureMethod = $this->getSignatureMethod();\n        } elseif (is_object($signature)) {\n            $signatureMethod = $signature;\n        } else {\n            $signatureMethod = $this->createSignatureMethod($signature);\n        }\n\n        $header = isset($options['header']) ? $options['header'] : [];\n        $payload = isset($options['payload']) ? $options['payload'] : [];\n\n        $header = array_merge([\n            'typ' => 'JWT'\n        ], $header);\n        if (!isset($header['alg'])) {\n            $signatureName = $signatureMethod->getName();\n            if (preg_match('/^([a-z])[a-z]*\\-([a-z])[a-z]*([0-9]+)$/is', $signatureName, $matches)) {\n                // convert 'RSA-SHA256' to 'RS256' :\n                $signatureName = $matches[1] . $matches[2] . $matches[3];\n            }\n            $header['alg'] = $signatureName;\n        }\n\n        $payload = array_merge([\n            'iss' => $username,\n            'scope' => $this->scope,\n            'aud' => $this->tokenUrl,\n            'iat' => time(),\n        ], $payload);\n        if (!isset($payload['exp'])) {\n            $payload['exp'] = $payload['iat'] + 3600;\n        }\n\n        $signatureBaseString = base64_encode(Json::encode($header)) . '.' . base64_encode(Json::encode($payload));\n        $signatureKey = isset($options['signatureKey']) ? $options['signatureKey'] : $this->clientSecret;\n        $signature = $signatureMethod->generateSignature($signatureBaseString, $signatureKey);\n\n        $assertion = $signatureBaseString . '.' . $signature;\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData(array_merge([\n                'grant_type' => 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                'assertion' => $assertion,\n            ], $params));\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n}\n"], "fixing_code": ["Yii Framework 2 authclient extension Change Log\n===============================================\n\n2.2.15 under development\n------------------------\n\n- Bug #364: Use issuer claim from OpenID Configuration (radwouters)\n- Enh #367: Throw more specific `ClientErrorResponseException` when the response code in `BaseOAuth::sendRequest()` is a 4xx (rhertogh)\n- Enh GHSA-rw54-6826-c8j5: Improved security for OAuth2 client by requiring an `authCodeVerifier` if PKCE is enabled and clearing it after usage (rhertogh)\n\n\n2.2.14 November 18, 2022\n------------------------\n\n- Bug #351: Unable to set TokenParamKey in OAuth2 config, gets hard overwritten in OAuth2::createToken() (DSTester)\n\n\n2.2.13 September 04, 2022\n-------------------------\n\n- Bug #354: Fix PHP 8.1 deprecated message in BaseOAuth `stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated` (marty-macfly)\n\n\n2.2.12 December 03, 2021\n------------------------\n\n- Bug #330: OpenID Connect client now defaults to `'client_secret_basic'` in case `token_endpoint_auth_methods_supported` isn't specified (rhertogh)\n- Bug #331: OpenID Connect `aud` claim can either be a string or a list of strings (azmeuk)\n- Bug #332: OpenID Connect `aud` nonce is passed from the authentication request to the token request (azmeuk)\n- Bug #339: OpenID Connect client now regenerates a new `nonce` when refreshing the access token (rhertogh)\n- Bug #344: Fix Facebook OAuth 400 error when latin characters are used in App name (pawelkania)\n- Enh #279: Add `AuthAction::$defaultClientId` and `AuthAction::getClientId()` (ditibal)\n- Enh #341: OpenID Connect client now uses access token `'id_token'` claim for `getUserAttributes()` if `userinfo_endpoint` is not available (rhertogh)\n- Enh #342: OpenID Connect client support for JWT in `userinfo_endpoint` response (rhertogh)\n\n\n2.2.11 August 09, 2021\n----------------------\n\n- Enh #318: Add `statusCode` from response to init `InvalidResponseException` in `sendRequest` method of `yii\\authclient\\BaseOAuth` class (vleedev)\n- Enh #327: Use `random_int()` when generating OAuth1 nonce (samdark)\n\n\n2.2.10 May 05, 2021\n-------------------\n\n- Chg #315: Add proof key for code exchange PKCE support to oauth2 (AdeAttwood)\n\n\n2.2.9 November 13, 2020\n-----------------------\n\n- Bug #312: do not refresh access token if it is not expired (albertborsos)\n\n\n2.2.8 November 10, 2020\n-----------------------\n\n- Bug #309: Try to refresh token in `BaseOAuth->beforeApiRequestSend()` if `BaseOAuth->autoRefreshAccessToken = true` instead of throwing \"Invalid access token\" exception (marty-macfly)\n- Bug #311: Fix PHP 8 compatibility (samdark)\n\n\n2.2.7 February 12, 2020\n-----------------------\n\n- Bug #292: Updated GitHub token transfer method according to https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api/#authenticating-using-query-parameters (raidkon)\n\n\n2.2.6 November 19, 2019\n-----------------------\n\n- Bug #288: Default request option for turning off SSL peer verification was removed (Rutger, samdark)\n- Enh #205: Add alternative storage system based on cache component (marty-macfly, tunecino)\n\n\n2.2.5 November 05, 2019\n-----------------------\n\n- Enh #217: Replace spomky-labs/jose by JWT Framework (marty-macfly, smcyr)\n\n\n2.2.4 July 02, 2019\n-------------------\n\n- Enh #276: Bumped VK API version to 5.95, according to developers recommendation (EvgeniyRRU)\n- Enh #278: Keep only selected parameters in default return URLs of OAuth services (albertborsos)\n\n\n2.2.3 June 04, 2019\n-------------------\n\n- Chg #273: `OpenIdConnect::validateClaims()` is now protected (samdark)\n\n\n2.2.2 May 14, 2019\n------------------\n\n- Bug #270: Updated Facebook icon to match brand guidelines (ServerDotBiz)\n\n\n2.2.1 April 23, 2019\n--------------------\n\n- Bug #252: Fix bug when `OAuthToken` is incorrectly instantiated if configuration array has incorrect order (rob006)\n\n\n2.2.0 April 16, 2019\n--------------------\n\n- Bug #266: Updated Google client image (nurielmeni)\n- Bug #267: Upgrade LinkedIn client to v2 (machour)\n\n\n2.1.8 January 28, 2019\n----------------------\n\n- Bug #237: Fix redirect from LinkedIn if user refused to authorize permissions request (jakim)\n- Enh #218: Allow configuring user component in `AuthAction` (samdark, lab362)\n- Enh #258: Use Google Sign-in API instead of Google Plus in `yii\\authclient\\clients\\Google` as Google Plus is deprecated (alexeevdv)\n- Enh #259: Allow to pass buildAuthUrl params to OAuth flows in `AuthAction` (albertborsos)\n\n\n2.1.7 September 20, 2018\n------------------------\n\n- Bug #241: Unset parameter `scope` on `defaultReturnUrl` for `OAuth2` class since it was causing bad request response from Google provider (okiwan)\n\n\n2.1.6 September 07, 2018\n------------------------\n\n- Bug #211: `RsaSha` was not passing `$key` to `openssl_pkey_get_private()` in `generateSignature()` (cfhodges)\n- Bug #220: Make `OpenIdConnect` client send token as bearer auth instead of querystring parameter (lukos)\n- Bug #237: Fixed redirect if user cancels login in auth form (msvit1989)\n- Enh #203: Updated VKontakte client to use API version 5.0 (Shketkol)\n\n\n2.1.5 February 08, 2018\n-----------------------\n\n- Enh #187: URL endpoints for `authUrl` and `tokenUrl` for `yii\\authclient\\clients\\LinkedIn` updated (Felli)\n- Enh #195: `yii\\authclient\\AuthAction` refactored to use `yii\\web\\Application::$request` for request data access (klimov-paul)\n- Enh #196: Added `yii\\authclient\\AuthAction::$cancelCallback` allowing custom handling for authentication cancelation (terales, klimov-paul)\n\n\n2.1.4 November 03, 2017\n-----------------------\n\n- Bug #152: Fixed JavaScript callback generated by `\\yii\\authclient\\widgets\\GooglePlusButton` consider 'immediate_failed' as instant auth error (klimov-paul)\n- Bug: Usage of deprecated `yii\\base\\Object` changed to `yii\\base\\BaseObject` allowing compatibility with PHP 7.2 (klimov-paul)\n- Enh #178: Added `yii\\authclient\\clients\\TwitterOAuth2` supporting 'application-only authentication' workflow for Twitter (klimov-paul)\n- Enh #179: Added `apiVersion` at `yii\\authclient\\clients\\VKontakte` (isudakoff)\n- Enh #185: `yii\\authclient\\clients\\VKontakte::initUserAttributes()` now throws verbose exception on unexpected API response instead of PHP error (klimov-paul)\n\n\n2.1.3 June 23, 2017\n-------------------\n\n- Bug #152: Fixed `\\yii\\authclient\\OAuth1::fetchRequestToken()` skips formatting for `yii\\httpclient\\Request` (klimov-paul)\n- Bug #160: Fixed `\\yii\\authclient\\OAuth1::composeSignatureBaseString()` does not take URL query string into account (klimov-paul)\n- Enh #155: Added `\\yii\\authclient\\OpenIdConnect` supporting [OpenID Connect](https://openid.net/connect/) protocol (klimov-paul)\n- Enh #156: Added `\\yii\\authclient\\signature\\RsaSha` and `\\yii\\authclient\\signature\\HmacSha` supporting general 'SHAwithRSA' and 'HMAC SHA' signature methods (klimov-paul)\n- Enh #157: Added `\\yii\\authclient\\OAuth2::authenticateUserJwt()` supporting authentication via JSON Web Token (JWT) (klimov-paul)\n- Enh #163: Added support for exchanging access token at `yii\\authclient\\clients\\Facebook` (klimov-paul)\n- Enh #163: Added support for client-specific access tokens at `yii\\authclient\\clients\\Facebook` (klimov-paul)\n- Chg #163: `yii\\authclient\\clients\\Facebook::$autoRefreshAccessToken` is now disabled by default (klimov-paul)\n\n\n2.1.2 February 15, 2017\n-----------------------\n\n- Bug #135: Fixed `\\yii\\authclient\\OAuth1::fetchRequestToken()` duplicates auth params in the request body, which may cause error on some OAuth 1.0 providers (klimov-paul)\n- Bug #149: Changed `$` to `jQuery` to prevent global conflicts in widget JavaScript (Ariestattoo)\n- Enh #67: Added `appsecret_proof` generation for the API requests at `yii\\authclient\\clients\\Facebook` (blackhpro, SDKiller, klimov-paul)\n\n\n2.1.1 August 29, 2016\n---------------------\n\n- Bug #128: Fixed `\\yii\\authclient\\BaseClient::createRequest()` does not apply `defaultRequestOptions` and `requestOptions` (klimov-paul)\n- Bug #130: Fixed `\\yii\\authclient\\OAuth1::fetchRequestToken()` unable to unset current access token (klimov-paul)\n- Enh #27: Added `\\yii\\authclient\\OAuth1::authorizationHeaderMethods` option allowing to control request methods, which require authorization header (klimov-paul)\n- Enh #132: URL endpoints for `authUrl` and `tokenUrl` for `yii\\authclient\\clients\\VKontakte` updated (KhristenkoYura)\n\n\n2.1.0 August 04, 2016\n---------------------\n\n- Enh #27: This extension no longer require PHP 'cURL' extension to be installed (klimov-paul)\n- Enh #30: Added support for 'client_credentials' grant type via `\\yii\\authclient\\OAuth2::authenticateClient()` (klimov-paul)\n- Enh #33: Added ability to pass raw request content at `\\yii\\authclient\\BaseOAuth::api()` (klimov-paul)\n- Enh #41: Added support for signature generation from request token at `\\yii\\authclient\\OAuth1::fetchAccessToken()` (klimov-paul)\n- Enh #63: Markup for `\\yii\\authclient\\widgets\\AuthChoice` simplified (klimov-paul)\n- Enh #108: This extension now uses `yii2-httpclient` library for the HTTP requests (klimov-paul)\n- Enh #118: Added support for 'password' grant type via `\\yii\\authclient\\OAuth2::authenticateUser()` (klimov-paul)\n- Enh #121: Auth client 'State Storage' abstraction layer extracted (klimov-paul)\n- Enh #124: Methods `clientLink()` and `renderMainContent()` of `yii\\authclient\\widgets\\AuthChoice` reworked to return HTML instead of echo (klimov-paul)\n- Enh #127: Auth 'state' validation added to `OAuth2` for preventing cross-site request forgery (klimov-paul)\n\n\n2.0.6 July 08, 2016\n-------------------\n\n- Bug #37: Fixed `\\yii\\authclient\\widgets\\AuthChoice` overrides any `<a>` tag click behavior between `begin()` and `end()` methods (klimov-paul)\n- Enh #31: Allow to disable automatic 'refresh access token' requests (klimov-paul)\n- Enh #58: Added support for user attribute request params setup for Twitter (umanamente, klimov-paul)\n- Enh #111: `yii\\authclient\\clients\\GitHub` now retrieves user email even if it is set as 'private' at GitHub account (klimov-paul)\n\n\n2.0.5 September 23, 2015\n------------------------\n\n- Bug #25: `yii\\authclient\\BaseOAuth` now can be used without without `session` application component available (klimov-paul)\n- Enh #40: Added `attributeNames` field to `yii\\authclient\\clients\\Facebook`, which allows definition of attributes list fetched from API (samdark)\n- Chg: #47: Default popup size for `yii\\authclient\\clients\\Facebook` has been increased up to 860x480 (lame07, klimov-paul)\n\n\n2.0.4 May 10, 2015\n------------------\n\n- Bug #7224: Fixed incorrect POST fields composition at `yii\\authclient\\OAuth1` (klimov-paul)\n- Bug #7639: Automatic exception throw on 'error' key presence at `yii\\authclient\\BaseOAuth::processResponse()` removed (klimov-paul)\n- Enh #17: Added `attributeNames` field to `yii\\authclient\\clients\\VKontakte` and `yii\\authclient\\clients\\LinkedIn`, which allows definition of attributes list fetched from API (klimov-paul)\n- Enh #6743: Icon for Google at `yii\\authclient\\widgets\\AuthChoice` fixed to follow the Google Brand guidelines (klimov-paul)\n- Enh #7733: `yii\\authclient\\clients\\VKontakte` now gets attributes from access token also (klimov-paul)\n- Enh #7754: New client `yii\\authclient\\clients\\GooglePlus` added to support Google recommended auth flow (klimov-paul)\n- Chg: #7754: `yii\\authclient\\clients\\GoogleOpenId` is now deprecated because this auth method is no longer supported by Google as of April 20, 2015 (klimov-paul)\n\n\n2.0.3 March 01, 2015\n--------------------\n\n- Enh #6892: Default value of `yii\\authclient\\clients\\Twitter::$authUrl` changed to 'authenticate', allowing usage of previous logged user without request an access (kotchuprik)\n\n\n2.0.2 January 11, 2015\n----------------------\n\n- Bug #6502: Fixed `\\yii\\authclient\\OAuth2::refreshAccessToken()` does not save fetched token (sebathi)\n- Bug #6510: Fixed infinite redirect loop using default `\\yii\\authclient\\AuthAction::cancelUrl` (klimov-paul)\n\n\n2.0.1 December 07, 2014\n-----------------------\n\n- Bug #6000: Fixed CCS for `yii\\authclient\\widgets\\AuthChoice` does not loaded if `popupMode` disabled (klimov-paul)\n\n\n2.0.0 October 12, 2014\n----------------------\n\n- Enh #5135: Added ability to operate nested and complex attributes via `yii\\authclient\\BaseClient::normalizeUserAttributeMap` (zinzinday, klimov-paul)\n\n\n2.0.0-rc September 27, 2014\n---------------------------\n\n- Bug #3633: OpenId return URL comparison advanced to prevent url encode problem (klimov-paul)\n- Bug #4490: `yii\\authclient\\widgets\\AuthChoice` does not preserve initial settings while opening popup (klimov-paul)\n- Bug #5011: OAuth API Response with 20x status were not considered success (ychongsaytc)\n- Enh #3416: VKontakte OAuth support added (klimov-paul)\n- Enh #4076: Request HTTP headers argument added to `yii\\authclient\\BaseOAuth::api()` method (klimov-paul)\n- Enh #4134: `yii\\authclient\\InvalidResponseException` added for tracking invalid remote server response (klimov-paul)\n- Enh #4139: User attributes requesting at GoogleOAuth switched to Google+ API (klimov-paul)\n\n\n2.0.0-beta April 13, 2014\n-------------------------\n\n- Initial release.\n\n\n\n", "<?php\n/**\n * @link https://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license https://www.yiiframework.com/license/\n */\n\nnamespace yii\\authclient;\n\nuse Yii;\nuse yii\\helpers\\Json;\nuse yii\\helpers\\Url;\nuse yii\\web\\HttpException;\n\n/**\n * OAuth2 serves as a client for the OAuth 2 flow.\n *\n * In oder to acquire access token perform following sequence:\n *\n * ```php\n * use yii\\authclient\\OAuth2;\n *\n * // assuming class MyAuthClient extends OAuth2\n * $oauthClient = new MyAuthClient();\n * $url = $oauthClient->buildAuthUrl(); // Build authorization URL\n * Yii::$app->getResponse()->redirect($url); // Redirect to authorization URL.\n * // After user returns at our site:\n * $code = Yii::$app->getRequest()->get('code');\n * $accessToken = $oauthClient->fetchAccessToken($code); // Get access token\n * ```\n *\n * @see https://oauth.net/2/\n * @see https://tools.ietf.org/html/rfc6749\n *\n * @author Paul Klimov <klimov.paul@gmail.com>\n * @since 2.0\n */\nabstract class OAuth2 extends BaseOAuth\n{\n    /**\n     * @var string protocol version.\n     */\n    public $version = '2.0';\n    /**\n     * @var string OAuth client ID.\n     */\n    public $clientId;\n    /**\n     * @var string OAuth client secret.\n     */\n    public $clientSecret;\n    /**\n     * @var string token request URL endpoint.\n     */\n    public $tokenUrl;\n    /**\n     * @var bool whether to use and validate auth 'state' parameter in authentication flow.\n     * If enabled - the opaque value will be generated and applied to auth URL to maintain\n     * state between the request and callback. The authorization server includes this value,\n     * when redirecting the user-agent back to the client.\n     * The option is used for preventing cross-site request forgery.\n     * @since 2.1\n     */\n    public $validateAuthState = true;\n    /**\n     * @var bool Whether to enable proof key for code exchange (PKCE) support and add\n     * a `code_challenge` and `code_verifier` to the auth request.\n     * @since 2.2.10\n     *\n     * @see https://oauth.net/2/pkce/\n     */\n    public $enablePkce = false;\n\n\n    /**\n     * Composes user authorization URL.\n     * @param array $params additional auth GET params.\n     * @return string authorization URL.\n     */\n    public function buildAuthUrl(array $params = [])\n    {\n        $defaultParams = [\n            'client_id' => $this->clientId,\n            'response_type' => 'code',\n            'redirect_uri' => $this->getReturnUrl(),\n            'xoauth_displayname' => Yii::$app->name,\n        ];\n        if (!empty($this->scope)) {\n            $defaultParams['scope'] = $this->scope;\n        }\n\n        if ($this->validateAuthState) {\n            $authState = $this->generateAuthState();\n            $this->setState('authState', $authState);\n            $defaultParams['state'] = $authState;\n        }\n\n        if ($this->enablePkce) {\n            $codeVerifier = bin2hex(Yii::$app->security->generateRandomKey(64));\n            $this->setState('authCodeVerifier', $codeVerifier);\n            $defaultParams['code_challenge'] = trim(strtr(base64_encode(hash('sha256', $codeVerifier, true)), '+/', '-_'), '=');\n            $defaultParams['code_challenge_method'] = 'S256';\n        }\n\n        return $this->composeUrl($this->authUrl, array_merge($defaultParams, $params));\n    }\n\n    /**\n     * Fetches access token from authorization code.\n     * @param string $authCode authorization code, usually comes at GET parameter 'code'.\n     * @param array $params additional request params.\n     * @return OAuthToken access token.\n     * @throws HttpException on invalid auth state in case [[enableStateValidation]] is enabled.\n     */\n    public function fetchAccessToken($authCode, array $params = [])\n    {\n        if ($this->validateAuthState) {\n            $authState = $this->getState('authState');\n            $incomingRequest = Yii::$app->getRequest();\n            $incomingState = $incomingRequest->get('state', $incomingRequest->post('state'));\n            if (!isset($incomingState) || empty($authState) || strcmp($incomingState, $authState) !== 0) {\n                throw new HttpException(400, 'Invalid auth state parameter.');\n            }\n            $this->removeState('authState');\n        }\n\n        $defaultParams = [\n            'code' => $authCode,\n            'grant_type' => 'authorization_code',\n            'redirect_uri' => $this->getReturnUrl(),\n        ];\n\n        if ($this->enablePkce) {\n            $authCodeVerifier = $this->getState('authCodeVerifier');\n            if (empty($authCodeVerifier)) {\n                // Prevent PKCE Downgrade Attack\n                // https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#name-pkce-downgrade-attack\n                throw new HttpException(409, 'Invalid auth code verifier.');\n            }\n            $defaultParams['code_verifier'] = $authCodeVerifier;\n            $this->removeState('authCodeVerifier');\n        }\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData(array_merge($defaultParams, $params));\n\n         // Azure AD will complain if there is no `Origin` header.\n        if ($this->enablePkce) {\n            $request->addHeaders(['Origin' => Url::to('/')]);\n        }\n\n        $this->applyClientCredentialsToRequest($request);\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function applyAccessTokenToRequest($request, $accessToken)\n    {\n        $data = $request->getData();\n        $data['access_token'] = $accessToken->getToken();\n        $request->setData($data);\n    }\n\n    /**\n     * Applies client credentials (e.g. [[clientId]] and [[clientSecret]]) to the HTTP request instance.\n     * This method should be invoked before sending any HTTP request, which requires client credentials.\n     * @param \\yii\\httpclient\\Request $request HTTP request instance.\n     * @since 2.1.3\n     */\n    protected function applyClientCredentialsToRequest($request)\n    {\n        $request->addData([\n            'client_id' => $this->clientId,\n            'client_secret' => $this->clientSecret,\n        ]);\n    }\n\n    /**\n     * Gets new auth token to replace expired one.\n     * @param OAuthToken $token expired auth token.\n     * @return OAuthToken new auth token.\n     */\n    public function refreshAccessToken(OAuthToken $token)\n    {\n        $params = [\n            'grant_type' => 'refresh_token'\n        ];\n        $params = array_merge($token->getParams(), $params);\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData($params);\n\n        $this->applyClientCredentialsToRequest($request);\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n\n    /**\n     * Generates the auth state value.\n     * @return string auth state value.\n     * @since 2.1\n     */\n    protected function generateAuthState()\n    {\n        $baseString = get_class($this) . '-' . time();\n        if (Yii::$app->has('session')) {\n            $baseString .= '-' . Yii::$app->session->getId();\n        }\n        return hash('sha256', uniqid($baseString, true));\n    }\n\n    /**\n     * Creates token from its configuration.\n     * @param array $tokenConfig token configuration.\n     * @return OAuthToken token instance.\n     */\n    protected function createToken(array $tokenConfig = [])\n    {\n        $defaultTokenConfig = ['tokenParamKey' => 'access_token'];\n        $tokenConfig = array_merge($defaultTokenConfig, $tokenConfig);\n\n        return parent::createToken($tokenConfig);\n    }\n\n    /**\n     * Authenticate OAuth client directly at the provider without third party (user) involved,\n     * using 'client_credentials' grant type.\n     * @see https://tools.ietf.org/html/rfc6749#section-4.4\n     * @param array $params additional request params.\n     * @return OAuthToken access token.\n     * @since 2.1.0\n     */\n    public function authenticateClient($params = [])\n    {\n        $defaultParams = [\n            'grant_type' => 'client_credentials',\n        ];\n\n        if (!empty($this->scope)) {\n            $defaultParams['scope'] = $this->scope;\n        }\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData(array_merge($defaultParams, $params));\n\n        $this->applyClientCredentialsToRequest($request);\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n\n    /**\n     * Authenticates user directly by 'username/password' pair, using 'password' grant type.\n     * @see https://tools.ietf.org/html/rfc6749#section-4.3\n     * @param string $username user name.\n     * @param string $password user password.\n     * @param array $params additional request params.\n     * @return OAuthToken access token.\n     * @since 2.1.0\n     */\n    public function authenticateUser($username, $password, $params = [])\n    {\n        $defaultParams = [\n            'grant_type' => 'password',\n            'username' => $username,\n            'password' => $password,\n        ];\n\n        if (!empty($this->scope)) {\n            $defaultParams['scope'] = $this->scope;\n        }\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData(array_merge($defaultParams, $params));\n\n        $this->applyClientCredentialsToRequest($request);\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n\n    /**\n     * Authenticates user directly using JSON Web Token (JWT).\n     * @see https://tools.ietf.org/html/rfc7515\n     * @param string $username\n     * @param \\yii\\authclient\\signature\\BaseMethod|array $signature signature method or its array configuration.\n     * If empty - [[signatureMethod]] will be used.\n     * @param array $options additional options. Valid options are:\n     *\n     * - header: array, additional JWS header parameters.\n     * - payload: array, additional JWS payload (message or claim-set) parameters.\n     * - signatureKey: string, signature key to be used, if not set - [[clientSecret]] will be used.\n     *\n     * @param array $params additional request params.\n     * @return OAuthToken access token.\n     * @since 2.1.3\n     */\n    public function authenticateUserJwt($username, $signature = null, $options = [], $params = [])\n    {\n        if (empty($signature)) {\n            $signatureMethod = $this->getSignatureMethod();\n        } elseif (is_object($signature)) {\n            $signatureMethod = $signature;\n        } else {\n            $signatureMethod = $this->createSignatureMethod($signature);\n        }\n\n        $header = isset($options['header']) ? $options['header'] : [];\n        $payload = isset($options['payload']) ? $options['payload'] : [];\n\n        $header = array_merge([\n            'typ' => 'JWT'\n        ], $header);\n        if (!isset($header['alg'])) {\n            $signatureName = $signatureMethod->getName();\n            if (preg_match('/^([a-z])[a-z]*\\-([a-z])[a-z]*([0-9]+)$/is', $signatureName, $matches)) {\n                // convert 'RSA-SHA256' to 'RS256' :\n                $signatureName = $matches[1] . $matches[2] . $matches[3];\n            }\n            $header['alg'] = $signatureName;\n        }\n\n        $payload = array_merge([\n            'iss' => $username,\n            'scope' => $this->scope,\n            'aud' => $this->tokenUrl,\n            'iat' => time(),\n        ], $payload);\n        if (!isset($payload['exp'])) {\n            $payload['exp'] = $payload['iat'] + 3600;\n        }\n\n        $signatureBaseString = base64_encode(Json::encode($header)) . '.' . base64_encode(Json::encode($payload));\n        $signatureKey = isset($options['signatureKey']) ? $options['signatureKey'] : $this->clientSecret;\n        $signature = $signatureMethod->generateSignature($signatureBaseString, $signatureKey);\n\n        $assertion = $signatureBaseString . '.' . $signature;\n\n        $request = $this->createRequest()\n            ->setMethod('POST')\n            ->setUrl($this->tokenUrl)\n            ->setData(array_merge([\n                'grant_type' => 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                'assertion' => $assertion,\n            ], $params));\n\n        $response = $this->sendRequest($request);\n\n        $token = $this->createToken(['params' => $response]);\n        $this->setAccessToken($token);\n\n        return $token;\n    }\n}\n"], "filenames": ["CHANGELOG.md", "src/OAuth2.php"], "buggy_code_start_loc": [8, 134], "buggy_code_end_loc": [9, 135], "fixing_code_start_loc": [8, 134], "fixing_code_end_loc": [10, 142], "type": "CWE-287", "message": "yii2-authclient is an extension that adds OpenID, OAuth, OAuth2 and OpenId Connect consumers for the Yii framework 2.0. In yii2-authclient prior to version 2.2.15, the Oauth2 PKCE implementation is vulnerable in 2 ways. First, the `authCodeVerifier` should be removed after usage (similar to `authState`). Second, there is a risk for a `downgrade attack` if PKCE is being relied on for CSRF protection. Version 2.2.15 contains a patch for the issue. No known workarounds are available.", "other": {"cve": {"id": "CVE-2023-50714", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-22T19:15:09.057", "lastModified": "2024-01-08T15:12:05.227", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "yii2-authclient is an extension that adds OpenID, OAuth, OAuth2 and OpenId Connect consumers for the Yii framework 2.0. In yii2-authclient prior to version 2.2.15, the Oauth2 PKCE implementation is vulnerable in 2 ways. First, the `authCodeVerifier` should be removed after usage (similar to `authState`). Second, there is a risk for a `downgrade attack` if PKCE is being relied on for CSRF protection. Version 2.2.15 contains a patch for the issue. No known workarounds are available."}, {"lang": "es", "value": "yii2-authclient es una extensi\u00f3n que agrega consumidores OpenID, OAuth, OAuth2 y OpenId Connect para el framework Yii 2.0. En yii2-authclient anterior a la versi\u00f3n 2.2.15, la implementaci\u00f3n de Oauth2 PKCE es vulnerable de 2 maneras. Primero, \"authCodeVerifier\" debe eliminarse despu\u00e9s de su uso (similar a \"authState\"). En segundo lugar, existe el riesgo de un \"downgrade attack\" si se conf\u00eda en PKCE para la protecci\u00f3n CSRF. La versi\u00f3n 2.2.15 contiene un parche para el problema. No hay workarounds disponibles."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-347"}, {"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yiiframework:yii2-authclient:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.2.15", "matchCriteriaId": "AA4F5AF6-EA08-40F8-9C22-EA09F0653F11"}]}]}], "references": [{"url": "https://github.com/yiisoft/yii2-authclient/blob/0d1c3880f4d79e20aa1d77c012650b54e69695ff/src/OAuth1.php#L158", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/yiisoft/yii2-authclient/blob/0d1c3880f4d79e20aa1d77c012650b54e69695ff/src/OAuth2.php#L121", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/yiisoft/yii2-authclient/blob/0d1c3880f4d79e20aa1d77c012650b54e69695ff/src/OpenIdConnect.php#L420", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/yiisoft/yii2-authclient/commit/721ed974bc44137437b0cdc8454e137fff8db213", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/yiisoft/yii2-authclient/security/advisories/GHSA-rw54-6826-c8j5", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yiisoft/yii2-authclient/commit/721ed974bc44137437b0cdc8454e137fff8db213"}}