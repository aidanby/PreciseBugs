{"buggy_code": ["import treeService from \"../../services/tree.js\";\nimport utils from \"../../services/utils.js\";\nimport ws from \"../../services/ws.js\";\nimport toastService from \"../../services/toast.js\";\nimport froca from \"../../services/froca.js\";\nimport openService from \"../../services/open.js\";\nimport BasicWidget from \"../basic_widget.js\";\n\nconst TPL = `\n<div class=\"export-dialog modal fade mx-auto\" tabindex=\"-1\" role=\"dialog\">\n    <style>\n    .export-dialog .export-form .form-check {\n        padding-top: 10px;\n        padding-bottom: 10px;\n    }\n    \n    .export-dialog .export-form .format-choice {\n        padding-left: 40px;\n        display: none;\n    }\n    \n    .export-dialog .export-form .opml-versions {\n        padding-left: 60px;\n        display: none;\n    }\n    \n    .export-dialog .export-form .form-check-label {\n        padding: 2px;\n    }\n    </style>\n\n    <div class=\"modal-dialog modal-lg\" role=\"document\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\">Export note \"<span class=\"export-note-title\"></span>\"</h5>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <form class=\"export-form\">\n                <div class=\"modal-body\">\n                    <div class=\"form-check\">\n                        <label class=\"form-check-label\">\n                            <input class=\"export-type-subtree form-check-input\" type=\"radio\" name=\"export-type\" value=\"subtree\">\n                            this note and all of its descendants\n                        </label>\n                    </div>\n\n                    <div class=\"export-subtree-formats format-choice\">\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-subtree-format\" value=\"html\">\n                                HTML in ZIP archive - this is recommended since this preserves all the formatting.\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-subtree-format\" value=\"markdown\">\n                                Markdown - this preserves most of the formatting.\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-subtree-format\" value=\"opml\">\n                                OPML - outliner interchange format for text only. Formatting, images and files are not included.\n                            </label>\n                        </div>\n\n                        <div class=\"opml-versions\">\n                            <div class=\"form-check\">\n                                <label class=\"form-check-label\">\n                                    <input class=\"form-check-input\" type=\"radio\" name=\"opml-version\" value=\"1.0\">\n                                    OPML v1.0 - plain text only\n                                </label>\n                            </div>\n\n                            <div class=\"form-check\">\n                                <label class=\"form-check-label\">\n                                    <input class=\"form-check-input\" type=\"radio\" name=\"opml-version\" value=\"2.0\">\n                                    OMPL v2.0 - allows also HTML\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-check\">\n                        <label class=\"form-check-label\">\n                            <input class=\"form-check-input\" type=\"radio\" name=\"export-type\" value=\"single\">\n                            only this note without its descendants\n                        </label>\n                    </div>\n\n                    <div class=\"export-single-formats format-choice\">\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-single-format\" value=\"html\">\n                                HTML - this is recommended since this preserves all the formatting.\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-single-format\" value=\"markdown\">                            \n                                Markdown - this preserves most of the formatting.\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"export-button btn btn-primary\">Export</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>`;\n\nexport default class ExportDialog extends BasicWidget {\n    constructor() {\n        super();\n\n        this.taskId = '';\n        this.branchId = null;\n    }\n\n    doRender() {\n        this.$widget = $(TPL);\n        this.$form = this.$widget.find(\".export-form\");\n        this.$noteTitle = this.$widget.find(\".export-note-title\");\n        this.$subtreeFormats = this.$widget.find(\".export-subtree-formats\");\n        this.$singleFormats = this.$widget.find(\".export-single-formats\");\n        this.$subtreeType = this.$widget.find(\".export-type-subtree\");\n        this.$singleType = this.$widget.find(\".export-type-single\");\n        this.$exportButton = this.$widget.find(\".export-button\");\n        this.$opmlVersions = this.$widget.find(\".opml-versions\");\n\n        this.$form.on('submit', () => {\n            this.$widget.modal('hide');\n\n            const exportType = this.$widget.find(\"input[name='export-type']:checked\").val();\n\n            if (!exportType) {\n                // this shouldn't happen as we always choose default export type\n                alert(\"Choose export type first please\");\n                return;\n            }\n\n            const exportFormat = exportType === 'subtree'\n                ? this.$widget.find(\"input[name=export-subtree-format]:checked\").val()\n                : this.$widget.find(\"input[name=export-single-format]:checked\").val();\n\n            const exportVersion = exportFormat === 'opml'\n                ? this.$widget.find(\"input[name='opml-version']:checked\").val()\n                : \"1.0\";\n\n            this.exportBranch(this.branchId, exportType, exportFormat, exportVersion);\n\n            return false;\n        });\n\n        this.$widget.find('input[name=export-type]').on('change', e => {\n            if (e.currentTarget.value === 'subtree') {\n                if (this.$widget.find(\"input[name=export-subtree-format]:checked\").length === 0) {\n                    this.$widget.find(\"input[name=export-subtree-format]:first\").prop(\"checked\", true);\n                }\n\n                this.$subtreeFormats.slideDown();\n                this.$singleFormats.slideUp();\n            }\n            else {\n                if (this.$widget.find(\"input[name=export-single-format]:checked\").length === 0) {\n                    this.$widget.find(\"input[name=export-single-format]:first\").prop(\"checked\", true);\n                }\n\n                this.$subtreeFormats.slideUp();\n                this.$singleFormats.slideDown();\n            }\n        });\n\n        this.$widget.find('input[name=export-subtree-format]').on('change', e => {\n            if (e.currentTarget.value === 'opml') {\n                this.$opmlVersions.slideDown();\n            }\n            else {\n                this.$opmlVersions.slideUp();\n            }\n        });\n    }\n\n    async showExportDialogEvent({notePath, defaultType}) {\n        // each opening of the dialog resets the taskId, so we don't associate it with previous exports anymore\n        this.taskId = '';\n        this.$exportButton.removeAttr(\"disabled\");\n\n        if (defaultType === 'subtree') {\n            this.$subtreeType.prop(\"checked\", true).trigger('change');\n\n            // to show/hide OPML versions\n            this.$widget.find(\"input[name=export-subtree-format]:checked\").trigger('change');\n        }\n        else if (defaultType === 'single') {\n            this.$singleType.prop(\"checked\", true).trigger('change');\n        }\n        else {\n            throw new Error(\"Unrecognized type \" + defaultType);\n        }\n\n        this.$widget.find(\".opml-v2\").prop(\"checked\", true); // setting default\n\n        utils.openDialog(this.$widget);\n\n        const {noteId, parentNoteId} = treeService.getNoteIdAndParentIdFromNotePath(notePath);\n\n        this.branchId = await froca.getBranchId(parentNoteId, noteId);\n\n        const noteTitle = await treeService.getNoteTitle(noteId);\n\n        this.$noteTitle.html(noteTitle);\n    }\n\n    exportBranch(branchId, type, format, version) {\n        this.taskId = utils.randomString(10);\n\n        const url = openService.getUrlForDownload(`api/notes/${branchId}/export/${type}/${format}/${version}/${this.taskId}`);\n\n        openService.download(url);\n    }\n}\n\nws.subscribeToMessages(async message => {\n    const makeToast = (id, message) => ({\n        id: id,\n        title: \"Export status\",\n        message: message,\n        icon: \"arrow-square-up-right\"\n    });\n\n    if (message.taskType !== 'export') {\n        return;\n    }\n\n    if (message.type === 'taskError') {\n        toastService.closePersistent(message.taskId);\n        toastService.showError(message.message);\n    }\n    else if (message.type === 'taskProgressCount') {\n        toastService.showPersistent(makeToast(message.taskId, \"Export in progress: \" + message.progressCount));\n    }\n    else if (message.type === 'taskSucceeded') {\n        const toast = makeToast(message.taskId, \"Export finished successfully.\");\n        toast.closeAfter = 5000;\n\n        toastService.showPersistent(toast);\n    }\n});\n"], "fixing_code": ["import treeService from \"../../services/tree.js\";\nimport utils from \"../../services/utils.js\";\nimport ws from \"../../services/ws.js\";\nimport toastService from \"../../services/toast.js\";\nimport froca from \"../../services/froca.js\";\nimport openService from \"../../services/open.js\";\nimport BasicWidget from \"../basic_widget.js\";\n\nconst TPL = `\n<div class=\"export-dialog modal fade mx-auto\" tabindex=\"-1\" role=\"dialog\">\n    <style>\n    .export-dialog .export-form .form-check {\n        padding-top: 10px;\n        padding-bottom: 10px;\n    }\n    \n    .export-dialog .export-form .format-choice {\n        padding-left: 40px;\n        display: none;\n    }\n    \n    .export-dialog .export-form .opml-versions {\n        padding-left: 60px;\n        display: none;\n    }\n    \n    .export-dialog .export-form .form-check-label {\n        padding: 2px;\n    }\n    </style>\n\n    <div class=\"modal-dialog modal-lg\" role=\"document\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\">Export note \"<span class=\"export-note-title\"></span>\"</h5>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <form class=\"export-form\">\n                <div class=\"modal-body\">\n                    <div class=\"form-check\">\n                        <label class=\"form-check-label\">\n                            <input class=\"export-type-subtree form-check-input\" type=\"radio\" name=\"export-type\" value=\"subtree\">\n                            this note and all of its descendants\n                        </label>\n                    </div>\n\n                    <div class=\"export-subtree-formats format-choice\">\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-subtree-format\" value=\"html\">\n                                HTML in ZIP archive - this is recommended since this preserves all the formatting.\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-subtree-format\" value=\"markdown\">\n                                Markdown - this preserves most of the formatting.\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-subtree-format\" value=\"opml\">\n                                OPML - outliner interchange format for text only. Formatting, images and files are not included.\n                            </label>\n                        </div>\n\n                        <div class=\"opml-versions\">\n                            <div class=\"form-check\">\n                                <label class=\"form-check-label\">\n                                    <input class=\"form-check-input\" type=\"radio\" name=\"opml-version\" value=\"1.0\">\n                                    OPML v1.0 - plain text only\n                                </label>\n                            </div>\n\n                            <div class=\"form-check\">\n                                <label class=\"form-check-label\">\n                                    <input class=\"form-check-input\" type=\"radio\" name=\"opml-version\" value=\"2.0\">\n                                    OMPL v2.0 - allows also HTML\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"form-check\">\n                        <label class=\"form-check-label\">\n                            <input class=\"form-check-input\" type=\"radio\" name=\"export-type\" value=\"single\">\n                            only this note without its descendants\n                        </label>\n                    </div>\n\n                    <div class=\"export-single-formats format-choice\">\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-single-format\" value=\"html\">\n                                HTML - this is recommended since this preserves all the formatting.\n                            </label>\n                        </div>\n\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"export-single-format\" value=\"markdown\">                            \n                                Markdown - this preserves most of the formatting.\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"export-button btn btn-primary\">Export</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>`;\n\nexport default class ExportDialog extends BasicWidget {\n    constructor() {\n        super();\n\n        this.taskId = '';\n        this.branchId = null;\n    }\n\n    doRender() {\n        this.$widget = $(TPL);\n        this.$form = this.$widget.find(\".export-form\");\n        this.$noteTitle = this.$widget.find(\".export-note-title\");\n        this.$subtreeFormats = this.$widget.find(\".export-subtree-formats\");\n        this.$singleFormats = this.$widget.find(\".export-single-formats\");\n        this.$subtreeType = this.$widget.find(\".export-type-subtree\");\n        this.$singleType = this.$widget.find(\".export-type-single\");\n        this.$exportButton = this.$widget.find(\".export-button\");\n        this.$opmlVersions = this.$widget.find(\".opml-versions\");\n\n        this.$form.on('submit', () => {\n            this.$widget.modal('hide');\n\n            const exportType = this.$widget.find(\"input[name='export-type']:checked\").val();\n\n            if (!exportType) {\n                // this shouldn't happen as we always choose default export type\n                alert(\"Choose export type first please\");\n                return;\n            }\n\n            const exportFormat = exportType === 'subtree'\n                ? this.$widget.find(\"input[name=export-subtree-format]:checked\").val()\n                : this.$widget.find(\"input[name=export-single-format]:checked\").val();\n\n            const exportVersion = exportFormat === 'opml'\n                ? this.$widget.find(\"input[name='opml-version']:checked\").val()\n                : \"1.0\";\n\n            this.exportBranch(this.branchId, exportType, exportFormat, exportVersion);\n\n            return false;\n        });\n\n        this.$widget.find('input[name=export-type]').on('change', e => {\n            if (e.currentTarget.value === 'subtree') {\n                if (this.$widget.find(\"input[name=export-subtree-format]:checked\").length === 0) {\n                    this.$widget.find(\"input[name=export-subtree-format]:first\").prop(\"checked\", true);\n                }\n\n                this.$subtreeFormats.slideDown();\n                this.$singleFormats.slideUp();\n            }\n            else {\n                if (this.$widget.find(\"input[name=export-single-format]:checked\").length === 0) {\n                    this.$widget.find(\"input[name=export-single-format]:first\").prop(\"checked\", true);\n                }\n\n                this.$subtreeFormats.slideUp();\n                this.$singleFormats.slideDown();\n            }\n        });\n\n        this.$widget.find('input[name=export-subtree-format]').on('change', e => {\n            if (e.currentTarget.value === 'opml') {\n                this.$opmlVersions.slideDown();\n            }\n            else {\n                this.$opmlVersions.slideUp();\n            }\n        });\n    }\n\n    async showExportDialogEvent({notePath, defaultType}) {\n        // each opening of the dialog resets the taskId, so we don't associate it with previous exports anymore\n        this.taskId = '';\n        this.$exportButton.removeAttr(\"disabled\");\n\n        if (defaultType === 'subtree') {\n            this.$subtreeType.prop(\"checked\", true).trigger('change');\n\n            // to show/hide OPML versions\n            this.$widget.find(\"input[name=export-subtree-format]:checked\").trigger('change');\n        }\n        else if (defaultType === 'single') {\n            this.$singleType.prop(\"checked\", true).trigger('change');\n        }\n        else {\n            throw new Error(\"Unrecognized type \" + defaultType);\n        }\n\n        this.$widget.find(\".opml-v2\").prop(\"checked\", true); // setting default\n\n        utils.openDialog(this.$widget);\n\n        const {noteId, parentNoteId} = treeService.getNoteIdAndParentIdFromNotePath(notePath);\n\n        this.branchId = await froca.getBranchId(parentNoteId, noteId);\n        this.$noteTitle.text(await treeService.getNoteTitle(noteId));\n    }\n\n    exportBranch(branchId, type, format, version) {\n        this.taskId = utils.randomString(10);\n\n        const url = openService.getUrlForDownload(`api/notes/${branchId}/export/${type}/${format}/${version}/${this.taskId}`);\n\n        openService.download(url);\n    }\n}\n\nws.subscribeToMessages(async message => {\n    const makeToast = (id, message) => ({\n        id: id,\n        title: \"Export status\",\n        message: message,\n        icon: \"arrow-square-up-right\"\n    });\n\n    if (message.taskType !== 'export') {\n        return;\n    }\n\n    if (message.type === 'taskError') {\n        toastService.closePersistent(message.taskId);\n        toastService.showError(message.message);\n    }\n    else if (message.type === 'taskProgressCount') {\n        toastService.showPersistent(makeToast(message.taskId, \"Export in progress: \" + message.progressCount));\n    }\n    else if (message.type === 'taskSucceeded') {\n        const toast = makeToast(message.taskId, \"Export finished successfully.\");\n        toast.closeAfter = 5000;\n\n        toastService.showPersistent(toast);\n    }\n});\n"], "filenames": ["src/public/app/widgets/dialogs/export.js"], "buggy_code_start_loc": [216], "buggy_code_end_loc": [220], "fixing_code_start_loc": [216], "fixing_code_end_loc": [217], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository zadam/trilium prior to 0.53.3.", "other": {"cve": {"id": "CVE-2022-2365", "sourceIdentifier": "security@huntr.dev", "published": "2022-07-10T22:15:08.120", "lastModified": "2022-07-15T17:53:57.170", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository zadam/trilium prior to 0.53.3."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio GitHub zadam/trilium versiones anteriores a 0.53.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:trilium_project:trilium:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.53.3", "matchCriteriaId": "43711100-16D1-45F5-AF22-B71D58459244"}]}]}], "references": [{"url": "https://github.com/zadam/trilium/commit/1dfc37704fdd90ab7afbd8a586bdfc5cfaadeb8a", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/34b281cd-ff4a-4ab0-ae25-56aef557682f", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/zadam/trilium/commit/1dfc37704fdd90ab7afbd8a586bdfc5cfaadeb8a"}}