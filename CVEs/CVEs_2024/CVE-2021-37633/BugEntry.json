{"buggy_code": ["import { siteDir } from \"discourse/lib/text-direction\";\n\nconst D_POPOVER_ID = \"d-popover\";\n\nconst D_POPOVER_TEMPLATE = `\n  <div id=\"${D_POPOVER_ID}\" class=\"is-under\">\n    <div class=\"d-popover-arrow d-popover-top-arrow\"></div>\n    <div class=\"d-popover-content\">\n      <div class=\"spinner small\"></div>\n    </div>\n    <div class=\"d-popover-arrow d-popover-bottom-arrow\"></div>\n  </div>\n`;\n\nconst D_ARROW_HEIGHT = 10;\n\nconst D_HORIZONTAL_MARGIN = 5;\n\nexport const POPOVER_SELECTORS =\n  \"[data-html-popover], [data-html-tooltip], [data-popover], [data-tooltip]\";\n\nexport function hidePopover() {\n  getPopover().fadeOut().remove();\n\n  return getPopover();\n}\n\nexport function showPopover(event, options = {}) {\n  let $enteredElement = $(event.target).closest(POPOVER_SELECTORS).first();\n\n  if (!$enteredElement.length) {\n    $enteredElement = $(event.target);\n  }\n\n  if (isRetina()) {\n    getPopover().addClass(\"retina\");\n  }\n\n  if (!getPopover().length) {\n    $(\"body\").append($(D_POPOVER_TEMPLATE));\n  }\n\n  setPopoverHtmlContent($enteredElement, options.htmlContent);\n  setPopoverTextContent($enteredElement, options.textContent);\n\n  getPopover().fadeIn();\n\n  positionPopover($enteredElement);\n\n  return {\n    html: (content) => replaceHtmlContent($enteredElement, content),\n    text: (content) => replaceTextContent($enteredElement, content),\n    hide: hidePopover,\n  };\n}\n\nfunction setPopoverHtmlContent($enteredElement, content) {\n  content =\n    content ||\n    $enteredElement.attr(\"data-html-popover\") ||\n    $enteredElement.attr(\"data-html-tooltip\");\n\n  replaceHtmlContent($enteredElement, content);\n}\n\nfunction setPopoverTextContent($enteredElement, content) {\n  content =\n    content ||\n    $enteredElement.attr(\"data-popover\") ||\n    $enteredElement.attr(\"data-tooltip\");\n\n  replaceTextContent($enteredElement, content);\n}\n\nfunction replaceTextContent($enteredElement, content) {\n  if (content) {\n    getPopover().find(\".d-popover-content\").text(content);\n    window.requestAnimationFrame(() => positionPopover($enteredElement));\n  }\n}\n\nfunction replaceHtmlContent($enteredElement, content) {\n  if (content) {\n    getPopover().find(\".d-popover-content\").html(content);\n    window.requestAnimationFrame(() => positionPopover($enteredElement));\n  }\n}\n\nfunction positionPopover($element) {\n  const $popover = getPopover();\n  $popover.removeClass(\"is-above is-under is-left-aligned is-right-aligned\");\n\n  const $dHeader = $(\".d-header\");\n  const windowRect = {\n    left: 0,\n    top: $dHeader.length ? $dHeader[0].getBoundingClientRect().bottom : 0,\n    width: $(window).width(),\n    height: $(window).height(),\n  };\n\n  const popoverRect = {\n    width: $popover.width(),\n    height: $popover.height(),\n    left: null,\n    right: null,\n  };\n\n  if (popoverRect.width > windowRect.width - D_HORIZONTAL_MARGIN * 2) {\n    popoverRect.width = windowRect.width - D_HORIZONTAL_MARGIN * 2;\n    $popover.width(popoverRect.width);\n  }\n\n  const targetRect = $element[0].getBoundingClientRect();\n  const underSpace = windowRect.height - targetRect.bottom - D_ARROW_HEIGHT;\n  const topSpace = targetRect.top - windowRect.top - D_ARROW_HEIGHT;\n\n  if (\n    underSpace > popoverRect.height + D_HORIZONTAL_MARGIN ||\n    underSpace > topSpace\n  ) {\n    $popover\n      .css(\"top\", targetRect.bottom + window.pageYOffset + D_ARROW_HEIGHT)\n      .addClass(\"is-under\");\n  } else {\n    $popover\n      .css(\n        \"top\",\n        targetRect.top +\n          window.pageYOffset -\n          popoverRect.height -\n          D_ARROW_HEIGHT\n      )\n      .addClass(\"is-above\");\n  }\n\n  const leftSpace = targetRect.left + targetRect.width / 2;\n\n  if (siteDir() === \"ltr\") {\n    if (leftSpace > popoverRect.width / 2 + D_HORIZONTAL_MARGIN) {\n      popoverRect.left = leftSpace - popoverRect.width / 2;\n      $popover.css(\"left\", popoverRect.left);\n    } else {\n      popoverRect.left = D_HORIZONTAL_MARGIN;\n      $popover.css(\"left\", popoverRect.left).addClass(\"is-left-aligned\");\n    }\n  } else {\n    const rightSpace = windowRect.width - targetRect.right;\n\n    if (rightSpace > popoverRect.width / 2 + D_HORIZONTAL_MARGIN) {\n      popoverRect.left = leftSpace - popoverRect.width / 2;\n      $popover.css(\"left\", popoverRect.left);\n    } else {\n      popoverRect.left =\n        windowRect.width - popoverRect.width - D_HORIZONTAL_MARGIN * 2;\n      $popover.css(\"left\", popoverRect.left).addClass(\"is-right-aligned\");\n    }\n  }\n\n  let arrowPosition;\n  if (siteDir() === \"ltr\") {\n    arrowPosition = Math.abs(targetRect.left - popoverRect.left);\n  } else {\n    arrowPosition = targetRect.left - popoverRect.left + targetRect.width / 2;\n  }\n  $popover.find(\".d-popover-arrow\").css(\"left\", arrowPosition);\n}\n\nfunction isRetina() {\n  return window.devicePixelRatio && window.devicePixelRatio > 1;\n}\n\nfunction getPopover() {\n  return $(document.getElementById(D_POPOVER_ID));\n}\n", "import PrettyText, { buildOptions } from \"pretty-text/pretty-text\";\nimport { module, test } from \"qunit\";\nimport { hrefAllowed } from \"pretty-text/sanitizer\";\n\nmodule(\"Unit | Utility | sanitizer\", function () {\n  test(\"sanitize\", function (assert) {\n    const pt = new PrettyText(\n      buildOptions({\n        siteSettings: {\n          allowed_iframes:\n            \"https://www.google.com/maps/embed?|https://www.openstreetmap.org/export/embed.html?\",\n        },\n      })\n    );\n    const cooked = (input, expected, text) =>\n      assert.equal(pt.cook(input), expected.replace(/\\/>/g, \">\"), text);\n\n    assert.equal(\n      pt.sanitize('<i class=\"fa-bug fa-spin\">bug</i>'),\n      \"<i>bug</i>\"\n    );\n    assert.equal(\n      pt.sanitize(\"<div><script>alert('hi');</script></div>\"),\n      \"<div></div>\"\n    );\n    assert.equal(\n      pt.sanitize(\"<div><p class=\\\"funky\\\" wrong='1'>hello</p></div>\"),\n      \"<div><p>hello</p></div>\"\n    );\n    assert.equal(pt.sanitize(\"<3 <3\"), \"&lt;3 &lt;3\");\n    assert.equal(pt.sanitize(\"<_<\"), \"&lt;_&lt;\");\n\n    cooked(\n      \"hello<script>alert(42)</script>\",\n      \"<p>hello</p>\",\n      \"it sanitizes while cooking\"\n    );\n\n    cooked(\n      \"<a href='http://disneyland.disney.go.com/'>disney</a> <a href='http://reddit.com'>reddit</a>\",\n      '<p><a href=\"http://disneyland.disney.go.com/\">disney</a> <a href=\"http://reddit.com\">reddit</a></p>',\n      \"we can embed proper links\"\n    );\n\n    cooked(\"<center>hello</center>\", \"hello\", \"it does not allow centering\");\n    cooked(\n      \"<blockquote>a\\n</blockquote>\\n\",\n      \"<blockquote>a\\n</blockquote>\",\n      \"it does not double sanitize\"\n    );\n\n    cooked(\n      '<iframe src=\"http://discourse.org\" width=\"100\" height=\"42\"></iframe>',\n      \"\",\n      \"it does not allow most iframes\"\n    );\n\n    cooked(\n      '<iframe src=\"https://www.google.com/maps/embed?pb=!1m10!1m8!1m3!1d2624.9983685732213!2d2.29432085!3d48.85824149999999!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2s!4v1385737436368\" width=\"100\" height=\"42\"></iframe>',\n      '<iframe src=\"https://www.google.com/maps/embed?pb=!1m10!1m8!1m3!1d2624.9983685732213!2d2.29432085!3d48.85824149999999!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2s!4v1385737436368\" width=\"100\" height=\"42\"></iframe>',\n      \"it allows iframe to google maps\"\n    );\n\n    cooked(\n      '<iframe width=\"425\" height=\"350\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" src=\"https://www.openstreetmap.org/export/embed.html?bbox=22.49454975128174%2C51.220338322410775%2C22.523088455200195%2C51.23345342732931&amp;layer=mapnik\"></iframe>',\n      '<iframe width=\"425\" height=\"350\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" src=\"https://www.openstreetmap.org/export/embed.html?bbox=22.49454975128174%2C51.220338322410775%2C22.523088455200195%2C51.23345342732931&amp;layer=mapnik\"></iframe>',\n      \"it allows iframe to OpenStreetMap\"\n    );\n\n    assert.equal(pt.sanitize(\"<textarea>hullo</textarea>\"), \"hullo\");\n    assert.equal(pt.sanitize(\"<button>press me!</button>\"), \"press me!\");\n    assert.equal(pt.sanitize(\"<canvas>draw me!</canvas>\"), \"draw me!\");\n    assert.equal(pt.sanitize(\"<progress>hello\"), \"hello\");\n\n    cooked(\n      \"[the answer](javascript:alert(42))\",\n      \"<p>[the answer](javascript:alert(42))</p>\",\n      \"it prevents XSS\"\n    );\n\n    cooked(\n      '<i class=\"fa fa-bug fa-spin\" style=\"font-size:600%\"></i>\\n<!-- -->',\n      \"<p><i></i></p>\",\n      \"it doesn't circumvent XSS with comments\"\n    );\n\n    cooked(\n      '<span class=\"-bbcode-s fa fa-spin\">a</span>',\n      \"<p><span>a</span></p>\",\n      \"it sanitizes spans\"\n    );\n    cooked(\n      '<span class=\"fa fa-spin -bbcode-s\">a</span>',\n      \"<p><span>a</span></p>\",\n      \"it sanitizes spans\"\n    );\n    cooked(\n      '<span class=\"bbcode-s\">a</span>',\n      '<p><span class=\"bbcode-s\">a</span></p>',\n      \"it sanitizes spans\"\n    );\n\n    cooked(\n      \"<kbd>Ctrl</kbd>+<kbd>C</kbd>\",\n      \"<p><kbd>Ctrl</kbd>+<kbd>C</kbd></p>\"\n    );\n    cooked(\n      \"it has been <strike>1 day</strike> 0 days since our last test failure\",\n      \"<p>it has been <strike>1 day</strike> 0 days since our last test failure</p>\"\n    );\n    cooked(\n      `it has been <s>1 day</s> 0 days since our last test failure`,\n      `<p>it has been <s>1 day</s> 0 days since our last test failure</p>`\n    );\n\n    cooked(\n      `<div align=\"center\">hello</div>`,\n      `<div align=\"center\">hello</div>`\n    );\n\n    cooked(\n      `1 + 1 is <del>3</del> <ins>2</ins>`,\n      `<p>1 + 1 is <del>3</del> <ins>2</ins></p>`\n    );\n    cooked(\n      `<abbr title=\"JavaScript\">JS</abbr>`,\n      `<p><abbr title=\"JavaScript\">JS</abbr></p>`\n    );\n    cooked(\n      `<dl><dt>Forum</dt><dd>Software</dd></dl>`,\n      `<dl><dt>Forum</dt><dd>Software</dd></dl>`\n    );\n    cooked(\n      `<sup>high</sup> <sub>low</sub> <big>HUGE</big>`,\n      `<p><sup>high</sup> <sub>low</sub> <big>HUGE</big></p>`\n    );\n\n    cooked(`<div dir=\"rtl\">RTL text</div>`, `<div dir=\"rtl\">RTL text</div>`);\n  });\n\n  test(\"ids on headings\", function (assert) {\n    const pt = new PrettyText(buildOptions({ siteSettings: {} }));\n    assert.equal(pt.sanitize(\"<h3>Test Heading</h3>\"), \"<h3>Test Heading</h3>\");\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--test\">Test Heading</h1>`),\n      `<h1 id=\"heading--test\">Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h2 id=\"heading--cool\">Test Heading</h2>`),\n      `<h2 id=\"heading--cool\">Test Heading</h2>`\n    );\n    assert.equal(\n      pt.sanitize(`<h3 id=\"heading--dashed-name\">Test Heading</h3>`),\n      `<h3 id=\"heading--dashed-name\">Test Heading</h3>`\n    );\n    assert.equal(\n      pt.sanitize(`<h4 id=\"heading--underscored_name\">Test Heading</h4>`),\n      `<h4 id=\"heading--underscored_name\">Test Heading</h4>`\n    );\n    assert.equal(\n      pt.sanitize(`<h5 id=\"heading--trout\">Test Heading</h5>`),\n      `<h5 id=\"heading--trout\">Test Heading</h5>`\n    );\n    assert.equal(\n      pt.sanitize(`<h6 id=\"heading--discourse\">Test Heading</h6>`),\n      `<h6 id=\"heading--discourse\">Test Heading</h6>`\n    );\n  });\n\n  test(\"autoplay videos must be muted\", function (assert) {\n    let pt = new PrettyText(buildOptions({ siteSettings: {} }));\n    assert.ok(\n      pt\n        .sanitize(\n          `<p>Hey</p><video autoplay src=\"http://example.com/music.mp4\"/>`\n        )\n        .match(/muted/)\n    );\n    assert.ok(\n      pt\n        .sanitize(\n          `<p>Hey</p><video autoplay><source src=\"http://example.com/music.mp4\" type=\"audio/mpeg\"></video>`\n        )\n        .match(/muted/)\n    );\n    assert.ok(\n      pt\n        .sanitize(\n          `<p>Hey</p><video autoplay muted><source src=\"http://example.com/music.mp4\" type=\"audio/mpeg\"></video>`\n        )\n        .match(/muted/)\n    );\n    assert.notOk(\n      pt\n        .sanitize(\n          `<p>Hey</p><video><source src=\"http://example.com/music.mp4\" type=\"audio/mpeg\"></video>`\n        )\n        .match(/muted/)\n    );\n  });\n\n  test(\"poorly formed ids on headings\", function (assert) {\n    let pt = new PrettyText(buildOptions({ siteSettings: {} }));\n    assert.equal(\n      pt.sanitize(`<h1 id=\"evil-trout\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--with space\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--with*char\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"test-heading--cool\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n  });\n\n  test(\"urlAllowed\", function (assert) {\n    const allowed = (url, msg) => assert.equal(hrefAllowed(url), url, msg);\n\n    allowed(\"/foo/bar.html\", \"allows relative urls\");\n    allowed(\"http://eviltrout.com/evil/trout\", \"allows full urls\");\n    allowed(\"https://eviltrout.com/evil/trout\", \"allows https urls\");\n    allowed(\"//eviltrout.com/evil/trout\", \"allows protocol relative urls\");\n\n    assert.equal(\n      hrefAllowed(\"http://google.com/test'onmouseover=alert('XSS!');//.swf\"),\n      \"http://google.com/test%27onmouseover=alert(%27XSS!%27);//.swf\",\n      \"escape single quotes\"\n    );\n  });\n});\n", "import xss from \"xss\";\nimport escape from \"discourse-common/lib/escape\";\n\nfunction attr(name, value) {\n  if (value) {\n    return `${name}=\"${xss.escapeAttrValue(value)}\"`;\n  }\n\n  return name;\n}\n\nexport { escape };\n\nexport function hrefAllowed(href, extraHrefMatchers) {\n  // escape single quotes\n  href = href.replace(/'/g, \"%27\");\n\n  // absolute urls\n  if (/^(https?:)?\\/\\/[\\w\\.\\-]+/i.test(href)) {\n    return href;\n  }\n  // relative urls\n  if (/^\\/[\\w\\.\\-]+/i.test(href)) {\n    return href;\n  }\n  // anchors\n  if (/^#[\\w\\.\\-]+/i.test(href)) {\n    return href;\n  }\n  // mailtos\n  if (/^mailto:[\\w\\.\\-@]+/i.test(href)) {\n    return href;\n  }\n\n  if (extraHrefMatchers && extraHrefMatchers.length > 0) {\n    for (let i = 0; i < extraHrefMatchers.length; i++) {\n      if (extraHrefMatchers[i].test(href)) {\n        return href;\n      }\n    }\n  }\n}\n\nexport function sanitize(text, allowLister) {\n  if (!text) {\n    return \"\";\n  }\n\n  // Allow things like <3 and <_<\n  text = text.replace(/<([^A-Za-z\\/\\!]|$)/g, \"&lt;$1\");\n\n  const allowList = allowLister.getAllowList(),\n    allowedHrefSchemes = allowLister.getAllowedHrefSchemes(),\n    allowedIframes = allowLister.getAllowedIframes();\n  let extraHrefMatchers = null;\n\n  if (allowedHrefSchemes && allowedHrefSchemes.length > 0) {\n    extraHrefMatchers = [\n      new RegExp(\"^(\" + allowedHrefSchemes.join(\"|\") + \")://[\\\\w\\\\.\\\\-]+\", \"i\"),\n    ];\n    if (allowedHrefSchemes.includes(\"tel\")) {\n      extraHrefMatchers.push(new RegExp(\"^tel://\\\\+?[\\\\w\\\\.\\\\-]+\", \"i\"));\n    }\n  }\n\n  let result = xss(text, {\n    whiteList: allowList.tagList,\n    stripIgnoreTag: true,\n    stripIgnoreTagBody: [\"script\", \"table\"],\n\n    onIgnoreTagAttr(tag, name, value) {\n      const forTag = allowList.attrList[tag];\n      if (forTag) {\n        const forAttr = forTag[name];\n        if (\n          (forAttr &&\n            (forAttr.indexOf(\"*\") !== -1 || forAttr.indexOf(value) !== -1)) ||\n          (name.indexOf(\"data-\") === 0 && forTag[\"data-*\"]) ||\n          (tag === \"a\" &&\n            name === \"href\" &&\n            hrefAllowed(value, extraHrefMatchers)) ||\n          (tag === \"img\" &&\n            name === \"src\" &&\n            (/^data:image.*$/i.test(value) ||\n              hrefAllowed(value, extraHrefMatchers))) ||\n          (tag === \"iframe\" &&\n            name === \"src\" &&\n            allowedIframes.some((i) => {\n              return value.toLowerCase().indexOf((i || \"\").toLowerCase()) === 0;\n            }))\n        ) {\n          return attr(name, value);\n        }\n\n        if (tag === \"iframe\" && name === \"src\") {\n          return \"-STRIP-\";\n        }\n\n        if (tag === \"video\" && name === \"autoplay\") {\n          // This might give us duplicate 'muted' attributes\n          // but they will be deduped by later processing\n          return \"autoplay muted\";\n        }\n\n        // Heading ids must begin with `heading--`\n        if (\n          [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"].indexOf(tag) !== -1 &&\n          value.match(/^heading\\-\\-[a-zA-Z0-9\\-\\_]+$/)\n        ) {\n          return attr(name, value);\n        }\n\n        const custom = allowLister.getCustom();\n        for (let i = 0; i < custom.length; i++) {\n          const fn = custom[i];\n          if (fn(tag, name, value)) {\n            return attr(name, value);\n          }\n        }\n      }\n    },\n  });\n\n  return result\n    .replace(/\\[removed\\]/g, \"\")\n    .replace(/\\<iframe[^>]+\\-STRIP\\-[^>]*>[^<]*<\\/iframe>/g, \"\")\n    .replace(/&(?![#\\w]+;)/g, \"&amp;\")\n    .replace(/&#39;/g, \"'\")\n    .replace(/ \\/>/g, \">\");\n}\n"], "fixing_code": ["import { siteDir } from \"discourse/lib/text-direction\";\n\nconst D_POPOVER_ID = \"d-popover\";\n\nconst D_POPOVER_TEMPLATE = `\n  <div id=\"${D_POPOVER_ID}\" class=\"is-under\">\n    <div class=\"d-popover-arrow d-popover-top-arrow\"></div>\n    <div class=\"d-popover-content\">\n      <div class=\"spinner small\"></div>\n    </div>\n    <div class=\"d-popover-arrow d-popover-bottom-arrow\"></div>\n  </div>\n`;\n\nconst D_ARROW_HEIGHT = 10;\n\nconst D_HORIZONTAL_MARGIN = 5;\n\nexport const POPOVER_SELECTORS = \"[data-popover], [data-tooltip]\";\n\nexport function hidePopover() {\n  getPopover().fadeOut().remove();\n\n  return getPopover();\n}\n\nexport function showPopover(event, options = {}) {\n  let $enteredElement = $(event.target).closest(POPOVER_SELECTORS).first();\n\n  if (!$enteredElement.length) {\n    $enteredElement = $(event.target);\n  }\n\n  if (isRetina()) {\n    getPopover().addClass(\"retina\");\n  }\n\n  if (!getPopover().length) {\n    $(\"body\").append($(D_POPOVER_TEMPLATE));\n  }\n\n  setPopoverHtmlContent($enteredElement, options.htmlContent);\n  setPopoverTextContent($enteredElement, options.textContent);\n\n  getPopover().fadeIn();\n\n  positionPopover($enteredElement);\n\n  return {\n    html: (content) => replaceHtmlContent($enteredElement, content),\n    text: (content) => replaceTextContent($enteredElement, content),\n    hide: hidePopover,\n  };\n}\n\nfunction setPopoverHtmlContent($enteredElement, content) {\n  replaceHtmlContent($enteredElement, content);\n}\n\nfunction setPopoverTextContent($enteredElement, content) {\n  content =\n    content ||\n    $enteredElement.attr(\"data-popover\") ||\n    $enteredElement.attr(\"data-tooltip\");\n\n  replaceTextContent($enteredElement, content);\n}\n\nfunction replaceTextContent($enteredElement, content) {\n  if (content) {\n    getPopover().find(\".d-popover-content\").text(content);\n    window.requestAnimationFrame(() => positionPopover($enteredElement));\n  }\n}\n\nfunction replaceHtmlContent($enteredElement, content) {\n  if (content) {\n    getPopover().find(\".d-popover-content\").html(content);\n    window.requestAnimationFrame(() => positionPopover($enteredElement));\n  }\n}\n\nfunction positionPopover($element) {\n  const $popover = getPopover();\n  $popover.removeClass(\"is-above is-under is-left-aligned is-right-aligned\");\n\n  const $dHeader = $(\".d-header\");\n  const windowRect = {\n    left: 0,\n    top: $dHeader.length ? $dHeader[0].getBoundingClientRect().bottom : 0,\n    width: $(window).width(),\n    height: $(window).height(),\n  };\n\n  const popoverRect = {\n    width: $popover.width(),\n    height: $popover.height(),\n    left: null,\n    right: null,\n  };\n\n  if (popoverRect.width > windowRect.width - D_HORIZONTAL_MARGIN * 2) {\n    popoverRect.width = windowRect.width - D_HORIZONTAL_MARGIN * 2;\n    $popover.width(popoverRect.width);\n  }\n\n  const targetRect = $element[0].getBoundingClientRect();\n  const underSpace = windowRect.height - targetRect.bottom - D_ARROW_HEIGHT;\n  const topSpace = targetRect.top - windowRect.top - D_ARROW_HEIGHT;\n\n  if (\n    underSpace > popoverRect.height + D_HORIZONTAL_MARGIN ||\n    underSpace > topSpace\n  ) {\n    $popover\n      .css(\"top\", targetRect.bottom + window.pageYOffset + D_ARROW_HEIGHT)\n      .addClass(\"is-under\");\n  } else {\n    $popover\n      .css(\n        \"top\",\n        targetRect.top +\n          window.pageYOffset -\n          popoverRect.height -\n          D_ARROW_HEIGHT\n      )\n      .addClass(\"is-above\");\n  }\n\n  const leftSpace = targetRect.left + targetRect.width / 2;\n\n  if (siteDir() === \"ltr\") {\n    if (leftSpace > popoverRect.width / 2 + D_HORIZONTAL_MARGIN) {\n      popoverRect.left = leftSpace - popoverRect.width / 2;\n      $popover.css(\"left\", popoverRect.left);\n    } else {\n      popoverRect.left = D_HORIZONTAL_MARGIN;\n      $popover.css(\"left\", popoverRect.left).addClass(\"is-left-aligned\");\n    }\n  } else {\n    const rightSpace = windowRect.width - targetRect.right;\n\n    if (rightSpace > popoverRect.width / 2 + D_HORIZONTAL_MARGIN) {\n      popoverRect.left = leftSpace - popoverRect.width / 2;\n      $popover.css(\"left\", popoverRect.left);\n    } else {\n      popoverRect.left =\n        windowRect.width - popoverRect.width - D_HORIZONTAL_MARGIN * 2;\n      $popover.css(\"left\", popoverRect.left).addClass(\"is-right-aligned\");\n    }\n  }\n\n  let arrowPosition;\n  if (siteDir() === \"ltr\") {\n    arrowPosition = Math.abs(targetRect.left - popoverRect.left);\n  } else {\n    arrowPosition = targetRect.left - popoverRect.left + targetRect.width / 2;\n  }\n  $popover.find(\".d-popover-arrow\").css(\"left\", arrowPosition);\n}\n\nfunction isRetina() {\n  return window.devicePixelRatio && window.devicePixelRatio > 1;\n}\n\nfunction getPopover() {\n  return $(document.getElementById(D_POPOVER_ID));\n}\n", "import PrettyText, { buildOptions } from \"pretty-text/pretty-text\";\nimport { module, test } from \"qunit\";\nimport { hrefAllowed } from \"pretty-text/sanitizer\";\n\nmodule(\"Unit | Utility | sanitizer\", function () {\n  test(\"sanitize\", function (assert) {\n    const pt = new PrettyText(\n      buildOptions({\n        siteSettings: {\n          allowed_iframes:\n            \"https://www.google.com/maps/embed?|https://www.openstreetmap.org/export/embed.html?\",\n        },\n      })\n    );\n    const cooked = (input, expected, text) =>\n      assert.equal(pt.cook(input), expected.replace(/\\/>/g, \">\"), text);\n\n    assert.equal(\n      pt.sanitize('<i class=\"fa-bug fa-spin\">bug</i>'),\n      \"<i>bug</i>\"\n    );\n    assert.equal(\n      pt.sanitize(\"<div><script>alert('hi');</script></div>\"),\n      \"<div></div>\"\n    );\n    assert.equal(\n      pt.sanitize(\"<div><p class=\\\"funky\\\" wrong='1'>hello</p></div>\"),\n      \"<div><p>hello</p></div>\"\n    );\n    assert.equal(pt.sanitize(\"<3 <3\"), \"&lt;3 &lt;3\");\n    assert.equal(pt.sanitize(\"<_<\"), \"&lt;_&lt;\");\n\n    cooked(\n      \"hello<script>alert(42)</script>\",\n      \"<p>hello</p>\",\n      \"it sanitizes while cooking\"\n    );\n\n    cooked(\n      \"<a href='http://disneyland.disney.go.com/'>disney</a> <a href='http://reddit.com'>reddit</a>\",\n      '<p><a href=\"http://disneyland.disney.go.com/\">disney</a> <a href=\"http://reddit.com\">reddit</a></p>',\n      \"we can embed proper links\"\n    );\n\n    cooked(\"<center>hello</center>\", \"hello\", \"it does not allow centering\");\n    cooked(\n      \"<blockquote>a\\n</blockquote>\\n\",\n      \"<blockquote>a\\n</blockquote>\",\n      \"it does not double sanitize\"\n    );\n\n    cooked(\n      '<iframe src=\"http://discourse.org\" width=\"100\" height=\"42\"></iframe>',\n      \"\",\n      \"it does not allow most iframes\"\n    );\n\n    cooked(\n      '<iframe src=\"https://www.google.com/maps/embed?pb=!1m10!1m8!1m3!1d2624.9983685732213!2d2.29432085!3d48.85824149999999!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2s!4v1385737436368\" width=\"100\" height=\"42\"></iframe>',\n      '<iframe src=\"https://www.google.com/maps/embed?pb=!1m10!1m8!1m3!1d2624.9983685732213!2d2.29432085!3d48.85824149999999!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2s!4v1385737436368\" width=\"100\" height=\"42\"></iframe>',\n      \"it allows iframe to google maps\"\n    );\n\n    cooked(\n      '<iframe width=\"425\" height=\"350\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" src=\"https://www.openstreetmap.org/export/embed.html?bbox=22.49454975128174%2C51.220338322410775%2C22.523088455200195%2C51.23345342732931&amp;layer=mapnik\"></iframe>',\n      '<iframe width=\"425\" height=\"350\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" src=\"https://www.openstreetmap.org/export/embed.html?bbox=22.49454975128174%2C51.220338322410775%2C22.523088455200195%2C51.23345342732931&amp;layer=mapnik\"></iframe>',\n      \"it allows iframe to OpenStreetMap\"\n    );\n\n    assert.equal(pt.sanitize(\"<textarea>hullo</textarea>\"), \"hullo\");\n    assert.equal(pt.sanitize(\"<button>press me!</button>\"), \"press me!\");\n    assert.equal(pt.sanitize(\"<canvas>draw me!</canvas>\"), \"draw me!\");\n    assert.equal(pt.sanitize(\"<progress>hello\"), \"hello\");\n\n    cooked(\n      \"[the answer](javascript:alert(42))\",\n      \"<p>[the answer](javascript:alert(42))</p>\",\n      \"it prevents XSS\"\n    );\n\n    cooked(\n      '<i class=\"fa fa-bug fa-spin\" style=\"font-size:600%\"></i>\\n<!-- -->',\n      \"<p><i></i></p>\",\n      \"it doesn't circumvent XSS with comments\"\n    );\n\n    cooked(\n      '<span class=\"-bbcode-s fa fa-spin\">a</span>',\n      \"<p><span>a</span></p>\",\n      \"it sanitizes spans\"\n    );\n    cooked(\n      '<span class=\"fa fa-spin -bbcode-s\">a</span>',\n      \"<p><span>a</span></p>\",\n      \"it sanitizes spans\"\n    );\n    cooked(\n      '<span class=\"bbcode-s\">a</span>',\n      '<p><span class=\"bbcode-s\">a</span></p>',\n      \"it sanitizes spans\"\n    );\n\n    cooked(\n      \"<kbd>Ctrl</kbd>+<kbd>C</kbd>\",\n      \"<p><kbd>Ctrl</kbd>+<kbd>C</kbd></p>\"\n    );\n    cooked(\n      \"it has been <strike>1 day</strike> 0 days since our last test failure\",\n      \"<p>it has been <strike>1 day</strike> 0 days since our last test failure</p>\"\n    );\n    cooked(\n      `it has been <s>1 day</s> 0 days since our last test failure`,\n      `<p>it has been <s>1 day</s> 0 days since our last test failure</p>`\n    );\n\n    cooked(\n      `<div align=\"center\">hello</div>`,\n      `<div align=\"center\">hello</div>`\n    );\n\n    cooked(\n      `1 + 1 is <del>3</del> <ins>2</ins>`,\n      `<p>1 + 1 is <del>3</del> <ins>2</ins></p>`\n    );\n    cooked(\n      `<abbr title=\"JavaScript\">JS</abbr>`,\n      `<p><abbr title=\"JavaScript\">JS</abbr></p>`\n    );\n    cooked(\n      `<dl><dt>Forum</dt><dd>Software</dd></dl>`,\n      `<dl><dt>Forum</dt><dd>Software</dd></dl>`\n    );\n    cooked(\n      `<sup>high</sup> <sub>low</sub> <big>HUGE</big>`,\n      `<p><sup>high</sup> <sub>low</sub> <big>HUGE</big></p>`\n    );\n\n    cooked(`<div dir=\"rtl\">RTL text</div>`, `<div dir=\"rtl\">RTL text</div>`);\n\n    cooked(\n      `<div data-value=\"<something>\" data-html-value=\"<something>\"></div>`,\n      `<div data-value=\"&lt;something&gt;\"></div>`\n    );\n  });\n\n  test(\"ids on headings\", function (assert) {\n    const pt = new PrettyText(buildOptions({ siteSettings: {} }));\n    assert.equal(pt.sanitize(\"<h3>Test Heading</h3>\"), \"<h3>Test Heading</h3>\");\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--test\">Test Heading</h1>`),\n      `<h1 id=\"heading--test\">Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h2 id=\"heading--cool\">Test Heading</h2>`),\n      `<h2 id=\"heading--cool\">Test Heading</h2>`\n    );\n    assert.equal(\n      pt.sanitize(`<h3 id=\"heading--dashed-name\">Test Heading</h3>`),\n      `<h3 id=\"heading--dashed-name\">Test Heading</h3>`\n    );\n    assert.equal(\n      pt.sanitize(`<h4 id=\"heading--underscored_name\">Test Heading</h4>`),\n      `<h4 id=\"heading--underscored_name\">Test Heading</h4>`\n    );\n    assert.equal(\n      pt.sanitize(`<h5 id=\"heading--trout\">Test Heading</h5>`),\n      `<h5 id=\"heading--trout\">Test Heading</h5>`\n    );\n    assert.equal(\n      pt.sanitize(`<h6 id=\"heading--discourse\">Test Heading</h6>`),\n      `<h6 id=\"heading--discourse\">Test Heading</h6>`\n    );\n  });\n\n  test(\"autoplay videos must be muted\", function (assert) {\n    let pt = new PrettyText(buildOptions({ siteSettings: {} }));\n    assert.ok(\n      pt\n        .sanitize(\n          `<p>Hey</p><video autoplay src=\"http://example.com/music.mp4\"/>`\n        )\n        .match(/muted/)\n    );\n    assert.ok(\n      pt\n        .sanitize(\n          `<p>Hey</p><video autoplay><source src=\"http://example.com/music.mp4\" type=\"audio/mpeg\"></video>`\n        )\n        .match(/muted/)\n    );\n    assert.ok(\n      pt\n        .sanitize(\n          `<p>Hey</p><video autoplay muted><source src=\"http://example.com/music.mp4\" type=\"audio/mpeg\"></video>`\n        )\n        .match(/muted/)\n    );\n    assert.notOk(\n      pt\n        .sanitize(\n          `<p>Hey</p><video><source src=\"http://example.com/music.mp4\" type=\"audio/mpeg\"></video>`\n        )\n        .match(/muted/)\n    );\n  });\n\n  test(\"poorly formed ids on headings\", function (assert) {\n    let pt = new PrettyText(buildOptions({ siteSettings: {} }));\n    assert.equal(\n      pt.sanitize(`<h1 id=\"evil-trout\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--with space\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--with*char\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"heading--\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n    assert.equal(\n      pt.sanitize(`<h1 id=\"test-heading--cool\">Test Heading</h1>`),\n      `<h1>Test Heading</h1>`\n    );\n  });\n\n  test(\"urlAllowed\", function (assert) {\n    const allowed = (url, msg) => assert.equal(hrefAllowed(url), url, msg);\n\n    allowed(\"/foo/bar.html\", \"allows relative urls\");\n    allowed(\"http://eviltrout.com/evil/trout\", \"allows full urls\");\n    allowed(\"https://eviltrout.com/evil/trout\", \"allows https urls\");\n    allowed(\"//eviltrout.com/evil/trout\", \"allows protocol relative urls\");\n\n    assert.equal(\n      hrefAllowed(\"http://google.com/test'onmouseover=alert('XSS!');//.swf\"),\n      \"http://google.com/test%27onmouseover=alert(%27XSS!%27);//.swf\",\n      \"escape single quotes\"\n    );\n  });\n});\n", "import xss from \"xss\";\nimport escape from \"discourse-common/lib/escape\";\n\nfunction attr(name, value) {\n  if (value) {\n    return `${name}=\"${xss.escapeAttrValue(value)}\"`;\n  }\n\n  return name;\n}\n\nexport { escape };\n\nexport function hrefAllowed(href, extraHrefMatchers) {\n  // escape single quotes\n  href = href.replace(/'/g, \"%27\");\n\n  // absolute urls\n  if (/^(https?:)?\\/\\/[\\w\\.\\-]+/i.test(href)) {\n    return href;\n  }\n  // relative urls\n  if (/^\\/[\\w\\.\\-]+/i.test(href)) {\n    return href;\n  }\n  // anchors\n  if (/^#[\\w\\.\\-]+/i.test(href)) {\n    return href;\n  }\n  // mailtos\n  if (/^mailto:[\\w\\.\\-@]+/i.test(href)) {\n    return href;\n  }\n\n  if (extraHrefMatchers && extraHrefMatchers.length > 0) {\n    for (let i = 0; i < extraHrefMatchers.length; i++) {\n      if (extraHrefMatchers[i].test(href)) {\n        return href;\n      }\n    }\n  }\n}\n\nexport function sanitize(text, allowLister) {\n  if (!text) {\n    return \"\";\n  }\n\n  // Allow things like <3 and <_<\n  text = text.replace(/<([^A-Za-z\\/\\!]|$)/g, \"&lt;$1\");\n\n  const allowList = allowLister.getAllowList(),\n    allowedHrefSchemes = allowLister.getAllowedHrefSchemes(),\n    allowedIframes = allowLister.getAllowedIframes();\n  let extraHrefMatchers = null;\n\n  if (allowedHrefSchemes && allowedHrefSchemes.length > 0) {\n    extraHrefMatchers = [\n      new RegExp(\"^(\" + allowedHrefSchemes.join(\"|\") + \")://[\\\\w\\\\.\\\\-]+\", \"i\"),\n    ];\n    if (allowedHrefSchemes.includes(\"tel\")) {\n      extraHrefMatchers.push(new RegExp(\"^tel://\\\\+?[\\\\w\\\\.\\\\-]+\", \"i\"));\n    }\n  }\n\n  let result = xss(text, {\n    whiteList: allowList.tagList,\n    stripIgnoreTag: true,\n    stripIgnoreTagBody: [\"script\", \"table\"],\n\n    onIgnoreTagAttr(tag, name, value) {\n      const forTag = allowList.attrList[tag];\n      if (forTag) {\n        const forAttr = forTag[name];\n        if (\n          (forAttr &&\n            (forAttr.indexOf(\"*\") !== -1 || forAttr.indexOf(value) !== -1)) ||\n          (name.indexOf(\"data-html-\") === -1 &&\n            name.indexOf(\"data-\") === 0 &&\n            forTag[\"data-*\"]) ||\n          (tag === \"a\" &&\n            name === \"href\" &&\n            hrefAllowed(value, extraHrefMatchers)) ||\n          (tag === \"img\" &&\n            name === \"src\" &&\n            (/^data:image.*$/i.test(value) ||\n              hrefAllowed(value, extraHrefMatchers))) ||\n          (tag === \"iframe\" &&\n            name === \"src\" &&\n            allowedIframes.some((i) => {\n              return value.toLowerCase().indexOf((i || \"\").toLowerCase()) === 0;\n            }))\n        ) {\n          return attr(name, value);\n        }\n\n        if (tag === \"iframe\" && name === \"src\") {\n          return \"-STRIP-\";\n        }\n\n        if (tag === \"video\" && name === \"autoplay\") {\n          // This might give us duplicate 'muted' attributes\n          // but they will be deduped by later processing\n          return \"autoplay muted\";\n        }\n\n        // Heading ids must begin with `heading--`\n        if (\n          [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"].indexOf(tag) !== -1 &&\n          value.match(/^heading\\-\\-[a-zA-Z0-9\\-\\_]+$/)\n        ) {\n          return attr(name, value);\n        }\n\n        const custom = allowLister.getCustom();\n        for (let i = 0; i < custom.length; i++) {\n          const fn = custom[i];\n          if (fn(tag, name, value)) {\n            return attr(name, value);\n          }\n        }\n      }\n    },\n  });\n\n  return result\n    .replace(/\\[removed\\]/g, \"\")\n    .replace(/\\<iframe[^>]+\\-STRIP\\-[^>]*>[^<]*<\\/iframe>/g, \"\")\n    .replace(/&(?![#\\w]+;)/g, \"&amp;\")\n    .replace(/&#39;/g, \"'\")\n    .replace(/ \\/>/g, \">\");\n}\n"], "filenames": ["app/assets/javascripts/discourse/app/lib/d-popover.js", "app/assets/javascripts/discourse/tests/unit/lib/sanitizer-test.js", "app/assets/javascripts/pretty-text/addon/sanitizer.js"], "buggy_code_start_loc": [19, 138, 78], "buggy_code_end_loc": [63, 138, 79], "fixing_code_start_loc": [19, 139, 78], "fixing_code_end_loc": [56, 144, 81], "type": "CWE-79", "message": "Discourse is an open source discussion platform. In versions prior to 2.7.8 rendering of d-popover tooltips can be susceptible to XSS attacks. This vulnerability only affects sites which have modified or disabled Discourse's default Content Security Policy. This issue is patched in the latest `stable` 2.7.8 version of Discourse. As a workaround users may ensure that the Content Security Policy is enabled, and has not been modified in a way which would make it more vulnerable to XSS attacks.", "other": {"cve": {"id": "CVE-2021-37633", "sourceIdentifier": "security-advisories@github.com", "published": "2021-08-09T20:15:07.597", "lastModified": "2021-08-17T16:49:04.107", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Discourse is an open source discussion platform. In versions prior to 2.7.8 rendering of d-popover tooltips can be susceptible to XSS attacks. This vulnerability only affects sites which have modified or disabled Discourse's default Content Security Policy. This issue is patched in the latest `stable` 2.7.8 version of Discourse. As a workaround users may ensure that the Content Security Policy is enabled, and has not been modified in a way which would make it more vulnerable to XSS attacks."}, {"lang": "es", "value": "Discourse es una plataforma de discusi\u00f3n de c\u00f3digo abierto. En versiones anteriores a 2.7.8, la representaci\u00f3n de los tooltips de d-popover puede ser susceptible de ataques de tipo XSS. Esta vulnerabilidad s\u00f3lo afecta a los sitios que han modificado o desactivado la pol\u00edtica de seguridad de contenidos predeterminada de Discourse. Este problema est\u00e1 parcheado en la \u00faltima versi\u00f3n \"stable\" 2.7.8 de Discourse. Como soluci\u00f3n, los usuarios pueden asegurarse de que la pol\u00edtica de seguridad de contenidos est\u00e1 activada y no ha sido modificada de forma que sea m\u00e1s vulnerable a ataques de tipo XSS"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.7.8", "matchCriteriaId": "2A85C6E2-A78D-47B2-AE03-A12AE6A2E8BD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "B9AE12FE-0396-4843-8D30-D8C44FAE01DA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.8.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "F101AEAB-4FB7-4BE3-931B-595702D616C7"}]}]}], "references": [{"url": "https://github.com/discourse/discourse/commit/38199424bc840d2ef002cd1e9bffdbb99191eb47", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/discourse/discourse/security/advisories/GHSA-v3v8-3m5w-pjp9", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/discourse/discourse/commit/38199424bc840d2ef002cd1e9bffdbb99191eb47"}}