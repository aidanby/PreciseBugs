{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsCommentGradeModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        $idProducts = Tools::getValue('id_products');\n        /** @var ProductCommentRepository $productCommentRepository */\n\n        if (!is_array($idProducts)) {\n            return $this->ajaxRender(null);\n        }\n\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $productsCommentsNb = $productCommentRepository->getCommentsNumberForProducts($idProducts, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $averageGrade = $productCommentRepository->getAverageGrades($idProducts, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n\n        $resultFormated = [];\n\n        foreach ($idProducts as $i => $id) {\n            $resultFormated []= [\n                'id_product' => $id,\n                'comments_nb' => $productsCommentsNb[$id],\n                'average_grade' => $averageGrade[$id]\n            ];\n        }\n\n        $this->ajaxRender(json_encode([\n            'products' => $resultFormated\n        ]));\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsListCommentsModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        $idProduct = Tools::getValue('id_product');\n        $page = Tools::getValue('page', 1);\n        $isLastNameAnynomus = Configuration::get('PRODUCT_COMMENTS_ANONYMISATION');\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $productComments = $productCommentRepository->paginate(\n            $idProduct,\n            $page,\n            Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'),\n            Configuration::get('PRODUCT_COMMENTS_MODERATE')\n        );\n        $productCommentsNb = $productCommentRepository->getCommentsNumber($idProduct, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n\n        $responseArray = [\n            'comments_nb' => $productCommentsNb,\n            'comments_per_page' => Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'),\n            'comments' => [],\n        ];\n\n        foreach ($productComments as $productComment) {\n            $dateAdd = new \\DateTime($productComment['date_add'], new \\DateTimeZone('UTC'));\n            $dateAdd->setTimezone(new \\DateTimeZone(date_default_timezone_get()));\n            $dateFormatter = new \\IntlDateFormatter(\n                $this->context->language->locale,\n                \\IntlDateFormatter::SHORT,\n                \\IntlDateFormatter::SHORT\n            );\n            $productComment['customer_name'] = htmlentities($productComment['customer_name']);\n            $productComment['title'] = htmlentities($productComment['title']);\n            $productComment['content'] = htmlentities($productComment['content']);\n            $productComment['date_add'] = $dateFormatter->format($dateAdd);\n\n            if($isLastNameAnynomus) {\n                $productComment['lastname'] = substr($productComment['lastname'], 0, 1) . '.';\n            }\n\n            $usefulness = $productCommentRepository->getProductCommentUsefulness($productComment['id_product_comment']);\n            $productComment = array_merge($productComment, $usefulness);\n            if (empty($productComment['customer_name']) && !isset($productComment['firstname']) && !isset($productComment['lastname'])) {\n                $productComment['customer_name'] = $this->trans('Deleted account', [], 'Modules.Productcomments.Shop');\n            }\n\n            $responseArray['comments'][] = $productComment;\n        }\n\n        $this->ajaxRender(json_encode($responseArray));\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductComment;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductCommentCriterion;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductCommentGrade;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsPostCommentModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        if (!(int) $this->context->cookie->id_customer && !Configuration::get('PRODUCT_COMMENTS_ALLOW_GUESTS')) {\n            $this->ajaxRender(json_encode([\n                'success' => false,\n                'error' => $this->trans(\n                    'You need to be [1]logged in[/1] or [2]create an account[/2] to post your review.',\n                    [\n                        '[1]' => '<a href=\"' . $this->context->link->getPageLink('my-account') . '\">',\n                        '[/1]' => '</a>',\n                        '[2]' => '<a href=\"' . $this->context->link->getPageLink('authentication&create_account=1') . '\">',\n                        '[/2]' => '</a>',\n                    ],\n                    'Modules.Productcomments.Shop'\n                ),\n            ]));\n\n            return false;\n        }\n\n        $id_product = (int) Tools::getValue('id_product');\n        $comment_title = Tools::getValue('comment_title');\n        $comment_content = Tools::getValue('comment_content');\n        $customer_name = Tools::getValue('customer_name');\n        $criterions = Tools::getValue('criterion');\n\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n        $isPostAllowed = $productCommentRepository->isPostAllowed($id_product, (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);\n        if (!$isPostAllowed) {\n            $this->ajaxRender(json_encode([\n                'success' => false,\n                'error' => $this->trans('You are not allowed to post a review at the moment, please try again later.', [], 'Modules.Productcomments.Shop'),\n            ]));\n\n            return false;\n        }\n\n        /** @var EntityManagerInterface $entityManager */\n        $entityManager = $this->container->get('doctrine.orm.entity_manager');\n\n        //Create product comment\n        $productComment = new ProductComment();\n        $productComment\n            ->setProductId($id_product)\n            ->setTitle($comment_title)\n            ->setContent($comment_content)\n            ->setCustomerName($customer_name)\n            ->setCustomerId($this->context->cookie->id_customer)\n            ->setGuestId($this->context->cookie->id_guest)\n            ->setDateAdd(new \\DateTime('now', new \\DateTimeZone('UTC')))\n        ;\n        $entityManager->persist($productComment);\n        $this->addCommentGrades($productComment, $criterions);\n\n        //Validate comment\n        if (!empty($errors = $this->validateComment($productComment))) {\n            $this->ajaxRender(json_encode([\n                'success' => false,\n                'errors' => $errors,\n            ]));\n\n            return false;\n        }\n\n        $entityManager->flush();\n\n        $this->ajaxRender(json_encode([\n            'success' => true,\n            'product_comment' => $productComment->toArray(),\n        ]));\n    }\n\n    /**\n     * @param ProductComment $productComment\n     * @param array $criterions\n     *\n     * @throws Exception\n     */\n    private function addCommentGrades(ProductComment $productComment, array $criterions)\n    {\n        /** @var EntityManagerInterface $entityManager */\n        $entityManager = $this->container->get('doctrine.orm.entity_manager');\n        $criterionRepository = $entityManager->getRepository(ProductCommentCriterion::class);\n        $averageGrade = 0;\n        foreach ($criterions as $criterionId => $grade) {\n            $criterion = $criterionRepository->findOneById($criterionId);\n            $criterionGrade = new ProductCommentGrade(\n                $productComment,\n                $criterion,\n                $grade\n            );\n            $entityManager->persist($criterionGrade);\n            $averageGrade += $grade;\n        }\n        $averageGrade /= count($criterions);\n        $productComment->setGrade($averageGrade);\n    }\n\n    /**\n     * Manual validation for now, this would be nice to use Symfony validator with the annotation\n     *\n     * @param ProductComment $productComment\n     *\n     * @return array\n     */\n    private function validateComment(ProductComment $productComment)\n    {\n        $errors = [];\n        if (empty($productComment->getTitle())) {\n            $errors[] = $this->trans('Title cannot be empty', [], 'Modules.Productcomments.Shop');\n        } elseif (strlen($productComment->getTitle()) > ProductComment::TITLE_MAX_LENGTH) {\n            $errors[] = $this->trans('Title cannot be more than %s characters', [ProductComment::TITLE_MAX_LENGTH], 'Modules.Productcomments.Shop');\n        }\n\n        if (!$productComment->getCustomerId()) {\n            if (empty($productComment->getCustomerName())) {\n                $errors[] = $this->trans('Customer name cannot be empty', [], 'Modules.Productcomments.Shop');\n            } elseif (strlen($productComment->getCustomerName()) > ProductComment::CUSTOMER_NAME_MAX_LENGTH) {\n                $errors[] = $this->trans('Customer name cannot be more than %s characters', [ProductComment::CUSTOMER_NAME_MAX_LENGTH], 'Modules.Productcomments.Shop');\n            }\n        }\n\n        return $errors;\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductComment;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductCommentReport;\n\nclass ProductCommentsReportCommentModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        $customerId = (int) $this->context->cookie->id_customer;\n        if (!$customerId) {\n            $this->ajaxRender(json_encode([\n                'success' => false,\n                'error' => $this->trans('You need to be logged in to report a review.', [], 'Modules.Productcomments.Shop'),\n            ]));\n\n            return false;\n        }\n\n        $id_product_comment = (int) Tools::getValue('id_product_comment');\n\n        /** @var EntityManagerInterface $entityManager */\n        $entityManager = $this->container->get('doctrine.orm.entity_manager');\n        $productCommentEntityRepository = $entityManager->getRepository(ProductComment::class);\n\n        $productComment = $productCommentEntityRepository->findOneById($id_product_comment);\n        if (!$productComment) {\n            $this->ajaxRender(json_encode([\n                'success' => false,\n                'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),\n            ]));\n\n            return false;\n        }\n\n        $productCommentAbuseRepository = $entityManager->getRepository(ProductCommentReport::class);\n        /** @var ProductCommentReport $productCommentAbuse */\n        $productCommentAbuse = $productCommentAbuseRepository->findOneBy([\n            'comment' => $id_product_comment,\n            'customerId' => $customerId,\n        ]);\n        if ($productCommentAbuse) {\n            $this->ajaxRender(json_encode([\n                'success' => false,\n                'error' => $this->trans('You already reported this review as abusive.', [], 'Modules.Productcomments.Shop'),\n            ]));\n\n            return false;\n        }\n\n        $productCommentAbuse = new ProductCommentReport(\n            $productComment,\n            $customerId\n        );\n        $entityManager->persist($productCommentAbuse);\n        $entityManager->flush();\n\n        $this->ajaxRender(json_encode([\n            'success' => true,\n            'id_product_comment' => $id_product_comment,\n        ]));\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductComment;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductCommentUsefulness;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsUpdateCommentUsefulnessModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        if (!Configuration::get('PRODUCT_COMMENTS_USEFULNESS')) {\n            $this->ajaxRender(json_encode([\n                'success' => false,\n                'error' => $this->trans('This feature is not enabled.', [], 'Modules.Productcomments.Shop'),\n            ]));\n\n            return false;\n        }\n\n        $customerId = (int) $this->context->cookie->id_customer;\n        if (!$customerId) {\n            $this->ajaxRender(json_encode([\n                'success' => false,\n                'error' => $this->trans(\n                    'You need to be [1]logged in[/1] or [2]create an account[/2] to give your appreciation of a review.',\n                    [\n                        '[1]' => '<a href=\"' . $this->context->link->getPageLink('my-account') . '\">',\n                        '[/1]' => '</a>',\n                        '[2]' => '<a href=\"' . $this->context->link->getPageLink('authentication&create_account=1') . '\">',\n                        '[/2]' => '</a>',\n                    ],\n                    'Modules.Productcomments.Shop'\n                ),\n            ]));\n\n            return false;\n        }\n\n        $id_product_comment = (int) Tools::getValue('id_product_comment');\n        $usefulness = (int) Tools::getValue('usefulness');\n\n        /** @var EntityManagerInterface $entityManager */\n        $entityManager = $this->container->get('doctrine.orm.entity_manager');\n        $productCommentEntityRepository = $entityManager->getRepository(ProductComment::class);\n\n        $productComment = $productCommentEntityRepository->findOneById($id_product_comment);\n        if (!$productComment) {\n            $this->ajaxRender(json_encode([\n                'success' => false,\n                'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),\n            ]));\n\n            return false;\n        }\n\n        $productCommentUsefulnesRepository = $entityManager->getRepository(ProductCommentUsefulness::class);\n        /** @var ProductCommentUsefulness $productCommentUsefulness */\n        $productCommentUsefulness = $productCommentUsefulnesRepository->findOneBy([\n            'comment' => $id_product_comment,\n            'customerId' => $customerId,\n        ]);\n        if ($productCommentUsefulness) {\n            $productCommentUsefulness->setUsefulness($usefulness);\n        } else {\n            $productCommentUsefulness = new ProductCommentUsefulness(\n                $productComment,\n                $customerId,\n                $usefulness\n            );\n            $entityManager->persist($productCommentUsefulness);\n        }\n\n        $entityManager->flush();\n\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n        $commentUsefulness = $productCommentRepository->getProductCommentUsefulness($id_product_comment);\n\n        $this->ajaxRender(json_encode(array_merge([\n            'success' => true,\n            'id_product_comment' => $id_product_comment,\n        ], $commentUsefulness)));\n    }\n}\n", "/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\n\njQuery(document).ready(function () {\n  const $ = jQuery;\n  const commentsList = $('#product-comments-list');\n  const emptyProductComment = $('#empty-product-comment');\n  const commentsListUrl = commentsList.data('list-comments-url');\n  const updateCommentUsefulnessUrl = commentsList.data('update-comment-usefulness-url');\n  const reportCommentUrl = commentsList.data('report-comment-url');\n  const commentPrototype = commentsList.data('comment-item-prototype');\n\n  emptyProductComment.hide();\n  $('.grade-stars').rating();\n\n  document.addEventListener('updateRating', function() {\n    $('.grade-stars').rating();\n  });\n\n  const updateCommentPostErrorModal = $('#update-comment-usefulness-post-error');\n\n  const confirmAbuseModal = $('#report-comment-confirmation');\n  const reportCommentPostErrorModal = $('#report-comment-post-error');\n  const reportCommentPostedModal = $('#report-comment-posted');\n\n  function showUpdatePostCommentErrorModal(errorMessage) {\n    $('#update-comment-usefulness-post-error-message').html(errorMessage);\n    updateCommentPostErrorModal.modal('show');\n  }\n\n  function showReportCommentErrorModal(errorMessage) {\n    $('#report-comment-post-error-message').html(errorMessage);\n    reportCommentPostErrorModal.modal('show');\n  }\n\n  function paginateComments(page) {\n    $.get(commentsListUrl, {page: page}, function(result) {\n      const jsonResponse = JSON.parse(result);\n\n      if (jsonResponse.comments && jsonResponse.comments.length > 0) {\n        populateComments(jsonResponse.comments);\n        if (jsonResponse.comments_nb > jsonResponse.comments_per_page) {\n          $('#product-comments-list-pagination').pagination({\n            currentPage: page,\n            items: jsonResponse.comments_nb,\n            itemsOnPage: jsonResponse.comments_per_page,\n            cssStyle: '',\n            prevText: '<i class=\"material-icons\">chevron_left</i>',\n            nextText: '<i class=\"material-icons\">chevron_right</i>',\n            useAnchors: false,\n            displayedPages: 2,\n            onPageClick: paginateComments\n          });\n        } else {\n          $('#product-comments-list-pagination').hide();\n        }\n      } else {\n        commentsList.html('');\n        emptyProductComment.show();\n        commentsList.append(emptyProductComment);\n      }\n    });\n  }\n\n  function populateComments(comments) {\n    commentsList.html('');\n    comments.forEach(addComment);\n  }\n\n  function addComment(comment) {\n    var commentTemplate = commentPrototype;\n    var customerName = comment.customer_name;\n    if (!customerName) {\n      customerName = comment.firstname+' '+comment.lastname;\n    }\n    commentTemplate = commentTemplate.replace(/@COMMENT_ID@/, comment.id_product_comment);\n    commentTemplate = commentTemplate.replace(/@PRODUCT_ID@/, comment.id_product);\n    commentTemplate = commentTemplate.replace(/@CUSTOMER_NAME@/, customerName);\n    commentTemplate = commentTemplate.replace(/@COMMENT_DATE@/, comment.date_add);\n    commentTemplate = commentTemplate.replace(/@COMMENT_TITLE@/, comment.title);\n    commentTemplate = commentTemplate.replace(/@COMMENT_COMMENT@/, comment.content);\n    commentTemplate = commentTemplate.replace(/@COMMENT_USEFUL_ADVICES@/, comment.usefulness);\n    commentTemplate = commentTemplate.replace(/@COMMENT_NOT_USEFUL_ADVICES@/, (comment.total_usefulness - comment.usefulness));\n    commentTemplate = commentTemplate.replace(/@COMMENT_TOTAL_ADVICES@/, comment.total_usefulness);\n\n    const $comment = $(commentTemplate);\n    $('.grade-stars', $comment).rating({\n      grade: comment.grade\n    });\n    $('.useful-review', $comment).click(function() {\n      updateCommentUsefulness($comment, comment.id_product_comment, 1);\n    });\n    $('.not-useful-review', $comment).click(function() {\n      updateCommentUsefulness($comment, comment.id_product_comment, 0);\n    });\n    $('.report-abuse', $comment).click(function() {\n      confirmCommentAbuse(comment.id_product_comment);\n    });\n\n    commentsList.append($comment);\n  }\n\n  function updateCommentUsefulness($comment, commentId, usefulness) {\n    $.post(updateCommentUsefulnessUrl, {id_product_comment: commentId, usefulness: usefulness}, function(jsonResponse){\n      var jsonData = false;\n      try {\n        jsonData = JSON.parse(jsonResponse);\n      } catch (e) {\n      }\n      if (jsonData) {\n        if (jsonData.success) {\n          $('.useful-review-value', $comment).html(jsonData.usefulness);\n          $('.not-useful-review-value', $comment).html(jsonData.total_usefulness - jsonData.usefulness);\n        } else {\n          const decodedErrorMessage = $(\"<div/>\").html(jsonData.error).text();\n          showUpdatePostCommentErrorModal(decodedErrorMessage);\n        }\n      } else {\n        showUpdatePostCommentErrorModal(productCommentUpdatePostErrorMessage);\n      }\n    }).fail(function() {\n      showUpdatePostCommentErrorModal(productCommentUpdatePostErrorMessage);\n    });\n  }\n\n  function confirmCommentAbuse(commentId) {\n    confirmAbuseModal.modal('show');\n    confirmAbuseModal.one('modal:confirm', function(event, confirm) {\n      if (!confirm) {\n        return;\n      }\n      $.post(reportCommentUrl, {id_product_comment: commentId}, function(jsonResponse){\n        var jsonData = false;\n        try {\n          jsonData = JSON.parse(jsonResponse);\n        } catch (e) {\n        }\n        if (jsonData) {\n          if (jsonData.success) {\n            reportCommentPostedModal.modal('show');\n          } else {\n            showReportCommentErrorModal(jsonData.error);\n          }\n        } else {\n          showReportCommentErrorModal(productCommentAbuseReportErrorMessage);\n        }\n      }).fail(function() {\n        showReportCommentErrorModal(productCommentAbuseReportErrorMessage);\n      });\n    })\n  }\n\n  paginateComments(1);\n});\n", "/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\n\njQuery(document).ready(function () {\n  const $ = jQuery;\n  $('body').on('click', '.post-product-comment', function (event) {\n    event.preventDefault();\n    showPostCommentModal();\n  });\n\n  const postCommentModal = $('#post-product-comment-modal');\n  postCommentModal.on('hidden.bs.modal', function () {\n    postCommentModal.modal('hide');\n    clearPostCommentForm();\n  });\n\n  const commentPostedModal = $('#product-comment-posted-modal');\n  const commentPostErrorModal = $('#product-comment-post-error');\n\n  function showPostCommentModal() {\n    commentPostedModal.modal('hide');\n    commentPostErrorModal.modal('hide');\n    postCommentModal.modal('show');\n  }\n\n  function showCommentPostedModal() {\n    postCommentModal.modal('hide');\n    commentPostErrorModal.modal('hide');\n    clearPostCommentForm();\n    commentPostedModal.modal('show');\n  }\n\n  function showPostErrorModal(errorMessage) {\n    postCommentModal.modal('hide');\n    commentPostedModal.modal('hide');\n    clearPostCommentForm();\n    $('#product-comment-post-error-message').html(errorMessage);\n    commentPostErrorModal.modal('show');\n  }\n\n  function clearPostCommentForm() {\n    $('#post-product-comment-form input[type=\"text\"]').val('');\n    $('#post-product-comment-form input[type=\"text\"]').removeClass('valid error');\n    $('#post-product-comment-form textarea').val('');\n    $('#post-product-comment-form textarea').removeClass('valid error');\n    $('#post-product-comment-form .criterion-rating input').val(3).change();\n  }\n\n  function initCommentModal() {\n    $('#post-product-comment-modal .grade-stars').rating();\n    $('body').on('click', '.post-product-comment', function (event) {\n      event.preventDefault();\n      showPostCommentModal();\n    });\n\n    $('#post-product-comment-form').submit(submitCommentForm);\n  }\n\n  function submitCommentForm(event) {\n    event.preventDefault();\n    var formData = $(this).serializeArray();\n    if (!validateFormData(formData)) {\n      return;\n    }\n    $.post($(this).attr('action'), $(this).serialize(), function(jsonResponse) {\n      var jsonData = false;\n      try {\n        jsonData = JSON.parse(jsonResponse);\n      } catch (e) {\n      }\n      if (jsonData) {\n        if (jsonData.success) {\n          clearPostCommentForm();\n          showCommentPostedModal();\n        } else {\n          if (jsonData.errors) {\n            var errorList = '<ul>';\n            for (var i = 0; i < jsonData.errors.length; ++i) {\n              errorList += '<li>' + jsonData.errors[i] + '</li>';\n            }\n            errorList += '</ul>';\n            showPostErrorModal(errorList);\n          } else {\n            const decodedErrorMessage = $(\"<div/>\").html(jsonData.error).text();\n            showPostErrorModal(decodedErrorMessage);\n          }\n        }\n      } else {\n        showPostErrorModal(productCommentPostErrorMessage);\n      }\n    }).fail(function() {\n      showPostErrorModal(productCommentPostErrorMessage);\n    });\n  }\n\n  function validateFormData(formData) {\n    var isValid = true;\n    formData.forEach(function(formField) {\n      const fieldSelector = '#post-product-comment-form [name=\"'+formField.name+'\"]';\n      if (!formField.value) {\n        $(fieldSelector).addClass('error');\n        $(fieldSelector).removeClass('valid');\n        isValid = false;\n      } else {\n        $(fieldSelector).removeClass('error');\n        $(fieldSelector).addClass('valid');\n      }\n    });\n\n    return isValid;\n  }\n\n  initCommentModal();\n});\n", "/**\n * 2007-2019 PrestaShop SA and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License (AFL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/afl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n\n$(document).ready(function() {\n    productListingComments.init();\n    productListingComments.load();\n});\n\n\nvar productListingComments = (function () {\n\n    var data = {\n        productIDs: [],\n        commentsLoadingInProgress: false,\n        ajaxIDsLimit: 50,\n        ajaxUrl: ''\n    }\n\n    var DOMStrings = {\n        productListReviewsContainer: '.product-list-reviews',\n        productListReviewsNumberOfComments: '.comments-nb',\n        productListReviewsStarsContainer: '.grade-stars',\n        productContainer: '.thumbnail-container'\n    };\n\n    var DOMClasses =  {\n        inProgress: 'reviews-loading',\n        reviewsLoaded: 'reviews-loaded',\n        hasReviews: 'has-reviews'\n    };\n\n    function setEvents() {\n        prestashop.on('updateProductList', function() {\n            addProductsIDs();\n        });\n    }\n\n\n    function setAjaxUrl() {\n        if (data.ajaxUrl !== '')\n            return;\n\n        var url = $(DOMStrings.productListReviewsContainer).first().data('url');\n        data.ajaxUrl = url;\n    }\n\n    function getNewProductsReviewsElements() {\n        var $productListReviews = $(DOMStrings.productContainer)\n            .not('.' + DOMClasses.reviewsLoaded + ', .' + DOMClasses.inProgress)\n            .addClass(DOMClasses.inProgress)\n            .find(DOMStrings.productListReviewsContainer);\n\n        return $productListReviews;\n    }\n\n    function addProductsIDs() {\n\n        var $productsList = getNewProductsReviewsElements(),\n            seenIds = {};\n\n        $productsList.each(function () {\n            var id = $(this).data('id');\n            seenIds[id] = true;\n        });\n\n        \n        var IDsArray = Object.keys(seenIds);\n        var prevDataIDs = data.productIDs.splice(0);\n        data.productIDs = prevDataIDs.concat(IDsArray);\n\n        if (!data.commentsLoadingInProgress) {\n            loadProductsData();\n        }\n    }\n\n    function loadProductsData() {\n        if (data.productIDs.length === 0) \n            return;\n\n        data.commentsLoadingInProgress = true;\n\n        var dataIDsCopy = data.productIDs.slice(0);\n            selectedProductIDs = dataIDsCopy.splice(0, data.ajaxIDsLimit);\n        \n\n        $.get(data.ajaxUrl, { id_products: selectedProductIDs }, function (jsonResponse) {\n            var jsonData = false;\n            try {\n                jsonData = JSON.parse(jsonResponse);\n            } catch (e) {\n            }\n\n            if (jsonData) {\n\n                $.each(jsonData.products, function(i, elem) {\n                    var productData = elem;\n                    var $productsReviewsContainer = $('.product-list-reviews[data-id=\"' + productData.id_product + '\"]');\n\n                    $productsReviewsContainer.each(function () {\n                        var $self = $(this);\n\n                        if (productData.comments_nb > 0) {\n                            $self.find(DOMStrings.productListReviewsStarsContainer).rating({ grade: productData.average_grade, starWidth: 16 });\n                            $self.find(DOMStrings.productListReviewsNumberOfComments).text('(' + productData.comments_nb + ')');\n                            $self.closest(DOMStrings.productContainer).addClass(DOMClasses.hasReviews);\n                            $self.css('visibility', 'visible');                            \n                        }\n\n                        $self.closest(DOMStrings.productContainer).addClass(DOMClasses.reviewsLoaded);\n                        $self.closest(DOMStrings.productContainer).removeClass(DOMClasses.inProgress);\n\n                    });\n                    data.productIDs.shift();\n                });\n\n                data.commentsLoadingInProgress = false;\n                if (data.productIDs.length > 0) {\n                    loadProductsData();\n                }\n\n            }\n        });\n    }\n\n\n    return {\n        load: function () {\n            addProductsIDs();\n        },\n        init: function () {\n            setAjaxUrl();\n            setEvents();\n        }\n    }\n})();\n\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsCommentGradeModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        $idProducts = Tools::getValue('id_products');\n        /** @var ProductCommentRepository $productCommentRepository */\n\n        header('Content-Type: application/json');\n\n        if (!is_array($idProducts)) {\n            return $this->ajaxRender(null);\n        }\n\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $productsCommentsNb = $productCommentRepository->getCommentsNumberForProducts($idProducts, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n        $averageGrade = $productCommentRepository->getAverageGrades($idProducts, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n\n        $resultFormated = [];\n\n        foreach ($idProducts as $i => $id) {\n            $resultFormated []= [\n                'id_product' => $id,\n                'comments_nb' => $productsCommentsNb[$id],\n                'average_grade' => $averageGrade[$id]\n            ];\n        }\n\n        $this->ajaxRender(\n            json_encode(\n                [\n                    'products' => $resultFormated\n                ]\n            )\n        );\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsListCommentsModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        $idProduct = Tools::getValue('id_product');\n        $page = Tools::getValue('page', 1);\n        $isLastNameAnynomus = Configuration::get('PRODUCT_COMMENTS_ANONYMISATION');\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n\n        $productComments = $productCommentRepository->paginate(\n            $idProduct,\n            $page,\n            Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'),\n            Configuration::get('PRODUCT_COMMENTS_MODERATE')\n        );\n        $productCommentsNb = $productCommentRepository->getCommentsNumber($idProduct, Configuration::get('PRODUCT_COMMENTS_MODERATE'));\n\n        $responseArray = [\n            'comments_nb' => $productCommentsNb,\n            'comments_per_page' => Configuration::get('PRODUCT_COMMENTS_COMMENTS_PER_PAGE'),\n            'comments' => [],\n        ];\n\n        foreach ($productComments as $productComment) {\n            $dateAdd = new \\DateTime($productComment['date_add'], new \\DateTimeZone('UTC'));\n            $dateAdd->setTimezone(new \\DateTimeZone(date_default_timezone_get()));\n            $dateFormatter = new \\IntlDateFormatter(\n                $this->context->language->locale,\n                \\IntlDateFormatter::SHORT,\n                \\IntlDateFormatter::SHORT\n            );\n            $productComment['customer_name'] = htmlentities($productComment['customer_name']);\n            $productComment['title'] = htmlentities($productComment['title']);\n            $productComment['content'] = htmlentities($productComment['content']);\n            $productComment['date_add'] = $dateFormatter->format($dateAdd);\n\n            if($isLastNameAnynomus) {\n                $productComment['lastname'] = substr($productComment['lastname'], 0, 1) . '.';\n            }\n\n            $usefulness = $productCommentRepository->getProductCommentUsefulness($productComment['id_product_comment']);\n            $productComment = array_merge($productComment, $usefulness);\n            if (empty($productComment['customer_name']) && !isset($productComment['firstname']) && !isset($productComment['lastname'])) {\n                $productComment['customer_name'] = $this->trans('Deleted account', [], 'Modules.Productcomments.Shop');\n            }\n\n            $responseArray['comments'][] = $productComment;\n        }\n\n        header('Content-Type: application/json');\n        $this->ajaxRender(\n            json_encode(\n                $responseArray\n            )\n        );\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductComment;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductCommentCriterion;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductCommentGrade;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsPostCommentModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        header('Content-Type: application/json');\n        if (!(int) $this->context->cookie->id_customer && !Configuration::get('PRODUCT_COMMENTS_ALLOW_GUESTS')) {\n            $this->ajaxRender(\n                json_encode(\n                    [\n                        'success' => false,\n                        'error' => $this->trans(\n                            'You need to be [1]logged in[/1] or [2]create an account[/2] to post your review.',\n                            [\n                                '[1]' => '<a href=\"' . $this->context->link->getPageLink('my-account') . '\">',\n                                '[/1]' => '</a>',\n                                '[2]' => '<a href=\"' . $this->context->link->getPageLink('authentication&create_account=1') . '\">',\n                                '[/2]' => '</a>',\n                            ],\n                            'Modules.Productcomments.Shop'\n                        ),\n                    ]\n                )\n            );\n\n            return false;\n        }\n\n        $id_product = (int) Tools::getValue('id_product');\n        $comment_title = Tools::getValue('comment_title');\n        $comment_content = Tools::getValue('comment_content');\n        $customer_name = Tools::getValue('customer_name');\n        $criterions = Tools::getValue('criterion');\n\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n        $isPostAllowed = $productCommentRepository->isPostAllowed(\n            $id_product,\n            (int) $this->context->cookie->id_customer,\n            (int) $this->context->cookie->id_guest\n        );\n        if (!$isPostAllowed) {\n            $this->ajaxRender(\n                json_encode(\n                    [\n                        'success' => false,\n                        'error' => $this->trans('You are not allowed to post a review at the moment, please try again later.', [], 'Modules.Productcomments.Shop'),\n                    ]\n                )\n            );\n\n            return false;\n        }\n\n        /** @var EntityManagerInterface $entityManager */\n        $entityManager = $this->container->get('doctrine.orm.entity_manager');\n\n        //Create product comment\n        $productComment = new ProductComment();\n        $productComment\n            ->setProductId($id_product)\n            ->setTitle($comment_title)\n            ->setContent($comment_content)\n            ->setCustomerName($customer_name)\n            ->setCustomerId($this->context->cookie->id_customer)\n            ->setGuestId($this->context->cookie->id_guest)\n            ->setDateAdd(new \\DateTime('now', new \\DateTimeZone('UTC')))\n        ;\n        $entityManager->persist($productComment);\n        $this->addCommentGrades($productComment, $criterions);\n\n        //Validate comment\n        $errors = $this->validateComment($productComment);\n        if (!empty($errors)) {\n            $this->ajaxRender(\n                json_encode(\n                    [\n                        'success' => false,\n                        'errors' => $errors,\n                    ]\n                )\n            );\n\n            return false;\n        }\n\n        $entityManager->flush();\n\n        $this->ajaxRender(\n            json_encode(\n                [\n                    'success' => true,\n                    'product_comment' => $productComment->toArray(),\n                ]\n            )\n        );\n    }\n\n    /**\n     * @param ProductComment $productComment\n     * @param array $criterions\n     *\n     * @throws Exception\n     */\n    private function addCommentGrades(ProductComment $productComment, array $criterions)\n    {\n        /** @var EntityManagerInterface $entityManager */\n        $entityManager = $this->container->get('doctrine.orm.entity_manager');\n        $criterionRepository = $entityManager->getRepository(ProductCommentCriterion::class);\n        $averageGrade = 0;\n\n        foreach ($criterions as $criterionId => $grade) {\n            $criterion = $criterionRepository->findOneById($criterionId);\n            $criterionGrade = new ProductCommentGrade(\n                $productComment,\n                $criterion,\n                $grade\n            );\n\n            $entityManager->persist($criterionGrade);\n            $averageGrade += $grade;\n        }\n\n        $averageGrade /= count($criterions);\n        $productComment->setGrade($averageGrade);\n    }\n\n    /**\n     * Manual validation for now, this would be nice to use Symfony validator with the annotation\n     *\n     * @param ProductComment $productComment\n     *\n     * @return array\n     */\n    private function validateComment(ProductComment $productComment)\n    {\n        $errors = [];\n        if (empty($productComment->getTitle())) {\n            $errors[] = $this->trans('Title cannot be empty', [], 'Modules.Productcomments.Shop');\n        } elseif (strlen($productComment->getTitle()) > ProductComment::TITLE_MAX_LENGTH) {\n            $errors[] = $this->trans('Title cannot be more than %s characters', [ProductComment::TITLE_MAX_LENGTH], 'Modules.Productcomments.Shop');\n        }\n\n        if (!$productComment->getCustomerId()) {\n            if (empty($productComment->getCustomerName())) {\n                $errors[] = $this->trans('Customer name cannot be empty', [], 'Modules.Productcomments.Shop');\n            } elseif (strlen($productComment->getCustomerName()) > ProductComment::CUSTOMER_NAME_MAX_LENGTH) {\n                $errors[] = $this->trans('Customer name cannot be more than %s characters', [ProductComment::CUSTOMER_NAME_MAX_LENGTH], 'Modules.Productcomments.Shop');\n            }\n        }\n\n        return $errors;\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductComment;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductCommentReport;\n\nclass ProductCommentsReportCommentModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        header('Content-Type: application/json');\n\n        $customerId = (int) $this->context->cookie->id_customer;\n        if (!$customerId) {\n            $this->ajaxRender(\n                json_encode(\n                    [\n                        'success' => false,\n                        'error' => $this->trans('You need to be logged in to report a review.', [], 'Modules.Productcomments.Shop'),\n                    ]\n                )\n            );\n\n            return false;\n        }\n\n        $id_product_comment = (int) Tools::getValue('id_product_comment');\n\n        /** @var EntityManagerInterface $entityManager */\n        $entityManager = $this->container->get('doctrine.orm.entity_manager');\n        $productCommentEntityRepository = $entityManager->getRepository(ProductComment::class);\n\n        $productComment = $productCommentEntityRepository->findOneById($id_product_comment);\n        if (!$productComment) {\n            $this->ajaxRender(\n                json_encode(\n                    [\n                        'success' => false,\n                        'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),\n                    ]\n                )\n            );\n\n            return false;\n        }\n\n        $productCommentAbuseRepository = $entityManager->getRepository(ProductCommentReport::class);\n        /** @var ProductCommentReport $productCommentAbuse */\n        $productCommentAbuse = $productCommentAbuseRepository->findOneBy([\n            'comment' => $id_product_comment,\n            'customerId' => $customerId,\n        ]);\n\n        if ($productCommentAbuse) {\n            $this->ajaxRender(\n                json_encode(\n                    [\n                        'success' => false,\n                        'error' => $this->trans('You already reported this review as abusive.', [], 'Modules.Productcomments.Shop'),\n                    ]\n                )\n            );\n\n            return false;\n        }\n\n        $productCommentAbuse = new ProductCommentReport(\n            $productComment,\n            $customerId\n        );\n        $entityManager->persist($productCommentAbuse);\n        $entityManager->flush();\n\n        $this->ajaxRender(\n            json_encode(\n                [\n                    'success' => true,\n                    'id_product_comment' => $id_product_comment,\n                ]\n            )\n        );\n    }\n}\n", "<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductComment;\nuse PrestaShop\\Module\\ProductComment\\Entity\\ProductCommentUsefulness;\nuse PrestaShop\\Module\\ProductComment\\Repository\\ProductCommentRepository;\n\nclass ProductCommentsUpdateCommentUsefulnessModuleFrontController extends ModuleFrontController\n{\n    public function display()\n    {\n        header('Content-Type: application/json');\n\n        if (!Configuration::get('PRODUCT_COMMENTS_USEFULNESS')) {\n            $this->ajaxRender(\n                json_encode(\n                    [\n                        'success' => false,\n                        'error' => $this->trans('This feature is not enabled.', [], 'Modules.Productcomments.Shop'),\n                    ]\n                )\n            );\n\n            return false;\n        }\n\n        $customerId = (int) $this->context->cookie->id_customer;\n        if (!$customerId) {\n            $this->ajaxRender(\n                json_encode(\n                    [\n                        'success' => false,\n                        'error' => $this->trans(\n                            'You need to be [1]logged in[/1] or [2]create an account[/2] to give your appreciation of a review.',\n                            [\n                                '[1]' => '<a href=\"' . $this->context->link->getPageLink('my-account') . '\">',\n                                '[/1]' => '</a>',\n                                '[2]' => '<a href=\"' . $this->context->link->getPageLink('authentication&create_account=1') . '\">',\n                                '[/2]' => '</a>',\n                            ],\n                            'Modules.Productcomments.Shop'\n                        ),\n                    ]\n                )\n            );\n\n            return false;\n        }\n\n        $id_product_comment = (int) Tools::getValue('id_product_comment');\n        $usefulness = (int) Tools::getValue('usefulness');\n\n        /** @var EntityManagerInterface $entityManager */\n        $entityManager = $this->container->get('doctrine.orm.entity_manager');\n        $productCommentEntityRepository = $entityManager->getRepository(ProductComment::class);\n\n        $productComment = $productCommentEntityRepository->findOneById($id_product_comment);\n        if (!$productComment) {\n            $this->ajaxRender(\n                json_encode(\n                    [\n                        'success' => false,\n                        'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),\n                    ]\n                )\n            );\n\n            return false;\n        }\n\n        $productCommentUsefulnesRepository = $entityManager->getRepository(ProductCommentUsefulness::class);\n        /** @var ProductCommentUsefulness $productCommentUsefulness */\n        $productCommentUsefulness = $productCommentUsefulnesRepository->findOneBy([\n            'comment' => $id_product_comment,\n            'customerId' => $customerId,\n        ]);\n        if ($productCommentUsefulness) {\n            $productCommentUsefulness->setUsefulness($usefulness);\n        } else {\n            $productCommentUsefulness = new ProductCommentUsefulness(\n                $productComment,\n                $customerId,\n                $usefulness\n            );\n            $entityManager->persist($productCommentUsefulness);\n        }\n\n        $entityManager->flush();\n\n        /** @var ProductCommentRepository $productCommentRepository */\n        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');\n        $commentUsefulness = $productCommentRepository->getProductCommentUsefulness($id_product_comment);\n\n        $this->ajaxRender(\n            json_encode(\n                array_merge(\n                    [\n                        'success' => true,\n                        'id_product_comment' => $id_product_comment,\n                    ],\n                    $commentUsefulness\n                )\n            )\n        );\n    }\n}\n", "/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\n\njQuery(document).ready(function () {\n  const $ = jQuery;\n  const commentsList = $('#product-comments-list');\n  const emptyProductComment = $('#empty-product-comment');\n  const commentsListUrl = commentsList.data('list-comments-url');\n  const updateCommentUsefulnessUrl = commentsList.data('update-comment-usefulness-url');\n  const reportCommentUrl = commentsList.data('report-comment-url');\n  const commentPrototype = commentsList.data('comment-item-prototype');\n\n  emptyProductComment.hide();\n  $('.grade-stars').rating();\n\n  document.addEventListener('updateRating', function() {\n    $('.grade-stars').rating();\n  });\n\n  const updateCommentPostErrorModal = $('#update-comment-usefulness-post-error');\n\n  const confirmAbuseModal = $('#report-comment-confirmation');\n  const reportCommentPostErrorModal = $('#report-comment-post-error');\n  const reportCommentPostedModal = $('#report-comment-posted');\n\n  function showUpdatePostCommentErrorModal(errorMessage) {\n    $('#update-comment-usefulness-post-error-message').html(errorMessage);\n    updateCommentPostErrorModal.modal('show');\n  }\n\n  function showReportCommentErrorModal(errorMessage) {\n    $('#report-comment-post-error-message').html(errorMessage);\n    reportCommentPostErrorModal.modal('show');\n  }\n\n  function paginateComments(page) {\n    $.get(commentsListUrl, {page: page}, function(jsonResponse) {\n      if (jsonResponse.comments && jsonResponse.comments.length > 0) {\n        populateComments(jsonResponse.comments);\n        if (jsonResponse.comments_nb > jsonResponse.comments_per_page) {\n          $('#product-comments-list-pagination').pagination({\n            currentPage: page,\n            items: jsonResponse.comments_nb,\n            itemsOnPage: jsonResponse.comments_per_page,\n            cssStyle: '',\n            prevText: '<i class=\"material-icons\">chevron_left</i>',\n            nextText: '<i class=\"material-icons\">chevron_right</i>',\n            useAnchors: false,\n            displayedPages: 2,\n            onPageClick: paginateComments\n          });\n        } else {\n          $('#product-comments-list-pagination').hide();\n        }\n      } else {\n        commentsList.html('');\n        emptyProductComment.show();\n        commentsList.append(emptyProductComment);\n      }\n    });\n  }\n\n  function populateComments(comments) {\n    commentsList.html('');\n    comments.forEach(addComment);\n  }\n\n  function addComment(comment) {\n    var commentTemplate = commentPrototype;\n    var customerName = comment.customer_name;\n    if (!customerName) {\n      customerName = comment.firstname+' '+comment.lastname;\n    }\n    commentTemplate = commentTemplate.replace(/@COMMENT_ID@/, comment.id_product_comment);\n    commentTemplate = commentTemplate.replace(/@PRODUCT_ID@/, comment.id_product);\n    commentTemplate = commentTemplate.replace(/@CUSTOMER_NAME@/, customerName);\n    commentTemplate = commentTemplate.replace(/@COMMENT_DATE@/, comment.date_add);\n    commentTemplate = commentTemplate.replace(/@COMMENT_TITLE@/, comment.title);\n    commentTemplate = commentTemplate.replace(/@COMMENT_COMMENT@/, comment.content);\n    commentTemplate = commentTemplate.replace(/@COMMENT_USEFUL_ADVICES@/, comment.usefulness);\n    commentTemplate = commentTemplate.replace(/@COMMENT_NOT_USEFUL_ADVICES@/, (comment.total_usefulness - comment.usefulness));\n    commentTemplate = commentTemplate.replace(/@COMMENT_TOTAL_ADVICES@/, comment.total_usefulness);\n\n    const $comment = $(commentTemplate);\n    $('.grade-stars', $comment).rating({\n      grade: comment.grade\n    });\n    $('.useful-review', $comment).click(function() {\n      updateCommentUsefulness($comment, comment.id_product_comment, 1);\n    });\n    $('.not-useful-review', $comment).click(function() {\n      updateCommentUsefulness($comment, comment.id_product_comment, 0);\n    });\n    $('.report-abuse', $comment).click(function() {\n      confirmCommentAbuse(comment.id_product_comment);\n    });\n\n    commentsList.append($comment);\n  }\n\n  function updateCommentUsefulness($comment, commentId, usefulness) {\n    $.post(updateCommentUsefulnessUrl, {id_product_comment: commentId, usefulness: usefulness}, function(jsonData){\n      if (jsonData) {\n        if (jsonData.success) {\n          $('.useful-review-value', $comment).html(jsonData.usefulness);\n          $('.not-useful-review-value', $comment).html(jsonData.total_usefulness - jsonData.usefulness);\n        } else {\n          const decodedErrorMessage = $(\"<div/>\").html(jsonData.error).text();\n          showUpdatePostCommentErrorModal(decodedErrorMessage);\n        }\n      } else {\n        showUpdatePostCommentErrorModal(productCommentUpdatePostErrorMessage);\n      }\n    }).fail(function() {\n      showUpdatePostCommentErrorModal(productCommentUpdatePostErrorMessage);\n    });\n  }\n\n  function confirmCommentAbuse(commentId) {\n    confirmAbuseModal.modal('show');\n    confirmAbuseModal.one('modal:confirm', function(event, confirm) {\n      if (!confirm) {\n        return;\n      }\n      $.post(reportCommentUrl, {id_product_comment: commentId}, function(jsonData){\n        if (jsonData) {\n          if (jsonData.success) {\n            reportCommentPostedModal.modal('show');\n          } else {\n            showReportCommentErrorModal(jsonData.error);\n          }\n        } else {\n          showReportCommentErrorModal(productCommentAbuseReportErrorMessage);\n        }\n      }).fail(function() {\n        showReportCommentErrorModal(productCommentAbuseReportErrorMessage);\n      });\n    })\n  }\n\n  paginateComments(1);\n});\n", "/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\n\njQuery(document).ready(function () {\n  const $ = jQuery;\n  $('body').on('click', '.post-product-comment', function (event) {\n    event.preventDefault();\n    showPostCommentModal();\n  });\n\n  const postCommentModal = $('#post-product-comment-modal');\n  postCommentModal.on('hidden.bs.modal', function () {\n    postCommentModal.modal('hide');\n    clearPostCommentForm();\n  });\n\n  const commentPostedModal = $('#product-comment-posted-modal');\n  const commentPostErrorModal = $('#product-comment-post-error');\n\n  function showPostCommentModal() {\n    commentPostedModal.modal('hide');\n    commentPostErrorModal.modal('hide');\n    postCommentModal.modal('show');\n  }\n\n  function showCommentPostedModal() {\n    postCommentModal.modal('hide');\n    commentPostErrorModal.modal('hide');\n    clearPostCommentForm();\n    commentPostedModal.modal('show');\n  }\n\n  function showPostErrorModal(errorMessage) {\n    postCommentModal.modal('hide');\n    commentPostedModal.modal('hide');\n    clearPostCommentForm();\n    $('#product-comment-post-error-message').html(errorMessage);\n    commentPostErrorModal.modal('show');\n  }\n\n  function clearPostCommentForm() {\n    $('#post-product-comment-form input[type=\"text\"]').val('');\n    $('#post-product-comment-form input[type=\"text\"]').removeClass('valid error');\n    $('#post-product-comment-form textarea').val('');\n    $('#post-product-comment-form textarea').removeClass('valid error');\n    $('#post-product-comment-form .criterion-rating input').val(3).change();\n  }\n\n  function initCommentModal() {\n    $('#post-product-comment-modal .grade-stars').rating();\n    $('body').on('click', '.post-product-comment', function (event) {\n      event.preventDefault();\n      showPostCommentModal();\n    });\n\n    $('#post-product-comment-form').submit(submitCommentForm);\n  }\n\n  function submitCommentForm(event) {\n    event.preventDefault();\n    var formData = $(this).serializeArray();\n    if (!validateFormData(formData)) {\n      return;\n    }\n    $.post($(this).attr('action'), $(this).serialize(), function(jsonData) {\n      if (jsonData) {\n        if (jsonData.success) {\n          clearPostCommentForm();\n          showCommentPostedModal();\n        } else {\n          if (jsonData.errors) {\n            var errorList = '<ul>';\n            for (var i = 0; i < jsonData.errors.length; ++i) {\n              errorList += '<li>' + jsonData.errors[i] + '</li>';\n            }\n            errorList += '</ul>';\n            showPostErrorModal(errorList);\n          } else {\n            const decodedErrorMessage = $(\"<div/>\").html(jsonData.error).text();\n            showPostErrorModal(decodedErrorMessage);\n          }\n        }\n      } else {\n        showPostErrorModal(productCommentPostErrorMessage);\n      }\n    }).fail(function() {\n      showPostErrorModal(productCommentPostErrorMessage);\n    });\n  }\n\n  function validateFormData(formData) {\n    var isValid = true;\n    formData.forEach(function(formField) {\n      const fieldSelector = '#post-product-comment-form [name=\"'+formField.name+'\"]';\n      if (!formField.value) {\n        $(fieldSelector).addClass('error');\n        $(fieldSelector).removeClass('valid');\n        isValid = false;\n      } else {\n        $(fieldSelector).removeClass('error');\n        $(fieldSelector).addClass('valid');\n      }\n    });\n\n    return isValid;\n  }\n\n  initCommentModal();\n});\n", "/**\n * 2007-2019 PrestaShop SA and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License (AFL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/afl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n\n$(document).ready(function() {\n    productListingComments.init();\n    productListingComments.load();\n});\n\n\nvar productListingComments = (function () {\n\n    var data = {\n        productIDs: [],\n        commentsLoadingInProgress: false,\n        ajaxIDsLimit: 50,\n        ajaxUrl: ''\n    }\n\n    var DOMStrings = {\n        productListReviewsContainer: '.product-list-reviews',\n        productListReviewsNumberOfComments: '.comments-nb',\n        productListReviewsStarsContainer: '.grade-stars',\n        productContainer: '.thumbnail-container'\n    };\n\n    var DOMClasses =  {\n        inProgress: 'reviews-loading',\n        reviewsLoaded: 'reviews-loaded',\n        hasReviews: 'has-reviews'\n    };\n\n    function setEvents() {\n        prestashop.on('updateProductList', function() {\n            addProductsIDs();\n        });\n    }\n\n\n    function setAjaxUrl() {\n        if (data.ajaxUrl !== '')\n            return;\n\n        var url = $(DOMStrings.productListReviewsContainer).first().data('url');\n        data.ajaxUrl = url;\n    }\n\n    function getNewProductsReviewsElements() {\n        var $productListReviews = $(DOMStrings.productContainer)\n            .not('.' + DOMClasses.reviewsLoaded + ', .' + DOMClasses.inProgress)\n            .addClass(DOMClasses.inProgress)\n            .find(DOMStrings.productListReviewsContainer);\n\n        return $productListReviews;\n    }\n\n    function addProductsIDs() {\n\n        var $productsList = getNewProductsReviewsElements(),\n            seenIds = {};\n\n        $productsList.each(function () {\n            var id = $(this).data('id');\n            seenIds[id] = true;\n        });\n\n\n        var IDsArray = Object.keys(seenIds);\n        var prevDataIDs = data.productIDs.splice(0);\n        data.productIDs = prevDataIDs.concat(IDsArray);\n\n        if (!data.commentsLoadingInProgress) {\n            loadProductsData();\n        }\n    }\n\n    function loadProductsData() {\n        if (data.productIDs.length === 0)\n            return;\n\n        data.commentsLoadingInProgress = true;\n\n        var dataIDsCopy = data.productIDs.slice(0);\n            selectedProductIDs = dataIDsCopy.splice(0, data.ajaxIDsLimit);\n\n\n        $.get(data.ajaxUrl, { id_products: selectedProductIDs }, function (jsonData) {\n            if (jsonData) {\n                $.each(jsonData.products, function(i, elem) {\n                    var productData = elem;\n                    var $productsReviewsContainer = $('.product-list-reviews[data-id=\"' + productData.id_product + '\"]');\n\n                    $productsReviewsContainer.each(function () {\n                        var $self = $(this);\n\n                        if (productData.comments_nb > 0) {\n                            $self.find(DOMStrings.productListReviewsStarsContainer).rating({ grade: productData.average_grade, starWidth: 16 });\n                            $self.find(DOMStrings.productListReviewsNumberOfComments).text('(' + productData.comments_nb + ')');\n                            $self.closest(DOMStrings.productContainer).addClass(DOMClasses.hasReviews);\n                            $self.css('visibility', 'visible');\n                        }\n\n                        $self.closest(DOMStrings.productContainer).addClass(DOMClasses.reviewsLoaded);\n                        $self.closest(DOMStrings.productContainer).removeClass(DOMClasses.inProgress);\n\n                    });\n                    data.productIDs.shift();\n                });\n\n                data.commentsLoadingInProgress = false;\n                if (data.productIDs.length > 0) {\n                    loadProductsData();\n                }\n\n            }\n        });\n    }\n\n\n    return {\n        load: function () {\n            addProductsIDs();\n        },\n        init: function () {\n            setAjaxUrl();\n            setEvents();\n        }\n    }\n})();\n"], "filenames": ["controllers/front/CommentGrade.php", "controllers/front/ListComments.php", "controllers/front/PostComment.php", "controllers/front/ReportComment.php", "controllers/front/UpdateCommentUsefulness.php", "views/js/list-comments.js", "views/js/post-comment.js", "views/js/productListingComments.js"], "buggy_code_start_loc": [34, 78, 35, 33, 34, 59, 87, 89], "buggy_code_end_loc": [57, 79, 128, 86, 107, 160, 93, 160], "fixing_code_start_loc": [35, 78, 36, 34, 35, 59, 87, 89], "fixing_code_end_loc": [63, 84, 154, 105, 128, 148, 88, 151], "type": "CWE-79", "message": "In PrestaShop Product Comments before version 4.2.0, an attacker could inject malicious web code into the users' web browsers by creating a malicious link. The problem was introduced in version 4.0.0 and is fixed in 4.2.0", "other": {"cve": {"id": "CVE-2020-26225", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-16T22:15:12.570", "lastModified": "2020-11-30T18:36:09.827", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop Product Comments before version 4.2.0, an attacker could inject malicious web code into the users' web browsers by creating a malicious link. The problem was introduced in version 4.0.0 and is fixed in 4.2.0"}, {"lang": "es", "value": "En PrestaShop Product Comments versiones anteriores a 4.2.0, un atacante pod\u00eda inyectar c\u00f3digo web malicioso en los navegadores web de los usuarios al crear un enlace malicioso. El problema se introdujo en la versi\u00f3n 4.0.0 y es corregido en la versi\u00f3n 4.2.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:product_comments:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.2.0", "matchCriteriaId": "6F398AA4-3984-4996-BDD4-317659791F63"}]}]}], "references": [{"url": "https://github.com/PrestaShop/productcomments/commit/c56e3e9495c4a0a9c1e7dc43e1bb0fcad2796dbf", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/productcomments/security/advisories/GHSA-58w4-w77w-qv3w", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/productcomments/commit/c56e3e9495c4a0a9c1e7dc43e1bb0fcad2796dbf"}}