{"buggy_code": ["{\n  \"name\": \"blogile\",\n  \"version\": \"0.0.4\",\n  \"description\": \"A simple lightweight blog system.\",\n  \"main\": \"server.js\",\n  \"repository\": \"git://github.com/typcn/Blogile.git\",\n  \"author\": \"TYPCN <admin@typcn.com>\",\n  \"dependencies\": {\n    \"async\": \"~0.2.8\",\n    \"express\": \"~4.10.1\",\n    \"jade\": \"~1.7.0\",\n    \"marked\": \"~0.3.2\",\n    \"memory-cache\": \"~0.0.5\",\n    \"mysql\": \"~2.5.2\",\n    \"sha1\": \"~1.1.0\",\n    \"body-parser\": \"~1.9.2\",\n    \"cookie-parser\": \"~1.3.3\",\n    \"wait.for\": \"~0.6.6\",\n    \"highlight.js\": \"~8.3.0\"\n  }\n}\n", "var express = require('express');\nvar bodyParser = require('body-parser');\nvar cookieParser = require('cookie-parser');\nvar app = express();\nvar jade = require('jade');\nvar cache = require('memory-cache');\nvar mysql = require('mysql');\nvar marked = require('marked');\nvar wait =require('wait.for');\nvar fs = require(\"fs\");\nvar http = require('http');\napp.use(bodyParser({limit: '10mb'}));\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(__dirname + '/public'));\n\n/* Config */\nvar CACHE_ENABLE = 1; /* Use Memory Cache */\napp.locals.title = 'BlogName'; /* Your Blog Name */\napp.locals.postperpage = 10; /* How much posts display per page */\napp.locals.AdminUsername = 'admin'; /* admin username */\nvar sqlconf = {\n  host     : '127.0.0.1', /* Database IP */\n  port     : 3306,   /* Database Port */\n  user     : 'root',/* Database Username */\n  password : '',/* Database Password */\n  database: 'blogile'/* Database Name */\n};\n\nvar connection;\nvar cache_miss = 0;\nvar cache_hit = 0;\nfunction ConnDB(){\n   connection = mysql.createConnection(sqlconf);\n   connection.connect(function(err) {\n     if(err != null){\n        log(\"Mysql Connect error:\" + err,3);\n        connection.end();\n        setTimeout(ConnDB,2000);\n     }else{\n        log(\"Mysql Connected!\");\n        BuildCache();\n     }\n   });\n   connection.on('error', function(err) {\n      log(err,3);\n      ConnDB();\n   });\n}\n\nConnDB();\n\n\nmarked.setOptions({\n  highlight: function (code) {\n    return require('highlight.js').highlightAuto(code).value;\n  }\n});\n\napp.get('/', function(req, res) {\n   var loadStart = Date.now();\n   var cachePage = cache.get('index');\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      res.set('X-Server-Load-Time', Date.now() - loadStart);\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      wait.launchFiber(getNav, 1, false);\n      //Get Data from Database\n      connection.query('SELECT * FROM bi_posts order by time desc LIMIT 0 , ' + app.locals.postperpage , function(err, rows) {\n         if(err){ log(\"Please run 'node install.js IP PORT USERNAME PASSWORD DBName' to install blogile.\"); connection.end();ConnDB();}\n         var pageContent = jade.renderFile(__dirname + '/views/index.jade', {\n               PageTitle: app.locals.title,\n               BlogTitle: app.locals.title,\n               PostData: rows,\n               getimg: getFirstImage,\n               memory:cache,\n               nav:cache.get(\"nav-1\")\n            });\n         if(CACHE_ENABLE == 1){\n            cache.put('index', pageContent);\n            res.set('X-Builtin-Cache', 'miss');\n            cache_miss++;\n            log(req.path + \" Cached\");\n         }\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.send(pageContent);\n      });\n   }\n});\n\napp.get('/page/:num', function(req, res) {\n   var loadStart = Date.now();\n   var cachePage = cache.get('page' + req.params.num);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      res.set('X-Server-Load-Time', Date.now() - loadStart);\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      var docnum = req.params.num*app.locals.postperpage - app.locals.postperpage;\n      var pagedoc = docnum + app.locals.postperpage;\n      //Get Data from Database\n      wait.launchFiber(getNav, req.params.num, true);\n\n      connection.query('SELECT * FROM bi_posts order by time desc LIMIT '+ docnum + ' , 10', function(err, rows) {\n         if(err){ log(\"Please run 'node install.js IP PORT USERNAME PASSWORD DBName' to install blogile.\"); connection.end(); ConnDB();}\n         var pageContent = jade.renderFile(__dirname + '/views/index.jade', {\n               PageTitle: 'Page ' + req.params.num + \" - \" + app.locals.title,\n               BlogTitle: app.locals.title,\n               PostData: rows,\n               memory:cache,\n               getimg: getFirstImage,\n               subdir:true,\n               nav:cache.get(\"nav-\" + req.params.num)\n            });\n         if(CACHE_ENABLE == 1){\n            cache.put('page' + req.params.num, pageContent);\n            res.set('X-Builtin-Cache', 'miss');\n            cache_miss++;\n            log(req.path + \" Cached\");\n         }\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.send(pageContent);\n      });\n   }\n});\n\napp.get('/posts/:shortname.html', function(req, res) {\n   var loadStart = Date.now();\n   var cachePage = cache.get('post-' + req.params.shortname);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      res.set('X-Server-Load-Time', Date.now() - loadStart);\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      //Get Data from Database\n      connection.query('SELECT * FROM bi_posts where shortname = ' + connection.escape(req.params.shortname), function(err, rows) {\n         if(err){ log(err,3);}\n         if(rows[0] === undefined){\n            res.set('X-Builtin-Cache', 'hit');\n            res.set('X-Server-Load-Time', Date.now() - loadStart);\n            res.status(404);\n            res.send(cache.get('E404'));\n            return;\n         }\n\n         var pageContent = jade.renderFile(__dirname + '/views/post.jade', {\n               BlogTitle: app.locals.title,\n               PostData: rows,\n               Category: cache.get(\"categorydata-\" + rows[0].category),\n               marked : marked,\n               ds_url:\"http://\" + req.hostname + req.path\n            });\n         if(CACHE_ENABLE == 1){\n            cache.put('post-' + req.params.shortname, pageContent);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.send(pageContent);\n      });\n   }\n});\n\napp.get('/archives/:shortname.html', function(req, res) {\n   res.redirect(301, '../posts/' + req.params.shortname + '.html');\n});\n\napp.get('/donate', function(req, res) {\n   res.redirect(301, '/donate.html');\n});\n\napp.get('/categorys/:shortname.html', function(req, res) {\n   var loadStart = Date.now();\n   var cachePage = cache.get('category-' + req.params.shortname);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      res.set('X-Server-Load-Time', Date.now() - loadStart);\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      var cat = cache.get(\"categorydata-\" + req.params.shortname);\n      if(cat === undefined){\n         res.set('X-Builtin-Cache', 'hit');\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.status(404);\n         res.send(cache.get('E404'));\n         return;\n      }\n      //Get Data from Database\n      connection.query('SELECT * FROM bi_posts where category = ' + connection.escape(cat.id) + ' order by time desc', function(err, rows) {\n         if(err){ log(err,3);}\n         var pageContent = jade.renderFile(__dirname + '/views/index.jade', {\n               PageTitle: cat.name+' - '+app.locals.title,\n               BlogTitle: app.locals.title,\n               PostData: rows,\n               getimg: getFirstImage,\n               memory:cache,\n               subdir:true,\n               nav:\"\"\n            });\n         if(CACHE_ENABLE == 1){\n            cache.put('category-' + req.params.shortname, pageContent);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.send(pageContent);\n      });\n   }\n});\n\n\n// Blog Admin\napp.post('/admin/login', function(req, res) {\n   if(req.param('username') != app.locals.AdminUsername){\n      res.send(\"-1\");\n      log(Date.now() + \" Username Error from \" + req.ip,2);\n   }else{\n      var file = __dirname + '/.blogilepassword';\n      if(fs.existsSync(file)){\n         var sha1 = require('sha1');\n         var pwb = req.param('password');\n         var pwc = md5(pwb + pwb.substr(3,11) + \"Poweredbytypcn\");\n         var pwd = sha1(pwc+pwc+pwb);\n         var localpw = fs.readFileSync(file);\n         if(pwd==localpw){\n            var session = sha1(Math.random());\n            cache.put(session,true);\n            res.cookie('ADMINSESSION', session, { expires: new Date(Date.now() + 9999999999), httpOnly: true })\n            res.send(\"0\");\n            log(Date.now() + \" Login Success from \" + req.ip,2);\n         }else{\n            res.send(\"-1\");\n            log(Date.now() + \" Password Error from \" + req.ip,2);\n         }\n      }else{\n         res.send(\"-2\");\n      }\n   }\n});\n\napp.get('/admin/check', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      res.send(\"0\");\n   }\n});\n\napp.get('/admin/status', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      connection.query('SELECT COUNT(*) AS namesCount FROM bi_posts', function(err, rows) {   \n         var result = {};\n         var memoryUsage = process.memoryUsage();\n         result['uptime'] = process.uptime();\n         result['memory'] = memoryUsage.rss / 1024 / 1024;\n         result['cachehit'] = cache_hit;\n         result['cachemiss'] = cache_miss;\n         result['docnum'] = rows[0].namesCount;\n         res.contentType('application/json');\n         res.send(JSON.stringify(result));\n      });\n   }\n});\n\napp.get('/admin/delcache/:name', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      if(req.params.name == \"all\"){\n         cache.clear();\n         BuildCache();\n         res.send(\"0\");\n      }else{\n         cache.del(req.params.name);\n         res.send(\"0\");\n      }\n   }\n});\n\napp.get('/admin/post/list/:ppp/:pid', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      if(req.params.name == \"all\"){\n         cache.clear();\n         BuildCache();\n         res.send(\"0\");\n      }else{\n         cache.del(req.params.name);\n         res.send(\"0\");\n      }\n   }\n});\n\napp.post('/admin/post/new', function(req, res) {\n    if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n        if(req.param('url')){\n            var time = Math.round(+new Date()/1000);\n            var category = req.param('category');\n            if(!category){\n                category = 0;\n            }\n            var q = 'INSERT INTO `bi_posts`(`time`, `content`, `title`, `shortname`, `category`) VALUES (' + time + ',' +  connection.escape(req.param('content')) + ',' + connection.escape(req.param('title')) + ',' +  connection.escape(req.param('url')) + ',' + category + ')';\n            connection.query(q, function(err, rows) {\n                if(err) { \n                    log(err,3); \n                    res.send(\"-2\"); \n                }else{\n                    res.send(\"0\");\n                    cache.del(\"index\");\n                    cache.del(\"api-page-1\");\n                }\n            });\n        }else{\n            res.send(\"1\");\n        }\n   }\n});\n\napp.post('/admin/upload/base64', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      var str = req.param('imgstr');\n      var matches = str.match(/^data:image\\/([A-Za-z-+\\/]+);base64,(.+)$/);\n\n      if (matches.length !== 3) {\n        res.status(500);\n        res.send(\"-2\");\n      }\n\n      var filetype = matches[1].replace(\"x-icon\",\"ico\");\n      filetype = filetype.replace(\"jpeg\",\"jpg\");\n      \n      var data = new Buffer(matches[2], 'base64');\n      \n      var filename = Date.now() + '.' + filetype;\n      \n      fs.writeFile(__dirname + '/public/images/' + filename, data, function(err) { \n            if(err){\n                res.status(500);\n                res.send(\"-3\");\n            }\n            res.send(\"images/\" + filename);\n      });\n   }\n});\n\n// API\napp.get('/api/post/:postid.json', function(req, res) {\n   var cachePage = cache.get('api-post-' + req.params.postid);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      //Get Data from Database\n      connection.query('SELECT * FROM bi_posts where id = ' + connection.escape(req.params.postid), function(err, rows) {\n         if(err){ log(err,3);}\n         if(rows[0] === undefined){\n            res.contentType('application/json');\n            res.send('{\"error\":1}');\n            return;\n         }\n         var result = {\n            \"error\":0,\n            \"results\":{\n                0:{\n                    \"id\":rows[0].id,\n                    \"time\":rows[0].time,\n                    \"title\":rows[0].title,\n                    \"category\":cache.get(\"categorydata-\" + rows[0].category),\n                    \"content\":marked(rows[0].content)\n                }\n            }\n         };\n         \n         if(CACHE_ENABLE == 1){\n            cache.put('api-post-' + req.params.postid, result);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n\n         res.contentType('application/json');\n         res.send(JSON.stringify(result));\n      });\n   }\n});\n\napp.get('/api/categorys/:shortname.json', function(req, res) {\n   var cachePage = cache.get('api-category-' + req.params.shortname);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      var info = cache.get('categorydata-' + req.params.shortname);\n      if(!info){\n        res.contentType('application/json');\n        res.send('{\"error\":1}');\n        return;\n      }\n      connection.query('SELECT * FROM bi_posts where category = ' + connection.escape(info.id) + ' order by time desc', function(err, rows) {\n         if(err){ log(err,3);}\n         if(rows[0] === undefined){\n            res.contentType('application/json');\n            res.send('{\"error\":1}');\n            return;\n         }\n         var result = {\n            \"error\":0,\n            \"results\":{}\n         };\n         \n        for (var i = 0, len = rows.length; i < len; i++) {\n            result['results'][i] = {\n                \"id\":rows[i].id,\n                \"time\":rows[i].time,\n                \"title\":rows[i].title,\n                \"category\":info,\n                \"shortname\":rows[i].shortname,\n                \"content\":rows[i].content.replace(/(<([^>]+)>)/ig,\"\").replace(/\\r?\\n|\\r/g, \" \").substr(0,200),\n                \"firstimg\":getFirstImage(rows[i].content)\n            }            \n        }\n      \n         if(CACHE_ENABLE == 1){\n            cache.put('api-category-' + req.params.shortname, result);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n\n         res.contentType('application/json');\n         res.send(JSON.stringify(result));\n      });\n   }\n});\n\napp.post('/api/search/:query.json', function(req, res) {\n  res.contentType('application/json');\n  res.set('Access-Control-Allow-Origin', '*');\n   var cachePage = cache.get('api-search-' + req.params.query);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      if(!req.param('TK') || !req.param('ua')){\n        res.setHeader('Cache-Control', 'max-age=0');\n        res.send('{\"error\":1,\"msg\":\"No access token!\"}');\n        return;\n      }\n      var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n      var purl = \"/hash/verify/\" + req.param('TK') + \"/\" + req.param('ua') + \"?cfip=\" + ip;\n\n\n      http.get({\n          host: 'antispam.eqoe.cn',\n          path: purl\n      }, function(response) {\n          // Continuously update stream with data\n          var body = '';\n          response.on('data', function(d) {\n              body += d;\n          });\n          response.on('end', function() {\n              var parsed = JSON.parse(body);\n              if(parsed.success == 0){\n                res.contentType('application/json');\n                res.send('{\"error\":1,\"msg\":\"Access token error\"}');\n                return;\n              }else{\n                searchkey(req.params.query,res);\n              }\n          });\n      });\n\n   }\n});\n\napp.get('/api/search/:query.json', function(req, res) {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.contentType('application/json');\n   var cachePage = cache.get('api-search-' + req.params.query);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      res.setHeader('Cache-Control', 'max-age=0');\n      res.send('{\"error\":1}');\n   }\n});\n\napp.get('/api/page/:num.json', function(req, res) {\n  res.contentType('application/json');\n  res.set('Access-Control-Allow-Origin', '*');\n   var cachePage = cache.get('api-page-' + req.params.num);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      var docnum = req.params.num*app.locals.postperpage - app.locals.postperpage;\n      var pagedoc = docnum + app.locals.postperpage;\n      //Get Data from Database\n      if(req.params.num == 1){\n        wait.launchFiber(getNav, req.params.num, false);\n      }else{\n        wait.launchFiber(getNav, req.params.num, true);\n      }\n      \n      connection.query('SELECT * FROM bi_posts order by time desc LIMIT '+ docnum + ' , 10', function(err, rows) {\n         if(err){ log(err,3);}\n         if(rows[0] === undefined){\n            res.contentType('application/json');\n            res.send('{\"error\":1}');\n            return;\n         }\n         var result = {\n            \"error\":0,\n            \"results\":{},\n            \"nav\":cache.get(\"nav-\" + req.params.num)\n         };\n         \n        for (var i = 0, len = rows.length; i < len; i++) {\n            result['results'][i] = {\n                \"id\":rows[i].id,\n                \"time\":rows[i].time,\n                \"title\":rows[i].title,\n                \"shortname\":rows[i].shortname,\n                \"category\":cache.get('categorydata-' + rows[i].category),\n                \"content\":rows[i].content.replace(/(<([^>]+)>)/ig,\"\").replace(/\\r?\\n|\\r/g, \" \").substr(0,200),\n                \"firstimg\":getFirstImage(rows[i].content)\n            }            \n        }\n      \n         if(CACHE_ENABLE == 1){\n            cache.put('api-page-' + req.params.num, result);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n\n         res.contentType('application/json');\n         res.send(JSON.stringify(result));\n      });\n   }\n});\n\n\napp.listen(8023);\n\n\n\nfunction BuildCache(){\n   //404 Page\n   cache.put('E404', jade.renderFile( __dirname + '/views/404.jade',{ BlogTitle:app.locals.title }));\n   //Categorys\n   connection.query('SELECT * FROM bi_categorys', function(err, rows) {\n      for (var i = 0, len = rows.length; i < len; i++) {\n        cache.put('categorydata-' + rows[i].id,rows[i]);\n        cache.put('categorydata-' + rows[i].url_short,rows[i]);\n      }\n      var category = {};\n      category.id = 0;\n      category.name = \"Uncategorized\";\n      category.url_short = \"uncategorized\";\n      cache.put(\"categorydata-0\",category);\n      cache.put(\"categorydata-uncategorized\",category);\n      log(\"Category Cache Built\");\n   });\n}\nvar getFirstImage = function(content){\n   var regex = /<img.*?src=\"(.*?)\"/;\n   var src = regex.exec(content);\n   if(src){\n      return src[1];\n   }else{\n      return false;\n   }\n};\n\n\nfunction md5(name){\n   var crypto = require('crypto');\n   return crypto.createHash('md5').update(name).digest('hex');\n}\n\nfunction getNav(currpage,subdir){\n   var rows = wait.forMethod(connection,'query','SELECT COUNT(*) AS namesCount FROM bi_posts');\n   var DOM = '<div id=\"pageNav\">';\n   var postnum = rows[0].namesCount;\n   var pagenum = Math.ceil(postnum/app.locals.postperpage);\n   if(currpage != 1){\n      var lastpage = currpage - 1;\n      DOM += '<a href=\"'+ lastpage +'\" class=\"button pagenav\">\u4e0a\u4e00\u9875</a>';\n   }\n   for(var i=0 ; i < pagenum ; i++ ){\n      var num = i + 1;\n      var url = \"page/\" + num;\n      if(subdir){\n         url = num;\n      }\n      if(currpage == num){\n         DOM += '<a href=\"'+ url +'\" class=\"button pagenav current\">' + num + '</a>';\n      }else{\n         DOM += '<a href=\"'+ url +'\" class=\"button pagenav\">' + num + '</a>';\n      }\n   }\n   if(currpage != pagenum){\n      var nextpage = parseInt(currpage) + 1;\n      if(subdir){\n         DOM += '<a href=\"'+ nextpage +'\" class=\"button pagenav\">\u4e0b\u4e00\u9875</a>';\n      }else{\n         DOM += '<a href=\"page/'+ nextpage +'\" class=\"button pagenav\">\u4e0b\u4e00\u9875</a>';\n      }\n   }\n   DOM += '</div>';\n   cache.put(\"nav-\" + currpage,DOM);\n}\n\nfunction searchkey(query,res){\n  connection.query('select * from bi_posts where concat(title,content) like \"%'+ query +'%\"', function(err, rows) {\n    if(err){ log(err,3);}\n    if(rows[0] === undefined){\n      res.contentType('application/json');\n      res.send('{\"error\":2}');\n      return;\n    }\n\n\n    var result = {\n      \"error\":0,\n      \"results\":{}\n    };\n\n    for (var i = 0, len = rows.length; i < len; i++) {\n        result['results'][i] = {\n            \"id\":rows[i].id,\n            \"time\":rows[i].time,\n            \"title\":rows[i].title,\n            \"category\":cache.get('categorydata-' + rows[i].category),\n            \"shortname\":rows[i].shortname,\n            \"content\":rows[i].content.replace(/(<([^>]+)>)/ig,\"\").replace(/\\r?\\n|\\r/g, \" \").substr(0,200),\n            \"firstimg\":getFirstImage(rows[i].content)\n        }            \n    }\n\n    if(CACHE_ENABLE == 1){\n      cache.put('api-search-' + query, result);\n      res.set('X-Builtin-Cache', 'miss');\n      cache_miss++;\n    }\n\n    res.contentType('application/json');\n    res.send(JSON.stringify(result));\n  });\n}\n\nsetInterval(logStat,60000);\nlogStat();\n\nfunction logStat(){\n   var memoryUsage = process.memoryUsage();\n   log(\"Uptime: \" + process.uptime() + \"  Memory Usage: \" + memoryUsage.rss / 1024 / 1024);\n   var cachenum = cache_hit + cache_miss;\n   var hitrate = cache_hit/cachenum;\n   log(\"Cache hit: \" + cache_hit + \" Cache miss: \" + cache_miss + \" Hit rate: \" + hitrate*100 + \"%\");\n}\n\nprocess.on('uncaughtException', function(err) {\n  log('Caught exception: ' + err,3);\n});\n\nfunction log(str,level){\n   var msg = \"INFO\";\n   var file = \"./blogile.log\";\n   if(level == 2){ msg = \"WARN\"; }\n   else if(level == 3){ msg=\"ERR\";file=\"./error.log\"; }\n   var str2 = msg + \" [\" + Date().toLocaleString() + \"] \" + str;\n   console.log(str2);\n\n   fs.appendFile(file, str2 + \"\\n\", function (err) {\n     if(err){\n         console.log(\"Log Write Failed\");\n     }\n   });\n}\n"], "fixing_code": ["{\n  \"name\": \"blogile\",\n  \"version\": \"0.0.5\",\n  \"description\": \"A simple lightweight blog system.\",\n  \"main\": \"server.js\",\n  \"repository\": \"git://github.com/typcn/Blogile.git\",\n  \"author\": \"TYPCN <admin@typcn.com>\",\n  \"dependencies\": {\n    \"async\": \"~0.2.8\",\n    \"express\": \"~4.10.1\",\n    \"jade\": \"~1.7.0\",\n    \"marked\": \"~0.3.2\",\n    \"memory-cache\": \"~0.0.5\",\n    \"mysql\": \"~2.5.2\",\n    \"sha1\": \"~1.1.0\",\n    \"body-parser\": \"~1.9.2\",\n    \"cookie-parser\": \"~1.3.3\",\n    \"wait.for\": \"~0.6.6\",\n    \"highlight.js\": \"~8.3.0\"\n  }\n}\n", "var express = require('express');\nvar bodyParser = require('body-parser');\nvar cookieParser = require('cookie-parser');\nvar app = express();\nvar jade = require('jade');\nvar cache = require('memory-cache');\nvar mysql = require('mysql');\nvar marked = require('marked');\nvar wait =require('wait.for');\nvar fs = require(\"fs\");\nvar http = require('http');\napp.use(bodyParser({limit: '10mb'}));\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(__dirname + '/public'));\n\n/* Config */\nvar CACHE_ENABLE = 1; /* Use Memory Cache */\napp.locals.title = 'BlogName'; /* Your Blog Name */\napp.locals.postperpage = 10; /* How much posts display per page */\napp.locals.AdminUsername = 'admin'; /* admin username */\nvar sqlconf = {\n  host     : '127.0.0.1', /* Database IP */\n  port     : 3306,   /* Database Port */\n  user     : 'root',/* Database Username */\n  password : '',/* Database Password */\n  database: 'blogile'/* Database Name */\n};\n\nvar connection;\nvar cache_miss = 0;\nvar cache_hit = 0;\nfunction ConnDB(){\n   connection = mysql.createConnection(sqlconf);\n   connection.connect(function(err) {\n     if(err != null){\n        log(\"Mysql Connect error:\" + err,3);\n        connection.end();\n        setTimeout(ConnDB,2000);\n     }else{\n        log(\"Mysql Connected!\");\n        BuildCache();\n     }\n   });\n   connection.on('error', function(err) {\n      log(err,3);\n      ConnDB();\n   });\n}\n\nConnDB();\n\n\nmarked.setOptions({\n  highlight: function (code) {\n    return require('highlight.js').highlightAuto(code).value;\n  }\n});\n\napp.get('/', function(req, res) {\n   var loadStart = Date.now();\n   var cachePage = cache.get('index');\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      res.set('X-Server-Load-Time', Date.now() - loadStart);\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      wait.launchFiber(getNav, 1, false);\n      //Get Data from Database\n      connection.query('SELECT * FROM bi_posts order by time desc LIMIT 0 , ' + app.locals.postperpage , function(err, rows) {\n         if(err){ log(\"Please run 'node install.js IP PORT USERNAME PASSWORD DBName' to install blogile.\"); connection.end();ConnDB();}\n         var pageContent = jade.renderFile(__dirname + '/views/index.jade', {\n               PageTitle: app.locals.title,\n               BlogTitle: app.locals.title,\n               PostData: rows,\n               getimg: getFirstImage,\n               memory:cache,\n               nav:cache.get(\"nav-1\")\n            });\n         if(CACHE_ENABLE == 1){\n            cache.put('index', pageContent);\n            res.set('X-Builtin-Cache', 'miss');\n            cache_miss++;\n            log(req.path + \" Cached\");\n         }\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.send(pageContent);\n      });\n   }\n});\n\napp.get('/page/:num', function(req, res) {\n   var loadStart = Date.now();\n   var cachePage = cache.get('page' + req.params.num);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      res.set('X-Server-Load-Time', Date.now() - loadStart);\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      var docnum = req.params.num*app.locals.postperpage - app.locals.postperpage;\n      var pagedoc = docnum + app.locals.postperpage;\n      //Get Data from Database\n      wait.launchFiber(getNav, req.params.num, true);\n\n      connection.query('SELECT * FROM bi_posts order by time desc LIMIT '+ docnum + ' , 10', function(err, rows) {\n         if(err){ log(\"Please run 'node install.js IP PORT USERNAME PASSWORD DBName' to install blogile.\"); connection.end(); ConnDB();}\n         var pageContent = jade.renderFile(__dirname + '/views/index.jade', {\n               PageTitle: 'Page ' + req.params.num + \" - \" + app.locals.title,\n               BlogTitle: app.locals.title,\n               PostData: rows,\n               memory:cache,\n               getimg: getFirstImage,\n               subdir:true,\n               nav:cache.get(\"nav-\" + req.params.num)\n            });\n         if(CACHE_ENABLE == 1){\n            cache.put('page' + req.params.num, pageContent);\n            res.set('X-Builtin-Cache', 'miss');\n            cache_miss++;\n            log(req.path + \" Cached\");\n         }\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.send(pageContent);\n      });\n   }\n});\n\napp.get('/posts/:shortname.html', function(req, res) {\n   var loadStart = Date.now();\n   var cachePage = cache.get('post-' + req.params.shortname);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      res.set('X-Server-Load-Time', Date.now() - loadStart);\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      //Get Data from Database\n      connection.query('SELECT * FROM bi_posts where shortname = ' + connection.escape(req.params.shortname), function(err, rows) {\n         if(err){ log(err,3);}\n         if(rows[0] === undefined){\n            res.set('X-Builtin-Cache', 'hit');\n            res.set('X-Server-Load-Time', Date.now() - loadStart);\n            res.status(404);\n            res.send(cache.get('E404'));\n            return;\n         }\n\n         var pageContent = jade.renderFile(__dirname + '/views/post.jade', {\n               BlogTitle: app.locals.title,\n               PostData: rows,\n               Category: cache.get(\"categorydata-\" + rows[0].category),\n               marked : marked,\n               ds_url:\"http://\" + req.hostname + req.path\n            });\n         if(CACHE_ENABLE == 1){\n            cache.put('post-' + req.params.shortname, pageContent);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.send(pageContent);\n      });\n   }\n});\n\napp.get('/archives/:shortname.html', function(req, res) {\n   res.redirect(301, '../posts/' + req.params.shortname + '.html');\n});\n\napp.get('/donate', function(req, res) {\n   res.redirect(301, '/donate.html');\n});\n\napp.get('/categorys/:shortname.html', function(req, res) {\n   var loadStart = Date.now();\n   var cachePage = cache.get('category-' + req.params.shortname);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      res.set('X-Server-Load-Time', Date.now() - loadStart);\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      var cat = cache.get(\"categorydata-\" + req.params.shortname);\n      if(cat === undefined){\n         res.set('X-Builtin-Cache', 'hit');\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.status(404);\n         res.send(cache.get('E404'));\n         return;\n      }\n      //Get Data from Database\n      connection.query('SELECT * FROM bi_posts where category = ' + connection.escape(cat.id) + ' order by time desc', function(err, rows) {\n         if(err){ log(err,3);}\n         var pageContent = jade.renderFile(__dirname + '/views/index.jade', {\n               PageTitle: cat.name+' - '+app.locals.title,\n               BlogTitle: app.locals.title,\n               PostData: rows,\n               getimg: getFirstImage,\n               memory:cache,\n               subdir:true,\n               nav:\"\"\n            });\n         if(CACHE_ENABLE == 1){\n            cache.put('category-' + req.params.shortname, pageContent);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n         res.set('X-Server-Load-Time', Date.now() - loadStart);\n         res.send(pageContent);\n      });\n   }\n});\n\n\n// Blog Admin\napp.post('/admin/login', function(req, res) {\n   if(req.param('username') != app.locals.AdminUsername){\n      res.send(\"-1\");\n      log(Date.now() + \" Username Error from \" + req.ip,2);\n   }else{\n      var file = __dirname + '/.blogilepassword';\n      if(fs.existsSync(file)){\n         var sha1 = require('sha1');\n         var pwb = req.param('password');\n         var pwc = md5(pwb + pwb.substr(3,11) + \"Poweredbytypcn\");\n         var pwd = sha1(pwc+pwc+pwb);\n         var localpw = fs.readFileSync(file);\n         if(pwd==localpw){\n            var session = sha1(Math.random());\n            cache.put(session,true);\n            res.cookie('ADMINSESSION', session, { expires: new Date(Date.now() + 9999999999), httpOnly: true })\n            res.send(\"0\");\n            log(Date.now() + \" Login Success from \" + req.ip,2);\n         }else{\n            res.send(\"-1\");\n            log(Date.now() + \" Password Error from \" + req.ip,2);\n         }\n      }else{\n         res.send(\"-2\");\n      }\n   }\n});\n\napp.get('/admin/check', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      res.send(\"0\");\n   }\n});\n\napp.get('/admin/status', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      connection.query('SELECT COUNT(*) AS namesCount FROM bi_posts', function(err, rows) {   \n         var result = {};\n         var memoryUsage = process.memoryUsage();\n         result['uptime'] = process.uptime();\n         result['memory'] = memoryUsage.rss / 1024 / 1024;\n         result['cachehit'] = cache_hit;\n         result['cachemiss'] = cache_miss;\n         result['docnum'] = rows[0].namesCount;\n         res.contentType('application/json');\n         res.send(JSON.stringify(result));\n      });\n   }\n});\n\napp.get('/admin/delcache/:name', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      if(req.params.name == \"all\"){\n         cache.clear();\n         BuildCache();\n         res.send(\"0\");\n      }else{\n         cache.del(req.params.name);\n         res.send(\"0\");\n      }\n   }\n});\n\napp.get('/admin/post/list/:ppp/:pid', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      if(req.params.name == \"all\"){\n         cache.clear();\n         BuildCache();\n         res.send(\"0\");\n      }else{\n         cache.del(req.params.name);\n         res.send(\"0\");\n      }\n   }\n});\n\napp.post('/admin/post/new', function(req, res) {\n    if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n        if(req.param('url')){\n            var time = Math.round(+new Date()/1000);\n            var category = req.param('category');\n            if(!category){\n                category = 0;\n            }\n            var q = 'INSERT INTO `bi_posts`(`time`, `content`, `title`, `shortname`, `category`) VALUES (' + time + ',' +  connection.escape(req.param('content')) + ',' + connection.escape(req.param('title')) + ',' +  connection.escape(req.param('url')) + ',' + category + ')';\n            connection.query(q, function(err, rows) {\n                if(err) { \n                    log(err,3); \n                    res.send(\"-2\"); \n                }else{\n                    res.send(\"0\");\n                    cache.del(\"index\");\n                    cache.del(\"api-page-1\");\n                }\n            });\n        }else{\n            res.send(\"1\");\n        }\n   }\n});\n\napp.post('/admin/upload/base64', function(req, res) {\n   if(cache.get(req.cookies.ADMINSESSION) != true){\n      res.send(\"-1\");\n   }else{\n      var str = req.param('imgstr');\n      var matches = str.match(/^data:image\\/([A-Za-z-+\\/]+);base64,(.+)$/);\n\n      if (matches.length !== 3) {\n        res.status(500);\n        res.send(\"-2\");\n      }\n\n      var filetype = matches[1].replace(\"x-icon\",\"ico\");\n      filetype = filetype.replace(\"jpeg\",\"jpg\");\n      \n      var data = new Buffer(matches[2], 'base64');\n      \n      var filename = Date.now() + '.' + filetype;\n      \n      fs.writeFile(__dirname + '/public/images/' + filename, data, function(err) { \n            if(err){\n                res.status(500);\n                res.send(\"-3\");\n            }\n            res.send(\"images/\" + filename);\n      });\n   }\n});\n\n// API\napp.get('/api/post/:postid.json', function(req, res) {\n   var cachePage = cache.get('api-post-' + req.params.postid);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      //Get Data from Database\n      connection.query('SELECT * FROM bi_posts where id = ' + connection.escape(req.params.postid), function(err, rows) {\n         if(err){ log(err,3);}\n         if(rows[0] === undefined){\n            res.contentType('application/json');\n            res.send('{\"error\":1}');\n            return;\n         }\n         var result = {\n            \"error\":0,\n            \"results\":{\n                0:{\n                    \"id\":rows[0].id,\n                    \"time\":rows[0].time,\n                    \"title\":rows[0].title,\n                    \"category\":cache.get(\"categorydata-\" + rows[0].category),\n                    \"content\":marked(rows[0].content)\n                }\n            }\n         };\n         \n         if(CACHE_ENABLE == 1){\n            cache.put('api-post-' + req.params.postid, result);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n\n         res.contentType('application/json');\n         res.send(JSON.stringify(result));\n      });\n   }\n});\n\napp.get('/api/categorys/:shortname.json', function(req, res) {\n   var cachePage = cache.get('api-category-' + req.params.shortname);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      var info = cache.get('categorydata-' + req.params.shortname);\n      if(!info){\n        res.contentType('application/json');\n        res.send('{\"error\":1}');\n        return;\n      }\n      connection.query('SELECT * FROM bi_posts where category = ' + connection.escape(info.id) + ' order by time desc', function(err, rows) {\n         if(err){ log(err,3);}\n         if(rows[0] === undefined){\n            res.contentType('application/json');\n            res.send('{\"error\":1}');\n            return;\n         }\n         var result = {\n            \"error\":0,\n            \"results\":{}\n         };\n         \n        for (var i = 0, len = rows.length; i < len; i++) {\n            result['results'][i] = {\n                \"id\":rows[i].id,\n                \"time\":rows[i].time,\n                \"title\":rows[i].title,\n                \"category\":info,\n                \"shortname\":rows[i].shortname,\n                \"content\":rows[i].content.replace(/(<([^>]+)>)/ig,\"\").replace(/\\r?\\n|\\r/g, \" \").substr(0,200),\n                \"firstimg\":getFirstImage(rows[i].content)\n            }            \n        }\n      \n         if(CACHE_ENABLE == 1){\n            cache.put('api-category-' + req.params.shortname, result);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n\n         res.contentType('application/json');\n         res.send(JSON.stringify(result));\n      });\n   }\n});\n\napp.post('/api/search/:query.json', function(req, res) {\n  res.contentType('application/json');\n  res.set('Access-Control-Allow-Origin', '*');\n   var cachePage = cache.get('api-search-' + req.params.query);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      if(!req.param('TK') || !req.param('ua')){\n        res.setHeader('Cache-Control', 'max-age=0');\n        res.send('{\"error\":1,\"msg\":\"No access token!\"}');\n        return;\n      }\n      var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n      var purl = \"/hash/verify/\" + req.param('TK') + \"/\" + req.param('ua') + \"?cfip=\" + ip;\n\n\n      http.get({\n          host: 'antispam.eqoe.cn',\n          path: purl\n      }, function(response) {\n          // Continuously update stream with data\n          var body = '';\n          response.on('data', function(d) {\n              body += d;\n          });\n          response.on('end', function() {\n              var parsed = JSON.parse(body);\n              if(parsed.success == 0){\n                res.contentType('application/json');\n                res.send('{\"error\":1,\"msg\":\"Access token error\"}');\n                return;\n              }else{\n                searchkey(req.params.query,res);\n              }\n          });\n      });\n\n   }\n});\n\napp.get('/api/search/:query.json', function(req, res) {\n  res.set('Access-Control-Allow-Origin', '*');\n  res.contentType('application/json');\n   var cachePage = cache.get('api-search-' + req.params.query);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      res.setHeader('Cache-Control', 'max-age=0');\n      res.send('{\"error\":1}');\n   }\n});\n\napp.get('/api/page/:num.json', function(req, res) {\n  res.contentType('application/json');\n  res.set('Access-Control-Allow-Origin', '*');\n   var cachePage = cache.get('api-page-' + req.params.num);\n   if(cachePage){\n      res.set('X-Builtin-Cache', 'hit');\n      cache_hit++;\n      res.send(cachePage);\n   }else{\n      var docnum = req.params.num*app.locals.postperpage - app.locals.postperpage;\n      var pagedoc = docnum + app.locals.postperpage;\n      //Get Data from Database\n      if(req.params.num == 1){\n        wait.launchFiber(getNav, req.params.num, false);\n      }else{\n        wait.launchFiber(getNav, req.params.num, true);\n      }\n      \n      connection.query('SELECT * FROM bi_posts order by time desc LIMIT '+ docnum + ' , 10', function(err, rows) {\n         if(err){ log(err,3);}\n         if(rows[0] === undefined){\n            res.contentType('application/json');\n            res.send('{\"error\":1}');\n            return;\n         }\n         var result = {\n            \"error\":0,\n            \"results\":{},\n            \"nav\":cache.get(\"nav-\" + req.params.num)\n         };\n         \n        for (var i = 0, len = rows.length; i < len; i++) {\n            result['results'][i] = {\n                \"id\":rows[i].id,\n                \"time\":rows[i].time,\n                \"title\":rows[i].title,\n                \"shortname\":rows[i].shortname,\n                \"category\":cache.get('categorydata-' + rows[i].category),\n                \"content\":rows[i].content.replace(/(<([^>]+)>)/ig,\"\").replace(/\\r?\\n|\\r/g, \" \").substr(0,200),\n                \"firstimg\":getFirstImage(rows[i].content)\n            }            \n        }\n      \n         if(CACHE_ENABLE == 1){\n            cache.put('api-page-' + req.params.num, result);\n            res.set('X-Builtin-Cache', 'miss');\n            log(req.path + \" Cached\");\n            cache_miss++;\n         }\n\n         res.contentType('application/json');\n         res.send(JSON.stringify(result));\n      });\n   }\n});\n\n\napp.listen(8023);\n\n\n\nfunction BuildCache(){\n   //404 Page\n   cache.put('E404', jade.renderFile( __dirname + '/views/404.jade',{ BlogTitle:app.locals.title }));\n   //Categorys\n   connection.query('SELECT * FROM bi_categorys', function(err, rows) {\n      for (var i = 0, len = rows.length; i < len; i++) {\n        cache.put('categorydata-' + rows[i].id,rows[i]);\n        cache.put('categorydata-' + rows[i].url_short,rows[i]);\n      }\n      var category = {};\n      category.id = 0;\n      category.name = \"Uncategorized\";\n      category.url_short = \"uncategorized\";\n      cache.put(\"categorydata-0\",category);\n      cache.put(\"categorydata-uncategorized\",category);\n      log(\"Category Cache Built\");\n   });\n}\nvar getFirstImage = function(content){\n   var regex = /<img.*?src=\"(.*?)\"/;\n   var src = regex.exec(content);\n   if(src){\n      return src[1];\n   }else{\n      return false;\n   }\n};\n\n\nfunction md5(name){\n   var crypto = require('crypto');\n   return crypto.createHash('md5').update(name).digest('hex');\n}\n\nfunction getNav(currpage,subdir){\n   var rows = wait.forMethod(connection,'query','SELECT COUNT(*) AS namesCount FROM bi_posts');\n   var DOM = '<div id=\"pageNav\">';\n   var postnum = rows[0].namesCount;\n   var pagenum = Math.ceil(postnum/app.locals.postperpage);\n   if(currpage != 1){\n      var lastpage = currpage - 1;\n      DOM += '<a href=\"'+ lastpage +'\" class=\"button pagenav\">\u4e0a\u4e00\u9875</a>';\n   }\n   for(var i=0 ; i < pagenum ; i++ ){\n      var num = i + 1;\n      var url = \"page/\" + num;\n      if(subdir){\n         url = num;\n      }\n      if(currpage == num){\n         DOM += '<a href=\"'+ url +'\" class=\"button pagenav current\">' + num + '</a>';\n      }else{\n         DOM += '<a href=\"'+ url +'\" class=\"button pagenav\">' + num + '</a>';\n      }\n   }\n   if(currpage != pagenum){\n      var nextpage = parseInt(currpage) + 1;\n      if(subdir){\n         DOM += '<a href=\"'+ nextpage +'\" class=\"button pagenav\">\u4e0b\u4e00\u9875</a>';\n      }else{\n         DOM += '<a href=\"page/'+ nextpage +'\" class=\"button pagenav\">\u4e0b\u4e00\u9875</a>';\n      }\n   }\n   DOM += '</div>';\n   cache.put(\"nav-\" + currpage,DOM);\n}\n\nfunction searchkey(query,res){\n  connection.query('select * from bi_posts where concat(title,content) like \"%'+ connection.escape(query) +'%\"', function(err, rows) {\n    if(err){ log(err,3);}\n    if(rows[0] === undefined){\n      res.contentType('application/json');\n      res.send('{\"error\":2}');\n      return;\n    }\n\n\n    var result = {\n      \"error\":0,\n      \"results\":{}\n    };\n\n    for (var i = 0, len = rows.length; i < len; i++) {\n        result['results'][i] = {\n            \"id\":rows[i].id,\n            \"time\":rows[i].time,\n            \"title\":rows[i].title,\n            \"category\":cache.get('categorydata-' + rows[i].category),\n            \"shortname\":rows[i].shortname,\n            \"content\":rows[i].content.replace(/(<([^>]+)>)/ig,\"\").replace(/\\r?\\n|\\r/g, \" \").substr(0,200),\n            \"firstimg\":getFirstImage(rows[i].content)\n        }            \n    }\n\n    if(CACHE_ENABLE == 1){\n      cache.put('api-search-' + query, result);\n      res.set('X-Builtin-Cache', 'miss');\n      cache_miss++;\n    }\n\n    res.contentType('application/json');\n    res.send(JSON.stringify(result));\n  });\n}\n\nsetInterval(logStat,60000);\nlogStat();\n\nfunction logStat(){\n   var memoryUsage = process.memoryUsage();\n   log(\"Uptime: \" + process.uptime() + \"  Memory Usage: \" + memoryUsage.rss / 1024 / 1024);\n   var cachenum = cache_hit + cache_miss;\n   var hitrate = cache_hit/cachenum;\n   log(\"Cache hit: \" + cache_hit + \" Cache miss: \" + cache_miss + \" Hit rate: \" + hitrate*100 + \"%\");\n}\n\nprocess.on('uncaughtException', function(err) {\n  log('Caught exception: ' + err,3);\n});\n\nfunction log(str,level){\n   var msg = \"INFO\";\n   var file = \"./blogile.log\";\n   if(level == 2){ msg = \"WARN\"; }\n   else if(level == 3){ msg=\"ERR\";file=\"./error.log\"; }\n   var str2 = msg + \" [\" + Date().toLocaleString() + \"] \" + str;\n   console.log(str2);\n\n   fs.appendFile(file, str2 + \"\\n\", function (err) {\n     if(err){\n         console.log(\"Log Write Failed\");\n     }\n   });\n}\n"], "filenames": ["package.json", "server.js"], "buggy_code_start_loc": [3, 637], "buggy_code_end_loc": [4, 638], "fixing_code_start_loc": [3, 637], "fixing_code_end_loc": [4, 638], "type": "CWE-89", "message": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability, which was classified as critical, was found in typcn Blogile. Affected is the function getNav of the file server.js. The manipulation of the argument query leads to sql injection. The name of the patch is cfec31043b562ffefe29fe01af6d3c5ed1bf8f7d. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217560. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.", "other": {"cve": {"id": "CVE-2014-125049", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-06T13:15:09.750", "lastModified": "2023-01-12T20:03:56.020", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability, which was classified as critical, was found in typcn Blogile. Affected is the function getNav of the file server.js. The manipulation of the argument query leads to sql injection. The name of the patch is cfec31043b562ffefe29fe01af6d3c5ed1bf8f7d. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217560. NOTE: This vulnerability only affects products that are no longer supported by the maintainer."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:blogile_project:blogile:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-12-02", "matchCriteriaId": "D454B190-6045-4243-BD94-9DAB0770C09D"}]}]}], "references": [{"url": "https://github.com/typcn/Blogile/commit/cfec31043b562ffefe29fe01af6d3c5ed1bf8f7d", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217560", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217560", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/typcn/Blogile/commit/cfec31043b562ffefe29fe01af6d3c5ed1bf8f7d"}}