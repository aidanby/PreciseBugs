{"buggy_code": ["# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n### Changed\n- Exclude docs and demo from export and composer [#751](https://github.com/smarty-php/smarty/pull/751)\n\n### Fixed\n- PHP 8.1 deprecation notices in demo/plugins/cacheresource.pdo.php [#706](https://github.com/smarty-php/smarty/issues/706)\n- PHP 8.1 deprecation notices in truncate modifier [#699](https://github.com/smarty-php/smarty/issues/699)\n- Math equation `max(x, y)` didn't work anymore [#721](https://github.com/smarty-php/smarty/issues/721)\n- Fix PHP 8.1 deprecated warning when calling rtrim [#743](https://github.com/smarty-php/smarty/pull/743)\n- PHP 8.1: fix deprecation in escape modifier [#727](https://github.com/smarty-php/smarty/pull/727)\n\n## [4.1.0] - 2022-02-06\n\n### Added\n- PHP8.1 compatibility [#713](https://github.com/smarty-php/smarty/pull/713)\n\n## [4.0.4] - 2022-01-18\n\n### Fixed\n- Fixed illegal characters bug in math function security check [#702](https://github.com/smarty-php/smarty/issues/702)\n\n## [4.0.3] - 2022-01-10\n\n### Security\n- Prevent evasion of the `static_classes` security policy. This addresses CVE-2021-21408\n\n## [4.0.2] - 2022-01-10\n\n### Security\n- Prevent arbitrary PHP code execution through maliciously crafted expression for the math function. This addresses CVE-2021-29454\n\n## [4.0.1] - 2022-01-09\n\n### Security\n- Rewrote the mailto function to not use `eval` when encoding with javascript\n\n## [4.0.0] - 2021-11-25\n\n## [4.0.0-rc.0] - 2021-10-13\n\n### Added\n- You can now use `$smarty->muteUndefinedOrNullWarnings()` to activate convert warnings about undefined or null template vars to notices when running PHP8\n\n### Changed\n- Switch CI from Travis to Github CI\n- Updated unit tests to avoid skipped and risky test warnings\n\n### Removed\n- Dropped support for PHP7.0 and below, so Smarty now requires PHP >=7.1\n- Dropped support for php asp tags in templates (removed from php since php7.0)\n- Dropped deprecated API calls that where only accessible through SmartyBC\n- Dropped support for {php} and {include_php} tags and embedded PHP in templates. Embedded PHP will now be passed through as is.\n- Removed all PHP_VERSION_ID and compare_version checks and conditional code blocks that are now no longer required\n- Dropped deprecated SMARTY_RESOURCE_CHAR_SET and SMARTY_RESOURCE_DATE_FORMAT constants\n- Dropped deprecated Smarty::muteExpectedErrors and Smarty::unmuteExpectedErrors API methods\n- Dropped deprecated $smarty->getVariable() method. Use $smarty->getTemplateVars() instead.\n- $smarty->registerResource() no longer accepts an array of callback functions\n\n## [3.1.40] - 2021-10-13\n\n### Changed\n- modifier escape now triggers a E_USER_NOTICE when an unsupported escape type is used https://github.com/smarty-php/smarty/pull/649\n\n### Security\n- More advanced javascript escaping to handle https://html.spec.whatwg.org/multipage/scripting.html#restrictions-for-contents-of-script-elements thanks to m-haritonov\n\n## [3.1.39] - 2021-02-17\n\n### Security\n- Prevent access to `$smarty.template_object` in sandbox mode. This addresses CVE-2021-26119.\n- Fixed code injection vulnerability by using illegal function names in `{function name='blah'}{/function}`. This addresses CVE-2021-26120.\n\n## [3.1.38] - 2021-01-08\n\n### Fixed\n- Smarty::SMARTY_VERSION wasn't updated https://github.com/smarty-php/smarty/issues/628\n\n## [3.1.37] - 2021-01-07\n\n### Changed\n- Changed error handlers and handling of undefined constants for php8-compatibility (set $errcontext argument optional) https://github.com/smarty-php/smarty/issues/605\n- Changed expected error levels in unit tests for php8-compatibility\n- Travis unit tests now run for all php versions >= 5.3, including php8\n- Travis runs on Xenial where possible\n\n### Fixed\n- PHP5.3 compatibility fixes\n- Brought lexer source functionally up-to-date with compiled version\n\n## [3.1.36] - 2020-04-14\n\n### Fixed\n - Smarty::SMARTY_VERSION wasn't updated in v3.1.35 https://github.com/smarty-php/smarty/issues/584\n\n## [3.1.35] - 2020-04-14\n - remove whitespaces after comments https://github.com/smarty-php/smarty/issues/447\n - fix foreachelse on arrayiterators https://github.com/smarty-php/smarty/issues/506\n - fix files contained in git export archive for package maintainers https://github.com/smarty-php/smarty/issues/325\n - throw SmartyException when setting caching attributes for cacheable plugin https://github.com/smarty-php/smarty/issues/457\n - fix errors that occured where isset was replaced with null check such as https://github.com/smarty-php/smarty/issues/453\n - unit tests are now in the repository\n\n## 3.1.34 release - 05.11.2019\n13.01.2020\n - fix typo in exception message (JercSi)\n - fix typehint warning with callable (bets4breakfast)\n - add travis badge and compatability info to readme (matks)\n - fix stdClass cast when compiling foreach (carpii)\n - fix wrong set/get methods for memcached (IT-Experte)\n - fix pborm assigning value to object variables in smarty_internal_compile_assign (Hunman)\n - exclude error_reporting.ini from git export (glensc)\n\n## 3.1.34-dev-6 -\n30.10.2018\n - bugfix a nested subblock in an inheritance child template was not replace by\n   outer level block with same name in same child template https://github.com/smarty-php/smarty/issues/500\n\n29.10.2018\n - bugfix Smarty::$php_handling == PHP_PASSTHRU (default) did eat the \"\\n\" (newline) character if it did directly followed\n   a PHP tag like \"?>\" or other https://github.com/smarty-php/smarty/issues/501\n\n14.10.2018\n - bugfix autoloader exit shortcut https://github.com/smarty-php/smarty/issues/467\n\n11.10.2018\n - bugfix {insert} not works when caching is enabled and included template is present\n   https://github.com/smarty-php/smarty/issues/496\n - bugfix in date-format modifier; NULL at date string or default_date did not produce correct output\n   https://github.com/smarty-php/smarty/pull/458\n\n09.10.2018\n - bugfix fix of 26.8.2017 https://github.com/smarty-php/smarty/issues/327\n   modifier is applied to sum expression https://github.com/smarty-php/smarty/issues/491\n - bugfix indexed arrays could not be defined \"array(...)\"\"\n\n18.09.2018\n  - bugfix large plain text template sections without a Smarty tag > 700kB could\n    could fail in version 3.1.32 and 3.1.33 because PHP preg_match() restrictions\n    https://github.com/smarty-php/smarty/issues/488\n\n## 3.1.33 release - 12.09.2018\n## 3.1.33-dev-12 -\n03.09.2018\n  - bugfix {foreach} using new style property access like {$item@property} on\n    Smarty 2 style named foreach loop could produce errors https://github.com/smarty-php/smarty/issues/484\n\n31.08.2018\n  - bugfix some custom left and right delimiters like '{^' '^}' did not work\n    https://github.com/smarty-php/smarty/issues/450 https://github.com/smarty-php/smarty/pull/482\n\n  - reformating for PSR-2 coding standards https://github.com/smarty-php/smarty/pull/483\n\n  - bugfix on Windows absolute filepathes did fail if the drive letter was followed by a linux DIRECTORY_SEPARATOR\n    like C:/  at Smarty > 3.1.33-dev-5 https://github.com/smarty-php/smarty/issues/451\n\n  - PSR-2 code style fixes for config and template file Lexer/Parser generated with\n    the Smarty Lexer/Parser generator from https://github.com/smarty-php/smarty-lexer\n    https://github.com/smarty-php/smarty/pull/483\n\n26.08.2018\n  - bugfix/enhancement {capture} allow variable as capture block name in Smarty special variable\n    like $smarty.capture.$foo https://github.com/smarty-php/smarty/issues/478 https://github.com/smarty-php/smarty/pull/481\n\n## 3.1.33-dev-6 -\n19.08.2018\n  - fix PSR-2 coding standards and PHPDoc blocks https://github.com/smarty-php/smarty/pull/452\n    https://github.com/smarty-php/smarty/pull/475\n    https://github.com/smarty-php/smarty/pull/473\n  - bugfix PHP5.2 compatibility https://github.com/smarty-php/smarty/pull/472\n\n## 3.1.33-dev-4 -\n17.05.2018\n - bugfix strip-block produces different output in Smarty v3.1.32 https://github.com/smarty-php/smarty/issues/436\n - bugfix Smarty::compileAllTemplates ignores `$extension` parameter https://github.com/smarty-php/smarty/issues/437\n   https://github.com/smarty-php/smarty/pull/438\n - improvement do not compute total property in {foreach} if not needed https://github.com/smarty-php/smarty/issues/443\n - bugfix  plugins may not be loaded when setMergeCompiledIncludes is true https://github.com/smarty-php/smarty/issues/435\n\n26.04.2018\n - bugfix  regarding Security Vulnerability did not solve the problem under Linux.\n   Security issue CVE-2018-16831\n\n## 3.1.32 - (24.04.2018)\n24.04.2018\n - bugfix  possible Security Vulnerability in Smarty_Security class.\n\n26.03.2018\n - bugfix plugins may not be loaded if {function} or {block} tags are executed in nocache mode\n   https://github.com/smarty-php/smarty/issues/371\n\n26.03.2018\n - new feature {parent} =  {$smarty.block.parent} {child} =  {$smarty.block.child}\n\n23.03.2018\n - bugfix preg_replace could fail on large content resulting in a blank page https://github.com/smarty-php/smarty/issues/417\n\n21.03.2018\n - bugfix {$smarty.section...} used outside {section}{/section} showed incorrect values if {section}{/section} was called inside\n   another loop https://github.com/smarty-php/smarty/issues/422\n - bugfix short form of {section} attributes did not work https://github.com/smarty-php/smarty/issues/428\n\n17.03.2018\n - improvement Smarty::compileAllTemplates() exit with a non-zero status code if max errors is reached https://github.com/smarty-php/smarty/pull/402\n\n16.03.2018\n - bugfix extends resource did not work with user defined left/right delimiter https://github.com/smarty-php/smarty/issues/419\n\n22.11.2017\n - bugfix {break} and {continue} could fail if {foreach}{/foreach} did contain other\n   looping tags like {for}, {section} and {while} https://github.com/smarty-php/smarty/issues/323\n\n20.11.2017\n  - bugfix rework of newline spacing between tag code and template text.\n    now again identical with Smarty2 (forum topic 26878)\n  - replacement of \" by '\n\n05.11.2017\n  - lexer/parser optimization\n  - code cleanup and optimizations\n  - bugfix {$smarty.section.name.loop} used together with {$smarty.section.name.total} could produce\n    wrong results (forum topic 27041)\n\n26.10.2017\n  - bugfix Smarty version was  not filled in header comment of compiled and cached  files\n  - optimization replace internal Smarty::$ds property by DIRECTORY_SEPARATOR\n  - deprecate functions Smarty::muteExpectedErrors() and Smarty::unmuteExpectedErrors()\n    as Smarty does no longer use error suppression like @filemtime().\n    for backward compatibility code is moved from Smarty class to an external class and still can be\n    called.\n  - correction of PHPDoc blocks\n  - minor code cleanup\n\n21.10.2017\n  - bugfix custom delimiters could fail since modification of  version 3.1.32-dev-23\n    https://github.com/smarty-php/smarty/issues/394\n\n18.10.2017\n  - bugfix fix implementation of unclosed block tag in double quoted string of 12.10.2017\n    https://github.com/smarty-php/smarty/issues/396 https://github.com/smarty-php/smarty/issues/397\n    https://github.com/smarty-php/smarty/issues/391 https://github.com/smarty-php/smarty/issues/392\n\n12.10.2017\n  - bugfix $smarty.block.child and $smarty.block.parent could not be used like any\n    $smarty special variable https://github.com/smarty-php/smarty/issues/393\n  - unclosed block tag in double quoted string must throw compiler exception.\n     https://github.com/smarty-php/smarty/issues/391 https://github.com/smarty-php/smarty/issues/392\n\n07.10.2017\n  - bugfix modification of 9.8.2017 did fail on some recursive\n    tag nesting. https://github.com/smarty-php/smarty/issues/389\n\n26.8.2017\n  - bugfix chained modifier failed when last modifier parameter is a signed value\n    https://github.com/smarty-php/smarty/issues/327\n  - bugfix templates filepath with multibyte characters did not work\n    https://github.com/smarty-php/smarty/issues/385\n  - bugfix {make_nocache} did display code if the template did not contain other nocache code\n    https://github.com/smarty-php/smarty/issues/369\n\n09.8.2017\n  - improvement repeated delimiter like {{ and }} will be treated as literal\n    https://groups.google.com/forum/#!topic/smarty-developers/h9r82Bx4KZw\n\n05.8.2017\n  - bugfix wordwrap modifier could fail if used in nocache code.\n    converted plugin file shared.mb_wordwrap.php into modifier.mb_wordwrap.php\n  - cleanup of _getSmartyObj()\n\n31.7.2017\n  - Call clearstatcache() after mkdir() failure https://github.com/smarty-php/smarty/pull/379\n\n30.7.2017\n  - rewrite mkdir() bugfix to retry automatically see https://github.com/smarty-php/smarty/pull/377\n    https://github.com/smarty-php/smarty/pull/379\n\n21.7.2017\n  - security possible PHP code injection on custom resources at display() or fetch()\n    calls if the resource does not sanitize the template name\n  - bugfix fix 'mkdir(): File exists' error on create directory from parallel\n    processes https://github.com/smarty-php/smarty/pull/377\n  - bugfix solve preg_match() hhvm parameter problem https://github.com/smarty-php/smarty/pull/372\n\n27.5.2017\n  - bugfix change compiled code for registered function and modifiers to called as callable to allow closures\n    https://github.com/smarty-php/smarty/pull/368, https://github.com/smarty-php/smarty/issues/273\n  - bugfix https://github.com/smarty-php/smarty/pull/368 did break the default plugin handler\n  - improvement replace phpversion() by PHP_VERSION constant.\n    https://github.com/smarty-php/smarty/pull/363\n\n21.5.2017\n  - performance store flag for already required shared plugin functions in static variable or\n    Smarty's $_cache to improve performance when plugins are often called\n    https://github.com/smarty-php/smarty/commit/51e0d5cd405d764a4ea257d1bac1fb1205f74528#commitcomment-22280086\n  - bugfix remove special treatment of classes implementing ArrayAccess in {foreach}\n    https://github.com/smarty-php/smarty/issues/332\n  - bugfix remove deleted files by clear_cache() and clear_compiled_template() from\n    ACP cache if present, add some is_file() checks to avoid possible warnings on filemtime()\n    caused by above functions.\n    https://github.com/smarty-php/smarty/issues/341\n  - bugfix version 3.1.31 did fail under PHP 5.2\n    https://github.com/smarty-php/smarty/issues/365\n\n19.5.2017\n  - change properties $accessMap and $obsoleteProperties from private to protected\n    https://github.com/smarty-php/smarty/issues/351\n  - new feature The named capture buffers can now be accessed also as array\n    See NEWS_FEATURES.txt https://github.com/smarty-php/smarty/issues/366\n  - improvement check if ini_get() and ini_set() not disabled\n    https://github.com/smarty-php/smarty/pull/362\n\n24.4.2017\n  - fix spelling https://github.com/smarty-php/smarty/commit/e3eda8a5f5653d8abb960eb1bc47e3eca679b1b4#commitcomment-21803095\n\n17.4.2017\n  - correct generated code on empty() and isset() call, observe change PHP behaviour since PHP 5.5\n    https://github.com/smarty-php/smarty/issues/347\n\n14.4.2017\n  - merge pull requests https://github.com/smarty-php/smarty/pull/349, https://github.com/smarty-php/smarty/pull/322 and    https://github.com/smarty-php/smarty/pull/337 to fix spelling and annotation\n\n13.4.2017\n  - bugfix array_merge() parameter should be checked https://github.com/smarty-php/smarty/issues/350\n\n## 3.1.31 - (14.12.2016)\n  23.11.2016\n   - move template object cache into static variables\n\n  19.11.2016\n  - bugfix inheritance root child templates containing nested {block}{/block} could call sub-bock content from parent\n    template https://github.com/smarty-php/smarty/issues/317\n  - change version checking\n\n 11.11.2016\n  - bugfix when Smarty is using a cached template object on Smarty::fetch() or Smarty::isCached() the inheritance data\n    must be removed https://github.com/smarty-php/smarty/issues/312\n  - smaller speed optimization\n\n 08.11.2016\n  - add bootstrap file to load and register Smarty_Autoloader. Change composer.json to make it known to composer\n\n 07.11.2016\n  - optimization of lexer speed https://github.com/smarty-php/smarty/issues/311\n\n 27.10.2016\n  - bugfix template function definitions array has not been cached between Smarty::fetch() and Smarty::display() calls\n    https://github.com/smarty-php/smarty/issues/301\n\n 23.10.2016\n  - improvement/bugfix when Smarty::fetch() is called on a template object the inheritance and tplFunctions property\n    should be copied to the called template object\n\n 21.10.2016\n  - bugfix for compile locking touched timestamp of old compiled file was not restored on compilation error https://github.com/smarty-php/smarty/issues/308\n\n 20.10.2016\n  - bugfix nocache code was not removed in cache file when subtemplate did contain PHP short tags in text but no other\n    nocache code https://github.com/smarty-php/smarty/issues/300\n\n 19.10.2016\n  - bugfix {make_nocache $var} did fail when variable value did contain '\\' https://github.com/smarty-php/smarty/issues/305\n  - bugfix {make_nocache $var} remove spaces from variable value https://github.com/smarty-php/smarty/issues/304\n\n 12.10.2016\n  - bugfix {include} with template names including variable or constants could fail after bugfix from\n     28.09.2016 https://github.com/smarty-php/smarty/issues/302\n\n 08.10.2016\n  - optimization move runtime extension for template functions into Smarty objects\n\n 29.09.2016\n  - improvement new Smarty::$extends_recursion property to disable execution of {extends} in templates called by extends resource\n     https://github.com/smarty-php/smarty/issues/296\n\n 28.09.2016\n  - bugfix the generated code for calling a subtemplate must pass the template resource name in single quotes https://github.com/smarty-php/smarty/issues/299\n  - bugfix nocache hash was not removed for <?xml ?> tags in subtemplates https://github.com/smarty-php/smarty/issues/300\n\n 27.09.2016\n  - bugfix when Smarty does use an internally cached template object on Smarty::fetch() calls\n           the template and config variables must be cleared https://github.com/smarty-php/smarty/issues/297\n\n 20.09.2016\n  - bugfix some $smarty special template variables are no longer accessed as real variable.\n    using them on calls like {if isset($smarty.foo)} or {if empty($smarty.foo)} will fail\n    http://www.smarty.net/forums/viewtopic.php?t=26222\n  - temporary fix for https://github.com/smarty-php/smarty/issues/293 main reason still under investigation\n  - improvement new tags {block_parent} {block_child} in template inheritance\n\n 19.09.2016\n  - optimization clear compiled and cached folder completely on detected version change\n  - cleanup convert cache resource file method clear into runtime extension\n\n 15.09.2016\n  - bugfix assigning a variable in if condition by function like {if $value = array_shift($array)} the function got called twice https://github.com/smarty-php/smarty/issues/291\n  - bugfix function plugins called with assign attribute like {foo assign='bar'} did not output returned content because\n           because assumption was made that it was assigned to a variable https://github.com/smarty-php/smarty/issues/292\n  - bugfix calling $smarty->isCached() on a not existing cache file with $smarty->cache_locking = true; could cause a 10 second delay http://www.smarty.net/forums/viewtopic.php?t=26282\n  - improvement make Smarty::clearCompiledTemplate() on custom resource independent from changes of templateId computation\n\n 11.09.2016\n  - improvement {math} misleading E_USER_WARNING messages when parameter value = null https://github.com/smarty-php/smarty/issues/288\n  - improvement move often used code snippets into methods\n  - performance Smarty::configLoad() did load unneeded template source object\n\n 09.09.2016\n  - bugfix/optimization {foreach} did not execute the {foreachelse} when iterating empty objects https://github.com/smarty-php/smarty/pull/287\n  - bugfix {foreach} must keep the @properties when restoring a saved $item variable as the properties might be used outside {foreach} https://github.com/smarty-php/smarty/issues/267\n  - improvement {foreach} observe {break n} and {continue n} nesting levels when restoring saved $item and $key variables\n\n 08.09.2016\n  - bugfix implement wrapper for removed method getConfigVariable() https://github.com/smarty-php/smarty/issues/286\n\n 07.09.2016\n  - bugfix using nocache like attribute with value true like {plugin nocache=true} did not work https://github.com/smarty-php/smarty/issues/285\n  - bugfix uppercase TRUE, FALSE and NULL did not work when security was enabled https://github.com/smarty-php/smarty/issues/282\n  - bugfix when {foreach} was looping over an object the total property like {$item@total} did always return 1 https://github.com/smarty-php/smarty/issues/281\n  - bugfix {capture}{/capture} did add in 3.1.30 unintended additional blank lines https://github.com/smarty-php/smarty/issues/268\n\n 01.09.2016\n  - performance require_once should be called only once for shared plugins https://github.com/smarty-php/smarty/issues/280\n\n 26.08.2016\n  - bugfix change of 23.08.2016 failed on linux when use_include_path = true\n\n 23.08.2016\n  - bugfix remove constant DS as shortcut for DIRECTORY_SEPARATOR as the user may have defined it to something else https://github.com/smarty-php/smarty/issues/277\n\n 20.08-2016\n  - bugfix {config_load ... scope=\"global\"} shall not throw an arror but fallback to scope=\"smarty\" https://github.com/smarty-php/smarty/issues/274\n  - bugfix {make_nocache} failed when using composer autoloader https://github.com/smarty-php/smarty/issues/275\n\n 14.08.2016\n  - bugfix $smarty_>debugging = true; did E_NOTICE messages when {eval} tag was used https://github.com/smarty-php/smarty/issues/266\n  - bugfix Class 'Smarty_Internal_Runtime_ValidateCompiled' not found when upgrading from some older Smarty versions with existing\n           compiled or cached template files https://github.com/smarty-php/smarty/issues/269\n  - optimization remove unneeded call to update acopes when {assign} scope and template scope was local (default)\n\n## 3.1.30 - (07.08.2016)\n\n 07.08.2016\n  - bugfix update of 04.08.2016 was incomplete\n\n 05.08.2016\n  - bugfix compiling of templates failed when the Smarty delimiter did contain '/' https://github.com/smarty-php/smarty/issues/264\n  - updated error checking at template and config default handler\n\n 04.08.2016\n  - improvement move template function source parameter into extension\n\n 26.07.2016\n  - optimization unneeded loading of compiled resource\n\n 24.07.2016\n  - regression this->addPluginsDir('/abs/path/to/dir') adding absolute path without trailing '/' did fail https://github.com/smarty-php/smarty/issues/260\n\n 23.07.2016\n  - bugfix setTemplateDir('/') and setTemplateDir('') did create wrong absolute filepath https://github.com/smarty-php/smarty/issues/245\n  - optimization of filepath normalization\n  - improvement remove double function declaration in plugin shared.escape_special_cars.php https://github.com/smarty-php/smarty/issues/229\n\n 19.07.2016\n  - bugfix multiple {include} with relative filepath within {block}{/block} could fail https://github.com/smarty-php/smarty/issues/246\n  - bugfix {math} shell injection vulnerability patch provided by Tim Weber\n\n 18.07.2016\n  - bugfix {foreach} if key variable and item@key attribute have been used both the key variable was not updated https://github.com/smarty-php/smarty/issues/254\n  - bugfix modifier on plugins like {plugin|modifier ... } did fail when the plugin does return an array https://github.com/smarty-php/smarty/issues/228\n  - bugfix avoid opcache_invalidate to result in ErrorException when opcache.restrict_api is not empty https://github.com/smarty-php/smarty/pull/244\n  - bugfix multiple {include} with relative filepath within {block}{/block} could fail https://github.com/smarty-php/smarty/issues/246\n\n 14.07.2016\n  - bugfix wrong parameter on compileAllTemplates() and compileAllConfig() https://github.com/smarty-php/smarty/issues/231\n\n 13.07.2016\n  - bugfix PHP 7 compatibility on registered compiler plugins https://github.com/smarty-php/smarty/issues/241\n  - update testInstall() https://github.com/smarty-php/smarty/issues/248https://github.com/smarty-php/smarty/issues/248\n  - bugfix enable debugging could fail when template objects did already exists https://github.com/smarty-php/smarty/issues/237\n  - bugfix template function data should be merged when loading subtemplate https://github.com/smarty-php/smarty/issues/240\n  - bugfix wrong parameter on compileAllTemplates() https://github.com/smarty-php/smarty/issues/231\n\n 12.07.2016\n  - bugfix {foreach} item variable must be created also on empty from array https://github.com/smarty-php/smarty/issues/238 and https://github.com/smarty-php/smarty/issues/239\n  - bugfix enableSecurity() must init cache flags https://github.com/smarty-php/smarty/issues/247\n\n 27.05.2016\n  - bugfix/improvement of compileAlltemplates() follow symlinks in template folder (PHP >= 5.3.1) https://github.com/smarty-php/smarty/issues/224\n      clear internal cache and expension handler for each template to avoid possible conflicts https://github.com/smarty-php/smarty/issues/231\n\n 16.05.2016\n  - optimization {foreach} compiler and processing\n  - broken PHP 5.3 and 5.4 compatibility\n\n 15.05.2016\n  - optimization and cleanup of resource code\n\n 10.05.2016\n  - optimization of inheritance processing\n\n 07.05.2016\n  -bugfix Only variables should be assigned by reference https://github.com/smarty-php/smarty/issues/227\n\n 02.05.2016\n  - enhancement {block} tag names can now be variable https://github.com/smarty-php/smarty/issues/221\n\n 01.05.2016\n  - bugfix same relative filepath at {include} called from template in different folders could display wrong sub-template\n\n 29.04.2016\n  - bugfix {strip} remove space on linebreak between html tags https://github.com/smarty-php/smarty/issues/213\n\n 24.04.2016\n  - bugfix nested {include} with relative file path could fail when called in {block} ... {/block} https://github.com/smarty-php/smarty/issues/218\n\n 14.04.2016\n  - bugfix special variable {$smarty.capture.name} was not case sensitive on name https://github.com/smarty-php/smarty/issues/210\n  - bugfix the default template handler must calculate the source uid https://github.com/smarty-php/smarty/issues/205\n\n 13.04.2016\n  - bugfix template inheritance status must be saved when calling sub-templates https://github.com/smarty-php/smarty/issues/215\n\n 27.03.2016\n  - bugfix change of 11.03.2016 cause again {capture} data could not been seen in other templates with {$smarty.capture.name} https://github.com/smarty-php/smarty/issues/153\n\n 11.03.2016\n  - optimization of capture and security handling\n  - improvement $smarty->clearCompiledTemplate() should return on recompiled or uncompiled resources\n\n 10.03.2016\n  - optimization of resource processing\n\n 09.03.2016\n  - improvement rework of 'scope' attribute handling see see NEW_FEATURES.txt https://github.com/smarty-php/smarty/issues/194\n    https://github.com/smarty-php/smarty/issues/186 https://github.com/smarty-php/smarty/issues/179\n  - bugfix correct Autoloader update of 2.3.2014 https://github.com/smarty-php/smarty/issues/199\n\n 04.03.2016\n  - bugfix change from 01.03.2016 will cause $smarty->isCached(..) failure if called multiple time for same template\n    (forum topic 25935)\n\n 02.03.2016\n  - revert autoloader optimizations because of unexplainable warning when using plugins https://github.com/smarty-php/smarty/issues/199\n\n 01.03.2016\n  - bugfix template objects must be cached on $smarty->fetch('foo.tpl) calls incase the template is fetched\n    multiple times (forum topic 25909)\n\n 25.02.2016\n  - bugfix wrong _realpath with 4 or more parent-directories https://github.com/smarty-php/smarty/issues/190\n  - optimization of _realpath\n  - bugfix instanceof expression in template code must be treated as value https://github.com/smarty-php/smarty/issues/191\n\n 20.02.2016\n  - bugfix {strip} must keep space between hmtl tags. Broken by changes of 10.2.2016 https://github.com/smarty-php/smarty/issues/184\n  - new feature/bugfix  {foreach}{section} add 'properties' attribute to force compilation of loop properties\n    see NEW_FEATURES.txt https://github.com/smarty-php/smarty/issues/189\n\n 19.02.2016\n  - revert output buffer flushing on display, echo content again because possible problems when PHP files had\n    characters (newline} after ?> at file end https://github.com/smarty-php/smarty/issues/187\n\n 14.02.2016\n  - new tag {make_nocache} read NEW_FEATURES.txt https://github.com/smarty-php/smarty/issues/110\n  - optimization of sub-template processing\n  - bugfix using extendsall as default resource and {include} inside {block} tags could produce unexpected results https://github.com/smarty-php/smarty/issues/183\n  - optimization of tag attribute compiling\n  - optimization make compiler tag object cache static for higher compilation speed\n\n 11.02.2016\n  - improvement added KnockoutJS comments to trimwhitespace outputfilter https://github.com/smarty-php/smarty/issues/82\n    https://github.com/smarty-php/smarty/pull/181\n\n 10.02.2016\n  - bugfix {strip} must keep space on output creating smarty tags within html tags https://github.com/smarty-php/smarty/issues/177\n  - bugfix wrong precedence on special if conditions like '$foo is ... by $bar' could cause wrong code https://github.com/smarty-php/smarty/issues/178\n  - improvement because of ambiguities the inline constant support has been removed from the $foo.bar syntax https://github.com/smarty-php/smarty/issues/149\n  - bugfix other {strip} error with output tags between hmtl https://github.com/smarty-php/smarty/issues/180\n\n 09.02.2016\n  - move some code from parser into compiler\n  - reformat all code for unique style\n  - update/bugfix scope attribute handling reworked. Read the newfeatures.txt file\n\n 05.02.2016\n  - improvement internal compiler changes\n\n 01.02.2016\n  - bugfix {foreach} compilation failed when $smarty->merge_compiled_includes = true and pre-filters are used.\n\n 29.01.2016\n  - bugfix implement replacement code for _tag_stack property https://github.com/smarty-php/smarty/issues/151\n\n 28.01.2016\n  - bugfix allow windows network filepath or wrapper (forum topic 25876) https://github.com/smarty-php/smarty/issues/170\n  - bugfix if fetch('foo.tpl') is called on a template object the $parent parameter should default to the calling template object https://github.com/smarty-php/smarty/issues/152\n\n 27.01.2016\n  - revert bugfix compiling {section} did create warning\n  - bugfix {$smarty.section.customer.loop} did throw compiler error https://github.com/smarty-php/smarty/issues/161\n    update of yesterdays fix\n  - bugfix string resource could inject code at {block} or inline subtemplates through PHP comments https://github.com/smarty-php/smarty/issues/157\t\t\n  - bugfix output filters did not observe nocache code flhttps://github.com/smarty-php/smarty/issues/154g https://github.com/smarty-php/smarty/issues/160\n  - bugfix {extends} with relative file path did not work https://github.com/smarty-php/smarty/issues/154\n    https://github.com/smarty-php/smarty/issues/158\n  - bugfix {capture} data could not been seen in other templates with {$smarty.capture.name} https://github.com/smarty-php/smarty/issues/153\n\n 26.01.2016\n  - improvement observe Smarty::$_CHARSET in debugging console https://github.com/smarty-php/smarty/issues/169\n  - bugfix compiling {section} did create warning\n  - bugfix {$smarty.section.customer.loop} did throw compiler error https://github.com/smarty-php/smarty/issues/161\n\n 02.01.2016\n  - update scope handling\n  - optimize block plugin compiler\n  - improvement runtime checks if registered block plugins are callable\n\n 01.01.2016\n  - remove Smarty::$resource_cache_mode property\n\n 31.12.2015\n  - optimization of {assign}, {if} and {while} compiled code\n\n 30.12.2015\n  - bugfix plugin names starting with \"php\" did not compile https://github.com/smarty-php/smarty/issues/147\n\n 29.12.2015\n  - bugfix Smarty::error_reporting was not observed when display() or fetch() was called on template objects https://github.com/smarty-php/smarty/issues/145\n\n 28.12.2015\n  - optimization of {foreach} code size and processing\n\n 27.12.2015\n  - improve inheritance code\n  - update external methods\n  - code fixes\n  - PHPdoc updates\n\n 25.12.2015\n  - compile {block} tag code and its processing into classes\n  - optimization replace hhvm extension by inline code\n  - new feature If ACP is enabled force an apc_compile_file() when compiled or cached template was updated\n\n 24.12.2015\n  - new feature Compiler does now observe the template_dir setting and will create separate compiled files if required\n  - bugfix post filter did fail on template inheritance https://github.com/smarty-php/smarty/issues/144\n\n 23.12.2015\n  - optimization move internal method decodeProperties back into template object\n  - optimization move subtemplate processing back into template object\n  - new feature Caching does now observe the template_dir setting and will create separate cache files if required\n\n 22.12.2015\n  - change $xxx_dir properties from private to protected in case Smarty class gets extended\n  - code optimizations\n\n 21.12.2015\n  - bugfix a filepath starting with '/' or '\\' on windows should normalize to the root dir\n    of current working drive https://github.com/smarty-php/smarty/issues/134\n  - optimization of filepath normalization\n  - bugfix {strip} must remove all blanks between html tags https://github.com/smarty-php/smarty/issues/136\n\n - 3.1.29 - (21.12.2015)\n 21.12.2015\n  - optimization improve speed of filetime checks on extends and extendsall resource\n\n 20.12.2015\n  - bugfix failure when the default resource type was set to 'extendsall' https://github.com/smarty-php/smarty/issues/123\n  - update compilation of Smarty special variables\n  - bugfix add addition check for OS type on normalization of file path https://github.com/smarty-php/smarty/issues/134\n  - bugfix the source uid of the extendsall resource must contain $template_dir settings https://github.com/smarty-php/smarty/issues/123\n\n 19.12.2015\n  - bugfix using $smarty.capture.foo in expressions could fail https://github.com/smarty-php/smarty/pull/138\n  - bugfix broken PHP 5.2 compatibility https://github.com/smarty-php/smarty/issues/139\n  - remove no longer used code\n  - improvement make sure that compiled and cache templates never can contain a trailing '?>?\n\n 18.12.2015\n  - bugfix regression when modifier parameter was followed by math https://github.com/smarty-php/smarty/issues/132\n\n 17.12.2015\n  - bugfix {$smarty.capture.nameFail} did lowercase capture name https://github.com/smarty-php/smarty/issues/135\n  - bugfix using {block append/prepend} on same block in multiple levels of inheritance templates could fail (forum topic 25827)\n  - bugfix text content consisting of just a single '0' like in {if true}0{/if} was suppressed (forum topic 25834)\n\n 16.12.2015\n  - bugfix {foreach} did fail if from atrribute is a Generator class https://github.com/smarty-php/smarty/issues/128\n  - bugfix direct access $smarty->template_dir = 'foo'; should call Smarty::setTemplateDir() https://github.com/smarty-php/smarty/issues/121\n\n 15.12.2015\n  - bugfix  {$smarty.cookies.foo} did return the $_COOKIE array not the 'foo' value https://github.com/smarty-php/smarty/issues/122\n  - bugfix  a call to clearAllCache() and other should clear all internal template object caches (forum topic 25828)\n\n 14.12.2015\n  - bugfix  {$smarty.config.foo} broken in 3.1.28 https://github.com/smarty-php/smarty/issues/120\n  - bugfix  multiple calls of {section} with same name droped E_NOTICE error https://github.com/smarty-php/smarty/issues/118\n\n - 3.1.28 - (13.12.2015)\n 13.12.2015\n  - bugfix {foreach} and {section} with uppercase characters in name attribute did not work (forum topic 25819)\n  - bugfix $smarty->debugging_ctrl = 'URL' did not work (forum topic 25811)\n  - bugfix Debug Console could display incorrect data when using subtemplates\n\n 09.12.2015\n  - bugfix Smarty did fail under PHP 7.0.0 with use_include_path = true;\n\n 09.12.2015\n  - bugfix {strip} should exclude some html tags from stripping, related to fix for https://github.com/smarty-php/smarty/issues/111\n\n 08.12.2015\n  - bugfix internal template function data got stored in wrong compiled file https://github.com/smarty-php/smarty/issues/114\n\n 05.12.2015\n  -bugfix {strip} should insert a single space https://github.com/smarty-php/smarty/issues/111\n\n 25.11.2015\n  -bugfix a left delimter like '[%' did fail on [%$var_[%$variable%]%] (forum topic 25798)\n\n 02.11.2015\n  - bugfix {include} with variable file name like {include file=\"foo_`$bar`.tpl\"} did fail in 3.1.28-dev https://github.com/smarty-php/smarty/issues/102\n\n 01.11.2015\n  - update config file processing\n\n 31.10.2015\n  - bugfix add missing $trusted_dir property to SmartyBC class (forum topic 25751)\n\n 29.10.2015\n  - improve template scope handling\n\n 24.10.2015\n  - more optimizations of template processing\n  - bugfix Error when using {include} within {capture} https://github.com/smarty-php/smarty/issues/100\n\n 21.10.2015\n  - move some code into runtime extensions\n\n 18.10.2015\n  - optimize filepath normalization\n  - rework of template inheritance\n  - speed and size optimizations\n  - bugfix under HHVM temporary cache file must only be created when caches template was updated\n  - fix compiled code for new {block} assign attribute\n  - update code generated by template function call handler\n\n 18.09.2015\n  - bugfix {if $foo instanceof $bar} failed to compile if 2nd value is a variable https://github.com/smarty-php/smarty/issues/92\n\n 17.09.2015\n  - bugfix {foreach} first attribute was not correctly reset since commit 05a8fa2 of 02.08.2015 https://github.com/smarty-php/smarty/issues/90\n\n 16.09.2015\n  - update compiler by moving no longer needed properties, code optimizations and other\n\n 14.09.2015\n  - optimize autoloader\n  - optimize subtemplate handling\n  - update template inheritance processing\n  - move code of {call} processing back into Smarty_Internal_Template class\n  - improvement invalidate OPCACHE for cleared compiled and cached template files (forum topic 25557)\n  - bugfix unintended multiple debug windows (forum topic 25699)\n\n 30.08.2015\n  - size optimization move some runtime functions into extension\n  - optimize inline template processing\n  - optimization merge inheritance child and parent templates into one compiled template file\n\n 29.08.2015\n  - improvement convert template inheritance into runtime processing\n  - bugfix {$smarty.block.parent} did always reference the root parent block https://github.com/smarty-php/smarty/issues/68\n\n 23.08.2015\n  - introduce Smarty::$resource_cache_mode and cache template object of {include} inside loop\n  - load seldom used Smarty API methods dynamically to reduce memory footprint\n  - cache template object of {include} if same template is included several times\n  - convert debug console processing to object\n  - use output buffers for better performance and less memory usage\n  - optimize nocache hash processing\n  - remove not really needed properties\n  - optimize rendering\n  - move caching to Smarty::_cache\n  - remove properties with redundant content\n  - optimize Smarty::templateExists()\n  - optimize use_include_path processing\n  - relocate properties for size optimization\n  - remove redundant code\n  - bugfix compiling super globals like {$smarty.get.foo} did fail in the master branch https://github.com/smarty-php/smarty/issues/77\n\n 06.08.2015\n  - avoid possible circular object references caused by parser/lexer objects\n  - rewrite compileAll... utility methods\n  - commit several  internal improvements\n  - bugfix Smarty failed when compile_id did contain \"|\"\n\n 03.08.2015\n  - rework clear cache methods\n  - bugfix compileAllConfig() was broken since 3.1.22 because of the changes in config file processing\n  - improve getIncludePath() to return directory if no file was given\n\n 02.08.2015\n  - optimization and code cleanup of {foreach} and {section} compiler\n  - rework {capture} compiler\n\n 01.08.2015\n  - update DateTime object can be instance of DateTimeImmutable since PHP5.5 https://github.com/smarty-php/smarty/pull/75\n  - improvement show resource type and start of template source instead of uid on eval: and string: resource (forum topic 25630)\n\n 31.07.2015\n  - optimize {foreach} and {section} compiler\n\n 29.07.2015\n  - optimize {section} compiler for speed and size of compiled code\n\n 28.07.2015\n  - update for PHP 7 compatibility\n\n 26.07.2015\n  - improvement impement workaround for HHVM PHP incompatibillity https://github.com/facebook/hhvm/issues/4797\n\n 25.07.2015\n  - bugfix parser did hang on text starting <?something https://github.com/smarty-php/smarty/issues/74\n\n 20.07.2015\n  - bugfix config files got recompiled on each request\n  - improvement invalidate PHP 5.5 opcache for recompiled and cached templates  https://github.com/smarty-php/smarty/issues/72\n\n 12.07.2015\n  - optimize {extends} compilation\n\n 10.07.2015\n  - bugfix force file: resource in demo resource.extendsall.php\n\n 08.07.2015\n  - bugfix convert each word of class names to ucfirst in in compiler. (forum topic 25588)\n\n 07.07.2015\n  - improvement allow fetch() or display() called on a template object to get output from other template\n     like $template->fetch('foo.tpl') https://github.com/smarty-php/smarty/issues/70\n  - improvement Added $limit parameter to regex_replace modifier #71\n  - new feature multiple indices on file: resource\n\n 06.07.2015\n  - optimize {block} compilation\n  - optimization get rid of __get and __set in source object\n\n 01.07.2015\n  - optimize compile check handling\n  - update {foreach} compiler\n  - bugfix debugging console did not display string values containing \\n, \\r or \\t correctly https://github.com/smarty-php/smarty/issues/66\n  - optimize source resources\n\n 28.06.2015\n  - move $smarty->enableSecurity() into Smarty_Security class\n  - optimize security isTrustedResourceDir()\n  - move auto load filter methods into extension\n  - move $smarty->getTemplateVars() into extension\n  - move getStreamVariable() into extension\n  - move $smarty->append() and $smarty->appendByRef() into extension\n  - optimize autoloader\n  - optimize file path normalization\n  - bugfix PATH_SEPARATOR was replaced by mistake in autoloader\n  - remove redundant code\n\n 27.06.2015\n  - bugfix resolve naming conflict between custom Smarty delimiter '<%' and PHP ASP tags https://github.com/smarty-php/smarty/issues/64\n  - update $smarty->_realpath for relative path not starting with './'\n  - update Smarty security with new realpath handling\n  - update {include_php} with new realpath handling\n  - move $smarty->loadPlugin() into extension\n  - minor compiler optimizations\n  - bugfix allow function plugins with name ending with 'close' https://github.com/smarty-php/smarty/issues/52\n  - rework of $smarty->clearCompiledTemplate() and move it to its own extension\n\n 19.06.2015\n  - improvement allow closures as callback at $smarty->registerFilter() https://github.com/smarty-php/smarty/issues/59\n\n - 3.1.27- (18.06.2015)\n 18.06.2015\n  - bugfix another update on file path normalization failed on path containing something like \"/.foo/\" https://github.com/smarty-php/smarty/issues/56\n\n - 3.1.26- (18.06.2015)\n 18.06.2015\n  - bugfix file path normalization failed on path containing something like \"/.foo/\" https://github.com/smarty-php/smarty/issues/56\n\n 17.06.2015\n  - bugfix calling a plugin with nocache option but no other attributes like {foo nocache} caused call to undefined function https://github.com/smarty-php/smarty/issues/55\n\n - 3.1.25- (15.06.2015)\n 15.06.2015\n  - optimization of smarty_cachereource_keyvaluestore.php code\n\n 14.06.2015\n  - bugfix a relative sub template path could fail if template_dir path did contain /../ https://github.com/smarty-php/smarty/issues/50\n  - optimization rework of path normalization\n  - bugfix an output tag with variable, modifier followed by an operator like {$foo|modifier+1} did fail https://github.com/smarty-php/smarty/issues/53\n\n 13.06.2015\n  - bugfix a custom cache resource using smarty_cachereource_keyvaluestore.php did fail if php.ini mbstring.func_overload = 2 (forum topic 25568)\n\n 11.06.2015\n  - bugfix the lexer could hang on very large quoted strings (forum topic 25570)\n\n 08.06.2015\n  - bugfix using {$foo} as array index like $bar.{$foo} or in double quoted string like \"some {$foo} thing\" failed https://github.com/smarty-php/smarty/issues/49\n\n 04.06.2015\n  - bugfix possible error message on unset() while compiling {block} tags https://github.com/smarty-php/smarty/issues/46\n\n 01.06.2015\n  - bugfix <?xml ... ?> including template variables broken  since 3.1.22 https://github.com/smarty-php/smarty/issues/47\n\n 27.05.2015\n  - bugfix {include} with variable file name must not create by default individual cache file (since 3.1.22) https://github.com/smarty-php/smarty/issues/43\n\n 24.05.2015\n  - bugfix if condition string 'neq' broken due to a typo https://github.com/smarty-php/smarty/issues/42\n\n - 3.1.24- (23.05.2015)\n 23.05.2015\n  - improvement on php_handling to allow very large PHP sections, better error handling\n  - improvement allow extreme large comment sections (forum 25538)\n\n 21.05.2015\n  - bugfix broken PHP 5.2 compatibility when compiling <?php tags https://github.com/smarty-php/smarty/issues/40\n  - bugfix named {foreach} comparison like $smarty.foreach.foobar.index > 1 did compile into wrong code https://github.com/smarty-php/smarty/issues/41\n\n 19.05.2015\n  - bugfix compiler did overwrite existing variable value when setting the nocache attribute https://github.com/smarty-php/smarty/issues/39\n  - bugfix output filter trimwhitespace could run into the pcre.backtrack_limit on large output (code.google issue 220)\n  - bugfix compiler could run into the pcre.backtrack_limit on larger comment or {php} tag sections (forum 25538)\n\n 18.05.2015\n  - improvement introduce shortcuts in lexer/parser rules for most frequent terms for higher\n    compilation speed\n\n 16.05.2015\n  - bugfix {php}{/php} did work just for single lines https://github.com/smarty-php/smarty/issues/33\n  - improvement remove not needed ?><?php transitions from compiled code\n  - improvement reduce number of lexer tokens on operators and if conditions\n  - improvement higher compilation speed by modified lexer/parser generator at \"smarty/smarty-lexer\"\n\n 13.05.2015\n  - improvement remove not needed ?><?php transitions from compiled code\n  - improvement of debugging:\n      - use fresh Smarty object to display the debug console because of possible problems when the Smarty\n        was extended or Smarty properties had been modified in the class source\n      - display Smarty version number\n      - Truncate lenght of Origin display and extend strin value display to 80 character\n  - bugfix in Smarty_Security  'nl2br' should be a trusted modifier, not PHP function (code.google issue 223)\n\n 12.05.2015\n  - bugfix {$smarty.constant.TEST} did fail  on undefined constant https://github.com/smarty-php/smarty/issues/28\n  - bugfix access to undefined config variable like {#undef#} did fail https://github.com/smarty-php/smarty/issues/29\n  - bugfix in nested {foreach} saved item attributes got overwritten https://github.com/smarty-php/smarty/issues/33\n\n - 3.1.23 - (12.05.2015)\n 12.05.2015\n  - bugfix of smaller performance issue introduce in 3.1.22 when caching is enabled\n  - bugfix missig entry for smarty-temmplate-config in autoloader\n\n - 3.1.22 - tag was deleted because 3.1.22 did fail caused by the missing entry for smarty-temmplate-config in autoloader\n 10.05.2015\n  - bugfix custom cache resource did not observe compile_id and cache_id when $cache_locking == true\n  - bugfix cache lock was not handled correctly after timeout when $cache_locking == true\n  - improvement added constants for $debugging\n\n 07.05.2015\n  - improvement of the debugging console. Read NEW_FEATURES.txt\n  - optimization of resource class loading\n\n 06.05.2015\n  - bugfix in 3.1.22-dev cache resource must not be loaded for subtemplates\n  - bugfix/improvement in 3.1.22-dev cache locking did not work as expected\n\n 05.05.2015\n  - optimization on cache update when main template is modified\n  - optimization move <?php ?> handling from parser to new compiler module\n\n 05.05.2015\n  - bugfix code could be messed up when {tags} are used in multiple attributes https://github.com/smarty-php/smarty/issues/23\n\n 04.05.2015\n  - bugfix Smarty_Resource::parseResourceName incompatible with Google AppEngine (https://github.com/smarty-php/smarty/issues/22)\n  - improvement use is_file() checks to avoid errors suppressed by @ which could still cause problems (https://github.com/smarty-php/smarty/issues/24)\n\n 28.04.2015\n  - bugfix plugins of merged subtemplates not loaded in 3.1.22-dev (forum topic 25508) 2nd fix\n\n 28.04.2015\n  - bugfix plugins of merged subtemplates not loaded in 3.1.22-dev (forum topic 25508)\n\n 23.04.2015\n  - bugfix a nocache template variable used as parameter at {insert} was by mistake cached\n\n 20.04.2015\n  - bugfix at a template function containing nocache code a parmeter could overwrite a template variable of same name\n\n 27.03.2015\n  - bugfix Smarty_Security->allow_constants=false; did also disable true, false and null (change of 16.03.2015)\n  - improvement added a whitelist for trusted constants to security Smarty_Security::$trusted_constants (forum topic 25471)\n\n 20.03.2015\n  - bugfix make sure that function properties get saved only in compiled files containing the fuction definition {forum topic 25452}\n  - bugfix correct update of global variable values on exit of template functions. (reported under Smarty Developers)\n\n 16.03.2015\n - bugfix  problems with {function}{/function} and {call} tags in different subtemplate cache files {forum topic 25452}\n - bugfix  Smarty_Security->allow_constants=false; did not disallow direct usage of defined constants like {SMARTY_DIR} {forum topic 25457}\n - bugfix  {block}{/block} tags did not work inside double quoted strings https://github.com/smarty-php/smarty/issues/18\n\n\n 15.03.2015\n - bugfix  $smarty->compile_check must be restored before rendering of a just updated cache file {forum 25452}\n\n 14.03.2015\n - bugfix  {nocache}  {/nocache} tags corrupted code when used within a nocache section caused by a nocache template variable.\n\n - bugfix  template functions defined with {function} in an included subtemplate could not be called in nocache\n           mode with {call... nocache} if the subtemplate had it's own cache file {forum 25452}\n\n 10.03.2015\n - bugfix {include ... nocache} whith variable file or compile_id attribute was not executed in nocache mode.\n\n 12.02.2015\n - bugfix multiple Smarty::fetch() of same template when $smarty->merge_compiled_includes = true; could cause function already defined error\n\n 11.02.2015\n - bugfix recursive {includes} did create E_NOTICE message when $smarty->merge_compiled_includes = true; (github issue #16)\n\n 22.01.2015\n - new feature security can now control access to static methods and properties\n                see also NEW_FEATURES.txt\n\n 21.01.2015\n - bugfix clearCompiledTemplates(), clearAll() and clear() could try to delete whole drive at wrong path permissions because realpath() fail (forum 25397)\n - bugfix 'self::' and 'parent::' was interpreted in template syntax as static class\n\n 04.01.2015\n - push last weeks changes to github\n\n - different optimizations\n - improvement automatically create different versions of compiled templates and config files depending\n   on property settings.\n - optimization restructure template processing by moving code into classes it better belongs to\n - optimization restructure config file processing\n\n 31.12.2014\n - bugfix use function_exists('mb_get_info') for setting Smarty::$_MBSTRING.\n   Function mb_split could be overloaded depending on php.ini mbstring.func_overload\n\n\n 29.12.2014\n - new feature security can now limit the template nesting level by property $max_template_nesting\n                see also NEW_FEATURES.txt (forum 25370)\n\n 29.12.2014\n - new feature security can now disable special $smarty variables listed in property $disabled_special_smarty_vars\n                see also NEW_FEATURES.txt (forum 25370)\n\n 27.12.2014\n  - bugfix clear internal _is_file_cache when plugins_dir was modified\n\n 13.12.2014\n  - improvement optimization of lexer and parser resulting in a up to 30% higher compiling speed\n\n 11.12.2014\n  - bugfix resolve parser ambiguity between constant print tag {CONST} and other smarty tags after change of 09.12.2014\n\n 09.12.2014\n  - bugfix variables $null, $true and $false did not work after the change of 12.11.2014 (forum 25342)\n  - bugfix call of template function by a variable name did not work after latest changes (forum 25342)\n\n 23.11.2014\n  - bugfix a plugin with attached modifier could fail if the tag was immediately followed by another Smarty tag (since 3.1.21) (forum 25326)\n\n 13.11.2014\n  - improvement move autoload code into Autoloader.php. Use Composer autoloader when possible\n\n 12.11.2014\n - new feature added support of namespaces to template code\n\n 08.11.2014 - 10.11.2014\n - bugfix subtemplate called in nocache mode could be called with wrong compile_id when it did change on one of the calling templates\n - improvement add code of template functions called in nocache mode dynamically to cache file (related to bugfix of 01.11.2014)\n - bugfix Debug Console did not include all data from merged compiled subtemplates\n\n 04.11.2014\n - new feature $smarty->debugging = true; => overwrite existing Debug Console window (old behaviour)\n               $smarty->debugging = 2; => individual Debug Console window by template name\n\n 03.11.2014\n - bugfix Debug Console did not show included subtemplates since 3.1.17 (forum 25301)\n - bugfix Modifier debug_print_var did not limit recursion or prevent recursive object display at Debug Console\n    (ATTENTION: parameter order has changed to be able to specify maximum recursion)\n - bugfix Debug consol did not include subtemplate information with $smarty->merge_compiled_includes = true\n - improvement The template variables are no longer displayed as objects on the Debug Console\n - improvement $smarty->createData($parent = null, $name = null) new optional name parameter for display at Debug Console\n - addition of some hooks for future extension of Debug Console\n\n 01.11.2014\n - bugfix and enhancement on subtemplate {include} and template {function} tags.\n   * Calling a template which has a nocache section could fail if it was called from a cached and a not cached subtemplate.\n   * Calling the same subtemplate cached and not cached with the $smarty->merge_compiled_includes enabled could cause problems\n   * Many smaller related changes\n\n 30.10.2014\n - bugfix access to class constant by object like {$object::CONST} or variable class name {$class::CONST} did not work (forum 25301)\n\n 26.10.2014\n - bugfix E_NOTICE message was created during compilation when ASP tags '<%' or '%>' are in template source text\n - bugfix merge_compiled_includes option failed when caching  enables and same subtemplate was included cached and not cached\n\n - 3.1.21 - (18.10.2014)\n 18.10.2014\n  - composer moved to github\n\n 17.10.2014\n - bugfix on $php_handling security and optimization of smarty_internal_parsetree (Thue Kristensen)\n\n 16.10.2014\n - bugfix composer.json update\n\n 15.10.2014\n - bugfix calling a new created cache file with fetch() and Smarty::CACHING_LIFETIME_SAVED multiple times did fail (forum 22350)\n\n 14.10.2014\n - bugfix any tag placed within \"<script language=php>\" will throw a security exception to close all thinkable holes\n - bugfix classmap in root composer.json should start at \"libs/...\"\n - improvement cache is_file(file_exists) results of loadPlugin() to avoid unnecessary calls during compilation (Issue 201}\n\n 12.10.2014\n - bugfix a comment like \"<script{*foo*} language=php>\" bypassed $php_handling checking (Thue Kristensen)\n - bugfix change of 08.10.2014 could create E_NOTICE meassage when using \"<?php\" tags\n - bugfix \"<script language=php>\" with $php_handling PHP_PASSTHRU was executed in {nocache} sections\n\n - 3.1.20 - (09.10.2014)\n 08.10.2014\n - bugfix security mode of \"<script language=php>\" must be controlled by $php_handling property (Thue Kristensen)\n\n 01.10.2014\n - bugfix template resource of inheritance blocks could get invalid if the default resource type is not 'file'(Issue 202)\n - bugfix existing child {block} tag must override parent {block} tag append / prepend setting (topic 25259)\n\n 02.08.2014\n - bugfix modifier wordwrap did output break string wrong if first word was exceeding length with cut = true (topic 25193)\n\n 24.07.2014\n - bugfix cache clear when cache folder does not exist\n\n 16.07.2014\n - enhancement remove BOM automatically from template source (topic 25161)\n\n 04.07.2014\n - bugfix the bufix of 02.06.2014 broke correct handling of child templates with same name but different template folders in extends resource (issue 194 and topic 25099)\n\n - 3.1.19 - (30.06.2014)\n 20.06.2014\n - bugfix template variables could not be passed as parameter in {include} when the include was in a {nocache} section (topic 25131)\n\n 17.06.2014\n - bugfix large template text of some charsets could cause parsing errors (topic 24630)\n\n 08.06.2014\n - bugfix registered objects did not work after spelling fixes of 06.06.2014\n - bugfix {block} tags within {literal} .. {/literal} got not displayed correctly (topic 25024)\n - bugfix UNC WINDOWS PATH like \"\\\\psf\\path\\to\\dir\" did not work as template directory (Issue 192)\n - bugfix {html_image} security check did fail on files relative to basedir (Issue 191)\n\n 06.06.2014\n - fixed PHPUnit outputFilterTrimWhitespaceTests.php assertion of test result\n - fixed spelling, PHPDoc , minor errors, code cleanup\n\n 02.06.2014\n - using multiple cwd with relative template dirs could result in identical compiled file names. (issue 194 and topic 25099)\n\n 19.04.2014\n - bugfix calling createTemplate(template, data) with empty data array caused notice of array to string conversion (Issue 189)\n - bugfix clearCompiledTemplate() did not delete files on WINDOWS when a compile_id was specified\n\n 18.04.2014\n - revert bugfix of 5.4.2014 because %-e date format is not supported on all operating systems\n\n - 3.1.18 - (07.04.2014)\n 06.04.2014\n - bugfix template inheritance fail when using custom resource after patch of 8.3.2014 (Issue 187)\n - bugfix update of composer file (Issue 168 and 184)\n\n 05.04.2014\n - bugfix default date format leads to extra spaces when displaying dates with single digit days (Issue 165)\n\n 26.03.2014\n - bugfix Smart_Resource_Custom should not lowercase the resource name (Issue 183)\n\n 24.03.2014\n - bugfix using a {foreach} property like @iteration could fail when used in inheritance parent templates (Issue 182)\n\n 20.03.2014\n - bugfix $smarty->auto_literal and mbsting.func_overload 2, 6 or 7 did fail (forum topic 24899)\n\n 18.03.2014\n - revert change of 17.03.2014\n\n17.03.2014\n - bugfix $smarty->auto_literal and mbsting.func_overload 2, 6 or 7 did fail (forum topic 24899)\n\n 15.03.2014\n - bugfix Smarty_CacheResource_Keyvaluestore did use different keys on read/writes and clearCache() calls (Issue 169)\n\n 13.03.2014\n - bugfix clearXxx() change of 27.1.2014 did not work when specifing cache_id or compile_id  (forum topic 24868 and 24867)\n\n - 3.1.17 -\n 08.03.2014\n - bugfix relative file path {include} within {block} of child templates did throw exception on first call (Issue 177)\n\n 17.02.2014\n - bugfix Smarty failed when executing PHP on HHVM (Hip Hop 2.4) because uniqid('',true) does return string with ',' (forum topic 20343)\n\n 16.02.2014\n - bugfix a '//' or '\\\\' in template_dir path could produce wrong path on relative filepath in {include} (Issue 175)\n\n 05.02.2014\n - bugfix shared.literal_compiler_param.php did throw an exception when literal did contain a '-' (smarty-developers group)\n\n 27.01.2014\n - bugfix $smarty->debugging = true; did show the variable of the $smarty object not the variables used in display() call (forum topic 24764)\n - bugfix clearCompiledTemplate(), clearAll() and clear() should use realpath to avoid possible exception from RecursiveDirectoryIterator (Issue 171)\n\n 26.01.2014\n - bugfix  undo block nesting checks for {nocache} for reasons like forum topic 23280 (forum topic 24762)\n\n 18.01.2014\n - bugfix the compiler did fail when using template inheritance and recursive {include} (smarty-developers group)\n\n 11.01.2014\n - bugfix \"* }\" (spaces before right delimiter) was interpreted by mistake as comment end tag (Issue 170)\n - internals  content cache should be clear when updating cache file\n\n 08.01.2014\n - bugfix Smarty_CacheResource_Custom did not handle template resource type specifications on clearCache() calls (Issue 169)\n - bugfix SmartyBC.class.php should use require_once to load Smarty.class.php (forum topic 24683)\n\n - 3.1.16 -\n 15.12.2013\n - bugfix {include} with {block} tag handling (forum topic 24599, 24594, 24682) (Issue 161)\n   Read 3.1.16_RELEASE_NOTES for more details\n - enhancement additional debug output at $smarty->_parserdebug = true;\n\n 07.11.2013\n - bugfix too restrictive handling of {include} within {block} tags. 3.1.15 did throw errors where 3.1.14 did not (forum topic 24599)\n - bugfix compiler could fail if PHP mbstring.func_overload is enabled  (Issue 164)\n\n 28.10.2013\n - bugfix variable resource name at custom resource plugin did not work within {block} tags (Issue 163)\n - bugfix notice \"Trying to get property of non-object\" removed (Issue 163)\n - bugfix correction of modifier capitalize fix from 3.10.2013  (issue 159)\n - bugfix multiple {block}s with same name in parent did not work (forum topic 24631)\n\n 20.10.2013\n - bugfix a variable file name at {extends} tag did fail (forum topic 24618)\n\n 14.10.2013\n - bugfix yesterdays fix could result in an undefined variable\n\n 13.10.2013\n - bugfix variable names on {include} in template inheritance did unextepted error message (forum topic 24594) (Issue 161)\n.- bugfix relative includes with same name like {include './foo.tpl'} from different folder failed (forum topic 24590)(Issue 161)\n\n 04.10.2013\n - bugfix variable file names at {extends} had been disbabled by mistake with the rewrite of\n   template inheritance of 24.08.2013   (forum topic 24585)\n\n03.10.2013\n - bugfix loops using modifier capitalize did eat up memory (issue 159)\n\n - Smarty 3.1.15 -\n01.10.2013\n - use current delimiters in compiler error messages (issue 157)\n - improvement on performance when using error handler and multiple template folders (issue 152)\n\n17.09.2013\n - improvement added patch for additional SmartyCompilerException properties for better access to source information (forum topic 24559)\n\n16.09.2013\n - bugfix recompiled templates did not show on first request with zend opcache cache (forum topic 24320)\n\n13.09.2013\n - bugfix html_select_time defaulting error for the Meridian dropdown (forum topic 24549)\n\n09.09.2012\n- bugfix incorrect compiled code with array(object,method) callback at registered Variable Filter (forum topic 24542)\n\n27.08.2013\n- bugfix delimiter followed by linebreak did not work as auto literal after update from 24.08.2013 (forum topic 24518)\n\n24.08.2013\n- bugfix and enhancement\n  Because several recent problems with template inheritance the {block} tag compiler has been rewriten\n   - Error messages shown now the correct child template file and line number\n   - The compiler could fail on some larger UTF-8 text block (forum topic 24455)\n   - The {strip} tag can now be placed outside {block} tags in child templates (forum topic 24289)\n- change SmartyException::$escape  is now false by default\n- change PHP traceback has been remove for SmartyException and SmartyCompilerException\n\n14.08.2013\n- bugfix compiled filepath of config file did not observe different config_dir (forum topic 24493)\n\n13.08.2013\n- bugfix the internal resource cache did not observe config_dir changes (forum topic 24493)\n\n12.08.2013\n- bugfix internal $tmpx variables must be unique over all inheritance templates (Issue 149)\n\n10.08.2013\n- bugfix a newline was eaten when a <?xml ... ?> was passed by a Smarty variable and caching was enabled (forum topic 24482)\n\n29.07.2013\n- bugfix headers already send warning thrown when using 'SMARTY_DEBUG=on' from URL (Issue 148)\n\n27.07.2013\n- enhancement allow access to properties of registered opjects for Smarty2 BC (forum topic 24344)\n\n26.07.2013\n- bugfix template inheritance nesting problem (forum topic 24387)\n\n15.7.2013\n- update code generated by PSR-2 standards fixer which introduced PHP 5.4 incompatibilities of 14.7.2013\n\n14.7.2013\n- bugfix increase of internal maximum parser stacksize to allow more complex tag code {forum topic 24426}\n- update for PHP 5.4 compatibility\n- reformat source to PSR-2 standard\n\n12.7.2013\n- bugfix Do not remove '//' from file path at normalization (Issue 142)\n\n2.7.2013\n- bugfix trimwhitespace would replace captured items in wrong order (forum topic 24387)\n\n## Smarty-3.1.14 -\n27.06.2013\n- bugfix removed PHP 5.5 deprecated preg_replace /e option in modifier capitalize (forum topic 24389)\n\n17.06.2013\n- fixed spelling in sources and documentation (from smarty-developers forum Veres Lajos)\n- enhancement added constant SMARTY::CLEAR_EXPIRED for the change of 26.05.2013 (forum topic 24310)\n- bugfix added smarty_security.php to composer.json (Issue 135)\n\n26.05.2013\n- enhancement an expire_time of -1 in clearCache() and clearAllCache() will delete outdated cache files\n  by their individual cache_lifetime used at creation (forum topic 24310)\n\n21.05.2013\n- bugfix modifier strip_tags:true was compiled into wrong code (Forum Topic 24287)\n- bugfix /n after ?> in Smarty.class.php did start output buffering (Issue 138)\n\n25.04.2013\n- bugfix escape and wordrap modifier could be compiled into wrong code when used in {nocache}{/nocache}\n  section but caching is disabled  (Forum Topic 24260)\n\n05.04.2013\n- bugfix post filter must not run when compiling inheritance child blocks (Forum Topic 24094)\n- bugfix after the fix for Issue #130 compiler exceptions got double escaped (Forum Topic 24199)\n\n28.02.2013\n- bugfix nocache blocks could be lost when using CACHING_LIFETIME_SAVED (Issue #133)\n- bugfix Compile ID gets nulled when compiling child blocks (Issue #134)\n\n\n24.01.2013\n- bugfix wrong tag type in smarty_internal_templatecompilerbase.php could cause wrong plugin search order (Forum Topic 24028)\n\n## Smarty-3.1.13 -\n13.01.2013\n- enhancement allow to disable exception message escaping by SmartyException::$escape = false;  (Issue #130)\n\n09.01.2013\n- bugfix compilation did fail when a prefilter did modify an {extends} tag c\n- bugfix template inheritance could fail if nested {block} tags in childs did contain {$smarty.block.child} (Issue #127)\n- bugfix template inheritance could fail if {block} tags in childs did have similar name as used plugins (Issue #128)\n- added abstract method declaration doCompile() in Smarty_Internal_TemplateCompilerBase (Forum Topic 23969)\n\n06.01.2013\n- Allow '://' URL syntax in template names of stream resources  (Issue #129)\n\n27.11.2012\n- bugfix wrong variable usage in smarty_internal_utility.php (Issue #125)\n\n26.11.2012\n- bugfix global variable assigned within template function are not seen after template function exit (Forum Topic 23800)\n\n24.11.2012\n- made SmartyBC loadable via composer (Issue #124)\n\n20.11.2012\n- bugfix assignGlobal() called from plugins did not work (Forum Topic 23771)\n\n13.11.2012\n- adding attribute \"strict\" to html_options, html_checkboxes, html_radios to only print disabled/readonly attributes if their values are true or \"disabled\"/\"readonly\" (Issue #120)\n\n01.11.2012\n- bugfix muteExcpetedErrors() would screw up for non-readable paths (Issue #118)\n\n## Smarty-3.1.12  -\n14.09.2012\n- bugfix template inheritance failed to compile with delimiters {/ and /} (Forum Topic 23008)\n\n11.09.2012\n- bugfix escape Smarty exception messages to avoid possible script execution\n\n10.09.2012\n- bugfix tag option flags and shorttag attributes did not work when rdel started with '=' (Forum Topic 22979)\n\n31.08.2012\n- bugfix resolving relative paths broke in some circumstances (Issue #114)\n\n22.08.2012\n- bugfix test MBString availability through mb_split, as it could've been compiled without regex support (--enable-mbregex).\n  Either we get MBstring's full package, or we pretend it's not there at all.\n\n21.08.2012\n- bugfix $auto_literal = false did not work with { block} tags in child templates\n  (problem was reintroduced after fix in 3.1.7)(Forum Topic 20581)\n\n17.08.2012\n- bugfix compiled code of nocache sections could contain wrong escaping (Forum Topic 22810)\n\n15.08.2012\n- bugfix template inheritance did produce wrong code if subtemplates with {block} was\n  included several times (from smarty-developers forum)\n\n14.08.2012\n- bugfix PHP5.2 compatibility compromised by SplFileInfo::getBasename() (Issue 110)\n\n01.08.2012\n- bugfix avoid PHP error on $smarty->configLoad(...) with invalid section specification (Forum Topic 22608)\n\n30.07.2012\n-bugfix {assign} in a nocache section should not overwrite existing variable values\n   during compilation (issue 109)\n\n28.07.2012\n- bugfix array access of config variables did not work (Forum Topic 22527)\n\n19.07.2012\n- bugfix the default plugin handler did create wrong compiled code for static class methods\n  from external script files (issue 108)\n\n## Smarty-3.1.11 -\n30.06.2012\n- bugfix {block.. hide} did not work as nested child (Forum Topic 22216)\n\n25.06.2012\n- bugfix the default plugin handler did not allow static class methods for modifier (issue 85)\n\n24.06.2012\n- bugfix escape modifier support for PHP < 5.2.3 (Forum Topic 21176)\n\n11.06.2012\n- bugfix the patch for Topic 21856 did break tabs between tag attributes (Forum Topic 22124)\n\n## Smarty-3.1.10  -\n09.06.2012\n- bugfix the compiler did ignore registered compiler plugins for closing tags (Forum Topic 22094)\n- bugfix the patch for Topic 21856 did break multiline tags (Forum Topic 22124)\n\n## Smarty-3.1.9 -\n07.06.2012\n- bugfix fetch() and display() with relative paths (Issue 104)\n- bugfix treat \"0000-00-00\" as 0 in modifier.date_format (Issue 103)\n\n24.05.2012\n- bugfix Smarty_Internal_Write_File::writeFile() could cause race-conditions on linux systems (Issue 101)\n- bugfix attribute parameter names of plugins may now contain also \"-\"  and \":\"  (Forum Topic 21856)\n- bugfix add compile_id to cache key of of source (Issue 97)\n\n22.05.2012\n- bugfix recursive {include} within {section} did fail (Smarty developer group)\n\n12.05.2012\n- bugfix {html_options} did not properly escape values (Issue 98)\n\n03.05.2012\n- bugfix make HTTP protocall version variable (issue 96)\n\n02.05.2012\n- bugfix  {nocache}{block}{plugin}... did produce wrong compiled code when caching is disabled (Forum Topic 21572, issue 95)\n\n12.04.2012\n- bugfix Smarty did eat the linebreak after the <?xml...?> closing tag (Issue 93)\n- bugfix concurrent cache updates could create a warning (Forum Topic 21403)\n\n08.04.2012\n- bugfix \"\\\\\" was not escaped correctly when generating nocache code (Forum Topic 21364)\n\n30.03.2012\n- bugfix template inheritance did  not throw exception when a parent template was deleted (issue 90)\n\n27.03.2012\n- bugfix prefilter did run multiple times on inline subtemplates compiled into several main templates (Forum Topic 21325)\n- bugfix implement Smarty2's behaviour of variables assigned by reference in SmartyBC. {assign} will affect all references.\n  (issue 88)\n\n21.03.2012\n- bugfix compileAllTemplates() and compileAllConfig() did not return the number of compiled files (Forum Topic 21286)\n\n13.03.2012\n- correction of yesterdays bugfix (Forum Topic 21175 and 21182)\n\n12.03.2012\n- bugfix a double quoted string of \"$foo\" did not compile into PHP \"$foo\" (Forum Topic 21175)\n- bugfix template inheritance did set $merge_compiled_includes globally true\n\n03.03.2012\n- optimization of compiling speed when same modifier was used several times\n\n02.03.2012\n- enhancement the default plugin handler can now also resolve undefined modifier (Smarty::PLUGIN_MODIFIER)\n  (Issue 85)\n\n## Smarty-3.1.8  -\n19.02.2012\n- bugfix {include} could result in a fatal error if used in appended or prepended nested {block} tags\n  (reported by mh and Issue 83)\n- enhancement added Smarty special variable $smarty.template_object to return the current template object (Forum Topic 20289)\n\n\n07.02.2012\n- bugfix increase entropy of internal function names in compiled and cached template files (Forum Topic 20996)\n- enhancement cacheable parameter added to default plugin handler, same functionality as in registerPlugin (request by calguy1000)\n\n06.02.2012\n- improvement stream_resolve_include_path() added to Smarty_Internal_Get_Include_Path (Forum Topic 20980)\n- bugfix fetch('extends:foo.tpl') always yielded $source->exists == true (Forum Topic 20980)\n- added modifier unescape:\"url\", fix (Forum Topic 20980)\n- improvement replaced some calls of preg_replace with str_replace (Issue 73)\n\n30.01.2012\n- bugfix Smarty_Security internal $_resource_dir cache wasn't properly propagated\n\n27.01.2012\n- bugfix Smarty did not a template name of \"0\" (Forum Topic 20895)\n\n20.01.2012\n- bugfix typo in Smarty_Internal_Get_IncludePath did cause runtime overhead (Issue 74)\n- improvment remove unneeded assigments (Issue 75 and 76)\n- fixed typo in template parser\n- bugfix output filter must not run before writing cache when template does contain nocache code (Issue 71)\n\n02.01.2012\n- bugfix {block foo nocache} did not load plugins within child {block} in nocache mode (Forum Topic 20753)\n\n29.12.2011\n- bugfix enable more entropy in Smarty_Internal_Write_File for \"more uniqueness\" and Cygwin compatibility (Forum Topic 20724)\n- bugfix embedded quotes in single quoted strings did not compile correctly in {nocache} sections (Forum Topic 20730)\n\n28.12.2011\n- bugfix Smarty's internal header code must be excluded from postfilters (issue 71)\n\n22.12.2011\n- bugfix the new lexer of 17.12.2011 did fail if mbstring.func_overload != 0 (issue 70) (Forum Topic 20680)\n- bugfix template inheritace did fail if mbstring.func_overload != 0 (issue 70) (Forum Topic 20680)\n\n20.12.2011\n- bugfix template inheritance: {$smarty.block.child} in nested child {block} tags did not return\n  content after {$smarty.block.child} (Forum Topic 20564)\n\n## Smarty-3.1.7 -\n18.12.2011\n- bugfix strings ending with \" in multiline strings of config files failed to compile (issue #67)\n- added chaining to Smarty_Internal_Templatebase\n- changed unloadFilter() to not return a boolean in favor of chaining and API conformity\n- bugfix unregisterObject() raised notice when object to unregister did not exist\n- changed internals to use Smarty::$_MBSTRING ($_CHARSET, $_DATE_FORMAT) for better unit testing\n- added Smarty::$_UTF8_MODIFIER for proper PCRE charset handling (Forum Topic 20452)\n- added Smarty_Security::isTrustedUri() and Smarty_Security::$trusted_uri to validate\n  remote resource calls through {fetch} and {html_image} (Forum Topic 20627)\n\n17.12.2011\n- improvement of compiling speed by new handling of plain text blocks in the lexer/parser (issue #68)\n\n16.12.2011\n- bugfix the source exits flag and timestamp was not setup when template was in php include path (issue #69)\n\n9.12.2011\n- bugfix {capture} tags around recursive {include} calls did throw exception (Forum Topic 20549)\n- bugfix $auto_literal = false did not work with { block} tags in child templates (Forum Topic 20581)\n- bugfix template inheritance: do not include code of {include} in overloaded {block} into compiled\n  parent template (Issue #66}\n- bugfix template inheritance: {$smarty.block.child} in nested child {block} tags did not return expected\n  result (Forum Topic 20564)\n\n## Smarty-3.1.6  -\n30.11.2011\n- bugfix is_cache() for individual cached subtemplates with $smarty->caching = CACHING_OFF did produce\n  an exception (Forum Topic 20531)\n\n29.11.2011\n- bugfix added exception if the default plugin handler did return a not static callback (Forum Topic 20512)\n\n25.11.2011\n- bugfix {html_select_date} and {html_slecet_time} did not default to current time if \"time\" was not specified\n  since r4432 (issue 60)\n\n24.11.2011\n- bugfix a subtemplate later used as main template did use old variable values\n\n21.11.2011\n- bugfix cache file could include unneeded modifier plugins under certain condition\n\n18.11.2011\n- bugfix declare all directory properties private to map direct access to getter/setter also on extended Smarty class\n\n16.11.2011\n- bugfix Smarty_Resource::load() did not always return a proper resource handler (Forum Topic 20414)\n- added escape argument to html_checkboxes and html_radios (Forum Topic 20425)\n\n## Smarty-3.1.5  -\n14.11.2011\n- bugfix allow space between function name and open bracket (forum topic 20375)\n\n09.11.2011\n- bugfix different behaviour of uniqid() on cygwin. See https://bugs.php.net/bug.php?id=34908\n  (forum topic 20343)\n\n01.11.2011\n- bugfix {if} and {while} tags without condition did not throw a SmartyCompilerException (Issue #57)\n- bugfix multiline strings in config files could fail on longer strings (reopened Issue #55)\n\n22.10.2011\n- bugfix smarty_mb_from_unicode() would not decode unicode-points properly\n- bugfix use catch Exception instead UnexpectedValueException in\n  clearCompiledTemplate to be PHP 5.2 compatible\n\n21.10.2011\n- bugfix apostrophe in plugins_dir path name failed (forum topic 20199)\n- improvement sha1() for array keys longer than 150 characters\n- add Smarty::$allow_ambiguous_resources to activate unique resource handling (Forum Topic 20128)\n\n20.10.2011\n- @silenced unlink() in Smarty_Internal_Write_File since debuggers go haywire without it.\n- bugfix Smarty::clearCompiledTemplate() threw an Exception if $cache_id was not present in $compile_dir when $use_sub_dirs = true.\n- bugfix {html_select_date} and {html_select_time} did not properly handle empty time arguments (Forum Topic 20190)\n- improvement removed unnecessary sha1()\n\n19.10.2011\n- revert PHP4 constructor message\n- fixed PHP4 constructor message\n\n## Smarty-3.1.4 -\n19.10.2011\n- added exception when using PHP4 style constructor\n\n16.10.2011\n- bugfix testInstall() did not propery check cache_dir and compile_dir\n\n15.10.2011\n- bugfix Smarty_Resource and Smarty_CacheResource runtime caching (Forum Post 75264)\n\n14.10.2011\n- bugfix unique_resource did not properly apply to compiled resources (Forum Topic 20128)\n- add locking to custom resources (Forum Post 75252)\n- add Smarty_Internal_Template::clearCache() to accompany isCached() fetch() etc.\n\n13.10.2011\n- add caching for config files in Smarty_Resource\n- bugfix disable of caching after isCached() call did not work (Forum Topic 20131)\n- add concept unique_resource to combat potentially ambiguous template_resource values when custom resource handlers are used (Forum Topic 20128)\n- bugfix multiline strings in config files could fail on longer strings (Issue #55)\n\n11.10.2011\n- add runtime checks for not matching {capture}/{/capture} calls (Forum Topic 20120)\n\n10.10.2011\n- bugfix variable name typo in {html_options} and {html_checkboxes} (Issue #54)\n- bugfix <?xml> tag did create wrong output when caching enabled and the tag was in included subtemplate\n- bugfix Smarty_CacheResource_mysql example was missing strtotime() calls\n\n## Smarty-3.1.3  -\n07.10.2011\n- improvement removed html comments from {mailto} (Forum Topic 20092)\n- bugfix testInstall() would not show path to internal plugins_dir (Forum Post 74627)\n- improvement testInstall() now showing resolved paths and checking the include_path if necessary\n- bugfix html_options plugin did not handle object values properly (Issue #49, Forum Topic 20049)\n- improvement html_checkboxes and html_radios to accept null- and object values, and label_ids attribute\n- improvement removed some unnecessary count()s\n- bugfix parent pointer was not set when fetch() for other template was called on template object\n\n06.10.2011\n- bugfix switch lexer internals depending on mbstring.func_overload\n- bugfix start_year and end_year of {html_select_date} did not use current year as offset base (Issue #53)\n\n05.10.2011\n- bugfix of problem introduced with r4342 by replacing strlen() with isset()\n- add environment configuration issue with mbstring.func_overload Smarty cannot compensate for (Issue #45)\n- bugfix nofilter tag option did not disable default modifier\n- bugfix html_options plugin did not handle null- and object values properly (Issue #49, Forum Topic 20049)\n\n04.10.2011\n- bugfix assign() in plugins called in subtemplates did change value also in parent template\n- bugfix of problem introduced with r4342 on math plugin\n- bugfix output filter should not run on individually cached subtemplates\n- add unloadFilter() method\n- bugfix has_nocache_code flag was not reset before compilation\n\n## Smarty-3.1.2  -\n03.10.2011\n- improvement add internal $joined_template_dir property instead computing it on the fly several times\n\n01.10.2011\n- improvement replaced most in_array() calls by more efficient isset() on array_flip()ed haystacks\n- improvement replaced some strlen($foo) > 3 calls by isset($foo[3])\n- improvement Smarty_Internal_Utility::clearCompiledTemplate() removed redundant strlen()s\n\n29.09.2011\n- improvement of Smarty_Internal_Config::loadConfigVars() dropped the in_array for index look up\n\n28.09.2011\n- bugfix on template functions called nocache calling other template functions\n\n27.09.2011\n- bugfix possible warning \"attempt to modify property of non-object\" in {section} (issue #34)\n- added chaining to Smarty_Internal_Data so $smarty->assign('a',1)->assign('b',2); is possible now\n- bugfix remove race condition when a custom resource did change timestamp during compilation\n- bugfix variable property did not work on objects variable in template\n- bugfix smarty_make_timestamp() failed to process DateTime objects properly\n- bugfix wrong resource could be used on compile check of custom resource\n\n26.09.2011\n- bugfix repeated calls to same subtemplate did not make use of cached template object\n\n24.09.2011\n- removed internal muteExpectedErrors() calls in favor of having the implementor call this once from his application\n- optimized muteExpectedErrors() to pass errors to the latest registered error handler, if appliccable\n- added compile_dir and cache_dir to list of muted directories\n- improvment better error message for undefined templates at {include}\n\n23.09.2011\n- remove unused properties\n- optimization use real function instead anonymous function for preg_replace_callback\n- bugfix a relative {include} in child template blocks failed\n- bugfix direct setting of $template_dir, $config_dir, $plugins_dir in __construct() of an\n  extended Smarty class created problems\n- bugfix error muting was not implemented for cache locking\n\n## Smarty 3.1.1  -\n22.09.2011\n- bugfix {foreachelse} does fail if {section} was nested inside {foreach}\n- bugfix debug.tpl did not display correctly when it was compiled with escape_html = true\n\n21.09.2011\n- bugfix look for mixed case plugin file names as in 3.0 if not found try all lowercase\n- added $error_muting to suppress error messages even for badly implemented error_handlers\n- optimized autoloader\n- reverted ./ and ../ handling in fetch() and display() - they're allowed again\n\n20.09.2011\n- bugfix removed debug echo output while compiling template inheritance\n- bugfix relative paths in $template_dir broke relative path resolving in {include \"../foo.tpl\"}\n- bugfix {include} did not work inside nested {block} tags\n- bugfix {assign} with scope root and global did not work in all cases\n\n19.09.2011\n- bugfix regression in Smarty_CacheReource_KeyValueStore introduced by r4261\n- bugfix output filter shall not run on included subtemplates\n\n18.09.2011\n- bugfix template caching did not care about file.tpl in different template_dir\n- bugfix {include $file} was broken when merge_compiled_incluges = true\n- bugfix {include} was broken when merge_compiled_incluges = true and same indluded template\n  was used in different main templates in one compilation run\n- bugfix for Smarty2 style compiler plugins on unnamed attribute passing like {tag $foo $bar}\n- bugfix debug.tpl did not display correctly when it was compiled with escape_html = true\n\n17.09.2011\n- bugfix lock_id for file resource would create invalid filepath\n- bugfix resource caching did not care about file.tpl in different template_dir\n\n## Smarty 3.1.0  -\n15/09/2011\n- optimization of {foreach}; call internal _count() method only when \"total\" or \"last\" {foreach} properties are used\n\n11/09/2011\n- added  unregisterObject() method\n\n06/09/2011\n- bugfix  isset() did not work in templates on config variables\n\n03/09/2011\n- bugfix createTemplate() must default to cache_id and compile_id of Smarty object\n- bugfix Smarty_CacheResource_KeyValueStore must include $source->uid in cache filepath to keep templates with same\n  name but different folders separated\n- added cacheresource.apc.php example in demo folder\n\n02/09/2011\n- bugfix cache lock file must use absolute filepath\n\n01/09/2011\n- update of cache locking\n\n30/08/2011\n- added locking mechanism to CacheResource API (implemented with File and KeyValueStores)\n\n28/08/2011\n- bugfix clearCompileTemplate() did not work for specific template subfolder or resource\n\n27/08/2011\n- bugfix {$foo|bar+1} did create syntax error\n\n26/08/2011\n- bugfix when generating nocache code which contains double \\\n- bugfix handle race condition if cache file was deleted between filemtime and include\n\n17/08/2011\n- bugfix CacheResource_Custom bad internal fetch() call\n\n15/08/2011\n- bugfix CacheResource would load content twice for KeyValueStore and Custom handlers\n\n06/08/2011\n- bugfix {include} with scope attribute could execute in wrong scope\n- optimization of compile_check processing\n\n03/08/2011\n- allow comment tags to comment {block} tags out in child templates\n\n26/07/2011\n- bugfix experimental getTags() method did not work\n\n24/07/2011\n- sure opened output buffers are closed on exception\n- bugfix {foreach} did not work on IteratorAggregate\n\n22/07/2011\n- clear internal caches on clearAllCache(), clearCache(), clearCompiledTemplate()\n\n21/07/2011\n- bugfix value changes of variable values assigned to Smarty object could not be seen on repeated $smarty->fetch() calls\n\n17/07/2011\n- bugfix {$smarty.block.child} did drop a notice at undefined child\n\n15/07/2011\n- bugfix individual cache_lifetime of {include} did not work correctly inside {block} tags\n- added caches for Smarty_Internal_TemplateSource and Smarty_Internal_TemplateCompiled to reduce I/O for multiple cache_id rendering\n\n14/07/2011\n- made Smarty::loadPlugin() respect the include_path if required\n\n13/07/2011\n- optimized internal file write functionality\n- bugfix PHP did eat line break on nocache sections\n- fixed typo of Smarty_Security properties $allowed_modifiers and $disabled_modifiers\n\n06/07/2011\n- bugfix variable modifier must run befor gereral filtering/escaping\n\n04/07/2011\n- bugfix use (?P<name>) syntax at preg_match as some pcre libraries failed on (?<name>)\n- some performance improvement when using generic getter/setter on template objects\n\n30/06/2011\n- bugfix generic getter/setter of Smarty properties used on template objects did throw exception\n- removed is_dir and is_readable checks from directory setters for better performance\n\n28/06/2011\n- added back support of php template resource as undocumented feature\n- bugfix automatic recompilation on version change could drop undefined index notice on old 3.0 cache and compiled files\n- update of README_3_1_DEV.txt and moved into the distribution folder\n- improvement show first characters of eval and string templates instead sha1 Uid in debug window\n\n## Smarty 3.1-RC1 -\n25/06/2011\n- revert change of 17/06/2011. $_smarty varibale removed. call loadPlugin() from inside plugin code if required\n- code cleanup, remove no longer used properties and methods\n- update of PHPdoc comments\n\n23/06/2011\n- bugfix {html_select_date} would not respect current time zone\n\n19/06/2011\n- added $errors argument to testInstall() functions to suppress output.\n- added plugin-file checks to testInstall()\n\n18/06/2011\n- bugfix mixed use of same subtemplate inline and not inline in same script could cause a warning during compilation\n\n17/06/2011\n- bugfix/change use $_smarty->loadPlugin() when loading nested depending plugins via loadPlugin\n- bugfix {include ... inline} within {block}...{/block} did fail\n\n16/06/2011\n- bugfix do not overwrite '$smarty' template variable when {include ... scope=parent} is called\n- bugfix complete empty inline subtemplates did fail\n\n15/06/2011\n- bugfix template variables where not accessable within inline subtemplates\n\n12/06/2011\n- bugfix removed unneeded merging of template variable when fetching includled subtemplates\n\n10/06/2011\n- made protected properties $template_dir, $plugins_dir, $cache_dir, $compile_dir, $config_dir accessible via magic methods\n\n09/06/2011\n- fix smarty security_policy issue in plugins {html_image} and {fetch}\n\n05/06/2011\n- update of SMARTY_VERSION\n- bugfix made getTags() working again\n\n04/06/2011\n- allow extends resource in file attribute of {extends} tag\n\n03/06/2011\n- added {setfilter} tag to set filters for variable output\n- added escape_html property to control autoescaping of variable output\n\n27/05/2011\n- added allowed/disabled tags and modifiers in security for sandboxing\n\n23/05/2011\n- added base64: and urlencode: arguments to eval and string resource types\n\n22/05/2011\n- made time-attribute of {html_select_date} and {html_select_time} accept arrays as defined by attributes prefix and field_array\n\n13/05/2011\n- remove setOption / getOption calls from SamrtyBC class\n\n02/05/2011\n- removed experimental setOption() getOption() methods\n- output returned content also on opening tag calls of block plugins\n- rewrite of default plugin handler\n- compile code of variable filters for better performance\n\n20/04/2011\n- allow {php} {include_php} tags and PHP_ALLOW handling only with the SmartyBC class\n- removed support of php template resource\n\n20/04/2011\n- added extendsall resource example\n- optimization of template variable access\n- optimization of subtemplate handling {include}\n- optimization of template class\n\n01/04/2011\n- bugfix quote handling in capitalize modifier\n\n28/03/2011\n- bugfix stripslashes() requried when using PCRE e-modifier\n\n04/03/2011\n- upgrade to new PHP_LexerGenerator version 0.4.0 for better performance\n\n27/02/2011\n- ignore .svn folders when clearing cache and compiled files\n- string resources do not need a modify check\n\n26/02/2011\n- replaced smarty_internal_wrapper by SmartyBC class\n- load utility functions as static methods instead through __call()\n- bugfix in extends resource when subresources are used\n- optimization of modify checks\n\n25/02/2011\n- use $smarty->error_unassigned to control NOTICE handling on unassigned variables\n\n21/02/2011\n- added new new compile_check mode COMPILECHECK_CACHEMISS\n- corrected new cloning behaviour of createTemplate()\n- do no longer store the compiler object as property in the compile_tag classes to avoid possible memory leaks\n  during compilation\n\n19/02/2011\n- optimizations on merge_compiled_includes handling\n- a couple of optimizations and bugfixes related to new resource structure\n\n17/02/2011\n- changed ./ and ../ behaviour\n\n14/02/2011\n- added {block ... hide} option to suppress block if no child is defined\n\n13/02/2011\n- update handling of recursive subtemplate calls\n- bugfix replace $smarty->triggerError() by exception in smarty_internal_resource_extends.php\n\n12/02/2011\n- new class Smarty_Internal_TemplateBase with shared methods of Smarty and Template objects\n- optimizations of template processing\n- made register... methods permanet\n- code for default_plugin_handler\n- add automatic recompilation at version change\n\n04/02/2011\n- change in Smarty_CacheResource_Custom\n- bugfix cache_lifetime did not compile correctly at {include} after last update\n- moved isCached processing into CacheResource class\n- bugfix new CacheResource API did not work with disabled compile_check\n\n03/02/2011\n- handle template content as function to improve speed on multiple calls of same subtemplate and isCached()/display() calls\n- bugfixes and improvents in the new resource API\n- optimizations of template class code\n\n25/01/2011\n- optimized function html_select_time\n\n22/01/2011\n- added Smarty::$use_include_path configuration directive for Resource API\n\n21/01/2011\n- optimized function html_select_date\n\n19/01/2011\n- optimized outputfilter trimwhitespace\n\n18/01/2011\n- bugfix Config to use Smarty_Resource to fetch sources\n- optimized Smarty_Security's isTrustedDir() and isTrustedPHPDir()\n\n17/01/2011\n- bugfix HTTP headers for CGI SAPIs\n\n16/01/2011\n- optimized internals of Smarty_Resource and Smarty_CacheResource\n\n14/01/2011\n- added modifiercompiler escape to improve performance of escaping html, htmlall, url, urlpathinfo, quotes, javascript\n- added support to choose template_dir to load from: [index]filename.tpl\n\n12/01/2011\n- added unencode modifier to revert results of encode modifier\n- added to_charset and from_charset modifier for character encoding\n\n11/01/2011\n- added SMARTY_MBSTRING to generalize MBString detection\n- added argument $lc_rest to modifier.capitalize to lower-case anything but the first character of a word\n- changed strip modifier to consider unicode white-space, too\n- changed wordwrap modifier to accept UTF-8 strings\n- changed count_sentences modifier to consider unicode characters and treat sequences delimited by ? and ! as sentences, too\n- added argument $double_encode to modifier.escape (applies to html and htmlall only)\n- changed escape modifier to be UTF-8 compliant\n- changed textformat block to be UTF-8 compliant\n- optimized performance of mailto function\n- fixed spacify modifier so characters are not prepended and appended, made it unicode compatible\n- fixed truncate modifier to properly use mb_string if possible\n- removed UTF-8 frenzy from count_characters modifier\n- fixed count_words modifier to treat \"hello-world\" as a single word like str_count_words() does\n- removed UTF-8 frenzy from upper modifier\n- removed UTF-8 frenzy from lower modifier\n\n01/01/2011\n- optimize smarty_modified_escape for hex, hexentity, decentity.\n\n28/12/2010\n- changed $tpl_vars, $config_vars and $parent to belong to Smarty_Internal_Data\n- added Smarty::registerCacheResource() for dynamic cache resource object registration\n\n27/12/2010\n- added Smarty_CacheResource API and refactored existing cache resources accordingly\n- added Smarty_CacheResource_Custom and Smarty_CacheResource_Mysql\n\n26/12/2010\n- added Smarty_Resource API and refactored existing resources accordingly\n- added Smarty_Resource_Custom and Smarty_Resource_Mysql\n- bugfix Smarty::createTemplate() to return properly cloned template instances\n\n24/12/2010\n- optimize smarty_function_escape_special_chars() for PHP >= 5.2.3\n\n## SVN 3.0 trunk  -\n14/05/2011\n- bugfix error handling at stream resources\n\n13/05/2011\n- bugfix condition starting with \"-\" did fail at {if} and {while} tags\n\n22/04/2011\n- bugfix allow only fixed string as file attribute at {extends} tag\n\n01/04/2011\n- bugfix do not run filters and default modifier when displaying the debug template\n- bugfix of embedded double quotes within multi line strings (\"\"\")\n\n29/03/2011\n- bugfix on error message in smarty_internal_compile_block.php\n- bugfix mb handling in strip modifier\n- bugfix for Smarty2 style registered compiler function on unnamed attribute passing like {tag $foo $bar}\n\n17/03/2011\n- bugfix on default {function} parameters when {function} was used in nocache sections\n- bugfix on compiler object destruction. compiler_object property was by mistake unset.\n\n09/03/2011\n-bugfix a variable filter should run before modifiers on an output tag (see change of 23/07/2010)\n\n08/03/2011\n- bugfix loading config file without section should load only defaults\n\n03/03/2011\n- bugfix \"smarty\" template variable was not recreated when cached templated had expired\n- bugfix internal rendered_content must be cleared after subtemplate was included\n\n01/03/2011\n- bugfix replace modifier did not work in 3.0.7 on systems without multibyte support\n- bugfix {$smarty.template} could return in 3.0.7 parent template name instead of\n         child name when it needed to compile\n\n25/02/2011\n- bugfix for Smarty2 style compiler plugins on unnamed attribute passing like {tag $foo $bar}\n\n24/02/2011\n- bugfix $smarty->clearCache('some.tpl') did by mistake cache the template object\n\n18/02/2011\n- bugfix removed possible race condition when isCached() was called for an individually cached subtemplate\n- bugfix force default debug.tpl to be loaded by the file resource\n\n17/02/2011\n-improvement not to delete files starting with '.' from cache and template_c folders on clearCompiledTemplate() and clearCache()\n\n16/02/2011\n-fixed typo in exception message of Smarty_Internal_Template\n-improvement allow leading spaces on } tag closing if auto_literal is enabled\n\n13/02/2011\n- bufix replace $smarty->triggerError() by exception\n- removed obsolete {popup_init..} plugin from demo templates\n- bugfix replace $smarty->triggerError() by exception in smarty_internal_resource_extends.php\n\n## Smarty 3.0.7  -\n09/02/2011\n- patched vulnerability when using {$smarty.template}\n\n01/02/2011\n- removed assert() from config and template parser\n\n31/01/2011\n- bugfix the lexer/parser did fail on special characters like VT\n\n16/01/2011\n-bugfix of ArrayAccess object handling in internal _count() method\n-bugfix of Iterator object handling in internal _count() method\n\n14/01/2011\n-bugfix removed memory leak while processing compileAllTemplates\n\n12/01/2011\n- bugfix in {if} and {while} tag compiler when using assignments as condition and nocache mode\n\n10/01/2011\n- bugfix when using {$smarty.block.child} and name of {block} was in double quoted string\n- bugfix updateParentVariables() was called twice when leaving {include} processing\n\n- bugfix mb_str_replace in replace and escape modifiers work with utf8\n\n31/12/2010\n- bugfix dynamic configuration of $debugging_crtl did not work\n- bugfix default value of $config_read_hidden changed to false\n- bugfix format of attribute array on compiler plugins\n- bugfix getTemplateVars() could return value from wrong scope\n\n28/12/2010\n- bugfix multiple {append} tags failed to compile.\n\n22/12/2010\n- update do not clone the Smarty object an internal createTemplate() calls to increase performance\n\n21/12/2010\n- update html_options to support class and id attrs\n\n17/12/2010\n- bugfix added missing support of $cache_attrs for registered plugins\n\n15/12/2010\n- bugfix assignment as condition in {while} did drop an E_NOTICE\n\n14/12/2010\n- bugfix when passing an array as default parameter at {function} tag\n\n13/12/2010\n- bugfix {$smarty.template} in child template did not return right content\n- bugfix Smarty3 did not search the PHP include_path for template files\n\n## Smarty 3.0.6  -\n\n12/12/2010\n- bugfix fixed typo regarding yesterdays change to allow streamWrapper\n\n11/12/2010\n- bugfix nested block tags in template inheritance child templates did not work correctly\n- bugfix {$smarty.current_dir} in child template did not point to dir of child template\n- bugfix changed code when writing temporary compiled files to allow stream_wrapper\n\n06/12/2010\n- bugfix getTemplateVars() should return 'null' instead dropping E_NOTICE on an unassigned variable\n\n05/12/2010\n- bugfix missing declaration of $smarty in Smarty class\n- bugfix empty($foo) in {if} did drop a notice when $foo was not assigned\n\n01/12/2010\n- improvement of {debug} tag output\n\n27/11/2010\n-change run output filter before cache file is written. (same as in Smarty2)\n\n24/11/2011\n-bugfix on parser at  !$foo|modifier\n-change parser logic when assignments used as condition in {if] and {while} to allow assign to array element\n\n23/11/2011\n-bugfix allow integer as attribute name in plugin calls\n-change  trimm whitespace from error message, removed long list of expected tokens\n\n22/11/2010\n- bugfix on template inheritance when an {extends} tag was inserted by a prefilter\n- added error message for illegal variable file attributes at {extends...} tags\n\n## Smarty 3.0.5  -\n\n\n19/11/2010\n- bugfix on block plugins with modifiers\n\n18/11/2010\n- change on handling of unassigned template variable -- default will drop E_NOTICE\n- bugfix on Smarty2 wrapper load_filter() did not work\n\n17/11/2010\n- bugfix on {call} with variable function name\n- bugfix on {block} if name did contain '-'\n- bugfix in function.fetch.php , referece to undefined $smarty\n\n16/11/2010\n- bugfix whitespace in front of \"<?php\" in smarty_internal_compile_private_block_plugin.php\n- bugfix {$smarty.now} did compile incorrectly\n- bugfix on reset(),end(),next(),prev(),current() within templates\n- bugfix on default parameter for {function}\n\n15/11/2010\n- bugfix when using {$smarty.session} as object\n- bugfix scoping problem on $smarty object passed to filters\n- bugfix captured content could not be accessed globally\n- bugfix Smarty2 wrapper functions could not be call from within plugins\n\n## Smarty 3.0.4  -\n\n14/11/2010\n- bugfix isset() did not allow multiple parameter\n- improvment of some error messages\n- bugfix html_image did use removed property $request_use_auto_globals\n- small performace patch in Smarty class\n\n13/11/2010\n- bugfix  overloading problem when $smarty->fetch()/display() have been used in plugins\n\t\t\t\t(introduced with 3.0.2)\n- code cleanup\n\t\t\t\t\t\t\t\t\n## Smarty 3.0.3  -\n\n13/11/2010\n- bugfix on {debug}\n- reverted location of loadPlugin() to Smarty class\n- fixed comments in plugins\n- fixed internal_config (removed unwanted code line)\n- improvement  remove last linebreak from {function} definition\n\n## Smarty 3.0.2  -\n\n12/11/2010\n- reactivated $error_reporting property handling\n- fixed typo in compile_continue\n- fixed security in {fetch} plugin\n- changed back plugin parameters to two. second is template object\n  with transparent access to Smarty object\n- fixed {config_load} scoping form compile time to run time\n\n## Smarty 3.0.0  -\n\n\n\n11/11/2010\n- major update including some API changes\n\n10/11/2010\n- observe compile_id also for config files\n\n09/11/2010\n-bugfix on  complex expressions as start value for {for} tag\nrequest_use_auto_globals\n04/11/2010\n- bugfix do not allow access of dynamic and private object members of assigned objects when\n  security is enabled.\n\n01/11/2010\n- bugfix related to E_NOTICE change.  {if empty($foo)} did fail when $foo contained a string\n\n28/10/2010\n- bugfix on compiling modifiers within $smarty special vars like {$smarty.post.{$foo|lower}}\n\n27/10/2010\n- bugfix default parameter values did not work for template functions included with {include}\n\n25/10/2010\n- bugfix for E_NOTICE change, array elements did not work as modifier parameter\n\n20/10/2010\n- bugfix for the E_NOTICE change\n\n19/10/2010\n- change Smarty does no longer mask out E_NOTICE by default during template processing\n\n13/10/2010\n- bugfix removed ambiguity between ternary and stream variable in template syntax\n- bugfix use caching properties of template instead of smarty object when compiling child {block}\n- bugfix {*block}...{/block*} did throw an exception in template inheritance\n- bugfix on template inheritance using nested eval or string resource in {extends} tags\n- bugfix on output buffer handling in isCached() method\n\n##  RC4 -\n\n01/10/2010\n- added {break} and {continue} tags for flow control of {foreach},{section},{for} and {while} loops\n- change of 'string' resource. It's no longer evaluated and compiled files are now stored\n- new 'eval' resource which evaluates a template without saving the compiled file\n- change in isCached() method to allow multiple calls for the same template\n\n25/09/2010\n- bugfix on some compiling modifiers\n\n24/09/2010\n- bugfix merge_compiled_includes flag was not restored correctly in {block} tag\n\n22/09/2010\n- bugfix on default modifier\n\n18/09/2010\n- bugfix untility compileAllConfig() did not create sha1 code for compiled template file names if template_dir was defined with no trailing DS\n- bugfix on templateExists() for extends resource\n\n17/09/2010\n- bugfix {$smarty.template} and {$smarty.current_dir} did not compile correctly within {block} tags\n- bugfix corrected error message on missing template files in extends resource\n- bugfix untility compileAllTemplates() did not create sha1 code for compiled template file names if template_dir was defined with no trailing DS\n\n16/09/2010\n- bugfix when a doublequoted modifier parameter did contain Smarty tags and ':'\n\n15/09/2010\n- bugfix resolving conflict between '<%'/'%>' as custom Smarty delimiter and ASP tags\n- use ucfirst for resource name on internal resource class names\n\n12/09/2010\n- bugfix for change of 08/09/2010 (final {block} tags in subtemplates did not produce correct results)\n\n10/09/2010\n- bugfix for change of 08/09/2010 (final {block} tags in subtemplates did not produce correct results)\n\n08/09/2010\n- allow multiple template inheritance branches starting in subtemplates\n\n07/09/2010\n- bugfix {counter} and {cycle} plugin assigned result to smarty variable not in local(template) scope\n- bugfix templates containing just {strip} {/strip} tags did produce an error\n\n\n23/08/2010\n- fixed E_STRICT errors for uninitialized variables\n\n22/08/2010\n- added attribute cache_id to {include} tag\n\n13/08/2010\n- remove exception_handler property from Smarty class\n- added Smarty's own exceptions SmartyException and SmartyCompilerException\n\n09/08/2010\n- bugfix on modifier with doublequoted strings as parameter containing embedded tags\n\n06/08/2010\n- bugfix when cascading some modifier like |strip|strip_tags modifier\n\n05/08/2010\n- added plugin type modifiercompiler to produce compiled modifier code\n- changed standard modifier plugins to the compiling versions whenever possible\n- bugfix in nocache sections {include} must not cache the subtemplate\n\n02/08/2010\n- bugfix strip did not work correctly in conjunction with comment lines\n\n31/07/2010\n- bugfix on nocache attribute at {assign} and {append}\n\n30/07/2010\n- bugfix passing scope attributes in doublequoted strings did not work at {include} {assign} and {append}\n\n25/07/2010\n- another bugfix of change from 23/07/2010 when compiling modifier\n\n24/07/2010\n- bugfix of change from 23/07/2010 when compiling modifier\n\n23/07/2010\n- changed execution order. A variable filter does now run before modifiers on output of variables\n- bugfix use always { and } as delimiter for debug.tpl\n\n\n22/07/2010\n- bugfix in templateExists() method\n\n20/07/2010\n- fixed handling of { strip } tag with whitespaces\n\n15/07/2010\n- bufix  {$smarty.template} does include now the relative path, not just filename\n\n##  RC3 -\n\n\n\n\n15/07/2010\n- make the date_format modifier work also on objects of the DateTime class\n- implementation of parsetrees in the parser to close security holes and remove unwanted empty line in HTML output\n\n08/07/2010\n- bugfix on assigning multidimensional arrays within templates\n- corrected bugfix for truncate modifier\n\n07/07/2010\n- bugfix the truncate modifier needs to check if the string is utf-8 encoded or not\n- bugfix support of script files relative to trusted_dir\n\n06/07/2010\n- create exception on recursive {extends} calls\n- fixed reported line number at \"unexpected closing tag \" exception\n- bugfix on escape:'mail' modifier\n- drop exception if 'item' variable is equal 'from' variable in {foreach} tag\n\n01/07/2010\n- removed call_user_func_array calls for optimization of compiled code when using registered modifiers and plugins\n\n25/06/2010\n- bugfix escaping \" when block tags are used within doublequoted strings\n\n24/06/2010\n- replace internal get_time() calls with standard PHP5 microtime(true) calls in Smarty_Internal_Utility\n- added $smarty->register->templateClass() and $smarty->unregister->templateClass() methods for supporting static classes with namespace\n\n\n22/06/2010\n- allow spaces between typecast and value in template syntax\n- bugfix get correct count of traversables in {foreach} tag\n\n21/06/2010\n- removed use of PHP shortags SMARTY_PHP_PASSTHRU mode\n- improved speed of cache->clear() when a compile_id was specified and use_sub_dirs is true\n\n20/06/2010\n- replace internal get_time() calls with standard PHP5 microtime(true) calls\n- closed security hole when php.ini asp_tags = on\n\n18/06/2010\n- added __toString method to the Smarty_Variable class\n\n\n14/06/2010\n- make handling of Smarty comments followed by newline BC to Smarty2\n\n\n##  RC2 -\n\n\n\n13/06/2010\n- bugfix Smarty3 did not handle hexadecimals like 0x0F as numerical value\n- bugifx Smarty3 did not accept numerical constants like .1 or 2. (without a leading or trailing digit)\n\n11/06/2010\n- bugfix the lexer did fail on larger {literal} ... {/literal} sections\n\n03/06/2010\n- bugfix on calling template functions like Smarty tags\n\n01/06/2010\n- bugfix on template functions used with template inheritance\n- removed /* vim: set expandtab: */ comments\n- bugfix of auto literal problem introduce with fix of 31/05/2010\n\n31/05/2010\n- bugfix the parser did not allow some smarty variables with special name like $for, $if, $else and others.\n\n27/05/2010\n- bugfix on object chaining using variable properties\n- make scope of {counter} and {cycle} tags again global as in Smarty2\n\n26/05/2010\n- bugfix removed decrepated register_resource call in smarty_internal_template.php\n\n25/05/2010\n- rewrite of template function handling to improve speed\n- bugfix on file dependency when merge_compiled_includes = true\n\n\n16/05/2010\n- bugfix when passing parameter with numeric name like {foo 1='bar' 2='blar'}\n\n14/05/2010\n- bugfix compile new config files if compile_check and force_compile = false\n- added variable static classes names to template syntax\n\n11/05/2010\n- bugfix  make sure that the cache resource is loaded in all conditions when template methods getCached... are called externally\n- reverted the change 0f 30/04/2010. With the exception of forward references template functions can be again called by a standard tag.\n\n10/05/2010\n- bugfix on {foreach} and {for} optimizations of 27/04/2010\n\n09/05/2010\n- update of template and config file parser because of minor parser generator bugs\n\n07/05/2010\n- bugfix on {insert}\n\n06/05/2010\n- bugfix when merging compiled templates and objects are passed as parameter of the {include} tag\n\n05/05/2010\n- bugfix on {insert} to cache parameter\n- implementation of $smarty->default_modifiers as in Smarty2\n- bugfix on getTemplateVars method\n\n01/05/2010\n- bugfix on handling of variable method names at object chaning\n\n30/04/2010\n- bugfix when comparing timestamps in sysplugins/smarty_internal_config.php\n- work around of a substr_compare bug in older PHP5 versions\n- bugfix on template inheritance for tag names starting with \"block\"\n- bugfix on {function} tag with name attribute in doublequoted strings\n- fix to make calling of template functions unambiguously by madatory usage of the {call} tag\n\n##  RC1 -\n\n27/04/2010\n- change default of $debugging_ctrl to 'NONE'\n- optimization of compiled code of {foreach} and {for} loops\n- change of compiler for config variables\n\n27/04/2010\n- bugfix in $smarty->cache->clear() method. (do not cache template object)\n\n\n17/04/2010\n- security fix in {math} plugin\n\n\n12/04/2010\n- bugfix in smarty_internal_templatecompilerbase (overloaded property)\n- removed parser restrictions in using true,false and null as ID\n\n07/04/2010\n- bugfix typo in smarty_internal_templatecompilerbase\n\n31/03/2010\n- compile locking by touching old compiled files to avoid concurrent compilations\n\n29/03/2010\n- bugfix allow array definitions as modifier parameter\n- bugfix observe compile_check property when loading config files\n- added the template object as third filter parameter\n\n25/03/2010\n- change of utility->compileAllTemplates() log messages\n- bugfix on nocache code in {function} tags\n- new method utility->compileAllConfig() to compile all config files\n\n24/03/2010\n- bugfix on register->modifier() error messages\n\n23/03/2010\n- bugfix on template inheritance when calling multiple child/parent relations\n- bugfix on caching mode SMARTY_CACHING_LIFETIME_SAVED and cache_lifetime = 0\n\n22/03/2010\n- bugfix make directory separator operating system independend in compileAllTemplates()\n\n21/03/2010\n- removed unused code in compileAllTemplates()\n\n19/03/2010\n- bugfix for multiple {/block} tags on same line\n\n17/03/2010\n- bugfix make $smarty->cache->clear() function independent from caching status\n\n16/03/2010\n- bugfix on assign attribute at registered template objects\n- make handling of modifiers on expression BC to Smarty2\n\n15/03/2010\n- bugfix on block plugin calls\n\n11/03/2010\n- changed parsing of <?php and ?> back to Smarty2 behaviour\n\n08/03/2010\n- bugfix on uninitialized properties in smarty_internal_template\n- bugfix on $smarty->disableSecurity()\n\n04/03/2010\n- bugfix allow uppercase chars in registered resource names\n- bugfix on accessing chained objects of static classes\n\n01/03/2010\n- bugfix on nocache code in {block} tags if child template was included by {include}\n\n27/02/2010\n- allow block tags inside double quoted string\n\n26/02/2010\n- cache modified check implemented\n- support of access to a class constant from an object (since PHP 5.3)\n\n24/02/2010\n- bugfix on expressions in doublequoted string enclosed in backticks\n- added security property $static_classes for static class security\n\n18/02/2010\n- bugfix on parsing Smarty tags inside <?xml ... ?>\n- bugfix on truncate modifier\n\n17/02/2010\n- removed restriction that modifiers did require surrounding parenthesis in some cases\n- added {$smarty.block.child} special variable for template inheritance\n\n16/02/2010\n- bugfix on <?xml ... ?> tags for all php_handling modes\n- bugfix on parameter of variablefilter.htmlspecialchars.php plugin\n\n14/02/2010\n- added missing _plugins property in smarty.class.php\n- bugfix $smarty.const... inside doublequoted strings and backticks was compiled into wrong PHP code\n\n12/02/2010\n- bugfix on nested {block} tags\n- changed Smarty special variable $smarty.parent to $smarty.block.parent\n- added support of nested {bock} tags\n\n10/02/2010\n- avoid possible notice on $smarty->cache->clear(...), $smarty->clear_cache(....)\n- allow Smarty tags inside <? ... ?> tags in SMARTY_PHP_QUOTE and SMARTY_PHP_PASSTHRU mode\n- bugfix at new \"for\" syntax like {for $x=1 to 10 step 2}\n\n09/02/2010\n- added $smarty->_tag_stack for tracing block tag hierarchy\n\n08/02/2010\n- bugfix  use template fullpath at \u00a7smarty->cache->clear(...), $smarty->clear_cache(....)\n- bugfix of cache filename on extended templates when force_compile=true\n\n07/02/2010\n- bugfix on changes of 05/02/2010\n- preserve line endings type form template source\n- API changes (see README file)\n\n05/02/2010\n- bugfix on modifier and block plugins with same name\n\n02/02/2010\n- retaining newlines at registered functions and function plugins\n\n01/25/2010\n- bugfix cache resource was not loaded when caching was globally off but enabled at a template object\n- added test that $_SERVER['SCRIPT_NAME'] does exist in Smarty.class.php\n\n01/22/2010\n- new method $smarty->createData([$parent]) for creating a data object (required for bugfixes below)\n- bugfix config_load() method now works also on a data object\n- bugfix get_config_vars() method now works also on a data and template objects\n- bugfix clear_config() method now works also on a data and template objects\n\n01/19/2010\n- bugfix on plugins if same plugin was called from a nocache section first and later from a cached section\n\n\n###beta 7###\n\n\n01/17/2010\n- bugfix on $smarty.const... in double quoted strings\n\n01/16/2010\n- internal change of config file lexer/parser on handling of section names\n- bugfix on registered objects (format parameter of register_object was not handled correctly)\n\n01/14/2010\n- bugfix on backslash within single quoted strings\n- bugfix allow absolute filepath for config files\n- bugfix on special Smarty variable $smarty.cookies\n- revert handling of newline on no output tags like {if...}\n- allow special characters in config file section names for Smarty2 BC\n\n01/13/2010\n- bugfix on {if} tags\n\n01/12/2010\n- changed back modifier handling in parser. Some restrictions still apply:\n    if modifiers are used in side {if...} expression or in mathematical expressions\n    parentheses must be used.\n- bugfix the {function..} tag did not accept the name attribute in double quotes\n- closed possible security hole at <?php ... ?> tags\n- bugfix of config file parser on large config files\n\n\n###beta 6####\n\n01/11/2010\n- added \\n to the compiled code of the {if},{else},{elseif},{/if} tags to get output of newlines as expected by the template source\n- added missing support of insert plugins\n- added optional nocache attribute to {block} tags in parent template\n- updated <?php...?> handling supporting now heredocs and newdocs. (thanks to Thue Jnaus Kristensen)\n\n01/09/2010\n- bugfix on nocache {block} tags in parent templates\n\n01/08/2010\n- bugfix on variable filters. filter/nofilter attributes did not work on output statements\n\n01/07/2010\n- bugfix on file dependency at template inheritance\n- bugfix on nocache code at template inheritance\n\n01/06/2010\n- fixed typo in smarty_internal_resource_registered\n- bugfix for custom delimiter at extends resource and {extends} tag\n\n01/05/2010\n- bugfix sha1() calculations at extends resource and some general improvments on sha1() handling\n\n\n01/03/2010\n- internal change on building cache files\n\n01/02/2010\n- update cached_timestamp at the template object after cache file is written to avoid possible side effects\n- use internally always SMARTY_CACHING_LIFETIME_* constants\n\n01/01/2010\n- bugfix for obtaining plugins which must be included (related to change of 12/30/2009)\n- bugfix for {php} tag (trow an exception if allow_php_tag = false)\n\n12/31/2009\n- optimization of generated code for doublequoted strings containing variables\n- rewrite of {function} tag handling\n  - can now be declared in an external subtemplate\n  - can contain nocache sections (nocache_hash handling)\n  - can be called in noccache sections (nocache_hash handling)\n  - new {call..} tag to call template functions with a variable name {call name=$foo}\n- fixed nocache_hash handling in merged compiled templates\n\n12/30/2009\n- bugfix for plugins defined in the script as smarty_function_foo\n\n12/29/2009\n- use sha1() for filepath encoding\n- updates on nocache_hash handling\n- internal change on merging some data\n- fixed cache filename for custom resources\n\n12/28/2009\n- update for security fixes\n- make modifier plugins always trusted\n- fixed bug loading modifiers in child template at template inheritance\n\n12/27/2009\n--- this is a major update with a couple of internal changes ---\n- new config file lexer/parser (thanks to Thue Jnaus Kristensen)\n- template lexer/parser fixes for PHP and {literal} handing (thanks to Thue Jnaus Kristensen)\n- fix on registered plugins with different type but same name\n- rewrite of plugin handling (optimized execution speed)\n- closed a security hole regarding PHP code injection into cache files\n- fixed bug in clear cache handling\n- Renamed a couple of internal classes\n- code cleanup for merging compiled templates\n- couple of runtime optimizations (still not all done)\n- update of getCachedTimestamp()\n- fixed bug on modifier plugins at nocache output\n\n12/19/2009\n- bugfix on comment lines in config files\n\n12/17/2009\n- bugfix of parent/global variable update at included/merged subtemplates\n- encode final template filepath into filename of compiled and cached files\n- fixed {strip} handling in auto literals\n\n12/16/2009\n- update of changelog\n- added {include file='foo.tpl' inline}  inline option to merge compiled code of subtemplate into the calling template\n\n12/14/2009\n- fixed sideefect of last modification (objects in array index did not work anymore)\n\n12/13/2009\n- allow boolean negation (\"!\") as operator on variables outside {if} tag\n\n12/12/2009\n- bugfix on single quotes inside {function} tag\n- fix short append/prepend attributes in {block} tags\n\n12/11/2009\n- bugfix on clear_compiled_tpl (avoid possible warning)\n\n12/10/2009\n- bugfix on {function} tags and template inheritance\n\n12/05/2009\n- fixed problem when a cached file was fetched several times\n- removed unneeded lexer code\n\n12/04/2009\n- added max attribute to for loop\n- added security mode allow_super_globals\n\n12/03/2009\n- template inheritance: child templates can now call functions defined by the {function} tag in the parent template\n- added {for $foo = 1 to 5 step 2}  syntax\n- bugfix for {$foo.$x.$y.$z}\n\n12/01/2009\n- fixed parsing of names of special formated tags like if,elseif,while,for,foreach\n- removed direct access to constants in templates because of some syntax problems\n- removed cache resource plugin for mysql from the distribution\n- replaced most hard errors (exceptions) by softerrors(trigger_error) in plugins\n- use $template_class property for template class name when compiling {include},{eval} and {extends} tags\n\n11/30/2009\n- map 'true' to SMARTY_CACHING_LIFETIME_CURRENT for the $smarty->caching parameter\n- allow {function} tags within {block} tags\n\n11/28/2009\n- ignore compile_id at debug template\n- added direct access to constants in templates\n- some lexer/parser optimizations\n\n11/27/2009\n- added cache resource MYSQL plugin\n\n11/26/2009\n- bugfix on nested doublequoted strings\n- correct line number on unknown tag error message\n- changed {include} compiled code\n- fix on checking dynamic varibales with error_unassigned = true\n\n11/25/2009\n- allow the following writing for boolean: true, TRUE, True, false, FALSE, False\n- {strip} tag functionality rewritten\n\n11/24/2009\n- bugfix for $smarty->config_overwrite = false\n\n11/23/2009\n- suppress warnings on unlink caused by race conditions\n- correct line number on unknown tag error message\n\n------- beta 5\n11/23/2009\n- fixed configfile parser for text starting with a numeric char\n- the default_template_handler_func may now return a filepath to a template source\n\n11/20/2009\n- bugfix for empty config files\n- convert timestamps of registered resources to integer\n\n11/19/2009\n- compiled templates are no longer touched with the filemtime of template source\n\n11/18/2009\n- allow integer as attribute name in plugin calls\n\n------- beta 4\n11/18/2009\n- observe umask settings when setting file permissions\n- avoide unneeded cache file creation for subtemplates which did occur in some situations\n- make $smarty->_current_file available during compilation for Smarty2 BC\n\n11/17/2009\n- sanitize compile_id and cache_id (replace illegal chars with _)\n- use _dir_perms and _file_perms properties at file creation\n- new constant SMARTY_RESOURCE_DATE_FORMAT (default '%b %e, %Y') which is used as default format in modifier date_format\n- added {foreach $array as $key=>$value} syntax\n- renamed extend tag and resource to extends: {extends file='foo.tol'} , $smarty->display('extends:foo.tpl|bar.tpl);\n- bugfix cycle plugin\n\n11/15/2009\n- lexer/parser optimizations on quoted strings\n\n11/14/2009\n- bugfix on merging compiled templates when source files got removed or renamed.\n- bugfix modifiers on registered object tags\n- fixed locaion where outputfilters are running\n- fixed config file definitions at EOF\n- fix on merging compiled templates with nocache sections in nocache includes\n- parser could run into a PHP error on wrong file attribute\n\n11/12/2009\n- fixed variable filenames in {include_php} and {insert}\n- added scope to Smarty variables in the {block} tag compiler\n- fix on nocache code in child {block} tags\n\n11/11/2009\n- fixed {foreachelse}, {forelse}, {sectionelse} compiled code at nocache variables\n- removed checking for reserved variables\n- changed debugging handling\n\n11/10/2009\n- fixed preg_qoute on delimiters\n\n11/09/2009\n- lexer/parser bugfix\n- new SMARTY_SPL_AUTOLOAD constant to control the autoloader option\n- bugfix for {function} block tags in included templates\n\n11/08/2009\n- fixed alphanumeric array index\n- bugfix on complex double quoted strings\n\n11/05/2009\n- config_load method can now be called on data and template objects\n\n11/04/2009\n- added typecasting support for template variables\n- bugfix on complex indexed special Smarty variables\n\n11/03/2009\n- fixed parser error on objects with special smarty vars\n- fixed file dependency for {incude} inside {block} tag\n- fixed not compiling on non existing compiled templates when compile_check = false\n- renamed function names of autoloaded Smarty methods to Smarty_Method_....\n- new security_class property (default is Smarty_Security)\n\n11/02/2009\n- added neq,lte,gte,mod as aliases to if conditions\n- throw exception on illegal Smarty() constructor calls\n\n10/31/2009\n- change of filenames in sysplugins folder for internal spl_autoload function\n- lexer/parser changed for increased compilation speed\n\n10/27/2009\n- fixed missing quotes in include_php.php\n\n10/27/2009\n- fixed typo in method.register_resource\n- pass {} through as literal\n\n10/26/2009\n- merge only compiled subtemplates into the compiled code of the main template\n\n10/24/2009\n- fixed nocache vars at internal block tags\n- fixed merging of recursive includes\n\n10/23/2009\n- fixed nocache var problem\n\n10/22/2009\n- fix trimwhitespace outputfilter parameter\n\n10/21/2009\n- added {$foo++}{$foo--} syntax\n- buxfix changed PHP \"if (..):\" to \"if (..){\" because of possible bad code when concenating PHP tags\n- autoload Smarty internal classes\n- fixed file dependency for config files\n- some code optimizations\n- fixed function definitions on some autoloaded methods\n- fixed nocache variable inside if condition of {if} tag\n\n10/20/2009\n- check at compile time for variable filter to improve rendering speed if no filter is used\n- fixed bug at combination of {elseif} tag and {...} in double quoted strings of static class parameter\n\n10/19/2009\n- fixed compiled template merging on variable double quoted strings as name\n- fixed bug in caching mode 2 and cache_lifetime -1\n- fixed modifier support on block tags\n\n10/17/2009\n- remove ?>\\n<?php and ?><?php sequences from compiled template\n\n10/15/2009\n- buxfix on assigning array elements inside templates\n- parser bugfix on array access\n\n10/15/2009\n- allow bit operator '&' inside {if} tag\n- implementation of ternary operator\n\n10/13/2009\n- do not recompile evaluated templates if reused just with other data\n- recompile config files when config properties did change\n- some lexer/parser otimizations\n\n10/11/2009\n- allow {block} tags inside included templates\n- bugfix for resource plugins in Smarty2 format\n- some optimizations of internal.template.php\n\n10/11/2009\n- fixed bug when template with same name is used with different data objects\n- fixed bug with double quoted name attribute at {insert} tag\n- reenabled assign_by_ref and append_by_ref methods\n\n10/07/2009\n- removed block nesting checks for {capture}\n\n10/05/2009\n- added support of \"isinstance\" to {if} tag\n\n10/03/2009\n- internal changes to improve performance\n- fix registering of filters for classes\n\n10/01/2009\n- removed default timezone setting\n- reactivated PHP resource for simple PHP templates. Must set allow_php_templates = true to enable\n- {PHP} tag can be enabled by allow_php_tag = true\n\n09/30/2009\n- fixed handling template_exits method for all resource types\n- bugfix for other cache resources than file\n- the methods assign_by_ref is now wrapped to assign, append_by_ref to append\n- allow arrays of variables pass in display, fetch and createTemplate calls\n  $data = array('foo'=>'bar','foo2'=>'blar');\n  $smarty->display('my.tpl',$data);\n\n09/29/2009\n- changed {php} tag handling\n- removed support of Smarty::instance()\n- removed support of PHP resource type\n- improved execution speed of {foreach} tags\n- fixed bug in {section} tag\n\n09/23/2009\n- improvements and bugfix on {include} tag handling\nNOTICE: existing compiled template and cache files must be deleted\n\n09/19/2009\n- replace internal \"eval()\" calls by \"include\" during rendering process\n- speed improvment for templates which have included subtemplates\n    the compiled code of included templates is merged into the compiled code of the parent template\n- added logical operator \"xor\" for {if} tag\n- changed parameter ordering for Smarty2 BC\n    fetch($template, $cache_id = null, $compile_id = null, $parent = null)\n    display($template, $cache_id = null, $compile_id = null, $parent = null)\n    createTemplate($template, $cache_id = null, $compile_id = null, $parent = null)\n- property resource_char_set is now replaced by constant SMARTY_RESOURCE_CHAR_SET\n- fixed handling of classes in registered blocks\n- speed improvement of lexer on text sections\n\n09/01/2009\n- dropped nl2br as plugin\n- added '<>' as comparission operator in {if} tags\n- cached caching_lifetime property to cache_liftime for backward compatibility with Smarty2.\n  {include} optional attribute is also now cache_lifetime\n- fixed trigger_error method (moved into Smarty class)\n- version is now  Beta!!!\n\n\n08/30/2009\n- some speed optimizations on loading internal plugins\n\n\n08/29/2009\n- implemented caching of registered Resources\n- new property 'auto_literal'. if true(default)  '{ ' and ' }' interpreted as literal, not as Smarty delimiter\n\n\n08/28/2009\n- Fix on line breaks inside {if} tags\n\n08/26/2009\n- implemented registered resources as in Smarty2. NOTE: caching does not work yet\n- new property 'force_cache'. if true it forces the creation of a new cache file\n- fixed modifiers on arrays\n- some speed optimization on loading internal classes\n\n\n08/24/2009\n- fixed typo in lexer definition for '!==' operator\n- bugfix - the ouput of plugins was not cached\n- added global variable SCRIPT_NAME\n\n08/21/2009\n- fixed problems whitespace in conjuction with custom delimiters\n- Smarty tags can now be used as value anywhere\n\n08/18/2009\n- definition of template class name moded in internal.templatebase.php\n- whitespace parser changes\n\n08/12/2009\n- fixed parser problems\n\n08/11/2009\n- fixed parser problems with custom delimiter\n\n08/10/2009\n- update of mb support in plugins\n\n\n08/09/2009\n- fixed problems with doublequoted strings at name attribute of {block} tag\n- bugfix at scope attribute of {append} tag\n\n08/08/2009\n- removed all internal calls of Smarty::instance()\n- fixed code in double quoted strings\n\n08/05/2009\n- bugfix mb_string support\n- bugfix of \\n.\\t etc in double quoted strings\n\n07/29/2009\n- added syntax for variable config vars  like  #$foo#\n\n07/28/2009\n- fixed parsing of $smarty.session vars containing objects\n\n07/22/2009\n- fix of \"$\" handling in double quoted strings\n\n07/21/2009\n- fix that {$smarty.current_dir} return correct value within {block} tags.\n\n07/20/2009\n- drop error message on unmatched {block} {/block} pairs\n\n07/01/2009\n- fixed smarty_function_html_options call in plugin function.html_select_date.php (missing ,)\n\n06/24/2009\n- fixed smarty_function_html_options call in plugin function.html_select_date.php\n\n06/22/2009\n- fix on \\n and spaces inside smarty tags\n- removed request_use_auto_globals propert as it is no longer needed because Smarty 3 will always run under PHP 5\n\n\n06/18/2009\n- fixed compilation of block plugins when caching enabled\n- added $smarty.current_dir  which returns the current working directory\n\n06/14/2009\n- fixed array access on super globals\n- allow smarty tags within xml tags\n\n06/13/2009\n- bugfix at extend resource: create unique files for compiled template and cache for each combination of template files\n- update extend resource to handle appen and prepend block attributes\n- instantiate classes of plugins instead of calling them static\n\n06/03/2009\n- fixed repeat at block plugins\n\n05/25/2009\n- fixed problem with caching of compiler plugins\n\n05/14/2009\n- fixed directory separator handling\n\n05/09/2009\n- syntax change for stream variables\n- fixed bug when using absolute template filepath and caching\n\n05/08/2009\n- fixed bug of {nocache}  tag in included templates\n\n05/06/2009\n- allow that plugins_dir folder names can end without directory separator\n\n05/05/2009\n- fixed E_STRICT incompabilities\n- {function} tag bug fix\n- security policy definitions have been moved from plugins folder to file Security.class.php in libs folder\n- added allow_super_global configuration to security\n\n04/30/2009\n- functions defined with the {function} tag now always have global scope\n\n04/29/2009\n- fixed problem with directory setter methods\n- allow that cache_dir can end without directory separator\n\n04/28/2009\n- the {function} tag can no longer overwrite standard smarty tags\n- inherit functions defined by the {fuction} tag into subtemplates\n- added {while <statement>} sytax to while tag\n\n04/26/2009\n- added trusted stream checking to security\n- internal changes at file dependency check for caching\n\n04/24/2009\n- changed name of {template} tag to {function}\n- added new {template} tag\n\n04/23/2009\n- fixed access of special smarty variables from included template\n\n04/22/2009\n- unified template stream syntax with standard Smarty resource syntax  $smarty->display('mystream:mytemplate')\n\n04/21/2009\n- change of new style syntax for forach. Now:  {foreach $array as $var}  like in PHP\n\n04/20/2009\n- fixed \"$foo.bar  ...\" variable replacement in double quoted strings\n- fixed error in {include} tag with variable file attribute\n\n04/18/2009\n- added stream resources  ($smarty->display('mystream://mytemplate'))\n- added stream variables  {$mystream:myvar}\n\n04/14/2009\n- fixed compile_id handling on {include} tags\n- fixed append/prepend attributes in {block} tag\n- added  {if  'expression' is in 'array'}  syntax\n- use crc32 as hash for compiled config files.\n\n04/13/2009\n- fixed scope problem with parent variables when appending variables within templates.\n- fixed code for {block} without childs (possible sources for notice errors removed)\n\n04/12/2009\n- added append and prepend attribute to {block} tag\n\n04/11/2009\n- fixed variables in 'file' attribute of {extend} tag\n- fixed problems in modifiers (if mb string functions not present)\n\n04/10/2009\n- check if mb string functions available otherwise fallback to normal string functions\n- added global variable scope SMARTY_GLOBAL_SCOPE\n- enable 'variable' filter by default\n- fixed {$smarty.block.parent.foo}\n- implementation of a 'variable' filter as replacement for default modifier\n\n04/09/2009\n- fixed execution of filters defined by classes\n- compile the always the content of {block} tags to make shure that the filters are running over it\n- syntax corrections on variable object property\n- syntax corrections on array access in dot syntax\n\n04/08/2009\n- allow variable object property\n\n04/07/2009\n- changed variable scopes to SMARTY_LOCAL_SCOPE, SMARTY_PARENT_SCOPE, SMARTY_ROOT_SCOPE to avoid possible conflicts with user constants\n- Smarty variable global attribute replaced with scope attribute\n\n04/06/2009\n- variable scopes LOCAL_SCOPE, PARENT_SCOPE, ROOT_SCOPE\n- more getter/setter methods\n\n04/05/2009\n- replaced new array looping syntax {for $foo in $array} with {foreach $foo in $array} to avoid confusion\n- added append array for short form of assign  {$foo[]='bar'} and allow assignments to nested arrays {$foo['bla']['blue']='bar'}\n\n04/04/2009\n- make output of template default handlers cachable and save compiled source\n- some fixes on yesterdays update\n\n04/03/2006\n- added registerDefaultTemplateHandler method and functionallity\n- added registerDefaultPluginHandler method and functionallity\n- added {append} tag to extend Smarty array variabled\n\n04/02/2009\n- added setter/getter methods\n- added $foo@first and $foo@last properties at {for} tag\n- added $set_timezone (true/false) property to setup optionally the default time zone\n\n03/31/2009\n- bugfix smarty.class and internal.security_handler\n- added compile_check configuration\n- added setter/getter methods\n\n03/30/2009\n- added all major setter/getter methods\n\n03/28/2009\n- {block} tags can be nested now\n- md5 hash function replace with crc32 for speed optimization\n- file order for exted resource inverted\n- clear_compiled_tpl and clear_cache_all will not touch .svn folder any longer\n\n03/27/2009\n- added extend resource\n\n03/26/2009\n- fixed parser not to create error on `word` in double quoted strings\n- allow PHP  array(...)\n- implemented  $smarty.block.name.parent to access parent block content\n- fixed smarty.class\n\n\n03/23/2009\n- fixed {foreachelse} and {forelse} tags\n\n03/22/2009\n- fixed possible sources for notice errors\n- rearrange SVN into distribution and development folders\n\n03/21/2009\n- fixed exceptions in function plugins\n- fixed notice error in Smarty.class.php\n- allow chained objects to span multiple lines\n- fixed error in modifiers\n\n03/20/2009\n- moved /plugins folder into /libs folder\n- added noprint modifier\n- autoappend a directory separator if the xxxxx_dir definition have no trailing one\n\n03/19/2009\n- allow array definition as modifier parameter\n- changed modifier to use multi byte string funktions.\n\n03/17/2009\n- bugfix\n\n03/15/2009\n- added {include_php} tag for BC\n- removed @ error suppression\n- bugfix fetch did always repeat output of first call when calling same template several times\n- PHPunit tests extended\n\n03/13/2009\n- changed block syntax to be Smarty like  {block:titel} -> {block name=titel}\n- compiling of {block} and {extend} tags rewriten for better performance\n- added special Smarty variable block  ($smarty.block.foo} returns the parent definition of block foo\n- optimization of {block} tag compiled code.\n- fixed problem with escaped double quotes in double quoted strings\n\n03/12/2009\n- added support of template inheritance by {extend } and {block } tags.\n- bugfix comments within literals\n- added scope attribuie to {include} tag\n\n03/10/2009\n- couple of bugfixes and improvements\n- PHPunit tests extended\n\n03/09/2009\n- added support for global template vars.  {assign_global...}  $smarty->assign_global(...)\n- added direct_access_security\n- PHPunit tests extended\n- added missing {if} tag conditions like \"is div by\" etc.\n\n03/08/2009\n- splitted up the Compiler class to make it easier to use a coustom compiler\n- made default plugins_dir relative to Smarty root and not current working directory\n- some changes to make the lexer parser better configurable\n- implemented {section} tag for Smarty2 BC\n\n03/07/2009\n- fixed problem with comment tags\n- fixed problem with #xxxx in double quoted string\n- new {while} tag implemented\n- made lexer and paser class configurable as $smarty property\n- Smarty method get_template_vars implemented\n- Smarty method get_registered_object implemented\n- Smarty method trigger_error implemented\n- PHPunit tests extended\n\n03/06/2009\n- final changes on config variable handling\n- parser change - unquoted strings will by be converted into single quoted strings\n- PHPunit tests extended\n- some code cleanup\n- fixed problem on catenate strings with expression\n- update of count_words modifier\n- bugfix on comment tags\n\n\n03/05/2009\n- bugfix on <?xml...> tag with caching enabled\n- changes on exception handling (by Monte)\n\n03/04/2009\n- added support for config variables\n- bugfix on <?xml...> tag\n\n03/02/2009\n- fixed unqouted strings within modifier parameter\n- bugfix parsing of mofifier parameter\n\n03/01/2009\n- modifier chaining works now as in Smarty2\n\n02/28/2009\n- changed handling of unqouted strings\n\n02/26/2009\n- bugfix\n- changed $smarty.capture.foo to be global for Smarty2 BC.\n\n02/24/2009\n- bugfix {php} {/php} tags for backward compatibility\n- bugfix for expressions on arrays\n- fixed usage of \"null\" value\n- added $smarty.foreach.foo.first and $smarty.foreach.foo.last\n\n02/06/2009\n- bugfix for request variables without index  for example $smarty.get\n- experimental solution for variable functions in static class\n\n02/05/2009\n- update of popup plugin\n- added config variables to template parser (load config functions still missing)\n- parser bugfix for empty quoted strings\n\n02/03/2009\n- allow array of objects as static class variabales.\n- use htmlentities at source output at template errors.\n\n02/02/2009\n- changed search order on modifiers to look at plugins folder first\n- parser bug fix for modifier on array elements  $foo.bar|modifier\n- parser bug fix on single quoted srings\n- internal: splitted up compiler plugin files\n\n02/01/2009\n- allow method chaining on static classes\n- special Smarty variables  $smarty.... implemented\n- added {PHP} {/PHP} tags for backward compatibility\n\n01/31/2009\n- added {math} plugin for Smarty2 BC\n- added template_exists method\n- changed Smarty3 method enable_security() to enableSecurity() to follow camelCase standards\n\n01/30/2009\n- bugfix in single quoted strings\n- changed syntax for variable property access from $foo:property to $foo@property because of ambiguous syntax at modifiers\n\n01/29/2009\n- syntax for array definition changed from (1,2,3) to [1,2,3] to remove ambiguous syntax\n- allow  {for $foo in [1,2,3]} syntax\n- bugfix in double quoted strings\n- allow <?xml...?> tags in template even if short_tags are enabled\n\n01/28/2009\n- fixed '!==' if condition.\n\n01/28/2009\n- added support of {strip} {/strip} tag.\n\n01/27/2009\n- bug fix on backticks in double quoted strings at objects\n\n01/25/2009\n- Smarty2 modfiers added to SVN\n\n01/25/2009\n- bugfix allow arrays at object properties in Smarty syntax\n- the template object is now passed as additional parameter at plugin calls\n- clear_compiled_tpl method completed\n\n01/20/2009\n- access to class constants implemented  ( class::CONSTANT )\n- access to static class variables implemented ( class::$variable )\n- call of static class methods implemented ( class::method() )\n\n01/16/2009\n- reallow leading _ in variable names  {$_var}\n- allow array of objects  {$array.index->method()} syntax\n- finished work on clear_cache and clear_cache_all methods\n\n01/11/2009\n- added support of {literal} tag\n- added support of {ldelim} and {rdelim} tags\n- make code compatible to run with E_STRICT error setting\n\n01/08/2009\n- moved clear_assign and clear_all_assign to internal.templatebase.php\n- added assign_by_ref, append and append_by_ref methods\n\n01/02/2009\n- added load_filter method\n- fished work on filter handling\n- optimization of plugin loading\n\n12/30/2008\n- added compiler support of registered object\n- added backtick support in doubled quoted strings for backward compatibility\n- some minor bug fixes and improvments\n\n12/23/2008\n- fixed problem of not working \"not\" operator in if-expressions\n- added handling of compiler function plugins\n- finished work on (un)register_compiler_function method\n- finished work on (un)register_modifier method\n- plugin handling from plugins folder changed for modifier plugins\n  deleted - internal.modifier.php\n- added modifier chaining to parser\n\n12/17/2008\n- finished (un)register_function method\n- finished (un)register_block method\n- added security checking for PHP functions in PHP templates\n- plugin handling from plugins folder rewritten\n  new - internal.plugin_handler.php\n  deleted - internal.block.php\n  deleted - internal.function.php\n- removed plugin checking from security handler\n\n12/16/2008\n\n- new start of this change_log file\n", "<?php\n/**\n * This file is part of Smarty.\n *\n * (c) 2015 Uwe Tews\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Smarty Internal Plugin Compile Block Class\n *\n * @author Uwe Tews <uwe.tews@googlemail.com>\n */\nclass Smarty_Internal_Compile_Block extends Smarty_Internal_Compile_Shared_Inheritance\n{\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $required_attributes = array('name');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $shorttag_order = array('name');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $option_flags = array('hide', 'nocache');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $optional_attributes = array('assign');\n\n    /**\n     * Compiles code for the {block} tag\n     *\n     * @param array                                 $args      array with attributes from parser\n     * @param \\Smarty_Internal_TemplateCompilerBase $compiler  compiler object\n     * @param array                                 $parameter array with compilation parameter\n     */\n    public function compile($args, Smarty_Internal_TemplateCompilerBase $compiler, $parameter)\n    {\n        if (!isset($compiler->_cache[ 'blockNesting' ])) {\n            $compiler->_cache[ 'blockNesting' ] = 0;\n        }\n        if ($compiler->_cache[ 'blockNesting' ] === 0) {\n            // make sure that inheritance gets initialized in template code\n            $this->registerInit($compiler);\n            $this->option_flags = array('hide', 'nocache', 'append', 'prepend');\n        } else {\n            $this->option_flags = array('hide', 'nocache');\n        }\n        // check and get attributes\n        $_attr = $this->getAttributes($compiler, $args);\n        ++$compiler->_cache[ 'blockNesting' ];\n        $_className = 'Block_' . preg_replace('![^\\w]+!', '_', uniqid(mt_rand(), true));\n        $compiler->_cache[ 'blockName' ][ $compiler->_cache[ 'blockNesting' ] ] = $_attr[ 'name' ];\n        $compiler->_cache[ 'blockClass' ][ $compiler->_cache[ 'blockNesting' ] ] = $_className;\n        $compiler->_cache[ 'blockParams' ][ $compiler->_cache[ 'blockNesting' ] ] = array();\n        $compiler->_cache[ 'blockParams' ][ 1 ][ 'subBlocks' ][ trim($_attr[ 'name' ], '\"\\'') ][] = $_className;\n        $this->openTag(\n            $compiler,\n            'block',\n            array(\n                $_attr, $compiler->nocache, $compiler->parser->current_buffer,\n                $compiler->template->compiled->has_nocache_code,\n                $compiler->template->caching\n            )\n        );\n        $compiler->saveRequiredPlugins(true);\n        $compiler->nocache = $compiler->nocache | $compiler->tag_nocache;\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        $compiler->template->compiled->has_nocache_code = false;\n        $compiler->suppressNocacheProcessing = true;\n    }\n}\n\n/**\n * Smarty Internal Plugin Compile BlockClose Class\n */\nclass Smarty_Internal_Compile_Blockclose extends Smarty_Internal_Compile_Shared_Inheritance\n{\n    /**\n     * Compiles code for the {/block} tag\n     *\n     * @param array                                 $args      array with attributes from parser\n     * @param \\Smarty_Internal_TemplateCompilerBase $compiler  compiler object\n     * @param array                                 $parameter array with compilation parameter\n     *\n     * @return bool true\n     */\n    public function compile($args, Smarty_Internal_TemplateCompilerBase $compiler, $parameter)\n    {\n        list($_attr, $_nocache, $_buffer, $_has_nocache_code, $_caching) = $this->closeTag($compiler, array('block'));\n        // init block parameter\n        $_block = $compiler->_cache[ 'blockParams' ][ $compiler->_cache[ 'blockNesting' ] ];\n        unset($compiler->_cache[ 'blockParams' ][ $compiler->_cache[ 'blockNesting' ] ]);\n        $_name = $_attr[ 'name' ];\n        $_assign = isset($_attr[ 'assign' ]) ? $_attr[ 'assign' ] : null;\n        unset($_attr[ 'assign' ], $_attr[ 'name' ]);\n        foreach ($_attr as $name => $stat) {\n            if ((is_bool($stat) && $stat !== false) || (!is_bool($stat) && $stat !== 'false')) {\n                $_block[ $name ] = 'true';\n            }\n        }\n        $_className = $compiler->_cache[ 'blockClass' ][ $compiler->_cache[ 'blockNesting' ] ];\n        // get compiled block code\n        $_functionCode = $compiler->parser->current_buffer;\n        // setup buffer for template function code\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        $output = \"<?php\\n\";\n        $output .= \"/* {block {$_name}} */\\n\";\n        $output .= \"class {$_className} extends Smarty_Internal_Block\\n\";\n        $output .= \"{\\n\";\n        foreach ($_block as $property => $value) {\n            $output .= \"public \\${$property} = \" . var_export($value, true) . \";\\n\";\n        }\n        $output .= \"public function callBlock(Smarty_Internal_Template \\$_smarty_tpl) {\\n\";\n        $output .= $compiler->compileRequiredPlugins();\n        $compiler->restoreRequiredPlugins();\n        if ($compiler->template->compiled->has_nocache_code) {\n            $output .= \"\\$_smarty_tpl->cached->hashes['{$compiler->template->compiled->nocache_hash}'] = true;\\n\";\n        }\n        if (isset($_assign)) {\n            $output .= \"ob_start();\\n\";\n        }\n        $output .= \"?>\\n\";\n        $compiler->parser->current_buffer->append_subtree(\n            $compiler->parser,\n            new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                $output\n            )\n        );\n        $compiler->parser->current_buffer->append_subtree($compiler->parser, $_functionCode);\n        $output = \"<?php\\n\";\n        if (isset($_assign)) {\n            $output .= \"\\$_smarty_tpl->assign({$_assign}, ob_get_clean());\\n\";\n        }\n        $output .= \"}\\n\";\n        $output .= \"}\\n\";\n        $output .= \"/* {/block {$_name}} */\\n\\n\";\n        $output .= \"?>\\n\";\n        $compiler->parser->current_buffer->append_subtree(\n            $compiler->parser,\n            new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                $output\n            )\n        );\n        $compiler->blockOrFunctionCode .= $compiler->parser->current_buffer->to_smarty_php($compiler->parser);\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        // restore old status\n        $compiler->template->compiled->has_nocache_code = $_has_nocache_code;\n        $compiler->tag_nocache = $compiler->nocache;\n        $compiler->nocache = $_nocache;\n        $compiler->parser->current_buffer = $_buffer;\n        $output = \"<?php \\n\";\n        if ($compiler->_cache[ 'blockNesting' ] === 1) {\n            $output .= \"\\$_smarty_tpl->inheritance->instanceBlock(\\$_smarty_tpl, '$_className', $_name);\\n\";\n        } else {\n            $output .= \"\\$_smarty_tpl->inheritance->instanceBlock(\\$_smarty_tpl, '$_className', $_name, \\$this->tplIndex);\\n\";\n        }\n        $output .= \"?>\\n\";\n        --$compiler->_cache[ 'blockNesting' ];\n        if ($compiler->_cache[ 'blockNesting' ] === 0) {\n            unset($compiler->_cache[ 'blockNesting' ]);\n        }\n        $compiler->has_code = true;\n        $compiler->suppressNocacheProcessing = true;\n        return $output;\n    }\n}\n", "<?php\n/**\n * Smarty Internal Plugin Compile Function\n * Compiles the {function} {/function} tags\n *\n * @package    Smarty\n * @subpackage Compiler\n * @author     Uwe Tews\n */\n\n/**\n * Smarty Internal Plugin Compile Function Class\n *\n * @package    Smarty\n * @subpackage Compiler\n */\nclass Smarty_Internal_Compile_Function extends Smarty_Internal_CompileBase\n{\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $required_attributes = array('name');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $shorttag_order = array('name');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $optional_attributes = array('_any');\n\n    /**\n     * Compiles code for the {function} tag\n     *\n     * @param array                                 $args     array with attributes from parser\n     * @param \\Smarty_Internal_TemplateCompilerBase $compiler compiler object\n     *\n     * @return bool true\n     * @throws \\SmartyCompilerException\n     */\n    public function compile($args, Smarty_Internal_TemplateCompilerBase $compiler)\n    {\n        // check and get attributes\n        $_attr = $this->getAttributes($compiler, $args);\n        if ($_attr[ 'nocache' ] === true) {\n            $compiler->trigger_template_error('nocache option not allowed', null, true);\n        }\n        unset($_attr[ 'nocache' ]);\n        $_name = trim($_attr[ 'name' ], '\\'\"');\n\n        if (!preg_match('/^[a-zA-Z0-9_\\x80-\\xff]+$/', $_name)) {\n\t        $compiler->trigger_template_error(\"Function name contains invalid characters: {$_name}\", null, true);\n        }\n\n        $compiler->parent_compiler->tpl_function[ $_name ] = array();\n        $save = array(\n            $_attr, $compiler->parser->current_buffer, $compiler->template->compiled->has_nocache_code,\n            $compiler->template->caching\n        );\n        $this->openTag($compiler, 'function', $save);\n        // Init temporary context\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        $compiler->template->compiled->has_nocache_code = false;\n        $compiler->saveRequiredPlugins(true);\n        return true;\n    }\n}\n\n/**\n * Smarty Internal Plugin Compile Functionclose Class\n *\n * @package    Smarty\n * @subpackage Compiler\n */\nclass Smarty_Internal_Compile_Functionclose extends Smarty_Internal_CompileBase\n{\n    /**\n     * Compiler object\n     *\n     * @var object\n     */\n    private $compiler = null;\n\n    /**\n     * Compiles code for the {/function} tag\n     *\n     * @param array                                        $args     array with attributes from parser\n     * @param object|\\Smarty_Internal_TemplateCompilerBase $compiler compiler object\n     *\n     * @return bool true\n     */\n    public function compile($args, Smarty_Internal_TemplateCompilerBase $compiler)\n    {\n        $this->compiler = $compiler;\n        $saved_data = $this->closeTag($compiler, array('function'));\n        $_attr = $saved_data[ 0 ];\n        $_name = trim($_attr[ 'name' ], '\\'\"');\n        $compiler->parent_compiler->tpl_function[ $_name ][ 'compiled_filepath' ] =\n            $compiler->parent_compiler->template->compiled->filepath;\n        $compiler->parent_compiler->tpl_function[ $_name ][ 'uid' ] = $compiler->template->source->uid;\n        $_parameter = $_attr;\n        unset($_parameter[ 'name' ]);\n        // default parameter\n        $_paramsArray = array();\n        foreach ($_parameter as $_key => $_value) {\n            if (is_int($_key)) {\n                $_paramsArray[] = \"$_key=>$_value\";\n            } else {\n                $_paramsArray[] = \"'$_key'=>$_value\";\n            }\n        }\n        if (!empty($_paramsArray)) {\n            $_params = 'array(' . implode(',', $_paramsArray) . ')';\n            $_paramsCode = \"\\$params = array_merge($_params, \\$params);\\n\";\n        } else {\n            $_paramsCode = '';\n        }\n        $_functionCode = $compiler->parser->current_buffer;\n        // setup buffer for template function code\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        $_funcName = \"smarty_template_function_{$_name}_{$compiler->template->compiled->nocache_hash}\";\n        $_funcNameCaching = $_funcName . '_nocache';\n        if ($compiler->template->compiled->has_nocache_code) {\n            $compiler->parent_compiler->tpl_function[ $_name ][ 'call_name_caching' ] = $_funcNameCaching;\n            $output = \"<?php\\n\";\n            $output .= \"/* {$_funcNameCaching} */\\n\";\n            $output .= \"if (!function_exists('{$_funcNameCaching}')) {\\n\";\n            $output .= \"function {$_funcNameCaching} (Smarty_Internal_Template \\$_smarty_tpl,\\$params) {\\n\";\n            $output .= \"ob_start();\\n\";\n            $output .= $compiler->compileRequiredPlugins();\n            $output .= \"\\$_smarty_tpl->compiled->has_nocache_code = true;\\n\";\n            $output .= $_paramsCode;\n            $output .= \"foreach (\\$params as \\$key => \\$value) {\\n\\$_smarty_tpl->tpl_vars[\\$key] = new Smarty_Variable(\\$value, \\$_smarty_tpl->isRenderingCache);\\n}\\n\";\n            $output .= \"\\$params = var_export(\\$params, true);\\n\";\n            $output .= \"echo \\\"/*%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%*/<?php \";\n            $output .= \"\\\\\\$_smarty_tpl->smarty->ext->_tplFunction->saveTemplateVariables(\\\\\\$_smarty_tpl, '{$_name}');\\nforeach (\\$params as \\\\\\$key => \\\\\\$value) {\\n\\\\\\$_smarty_tpl->tpl_vars[\\\\\\$key] = new Smarty_Variable(\\\\\\$value, \\\\\\$_smarty_tpl->isRenderingCache);\\n}\\n?>\";\n            $output .= \"/*/%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%*/\\\";?>\";\n            $compiler->parser->current_buffer->append_subtree(\n                $compiler->parser,\n                new Smarty_Internal_ParseTree_Tag(\n                    $compiler->parser,\n                    $output\n                )\n            );\n            $compiler->parser->current_buffer->append_subtree($compiler->parser, $_functionCode);\n            $output = \"<?php echo \\\"/*%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%*/<?php \";\n            $output .= \"\\\\\\$_smarty_tpl->smarty->ext->_tplFunction->restoreTemplateVariables(\\\\\\$_smarty_tpl, '{$_name}');?>\\n\";\n            $output .= \"/*/%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%*/\\\";\\n?>\";\n            $output .= \"<?php echo str_replace('{$compiler->template->compiled->nocache_hash}', \\$_smarty_tpl->compiled->nocache_hash ?? '', ob_get_clean());\\n\";\n            $output .= \"}\\n}\\n\";\n            $output .= \"/*/ {$_funcName}_nocache */\\n\\n\";\n            $output .= \"?>\\n\";\n            $compiler->parser->current_buffer->append_subtree(\n                $compiler->parser,\n                new Smarty_Internal_ParseTree_Tag(\n                    $compiler->parser,\n                    $output\n                )\n            );\n            $_functionCode = new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                preg_replace_callback(\n                    \"/((<\\?php )?echo '\\/\\*%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%\\*\\/([\\S\\s]*?)\\/\\*\\/%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%\\*\\/';(\\?>\\n)?)/\",\n                    array($this, 'removeNocache'),\n                    $_functionCode->to_smarty_php($compiler->parser)\n                )\n            );\n        }\n        $compiler->parent_compiler->tpl_function[ $_name ][ 'call_name' ] = $_funcName;\n        $output = \"<?php\\n\";\n        $output .= \"/* {$_funcName} */\\n\";\n        $output .= \"if (!function_exists('{$_funcName}')) {\\n\";\n        $output .= \"function {$_funcName}(Smarty_Internal_Template \\$_smarty_tpl,\\$params) {\\n\";\n        $output .= $_paramsCode;\n        $output .= \"foreach (\\$params as \\$key => \\$value) {\\n\\$_smarty_tpl->tpl_vars[\\$key] = new Smarty_Variable(\\$value, \\$_smarty_tpl->isRenderingCache);\\n}\\n\";\n        $output .= $compiler->compileCheckPlugins(array_merge($compiler->required_plugins[ 'compiled' ],\n            $compiler->required_plugins[ 'nocache' ]));\n        $output .= \"?>\\n\";\n        $compiler->parser->current_buffer->append_subtree(\n            $compiler->parser,\n            new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                $output\n            )\n        );\n        $compiler->parser->current_buffer->append_subtree($compiler->parser, $_functionCode);\n        $output = \"<?php\\n}}\\n\";\n        $output .= \"/*/ {$_funcName} */\\n\\n\";\n        $output .= \"?>\\n\";\n        $compiler->parser->current_buffer->append_subtree(\n            $compiler->parser,\n            new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                $output\n            )\n        );\n        $compiler->parent_compiler->blockOrFunctionCode .= $compiler->parser->current_buffer->to_smarty_php($compiler->parser);\n        // restore old buffer\n        $compiler->parser->current_buffer = $saved_data[ 1 ];\n        // restore old status\n        $compiler->restoreRequiredPlugins();\n        $compiler->template->compiled->has_nocache_code = $saved_data[ 2 ];\n        $compiler->template->caching = $saved_data[ 3 ];\n        return true;\n    }\n\n    /**\n     * Remove nocache code\n     *\n     * @param $match\n     *\n     * @return string\n     */\n    public function removeNocache($match)\n    {\n        $code =\n            preg_replace(\n                \"/((<\\?php )?echo '\\/\\*%%SmartyNocache:{$this->compiler->template->compiled->nocache_hash}%%\\*\\/)|(\\/\\*\\/%%SmartyNocache:{$this->compiler->template->compiled->nocache_hash}%%\\*\\/';(\\?>\\n)?)/\",\n                '',\n                $match[ 0 ]\n            );\n        $code = str_replace(array('\\\\\\'', '\\\\\\\\\\''), array('\\'', '\\\\\\''), $code);\n        return $code;\n    }\n}\n", "<?php\n/**\n * Smarty Internal Plugin Compile Include\n * Compiles the {include} tag\n *\n * @package    Smarty\n * @subpackage Compiler\n * @author     Uwe Tews\n */\n\n/**\n * Smarty Internal Plugin Compile Include Class\n *\n * @package    Smarty\n * @subpackage Compiler\n */\nclass Smarty_Internal_Compile_Include extends Smarty_Internal_CompileBase\n{\n    /**\n     * caching mode to create nocache code but no cache file\n     */\n    const CACHING_NOCACHE_CODE = 9999;\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $required_attributes = array('file');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $shorttag_order = array('file');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $option_flags = array('nocache', 'inline', 'caching');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $optional_attributes = array('_any');\n\n    /**\n     * Valid scope names\n     *\n     * @var array\n     */\n    public $valid_scopes = array(\n        'parent' => Smarty::SCOPE_PARENT, 'root' => Smarty::SCOPE_ROOT,\n        'global' => Smarty::SCOPE_GLOBAL, 'tpl_root' => Smarty::SCOPE_TPL_ROOT,\n        'smarty' => Smarty::SCOPE_SMARTY\n    );\n\n    /**\n     * Compiles code for the {include} tag\n     *\n     * @param array                                  $args     array with attributes from parser\n     * @param Smarty_Internal_SmartyTemplateCompiler $compiler compiler object\n     *\n     * @return string\n     * @throws \\Exception\n     * @throws \\SmartyCompilerException\n     * @throws \\SmartyException\n     */\n    public function compile($args, Smarty_Internal_SmartyTemplateCompiler $compiler)\n    {\n        $uid = $t_hash = null;\n        // check and get attributes\n        $_attr = $this->getAttributes($compiler, $args);\n        $fullResourceName = $source_resource = $_attr[ 'file' ];\n        $variable_template = false;\n        $cache_tpl = false;\n        // parse resource_name\n        if (preg_match('/^([\\'\"])(([A-Za-z0-9_\\-]{2,})[:])?(([^$()]+)|(.+))\\1$/', $source_resource, $match)) {\n            $type = !empty($match[ 3 ]) ? $match[ 3 ] : $compiler->template->smarty->default_resource_type;\n            $name = !empty($match[ 5 ]) ? $match[ 5 ] : $match[ 6 ];\n            $handler = Smarty_Resource::load($compiler->smarty, $type);\n            if ($handler->recompiled || $handler->uncompiled) {\n                $variable_template = true;\n            }\n            if (!$variable_template) {\n                if ($type !== 'string') {\n                    $fullResourceName = \"{$type}:{$name}\";\n                    $compiled = $compiler->parent_compiler->template->compiled;\n                    if (isset($compiled->includes[ $fullResourceName ])) {\n                        $compiled->includes[ $fullResourceName ]++;\n                        $cache_tpl = true;\n                    } else {\n                        if (\"{$compiler->template->source->type}:{$compiler->template->source->name}\" ==\n                            $fullResourceName\n                        ) {\n                            // recursive call of current template\n                            $compiled->includes[ $fullResourceName ] = 2;\n                            $cache_tpl = true;\n                        } else {\n                            $compiled->includes[ $fullResourceName ] = 1;\n                        }\n                    }\n                    $fullResourceName = $match[ 1 ] . $fullResourceName . $match[ 1 ];\n                }\n            }\n            if (empty($match[ 5 ])) {\n                $variable_template = true;\n            }\n        } else {\n            $variable_template = true;\n        }\n        // scope setup\n        $_scope = $compiler->convertScope($_attr, $this->valid_scopes);\n        // set flag to cache subtemplate object when called within loop or template name is variable.\n        if ($cache_tpl || $variable_template || $compiler->loopNesting > 0) {\n            $_cache_tpl = 'true';\n        } else {\n            $_cache_tpl = 'false';\n        }\n        // assume caching is off\n        $_caching = Smarty::CACHING_OFF;\n        $call_nocache = $compiler->tag_nocache || $compiler->nocache;\n        // caching was on and {include} is not in nocache mode\n        if ($compiler->template->caching && !$compiler->nocache && !$compiler->tag_nocache) {\n            $_caching = self::CACHING_NOCACHE_CODE;\n        }\n        // flag if included template code should be merged into caller\n        $merge_compiled_includes = ($compiler->smarty->merge_compiled_includes || $_attr[ 'inline' ] === true) &&\n                                   !$compiler->template->source->handler->recompiled;\n        if ($merge_compiled_includes) {\n            // variable template name ?\n            if ($variable_template) {\n                $merge_compiled_includes = false;\n            }\n            // variable compile_id?\n            if (isset($_attr[ 'compile_id' ]) && $compiler->isVariable($_attr[ 'compile_id' ])) {\n                $merge_compiled_includes = false;\n            }\n        }\n        /*\n        * if the {include} tag provides individual parameter for caching or compile_id\n        * the subtemplate must not be included into the common cache file and is treated like\n        * a call in nocache mode.\n        *\n        */\n        if ($_attr[ 'nocache' ] !== true && $_attr[ 'caching' ]) {\n            $_caching = $_new_caching = (int)$_attr[ 'caching' ];\n            $call_nocache = true;\n        } else {\n            $_new_caching = Smarty::CACHING_LIFETIME_CURRENT;\n        }\n        if (isset($_attr[ 'cache_lifetime' ])) {\n            $_cache_lifetime = $_attr[ 'cache_lifetime' ];\n            $call_nocache = true;\n            $_caching = $_new_caching;\n        } else {\n            $_cache_lifetime = '$_smarty_tpl->cache_lifetime';\n        }\n        if (isset($_attr[ 'cache_id' ])) {\n            $_cache_id = $_attr[ 'cache_id' ];\n            $call_nocache = true;\n            $_caching = $_new_caching;\n        } else {\n            $_cache_id = '$_smarty_tpl->cache_id';\n        }\n        if (isset($_attr[ 'compile_id' ])) {\n            $_compile_id = $_attr[ 'compile_id' ];\n        } else {\n            $_compile_id = '$_smarty_tpl->compile_id';\n        }\n        // if subtemplate will be called in nocache mode do not merge\n        if ($compiler->template->caching && $call_nocache) {\n            $merge_compiled_includes = false;\n        }\n        // assign attribute\n        if (isset($_attr[ 'assign' ])) {\n            // output will be stored in a smarty variable instead of being displayed\n            if ($_assign = $compiler->getId($_attr[ 'assign' ])) {\n                $_assign = \"'{$_assign}'\";\n                if ($compiler->tag_nocache || $compiler->nocache || $call_nocache) {\n                    // create nocache var to make it know for further compiling\n                    $compiler->setNocacheInVariable($_attr[ 'assign' ]);\n                }\n            } else {\n                $_assign = $_attr[ 'assign' ];\n            }\n        }\n        $has_compiled_template = false;\n        if ($merge_compiled_includes) {\n            $c_id = isset($_attr[ 'compile_id' ]) ? $_attr[ 'compile_id' ] : $compiler->template->compile_id;\n            // we must observe different compile_id and caching\n            $t_hash = sha1($c_id . ($_caching ? '--caching' : '--nocaching'));\n            $compiler->smarty->allow_ambiguous_resources = true;\n            /* @var Smarty_Internal_Template $tpl */\n            $tpl = new $compiler->smarty->template_class(\n                trim($fullResourceName, '\"\\''),\n                $compiler->smarty,\n                $compiler->template,\n                $compiler->template->cache_id,\n                $c_id,\n                $_caching\n            );\n            $uid = $tpl->source->type . $tpl->source->uid;\n            if (!isset($compiler->parent_compiler->mergedSubTemplatesData[ $uid ][ $t_hash ])) {\n                $has_compiled_template = $this->compileInlineTemplate($compiler, $tpl, $t_hash);\n            } else {\n                $has_compiled_template = true;\n            }\n            unset($tpl);\n        }\n        // delete {include} standard attributes\n        unset($_attr[ 'file' ], $_attr[ 'assign' ], $_attr[ 'cache_id' ], $_attr[ 'compile_id' ], $_attr[ 'cache_lifetime' ], $_attr[ 'nocache' ], $_attr[ 'caching' ], $_attr[ 'scope' ], $_attr[ 'inline' ]);\n        // remaining attributes must be assigned as smarty variable\n        $_vars = 'array()';\n        if (!empty($_attr)) {\n            $_pairs = array();\n            // create variables\n            foreach ($_attr as $key => $value) {\n                $_pairs[] = \"'$key'=>$value\";\n            }\n            $_vars = 'array(' . join(',', $_pairs) . ')';\n        }\n        $update_compile_id = $compiler->template->caching && !$compiler->tag_nocache && !$compiler->nocache &&\n                             $_compile_id !== '$_smarty_tpl->compile_id';\n        if ($has_compiled_template && !$call_nocache) {\n            $_output = \"<?php\\n\";\n            if ($update_compile_id) {\n                $_output .= $compiler->makeNocacheCode(\"\\$_compile_id_save[] = \\$_smarty_tpl->compile_id;\\n\\$_smarty_tpl->compile_id = {$_compile_id};\\n\");\n            }\n            if (!empty($_attr) && $_caching === 9999 && $compiler->template->caching) {\n                $_vars_nc = \"foreach ($_vars as \\$ik => \\$iv) {\\n\";\n                $_vars_nc .= \"\\$_smarty_tpl->tpl_vars[\\$ik] =  new Smarty_Variable(\\$iv);\\n\";\n                $_vars_nc .= \"}\\n\";\n                $_output .= substr($compiler->processNocacheCode('<?php ' . $_vars_nc . \"?>\\n\", true), 6, -3);\n            }\n            if (isset($_assign)) {\n                $_output .= \"ob_start();\\n\";\n            }\n            $_output .= \"\\$_smarty_tpl->_subTemplateRender({$fullResourceName}, {$_cache_id}, {$_compile_id}, {$_caching}, {$_cache_lifetime}, {$_vars}, {$_scope}, {$_cache_tpl}, '{$compiler->parent_compiler->mergedSubTemplatesData[$uid][$t_hash]['uid']}', '{$compiler->parent_compiler->mergedSubTemplatesData[$uid][$t_hash]['func']}');\\n\";\n            if (isset($_assign)) {\n                $_output .= \"\\$_smarty_tpl->assign({$_assign}, ob_get_clean());\\n\";\n            }\n            if ($update_compile_id) {\n                $_output .= $compiler->makeNocacheCode(\"\\$_smarty_tpl->compile_id = array_pop(\\$_compile_id_save);\\n\");\n            }\n            $_output .= \"?>\";\n            return $_output;\n        }\n        if ($call_nocache) {\n            $compiler->tag_nocache = true;\n        }\n        $_output = \"<?php \";\n        if ($update_compile_id) {\n            $_output .= \"\\$_compile_id_save[] = \\$_smarty_tpl->compile_id;\\n\\$_smarty_tpl->compile_id = {$_compile_id};\\n\";\n        }\n        // was there an assign attribute\n        if (isset($_assign)) {\n            $_output .= \"ob_start();\\n\";\n        }\n        $_output .= \"\\$_smarty_tpl->_subTemplateRender({$fullResourceName}, $_cache_id, $_compile_id, $_caching, $_cache_lifetime, $_vars, $_scope, {$_cache_tpl});\\n\";\n        if (isset($_assign)) {\n            $_output .= \"\\$_smarty_tpl->assign({$_assign}, ob_get_clean());\\n\";\n        }\n        if ($update_compile_id) {\n            $_output .= \"\\$_smarty_tpl->compile_id = array_pop(\\$_compile_id_save);\\n\";\n        }\n        $_output .= \"?>\";\n        return $_output;\n    }\n\n    /**\n     * Compile inline sub template\n     *\n     * @param \\Smarty_Internal_SmartyTemplateCompiler $compiler\n     * @param \\Smarty_Internal_Template               $tpl\n     * @param string                                  $t_hash\n     *\n     * @return bool\n     * @throws \\Exception\n     * @throws \\SmartyException\n     */\n    public function compileInlineTemplate(\n        Smarty_Internal_SmartyTemplateCompiler $compiler,\n        Smarty_Internal_Template $tpl,\n        $t_hash\n    ) {\n        $uid = $tpl->source->type . $tpl->source->uid;\n        if (!($tpl->source->handler->uncompiled) && $tpl->source->exists) {\n            $compiler->parent_compiler->mergedSubTemplatesData[ $uid ][ $t_hash ][ 'uid' ] = $tpl->source->uid;\n            if (isset($compiler->template->inheritance)) {\n                $tpl->inheritance = clone $compiler->template->inheritance;\n            }\n            $tpl->compiled = new Smarty_Template_Compiled();\n            $tpl->compiled->nocache_hash = $compiler->parent_compiler->template->compiled->nocache_hash;\n            $tpl->loadCompiler();\n            // save unique function name\n            $compiler->parent_compiler->mergedSubTemplatesData[ $uid ][ $t_hash ][ 'func' ] =\n            $tpl->compiled->unifunc = 'content_' . str_replace(array('.', ','), '_', uniqid('', true));\n            // make sure whole chain gets compiled\n            $tpl->mustCompile = true;\n            $compiler->parent_compiler->mergedSubTemplatesData[ $uid ][ $t_hash ][ 'nocache_hash' ] =\n                $tpl->compiled->nocache_hash;\n            if ($tpl->source->type === 'file') {\n                $sourceInfo = $tpl->source->filepath;\n            } else {\n                $basename = $tpl->source->handler->getBasename($tpl->source);\n                $sourceInfo = $tpl->source->type . ':' .\n                              ($basename ? $basename : $tpl->source->name);\n            }\n            // get compiled code\n            $compiled_code = \"<?php\\n\\n\";\n            $compiled_code .= \"/* Start inline template \\\"{$sourceInfo}\\\" =============================*/\\n\";\n            $compiled_code .= \"function {$tpl->compiled->unifunc} (Smarty_Internal_Template \\$_smarty_tpl) {\\n\";\n            $compiled_code .= \"?>\\n\" . $tpl->compiler->compileTemplateSource($tpl, null, $compiler->parent_compiler);\n            $compiled_code .= \"<?php\\n\";\n            $compiled_code .= \"}\\n?>\\n\";\n            $compiled_code .= $tpl->compiler->postFilter($tpl->compiler->blockOrFunctionCode);\n            $compiled_code .= \"<?php\\n\\n\";\n            $compiled_code .= \"/* End inline template \\\"{$sourceInfo}\\\" =============================*/\\n\";\n            $compiled_code .= '?>';\n            unset($tpl->compiler);\n            if ($tpl->compiled->has_nocache_code) {\n                // replace nocache_hash\n                $compiled_code =\n                    str_replace(\n                        \"{$tpl->compiled->nocache_hash}\",\n                        $compiler->template->compiled->nocache_hash,\n                        $compiled_code\n                    );\n                $compiler->template->compiled->has_nocache_code = true;\n            }\n            $compiler->parent_compiler->mergedSubTemplatesCode[ $tpl->compiled->unifunc ] = $compiled_code;\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "<?php\n/**\n * Smarty Internal Plugin Config File Compiler\n * This is the config file compiler class. It calls the lexer and parser to\n * perform the compiling.\n *\n * @package    Smarty\n * @subpackage Config\n * @author     Uwe Tews\n */\n\n/**\n * Main config file compiler class\n *\n * @package    Smarty\n * @subpackage Config\n */\nclass Smarty_Internal_Config_File_Compiler\n{\n    /**\n     * Lexer class name\n     *\n     * @var string\n     */\n    public $lexer_class;\n\n    /**\n     * Parser class name\n     *\n     * @var string\n     */\n    public $parser_class;\n\n    /**\n     * Lexer object\n     *\n     * @var object\n     */\n    public $lex;\n\n    /**\n     * Parser object\n     *\n     * @var object\n     */\n    public $parser;\n\n    /**\n     * Smarty object\n     *\n     * @var Smarty object\n     */\n    public $smarty;\n\n    /**\n     * Smarty object\n     *\n     * @var Smarty_Internal_Template object\n     */\n    public $template;\n\n    /**\n     * Compiled config data sections and variables\n     *\n     * @var array\n     */\n    public $config_data = array();\n\n    /**\n     * compiled config data must always be written\n     *\n     * @var bool\n     */\n    public $write_compiled_code = true;\n\n    /**\n     * Initialize compiler\n     *\n     * @param string $lexer_class  class name\n     * @param string $parser_class class name\n     * @param Smarty $smarty       global instance\n     */\n    public function __construct($lexer_class, $parser_class, Smarty $smarty)\n    {\n        $this->smarty = $smarty;\n        // get required plugins\n        $this->lexer_class = $lexer_class;\n        $this->parser_class = $parser_class;\n        $this->smarty = $smarty;\n        $this->config_data[ 'sections' ] = array();\n        $this->config_data[ 'vars' ] = array();\n    }\n\n    /**\n     * Method to compile Smarty config source.\n     *\n     * @param Smarty_Internal_Template $template\n     *\n     * @return bool true if compiling succeeded, false if it failed\n     * @throws \\SmartyException\n     */\n    public function compileTemplate(Smarty_Internal_Template $template)\n    {\n        $this->template = $template;\n        $this->template->compiled->file_dependency[ $this->template->source->uid ] =\n            array(\n                $this->template->source->filepath,\n                $this->template->source->getTimeStamp(),\n                $this->template->source->type\n            );\n        if ($this->smarty->debugging) {\n            if (!isset($this->smarty->_debug)) {\n                $this->smarty->_debug = new Smarty_Internal_Debug();\n            }\n            $this->smarty->_debug->start_compile($this->template);\n        }\n        // init the lexer/parser to compile the config file\n        /* @var Smarty_Internal_ConfigFileLexer $this->lex */\n        $this->lex = new $this->lexer_class(\n            str_replace(\n                array(\n                    \"\\r\\n\",\n                    \"\\r\"\n                ),\n                \"\\n\",\n                $template->source->getContent()\n            ) . \"\\n\",\n            $this\n        );\n        /* @var Smarty_Internal_ConfigFileParser $this->parser */\n        $this->parser = new $this->parser_class($this->lex, $this);\n        if (function_exists('mb_internal_encoding')\n            && function_exists('ini_get')\n            && ((int)ini_get('mbstring.func_overload')) & 2\n        ) {\n            $mbEncoding = mb_internal_encoding();\n            mb_internal_encoding('ASCII');\n        } else {\n            $mbEncoding = null;\n        }\n        if ($this->smarty->_parserdebug) {\n            $this->parser->PrintTrace();\n        }\n        // get tokens from lexer and parse them\n        while ($this->lex->yylex()) {\n            if ($this->smarty->_parserdebug) {\n                echo \"<br>Parsing  {$this->parser->yyTokenName[$this->lex->token]} Token {$this->lex->value} Line {$this->lex->line} \\n\";\n            }\n            $this->parser->doParse($this->lex->token, $this->lex->value);\n        }\n        // finish parsing process\n        $this->parser->doParse(0, 0);\n        if ($mbEncoding) {\n            mb_internal_encoding($mbEncoding);\n        }\n        if ($this->smarty->debugging) {\n            $this->smarty->_debug->end_compile($this->template);\n        }\n        // template header code\n        $template_header =\n            \"<?php /* Smarty version \" . Smarty::SMARTY_VERSION . \", created on \" . date(\"Y-m-d H:i:s\") .\n            \"\\n\";\n        $template_header .= \"         compiled from '{$this->template->source->filepath}' */ ?>\\n\";\n        $code = '<?php $_smarty_tpl->smarty->ext->configLoad->_loadConfigVars($_smarty_tpl, ' .\n                var_export($this->config_data, true) . '); ?>';\n        return $template_header . $this->template->smarty->ext->_codeFrame->create($this->template, $code);\n    }\n\n    /**\n     * display compiler error messages without dying\n     * If parameter $args is empty it is a parser detected syntax error.\n     * In this case the parser is called to obtain information about expected tokens.\n     * If parameter $args contains a string this is used as error message\n     *\n     * @param string $args individual error message or null\n     *\n     * @throws SmartyCompilerException\n     */\n    public function trigger_config_file_error($args = null)\n    {\n        // get config source line which has error\n        $line = $this->lex->line;\n        if (isset($args)) {\n            // $line--;\n        }\n        $match = preg_split(\"/\\n/\", $this->lex->data);\n        $error_text =\n            \"Syntax error in config file '{$this->template->source->filepath}' on line {$line} '{$match[$line - 1]}' \";\n        if (isset($args)) {\n            // individual error message\n            $error_text .= $args;\n        } else {\n            // expected token from parser\n            foreach ($this->parser->yy_get_expected_tokens($this->parser->yymajor) as $token) {\n                $exp_token = $this->parser->yyTokenName[ $token ];\n                if (isset($this->lex->smarty_token_names[ $exp_token ])) {\n                    // token type from lexer\n                    $expect[] = '\"' . $this->lex->smarty_token_names[ $exp_token ] . '\"';\n                } else {\n                    // otherwise internal token name\n                    $expect[] = $this->parser->yyTokenName[ $token ];\n                }\n            }\n            // output parser error message\n            $error_text .= ' - Unexpected \"' . $this->lex->value . '\", expected one of: ' . implode(' , ', $expect);\n        }\n        throw new SmartyCompilerException($error_text);\n    }\n}\n", "<?php\n/**\n * Smarty Internal Extension\n * This file contains the Smarty template extension to create a code frame\n *\n * @package    Smarty\n * @subpackage Template\n * @author     Uwe Tews\n */\n\n/**\n * Class Smarty_Internal_Extension_CodeFrame\n * Create code frame for compiled and cached templates\n */\nclass Smarty_Internal_Runtime_CodeFrame\n{\n    /**\n     * Create code frame for compiled and cached templates\n     *\n     * @param Smarty_Internal_Template              $_template\n     * @param string                                $content   optional template content\n     * @param string                                $functions compiled template function and block code\n     * @param bool                                  $cache     flag for cache file\n     * @param \\Smarty_Internal_TemplateCompilerBase $compiler\n     *\n     * @return string\n     */\n    public function create(\n        Smarty_Internal_Template $_template,\n        $content = '',\n        $functions = '',\n        $cache = false,\n        Smarty_Internal_TemplateCompilerBase $compiler = null\n    ) {\n        // build property code\n        $properties[ 'version' ] = Smarty::SMARTY_VERSION;\n        $properties[ 'unifunc' ] = 'content_' . str_replace(array('.', ','), '_', uniqid('', true));\n        if (!$cache) {\n            $properties[ 'has_nocache_code' ] = $_template->compiled->has_nocache_code;\n            $properties[ 'file_dependency' ] = $_template->compiled->file_dependency;\n            $properties[ 'includes' ] = $_template->compiled->includes;\n        } else {\n            $properties[ 'has_nocache_code' ] = $_template->cached->has_nocache_code;\n            $properties[ 'file_dependency' ] = $_template->cached->file_dependency;\n            $properties[ 'cache_lifetime' ] = $_template->cache_lifetime;\n        }\n        $output = \"<?php\\n\";\n        $output .= \"/* Smarty version {$properties[ 'version' ]}, created on \" . date(\"Y-m-d H:i:s\") .\n                   \"\\n  from '\" . str_replace('*/', '* /', $_template->source->filepath) . \"' */\\n\\n\";\n        $output .= \"/* @var Smarty_Internal_Template \\$_smarty_tpl */\\n\";\n        $dec = \"\\$_smarty_tpl->_decodeProperties(\\$_smarty_tpl, \" . var_export($properties, true) . ',' .\n               ($cache ? 'true' : 'false') . ')';\n        $output .= \"if ({$dec}) {\\n\";\n        $output .= \"function {$properties['unifunc']} (Smarty_Internal_Template \\$_smarty_tpl) {\\n\";\n        if (!$cache && !empty($compiler->tpl_function)) {\n            $output .= '$_smarty_tpl->smarty->ext->_tplFunction->registerTplFunctions($_smarty_tpl, ';\n            $output .= var_export($compiler->tpl_function, true);\n            $output .= \");\\n\";\n        }\n        if ($cache && isset($_template->smarty->ext->_tplFunction)) {\n            $output .= \"\\$_smarty_tpl->smarty->ext->_tplFunction->registerTplFunctions(\\$_smarty_tpl, \" .\n                       var_export($_template->smarty->ext->_tplFunction->getTplFunction($_template), true) . \");\\n\";\n        }\n        $output .= \"?>\";\n        $output .= $content;\n        $output .= \"<?php }\\n?>\";\n        $output .= $functions;\n        $output .= \"<?php }\\n\";\n        // remove unneeded PHP tags\n        if (preg_match('/\\s*\\?>[\\n]?<\\?php\\s*/', $output)) {\n            $curr_split = preg_split(\n                '/\\s*\\?>[\\n]?<\\?php\\s*/',\n                $output\n            );\n            preg_match_all(\n                '/\\s*\\?>[\\n]?<\\?php\\s*/',\n                $output,\n                $curr_parts\n            );\n            $output = '';\n            foreach ($curr_split as $idx => $curr_output) {\n                $output .= $curr_output;\n                if (isset($curr_parts[ 0 ][ $idx ])) {\n                    $output .= \"\\n\";\n                }\n            }\n        }\n        if (preg_match('/\\?>\\s*$/', $output)) {\n            $curr_split = preg_split(\n                '/\\?>\\s*$/',\n                $output\n            );\n            $output = '';\n            foreach ($curr_split as $idx => $curr_output) {\n                $output .= $curr_output;\n            }\n        }\n        return $output;\n    }\n}\n", "<?php\n/**\n * Smarty Internal Plugin Smarty Template Compiler Base\n * This file contains the basic classes and methods for compiling Smarty templates with lexer/parser\n *\n * @package    Smarty\n * @subpackage Compiler\n * @author     Uwe Tews\n */\n\n/**\n * Main abstract compiler class\n *\n * @package    Smarty\n * @subpackage Compiler\n *\n * @property Smarty_Internal_SmartyTemplateCompiler $prefixCompiledCode  = ''\n * @property Smarty_Internal_SmartyTemplateCompiler $postfixCompiledCode = ''\n * @method   registerPostCompileCallback($callback, $parameter = array(), $key = null, $replace = false)\n * @method   unregisterPostCompileCallback($key)\n */\nabstract class Smarty_Internal_TemplateCompilerBase\n{\n    /**\n     * compile tag objects cache\n     *\n     * @var array\n     */\n    public static $_tag_objects = array();\n\n    /**\n     * counter for prefix variable number\n     *\n     * @var int\n     */\n    public static $prefixVariableNumber = 0;\n\n    /**\n     * Smarty object\n     *\n     * @var Smarty\n     */\n    public $smarty = null;\n\n    /**\n     * Parser object\n     *\n     * @var Smarty_Internal_Templateparser\n     */\n    public $parser = null;\n\n    /**\n     * hash for nocache sections\n     *\n     * @var mixed\n     */\n    public $nocache_hash = null;\n\n    /**\n     * suppress generation of nocache code\n     *\n     * @var bool\n     */\n    public $suppressNocacheProcessing = false;\n\n    /**\n     * caching enabled (copied from template object)\n     *\n     * @var int\n     */\n    public $caching = 0;\n\n    /**\n     * tag stack\n     *\n     * @var array\n     */\n    public $_tag_stack = array();\n\n    /**\n     * tag stack count\n     *\n     * @var array\n     */\n    public $_tag_stack_count = array();\n\n    /**\n     * Plugins used by template\n     *\n     * @var array\n     */\n    public $required_plugins = array('compiled' => array(), 'nocache' => array());\n\n    /**\n     * Required plugins stack\n     *\n     * @var array\n     */\n    public $required_plugins_stack = array();\n\n    /**\n     * current template\n     *\n     * @var Smarty_Internal_Template\n     */\n    public $template = null;\n\n    /**\n     * merged included sub template data\n     *\n     * @var array\n     */\n    public $mergedSubTemplatesData = array();\n\n    /**\n     * merged sub template code\n     *\n     * @var array\n     */\n    public $mergedSubTemplatesCode = array();\n\n    /**\n     * collected template properties during compilation\n     *\n     * @var array\n     */\n    public $templateProperties = array();\n\n    /**\n     * source line offset for error messages\n     *\n     * @var int\n     */\n    public $trace_line_offset = 0;\n\n    /**\n     * trace uid\n     *\n     * @var string\n     */\n    public $trace_uid = '';\n\n    /**\n     * trace file path\n     *\n     * @var string\n     */\n    public $trace_filepath = '';\n\n    /**\n     * stack for tracing file and line of nested {block} tags\n     *\n     * @var array\n     */\n    public $trace_stack = array();\n\n    /**\n     * plugins loaded by default plugin handler\n     *\n     * @var array\n     */\n    public $default_handler_plugins = array();\n\n    /**\n     * saved preprocessed modifier list\n     *\n     * @var mixed\n     */\n    public $default_modifier_list = null;\n\n    /**\n     * force compilation of complete template as nocache\n     *\n     * @var boolean\n     */\n    public $forceNocache = false;\n\n    /**\n     * flag if compiled template file shall we written\n     *\n     * @var bool\n     */\n    public $write_compiled_code = true;\n\n    /**\n     * Template functions\n     *\n     * @var array\n     */\n    public $tpl_function = array();\n\n    /**\n     * called sub functions from template function\n     *\n     * @var array\n     */\n    public $called_functions = array();\n\n    /**\n     * compiled template or block function code\n     *\n     * @var string\n     */\n    public $blockOrFunctionCode = '';\n\n    /**\n     * flags for used modifier plugins\n     *\n     * @var array\n     */\n    public $modifier_plugins = array();\n\n    /**\n     * type of already compiled modifier\n     *\n     * @var array\n     */\n    public $known_modifier_type = array();\n\n    /**\n     * parent compiler object for merged subtemplates and template functions\n     *\n     * @var Smarty_Internal_TemplateCompilerBase\n     */\n    public $parent_compiler = null;\n\n    /**\n     * Flag true when compiling nocache section\n     *\n     * @var bool\n     */\n    public $nocache = false;\n\n    /**\n     * Flag true when tag is compiled as nocache\n     *\n     * @var bool\n     */\n    public $tag_nocache = false;\n\n    /**\n     * Compiled tag prefix code\n     *\n     * @var array\n     */\n    public $prefix_code = array();\n\n    /**\n     * used prefix variables by current compiled tag\n     *\n     * @var array\n     */\n    public $usedPrefixVariables = array();\n\n    /**\n     * Prefix code  stack\n     *\n     * @var array\n     */\n    public $prefixCodeStack = array();\n\n    /**\n     * Tag has compiled code\n     *\n     * @var bool\n     */\n    public $has_code = false;\n\n    /**\n     * A variable string was compiled\n     *\n     * @var bool\n     */\n    public $has_variable_string = false;\n\n    /**\n     * Stack for {setfilter} {/setfilter}\n     *\n     * @var array\n     */\n    public $variable_filter_stack = array();\n\n    /**\n     * variable filters for {setfilter} {/setfilter}\n     *\n     * @var array\n     */\n    public $variable_filters = array();\n\n    /**\n     * Nesting count of looping tags like {foreach}, {for}, {section}, {while}\n     *\n     * @var int\n     */\n    public $loopNesting = 0;\n\n    /**\n     * Strip preg pattern\n     *\n     * @var string\n     */\n    public $stripRegEx = '![\\t ]*[\\r\\n]+[\\t ]*!';\n\n    /**\n     * plugin search order\n     *\n     * @var array\n     */\n    public $plugin_search_order = array(\n        'function',\n        'block',\n        'compiler',\n        'class'\n    );\n\n    /**\n     * General storage area for tag compiler plugins\n     *\n     * @var array\n     */\n    public $_cache = array();\n\n    /**\n     * Lexer preg pattern for left delimiter\n     *\n     * @var string\n     */\n    private $ldelPreg = '[{]';\n\n    /**\n     * Lexer preg pattern for right delimiter\n     *\n     * @var string\n     */\n    private $rdelPreg = '[}]';\n\n    /**\n     * Length of right delimiter\n     *\n     * @var int\n     */\n    private $rdelLength = 0;\n\n    /**\n     * Length of left delimiter\n     *\n     * @var int\n     */\n    private $ldelLength = 0;\n\n    /**\n     * Lexer preg pattern for user literals\n     *\n     * @var string\n     */\n    private $literalPreg = '';\n\n    /**\n     * Initialize compiler\n     *\n     * @param Smarty $smarty global instance\n     */\n    public function __construct(Smarty $smarty)\n    {\n        $this->smarty = $smarty;\n        $this->nocache_hash = str_replace(\n            array(\n                '.',\n                ','\n            ),\n            '_',\n            uniqid(mt_rand(), true)\n        );\n    }\n\n    /**\n     * Method to compile a Smarty template\n     *\n     * @param Smarty_Internal_Template                  $template template object to compile\n     * @param bool                                      $nocache  true is shall be compiled in nocache mode\n     * @param null|Smarty_Internal_TemplateCompilerBase $parent_compiler\n     *\n     * @return bool true if compiling succeeded, false if it failed\n     * @throws \\Exception\n     */\n    public function compileTemplate(\n        Smarty_Internal_Template $template,\n        $nocache = null,\n        Smarty_Internal_TemplateCompilerBase $parent_compiler = null\n    ) {\n        // get code frame of compiled template\n        $_compiled_code = $template->smarty->ext->_codeFrame->create(\n            $template,\n            $this->compileTemplateSource(\n                $template,\n                $nocache,\n                $parent_compiler\n            ),\n            $this->postFilter($this->blockOrFunctionCode) .\n            join('', $this->mergedSubTemplatesCode),\n            false,\n            $this\n        );\n        return $_compiled_code;\n    }\n\n    /**\n     * Compile template source and run optional post filter\n     *\n     * @param \\Smarty_Internal_Template             $template\n     * @param null|bool                             $nocache flag if template must be compiled in nocache mode\n     * @param \\Smarty_Internal_TemplateCompilerBase $parent_compiler\n     *\n     * @return string\n     * @throws \\Exception\n     */\n    public function compileTemplateSource(\n        Smarty_Internal_Template $template,\n        $nocache = null,\n        Smarty_Internal_TemplateCompilerBase $parent_compiler = null\n    ) {\n        try {\n            // save template object in compiler class\n            $this->template = $template;\n            if (property_exists($this->template->smarty, 'plugin_search_order')) {\n                $this->plugin_search_order = $this->template->smarty->plugin_search_order;\n            }\n            if ($this->smarty->debugging) {\n                if (!isset($this->smarty->_debug)) {\n                    $this->smarty->_debug = new Smarty_Internal_Debug();\n                }\n                $this->smarty->_debug->start_compile($this->template);\n            }\n            $this->parent_compiler = $parent_compiler ? $parent_compiler : $this;\n            $nocache = isset($nocache) ? $nocache : false;\n            if (empty($template->compiled->nocache_hash)) {\n                $template->compiled->nocache_hash = $this->nocache_hash;\n            } else {\n                $this->nocache_hash = $template->compiled->nocache_hash;\n            }\n            $this->caching = $template->caching;\n            // flag for nocache sections\n            $this->nocache = $nocache;\n            $this->tag_nocache = false;\n            // reset has nocache code flag\n            $this->template->compiled->has_nocache_code = false;\n            $this->has_variable_string = false;\n            $this->prefix_code = array();\n            // add file dependency\n            if ($this->smarty->merge_compiled_includes || $this->template->source->handler->checkTimestamps()) {\n                $this->parent_compiler->template->compiled->file_dependency[ $this->template->source->uid ] =\n                    array(\n                        $this->template->source->filepath,\n                        $this->template->source->getTimeStamp(),\n                        $this->template->source->type,\n                    );\n            }\n            $this->smarty->_current_file = $this->template->source->filepath;\n            // get template source\n            if (!empty($this->template->source->components)) {\n                // we have array of inheritance templates by extends: resource\n                // generate corresponding source code sequence\n                $_content =\n                    Smarty_Internal_Compile_Extends::extendsSourceArrayCode($this->template);\n            } else {\n                // get template source\n                $_content = $this->template->source->getContent();\n            }\n            $_compiled_code = $this->postFilter($this->doCompile($this->preFilter($_content), true));\n            if (!empty($this->required_plugins[ 'compiled' ]) || !empty($this->required_plugins[ 'nocache' ])) {\n                $_compiled_code = '<?php ' . $this->compileRequiredPlugins() . \"?>\\n\" . $_compiled_code;\n            }\n        } catch (Exception $e) {\n            if ($this->smarty->debugging) {\n                $this->smarty->_debug->end_compile($this->template);\n            }\n            $this->_tag_stack = array();\n            // free memory\n            $this->parent_compiler = null;\n            $this->template = null;\n            $this->parser = null;\n            throw $e;\n        }\n        if ($this->smarty->debugging) {\n            $this->smarty->_debug->end_compile($this->template);\n        }\n        $this->parent_compiler = null;\n        $this->parser = null;\n        return $_compiled_code;\n    }\n\n    /**\n     * Optionally process compiled code by post filter\n     *\n     * @param string $code compiled code\n     *\n     * @return string\n     * @throws \\SmartyException\n     */\n    public function postFilter($code)\n    {\n        // run post filter if on code\n        if (!empty($code)\n            && (isset($this->smarty->autoload_filters[ 'post' ]) || isset($this->smarty->registered_filters[ 'post' ]))\n        ) {\n            return $this->smarty->ext->_filterHandler->runFilter('post', $code, $this->template);\n        } else {\n            return $code;\n        }\n    }\n\n    /**\n     * Run optional prefilter\n     *\n     * @param string $_content template source\n     *\n     * @return string\n     * @throws \\SmartyException\n     */\n    public function preFilter($_content)\n    {\n        // run pre filter if required\n        if ($_content !== ''\n            && ((isset($this->smarty->autoload_filters[ 'pre' ]) || isset($this->smarty->registered_filters[ 'pre' ])))\n        ) {\n            return $this->smarty->ext->_filterHandler->runFilter('pre', $_content, $this->template);\n        } else {\n            return $_content;\n        }\n    }\n\n    /**\n     * Compile Tag\n     * This is a call back from the lexer/parser\n     *\n     * Save current prefix code\n     * Compile tag\n     * Merge tag prefix code with saved one\n     * (required nested tags in attributes)\n     *\n     * @param string $tag       tag name\n     * @param array  $args      array with tag attributes\n     * @param array  $parameter array with compilation parameter\n     *\n     * @throws SmartyCompilerException\n     * @throws SmartyException\n     * @return string compiled code\n     */\n    public function compileTag($tag, $args, $parameter = array())\n    {\n        $this->prefixCodeStack[] = $this->prefix_code;\n        $this->prefix_code = array();\n        $result = $this->compileTag2($tag, $args, $parameter);\n        $this->prefix_code = array_merge($this->prefix_code, array_pop($this->prefixCodeStack));\n        return $result;\n    }\n\n    /**\n     * compile variable\n     *\n     * @param string $variable\n     *\n     * @return string\n     */\n    public function compileVariable($variable)\n    {\n        if (!strpos($variable, '(')) {\n            // not a variable variable\n            $var = trim($variable, '\\'');\n            $this->tag_nocache = $this->tag_nocache |\n                                 $this->template->ext->getTemplateVars->_getVariable(\n                                     $this->template,\n                                     $var,\n                                     null,\n                                     true,\n                                     false\n                                 )->nocache;\n            // todo $this->template->compiled->properties['variables'][$var] = $this->tag_nocache | $this->nocache;\n        }\n        return '$_smarty_tpl->tpl_vars[' . $variable . ']->value';\n    }\n\n    /**\n     * compile config variable\n     *\n     * @param string $variable\n     *\n     * @return string\n     */\n    public function compileConfigVariable($variable)\n    {\n        // return '$_smarty_tpl->config_vars[' . $variable . ']';\n        return '$_smarty_tpl->smarty->ext->configLoad->_getConfigVariable($_smarty_tpl, ' . $variable . ')';\n    }\n\n    /**\n     * compile PHP function call\n     *\n     * @param string $name\n     * @param array  $parameter\n     *\n     * @return string\n     * @throws \\SmartyCompilerException\n     */\n    public function compilePHPFunctionCall($name, $parameter)\n    {\n        if (!$this->smarty->security_policy || $this->smarty->security_policy->isTrustedPhpFunction($name, $this)) {\n            if (strcasecmp($name, 'isset') === 0 || strcasecmp($name, 'empty') === 0\n                || strcasecmp($name, 'array') === 0 || is_callable($name)\n            ) {\n                $func_name = strtolower($name);\n\n                if ($func_name === 'isset') {\n                    if (count($parameter) === 0) {\n                        $this->trigger_template_error('Illegal number of parameter in \"isset()\"');\n                    }\n\n                    $pa = array();\n                    foreach ($parameter as $p) {\n                        $pa[] = $this->syntaxMatchesVariable($p) ? 'isset(' . $p . ')' : '(' . $p . ' !== null )';\n                    }\n                    return '(' . implode(' && ', $pa) . ')';\n\n                } elseif (in_array(\n                    $func_name,\n                    array(\n                        'empty',\n                        'reset',\n                        'current',\n                        'end',\n                        'prev',\n                        'next'\n                    )\n                )\n                ) {\n                    if (count($parameter) !== 1) {\n                        $this->trigger_template_error(\"Illegal number of parameter in '{$func_name()}'\");\n                    }\n                    if ($func_name === 'empty') {\n                        return $func_name . '(' .\n                               str_replace(\"')->value\", \"',null,true,false)->value\", $parameter[ 0 ]) . ')';\n                    } else {\n                        return $func_name . '(' . $parameter[ 0 ] . ')';\n                    }\n                } else {\n                    return $name . '(' . implode(',', $parameter) . ')';\n                }\n            } else {\n                $this->trigger_template_error(\"unknown function '{$name}'\");\n            }\n        }\n    }\n\n    /**\n     * Determines whether the passed string represents a valid (PHP) variable.\n     * This is important, because `isset()` only works on variables and `empty()` can only be passed\n     * a variable prior to php5.5\n     * @param $string\n     * @return bool\n     */\n    private function syntaxMatchesVariable($string) {\n        static $regex_pattern = '/^\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*((->)[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*|\\[.*]*\\])*$/';\n        return 1 === preg_match($regex_pattern, trim($string));\n    }\n\n    /**\n     * This method is called from parser to process a text content section if strip is enabled\n     * - remove text from inheritance child templates as they may generate output\n     *\n     * @param string $text\n     *\n     * @return string\n     */\n    public function processText($text)\n    {\n\n        if (strpos($text, '<') === false) {\n            return preg_replace($this->stripRegEx, '', $text);\n        }\n\n        $store = array();\n        $_store = 0;\n\n        // capture html elements not to be messed with\n        $_offset = 0;\n        if (preg_match_all(\n            '#(<script[^>]*>.*?</script[^>]*>)|(<textarea[^>]*>.*?</textarea[^>]*>)|(<pre[^>]*>.*?</pre[^>]*>)#is',\n            $text,\n            $matches,\n            PREG_OFFSET_CAPTURE | PREG_SET_ORDER\n        )\n        ) {\n            foreach ($matches as $match) {\n                $store[] = $match[ 0 ][ 0 ];\n                $_length = strlen($match[ 0 ][ 0 ]);\n                $replace = '@!@SMARTY:' . $_store . ':SMARTY@!@';\n                $text = substr_replace($text, $replace, $match[ 0 ][ 1 ] - $_offset, $_length);\n                $_offset += $_length - strlen($replace);\n                $_store++;\n            }\n        }\n        $expressions = array(// replace multiple spaces between tags by a single space\n                             '#(:SMARTY@!@|>)[\\040\\011]+(?=@!@SMARTY:|<)#s'                            => '\\1 \\2',\n                             // remove newline between tags\n                             '#(:SMARTY@!@|>)[\\040\\011]*[\\n]\\s*(?=@!@SMARTY:|<)#s'                     => '\\1\\2',\n                             // remove multiple spaces between attributes (but not in attribute values!)\n                             '#(([a-z0-9]\\s*=\\s*(\"[^\"]*?\")|(\\'[^\\']*?\\'))|<[a-z0-9_]+)\\s+([a-z/>])#is' => '\\1 \\5',\n                             '#>[\\040\\011]+$#Ss'                                                       => '> ',\n                             '#>[\\040\\011]*[\\n]\\s*$#Ss'                                                => '>',\n                             $this->stripRegEx                                                         => '',\n        );\n        $text = preg_replace(array_keys($expressions), array_values($expressions), $text);\n        $_offset = 0;\n        if (preg_match_all(\n            '#@!@SMARTY:([0-9]+):SMARTY@!@#is',\n            $text,\n            $matches,\n            PREG_OFFSET_CAPTURE | PREG_SET_ORDER\n        )\n        ) {\n            foreach ($matches as $match) {\n                $_length = strlen($match[ 0 ][ 0 ]);\n                $replace = $store[ $match[ 1 ][ 0 ] ];\n                $text = substr_replace($text, $replace, $match[ 0 ][ 1 ] + $_offset, $_length);\n                $_offset += strlen($replace) - $_length;\n                $_store++;\n            }\n        }\n        return $text;\n    }\n\n    /**\n     * lazy loads internal compile plugin for tag and calls the compile method\n     * compile objects cached for reuse.\n     * class name format:  Smarty_Internal_Compile_TagName\n     * plugin filename format: Smarty_Internal_TagName.php\n     *\n     * @param string $tag    tag name\n     * @param array  $args   list of tag attributes\n     * @param mixed  $param1 optional parameter\n     * @param mixed  $param2 optional parameter\n     * @param mixed  $param3 optional parameter\n     *\n     * @return bool|string compiled code or false\n     * @throws \\SmartyCompilerException\n     */\n    public function callTagCompiler($tag, $args, $param1 = null, $param2 = null, $param3 = null)\n    {\n        /* @var Smarty_Internal_CompileBase $tagCompiler */\n        $tagCompiler = $this->getTagCompiler($tag);\n        // compile this tag\n        return $tagCompiler === false ? false : $tagCompiler->compile($args, $this, $param1, $param2, $param3);\n    }\n\n    /**\n     * lazy loads internal compile plugin for tag compile objects cached for reuse.\n     *\n     * class name format:  Smarty_Internal_Compile_TagName\n     * plugin filename format: Smarty_Internal_TagName.php\n     *\n     * @param string $tag tag name\n     *\n     * @return bool|\\Smarty_Internal_CompileBase tag compiler object or false if not found\n     */\n    public function getTagCompiler($tag)\n    {\n        // re-use object if already exists\n        if (!isset(self::$_tag_objects[ $tag ])) {\n            // lazy load internal compiler plugin\n            $_tag = explode('_', $tag);\n            $_tag = array_map('ucfirst', $_tag);\n            $class_name = 'Smarty_Internal_Compile_' . implode('_', $_tag);\n            if (class_exists($class_name)\n                && (!isset($this->smarty->security_policy) || $this->smarty->security_policy->isTrustedTag($tag, $this))\n            ) {\n                self::$_tag_objects[ $tag ] = new $class_name;\n            } else {\n                self::$_tag_objects[ $tag ] = false;\n            }\n        }\n        return self::$_tag_objects[ $tag ];\n    }\n\n    /**\n     * Check for plugins and return function name\n     *\n     * @param        $plugin_name\n     * @param string $plugin_type type of plugin\n     *\n     * @return string call name of function\n     * @throws \\SmartyException\n     */\n    public function getPlugin($plugin_name, $plugin_type)\n    {\n        $function = null;\n        if ($this->caching && ($this->nocache || $this->tag_nocache)) {\n            if (isset($this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ])) {\n                $function =\n                    $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ][ 'function' ];\n            } elseif (isset($this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ])) {\n                $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ] =\n                    $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ];\n                $function =\n                    $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ][ 'function' ];\n            }\n        } else {\n            if (isset($this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ])) {\n                $function =\n                    $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ][ 'function' ];\n            } elseif (isset($this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ])) {\n                $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ] =\n                    $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ];\n                $function =\n                    $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ][ 'function' ];\n            }\n        }\n        if (isset($function)) {\n            if ($plugin_type === 'modifier') {\n                $this->modifier_plugins[ $plugin_name ] = true;\n            }\n            return $function;\n        }\n        // loop through plugin dirs and find the plugin\n        $function = 'smarty_' . $plugin_type . '_' . $plugin_name;\n        $file = $this->smarty->loadPlugin($function, false);\n        if (is_string($file)) {\n            if ($this->caching && ($this->nocache || $this->tag_nocache)) {\n                $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ][ 'file' ] =\n                    $file;\n                $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ][ 'function' ] =\n                    $function;\n            } else {\n                $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ][ 'file' ] =\n                    $file;\n                $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ][ 'function' ] =\n                    $function;\n            }\n            if ($plugin_type === 'modifier') {\n                $this->modifier_plugins[ $plugin_name ] = true;\n            }\n            return $function;\n        }\n        if (is_callable($function)) {\n            // plugin function is defined in the script\n            return $function;\n        }\n        return false;\n    }\n\n    /**\n     * Check for plugins by default plugin handler\n     *\n     * @param string $tag         name of tag\n     * @param string $plugin_type type of plugin\n     *\n     * @return bool true if found\n     * @throws \\SmartyCompilerException\n     */\n    public function getPluginFromDefaultHandler($tag, $plugin_type)\n    {\n        $callback = null;\n        $script = null;\n        $cacheable = true;\n        $result = call_user_func_array(\n            $this->smarty->default_plugin_handler_func,\n            array(\n                $tag,\n                $plugin_type,\n                $this->template,\n                &$callback,\n                &$script,\n                &$cacheable,\n            )\n        );\n        if ($result) {\n            $this->tag_nocache = $this->tag_nocache || !$cacheable;\n            if ($script !== null) {\n                if (is_file($script)) {\n                    if ($this->caching && ($this->nocache || $this->tag_nocache)) {\n                        $this->required_plugins[ 'nocache' ][ $tag ][ $plugin_type ][ 'file' ] =\n                            $script;\n                        $this->required_plugins[ 'nocache' ][ $tag ][ $plugin_type ][ 'function' ] =\n                            $callback;\n                    } else {\n                        $this->required_plugins[ 'compiled' ][ $tag ][ $plugin_type ][ 'file' ] =\n                            $script;\n                        $this->required_plugins[ 'compiled' ][ $tag ][ $plugin_type ][ 'function' ] =\n                            $callback;\n                    }\n                    include_once $script;\n                } else {\n                    $this->trigger_template_error(\"Default plugin handler: Returned script file '{$script}' for '{$tag}' not found\");\n                }\n            }\n            if (is_callable($callback)) {\n                $this->default_handler_plugins[ $plugin_type ][ $tag ] = array(\n                    $callback,\n                    true,\n                    array()\n                );\n                return true;\n            } else {\n                $this->trigger_template_error(\"Default plugin handler: Returned callback for '{$tag}' not callable\");\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Append code segments and remove unneeded ?> <?php transitions\n     *\n     * @param string $left\n     * @param string $right\n     *\n     * @return string\n     */\n    public function appendCode($left, $right)\n    {\n        if (preg_match('/\\s*\\?>\\s?$/D', $left) && preg_match('/^<\\?php\\s+/', $right)) {\n            $left = preg_replace('/\\s*\\?>\\s?$/D', \"\\n\", $left);\n            $left .= preg_replace('/^<\\?php\\s+/', '', $right);\n        } else {\n            $left .= $right;\n        }\n        return $left;\n    }\n\n    /**\n     * Inject inline code for nocache template sections\n     * This method gets the content of each template element from the parser.\n     * If the content is compiled code and it should be not cached the code is injected\n     * into the rendered output.\n     *\n     * @param string  $content content of template element\n     * @param boolean $is_code true if content is compiled code\n     *\n     * @return string  content\n     */\n    public function processNocacheCode($content, $is_code)\n    {\n        // If the template is not evaluated and we have a nocache section and or a nocache tag\n        if ($is_code && !empty($content)) {\n            // generate replacement code\n            if ((!($this->template->source->handler->recompiled) || $this->forceNocache) && $this->caching\n                && !$this->suppressNocacheProcessing && ($this->nocache || $this->tag_nocache)\n            ) {\n                $this->template->compiled->has_nocache_code = true;\n                $_output = addcslashes($content, '\\'\\\\');\n                $_output = str_replace('^#^', '\\'', $_output);\n                $_output =\n                    \"<?php echo '/*%%SmartyNocache:{$this->nocache_hash}%%*/{$_output}/*/%%SmartyNocache:{$this->nocache_hash}%%*/';?>\\n\";\n                // make sure we include modifier plugins for nocache code\n                foreach ($this->modifier_plugins as $plugin_name => $dummy) {\n                    if (isset($this->required_plugins[ 'compiled' ][ $plugin_name ][ 'modifier' ])) {\n                        $this->required_plugins[ 'nocache' ][ $plugin_name ][ 'modifier' ] =\n                            $this->required_plugins[ 'compiled' ][ $plugin_name ][ 'modifier' ];\n                    }\n                }\n            } else {\n                $_output = $content;\n            }\n        } else {\n            $_output = $content;\n        }\n        $this->modifier_plugins = array();\n        $this->suppressNocacheProcessing = false;\n        $this->tag_nocache = false;\n        return $_output;\n    }\n\n    /**\n     * Get Id\n     *\n     * @param string $input\n     *\n     * @return bool|string\n     */\n    public function getId($input)\n    {\n        if (preg_match('~^([\\'\"]*)([0-9]*[a-zA-Z_]\\w*)\\1$~', $input, $match)) {\n            return $match[ 2 ];\n        }\n        return false;\n    }\n\n    /**\n     * Get variable name from string\n     *\n     * @param string $input\n     *\n     * @return bool|string\n     */\n    public function getVariableName($input)\n    {\n        if (preg_match('~^[$]_smarty_tpl->tpl_vars\\[[\\'\"]*([0-9]*[a-zA-Z_]\\w*)[\\'\"]*\\]->value$~', $input, $match)) {\n            return $match[ 1 ];\n        }\n        return false;\n    }\n\n    /**\n     * Set nocache flag in variable or create new variable\n     *\n     * @param string $varName\n     */\n    public function setNocacheInVariable($varName)\n    {\n        // create nocache var to make it know for further compiling\n        if ($_var = $this->getId($varName)) {\n            if (isset($this->template->tpl_vars[ $_var ])) {\n                $this->template->tpl_vars[ $_var ] = clone $this->template->tpl_vars[ $_var ];\n                $this->template->tpl_vars[ $_var ]->nocache = true;\n            } else {\n                $this->template->tpl_vars[ $_var ] = new Smarty_Variable(null, true);\n            }\n        }\n    }\n\n    /**\n     * @param array $_attr tag attributes\n     * @param array $validScopes\n     *\n     * @return int|string\n     * @throws \\SmartyCompilerException\n     */\n    public function convertScope($_attr, $validScopes)\n    {\n        $_scope = 0;\n        if (isset($_attr[ 'scope' ])) {\n            $_scopeName = trim($_attr[ 'scope' ], '\\'\"');\n            if (is_numeric($_scopeName) && in_array($_scopeName, $validScopes)) {\n                $_scope = $_scopeName;\n            } elseif (is_string($_scopeName)) {\n                $_scopeName = trim($_scopeName, '\\'\"');\n                $_scope = isset($validScopes[ $_scopeName ]) ? $validScopes[ $_scopeName ] : false;\n            } else {\n                $_scope = false;\n            }\n            if ($_scope === false) {\n                $err = var_export($_scopeName, true);\n                $this->trigger_template_error(\"illegal value '{$err}' for \\\"scope\\\" attribute\", null, true);\n            }\n        }\n        return $_scope;\n    }\n\n    /**\n     * Generate nocache code string\n     *\n     * @param string $code PHP code\n     *\n     * @return string\n     */\n    public function makeNocacheCode($code)\n    {\n        return \"echo '/*%%SmartyNocache:{$this->nocache_hash}%%*/<?php \" .\n               str_replace('^#^', '\\'', addcslashes($code, '\\'\\\\')) .\n               \"?>/*/%%SmartyNocache:{$this->nocache_hash}%%*/';\\n\";\n    }\n\n    /**\n     * display compiler error messages without dying\n     * If parameter $args is empty it is a parser detected syntax error.\n     * In this case the parser is called to obtain information about expected tokens.\n     * If parameter $args contains a string this is used as error message\n     *\n     * @param string    $args    individual error message or null\n     * @param string    $line    line-number\n     * @param null|bool $tagline if true the line number of last tag\n     *\n     * @throws \\SmartyCompilerException when an unexpected token is found\n     */\n    public function trigger_template_error($args = null, $line = null, $tagline = null)\n    {\n        $lex = $this->parser->lex;\n        if ($tagline === true) {\n            // get line number of Tag\n            $line = $lex->taglineno;\n        } elseif (!isset($line)) {\n            // get template source line which has error\n            $line = $lex->line;\n        } else {\n            $line = (int)$line;\n        }\n        if (in_array(\n            $this->template->source->type,\n            array(\n                'eval',\n                'string'\n            )\n        )\n        ) {\n            $templateName = $this->template->source->type . ':' . trim(\n                    preg_replace(\n                        '![\\t\\r\\n]+!',\n                        ' ',\n                        strlen($lex->data) > 40 ?\n                            substr($lex->data, 0, 40) .\n                            '...' : $lex->data\n                    )\n                );\n        } else {\n            $templateName = $this->template->source->type . ':' . $this->template->source->filepath;\n        }\n        //        $line += $this->trace_line_offset;\n        $match = preg_split(\"/\\n/\", $lex->data);\n        $error_text =\n            'Syntax error in template \"' . (empty($this->trace_filepath) ? $templateName : $this->trace_filepath) .\n            '\"  on line ' . ($line + $this->trace_line_offset) . ' \"' .\n            trim(preg_replace('![\\t\\r\\n]+!', ' ', $match[ $line - 1 ])) . '\" ';\n        if (isset($args)) {\n            // individual error message\n            $error_text .= $args;\n        } else {\n            $expect = array();\n            // expected token from parser\n            $error_text .= ' - Unexpected \"' . $lex->value . '\"';\n            if (count($this->parser->yy_get_expected_tokens($this->parser->yymajor)) <= 4) {\n                foreach ($this->parser->yy_get_expected_tokens($this->parser->yymajor) as $token) {\n                    $exp_token = $this->parser->yyTokenName[ $token ];\n                    if (isset($lex->smarty_token_names[ $exp_token ])) {\n                        // token type from lexer\n                        $expect[] = '\"' . $lex->smarty_token_names[ $exp_token ] . '\"';\n                    } else {\n                        // otherwise internal token name\n                        $expect[] = $this->parser->yyTokenName[ $token ];\n                    }\n                }\n                $error_text .= ', expected one of: ' . implode(' , ', $expect);\n            }\n        }\n        if ($this->smarty->_parserdebug) {\n            $this->parser->errorRunDown();\n            echo ob_get_clean();\n            flush();\n        }\n        $e = new SmartyCompilerException($error_text);\n        $e->setLine($line);\n        $e->source = trim(preg_replace('![\\t\\r\\n]+!', ' ', $match[ $line - 1 ]));\n        $e->desc = $args;\n        $e->template = $this->template->source->filepath;\n        throw $e;\n    }\n\n    /**\n     * Return var_export() value with all white spaces removed\n     *\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function getVarExport($value)\n    {\n        return preg_replace('/\\s/', '', var_export($value, true));\n    }\n\n    /**\n     *  enter double quoted string\n     *  - save tag stack count\n     */\n    public function enterDoubleQuote()\n    {\n        array_push($this->_tag_stack_count, $this->getTagStackCount());\n    }\n\n    /**\n     * Return tag stack count\n     *\n     * @return int\n     */\n    public function getTagStackCount()\n    {\n        return count($this->_tag_stack);\n    }\n\n    /**\n     * @param $lexerPreg\n     *\n     * @return mixed\n     */\n    public function replaceDelimiter($lexerPreg)\n    {\n        return str_replace(\n            array('SMARTYldel', 'SMARTYliteral', 'SMARTYrdel', 'SMARTYautoliteral', 'SMARTYal'),\n            array(\n                $this->ldelPreg, $this->literalPreg, $this->rdelPreg,\n                $this->smarty->getAutoLiteral() ? '{1,}' : '{9}',\n                $this->smarty->getAutoLiteral() ? '' : '\\\\s*'\n            ),\n            $lexerPreg\n        );\n    }\n\n    /**\n     * Build lexer regular expressions for left and right delimiter and user defined literals\n     */\n    public function initDelimiterPreg()\n    {\n        $ldel = $this->smarty->getLeftDelimiter();\n        $this->ldelLength = strlen($ldel);\n        $this->ldelPreg = '';\n        foreach (str_split($ldel, 1) as $chr) {\n            $this->ldelPreg .= '[' . preg_quote($chr,'/') . ']';\n        }\n        $rdel = $this->smarty->getRightDelimiter();\n        $this->rdelLength = strlen($rdel);\n        $this->rdelPreg = '';\n        foreach (str_split($rdel, 1) as $chr) {\n            $this->rdelPreg .= '[' . preg_quote($chr,'/') . ']';\n        }\n        $literals = $this->smarty->getLiterals();\n        if (!empty($literals)) {\n            foreach ($literals as $key => $literal) {\n                $literalPreg = '';\n                foreach (str_split($literal, 1) as $chr) {\n                    $literalPreg .= '[' . preg_quote($chr,'/') . ']';\n                }\n                $literals[ $key ] = $literalPreg;\n            }\n            $this->literalPreg = '|' . implode('|', $literals);\n        } else {\n            $this->literalPreg = '';\n        }\n    }\n\n    /**\n     *  leave double quoted string\n     *  - throw exception if block in string was not closed\n     *\n     * @throws \\SmartyCompilerException\n     */\n    public function leaveDoubleQuote()\n    {\n        if (array_pop($this->_tag_stack_count) !== $this->getTagStackCount()) {\n            $tag = $this->getOpenBlockTag();\n            $this->trigger_template_error(\n                \"unclosed '{{$tag}}' in doubled quoted string\",\n                null,\n                true\n            );\n        }\n    }\n\n    /**\n     * Get left delimiter preg\n     *\n     * @return string\n     */\n    public function getLdelPreg()\n    {\n        return $this->ldelPreg;\n    }\n\n    /**\n     * Get right delimiter preg\n     *\n     * @return string\n     */\n    public function getRdelPreg()\n    {\n        return $this->rdelPreg;\n    }\n\n    /**\n     * Get length of left delimiter\n     *\n     * @return int\n     */\n    public function getLdelLength()\n    {\n        return $this->ldelLength;\n    }\n\n    /**\n     * Get length of right delimiter\n     *\n     * @return int\n     */\n    public function getRdelLength()\n    {\n        return $this->rdelLength;\n    }\n\n    /**\n     * Get name of current open block tag\n     *\n     * @return string|boolean\n     */\n    public function getOpenBlockTag()\n    {\n        $tagCount = $this->getTagStackCount();\n        if ($tagCount) {\n            return $this->_tag_stack[ $tagCount - 1 ][ 0 ];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Check if $value contains variable elements\n     *\n     * @param mixed $value\n     *\n     * @return bool|int\n     */\n    public function isVariable($value)\n    {\n        if (is_string($value)) {\n            return preg_match('/[$(]/', $value);\n        }\n        if (is_bool($value) || is_numeric($value)) {\n            return false;\n        }\n        if (is_array($value)) {\n            foreach ($value as $k => $v) {\n                if ($this->isVariable($k) || $this->isVariable($v)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return false;\n    }\n\n    /**\n     * Get new prefix variable name\n     *\n     * @return string\n     */\n    public function getNewPrefixVariable()\n    {\n        ++self::$prefixVariableNumber;\n        return $this->getPrefixVariable();\n    }\n\n    /**\n     * Get current prefix variable name\n     *\n     * @return string\n     */\n    public function getPrefixVariable()\n    {\n        return '$_prefixVariable' . self::$prefixVariableNumber;\n    }\n\n    /**\n     * append  code to prefix buffer\n     *\n     * @param string $code\n     */\n    public function appendPrefixCode($code)\n    {\n        $this->prefix_code[] = $code;\n    }\n\n    /**\n     * get prefix code string\n     *\n     * @return string\n     */\n    public function getPrefixCode()\n    {\n        $code = '';\n        $prefixArray = array_merge($this->prefix_code, array_pop($this->prefixCodeStack));\n        $this->prefixCodeStack[] = array();\n        foreach ($prefixArray as $c) {\n            $code = $this->appendCode($code, $c);\n        }\n        $this->prefix_code = array();\n        return $code;\n    }\n\n    /**\n     * Save current required plugins\n     *\n     * @param bool $init if true init required plugins\n     */\n    public function saveRequiredPlugins($init = false)\n    {\n        $this->required_plugins_stack[] = $this->required_plugins;\n        if ($init) {\n            $this->required_plugins = array('compiled' => array(), 'nocache' => array());\n        }\n    }\n\n    /**\n     * Restore required plugins\n     */\n    public function restoreRequiredPlugins()\n    {\n        $this->required_plugins = array_pop($this->required_plugins_stack);\n    }\n\n    /**\n     * Compile code to call Smarty_Internal_Template::_checkPlugins()\n     * for required plugins\n     *\n     * @return string\n     */\n    public function compileRequiredPlugins()\n    {\n        $code = $this->compileCheckPlugins($this->required_plugins[ 'compiled' ]);\n        if ($this->caching && !empty($this->required_plugins[ 'nocache' ])) {\n            $code .= $this->makeNocacheCode($this->compileCheckPlugins($this->required_plugins[ 'nocache' ]));\n        }\n        return $code;\n    }\n\n    /**\n     * Compile code to call Smarty_Internal_Template::_checkPlugins\n     *   - checks if plugin is callable require otherwise\n     *\n     * @param $requiredPlugins\n     *\n     * @return string\n     */\n    public function compileCheckPlugins($requiredPlugins)\n    {\n        if (!empty($requiredPlugins)) {\n            $plugins = array();\n            foreach ($requiredPlugins as $plugin) {\n                foreach ($plugin as $data) {\n                    $plugins[] = $data;\n                }\n            }\n            return '$_smarty_tpl->_checkPlugins(' . $this->getVarExport($plugins) . ');' . \"\\n\";\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * method to compile a Smarty template\n     *\n     * @param mixed $_content template source\n     * @param bool  $isTemplateSource\n     *\n     * @return bool true if compiling succeeded, false if it failed\n     */\n    abstract protected function doCompile($_content, $isTemplateSource = false);\n\n    /**\n     * Compile Tag\n     *\n     * @param string $tag       tag name\n     * @param array  $args      array with tag attributes\n     * @param array  $parameter array with compilation parameter\n     *\n     * @throws SmartyCompilerException\n     * @throws SmartyException\n     * @return string compiled code\n     */\n    private function compileTag2($tag, $args, $parameter)\n    {\n        $plugin_type = '';\n        // $args contains the attributes parsed and compiled by the lexer/parser\n        // assume that tag does compile into code, but creates no HTML output\n        $this->has_code = true;\n        // log tag/attributes\n        if (isset($this->smarty->_cache[ 'get_used_tags' ])) {\n            $this->template->_cache[ 'used_tags' ][] = array(\n                $tag,\n                $args\n            );\n        }\n        // check nocache option flag\n        foreach ($args as $arg) {\n            if (!is_array($arg)) {\n                if ($arg === \"'nocache'\" || $arg === 'nocache') {\n                    $this->tag_nocache = true;\n                }\n            } else {\n                foreach ($arg as $k => $v) {\n                    if (($k === \"'nocache'\" || $k === 'nocache') && (trim($v, \"'\\\" \") === 'true')) {\n                        $this->tag_nocache = true;\n                    }\n                }\n            }\n        }\n        // compile the smarty tag (required compile classes to compile the tag are auto loaded)\n        if (($_output = $this->callTagCompiler($tag, $args, $parameter)) === false) {\n            if (isset($this->parent_compiler->tpl_function[ $tag ])\n                || (isset($this->template->smarty->ext->_tplFunction)\n                    && $this->template->smarty->ext->_tplFunction->getTplFunction($this->template, $tag) !== false)\n            ) {\n                // template defined by {template} tag\n                $args[ '_attr' ][ 'name' ] = \"'{$tag}'\";\n                $_output = $this->callTagCompiler('call', $args, $parameter);\n            }\n        }\n        if ($_output !== false) {\n            if ($_output !== true) {\n                // did we get compiled code\n                if ($this->has_code) {\n                    // return compiled code\n                    return $_output;\n                }\n            }\n            // tag did not produce compiled code\n            return null;\n        } else {\n            // map_named attributes\n            if (isset($args[ '_attr' ])) {\n                foreach ($args[ '_attr' ] as $key => $attribute) {\n                    if (is_array($attribute)) {\n                        $args = array_merge($args, $attribute);\n                    }\n                }\n            }\n            // not an internal compiler tag\n            if (strlen($tag) < 6 || substr($tag, -5) !== 'close') {\n                // check if tag is a registered object\n                if (isset($this->smarty->registered_objects[ $tag ]) && isset($parameter[ 'object_method' ])) {\n                    $method = $parameter[ 'object_method' ];\n                    if (!in_array($method, $this->smarty->registered_objects[ $tag ][ 3 ])\n                        && (empty($this->smarty->registered_objects[ $tag ][ 1 ])\n                            || in_array($method, $this->smarty->registered_objects[ $tag ][ 1 ]))\n                    ) {\n                        return $this->callTagCompiler('private_object_function', $args, $parameter, $tag, $method);\n                    } elseif (in_array($method, $this->smarty->registered_objects[ $tag ][ 3 ])) {\n                        return $this->callTagCompiler(\n                            'private_object_block_function',\n                            $args,\n                            $parameter,\n                            $tag,\n                            $method\n                        );\n                    } else {\n                        // throw exception\n                        $this->trigger_template_error(\n                            'not allowed method \"' . $method . '\" in registered object \"' .\n                            $tag . '\"',\n                            null,\n                            true\n                        );\n                    }\n                }\n                // check if tag is registered\n                foreach (array(\n                    Smarty::PLUGIN_COMPILER,\n                    Smarty::PLUGIN_FUNCTION,\n                    Smarty::PLUGIN_BLOCK,\n                ) as $plugin_type) {\n                    if (isset($this->smarty->registered_plugins[ $plugin_type ][ $tag ])) {\n                        // if compiler function plugin call it now\n                        if ($plugin_type === Smarty::PLUGIN_COMPILER) {\n                            $new_args = array();\n                            foreach ($args as $key => $mixed) {\n                                if (is_array($mixed)) {\n                                    $new_args = array_merge($new_args, $mixed);\n                                } else {\n                                    $new_args[ $key ] = $mixed;\n                                }\n                            }\n                            if (!$this->smarty->registered_plugins[ $plugin_type ][ $tag ][ 1 ]) {\n                                $this->tag_nocache = true;\n                            }\n                            return call_user_func_array(\n                                $this->smarty->registered_plugins[ $plugin_type ][ $tag ][ 0 ],\n                                array(\n                                    $new_args,\n                                    $this\n                                )\n                            );\n                        }\n                        // compile registered function or block function\n                        if ($plugin_type === Smarty::PLUGIN_FUNCTION || $plugin_type === Smarty::PLUGIN_BLOCK) {\n                            return $this->callTagCompiler(\n                                'private_registered_' . $plugin_type,\n                                $args,\n                                $parameter,\n                                $tag\n                            );\n                        }\n                    }\n                }\n                // check plugins from plugins folder\n                foreach ($this->plugin_search_order as $plugin_type) {\n                    if ($plugin_type === Smarty::PLUGIN_COMPILER\n                        && $this->smarty->loadPlugin('smarty_compiler_' . $tag)\n                        && (!isset($this->smarty->security_policy)\n                            || $this->smarty->security_policy->isTrustedTag($tag, $this))\n                    ) {\n                        $plugin = 'smarty_compiler_' . $tag;\n                        if (is_callable($plugin)) {\n                            // convert arguments format for old compiler plugins\n                            $new_args = array();\n                            foreach ($args as $key => $mixed) {\n                                if (is_array($mixed)) {\n                                    $new_args = array_merge($new_args, $mixed);\n                                } else {\n                                    $new_args[ $key ] = $mixed;\n                                }\n                            }\n                            return $plugin($new_args, $this->smarty);\n                        }\n                        if (class_exists($plugin, false)) {\n                            $plugin_object = new $plugin;\n                            if (method_exists($plugin_object, 'compile')) {\n                                return $plugin_object->compile($args, $this);\n                            }\n                        }\n                        throw new SmartyException(\"Plugin '{$tag}' not callable\");\n                    } else {\n                        if ($function = $this->getPlugin($tag, $plugin_type)) {\n                            if (!isset($this->smarty->security_policy)\n                                || $this->smarty->security_policy->isTrustedTag($tag, $this)\n                            ) {\n                                return $this->callTagCompiler(\n                                    'private_' . $plugin_type . '_plugin',\n                                    $args,\n                                    $parameter,\n                                    $tag,\n                                    $function\n                                );\n                            }\n                        }\n                    }\n                }\n                if (is_callable($this->smarty->default_plugin_handler_func)) {\n                    $found = false;\n                    // look for already resolved tags\n                    foreach ($this->plugin_search_order as $plugin_type) {\n                        if (isset($this->default_handler_plugins[ $plugin_type ][ $tag ])) {\n                            $found = true;\n                            break;\n                        }\n                    }\n                    if (!$found) {\n                        // call default handler\n                        foreach ($this->plugin_search_order as $plugin_type) {\n                            if ($this->getPluginFromDefaultHandler($tag, $plugin_type)) {\n                                $found = true;\n                                break;\n                            }\n                        }\n                    }\n                    if ($found) {\n                        // if compiler function plugin call it now\n                        if ($plugin_type === Smarty::PLUGIN_COMPILER) {\n                            $new_args = array();\n                            foreach ($args as $key => $mixed) {\n                                if (is_array($mixed)) {\n                                    $new_args = array_merge($new_args, $mixed);\n                                } else {\n                                    $new_args[ $key ] = $mixed;\n                                }\n                            }\n                            return call_user_func_array(\n                                $this->default_handler_plugins[ $plugin_type ][ $tag ][ 0 ],\n                                array(\n                                    $new_args,\n                                    $this\n                                )\n                            );\n                        } else {\n                            return $this->callTagCompiler(\n                                'private_registered_' . $plugin_type,\n                                $args,\n                                $parameter,\n                                $tag\n                            );\n                        }\n                    }\n                }\n            } else {\n                // compile closing tag of block function\n                $base_tag = substr($tag, 0, -5);\n                // check if closing tag is a registered object\n                if (isset($this->smarty->registered_objects[ $base_tag ]) && isset($parameter[ 'object_method' ])) {\n                    $method = $parameter[ 'object_method' ];\n                    if (in_array($method, $this->smarty->registered_objects[ $base_tag ][ 3 ])) {\n                        return $this->callTagCompiler(\n                            'private_object_block_function',\n                            $args,\n                            $parameter,\n                            $tag,\n                            $method\n                        );\n                    } else {\n                        // throw exception\n                        $this->trigger_template_error(\n                            'not allowed closing tag method \"' . $method .\n                            '\" in registered object \"' . $base_tag . '\"',\n                            null,\n                            true\n                        );\n                    }\n                }\n                // registered block tag ?\n                if (isset($this->smarty->registered_plugins[ Smarty::PLUGIN_BLOCK ][ $base_tag ])\n                    || isset($this->default_handler_plugins[ Smarty::PLUGIN_BLOCK ][ $base_tag ])\n                ) {\n                    return $this->callTagCompiler('private_registered_block', $args, $parameter, $tag);\n                }\n                // registered function tag ?\n                if (isset($this->smarty->registered_plugins[ Smarty::PLUGIN_FUNCTION ][ $tag ])) {\n                    return $this->callTagCompiler('private_registered_function', $args, $parameter, $tag);\n                }\n                // block plugin?\n                if ($function = $this->getPlugin($base_tag, Smarty::PLUGIN_BLOCK)) {\n                    return $this->callTagCompiler('private_block_plugin', $args, $parameter, $tag, $function);\n                }\n                // function plugin?\n                if ($function = $this->getPlugin($tag, Smarty::PLUGIN_FUNCTION)) {\n                    if (!isset($this->smarty->security_policy)\n                        || $this->smarty->security_policy->isTrustedTag($tag, $this)\n                    ) {\n                        return $this->callTagCompiler('private_function_plugin', $args, $parameter, $tag, $function);\n                    }\n                }\n                // registered compiler plugin ?\n                if (isset($this->smarty->registered_plugins[ Smarty::PLUGIN_COMPILER ][ $tag ])) {\n                    // if compiler function plugin call it now\n                    $args = array();\n                    if (!$this->smarty->registered_plugins[ Smarty::PLUGIN_COMPILER ][ $tag ][ 1 ]) {\n                        $this->tag_nocache = true;\n                    }\n                    return call_user_func_array(\n                        $this->smarty->registered_plugins[ Smarty::PLUGIN_COMPILER ][ $tag ][ 0 ],\n                        array(\n                            $args,\n                            $this\n                        )\n                    );\n                }\n                if ($this->smarty->loadPlugin('smarty_compiler_' . $tag)) {\n                    $plugin = 'smarty_compiler_' . $tag;\n                    if (is_callable($plugin)) {\n                        return $plugin($args, $this->smarty);\n                    }\n                    if (class_exists($plugin, false)) {\n                        $plugin_object = new $plugin;\n                        if (method_exists($plugin_object, 'compile')) {\n                            return $plugin_object->compile($args, $this);\n                        }\n                    }\n                    throw new SmartyException(\"Plugin '{$tag}' not callable\");\n                }\n            }\n            $this->trigger_template_error(\"unknown tag '{$tag}'\", null, true);\n        }\n    }\n}\n"], "fixing_code": ["# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n### Security\n- Prevent PHP injection through malicious block name or include file name. This addresses CVE-2022-\n\n### Fixed\n- Exclude docs and demo from export and composer [#751](https://github.com/smarty-php/smarty/pull/751)\n- PHP 8.1 deprecation notices in demo/plugins/cacheresource.pdo.php [#706](https://github.com/smarty-php/smarty/issues/706)\n- PHP 8.1 deprecation notices in truncate modifier [#699](https://github.com/smarty-php/smarty/issues/699)\n- Math equation `max(x, y)` didn't work anymore [#721](https://github.com/smarty-php/smarty/issues/721)\n- Fix PHP 8.1 deprecated warning when calling rtrim [#743](https://github.com/smarty-php/smarty/pull/743)\n- PHP 8.1: fix deprecation in escape modifier [#727](https://github.com/smarty-php/smarty/pull/727)\n\n## [4.1.0] - 2022-02-06\n\n### Added\n- PHP8.1 compatibility [#713](https://github.com/smarty-php/smarty/pull/713)\n\n## [4.0.4] - 2022-01-18\n\n### Fixed\n- Fixed illegal characters bug in math function security check [#702](https://github.com/smarty-php/smarty/issues/702)\n\n## [4.0.3] - 2022-01-10\n\n### Security\n- Prevent evasion of the `static_classes` security policy. This addresses CVE-2021-21408\n\n## [4.0.2] - 2022-01-10\n\n### Security\n- Prevent arbitrary PHP code execution through maliciously crafted expression for the math function. This addresses CVE-2021-29454\n\n## [4.0.1] - 2022-01-09\n\n### Security\n- Rewrote the mailto function to not use `eval` when encoding with javascript\n\n## [4.0.0] - 2021-11-25\n\n## [4.0.0-rc.0] - 2021-10-13\n\n### Added\n- You can now use `$smarty->muteUndefinedOrNullWarnings()` to activate convert warnings about undefined or null template vars to notices when running PHP8\n\n### Changed\n- Switch CI from Travis to Github CI\n- Updated unit tests to avoid skipped and risky test warnings\n\n### Removed\n- Dropped support for PHP7.0 and below, so Smarty now requires PHP >=7.1\n- Dropped support for php asp tags in templates (removed from php since php7.0)\n- Dropped deprecated API calls that where only accessible through SmartyBC\n- Dropped support for {php} and {include_php} tags and embedded PHP in templates. Embedded PHP will now be passed through as is.\n- Removed all PHP_VERSION_ID and compare_version checks and conditional code blocks that are now no longer required\n- Dropped deprecated SMARTY_RESOURCE_CHAR_SET and SMARTY_RESOURCE_DATE_FORMAT constants\n- Dropped deprecated Smarty::muteExpectedErrors and Smarty::unmuteExpectedErrors API methods\n- Dropped deprecated $smarty->getVariable() method. Use $smarty->getTemplateVars() instead.\n- $smarty->registerResource() no longer accepts an array of callback functions\n\n## [3.1.40] - 2021-10-13\n\n### Changed\n- modifier escape now triggers a E_USER_NOTICE when an unsupported escape type is used https://github.com/smarty-php/smarty/pull/649\n\n### Security\n- More advanced javascript escaping to handle https://html.spec.whatwg.org/multipage/scripting.html#restrictions-for-contents-of-script-elements thanks to m-haritonov\n\n## [3.1.39] - 2021-02-17\n\n### Security\n- Prevent access to `$smarty.template_object` in sandbox mode. This addresses CVE-2021-26119.\n- Fixed code injection vulnerability by using illegal function names in `{function name='blah'}{/function}`. This addresses CVE-2021-26120.\n\n## [3.1.38] - 2021-01-08\n\n### Fixed\n- Smarty::SMARTY_VERSION wasn't updated https://github.com/smarty-php/smarty/issues/628\n\n## [3.1.37] - 2021-01-07\n\n### Changed\n- Changed error handlers and handling of undefined constants for php8-compatibility (set $errcontext argument optional) https://github.com/smarty-php/smarty/issues/605\n- Changed expected error levels in unit tests for php8-compatibility\n- Travis unit tests now run for all php versions >= 5.3, including php8\n- Travis runs on Xenial where possible\n\n### Fixed\n- PHP5.3 compatibility fixes\n- Brought lexer source functionally up-to-date with compiled version\n\n## [3.1.36] - 2020-04-14\n\n### Fixed\n - Smarty::SMARTY_VERSION wasn't updated in v3.1.35 https://github.com/smarty-php/smarty/issues/584\n\n## [3.1.35] - 2020-04-14\n - remove whitespaces after comments https://github.com/smarty-php/smarty/issues/447\n - fix foreachelse on arrayiterators https://github.com/smarty-php/smarty/issues/506\n - fix files contained in git export archive for package maintainers https://github.com/smarty-php/smarty/issues/325\n - throw SmartyException when setting caching attributes for cacheable plugin https://github.com/smarty-php/smarty/issues/457\n - fix errors that occured where isset was replaced with null check such as https://github.com/smarty-php/smarty/issues/453\n - unit tests are now in the repository\n\n## 3.1.34 release - 05.11.2019\n13.01.2020\n - fix typo in exception message (JercSi)\n - fix typehint warning with callable (bets4breakfast)\n - add travis badge and compatability info to readme (matks)\n - fix stdClass cast when compiling foreach (carpii)\n - fix wrong set/get methods for memcached (IT-Experte)\n - fix pborm assigning value to object variables in smarty_internal_compile_assign (Hunman)\n - exclude error_reporting.ini from git export (glensc)\n\n## 3.1.34-dev-6 -\n30.10.2018\n - bugfix a nested subblock in an inheritance child template was not replace by\n   outer level block with same name in same child template https://github.com/smarty-php/smarty/issues/500\n\n29.10.2018\n - bugfix Smarty::$php_handling == PHP_PASSTHRU (default) did eat the \"\\n\" (newline) character if it did directly followed\n   a PHP tag like \"?>\" or other https://github.com/smarty-php/smarty/issues/501\n\n14.10.2018\n - bugfix autoloader exit shortcut https://github.com/smarty-php/smarty/issues/467\n\n11.10.2018\n - bugfix {insert} not works when caching is enabled and included template is present\n   https://github.com/smarty-php/smarty/issues/496\n - bugfix in date-format modifier; NULL at date string or default_date did not produce correct output\n   https://github.com/smarty-php/smarty/pull/458\n\n09.10.2018\n - bugfix fix of 26.8.2017 https://github.com/smarty-php/smarty/issues/327\n   modifier is applied to sum expression https://github.com/smarty-php/smarty/issues/491\n - bugfix indexed arrays could not be defined \"array(...)\"\"\n\n18.09.2018\n  - bugfix large plain text template sections without a Smarty tag > 700kB could\n    could fail in version 3.1.32 and 3.1.33 because PHP preg_match() restrictions\n    https://github.com/smarty-php/smarty/issues/488\n\n## 3.1.33 release - 12.09.2018\n## 3.1.33-dev-12 -\n03.09.2018\n  - bugfix {foreach} using new style property access like {$item@property} on\n    Smarty 2 style named foreach loop could produce errors https://github.com/smarty-php/smarty/issues/484\n\n31.08.2018\n  - bugfix some custom left and right delimiters like '{^' '^}' did not work\n    https://github.com/smarty-php/smarty/issues/450 https://github.com/smarty-php/smarty/pull/482\n\n  - reformating for PSR-2 coding standards https://github.com/smarty-php/smarty/pull/483\n\n  - bugfix on Windows absolute filepathes did fail if the drive letter was followed by a linux DIRECTORY_SEPARATOR\n    like C:/  at Smarty > 3.1.33-dev-5 https://github.com/smarty-php/smarty/issues/451\n\n  - PSR-2 code style fixes for config and template file Lexer/Parser generated with\n    the Smarty Lexer/Parser generator from https://github.com/smarty-php/smarty-lexer\n    https://github.com/smarty-php/smarty/pull/483\n\n26.08.2018\n  - bugfix/enhancement {capture} allow variable as capture block name in Smarty special variable\n    like $smarty.capture.$foo https://github.com/smarty-php/smarty/issues/478 https://github.com/smarty-php/smarty/pull/481\n\n## 3.1.33-dev-6 -\n19.08.2018\n  - fix PSR-2 coding standards and PHPDoc blocks https://github.com/smarty-php/smarty/pull/452\n    https://github.com/smarty-php/smarty/pull/475\n    https://github.com/smarty-php/smarty/pull/473\n  - bugfix PHP5.2 compatibility https://github.com/smarty-php/smarty/pull/472\n\n## 3.1.33-dev-4 -\n17.05.2018\n - bugfix strip-block produces different output in Smarty v3.1.32 https://github.com/smarty-php/smarty/issues/436\n - bugfix Smarty::compileAllTemplates ignores `$extension` parameter https://github.com/smarty-php/smarty/issues/437\n   https://github.com/smarty-php/smarty/pull/438\n - improvement do not compute total property in {foreach} if not needed https://github.com/smarty-php/smarty/issues/443\n - bugfix  plugins may not be loaded when setMergeCompiledIncludes is true https://github.com/smarty-php/smarty/issues/435\n\n26.04.2018\n - bugfix  regarding Security Vulnerability did not solve the problem under Linux.\n   Security issue CVE-2018-16831\n\n## 3.1.32 - (24.04.2018)\n24.04.2018\n - bugfix  possible Security Vulnerability in Smarty_Security class.\n\n26.03.2018\n - bugfix plugins may not be loaded if {function} or {block} tags are executed in nocache mode\n   https://github.com/smarty-php/smarty/issues/371\n\n26.03.2018\n - new feature {parent} =  {$smarty.block.parent} {child} =  {$smarty.block.child}\n\n23.03.2018\n - bugfix preg_replace could fail on large content resulting in a blank page https://github.com/smarty-php/smarty/issues/417\n\n21.03.2018\n - bugfix {$smarty.section...} used outside {section}{/section} showed incorrect values if {section}{/section} was called inside\n   another loop https://github.com/smarty-php/smarty/issues/422\n - bugfix short form of {section} attributes did not work https://github.com/smarty-php/smarty/issues/428\n\n17.03.2018\n - improvement Smarty::compileAllTemplates() exit with a non-zero status code if max errors is reached https://github.com/smarty-php/smarty/pull/402\n\n16.03.2018\n - bugfix extends resource did not work with user defined left/right delimiter https://github.com/smarty-php/smarty/issues/419\n\n22.11.2017\n - bugfix {break} and {continue} could fail if {foreach}{/foreach} did contain other\n   looping tags like {for}, {section} and {while} https://github.com/smarty-php/smarty/issues/323\n\n20.11.2017\n  - bugfix rework of newline spacing between tag code and template text.\n    now again identical with Smarty2 (forum topic 26878)\n  - replacement of \" by '\n\n05.11.2017\n  - lexer/parser optimization\n  - code cleanup and optimizations\n  - bugfix {$smarty.section.name.loop} used together with {$smarty.section.name.total} could produce\n    wrong results (forum topic 27041)\n\n26.10.2017\n  - bugfix Smarty version was  not filled in header comment of compiled and cached  files\n  - optimization replace internal Smarty::$ds property by DIRECTORY_SEPARATOR\n  - deprecate functions Smarty::muteExpectedErrors() and Smarty::unmuteExpectedErrors()\n    as Smarty does no longer use error suppression like @filemtime().\n    for backward compatibility code is moved from Smarty class to an external class and still can be\n    called.\n  - correction of PHPDoc blocks\n  - minor code cleanup\n\n21.10.2017\n  - bugfix custom delimiters could fail since modification of  version 3.1.32-dev-23\n    https://github.com/smarty-php/smarty/issues/394\n\n18.10.2017\n  - bugfix fix implementation of unclosed block tag in double quoted string of 12.10.2017\n    https://github.com/smarty-php/smarty/issues/396 https://github.com/smarty-php/smarty/issues/397\n    https://github.com/smarty-php/smarty/issues/391 https://github.com/smarty-php/smarty/issues/392\n\n12.10.2017\n  - bugfix $smarty.block.child and $smarty.block.parent could not be used like any\n    $smarty special variable https://github.com/smarty-php/smarty/issues/393\n  - unclosed block tag in double quoted string must throw compiler exception.\n     https://github.com/smarty-php/smarty/issues/391 https://github.com/smarty-php/smarty/issues/392\n\n07.10.2017\n  - bugfix modification of 9.8.2017 did fail on some recursive\n    tag nesting. https://github.com/smarty-php/smarty/issues/389\n\n26.8.2017\n  - bugfix chained modifier failed when last modifier parameter is a signed value\n    https://github.com/smarty-php/smarty/issues/327\n  - bugfix templates filepath with multibyte characters did not work\n    https://github.com/smarty-php/smarty/issues/385\n  - bugfix {make_nocache} did display code if the template did not contain other nocache code\n    https://github.com/smarty-php/smarty/issues/369\n\n09.8.2017\n  - improvement repeated delimiter like {{ and }} will be treated as literal\n    https://groups.google.com/forum/#!topic/smarty-developers/h9r82Bx4KZw\n\n05.8.2017\n  - bugfix wordwrap modifier could fail if used in nocache code.\n    converted plugin file shared.mb_wordwrap.php into modifier.mb_wordwrap.php\n  - cleanup of _getSmartyObj()\n\n31.7.2017\n  - Call clearstatcache() after mkdir() failure https://github.com/smarty-php/smarty/pull/379\n\n30.7.2017\n  - rewrite mkdir() bugfix to retry automatically see https://github.com/smarty-php/smarty/pull/377\n    https://github.com/smarty-php/smarty/pull/379\n\n21.7.2017\n  - security possible PHP code injection on custom resources at display() or fetch()\n    calls if the resource does not sanitize the template name\n  - bugfix fix 'mkdir(): File exists' error on create directory from parallel\n    processes https://github.com/smarty-php/smarty/pull/377\n  - bugfix solve preg_match() hhvm parameter problem https://github.com/smarty-php/smarty/pull/372\n\n27.5.2017\n  - bugfix change compiled code for registered function and modifiers to called as callable to allow closures\n    https://github.com/smarty-php/smarty/pull/368, https://github.com/smarty-php/smarty/issues/273\n  - bugfix https://github.com/smarty-php/smarty/pull/368 did break the default plugin handler\n  - improvement replace phpversion() by PHP_VERSION constant.\n    https://github.com/smarty-php/smarty/pull/363\n\n21.5.2017\n  - performance store flag for already required shared plugin functions in static variable or\n    Smarty's $_cache to improve performance when plugins are often called\n    https://github.com/smarty-php/smarty/commit/51e0d5cd405d764a4ea257d1bac1fb1205f74528#commitcomment-22280086\n  - bugfix remove special treatment of classes implementing ArrayAccess in {foreach}\n    https://github.com/smarty-php/smarty/issues/332\n  - bugfix remove deleted files by clear_cache() and clear_compiled_template() from\n    ACP cache if present, add some is_file() checks to avoid possible warnings on filemtime()\n    caused by above functions.\n    https://github.com/smarty-php/smarty/issues/341\n  - bugfix version 3.1.31 did fail under PHP 5.2\n    https://github.com/smarty-php/smarty/issues/365\n\n19.5.2017\n  - change properties $accessMap and $obsoleteProperties from private to protected\n    https://github.com/smarty-php/smarty/issues/351\n  - new feature The named capture buffers can now be accessed also as array\n    See NEWS_FEATURES.txt https://github.com/smarty-php/smarty/issues/366\n  - improvement check if ini_get() and ini_set() not disabled\n    https://github.com/smarty-php/smarty/pull/362\n\n24.4.2017\n  - fix spelling https://github.com/smarty-php/smarty/commit/e3eda8a5f5653d8abb960eb1bc47e3eca679b1b4#commitcomment-21803095\n\n17.4.2017\n  - correct generated code on empty() and isset() call, observe change PHP behaviour since PHP 5.5\n    https://github.com/smarty-php/smarty/issues/347\n\n14.4.2017\n  - merge pull requests https://github.com/smarty-php/smarty/pull/349, https://github.com/smarty-php/smarty/pull/322 and    https://github.com/smarty-php/smarty/pull/337 to fix spelling and annotation\n\n13.4.2017\n  - bugfix array_merge() parameter should be checked https://github.com/smarty-php/smarty/issues/350\n\n## 3.1.31 - (14.12.2016)\n  23.11.2016\n   - move template object cache into static variables\n\n  19.11.2016\n  - bugfix inheritance root child templates containing nested {block}{/block} could call sub-bock content from parent\n    template https://github.com/smarty-php/smarty/issues/317\n  - change version checking\n\n 11.11.2016\n  - bugfix when Smarty is using a cached template object on Smarty::fetch() or Smarty::isCached() the inheritance data\n    must be removed https://github.com/smarty-php/smarty/issues/312\n  - smaller speed optimization\n\n 08.11.2016\n  - add bootstrap file to load and register Smarty_Autoloader. Change composer.json to make it known to composer\n\n 07.11.2016\n  - optimization of lexer speed https://github.com/smarty-php/smarty/issues/311\n\n 27.10.2016\n  - bugfix template function definitions array has not been cached between Smarty::fetch() and Smarty::display() calls\n    https://github.com/smarty-php/smarty/issues/301\n\n 23.10.2016\n  - improvement/bugfix when Smarty::fetch() is called on a template object the inheritance and tplFunctions property\n    should be copied to the called template object\n\n 21.10.2016\n  - bugfix for compile locking touched timestamp of old compiled file was not restored on compilation error https://github.com/smarty-php/smarty/issues/308\n\n 20.10.2016\n  - bugfix nocache code was not removed in cache file when subtemplate did contain PHP short tags in text but no other\n    nocache code https://github.com/smarty-php/smarty/issues/300\n\n 19.10.2016\n  - bugfix {make_nocache $var} did fail when variable value did contain '\\' https://github.com/smarty-php/smarty/issues/305\n  - bugfix {make_nocache $var} remove spaces from variable value https://github.com/smarty-php/smarty/issues/304\n\n 12.10.2016\n  - bugfix {include} with template names including variable or constants could fail after bugfix from\n     28.09.2016 https://github.com/smarty-php/smarty/issues/302\n\n 08.10.2016\n  - optimization move runtime extension for template functions into Smarty objects\n\n 29.09.2016\n  - improvement new Smarty::$extends_recursion property to disable execution of {extends} in templates called by extends resource\n     https://github.com/smarty-php/smarty/issues/296\n\n 28.09.2016\n  - bugfix the generated code for calling a subtemplate must pass the template resource name in single quotes https://github.com/smarty-php/smarty/issues/299\n  - bugfix nocache hash was not removed for <?xml ?> tags in subtemplates https://github.com/smarty-php/smarty/issues/300\n\n 27.09.2016\n  - bugfix when Smarty does use an internally cached template object on Smarty::fetch() calls\n           the template and config variables must be cleared https://github.com/smarty-php/smarty/issues/297\n\n 20.09.2016\n  - bugfix some $smarty special template variables are no longer accessed as real variable.\n    using them on calls like {if isset($smarty.foo)} or {if empty($smarty.foo)} will fail\n    http://www.smarty.net/forums/viewtopic.php?t=26222\n  - temporary fix for https://github.com/smarty-php/smarty/issues/293 main reason still under investigation\n  - improvement new tags {block_parent} {block_child} in template inheritance\n\n 19.09.2016\n  - optimization clear compiled and cached folder completely on detected version change\n  - cleanup convert cache resource file method clear into runtime extension\n\n 15.09.2016\n  - bugfix assigning a variable in if condition by function like {if $value = array_shift($array)} the function got called twice https://github.com/smarty-php/smarty/issues/291\n  - bugfix function plugins called with assign attribute like {foo assign='bar'} did not output returned content because\n           because assumption was made that it was assigned to a variable https://github.com/smarty-php/smarty/issues/292\n  - bugfix calling $smarty->isCached() on a not existing cache file with $smarty->cache_locking = true; could cause a 10 second delay http://www.smarty.net/forums/viewtopic.php?t=26282\n  - improvement make Smarty::clearCompiledTemplate() on custom resource independent from changes of templateId computation\n\n 11.09.2016\n  - improvement {math} misleading E_USER_WARNING messages when parameter value = null https://github.com/smarty-php/smarty/issues/288\n  - improvement move often used code snippets into methods\n  - performance Smarty::configLoad() did load unneeded template source object\n\n 09.09.2016\n  - bugfix/optimization {foreach} did not execute the {foreachelse} when iterating empty objects https://github.com/smarty-php/smarty/pull/287\n  - bugfix {foreach} must keep the @properties when restoring a saved $item variable as the properties might be used outside {foreach} https://github.com/smarty-php/smarty/issues/267\n  - improvement {foreach} observe {break n} and {continue n} nesting levels when restoring saved $item and $key variables\n\n 08.09.2016\n  - bugfix implement wrapper for removed method getConfigVariable() https://github.com/smarty-php/smarty/issues/286\n\n 07.09.2016\n  - bugfix using nocache like attribute with value true like {plugin nocache=true} did not work https://github.com/smarty-php/smarty/issues/285\n  - bugfix uppercase TRUE, FALSE and NULL did not work when security was enabled https://github.com/smarty-php/smarty/issues/282\n  - bugfix when {foreach} was looping over an object the total property like {$item@total} did always return 1 https://github.com/smarty-php/smarty/issues/281\n  - bugfix {capture}{/capture} did add in 3.1.30 unintended additional blank lines https://github.com/smarty-php/smarty/issues/268\n\n 01.09.2016\n  - performance require_once should be called only once for shared plugins https://github.com/smarty-php/smarty/issues/280\n\n 26.08.2016\n  - bugfix change of 23.08.2016 failed on linux when use_include_path = true\n\n 23.08.2016\n  - bugfix remove constant DS as shortcut for DIRECTORY_SEPARATOR as the user may have defined it to something else https://github.com/smarty-php/smarty/issues/277\n\n 20.08-2016\n  - bugfix {config_load ... scope=\"global\"} shall not throw an arror but fallback to scope=\"smarty\" https://github.com/smarty-php/smarty/issues/274\n  - bugfix {make_nocache} failed when using composer autoloader https://github.com/smarty-php/smarty/issues/275\n\n 14.08.2016\n  - bugfix $smarty_>debugging = true; did E_NOTICE messages when {eval} tag was used https://github.com/smarty-php/smarty/issues/266\n  - bugfix Class 'Smarty_Internal_Runtime_ValidateCompiled' not found when upgrading from some older Smarty versions with existing\n           compiled or cached template files https://github.com/smarty-php/smarty/issues/269\n  - optimization remove unneeded call to update acopes when {assign} scope and template scope was local (default)\n\n## 3.1.30 - (07.08.2016)\n\n 07.08.2016\n  - bugfix update of 04.08.2016 was incomplete\n\n 05.08.2016\n  - bugfix compiling of templates failed when the Smarty delimiter did contain '/' https://github.com/smarty-php/smarty/issues/264\n  - updated error checking at template and config default handler\n\n 04.08.2016\n  - improvement move template function source parameter into extension\n\n 26.07.2016\n  - optimization unneeded loading of compiled resource\n\n 24.07.2016\n  - regression this->addPluginsDir('/abs/path/to/dir') adding absolute path without trailing '/' did fail https://github.com/smarty-php/smarty/issues/260\n\n 23.07.2016\n  - bugfix setTemplateDir('/') and setTemplateDir('') did create wrong absolute filepath https://github.com/smarty-php/smarty/issues/245\n  - optimization of filepath normalization\n  - improvement remove double function declaration in plugin shared.escape_special_cars.php https://github.com/smarty-php/smarty/issues/229\n\n 19.07.2016\n  - bugfix multiple {include} with relative filepath within {block}{/block} could fail https://github.com/smarty-php/smarty/issues/246\n  - bugfix {math} shell injection vulnerability patch provided by Tim Weber\n\n 18.07.2016\n  - bugfix {foreach} if key variable and item@key attribute have been used both the key variable was not updated https://github.com/smarty-php/smarty/issues/254\n  - bugfix modifier on plugins like {plugin|modifier ... } did fail when the plugin does return an array https://github.com/smarty-php/smarty/issues/228\n  - bugfix avoid opcache_invalidate to result in ErrorException when opcache.restrict_api is not empty https://github.com/smarty-php/smarty/pull/244\n  - bugfix multiple {include} with relative filepath within {block}{/block} could fail https://github.com/smarty-php/smarty/issues/246\n\n 14.07.2016\n  - bugfix wrong parameter on compileAllTemplates() and compileAllConfig() https://github.com/smarty-php/smarty/issues/231\n\n 13.07.2016\n  - bugfix PHP 7 compatibility on registered compiler plugins https://github.com/smarty-php/smarty/issues/241\n  - update testInstall() https://github.com/smarty-php/smarty/issues/248https://github.com/smarty-php/smarty/issues/248\n  - bugfix enable debugging could fail when template objects did already exists https://github.com/smarty-php/smarty/issues/237\n  - bugfix template function data should be merged when loading subtemplate https://github.com/smarty-php/smarty/issues/240\n  - bugfix wrong parameter on compileAllTemplates() https://github.com/smarty-php/smarty/issues/231\n\n 12.07.2016\n  - bugfix {foreach} item variable must be created also on empty from array https://github.com/smarty-php/smarty/issues/238 and https://github.com/smarty-php/smarty/issues/239\n  - bugfix enableSecurity() must init cache flags https://github.com/smarty-php/smarty/issues/247\n\n 27.05.2016\n  - bugfix/improvement of compileAlltemplates() follow symlinks in template folder (PHP >= 5.3.1) https://github.com/smarty-php/smarty/issues/224\n      clear internal cache and expension handler for each template to avoid possible conflicts https://github.com/smarty-php/smarty/issues/231\n\n 16.05.2016\n  - optimization {foreach} compiler and processing\n  - broken PHP 5.3 and 5.4 compatibility\n\n 15.05.2016\n  - optimization and cleanup of resource code\n\n 10.05.2016\n  - optimization of inheritance processing\n\n 07.05.2016\n  -bugfix Only variables should be assigned by reference https://github.com/smarty-php/smarty/issues/227\n\n 02.05.2016\n  - enhancement {block} tag names can now be variable https://github.com/smarty-php/smarty/issues/221\n\n 01.05.2016\n  - bugfix same relative filepath at {include} called from template in different folders could display wrong sub-template\n\n 29.04.2016\n  - bugfix {strip} remove space on linebreak between html tags https://github.com/smarty-php/smarty/issues/213\n\n 24.04.2016\n  - bugfix nested {include} with relative file path could fail when called in {block} ... {/block} https://github.com/smarty-php/smarty/issues/218\n\n 14.04.2016\n  - bugfix special variable {$smarty.capture.name} was not case sensitive on name https://github.com/smarty-php/smarty/issues/210\n  - bugfix the default template handler must calculate the source uid https://github.com/smarty-php/smarty/issues/205\n\n 13.04.2016\n  - bugfix template inheritance status must be saved when calling sub-templates https://github.com/smarty-php/smarty/issues/215\n\n 27.03.2016\n  - bugfix change of 11.03.2016 cause again {capture} data could not been seen in other templates with {$smarty.capture.name} https://github.com/smarty-php/smarty/issues/153\n\n 11.03.2016\n  - optimization of capture and security handling\n  - improvement $smarty->clearCompiledTemplate() should return on recompiled or uncompiled resources\n\n 10.03.2016\n  - optimization of resource processing\n\n 09.03.2016\n  - improvement rework of 'scope' attribute handling see see NEW_FEATURES.txt https://github.com/smarty-php/smarty/issues/194\n    https://github.com/smarty-php/smarty/issues/186 https://github.com/smarty-php/smarty/issues/179\n  - bugfix correct Autoloader update of 2.3.2014 https://github.com/smarty-php/smarty/issues/199\n\n 04.03.2016\n  - bugfix change from 01.03.2016 will cause $smarty->isCached(..) failure if called multiple time for same template\n    (forum topic 25935)\n\n 02.03.2016\n  - revert autoloader optimizations because of unexplainable warning when using plugins https://github.com/smarty-php/smarty/issues/199\n\n 01.03.2016\n  - bugfix template objects must be cached on $smarty->fetch('foo.tpl) calls incase the template is fetched\n    multiple times (forum topic 25909)\n\n 25.02.2016\n  - bugfix wrong _realpath with 4 or more parent-directories https://github.com/smarty-php/smarty/issues/190\n  - optimization of _realpath\n  - bugfix instanceof expression in template code must be treated as value https://github.com/smarty-php/smarty/issues/191\n\n 20.02.2016\n  - bugfix {strip} must keep space between hmtl tags. Broken by changes of 10.2.2016 https://github.com/smarty-php/smarty/issues/184\n  - new feature/bugfix  {foreach}{section} add 'properties' attribute to force compilation of loop properties\n    see NEW_FEATURES.txt https://github.com/smarty-php/smarty/issues/189\n\n 19.02.2016\n  - revert output buffer flushing on display, echo content again because possible problems when PHP files had\n    characters (newline} after ?> at file end https://github.com/smarty-php/smarty/issues/187\n\n 14.02.2016\n  - new tag {make_nocache} read NEW_FEATURES.txt https://github.com/smarty-php/smarty/issues/110\n  - optimization of sub-template processing\n  - bugfix using extendsall as default resource and {include} inside {block} tags could produce unexpected results https://github.com/smarty-php/smarty/issues/183\n  - optimization of tag attribute compiling\n  - optimization make compiler tag object cache static for higher compilation speed\n\n 11.02.2016\n  - improvement added KnockoutJS comments to trimwhitespace outputfilter https://github.com/smarty-php/smarty/issues/82\n    https://github.com/smarty-php/smarty/pull/181\n\n 10.02.2016\n  - bugfix {strip} must keep space on output creating smarty tags within html tags https://github.com/smarty-php/smarty/issues/177\n  - bugfix wrong precedence on special if conditions like '$foo is ... by $bar' could cause wrong code https://github.com/smarty-php/smarty/issues/178\n  - improvement because of ambiguities the inline constant support has been removed from the $foo.bar syntax https://github.com/smarty-php/smarty/issues/149\n  - bugfix other {strip} error with output tags between hmtl https://github.com/smarty-php/smarty/issues/180\n\n 09.02.2016\n  - move some code from parser into compiler\n  - reformat all code for unique style\n  - update/bugfix scope attribute handling reworked. Read the newfeatures.txt file\n\n 05.02.2016\n  - improvement internal compiler changes\n\n 01.02.2016\n  - bugfix {foreach} compilation failed when $smarty->merge_compiled_includes = true and pre-filters are used.\n\n 29.01.2016\n  - bugfix implement replacement code for _tag_stack property https://github.com/smarty-php/smarty/issues/151\n\n 28.01.2016\n  - bugfix allow windows network filepath or wrapper (forum topic 25876) https://github.com/smarty-php/smarty/issues/170\n  - bugfix if fetch('foo.tpl') is called on a template object the $parent parameter should default to the calling template object https://github.com/smarty-php/smarty/issues/152\n\n 27.01.2016\n  - revert bugfix compiling {section} did create warning\n  - bugfix {$smarty.section.customer.loop} did throw compiler error https://github.com/smarty-php/smarty/issues/161\n    update of yesterdays fix\n  - bugfix string resource could inject code at {block} or inline subtemplates through PHP comments https://github.com/smarty-php/smarty/issues/157\t\t\n  - bugfix output filters did not observe nocache code flhttps://github.com/smarty-php/smarty/issues/154g https://github.com/smarty-php/smarty/issues/160\n  - bugfix {extends} with relative file path did not work https://github.com/smarty-php/smarty/issues/154\n    https://github.com/smarty-php/smarty/issues/158\n  - bugfix {capture} data could not been seen in other templates with {$smarty.capture.name} https://github.com/smarty-php/smarty/issues/153\n\n 26.01.2016\n  - improvement observe Smarty::$_CHARSET in debugging console https://github.com/smarty-php/smarty/issues/169\n  - bugfix compiling {section} did create warning\n  - bugfix {$smarty.section.customer.loop} did throw compiler error https://github.com/smarty-php/smarty/issues/161\n\n 02.01.2016\n  - update scope handling\n  - optimize block plugin compiler\n  - improvement runtime checks if registered block plugins are callable\n\n 01.01.2016\n  - remove Smarty::$resource_cache_mode property\n\n 31.12.2015\n  - optimization of {assign}, {if} and {while} compiled code\n\n 30.12.2015\n  - bugfix plugin names starting with \"php\" did not compile https://github.com/smarty-php/smarty/issues/147\n\n 29.12.2015\n  - bugfix Smarty::error_reporting was not observed when display() or fetch() was called on template objects https://github.com/smarty-php/smarty/issues/145\n\n 28.12.2015\n  - optimization of {foreach} code size and processing\n\n 27.12.2015\n  - improve inheritance code\n  - update external methods\n  - code fixes\n  - PHPdoc updates\n\n 25.12.2015\n  - compile {block} tag code and its processing into classes\n  - optimization replace hhvm extension by inline code\n  - new feature If ACP is enabled force an apc_compile_file() when compiled or cached template was updated\n\n 24.12.2015\n  - new feature Compiler does now observe the template_dir setting and will create separate compiled files if required\n  - bugfix post filter did fail on template inheritance https://github.com/smarty-php/smarty/issues/144\n\n 23.12.2015\n  - optimization move internal method decodeProperties back into template object\n  - optimization move subtemplate processing back into template object\n  - new feature Caching does now observe the template_dir setting and will create separate cache files if required\n\n 22.12.2015\n  - change $xxx_dir properties from private to protected in case Smarty class gets extended\n  - code optimizations\n\n 21.12.2015\n  - bugfix a filepath starting with '/' or '\\' on windows should normalize to the root dir\n    of current working drive https://github.com/smarty-php/smarty/issues/134\n  - optimization of filepath normalization\n  - bugfix {strip} must remove all blanks between html tags https://github.com/smarty-php/smarty/issues/136\n\n - 3.1.29 - (21.12.2015)\n 21.12.2015\n  - optimization improve speed of filetime checks on extends and extendsall resource\n\n 20.12.2015\n  - bugfix failure when the default resource type was set to 'extendsall' https://github.com/smarty-php/smarty/issues/123\n  - update compilation of Smarty special variables\n  - bugfix add addition check for OS type on normalization of file path https://github.com/smarty-php/smarty/issues/134\n  - bugfix the source uid of the extendsall resource must contain $template_dir settings https://github.com/smarty-php/smarty/issues/123\n\n 19.12.2015\n  - bugfix using $smarty.capture.foo in expressions could fail https://github.com/smarty-php/smarty/pull/138\n  - bugfix broken PHP 5.2 compatibility https://github.com/smarty-php/smarty/issues/139\n  - remove no longer used code\n  - improvement make sure that compiled and cache templates never can contain a trailing '?>?\n\n 18.12.2015\n  - bugfix regression when modifier parameter was followed by math https://github.com/smarty-php/smarty/issues/132\n\n 17.12.2015\n  - bugfix {$smarty.capture.nameFail} did lowercase capture name https://github.com/smarty-php/smarty/issues/135\n  - bugfix using {block append/prepend} on same block in multiple levels of inheritance templates could fail (forum topic 25827)\n  - bugfix text content consisting of just a single '0' like in {if true}0{/if} was suppressed (forum topic 25834)\n\n 16.12.2015\n  - bugfix {foreach} did fail if from atrribute is a Generator class https://github.com/smarty-php/smarty/issues/128\n  - bugfix direct access $smarty->template_dir = 'foo'; should call Smarty::setTemplateDir() https://github.com/smarty-php/smarty/issues/121\n\n 15.12.2015\n  - bugfix  {$smarty.cookies.foo} did return the $_COOKIE array not the 'foo' value https://github.com/smarty-php/smarty/issues/122\n  - bugfix  a call to clearAllCache() and other should clear all internal template object caches (forum topic 25828)\n\n 14.12.2015\n  - bugfix  {$smarty.config.foo} broken in 3.1.28 https://github.com/smarty-php/smarty/issues/120\n  - bugfix  multiple calls of {section} with same name droped E_NOTICE error https://github.com/smarty-php/smarty/issues/118\n\n - 3.1.28 - (13.12.2015)\n 13.12.2015\n  - bugfix {foreach} and {section} with uppercase characters in name attribute did not work (forum topic 25819)\n  - bugfix $smarty->debugging_ctrl = 'URL' did not work (forum topic 25811)\n  - bugfix Debug Console could display incorrect data when using subtemplates\n\n 09.12.2015\n  - bugfix Smarty did fail under PHP 7.0.0 with use_include_path = true;\n\n 09.12.2015\n  - bugfix {strip} should exclude some html tags from stripping, related to fix for https://github.com/smarty-php/smarty/issues/111\n\n 08.12.2015\n  - bugfix internal template function data got stored in wrong compiled file https://github.com/smarty-php/smarty/issues/114\n\n 05.12.2015\n  -bugfix {strip} should insert a single space https://github.com/smarty-php/smarty/issues/111\n\n 25.11.2015\n  -bugfix a left delimter like '[%' did fail on [%$var_[%$variable%]%] (forum topic 25798)\n\n 02.11.2015\n  - bugfix {include} with variable file name like {include file=\"foo_`$bar`.tpl\"} did fail in 3.1.28-dev https://github.com/smarty-php/smarty/issues/102\n\n 01.11.2015\n  - update config file processing\n\n 31.10.2015\n  - bugfix add missing $trusted_dir property to SmartyBC class (forum topic 25751)\n\n 29.10.2015\n  - improve template scope handling\n\n 24.10.2015\n  - more optimizations of template processing\n  - bugfix Error when using {include} within {capture} https://github.com/smarty-php/smarty/issues/100\n\n 21.10.2015\n  - move some code into runtime extensions\n\n 18.10.2015\n  - optimize filepath normalization\n  - rework of template inheritance\n  - speed and size optimizations\n  - bugfix under HHVM temporary cache file must only be created when caches template was updated\n  - fix compiled code for new {block} assign attribute\n  - update code generated by template function call handler\n\n 18.09.2015\n  - bugfix {if $foo instanceof $bar} failed to compile if 2nd value is a variable https://github.com/smarty-php/smarty/issues/92\n\n 17.09.2015\n  - bugfix {foreach} first attribute was not correctly reset since commit 05a8fa2 of 02.08.2015 https://github.com/smarty-php/smarty/issues/90\n\n 16.09.2015\n  - update compiler by moving no longer needed properties, code optimizations and other\n\n 14.09.2015\n  - optimize autoloader\n  - optimize subtemplate handling\n  - update template inheritance processing\n  - move code of {call} processing back into Smarty_Internal_Template class\n  - improvement invalidate OPCACHE for cleared compiled and cached template files (forum topic 25557)\n  - bugfix unintended multiple debug windows (forum topic 25699)\n\n 30.08.2015\n  - size optimization move some runtime functions into extension\n  - optimize inline template processing\n  - optimization merge inheritance child and parent templates into one compiled template file\n\n 29.08.2015\n  - improvement convert template inheritance into runtime processing\n  - bugfix {$smarty.block.parent} did always reference the root parent block https://github.com/smarty-php/smarty/issues/68\n\n 23.08.2015\n  - introduce Smarty::$resource_cache_mode and cache template object of {include} inside loop\n  - load seldom used Smarty API methods dynamically to reduce memory footprint\n  - cache template object of {include} if same template is included several times\n  - convert debug console processing to object\n  - use output buffers for better performance and less memory usage\n  - optimize nocache hash processing\n  - remove not really needed properties\n  - optimize rendering\n  - move caching to Smarty::_cache\n  - remove properties with redundant content\n  - optimize Smarty::templateExists()\n  - optimize use_include_path processing\n  - relocate properties for size optimization\n  - remove redundant code\n  - bugfix compiling super globals like {$smarty.get.foo} did fail in the master branch https://github.com/smarty-php/smarty/issues/77\n\n 06.08.2015\n  - avoid possible circular object references caused by parser/lexer objects\n  - rewrite compileAll... utility methods\n  - commit several  internal improvements\n  - bugfix Smarty failed when compile_id did contain \"|\"\n\n 03.08.2015\n  - rework clear cache methods\n  - bugfix compileAllConfig() was broken since 3.1.22 because of the changes in config file processing\n  - improve getIncludePath() to return directory if no file was given\n\n 02.08.2015\n  - optimization and code cleanup of {foreach} and {section} compiler\n  - rework {capture} compiler\n\n 01.08.2015\n  - update DateTime object can be instance of DateTimeImmutable since PHP5.5 https://github.com/smarty-php/smarty/pull/75\n  - improvement show resource type and start of template source instead of uid on eval: and string: resource (forum topic 25630)\n\n 31.07.2015\n  - optimize {foreach} and {section} compiler\n\n 29.07.2015\n  - optimize {section} compiler for speed and size of compiled code\n\n 28.07.2015\n  - update for PHP 7 compatibility\n\n 26.07.2015\n  - improvement impement workaround for HHVM PHP incompatibillity https://github.com/facebook/hhvm/issues/4797\n\n 25.07.2015\n  - bugfix parser did hang on text starting <?something https://github.com/smarty-php/smarty/issues/74\n\n 20.07.2015\n  - bugfix config files got recompiled on each request\n  - improvement invalidate PHP 5.5 opcache for recompiled and cached templates  https://github.com/smarty-php/smarty/issues/72\n\n 12.07.2015\n  - optimize {extends} compilation\n\n 10.07.2015\n  - bugfix force file: resource in demo resource.extendsall.php\n\n 08.07.2015\n  - bugfix convert each word of class names to ucfirst in in compiler. (forum topic 25588)\n\n 07.07.2015\n  - improvement allow fetch() or display() called on a template object to get output from other template\n     like $template->fetch('foo.tpl') https://github.com/smarty-php/smarty/issues/70\n  - improvement Added $limit parameter to regex_replace modifier #71\n  - new feature multiple indices on file: resource\n\n 06.07.2015\n  - optimize {block} compilation\n  - optimization get rid of __get and __set in source object\n\n 01.07.2015\n  - optimize compile check handling\n  - update {foreach} compiler\n  - bugfix debugging console did not display string values containing \\n, \\r or \\t correctly https://github.com/smarty-php/smarty/issues/66\n  - optimize source resources\n\n 28.06.2015\n  - move $smarty->enableSecurity() into Smarty_Security class\n  - optimize security isTrustedResourceDir()\n  - move auto load filter methods into extension\n  - move $smarty->getTemplateVars() into extension\n  - move getStreamVariable() into extension\n  - move $smarty->append() and $smarty->appendByRef() into extension\n  - optimize autoloader\n  - optimize file path normalization\n  - bugfix PATH_SEPARATOR was replaced by mistake in autoloader\n  - remove redundant code\n\n 27.06.2015\n  - bugfix resolve naming conflict between custom Smarty delimiter '<%' and PHP ASP tags https://github.com/smarty-php/smarty/issues/64\n  - update $smarty->_realpath for relative path not starting with './'\n  - update Smarty security with new realpath handling\n  - update {include_php} with new realpath handling\n  - move $smarty->loadPlugin() into extension\n  - minor compiler optimizations\n  - bugfix allow function plugins with name ending with 'close' https://github.com/smarty-php/smarty/issues/52\n  - rework of $smarty->clearCompiledTemplate() and move it to its own extension\n\n 19.06.2015\n  - improvement allow closures as callback at $smarty->registerFilter() https://github.com/smarty-php/smarty/issues/59\n\n - 3.1.27- (18.06.2015)\n 18.06.2015\n  - bugfix another update on file path normalization failed on path containing something like \"/.foo/\" https://github.com/smarty-php/smarty/issues/56\n\n - 3.1.26- (18.06.2015)\n 18.06.2015\n  - bugfix file path normalization failed on path containing something like \"/.foo/\" https://github.com/smarty-php/smarty/issues/56\n\n 17.06.2015\n  - bugfix calling a plugin with nocache option but no other attributes like {foo nocache} caused call to undefined function https://github.com/smarty-php/smarty/issues/55\n\n - 3.1.25- (15.06.2015)\n 15.06.2015\n  - optimization of smarty_cachereource_keyvaluestore.php code\n\n 14.06.2015\n  - bugfix a relative sub template path could fail if template_dir path did contain /../ https://github.com/smarty-php/smarty/issues/50\n  - optimization rework of path normalization\n  - bugfix an output tag with variable, modifier followed by an operator like {$foo|modifier+1} did fail https://github.com/smarty-php/smarty/issues/53\n\n 13.06.2015\n  - bugfix a custom cache resource using smarty_cachereource_keyvaluestore.php did fail if php.ini mbstring.func_overload = 2 (forum topic 25568)\n\n 11.06.2015\n  - bugfix the lexer could hang on very large quoted strings (forum topic 25570)\n\n 08.06.2015\n  - bugfix using {$foo} as array index like $bar.{$foo} or in double quoted string like \"some {$foo} thing\" failed https://github.com/smarty-php/smarty/issues/49\n\n 04.06.2015\n  - bugfix possible error message on unset() while compiling {block} tags https://github.com/smarty-php/smarty/issues/46\n\n 01.06.2015\n  - bugfix <?xml ... ?> including template variables broken  since 3.1.22 https://github.com/smarty-php/smarty/issues/47\n\n 27.05.2015\n  - bugfix {include} with variable file name must not create by default individual cache file (since 3.1.22) https://github.com/smarty-php/smarty/issues/43\n\n 24.05.2015\n  - bugfix if condition string 'neq' broken due to a typo https://github.com/smarty-php/smarty/issues/42\n\n - 3.1.24- (23.05.2015)\n 23.05.2015\n  - improvement on php_handling to allow very large PHP sections, better error handling\n  - improvement allow extreme large comment sections (forum 25538)\n\n 21.05.2015\n  - bugfix broken PHP 5.2 compatibility when compiling <?php tags https://github.com/smarty-php/smarty/issues/40\n  - bugfix named {foreach} comparison like $smarty.foreach.foobar.index > 1 did compile into wrong code https://github.com/smarty-php/smarty/issues/41\n\n 19.05.2015\n  - bugfix compiler did overwrite existing variable value when setting the nocache attribute https://github.com/smarty-php/smarty/issues/39\n  - bugfix output filter trimwhitespace could run into the pcre.backtrack_limit on large output (code.google issue 220)\n  - bugfix compiler could run into the pcre.backtrack_limit on larger comment or {php} tag sections (forum 25538)\n\n 18.05.2015\n  - improvement introduce shortcuts in lexer/parser rules for most frequent terms for higher\n    compilation speed\n\n 16.05.2015\n  - bugfix {php}{/php} did work just for single lines https://github.com/smarty-php/smarty/issues/33\n  - improvement remove not needed ?><?php transitions from compiled code\n  - improvement reduce number of lexer tokens on operators and if conditions\n  - improvement higher compilation speed by modified lexer/parser generator at \"smarty/smarty-lexer\"\n\n 13.05.2015\n  - improvement remove not needed ?><?php transitions from compiled code\n  - improvement of debugging:\n      - use fresh Smarty object to display the debug console because of possible problems when the Smarty\n        was extended or Smarty properties had been modified in the class source\n      - display Smarty version number\n      - Truncate lenght of Origin display and extend strin value display to 80 character\n  - bugfix in Smarty_Security  'nl2br' should be a trusted modifier, not PHP function (code.google issue 223)\n\n 12.05.2015\n  - bugfix {$smarty.constant.TEST} did fail  on undefined constant https://github.com/smarty-php/smarty/issues/28\n  - bugfix access to undefined config variable like {#undef#} did fail https://github.com/smarty-php/smarty/issues/29\n  - bugfix in nested {foreach} saved item attributes got overwritten https://github.com/smarty-php/smarty/issues/33\n\n - 3.1.23 - (12.05.2015)\n 12.05.2015\n  - bugfix of smaller performance issue introduce in 3.1.22 when caching is enabled\n  - bugfix missig entry for smarty-temmplate-config in autoloader\n\n - 3.1.22 - tag was deleted because 3.1.22 did fail caused by the missing entry for smarty-temmplate-config in autoloader\n 10.05.2015\n  - bugfix custom cache resource did not observe compile_id and cache_id when $cache_locking == true\n  - bugfix cache lock was not handled correctly after timeout when $cache_locking == true\n  - improvement added constants for $debugging\n\n 07.05.2015\n  - improvement of the debugging console. Read NEW_FEATURES.txt\n  - optimization of resource class loading\n\n 06.05.2015\n  - bugfix in 3.1.22-dev cache resource must not be loaded for subtemplates\n  - bugfix/improvement in 3.1.22-dev cache locking did not work as expected\n\n 05.05.2015\n  - optimization on cache update when main template is modified\n  - optimization move <?php ?> handling from parser to new compiler module\n\n 05.05.2015\n  - bugfix code could be messed up when {tags} are used in multiple attributes https://github.com/smarty-php/smarty/issues/23\n\n 04.05.2015\n  - bugfix Smarty_Resource::parseResourceName incompatible with Google AppEngine (https://github.com/smarty-php/smarty/issues/22)\n  - improvement use is_file() checks to avoid errors suppressed by @ which could still cause problems (https://github.com/smarty-php/smarty/issues/24)\n\n 28.04.2015\n  - bugfix plugins of merged subtemplates not loaded in 3.1.22-dev (forum topic 25508) 2nd fix\n\n 28.04.2015\n  - bugfix plugins of merged subtemplates not loaded in 3.1.22-dev (forum topic 25508)\n\n 23.04.2015\n  - bugfix a nocache template variable used as parameter at {insert} was by mistake cached\n\n 20.04.2015\n  - bugfix at a template function containing nocache code a parmeter could overwrite a template variable of same name\n\n 27.03.2015\n  - bugfix Smarty_Security->allow_constants=false; did also disable true, false and null (change of 16.03.2015)\n  - improvement added a whitelist for trusted constants to security Smarty_Security::$trusted_constants (forum topic 25471)\n\n 20.03.2015\n  - bugfix make sure that function properties get saved only in compiled files containing the fuction definition {forum topic 25452}\n  - bugfix correct update of global variable values on exit of template functions. (reported under Smarty Developers)\n\n 16.03.2015\n - bugfix  problems with {function}{/function} and {call} tags in different subtemplate cache files {forum topic 25452}\n - bugfix  Smarty_Security->allow_constants=false; did not disallow direct usage of defined constants like {SMARTY_DIR} {forum topic 25457}\n - bugfix  {block}{/block} tags did not work inside double quoted strings https://github.com/smarty-php/smarty/issues/18\n\n\n 15.03.2015\n - bugfix  $smarty->compile_check must be restored before rendering of a just updated cache file {forum 25452}\n\n 14.03.2015\n - bugfix  {nocache}  {/nocache} tags corrupted code when used within a nocache section caused by a nocache template variable.\n\n - bugfix  template functions defined with {function} in an included subtemplate could not be called in nocache\n           mode with {call... nocache} if the subtemplate had it's own cache file {forum 25452}\n\n 10.03.2015\n - bugfix {include ... nocache} whith variable file or compile_id attribute was not executed in nocache mode.\n\n 12.02.2015\n - bugfix multiple Smarty::fetch() of same template when $smarty->merge_compiled_includes = true; could cause function already defined error\n\n 11.02.2015\n - bugfix recursive {includes} did create E_NOTICE message when $smarty->merge_compiled_includes = true; (github issue #16)\n\n 22.01.2015\n - new feature security can now control access to static methods and properties\n                see also NEW_FEATURES.txt\n\n 21.01.2015\n - bugfix clearCompiledTemplates(), clearAll() and clear() could try to delete whole drive at wrong path permissions because realpath() fail (forum 25397)\n - bugfix 'self::' and 'parent::' was interpreted in template syntax as static class\n\n 04.01.2015\n - push last weeks changes to github\n\n - different optimizations\n - improvement automatically create different versions of compiled templates and config files depending\n   on property settings.\n - optimization restructure template processing by moving code into classes it better belongs to\n - optimization restructure config file processing\n\n 31.12.2014\n - bugfix use function_exists('mb_get_info') for setting Smarty::$_MBSTRING.\n   Function mb_split could be overloaded depending on php.ini mbstring.func_overload\n\n\n 29.12.2014\n - new feature security can now limit the template nesting level by property $max_template_nesting\n                see also NEW_FEATURES.txt (forum 25370)\n\n 29.12.2014\n - new feature security can now disable special $smarty variables listed in property $disabled_special_smarty_vars\n                see also NEW_FEATURES.txt (forum 25370)\n\n 27.12.2014\n  - bugfix clear internal _is_file_cache when plugins_dir was modified\n\n 13.12.2014\n  - improvement optimization of lexer and parser resulting in a up to 30% higher compiling speed\n\n 11.12.2014\n  - bugfix resolve parser ambiguity between constant print tag {CONST} and other smarty tags after change of 09.12.2014\n\n 09.12.2014\n  - bugfix variables $null, $true and $false did not work after the change of 12.11.2014 (forum 25342)\n  - bugfix call of template function by a variable name did not work after latest changes (forum 25342)\n\n 23.11.2014\n  - bugfix a plugin with attached modifier could fail if the tag was immediately followed by another Smarty tag (since 3.1.21) (forum 25326)\n\n 13.11.2014\n  - improvement move autoload code into Autoloader.php. Use Composer autoloader when possible\n\n 12.11.2014\n - new feature added support of namespaces to template code\n\n 08.11.2014 - 10.11.2014\n - bugfix subtemplate called in nocache mode could be called with wrong compile_id when it did change on one of the calling templates\n - improvement add code of template functions called in nocache mode dynamically to cache file (related to bugfix of 01.11.2014)\n - bugfix Debug Console did not include all data from merged compiled subtemplates\n\n 04.11.2014\n - new feature $smarty->debugging = true; => overwrite existing Debug Console window (old behaviour)\n               $smarty->debugging = 2; => individual Debug Console window by template name\n\n 03.11.2014\n - bugfix Debug Console did not show included subtemplates since 3.1.17 (forum 25301)\n - bugfix Modifier debug_print_var did not limit recursion or prevent recursive object display at Debug Console\n    (ATTENTION: parameter order has changed to be able to specify maximum recursion)\n - bugfix Debug consol did not include subtemplate information with $smarty->merge_compiled_includes = true\n - improvement The template variables are no longer displayed as objects on the Debug Console\n - improvement $smarty->createData($parent = null, $name = null) new optional name parameter for display at Debug Console\n - addition of some hooks for future extension of Debug Console\n\n 01.11.2014\n - bugfix and enhancement on subtemplate {include} and template {function} tags.\n   * Calling a template which has a nocache section could fail if it was called from a cached and a not cached subtemplate.\n   * Calling the same subtemplate cached and not cached with the $smarty->merge_compiled_includes enabled could cause problems\n   * Many smaller related changes\n\n 30.10.2014\n - bugfix access to class constant by object like {$object::CONST} or variable class name {$class::CONST} did not work (forum 25301)\n\n 26.10.2014\n - bugfix E_NOTICE message was created during compilation when ASP tags '<%' or '%>' are in template source text\n - bugfix merge_compiled_includes option failed when caching  enables and same subtemplate was included cached and not cached\n\n - 3.1.21 - (18.10.2014)\n 18.10.2014\n  - composer moved to github\n\n 17.10.2014\n - bugfix on $php_handling security and optimization of smarty_internal_parsetree (Thue Kristensen)\n\n 16.10.2014\n - bugfix composer.json update\n\n 15.10.2014\n - bugfix calling a new created cache file with fetch() and Smarty::CACHING_LIFETIME_SAVED multiple times did fail (forum 22350)\n\n 14.10.2014\n - bugfix any tag placed within \"<script language=php>\" will throw a security exception to close all thinkable holes\n - bugfix classmap in root composer.json should start at \"libs/...\"\n - improvement cache is_file(file_exists) results of loadPlugin() to avoid unnecessary calls during compilation (Issue 201}\n\n 12.10.2014\n - bugfix a comment like \"<script{*foo*} language=php>\" bypassed $php_handling checking (Thue Kristensen)\n - bugfix change of 08.10.2014 could create E_NOTICE meassage when using \"<?php\" tags\n - bugfix \"<script language=php>\" with $php_handling PHP_PASSTHRU was executed in {nocache} sections\n\n - 3.1.20 - (09.10.2014)\n 08.10.2014\n - bugfix security mode of \"<script language=php>\" must be controlled by $php_handling property (Thue Kristensen)\n\n 01.10.2014\n - bugfix template resource of inheritance blocks could get invalid if the default resource type is not 'file'(Issue 202)\n - bugfix existing child {block} tag must override parent {block} tag append / prepend setting (topic 25259)\n\n 02.08.2014\n - bugfix modifier wordwrap did output break string wrong if first word was exceeding length with cut = true (topic 25193)\n\n 24.07.2014\n - bugfix cache clear when cache folder does not exist\n\n 16.07.2014\n - enhancement remove BOM automatically from template source (topic 25161)\n\n 04.07.2014\n - bugfix the bufix of 02.06.2014 broke correct handling of child templates with same name but different template folders in extends resource (issue 194 and topic 25099)\n\n - 3.1.19 - (30.06.2014)\n 20.06.2014\n - bugfix template variables could not be passed as parameter in {include} when the include was in a {nocache} section (topic 25131)\n\n 17.06.2014\n - bugfix large template text of some charsets could cause parsing errors (topic 24630)\n\n 08.06.2014\n - bugfix registered objects did not work after spelling fixes of 06.06.2014\n - bugfix {block} tags within {literal} .. {/literal} got not displayed correctly (topic 25024)\n - bugfix UNC WINDOWS PATH like \"\\\\psf\\path\\to\\dir\" did not work as template directory (Issue 192)\n - bugfix {html_image} security check did fail on files relative to basedir (Issue 191)\n\n 06.06.2014\n - fixed PHPUnit outputFilterTrimWhitespaceTests.php assertion of test result\n - fixed spelling, PHPDoc , minor errors, code cleanup\n\n 02.06.2014\n - using multiple cwd with relative template dirs could result in identical compiled file names. (issue 194 and topic 25099)\n\n 19.04.2014\n - bugfix calling createTemplate(template, data) with empty data array caused notice of array to string conversion (Issue 189)\n - bugfix clearCompiledTemplate() did not delete files on WINDOWS when a compile_id was specified\n\n 18.04.2014\n - revert bugfix of 5.4.2014 because %-e date format is not supported on all operating systems\n\n - 3.1.18 - (07.04.2014)\n 06.04.2014\n - bugfix template inheritance fail when using custom resource after patch of 8.3.2014 (Issue 187)\n - bugfix update of composer file (Issue 168 and 184)\n\n 05.04.2014\n - bugfix default date format leads to extra spaces when displaying dates with single digit days (Issue 165)\n\n 26.03.2014\n - bugfix Smart_Resource_Custom should not lowercase the resource name (Issue 183)\n\n 24.03.2014\n - bugfix using a {foreach} property like @iteration could fail when used in inheritance parent templates (Issue 182)\n\n 20.03.2014\n - bugfix $smarty->auto_literal and mbsting.func_overload 2, 6 or 7 did fail (forum topic 24899)\n\n 18.03.2014\n - revert change of 17.03.2014\n\n17.03.2014\n - bugfix $smarty->auto_literal and mbsting.func_overload 2, 6 or 7 did fail (forum topic 24899)\n\n 15.03.2014\n - bugfix Smarty_CacheResource_Keyvaluestore did use different keys on read/writes and clearCache() calls (Issue 169)\n\n 13.03.2014\n - bugfix clearXxx() change of 27.1.2014 did not work when specifing cache_id or compile_id  (forum topic 24868 and 24867)\n\n - 3.1.17 -\n 08.03.2014\n - bugfix relative file path {include} within {block} of child templates did throw exception on first call (Issue 177)\n\n 17.02.2014\n - bugfix Smarty failed when executing PHP on HHVM (Hip Hop 2.4) because uniqid('',true) does return string with ',' (forum topic 20343)\n\n 16.02.2014\n - bugfix a '//' or '\\\\' in template_dir path could produce wrong path on relative filepath in {include} (Issue 175)\n\n 05.02.2014\n - bugfix shared.literal_compiler_param.php did throw an exception when literal did contain a '-' (smarty-developers group)\n\n 27.01.2014\n - bugfix $smarty->debugging = true; did show the variable of the $smarty object not the variables used in display() call (forum topic 24764)\n - bugfix clearCompiledTemplate(), clearAll() and clear() should use realpath to avoid possible exception from RecursiveDirectoryIterator (Issue 171)\n\n 26.01.2014\n - bugfix  undo block nesting checks for {nocache} for reasons like forum topic 23280 (forum topic 24762)\n\n 18.01.2014\n - bugfix the compiler did fail when using template inheritance and recursive {include} (smarty-developers group)\n\n 11.01.2014\n - bugfix \"* }\" (spaces before right delimiter) was interpreted by mistake as comment end tag (Issue 170)\n - internals  content cache should be clear when updating cache file\n\n 08.01.2014\n - bugfix Smarty_CacheResource_Custom did not handle template resource type specifications on clearCache() calls (Issue 169)\n - bugfix SmartyBC.class.php should use require_once to load Smarty.class.php (forum topic 24683)\n\n - 3.1.16 -\n 15.12.2013\n - bugfix {include} with {block} tag handling (forum topic 24599, 24594, 24682) (Issue 161)\n   Read 3.1.16_RELEASE_NOTES for more details\n - enhancement additional debug output at $smarty->_parserdebug = true;\n\n 07.11.2013\n - bugfix too restrictive handling of {include} within {block} tags. 3.1.15 did throw errors where 3.1.14 did not (forum topic 24599)\n - bugfix compiler could fail if PHP mbstring.func_overload is enabled  (Issue 164)\n\n 28.10.2013\n - bugfix variable resource name at custom resource plugin did not work within {block} tags (Issue 163)\n - bugfix notice \"Trying to get property of non-object\" removed (Issue 163)\n - bugfix correction of modifier capitalize fix from 3.10.2013  (issue 159)\n - bugfix multiple {block}s with same name in parent did not work (forum topic 24631)\n\n 20.10.2013\n - bugfix a variable file name at {extends} tag did fail (forum topic 24618)\n\n 14.10.2013\n - bugfix yesterdays fix could result in an undefined variable\n\n 13.10.2013\n - bugfix variable names on {include} in template inheritance did unextepted error message (forum topic 24594) (Issue 161)\n.- bugfix relative includes with same name like {include './foo.tpl'} from different folder failed (forum topic 24590)(Issue 161)\n\n 04.10.2013\n - bugfix variable file names at {extends} had been disbabled by mistake with the rewrite of\n   template inheritance of 24.08.2013   (forum topic 24585)\n\n03.10.2013\n - bugfix loops using modifier capitalize did eat up memory (issue 159)\n\n - Smarty 3.1.15 -\n01.10.2013\n - use current delimiters in compiler error messages (issue 157)\n - improvement on performance when using error handler and multiple template folders (issue 152)\n\n17.09.2013\n - improvement added patch for additional SmartyCompilerException properties for better access to source information (forum topic 24559)\n\n16.09.2013\n - bugfix recompiled templates did not show on first request with zend opcache cache (forum topic 24320)\n\n13.09.2013\n - bugfix html_select_time defaulting error for the Meridian dropdown (forum topic 24549)\n\n09.09.2012\n- bugfix incorrect compiled code with array(object,method) callback at registered Variable Filter (forum topic 24542)\n\n27.08.2013\n- bugfix delimiter followed by linebreak did not work as auto literal after update from 24.08.2013 (forum topic 24518)\n\n24.08.2013\n- bugfix and enhancement\n  Because several recent problems with template inheritance the {block} tag compiler has been rewriten\n   - Error messages shown now the correct child template file and line number\n   - The compiler could fail on some larger UTF-8 text block (forum topic 24455)\n   - The {strip} tag can now be placed outside {block} tags in child templates (forum topic 24289)\n- change SmartyException::$escape  is now false by default\n- change PHP traceback has been remove for SmartyException and SmartyCompilerException\n\n14.08.2013\n- bugfix compiled filepath of config file did not observe different config_dir (forum topic 24493)\n\n13.08.2013\n- bugfix the internal resource cache did not observe config_dir changes (forum topic 24493)\n\n12.08.2013\n- bugfix internal $tmpx variables must be unique over all inheritance templates (Issue 149)\n\n10.08.2013\n- bugfix a newline was eaten when a <?xml ... ?> was passed by a Smarty variable and caching was enabled (forum topic 24482)\n\n29.07.2013\n- bugfix headers already send warning thrown when using 'SMARTY_DEBUG=on' from URL (Issue 148)\n\n27.07.2013\n- enhancement allow access to properties of registered opjects for Smarty2 BC (forum topic 24344)\n\n26.07.2013\n- bugfix template inheritance nesting problem (forum topic 24387)\n\n15.7.2013\n- update code generated by PSR-2 standards fixer which introduced PHP 5.4 incompatibilities of 14.7.2013\n\n14.7.2013\n- bugfix increase of internal maximum parser stacksize to allow more complex tag code {forum topic 24426}\n- update for PHP 5.4 compatibility\n- reformat source to PSR-2 standard\n\n12.7.2013\n- bugfix Do not remove '//' from file path at normalization (Issue 142)\n\n2.7.2013\n- bugfix trimwhitespace would replace captured items in wrong order (forum topic 24387)\n\n## Smarty-3.1.14 -\n27.06.2013\n- bugfix removed PHP 5.5 deprecated preg_replace /e option in modifier capitalize (forum topic 24389)\n\n17.06.2013\n- fixed spelling in sources and documentation (from smarty-developers forum Veres Lajos)\n- enhancement added constant SMARTY::CLEAR_EXPIRED for the change of 26.05.2013 (forum topic 24310)\n- bugfix added smarty_security.php to composer.json (Issue 135)\n\n26.05.2013\n- enhancement an expire_time of -1 in clearCache() and clearAllCache() will delete outdated cache files\n  by their individual cache_lifetime used at creation (forum topic 24310)\n\n21.05.2013\n- bugfix modifier strip_tags:true was compiled into wrong code (Forum Topic 24287)\n- bugfix /n after ?> in Smarty.class.php did start output buffering (Issue 138)\n\n25.04.2013\n- bugfix escape and wordrap modifier could be compiled into wrong code when used in {nocache}{/nocache}\n  section but caching is disabled  (Forum Topic 24260)\n\n05.04.2013\n- bugfix post filter must not run when compiling inheritance child blocks (Forum Topic 24094)\n- bugfix after the fix for Issue #130 compiler exceptions got double escaped (Forum Topic 24199)\n\n28.02.2013\n- bugfix nocache blocks could be lost when using CACHING_LIFETIME_SAVED (Issue #133)\n- bugfix Compile ID gets nulled when compiling child blocks (Issue #134)\n\n\n24.01.2013\n- bugfix wrong tag type in smarty_internal_templatecompilerbase.php could cause wrong plugin search order (Forum Topic 24028)\n\n## Smarty-3.1.13 -\n13.01.2013\n- enhancement allow to disable exception message escaping by SmartyException::$escape = false;  (Issue #130)\n\n09.01.2013\n- bugfix compilation did fail when a prefilter did modify an {extends} tag c\n- bugfix template inheritance could fail if nested {block} tags in childs did contain {$smarty.block.child} (Issue #127)\n- bugfix template inheritance could fail if {block} tags in childs did have similar name as used plugins (Issue #128)\n- added abstract method declaration doCompile() in Smarty_Internal_TemplateCompilerBase (Forum Topic 23969)\n\n06.01.2013\n- Allow '://' URL syntax in template names of stream resources  (Issue #129)\n\n27.11.2012\n- bugfix wrong variable usage in smarty_internal_utility.php (Issue #125)\n\n26.11.2012\n- bugfix global variable assigned within template function are not seen after template function exit (Forum Topic 23800)\n\n24.11.2012\n- made SmartyBC loadable via composer (Issue #124)\n\n20.11.2012\n- bugfix assignGlobal() called from plugins did not work (Forum Topic 23771)\n\n13.11.2012\n- adding attribute \"strict\" to html_options, html_checkboxes, html_radios to only print disabled/readonly attributes if their values are true or \"disabled\"/\"readonly\" (Issue #120)\n\n01.11.2012\n- bugfix muteExcpetedErrors() would screw up for non-readable paths (Issue #118)\n\n## Smarty-3.1.12  -\n14.09.2012\n- bugfix template inheritance failed to compile with delimiters {/ and /} (Forum Topic 23008)\n\n11.09.2012\n- bugfix escape Smarty exception messages to avoid possible script execution\n\n10.09.2012\n- bugfix tag option flags and shorttag attributes did not work when rdel started with '=' (Forum Topic 22979)\n\n31.08.2012\n- bugfix resolving relative paths broke in some circumstances (Issue #114)\n\n22.08.2012\n- bugfix test MBString availability through mb_split, as it could've been compiled without regex support (--enable-mbregex).\n  Either we get MBstring's full package, or we pretend it's not there at all.\n\n21.08.2012\n- bugfix $auto_literal = false did not work with { block} tags in child templates\n  (problem was reintroduced after fix in 3.1.7)(Forum Topic 20581)\n\n17.08.2012\n- bugfix compiled code of nocache sections could contain wrong escaping (Forum Topic 22810)\n\n15.08.2012\n- bugfix template inheritance did produce wrong code if subtemplates with {block} was\n  included several times (from smarty-developers forum)\n\n14.08.2012\n- bugfix PHP5.2 compatibility compromised by SplFileInfo::getBasename() (Issue 110)\n\n01.08.2012\n- bugfix avoid PHP error on $smarty->configLoad(...) with invalid section specification (Forum Topic 22608)\n\n30.07.2012\n-bugfix {assign} in a nocache section should not overwrite existing variable values\n   during compilation (issue 109)\n\n28.07.2012\n- bugfix array access of config variables did not work (Forum Topic 22527)\n\n19.07.2012\n- bugfix the default plugin handler did create wrong compiled code for static class methods\n  from external script files (issue 108)\n\n## Smarty-3.1.11 -\n30.06.2012\n- bugfix {block.. hide} did not work as nested child (Forum Topic 22216)\n\n25.06.2012\n- bugfix the default plugin handler did not allow static class methods for modifier (issue 85)\n\n24.06.2012\n- bugfix escape modifier support for PHP < 5.2.3 (Forum Topic 21176)\n\n11.06.2012\n- bugfix the patch for Topic 21856 did break tabs between tag attributes (Forum Topic 22124)\n\n## Smarty-3.1.10  -\n09.06.2012\n- bugfix the compiler did ignore registered compiler plugins for closing tags (Forum Topic 22094)\n- bugfix the patch for Topic 21856 did break multiline tags (Forum Topic 22124)\n\n## Smarty-3.1.9 -\n07.06.2012\n- bugfix fetch() and display() with relative paths (Issue 104)\n- bugfix treat \"0000-00-00\" as 0 in modifier.date_format (Issue 103)\n\n24.05.2012\n- bugfix Smarty_Internal_Write_File::writeFile() could cause race-conditions on linux systems (Issue 101)\n- bugfix attribute parameter names of plugins may now contain also \"-\"  and \":\"  (Forum Topic 21856)\n- bugfix add compile_id to cache key of of source (Issue 97)\n\n22.05.2012\n- bugfix recursive {include} within {section} did fail (Smarty developer group)\n\n12.05.2012\n- bugfix {html_options} did not properly escape values (Issue 98)\n\n03.05.2012\n- bugfix make HTTP protocall version variable (issue 96)\n\n02.05.2012\n- bugfix  {nocache}{block}{plugin}... did produce wrong compiled code when caching is disabled (Forum Topic 21572, issue 95)\n\n12.04.2012\n- bugfix Smarty did eat the linebreak after the <?xml...?> closing tag (Issue 93)\n- bugfix concurrent cache updates could create a warning (Forum Topic 21403)\n\n08.04.2012\n- bugfix \"\\\\\" was not escaped correctly when generating nocache code (Forum Topic 21364)\n\n30.03.2012\n- bugfix template inheritance did  not throw exception when a parent template was deleted (issue 90)\n\n27.03.2012\n- bugfix prefilter did run multiple times on inline subtemplates compiled into several main templates (Forum Topic 21325)\n- bugfix implement Smarty2's behaviour of variables assigned by reference in SmartyBC. {assign} will affect all references.\n  (issue 88)\n\n21.03.2012\n- bugfix compileAllTemplates() and compileAllConfig() did not return the number of compiled files (Forum Topic 21286)\n\n13.03.2012\n- correction of yesterdays bugfix (Forum Topic 21175 and 21182)\n\n12.03.2012\n- bugfix a double quoted string of \"$foo\" did not compile into PHP \"$foo\" (Forum Topic 21175)\n- bugfix template inheritance did set $merge_compiled_includes globally true\n\n03.03.2012\n- optimization of compiling speed when same modifier was used several times\n\n02.03.2012\n- enhancement the default plugin handler can now also resolve undefined modifier (Smarty::PLUGIN_MODIFIER)\n  (Issue 85)\n\n## Smarty-3.1.8  -\n19.02.2012\n- bugfix {include} could result in a fatal error if used in appended or prepended nested {block} tags\n  (reported by mh and Issue 83)\n- enhancement added Smarty special variable $smarty.template_object to return the current template object (Forum Topic 20289)\n\n\n07.02.2012\n- bugfix increase entropy of internal function names in compiled and cached template files (Forum Topic 20996)\n- enhancement cacheable parameter added to default plugin handler, same functionality as in registerPlugin (request by calguy1000)\n\n06.02.2012\n- improvement stream_resolve_include_path() added to Smarty_Internal_Get_Include_Path (Forum Topic 20980)\n- bugfix fetch('extends:foo.tpl') always yielded $source->exists == true (Forum Topic 20980)\n- added modifier unescape:\"url\", fix (Forum Topic 20980)\n- improvement replaced some calls of preg_replace with str_replace (Issue 73)\n\n30.01.2012\n- bugfix Smarty_Security internal $_resource_dir cache wasn't properly propagated\n\n27.01.2012\n- bugfix Smarty did not a template name of \"0\" (Forum Topic 20895)\n\n20.01.2012\n- bugfix typo in Smarty_Internal_Get_IncludePath did cause runtime overhead (Issue 74)\n- improvment remove unneeded assigments (Issue 75 and 76)\n- fixed typo in template parser\n- bugfix output filter must not run before writing cache when template does contain nocache code (Issue 71)\n\n02.01.2012\n- bugfix {block foo nocache} did not load plugins within child {block} in nocache mode (Forum Topic 20753)\n\n29.12.2011\n- bugfix enable more entropy in Smarty_Internal_Write_File for \"more uniqueness\" and Cygwin compatibility (Forum Topic 20724)\n- bugfix embedded quotes in single quoted strings did not compile correctly in {nocache} sections (Forum Topic 20730)\n\n28.12.2011\n- bugfix Smarty's internal header code must be excluded from postfilters (issue 71)\n\n22.12.2011\n- bugfix the new lexer of 17.12.2011 did fail if mbstring.func_overload != 0 (issue 70) (Forum Topic 20680)\n- bugfix template inheritace did fail if mbstring.func_overload != 0 (issue 70) (Forum Topic 20680)\n\n20.12.2011\n- bugfix template inheritance: {$smarty.block.child} in nested child {block} tags did not return\n  content after {$smarty.block.child} (Forum Topic 20564)\n\n## Smarty-3.1.7 -\n18.12.2011\n- bugfix strings ending with \" in multiline strings of config files failed to compile (issue #67)\n- added chaining to Smarty_Internal_Templatebase\n- changed unloadFilter() to not return a boolean in favor of chaining and API conformity\n- bugfix unregisterObject() raised notice when object to unregister did not exist\n- changed internals to use Smarty::$_MBSTRING ($_CHARSET, $_DATE_FORMAT) for better unit testing\n- added Smarty::$_UTF8_MODIFIER for proper PCRE charset handling (Forum Topic 20452)\n- added Smarty_Security::isTrustedUri() and Smarty_Security::$trusted_uri to validate\n  remote resource calls through {fetch} and {html_image} (Forum Topic 20627)\n\n17.12.2011\n- improvement of compiling speed by new handling of plain text blocks in the lexer/parser (issue #68)\n\n16.12.2011\n- bugfix the source exits flag and timestamp was not setup when template was in php include path (issue #69)\n\n9.12.2011\n- bugfix {capture} tags around recursive {include} calls did throw exception (Forum Topic 20549)\n- bugfix $auto_literal = false did not work with { block} tags in child templates (Forum Topic 20581)\n- bugfix template inheritance: do not include code of {include} in overloaded {block} into compiled\n  parent template (Issue #66}\n- bugfix template inheritance: {$smarty.block.child} in nested child {block} tags did not return expected\n  result (Forum Topic 20564)\n\n## Smarty-3.1.6  -\n30.11.2011\n- bugfix is_cache() for individual cached subtemplates with $smarty->caching = CACHING_OFF did produce\n  an exception (Forum Topic 20531)\n\n29.11.2011\n- bugfix added exception if the default plugin handler did return a not static callback (Forum Topic 20512)\n\n25.11.2011\n- bugfix {html_select_date} and {html_slecet_time} did not default to current time if \"time\" was not specified\n  since r4432 (issue 60)\n\n24.11.2011\n- bugfix a subtemplate later used as main template did use old variable values\n\n21.11.2011\n- bugfix cache file could include unneeded modifier plugins under certain condition\n\n18.11.2011\n- bugfix declare all directory properties private to map direct access to getter/setter also on extended Smarty class\n\n16.11.2011\n- bugfix Smarty_Resource::load() did not always return a proper resource handler (Forum Topic 20414)\n- added escape argument to html_checkboxes and html_radios (Forum Topic 20425)\n\n## Smarty-3.1.5  -\n14.11.2011\n- bugfix allow space between function name and open bracket (forum topic 20375)\n\n09.11.2011\n- bugfix different behaviour of uniqid() on cygwin. See https://bugs.php.net/bug.php?id=34908\n  (forum topic 20343)\n\n01.11.2011\n- bugfix {if} and {while} tags without condition did not throw a SmartyCompilerException (Issue #57)\n- bugfix multiline strings in config files could fail on longer strings (reopened Issue #55)\n\n22.10.2011\n- bugfix smarty_mb_from_unicode() would not decode unicode-points properly\n- bugfix use catch Exception instead UnexpectedValueException in\n  clearCompiledTemplate to be PHP 5.2 compatible\n\n21.10.2011\n- bugfix apostrophe in plugins_dir path name failed (forum topic 20199)\n- improvement sha1() for array keys longer than 150 characters\n- add Smarty::$allow_ambiguous_resources to activate unique resource handling (Forum Topic 20128)\n\n20.10.2011\n- @silenced unlink() in Smarty_Internal_Write_File since debuggers go haywire without it.\n- bugfix Smarty::clearCompiledTemplate() threw an Exception if $cache_id was not present in $compile_dir when $use_sub_dirs = true.\n- bugfix {html_select_date} and {html_select_time} did not properly handle empty time arguments (Forum Topic 20190)\n- improvement removed unnecessary sha1()\n\n19.10.2011\n- revert PHP4 constructor message\n- fixed PHP4 constructor message\n\n## Smarty-3.1.4 -\n19.10.2011\n- added exception when using PHP4 style constructor\n\n16.10.2011\n- bugfix testInstall() did not propery check cache_dir and compile_dir\n\n15.10.2011\n- bugfix Smarty_Resource and Smarty_CacheResource runtime caching (Forum Post 75264)\n\n14.10.2011\n- bugfix unique_resource did not properly apply to compiled resources (Forum Topic 20128)\n- add locking to custom resources (Forum Post 75252)\n- add Smarty_Internal_Template::clearCache() to accompany isCached() fetch() etc.\n\n13.10.2011\n- add caching for config files in Smarty_Resource\n- bugfix disable of caching after isCached() call did not work (Forum Topic 20131)\n- add concept unique_resource to combat potentially ambiguous template_resource values when custom resource handlers are used (Forum Topic 20128)\n- bugfix multiline strings in config files could fail on longer strings (Issue #55)\n\n11.10.2011\n- add runtime checks for not matching {capture}/{/capture} calls (Forum Topic 20120)\n\n10.10.2011\n- bugfix variable name typo in {html_options} and {html_checkboxes} (Issue #54)\n- bugfix <?xml> tag did create wrong output when caching enabled and the tag was in included subtemplate\n- bugfix Smarty_CacheResource_mysql example was missing strtotime() calls\n\n## Smarty-3.1.3  -\n07.10.2011\n- improvement removed html comments from {mailto} (Forum Topic 20092)\n- bugfix testInstall() would not show path to internal plugins_dir (Forum Post 74627)\n- improvement testInstall() now showing resolved paths and checking the include_path if necessary\n- bugfix html_options plugin did not handle object values properly (Issue #49, Forum Topic 20049)\n- improvement html_checkboxes and html_radios to accept null- and object values, and label_ids attribute\n- improvement removed some unnecessary count()s\n- bugfix parent pointer was not set when fetch() for other template was called on template object\n\n06.10.2011\n- bugfix switch lexer internals depending on mbstring.func_overload\n- bugfix start_year and end_year of {html_select_date} did not use current year as offset base (Issue #53)\n\n05.10.2011\n- bugfix of problem introduced with r4342 by replacing strlen() with isset()\n- add environment configuration issue with mbstring.func_overload Smarty cannot compensate for (Issue #45)\n- bugfix nofilter tag option did not disable default modifier\n- bugfix html_options plugin did not handle null- and object values properly (Issue #49, Forum Topic 20049)\n\n04.10.2011\n- bugfix assign() in plugins called in subtemplates did change value also in parent template\n- bugfix of problem introduced with r4342 on math plugin\n- bugfix output filter should not run on individually cached subtemplates\n- add unloadFilter() method\n- bugfix has_nocache_code flag was not reset before compilation\n\n## Smarty-3.1.2  -\n03.10.2011\n- improvement add internal $joined_template_dir property instead computing it on the fly several times\n\n01.10.2011\n- improvement replaced most in_array() calls by more efficient isset() on array_flip()ed haystacks\n- improvement replaced some strlen($foo) > 3 calls by isset($foo[3])\n- improvement Smarty_Internal_Utility::clearCompiledTemplate() removed redundant strlen()s\n\n29.09.2011\n- improvement of Smarty_Internal_Config::loadConfigVars() dropped the in_array for index look up\n\n28.09.2011\n- bugfix on template functions called nocache calling other template functions\n\n27.09.2011\n- bugfix possible warning \"attempt to modify property of non-object\" in {section} (issue #34)\n- added chaining to Smarty_Internal_Data so $smarty->assign('a',1)->assign('b',2); is possible now\n- bugfix remove race condition when a custom resource did change timestamp during compilation\n- bugfix variable property did not work on objects variable in template\n- bugfix smarty_make_timestamp() failed to process DateTime objects properly\n- bugfix wrong resource could be used on compile check of custom resource\n\n26.09.2011\n- bugfix repeated calls to same subtemplate did not make use of cached template object\n\n24.09.2011\n- removed internal muteExpectedErrors() calls in favor of having the implementor call this once from his application\n- optimized muteExpectedErrors() to pass errors to the latest registered error handler, if appliccable\n- added compile_dir and cache_dir to list of muted directories\n- improvment better error message for undefined templates at {include}\n\n23.09.2011\n- remove unused properties\n- optimization use real function instead anonymous function for preg_replace_callback\n- bugfix a relative {include} in child template blocks failed\n- bugfix direct setting of $template_dir, $config_dir, $plugins_dir in __construct() of an\n  extended Smarty class created problems\n- bugfix error muting was not implemented for cache locking\n\n## Smarty 3.1.1  -\n22.09.2011\n- bugfix {foreachelse} does fail if {section} was nested inside {foreach}\n- bugfix debug.tpl did not display correctly when it was compiled with escape_html = true\n\n21.09.2011\n- bugfix look for mixed case plugin file names as in 3.0 if not found try all lowercase\n- added $error_muting to suppress error messages even for badly implemented error_handlers\n- optimized autoloader\n- reverted ./ and ../ handling in fetch() and display() - they're allowed again\n\n20.09.2011\n- bugfix removed debug echo output while compiling template inheritance\n- bugfix relative paths in $template_dir broke relative path resolving in {include \"../foo.tpl\"}\n- bugfix {include} did not work inside nested {block} tags\n- bugfix {assign} with scope root and global did not work in all cases\n\n19.09.2011\n- bugfix regression in Smarty_CacheReource_KeyValueStore introduced by r4261\n- bugfix output filter shall not run on included subtemplates\n\n18.09.2011\n- bugfix template caching did not care about file.tpl in different template_dir\n- bugfix {include $file} was broken when merge_compiled_incluges = true\n- bugfix {include} was broken when merge_compiled_incluges = true and same indluded template\n  was used in different main templates in one compilation run\n- bugfix for Smarty2 style compiler plugins on unnamed attribute passing like {tag $foo $bar}\n- bugfix debug.tpl did not display correctly when it was compiled with escape_html = true\n\n17.09.2011\n- bugfix lock_id for file resource would create invalid filepath\n- bugfix resource caching did not care about file.tpl in different template_dir\n\n## Smarty 3.1.0  -\n15/09/2011\n- optimization of {foreach}; call internal _count() method only when \"total\" or \"last\" {foreach} properties are used\n\n11/09/2011\n- added  unregisterObject() method\n\n06/09/2011\n- bugfix  isset() did not work in templates on config variables\n\n03/09/2011\n- bugfix createTemplate() must default to cache_id and compile_id of Smarty object\n- bugfix Smarty_CacheResource_KeyValueStore must include $source->uid in cache filepath to keep templates with same\n  name but different folders separated\n- added cacheresource.apc.php example in demo folder\n\n02/09/2011\n- bugfix cache lock file must use absolute filepath\n\n01/09/2011\n- update of cache locking\n\n30/08/2011\n- added locking mechanism to CacheResource API (implemented with File and KeyValueStores)\n\n28/08/2011\n- bugfix clearCompileTemplate() did not work for specific template subfolder or resource\n\n27/08/2011\n- bugfix {$foo|bar+1} did create syntax error\n\n26/08/2011\n- bugfix when generating nocache code which contains double \\\n- bugfix handle race condition if cache file was deleted between filemtime and include\n\n17/08/2011\n- bugfix CacheResource_Custom bad internal fetch() call\n\n15/08/2011\n- bugfix CacheResource would load content twice for KeyValueStore and Custom handlers\n\n06/08/2011\n- bugfix {include} with scope attribute could execute in wrong scope\n- optimization of compile_check processing\n\n03/08/2011\n- allow comment tags to comment {block} tags out in child templates\n\n26/07/2011\n- bugfix experimental getTags() method did not work\n\n24/07/2011\n- sure opened output buffers are closed on exception\n- bugfix {foreach} did not work on IteratorAggregate\n\n22/07/2011\n- clear internal caches on clearAllCache(), clearCache(), clearCompiledTemplate()\n\n21/07/2011\n- bugfix value changes of variable values assigned to Smarty object could not be seen on repeated $smarty->fetch() calls\n\n17/07/2011\n- bugfix {$smarty.block.child} did drop a notice at undefined child\n\n15/07/2011\n- bugfix individual cache_lifetime of {include} did not work correctly inside {block} tags\n- added caches for Smarty_Internal_TemplateSource and Smarty_Internal_TemplateCompiled to reduce I/O for multiple cache_id rendering\n\n14/07/2011\n- made Smarty::loadPlugin() respect the include_path if required\n\n13/07/2011\n- optimized internal file write functionality\n- bugfix PHP did eat line break on nocache sections\n- fixed typo of Smarty_Security properties $allowed_modifiers and $disabled_modifiers\n\n06/07/2011\n- bugfix variable modifier must run befor gereral filtering/escaping\n\n04/07/2011\n- bugfix use (?P<name>) syntax at preg_match as some pcre libraries failed on (?<name>)\n- some performance improvement when using generic getter/setter on template objects\n\n30/06/2011\n- bugfix generic getter/setter of Smarty properties used on template objects did throw exception\n- removed is_dir and is_readable checks from directory setters for better performance\n\n28/06/2011\n- added back support of php template resource as undocumented feature\n- bugfix automatic recompilation on version change could drop undefined index notice on old 3.0 cache and compiled files\n- update of README_3_1_DEV.txt and moved into the distribution folder\n- improvement show first characters of eval and string templates instead sha1 Uid in debug window\n\n## Smarty 3.1-RC1 -\n25/06/2011\n- revert change of 17/06/2011. $_smarty varibale removed. call loadPlugin() from inside plugin code if required\n- code cleanup, remove no longer used properties and methods\n- update of PHPdoc comments\n\n23/06/2011\n- bugfix {html_select_date} would not respect current time zone\n\n19/06/2011\n- added $errors argument to testInstall() functions to suppress output.\n- added plugin-file checks to testInstall()\n\n18/06/2011\n- bugfix mixed use of same subtemplate inline and not inline in same script could cause a warning during compilation\n\n17/06/2011\n- bugfix/change use $_smarty->loadPlugin() when loading nested depending plugins via loadPlugin\n- bugfix {include ... inline} within {block}...{/block} did fail\n\n16/06/2011\n- bugfix do not overwrite '$smarty' template variable when {include ... scope=parent} is called\n- bugfix complete empty inline subtemplates did fail\n\n15/06/2011\n- bugfix template variables where not accessable within inline subtemplates\n\n12/06/2011\n- bugfix removed unneeded merging of template variable when fetching includled subtemplates\n\n10/06/2011\n- made protected properties $template_dir, $plugins_dir, $cache_dir, $compile_dir, $config_dir accessible via magic methods\n\n09/06/2011\n- fix smarty security_policy issue in plugins {html_image} and {fetch}\n\n05/06/2011\n- update of SMARTY_VERSION\n- bugfix made getTags() working again\n\n04/06/2011\n- allow extends resource in file attribute of {extends} tag\n\n03/06/2011\n- added {setfilter} tag to set filters for variable output\n- added escape_html property to control autoescaping of variable output\n\n27/05/2011\n- added allowed/disabled tags and modifiers in security for sandboxing\n\n23/05/2011\n- added base64: and urlencode: arguments to eval and string resource types\n\n22/05/2011\n- made time-attribute of {html_select_date} and {html_select_time} accept arrays as defined by attributes prefix and field_array\n\n13/05/2011\n- remove setOption / getOption calls from SamrtyBC class\n\n02/05/2011\n- removed experimental setOption() getOption() methods\n- output returned content also on opening tag calls of block plugins\n- rewrite of default plugin handler\n- compile code of variable filters for better performance\n\n20/04/2011\n- allow {php} {include_php} tags and PHP_ALLOW handling only with the SmartyBC class\n- removed support of php template resource\n\n20/04/2011\n- added extendsall resource example\n- optimization of template variable access\n- optimization of subtemplate handling {include}\n- optimization of template class\n\n01/04/2011\n- bugfix quote handling in capitalize modifier\n\n28/03/2011\n- bugfix stripslashes() requried when using PCRE e-modifier\n\n04/03/2011\n- upgrade to new PHP_LexerGenerator version 0.4.0 for better performance\n\n27/02/2011\n- ignore .svn folders when clearing cache and compiled files\n- string resources do not need a modify check\n\n26/02/2011\n- replaced smarty_internal_wrapper by SmartyBC class\n- load utility functions as static methods instead through __call()\n- bugfix in extends resource when subresources are used\n- optimization of modify checks\n\n25/02/2011\n- use $smarty->error_unassigned to control NOTICE handling on unassigned variables\n\n21/02/2011\n- added new new compile_check mode COMPILECHECK_CACHEMISS\n- corrected new cloning behaviour of createTemplate()\n- do no longer store the compiler object as property in the compile_tag classes to avoid possible memory leaks\n  during compilation\n\n19/02/2011\n- optimizations on merge_compiled_includes handling\n- a couple of optimizations and bugfixes related to new resource structure\n\n17/02/2011\n- changed ./ and ../ behaviour\n\n14/02/2011\n- added {block ... hide} option to suppress block if no child is defined\n\n13/02/2011\n- update handling of recursive subtemplate calls\n- bugfix replace $smarty->triggerError() by exception in smarty_internal_resource_extends.php\n\n12/02/2011\n- new class Smarty_Internal_TemplateBase with shared methods of Smarty and Template objects\n- optimizations of template processing\n- made register... methods permanet\n- code for default_plugin_handler\n- add automatic recompilation at version change\n\n04/02/2011\n- change in Smarty_CacheResource_Custom\n- bugfix cache_lifetime did not compile correctly at {include} after last update\n- moved isCached processing into CacheResource class\n- bugfix new CacheResource API did not work with disabled compile_check\n\n03/02/2011\n- handle template content as function to improve speed on multiple calls of same subtemplate and isCached()/display() calls\n- bugfixes and improvents in the new resource API\n- optimizations of template class code\n\n25/01/2011\n- optimized function html_select_time\n\n22/01/2011\n- added Smarty::$use_include_path configuration directive for Resource API\n\n21/01/2011\n- optimized function html_select_date\n\n19/01/2011\n- optimized outputfilter trimwhitespace\n\n18/01/2011\n- bugfix Config to use Smarty_Resource to fetch sources\n- optimized Smarty_Security's isTrustedDir() and isTrustedPHPDir()\n\n17/01/2011\n- bugfix HTTP headers for CGI SAPIs\n\n16/01/2011\n- optimized internals of Smarty_Resource and Smarty_CacheResource\n\n14/01/2011\n- added modifiercompiler escape to improve performance of escaping html, htmlall, url, urlpathinfo, quotes, javascript\n- added support to choose template_dir to load from: [index]filename.tpl\n\n12/01/2011\n- added unencode modifier to revert results of encode modifier\n- added to_charset and from_charset modifier for character encoding\n\n11/01/2011\n- added SMARTY_MBSTRING to generalize MBString detection\n- added argument $lc_rest to modifier.capitalize to lower-case anything but the first character of a word\n- changed strip modifier to consider unicode white-space, too\n- changed wordwrap modifier to accept UTF-8 strings\n- changed count_sentences modifier to consider unicode characters and treat sequences delimited by ? and ! as sentences, too\n- added argument $double_encode to modifier.escape (applies to html and htmlall only)\n- changed escape modifier to be UTF-8 compliant\n- changed textformat block to be UTF-8 compliant\n- optimized performance of mailto function\n- fixed spacify modifier so characters are not prepended and appended, made it unicode compatible\n- fixed truncate modifier to properly use mb_string if possible\n- removed UTF-8 frenzy from count_characters modifier\n- fixed count_words modifier to treat \"hello-world\" as a single word like str_count_words() does\n- removed UTF-8 frenzy from upper modifier\n- removed UTF-8 frenzy from lower modifier\n\n01/01/2011\n- optimize smarty_modified_escape for hex, hexentity, decentity.\n\n28/12/2010\n- changed $tpl_vars, $config_vars and $parent to belong to Smarty_Internal_Data\n- added Smarty::registerCacheResource() for dynamic cache resource object registration\n\n27/12/2010\n- added Smarty_CacheResource API and refactored existing cache resources accordingly\n- added Smarty_CacheResource_Custom and Smarty_CacheResource_Mysql\n\n26/12/2010\n- added Smarty_Resource API and refactored existing resources accordingly\n- added Smarty_Resource_Custom and Smarty_Resource_Mysql\n- bugfix Smarty::createTemplate() to return properly cloned template instances\n\n24/12/2010\n- optimize smarty_function_escape_special_chars() for PHP >= 5.2.3\n\n## SVN 3.0 trunk  -\n14/05/2011\n- bugfix error handling at stream resources\n\n13/05/2011\n- bugfix condition starting with \"-\" did fail at {if} and {while} tags\n\n22/04/2011\n- bugfix allow only fixed string as file attribute at {extends} tag\n\n01/04/2011\n- bugfix do not run filters and default modifier when displaying the debug template\n- bugfix of embedded double quotes within multi line strings (\"\"\")\n\n29/03/2011\n- bugfix on error message in smarty_internal_compile_block.php\n- bugfix mb handling in strip modifier\n- bugfix for Smarty2 style registered compiler function on unnamed attribute passing like {tag $foo $bar}\n\n17/03/2011\n- bugfix on default {function} parameters when {function} was used in nocache sections\n- bugfix on compiler object destruction. compiler_object property was by mistake unset.\n\n09/03/2011\n-bugfix a variable filter should run before modifiers on an output tag (see change of 23/07/2010)\n\n08/03/2011\n- bugfix loading config file without section should load only defaults\n\n03/03/2011\n- bugfix \"smarty\" template variable was not recreated when cached templated had expired\n- bugfix internal rendered_content must be cleared after subtemplate was included\n\n01/03/2011\n- bugfix replace modifier did not work in 3.0.7 on systems without multibyte support\n- bugfix {$smarty.template} could return in 3.0.7 parent template name instead of\n         child name when it needed to compile\n\n25/02/2011\n- bugfix for Smarty2 style compiler plugins on unnamed attribute passing like {tag $foo $bar}\n\n24/02/2011\n- bugfix $smarty->clearCache('some.tpl') did by mistake cache the template object\n\n18/02/2011\n- bugfix removed possible race condition when isCached() was called for an individually cached subtemplate\n- bugfix force default debug.tpl to be loaded by the file resource\n\n17/02/2011\n-improvement not to delete files starting with '.' from cache and template_c folders on clearCompiledTemplate() and clearCache()\n\n16/02/2011\n-fixed typo in exception message of Smarty_Internal_Template\n-improvement allow leading spaces on } tag closing if auto_literal is enabled\n\n13/02/2011\n- bufix replace $smarty->triggerError() by exception\n- removed obsolete {popup_init..} plugin from demo templates\n- bugfix replace $smarty->triggerError() by exception in smarty_internal_resource_extends.php\n\n## Smarty 3.0.7  -\n09/02/2011\n- patched vulnerability when using {$smarty.template}\n\n01/02/2011\n- removed assert() from config and template parser\n\n31/01/2011\n- bugfix the lexer/parser did fail on special characters like VT\n\n16/01/2011\n-bugfix of ArrayAccess object handling in internal _count() method\n-bugfix of Iterator object handling in internal _count() method\n\n14/01/2011\n-bugfix removed memory leak while processing compileAllTemplates\n\n12/01/2011\n- bugfix in {if} and {while} tag compiler when using assignments as condition and nocache mode\n\n10/01/2011\n- bugfix when using {$smarty.block.child} and name of {block} was in double quoted string\n- bugfix updateParentVariables() was called twice when leaving {include} processing\n\n- bugfix mb_str_replace in replace and escape modifiers work with utf8\n\n31/12/2010\n- bugfix dynamic configuration of $debugging_crtl did not work\n- bugfix default value of $config_read_hidden changed to false\n- bugfix format of attribute array on compiler plugins\n- bugfix getTemplateVars() could return value from wrong scope\n\n28/12/2010\n- bugfix multiple {append} tags failed to compile.\n\n22/12/2010\n- update do not clone the Smarty object an internal createTemplate() calls to increase performance\n\n21/12/2010\n- update html_options to support class and id attrs\n\n17/12/2010\n- bugfix added missing support of $cache_attrs for registered plugins\n\n15/12/2010\n- bugfix assignment as condition in {while} did drop an E_NOTICE\n\n14/12/2010\n- bugfix when passing an array as default parameter at {function} tag\n\n13/12/2010\n- bugfix {$smarty.template} in child template did not return right content\n- bugfix Smarty3 did not search the PHP include_path for template files\n\n## Smarty 3.0.6  -\n\n12/12/2010\n- bugfix fixed typo regarding yesterdays change to allow streamWrapper\n\n11/12/2010\n- bugfix nested block tags in template inheritance child templates did not work correctly\n- bugfix {$smarty.current_dir} in child template did not point to dir of child template\n- bugfix changed code when writing temporary compiled files to allow stream_wrapper\n\n06/12/2010\n- bugfix getTemplateVars() should return 'null' instead dropping E_NOTICE on an unassigned variable\n\n05/12/2010\n- bugfix missing declaration of $smarty in Smarty class\n- bugfix empty($foo) in {if} did drop a notice when $foo was not assigned\n\n01/12/2010\n- improvement of {debug} tag output\n\n27/11/2010\n-change run output filter before cache file is written. (same as in Smarty2)\n\n24/11/2011\n-bugfix on parser at  !$foo|modifier\n-change parser logic when assignments used as condition in {if] and {while} to allow assign to array element\n\n23/11/2011\n-bugfix allow integer as attribute name in plugin calls\n-change  trimm whitespace from error message, removed long list of expected tokens\n\n22/11/2010\n- bugfix on template inheritance when an {extends} tag was inserted by a prefilter\n- added error message for illegal variable file attributes at {extends...} tags\n\n## Smarty 3.0.5  -\n\n\n19/11/2010\n- bugfix on block plugins with modifiers\n\n18/11/2010\n- change on handling of unassigned template variable -- default will drop E_NOTICE\n- bugfix on Smarty2 wrapper load_filter() did not work\n\n17/11/2010\n- bugfix on {call} with variable function name\n- bugfix on {block} if name did contain '-'\n- bugfix in function.fetch.php , referece to undefined $smarty\n\n16/11/2010\n- bugfix whitespace in front of \"<?php\" in smarty_internal_compile_private_block_plugin.php\n- bugfix {$smarty.now} did compile incorrectly\n- bugfix on reset(),end(),next(),prev(),current() within templates\n- bugfix on default parameter for {function}\n\n15/11/2010\n- bugfix when using {$smarty.session} as object\n- bugfix scoping problem on $smarty object passed to filters\n- bugfix captured content could not be accessed globally\n- bugfix Smarty2 wrapper functions could not be call from within plugins\n\n## Smarty 3.0.4  -\n\n14/11/2010\n- bugfix isset() did not allow multiple parameter\n- improvment of some error messages\n- bugfix html_image did use removed property $request_use_auto_globals\n- small performace patch in Smarty class\n\n13/11/2010\n- bugfix  overloading problem when $smarty->fetch()/display() have been used in plugins\n\t\t\t\t(introduced with 3.0.2)\n- code cleanup\n\t\t\t\t\t\t\t\t\n## Smarty 3.0.3  -\n\n13/11/2010\n- bugfix on {debug}\n- reverted location of loadPlugin() to Smarty class\n- fixed comments in plugins\n- fixed internal_config (removed unwanted code line)\n- improvement  remove last linebreak from {function} definition\n\n## Smarty 3.0.2  -\n\n12/11/2010\n- reactivated $error_reporting property handling\n- fixed typo in compile_continue\n- fixed security in {fetch} plugin\n- changed back plugin parameters to two. second is template object\n  with transparent access to Smarty object\n- fixed {config_load} scoping form compile time to run time\n\n## Smarty 3.0.0  -\n\n\n\n11/11/2010\n- major update including some API changes\n\n10/11/2010\n- observe compile_id also for config files\n\n09/11/2010\n-bugfix on  complex expressions as start value for {for} tag\nrequest_use_auto_globals\n04/11/2010\n- bugfix do not allow access of dynamic and private object members of assigned objects when\n  security is enabled.\n\n01/11/2010\n- bugfix related to E_NOTICE change.  {if empty($foo)} did fail when $foo contained a string\n\n28/10/2010\n- bugfix on compiling modifiers within $smarty special vars like {$smarty.post.{$foo|lower}}\n\n27/10/2010\n- bugfix default parameter values did not work for template functions included with {include}\n\n25/10/2010\n- bugfix for E_NOTICE change, array elements did not work as modifier parameter\n\n20/10/2010\n- bugfix for the E_NOTICE change\n\n19/10/2010\n- change Smarty does no longer mask out E_NOTICE by default during template processing\n\n13/10/2010\n- bugfix removed ambiguity between ternary and stream variable in template syntax\n- bugfix use caching properties of template instead of smarty object when compiling child {block}\n- bugfix {*block}...{/block*} did throw an exception in template inheritance\n- bugfix on template inheritance using nested eval or string resource in {extends} tags\n- bugfix on output buffer handling in isCached() method\n\n##  RC4 -\n\n01/10/2010\n- added {break} and {continue} tags for flow control of {foreach},{section},{for} and {while} loops\n- change of 'string' resource. It's no longer evaluated and compiled files are now stored\n- new 'eval' resource which evaluates a template without saving the compiled file\n- change in isCached() method to allow multiple calls for the same template\n\n25/09/2010\n- bugfix on some compiling modifiers\n\n24/09/2010\n- bugfix merge_compiled_includes flag was not restored correctly in {block} tag\n\n22/09/2010\n- bugfix on default modifier\n\n18/09/2010\n- bugfix untility compileAllConfig() did not create sha1 code for compiled template file names if template_dir was defined with no trailing DS\n- bugfix on templateExists() for extends resource\n\n17/09/2010\n- bugfix {$smarty.template} and {$smarty.current_dir} did not compile correctly within {block} tags\n- bugfix corrected error message on missing template files in extends resource\n- bugfix untility compileAllTemplates() did not create sha1 code for compiled template file names if template_dir was defined with no trailing DS\n\n16/09/2010\n- bugfix when a doublequoted modifier parameter did contain Smarty tags and ':'\n\n15/09/2010\n- bugfix resolving conflict between '<%'/'%>' as custom Smarty delimiter and ASP tags\n- use ucfirst for resource name on internal resource class names\n\n12/09/2010\n- bugfix for change of 08/09/2010 (final {block} tags in subtemplates did not produce correct results)\n\n10/09/2010\n- bugfix for change of 08/09/2010 (final {block} tags in subtemplates did not produce correct results)\n\n08/09/2010\n- allow multiple template inheritance branches starting in subtemplates\n\n07/09/2010\n- bugfix {counter} and {cycle} plugin assigned result to smarty variable not in local(template) scope\n- bugfix templates containing just {strip} {/strip} tags did produce an error\n\n\n23/08/2010\n- fixed E_STRICT errors for uninitialized variables\n\n22/08/2010\n- added attribute cache_id to {include} tag\n\n13/08/2010\n- remove exception_handler property from Smarty class\n- added Smarty's own exceptions SmartyException and SmartyCompilerException\n\n09/08/2010\n- bugfix on modifier with doublequoted strings as parameter containing embedded tags\n\n06/08/2010\n- bugfix when cascading some modifier like |strip|strip_tags modifier\n\n05/08/2010\n- added plugin type modifiercompiler to produce compiled modifier code\n- changed standard modifier plugins to the compiling versions whenever possible\n- bugfix in nocache sections {include} must not cache the subtemplate\n\n02/08/2010\n- bugfix strip did not work correctly in conjunction with comment lines\n\n31/07/2010\n- bugfix on nocache attribute at {assign} and {append}\n\n30/07/2010\n- bugfix passing scope attributes in doublequoted strings did not work at {include} {assign} and {append}\n\n25/07/2010\n- another bugfix of change from 23/07/2010 when compiling modifier\n\n24/07/2010\n- bugfix of change from 23/07/2010 when compiling modifier\n\n23/07/2010\n- changed execution order. A variable filter does now run before modifiers on output of variables\n- bugfix use always { and } as delimiter for debug.tpl\n\n\n22/07/2010\n- bugfix in templateExists() method\n\n20/07/2010\n- fixed handling of { strip } tag with whitespaces\n\n15/07/2010\n- bufix  {$smarty.template} does include now the relative path, not just filename\n\n##  RC3 -\n\n\n\n\n15/07/2010\n- make the date_format modifier work also on objects of the DateTime class\n- implementation of parsetrees in the parser to close security holes and remove unwanted empty line in HTML output\n\n08/07/2010\n- bugfix on assigning multidimensional arrays within templates\n- corrected bugfix for truncate modifier\n\n07/07/2010\n- bugfix the truncate modifier needs to check if the string is utf-8 encoded or not\n- bugfix support of script files relative to trusted_dir\n\n06/07/2010\n- create exception on recursive {extends} calls\n- fixed reported line number at \"unexpected closing tag \" exception\n- bugfix on escape:'mail' modifier\n- drop exception if 'item' variable is equal 'from' variable in {foreach} tag\n\n01/07/2010\n- removed call_user_func_array calls for optimization of compiled code when using registered modifiers and plugins\n\n25/06/2010\n- bugfix escaping \" when block tags are used within doublequoted strings\n\n24/06/2010\n- replace internal get_time() calls with standard PHP5 microtime(true) calls in Smarty_Internal_Utility\n- added $smarty->register->templateClass() and $smarty->unregister->templateClass() methods for supporting static classes with namespace\n\n\n22/06/2010\n- allow spaces between typecast and value in template syntax\n- bugfix get correct count of traversables in {foreach} tag\n\n21/06/2010\n- removed use of PHP shortags SMARTY_PHP_PASSTHRU mode\n- improved speed of cache->clear() when a compile_id was specified and use_sub_dirs is true\n\n20/06/2010\n- replace internal get_time() calls with standard PHP5 microtime(true) calls\n- closed security hole when php.ini asp_tags = on\n\n18/06/2010\n- added __toString method to the Smarty_Variable class\n\n\n14/06/2010\n- make handling of Smarty comments followed by newline BC to Smarty2\n\n\n##  RC2 -\n\n\n\n13/06/2010\n- bugfix Smarty3 did not handle hexadecimals like 0x0F as numerical value\n- bugifx Smarty3 did not accept numerical constants like .1 or 2. (without a leading or trailing digit)\n\n11/06/2010\n- bugfix the lexer did fail on larger {literal} ... {/literal} sections\n\n03/06/2010\n- bugfix on calling template functions like Smarty tags\n\n01/06/2010\n- bugfix on template functions used with template inheritance\n- removed /* vim: set expandtab: */ comments\n- bugfix of auto literal problem introduce with fix of 31/05/2010\n\n31/05/2010\n- bugfix the parser did not allow some smarty variables with special name like $for, $if, $else and others.\n\n27/05/2010\n- bugfix on object chaining using variable properties\n- make scope of {counter} and {cycle} tags again global as in Smarty2\n\n26/05/2010\n- bugfix removed decrepated register_resource call in smarty_internal_template.php\n\n25/05/2010\n- rewrite of template function handling to improve speed\n- bugfix on file dependency when merge_compiled_includes = true\n\n\n16/05/2010\n- bugfix when passing parameter with numeric name like {foo 1='bar' 2='blar'}\n\n14/05/2010\n- bugfix compile new config files if compile_check and force_compile = false\n- added variable static classes names to template syntax\n\n11/05/2010\n- bugfix  make sure that the cache resource is loaded in all conditions when template methods getCached... are called externally\n- reverted the change 0f 30/04/2010. With the exception of forward references template functions can be again called by a standard tag.\n\n10/05/2010\n- bugfix on {foreach} and {for} optimizations of 27/04/2010\n\n09/05/2010\n- update of template and config file parser because of minor parser generator bugs\n\n07/05/2010\n- bugfix on {insert}\n\n06/05/2010\n- bugfix when merging compiled templates and objects are passed as parameter of the {include} tag\n\n05/05/2010\n- bugfix on {insert} to cache parameter\n- implementation of $smarty->default_modifiers as in Smarty2\n- bugfix on getTemplateVars method\n\n01/05/2010\n- bugfix on handling of variable method names at object chaning\n\n30/04/2010\n- bugfix when comparing timestamps in sysplugins/smarty_internal_config.php\n- work around of a substr_compare bug in older PHP5 versions\n- bugfix on template inheritance for tag names starting with \"block\"\n- bugfix on {function} tag with name attribute in doublequoted strings\n- fix to make calling of template functions unambiguously by madatory usage of the {call} tag\n\n##  RC1 -\n\n27/04/2010\n- change default of $debugging_ctrl to 'NONE'\n- optimization of compiled code of {foreach} and {for} loops\n- change of compiler for config variables\n\n27/04/2010\n- bugfix in $smarty->cache->clear() method. (do not cache template object)\n\n\n17/04/2010\n- security fix in {math} plugin\n\n\n12/04/2010\n- bugfix in smarty_internal_templatecompilerbase (overloaded property)\n- removed parser restrictions in using true,false and null as ID\n\n07/04/2010\n- bugfix typo in smarty_internal_templatecompilerbase\n\n31/03/2010\n- compile locking by touching old compiled files to avoid concurrent compilations\n\n29/03/2010\n- bugfix allow array definitions as modifier parameter\n- bugfix observe compile_check property when loading config files\n- added the template object as third filter parameter\n\n25/03/2010\n- change of utility->compileAllTemplates() log messages\n- bugfix on nocache code in {function} tags\n- new method utility->compileAllConfig() to compile all config files\n\n24/03/2010\n- bugfix on register->modifier() error messages\n\n23/03/2010\n- bugfix on template inheritance when calling multiple child/parent relations\n- bugfix on caching mode SMARTY_CACHING_LIFETIME_SAVED and cache_lifetime = 0\n\n22/03/2010\n- bugfix make directory separator operating system independend in compileAllTemplates()\n\n21/03/2010\n- removed unused code in compileAllTemplates()\n\n19/03/2010\n- bugfix for multiple {/block} tags on same line\n\n17/03/2010\n- bugfix make $smarty->cache->clear() function independent from caching status\n\n16/03/2010\n- bugfix on assign attribute at registered template objects\n- make handling of modifiers on expression BC to Smarty2\n\n15/03/2010\n- bugfix on block plugin calls\n\n11/03/2010\n- changed parsing of <?php and ?> back to Smarty2 behaviour\n\n08/03/2010\n- bugfix on uninitialized properties in smarty_internal_template\n- bugfix on $smarty->disableSecurity()\n\n04/03/2010\n- bugfix allow uppercase chars in registered resource names\n- bugfix on accessing chained objects of static classes\n\n01/03/2010\n- bugfix on nocache code in {block} tags if child template was included by {include}\n\n27/02/2010\n- allow block tags inside double quoted string\n\n26/02/2010\n- cache modified check implemented\n- support of access to a class constant from an object (since PHP 5.3)\n\n24/02/2010\n- bugfix on expressions in doublequoted string enclosed in backticks\n- added security property $static_classes for static class security\n\n18/02/2010\n- bugfix on parsing Smarty tags inside <?xml ... ?>\n- bugfix on truncate modifier\n\n17/02/2010\n- removed restriction that modifiers did require surrounding parenthesis in some cases\n- added {$smarty.block.child} special variable for template inheritance\n\n16/02/2010\n- bugfix on <?xml ... ?> tags for all php_handling modes\n- bugfix on parameter of variablefilter.htmlspecialchars.php plugin\n\n14/02/2010\n- added missing _plugins property in smarty.class.php\n- bugfix $smarty.const... inside doublequoted strings and backticks was compiled into wrong PHP code\n\n12/02/2010\n- bugfix on nested {block} tags\n- changed Smarty special variable $smarty.parent to $smarty.block.parent\n- added support of nested {bock} tags\n\n10/02/2010\n- avoid possible notice on $smarty->cache->clear(...), $smarty->clear_cache(....)\n- allow Smarty tags inside <? ... ?> tags in SMARTY_PHP_QUOTE and SMARTY_PHP_PASSTHRU mode\n- bugfix at new \"for\" syntax like {for $x=1 to 10 step 2}\n\n09/02/2010\n- added $smarty->_tag_stack for tracing block tag hierarchy\n\n08/02/2010\n- bugfix  use template fullpath at \u00a7smarty->cache->clear(...), $smarty->clear_cache(....)\n- bugfix of cache filename on extended templates when force_compile=true\n\n07/02/2010\n- bugfix on changes of 05/02/2010\n- preserve line endings type form template source\n- API changes (see README file)\n\n05/02/2010\n- bugfix on modifier and block plugins with same name\n\n02/02/2010\n- retaining newlines at registered functions and function plugins\n\n01/25/2010\n- bugfix cache resource was not loaded when caching was globally off but enabled at a template object\n- added test that $_SERVER['SCRIPT_NAME'] does exist in Smarty.class.php\n\n01/22/2010\n- new method $smarty->createData([$parent]) for creating a data object (required for bugfixes below)\n- bugfix config_load() method now works also on a data object\n- bugfix get_config_vars() method now works also on a data and template objects\n- bugfix clear_config() method now works also on a data and template objects\n\n01/19/2010\n- bugfix on plugins if same plugin was called from a nocache section first and later from a cached section\n\n\n###beta 7###\n\n\n01/17/2010\n- bugfix on $smarty.const... in double quoted strings\n\n01/16/2010\n- internal change of config file lexer/parser on handling of section names\n- bugfix on registered objects (format parameter of register_object was not handled correctly)\n\n01/14/2010\n- bugfix on backslash within single quoted strings\n- bugfix allow absolute filepath for config files\n- bugfix on special Smarty variable $smarty.cookies\n- revert handling of newline on no output tags like {if...}\n- allow special characters in config file section names for Smarty2 BC\n\n01/13/2010\n- bugfix on {if} tags\n\n01/12/2010\n- changed back modifier handling in parser. Some restrictions still apply:\n    if modifiers are used in side {if...} expression or in mathematical expressions\n    parentheses must be used.\n- bugfix the {function..} tag did not accept the name attribute in double quotes\n- closed possible security hole at <?php ... ?> tags\n- bugfix of config file parser on large config files\n\n\n###beta 6####\n\n01/11/2010\n- added \\n to the compiled code of the {if},{else},{elseif},{/if} tags to get output of newlines as expected by the template source\n- added missing support of insert plugins\n- added optional nocache attribute to {block} tags in parent template\n- updated <?php...?> handling supporting now heredocs and newdocs. (thanks to Thue Jnaus Kristensen)\n\n01/09/2010\n- bugfix on nocache {block} tags in parent templates\n\n01/08/2010\n- bugfix on variable filters. filter/nofilter attributes did not work on output statements\n\n01/07/2010\n- bugfix on file dependency at template inheritance\n- bugfix on nocache code at template inheritance\n\n01/06/2010\n- fixed typo in smarty_internal_resource_registered\n- bugfix for custom delimiter at extends resource and {extends} tag\n\n01/05/2010\n- bugfix sha1() calculations at extends resource and some general improvments on sha1() handling\n\n\n01/03/2010\n- internal change on building cache files\n\n01/02/2010\n- update cached_timestamp at the template object after cache file is written to avoid possible side effects\n- use internally always SMARTY_CACHING_LIFETIME_* constants\n\n01/01/2010\n- bugfix for obtaining plugins which must be included (related to change of 12/30/2009)\n- bugfix for {php} tag (trow an exception if allow_php_tag = false)\n\n12/31/2009\n- optimization of generated code for doublequoted strings containing variables\n- rewrite of {function} tag handling\n  - can now be declared in an external subtemplate\n  - can contain nocache sections (nocache_hash handling)\n  - can be called in noccache sections (nocache_hash handling)\n  - new {call..} tag to call template functions with a variable name {call name=$foo}\n- fixed nocache_hash handling in merged compiled templates\n\n12/30/2009\n- bugfix for plugins defined in the script as smarty_function_foo\n\n12/29/2009\n- use sha1() for filepath encoding\n- updates on nocache_hash handling\n- internal change on merging some data\n- fixed cache filename for custom resources\n\n12/28/2009\n- update for security fixes\n- make modifier plugins always trusted\n- fixed bug loading modifiers in child template at template inheritance\n\n12/27/2009\n--- this is a major update with a couple of internal changes ---\n- new config file lexer/parser (thanks to Thue Jnaus Kristensen)\n- template lexer/parser fixes for PHP and {literal} handing (thanks to Thue Jnaus Kristensen)\n- fix on registered plugins with different type but same name\n- rewrite of plugin handling (optimized execution speed)\n- closed a security hole regarding PHP code injection into cache files\n- fixed bug in clear cache handling\n- Renamed a couple of internal classes\n- code cleanup for merging compiled templates\n- couple of runtime optimizations (still not all done)\n- update of getCachedTimestamp()\n- fixed bug on modifier plugins at nocache output\n\n12/19/2009\n- bugfix on comment lines in config files\n\n12/17/2009\n- bugfix of parent/global variable update at included/merged subtemplates\n- encode final template filepath into filename of compiled and cached files\n- fixed {strip} handling in auto literals\n\n12/16/2009\n- update of changelog\n- added {include file='foo.tpl' inline}  inline option to merge compiled code of subtemplate into the calling template\n\n12/14/2009\n- fixed sideefect of last modification (objects in array index did not work anymore)\n\n12/13/2009\n- allow boolean negation (\"!\") as operator on variables outside {if} tag\n\n12/12/2009\n- bugfix on single quotes inside {function} tag\n- fix short append/prepend attributes in {block} tags\n\n12/11/2009\n- bugfix on clear_compiled_tpl (avoid possible warning)\n\n12/10/2009\n- bugfix on {function} tags and template inheritance\n\n12/05/2009\n- fixed problem when a cached file was fetched several times\n- removed unneeded lexer code\n\n12/04/2009\n- added max attribute to for loop\n- added security mode allow_super_globals\n\n12/03/2009\n- template inheritance: child templates can now call functions defined by the {function} tag in the parent template\n- added {for $foo = 1 to 5 step 2}  syntax\n- bugfix for {$foo.$x.$y.$z}\n\n12/01/2009\n- fixed parsing of names of special formated tags like if,elseif,while,for,foreach\n- removed direct access to constants in templates because of some syntax problems\n- removed cache resource plugin for mysql from the distribution\n- replaced most hard errors (exceptions) by softerrors(trigger_error) in plugins\n- use $template_class property for template class name when compiling {include},{eval} and {extends} tags\n\n11/30/2009\n- map 'true' to SMARTY_CACHING_LIFETIME_CURRENT for the $smarty->caching parameter\n- allow {function} tags within {block} tags\n\n11/28/2009\n- ignore compile_id at debug template\n- added direct access to constants in templates\n- some lexer/parser optimizations\n\n11/27/2009\n- added cache resource MYSQL plugin\n\n11/26/2009\n- bugfix on nested doublequoted strings\n- correct line number on unknown tag error message\n- changed {include} compiled code\n- fix on checking dynamic varibales with error_unassigned = true\n\n11/25/2009\n- allow the following writing for boolean: true, TRUE, True, false, FALSE, False\n- {strip} tag functionality rewritten\n\n11/24/2009\n- bugfix for $smarty->config_overwrite = false\n\n11/23/2009\n- suppress warnings on unlink caused by race conditions\n- correct line number on unknown tag error message\n\n------- beta 5\n11/23/2009\n- fixed configfile parser for text starting with a numeric char\n- the default_template_handler_func may now return a filepath to a template source\n\n11/20/2009\n- bugfix for empty config files\n- convert timestamps of registered resources to integer\n\n11/19/2009\n- compiled templates are no longer touched with the filemtime of template source\n\n11/18/2009\n- allow integer as attribute name in plugin calls\n\n------- beta 4\n11/18/2009\n- observe umask settings when setting file permissions\n- avoide unneeded cache file creation for subtemplates which did occur in some situations\n- make $smarty->_current_file available during compilation for Smarty2 BC\n\n11/17/2009\n- sanitize compile_id and cache_id (replace illegal chars with _)\n- use _dir_perms and _file_perms properties at file creation\n- new constant SMARTY_RESOURCE_DATE_FORMAT (default '%b %e, %Y') which is used as default format in modifier date_format\n- added {foreach $array as $key=>$value} syntax\n- renamed extend tag and resource to extends: {extends file='foo.tol'} , $smarty->display('extends:foo.tpl|bar.tpl);\n- bugfix cycle plugin\n\n11/15/2009\n- lexer/parser optimizations on quoted strings\n\n11/14/2009\n- bugfix on merging compiled templates when source files got removed or renamed.\n- bugfix modifiers on registered object tags\n- fixed locaion where outputfilters are running\n- fixed config file definitions at EOF\n- fix on merging compiled templates with nocache sections in nocache includes\n- parser could run into a PHP error on wrong file attribute\n\n11/12/2009\n- fixed variable filenames in {include_php} and {insert}\n- added scope to Smarty variables in the {block} tag compiler\n- fix on nocache code in child {block} tags\n\n11/11/2009\n- fixed {foreachelse}, {forelse}, {sectionelse} compiled code at nocache variables\n- removed checking for reserved variables\n- changed debugging handling\n\n11/10/2009\n- fixed preg_qoute on delimiters\n\n11/09/2009\n- lexer/parser bugfix\n- new SMARTY_SPL_AUTOLOAD constant to control the autoloader option\n- bugfix for {function} block tags in included templates\n\n11/08/2009\n- fixed alphanumeric array index\n- bugfix on complex double quoted strings\n\n11/05/2009\n- config_load method can now be called on data and template objects\n\n11/04/2009\n- added typecasting support for template variables\n- bugfix on complex indexed special Smarty variables\n\n11/03/2009\n- fixed parser error on objects with special smarty vars\n- fixed file dependency for {incude} inside {block} tag\n- fixed not compiling on non existing compiled templates when compile_check = false\n- renamed function names of autoloaded Smarty methods to Smarty_Method_....\n- new security_class property (default is Smarty_Security)\n\n11/02/2009\n- added neq,lte,gte,mod as aliases to if conditions\n- throw exception on illegal Smarty() constructor calls\n\n10/31/2009\n- change of filenames in sysplugins folder for internal spl_autoload function\n- lexer/parser changed for increased compilation speed\n\n10/27/2009\n- fixed missing quotes in include_php.php\n\n10/27/2009\n- fixed typo in method.register_resource\n- pass {} through as literal\n\n10/26/2009\n- merge only compiled subtemplates into the compiled code of the main template\n\n10/24/2009\n- fixed nocache vars at internal block tags\n- fixed merging of recursive includes\n\n10/23/2009\n- fixed nocache var problem\n\n10/22/2009\n- fix trimwhitespace outputfilter parameter\n\n10/21/2009\n- added {$foo++}{$foo--} syntax\n- buxfix changed PHP \"if (..):\" to \"if (..){\" because of possible bad code when concenating PHP tags\n- autoload Smarty internal classes\n- fixed file dependency for config files\n- some code optimizations\n- fixed function definitions on some autoloaded methods\n- fixed nocache variable inside if condition of {if} tag\n\n10/20/2009\n- check at compile time for variable filter to improve rendering speed if no filter is used\n- fixed bug at combination of {elseif} tag and {...} in double quoted strings of static class parameter\n\n10/19/2009\n- fixed compiled template merging on variable double quoted strings as name\n- fixed bug in caching mode 2 and cache_lifetime -1\n- fixed modifier support on block tags\n\n10/17/2009\n- remove ?>\\n<?php and ?><?php sequences from compiled template\n\n10/15/2009\n- buxfix on assigning array elements inside templates\n- parser bugfix on array access\n\n10/15/2009\n- allow bit operator '&' inside {if} tag\n- implementation of ternary operator\n\n10/13/2009\n- do not recompile evaluated templates if reused just with other data\n- recompile config files when config properties did change\n- some lexer/parser otimizations\n\n10/11/2009\n- allow {block} tags inside included templates\n- bugfix for resource plugins in Smarty2 format\n- some optimizations of internal.template.php\n\n10/11/2009\n- fixed bug when template with same name is used with different data objects\n- fixed bug with double quoted name attribute at {insert} tag\n- reenabled assign_by_ref and append_by_ref methods\n\n10/07/2009\n- removed block nesting checks for {capture}\n\n10/05/2009\n- added support of \"isinstance\" to {if} tag\n\n10/03/2009\n- internal changes to improve performance\n- fix registering of filters for classes\n\n10/01/2009\n- removed default timezone setting\n- reactivated PHP resource for simple PHP templates. Must set allow_php_templates = true to enable\n- {PHP} tag can be enabled by allow_php_tag = true\n\n09/30/2009\n- fixed handling template_exits method for all resource types\n- bugfix for other cache resources than file\n- the methods assign_by_ref is now wrapped to assign, append_by_ref to append\n- allow arrays of variables pass in display, fetch and createTemplate calls\n  $data = array('foo'=>'bar','foo2'=>'blar');\n  $smarty->display('my.tpl',$data);\n\n09/29/2009\n- changed {php} tag handling\n- removed support of Smarty::instance()\n- removed support of PHP resource type\n- improved execution speed of {foreach} tags\n- fixed bug in {section} tag\n\n09/23/2009\n- improvements and bugfix on {include} tag handling\nNOTICE: existing compiled template and cache files must be deleted\n\n09/19/2009\n- replace internal \"eval()\" calls by \"include\" during rendering process\n- speed improvment for templates which have included subtemplates\n    the compiled code of included templates is merged into the compiled code of the parent template\n- added logical operator \"xor\" for {if} tag\n- changed parameter ordering for Smarty2 BC\n    fetch($template, $cache_id = null, $compile_id = null, $parent = null)\n    display($template, $cache_id = null, $compile_id = null, $parent = null)\n    createTemplate($template, $cache_id = null, $compile_id = null, $parent = null)\n- property resource_char_set is now replaced by constant SMARTY_RESOURCE_CHAR_SET\n- fixed handling of classes in registered blocks\n- speed improvement of lexer on text sections\n\n09/01/2009\n- dropped nl2br as plugin\n- added '<>' as comparission operator in {if} tags\n- cached caching_lifetime property to cache_liftime for backward compatibility with Smarty2.\n  {include} optional attribute is also now cache_lifetime\n- fixed trigger_error method (moved into Smarty class)\n- version is now  Beta!!!\n\n\n08/30/2009\n- some speed optimizations on loading internal plugins\n\n\n08/29/2009\n- implemented caching of registered Resources\n- new property 'auto_literal'. if true(default)  '{ ' and ' }' interpreted as literal, not as Smarty delimiter\n\n\n08/28/2009\n- Fix on line breaks inside {if} tags\n\n08/26/2009\n- implemented registered resources as in Smarty2. NOTE: caching does not work yet\n- new property 'force_cache'. if true it forces the creation of a new cache file\n- fixed modifiers on arrays\n- some speed optimization on loading internal classes\n\n\n08/24/2009\n- fixed typo in lexer definition for '!==' operator\n- bugfix - the ouput of plugins was not cached\n- added global variable SCRIPT_NAME\n\n08/21/2009\n- fixed problems whitespace in conjuction with custom delimiters\n- Smarty tags can now be used as value anywhere\n\n08/18/2009\n- definition of template class name moded in internal.templatebase.php\n- whitespace parser changes\n\n08/12/2009\n- fixed parser problems\n\n08/11/2009\n- fixed parser problems with custom delimiter\n\n08/10/2009\n- update of mb support in plugins\n\n\n08/09/2009\n- fixed problems with doublequoted strings at name attribute of {block} tag\n- bugfix at scope attribute of {append} tag\n\n08/08/2009\n- removed all internal calls of Smarty::instance()\n- fixed code in double quoted strings\n\n08/05/2009\n- bugfix mb_string support\n- bugfix of \\n.\\t etc in double quoted strings\n\n07/29/2009\n- added syntax for variable config vars  like  #$foo#\n\n07/28/2009\n- fixed parsing of $smarty.session vars containing objects\n\n07/22/2009\n- fix of \"$\" handling in double quoted strings\n\n07/21/2009\n- fix that {$smarty.current_dir} return correct value within {block} tags.\n\n07/20/2009\n- drop error message on unmatched {block} {/block} pairs\n\n07/01/2009\n- fixed smarty_function_html_options call in plugin function.html_select_date.php (missing ,)\n\n06/24/2009\n- fixed smarty_function_html_options call in plugin function.html_select_date.php\n\n06/22/2009\n- fix on \\n and spaces inside smarty tags\n- removed request_use_auto_globals propert as it is no longer needed because Smarty 3 will always run under PHP 5\n\n\n06/18/2009\n- fixed compilation of block plugins when caching enabled\n- added $smarty.current_dir  which returns the current working directory\n\n06/14/2009\n- fixed array access on super globals\n- allow smarty tags within xml tags\n\n06/13/2009\n- bugfix at extend resource: create unique files for compiled template and cache for each combination of template files\n- update extend resource to handle appen and prepend block attributes\n- instantiate classes of plugins instead of calling them static\n\n06/03/2009\n- fixed repeat at block plugins\n\n05/25/2009\n- fixed problem with caching of compiler plugins\n\n05/14/2009\n- fixed directory separator handling\n\n05/09/2009\n- syntax change for stream variables\n- fixed bug when using absolute template filepath and caching\n\n05/08/2009\n- fixed bug of {nocache}  tag in included templates\n\n05/06/2009\n- allow that plugins_dir folder names can end without directory separator\n\n05/05/2009\n- fixed E_STRICT incompabilities\n- {function} tag bug fix\n- security policy definitions have been moved from plugins folder to file Security.class.php in libs folder\n- added allow_super_global configuration to security\n\n04/30/2009\n- functions defined with the {function} tag now always have global scope\n\n04/29/2009\n- fixed problem with directory setter methods\n- allow that cache_dir can end without directory separator\n\n04/28/2009\n- the {function} tag can no longer overwrite standard smarty tags\n- inherit functions defined by the {fuction} tag into subtemplates\n- added {while <statement>} sytax to while tag\n\n04/26/2009\n- added trusted stream checking to security\n- internal changes at file dependency check for caching\n\n04/24/2009\n- changed name of {template} tag to {function}\n- added new {template} tag\n\n04/23/2009\n- fixed access of special smarty variables from included template\n\n04/22/2009\n- unified template stream syntax with standard Smarty resource syntax  $smarty->display('mystream:mytemplate')\n\n04/21/2009\n- change of new style syntax for forach. Now:  {foreach $array as $var}  like in PHP\n\n04/20/2009\n- fixed \"$foo.bar  ...\" variable replacement in double quoted strings\n- fixed error in {include} tag with variable file attribute\n\n04/18/2009\n- added stream resources  ($smarty->display('mystream://mytemplate'))\n- added stream variables  {$mystream:myvar}\n\n04/14/2009\n- fixed compile_id handling on {include} tags\n- fixed append/prepend attributes in {block} tag\n- added  {if  'expression' is in 'array'}  syntax\n- use crc32 as hash for compiled config files.\n\n04/13/2009\n- fixed scope problem with parent variables when appending variables within templates.\n- fixed code for {block} without childs (possible sources for notice errors removed)\n\n04/12/2009\n- added append and prepend attribute to {block} tag\n\n04/11/2009\n- fixed variables in 'file' attribute of {extend} tag\n- fixed problems in modifiers (if mb string functions not present)\n\n04/10/2009\n- check if mb string functions available otherwise fallback to normal string functions\n- added global variable scope SMARTY_GLOBAL_SCOPE\n- enable 'variable' filter by default\n- fixed {$smarty.block.parent.foo}\n- implementation of a 'variable' filter as replacement for default modifier\n\n04/09/2009\n- fixed execution of filters defined by classes\n- compile the always the content of {block} tags to make shure that the filters are running over it\n- syntax corrections on variable object property\n- syntax corrections on array access in dot syntax\n\n04/08/2009\n- allow variable object property\n\n04/07/2009\n- changed variable scopes to SMARTY_LOCAL_SCOPE, SMARTY_PARENT_SCOPE, SMARTY_ROOT_SCOPE to avoid possible conflicts with user constants\n- Smarty variable global attribute replaced with scope attribute\n\n04/06/2009\n- variable scopes LOCAL_SCOPE, PARENT_SCOPE, ROOT_SCOPE\n- more getter/setter methods\n\n04/05/2009\n- replaced new array looping syntax {for $foo in $array} with {foreach $foo in $array} to avoid confusion\n- added append array for short form of assign  {$foo[]='bar'} and allow assignments to nested arrays {$foo['bla']['blue']='bar'}\n\n04/04/2009\n- make output of template default handlers cachable and save compiled source\n- some fixes on yesterdays update\n\n04/03/2006\n- added registerDefaultTemplateHandler method and functionallity\n- added registerDefaultPluginHandler method and functionallity\n- added {append} tag to extend Smarty array variabled\n\n04/02/2009\n- added setter/getter methods\n- added $foo@first and $foo@last properties at {for} tag\n- added $set_timezone (true/false) property to setup optionally the default time zone\n\n03/31/2009\n- bugfix smarty.class and internal.security_handler\n- added compile_check configuration\n- added setter/getter methods\n\n03/30/2009\n- added all major setter/getter methods\n\n03/28/2009\n- {block} tags can be nested now\n- md5 hash function replace with crc32 for speed optimization\n- file order for exted resource inverted\n- clear_compiled_tpl and clear_cache_all will not touch .svn folder any longer\n\n03/27/2009\n- added extend resource\n\n03/26/2009\n- fixed parser not to create error on `word` in double quoted strings\n- allow PHP  array(...)\n- implemented  $smarty.block.name.parent to access parent block content\n- fixed smarty.class\n\n\n03/23/2009\n- fixed {foreachelse} and {forelse} tags\n\n03/22/2009\n- fixed possible sources for notice errors\n- rearrange SVN into distribution and development folders\n\n03/21/2009\n- fixed exceptions in function plugins\n- fixed notice error in Smarty.class.php\n- allow chained objects to span multiple lines\n- fixed error in modifiers\n\n03/20/2009\n- moved /plugins folder into /libs folder\n- added noprint modifier\n- autoappend a directory separator if the xxxxx_dir definition have no trailing one\n\n03/19/2009\n- allow array definition as modifier parameter\n- changed modifier to use multi byte string funktions.\n\n03/17/2009\n- bugfix\n\n03/15/2009\n- added {include_php} tag for BC\n- removed @ error suppression\n- bugfix fetch did always repeat output of first call when calling same template several times\n- PHPunit tests extended\n\n03/13/2009\n- changed block syntax to be Smarty like  {block:titel} -> {block name=titel}\n- compiling of {block} and {extend} tags rewriten for better performance\n- added special Smarty variable block  ($smarty.block.foo} returns the parent definition of block foo\n- optimization of {block} tag compiled code.\n- fixed problem with escaped double quotes in double quoted strings\n\n03/12/2009\n- added support of template inheritance by {extend } and {block } tags.\n- bugfix comments within literals\n- added scope attribuie to {include} tag\n\n03/10/2009\n- couple of bugfixes and improvements\n- PHPunit tests extended\n\n03/09/2009\n- added support for global template vars.  {assign_global...}  $smarty->assign_global(...)\n- added direct_access_security\n- PHPunit tests extended\n- added missing {if} tag conditions like \"is div by\" etc.\n\n03/08/2009\n- splitted up the Compiler class to make it easier to use a coustom compiler\n- made default plugins_dir relative to Smarty root and not current working directory\n- some changes to make the lexer parser better configurable\n- implemented {section} tag for Smarty2 BC\n\n03/07/2009\n- fixed problem with comment tags\n- fixed problem with #xxxx in double quoted string\n- new {while} tag implemented\n- made lexer and paser class configurable as $smarty property\n- Smarty method get_template_vars implemented\n- Smarty method get_registered_object implemented\n- Smarty method trigger_error implemented\n- PHPunit tests extended\n\n03/06/2009\n- final changes on config variable handling\n- parser change - unquoted strings will by be converted into single quoted strings\n- PHPunit tests extended\n- some code cleanup\n- fixed problem on catenate strings with expression\n- update of count_words modifier\n- bugfix on comment tags\n\n\n03/05/2009\n- bugfix on <?xml...> tag with caching enabled\n- changes on exception handling (by Monte)\n\n03/04/2009\n- added support for config variables\n- bugfix on <?xml...> tag\n\n03/02/2009\n- fixed unqouted strings within modifier parameter\n- bugfix parsing of mofifier parameter\n\n03/01/2009\n- modifier chaining works now as in Smarty2\n\n02/28/2009\n- changed handling of unqouted strings\n\n02/26/2009\n- bugfix\n- changed $smarty.capture.foo to be global for Smarty2 BC.\n\n02/24/2009\n- bugfix {php} {/php} tags for backward compatibility\n- bugfix for expressions on arrays\n- fixed usage of \"null\" value\n- added $smarty.foreach.foo.first and $smarty.foreach.foo.last\n\n02/06/2009\n- bugfix for request variables without index  for example $smarty.get\n- experimental solution for variable functions in static class\n\n02/05/2009\n- update of popup plugin\n- added config variables to template parser (load config functions still missing)\n- parser bugfix for empty quoted strings\n\n02/03/2009\n- allow array of objects as static class variabales.\n- use htmlentities at source output at template errors.\n\n02/02/2009\n- changed search order on modifiers to look at plugins folder first\n- parser bug fix for modifier on array elements  $foo.bar|modifier\n- parser bug fix on single quoted srings\n- internal: splitted up compiler plugin files\n\n02/01/2009\n- allow method chaining on static classes\n- special Smarty variables  $smarty.... implemented\n- added {PHP} {/PHP} tags for backward compatibility\n\n01/31/2009\n- added {math} plugin for Smarty2 BC\n- added template_exists method\n- changed Smarty3 method enable_security() to enableSecurity() to follow camelCase standards\n\n01/30/2009\n- bugfix in single quoted strings\n- changed syntax for variable property access from $foo:property to $foo@property because of ambiguous syntax at modifiers\n\n01/29/2009\n- syntax for array definition changed from (1,2,3) to [1,2,3] to remove ambiguous syntax\n- allow  {for $foo in [1,2,3]} syntax\n- bugfix in double quoted strings\n- allow <?xml...?> tags in template even if short_tags are enabled\n\n01/28/2009\n- fixed '!==' if condition.\n\n01/28/2009\n- added support of {strip} {/strip} tag.\n\n01/27/2009\n- bug fix on backticks in double quoted strings at objects\n\n01/25/2009\n- Smarty2 modfiers added to SVN\n\n01/25/2009\n- bugfix allow arrays at object properties in Smarty syntax\n- the template object is now passed as additional parameter at plugin calls\n- clear_compiled_tpl method completed\n\n01/20/2009\n- access to class constants implemented  ( class::CONSTANT )\n- access to static class variables implemented ( class::$variable )\n- call of static class methods implemented ( class::method() )\n\n01/16/2009\n- reallow leading _ in variable names  {$_var}\n- allow array of objects  {$array.index->method()} syntax\n- finished work on clear_cache and clear_cache_all methods\n\n01/11/2009\n- added support of {literal} tag\n- added support of {ldelim} and {rdelim} tags\n- make code compatible to run with E_STRICT error setting\n\n01/08/2009\n- moved clear_assign and clear_all_assign to internal.templatebase.php\n- added assign_by_ref, append and append_by_ref methods\n\n01/02/2009\n- added load_filter method\n- fished work on filter handling\n- optimization of plugin loading\n\n12/30/2008\n- added compiler support of registered object\n- added backtick support in doubled quoted strings for backward compatibility\n- some minor bug fixes and improvments\n\n12/23/2008\n- fixed problem of not working \"not\" operator in if-expressions\n- added handling of compiler function plugins\n- finished work on (un)register_compiler_function method\n- finished work on (un)register_modifier method\n- plugin handling from plugins folder changed for modifier plugins\n  deleted - internal.modifier.php\n- added modifier chaining to parser\n\n12/17/2008\n- finished (un)register_function method\n- finished (un)register_block method\n- added security checking for PHP functions in PHP templates\n- plugin handling from plugins folder rewritten\n  new - internal.plugin_handler.php\n  deleted - internal.block.php\n  deleted - internal.function.php\n- removed plugin checking from security handler\n\n12/16/2008\n\n- new start of this change_log file\n", "<?php\n/**\n * This file is part of Smarty.\n *\n * (c) 2015 Uwe Tews\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Smarty Internal Plugin Compile Block Class\n *\n * @author Uwe Tews <uwe.tews@googlemail.com>\n */\nclass Smarty_Internal_Compile_Block extends Smarty_Internal_Compile_Shared_Inheritance\n{\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $required_attributes = array('name');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $shorttag_order = array('name');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $option_flags = array('hide', 'nocache');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $optional_attributes = array('assign');\n\n    /**\n     * Compiles code for the {block} tag\n     *\n     * @param array                                 $args      array with attributes from parser\n     * @param \\Smarty_Internal_TemplateCompilerBase $compiler  compiler object\n     * @param array                                 $parameter array with compilation parameter\n     */\n    public function compile($args, Smarty_Internal_TemplateCompilerBase $compiler, $parameter)\n    {\n        if (!isset($compiler->_cache[ 'blockNesting' ])) {\n            $compiler->_cache[ 'blockNesting' ] = 0;\n        }\n        if ($compiler->_cache[ 'blockNesting' ] === 0) {\n            // make sure that inheritance gets initialized in template code\n            $this->registerInit($compiler);\n            $this->option_flags = array('hide', 'nocache', 'append', 'prepend');\n        } else {\n            $this->option_flags = array('hide', 'nocache');\n        }\n        // check and get attributes\n        $_attr = $this->getAttributes($compiler, $args);\n        ++$compiler->_cache[ 'blockNesting' ];\n        $_className = 'Block_' . preg_replace('![^\\w]+!', '_', uniqid(mt_rand(), true));\n        $compiler->_cache[ 'blockName' ][ $compiler->_cache[ 'blockNesting' ] ] = $_attr[ 'name' ];\n        $compiler->_cache[ 'blockClass' ][ $compiler->_cache[ 'blockNesting' ] ] = $_className;\n        $compiler->_cache[ 'blockParams' ][ $compiler->_cache[ 'blockNesting' ] ] = array();\n        $compiler->_cache[ 'blockParams' ][ 1 ][ 'subBlocks' ][ trim($_attr[ 'name' ], '\"\\'') ][] = $_className;\n        $this->openTag(\n            $compiler,\n            'block',\n            array(\n                $_attr, $compiler->nocache, $compiler->parser->current_buffer,\n                $compiler->template->compiled->has_nocache_code,\n                $compiler->template->caching\n            )\n        );\n        $compiler->saveRequiredPlugins(true);\n        $compiler->nocache = $compiler->nocache | $compiler->tag_nocache;\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        $compiler->template->compiled->has_nocache_code = false;\n        $compiler->suppressNocacheProcessing = true;\n    }\n}\n\n/**\n * Smarty Internal Plugin Compile BlockClose Class\n */\nclass Smarty_Internal_Compile_Blockclose extends Smarty_Internal_Compile_Shared_Inheritance\n{\n    /**\n     * Compiles code for the {/block} tag\n     *\n     * @param array                                 $args      array with attributes from parser\n     * @param \\Smarty_Internal_TemplateCompilerBase $compiler  compiler object\n     * @param array                                 $parameter array with compilation parameter\n     *\n     * @return bool true\n     */\n    public function compile($args, Smarty_Internal_TemplateCompilerBase $compiler, $parameter)\n    {\n        list($_attr, $_nocache, $_buffer, $_has_nocache_code, $_caching) = $this->closeTag($compiler, array('block'));\n        // init block parameter\n        $_block = $compiler->_cache[ 'blockParams' ][ $compiler->_cache[ 'blockNesting' ] ];\n        unset($compiler->_cache[ 'blockParams' ][ $compiler->_cache[ 'blockNesting' ] ]);\n        $_name = $_attr[ 'name' ];\n        $_assign = isset($_attr[ 'assign' ]) ? $_attr[ 'assign' ] : null;\n        unset($_attr[ 'assign' ], $_attr[ 'name' ]);\n        foreach ($_attr as $name => $stat) {\n            if ((is_bool($stat) && $stat !== false) || (!is_bool($stat) && $stat !== 'false')) {\n                $_block[ $name ] = 'true';\n            }\n        }\n        $_className = $compiler->_cache[ 'blockClass' ][ $compiler->_cache[ 'blockNesting' ] ];\n        // get compiled block code\n        $_functionCode = $compiler->parser->current_buffer;\n        // setup buffer for template function code\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        $output = \"<?php\\n\";\n        $output .= $compiler->cStyleComment(\" {block {$_name}} \") . \"\\n\";\n        $output .= \"class {$_className} extends Smarty_Internal_Block\\n\";\n        $output .= \"{\\n\";\n        foreach ($_block as $property => $value) {\n            $output .= \"public \\${$property} = \" . var_export($value, true) . \";\\n\";\n        }\n        $output .= \"public function callBlock(Smarty_Internal_Template \\$_smarty_tpl) {\\n\";\n        $output .= $compiler->compileRequiredPlugins();\n        $compiler->restoreRequiredPlugins();\n        if ($compiler->template->compiled->has_nocache_code) {\n            $output .= \"\\$_smarty_tpl->cached->hashes['{$compiler->template->compiled->nocache_hash}'] = true;\\n\";\n        }\n        if (isset($_assign)) {\n            $output .= \"ob_start();\\n\";\n        }\n        $output .= \"?>\\n\";\n        $compiler->parser->current_buffer->append_subtree(\n            $compiler->parser,\n            new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                $output\n            )\n        );\n        $compiler->parser->current_buffer->append_subtree($compiler->parser, $_functionCode);\n        $output = \"<?php\\n\";\n        if (isset($_assign)) {\n            $output .= \"\\$_smarty_tpl->assign({$_assign}, ob_get_clean());\\n\";\n        }\n        $output .= \"}\\n\";\n        $output .= \"}\\n\";\n        $output .= $compiler->cStyleComment(\" {/block {$_name}} \") . \"\\n\\n\";\n        $output .= \"?>\\n\";\n        $compiler->parser->current_buffer->append_subtree(\n            $compiler->parser,\n            new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                $output\n            )\n        );\n        $compiler->blockOrFunctionCode .= $compiler->parser->current_buffer->to_smarty_php($compiler->parser);\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        // restore old status\n        $compiler->template->compiled->has_nocache_code = $_has_nocache_code;\n        $compiler->tag_nocache = $compiler->nocache;\n        $compiler->nocache = $_nocache;\n        $compiler->parser->current_buffer = $_buffer;\n        $output = \"<?php \\n\";\n        if ($compiler->_cache[ 'blockNesting' ] === 1) {\n            $output .= \"\\$_smarty_tpl->inheritance->instanceBlock(\\$_smarty_tpl, '$_className', $_name);\\n\";\n        } else {\n            $output .= \"\\$_smarty_tpl->inheritance->instanceBlock(\\$_smarty_tpl, '$_className', $_name, \\$this->tplIndex);\\n\";\n        }\n        $output .= \"?>\\n\";\n        --$compiler->_cache[ 'blockNesting' ];\n        if ($compiler->_cache[ 'blockNesting' ] === 0) {\n            unset($compiler->_cache[ 'blockNesting' ]);\n        }\n        $compiler->has_code = true;\n        $compiler->suppressNocacheProcessing = true;\n        return $output;\n    }\n}\n", "<?php\n/**\n * Smarty Internal Plugin Compile Function\n * Compiles the {function} {/function} tags\n *\n * @package    Smarty\n * @subpackage Compiler\n * @author     Uwe Tews\n */\n\n/**\n * Smarty Internal Plugin Compile Function Class\n *\n * @package    Smarty\n * @subpackage Compiler\n */\nclass Smarty_Internal_Compile_Function extends Smarty_Internal_CompileBase\n{\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $required_attributes = array('name');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $shorttag_order = array('name');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $optional_attributes = array('_any');\n\n    /**\n     * Compiles code for the {function} tag\n     *\n     * @param array                                 $args     array with attributes from parser\n     * @param \\Smarty_Internal_TemplateCompilerBase $compiler compiler object\n     *\n     * @return bool true\n     * @throws \\SmartyCompilerException\n     */\n    public function compile($args, Smarty_Internal_TemplateCompilerBase $compiler)\n    {\n        // check and get attributes\n        $_attr = $this->getAttributes($compiler, $args);\n        if ($_attr[ 'nocache' ] === true) {\n            $compiler->trigger_template_error('nocache option not allowed', null, true);\n        }\n        unset($_attr[ 'nocache' ]);\n        $_name = trim($_attr[ 'name' ], '\\'\"');\n\n        if (!preg_match('/^[a-zA-Z0-9_\\x80-\\xff]+$/', $_name)) {\n\t        $compiler->trigger_template_error(\"Function name contains invalid characters: {$_name}\", null, true);\n        }\n\n        $compiler->parent_compiler->tpl_function[ $_name ] = array();\n        $save = array(\n            $_attr, $compiler->parser->current_buffer, $compiler->template->compiled->has_nocache_code,\n            $compiler->template->caching\n        );\n        $this->openTag($compiler, 'function', $save);\n        // Init temporary context\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        $compiler->template->compiled->has_nocache_code = false;\n        $compiler->saveRequiredPlugins(true);\n        return true;\n    }\n}\n\n/**\n * Smarty Internal Plugin Compile Functionclose Class\n *\n * @package    Smarty\n * @subpackage Compiler\n */\nclass Smarty_Internal_Compile_Functionclose extends Smarty_Internal_CompileBase\n{\n    /**\n     * Compiler object\n     *\n     * @var object\n     */\n    private $compiler = null;\n\n    /**\n     * Compiles code for the {/function} tag\n     *\n     * @param array                                        $args     array with attributes from parser\n     * @param object|\\Smarty_Internal_TemplateCompilerBase $compiler compiler object\n     *\n     * @return bool true\n     */\n    public function compile($args, Smarty_Internal_TemplateCompilerBase $compiler)\n    {\n        $this->compiler = $compiler;\n        $saved_data = $this->closeTag($compiler, array('function'));\n        $_attr = $saved_data[ 0 ];\n        $_name = trim($_attr[ 'name' ], '\\'\"');\n        $compiler->parent_compiler->tpl_function[ $_name ][ 'compiled_filepath' ] =\n            $compiler->parent_compiler->template->compiled->filepath;\n        $compiler->parent_compiler->tpl_function[ $_name ][ 'uid' ] = $compiler->template->source->uid;\n        $_parameter = $_attr;\n        unset($_parameter[ 'name' ]);\n        // default parameter\n        $_paramsArray = array();\n        foreach ($_parameter as $_key => $_value) {\n            if (is_int($_key)) {\n                $_paramsArray[] = \"$_key=>$_value\";\n            } else {\n                $_paramsArray[] = \"'$_key'=>$_value\";\n            }\n        }\n        if (!empty($_paramsArray)) {\n            $_params = 'array(' . implode(',', $_paramsArray) . ')';\n            $_paramsCode = \"\\$params = array_merge($_params, \\$params);\\n\";\n        } else {\n            $_paramsCode = '';\n        }\n        $_functionCode = $compiler->parser->current_buffer;\n        // setup buffer for template function code\n        $compiler->parser->current_buffer = new Smarty_Internal_ParseTree_Template();\n        $_funcName = \"smarty_template_function_{$_name}_{$compiler->template->compiled->nocache_hash}\";\n        $_funcNameCaching = $_funcName . '_nocache';\n        if ($compiler->template->compiled->has_nocache_code) {\n            $compiler->parent_compiler->tpl_function[ $_name ][ 'call_name_caching' ] = $_funcNameCaching;\n            $output = \"<?php\\n\";\n            $output .= $compiler->cStyleComment(\" {$_funcNameCaching} \") . \"\\n\";\n            $output .= \"if (!function_exists('{$_funcNameCaching}')) {\\n\";\n            $output .= \"function {$_funcNameCaching} (Smarty_Internal_Template \\$_smarty_tpl,\\$params) {\\n\";\n            $output .= \"ob_start();\\n\";\n            $output .= $compiler->compileRequiredPlugins();\n            $output .= \"\\$_smarty_tpl->compiled->has_nocache_code = true;\\n\";\n            $output .= $_paramsCode;\n            $output .= \"foreach (\\$params as \\$key => \\$value) {\\n\\$_smarty_tpl->tpl_vars[\\$key] = new Smarty_Variable(\\$value, \\$_smarty_tpl->isRenderingCache);\\n}\\n\";\n            $output .= \"\\$params = var_export(\\$params, true);\\n\";\n            $output .= \"echo \\\"/*%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%*/<?php \";\n            $output .= \"\\\\\\$_smarty_tpl->smarty->ext->_tplFunction->saveTemplateVariables(\\\\\\$_smarty_tpl, '{$_name}');\\nforeach (\\$params as \\\\\\$key => \\\\\\$value) {\\n\\\\\\$_smarty_tpl->tpl_vars[\\\\\\$key] = new Smarty_Variable(\\\\\\$value, \\\\\\$_smarty_tpl->isRenderingCache);\\n}\\n?>\";\n            $output .= \"/*/%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%*/\\\";?>\";\n            $compiler->parser->current_buffer->append_subtree(\n                $compiler->parser,\n                new Smarty_Internal_ParseTree_Tag(\n                    $compiler->parser,\n                    $output\n                )\n            );\n            $compiler->parser->current_buffer->append_subtree($compiler->parser, $_functionCode);\n            $output = \"<?php echo \\\"/*%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%*/<?php \";\n            $output .= \"\\\\\\$_smarty_tpl->smarty->ext->_tplFunction->restoreTemplateVariables(\\\\\\$_smarty_tpl, '{$_name}');?>\\n\";\n            $output .= \"/*/%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%*/\\\";\\n?>\";\n            $output .= \"<?php echo str_replace('{$compiler->template->compiled->nocache_hash}', \\$_smarty_tpl->compiled->nocache_hash ?? '', ob_get_clean());\\n\";\n            $output .= \"}\\n}\\n\";\n            $output .= $compiler->cStyleComment(\"/ {$_funcName}_nocache \") . \"\\n\\n\";\n            $output .= \"?>\\n\";\n            $compiler->parser->current_buffer->append_subtree(\n                $compiler->parser,\n                new Smarty_Internal_ParseTree_Tag(\n                    $compiler->parser,\n                    $output\n                )\n            );\n            $_functionCode = new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                preg_replace_callback(\n                    \"/((<\\?php )?echo '\\/\\*%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%\\*\\/([\\S\\s]*?)\\/\\*\\/%%SmartyNocache:{$compiler->template->compiled->nocache_hash}%%\\*\\/';(\\?>\\n)?)/\",\n                    array($this, 'removeNocache'),\n                    $_functionCode->to_smarty_php($compiler->parser)\n                )\n            );\n        }\n        $compiler->parent_compiler->tpl_function[ $_name ][ 'call_name' ] = $_funcName;\n        $output = \"<?php\\n\";\n        $output .= $compiler->cStyleComment(\" {$_funcName} \") . \"\\n\";\n        $output .= \"if (!function_exists('{$_funcName}')) {\\n\";\n        $output .= \"function {$_funcName}(Smarty_Internal_Template \\$_smarty_tpl,\\$params) {\\n\";\n        $output .= $_paramsCode;\n        $output .= \"foreach (\\$params as \\$key => \\$value) {\\n\\$_smarty_tpl->tpl_vars[\\$key] = new Smarty_Variable(\\$value, \\$_smarty_tpl->isRenderingCache);\\n}\\n\";\n        $output .= $compiler->compileCheckPlugins(array_merge($compiler->required_plugins[ 'compiled' ],\n            $compiler->required_plugins[ 'nocache' ]));\n        $output .= \"?>\\n\";\n        $compiler->parser->current_buffer->append_subtree(\n            $compiler->parser,\n            new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                $output\n            )\n        );\n        $compiler->parser->current_buffer->append_subtree($compiler->parser, $_functionCode);\n        $output = \"<?php\\n}}\\n\";\n        $output .= $compiler->cStyleComment(\"/ {$_funcName} \") . \"\\n\\n\";\n        $output .= \"?>\\n\";\n        $compiler->parser->current_buffer->append_subtree(\n            $compiler->parser,\n            new Smarty_Internal_ParseTree_Tag(\n                $compiler->parser,\n                $output\n            )\n        );\n        $compiler->parent_compiler->blockOrFunctionCode .= $compiler->parser->current_buffer->to_smarty_php($compiler->parser);\n        // restore old buffer\n        $compiler->parser->current_buffer = $saved_data[ 1 ];\n        // restore old status\n        $compiler->restoreRequiredPlugins();\n        $compiler->template->compiled->has_nocache_code = $saved_data[ 2 ];\n        $compiler->template->caching = $saved_data[ 3 ];\n        return true;\n    }\n\n    /**\n     * Remove nocache code\n     *\n     * @param $match\n     *\n     * @return string\n     */\n    public function removeNocache($match)\n    {\n        $code =\n            preg_replace(\n                \"/((<\\?php )?echo '\\/\\*%%SmartyNocache:{$this->compiler->template->compiled->nocache_hash}%%\\*\\/)|(\\/\\*\\/%%SmartyNocache:{$this->compiler->template->compiled->nocache_hash}%%\\*\\/';(\\?>\\n)?)/\",\n                '',\n                $match[ 0 ]\n            );\n        $code = str_replace(array('\\\\\\'', '\\\\\\\\\\''), array('\\'', '\\\\\\''), $code);\n        return $code;\n    }\n}\n", "<?php\n/**\n * Smarty Internal Plugin Compile Include\n * Compiles the {include} tag\n *\n * @package    Smarty\n * @subpackage Compiler\n * @author     Uwe Tews\n */\n\n/**\n * Smarty Internal Plugin Compile Include Class\n *\n * @package    Smarty\n * @subpackage Compiler\n */\nclass Smarty_Internal_Compile_Include extends Smarty_Internal_CompileBase\n{\n    /**\n     * caching mode to create nocache code but no cache file\n     */\n    const CACHING_NOCACHE_CODE = 9999;\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $required_attributes = array('file');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $shorttag_order = array('file');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $option_flags = array('nocache', 'inline', 'caching');\n\n    /**\n     * Attribute definition: Overwrites base class.\n     *\n     * @var array\n     * @see Smarty_Internal_CompileBase\n     */\n    public $optional_attributes = array('_any');\n\n    /**\n     * Valid scope names\n     *\n     * @var array\n     */\n    public $valid_scopes = array(\n        'parent' => Smarty::SCOPE_PARENT, 'root' => Smarty::SCOPE_ROOT,\n        'global' => Smarty::SCOPE_GLOBAL, 'tpl_root' => Smarty::SCOPE_TPL_ROOT,\n        'smarty' => Smarty::SCOPE_SMARTY\n    );\n\n    /**\n     * Compiles code for the {include} tag\n     *\n     * @param array                                  $args     array with attributes from parser\n     * @param Smarty_Internal_SmartyTemplateCompiler $compiler compiler object\n     *\n     * @return string\n     * @throws \\Exception\n     * @throws \\SmartyCompilerException\n     * @throws \\SmartyException\n     */\n    public function compile($args, Smarty_Internal_SmartyTemplateCompiler $compiler)\n    {\n        $uid = $t_hash = null;\n        // check and get attributes\n        $_attr = $this->getAttributes($compiler, $args);\n        $fullResourceName = $source_resource = $_attr[ 'file' ];\n        $variable_template = false;\n        $cache_tpl = false;\n        // parse resource_name\n        if (preg_match('/^([\\'\"])(([A-Za-z0-9_\\-]{2,})[:])?(([^$()]+)|(.+))\\1$/', $source_resource, $match)) {\n            $type = !empty($match[ 3 ]) ? $match[ 3 ] : $compiler->template->smarty->default_resource_type;\n            $name = !empty($match[ 5 ]) ? $match[ 5 ] : $match[ 6 ];\n            $handler = Smarty_Resource::load($compiler->smarty, $type);\n            if ($handler->recompiled || $handler->uncompiled) {\n                $variable_template = true;\n            }\n            if (!$variable_template) {\n                if ($type !== 'string') {\n                    $fullResourceName = \"{$type}:{$name}\";\n                    $compiled = $compiler->parent_compiler->template->compiled;\n                    if (isset($compiled->includes[ $fullResourceName ])) {\n                        $compiled->includes[ $fullResourceName ]++;\n                        $cache_tpl = true;\n                    } else {\n                        if (\"{$compiler->template->source->type}:{$compiler->template->source->name}\" ==\n                            $fullResourceName\n                        ) {\n                            // recursive call of current template\n                            $compiled->includes[ $fullResourceName ] = 2;\n                            $cache_tpl = true;\n                        } else {\n                            $compiled->includes[ $fullResourceName ] = 1;\n                        }\n                    }\n                    $fullResourceName = $match[ 1 ] . $fullResourceName . $match[ 1 ];\n                }\n            }\n            if (empty($match[ 5 ])) {\n                $variable_template = true;\n            }\n        } else {\n            $variable_template = true;\n        }\n        // scope setup\n        $_scope = $compiler->convertScope($_attr, $this->valid_scopes);\n        // set flag to cache subtemplate object when called within loop or template name is variable.\n        if ($cache_tpl || $variable_template || $compiler->loopNesting > 0) {\n            $_cache_tpl = 'true';\n        } else {\n            $_cache_tpl = 'false';\n        }\n        // assume caching is off\n        $_caching = Smarty::CACHING_OFF;\n        $call_nocache = $compiler->tag_nocache || $compiler->nocache;\n        // caching was on and {include} is not in nocache mode\n        if ($compiler->template->caching && !$compiler->nocache && !$compiler->tag_nocache) {\n            $_caching = self::CACHING_NOCACHE_CODE;\n        }\n        // flag if included template code should be merged into caller\n        $merge_compiled_includes = ($compiler->smarty->merge_compiled_includes || $_attr[ 'inline' ] === true) &&\n                                   !$compiler->template->source->handler->recompiled;\n        if ($merge_compiled_includes) {\n            // variable template name ?\n            if ($variable_template) {\n                $merge_compiled_includes = false;\n            }\n            // variable compile_id?\n            if (isset($_attr[ 'compile_id' ]) && $compiler->isVariable($_attr[ 'compile_id' ])) {\n                $merge_compiled_includes = false;\n            }\n        }\n        /*\n        * if the {include} tag provides individual parameter for caching or compile_id\n        * the subtemplate must not be included into the common cache file and is treated like\n        * a call in nocache mode.\n        *\n        */\n        if ($_attr[ 'nocache' ] !== true && $_attr[ 'caching' ]) {\n            $_caching = $_new_caching = (int)$_attr[ 'caching' ];\n            $call_nocache = true;\n        } else {\n            $_new_caching = Smarty::CACHING_LIFETIME_CURRENT;\n        }\n        if (isset($_attr[ 'cache_lifetime' ])) {\n            $_cache_lifetime = $_attr[ 'cache_lifetime' ];\n            $call_nocache = true;\n            $_caching = $_new_caching;\n        } else {\n            $_cache_lifetime = '$_smarty_tpl->cache_lifetime';\n        }\n        if (isset($_attr[ 'cache_id' ])) {\n            $_cache_id = $_attr[ 'cache_id' ];\n            $call_nocache = true;\n            $_caching = $_new_caching;\n        } else {\n            $_cache_id = '$_smarty_tpl->cache_id';\n        }\n        if (isset($_attr[ 'compile_id' ])) {\n            $_compile_id = $_attr[ 'compile_id' ];\n        } else {\n            $_compile_id = '$_smarty_tpl->compile_id';\n        }\n        // if subtemplate will be called in nocache mode do not merge\n        if ($compiler->template->caching && $call_nocache) {\n            $merge_compiled_includes = false;\n        }\n        // assign attribute\n        if (isset($_attr[ 'assign' ])) {\n            // output will be stored in a smarty variable instead of being displayed\n            if ($_assign = $compiler->getId($_attr[ 'assign' ])) {\n                $_assign = \"'{$_assign}'\";\n                if ($compiler->tag_nocache || $compiler->nocache || $call_nocache) {\n                    // create nocache var to make it know for further compiling\n                    $compiler->setNocacheInVariable($_attr[ 'assign' ]);\n                }\n            } else {\n                $_assign = $_attr[ 'assign' ];\n            }\n        }\n        $has_compiled_template = false;\n        if ($merge_compiled_includes) {\n            $c_id = isset($_attr[ 'compile_id' ]) ? $_attr[ 'compile_id' ] : $compiler->template->compile_id;\n            // we must observe different compile_id and caching\n            $t_hash = sha1($c_id . ($_caching ? '--caching' : '--nocaching'));\n            $compiler->smarty->allow_ambiguous_resources = true;\n            /* @var Smarty_Internal_Template $tpl */\n            $tpl = new $compiler->smarty->template_class(\n                trim($fullResourceName, '\"\\''),\n                $compiler->smarty,\n                $compiler->template,\n                $compiler->template->cache_id,\n                $c_id,\n                $_caching\n            );\n            $uid = $tpl->source->type . $tpl->source->uid;\n            if (!isset($compiler->parent_compiler->mergedSubTemplatesData[ $uid ][ $t_hash ])) {\n                $has_compiled_template = $this->compileInlineTemplate($compiler, $tpl, $t_hash);\n            } else {\n                $has_compiled_template = true;\n            }\n            unset($tpl);\n        }\n        // delete {include} standard attributes\n        unset($_attr[ 'file' ], $_attr[ 'assign' ], $_attr[ 'cache_id' ], $_attr[ 'compile_id' ], $_attr[ 'cache_lifetime' ], $_attr[ 'nocache' ], $_attr[ 'caching' ], $_attr[ 'scope' ], $_attr[ 'inline' ]);\n        // remaining attributes must be assigned as smarty variable\n        $_vars = 'array()';\n        if (!empty($_attr)) {\n            $_pairs = array();\n            // create variables\n            foreach ($_attr as $key => $value) {\n                $_pairs[] = \"'$key'=>$value\";\n            }\n            $_vars = 'array(' . join(',', $_pairs) . ')';\n        }\n        $update_compile_id = $compiler->template->caching && !$compiler->tag_nocache && !$compiler->nocache &&\n                             $_compile_id !== '$_smarty_tpl->compile_id';\n        if ($has_compiled_template && !$call_nocache) {\n            $_output = \"<?php\\n\";\n            if ($update_compile_id) {\n                $_output .= $compiler->makeNocacheCode(\"\\$_compile_id_save[] = \\$_smarty_tpl->compile_id;\\n\\$_smarty_tpl->compile_id = {$_compile_id};\\n\");\n            }\n            if (!empty($_attr) && $_caching === 9999 && $compiler->template->caching) {\n                $_vars_nc = \"foreach ($_vars as \\$ik => \\$iv) {\\n\";\n                $_vars_nc .= \"\\$_smarty_tpl->tpl_vars[\\$ik] =  new Smarty_Variable(\\$iv);\\n\";\n                $_vars_nc .= \"}\\n\";\n                $_output .= substr($compiler->processNocacheCode('<?php ' . $_vars_nc . \"?>\\n\", true), 6, -3);\n            }\n            if (isset($_assign)) {\n                $_output .= \"ob_start();\\n\";\n            }\n            $_output .= \"\\$_smarty_tpl->_subTemplateRender({$fullResourceName}, {$_cache_id}, {$_compile_id}, {$_caching}, {$_cache_lifetime}, {$_vars}, {$_scope}, {$_cache_tpl}, '{$compiler->parent_compiler->mergedSubTemplatesData[$uid][$t_hash]['uid']}', '{$compiler->parent_compiler->mergedSubTemplatesData[$uid][$t_hash]['func']}');\\n\";\n            if (isset($_assign)) {\n                $_output .= \"\\$_smarty_tpl->assign({$_assign}, ob_get_clean());\\n\";\n            }\n            if ($update_compile_id) {\n                $_output .= $compiler->makeNocacheCode(\"\\$_smarty_tpl->compile_id = array_pop(\\$_compile_id_save);\\n\");\n            }\n            $_output .= \"?>\";\n            return $_output;\n        }\n        if ($call_nocache) {\n            $compiler->tag_nocache = true;\n        }\n        $_output = \"<?php \";\n        if ($update_compile_id) {\n            $_output .= \"\\$_compile_id_save[] = \\$_smarty_tpl->compile_id;\\n\\$_smarty_tpl->compile_id = {$_compile_id};\\n\";\n        }\n        // was there an assign attribute\n        if (isset($_assign)) {\n            $_output .= \"ob_start();\\n\";\n        }\n        $_output .= \"\\$_smarty_tpl->_subTemplateRender({$fullResourceName}, $_cache_id, $_compile_id, $_caching, $_cache_lifetime, $_vars, $_scope, {$_cache_tpl});\\n\";\n        if (isset($_assign)) {\n            $_output .= \"\\$_smarty_tpl->assign({$_assign}, ob_get_clean());\\n\";\n        }\n        if ($update_compile_id) {\n            $_output .= \"\\$_smarty_tpl->compile_id = array_pop(\\$_compile_id_save);\\n\";\n        }\n        $_output .= \"?>\";\n        return $_output;\n    }\n\n    /**\n     * Compile inline sub template\n     *\n     * @param \\Smarty_Internal_SmartyTemplateCompiler $compiler\n     * @param \\Smarty_Internal_Template               $tpl\n     * @param string                                  $t_hash\n     *\n     * @return bool\n     * @throws \\Exception\n     * @throws \\SmartyException\n     */\n    public function compileInlineTemplate(\n        Smarty_Internal_SmartyTemplateCompiler $compiler,\n        Smarty_Internal_Template $tpl,\n        $t_hash\n    ) {\n        $uid = $tpl->source->type . $tpl->source->uid;\n        if (!($tpl->source->handler->uncompiled) && $tpl->source->exists) {\n            $compiler->parent_compiler->mergedSubTemplatesData[ $uid ][ $t_hash ][ 'uid' ] = $tpl->source->uid;\n            if (isset($compiler->template->inheritance)) {\n                $tpl->inheritance = clone $compiler->template->inheritance;\n            }\n            $tpl->compiled = new Smarty_Template_Compiled();\n            $tpl->compiled->nocache_hash = $compiler->parent_compiler->template->compiled->nocache_hash;\n            $tpl->loadCompiler();\n            // save unique function name\n            $compiler->parent_compiler->mergedSubTemplatesData[ $uid ][ $t_hash ][ 'func' ] =\n            $tpl->compiled->unifunc = 'content_' . str_replace(array('.', ','), '_', uniqid('', true));\n            // make sure whole chain gets compiled\n            $tpl->mustCompile = true;\n            $compiler->parent_compiler->mergedSubTemplatesData[ $uid ][ $t_hash ][ 'nocache_hash' ] =\n                $tpl->compiled->nocache_hash;\n            if ($tpl->source->type === 'file') {\n                $sourceInfo = $tpl->source->filepath;\n            } else {\n                $basename = $tpl->source->handler->getBasename($tpl->source);\n                $sourceInfo = $tpl->source->type . ':' .\n                              ($basename ? $basename : $tpl->source->name);\n            }\n            // get compiled code\n            $compiled_code = \"<?php\\n\\n\";\n            $compiled_code .= $compiler->cStyleComment(\" Start inline template \\\"{$sourceInfo}\\\" =============================\") . \"\\n\";\n            $compiled_code .= \"function {$tpl->compiled->unifunc} (Smarty_Internal_Template \\$_smarty_tpl) {\\n\";\n            $compiled_code .= \"?>\\n\" . $tpl->compiler->compileTemplateSource($tpl, null, $compiler->parent_compiler);\n            $compiled_code .= \"<?php\\n\";\n            $compiled_code .= \"}\\n?>\\n\";\n            $compiled_code .= $tpl->compiler->postFilter($tpl->compiler->blockOrFunctionCode);\n            $compiled_code .= \"<?php\\n\\n\";\n            $compiled_code .= $compiler->cStyleComment(\" End inline template \\\"{$sourceInfo}\\\" =============================\") . \"\\n\";\n            $compiled_code .= '?>';\n            unset($tpl->compiler);\n            if ($tpl->compiled->has_nocache_code) {\n                // replace nocache_hash\n                $compiled_code =\n                    str_replace(\n                        \"{$tpl->compiled->nocache_hash}\",\n                        $compiler->template->compiled->nocache_hash,\n                        $compiled_code\n                    );\n                $compiler->template->compiled->has_nocache_code = true;\n            }\n            $compiler->parent_compiler->mergedSubTemplatesCode[ $tpl->compiled->unifunc ] = $compiled_code;\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "<?php\n/**\n * Smarty Internal Plugin Config File Compiler\n * This is the config file compiler class. It calls the lexer and parser to\n * perform the compiling.\n *\n * @package    Smarty\n * @subpackage Config\n * @author     Uwe Tews\n */\n\n/**\n * Main config file compiler class\n *\n * @package    Smarty\n * @subpackage Config\n */\nclass Smarty_Internal_Config_File_Compiler\n{\n    /**\n     * Lexer class name\n     *\n     * @var string\n     */\n    public $lexer_class;\n\n    /**\n     * Parser class name\n     *\n     * @var string\n     */\n    public $parser_class;\n\n    /**\n     * Lexer object\n     *\n     * @var object\n     */\n    public $lex;\n\n    /**\n     * Parser object\n     *\n     * @var object\n     */\n    public $parser;\n\n    /**\n     * Smarty object\n     *\n     * @var Smarty object\n     */\n    public $smarty;\n\n    /**\n     * Smarty object\n     *\n     * @var Smarty_Internal_Template object\n     */\n    public $template;\n\n    /**\n     * Compiled config data sections and variables\n     *\n     * @var array\n     */\n    public $config_data = array();\n\n    /**\n     * compiled config data must always be written\n     *\n     * @var bool\n     */\n    public $write_compiled_code = true;\n\n    /**\n     * Initialize compiler\n     *\n     * @param string $lexer_class  class name\n     * @param string $parser_class class name\n     * @param Smarty $smarty       global instance\n     */\n    public function __construct($lexer_class, $parser_class, Smarty $smarty)\n    {\n        $this->smarty = $smarty;\n        // get required plugins\n        $this->lexer_class = $lexer_class;\n        $this->parser_class = $parser_class;\n        $this->smarty = $smarty;\n        $this->config_data[ 'sections' ] = array();\n        $this->config_data[ 'vars' ] = array();\n    }\n\n    /**\n     * Method to compile Smarty config source.\n     *\n     * @param Smarty_Internal_Template $template\n     *\n     * @return bool true if compiling succeeded, false if it failed\n     * @throws \\SmartyException\n     */\n    public function compileTemplate(Smarty_Internal_Template $template)\n    {\n        $this->template = $template;\n        $this->template->compiled->file_dependency[ $this->template->source->uid ] =\n            array(\n                $this->template->source->filepath,\n                $this->template->source->getTimeStamp(),\n                $this->template->source->type\n            );\n        if ($this->smarty->debugging) {\n            if (!isset($this->smarty->_debug)) {\n                $this->smarty->_debug = new Smarty_Internal_Debug();\n            }\n            $this->smarty->_debug->start_compile($this->template);\n        }\n        // init the lexer/parser to compile the config file\n        /* @var Smarty_Internal_ConfigFileLexer $this->lex */\n        $this->lex = new $this->lexer_class(\n            str_replace(\n                array(\n                    \"\\r\\n\",\n                    \"\\r\"\n                ),\n                \"\\n\",\n                $template->source->getContent()\n            ) . \"\\n\",\n            $this\n        );\n        /* @var Smarty_Internal_ConfigFileParser $this->parser */\n        $this->parser = new $this->parser_class($this->lex, $this);\n        if (function_exists('mb_internal_encoding')\n            && function_exists('ini_get')\n            && ((int)ini_get('mbstring.func_overload')) & 2\n        ) {\n            $mbEncoding = mb_internal_encoding();\n            mb_internal_encoding('ASCII');\n        } else {\n            $mbEncoding = null;\n        }\n        if ($this->smarty->_parserdebug) {\n            $this->parser->PrintTrace();\n        }\n        // get tokens from lexer and parse them\n        while ($this->lex->yylex()) {\n            if ($this->smarty->_parserdebug) {\n                echo \"<br>Parsing  {$this->parser->yyTokenName[$this->lex->token]} Token {$this->lex->value} Line {$this->lex->line} \\n\";\n            }\n            $this->parser->doParse($this->lex->token, $this->lex->value);\n        }\n        // finish parsing process\n        $this->parser->doParse(0, 0);\n        if ($mbEncoding) {\n            mb_internal_encoding($mbEncoding);\n        }\n        if ($this->smarty->debugging) {\n            $this->smarty->_debug->end_compile($this->template);\n        }\n        // template header code\n        $template_header = sprintf(\n            \"<?php /* Smarty version %s, created on %s\\n         compiled from '%s' */ ?>\\n\",\n            Smarty::SMARTY_VERSION,\n            date(\"Y-m-d H:i:s\"),\n            str_replace('*/', '* /' , $this->template->source->filepath)\n        );\n        $code = '<?php $_smarty_tpl->smarty->ext->configLoad->_loadConfigVars($_smarty_tpl, ' .\n                var_export($this->config_data, true) . '); ?>';\n        return $template_header . $this->template->smarty->ext->_codeFrame->create($this->template, $code);\n    }\n\n    /**\n     * display compiler error messages without dying\n     * If parameter $args is empty it is a parser detected syntax error.\n     * In this case the parser is called to obtain information about expected tokens.\n     * If parameter $args contains a string this is used as error message\n     *\n     * @param string $args individual error message or null\n     *\n     * @throws SmartyCompilerException\n     */\n    public function trigger_config_file_error($args = null)\n    {\n        // get config source line which has error\n        $line = $this->lex->line;\n        if (isset($args)) {\n            // $line--;\n        }\n        $match = preg_split(\"/\\n/\", $this->lex->data);\n        $error_text =\n            \"Syntax error in config file '{$this->template->source->filepath}' on line {$line} '{$match[$line - 1]}' \";\n        if (isset($args)) {\n            // individual error message\n            $error_text .= $args;\n        } else {\n            // expected token from parser\n            foreach ($this->parser->yy_get_expected_tokens($this->parser->yymajor) as $token) {\n                $exp_token = $this->parser->yyTokenName[ $token ];\n                if (isset($this->lex->smarty_token_names[ $exp_token ])) {\n                    // token type from lexer\n                    $expect[] = '\"' . $this->lex->smarty_token_names[ $exp_token ] . '\"';\n                } else {\n                    // otherwise internal token name\n                    $expect[] = $this->parser->yyTokenName[ $token ];\n                }\n            }\n            // output parser error message\n            $error_text .= ' - Unexpected \"' . $this->lex->value . '\", expected one of: ' . implode(' , ', $expect);\n        }\n        throw new SmartyCompilerException($error_text);\n    }\n}\n", "<?php\n/**\n * Smarty Internal Extension\n * This file contains the Smarty template extension to create a code frame\n *\n * @package    Smarty\n * @subpackage Template\n * @author     Uwe Tews\n */\n\n/**\n * Class Smarty_Internal_Extension_CodeFrame\n * Create code frame for compiled and cached templates\n */\nclass Smarty_Internal_Runtime_CodeFrame\n{\n    /**\n     * Create code frame for compiled and cached templates\n     *\n     * @param Smarty_Internal_Template              $_template\n     * @param string                                $content   optional template content\n     * @param string                                $functions compiled template function and block code\n     * @param bool                                  $cache     flag for cache file\n     * @param \\Smarty_Internal_TemplateCompilerBase $compiler\n     *\n     * @return string\n     */\n    public function create(\n        Smarty_Internal_Template $_template,\n        $content = '',\n        $functions = '',\n        $cache = false,\n        Smarty_Internal_TemplateCompilerBase $compiler = null\n    ) {\n        // build property code\n        $properties[ 'version' ] = Smarty::SMARTY_VERSION;\n        $properties[ 'unifunc' ] = 'content_' . str_replace(array('.', ','), '_', uniqid('', true));\n        if (!$cache) {\n            $properties[ 'has_nocache_code' ] = $_template->compiled->has_nocache_code;\n            $properties[ 'file_dependency' ] = $_template->compiled->file_dependency;\n            $properties[ 'includes' ] = $_template->compiled->includes;\n        } else {\n            $properties[ 'has_nocache_code' ] = $_template->cached->has_nocache_code;\n            $properties[ 'file_dependency' ] = $_template->cached->file_dependency;\n            $properties[ 'cache_lifetime' ] = $_template->cache_lifetime;\n        }\n        $output = sprintf(\n\t\t\t\"<?php\\n/* Smarty version %s, created on %s\\n  from '%s' */\\n\\n\",\n            $properties[ 'version' ],\n\t        date(\"Y-m-d H:i:s\"),\n\t        str_replace('*/', '* /', $_template->source->filepath)\n        );\n        $output .= \"/* @var Smarty_Internal_Template \\$_smarty_tpl */\\n\";\n        $dec = \"\\$_smarty_tpl->_decodeProperties(\\$_smarty_tpl, \" . var_export($properties, true) . ',' .\n               ($cache ? 'true' : 'false') . ')';\n        $output .= \"if ({$dec}) {\\n\";\n        $output .= \"function {$properties['unifunc']} (Smarty_Internal_Template \\$_smarty_tpl) {\\n\";\n        if (!$cache && !empty($compiler->tpl_function)) {\n            $output .= '$_smarty_tpl->smarty->ext->_tplFunction->registerTplFunctions($_smarty_tpl, ';\n            $output .= var_export($compiler->tpl_function, true);\n            $output .= \");\\n\";\n        }\n        if ($cache && isset($_template->smarty->ext->_tplFunction)) {\n            $output .= \"\\$_smarty_tpl->smarty->ext->_tplFunction->registerTplFunctions(\\$_smarty_tpl, \" .\n                       var_export($_template->smarty->ext->_tplFunction->getTplFunction($_template), true) . \");\\n\";\n        }\n        $output .= \"?>\";\n        $output .= $content;\n        $output .= \"<?php }\\n?>\";\n        $output .= $functions;\n        $output .= \"<?php }\\n\";\n        // remove unneeded PHP tags\n        if (preg_match('/\\s*\\?>[\\n]?<\\?php\\s*/', $output)) {\n            $curr_split = preg_split(\n                '/\\s*\\?>[\\n]?<\\?php\\s*/',\n                $output\n            );\n            preg_match_all(\n                '/\\s*\\?>[\\n]?<\\?php\\s*/',\n                $output,\n                $curr_parts\n            );\n            $output = '';\n            foreach ($curr_split as $idx => $curr_output) {\n                $output .= $curr_output;\n                if (isset($curr_parts[ 0 ][ $idx ])) {\n                    $output .= \"\\n\";\n                }\n            }\n        }\n        if (preg_match('/\\?>\\s*$/', $output)) {\n            $curr_split = preg_split(\n                '/\\?>\\s*$/',\n                $output\n            );\n            $output = '';\n            foreach ($curr_split as $idx => $curr_output) {\n                $output .= $curr_output;\n            }\n        }\n        return $output;\n    }\n}\n", "<?php\n/**\n * Smarty Internal Plugin Smarty Template Compiler Base\n * This file contains the basic classes and methods for compiling Smarty templates with lexer/parser\n *\n * @package    Smarty\n * @subpackage Compiler\n * @author     Uwe Tews\n */\n\n/**\n * Main abstract compiler class\n *\n * @package    Smarty\n * @subpackage Compiler\n *\n * @property Smarty_Internal_SmartyTemplateCompiler $prefixCompiledCode  = ''\n * @property Smarty_Internal_SmartyTemplateCompiler $postfixCompiledCode = ''\n * @method   registerPostCompileCallback($callback, $parameter = array(), $key = null, $replace = false)\n * @method   unregisterPostCompileCallback($key)\n */\nabstract class Smarty_Internal_TemplateCompilerBase\n{\n    /**\n     * compile tag objects cache\n     *\n     * @var array\n     */\n    public static $_tag_objects = array();\n\n    /**\n     * counter for prefix variable number\n     *\n     * @var int\n     */\n    public static $prefixVariableNumber = 0;\n\n    /**\n     * Smarty object\n     *\n     * @var Smarty\n     */\n    public $smarty = null;\n\n    /**\n     * Parser object\n     *\n     * @var Smarty_Internal_Templateparser\n     */\n    public $parser = null;\n\n    /**\n     * hash for nocache sections\n     *\n     * @var mixed\n     */\n    public $nocache_hash = null;\n\n    /**\n     * suppress generation of nocache code\n     *\n     * @var bool\n     */\n    public $suppressNocacheProcessing = false;\n\n    /**\n     * caching enabled (copied from template object)\n     *\n     * @var int\n     */\n    public $caching = 0;\n\n    /**\n     * tag stack\n     *\n     * @var array\n     */\n    public $_tag_stack = array();\n\n    /**\n     * tag stack count\n     *\n     * @var array\n     */\n    public $_tag_stack_count = array();\n\n    /**\n     * Plugins used by template\n     *\n     * @var array\n     */\n    public $required_plugins = array('compiled' => array(), 'nocache' => array());\n\n    /**\n     * Required plugins stack\n     *\n     * @var array\n     */\n    public $required_plugins_stack = array();\n\n    /**\n     * current template\n     *\n     * @var Smarty_Internal_Template\n     */\n    public $template = null;\n\n    /**\n     * merged included sub template data\n     *\n     * @var array\n     */\n    public $mergedSubTemplatesData = array();\n\n    /**\n     * merged sub template code\n     *\n     * @var array\n     */\n    public $mergedSubTemplatesCode = array();\n\n    /**\n     * collected template properties during compilation\n     *\n     * @var array\n     */\n    public $templateProperties = array();\n\n    /**\n     * source line offset for error messages\n     *\n     * @var int\n     */\n    public $trace_line_offset = 0;\n\n    /**\n     * trace uid\n     *\n     * @var string\n     */\n    public $trace_uid = '';\n\n    /**\n     * trace file path\n     *\n     * @var string\n     */\n    public $trace_filepath = '';\n\n    /**\n     * stack for tracing file and line of nested {block} tags\n     *\n     * @var array\n     */\n    public $trace_stack = array();\n\n    /**\n     * plugins loaded by default plugin handler\n     *\n     * @var array\n     */\n    public $default_handler_plugins = array();\n\n    /**\n     * saved preprocessed modifier list\n     *\n     * @var mixed\n     */\n    public $default_modifier_list = null;\n\n    /**\n     * force compilation of complete template as nocache\n     *\n     * @var boolean\n     */\n    public $forceNocache = false;\n\n    /**\n     * flag if compiled template file shall we written\n     *\n     * @var bool\n     */\n    public $write_compiled_code = true;\n\n    /**\n     * Template functions\n     *\n     * @var array\n     */\n    public $tpl_function = array();\n\n    /**\n     * called sub functions from template function\n     *\n     * @var array\n     */\n    public $called_functions = array();\n\n    /**\n     * compiled template or block function code\n     *\n     * @var string\n     */\n    public $blockOrFunctionCode = '';\n\n    /**\n     * flags for used modifier plugins\n     *\n     * @var array\n     */\n    public $modifier_plugins = array();\n\n    /**\n     * type of already compiled modifier\n     *\n     * @var array\n     */\n    public $known_modifier_type = array();\n\n    /**\n     * parent compiler object for merged subtemplates and template functions\n     *\n     * @var Smarty_Internal_TemplateCompilerBase\n     */\n    public $parent_compiler = null;\n\n    /**\n     * Flag true when compiling nocache section\n     *\n     * @var bool\n     */\n    public $nocache = false;\n\n    /**\n     * Flag true when tag is compiled as nocache\n     *\n     * @var bool\n     */\n    public $tag_nocache = false;\n\n    /**\n     * Compiled tag prefix code\n     *\n     * @var array\n     */\n    public $prefix_code = array();\n\n    /**\n     * used prefix variables by current compiled tag\n     *\n     * @var array\n     */\n    public $usedPrefixVariables = array();\n\n    /**\n     * Prefix code  stack\n     *\n     * @var array\n     */\n    public $prefixCodeStack = array();\n\n    /**\n     * Tag has compiled code\n     *\n     * @var bool\n     */\n    public $has_code = false;\n\n    /**\n     * A variable string was compiled\n     *\n     * @var bool\n     */\n    public $has_variable_string = false;\n\n    /**\n     * Stack for {setfilter} {/setfilter}\n     *\n     * @var array\n     */\n    public $variable_filter_stack = array();\n\n    /**\n     * variable filters for {setfilter} {/setfilter}\n     *\n     * @var array\n     */\n    public $variable_filters = array();\n\n    /**\n     * Nesting count of looping tags like {foreach}, {for}, {section}, {while}\n     *\n     * @var int\n     */\n    public $loopNesting = 0;\n\n    /**\n     * Strip preg pattern\n     *\n     * @var string\n     */\n    public $stripRegEx = '![\\t ]*[\\r\\n]+[\\t ]*!';\n\n    /**\n     * plugin search order\n     *\n     * @var array\n     */\n    public $plugin_search_order = array(\n        'function',\n        'block',\n        'compiler',\n        'class'\n    );\n\n    /**\n     * General storage area for tag compiler plugins\n     *\n     * @var array\n     */\n    public $_cache = array();\n\n    /**\n     * Lexer preg pattern for left delimiter\n     *\n     * @var string\n     */\n    private $ldelPreg = '[{]';\n\n    /**\n     * Lexer preg pattern for right delimiter\n     *\n     * @var string\n     */\n    private $rdelPreg = '[}]';\n\n    /**\n     * Length of right delimiter\n     *\n     * @var int\n     */\n    private $rdelLength = 0;\n\n    /**\n     * Length of left delimiter\n     *\n     * @var int\n     */\n    private $ldelLength = 0;\n\n    /**\n     * Lexer preg pattern for user literals\n     *\n     * @var string\n     */\n    private $literalPreg = '';\n\n    /**\n     * Initialize compiler\n     *\n     * @param Smarty $smarty global instance\n     */\n    public function __construct(Smarty $smarty)\n    {\n        $this->smarty = $smarty;\n        $this->nocache_hash = str_replace(\n            array(\n                '.',\n                ','\n            ),\n            '_',\n            uniqid(mt_rand(), true)\n        );\n    }\n\n    /**\n     * Method to compile a Smarty template\n     *\n     * @param Smarty_Internal_Template                  $template template object to compile\n     * @param bool                                      $nocache  true is shall be compiled in nocache mode\n     * @param null|Smarty_Internal_TemplateCompilerBase $parent_compiler\n     *\n     * @return bool true if compiling succeeded, false if it failed\n     * @throws \\Exception\n     */\n    public function compileTemplate(\n        Smarty_Internal_Template $template,\n        $nocache = null,\n        Smarty_Internal_TemplateCompilerBase $parent_compiler = null\n    ) {\n        // get code frame of compiled template\n        $_compiled_code = $template->smarty->ext->_codeFrame->create(\n            $template,\n            $this->compileTemplateSource(\n                $template,\n                $nocache,\n                $parent_compiler\n            ),\n            $this->postFilter($this->blockOrFunctionCode) .\n            join('', $this->mergedSubTemplatesCode),\n            false,\n            $this\n        );\n        return $_compiled_code;\n    }\n\n    /**\n     * Compile template source and run optional post filter\n     *\n     * @param \\Smarty_Internal_Template             $template\n     * @param null|bool                             $nocache flag if template must be compiled in nocache mode\n     * @param \\Smarty_Internal_TemplateCompilerBase $parent_compiler\n     *\n     * @return string\n     * @throws \\Exception\n     */\n    public function compileTemplateSource(\n        Smarty_Internal_Template $template,\n        $nocache = null,\n        Smarty_Internal_TemplateCompilerBase $parent_compiler = null\n    ) {\n        try {\n            // save template object in compiler class\n            $this->template = $template;\n            if (property_exists($this->template->smarty, 'plugin_search_order')) {\n                $this->plugin_search_order = $this->template->smarty->plugin_search_order;\n            }\n            if ($this->smarty->debugging) {\n                if (!isset($this->smarty->_debug)) {\n                    $this->smarty->_debug = new Smarty_Internal_Debug();\n                }\n                $this->smarty->_debug->start_compile($this->template);\n            }\n            $this->parent_compiler = $parent_compiler ? $parent_compiler : $this;\n            $nocache = isset($nocache) ? $nocache : false;\n            if (empty($template->compiled->nocache_hash)) {\n                $template->compiled->nocache_hash = $this->nocache_hash;\n            } else {\n                $this->nocache_hash = $template->compiled->nocache_hash;\n            }\n            $this->caching = $template->caching;\n            // flag for nocache sections\n            $this->nocache = $nocache;\n            $this->tag_nocache = false;\n            // reset has nocache code flag\n            $this->template->compiled->has_nocache_code = false;\n            $this->has_variable_string = false;\n            $this->prefix_code = array();\n            // add file dependency\n            if ($this->smarty->merge_compiled_includes || $this->template->source->handler->checkTimestamps()) {\n                $this->parent_compiler->template->compiled->file_dependency[ $this->template->source->uid ] =\n                    array(\n                        $this->template->source->filepath,\n                        $this->template->source->getTimeStamp(),\n                        $this->template->source->type,\n                    );\n            }\n            $this->smarty->_current_file = $this->template->source->filepath;\n            // get template source\n            if (!empty($this->template->source->components)) {\n                // we have array of inheritance templates by extends: resource\n                // generate corresponding source code sequence\n                $_content =\n                    Smarty_Internal_Compile_Extends::extendsSourceArrayCode($this->template);\n            } else {\n                // get template source\n                $_content = $this->template->source->getContent();\n            }\n            $_compiled_code = $this->postFilter($this->doCompile($this->preFilter($_content), true));\n            if (!empty($this->required_plugins[ 'compiled' ]) || !empty($this->required_plugins[ 'nocache' ])) {\n                $_compiled_code = '<?php ' . $this->compileRequiredPlugins() . \"?>\\n\" . $_compiled_code;\n            }\n        } catch (Exception $e) {\n            if ($this->smarty->debugging) {\n                $this->smarty->_debug->end_compile($this->template);\n            }\n            $this->_tag_stack = array();\n            // free memory\n            $this->parent_compiler = null;\n            $this->template = null;\n            $this->parser = null;\n            throw $e;\n        }\n        if ($this->smarty->debugging) {\n            $this->smarty->_debug->end_compile($this->template);\n        }\n        $this->parent_compiler = null;\n        $this->parser = null;\n        return $_compiled_code;\n    }\n\n    /**\n     * Optionally process compiled code by post filter\n     *\n     * @param string $code compiled code\n     *\n     * @return string\n     * @throws \\SmartyException\n     */\n    public function postFilter($code)\n    {\n        // run post filter if on code\n        if (!empty($code)\n            && (isset($this->smarty->autoload_filters[ 'post' ]) || isset($this->smarty->registered_filters[ 'post' ]))\n        ) {\n            return $this->smarty->ext->_filterHandler->runFilter('post', $code, $this->template);\n        } else {\n            return $code;\n        }\n    }\n\n    /**\n     * Run optional prefilter\n     *\n     * @param string $_content template source\n     *\n     * @return string\n     * @throws \\SmartyException\n     */\n    public function preFilter($_content)\n    {\n        // run pre filter if required\n        if ($_content !== ''\n            && ((isset($this->smarty->autoload_filters[ 'pre' ]) || isset($this->smarty->registered_filters[ 'pre' ])))\n        ) {\n            return $this->smarty->ext->_filterHandler->runFilter('pre', $_content, $this->template);\n        } else {\n            return $_content;\n        }\n    }\n\n    /**\n     * Compile Tag\n     * This is a call back from the lexer/parser\n     *\n     * Save current prefix code\n     * Compile tag\n     * Merge tag prefix code with saved one\n     * (required nested tags in attributes)\n     *\n     * @param string $tag       tag name\n     * @param array  $args      array with tag attributes\n     * @param array  $parameter array with compilation parameter\n     *\n     * @throws SmartyCompilerException\n     * @throws SmartyException\n     * @return string compiled code\n     */\n    public function compileTag($tag, $args, $parameter = array())\n    {\n        $this->prefixCodeStack[] = $this->prefix_code;\n        $this->prefix_code = array();\n        $result = $this->compileTag2($tag, $args, $parameter);\n        $this->prefix_code = array_merge($this->prefix_code, array_pop($this->prefixCodeStack));\n        return $result;\n    }\n\n    /**\n     * compile variable\n     *\n     * @param string $variable\n     *\n     * @return string\n     */\n    public function compileVariable($variable)\n    {\n        if (!strpos($variable, '(')) {\n            // not a variable variable\n            $var = trim($variable, '\\'');\n            $this->tag_nocache = $this->tag_nocache |\n                                 $this->template->ext->getTemplateVars->_getVariable(\n                                     $this->template,\n                                     $var,\n                                     null,\n                                     true,\n                                     false\n                                 )->nocache;\n            // todo $this->template->compiled->properties['variables'][$var] = $this->tag_nocache | $this->nocache;\n        }\n        return '$_smarty_tpl->tpl_vars[' . $variable . ']->value';\n    }\n\n    /**\n     * compile config variable\n     *\n     * @param string $variable\n     *\n     * @return string\n     */\n    public function compileConfigVariable($variable)\n    {\n        // return '$_smarty_tpl->config_vars[' . $variable . ']';\n        return '$_smarty_tpl->smarty->ext->configLoad->_getConfigVariable($_smarty_tpl, ' . $variable . ')';\n    }\n\n    /**\n     * compile PHP function call\n     *\n     * @param string $name\n     * @param array  $parameter\n     *\n     * @return string\n     * @throws \\SmartyCompilerException\n     */\n    public function compilePHPFunctionCall($name, $parameter)\n    {\n        if (!$this->smarty->security_policy || $this->smarty->security_policy->isTrustedPhpFunction($name, $this)) {\n            if (strcasecmp($name, 'isset') === 0 || strcasecmp($name, 'empty') === 0\n                || strcasecmp($name, 'array') === 0 || is_callable($name)\n            ) {\n                $func_name = strtolower($name);\n\n                if ($func_name === 'isset') {\n                    if (count($parameter) === 0) {\n                        $this->trigger_template_error('Illegal number of parameter in \"isset()\"');\n                    }\n\n                    $pa = array();\n                    foreach ($parameter as $p) {\n                        $pa[] = $this->syntaxMatchesVariable($p) ? 'isset(' . $p . ')' : '(' . $p . ' !== null )';\n                    }\n                    return '(' . implode(' && ', $pa) . ')';\n\n                } elseif (in_array(\n                    $func_name,\n                    array(\n                        'empty',\n                        'reset',\n                        'current',\n                        'end',\n                        'prev',\n                        'next'\n                    )\n                )\n                ) {\n                    if (count($parameter) !== 1) {\n                        $this->trigger_template_error(\"Illegal number of parameter in '{$func_name()}'\");\n                    }\n                    if ($func_name === 'empty') {\n                        return $func_name . '(' .\n                               str_replace(\"')->value\", \"',null,true,false)->value\", $parameter[ 0 ]) . ')';\n                    } else {\n                        return $func_name . '(' . $parameter[ 0 ] . ')';\n                    }\n                } else {\n                    return $name . '(' . implode(',', $parameter) . ')';\n                }\n            } else {\n                $this->trigger_template_error(\"unknown function '{$name}'\");\n            }\n        }\n    }\n\n    /**\n     * Determines whether the passed string represents a valid (PHP) variable.\n     * This is important, because `isset()` only works on variables and `empty()` can only be passed\n     * a variable prior to php5.5\n     * @param $string\n     * @return bool\n     */\n    private function syntaxMatchesVariable($string) {\n        static $regex_pattern = '/^\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*((->)[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*|\\[.*]*\\])*$/';\n        return 1 === preg_match($regex_pattern, trim($string));\n    }\n\n    /**\n     * This method is called from parser to process a text content section if strip is enabled\n     * - remove text from inheritance child templates as they may generate output\n     *\n     * @param string $text\n     *\n     * @return string\n     */\n    public function processText($text)\n    {\n\n        if (strpos($text, '<') === false) {\n            return preg_replace($this->stripRegEx, '', $text);\n        }\n\n        $store = array();\n        $_store = 0;\n\n        // capture html elements not to be messed with\n        $_offset = 0;\n        if (preg_match_all(\n            '#(<script[^>]*>.*?</script[^>]*>)|(<textarea[^>]*>.*?</textarea[^>]*>)|(<pre[^>]*>.*?</pre[^>]*>)#is',\n            $text,\n            $matches,\n            PREG_OFFSET_CAPTURE | PREG_SET_ORDER\n        )\n        ) {\n            foreach ($matches as $match) {\n                $store[] = $match[ 0 ][ 0 ];\n                $_length = strlen($match[ 0 ][ 0 ]);\n                $replace = '@!@SMARTY:' . $_store . ':SMARTY@!@';\n                $text = substr_replace($text, $replace, $match[ 0 ][ 1 ] - $_offset, $_length);\n                $_offset += $_length - strlen($replace);\n                $_store++;\n            }\n        }\n        $expressions = array(// replace multiple spaces between tags by a single space\n                             '#(:SMARTY@!@|>)[\\040\\011]+(?=@!@SMARTY:|<)#s'                            => '\\1 \\2',\n                             // remove newline between tags\n                             '#(:SMARTY@!@|>)[\\040\\011]*[\\n]\\s*(?=@!@SMARTY:|<)#s'                     => '\\1\\2',\n                             // remove multiple spaces between attributes (but not in attribute values!)\n                             '#(([a-z0-9]\\s*=\\s*(\"[^\"]*?\")|(\\'[^\\']*?\\'))|<[a-z0-9_]+)\\s+([a-z/>])#is' => '\\1 \\5',\n                             '#>[\\040\\011]+$#Ss'                                                       => '> ',\n                             '#>[\\040\\011]*[\\n]\\s*$#Ss'                                                => '>',\n                             $this->stripRegEx                                                         => '',\n        );\n        $text = preg_replace(array_keys($expressions), array_values($expressions), $text);\n        $_offset = 0;\n        if (preg_match_all(\n            '#@!@SMARTY:([0-9]+):SMARTY@!@#is',\n            $text,\n            $matches,\n            PREG_OFFSET_CAPTURE | PREG_SET_ORDER\n        )\n        ) {\n            foreach ($matches as $match) {\n                $_length = strlen($match[ 0 ][ 0 ]);\n                $replace = $store[ $match[ 1 ][ 0 ] ];\n                $text = substr_replace($text, $replace, $match[ 0 ][ 1 ] + $_offset, $_length);\n                $_offset += strlen($replace) - $_length;\n                $_store++;\n            }\n        }\n        return $text;\n    }\n\n    /**\n     * lazy loads internal compile plugin for tag and calls the compile method\n     * compile objects cached for reuse.\n     * class name format:  Smarty_Internal_Compile_TagName\n     * plugin filename format: Smarty_Internal_TagName.php\n     *\n     * @param string $tag    tag name\n     * @param array  $args   list of tag attributes\n     * @param mixed  $param1 optional parameter\n     * @param mixed  $param2 optional parameter\n     * @param mixed  $param3 optional parameter\n     *\n     * @return bool|string compiled code or false\n     * @throws \\SmartyCompilerException\n     */\n    public function callTagCompiler($tag, $args, $param1 = null, $param2 = null, $param3 = null)\n    {\n        /* @var Smarty_Internal_CompileBase $tagCompiler */\n        $tagCompiler = $this->getTagCompiler($tag);\n        // compile this tag\n        return $tagCompiler === false ? false : $tagCompiler->compile($args, $this, $param1, $param2, $param3);\n    }\n\n    /**\n     * lazy loads internal compile plugin for tag compile objects cached for reuse.\n     *\n     * class name format:  Smarty_Internal_Compile_TagName\n     * plugin filename format: Smarty_Internal_TagName.php\n     *\n     * @param string $tag tag name\n     *\n     * @return bool|\\Smarty_Internal_CompileBase tag compiler object or false if not found\n     */\n    public function getTagCompiler($tag)\n    {\n        // re-use object if already exists\n        if (!isset(self::$_tag_objects[ $tag ])) {\n            // lazy load internal compiler plugin\n            $_tag = explode('_', $tag);\n            $_tag = array_map('ucfirst', $_tag);\n            $class_name = 'Smarty_Internal_Compile_' . implode('_', $_tag);\n            if (class_exists($class_name)\n                && (!isset($this->smarty->security_policy) || $this->smarty->security_policy->isTrustedTag($tag, $this))\n            ) {\n                self::$_tag_objects[ $tag ] = new $class_name;\n            } else {\n                self::$_tag_objects[ $tag ] = false;\n            }\n        }\n        return self::$_tag_objects[ $tag ];\n    }\n\n    /**\n     * Check for plugins and return function name\n     *\n     * @param        $plugin_name\n     * @param string $plugin_type type of plugin\n     *\n     * @return string call name of function\n     * @throws \\SmartyException\n     */\n    public function getPlugin($plugin_name, $plugin_type)\n    {\n        $function = null;\n        if ($this->caching && ($this->nocache || $this->tag_nocache)) {\n            if (isset($this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ])) {\n                $function =\n                    $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ][ 'function' ];\n            } elseif (isset($this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ])) {\n                $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ] =\n                    $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ];\n                $function =\n                    $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ][ 'function' ];\n            }\n        } else {\n            if (isset($this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ])) {\n                $function =\n                    $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ][ 'function' ];\n            } elseif (isset($this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ])) {\n                $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ] =\n                    $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ];\n                $function =\n                    $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ][ 'function' ];\n            }\n        }\n        if (isset($function)) {\n            if ($plugin_type === 'modifier') {\n                $this->modifier_plugins[ $plugin_name ] = true;\n            }\n            return $function;\n        }\n        // loop through plugin dirs and find the plugin\n        $function = 'smarty_' . $plugin_type . '_' . $plugin_name;\n        $file = $this->smarty->loadPlugin($function, false);\n        if (is_string($file)) {\n            if ($this->caching && ($this->nocache || $this->tag_nocache)) {\n                $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ][ 'file' ] =\n                    $file;\n                $this->required_plugins[ 'nocache' ][ $plugin_name ][ $plugin_type ][ 'function' ] =\n                    $function;\n            } else {\n                $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ][ 'file' ] =\n                    $file;\n                $this->required_plugins[ 'compiled' ][ $plugin_name ][ $plugin_type ][ 'function' ] =\n                    $function;\n            }\n            if ($plugin_type === 'modifier') {\n                $this->modifier_plugins[ $plugin_name ] = true;\n            }\n            return $function;\n        }\n        if (is_callable($function)) {\n            // plugin function is defined in the script\n            return $function;\n        }\n        return false;\n    }\n\n    /**\n     * Check for plugins by default plugin handler\n     *\n     * @param string $tag         name of tag\n     * @param string $plugin_type type of plugin\n     *\n     * @return bool true if found\n     * @throws \\SmartyCompilerException\n     */\n    public function getPluginFromDefaultHandler($tag, $plugin_type)\n    {\n        $callback = null;\n        $script = null;\n        $cacheable = true;\n        $result = call_user_func_array(\n            $this->smarty->default_plugin_handler_func,\n            array(\n                $tag,\n                $plugin_type,\n                $this->template,\n                &$callback,\n                &$script,\n                &$cacheable,\n            )\n        );\n        if ($result) {\n            $this->tag_nocache = $this->tag_nocache || !$cacheable;\n            if ($script !== null) {\n                if (is_file($script)) {\n                    if ($this->caching && ($this->nocache || $this->tag_nocache)) {\n                        $this->required_plugins[ 'nocache' ][ $tag ][ $plugin_type ][ 'file' ] =\n                            $script;\n                        $this->required_plugins[ 'nocache' ][ $tag ][ $plugin_type ][ 'function' ] =\n                            $callback;\n                    } else {\n                        $this->required_plugins[ 'compiled' ][ $tag ][ $plugin_type ][ 'file' ] =\n                            $script;\n                        $this->required_plugins[ 'compiled' ][ $tag ][ $plugin_type ][ 'function' ] =\n                            $callback;\n                    }\n                    include_once $script;\n                } else {\n                    $this->trigger_template_error(\"Default plugin handler: Returned script file '{$script}' for '{$tag}' not found\");\n                }\n            }\n            if (is_callable($callback)) {\n                $this->default_handler_plugins[ $plugin_type ][ $tag ] = array(\n                    $callback,\n                    true,\n                    array()\n                );\n                return true;\n            } else {\n                $this->trigger_template_error(\"Default plugin handler: Returned callback for '{$tag}' not callable\");\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Append code segments and remove unneeded ?> <?php transitions\n     *\n     * @param string $left\n     * @param string $right\n     *\n     * @return string\n     */\n    public function appendCode($left, $right)\n    {\n        if (preg_match('/\\s*\\?>\\s?$/D', $left) && preg_match('/^<\\?php\\s+/', $right)) {\n            $left = preg_replace('/\\s*\\?>\\s?$/D', \"\\n\", $left);\n            $left .= preg_replace('/^<\\?php\\s+/', '', $right);\n        } else {\n            $left .= $right;\n        }\n        return $left;\n    }\n\n    /**\n     * Inject inline code for nocache template sections\n     * This method gets the content of each template element from the parser.\n     * If the content is compiled code and it should be not cached the code is injected\n     * into the rendered output.\n     *\n     * @param string  $content content of template element\n     * @param boolean $is_code true if content is compiled code\n     *\n     * @return string  content\n     */\n    public function processNocacheCode($content, $is_code)\n    {\n        // If the template is not evaluated and we have a nocache section and or a nocache tag\n        if ($is_code && !empty($content)) {\n            // generate replacement code\n            if ((!($this->template->source->handler->recompiled) || $this->forceNocache) && $this->caching\n                && !$this->suppressNocacheProcessing && ($this->nocache || $this->tag_nocache)\n            ) {\n                $this->template->compiled->has_nocache_code = true;\n                $_output = addcslashes($content, '\\'\\\\');\n                $_output = str_replace('^#^', '\\'', $_output);\n                $_output =\n                    \"<?php echo '/*%%SmartyNocache:{$this->nocache_hash}%%*/{$_output}/*/%%SmartyNocache:{$this->nocache_hash}%%*/';?>\\n\";\n                // make sure we include modifier plugins for nocache code\n                foreach ($this->modifier_plugins as $plugin_name => $dummy) {\n                    if (isset($this->required_plugins[ 'compiled' ][ $plugin_name ][ 'modifier' ])) {\n                        $this->required_plugins[ 'nocache' ][ $plugin_name ][ 'modifier' ] =\n                            $this->required_plugins[ 'compiled' ][ $plugin_name ][ 'modifier' ];\n                    }\n                }\n            } else {\n                $_output = $content;\n            }\n        } else {\n            $_output = $content;\n        }\n        $this->modifier_plugins = array();\n        $this->suppressNocacheProcessing = false;\n        $this->tag_nocache = false;\n        return $_output;\n    }\n\n    /**\n     * Get Id\n     *\n     * @param string $input\n     *\n     * @return bool|string\n     */\n    public function getId($input)\n    {\n        if (preg_match('~^([\\'\"]*)([0-9]*[a-zA-Z_]\\w*)\\1$~', $input, $match)) {\n            return $match[ 2 ];\n        }\n        return false;\n    }\n\n    /**\n     * Get variable name from string\n     *\n     * @param string $input\n     *\n     * @return bool|string\n     */\n    public function getVariableName($input)\n    {\n        if (preg_match('~^[$]_smarty_tpl->tpl_vars\\[[\\'\"]*([0-9]*[a-zA-Z_]\\w*)[\\'\"]*\\]->value$~', $input, $match)) {\n            return $match[ 1 ];\n        }\n        return false;\n    }\n\n    /**\n     * Set nocache flag in variable or create new variable\n     *\n     * @param string $varName\n     */\n    public function setNocacheInVariable($varName)\n    {\n        // create nocache var to make it know for further compiling\n        if ($_var = $this->getId($varName)) {\n            if (isset($this->template->tpl_vars[ $_var ])) {\n                $this->template->tpl_vars[ $_var ] = clone $this->template->tpl_vars[ $_var ];\n                $this->template->tpl_vars[ $_var ]->nocache = true;\n            } else {\n                $this->template->tpl_vars[ $_var ] = new Smarty_Variable(null, true);\n            }\n        }\n    }\n\n    /**\n     * @param array $_attr tag attributes\n     * @param array $validScopes\n     *\n     * @return int|string\n     * @throws \\SmartyCompilerException\n     */\n    public function convertScope($_attr, $validScopes)\n    {\n        $_scope = 0;\n        if (isset($_attr[ 'scope' ])) {\n            $_scopeName = trim($_attr[ 'scope' ], '\\'\"');\n            if (is_numeric($_scopeName) && in_array($_scopeName, $validScopes)) {\n                $_scope = $_scopeName;\n            } elseif (is_string($_scopeName)) {\n                $_scopeName = trim($_scopeName, '\\'\"');\n                $_scope = isset($validScopes[ $_scopeName ]) ? $validScopes[ $_scopeName ] : false;\n            } else {\n                $_scope = false;\n            }\n            if ($_scope === false) {\n                $err = var_export($_scopeName, true);\n                $this->trigger_template_error(\"illegal value '{$err}' for \\\"scope\\\" attribute\", null, true);\n            }\n        }\n        return $_scope;\n    }\n\n    /**\n     * Generate nocache code string\n     *\n     * @param string $code PHP code\n     *\n     * @return string\n     */\n    public function makeNocacheCode($code)\n    {\n        return \"echo '/*%%SmartyNocache:{$this->nocache_hash}%%*/<?php \" .\n               str_replace('^#^', '\\'', addcslashes($code, '\\'\\\\')) .\n               \"?>/*/%%SmartyNocache:{$this->nocache_hash}%%*/';\\n\";\n    }\n\n    /**\n     * display compiler error messages without dying\n     * If parameter $args is empty it is a parser detected syntax error.\n     * In this case the parser is called to obtain information about expected tokens.\n     * If parameter $args contains a string this is used as error message\n     *\n     * @param string    $args    individual error message or null\n     * @param string    $line    line-number\n     * @param null|bool $tagline if true the line number of last tag\n     *\n     * @throws \\SmartyCompilerException when an unexpected token is found\n     */\n    public function trigger_template_error($args = null, $line = null, $tagline = null)\n    {\n        $lex = $this->parser->lex;\n        if ($tagline === true) {\n            // get line number of Tag\n            $line = $lex->taglineno;\n        } elseif (!isset($line)) {\n            // get template source line which has error\n            $line = $lex->line;\n        } else {\n            $line = (int)$line;\n        }\n        if (in_array(\n            $this->template->source->type,\n            array(\n                'eval',\n                'string'\n            )\n        )\n        ) {\n            $templateName = $this->template->source->type . ':' . trim(\n                    preg_replace(\n                        '![\\t\\r\\n]+!',\n                        ' ',\n                        strlen($lex->data) > 40 ?\n                            substr($lex->data, 0, 40) .\n                            '...' : $lex->data\n                    )\n                );\n        } else {\n            $templateName = $this->template->source->type . ':' . $this->template->source->filepath;\n        }\n        //        $line += $this->trace_line_offset;\n        $match = preg_split(\"/\\n/\", $lex->data);\n        $error_text =\n            'Syntax error in template \"' . (empty($this->trace_filepath) ? $templateName : $this->trace_filepath) .\n            '\"  on line ' . ($line + $this->trace_line_offset) . ' \"' .\n            trim(preg_replace('![\\t\\r\\n]+!', ' ', $match[ $line - 1 ])) . '\" ';\n        if (isset($args)) {\n            // individual error message\n            $error_text .= $args;\n        } else {\n            $expect = array();\n            // expected token from parser\n            $error_text .= ' - Unexpected \"' . $lex->value . '\"';\n            if (count($this->parser->yy_get_expected_tokens($this->parser->yymajor)) <= 4) {\n                foreach ($this->parser->yy_get_expected_tokens($this->parser->yymajor) as $token) {\n                    $exp_token = $this->parser->yyTokenName[ $token ];\n                    if (isset($lex->smarty_token_names[ $exp_token ])) {\n                        // token type from lexer\n                        $expect[] = '\"' . $lex->smarty_token_names[ $exp_token ] . '\"';\n                    } else {\n                        // otherwise internal token name\n                        $expect[] = $this->parser->yyTokenName[ $token ];\n                    }\n                }\n                $error_text .= ', expected one of: ' . implode(' , ', $expect);\n            }\n        }\n        if ($this->smarty->_parserdebug) {\n            $this->parser->errorRunDown();\n            echo ob_get_clean();\n            flush();\n        }\n        $e = new SmartyCompilerException($error_text);\n        $e->setLine($line);\n        $e->source = trim(preg_replace('![\\t\\r\\n]+!', ' ', $match[ $line - 1 ]));\n        $e->desc = $args;\n        $e->template = $this->template->source->filepath;\n        throw $e;\n    }\n\n    /**\n     * Return var_export() value with all white spaces removed\n     *\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function getVarExport($value)\n    {\n        return preg_replace('/\\s/', '', var_export($value, true));\n    }\n\n    /**\n     *  enter double quoted string\n     *  - save tag stack count\n     */\n    public function enterDoubleQuote()\n    {\n        array_push($this->_tag_stack_count, $this->getTagStackCount());\n    }\n\n    /**\n     * Return tag stack count\n     *\n     * @return int\n     */\n    public function getTagStackCount()\n    {\n        return count($this->_tag_stack);\n    }\n\n    /**\n     * @param $lexerPreg\n     *\n     * @return mixed\n     */\n    public function replaceDelimiter($lexerPreg)\n    {\n        return str_replace(\n            array('SMARTYldel', 'SMARTYliteral', 'SMARTYrdel', 'SMARTYautoliteral', 'SMARTYal'),\n            array(\n                $this->ldelPreg, $this->literalPreg, $this->rdelPreg,\n                $this->smarty->getAutoLiteral() ? '{1,}' : '{9}',\n                $this->smarty->getAutoLiteral() ? '' : '\\\\s*'\n            ),\n            $lexerPreg\n        );\n    }\n\n    /**\n     * Build lexer regular expressions for left and right delimiter and user defined literals\n     */\n    public function initDelimiterPreg()\n    {\n        $ldel = $this->smarty->getLeftDelimiter();\n        $this->ldelLength = strlen($ldel);\n        $this->ldelPreg = '';\n        foreach (str_split($ldel, 1) as $chr) {\n            $this->ldelPreg .= '[' . preg_quote($chr,'/') . ']';\n        }\n        $rdel = $this->smarty->getRightDelimiter();\n        $this->rdelLength = strlen($rdel);\n        $this->rdelPreg = '';\n        foreach (str_split($rdel, 1) as $chr) {\n            $this->rdelPreg .= '[' . preg_quote($chr,'/') . ']';\n        }\n        $literals = $this->smarty->getLiterals();\n        if (!empty($literals)) {\n            foreach ($literals as $key => $literal) {\n                $literalPreg = '';\n                foreach (str_split($literal, 1) as $chr) {\n                    $literalPreg .= '[' . preg_quote($chr,'/') . ']';\n                }\n                $literals[ $key ] = $literalPreg;\n            }\n            $this->literalPreg = '|' . implode('|', $literals);\n        } else {\n            $this->literalPreg = '';\n        }\n    }\n\n    /**\n     *  leave double quoted string\n     *  - throw exception if block in string was not closed\n     *\n     * @throws \\SmartyCompilerException\n     */\n    public function leaveDoubleQuote()\n    {\n        if (array_pop($this->_tag_stack_count) !== $this->getTagStackCount()) {\n            $tag = $this->getOpenBlockTag();\n            $this->trigger_template_error(\n                \"unclosed '{{$tag}}' in doubled quoted string\",\n                null,\n                true\n            );\n        }\n    }\n\n    /**\n     * Get left delimiter preg\n     *\n     * @return string\n     */\n    public function getLdelPreg()\n    {\n        return $this->ldelPreg;\n    }\n\n    /**\n     * Get right delimiter preg\n     *\n     * @return string\n     */\n    public function getRdelPreg()\n    {\n        return $this->rdelPreg;\n    }\n\n    /**\n     * Get length of left delimiter\n     *\n     * @return int\n     */\n    public function getLdelLength()\n    {\n        return $this->ldelLength;\n    }\n\n    /**\n     * Get length of right delimiter\n     *\n     * @return int\n     */\n    public function getRdelLength()\n    {\n        return $this->rdelLength;\n    }\n\n    /**\n     * Get name of current open block tag\n     *\n     * @return string|boolean\n     */\n    public function getOpenBlockTag()\n    {\n        $tagCount = $this->getTagStackCount();\n        if ($tagCount) {\n            return $this->_tag_stack[ $tagCount - 1 ][ 0 ];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Check if $value contains variable elements\n     *\n     * @param mixed $value\n     *\n     * @return bool|int\n     */\n    public function isVariable($value)\n    {\n        if (is_string($value)) {\n            return preg_match('/[$(]/', $value);\n        }\n        if (is_bool($value) || is_numeric($value)) {\n            return false;\n        }\n        if (is_array($value)) {\n            foreach ($value as $k => $v) {\n                if ($this->isVariable($k) || $this->isVariable($v)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return false;\n    }\n\n    /**\n     * Get new prefix variable name\n     *\n     * @return string\n     */\n    public function getNewPrefixVariable()\n    {\n        ++self::$prefixVariableNumber;\n        return $this->getPrefixVariable();\n    }\n\n    /**\n     * Get current prefix variable name\n     *\n     * @return string\n     */\n    public function getPrefixVariable()\n    {\n        return '$_prefixVariable' . self::$prefixVariableNumber;\n    }\n\n    /**\n     * append  code to prefix buffer\n     *\n     * @param string $code\n     */\n    public function appendPrefixCode($code)\n    {\n        $this->prefix_code[] = $code;\n    }\n\n    /**\n     * get prefix code string\n     *\n     * @return string\n     */\n    public function getPrefixCode()\n    {\n        $code = '';\n        $prefixArray = array_merge($this->prefix_code, array_pop($this->prefixCodeStack));\n        $this->prefixCodeStack[] = array();\n        foreach ($prefixArray as $c) {\n            $code = $this->appendCode($code, $c);\n        }\n        $this->prefix_code = array();\n        return $code;\n    }\n\n    /**\n     * Save current required plugins\n     *\n     * @param bool $init if true init required plugins\n     */\n    public function saveRequiredPlugins($init = false)\n    {\n        $this->required_plugins_stack[] = $this->required_plugins;\n        if ($init) {\n            $this->required_plugins = array('compiled' => array(), 'nocache' => array());\n        }\n    }\n\n    /**\n     * Restore required plugins\n     */\n    public function restoreRequiredPlugins()\n    {\n        $this->required_plugins = array_pop($this->required_plugins_stack);\n    }\n\n    /**\n     * Compile code to call Smarty_Internal_Template::_checkPlugins()\n     * for required plugins\n     *\n     * @return string\n     */\n    public function compileRequiredPlugins()\n    {\n        $code = $this->compileCheckPlugins($this->required_plugins[ 'compiled' ]);\n        if ($this->caching && !empty($this->required_plugins[ 'nocache' ])) {\n            $code .= $this->makeNocacheCode($this->compileCheckPlugins($this->required_plugins[ 'nocache' ]));\n        }\n        return $code;\n    }\n\n    /**\n     * Compile code to call Smarty_Internal_Template::_checkPlugins\n     *   - checks if plugin is callable require otherwise\n     *\n     * @param $requiredPlugins\n     *\n     * @return string\n     */\n    public function compileCheckPlugins($requiredPlugins)\n    {\n        if (!empty($requiredPlugins)) {\n            $plugins = array();\n            foreach ($requiredPlugins as $plugin) {\n                foreach ($plugin as $data) {\n                    $plugins[] = $data;\n                }\n            }\n            return '$_smarty_tpl->_checkPlugins(' . $this->getVarExport($plugins) . ');' . \"\\n\";\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * method to compile a Smarty template\n     *\n     * @param mixed $_content template source\n     * @param bool  $isTemplateSource\n     *\n     * @return bool true if compiling succeeded, false if it failed\n     */\n    abstract protected function doCompile($_content, $isTemplateSource = false);\n\n    public function cStyleComment($string) {\n        return '/*' . str_replace('*/', '* /' , $string) . '*/';\n    }\n\n    /**\n     * Compile Tag\n     *\n     * @param string $tag       tag name\n     * @param array  $args      array with tag attributes\n     * @param array  $parameter array with compilation parameter\n     *\n     * @throws SmartyCompilerException\n     * @throws SmartyException\n     * @return string compiled code\n     */\n    private function compileTag2($tag, $args, $parameter)\n    {\n        $plugin_type = '';\n        // $args contains the attributes parsed and compiled by the lexer/parser\n        // assume that tag does compile into code, but creates no HTML output\n        $this->has_code = true;\n        // log tag/attributes\n        if (isset($this->smarty->_cache[ 'get_used_tags' ])) {\n            $this->template->_cache[ 'used_tags' ][] = array(\n                $tag,\n                $args\n            );\n        }\n        // check nocache option flag\n        foreach ($args as $arg) {\n            if (!is_array($arg)) {\n                if ($arg === \"'nocache'\" || $arg === 'nocache') {\n                    $this->tag_nocache = true;\n                }\n            } else {\n                foreach ($arg as $k => $v) {\n                    if (($k === \"'nocache'\" || $k === 'nocache') && (trim($v, \"'\\\" \") === 'true')) {\n                        $this->tag_nocache = true;\n                    }\n                }\n            }\n        }\n        // compile the smarty tag (required compile classes to compile the tag are auto loaded)\n        if (($_output = $this->callTagCompiler($tag, $args, $parameter)) === false) {\n            if (isset($this->parent_compiler->tpl_function[ $tag ])\n                || (isset($this->template->smarty->ext->_tplFunction)\n                    && $this->template->smarty->ext->_tplFunction->getTplFunction($this->template, $tag) !== false)\n            ) {\n                // template defined by {template} tag\n                $args[ '_attr' ][ 'name' ] = \"'{$tag}'\";\n                $_output = $this->callTagCompiler('call', $args, $parameter);\n            }\n        }\n        if ($_output !== false) {\n            if ($_output !== true) {\n                // did we get compiled code\n                if ($this->has_code) {\n                    // return compiled code\n                    return $_output;\n                }\n            }\n            // tag did not produce compiled code\n            return null;\n        } else {\n            // map_named attributes\n            if (isset($args[ '_attr' ])) {\n                foreach ($args[ '_attr' ] as $key => $attribute) {\n                    if (is_array($attribute)) {\n                        $args = array_merge($args, $attribute);\n                    }\n                }\n            }\n            // not an internal compiler tag\n            if (strlen($tag) < 6 || substr($tag, -5) !== 'close') {\n                // check if tag is a registered object\n                if (isset($this->smarty->registered_objects[ $tag ]) && isset($parameter[ 'object_method' ])) {\n                    $method = $parameter[ 'object_method' ];\n                    if (!in_array($method, $this->smarty->registered_objects[ $tag ][ 3 ])\n                        && (empty($this->smarty->registered_objects[ $tag ][ 1 ])\n                            || in_array($method, $this->smarty->registered_objects[ $tag ][ 1 ]))\n                    ) {\n                        return $this->callTagCompiler('private_object_function', $args, $parameter, $tag, $method);\n                    } elseif (in_array($method, $this->smarty->registered_objects[ $tag ][ 3 ])) {\n                        return $this->callTagCompiler(\n                            'private_object_block_function',\n                            $args,\n                            $parameter,\n                            $tag,\n                            $method\n                        );\n                    } else {\n                        // throw exception\n                        $this->trigger_template_error(\n                            'not allowed method \"' . $method . '\" in registered object \"' .\n                            $tag . '\"',\n                            null,\n                            true\n                        );\n                    }\n                }\n                // check if tag is registered\n                foreach (array(\n                    Smarty::PLUGIN_COMPILER,\n                    Smarty::PLUGIN_FUNCTION,\n                    Smarty::PLUGIN_BLOCK,\n                ) as $plugin_type) {\n                    if (isset($this->smarty->registered_plugins[ $plugin_type ][ $tag ])) {\n                        // if compiler function plugin call it now\n                        if ($plugin_type === Smarty::PLUGIN_COMPILER) {\n                            $new_args = array();\n                            foreach ($args as $key => $mixed) {\n                                if (is_array($mixed)) {\n                                    $new_args = array_merge($new_args, $mixed);\n                                } else {\n                                    $new_args[ $key ] = $mixed;\n                                }\n                            }\n                            if (!$this->smarty->registered_plugins[ $plugin_type ][ $tag ][ 1 ]) {\n                                $this->tag_nocache = true;\n                            }\n                            return call_user_func_array(\n                                $this->smarty->registered_plugins[ $plugin_type ][ $tag ][ 0 ],\n                                array(\n                                    $new_args,\n                                    $this\n                                )\n                            );\n                        }\n                        // compile registered function or block function\n                        if ($plugin_type === Smarty::PLUGIN_FUNCTION || $plugin_type === Smarty::PLUGIN_BLOCK) {\n                            return $this->callTagCompiler(\n                                'private_registered_' . $plugin_type,\n                                $args,\n                                $parameter,\n                                $tag\n                            );\n                        }\n                    }\n                }\n                // check plugins from plugins folder\n                foreach ($this->plugin_search_order as $plugin_type) {\n                    if ($plugin_type === Smarty::PLUGIN_COMPILER\n                        && $this->smarty->loadPlugin('smarty_compiler_' . $tag)\n                        && (!isset($this->smarty->security_policy)\n                            || $this->smarty->security_policy->isTrustedTag($tag, $this))\n                    ) {\n                        $plugin = 'smarty_compiler_' . $tag;\n                        if (is_callable($plugin)) {\n                            // convert arguments format for old compiler plugins\n                            $new_args = array();\n                            foreach ($args as $key => $mixed) {\n                                if (is_array($mixed)) {\n                                    $new_args = array_merge($new_args, $mixed);\n                                } else {\n                                    $new_args[ $key ] = $mixed;\n                                }\n                            }\n                            return $plugin($new_args, $this->smarty);\n                        }\n                        if (class_exists($plugin, false)) {\n                            $plugin_object = new $plugin;\n                            if (method_exists($plugin_object, 'compile')) {\n                                return $plugin_object->compile($args, $this);\n                            }\n                        }\n                        throw new SmartyException(\"Plugin '{$tag}' not callable\");\n                    } else {\n                        if ($function = $this->getPlugin($tag, $plugin_type)) {\n                            if (!isset($this->smarty->security_policy)\n                                || $this->smarty->security_policy->isTrustedTag($tag, $this)\n                            ) {\n                                return $this->callTagCompiler(\n                                    'private_' . $plugin_type . '_plugin',\n                                    $args,\n                                    $parameter,\n                                    $tag,\n                                    $function\n                                );\n                            }\n                        }\n                    }\n                }\n                if (is_callable($this->smarty->default_plugin_handler_func)) {\n                    $found = false;\n                    // look for already resolved tags\n                    foreach ($this->plugin_search_order as $plugin_type) {\n                        if (isset($this->default_handler_plugins[ $plugin_type ][ $tag ])) {\n                            $found = true;\n                            break;\n                        }\n                    }\n                    if (!$found) {\n                        // call default handler\n                        foreach ($this->plugin_search_order as $plugin_type) {\n                            if ($this->getPluginFromDefaultHandler($tag, $plugin_type)) {\n                                $found = true;\n                                break;\n                            }\n                        }\n                    }\n                    if ($found) {\n                        // if compiler function plugin call it now\n                        if ($plugin_type === Smarty::PLUGIN_COMPILER) {\n                            $new_args = array();\n                            foreach ($args as $key => $mixed) {\n                                if (is_array($mixed)) {\n                                    $new_args = array_merge($new_args, $mixed);\n                                } else {\n                                    $new_args[ $key ] = $mixed;\n                                }\n                            }\n                            return call_user_func_array(\n                                $this->default_handler_plugins[ $plugin_type ][ $tag ][ 0 ],\n                                array(\n                                    $new_args,\n                                    $this\n                                )\n                            );\n                        } else {\n                            return $this->callTagCompiler(\n                                'private_registered_' . $plugin_type,\n                                $args,\n                                $parameter,\n                                $tag\n                            );\n                        }\n                    }\n                }\n            } else {\n                // compile closing tag of block function\n                $base_tag = substr($tag, 0, -5);\n                // check if closing tag is a registered object\n                if (isset($this->smarty->registered_objects[ $base_tag ]) && isset($parameter[ 'object_method' ])) {\n                    $method = $parameter[ 'object_method' ];\n                    if (in_array($method, $this->smarty->registered_objects[ $base_tag ][ 3 ])) {\n                        return $this->callTagCompiler(\n                            'private_object_block_function',\n                            $args,\n                            $parameter,\n                            $tag,\n                            $method\n                        );\n                    } else {\n                        // throw exception\n                        $this->trigger_template_error(\n                            'not allowed closing tag method \"' . $method .\n                            '\" in registered object \"' . $base_tag . '\"',\n                            null,\n                            true\n                        );\n                    }\n                }\n                // registered block tag ?\n                if (isset($this->smarty->registered_plugins[ Smarty::PLUGIN_BLOCK ][ $base_tag ])\n                    || isset($this->default_handler_plugins[ Smarty::PLUGIN_BLOCK ][ $base_tag ])\n                ) {\n                    return $this->callTagCompiler('private_registered_block', $args, $parameter, $tag);\n                }\n                // registered function tag ?\n                if (isset($this->smarty->registered_plugins[ Smarty::PLUGIN_FUNCTION ][ $tag ])) {\n                    return $this->callTagCompiler('private_registered_function', $args, $parameter, $tag);\n                }\n                // block plugin?\n                if ($function = $this->getPlugin($base_tag, Smarty::PLUGIN_BLOCK)) {\n                    return $this->callTagCompiler('private_block_plugin', $args, $parameter, $tag, $function);\n                }\n                // function plugin?\n                if ($function = $this->getPlugin($tag, Smarty::PLUGIN_FUNCTION)) {\n                    if (!isset($this->smarty->security_policy)\n                        || $this->smarty->security_policy->isTrustedTag($tag, $this)\n                    ) {\n                        return $this->callTagCompiler('private_function_plugin', $args, $parameter, $tag, $function);\n                    }\n                }\n                // registered compiler plugin ?\n                if (isset($this->smarty->registered_plugins[ Smarty::PLUGIN_COMPILER ][ $tag ])) {\n                    // if compiler function plugin call it now\n                    $args = array();\n                    if (!$this->smarty->registered_plugins[ Smarty::PLUGIN_COMPILER ][ $tag ][ 1 ]) {\n                        $this->tag_nocache = true;\n                    }\n                    return call_user_func_array(\n                        $this->smarty->registered_plugins[ Smarty::PLUGIN_COMPILER ][ $tag ][ 0 ],\n                        array(\n                            $args,\n                            $this\n                        )\n                    );\n                }\n                if ($this->smarty->loadPlugin('smarty_compiler_' . $tag)) {\n                    $plugin = 'smarty_compiler_' . $tag;\n                    if (is_callable($plugin)) {\n                        return $plugin($args, $this->smarty);\n                    }\n                    if (class_exists($plugin, false)) {\n                        $plugin_object = new $plugin;\n                        if (method_exists($plugin_object, 'compile')) {\n                            return $plugin_object->compile($args, $this);\n                        }\n                    }\n                    throw new SmartyException(\"Plugin '{$tag}' not callable\");\n                }\n            }\n            $this->trigger_template_error(\"unknown tag '{$tag}'\", null, true);\n        }\n    }\n}\n"], "filenames": ["CHANGELOG.md", "libs/sysplugins/smarty_internal_compile_block.php", "libs/sysplugins/smarty_internal_compile_function.php", "libs/sysplugins/smarty_internal_compile_include.php", "libs/sysplugins/smarty_internal_config_file_compiler.php", "libs/sysplugins/smarty_internal_runtime_codeframe.php", "libs/sysplugins/smarty_internal_templatecompilerbase.php"], "buggy_code_start_loc": [9, 128, 137, 321, 160, 47, 1440], "buggy_code_end_loc": [13, 159, 200, 329, 164, 50, 1440], "fixing_code_start_loc": [9, 128, 137, 321, 160, 47, 1441], "fixing_code_end_loc": [13, 159, 200, 329, 166, 53, 1445], "type": "CWE-94", "message": "Smarty is a template engine for PHP, facilitating the separation of presentation (HTML/CSS) from application logic. Prior to versions 3.1.45 and 4.1.1, template authors could inject php code by choosing a malicious {block} name or {include} file name. Sites that cannot fully trust template authors should upgrade to versions 3.1.45 or 4.1.1 to receive a patch for this issue. There are currently no known workarounds.", "other": {"cve": {"id": "CVE-2022-29221", "sourceIdentifier": "security-advisories@github.com", "published": "2022-05-24T15:15:07.917", "lastModified": "2022-12-08T22:34:56.837", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Smarty is a template engine for PHP, facilitating the separation of presentation (HTML/CSS) from application logic. Prior to versions 3.1.45 and 4.1.1, template authors could inject php code by choosing a malicious {block} name or {include} file name. Sites that cannot fully trust template authors should upgrade to versions 3.1.45 or 4.1.1 to receive a patch for this issue. There are currently no known workarounds."}, {"lang": "es", "value": "Smarty es un motor de plantillas para PHP, que facilita la separaci\u00f3n de la presentaci\u00f3n (HTML/CSS) de la l\u00f3gica de la aplicaci\u00f3n. En versiones anteriores a 3.1.45 y 4.1.1, los autores de plantillas pod\u00edan inyectar c\u00f3digo php eligiendo un nombre de archivo {block} o {include} malicioso. Los sitios que no pueden confiar plenamente en los autores de plantillas deben actualizar a versiones 3.1.45 o 4.1.1 para recibir un parche para este problema. Actualmente no se presentan mitigaciones conocidas"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:smarty:smarty:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.45", "matchCriteriaId": "8429DA48-CC42-447B-9273-9755C7A33248"}, {"vulnerable": true, "criteria": "cpe:2.3:a:smarty:smarty:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.1.1", "matchCriteriaId": "ECF0778C-6739-4DE6-BB51-B6B466C0B104"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:11.0:*:*:*:*:*:*:*", "matchCriteriaId": "FA6FEEC2-9F11-4643-8827-749718254FED"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:36:*:*:*:*:*:*:*", "matchCriteriaId": "5C675112-476C-4D7C-BCB9-A2FB2D0BC9FD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:37:*:*:*:*:*:*:*", "matchCriteriaId": "E30D0E6F-4AE8-4284-8716-991DFA48CC5D"}]}]}], "references": [{"url": "https://github.com/smarty-php/smarty/commit/64ad6442ca1da31cefdab5c9874262b702cccddd", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/smarty-php/smarty/releases/tag/v3.1.45", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/smarty-php/smarty/releases/tag/v4.1.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/smarty-php/smarty/security/advisories/GHSA-634x-pc3q-cf4c", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/05/msg00044.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BRAJVDRGCIY5UZ2PQHKDTT7RMKG6WJQQ/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L777JIBIWJV34HS7LXPIDWASG7TT4LNI/", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202209-09", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2022/dsa-5151", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/smarty-php/smarty/commit/64ad6442ca1da31cefdab5c9874262b702cccddd"}}