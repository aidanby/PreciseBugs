{"buggy_code": ["/*\n * Copyright 2015 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.netflix.spinnaker.rosco.providers.aws\n\nimport com.netflix.spinnaker.kork.artifacts.model.Artifact\nimport com.netflix.spinnaker.kork.core.RetrySupport\nimport com.netflix.spinnaker.rosco.api.Bake\nimport com.netflix.spinnaker.rosco.api.BakeOptions\nimport com.netflix.spinnaker.rosco.api.BakeRequest\nimport com.netflix.spinnaker.rosco.api.BakeRequest.VmType\nimport com.netflix.spinnaker.rosco.providers.CloudProviderBakeHandler\nimport com.netflix.spinnaker.rosco.providers.aws.config.RoscoAWSConfiguration\nimport com.netflix.spinnaker.rosco.providers.util.ImageNameFactory\nimport com.netflix.spinnaker.rosco.services.ClouddriverService\nimport com.netflix.spinnaker.security.AuthenticatedRequest\nimport groovy.util.logging.Slf4j\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.stereotype.Component\n\nimport java.time.Duration\nimport java.util.regex.Pattern\n\n@Component\n@Slf4j\npublic class AWSBakeHandler extends CloudProviderBakeHandler {\n\n  private static final String IMAGE_NAME_TOKEN = \"amazon-(chroot|ebs): Creating the AMI:\"\n  private static final String UNENCRYPTED_IMAGE_NAME_TOKEN = \"(==> |)amazon-(chroot|ebs): Creating unencrypted AMI\"\n  // AMI_EXTRACTOR finds amis from the format produced by packer ie:\n  // eu-north-1: ami-076cf277a86b6e5b4\n  // us-east-1: ami-2c014644\n  private static final Pattern AMI_ID = Pattern.compile(\"^ami-[a-z0-9]+\\$\")\n  private static final String AMI_EXTRACTOR = \"[a-z]{2}-[a-z]{2,10}-[0-9]:\\\\sami-[a-z0-9]{8,}\"\n  private static final String AMI_TYPE = \"aws/image\"\n  private static final String PACKER_BUILD_FINISHED = \"==> Builds finished. The artifacts of successful builds are:\"\n\n  ImageNameFactory imageNameFactory = new ImageNameFactory()\n\n  @Autowired\n  RoscoAWSConfiguration.AWSBakeryDefaults awsBakeryDefaults\n\n  @Autowired\n  ClouddriverService clouddriverService\n\n  @Autowired\n  RetrySupport retrySupport\n\n  @Value('${bakeAccount}')\n  String defaultAccount\n\n  @Override\n  def getBakeryDefaults() {\n    return awsBakeryDefaults\n  }\n\n  @Override\n  BakeOptions getBakeOptions() {\n    new BakeOptions(\n      cloudProvider: BakeRequest.CloudProviderType.aws,\n      baseImages: awsBakeryDefaults?.baseImages?.collect { it.baseImage }\n    )\n  }\n\n  @Override\n  String produceProviderSpecificBakeKeyComponent(String region, BakeRequest bakeRequest) {\n    if (!bakeRequest.vm_type) {\n      bakeRequest = bakeRequest.copyWith(vm_type: awsBakeryDefaults.defaultVirtualizationType)\n    }\n\n    bakeRequest.with {\n      def enhancedNetworkingSegment = enhanced_networking ? 'enhancedNWEnabled' : 'enhancedNWDisabled'\n\n      return \"$region:$vm_type:$enhancedNetworkingSegment\"\n    }\n  }\n\n  @Override\n  def findVirtualizationSettings(String region, BakeRequest bakeRequest) {\n    BakeRequest.VmType vm_type = bakeRequest.vm_type ?: awsBakeryDefaults.defaultVirtualizationType\n    String account = bakeRequest.account_name ?: defaultAccount\n\n    def awsOperatingSystemVirtualizationSettings = awsBakeryDefaults?.baseImages.find {\n      it.baseImage.id == bakeRequest.base_os\n    }\n\n    if (!awsOperatingSystemVirtualizationSettings) {\n      throw new IllegalArgumentException(\"No virtualization settings found for '$bakeRequest.base_os'.\")\n    }\n\n    def awsVirtualizationSettings = awsOperatingSystemVirtualizationSettings?.virtualizationSettings.find {\n      it.region == region && it.virtualizationType == vm_type\n    }\n\n    if (!awsVirtualizationSettings) {\n      throw new IllegalArgumentException(\"No virtualization settings found for region '$region', operating system '$bakeRequest.base_os', and vm type '$vm_type'.\")\n    }\n\n    awsVirtualizationSettings = awsVirtualizationSettings.clone()\n\n    if (bakeRequest.base_ami) {\n      awsVirtualizationSettings.sourceAmi = bakeRequest.base_ami\n    }\n\n    if (!awsVirtualizationSettings.sourceAmi) {\n      String base = lookupBaseByDynamicProperty(region, bakeRequest)\n      if (base != null && !base.matches(AMI_ID)) {\n        awsVirtualizationSettings.sourceAmi = lookupAmiByName(base, region, account, vm_type, awsVirtualizationSettings.mostRecent)\n      } else {\n        awsVirtualizationSettings.sourceAmi = base\n      }\n    } else if (!awsVirtualizationSettings.sourceAmi.matches(AMI_ID)) {\n      awsVirtualizationSettings.sourceAmi = lookupAmiByName(\n        awsVirtualizationSettings.sourceAmi, region, account, vm_type, awsVirtualizationSettings.mostRecent)\n    }\n\n    if (awsVirtualizationSettings.sourceAmi == null) {\n      throw new IllegalArgumentException(\"No base image found for os '$bakeRequest.base_os', vm type '$vm_type', \" +\n        \"region '$region', label: '$bakeRequest.base_label', account: '$account'\")\n    }\n\n    return awsVirtualizationSettings\n  }\n\n  @Override\n  Map buildParameterMap(String region, def awsVirtualizationSettings, String imageName, BakeRequest bakeRequest, String appVersionStr) {\n    def parameterMap = [\n      aws_region       : region,\n      aws_instance_type: awsVirtualizationSettings.instanceType,\n      aws_source_ami   : awsVirtualizationSettings.sourceAmi,\n      aws_target_ami   : imageName\n    ]\n\n    if (awsVirtualizationSettings.sshUserName) {\n      parameterMap.aws_ssh_username = awsVirtualizationSettings.sshUserName\n    }\n\n    if (awsVirtualizationSettings.winRmUserName) {\n      parameterMap.aws_winrm_username = awsVirtualizationSettings.winRmUserName\n    }\n\n    if (awsVirtualizationSettings.spotPrice) {\n      parameterMap.aws_spot_price = awsVirtualizationSettings.spotPrice\n    }\n\n    if (awsVirtualizationSettings.spotPrice == \"auto\" && awsVirtualizationSettings.spotPriceAutoProduct) {\n      parameterMap.aws_spot_price_auto_product = awsVirtualizationSettings.spotPriceAutoProduct\n    }\n\n    if (awsBakeryDefaults.awsAccessKey && awsBakeryDefaults.awsSecretKey) {\n      parameterMap.aws_access_key = awsBakeryDefaults.awsAccessKey\n      parameterMap.aws_secret_key = awsBakeryDefaults.awsSecretKey\n    }\n\n    if (awsBakeryDefaults.awsSubnetId) {\n      parameterMap.aws_subnet_id = awsBakeryDefaults.awsSubnetId\n    }\n\n    if (awsBakeryDefaults.awsVpcId) {\n      parameterMap.aws_vpc_id = awsBakeryDefaults.awsVpcId\n    }\n\n    if (awsBakeryDefaults.awsAssociatePublicIpAddress != null) {\n      parameterMap.aws_associate_public_ip_address = awsBakeryDefaults.awsAssociatePublicIpAddress\n    }\n\n    if (bakeRequest.enhanced_networking) {\n      parameterMap.aws_ena_support = true\n    }\n\n    if (bakeRequest.build_info_url) {\n      parameterMap.build_info_url = bakeRequest.build_info_url\n    }\n\n    if (appVersionStr) {\n      parameterMap.appversion = appVersionStr\n    }\n\n    return parameterMap\n  }\n\n  @Override\n  String getTemplateFileName(BakeOptions.BaseImage baseImage) {\n    return baseImage.templateFile ?: awsBakeryDefaults.templateFile\n  }\n\n  @Override\n  Bake scrapeCompletedBakeResults(String region, String bakeId, String logsContent) {\n    String amiId\n    String imageName\n    List<Artifact> artifacts = new ArrayList<>()\n    // TODO(duftler): Presently scraping the logs for the image name/id. Would be better to not be reliant on the log\n    // format not changing. Resolve this by storing bake details in redis and querying oort for amiId from amiName.\n    boolean foundAmisCreated = false\n    logsContent.eachLine { String line ->\n      if (line =~ IMAGE_NAME_TOKEN) {\n        imageName = line.split(\" \").last()\n      } else if (line =~ UNENCRYPTED_IMAGE_NAME_TOKEN) {\n        line = line.replaceAll(UNENCRYPTED_IMAGE_NAME_TOKEN, \"\").trim()\n        imageName = line.split(\" \").first()\n      } else if (line =~ \"$region:\") {\n        amiId = line.split(\" \").last()\n      } else if (line =~ PACKER_BUILD_FINISHED) {\n        foundAmisCreated = true\n      }\n\n      if (foundAmisCreated && line =~ AMI_EXTRACTOR) {\n        Artifact a = Artifact.builder()\n          .type(AMI_TYPE)\n          .location(line.split(\": \").first())\n          .reference(line.split(\": \").last())\n          .build()\n        artifacts.add(a)\n      }\n    }\n\n    return new Bake(id: bakeId, ami: amiId, image_name: imageName, artifacts: artifacts)\n  }\n\n  private String lookupAmiByName(String name, String region, String account, VmType vmType, boolean mostRecent) {\n    def images = AuthenticatedRequest.allowAnonymous(\n      {\n        retrySupport.retry({\n          clouddriverService.findAmazonImageByName(name, account, region)\n        }, 3, Duration.ofSeconds(3), false)\n      }\n    )\n\n    def image\n    if (mostRecent) {\n      def matchingImages = images?.findAll { it?.attributes?.virtualizationType == vmType }\n      image = matchingImages?.max {it?.attributes?.creationDate }\n    } else {\n      image = images?.find { it.attributes.virtualizationType == vmType }\n    }\n    \n    return image?.amis?.get(region)?.first()\n  }\n}\n", "/*\n * Copyright 2015 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.netflix.spinnaker.rosco.providers.aws.config\n\nimport com.netflix.spinnaker.rosco.api.BakeOptions\nimport com.netflix.spinnaker.rosco.api.BakeRequest\nimport com.netflix.spinnaker.rosco.providers.aws.AWSBakeHandler\nimport com.netflix.spinnaker.rosco.providers.registry.CloudProviderBakeHandlerRegistry\nimport groovy.transform.AutoClone\nimport groovy.transform.AutoCloneStyle\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.ComponentScan\nimport org.springframework.context.annotation.Configuration\n\nimport javax.annotation.PostConstruct\n\n@Configuration\n@ConditionalOnProperty('aws.enabled')\n@ComponentScan('com.netflix.spinnaker.rosco.providers.aws')\nclass RoscoAWSConfiguration {\n\n  @Autowired\n  CloudProviderBakeHandlerRegistry cloudProviderBakeHandlerRegistry\n\n  @Autowired\n  AWSBakeHandler awsBakeHandler\n\n  @Bean\n  @ConfigurationProperties('aws.bakery-defaults')\n  AWSBakeryDefaults awsBakeryDefaults(@Value('${aws.bakery-defaults.default-virtualization-type:hvm}') BakeRequest.VmType defaultVirtualizationType) {\n    new AWSBakeryDefaults(defaultVirtualizationType: defaultVirtualizationType)\n  }\n\n  static class AWSBakeryDefaults {\n    String awsAccessKey\n    String awsSecretKey\n    String awsSubnetId\n    String awsVpcId\n    Boolean awsAssociatePublicIpAddress\n    String templateFile\n    BakeRequest.VmType defaultVirtualizationType\n    List<AWSOperatingSystemVirtualizationSettings> baseImages = []\n  }\n\n  static class AWSOperatingSystemVirtualizationSettings {\n    BakeOptions.BaseImage baseImage\n    List<AWSVirtualizationSettings> virtualizationSettings = []\n  }\n\n  @AutoClone(style = AutoCloneStyle.SIMPLE)\n  static class AWSVirtualizationSettings {\n    String region\n    BakeRequest.VmType virtualizationType\n    String instanceType\n    String sourceAmi\n    boolean mostRecent\n    String sshUserName\n    String winRmUserName\n    String spotPrice\n    String spotPriceAutoProduct\n  }\n\n  static class AWSNamedImage {\n    String imageName\n    AWSImageAttributes attributes\n    Map<String, Map<String, String>> tagsByImageId = [:]\n    Set<String> accounts = []\n    Map<String, Collection<String>> amis = [:]\n  }\n\n  static class AWSImageAttributes {\n    Date creationDate\n    BakeRequest.VmType virtualizationType\n  }\n\n  @PostConstruct\n  void init() {\n    cloudProviderBakeHandlerRegistry.register(BakeRequest.CloudProviderType.aws, awsBakeHandler)\n  }\n}\n", "/*\n * Copyright 2015 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.netflix.spinnaker.rosco.providers.aws\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.netflix.spinnaker.kork.core.RetrySupport\nimport com.netflix.spinnaker.rosco.api.Bake\nimport com.netflix.spinnaker.rosco.api.BakeRequest\nimport com.netflix.spinnaker.rosco.config.RoscoConfiguration\nimport com.netflix.spinnaker.rosco.providers.aws.config.RoscoAWSConfiguration\nimport com.netflix.spinnaker.rosco.providers.util.ImageNameFactory\nimport com.netflix.spinnaker.rosco.providers.util.PackageNameConverter\nimport com.netflix.spinnaker.rosco.providers.util.PackerCommandFactory\nimport com.netflix.spinnaker.rosco.providers.util.TestDefaults\nimport com.netflix.spinnaker.rosco.services.ClouddriverService\nimport spock.lang.Shared\nimport spock.lang.Specification\nimport spock.lang.Subject\nimport spock.lang.Unroll\n\nclass AWSBakeHandlerSpec extends Specification implements TestDefaults {\n\n  private static final String REGION = \"us-east-1\"\n  private static final String SOURCE_UBUNTU_HVM_IMAGE_NAME = \"ami-a123456b\"\n  private static final String SOURCE_UBUNTU_PV_IMAGE_NAME = \"ami-a654321b\"\n  private static final String SOURCE_BIONIC_HVM_IMAGE_NAME = \"bionic-base-123\"\n  private static final String SOURCE_BIONIC_HVM_IMAGE_ID = \"ami-b054321b\"\n  private static final String SOURCE_TRUSTY_HVM_IMAGE_NAME = \"ami-c456789d\"\n  private static final String SOURCE_AMZN_HVM_IMAGE_NAME = \"ami-8fcee4e5\"\n  private static final String SOURCE_WINDOWS_2012_R2_HVM_IMAGE_NAME = \"ami-21414f36\"\n\n  @Shared\n  String configDir = \"/some/path\"\n\n  @Shared\n  RoscoAWSConfiguration.AWSBakeryDefaults awsBakeryDefaults\n\n  @Shared\n  List<RoscoAWSConfiguration.AWSNamedImage> searchByNameResults\n\n  @Shared\n  RoscoConfiguration roscoConfiguration\n\n  void setupSpec() {\n    def awsBakeryDefaultsJson = [\n      templateFile: \"aws_template.json\",\n      defaultVirtualizationType: \"hvm\",\n      baseImages: [\n        [\n          baseImage: [\n            id: \"ubuntu\",\n            packageType: \"DEB\",\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_UBUNTU_HVM_IMAGE_NAME,\n              sshUserName: \"ubuntu\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ],\n            [\n              region: REGION,\n              virtualizationType: \"pv\",\n              instanceType: \"m3.medium\",\n              sourceAmi: SOURCE_UBUNTU_PV_IMAGE_NAME,\n              sshUserName: \"ubuntu\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n            id: \"bionic\",\n            packageType: \"DEB\"\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              sourceAmi: SOURCE_BIONIC_HVM_IMAGE_NAME\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n            id: \"trusty\",\n            packageType: \"DEB\",\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n              sshUserName: \"ubuntu\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n            id: \"trusty_custom_repo\",\n            packageType: \"DEB\",\n            customRepository: DEBIAN_CUSTOM_REPOSITORY\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n              sshUserName: \"ubuntu\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n           id: \"amzn\",\n           packageType: \"RPM\",\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_AMZN_HVM_IMAGE_NAME,\n              sshUserName: \"ec2-user\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n            id: \"windows-2012-r2\",\n            packageType: \"NUPKG\",\n            templateFile: \"aws-windows-2012-r2.json\"\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_WINDOWS_2012_R2_HVM_IMAGE_NAME,\n              winRmUserName: \"Administrator\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Windows (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n            baseImage: [\n                id: \"xenial\",\n                packageType: \"DEB\",\n            ],\n            virtualizationSettings: [\n                [\n                    region: REGION,\n                    virtualizationType: \"hvm\",\n                    instanceType: \"t2.micro\",\n                    sourceAmi: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-\",\n                    mostRecent: true,\n                    sshUserName: \"ubuntu\",\n                    spotPrice: \"auto\",\n                    spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n                ]\n            ]\n        ],\n        [\n            baseImage: [\n                id: \"xenial-not-recent\",\n                packageType: \"DEB\",\n            ],\n            virtualizationSettings: [\n                [\n                    region: REGION,\n                    virtualizationType: \"hvm\",\n                    instanceType: \"t2.micro\",\n                    sourceAmi: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-\",\n                    mostRecent: false,\n                    sshUserName: \"ubuntu\",\n                    spotPrice: \"auto\",\n                    spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n                ]\n            ]\n        ],\n      ]\n    ]\n\n    awsBakeryDefaults = new ObjectMapper().convertValue(awsBakeryDefaultsJson, RoscoAWSConfiguration.AWSBakeryDefaults)\n\n    searchByNameResults = [\n        new RoscoAWSConfiguration.AWSNamedImage(\n            imageName: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200126\",\n            attributes: new RoscoAWSConfiguration.AWSImageAttributes(\n                creationDate: new Date(2020, 1, 26),\n                virtualizationType: BakeRequest.VmType.hvm\n            ),\n            amis: [\n                (REGION): [\"ami-20200126\"]\n            ]\n        ),\n        new RoscoAWSConfiguration.AWSNamedImage(\n            imageName: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20201210\",\n            attributes: new RoscoAWSConfiguration.AWSImageAttributes(\n                creationDate: new Date(2020, 12, 10),\n                virtualizationType: BakeRequest.VmType.hvm\n            ),\n            amis: [\n                (REGION): [\"ami-20201210\"]\n            ]\n        ),\n        new RoscoAWSConfiguration.AWSNamedImage(\n            imageName: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20201009\",\n            attributes: new RoscoAWSConfiguration.AWSImageAttributes(\n                creationDate: new Date(2020, 10, 9),\n                virtualizationType: BakeRequest.VmType.hvm\n            ),\n            amis: [\n                (REGION): [\"ami-20201009\"]\n            ]\n        ),\n    ]\n  }\n\n  void 'can scrape packer logs for image name'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n        \"    amazon-ebs: Processing triggers for libc-bin ...\\n\" +\n        \"    amazon-ebs: ldconfig deferred processing now taking place\\n\" +\n        \"==> amazon-ebs: Stopping the source instance...\\n\" +\n        \"==> amazon-ebs: Waiting for the instance to stop...\\n\" +\n        \"==> amazon-ebs: Creating the AMI: kato-x8664-1422459898853-ubuntu\\n\" +\n        \"    amazon-ebs: AMI: ami-2c014644\\n\" +\n        \"==> amazon-ebs: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-ebs: Terminating the source AWS instance...\\n\" +\n        \"==> amazon-ebs: Deleting temporary security group...\\n\" +\n        \"==> amazon-ebs: Deleting temporary keypair...\\n\" +\n        \"Build 'amazon-ebs' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-ebs: AMIs were created:\\n\" +\n        \"\\n\" +\n        \"us-east-1: ami-2c014644\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        ami == \"ami-2c014644\"\n        image_name == \"kato-x8664-1422459898853-ubuntu\"\n      }\n  }\n\n  void 'can scrape packer 1.3+ logs for unencrypted image name'() {\n    setup:\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n    def logsContent =\n      \"==> amazon-ebs: Creating unencrypted AMI test-ami-123456789_123456789 from instance i-123456789\\n\" +\n      \"    amazon-ebs: AMI: ami-2c014644\\n\" +\n      \"==> amazon-ebs: Waiting for AMI to become ready...\\n\" +\n      \"==> amazon-ebs: Terminating the source AWS instance...\\n\" +\n      \"==> amazon-ebs: Cleaning up any extra volumes...\\n\" +\n      \"==> amazon-ebs: No volumes to clean up, skipping\\n\" +\n      \"==> amazon-ebs: Deleting temporary security group...\\n\" +\n      \"==> amazon-ebs: Deleting temporary keypair...\\n\" +\n      \"Build 'amazon-ebs' finished.\\n\" +\n      \"\\n\" +\n      \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n      \"--> amazon-ebs: AMIs were created:\\n\" +\n      \"\\n\" +\n      \"us-east-1: ami-2c014644\"\n\n    Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n    with (bake) {\n      id == \"123\"\n      ami == \"ami-2c014644\"\n      image_name == \"test-ami-123456789_123456789\"\n    }\n  }\n\n  void 'can scrape packer (amazon-chroot) logs for image name'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n        \"    amazon-chroot: Processing triggers for libc-bin ...\\n\" +\n        \"    amazon-chroot: ldconfig deferred processing now taking place\\n\" +\n        \"==> amazon-chroot: Stopping the source instance...\\n\" +\n        \"==> amazon-chroot: Waiting for the instance to stop...\\n\" +\n        \"==> amazon-chroot: Creating the AMI: kato-x8664-1422459898853-ubuntu\\n\" +\n        \"    amazon-chroot: AMI: ami-2c014644\\n\" +\n        \"==> amazon-chroot: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-chroot: Terminating the source AWS instance...\\n\" +\n        \"==> amazon-chroot: Deleting temporary security group...\\n\" +\n        \"==> amazon-chroot: Deleting temporary keypair...\\n\" +\n        \"Build 'amazon-chroot' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-chroot: AMIs were created:\\n\" +\n        \"\\n\" +\n        \"us-east-1: ami-2c014644\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        ami == \"ami-2c014644\"\n        image_name == \"kato-x8664-1422459898853-ubuntu\"\n      }\n  }\n\n  void 'can scrape copied amis'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n        \"==> amazon-chroot: Unmounting the root device...\\n\" +\n        \"==> amazon-chroot: Detaching EBS volume...\\n\" +\n        \"==> amazon-chroot: Creating snapshot...\\n\" +\n        \"    amazon-chroot: Snapshot ID: snap-06452c9aceea2437f\\n\" +\n        \"==> amazon-chroot: Registering the AMI...\\n\" +\n        \"==> amazon-chroot: AMI: ami-0450240c900844342\\n\" +\n        \"==> amazon-chroot: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-chroot: Copying AMI (ami-0450240c900844342) to other regions...\\n\" +\n        \"    amazon-chroot: Copying to: eu-north-1\\n\" +\n        \"    amazon-chroot: Avoiding copying AMI to duplicate region eu-west-1\\n\" +\n        \"    amazon-chroot: Waiting for all copies to complete...\\n\" +\n        \"==> amazon-chroot: Modifying attributes on snapshot (snap-06452c9aceea2437f)...\\n\" +\n        \"==> amazon-chroot: Modifying attributes on snapshot (snap-00a31182e306507b8)...\\n\" +\n        \"==> amazon-chroot: Adding tags to AMI (ami-076cf277a86b6e5b4)...\\n\" +\n        \"==> amazon-chroot: Tagging snapshot: snap-00a31182e306507b8\\n\" +\n        \"==> amazon-chroot: Creating snapshot tags\\n\" +\n        \"==> amazon-chroot: Adding tags to AMI (ami-0450240c900844342)...\\n\" +\n        \"==> amazon-chroot: Tagging snapshot: snap-06452c9aceea2437f\\n\" +\n        \"==> amazon-chroot: Creating snapshot tags\\n\" +\n        \"==> amazon-chroot: Deleting the created EBS volume...\\n\" +\n        \"Build 'amazon-chroot' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-chroot: AMIs were created:\\n\" +\n        \"eu-north-1: ami-076cf277a86b6e5b4\\n\" +\n        \"eu-west-1: ami-0450240c900844342\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(\"eu-west-1\", \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        ami == \"ami-0450240c900844342\"\n\n        artifacts.size() == 2\n        artifacts.find{it.location == \"eu-north-1\"}.reference == \"ami-076cf277a86b6e5b4\"\n        artifacts.find{it.location == \"eu-west-1\"}.reference == \"ami-0450240c900844342\"\n      }\n  }\n\n  void 'can scrape packer (Windows) logs for image name'() {\n    setup:\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n    def logsContent =\n      \"    amazon-ebs: Chocolatey installed 2/2 packages. 0 packages failed.\\n\" +\n        \"    amazon-ebs: See the log for details (C:\\\\ProgramData\\\\chocolatey\\\\logs\\\\chocolatey.log).\\n\" +\n        \"==> amazon-ebs: Stopping the source instance...\\n\" +\n        \"==> amazon-ebs: Waiting for the instance to stop...\\n\" +\n        \"==> amazon-ebs: Creating the AMI: googlechrome-all-20170121212839-windows-2012-r2\\n\" +\n        \"    amazon-ebs: AMI: ami-ca32c7dc\\n\" +\n        \"==> amazon-ebs: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-ebs: Adding tags to AMI (ami-ca32c7dc)...\\n\" +\n        \"    amazon-ebs: Adding tag: \\\"appversion\\\": \\\"\\\"\\n\" +\n        \"    amazon-ebs: Adding tag: \\\"build_host\\\": \\\"\\\"\\n\" +\n        \"    amazon-ebs: Adding tag: \\\"build_info_url\\\": \\\"\\\"\\n\" +\n        \"==> amazon-ebs: Tagging snapshot: snap-08b92184c6506720c\\n\" +\n        \"==> amazon-ebs: Terminating the source AWS instance...\\n\" +\n        \"==> amazon-ebs: Cleaning up any extra volumes...\\n\" +\n        \"==> amazon-ebs: No volumes to clean up, skipping\\n\" +\n        \"==> amazon-ebs: Deleting temporary security group...\\n\" +\n        \"==> amazon-ebs: Deleting temporary keypair...\\n\" +\n        \"Build 'amazon-ebs' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-ebs: AMIs were created:\\n\" +\n        \"\\n\" +\n        \"us-east-1: ami-ca32c7dc\"\n\n    Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n    with (bake) {\n      id == \"123\"\n      ami == \"ami-ca32c7dc\"\n      image_name == \"googlechrome-all-20170121212839-windows-2012-r2\"\n    }\n  }\n\n  void 'scraping returns null for missing image id'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n        \"    amazon-ebs: Processing triggers for libc-bin ...\\n\" +\n        \"    amazon-ebs: ldconfig deferred processing now taking place\\n\" +\n        \"==> amazon-ebs: Stopping the source instance...\\n\" +\n        \"==> amazon-ebs: Waiting for the instance to stop...\\n\" +\n        \"==> amazon-ebs: Creating the AMI: kato-x8664-1422459898853-ubuntu\\n\" +\n        \"    amazon-ebs: AMI: ami-2c014644\\n\" +\n        \"==> amazon-ebs: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-ebs: Terminating the source AWS instance...\\n\" +\n        \"==> amazon-ebs: Deleting temporary security group...\\n\" +\n        \"==> amazon-ebs: Deleting temporary keypair...\\n\" +\n        \"Build 'amazon-ebs' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-ebs: AMIs were created:\\n\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        !ami\n        image_name == \"kato-x8664-1422459898853-ubuntu\"\n      }\n  }\n\n  void 'scraping returns null for missing image name'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n          \"    amazon-ebs: Processing triggers for libc-bin ...\\n\" +\n          \"    amazon-ebs: ldconfig deferred processing now taking place\\n\" +\n          \"==> amazon-ebs: Stopping the source instance...\\n\" +\n          \"==> amazon-ebs: Waiting for the instance to stop...\\n\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        !ami\n        !image_name\n      }\n  }\n\n  void 'looks up base ami id from name'() {\n    def packerCommandFactoryMock = Mock(PackerCommandFactory)\n    def imageNameFactoryMock = Mock(ImageNameFactory)\n    def clouddriverService = Mock(ClouddriverService)\n    def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n      package_name: PACKAGES_NAME,\n      base_os: \"bionic\",\n      base_label: \"release\",\n      vm_type: BakeRequest.VmType.hvm,\n      cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n      awsBakeryDefaults: awsBakeryDefaults,\n      imageNameFactory: imageNameFactoryMock,\n      packerCommandFactory: packerCommandFactoryMock,\n      clouddriverService: clouddriverService,\n      retrySupport: new NoSleepRetry(),\n      defaultAccount: \"test\",\n      debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n    def vmSettings = awsBakeHandler.findVirtualizationSettings(REGION, bakeRequest)\n\n    then:\n    1 * clouddriverService.findAmazonImageByName(_, _, _) >> [\n      new RoscoAWSConfiguration.AWSNamedImage(\n        imageName: SOURCE_BIONIC_HVM_IMAGE_NAME,\n        attributes: new RoscoAWSConfiguration.AWSImageAttributes(virtualizationType: BakeRequest.VmType.hvm),\n        amis: [\n          (REGION): [ SOURCE_BIONIC_HVM_IMAGE_ID ]\n        ]\n      )\n    ]\n\n    vmSettings.sourceAmi == SOURCE_BIONIC_HVM_IMAGE_ID\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using default vm type'() {\n    setup:\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        aws_source_ami: SOURCE_UBUNTU_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using ami lookup by name'() {\n    setup:\n      def clouddriverService = Stub(ClouddriverService) {\n        findAmazonImageByName(_, _, _) >> {\n          return searchByNameResults\n        }\n      }\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: base_os,\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        aws_source_ami: expected,\n        aws_target_ami: targetImageName,\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         clouddriverService: clouddriverService,\n                                                         retrySupport: new RetrySupport(),\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n\n    where:\n    base_os             | expected\n    \"xenial\"            | \"ami-20201210\"\n    \"xenial-not-recent\" | \"ami-20200126\"\n  }\n\n  void 'produces packer command with all required parameters for amzn, using default vm type'() {\n    setup:\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"amzn\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-amzn\"\n      def osPackages = parseRpmOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ec2-user\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_AMZN_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: YUM_REPOSITORY,\n        package_type: RPM_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir,\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         yumRepository: YUM_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, RPM_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(RPM_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for amzn, with sudo'() {\n    setup:\n      def awsBakeryDefaultsJson = [\n        templateFile: \"aws-chroot.json\",\n        defaultVirtualizationType: \"hvm\",\n        baseImages: [\n          [\n            baseImage: [\n              id: \"amzn\",\n              packageType: \"RPM\",\n            ],\n            virtualizationSettings: [\n              [\n                region: REGION,\n                virtualizationType: \"hvm\",\n                instanceType: \"t2.micro\",\n                sourceAmi: SOURCE_AMZN_HVM_IMAGE_NAME,\n                sshUserName: \"ec2-user\"\n              ]\n            ]\n          ]\n        ]\n      ]\n      RoscoAWSConfiguration.AWSBakeryDefaults localAwsBakeryDefaults = new ObjectMapper().convertValue(awsBakeryDefaultsJson, RoscoAWSConfiguration.AWSBakeryDefaults)\n\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n        package_name: PACKAGES_NAME,\n        base_os: \"amzn\",\n        vm_type: BakeRequest.VmType.hvm,\n        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-amzn\"\n      def osPackages = parseRpmOsPackageNames(PACKAGES_NAME)\n\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ec2-user\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_AMZN_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        repository: YUM_REPOSITORY,\n        package_type: RPM_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n        awsBakeryDefaults: localAwsBakeryDefaults,\n        imageNameFactory: imageNameFactoryMock,\n        packerCommandFactory: packerCommandFactoryMock,\n        templatesNeedingRoot: [ \"aws-chroot.json\" ],\n        yumRepository: YUM_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, RPM_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(RPM_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"sudo\", parameterMap, null, \"$configDir/aws-chroot.json\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using default vm type, and overriding base ami'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        base_ami: \"ami-12345678\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: \"ami-12345678\",\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using explicit vm type'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.pv,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"m3.medium\",\n        aws_source_ami: SOURCE_UBUNTU_PV_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using explicit vm type, and overriding template filename'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.pv,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        template_file_name: \"somePackerTemplate.json\")\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"m3.medium\",\n        aws_source_ami: SOURCE_UBUNTU_PV_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/somePackerTemplate.json\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using explicit vm type, and adding extended attributes'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.pv,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        extended_attributes: [someAttr1: \"someValue1\", someAttr2: \"someValue2\"])\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"m3.medium\",\n        aws_source_ami: SOURCE_UBUNTU_PV_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir,\n        someAttr1: \"someValue1\",\n        someAttr2: \"someValue2\"\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'sends spot_price_auto_product iff spot_price is set to auto'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest()\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      def virtualizationSettings = [\n              region: \"us-east-1\",\n              spotPrice: \"0\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\",\n      ]\n      def parameterMap = awsBakeHandler.buildParameterMap(REGION, virtualizationSettings, \"\", bakeRequest, \"\")\n\n    then:\n      parameterMap.aws_spot_price == \"0\"\n      !parameterMap.containsValue(\"aws_spot_price_auto_product\")\n\n    when:\n      virtualizationSettings = [\n              region: \"us-east-1\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\",\n      ]\n      parameterMap = awsBakeHandler.buildParameterMap(REGION, virtualizationSettings, \"\", bakeRequest, \"\")\n\n    then:\n      parameterMap.aws_spot_price == \"auto\"\n      parameterMap.aws_spot_price_auto_product == \"Linux/UNIX (Amazon VPC)\"\n  }\n  void 'overrides repository for images with custom repository property'() {\n    setup:\n    def imageNameFactoryMock = Mock(ImageNameFactory)\n    def packerCommandFactoryMock = Mock(PackerCommandFactory)\n    def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n            package_name: PACKAGES_NAME,\n            base_os: \"trusty_custom_repo\",\n            vm_type: BakeRequest.VmType.hvm,\n            cloud_provider_type: BakeRequest.CloudProviderType.aws)\n    def targetImageName = \"kato-x8664-timestamp-trusty\"\n    def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n    def parameterMap = [\n            aws_region: REGION,\n            aws_ssh_username: \"ubuntu\",\n            aws_instance_type: \"t2.micro\",\n            aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n            aws_target_ami: targetImageName,\n            aws_spot_price: \"auto\",\n            aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n            repository: DEBIAN_CUSTOM_REPOSITORY,\n            package_type: DEB_PACKAGE_TYPE.util.packageType,\n            packages: PACKAGES_NAME,\n            configDir: configDir\n    ]\n\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n            awsBakeryDefaults: awsBakeryDefaults,\n            imageNameFactory: imageNameFactoryMock,\n            packerCommandFactory: packerCommandFactoryMock,\n            debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n    awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n    1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n    1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n    1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n    1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for trusty, using explicit vm type'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-trusty\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters including appversion, build_host and build_info_url for trusty'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def fullyQualifiedPackageName = \"nflx-djangobase-enhanced_0.1-h12.170cdbd_all\"\n      def appVersionStr = \"nflx-djangobase-enhanced-0.1-170cdbd.h12\"\n      def buildHost = \"http://some-build-server:8080\"\n      def buildInfoUrl = \"http://some-build-server:8080/repogroup/repo/builds/320282\"\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: fullyQualifiedPackageName,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        build_host: buildHost,\n                                        build_info_url: buildInfoUrl,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-trusty\"\n      def osPackages = [PackageNameConverter.buildOsPackageName(DEB_PACKAGE_TYPE, fullyQualifiedPackageName)]\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: fullyQualifiedPackageName,\n        configDir: configDir,\n        appversion: appVersionStr,\n        build_host: buildHost,\n        build_info_url: buildInfoUrl\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> appVersionStr\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> fullyQualifiedPackageName\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters including upgrade'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        upgrade: true)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_UBUNTU_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        upgrade: true,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer (Windows) command with all required parameters'() {\n    setup:\n    def imageNameFactoryMock = Mock(ImageNameFactory)\n    def packerCommandFactoryMock = Mock(PackerCommandFactory)\n    def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n      package_name: NUPKG_PACKAGES_NAME,\n      base_os: \"windows-2012-r2\",\n      vm_type: BakeRequest.VmType.hvm,\n      cloud_provider_type: BakeRequest.CloudProviderType.aws)\n    def targetImageName = \"googlechrome-all-20170121212839-windows-2012-r2\"\n    def osPackages = parseNupkgOsPackageNames(NUPKG_PACKAGES_NAME)\n    def parameterMap = [\n      aws_region: REGION,\n      aws_winrm_username: \"Administrator\",\n      aws_instance_type: \"t2.micro\",\n      aws_source_ami: SOURCE_WINDOWS_2012_R2_HVM_IMAGE_NAME,\n      aws_target_ami: targetImageName,\n      aws_spot_price: \"auto\",\n      aws_spot_price_auto_product: \"Windows (Amazon VPC)\",\n      repository: CHOCOLATEY_REPOSITORY,\n      package_type: NUPKG_PACKAGE_TYPE.util.packageType,\n      packages: NUPKG_PACKAGES_NAME,\n      configDir: configDir\n    ]\n    def operatingSystemVirtualizationSettings = awsBakeryDefaults.baseImages.find { it?.baseImage?.id == bakeRequest.base_os}\n\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n      awsBakeryDefaults: awsBakeryDefaults,\n      imageNameFactory: imageNameFactoryMock,\n      packerCommandFactory: packerCommandFactoryMock,\n      chocolateyRepository: CHOCOLATEY_REPOSITORY)\n\n    when:\n    awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n    1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n    1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, NUPKG_PACKAGE_TYPE) >> null\n    1 * imageNameFactoryMock.buildPackagesParameter(NUPKG_PACKAGE_TYPE, osPackages) >> NUPKG_PACKAGES_NAME\n    1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$operatingSystemVirtualizationSettings.baseImage.templateFile\")\n  }\n\n  void 'throws exception when virtualization settings are not found for specified operating system'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      IllegalArgumentException e = thrown()\n      e.message == \"No virtualization settings found for 'centos'.\"\n  }\n\n  void 'throws exception when virtualization settings are not found for specified region, operating system, and vm type'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.pv,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      IllegalArgumentException e = thrown()\n      e.message == \"No virtualization settings found for region 'us-east-1', operating system 'trusty', and vm type 'pv'.\"\n  }\n\n  void 'produce a default AWS bakeKey without base ami'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWDisabled\"\n  }\n\n  @Unroll\n  void 'produce a default AWS bakeKey without base ami, even when no packages are specified'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: packageName,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos::us-east-1:hvm:enhancedNWDisabled\"\n\n    where:\n      packageName << [null, \"\"]\n  }\n\n  void 'produce a default AWS bakeKey with base ami'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        base_ami: \"ami-123456\")\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos:ami-123456:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWDisabled\"\n  }\n\n  void 'produce a default AWS bakeKey with enhanced network enabled'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        enhanced_networking: true)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWEnabled\"\n  }\n\n  void 'produce a default AWS bakeKey with ami name'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        ami_name: \"kato-app\")\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos:kato-app:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWDisabled\"\n  }\n\n  void 'do not consider ami suffix when composing bake key'() {\n    setup:\n      def bakeRequest1 = new BakeRequest(user: \"someuser@gmail.com\",\n                                         package_name: PACKAGES_NAME,\n                                         base_os: \"centos\",\n                                         vm_type: BakeRequest.VmType.hvm,\n                                         cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                         ami_suffix: \"1.0\")\n      def bakeRequest2 = new BakeRequest(user: \"someuser@gmail.com\",\n                                         package_name: PACKAGES_NAME,\n                                         base_os: \"centos\",\n                                         vm_type: BakeRequest.VmType.hvm,\n                                         cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                         ami_suffix: \"2.0\")\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey1 = awsBakeHandler.produceBakeKey(REGION, bakeRequest1)\n      String bakeKey2 = awsBakeHandler.produceBakeKey(REGION, bakeRequest2)\n\n    then:\n      bakeKey1 == \"bake:aws:centos:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWDisabled\"\n      bakeKey2 == bakeKey1\n  }\n\n  void 'produces packer command with all required parameters including shared_with multiple accounts as extended_attribute'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def fullyQualifiedPackageName = \"nflx-djangobase-enhanced_0.1-h12.170cdbd_all\"\n      def appVersionStr = \"nflx-djangobase-enhanced-0.1-170cdbd.h12\"\n      def buildHost = \"http://some-build-server:8080\"\n      def buildInfoUrl = \"http://some-build-server:8080/repogroup/repo/builds/320282\"\n      def share_account = \"000001, 000002\"\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: fullyQualifiedPackageName,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        build_host: buildHost,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        extended_attributes: [share_with: share_account],\n                                        build_info_url: buildInfoUrl)\n      def osPackages = parseDebOsPackageNames(fullyQualifiedPackageName)\n      def targetImageName = \"kato-x8664-timestamp-trusty\"\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        repository: DEBIAN_REPOSITORY,\n        packages: fullyQualifiedPackageName,\n        share_with_1: \"000001\",\n        share_with_2: \"000002\",\n        configDir: configDir,\n        appversion: appVersionStr,\n        build_host: buildHost,\n        build_info_url: buildInfoUrl\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY,\n                                                         yumRepository: YUM_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> appVersionStr\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> fullyQualifiedPackageName\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters including copy_to multiple regions as extended_attribute'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def fullyQualifiedPackageName = \"nflx-djangobase-enhanced_0.1-h12.170cdbd_all\"\n      def appVersionStr = \"nflx-djangobase-enhanced-0.1-170cdbd.h12\"\n      def buildHost = \"http://some-build-server:8080\"\n      def buildInfoUrl = \"http://some-build-server:8080/repogroup/repo/builds/320282\"\n      def copy_regions = \"us-west-1, us-west-2\"\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: fullyQualifiedPackageName,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        build_host: buildHost,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        extended_attributes: [copy_to: copy_regions],\n                                        build_info_url: buildInfoUrl)\n      def osPackages = parseDebOsPackageNames(fullyQualifiedPackageName)\n      def targetImageName = \"kato-x8664-timestamp-trusty\"\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        repository: DEBIAN_REPOSITORY,\n        packages: fullyQualifiedPackageName,\n        copy_to_1: \"us-west-1\",\n        copy_to_2: \"us-west-2\",\n        configDir: configDir,\n        appversion: appVersionStr,\n        build_host: buildHost,\n        build_info_url: buildInfoUrl\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY,\n                                                         yumRepository: YUM_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> appVersionStr\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> fullyQualifiedPackageName\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  static class NoSleepRetry extends RetrySupport {\n    void sleep(long time) {}\n  }\n}\n", "package com.netflix.spinnaker.rosco.providers.util\n\nimport com.netflix.spinnaker.rosco.config.RoscoPackerConfigurationProperties\nimport com.netflix.spinnaker.rosco.jobs.JobRequest\nimport org.apache.commons.exec.CommandLine\nimport spock.lang.Shared\nimport spock.lang.Specification\nimport spock.lang.Unroll\n\nclass LocalJobFriendlyPackerCommandFactorySpec extends Specification implements TestDefaults {\n\n  @Shared\n  LocalJobFriendlyPackerCommandFactory packerCommandFactory = new LocalJobFriendlyPackerCommandFactory(\n    roscoPackerConfigurationProperties: new RoscoPackerConfigurationProperties()\n  )\n\n  @Unroll\n  void \"packerCommand handles baseCommand as null, empty string and real string\"() {\n    setup:\n      def parameterMap = [\n        something: something\n      ]\n\n    when:\n      def packerCommand = packerCommandFactory.buildPackerCommand(baseCommand, parameterMap, null, \"\")\n\n    then:\n      packerCommand == expectedPackerCommand\n\n    where:\n      something | baseCommand | expectedPackerCommand\n      \"sudo\"    | \"sudo\"      | [\"sudo\", \"packer\", \"build\", \"-color=false\", \"-var\", \"something=sudo\"]\n      \"null\"    | null        | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=null\"]\n      \"empty\"   | \"\"          | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=empty\"]\n  }\n\n  @Unroll\n  void \"packerCommand includes -varFileName only when 'varFile' is specified; varFile is #varFile\"() {\n    setup:\n      def parameterMap = [\n        something: \"some-var\"\n      ]\n\n    when:\n      def packerCommand = packerCommandFactory.buildPackerCommand(\"\", parameterMap, varFile, \"\")\n\n    then:\n      packerCommand == expectedPackerCommand\n\n    where:\n      varFile            | expectedPackerCommand\n      null               | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=some-var\"]\n      \"\"                 | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=some-var\"]\n      \"someVarFile.json\" | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=some-var\", \"-var-file=someVarFile.json\"]\n  }\n\n  @Unroll\n  void \"packerCommand includes parameter with non-quoted string\"() {\n\n    when:\n    def packerCommand = packerCommandFactory.buildPackerCommand(\"\", parameterMap, null, \"\")\n\n    then:\n    packerCommand == expectedPackerCommand\n\n    where:\n    parameterMap                      | expectedPackerCommand\n    [packages: \"package1 package2\"]   | [\"packer\", \"build\", \"-color=false\", \"-var\", \"packages=package1 package2\"]\n  }\n\n  @Unroll\n  void 'validate packer command line' () {\n    setup:\n\n    when:\n      def packerCommand = packerCommandFactory.buildPackerCommand(\"\", parameterMap, null, \"\")\n      def jobRequest = new JobRequest(tokenizedCommand: packerCommand, maskedParameters: maskedPackerParameters, jobId: SOME_UUID)\n      def commandLine = new CommandLine(jobRequest.tokenizedCommand[0])\n      def arguments = (String []) Arrays.copyOfRange(jobRequest.tokenizedCommand.toArray(), 1, jobRequest.tokenizedCommand.size())\n      commandLine.addArguments(arguments, false)\n      def g = commandLine.toString()\n      def cmdLineList =  commandLine.toStrings().toList()\n\n\n    then:\n      cmdLineList  == expectedCommandLine\n\n    where:\n      parameterMap                          | maskedPackerParameters | expectedCommandLine\n      [packages: \"package1 package2\"]       | []                     | [\"packer\", \"build\", \"-color=false\", \"-var\", \"packages=package1 package2\"]\n  }\n}\n"], "fixing_code": ["/*\n * Copyright 2015 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.netflix.spinnaker.rosco.providers.aws\n\nimport com.netflix.spinnaker.kork.artifacts.model.Artifact\nimport com.netflix.spinnaker.kork.core.RetrySupport\nimport com.netflix.spinnaker.rosco.api.Bake\nimport com.netflix.spinnaker.rosco.api.BakeOptions\nimport com.netflix.spinnaker.rosco.api.BakeRequest\nimport com.netflix.spinnaker.rosco.api.BakeRequest.VmType\nimport com.netflix.spinnaker.rosco.providers.CloudProviderBakeHandler\nimport com.netflix.spinnaker.rosco.providers.aws.config.RoscoAWSConfiguration\nimport com.netflix.spinnaker.rosco.providers.util.ImageNameFactory\nimport com.netflix.spinnaker.rosco.services.ClouddriverService\nimport com.netflix.spinnaker.security.AuthenticatedRequest\nimport groovy.util.logging.Slf4j\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.stereotype.Component\n\nimport java.time.Duration\nimport java.util.regex.Pattern\n\n@Component\n@Slf4j\npublic class AWSBakeHandler extends CloudProviderBakeHandler {\n\n  private static final String IMAGE_NAME_TOKEN = \"amazon-(chroot|ebs): Creating the AMI:\"\n  private static final String UNENCRYPTED_IMAGE_NAME_TOKEN = \"(==> |)amazon-(chroot|ebs): Creating unencrypted AMI\"\n  // AMI_EXTRACTOR finds amis from the format produced by packer ie:\n  // eu-north-1: ami-076cf277a86b6e5b4\n  // us-east-1: ami-2c014644\n  private static final Pattern AMI_ID = Pattern.compile(\"^ami-[a-z0-9]+\\$\")\n  private static final String AMI_EXTRACTOR = \"[a-z]{2}-[a-z]{2,10}-[0-9]:\\\\sami-[a-z0-9]{8,}\"\n  private static final String AMI_TYPE = \"aws/image\"\n  private static final String PACKER_BUILD_FINISHED = \"==> Builds finished. The artifacts of successful builds are:\"\n\n  ImageNameFactory imageNameFactory = new ImageNameFactory()\n\n  @Autowired\n  RoscoAWSConfiguration.AWSBakeryDefaults awsBakeryDefaults\n\n  @Autowired\n  ClouddriverService clouddriverService\n\n  @Autowired\n  RetrySupport retrySupport\n\n  @Value('${bakeAccount}')\n  String defaultAccount\n\n  @Override\n  def getBakeryDefaults() {\n    return awsBakeryDefaults\n  }\n\n  @Override\n  BakeOptions getBakeOptions() {\n    new BakeOptions(\n      cloudProvider: BakeRequest.CloudProviderType.aws,\n      baseImages: awsBakeryDefaults?.baseImages?.collect { it.baseImage }\n    )\n  }\n\n  @Override\n  String produceProviderSpecificBakeKeyComponent(String region, BakeRequest bakeRequest) {\n    if (!bakeRequest.vm_type) {\n      bakeRequest = bakeRequest.copyWith(vm_type: awsBakeryDefaults.defaultVirtualizationType)\n    }\n\n    bakeRequest.with {\n      def enhancedNetworkingSegment = enhanced_networking ? 'enhancedNWEnabled' : 'enhancedNWDisabled'\n\n      return \"$region:$vm_type:$enhancedNetworkingSegment\"\n    }\n  }\n\n  @Override\n  def findVirtualizationSettings(String region, BakeRequest bakeRequest) {\n    BakeRequest.VmType vm_type = bakeRequest.vm_type ?: awsBakeryDefaults.defaultVirtualizationType\n    String account = bakeRequest.account_name ?: defaultAccount\n\n    def awsOperatingSystemVirtualizationSettings = awsBakeryDefaults?.baseImages.find {\n      it.baseImage.id == bakeRequest.base_os\n    }\n\n    if (!awsOperatingSystemVirtualizationSettings) {\n      throw new IllegalArgumentException(\"No virtualization settings found for '$bakeRequest.base_os'.\")\n    }\n\n    def awsVirtualizationSettings = awsOperatingSystemVirtualizationSettings?.virtualizationSettings.find {\n      it.region == region && it.virtualizationType == vm_type\n    }\n\n    if (!awsVirtualizationSettings) {\n      throw new IllegalArgumentException(\"No virtualization settings found for region '$region', operating system '$bakeRequest.base_os', and vm type '$vm_type'.\")\n    }\n\n    awsVirtualizationSettings = awsVirtualizationSettings.clone()\n\n    if (bakeRequest.base_ami) {\n      awsVirtualizationSettings.sourceAmi = bakeRequest.base_ami\n    }\n\n    if (!awsVirtualizationSettings.sourceAmi) {\n      String base = lookupBaseByDynamicProperty(region, bakeRequest)\n      if (base != null && !base.matches(AMI_ID)) {\n        awsVirtualizationSettings.sourceAmi = lookupAmiByName(base, region, account, vm_type, awsVirtualizationSettings.mostRecent)\n      } else {\n        awsVirtualizationSettings.sourceAmi = base\n      }\n    } else if (!awsVirtualizationSettings.sourceAmi.matches(AMI_ID)) {\n      awsVirtualizationSettings.sourceAmi = lookupAmiByName(\n        awsVirtualizationSettings.sourceAmi, region, account, vm_type, awsVirtualizationSettings.mostRecent)\n    }\n\n    if (awsVirtualizationSettings.sourceAmi == null) {\n      throw new IllegalArgumentException(\"No base image found for os '$bakeRequest.base_os', vm type '$vm_type', \" +\n        \"region '$region', label: '$bakeRequest.base_label', account: '$account'\")\n    }\n\n    return awsVirtualizationSettings\n  }\n\n  @Override\n  Map buildParameterMap(String region, def awsVirtualizationSettings, String imageName, BakeRequest bakeRequest, String appVersionStr) {\n    def parameterMap = [\n      aws_region       : region,\n      aws_instance_type: awsVirtualizationSettings.instanceType,\n      aws_source_ami   : awsVirtualizationSettings.sourceAmi,\n      aws_target_ami   : imageName\n    ]\n\n    if (awsVirtualizationSettings.sshUserName) {\n      parameterMap.aws_ssh_username = awsVirtualizationSettings.sshUserName\n    }\n\n    if (awsVirtualizationSettings.winRmUserName) {\n      parameterMap.aws_winrm_username = awsVirtualizationSettings.winRmUserName\n    }\n\n    if (awsVirtualizationSettings.spotPrice) {\n      parameterMap.aws_spot_price = awsVirtualizationSettings.spotPrice\n    }\n\n    if (awsVirtualizationSettings.spotPrice == \"auto\" && awsVirtualizationSettings.spotPriceAutoProduct) {\n      parameterMap.aws_spot_price_auto_product = awsVirtualizationSettings.spotPriceAutoProduct\n    }\n\n    if (awsBakeryDefaults.awsAccessKey && awsBakeryDefaults.awsSecretKey) {\n      parameterMap.aws_access_key = awsBakeryDefaults.awsAccessKey\n      parameterMap.aws_secret_key = awsBakeryDefaults.awsSecretKey\n    }\n\n    if (awsBakeryDefaults.awsSubnetId) {\n      parameterMap.aws_subnet_id = awsBakeryDefaults.awsSubnetId\n    }\n\n    if (awsBakeryDefaults.awsVpcId) {\n      parameterMap.aws_vpc_id = awsBakeryDefaults.awsVpcId\n    }\n\n    if (awsBakeryDefaults.awsAssociatePublicIpAddress != null) {\n      parameterMap.aws_associate_public_ip_address = awsBakeryDefaults.awsAssociatePublicIpAddress\n    }\n\n    if (bakeRequest.enhanced_networking) {\n      parameterMap.aws_ena_support = true\n    }\n\n    if (bakeRequest.build_info_url) {\n      parameterMap.build_info_url = bakeRequest.build_info_url\n    }\n\n    if (appVersionStr) {\n      parameterMap.appversion = appVersionStr\n    }\n\n    return parameterMap\n  }\n\n  @Override\n  String getTemplateFileName(BakeOptions.BaseImage baseImage) {\n    return baseImage.templateFile ?: awsBakeryDefaults.templateFile\n  }\n\n  @Override\n  Bake scrapeCompletedBakeResults(String region, String bakeId, String logsContent) {\n    String amiId\n    String imageName\n    List<Artifact> artifacts = new ArrayList<>()\n    // TODO(duftler): Presently scraping the logs for the image name/id. Would be better to not be reliant on the log\n    // format not changing. Resolve this by storing bake details in redis and querying oort for amiId from amiName.\n    boolean foundAmisCreated = false\n    logsContent.eachLine { String line ->\n      if (line =~ IMAGE_NAME_TOKEN) {\n        imageName = line.split(\" \").last()\n      } else if (line =~ UNENCRYPTED_IMAGE_NAME_TOKEN) {\n        line = line.replaceAll(UNENCRYPTED_IMAGE_NAME_TOKEN, \"\").trim()\n        imageName = line.split(\" \").first()\n      } else if (line =~ \"$region:\") {\n        amiId = line.split(\" \").last()\n      } else if (line =~ PACKER_BUILD_FINISHED) {\n        foundAmisCreated = true\n      }\n\n      if (foundAmisCreated && line =~ AMI_EXTRACTOR) {\n        Artifact a = Artifact.builder()\n          .type(AMI_TYPE)\n          .location(line.split(\": \").first())\n          .reference(line.split(\": \").last())\n          .build()\n        artifacts.add(a)\n      }\n    }\n\n    return new Bake(id: bakeId, ami: amiId, image_name: imageName, artifacts: artifacts)\n  }\n\n  @Override\n  List<String> getMaskedPackerParameters() {\n    return awsBakeryDefaults.maskedPackerParameters\n  }\n\n  private String lookupAmiByName(String name, String region, String account, VmType vmType, boolean mostRecent) {\n    def images = AuthenticatedRequest.allowAnonymous(\n      {\n        retrySupport.retry({\n          clouddriverService.findAmazonImageByName(name, account, region)\n        }, 3, Duration.ofSeconds(3), false)\n      }\n    )\n\n    def image\n    if (mostRecent) {\n      def matchingImages = images?.findAll { it?.attributes?.virtualizationType == vmType }\n      image = matchingImages?.max {it?.attributes?.creationDate }\n    } else {\n      image = images?.find { it.attributes.virtualizationType == vmType }\n    }\n\n    return image?.amis?.get(region)?.first()\n  }\n}\n", "/*\n * Copyright 2015 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.netflix.spinnaker.rosco.providers.aws.config\n\nimport com.netflix.spinnaker.rosco.api.BakeOptions\nimport com.netflix.spinnaker.rosco.api.BakeRequest\nimport com.netflix.spinnaker.rosco.providers.aws.AWSBakeHandler\nimport com.netflix.spinnaker.rosco.providers.registry.CloudProviderBakeHandlerRegistry\nimport groovy.transform.AutoClone\nimport groovy.transform.AutoCloneStyle\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.ComponentScan\nimport org.springframework.context.annotation.Configuration\n\nimport javax.annotation.PostConstruct\n\n@Configuration\n@ConditionalOnProperty('aws.enabled')\n@ComponentScan('com.netflix.spinnaker.rosco.providers.aws')\nclass RoscoAWSConfiguration {\n\n  @Autowired\n  CloudProviderBakeHandlerRegistry cloudProviderBakeHandlerRegistry\n\n  @Autowired\n  AWSBakeHandler awsBakeHandler\n\n  @Bean\n  @ConfigurationProperties('aws.bakery-defaults')\n  AWSBakeryDefaults awsBakeryDefaults(@Value('${aws.bakery-defaults.default-virtualization-type:hvm}') BakeRequest.VmType defaultVirtualizationType) {\n    new AWSBakeryDefaults(defaultVirtualizationType: defaultVirtualizationType)\n  }\n\n  static class AWSBakeryDefaults {\n    String awsAccessKey\n    String awsSecretKey\n    String awsSubnetId\n    String awsVpcId\n    Boolean awsAssociatePublicIpAddress\n    String templateFile\n    BakeRequest.VmType defaultVirtualizationType\n    List<AWSOperatingSystemVirtualizationSettings> baseImages = []\n    List<String> maskedPackerParameters = [ 'aws_access_key', 'aws_secret_key' ]\n  }\n\n  static class AWSOperatingSystemVirtualizationSettings {\n    BakeOptions.BaseImage baseImage\n    List<AWSVirtualizationSettings> virtualizationSettings = []\n  }\n\n  @AutoClone(style = AutoCloneStyle.SIMPLE)\n  static class AWSVirtualizationSettings {\n    String region\n    BakeRequest.VmType virtualizationType\n    String instanceType\n    String sourceAmi\n    boolean mostRecent\n    String sshUserName\n    String winRmUserName\n    String spotPrice\n    String spotPriceAutoProduct\n  }\n\n  static class AWSNamedImage {\n    String imageName\n    AWSImageAttributes attributes\n    Map<String, Map<String, String>> tagsByImageId = [:]\n    Set<String> accounts = []\n    Map<String, Collection<String>> amis = [:]\n  }\n\n  static class AWSImageAttributes {\n    Date creationDate\n    BakeRequest.VmType virtualizationType\n  }\n\n  @PostConstruct\n  void init() {\n    cloudProviderBakeHandlerRegistry.register(BakeRequest.CloudProviderType.aws, awsBakeHandler)\n  }\n}\n", "/*\n * Copyright 2015 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.netflix.spinnaker.rosco.providers.aws\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.netflix.spinnaker.kork.core.RetrySupport\nimport com.netflix.spinnaker.rosco.api.Bake\nimport com.netflix.spinnaker.rosco.api.BakeRequest\nimport com.netflix.spinnaker.rosco.config.RoscoConfiguration\nimport com.netflix.spinnaker.rosco.providers.aws.config.RoscoAWSConfiguration\nimport com.netflix.spinnaker.rosco.providers.util.ImageNameFactory\nimport com.netflix.spinnaker.rosco.providers.util.PackageNameConverter\nimport com.netflix.spinnaker.rosco.providers.util.PackerCommandFactory\nimport com.netflix.spinnaker.rosco.providers.util.TestDefaults\nimport com.netflix.spinnaker.rosco.services.ClouddriverService\nimport spock.lang.Shared\nimport spock.lang.Specification\nimport spock.lang.Subject\nimport spock.lang.Unroll\n\nclass AWSBakeHandlerSpec extends Specification implements TestDefaults {\n\n  private static final String REGION = \"us-east-1\"\n  private static final String SOURCE_UBUNTU_HVM_IMAGE_NAME = \"ami-a123456b\"\n  private static final String SOURCE_UBUNTU_PV_IMAGE_NAME = \"ami-a654321b\"\n  private static final String SOURCE_BIONIC_HVM_IMAGE_NAME = \"bionic-base-123\"\n  private static final String SOURCE_BIONIC_HVM_IMAGE_ID = \"ami-b054321b\"\n  private static final String SOURCE_TRUSTY_HVM_IMAGE_NAME = \"ami-c456789d\"\n  private static final String SOURCE_AMZN_HVM_IMAGE_NAME = \"ami-8fcee4e5\"\n  private static final String SOURCE_WINDOWS_2012_R2_HVM_IMAGE_NAME = \"ami-21414f36\"\n\n  @Shared\n  String configDir = \"/some/path\"\n\n  @Shared\n  RoscoAWSConfiguration.AWSBakeryDefaults awsBakeryDefaults\n\n  @Shared\n  List<RoscoAWSConfiguration.AWSNamedImage> searchByNameResults\n\n  @Shared\n  RoscoConfiguration roscoConfiguration\n\n  void setupSpec() {\n    def awsBakeryDefaultsJson = [\n      templateFile: \"aws_template.json\",\n      defaultVirtualizationType: \"hvm\",\n      baseImages: [\n        [\n          baseImage: [\n            id: \"ubuntu\",\n            packageType: \"DEB\",\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_UBUNTU_HVM_IMAGE_NAME,\n              sshUserName: \"ubuntu\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ],\n            [\n              region: REGION,\n              virtualizationType: \"pv\",\n              instanceType: \"m3.medium\",\n              sourceAmi: SOURCE_UBUNTU_PV_IMAGE_NAME,\n              sshUserName: \"ubuntu\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n            id: \"bionic\",\n            packageType: \"DEB\"\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              sourceAmi: SOURCE_BIONIC_HVM_IMAGE_NAME\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n            id: \"trusty\",\n            packageType: \"DEB\",\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n              sshUserName: \"ubuntu\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n            id: \"trusty_custom_repo\",\n            packageType: \"DEB\",\n            customRepository: DEBIAN_CUSTOM_REPOSITORY\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n              sshUserName: \"ubuntu\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n           id: \"amzn\",\n           packageType: \"RPM\",\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_AMZN_HVM_IMAGE_NAME,\n              sshUserName: \"ec2-user\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n          baseImage: [\n            id: \"windows-2012-r2\",\n            packageType: \"NUPKG\",\n            templateFile: \"aws-windows-2012-r2.json\"\n          ],\n          virtualizationSettings: [\n            [\n              region: REGION,\n              virtualizationType: \"hvm\",\n              instanceType: \"t2.micro\",\n              sourceAmi: SOURCE_WINDOWS_2012_R2_HVM_IMAGE_NAME,\n              winRmUserName: \"Administrator\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Windows (Amazon VPC)\"\n            ]\n          ]\n        ],\n        [\n            baseImage: [\n                id: \"xenial\",\n                packageType: \"DEB\",\n            ],\n            virtualizationSettings: [\n                [\n                    region: REGION,\n                    virtualizationType: \"hvm\",\n                    instanceType: \"t2.micro\",\n                    sourceAmi: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-\",\n                    mostRecent: true,\n                    sshUserName: \"ubuntu\",\n                    spotPrice: \"auto\",\n                    spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n                ]\n            ]\n        ],\n        [\n            baseImage: [\n                id: \"xenial-not-recent\",\n                packageType: \"DEB\",\n            ],\n            virtualizationSettings: [\n                [\n                    region: REGION,\n                    virtualizationType: \"hvm\",\n                    instanceType: \"t2.micro\",\n                    sourceAmi: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-\",\n                    mostRecent: false,\n                    sshUserName: \"ubuntu\",\n                    spotPrice: \"auto\",\n                    spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\"\n                ]\n            ]\n        ],\n      ]\n    ]\n\n    awsBakeryDefaults = new ObjectMapper().convertValue(awsBakeryDefaultsJson, RoscoAWSConfiguration.AWSBakeryDefaults)\n\n    searchByNameResults = [\n        new RoscoAWSConfiguration.AWSNamedImage(\n            imageName: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20200126\",\n            attributes: new RoscoAWSConfiguration.AWSImageAttributes(\n                creationDate: new Date(2020, 1, 26),\n                virtualizationType: BakeRequest.VmType.hvm\n            ),\n            amis: [\n                (REGION): [\"ami-20200126\"]\n            ]\n        ),\n        new RoscoAWSConfiguration.AWSNamedImage(\n            imageName: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20201210\",\n            attributes: new RoscoAWSConfiguration.AWSImageAttributes(\n                creationDate: new Date(2020, 12, 10),\n                virtualizationType: BakeRequest.VmType.hvm\n            ),\n            amis: [\n                (REGION): [\"ami-20201210\"]\n            ]\n        ),\n        new RoscoAWSConfiguration.AWSNamedImage(\n            imageName: \"ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20201009\",\n            attributes: new RoscoAWSConfiguration.AWSImageAttributes(\n                creationDate: new Date(2020, 10, 9),\n                virtualizationType: BakeRequest.VmType.hvm\n            ),\n            amis: [\n                (REGION): [\"ami-20201009\"]\n            ]\n        ),\n    ]\n  }\n\n  void 'can scrape packer logs for image name'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n        \"    amazon-ebs: Processing triggers for libc-bin ...\\n\" +\n        \"    amazon-ebs: ldconfig deferred processing now taking place\\n\" +\n        \"==> amazon-ebs: Stopping the source instance...\\n\" +\n        \"==> amazon-ebs: Waiting for the instance to stop...\\n\" +\n        \"==> amazon-ebs: Creating the AMI: kato-x8664-1422459898853-ubuntu\\n\" +\n        \"    amazon-ebs: AMI: ami-2c014644\\n\" +\n        \"==> amazon-ebs: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-ebs: Terminating the source AWS instance...\\n\" +\n        \"==> amazon-ebs: Deleting temporary security group...\\n\" +\n        \"==> amazon-ebs: Deleting temporary keypair...\\n\" +\n        \"Build 'amazon-ebs' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-ebs: AMIs were created:\\n\" +\n        \"\\n\" +\n        \"us-east-1: ami-2c014644\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        ami == \"ami-2c014644\"\n        image_name == \"kato-x8664-1422459898853-ubuntu\"\n      }\n  }\n\n  void 'can scrape packer 1.3+ logs for unencrypted image name'() {\n    setup:\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n    def logsContent =\n      \"==> amazon-ebs: Creating unencrypted AMI test-ami-123456789_123456789 from instance i-123456789\\n\" +\n      \"    amazon-ebs: AMI: ami-2c014644\\n\" +\n      \"==> amazon-ebs: Waiting for AMI to become ready...\\n\" +\n      \"==> amazon-ebs: Terminating the source AWS instance...\\n\" +\n      \"==> amazon-ebs: Cleaning up any extra volumes...\\n\" +\n      \"==> amazon-ebs: No volumes to clean up, skipping\\n\" +\n      \"==> amazon-ebs: Deleting temporary security group...\\n\" +\n      \"==> amazon-ebs: Deleting temporary keypair...\\n\" +\n      \"Build 'amazon-ebs' finished.\\n\" +\n      \"\\n\" +\n      \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n      \"--> amazon-ebs: AMIs were created:\\n\" +\n      \"\\n\" +\n      \"us-east-1: ami-2c014644\"\n\n    Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n    with (bake) {\n      id == \"123\"\n      ami == \"ami-2c014644\"\n      image_name == \"test-ami-123456789_123456789\"\n    }\n  }\n\n  void 'can scrape packer (amazon-chroot) logs for image name'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n        \"    amazon-chroot: Processing triggers for libc-bin ...\\n\" +\n        \"    amazon-chroot: ldconfig deferred processing now taking place\\n\" +\n        \"==> amazon-chroot: Stopping the source instance...\\n\" +\n        \"==> amazon-chroot: Waiting for the instance to stop...\\n\" +\n        \"==> amazon-chroot: Creating the AMI: kato-x8664-1422459898853-ubuntu\\n\" +\n        \"    amazon-chroot: AMI: ami-2c014644\\n\" +\n        \"==> amazon-chroot: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-chroot: Terminating the source AWS instance...\\n\" +\n        \"==> amazon-chroot: Deleting temporary security group...\\n\" +\n        \"==> amazon-chroot: Deleting temporary keypair...\\n\" +\n        \"Build 'amazon-chroot' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-chroot: AMIs were created:\\n\" +\n        \"\\n\" +\n        \"us-east-1: ami-2c014644\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        ami == \"ami-2c014644\"\n        image_name == \"kato-x8664-1422459898853-ubuntu\"\n      }\n  }\n\n  void 'can scrape copied amis'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n        \"==> amazon-chroot: Unmounting the root device...\\n\" +\n        \"==> amazon-chroot: Detaching EBS volume...\\n\" +\n        \"==> amazon-chroot: Creating snapshot...\\n\" +\n        \"    amazon-chroot: Snapshot ID: snap-06452c9aceea2437f\\n\" +\n        \"==> amazon-chroot: Registering the AMI...\\n\" +\n        \"==> amazon-chroot: AMI: ami-0450240c900844342\\n\" +\n        \"==> amazon-chroot: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-chroot: Copying AMI (ami-0450240c900844342) to other regions...\\n\" +\n        \"    amazon-chroot: Copying to: eu-north-1\\n\" +\n        \"    amazon-chroot: Avoiding copying AMI to duplicate region eu-west-1\\n\" +\n        \"    amazon-chroot: Waiting for all copies to complete...\\n\" +\n        \"==> amazon-chroot: Modifying attributes on snapshot (snap-06452c9aceea2437f)...\\n\" +\n        \"==> amazon-chroot: Modifying attributes on snapshot (snap-00a31182e306507b8)...\\n\" +\n        \"==> amazon-chroot: Adding tags to AMI (ami-076cf277a86b6e5b4)...\\n\" +\n        \"==> amazon-chroot: Tagging snapshot: snap-00a31182e306507b8\\n\" +\n        \"==> amazon-chroot: Creating snapshot tags\\n\" +\n        \"==> amazon-chroot: Adding tags to AMI (ami-0450240c900844342)...\\n\" +\n        \"==> amazon-chroot: Tagging snapshot: snap-06452c9aceea2437f\\n\" +\n        \"==> amazon-chroot: Creating snapshot tags\\n\" +\n        \"==> amazon-chroot: Deleting the created EBS volume...\\n\" +\n        \"Build 'amazon-chroot' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-chroot: AMIs were created:\\n\" +\n        \"eu-north-1: ami-076cf277a86b6e5b4\\n\" +\n        \"eu-west-1: ami-0450240c900844342\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(\"eu-west-1\", \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        ami == \"ami-0450240c900844342\"\n\n        artifacts.size() == 2\n        artifacts.find{it.location == \"eu-north-1\"}.reference == \"ami-076cf277a86b6e5b4\"\n        artifacts.find{it.location == \"eu-west-1\"}.reference == \"ami-0450240c900844342\"\n      }\n  }\n\n  void 'can scrape packer (Windows) logs for image name'() {\n    setup:\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n    def logsContent =\n      \"    amazon-ebs: Chocolatey installed 2/2 packages. 0 packages failed.\\n\" +\n        \"    amazon-ebs: See the log for details (C:\\\\ProgramData\\\\chocolatey\\\\logs\\\\chocolatey.log).\\n\" +\n        \"==> amazon-ebs: Stopping the source instance...\\n\" +\n        \"==> amazon-ebs: Waiting for the instance to stop...\\n\" +\n        \"==> amazon-ebs: Creating the AMI: googlechrome-all-20170121212839-windows-2012-r2\\n\" +\n        \"    amazon-ebs: AMI: ami-ca32c7dc\\n\" +\n        \"==> amazon-ebs: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-ebs: Adding tags to AMI (ami-ca32c7dc)...\\n\" +\n        \"    amazon-ebs: Adding tag: \\\"appversion\\\": \\\"\\\"\\n\" +\n        \"    amazon-ebs: Adding tag: \\\"build_host\\\": \\\"\\\"\\n\" +\n        \"    amazon-ebs: Adding tag: \\\"build_info_url\\\": \\\"\\\"\\n\" +\n        \"==> amazon-ebs: Tagging snapshot: snap-08b92184c6506720c\\n\" +\n        \"==> amazon-ebs: Terminating the source AWS instance...\\n\" +\n        \"==> amazon-ebs: Cleaning up any extra volumes...\\n\" +\n        \"==> amazon-ebs: No volumes to clean up, skipping\\n\" +\n        \"==> amazon-ebs: Deleting temporary security group...\\n\" +\n        \"==> amazon-ebs: Deleting temporary keypair...\\n\" +\n        \"Build 'amazon-ebs' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-ebs: AMIs were created:\\n\" +\n        \"\\n\" +\n        \"us-east-1: ami-ca32c7dc\"\n\n    Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n    with (bake) {\n      id == \"123\"\n      ami == \"ami-ca32c7dc\"\n      image_name == \"googlechrome-all-20170121212839-windows-2012-r2\"\n    }\n  }\n\n  void 'scraping returns null for missing image id'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n        \"    amazon-ebs: Processing triggers for libc-bin ...\\n\" +\n        \"    amazon-ebs: ldconfig deferred processing now taking place\\n\" +\n        \"==> amazon-ebs: Stopping the source instance...\\n\" +\n        \"==> amazon-ebs: Waiting for the instance to stop...\\n\" +\n        \"==> amazon-ebs: Creating the AMI: kato-x8664-1422459898853-ubuntu\\n\" +\n        \"    amazon-ebs: AMI: ami-2c014644\\n\" +\n        \"==> amazon-ebs: Waiting for AMI to become ready...\\n\" +\n        \"==> amazon-ebs: Terminating the source AWS instance...\\n\" +\n        \"==> amazon-ebs: Deleting temporary security group...\\n\" +\n        \"==> amazon-ebs: Deleting temporary keypair...\\n\" +\n        \"Build 'amazon-ebs' finished.\\n\" +\n        \"\\n\" +\n        \"==> Builds finished. The artifacts of successful builds are:\\n\" +\n        \"--> amazon-ebs: AMIs were created:\\n\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        !ami\n        image_name == \"kato-x8664-1422459898853-ubuntu\"\n      }\n  }\n\n  void 'scraping returns null for missing image name'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      def logsContent =\n          \"    amazon-ebs: Processing triggers for libc-bin ...\\n\" +\n          \"    amazon-ebs: ldconfig deferred processing now taking place\\n\" +\n          \"==> amazon-ebs: Stopping the source instance...\\n\" +\n          \"==> amazon-ebs: Waiting for the instance to stop...\\n\"\n\n      Bake bake = awsBakeHandler.scrapeCompletedBakeResults(REGION, \"123\", logsContent)\n\n    then:\n      with (bake) {\n        id == \"123\"\n        !ami\n        !image_name\n      }\n  }\n\n  void 'looks up base ami id from name'() {\n    def packerCommandFactoryMock = Mock(PackerCommandFactory)\n    def imageNameFactoryMock = Mock(ImageNameFactory)\n    def clouddriverService = Mock(ClouddriverService)\n    def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n      package_name: PACKAGES_NAME,\n      base_os: \"bionic\",\n      base_label: \"release\",\n      vm_type: BakeRequest.VmType.hvm,\n      cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n      awsBakeryDefaults: awsBakeryDefaults,\n      imageNameFactory: imageNameFactoryMock,\n      packerCommandFactory: packerCommandFactoryMock,\n      clouddriverService: clouddriverService,\n      retrySupport: new NoSleepRetry(),\n      defaultAccount: \"test\",\n      debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n    def vmSettings = awsBakeHandler.findVirtualizationSettings(REGION, bakeRequest)\n\n    then:\n    1 * clouddriverService.findAmazonImageByName(_, _, _) >> [\n      new RoscoAWSConfiguration.AWSNamedImage(\n        imageName: SOURCE_BIONIC_HVM_IMAGE_NAME,\n        attributes: new RoscoAWSConfiguration.AWSImageAttributes(virtualizationType: BakeRequest.VmType.hvm),\n        amis: [\n          (REGION): [ SOURCE_BIONIC_HVM_IMAGE_ID ]\n        ]\n      )\n    ]\n\n    vmSettings.sourceAmi == SOURCE_BIONIC_HVM_IMAGE_ID\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using default vm type'() {\n    setup:\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        aws_source_ami: SOURCE_UBUNTU_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using ami lookup by name'() {\n    setup:\n      def clouddriverService = Stub(ClouddriverService) {\n        findAmazonImageByName(_, _, _) >> {\n          return searchByNameResults\n        }\n      }\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: base_os,\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        aws_source_ami: expected,\n        aws_target_ami: targetImageName,\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         clouddriverService: clouddriverService,\n                                                         retrySupport: new RetrySupport(),\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n\n    where:\n    base_os             | expected\n    \"xenial\"            | \"ami-20201210\"\n    \"xenial-not-recent\" | \"ami-20200126\"\n  }\n\n  void 'produces packer command with all required parameters for amzn, using default vm type'() {\n    setup:\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"amzn\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-amzn\"\n      def osPackages = parseRpmOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ec2-user\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_AMZN_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: YUM_REPOSITORY,\n        package_type: RPM_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir,\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         yumRepository: YUM_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, RPM_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(RPM_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for amzn, with sudo'() {\n    setup:\n      def awsBakeryDefaultsJson = [\n        templateFile: \"aws-chroot.json\",\n        defaultVirtualizationType: \"hvm\",\n        baseImages: [\n          [\n            baseImage: [\n              id: \"amzn\",\n              packageType: \"RPM\",\n            ],\n            virtualizationSettings: [\n              [\n                region: REGION,\n                virtualizationType: \"hvm\",\n                instanceType: \"t2.micro\",\n                sourceAmi: SOURCE_AMZN_HVM_IMAGE_NAME,\n                sshUserName: \"ec2-user\"\n              ]\n            ]\n          ]\n        ]\n      ]\n      RoscoAWSConfiguration.AWSBakeryDefaults localAwsBakeryDefaults = new ObjectMapper().convertValue(awsBakeryDefaultsJson, RoscoAWSConfiguration.AWSBakeryDefaults)\n\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n        package_name: PACKAGES_NAME,\n        base_os: \"amzn\",\n        vm_type: BakeRequest.VmType.hvm,\n        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-amzn\"\n      def osPackages = parseRpmOsPackageNames(PACKAGES_NAME)\n\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ec2-user\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_AMZN_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        repository: YUM_REPOSITORY,\n        package_type: RPM_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n        awsBakeryDefaults: localAwsBakeryDefaults,\n        imageNameFactory: imageNameFactoryMock,\n        packerCommandFactory: packerCommandFactoryMock,\n        templatesNeedingRoot: [ \"aws-chroot.json\" ],\n        yumRepository: YUM_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, RPM_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(RPM_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"sudo\", parameterMap, null, \"$configDir/aws-chroot.json\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using default vm type, and overriding base ami'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        base_ami: \"ami-12345678\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: \"ami-12345678\",\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using explicit vm type'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.pv,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"m3.medium\",\n        aws_source_ami: SOURCE_UBUNTU_PV_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using explicit vm type, and overriding template filename'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.pv,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        template_file_name: \"somePackerTemplate.json\")\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"m3.medium\",\n        aws_source_ami: SOURCE_UBUNTU_PV_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/somePackerTemplate.json\")\n  }\n\n  void 'produces packer command with all required parameters for ubuntu, using explicit vm type, and adding extended attributes'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.pv,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        extended_attributes: [someAttr1: \"someValue1\", someAttr2: \"someValue2\"])\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"m3.medium\",\n        aws_source_ami: SOURCE_UBUNTU_PV_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir,\n        someAttr1: \"someValue1\",\n        someAttr2: \"someValue2\"\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'sends spot_price_auto_product iff spot_price is set to auto'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest()\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      def virtualizationSettings = [\n              region: \"us-east-1\",\n              spotPrice: \"0\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\",\n      ]\n      def parameterMap = awsBakeHandler.buildParameterMap(REGION, virtualizationSettings, \"\", bakeRequest, \"\")\n\n    then:\n      parameterMap.aws_spot_price == \"0\"\n      !parameterMap.containsValue(\"aws_spot_price_auto_product\")\n\n    when:\n      virtualizationSettings = [\n              region: \"us-east-1\",\n              spotPrice: \"auto\",\n              spotPriceAutoProduct: \"Linux/UNIX (Amazon VPC)\",\n      ]\n      parameterMap = awsBakeHandler.buildParameterMap(REGION, virtualizationSettings, \"\", bakeRequest, \"\")\n\n    then:\n      parameterMap.aws_spot_price == \"auto\"\n      parameterMap.aws_spot_price_auto_product == \"Linux/UNIX (Amazon VPC)\"\n  }\n  void 'overrides repository for images with custom repository property'() {\n    setup:\n    def imageNameFactoryMock = Mock(ImageNameFactory)\n    def packerCommandFactoryMock = Mock(PackerCommandFactory)\n    def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n            package_name: PACKAGES_NAME,\n            base_os: \"trusty_custom_repo\",\n            vm_type: BakeRequest.VmType.hvm,\n            cloud_provider_type: BakeRequest.CloudProviderType.aws)\n    def targetImageName = \"kato-x8664-timestamp-trusty\"\n    def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n    def parameterMap = [\n            aws_region: REGION,\n            aws_ssh_username: \"ubuntu\",\n            aws_instance_type: \"t2.micro\",\n            aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n            aws_target_ami: targetImageName,\n            aws_spot_price: \"auto\",\n            aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n            repository: DEBIAN_CUSTOM_REPOSITORY,\n            package_type: DEB_PACKAGE_TYPE.util.packageType,\n            packages: PACKAGES_NAME,\n            configDir: configDir\n    ]\n\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n            awsBakeryDefaults: awsBakeryDefaults,\n            imageNameFactory: imageNameFactoryMock,\n            packerCommandFactory: packerCommandFactoryMock,\n            debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n    awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n    1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n    1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n    1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n    1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters for trusty, using explicit vm type'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-trusty\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters including appversion, build_host and build_info_url for trusty'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def fullyQualifiedPackageName = \"nflx-djangobase-enhanced_0.1-h12.170cdbd_all\"\n      def appVersionStr = \"nflx-djangobase-enhanced-0.1-170cdbd.h12\"\n      def buildHost = \"http://some-build-server:8080\"\n      def buildInfoUrl = \"http://some-build-server:8080/repogroup/repo/builds/320282\"\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: fullyQualifiedPackageName,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        build_host: buildHost,\n                                        build_info_url: buildInfoUrl,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n      def targetImageName = \"kato-x8664-timestamp-trusty\"\n      def osPackages = [PackageNameConverter.buildOsPackageName(DEB_PACKAGE_TYPE, fullyQualifiedPackageName)]\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: fullyQualifiedPackageName,\n        configDir: configDir,\n        appversion: appVersionStr,\n        build_host: buildHost,\n        build_info_url: buildInfoUrl\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> appVersionStr\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> fullyQualifiedPackageName\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters including upgrade'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"ubuntu\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        upgrade: true)\n      def targetImageName = \"kato-x8664-timestamp-ubuntu\"\n      def osPackages = parseDebOsPackageNames(PACKAGES_NAME)\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_UBUNTU_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        repository: DEBIAN_REPOSITORY,\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        packages: PACKAGES_NAME,\n        upgrade: true,\n        configDir: configDir\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> null\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> PACKAGES_NAME\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer (Windows) command with all required parameters'() {\n    setup:\n    def imageNameFactoryMock = Mock(ImageNameFactory)\n    def packerCommandFactoryMock = Mock(PackerCommandFactory)\n    def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n      package_name: NUPKG_PACKAGES_NAME,\n      base_os: \"windows-2012-r2\",\n      vm_type: BakeRequest.VmType.hvm,\n      cloud_provider_type: BakeRequest.CloudProviderType.aws)\n    def targetImageName = \"googlechrome-all-20170121212839-windows-2012-r2\"\n    def osPackages = parseNupkgOsPackageNames(NUPKG_PACKAGES_NAME)\n    def parameterMap = [\n      aws_region: REGION,\n      aws_winrm_username: \"Administrator\",\n      aws_instance_type: \"t2.micro\",\n      aws_source_ami: SOURCE_WINDOWS_2012_R2_HVM_IMAGE_NAME,\n      aws_target_ami: targetImageName,\n      aws_spot_price: \"auto\",\n      aws_spot_price_auto_product: \"Windows (Amazon VPC)\",\n      repository: CHOCOLATEY_REPOSITORY,\n      package_type: NUPKG_PACKAGE_TYPE.util.packageType,\n      packages: NUPKG_PACKAGES_NAME,\n      configDir: configDir\n    ]\n    def operatingSystemVirtualizationSettings = awsBakeryDefaults.baseImages.find { it?.baseImage?.id == bakeRequest.base_os}\n\n    @Subject\n    AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n      awsBakeryDefaults: awsBakeryDefaults,\n      imageNameFactory: imageNameFactoryMock,\n      packerCommandFactory: packerCommandFactoryMock,\n      chocolateyRepository: CHOCOLATEY_REPOSITORY)\n\n    when:\n    awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n    1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n    1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, NUPKG_PACKAGE_TYPE) >> null\n    1 * imageNameFactoryMock.buildPackagesParameter(NUPKG_PACKAGE_TYPE, osPackages) >> NUPKG_PACKAGES_NAME\n    1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$operatingSystemVirtualizationSettings.baseImage.templateFile\")\n  }\n\n  void 'throws exception when virtualization settings are not found for specified operating system'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      IllegalArgumentException e = thrown()\n      e.message == \"No virtualization settings found for 'centos'.\"\n  }\n\n  void 'throws exception when virtualization settings are not found for specified region, operating system, and vm type'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.pv,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      IllegalArgumentException e = thrown()\n      e.message == \"No virtualization settings found for region 'us-east-1', operating system 'trusty', and vm type 'pv'.\"\n  }\n\n  void 'produce a default AWS bakeKey without base ami'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWDisabled\"\n  }\n\n  @Unroll\n  void 'produce a default AWS bakeKey without base ami, even when no packages are specified'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: packageName,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos::us-east-1:hvm:enhancedNWDisabled\"\n\n    where:\n      packageName << [null, \"\"]\n  }\n\n  void 'produce a default AWS bakeKey with base ami'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        base_ami: \"ami-123456\")\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos:ami-123456:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWDisabled\"\n  }\n\n  void 'produce a default AWS bakeKey with enhanced network enabled'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        enhanced_networking: true)\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWEnabled\"\n  }\n\n  void 'produce a default AWS bakeKey with ami name'() {\n    setup:\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: PACKAGES_NAME,\n                                        base_os: \"centos\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        ami_name: \"kato-app\")\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey = awsBakeHandler.produceBakeKey(REGION, bakeRequest)\n\n    then:\n      bakeKey == \"bake:aws:centos:kato-app:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWDisabled\"\n  }\n\n  void 'do not consider ami suffix when composing bake key'() {\n    setup:\n      def bakeRequest1 = new BakeRequest(user: \"someuser@gmail.com\",\n                                         package_name: PACKAGES_NAME,\n                                         base_os: \"centos\",\n                                         vm_type: BakeRequest.VmType.hvm,\n                                         cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                         ami_suffix: \"1.0\")\n      def bakeRequest2 = new BakeRequest(user: \"someuser@gmail.com\",\n                                         package_name: PACKAGES_NAME,\n                                         base_os: \"centos\",\n                                         vm_type: BakeRequest.VmType.hvm,\n                                         cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                         ami_suffix: \"2.0\")\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: awsBakeryDefaults)\n\n    when:\n      String bakeKey1 = awsBakeHandler.produceBakeKey(REGION, bakeRequest1)\n      String bakeKey2 = awsBakeHandler.produceBakeKey(REGION, bakeRequest2)\n\n    then:\n      bakeKey1 == \"bake:aws:centos:kato|nflx-djangobase-enhanced_0.1-h12.170cdbd_all|mongodb:us-east-1:hvm:enhancedNWDisabled\"\n      bakeKey2 == bakeKey1\n  }\n\n  void 'produces packer command with all required parameters including shared_with multiple accounts as extended_attribute'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def fullyQualifiedPackageName = \"nflx-djangobase-enhanced_0.1-h12.170cdbd_all\"\n      def appVersionStr = \"nflx-djangobase-enhanced-0.1-170cdbd.h12\"\n      def buildHost = \"http://some-build-server:8080\"\n      def buildInfoUrl = \"http://some-build-server:8080/repogroup/repo/builds/320282\"\n      def share_account = \"000001, 000002\"\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: fullyQualifiedPackageName,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        build_host: buildHost,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        extended_attributes: [share_with: share_account],\n                                        build_info_url: buildInfoUrl)\n      def osPackages = parseDebOsPackageNames(fullyQualifiedPackageName)\n      def targetImageName = \"kato-x8664-timestamp-trusty\"\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        repository: DEBIAN_REPOSITORY,\n        packages: fullyQualifiedPackageName,\n        share_with_1: \"000001\",\n        share_with_2: \"000002\",\n        configDir: configDir,\n        appversion: appVersionStr,\n        build_host: buildHost,\n        build_info_url: buildInfoUrl\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY,\n                                                         yumRepository: YUM_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> appVersionStr\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> fullyQualifiedPackageName\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'produces packer command with all required parameters including copy_to multiple regions as extended_attribute'() {\n    setup:\n      def imageNameFactoryMock = Mock(ImageNameFactory)\n      def packerCommandFactoryMock = Mock(PackerCommandFactory)\n      def fullyQualifiedPackageName = \"nflx-djangobase-enhanced_0.1-h12.170cdbd_all\"\n      def appVersionStr = \"nflx-djangobase-enhanced-0.1-170cdbd.h12\"\n      def buildHost = \"http://some-build-server:8080\"\n      def buildInfoUrl = \"http://some-build-server:8080/repogroup/repo/builds/320282\"\n      def copy_regions = \"us-west-1, us-west-2\"\n      def bakeRequest = new BakeRequest(user: \"someuser@gmail.com\",\n                                        package_name: fullyQualifiedPackageName,\n                                        base_os: \"trusty\",\n                                        vm_type: BakeRequest.VmType.hvm,\n                                        build_host: buildHost,\n                                        cloud_provider_type: BakeRequest.CloudProviderType.aws,\n                                        extended_attributes: [copy_to: copy_regions],\n                                        build_info_url: buildInfoUrl)\n      def osPackages = parseDebOsPackageNames(fullyQualifiedPackageName)\n      def targetImageName = \"kato-x8664-timestamp-trusty\"\n      def parameterMap = [\n        aws_region: REGION,\n        aws_ssh_username: \"ubuntu\",\n        aws_instance_type: \"t2.micro\",\n        aws_source_ami: SOURCE_TRUSTY_HVM_IMAGE_NAME,\n        aws_target_ami: targetImageName,\n        aws_spot_price: \"auto\",\n        aws_spot_price_auto_product: \"Linux/UNIX (Amazon VPC)\",\n        package_type: DEB_PACKAGE_TYPE.util.packageType,\n        repository: DEBIAN_REPOSITORY,\n        packages: fullyQualifiedPackageName,\n        copy_to_1: \"us-west-1\",\n        copy_to_2: \"us-west-2\",\n        configDir: configDir,\n        appversion: appVersionStr,\n        build_host: buildHost,\n        build_info_url: buildInfoUrl\n      ]\n\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(configDir: configDir,\n                                                         awsBakeryDefaults: awsBakeryDefaults,\n                                                         imageNameFactory: imageNameFactoryMock,\n                                                         packerCommandFactory: packerCommandFactoryMock,\n                                                         debianRepository: DEBIAN_REPOSITORY,\n                                                         yumRepository: YUM_REPOSITORY)\n\n    when:\n      awsBakeHandler.produceBakeRecipe(REGION, bakeRequest)\n\n    then:\n      1 * imageNameFactoryMock.buildImageName(bakeRequest, osPackages) >> targetImageName\n      1 * imageNameFactoryMock.buildAppVersionStr(bakeRequest, osPackages, DEB_PACKAGE_TYPE) >> appVersionStr\n      1 * imageNameFactoryMock.buildPackagesParameter(DEB_PACKAGE_TYPE, osPackages) >> fullyQualifiedPackageName\n      1 * packerCommandFactoryMock.buildPackerCommand(\"\", parameterMap, null, \"$configDir/$awsBakeryDefaults.templateFile\")\n  }\n\n  void 'getMaskedPackerParameters returns the expected default'() {\n    setup:\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: new RoscoAWSConfiguration.AWSBakeryDefaults())\n\n    when:\n      def maskedPackerParams = awsBakeHandler.maskedPackerParameters\n\n    then:\n      maskedPackerParams == [ 'aws_access_key', 'aws_secret_key' ]\n  }\n\n  void 'getMaskedPackerParameters returns the expected default'() {\n    setup:\n      def paramsToMask = [ 'foo' ]\n      @Subject\n      AWSBakeHandler awsBakeHandler = new AWSBakeHandler(awsBakeryDefaults: new RoscoAWSConfiguration.AWSBakeryDefaults(maskedPackerParameters: paramsToMask))\n\n\n    when:\n      def maskedPackerParams = awsBakeHandler.maskedPackerParameters\n\n    then:\n      maskedPackerParams == paramsToMask\n  }\n\n  static class NoSleepRetry extends RetrySupport {\n    void sleep(long time) {}\n  }\n}\n", "package com.netflix.spinnaker.rosco.providers.util\n\nimport com.netflix.spinnaker.rosco.config.RoscoPackerConfigurationProperties\nimport com.netflix.spinnaker.rosco.jobs.JobRequest\nimport org.apache.commons.exec.CommandLine\nimport spock.lang.Shared\nimport spock.lang.Specification\nimport spock.lang.Unroll\n\nclass LocalJobFriendlyPackerCommandFactorySpec extends Specification implements TestDefaults {\n\n  @Shared\n  LocalJobFriendlyPackerCommandFactory packerCommandFactory = new LocalJobFriendlyPackerCommandFactory(\n    roscoPackerConfigurationProperties: new RoscoPackerConfigurationProperties()\n  )\n\n  @Unroll\n  void \"packerCommand handles baseCommand as null, empty string and real string\"() {\n    setup:\n      def parameterMap = [\n        something: something\n      ]\n\n    when:\n      def packerCommand = packerCommandFactory.buildPackerCommand(baseCommand, parameterMap, null, \"\")\n\n    then:\n      packerCommand == expectedPackerCommand\n\n    where:\n      something | baseCommand | expectedPackerCommand\n      \"sudo\"    | \"sudo\"      | [\"sudo\", \"packer\", \"build\", \"-color=false\", \"-var\", \"something=sudo\"]\n      \"null\"    | null        | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=null\"]\n      \"empty\"   | \"\"          | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=empty\"]\n  }\n\n  @Unroll\n  void \"packerCommand includes -varFileName only when 'varFile' is specified; varFile is #varFile\"() {\n    setup:\n      def parameterMap = [\n        something: \"some-var\"\n      ]\n\n    when:\n      def packerCommand = packerCommandFactory.buildPackerCommand(\"\", parameterMap, varFile, \"\")\n\n    then:\n      packerCommand == expectedPackerCommand\n\n    where:\n      varFile            | expectedPackerCommand\n      null               | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=some-var\"]\n      \"\"                 | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=some-var\"]\n      \"someVarFile.json\" | [\"packer\", \"build\", \"-color=false\", \"-var\", \"something=some-var\", \"-var-file=someVarFile.json\"]\n  }\n\n  @Unroll\n  void \"packerCommand includes parameter with non-quoted string\"() {\n\n    when:\n    def packerCommand = packerCommandFactory.buildPackerCommand(\"\", parameterMap, null, \"\")\n\n    then:\n    packerCommand == expectedPackerCommand\n\n    where:\n    parameterMap                      | expectedPackerCommand\n    [packages: \"package1 package2\"]   | [\"packer\", \"build\", \"-color=false\", \"-var\", \"packages=package1 package2\"]\n  }\n\n  @Unroll\n  void 'validate packer command line' () {\n    setup:\n\n    when:\n      def packerCommand = packerCommandFactory.buildPackerCommand(\"\", parameterMap, null, \"\")\n      def jobRequest = new JobRequest(tokenizedCommand: packerCommand, maskedParameters: maskedPackerParameters, jobId: SOME_UUID)\n      def maskedTokenizedCommand = jobRequest.maskedTokenizedCommand\n      def commandLine = new CommandLine(maskedTokenizedCommand[0])\n      def arguments = (String []) Arrays.copyOfRange(maskedTokenizedCommand.toArray(), 1, maskedTokenizedCommand.size())\n      commandLine.addArguments(arguments, false)\n      def g = commandLine.toString()\n      def cmdLineList =  commandLine.toStrings().toList()\n\n    then:\n      cmdLineList  == expectedCommandLine\n\n    where:\n      parameterMap                                              | maskedPackerParameters | expectedCommandLine\n      [packages: \"package1 package2\"]                           | []                     | [\"packer\", \"build\", \"-color=false\", \"-var\", \"packages=package1 package2\"]\n      [packages: \"package1 package2\", secret: \"mysecret\"]       | [\"secret\"]             | [\"packer\", \"build\", \"-color=false\", \"-var\", \"packages=package1 package2\", \"-var\", \"secret=******\"]\n  }\n}\n"], "filenames": ["rosco-core/src/main/groovy/com/netflix/spinnaker/rosco/providers/aws/AWSBakeHandler.groovy", "rosco-core/src/main/groovy/com/netflix/spinnaker/rosco/providers/aws/config/RoscoAWSConfiguration.groovy", "rosco-core/src/test/groovy/com/netflix/spinnaker/rosco/providers/aws/AWSBakeHandlerSpec.groovy", "rosco-core/src/test/groovy/com/netflix/spinnaker/rosco/providers/util/LocalJobFriendlyPackerCommandFactorySpec.groovy"], "buggy_code_start_loc": [233, 60, 1443, 78], "buggy_code_end_loc": [251, 60, 1443, 91], "fixing_code_start_loc": [234, 61, 1444, 78], "fixing_code_end_loc": [256, 62, 1470, 92], "type": "CWE-532", "message": "Spinnaker is an open source, multi-cloud continuous delivery platform for releasing software changes, and Spinnaker's Rosco microservice produces machine images. Rosco prior to versions 1.29.2, 1.28.4, and 1.27.3 does not property mask secrets generated via packer builds. This can lead to exposure of sensitive AWS credentials in packer log files. Versions 1.29.2, 1.28.4, and 1.27.3 of Rosco contain fixes for this issue. A workaround is available. It's recommended to use short lived credentials via role assumption and IAM profiles. Additionally, credentials can be set in `/home/spinnaker/.aws/credentials` and `/home/spinnaker/.aws/config` as a volume mount for Rosco pods vs. setting credentials in roscos bake config properties. Last even with those it's recommend to use IAM Roles vs. long lived credentials. This drastically mitigates the risk of credentials exposure. If users have used static credentials, it's recommended to purge any bake logs for AWS, evaluate whether AWS_ACCESS_KEY, SECRET_KEY and/or other sensitive data has been introduced in log files and bake job logs. Then, rotate these credentials and evaluate potential improper use of those credentials.", "other": {"cve": {"id": "CVE-2022-23506", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-03T21:15:11.393", "lastModified": "2023-01-10T18:45:12.897", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Spinnaker is an open source, multi-cloud continuous delivery platform for releasing software changes, and Spinnaker's Rosco microservice produces machine images. Rosco prior to versions 1.29.2, 1.28.4, and 1.27.3 does not property mask secrets generated via packer builds. This can lead to exposure of sensitive AWS credentials in packer log files. Versions 1.29.2, 1.28.4, and 1.27.3 of Rosco contain fixes for this issue. A workaround is available. It's recommended to use short lived credentials via role assumption and IAM profiles. Additionally, credentials can be set in `/home/spinnaker/.aws/credentials` and `/home/spinnaker/.aws/config` as a volume mount for Rosco pods vs. setting credentials in roscos bake config properties. Last even with those it's recommend to use IAM Roles vs. long lived credentials. This drastically mitigates the risk of credentials exposure. If users have used static credentials, it's recommended to purge any bake logs for AWS, evaluate whether AWS_ACCESS_KEY, SECRET_KEY and/or other sensitive data has been introduced in log files and bake job logs. Then, rotate these credentials and evaluate potential improper use of those credentials."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-532"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:linuxfoundation:spinnaker:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.27.3", "matchCriteriaId": "11A4C584-749D-493E-9041-38A81618EDFA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxfoundation:spinnaker:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.28.0", "versionEndExcluding": "1.28.4", "matchCriteriaId": "296E0693-5B68-40A5-9BFE-1055BAFD6369"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxfoundation:spinnaker:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.29.0", "versionEndExcluding": "1.29.2", "matchCriteriaId": "0D93FCCE-98CC-4439-A0F7-2475764FE515"}]}]}], "references": [{"url": "https://github.com/spinnaker/rosco/commit/e80cfaa1abfb3a0e9026d45d6027291bfb815daf", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/spinnaker/spinnaker/security/advisories/GHSA-2233-cqj8-j2q5", "source": "security-advisories@github.com", "tags": ["Mitigation", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/spinnaker/rosco/commit/e80cfaa1abfb3a0e9026d45d6027291bfb815daf"}}