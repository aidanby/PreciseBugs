{"buggy_code": ["<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n * @link          https://cakephp.org CakePHP(tm) Project\n * @since         2.0.0\n * @license       https://opensource.org/licenses/mit-license.php MIT License\n */\nnamespace Cake\\Mailer\\Transport;\n\nuse Cake\\Mailer\\AbstractTransport;\nuse Cake\\Mailer\\Email;\nuse Cake\\Network\\Exception\\SocketException;\nuse Cake\\Network\\Socket;\nuse Exception;\n\n/**\n * Send mail using SMTP protocol\n */\nclass SmtpTransport extends AbstractTransport\n{\n\n    /**\n     * Default config for this class\n     *\n     * @var array\n     */\n    protected $_defaultConfig = [\n        'host' => 'localhost',\n        'port' => 25,\n        'timeout' => 30,\n        'username' => null,\n        'password' => null,\n        'client' => null,\n        'tls' => false,\n        'keepAlive' => false\n    ];\n\n    /**\n     * Socket to SMTP server\n     *\n     * @var \\Cake\\Network\\Socket\n     */\n    protected $_socket;\n\n    /**\n     * Content of email to return\n     *\n     * @var array\n     */\n    protected $_content = [];\n\n    /**\n     * The response of the last sent SMTP command.\n     *\n     * @var array\n     */\n    protected $_lastResponse = [];\n\n    /**\n     * Destructor\n     *\n     * Tries to disconnect to ensure that the connection is being\n     * terminated properly before the socket gets closed.\n     */\n    public function __destruct()\n    {\n        try {\n            $this->disconnect();\n        } catch (Exception $e) {\n            // avoid fatal error on script termination\n        }\n    }\n\n    /**\n     * Connect to the SMTP server.\n     *\n     * This method tries to connect only in case there is no open\n     * connection available already.\n     *\n     * @return void\n     */\n    public function connect()\n    {\n        if (!$this->connected()) {\n            $this->_connect();\n            $this->_auth();\n        }\n    }\n\n    /**\n     * Check whether an open connection to the SMTP server is available.\n     *\n     * @return bool\n     */\n    public function connected()\n    {\n        return $this->_socket !== null && $this->_socket->connected;\n    }\n\n    /**\n     * Disconnect from the SMTP server.\n     *\n     * This method tries to disconnect only in case there is an open\n     * connection available.\n     *\n     * @return void\n     */\n    public function disconnect()\n    {\n        if ($this->connected()) {\n            $this->_disconnect();\n        }\n    }\n\n    /**\n     * Returns the response of the last sent SMTP command.\n     *\n     * A response consists of one or more lines containing a response\n     * code and an optional response message text:\n     * ```\n     * [\n     *     [\n     *         'code' => '250',\n     *         'message' => 'mail.example.com'\n     *     ],\n     *     [\n     *         'code' => '250',\n     *         'message' => 'PIPELINING'\n     *     ],\n     *     [\n     *         'code' => '250',\n     *         'message' => '8BITMIME'\n     *     ],\n     *     // etc...\n     * ]\n     * ```\n     *\n     * @return array\n     */\n    public function getLastResponse()\n    {\n        return $this->_lastResponse;\n    }\n\n    /**\n     * Send mail\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return array\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    public function send(Email $email)\n    {\n        if (!$this->connected()) {\n            $this->_connect();\n            $this->_auth();\n        } else {\n            $this->_smtpSend('RSET');\n        }\n\n        $this->_sendRcpt($email);\n        $this->_sendData($email);\n\n        if (!$this->_config['keepAlive']) {\n            $this->_disconnect();\n        }\n\n        return $this->_content;\n    }\n\n    /**\n     * Parses and stores the response lines in `'code' => 'message'` format.\n     *\n     * @param array $responseLines Response lines to parse.\n     * @return void\n     */\n    protected function _bufferResponseLines(array $responseLines)\n    {\n        $response = [];\n        foreach ($responseLines as $responseLine) {\n            if (preg_match('/^(\\d{3})(?:[ -]+(.*))?$/', $responseLine, $match)) {\n                $response[] = [\n                    'code' => $match[1],\n                    'message' => isset($match[2]) ? $match[2] : null\n                ];\n            }\n        }\n        $this->_lastResponse = array_merge($this->_lastResponse, $response);\n    }\n\n    /**\n     * Connect to SMTP Server\n     *\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _connect()\n    {\n        $this->_generateSocket();\n        if (!$this->_socket->connect()) {\n            throw new SocketException('Unable to connect to SMTP server.');\n        }\n        $this->_smtpSend(null, '220');\n\n        $config = $this->_config;\n\n        if (isset($config['client'])) {\n            $host = $config['client'];\n        } elseif ($httpHost = env('HTTP_HOST')) {\n            list($host) = explode(':', $httpHost);\n        } else {\n            $host = 'localhost';\n        }\n\n        try {\n            $this->_smtpSend(\"EHLO {$host}\", '250');\n            if ($config['tls']) {\n                $this->_smtpSend('STARTTLS', '220');\n                $this->_socket->enableCrypto('tls');\n                $this->_smtpSend(\"EHLO {$host}\", '250');\n            }\n        } catch (SocketException $e) {\n            if ($config['tls']) {\n                throw new SocketException('SMTP server did not accept the connection or trying to connect to non TLS SMTP server using TLS.', null, $e);\n            }\n            try {\n                $this->_smtpSend(\"HELO {$host}\", '250');\n            } catch (SocketException $e2) {\n                throw new SocketException('SMTP server did not accept the connection.', null, $e2);\n            }\n        }\n    }\n\n    /**\n     * Send authentication\n     *\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _auth()\n    {\n        if (isset($this->_config['username'], $this->_config['password'])) {\n            $replyCode = (string)$this->_smtpSend('AUTH LOGIN', '334|500|502|504');\n            if ($replyCode === '334') {\n                try {\n                    $this->_smtpSend(base64_encode($this->_config['username']), '334');\n                } catch (SocketException $e) {\n                    throw new SocketException('SMTP server did not accept the username.', null, $e);\n                }\n                try {\n                    $this->_smtpSend(base64_encode($this->_config['password']), '235');\n                } catch (SocketException $e) {\n                    throw new SocketException('SMTP server did not accept the password.', null, $e);\n                }\n            } elseif ($replyCode === '504') {\n                throw new SocketException('SMTP authentication method not allowed, check if SMTP server requires TLS.');\n            } else {\n                throw new SocketException('AUTH command not recognized or not implemented, SMTP server may not require authentication.');\n            }\n        }\n    }\n\n    /**\n     * Prepares the `MAIL FROM` SMTP command.\n     *\n     * @param string $email The email address to send with the command.\n     * @return string\n     */\n    protected function _prepareFromCmd($email)\n    {\n        return 'MAIL FROM:<' . $email . '>';\n    }\n\n    /**\n     * Prepares the `RCPT TO` SMTP command.\n     *\n     * @param string $email The email address to send with the command.\n     * @return string\n     */\n    protected function _prepareRcptCmd($email)\n    {\n        return 'RCPT TO:<' . $email . '>';\n    }\n\n    /**\n     * Prepares the `from` email address.\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return array\n     */\n    protected function _prepareFromAddress($email)\n    {\n        $from = $email->getReturnPath();\n        if (empty($from)) {\n            $from = $email->getFrom();\n        }\n\n        return $from;\n    }\n\n    /**\n     * Prepares the recipient email addresses.\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return array\n     */\n    protected function _prepareRecipientAddresses($email)\n    {\n        $to = $email->getTo();\n        $cc = $email->getCc();\n        $bcc = $email->getBcc();\n\n        return array_merge(array_keys($to), array_keys($cc), array_keys($bcc));\n    }\n\n    /**\n     * Prepares the message headers.\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return array\n     */\n    protected function _prepareMessageHeaders($email)\n    {\n        return $email->getHeaders(['from', 'sender', 'replyTo', 'readReceipt', 'to', 'cc', 'subject', 'returnPath']);\n    }\n\n    /**\n     * Prepares the message body.\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return string\n     */\n    protected function _prepareMessage($email)\n    {\n        $lines = $email->message();\n        $messages = [];\n        foreach ($lines as $line) {\n            if (!empty($line) && ($line[0] === '.')) {\n                $messages[] = '.' . $line;\n            } else {\n                $messages[] = $line;\n            }\n        }\n\n        return implode(\"\\r\\n\", $messages);\n    }\n\n    /**\n     * Send emails\n     *\n     * @return void\n     * @param \\Cake\\Mailer\\Email $email Cake Email\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _sendRcpt($email)\n    {\n        $from = $this->_prepareFromAddress($email);\n        $this->_smtpSend($this->_prepareFromCmd(key($from)));\n\n        $emails = $this->_prepareRecipientAddresses($email);\n        foreach ($emails as $mail) {\n            $this->_smtpSend($this->_prepareRcptCmd($mail));\n        }\n    }\n\n    /**\n     * Send Data\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _sendData($email)\n    {\n        $this->_smtpSend('DATA', '354');\n\n        $headers = $this->_headersToString($this->_prepareMessageHeaders($email));\n        $message = $this->_prepareMessage($email);\n\n        $this->_smtpSend($headers . \"\\r\\n\\r\\n\" . $message . \"\\r\\n\\r\\n\\r\\n.\");\n        $this->_content = ['headers' => $headers, 'message' => $message];\n    }\n\n    /**\n     * Disconnect\n     *\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _disconnect()\n    {\n        $this->_smtpSend('QUIT', false);\n        $this->_socket->disconnect();\n    }\n\n    /**\n     * Helper method to generate socket\n     *\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _generateSocket()\n    {\n        $this->_socket = new Socket($this->_config);\n    }\n\n    /**\n     * Protected method for sending data to SMTP connection\n     *\n     * @param string|null $data Data to be sent to SMTP server\n     * @param string|bool $checkCode Code to check for in server response, false to skip\n     * @return string|null The matched code, or null if nothing matched\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _smtpSend($data, $checkCode = '250')\n    {\n        $this->_lastResponse = [];\n\n        if ($data !== null) {\n            $this->_socket->write($data . \"\\r\\n\");\n        }\n\n        $timeout = $this->_config['timeout'];\n\n        while ($checkCode !== false) {\n            $response = '';\n            $startTime = time();\n            while (substr($response, -2) !== \"\\r\\n\" && ((time() - $startTime) < $timeout)) {\n                $bytes = $this->_socket->read();\n                if ($bytes === false || $bytes === null) {\n                    break;\n                }\n                $response .= $bytes;\n            }\n            if (substr($response, -2) !== \"\\r\\n\") {\n                throw new SocketException('SMTP timeout.');\n            }\n            $responseLines = explode(\"\\r\\n\", rtrim($response, \"\\r\\n\"));\n            $response = end($responseLines);\n\n            $this->_bufferResponseLines($responseLines);\n\n            if (preg_match('/^(' . $checkCode . ')(.)/', $response, $code)) {\n                if ($code[2] === '-') {\n                    continue;\n                }\n\n                return $code[1];\n            }\n            throw new SocketException(sprintf('SMTP Error: %s', $response));\n        }\n    }\n}\n", "<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n * @link          https://cakephp.org CakePHP(tm) Project\n * @since         2.0.0\n * @license       https://opensource.org/licenses/mit-license.php MIT License\n */\nnamespace Cake\\Test\\TestCase\\Mailer\\Transport;\n\nuse Cake\\Mailer\\Email;\nuse Cake\\Mailer\\Transport\\SmtpTransport;\nuse Cake\\Network\\Exception\\SocketException;\nuse Cake\\Network\\Socket;\nuse Cake\\TestSuite\\TestCase;\n\n/**\n * Help to test SmtpTransport\n */\nclass SmtpTestTransport extends SmtpTransport\n{\n\n    /**\n     * Helper to change the socket\n     *\n     * @param Socket $socket\n     * @return void\n     */\n    public function setSocket(Socket $socket)\n    {\n        $this->_socket = $socket;\n    }\n\n    /**\n     * Disabled the socket change\n     *\n     * @return void\n     */\n    protected function _generateSocket()\n    {\n    }\n\n    /**\n     * Magic function to call protected methods\n     *\n     * @param string $method\n     * @param string $args\n     * @return mixed\n     */\n    public function __call($method, $args)\n    {\n        $method = '_' . $method;\n\n        return call_user_func_array([$this, $method], $args);\n    }\n}\n\n/**\n * Test case\n */\nclass SmtpTransportTest extends TestCase\n{\n\n    /**\n     * Setup\n     *\n     * @return void\n     */\n    public function setUp()\n    {\n        parent::setUp();\n        $this->socket = $this->getMockBuilder('Cake\\Network\\Socket')\n            ->setMethods(['read', 'write', 'connect', 'disconnect', 'enableCrypto'])\n            ->getMock();\n\n        $this->SmtpTransport = new SmtpTestTransport();\n        $this->SmtpTransport->setSocket($this->socket);\n        $this->SmtpTransport->setConfig(['client' => 'localhost']);\n    }\n\n    /**\n     * testConnectEhlo method\n     *\n     * @return void\n     */\n    public function testConnectEhlo()\n    {\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->any())\n           ->method('read')\n            ->will($this->onConsecutiveCalls(\"220 Welcome message\\r\\n\", \"250 Accepted\\r\\n\"));\n        $this->socket->expects($this->once())->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnectEhloTls method\n     *\n     * @return void\n     */\n    public function testConnectEhloTls()\n    {\n        $this->SmtpTransport->setConfig(['tls' => true]);\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"STARTTLS\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"220 Server ready\\r\\n\"));\n        $this->socket->expects($this->at(6))->method('enableCrypto')->with('tls')->will($this->returnValue(true));\n        $this->socket->expects($this->at(7))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(8))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnectEhloTlsOnNonTlsServer method\n     *\n     * @return void\n     */\n    public function testConnectEhloTlsOnNonTlsServer()\n    {\n        $this->SmtpTransport->setConfig(['tls' => true]);\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"STARTTLS\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')\n            ->will($this->returnValue(\"500 5.3.3 Unrecognized command\\r\\n\"));\n\n        $e = null;\n        try {\n            $this->SmtpTransport->connect();\n        } catch (SocketException $e) {\n        }\n\n        $this->assertNotNull($e);\n        $this->assertEquals('SMTP server did not accept the connection or trying to connect to non TLS SMTP server using TLS.', $e->getMessage());\n        $this->assertInstanceOf(SocketException::class, $e->getPrevious());\n        $this->assertContains('500 5.3.3 Unrecognized command', $e->getPrevious()->getMessage());\n    }\n\n    /**\n     * testConnectEhloNoTlsOnRequiredTlsServer method\n     *\n     * @return void\n     */\n    public function testConnectEhloNoTlsOnRequiredTlsServer()\n    {\n        $this->expectException(\\Cake\\Network\\Exception\\SocketException::class);\n        $this->expectExceptionMessage('SMTP authentication method not allowed, check if SMTP server requires TLS.');\n        $this->SmtpTransport->setConfig(['tls' => false, 'username' => 'user', 'password' => 'pass']);\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')\n            ->will($this->returnValue(\"504 5.7.4 Unrecognized authentication type\\r\\n\"));\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnectHelo method\n     *\n     * @return void\n     */\n    public function testConnectHelo()\n    {\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"200 Not Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"HELO localhost\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnectFail method\n     *\n     * @return void\n     */\n    public function testConnectFail()\n    {\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"200 Not Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"HELO localhost\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"200 Not Accepted\\r\\n\"));\n\n        $e = null;\n        try {\n            $this->SmtpTransport->connect();\n        } catch (SocketException $e) {\n        }\n\n        $this->assertNotNull($e);\n        $this->assertEquals('SMTP server did not accept the connection.', $e->getMessage());\n        $this->assertInstanceOf(SocketException::class, $e->getPrevious());\n        $this->assertContains('200 Not Accepted', $e->getPrevious()->getMessage());\n    }\n\n    /**\n     * testAuth method\n     *\n     * @return void\n     */\n    public function testAuth()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"334 Login\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"bWFyaw==\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"334 Pass\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"c3Rvcnk=\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"235 OK\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n        $this->SmtpTransport->auth();\n    }\n\n    /**\n     * testAuthNotRecognized method\n     *\n     * @return void\n     */\n    public function testAuthNotRecognized()\n    {\n        $this->expectException(\\Cake\\Network\\Exception\\SocketException::class);\n        $this->expectExceptionMessage('AUTH command not recognized or not implemented, SMTP server may not require authentication.');\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')\n            ->will($this->returnValue(\"500 5.3.3 Unrecognized command\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n        $this->SmtpTransport->auth();\n    }\n\n    /**\n     * testAuthNotImplemented method\n     *\n     * @return void\n     */\n    public function testAuthNotImplemented()\n    {\n        $this->expectException(\\Cake\\Network\\Exception\\SocketException::class);\n        $this->expectExceptionMessage('AUTH command not recognized or not implemented, SMTP server may not require authentication.');\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')\n            ->will($this->returnValue(\"502 5.3.3 Command not implemented\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n        $this->SmtpTransport->auth();\n    }\n\n    /**\n     * testAuthBadSequence method\n     *\n     * @return void\n     */\n    public function testAuthBadSequence()\n    {\n        $this->expectException(\\Cake\\Network\\Exception\\SocketException::class);\n        $this->expectExceptionMessage('SMTP Error: 503 5.5.1 Already authenticated');\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))\n            ->method('read')->will($this->returnValue(\"503 5.5.1 Already authenticated\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n        $this->SmtpTransport->auth();\n    }\n\n    /**\n     * testAuthBadUsername method\n     *\n     * @return void\n     */\n    public function testAuthBadUsername()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"334 Login\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"bWFyaw==\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')\n            ->will($this->returnValue(\"535 5.7.8 Authentication failed\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n\n        $e = null;\n        try {\n            $this->SmtpTransport->auth();\n        } catch (SocketException $e) {\n        }\n\n        $this->assertNotNull($e);\n        $this->assertEquals('SMTP server did not accept the username.', $e->getMessage());\n        $this->assertInstanceOf(SocketException::class, $e->getPrevious());\n        $this->assertContains('535 5.7.8 Authentication failed', $e->getPrevious()->getMessage());\n    }\n\n    /**\n     * testAuthBadPassword method\n     *\n     * @return void\n     */\n    public function testAuthBadPassword()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"334 Login\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"bWFyaw==\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"334 Pass\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"c3Rvcnk=\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"535 5.7.8 Authentication failed\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n\n        $e = null;\n        try {\n            $this->SmtpTransport->auth();\n        } catch (SocketException $e) {\n        }\n\n        $this->assertNotNull($e);\n        $this->assertEquals('SMTP server did not accept the password.', $e->getMessage());\n        $this->assertInstanceOf(SocketException::class, $e->getPrevious());\n        $this->assertContains('535 5.7.8 Authentication failed', $e->getPrevious()->getMessage());\n    }\n\n    /**\n     * testRcpt method\n     *\n     * @return void\n     */\n    public function testRcpt()\n    {\n        $email = new Email();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->setBcc('phpnut@cakephp.org');\n        $email->setCc(['mark@cakephp.org' => 'Mark Story', 'juan@cakephp.org' => 'Juan Basso']);\n\n        $this->socket->expects($this->at(0))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"RCPT TO:<mark@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(6))->method('write')->with(\"RCPT TO:<juan@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(7))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(8))->method('write')->with(\"RCPT TO:<phpnut@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(9))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->sendRcpt($email);\n    }\n\n    /**\n     * testRcptWithReturnPath method\n     *\n     * @return void\n     */\n    public function testRcptWithReturnPath()\n    {\n        $email = new Email();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->setReturnPath('pleasereply@cakephp.org', 'CakePHP Return');\n\n        $this->socket->expects($this->at(0))->method('write')->with(\"MAIL FROM:<pleasereply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->sendRcpt($email);\n    }\n\n    /**\n     * testSendData method\n     *\n     * @return void\n     */\n    public function testSendData()\n    {\n        $email = $this->getMockBuilder('Cake\\Mailer\\Email')\n            ->setMethods(['message'])\n            ->getMock();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setReturnPath('pleasereply@cakephp.org', 'CakePHP Return');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->setCc(['mark@cakephp.org' => 'Mark Story', 'juan@cakephp.org' => 'Juan Basso']);\n        $email->setBcc('phpnut@cakephp.org');\n        $email->setMessageId('<4d9946cf-0a44-4907-88fe-1d0ccbdd56cb@localhost>');\n        $email->setSubject('Testing SMTP');\n        $date = date(DATE_RFC2822);\n        $email->setHeaders(['Date' => $date]);\n        $email->expects($this->once())\n            ->method('message')\n            ->will($this->returnValue(['First Line', 'Second Line', '.Third Line', '']));\n\n        $data = \"From: CakePHP Test <noreply@cakephp.org>\\r\\n\";\n        $data .= \"Return-Path: CakePHP Return <pleasereply@cakephp.org>\\r\\n\";\n        $data .= \"To: CakePHP <cake@cakephp.org>\\r\\n\";\n        $data .= \"Cc: Mark Story <mark@cakephp.org>, Juan Basso <juan@cakephp.org>\\r\\n\";\n        $data .= 'Date: ' . $date . \"\\r\\n\";\n        $data .= \"Message-ID: <4d9946cf-0a44-4907-88fe-1d0ccbdd56cb@localhost>\\r\\n\";\n        $data .= \"Subject: Testing SMTP\\r\\n\";\n        $data .= \"MIME-Version: 1.0\\r\\n\";\n        $data .= \"Content-Type: text/plain; charset=UTF-8\\r\\n\";\n        $data .= \"Content-Transfer-Encoding: 8bit\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"First Line\\r\\n\";\n        $data .= \"Second Line\\r\\n\";\n        $data .= \"..Third Line\\r\\n\"; // RFC5321 4.5.2.Transparency\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\\r\\n.\\r\\n\";\n\n        $this->socket->expects($this->at(0))->method('write')->with(\"DATA\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"354 OK\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with($data);\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->sendData($email);\n    }\n\n    /**\n     * testQuit method\n     *\n     * @return void\n     */\n    public function testQuit()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"QUIT\\r\\n\");\n        $this->socket->connected = true;\n        $this->SmtpTransport->disconnect();\n    }\n\n    /**\n     * testEmptyConfigArray method\n     *\n     * @return void\n     */\n    public function testEmptyConfigArray()\n    {\n        $this->SmtpTransport->setConfig([\n            'client' => 'myhost.com',\n            'port' => 666\n        ]);\n        $expected = $this->SmtpTransport->getConfig();\n\n        $this->assertEquals(666, $expected['port']);\n\n        $this->SmtpTransport->setConfig([]);\n        $result = $this->SmtpTransport->getConfig();\n        $this->assertEquals($expected, $result);\n    }\n\n    /**\n     * testGetLastResponse method\n     *\n     * @return void\n     */\n    public function testGetLastResponse()\n    {\n        $this->assertEmpty($this->SmtpTransport->getLastResponse());\n\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->any())\n            ->method('read')\n            ->will($this->onConsecutiveCalls(\n                \"220 Welcome message\\r\\n\",\n                \"250-PIPELINING\\r\\n\",\n                \"250-SIZE 102400000\\r\\n\",\n                \"250-VRFY\\r\\n\",\n                \"250-ETRN\\r\\n\",\n                \"250-STARTTLS\\r\\n\",\n                \"250-AUTH PLAIN LOGIN\\r\\n\",\n                \"250-AUTH=PLAIN LOGIN\\r\\n\",\n                \"250-ENHANCEDSTATUSCODES\\r\\n\",\n                \"250-8BITMIME\\r\\n\",\n                \"250 DSN\\r\\n\"\n            ));\n        $this->socket->expects($this->once())->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->SmtpTransport->connect();\n\n        $expected = [\n            ['code' => '250', 'message' => 'PIPELINING'],\n            ['code' => '250', 'message' => 'SIZE 102400000'],\n            ['code' => '250', 'message' => 'VRFY'],\n            ['code' => '250', 'message' => 'ETRN'],\n            ['code' => '250', 'message' => 'STARTTLS'],\n            ['code' => '250', 'message' => 'AUTH PLAIN LOGIN'],\n            ['code' => '250', 'message' => 'AUTH=PLAIN LOGIN'],\n            ['code' => '250', 'message' => 'ENHANCEDSTATUSCODES'],\n            ['code' => '250', 'message' => '8BITMIME'],\n            ['code' => '250', 'message' => 'DSN']\n        ];\n        $result = $this->SmtpTransport->getLastResponse();\n        $this->assertEquals($expected, $result);\n    }\n\n    /**\n     * Test getLastResponse() with multiple operations\n     *\n     * @return void\n     */\n    public function testGetLastResponseMultipleOperations()\n    {\n        $email = new Email();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n\n        $this->socket->expects($this->at(0))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->sendRcpt($email);\n\n        $expected = [\n            ['code' => '250', 'message' => 'OK'],\n        ];\n        $result = $this->SmtpTransport->getLastResponse();\n        $this->assertEquals($expected, $result);\n    }\n\n    /**\n     * testBufferResponseLines method\n     *\n     * @return void\n     */\n    public function testBufferResponseLines()\n    {\n        $responseLines = [\n            '123',\n            \"456\\tFOO\",\n            'FOOBAR',\n            '250-PIPELINING',\n            '250-ENHANCEDSTATUSCODES',\n            '250-8BITMIME',\n            '250 DSN',\n        ];\n        $this->SmtpTransport->bufferResponseLines($responseLines);\n\n        $expected = [\n            ['code' => '123', 'message' => null],\n            ['code' => '250', 'message' => 'PIPELINING'],\n            ['code' => '250', 'message' => 'ENHANCEDSTATUSCODES'],\n            ['code' => '250', 'message' => '8BITMIME'],\n            ['code' => '250', 'message' => 'DSN']\n        ];\n        $result = $this->SmtpTransport->getLastResponse();\n        $this->assertEquals($expected, $result);\n    }\n\n    /**\n     * testExplicitConnectAlreadyConnected method\n     *\n     * @return void\n     */\n    public function testExplicitConnectAlreadyConnected()\n    {\n        $this->socket->expects($this->never())->method('connect');\n        $this->socket->connected = true;\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnected method\n     *\n     * @return void\n     */\n    public function testConnected()\n    {\n        $this->socket->connected = true;\n        $this->assertTrue($this->SmtpTransport->connected());\n\n        $this->socket->connected = false;\n        $this->assertFalse($this->SmtpTransport->connected());\n    }\n\n    /**\n     * testAutoDisconnect method\n     *\n     * @return void\n     */\n    public function testAutoDisconnect()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"QUIT\\r\\n\");\n        $this->socket->expects($this->at(1))->method('disconnect');\n        $this->socket->connected = true;\n        unset($this->SmtpTransport);\n    }\n\n    /**\n     * testExplicitDisconnect method\n     *\n     * @return void\n     */\n    public function testExplicitDisconnect()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"QUIT\\r\\n\");\n        $this->socket->expects($this->at(1))->method('disconnect');\n        $this->socket->connected = true;\n        $this->SmtpTransport->disconnect();\n    }\n\n    /**\n     * testExplicitDisconnectNotConnected method\n     *\n     * @return void\n     */\n    public function testExplicitDisconnectNotConnected()\n    {\n        $callback = function ($arg) {\n            $this->assertNotEquals(\"QUIT\\r\\n\", $arg);\n        };\n        $this->socket->expects($this->any())->method('write')->will($this->returnCallback($callback));\n        $this->socket->expects($this->never())->method('disconnect');\n        $this->SmtpTransport->disconnect();\n    }\n\n    /**\n     * testKeepAlive method\n     *\n     * @return void\n     */\n    public function testKeepAlive()\n    {\n        $this->SmtpTransport->setConfig(['keepAlive' => true]);\n\n        $email = $this->getMockBuilder('Cake\\Mailer\\Email')\n            ->setMethods(['message'])\n            ->getMock();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->expects($this->exactly(2))->method('message')->will($this->returnValue(['First Line']));\n\n        $callback = function ($arg) {\n            $this->assertNotEquals(\"QUIT\\r\\n\", $arg);\n        };\n        $this->socket->expects($this->any())->method('write')->will($this->returnCallback($callback));\n        $this->socket->expects($this->never())->method('disconnect');\n\n        $this->socket->expects($this->at(0))->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(4))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(6))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(7))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(8))->method('write')->with(\"DATA\\r\\n\");\n        $this->socket->expects($this->at(9))->method('read')->will($this->returnValue(\"354 OK\\r\\n\"));\n        $this->socket->expects($this->at(10))->method('write')->with($this->stringContains('First Line'));\n        $this->socket->expects($this->at(11))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(12))->method('write')->with(\"RSET\\r\\n\");\n        $this->socket->expects($this->at(13))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(14))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(15))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(16))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(17))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(18))->method('write')->with(\"DATA\\r\\n\");\n        $this->socket->expects($this->at(19))->method('read')->will($this->returnValue(\"354 OK\\r\\n\"));\n        $this->socket->expects($this->at(20))->method('write')->with($this->stringContains('First Line'));\n        $this->socket->expects($this->at(21))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->send($email);\n        $this->socket->connected = true;\n        $this->SmtpTransport->send($email);\n    }\n\n    /**\n     * testSendDefaults method\n     *\n     * @return void\n     */\n    public function testSendDefaults()\n    {\n        $email = $this->getMockBuilder('Cake\\Mailer\\Email')\n            ->setMethods(['message'])\n            ->getMock();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->expects($this->once())->method('message')->will($this->returnValue(['First Line']));\n\n        $this->socket->expects($this->at(0))->method('connect')->will($this->returnValue(true));\n\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(4))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(6))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(7))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(8))->method('write')->with(\"DATA\\r\\n\");\n        $this->socket->expects($this->at(9))->method('read')->will($this->returnValue(\"354 OK\\r\\n\"));\n        $this->socket->expects($this->at(10))->method('write')->with($this->stringContains('First Line'));\n        $this->socket->expects($this->at(11))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(12))->method('write')->with(\"QUIT\\r\\n\");\n        $this->socket->expects($this->at(13))->method('disconnect');\n\n        $this->SmtpTransport->send($email);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n * @link          https://cakephp.org CakePHP(tm) Project\n * @since         2.0.0\n * @license       https://opensource.org/licenses/mit-license.php MIT License\n */\nnamespace Cake\\Mailer\\Transport;\n\nuse Cake\\Mailer\\AbstractTransport;\nuse Cake\\Mailer\\Email;\nuse Cake\\Network\\Exception\\SocketException;\nuse Cake\\Network\\Socket;\nuse Exception;\n\n/**\n * Send mail using SMTP protocol\n */\nclass SmtpTransport extends AbstractTransport\n{\n\n    /**\n     * Default config for this class\n     *\n     * @var array\n     */\n    protected $_defaultConfig = [\n        'host' => 'localhost',\n        'port' => 25,\n        'timeout' => 30,\n        'username' => null,\n        'password' => null,\n        'client' => null,\n        'tls' => false,\n        'keepAlive' => false\n    ];\n\n    /**\n     * Socket to SMTP server\n     *\n     * @var \\Cake\\Network\\Socket\n     */\n    protected $_socket;\n\n    /**\n     * Content of email to return\n     *\n     * @var array\n     */\n    protected $_content = [];\n\n    /**\n     * The response of the last sent SMTP command.\n     *\n     * @var array\n     */\n    protected $_lastResponse = [];\n\n    /**\n     * Destructor\n     *\n     * Tries to disconnect to ensure that the connection is being\n     * terminated properly before the socket gets closed.\n     */\n    public function __destruct()\n    {\n        try {\n            $this->disconnect();\n        } catch (Exception $e) {\n            // avoid fatal error on script termination\n        }\n    }\n\n    /**\n     * Unserialize handler.\n     *\n     * Ensure that the socket property isn't reinitialized in a broken state.\n     *\n     * @return void\n     */\n    public function __wakeup()\n    {\n        $this->_socket = null;\n    }\n\n    /**\n     * Connect to the SMTP server.\n     *\n     * This method tries to connect only in case there is no open\n     * connection available already.\n     *\n     * @return void\n     */\n    public function connect()\n    {\n        if (!$this->connected()) {\n            $this->_connect();\n            $this->_auth();\n        }\n    }\n\n    /**\n     * Check whether an open connection to the SMTP server is available.\n     *\n     * @return bool\n     */\n    public function connected()\n    {\n        return $this->_socket !== null && $this->_socket->connected;\n    }\n\n    /**\n     * Disconnect from the SMTP server.\n     *\n     * This method tries to disconnect only in case there is an open\n     * connection available.\n     *\n     * @return void\n     */\n    public function disconnect()\n    {\n        if ($this->connected()) {\n            $this->_disconnect();\n        }\n    }\n\n    /**\n     * Returns the response of the last sent SMTP command.\n     *\n     * A response consists of one or more lines containing a response\n     * code and an optional response message text:\n     * ```\n     * [\n     *     [\n     *         'code' => '250',\n     *         'message' => 'mail.example.com'\n     *     ],\n     *     [\n     *         'code' => '250',\n     *         'message' => 'PIPELINING'\n     *     ],\n     *     [\n     *         'code' => '250',\n     *         'message' => '8BITMIME'\n     *     ],\n     *     // etc...\n     * ]\n     * ```\n     *\n     * @return array\n     */\n    public function getLastResponse()\n    {\n        return $this->_lastResponse;\n    }\n\n    /**\n     * Send mail\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return array\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    public function send(Email $email)\n    {\n        if (!$this->connected()) {\n            $this->_connect();\n            $this->_auth();\n        } else {\n            $this->_smtpSend('RSET');\n        }\n\n        $this->_sendRcpt($email);\n        $this->_sendData($email);\n\n        if (!$this->_config['keepAlive']) {\n            $this->_disconnect();\n        }\n\n        return $this->_content;\n    }\n\n    /**\n     * Parses and stores the response lines in `'code' => 'message'` format.\n     *\n     * @param array $responseLines Response lines to parse.\n     * @return void\n     */\n    protected function _bufferResponseLines(array $responseLines)\n    {\n        $response = [];\n        foreach ($responseLines as $responseLine) {\n            if (preg_match('/^(\\d{3})(?:[ -]+(.*))?$/', $responseLine, $match)) {\n                $response[] = [\n                    'code' => $match[1],\n                    'message' => isset($match[2]) ? $match[2] : null\n                ];\n            }\n        }\n        $this->_lastResponse = array_merge($this->_lastResponse, $response);\n    }\n\n    /**\n     * Connect to SMTP Server\n     *\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _connect()\n    {\n        $this->_generateSocket();\n        if (!$this->_socket->connect()) {\n            throw new SocketException('Unable to connect to SMTP server.');\n        }\n        $this->_smtpSend(null, '220');\n\n        $config = $this->_config;\n\n        if (isset($config['client'])) {\n            $host = $config['client'];\n        } elseif ($httpHost = env('HTTP_HOST')) {\n            list($host) = explode(':', $httpHost);\n        } else {\n            $host = 'localhost';\n        }\n\n        try {\n            $this->_smtpSend(\"EHLO {$host}\", '250');\n            if ($config['tls']) {\n                $this->_smtpSend('STARTTLS', '220');\n                $this->_socket->enableCrypto('tls');\n                $this->_smtpSend(\"EHLO {$host}\", '250');\n            }\n        } catch (SocketException $e) {\n            if ($config['tls']) {\n                throw new SocketException('SMTP server did not accept the connection or trying to connect to non TLS SMTP server using TLS.', null, $e);\n            }\n            try {\n                $this->_smtpSend(\"HELO {$host}\", '250');\n            } catch (SocketException $e2) {\n                throw new SocketException('SMTP server did not accept the connection.', null, $e2);\n            }\n        }\n    }\n\n    /**\n     * Send authentication\n     *\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _auth()\n    {\n        if (isset($this->_config['username'], $this->_config['password'])) {\n            $replyCode = (string)$this->_smtpSend('AUTH LOGIN', '334|500|502|504');\n            if ($replyCode === '334') {\n                try {\n                    $this->_smtpSend(base64_encode($this->_config['username']), '334');\n                } catch (SocketException $e) {\n                    throw new SocketException('SMTP server did not accept the username.', null, $e);\n                }\n                try {\n                    $this->_smtpSend(base64_encode($this->_config['password']), '235');\n                } catch (SocketException $e) {\n                    throw new SocketException('SMTP server did not accept the password.', null, $e);\n                }\n            } elseif ($replyCode === '504') {\n                throw new SocketException('SMTP authentication method not allowed, check if SMTP server requires TLS.');\n            } else {\n                throw new SocketException('AUTH command not recognized or not implemented, SMTP server may not require authentication.');\n            }\n        }\n    }\n\n    /**\n     * Prepares the `MAIL FROM` SMTP command.\n     *\n     * @param string $email The email address to send with the command.\n     * @return string\n     */\n    protected function _prepareFromCmd($email)\n    {\n        return 'MAIL FROM:<' . $email . '>';\n    }\n\n    /**\n     * Prepares the `RCPT TO` SMTP command.\n     *\n     * @param string $email The email address to send with the command.\n     * @return string\n     */\n    protected function _prepareRcptCmd($email)\n    {\n        return 'RCPT TO:<' . $email . '>';\n    }\n\n    /**\n     * Prepares the `from` email address.\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return array\n     */\n    protected function _prepareFromAddress($email)\n    {\n        $from = $email->getReturnPath();\n        if (empty($from)) {\n            $from = $email->getFrom();\n        }\n\n        return $from;\n    }\n\n    /**\n     * Prepares the recipient email addresses.\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return array\n     */\n    protected function _prepareRecipientAddresses($email)\n    {\n        $to = $email->getTo();\n        $cc = $email->getCc();\n        $bcc = $email->getBcc();\n\n        return array_merge(array_keys($to), array_keys($cc), array_keys($bcc));\n    }\n\n    /**\n     * Prepares the message headers.\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return array\n     */\n    protected function _prepareMessageHeaders($email)\n    {\n        return $email->getHeaders(['from', 'sender', 'replyTo', 'readReceipt', 'to', 'cc', 'subject', 'returnPath']);\n    }\n\n    /**\n     * Prepares the message body.\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return string\n     */\n    protected function _prepareMessage($email)\n    {\n        $lines = $email->message();\n        $messages = [];\n        foreach ($lines as $line) {\n            if (!empty($line) && ($line[0] === '.')) {\n                $messages[] = '.' . $line;\n            } else {\n                $messages[] = $line;\n            }\n        }\n\n        return implode(\"\\r\\n\", $messages);\n    }\n\n    /**\n     * Send emails\n     *\n     * @return void\n     * @param \\Cake\\Mailer\\Email $email Cake Email\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _sendRcpt($email)\n    {\n        $from = $this->_prepareFromAddress($email);\n        $this->_smtpSend($this->_prepareFromCmd(key($from)));\n\n        $emails = $this->_prepareRecipientAddresses($email);\n        foreach ($emails as $mail) {\n            $this->_smtpSend($this->_prepareRcptCmd($mail));\n        }\n    }\n\n    /**\n     * Send Data\n     *\n     * @param \\Cake\\Mailer\\Email $email Email instance\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _sendData($email)\n    {\n        $this->_smtpSend('DATA', '354');\n\n        $headers = $this->_headersToString($this->_prepareMessageHeaders($email));\n        $message = $this->_prepareMessage($email);\n\n        $this->_smtpSend($headers . \"\\r\\n\\r\\n\" . $message . \"\\r\\n\\r\\n\\r\\n.\");\n        $this->_content = ['headers' => $headers, 'message' => $message];\n    }\n\n    /**\n     * Disconnect\n     *\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _disconnect()\n    {\n        $this->_smtpSend('QUIT', false);\n        $this->_socket->disconnect();\n    }\n\n    /**\n     * Helper method to generate socket\n     *\n     * @return void\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _generateSocket()\n    {\n        $this->_socket = new Socket($this->_config);\n    }\n\n    /**\n     * Protected method for sending data to SMTP connection\n     *\n     * @param string|null $data Data to be sent to SMTP server\n     * @param string|bool $checkCode Code to check for in server response, false to skip\n     * @return string|null The matched code, or null if nothing matched\n     * @throws \\Cake\\Network\\Exception\\SocketException\n     */\n    protected function _smtpSend($data, $checkCode = '250')\n    {\n        $this->_lastResponse = [];\n\n        if ($data !== null) {\n            $this->_socket->write($data . \"\\r\\n\");\n        }\n\n        $timeout = $this->_config['timeout'];\n\n        while ($checkCode !== false) {\n            $response = '';\n            $startTime = time();\n            while (substr($response, -2) !== \"\\r\\n\" && ((time() - $startTime) < $timeout)) {\n                $bytes = $this->_socket->read();\n                if ($bytes === false || $bytes === null) {\n                    break;\n                }\n                $response .= $bytes;\n            }\n            if (substr($response, -2) !== \"\\r\\n\") {\n                throw new SocketException('SMTP timeout.');\n            }\n            $responseLines = explode(\"\\r\\n\", rtrim($response, \"\\r\\n\"));\n            $response = end($responseLines);\n\n            $this->_bufferResponseLines($responseLines);\n\n            if (preg_match('/^(' . $checkCode . ')(.)/', $response, $code)) {\n                if ($code[2] === '-') {\n                    continue;\n                }\n\n                return $code[1];\n            }\n            throw new SocketException(sprintf('SMTP Error: %s', $response));\n        }\n    }\n}\n", "<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)\n * @link          https://cakephp.org CakePHP(tm) Project\n * @since         2.0.0\n * @license       https://opensource.org/licenses/mit-license.php MIT License\n */\nnamespace Cake\\Test\\TestCase\\Mailer\\Transport;\n\nuse Cake\\Mailer\\Email;\nuse Cake\\Mailer\\Transport\\SmtpTransport;\nuse Cake\\Network\\Exception\\SocketException;\nuse Cake\\Network\\Socket;\nuse Cake\\TestSuite\\TestCase;\n\n/**\n * Help to test SmtpTransport\n */\nclass SmtpTestTransport extends SmtpTransport\n{\n\n    /**\n     * Helper to change the socket\n     *\n     * @param Socket $socket\n     * @return void\n     */\n    public function setSocket(Socket $socket)\n    {\n        $this->_socket = $socket;\n    }\n\n    /**\n     * Disabled the socket change\n     *\n     * @return void\n     */\n    protected function _generateSocket()\n    {\n    }\n\n    /**\n     * Magic function to call protected methods\n     *\n     * @param string $method\n     * @param string $args\n     * @return mixed\n     */\n    public function __call($method, $args)\n    {\n        $method = '_' . $method;\n\n        return call_user_func_array([$this, $method], $args);\n    }\n}\n\n/**\n * Test case\n */\nclass SmtpTransportTest extends TestCase\n{\n\n    /**\n     * Setup\n     *\n     * @return void\n     */\n    public function setUp()\n    {\n        parent::setUp();\n        $this->socket = $this->getMockBuilder('Cake\\Network\\Socket')\n            ->setMethods(['read', 'write', 'connect', 'disconnect', 'enableCrypto'])\n            ->getMock();\n\n        $this->SmtpTransport = new SmtpTestTransport();\n        $this->SmtpTransport->setSocket($this->socket);\n        $this->SmtpTransport->setConfig(['client' => 'localhost']);\n    }\n\n    /**\n     * testConnectEhlo method\n     *\n     * @return void\n     */\n    public function testConnectEhlo()\n    {\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->any())\n           ->method('read')\n            ->will($this->onConsecutiveCalls(\"220 Welcome message\\r\\n\", \"250 Accepted\\r\\n\"));\n        $this->socket->expects($this->once())->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnectEhloTls method\n     *\n     * @return void\n     */\n    public function testConnectEhloTls()\n    {\n        $this->SmtpTransport->setConfig(['tls' => true]);\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"STARTTLS\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"220 Server ready\\r\\n\"));\n        $this->socket->expects($this->at(6))->method('enableCrypto')->with('tls')->will($this->returnValue(true));\n        $this->socket->expects($this->at(7))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(8))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnectEhloTlsOnNonTlsServer method\n     *\n     * @return void\n     */\n    public function testConnectEhloTlsOnNonTlsServer()\n    {\n        $this->SmtpTransport->setConfig(['tls' => true]);\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"STARTTLS\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')\n            ->will($this->returnValue(\"500 5.3.3 Unrecognized command\\r\\n\"));\n\n        $e = null;\n        try {\n            $this->SmtpTransport->connect();\n        } catch (SocketException $e) {\n        }\n\n        $this->assertNotNull($e);\n        $this->assertEquals('SMTP server did not accept the connection or trying to connect to non TLS SMTP server using TLS.', $e->getMessage());\n        $this->assertInstanceOf(SocketException::class, $e->getPrevious());\n        $this->assertContains('500 5.3.3 Unrecognized command', $e->getPrevious()->getMessage());\n    }\n\n    /**\n     * testConnectEhloNoTlsOnRequiredTlsServer method\n     *\n     * @return void\n     */\n    public function testConnectEhloNoTlsOnRequiredTlsServer()\n    {\n        $this->expectException(\\Cake\\Network\\Exception\\SocketException::class);\n        $this->expectExceptionMessage('SMTP authentication method not allowed, check if SMTP server requires TLS.');\n        $this->SmtpTransport->setConfig(['tls' => false, 'username' => 'user', 'password' => 'pass']);\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')\n            ->will($this->returnValue(\"504 5.7.4 Unrecognized authentication type\\r\\n\"));\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnectHelo method\n     *\n     * @return void\n     */\n    public function testConnectHelo()\n    {\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"200 Not Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"HELO localhost\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"250 Accepted\\r\\n\"));\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnectFail method\n     *\n     * @return void\n     */\n    public function testConnectFail()\n    {\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"200 Not Accepted\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"HELO localhost\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"200 Not Accepted\\r\\n\"));\n\n        $e = null;\n        try {\n            $this->SmtpTransport->connect();\n        } catch (SocketException $e) {\n        }\n\n        $this->assertNotNull($e);\n        $this->assertEquals('SMTP server did not accept the connection.', $e->getMessage());\n        $this->assertInstanceOf(SocketException::class, $e->getPrevious());\n        $this->assertContains('200 Not Accepted', $e->getPrevious()->getMessage());\n    }\n\n    /**\n     * testAuth method\n     *\n     * @return void\n     */\n    public function testAuth()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"334 Login\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"bWFyaw==\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"334 Pass\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"c3Rvcnk=\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"235 OK\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n        $this->SmtpTransport->auth();\n    }\n\n    /**\n     * testAuthNotRecognized method\n     *\n     * @return void\n     */\n    public function testAuthNotRecognized()\n    {\n        $this->expectException(\\Cake\\Network\\Exception\\SocketException::class);\n        $this->expectExceptionMessage('AUTH command not recognized or not implemented, SMTP server may not require authentication.');\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')\n            ->will($this->returnValue(\"500 5.3.3 Unrecognized command\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n        $this->SmtpTransport->auth();\n    }\n\n    /**\n     * testAuthNotImplemented method\n     *\n     * @return void\n     */\n    public function testAuthNotImplemented()\n    {\n        $this->expectException(\\Cake\\Network\\Exception\\SocketException::class);\n        $this->expectExceptionMessage('AUTH command not recognized or not implemented, SMTP server may not require authentication.');\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')\n            ->will($this->returnValue(\"502 5.3.3 Command not implemented\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n        $this->SmtpTransport->auth();\n    }\n\n    /**\n     * testAuthBadSequence method\n     *\n     * @return void\n     */\n    public function testAuthBadSequence()\n    {\n        $this->expectException(\\Cake\\Network\\Exception\\SocketException::class);\n        $this->expectExceptionMessage('SMTP Error: 503 5.5.1 Already authenticated');\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))\n            ->method('read')->will($this->returnValue(\"503 5.5.1 Already authenticated\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n        $this->SmtpTransport->auth();\n    }\n\n    /**\n     * testAuthBadUsername method\n     *\n     * @return void\n     */\n    public function testAuthBadUsername()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"334 Login\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"bWFyaw==\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')\n            ->will($this->returnValue(\"535 5.7.8 Authentication failed\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n\n        $e = null;\n        try {\n            $this->SmtpTransport->auth();\n        } catch (SocketException $e) {\n        }\n\n        $this->assertNotNull($e);\n        $this->assertEquals('SMTP server did not accept the username.', $e->getMessage());\n        $this->assertInstanceOf(SocketException::class, $e->getPrevious());\n        $this->assertContains('535 5.7.8 Authentication failed', $e->getPrevious()->getMessage());\n    }\n\n    /**\n     * testAuthBadPassword method\n     *\n     * @return void\n     */\n    public function testAuthBadPassword()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"AUTH LOGIN\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"334 Login\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"bWFyaw==\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"334 Pass\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"c3Rvcnk=\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"535 5.7.8 Authentication failed\\r\\n\"));\n        $this->SmtpTransport->setConfig(['username' => 'mark', 'password' => 'story']);\n\n        $e = null;\n        try {\n            $this->SmtpTransport->auth();\n        } catch (SocketException $e) {\n        }\n\n        $this->assertNotNull($e);\n        $this->assertEquals('SMTP server did not accept the password.', $e->getMessage());\n        $this->assertInstanceOf(SocketException::class, $e->getPrevious());\n        $this->assertContains('535 5.7.8 Authentication failed', $e->getPrevious()->getMessage());\n    }\n\n    /**\n     * testRcpt method\n     *\n     * @return void\n     */\n    public function testRcpt()\n    {\n        $email = new Email();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->setBcc('phpnut@cakephp.org');\n        $email->setCc(['mark@cakephp.org' => 'Mark Story', 'juan@cakephp.org' => 'Juan Basso']);\n\n        $this->socket->expects($this->at(0))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(4))->method('write')->with(\"RCPT TO:<mark@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(6))->method('write')->with(\"RCPT TO:<juan@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(7))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(8))->method('write')->with(\"RCPT TO:<phpnut@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(9))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->sendRcpt($email);\n    }\n\n    /**\n     * testRcptWithReturnPath method\n     *\n     * @return void\n     */\n    public function testRcptWithReturnPath()\n    {\n        $email = new Email();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->setReturnPath('pleasereply@cakephp.org', 'CakePHP Return');\n\n        $this->socket->expects($this->at(0))->method('write')->with(\"MAIL FROM:<pleasereply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->sendRcpt($email);\n    }\n\n    /**\n     * testSendData method\n     *\n     * @return void\n     */\n    public function testSendData()\n    {\n        $email = $this->getMockBuilder('Cake\\Mailer\\Email')\n            ->setMethods(['message'])\n            ->getMock();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setReturnPath('pleasereply@cakephp.org', 'CakePHP Return');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->setCc(['mark@cakephp.org' => 'Mark Story', 'juan@cakephp.org' => 'Juan Basso']);\n        $email->setBcc('phpnut@cakephp.org');\n        $email->setMessageId('<4d9946cf-0a44-4907-88fe-1d0ccbdd56cb@localhost>');\n        $email->setSubject('Testing SMTP');\n        $date = date(DATE_RFC2822);\n        $email->setHeaders(['Date' => $date]);\n        $email->expects($this->once())\n            ->method('message')\n            ->will($this->returnValue(['First Line', 'Second Line', '.Third Line', '']));\n\n        $data = \"From: CakePHP Test <noreply@cakephp.org>\\r\\n\";\n        $data .= \"Return-Path: CakePHP Return <pleasereply@cakephp.org>\\r\\n\";\n        $data .= \"To: CakePHP <cake@cakephp.org>\\r\\n\";\n        $data .= \"Cc: Mark Story <mark@cakephp.org>, Juan Basso <juan@cakephp.org>\\r\\n\";\n        $data .= 'Date: ' . $date . \"\\r\\n\";\n        $data .= \"Message-ID: <4d9946cf-0a44-4907-88fe-1d0ccbdd56cb@localhost>\\r\\n\";\n        $data .= \"Subject: Testing SMTP\\r\\n\";\n        $data .= \"MIME-Version: 1.0\\r\\n\";\n        $data .= \"Content-Type: text/plain; charset=UTF-8\\r\\n\";\n        $data .= \"Content-Transfer-Encoding: 8bit\\r\\n\";\n        $data .= \"\\r\\n\";\n        $data .= \"First Line\\r\\n\";\n        $data .= \"Second Line\\r\\n\";\n        $data .= \"..Third Line\\r\\n\"; // RFC5321 4.5.2.Transparency\n        $data .= \"\\r\\n\";\n        $data .= \"\\r\\n\\r\\n.\\r\\n\";\n\n        $this->socket->expects($this->at(0))->method('write')->with(\"DATA\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"354 OK\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with($data);\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->sendData($email);\n    }\n\n    /**\n     * testQuit method\n     *\n     * @return void\n     */\n    public function testQuit()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"QUIT\\r\\n\");\n        $this->socket->connected = true;\n        $this->SmtpTransport->disconnect();\n    }\n\n    /**\n     * testEmptyConfigArray method\n     *\n     * @return void\n     */\n    public function testEmptyConfigArray()\n    {\n        $this->SmtpTransport->setConfig([\n            'client' => 'myhost.com',\n            'port' => 666\n        ]);\n        $expected = $this->SmtpTransport->getConfig();\n\n        $this->assertEquals(666, $expected['port']);\n\n        $this->SmtpTransport->setConfig([]);\n        $result = $this->SmtpTransport->getConfig();\n        $this->assertEquals($expected, $result);\n    }\n\n    /**\n     * testGetLastResponse method\n     *\n     * @return void\n     */\n    public function testGetLastResponse()\n    {\n        $this->assertEmpty($this->SmtpTransport->getLastResponse());\n\n        $this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->any())\n            ->method('read')\n            ->will($this->onConsecutiveCalls(\n                \"220 Welcome message\\r\\n\",\n                \"250-PIPELINING\\r\\n\",\n                \"250-SIZE 102400000\\r\\n\",\n                \"250-VRFY\\r\\n\",\n                \"250-ETRN\\r\\n\",\n                \"250-STARTTLS\\r\\n\",\n                \"250-AUTH PLAIN LOGIN\\r\\n\",\n                \"250-AUTH=PLAIN LOGIN\\r\\n\",\n                \"250-ENHANCEDSTATUSCODES\\r\\n\",\n                \"250-8BITMIME\\r\\n\",\n                \"250 DSN\\r\\n\"\n            ));\n        $this->socket->expects($this->once())->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->SmtpTransport->connect();\n\n        $expected = [\n            ['code' => '250', 'message' => 'PIPELINING'],\n            ['code' => '250', 'message' => 'SIZE 102400000'],\n            ['code' => '250', 'message' => 'VRFY'],\n            ['code' => '250', 'message' => 'ETRN'],\n            ['code' => '250', 'message' => 'STARTTLS'],\n            ['code' => '250', 'message' => 'AUTH PLAIN LOGIN'],\n            ['code' => '250', 'message' => 'AUTH=PLAIN LOGIN'],\n            ['code' => '250', 'message' => 'ENHANCEDSTATUSCODES'],\n            ['code' => '250', 'message' => '8BITMIME'],\n            ['code' => '250', 'message' => 'DSN']\n        ];\n        $result = $this->SmtpTransport->getLastResponse();\n        $this->assertEquals($expected, $result);\n    }\n\n    /**\n     * Test getLastResponse() with multiple operations\n     *\n     * @return void\n     */\n    public function testGetLastResponseMultipleOperations()\n    {\n        $email = new Email();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n\n        $this->socket->expects($this->at(0))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->sendRcpt($email);\n\n        $expected = [\n            ['code' => '250', 'message' => 'OK'],\n        ];\n        $result = $this->SmtpTransport->getLastResponse();\n        $this->assertEquals($expected, $result);\n    }\n\n    /**\n     * testBufferResponseLines method\n     *\n     * @return void\n     */\n    public function testBufferResponseLines()\n    {\n        $responseLines = [\n            '123',\n            \"456\\tFOO\",\n            'FOOBAR',\n            '250-PIPELINING',\n            '250-ENHANCEDSTATUSCODES',\n            '250-8BITMIME',\n            '250 DSN',\n        ];\n        $this->SmtpTransport->bufferResponseLines($responseLines);\n\n        $expected = [\n            ['code' => '123', 'message' => null],\n            ['code' => '250', 'message' => 'PIPELINING'],\n            ['code' => '250', 'message' => 'ENHANCEDSTATUSCODES'],\n            ['code' => '250', 'message' => '8BITMIME'],\n            ['code' => '250', 'message' => 'DSN']\n        ];\n        $result = $this->SmtpTransport->getLastResponse();\n        $this->assertEquals($expected, $result);\n    }\n\n    /**\n     * testExplicitConnectAlreadyConnected method\n     *\n     * @return void\n     */\n    public function testExplicitConnectAlreadyConnected()\n    {\n        $this->socket->expects($this->never())->method('connect');\n        $this->socket->connected = true;\n        $this->SmtpTransport->connect();\n    }\n\n    /**\n     * testConnected method\n     *\n     * @return void\n     */\n    public function testConnected()\n    {\n        $this->socket->connected = true;\n        $this->assertTrue($this->SmtpTransport->connected());\n\n        $this->socket->connected = false;\n        $this->assertFalse($this->SmtpTransport->connected());\n    }\n\n    /**\n     * testAutoDisconnect method\n     *\n     * @return void\n     */\n    public function testAutoDisconnect()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"QUIT\\r\\n\");\n        $this->socket->expects($this->at(1))->method('disconnect');\n        $this->socket->connected = true;\n        unset($this->SmtpTransport);\n    }\n\n    /**\n     * testExplicitDisconnect method\n     *\n     * @return void\n     */\n    public function testExplicitDisconnect()\n    {\n        $this->socket->expects($this->at(0))->method('write')->with(\"QUIT\\r\\n\");\n        $this->socket->expects($this->at(1))->method('disconnect');\n        $this->socket->connected = true;\n        $this->SmtpTransport->disconnect();\n    }\n\n    /**\n     * testExplicitDisconnectNotConnected method\n     *\n     * @return void\n     */\n    public function testExplicitDisconnectNotConnected()\n    {\n        $callback = function ($arg) {\n            $this->assertNotEquals(\"QUIT\\r\\n\", $arg);\n        };\n        $this->socket->expects($this->any())->method('write')->will($this->returnCallback($callback));\n        $this->socket->expects($this->never())->method('disconnect');\n        $this->SmtpTransport->disconnect();\n    }\n\n    /**\n     * testKeepAlive method\n     *\n     * @return void\n     */\n    public function testKeepAlive()\n    {\n        $this->SmtpTransport->setConfig(['keepAlive' => true]);\n\n        $email = $this->getMockBuilder('Cake\\Mailer\\Email')\n            ->setMethods(['message'])\n            ->getMock();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->expects($this->exactly(2))->method('message')->will($this->returnValue(['First Line']));\n\n        $callback = function ($arg) {\n            $this->assertNotEquals(\"QUIT\\r\\n\", $arg);\n        };\n        $this->socket->expects($this->any())->method('write')->will($this->returnCallback($callback));\n        $this->socket->expects($this->never())->method('disconnect');\n\n        $this->socket->expects($this->at(0))->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(4))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(6))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(7))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(8))->method('write')->with(\"DATA\\r\\n\");\n        $this->socket->expects($this->at(9))->method('read')->will($this->returnValue(\"354 OK\\r\\n\"));\n        $this->socket->expects($this->at(10))->method('write')->with($this->stringContains('First Line'));\n        $this->socket->expects($this->at(11))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(12))->method('write')->with(\"RSET\\r\\n\");\n        $this->socket->expects($this->at(13))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(14))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(15))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(16))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(17))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(18))->method('write')->with(\"DATA\\r\\n\");\n        $this->socket->expects($this->at(19))->method('read')->will($this->returnValue(\"354 OK\\r\\n\"));\n        $this->socket->expects($this->at(20))->method('write')->with($this->stringContains('First Line'));\n        $this->socket->expects($this->at(21))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->SmtpTransport->send($email);\n        $this->socket->connected = true;\n        $this->SmtpTransport->send($email);\n    }\n\n    /**\n     * testSendDefaults method\n     *\n     * @return void\n     */\n    public function testSendDefaults()\n    {\n        $email = $this->getMockBuilder('Cake\\Mailer\\Email')\n            ->setMethods(['message'])\n            ->getMock();\n        $email->setFrom('noreply@cakephp.org', 'CakePHP Test');\n        $email->setTo('cake@cakephp.org', 'CakePHP');\n        $email->expects($this->once())->method('message')->will($this->returnValue(['First Line']));\n\n        $this->socket->expects($this->at(0))->method('connect')->will($this->returnValue(true));\n\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(4))->method('write')->with(\"MAIL FROM:<noreply@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(5))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n        $this->socket->expects($this->at(6))->method('write')->with(\"RCPT TO:<cake@cakephp.org>\\r\\n\");\n        $this->socket->expects($this->at(7))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(8))->method('write')->with(\"DATA\\r\\n\");\n        $this->socket->expects($this->at(9))->method('read')->will($this->returnValue(\"354 OK\\r\\n\"));\n        $this->socket->expects($this->at(10))->method('write')->with($this->stringContains('First Line'));\n        $this->socket->expects($this->at(11))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $this->socket->expects($this->at(12))->method('write')->with(\"QUIT\\r\\n\");\n        $this->socket->expects($this->at(13))->method('disconnect');\n\n        $this->SmtpTransport->send($email);\n    }\n\n    /**\n     * Ensure that unserialized transports have no connection.\n     *\n     * @return void\n     */\n    public function testSerializeCleanupSocket()\n    {\n        $this->socket->expects($this->at(0))->method('connect')->will($this->returnValue(true));\n        $this->socket->expects($this->at(1))->method('read')->will($this->returnValue(\"220 Welcome message\\r\\n\"));\n        $this->socket->expects($this->at(2))->method('write')->with(\"EHLO localhost\\r\\n\");\n        $this->socket->expects($this->at(3))->method('read')->will($this->returnValue(\"250 OK\\r\\n\"));\n\n        $smtpTransport = new SmtpTestTransport();\n        $smtpTransport->setSocket($this->socket);\n        $smtpTransport->connect();\n\n        $result = unserialize(serialize($smtpTransport));\n        $this->assertAttributeEquals(null, '_socket', $result);\n        $this->assertFalse($result->connected());\n    }\n}\n"], "filenames": ["src/Mailer/Transport/SmtpTransport.php", "tests/TestCase/Mailer/Transport/SmtpTransportTest.php"], "buggy_code_start_loc": [78, 711], "buggy_code_end_loc": [78, 711], "fixing_code_start_loc": [79, 712], "fixing_code_end_loc": [91, 733], "type": "CWE-502", "message": "An issue was discovered in SmtpTransport in CakePHP 3.7.6. An unserialized object with modified internal properties can trigger arbitrary file overwriting upon destruction.", "other": {"cve": {"id": "CVE-2019-11458", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-08T18:29:00.453", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in SmtpTransport in CakePHP 3.7.6. An unserialized object with modified internal properties can trigger arbitrary file overwriting upon destruction."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en SmtpTransport en CakePHP 3.7.6. Un objeto no serializado con propiedades internas modificadas puede desencadenar una sobrescritura arbitraria de archivos tras su destrucci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cakefoundation:cakephp:3.7.6:*:*:*:*:*:*:*", "matchCriteriaId": "5EF09544-ECC4-4317-BF1F-D21322BF8A6E"}]}]}], "references": [{"url": "https://bakery.cakephp.org/2019/04/23/cakephp_377_3615_3518_released.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/cakephp/cakephp/commit/1a74e798309192a9895c9cedabd714ceee345f4e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/cakephp/cakephp/commits/master", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/cakephp/cakephp/compare/3.7.6...3.7.7", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/cakephp/cakephp/releases", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cakephp/cakephp/commit/1a74e798309192a9895c9cedabd714ceee345f4e"}}