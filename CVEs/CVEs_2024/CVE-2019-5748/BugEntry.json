{"buggy_code": ["/*\n * Copyright 2017 - 2018 Anton Tananaev (anton@traccar.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.traccar.protocol;\n\nimport com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\nimport io.netty.channel.Channel;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport org.traccar.BaseHttpProtocolDecoder;\nimport org.traccar.DeviceSession;\nimport org.traccar.Protocol;\nimport org.traccar.helper.DateUtil;\nimport org.traccar.model.Position;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport java.net.SocketAddress;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class SpotProtocolDecoder extends BaseHttpProtocolDecoder {\n\n    private DocumentBuilder documentBuilder;\n    private XPath xPath;\n    private XPathExpression messageExpression;\n\n    public SpotProtocolDecoder(Protocol protocol) {\n        super(protocol);\n        try {\n            documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n            xPath = XPathFactory.newInstance().newXPath();\n            messageExpression = xPath.compile(\"//messageList/message\");\n        } catch (ParserConfigurationException | XPathExpressionException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        FullHttpRequest request = (FullHttpRequest) msg;\n\n        Document document = documentBuilder.parse(new ByteBufferBackedInputStream(request.content().nioBuffer()));\n        NodeList nodes = (NodeList) messageExpression.evaluate(document, XPathConstants.NODESET);\n\n        List<Position> positions = new LinkedList<>();\n\n        for (int i = 0; i < nodes.getLength(); i++) {\n            Node node = nodes.item(i);\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, xPath.evaluate(\"esnName\", node));\n            if (deviceSession != null) {\n\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setValid(true);\n                position.setTime(DateUtil.parseDate(xPath.evaluate(\"timestamp\", node)));\n                position.setLatitude(Double.parseDouble(xPath.evaluate(\"latitude\", node)));\n                position.setLongitude(Double.parseDouble(xPath.evaluate(\"longitude\", node)));\n\n                position.set(Position.KEY_EVENT, xPath.evaluate(\"messageType\", node));\n\n                positions.add(position);\n\n            }\n        }\n\n        sendResponse(channel, HttpResponseStatus.OK);\n        return positions;\n    }\n\n}\n"], "fixing_code": ["/*\n * Copyright 2017 - 2019 Anton Tananaev (anton@traccar.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.traccar.protocol;\n\nimport com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\nimport io.netty.channel.Channel;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport org.traccar.BaseHttpProtocolDecoder;\nimport org.traccar.DeviceSession;\nimport org.traccar.Protocol;\nimport org.traccar.helper.DateUtil;\nimport org.traccar.model.Position;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport java.net.SocketAddress;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class SpotProtocolDecoder extends BaseHttpProtocolDecoder {\n\n    private DocumentBuilder documentBuilder;\n    private XPath xPath;\n    private XPathExpression messageExpression;\n\n    public SpotProtocolDecoder(Protocol protocol) {\n        super(protocol);\n        try {\n            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n            builderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            builderFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            builderFactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            builderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n            builderFactory.setXIncludeAware(false);\n            builderFactory.setExpandEntityReferences(false);\n            documentBuilder = builderFactory.newDocumentBuilder();\n            xPath = XPathFactory.newInstance().newXPath();\n            messageExpression = xPath.compile(\"//messageList/message\");\n        } catch (ParserConfigurationException | XPathExpressionException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n\n        FullHttpRequest request = (FullHttpRequest) msg;\n\n        Document document = documentBuilder.parse(new ByteBufferBackedInputStream(request.content().nioBuffer()));\n        NodeList nodes = (NodeList) messageExpression.evaluate(document, XPathConstants.NODESET);\n\n        List<Position> positions = new LinkedList<>();\n\n        for (int i = 0; i < nodes.getLength(); i++) {\n            Node node = nodes.item(i);\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, xPath.evaluate(\"esnName\", node));\n            if (deviceSession != null) {\n\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n\n                position.setValid(true);\n                position.setTime(DateUtil.parseDate(xPath.evaluate(\"timestamp\", node)));\n                position.setLatitude(Double.parseDouble(xPath.evaluate(\"latitude\", node)));\n                position.setLongitude(Double.parseDouble(xPath.evaluate(\"longitude\", node)));\n\n                position.set(Position.KEY_EVENT, xPath.evaluate(\"messageType\", node));\n\n                positions.add(position);\n\n            }\n        }\n\n        sendResponse(channel, HttpResponseStatus.OK);\n        return positions;\n    }\n\n}\n"], "filenames": ["src/org/traccar/protocol/SpotProtocolDecoder.java"], "buggy_code_start_loc": [2], "buggy_code_end_loc": [53], "fixing_code_start_loc": [2], "fixing_code_end_loc": [60], "type": "CWE-611", "message": "In Traccar Server version 4.2, protocol/SpotProtocolDecoder.java might allow XXE attacks.", "other": {"cve": {"id": "CVE-2019-5748", "sourceIdentifier": "cve@mitre.org", "published": "2019-01-09T17:29:00.293", "lastModified": "2019-01-30T20:19:51.433", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Traccar Server version 4.2, protocol/SpotProtocolDecoder.java might allow XXE attacks."}, {"lang": "es", "value": "En la versi\u00f3n 4.2 de Traccar Server, protocol/SpotProtocolDecoder.java podr\u00eda permitir ataques de XEE (XML External Entity)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:traccar:server:4.2:*:*:*:*:*:*:*", "matchCriteriaId": "5826F467-4C38-46D7-BF98-DCFA2FD582ED"}]}]}], "references": [{"url": "https://github.com/traccar/traccar/commit/d7f6c53fd88635885914013649b6807ec53227bf", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.traccar.org/blog/", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/traccar/traccar/commit/d7f6c53fd88635885914013649b6807ec53227bf"}}