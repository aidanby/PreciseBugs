{"buggy_code": ["import app from '../common/app';\n\nimport ItemList from './utils/ItemList';\nimport Button from './components/Button';\nimport ModalManager from './components/ModalManager';\nimport AlertManager from './components/AlertManager';\nimport RequestErrorModal from './components/RequestErrorModal';\nimport Translator from './Translator';\nimport Store, { ApiPayload, ApiResponse, ApiResponsePlural, ApiResponseSingle, payloadIsPlural } from './Store';\nimport Session from './Session';\nimport extract from './utils/extract';\nimport extractText from './utils/extractText';\nimport Drawer from './utils/Drawer';\nimport mapRoutes from './utils/mapRoutes';\nimport RequestError, { InternalFlarumRequestOptions } from './utils/RequestError';\nimport ScrollListener from './utils/ScrollListener';\nimport liveHumanTimes from './utils/liveHumanTimes';\n// @ts-expect-error We need to explicitly use the prefix to distinguish between the extend folder.\nimport { extend } from './extend.ts';\n\nimport Forum from './models/Forum';\nimport User from './models/User';\nimport Discussion from './models/Discussion';\nimport Post from './models/Post';\nimport Group from './models/Group';\nimport Notification from './models/Notification';\nimport PageState from './states/PageState';\nimport ModalManagerState from './states/ModalManagerState';\nimport AlertManagerState from './states/AlertManagerState';\n\nimport type DefaultResolver from './resolvers/DefaultResolver';\nimport type Mithril from 'mithril';\nimport type Component from './Component';\nimport type { ComponentAttrs } from './Component';\nimport Model, { SavedModelData } from './Model';\nimport fireApplicationError from './helpers/fireApplicationError';\nimport IHistory from './IHistory';\n\nexport type FlarumScreens = 'phone' | 'tablet' | 'desktop' | 'desktop-hd';\n\nexport type FlarumGenericRoute = RouteItem<any, any, any>;\n\nexport interface FlarumRequestOptions<ResponseType> extends Omit<Mithril.RequestOptions<ResponseType>, 'extract'> {\n  errorHandler?: (error: RequestError) => void;\n  url: string;\n  // TODO: [Flarum 2.0] Remove deprecated option\n  /**\n   * Manipulate the response text before it is parsed into JSON.\n   *\n   * @deprecated Please use `modifyText` instead.\n   */\n  extract?: (responseText: string) => string;\n  /**\n   * Manipulate the response text before it is parsed into JSON.\n   *\n   * This overrides any `extract` method provided.\n   */\n  modifyText?: (responseText: string) => string;\n}\n\n/**\n * A valid route definition.\n */\nexport type RouteItem<\n  Attrs extends ComponentAttrs,\n  Comp extends Component<Attrs & { routeName: string }>,\n  RouteArgs extends Record<string, unknown> = {}\n> = {\n  /**\n   * The path for your route.\n   *\n   * This might be a specific URL path (e.g.,`/myPage`), or it might\n   * contain a variable used by a resolver (e.g., `/myPage/:id`).\n   *\n   * @see https://docs.flarum.org/extend/frontend-pages.html#route-resolvers-advanced\n   */\n  path: `/${string}`;\n} & (\n  | {\n      /**\n       * The component to render when this route matches.\n       */\n      component: new () => Comp;\n      /**\n       * A custom resolver class.\n       *\n       * This should be the class itself, and **not** an instance of the\n       * class.\n       */\n      resolverClass?: new (component: new () => Comp, routeName: string) => DefaultResolver<Attrs, Comp, RouteArgs>;\n    }\n  | {\n      /**\n       * An instance of a route resolver.\n       */\n      resolver: RouteResolver<Attrs, Comp, RouteArgs>;\n    }\n);\n\nexport interface RouteResolver<\n  Attrs extends ComponentAttrs,\n  Comp extends Component<Attrs & { routeName: string }>,\n  RouteArgs extends Record<string, unknown> = {}\n> {\n  /**\n   * A method which selects which component to render based on\n   * conditional logic.\n   *\n   * Returns the component class, and **not** a Vnode or JSX\n   * expression.\n   *\n   * @see https://mithril.js.org/route.html#routeresolveronmatch\n   */\n  onmatch(this: this, args: RouteArgs, requestedPath: string, route: string): { new (): Comp };\n  /**\n   * A function which renders the provided component.\n   *\n   * If not specified, the route will default to rendering the\n   * component on its own, inside of a fragment.\n   *\n   * Returns a Mithril Vnode or other children.\n   *\n   * @see https://mithril.js.org/route.html#routeresolverrender\n   */\n  render?(this: this, vnode: Mithril.Vnode<Attrs, Comp>): Mithril.Children;\n}\n\nexport interface ApplicationData {\n  apiDocument: ApiPayload | null;\n  locale: string;\n  locales: Record<string, string>;\n  resources: SavedModelData[];\n  session: { userId: number; csrfToken: string };\n  [key: string]: unknown;\n}\n\n/**\n * The `App` class provides a container for an application, as well as various\n * utilities for the rest of the app to use.\n */\nexport default class Application {\n  /**\n   * The forum model for this application.\n   */\n  forum!: Forum;\n\n  /**\n   * A map of routes, keyed by a unique route name. Each route is an object\n   * containing the following properties:\n   *\n   * - `path` The path that the route is accessed at.\n   * - `component` The Mithril component to render when this route is active.\n   *\n   * @example\n   * app.routes.discussion = { path: '/d/:id', component: DiscussionPage };\n   */\n  routes: Record<string, FlarumGenericRoute> = {};\n\n  /**\n   * An ordered list of initializers to bootstrap the application.\n   */\n  initializers: ItemList<(app: this) => void> = new ItemList();\n\n  /**\n   * The app's session.\n   *\n   * Stores info about the current user.\n   */\n  session!: Session;\n\n  /**\n   * The app's translator.\n   */\n  translator: Translator = new Translator();\n\n  /**\n   * The app's data store.\n   */\n  store: Store = new Store({\n    forums: Forum,\n    users: User,\n    discussions: Discussion,\n    posts: Post,\n    groups: Group,\n    notifications: Notification,\n  });\n\n  /**\n   * A local cache that can be used to store data at the application level, so\n   * that is persists between different routes.\n   */\n  cache: Record<string, unknown> = {};\n\n  /**\n   * Whether or not the app has been booted.\n   */\n  booted: boolean = false;\n\n  /**\n   * The page the app is currently on.\n   *\n   * This object holds information about the type of page we are currently\n   * visiting, and sometimes additional arbitrary page state that may be\n   * relevant to lower-level components.\n   */\n  current: PageState = new PageState(null);\n\n  /**\n   * The page the app was on before the current page.\n   *\n   * Once the application navigates to another page, the object previously\n   * assigned to this.current will be moved to this.previous, while this.current\n   * is re-initialized.\n   */\n  previous: PageState = new PageState(null);\n\n  /**\n   * An object that manages modal state.\n   */\n  modal: ModalManagerState = new ModalManagerState();\n\n  /**\n   * An object that manages the state of active alerts.\n   */\n  alerts: AlertManagerState = new AlertManagerState();\n\n  /**\n   * An object that manages the state of the navigation drawer.\n   */\n  drawer!: Drawer;\n\n  history: IHistory | null = null;\n  pane: any = null;\n\n  data!: ApplicationData;\n\n  private _title: string = '';\n  private _titleCount: number = 0;\n\n  private set title(val: string) {\n    this._title = val;\n  }\n\n  get title() {\n    return this._title;\n  }\n\n  private set titleCount(val: number) {\n    this._titleCount = val;\n  }\n\n  get titleCount() {\n    return this._titleCount;\n  }\n\n  /**\n   * The key for an Alert that was shown as a result of an AJAX request error.\n   * If present, it will be dismissed on the next successful request.\n   */\n  private requestErrorAlert: number | null = null;\n\n  initialRoute!: string;\n\n  public load(payload: Application['data']) {\n    this.data = payload;\n    this.translator.setLocale(payload.locale);\n  }\n\n  public boot() {\n    const caughtInitializationErrors: CallableFunction[] = [];\n\n    this.initializers.toArray().forEach((initializer) => {\n      try {\n        initializer(this);\n      } catch (e) {\n        const extension = initializer.itemName.includes('/')\n          ? initializer.itemName.replace(/(\\/flarum-ext-)|(\\/flarum-)/g, '-')\n          : initializer.itemName;\n\n        caughtInitializationErrors.push(() =>\n          fireApplicationError(\n            extractText(app.translator.trans('core.lib.error.extension_initialiation_failed_message', { extension })),\n            `${extension} failed to initialize`,\n            e\n          )\n        );\n      }\n    });\n\n    this.store.pushPayload({ data: this.data.resources });\n\n    this.forum = this.store.getById('forums', '1')!;\n\n    this.session = new Session(this.store.getById<User>('users', String(this.data.session.userId)) ?? null, this.data.session.csrfToken);\n\n    this.mount();\n\n    this.initialRoute = window.location.href;\n\n    caughtInitializationErrors.forEach((handler) => handler());\n  }\n\n  // TODO: This entire system needs a do-over for v2\n  public bootExtensions(extensions: Record<string, { extend?: unknown[] }>) {\n    Object.keys(extensions).forEach((name) => {\n      const extension = extensions[name];\n\n      // If an extension doesn't define extenders, there's nothing more to do here.\n      if (!extension.extend) return;\n\n      const extenders = extension.extend.flat(Infinity);\n\n      for (const extender of extenders) {\n        // @ts-expect-error This is beyond saving atm.\n        extender.extend(this, { name, exports: extension });\n      }\n    });\n  }\n\n  protected mount(basePath: string = '') {\n    // An object with a callable view property is used in order to pass arguments to the component; see https://mithril.js.org/mount.html\n    m.mount(document.getElementById('modal')!, { view: () => <ModalManager state={this.modal} /> });\n    m.mount(document.getElementById('alerts')!, { view: () => <AlertManager state={this.alerts} /> });\n\n    this.drawer = new Drawer();\n\n    m.route(document.getElementById('content')!, basePath + '/', mapRoutes(this.routes, basePath));\n\n    const appEl = document.getElementById('app')!;\n    const appHeaderEl = document.querySelector('.App-header')!;\n\n    // Add a class to the body which indicates that the page has been scrolled\n    // down. When this happens, we'll add classes to the header and app body\n    // which will set the navbar's position to fixed. We don't want to always\n    // have it fixed, as that could overlap with custom headers.\n    const scrollListener = new ScrollListener((top: number) => {\n      const offset = appEl.getBoundingClientRect().top + document.body.scrollTop;\n\n      appEl.classList.toggle('affix', top >= offset);\n      appEl.classList.toggle('scrolled', top > offset);\n\n      appHeaderEl.classList.toggle('navbar-fixed-top', top >= offset);\n    });\n\n    scrollListener.start();\n    scrollListener.update();\n\n    document.body.classList.add('ontouchstart' in window ? 'touch' : 'no-touch');\n\n    liveHumanTimes();\n  }\n\n  /**\n   * Get the API response document that has been preloaded into the application.\n   */\n  preloadedApiDocument<M extends Model>(): ApiResponseSingle<M> | null;\n  preloadedApiDocument<Ms extends Model[]>(): ApiResponsePlural<Ms[number]> | null;\n  preloadedApiDocument<M extends Model | Model[]>(): ApiResponse<FlatArray<M, 1>> | null {\n    // If the URL has changed, the preloaded Api document is invalid.\n    if (this.data.apiDocument && window.location.href === this.initialRoute) {\n      const results = payloadIsPlural(this.data.apiDocument)\n        ? this.store.pushPayload<FlatArray<M, 1>[]>(this.data.apiDocument)\n        : this.store.pushPayload<FlatArray<M, 1>>(this.data.apiDocument);\n\n      this.data.apiDocument = null;\n\n      return results;\n    }\n\n    return null;\n  }\n\n  /**\n   * Determine the current screen mode, based on our media queries.\n   */\n  screen(): FlarumScreens {\n    const styles = getComputedStyle(document.documentElement);\n    return styles.getPropertyValue('--flarum-screen') as ReturnType<Application['screen']>;\n  }\n\n  /**\n   * Set the `<title>` of the page.\n   *\n   * @param title New page title\n   */\n  setTitle(title: string): void {\n    this.title = title;\n    this.updateTitle();\n  }\n\n  /**\n   * Set a number to display in the `<title>` of the page.\n   *\n   * @param count Number to display in title\n   */\n  setTitleCount(count: number): void {\n    this.titleCount = count;\n    this.updateTitle();\n  }\n\n  updateTitle(): void {\n    const count = this.titleCount ? `(${this.titleCount}) ` : '';\n    const onHomepage = m.route.get() === this.forum.attribute('basePath') + '/';\n\n    const params = {\n      pageTitle: this.title,\n      forumName: this.forum.attribute('title'),\n      // Until we add page numbers to the frontend, this is constant at 1\n      // so that the page number portion doesn't show up in the URL.\n      pageNumber: 1,\n    };\n\n    const title =\n      onHomepage || !this.title\n        ? extractText(app.translator.trans('core.lib.meta_titles.without_page_title', params))\n        : extractText(app.translator.trans('core.lib.meta_titles.with_page_title', params));\n\n    const tempEl = document.createElement('div');\n    tempEl.innerHTML = title;\n    const decodedTitle = tempEl.innerText;\n\n    document.title = count + decodedTitle;\n  }\n\n  protected transformRequestOptions<ResponseType>(flarumOptions: FlarumRequestOptions<ResponseType>): InternalFlarumRequestOptions<ResponseType> {\n    const { background, deserialize, extract, modifyText, ...tmpOptions } = { ...flarumOptions };\n\n    // Unless specified otherwise, requests should run asynchronously in the\n    // background, so that they don't prevent redraws from occurring.\n    const defaultBackground = true;\n\n    // When we deserialize JSON data, if for some reason the server has provided\n    // a dud response, we don't want the application to crash. We'll show an\n    // error message to the user instead.\n\n    // @ts-expect-error Typescript doesn't know we return promisified `ReturnType` OR `string`,\n    // so it errors due to Mithril's typings\n    const defaultDeserialize = (response: string) => response as ResponseType;\n\n    // When extracting the data from the response, we can check the server\n    // response code and show an error message to the user if something's gone\n    // awry.\n    const originalExtract = modifyText || extract;\n\n    const options: InternalFlarumRequestOptions<ResponseType> = {\n      background: background ?? defaultBackground,\n      deserialize: deserialize ?? defaultDeserialize,\n      ...tmpOptions,\n    };\n\n    extend(options, 'config', (_: undefined, xhr: XMLHttpRequest) => {\n      xhr.setRequestHeader('X-CSRF-Token', this.session.csrfToken!);\n    });\n\n    // If the method is something like PATCH or DELETE, which not all servers\n    // and clients support, then we'll send it as a POST request with the\n    // intended method specified in the X-HTTP-Method-Override header.\n    if (options.method && !['GET', 'POST'].includes(options.method)) {\n      const method = options.method;\n\n      extend(options, 'config', (_: undefined, xhr: XMLHttpRequest) => {\n        xhr.setRequestHeader('X-HTTP-Method-Override', method);\n      });\n\n      options.method = 'POST';\n    }\n\n    options.extract = (xhr: XMLHttpRequest) => {\n      let responseText;\n\n      if (originalExtract) {\n        responseText = originalExtract(xhr.responseText);\n      } else {\n        responseText = xhr.responseText;\n      }\n\n      const status = xhr.status;\n\n      if (status < 200 || status > 299) {\n        throw new RequestError<ResponseType>(status, `${responseText}`, options, xhr);\n      }\n\n      if (xhr.getResponseHeader) {\n        const csrfToken = xhr.getResponseHeader('X-CSRF-Token');\n        if (csrfToken) app.session.csrfToken = csrfToken;\n      }\n\n      try {\n        if (responseText === '') {\n          return null;\n        }\n\n        return JSON.parse(responseText);\n      } catch (e) {\n        throw new RequestError<ResponseType>(500, `${responseText}`, options, xhr);\n      }\n    };\n\n    return options;\n  }\n\n  /**\n   * Make an AJAX request, handling any low-level errors that may occur.\n   *\n   * @see https://mithril.js.org/request.html\n   */\n  request<ResponseType>(originalOptions: FlarumRequestOptions<ResponseType>): Promise<ResponseType> {\n    const options = this.transformRequestOptions(originalOptions);\n\n    if (this.requestErrorAlert) this.alerts.dismiss(this.requestErrorAlert);\n\n    return m.request(options).catch((e) => this.requestErrorCatch(e, originalOptions.errorHandler));\n  }\n\n  /**\n   * By default, show an error alert, and log the error to the console.\n   */\n  protected requestErrorCatch<ResponseType>(error: RequestError, customErrorHandler: FlarumRequestOptions<ResponseType>['errorHandler']) {\n    // the details property is decoded to transform escaped characters such as '\\n'\n    const formattedErrors = error.response?.errors?.map((e) => decodeURI(e.detail ?? '')) ?? [];\n\n    let content;\n    switch (error.status) {\n      case 422:\n        content = formattedErrors\n          .map((detail) => [detail, <br />])\n          .flat()\n          .slice(0, -1);\n        break;\n\n      case 401:\n      case 403:\n        content = app.translator.trans('core.lib.error.permission_denied_message');\n        break;\n\n      case 404:\n      case 410:\n        content = app.translator.trans('core.lib.error.not_found_message');\n        break;\n\n      case 413:\n        content = app.translator.trans('core.lib.error.payload_too_large_message');\n        break;\n\n      case 429:\n        content = app.translator.trans('core.lib.error.rate_limit_exceeded_message');\n        break;\n\n      default:\n        content = app.translator.trans('core.lib.error.generic_message');\n    }\n\n    const isDebug: boolean = app.forum.attribute('debug');\n\n    error.alert = {\n      type: 'error',\n      content,\n      controls: isDebug && [\n        <Button className=\"Button Button--link\" onclick={this.showDebug.bind(this, error, formattedErrors)}>\n          {app.translator.trans('core.lib.debug_button')}\n        </Button>,\n      ],\n    };\n\n    if (customErrorHandler) {\n      customErrorHandler(error);\n    } else {\n      this.requestErrorDefaultHandler(error, isDebug, formattedErrors);\n    }\n\n    return Promise.reject(error);\n  }\n\n  protected requestErrorDefaultHandler(e: unknown, isDebug: boolean, formattedErrors: string[]): void {\n    if (e instanceof RequestError) {\n      if (isDebug && e.xhr) {\n        const { method, url } = e.options;\n        const { status = '' } = e.xhr;\n\n        console.group(`${method} ${url} ${status}`);\n\n        if (formattedErrors.length) {\n          console.error(...formattedErrors);\n        } else {\n          console.error(e);\n        }\n\n        console.groupEnd();\n      }\n\n      if (e.alert) {\n        this.requestErrorAlert = this.alerts.show(e.alert, e.alert.content);\n      }\n    } else {\n      throw e;\n    }\n  }\n\n  private showDebug(error: RequestError, formattedError: string[]) {\n    if (this.requestErrorAlert !== null) this.alerts.dismiss(this.requestErrorAlert);\n\n    this.modal.show(RequestErrorModal, { error, formattedError });\n  }\n\n  /**\n   * Construct a URL to the route with the given name.\n   */\n  route(name: string, params: Record<string, unknown> = {}): string {\n    const route = this.routes[name];\n\n    if (!route) throw new Error(`Route '${name}' does not exist`);\n\n    const url = route.path.replace(/:([^\\/]+)/g, (m, key) => `${extract(params, key)}`);\n\n    // Remove falsy values in params to avoid having urls like '/?sort&q'\n    for (const key in params) {\n      if (params.hasOwnProperty(key) && !params[key]) delete params[key];\n    }\n\n    const queryString = m.buildQueryString(params as any);\n    const prefix = m.route.prefix === '' ? this.forum.attribute('basePath') : '';\n\n    return prefix + url + (queryString ? '?' + queryString : '');\n  }\n}\n", "<!doctype html>\n<html @if ($direction) dir=\"{{ $direction }}\" @endif\n      @if ($language) lang=\"{{ $language }}\" @endif>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>{!! $title !!}</title>\n\n        {!! $head !!}\n    </head>\n\n    <body>\n        {!! $layout !!}\n\n        <div id=\"modal\"></div>\n        <div id=\"alerts\"></div>\n\n        <script>\n            document.getElementById('flarum-loading').style.display = 'block';\n            var flarum = {extensions: {}};\n        </script>\n\n        {!! $js !!}\n\n        <script id=\"flarum-json-payload\" type=\"application/json\">@json($payload)</script>\n\n        <script>\n            const data = JSON.parse(document.getElementById('flarum-json-payload').textContent);\n            document.getElementById('flarum-loading').style.display = 'none';\n\n            try {\n                flarum.core.app.load(data);\n                flarum.core.app.bootExtensions(flarum.extensions);\n                flarum.core.app.boot();\n            } catch (e) {\n                var error = document.getElementById('flarum-loading-error');\n                error.innerHTML += document.getElementById('flarum-content').textContent;\n                error.style.display = 'block';\n                throw e;\n            }\n        </script>\n\n        {!! $foot !!}\n    </body>\n</html>\n"], "fixing_code": ["import app from '../common/app';\n\nimport ItemList from './utils/ItemList';\nimport Button from './components/Button';\nimport ModalManager from './components/ModalManager';\nimport AlertManager from './components/AlertManager';\nimport RequestErrorModal from './components/RequestErrorModal';\nimport Translator from './Translator';\nimport Store, { ApiPayload, ApiResponse, ApiResponsePlural, ApiResponseSingle, payloadIsPlural } from './Store';\nimport Session from './Session';\nimport extract from './utils/extract';\nimport extractText from './utils/extractText';\nimport Drawer from './utils/Drawer';\nimport mapRoutes from './utils/mapRoutes';\nimport RequestError, { InternalFlarumRequestOptions } from './utils/RequestError';\nimport ScrollListener from './utils/ScrollListener';\nimport liveHumanTimes from './utils/liveHumanTimes';\n// @ts-expect-error We need to explicitly use the prefix to distinguish between the extend folder.\nimport { extend } from './extend.ts';\n\nimport Forum from './models/Forum';\nimport User from './models/User';\nimport Discussion from './models/Discussion';\nimport Post from './models/Post';\nimport Group from './models/Group';\nimport Notification from './models/Notification';\nimport PageState from './states/PageState';\nimport ModalManagerState from './states/ModalManagerState';\nimport AlertManagerState from './states/AlertManagerState';\n\nimport type DefaultResolver from './resolvers/DefaultResolver';\nimport type Mithril from 'mithril';\nimport type Component from './Component';\nimport type { ComponentAttrs } from './Component';\nimport Model, { SavedModelData } from './Model';\nimport fireApplicationError from './helpers/fireApplicationError';\nimport IHistory from './IHistory';\n\nexport type FlarumScreens = 'phone' | 'tablet' | 'desktop' | 'desktop-hd';\n\nexport type FlarumGenericRoute = RouteItem<any, any, any>;\n\nexport interface FlarumRequestOptions<ResponseType> extends Omit<Mithril.RequestOptions<ResponseType>, 'extract'> {\n  errorHandler?: (error: RequestError) => void;\n  url: string;\n  // TODO: [Flarum 2.0] Remove deprecated option\n  /**\n   * Manipulate the response text before it is parsed into JSON.\n   *\n   * @deprecated Please use `modifyText` instead.\n   */\n  extract?: (responseText: string) => string;\n  /**\n   * Manipulate the response text before it is parsed into JSON.\n   *\n   * This overrides any `extract` method provided.\n   */\n  modifyText?: (responseText: string) => string;\n}\n\n/**\n * A valid route definition.\n */\nexport type RouteItem<\n  Attrs extends ComponentAttrs,\n  Comp extends Component<Attrs & { routeName: string }>,\n  RouteArgs extends Record<string, unknown> = {}\n> = {\n  /**\n   * The path for your route.\n   *\n   * This might be a specific URL path (e.g.,`/myPage`), or it might\n   * contain a variable used by a resolver (e.g., `/myPage/:id`).\n   *\n   * @see https://docs.flarum.org/extend/frontend-pages.html#route-resolvers-advanced\n   */\n  path: `/${string}`;\n} & (\n  | {\n      /**\n       * The component to render when this route matches.\n       */\n      component: new () => Comp;\n      /**\n       * A custom resolver class.\n       *\n       * This should be the class itself, and **not** an instance of the\n       * class.\n       */\n      resolverClass?: new (component: new () => Comp, routeName: string) => DefaultResolver<Attrs, Comp, RouteArgs>;\n    }\n  | {\n      /**\n       * An instance of a route resolver.\n       */\n      resolver: RouteResolver<Attrs, Comp, RouteArgs>;\n    }\n);\n\nexport interface RouteResolver<\n  Attrs extends ComponentAttrs,\n  Comp extends Component<Attrs & { routeName: string }>,\n  RouteArgs extends Record<string, unknown> = {}\n> {\n  /**\n   * A method which selects which component to render based on\n   * conditional logic.\n   *\n   * Returns the component class, and **not** a Vnode or JSX\n   * expression.\n   *\n   * @see https://mithril.js.org/route.html#routeresolveronmatch\n   */\n  onmatch(this: this, args: RouteArgs, requestedPath: string, route: string): { new (): Comp };\n  /**\n   * A function which renders the provided component.\n   *\n   * If not specified, the route will default to rendering the\n   * component on its own, inside of a fragment.\n   *\n   * Returns a Mithril Vnode or other children.\n   *\n   * @see https://mithril.js.org/route.html#routeresolverrender\n   */\n  render?(this: this, vnode: Mithril.Vnode<Attrs, Comp>): Mithril.Children;\n}\n\nexport interface ApplicationData {\n  apiDocument: ApiPayload | null;\n  locale: string;\n  locales: Record<string, string>;\n  resources: SavedModelData[];\n  session: { userId: number; csrfToken: string };\n  [key: string]: unknown;\n}\n\n/**\n * The `App` class provides a container for an application, as well as various\n * utilities for the rest of the app to use.\n */\nexport default class Application {\n  /**\n   * The forum model for this application.\n   */\n  forum!: Forum;\n\n  /**\n   * A map of routes, keyed by a unique route name. Each route is an object\n   * containing the following properties:\n   *\n   * - `path` The path that the route is accessed at.\n   * - `component` The Mithril component to render when this route is active.\n   *\n   * @example\n   * app.routes.discussion = { path: '/d/:id', component: DiscussionPage };\n   */\n  routes: Record<string, FlarumGenericRoute> = {};\n\n  /**\n   * An ordered list of initializers to bootstrap the application.\n   */\n  initializers: ItemList<(app: this) => void> = new ItemList();\n\n  /**\n   * The app's session.\n   *\n   * Stores info about the current user.\n   */\n  session!: Session;\n\n  /**\n   * The app's translator.\n   */\n  translator: Translator = new Translator();\n\n  /**\n   * The app's data store.\n   */\n  store: Store = new Store({\n    forums: Forum,\n    users: User,\n    discussions: Discussion,\n    posts: Post,\n    groups: Group,\n    notifications: Notification,\n  });\n\n  /**\n   * A local cache that can be used to store data at the application level, so\n   * that is persists between different routes.\n   */\n  cache: Record<string, unknown> = {};\n\n  /**\n   * Whether or not the app has been booted.\n   */\n  booted: boolean = false;\n\n  /**\n   * The page the app is currently on.\n   *\n   * This object holds information about the type of page we are currently\n   * visiting, and sometimes additional arbitrary page state that may be\n   * relevant to lower-level components.\n   */\n  current: PageState = new PageState(null);\n\n  /**\n   * The page the app was on before the current page.\n   *\n   * Once the application navigates to another page, the object previously\n   * assigned to this.current will be moved to this.previous, while this.current\n   * is re-initialized.\n   */\n  previous: PageState = new PageState(null);\n\n  /**\n   * An object that manages modal state.\n   */\n  modal: ModalManagerState = new ModalManagerState();\n\n  /**\n   * An object that manages the state of active alerts.\n   */\n  alerts: AlertManagerState = new AlertManagerState();\n\n  /**\n   * An object that manages the state of the navigation drawer.\n   */\n  drawer!: Drawer;\n\n  history: IHistory | null = null;\n  pane: any = null;\n\n  data!: ApplicationData;\n\n  private _title: string = '';\n  private _titleCount: number = 0;\n\n  private set title(val: string) {\n    this._title = val;\n  }\n\n  get title() {\n    return this._title;\n  }\n\n  private set titleCount(val: number) {\n    this._titleCount = val;\n  }\n\n  get titleCount() {\n    return this._titleCount;\n  }\n\n  /**\n   * The key for an Alert that was shown as a result of an AJAX request error.\n   * If present, it will be dismissed on the next successful request.\n   */\n  private requestErrorAlert: number | null = null;\n\n  initialRoute!: string;\n\n  public load(payload: Application['data']) {\n    this.data = payload;\n    this.translator.setLocale(payload.locale);\n  }\n\n  public boot() {\n    const caughtInitializationErrors: CallableFunction[] = [];\n\n    this.initializers.toArray().forEach((initializer) => {\n      try {\n        initializer(this);\n      } catch (e) {\n        const extension = initializer.itemName.includes('/')\n          ? initializer.itemName.replace(/(\\/flarum-ext-)|(\\/flarum-)/g, '-')\n          : initializer.itemName;\n\n        caughtInitializationErrors.push(() =>\n          fireApplicationError(\n            extractText(app.translator.trans('core.lib.error.extension_initialiation_failed_message', { extension })),\n            `${extension} failed to initialize`,\n            e\n          )\n        );\n      }\n    });\n\n    this.store.pushPayload({ data: this.data.resources });\n\n    this.forum = this.store.getById('forums', '1')!;\n\n    this.session = new Session(this.store.getById<User>('users', String(this.data.session.userId)) ?? null, this.data.session.csrfToken);\n\n    this.mount();\n\n    this.initialRoute = window.location.href;\n\n    caughtInitializationErrors.forEach((handler) => handler());\n  }\n\n  // TODO: This entire system needs a do-over for v2\n  public bootExtensions(extensions: Record<string, { extend?: unknown[] }>) {\n    Object.keys(extensions).forEach((name) => {\n      const extension = extensions[name];\n\n      // If an extension doesn't define extenders, there's nothing more to do here.\n      if (!extension.extend) return;\n\n      const extenders = extension.extend.flat(Infinity);\n\n      for (const extender of extenders) {\n        // @ts-expect-error This is beyond saving atm.\n        extender.extend(this, { name, exports: extension });\n      }\n    });\n  }\n\n  protected mount(basePath: string = '') {\n    // An object with a callable view property is used in order to pass arguments to the component; see https://mithril.js.org/mount.html\n    m.mount(document.getElementById('modal')!, { view: () => <ModalManager state={this.modal} /> });\n    m.mount(document.getElementById('alerts')!, { view: () => <AlertManager state={this.alerts} /> });\n\n    this.drawer = new Drawer();\n\n    m.route(document.getElementById('content')!, basePath + '/', mapRoutes(this.routes, basePath));\n\n    const appEl = document.getElementById('app')!;\n    const appHeaderEl = document.querySelector('.App-header')!;\n\n    // Add a class to the body which indicates that the page has been scrolled\n    // down. When this happens, we'll add classes to the header and app body\n    // which will set the navbar's position to fixed. We don't want to always\n    // have it fixed, as that could overlap with custom headers.\n    const scrollListener = new ScrollListener((top: number) => {\n      const offset = appEl.getBoundingClientRect().top + document.body.scrollTop;\n\n      appEl.classList.toggle('affix', top >= offset);\n      appEl.classList.toggle('scrolled', top > offset);\n\n      appHeaderEl.classList.toggle('navbar-fixed-top', top >= offset);\n    });\n\n    scrollListener.start();\n    scrollListener.update();\n\n    document.body.classList.add('ontouchstart' in window ? 'touch' : 'no-touch');\n\n    liveHumanTimes();\n  }\n\n  /**\n   * Get the API response document that has been preloaded into the application.\n   */\n  preloadedApiDocument<M extends Model>(): ApiResponseSingle<M> | null;\n  preloadedApiDocument<Ms extends Model[]>(): ApiResponsePlural<Ms[number]> | null;\n  preloadedApiDocument<M extends Model | Model[]>(): ApiResponse<FlatArray<M, 1>> | null {\n    // If the URL has changed, the preloaded Api document is invalid.\n    if (this.data.apiDocument && window.location.href === this.initialRoute) {\n      const results = payloadIsPlural(this.data.apiDocument)\n        ? this.store.pushPayload<FlatArray<M, 1>[]>(this.data.apiDocument)\n        : this.store.pushPayload<FlatArray<M, 1>>(this.data.apiDocument);\n\n      this.data.apiDocument = null;\n\n      return results;\n    }\n\n    return null;\n  }\n\n  /**\n   * Determine the current screen mode, based on our media queries.\n   */\n  screen(): FlarumScreens {\n    const styles = getComputedStyle(document.documentElement);\n    return styles.getPropertyValue('--flarum-screen') as ReturnType<Application['screen']>;\n  }\n\n  /**\n   * Set the `<title>` of the page.\n   *\n   * @param title New page title\n   */\n  setTitle(title: string): void {\n    this.title = title;\n    this.updateTitle();\n  }\n\n  /**\n   * Set a number to display in the `<title>` of the page.\n   *\n   * @param count Number to display in title\n   */\n  setTitleCount(count: number): void {\n    this.titleCount = count;\n    this.updateTitle();\n  }\n\n  updateTitle(): void {\n    const count = this.titleCount ? `(${this.titleCount}) ` : '';\n    const onHomepage = m.route.get() === this.forum.attribute('basePath') + '/';\n\n    const params = {\n      pageTitle: this.title,\n      forumName: this.forum.attribute('title'),\n      // Until we add page numbers to the frontend, this is constant at 1\n      // so that the page number portion doesn't show up in the URL.\n      pageNumber: 1,\n    };\n\n    let title =\n      onHomepage || !this.title\n        ? extractText(app.translator.trans('core.lib.meta_titles.without_page_title', params))\n        : extractText(app.translator.trans('core.lib.meta_titles.with_page_title', params));\n\n    title = count + title;\n\n    // We pass the title through a DOMParser to allow HTML entities\n    // to be rendered correctly, while still preventing XSS attacks\n    // from user input by using a script-disabled environment.\n    // https://github.com/flarum/framework/issues/3514\n    // https://github.com/flarum/framework/pull/3684\n    const parser = new DOMParser();\n    const safeTitle = parser.parseFromString(title, 'text/html').body.innerHTML;\n\n    document.title = safeTitle;\n  }\n\n  protected transformRequestOptions<ResponseType>(flarumOptions: FlarumRequestOptions<ResponseType>): InternalFlarumRequestOptions<ResponseType> {\n    const { background, deserialize, extract, modifyText, ...tmpOptions } = { ...flarumOptions };\n\n    // Unless specified otherwise, requests should run asynchronously in the\n    // background, so that they don't prevent redraws from occurring.\n    const defaultBackground = true;\n\n    // When we deserialize JSON data, if for some reason the server has provided\n    // a dud response, we don't want the application to crash. We'll show an\n    // error message to the user instead.\n\n    // @ts-expect-error Typescript doesn't know we return promisified `ReturnType` OR `string`,\n    // so it errors due to Mithril's typings\n    const defaultDeserialize = (response: string) => response as ResponseType;\n\n    // When extracting the data from the response, we can check the server\n    // response code and show an error message to the user if something's gone\n    // awry.\n    const originalExtract = modifyText || extract;\n\n    const options: InternalFlarumRequestOptions<ResponseType> = {\n      background: background ?? defaultBackground,\n      deserialize: deserialize ?? defaultDeserialize,\n      ...tmpOptions,\n    };\n\n    extend(options, 'config', (_: undefined, xhr: XMLHttpRequest) => {\n      xhr.setRequestHeader('X-CSRF-Token', this.session.csrfToken!);\n    });\n\n    // If the method is something like PATCH or DELETE, which not all servers\n    // and clients support, then we'll send it as a POST request with the\n    // intended method specified in the X-HTTP-Method-Override header.\n    if (options.method && !['GET', 'POST'].includes(options.method)) {\n      const method = options.method;\n\n      extend(options, 'config', (_: undefined, xhr: XMLHttpRequest) => {\n        xhr.setRequestHeader('X-HTTP-Method-Override', method);\n      });\n\n      options.method = 'POST';\n    }\n\n    options.extract = (xhr: XMLHttpRequest) => {\n      let responseText;\n\n      if (originalExtract) {\n        responseText = originalExtract(xhr.responseText);\n      } else {\n        responseText = xhr.responseText;\n      }\n\n      const status = xhr.status;\n\n      if (status < 200 || status > 299) {\n        throw new RequestError<ResponseType>(status, `${responseText}`, options, xhr);\n      }\n\n      if (xhr.getResponseHeader) {\n        const csrfToken = xhr.getResponseHeader('X-CSRF-Token');\n        if (csrfToken) app.session.csrfToken = csrfToken;\n      }\n\n      try {\n        if (responseText === '') {\n          return null;\n        }\n\n        return JSON.parse(responseText);\n      } catch (e) {\n        throw new RequestError<ResponseType>(500, `${responseText}`, options, xhr);\n      }\n    };\n\n    return options;\n  }\n\n  /**\n   * Make an AJAX request, handling any low-level errors that may occur.\n   *\n   * @see https://mithril.js.org/request.html\n   */\n  request<ResponseType>(originalOptions: FlarumRequestOptions<ResponseType>): Promise<ResponseType> {\n    const options = this.transformRequestOptions(originalOptions);\n\n    if (this.requestErrorAlert) this.alerts.dismiss(this.requestErrorAlert);\n\n    return m.request(options).catch((e) => this.requestErrorCatch(e, originalOptions.errorHandler));\n  }\n\n  /**\n   * By default, show an error alert, and log the error to the console.\n   */\n  protected requestErrorCatch<ResponseType>(error: RequestError, customErrorHandler: FlarumRequestOptions<ResponseType>['errorHandler']) {\n    // the details property is decoded to transform escaped characters such as '\\n'\n    const formattedErrors = error.response?.errors?.map((e) => decodeURI(e.detail ?? '')) ?? [];\n\n    let content;\n    switch (error.status) {\n      case 422:\n        content = formattedErrors\n          .map((detail) => [detail, <br />])\n          .flat()\n          .slice(0, -1);\n        break;\n\n      case 401:\n      case 403:\n        content = app.translator.trans('core.lib.error.permission_denied_message');\n        break;\n\n      case 404:\n      case 410:\n        content = app.translator.trans('core.lib.error.not_found_message');\n        break;\n\n      case 413:\n        content = app.translator.trans('core.lib.error.payload_too_large_message');\n        break;\n\n      case 429:\n        content = app.translator.trans('core.lib.error.rate_limit_exceeded_message');\n        break;\n\n      default:\n        content = app.translator.trans('core.lib.error.generic_message');\n    }\n\n    const isDebug: boolean = app.forum.attribute('debug');\n\n    error.alert = {\n      type: 'error',\n      content,\n      controls: isDebug && [\n        <Button className=\"Button Button--link\" onclick={this.showDebug.bind(this, error, formattedErrors)}>\n          {app.translator.trans('core.lib.debug_button')}\n        </Button>,\n      ],\n    };\n\n    if (customErrorHandler) {\n      customErrorHandler(error);\n    } else {\n      this.requestErrorDefaultHandler(error, isDebug, formattedErrors);\n    }\n\n    return Promise.reject(error);\n  }\n\n  protected requestErrorDefaultHandler(e: unknown, isDebug: boolean, formattedErrors: string[]): void {\n    if (e instanceof RequestError) {\n      if (isDebug && e.xhr) {\n        const { method, url } = e.options;\n        const { status = '' } = e.xhr;\n\n        console.group(`${method} ${url} ${status}`);\n\n        if (formattedErrors.length) {\n          console.error(...formattedErrors);\n        } else {\n          console.error(e);\n        }\n\n        console.groupEnd();\n      }\n\n      if (e.alert) {\n        this.requestErrorAlert = this.alerts.show(e.alert, e.alert.content);\n      }\n    } else {\n      throw e;\n    }\n  }\n\n  private showDebug(error: RequestError, formattedError: string[]) {\n    if (this.requestErrorAlert !== null) this.alerts.dismiss(this.requestErrorAlert);\n\n    this.modal.show(RequestErrorModal, { error, formattedError });\n  }\n\n  /**\n   * Construct a URL to the route with the given name.\n   */\n  route(name: string, params: Record<string, unknown> = {}): string {\n    const route = this.routes[name];\n\n    if (!route) throw new Error(`Route '${name}' does not exist`);\n\n    const url = route.path.replace(/:([^\\/]+)/g, (m, key) => `${extract(params, key)}`);\n\n    // Remove falsy values in params to avoid having urls like '/?sort&q'\n    for (const key in params) {\n      if (params.hasOwnProperty(key) && !params[key]) delete params[key];\n    }\n\n    const queryString = m.buildQueryString(params as any);\n    const prefix = m.route.prefix === '' ? this.forum.attribute('basePath') : '';\n\n    return prefix + url + (queryString ? '?' + queryString : '');\n  }\n}\n", "<!doctype html>\n<html @if ($direction) dir=\"{{ $direction }}\" @endif\n      @if ($language) lang=\"{{ $language }}\" @endif>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>{{ $title }}</title>\n\n        {!! $head !!}\n    </head>\n\n    <body>\n        {!! $layout !!}\n\n        <div id=\"modal\"></div>\n        <div id=\"alerts\"></div>\n\n        <script>\n            document.getElementById('flarum-loading').style.display = 'block';\n            var flarum = {extensions: {}};\n        </script>\n\n        {!! $js !!}\n\n        <script id=\"flarum-json-payload\" type=\"application/json\">@json($payload)</script>\n\n        <script>\n            const data = JSON.parse(document.getElementById('flarum-json-payload').textContent);\n            document.getElementById('flarum-loading').style.display = 'none';\n\n            try {\n                flarum.core.app.load(data);\n                flarum.core.app.bootExtensions(flarum.extensions);\n                flarum.core.app.boot();\n            } catch (e) {\n                var error = document.getElementById('flarum-loading-error');\n                error.innerHTML += document.getElementById('flarum-content').textContent;\n                error.style.display = 'block';\n                throw e;\n            }\n        </script>\n\n        {!! $foot !!}\n    </body>\n</html>\n"], "filenames": ["framework/core/js/src/common/Application.tsx", "framework/core/views/frontend/app.blade.php"], "buggy_code_start_loc": [413, 6], "buggy_code_end_loc": [423, 7], "fixing_code_start_loc": [413, 6], "fixing_code_end_loc": [429, 7], "type": "CWE-79", "message": "Flarum is an open source discussion platform. Flarum's page title system allowed for page titles to be converted into HTML DOM nodes when pages were rendered. The change was made after `v1.5` and was not noticed. This allowed an attacker to inject malicious HTML markup using a discussion title input, either by creating a new discussion or renaming one. The XSS attack occurs after a visitor opens the relevant discussion page. All communities running Flarum from `v1.5.0` to `v1.6.1` are impacted. The vulnerability has been fixed and published as flarum/core `v1.6.2`. All communities running Flarum from `v1.5.0` to `v1.6.1` have to upgrade as soon as possible to v1.6.2. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-41938", "sourceIdentifier": "security-advisories@github.com", "published": "2022-11-19T01:15:10.383", "lastModified": "2022-11-26T03:19:52.217", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Flarum is an open source discussion platform. Flarum's page title system allowed for page titles to be converted into HTML DOM nodes when pages were rendered. The change was made after `v1.5` and was not noticed. This allowed an attacker to inject malicious HTML markup using a discussion title input, either by creating a new discussion or renaming one. The XSS attack occurs after a visitor opens the relevant discussion page. All communities running Flarum from `v1.5.0` to `v1.6.1` are impacted. The vulnerability has been fixed and published as flarum/core `v1.6.2`. All communities running Flarum from `v1.5.0` to `v1.6.1` have to upgrade as soon as possible to v1.6.2. There are no known workarounds for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:flarum:flarum:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.5.0", "versionEndExcluding": "1.6.2", "matchCriteriaId": "1CB7BB87-17F3-4F63-B744-69CB036BA93E"}]}]}], "references": [{"url": "https://discuss.flarum.org/d/27558", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/flarum/framework/commit/690de9ce0ffe7ac4d45b73e303f44340c3433138", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/flarum/framework/security/advisories/GHSA-7x4w-j98p-854x", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/flarum/framework/commit/690de9ce0ffe7ac4d45b73e303f44340c3433138"}}