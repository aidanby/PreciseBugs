{"buggy_code": ["package com.datformers.database;\n\nimport java.sql.*;\nimport java.util.Enumeration;\n\n\npublic class OracleDBWrapper {\n\tString url;\n\tString pwd;\n\tString user;\n\tConnection conn;\n\t\n\t\n\tpublic OracleDBWrapper(String url,String user,String pwd) {\n\t\tthis.url=url;\n\t\tthis.user=user;\n\t\tthis.pwd=pwd;\n\t\tcreateConnection();\n\t\t\n\t}\n\tpublic void createConnection() {\n\t\t\n\t\t\ttry {\n\t\t\t\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\n\t\t\t\tconn = DriverManager.getConnection(url,\n\t\t\t\t\t\tuser, pwd);\n\t\t\t} catch (SQLException | ClassNotFoundException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\n\t}\n\t\n\tpublic ResultSet executeQuery(String query) {\n\t\t Statement stmt;\n\t\t ResultSet rs = null;\n\t\t \n\t\ttry {\n\t\t\tstmt = conn.createStatement();\n\t\t\trs = stmt.executeQuery(query);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t\treturn rs;\n\t}\n\tpublic void closeConnection() {\n\t\ttry {\n\t\t\tconn.close();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tpublic void deregister() {\n\t\tEnumeration<Driver> drivers = DriverManager.getDrivers();\n        while (drivers.hasMoreElements()) {\n            Driver driver = drivers.nextElement();\n            try {\n                DriverManager.deregisterDriver(driver);\n               \n            } catch (SQLException e) {\n               \n            }\n\n        }\n\t}\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tString url = \"jdbc:oracle:thin:@//cis550hw1.cfoish237b6z.us-west-2.rds.amazonaws.com:1521/IMDB\";\n\t\t\tConnection conn = DriverManager.getConnection(url,\n\t\t\t\t\t\"cis550students\", \"cis550hw1\");\n\t\t\tStatement stmt = conn.createStatement();\n\t\t\tResultSet rs;\n\t\t\tString query=\"With result as (select genre as g,count(movie_id) as c,year\"+\n                         \" from MOVIES_GENRES M inner join MOVIES K on K.ID=M.MOVIE_ID\"+\n                         \" group by M.genre,year)\"+\n                         \" select  g as GENRE,year\"+\n                         \" from result\"+ \n                         \" where (c,g) in\"+ \n                         \" (select max(c),g from result\"+\n                         \" group by g)\";\n\t\t\t\n\t\t\trs = stmt.executeQuery(query);\n\t\t\tResultSetMetaData d=rs.getMetaData();\n\t\t\tSystem.out.println(d.getColumnName(1)+\"      \"+d.getColumnName(2));\n\t\t\twhile (rs.next()) {\n\t\t\t\tString genre = rs.getString(d.getColumnName(1));\n\t\t\t\tString year = rs.getString(d.getColumnName(2));\n\t\t\t\tSystem.out.println(genre+\"     \"+year);\n\t\t\t}\n\t\t\tconn.close();\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Got an exception! \");\n\t\t\tSystem.err.println(e.getMessage());\n\t\t}\n\t}\n}\n", "package com.datformers.servlet;\n\n\n\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\nimport com.datformers.database.OracleDBWrapper;\nimport com.datformers.utils.DatabaseUtil;\n\n\npublic class AddAppUser {\n\tString query = \"\";\n\tOracleDBWrapper wrapper;\n\n\tpublic AddAppUser(String str){\n\t\tquery = str;\n\t\twrapper = new OracleDBWrapper(DatabaseUtil.getURL(DatabaseUtil.IP), DatabaseUtil.UERNAME, DatabaseUtil.PASSWORD);\n\t}\n\tpublic ResultSet addUser(){\n\t\t\n\t\n\t\t//String query1 = \"Insert into APPUSER(USER_ID,EMAIL,PASSWORD,FIRST_NAME,LAST_NAME,IS_FACEBOOK_LOGIN)\"\n\t\t//\t\t+ \" values (usr_id.NEXTVAL,'aryaa@seas.upenn.edu','test','ARyaa','Gautam','Y')\";\n\t\t\n\t\tResultSet rs = wrapper.executeQuery(query);\n\t\treturn rs;\n\t\t\n\t\t\n\t}\n\tpublic void closeDb(){\n\t\twrapper.closeConnection();\n\t}\n\t\n}\n", "package com.datformers.servlet;\n\nimport java.io.IOException;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\n\nimport com.datformers.database.OracleDBWrapper;\nimport com.datformers.utils.DatabaseUtil;\n\npublic class HeatMapServlet extends HttpServlet {\n\tprivate OracleDBWrapper dbWrapper = new OracleDBWrapper(DatabaseUtil.getURL(DatabaseUtil.IP), DatabaseUtil.UERNAME,DatabaseUtil.PASSWORD);\t\n\t@Override\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response) {\n\t\t//System.out.println(\"SERVLET GOT CALL\"+request.getPathInfo());\n\t\t\n\t\tString keys[] = {\"latitude\",\"longitude\",\"name\",\"check_in_info\",\"points1\"};\n\t\tif(request.getPathInfo()!=null && request.getPathInfo().contains(\"points1\")) {\n\t\t\t//Connect to database\n\t\t\tString city = request.getParameter(\"city\");\n\t\t\tString category = request.getParameter(\"category\");\n\t\t\t//System.out.println(\"Got request for: \"+city+\" and category: \"+category);\n\t\t\t//System.out.println(city + \":\");\n\t\t\tString queryString = \"select business.latitude,business.longitude,business.name,c.check_in_info \"\n\t\t\t\t\t+ \"from business \"\n\t\t\t\t\t+ \"inner join categories \"\n\t\t\t\t\t+ \"on categories.bid = business.bid \"\n\t\t\t\t\t+ \"inner join checkin c \"\n\t\t\t\t\t+ \"on c.bid = business.bid \"\n\t\t\t\t\t+ \"where business.city='\" + city \n\t\t\t\t\t+ \"' and categories.category='\"+category +\"'\"\n\t\t\t\t\t+\"order by c.check_in_info DESC\";\n\t\t\tSystem.out.println(\"QString: \"+queryString);\n\t\t\tResultSet set = dbWrapper.executeQuery(queryString);\n\t\t\tif(set==null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t//Create response\n\t\t\tJSONArray array = new JSONArray();\n\t\t\tint count = 0;\n\t\t\ttry {\n\t\t\t\twhile(set.next()) {\n\t\t\t\t\tcount++;\n\t\t\t\t\tJSONObject obj = new JSONObject();\n\t\t\t\t\tobj.put(keys[0], set.getDouble(keys[0]));\n\t\t\t\t\tobj.put(keys[1], set.getDouble(keys[1]));\n\t\t\t\t\tobj.put(keys[3],  set.getInt(keys[3]));\n\t\t\t\t\tobj.put(keys[2],  set.getString(keys[2]));\n\t\t\t\t\t\t\t\n\t\t\t\t\tarray.add(obj);\n\t\t\t\t}\n\t\t\t\tJSONObject resultObject = new JSONObject();\n\t\t\t\tresultObject.put(\"source\", \"We got from database\");\n\t\t\t\tresultObject.put(\"city\", city);\n\t\t\t\tresultObject.put(\"category\", category);\n\t\t\t\tresultObject.put(\"points\", array);\n\t\t\t\tresponse.setContentType(\"application/json\");\n\t\t\t\t//System.out.println(\"JSON Object\" + resultObject);\n\t\t\t\tresponse.getWriter().println(resultObject.toString());\n\t\t\t} catch (SQLException | IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tSystem.out.println(\"Heat map Servlet: \"+e.getMessage());\n\t\t\t}\n\t\t} else if(request.getPathInfo()!=null && request.getPathInfo().contains(\"points\")) {\n\t\t\tdouble latitude[] = {40.35762,40.391255,40.4704573375885,40.4285874,40.492067,40.499398,40.487671,40.495483,40.459082,40.4499962,40.463717,40.4882149,40.450249,40.467794,40.462105,40.457881,40.458577,40.458335,40.4852511,40.4582511,40.4653904,40.458703,40.4657572,40.457598,40.457271,40.4606263,40.464176,40.485645,40.474884,40.459747,40.4583902,40.4579265,40.4575612,40.4582381,40.458477,40.4638365,40.4584723,40.4592437,40.4617424,40.4605003,40.475405,40.4601614,40.4613612,40.4605159,40.464615,40.463935,40.457589,40.4641113,40.4582251,40.4573589,40.4585106474725,40.460997,40.459676,40.458522,40.4572607,40.4538201,40.458138,40.464485,40.4572935,40.4502135,40.4472949,40.4481991,40.4496169180659,40.447942,40.447942,40.4574605383472,40.457835,40.4484869,40.4148896,40.4407497519697,40.4115087,40.415053,40.4147064,40.4216159,40.4218925,40.3668,40.3926169,40.3923844,40.393115,40.391732,40.388311,40.39261,40.3923831,40.387167,40.4531335,40.4534167,40.455167,40.4541341,40.4535039,40.4521309,40.4959456,40.4489884,40.455833,40.4621686,40.455167,40.4643755,40.4457075,40.4435041,40.4546428,40.4566455,40.4566092,40.4566994,40.4509987,40.4542747,40.454859,40.4534984,40.4543344,40.455929,40.4531769,40.4480678,40.4527029402106,40.4535915,40.456259,40.4460204,40.4534946,40.4481509,40.4480946,40.464958,40.4484039,40.4730851446399,40.4846476,40.4702876,40.4812123,40.4851129,40.4810824,40.489973,40.4215177,40.3918758,40.3959923,40.3950481,40.3943248,40.3949331,40.3953119,40.409199,40.3996765,40.3992789,40.3971675,40.409125,40.394911,40.388562,40.38892,40.3953565,40.3942631,40.3954709,40.420335,40.412659,40.4025781,40.3885545,40.401054,40.395871,40.3958828,40.443213,40.390935,40.422068,40.3897336,40.397846,40.3959206,40.3966306,40.396132,40.388395,40.420335,40.420335,40.414716,40.409944,40.3886105,40.3886666};\n\t\t\tdouble longitude[] = {-80.05998,-80.073426,-80.0889587402344,-79.9865459,-80.06235,-80.07249,-80.055464,-80.065652,-80.077006,-80.0575565,-79.931884,-79.920642,-79.9145,-79.926611,-79.922481,-79.924269,-79.921053,-79.924717,-79.9259794,-79.9251169,-79.9229971,-79.922447,-79.9148356,-79.9100009,-79.925517,-79.9238313,-79.9252199,-79.926487,-79.918862,-79.9185679,-79.9255146,-79.9180322,-79.9250618,-79.9251176,-79.921901,-79.9316767,-79.9187095,-79.9313671,-79.9251969,-79.9256896,-79.919627,-79.9274944,-79.9259052,-79.925241,-79.922397,-79.933126,-79.9254969,-79.9250911,-79.9251182,-79.9251969,-79.928830198608,-79.928355,-79.923615,-79.925436,-79.9336632,-79.9211464,-79.924797,-79.935388,-79.9252056,-79.9143225,-79.90508,-79.8954753,-79.898855609787,-79.895957,-79.895957,-79.9084721005249,-79.9275276,-79.9012971,-79.987783,-79.9996304512024,-79.9558863,-79.987206,-79.9877685,-79.9934656,-79.992815,-79.981359,-79.9866014,-79.9866275,-79.986911,-79.98718,-79.996225,-79.9968169,-79.9972486,-79.98224,-80.0013672,-79.9997426,-79.999815,-79.9981189,-79.9992711,-79.9981452,-79.9606482,-80.0088714,-80.006512,-80.0190648,-79.994957,-79.9821671,-80.018213,-79.9495881,-79.9907425,-80.0070383,-80.0015054,-80.0105349,-80.0009426,-80.0005142,-79.999162,-80.0012052,-80.0126074,-80.0065429,-80.001199,-80.0042395,-80.0066578388214,-80.0008071,-80.014446,-80.0153356,-79.9993338,-80.0040779,-80.0042488,-79.983936,-80.010841,-79.9621242834648,-80.0354937,-80.0302515,-80.0414427,-80.0416964,-80.0414027,-80.018177,-80.0297492,-80.037826,-80.0350352,-80.034704,-80.0464255,-80.0342686,-80.0343,-80.031761,-80.0434133,-80.0445647,-80.0294805,-80.024957,-80.0339862,-80.049448,-80.049921,-80.0345551,-80.0352133,-80.0347424,-80.030114,-80.030322,-80.041926,-80.0500275,-80.0433063,-80.033585,-80.0466445,-79.9534393,-80.039142,-80.029239,-80.0409102,-80.036197,-80.0348023,-80.0357966,-80.033232,-80.049821,-80.030114,-80.030114,-80.03063,-80.024985,-80.0499034,-80.049779};\n\t\t\tString city = request.getParameter(\"city\");\n\t\t\tString category = request.getParameter(\"category\");\n\t\t\t//System.out.println(\"Got request for: \"+city);\n\t\t\tJSONArray array = new JSONArray();\n\t\t\tfor(int i=0; i<latitude.length; i++) {\n\t\t\t\tJSONObject obj = new JSONObject();\n\t\t\t\tobj.put(keys[0], latitude[i]);\n\t\t\t\tobj.put(keys[1], longitude[i]);\n\t\t\t\tarray.add(obj);\n\t\t\t}\n\t\t\tJSONObject resultObject = new JSONObject();\n\t\t\tresultObject.put(\"city\", city);\n\t\t\tresultObject.put(\"points\", array);\n\t\t\tresultObject.put(\"category\", category);\n\t\t\tresponse.setContentType(\"application/json\");\n\t\t\ttry {\n\t\t\t\tresponse.getWriter().println(resultObject.toString());\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tresponse.setContentType(\"text/plain\");\n\t\t\t\tresponse.getWriter().println(\"This is the response\");\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\t@Override\n\tpublic void destroy() {\n\t\tdbWrapper.deregister();\n\t}\n\t@Override \n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response) {\n\t\t\n\t}\n\n}\n", "package com.datformers.servlet;\n\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.sql.ResultSet;\nimport java.util.Formatter;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class LoginServlet extends HttpServlet {\n\n\t@Override\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response) {\n\t\tSystem.out.println(\"Servlet called\");\n\t\tPrintWriter outWriter = null;\n\t\tresponse.setContentType(\"text/html\");\n\t\tSystem.out.println(\"Content type set\");\n\t\ttry {\n\t\t\toutWriter = response.getWriter();\n\t\t\tif (outWriter != null)\n\t\t\t\tSystem.out.println(\"Got writer\");\n\t\t\toutWriter\n\t\t\t\t\t.println(\"<html><body><p>Hi and welcome to our very first servlet</p></body></html>\");\n\t\t\toutWriter.flush();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response) {\n\t\ttry {\n\t\t\tif (request.getParameter(\"login\") != null) {\n\n\t\t\t\tString username = request.getParameter(\"username\");\n\t\t\t\tString password = request.getParameter(\"password\");\n\t\t\t\tString isValidPwd = \"\";\n\t\t\t\tresponse.setContentType(\"text/html\");\n\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\tSystem.out.println(\"user:pwd\" + username + password);\n\t\t\t\tif (username.isEmpty() || password.isEmpty()) {\n\t\t\t\t\tout.println(\"<html><head><body><p>A mandatory field is empty!<p></body></head>\");\n\t\t\t\t\tSystem.out.println(\"EMPTY\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tAddAppUser tmp = null;\n\t\t\t\tString query = \"Select password from APPUSER where email LIKE '\"\n\t\t\t\t\t\t+ username + \"'\";\n\t\t\t\tSystem.out.println(query);\n\t\t\t\ttmp = new AddAppUser(query);\n\t\t\t\tResultSet res = tmp.addUser();\n\t\t\t\t\n\t\t\t\tif (res.next()) {\n\t\t\t\t\tisValidPwd = res.getString(\"password\");\n\t\t\t\t\tSystem.out.println(isValidPwd);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpassword=encryptPassword(password);\n\t\t\t\t\n\t\t\t\tif (password.equals(isValidPwd)) {\n\t\t\t\t\t//out.println(\"<html><head><body><h3>Login Success!!</h3></body></head>\");\n\t\t\t\t\tresponse.sendRedirect(\"main.html\");\n\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Login Failed!!\");\n\t\t\t\t\tout.println(\"<html><head><body><h3>Invalid credentials!!</h3></body></head>\");\n\t\t\t\t\tout.flush();\t\n\t\t\t\t\ttmp.closeDb();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttmp.closeDb();\n\t\t\t\n\n\t\t\t}\n\t\t\tif (request.getParameter(\"register\") != null) {\n\t\t\t\tresponse.sendRedirect(\"register.html\");\n\n\t\t\t}\n\n\t\t\tif (request.getParameter(\"signup\") != null) {\n\t\t\t\t// boolean ifUserAlreadyRegisterd = true;\n\n\t\t\t\tresponse.setContentType(\"text/html\");\n\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\tString first = request.getParameter(\"firstname\");\n\t\t\t\tString last = request.getParameter(\"lastname\");\n\t\t\t\tString pwd = request.getParameter(\"password\");\n\t\t\t\tString encrypt=encryptPassword(pwd);\n\t\t\t\tString email = request.getParameter(\"email\");\n\t\t\t\tString isFbLogin = \"N\";\n\n\t\t\t\tif (first.isEmpty() || last.isEmpty() || pwd.isEmpty()\n\t\t\t\t\t\t|| email.isEmpty()) {\n\n\t\t\t\t\tout = response.getWriter();\n\t\t\t\t\tout.println(\"<html><head><body><p>A mandatory field is empty!<p></body></head>\");\n\t\t\t\t\t// System.out.println(\"<html><head><body><p>A mandatory field is empty!<p></body></head>\");\n\n\t\t\t\t} else {\n\t\t\t\t\tString query = \"SELECT count(*) as cnt FROM APPUSER WHERE email LIKE '\"\n\t\t\t\t\t\t\t+ email + \"'\";\n\t\t\t\t\t// System.out.println(\"Signup query\" + query);\n\t\t\t\t\tAddAppUser add = new AddAppUser(query);\n\t\t\t\t\tResultSet res = add.addUser();\n\t\t\t\t\tint count = 0;\n\t\t\t\t\tif (res.next()) {\n\t\t\t\t\t\tcount = res.getInt(\"cnt\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tadd.closeDb();\n\t\t\t\t\tSystem.out.println(\"Signup query\" + query);\n\t\t\t\t\tif (count > 0) {\n\t\t\t\t\t\t// System.out.println(\"Already Registered\");\n\t\t\t\t\t\tout.println(\"<html><head><body><p>This email id is already registered!!</p></body></head>\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// System.out.println(\"Registering!\");\n\t\t\t\t\t\tString query1 = \"Insert into APPUSER(USER_ID,EMAIL,PASSWORD,FIRST_NAME,LAST_NAME,IS_FACEBOOK_LOGIN)\"\n\t\t\t\t\t\t\t\t+ \" values (usr_id.NEXTVAL,'\"\n\t\t\t\t\t\t\t\t+ email\n\t\t\t\t\t\t\t\t+ \"','\"\n\t\t\t\t\t\t\t\t+ encrypt\n\t\t\t\t\t\t\t\t+ \"','\"\n\t\t\t\t\t\t\t\t+ first\n\t\t\t\t\t\t\t\t+ \"','\"\n\t\t\t\t\t\t\t\t+ last\n\t\t\t\t\t\t\t\t+ \"','\"\n\t\t\t\t\t\t\t\t+ isFbLogin + \"')\";\n\t\t\t\t\t\t// System.out.println(query1);\n\t\t\t\t\t\tAddAppUser tmp = new AddAppUser(query1);\n\t\t\t\t\t\ttmp.addUser();\n\t\t\t\t\t\ttmp.closeDb();\n\t\t\t\t\t\tresponse.sendRedirect(\"main.html\");\n\t\t\t\t\t\t//out.println(\"<html><head><body><h3>Registration Successful!</h3></body></head>\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\n\t\t}\n\t}\n\tprivate static String encryptPassword(String password)\n\t{\n\t    String sha1 = \"\";\n\t    try\n\t    {\n\t        MessageDigest crypt = MessageDigest.getInstance(\"SHA-1\");\n\t        crypt.reset();\n\t        crypt.update(password.getBytes(\"UTF-8\"));\n\t        sha1 = byteToHex(crypt.digest());\n\t    }\n\t    catch(NoSuchAlgorithmException e)\n\t    {\n\t        e.printStackTrace();\n\t    }\n\t    catch(UnsupportedEncodingException e)\n\t    {\n\t        e.printStackTrace();\n\t    }\n\t    return sha1;\n\t}\n\n\tprivate static String byteToHex(final byte[] hash)\n\t{\n\t    Formatter formatter = new Formatter();\n\t    for (byte b : hash)\n\t    {\n\t        formatter.format(\"%02x\", b);\n\t    }\n\t    String result = formatter.toString();\n\t    formatter.close();\n\t    return result;\n\t}\n}\n"], "fixing_code": ["package com.datformers.database;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\n\n\npublic class OracleDBWrapper {\n\tString url;\n\tString pwd;\n\tString user;\n\tConnection conn;\n\t\n\t\n\tpublic OracleDBWrapper(String url,String user,String pwd) {\n\t\tthis.url=url;\n\t\tthis.user=user;\n\t\tthis.pwd=pwd;\n\t\tcreateConnection();\n\t\t\n\t}\n\tpublic void createConnection() {\n\t\t\n\t\t\ttry {\n\t\t\t\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\n\t\t\t\tconn = DriverManager.getConnection(url,\n\t\t\t\t\t\tuser, pwd);\n\t\t\t} catch (SQLException | ClassNotFoundException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\n\t}\n\t\n\tpublic ResultSet executeQuery(String query) {\n\t\t Statement stmt;\n\t\t ResultSet rs = null;\n\t\t \n\t\ttry {\n\t\t\tstmt = conn.createStatement();\n\t\t\trs = stmt.executeQuery(query);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t\treturn rs;\n\t}\n\tpublic ResultSet executeValidateQuery(String query,ArrayList<String> params) {\n\t\tPreparedStatement  preparedStatement;\n\n\t\t ResultSet rs = null;\n\t\t \n\t\ttry {\n\t\t\tpreparedStatement=conn.prepareStatement(query) ;\n\t\t\tfor(int i=0;i<params.size();i++) {\n\t\t\t\tpreparedStatement.setString(i+1,params.get(i));\t\n\t\t\t}\n\t\t\t\n\t\t\trs = preparedStatement.executeQuery();\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t\treturn rs;\n\t}\n\tpublic void closeConnection() {\n\t\ttry {\n\t\t\tconn.close();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tpublic void deregister() {\n\t\tEnumeration<Driver> drivers = DriverManager.getDrivers();\n        while (drivers.hasMoreElements()) {\n            Driver driver = drivers.nextElement();\n            try {\n                DriverManager.deregisterDriver(driver);\n               \n            } catch (SQLException e) {\n               \n            }\n\n        }\n\t}\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tString url = \"jdbc:oracle:thin:@//cis550hw1.cfoish237b6z.us-west-2.rds.amazonaws.com:1521/IMDB\";\n\t\t\tConnection conn = DriverManager.getConnection(url,\n\t\t\t\t\t\"cis550students\", \"cis550hw1\");\n\t\t\tStatement stmt = conn.createStatement();\n\t\t\tResultSet rs;\n\t\t\tString query=\"With result as (select genre as g,count(movie_id) as c,year\"+\n                         \" from MOVIES_GENRES M inner join MOVIES K on K.ID=M.MOVIE_ID\"+\n                         \" group by M.genre,year)\"+\n                         \" select  g as GENRE,year\"+\n                         \" from result\"+ \n                         \" where (c,g) in\"+ \n                         \" (select max(c),g from result\"+\n                         \" group by g)\";\n\t\t\t\n\t\t\trs = stmt.executeQuery(query);\n\t\t\tResultSetMetaData d=rs.getMetaData();\n\t\t\tSystem.out.println(d.getColumnName(1)+\"      \"+d.getColumnName(2));\n\t\t\twhile (rs.next()) {\n\t\t\t\tString genre = rs.getString(d.getColumnName(1));\n\t\t\t\tString year = rs.getString(d.getColumnName(2));\n\t\t\t\tSystem.out.println(genre+\"     \"+year);\n\t\t\t}\n\t\t\tconn.close();\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Got an exception! \");\n\t\t\tSystem.err.println(e.getMessage());\n\t\t}\n\t}\n}\n", "package com.datformers.servlet;\n\n\n\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\n\nimport com.datformers.database.OracleDBWrapper;\nimport com.datformers.utils.DatabaseUtil;\n\n\npublic class AddAppUser {\n\tString query = \"\";\n\tArrayList<String> params=null;\n\tOracleDBWrapper wrapper;\n\n\tpublic AddAppUser(String str,ArrayList<String> p){\n\t\tquery = str;\n\t\tparams=p;\n\t\twrapper = new OracleDBWrapper(DatabaseUtil.getURL(DatabaseUtil.IP), DatabaseUtil.UERNAME, DatabaseUtil.PASSWORD);\n\t}\n\tpublic ResultSet addUser(){\n\t\t\n\t\n\t\t//String query1 = \"Insert into APPUSER(USER_ID,EMAIL,PASSWORD,FIRST_NAME,LAST_NAME,IS_FACEBOOK_LOGIN)\"\n\t\t//\t\t+ \" values (usr_id.NEXTVAL,'aryaa@seas.upenn.edu','test','ARyaa','Gautam','Y')\";\n\t\t\n\t\tResultSet rs = wrapper.executeValidateQuery(query, params);\n\t\treturn rs;\n\t\t\n\t\t\n\t}\n\tpublic void closeDb(){\n\t\twrapper.closeConnection();\n\t}\n\t\n}\n", "package com.datformers.servlet;\n\nimport java.io.IOException;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\n\nimport com.datformers.database.OracleDBWrapper;\nimport com.datformers.utils.DatabaseUtil;\n\npublic class HeatMapServlet extends HttpServlet {\n\tprivate OracleDBWrapper dbWrapper = new OracleDBWrapper(DatabaseUtil.getURL(DatabaseUtil.IP), DatabaseUtil.UERNAME,DatabaseUtil.PASSWORD);\t\n\t@Override\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response) {\n\t\t//System.out.println(\"SERVLET GOT CALL\"+request.getPathInfo());\n\t\t\n\t\tString keys[] = {\"latitude\",\"longitude\",\"name\",\"check_in_info\",\"points1\"};\n\t\tif(request.getPathInfo()!=null && request.getPathInfo().contains(\"points1\")) {\n\t\t\t//Connect to database\n\t\t\tString city = request.getParameter(\"city\");\n\t\t\tString category = request.getParameter(\"category\");\n\t\t\t//System.out.println(\"Got request for: \"+city+\" and category: \"+category);\n\t\t\t//System.out.println(city + \":\");\n\t\t\tString queryString = \"select business.latitude,business.longitude,business.name,c.check_in_info \"\n\t\t\t\t\t+ \"from business \"\n\t\t\t\t\t+ \"inner join categories \"\n\t\t\t\t\t+ \"on categories.bid = business.bid \"\n\t\t\t\t\t+ \"inner join checkin c \"\n\t\t\t\t\t+ \"on c.bid = business.bid \"\n\t\t\t\t\t+ \"where business.city='\" + city \n\t\t\t\t\t+ \"' and categories.category='\"+category +\"'\"\n\t\t\t\t\t+\"order by c.check_in_info DESC\";\n\t\t\t\n\t\t\tResultSet set = dbWrapper.executeQuery(queryString);\n\t\t\tif(set==null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t//Create response\n\t\t\tJSONArray array = new JSONArray();\n\t\t\tint count = 0;\n\t\t\ttry {\n\t\t\t\twhile(set.next()) {\n\t\t\t\t\tcount++;\n\t\t\t\t\tJSONObject obj = new JSONObject();\n\t\t\t\t\tobj.put(keys[0], set.getDouble(keys[0]));\n\t\t\t\t\tobj.put(keys[1], set.getDouble(keys[1]));\n\t\t\t\t\tobj.put(keys[3],  set.getInt(keys[3]));\n\t\t\t\t\tobj.put(keys[2],  set.getString(keys[2]));\n\t\t\t\t\t\t\t\n\t\t\t\t\tarray.add(obj);\n\t\t\t\t}\n\t\t\t\tJSONObject resultObject = new JSONObject();\n\t\t\t\tresultObject.put(\"source\", \"We got from database\");\n\t\t\t\tresultObject.put(\"city\", city);\n\t\t\t\tresultObject.put(\"category\", category);\n\t\t\t\tresultObject.put(\"points\", array);\n\t\t\t\tresponse.setContentType(\"application/json\");\n\t\t\t\t//System.out.println(\"JSON Object\" + resultObject);\n\t\t\t\tresponse.getWriter().println(resultObject.toString());\n\t\t\t} catch (SQLException | IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tSystem.out.println(\"Heat map Servlet: \"+e.getMessage());\n\t\t\t}\n\t\t} else if(request.getPathInfo()!=null && request.getPathInfo().contains(\"points\")) {\n\t\t\tdouble latitude[] = {40.35762,40.391255,40.4704573375885,40.4285874,40.492067,40.499398,40.487671,40.495483,40.459082,40.4499962,40.463717,40.4882149,40.450249,40.467794,40.462105,40.457881,40.458577,40.458335,40.4852511,40.4582511,40.4653904,40.458703,40.4657572,40.457598,40.457271,40.4606263,40.464176,40.485645,40.474884,40.459747,40.4583902,40.4579265,40.4575612,40.4582381,40.458477,40.4638365,40.4584723,40.4592437,40.4617424,40.4605003,40.475405,40.4601614,40.4613612,40.4605159,40.464615,40.463935,40.457589,40.4641113,40.4582251,40.4573589,40.4585106474725,40.460997,40.459676,40.458522,40.4572607,40.4538201,40.458138,40.464485,40.4572935,40.4502135,40.4472949,40.4481991,40.4496169180659,40.447942,40.447942,40.4574605383472,40.457835,40.4484869,40.4148896,40.4407497519697,40.4115087,40.415053,40.4147064,40.4216159,40.4218925,40.3668,40.3926169,40.3923844,40.393115,40.391732,40.388311,40.39261,40.3923831,40.387167,40.4531335,40.4534167,40.455167,40.4541341,40.4535039,40.4521309,40.4959456,40.4489884,40.455833,40.4621686,40.455167,40.4643755,40.4457075,40.4435041,40.4546428,40.4566455,40.4566092,40.4566994,40.4509987,40.4542747,40.454859,40.4534984,40.4543344,40.455929,40.4531769,40.4480678,40.4527029402106,40.4535915,40.456259,40.4460204,40.4534946,40.4481509,40.4480946,40.464958,40.4484039,40.4730851446399,40.4846476,40.4702876,40.4812123,40.4851129,40.4810824,40.489973,40.4215177,40.3918758,40.3959923,40.3950481,40.3943248,40.3949331,40.3953119,40.409199,40.3996765,40.3992789,40.3971675,40.409125,40.394911,40.388562,40.38892,40.3953565,40.3942631,40.3954709,40.420335,40.412659,40.4025781,40.3885545,40.401054,40.395871,40.3958828,40.443213,40.390935,40.422068,40.3897336,40.397846,40.3959206,40.3966306,40.396132,40.388395,40.420335,40.420335,40.414716,40.409944,40.3886105,40.3886666};\n\t\t\tdouble longitude[] = {-80.05998,-80.073426,-80.0889587402344,-79.9865459,-80.06235,-80.07249,-80.055464,-80.065652,-80.077006,-80.0575565,-79.931884,-79.920642,-79.9145,-79.926611,-79.922481,-79.924269,-79.921053,-79.924717,-79.9259794,-79.9251169,-79.9229971,-79.922447,-79.9148356,-79.9100009,-79.925517,-79.9238313,-79.9252199,-79.926487,-79.918862,-79.9185679,-79.9255146,-79.9180322,-79.9250618,-79.9251176,-79.921901,-79.9316767,-79.9187095,-79.9313671,-79.9251969,-79.9256896,-79.919627,-79.9274944,-79.9259052,-79.925241,-79.922397,-79.933126,-79.9254969,-79.9250911,-79.9251182,-79.9251969,-79.928830198608,-79.928355,-79.923615,-79.925436,-79.9336632,-79.9211464,-79.924797,-79.935388,-79.9252056,-79.9143225,-79.90508,-79.8954753,-79.898855609787,-79.895957,-79.895957,-79.9084721005249,-79.9275276,-79.9012971,-79.987783,-79.9996304512024,-79.9558863,-79.987206,-79.9877685,-79.9934656,-79.992815,-79.981359,-79.9866014,-79.9866275,-79.986911,-79.98718,-79.996225,-79.9968169,-79.9972486,-79.98224,-80.0013672,-79.9997426,-79.999815,-79.9981189,-79.9992711,-79.9981452,-79.9606482,-80.0088714,-80.006512,-80.0190648,-79.994957,-79.9821671,-80.018213,-79.9495881,-79.9907425,-80.0070383,-80.0015054,-80.0105349,-80.0009426,-80.0005142,-79.999162,-80.0012052,-80.0126074,-80.0065429,-80.001199,-80.0042395,-80.0066578388214,-80.0008071,-80.014446,-80.0153356,-79.9993338,-80.0040779,-80.0042488,-79.983936,-80.010841,-79.9621242834648,-80.0354937,-80.0302515,-80.0414427,-80.0416964,-80.0414027,-80.018177,-80.0297492,-80.037826,-80.0350352,-80.034704,-80.0464255,-80.0342686,-80.0343,-80.031761,-80.0434133,-80.0445647,-80.0294805,-80.024957,-80.0339862,-80.049448,-80.049921,-80.0345551,-80.0352133,-80.0347424,-80.030114,-80.030322,-80.041926,-80.0500275,-80.0433063,-80.033585,-80.0466445,-79.9534393,-80.039142,-80.029239,-80.0409102,-80.036197,-80.0348023,-80.0357966,-80.033232,-80.049821,-80.030114,-80.030114,-80.03063,-80.024985,-80.0499034,-80.049779};\n\t\t\tString city = request.getParameter(\"city\");\n\t\t\tString category = request.getParameter(\"category\");\n\t\t\t//System.out.println(\"Got request for: \"+city);\n\t\t\tJSONArray array = new JSONArray();\n\t\t\tfor(int i=0; i<latitude.length; i++) {\n\t\t\t\tJSONObject obj = new JSONObject();\n\t\t\t\tobj.put(keys[0], latitude[i]);\n\t\t\t\tobj.put(keys[1], longitude[i]);\n\t\t\t\tarray.add(obj);\n\t\t\t}\n\t\t\tJSONObject resultObject = new JSONObject();\n\t\t\tresultObject.put(\"city\", city);\n\t\t\tresultObject.put(\"points\", array);\n\t\t\tresultObject.put(\"category\", category);\n\t\t\tresponse.setContentType(\"application/json\");\n\t\t\ttry {\n\t\t\t\tresponse.getWriter().println(resultObject.toString());\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tresponse.setContentType(\"text/plain\");\n\t\t\t\tresponse.getWriter().println(\"This is the response\");\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\t@Override\n\tpublic void destroy() {\n\t\tdbWrapper.deregister();\n\t}\n\t@Override \n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response) {\n\t\t\n\t}\n\n}\n", "package com.datformers.servlet;\n\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.sql.ResultSet;\nimport java.util.ArrayList;\nimport java.util.Formatter;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class LoginServlet extends HttpServlet {\n\n\t@Override\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response) {\n\t\tSystem.out.println(\"Servlet called\");\n\t\tPrintWriter outWriter = null;\n\t\tresponse.setContentType(\"text/html\");\n\t\tSystem.out.println(\"Content type set\");\n\t\ttry {\n\t\t\toutWriter = response.getWriter();\n\t\t\tif (outWriter != null)\n\t\t\t\tSystem.out.println(\"Got writer\");\n\t\t\toutWriter\n\t\t\t\t\t.println(\"<html><body><p>Hi and welcome to our very first servlet</p></body></html>\");\n\t\t\toutWriter.flush();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response) {\n\t\ttry {\n\t\t\tif (request.getParameter(\"login\") != null) {\n\n\t\t\t\tString username = request.getParameter(\"username\");\n\t\t\t\tString password = request.getParameter(\"password\");\n\t\t\t\tString isValidPwd = \"\";\n\t\t\t\tresponse.setContentType(\"text/html\");\n\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\t\n\t\t\t\tif (username.isEmpty() || password.isEmpty()) {\n\t\t\t\t\tout.println(\"<html><head><body><p>A mandatory field is empty!<p></body></head>\");\n\t\t\t\t\tSystem.out.println(\"EMPTY\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tAddAppUser tmp = null;\n\t\t\t\tString query = \"Select password from APPUSER where email=?\";\n//\t\t\t\t\t\t+ username + \"'\";\n\t\t\t\t\n\t\t\t\tArrayList<String> params=new ArrayList<String>();\n\t\t\t\tparams.add(username);\n\t\t\t\ttmp = new AddAppUser(query,params);\n\t\t\t\tResultSet res = tmp.addUser();\n\t\t\t\t\n\t\t\t\tif (res.next()) {\n\t\t\t\t\tisValidPwd = res.getString(\"password\");\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpassword=encryptPassword(password);\n\t\t\t\t\n\t\t\t\tif (password.equals(isValidPwd)) {\n\t\t\t\t\t//out.println(\"<html><head><body><h3>Login Success!!</h3></body></head>\");\n\t\t\t\t\tresponse.sendRedirect(\"main.html\");\n\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Login Failed!!\");\n\t\t\t\t\tout.println(\"<html><head><body><h3>Invalid credentials!!</h3></body></head>\");\n\t\t\t\t\tout.flush();\t\n\t\t\t\t\ttmp.closeDb();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttmp.closeDb();\n\t\t\t\n\n\t\t\t}\n\t\t\tif (request.getParameter(\"register\") != null) {\n\t\t\t\tresponse.sendRedirect(\"register.html\");\n\n\t\t\t}\n\n\t\t\tif (request.getParameter(\"signup\") != null) {\n\t\t\t\t// boolean ifUserAlreadyRegisterd = true;\n\n\t\t\t\tresponse.setContentType(\"text/html\");\n\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\tString first = request.getParameter(\"firstname\");\n\t\t\t\tString last = request.getParameter(\"lastname\");\n\t\t\t\tString pwd = request.getParameter(\"password\");\n\t\t\t\tString encrypt=encryptPassword(pwd);\n\t\t\t\tString email = request.getParameter(\"email\");\n\t\t\t\tString isFbLogin = \"N\";\n\n\t\t\t\tif (first.isEmpty() || last.isEmpty() || pwd.isEmpty()\n\t\t\t\t\t\t|| email.isEmpty()) {\n\n\t\t\t\t\tout = response.getWriter();\n\t\t\t\t\tout.println(\"<html><head><body><p>A mandatory field is empty!<p></body></head>\");\n\t\t\t\t\t// System.out.println(\"<html><head><body><p>A mandatory field is empty!<p></body></head>\");\n\n\t\t\t\t} else {\n\t\t\t\t\tString query = \"SELECT count(*) as cnt FROM APPUSER WHERE email=?\";\n//\t\t\t\t\t\t\t+ email + \"'\";\n\t\t\t\t\t// System.out.println(\"Signup query\" + query);\n\t\t\t\t\tArrayList<String> params=new ArrayList<String>();\n\t\t\t\t\tparams.add(email);\n\t\t\t\t\tAddAppUser add = new AddAppUser(query,params);\n\t\t\t\t\tResultSet res = add.addUser();\n\t\t\t\t\tint count = 0;\n\t\t\t\t\tif (res.next()) {\n\t\t\t\t\t\tcount = res.getInt(\"cnt\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tadd.closeDb();\n\t\t\t\t\t\n\t\t\t\t\tif (count > 0) {\n\t\t\t\t\t\t// System.out.println(\"Already Registered\");\n\t\t\t\t\t\tout.println(\"<html><head><body><p>This email id is already registered!!</p></body></head>\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// System.out.println(\"Registering!\");\n\t\t\t\t\t\tparams=new ArrayList<String>();\n\t\t\t\t\t\tparams.add(email);\n\t\t\t\t\t\tString query1 = \"Insert into APPUSER(USER_ID,EMAIL,PASSWORD,FIRST_NAME,LAST_NAME,IS_FACEBOOK_LOGIN)\"\n\t\t\t\t\t\t\t\t+ \" values (usr_id.NEXTVAL,?\"\n//\t\t\t\t\t\t\t\t+ email\n\t\t\t\t\t\t\t\t+ \",'\"\n\t\t\t\t\t\t\t\t+ encrypt\n\t\t\t\t\t\t\t\t+ \"','\"\n\t\t\t\t\t\t\t\t+ first\n\t\t\t\t\t\t\t\t+ \"','\"\n\t\t\t\t\t\t\t\t+ last\n\t\t\t\t\t\t\t\t+ \"','\"\n\t\t\t\t\t\t\t\t+ isFbLogin + \"')\";\n\t\t\t\t\t\t// System.out.println(query1);\n\t\t\t\t\t\tAddAppUser tmp = new AddAppUser(query1,params);\n\t\t\t\t\t\ttmp.addUser();\n\t\t\t\t\t\ttmp.closeDb();\n\t\t\t\t\t\tresponse.sendRedirect(\"main.html\");\n\t\t\t\t\t\t//out.println(\"<html><head><body><h3>Registration Successful!</h3></body></head>\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\n\t\t}\n\t}\n\tprivate static String encryptPassword(String password)\n\t{\n\t    String sha1 = \"\";\n\t    try\n\t    {\n\t        MessageDigest crypt = MessageDigest.getInstance(\"SHA-1\");\n\t        crypt.reset();\n\t        crypt.update(password.getBytes(\"UTF-8\"));\n\t        sha1 = byteToHex(crypt.digest());\n\t    }\n\t    catch(NoSuchAlgorithmException e)\n\t    {\n\t        e.printStackTrace();\n\t    }\n\t    catch(UnsupportedEncodingException e)\n\t    {\n\t        e.printStackTrace();\n\t    }\n\t    return sha1;\n\t}\n\n\tprivate static String byteToHex(final byte[] hash)\n\t{\n\t    Formatter formatter = new Formatter();\n\t    for (byte b : hash)\n\t    {\n\t        formatter.format(\"%02x\", b);\n\t    }\n\t    String result = formatter.toString();\n\t    formatter.close();\n\t    return result;\n\t}\n}\n"], "filenames": ["HeatMapServer/src/com/datformers/database/OracleDBWrapper.java", "HeatMapServer/src/com/datformers/servlet/AddAppUser.java", "HeatMapServer/src/com/datformers/servlet/HeatMapServlet.java", "HeatMapServer/src/com/datformers/servlet/LoginServlet.java"], "buggy_code_start_loc": [3, 8, 39, 7], "buggy_code_end_loc": [40, 29, 40, 134], "fixing_code_start_loc": [4, 9, 39, 8], "fixing_code_end_loc": [62, 32, 40, 141], "type": "CWE-89", "message": "A vulnerability has been found in ssn2013 cis450Project and classified as critical. This vulnerability affects the function addUser of the file HeatMapServer/src/com/datformers/servlet/AddAppUser.java. The manipulation leads to sql injection. The name of the patch is 39b495011437a105c7670e17e071f99195b4922e. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218380.", "other": {"cve": {"id": "CVE-2015-10020", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-14T21:15:09.207", "lastModified": "2023-01-25T16:37:48.967", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in ssn2013 cis450Project and classified as critical. This vulnerability affects the function addUser of the file HeatMapServer/src/com/datformers/servlet/AddAppUser.java. The manipulation leads to sql injection. The name of the patch is 39b495011437a105c7670e17e071f99195b4922e. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218380."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cis450project_project:cis450project:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-04-29", "matchCriteriaId": "37AF7882-481C-40D2-A0E8-5BD789E47032"}]}]}], "references": [{"url": "https://github.com/ssn2013/cis450Project/commit/39b495011437a105c7670e17e071f99195b4922e", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218380", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218380", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ssn2013/cis450Project/commit/39b495011437a105c7670e17e071f99195b4922e"}}