{"buggy_code": ["<?php\nnamespace SCart\\Core\\Front\\Controllers;\n\nuse App\\Http\\Controllers\\RootFrontController;\nuse SCart\\Core\\Front\\Models\\ShopEmailTemplate;\nuse SCart\\Core\\Front\\Models\\ShopAttributeGroup;\nuse SCart\\Core\\Front\\Models\\ShopCountry;\nuse SCart\\Core\\Front\\Models\\ShopOrder;\nuse SCart\\Core\\Front\\Models\\ShopOrderTotal;\nuse SCart\\Core\\Front\\Models\\ShopProduct;\nuse SCart\\Core\\Front\\Models\\ShopCustomer;\nuse SCart\\Core\\Front\\Models\\ShopCustomerAddress;\nuse Cart;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass ShopCartController extends RootFrontController\n{\n    const ORDER_STATUS_NEW = 1;\n    const PAYMENT_UNPAID = 1;\n    const SHIPPING_NOTSEND = 1;\n\n    public function __construct()\n    {\n        parent::__construct();\n\n    }\n    /**\n     * Get list cart: screen get cart\n     * @return [type] [description]\n     */\n    public function getCart()\n    {\n        session()->forget('paymentMethod'); //destroy paymentMethod\n        session()->forget('shippingMethod'); //destroy shippingMethod\n        session()->forget('orderID'); //destroy orderID\n        \n        //Shipping\n        $moduleShipping = sc_get_plugin_installed('shipping');\n        $sourcesShipping = sc_get_all_plugin('shipping');\n        $shippingMethod = array();\n        foreach ($moduleShipping as $module) {\n            if (array_key_exists($module['key'], $sourcesShipping)) {\n                $moduleClass = sc_get_class_plugin_config('shipping', $module['key']);\n                $shippingMethod[$module['key']] = (new $moduleClass)->getData();\n            }\n        }\n\n        //Payment\n        $modulePayment = sc_get_plugin_installed('payment');\n        $sourcesPayment = sc_get_all_plugin('payment');\n        $paymentMethod = array();\n        foreach ($modulePayment as $module) {\n            if (array_key_exists($module['key'], $sourcesPayment)) {\n                $moduleClass = $sourcesPayment[$module['key']].'\\AppConfig';\n                $paymentMethod[$module['key']] = (new $moduleClass)->getData();\n            }\n        }        \n\n        //Total\n        $moduleTotal = sc_get_plugin_installed('total');\n        $sourcesTotal = sc_get_all_plugin('total');\n        $totalMethod = array();\n        foreach ($moduleTotal as $module) {\n            if (array_key_exists($module['key'], $sourcesTotal)) {\n                $moduleClass = $sourcesTotal[$module['key']].'\\AppConfig';\n                $totalMethod[$module['key']] = (new $moduleClass)->getData();\n            }\n        } \n\n        // Shipping address\n        $customer = auth()->user();\n        if ($customer) {\n            $address = $customer->getAddressDefault();\n            if ($address) {\n                $addressDefaul = [\n                    'first_name'      => $address->first_name,\n                    'last_name'       => $address->last_name,\n                    'first_name_kana' => $address->first_name_kana,\n                    'last_name_kana'  => $address->last_name_kana,\n                    'email'           => $customer->email,\n                    'address1'        => $address->address1,\n                    'address2'        => $address->address2,\n                    'postcode'        => $address->postcode,\n                    'company'         => $customer->company,\n                    'country'         => $address->country,\n                    'phone'           => $address->phone,\n                    'comment'         => '',\n                ];\n            } else {\n                $addressDefaul = [\n                    'first_name'      => $customer->first_name,\n                    'last_name'       => $customer->last_name,\n                    'first_name_kana' => $customer->first_name_kana,\n                    'last_name_kana'  => $customer->last_name_kana,\n                    'email'           => $customer->email,\n                    'address1'        => $customer->address1,\n                    'address2'        => $customer->address2,\n                    'postcode'        => $customer->postcode,\n                    'company'         => $customer->company,\n                    'country'         => $customer->country,\n                    'phone'           => $customer->phone,\n                    'comment'         => '',\n                ];\n            }\n\n        } else {\n            $addressDefaul = [\n                'first_name'      => '',\n                'last_name'       => '',\n                'first_name_kana' => '',\n                'last_name_kana'  => '',\n                'postcode'        => '',\n                'company'         => '',\n                'email'           => '',\n                'address1'        => '',\n                'address2'        => '',\n                'country'         => '',\n                'phone'           => '',\n                'comment'         => '',\n            ];\n        }\n        $shippingAddress = session('shippingAddress') ?? $addressDefaul;\n        $objects = ShopOrderTotal::getObjectOrderTotal();\n        $viewCaptcha = '';\n        if(sc_captcha_method() && in_array('checkout', sc_captcha_page())) {\n            if (view()->exists(sc_captcha_method()->pathPlugin.'::render')){\n                $dataView = [\n                    'titleButton' => trans('cart.checkout'),\n                    'idForm' => 'form-process',\n                    'idButtonForm' => 'button-form-process',\n                ];\n                $viewCaptcha = view(sc_captcha_method()->pathPlugin.'::render', $dataView)->render();\n            }\n        }\n\n        sc_check_view($this->templatePath . '.screen.shop_cart');\n        return view(\n            $this->templatePath . '.screen.shop_cart',\n            [\n                'title'           => trans('front.cart_title'),\n                'description'     => '',\n                'keyword'         => '',\n                'cart'            => Cart::instance('default')->content(),\n                'shippingMethod'  => $shippingMethod,\n                'paymentMethod'   => $paymentMethod,\n                'totalMethod'     => $totalMethod,\n                'addressList'     => $customer ? $customer->addresses : [],\n                'dataTotal'       => ShopOrderTotal::processDataTotal($objects),\n                'shippingAddress' => $shippingAddress,\n                'countries'       => ShopCountry::getCodeAll(),\n                'attributesGroup' => ShopAttributeGroup::pluck('name', 'id')->all(),\n                'viewCaptcha'     => $viewCaptcha,\n                'layout_page'     => 'shop_cart',\n            ]\n        );\n    }\n\n    /**\n     * Process Cart, prepare for the checkout screen\n     */\n    public function processCart()\n    {\n        $customer = auth()->user();\n        if (Cart::instance('default')->count() == 0) {\n            return redirect(sc_route('cart'));\n        }\n\n        //Not allow for guest\n        if (!sc_config('shop_allow_guest') && !$customer) {\n            return redirect(sc_route('login'));\n        }\n\n        $data = request()->all();\n\n        $validate = [\n            'first_name'     => 'required|max:100',\n            'email'          => 'required|string|email|max:255',\n        ];\n        //check shipping\n        if (!sc_config('shipping_off')) {\n            $validate['shippingMethod'] = 'required';\n        }\n        //check payment\n        if (!sc_config('payment_off')) {\n            $validate['paymentMethod'] = 'required';\n        }\n\n        if (sc_config('customer_lastname')) {\n            if (sc_config('customer_lastname_required')) {\n                $validate['last_name'] = 'required|string|max:100';\n            } else {\n                $validate['last_name'] = 'nullable|string|max:100';\n            }\n        }\n        if (sc_config('customer_address1')) {\n            if (sc_config('customer_address1_required')) {\n                $validate['address1'] = 'required|string|max:100';\n            } else {\n                $validate['address1'] = 'nullable|string|max:100';\n            }\n        }\n\n        if (sc_config('customer_address2')) {\n            if (sc_config('customer_address2_required')) {\n                $validate['address2'] = 'required|string|max:100';\n            } else {\n                $validate['address2'] = 'nullable|string|max:100';\n            }\n        }\n        if (sc_config('customer_phone')) {\n            if (sc_config('customer_phone_required')) {\n                $validate['phone'] = 'required|regex:/^0[^0][0-9\\-]{7,13}$/';\n            } else {\n                $validate['phone'] = 'nullable|regex:/^0[^0][0-9\\-]{7,13}$/';\n            }\n        }\n        if (sc_config('customer_country')) {\n            $arraycountry = (new ShopCountry)->pluck('code')->toArray();\n            if (sc_config('customer_country_required')) {\n                $validate['country'] = 'required|string|min:2|in:'. implode(',', $arraycountry);\n            } else {\n                $validate['country'] = 'nullable|string|min:2|in:'. implode(',', $arraycountry);\n            }\n        }\n\n        if (sc_config('customer_postcode')) {\n            if (sc_config('customer_postcode_required')) {\n                $validate['postcode'] = 'required|min:5';\n            } else {\n                $validate['postcode'] = 'nullable|min:5';\n            }\n        }\n        if (sc_config('customer_company')) {\n            if (sc_config('customer_company_required')) {\n                $validate['company'] = 'required|string|max:100';\n            } else {\n                $validate['company'] = 'nullable|string|max:100';\n            }\n        } \n\n        if (sc_config('customer_name_kana')) {\n            if (sc_config('customer_name_kana_required')) {\n                $validate['first_name_kana'] = 'required|string|max:100';\n                $validate['last_name_kana'] = 'required|string|max:100';\n            } else {\n                $validate['first_name_kana'] = 'nullable|string|max:100';\n                $validate['last_name_kana'] = 'nullable|string|max:100';\n            }\n        }\n\n        $messages = [\n            'last_name.required'      => trans('validation.required',['attribute'=> trans('cart.last_name')]),\n            'first_name.required'     => trans('validation.required',['attribute'=> trans('cart.first_name')]),\n            'email.required'          => trans('validation.required',['attribute'=> trans('cart.email')]),\n            'address1.required'       => trans('validation.required',['attribute'=> trans('cart.address1')]),\n            'address2.required'       => trans('validation.required',['attribute'=> trans('cart.address2')]),\n            'phone.required'          => trans('validation.required',['attribute'=> trans('cart.phone')]),\n            'country.required'        => trans('validation.required',['attribute'=> trans('cart.country')]),\n            'postcode.required'       => trans('validation.required',['attribute'=> trans('cart.postcode')]),\n            'company.required'        => trans('validation.required',['attribute'=> trans('cart.company')]),\n            'sex.required'            => trans('validation.required',['attribute'=> trans('cart.sex')]),\n            'birthday.required'       => trans('validation.required',['attribute'=> trans('cart.birthday')]),\n            'email.email'             => trans('validation.email',['attribute'=> trans('cart.email')]),\n            'phone.regex'             => trans('validation.regex',['attribute'=> trans('cart.phone')]),\n            'postcode.min'            => trans('validation.min',['attribute'=> trans('cart.postcode')]),\n            'country.min'             => trans('validation.min',['attribute'=> trans('cart.country')]),\n            'first_name.max'          => trans('validation.max',['attribute'=> trans('cart.first_name')]),\n            'email.max'               => trans('validation.max',['attribute'=> trans('cart.email')]),\n            'address1.max'            => trans('validation.max',['attribute'=> trans('cart.address1')]),\n            'address2.max'            => trans('validation.max',['attribute'=> trans('cart.address2')]),\n            'last_name.max'           => trans('validation.max',['attribute'=> trans('cart.last_name')]),\n            'birthday.date'           => trans('validation.date',['attribute'=> trans('cart.birthday')]),\n            'birthday.date_format'    => trans('validation.date_format',['attribute'=> trans('cart.birthday')]),\n            'shippingMethod.required' => trans('cart.validation.shippingMethod_required'),\n            'paymentMethod.required'  => trans('cart.validation.paymentMethod_required'),\n        ];\n\n        if(sc_captcha_method() && in_array('checkout', sc_captcha_page())) {\n            $data['captcha_field'] = $data[sc_captcha_method()->getField()] ?? '';\n            $validate['captcha_field'] = ['required', 'string', new \\SCart\\Core\\Rules\\CaptchaRule];\n        }\n\n\n        $v = Validator::make(\n            $data, \n            $validate, \n            $messages\n        );\n        if ($v->fails()) {\n            return redirect()->back()\n                ->withInput()\n                ->withErrors($v->errors());\n        }\n\n        //Set session shippingMethod\n        if (!sc_config('shipping_off')) {\n            session(['shippingMethod' => request('shippingMethod')]);\n        }\n\n        //Set session paymentMethod\n        if (!sc_config('payment_off')) {\n            session(['paymentMethod' => request('paymentMethod')]);\n        }\n\n        //Set session address process\n        session(['address_process' => request('address_process')]);\n        //Set session shippingAddressshippingAddress\n        session(\n            [\n                'shippingAddress' => [\n                    'first_name'      => request('first_name'),\n                    'last_name'       => request('last_name'),\n                    'first_name_kana' => request('first_name_kana'),\n                    'last_name_kana'  => request('last_name_kana'),\n                    'email'           => request('email'),\n                    'country'         => request('country'),\n                    'address1'        => request('address1'),\n                    'address2'        => request('address2'),\n                    'phone'           => request('phone'),\n                    'postcode'        => request('postcode'),\n                    'company'         => request('company'),\n                    'comment'         => request('comment'),\n                ],\n            ]\n        );\n\n        //Check minimum\n        $arrCheckQty = [];\n        $cart = Cart::instance('default')->content()->toArray();\n        foreach ($cart as $key => $row) {\n            $arrCheckQty[$row['id']] = ($arrCheckQty[$row['id']] ?? 0) + $row['qty'];\n        }\n        $arrProductMinimum = ShopProduct::whereIn('id', array_keys($arrCheckQty))->pluck('minimum', 'id')->all();\n        $arrErrorQty = [];\n        foreach ($arrProductMinimum as $pId => $min) {\n            if ($arrCheckQty[$pId] < $min) {\n                $arrErrorQty[$pId] = $min;\n            }\n        }\n        if (count($arrErrorQty)) {\n            return redirect(sc_route('cart'))->with('arrErrorQty', $arrErrorQty);\n        }\n        //End check minimum\n\n        return redirect(sc_route('checkout'));\n    }\n\n    /**\n     * Checkout screen\n     * @return [view]\n     */\n    public function getCheckout()\n    {\n        //Check shipping address\n        if (\n            !session('shippingAddress')\n        ) {\n            return redirect(sc_route('cart'));\n        }\n        $shippingAddress = session('shippingAddress');\n\n\n        //Shipping method\n        if (sc_config('shipping_off')) {\n            $shippingMethodData = null;\n        } else {\n            if (!session('shippingMethod')) {\n                return redirect(sc_route('cart'));\n            }\n            $shippingMethod = session('shippingMethod');\n            $classShippingMethod = sc_get_class_plugin_config('Shipping', $shippingMethod);\n            $shippingMethodData = (new $classShippingMethod)->getData();\n        }\n\n        //Payment method\n        if (sc_config('payment_off')) {\n            $paymentMethodData = null;\n        } else {\n            if (!session('paymentMethod')) {\n                return redirect(sc_route('cart'));\n            }\n            $paymentMethod = session('paymentMethod');\n            $classPaymentMethod = sc_get_class_plugin_config('Payment', $paymentMethod);\n            $paymentMethodData = (new $classPaymentMethod)->getData();\n        }\n\n\n        $objects = ShopOrderTotal::getObjectOrderTotal();\n        $dataTotal = ShopOrderTotal::processDataTotal($objects);\n\n        //Set session dataTotal\n        session(['dataTotal' => $dataTotal]);\n\n        sc_check_view($this->templatePath . '.screen.shop_checkout');\n        return view(\n            $this->templatePath . '.screen.shop_checkout',\n            [\n                'title'              => trans('front.checkout_title'),\n                'cart'               => Cart::instance('default')->content(),\n                'dataTotal'          => $dataTotal,\n                'paymentMethodData'  => $paymentMethodData,\n                'shippingMethodData' => $shippingMethodData,\n                'shippingAddress'    => $shippingAddress,\n                'attributesGroup'    => ShopAttributeGroup::getListAll(),\n                'layout_page'        => 'shop_cart',\n            ]\n        );\n    }\n\n    /**\n     * Add to cart by method post, always use in the product page detail\n     * \n     * @return [redirect]\n     */\n    public function addToCart()\n    {\n        $data      = request()->all();\n        $productId = $data['product_id'];\n        $qty       = $data['qty'] ?? 0;\n        $storeId   = $data['storeId'] ?? config('app.storeId');\n\n        //Process attribute price\n        $formAttr = $data['form_attr'] ?? null;\n        $optionPrice  = 0;\n        if ($formAttr) {\n            foreach ($formAttr as $key => $attr) {\n                $optionPrice += explode('__', $attr)[1] ??0;\n            }\n        }\n        //End addtribute price\n\n        $product = (new ShopProduct)->getDetail($productId, null, $storeId);\n\n        if (!$product) {\n            return response()->json(\n                [\n                    'error' => 1,\n                    'msg' => trans('front.notfound'),\n                ]\n            );\n        }\n        \n\n        if ($product->allowSale()) {\n            $options = array();\n            $options = $formAttr;\n            $dataCart = array(\n                'id'      => $productId,\n                'name'    => $product->name,\n                'qty'     => $qty,\n                'price'   => $product->getFinalPrice() + $optionPrice,\n                'tax'     => $product->getTaxValue(),\n                'storeId' => $storeId,\n            );\n            if ($options) {\n                $dataCart['options'] = $options;\n            }\n            Cart::instance('default')->add($dataCart);\n            return redirect(sc_route('cart'))\n                ->with(\n                    ['success' => trans('cart.success', ['instance' => 'cart'])]\n                );\n        } else {\n            return redirect(sc_route('cart'))\n                ->with(\n                    ['error' => trans('cart.dont_allow_sale')]\n                );\n        }\n\n    }\n\n    /**\n     * Create new order\n     * @return [redirect]\n     */\n    public function addOrder(Request $request)\n    {\n        $customer = auth()->user();\n        $uID = $customer->id ?? 0;\n        //if cart empty\n        if (Cart::instance('default')->count() == 0) {\n            return redirect()->route('home');\n        }\n        //Not allow for guest\n        if (!sc_config('shop_allow_guest') && !$customer) {\n            return redirect(sc_route('login'));\n        } //\n\n        $data = request()->all();\n        if (!$data) {\n            return redirect(sc_route('cart'));\n        } else {\n            $dataTotal       = session('dataTotal') ?? [];\n            $shippingAddress = session('shippingAddress') ?? [];\n            $paymentMethod   = session('paymentMethod') ?? '';\n            $shippingMethod  = session('shippingMethod') ?? '';\n            $address_process = session('address_process') ?? '';\n        }\n\n        //Process total\n        $subtotal = (new ShopOrderTotal)->sumValueTotal('subtotal', $dataTotal); //sum total\n        $tax      = (new ShopOrderTotal)->sumValueTotal('tax', $dataTotal); //sum tax\n        $shipping = (new ShopOrderTotal)->sumValueTotal('shipping', $dataTotal); //sum shipping\n        $discount = (new ShopOrderTotal)->sumValueTotal('discount', $dataTotal); //sum discount\n        $received = (new ShopOrderTotal)->sumValueTotal('received', $dataTotal); //sum received\n        $total    = (new ShopOrderTotal)->sumValueTotal('total', $dataTotal);\n        //end total\n\n        $dataOrder['customer_id']     = $uID;\n        $dataOrder['subtotal']        = $subtotal;\n        $dataOrder['shipping']        = $shipping;\n        $dataOrder['discount']        = $discount;\n        $dataOrder['received']        = $received;\n        $dataOrder['tax']             = $tax;\n        $dataOrder['payment_status']  = self::PAYMENT_UNPAID;\n        $dataOrder['shipping_status'] = self::SHIPPING_NOTSEND;\n        $dataOrder['status']          = self::ORDER_STATUS_NEW;\n        $dataOrder['currency']        = sc_currency_code();\n        $dataOrder['exchange_rate']   = sc_currency_rate();\n        $dataOrder['total']           = $total;\n        $dataOrder['balance']         = $total + $received;\n        $dataOrder['email']           = $shippingAddress['email'];\n        $dataOrder['first_name']      = $shippingAddress['first_name'];\n        $dataOrder['payment_method']  = $paymentMethod;\n        $dataOrder['shipping_method'] = $shippingMethod;\n        $dataOrder['user_agent']      = $request->header('User-Agent');\n        $dataOrder['ip']              = $request->ip();\n        $dataOrder['created_at']      = date('Y-m-d H:i:s');\n\n        if (!empty($shippingAddress['last_name'])) {\n            $dataOrder['last_name']       = $shippingAddress['last_name'];\n        }\n        if (!empty($shippingAddress['first_name_kana'])) {\n            $dataOrder['first_name_kana']       = $shippingAddress['first_name_kana'];\n        }\n        if (!empty($shippingAddress['last_name_kana'])) {\n            $dataOrder['last_name_kana']       = $shippingAddress['last_name_kana'];\n        }\n        if (!empty($shippingAddress['address1'])) {\n            $dataOrder['address1']       = $shippingAddress['address1'];\n        }\n        if (!empty($shippingAddress['address2'])) {\n            $dataOrder['address2']       = $shippingAddress['address2'];\n        }\n        if (!empty($shippingAddress['country'])) {\n            $dataOrder['country']       = $shippingAddress['country'];\n        }\n        if (!empty($shippingAddress['phone'])) {\n            $dataOrder['phone']       = $shippingAddress['phone'];\n        }\n        if (!empty($shippingAddress['postcode'])) {\n            $dataOrder['postcode']       = $shippingAddress['postcode'];\n        }\n        if (!empty($shippingAddress['company'])) {\n            $dataOrder['company']       = $shippingAddress['company'];\n        }\n        if (!empty($shippingAddress['comment'])) {\n            $dataOrder['comment']       = $shippingAddress['comment'];\n        }\n\n        $arrCartDetail = [];\n        foreach (Cart::instance('default')->content() as $cartItem) {\n            $arrDetail['product_id']  = $cartItem->id;\n            $arrDetail['name']        = $cartItem->name;\n            $arrDetail['price']       = sc_currency_value($cartItem->price);\n            $arrDetail['qty']         = $cartItem->qty;\n            $arrDetail['store_id']    = $cartItem->storeId;\n            $arrDetail['attribute']   = ($cartItem->options) ? json_encode($cartItem->options) : null;\n            $arrDetail['total_price'] = sc_currency_value($cartItem->price) * $cartItem->qty;\n            $arrCartDetail[]          = $arrDetail;\n        }\n\n        //Set session info order\n        session(['dataOrder' => $dataOrder]);\n        session(['arrCartDetail' => $arrCartDetail]);\n\n        //Create new order\n        $newOrder = (new ShopOrder)->createOrder($dataOrder, $dataTotal, $arrCartDetail);\n\n        if ($newOrder['error'] == 1) {\n            return redirect(sc_route('cart'))->with(['error' => $newOrder['msg']]);\n        }\n        //Set session orderID\n        session(['orderID' => $newOrder['orderID']]);\n\n        //Create new address\n        if ($address_process == 'new') {\n            $addressNew = [\n                'first_name'      => $shippingAddress['first_name'] ?? '',\n                'last_name'       => $shippingAddress['last_name'] ?? '',\n                'first_name_kana' => $shippingAddress['first_name_kana'] ?? '',\n                'last_name_kana'  => $shippingAddress['last_name_kana'] ?? '',\n                'postcode'        => $shippingAddress['postcode'] ?? '',\n                'address1'        => $shippingAddress['address1'] ?? '',\n                'address2'        => $shippingAddress['address2'] ?? '',\n                'country'         => $shippingAddress['country'] ?? '',\n                'phone'           => $shippingAddress['phone'] ?? '',\n            ];\n            ShopCustomer::find($uID)->addresses()->save(new ShopCustomerAddress(sc_clean($addressNew)));\n            session()->forget('address_process'); //destroy address_process\n        }\n\n        $paymentMethod = sc_get_class_plugin_controller('Payment', session('paymentMethod'));\n\n        if ($paymentMethod) {\n            // Check payment method\n            return (new $paymentMethod)->processOrder();\n        } else {\n            return (new ShopCartController)->completeOrder();\n        }\n    }\n\n    /**\n     * Add product to cart\n     * @param Request $request [description]\n     * @return [json]\n     */\n    public function addToCartAjax(Request $request)\n    {\n        if (!$request->ajax()) {\n            return redirect(sc_route('cart'));\n        }\n        $data     = request()->all();\n        $instance = $data['instance'] ?? 'default';\n        $id       = $data['id'] ?? '';\n        $storeId  = $data['storeId'] ?? config('app.storeId');\n        $cart     = Cart::instance($instance);\n\n        $product = (new ShopProduct)->getDetail($id, null, $storeId);\n        if (!$product) {\n            return response()->json(\n                [\n                    'error' => 1,\n                    'msg' => trans('front.notfound'),\n                ]\n            );\n        }\n        switch ($instance) {\n            case 'default':\n                if ($product->attributes->count() || $product->kind == SC_PRODUCT_GROUP) {\n                    //Products have attributes or kind is group,\n                    //need to select properties before adding to the cart\n                    return response()->json(\n                        [\n                            'error' => 1,\n                            'redirect' => $product->getUrl(),\n                            'msg' => '',\n                        ]\n                    );\n                }\n\n                //Check product allow for sale\n                if ($product->allowSale()) {\n                    $cart->add(\n                        array(\n                            'id'      => $id,\n                            'name'    => $product->name,\n                            'qty'     => 1,\n                            'price'   => $product->getFinalPrice(),\n                            'tax'     => $product->getTaxValue(),\n                            'storeId' => $storeId,\n                        )\n                    );\n                } else {\n                    return response()->json(\n                        [\n                            'error' => 1,\n                            'msg' => trans('cart.dont_allow_sale'),\n                        ]\n                    );\n                }\n                break;\n\n            default:\n                //Wishlist or Compare...\n                ${'arrID' . $instance} = array_keys($cart->content()->groupBy('id')->toArray());\n                if (!in_array($id, ${'arrID' . $instance})) {\n                    try {\n                        $cart->add(\n                            array(\n                                'id'      => $id,\n                                'name'    => $product->name,\n                                'qty'     => 1,\n                                'price'   => $product->getFinalPrice(),\n                                'tax'     => $product->getTaxValue(),\n                                'storeId' => $storeId,\n                            )\n                        );\n                    } catch (\\Throwable $e) {\n                        return response()->json(\n                            [\n                                'error' => 1,\n                                'msg' => $e->getMessage(),\n                            ]\n                        );\n                    }\n\n                } else {\n                    return response()->json(\n                        [\n                            'error' => 1,\n                            'msg' => trans('cart.exist', ['instance' => $instance]),\n                        ]\n                    );\n                }\n                break;\n        }\n\n        $carts = Cart::getListCart($instance);\n        return response()->json(\n            [\n                'error'      => 0,\n                'count_cart' => $carts['count'],\n                'instance'   => $instance,\n                'subtotal'   => $carts['subtotal'],\n                'msg'        => trans('cart.success', ['instance' => ($instance == 'default') ? 'cart' : $instance]),\n            ]\n        );\n\n    }\n\n    /**\n     * Update product to cart\n     * @param  Request $request [description]\n     * @return [json]\n     */\n    public function updateToCart(Request $request)\n    {\n        if (!$request->ajax()) {\n            return redirect(sc_route('cart'));\n        }\n        $data    = request()->all();\n        $id      = $data['id'] ?? '';\n        $rowId   = $data['rowId'] ?? '';\n        $new_qty = $data['new_qty'] ?? 0;\n        $storeId = $data['storeId'] ?? config('app.storeId');\n        $product = (new ShopProduct)->getDetail($id, null, $storeId);\n        \n        if (!$product) {\n            return response()->json(\n                [\n                    'error' => 1,\n                    'msg' => trans('front.notfound'),\n                ]\n            );\n        }\n        \n        if ($product->stock < $new_qty && !sc_config('product_buy_out_of_stock', $product->store_id)) {\n            return response()->json(\n                [\n                    'error' => 1,\n                    'msg' => trans('cart.over', ['item' => $product->sku]),\n                ]\n            );\n        } else {\n            Cart::instance('default')->update($rowId, ($new_qty) ? $new_qty : 0);\n            return response()->json(\n                [\n                    'error' => 0,\n                ]\n            );\n        }\n\n    }\n\n    /**\n     * Get product in wishlist\n     * @return [view]\n     */\n    public function wishlist()\n    {\n\n        $wishlist = Cart::instance('wishlist')->content();\n        sc_check_view($this->templatePath . '.screen.shop_wishlist');\n        return view(\n            $this->templatePath . '.screen.shop_wishlist',\n            array(\n                'title'       => trans('front.wishlist'),\n                'description' => '',\n                'keyword'     => '',\n                'wishlist'    => $wishlist,\n                'layout_page' => 'shop_cart',\n            )\n        );\n    }\n\n    /**\n     * Get product in compare\n     * @return [view]\n     */\n    public function compare()\n    {\n        $compare = Cart::instance('compare')->content();\n\n        sc_check_view($this->templatePath . '.screen.shop_compare');\n        return view(\n            $this->templatePath . '.screen.shop_compare',\n            array(\n                'title'       => trans('front.compare'),\n                'description' => '',\n                'keyword'     => '',\n                'compare'     => $compare,\n                'layout_page' => 'shop_cart',\n            )\n        );\n    }\n\n    /**\n     * Clear all cart\n     * @return [redirect]\n     */\n    public function clearCart($instance = 'default')\n    {\n        Cart::instance($instance)->destroy();\n        return redirect(sc_route('cart'));\n    }\n\n    /**\n     * Remove item from cart\n     * @return [redirect]\n     */\n    public function removeItem($id = null)\n    {\n        if ($id === null) {\n            return redirect(sc_route('cart'));\n        }\n\n        if (array_key_exists($id, Cart::instance('default')->content()->toArray())) {\n            Cart::instance('default')->remove($id);\n        }\n        return redirect(sc_route('cart'));\n    }\n\n    /**\n     * Remove item from wishlist\n     * @param  [string | null] $id\n     * @return [redirect]\n     */\n    public function removeItemWishlist($id = null)\n    {\n        if ($id === null) {\n            return redirect()->route('wishlist');\n        }\n\n        if (array_key_exists($id, Cart::instance('wishlist')->content()->toArray())) {\n            Cart::instance('wishlist')->remove($id);\n        }\n        return redirect()->route('wishlist');\n    }\n\n    /**\n     * Remove item from compare\n     * @param  [string | null] $id\n     * @return [redirect]\n     */\n    public function removeItemCompare($id = null)\n    {\n        if ($id === null) {\n            return redirect()->route('compare');\n        }\n\n        if (array_key_exists($id, Cart::instance('compare')->content()->toArray())) {\n            Cart::instance('compare')->remove($id);\n        }\n        return redirect()->route('compare');\n    }\n\n    /**\n     * Complete order\n     *\n     * @return [redirect]\n     */\n    public function completeOrder()\n    {\n        $orderID = session('orderID') ??0;\n        if ($orderID == 0){\n            return redirect()->route('home', ['error' => 'Error Order ID!']);\n        }\n        Cart::destroy(); // destroy cart\n\n        $paymentMethod = session('paymentMethod');\n        $shippingMethod = session('shippingMethod');\n        $totalMethod = session('totalMethod', []);\n\n        $classPaymentConfig = sc_get_class_plugin_config('Payment', $paymentMethod);\n        if (method_exists($classPaymentConfig, 'endApp')) {\n            (new $classPaymentConfig)->endApp();\n        }\n\n        $classShippingConfig = sc_get_class_plugin_config('Shipping', $shippingMethod);\n        if (method_exists($classShippingConfig, 'endApp')) {\n            (new $classShippingConfig)->endApp();\n        }\n\n        if ($totalMethod && is_array($totalMethod)) {\n            foreach ($totalMethod as $keyMethod => $valueMethod) {\n                $classTotalConfig = sc_get_class_plugin_config('Total', $keyMethod);\n                if (method_exists($classTotalConfig, 'endApp')) {\n                    (new $classTotalConfig)->endApp(['orderID' => $orderID, 'code' => $valueMethod]);\n                }\n            }\n        }\n\n        session()->forget('paymentMethod'); //destroy paymentMethod\n        session()->forget('shippingMethod'); //destroy shippingMethod\n        session()->forget('totalMethod'); //destroy totalMethod\n        session()->forget('otherMethod'); //destroy otherMethod\n        session()->forget('dataTotal'); //destroy dataTotal\n        session()->forget('dataOrder'); //destroy dataOrder\n        session()->forget('arrCartDetail'); //destroy arrCartDetail\n        session()->forget('orderID'); //destroy orderID\n\n        if (sc_config('order_success_to_admin') || sc_config('order_success_to_customer')) {\n            $data = ShopOrder::with('details')->find($orderID)->toArray();\n            $checkContent = (new ShopEmailTemplate)->where('group', 'order_success_to_admin')->where('status', 1)->first();\n            $checkContentCustomer = (new ShopEmailTemplate)->where('group', 'order_success_to_customer')->where('status', 1)->first();\n            if ($checkContent || $checkContentCustomer) {\n\n                $orderDetail = '';\n                $orderDetail .= '<tr>\n                                    <td>' . trans('email.order.sort') . '</td>\n                                    <td>' . trans('email.order.sku') . '</td>\n                                    <td>' . trans('email.order.name') . '</td>\n                                    <td>' . trans('email.order.price') . '</td>\n                                    <td>' . trans('email.order.qty') . '</td>\n                                    <td>' . trans('email.order.total') . '</td>\n                                </tr>';\n                foreach ($data['details'] as $key => $detail) {\n                    $orderDetail .= '<tr>\n                                    <td>' . ($key + 1) . '</td>\n                                    <td>' . $detail['sku'] . '</td>\n                                    <td>' . $detail['name'] . '</td>\n                                    <td>' . sc_currency_render($detail['price'], '', '', '', false) . '</td>\n                                    <td>' . number_format($detail['qty']) . '</td>\n                                    <td align=\"right\">' . sc_currency_render($detail['total_price'], '', '', '', false) . '</td>\n                                </tr>';\n                }\n                $dataFind = [\n                    '/\\{\\{\\$title\\}\\}/',\n                    '/\\{\\{\\$orderID\\}\\}/',\n                    '/\\{\\{\\$firstName\\}\\}/',\n                    '/\\{\\{\\$lastName\\}\\}/',\n                    '/\\{\\{\\$toname\\}\\}/',\n                    '/\\{\\{\\$address\\}\\}/',\n                    '/\\{\\{\\$address1\\}\\}/',\n                    '/\\{\\{\\$address2\\}\\}/',\n                    '/\\{\\{\\$email\\}\\}/',\n                    '/\\{\\{\\$phone\\}\\}/',\n                    '/\\{\\{\\$comment\\}\\}/',\n                    '/\\{\\{\\$orderDetail\\}\\}/',\n                    '/\\{\\{\\$subtotal\\}\\}/',\n                    '/\\{\\{\\$shipping\\}\\}/',\n                    '/\\{\\{\\$discount\\}\\}/',\n                    '/\\{\\{\\$total\\}\\}/',\n                ];\n                $dataReplace = [\n                    trans('order.send_mail.new_title') . '#' . $orderID,\n                    $orderID,\n                    $data['first_name'],\n                    $data['last_name'],\n                    $data['first_name'].' '.$data['last_name'],\n                    $data['address1'] . ' ' . $data['address2'],\n                    $data['address1'],\n                    $data['address2'],\n                    $data['email'],\n                    $data['phone'],\n                    $data['comment'],\n                    $orderDetail,\n                    sc_currency_render($data['subtotal'], '', '', '', false),\n                    sc_currency_render($data['shipping'], '', '', '', false),\n                    sc_currency_render($data['discount'], '', '', '', false),\n                    sc_currency_render($data['total'], '', '', '', false),\n                ];\n\n                if (sc_config('order_success_to_admin') && $checkContent) {\n                    $content = $checkContent->text;\n                    $content = preg_replace($dataFind, $dataReplace, $content);\n                    $dataView = [\n                        'content' => $content,\n                    ];\n                    $config = [\n                        'to' => sc_store('email'),\n                        'subject' => trans('order.send_mail.new_title') . '#' . $orderID,\n                    ];\n                    sc_send_mail($this->templatePath . '.mail.order_success_to_admin', $dataView, $config, []);\n                }\n                if (sc_config('order_success_to_customer') && $checkContentCustomer) {\n                    $contentCustomer = $checkContentCustomer->text;\n                    $contentCustomer = preg_replace($dataFind, $dataReplace, $contentCustomer);\n                    $dataView = [\n                        'content' => $contentCustomer,\n                    ];\n                    $config = [\n                        'to' => $data['email'],\n                        'replyTo' => sc_store('email'),\n                        'subject' => trans('order.send_mail.new_title'),\n                    ];\n                    sc_send_mail($this->templatePath . '.mail.order_success_to_customer', $dataView, $config, []);\n                }\n            }\n\n        }\n\n        return redirect()->route('order.success')->with('orderID', $orderID);\n    }\n\n    /**\n     * Page order success\n     *\n     * @return  [view]\n     */\n    public function orderSuccess(){\n\n        if (!session('orderID')) {\n            return redirect()->route('home');\n        }\n        sc_check_view($this->templatePath . '.screen.shop_order_success');\n        return view(\n            $this->templatePath . '.screen.shop_order_success',\n            [\n                'title' => trans('order.success.title'),\n                'layout_page' =>'shop_cart',\n            ]\n        );\n    }\n\n}\n", "<?php\nnamespace SCart\\Core\\Front\\Controllers;\n\nuse App\\Http\\Controllers\\RootFrontController;\nuse SCart\\Core\\Front\\Models\\ShopBanner;\nuse SCart\\Core\\Front\\Models\\ShopProduct;\nuse SCart\\Core\\Front\\Models\\ShopEmailTemplate;\nuse SCart\\Core\\Front\\Models\\ShopNews;\nuse SCart\\Core\\Front\\Models\\ShopPage;\nuse SCart\\Core\\Front\\Models\\ShopSubscribe;\nuse Illuminate\\Http\\Request;\n\nclass ShopContentController extends RootFrontController\n{\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Home page\n     * @return [view]\n     */\n    public function index()\n    {\n        sc_check_view($this->templatePath . '.screen.home');\n        return view(\n            $this->templatePath . '.screen.home',\n            array(\n                'title' => sc_store('title'),\n                'keyword' => sc_store('keyword'),\n                'description' => sc_store('description'),\n                'layout_page' => 'home',\n            )\n        );\n    }\n\n    /**\n     * Shop page\n     * @return [view]\n     */\n    public function shop()\n    {\n        $sortBy = 'sort';\n        $sortOrder = 'asc';\n        $filter_sort = request('filter_sort') ?? '';\n        $filterArr = [\n            'price_desc' => ['price', 'desc'],\n            'price_asc' => ['price', 'asc'],\n            'sort_desc' => ['sort', 'desc'],\n            'sort_asc' => ['sort', 'asc'],\n            'id_desc' => ['id', 'desc'],\n            'id_asc' => ['id', 'asc'],\n        ];\n        if (array_key_exists($filter_sort, $filterArr)) {\n            $sortBy = $filterArr[$filter_sort][0];\n            $sortOrder = $filterArr[$filter_sort][1];\n        }\n\n        $products = (new ShopProduct)\n            ->setLimit(sc_config('product_list'))\n            ->setPaginate()\n            ->setSort([$sortBy, $sortOrder])\n            ->getData();\n\n        sc_check_view($this->templatePath . '.screen.shop_home');\n        return view(\n            $this->templatePath . '.screen.shop_home',\n            array(\n                'title' => trans('front.shop'),\n                'keyword' => sc_store('keyword'),\n                'description' => sc_store('description'),\n                'products' => $products,\n                'layout_page' => 'shop_home',\n                'filter_sort' => $filter_sort,\n            )\n        );\n    }\n\n    /**\n     * search product\n     * @return [view]\n     */\n    public function search()\n    {\n        $sortBy = 'sort';\n        $sortOrder = 'asc';\n        $filter_sort = request('filter_sort') ?? '';\n        $filterArr = [\n            'price_desc' => ['price', 'desc'],\n            'price_asc' => ['price', 'asc'],\n            'sort_desc' => ['sort', 'desc'],\n            'sort_asc' => ['sort', 'asc'],\n            'id_desc' => ['id', 'desc'],\n            'id_asc' => ['id', 'asc'],\n        ];\n        if (array_key_exists($filter_sort, $filterArr)) {\n            $sortBy = $filterArr[$filter_sort][0];\n            $sortOrder = $filterArr[$filter_sort][1];\n        }\n        $keyword = request('keyword') ?? '';\n        $products = (new ShopProduct)->setKeyword($keyword)\n                    ->setSort([$sortBy, $sortOrder])\n                    ->setPaginate()\n                    ->setLimit(sc_config('product_list'))\n                    ->getData();\n\n        sc_check_view($this->templatePath . '.screen.shop_product_list');          \n        return view(\n            $this->templatePath . '.screen.shop_product_list',\n            array(\n                'title' => trans('front.search') . ': ' . $keyword,\n                'products' => $products,\n                'layout_page' => 'product_list',\n                'filter_sort' => $filter_sort,\n            )\n        );\n    }\n\n    /**\n     * Process click banner\n     *\n     * @param   [int]  $id  \n     *\n     */\n    public function clickBanner($id){\n        $banner = ShopBanner::find($id);\n        if($banner) {\n            $banner->click +=1;\n            $banner->save();\n            return redirect(url($banner->url??'/'));\n        }\n        return redirect(url('/'));\n    }\n\n    /**\n     * form contact\n     * @return [view]\n     */\n    public function getContact()\n    {\n        $viewCaptcha = '';\n        if(sc_captcha_method() && in_array('contact', sc_captcha_page())) {\n            if (view()->exists(sc_captcha_method()->pathPlugin.'::render')){\n                $dataView = [\n                    'titleButton' => trans('front.contact_form.submit'),\n                    'idForm' => 'form-process',\n                    'idButtonForm' => 'button-form-process',\n                ];\n                $viewCaptcha = view(sc_captcha_method()->pathPlugin.'::render', $dataView)->render();\n            }\n        }\n        sc_check_view($this->templatePath . '.screen.shop_contact');\n        return view(\n            $this->templatePath . '.screen.shop_contact',\n            array(\n                'title'       => trans('front.contact'),\n                'description' => '',\n                'keyword'     => '',\n                'layout_page' => 'shop_contact',\n                'og_image'    => '',\n                'viewCaptcha' => $viewCaptcha,\n            )\n        );\n    }\n\n\n    /**\n     * process contact form\n     * @param  Request $request [description]\n     * @return [mix]\n     */\n    public function postContact(Request $request)\n    {\n        $data   = $request->all();\n        $validate = [\n            'name' => 'required',\n            'title' => 'required',\n            'content' => 'required',\n            'email' => 'required|email',\n            'phone' => 'required|regex:/^0[^0][0-9\\-]{7,13}$/',\n        ];\n        $message = [\n            'name.required' => trans('validation.required', ['attribute' => trans('front.contact_form.name')]),\n            'content.required' => trans('validation.required', ['attribute' => trans('front.contact_form.content')]),\n            'title.required' => trans('validation.required', ['attribute' => trans('front.contact_form.title')]),\n            'email.required' => trans('validation.required', ['attribute' => trans('front.contact_form.email')]),\n            'email.email' => trans('validation.email', ['attribute' => trans('front.contact_form.email')]),\n            'phone.required' => trans('validation.required', ['attribute' => trans('front.contact_form.phone')]),\n            'phone.regex' => trans('validation.phone', ['attribute' => trans('front.contact_form.phone')]),\n        ];\n\n        if(sc_captcha_method() && in_array('contact', sc_captcha_page())) {\n            $data['captcha_field'] = $data[sc_captcha_method()->getField()] ?? '';\n            $validate['captcha_field'] = ['required', 'string', new \\SCart\\Core\\Rules\\CaptchaRule];\n        }\n        $validator = \\Illuminate\\Support\\Facades\\Validator::make($data, $validate, $message);\n        if ($validator->fails()) {\n            return redirect()->back()\n                        ->withErrors($validator)\n                        ->withInput();\n        }\n        //Send email\n        $data['content'] = str_replace(\"\\n\", \"<br>\", $data['content']);\n\n        if (sc_config('contact_to_admin')) {\n            $checkContent = (new ShopEmailTemplate)\n                ->where('group', 'contact_to_admin')\n                ->where('status', 1)\n                ->first();\n            if ($checkContent) {\n                $content = $checkContent->text;\n                $dataFind = [\n                    '/\\{\\{\\$title\\}\\}/',\n                    '/\\{\\{\\$name\\}\\}/',\n                    '/\\{\\{\\$email\\}\\}/',\n                    '/\\{\\{\\$phone\\}\\}/',\n                    '/\\{\\{\\$content\\}\\}/',\n                ];\n                $dataReplace = [\n                    $data['title'],\n                    $data['name'],\n                    $data['email'],\n                    $data['phone'],\n                    $data['content'],\n                ];\n                $content = preg_replace($dataFind, $dataReplace, $content);\n                $dataView = [\n                    'content' => $content,\n                ];\n\n                $config = [\n                    'to' => sc_store('email'),\n                    'replyTo' => $data['email'],\n                    'subject' => $data['title'],\n                ];\n                sc_send_mail($this->templatePath . '.mail.contact_to_admin', $dataView, $config, []);\n            }\n        }\n\n        return redirect()\n            ->route('contact')\n            ->with('success', trans('front.thank_contact'));\n    }\n\n    /**\n     * Render page\n     * @param  [string] $alias\n     */\n    public function pageDetail($alias)\n    {\n        $page = (new ShopPage)->getDetail($alias, $type = 'alias');\n        if ($page) {\n\n            sc_check_view($this->templatePath . '.screen.shop_page');\n            return view(\n                $this->templatePath . '.screen.shop_page',\n                array(\n                    'title' => $page->title,\n                    'description' => $page->description,\n                    'keyword' => $page->keyword,\n                    'page' => $page,\n                    'og_image' => asset($page->getImage()),\n                    'layout_page' => 'shop_page',\n                )\n            );\n        } else {\n            return $this->pageNotFound();\n        }\n    }\n\n    /**\n     * Render news\n     * @return [type] [description]\n     */\n    public function news()\n    {\n        $news = (new ShopNews)\n            ->setLimit(sc_config('news_list'))\n            ->setPaginate()\n            ->getData();\n\n        sc_check_view($this->templatePath . '.screen.shop_news');\n        return view(\n            $this->templatePath . '.screen.shop_news',\n            array(\n                'title' => trans('front.blog'),\n                'description' => sc_store('description'),\n                'keyword' => sc_store('keyword'),\n                'news' => $news,\n                'layout_page' => 'news_list',\n            )\n        );\n    }\n\n    /**\n     * News detail\n     *\n     * @param   [string]  $alias \n     *\n     * @return  view\n     */\n    public function newsDetail($alias)\n    {\n        $news = (new ShopNews)->getDetail($alias, $type ='alias');\n        if ($news) {\n            sc_check_view($this->templatePath . '.screen.shop_news_detail');\n            return view(\n                $this->templatePath . '.screen.shop_news_detail',\n                array(\n                    'title' => $news->title,\n                    'news' => $news,\n                    'description' => $news->description,\n                    'keyword' => $news->keyword,\n                    'og_image' => asset($news->getImage()),\n                    'layout_page' => 'news_detail',\n                )\n            );\n        } else {\n            return $this->pageNotFound();\n        }\n    }\n\n    /**\n     * email subscribe\n     * @param  Request $request\n     * @return json\n     */\n    public function emailSubscribe(Request $request)\n    {\n        $validator = $request->validate([\n            'subscribe_email' => 'required|email',\n            ], [\n            'email.required' => trans('validation.required'),\n            'email.email'    => trans('validation.email'),\n        ]);\n        $data       = $request->all();\n        $checkEmail = ShopSubscribe::where('email', $data['subscribe_email'])\n            ->first();\n        if (!$checkEmail) {\n            ShopSubscribe::insert(['email' => $data['subscribe_email']]);\n        }\n        return redirect()->back()\n            ->with(['success' => trans('subscribe.subscribe_success')]);\n    }\n\n}\n", "<?php\n#S-Cart/Core/Front/Models/ShopOrder.php\nnamespace SCart\\Core\\Front\\Models;\n\nuse SCart\\Core\\Front\\Models\\ShopOrderDetail;\nuse SCart\\Core\\Front\\Models\\ShopOrderHistory;\nuse SCart\\Core\\Front\\Models\\ShopOrderTotal;\nuse SCart\\Core\\Front\\Models\\ShopProduct;\nuse DB;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse SCart\\Core\\Front\\Models\\ModelTrait;\n\nclass ShopOrder extends Model\n{\n    use ModelTrait;\n\n    public $table = SC_DB_PREFIX.'shop_order';\n    protected $guarded = [];\n    protected $connection = SC_CONNECTION;\n\n    protected  $sc_order_profile = 0; // 0: all, 1: only user's order\n    public $sc_status = 1;\n    \n    public function details()\n    {\n        return $this->hasMany(ShopOrderDetail::class, 'order_id', 'id');\n    }\n    public function orderTotal()\n    {\n        return $this->hasMany(ShopOrderTotal::class, 'order_id', 'id');\n    }\n\n    public function customer()\n    {\n        return $this->belongsTo('SCart\\Core\\Front\\Models\\ShopCustomer', 'customer_id', 'id');\n    }\n    public function orderStatus()\n    {\n        return $this->hasOne(ShopOrderStatus::class, 'id', 'status');\n    }\n    public function paymentStatus()\n    {\n        return $this->hasOne(ShopPaymentStatus::class, 'id', 'payment_status');\n    }\n    public function history()\n    {\n        return $this->hasMany(ShopOrderHistory::class, 'order_id', 'id');\n    }\n    protected static function boot()\n    {\n        parent::boot();\n        // before delete() method call this\n        static::deleting(function ($order) {\n            foreach ($order->details as $key => $orderDetail) {\n                $item = ShopProduct::find($orderDetail->product_id);\n                //Update stock, sold\n                ShopProduct::updateStock($orderDetail->product_id, -$orderDetail->qty);\n\n            }\n            $order->details()->delete(); //delete order details\n            $order->orderTotal()->delete(); //delete order total\n            $order->history()->delete(); //delete history\n\n        });\n    }\n\n/**\n * Update status order\n * @param  [type]  $orderId\n * @param  integer $status\n * @param  string  $msg\n */\n    public function updateStatus($orderId, $status = 0, $msg = '')\n    {\n        $customer = auth()->user();\n        $uID = $customer->id ?? 0;\n        $order = $this->find($orderId);\n        if ($order) {\n            //Update status\n            $order->update(['status' => (int) $status]);\n\n            //Add history\n            $dataHistory = [\n                'order_id' => $orderId,\n                'content' => $msg,\n                'customer_id' => $uID,\n                'order_status_id' => $status,\n            ];\n            $this->addOrderHistory($dataHistory);\n        }\n    }\n\n//Scort\n    public function scopeSort($query, $sortBy = null, $sortOrder = 'desc')\n    {\n        $sortBy = $sortBy ?? 'sort';\n        return $query->orderBy($sortBy, $sortOrder);\n    }\n\n    /**\n     * Create new order\n     * @param  [array] $dataOrder\n     * @param  [array] $dataTotal\n     * @param  [array] $arrCartDetail\n     * @return [array]\n     */\n    public function createOrder($dataOrder, $dataTotal, $arrCartDetail)\n    {\n        try {\n            DB::connection(SC_CONNECTION)->beginTransaction();\n            $dataOrder = sc_clean($dataOrder);\n            $dataOrder['domain'] = url('/');\n            $uID = $dataOrder['customer_id'];\n            $currency = $dataOrder['currency'];\n            $exchange_rate = $dataOrder['exchange_rate'];\n\n            //Insert order\n            $order = ShopOrder::create($dataOrder);\n            $orderID = $order->id;\n            //End insert order\n\n            //Insert order total\n            foreach ($dataTotal as $key => $row) {\n                array_walk($row, function (&$v, $k) {\n                    return $v = sc_clean($v);\n                    }\n                );\n                $row['order_id'] = $orderID;\n                $row['created_at'] = date('Y-m-d H:i:s');\n                $dataTotal[$key] = $row;\n            }\n            ShopOrderTotal::insert($dataTotal);\n            //End order total\n\n            //Order detail\n            foreach ($arrCartDetail as $cartDetail) {\n                $pID = $cartDetail['product_id'];\n                $product = ShopProduct::find($pID);\n                //If product out of stock\n                if (!sc_config('product_buy_out_of_stock') && $product->stock < $cartDetail['qty']) {\n                    return $return = ['error' => 1, 'msg' => trans('cart.over', ['item' => $product->sku])];\n                }\n                //\n                $tax = (sc_tax_price($cartDetail['price'], $product->getTaxValue()) - $cartDetail['price']) *  $cartDetail['qty'];\n\n                $cartDetail['order_id'] = $orderID;\n                $cartDetail['currency'] = $currency;\n                $cartDetail['exchange_rate'] = $exchange_rate;\n                $cartDetail['sku'] = $product->sku;\n                $cartDetail['tax'] = $tax;\n                $cartDetail['store_id'] = $cartDetail['store_id'];\n                $this->addOrderDetail($cartDetail);\n\n                //Update stock and sold\n                ShopProduct::updateStock($pID, $cartDetail['qty']);\n            }\n            //End order detail\n\n            //Add order store - MultiStorePro\n            if (function_exists('sc_store_create_order')) {\n                sc_store_create_order($orderID);\n            }\n\n            //Add history\n            $dataHistory = [\n                'order_id' => $orderID,\n                'content' => 'New order',\n                'customer_id' => $uID,\n                'order_status_id' => $order->status,\n            ];\n            $this->addOrderHistory($dataHistory);\n\n            //Process Discount\n            $codeDiscount = session('Discount') ?? '';\n            if ($codeDiscount) {\n                if (!empty(sc_config('Discount'))) {\n                    $moduleClass = sc_get_class_plugin_controller($code = 'Total', $key = 'Discount');\n                    $returnModuleDiscount = (new $moduleClass)->apply($codeDiscount, $uID, $msg = 'Order #' . $orderID);\n                    $arrReturnModuleDiscount = json_decode($returnModuleDiscount, true);\n                    if ($arrReturnModuleDiscount['error'] == 1) {\n                        if ($arrReturnModuleDiscount['msg'] == 'error_code_not_exist') {\n                            $msg = trans('promotion.process.invalid');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_code_cant_use') {\n                            $msg = trans('promotion.process.over');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_code_expired_disabled') {\n                            $msg = trans('promotion.process.expire');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_user_used') {\n                            $msg = trans('promotion.process.used');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_uID_input') {\n                            $msg = trans('promotion.process.customer_id_invalid');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_login') {\n                            $msg = trans('promotion.process.must_login');\n                        } else {\n                            $msg = trans('promotion.process.undefined');\n                        }\n                        return redirect()->route('cart')->with(['error_discount' => $msg]);\n                    }\n                }\n            }\n            // End process Discount\n\n            DB::connection(SC_CONNECTION)->commit();\n            $return = ['error' => 0, 'orderID' => $orderID, 'msg' => \"\"];\n        } catch (\\Throwable $e) {\n            DB::connection(SC_CONNECTION)->rollBack();\n            $return = ['error' => 1, 'msg' => $e->getMessage()];\n        }\n        return $return;\n    }\n\n/**\n * Add order history\n * @param [array] $dataHistory\n */\n    public function addOrderHistory($dataHistory)\n    {\n        $dataHistory['admin_id'] = (\\Admin::user())?\\Admin::user()->id:0;\n        return ShopOrderHistory::create($dataHistory);\n    }\n\n/**\n * Add order detail\n * @param [type] $dataDetail [description]\n */\n    public function addOrderDetail($dataDetail)\n    {\n        return ShopOrderDetail::create($dataDetail);\n    }\n\n\n    /**\n     * Start new process get data\n     *\n     * @return  new model\n     */\n    public function start() {\n        if($this->sc_order_profile) {\n            $obj = (new ShopOrder);\n            $obj->sc_order_profile = 1;\n            return $obj;\n        } else {\n            return new ShopOrder;\n        }\n    }\n\n    /**\n     * Get order detail\n     *\n     * @param   [int]  $orderID \n     *\n     */\n    public function getDetail($orderID)\n    {\n        if(empty($orderID)) {\n            return null;\n        }\n        $customer = auth()->user();\n        if ($customer) {\n            return $this->where('id', $orderID)\n                ->where('customer_id', $customer->id)\n                ->first();\n        } else {\n            return null;\n        }\n\n    }\n\n    /**\n     * Disable only user's order mode\n     */\n    public function setOrderProfile() {\n        $this->sc_order_profile = 1;\n        $this->sc_status = 'all' ;\n        return $this;\n    }\n\n    public function profile() {\n        $this->setOrderProfile();\n        return $this;\n    }\n\n    /**\n     * Get list order new\n     */\n    public function getOrderNew() {\n        $this->sc_status = 1;\n        return $this;\n    }\n\n    /**\n     * Get list order processing\n     */\n    public function getOrderProcessing() {\n        $this->sc_status = 2;\n        return $this;\n    }\n\n    /**\n     * Get list order hold\n     */\n    public function getOrderHold() {\n        $this->sc_status = 3;\n        return $this;\n    }\n\n    /**\n     * Get list order canceld\n     */\n    public function getOrderCanceled() {\n        $this->sc_status = 4;\n        return $this;\n    }\n\n    /**\n     * Get list order done\n     */\n    public function getOrderDone() {\n        $this->sc_status = 5;\n        return $this;\n    }\n\n    /**\n     * Get list order failed\n     */\n    public function getOrderFailed() {\n        $this->sc_status = 6;\n        return $this;\n    }\n\n    /**\n     * build Query\n     */\n    public function buildQuery() {\n        $customer = auth()->user();\n        if ($this->sc_order_profile == 1) {\n            if(!$customer) {\n                return null;\n            }\n            $uID = $customer->id;\n            $query = $this->with('orderTotal')->where('customer_id', $uID);\n        } else {\n            $query = $this->with('orderTotal')->with('details');\n        }\n\n        if ($this->sc_status !== 'all') {\n            $query = $query->where('status', $this->sc_status);\n        }\n\n        if (count($this->sc_moreWhere)) {\n            foreach ($this->sc_moreWhere as $key => $where) {\n                if(count($where)) {\n                    $query = $query->where($where[0], $where[1], $where[2]);\n                }\n            }\n        }\n\n        if ($this->random) {\n            $query = $query->inRandomOrder();\n        } else {\n            if (is_array($this->sc_sort) && count($this->sc_sort)) {\n                foreach ($this->sc_sort as  $rowSort) {\n                    if(is_array($rowSort) && count($rowSort) == 2) {\n                        $query = $query->sort($rowSort[0], $rowSort[1]);\n                    }\n                }\n            }\n        }\n\n        return $query;\n    }\n\n    /**\n     * Update value balance, received when order capture full money with payment method\n     *\n     * @return  [type]  [return description]\n     */\n    public function processPaymentPaid() {\n        $total = $this->total;\n        $this->balance = 0;\n        $this->received = -$total;\n        $this->save();\n        (new ShopOrderTotal)\n            ->where('order_id', $this->id)\n            ->where('code', 'received')\n            ->update(['value' =>  -$total]);\n    }\n}\n"], "fixing_code": ["<?php\nnamespace SCart\\Core\\Front\\Controllers;\n\nuse App\\Http\\Controllers\\RootFrontController;\nuse SCart\\Core\\Front\\Models\\ShopEmailTemplate;\nuse SCart\\Core\\Front\\Models\\ShopAttributeGroup;\nuse SCart\\Core\\Front\\Models\\ShopCountry;\nuse SCart\\Core\\Front\\Models\\ShopOrder;\nuse SCart\\Core\\Front\\Models\\ShopOrderTotal;\nuse SCart\\Core\\Front\\Models\\ShopProduct;\nuse SCart\\Core\\Front\\Models\\ShopCustomer;\nuse SCart\\Core\\Front\\Models\\ShopCustomerAddress;\nuse Cart;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass ShopCartController extends RootFrontController\n{\n    const ORDER_STATUS_NEW = 1;\n    const PAYMENT_UNPAID = 1;\n    const SHIPPING_NOTSEND = 1;\n\n    public function __construct()\n    {\n        parent::__construct();\n\n    }\n    /**\n     * Get list cart: screen get cart\n     * @return [type] [description]\n     */\n    public function getCart()\n    {\n        session()->forget('paymentMethod'); //destroy paymentMethod\n        session()->forget('shippingMethod'); //destroy shippingMethod\n        session()->forget('orderID'); //destroy orderID\n        \n        //Shipping\n        $moduleShipping = sc_get_plugin_installed('shipping');\n        $sourcesShipping = sc_get_all_plugin('shipping');\n        $shippingMethod = array();\n        foreach ($moduleShipping as $module) {\n            if (array_key_exists($module['key'], $sourcesShipping)) {\n                $moduleClass = sc_get_class_plugin_config('shipping', $module['key']);\n                $shippingMethod[$module['key']] = (new $moduleClass)->getData();\n            }\n        }\n\n        //Payment\n        $modulePayment = sc_get_plugin_installed('payment');\n        $sourcesPayment = sc_get_all_plugin('payment');\n        $paymentMethod = array();\n        foreach ($modulePayment as $module) {\n            if (array_key_exists($module['key'], $sourcesPayment)) {\n                $moduleClass = $sourcesPayment[$module['key']].'\\AppConfig';\n                $paymentMethod[$module['key']] = (new $moduleClass)->getData();\n            }\n        }        \n\n        //Total\n        $moduleTotal = sc_get_plugin_installed('total');\n        $sourcesTotal = sc_get_all_plugin('total');\n        $totalMethod = array();\n        foreach ($moduleTotal as $module) {\n            if (array_key_exists($module['key'], $sourcesTotal)) {\n                $moduleClass = $sourcesTotal[$module['key']].'\\AppConfig';\n                $totalMethod[$module['key']] = (new $moduleClass)->getData();\n            }\n        } \n\n        // Shipping address\n        $customer = auth()->user();\n        if ($customer) {\n            $address = $customer->getAddressDefault();\n            if ($address) {\n                $addressDefaul = [\n                    'first_name'      => $address->first_name,\n                    'last_name'       => $address->last_name,\n                    'first_name_kana' => $address->first_name_kana,\n                    'last_name_kana'  => $address->last_name_kana,\n                    'email'           => $customer->email,\n                    'address1'        => $address->address1,\n                    'address2'        => $address->address2,\n                    'postcode'        => $address->postcode,\n                    'company'         => $customer->company,\n                    'country'         => $address->country,\n                    'phone'           => $address->phone,\n                    'comment'         => '',\n                ];\n            } else {\n                $addressDefaul = [\n                    'first_name'      => $customer->first_name,\n                    'last_name'       => $customer->last_name,\n                    'first_name_kana' => $customer->first_name_kana,\n                    'last_name_kana'  => $customer->last_name_kana,\n                    'email'           => $customer->email,\n                    'address1'        => $customer->address1,\n                    'address2'        => $customer->address2,\n                    'postcode'        => $customer->postcode,\n                    'company'         => $customer->company,\n                    'country'         => $customer->country,\n                    'phone'           => $customer->phone,\n                    'comment'         => '',\n                ];\n            }\n\n        } else {\n            $addressDefaul = [\n                'first_name'      => '',\n                'last_name'       => '',\n                'first_name_kana' => '',\n                'last_name_kana'  => '',\n                'postcode'        => '',\n                'company'         => '',\n                'email'           => '',\n                'address1'        => '',\n                'address2'        => '',\n                'country'         => '',\n                'phone'           => '',\n                'comment'         => '',\n            ];\n        }\n        $shippingAddress = session('shippingAddress') ?? $addressDefaul;\n        $objects = ShopOrderTotal::getObjectOrderTotal();\n        $viewCaptcha = '';\n        if(sc_captcha_method() && in_array('checkout', sc_captcha_page())) {\n            if (view()->exists(sc_captcha_method()->pathPlugin.'::render')){\n                $dataView = [\n                    'titleButton' => trans('cart.checkout'),\n                    'idForm' => 'form-process',\n                    'idButtonForm' => 'button-form-process',\n                ];\n                $viewCaptcha = view(sc_captcha_method()->pathPlugin.'::render', $dataView)->render();\n            }\n        }\n\n        sc_check_view($this->templatePath . '.screen.shop_cart');\n        return view(\n            $this->templatePath . '.screen.shop_cart',\n            [\n                'title'           => trans('front.cart_title'),\n                'description'     => '',\n                'keyword'         => '',\n                'cart'            => Cart::instance('default')->content(),\n                'shippingMethod'  => $shippingMethod,\n                'paymentMethod'   => $paymentMethod,\n                'totalMethod'     => $totalMethod,\n                'addressList'     => $customer ? $customer->addresses : [],\n                'dataTotal'       => ShopOrderTotal::processDataTotal($objects),\n                'shippingAddress' => $shippingAddress,\n                'countries'       => ShopCountry::getCodeAll(),\n                'attributesGroup' => ShopAttributeGroup::pluck('name', 'id')->all(),\n                'viewCaptcha'     => $viewCaptcha,\n                'layout_page'     => 'shop_cart',\n            ]\n        );\n    }\n\n    /**\n     * Process Cart, prepare for the checkout screen\n     */\n    public function processCart()\n    {\n        $customer = auth()->user();\n        if (Cart::instance('default')->count() == 0) {\n            return redirect(sc_route('cart'));\n        }\n\n        //Not allow for guest\n        if (!sc_config('shop_allow_guest') && !$customer) {\n            return redirect(sc_route('login'));\n        }\n\n        $data = request()->all();\n\n        $validate = [\n            'first_name'     => 'required|max:100',\n            'email'          => 'required|string|email|max:255',\n        ];\n        //check shipping\n        if (!sc_config('shipping_off')) {\n            $validate['shippingMethod'] = 'required';\n        }\n        //check payment\n        if (!sc_config('payment_off')) {\n            $validate['paymentMethod'] = 'required';\n        }\n\n        if (sc_config('customer_lastname')) {\n            if (sc_config('customer_lastname_required')) {\n                $validate['last_name'] = 'required|string|max:100';\n            } else {\n                $validate['last_name'] = 'nullable|string|max:100';\n            }\n        }\n        if (sc_config('customer_address1')) {\n            if (sc_config('customer_address1_required')) {\n                $validate['address1'] = 'required|string|max:100';\n            } else {\n                $validate['address1'] = 'nullable|string|max:100';\n            }\n        }\n\n        if (sc_config('customer_address2')) {\n            if (sc_config('customer_address2_required')) {\n                $validate['address2'] = 'required|string|max:100';\n            } else {\n                $validate['address2'] = 'nullable|string|max:100';\n            }\n        }\n        if (sc_config('customer_phone')) {\n            if (sc_config('customer_phone_required')) {\n                $validate['phone'] = 'required|regex:/^0[^0][0-9\\-]{7,13}$/';\n            } else {\n                $validate['phone'] = 'nullable|regex:/^0[^0][0-9\\-]{7,13}$/';\n            }\n        }\n        if (sc_config('customer_country')) {\n            $arraycountry = (new ShopCountry)->pluck('code')->toArray();\n            if (sc_config('customer_country_required')) {\n                $validate['country'] = 'required|string|min:2|in:'. implode(',', $arraycountry);\n            } else {\n                $validate['country'] = 'nullable|string|min:2|in:'. implode(',', $arraycountry);\n            }\n        }\n\n        if (sc_config('customer_postcode')) {\n            if (sc_config('customer_postcode_required')) {\n                $validate['postcode'] = 'required|min:5';\n            } else {\n                $validate['postcode'] = 'nullable|min:5';\n            }\n        }\n        if (sc_config('customer_company')) {\n            if (sc_config('customer_company_required')) {\n                $validate['company'] = 'required|string|max:100';\n            } else {\n                $validate['company'] = 'nullable|string|max:100';\n            }\n        } \n\n        if (sc_config('customer_name_kana')) {\n            if (sc_config('customer_name_kana_required')) {\n                $validate['first_name_kana'] = 'required|string|max:100';\n                $validate['last_name_kana'] = 'required|string|max:100';\n            } else {\n                $validate['first_name_kana'] = 'nullable|string|max:100';\n                $validate['last_name_kana'] = 'nullable|string|max:100';\n            }\n        }\n\n        $messages = [\n            'last_name.required'      => trans('validation.required',['attribute'=> trans('cart.last_name')]),\n            'first_name.required'     => trans('validation.required',['attribute'=> trans('cart.first_name')]),\n            'email.required'          => trans('validation.required',['attribute'=> trans('cart.email')]),\n            'address1.required'       => trans('validation.required',['attribute'=> trans('cart.address1')]),\n            'address2.required'       => trans('validation.required',['attribute'=> trans('cart.address2')]),\n            'phone.required'          => trans('validation.required',['attribute'=> trans('cart.phone')]),\n            'country.required'        => trans('validation.required',['attribute'=> trans('cart.country')]),\n            'postcode.required'       => trans('validation.required',['attribute'=> trans('cart.postcode')]),\n            'company.required'        => trans('validation.required',['attribute'=> trans('cart.company')]),\n            'sex.required'            => trans('validation.required',['attribute'=> trans('cart.sex')]),\n            'birthday.required'       => trans('validation.required',['attribute'=> trans('cart.birthday')]),\n            'email.email'             => trans('validation.email',['attribute'=> trans('cart.email')]),\n            'phone.regex'             => trans('validation.regex',['attribute'=> trans('cart.phone')]),\n            'postcode.min'            => trans('validation.min',['attribute'=> trans('cart.postcode')]),\n            'country.min'             => trans('validation.min',['attribute'=> trans('cart.country')]),\n            'first_name.max'          => trans('validation.max',['attribute'=> trans('cart.first_name')]),\n            'email.max'               => trans('validation.max',['attribute'=> trans('cart.email')]),\n            'address1.max'            => trans('validation.max',['attribute'=> trans('cart.address1')]),\n            'address2.max'            => trans('validation.max',['attribute'=> trans('cart.address2')]),\n            'last_name.max'           => trans('validation.max',['attribute'=> trans('cart.last_name')]),\n            'birthday.date'           => trans('validation.date',['attribute'=> trans('cart.birthday')]),\n            'birthday.date_format'    => trans('validation.date_format',['attribute'=> trans('cart.birthday')]),\n            'shippingMethod.required' => trans('cart.validation.shippingMethod_required'),\n            'paymentMethod.required'  => trans('cart.validation.paymentMethod_required'),\n        ];\n\n        if(sc_captcha_method() && in_array('checkout', sc_captcha_page())) {\n            $data['captcha_field'] = $data[sc_captcha_method()->getField()] ?? '';\n            $validate['captcha_field'] = ['required', 'string', new \\SCart\\Core\\Rules\\CaptchaRule];\n        }\n\n\n        $v = Validator::make(\n            $data, \n            $validate, \n            $messages\n        );\n        if ($v->fails()) {\n            return redirect()->back()\n                ->withInput()\n                ->withErrors($v->errors());\n        }\n\n        //Set session shippingMethod\n        if (!sc_config('shipping_off')) {\n            session(['shippingMethod' => request('shippingMethod')]);\n        }\n\n        //Set session paymentMethod\n        if (!sc_config('payment_off')) {\n            session(['paymentMethod' => request('paymentMethod')]);\n        }\n\n        //Set session address process\n        session(['address_process' => request('address_process')]);\n        //Set session shippingAddressshippingAddress\n        session(\n            [\n                'shippingAddress' => [\n                    'first_name'      => request('first_name'),\n                    'last_name'       => request('last_name'),\n                    'first_name_kana' => request('first_name_kana'),\n                    'last_name_kana'  => request('last_name_kana'),\n                    'email'           => request('email'),\n                    'country'         => request('country'),\n                    'address1'        => request('address1'),\n                    'address2'        => request('address2'),\n                    'phone'           => request('phone'),\n                    'postcode'        => request('postcode'),\n                    'company'         => request('company'),\n                    'comment'         => request('comment'),\n                ],\n            ]\n        );\n\n        //Check minimum\n        $arrCheckQty = [];\n        $cart = Cart::instance('default')->content()->toArray();\n        foreach ($cart as $key => $row) {\n            $arrCheckQty[$row['id']] = ($arrCheckQty[$row['id']] ?? 0) + $row['qty'];\n        }\n        $arrProductMinimum = ShopProduct::whereIn('id', array_keys($arrCheckQty))->pluck('minimum', 'id')->all();\n        $arrErrorQty = [];\n        foreach ($arrProductMinimum as $pId => $min) {\n            if ($arrCheckQty[$pId] < $min) {\n                $arrErrorQty[$pId] = $min;\n            }\n        }\n        if (count($arrErrorQty)) {\n            return redirect(sc_route('cart'))->with('arrErrorQty', $arrErrorQty);\n        }\n        //End check minimum\n\n        return redirect(sc_route('checkout'));\n    }\n\n    /**\n     * Checkout screen\n     * @return [view]\n     */\n    public function getCheckout()\n    {\n        //Check shipping address\n        if (\n            !session('shippingAddress')\n        ) {\n            return redirect(sc_route('cart'));\n        }\n        $shippingAddress = session('shippingAddress');\n\n\n        //Shipping method\n        if (sc_config('shipping_off')) {\n            $shippingMethodData = null;\n        } else {\n            if (!session('shippingMethod')) {\n                return redirect(sc_route('cart'));\n            }\n            $shippingMethod = session('shippingMethod');\n            $classShippingMethod = sc_get_class_plugin_config('Shipping', $shippingMethod);\n            $shippingMethodData = (new $classShippingMethod)->getData();\n        }\n\n        //Payment method\n        if (sc_config('payment_off')) {\n            $paymentMethodData = null;\n        } else {\n            if (!session('paymentMethod')) {\n                return redirect(sc_route('cart'));\n            }\n            $paymentMethod = session('paymentMethod');\n            $classPaymentMethod = sc_get_class_plugin_config('Payment', $paymentMethod);\n            $paymentMethodData = (new $classPaymentMethod)->getData();\n        }\n\n\n        $objects = ShopOrderTotal::getObjectOrderTotal();\n        $dataTotal = ShopOrderTotal::processDataTotal($objects);\n\n        //Set session dataTotal\n        session(['dataTotal' => $dataTotal]);\n\n        sc_check_view($this->templatePath . '.screen.shop_checkout');\n        return view(\n            $this->templatePath . '.screen.shop_checkout',\n            [\n                'title'              => trans('front.checkout_title'),\n                'cart'               => Cart::instance('default')->content(),\n                'dataTotal'          => $dataTotal,\n                'paymentMethodData'  => $paymentMethodData,\n                'shippingMethodData' => $shippingMethodData,\n                'shippingAddress'    => $shippingAddress,\n                'attributesGroup'    => ShopAttributeGroup::getListAll(),\n                'layout_page'        => 'shop_cart',\n            ]\n        );\n    }\n\n    /**\n     * Add to cart by method post, always use in the product page detail\n     * \n     * @return [redirect]\n     */\n    public function addToCart()\n    {\n        $data      = request()->all();\n        \n        //Process escape\n        $data      = sc_clean($data);\n\n        $productId = $data['product_id'];\n        $qty       = $data['qty'] ?? 0;\n        $storeId   = $data['storeId'] ?? config('app.storeId');\n\n        //Process attribute price\n        $formAttr = $data['form_attr'] ?? null;\n        $optionPrice  = 0;\n        if ($formAttr) {\n            foreach ($formAttr as $key => $attr) {\n                $optionPrice += explode('__', $attr)[1] ??0;\n            }\n        }\n        //End addtribute price\n\n        $product = (new ShopProduct)->getDetail($productId, null, $storeId);\n\n        if (!$product) {\n            return response()->json(\n                [\n                    'error' => 1,\n                    'msg' => trans('front.notfound'),\n                ]\n            );\n        }\n        \n\n        if ($product->allowSale()) {\n            $options = array();\n            $options = $formAttr;\n            $dataCart = array(\n                'id'      => $productId,\n                'name'    => $product->name,\n                'qty'     => $qty,\n                'price'   => $product->getFinalPrice() + $optionPrice,\n                'tax'     => $product->getTaxValue(),\n                'storeId' => $storeId,\n            );\n            if ($options) {\n                $dataCart['options'] = $options;\n            }\n            Cart::instance('default')->add($dataCart);\n            return redirect(sc_route('cart'))\n                ->with(\n                    ['success' => trans('cart.success', ['instance' => 'cart'])]\n                );\n        } else {\n            return redirect(sc_route('cart'))\n                ->with(\n                    ['error' => trans('cart.dont_allow_sale')]\n                );\n        }\n\n    }\n\n    /**\n     * Create new order\n     * @return [redirect]\n     */\n    public function addOrder(Request $request)\n    {\n        $customer = auth()->user();\n        $uID = $customer->id ?? 0;\n        //if cart empty\n        if (Cart::instance('default')->count() == 0) {\n            return redirect()->route('home');\n        }\n        //Not allow for guest\n        if (!sc_config('shop_allow_guest') && !$customer) {\n            return redirect(sc_route('login'));\n        } //\n\n        $data = request()->all();\n        if (!$data) {\n            return redirect(sc_route('cart'));\n        } else {\n            $dataTotal       = session('dataTotal') ?? [];\n            $shippingAddress = session('shippingAddress') ?? [];\n            $paymentMethod   = session('paymentMethod') ?? '';\n            $shippingMethod  = session('shippingMethod') ?? '';\n            $address_process = session('address_process') ?? '';\n        }\n\n        //Process total\n        $subtotal = (new ShopOrderTotal)->sumValueTotal('subtotal', $dataTotal); //sum total\n        $tax      = (new ShopOrderTotal)->sumValueTotal('tax', $dataTotal); //sum tax\n        $shipping = (new ShopOrderTotal)->sumValueTotal('shipping', $dataTotal); //sum shipping\n        $discount = (new ShopOrderTotal)->sumValueTotal('discount', $dataTotal); //sum discount\n        $received = (new ShopOrderTotal)->sumValueTotal('received', $dataTotal); //sum received\n        $total    = (new ShopOrderTotal)->sumValueTotal('total', $dataTotal);\n        //end total\n\n        $dataOrder['customer_id']     = $uID;\n        $dataOrder['subtotal']        = $subtotal;\n        $dataOrder['shipping']        = $shipping;\n        $dataOrder['discount']        = $discount;\n        $dataOrder['received']        = $received;\n        $dataOrder['tax']             = $tax;\n        $dataOrder['payment_status']  = self::PAYMENT_UNPAID;\n        $dataOrder['shipping_status'] = self::SHIPPING_NOTSEND;\n        $dataOrder['status']          = self::ORDER_STATUS_NEW;\n        $dataOrder['currency']        = sc_currency_code();\n        $dataOrder['exchange_rate']   = sc_currency_rate();\n        $dataOrder['total']           = $total;\n        $dataOrder['balance']         = $total + $received;\n        $dataOrder['email']           = $shippingAddress['email'];\n        $dataOrder['first_name']      = $shippingAddress['first_name'];\n        $dataOrder['payment_method']  = $paymentMethod;\n        $dataOrder['shipping_method'] = $shippingMethod;\n        $dataOrder['user_agent']      = $request->header('User-Agent');\n        $dataOrder['ip']              = $request->ip();\n        $dataOrder['created_at']      = date('Y-m-d H:i:s');\n\n        if (!empty($shippingAddress['last_name'])) {\n            $dataOrder['last_name']       = $shippingAddress['last_name'];\n        }\n        if (!empty($shippingAddress['first_name_kana'])) {\n            $dataOrder['first_name_kana']       = $shippingAddress['first_name_kana'];\n        }\n        if (!empty($shippingAddress['last_name_kana'])) {\n            $dataOrder['last_name_kana']       = $shippingAddress['last_name_kana'];\n        }\n        if (!empty($shippingAddress['address1'])) {\n            $dataOrder['address1']       = $shippingAddress['address1'];\n        }\n        if (!empty($shippingAddress['address2'])) {\n            $dataOrder['address2']       = $shippingAddress['address2'];\n        }\n        if (!empty($shippingAddress['country'])) {\n            $dataOrder['country']       = $shippingAddress['country'];\n        }\n        if (!empty($shippingAddress['phone'])) {\n            $dataOrder['phone']       = $shippingAddress['phone'];\n        }\n        if (!empty($shippingAddress['postcode'])) {\n            $dataOrder['postcode']       = $shippingAddress['postcode'];\n        }\n        if (!empty($shippingAddress['company'])) {\n            $dataOrder['company']       = $shippingAddress['company'];\n        }\n        if (!empty($shippingAddress['comment'])) {\n            $dataOrder['comment']       = $shippingAddress['comment'];\n        }\n\n        $arrCartDetail = [];\n        foreach (Cart::instance('default')->content() as $cartItem) {\n            $arrDetail['product_id']  = $cartItem->id;\n            $arrDetail['name']        = $cartItem->name;\n            $arrDetail['price']       = sc_currency_value($cartItem->price);\n            $arrDetail['qty']         = $cartItem->qty;\n            $arrDetail['store_id']    = $cartItem->storeId;\n            $arrDetail['attribute']   = ($cartItem->options) ? json_encode($cartItem->options) : null;\n            $arrDetail['total_price'] = sc_currency_value($cartItem->price) * $cartItem->qty;\n            $arrCartDetail[]          = $arrDetail;\n        }\n\n        //Set session info order\n        session(['dataOrder' => $dataOrder]);\n        session(['arrCartDetail' => $arrCartDetail]);\n        //Create new order\n        $newOrder = (new ShopOrder)->createOrder($dataOrder, $dataTotal, $arrCartDetail);\n\n        if ($newOrder['error'] == 1) {\n            return redirect(sc_route('cart'))->with(['error' => $newOrder['msg']]);\n        }\n        //Set session orderID\n        session(['orderID' => $newOrder['orderID']]);\n\n        //Create new address\n        if ($address_process == 'new') {\n            $addressNew = [\n                'first_name'      => $shippingAddress['first_name'] ?? '',\n                'last_name'       => $shippingAddress['last_name'] ?? '',\n                'first_name_kana' => $shippingAddress['first_name_kana'] ?? '',\n                'last_name_kana'  => $shippingAddress['last_name_kana'] ?? '',\n                'postcode'        => $shippingAddress['postcode'] ?? '',\n                'address1'        => $shippingAddress['address1'] ?? '',\n                'address2'        => $shippingAddress['address2'] ?? '',\n                'country'         => $shippingAddress['country'] ?? '',\n                'phone'           => $shippingAddress['phone'] ?? '',\n            ];\n\n            //Process escape\n            $addressNew = sc_clean($addressNew);\n\n            ShopCustomer::find($uID)->addresses()->save(new ShopCustomerAddress(sc_clean($addressNew)));\n            session()->forget('address_process'); //destroy address_process\n        }\n\n        $paymentMethod = sc_get_class_plugin_controller('Payment', session('paymentMethod'));\n\n        if ($paymentMethod) {\n            // Check payment method\n            return (new $paymentMethod)->processOrder();\n        } else {\n            return (new ShopCartController)->completeOrder();\n        }\n    }\n\n    /**\n     * Add product to cart\n     * @param Request $request [description]\n     * @return [json]\n     */\n    public function addToCartAjax(Request $request)\n    {\n        if (!$request->ajax()) {\n            return redirect(sc_route('cart'));\n        }\n        $data     = request()->all();\n        $instance = $data['instance'] ?? 'default';\n        $id       = $data['id'] ?? '';\n        $storeId  = $data['storeId'] ?? config('app.storeId');\n        $cart     = Cart::instance($instance);\n\n        $product = (new ShopProduct)->getDetail($id, null, $storeId);\n        if (!$product) {\n            return response()->json(\n                [\n                    'error' => 1,\n                    'msg' => trans('front.notfound'),\n                ]\n            );\n        }\n        switch ($instance) {\n            case 'default':\n                if ($product->attributes->count() || $product->kind == SC_PRODUCT_GROUP) {\n                    //Products have attributes or kind is group,\n                    //need to select properties before adding to the cart\n                    return response()->json(\n                        [\n                            'error' => 1,\n                            'redirect' => $product->getUrl(),\n                            'msg' => '',\n                        ]\n                    );\n                }\n\n                //Check product allow for sale\n                if ($product->allowSale()) {\n                    $cart->add(\n                        array(\n                            'id'      => $id,\n                            'name'    => $product->name,\n                            'qty'     => 1,\n                            'price'   => $product->getFinalPrice(),\n                            'tax'     => $product->getTaxValue(),\n                            'storeId' => $storeId,\n                        )\n                    );\n                } else {\n                    return response()->json(\n                        [\n                            'error' => 1,\n                            'msg' => trans('cart.dont_allow_sale'),\n                        ]\n                    );\n                }\n                break;\n\n            default:\n                //Wishlist or Compare...\n                ${'arrID' . $instance} = array_keys($cart->content()->groupBy('id')->toArray());\n                if (!in_array($id, ${'arrID' . $instance})) {\n                    try {\n                        $cart->add(\n                            array(\n                                'id'      => $id,\n                                'name'    => $product->name,\n                                'qty'     => 1,\n                                'price'   => $product->getFinalPrice(),\n                                'tax'     => $product->getTaxValue(),\n                                'storeId' => $storeId,\n                            )\n                        );\n                    } catch (\\Throwable $e) {\n                        return response()->json(\n                            [\n                                'error' => 1,\n                                'msg' => $e->getMessage(),\n                            ]\n                        );\n                    }\n\n                } else {\n                    return response()->json(\n                        [\n                            'error' => 1,\n                            'msg' => trans('cart.exist', ['instance' => $instance]),\n                        ]\n                    );\n                }\n                break;\n        }\n\n        $carts = Cart::getListCart($instance);\n        return response()->json(\n            [\n                'error'      => 0,\n                'count_cart' => $carts['count'],\n                'instance'   => $instance,\n                'subtotal'   => $carts['subtotal'],\n                'msg'        => trans('cart.success', ['instance' => ($instance == 'default') ? 'cart' : $instance]),\n            ]\n        );\n\n    }\n\n    /**\n     * Update product to cart\n     * @param  Request $request [description]\n     * @return [json]\n     */\n    public function updateToCart(Request $request)\n    {\n        if (!$request->ajax()) {\n            return redirect(sc_route('cart'));\n        }\n        $data    = request()->all();\n        $id      = $data['id'] ?? '';\n        $rowId   = $data['rowId'] ?? '';\n        $new_qty = $data['new_qty'] ?? 0;\n        $storeId = $data['storeId'] ?? config('app.storeId');\n        $product = (new ShopProduct)->getDetail($id, null, $storeId);\n        \n        if (!$product) {\n            return response()->json(\n                [\n                    'error' => 1,\n                    'msg' => trans('front.notfound'),\n                ]\n            );\n        }\n        \n        if ($product->stock < $new_qty && !sc_config('product_buy_out_of_stock', $product->store_id)) {\n            return response()->json(\n                [\n                    'error' => 1,\n                    'msg' => trans('cart.over', ['item' => $product->sku]),\n                ]\n            );\n        } else {\n            Cart::instance('default')->update($rowId, ($new_qty) ? $new_qty : 0);\n            return response()->json(\n                [\n                    'error' => 0,\n                ]\n            );\n        }\n\n    }\n\n    /**\n     * Get product in wishlist\n     * @return [view]\n     */\n    public function wishlist()\n    {\n\n        $wishlist = Cart::instance('wishlist')->content();\n        sc_check_view($this->templatePath . '.screen.shop_wishlist');\n        return view(\n            $this->templatePath . '.screen.shop_wishlist',\n            array(\n                'title'       => trans('front.wishlist'),\n                'description' => '',\n                'keyword'     => '',\n                'wishlist'    => $wishlist,\n                'layout_page' => 'shop_cart',\n            )\n        );\n    }\n\n    /**\n     * Get product in compare\n     * @return [view]\n     */\n    public function compare()\n    {\n        $compare = Cart::instance('compare')->content();\n\n        sc_check_view($this->templatePath . '.screen.shop_compare');\n        return view(\n            $this->templatePath . '.screen.shop_compare',\n            array(\n                'title'       => trans('front.compare'),\n                'description' => '',\n                'keyword'     => '',\n                'compare'     => $compare,\n                'layout_page' => 'shop_cart',\n            )\n        );\n    }\n\n    /**\n     * Clear all cart\n     * @return [redirect]\n     */\n    public function clearCart($instance = 'default')\n    {\n        Cart::instance($instance)->destroy();\n        return redirect(sc_route('cart'));\n    }\n\n    /**\n     * Remove item from cart\n     * @return [redirect]\n     */\n    public function removeItem($id = null)\n    {\n        if ($id === null) {\n            return redirect(sc_route('cart'));\n        }\n\n        if (array_key_exists($id, Cart::instance('default')->content()->toArray())) {\n            Cart::instance('default')->remove($id);\n        }\n        return redirect(sc_route('cart'));\n    }\n\n    /**\n     * Remove item from wishlist\n     * @param  [string | null] $id\n     * @return [redirect]\n     */\n    public function removeItemWishlist($id = null)\n    {\n        if ($id === null) {\n            return redirect()->route('wishlist');\n        }\n\n        if (array_key_exists($id, Cart::instance('wishlist')->content()->toArray())) {\n            Cart::instance('wishlist')->remove($id);\n        }\n        return redirect()->route('wishlist');\n    }\n\n    /**\n     * Remove item from compare\n     * @param  [string | null] $id\n     * @return [redirect]\n     */\n    public function removeItemCompare($id = null)\n    {\n        if ($id === null) {\n            return redirect()->route('compare');\n        }\n\n        if (array_key_exists($id, Cart::instance('compare')->content()->toArray())) {\n            Cart::instance('compare')->remove($id);\n        }\n        return redirect()->route('compare');\n    }\n\n    /**\n     * Complete order\n     *\n     * @return [redirect]\n     */\n    public function completeOrder()\n    {\n        $orderID = session('orderID') ??0;\n        if ($orderID == 0){\n            return redirect()->route('home', ['error' => 'Error Order ID!']);\n        }\n        Cart::destroy(); // destroy cart\n\n        $paymentMethod = session('paymentMethod');\n        $shippingMethod = session('shippingMethod');\n        $totalMethod = session('totalMethod', []);\n\n        $classPaymentConfig = sc_get_class_plugin_config('Payment', $paymentMethod);\n        if (method_exists($classPaymentConfig, 'endApp')) {\n            (new $classPaymentConfig)->endApp();\n        }\n\n        $classShippingConfig = sc_get_class_plugin_config('Shipping', $shippingMethod);\n        if (method_exists($classShippingConfig, 'endApp')) {\n            (new $classShippingConfig)->endApp();\n        }\n\n        if ($totalMethod && is_array($totalMethod)) {\n            foreach ($totalMethod as $keyMethod => $valueMethod) {\n                $classTotalConfig = sc_get_class_plugin_config('Total', $keyMethod);\n                if (method_exists($classTotalConfig, 'endApp')) {\n                    (new $classTotalConfig)->endApp(['orderID' => $orderID, 'code' => $valueMethod]);\n                }\n            }\n        }\n\n        session()->forget('paymentMethod'); //destroy paymentMethod\n        session()->forget('shippingMethod'); //destroy shippingMethod\n        session()->forget('totalMethod'); //destroy totalMethod\n        session()->forget('otherMethod'); //destroy otherMethod\n        session()->forget('dataTotal'); //destroy dataTotal\n        session()->forget('dataOrder'); //destroy dataOrder\n        session()->forget('arrCartDetail'); //destroy arrCartDetail\n        session()->forget('orderID'); //destroy orderID\n\n        if (sc_config('order_success_to_admin') || sc_config('order_success_to_customer')) {\n            $data = ShopOrder::with('details')->find($orderID)->toArray();\n            $checkContent = (new ShopEmailTemplate)->where('group', 'order_success_to_admin')->where('status', 1)->first();\n            $checkContentCustomer = (new ShopEmailTemplate)->where('group', 'order_success_to_customer')->where('status', 1)->first();\n            if ($checkContent || $checkContentCustomer) {\n\n                $orderDetail = '';\n                $orderDetail .= '<tr>\n                                    <td>' . trans('email.order.sort') . '</td>\n                                    <td>' . trans('email.order.sku') . '</td>\n                                    <td>' . trans('email.order.name') . '</td>\n                                    <td>' . trans('email.order.price') . '</td>\n                                    <td>' . trans('email.order.qty') . '</td>\n                                    <td>' . trans('email.order.total') . '</td>\n                                </tr>';\n                foreach ($data['details'] as $key => $detail) {\n                    $orderDetail .= '<tr>\n                                    <td>' . ($key + 1) . '</td>\n                                    <td>' . $detail['sku'] . '</td>\n                                    <td>' . $detail['name'] . '</td>\n                                    <td>' . sc_currency_render($detail['price'], '', '', '', false) . '</td>\n                                    <td>' . number_format($detail['qty']) . '</td>\n                                    <td align=\"right\">' . sc_currency_render($detail['total_price'], '', '', '', false) . '</td>\n                                </tr>';\n                }\n                $dataFind = [\n                    '/\\{\\{\\$title\\}\\}/',\n                    '/\\{\\{\\$orderID\\}\\}/',\n                    '/\\{\\{\\$firstName\\}\\}/',\n                    '/\\{\\{\\$lastName\\}\\}/',\n                    '/\\{\\{\\$toname\\}\\}/',\n                    '/\\{\\{\\$address\\}\\}/',\n                    '/\\{\\{\\$address1\\}\\}/',\n                    '/\\{\\{\\$address2\\}\\}/',\n                    '/\\{\\{\\$email\\}\\}/',\n                    '/\\{\\{\\$phone\\}\\}/',\n                    '/\\{\\{\\$comment\\}\\}/',\n                    '/\\{\\{\\$orderDetail\\}\\}/',\n                    '/\\{\\{\\$subtotal\\}\\}/',\n                    '/\\{\\{\\$shipping\\}\\}/',\n                    '/\\{\\{\\$discount\\}\\}/',\n                    '/\\{\\{\\$total\\}\\}/',\n                ];\n                $dataReplace = [\n                    trans('order.send_mail.new_title') . '#' . $orderID,\n                    $orderID,\n                    $data['first_name'],\n                    $data['last_name'],\n                    $data['first_name'].' '.$data['last_name'],\n                    $data['address1'] . ' ' . $data['address2'],\n                    $data['address1'],\n                    $data['address2'],\n                    $data['email'],\n                    $data['phone'],\n                    $data['comment'],\n                    $orderDetail,\n                    sc_currency_render($data['subtotal'], '', '', '', false),\n                    sc_currency_render($data['shipping'], '', '', '', false),\n                    sc_currency_render($data['discount'], '', '', '', false),\n                    sc_currency_render($data['total'], '', '', '', false),\n                ];\n\n                if (sc_config('order_success_to_admin') && $checkContent) {\n                    $content = $checkContent->text;\n                    $content = preg_replace($dataFind, $dataReplace, $content);\n                    $dataView = [\n                        'content' => $content,\n                    ];\n                    $config = [\n                        'to' => sc_store('email'),\n                        'subject' => trans('order.send_mail.new_title') . '#' . $orderID,\n                    ];\n                    sc_send_mail($this->templatePath . '.mail.order_success_to_admin', $dataView, $config, []);\n                }\n                if (sc_config('order_success_to_customer') && $checkContentCustomer) {\n                    $contentCustomer = $checkContentCustomer->text;\n                    $contentCustomer = preg_replace($dataFind, $dataReplace, $contentCustomer);\n                    $dataView = [\n                        'content' => $contentCustomer,\n                    ];\n                    $config = [\n                        'to' => $data['email'],\n                        'replyTo' => sc_store('email'),\n                        'subject' => trans('order.send_mail.new_title'),\n                    ];\n                    sc_send_mail($this->templatePath . '.mail.order_success_to_customer', $dataView, $config, []);\n                }\n            }\n\n        }\n\n        return redirect()->route('order.success')->with('orderID', $orderID);\n    }\n\n    /**\n     * Page order success\n     *\n     * @return  [view]\n     */\n    public function orderSuccess(){\n\n        if (!session('orderID')) {\n            return redirect()->route('home');\n        }\n        sc_check_view($this->templatePath . '.screen.shop_order_success');\n        return view(\n            $this->templatePath . '.screen.shop_order_success',\n            [\n                'title' => trans('order.success.title'),\n                'layout_page' =>'shop_cart',\n            ]\n        );\n    }\n\n}\n", "<?php\nnamespace SCart\\Core\\Front\\Controllers;\n\nuse App\\Http\\Controllers\\RootFrontController;\nuse SCart\\Core\\Front\\Models\\ShopBanner;\nuse SCart\\Core\\Front\\Models\\ShopProduct;\nuse SCart\\Core\\Front\\Models\\ShopEmailTemplate;\nuse SCart\\Core\\Front\\Models\\ShopNews;\nuse SCart\\Core\\Front\\Models\\ShopPage;\nuse SCart\\Core\\Front\\Models\\ShopSubscribe;\nuse Illuminate\\Http\\Request;\n\nclass ShopContentController extends RootFrontController\n{\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Home page\n     * @return [view]\n     */\n    public function index()\n    {\n        sc_check_view($this->templatePath . '.screen.home');\n        return view(\n            $this->templatePath . '.screen.home',\n            array(\n                'title' => sc_store('title'),\n                'keyword' => sc_store('keyword'),\n                'description' => sc_store('description'),\n                'layout_page' => 'home',\n            )\n        );\n    }\n\n    /**\n     * Shop page\n     * @return [view]\n     */\n    public function shop()\n    {\n        $sortBy = 'sort';\n        $sortOrder = 'asc';\n        $filter_sort = request('filter_sort') ?? '';\n        $filterArr = [\n            'price_desc' => ['price', 'desc'],\n            'price_asc' => ['price', 'asc'],\n            'sort_desc' => ['sort', 'desc'],\n            'sort_asc' => ['sort', 'asc'],\n            'id_desc' => ['id', 'desc'],\n            'id_asc' => ['id', 'asc'],\n        ];\n        if (array_key_exists($filter_sort, $filterArr)) {\n            $sortBy = $filterArr[$filter_sort][0];\n            $sortOrder = $filterArr[$filter_sort][1];\n        }\n\n        $products = (new ShopProduct)\n            ->setLimit(sc_config('product_list'))\n            ->setPaginate()\n            ->setSort([$sortBy, $sortOrder])\n            ->getData();\n\n        sc_check_view($this->templatePath . '.screen.shop_home');\n        return view(\n            $this->templatePath . '.screen.shop_home',\n            array(\n                'title' => trans('front.shop'),\n                'keyword' => sc_store('keyword'),\n                'description' => sc_store('description'),\n                'products' => $products,\n                'layout_page' => 'shop_home',\n                'filter_sort' => $filter_sort,\n            )\n        );\n    }\n\n    /**\n     * search product\n     * @return [view]\n     */\n    public function search()\n    {\n        $sortBy = 'sort';\n        $sortOrder = 'asc';\n        $filter_sort = request('filter_sort') ?? '';\n        $filterArr = [\n            'price_desc' => ['price', 'desc'],\n            'price_asc' => ['price', 'asc'],\n            'sort_desc' => ['sort', 'desc'],\n            'sort_asc' => ['sort', 'asc'],\n            'id_desc' => ['id', 'desc'],\n            'id_asc' => ['id', 'asc'],\n        ];\n        if (array_key_exists($filter_sort, $filterArr)) {\n            $sortBy = $filterArr[$filter_sort][0];\n            $sortOrder = $filterArr[$filter_sort][1];\n        }\n        $keyword = request('keyword') ?? '';\n        $products = (new ShopProduct)->setKeyword($keyword)\n                    ->setSort([$sortBy, $sortOrder])\n                    ->setPaginate()\n                    ->setLimit(sc_config('product_list'))\n                    ->getData();\n\n        sc_check_view($this->templatePath . '.screen.shop_product_list');          \n        return view(\n            $this->templatePath . '.screen.shop_product_list',\n            array(\n                'title' => trans('front.search') . ': ' . $keyword,\n                'products' => $products,\n                'layout_page' => 'product_list',\n                'filter_sort' => $filter_sort,\n            )\n        );\n    }\n\n    /**\n     * Process click banner\n     *\n     * @param   [int]  $id  \n     *\n     */\n    public function clickBanner($id){\n        $banner = ShopBanner::find($id);\n        if($banner) {\n            $banner->click +=1;\n            $banner->save();\n            return redirect(url($banner->url??'/'));\n        }\n        return redirect(url('/'));\n    }\n\n    /**\n     * form contact\n     * @return [view]\n     */\n    public function getContact()\n    {\n        $viewCaptcha = '';\n        if(sc_captcha_method() && in_array('contact', sc_captcha_page())) {\n            if (view()->exists(sc_captcha_method()->pathPlugin.'::render')){\n                $dataView = [\n                    'titleButton' => trans('front.contact_form.submit'),\n                    'idForm' => 'form-process',\n                    'idButtonForm' => 'button-form-process',\n                ];\n                $viewCaptcha = view(sc_captcha_method()->pathPlugin.'::render', $dataView)->render();\n            }\n        }\n        sc_check_view($this->templatePath . '.screen.shop_contact');\n        return view(\n            $this->templatePath . '.screen.shop_contact',\n            array(\n                'title'       => trans('front.contact'),\n                'description' => '',\n                'keyword'     => '',\n                'layout_page' => 'shop_contact',\n                'og_image'    => '',\n                'viewCaptcha' => $viewCaptcha,\n            )\n        );\n    }\n\n\n    /**\n     * process contact form\n     * @param  Request $request [description]\n     * @return [mix]\n     */\n    public function postContact(Request $request)\n    {\n        $data   = $request->all();\n        $validate = [\n            'name' => 'required',\n            'title' => 'required',\n            'content' => 'required',\n            'email' => 'required|email',\n            'phone' => 'required|regex:/^0[^0][0-9\\-]{7,13}$/',\n        ];\n        $message = [\n            'name.required' => trans('validation.required', ['attribute' => trans('front.contact_form.name')]),\n            'content.required' => trans('validation.required', ['attribute' => trans('front.contact_form.content')]),\n            'title.required' => trans('validation.required', ['attribute' => trans('front.contact_form.title')]),\n            'email.required' => trans('validation.required', ['attribute' => trans('front.contact_form.email')]),\n            'email.email' => trans('validation.email', ['attribute' => trans('front.contact_form.email')]),\n            'phone.required' => trans('validation.required', ['attribute' => trans('front.contact_form.phone')]),\n            'phone.regex' => trans('validation.phone', ['attribute' => trans('front.contact_form.phone')]),\n        ];\n\n        if(sc_captcha_method() && in_array('contact', sc_captcha_page())) {\n            $data['captcha_field'] = $data[sc_captcha_method()->getField()] ?? '';\n            $validate['captcha_field'] = ['required', 'string', new \\SCart\\Core\\Rules\\CaptchaRule];\n        }\n        $validator = \\Illuminate\\Support\\Facades\\Validator::make($data, $validate, $message);\n        if ($validator->fails()) {\n            return redirect()->back()\n                        ->withErrors($validator)\n                        ->withInput();\n        }\n        // Process escape\n        $data = sc_clean($data);\n        \n        //Send email\n        $data['content'] = str_replace(\"\\n\", \"<br>\", $data['content']);\n\n        if (sc_config('contact_to_admin')) {\n            $checkContent = (new ShopEmailTemplate)\n                ->where('group', 'contact_to_admin')\n                ->where('status', 1)\n                ->first();\n            if ($checkContent) {\n                $content = $checkContent->text;\n                $dataFind = [\n                    '/\\{\\{\\$title\\}\\}/',\n                    '/\\{\\{\\$name\\}\\}/',\n                    '/\\{\\{\\$email\\}\\}/',\n                    '/\\{\\{\\$phone\\}\\}/',\n                    '/\\{\\{\\$content\\}\\}/',\n                ];\n                $dataReplace = [\n                    $data['title'],\n                    $data['name'],\n                    $data['email'],\n                    $data['phone'],\n                    $data['content'],\n                ];\n                $content = preg_replace($dataFind, $dataReplace, $content);\n                $dataView = [\n                    'content' => $content,\n                ];\n\n                $config = [\n                    'to' => sc_store('email'),\n                    'replyTo' => $data['email'],\n                    'subject' => $data['title'],\n                ];\n                sc_send_mail($this->templatePath . '.mail.contact_to_admin', $dataView, $config, []);\n            }\n        }\n\n        return redirect()\n            ->route('contact')\n            ->with('success', trans('front.thank_contact'));\n    }\n\n    /**\n     * Render page\n     * @param  [string] $alias\n     */\n    public function pageDetail($alias)\n    {\n        $page = (new ShopPage)->getDetail($alias, $type = 'alias');\n        if ($page) {\n\n            sc_check_view($this->templatePath . '.screen.shop_page');\n            return view(\n                $this->templatePath . '.screen.shop_page',\n                array(\n                    'title' => $page->title,\n                    'description' => $page->description,\n                    'keyword' => $page->keyword,\n                    'page' => $page,\n                    'og_image' => asset($page->getImage()),\n                    'layout_page' => 'shop_page',\n                )\n            );\n        } else {\n            return $this->pageNotFound();\n        }\n    }\n\n    /**\n     * Render news\n     * @return [type] [description]\n     */\n    public function news()\n    {\n        $news = (new ShopNews)\n            ->setLimit(sc_config('news_list'))\n            ->setPaginate()\n            ->getData();\n\n        sc_check_view($this->templatePath . '.screen.shop_news');\n        return view(\n            $this->templatePath . '.screen.shop_news',\n            array(\n                'title' => trans('front.blog'),\n                'description' => sc_store('description'),\n                'keyword' => sc_store('keyword'),\n                'news' => $news,\n                'layout_page' => 'news_list',\n            )\n        );\n    }\n\n    /**\n     * News detail\n     *\n     * @param   [string]  $alias \n     *\n     * @return  view\n     */\n    public function newsDetail($alias)\n    {\n        $news = (new ShopNews)->getDetail($alias, $type ='alias');\n        if ($news) {\n            sc_check_view($this->templatePath . '.screen.shop_news_detail');\n            return view(\n                $this->templatePath . '.screen.shop_news_detail',\n                array(\n                    'title' => $news->title,\n                    'news' => $news,\n                    'description' => $news->description,\n                    'keyword' => $news->keyword,\n                    'og_image' => asset($news->getImage()),\n                    'layout_page' => 'news_detail',\n                )\n            );\n        } else {\n            return $this->pageNotFound();\n        }\n    }\n\n    /**\n     * email subscribe\n     * @param  Request $request\n     * @return json\n     */\n    public function emailSubscribe(Request $request)\n    {\n        $validator = $request->validate([\n            'subscribe_email' => 'required|email',\n            ], [\n            'email.required' => trans('validation.required'),\n            'email.email'    => trans('validation.email'),\n        ]);\n        $data       = $request->all();\n        $checkEmail = ShopSubscribe::where('email', $data['subscribe_email'])\n            ->first();\n        if (!$checkEmail) {\n            ShopSubscribe::insert(['email' => $data['subscribe_email']]);\n        }\n        return redirect()->back()\n            ->with(['success' => trans('subscribe.subscribe_success')]);\n    }\n\n}\n", "<?php\n#S-Cart/Core/Front/Models/ShopOrder.php\nnamespace SCart\\Core\\Front\\Models;\n\nuse SCart\\Core\\Front\\Models\\ShopOrderDetail;\nuse SCart\\Core\\Front\\Models\\ShopOrderHistory;\nuse SCart\\Core\\Front\\Models\\ShopOrderTotal;\nuse SCart\\Core\\Front\\Models\\ShopProduct;\nuse DB;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse SCart\\Core\\Front\\Models\\ModelTrait;\n\nclass ShopOrder extends Model\n{\n    use ModelTrait;\n\n    public $table = SC_DB_PREFIX.'shop_order';\n    protected $guarded = [];\n    protected $connection = SC_CONNECTION;\n\n    protected  $sc_order_profile = 0; // 0: all, 1: only user's order\n    public $sc_status = 1;\n    \n    public function details()\n    {\n        return $this->hasMany(ShopOrderDetail::class, 'order_id', 'id');\n    }\n    public function orderTotal()\n    {\n        return $this->hasMany(ShopOrderTotal::class, 'order_id', 'id');\n    }\n\n    public function customer()\n    {\n        return $this->belongsTo('SCart\\Core\\Front\\Models\\ShopCustomer', 'customer_id', 'id');\n    }\n    public function orderStatus()\n    {\n        return $this->hasOne(ShopOrderStatus::class, 'id', 'status');\n    }\n    public function paymentStatus()\n    {\n        return $this->hasOne(ShopPaymentStatus::class, 'id', 'payment_status');\n    }\n    public function history()\n    {\n        return $this->hasMany(ShopOrderHistory::class, 'order_id', 'id');\n    }\n    protected static function boot()\n    {\n        parent::boot();\n        // before delete() method call this\n        static::deleting(function ($order) {\n            foreach ($order->details as $key => $orderDetail) {\n                $item = ShopProduct::find($orderDetail->product_id);\n                //Update stock, sold\n                ShopProduct::updateStock($orderDetail->product_id, -$orderDetail->qty);\n\n            }\n            $order->details()->delete(); //delete order details\n            $order->orderTotal()->delete(); //delete order total\n            $order->history()->delete(); //delete history\n\n        });\n    }\n\n/**\n * Update status order\n * @param  [type]  $orderId\n * @param  integer $status\n * @param  string  $msg\n */\n    public function updateStatus($orderId, $status = 0, $msg = '')\n    {\n        $customer = auth()->user();\n        $uID = $customer->id ?? 0;\n        $order = $this->find($orderId);\n        if ($order) {\n            //Update status\n            $order->update(['status' => (int) $status]);\n\n            //Add history\n            $dataHistory = [\n                'order_id' => $orderId,\n                'content' => $msg,\n                'customer_id' => $uID,\n                'order_status_id' => $status,\n            ];\n            $this->addOrderHistory($dataHistory);\n        }\n    }\n\n//Scort\n    public function scopeSort($query, $sortBy = null, $sortOrder = 'desc')\n    {\n        $sortBy = $sortBy ?? 'sort';\n        return $query->orderBy($sortBy, $sortOrder);\n    }\n\n    /**\n     * Create new order\n     * @param  [array] $dataOrder\n     * @param  [array] $dataTotal\n     * @param  [array] $arrCartDetail\n     * @return [array]\n     */\n    public function createOrder($dataOrder, $dataTotal, $arrCartDetail)\n    {\n        //Process escape\n        $dataOrder     = sc_clean($dataOrder);\n        $dataTotal     = sc_clean($dataTotal);\n        $arrCartDetail = sc_clean($arrCartDetail);\n\n        try {\n            DB::connection(SC_CONNECTION)->beginTransaction();\n            $dataOrder['domain'] = url('/');\n            $uID = $dataOrder['customer_id'];\n            $currency = $dataOrder['currency'];\n            $exchange_rate = $dataOrder['exchange_rate'];\n\n            //Insert order\n            $order = ShopOrder::create($dataOrder);\n            $orderID = $order->id;\n            //End insert order\n\n            //Insert order total\n            foreach ($dataTotal as $key => $row) {\n                array_walk($row, function (&$v, $k) {\n                    return $v = sc_clean($v);\n                    }\n                );\n                $row['order_id'] = $orderID;\n                $row['created_at'] = date('Y-m-d H:i:s');\n                $dataTotal[$key] = $row;\n            }\n            ShopOrderTotal::insert($dataTotal);\n            //End order total\n\n            //Order detail\n            foreach ($arrCartDetail as $cartDetail) {\n                $pID = $cartDetail['product_id'];\n                $product = ShopProduct::find($pID);\n                //If product out of stock\n                if (!sc_config('product_buy_out_of_stock') && $product->stock < $cartDetail['qty']) {\n                    return $return = ['error' => 1, 'msg' => trans('cart.over', ['item' => $product->sku])];\n                }\n                //\n                $tax = (sc_tax_price($cartDetail['price'], $product->getTaxValue()) - $cartDetail['price']) *  $cartDetail['qty'];\n\n                $cartDetail['order_id'] = $orderID;\n                $cartDetail['currency'] = $currency;\n                $cartDetail['exchange_rate'] = $exchange_rate;\n                $cartDetail['sku'] = $product->sku;\n                $cartDetail['tax'] = $tax;\n                $cartDetail['store_id'] = $cartDetail['store_id'];\n                $this->addOrderDetail($cartDetail);\n\n                //Update stock and sold\n                ShopProduct::updateStock($pID, $cartDetail['qty']);\n            }\n            //End order detail\n\n            //Add order store - MultiStorePro\n            if (function_exists('sc_store_create_order')) {\n                sc_store_create_order($orderID);\n            }\n\n            //Add history\n            $dataHistory = [\n                'order_id' => $orderID,\n                'content' => 'New order',\n                'customer_id' => $uID,\n                'order_status_id' => $order->status,\n            ];\n            $this->addOrderHistory($dataHistory);\n\n            //Process Discount\n            $codeDiscount = session('Discount') ?? '';\n            if ($codeDiscount) {\n                if (!empty(sc_config('Discount'))) {\n                    $moduleClass = sc_get_class_plugin_controller($code = 'Total', $key = 'Discount');\n                    $returnModuleDiscount = (new $moduleClass)->apply($codeDiscount, $uID, $msg = 'Order #' . $orderID);\n                    $arrReturnModuleDiscount = json_decode($returnModuleDiscount, true);\n                    if ($arrReturnModuleDiscount['error'] == 1) {\n                        if ($arrReturnModuleDiscount['msg'] == 'error_code_not_exist') {\n                            $msg = trans('promotion.process.invalid');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_code_cant_use') {\n                            $msg = trans('promotion.process.over');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_code_expired_disabled') {\n                            $msg = trans('promotion.process.expire');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_user_used') {\n                            $msg = trans('promotion.process.used');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_uID_input') {\n                            $msg = trans('promotion.process.customer_id_invalid');\n                        } elseif ($arrReturnModuleDiscount['msg'] == 'error_login') {\n                            $msg = trans('promotion.process.must_login');\n                        } else {\n                            $msg = trans('promotion.process.undefined');\n                        }\n                        return redirect()->route('cart')->with(['error_discount' => $msg]);\n                    }\n                }\n            }\n            // End process Discount\n\n            DB::connection(SC_CONNECTION)->commit();\n            $return = ['error' => 0, 'orderID' => $orderID, 'msg' => \"\"];\n        } catch (\\Throwable $e) {\n            DB::connection(SC_CONNECTION)->rollBack();\n            $return = ['error' => 1, 'msg' => $e->getMessage()];\n        }\n        return $return;\n    }\n\n/**\n * Add order history\n * @param [array] $dataHistory\n */\n    public function addOrderHistory($dataHistory)\n    {\n        $dataHistory['admin_id'] = (\\Admin::user())?\\Admin::user()->id:0;\n        return ShopOrderHistory::create($dataHistory);\n    }\n\n/**\n * Add order detail\n * @param [type] $dataDetail [description]\n */\n    public function addOrderDetail($dataDetail)\n    {\n        return ShopOrderDetail::create($dataDetail);\n    }\n\n\n    /**\n     * Start new process get data\n     *\n     * @return  new model\n     */\n    public function start() {\n        if($this->sc_order_profile) {\n            $obj = (new ShopOrder);\n            $obj->sc_order_profile = 1;\n            return $obj;\n        } else {\n            return new ShopOrder;\n        }\n    }\n\n    /**\n     * Get order detail\n     *\n     * @param   [int]  $orderID \n     *\n     */\n    public function getDetail($orderID)\n    {\n        if(empty($orderID)) {\n            return null;\n        }\n        $customer = auth()->user();\n        if ($customer) {\n            return $this->where('id', $orderID)\n                ->where('customer_id', $customer->id)\n                ->first();\n        } else {\n            return null;\n        }\n\n    }\n\n    /**\n     * Disable only user's order mode\n     */\n    public function setOrderProfile() {\n        $this->sc_order_profile = 1;\n        $this->sc_status = 'all' ;\n        return $this;\n    }\n\n    public function profile() {\n        $this->setOrderProfile();\n        return $this;\n    }\n\n    /**\n     * Get list order new\n     */\n    public function getOrderNew() {\n        $this->sc_status = 1;\n        return $this;\n    }\n\n    /**\n     * Get list order processing\n     */\n    public function getOrderProcessing() {\n        $this->sc_status = 2;\n        return $this;\n    }\n\n    /**\n     * Get list order hold\n     */\n    public function getOrderHold() {\n        $this->sc_status = 3;\n        return $this;\n    }\n\n    /**\n     * Get list order canceld\n     */\n    public function getOrderCanceled() {\n        $this->sc_status = 4;\n        return $this;\n    }\n\n    /**\n     * Get list order done\n     */\n    public function getOrderDone() {\n        $this->sc_status = 5;\n        return $this;\n    }\n\n    /**\n     * Get list order failed\n     */\n    public function getOrderFailed() {\n        $this->sc_status = 6;\n        return $this;\n    }\n\n    /**\n     * build Query\n     */\n    public function buildQuery() {\n        $customer = auth()->user();\n        if ($this->sc_order_profile == 1) {\n            if(!$customer) {\n                return null;\n            }\n            $uID = $customer->id;\n            $query = $this->with('orderTotal')->where('customer_id', $uID);\n        } else {\n            $query = $this->with('orderTotal')->with('details');\n        }\n\n        if ($this->sc_status !== 'all') {\n            $query = $query->where('status', $this->sc_status);\n        }\n\n        if (count($this->sc_moreWhere)) {\n            foreach ($this->sc_moreWhere as $key => $where) {\n                if(count($where)) {\n                    $query = $query->where($where[0], $where[1], $where[2]);\n                }\n            }\n        }\n\n        if ($this->random) {\n            $query = $query->inRandomOrder();\n        } else {\n            if (is_array($this->sc_sort) && count($this->sc_sort)) {\n                foreach ($this->sc_sort as  $rowSort) {\n                    if(is_array($rowSort) && count($rowSort) == 2) {\n                        $query = $query->sort($rowSort[0], $rowSort[1]);\n                    }\n                }\n            }\n        }\n\n        return $query;\n    }\n\n    /**\n     * Update value balance, received when order capture full money with payment method\n     *\n     * @return  [type]  [return description]\n     */\n    public function processPaymentPaid() {\n        $total = $this->total;\n        $this->balance = 0;\n        $this->received = -$total;\n        $this->save();\n        (new ShopOrderTotal)\n            ->where('order_id', $this->id)\n            ->where('code', 'received')\n            ->update(['value' =>  -$total]);\n    }\n}\n"], "filenames": ["src/Front/Controllers/ShopCartController.php", "src/Front/Controllers/ShopContentController.php", "src/Front/Models/ShopOrder.php"], "buggy_code_start_loc": [418, 202, 108], "buggy_code_end_loc": [599, 202, 112], "fixing_code_start_loc": [419, 203, 109], "fixing_code_end_loc": [607, 206, 115], "type": "CWE-79", "message": "The package s-cart/core before 4.4 are vulnerable to Cross-site Scripting (XSS) via the admin panel.", "other": {"cve": {"id": "CVE-2020-28456", "sourceIdentifier": "report@snyk.io", "published": "2020-12-15T16:15:15.883", "lastModified": "2020-12-16T16:01:07.557", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package s-cart/core before 4.4 are vulnerable to Cross-site Scripting (XSS) via the admin panel."}, {"lang": "es", "value": "El paquete s-cart/core versiones anteriores a 4.4 es vulnerable a un ataque de tipo Cross-site Scripting (XSS) por medio del panel de administraci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:s-cart:s-cart:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.4", "matchCriteriaId": "0AE3F2B2-1DF8-4087-83F6-C1A699A1A462"}]}]}], "references": [{"url": "https://github.com/s-cart/core/commit/f4b2811293063a3a2bb497b2512d8a18bd202219", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/s-cart/s-cart/issues/52", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/s-cart/s-cart/releases/tag/v4.4", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-PHP-SCARTCORE-1047609", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/s-cart/core/commit/f4b2811293063a3a2bb497b2512d8a18bd202219"}}