{"buggy_code": ["const bootbox = require('bootbox');\n\nrequire('../services/Requisitions');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  const policyView = require('../../views/policy.html');\n  const moveView = require('../../views/move.html');\n  const detectorView = require('../../views/detector.html');\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name ForeignSourceController\n  * @module onms-requisitions\n  *\n  * @requires $scope Angular local scope\n  * @requires $routeParams Angular route parameters\n  * @requires $window Document window\n  * @requires $uibModal Angular UI modal\n  * @required filterFilter the Angular filter\n  * @required Configuration The configuration object\n  * @requires RequisitionsService The requisitions service\n  * @requires growl The growl plugin for instant notifications\n  *\n  * @description The controller for manage foreign source definitions (i.e. policies and detectors)\n  */\n  .controller('ForeignSourceController', ['$scope', '$routeParams', '$window', '$uibModal', 'filterFilter', 'Configuration', 'RequisitionsService', 'growl', function($scope, $routeParams, $window, $uibModal, filterFilter, Configuration, RequisitionsService, growl) {\n\n    /**\n    * @description The timing status.\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#timingStatus\n    * @propertyOf ForeignSourceController\n    * @returns {object} The timing status object\n    */\n    $scope.timingStatus = RequisitionsService.getTiming();\n\n    /**\n    * @description The foreign source (a.k.a the name of the requisition).\n    * The default value is obtained from the $routeParams.\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#foreignSource\n    * @propertyOf ForeignSourceController\n    * @returns {string} The foreign source\n    */\n    $scope.foreignSource = $routeParams.foreignSource;\n\n    /**\n    * @description The foreign source definition object\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#foreignSourceDef\n    * @propertyOf ForeignSourceController\n    * @returns {object} The foreign source definition\n    */\n    $scope.foreignSourceDef = { detectors: [], policies: [] };\n\n    /**\n    * @description The filteres object (used to track the content of the search fields)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#filters\n    * @propertyOf ForeignSourceController\n    * @returns {object} The filteres object\n    */\n    $scope.filters = { detector: null, policy: null };\n\n    /**\n    * @description The filtered list of detectors\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#filteredDetectors\n    * @propertyOf ForeignSourceController\n    * @returns {array} The filtered array\n    */\n    $scope.filteredDetectors = [];\n\n    /**\n    * @description The amount of detectors per page for pagination (defaults to 10)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#detectorsPageSize\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The page size\n    */\n    $scope.detectorsPageSize = 10;\n\n    /**\n    * @description The maximum size of detector pages for pagination (defaults to 5)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#detectorsMaxSize\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The maximum size\n    */\n    $scope.detectorsMaxSize = 5;\n\n    /**\n    * @description The total amount of detectors for pagination (defaults to 0)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#detectorsTotalItems\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The total detectors\n    */\n    $scope.detectorsTotalItems = 0;\n\n    /**\n    * @description The filtered list of policies\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#filteredPolicies\n    * @propertyOf ForeignSourceController\n    * @returns {array} The filtered array\n    */\n    $scope.filteredPolicies = [];\n\n    /**\n    * @description The amount of policies per page for pagination (defaults to 10)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#policiesPageSize\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The page size\n    */\n    $scope.policiesPageSize = 10;\n\n    /**\n    * @description The maximum size of policies pages for pagination (defaults to 5)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#policiesMaxSize\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The maximum size\n    */\n    $scope.policiesMaxSize = 5;\n\n    /**\n    * @description The total amount of policies for pagination (defaults to 0)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#policiesTotalItems\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The total policies\n    */\n    $scope.policiesTotalItems = 0;\n\n    /**\n    * @description Goes to specific URL warning about changes if exist.\n    *\n    * @name ForeignSourceController:goTo\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} handler The goto handler\n    */\n    $scope.goTo = function(handler) {\n      if (this.fsForm.$dirty) {\n        bootbox.dialog({\n          message: 'There are changes on the current requisition. Are you sure you want to cancel ?',\n          title: 'Cancel Changes',\n          buttons: {\n            success: {\n              label: 'Yes',\n              className: 'btn-primary',\n              callback: handler\n            },\n            main: {\n              label: 'No',\n              className: 'btn-secondary'\n            }\n          }\n        });\n      } else {\n        handler();\n      }\n    };\n\n    /**\n    * @description Goes back to requisitions list (navigation)\n    *\n    * @name ForeignSourceController:goTop\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.goTop = function() {\n      var doGoTop = function() {\n        $window.location.href = Configuration.baseHref + '#/requisitions';\n      };\n      $scope.goTo(doGoTop);\n    };\n\n    /**\n    * @description Goes back to requisition editor (navigation)\n    *\n    * @name ForeignSourceController:goBack\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.goBack = function() {\n      var doGoBack = function() {\n        if ($scope.foreignSource === 'default') {\n          $window.location.href = Configuration.baseHref + '#/requisitions';\n        } else {\n          $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource);\n        }\n      };\n      $scope.goTo(doGoBack);\n    };\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name ForeignSourceController:errorHandler\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Returns the index of a policy\n    *\n    * @name ForeignSourceController:indexOfPolicy\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The policy object\n    */\n    $scope.indexOfPolicy = function(policy) {\n      for (var i = 0; i < $scope.foreignSourceDef.policies.length; i++) {\n        if ($scope.foreignSourceDef.policies[i].name === policy.name) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n    * @description Returns the index of a detector\n    *\n    * @name ForeignSourceController:indexOfDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The detector object\n    */\n    $scope.indexOfDetector = function(detector) {\n      for (var i = 0; i < $scope.foreignSourceDef.detectors.length; i++) {\n        if ($scope.foreignSourceDef.detectors[i].name === detector.name) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n    * @description Opens the modal window to add/edit a policy\n    *\n    * @name ForeignSourceController:editPolicy\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The policy object to edit\n    * @param {boolean} isNew true, if the policy is new\n    */\n    $scope.editPolicy = function(policy, isNew) {\n      var form = this.fsForm;\n      $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'PolicyController',\n        templateUrl: policyView,\n        resolve: {\n          policy: function() { return angular.copy(policy); }\n        }\n      }).result.then(function(result) {\n        angular.copy(result, policy);\n        form.$dirty = true;\n      }, function() {\n        if (isNew) {\n          $scope.foreignSourceDef.policies.pop();\n        }\n      });\n    };\n\n    /**\n    * @description Opens the modal window to move a policy\n    *\n    * @name ForeignSourceController:moveDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The policy object to move\n    */\n    $scope.movePolicy = function(policy) {\n      var form = this.fsForm;\n      var pos = $scope.indexOfPolicy(policy);\n      var max = $scope.foreignSourceDef.policies.length - 1;\n      $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        size: 'sm',\n        controller: 'MoveController',\n        templateUrl: moveView,\n        resolve: {\n          label: function() { return policy.name; },\n          position: function() { return pos; },\n          maximum: function() { return max; }\n        }\n      }).result.then(function(dst) {\n        form.$dirty = true;\n        $scope.foreignSourceDef.policies.splice(pos, 1);\n        $scope.foreignSourceDef.policies.splice(dst, 0, policy);\n\n      });\n    };\n\n    /**\n    * @description Removes a policy\n    *\n    * @name ForeignSourceController:removePolicy\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The policy object to remove\n    */\n    $scope.removePolicy = function(policy) {\n      var index = $scope.indexOfPolicy(policy);\n      if (index > -1) {\n        $scope.foreignSourceDef.policies.splice(index, 1);\n        this.fsForm.$dirty = true;\n      }\n    };\n\n    /**\n    * @description Adds a new policy\n    *\n    * @name ForeignSourceController:addPolicy\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.addPolicy = function() {\n      $scope.foreignSourceDef.policies.push({ 'name': '', 'class': '', 'parameter': [] });\n      var index = $scope.foreignSourceDef.policies.length - 1;\n      $scope.editPolicy($scope.foreignSourceDef.policies[index], true);\n    };\n\n    /**\n    * @description Opens the modal window to add/edit a detector\n    *\n    * @name ForeignSourceController:editDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} detector The detector object to edit\n    * @param {boolean} isNew true, if the detector is new\n    */\n    $scope.editDetector = function(detector, isNew) {\n      var form = this.fsForm;\n      $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'DetectorController',\n        templateUrl: detectorView,\n        resolve: {\n          detector: function() { return angular.copy(detector); }\n        }\n      }).result.then(function(result) {\n        angular.copy(result, detector);\n        form.$dirty = true;\n      }, function() {\n        if (isNew) {\n          $scope.foreignSourceDef.detectors.pop();\n        }\n      });\n    };\n\n    /**\n    * @description Opens the modal window to move a detector\n    *\n    * @name ForeignSourceController:moveDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} detector The detector object to move\n    */\n    $scope.moveDetector = function(detector) {\n      var form = this.fsForm;\n      var pos = $scope.indexOfDetector(detector);\n      var max = $scope.foreignSourceDef.detectors.length - 1;\n      $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        size: 'sm',\n        controller: 'MoveController',\n        templateUrl: moveView,\n        resolve: {\n          label: function() { return detector.name; },\n          position: function() { return pos; },\n          maximum: function() { return max; }\n        }\n      }).result.then(function(dst) {\n        form.$dirty = true;\n        $scope.foreignSourceDef.detectors.splice(pos, 1);\n        $scope.foreignSourceDef.detectors.splice(dst, 0, detector);\n\n      });\n    };\n\n    /**\n    * @description Removes a detector\n    *\n    * @name ForeignSourceController:removeDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} detector The detector object to remove\n    */\n    $scope.removeDetector = function(detector) {\n      var index = $scope.indexOfDetector(detector);\n      if (index > -1) {\n        $scope.foreignSourceDef.detectors.splice(index, 1);\n        this.fsForm.$dirty = true;\n      }\n    };\n\n    /**\n    * @description Adds a new detector\n    *\n    * @name ForeignSourceController:addDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.addDetector = function() {\n      $scope.foreignSourceDef.detectors.push({ 'name': '', 'class': '', 'parameter': [] });\n      var index = $scope.foreignSourceDef.detectors.length - 1;\n      $scope.editDetector($scope.foreignSourceDef.detectors[index], true);\n    };\n\n    /**\n    * @description Saves the local foreign source on the server\n    *\n    * @name ForeignSourceController:save\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.save = function() {\n      var form = this.fsForm;\n      RequisitionsService.startTiming();\n      RequisitionsService.saveForeignSourceDefinition($scope.foreignSourceDef).then(\n        function() { // success\n          growl.success('The definition for the requisition ' + $scope.foreignSource + ' has been saved.');\n          form.$dirty = false;\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Resets to the default set of detectors and policies\n    *\n    * @name ForeignSourceController:reset\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.reset = function() {\n      bootbox.confirm('Are you sure you want to reset the foreign source definition to the default ?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.deleteForeignSourceDefinition($scope.foreignSource).then(\n            function() { // success\n              growl.success('The foreign source definition for ' + $scope.foreignSource + 'has been reseted.');\n              $scope.initialize();\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Updates the pagination variables for the policies.\n    *\n    * @name ForeignSourceController:updateFilteredPolicies\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.updateFilteredPolicies = function() {\n      $scope.policiesCurrentPage = 1;\n      $scope.policiesTotalItems = $scope.filteredPolicies.length;\n      $scope.policiesNumPages = Math.ceil($scope.policiesTotalItems / $scope.policiesPageSize);\n    };\n\n    /**\n    * @description Updates the pagination variables for the detectors.\n    *\n    * @name ForeignSourceController:updateFilteredDetectors\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.updateFilteredDetectors = function() {\n      $scope.detectorsCurrentPage = 1;\n      $scope.detectorsTotalItems = $scope.filteredDetectors.length;\n      $scope.detectorsNumPages = Math.ceil($scope.detectorsTotalItems / $scope.detectorsPageSize);\n    };\n\n    /**\n    * @description Initialized the local foreign source definition from the server\n    *\n    * @name ForeignSourceController:initialize\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.initialize = function() {\n      growl.success('Retrieving definition for requisition ' + $scope.foreignSource + '...');\n      RequisitionsService.getForeignSourceDefinition($scope.foreignSource).then(\n        function(foreignSourceDef) { // success\n          $scope.foreignSourceDef = foreignSourceDef;\n          // Updating pagination variables for detectors.\n          $scope.filteredDetectors = $scope.foreignSourceDef.detectors;\n          $scope.updateFilteredDetectors();\n          // Updating pagination variables for policies.\n          $scope.filteredPolicies = $scope.foreignSourceDef.policies;\n          $scope.updateFilteredPolicies();\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Watch for filter changes in order to update the detector list and updates the pagination control\n    *\n    * @name ForeignSourceController:detectorFilter\n    * @ngdoc event\n    * @methodOf ForeignSourceController\n    */\n    $scope.$watch('filters.detector', function() {\n      $scope.filteredDetectors = filterFilter($scope.foreignSourceDef.detectors, $scope.filters.detector);\n      $scope.updateFilteredDetectors();\n    });\n\n    /**\n    * @description Watch for filter changes in order to update the policy list and updates the pagination control\n    *\n    * @name ForeignSourceController:policyFilter\n    * @ngdoc event\n    * @methodOf ForeignSourceController\n    */\n    $scope.$watch('filters.policy', function() {\n      $scope.filteredPolicies = filterFilter($scope.foreignSourceDef.policies, $scope.filters.policy);\n      $scope.updateFilteredPolicies();\n    });\n\n    // Initialization\n\n    if ($scope.foreignSource) {\n      $scope.initialize();\n    }\n  }]);\n\n}());\n", "const bootbox = require('bootbox');\n\nrequire('../services/Requisitions');\n\nconst RequisitionNode = require('../model/RequisitionNode');\nconst RequisitionMetaDataEntry = require('../model/RequisitionMetaDataEntry');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  const assetView = require('../../views/asset.html');\n  const metaDataView = require('../../views/metadata.html');\n  const interfaceView = require('../../views/interface.html');\n\n  const nodeBasicView = require('../../views/node-basic.html');\n  const nodePathoutagesView = require('../../views/node-pathoutages.html');\n  const nodeInterfacesView = require('../../views/node-interfaces.html');\n  const nodeAssetsView = require('../../views/node-assets.html');\n  const nodeMetaDataView = require('../../views/node-metadata.html');\n  const nodeCategoriesView = require('../../views/node-categories.html');\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name NodeController\n  * @module onms-requisitions\n  *\n  * @requires $scope Angular local scope\n  * @requires $routeParams Angular route params\n  * @requires $cookies Angular cookies\n  * @requires $window Document window\n  * @requires $uibModal Angular UI modal\n  * @required Configuration The configuration object\n  * @requires RequisitionsService The requisitions service\n  * @requires growl The growl plugin for instant notifications\n  *\n  * @description The controller for manage requisitioned nodes (add/edit the nodes on a specific requisition)\n  */\n  .controller('NodeController', ['$scope', '$routeParams', '$cookies', '$window', '$uibModal', 'Configuration', 'RequisitionsService', 'growl', function($scope, $routeParams, $cookies, $window, $uibModal, Configuration, RequisitionsService, growl) {\n    $scope.nodeBasicView = nodeBasicView;\n    $scope.nodePathoutagesView = nodePathoutagesView;\n    $scope.nodeInterfacesView = nodeInterfacesView;\n    $scope.nodeAssetsView = nodeAssetsView;\n    $scope.nodeMetaDataView = nodeMetaDataView;\n    $scope.nodeCategoriesView = nodeCategoriesView;\n\n    /**\n    * @description The timing status.\n    *\n    * @ngdoc property\n    * @name NodeController#timingStatus\n    * @propertyOf NodeController\n    * @returns {object} The timing status object\n    */\n    $scope.timingStatus = RequisitionsService.getTiming();\n\n    /**\n    * @description The foreign source (a.k.a the name of the requisition).\n    * The default value is obtained from the $routeParams.\n    *\n    * @ngdoc property\n    * @name NodeController#foreignSource\n    * @propertyOf NodeController\n    * @returns {string} The foreign source\n    */\n    $scope.foreignSource = $routeParams.foreignSource;\n\n    /**\n    * @description The foreign ID\n    * The default value is obtained from the $routeParams.\n    * For new nodes, the content must be '__new__'.\n    *\n    * @ngdoc property\n    * @name NodeController#foreignId\n    * @propertyOf NodeController\n    * @returns {string} The foreign ID\n    */\n    $scope.foreignId = $routeParams.foreignId;\n\n    /**\n    * @description The isNew flag\n    *\n    * @ngdoc property\n    * @name NodeController#isNew\n    * @propertyOf NodeController\n    * @returns {boolean} true, if the foreign ID is equal to '__new__'\n    */\n    $scope.isNew = $scope.foreignId === '__new__';\n\n    /**\n    * @description The node object\n    *\n    * @ngdoc property\n    * @name NodeController#node\n    * @propertyOf NodeController\n    * @returns {object} The node object\n    */\n    $scope.node = {};\n\n    /**\n    * @description The available configured categories\n    *\n    * @ngdoc property\n    * @name NodeController#availableCategories\n    * @propertyOf NodeController\n    * @returns {array} The categories\n    */\n    $scope.availableCategories = [];\n\n    /**\n    * @description The available configured locations\n    *\n    * @ngdoc property\n    * @name NodeController#availableLocations\n    * @propertyOf NodeController\n    * @returns {array} The locations\n    */\n    $scope.availableLocations = [];\n\n    /**\n    * @description The list of black-listed foreign IDs.\n    * The foreignId must be unique within the requisition.\n    * For an existing node, the foreignId should not be changed.\n    * For new nodes, the foreignId must be validated.\n    *\n    * @ngdoc property\n    * @name NodeController#foreignIdBlackList\n    * @propertyOf NodeController\n    * @returns {array} The list of black-listed foreign IDs.\n    */\n    $scope.foreignIdBlackList = [];\n\n    /**\n    * @description Goes to specific URL warning about changes if exist.\n    *\n    * @name NodeController:goTo\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {string} url The URL to go\n    */\n    $scope.goTo = function(url) {\n      var doGoTo = function() {\n        $window.location.href = url;\n      };\n      if (this.nodeForm.$dirty) {\n        bootbox.dialog({\n          message: 'There are changes on the current node. Are you sure you want to cancel ?',\n          title: 'Cancel Changes',\n          buttons: {\n            success: {\n              label: 'Yes',\n              className: 'btn-primary',\n              callback: doGoTo\n            },\n            main: {\n              label: 'No',\n              className: 'btn-secondary'\n            }\n          }\n        });\n      } else {\n        doGoTo();\n      }\n    };\n\n    /**\n    * @description Goes back to requisitions list (navigation)\n    *\n    * @name NodeController:goTop\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.goTop = function() {\n      $scope.goTo(Configuration.baseHref + '#/requisitions');\n    };\n\n    /**\n    * @description Goes back to requisition editor (navigation)\n    *\n    * @name NodeController:goBack\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.goBack = function() {\n      $scope.goTo(Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource));\n    };\n\n    /**\n    * @description Goes to the vertical layout page (navigation)\n    *\n    * @name NodeController:goVerticalLayout\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.goVerticalLayout = function() {\n      $cookies.put('use_requisitions_node_vertical_layout', 'true');\n      $scope.goTo(Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/nodes/' + encodeURIComponent($scope.foreignId) + '/vertical');\n    };\n\n    /**\n    * @description Goes to the horizontal layout page (navigation)\n    *\n    * @name NodeController:goHorizontalLayout\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.goHorizontalLayout = function() {\n      $cookies.put('use_requisitions_node_vertical_layout', 'false');\n      $scope.goTo(Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/nodes/' + encodeURIComponent($scope.foreignId));\n    };\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name NodeController:errorHandler\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Generates a foreign Id\n    *\n    * @name NodeController:generateForeignId\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {object} the form object associated with the foreignId\n    */\n    $scope.generateForeignId = function(formObj) {\n      $scope.node.foreignId = String(new Date().getTime());\n      formObj.$invalid = false;\n    };\n\n    /**\n    * @description Shows the dialog for add/edit an asset field\n    *\n    * @name NodeController:editAsset\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the asset to be edited\n    * @param {boolean} isNew true, if the asset is new\n    */\n    $scope.editAsset = function(index, isNew) {\n      var form = this.nodeForm;\n      var assetToEdit = $scope.node.assets[index];\n      var assetsBlackList = [];\n      angular.forEach($scope.node.assets, function(asset) {\n        assetsBlackList.push(asset.name);\n      });\n\n      var modalInstance = $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'AssetController',\n        templateUrl: assetView,\n        resolve: {\n          asset: function() { return angular.copy(assetToEdit); },\n          assetsBlackList: function() { return assetsBlackList; }\n        }\n      });\n\n      modalInstance.result.then(function(result) {\n        angular.copy(result, assetToEdit);\n        form.$dirty = true;\n      }, function() {\n        if (isNew) {\n          $scope.node.assets.pop();\n        }\n      });\n    };\n\n    /**\n    * @description Removes an asset from the local node\n    *\n    * @name NodeController:removeAsset\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the asset to be removed\n    */\n    $scope.removeAsset = function(index) {\n      $scope.node.assets.splice(index, 1);\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Adds a new asset to the local node\n    *\n    * @name NodeController:addAsset\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.addAsset = function() {\n      $scope.editAsset($scope.node.addNewAsset(), true);\n    };\n\n    /**\n     * @description Should be called when the meta-data tab is selected\n     *\n     * @name NodeController:onMetadataTabSelect\n     * @ngdoc method\n     * @methodOf NodeController\n     */\n    $scope.onMetadataTabSelect = function() {\n      // Before switching over to the tab, let's delete any entries that reference entities which no longer exist\n      // i.e. in the case that meta-data was associated with an interface, and that interface is now deleted\n      $scope.node.metaData.removeEntriesForMissingScopedEntities();\n    };\n\n    $scope.deleteNode = function(node) {\n      bootbox.confirm('Are you sure you want to delete the current node?', function(ok) {\n      if (ok) {\n        RequisitionsService.startTiming();\n        RequisitionsService.deleteNode(node)\n            .then(function() {\n              $scope.nodeForm.$setPristine(); // Ignore dirty state\n              $scope.goBack();\n              // If node was just created, it has no label yet\n              if (node.nodeLabel) {\n                growl.success('The node ' + node.nodeLabel + ' has been deleted.');\n              } else {\n                growl.success('The node has been deleted.');\n              }\n            },\n            $scope.errorHandler\n        );\n      }\n      });\n    };\n\n    /**\n     * @description Shows the dialog for add/edit an metaData entry\n     *\n     * @name NodeController:editMetaData\n     * @ngdoc method\n     * @methodOf NodeController\n     * @param {object} entry The metaData entry to be edited\n     * @param {boolean} isNew true, if the metaData entry is new\n     */\n    $scope.editMetaData = function(entry, isNew) {\n        const form = this.nodeForm;\n\n      const modalInstance = $uibModal.open({\n            backdrop: 'static',\n            keyboard: false,\n            controller: 'MetaDataController',\n            templateUrl: metaDataView,\n            resolve: {\n                node: function() { return angular.copy($scope.node); },\n                entry: function() { return angular.copy(entry); }\n            }\n        });\n\n        modalInstance.result.then(function(result) {\n            angular.copy(result, entry);\n            form.$dirty = true;\n            if (isNew) {\n              $scope.node.metaData.addEntry(entry);\n            }\n        });\n    };\n\n    /**\n     * @description Removes an metaData entry from the local node\n     *\n     * @name NodeController:removeMetaData\n     * @ngdoc method\n     * @methodOf NodeController\n     * @param {object} entry The index of the metaData entry to be removed\n     */\n    $scope.removeMetaData = function(entry) {\n      $scope.node.metaData.removeEntry(entry);\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n     * @description Adds a new metaData entry to the local node\n     *\n     * @name NodeController:addMetaData\n     * @ngdoc method\n     * @methodOf NodeController\n     */\n    $scope.addMetaData = function() {\n        $scope.editMetaData(new RequisitionMetaDataEntry(), true);\n    };\n\n    /**\n    * @description Shows a modal dialog for add/edit an interface\n    *\n    * @name NodeController:editInterface\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the interface to be edited\n    * @param {boolean} isNew true, if the interface is new\n    */\n    $scope.editInterface = function(index, isNew) {\n      var form = this.nodeForm;\n      var intfToEdit = $scope.node.interfaces[index];\n      var foreignSource = $scope.foreignSource;\n      var foreignId = $scope.foreignId;\n      var ipBlackList = [];\n      angular.forEach($scope.node.interfaces, function(intf) {\n        ipBlackList.push(intf.ipAddress);\n      });\n\n      var modalInstance = $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'InterfaceController',\n        templateUrl: interfaceView,\n        resolve: {\n          foreignId: function() { return foreignId; },\n          foreignSource: function() { return foreignSource; },\n          requisitionInterface: function() { return angular.copy(intfToEdit); },\n          ipBlackList: function() { return ipBlackList; },\n          primaryInterface : function() { return $scope.getPrimaryAddress();}\n        }\n      });\n\n      modalInstance.result.then(function(result) {\n        angular.copy(result, intfToEdit);\n        form.$dirty = true;\n      }, function() {\n        if (isNew) {\n          $scope.node.interfaces.pop();\n        }\n      });\n    };\n\n    /**\n    * @description Removes an interface from the local node\n    *\n    * @name NodeController:removeInterface\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the interface to be removed\n    */\n    $scope.removeInterface = function(index) {\n      $scope.node.interfaces.splice(index, 1);\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Adds a new interface to the local node\n    *\n    * @name NodeController:addInterface\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.addInterface = function() {\n      $scope.editInterface($scope.node.addNewInterface(), true);\n    };\n\n    /**\n    * @description Removes a category from the local node\n    *\n    * @name NodeController:removeCategory\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the category to be removed\n    */\n    $scope.removeCategory = function(index) {\n      $scope.node.categories.splice(index, 1);\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Adds a new category to the local node\n    *\n    * @name NodeController:addCategory\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.addCategory = function() {\n      $scope.node.addNewCategory();\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Saves the local node on the server\n    *\n    * @name NodeController:save\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.save = function() {\n      var form = this.nodeForm;\n      RequisitionsService.startTiming();\n      RequisitionsService.saveNode($scope.node).then(\n        function() { // success\n          growl.success('The node ' + $scope.node.nodeLabel + ' has been saved.');\n          $scope.foreignId = $scope.node.foreignId;\n          form.$dirty = false;\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Refresh the local node from the server\n    *\n    * @name NodeController:refresh\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.refresh = function() {\n      growl.success('Retrieving node ' + $scope.foreignId + ' from requisition ' + $scope.foreignSource + '...');\n      RequisitionsService.getNode($scope.foreignSource, $scope.foreignId).then(\n        function(node) { // success\n          $scope.node = node;\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Get the unused available categories\n    *\n    * @name NodeController:getAvailableCategories\n    * @ngdoc method\n    * @methodOf NodeController\n    * @returns {array} the unused available categories\n    */\n    $scope.getAvailableCategories = function() {\n      var categories = [];\n      angular.forEach($scope.availableCategories, function(category) {\n        var found = false;\n        angular.forEach($scope.node.categories, function(c) {\n          if (c.name === category) {\n            found = true;\n          }\n        });\n        if (!found) {\n          categories.push(category);\n        }\n      });\n      return categories;\n    };\n\n    /**\n    * @description Gets the primary IP address\n    *\n    * @name NodeController:getPrimaryAddress\n    * @ngdoc method\n    * @methodOf NodeController\n    * @returns {string} the primary IP address or 'N/A' if it doesn't exist.\n    */\n    $scope.getPrimaryAddress = function() {\n      const ip = $scope.node.getPrimaryIpAddress();\n      return ip ? ip : null;\n    };\n\n    // Initialization of the node's page for either adding a new node or editing an existing node\n\n    if ($scope.isNew) {\n      $scope.node = new RequisitionNode($scope.foreignSource, {});\n    } else {\n      $scope.refresh();\n    }\n\n    // Initialize categories\n    RequisitionsService.getAvailableCategories().then(\n      function(categories) { // success\n        $scope.availableCategories = categories;\n      },\n      $scope.errorHandler\n    );\n\n    // Initialize locations\n    RequisitionsService.getAvailableLocations().then(\n      function(locations) { // success\n        $scope.availableLocations = locations;\n      },\n      $scope.errorHandler\n    );\n\n    // Initialize foreign-id black list (thanks to the cache, this call is not expensive)\n    // TODO: What if the cache is disabled ?\n    RequisitionsService.getRequisition($scope.foreignSource).then(\n      function(requisition) {\n        angular.forEach(requisition.nodes, function(node) {\n          $scope.foreignIdBlackList.push(node.foreignId);\n        });\n      },\n      $scope.errorHandler\n    );\n\n  }]);\n\n}());\n", "require('../services/Requisitions');\n\nimport Util from 'lib/util';\nconst QuickNode = require('../model/QuickNode');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  const quickAddPanelBasicView = require('../../views/quick-add-panel-basic.html');\n  const quickAddPanelSnmpView = require('../../views/quick-add-panel-snmp.html');\n  const quickAddPanelCategoriesView = require('../../views/quick-add-panel-categories.html');\n  const quickAddPanelCliView = require('../../views/quick-add-panel-cli.html');\n  const quickAddPanelHelpView = require('../../views/quick-add-panel-help.html');\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name QuickAddNodeController\n  * @module onms-requisitions\n  *\n  * @requires $scope Angular local scope\n  * @requires foreignSources The list of available requisitions (a.k.a. foreign source)\n  * @requires RequisitionsService The requisitions service\n  * @requires growl The growl plugin for instant notifications\n  *\n  * @description The controller for manage the modal dialog for quick add a node to an existing requisition.\n  */\n  .controller('QuickAddNodeController', ['$scope', 'foreignSources', 'RequisitionsService', 'growl', '$sanitize', function($scope, foreignSources, RequisitionsService, growl, $sanitize) {\n    $scope.quickAddPanelBasicView = quickAddPanelBasicView;\n    $scope.quickAddPanelSnmpView = quickAddPanelSnmpView;\n    $scope.quickAddPanelCategoriesView = quickAddPanelCategoriesView;\n    $scope.quickAddPanelCliView = quickAddPanelCliView;\n    $scope.quickAddPanelHelpView = quickAddPanelHelpView;\n\n    /**\n    * @description The available foreign sources\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#foreignSources\n    * @propertyOf QuickAddNodeController\n    * @returns {array} List of available foreign sources\n    */\n    $scope.foreignSources = [];\n\n    /**\n    * @description The available configured categories\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#availableCategories\n    * @propertyOf QuickAddNodeController\n    * @returns {array} The categories\n    */\n    $scope.availableCategories = [];\n\n    /**\n    * @description The available access methods\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#availableAccessMethods\n    * @propertyOf QuickAddNodeController\n    * @returns {array} The access methods\n    */\n    $scope.availableAccessMethods = [ 'RSH', 'SSH', 'Telnet' ];\n\n    /**\n    * @description The saving flag (true when the node is being saved)\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#isSaving\n    * @propertyOf QuickAddNodeController\n    * @returns {boolean} true when the node is being saved\n    */\n    $scope.isSaving = false;\n\n    /**\n    * @description The source object that contains all the required information for the new node\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#node\n    * @propertyOf QuickAddNodeController\n    * @returns {object} The source object\n    */\n    $scope.node = new QuickNode();\n\n    /**\n    * @description Generates a foreign Id\n    *\n    * @name QuickAddNodeController:generateForeignId\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @param {object} the form object associated with the foreignId\n    */\n    $scope.generateForeignId = function(formObj) {\n      $scope.node.foreignId = String(new Date().getTime());\n      formObj.$invalid = false;\n    };\n\n    /**\n    * @description Provision the current node\n    *\n    * @name QuickAddNodeController:provision\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    */\n    $scope.provision = function() {\n      $scope.isSaving = true;\n      growl.info($sanitize('The node ' + $scope.node.nodeLabel + ' is being added to requisition ' + $scope.node.foreignSource + '. Please wait...'));\n      var successMessage = $sanitize('The node ' + $scope.node.nodeLabel + ' has been added to requisition ' + $scope.node.foreignSource);\n      RequisitionsService.quickAddNode($scope.node).then(\n        function() { // success\n          $scope.reset();\n          bootbox.dialog({\n            message: successMessage,\n            title: 'Success',\n            buttons: {\n              main: {\n                label: 'Ok',\n                className: 'btn-secondary'\n              }\n            }\n          });\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Resets the current node\n    *\n    * @name QuickAddNodeController:reset\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    */\n    $scope.reset = function() {\n      $scope.node = new QuickNode(); // Resetting the object.\n      $scope.isSaving = false;\n    };\n\n   /**\n    * @description Get the unused available categories\n    *\n    * @name QuickAddNodeController:getAvailableCategories\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @returns {array} the unused available categories\n    */\n    $scope.getAvailableCategories = function() {\n      var categories = [];\n      angular.forEach($scope.availableCategories, function(category) {\n        var found = false;\n        angular.forEach($scope.node.categories, function(c) {\n          if (c.name === category) {\n            found = true;\n          }\n        });\n        if (!found) {\n          categories.push(category);\n        }\n      });\n      return categories;\n    };\n\n    /**\n    * @description Removes a category from the local node\n    *\n    * @name QuickAddNodeController:removeCategory\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @param {integer} index The index of the category to be removed\n    */\n    $scope.removeCategory = function(index) {\n      $scope.node.categories.splice(index, 1);\n      this.quickAddNodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Adds a new category to the local node\n    *\n    * @name QuickAddNodeController:addCategory\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    */\n    $scope.addCategory = function() {\n      $scope.node.addNewCategory();\n      this.quickAddNodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Checks if the form is valid or not\n    *\n    * @name QuickAddNodeController:isInvalid\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @returns {boolean} true if the form is invalid.\n    */\n    $scope.isInvalid = function() {\n      if (!this.quickAddNodeForm ||\n        !this.quickAddNodeForm.foreignSource ||\n        !this.quickAddNodeForm.ipAddress ||\n        !this.quickAddNodeForm.nodeLabel) {\n        return true;\n      }\n      return this.quickAddNodeForm.foreignSource.$invalid ||\n        this.quickAddNodeForm.ipAddress.$invalid ||\n        this.quickAddNodeForm.nodeLabel.$invalid;\n    };\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name QuickAddNodeController:errorHandler\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Adds a new requisition\n    *\n    * @name QuickAddNodeController:addRequisition\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    */\n    $scope.addRequisition = function() {\n      bootbox.prompt('A requisition is required, please enter the name for a new requisition', function(foreignSource) {\n        if (foreignSource) {\n          RequisitionsService.addRequisition(foreignSource).then(\n            function() { // success\n              RequisitionsService.synchronizeRequisition(foreignSource, false).then(\n                function() {\n                  growl.success('The requisition ' + foreignSource + ' has been created and synchronized.');\n                  $scope.foreignSources.push(foreignSource);\n                },\n                $scope.errorHandler\n              );\n            },\n            $scope.errorHandler\n          );\n        } else {\n          window.location.href = Util.getBaseHref() + 'admin/opennms/index.jsp'; // TODO Is this the best way ?\n        }\n      });\n    };\n\n    // Initialize categories\n    RequisitionsService.getAvailableCategories().then(\n      function(categories) { // success\n        $scope.availableCategories = categories;\n      },\n      $scope.errorHandler\n    );\n\n    // Initialize requisitions\n    if (!foreignSources) {\n      RequisitionsService.getRequisitionNames().then(\n        function(requisitions) { // success\n          $scope.foreignSources = requisitions;\n          // If there is NO requisitions, the user has to create a new one\n          if ($scope.foreignSources.length === 0) {\n            $scope.addRequisition();\n          }\n        },\n        $scope.errorHandler\n      );\n    } else {\n      $scope.foreignSources = foreignSources;\n    }\n\n  }]);\n\n}());\n", "const bootbox = require('bootbox');\n\nconst Requisition = require('../model/Requisition');\n\nrequire('../services/Requisitions');\nrequire('../services/Synchronize');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name RequisitionController\n  * @module onms-requisitions\n  *\n  * @description The controller for manage a single requisition (add/edit)\n  *\n  * @requires $scope Angular local scope\n  * @requires $filter Angular filter\n  * @requires $cookies Angular cookies\n  * @requires $window Document window\n  * @requires $routeParams Angular route parameters\n  * @required Configuration The configuration object\n  * @requires RequisitionsService The requisitions service\n  * @requires SynchronizeService The synchronize service\n  * @requires growl The growl plugin for instant notifications\n  */\n  .controller('RequisitionController', ['$scope', '$filter', '$cookies', '$window', '$routeParams', 'Configuration', 'RequisitionsService', 'SynchronizeService', 'growl', function($scope, $filter, $cookies, $window, $routeParams, Configuration, RequisitionsService, SynchronizeService, growl) {\n\n    /**\n    * @description The timing status.\n    *\n    * @ngdoc property\n    * @name RequisitionController#timingStatus\n    * @propertyOf RequisitionController\n    * @returns {object} The timing status object\n    */\n    $scope.timingStatus = RequisitionsService.getTiming();\n\n    /**\n    * @description The foreign source (a.k.a the name of the requisition).\n    * The default value is obtained from the $routeParams.\n    *\n    * @ngdoc property\n    * @name RequisitionController#foreignSource\n    * @propertyOf RequisitionController\n    * @returns {string} The foreign source\n    */\n    $scope.foreignSource = $routeParams.foreignSource;\n\n    /**\n    * @description The requisition object\n    *\n    * @ngdoc property\n    * @name RequisitionController#requisition\n    * @propertyOf RequisitionController\n    * @returns {object} The requisition object\n    */\n    $scope.requisition = new Requisition({});\n\n    /**\n    * @description The filtered list of nodes\n    *\n    * @ngdoc property\n    * @name RequisitionController#filteredNodes\n    * @propertyOf RequisitionController\n    * @returns {array} The filtered array\n    */\n    $scope.filteredNodes = [];\n\n    /**\n    * @description The amount of items per page for pagination (defaults to 10)\n    *\n    * @ngdoc property\n    * @name RequisitionController#pageSize\n    * @propertyOf RequisitionController\n    * @returns {integer} The page size\n    */\n    $scope.pageSize = 10;\n\n    /**\n    * @description The maximum size of pages for pagination (defaults to 5)\n    *\n    * @ngdoc property\n    * @name RequisitionController#maxSize\n    * @propertyOf RequisitionController\n    * @returns {integer} The maximum size\n    */\n    $scope.maxSize = 5;\n\n    /**\n    * @description The total amount of items for pagination (defaults to 0)\n    *\n    * @ngdoc property\n    * @name RequisitionController#totalItems\n    * @propertyOf RequisitionController\n    * @returns {integer} The total items\n    */\n    $scope.totalItems = 0;\n\n    /**\n    * @description Goes back to requisitions list (navigation)\n    *\n    * @name RequisitionController:goBack\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    // FIXME Should be called getTop to be consistent with the rest of the controllers\n    $scope.goBack = function() {\n      $window.location.href = Configuration.baseHref + '#/requisitions';\n    };\n\n    /**\n    * @description Goes to the edition page for the foreign source definition of the requisition (navigation)\n    *\n    * @name RequisitionController:editForeignSource\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.editForeignSource = function() {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/foreignSource';\n    };\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name RequisitionController:errorHandler\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Requests the synchronization/import of a requisition on the server\n    *\n    * A dialog box is displayed to request to the user if the scan phase should be triggered or not.\n    *\n    * @name RequisitionController:synchronize\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.synchronize = function() {\n      SynchronizeService.synchronize($scope.requisition, $scope.errorHandler);\n    };\n\n    /**\n    * @description Returns the vertical layout suffix for nodes if enabled\n    *\n    * @name RequisitionController:getVerticalLayout\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @returns {string} URL suffix for vertical layout if enabled.\n    */\n    $scope.getVerticalLayout = function() {\n      var isVertical = $cookies.get('use_requisitions_node_vertical_layout');\n      return isVertical === 'true' ? '/vertical' : '';\n    };\n\n    /**\n    * @description Goes to the page for adding a new node to the requisition (navigation)\n    *\n    * @name RequisitionController:addNode\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.addNode = function() {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/nodes/__new__' + $scope.getVerticalLayout();\n    };\n\n    /**\n    * @description Goes to the page for editing an existing node of the requisition (navigation)\n    * @description\n    *\n    * @name RequisitionController:editNode\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @param {object} The node's object to edit\n    */\n    $scope.editNode = function(node) {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/nodes/' + encodeURIComponent(node.foreignId) + $scope.getVerticalLayout();\n    };\n\n    /**\n    * @description Deletes a node from the requisition on the server and refresh the local nodes list\n    *\n    * @name RequisitionController:deleteNode\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @param {object} The node's object to delete\n    */\n    $scope.deleteNode = function(node) {\n      bootbox.confirm('Are you sure you want to remove the node ' + node.nodeLabel + '?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.deleteNode(node).then(\n            function() { // success\n              var index = -1;\n              for(var i = 0; i < $scope.filteredNodes.length; i++) {\n                if ($scope.filteredNodes[i].foreignId === node.foreignId) {\n                  index = i;\n                }\n              }\n              if (index > -1) {\n                $scope.filteredNodes.splice(index,1);\n              }\n              growl.success('The node ' + node.nodeLabel + ' has been deleted.');\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n   /**\n    * @description Updates the pagination variables for the nodes.\n    *\n    * @name RequisitionController:updateFilteredNodes\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.updateFilteredNodes = function() {\n      $scope.currentPage = 1;\n      $scope.totalItems = $scope.filteredNodes.length;\n    };\n\n    /**\n    * @description Refreshes the deployed statistics for the requisition from the server\n    *\n    * @name RequisitionController:refreshDeployedStats\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.refreshDeployedStats = function() {\n      RequisitionsService.startTiming();\n      RequisitionsService.updateDeployedStatsForRequisition($scope.requisition).then(\n        function() { // success\n          growl.success('The deployed statistics has been updated.');\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Refreshes the currently loaded requisition from the server\n    *\n    * @name RequisitionController:refreshRequisition\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.refreshRequisition = function() {\n      bootbox.confirm('Are you sure you want to reload the requisition?<br/>All current changes will be lost.', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          $scope.requisition = new Requisition({});\n          RequisitionsService.removeRequisitionFromCache();\n          $scope.initialize(function() {\n            $scope.refreshDeployedStats();\n          });\n        }\n      });\n    };\n\n   /**\n    * @description Saves the page size on a cookie\n    *\n    * @name RequisitionController:savePageSize\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.savePageSize = function() {\n      $cookies.put('requisitions_page_size', $scope.pageSize);\n    }\n\n    /**\n    * @description Initializes the local requisition from the server\n    *\n    * @name RequisitionController:initialize\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @param {function} customHandler An optional method to be called after the initialization is done.\n    */\n    $scope.initialize = function(customHandler) {\n      var value = $cookies.get('requisitions_page_size');\n      if (value) {\n        $scope.pageSize = value;\n      }\n      growl.success('Retrieving requisition ' + $scope.foreignSource + '...');\n      RequisitionsService.getRequisition($scope.foreignSource).then(\n        function(requisition) { // success\n          $scope.requisition = requisition;\n          $scope.filteredNodes = requisition.nodes;\n          $scope.updateFilteredNodes();\n          if (customHandler) {\n            customHandler();\n          }\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Watch for filter changes in order to update the nodes list and updates the pagination control\n    *\n    * @name RequisitionController:reqFilter\n    * @ngdoc event\n    * @methodOf RequisitionController\n    */\n    $scope.$watch('reqFilter', function() {\n      $scope.filteredNodes = $filter('filter')($scope.requisition.nodes, $scope.reqFilter);\n      $scope.updateFilteredNodes();\n    });\n\n    // Initialization\n\n    if ($scope.foreignSource) {\n      $scope.initialize();\n    }\n\n  }]);\n\n}());\n", "const bootbox = require('bootbox');\n\nrequire('../services/Requisitions');\nrequire('../services/Synchronize');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  const quickAddNodeView = require('../../views/quick-add-node.html');\n  const cloneForeignsourceView = require('../../views/clone-foreignsource.html');\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name RequisitionsController\n  * @module onms-requisitions\n  *\n  * @description The controller for manage all the requisitions (list/add/remove/synchronize)\n  *\n  * @requires $scope Angular local scope\n  * @requires $filter Angular filter\n  * @requires $cookies Angular cookies\n  * @requires $window Document window\n  * @requires $uibModal Angular UI modal\n  * @required Configuration The configuration object\n  * @requires RequisitionsService The requisitions service\n  * @requires SynchronizeService The synchronize service\n  * @requires growl The growl plugin for instant notifications\n  */\n  .controller('RequisitionsController', ['$scope', '$filter', '$cookies', '$window', '$uibModal', 'Configuration', 'DateFormatterService', 'RequisitionsService', 'SynchronizeService', 'growl', function($scope, $filter, $cookies, $window, $uibModal, Configuration, DateFormatterService, RequisitionsService, SynchronizeService, growl) {\n\n    /**\n    * @description The timing status.\n    *\n    * @ngdoc property\n    * @name RequisitionsController#timingStatus\n    * @propertyOf RequisitionsController\n    * @returns {object} The timing status object\n    */\n    $scope.timingStatus = RequisitionsService.getTiming();\n\n    /**\n    * @description The load flag.\n    *\n    * @ngdoc property\n    * @name RequisitionsController#loaded\n    * @propertyOf RequisitionsController\n    * @returns {boolean} True, if the requisitions have been loaded.\n    */\n    $scope.loaded = false;\n\n    /**\n    * @description The requisitions data\n    *\n    * @ngdoc property\n    * @name RequisitionsController#requisitionsData\n    * @propertyOf RequisitionsController\n    * @returns {object} The requisitions data\n    */\n    $scope.requisitionsData = { requisitions: [] };\n\n    /**\n    * @description The filtered version of the requisitions list\n    *\n    * @ngdoc property\n    * @name RequisitionsController#filteredRequisitions\n    * @propertyOf RequisitionsController\n    * @returns {array} The filtered array\n    */\n    $scope.filteredRequisitions = [];\n\n    /**\n    * @description The amount of items per page for pagination (defaults to 10)\n    *\n    * @ngdoc property\n    * @name RequisitionsController#pageSize\n    * @propertyOf RequisitionsController\n    * @returns {integer} The page size\n    */\n    $scope.pageSize = 10;\n\n    /**\n    * @description The maximum size of pages for pagination (defaults to 5)\n    *\n    * @ngdoc property\n    * @name RequisitionControllers#maxSize\n    * @propertyOf RequisitionsController\n    * @returns {integer} The maximum size\n    */\n    $scope.maxSize = 5;\n\n    /**\n    * @description The total amount of items for pagination (defaults to 0)\n    *\n    * @ngdoc property\n    * @name RequisitionControllers#maxSize\n    * @propertyOf RequisitionsController\n    * @returns {integer} The total items\n    */\n    $scope.totalItems = 0;\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name RequisitionsController:errorHandler\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Quick add a new node\n    *\n    * @name RequisitionsController:quickAddNode\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.quickAddNode = function() {\n      var availableForeignSources = [];\n      angular.forEach($scope.requisitionsData.requisitions, function(r) {\n        availableForeignSources.push(r.foreignSource);\n      });\n      var modalInstance = $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'QuickAddNodeModalController',\n        templateUrl: quickAddNodeView,\n        size: 'lg',\n        resolve: {\n          foreignSources: function() { return availableForeignSources; }\n        }\n      });\n      modalInstance.result.then(function(node) {\n        var r = $scope.requisitionsData.getRequisition(node.foreignSource);\n        r.setNode(node);\n      });\n    };\n\n    /**\n    * @description Clones the detectors and policies of a specific requisition\n    *\n    * @name RequisitionsController:clone\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.clone = function(foreignSource) {\n      var availableForeignSources = [];\n      angular.forEach($scope.requisitionsData.requisitions, function(r) {\n        if (r.foreignSource !== foreignSource) {\n          availableForeignSources.push(r.foreignSource);\n        }\n      });\n      var modalInstance = $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'CloneForeignSourceController',\n        templateUrl: cloneForeignsourceView,\n        resolve: {\n          foreignSource: function() { return foreignSource; },\n          availableForeignSources: function() { return availableForeignSources; }\n        }\n      });\n      modalInstance.result.then(function(targetForeignSource) {\n        bootbox.confirm('This action will override the existing foreign source definition for the requisition named ' + targetForeignSource + ', using ' + foreignSource + ' as a template. Are you sure you want to continue ? This cannot be undone.', function(ok) {\n          if (!ok) {\n            return;\n          }\n          RequisitionsService.startTiming();\n          RequisitionsService.cloneForeignSourceDefinition(foreignSource, targetForeignSource).then(\n            function() { // success\n              growl.success('The foreign source definition for ' + foreignSource + ' has been cloned to ' + targetForeignSource);\n            },\n            $scope.errorHandler\n          );\n        });\n      });\n    };\n\n    /**\n    * @description Adds a new requisition on the server.\n    *\n    * A dialog box will be displayed to request the name of the requisition to the user.\n    *\n    * @name RequisitionsController:add\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.add = function() {\n      bootbox.prompt('Please enter the name for the new requisition', function(foreignSource) {\n        if (foreignSource) {\n          // Validate Requisition\n          if (foreignSource.match(/[/\\\\?:&*'\"]/)) {\n            bootbox.alert('Cannot add the requisition ' + foreignSource + ' because the following characters are invalid:<br/>:, /, \\\\, ?, &, *, \\', \"');\n            return;\n          }\n          var r = $scope.requisitionsData.getRequisition(foreignSource);\n          if (r) {\n            bootbox.alert('Cannot add the requisition ' + foreignSource+ ' because there is already a requisition with that name');\n            return;\n          }\n          // Create Requisition\n          RequisitionsService.addRequisition(foreignSource).then(\n            function(r) { // success\n              growl.success('The requisition ' + r.foreignSource + ' has been created.');\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Edits the foreign source definition of an existing requisition\n    *\n    * @name RequisitionsController:editForeignSource\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.editForeignSource = function(foreignSource) {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent(foreignSource) + '/foreignSource';\n    };\n\n    /**\n    * @description Goes to the edit page of an existing requisition (navigation)\n    *\n    * @name RequisitionsController:edit\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.edit = function(foreignSource) {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent(foreignSource);\n    };\n\n    /**\n    * @description Requests the synchronization/import of a requisition on the server\n    *\n    * A dialog box is displayed to request to the user if the scan phase should be triggered or not.\n    *\n    * @name RequisitionsController:synchronize\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {object} requisition The requisition object\n    */\n    $scope.synchronize = function(requisition) {\n      RequisitionsService.startTiming();\n      SynchronizeService.synchronize(requisition, $scope.errorHandler);\n    };\n\n    /**\n    * @description Refreshes the deployed statistics of a requisition on the server\n    *\n    * @name RequisitionsController:refresh\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {object} requisition The requisition object\n    */\n    $scope.refresh = function(requisition) {\n      RequisitionsService.startTiming();\n      RequisitionsService.updateDeployedStatsForRequisition(requisition).then(\n        function() { // success\n          growl.success('The deployed statistics for ' + requisition.foreignSource + ' has been updated.');\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Removes all the nodes form the requisition on the server\n    *\n    * @name RequisitionsController:removeAllNodes\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.removeAllNodes = function(foreignSource) {\n      bootbox.confirm('Are you sure you want to remove all the nodes from ' + foreignSource + '?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.removeAllNodesFromRequisition(foreignSource).then(\n            function() { // success\n              growl.success('All the nodes from ' + foreignSource + ' have been removed, and the requisition has been synchronized.');\n              var req = $scope.requisitionsData.getRequisition(foreignSource);\n              req.reset();\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Removes a requisition on the server\n    *\n    * @name RequisitionsController:delete\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.delete = function(foreignSource) {\n      bootbox.confirm('Are you sure you want to remove the requisition ' + foreignSource + '?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.deleteRequisition(foreignSource).then(\n            function() { // success\n              growl.success('The requisition ' + foreignSource + ' has been deleted.');\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Edits the default foreign source definition (navigation)\n    *\n    * @name RequisitionsController:editDefaultForeignSource\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.editDefaultForeignSource = function() {\n      $window.location.href = Configuration.baseHref + '#/requisitions/default/foreignSource';\n    };\n\n    /**\n    * @description Resets the default set of detectors and policies\n    *\n    * @name RequisitionsController:resetDefaultForeignSource\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.resetDefaultForeignSource = function() {\n      bootbox.confirm('Are you sure you want to reset the default foreign source definition ?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.deleteForeignSourceDefinition('default').then(\n            function() { // success\n              growl.success('The default foreign source definition has been reseted.');\n              $scope.initialize();\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Refreshes the requisitions from the server\n    *\n    * There are two main actions:\n    * - Retrieve all the requisitions from the server ignoring the current state.\n    * - Retrieve only the deployed statistics, and update the current requisitions.\n    *\n    * @name RequisitionsController:refreshData\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.refreshData = function() {\n      bootbox.dialog({\n        message: 'Are you sure you want to refresh the content of the page ?<br/><hr/>' +\n                 'Choose <b>Reload Everything</b> to retrieve all the requisitions from the server (any existing unsaved change will be lost).<br/>' +\n                 'Choose <b>Reload Deployed Data</b> to retrieve the deployed statistics and update the UI.<br/>' +\n                 'Choose <b>Cancel</b> to abort the request.',\n        title: 'Refresh',\n        buttons: {\n          reloadAll: {\n            label: 'Reload Everything',\n            className: 'btn-primary',\n            callback: function() {\n              $scope.refreshRequisitions();\n            }\n          },\n          reloadDeployed: {\n            label: 'Reload Deployed Data',\n            className: 'btn-secondary',\n            callback: function() {\n              $scope.refreshDeployedStats();\n            }\n          },\n          main: {\n            label: 'Cancel',\n            className: 'btn-secondary'\n          }\n        }\n      });\n    };\n\n    /**\n    * @description Refreshes the deployed statistics for all the requisitions from the server\n    *\n    * @name RequisitionsController:refreshDeployedStats\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.refreshDeployedStats = function() {\n      RequisitionsService.startTiming();\n      growl.success('Refreshing deployed statistics...');\n      RequisitionsService.updateDeployedStats($scope.requisitionsData).then(\n        function() { // success\n          growl.success('The deployed statistics has been updated.');\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Refreshes all the requisitions from the server\n    *\n    * @name RequisitionsController:refreshRequisitions\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.refreshRequisitions = function() {\n      bootbox.confirm('Are you sure you want to reload all the requisitions?<br/>All current changes will be lost.', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          growl.success('Refreshing requisitions...');\n          RequisitionsService.clearCache();\n          $scope.requisitionsData = { requisitions : [] };\n          $scope.initialize();\n        }\n      });\n    };\n\n   /**\n    * @description Updates the pagination variables for the requisitions.\n    *\n    * @name RequisitionsController:updateFilteredNodes\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.updateFilteredRequisitions = function() {\n      $scope.currentPage = 1;\n      $scope.totalItems = $scope.filteredRequisitions.length;\n    };\n\n   /**\n    * @description Saves the page size on a cookie\n    *\n    * @name RequisitionController:savePageSize\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.savePageSize = function() {\n      $cookies.put('requisitions_page_size', $scope.pageSize);\n    }\n\n    /**\n    * @description Initializes the local requisitions list from the server\n    *\n    * @name RequisitionsController:initialize\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.initialize = function() {\n      var value = $cookies.get('requisitions_page_size');\n      if (value) {\n        $scope.pageSize = value;\n      }\n      $scope.loaded = false;\n      DateFormatterService.formatter.finally(function() {\n        RequisitionsService.getRequisitions().then(\n          function(data) { // success\n            $scope.requisitionsData = data;\n            $scope.filteredRequisitions = $scope.requisitionsData.requisitions;\n            $scope.updateFilteredRequisitions();\n            $scope.loaded = true;\n            growl.success('Loaded ' + $scope.requisitionsData.requisitions.length + ' requisitions...');\n          },\n          $scope.errorHandler\n        );\n      });\n    };\n\n    /**\n    * @description Watch for filter changes in order to update the requisitions list and updates the pagination control\n    *\n    * @name RequisitionsController:reqFilter\n    * @ngdoc event\n    * @methodOf RequisitionsController\n    */\n    $scope.$watch('reqFilter', function() {\n      $scope.filteredRequisitions = $filter('filter')($scope.requisitionsData.requisitions, $scope.reqFilter);\n      $scope.updateFilteredRequisitions();\n    });\n\n    // Initialization\n\n    if ($scope.filteredRequisitions.length === 0) {\n      $scope.initialize();\n    }\n\n  }]);\n\n}());\n", "const bootbox = require('bootbox');\n\nrequire('./Requisitions');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc service\n  * @name SynchronizeService\n  * @module onms-requisitions\n  *\n  * @requires RequisitionsService The requisitions service\n  * @requires growl The growl plugin for instant notifications\n  *\n  * @description The SynchronizeService provides a way to request a requisition synchronization asking the user how the scan process will be processed.\n  */\n  .factory('SynchronizeService', ['RequisitionsService', 'growl', function(RequisitionsService, growl) {\n    return {\n      /**\n      * @description Requests the synchronization/import of a requisition on the server\n      *\n      * A dialog box is displayed to request to the user if the scan phase should be triggered or not.\n      *\n      * @name SynchronizeService:synchronize\n      * @ngdoc method\n      * @methodOf SynchronizeService\n      * @param {object} requisition The requisition object\n      * @param {function} successHandler The function to call after a successful synchronization\n      * @param {function} errorHandler The function to call when something went wrong.\n      */\n      synchronize: function(requisition, errorHandler) {\n        /**\n        * @param {object} requisition The requisition object\n        * @param {string} rescanExisting true to perform a full scan, false to only add/remove nodes without scan, dbonly for all DB operations without scan\n        */\n        var doSynchronize = function(requisition, rescanExisting) {\n          RequisitionsService.startTiming();\n          RequisitionsService.synchronizeRequisition(requisition.foreignSource, rescanExisting).then(\n            function() { // success\n              growl.success('The import operation has been started for ' + requisition.foreignSource + ' (rescanExisting? ' + rescanExisting + ')<br/>Use <b>refresh</b> to update the deployed statistics');\n              requisition.setDeployed(true);\n            },\n            errorHandler\n          );\n        };\n        bootbox.prompt({\n            title: 'Synchronize Requisition  ' +  requisition.foreignSource,\n            message: '<p><b>Choose a scan option: </b></p>',\n            inputType: 'radio',\n            inputOptions: [\n            {\n                text: 'Scan all nodes',\n                value: 'true',\n            },\n            {\n                text: 'Scan added nodes only',\n                value: 'false',\n            },\n            {\n                text: 'No scanning',\n                value: 'dbonly',\n            }\n            ],\n            buttons: {\n                    confirm: {\n                        label: 'Synchronize',\n                    },\n                    cancel: {\n                        label: 'Cancel',\n                    }\n                },\n            swapButtonOrder: 'true',\n            callback: function (result) {\n                if (result !== null) {\n                    doSynchronize(requisition, result);\n                }\n            }\n        });\n      }\n    };\n  }]);\n\n}());\n", "/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n'use strict';\n\nconst angular = require('angular-js');\nrequire('angular-mocks');\nrequire('../../../../../src/main/assets/js/apps/onms-requisitions/requisitions');\n\nvar controllerFactory, scope, $q, mockModal = {}, mockGrowl = {}, mockRequisitionsService = {}, foreignSource = 'test-requisition';\n\nfunction createController() {\n  return controllerFactory('ForeignSourceController', {\n    $scope: scope,\n    $routeParams: { 'foreignSource': foreignSource },\n    $modal: mockModal,\n    RequisitionsService: mockRequisitionsService,\n    growl: mockGrowl\n  });\n}\n\nbeforeEach(angular.mock.module('onms-requisitions', function($provide) {\n  $provide.value('$log', console);\n}));\n\nbeforeEach(angular.mock.inject(function($rootScope, $controller, _$q_) {\n  scope = $rootScope.$new();\n  $q = _$q_;\n  controllerFactory = $controller;\n}));\n\nbeforeEach(function() {\n  mockModal = {};\n\n  mockRequisitionsService.getForeignSourceDefinition = jasmine.createSpy('getForeignSourceDefinition');\n  mockRequisitionsService.getTiming = jasmine.createSpy('getTiming');\n  var requisitionDefer = $q.defer();\n  requisitionDefer.resolve({ detectors: [{'name':'ICMP'},{'name':'SNMP'}], policies: [{'name':'Foo'},{'name':'Bar'}] });\n  mockRequisitionsService.getForeignSourceDefinition.and.returnValue(requisitionDefer.promise);\n  mockRequisitionsService.getTiming.and.returnValue({ isRunning: false });\n\n  mockGrowl = {\n    warning: function(msg) { console.warn(msg); },\n    error: function(msg) { console.error(msg); },\n    info: function(msg) { console.info(msg); },\n    success: function(msg) { console.info(msg); }\n  };\n});\n\ntest('Controller: ForeignSourceController: test controller', function() {\n  createController();\n  scope.$digest();\n  expect(mockRequisitionsService.getForeignSourceDefinition).toHaveBeenCalledWith(foreignSource);\n  expect(scope.foreignSource).toBe(foreignSource);\n  expect(scope.indexOfDetector({name:'ICMP'})).toBe(0);\n  expect(scope.indexOfPolicy({name:'Foo'})).toBe(0);\n  expect(scope.indexOfDetector({name:'HTTP'})).toBe(-1);\n  expect(scope.indexOfPolicy({name:'Test'})).toBe(-1);\n});\n", "/*global RequisitionNode:true */\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n'use strict';\n\nconst angular = require('angular-js');\nrequire('angular-mocks');\nrequire('../../../../../src/main/assets/js/apps/onms-requisitions/requisitions');\n\nconst RequisitionNode = require('../../../../../src/main/assets/js/apps/onms-requisitions/lib/scripts/model/RequisitionNode');\n\n// Initialize testing environment\n\nvar controllerFactory, scope, $q, mockModal = {}, mockGrowl = {}, mockRequisitionsService = {};\n\nvar foreignSource = 'test-requisition';\nvar foreignId = '1001';\nvar categories = ['Production', 'Testing', 'Server', 'Storage'];\nvar locations = ['Default'];\nvar node = new RequisitionNode(foreignSource, { 'foreign-id': foreignId });\nvar requisition = { foreignSource: foreignSource, nodes: [{foreignId: '01'},{foreignId: '02'}] };\n\nfunction createController() {\n  return controllerFactory('NodeController', {\n    $scope: scope,\n    $routeParams: { 'foreignSource': foreignSource, 'foreignId': foreignId },\n    $modal: mockModal,\n    RequisitionsService: mockRequisitionsService,\n    growl: mockGrowl\n  });\n}\n\nbeforeEach(angular.mock.module('onms-requisitions', function($provide) {\n  $provide.value('$log', console);\n}));\n\nbeforeEach(angular.mock.inject(function($rootScope, $controller, _$q_) {\n  scope = $rootScope.$new();\n  controllerFactory = $controller;\n  $q = _$q_;\n}));\n\nbeforeEach(function() {\n  mockRequisitionsService.getTiming = jasmine.createSpy('getTiming');\n  mockRequisitionsService.getNode = jasmine.createSpy('getNode');\n  mockRequisitionsService.getRequisition = jasmine.createSpy('getRequisition');\n  mockRequisitionsService.getAvailableCategories = jasmine.createSpy('getAvailableCategories');\n  mockRequisitionsService.getAvailableLocations = jasmine.createSpy('getAvailableLocations');\n  var nodeDefer = $q.defer();\n  nodeDefer.resolve(node);\n  mockRequisitionsService.getNode.and.returnValue(nodeDefer.promise);\n  var categoriesDefer = $q.defer();\n  categoriesDefer.resolve(categories);\n  mockRequisitionsService.getAvailableCategories.and.returnValue(categoriesDefer.promise);\n  var locationsDefer = $q.defer();\n  locationsDefer.resolve(locations);\n  mockRequisitionsService.getAvailableLocations.and.returnValue(locationsDefer.promise);\n  var reqDefer = $q.defer();\n  reqDefer.resolve(requisition);\n  mockRequisitionsService.getRequisition.and.returnValue(reqDefer.promise);\n  mockRequisitionsService.getTiming.and.returnValue({ isRunning: false });\n\n  mockGrowl = {\n    warning: function(msg) { console.warn(msg); },\n    error: function(msg) { console.error(msg); },\n    info: function(msg) { console.info(msg); },\n    success: function(msg) { console.info(msg); }\n  };\n});\n\ntest('Controller: NodeController: test controller', function() {\n  createController();\n  scope.$digest();\n  expect(mockRequisitionsService.getAvailableCategories).toHaveBeenCalled();\n  expect(mockRequisitionsService.getNode).toHaveBeenCalledWith(foreignSource, foreignId);\n  expect(scope.foreignSource).toBe(foreignSource);\n  expect(scope.foreignId).toBe(foreignId);\n  expect(scope.availableCategories.length).toBe(4);\n  expect(scope.foreignIdBlackList).toEqual(['01', '02']);\n\n  expect(scope.getAvailableCategories()).toEqual(categories);\n  scope.node.categories.push({name: 'Production'});\n  expect(scope.getAvailableCategories()).toEqual(['Testing', 'Server', 'Storage']);\n  expect(scope.availableLocations).toEqual(locations);\n});\n", "/*global Requisition:true */\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n'use strict';\n\nconst angular = require('angular-js');\nrequire('angular-mocks');\nrequire('../../../../../src/main/assets/js/apps/onms-requisitions/requisitions');\n\nconst Requisition = require('../../../../../src/main/assets/js/apps/onms-requisitions/lib/scripts/model/Requisition');\n\n// Initialize testing environment\n\nvar controllerFactory, scope, $q, mockGrowl = {}, mockRequisitionsService = {}, foreignSource = 'test-requisition', requisition = new Requisition(foreignSource);\n\nfunction createController() {\n  return controllerFactory('RequisitionController', {\n    $scope: scope,\n    $routeParams: { 'foreignSource': foreignSource },\n    RequisitionsService: mockRequisitionsService,\n    growl: mockGrowl\n  });\n}\n\nbeforeEach(angular.mock.module('onms-requisitions', function($provide) {\n  console.debug = console.log;\n  $provide.value('$log', console);\n}));\n\nbeforeEach(angular.mock.inject(function($rootScope, $controller, _$q_) {\n  scope = $rootScope.$new();\n  controllerFactory = $controller;\n  $q = _$q_;\n}));\n\nbeforeEach(function() {\n  mockRequisitionsService.getTiming = jasmine.createSpy('getTiming');\n  mockRequisitionsService.getRequisition = jasmine.createSpy('getRequisition');\n  var requisitionDefer = $q.defer();\n  requisitionDefer.resolve(requisition);\n  mockRequisitionsService.getRequisition.and.returnValue(requisitionDefer.promise);\n  mockRequisitionsService.getTiming.and.returnValue({ isRunning: false });\n\n  mockGrowl = {\n    warning: function(msg) { console.warn(msg); },\n    error: function(msg) { console.error(msg); },\n    info: function(msg) { console.info(msg); },\n    success: function(msg) { console.info(msg); }\n  };\n});\n\ntest('Controller: RequisitionController: test controller', function() {\n  createController();\n  scope.$digest();\n  expect(mockRequisitionsService.getRequisition).toHaveBeenCalledWith(foreignSource);\n  expect(scope.foreignSource).toBe(foreignSource);\n});\n", "/*global RequisitionsData:true */\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n'use strict';\n\nconst angular = require('angular-js');\nrequire('angular-mocks');\nrequire('../../../../../src/main/assets/js/apps/onms-requisitions/requisitions');\n\nconst OnmsDateFormatter = require('../../../../../src/main/assets/js/apps/onms-date-formatter');\nconst RequisitionsData = require('../../../../../src/main/assets/js/apps/onms-requisitions/lib/scripts/model/RequisitionsData');\n\n// Initialize testing environment\n\nvar controllerFactory, scope, $q, dateFormatterService, mockGrowl = {}, mockRequisitionsService = {}, requisitionsData = new RequisitionsData();\n\nfunction createController() {\n  return controllerFactory('RequisitionsController', {\n    $scope: scope,\n    DateFormatterService: dateFormatterService,\n    RequisitionsService: mockRequisitionsService,\n    growl: mockGrowl\n  });\n}\n\nbeforeEach(function() {\n  window._onmsDateTimeFormat = \"yyyy-MM-dd'T'HH:mm:ssxxx\";\n  window._onmsZoneId = 'America/New_York';\n  window._onmsFormatter = new OnmsDateFormatter();\n});\n\nbeforeEach(angular.mock.module('onms-requisitions', function($provide) {\n  console.debug = console.log;\n  $provide.value('$log', console);\n}));\n\nbeforeEach(angular.mock.inject(function($rootScope, $controller, $interval, _$q_, DateFormatterService) {\n  scope = $rootScope.$new();\n  controllerFactory = $controller;\n  $q = _$q_;\n  dateFormatterService = DateFormatterService;\n  $interval.flush(200);\n}));\n\nbeforeEach(function() {\n  mockRequisitionsService.getTiming = jasmine.createSpy('getTiming');\n  mockRequisitionsService.getRequisitions = jasmine.createSpy('getRequisitions');\n  var requisitionsDefer = $q.defer();\n  requisitionsDefer.resolve(requisitionsData);\n  mockRequisitionsService.getRequisitions.and.returnValue(requisitionsDefer.promise);\n  mockRequisitionsService.getTiming.and.returnValue({ isRunning: false });\n\n  mockGrowl = {\n    warning: function(msg) { console.warn(msg); },\n    error: function(msg) { console.error(msg); },\n    info: function(msg) { console.info(msg); },\n    success: function(msg) { console.info(msg); }\n  };\n});\n\ntest('Controller: RequisitionsController: test controller', function() {\n  createController();\n  scope.$digest();\n  expect(mockRequisitionsService.getRequisitions).toHaveBeenCalled();\n  expect(scope.requisitionsData.requisitions.length).toBe(0);\n});\n", "<%@ attribute name=\"nodes\" type=\"java.util.List\" rtexprvalue=\"true\" required=\"true\" %>\n<%@ attribute name=\"snmpParm\" type=\"java.lang.String\" rtexprvalue=\"true\" required=\"true\" %>\n<%@ attribute name=\"isMaclikeSearch\"  type=\"java.lang.Boolean\" rtexprvalue=\"true\" required=\"true\" %>\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n\n<ul class=\"list-unstyled mb-0\">\n  <c:forEach var=\"nodeModel\" items=\"${nodes}\">\n    <c:url var=\"nodeLink\" value=\"element/node.jsp\">\n      <c:param name=\"node\" value=\"${nodeModel.node.id}\"/>\n    </c:url>\n    <li>\n      <c:choose>\n        <c:when test=\"${!empty nodeModel.node.foreignSource}\">\n          <div class=\"NLnode\"><a href=\"${nodeLink}\">${nodeModel.node.label}</a>&nbsp;&nbsp;<span class=\"NLdbid label label-default\" title=\"Database ID: ${nodeModel.node.id}\"><i class=\"fa fa-database\"></i>&nbsp;${nodeModel.node.id}</span>&nbsp;<span class=\"NLfs label label-default\" title=\"Requisition: ${nodeModel.node.foreignSource}\"><i class=\"fa fa-list-alt\"></i>&nbsp;${nodeModel.node.foreignSource}</span>&nbsp;<span class=\"NLfid label label-default\" title=\"Foreign ID: ${nodeModel.node.foreignId}\"><i class=\"fa fa-qrcode\"></i>&nbsp;${nodeModel.node.foreignId}</span>&nbsp;<span class=\"NLloc label label-default\" title=\"Location: ${nodeModel.node.location.locationName}\"><i class=\"fa fa-map-marker\"></i>&nbsp;${nodeModel.node.location.locationName}</span><c:if test=\"${nodeModel.node.hasIngressFlows && nodeModel.node.hasEgressFlows}\"><span class=\"NLflows label label-default\" title=\"Flows: ingress/egress flow data available\"><i class=\"fa fa-exchange\"></i>&nbsp;ingress/egress flow data</span></c:if><c:if test=\"${nodeModel.node.hasIngressFlows && !nodeModel.node.hasEgressFlows}\"><span class=\"NLflows label label-default\" title=\"Flows: ingress flow data available\"><i class=\"fa fa-long-arrow-left\"></i>&nbsp;ingress flow data</span></c:if><c:if test=\"${!nodeModel.node.hasIngressFlows && nodeModel.node.hasEgressFlows}\"><span class=\"NLflows label label-default\" title=\"Flows: egress flow data available\"><i class=\"fa fa-long-arrow-right\"></i>&nbsp;egress flow data</span></c:if></div>\n        </c:when>\n        <c:otherwise>\n          <div class=\"NLnode\"><a href=\"${nodeLink}\">${nodeModel.node.label}</a>&nbsp;&nbsp;<span class=\"NLdbid label label-default\" title=\"Database ID: ${nodeModel.node.id}\"><i class=\"fa fa-database\"></i>&nbsp;${nodeModel.node.id}</span>&nbsp;<span class=\"NLloc label label-default\" title=\"Location: ${nodeModel.node.location.locationName}\"><i class=\"fa fa-map-marker\"></i>&nbsp;${nodeModel.node.location.locationName}</span> <c:if test=\"${nodeModel.node.hasFlows}\"><span class=\"NLflows label label-default\" title=\"Flows: flow data available\"><i class=\"fa fa-exchange\"></i>&nbsp;flow data</span></c:if></div>\n        </c:otherwise>\n      </c:choose>\n      <ul>\n        <c:if test=\"${!empty nodeModel.interfaces}\">\n          <c:forEach var=\"nodeInterface\" items=\"${nodeModel.interfaces}\">\n            <c:url var=\"interfaceLink\" value=\"element/interface.jsp\">\n              <c:param name=\"ipinterfaceid\" value=\"${nodeInterface.id}\"/>\n            </c:url>\n            \n            <li>\n              <c:choose>\n                <c:when test=\"${isMaclikeSearch && nodeInterface.snmpInterface.physAddr != null}\">\n                  <c:choose>\n                    <c:when test=\"${nodeInterface.ipAddress != '0.0.0.0'}\">\n                      <c:set var=\"label\" value=\"${nodeInterface.ipAddressAsString}\" scope=\"page\" />\n                    </c:when>\n                    <c:when test=\"${nodeInterface.snmpInterface.ifName != null}\">\n                      <c:set var=\"label\" value=\"${nodeInterface.snmpInterface.ifName}\" scope=\"page\" />\n                    </c:when>\n                    <c:when test=\"${nodeInterface.snmpInterface.ifDescr != null}\">\n                      <c:set var=\"label\" value=\"${nodeInterface.snmpInterface.ifDescr}\" scope=\"page\" />\n                    </c:when>\n                    <c:otherwise>\n                      <c:set var=\"label\" value=\"ifIndex:${nodeInterface.snmpInterface.ifIndex}\" scope=\"page\" />\n                    </c:otherwise>\n                  </c:choose>\n                  <a href=\"${interfaceLink}\">${label}</a> : ${nodeInterface.snmpInterface.physAddr}\n                </c:when>\n                <c:when test=\"${snmpParm == ('ifAlias')}\">\n                  <c:choose>\n                    <c:when test=\"${nodeInterface.ipAddressAsString == '0.0.0.0'}\">\n                      <c:choose>\n                        <c:when test=\"${nodeInterface.snmpInterface.ifName != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifName}</a> : ${nodeInterface.snmpInterface.ifAlias}\n                        </c:when>   \n                        <c:when test=\"${nodeInterface.snmpInterface.ifDescr != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifDescr}</a> : ${nodeInterface.snmpInterface.ifAlias}\n                        </c:when>\n                        <c:otherwise>\n                          <a href=\"${interfaceLink}\">ifIndex ${nodeInterface.snmpInterface.ifIndex}</a> : ${nodeInterface.snmpInterface.ifAlias}\n                        </c:otherwise>\n                      </c:choose>\n                    </c:when>\n                    <c:otherwise>\n                      <a href=\"${interfaceLink}\">${nodeInterface.ipAddressAsString}</a> : ${nodeInterface.snmpInterface.ifAlias}\n                    </c:otherwise>\n                  </c:choose>\n                </c:when>        \n                <c:when test=\"${snmpParm == ('ifName')}\">\n                  <c:choose>\n                    <c:when test=\"${nodeInterface.ipAddressAsString == '0.0.0.0'}\">\n                      <c:choose>\n                        <c:when test=\"${nodeInterface.snmpInterface.ifName != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifName}</a>\n                        </c:when>\n                      </c:choose>\n                    </c:when>\n                    <c:otherwise>\n                      <a href=\"${interfaceLink}\">${nodeInterface.ipAddressAsString}</a> : ${nodeInterface.snmpInterface.ifName}\n                    </c:otherwise>\n                  </c:choose>\n                </c:when>   \n                 <c:when test=\"${snmpParm == ('ifDescr')}\">\n                  <c:choose>\n                    <c:when test=\"${nodeInterface.ipAddressAsString == '0.0.0.0'}\">\n                      <c:choose>\n                        <c:when test=\"${nodeInterface.snmpInterface.ifName != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifName}</a> : ${nodeInterface.snmpInterface.ifDescr}\n                        </c:when>                  \n                        <c:when test=\"${nodeInterface.snmpInterface.ifDescr != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifDescr}</a>\n                        </c:when>\n                      </c:choose>\n                    </c:when>\n                    <c:otherwise>\n                      <a href=\"${interfaceLink}\">${nodeInterface.ipAddressAsString}</a> : ${nodeInterface.snmpInterface.ifDescr}\n                    </c:otherwise>\n                  </c:choose>\n                </c:when>\n                <c:otherwise>\n                  <a href=\"${interfaceLink}\">${nodeInterface.ipAddressAsString}</a>\n                </c:otherwise>\n              </c:choose>\n            </li>\n          </c:forEach>\n        </c:if>\n        <c:if test=\"${!empty nodeModel.snmpInterfaces}\">\n          <c:forEach var=\"snmpInterface\" items=\"${nodeModel.snmpInterfaces}\">\n            <c:url var=\"interfaceLink\" value=\"element/interface.jsp\">\n              <c:param name=\"node\" value=\"${snmpInterface.node.id}\"/>\n              <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                  <c:param name=\"intf\" value=\"${ipInterface.ipAddressAsString}\"/>\n                </c:if>\n              </c:forEach>\n            </c:url>\n            <c:url var=\"snmpinterfaceLink\" value=\"element/snmpinterface.jsp\">\n              <c:param name=\"node\" value=\"${snmpInterface.node.id}\"/>\n              <c:param name=\"ifindex\" value=\"${snmpInterface.ifIndex}\"/>\n            </c:url>\n            <li>\n              <c:if test=\"${isMaclikeSearch && snmpInterface.physAddr!=null && snmpInterface.physAddr!=''}\">\n                <c:set var=\"notFound\" value=\"true\"/>\n                <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                  <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                    <a href=\"element/interface.jsp?ipinterfaceid=${ipInterface.id}\">${ipInterface.ipAddressAsString}</a> : ${snmpInterface.physAddr} (from snmp)\n                    <c:remove var=\"notFound\"/>\n                  </c:if>\n                </c:forEach>\n                <c:if test=\"${notFound}\">\n                  <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifName}</a> : ${snmpInterface.physAddr} (from snmp)\n                </c:if>\n              </c:if>\n              <c:choose>\n                <c:when test=\"${snmpParm == ('ifAlias')}\">\n                  <c:set var=\"notFound\" value=\"true\"/>\n                  <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                    <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                      <a href=\"${interfaceLink}\">${ipInterface.ipAddressAsString}</a> : ${snmpInterface.ifAlias}\n                      <c:remove var=\"notFound\"/>\n                    </c:if>\n                  </c:forEach>\n                  <c:if test=\"${notFound}\">\n                      <c:choose>\n                        <c:when test=\"${snmpInterface.ifName != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifName}</a> : ${snmpInterface.ifAlias}\n                        </c:when>   \n                        <c:when test=\"${snmpInterface.ifDescr != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifDescr}</a> : ${snmpInterface.ifAlias}\n                        </c:when>\n                        <c:otherwise>\n                          <a href=\"${snmpinterfaceLink}\">ifIndex ${snmpInterface.ifIndex}</a> : ${snmpInterface.ifAlias}\n                        </c:otherwise>\n                      </c:choose>\n                  </c:if>\n                </c:when>        \n                <c:when test=\"${snmpParm == ('ifName')}\">\n                  <c:set var=\"notFound\" value=\"true\"/>\n                  <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                    <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                      <a href=\"${interfaceLink}\">${ipInterface.ipAddressAsString}</a> : ${snmpInterface.ifName}\n                      <c:remove var=\"notFound\"/>\n                    </c:if>\n                  </c:forEach>\n                  <c:if test=\"${notFound}\">\n                      <c:choose>\n                        <c:when test=\"${snmpInterface.ifName != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifName}</a>\n                        </c:when>\n                      </c:choose>\n                  </c:if>\n                </c:when>   \n                <c:when test=\"${snmpParm == ('ifDescr')}\">\n                  <c:set var=\"notFound\" value=\"true\"/>\n                  <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                    <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                      <a href=\"${interfaceLink}\">${ipInterface.ipAddressAsString}</a> : ${snmpInterface.ifDescr}\n                      <c:remove var=\"notFound\"/>\n                    </c:if>\n                  </c:forEach>\n                  <c:if test=\"${notFound}\">\n                      <c:choose>\n                        <c:when test=\"${snmpInterface.ifName != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifName}</a> : ${snmpInterface.ifDescr}\n                        </c:when>                  \n                        <c:when test=\"${snmpInterface.ifDescr != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifDescr}</a>\n                        </c:when>\n                      </c:choose>\n                  </c:if>\n                </c:when>\n              </c:choose>\n            </li>\n          </c:forEach>\n        </c:if>\n      </ul>\n    </li>\n  </c:forEach>\n</ul>\n", "<%--\n/*******************************************************************************\n * This file is part of OpenNMS(R).\n *\n * Copyright (C) 2002-2015 The OpenNMS Group, Inc.\n * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n *\n * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n *\n * OpenNMS(R) is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * OpenNMS(R) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with OpenNMS(R).  If not, see:\n *      http://www.gnu.org/licenses/\n *\n * For more information contact:\n *     OpenNMS(R) Licensing <license@opennms.org>\n *     http://www.opennms.org/\n *     http://www.opennms.com/\n *******************************************************************************/\n\n--%>\n\n<%@page import=\"org.opennms.web.enlinkd.LldpElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.CdpElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.OspfElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.IsisElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.BridgeElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.EnLinkdElementFactory\"%>\n<%@page language=\"java\"\n\tcontentType=\"text/html\"\n\tsession=\"true\"\n\timport=\"\n        java.util.*,\n        java.net.*,\n        java.sql.SQLException,\n        org.opennms.core.spring.BeanUtils,\n        org.opennms.core.soa.ServiceRegistry,\n        org.opennms.core.utils.InetAddressUtils,\n        org.opennms.core.utils.WebSecurityUtils,\n        org.opennms.netmgt.config.dao.outages.api.ReadablePollOutagesDao,\n        org.opennms.netmgt.config.poller.outages.Outage,\n        org.opennms.netmgt.model.OnmsNode,\n        org.opennms.netmgt.dao.hibernate.PathOutageManagerDaoImpl,\n        org.opennms.web.api.Authentication,\n        org.opennms.web.asset.Asset,\n        org.opennms.web.asset.AssetModel,\n        org.opennms.web.element.*,\n        org.opennms.web.navigate.*,\n        org.springframework.util.StringUtils,\n        org.springframework.web.context.WebApplicationContext,\n        org.springframework.web.context.support.WebApplicationContextUtils\"\n%>\n<%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n\n\n<%!private int m_telnetServiceId;\n    private int m_sshServiceId;\n    private int m_httpServiceId;\n    private int m_httpsServiceId;\n    private int m_dellServiceId;\n    private int m_rdpServiceId;\n    private int m_snmpServiceId;\n\tprivate AssetModel m_model = new AssetModel();\n\n\tpublic void init() throws ServletException {\n        try {\n            m_telnetServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"Telnet\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the Telnet service ID\", e);\n        }        \n\n        try {\n            m_sshServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"SSH\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the SSH service ID\", e);\n        } \n\n        try {\n            m_httpServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"HTTP\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the HTTP service ID\", e);\n        }\n\n        try {\n            m_httpsServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"HTTPS\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the HTTPS service ID\", e);\n        }\n\n        try {\n            m_dellServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"Dell-OpenManage\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the Dell-OpenManage service ID\", e);\n        }\n\n        try {\n            m_rdpServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"MS-RDP\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the Mirosoft Remote Desktop service ID\", e);\n        }\n\n\n        try {\n            m_snmpServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"SNMP\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the SNMP service ID\", e);\n        }\n    }\n\n\tpublic static String getStatusStringWithDefault(OnmsNode node_db) {\n        String status = ElementUtil.getNodeStatusString(node_db);\n        if (status != null) {\n            return status;\n        } else {\n            return \"Unknown\";\n        }\n    }\n    \n    public static String findServiceAddress(int nodeId, int serviceId, ServletContext servletContext) throws SQLException, UnknownHostException {\n        Service[] services = NetworkElementFactory.getInstance(servletContext).getServicesOnNode(nodeId, serviceId);\n        if (services == null || services.length == 0) {\n            return null;\n        }\n        \n        List<InetAddress> ips = new ArrayList<>();\n        for (Service service : services) {\n            ips.add(InetAddressUtils.addr(service.getIpAddress()));\n        }\n\n        InetAddress lowest = InetAddressUtils.getLowestInetAddress(ips);\n\n        if (lowest != null) {\n            return lowest.getHostAddress();\n        } else {\n            return null;\n        }\n    }\n    \n    public static Collection<Map<String, String>> createLinkForService(int nodeId, int serviceId, String linkText, String linkPrefix, String linkSuffix, ServletContext servletContext) throws SQLException, UnknownHostException {\n        String ip = findServiceAddress(nodeId, serviceId, servletContext);\n        if (ip == null) {\n            return new ArrayList<Map<String,String>>();\n        }\n        \n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"text\", linkText);\n        map.put(\"url\", linkPrefix + ip + linkSuffix);\n        return Collections.singleton(map);\n    }%>\n\n<%\n\tOnmsNode node_db = ElementUtil.getNodeByParams(request, getServletContext());\n    int nodeId = node_db.getId();\n    \n    Map<String, Object> nodeModel = new TreeMap<String, Object>();\n    nodeModel.put(\"id\", Integer.toString(nodeId));\n    nodeModel.put(\"label\", WebSecurityUtils.sanitizeString(node_db.getLabel()));\n    nodeModel.put(\"foreignId\", node_db.getForeignId());\n    nodeModel.put(\"foreignSource\", node_db.getForeignSource());\n    nodeModel.put(\"location\", node_db.getLocation().getLocationName());\n\n    List<Map<String, String>> links = new ArrayList<Map<String, String>>();\n    links.addAll(createLinkForService(nodeId, m_telnetServiceId, \"Telnet\", \"telnet://\", \"\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_sshServiceId, \"SSH\", \"ssh://\", \"\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_httpServiceId, \"HTTP\", \"http://\", \"/\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_httpsServiceId, \"HTTPS\", \"https://\", \"/\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_dellServiceId, \"OpenManage\", \"https://\", \":1311\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_rdpServiceId, \"Microsoft RDP\", \"rdp://\", \":3389\", getServletContext()));\n    nodeModel.put(\"links\", links);\n\n    Asset asset = m_model.getAsset(nodeId);\n    nodeModel.put(\"asset\", asset);\n    if (asset != null && asset.getBuilding() != null && asset.getBuilding().length() > 0) {\n        nodeModel.put(\"statusSite\", WebSecurityUtils.sanitizeString(asset.getBuilding(),true));\n    }\n    \n    nodeModel.put(\"lldp\",    EnLinkdElementFactory.getInstance(getServletContext()).getLldpElement(nodeId));\n    nodeModel.put(\"cdp\",    EnLinkdElementFactory.getInstance(getServletContext()).getCdpElement(nodeId));\n    nodeModel.put(\"ospf\",    EnLinkdElementFactory.getInstance(getServletContext()).getOspfElement(nodeId));\n    nodeModel.put(\"isis\",    EnLinkdElementFactory.getInstance(getServletContext()).getIsisElement(nodeId));\n    nodeModel.put(\"bridges\", EnLinkdElementFactory.getInstance(getServletContext()).getBridgeElements(nodeId));\n\n    nodeModel.put(\"criticalPath\", PathOutageManagerDaoImpl.getInstance().getPrettyCriticalPath(nodeId));\n    nodeModel.put(\"noCriticalPath\", PathOutageManagerDaoImpl.NO_CRITICAL_PATH);\n    nodeModel.put(\"admin\", request.isUserInRole(Authentication.ROLE_ADMIN));\n    nodeModel.put(\"provision\", request.isUserInRole(Authentication.ROLE_PROVISION));\n    nodeModel.put(\"existsInRequisition\", NetworkElementFactory.getInstance(getServletContext()).nodeExistsInRequisition(node_db.getForeignSource(), node_db.getForeignId()));\n\n    // get the child interfaces\n    Interface[] intfs = NetworkElementFactory.getInstance(getServletContext()).getActiveInterfacesOnNode(nodeId);\n    if (intfs != null) { \n        nodeModel.put(\"intfs\", intfs);\n    } else {\n        nodeModel.put(\"intfs\", new Interface[0]);\n    }\n\n    Service[] snmpServices = NetworkElementFactory.getInstance(getServletContext()).getServicesOnNode(nodeId, m_snmpServiceId);\n    if (snmpServices != null && snmpServices.length > 0) {\n        for (Interface intf : intfs) {\n            if (\"P\".equals(intf.getIsSnmpPrimary())) {\n                nodeModel.put(\"snmpPrimaryIntf\", intf);\n                break;\n            }\n        }\n    }\n    \n    nodeModel.put(\"status\", getStatusStringWithDefault(node_db));\n    nodeModel.put(\"showRancid\",\"true\".equalsIgnoreCase(Vault.getProperty(\"opennms.rancidIntegrationEnabled\")));\n    \n    nodeModel.put(\"node\", node_db);\n    nodeModel.put(\"sysName\", WebSecurityUtils.sanitizeString(node_db.getSysName()));\n    nodeModel.put(\"sysLocation\", WebSecurityUtils.sanitizeString(node_db.getSysLocation()));\n    nodeModel.put(\"sysContact\", WebSecurityUtils.sanitizeString(node_db.getSysContact(), true));\n    nodeModel.put(\"sysDescription\", WebSecurityUtils.sanitizeString(node_db.getSysDescription()));\n    \n    pageContext.setAttribute(\"model\", nodeModel);\n\n\tfinal WebApplicationContext webAppContext = WebApplicationContextUtils.getRequiredWebApplicationContext(getServletContext());\n\tfinal ServiceRegistry registry = webAppContext.getBean(ServiceRegistry.class);\n\n\tfinal List<String> renderedLinks = new ArrayList<>();\n\tfinal Collection<ConditionalPageNavEntry> navLinks = registry.findProviders(ConditionalPageNavEntry.class, \"(Page=node)\");\n\tfor (final ConditionalPageNavEntry link : navLinks) {\n\t    final DisplayStatus displayStatus = link.evaluate(request, node_db);\n\t    if (displayStatus == null) continue;\n\t    if (displayStatus == DisplayStatus.DISPLAY_NO_LINK) {\n\t        renderedLinks.add(link.getName());\n\t    } else if (displayStatus == DisplayStatus.DISPLAY_LINK) {\n\t        renderedLinks.add(\"<a href=\\\"\" + link.getUrl().replace(\"%25nodeid%25\", \"\"+nodeId) + \"\\\">\" + link.getName() + \"</a>\");\n\t    }\n\t}\n\t\n\tpageContext.setAttribute(\"navEntries\", renderedLinks);\n\n    final List<String> schedOutages = new ArrayList<>();\n\n    ReadablePollOutagesDao pollOutagesDao = BeanUtils.getBean(\"pollerConfigContext\", \"pollOutagesDao\",\n            ReadablePollOutagesDao.class);\n    \n    for (final Outage outage : pollOutagesDao.getReadOnlyConfig().getOutages()) {\n        if (pollOutagesDao.isCurTimeInOutage(outage)) {\n            boolean inOutage = pollOutagesDao.isNodeIdInOutage(nodeId, outage);\n            if (!inOutage) {\n                for (final Interface i : intfs) {\n                    if (pollOutagesDao.isInterfaceInOutage(i.getIpAddress(), outage)) {\n                        inOutage = true;\n                        break;\n                    }\n                }\n            }\n            if (inOutage) {\n                final String name = outage.getName();\n                final String link = \"<a href=\\\"admin/sched-outages/editoutage.jsp?name=\" + URLEncoder.encode(name, \"UTF-8\") + \"\\\">\" +name + \"</a>\";\n                schedOutages.add(request.isUserInRole(Authentication.ROLE_ADMIN) ? link : name);\n            }\n        }\n    }\n\n\tpageContext.setAttribute(\"schedOutages\", schedOutages.isEmpty() ? null : StringUtils.collectionToDelimitedString(schedOutages, \", \"));\n    pageContext.setAttribute(\"maxInterfaceCount\", System.getProperty(\"org.opennms.interfaceAvailabilityBox.maxInterfaceCount\", \"10\"));\n%>\n\n<%@page import=\"org.opennms.core.resource.Vault\"%>\n<jsp:include page=\"/includes/bootstrap.jsp\" flush=\"false\" >\n  <jsp:param name=\"ngapp\" value=\"onms-interfaces\" />\n  <jsp:param name=\"title\" value=\"Node\" />\n  <jsp:param name=\"headTitle\" value=\"${model.label}\" />\n  <jsp:param name=\"headTitle\" value=\"ID ${model.id}\" />\n  <jsp:param name=\"headTitle\" value=\"Node\" />\n  <jsp:param name=\"breadcrumb\" value=\"<a href='element/index.jsp'>Search</a>\" />\n  <jsp:param name=\"breadcrumb\" value=\"Node\" />\n</jsp:include>\n\n<jsp:include page=\"/assets/load-assets.jsp\" flush=\"false\">\n    <jsp:param name=\"asset\" value=\"angular-js\" />\n</jsp:include>\n<jsp:include page=\"/assets/load-assets.jsp\" flush=\"false\">\n    <jsp:param name=\"asset\" value=\"onms-interfaces-app\" />\n</jsp:include>\n\n<script type=\"text/javascript\">\nfunction confirmAssetEdit() {\n  var confirmText = \"You are about to edit asset fields for a node that was provisioned \" +\n    \"through a requisition. Any edits made here will be rolled back the next \" +\n    \"time the requisition \\\"${model.node.foreignSource}\\\" is \" +\n    \"synchronized (typically every 24 hours) or the node manually rescanned.\\n\\n\" +\n    \"To learn the best way to make permanent asset changes, talk to your \" +\n    \"OpenNMS administrator.\";\n<c:if test=\"${model.foreignSource != null}\">\n<% if (!request.isUserInRole(Authentication.ROLE_READONLY)) { %>\n    return confirm(confirmText);\n<% } else { %>\n    return true;\n<% } %>\n</c:if>\n<c:if test=\"${model.foreignSource == null}\">\n  return true;\n</c:if>\n}\n</script>\n\n<h5>\n  <c:if test=\"${model.foreignSource != null}\">\n    <div class=\"NPnode\">Node: <strong>${model.label}</strong>&nbsp;&nbsp;&nbsp;<span class=\"NPdbid badge badge-secondary \" title=\"Database ID: ${model.id}\"><i class=\"fa fa-database\"></i>&nbsp;${model.id}</span>&nbsp;<span class=\"NPfs badge badge-secondary \" title=\"Requisition: ${model.foreignSource}\"><i class=\"fa fa-list-alt\"></i>&nbsp;${model.foreignSource}</span>&nbsp;<span class=\"NPfid badge badge-secondary \" title=\"Foreign ID: ${model.foreignId}\"><i class=\"fa fa-qrcode\"></i>&nbsp;${model.foreignId}</span>&nbsp;<span class=\"NPloc badge badge-secondary \" title=\"Location: ${model.location}\"><i class=\"fa fa-map-marker\"></i>&nbsp;${model.location}</span> <c:if test=\"${model.node.hasFlows}\"><span class=\"NPflows badge badge-secondary \" title=\"Flows: flow data available\"><i class=\"fa fa-exchange\"></i> flow data</span></c:if></div>\n  </c:if>\n  <c:if test=\"${model.foreignSource == null}\">\n    <div class=\"NPnode\">Node: <strong>${model.label}</strong>&nbsp;&nbsp;&nbsp;<span class=\"NPdbid badge badge-secondary \" title=\"Database ID: ${model.id}\"><i class=\"fa fa-database\"></i>&nbsp;${model.id}</span>&nbsp;<span class=\"NPloc badge badge-secondary \" title=\"Location: ${model.location}\"><i class=\"fa fa-map-marker\"></i>&nbsp;${model.location}</span> <c:if test=\"${model.node.hasFlows}\"><span class=\"NPflows badge badge-secondary \" title=\"Flows: flow data available\"><i class=\"fa fa-exchange\"></i> flow data</span></c:if></div>\n  </c:if>\n</h5>\n\n  <ul class=\"list-inline\">\n    <c:url var=\"eventLink\" value=\"event/list\">\n      <c:param name=\"filter\" value=\"node=${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${eventLink}\"/>\">View Events</a>\n    </li>\n\n    <c:url var=\"alarmLink\" value=\"alarm/list.htm\">\n      <c:param name=\"filter\" value=\"node=${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${alarmLink}\"/>\">View Alarms</a>\n    </li>\n    \n    <c:url var=\"outageLink\" value=\"outage/list.htm\">\n      <c:param name=\"filter\" value=\"node=${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${outageLink}\"/>\">View Outages</a>\n    </li>\n    \n    <c:url var=\"assetLink\" value=\"asset/modify.jsp\">\n      <c:param name=\"node\" value=\"${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${assetLink}\"/>\" onclick=\"return confirmAssetEdit()\">Asset Info</a>\n    </li>\n\n    <c:url var=\"metaDataLink\" value=\"element/node-metadata.jsp\">\n        <c:param name=\"node\" value=\"${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${metaDataLink}\"/>\">Meta-Data</a>\n    </li>\n\n    <c:url var=\"hardwareLink\" value=\"hardware/list.jsp\">\n      <c:param name=\"node\" value=\"${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${hardwareLink}\"/>\">Hardware Info</a>\n    </li>\n\n    <c:url var=\"intfAvailabilityLink\" value=\"element/availability.jsp\">\n      <c:param name=\"node\" value=\"${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${intfAvailabilityLink}\"/>\">Availability</a>\n    </li>\n\n    <c:if test=\"${! empty model.statusSite}\">\n      <c:url var=\"siteLink\" value=\"siteStatusView.htm\">\n        <c:param name=\"statusSite\" value=\"${model.statusSite}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${siteLink}\"/>\">Site Status</a>\n      </li>\n    </c:if>\n\n    <c:forEach items=\"${model.links}\" var=\"link\">\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${link.url}\"/>\">${link.text}</a>\n      </li>\n    </c:forEach>\n    \n    <%-- TODO In order to show the following link only when there are metrics, an\n              inexpensive method has to be implemented on either ResourceService\n              or ResourceDao --%>\n    <c:url var=\"resourceGraphsUrl\" value=\"graph/chooseresource.jsp\">\n      <c:param name=\"node\" value=\"${model.id}\"/>\n      <c:param name=\"reports\" value=\"all\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${resourceGraphsUrl}\"/>\">Resource Graphs</a>\n    </li>\n    \n    <c:if test=\"${model.admin}\">\n      <c:url var=\"rescanLink\" value=\"element/rescan.jsp\">\n        <c:param name=\"node\" value=\"${model.id}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${rescanLink}\"/>\">Rescan</a>\n      </li>\n      \n      <c:url var=\"adminLink\" value=\"admin/nodemanagement/index.jsp\">\n        <c:param name=\"node\" value=\"${model.id}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${adminLink}\"/>\">Admin</a>\n      </li>\n\n      <c:if test=\"${! empty model.snmpPrimaryIntf}\">\n        <c:url var=\"updateSnmpLink\" value=\"admin/updateSnmp.jsp\">\n          <c:param name=\"node\" value=\"${model.id}\"/>\n          <c:param name=\"ipaddr\" value=\"${model.snmpPrimaryIntf.ipAddress}\"/>\n        </c:url>\n        <li class=\"list-inline-item\">\n          <a href=\"<c:out value=\"${updateSnmpLink}\"/>\">Update SNMP</a>\n        </li>\n      </c:if>\n      \n      <c:url var=\"createOutage\" value=\"admin/sched-outages/editoutage.jsp\">\n\t<c:param name=\"newName\" value=\"${model.label}\"/>\n\t<c:param name=\"addNew\" value=\"true\"/>\n\t<c:param name=\"nodeID\" value=\"${model.id}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${createOutage}\"/>\">Schedule Outage</a>\n      </li>\n    </c:if>\n\n    <c:if test=\"${model.existsInRequisition && (model.admin || model.provision)}\">\n        <li class=\"list-inline-item\">\n            <a href=\"<c:out value=\"admin/ng-requisitions/index.jsp#/requisitions/${model.foreignSource}/nodes/${model.foreignId}\"/>\">Edit in Requisition</a>\n        </li>\n    </c:if>\n\n    <c:forEach items=\"${navEntries}\" var=\"entry\">\n      <li class=\"list-inline-item\">\n      \t<c:out value=\"${entry}\" escapeXml=\"false\" />\n      </li>\n    </c:forEach>\n  </ul>\n\n\n<c:if test=\"${! empty schedOutages}\">\n  <table class=\"table table-sm severity\">\n    <tr class=\"severity-Critical\">\n      <td align=\"left\" class=\"bright\">\n        <b>This node is currently affected by the following scheduled outages: </b> ${schedOutages}\n      </td>\n    </tr>\n  </table>\n</c:if>\n\n<% String showNodeStatusBar = System.getProperty(\"opennms.nodeStatusBar.show\", \"false\");\n   if (Boolean.parseBoolean(showNodeStatusBar)) { %>\n<jsp:include page=\"/includes/nodeStatus-box.jsp?nodeId=${model.id}\" flush=\"false\" />\n<% } %>\n\n<div class=\"row\">\n<div class=\"col-md-6\">\n  \n  <!-- Asset box, if info available --> \n  <c:if test=\"${! empty model.asset && (! empty model.asset.description || ! empty model.asset.comments)}\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>Asset Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr>\n        <th>Description</th>\n        <td>${model.asset.description}</td>\n      </tr>\n      \n      <tr>\n        <th>Comments</th>\n        <td>${model.asset.comments}</td>\n      </tr>\n    </table>\n    </div>\n  </c:if>\n\n  <!-- SNMP box, if info available -->\n  <c:if test=\"${! empty model.node.sysObjectId}\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>SNMP Attributes</span>\n    </div>\n    \n    <table class=\"table table-sm\">\n      <tr>\n        <th>Name</th>\n        <td>${model.sysName}</td>\n      </tr>\n      <tr>\n        <th>sysObjectID</th>\n        <td>${model.node.sysObjectId}</td>\n      </tr>\n      <tr>\n        <th>Location</th>\n        <td>${model.sysLocation}</td>\n      </tr>\n      <tr>\n        <th>Contact</th>\n        <td>${model.sysContact}</td>\n      </tr>\n      <tr>\n        <th valign=\"top\">Description</th>\n        <td valign=\"top\">${model.sysDescription}</td>\n      </tr>\n    </table>\n    </div>\n  </c:if>\n\n  <!-- Critical Path info, if info available -->\n  <c:if test=\"${model.criticalPath != model.noCriticalPath}\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>Path Outage - Critical Path</span>\n    </div>\n    <div class=\"card-body\">\n      <ul class=\"list-unstyled mb-0\">\n        <li class=\"list-inline-item\">\n          ${model.criticalPath}\n        </li>\n      </ul> \n    </div>          \n    </div>    \n  </c:if>\n\t\n  <!-- Availability box -->\n  <c:if test=\"${fn:length( model.intfs ) <= maxInterfaceCount}\">\n    <jsp:include page=\"/includes/nodeAvailability-box.jsp\" flush=\"false\" >\n      <jsp:param name=\"node\" value=\"${model.id}\" />\n    </jsp:include>\n  </c:if>\n\n  <div id=\"onms-interfaces\" class=\"card\">\n    <div class=\"card-header\">\n        <span>Node Interfaces</span>\n    </div>\n    <onms-interfaces node=\"${model.id}\"/>\n  </div>\n\n  <!-- LLDP box, if info available --> \n  <c:if test=\"${! empty model.lldp }\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>LLDP Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr><th width=\"50%\">chassis id</th><td width=\"50%\">${model.lldp.lldpChassisId}</td></tr>\n      <tr><th width=\"50%\">sysname</th><td width=\"50%\">${model.lldp.lldpSysName}</td></tr>\n      <tr><th width=\"50%\">last poll time</th><td width=\"50%\">${model.lldp.lldpLastPollTime}</td></tr>\n    </table>\n    </div>\n    </c:if>\n\n  <!-- CDP box, if info available --> \n  <c:if test=\"${! empty model.cdp }\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>CDP Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr><th width=\"50%\">global device id</th><td width=\"50%\">${model.cdp.cdpGlobalDeviceId}</td></tr>\n      <tr><th width=\"50%\">global run</th><td width=\"50%\">${model.cdp.cdpGlobalRun}</td></tr>\n      <tr><th width=\"50%\">last poll time</th><td width=\"50%\">${model.cdp.cdpLastPollTime}</td></tr>\n    </table>\n  </div>\n  </c:if>\n  <!--End CDP box, if info available --> \n\n  <!-- OSPF box, if info available -->\n  <c:if test=\"${! empty model.ospf }\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>OSPF Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr><th width=\"50%\">Router Id</th><td width=\"50%\">${model.ospf.ospfRouterId}</td></tr>\n      <tr><th width=\"50%\">Status</th><td width=\"50%\">${model.ospf.ospfAdminStat} version:${model.ospf.ospfVersionNumber}</td></tr>\n      <tr><th>last poll time</th><td>${model.ospf.ospfLastPollTime}</td></tr>\n    </table>\n  </div>\n  </c:if>\n\n  <!-- IS-IS box, if info available -->\n  <c:if test=\"${! empty model.isis }\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>IS-IS Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr><th width=\"50%\">Sys ID</th><td width=\"50%\">${model.isis.isisSysID}</td></tr>\n      <tr><th width=\"50%\">Admin State</th><td width=\"50%\">${model.isis.isisSysAdminState}</td></tr>\n      <tr><th width=\"50%\">last poll time</th><td width=\"50%\">${model.isis.isisLastPollTime}</td></tr>\n    </table>\n    </div>\n  </c:if>\n\n  <!-- Bridge box if available -->\n  <c:if test=\"${! empty model.bridges}\">\n    <div class=\"card\">\n   \t<div class=\"card-header\">\n   \t  <span>Bridge Information</span>\n   \t</div>\n\t<table class=\"table table-sm\">\n\t<c:forEach items=\"${model.bridges}\" var=\"bridge\">\n   \t<tr>\n   \t<th width=\"50%\"><c:if test=\"${! empty bridge.vlanname}\">Vlan ${bridge.vlanname}</c:if>\n   \t    <c:if test=\"${! empty bridge.vlan}\">(vlanid ${bridge.vlan})</c:if>\n   \t    <c:if test=\"${empty bridge.vlan}\">Default</c:if>\n   \t    (${bridge.baseNumPorts} port assigned)\n   \t</th>\n    <td width=\"50%\"> baseAddress:${bridge.baseBridgeAddress} type:${bridge.baseType} \n    \t<c:if test=\"${! empty bridge.stpProtocolSpecification}\">stpProtocolSpec:${bridge.stpProtocolSpecification}</c:if>\n \t    <c:if test=\"${! empty bridge.stpPriority && bridge.stpPriority > 0}\">Priority:${bridge.stpPriority}</c:if>\n \t    <c:if test=\"${! empty bridge.stpDesignatedRoot}\">DesignatedRoot:${bridge.stpDesignatedRoot}</c:if>\n \t    <c:if test=\"${! empty bridge.stpRootPort && bridge.stpRootPort > 0}\">RootPort:${bridge.stpRootPort}</c:if>\n \t    <c:if test=\"${! empty bridge.stpRootCost && bridge.stpRootCost > 0}\">RootCost:${bridge.stpRootCost}</c:if>\n\t</tr>\n\t</c:forEach>\n    </table>\n    </div>\n  </c:if>\n\n</div> <!-- end of tag col-md-6 -->\n\n<div class=\"col-md-6\">\n  \n  <!-- general info box -->\n  <div class=\"card\">\n    <div class=\"card-header\">\n  \t<span>General (Status: ${model.status})</span>\n    </div>\n  <div class=\"card-body\">\n    <ul class=\"list-unstyled mb-0\">\n      <c:if test=\"${model.showRancid}\">\n        <c:url var=\"rancidLink\" value=\"inventory/rancid.htm\">\n          <c:param name=\"node\" value=\"${model.id}\"/>\n        </c:url>\n        <li class=\"list-inline-item\">\n          <a href=\"<c:out value=\"${rancidLink}\"/>\">View Node Rancid Inventory Info </a>\n        </li>\n      </c:if>\n      <c:url var=\"detailLink\" value=\"element/linkednode.jsp\">\n        <c:param name=\"node\" value=\"${model.id}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${detailLink}\"/>\">View Node Link Detailed Info</a>\n      </li>\n    </ul>\n    </div>\t     \n  </div>\n  \n  <!-- Category box -->\n  <jsp:include page=\"/includes/nodeCategory-box.htm\" flush=\"false\" >\n    <jsp:param name=\"node\" value=\"${model.id}\" />\n  </jsp:include>\n  \n  <!-- notification box -->\n  <jsp:include page=\"/includes/notification-box.jsp\" flush=\"false\" >\n    <jsp:param name=\"node\" value=\"${model.id}\" />\n  </jsp:include>\n  \n  <!-- events list  box -->\n  <c:url var=\"eventListUrl\" value=\"event/list\">\n    <c:param name=\"filter\" value=\"node=${model.id}\"/>\n  </c:url>\n  <jsp:include page=\"/includes/eventlist.jsp\" flush=\"false\" >\n    <jsp:param name=\"node\" value=\"${model.id}\" />\n    <jsp:param name=\"throttle\" value=\"5\" />\n    <jsp:param name=\"header\" value=\"<a href='${eventListUrl}'>Recent Events</a>\" />\n    <jsp:param name=\"moreUrl\" value=\"${eventListUrl}\" />\n  </jsp:include>\n  \n  <!-- Recent outages box -->\n  <jsp:include page=\"/outage/nodeOutages-box.htm\" flush=\"false\"> \n    <jsp:param name=\"node\" value=\"${model.id}\" />\n  </jsp:include>\n\n</div>\n\n</div>\n\n<jsp:include page=\"/includes/bootstrap-footer.jsp\" flush=\"false\" />\n"], "fixing_code": ["const bootbox = require('bootbox');\n\nrequire('../services/Requisitions');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  const policyView = require('../../views/policy.html');\n  const moveView = require('../../views/move.html');\n  const detectorView = require('../../views/detector.html');\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name ForeignSourceController\n  * @module onms-requisitions\n  *\n  * @requires $scope Angular local scope\n  * @requires $routeParams Angular route parameters\n  * @requires $window Document window\n  * @requires $uibModal Angular UI modal\n  * @required filterFilter the Angular filter\n  * @required Configuration The configuration object\n  * @requires RequisitionsService The requisitions service\n  * @requires growl The growl plugin for instant notifications\n  *\n  * @description The controller for manage foreign source definitions (i.e. policies and detectors)\n  */\n  .controller('ForeignSourceController', ['$scope', '$routeParams', '$window', '$uibModal', 'filterFilter', 'Configuration', 'RequisitionsService', 'growl', function($scope, $routeParams, $window, $uibModal, filterFilter, Configuration, RequisitionsService, growl) {\n\n    /**\n    * @description The timing status.\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#timingStatus\n    * @propertyOf ForeignSourceController\n    * @returns {object} The timing status object\n    */\n    $scope.timingStatus = RequisitionsService.getTiming();\n\n    /**\n    * @description The foreign source (a.k.a the name of the requisition).\n    * The default value is obtained from the $routeParams.\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#foreignSource\n    * @propertyOf ForeignSourceController\n    * @returns {string} The foreign source\n    */\n    $scope.foreignSource = $routeParams.foreignSource;\n\n    /**\n    * @description The foreign source definition object\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#foreignSourceDef\n    * @propertyOf ForeignSourceController\n    * @returns {object} The foreign source definition\n    */\n    $scope.foreignSourceDef = { detectors: [], policies: [] };\n\n    /**\n    * @description The filteres object (used to track the content of the search fields)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#filters\n    * @propertyOf ForeignSourceController\n    * @returns {object} The filteres object\n    */\n    $scope.filters = { detector: null, policy: null };\n\n    /**\n    * @description The filtered list of detectors\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#filteredDetectors\n    * @propertyOf ForeignSourceController\n    * @returns {array} The filtered array\n    */\n    $scope.filteredDetectors = [];\n\n    /**\n    * @description The amount of detectors per page for pagination (defaults to 10)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#detectorsPageSize\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The page size\n    */\n    $scope.detectorsPageSize = 10;\n\n    /**\n    * @description The maximum size of detector pages for pagination (defaults to 5)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#detectorsMaxSize\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The maximum size\n    */\n    $scope.detectorsMaxSize = 5;\n\n    /**\n    * @description The total amount of detectors for pagination (defaults to 0)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#detectorsTotalItems\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The total detectors\n    */\n    $scope.detectorsTotalItems = 0;\n\n    /**\n    * @description The filtered list of policies\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#filteredPolicies\n    * @propertyOf ForeignSourceController\n    * @returns {array} The filtered array\n    */\n    $scope.filteredPolicies = [];\n\n    /**\n    * @description The amount of policies per page for pagination (defaults to 10)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#policiesPageSize\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The page size\n    */\n    $scope.policiesPageSize = 10;\n\n    /**\n    * @description The maximum size of policies pages for pagination (defaults to 5)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#policiesMaxSize\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The maximum size\n    */\n    $scope.policiesMaxSize = 5;\n\n    /**\n    * @description The total amount of policies for pagination (defaults to 0)\n    *\n    * @ngdoc property\n    * @name ForeignSourceController#policiesTotalItems\n    * @propertyOf ForeignSourceController\n    * @returns {integer} The total policies\n    */\n    $scope.policiesTotalItems = 0;\n\n    /**\n    * @description Goes to specific URL warning about changes if exist.\n    *\n    * @name ForeignSourceController:goTo\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} handler The goto handler\n    */\n    $scope.goTo = function(handler) {\n      if (this.fsForm.$dirty) {\n        bootbox.dialog({\n          message: 'There are changes on the current requisition. Are you sure you want to cancel ?',\n          title: 'Cancel Changes',\n          buttons: {\n            success: {\n              label: 'Yes',\n              className: 'btn-primary',\n              callback: handler\n            },\n            main: {\n              label: 'No',\n              className: 'btn-secondary'\n            }\n          }\n        });\n      } else {\n        handler();\n      }\n    };\n\n    /**\n    * @description Goes back to requisitions list (navigation)\n    *\n    * @name ForeignSourceController:goTop\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.goTop = function() {\n      var doGoTop = function() {\n        $window.location.href = Configuration.baseHref + '#/requisitions';\n      };\n      $scope.goTo(doGoTop);\n    };\n\n    /**\n    * @description Goes back to requisition editor (navigation)\n    *\n    * @name ForeignSourceController:goBack\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.goBack = function() {\n      var doGoBack = function() {\n        if ($scope.foreignSource === 'default') {\n          $window.location.href = Configuration.baseHref + '#/requisitions';\n        } else {\n          $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource);\n        }\n      };\n      $scope.goTo(doGoBack);\n    };\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name ForeignSourceController:errorHandler\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Returns the index of a policy\n    *\n    * @name ForeignSourceController:indexOfPolicy\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The policy object\n    */\n    $scope.indexOfPolicy = function(policy) {\n      for (var i = 0; i < $scope.foreignSourceDef.policies.length; i++) {\n        if ($scope.foreignSourceDef.policies[i].name === policy.name) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n    * @description Returns the index of a detector\n    *\n    * @name ForeignSourceController:indexOfDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The detector object\n    */\n    $scope.indexOfDetector = function(detector) {\n      for (var i = 0; i < $scope.foreignSourceDef.detectors.length; i++) {\n        if ($scope.foreignSourceDef.detectors[i].name === detector.name) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n    * @description Opens the modal window to add/edit a policy\n    *\n    * @name ForeignSourceController:editPolicy\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The policy object to edit\n    * @param {boolean} isNew true, if the policy is new\n    */\n    $scope.editPolicy = function(policy, isNew) {\n      var form = this.fsForm;\n      $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'PolicyController',\n        templateUrl: policyView,\n        resolve: {\n          policy: function() { return angular.copy(policy); }\n        }\n      }).result.then(function(result) {\n        angular.copy(result, policy);\n        form.$dirty = true;\n      }, function() {\n        if (isNew) {\n          $scope.foreignSourceDef.policies.pop();\n        }\n      });\n    };\n\n    /**\n    * @description Opens the modal window to move a policy\n    *\n    * @name ForeignSourceController:moveDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The policy object to move\n    */\n    $scope.movePolicy = function(policy) {\n      var form = this.fsForm;\n      var pos = $scope.indexOfPolicy(policy);\n      var max = $scope.foreignSourceDef.policies.length - 1;\n      $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        size: 'sm',\n        controller: 'MoveController',\n        templateUrl: moveView,\n        resolve: {\n          label: function() { return policy.name; },\n          position: function() { return pos; },\n          maximum: function() { return max; }\n        }\n      }).result.then(function(dst) {\n        form.$dirty = true;\n        $scope.foreignSourceDef.policies.splice(pos, 1);\n        $scope.foreignSourceDef.policies.splice(dst, 0, policy);\n\n      });\n    };\n\n    /**\n    * @description Removes a policy\n    *\n    * @name ForeignSourceController:removePolicy\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} policy The policy object to remove\n    */\n    $scope.removePolicy = function(policy) {\n      var index = $scope.indexOfPolicy(policy);\n      if (index > -1) {\n        $scope.foreignSourceDef.policies.splice(index, 1);\n        this.fsForm.$dirty = true;\n      }\n    };\n\n    /**\n    * @description Adds a new policy\n    *\n    * @name ForeignSourceController:addPolicy\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.addPolicy = function() {\n      $scope.foreignSourceDef.policies.push({ 'name': '', 'class': '', 'parameter': [] });\n      var index = $scope.foreignSourceDef.policies.length - 1;\n      $scope.editPolicy($scope.foreignSourceDef.policies[index], true);\n    };\n\n    /**\n    * @description Opens the modal window to add/edit a detector\n    *\n    * @name ForeignSourceController:editDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} detector The detector object to edit\n    * @param {boolean} isNew true, if the detector is new\n    */\n    $scope.editDetector = function(detector, isNew) {\n      var form = this.fsForm;\n      $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'DetectorController',\n        templateUrl: detectorView,\n        resolve: {\n          detector: function() { return angular.copy(detector); }\n        }\n      }).result.then(function(result) {\n        angular.copy(result, detector);\n        form.$dirty = true;\n      }, function() {\n        if (isNew) {\n          $scope.foreignSourceDef.detectors.pop();\n        }\n      });\n    };\n\n    /**\n    * @description Opens the modal window to move a detector\n    *\n    * @name ForeignSourceController:moveDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} detector The detector object to move\n    */\n    $scope.moveDetector = function(detector) {\n      var form = this.fsForm;\n      var pos = $scope.indexOfDetector(detector);\n      var max = $scope.foreignSourceDef.detectors.length - 1;\n      $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        size: 'sm',\n        controller: 'MoveController',\n        templateUrl: moveView,\n        resolve: {\n          label: function() { return detector.name; },\n          position: function() { return pos; },\n          maximum: function() { return max; }\n        }\n      }).result.then(function(dst) {\n        form.$dirty = true;\n        $scope.foreignSourceDef.detectors.splice(pos, 1);\n        $scope.foreignSourceDef.detectors.splice(dst, 0, detector);\n\n      });\n    };\n\n    /**\n    * @description Removes a detector\n    *\n    * @name ForeignSourceController:removeDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    * @param {object} detector The detector object to remove\n    */\n    $scope.removeDetector = function(detector) {\n      var index = $scope.indexOfDetector(detector);\n      if (index > -1) {\n        $scope.foreignSourceDef.detectors.splice(index, 1);\n        this.fsForm.$dirty = true;\n      }\n    };\n\n    /**\n    * @description Adds a new detector\n    *\n    * @name ForeignSourceController:addDetector\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.addDetector = function() {\n      $scope.foreignSourceDef.detectors.push({ 'name': '', 'class': '', 'parameter': [] });\n      var index = $scope.foreignSourceDef.detectors.length - 1;\n      $scope.editDetector($scope.foreignSourceDef.detectors[index], true);\n    };\n\n    /**\n    * @description Saves the local foreign source on the server\n    *\n    * @name ForeignSourceController:save\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.save = function() {\n      var form = this.fsForm;\n      RequisitionsService.startTiming();\n      RequisitionsService.saveForeignSourceDefinition($scope.foreignSourceDef).then(\n        function() { // success\n          growl.success('The definition for the requisition ' + _.escape($scope.foreignSource) + ' has been saved.');\n          form.$dirty = false;\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Resets to the default set of detectors and policies\n    *\n    * @name ForeignSourceController:reset\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.reset = function() {\n      bootbox.confirm('Are you sure you want to reset the foreign source definition to the default ?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.deleteForeignSourceDefinition($scope.foreignSource).then(\n            function() { // success\n              growl.success('The foreign source definition for ' + _.escape($scope.foreignSource) + 'has been reseted.');\n              $scope.initialize();\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Updates the pagination variables for the policies.\n    *\n    * @name ForeignSourceController:updateFilteredPolicies\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.updateFilteredPolicies = function() {\n      $scope.policiesCurrentPage = 1;\n      $scope.policiesTotalItems = $scope.filteredPolicies.length;\n      $scope.policiesNumPages = Math.ceil($scope.policiesTotalItems / $scope.policiesPageSize);\n    };\n\n    /**\n    * @description Updates the pagination variables for the detectors.\n    *\n    * @name ForeignSourceController:updateFilteredDetectors\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.updateFilteredDetectors = function() {\n      $scope.detectorsCurrentPage = 1;\n      $scope.detectorsTotalItems = $scope.filteredDetectors.length;\n      $scope.detectorsNumPages = Math.ceil($scope.detectorsTotalItems / $scope.detectorsPageSize);\n    };\n\n    /**\n    * @description Initialized the local foreign source definition from the server\n    *\n    * @name ForeignSourceController:initialize\n    * @ngdoc method\n    * @methodOf ForeignSourceController\n    */\n    $scope.initialize = function() {\n      growl.success('Retrieving definition for requisition ' + _.escape($scope.foreignSource) + '...');\n      RequisitionsService.getForeignSourceDefinition($scope.foreignSource).then(\n        function(foreignSourceDef) { // success\n          $scope.foreignSourceDef = foreignSourceDef;\n          // Updating pagination variables for detectors.\n          $scope.filteredDetectors = $scope.foreignSourceDef.detectors;\n          $scope.updateFilteredDetectors();\n          // Updating pagination variables for policies.\n          $scope.filteredPolicies = $scope.foreignSourceDef.policies;\n          $scope.updateFilteredPolicies();\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Watch for filter changes in order to update the detector list and updates the pagination control\n    *\n    * @name ForeignSourceController:detectorFilter\n    * @ngdoc event\n    * @methodOf ForeignSourceController\n    */\n    $scope.$watch('filters.detector', function() {\n      $scope.filteredDetectors = filterFilter($scope.foreignSourceDef.detectors, $scope.filters.detector);\n      $scope.updateFilteredDetectors();\n    });\n\n    /**\n    * @description Watch for filter changes in order to update the policy list and updates the pagination control\n    *\n    * @name ForeignSourceController:policyFilter\n    * @ngdoc event\n    * @methodOf ForeignSourceController\n    */\n    $scope.$watch('filters.policy', function() {\n      $scope.filteredPolicies = filterFilter($scope.foreignSourceDef.policies, $scope.filters.policy);\n      $scope.updateFilteredPolicies();\n    });\n\n    // Initialization\n\n    if ($scope.foreignSource) {\n      $scope.initialize();\n    }\n  }]);\n\n}());\n", "const bootbox = require('bootbox');\n\nrequire('../services/Requisitions');\n\nconst RequisitionNode = require('../model/RequisitionNode');\nconst RequisitionMetaDataEntry = require('../model/RequisitionMetaDataEntry');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  const assetView = require('../../views/asset.html');\n  const metaDataView = require('../../views/metadata.html');\n  const interfaceView = require('../../views/interface.html');\n\n  const nodeBasicView = require('../../views/node-basic.html');\n  const nodePathoutagesView = require('../../views/node-pathoutages.html');\n  const nodeInterfacesView = require('../../views/node-interfaces.html');\n  const nodeAssetsView = require('../../views/node-assets.html');\n  const nodeMetaDataView = require('../../views/node-metadata.html');\n  const nodeCategoriesView = require('../../views/node-categories.html');\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name NodeController\n  * @module onms-requisitions\n  *\n  * @requires $scope Angular local scope\n  * @requires $routeParams Angular route params\n  * @requires $cookies Angular cookies\n  * @requires $window Document window\n  * @requires $uibModal Angular UI modal\n  * @required Configuration The configuration object\n  * @requires RequisitionsService The requisitions service\n  * @requires growl The growl plugin for instant notifications\n  *\n  * @description The controller for manage requisitioned nodes (add/edit the nodes on a specific requisition)\n  */\n  .controller('NodeController', ['$scope', '$routeParams', '$cookies', '$window', '$uibModal', 'Configuration', 'RequisitionsService', 'growl', function($scope, $routeParams, $cookies, $window, $uibModal, Configuration, RequisitionsService, growl) {\n    $scope.nodeBasicView = nodeBasicView;\n    $scope.nodePathoutagesView = nodePathoutagesView;\n    $scope.nodeInterfacesView = nodeInterfacesView;\n    $scope.nodeAssetsView = nodeAssetsView;\n    $scope.nodeMetaDataView = nodeMetaDataView;\n    $scope.nodeCategoriesView = nodeCategoriesView;\n\n    /**\n    * @description The timing status.\n    *\n    * @ngdoc property\n    * @name NodeController#timingStatus\n    * @propertyOf NodeController\n    * @returns {object} The timing status object\n    */\n    $scope.timingStatus = RequisitionsService.getTiming();\n\n    /**\n    * @description The foreign source (a.k.a the name of the requisition).\n    * The default value is obtained from the $routeParams.\n    *\n    * @ngdoc property\n    * @name NodeController#foreignSource\n    * @propertyOf NodeController\n    * @returns {string} The foreign source\n    */\n    $scope.foreignSource = $routeParams.foreignSource;\n\n    /**\n    * @description The foreign ID\n    * The default value is obtained from the $routeParams.\n    * For new nodes, the content must be '__new__'.\n    *\n    * @ngdoc property\n    * @name NodeController#foreignId\n    * @propertyOf NodeController\n    * @returns {string} The foreign ID\n    */\n    $scope.foreignId = $routeParams.foreignId;\n\n    /**\n    * @description The isNew flag\n    *\n    * @ngdoc property\n    * @name NodeController#isNew\n    * @propertyOf NodeController\n    * @returns {boolean} true, if the foreign ID is equal to '__new__'\n    */\n    $scope.isNew = $scope.foreignId === '__new__';\n\n    /**\n    * @description The node object\n    *\n    * @ngdoc property\n    * @name NodeController#node\n    * @propertyOf NodeController\n    * @returns {object} The node object\n    */\n    $scope.node = {};\n\n    /**\n    * @description The available configured categories\n    *\n    * @ngdoc property\n    * @name NodeController#availableCategories\n    * @propertyOf NodeController\n    * @returns {array} The categories\n    */\n    $scope.availableCategories = [];\n\n    /**\n    * @description The available configured locations\n    *\n    * @ngdoc property\n    * @name NodeController#availableLocations\n    * @propertyOf NodeController\n    * @returns {array} The locations\n    */\n    $scope.availableLocations = [];\n\n    /**\n    * @description The list of black-listed foreign IDs.\n    * The foreignId must be unique within the requisition.\n    * For an existing node, the foreignId should not be changed.\n    * For new nodes, the foreignId must be validated.\n    *\n    * @ngdoc property\n    * @name NodeController#foreignIdBlackList\n    * @propertyOf NodeController\n    * @returns {array} The list of black-listed foreign IDs.\n    */\n    $scope.foreignIdBlackList = [];\n\n    /**\n    * @description Goes to specific URL warning about changes if exist.\n    *\n    * @name NodeController:goTo\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {string} url The URL to go\n    */\n    $scope.goTo = function(url) {\n      var doGoTo = function() {\n        $window.location.href = url;\n      };\n      if (this.nodeForm.$dirty) {\n        bootbox.dialog({\n          message: 'There are changes on the current node. Are you sure you want to cancel ?',\n          title: 'Cancel Changes',\n          buttons: {\n            success: {\n              label: 'Yes',\n              className: 'btn-primary',\n              callback: doGoTo\n            },\n            main: {\n              label: 'No',\n              className: 'btn-secondary'\n            }\n          }\n        });\n      } else {\n        doGoTo();\n      }\n    };\n\n    /**\n    * @description Goes back to requisitions list (navigation)\n    *\n    * @name NodeController:goTop\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.goTop = function() {\n      $scope.goTo(Configuration.baseHref + '#/requisitions');\n    };\n\n    /**\n    * @description Goes back to requisition editor (navigation)\n    *\n    * @name NodeController:goBack\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.goBack = function() {\n      $scope.goTo(Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource));\n    };\n\n    /**\n    * @description Goes to the vertical layout page (navigation)\n    *\n    * @name NodeController:goVerticalLayout\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.goVerticalLayout = function() {\n      $cookies.put('use_requisitions_node_vertical_layout', 'true');\n      $scope.goTo(Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/nodes/' + encodeURIComponent($scope.foreignId) + '/vertical');\n    };\n\n    /**\n    * @description Goes to the horizontal layout page (navigation)\n    *\n    * @name NodeController:goHorizontalLayout\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.goHorizontalLayout = function() {\n      $cookies.put('use_requisitions_node_vertical_layout', 'false');\n      $scope.goTo(Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/nodes/' + encodeURIComponent($scope.foreignId));\n    };\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name NodeController:errorHandler\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Generates a foreign Id\n    *\n    * @name NodeController:generateForeignId\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {object} the form object associated with the foreignId\n    */\n    $scope.generateForeignId = function(formObj) {\n      $scope.node.foreignId = String(new Date().getTime());\n      formObj.$invalid = false;\n    };\n\n    /**\n    * @description Shows the dialog for add/edit an asset field\n    *\n    * @name NodeController:editAsset\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the asset to be edited\n    * @param {boolean} isNew true, if the asset is new\n    */\n    $scope.editAsset = function(index, isNew) {\n      var form = this.nodeForm;\n      var assetToEdit = $scope.node.assets[index];\n      var assetsBlackList = [];\n      angular.forEach($scope.node.assets, function(asset) {\n        assetsBlackList.push(asset.name);\n      });\n\n      var modalInstance = $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'AssetController',\n        templateUrl: assetView,\n        resolve: {\n          asset: function() { return angular.copy(assetToEdit); },\n          assetsBlackList: function() { return assetsBlackList; }\n        }\n      });\n\n      modalInstance.result.then(function(result) {\n        angular.copy(result, assetToEdit);\n        form.$dirty = true;\n      }, function() {\n        if (isNew) {\n          $scope.node.assets.pop();\n        }\n      });\n    };\n\n    /**\n    * @description Removes an asset from the local node\n    *\n    * @name NodeController:removeAsset\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the asset to be removed\n    */\n    $scope.removeAsset = function(index) {\n      $scope.node.assets.splice(index, 1);\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Adds a new asset to the local node\n    *\n    * @name NodeController:addAsset\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.addAsset = function() {\n      $scope.editAsset($scope.node.addNewAsset(), true);\n    };\n\n    /**\n     * @description Should be called when the meta-data tab is selected\n     *\n     * @name NodeController:onMetadataTabSelect\n     * @ngdoc method\n     * @methodOf NodeController\n     */\n    $scope.onMetadataTabSelect = function() {\n      // Before switching over to the tab, let's delete any entries that reference entities which no longer exist\n      // i.e. in the case that meta-data was associated with an interface, and that interface is now deleted\n      $scope.node.metaData.removeEntriesForMissingScopedEntities();\n    };\n\n    $scope.deleteNode = function(node) {\n      bootbox.confirm('Are you sure you want to delete the current node?', function(ok) {\n      if (ok) {\n        RequisitionsService.startTiming();\n        RequisitionsService.deleteNode(node)\n            .then(function() {\n              $scope.nodeForm.$setPristine(); // Ignore dirty state\n              $scope.goBack();\n              // If node was just created, it has no label yet\n              if (node.nodeLabel) {\n                growl.success('The node ' + _.escape(node.nodeLabel) + ' has been deleted.');\n              } else {\n                growl.success('The node has been deleted.');\n              }\n            },\n            $scope.errorHandler\n        );\n      }\n      });\n    };\n\n    /**\n     * @description Shows the dialog for add/edit an metaData entry\n     *\n     * @name NodeController:editMetaData\n     * @ngdoc method\n     * @methodOf NodeController\n     * @param {object} entry The metaData entry to be edited\n     * @param {boolean} isNew true, if the metaData entry is new\n     */\n    $scope.editMetaData = function(entry, isNew) {\n        const form = this.nodeForm;\n\n      const modalInstance = $uibModal.open({\n            backdrop: 'static',\n            keyboard: false,\n            controller: 'MetaDataController',\n            templateUrl: metaDataView,\n            resolve: {\n                node: function() { return angular.copy($scope.node); },\n                entry: function() { return angular.copy(entry); }\n            }\n        });\n\n        modalInstance.result.then(function(result) {\n            angular.copy(result, entry);\n            form.$dirty = true;\n            if (isNew) {\n              $scope.node.metaData.addEntry(entry);\n            }\n        });\n    };\n\n    /**\n     * @description Removes an metaData entry from the local node\n     *\n     * @name NodeController:removeMetaData\n     * @ngdoc method\n     * @methodOf NodeController\n     * @param {object} entry The index of the metaData entry to be removed\n     */\n    $scope.removeMetaData = function(entry) {\n      $scope.node.metaData.removeEntry(entry);\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n     * @description Adds a new metaData entry to the local node\n     *\n     * @name NodeController:addMetaData\n     * @ngdoc method\n     * @methodOf NodeController\n     */\n    $scope.addMetaData = function() {\n        $scope.editMetaData(new RequisitionMetaDataEntry(), true);\n    };\n\n    /**\n    * @description Shows a modal dialog for add/edit an interface\n    *\n    * @name NodeController:editInterface\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the interface to be edited\n    * @param {boolean} isNew true, if the interface is new\n    */\n    $scope.editInterface = function(index, isNew) {\n      var form = this.nodeForm;\n      var intfToEdit = $scope.node.interfaces[index];\n      var foreignSource = $scope.foreignSource;\n      var foreignId = $scope.foreignId;\n      var ipBlackList = [];\n      angular.forEach($scope.node.interfaces, function(intf) {\n        ipBlackList.push(intf.ipAddress);\n      });\n\n      var modalInstance = $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'InterfaceController',\n        templateUrl: interfaceView,\n        resolve: {\n          foreignId: function() { return foreignId; },\n          foreignSource: function() { return foreignSource; },\n          requisitionInterface: function() { return angular.copy(intfToEdit); },\n          ipBlackList: function() { return ipBlackList; },\n          primaryInterface : function() { return $scope.getPrimaryAddress();}\n        }\n      });\n\n      modalInstance.result.then(function(result) {\n        angular.copy(result, intfToEdit);\n        form.$dirty = true;\n      }, function() {\n        if (isNew) {\n          $scope.node.interfaces.pop();\n        }\n      });\n    };\n\n    /**\n    * @description Removes an interface from the local node\n    *\n    * @name NodeController:removeInterface\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the interface to be removed\n    */\n    $scope.removeInterface = function(index) {\n      $scope.node.interfaces.splice(index, 1);\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Adds a new interface to the local node\n    *\n    * @name NodeController:addInterface\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.addInterface = function() {\n      $scope.editInterface($scope.node.addNewInterface(), true);\n    };\n\n    /**\n    * @description Removes a category from the local node\n    *\n    * @name NodeController:removeCategory\n    * @ngdoc method\n    * @methodOf NodeController\n    * @param {integer} index The index of the category to be removed\n    */\n    $scope.removeCategory = function(index) {\n      $scope.node.categories.splice(index, 1);\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Adds a new category to the local node\n    *\n    * @name NodeController:addCategory\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.addCategory = function() {\n      $scope.node.addNewCategory();\n      this.nodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Saves the local node on the server\n    *\n    * @name NodeController:save\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.save = function() {\n      var form = this.nodeForm;\n      RequisitionsService.startTiming();\n      RequisitionsService.saveNode($scope.node).then(\n        function() { // success\n          growl.success('The node ' + _.escape($scope.node.nodeLabel) + ' has been saved.');\n          $scope.foreignId = $scope.node.foreignId;\n          form.$dirty = false;\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Refresh the local node from the server\n    *\n    * @name NodeController:refresh\n    * @ngdoc method\n    * @methodOf NodeController\n    */\n    $scope.refresh = function() {\n      growl.success('Retrieving node ' + _.escape($scope.foreignId) + ' from requisition ' + _.escape($scope.foreignSource) + '...');\n      RequisitionsService.getNode($scope.foreignSource, $scope.foreignId).then(\n        function(node) { // success\n          $scope.node = node;\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Get the unused available categories\n    *\n    * @name NodeController:getAvailableCategories\n    * @ngdoc method\n    * @methodOf NodeController\n    * @returns {array} the unused available categories\n    */\n    $scope.getAvailableCategories = function() {\n      var categories = [];\n      angular.forEach($scope.availableCategories, function(category) {\n        var found = false;\n        angular.forEach($scope.node.categories, function(c) {\n          if (c.name === category) {\n            found = true;\n          }\n        });\n        if (!found) {\n          categories.push(category);\n        }\n      });\n      return categories;\n    };\n\n    /**\n    * @description Gets the primary IP address\n    *\n    * @name NodeController:getPrimaryAddress\n    * @ngdoc method\n    * @methodOf NodeController\n    * @returns {string} the primary IP address or 'N/A' if it doesn't exist.\n    */\n    $scope.getPrimaryAddress = function() {\n      const ip = $scope.node.getPrimaryIpAddress();\n      return ip ? ip : null;\n    };\n\n    // Initialization of the node's page for either adding a new node or editing an existing node\n\n    if ($scope.isNew) {\n      $scope.node = new RequisitionNode($scope.foreignSource, {});\n    } else {\n      $scope.refresh();\n    }\n\n    // Initialize categories\n    RequisitionsService.getAvailableCategories().then(\n      function(categories) { // success\n        $scope.availableCategories = categories;\n      },\n      $scope.errorHandler\n    );\n\n    // Initialize locations\n    RequisitionsService.getAvailableLocations().then(\n      function(locations) { // success\n        $scope.availableLocations = locations;\n      },\n      $scope.errorHandler\n    );\n\n    // Initialize foreign-id black list (thanks to the cache, this call is not expensive)\n    // TODO: What if the cache is disabled ?\n    RequisitionsService.getRequisition($scope.foreignSource).then(\n      function(requisition) {\n        angular.forEach(requisition.nodes, function(node) {\n          $scope.foreignIdBlackList.push(node.foreignId);\n        });\n      },\n      $scope.errorHandler\n    );\n\n  }]);\n\n}());\n", "require('../services/Requisitions');\n\nimport Util from 'lib/util';\nconst QuickNode = require('../model/QuickNode');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  const quickAddPanelBasicView = require('../../views/quick-add-panel-basic.html');\n  const quickAddPanelSnmpView = require('../../views/quick-add-panel-snmp.html');\n  const quickAddPanelCategoriesView = require('../../views/quick-add-panel-categories.html');\n  const quickAddPanelCliView = require('../../views/quick-add-panel-cli.html');\n  const quickAddPanelHelpView = require('../../views/quick-add-panel-help.html');\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name QuickAddNodeController\n  * @module onms-requisitions\n  *\n  * @requires $scope Angular local scope\n  * @requires foreignSources The list of available requisitions (a.k.a. foreign source)\n  * @requires RequisitionsService The requisitions service\n  * @requires growl The growl plugin for instant notifications\n  *\n  * @description The controller for manage the modal dialog for quick add a node to an existing requisition.\n  */\n  .controller('QuickAddNodeController', ['$scope', 'foreignSources', 'RequisitionsService', 'growl', '$sanitize', function($scope, foreignSources, RequisitionsService, growl, $sanitize) {\n    $scope.quickAddPanelBasicView = quickAddPanelBasicView;\n    $scope.quickAddPanelSnmpView = quickAddPanelSnmpView;\n    $scope.quickAddPanelCategoriesView = quickAddPanelCategoriesView;\n    $scope.quickAddPanelCliView = quickAddPanelCliView;\n    $scope.quickAddPanelHelpView = quickAddPanelHelpView;\n\n    /**\n    * @description The available foreign sources\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#foreignSources\n    * @propertyOf QuickAddNodeController\n    * @returns {array} List of available foreign sources\n    */\n    $scope.foreignSources = [];\n\n    /**\n    * @description The available configured categories\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#availableCategories\n    * @propertyOf QuickAddNodeController\n    * @returns {array} The categories\n    */\n    $scope.availableCategories = [];\n\n    /**\n    * @description The available access methods\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#availableAccessMethods\n    * @propertyOf QuickAddNodeController\n    * @returns {array} The access methods\n    */\n    $scope.availableAccessMethods = [ 'RSH', 'SSH', 'Telnet' ];\n\n    /**\n    * @description The saving flag (true when the node is being saved)\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#isSaving\n    * @propertyOf QuickAddNodeController\n    * @returns {boolean} true when the node is being saved\n    */\n    $scope.isSaving = false;\n\n    /**\n    * @description The source object that contains all the required information for the new node\n    *\n    * @ngdoc property\n    * @name QuickAddNodeController#node\n    * @propertyOf QuickAddNodeController\n    * @returns {object} The source object\n    */\n    $scope.node = new QuickNode();\n\n    /**\n    * @description Generates a foreign Id\n    *\n    * @name QuickAddNodeController:generateForeignId\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @param {object} the form object associated with the foreignId\n    */\n    $scope.generateForeignId = function(formObj) {\n      $scope.node.foreignId = String(new Date().getTime());\n      formObj.$invalid = false;\n    };\n\n    /**\n    * @description Provision the current node\n    *\n    * @name QuickAddNodeController:provision\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    */\n    $scope.provision = function() {\n      $scope.isSaving = true;\n      growl.info('The node ' + _.escape($scope.node.nodeLabel) + ' is being added to requisition ' + _.escape($scope.node.foreignSource) + '. Please wait...');\n      var successMessage = 'The node ' + _.escape($scope.node.nodeLabel) + ' has been added to requisition ' + _.escape($scope.node.foreignSource);\n      RequisitionsService.quickAddNode($scope.node).then(\n        function() { // success\n          $scope.reset();\n          bootbox.dialog({\n            message: successMessage,\n            title: 'Success',\n            buttons: {\n              main: {\n                label: 'Ok',\n                className: 'btn-secondary'\n              }\n            }\n          });\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Resets the current node\n    *\n    * @name QuickAddNodeController:reset\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    */\n    $scope.reset = function() {\n      $scope.node = new QuickNode(); // Resetting the object.\n      $scope.isSaving = false;\n    };\n\n   /**\n    * @description Get the unused available categories\n    *\n    * @name QuickAddNodeController:getAvailableCategories\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @returns {array} the unused available categories\n    */\n    $scope.getAvailableCategories = function() {\n      var categories = [];\n      angular.forEach($scope.availableCategories, function(category) {\n        var found = false;\n        angular.forEach($scope.node.categories, function(c) {\n          if (c.name === category) {\n            found = true;\n          }\n        });\n        if (!found) {\n          categories.push(category);\n        }\n      });\n      return categories;\n    };\n\n    /**\n    * @description Removes a category from the local node\n    *\n    * @name QuickAddNodeController:removeCategory\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @param {integer} index The index of the category to be removed\n    */\n    $scope.removeCategory = function(index) {\n      $scope.node.categories.splice(index, 1);\n      this.quickAddNodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Adds a new category to the local node\n    *\n    * @name QuickAddNodeController:addCategory\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    */\n    $scope.addCategory = function() {\n      $scope.node.addNewCategory();\n      this.quickAddNodeForm.$dirty = true;\n    };\n\n    /**\n    * @description Checks if the form is valid or not\n    *\n    * @name QuickAddNodeController:isInvalid\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @returns {boolean} true if the form is invalid.\n    */\n    $scope.isInvalid = function() {\n      if (!this.quickAddNodeForm ||\n        !this.quickAddNodeForm.foreignSource ||\n        !this.quickAddNodeForm.ipAddress ||\n        !this.quickAddNodeForm.nodeLabel) {\n        return true;\n      }\n      return this.quickAddNodeForm.foreignSource.$invalid ||\n        this.quickAddNodeForm.ipAddress.$invalid ||\n        this.quickAddNodeForm.nodeLabel.$invalid;\n    };\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name QuickAddNodeController:errorHandler\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Adds a new requisition\n    *\n    * @name QuickAddNodeController:addRequisition\n    * @ngdoc method\n    * @methodOf QuickAddNodeController\n    */\n    $scope.addRequisition = function() {\n      bootbox.prompt('A requisition is required, please enter the name for a new requisition', function(foreignSource) {\n        if (foreignSource) {\n          RequisitionsService.addRequisition(foreignSource).then(\n            function() { // success\n              RequisitionsService.synchronizeRequisition(foreignSource, false).then(\n                function() {\n                  growl.success('The requisition ' + _.escape(foreignSource) + ' has been created and synchronized.');\n                  $scope.foreignSources.push(foreignSource);\n                },\n                $scope.errorHandler\n              );\n            },\n            $scope.errorHandler\n          );\n        } else {\n          window.location.href = Util.getBaseHref() + 'admin/opennms/index.jsp'; // TODO Is this the best way ?\n        }\n      });\n    };\n\n    // Initialize categories\n    RequisitionsService.getAvailableCategories().then(\n      function(categories) { // success\n        $scope.availableCategories = categories;\n      },\n      $scope.errorHandler\n    );\n\n    // Initialize requisitions\n    if (!foreignSources) {\n      RequisitionsService.getRequisitionNames().then(\n        function(requisitions) { // success\n          $scope.foreignSources = requisitions;\n          // If there is NO requisitions, the user has to create a new one\n          if ($scope.foreignSources.length === 0) {\n            $scope.addRequisition();\n          }\n        },\n        $scope.errorHandler\n      );\n    } else {\n      $scope.foreignSources = foreignSources;\n    }\n\n  }]);\n\n}());\n", "const bootbox = require('bootbox');\n\nconst Requisition = require('../model/Requisition');\n\nrequire('../services/Requisitions');\nrequire('../services/Synchronize');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name RequisitionController\n  * @module onms-requisitions\n  *\n  * @description The controller for manage a single requisition (add/edit)\n  *\n  * @requires $scope Angular local scope\n  * @requires $filter Angular filter\n  * @requires $cookies Angular cookies\n  * @requires $window Document window\n  * @requires $routeParams Angular route parameters\n  * @required Configuration The configuration object\n  * @requires RequisitionsService The requisitions service\n  * @requires SynchronizeService The synchronize service\n  * @requires growl The growl plugin for instant notifications\n  */\n  .controller('RequisitionController', ['$scope', '$filter', '$cookies', '$window', '$routeParams', 'Configuration', 'RequisitionsService', 'SynchronizeService', 'growl', function($scope, $filter, $cookies, $window, $routeParams, Configuration, RequisitionsService, SynchronizeService, growl) {\n\n    /**\n    * @description The timing status.\n    *\n    * @ngdoc property\n    * @name RequisitionController#timingStatus\n    * @propertyOf RequisitionController\n    * @returns {object} The timing status object\n    */\n    $scope.timingStatus = RequisitionsService.getTiming();\n\n    /**\n    * @description The foreign source (a.k.a the name of the requisition).\n    * The default value is obtained from the $routeParams.\n    *\n    * @ngdoc property\n    * @name RequisitionController#foreignSource\n    * @propertyOf RequisitionController\n    * @returns {string} The foreign source\n    */\n    $scope.foreignSource = $routeParams.foreignSource;\n\n    /**\n    * @description The requisition object\n    *\n    * @ngdoc property\n    * @name RequisitionController#requisition\n    * @propertyOf RequisitionController\n    * @returns {object} The requisition object\n    */\n    $scope.requisition = new Requisition({});\n\n    /**\n    * @description The filtered list of nodes\n    *\n    * @ngdoc property\n    * @name RequisitionController#filteredNodes\n    * @propertyOf RequisitionController\n    * @returns {array} The filtered array\n    */\n    $scope.filteredNodes = [];\n\n    /**\n    * @description The amount of items per page for pagination (defaults to 10)\n    *\n    * @ngdoc property\n    * @name RequisitionController#pageSize\n    * @propertyOf RequisitionController\n    * @returns {integer} The page size\n    */\n    $scope.pageSize = 10;\n\n    /**\n    * @description The maximum size of pages for pagination (defaults to 5)\n    *\n    * @ngdoc property\n    * @name RequisitionController#maxSize\n    * @propertyOf RequisitionController\n    * @returns {integer} The maximum size\n    */\n    $scope.maxSize = 5;\n\n    /**\n    * @description The total amount of items for pagination (defaults to 0)\n    *\n    * @ngdoc property\n    * @name RequisitionController#totalItems\n    * @propertyOf RequisitionController\n    * @returns {integer} The total items\n    */\n    $scope.totalItems = 0;\n\n    /**\n    * @description Goes back to requisitions list (navigation)\n    *\n    * @name RequisitionController:goBack\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    // FIXME Should be called getTop to be consistent with the rest of the controllers\n    $scope.goBack = function() {\n      $window.location.href = Configuration.baseHref + '#/requisitions';\n    };\n\n    /**\n    * @description Goes to the edition page for the foreign source definition of the requisition (navigation)\n    *\n    * @name RequisitionController:editForeignSource\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.editForeignSource = function() {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/foreignSource';\n    };\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name RequisitionController:errorHandler\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Requests the synchronization/import of a requisition on the server\n    *\n    * A dialog box is displayed to request to the user if the scan phase should be triggered or not.\n    *\n    * @name RequisitionController:synchronize\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.synchronize = function() {\n      SynchronizeService.synchronize($scope.requisition, $scope.errorHandler);\n    };\n\n    /**\n    * @description Returns the vertical layout suffix for nodes if enabled\n    *\n    * @name RequisitionController:getVerticalLayout\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @returns {string} URL suffix for vertical layout if enabled.\n    */\n    $scope.getVerticalLayout = function() {\n      var isVertical = $cookies.get('use_requisitions_node_vertical_layout');\n      return isVertical === 'true' ? '/vertical' : '';\n    };\n\n    /**\n    * @description Goes to the page for adding a new node to the requisition (navigation)\n    *\n    * @name RequisitionController:addNode\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.addNode = function() {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/nodes/__new__' + $scope.getVerticalLayout();\n    };\n\n    /**\n    * @description Goes to the page for editing an existing node of the requisition (navigation)\n    * @description\n    *\n    * @name RequisitionController:editNode\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @param {object} The node's object to edit\n    */\n    $scope.editNode = function(node) {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent($scope.foreignSource) + '/nodes/' + encodeURIComponent(node.foreignId) + $scope.getVerticalLayout();\n    };\n\n    /**\n    * @description Deletes a node from the requisition on the server and refresh the local nodes list\n    *\n    * @name RequisitionController:deleteNode\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @param {object} The node's object to delete\n    */\n    $scope.deleteNode = function(node) {\n      bootbox.confirm('Are you sure you want to remove the node ' + _.escape(node.nodeLabel) + '?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.deleteNode(node).then(\n            function() { // success\n              var index = -1;\n              for(var i = 0; i < $scope.filteredNodes.length; i++) {\n                if ($scope.filteredNodes[i].foreignId === node.foreignId) {\n                  index = i;\n                }\n              }\n              if (index > -1) {\n                $scope.filteredNodes.splice(index,1);\n              }\n              growl.success('The node ' + _.escape(node.nodeLabel) + ' has been deleted.');\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n   /**\n    * @description Updates the pagination variables for the nodes.\n    *\n    * @name RequisitionController:updateFilteredNodes\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.updateFilteredNodes = function() {\n      $scope.currentPage = 1;\n      $scope.totalItems = $scope.filteredNodes.length;\n    };\n\n    /**\n    * @description Refreshes the deployed statistics for the requisition from the server\n    *\n    * @name RequisitionController:refreshDeployedStats\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.refreshDeployedStats = function() {\n      RequisitionsService.startTiming();\n      RequisitionsService.updateDeployedStatsForRequisition($scope.requisition).then(\n        function() { // success\n          growl.success('The deployed statistics has been updated.');\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Refreshes the currently loaded requisition from the server\n    *\n    * @name RequisitionController:refreshRequisition\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.refreshRequisition = function() {\n      bootbox.confirm('Are you sure you want to reload the requisition?<br/>All current changes will be lost.', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          $scope.requisition = new Requisition({});\n          RequisitionsService.removeRequisitionFromCache();\n          $scope.initialize(function() {\n            $scope.refreshDeployedStats();\n          });\n        }\n      });\n    };\n\n   /**\n    * @description Saves the page size on a cookie\n    *\n    * @name RequisitionController:savePageSize\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.savePageSize = function() {\n      $cookies.put('requisitions_page_size', $scope.pageSize);\n    }\n\n    /**\n    * @description Initializes the local requisition from the server\n    *\n    * @name RequisitionController:initialize\n    * @ngdoc method\n    * @methodOf RequisitionController\n    * @param {function} customHandler An optional method to be called after the initialization is done.\n    */\n    $scope.initialize = function(customHandler) {\n      var value = $cookies.get('requisitions_page_size');\n      if (value) {\n        $scope.pageSize = value;\n      }\n      growl.success('Retrieving requisition ' + _.escape($scope.foreignSource) + '...');\n      RequisitionsService.getRequisition($scope.foreignSource).then(\n        function(requisition) { // success\n          $scope.requisition = requisition;\n          $scope.filteredNodes = requisition.nodes;\n          $scope.updateFilteredNodes();\n          if (customHandler) {\n            customHandler();\n          }\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Watch for filter changes in order to update the nodes list and updates the pagination control\n    *\n    * @name RequisitionController:reqFilter\n    * @ngdoc event\n    * @methodOf RequisitionController\n    */\n    $scope.$watch('reqFilter', function() {\n      $scope.filteredNodes = $filter('filter')($scope.requisition.nodes, $scope.reqFilter);\n      $scope.updateFilteredNodes();\n    });\n\n    // Initialization\n\n    if ($scope.foreignSource) {\n      $scope.initialize();\n    }\n\n  }]);\n\n}());\n", "const bootbox = require('bootbox');\n\nrequire('../services/Requisitions');\nrequire('../services/Synchronize');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  const quickAddNodeView = require('../../views/quick-add-node.html');\n  const cloneForeignsourceView = require('../../views/clone-foreignsource.html');\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc controller\n  * @name RequisitionsController\n  * @module onms-requisitions\n  *\n  * @description The controller for manage all the requisitions (list/add/remove/synchronize)\n  *\n  * @requires $scope Angular local scope\n  * @requires $filter Angular filter\n  * @requires $cookies Angular cookies\n  * @requires $window Document window\n  * @requires $uibModal Angular UI modal\n  * @required Configuration The configuration object\n  * @requires RequisitionsService The requisitions service\n  * @requires SynchronizeService The synchronize service\n  * @requires growl The growl plugin for instant notifications\n  */\n  .controller('RequisitionsController', ['$scope', '$filter', '$cookies', '$window', '$uibModal', 'Configuration', 'DateFormatterService', 'RequisitionsService', 'SynchronizeService', 'growl', function($scope, $filter, $cookies, $window, $uibModal, Configuration, DateFormatterService, RequisitionsService, SynchronizeService, growl) {\n\n    /**\n    * @description The timing status.\n    *\n    * @ngdoc property\n    * @name RequisitionsController#timingStatus\n    * @propertyOf RequisitionsController\n    * @returns {object} The timing status object\n    */\n    $scope.timingStatus = RequisitionsService.getTiming();\n\n    /**\n    * @description The load flag.\n    *\n    * @ngdoc property\n    * @name RequisitionsController#loaded\n    * @propertyOf RequisitionsController\n    * @returns {boolean} True, if the requisitions have been loaded.\n    */\n    $scope.loaded = false;\n\n    /**\n    * @description The requisitions data\n    *\n    * @ngdoc property\n    * @name RequisitionsController#requisitionsData\n    * @propertyOf RequisitionsController\n    * @returns {object} The requisitions data\n    */\n    $scope.requisitionsData = { requisitions: [] };\n\n    /**\n    * @description The filtered version of the requisitions list\n    *\n    * @ngdoc property\n    * @name RequisitionsController#filteredRequisitions\n    * @propertyOf RequisitionsController\n    * @returns {array} The filtered array\n    */\n    $scope.filteredRequisitions = [];\n\n    /**\n    * @description The amount of items per page for pagination (defaults to 10)\n    *\n    * @ngdoc property\n    * @name RequisitionsController#pageSize\n    * @propertyOf RequisitionsController\n    * @returns {integer} The page size\n    */\n    $scope.pageSize = 10;\n\n    /**\n    * @description The maximum size of pages for pagination (defaults to 5)\n    *\n    * @ngdoc property\n    * @name RequisitionControllers#maxSize\n    * @propertyOf RequisitionsController\n    * @returns {integer} The maximum size\n    */\n    $scope.maxSize = 5;\n\n    /**\n    * @description The total amount of items for pagination (defaults to 0)\n    *\n    * @ngdoc property\n    * @name RequisitionControllers#maxSize\n    * @propertyOf RequisitionsController\n    * @returns {integer} The total items\n    */\n    $scope.totalItems = 0;\n\n    /**\n    * @description Shows an error to the user\n    *\n    * @name RequisitionsController:errorHandler\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} message The error message\n    */\n    $scope.errorHandler = function(message) {\n      growl.error(message, {ttl: 10000});\n    };\n\n    /**\n    * @description Quick add a new node\n    *\n    * @name RequisitionsController:quickAddNode\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.quickAddNode = function() {\n      var availableForeignSources = [];\n      angular.forEach($scope.requisitionsData.requisitions, function(r) {\n        availableForeignSources.push(r.foreignSource);\n      });\n      var modalInstance = $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'QuickAddNodeModalController',\n        templateUrl: quickAddNodeView,\n        size: 'lg',\n        resolve: {\n          foreignSources: function() { return availableForeignSources; }\n        }\n      });\n      modalInstance.result.then(function(node) {\n        var r = $scope.requisitionsData.getRequisition(node.foreignSource);\n        r.setNode(node);\n      });\n    };\n\n    /**\n    * @description Clones the detectors and policies of a specific requisition\n    *\n    * @name RequisitionsController:clone\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.clone = function(foreignSource) {\n      var availableForeignSources = [];\n      angular.forEach($scope.requisitionsData.requisitions, function(r) {\n        if (r.foreignSource !== foreignSource) {\n          availableForeignSources.push(r.foreignSource);\n        }\n      });\n      var modalInstance = $uibModal.open({\n        backdrop: 'static',\n        keyboard: false,\n        controller: 'CloneForeignSourceController',\n        templateUrl: cloneForeignsourceView,\n        resolve: {\n          foreignSource: function() { return foreignSource; },\n          availableForeignSources: function() { return availableForeignSources; }\n        }\n      });\n      modalInstance.result.then(function(targetForeignSource) {\n        bootbox.confirm('This action will override the existing foreign source definition for the requisition named ' + _.escape(targetForeignSource) + ', using ' + _.escape(foreignSource) + ' as a template. Are you sure you want to continue ? This cannot be undone.', function(ok) {\n          if (!ok) {\n            return;\n          }\n          RequisitionsService.startTiming();\n          RequisitionsService.cloneForeignSourceDefinition(foreignSource, targetForeignSource).then(\n            function() { // success\n              growl.success('The foreign source definition for ' + _.escape(foreignSource) + ' has been cloned to ' + _.escape(targetForeignSource));\n            },\n            $scope.errorHandler\n          );\n        });\n      });\n    };\n\n    /**\n    * @description Adds a new requisition on the server.\n    *\n    * A dialog box will be displayed to request the name of the requisition to the user.\n    *\n    * @name RequisitionsController:add\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.add = function() {\n      bootbox.prompt('Please enter the name for the new requisition', function(foreignSource) {\n        if (foreignSource) {\n          // Validate Requisition\n          if (foreignSource.match(/[/\\\\?:&*'\"]/)) {\n            bootbox.alert('Cannot add the requisition ' + _.escape(foreignSource) + ' because the following characters are invalid:<br/>:, /, \\\\, ?, &, *, \\', \"');\n            return;\n          }\n          var r = $scope.requisitionsData.getRequisition(foreignSource);\n          if (r) {\n            bootbox.alert('Cannot add the requisition ' + _.escape(foreignSource) + ' because there is already a requisition with that name');\n            return;\n          }\n          // Create Requisition\n          RequisitionsService.addRequisition(foreignSource).then(\n            function(r) { // success\n              growl.success('The requisition ' + _.escape(r.foreignSource) + ' has been created.');\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Edits the foreign source definition of an existing requisition\n    *\n    * @name RequisitionsController:editForeignSource\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.editForeignSource = function(foreignSource) {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent(foreignSource) + '/foreignSource';\n    };\n\n    /**\n    * @description Goes to the edit page of an existing requisition (navigation)\n    *\n    * @name RequisitionsController:edit\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.edit = function(foreignSource) {\n      $window.location.href = Configuration.baseHref + '#/requisitions/' + encodeURIComponent(foreignSource);\n    };\n\n    /**\n    * @description Requests the synchronization/import of a requisition on the server\n    *\n    * A dialog box is displayed to request to the user if the scan phase should be triggered or not.\n    *\n    * @name RequisitionsController:synchronize\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {object} requisition The requisition object\n    */\n    $scope.synchronize = function(requisition) {\n      RequisitionsService.startTiming();\n      SynchronizeService.synchronize(requisition, $scope.errorHandler);\n    };\n\n    /**\n    * @description Refreshes the deployed statistics of a requisition on the server\n    *\n    * @name RequisitionsController:refresh\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {object} requisition The requisition object\n    */\n    $scope.refresh = function(requisition) {\n      RequisitionsService.startTiming();\n      RequisitionsService.updateDeployedStatsForRequisition(requisition).then(\n        function() { // success\n          growl.success('The deployed statistics for ' + _.escape(requisition.foreignSource) + ' has been updated.');\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Removes all the nodes form the requisition on the server\n    *\n    * @name RequisitionsController:removeAllNodes\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.removeAllNodes = function(foreignSource) {\n      bootbox.confirm('Are you sure you want to remove all the nodes from ' + _.escape(foreignSource) + '?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.removeAllNodesFromRequisition(foreignSource).then(\n            function() { // success\n              growl.success('All the nodes from ' + _.escape(foreignSource) + ' have been removed, and the requisition has been synchronized.');\n              var req = $scope.requisitionsData.getRequisition(foreignSource);\n              req.reset();\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Removes a requisition on the server\n    *\n    * @name RequisitionsController:delete\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    * @param {string} foreignSource The name of the requisition\n    */\n    $scope.delete = function(foreignSource) {\n      bootbox.confirm('Are you sure you want to remove the requisition ' + _.escape(foreignSource) + '?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.deleteRequisition(foreignSource).then(\n            function() { // success\n              growl.success('The requisition ' + _.escape(foreignSource) + ' has been deleted.');\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Edits the default foreign source definition (navigation)\n    *\n    * @name RequisitionsController:editDefaultForeignSource\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.editDefaultForeignSource = function() {\n      $window.location.href = Configuration.baseHref + '#/requisitions/default/foreignSource';\n    };\n\n    /**\n    * @description Resets the default set of detectors and policies\n    *\n    * @name RequisitionsController:resetDefaultForeignSource\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.resetDefaultForeignSource = function() {\n      bootbox.confirm('Are you sure you want to reset the default foreign source definition ?', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          RequisitionsService.deleteForeignSourceDefinition('default').then(\n            function() { // success\n              growl.success('The default foreign source definition has been reseted.');\n              $scope.initialize();\n            },\n            $scope.errorHandler\n          );\n        }\n      });\n    };\n\n    /**\n    * @description Refreshes the requisitions from the server\n    *\n    * There are two main actions:\n    * - Retrieve all the requisitions from the server ignoring the current state.\n    * - Retrieve only the deployed statistics, and update the current requisitions.\n    *\n    * @name RequisitionsController:refreshData\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.refreshData = function() {\n      bootbox.dialog({\n        message: 'Are you sure you want to refresh the content of the page ?<br/><hr/>' +\n                 'Choose <b>Reload Everything</b> to retrieve all the requisitions from the server (any existing unsaved change will be lost).<br/>' +\n                 'Choose <b>Reload Deployed Data</b> to retrieve the deployed statistics and update the UI.<br/>' +\n                 'Choose <b>Cancel</b> to abort the request.',\n        title: 'Refresh',\n        buttons: {\n          reloadAll: {\n            label: 'Reload Everything',\n            className: 'btn-primary',\n            callback: function() {\n              $scope.refreshRequisitions();\n            }\n          },\n          reloadDeployed: {\n            label: 'Reload Deployed Data',\n            className: 'btn-secondary',\n            callback: function() {\n              $scope.refreshDeployedStats();\n            }\n          },\n          main: {\n            label: 'Cancel',\n            className: 'btn-secondary'\n          }\n        }\n      });\n    };\n\n    /**\n    * @description Refreshes the deployed statistics for all the requisitions from the server\n    *\n    * @name RequisitionsController:refreshDeployedStats\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.refreshDeployedStats = function() {\n      RequisitionsService.startTiming();\n      growl.success('Refreshing deployed statistics...');\n      RequisitionsService.updateDeployedStats($scope.requisitionsData).then(\n        function() { // success\n          growl.success('The deployed statistics has been updated.');\n        },\n        $scope.errorHandler\n      );\n    };\n\n    /**\n    * @description Refreshes all the requisitions from the server\n    *\n    * @name RequisitionsController:refreshRequisitions\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.refreshRequisitions = function() {\n      bootbox.confirm('Are you sure you want to reload all the requisitions?<br/>All current changes will be lost.', function(ok) {\n        if (ok) {\n          RequisitionsService.startTiming();\n          growl.success('Refreshing requisitions...');\n          RequisitionsService.clearCache();\n          $scope.requisitionsData = { requisitions : [] };\n          $scope.initialize();\n        }\n      });\n    };\n\n   /**\n    * @description Updates the pagination variables for the requisitions.\n    *\n    * @name RequisitionsController:updateFilteredNodes\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.updateFilteredRequisitions = function() {\n      $scope.currentPage = 1;\n      $scope.totalItems = $scope.filteredRequisitions.length;\n    };\n\n   /**\n    * @description Saves the page size on a cookie\n    *\n    * @name RequisitionController:savePageSize\n    * @ngdoc method\n    * @methodOf RequisitionController\n    */\n    $scope.savePageSize = function() {\n      $cookies.put('requisitions_page_size', $scope.pageSize);\n    }\n\n    /**\n    * @description Initializes the local requisitions list from the server\n    *\n    * @name RequisitionsController:initialize\n    * @ngdoc method\n    * @methodOf RequisitionsController\n    */\n    $scope.initialize = function() {\n      var value = $cookies.get('requisitions_page_size');\n      if (value) {\n        $scope.pageSize = value;\n      }\n      $scope.loaded = false;\n      DateFormatterService.formatter.finally(function() {\n        RequisitionsService.getRequisitions().then(\n          function(data) { // success\n            $scope.requisitionsData = data;\n            $scope.filteredRequisitions = $scope.requisitionsData.requisitions;\n            $scope.updateFilteredRequisitions();\n            $scope.loaded = true;\n            growl.success('Loaded ' + $scope.requisitionsData.requisitions.length + ' requisitions...');\n          },\n          $scope.errorHandler\n        );\n      });\n    };\n\n    /**\n    * @description Watch for filter changes in order to update the requisitions list and updates the pagination control\n    *\n    * @name RequisitionsController:reqFilter\n    * @ngdoc event\n    * @methodOf RequisitionsController\n    */\n    $scope.$watch('reqFilter', function() {\n      $scope.filteredRequisitions = $filter('filter')($scope.requisitionsData.requisitions, $scope.reqFilter);\n      $scope.updateFilteredRequisitions();\n    });\n\n    // Initialization\n\n    if ($scope.filteredRequisitions.length === 0) {\n      $scope.initialize();\n    }\n\n  }]);\n\n}());\n", "const bootbox = require('bootbox');\n\nrequire('./Requisitions');\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n(function() {\n\n  'use strict';\n\n  angular.module('onms-requisitions')\n\n  /**\n  * @ngdoc service\n  * @name SynchronizeService\n  * @module onms-requisitions\n  *\n  * @requires RequisitionsService The requisitions service\n  * @requires growl The growl plugin for instant notifications\n  *\n  * @description The SynchronizeService provides a way to request a requisition synchronization asking the user how the scan process will be processed.\n  */\n  .factory('SynchronizeService', ['RequisitionsService', 'growl', function(RequisitionsService, growl) {\n    return {\n      /**\n      * @description Requests the synchronization/import of a requisition on the server\n      *\n      * A dialog box is displayed to request to the user if the scan phase should be triggered or not.\n      *\n      * @name SynchronizeService:synchronize\n      * @ngdoc method\n      * @methodOf SynchronizeService\n      * @param {object} requisition The requisition object\n      * @param {function} successHandler The function to call after a successful synchronization\n      * @param {function} errorHandler The function to call when something went wrong.\n      */\n      synchronize: function(requisition, errorHandler) {\n        /**\n        * @param {object} requisition The requisition object\n        * @param {string} rescanExisting true to perform a full scan, false to only add/remove nodes without scan, dbonly for all DB operations without scan\n        */\n        var doSynchronize = function(requisition, rescanExisting) {\n          RequisitionsService.startTiming();\n          RequisitionsService.synchronizeRequisition(requisition.foreignSource, rescanExisting).then(\n            function() { // success\n              growl.success('The import operation has been started for ' + _.escape(requisition.foreignSource) + ' (rescanExisting? ' + rescanExisting + ')<br/>Use <b>refresh</b> to update the deployed statistics');\n              requisition.setDeployed(true);\n            },\n            errorHandler\n          );\n        };\n        bootbox.prompt({\n            title: 'Synchronize Requisition  ' +  _.escape(requisition.foreignSource),\n            message: '<p><b>Choose a scan option: </b></p>',\n            inputType: 'radio',\n            inputOptions: [\n            {\n                text: 'Scan all nodes',\n                value: 'true',\n            },\n            {\n                text: 'Scan added nodes only',\n                value: 'false',\n            },\n            {\n                text: 'No scanning',\n                value: 'dbonly',\n            }\n            ],\n            buttons: {\n                    confirm: {\n                        label: 'Synchronize',\n                    },\n                    cancel: {\n                        label: 'Cancel',\n                    }\n                },\n            swapButtonOrder: 'true',\n            callback: function (result) {\n                if (result !== null) {\n                    doSynchronize(requisition, result);\n                }\n            }\n        });\n      }\n    };\n  }]);\n\n}());\n", "/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n'use strict';\n\nconst angular = require('angular-js');\nconst _ = require('underscore-js');\nrequire('angular-mocks');\nrequire('../../../../../src/main/assets/js/apps/onms-requisitions/requisitions');\n\nvar controllerFactory, scope, $q, mockModal = {}, mockGrowl = {}, mockRequisitionsService = {}, foreignSource = 'test-requisition';\n\nfunction createController() {\n  return controllerFactory('ForeignSourceController', {\n    $scope: scope,\n    $routeParams: { 'foreignSource': foreignSource },\n    $modal: mockModal,\n    RequisitionsService: mockRequisitionsService,\n    growl: mockGrowl\n  });\n}\n\nbeforeEach(angular.mock.module('onms-requisitions', function($provide) {\n  $provide.value('$log', console);\n}));\n\nbeforeEach(angular.mock.inject(function($rootScope, $controller, _$q_) {\n  scope = $rootScope.$new();\n  $q = _$q_;\n  controllerFactory = $controller;\n}));\n\nbeforeEach(function() {\n  mockModal = {};\n\n  mockRequisitionsService.getForeignSourceDefinition = jasmine.createSpy('getForeignSourceDefinition');\n  mockRequisitionsService.getTiming = jasmine.createSpy('getTiming');\n  var requisitionDefer = $q.defer();\n  requisitionDefer.resolve({ detectors: [{'name':'ICMP'},{'name':'SNMP'}], policies: [{'name':'Foo'},{'name':'Bar'}] });\n  mockRequisitionsService.getForeignSourceDefinition.and.returnValue(requisitionDefer.promise);\n  mockRequisitionsService.getTiming.and.returnValue({ isRunning: false });\n\n  mockGrowl = {\n    warning: function(msg) { console.warn(msg); },\n    error: function(msg) { console.error(msg); },\n    info: function(msg) { console.info(msg); },\n    success: function(msg) { console.info(msg); }\n  };\n});\n\ntest('Controller: ForeignSourceController: test controller', function() {\n  createController();\n  scope.$digest();\n  expect(mockRequisitionsService.getForeignSourceDefinition).toHaveBeenCalledWith(foreignSource);\n  expect(scope.foreignSource).toBe(foreignSource);\n  expect(scope.indexOfDetector({name:'ICMP'})).toBe(0);\n  expect(scope.indexOfPolicy({name:'Foo'})).toBe(0);\n  expect(scope.indexOfDetector({name:'HTTP'})).toBe(-1);\n  expect(scope.indexOfPolicy({name:'Test'})).toBe(-1);\n});\n", "/*global RequisitionNode:true */\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n'use strict';\n\nconst angular = require('angular-js');\nconst _ = require('underscore-js');\nrequire('angular-mocks');\nrequire('../../../../../src/main/assets/js/apps/onms-requisitions/requisitions');\n\nconst RequisitionNode = require('../../../../../src/main/assets/js/apps/onms-requisitions/lib/scripts/model/RequisitionNode');\n\n// Initialize testing environment\n\nvar controllerFactory, scope, $q, mockModal = {}, mockGrowl = {}, mockRequisitionsService = {};\n\nvar foreignSource = 'test-requisition';\nvar foreignId = '1001';\nvar categories = ['Production', 'Testing', 'Server', 'Storage'];\nvar locations = ['Default'];\nvar node = new RequisitionNode(foreignSource, { 'foreign-id': foreignId });\nvar requisition = { foreignSource: foreignSource, nodes: [{foreignId: '01'},{foreignId: '02'}] };\n\nfunction createController() {\n  return controllerFactory('NodeController', {\n    $scope: scope,\n    $routeParams: { 'foreignSource': foreignSource, 'foreignId': foreignId },\n    $modal: mockModal,\n    RequisitionsService: mockRequisitionsService,\n    growl: mockGrowl\n  });\n}\n\nbeforeEach(angular.mock.module('onms-requisitions', function($provide) {\n  $provide.value('$log', console);\n}));\n\nbeforeEach(angular.mock.inject(function($rootScope, $controller, _$q_) {\n  scope = $rootScope.$new();\n  controllerFactory = $controller;\n  $q = _$q_;\n}));\n\nbeforeEach(function() {\n  mockRequisitionsService.getTiming = jasmine.createSpy('getTiming');\n  mockRequisitionsService.getNode = jasmine.createSpy('getNode');\n  mockRequisitionsService.getRequisition = jasmine.createSpy('getRequisition');\n  mockRequisitionsService.getAvailableCategories = jasmine.createSpy('getAvailableCategories');\n  mockRequisitionsService.getAvailableLocations = jasmine.createSpy('getAvailableLocations');\n  var nodeDefer = $q.defer();\n  nodeDefer.resolve(node);\n  mockRequisitionsService.getNode.and.returnValue(nodeDefer.promise);\n  var categoriesDefer = $q.defer();\n  categoriesDefer.resolve(categories);\n  mockRequisitionsService.getAvailableCategories.and.returnValue(categoriesDefer.promise);\n  var locationsDefer = $q.defer();\n  locationsDefer.resolve(locations);\n  mockRequisitionsService.getAvailableLocations.and.returnValue(locationsDefer.promise);\n  var reqDefer = $q.defer();\n  reqDefer.resolve(requisition);\n  mockRequisitionsService.getRequisition.and.returnValue(reqDefer.promise);\n  mockRequisitionsService.getTiming.and.returnValue({ isRunning: false });\n\n  mockGrowl = {\n    warning: function(msg) { console.warn(msg); },\n    error: function(msg) { console.error(msg); },\n    info: function(msg) { console.info(msg); },\n    success: function(msg) { console.info(msg); }\n  };\n});\n\ntest('Controller: NodeController: test controller', function() {\n  createController();\n  scope.$digest();\n  expect(mockRequisitionsService.getAvailableCategories).toHaveBeenCalled();\n  expect(mockRequisitionsService.getNode).toHaveBeenCalledWith(foreignSource, foreignId);\n  expect(scope.foreignSource).toBe(foreignSource);\n  expect(scope.foreignId).toBe(foreignId);\n  expect(scope.availableCategories.length).toBe(4);\n  expect(scope.foreignIdBlackList).toEqual(['01', '02']);\n\n  expect(scope.getAvailableCategories()).toEqual(categories);\n  scope.node.categories.push({name: 'Production'});\n  expect(scope.getAvailableCategories()).toEqual(['Testing', 'Server', 'Storage']);\n  expect(scope.availableLocations).toEqual(locations);\n});\n", "/*global Requisition:true */\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n'use strict';\n\nconst angular = require('angular-js');\nconst _ = require('underscore-js');\nrequire('angular-mocks');\nrequire('../../../../../src/main/assets/js/apps/onms-requisitions/requisitions');\n\nconst Requisition = require('../../../../../src/main/assets/js/apps/onms-requisitions/lib/scripts/model/Requisition');\n\n// Initialize testing environment\n\nvar controllerFactory, scope, $q, mockGrowl = {}, mockRequisitionsService = {}, foreignSource = 'test-requisition', requisition = new Requisition(foreignSource);\n\nfunction createController() {\n  return controllerFactory('RequisitionController', {\n    $scope: scope,\n    $routeParams: { 'foreignSource': foreignSource },\n    RequisitionsService: mockRequisitionsService,\n    growl: mockGrowl\n  });\n}\n\nbeforeEach(angular.mock.module('onms-requisitions', function($provide) {\n  console.debug = console.log;\n  $provide.value('$log', console);\n}));\n\nbeforeEach(angular.mock.inject(function($rootScope, $controller, _$q_) {\n  scope = $rootScope.$new();\n  controllerFactory = $controller;\n  $q = _$q_;\n}));\n\nbeforeEach(function() {\n  mockRequisitionsService.getTiming = jasmine.createSpy('getTiming');\n  mockRequisitionsService.getRequisition = jasmine.createSpy('getRequisition');\n  var requisitionDefer = $q.defer();\n  requisitionDefer.resolve(requisition);\n  mockRequisitionsService.getRequisition.and.returnValue(requisitionDefer.promise);\n  mockRequisitionsService.getTiming.and.returnValue({ isRunning: false });\n\n  mockGrowl = {\n    warning: function(msg) { console.warn(msg); },\n    error: function(msg) { console.error(msg); },\n    info: function(msg) { console.info(msg); },\n    success: function(msg) { console.info(msg); }\n  };\n});\n\ntest('Controller: RequisitionController: test controller', function() {\n  createController();\n  scope.$digest();\n  expect(mockRequisitionsService.getRequisition).toHaveBeenCalledWith(foreignSource);\n  expect(scope.foreignSource).toBe(foreignSource);\n});\n", "/*global RequisitionsData:true */\n\n/**\n* @author Alejandro Galue <agalue@opennms.org>\n* @copyright 2014 The OpenNMS Group, Inc.\n*/\n\n'use strict';\n\nconst angular = require('angular-js');\nconst _ = require('underscore-js');\nrequire('angular-mocks');\nrequire('../../../../../src/main/assets/js/apps/onms-requisitions/requisitions');\n\nconst OnmsDateFormatter = require('../../../../../src/main/assets/js/apps/onms-date-formatter');\nconst RequisitionsData = require('../../../../../src/main/assets/js/apps/onms-requisitions/lib/scripts/model/RequisitionsData');\n\n// Initialize testing environment\n\nvar controllerFactory, scope, $q, dateFormatterService, mockGrowl = {}, mockRequisitionsService = {}, requisitionsData = new RequisitionsData();\n\nfunction createController() {\n  return controllerFactory('RequisitionsController', {\n    $scope: scope,\n    DateFormatterService: dateFormatterService,\n    RequisitionsService: mockRequisitionsService,\n    growl: mockGrowl\n  });\n}\n\nbeforeEach(function() {\n  window._onmsDateTimeFormat = \"yyyy-MM-dd'T'HH:mm:ssxxx\";\n  window._onmsZoneId = 'America/New_York';\n  window._onmsFormatter = new OnmsDateFormatter();\n});\n\nbeforeEach(angular.mock.module('onms-requisitions', function($provide) {\n  console.debug = console.log;\n  $provide.value('$log', console);\n}));\n\nbeforeEach(angular.mock.inject(function($rootScope, $controller, $interval, _$q_, DateFormatterService) {\n  scope = $rootScope.$new();\n  controllerFactory = $controller;\n  $q = _$q_;\n  dateFormatterService = DateFormatterService;\n  $interval.flush(200);\n}));\n\nbeforeEach(function() {\n  mockRequisitionsService.getTiming = jasmine.createSpy('getTiming');\n  mockRequisitionsService.getRequisitions = jasmine.createSpy('getRequisitions');\n  var requisitionsDefer = $q.defer();\n  requisitionsDefer.resolve(requisitionsData);\n  mockRequisitionsService.getRequisitions.and.returnValue(requisitionsDefer.promise);\n  mockRequisitionsService.getTiming.and.returnValue({ isRunning: false });\n\n  mockGrowl = {\n    warning: function(msg) { console.warn(msg); },\n    error: function(msg) { console.error(msg); },\n    info: function(msg) { console.info(msg); },\n    success: function(msg) { console.info(msg); }\n  };\n});\n\ntest('Controller: RequisitionsController: test controller', function() {\n  createController();\n  scope.$digest();\n  expect(mockRequisitionsService.getRequisitions).toHaveBeenCalled();\n  expect(scope.requisitionsData.requisitions.length).toBe(0);\n});\n", "<%@ attribute name=\"nodes\" type=\"java.util.List\" rtexprvalue=\"true\" required=\"true\" %>\n<%@ attribute name=\"snmpParm\" type=\"java.lang.String\" rtexprvalue=\"true\" required=\"true\" %>\n<%@ attribute name=\"isMaclikeSearch\"  type=\"java.lang.Boolean\" rtexprvalue=\"true\" required=\"true\" %>\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n\n<ul class=\"list-unstyled mb-0\">\n  <c:forEach var=\"nodeModel\" items=\"${nodes}\">\n    <c:url var=\"nodeLink\" value=\"element/node.jsp\">\n      <c:param name=\"node\" value=\"${nodeModel.node.id}\"/>\n    </c:url>\n    <li>\n      <c:choose>\n        <c:when test=\"${!empty nodeModel.node.foreignSource}\">\n          <div class=\"NLnode\"><a href=\"${nodeLink}\">${nodeModel.node.label}</a>&nbsp;&nbsp;<span class=\"NLdbid label label-default\" title=\"Database ID: ${nodeModel.node.id}\"><i class=\"fa fa-database\"></i>&nbsp;${nodeModel.node.id}</span>&nbsp;<span class=\"NLfs label label-default\" title=\"Requisition: ${fn:escapeXml(nodeModel.node.foreignSource)}\"><i class=\"fa fa-list-alt\"></i>&nbsp;${fn:escapeXml(nodeModel.node.foreignSource)}</span>&nbsp;<span class=\"NLfid label label-default\" title=\"Foreign ID: ${nodeModel.node.foreignId}\"><i class=\"fa fa-qrcode\"></i>&nbsp;${nodeModel.node.foreignId}</span>&nbsp;<span class=\"NLloc label label-default\" title=\"Location: ${nodeModel.node.location.locationName}\"><i class=\"fa fa-map-marker\"></i>&nbsp;${nodeModel.node.location.locationName}</span><c:if test=\"${nodeModel.node.hasIngressFlows && nodeModel.node.hasEgressFlows}\"><span class=\"NLflows label label-default\" title=\"Flows: ingress/egress flow data available\"><i class=\"fa fa-exchange\"></i>&nbsp;ingress/egress flow data</span></c:if><c:if test=\"${nodeModel.node.hasIngressFlows && !nodeModel.node.hasEgressFlows}\"><span class=\"NLflows label label-default\" title=\"Flows: ingress flow data available\"><i class=\"fa fa-long-arrow-left\"></i>&nbsp;ingress flow data</span></c:if><c:if test=\"${!nodeModel.node.hasIngressFlows && nodeModel.node.hasEgressFlows}\"><span class=\"NLflows label label-default\" title=\"Flows: egress flow data available\"><i class=\"fa fa-long-arrow-right\"></i>&nbsp;egress flow data</span></c:if></div>\n        </c:when>\n        <c:otherwise>\n          <div class=\"NLnode\"><a href=\"${nodeLink}\">${nodeModel.node.label}</a>&nbsp;&nbsp;<span class=\"NLdbid label label-default\" title=\"Database ID: ${nodeModel.node.id}\"><i class=\"fa fa-database\"></i>&nbsp;${nodeModel.node.id}</span>&nbsp;<span class=\"NLloc label label-default\" title=\"Location: ${nodeModel.node.location.locationName}\"><i class=\"fa fa-map-marker\"></i>&nbsp;${nodeModel.node.location.locationName}</span> <c:if test=\"${nodeModel.node.hasFlows}\"><span class=\"NLflows label label-default\" title=\"Flows: flow data available\"><i class=\"fa fa-exchange\"></i>&nbsp;flow data</span></c:if></div>\n        </c:otherwise>\n      </c:choose>\n      <ul>\n        <c:if test=\"${!empty nodeModel.interfaces}\">\n          <c:forEach var=\"nodeInterface\" items=\"${nodeModel.interfaces}\">\n            <c:url var=\"interfaceLink\" value=\"element/interface.jsp\">\n              <c:param name=\"ipinterfaceid\" value=\"${nodeInterface.id}\"/>\n            </c:url>\n            \n            <li>\n              <c:choose>\n                <c:when test=\"${isMaclikeSearch && nodeInterface.snmpInterface.physAddr != null}\">\n                  <c:choose>\n                    <c:when test=\"${nodeInterface.ipAddress != '0.0.0.0'}\">\n                      <c:set var=\"label\" value=\"${nodeInterface.ipAddressAsString}\" scope=\"page\" />\n                    </c:when>\n                    <c:when test=\"${nodeInterface.snmpInterface.ifName != null}\">\n                      <c:set var=\"label\" value=\"${nodeInterface.snmpInterface.ifName}\" scope=\"page\" />\n                    </c:when>\n                    <c:when test=\"${nodeInterface.snmpInterface.ifDescr != null}\">\n                      <c:set var=\"label\" value=\"${nodeInterface.snmpInterface.ifDescr}\" scope=\"page\" />\n                    </c:when>\n                    <c:otherwise>\n                      <c:set var=\"label\" value=\"ifIndex:${nodeInterface.snmpInterface.ifIndex}\" scope=\"page\" />\n                    </c:otherwise>\n                  </c:choose>\n                  <a href=\"${interfaceLink}\">${label}</a> : ${nodeInterface.snmpInterface.physAddr}\n                </c:when>\n                <c:when test=\"${snmpParm == ('ifAlias')}\">\n                  <c:choose>\n                    <c:when test=\"${nodeInterface.ipAddressAsString == '0.0.0.0'}\">\n                      <c:choose>\n                        <c:when test=\"${nodeInterface.snmpInterface.ifName != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifName}</a> : ${nodeInterface.snmpInterface.ifAlias}\n                        </c:when>   \n                        <c:when test=\"${nodeInterface.snmpInterface.ifDescr != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifDescr}</a> : ${nodeInterface.snmpInterface.ifAlias}\n                        </c:when>\n                        <c:otherwise>\n                          <a href=\"${interfaceLink}\">ifIndex ${nodeInterface.snmpInterface.ifIndex}</a> : ${nodeInterface.snmpInterface.ifAlias}\n                        </c:otherwise>\n                      </c:choose>\n                    </c:when>\n                    <c:otherwise>\n                      <a href=\"${interfaceLink}\">${nodeInterface.ipAddressAsString}</a> : ${nodeInterface.snmpInterface.ifAlias}\n                    </c:otherwise>\n                  </c:choose>\n                </c:when>        \n                <c:when test=\"${snmpParm == ('ifName')}\">\n                  <c:choose>\n                    <c:when test=\"${nodeInterface.ipAddressAsString == '0.0.0.0'}\">\n                      <c:choose>\n                        <c:when test=\"${nodeInterface.snmpInterface.ifName != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifName}</a>\n                        </c:when>\n                      </c:choose>\n                    </c:when>\n                    <c:otherwise>\n                      <a href=\"${interfaceLink}\">${nodeInterface.ipAddressAsString}</a> : ${nodeInterface.snmpInterface.ifName}\n                    </c:otherwise>\n                  </c:choose>\n                </c:when>   \n                 <c:when test=\"${snmpParm == ('ifDescr')}\">\n                  <c:choose>\n                    <c:when test=\"${nodeInterface.ipAddressAsString == '0.0.0.0'}\">\n                      <c:choose>\n                        <c:when test=\"${nodeInterface.snmpInterface.ifName != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifName}</a> : ${nodeInterface.snmpInterface.ifDescr}\n                        </c:when>                  \n                        <c:when test=\"${nodeInterface.snmpInterface.ifDescr != null}\">\n                          <a href=\"${interfaceLink}\">${nodeInterface.snmpInterface.ifDescr}</a>\n                        </c:when>\n                      </c:choose>\n                    </c:when>\n                    <c:otherwise>\n                      <a href=\"${interfaceLink}\">${nodeInterface.ipAddressAsString}</a> : ${nodeInterface.snmpInterface.ifDescr}\n                    </c:otherwise>\n                  </c:choose>\n                </c:when>\n                <c:otherwise>\n                  <a href=\"${interfaceLink}\">${nodeInterface.ipAddressAsString}</a>\n                </c:otherwise>\n              </c:choose>\n            </li>\n          </c:forEach>\n        </c:if>\n        <c:if test=\"${!empty nodeModel.snmpInterfaces}\">\n          <c:forEach var=\"snmpInterface\" items=\"${nodeModel.snmpInterfaces}\">\n            <c:url var=\"interfaceLink\" value=\"element/interface.jsp\">\n              <c:param name=\"node\" value=\"${snmpInterface.node.id}\"/>\n              <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                  <c:param name=\"intf\" value=\"${ipInterface.ipAddressAsString}\"/>\n                </c:if>\n              </c:forEach>\n            </c:url>\n            <c:url var=\"snmpinterfaceLink\" value=\"element/snmpinterface.jsp\">\n              <c:param name=\"node\" value=\"${snmpInterface.node.id}\"/>\n              <c:param name=\"ifindex\" value=\"${snmpInterface.ifIndex}\"/>\n            </c:url>\n            <li>\n              <c:if test=\"${isMaclikeSearch && snmpInterface.physAddr!=null && snmpInterface.physAddr!=''}\">\n                <c:set var=\"notFound\" value=\"true\"/>\n                <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                  <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                    <a href=\"element/interface.jsp?ipinterfaceid=${ipInterface.id}\">${ipInterface.ipAddressAsString}</a> : ${snmpInterface.physAddr} (from snmp)\n                    <c:remove var=\"notFound\"/>\n                  </c:if>\n                </c:forEach>\n                <c:if test=\"${notFound}\">\n                  <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifName}</a> : ${snmpInterface.physAddr} (from snmp)\n                </c:if>\n              </c:if>\n              <c:choose>\n                <c:when test=\"${snmpParm == ('ifAlias')}\">\n                  <c:set var=\"notFound\" value=\"true\"/>\n                  <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                    <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                      <a href=\"${interfaceLink}\">${ipInterface.ipAddressAsString}</a> : ${snmpInterface.ifAlias}\n                      <c:remove var=\"notFound\"/>\n                    </c:if>\n                  </c:forEach>\n                  <c:if test=\"${notFound}\">\n                      <c:choose>\n                        <c:when test=\"${snmpInterface.ifName != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifName}</a> : ${snmpInterface.ifAlias}\n                        </c:when>   \n                        <c:when test=\"${snmpInterface.ifDescr != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifDescr}</a> : ${snmpInterface.ifAlias}\n                        </c:when>\n                        <c:otherwise>\n                          <a href=\"${snmpinterfaceLink}\">ifIndex ${snmpInterface.ifIndex}</a> : ${snmpInterface.ifAlias}\n                        </c:otherwise>\n                      </c:choose>\n                  </c:if>\n                </c:when>        \n                <c:when test=\"${snmpParm == ('ifName')}\">\n                  <c:set var=\"notFound\" value=\"true\"/>\n                  <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                    <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                      <a href=\"${interfaceLink}\">${ipInterface.ipAddressAsString}</a> : ${snmpInterface.ifName}\n                      <c:remove var=\"notFound\"/>\n                    </c:if>\n                  </c:forEach>\n                  <c:if test=\"${notFound}\">\n                      <c:choose>\n                        <c:when test=\"${snmpInterface.ifName != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifName}</a>\n                        </c:when>\n                      </c:choose>\n                  </c:if>\n                </c:when>   \n                <c:when test=\"${snmpParm == ('ifDescr')}\">\n                  <c:set var=\"notFound\" value=\"true\"/>\n                  <c:forEach var=\"ipInterface\" items=\"${nodeModel.node.ipInterfaces}\">\n                    <c:if test=\"${ipInterface.snmpInterface.id == snmpInterface.id}\">\n                      <a href=\"${interfaceLink}\">${ipInterface.ipAddressAsString}</a> : ${snmpInterface.ifDescr}\n                      <c:remove var=\"notFound\"/>\n                    </c:if>\n                  </c:forEach>\n                  <c:if test=\"${notFound}\">\n                      <c:choose>\n                        <c:when test=\"${snmpInterface.ifName != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifName}</a> : ${snmpInterface.ifDescr}\n                        </c:when>                  \n                        <c:when test=\"${snmpInterface.ifDescr != null}\">\n                          <a href=\"${snmpinterfaceLink}\">${snmpInterface.ifDescr}</a>\n                        </c:when>\n                      </c:choose>\n                  </c:if>\n                </c:when>\n              </c:choose>\n            </li>\n          </c:forEach>\n        </c:if>\n      </ul>\n    </li>\n  </c:forEach>\n</ul>\n", "<%--\n/*******************************************************************************\n * This file is part of OpenNMS(R).\n *\n * Copyright (C) 2002-2015 The OpenNMS Group, Inc.\n * OpenNMS(R) is Copyright (C) 1999-2015 The OpenNMS Group, Inc.\n *\n * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n *\n * OpenNMS(R) is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * OpenNMS(R) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with OpenNMS(R).  If not, see:\n *      http://www.gnu.org/licenses/\n *\n * For more information contact:\n *     OpenNMS(R) Licensing <license@opennms.org>\n *     http://www.opennms.org/\n *     http://www.opennms.com/\n *******************************************************************************/\n\n--%>\n\n<%@page import=\"org.opennms.web.enlinkd.LldpElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.CdpElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.OspfElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.IsisElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.BridgeElementNode\"%>\n<%@page import=\"org.opennms.web.enlinkd.EnLinkdElementFactory\"%>\n<%@page language=\"java\"\n\tcontentType=\"text/html\"\n\tsession=\"true\"\n\timport=\"\n        java.util.*,\n        java.net.*,\n        java.sql.SQLException,\n        org.opennms.core.spring.BeanUtils,\n        org.opennms.core.soa.ServiceRegistry,\n        org.opennms.core.utils.InetAddressUtils,\n        org.opennms.core.utils.WebSecurityUtils,\n        org.opennms.netmgt.config.dao.outages.api.ReadablePollOutagesDao,\n        org.opennms.netmgt.config.poller.outages.Outage,\n        org.opennms.netmgt.model.OnmsNode,\n        org.opennms.netmgt.dao.hibernate.PathOutageManagerDaoImpl,\n        org.opennms.web.api.Authentication,\n        org.opennms.web.asset.Asset,\n        org.opennms.web.asset.AssetModel,\n        org.opennms.web.element.*,\n        org.opennms.web.navigate.*,\n        org.springframework.util.StringUtils,\n        org.springframework.web.context.WebApplicationContext,\n        org.springframework.web.context.support.WebApplicationContextUtils\"\n%>\n<%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n\n\n<%!private int m_telnetServiceId;\n    private int m_sshServiceId;\n    private int m_httpServiceId;\n    private int m_httpsServiceId;\n    private int m_dellServiceId;\n    private int m_rdpServiceId;\n    private int m_snmpServiceId;\n\tprivate AssetModel m_model = new AssetModel();\n\n\tpublic void init() throws ServletException {\n        try {\n            m_telnetServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"Telnet\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the Telnet service ID\", e);\n        }        \n\n        try {\n            m_sshServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"SSH\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the SSH service ID\", e);\n        } \n\n        try {\n            m_httpServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"HTTP\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the HTTP service ID\", e);\n        }\n\n        try {\n            m_httpsServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"HTTPS\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the HTTPS service ID\", e);\n        }\n\n        try {\n            m_dellServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"Dell-OpenManage\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the Dell-OpenManage service ID\", e);\n        }\n\n        try {\n            m_rdpServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"MS-RDP\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the Mirosoft Remote Desktop service ID\", e);\n        }\n\n\n        try {\n            m_snmpServiceId = NetworkElementFactory.getInstance(getServletContext()).getServiceIdFromName(\"SNMP\");\n        } catch (Throwable e) {\n            throw new ServletException(\"Could not determine the SNMP service ID\", e);\n        }\n    }\n\n\tpublic static String getStatusStringWithDefault(OnmsNode node_db) {\n        String status = ElementUtil.getNodeStatusString(node_db);\n        if (status != null) {\n            return status;\n        } else {\n            return \"Unknown\";\n        }\n    }\n    \n    public static String findServiceAddress(int nodeId, int serviceId, ServletContext servletContext) throws SQLException, UnknownHostException {\n        Service[] services = NetworkElementFactory.getInstance(servletContext).getServicesOnNode(nodeId, serviceId);\n        if (services == null || services.length == 0) {\n            return null;\n        }\n        \n        List<InetAddress> ips = new ArrayList<>();\n        for (Service service : services) {\n            ips.add(InetAddressUtils.addr(service.getIpAddress()));\n        }\n\n        InetAddress lowest = InetAddressUtils.getLowestInetAddress(ips);\n\n        if (lowest != null) {\n            return lowest.getHostAddress();\n        } else {\n            return null;\n        }\n    }\n    \n    public static Collection<Map<String, String>> createLinkForService(int nodeId, int serviceId, String linkText, String linkPrefix, String linkSuffix, ServletContext servletContext) throws SQLException, UnknownHostException {\n        String ip = findServiceAddress(nodeId, serviceId, servletContext);\n        if (ip == null) {\n            return new ArrayList<Map<String,String>>();\n        }\n        \n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"text\", linkText);\n        map.put(\"url\", linkPrefix + ip + linkSuffix);\n        return Collections.singleton(map);\n    }%>\n\n<%\n\tOnmsNode node_db = ElementUtil.getNodeByParams(request, getServletContext());\n    int nodeId = node_db.getId();\n    \n    Map<String, Object> nodeModel = new TreeMap<String, Object>();\n    nodeModel.put(\"id\", Integer.toString(nodeId));\n    nodeModel.put(\"label\", WebSecurityUtils.sanitizeString(node_db.getLabel()));\n    nodeModel.put(\"foreignId\", node_db.getForeignId());\n    nodeModel.put(\"foreignSource\", node_db.getForeignSource());\n    nodeModel.put(\"location\", node_db.getLocation().getLocationName());\n\n    List<Map<String, String>> links = new ArrayList<Map<String, String>>();\n    links.addAll(createLinkForService(nodeId, m_telnetServiceId, \"Telnet\", \"telnet://\", \"\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_sshServiceId, \"SSH\", \"ssh://\", \"\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_httpServiceId, \"HTTP\", \"http://\", \"/\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_httpsServiceId, \"HTTPS\", \"https://\", \"/\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_dellServiceId, \"OpenManage\", \"https://\", \":1311\", getServletContext()));\n    links.addAll(createLinkForService(nodeId, m_rdpServiceId, \"Microsoft RDP\", \"rdp://\", \":3389\", getServletContext()));\n    nodeModel.put(\"links\", links);\n\n    Asset asset = m_model.getAsset(nodeId);\n    nodeModel.put(\"asset\", asset);\n    if (asset != null && asset.getBuilding() != null && asset.getBuilding().length() > 0) {\n        nodeModel.put(\"statusSite\", WebSecurityUtils.sanitizeString(asset.getBuilding(),true));\n    }\n    \n    nodeModel.put(\"lldp\",    EnLinkdElementFactory.getInstance(getServletContext()).getLldpElement(nodeId));\n    nodeModel.put(\"cdp\",    EnLinkdElementFactory.getInstance(getServletContext()).getCdpElement(nodeId));\n    nodeModel.put(\"ospf\",    EnLinkdElementFactory.getInstance(getServletContext()).getOspfElement(nodeId));\n    nodeModel.put(\"isis\",    EnLinkdElementFactory.getInstance(getServletContext()).getIsisElement(nodeId));\n    nodeModel.put(\"bridges\", EnLinkdElementFactory.getInstance(getServletContext()).getBridgeElements(nodeId));\n\n    nodeModel.put(\"criticalPath\", PathOutageManagerDaoImpl.getInstance().getPrettyCriticalPath(nodeId));\n    nodeModel.put(\"noCriticalPath\", PathOutageManagerDaoImpl.NO_CRITICAL_PATH);\n    nodeModel.put(\"admin\", request.isUserInRole(Authentication.ROLE_ADMIN));\n    nodeModel.put(\"provision\", request.isUserInRole(Authentication.ROLE_PROVISION));\n    nodeModel.put(\"existsInRequisition\", NetworkElementFactory.getInstance(getServletContext()).nodeExistsInRequisition(node_db.getForeignSource(), node_db.getForeignId()));\n\n    // get the child interfaces\n    Interface[] intfs = NetworkElementFactory.getInstance(getServletContext()).getActiveInterfacesOnNode(nodeId);\n    if (intfs != null) { \n        nodeModel.put(\"intfs\", intfs);\n    } else {\n        nodeModel.put(\"intfs\", new Interface[0]);\n    }\n\n    Service[] snmpServices = NetworkElementFactory.getInstance(getServletContext()).getServicesOnNode(nodeId, m_snmpServiceId);\n    if (snmpServices != null && snmpServices.length > 0) {\n        for (Interface intf : intfs) {\n            if (\"P\".equals(intf.getIsSnmpPrimary())) {\n                nodeModel.put(\"snmpPrimaryIntf\", intf);\n                break;\n            }\n        }\n    }\n    \n    nodeModel.put(\"status\", getStatusStringWithDefault(node_db));\n    nodeModel.put(\"showRancid\",\"true\".equalsIgnoreCase(Vault.getProperty(\"opennms.rancidIntegrationEnabled\")));\n    \n    nodeModel.put(\"node\", node_db);\n    nodeModel.put(\"sysName\", WebSecurityUtils.sanitizeString(node_db.getSysName()));\n    nodeModel.put(\"sysLocation\", WebSecurityUtils.sanitizeString(node_db.getSysLocation()));\n    nodeModel.put(\"sysContact\", WebSecurityUtils.sanitizeString(node_db.getSysContact(), true));\n    nodeModel.put(\"sysDescription\", WebSecurityUtils.sanitizeString(node_db.getSysDescription()));\n    \n    pageContext.setAttribute(\"model\", nodeModel);\n\n\tfinal WebApplicationContext webAppContext = WebApplicationContextUtils.getRequiredWebApplicationContext(getServletContext());\n\tfinal ServiceRegistry registry = webAppContext.getBean(ServiceRegistry.class);\n\n\tfinal List<String> renderedLinks = new ArrayList<>();\n\tfinal Collection<ConditionalPageNavEntry> navLinks = registry.findProviders(ConditionalPageNavEntry.class, \"(Page=node)\");\n\tfor (final ConditionalPageNavEntry link : navLinks) {\n\t    final DisplayStatus displayStatus = link.evaluate(request, node_db);\n\t    if (displayStatus == null) continue;\n\t    if (displayStatus == DisplayStatus.DISPLAY_NO_LINK) {\n\t        renderedLinks.add(link.getName());\n\t    } else if (displayStatus == DisplayStatus.DISPLAY_LINK) {\n\t        renderedLinks.add(\"<a href=\\\"\" + link.getUrl().replace(\"%25nodeid%25\", \"\"+nodeId) + \"\\\">\" + link.getName() + \"</a>\");\n\t    }\n\t}\n\t\n\tpageContext.setAttribute(\"navEntries\", renderedLinks);\n\n    final List<String> schedOutages = new ArrayList<>();\n\n    ReadablePollOutagesDao pollOutagesDao = BeanUtils.getBean(\"pollerConfigContext\", \"pollOutagesDao\",\n            ReadablePollOutagesDao.class);\n    \n    for (final Outage outage : pollOutagesDao.getReadOnlyConfig().getOutages()) {\n        if (pollOutagesDao.isCurTimeInOutage(outage)) {\n            boolean inOutage = pollOutagesDao.isNodeIdInOutage(nodeId, outage);\n            if (!inOutage) {\n                for (final Interface i : intfs) {\n                    if (pollOutagesDao.isInterfaceInOutage(i.getIpAddress(), outage)) {\n                        inOutage = true;\n                        break;\n                    }\n                }\n            }\n            if (inOutage) {\n                final String name = outage.getName();\n                final String link = \"<a href=\\\"admin/sched-outages/editoutage.jsp?name=\" + URLEncoder.encode(name, \"UTF-8\") + \"\\\">\" +name + \"</a>\";\n                schedOutages.add(request.isUserInRole(Authentication.ROLE_ADMIN) ? link : name);\n            }\n        }\n    }\n\n\tpageContext.setAttribute(\"schedOutages\", schedOutages.isEmpty() ? null : StringUtils.collectionToDelimitedString(schedOutages, \", \"));\n    pageContext.setAttribute(\"maxInterfaceCount\", System.getProperty(\"org.opennms.interfaceAvailabilityBox.maxInterfaceCount\", \"10\"));\n%>\n\n<%@page import=\"org.opennms.core.resource.Vault\"%>\n<jsp:include page=\"/includes/bootstrap.jsp\" flush=\"false\" >\n  <jsp:param name=\"ngapp\" value=\"onms-interfaces\" />\n  <jsp:param name=\"title\" value=\"Node\" />\n  <jsp:param name=\"headTitle\" value=\"${model.label}\" />\n  <jsp:param name=\"headTitle\" value=\"ID ${model.id}\" />\n  <jsp:param name=\"headTitle\" value=\"Node\" />\n  <jsp:param name=\"breadcrumb\" value=\"<a href='element/index.jsp'>Search</a>\" />\n  <jsp:param name=\"breadcrumb\" value=\"Node\" />\n</jsp:include>\n\n<jsp:include page=\"/assets/load-assets.jsp\" flush=\"false\">\n    <jsp:param name=\"asset\" value=\"angular-js\" />\n</jsp:include>\n<jsp:include page=\"/assets/load-assets.jsp\" flush=\"false\">\n    <jsp:param name=\"asset\" value=\"onms-interfaces-app\" />\n</jsp:include>\n\n<script type=\"text/javascript\">\nfunction confirmAssetEdit() {\n  var confirmText = \"You are about to edit asset fields for a node that was provisioned \" +\n    \"through a requisition. Any edits made here will be rolled back the next \" +\n    \"time the requisition \\\"${model.node.foreignSource}\\\" is \" +\n    \"synchronized (typically every 24 hours) or the node manually rescanned.\\n\\n\" +\n    \"To learn the best way to make permanent asset changes, talk to your \" +\n    \"OpenNMS administrator.\";\n<c:if test=\"${model.foreignSource != null}\">\n<% if (!request.isUserInRole(Authentication.ROLE_READONLY)) { %>\n    return confirm(confirmText);\n<% } else { %>\n    return true;\n<% } %>\n</c:if>\n<c:if test=\"${model.foreignSource == null}\">\n  return true;\n</c:if>\n}\n</script>\n\n<h5>\n  <c:if test=\"${model.foreignSource != null}\">\n    <div class=\"NPnode\">Node: <strong>${model.label}</strong>&nbsp;&nbsp;&nbsp;<span class=\"NPdbid badge badge-secondary \" title=\"Database ID: ${model.id}\"><i class=\"fa fa-database\"></i>&nbsp;${model.id}</span>&nbsp;<span class=\"NPfs badge badge-secondary \" title=\"Requisition: ${fn:escapeXml(model.foreignSource)}\"><i class=\"fa fa-list-alt\"></i>&nbsp;${fn:escapeXml(model.foreignSource)}</span>&nbsp;<span class=\"NPfid badge badge-secondary \" title=\"Foreign ID: ${model.foreignId}\"><i class=\"fa fa-qrcode\"></i>&nbsp;${model.foreignId}</span>&nbsp;<span class=\"NPloc badge badge-secondary \" title=\"Location: ${model.location}\"><i class=\"fa fa-map-marker\"></i>&nbsp;${model.location}</span> <c:if test=\"${model.node.hasFlows}\"><span class=\"NPflows badge badge-secondary \" title=\"Flows: flow data available\"><i class=\"fa fa-exchange\"></i> flow data</span></c:if></div>\n  </c:if>\n  <c:if test=\"${model.foreignSource == null}\">\n    <div class=\"NPnode\">Node: <strong>${model.label}</strong>&nbsp;&nbsp;&nbsp;<span class=\"NPdbid badge badge-secondary \" title=\"Database ID: ${model.id}\"><i class=\"fa fa-database\"></i>&nbsp;${model.id}</span>&nbsp;<span class=\"NPloc badge badge-secondary \" title=\"Location: ${model.location}\"><i class=\"fa fa-map-marker\"></i>&nbsp;${model.location}</span> <c:if test=\"${model.node.hasFlows}\"><span class=\"NPflows badge badge-secondary \" title=\"Flows: flow data available\"><i class=\"fa fa-exchange\"></i> flow data</span></c:if></div>\n  </c:if>\n</h5>\n\n  <ul class=\"list-inline\">\n    <c:url var=\"eventLink\" value=\"event/list\">\n      <c:param name=\"filter\" value=\"node=${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${eventLink}\"/>\">View Events</a>\n    </li>\n\n    <c:url var=\"alarmLink\" value=\"alarm/list.htm\">\n      <c:param name=\"filter\" value=\"node=${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${alarmLink}\"/>\">View Alarms</a>\n    </li>\n    \n    <c:url var=\"outageLink\" value=\"outage/list.htm\">\n      <c:param name=\"filter\" value=\"node=${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${outageLink}\"/>\">View Outages</a>\n    </li>\n    \n    <c:url var=\"assetLink\" value=\"asset/modify.jsp\">\n      <c:param name=\"node\" value=\"${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${assetLink}\"/>\" onclick=\"return confirmAssetEdit()\">Asset Info</a>\n    </li>\n\n    <c:url var=\"metaDataLink\" value=\"element/node-metadata.jsp\">\n        <c:param name=\"node\" value=\"${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${metaDataLink}\"/>\">Meta-Data</a>\n    </li>\n\n    <c:url var=\"hardwareLink\" value=\"hardware/list.jsp\">\n      <c:param name=\"node\" value=\"${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${hardwareLink}\"/>\">Hardware Info</a>\n    </li>\n\n    <c:url var=\"intfAvailabilityLink\" value=\"element/availability.jsp\">\n      <c:param name=\"node\" value=\"${model.id}\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${intfAvailabilityLink}\"/>\">Availability</a>\n    </li>\n\n    <c:if test=\"${! empty model.statusSite}\">\n      <c:url var=\"siteLink\" value=\"siteStatusView.htm\">\n        <c:param name=\"statusSite\" value=\"${model.statusSite}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${siteLink}\"/>\">Site Status</a>\n      </li>\n    </c:if>\n\n    <c:forEach items=\"${model.links}\" var=\"link\">\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${link.url}\"/>\">${link.text}</a>\n      </li>\n    </c:forEach>\n    \n    <%-- TODO In order to show the following link only when there are metrics, an\n              inexpensive method has to be implemented on either ResourceService\n              or ResourceDao --%>\n    <c:url var=\"resourceGraphsUrl\" value=\"graph/chooseresource.jsp\">\n      <c:param name=\"node\" value=\"${model.id}\"/>\n      <c:param name=\"reports\" value=\"all\"/>\n    </c:url>\n    <li class=\"list-inline-item\">\n      <a href=\"<c:out value=\"${resourceGraphsUrl}\"/>\">Resource Graphs</a>\n    </li>\n    \n    <c:if test=\"${model.admin}\">\n      <c:url var=\"rescanLink\" value=\"element/rescan.jsp\">\n        <c:param name=\"node\" value=\"${model.id}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${rescanLink}\"/>\">Rescan</a>\n      </li>\n      \n      <c:url var=\"adminLink\" value=\"admin/nodemanagement/index.jsp\">\n        <c:param name=\"node\" value=\"${model.id}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${adminLink}\"/>\">Admin</a>\n      </li>\n\n      <c:if test=\"${! empty model.snmpPrimaryIntf}\">\n        <c:url var=\"updateSnmpLink\" value=\"admin/updateSnmp.jsp\">\n          <c:param name=\"node\" value=\"${model.id}\"/>\n          <c:param name=\"ipaddr\" value=\"${model.snmpPrimaryIntf.ipAddress}\"/>\n        </c:url>\n        <li class=\"list-inline-item\">\n          <a href=\"<c:out value=\"${updateSnmpLink}\"/>\">Update SNMP</a>\n        </li>\n      </c:if>\n      \n      <c:url var=\"createOutage\" value=\"admin/sched-outages/editoutage.jsp\">\n\t<c:param name=\"newName\" value=\"${model.label}\"/>\n\t<c:param name=\"addNew\" value=\"true\"/>\n\t<c:param name=\"nodeID\" value=\"${model.id}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${createOutage}\"/>\">Schedule Outage</a>\n      </li>\n    </c:if>\n\n    <c:if test=\"${model.existsInRequisition && (model.admin || model.provision)}\">\n        <li class=\"list-inline-item\">\n            <a href=\"<c:out value=\"admin/ng-requisitions/index.jsp#/requisitions/${model.foreignSource}/nodes/${model.foreignId}\"/>\">Edit in Requisition</a>\n        </li>\n    </c:if>\n\n    <c:forEach items=\"${navEntries}\" var=\"entry\">\n      <li class=\"list-inline-item\">\n      \t<c:out value=\"${entry}\" escapeXml=\"false\" />\n      </li>\n    </c:forEach>\n  </ul>\n\n\n<c:if test=\"${! empty schedOutages}\">\n  <table class=\"table table-sm severity\">\n    <tr class=\"severity-Critical\">\n      <td align=\"left\" class=\"bright\">\n        <b>This node is currently affected by the following scheduled outages: </b> ${schedOutages}\n      </td>\n    </tr>\n  </table>\n</c:if>\n\n<% String showNodeStatusBar = System.getProperty(\"opennms.nodeStatusBar.show\", \"false\");\n   if (Boolean.parseBoolean(showNodeStatusBar)) { %>\n<jsp:include page=\"/includes/nodeStatus-box.jsp?nodeId=${model.id}\" flush=\"false\" />\n<% } %>\n\n<div class=\"row\">\n<div class=\"col-md-6\">\n  \n  <!-- Asset box, if info available --> \n  <c:if test=\"${! empty model.asset && (! empty model.asset.description || ! empty model.asset.comments)}\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>Asset Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr>\n        <th>Description</th>\n        <td>${model.asset.description}</td>\n      </tr>\n      \n      <tr>\n        <th>Comments</th>\n        <td>${model.asset.comments}</td>\n      </tr>\n    </table>\n    </div>\n  </c:if>\n\n  <!-- SNMP box, if info available -->\n  <c:if test=\"${! empty model.node.sysObjectId}\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>SNMP Attributes</span>\n    </div>\n    \n    <table class=\"table table-sm\">\n      <tr>\n        <th>Name</th>\n        <td>${model.sysName}</td>\n      </tr>\n      <tr>\n        <th>sysObjectID</th>\n        <td>${model.node.sysObjectId}</td>\n      </tr>\n      <tr>\n        <th>Location</th>\n        <td>${model.sysLocation}</td>\n      </tr>\n      <tr>\n        <th>Contact</th>\n        <td>${model.sysContact}</td>\n      </tr>\n      <tr>\n        <th valign=\"top\">Description</th>\n        <td valign=\"top\">${model.sysDescription}</td>\n      </tr>\n    </table>\n    </div>\n  </c:if>\n\n  <!-- Critical Path info, if info available -->\n  <c:if test=\"${model.criticalPath != model.noCriticalPath}\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>Path Outage - Critical Path</span>\n    </div>\n    <div class=\"card-body\">\n      <ul class=\"list-unstyled mb-0\">\n        <li class=\"list-inline-item\">\n          ${model.criticalPath}\n        </li>\n      </ul> \n    </div>          \n    </div>    \n  </c:if>\n\t\n  <!-- Availability box -->\n  <c:if test=\"${fn:length( model.intfs ) <= maxInterfaceCount}\">\n    <jsp:include page=\"/includes/nodeAvailability-box.jsp\" flush=\"false\" >\n      <jsp:param name=\"node\" value=\"${model.id}\" />\n    </jsp:include>\n  </c:if>\n\n  <div id=\"onms-interfaces\" class=\"card\">\n    <div class=\"card-header\">\n        <span>Node Interfaces</span>\n    </div>\n    <onms-interfaces node=\"${model.id}\"/>\n  </div>\n\n  <!-- LLDP box, if info available --> \n  <c:if test=\"${! empty model.lldp }\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>LLDP Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr><th width=\"50%\">chassis id</th><td width=\"50%\">${model.lldp.lldpChassisId}</td></tr>\n      <tr><th width=\"50%\">sysname</th><td width=\"50%\">${model.lldp.lldpSysName}</td></tr>\n      <tr><th width=\"50%\">last poll time</th><td width=\"50%\">${model.lldp.lldpLastPollTime}</td></tr>\n    </table>\n    </div>\n    </c:if>\n\n  <!-- CDP box, if info available --> \n  <c:if test=\"${! empty model.cdp }\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>CDP Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr><th width=\"50%\">global device id</th><td width=\"50%\">${model.cdp.cdpGlobalDeviceId}</td></tr>\n      <tr><th width=\"50%\">global run</th><td width=\"50%\">${model.cdp.cdpGlobalRun}</td></tr>\n      <tr><th width=\"50%\">last poll time</th><td width=\"50%\">${model.cdp.cdpLastPollTime}</td></tr>\n    </table>\n  </div>\n  </c:if>\n  <!--End CDP box, if info available --> \n\n  <!-- OSPF box, if info available -->\n  <c:if test=\"${! empty model.ospf }\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>OSPF Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr><th width=\"50%\">Router Id</th><td width=\"50%\">${model.ospf.ospfRouterId}</td></tr>\n      <tr><th width=\"50%\">Status</th><td width=\"50%\">${model.ospf.ospfAdminStat} version:${model.ospf.ospfVersionNumber}</td></tr>\n      <tr><th>last poll time</th><td>${model.ospf.ospfLastPollTime}</td></tr>\n    </table>\n  </div>\n  </c:if>\n\n  <!-- IS-IS box, if info available -->\n  <c:if test=\"${! empty model.isis }\">\n    <div class=\"card\">\n    <div class=\"card-header\">\n      <span>IS-IS Information</span>\n    </div>\n    <table class=\"table table-sm\">\n      <tr><th width=\"50%\">Sys ID</th><td width=\"50%\">${model.isis.isisSysID}</td></tr>\n      <tr><th width=\"50%\">Admin State</th><td width=\"50%\">${model.isis.isisSysAdminState}</td></tr>\n      <tr><th width=\"50%\">last poll time</th><td width=\"50%\">${model.isis.isisLastPollTime}</td></tr>\n    </table>\n    </div>\n  </c:if>\n\n  <!-- Bridge box if available -->\n  <c:if test=\"${! empty model.bridges}\">\n    <div class=\"card\">\n   \t<div class=\"card-header\">\n   \t  <span>Bridge Information</span>\n   \t</div>\n\t<table class=\"table table-sm\">\n\t<c:forEach items=\"${model.bridges}\" var=\"bridge\">\n   \t<tr>\n   \t<th width=\"50%\"><c:if test=\"${! empty bridge.vlanname}\">Vlan ${bridge.vlanname}</c:if>\n   \t    <c:if test=\"${! empty bridge.vlan}\">(vlanid ${bridge.vlan})</c:if>\n   \t    <c:if test=\"${empty bridge.vlan}\">Default</c:if>\n   \t    (${bridge.baseNumPorts} port assigned)\n   \t</th>\n    <td width=\"50%\"> baseAddress:${bridge.baseBridgeAddress} type:${bridge.baseType} \n    \t<c:if test=\"${! empty bridge.stpProtocolSpecification}\">stpProtocolSpec:${bridge.stpProtocolSpecification}</c:if>\n \t    <c:if test=\"${! empty bridge.stpPriority && bridge.stpPriority > 0}\">Priority:${bridge.stpPriority}</c:if>\n \t    <c:if test=\"${! empty bridge.stpDesignatedRoot}\">DesignatedRoot:${bridge.stpDesignatedRoot}</c:if>\n \t    <c:if test=\"${! empty bridge.stpRootPort && bridge.stpRootPort > 0}\">RootPort:${bridge.stpRootPort}</c:if>\n \t    <c:if test=\"${! empty bridge.stpRootCost && bridge.stpRootCost > 0}\">RootCost:${bridge.stpRootCost}</c:if>\n\t</tr>\n\t</c:forEach>\n    </table>\n    </div>\n  </c:if>\n\n</div> <!-- end of tag col-md-6 -->\n\n<div class=\"col-md-6\">\n  \n  <!-- general info box -->\n  <div class=\"card\">\n    <div class=\"card-header\">\n  \t<span>General (Status: ${model.status})</span>\n    </div>\n  <div class=\"card-body\">\n    <ul class=\"list-unstyled mb-0\">\n      <c:if test=\"${model.showRancid}\">\n        <c:url var=\"rancidLink\" value=\"inventory/rancid.htm\">\n          <c:param name=\"node\" value=\"${model.id}\"/>\n        </c:url>\n        <li class=\"list-inline-item\">\n          <a href=\"<c:out value=\"${rancidLink}\"/>\">View Node Rancid Inventory Info </a>\n        </li>\n      </c:if>\n      <c:url var=\"detailLink\" value=\"element/linkednode.jsp\">\n        <c:param name=\"node\" value=\"${model.id}\"/>\n      </c:url>\n      <li class=\"list-inline-item\">\n        <a href=\"<c:out value=\"${detailLink}\"/>\">View Node Link Detailed Info</a>\n      </li>\n    </ul>\n    </div>\t     \n  </div>\n  \n  <!-- Category box -->\n  <jsp:include page=\"/includes/nodeCategory-box.htm\" flush=\"false\" >\n    <jsp:param name=\"node\" value=\"${model.id}\" />\n  </jsp:include>\n  \n  <!-- notification box -->\n  <jsp:include page=\"/includes/notification-box.jsp\" flush=\"false\" >\n    <jsp:param name=\"node\" value=\"${model.id}\" />\n  </jsp:include>\n  \n  <!-- events list  box -->\n  <c:url var=\"eventListUrl\" value=\"event/list\">\n    <c:param name=\"filter\" value=\"node=${model.id}\"/>\n  </c:url>\n  <jsp:include page=\"/includes/eventlist.jsp\" flush=\"false\" >\n    <jsp:param name=\"node\" value=\"${model.id}\" />\n    <jsp:param name=\"throttle\" value=\"5\" />\n    <jsp:param name=\"header\" value=\"<a href='${eventListUrl}'>Recent Events</a>\" />\n    <jsp:param name=\"moreUrl\" value=\"${eventListUrl}\" />\n  </jsp:include>\n  \n  <!-- Recent outages box -->\n  <jsp:include page=\"/outage/nodeOutages-box.htm\" flush=\"false\"> \n    <jsp:param name=\"node\" value=\"${model.id}\" />\n  </jsp:include>\n\n</div>\n\n</div>\n\n<jsp:include page=\"/includes/bootstrap-footer.jsp\" flush=\"false\" />\n"], "filenames": ["core/web-assets/src/main/assets/js/apps/onms-requisitions/lib/scripts/controllers/ForeignSource.js", "core/web-assets/src/main/assets/js/apps/onms-requisitions/lib/scripts/controllers/Node.js", "core/web-assets/src/main/assets/js/apps/onms-requisitions/lib/scripts/controllers/QuickAddNode.js", "core/web-assets/src/main/assets/js/apps/onms-requisitions/lib/scripts/controllers/Requisition.js", "core/web-assets/src/main/assets/js/apps/onms-requisitions/lib/scripts/controllers/Requisitions.js", "core/web-assets/src/main/assets/js/apps/onms-requisitions/lib/scripts/services/Synchronize.js", "core/web-assets/src/test/javascript/ng-requisitions/controllers/ForeignSource.test.js", "core/web-assets/src/test/javascript/ng-requisitions/controllers/Node.test.js", "core/web-assets/src/test/javascript/ng-requisitions/controllers/Requisition.test.js", "core/web-assets/src/test/javascript/ng-requisitions/controllers/Requisitions.test.js", "opennms-webapp/src/main/webapp/WEB-INF/tags/element/nodelist.tag", "opennms-webapp/src/main/webapp/element/node.jsp"], "buggy_code_start_loc": [457, 329, 114, 203, 175, 49, 8, 10, 10, 10, 5, 314], "buggy_code_end_loc": [521, 517, 242, 299, 319, 57, 8, 10, 10, 10, 16, 315], "fixing_code_start_loc": [457, 329, 114, 203, 175, 49, 9, 11, 11, 11, 6, 314], "fixing_code_end_loc": [521, 517, 242, 299, 319, 57, 10, 12, 12, 12, 17, 315], "type": "CWE-79", "message": "In OpenNMS Horizon, versions opennms-18.0.0-1 through opennms-27.1.0-1; OpenNMS Meridian, versions meridian-foundation-2015.1.0-1 through meridian-foundation-2019.1.18-1; meridian-foundation-2020.1.0-1 through meridian-foundation-2020.1.7-1 are vulnerable to Stored Cross-Site Scripting, since the function `createRequisitionedNode()` does not perform any validation checks on the input sent to the `node-label` parameter. Due to this flaw an attacker could inject an arbitrary script which will be stored in the database.", "other": {"cve": {"id": "CVE-2021-25934", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-05-25T19:15:07.623", "lastModified": "2021-06-03T15:24:08.333", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In OpenNMS Horizon, versions opennms-18.0.0-1 through opennms-27.1.0-1; OpenNMS Meridian, versions meridian-foundation-2015.1.0-1 through meridian-foundation-2019.1.18-1; meridian-foundation-2020.1.0-1 through meridian-foundation-2020.1.7-1 are vulnerable to Stored Cross-Site Scripting, since the function `createRequisitionedNode()` does not perform any validation checks on the input sent to the `node-label` parameter. Due to this flaw an attacker could inject an arbitrary script which will be stored in the database."}, {"lang": "es", "value": "En OpenNMS Horizon, versiones opennms-18.0.0-1 hasta opennms-27.1.0-1;&#xa0;OpenNMS Meridian, versiones meridian-foundation-2015.1.0-1 hasta meridian-foundation-2019.1.18-1;&#xa0;versiones meridian-foundation-2020.1.0-1 hasta meridian-foundation-2020.1.7-1, son vulnerables a un ataque de tipo Cross-Site Scripting Almacenado, ya que la funci\u00f3n \"createRequisitionedNode()\" no lleva a cabo ning\u00fan chequeo de comprobaci\u00f3n en la entrada enviada hacia el par\u00e1metro \"nodo -label\".&#xa0;Debido a este fallo, un atacante podr\u00eda inyectar un script arbitrario que ser\u00e1 almacenado en la base de datos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opennms:horizon:*:*:*:*:*:*:*:*", "versionStartIncluding": "18.0.0", "versionEndIncluding": "27.1.0", "matchCriteriaId": "7D37E76C-7231-4A09-B4EC-51E33C25816D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:opennms:meridian:*:*:*:*:*:*:*:*", "versionStartIncluding": "2015.1.0", "versionEndIncluding": "2019.1.18", "matchCriteriaId": "EE7DE870-3CA3-4C5C-A7A9-A29DBE0466C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:opennms:meridian:*:*:*:*:*:*:*:*", "versionStartIncluding": "2020.1.0", "versionEndIncluding": "2020.1.7", "matchCriteriaId": "AAD28774-4091-477C-B1E0-282EA4047F25"}]}]}], "references": [{"url": "https://github.com/OpenNMS/opennms/commit/101e3aa06ec9a1f8f266335fc6f5685c062c6117", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenNMS/opennms/commit/eb08b5ed4c5548f3e941a1f0d0363ae4439fa98c", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25934", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpenNMS/opennms/commit/101e3aa06ec9a1f8f266335fc6f5685c062c6117"}}