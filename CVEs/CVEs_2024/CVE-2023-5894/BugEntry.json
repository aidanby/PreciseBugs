{"buggy_code": ["<?php\n\n/**\n * @file controllers/grid/issues/IssueGridCellProvider.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class IssueGridCellProvider\n *\n * @ingroup controllers_grid_issues\n *\n * @brief Grid cell provider for the issue management grid\n */\n\nnamespace APP\\controllers\\grid\\issues;\n\nuse APP\\core\\Application;\nuse APP\\issue\\Issue;\nuse PKP\\controllers\\grid\\GridCellProvider;\nuse PKP\\controllers\\grid\\GridColumn;\nuse PKP\\controllers\\grid\\GridHandler;\nuse PKP\\core\\PKPString;\nuse PKP\\linkAction\\LinkAction;\nuse PKP\\linkAction\\request\\AjaxModal;\n\nclass IssueGridCellProvider extends GridCellProvider\n{\n    /** @var string */\n    public $dateFormatShort;\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->dateFormatShort = PKPString::convertStrftimeFormat(Application::get()->getRequest()->getContext()->getLocalizedDateFormatShort());\n    }\n\n    /**\n     * Get cell actions associated with this row/column combination\n     *\n     * @param \\PKP\\controllers\\grid\\GridRow $row\n     * @param GridColumn $column\n     *\n     * @return array an array of LinkAction instances\n     */\n    public function getCellActions($request, $row, $column, $position = GridHandler::GRID_ACTION_POSITION_DEFAULT)\n    {\n        if ($column->getId() == 'identification') {\n            $issue = $row->getData();\n            assert(is_a($issue, 'Issue'));\n            $router = $request->getRouter();\n            return [\n                new LinkAction(\n                    'edit',\n                    new AjaxModal(\n                        $router->url($request, null, null, 'editIssue', null, ['issueId' => $issue->getId()]),\n                        __('editor.issues.editIssue', ['issueIdentification' => $issue->getIssueIdentification()]),\n                        'modal_edit',\n                        true\n                    ),\n                    htmlspecialchars($issue->getIssueIdentification())\n                )\n            ];\n        }\n        return [];\n    }\n\n    /**\n     * Extracts variables for a given column from a data element\n     * so that they may be assigned to template before rendering.\n     *\n     * @param \\PKP\\controllers\\grid\\GridRow $row\n     * @param GridColumn $column\n     *\n     * @return array\n     */\n    public function getTemplateVarsFromRowColumn($row, $column)\n    {\n        $issue = $row->getData(); /** @var Issue $issue */\n        $columnId = $column->getId();\n        assert(is_a($issue, 'Issue'));\n        assert(!empty($columnId));\n        switch ($columnId) {\n            case 'identification':\n                return ['label' => '']; // Title returned as action\n            case 'published':\n                $datePublished = $issue->getDatePublished();\n                if ($datePublished) {\n                    $datePublished = strtotime($datePublished);\n                }\n                return ['label' => $datePublished ? date($this->dateFormatShort, $datePublished) : ''];\n            case 'numArticles':\n                return ['label' => $issue->getNumArticles()];\n            default: assert(false);\n                break;\n        }\n    }\n}\n", "<?php\n\n/**\n * @file controllers/grid/issues/IssueGridRow.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class IssueGridRow\n *\n * @ingroup controllers_grid_issues\n *\n * @brief Handle issue grid row requests.\n */\n\nnamespace APP\\controllers\\grid\\issues;\n\nuse APP\\facades\\Repo;\nuse PKP\\controllers\\grid\\GridRow;\nuse PKP\\core\\PKPApplication;\nuse PKP\\linkAction\\LinkAction;\nuse PKP\\linkAction\\request\\AjaxModal;\nuse PKP\\linkAction\\request\\OpenWindowAction;\nuse PKP\\linkAction\\request\\RemoteActionConfirmationModal;\n\nclass IssueGridRow extends GridRow\n{\n    //\n    // Overridden template methods\n    //\n    /**\n     * @copydoc GridRow::initialize\n     *\n     * @param null|mixed $template\n     */\n    public function initialize($request, $template = null)\n    {\n        parent::initialize($request, $template);\n\n        // Is this a new row or an existing row?\n        $issueId = $this->getId();\n        if (!empty($issueId) && is_numeric($issueId)) {\n            $issue = $this->getData();\n            assert(is_a($issue, 'Issue'));\n            $router = $request->getRouter();\n\n            $this->addAction(\n                new LinkAction(\n                    'edit',\n                    new AjaxModal(\n                        $router->url($request, null, null, 'editIssue', null, ['issueId' => $issueId]),\n                        __('editor.issues.editIssue', ['issueIdentification' => $issue->getIssueIdentification()]),\n                        'modal_edit',\n                        true\n                    ),\n                    __('grid.action.edit'),\n                    'edit'\n                )\n            );\n\n            $dispatcher = $request->getDispatcher();\n            $this->addAction(\n                new LinkAction(\n                    $issue->getDatePublished() ? 'viewIssue' : 'previewIssue',\n                    new OpenWindowAction(\n                        $dispatcher->url($request, PKPApplication::ROUTE_PAGE, null, 'issue', 'view', [$issueId])\n                    ),\n                    __($issue->getDatePublished() ? 'grid.action.viewIssue' : 'grid.action.previewIssue'),\n                    'information'\n                )\n            );\n\n            if ($issue->getDatePublished()) {\n                $this->addAction(\n                    new LinkAction(\n                        'unpublish',\n                        new RemoteActionConfirmationModal(\n                            $request->getSession(),\n                            __('editor.issues.confirmUnpublish'),\n                            __('editor.issues.unpublishIssue'),\n                            $router->url($request, null, null, 'unpublishIssue', null, ['issueId' => $issueId]),\n                            'modal_delete'\n                        ),\n                        __('editor.issues.unpublishIssue'),\n                        'delete'\n                    )\n                );\n            } else {\n                $this->addAction(\n                    new LinkAction(\n                        'publish',\n                        new AjaxModal(\n                            $router->url(\n                                $request,\n                                null,\n                                null,\n                                'publishIssue',\n                                null,\n                                ['issueId' => $issueId]\n                            ),\n                            __('editor.issues.publishIssue'),\n                            'modal_confirm'\n                        ),\n                        __('editor.issues.publishIssue'),\n                        'advance'\n                    )\n                );\n            }\n\n            $currentIssue = Repo::issue()->getCurrent($issue->getJournalId());\n            $isCurrentIssue = $currentIssue != null && $issue->getId() == $currentIssue->getId();\n            if ($issue->getDatePublished() && !$isCurrentIssue) {\n                $this->addAction(\n                    new LinkAction(\n                        'setCurrentIssue',\n                        new RemoteActionConfirmationModal(\n                            $request->getSession(),\n                            __('editor.issues.confirmSetCurrentIssue'),\n                            __('editor.issues.currentIssue'),\n                            $router->url($request, null, null, 'setCurrentIssue', null, ['issueId' => $issueId]),\n                            'modal_delete'\n                        ),\n                        __('editor.issues.currentIssue'),\n                        'delete'\n                    )\n                );\n            }\n\n            $this->addAction(\n                new LinkAction(\n                    'delete',\n                    new RemoteActionConfirmationModal(\n                        $request->getSession(),\n                        __('common.confirmDelete'),\n                        __('grid.action.delete'),\n                        $router->url($request, null, null, 'deleteIssue', null, ['issueId' => $issueId]),\n                        'modal_delete'\n                    ),\n                    __('grid.action.delete'),\n                    'delete'\n                )\n            );\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * @file controllers/grid/issues/IssueGridCellProvider.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class IssueGridCellProvider\n *\n * @ingroup controllers_grid_issues\n *\n * @brief Grid cell provider for the issue management grid\n */\n\nnamespace APP\\controllers\\grid\\issues;\n\nuse APP\\core\\Application;\nuse APP\\issue\\Issue;\nuse PKP\\controllers\\grid\\GridCellProvider;\nuse PKP\\controllers\\grid\\GridColumn;\nuse PKP\\controllers\\grid\\GridHandler;\nuse PKP\\core\\PKPString;\nuse PKP\\linkAction\\LinkAction;\nuse PKP\\linkAction\\request\\AjaxModal;\n\nclass IssueGridCellProvider extends GridCellProvider\n{\n    /** @var string */\n    public $dateFormatShort;\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->dateFormatShort = PKPString::convertStrftimeFormat(Application::get()->getRequest()->getContext()->getLocalizedDateFormatShort());\n    }\n\n    /**\n     * Get cell actions associated with this row/column combination\n     *\n     * @param \\PKP\\controllers\\grid\\GridRow $row\n     * @param GridColumn $column\n     *\n     * @return array an array of LinkAction instances\n     */\n    public function getCellActions($request, $row, $column, $position = GridHandler::GRID_ACTION_POSITION_DEFAULT)\n    {\n        if ($column->getId() == 'identification') {\n            $issue = $row->getData();\n            assert(is_a($issue, 'Issue'));\n            $router = $request->getRouter();\n            return [\n                new LinkAction(\n                    'edit',\n                    new AjaxModal(\n                        $router->url($request, null, null, 'editIssue', null, ['issueId' => $issue->getId()]),\n                        __('editor.issues.editIssue', ['issueIdentification' => htmlspecialchars($issue->getIssueIdentification())]),\n                        'modal_edit',\n                        true\n                    ),\n                    htmlspecialchars($issue->getIssueIdentification())\n                )\n            ];\n        }\n        return [];\n    }\n\n    /**\n     * Extracts variables for a given column from a data element\n     * so that they may be assigned to template before rendering.\n     *\n     * @param \\PKP\\controllers\\grid\\GridRow $row\n     * @param GridColumn $column\n     *\n     * @return array\n     */\n    public function getTemplateVarsFromRowColumn($row, $column)\n    {\n        $issue = $row->getData(); /** @var Issue $issue */\n        $columnId = $column->getId();\n        assert(is_a($issue, 'Issue'));\n        assert(!empty($columnId));\n        switch ($columnId) {\n            case 'identification':\n                return ['label' => '']; // Title returned as action\n            case 'published':\n                $datePublished = $issue->getDatePublished();\n                if ($datePublished) {\n                    $datePublished = strtotime($datePublished);\n                }\n                return ['label' => $datePublished ? date($this->dateFormatShort, $datePublished) : ''];\n            case 'numArticles':\n                return ['label' => $issue->getNumArticles()];\n            default: assert(false);\n                break;\n        }\n    }\n}\n", "<?php\n\n/**\n * @file controllers/grid/issues/IssueGridRow.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class IssueGridRow\n *\n * @ingroup controllers_grid_issues\n *\n * @brief Handle issue grid row requests.\n */\n\nnamespace APP\\controllers\\grid\\issues;\n\nuse APP\\facades\\Repo;\nuse PKP\\controllers\\grid\\GridRow;\nuse PKP\\core\\PKPApplication;\nuse PKP\\linkAction\\LinkAction;\nuse PKP\\linkAction\\request\\AjaxModal;\nuse PKP\\linkAction\\request\\OpenWindowAction;\nuse PKP\\linkAction\\request\\RemoteActionConfirmationModal;\n\nclass IssueGridRow extends GridRow\n{\n    //\n    // Overridden template methods\n    //\n    /**\n     * @copydoc GridRow::initialize\n     *\n     * @param null|mixed $template\n     */\n    public function initialize($request, $template = null)\n    {\n        parent::initialize($request, $template);\n\n        // Is this a new row or an existing row?\n        $issueId = $this->getId();\n        if (!empty($issueId) && is_numeric($issueId)) {\n            $issue = $this->getData();\n            assert(is_a($issue, 'Issue'));\n            $router = $request->getRouter();\n\n            $this->addAction(\n                new LinkAction(\n                    'edit',\n                    new AjaxModal(\n                        $router->url($request, null, null, 'editIssue', null, ['issueId' => $issueId]),\n                        __('editor.issues.editIssue', ['issueIdentification' => htmlspecialchars($issue->getIssueIdentification())]),\n                        'modal_edit',\n                        true\n                    ),\n                    __('grid.action.edit'),\n                    'edit'\n                )\n            );\n\n            $dispatcher = $request->getDispatcher();\n            $this->addAction(\n                new LinkAction(\n                    $issue->getDatePublished() ? 'viewIssue' : 'previewIssue',\n                    new OpenWindowAction(\n                        $dispatcher->url($request, PKPApplication::ROUTE_PAGE, null, 'issue', 'view', [$issueId])\n                    ),\n                    __($issue->getDatePublished() ? 'grid.action.viewIssue' : 'grid.action.previewIssue'),\n                    'information'\n                )\n            );\n\n            if ($issue->getDatePublished()) {\n                $this->addAction(\n                    new LinkAction(\n                        'unpublish',\n                        new RemoteActionConfirmationModal(\n                            $request->getSession(),\n                            __('editor.issues.confirmUnpublish'),\n                            __('editor.issues.unpublishIssue'),\n                            $router->url($request, null, null, 'unpublishIssue', null, ['issueId' => $issueId]),\n                            'modal_delete'\n                        ),\n                        __('editor.issues.unpublishIssue'),\n                        'delete'\n                    )\n                );\n            } else {\n                $this->addAction(\n                    new LinkAction(\n                        'publish',\n                        new AjaxModal(\n                            $router->url(\n                                $request,\n                                null,\n                                null,\n                                'publishIssue',\n                                null,\n                                ['issueId' => $issueId]\n                            ),\n                            __('editor.issues.publishIssue'),\n                            'modal_confirm'\n                        ),\n                        __('editor.issues.publishIssue'),\n                        'advance'\n                    )\n                );\n            }\n\n            $currentIssue = Repo::issue()->getCurrent($issue->getJournalId());\n            $isCurrentIssue = $currentIssue != null && $issue->getId() == $currentIssue->getId();\n            if ($issue->getDatePublished() && !$isCurrentIssue) {\n                $this->addAction(\n                    new LinkAction(\n                        'setCurrentIssue',\n                        new RemoteActionConfirmationModal(\n                            $request->getSession(),\n                            __('editor.issues.confirmSetCurrentIssue'),\n                            __('editor.issues.currentIssue'),\n                            $router->url($request, null, null, 'setCurrentIssue', null, ['issueId' => $issueId]),\n                            'modal_delete'\n                        ),\n                        __('editor.issues.currentIssue'),\n                        'delete'\n                    )\n                );\n            }\n\n            $this->addAction(\n                new LinkAction(\n                    'delete',\n                    new RemoteActionConfirmationModal(\n                        $request->getSession(),\n                        __('common.confirmDelete'),\n                        __('grid.action.delete'),\n                        $router->url($request, null, null, 'deleteIssue', null, ['issueId' => $issueId]),\n                        'modal_delete'\n                    ),\n                    __('grid.action.delete'),\n                    'delete'\n                )\n            );\n        }\n    }\n}\n"], "filenames": ["controllers/grid/issues/IssueGridCellProvider.php", "controllers/grid/issues/IssueGridRow.php"], "buggy_code_start_loc": [61, 53], "buggy_code_end_loc": [62, 54], "fixing_code_start_loc": [61, 53], "fixing_code_end_loc": [62, 54], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pkp/ojs prior to 3.3.0-16.", "other": {"cve": {"id": "CVE-2023-5894", "sourceIdentifier": "security@huntr.dev", "published": "2023-11-01T01:15:07.750", "lastModified": "2023-11-08T23:34:02.963", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pkp/ojs prior to 3.3.0-16."}, {"lang": "es", "value": "Cross-site Scripting (XSS): almacenado en el repositorio de GitHub pkp/ojs anterior a 3.3.0-16."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 0.9, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sfu:open_journal_systems:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.0-16", "matchCriteriaId": "8E91D9D1-7842-4317-A797-1075ACC722E1"}]}]}], "references": [{"url": "https://github.com/pkp/ojs/commit/66927de1a82e3a3004db9741d1505ddac0980e63", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/aba3ba5b-aa6b-4076-b663-4237b4a0761d", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pkp/ojs/commit/66927de1a82e3a3004db9741d1505ddac0980e63"}}