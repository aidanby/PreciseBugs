{"buggy_code": ["<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @package MantisBT\n * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n/**\n * MantisBT Core API's\n */\nrequire_once( dirname( dirname( __FILE__ ) ) . DIRECTORY_SEPARATOR . 'core.php' );\n\naccess_ensure_global_level( config_get_global( 'admin_site_threshold' ) );\n\n# --------------------\nfunction helper_table_row_count( $p_table ) {\n\t$t_table = $p_table;\n\t$query = \"SELECT COUNT(*) FROM $t_table\";\n\t$result = db_query_bound( $query );\n\t$t_users = db_result( $result );\n\n\treturn $t_users;\n}\n\n# --------------------\nfunction print_table_stats( $p_table_name ) {\n\t$t_count = helper_table_row_count( $p_table_name );\n\techo \"$p_table_name = $t_count records<br />\";\n}\n\necho '<html><head><title>MantisBT Database Statistics</title></head><body>';\n\necho '<h1>MantisBT Database Statistics</h1>';\n\nforeach( db_get_table_list() as $t_table ) {\n\tif( db_table_exists( $t_table ) ) {\n\t\tprint_table_stats( $t_table );\n\t}\n}\n\necho '</body></html>';\n", "<?php\n# MantisConnect - A webservice interface to Mantis Bug Tracker\n# Copyright (C) 2004-2013  Victor Boctor - vboctor@users.sourceforge.net\n# This program is distributed under dual licensing.  These include\n# GPL and a commercial licenses.  Victor Boctor reserves the right to\n# change the license of future releases.\n# See docs/ folder for more details\n\n\n/**\n * Use a standard filter to get issues associated with the specified user.\n *\n * @param $p_username logged in user name.\n * @param $p_password login password.\n * @param $p_project_id id of project to filter on, or ALL_PROJECTS.\n * @param $p_filter_type The name of the filter to apply\n *        \"assigned\" - target user specified - issues assigned to target user that are not resolved.\n *        \"assigned\" - target user 0 - unassigned issues that are not resolved.\n *        \"reported\" - target user specified - issues reported by user.\n *        \"reported\" - target user 0 - will throw.\n *        \"monitored\" - target user specified - issues monitored by user.\n *        \"monitored\" - target user 0 - issues not monitored.\n * @param $p_target_user AccountData for target user, can include id, name, or both.\n * @param $p_page_number the page to return (1 based).\n * @param $p_per_page number of issues per page.\n * @return IssueDataArray a page of matching issues.\n */\nfunction mc_project_get_issues_for_user( $p_username, $p_password, $p_project_id, $p_filter_type, $p_target_user, $p_page_number, $p_per_page ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif ( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\tif ( $p_project_id != ALL_PROJECTS && !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\tif ( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\n\t$t_orig_page_number = $p_page_number < 1 ? 1 : $p_page_number;\n\t$t_page_count = 0;\n\t$t_bug_count = 0;\n\t$t_target_user_id = mci_get_user_id( $p_target_user );\n\t$t_show_sticky = true;\n\n\tif ( strcasecmp( $p_filter_type, 'assigned' ) == 0 ) {\n\t\t$t_filter = filter_create_assigned_to_unresolved( $p_project_id, $t_target_user_id );\n\t} else if ( strcasecmp( $p_filter_type, 'reported' ) == 0 ) {\n\t\t// target id 0 for reporter doesn't make sense.\n\t\tif ( $t_target_user_id == 0 ) {\n\t\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Target user id must be specified for 'reported' filter.\" );\n\t\t}\n\n\t\t$t_filter = filter_create_reported_by( $p_project_id, $t_target_user_id );\n\t} else if ( strcasecmp( $p_filter_type, 'monitored' ) == 0 ) {\n\t\t$t_filter = filter_create_monitored_by( $p_project_id, $t_target_user_id );\n\t} else {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Unknown filter type '$p_filter_type'.\" );\n\t}\n\n\t$t_rows = filter_get_bug_rows( $p_page_number, $p_per_page, $t_page_count, $t_bug_count, $t_filter, $p_project_id, $t_target_user_id, $t_show_sticky );\n\t\n\t$t_result = array();\n\t\n\t// the page number was moved back, so we have exceeded the actual page number, see bug #12991\n\tif ( $t_orig_page_number > $p_page_number ) {\n\t    return $t_result;\t\n\t}\n\n\tforeach( $t_rows as $t_issue_data ) {\n\t\t$t_result[] = mci_issue_data_as_array( $t_issue_data, $t_user_id, $t_lang );\n\t}\n\n\treturn $t_result;\n}\n\nfunction mc_project_get_issues( $p_username, $p_password, $p_project_id, $p_page_number, $p_per_page ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\t\n\tif( $p_project_id != ALL_PROJECTS && !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_orig_page_number = $p_page_number < 1 ? 1 : $p_page_number;\n\t$t_page_count = 0;\n\t$t_bug_count = 0;\n\t$g_project_override = $p_project_id;\n\n\t$t_rows = filter_get_bug_rows( $p_page_number, $p_per_page, $t_page_count, $t_bug_count, null, $p_project_id );\n\t\n\t$t_result = array();\n\t\n\t// the page number was moved back, so we have exceeded the actual page number, see bug #12991\n\tif ( $t_orig_page_number > $p_page_number )\n\t    return $t_result;\t\n\n\tforeach( $t_rows as $t_issue_data ) {\n\t\t$t_result[] = mci_issue_data_as_array( $t_issue_data, $t_user_id, $t_lang );\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get all projects accessible by the given user.\n *\n * @param string $p_username  The name of the user trying to access the project list.\n * @param string $p_password  The password of the user.\n * @return Array  suitable to be converted into a ProjectDataArray\n */\nfunction mc_projects_get_user_accessible( $p_username, $p_password ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !mci_has_readonly_access( $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\n\t$t_result = array();\n\tforeach( user_get_accessible_projects( $t_user_id ) as $t_project_id ) {\n\t\t$t_project_row = project_cache_row( $t_project_id );\n\t\t$t_project = array();\n\t\t$t_project['id'] = $t_project_id;\n\t\t$t_project['name'] = $t_project_row['name'];\n\t\t$t_project['status'] = mci_enum_get_array_by_id( $t_project_row['status'], 'project_status', $t_lang );\n\t\t$t_project['enabled'] = $t_project_row['enabled'];\n\t\t$t_project['view_state'] = mci_enum_get_array_by_id( $t_project_row['view_state'], 'project_view_state', $t_lang );\n\t\t$t_project['access_min'] = mci_enum_get_array_by_id( $t_project_row['access_min'], 'access_levels', $t_lang );\n\t\t$t_project['file_path'] = array_key_exists( 'file_path', $t_project_row ) ? $t_project_row['file_path'] : \"\";\n\t\t$t_project['description'] = array_key_exists( 'description', $t_project_row ) ? $t_project_row['description'] : \"\";\n\t\t$t_project['subprojects'] = mci_user_get_accessible_subprojects( $t_user_id, $t_project_id, $t_lang );\n\t\t$t_result[] = $t_project;\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get all categories of a project.\n *\n * @param string $p_username  The name of the user trying to access the categories.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the categories for.\n * @return Array  of categorie names\n */\nfunction mc_project_get_categories( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_result = array();\n\t$t_cat_array = category_get_all_rows( $p_project_id );\n\tforeach( $t_cat_array as $t_category_row ) {\n\t\t$t_result[] = $t_category_row['name'];\n\t}\n\treturn $t_result;\n}\n\n/**\n * Add a new category to a project\n * @param string $p_username  The name of the user trying to access the categories.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the categories for.\n * @param string $p_category_name The name of the new category to add\n * @return integer id of the new category\n */\n\nfunction mc_project_add_category($p_username, $p_password, $p_project_id, $p_category_name ) {\n        global $g_project_override;\n        $t_user_id = mci_check_login( $p_username, $p_password );\n\n        if( $t_user_id === false ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        if( !project_exists( $p_project_id ) ) {\n                return SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n        }\n        $g_project_override = $p_project_id;\n\n        if( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $p_project_id ) ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        return category_add( $p_project_id, $p_category_name );\n}\n\n/**\n * Delete a category of a project\n * @param string $p_username  The name of the user trying to access the categories.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the categories for.\n * @param string $p_category_name The name of the category to delete\n * @return bool returns true or false depending on the success of the delete action\n */\n\nfunction mc_project_delete_category ($p_username, $p_password, $p_project_id, $p_category_name) {\n        global $g_project_override;\n        $t_user_id = mci_check_login( $p_username, $p_password );\n\n        if( $t_user_id === false ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        if( !project_exists( $p_project_id ) ) {\n                return SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n        }\n\n        $g_project_override = $p_project_id;\n\n        if( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $p_project_id ) ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        // find the id of the category\n        $p_category_id = category_get_id_by_name( $p_category_name, $p_project_id );\n\n        // delete the category and link all the issue to the default category\n        return category_remove( $p_category_id, config_get('default_category_for_moves') );\n}\n\n/**\n * Update a category of a project\n * @param string $p_username  The name of the user trying to access the categories.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the categories for.\n * @param string $p_category_name The name of the category to rename\n * @param string $p_category_name_new The new name of the category to rename\n * @param int $p_assigned_to User ID that category is assigned to\n * @return bool returns true or false depending on the success of the update action\n */\n\nfunction mc_project_rename_category_by_name( $p_username, $p_password, $p_project_id, $p_category_name, $p_category_name_new, $p_assigned_to ) {\n        global $g_project_override;\n        $t_user_id = mci_check_login( $p_username, $p_password );\n\n        if ( null === $p_assigned_to ) {\n                return SoapObjectsFactory::newSoapFault( 'Client', 'p_assigned_to needed' );\n        }\n\n        if( $t_user_id === false ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        if( !project_exists( $p_project_id ) ) {\n                return SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n        }\n\n        $g_project_override = $p_project_id;\n\n        if( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $p_project_id ) ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        // find the id of the category\n        $p_category_id = category_get_id_by_name( $p_category_name, $p_project_id );\n\n        // update the category\n        return category_update( $p_category_id, $p_category_name_new, $p_assigned_to );\n}\n\n/**\n * Get all versions of a project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the versions for.\n * @return Array  representing a ProjectVersionDataArray structure.\n */\nfunction mc_project_get_versions( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$t_result = array();\n\tforeach( version_get_all_rows( $p_project_id, VERSION_ALL ) as $t_version ) {\n\t\t$t_result[] = mci_project_version_as_array ( $t_version );\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get all released versions of a project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the versions for.\n * @return Array  representing a ProjectVersionDataArray structure.\n */\nfunction mc_project_get_released_versions( $p_username, $p_password, $p_project_id ) {\n\tglobal $g_project_override;\n    $t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\t\n\t$g_project_override = $p_project_id;\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_result = array();\n\n\tforeach( version_get_all_rows( $p_project_id, VERSION_RELEASED ) as $t_version ) {\n\t\t$t_result[] = mci_project_version_as_array ( $t_version );\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get all unreleased (a.k.a. future) versions of a project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the versions for.\n * @return Array  representing a ProjectVersionDataArray structure.\n */\nfunction mc_project_get_unreleased_versions( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_result = array();\n\n\tforeach( version_get_all_rows( $p_project_id, VERSION_FUTURE ) as $t_version )\n\t\t$t_result[] = mci_project_version_as_array ( $t_version );\n\n\treturn $t_result;\n}\n\n/**\n * Submit the specified version details.\n *\n * @param string $p_username  The name of the user trying to add the issue.\n * @param string $p_password  The password of the user.\n * @param Array $p_version  A ProjectVersionData structure containing information about the new verison.\n * @return integer  The id of the created version.\n */\nfunction mc_project_version_add( $p_username, $p_password, $p_version ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\t$p_version = SoapObjectsFactory::unwrapObject( $p_version );\n\n\t$t_project_id = $p_version['project_id'];\n\t$g_project_override = $t_project_id;\n\t$t_name = $p_version['name'];\n\t$t_released = $p_version['released'];\n\t$t_description = $p_version['description'];\n\t$t_date_order =  $p_version['date_order'];\n\tif ( is_blank( $t_date_order ) ) \n\t    $t_date_order = null;\n\telse \n\t\t$t_date_order = SoapObjectsFactory::parseDateTimeString($t_date_order);\n\t\n\t$t_obsolete = isset ( $p_version['obsolete'] ) ? $p_version['obsolete'] : false;\n\t\n\tif ( is_blank( $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"project_id\" was missing' );\n\t}\n\n\tif ( !project_exists( $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault('Client', \"Project '$t_project_id' does not exist.\" );\n\t}\n\n\tif ( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif ( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif ( is_blank( $t_name ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"name\" was missing' );\n\t}\n\n\tif ( !version_is_unique( $t_name, $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client',  'Version exists for project');\n\t}\n\n\tif ( $t_released === false ) {\n\t\t$t_released = VERSION_FUTURE;\n\t} else {\n\t\t$t_released = VERSION_RELEASED;\n\t}\n\t\n\tif ( version_add( $t_project_id, $t_name, $t_released, $t_description, $t_date_order, $t_obsolete ) )\n\t\treturn version_get_id( $t_name, $t_project_id );\n\n\treturn null;\n}\n\n/**\n * Submit the specified version details.\n *\n * @param string $p_username  The name of the user trying to update the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_version_id A version's id\n * @param Array $p_version  A ProjectVersionData structure containing information about the new verison.\n * @return bool returns true or false depending on the success of the update action\n */\nfunction mc_project_version_update( $p_username, $p_password, $p_version_id, $p_version ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( is_blank( $p_version_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"version_id\" was missing' );\n\t}\n\n\tif( !version_exists( $p_version_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Version '$p_version_id' does not exist.\" );\n\t}\n\t\n\t$p_version = SoapObjectsFactory::unwrapObject( $p_version );\n\n\t$t_project_id = $p_version['project_id'];\n\t$g_project_override = $t_project_id;\n\t$t_name = $p_version['name'];\n\t$t_released = $p_version['released'];\n\t$t_description = $p_version['description'];\n\t$t_date_order = isset ( $p_version['date_order']) ? SoapObjectsFactory::parseDateTimeString($p_version['date_order']) : null;\n\t$t_obsolete = isset ( $p_version['obsolete'] ) ? $p_version['obsolete'] : false;\n\n\tif ( is_blank( $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"project_id\" was missing' );\n\t}\n\n\tif ( !project_exists( $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$t_project_id' does not exist.\" );\n\t}\n\n\tif ( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif ( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif ( is_blank( $t_name ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"name\" was missing' );\n\t}\n\n\t# check for duplicates\n\t$t_old_version_name = version_get_field( $p_version_id, 'version' );\n\tif ( ( strtolower( $t_old_version_name ) != strtolower( $t_name ) ) && !version_is_unique( $t_name, $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Version exists for project' );\n\t}\n\n\tif ( $t_released === false ) {\n\t\t$t_released = VERSION_FUTURE;\n\t} else {\n\t\t$t_released = VERSION_RELEASED;\n\t}\n\n\t$t_version_data = new VersionData();\n\t$t_version_data->id = $p_version_id;\n\t$t_version_data->project_id = $t_project_id;\n\t$t_version_data->version = $t_name;\n\t$t_version_data->description = $t_description;\n\t$t_version_data->released = $t_released;\n\t$t_version_data->date_order = $t_date_order;\n\t$t_version_data->obsolete = $t_obsolete;\n\n\treturn version_update( $t_version_data );\n}\n\n/**\n * Delete a version.\n *\n * @param string $p_username  The name of the user trying to delete the version.\n * @param string $p_password  The password of the user.\n * @param integer $p_version_id A version's id\n * @return bool returns true or false depending on the success of the delete action\n */\nfunction mc_project_version_delete( $p_username, $p_password, $p_version_id ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( is_blank( $p_version_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"version_id\" was missing' );\n\t}\n\n\tif( !version_exists( $p_version_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Version '$p_version_id' does not exist.\" );\n\t}\n\n\t$t_project_id = version_get_field( $p_version_id, 'project_id' );\n\t$g_project_override = $t_project_id;\n\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\treturn version_remove( $p_version_id );\n}\n\n/**\n * Get the custom fields that belong to the specified project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the custom fields for.\n * @return Array  representing a CustomFieldDefinitionDataArray structure.\n */\nfunction mc_project_get_custom_fields( $p_username, $p_password, $p_project_id ) {\n\tglobal $g_project_override;\n\n    $t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_result = array();\n\t$t_related_custom_field_ids = custom_field_get_linked_ids( $p_project_id );\n\n\tforeach( custom_field_get_linked_ids( $p_project_id ) as $t_id ) {\n\t\t$t_def = custom_field_get_definition( $t_id );\n\t\tif( access_has_project_level( $t_def['access_level_r'], $p_project_id ) ) {\n\t\t\t$t_result[] = array(\n\t\t\t\t'field' => array(\n\t\t\t\t\t'id' => $t_def['id'],\n\t\t\t\t\t'name' => $t_def['name'],\n\t\t\t\t),\n\t\t\t\t'type' => $t_def['type'],\n\t\t\t\t'default_value' => $t_def['default_value'],\n\t\t\t\t'possible_values' => $t_def['possible_values'],\n\t\t\t\t'valid_regexp' => $t_def['valid_regexp'],\n\t\t\t\t'access_level_r' => $t_def['access_level_r'],\n\t\t\t\t'access_level_rw' => $t_def['access_level_rw'],\n\t\t\t\t'length_min' => $t_def['length_min'],\n\t\t\t\t'length_max' => $t_def['length_max'],\n\t\t\t\t'display_report' => $t_def['display_report'],\n\t\t\t\t'display_update' => $t_def['display_update'],\n\t\t\t\t'display_resolved' => $t_def['display_resolved'],\n\t\t\t\t'display_closed' => $t_def['display_closed'],\n\t\t\t\t'require_report' => $t_def['require_report'],\n\t\t\t\t'require_update' => $t_def['require_update'],\n\t\t\t\t'require_resolved' => $t_def['require_resolved'],\n\t\t\t\t'require_closed' => $t_def['require_closed'],\n\t\t\t);\n\t\t}\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get the attachments that belong to the specified project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the attachments for.\n * @return Array  representing a ProjectAttachmentDataArray structure.\n */\nfunction mc_project_get_attachments( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\n    $t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$g_project_override = $p_project_id;\n\n\t# Check if project documentation feature is enabled.\n\tif( OFF == config_get( 'enable_project_documentation' ) || !file_is_uploading_enabled() ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_project_file_table = db_get_table( 'mantis_project_file_table' );\n\t$t_project_table = db_get_table( 'mantis_project_table' );\n\t$t_project_user_list_table = db_get_table( 'mantis_project_user_list_table' );\n\t$t_user_table = db_get_table( 'mantis_user_table' );\n\t$t_pub = VS_PUBLIC;\n\t$t_priv = VS_PRIVATE;\n\t$t_admin = config_get_global( 'admin_site_threshold' );\n\n\tif( $p_project_id == ALL_PROJECTS ) {\n\t\t# Select all the projects that the user has access to\n\t\t$t_projects = user_get_accessible_projects( $t_user_id );\n\t} else {\n\t\t# Select the specific project\n\t\t$t_projects = array(\n\t\t\t$p_project_id,\n\t\t);\n\t}\n\n\t$t_projects[] = ALL_PROJECTS; # add ALL_PROJECTS to the list of projects to fetch\n\n\n\t$t_reqd_access = config_get( 'view_proj_doc_threshold' );\n\tif( is_array( $t_reqd_access ) ) {\n\t\tif( 1 == count( $t_reqd_access ) ) {\n\t\t\t$t_access_clause = \"= \" . array_shift( $t_reqd_access ) . \" \";\n\t\t} else {\n\t\t\t$t_access_clause = \"IN (\" . implode( ',', $t_reqd_access ) . \")\";\n\t\t}\n\t} else {\n\t\t$t_access_clause = \">= $t_reqd_access \";\n\t}\n\n\t$query = \"SELECT pft.id, pft.project_id, pft.filename, pft.file_type, pft.filesize, pft.title, pft.description, pft.date_added, pft.user_id\n\t\tFROM $t_project_file_table pft\n\t\tLEFT JOIN $t_project_table pt ON pft.project_id = pt.id\n\t\tLEFT JOIN $t_project_user_list_table pult\n\t\tON pft.project_id = pult.project_id AND pult.user_id = $t_user_id\n\t\tLEFT JOIN $t_user_table ut ON ut.id = $t_user_id\n\t\tWHERE pft.project_id in (\" . implode( ',', $t_projects ) . \") AND\n\t\t( ( ( pt.view_state = $t_pub OR pt.view_state is null ) AND pult.user_id is null AND ut.access_level $t_access_clause ) OR\n\t\t( ( pult.user_id = $t_user_id ) AND ( pult.access_level $t_access_clause ) ) OR\n\t\t( ut.access_level = $t_admin ) )\n\t\tORDER BY pt.name ASC, pft.title ASC\";\n\t$result = db_query( $query );\n\t$num_files = db_num_rows( $result );\n\n\t$t_result = array();\n\tfor( $i = 0;$i < $num_files;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\n\t\t$t_attachment = array();\n\t\t$t_attachment['id'] = $row['id'];\n\t\t$t_attachment['filename'] = $row['filename'];\n\t\t$t_attachment['title'] = $row['title'];\n\t\t$t_attachment['description'] = $row['description'];\n\t\t$t_attachment['size'] = $row['filesize'];\n\t\t$t_attachment['content_type'] = $row['file_type'];\n\t\t$t_attachment['date_submitted'] = SoapObjectsFactory::newDateTimeVar( $row['date_added'] );\n\t\t$t_attachment['download_url'] = mci_get_mantis_path() . 'file_download.php?file_id=' . $row['id'] . '&amp;type=doc';\n\t\t$t_attachment['user_id'] = $row['user_id'];\n\t\t$t_result[] = $t_attachment;\n\t}\n\n\treturn $t_result;\n}\n\nfunction mc_project_get_all_subprojects( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_access_denied();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\treturn user_get_all_accessible_subprojects( $t_user_id, $p_project_id );\n}\n\n/**\n * Get a project definition.\n *\n * @param integer $p_project_id  The id of the project to retrieve.\n * @return Array an Array containing the id and the name of the project.\n */\nfunction mci_project_as_array_by_id( $p_project_id ) {\n\t$t_result = array();\n\t$t_result['id'] = $p_project_id;\n\t$t_result['name'] = project_get_name( $p_project_id );\n\treturn $t_result;\n}\n\n/**\n * Get the id of a project via the project's name.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param string $p_project_name  The name of the project to retrieve.\n * @return integer  The id of the project with the given name, -1 if there is no such project.\n */\nfunction mc_project_get_id_from_name( $p_username, $p_password, $p_project_name ) {\n        $t_user_id = mci_check_login( $p_username, $p_password );\n        if( $t_user_id === false ) {\n                return mci_soap_fault_login_failed();\n        }\n        \n        return project_get_id_by_name ( $p_project_name );\n}\n\n\n### MantisConnect Administrative Webservices ###\n\n/**\n * Add a new project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param Array $p_project A new ProjectData structure\n * @return integer the new project's project_id\n */\nfunction mc_project_add( $p_username, $p_password, $p_project ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !mci_has_administrator_access( $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$p_project = SoapObjectsFactory::unwrapObject( $p_project );\n\t\n\n\tif ( !isset( $p_project['name'] ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Required field \"name\" is missing' );\n\t} else {\n\t\t$t_name = $p_project['name'];\n\t}\n\t\n\tif( isset( $p_project['status'] ) ) {\n\t\t$t_status = $p_project['status'];\n\t} else {\n\t\t$t_status = array( 'name' => 'development' ); // development\n\t}\n\t\n\tif( isset( $p_project['view_state'] ) ) {\n\t\t$t_view_state = $p_project['view_state'];\n\t} else {\n\t\t$t_view_state = array( 'id' => VS_PUBLIC );\n\t}\n\t\n\tif ( isset( $p_project['enabled'] ) ) {\n\t\t$t_enabled = $p_project['enabled'];\n\t} else {\n\t\t$t_enabled = true;\n\t}\n\t\n\tif ( isset( $p_project['description'] ) ) {\n\t\t$t_description = $p_project['description'];\n\t} else {\n\t\t$t_description = '';\n\t}\n\t\n\tif ( isset( $p_project['file_path'] ) ) {\t\n\t\t$t_file_path = $p_project['file_path'];\n\t} else { \n\t\t$t_file_path = '';\n\t}\n\t\n\tif ( isset( $p_project['inherit_global'] ) ) { \n\t\t$t_inherit_global = $p_project['inherit_global'];\n\t} else {\n\t\t$t_inherit_global = true;\n\t}\n\t\n\t// check to make sure project doesn't already exist\n\tif( !project_is_name_unique( $t_name ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Project name exists');\n\t}\n\n\t$t_project_status = mci_get_project_status_id( $t_status );\n\t$t_project_view_state = mci_get_project_view_state_id( $t_view_state );\n\n\t// project_create returns the new project's id, spit that out to webservice caller\n\treturn project_create( $t_name, $t_description, $t_project_status, $t_project_view_state, $t_file_path, $t_enabled, $t_inherit_global );\n}\n\n/**\n * Update a project\n *\n * @param string $p_username  The name of the user\n * @param string $p_password  The password of the user\n * @param integer $p_project_id A project's id\n * @param Array $p_project A new ProjectData structure\n * @return bool returns true or false depending on the success of the update action\n */\nfunction mc_project_update( $p_username, $p_password, $p_project_id, $p_project ) {\n    global $g_project_override;\n\n    $t_user_id = mci_check_login( $p_username, $p_password );\n    if( $t_user_id === false ) {\n        return mci_soap_fault_access_denied();\n    }\n\n    if( !mci_has_administrator_access( $t_user_id, $p_project_id ) ) {\n        return mci_soap_fault_access_denied( $t_user_id );\n    }\n\n    if( !project_exists( $p_project_id ) ) {\n        return SoapObjectsFactory::newSoapFault(\"Client\", \"Project '$p_project_id' does not exist.\" );\n    }\n\n    $g_project_override = $p_project_id;\n\n    $p_project = SoapObjectsFactory::unwrapObject( $p_project );\n\n    if ( !isset( $p_project['name'] ) ) {\n        return SoapObjectsFactory::newSoapFault( 'Client', 'Missing required field \\'name\\'.');\n    } else {\n        $t_name = $p_project['name'];\n    }\n\n    // check to make sure project doesn't already exist\n    if ( $t_name != project_get_name( $p_project_id ) ) {\n        if( !project_is_name_unique( $t_name ) ) {\n            return SoapObjectsFactory::newSoapFault('Client', 'Project name exists');\n        }\n    }\n\n    if ( !isset( $p_project['description'] ) ) {\n        $t_description = project_get_field( $p_project_id, 'description' );\n    } else {\n        $t_description = $p_project['description'];\n    }\n\n    if ( !isset( $p_project['status'] ) ) {\n        $t_status = project_get_field( $p_project_id, 'status' );\n    } else {\n        $t_status = $p_project['status'];\n    }\n\n    if ( !isset( $p_project['view_state'] ) ) {\n        $t_view_state = project_get_field( $p_project_id, 'view_state' );\n    } else {\n        $t_view_state = $p_project['view_state'];\n    }\n\n    if ( !isset( $p_project['file_path'] ) ) {\n        $t_file_path = project_get_field( $p_project_id, 'file_path' );\n    } else {\n        $t_file_path = $p_project['file_path'];\n    }\n\n    if ( !isset( $p_project['enabled'] ) ) {\n        $t_enabled = project_get_field( $p_project_id, 'enabled' );\n    } else {\n        $t_enabled = $p_project['enabled'];\n    }\n\n    if ( !isset( $p_project['inherit_global'] ) ) {\n        $t_inherit_global = project_get_field( $p_project_id, 'inherit_global' );\n    } else {\n        $t_inherit_global = $p_project['inherit_global'];\n    }\n\n    $t_project_status = mci_get_project_status_id( $t_status );\n    $t_project_view_state = mci_get_project_view_state_id( $t_view_state );\n\n    return project_update( $p_project_id, $t_name, $t_description, $t_project_status, $t_project_view_state, $t_file_path, $t_enabled, $t_inherit_global );\n}\n\n/**\n * Delete a project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id A project's id\n * @return bool returns true or false depending on the success of the delete action\n */\nfunction mc_project_delete( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_administrator_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\treturn project_delete( $p_project_id );\n}\n\nfunction mc_project_get_issue_headers( $p_username, $p_password, $p_project_id, $p_page_number, $p_per_page ) {\n    global $g_project_override;\n\n    $t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\tif( $p_project_id != ALL_PROJECTS && !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\t$g_project_override = $p_project_id;;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$t_orig_page_number = $p_page_number < 1 ? 1 : $p_page_number;\n\t$t_page_count = 0;\n\t$t_bug_count = 0;\n\n\t$t_rows = filter_get_bug_rows( $p_page_number, $p_per_page, $t_page_count, $t_bug_count, null, $p_project_id );\n\t$t_result = array();\n\t\n\t// the page number was moved back, so we have exceeded the actual page number, see bug #12991\n\tif ( $t_orig_page_number > $p_page_number )\n\t    return $t_result;\n\n\tforeach( $t_rows as $t_issue_data ) {\n\t\t$t_result[] = mci_issue_data_as_header_array( $t_issue_data);\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get appropriate users assigned to a project by access level.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the users for.\n * @param integer $p_access Minimum access level.\n * @return Array  representing a ProjectAttachmentDataArray structure.\n */\nfunction mc_project_get_users( $p_username, $p_password, $p_project_id, $p_access ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_users = array();\n\n\t$g_project_override = $p_project_id;\n\n\t$t_users = project_get_all_user_rows( $p_project_id, $p_access ); # handles ALL_PROJECTS case\n\n\t$t_display = array();\n\t$t_sort = array();\n\t$t_show_realname = ( ON == config_get( 'show_realname' ) );\n\t$t_sort_by_last_name = ( ON == config_get( 'sort_by_last_name' ) );\n\tforeach( $t_users as $t_user ) {\n\t\t$t_user_name = string_attribute( $t_user['username'] );\n\t\t$t_sort_name = strtolower( $t_user_name );\n\t\tif( $t_show_realname && ( $t_user['realname'] <> \"\" ) ) {\n\t\t\t$t_user_name = string_attribute( $t_user['realname'] );\n\t\t\tif( $t_sort_by_last_name ) {\n\t\t\t\t$t_sort_name_bits = explode( ' ', strtolower( $t_user_name ), 2 );\n\t\t\t\t$t_sort_name = ( isset( $t_sort_name_bits[1] ) ? $t_sort_name_bits[1] . ', ' : '' ) . $t_sort_name_bits[0];\n\t\t\t} else {\n\t\t\t\t$t_sort_name = strtolower( $t_user_name );\n\t\t\t}\n\t\t}\n\t\t$t_display[] = $t_user_name;\n\t\t$t_sort[] = $t_sort_name;\n\t}\n\tarray_multisort( $t_sort, SORT_ASC, SORT_STRING, $t_users, $t_display );\n\n\t$t_result = array();\n\tfor( $i = 0;$i < count( $t_sort );$i++ ) {\n\t\t$t_row = $t_users[$i];\n\n\t\t// This is not very performant - But we have to assure that the data returned is exactly\n\t\t// the same as the data that comes with an issue (test for equality - $t_row[] does not\n\t\t// contain email fields).\n\t\t$t_result[] = mci_account_get_array_by_id( $t_row['id'] );\n\t}\n\treturn $t_result;\n}\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * News API\n * @package CoreAPI\n * @subpackage NewsAPI\n * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n\n/**\n * requires current_user_api\n */\nrequire_once( 'current_user_api.php' );\n/**\n * requires twitter_api\n */\nrequire_once( 'twitter_api.php' );\n\n# --------------------\n# Add a news item\nfunction news_create( $p_project_id, $p_poster_id, $p_view_state, $p_announcement, $p_headline, $p_body ) {\n\t$c_project_id = db_prepare_int( $p_project_id );\n\t$c_poster_id = db_prepare_int( $p_poster_id );\n\t$c_view_state = db_prepare_int( $p_view_state );\n\t$c_announcement = db_prepare_bool( $p_announcement );\n\n\tif( is_blank( $p_headline ) ) {\n\t\terror_parameters( lang_get( 'headline' ) );\n\t\ttrigger_error( ERROR_EMPTY_FIELD, ERROR );\n\t}\n\n\tif( is_blank( $p_body ) ) {\n\t\terror_parameters( lang_get( 'body' ) );\n\t\ttrigger_error( ERROR_EMPTY_FIELD, ERROR );\n\t}\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t# Add item\n\n\t$query = \"INSERT\n\t\t\t\tINTO $t_news_table\n\t    \t\t  ( project_id, poster_id, date_posted, last_modified,\n\t    \t\t    view_state, announcement, headline, body )\n\t\t\t\tVALUES\n\t\t\t\t    ( \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \"\n\t\t\t\t\t)\";\n\tdb_query_bound( $query, Array( $c_project_id, $c_poster_id, db_now(), db_now(), $c_view_state, $c_announcement, $p_headline, $p_body ) );\n\n\t$t_news_id = db_insert_id( $t_news_table );\n\n\ttwitter_news( $t_news_id );\n\n\treturn $t_news_id;\n}\n\n# --------------------\n# Delete the news entry\nfunction news_delete( $p_news_id ) {\n\t$c_news_id = db_prepare_int( $p_news_id );\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t$query = \"DELETE FROM $t_news_table\n\t    \t\t  WHERE id=\" . db_param();\n\n\tdb_query_bound( $query, Array( $c_news_id ) );\n\n\t# db_query errors on failure so:\n\treturn true;\n}\n\n# --------------------\n# Delete the news entry\nfunction news_delete_all( $p_project_id ) {\n\t$c_project_id = db_prepare_int( $p_project_id );\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t$query = \"DELETE FROM $t_news_table\n\t    \t\t  WHERE project_id=\" . db_param();\n\n\tdb_query_bound( $query, Array( $c_project_id ) );\n\n\t# db_query errors on failure so:\n\treturn true;\n}\n\n# --------------------\n# Update news item\nfunction news_update( $p_news_id, $p_project_id, $p_view_state, $p_announcement, $p_headline, $p_body ) {\n\t$c_news_id = db_prepare_int( $p_news_id );\n\t$c_project_id = db_prepare_int( $p_project_id );\n\t$c_view_state = db_prepare_int( $p_view_state );\n\t$c_announcement = db_prepare_bool( $p_announcement );\n\n\tif( is_blank( $p_headline ) ) {\n\t\terror_parameters( lang_get( 'headline' ) );\n\t\ttrigger_error( ERROR_EMPTY_FIELD, ERROR );\n\t}\n\n\tif( is_blank( $p_body ) ) {\n\t\terror_parameters( lang_get( 'body' ) );\n\t\ttrigger_error( ERROR_EMPTY_FIELD, ERROR );\n\t}\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t# Update entry\n\t$query = \"UPDATE $t_news_table\n\t\t\t\t  SET view_state=\" . db_param() . \",\n\t\t\t\t\tannouncement=\" . db_param() . \",\n\t\t\t\t\theadline=\" . db_param() . \",\n\t\t\t\t\tbody=\" . db_param() . \",\n\t\t\t\t\tproject_id=\" . db_param() . \",\n\t\t\t\t\tlast_modified= \" . db_param() . \"\n\t\t\t\t  WHERE id=\" . db_param();\n\n\tdb_query_bound( $query, Array( $c_view_state, $c_announcement, $p_headline, $p_body, $c_project_id, db_now(), $c_news_id ) );\n\n\t# db_query errors on failure so:\n\treturn true;\n}\n\n# --------------------\n# Selects the news item associated with the specified id\nfunction news_get_row( $p_news_id ) {\n\t$c_news_id = db_prepare_int( $p_news_id );\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t$query = \"SELECT *\n\t\t\t\t  FROM $t_news_table\n\t\t\t\t  WHERE id=\" . db_param();\n\t$result = db_query_bound( $query, Array( $c_news_id ) );\n\n\tif( 0 == db_num_rows( $result ) ) {\n\t\ttrigger_error( ERROR_NEWS_NOT_FOUND, ERROR );\n\t} else {\n\t\t$row = db_fetch_array( $result );\n\t\treturn $row;\n\t}\n}\n\n# --------------------\n# get news count (selected project plus sitewide posts)\nfunction news_get_count( $p_project_id, $p_sitewide = true ) {\n\t$c_project_id = db_prepare_int( $p_project_id );\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\t$t_project_where = helper_project_specific_where( $p_project_id );\n\n\t$query = \"SELECT COUNT(*)\n\t\t\t\t  FROM $t_news_table\n\t\t\t\t  WHERE $t_project_where\";\n\n\tif( $p_sitewide ) {\n\t\t$query .= ' OR project_id=' . ALL_PROJECTS;\n\t}\n\n\t$result = db_query_bound( $query );\n\n\treturn db_result( $result, 0, 0 );\n}\n\n# --------------------\n# get news items (selected project plus sitewide posts)\nfunction news_get_rows( $p_project_id, $p_sitewide = true ) {\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t$t_projects = current_user_get_all_accessible_subprojects( $p_project_id );\n\t$t_projects[] = (int)$p_project_id;\n\n\tif( $p_sitewide && ALL_PROJECTS != $p_project_id ) {\n\t\t$t_projects[] = ALL_PROJECTS;\n\t}\n\n\t$query = \"SELECT *\n\t\t\t\t  FROM $t_news_table\";\n\n\tif( 1 == count( $t_projects ) ) {\n\t\t$c_project_id = $t_projects[0];\n\t\t$query .= \" WHERE project_id='$c_project_id'\";\n\t} else {\n\t\t$query .= ' WHERE project_id IN (' . join( $t_projects, ',' ) . ')';\n\t}\n\n\t$query .= \" ORDER BY date_posted DESC\";\n\n\t$result = db_query( $query );\n\n\t$t_rows = array();\n\t$t_row_count = db_num_rows( $result );\n\n\tfor( $i = 0;$i < $t_row_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\tarray_push( $t_rows, $row );\n\t}\n\n\treturn $t_rows;\n}\n\n# --------------------\n# Check if the specified news item is private\nfunction news_get_field( $p_news_id, $p_field_name ) {\n\t$row = news_get_row( $p_news_id );\n\treturn( $row[$p_field_name] );\n}\n\n# --------------------\n# Check if the specified news item is private\nfunction news_is_private( $p_news_id ) {\n\treturn( news_get_field( $p_news_id, 'view_state' ) == VS_PRIVATE );\n}\n\n# --------------------\n# Gets a limited set of news rows to be viewed on one page based on the criteria\n# defined in the configuration file.\nfunction news_get_limited_rows( $p_offset, $p_project_id = null ) {\n\tif( $p_project_id === null ) {\n\t\t$p_project_id = helper_get_current_project();\n\t}\n\n\t$c_offset = db_prepare_int( $p_offset );\n\n\t$t_projects = current_user_get_all_accessible_subprojects( $p_project_id );\n\t$t_projects[] = (int)$p_project_id;\n\tif( ALL_PROJECTS != $p_project_id ) {\n\t\t$t_projects[] = ALL_PROJECTS;\n\t}\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\t$t_news_view_limit = config_get( 'news_view_limit' );\n\t$t_news_view_limit_days = config_get( 'news_view_limit_days' ) * SECONDS_PER_DAY;\n\n\tswitch( config_get( 'news_limit_method' ) ) {\n\t\tcase 0:\n\n\t\t\t# BY_LIMIT - Select the news posts\n\t\t\t$query = \"SELECT *\n\t\t\t\t\t\tFROM $t_news_table\";\n\n\t\t\tif( 1 == count( $t_projects ) ) {\n\t\t\t\t$c_project_id = $t_projects[0];\n\t\t\t\t$query .= \" WHERE project_id='$c_project_id'\";\n\t\t\t} else {\n\t\t\t\t$query .= ' WHERE project_id IN (' . join( $t_projects, ',' ) . ')';\n\t\t\t}\n\n\t\t\t$query .= ' ORDER BY announcement DESC, id DESC';\n\t\t\t$result = db_query( $query, $t_news_view_limit, $c_offset );\n\t\t\tbreak;\n\t\tcase 1:\n\n\t\t\t# BY_DATE - Select the news posts\n\t\t\t$query = \"SELECT *\n\t\t\t\t\t\tFROM $t_news_table WHERE\n\t\t\t\t\t\t( \" . db_helper_compare_days( 0, 'date_posted', \"< $t_news_view_limit_days\" ) . \"\n\t\t\t\t\t\t OR announcement = \" . db_param() . \" ) \";\n\t\t\t$t_params = Array(\n\t\t\t\tdb_now(),\n\t\t\t\t1,\n\t\t\t);\n\t\t\tif( 1 == count( $t_projects ) ) {\n\t\t\t\t$c_project_id = $t_projects[0];\n\t\t\t\t$query .= \" AND project_id=\" . db_param();\n\t\t\t\t$t_params[] = $c_project_id;\n\t\t\t} else {\n\t\t\t\t$query .= ' AND project_id IN (' . join( $t_projects, ',' ) . ')';\n\t\t\t}\n\t\t\t$query .= \" ORDER BY announcement DESC, id DESC\";\n\t\t\t$result = db_query_bound( $query, $t_params, $t_news_view_limit, $c_offset );\n\t\t\tbreak;\n\t}\n\n\t# end switch\n\n\t$t_row_count = db_num_rows( $result );\n\n\t$t_rows = array();\n\tfor( $i = 0;$i < $t_row_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\tarray_push( $t_rows, $row );\n\t}\n\n\treturn $t_rows;\n}\n\n# --------------------\n# Checks if the news feature is enabled or not.\n# true: enabled, otherwise false.\nfunction news_is_enabled() {\n\treturn config_get( 'news_enabled' ) == ON;\n}\n\n# --------------------\n# Ensures that the news feature is enabled, otherwise generates an access denied error.\nfunction news_ensure_enabled() {\n\tif ( !news_is_enabled() ) {\n\t\taccess_denied();\n\t}\n}", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @package CoreAPI\n * @subpackage SummaryAPI\n * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n\n/**\n * requires config_filter_defaults_include\n */\nrequire_once( $g_absolute_path . 'config_filter_defaults_inc.php' );\n\nfunction summary_helper_print_row( $p_label, $p_open, $p_resolved, $p_closed, $p_total ) {\n\tprintf( '<tr %s>', helper_alternate_class() );\n\tprintf( '<td width=\"50%%\">%s</td>', $p_label );\n\tprintf( '<td width=\"12%%\" class=\"right\">%s</td>', $p_open );\n\tprintf( '<td width=\"12%%\" class=\"right\">%s</td>', $p_resolved );\n\tprintf( '<td width=\"12%%\" class=\"right\">%s</td>', $p_closed );\n\tprintf( '<td width=\"12%%\" class=\"right\">%s</td>', $p_total );\n\tprint( '</tr>' );\n}\n\n/**\n * Returns a string representation of the user, together with a link to the issues\n * acted on by the user ( reported, handled or commented on )\n *\n * @param int $p_user_id\n * @return string\n */\nfunction summary_helper_get_developer_label ( $p_user_id ) {\n\n\t$t_user = string_display_line( user_get_name( $p_user_id ) );\n\n\treturn \"<a class='subtle' href='view_all_set.php?type=1&amp;temporary=y\n\t\t\t&amp;\".FILTER_PROPERTY_REPORTER_ID.\"=$p_user_id\n\t\t\t&amp;\".FILTER_PROPERTY_HANDLER_ID.\"=$p_user_id\n\t\t\t&amp;\".FILTER_PROPERTY_NOTE_USER_ID.\"=$p_user_id\n\t\t\t&amp;\".FILTER_PROPERTY_MATCH_TYPE.\"=\".FILTER_MATCH_ANY.\"'>$t_user</a>\";\n\n}\n\n# Used in summary reports\n# this function prints out the summary for the given enum setting\n# The enum field name is passed in through $p_enum\nfunction summary_print_by_enum( $p_enum ) {\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$t_project_filter = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $t_project_filter ) {\n\t\treturn;\n\t}\n\n\t$t_filter_prefix = config_get( 'bug_count_hyperlink_prefix' );\n\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_status_query = ( 'status' == $p_enum ) ? '' : ' ,status ';\n\t$query = \"SELECT COUNT(id) as bugcount, $p_enum $t_status_query\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $t_project_filter\n\t\t\t\tGROUP BY $p_enum $t_status_query\n\t\t\t\tORDER BY $p_enum $t_status_query\";\n\t$result = db_query( $query );\n\n\t$t_last_value = -1;\n\t$t_bugs_open = 0;\n\t$t_bugs_resolved = 0;\n\t$t_bugs_closed = 0;\n\t$t_bugs_total = 0;\n\n\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\twhile( $row = db_fetch_array( $result ) ) {\n\t\tif(( $row[$p_enum] != $t_last_value ) && ( -1 != $t_last_value ) ) {\n\n\t\t\t# Build up the hyperlinks to bug views\n\t\t\t$t_bug_link = '';\n\t\t\tswitch( $p_enum ) {\n\t\t\t\tcase 'status':\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_last_value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'severity':\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_SEVERITY_ID . '=' . $t_last_value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'resolution':\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_RESOLUTION_ID . '=' . $t_last_value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'priority':\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_PRIORITY_ID . '=' . $t_last_value;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif( !is_blank( $t_bug_link ) ) {\n\t\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\tif(( 'status' == $p_enum ) && ( $t_last_value >= $t_resolved_val ) ) {\n\t\t\t\t\t\t$t_bugs_open = '-';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\tif(( 'status' == $p_enum ) && (( $t_last_value < $t_resolved_val ) || ( $t_last_value >= $t_closed_val ) ) ) {\n\t\t\t\t\t\t$t_bugs_resolved = '-';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\tif(( 'status' == $p_enum ) && ( $t_last_value < $t_closed_val ) ) {\n\t\t\t\t\t\t$t_bugs_closed = '-';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsummary_helper_print_row( get_enum_element( $p_enum, $t_last_value ), $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\n\t\t\t$t_bugs_open = 0;\n\t\t\t$t_bugs_resolved = 0;\n\t\t\t$t_bugs_closed = 0;\n\t\t\t$t_bugs_total = 0;\n\t\t}\n\n\t\t$t_bugs_total += $row['bugcount'];\n\t\tif( $t_closed_val <= $row['status'] ) {\n\t\t\t$t_bugs_closed += $row['bugcount'];\n\t\t}\n\t\telse if( $t_resolved_val <= $row['status'] ) {\n\t\t\t$t_bugs_resolved += $row['bugcount'];\n\t\t} else {\n\t\t\t$t_bugs_open += $row['bugcount'];\n\t\t}\n\t\t$t_last_value = $row[$p_enum];\n\t}\n\n\tif( 0 < $t_bugs_total ) {\n\t\t# Build up the hyperlinks to bug views\n\t\t$t_bug_link = '';\n\t\tswitch( $p_enum ) {\n\t\t\tcase 'status':\n\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_last_value;\n\t\t\t\tbreak;\n\t\t\tcase 'severity':\n\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_SEVERITY_ID . '=' . $t_last_value;\n\t\t\t\tbreak;\n\t\t\tcase 'resolution':\n\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_RESOLUTION_ID . '=' . $t_last_value;\n\t\t\t\tbreak;\n\t\t\tcase 'priority':\n\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_PRIORITY_ID . '=' . $t_last_value;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif( !is_blank( $t_bug_link ) ) {\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t} else {\n\t\t\t\tif(( 'status' == $p_enum ) && ( $t_last_value >= $t_resolved_val ) ) {\n\t\t\t\t\t$t_bugs_open = '-';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t} else {\n\t\t\t\tif(( 'status' == $p_enum ) && (( $t_last_value < $t_resolved_val ) || ( $t_last_value >= $t_closed_val ) ) ) {\n\t\t\t\t\t$t_bugs_resolved = '-';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t} else {\n\t\t\t\tif(( 'status' == $p_enum ) && ( $t_last_value < $t_closed_val ) ) {\n\t\t\t\t\t$t_bugs_closed = '-';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\t\t}\n\n\t\tsummary_helper_print_row( get_enum_element( $p_enum, $t_last_value ), $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\t}\n}\n\n# prints the bugs submitted in the last X days (default is 1 day) for the\n# current project\nfunction summary_new_bug_count_by_date( $p_time_length = 1 ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\n\t$c_time_length = (int) $p_time_length * SECONDS_PER_DAY;\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$query = \"SELECT COUNT(*)\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE \" . db_helper_compare_days( \"\" . db_now() . \"\", \"date_submitted\", \"<= $c_time_length\" ) . \" AND $specific_where\";\n\t$result = db_query_bound( $query );\n\treturn db_result( $result, 0 );\n}\n\n# returns the number of bugs resolved in the last X days (default is 1 day) for the\n# current project\nfunction summary_resolved_bug_count_by_date( $p_time_length = 1 ) {\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_bug_history_table = db_get_table( 'mantis_bug_history_table' );\n\t$t_resolved = config_get( 'bug_resolved_status_threshold' );\n\n\t$c_time_length = (int) $p_time_length * SECONDS_PER_DAY;\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$query = \"SELECT COUNT(DISTINCT(b.id))\n\t\t\t\tFROM $t_bug_table b\n\t\t\t\tLEFT JOIN $t_bug_history_table h\n\t\t\t\tON b.id = h.bug_id\n\t\t\t\tAND h.type = \" . NORMAL_TYPE . \"\n\t\t\t\tAND h.field_name = 'status'\n\t\t\t\tWHERE b.status >= \" . db_param() . \"\n\t\t\t\tAND h.old_value < \" . db_param() . \"\n\t\t\t\tAND h.new_value >= \" . db_param() . \"\n\t\t\t\tAND \" . db_helper_compare_days( \"\" . db_now() . \"\", \"date_modified\", \"<= $c_time_length\" ) . \"\n\t\t\t\tAND $specific_where\";\n\t$result = db_query_bound( $query, Array( $t_resolved, $t_resolved, $t_resolved ) );\n\treturn db_result( $result, 0 );\n}\n\n# This function shows the number of bugs submitted in the last X days\n# An array of integers representing days is passed in\nfunction summary_print_by_date( $p_date_array ) {\n\t$arr_count = count( $p_date_array );\n\tforeach( $p_date_array as $t_days ) {\n\t\t$t_new_count = summary_new_bug_count_by_date( $t_days );\n\t\t$t_resolved_count = summary_resolved_bug_count_by_date( $t_days );\n\n\t\t$t_start_date = mktime( 0, 0, 0, date( 'm' ), ( date( 'd' ) - $t_days ), date( 'Y' ) );\n\t\t$t_new_bugs_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_FILTER_BY_DATE . '=on&amp;' . FILTER_PROPERTY_START_YEAR . '=' . date( 'Y', $t_start_date ) . '&amp;' . FILTER_PROPERTY_START_MONTH . '=' . date( 'm', $t_start_date ) . '&amp;' . FILTER_PROPERTY_START_DAY . '=' . date( 'd', $t_start_date ) . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">';\n\n\t\tprint( \"<tr \" . helper_alternate_class() . \">\\n\" );\n\t\tprint( \"    <td width=\\\"50%\\\">\" . $t_days . \"</td>\\n\" );\n\n\t\tif( $t_new_count > 0 ) {\n\t\t\tprint( \"    <td class=\\\"right\\\">$t_new_bugs_link$t_new_count</a></td>\\n\" );\n\t\t} else {\n\t\t\tprint( \"    <td class=\\\"right\\\">$t_new_count</td>\\n\" );\n\t\t}\n\t\tprint( \"    <td class=\\\"right\\\">$t_resolved_count</td>\\n\" );\n\n\t\t$t_balance = $t_new_count - $t_resolved_count;\n\t\t$t_style = '';\n\t\tif( $t_balance > 0 ) {\n\n\t\t\t# we are talking about bugs: a balance > 0 is \"negative\" for the project...\n\t\t\t$t_style = \" negative\";\n\t\t\t$t_balance = sprintf( '%+d', $t_balance );\n\n\t\t\t# \"+\" modifier added in PHP >= 4.3.0\n\t\t}\n\t\telse if( $t_balance < 0 ) {\n\t\t\t$t_style = ' positive';\n\t\t\t$t_balance = sprintf( '%+d', $t_balance );\n\t\t}\n\n\t\tprint( \"\\n<td class=\\\"right$t_style\\\">$t_balance</td>\\n\" );\n\t\tprint( \"</tr>\\n\" );\n\t}\n\n\t# end foreach\n}\n\n# Print list of open bugs with the highest activity score\n# the score is calculated assigning one \"point\" for each history event\n# associated with the bug\nfunction summary_print_by_activity() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_history_table = db_get_table( 'mantis_bug_history_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\t$t_resolved = config_get( 'bug_resolved_status_threshold' );\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\t$query = \"SELECT COUNT(h.id) as count, b.id, b.summary, b.view_state\n\t\t\t\tFROM $t_mantis_bug_table AS b, $t_mantis_history_table AS h\n\t\t\t\tWHERE h.bug_id = b.id\n\t\t\t\tAND b.status < \" . db_param() . \"\n\t\t\t\tAND $specific_where\n\t\t\t\tGROUP BY h.bug_id, b.id, b.summary, b.last_updated, b.view_state\n\t\t\t\tORDER BY count DESC, b.last_updated DESC\";\n\t$result = db_query_bound( $query, Array( $t_resolved ) );\n\n\t$t_count = 0;\n\t$t_private_bug_threshold = config_get( 'private_bug_threshold' );\n\t$t_summarydata = Array();\n\t$t_summarybugs = Array();\n\twhile( $row = db_fetch_array( $result ) ) {\n\n\t\t// Skip private bugs unless user has proper permissions\n\t\tif(( VS_PRIVATE == $row['view_state'] ) && ( false == access_has_bug_level( $t_private_bug_threshold, $row['id'] ) ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( $t_count++ == 10 ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t$t_summarydata[] = array(\n\t\t\t'id' => $row['id'],\n\t\t\t'summary' => $row['summary'],\n\t\t\t'count' => $row['count'],\n\t\t);\n\t\t$t_summarybugs[] = $row['id'];\n\t}\n\n\tbug_cache_array_rows( $t_summarybugs );\n\n\tforeach( $t_summarydata as $row ) {\n\t\t$t_bugid = string_get_bug_view_link( $row['id'] );\n\t\t$t_summary = string_display_line( $row['summary'] );\n\t\t$t_notescount = $row['count'];\n\n\t\tprint \"<tr \" . helper_alternate_class() . \">\\n\";\n\t\tprint \"<td class=\\\"small\\\">$t_bugid - $t_summary</td><td class=\\\"right\\\">$t_notescount</td>\\n\";\n\t\tprint \"</tr>\\n\";\n\t}\n}\n\n# Print list of bugs opened from the longest time\nfunction summary_print_by_age() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\t$t_resolved = config_get( 'bug_resolved_status_threshold' );\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\t$query = \"SELECT * FROM $t_mantis_bug_table\n\t\t\t\tWHERE status < $t_resolved\n\t\t\t\tAND $specific_where\n\t\t\t\tORDER BY date_submitted ASC, priority DESC\";\n\t$result = db_query( $query );\n\n\t$t_count = 0;\n\t$t_private_bug_threshold = config_get( 'private_bug_threshold' );\n\twhile( $row = db_fetch_array( $result ) ) {\n\n\t\t// as we select all from bug_table, inject into the cache.\n\t\tbug_cache_database_result( $row );\n\n\t\t// Skip private bugs unless user has proper permissions\n\t\tif(( VS_PRIVATE == bug_get_field( $row['id'], 'view_state' ) ) && ( false == access_has_bug_level( $t_private_bug_threshold, $row['id'] ) ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( $t_count++ == 10 ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t$t_bugid = string_get_bug_view_link( $row['id'] );\n\t\t$t_summary = string_display_line( $row['summary'] );\n\t\t$t_days_open = intval(( time() - $row['date_submitted'] ) / SECONDS_PER_DAY );\n\n\t\tprint \"<tr \" . helper_alternate_class() . \">\\n\";\n\t\tprint \"<td class=\\\"small\\\">$t_bugid - $t_summary</td><td class=\\\"right\\\">$t_days_open</td>\\n\";\n\t\tprint \"</tr>\\n\";\n\t}\n}\n\n# print bug counts by assigned to each developer\nfunction summary_print_by_developer() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$query = \"SELECT COUNT(id) as bugcount, handler_id, status\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE handler_id>0 AND $specific_where\n\t\t\t\tGROUP BY handler_id, status\n\t\t\t\tORDER BY handler_id, status\";\n\t$result = db_query( $query );\n\n\t$t_last_handler = -1;\n\t$t_bugs_open = 0;\n\t$t_bugs_resolved = 0;\n\t$t_bugs_closed = 0;\n\t$t_bugs_total = 0;\n\n\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\t$t_summaryusers = array();\n\t$t_summarydata = array();\n\twhile( $row = db_fetch_array( $result ) ) {\n\t\t$t_summarydata[] = $row;\n\t\t$t_summaryusers[] = $row['handler_id'];\n\t}\n\n\tuser_cache_array_rows( array_unique( $t_summaryusers ) );\n\n\tforeach( $t_summarydata as $row ) {\n\t\t$v_handler_id = $row['handler_id'];\n\t\t$v_bugcount = $row['bugcount'];\n\n\t\tif(( $v_handler_id != $t_last_handler ) && ( -1 != $t_last_handler ) ) {\n\t\t\t$t_user = summary_helper_get_developer_label( $t_last_handler );\n\n\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_HANDLER_ID . '=' . $t_last_handler;\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\n\t\t\tsummary_helper_print_row( $t_user, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\n\t\t\t$t_bugs_open = 0;\n\t\t\t$t_bugs_resolved = 0;\n\t\t\t$t_bugs_closed = 0;\n\t\t\t$t_bugs_total = 0;\n\t\t}\n\n\t\t$t_bugs_total += $v_bugcount;\n\t\tif( $t_closed_val <= $row['status'] ) {\n\t\t\t$t_bugs_closed += $v_bugcount;\n\t\t}\n\t\telse if( $t_resolved_val <= $row['status'] ) {\n\t\t\t$t_bugs_resolved += $v_bugcount;\n\t\t} else {\n\t\t\t$t_bugs_open += $v_bugcount;\n\t\t}\n\t\t$t_last_handler = $v_handler_id;\n\t}\n\n\tif( 0 < $t_bugs_total ) {\n\t\t$t_user = summary_helper_get_developer_label( $t_last_handler );\n\n\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_HANDLER_ID . '=' . $t_last_handler;\n\t\tif( 0 < $t_bugs_open ) {\n\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t}\n\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t}\n\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t}\n\t\tif( 0 < $t_bugs_total ) {\n\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t}\n\n\t\tsummary_helper_print_row( $t_user, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\t}\n}\n\n# print bug counts by reporter id\nfunction summary_print_by_reporter() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\t$t_reporter_summary_limit = config_get( 'reporter_summary_limit' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$query = \"SELECT reporter_id, COUNT(*) as num\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tGROUP BY reporter_id\n\t\t\t\tORDER BY num DESC\";\n\t$result = db_query( $query, $t_reporter_summary_limit );\n\n\t$t_reporters = array();\n\twhile( $row = db_fetch_array( $result ) ) {\n\t\t$t_reporters[] = $row['reporter_id'];\n\t}\n\n\tuser_cache_array_rows( $t_reporters );\n\n\tforeach( $t_reporters as $t_reporter ) {\n\t\t$v_reporter_id = $t_reporter;\n\t\t$query = \"SELECT COUNT(id) as bugcount, status FROM $t_mantis_bug_table\n\t\t\t\t\tWHERE reporter_id=$v_reporter_id\n\t\t\t\t\tAND $specific_where\n\t\t\t\t\tGROUP BY status\n\t\t\t\t\tORDER BY status\";\n\t\t$result2 = db_query( $query );\n\n\t\t$last_reporter = -1;\n\t\t$t_bugs_open = 0;\n\t\t$t_bugs_resolved = 0;\n\t\t$t_bugs_closed = 0;\n\t\t$t_bugs_total = 0;\n\n\t\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\t\twhile( $row2 = db_fetch_array( $result2 ) ) {\n\t\t\t$t_bugs_total += $row2['bugcount'];\n\t\t\tif( $t_closed_val <= $row2['status'] ) {\n\t\t\t\t$t_bugs_closed += $row2['bugcount'];\n\t\t\t}\n\t\t\telse if( $t_resolved_val <= $row2['status'] ) {\n\t\t\t\t$t_bugs_resolved += $row2['bugcount'];\n\t\t\t} else {\n\t\t\t\t$t_bugs_open += $row2['bugcount'];\n\t\t\t}\n\t\t}\n\n\t\tif( 0 < $t_bugs_total ) {\n\t\t\t$t_user = string_display_line( user_get_name( $v_reporter_id ) );\n\n\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_REPORTER_ID . '=' . $v_reporter_id;\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\n\t\t\tsummary_helper_print_row( $t_user, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\t\t}\n\t}\n}\n\n# print a bug count per category\nfunction summary_print_by_category() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_category_table = db_get_table( 'mantis_category_table' );\n\t$t_mantis_project_table = db_get_table( 'mantis_project_table' );\n\t$t_summary_category_include_project = config_get( 'summary_category_include_project' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = trim( helper_project_specific_where( $t_project_id ) );\n\tif( '1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\t$t_project_query = ( ON == $t_summary_category_include_project ) ? 'b.project_id, ' : '';\n\n\t$query = \"SELECT COUNT(b.id) as bugcount, $t_project_query c.name AS category_name, category_id, b.status\n\t\t\t\tFROM $t_mantis_bug_table b\n\t\t\t\tJOIN $t_mantis_category_table AS c ON b.category_id=c.id\n\t\t\t\tWHERE b.$specific_where\n\t\t\t\tGROUP BY $t_project_query c.name, b.category_id, b.status\n\t\t\t\tORDER BY $t_project_query c.name\";\n\n\t$result = db_query( $query );\n\n\t$last_category_name = -1;\n\t$last_category_id = -1;\n\t$last_project = -1;\n\t$t_bugs_open = 0;\n\t$t_bugs_resolved = 0;\n\t$t_bugs_closed = 0;\n\t$t_bugs_total = 0;\n\n\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\twhile( $row = db_fetch_array( $result ) ) {\n\t\t$v_category_id = $row['category_id'];\n\t\t$v_category_name = $row['category_name'];\n\n\t\tif(( $v_category_name != $last_category_name ) && ( $last_category_name != -1 ) ) {\n\t\t\t$label = string_display_line( $last_category_name );\n\t\t\tif(( ON == $t_summary_category_include_project ) && ( ALL_PROJECTS == $t_project_id ) ) {\n\t\t\t\t$label = sprintf( '[%s] %s', string_display_line( project_get_name( $last_project ) ), $label );\n\t\t\t}\n\n\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_CATEGORY . '=' . urlencode( $last_category_name );\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\n\t\t\tsummary_helper_print_row( $label, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\n\t\t\t$t_bugs_open = 0;\n\t\t\t$t_bugs_resolved = 0;\n\t\t\t$t_bugs_closed = 0;\n\t\t\t$t_bugs_total = 0;\n\t\t}\n\n\t\t$t_bugs_total += $row['bugcount'];\n\t\tif( $t_closed_val <= $row['status'] ) {\n\t\t\t$t_bugs_closed += $row['bugcount'];\n\t\t}\n\t\telse if( $t_resolved_val <= $row['status'] ) {\n\t\t\t$t_bugs_resolved += $row['bugcount'];\n\t\t} else {\n\t\t\t$t_bugs_open += $row['bugcount'];\n\t\t}\n\n\t\t$last_category_id = $v_category_id;\n\t\t$last_category_name = $v_category_name;\n\t\tif(( ON == $t_summary_category_include_project ) && ( ALL_PROJECTS == $t_project_id ) ) {\n\t\t\t$last_project = $row['project_id'];\n\t\t}\n\t}\n\n\tif( 0 < $t_bugs_total ) {\n\t\t$label = string_display_line( $last_category_name );\n\t\tif(( ON == $t_summary_category_include_project ) && ( ALL_PROJECTS == $t_project_id ) ) {\n\t\t\t$label = sprintf( '[%s] %s', string_display_line( project_get_name( $last_project ) ), $label );\n\t\t}\n\n\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_CATEGORY . '=' . urlencode( $last_category_name );\n\t\tif( !is_blank( $t_bug_link ) ) {\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\t\t}\n\n\t\tsummary_helper_print_row( $label, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\t}\n}\n\n# print bug counts by project\nfunction summary_print_by_project( $p_projects = null, $p_level = 0, $p_cache = null ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_project_table = db_get_table( 'mantis_project_table' );\n\n\t$t_project_id = helper_get_current_project();\n\n\tif( null == $p_projects ) {\n\t\tif( ALL_PROJECTS == $t_project_id ) {\n\t\t\t$p_projects = current_user_get_accessible_projects();\n\t\t} else {\n\t\t\t$p_projects = Array(\n\t\t\t\t$t_project_id,\n\t\t\t);\n\t\t}\n\t}\n\n\t# Retrieve statistics one time to improve performance.\n\tif( null === $p_cache ) {\n\t\t$query = \"SELECT project_id, status, COUNT( status ) AS bugcount\n\t\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\t\tGROUP BY project_id, status\";\n\n\t\t$result = db_query_bound( $query );\n\t\t$p_cache = Array();\n\n\t\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\t\twhile( $row = db_fetch_array( $result ) ) {\n\t\t\t$t_project_id = $row['project_id'];\n\t\t\t$t_status = $row['status'];\n\t\t\t$t_bugcount = $row['bugcount'];\n\n\t\t\tif ( $t_closed_val <= $t_status ) {\n\t\t\t\tif ( isset( $p_cache[$t_project_id]['closed'] ) ) {\n\t\t\t\t\t$p_cache[$t_project_id]['closed'] += $t_bugcount;\n\t\t\t\t} else {\n\t\t\t\t\t$p_cache[$t_project_id]['closed'] = $t_bugcount;\n\t\t\t\t}\n\t\t\t} else if ( $t_resolved_val <= $t_status ) {\n\t\t\t\tif ( isset( $p_cache[$t_project_id]['resolved'] ) ) {\n\t\t\t\t\t$p_cache[$t_project_id]['resolved'] += $t_bugcount;\n\t\t\t\t} else {\n\t\t\t\t\t$p_cache[$t_project_id]['resolved'] = $t_bugcount;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( isset( $p_cache[$t_project_id]['open'] ) ) {\n\t\t\t\t\t$p_cache[$t_project_id]['open'] += $t_bugcount;\n\t\t\t\t} else {\n\t\t\t\t\t$p_cache[$t_project_id]['open'] = $t_bugcount;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tforeach( $p_projects as $t_project ) {\n\t\t$t_name = str_repeat( \"&raquo; \", $p_level ) . string_display_line( project_get_name( $t_project ) );\n\n\t\t$t_pdata = isset( $p_cache[$t_project] ) ? $p_cache[$t_project] : array( 'open' => 0, 'resolved' => 0, 'closed' => 0 );\n\n\t\t$t_bugs_open = isset( $t_pdata['open'] ) ? $t_pdata['open'] : 0;\n\t\t$t_bugs_resolved = isset( $t_pdata['resolved'] ) ? $t_pdata['resolved'] : 0;\n\t\t$t_bugs_closed = isset( $t_pdata['closed'] ) ? $t_pdata['closed'] : 0;\n\t\t$t_bugs_total = $t_bugs_open + $t_bugs_resolved + $t_bugs_closed;\n\n\t\tsummary_helper_print_row( $t_name, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\n\t\tif ( count( project_hierarchy_get_subprojects ( $t_project ) ) > 0 ) {\n\t\t\t$t_subprojects = current_user_get_accessible_subprojects( $t_project );\n\n\t\t\tif( count( $t_subprojects ) > 0 ) {\n\t\t\t\tsummary_print_by_project( $t_subprojects, $p_level + 1, $p_cache );\n\t\t\t}\n\t\t}\n\t}\n}\n\n# Print developer / resolution report\nfunction summary_print_developer_resolution( $p_resolution_enum_string ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t# Get the resolution values ot use\n\t$c_res_s = MantisEnum::getValues( $p_resolution_enum_string );\n\t$enum_res_count = count( $c_res_s );\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$specific_where .= ' AND handler_id > 0';\n\n\t# Get all of the bugs and split them up into an array\n\t$query = \"SELECT COUNT(id) as bugcount, handler_id, resolution\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tGROUP BY handler_id, resolution\n\t\t\t\tORDER BY handler_id, resolution\";\n\t$result = db_query_bound( $query );\n\n\t$t_handler_res_arr = array();\n\t$t_arr = db_fetch_array( $result );\n\twhile( $t_arr ) {\n\t\tif( !isset( $t_handler_res_arr[$t_arr['handler_id']] ) ) {\n\t\t\t$t_handler_res_arr[$t_arr['handler_id']] = array();\n\t\t\t$t_handler_res_arr[$t_arr['handler_id']]['total'] = 0;\n\t\t}\n\t\tif( !isset( $t_handler_res_arr[$t_arr['handler_id']][$t_arr['resolution']] ) ) {\n\t\t\t$t_handler_res_arr[$t_arr['handler_id']][$t_arr['resolution']] = 0;\n\t\t}\n\t\t$t_handler_res_arr[$t_arr['handler_id']][$t_arr['resolution']] += $t_arr['bugcount'];\n\t\t$t_handler_res_arr[$t_arr['handler_id']]['total'] += $t_arr['bugcount'];\n\n\t\t$t_arr = db_fetch_array( $result );\n\t}\n\n\t$t_filter_prefix = config_get( 'bug_count_hyperlink_prefix' );\n\t$t_row_count = 0;\n\n\t# We now have a multi dimensional array of users and resolutions, with the value of each resolution for each user\n\tforeach( $t_handler_res_arr as $t_handler_id => $t_arr2 ) {\n\n\t\t# Only print developers who have had at least one bug assigned to them. This helps\n\t\t# prevent divide by zeroes, showing developers not on this project, and showing\n\t\t# users that aren't actually developers...\n\n\t\tif( $t_arr2['total'] > 0 ) {\n\t\t\techo '<tr align=\"center\" ' . helper_alternate_class( $t_row_count ) . '>';\n\t\t\t$t_row_count++;\n\t\t\techo '<td>';\n\t\t\techo summary_helper_get_developer_label( $t_handler_id );\n\t\t\techo '</td>';\n\n\t\t\t# We need to track the percentage of bugs that are considered fixed, as well as\n\t\t\t# those that aren't considered bugs to begin with (when looking at %age)\n\t\t\t$t_bugs_fixed = 0;\n\t\t\t$t_bugs_notbugs = 0;\n\t\t\tfor( $j = 0;$j < $enum_res_count;$j++ ) {\n\t\t\t\t$res_bug_count = 0;\n\n\t\t\t\tif( isset( $t_arr2[$c_res_s[$j]] ) ) {\n\t\t\t\t\t$res_bug_count = $t_arr2[$c_res_s[$j]];\n\t\t\t\t}\n\n\t\t\t\techo '<td>';\n\t\t\t\tif( 0 < $res_bug_count ) {\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_HANDLER_ID . '=' . $t_handler_id;\n\t\t\t\t\t$t_bug_link = $t_bug_link . '&amp;' . FILTER_PROPERTY_RESOLUTION_ID . '=' . $c_res_s[$j] . '\">';\n\t\t\t\t\techo $t_bug_link . $res_bug_count . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\techo $res_bug_count;\n\t\t\t\t}\n\t\t\t\techo '</td>';\n\n\t\t\t\tif( $c_res_s[$j] >= config_get( 'bug_resolution_fixed_threshold' ) ) {\n\t\t\t\t\tif ( $c_res_s[$j] < config_get( 'bug_resolution_not_fixed_threshold' ) ) {\n\t\t\t\t\t\t# Count bugs with a resolution between fixed and not fixed thresholds\n\t\t\t\t\t\t$t_bugs_fixed += $res_bug_count;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t# Count bugs with a resolution above the not fixed threshold\n\t\t\t\t\t\t$t_bugs_notbugs += $res_bug_count;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$t_percent_fixed = 0;\n\t\t\tif(( $t_arr2['total'] - $t_bugs_notbugs ) > 0 ) {\n\t\t\t\t$t_percent_fixed = ( $t_bugs_fixed / ( $t_arr2['total'] - $t_bugs_notbugs ) );\n\t\t\t}\n\t\t\techo '<td>';\n\t\t\tprintf( '% 1.0f%%', ( $t_percent_fixed * 100 ) );\n\t\t\techo '</td>';\n\t\t\techo '</tr>';\n\t\t}\n\t}\n}\n\n# Print reporter / resolution report\nfunction summary_print_reporter_resolution( $p_resolution_enum_string ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\t$t_reporter_summary_limit = config_get( 'reporter_summary_limit' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t# Get the resolution values ot use\n\t$c_res_s = MantisEnum::getValues( $p_resolution_enum_string );\n\t$enum_res_count = count( $c_res_s );\n\n\t# Checking if it's a per project statistic or all projects\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t# Get all of the bugs and split them up into an array\n\t$query = \"SELECT COUNT(id) as bugcount, reporter_id, resolution\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tGROUP BY reporter_id, resolution\";\n\t$result = db_query_bound( $query );\n\n\t$t_reporter_res_arr = array();\n\t$t_reporter_bugcount_arr = array();\n\t$t_arr = db_fetch_array( $result );\n\twhile( $t_arr ) {\n\t\tif( !isset( $t_reporter_res_arr[$t_arr['reporter_id']] ) ) {\n\t\t\t$t_reporter_res_arr[$t_arr['reporter_id']] = array();\n\t\t\t$t_reporter_bugcount_arr[$t_arr['reporter_id']] = 0;\n\t\t}\n\t\tif( !isset( $t_reporter_res_arr[$t_arr['reporter_id']][$t_arr['resolution']] ) ) {\n\t\t\t$t_reporter_res_arr[$t_arr['reporter_id']][$t_arr['resolution']] = 0;\n\t\t}\n\t\t$t_reporter_res_arr[$t_arr['reporter_id']][$t_arr['resolution']] += $t_arr['bugcount'];\n\t\t$t_reporter_bugcount_arr[$t_arr['reporter_id']] += $t_arr['bugcount'];\n\n\t\t$t_arr = db_fetch_array( $result );\n\t}\n\n\t# Sort our total bug count array so that the reporters with the highest number of bugs are listed first,\n\tarsort( $t_reporter_bugcount_arr );\n\n\t$t_row_count = 0;\n\n\t# We now have a multi dimensional array of users and resolutions, with the value of each resolution for each user\n\tforeach( $t_reporter_bugcount_arr as $t_reporter_id => $t_total_user_bugs ) {\n\n\t\t# Limit the number of reporters listed\n\t\tif( $t_row_count > $t_reporter_summary_limit ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t# Only print reporters who have reported at least one bug. This helps\n\t\t# prevent divide by zeroes, showing reporters not on this project, and showing\n\t\t# users that aren't actually reporters...\n\t\tif( $t_total_user_bugs > 0 ) {\n\t\t\t$t_arr2 = $t_reporter_res_arr[$t_reporter_id];\n\n\t\t\techo '<tr align=\"center\" ' . helper_alternate_class( $t_row_count ) . '>';\n\t\t\t$t_row_count++;\n\t\t\techo '<td>';\n\t\t\techo string_display_line( user_get_name( $t_reporter_id ) );\n\t\t\techo '</td>';\n\n\t\t\t# We need to track the percentage of bugs that are considered fix, as well as\n\t\t\t# those that aren't considered bugs to begin with (when looking at %age)\n\t\t\t$t_bugs_fixed = 0;\n\t\t\t$t_bugs_notbugs = 0;\n\t\t\tfor( $j = 0;$j < $enum_res_count;$j++ ) {\n\t\t\t\t$res_bug_count = 0;\n\n\t\t\t\tif( isset( $t_arr2[$c_res_s[$j]] ) ) {\n\t\t\t\t\t$res_bug_count = $t_arr2[$c_res_s[$j]];\n\t\t\t\t}\n\n\t\t\t\techo '<td>';\n\t\t\t\tif( 0 < $res_bug_count ) {\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_REPORTER_ID . '=' . $t_reporter_id;\n\t\t\t\t\t$t_bug_link = $t_bug_link . '&amp;' . FILTER_PROPERTY_RESOLUTION_ID . '=' . $c_res_s[$j] . '\">';\n\t\t\t\t\techo $t_bug_link . $res_bug_count . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\techo $res_bug_count;\n\t\t\t\t}\n\t\t\t\techo '</td>';\n\n\t\t\t\tif( $c_res_s[$j] >= config_get( 'bug_resolution_fixed_threshold' ) ) {\n\t\t\t\t\tif ( $c_res_s[$j] < config_get( 'bug_resolution_not_fixed_threshold' ) ) {\n\t\t\t\t\t\t# Count bugs with a resolution between fixed and not fixed thresholds\n\t\t\t\t\t\t$t_bugs_fixed += $res_bug_count;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t# Count bugs with a resolution above the not fixed threshold\n\t\t\t\t\t\t$t_bugs_notbugs += $res_bug_count;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$t_percent_errors = 0;\n\t\t\tif( $t_total_user_bugs > 0 ) {\n\t\t\t\t$t_percent_errors = ( $t_bugs_notbugs / $t_total_user_bugs );\n\t\t\t}\n\t\t\techo '<td>';\n\t\t\tprintf( '% 1.0f%%', ( $t_percent_errors * 100 ) );\n\t\t\techo '</td>';\n\t\t\techo '</tr>';\n\t\t}\n\t}\n}\n\n# Print reporter effectiveness report\nfunction summary_print_reporter_effectiveness( $p_severity_enum_string, $p_resolution_enum_string ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\t$t_reporter_summary_limit = config_get( 'reporter_summary_limit' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$t_severity_multipliers = config_get( 'severity_multipliers' );\n\t$t_resolution_multipliers = config_get( 'resolution_multipliers' );\n\n\t# Get the severity values to use\n\t$c_sev_s = MantisEnum::getValues( $p_severity_enum_string );\n\t$enum_sev_count = count( $c_sev_s );\n\n\t# Get the resolution values to use\n\t$c_res_s = MantisEnum::getValues( $p_resolution_enum_string );\n\t$enum_res_count = count( $c_res_s );\n\n\t# Checking if it's a per project statistic or all projects\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t# Get all of the bugs and split them up into an array\n\t$query = \"SELECT COUNT(id) as bugcount, reporter_id, resolution, severity\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tGROUP BY reporter_id, resolution, severity\";\n\t$result = db_query_bound( $query );\n\n\t$t_reporter_ressev_arr = array();\n\t$t_reporter_bugcount_arr = array();\n\t$t_arr = db_fetch_array( $result );\n\twhile( $t_arr ) {\n\t\tif( !isset( $t_reporter_ressev_arr[$t_arr['reporter_id']] ) ) {\n\t\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']] = array();\n\t\t\t$t_reporter_bugcount_arr[$t_arr['reporter_id']] = 0;\n\t\t}\n\t\tif( !isset( $t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']] ) ) {\n\t\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']] = array();\n\t\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']]['total'] = 0;\n\t\t}\n\t\tif( !isset( $t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']][$t_arr['resolution']] ) ) {\n\t\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']][$t_arr['resolution']] = 0;\n\t\t}\n\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']][$t_arr['resolution']] += $t_arr['bugcount'];\n\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']]['total'] += $t_arr['bugcount'];\n\t\t$t_reporter_bugcount_arr[$t_arr['reporter_id']] += $t_arr['bugcount'];\n\n\t\t$t_arr = db_fetch_array( $result );\n\t}\n\n\t# Sort our total bug count array so that the reporters with the highest number of bugs are listed first,\n\tarsort( $t_reporter_bugcount_arr );\n\n\t$t_row_count = 0;\n\n\t# We now have a multi dimensional array of users, resolutions and severities, with the\n\t# value of each resolution and severity for each user\n\tforeach( $t_reporter_bugcount_arr as $t_reporter_id => $t_total_user_bugs ) {\n\n\t\t# Limit the number of reporters listed\n\t\tif( $t_row_count > $t_reporter_summary_limit ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t# Only print reporters who have reported at least one bug. This helps\n\t\t# prevent divide by zeroes, showing reporters not on this project, and showing\n\t\t# users that aren't actually reporters...\n\t\tif( $t_total_user_bugs > 0 ) {\n\t\t\t$t_arr2 = $t_reporter_ressev_arr[$t_reporter_id];\n\n\t\t\techo '<tr ' . helper_alternate_class( $t_row_count ) . '>';\n\t\t\t$t_row_count++;\n\t\t\techo '<td>';\n\t\t\techo string_display_line( user_get_name( $t_reporter_id ) );\n\t\t\techo '</td>';\n\n\t\t\t$t_total_severity = 0;\n\t\t\t$t_total_errors = 0;\n\t\t\tfor( $j = 0; $j < $enum_sev_count; $j++ ) {\n\t\t\t\tif( !isset( $t_arr2[$c_sev_s[$j]] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$sev_bug_count = $t_arr2[$c_sev_s[$j]]['total'];\n\t\t\t\t$t_sev_mult = 1;\n\t\t\t\tif( $t_severity_multipliers[$c_sev_s[$j]] ) {\n\t\t\t\t\t$t_sev_mult = $t_severity_multipliers[$c_sev_s[$j]];\n\t\t\t\t}\n\n\t\t\t\tif( $sev_bug_count > 0 ) {\n\t\t\t\t\t$t_total_severity += ( $sev_bug_count * $t_sev_mult );\n\t\t\t\t}\n\n\t\t\t\tforeach( $t_resolution_multipliers as $t_res => $t_res_mult ) {\n\t\t\t\t\tif( isset( $t_arr2[$c_sev_s[$j]][$t_res] ) ) {\n\t\t\t\t\t\t$t_total_errors += ( $t_sev_mult * $t_res_mult );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\techo '<td>';\n\t\t\techo $t_total_severity;\n\t\t\techo '</td>';\n\t\t\techo '<td>';\n\t\t\techo $t_total_errors;\n\t\t\techo '</td>';\n\t\t\techo '<td>';\n\t\t\tprint( $t_total_severity - $t_total_errors );\n\t\t\techo '</td>';\n\t\t\techo '</tr>';\n\t\t}\n\t}\n}\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @package CoreAPI\n * @subpackage GraphAPI\n * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n\n\nif( OFF == plugin_config_get( 'eczlibrary' ) ) {\n\t$t_font_path = get_font_path();\n\tif( $t_font_path !== '' && !defined('TTF_DIR') ) {\n\t\tdefine( 'TTF_DIR', $t_font_path );\n\t}\n\t$t_jpgraph_path = plugin_config_get( 'jpgraph_path', '' );\n\tif( $t_jpgraph_path !== '' ) {\n\t\tset_include_path(get_include_path() . PATH_SEPARATOR . $t_jpgraph_path );\n\t\t$ip = get_include_path();\n\t\trequire_once( 'jpgraph.php' );\n\t\trequire_once( 'jpgraph_line.php' );\n\t\trequire_once( 'jpgraph_bar.php' );\n\t\trequire_once( 'jpgraph_pie.php' );\n\t\trequire_once( 'jpgraph_pie3d.php' );\n\t\trequire_once( 'jpgraph_canvas.php' );\n\t} else {\n\t\trequire_once( 'jpgraph/jpgraph.php' );\n\t\trequire_once( 'jpgraph/jpgraph_line.php' );\n\t\trequire_once( 'jpgraph/jpgraph_bar.php' );\n\t\trequire_once( 'jpgraph/jpgraph_pie.php' );\n\t\trequire_once( 'jpgraph/jpgraph_pie3d.php' );\n\t\trequire_once( 'jpgraph/jpgraph_canvas.php' );\n\t}\n} else {\n\trequire_once( 'ezc/Base/src/base.php' );\n}\n\nfunction graph_get_font() {\n\t$t_font = plugin_config_get( 'font', 'arial' );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$t_font_map = array(\n\t\t\t'arial' => 'arial.ttf',\n\t\t\t'verdana' => 'verdana.ttf',\n\t\t\t'trebuchet' => 'trebuc.ttf',\n\t\t\t'verasans' => 'Vera.ttf',\n\t\t\t'times' => 'times.ttf',\n\t\t\t'georgia' => 'georgia.ttf',\n\t\t\t'veraserif' => 'VeraSe.ttf',\n\t\t\t'courier' => 'cour.ttf',\n\t\t\t'veramono' => 'VeraMono.ttf',\n\t\t);\n\n\t\tif( isset( $t_font_map[$t_font] ) ) {\n\t\t\t$t_font = $t_font_map[$t_font];\n\t\t} else {\n\t\t\t$t_font = 'arial.ttf';\n\t\t}\n\t\t$t_font_path = get_font_path();\n\t\tif( empty($t_font_path) ) {\n\t\t\terror_text('Unable to read/find font', 'Unable to read/find font');\n\t\t}\n\t\t$t_font_file = $t_font_path . $t_font;\n\t\tif( file_exists($t_font_file) === false || is_readable($t_font_file) === false ) {\n\t\t\terror_text('Unable to read/find font', 'Unable to read/find font');\n\t\t}\n\t\treturn $t_font_file;\n\t} else {\n\t\t$t_font_map = array(\n\t\t\t'arial' => FF_ARIAL,\n\t\t\t'verdana' => FF_VERDANA,\n\t\t\t'trebuchet' => FF_TREBUCHE,\n\t\t\t'verasans' => FF_VERA,\n\t\t\t'times' => FF_TIMES,\n\t\t\t'georgia' => FF_GEORGIA,\n\t\t\t'veraserif' => FF_VERASERIF,\n\t\t\t'courier' => FF_COURIER,\n\t\t\t'veramono' => FF_VERAMONO,\n\t\t);\n\n\t\tif( isset( $t_font_map[$t_font] ) ) {\n\t\t\treturn $t_font_map[$t_font];\n\t\t} else {\n\t\t\treturn FF_FONT1;\n\t\t}\n\t}\n}\n\n# ## Graph API ###\n# --------------------\n# graphing routines\n# --------------------\nfunction graph_bar( $p_metrics, $p_title = '', $p_graph_width = 350, $p_graph_height = 400 ) {\n\t$t_graph_font = graph_get_font();\n\n\terror_check( is_array( $p_metrics ) ? array_sum( $p_metrics ) : 0, $p_title );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$graph = new ezcGraphBarChart();\n\t\t$graph->title = $p_title;\n\t\t$graph->background->color = '#FFFFFF';\n\t\t$graph->options->font = $t_graph_font ;\n\t\t$graph->options->font->maxFontSize = 12;\n\t\t$graph->legend = false;\n\n\t\t$graph->data[0] = new ezcGraphArrayDataSet( $p_metrics );\n\t\t$graph->data[0]->color = '#FFFF00';\n\n\t\t$graph->xAxis->axisLabelRenderer = new ezcGraphAxisRotatedLabelRenderer();\n\t\t$graph->xAxis->axisLabelRenderer->angle = 45;\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->renderer->options->syncAxisFonts = false;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\t$graph = new Graph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 40, 40, 40, 170 );\n\t\tif( ON == plugin_config_get( 'jpgraph_antialias' ) ) {\n\t\t\t$graph->img->SetAntiAliasing();\n\t\t}\n\t\t$graph->SetScale( 'textlin' );\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\t\t$graph->title->Set( $p_title );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\t\t$graph->xaxis->SetTickLabels( array_keys( $p_metrics ) );\n\t\tif( FF_FONT2 <= $t_graph_font ) {\n\t\t\t$graph->xaxis->SetLabelAngle( 60 );\n\t\t} else {\n\t\t\t$graph->xaxis->SetLabelAngle( 90 );\n\t\t\t# can't rotate non truetype fonts\n\t\t}\n\t\t$graph->xaxis->SetFont( $t_graph_font );\n\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$graph->yaxis->scale->ticks->SetDirection( -1 );\n\t\t$graph->yaxis->SetFont( $t_graph_font );\n\n\t\t$p1 = new BarPlot( array_values( $p_metrics ) );\n\t\t$p1->SetFillColor( 'yellow' );\n\t\t$p1->SetWidth( 0.8 );\n\t\t$graph->Add( $p1 );\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\n\t\t$graph->Stroke();\n\t}\n}\n\n# Function which displays the charts using the absolute values according to the status (opened/closed/resolved)\nfunction graph_group( $p_metrics, $p_title = '', $p_graph_width = 350, $p_graph_height = 400, $p_baseline = 100 ) {\n\n\t# $p_metrics is an array of three arrays\n\t#   $p_metrics['open'] = array( 'enum' => value, ...)\n\t#   $p_metrics['resolved']\n\t#   $p_metrics['closed']\n\n\t$t_graph_font = graph_get_font();\n\n\t# count up array portions that are set\n\t$t_count = 0;\n\tforeach( array( 'open', 'resolved', 'closed' ) as $t_label ) {\n\t\tif( isset( $p_metrics[$t_label] ) && is_array( $p_metrics[$t_label] ) ) {\n\t\t\t$t_count += array_sum( $p_metrics[$t_label] );\n\t\t}\n\t}\n\n\terror_check( $t_count, $p_title );\n\n\t# calculate totals\n\t$total = graph_total_metrics( $p_metrics );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$graph = new ezcGraphBarChart();\n\t\t$graph->title = $p_title;\n\t\t$graph->background->color = '#FFFFFF';\n\t\t$graph->options->font = $t_graph_font ;\n\t\t$graph->options->font->maxFontSize = 12;\n\t\t$graph->legend = false;\n\n\t\tforeach( array( 'open', 'resolved', 'closed' ) as $t_label ) {\n\t\t\t$graph->data[$t_label] = new ezcGraphArrayDataSet( $p_metrics[$t_label] );\n\t\t}\n\t\t$graph->data['total'] = new ezcGraphArrayDataSet( $total );\n\t\t//$graph->data['total']->displayType = ezcGraph::LINE;\n\t\t//$graph->data['total']->barMargin = -20;\n\t\t$graph->options->fillLines = 210;\n\t\t$graph->xAxis->axisLabelRenderer = new ezcGraphAxisRotatedLabelRenderer();\n\t\t$graph->xAxis->axisLabelRenderer->angle = 45;\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->renderer->options->syncAxisFonts = false;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\t# defines margin according to height\n\t\t$graph = new Graph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 45, 35, 35, $p_baseline );\n\t\tif( ON == plugin_config_get( 'jpgraph_antialias' ) ) {\n\t\t\t$graph->img->SetAntiAliasing();\n\t\t}\n\t\t$graph->SetScale( 'textlin' );\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\t\t$graph->title->Set( $p_title );\n\t\t$graph->xaxis->SetTickLabels( array_keys( $p_metrics['open'] ) );\n\t\tif( FF_FONT2 <= $t_graph_font ) {\n\t\t\t$graph->xaxis->SetLabelAngle( 60 );\n\t\t} else {\n\t\t\t$graph->xaxis->SetLabelAngle( 90 );\n\t\t\t# can't rotate non truetype fonts\n\t\t}\n\t\t$graph->xaxis->SetFont( $t_graph_font );\n\t\t$graph->legend->Pos( 0.05, 0.08 );\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$graph->yaxis->scale->ticks->SetDirection( -1 );\n\t\t$graph->yaxis->SetFont( $t_graph_font );\n\t\t$graph->yscale->SetGrace( 10 );\n\n\t\t# adds on the same graph\n\t\t$tot = new BarPlot( array_values( $total ) );\n\t\t$tot->SetFillColor( 'lightblue' );\n\t\t$tot->SetWidth( 0.7 );\n\t\t$tot->SetLegend( plugin_lang_get( 'legend_total' ) );\n\t\t$graph->Add( $tot );\n\n\t\t$p1 = new BarPlot( array_values( $p_metrics['open'] ) );\n\t\t$p1->SetFillColor( 'yellow' );\n\t\t$p1->SetWidth( 1 );\n\t\t$p1->SetLegend( plugin_lang_get( 'legend_opened' ) );\n\n\t\t$p2 = new BarPlot( array_values( $p_metrics['closed'] ) );\n\t\t$p2->SetFillColor( 'blue' );\n\t\t$p2->SetWidth( 1 );\n\t\t$p2->SetLegend( plugin_lang_get( 'legend_closed' ) );\n\n\t\t$p3 = new BarPlot( array_values( $p_metrics['resolved'] ) );\n\t\t$p3->SetFillColor( 'red' );\n\t\t$p3->SetWidth( 1 );\n\t\t$p3->SetLegend( plugin_lang_get( 'legend_resolved' ) );\n\n\t\t$gbplot = new GroupBarPlot( array( $p1, $p3, $p2 ) );\n\t\t$graph->Add( $gbplot );\n\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\t$graph->Stroke();\n\t}\n}\n\n# --------------------\n# Function that displays pie charts\nfunction graph_pie( $p_metrics, $p_title = '', $p_graph_width = 500, $p_graph_height = 350, $p_center = 0.4, $p_poshorizontal = 0.10, $p_posvertical = 0.09 ) {\n\t$t_graph_font = graph_get_font();\n\n\terror_check( is_array( $p_metrics ) ? array_sum( $p_metrics ) : 0, $p_title );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$graph = new ezcGraphPieChart();\n\t\t$graph->title = $p_title;\n\t\t$graph->background->color = '#FFFFFF';\n\t\t$graph->options->font = $t_graph_font ;\n\t\t$graph->options->font->maxFontSize = 12;\n\t\t$graph->legend = false;\n\n\t\t$graph->data[0] = new ezcGraphArrayDataSet( $p_metrics );\n\t\t$graph->data[0]->color = '#FFFF00';\n\n\t\t$graph->renderer = new ezcGraphRenderer3d();\n\t\t$graph->renderer->options->dataBorder = false;\n\t\t$graph->renderer->options->pieChartShadowSize = 10;\n\t\t$graph->renderer->options->pieChartGleam = .5;\n\t\t$graph->renderer->options->pieChartHeight = 16;\n\t\t$graph->renderer->options->legendSymbolGleam = .5;\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->renderer->options->syncAxisFonts = false;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\t$graph = new PieGraph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 40, 40, 40, 100 );\n\t\t$graph->title->Set( $p_title );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\n\t\t$graph->legend->Pos( $p_poshorizontal, $p_posvertical );\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$p1 = new PiePlot3d( array_values( $p_metrics ) );\n\n\t\t// should be reversed?\n\t\t$p1->SetTheme( 'earth' );\n\n\t\t# $p1->SetTheme(\"sand\");\n\t\t$p1->SetCenter( $p_center );\n\t\t$p1->SetAngle( 60 );\n\t\t$p1->SetLegends( array_keys( $p_metrics ) );\n\n\t\t# Label format\n\t\t$p1->value->SetFormat( '%2.0f' );\n\t\t$p1->value->Show();\n\t\t$p1->value->SetFont( $t_graph_font );\n\n\t\t$graph->Add( $p1 );\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\t\t$graph->Stroke();\n\t}\n}\n\n# --------------------\nfunction graph_cumulative_bydate( $p_metrics, $p_graph_width = 300, $p_graph_height = 380 ) {\n\n\t$t_graph_font = graph_get_font();\n\terror_check( is_array( $p_metrics ) ? count( $p_metrics ) : 0, plugin_lang_get( 'cumulative' ) . ' ' . lang_get( 'by_date' ) );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$graph = new ezcGraphLineChart();\n\n\t\t$graph->background->color = '#FFFFFF';\n\n\t\t$graph->xAxis = new ezcGraphChartElementNumericAxis();\n\n\t\t$graph->data[0] = new ezcGraphArrayDataSet( $p_metrics[0] );\n\t\t$graph->data[0]->label = plugin_lang_get( 'legend_reported' );\n\t\t$graph->data[0]->color = '#FF0000';\n\n\t\t$graph->data[1] = new ezcGraphArrayDataSet( $p_metrics[1] );\n\t\t$graph->data[1]->label = plugin_lang_get( 'legend_resolved' );\n\t\t$graph->data[1]->color = '#0000FF';\n\n\t\t$graph->data[2] = new ezcGraphArrayDataSet( $p_metrics[2] );\n\t\t$graph->data[2]->label = plugin_lang_get( 'legend_still_open' );\n\t\t$graph->data[2]->color = '#000000';\n\n\t\t$graph->additionalAxis[2] = $nAxis = new ezcGraphChartElementNumericAxis();\n\t\t$nAxis->chartPosition = 1;\n\t\t$nAxis->background = '#005500';\n\t\t$nAxis->border = '#005500';\n\t\t$nAxis->position = ezcGraph::BOTTOM;\n\t\t$graph->data[2]->yAxis = $nAxis;\n\n\t\t$graph->xAxis->labelCallback =  'graph_date_format';\n\t\t$graph->xAxis->axisLabelRenderer = new ezcGraphAxisRotatedLabelRenderer();\n\t\t$graph->xAxis->axisLabelRenderer->angle = -45;\n\n\t\t$graph->legend->position      = ezcGraph::BOTTOM;\n\t\t$graph->legend->background    = '#FFFFFF80';\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->title = plugin_lang_get( 'cumulative' ) . ' ' . lang_get( 'by_date' );\n\t\t$graph->options->font = $t_graph_font ;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\tforeach( $p_metrics[0] as $i => $vals ) {\n\t\t\tif( $i > 0 ) {\n\t\t\t\t$plot_date[] = $i;\n\t\t\t\t$reported_plot[] = $p_metrics[0][$i];\n\t\t\t\t$resolved_plot[] = $p_metrics[1][$i];\n\t\t\t\t$still_open_plot[] = $p_metrics[2][$i];\n\t\t\t}\n\t\t}\n\n\t\t$graph = new Graph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 40, 40, 40, 170 );\n\t\tif( ON == plugin_config_get( 'jpgraph_antialias' ) ) {\n\t\t\t$graph->img->SetAntiAliasing();\n\t\t}\n\t\t$graph->SetScale( 'linlin');\n\t\t$graph->yaxis->SetColor(\"red\");\n\t\t$graph->SetY2Scale(\"lin\");\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\t\t$graph->title->Set( plugin_lang_get( 'cumulative' ) . ' ' . lang_get( 'by_date' ) );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\n\t\t$graph->legend->Pos( 0.05, 0.9, 'right', 'bottom' );\n\t\t$graph->legend->SetShadow( false );\n\t\t$graph->legend->SetFillColor( 'white' );\n\t\t$graph->legend->SetLayout( LEGEND_HOR );\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$graph->yaxis->scale->ticks->SetDirection( -1 );\n\t\t$graph->yaxis->SetFont( $t_graph_font );\n\t\t$graph->y2axis->SetFont( $t_graph_font );\n\n\t\tif( FF_FONT2 <= $t_graph_font ) {\n\t\t\t$graph->xaxis->SetLabelAngle( 60 );\n\t\t} else {\n\t\t\t$graph->xaxis->SetLabelAngle( 90 );\n\t\t\t# can't rotate non truetype fonts\n\t\t}\n\t\t$graph->xaxis->SetLabelFormatCallback( 'graph_date_format' );\n\t\t$graph->xaxis->SetFont( $t_graph_font );\n\n\t\t$p1 = new LinePlot( $reported_plot, $plot_date );\n\t\t$p1->SetColor( 'blue' );\n\t\t$p1->SetCenter();\n\t\t$p1->SetLegend( plugin_lang_get( 'legend_reported' ) );\n\t\t$graph->AddY2( $p1 );\n\n\t\t$p3 = new LinePlot( $still_open_plot, $plot_date );\n\t\t$p3->SetColor( 'red' );\n\t\t$p3->SetCenter();\n\t\t$p3->SetLegend( plugin_lang_get( 'legend_still_open' ) );\n\t\t$graph->Add( $p3 );\n\n\t\t$p2 = new LinePlot( $resolved_plot, $plot_date );\n\t\t$p2->SetColor( 'black' );\n\t\t$p2->SetCenter();\n\t\t$p2->SetLegend( plugin_lang_get( 'legend_resolved' ) );\n\t\t$graph->AddY2( $p2 );\n\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\t\t$graph->Stroke();\n\t}\n}\n\n# --------------------\nfunction graph_bydate( $p_metrics, $p_labels, $p_title, $p_graph_width = 300, $p_graph_height = 380 ) {\n\t$t_graph_font = graph_get_font();\n\terror_check( is_array( $p_metrics ) ? count( $p_metrics ) : 0, lang_get( 'by_date' ) );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$t_metrics = array();\n\t\t$t_dates = array_shift($p_metrics); //[0];\n\t\t$t_cnt = count($p_metrics);\n\n\t\tforeach( $t_dates as $i => $val ) {\n\t\t\t\t//$t_metrics[$val]\n\t\t\t\tfor($j = 0; $j < $t_cnt; $j++ ) {\n\t\t\t\t\t$t_metrics[$j][$val] = $p_metrics[$j][$i];\n\t\t\t\t}\n\t\t}\n\n\t\t$graph = new ezcGraphLineChart();\n\t\t$graph->background->color = '#FFFFFF';\n\n\t\t$graph->xAxis = new ezcGraphChartElementNumericAxis();\n\t\tfor($k = 0; $k < $t_cnt; $k++ ) {\n\t\t\t$graph->data[$k] = new ezcGraphArrayDataSet( $t_metrics[$k] );\n\t\t\t$graph->data[$k]->label = $p_labels[$k+1];\n\t\t}\n\n\t\t$graph->xAxis->labelCallback =  'graph_date_format';\n\t\t$graph->xAxis->axisLabelRenderer = new ezcGraphAxisRotatedLabelRenderer();\n\t\t$graph->xAxis->axisLabelRenderer->angle = -60;\n\t\t$graph->xAxis->axisSpace = .15;\n\n\t\t$graph->legend->position      = ezcGraph::BOTTOM;\n\t\t$graph->legend->background    = '#FFFFFF80';\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->title = $p_title . ' ' . lang_get( 'by_date' );\n\t\t$graph->title->maxHeight = .03;\n\t\t$graph->options->font = $t_graph_font ;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\t$graph = new Graph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 40, 140, 40, 100 );\n\t\tif( ON == plugin_config_get( 'jpgraph_antialias' ) ) {\n\t\t\t$graph->img->SetAntiAliasing();\n\t\t}\n\t\t$graph->SetScale( 'linlin' );\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\t\t$graph->title->Set( $p_title . ' ' . lang_get( 'by_date' ) );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\n\t\t$graph->legend->Pos( 0.01, 0.05, 'right', 'top' );\n\t\t$graph->legend->SetShadow( false );\n\t\t$graph->legend->SetFillColor( 'white' );\n\t\t$graph->legend->SetLayout( LEGEND_VERT );\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$graph->yaxis->scale->ticks->SetDirection( -1 );\n\t\t$graph->yaxis->SetFont( $t_graph_font );\n\t\t$graph->yaxis->scale->SetAutoMin( 0 );\n\n\t\tif( FF_FONT2 <= $t_graph_font ) {\n\t\t\t$graph->xaxis->SetLabelAngle( 60 );\n\t\t} else {\n\t\t\t$graph->xaxis->SetLabelAngle( 90 );\n\t\t\t# can't rotate non truetype fonts\n\t\t}\n\t\t$graph->xaxis->SetLabelFormatCallback( 'graph_date_format' );\n\t\t$graph->xaxis->SetFont( $t_graph_font );\n\n/*\t\t$t_line_colours = plugin_config_get( 'jpgraph_colors' );\n\t\t$t_count_colours = count( $t_line_colours );*/\n\t\t$t_lines = count( $p_metrics ) - 1;\n\t\t$t_line = array();\n\t\tfor( $i = 1;$i <= $t_lines;$i++ ) {\n\t\t\t$t_line[$i] = new LinePlot( $p_metrics[$i], $p_metrics[0] );\n\t\t\t//$t_line[$i]->SetColor( $t_line_colours[$i % $t_count_colours] );\n\t\t\t$t_line[$i]->SetCenter();\n\t\t\t$t_line[$i]->SetLegend( $p_labels[$i] );\n\t\t\t$graph->Add( $t_line[$i] );\n\t\t}\n\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\t\t$graph->Stroke();\n\t}\n}\n\n# --------------------\n# utilities\n# --------------------\nfunction graph_total_metrics( $p_metrics ) {\n\tforeach( $p_metrics['open'] as $t_enum => $t_value ) {\n\t\t$total[$t_enum] = $t_value + $p_metrics['resolved'][$t_enum] + $p_metrics['closed'][$t_enum];\n\t}\n\treturn $total;\n}\n\n# --------------------\n# Data Extractions\n# --------------------\n# --------------------\n# summarize metrics by a single field in the bug table\nfunction create_bug_enum_summary( $p_enum_string, $p_enum ) {\n\t$t_project_id = helper_get_current_project();\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = \" AND \" . helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t$t_metrics = array();\n\t$t_assoc_array = MantisEnum::getAssocArrayIndexedByValues( $p_enum_string );\n\n\tforeach ( $t_assoc_array as $t_value => $t_label  ) {\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE $p_enum='$t_value' $specific_where\";\n\t\t$result = db_query( $query );\n\t\t$t_metrics[$t_label] = db_result( $result, 0 );\n\t}\n\n\treturn $t_metrics;\n}\n\n# Function which gives the absolute values according to the status (opened/closed/resolved)\nfunction enum_bug_group( $p_enum_string, $p_enum ) {\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$t_res_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_clo_val = config_get( 'bug_closed_status_threshold' );\n\t$specific_where = \" AND \" . helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t$t_array_indexed_by_enum_values = MantisEnum::getAssocArrayIndexedByValues( $p_enum_string );\n\t$enum_count = count( $t_array_indexed_by_enum_values );\n\tforeach ( $t_array_indexed_by_enum_values as $t_value => $t_label ) {\n\t\t# Calculates the number of bugs opened and puts the results in a table\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE $p_enum='$t_value' AND\n\t\t\t\t\t\tstatus<'$t_res_val' $specific_where\";\n\t\t$result2 = db_query( $query );\n\t\t$t_metrics['open'][$t_label] = db_result( $result2, 0, 0 );\n\n\t\t# Calculates the number of bugs closed and puts the results in a table\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE $p_enum='$t_value' AND\n\t\t\t\t\t\tstatus>='$t_clo_val' $specific_where\";\n\t\t$result2 = db_query( $query );\n\t\t$t_metrics['closed'][$t_label] = db_result( $result2, 0, 0 );\n\n\t\t# Calculates the number of bugs resolved and puts the results in a table\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE $p_enum='$t_value' AND\n\t\t\t\t\t\tstatus>='$t_res_val'  AND\n\t\t\t\t\t\tstatus<'$t_clo_val' $specific_where\";\n\t\t$result2 = db_query( $query );\n\t\t$t_metrics['resolved'][$t_label] = db_result( $result2, 0, 0 );\n\t}\n\n\t# ## end for\n\n\treturn $t_metrics;\n}\n\n# --------------------\nfunction create_developer_summary() {\n\t$t_project_id = helper_get_current_project();\n\t$t_user_table = db_get_table( 'mantis_user_table' );\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = \" AND \" . helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t$t_res_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_clo_val = config_get( 'bug_closed_status_threshold' );\n\n\t$query = \"SELECT handler_id, status\n\t\t\t\t FROM $t_bug_table\n\t\t\t\t WHERE handler_id > 0 $specific_where\";\n\t$result = db_query_bound( $query );\n\t$t_total_handled = db_num_rows( $result );\n\n\t$t_handler_arr = array();\n\t$t_handlers = array();\n\tfor( $i = 0;$i < $t_total_handled;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\tif( !isset( $t_handler_arr[$row['handler_id']] ) ) {\n\t\t\t$t_handler_arr[$row['handler_id']]['res'] = 0;\n\t\t\t$t_handler_arr[$row['handler_id']]['open'] = 0;\n\t\t\t$t_handler_arr[$row['handler_id']]['close'] = 0;\n\t\t\t$t_handlers[] = $row['handler_id'];\n\t\t}\n\t\tif( $row['status'] >= $t_res_val ) {\n\t\t\tif( $row['status'] >= $t_clo_val ) {\n\t\t\t\t$t_handler_arr[$row['handler_id']]['close']++;\n\t\t\t} else {\n\t\t\t\t$t_handler_arr[$row['handler_id']]['res']++;\n\t\t\t}\n\t\t} else {\n\t\t\t$t_handler_arr[$row['handler_id']]['open']++;\n\t\t}\n\t}\n\n\tif( count( $t_handler_arr ) == 0 ) {\n\t\treturn array( 'open' => array() );\n\t}\n\n\tuser_cache_array_rows( $t_handlers );\n\n\tforeach( $t_handler_arr as $t_handler => $t_data ) {\n\t\t$t_username = user_get_name( $t_handler );\n\n\t\t$t_metrics['open'][$t_username] = $t_data['open'];\n\t\t$t_metrics['resolved'][$t_username] = $t_data['res'];\n\t\t$t_metrics['closed'][$t_username] = $t_data['close'];\n\t}\n\tksort($t_metrics);\n\n\t# end for\n\treturn $t_metrics;\n}\n\n# --------------------\nfunction create_reporter_summary() {\n\tglobal $reporter_name, $reporter_count;\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_table = db_get_table( 'mantis_user_table' );\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t$query = \"SELECT reporter_id\n\t\t\t\t FROM $t_bug_table\n\t\t\t\t WHERE $specific_where\";\n\t$result = db_query_bound( $query );\n\t$t_total_reported = db_num_rows( $result );\n\n\t$t_reporter_arr = array();\n\t$t_reporters = array();\n\tfor( $i = 0;$i < $t_total_reported;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\n\t\tif( isset( $t_reporter_arr[$row['reporter_id']] ) ) {\n\t\t\t$t_reporter_arr[$row['reporter_id']]++;\n\t\t} else {\n\t\t\t$t_reporter_arr[$row['reporter_id']] = 1;\n\t\t\t$t_reporters[] = $row['reporter_id'];\n\t\t}\n\t}\n\n\tif( count( $t_reporter_arr ) == 0 ) {\n\t\treturn array();\n\t}\n\n\tuser_cache_array_rows( $t_reporters );\n\n\tforeach( $t_reporter_arr as $t_reporter => $t_count ) {\n\t\t$t_metrics[ user_get_name( $t_reporter ) ] = $t_count;\n\t}\n\tksort($t_metrics);\n\n\t# end for\n\treturn $t_metrics;\n}\n\n# --------------------\nfunction create_category_summary() {\n\tglobal $category_name, $category_bug_count;\n\n\t$t_project_id = helper_get_current_project();\n\t$t_cat_table = db_get_table( 'mantis_category_table' );\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t$query = \"SELECT id, name\n\t\t\t\tFROM $t_cat_table\n\t\t\t\tWHERE $specific_where OR project_id=\" . ALL_PROJECTS . \"\n\t\t\t\tORDER BY name\";\n\t$result = db_query_bound( $query );\n\t$category_count = db_num_rows( $result );\n\n\t$t_metrics = array();\n\tfor( $i = 0;$i < $category_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\t$t_cat_name = $row['name'];\n\t\t$t_cat_id = $row['id'];\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE category_id=\" . db_param() . \" AND $specific_where\";\n\t\t$result2 = db_query_bound( $query, Array( $t_cat_id ) );\n\t\tif ( isset($t_metrics[$t_cat_name]) ) {\n\t\t\t$t_metrics[$t_cat_name] = $t_metrics[$t_cat_name] + db_result( $result2, 0, 0 );\n\t\t} else {\n      if (db_result( $result2, 0, 0 ) > 0)\n\t\t\t\t\t$t_metrics[$t_cat_name] = db_result( $result2, 0, 0 );\n\t\t}\n\t}\n\n\t# end for\n\treturn $t_metrics;\n}\n\n# --------------------\nfunction create_cumulative_bydate() {\n\n\t$t_clo_val = config_get( 'bug_closed_status_threshold' );\n\t$t_res_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_history_table = db_get_table( 'mantis_bug_history_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t# Get all the submitted dates\n\t$query = \"SELECT date_submitted\n\t\t\t\tFROM $t_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tORDER BY date_submitted\";\n\t$result = db_query_bound( $query );\n\t$bug_count = db_num_rows( $result );\n\n\tfor( $i = 0;$i < $bug_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\n\t\t# rationalise the timestamp to a day to reduce the amount of data\n\t\t$t_date = $row['date_submitted'];\n\t\t$t_date = (int)( $t_date / SECONDS_PER_DAY );\n\n\t\tif( isset( $metrics[$t_date] ) ) {\n\t\t\t$metrics[$t_date][0]++;\n\t\t} else {\n\t\t\t$metrics[$t_date] = array( 1, 0, 0, );\n\t\t}\n\t}\n\n\t# ## Get all the dates where a transition from not resolved to resolved may have happened\n\t#    also, get the last updated date for the bug as this may be all the information we have\n\t$query = \"SELECT $t_bug_table.id, last_updated, date_modified, new_value, old_value\n\t\t\tFROM $t_bug_table LEFT JOIN $t_history_table\n\t\t\tON $t_bug_table.id = $t_history_table.bug_id\n\t\t\tWHERE $specific_where\n\t\t\t\t\t\tAND $t_bug_table.status >= '$t_res_val'\n\t\t\t\t\t\tAND ( ( $t_history_table.new_value >= '$t_res_val'\n\t\t\t\t\t\t\t\tAND $t_history_table.field_name = 'status' )\n\t\t\t\t\t\tOR $t_history_table.id is NULL )\n\t\t\tORDER BY $t_bug_table.id, date_modified ASC\";\n\t$result = db_query( $query );\n\t$bug_count = db_num_rows( $result );\n\n\t$t_last_id = 0;\n\t$t_last_date = 0;\n\n\tfor( $i = 0;$i < $bug_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\t$t_id = $row['id'];\n\n\t\t# if h_last_updated is NULL, there were no appropriate history records\n\t\t#  (i.e. pre 0.18 data), use last_updated from bug table instead\n\t\tif( NULL == $row['date_modified'] ) {\n\t\t\t$t_date = $row['last_updated'];\n\t\t} else {\n\t\t\tif( $t_res_val > $row['old_value'] ) {\n\t\t\t\t$t_date = $row['date_modified'];\n\t\t\t}\n\t\t}\n\t\tif( $t_id <> $t_last_id ) {\n\t\t\tif( 0 <> $t_last_id ) {\n\n\t\t\t\t# rationalise the timestamp to a day to reduce the amount of data\n\t\t\t\t$t_date_index = (int)( $t_last_date / SECONDS_PER_DAY );\n\n\t\t\t\tif( isset( $metrics[$t_date_index] ) ) {\n\t\t\t\t\t$metrics[$t_date_index][1]++;\n\t\t\t\t} else {\n\t\t\t\t\t$metrics[$t_date_index] = array(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\t0,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$t_last_id = $t_id;\n\t\t}\n\t\t$t_last_date = $t_date;\n\t}\n\n\tksort( $metrics );\n\n\t$metrics_count = count( $metrics );\n\t$t_last_opened = 0;\n\t$t_last_resolved = 0;\n\tforeach( $metrics as $i => $vals ) {\n\t\t$t_date = $i * SECONDS_PER_DAY;\n\t\t$t_metrics[0][$t_date] = $t_last_opened = $metrics[$i][0] + $t_last_opened;\n\t\t$t_metrics[1][$t_date] = $t_last_resolved = $metrics[$i][1] + $t_last_resolved;\n\t\t$t_metrics[2][$t_date] = $t_metrics[0][$t_date] - $t_metrics[1][$t_date];\n\t}\n\treturn $t_metrics;\n}\n\nfunction graph_date_format( $p_date ) {\n\treturn date( config_get( 'short_date_format' ), $p_date );\n}\n\n# ----------------------------------------------------\n# Check that there is enough data to create graph\n# ----------------------------------------------------\nfunction error_check( $bug_count, $title ) {\n\tif( 0 == $bug_count ) {\n\t\terror_text( $title, plugin_lang_get( 'not_enough_data' ) );\n\t}\n}\n\nfunction error_text( $title, $text ) {\n\t\tif( OFF == plugin_config_get( 'eczlibrary' ) ) {\n\n\t\t\t$t_graph_font = graph_get_font();\n\n\t\t\t$graph = new CanvasGraph( 300, 380 );\n\n\t\t\t$txt = new Text( $text, 150, 100 );\n\t\t\t$txt->Align( \"center\", \"center\", \"center\" );\n\t\t\t$txt->SetFont( $t_graph_font, FS_BOLD );\n\t\t\t$graph->title->Set( $title );\n\t\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\t\t\t$graph->AddText( $txt );\n\t\t\t$graph->Stroke();\n\t\t} else {\n\t\t\t$im = imagecreate(300, 300);\n\t\t\t/* @todo check: error graphs dont support utf8 */\n\t\t\t$bg = imagecolorallocate($im, 255, 255, 255);\n\t\t\t$textcolor = imagecolorallocate($im, 0, 0, 0);\n\t\t\timagestring($im, 5, 0, 0, $text, $textcolor);\n\t\t\theader('Content-type: image/png');\n\t\t\timagepng($im);\n\t\t\timagedestroy($im);\n\t\t}\n\tdie;\n}\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n\t/**\n\t * @package MantisBT\n\t * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n\t * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n\t * @link http://www.mantisbt.org\n\t */\n\t /**\n\t  * MantisBT Core API's\n\t  */\n\trequire_once( 'core.php' );\n\n\trequire_once( 'Period.php' );\n\trequire_once( 'graph_api.php' );\n\n\taccess_ensure_project_level( config_get( 'view_summary_threshold' ) );\n\n\t$f_width = gpc_get_int( 'width', 600 );\n\t$t_ar = plugin_config_get( 'bar_aspect' );\n\t$t_interval = new Period();\n\t$t_interval->set_period_from_selector( 'interval' );\n\t$f_show_as_table = gpc_get_bool( 'show_table', FALSE );\n\t$f_summary = gpc_get_bool( 'summary', FALSE );\n\n\t$t_interval_days = $t_interval->get_elapsed_days();\n\tif ( $t_interval_days <= 14 ) {\n\t    $t_incr = 60 * 60; // less than 14 days, use hourly\n\t} else if ( $t_interval_days <= 92 ) {\n\t    $t_incr = 24 * 60 * 60; // less than three month, use daily\n\t} else {\n\t    $t_incr = 7 * 24 * 60 * 60; // otherwise weekly\n\t}\n\n\t$f_page_number = 1;\n\n\t$t_per_page = -1;\n\t$t_bug_count = null;\n\t$t_page_count = 0;\n\n\t$t_filter = current_user_get_bug_filter();\n    $t_filter['_view_type']\t= 'advanced';\n    $t_filter['show_status'] = array(META_FILTER_ANY);\n\t$t_filter['sort'] = '';\n\t$rows = filter_get_bug_rows( $f_page_number, $t_per_page, $t_page_count, $t_bug_count, $t_filter, null, null, true );\n\tif ( count($rows) == 0 ) {\n\t\t// no data to graph\n\t\texit();\n\t}\n\n\t$t_bug_table\t\t\t= db_get_table( 'mantis_bug_table' );\n\t$t_bug_hist_table\t\t\t= db_get_table( 'mantis_bug_history_table' );\n\n\t$t_marker = array();\n\t$t_data = array();\n\t$t_ptr = 0;\n\t$t_end = $t_interval->get_end_timestamp();\n\t$t_start = $t_interval->get_start_timestamp();\n\n    $t_resolved = config_get( 'bug_resolved_status_threshold' );\n    $t_closed = config_get( 'bug_closed_status_threshold' );\n\n    $t_bug = array();\n    $t_bug_cat = array(); // save categoties or bugs to look up resolved ones.\n    $t_category = array();\n\n\t// walk through all issues and grab their category for 'now'\n\t$t_marker[$t_ptr] = time();\n\t$t_data[$t_ptr] = array();\n\tforeach ($rows as $t_row) {\n\t    // the following function can treat the resolved parameter as an array to match\n        $t_cat = category_get_name( $t_row->category_id );\n        if ($t_cat == '')\n            $t_cat = 'none';\n\t    if ( !access_compare_level( $t_row->status, $t_resolved ) ) {\n\t        if (in_array($t_cat, $t_category)) {\n                $t_data[$t_ptr][$t_cat] ++;\n            } else {\n                $t_data[$t_ptr][$t_cat] = 1;\n                $t_category[] = $t_cat;\n            }\n        }\n        $t_bug[] = $t_row->id;\n        $t_bug_cat[$t_row->id] = $t_cat;\n\t}\n\n    // get the history for these bugs over the interval required to offset the data\n    // type = 0 and field=status are status changes\n    // type = 1 are new bugs\n    $t_select = 'SELECT bug_id, type, field_name, old_value, new_value, date_modified FROM '.$t_bug_hist_table.\n        ' WHERE bug_id in ('.implode(',', $t_bug).') and '.\n            '( (type='.NORMAL_TYPE.' and field_name=\\'category\\') or '.\n                '(type='.NORMAL_TYPE.' and field_name=\\'status\\') or type='.NEW_BUG.' ) and '.\n                'date_modified >= \\''. $t_start .'\\''.\n            ' order by date_modified DESC';\n    $t_result = db_query( $t_select );\n\t$row = db_fetch_array( $t_result );\n\n\tfor ($t_now = time() - $t_incr; $t_now >= $t_start; $t_now -= $t_incr) {\n\t    // walk through the data points and use the data retrieved to update counts\n\t    while( ( $row !== false ) && ( $row['date_modified'] >= $t_now ) ) {\n\t        switch ($row['type']) {\n    \t        case 0: // updated bug\n    \t            if ($row['field_name'] == 'category') {\n\t                    $t_cat = $row['new_value'];\n            \t        if ($t_cat == '')\n            \t            $t_cat = 'none';\n            \t        if (in_array($t_cat, $t_category)) {\n                            $t_data[$t_ptr][$t_cat] --;\n                        } else {\n                            $t_data[$t_ptr][$t_cat] = 0;\n                            $t_category[] = $t_cat;\n                        }\n\t                    $t_cat = $row['old_value'];\n            \t        if ($t_cat == '')\n            \t            $t_cat = 'none';\n            \t        if (in_array($t_cat, $t_category)) {\n                            $t_data[$t_ptr][$t_cat] ++;\n                        } else {\n                            $t_data[$t_ptr][$t_cat] = 1;\n                            $t_category[] = $t_cat;\n                        }\n                        // change the category associated with the bug to match in case the bug was\n                        //  created during the scan\n                        $t_bug_cat[$row['bug_id']] = $t_cat;\n                    } else { // change of status access_compare_level( $t_row['status'], $t_resolved )\n                        if ( access_compare_level( $row['new_value'], $t_resolved ) &&\n                                !access_compare_level( $row['old_value'], $t_resolved ) ) {\n                            // transition from open to closed\n                            $t_cat = $t_bug_cat[$row['bug_id']];\n            \t            if ($t_cat == '')\n            \t                $t_cat = 'none';\n            \t            if (in_array($t_cat, $t_category)) {\n                                $t_data[$t_ptr][$t_cat] ++;\n                            } else {\n                                $t_data[$t_ptr][$t_cat] = 1;\n                                $t_category[] = $t_cat;\n                            }\n                        }\n                    }\n                    break;\n    \t        case 1: // new bug\n                    $t_cat = $t_bug_cat[$row['bug_id']];\n    \t            if ($t_cat == '')\n    \t                $t_cat = 'none';\n    \t            if (in_array($t_cat, $t_category)) {\n                        $t_data[$t_ptr][$t_cat] --;\n                    } else {\n                        $t_data[$t_ptr][$t_cat] = 0;\n                        $t_category[] = $t_cat;\n                    }\n                    break;\n            }\n        \t$row = db_fetch_array( $t_result );\n        }\n\n\t    if ($t_now <= $t_end) {\n    \t    $t_marker[$t_ptr] = $t_now;\n\t        $t_ptr++;\n\t        foreach ( $t_category as $t_cat ) {\n\t            $t_data[$t_ptr][$t_cat] = $t_data[$t_ptr-1][$t_cat];\n            }\n        }\n\t}\n    $t_bin_count = $t_ptr;\n// drop any categories that have no counts\n//  These arise when bugs are opened and closed within the data intervals\n    $t_count_cat = count( $t_category );\n    for ( $t=0; $t<$t_count_cat; $t++ ) {\n        $t_cat = $t_category[ $t ];\n        $t_not_zero = false;\n        for ($t_ptr=0; $t_ptr<$t_bin_count; $t_ptr++) {\n            if ( isset( $t_data[$t_ptr][$t_cat] ) && ( $t_data[$t_ptr][$t_cat] > 0 ) ) {\n                $t_not_zero = true;\n                break;\n            }\n        }\n        if ( !$t_not_zero ) {\n            unset( $t_category[ $t ] );\n\t\t}\n    }\n// sort and display the results\n    sort($t_category);\n    if ($f_show_as_table) {\n\t\t$t_date_format = config_get( 'short_date_format' );\n        html_begin();\n        html_head_begin();\n        html_css();\n        html_content_type();\n        html_title( lang_get( 'by_category' ) );\n    \thtml_head_end();\n    \thtml_body_begin();\n\t    echo '<table class=\"width100\"><tr><td></td>';\n        foreach ( $t_category as $t_cat ) {\n            echo '<th>'.$t_cat.'</th>';\n        }\n        echo '</tr>';\n\t    for ($t_ptr=0; $t_ptr<$t_bin_count; $t_ptr++) {\n            echo '<tr class=\"row-'.($t_ptr%2+1).'\"><td>'.$t_ptr.' ('. date( $t_date_format, $t_marker[$t_ptr] ) .')'.'</td>';\n            foreach ( $t_category as $t_cat ) {\n                echo '<td>'.(isset($t_data[$t_ptr][$t_cat]) ? $t_data[$t_ptr][$t_cat] : 0).'</td>';\n            }\n            echo '</tr>';\n        }\n\t    echo '</table>';\n    \thtml_body_end();\n    \thtml_end();\n\t} else {\n\t    // reverse the array and reorder the data, if necessary\n\t    $t_metrics = array();\n\t    for ($t_ptr=0; $t_ptr<$t_bin_count; $t_ptr++) {\n\t        $t = $t_bin_count - $t_ptr - 1;\n\t        $t_metrics[0][$t_ptr] = $t_marker[$t];\n            $i = 0;\n            foreach ( $t_category as $t_cat ) {\n        \t    $t_metrics[++$i][$t_ptr] = isset($t_data[$t][$t_cat]) ? $t_data[$t][$t_cat] : 0;\n            }\n\t    }\n\t    array_unshift( $t_category, '' ); // add placeholder\n\t    graph_bydate( $t_metrics, $t_category, lang_get( 'by_category' ), $f_width, $f_width * $t_ar );\n    }\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n\t/**\n\t * @package MantisBT\n\t * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n\t * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n\t * @link http://www.mantisbt.org\n\t */\n\t /**\n\t  * MantisBT Core API's\n\t  */\n\trequire_once( 'core.php' );\n\n\trequire_once( 'Period.php' );\n\trequire_once( 'graph_api.php' );\n\n\taccess_ensure_project_level( config_get( 'view_summary_threshold' ) );\n\n\t$f_width = gpc_get_int( 'width', 600 );\n\t$t_ar = plugin_config_get( 'bar_aspect' );\n\t$t_interval = new Period();\n\t$t_interval->set_period_from_selector( 'interval' );\n\t$f_show_as_table = gpc_get_bool( 'show_table', FALSE );\n\t$f_summary = gpc_get_bool( 'summary', FALSE );\n\n\t$t_interval_days = $t_interval->get_elapsed_days();\n\tif ( $t_interval_days <= 14 ) {\n\t    $t_incr = 60 * 60; // less than 14 days, use hourly\n\t} else if ( $t_interval_days <= 92 ) {\n\t    $t_incr = 24 * 60 * 60; // less than three months, use daily\n\t} else {\n\t    $t_incr = 7 * 24 * 60 * 60; // otherwise weekly\n\t}\n\n\t$f_page_number = 1;\n\n\t$t_per_page = -1;\n\t$t_bug_count = null;\n\t$t_page_count = 0;\n\n\t$t_filter = current_user_get_bug_filter();\n    $t_filter['_view_type']\t= 'advanced';\n    $t_filter['show_status'] = array(META_FILTER_ANY);\n\t$t_filter['sort'] = '';\n\t$rows = filter_get_bug_rows( $f_page_number, $t_per_page, $t_page_count, $t_bug_count, $t_filter, null, null, true );\n\tif ( count($rows) == 0 ) {\n\t\t// no data to graph\n\t\texit();\n\t}\n\n\t$t_bug_table\t\t\t= db_get_table( 'mantis_bug_table' );\n\t$t_bug_hist_table\t\t\t= db_get_table( 'mantis_bug_history_table' );\n\n\t$t_marker = array();\n\t$t_data = array();\n\t$t_ptr = 0;\n\t$t_end = $t_interval->get_end_timestamp();\n\t$t_start = $t_interval->get_start_timestamp();\n\n\tif( $t_end == false || $t_start == false ) {\n\t\treturn;\n\t}\n\t// grab all status levels\n\t$t_status_arr  = MantisEnum::getAssocArrayIndexedByValues( config_get( 'status_enum_string' ) );\n\t$t_status_labels  = MantisEnum::getAssocArrayIndexedByValues( lang_get( 'status_enum_string' ) );\n\t$t_default_bug_status = config_get( 'bug_submit_status' );\n\n    $t_bug = array();\n    $t_view_status = array();\n\n\t// walk through all issues and grab their status for 'now'\n\t$t_marker[$t_ptr] = time();\n\tforeach ($rows as $t_row) {\n\t    if ( isset( $t_data[$t_ptr][$t_row->status] ) ) {\n            $t_data[$t_ptr][$t_row->status] ++;\n\t    } else {\n            $t_data[$t_ptr][$t_row->status] = 1;\n            $t_view_status[$t_row->status] =\n                isset($t_status_arr[$t_row->status]) ? $t_status_arr[$t_row->status] : '@'.$t_row->status.'@';\n        }\n        $t_bug[] = $t_row->id;\n\t}\n\n    // get the history for these bugs over the interval required to offset the data\n    // type = 0 and field=status are status changes\n    // type = 1 are new bugs\n    $t_select = 'SELECT bug_id, type, old_value, new_value, date_modified FROM '.$t_bug_hist_table.\n        ' WHERE bug_id in ('.implode(',', $t_bug).\n        ') and ( (type='.NORMAL_TYPE.' and field_name=\\'status\\')\n            or type='.NEW_BUG.' ) and date_modified >= \\''. $t_start .'\\''.\n        ' order by date_modified DESC';\n    $t_result = db_query( $t_select );\n\t$t_row = db_fetch_array( $t_result );\n\n\tfor ($t_now = time() - $t_incr; $t_now >= $t_start; $t_now -= $t_incr) {\n\t    // walk through the data points and use the data retrieved to update counts\n\t    while( ( $t_row !== false ) && ( $t_row['date_modified'] >= $t_now ) ) {\n\t        switch ($t_row['type']) {\n    \t        case 0: // updated bug\n        \t        if ( isset( $t_data[$t_ptr][$t_row['new_value']] ) ) {\n                        if ( $t_data[$t_ptr][$t_row['new_value']] > 0 )\n                            $t_data[$t_ptr][$t_row['new_value']] --;\n        \t        } else {\n                        $t_data[$t_ptr][$t_row['new_value']] = 0;\n                        $t_view_status[$t_row['new_value']] =\n                            isset($t_status_arr[$t_row['new_value']]) ? $t_status_arr[$t_row['new_value']] : '@'.$t_row['new_value'].'@';\n                    }\n        \t        if ( isset( $t_data[$t_ptr][$t_row['old_value']] ) ) {\n                        $t_data[$t_ptr][$t_row['old_value']] ++;\n        \t        } else {\n                        $t_data[$t_ptr][$t_row['old_value']] = 1;\n                        $t_view_status[$t_row['old_value']] =\n                            isset($t_status_arr[$t_row['old_value']]) ? $t_status_arr[$t_row['old_value']] : '@'.$t_row['old_value'].'@';\n                    }\n                    break;\n\t\t\t\tcase 1: // new bug\n\t\t\t\t\tif ( isset( $t_data[$t_ptr][$t_default_bug_status] ) ) {\n\t\t\t\t\t\tif ( $t_data[$t_ptr][$t_default_bug_status] > 0 )\n                            $t_data[$t_ptr][$t_default_bug_status] --;\n    \t            } else {\n                        $t_data[$t_ptr][$t_default_bug_status] = 0;\n                        $t_view_status[$t_default_bug_status] =\n                            isset( $t_status_arr[$t_default_bug_status] ) ? $t_status_arr[$t_default_bug_status] : '@' . $t_default_bug_status . '@';\n                    }\n                    break;\n            }\n        \t$t_row = db_fetch_array( $t_result );\n        }\n\n\t    if ($t_now <= $t_end) {\n\t        $t_ptr++;\n    \t    $t_marker[$t_ptr] = $t_now;\n\t        foreach ( $t_view_status as $t_status => $t_label ) {\n\t            $t_data[$t_ptr][$t_status] = $t_data[$t_ptr-1][$t_status];\n            }\n        }\n\t}\n\n    ksort($t_view_status);\n    /* @todo - these should probably be separate strings, but in the summary page context,\n        the string is used as the title for all columns */\n    $t_label_string = lang_get('orct'); //use the (open/resolved/closed/total) label\n    $t_label_strings = explode('/', utf8_substr($t_label_string, 1, strlen($t_label_string)-2));\n\n    // add headers for table\n    if ($f_show_as_table) {\n\t\t$t_date_format = config_get( 'short_date_format' );\n        html_begin();\n        html_head_begin();\n        html_css();\n        html_content_type();\n        html_title( lang_get( 'by_status' ) );\n    \thtml_head_end();\n    \thtml_body_begin();\n\t    echo '<table class=\"width100\"><tr><td></td>';\n        if ($f_summary) {\n            echo '<th>' . $t_label_strings[0] . '</th>';\n            echo '<th>' . $t_label_strings[1] . '</th>';\n            echo '<th>' . $t_label_strings[2] . '</th>';\n        } else {\n            foreach ( $t_view_status as $t_status => $t_label ) {\n                echo '<th>'.$t_label.' ('.$t_status.')</th>';\n            }\n        }\n        echo '</tr>';\n    }\n\n\t$t_resolved = config_get( 'bug_resolved_status_threshold' );\n\t$t_closed = config_get( 'bug_closed_status_threshold' );\n\t$t_bin_count = $t_ptr;\n\t$t_labels = array();\n\t$i = 0;\n    if ($f_summary) {\n\n        $t_labels[++$i] = $t_label_strings[0];\n        $t_labels[++$i] = $t_label_strings[1];\n        $t_labels[++$i] = $t_label_strings[2];\n    } else {\n        foreach ( $t_view_status as $t_status => $t_label ) {\n            $t_labels[++$i] = isset($t_status_labels[$t_status]) ? $t_status_labels[$t_status] : lang_get_defaulted($t_label);\n        }\n    }\n    $t_label_count = $i;\n\n\t// reverse the array and consolidate the data, if necessary\n\t$t_metrics = array();\n\tfor ($t_ptr=0; $t_ptr<$t_bin_count; $t_ptr++) {\n\t    $t = $t_bin_count - $t_ptr;\n\t    $t_metrics[0][$t_ptr] = $t_marker[$t];\n\t    if ($f_summary) {\n\t        $t_metrics[1][$t_ptr] = 0;\n\t        $t_metrics[2][$t_ptr] = 0;\n\t        $t_metrics[3][$t_ptr] = 0;\n            foreach ( $t_view_status as $t_status => $t_label ) {\n                if ( isset( $t_data[$t][$t_status] ) ) {\n                    if ( $t_status < $t_resolved )\n        \t            $t_metrics[1][$t_ptr] += $t_data[$t][$t_status];\n                    else if ( $t_status < $t_closed )\n        \t            $t_metrics[2][$t_ptr] += $t_data[$t][$t_status];\n                    else\n        \t            $t_metrics[3][$t_ptr] += $t_data[$t][$t_status];\n        \t    }\n            }\n        } else {\n            $i = 0;\n            foreach ( $t_view_status as $t_status => $t_label ) {\n                if ( isset( $t_data[$t][$t_status] ) )\n        \t        $t_metrics[++$i][$t_ptr] = $t_data[$t][$t_status];\n        \t    else\n        \t        $t_metrics[++$i][$t_ptr] = 0;\n            }\n        }\n        if ( $f_show_as_table ) {\n            echo '<tr class=\"row-'.($t_ptr%2+1).'\"><td>'.$t_ptr.' ('. date( $t_date_format, $t_metrics[0][$t_ptr] ) .')'.'</td>';\n            for ( $i=1; $i<=$t_label_count; $i++ ) {\n                echo '<td>'.$t_metrics[$i][$t_ptr].'</td>';\n            }\n            echo '</tr>';\n        }\n\n\t}\n    if ($f_show_as_table) {\n        echo '</table>';\n    \thtml_body_end();\n    \thtml_end();\n    } else {\n\t    graph_bydate( $t_metrics, $t_labels, lang_get( 'by_status' ), $f_width, $f_width * $t_ar );\n\t}\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n\t/**\n\t * @package MantisBT\n\t * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n\t * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n\t * @link http://www.mantisbt.org\n\t */\n\t /**\n\t  * MantisBT Core API's\n\t  */\n\trequire_once( 'core.php' );\n\n\trequire_once( 'string_api.php' );\n\n\t$f_project_id = gpc_get_int( 'project_id', helper_get_current_project() );\n\n\t# Check if project documentation feature is enabled.\n\tif ( OFF == config_get( 'enable_project_documentation' ) || !file_is_uploading_enabled() ) {\n\t\taccess_denied();\n\t}\n\n\t# Override the current page to make sure we get the appropriate project-specific configuration\n\t$g_project_override = $f_project_id;\n\n\t$t_user_id = auth_get_current_user_id();\n\t$t_project_file_table = db_get_table( 'mantis_project_file_table' );\n\t$t_project_table = db_get_table( 'mantis_project_table' );\n\t$t_project_user_list_table = db_get_table( 'mantis_project_user_list_table' );\n\t$t_user_table = db_get_table( 'mantis_user_table' );\n\t$t_pub = VS_PUBLIC;\n\t$t_priv = VS_PRIVATE;\n\t$t_admin = config_get_global( 'admin_site_threshold' );\n\n\tif ( $f_project_id == ALL_PROJECTS ) {\n\t\t# Select all the projects that the user has access to\n\t\t$t_projects = user_get_accessible_projects( $t_user_id );\n\t} else {\n\t\t# Select the specific project\n\t\t$t_projects = array( $f_project_id );\n\t}\n\n\t$t_projects[] = ALL_PROJECTS; # add \"ALL_PROJECTS to the list of projects to fetch\n\n\t$t_reqd_access = config_get( 'view_proj_doc_threshold' );\n\tif ( is_array( $t_reqd_access ) ) {\n\t\tif ( 1 == count( $t_reqd_access ) ) {\n\t\t\t$t_access_clause = \"= \" . array_shift( $t_reqd_access ) . \" \";\n\t\t} else {\n\t\t\t$t_access_clause = \"IN (\" . implode( ',', $t_reqd_access ) . \")\";\n\t\t}\n\t} else {\n\t\t$t_access_clause = \">= $t_reqd_access \";\n\t}\n\n\t$query = \"SELECT pft.id, pft.project_id, pft.filename, pft.filesize, pft.title, pft.description, pft.date_added\n\t\t\t\tFROM $t_project_file_table pft\n\t\t\t\t\tLEFT JOIN $t_project_table pt ON pft.project_id = pt.id\n\t\t\t\t\tLEFT JOIN $t_project_user_list_table pult\n\t\t\t\t\t\tON pft.project_id = pult.project_id AND pult.user_id = $t_user_id\n\t\t\t\t\tLEFT JOIN $t_user_table ut ON ut.id = $t_user_id\n\t\t\t\tWHERE pft.project_id in (\" . implode( ',', $t_projects ) . \") AND\n\t\t\t\t\t( ( ( pt.view_state = $t_pub OR pt.view_state is null ) AND pult.user_id is null AND ut.access_level $t_access_clause ) OR\n\t\t\t\t\t\t( ( pult.user_id = $t_user_id ) AND ( pult.access_level $t_access_clause ) ) OR\n\t\t\t\t\t\t( ut.access_level >= $t_admin ) )\n\t\t\t\tORDER BY pt.name ASC, pft.title ASC\";\n\t$result = db_query( $query );\n\t$num_files = db_num_rows( $result );\n\n\thtml_page_top( lang_get( 'docs_link' ) );\n?>\n<br />\n<div align=\"center\">\n<table class=\"width100\" cellspacing=\"1\">\n<tr>\n\t<td class=\"form-title\">\n\t\t<?php echo lang_get( 'project_documentation_title' ) ?>\n\t</td>\n\t<td class=\"right\">\n\t\t<?php print_doc_menu( 'proj_doc_page.php' ) ?>\n\t</td>\n</tr>\n<?php\n\tfor ($i=0;$i<$num_files;$i++) {\n\t\t$row = db_fetch_array( $result );\n\t\textract( $row, EXTR_PREFIX_ALL, 'v' );\n\t\t$v_filesize = number_format( $v_filesize );\n\t\t$v_title = string_display( $v_title );\n\t\t$v_description = string_display_links( $v_description );\n\t\t$v_date_added = date( config_get( 'normal_date_format' ), $v_date_added );\n\n?>\n<tr valign=\"top\" <?php echo helper_alternate_class( $i ) ?>>\n\t<td>\n<?php\n\t\t$t_href = '<a href=\"file_download.php?file_id='.$v_id.'&amp;type=doc\">';\n\t\techo $t_href;\n\t\tprint_file_icon( $v_filename );\n\t\techo '</a>&#160;' . $t_href . $v_title . '</a> (' . $v_filesize . lang_get( 'word_separator' ) . lang_get( 'bytes' ) . ')';\n?>\n\t<br />\n\t<span class=\"small\">\n<?php\n\t\tif( $v_project_id == ALL_PROJECTS ) {\n\t\t\techo lang_get( 'all_projects' ) . '<br />';\n\t\t}\n\t\telse if( $v_project_id != $f_project_id ) {\n\t\t\t$t_project_name = project_get_name( $v_project_id );\n\t\t\techo $t_project_name . '<br />';\n\t\t}\n\t\techo '(' . $v_date_added . ')';\n\t\tif ( access_has_project_level( config_get( 'upload_project_file_threshold', null, null, $v_project_id ), $v_project_id ) ) {\n\t\t\techo '&#160;';\n\t\t\tprint_button( 'proj_doc_edit_page.php?file_id='.$v_id, lang_get( 'edit_link' ) );\n\t\t\techo '&#160;';\n\t\t\tprint_button( 'proj_doc_delete.php?file_id=' . $v_id, lang_get( 'delete_link' ) );\n\t\t}\n?>\n\t</span>\n\t</td>\n\t<td>\n\t\t<?php echo $v_description ?>\n\t</td>\n</tr>\n<?php\n\t} # end for loop\n?>\n</table>\n</div>\n\n<?php\n\thtml_page_bottom();\n"], "fixing_code": ["<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @package MantisBT\n * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n/**\n * MantisBT Core API's\n */\nrequire_once( dirname( dirname( __FILE__ ) ) . DIRECTORY_SEPARATOR . 'core.php' );\n\naccess_ensure_global_level( config_get_global( 'admin_site_threshold' ) );\n\n# --------------------\nfunction helper_table_row_count( $p_table ) {\n\t$t_table = $p_table;\n\t$t_query = \"SELECT COUNT(*) FROM $t_table\";\n\t$t_result = db_query_bound( $t_query );\n\t$t_count = db_result( $t_result );\n\n\treturn $t_count;\n}\n\n# --------------------\nfunction print_table_stats( $p_table_name ) {\n\t$t_count = helper_table_row_count( $p_table_name );\n\techo \"$p_table_name = $t_count records<br />\";\n}\n\necho '<html><head><title>MantisBT Database Statistics</title></head><body>';\n\necho '<h1>MantisBT Database Statistics</h1>';\n\nforeach( db_get_table_list() as $t_table ) {\n\tif( db_table_exists( $t_table ) ) {\n\t\tprint_table_stats( $t_table );\n\t}\n}\n\necho '</body></html>';\n", "<?php\n# MantisConnect - A webservice interface to Mantis Bug Tracker\n# Copyright (C) 2004-2013  Victor Boctor - vboctor@users.sourceforge.net\n# This program is distributed under dual licensing.  These include\n# GPL and a commercial licenses.  Victor Boctor reserves the right to\n# change the license of future releases.\n# See docs/ folder for more details\n\n\n/**\n * Use a standard filter to get issues associated with the specified user.\n *\n * @param $p_username logged in user name.\n * @param $p_password login password.\n * @param $p_project_id id of project to filter on, or ALL_PROJECTS.\n * @param $p_filter_type The name of the filter to apply\n *        \"assigned\" - target user specified - issues assigned to target user that are not resolved.\n *        \"assigned\" - target user 0 - unassigned issues that are not resolved.\n *        \"reported\" - target user specified - issues reported by user.\n *        \"reported\" - target user 0 - will throw.\n *        \"monitored\" - target user specified - issues monitored by user.\n *        \"monitored\" - target user 0 - issues not monitored.\n * @param $p_target_user AccountData for target user, can include id, name, or both.\n * @param $p_page_number the page to return (1 based).\n * @param $p_per_page number of issues per page.\n * @return IssueDataArray a page of matching issues.\n */\nfunction mc_project_get_issues_for_user( $p_username, $p_password, $p_project_id, $p_filter_type, $p_target_user, $p_page_number, $p_per_page ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif ( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\tif ( $p_project_id != ALL_PROJECTS && !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\tif ( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\n\t$t_orig_page_number = $p_page_number < 1 ? 1 : $p_page_number;\n\t$t_page_count = 0;\n\t$t_bug_count = 0;\n\t$t_target_user_id = mci_get_user_id( $p_target_user );\n\t$t_show_sticky = true;\n\n\tif ( strcasecmp( $p_filter_type, 'assigned' ) == 0 ) {\n\t\t$t_filter = filter_create_assigned_to_unresolved( $p_project_id, $t_target_user_id );\n\t} else if ( strcasecmp( $p_filter_type, 'reported' ) == 0 ) {\n\t\t// target id 0 for reporter doesn't make sense.\n\t\tif ( $t_target_user_id == 0 ) {\n\t\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Target user id must be specified for 'reported' filter.\" );\n\t\t}\n\n\t\t$t_filter = filter_create_reported_by( $p_project_id, $t_target_user_id );\n\t} else if ( strcasecmp( $p_filter_type, 'monitored' ) == 0 ) {\n\t\t$t_filter = filter_create_monitored_by( $p_project_id, $t_target_user_id );\n\t} else {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Unknown filter type '$p_filter_type'.\" );\n\t}\n\n\t$t_rows = filter_get_bug_rows( $p_page_number, $p_per_page, $t_page_count, $t_bug_count, $t_filter, $p_project_id, $t_target_user_id, $t_show_sticky );\n\t\n\t$t_result = array();\n\t\n\t// the page number was moved back, so we have exceeded the actual page number, see bug #12991\n\tif ( $t_orig_page_number > $p_page_number ) {\n\t    return $t_result;\t\n\t}\n\n\tforeach( $t_rows as $t_issue_data ) {\n\t\t$t_result[] = mci_issue_data_as_array( $t_issue_data, $t_user_id, $t_lang );\n\t}\n\n\treturn $t_result;\n}\n\nfunction mc_project_get_issues( $p_username, $p_password, $p_project_id, $p_page_number, $p_per_page ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\t\n\tif( $p_project_id != ALL_PROJECTS && !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_orig_page_number = $p_page_number < 1 ? 1 : $p_page_number;\n\t$t_page_count = 0;\n\t$t_bug_count = 0;\n\t$g_project_override = $p_project_id;\n\n\t$t_rows = filter_get_bug_rows( $p_page_number, $p_per_page, $t_page_count, $t_bug_count, null, $p_project_id );\n\t\n\t$t_result = array();\n\t\n\t// the page number was moved back, so we have exceeded the actual page number, see bug #12991\n\tif ( $t_orig_page_number > $p_page_number )\n\t    return $t_result;\t\n\n\tforeach( $t_rows as $t_issue_data ) {\n\t\t$t_result[] = mci_issue_data_as_array( $t_issue_data, $t_user_id, $t_lang );\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get all projects accessible by the given user.\n *\n * @param string $p_username  The name of the user trying to access the project list.\n * @param string $p_password  The password of the user.\n * @return Array  suitable to be converted into a ProjectDataArray\n */\nfunction mc_projects_get_user_accessible( $p_username, $p_password ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !mci_has_readonly_access( $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\n\t$t_result = array();\n\tforeach( user_get_accessible_projects( $t_user_id ) as $t_project_id ) {\n\t\t$t_project_row = project_cache_row( $t_project_id );\n\t\t$t_project = array();\n\t\t$t_project['id'] = $t_project_id;\n\t\t$t_project['name'] = $t_project_row['name'];\n\t\t$t_project['status'] = mci_enum_get_array_by_id( $t_project_row['status'], 'project_status', $t_lang );\n\t\t$t_project['enabled'] = $t_project_row['enabled'];\n\t\t$t_project['view_state'] = mci_enum_get_array_by_id( $t_project_row['view_state'], 'project_view_state', $t_lang );\n\t\t$t_project['access_min'] = mci_enum_get_array_by_id( $t_project_row['access_min'], 'access_levels', $t_lang );\n\t\t$t_project['file_path'] = array_key_exists( 'file_path', $t_project_row ) ? $t_project_row['file_path'] : \"\";\n\t\t$t_project['description'] = array_key_exists( 'description', $t_project_row ) ? $t_project_row['description'] : \"\";\n\t\t$t_project['subprojects'] = mci_user_get_accessible_subprojects( $t_user_id, $t_project_id, $t_lang );\n\t\t$t_result[] = $t_project;\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get all categories of a project.\n *\n * @param string $p_username  The name of the user trying to access the categories.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the categories for.\n * @return Array  of categorie names\n */\nfunction mc_project_get_categories( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_result = array();\n\t$t_cat_array = category_get_all_rows( $p_project_id );\n\tforeach( $t_cat_array as $t_category_row ) {\n\t\t$t_result[] = $t_category_row['name'];\n\t}\n\treturn $t_result;\n}\n\n/**\n * Add a new category to a project\n * @param string $p_username  The name of the user trying to access the categories.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the categories for.\n * @param string $p_category_name The name of the new category to add\n * @return integer id of the new category\n */\n\nfunction mc_project_add_category($p_username, $p_password, $p_project_id, $p_category_name ) {\n        global $g_project_override;\n        $t_user_id = mci_check_login( $p_username, $p_password );\n\n        if( $t_user_id === false ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        if( !project_exists( $p_project_id ) ) {\n                return SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n        }\n        $g_project_override = $p_project_id;\n\n        if( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $p_project_id ) ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        return category_add( $p_project_id, $p_category_name );\n}\n\n/**\n * Delete a category of a project\n * @param string $p_username  The name of the user trying to access the categories.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the categories for.\n * @param string $p_category_name The name of the category to delete\n * @return bool returns true or false depending on the success of the delete action\n */\n\nfunction mc_project_delete_category ($p_username, $p_password, $p_project_id, $p_category_name) {\n        global $g_project_override;\n        $t_user_id = mci_check_login( $p_username, $p_password );\n\n        if( $t_user_id === false ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        if( !project_exists( $p_project_id ) ) {\n                return SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n        }\n\n        $g_project_override = $p_project_id;\n\n        if( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $p_project_id ) ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        // find the id of the category\n        $p_category_id = category_get_id_by_name( $p_category_name, $p_project_id );\n\n        // delete the category and link all the issue to the default category\n        return category_remove( $p_category_id, config_get('default_category_for_moves') );\n}\n\n/**\n * Update a category of a project\n * @param string $p_username  The name of the user trying to access the categories.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the categories for.\n * @param string $p_category_name The name of the category to rename\n * @param string $p_category_name_new The new name of the category to rename\n * @param int $p_assigned_to User ID that category is assigned to\n * @return bool returns true or false depending on the success of the update action\n */\n\nfunction mc_project_rename_category_by_name( $p_username, $p_password, $p_project_id, $p_category_name, $p_category_name_new, $p_assigned_to ) {\n        global $g_project_override;\n        $t_user_id = mci_check_login( $p_username, $p_password );\n\n        if ( null === $p_assigned_to ) {\n                return SoapObjectsFactory::newSoapFault( 'Client', 'p_assigned_to needed' );\n        }\n\n        if( $t_user_id === false ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        if( !project_exists( $p_project_id ) ) {\n                return SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n        }\n\n        $g_project_override = $p_project_id;\n\n        if( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $p_project_id ) ) {\n                return mci_soap_fault_access_denied();\n        }\n\n        // find the id of the category\n        $p_category_id = category_get_id_by_name( $p_category_name, $p_project_id );\n\n        // update the category\n        return category_update( $p_category_id, $p_category_name_new, $p_assigned_to );\n}\n\n/**\n * Get all versions of a project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the versions for.\n * @return Array  representing a ProjectVersionDataArray structure.\n */\nfunction mc_project_get_versions( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$t_result = array();\n\tforeach( version_get_all_rows( $p_project_id, VERSION_ALL ) as $t_version ) {\n\t\t$t_result[] = mci_project_version_as_array ( $t_version );\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get all released versions of a project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the versions for.\n * @return Array  representing a ProjectVersionDataArray structure.\n */\nfunction mc_project_get_released_versions( $p_username, $p_password, $p_project_id ) {\n\tglobal $g_project_override;\n    $t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\t\n\t$g_project_override = $p_project_id;\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_result = array();\n\n\tforeach( version_get_all_rows( $p_project_id, VERSION_RELEASED ) as $t_version ) {\n\t\t$t_result[] = mci_project_version_as_array ( $t_version );\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get all unreleased (a.k.a. future) versions of a project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the versions for.\n * @return Array  representing a ProjectVersionDataArray structure.\n */\nfunction mc_project_get_unreleased_versions( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_result = array();\n\n\tforeach( version_get_all_rows( $p_project_id, VERSION_FUTURE ) as $t_version )\n\t\t$t_result[] = mci_project_version_as_array ( $t_version );\n\n\treturn $t_result;\n}\n\n/**\n * Submit the specified version details.\n *\n * @param string $p_username  The name of the user trying to add the issue.\n * @param string $p_password  The password of the user.\n * @param Array $p_version  A ProjectVersionData structure containing information about the new verison.\n * @return integer  The id of the created version.\n */\nfunction mc_project_version_add( $p_username, $p_password, $p_version ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\t$p_version = SoapObjectsFactory::unwrapObject( $p_version );\n\n\t$t_project_id = $p_version['project_id'];\n\t$g_project_override = $t_project_id;\n\t$t_name = $p_version['name'];\n\t$t_released = $p_version['released'];\n\t$t_description = $p_version['description'];\n\t$t_date_order =  $p_version['date_order'];\n\tif ( is_blank( $t_date_order ) ) \n\t    $t_date_order = null;\n\telse \n\t\t$t_date_order = SoapObjectsFactory::parseDateTimeString($t_date_order);\n\t\n\t$t_obsolete = isset ( $p_version['obsolete'] ) ? $p_version['obsolete'] : false;\n\t\n\tif ( is_blank( $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"project_id\" was missing' );\n\t}\n\n\tif ( !project_exists( $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault('Client', \"Project '$t_project_id' does not exist.\" );\n\t}\n\n\tif ( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif ( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif ( is_blank( $t_name ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"name\" was missing' );\n\t}\n\n\tif ( !version_is_unique( $t_name, $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client',  'Version exists for project');\n\t}\n\n\tif ( $t_released === false ) {\n\t\t$t_released = VERSION_FUTURE;\n\t} else {\n\t\t$t_released = VERSION_RELEASED;\n\t}\n\t\n\tif ( version_add( $t_project_id, $t_name, $t_released, $t_description, $t_date_order, $t_obsolete ) )\n\t\treturn version_get_id( $t_name, $t_project_id );\n\n\treturn null;\n}\n\n/**\n * Submit the specified version details.\n *\n * @param string $p_username  The name of the user trying to update the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_version_id A version's id\n * @param Array $p_version  A ProjectVersionData structure containing information about the new verison.\n * @return bool returns true or false depending on the success of the update action\n */\nfunction mc_project_version_update( $p_username, $p_password, $p_version_id, $p_version ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( is_blank( $p_version_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"version_id\" was missing' );\n\t}\n\n\tif( !version_exists( $p_version_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Version '$p_version_id' does not exist.\" );\n\t}\n\t\n\t$p_version = SoapObjectsFactory::unwrapObject( $p_version );\n\n\t$t_project_id = $p_version['project_id'];\n\t$g_project_override = $t_project_id;\n\t$t_name = $p_version['name'];\n\t$t_released = $p_version['released'];\n\t$t_description = $p_version['description'];\n\t$t_date_order = isset ( $p_version['date_order']) ? SoapObjectsFactory::parseDateTimeString($p_version['date_order']) : null;\n\t$t_obsolete = isset ( $p_version['obsolete'] ) ? $p_version['obsolete'] : false;\n\n\tif ( is_blank( $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"project_id\" was missing' );\n\t}\n\n\tif ( !project_exists( $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$t_project_id' does not exist.\" );\n\t}\n\n\tif ( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif ( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif ( is_blank( $t_name ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"name\" was missing' );\n\t}\n\n\t# check for duplicates\n\t$t_old_version_name = version_get_field( $p_version_id, 'version' );\n\tif ( ( strtolower( $t_old_version_name ) != strtolower( $t_name ) ) && !version_is_unique( $t_name, $t_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Version exists for project' );\n\t}\n\n\tif ( $t_released === false ) {\n\t\t$t_released = VERSION_FUTURE;\n\t} else {\n\t\t$t_released = VERSION_RELEASED;\n\t}\n\n\t$t_version_data = new VersionData();\n\t$t_version_data->id = $p_version_id;\n\t$t_version_data->project_id = $t_project_id;\n\t$t_version_data->version = $t_name;\n\t$t_version_data->description = $t_description;\n\t$t_version_data->released = $t_released;\n\t$t_version_data->date_order = $t_date_order;\n\t$t_version_data->obsolete = $t_obsolete;\n\n\treturn version_update( $t_version_data );\n}\n\n/**\n * Delete a version.\n *\n * @param string $p_username  The name of the user trying to delete the version.\n * @param string $p_password  The password of the user.\n * @param integer $p_version_id A version's id\n * @return bool returns true or false depending on the success of the delete action\n */\nfunction mc_project_version_delete( $p_username, $p_password, $p_version_id ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( is_blank( $p_version_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Mandatory field \"version_id\" was missing' );\n\t}\n\n\tif( !version_exists( $p_version_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Version '$p_version_id' does not exist.\" );\n\t}\n\n\t$t_project_id = version_get_field( $p_version_id, 'project_id' );\n\t$g_project_override = $t_project_id;\n\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif( !mci_has_access( config_get( 'manage_project_threshold' ), $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\treturn version_remove( $p_version_id );\n}\n\n/**\n * Get the custom fields that belong to the specified project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the custom fields for.\n * @return Array  representing a CustomFieldDefinitionDataArray structure.\n */\nfunction mc_project_get_custom_fields( $p_username, $p_password, $p_project_id ) {\n\tglobal $g_project_override;\n\n    $t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_result = array();\n\t$t_related_custom_field_ids = custom_field_get_linked_ids( $p_project_id );\n\n\tforeach( custom_field_get_linked_ids( $p_project_id ) as $t_id ) {\n\t\t$t_def = custom_field_get_definition( $t_id );\n\t\tif( access_has_project_level( $t_def['access_level_r'], $p_project_id ) ) {\n\t\t\t$t_result[] = array(\n\t\t\t\t'field' => array(\n\t\t\t\t\t'id' => $t_def['id'],\n\t\t\t\t\t'name' => $t_def['name'],\n\t\t\t\t),\n\t\t\t\t'type' => $t_def['type'],\n\t\t\t\t'default_value' => $t_def['default_value'],\n\t\t\t\t'possible_values' => $t_def['possible_values'],\n\t\t\t\t'valid_regexp' => $t_def['valid_regexp'],\n\t\t\t\t'access_level_r' => $t_def['access_level_r'],\n\t\t\t\t'access_level_rw' => $t_def['access_level_rw'],\n\t\t\t\t'length_min' => $t_def['length_min'],\n\t\t\t\t'length_max' => $t_def['length_max'],\n\t\t\t\t'display_report' => $t_def['display_report'],\n\t\t\t\t'display_update' => $t_def['display_update'],\n\t\t\t\t'display_resolved' => $t_def['display_resolved'],\n\t\t\t\t'display_closed' => $t_def['display_closed'],\n\t\t\t\t'require_report' => $t_def['require_report'],\n\t\t\t\t'require_update' => $t_def['require_update'],\n\t\t\t\t'require_resolved' => $t_def['require_resolved'],\n\t\t\t\t'require_closed' => $t_def['require_closed'],\n\t\t\t);\n\t\t}\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get the attachments that belong to the specified project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the attachments for.\n * @return Array  representing a ProjectAttachmentDataArray structure.\n */\nfunction mc_project_get_attachments( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\n    $t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$g_project_override = $p_project_id;\n\n\t# Check if project documentation feature is enabled.\n\tif( OFF == config_get( 'enable_project_documentation' ) || !file_is_uploading_enabled() ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_project_file_table = db_get_table( 'mantis_project_file_table' );\n\t$t_project_table = db_get_table( 'mantis_project_table' );\n\t$t_project_user_list_table = db_get_table( 'mantis_project_user_list_table' );\n\t$t_user_table = db_get_table( 'mantis_user_table' );\n\t$t_pub = VS_PUBLIC;\n\t$t_priv = VS_PRIVATE;\n\t$t_admin = config_get_global( 'admin_site_threshold' );\n\n\tif( $p_project_id == ALL_PROJECTS ) {\n\t\t# Select all the projects that the user has access to\n\t\t$t_projects = user_get_accessible_projects( $t_user_id );\n\t} else {\n\t\t# Select the specific project\n\t\t$t_projects = array(\n\t\t\t$p_project_id,\n\t\t);\n\t}\n\n\t$t_projects[] = ALL_PROJECTS; # add ALL_PROJECTS to the list of projects to fetch\n\n\n\t$t_reqd_access = config_get( 'view_proj_doc_threshold' );\n\tif( is_array( $t_reqd_access ) ) {\n\t\tif( 1 == count( $t_reqd_access ) ) {\n\t\t\t$t_access_clause = \"= \" . array_shift( $t_reqd_access ) . \" \";\n\t\t} else {\n\t\t\t$t_access_clause = \"IN (\" . implode( ',', $t_reqd_access ) . \")\";\n\t\t}\n\t} else {\n\t\t$t_access_clause = \">= $t_reqd_access \";\n\t}\n\n\t$query = \"SELECT pft.id, pft.project_id, pft.filename, pft.file_type, pft.filesize, pft.title, pft.description, pft.date_added, pft.user_id\n\t\tFROM $t_project_file_table pft\n\t\tLEFT JOIN $t_project_table pt ON pft.project_id = pt.id\n\t\tLEFT JOIN $t_project_user_list_table pult\n\t\tON pft.project_id = pult.project_id AND pult.user_id = \" . db_param() . \"\n\t\tLEFT JOIN $t_user_table ut ON ut.id = \" . db_param() . \"\n\t\tWHERE pft.project_id in (\" . implode( ',', $t_projects ) . \") AND\n\t\t( ( ( pt.view_state = \" . db_param() . \" OR pt.view_state is null ) AND pult.user_id is null AND ut.access_level $t_access_clause ) OR\n\t\t( ( pult.user_id = \" . db_param() . \" ) AND ( pult.access_level $t_access_clause ) ) OR\n\t\t( ut.access_level = \" . db_param() . \" ) )\n\t\tORDER BY pt.name ASC, pft.title ASC\";\n\t$result = db_query_bound( $query, array( $t_user_id, $t_user_id, $t_pub, $t_user_id, $t_admin ) );\n\t$num_files = db_num_rows( $result );\n\n\t$t_result = array();\n\tfor( $i = 0;$i < $num_files;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\n\t\t$t_attachment = array();\n\t\t$t_attachment['id'] = $row['id'];\n\t\t$t_attachment['filename'] = $row['filename'];\n\t\t$t_attachment['title'] = $row['title'];\n\t\t$t_attachment['description'] = $row['description'];\n\t\t$t_attachment['size'] = $row['filesize'];\n\t\t$t_attachment['content_type'] = $row['file_type'];\n\t\t$t_attachment['date_submitted'] = SoapObjectsFactory::newDateTimeVar( $row['date_added'] );\n\t\t$t_attachment['download_url'] = mci_get_mantis_path() . 'file_download.php?file_id=' . $row['id'] . '&amp;type=doc';\n\t\t$t_attachment['user_id'] = $row['user_id'];\n\t\t$t_result[] = $t_attachment;\n\t}\n\n\treturn $t_result;\n}\n\nfunction mc_project_get_all_subprojects( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_access_denied();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\treturn user_get_all_accessible_subprojects( $t_user_id, $p_project_id );\n}\n\n/**\n * Get a project definition.\n *\n * @param integer $p_project_id  The id of the project to retrieve.\n * @return Array an Array containing the id and the name of the project.\n */\nfunction mci_project_as_array_by_id( $p_project_id ) {\n\t$t_result = array();\n\t$t_result['id'] = $p_project_id;\n\t$t_result['name'] = project_get_name( $p_project_id );\n\treturn $t_result;\n}\n\n/**\n * Get the id of a project via the project's name.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param string $p_project_name  The name of the project to retrieve.\n * @return integer  The id of the project with the given name, -1 if there is no such project.\n */\nfunction mc_project_get_id_from_name( $p_username, $p_password, $p_project_name ) {\n        $t_user_id = mci_check_login( $p_username, $p_password );\n        if( $t_user_id === false ) {\n                return mci_soap_fault_login_failed();\n        }\n        \n        return project_get_id_by_name ( $p_project_name );\n}\n\n\n### MantisConnect Administrative Webservices ###\n\n/**\n * Add a new project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param Array $p_project A new ProjectData structure\n * @return integer the new project's project_id\n */\nfunction mc_project_add( $p_username, $p_password, $p_project ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !mci_has_administrator_access( $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$p_project = SoapObjectsFactory::unwrapObject( $p_project );\n\t\n\n\tif ( !isset( $p_project['name'] ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Required field \"name\" is missing' );\n\t} else {\n\t\t$t_name = $p_project['name'];\n\t}\n\t\n\tif( isset( $p_project['status'] ) ) {\n\t\t$t_status = $p_project['status'];\n\t} else {\n\t\t$t_status = array( 'name' => 'development' ); // development\n\t}\n\t\n\tif( isset( $p_project['view_state'] ) ) {\n\t\t$t_view_state = $p_project['view_state'];\n\t} else {\n\t\t$t_view_state = array( 'id' => VS_PUBLIC );\n\t}\n\t\n\tif ( isset( $p_project['enabled'] ) ) {\n\t\t$t_enabled = $p_project['enabled'];\n\t} else {\n\t\t$t_enabled = true;\n\t}\n\t\n\tif ( isset( $p_project['description'] ) ) {\n\t\t$t_description = $p_project['description'];\n\t} else {\n\t\t$t_description = '';\n\t}\n\t\n\tif ( isset( $p_project['file_path'] ) ) {\t\n\t\t$t_file_path = $p_project['file_path'];\n\t} else { \n\t\t$t_file_path = '';\n\t}\n\t\n\tif ( isset( $p_project['inherit_global'] ) ) { \n\t\t$t_inherit_global = $p_project['inherit_global'];\n\t} else {\n\t\t$t_inherit_global = true;\n\t}\n\t\n\t// check to make sure project doesn't already exist\n\tif( !project_is_name_unique( $t_name ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Project name exists');\n\t}\n\n\t$t_project_status = mci_get_project_status_id( $t_status );\n\t$t_project_view_state = mci_get_project_view_state_id( $t_view_state );\n\n\t// project_create returns the new project's id, spit that out to webservice caller\n\treturn project_create( $t_name, $t_description, $t_project_status, $t_project_view_state, $t_file_path, $t_enabled, $t_inherit_global );\n}\n\n/**\n * Update a project\n *\n * @param string $p_username  The name of the user\n * @param string $p_password  The password of the user\n * @param integer $p_project_id A project's id\n * @param Array $p_project A new ProjectData structure\n * @return bool returns true or false depending on the success of the update action\n */\nfunction mc_project_update( $p_username, $p_password, $p_project_id, $p_project ) {\n    global $g_project_override;\n\n    $t_user_id = mci_check_login( $p_username, $p_password );\n    if( $t_user_id === false ) {\n        return mci_soap_fault_access_denied();\n    }\n\n    if( !mci_has_administrator_access( $t_user_id, $p_project_id ) ) {\n        return mci_soap_fault_access_denied( $t_user_id );\n    }\n\n    if( !project_exists( $p_project_id ) ) {\n        return SoapObjectsFactory::newSoapFault(\"Client\", \"Project '$p_project_id' does not exist.\" );\n    }\n\n    $g_project_override = $p_project_id;\n\n    $p_project = SoapObjectsFactory::unwrapObject( $p_project );\n\n    if ( !isset( $p_project['name'] ) ) {\n        return SoapObjectsFactory::newSoapFault( 'Client', 'Missing required field \\'name\\'.');\n    } else {\n        $t_name = $p_project['name'];\n    }\n\n    // check to make sure project doesn't already exist\n    if ( $t_name != project_get_name( $p_project_id ) ) {\n        if( !project_is_name_unique( $t_name ) ) {\n            return SoapObjectsFactory::newSoapFault('Client', 'Project name exists');\n        }\n    }\n\n    if ( !isset( $p_project['description'] ) ) {\n        $t_description = project_get_field( $p_project_id, 'description' );\n    } else {\n        $t_description = $p_project['description'];\n    }\n\n    if ( !isset( $p_project['status'] ) ) {\n        $t_status = project_get_field( $p_project_id, 'status' );\n    } else {\n        $t_status = $p_project['status'];\n    }\n\n    if ( !isset( $p_project['view_state'] ) ) {\n        $t_view_state = project_get_field( $p_project_id, 'view_state' );\n    } else {\n        $t_view_state = $p_project['view_state'];\n    }\n\n    if ( !isset( $p_project['file_path'] ) ) {\n        $t_file_path = project_get_field( $p_project_id, 'file_path' );\n    } else {\n        $t_file_path = $p_project['file_path'];\n    }\n\n    if ( !isset( $p_project['enabled'] ) ) {\n        $t_enabled = project_get_field( $p_project_id, 'enabled' );\n    } else {\n        $t_enabled = $p_project['enabled'];\n    }\n\n    if ( !isset( $p_project['inherit_global'] ) ) {\n        $t_inherit_global = project_get_field( $p_project_id, 'inherit_global' );\n    } else {\n        $t_inherit_global = $p_project['inherit_global'];\n    }\n\n    $t_project_status = mci_get_project_status_id( $t_status );\n    $t_project_view_state = mci_get_project_view_state_id( $t_view_state );\n\n    return project_update( $p_project_id, $t_name, $t_description, $t_project_status, $t_project_view_state, $t_file_path, $t_enabled, $t_inherit_global );\n}\n\n/**\n * Delete a project.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id A project's id\n * @return bool returns true or false depending on the success of the delete action\n */\nfunction mc_project_delete( $p_username, $p_password, $p_project_id ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\t$g_project_override = $p_project_id;\n\n\tif( !mci_has_administrator_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\treturn project_delete( $p_project_id );\n}\n\nfunction mc_project_get_issue_headers( $p_username, $p_password, $p_project_id, $p_page_number, $p_per_page ) {\n    global $g_project_override;\n\n    $t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\tif( $p_project_id != ALL_PROJECTS && !project_exists( $p_project_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', \"Project '$p_project_id' does not exist.\" );\n\t}\n\n\t$g_project_override = $p_project_id;;\n\n\tif( !mci_has_readonly_access( $t_user_id, $p_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$t_orig_page_number = $p_page_number < 1 ? 1 : $p_page_number;\n\t$t_page_count = 0;\n\t$t_bug_count = 0;\n\n\t$t_rows = filter_get_bug_rows( $p_page_number, $p_per_page, $t_page_count, $t_bug_count, null, $p_project_id );\n\t$t_result = array();\n\t\n\t// the page number was moved back, so we have exceeded the actual page number, see bug #12991\n\tif ( $t_orig_page_number > $p_page_number )\n\t    return $t_result;\n\n\tforeach( $t_rows as $t_issue_data ) {\n\t\t$t_result[] = mci_issue_data_as_header_array( $t_issue_data);\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get appropriate users assigned to a project by access level.\n *\n * @param string $p_username  The name of the user trying to access the versions.\n * @param string $p_password  The password of the user.\n * @param integer $p_project_id  The id of the project to retrieve the users for.\n * @param integer $p_access Minimum access level.\n * @return Array  representing a ProjectAttachmentDataArray structure.\n */\nfunction mc_project_get_users( $p_username, $p_password, $p_project_id, $p_access ) {\n    global $g_project_override;\n\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_users = array();\n\n\t$g_project_override = $p_project_id;\n\n\t$t_users = project_get_all_user_rows( $p_project_id, $p_access ); # handles ALL_PROJECTS case\n\n\t$t_display = array();\n\t$t_sort = array();\n\t$t_show_realname = ( ON == config_get( 'show_realname' ) );\n\t$t_sort_by_last_name = ( ON == config_get( 'sort_by_last_name' ) );\n\tforeach( $t_users as $t_user ) {\n\t\t$t_user_name = string_attribute( $t_user['username'] );\n\t\t$t_sort_name = strtolower( $t_user_name );\n\t\tif( $t_show_realname && ( $t_user['realname'] <> \"\" ) ) {\n\t\t\t$t_user_name = string_attribute( $t_user['realname'] );\n\t\t\tif( $t_sort_by_last_name ) {\n\t\t\t\t$t_sort_name_bits = explode( ' ', strtolower( $t_user_name ), 2 );\n\t\t\t\t$t_sort_name = ( isset( $t_sort_name_bits[1] ) ? $t_sort_name_bits[1] . ', ' : '' ) . $t_sort_name_bits[0];\n\t\t\t} else {\n\t\t\t\t$t_sort_name = strtolower( $t_user_name );\n\t\t\t}\n\t\t}\n\t\t$t_display[] = $t_user_name;\n\t\t$t_sort[] = $t_sort_name;\n\t}\n\tarray_multisort( $t_sort, SORT_ASC, SORT_STRING, $t_users, $t_display );\n\n\t$t_result = array();\n\tfor( $i = 0;$i < count( $t_sort );$i++ ) {\n\t\t$t_row = $t_users[$i];\n\n\t\t// This is not very performant - But we have to assure that the data returned is exactly\n\t\t// the same as the data that comes with an issue (test for equality - $t_row[] does not\n\t\t// contain email fields).\n\t\t$t_result[] = mci_account_get_array_by_id( $t_row['id'] );\n\t}\n\treturn $t_result;\n}\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * News API\n * @package CoreAPI\n * @subpackage NewsAPI\n * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n\n/**\n * requires current_user_api\n */\nrequire_once( 'current_user_api.php' );\n/**\n * requires twitter_api\n */\nrequire_once( 'twitter_api.php' );\n\n# --------------------\n# Add a news item\nfunction news_create( $p_project_id, $p_poster_id, $p_view_state, $p_announcement, $p_headline, $p_body ) {\n\t$c_project_id = db_prepare_int( $p_project_id );\n\t$c_poster_id = db_prepare_int( $p_poster_id );\n\t$c_view_state = db_prepare_int( $p_view_state );\n\t$c_announcement = db_prepare_bool( $p_announcement );\n\n\tif( is_blank( $p_headline ) ) {\n\t\terror_parameters( lang_get( 'headline' ) );\n\t\ttrigger_error( ERROR_EMPTY_FIELD, ERROR );\n\t}\n\n\tif( is_blank( $p_body ) ) {\n\t\terror_parameters( lang_get( 'body' ) );\n\t\ttrigger_error( ERROR_EMPTY_FIELD, ERROR );\n\t}\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t# Add item\n\n\t$query = \"INSERT\n\t\t\t\tINTO $t_news_table\n\t    \t\t  ( project_id, poster_id, date_posted, last_modified,\n\t    \t\t    view_state, announcement, headline, body )\n\t\t\t\tVALUES\n\t\t\t\t    ( \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \",\n\t\t\t\t      \" . db_param() . \"\n\t\t\t\t\t)\";\n\tdb_query_bound( $query, Array( $c_project_id, $c_poster_id, db_now(), db_now(), $c_view_state, $c_announcement, $p_headline, $p_body ) );\n\n\t$t_news_id = db_insert_id( $t_news_table );\n\n\ttwitter_news( $t_news_id );\n\n\treturn $t_news_id;\n}\n\n# --------------------\n# Delete the news entry\nfunction news_delete( $p_news_id ) {\n\t$c_news_id = db_prepare_int( $p_news_id );\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t$query = \"DELETE FROM $t_news_table\n\t    \t\t  WHERE id=\" . db_param();\n\n\tdb_query_bound( $query, Array( $c_news_id ) );\n\n\t# db_query errors on failure so:\n\treturn true;\n}\n\n# --------------------\n# Delete the news entry\nfunction news_delete_all( $p_project_id ) {\n\t$c_project_id = db_prepare_int( $p_project_id );\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t$query = \"DELETE FROM $t_news_table\n\t    \t\t  WHERE project_id=\" . db_param();\n\n\tdb_query_bound( $query, Array( $c_project_id ) );\n\n\t# db_query errors on failure so:\n\treturn true;\n}\n\n# --------------------\n# Update news item\nfunction news_update( $p_news_id, $p_project_id, $p_view_state, $p_announcement, $p_headline, $p_body ) {\n\t$c_news_id = db_prepare_int( $p_news_id );\n\t$c_project_id = db_prepare_int( $p_project_id );\n\t$c_view_state = db_prepare_int( $p_view_state );\n\t$c_announcement = db_prepare_bool( $p_announcement );\n\n\tif( is_blank( $p_headline ) ) {\n\t\terror_parameters( lang_get( 'headline' ) );\n\t\ttrigger_error( ERROR_EMPTY_FIELD, ERROR );\n\t}\n\n\tif( is_blank( $p_body ) ) {\n\t\terror_parameters( lang_get( 'body' ) );\n\t\ttrigger_error( ERROR_EMPTY_FIELD, ERROR );\n\t}\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t# Update entry\n\t$query = \"UPDATE $t_news_table\n\t\t\t\t  SET view_state=\" . db_param() . \",\n\t\t\t\t\tannouncement=\" . db_param() . \",\n\t\t\t\t\theadline=\" . db_param() . \",\n\t\t\t\t\tbody=\" . db_param() . \",\n\t\t\t\t\tproject_id=\" . db_param() . \",\n\t\t\t\t\tlast_modified= \" . db_param() . \"\n\t\t\t\t  WHERE id=\" . db_param();\n\n\tdb_query_bound( $query, Array( $c_view_state, $c_announcement, $p_headline, $p_body, $c_project_id, db_now(), $c_news_id ) );\n\n\t# db_query errors on failure so:\n\treturn true;\n}\n\n# --------------------\n# Selects the news item associated with the specified id\nfunction news_get_row( $p_news_id ) {\n\t$c_news_id = db_prepare_int( $p_news_id );\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t$query = \"SELECT *\n\t\t\t\t  FROM $t_news_table\n\t\t\t\t  WHERE id=\" . db_param();\n\t$result = db_query_bound( $query, Array( $c_news_id ) );\n\n\tif( 0 == db_num_rows( $result ) ) {\n\t\ttrigger_error( ERROR_NEWS_NOT_FOUND, ERROR );\n\t} else {\n\t\t$row = db_fetch_array( $result );\n\t\treturn $row;\n\t}\n}\n\n# --------------------\n# get news count (selected project plus sitewide posts)\nfunction news_get_count( $p_project_id, $p_sitewide = true ) {\n\t$c_project_id = db_prepare_int( $p_project_id );\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\t$t_project_where = helper_project_specific_where( $p_project_id );\n\n\t$query = \"SELECT COUNT(*)\n\t\t\t\t  FROM $t_news_table\n\t\t\t\t  WHERE $t_project_where\";\n\n\tif( $p_sitewide ) {\n\t\t$query .= ' OR project_id=' . ALL_PROJECTS;\n\t}\n\n\t$result = db_query_bound( $query );\n\n\treturn db_result( $result, 0, 0 );\n}\n\n# --------------------\n# get news items (selected project plus sitewide posts)\nfunction news_get_rows( $p_project_id, $p_sitewide = true ) {\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\n\t$t_projects = current_user_get_all_accessible_subprojects( $p_project_id );\n\t$t_projects[] = (int)$p_project_id;\n\n\tif( $p_sitewide && ALL_PROJECTS != $p_project_id ) {\n\t\t$t_projects[] = ALL_PROJECTS;\n\t}\n\n\t$query = \"SELECT *\n\t\t\t\t  FROM $t_news_table\";\n\n\tif( 1 == count( $t_projects ) ) {\n\t\t$c_project_id = $t_projects[0];\n\t\t$query .= \" WHERE project_id='$c_project_id'\";\n\t} else {\n\t\t$query .= ' WHERE project_id IN (' . join( $t_projects, ',' ) . ')';\n\t}\n\n\t$query .= \" ORDER BY date_posted DESC\";\n\n\t$result = db_query( $query );\n\n\t$t_rows = array();\n\t$t_row_count = db_num_rows( $result );\n\n\tfor( $i = 0;$i < $t_row_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\tarray_push( $t_rows, $row );\n\t}\n\n\treturn $t_rows;\n}\n\n# --------------------\n# Check if the specified news item is private\nfunction news_get_field( $p_news_id, $p_field_name ) {\n\t$row = news_get_row( $p_news_id );\n\treturn( $row[$p_field_name] );\n}\n\n# --------------------\n# Check if the specified news item is private\nfunction news_is_private( $p_news_id ) {\n\treturn( news_get_field( $p_news_id, 'view_state' ) == VS_PRIVATE );\n}\n\n# --------------------\n# Gets a limited set of news rows to be viewed on one page based on the criteria\n# defined in the configuration file.\nfunction news_get_limited_rows( $p_offset, $p_project_id = null ) {\n\tif( $p_project_id === null ) {\n\t\t$p_project_id = helper_get_current_project();\n\t}\n\n\t$c_offset = db_prepare_int( $p_offset );\n\n\t$t_projects = current_user_get_all_accessible_subprojects( $p_project_id );\n\t$t_projects[] = (int)$p_project_id;\n\tif( ALL_PROJECTS != $p_project_id ) {\n\t\t$t_projects[] = ALL_PROJECTS;\n\t}\n\n\t$t_news_table = db_get_table( 'mantis_news_table' );\n\t$t_news_view_limit = config_get( 'news_view_limit' );\n\t$t_news_view_limit_days = config_get( 'news_view_limit_days' ) * SECONDS_PER_DAY;\n\n\tswitch( config_get( 'news_limit_method' ) ) {\n\t\tcase 0:\n\n\t\t\t# BY_LIMIT - Select the news posts\n\t\t\t$query = \"SELECT *\n\t\t\t\t\t\tFROM $t_news_table\";\n\n\t\t\tif( 1 == count( $t_projects ) ) {\n\t\t\t\t$c_project_id = $t_projects[0];\n\t\t\t\t$query .= \" WHERE project_id=\" . db_params();\n\t\t\t\t$t_params = array( $c_project_id );\n\t\t\t} else {\n\t\t\t\t$query .= ' WHERE project_id IN (' . join( $t_projects, ',' ) . ')';\n\t\t\t\t$t_params = null;\n\t\t\t}\n\n\t\t\t$query .= ' ORDER BY announcement DESC, id DESC';\n\t\t\t$result = db_query_bound( $query, $t_params, $t_news_view_limit, $c_offset );\n\t\t\tbreak;\n\t\tcase 1:\n\n\t\t\t# BY_DATE - Select the news posts\n\t\t\t$query = \"SELECT *\n\t\t\t\t\t\tFROM $t_news_table WHERE\n\t\t\t\t\t\t( \" . db_helper_compare_days( 0, 'date_posted', \"< $t_news_view_limit_days\" ) . \"\n\t\t\t\t\t\t OR announcement = \" . db_param() . \" ) \";\n\t\t\t$t_params = Array(\n\t\t\t\tdb_now(),\n\t\t\t\t1,\n\t\t\t);\n\t\t\tif( 1 == count( $t_projects ) ) {\n\t\t\t\t$c_project_id = $t_projects[0];\n\t\t\t\t$query .= \" AND project_id=\" . db_param();\n\t\t\t\t$t_params[] = $c_project_id;\n\t\t\t} else {\n\t\t\t\t$query .= ' AND project_id IN (' . join( $t_projects, ',' ) . ')';\n\t\t\t}\n\t\t\t$query .= \" ORDER BY announcement DESC, id DESC\";\n\t\t\t$result = db_query_bound( $query, $t_params, $t_news_view_limit, $c_offset );\n\t\t\tbreak;\n\t}\n\n\t# end switch\n\n\t$t_row_count = db_num_rows( $result );\n\n\t$t_rows = array();\n\tfor( $i = 0;$i < $t_row_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\tarray_push( $t_rows, $row );\n\t}\n\n\treturn $t_rows;\n}\n\n# --------------------\n# Checks if the news feature is enabled or not.\n# true: enabled, otherwise false.\nfunction news_is_enabled() {\n\treturn config_get( 'news_enabled' ) == ON;\n}\n\n# --------------------\n# Ensures that the news feature is enabled, otherwise generates an access denied error.\nfunction news_ensure_enabled() {\n\tif ( !news_is_enabled() ) {\n\t\taccess_denied();\n\t}\n}\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @package CoreAPI\n * @subpackage SummaryAPI\n * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n\n/**\n * requires config_filter_defaults_include\n */\nrequire_once( $g_absolute_path . 'config_filter_defaults_inc.php' );\n\nfunction summary_helper_print_row( $p_label, $p_open, $p_resolved, $p_closed, $p_total ) {\n\tprintf( '<tr %s>', helper_alternate_class() );\n\tprintf( '<td width=\"50%%\">%s</td>', $p_label );\n\tprintf( '<td width=\"12%%\" class=\"right\">%s</td>', $p_open );\n\tprintf( '<td width=\"12%%\" class=\"right\">%s</td>', $p_resolved );\n\tprintf( '<td width=\"12%%\" class=\"right\">%s</td>', $p_closed );\n\tprintf( '<td width=\"12%%\" class=\"right\">%s</td>', $p_total );\n\tprint( '</tr>' );\n}\n\n/**\n * Returns a string representation of the user, together with a link to the issues\n * acted on by the user ( reported, handled or commented on )\n *\n * @param int $p_user_id\n * @return string\n */\nfunction summary_helper_get_developer_label ( $p_user_id ) {\n\n\t$t_user = string_display_line( user_get_name( $p_user_id ) );\n\n\treturn \"<a class='subtle' href='view_all_set.php?type=1&amp;temporary=y\n\t\t\t&amp;\".FILTER_PROPERTY_REPORTER_ID.\"=$p_user_id\n\t\t\t&amp;\".FILTER_PROPERTY_HANDLER_ID.\"=$p_user_id\n\t\t\t&amp;\".FILTER_PROPERTY_NOTE_USER_ID.\"=$p_user_id\n\t\t\t&amp;\".FILTER_PROPERTY_MATCH_TYPE.\"=\".FILTER_MATCH_ANY.\"'>$t_user</a>\";\n\n}\n\n# Used in summary reports\n# this function prints out the summary for the given enum setting\n# The enum field name is passed in through $p_enum\nfunction summary_print_by_enum( $p_enum ) {\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$t_project_filter = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $t_project_filter ) {\n\t\treturn;\n\t}\n\n\t$t_filter_prefix = config_get( 'bug_count_hyperlink_prefix' );\n\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_status_query = ( 'status' == $p_enum ) ? '' : ' ,status ';\n\t$query = \"SELECT COUNT(id) as bugcount, $p_enum $t_status_query\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $t_project_filter\n\t\t\t\tGROUP BY $p_enum $t_status_query\n\t\t\t\tORDER BY $p_enum $t_status_query\";\n\t$result = db_query_bound( $query );\n\n\t$t_last_value = -1;\n\t$t_bugs_open = 0;\n\t$t_bugs_resolved = 0;\n\t$t_bugs_closed = 0;\n\t$t_bugs_total = 0;\n\n\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\twhile( $row = db_fetch_array( $result ) ) {\n\t\tif(( $row[$p_enum] != $t_last_value ) && ( -1 != $t_last_value ) ) {\n\n\t\t\t# Build up the hyperlinks to bug views\n\t\t\t$t_bug_link = '';\n\t\t\tswitch( $p_enum ) {\n\t\t\t\tcase 'status':\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_last_value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'severity':\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_SEVERITY_ID . '=' . $t_last_value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'resolution':\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_RESOLUTION_ID . '=' . $t_last_value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'priority':\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_PRIORITY_ID . '=' . $t_last_value;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif( !is_blank( $t_bug_link ) ) {\n\t\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\tif(( 'status' == $p_enum ) && ( $t_last_value >= $t_resolved_val ) ) {\n\t\t\t\t\t\t$t_bugs_open = '-';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\tif(( 'status' == $p_enum ) && (( $t_last_value < $t_resolved_val ) || ( $t_last_value >= $t_closed_val ) ) ) {\n\t\t\t\t\t\t$t_bugs_resolved = '-';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\tif(( 'status' == $p_enum ) && ( $t_last_value < $t_closed_val ) ) {\n\t\t\t\t\t\t$t_bugs_closed = '-';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsummary_helper_print_row( get_enum_element( $p_enum, $t_last_value ), $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\n\t\t\t$t_bugs_open = 0;\n\t\t\t$t_bugs_resolved = 0;\n\t\t\t$t_bugs_closed = 0;\n\t\t\t$t_bugs_total = 0;\n\t\t}\n\n\t\t$t_bugs_total += $row['bugcount'];\n\t\tif( $t_closed_val <= $row['status'] ) {\n\t\t\t$t_bugs_closed += $row['bugcount'];\n\t\t}\n\t\telse if( $t_resolved_val <= $row['status'] ) {\n\t\t\t$t_bugs_resolved += $row['bugcount'];\n\t\t} else {\n\t\t\t$t_bugs_open += $row['bugcount'];\n\t\t}\n\t\t$t_last_value = $row[$p_enum];\n\t}\n\n\tif( 0 < $t_bugs_total ) {\n\t\t# Build up the hyperlinks to bug views\n\t\t$t_bug_link = '';\n\t\tswitch( $p_enum ) {\n\t\t\tcase 'status':\n\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_last_value;\n\t\t\t\tbreak;\n\t\t\tcase 'severity':\n\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_SEVERITY_ID . '=' . $t_last_value;\n\t\t\t\tbreak;\n\t\t\tcase 'resolution':\n\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_RESOLUTION_ID . '=' . $t_last_value;\n\t\t\t\tbreak;\n\t\t\tcase 'priority':\n\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_PRIORITY_ID . '=' . $t_last_value;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif( !is_blank( $t_bug_link ) ) {\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t} else {\n\t\t\t\tif(( 'status' == $p_enum ) && ( $t_last_value >= $t_resolved_val ) ) {\n\t\t\t\t\t$t_bugs_open = '-';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t} else {\n\t\t\t\tif(( 'status' == $p_enum ) && (( $t_last_value < $t_resolved_val ) || ( $t_last_value >= $t_closed_val ) ) ) {\n\t\t\t\t\t$t_bugs_resolved = '-';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t} else {\n\t\t\t\tif(( 'status' == $p_enum ) && ( $t_last_value < $t_closed_val ) ) {\n\t\t\t\t\t$t_bugs_closed = '-';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\t\t}\n\n\t\tsummary_helper_print_row( get_enum_element( $p_enum, $t_last_value ), $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\t}\n}\n\n# prints the bugs submitted in the last X days (default is 1 day) for the\n# current project\nfunction summary_new_bug_count_by_date( $p_time_length = 1 ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\n\t$c_time_length = (int) $p_time_length * SECONDS_PER_DAY;\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$query = \"SELECT COUNT(*)\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE \" . db_helper_compare_days( \"\" . db_now() . \"\", \"date_submitted\", \"<= $c_time_length\" ) . \" AND $specific_where\";\n\t$result = db_query_bound( $query );\n\treturn db_result( $result, 0 );\n}\n\n# returns the number of bugs resolved in the last X days (default is 1 day) for the\n# current project\nfunction summary_resolved_bug_count_by_date( $p_time_length = 1 ) {\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_bug_history_table = db_get_table( 'mantis_bug_history_table' );\n\t$t_resolved = config_get( 'bug_resolved_status_threshold' );\n\n\t$c_time_length = (int) $p_time_length * SECONDS_PER_DAY;\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$query = \"SELECT COUNT(DISTINCT(b.id))\n\t\t\t\tFROM $t_bug_table b\n\t\t\t\tLEFT JOIN $t_bug_history_table h\n\t\t\t\tON b.id = h.bug_id\n\t\t\t\tAND h.type = \" . NORMAL_TYPE . \"\n\t\t\t\tAND h.field_name = 'status'\n\t\t\t\tWHERE b.status >= \" . db_param() . \"\n\t\t\t\tAND h.old_value < \" . db_param() . \"\n\t\t\t\tAND h.new_value >= \" . db_param() . \"\n\t\t\t\tAND \" . db_helper_compare_days( \"\" . db_now() . \"\", \"date_modified\", \"<= $c_time_length\" ) . \"\n\t\t\t\tAND $specific_where\";\n\t$result = db_query_bound( $query, Array( $t_resolved, $t_resolved, $t_resolved ) );\n\treturn db_result( $result, 0 );\n}\n\n# This function shows the number of bugs submitted in the last X days\n# An array of integers representing days is passed in\nfunction summary_print_by_date( $p_date_array ) {\n\t$arr_count = count( $p_date_array );\n\tforeach( $p_date_array as $t_days ) {\n\t\t$t_new_count = summary_new_bug_count_by_date( $t_days );\n\t\t$t_resolved_count = summary_resolved_bug_count_by_date( $t_days );\n\n\t\t$t_start_date = mktime( 0, 0, 0, date( 'm' ), ( date( 'd' ) - $t_days ), date( 'Y' ) );\n\t\t$t_new_bugs_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_FILTER_BY_DATE . '=on&amp;' . FILTER_PROPERTY_START_YEAR . '=' . date( 'Y', $t_start_date ) . '&amp;' . FILTER_PROPERTY_START_MONTH . '=' . date( 'm', $t_start_date ) . '&amp;' . FILTER_PROPERTY_START_DAY . '=' . date( 'd', $t_start_date ) . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">';\n\n\t\tprint( \"<tr \" . helper_alternate_class() . \">\\n\" );\n\t\tprint( \"    <td width=\\\"50%\\\">\" . $t_days . \"</td>\\n\" );\n\n\t\tif( $t_new_count > 0 ) {\n\t\t\tprint( \"    <td class=\\\"right\\\">$t_new_bugs_link$t_new_count</a></td>\\n\" );\n\t\t} else {\n\t\t\tprint( \"    <td class=\\\"right\\\">$t_new_count</td>\\n\" );\n\t\t}\n\t\tprint( \"    <td class=\\\"right\\\">$t_resolved_count</td>\\n\" );\n\n\t\t$t_balance = $t_new_count - $t_resolved_count;\n\t\t$t_style = '';\n\t\tif( $t_balance > 0 ) {\n\n\t\t\t# we are talking about bugs: a balance > 0 is \"negative\" for the project...\n\t\t\t$t_style = \" negative\";\n\t\t\t$t_balance = sprintf( '%+d', $t_balance );\n\n\t\t\t# \"+\" modifier added in PHP >= 4.3.0\n\t\t}\n\t\telse if( $t_balance < 0 ) {\n\t\t\t$t_style = ' positive';\n\t\t\t$t_balance = sprintf( '%+d', $t_balance );\n\t\t}\n\n\t\tprint( \"\\n<td class=\\\"right$t_style\\\">$t_balance</td>\\n\" );\n\t\tprint( \"</tr>\\n\" );\n\t}\n\n\t# end foreach\n}\n\n# Print list of open bugs with the highest activity score\n# the score is calculated assigning one \"point\" for each history event\n# associated with the bug\nfunction summary_print_by_activity() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_history_table = db_get_table( 'mantis_bug_history_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\t$t_resolved = config_get( 'bug_resolved_status_threshold' );\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\t$query = \"SELECT COUNT(h.id) as count, b.id, b.summary, b.view_state\n\t\t\t\tFROM $t_mantis_bug_table AS b, $t_mantis_history_table AS h\n\t\t\t\tWHERE h.bug_id = b.id\n\t\t\t\tAND b.status < \" . db_param() . \"\n\t\t\t\tAND $specific_where\n\t\t\t\tGROUP BY h.bug_id, b.id, b.summary, b.last_updated, b.view_state\n\t\t\t\tORDER BY count DESC, b.last_updated DESC\";\n\t$result = db_query_bound( $query, Array( $t_resolved ) );\n\n\t$t_count = 0;\n\t$t_private_bug_threshold = config_get( 'private_bug_threshold' );\n\t$t_summarydata = Array();\n\t$t_summarybugs = Array();\n\twhile( $row = db_fetch_array( $result ) ) {\n\n\t\t// Skip private bugs unless user has proper permissions\n\t\tif(( VS_PRIVATE == $row['view_state'] ) && ( false == access_has_bug_level( $t_private_bug_threshold, $row['id'] ) ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( $t_count++ == 10 ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t$t_summarydata[] = array(\n\t\t\t'id' => $row['id'],\n\t\t\t'summary' => $row['summary'],\n\t\t\t'count' => $row['count'],\n\t\t);\n\t\t$t_summarybugs[] = $row['id'];\n\t}\n\n\tbug_cache_array_rows( $t_summarybugs );\n\n\tforeach( $t_summarydata as $row ) {\n\t\t$t_bugid = string_get_bug_view_link( $row['id'] );\n\t\t$t_summary = string_display_line( $row['summary'] );\n\t\t$t_notescount = $row['count'];\n\n\t\tprint \"<tr \" . helper_alternate_class() . \">\\n\";\n\t\tprint \"<td class=\\\"small\\\">$t_bugid - $t_summary</td><td class=\\\"right\\\">$t_notescount</td>\\n\";\n\t\tprint \"</tr>\\n\";\n\t}\n}\n\n# Print list of bugs opened from the longest time\nfunction summary_print_by_age() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\t$t_resolved = config_get( 'bug_resolved_status_threshold' );\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\t$query = \"SELECT * FROM $t_mantis_bug_table\n\t\t\t\tWHERE status < \" . db_param() . \"\n\t\t\t\tAND $specific_where\n\t\t\t\tORDER BY date_submitted ASC, priority DESC\";\n\t$result = db_query_bound( $query, array( $t_resolved ) );\n\n\t$t_count = 0;\n\t$t_private_bug_threshold = config_get( 'private_bug_threshold' );\n\twhile( $row = db_fetch_array( $result ) ) {\n\n\t\t// as we select all from bug_table, inject into the cache.\n\t\tbug_cache_database_result( $row );\n\n\t\t// Skip private bugs unless user has proper permissions\n\t\tif(( VS_PRIVATE == bug_get_field( $row['id'], 'view_state' ) ) && ( false == access_has_bug_level( $t_private_bug_threshold, $row['id'] ) ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( $t_count++ == 10 ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t$t_bugid = string_get_bug_view_link( $row['id'] );\n\t\t$t_summary = string_display_line( $row['summary'] );\n\t\t$t_days_open = intval(( time() - $row['date_submitted'] ) / SECONDS_PER_DAY );\n\n\t\tprint \"<tr \" . helper_alternate_class() . \">\\n\";\n\t\tprint \"<td class=\\\"small\\\">$t_bugid - $t_summary</td><td class=\\\"right\\\">$t_days_open</td>\\n\";\n\t\tprint \"</tr>\\n\";\n\t}\n}\n\n# print bug counts by assigned to each developer\nfunction summary_print_by_developer() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$query = \"SELECT COUNT(id) as bugcount, handler_id, status\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE handler_id>0 AND $specific_where\n\t\t\t\tGROUP BY handler_id, status\n\t\t\t\tORDER BY handler_id, status\";\n\t$result = db_query_bound( $query );\n\n\t$t_last_handler = -1;\n\t$t_bugs_open = 0;\n\t$t_bugs_resolved = 0;\n\t$t_bugs_closed = 0;\n\t$t_bugs_total = 0;\n\n\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\t$t_summaryusers = array();\n\t$t_summarydata = array();\n\twhile( $row = db_fetch_array( $result ) ) {\n\t\t$t_summarydata[] = $row;\n\t\t$t_summaryusers[] = $row['handler_id'];\n\t}\n\n\tuser_cache_array_rows( array_unique( $t_summaryusers ) );\n\n\tforeach( $t_summarydata as $row ) {\n\t\t$v_handler_id = $row['handler_id'];\n\t\t$v_bugcount = $row['bugcount'];\n\n\t\tif(( $v_handler_id != $t_last_handler ) && ( -1 != $t_last_handler ) ) {\n\t\t\t$t_user = summary_helper_get_developer_label( $t_last_handler );\n\n\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_HANDLER_ID . '=' . $t_last_handler;\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\n\t\t\tsummary_helper_print_row( $t_user, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\n\t\t\t$t_bugs_open = 0;\n\t\t\t$t_bugs_resolved = 0;\n\t\t\t$t_bugs_closed = 0;\n\t\t\t$t_bugs_total = 0;\n\t\t}\n\n\t\t$t_bugs_total += $v_bugcount;\n\t\tif( $t_closed_val <= $row['status'] ) {\n\t\t\t$t_bugs_closed += $v_bugcount;\n\t\t}\n\t\telse if( $t_resolved_val <= $row['status'] ) {\n\t\t\t$t_bugs_resolved += $v_bugcount;\n\t\t} else {\n\t\t\t$t_bugs_open += $v_bugcount;\n\t\t}\n\t\t$t_last_handler = $v_handler_id;\n\t}\n\n\tif( 0 < $t_bugs_total ) {\n\t\t$t_user = summary_helper_get_developer_label( $t_last_handler );\n\n\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_HANDLER_ID . '=' . $t_last_handler;\n\t\tif( 0 < $t_bugs_open ) {\n\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t}\n\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t}\n\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t}\n\t\tif( 0 < $t_bugs_total ) {\n\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t}\n\n\t\tsummary_helper_print_row( $t_user, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\t}\n}\n\n# print bug counts by reporter id\nfunction summary_print_by_reporter() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\t$t_reporter_summary_limit = config_get( 'reporter_summary_limit' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$query = \"SELECT reporter_id, COUNT(*) as num\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tGROUP BY reporter_id\n\t\t\t\tORDER BY num DESC\";\n\t$result = db_query_bound( $query, null, $t_reporter_summary_limit );\n\n\t$t_reporters = array();\n\twhile( $row = db_fetch_array( $result ) ) {\n\t\t$t_reporters[] = $row['reporter_id'];\n\t}\n\n\tuser_cache_array_rows( $t_reporters );\n\n\tforeach( $t_reporters as $t_reporter ) {\n\t\t$v_reporter_id = $t_reporter;\n\t\t$query = \"SELECT COUNT(id) as bugcount, status FROM $t_mantis_bug_table\n\t\t\t\t\tWHERE reporter_id=\" . db_param() . \"\n\t\t\t\t\tAND $specific_where\n\t\t\t\t\tGROUP BY status\n\t\t\t\t\tORDER BY status\";\n\t\t$result2 = db_query_bound( $query, array( $v_reporter_id ) );\n\n\t\t$last_reporter = -1;\n\t\t$t_bugs_open = 0;\n\t\t$t_bugs_resolved = 0;\n\t\t$t_bugs_closed = 0;\n\t\t$t_bugs_total = 0;\n\n\t\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\t\twhile( $row2 = db_fetch_array( $result2 ) ) {\n\t\t\t$t_bugs_total += $row2['bugcount'];\n\t\t\tif( $t_closed_val <= $row2['status'] ) {\n\t\t\t\t$t_bugs_closed += $row2['bugcount'];\n\t\t\t}\n\t\t\telse if( $t_resolved_val <= $row2['status'] ) {\n\t\t\t\t$t_bugs_resolved += $row2['bugcount'];\n\t\t\t} else {\n\t\t\t\t$t_bugs_open += $row2['bugcount'];\n\t\t\t}\n\t\t}\n\n\t\tif( 0 < $t_bugs_total ) {\n\t\t\t$t_user = string_display_line( user_get_name( $v_reporter_id ) );\n\n\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_REPORTER_ID . '=' . $v_reporter_id;\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\n\t\t\tsummary_helper_print_row( $t_user, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\t\t}\n\t}\n}\n\n# print a bug count per category\nfunction summary_print_by_category() {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_category_table = db_get_table( 'mantis_category_table' );\n\t$t_mantis_project_table = db_get_table( 'mantis_project_table' );\n\t$t_summary_category_include_project = config_get( 'summary_category_include_project' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$specific_where = trim( helper_project_specific_where( $t_project_id ) );\n\tif( '1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\t$t_project_query = ( ON == $t_summary_category_include_project ) ? 'b.project_id, ' : '';\n\n\t$query = \"SELECT COUNT(b.id) as bugcount, $t_project_query c.name AS category_name, category_id, b.status\n\t\t\t\tFROM $t_mantis_bug_table b\n\t\t\t\tJOIN $t_mantis_category_table AS c ON b.category_id=c.id\n\t\t\t\tWHERE b.$specific_where\n\t\t\t\tGROUP BY $t_project_query c.name, b.category_id, b.status\n\t\t\t\tORDER BY $t_project_query c.name\";\n\n\t$result = db_query_bound( $query );\n\n\t$last_category_name = -1;\n\t$last_category_id = -1;\n\t$last_project = -1;\n\t$t_bugs_open = 0;\n\t$t_bugs_resolved = 0;\n\t$t_bugs_closed = 0;\n\t$t_bugs_total = 0;\n\n\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\twhile( $row = db_fetch_array( $result ) ) {\n\t\t$v_category_id = $row['category_id'];\n\t\t$v_category_name = $row['category_name'];\n\n\t\tif(( $v_category_name != $last_category_name ) && ( $last_category_name != -1 ) ) {\n\t\t\t$label = string_display_line( $last_category_name );\n\t\t\tif(( ON == $t_summary_category_include_project ) && ( ALL_PROJECTS == $t_project_id ) ) {\n\t\t\t\t$label = sprintf( '[%s] %s', string_display_line( project_get_name( $last_project ) ), $label );\n\t\t\t}\n\n\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_CATEGORY . '=' . urlencode( $last_category_name );\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\n\t\t\tsummary_helper_print_row( $label, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\n\t\t\t$t_bugs_open = 0;\n\t\t\t$t_bugs_resolved = 0;\n\t\t\t$t_bugs_closed = 0;\n\t\t\t$t_bugs_total = 0;\n\t\t}\n\n\t\t$t_bugs_total += $row['bugcount'];\n\t\tif( $t_closed_val <= $row['status'] ) {\n\t\t\t$t_bugs_closed += $row['bugcount'];\n\t\t}\n\t\telse if( $t_resolved_val <= $row['status'] ) {\n\t\t\t$t_bugs_resolved += $row['bugcount'];\n\t\t} else {\n\t\t\t$t_bugs_open += $row['bugcount'];\n\t\t}\n\n\t\t$last_category_id = $v_category_id;\n\t\t$last_category_name = $v_category_name;\n\t\tif(( ON == $t_summary_category_include_project ) && ( ALL_PROJECTS == $t_project_id ) ) {\n\t\t\t$last_project = $row['project_id'];\n\t\t}\n\t}\n\n\tif( 0 < $t_bugs_total ) {\n\t\t$label = string_display_line( $last_category_name );\n\t\tif(( ON == $t_summary_category_include_project ) && ( ALL_PROJECTS == $t_project_id ) ) {\n\t\t\t$label = sprintf( '[%s] %s', string_display_line( project_get_name( $last_project ) ), $label );\n\t\t}\n\n\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_CATEGORY . '=' . urlencode( $last_category_name );\n\t\tif( !is_blank( $t_bug_link ) ) {\n\t\t\tif( 0 < $t_bugs_open ) {\n\t\t\t\t$t_bugs_open = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_resolved_val . '\">' . $t_bugs_open . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_resolved ) {\n\t\t\t\t$t_bugs_resolved = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_resolved_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=' . $t_closed_val . '\">' . $t_bugs_resolved . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_closed ) {\n\t\t\t\t$t_bugs_closed = $t_bug_link . '&amp;' . FILTER_PROPERTY_STATUS_ID . '=' . $t_closed_val . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_closed . '</a>';\n\t\t\t}\n\t\t\tif( 0 < $t_bugs_total ) {\n\t\t\t\t$t_bugs_total = $t_bug_link . '&amp;' . FILTER_PROPERTY_HIDE_STATUS_ID . '=\">' . $t_bugs_total . '</a>';\n\t\t\t}\n\t\t}\n\n\t\tsummary_helper_print_row( $label, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\t}\n}\n\n# print bug counts by project\nfunction summary_print_by_project( $p_projects = null, $p_level = 0, $p_cache = null ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_project_table = db_get_table( 'mantis_project_table' );\n\n\t$t_project_id = helper_get_current_project();\n\n\tif( null == $p_projects ) {\n\t\tif( ALL_PROJECTS == $t_project_id ) {\n\t\t\t$p_projects = current_user_get_accessible_projects();\n\t\t} else {\n\t\t\t$p_projects = Array(\n\t\t\t\t$t_project_id,\n\t\t\t);\n\t\t}\n\t}\n\n\t# Retrieve statistics one time to improve performance.\n\tif( null === $p_cache ) {\n\t\t$query = \"SELECT project_id, status, COUNT( status ) AS bugcount\n\t\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\t\tGROUP BY project_id, status\";\n\n\t\t$result = db_query_bound( $query );\n\t\t$p_cache = Array();\n\n\t\t$t_resolved_val = config_get( 'bug_resolved_status_threshold' );\n\t\t$t_closed_val = config_get( 'bug_closed_status_threshold' );\n\n\t\twhile( $row = db_fetch_array( $result ) ) {\n\t\t\t$t_project_id = $row['project_id'];\n\t\t\t$t_status = $row['status'];\n\t\t\t$t_bugcount = $row['bugcount'];\n\n\t\t\tif ( $t_closed_val <= $t_status ) {\n\t\t\t\tif ( isset( $p_cache[$t_project_id]['closed'] ) ) {\n\t\t\t\t\t$p_cache[$t_project_id]['closed'] += $t_bugcount;\n\t\t\t\t} else {\n\t\t\t\t\t$p_cache[$t_project_id]['closed'] = $t_bugcount;\n\t\t\t\t}\n\t\t\t} else if ( $t_resolved_val <= $t_status ) {\n\t\t\t\tif ( isset( $p_cache[$t_project_id]['resolved'] ) ) {\n\t\t\t\t\t$p_cache[$t_project_id]['resolved'] += $t_bugcount;\n\t\t\t\t} else {\n\t\t\t\t\t$p_cache[$t_project_id]['resolved'] = $t_bugcount;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( isset( $p_cache[$t_project_id]['open'] ) ) {\n\t\t\t\t\t$p_cache[$t_project_id]['open'] += $t_bugcount;\n\t\t\t\t} else {\n\t\t\t\t\t$p_cache[$t_project_id]['open'] = $t_bugcount;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tforeach( $p_projects as $t_project ) {\n\t\t$t_name = str_repeat( \"&raquo; \", $p_level ) . string_display_line( project_get_name( $t_project ) );\n\n\t\t$t_pdata = isset( $p_cache[$t_project] ) ? $p_cache[$t_project] : array( 'open' => 0, 'resolved' => 0, 'closed' => 0 );\n\n\t\t$t_bugs_open = isset( $t_pdata['open'] ) ? $t_pdata['open'] : 0;\n\t\t$t_bugs_resolved = isset( $t_pdata['resolved'] ) ? $t_pdata['resolved'] : 0;\n\t\t$t_bugs_closed = isset( $t_pdata['closed'] ) ? $t_pdata['closed'] : 0;\n\t\t$t_bugs_total = $t_bugs_open + $t_bugs_resolved + $t_bugs_closed;\n\n\t\tsummary_helper_print_row( $t_name, $t_bugs_open, $t_bugs_resolved, $t_bugs_closed, $t_bugs_total );\n\n\t\tif ( count( project_hierarchy_get_subprojects ( $t_project ) ) > 0 ) {\n\t\t\t$t_subprojects = current_user_get_accessible_subprojects( $t_project );\n\n\t\t\tif( count( $t_subprojects ) > 0 ) {\n\t\t\t\tsummary_print_by_project( $t_subprojects, $p_level + 1, $p_cache );\n\t\t\t}\n\t\t}\n\t}\n}\n\n# Print developer / resolution report\nfunction summary_print_developer_resolution( $p_resolution_enum_string ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t# Get the resolution values ot use\n\t$c_res_s = MantisEnum::getValues( $p_resolution_enum_string );\n\t$enum_res_count = count( $c_res_s );\n\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t$specific_where .= ' AND handler_id > 0';\n\n\t# Get all of the bugs and split them up into an array\n\t$query = \"SELECT COUNT(id) as bugcount, handler_id, resolution\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tGROUP BY handler_id, resolution\n\t\t\t\tORDER BY handler_id, resolution\";\n\t$result = db_query_bound( $query );\n\n\t$t_handler_res_arr = array();\n\t$t_arr = db_fetch_array( $result );\n\twhile( $t_arr ) {\n\t\tif( !isset( $t_handler_res_arr[$t_arr['handler_id']] ) ) {\n\t\t\t$t_handler_res_arr[$t_arr['handler_id']] = array();\n\t\t\t$t_handler_res_arr[$t_arr['handler_id']]['total'] = 0;\n\t\t}\n\t\tif( !isset( $t_handler_res_arr[$t_arr['handler_id']][$t_arr['resolution']] ) ) {\n\t\t\t$t_handler_res_arr[$t_arr['handler_id']][$t_arr['resolution']] = 0;\n\t\t}\n\t\t$t_handler_res_arr[$t_arr['handler_id']][$t_arr['resolution']] += $t_arr['bugcount'];\n\t\t$t_handler_res_arr[$t_arr['handler_id']]['total'] += $t_arr['bugcount'];\n\n\t\t$t_arr = db_fetch_array( $result );\n\t}\n\n\t$t_filter_prefix = config_get( 'bug_count_hyperlink_prefix' );\n\t$t_row_count = 0;\n\n\t# We now have a multi dimensional array of users and resolutions, with the value of each resolution for each user\n\tforeach( $t_handler_res_arr as $t_handler_id => $t_arr2 ) {\n\n\t\t# Only print developers who have had at least one bug assigned to them. This helps\n\t\t# prevent divide by zeroes, showing developers not on this project, and showing\n\t\t# users that aren't actually developers...\n\n\t\tif( $t_arr2['total'] > 0 ) {\n\t\t\techo '<tr align=\"center\" ' . helper_alternate_class( $t_row_count ) . '>';\n\t\t\t$t_row_count++;\n\t\t\techo '<td>';\n\t\t\techo summary_helper_get_developer_label( $t_handler_id );\n\t\t\techo '</td>';\n\n\t\t\t# We need to track the percentage of bugs that are considered fixed, as well as\n\t\t\t# those that aren't considered bugs to begin with (when looking at %age)\n\t\t\t$t_bugs_fixed = 0;\n\t\t\t$t_bugs_notbugs = 0;\n\t\t\tfor( $j = 0;$j < $enum_res_count;$j++ ) {\n\t\t\t\t$res_bug_count = 0;\n\n\t\t\t\tif( isset( $t_arr2[$c_res_s[$j]] ) ) {\n\t\t\t\t\t$res_bug_count = $t_arr2[$c_res_s[$j]];\n\t\t\t\t}\n\n\t\t\t\techo '<td>';\n\t\t\t\tif( 0 < $res_bug_count ) {\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . $t_filter_prefix . '&amp;' . FILTER_PROPERTY_HANDLER_ID . '=' . $t_handler_id;\n\t\t\t\t\t$t_bug_link = $t_bug_link . '&amp;' . FILTER_PROPERTY_RESOLUTION_ID . '=' . $c_res_s[$j] . '\">';\n\t\t\t\t\techo $t_bug_link . $res_bug_count . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\techo $res_bug_count;\n\t\t\t\t}\n\t\t\t\techo '</td>';\n\n\t\t\t\tif( $c_res_s[$j] >= config_get( 'bug_resolution_fixed_threshold' ) ) {\n\t\t\t\t\tif ( $c_res_s[$j] < config_get( 'bug_resolution_not_fixed_threshold' ) ) {\n\t\t\t\t\t\t# Count bugs with a resolution between fixed and not fixed thresholds\n\t\t\t\t\t\t$t_bugs_fixed += $res_bug_count;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t# Count bugs with a resolution above the not fixed threshold\n\t\t\t\t\t\t$t_bugs_notbugs += $res_bug_count;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$t_percent_fixed = 0;\n\t\t\tif(( $t_arr2['total'] - $t_bugs_notbugs ) > 0 ) {\n\t\t\t\t$t_percent_fixed = ( $t_bugs_fixed / ( $t_arr2['total'] - $t_bugs_notbugs ) );\n\t\t\t}\n\t\t\techo '<td>';\n\t\t\tprintf( '% 1.0f%%', ( $t_percent_fixed * 100 ) );\n\t\t\techo '</td>';\n\t\t\techo '</tr>';\n\t\t}\n\t}\n}\n\n# Print reporter / resolution report\nfunction summary_print_reporter_resolution( $p_resolution_enum_string ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\t$t_reporter_summary_limit = config_get( 'reporter_summary_limit' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t# Get the resolution values ot use\n\t$c_res_s = MantisEnum::getValues( $p_resolution_enum_string );\n\t$enum_res_count = count( $c_res_s );\n\n\t# Checking if it's a per project statistic or all projects\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t# Get all of the bugs and split them up into an array\n\t$query = \"SELECT COUNT(id) as bugcount, reporter_id, resolution\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tGROUP BY reporter_id, resolution\";\n\t$result = db_query_bound( $query );\n\n\t$t_reporter_res_arr = array();\n\t$t_reporter_bugcount_arr = array();\n\t$t_arr = db_fetch_array( $result );\n\twhile( $t_arr ) {\n\t\tif( !isset( $t_reporter_res_arr[$t_arr['reporter_id']] ) ) {\n\t\t\t$t_reporter_res_arr[$t_arr['reporter_id']] = array();\n\t\t\t$t_reporter_bugcount_arr[$t_arr['reporter_id']] = 0;\n\t\t}\n\t\tif( !isset( $t_reporter_res_arr[$t_arr['reporter_id']][$t_arr['resolution']] ) ) {\n\t\t\t$t_reporter_res_arr[$t_arr['reporter_id']][$t_arr['resolution']] = 0;\n\t\t}\n\t\t$t_reporter_res_arr[$t_arr['reporter_id']][$t_arr['resolution']] += $t_arr['bugcount'];\n\t\t$t_reporter_bugcount_arr[$t_arr['reporter_id']] += $t_arr['bugcount'];\n\n\t\t$t_arr = db_fetch_array( $result );\n\t}\n\n\t# Sort our total bug count array so that the reporters with the highest number of bugs are listed first,\n\tarsort( $t_reporter_bugcount_arr );\n\n\t$t_row_count = 0;\n\n\t# We now have a multi dimensional array of users and resolutions, with the value of each resolution for each user\n\tforeach( $t_reporter_bugcount_arr as $t_reporter_id => $t_total_user_bugs ) {\n\n\t\t# Limit the number of reporters listed\n\t\tif( $t_row_count > $t_reporter_summary_limit ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t# Only print reporters who have reported at least one bug. This helps\n\t\t# prevent divide by zeroes, showing reporters not on this project, and showing\n\t\t# users that aren't actually reporters...\n\t\tif( $t_total_user_bugs > 0 ) {\n\t\t\t$t_arr2 = $t_reporter_res_arr[$t_reporter_id];\n\n\t\t\techo '<tr align=\"center\" ' . helper_alternate_class( $t_row_count ) . '>';\n\t\t\t$t_row_count++;\n\t\t\techo '<td>';\n\t\t\techo string_display_line( user_get_name( $t_reporter_id ) );\n\t\t\techo '</td>';\n\n\t\t\t# We need to track the percentage of bugs that are considered fix, as well as\n\t\t\t# those that aren't considered bugs to begin with (when looking at %age)\n\t\t\t$t_bugs_fixed = 0;\n\t\t\t$t_bugs_notbugs = 0;\n\t\t\tfor( $j = 0;$j < $enum_res_count;$j++ ) {\n\t\t\t\t$res_bug_count = 0;\n\n\t\t\t\tif( isset( $t_arr2[$c_res_s[$j]] ) ) {\n\t\t\t\t\t$res_bug_count = $t_arr2[$c_res_s[$j]];\n\t\t\t\t}\n\n\t\t\t\techo '<td>';\n\t\t\t\tif( 0 < $res_bug_count ) {\n\t\t\t\t\t$t_bug_link = '<a class=\"subtle\" href=\"' . config_get( 'bug_count_hyperlink_prefix' ) . '&amp;' . FILTER_PROPERTY_REPORTER_ID . '=' . $t_reporter_id;\n\t\t\t\t\t$t_bug_link = $t_bug_link . '&amp;' . FILTER_PROPERTY_RESOLUTION_ID . '=' . $c_res_s[$j] . '\">';\n\t\t\t\t\techo $t_bug_link . $res_bug_count . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\techo $res_bug_count;\n\t\t\t\t}\n\t\t\t\techo '</td>';\n\n\t\t\t\tif( $c_res_s[$j] >= config_get( 'bug_resolution_fixed_threshold' ) ) {\n\t\t\t\t\tif ( $c_res_s[$j] < config_get( 'bug_resolution_not_fixed_threshold' ) ) {\n\t\t\t\t\t\t# Count bugs with a resolution between fixed and not fixed thresholds\n\t\t\t\t\t\t$t_bugs_fixed += $res_bug_count;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t# Count bugs with a resolution above the not fixed threshold\n\t\t\t\t\t\t$t_bugs_notbugs += $res_bug_count;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$t_percent_errors = 0;\n\t\t\tif( $t_total_user_bugs > 0 ) {\n\t\t\t\t$t_percent_errors = ( $t_bugs_notbugs / $t_total_user_bugs );\n\t\t\t}\n\t\t\techo '<td>';\n\t\t\tprintf( '% 1.0f%%', ( $t_percent_errors * 100 ) );\n\t\t\techo '</td>';\n\t\t\techo '</tr>';\n\t\t}\n\t}\n}\n\n# Print reporter effectiveness report\nfunction summary_print_reporter_effectiveness( $p_severity_enum_string, $p_resolution_enum_string ) {\n\t$t_mantis_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_mantis_user_table = db_get_table( 'mantis_user_table' );\n\t$t_reporter_summary_limit = config_get( 'reporter_summary_limit' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\n\t$t_severity_multipliers = config_get( 'severity_multipliers' );\n\t$t_resolution_multipliers = config_get( 'resolution_multipliers' );\n\n\t# Get the severity values to use\n\t$c_sev_s = MantisEnum::getValues( $p_severity_enum_string );\n\t$enum_sev_count = count( $c_sev_s );\n\n\t# Get the resolution values to use\n\t$c_res_s = MantisEnum::getValues( $p_resolution_enum_string );\n\t$enum_res_count = count( $c_res_s );\n\n\t# Checking if it's a per project statistic or all projects\n\t$specific_where = helper_project_specific_where( $t_project_id );\n\tif( ' 1<>1' == $specific_where ) {\n\t\treturn;\n\t}\n\n\t# Get all of the bugs and split them up into an array\n\t$query = \"SELECT COUNT(id) as bugcount, reporter_id, resolution, severity\n\t\t\t\tFROM $t_mantis_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tGROUP BY reporter_id, resolution, severity\";\n\t$result = db_query_bound( $query );\n\n\t$t_reporter_ressev_arr = array();\n\t$t_reporter_bugcount_arr = array();\n\t$t_arr = db_fetch_array( $result );\n\twhile( $t_arr ) {\n\t\tif( !isset( $t_reporter_ressev_arr[$t_arr['reporter_id']] ) ) {\n\t\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']] = array();\n\t\t\t$t_reporter_bugcount_arr[$t_arr['reporter_id']] = 0;\n\t\t}\n\t\tif( !isset( $t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']] ) ) {\n\t\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']] = array();\n\t\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']]['total'] = 0;\n\t\t}\n\t\tif( !isset( $t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']][$t_arr['resolution']] ) ) {\n\t\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']][$t_arr['resolution']] = 0;\n\t\t}\n\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']][$t_arr['resolution']] += $t_arr['bugcount'];\n\t\t$t_reporter_ressev_arr[$t_arr['reporter_id']][$t_arr['severity']]['total'] += $t_arr['bugcount'];\n\t\t$t_reporter_bugcount_arr[$t_arr['reporter_id']] += $t_arr['bugcount'];\n\n\t\t$t_arr = db_fetch_array( $result );\n\t}\n\n\t# Sort our total bug count array so that the reporters with the highest number of bugs are listed first,\n\tarsort( $t_reporter_bugcount_arr );\n\n\t$t_row_count = 0;\n\n\t# We now have a multi dimensional array of users, resolutions and severities, with the\n\t# value of each resolution and severity for each user\n\tforeach( $t_reporter_bugcount_arr as $t_reporter_id => $t_total_user_bugs ) {\n\n\t\t# Limit the number of reporters listed\n\t\tif( $t_row_count > $t_reporter_summary_limit ) {\n\t\t\tbreak;\n\t\t}\n\n\t\t# Only print reporters who have reported at least one bug. This helps\n\t\t# prevent divide by zeroes, showing reporters not on this project, and showing\n\t\t# users that aren't actually reporters...\n\t\tif( $t_total_user_bugs > 0 ) {\n\t\t\t$t_arr2 = $t_reporter_ressev_arr[$t_reporter_id];\n\n\t\t\techo '<tr ' . helper_alternate_class( $t_row_count ) . '>';\n\t\t\t$t_row_count++;\n\t\t\techo '<td>';\n\t\t\techo string_display_line( user_get_name( $t_reporter_id ) );\n\t\t\techo '</td>';\n\n\t\t\t$t_total_severity = 0;\n\t\t\t$t_total_errors = 0;\n\t\t\tfor( $j = 0; $j < $enum_sev_count; $j++ ) {\n\t\t\t\tif( !isset( $t_arr2[$c_sev_s[$j]] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$sev_bug_count = $t_arr2[$c_sev_s[$j]]['total'];\n\t\t\t\t$t_sev_mult = 1;\n\t\t\t\tif( $t_severity_multipliers[$c_sev_s[$j]] ) {\n\t\t\t\t\t$t_sev_mult = $t_severity_multipliers[$c_sev_s[$j]];\n\t\t\t\t}\n\n\t\t\t\tif( $sev_bug_count > 0 ) {\n\t\t\t\t\t$t_total_severity += ( $sev_bug_count * $t_sev_mult );\n\t\t\t\t}\n\n\t\t\t\tforeach( $t_resolution_multipliers as $t_res => $t_res_mult ) {\n\t\t\t\t\tif( isset( $t_arr2[$c_sev_s[$j]][$t_res] ) ) {\n\t\t\t\t\t\t$t_total_errors += ( $t_sev_mult * $t_res_mult );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\techo '<td>';\n\t\t\techo $t_total_severity;\n\t\t\techo '</td>';\n\t\t\techo '<td>';\n\t\t\techo $t_total_errors;\n\t\t\techo '</td>';\n\t\t\techo '<td>';\n\t\t\tprint( $t_total_severity - $t_total_errors );\n\t\t\techo '</td>';\n\t\t\techo '</tr>';\n\t\t}\n\t}\n}\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @package CoreAPI\n * @subpackage GraphAPI\n * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n\n\nif( OFF == plugin_config_get( 'eczlibrary' ) ) {\n\t$t_font_path = get_font_path();\n\tif( $t_font_path !== '' && !defined('TTF_DIR') ) {\n\t\tdefine( 'TTF_DIR', $t_font_path );\n\t}\n\t$t_jpgraph_path = plugin_config_get( 'jpgraph_path', '' );\n\tif( $t_jpgraph_path !== '' ) {\n\t\tset_include_path(get_include_path() . PATH_SEPARATOR . $t_jpgraph_path );\n\t\t$ip = get_include_path();\n\t\trequire_once( 'jpgraph.php' );\n\t\trequire_once( 'jpgraph_line.php' );\n\t\trequire_once( 'jpgraph_bar.php' );\n\t\trequire_once( 'jpgraph_pie.php' );\n\t\trequire_once( 'jpgraph_pie3d.php' );\n\t\trequire_once( 'jpgraph_canvas.php' );\n\t} else {\n\t\trequire_once( 'jpgraph/jpgraph.php' );\n\t\trequire_once( 'jpgraph/jpgraph_line.php' );\n\t\trequire_once( 'jpgraph/jpgraph_bar.php' );\n\t\trequire_once( 'jpgraph/jpgraph_pie.php' );\n\t\trequire_once( 'jpgraph/jpgraph_pie3d.php' );\n\t\trequire_once( 'jpgraph/jpgraph_canvas.php' );\n\t}\n} else {\n\trequire_once( 'ezc/Base/src/base.php' );\n}\n\nfunction graph_get_font() {\n\t$t_font = plugin_config_get( 'font', 'arial' );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$t_font_map = array(\n\t\t\t'arial' => 'arial.ttf',\n\t\t\t'verdana' => 'verdana.ttf',\n\t\t\t'trebuchet' => 'trebuc.ttf',\n\t\t\t'verasans' => 'Vera.ttf',\n\t\t\t'times' => 'times.ttf',\n\t\t\t'georgia' => 'georgia.ttf',\n\t\t\t'veraserif' => 'VeraSe.ttf',\n\t\t\t'courier' => 'cour.ttf',\n\t\t\t'veramono' => 'VeraMono.ttf',\n\t\t);\n\n\t\tif( isset( $t_font_map[$t_font] ) ) {\n\t\t\t$t_font = $t_font_map[$t_font];\n\t\t} else {\n\t\t\t$t_font = 'arial.ttf';\n\t\t}\n\t\t$t_font_path = get_font_path();\n\t\tif( empty($t_font_path) ) {\n\t\t\terror_text('Unable to read/find font', 'Unable to read/find font');\n\t\t}\n\t\t$t_font_file = $t_font_path . $t_font;\n\t\tif( file_exists($t_font_file) === false || is_readable($t_font_file) === false ) {\n\t\t\terror_text('Unable to read/find font', 'Unable to read/find font');\n\t\t}\n\t\treturn $t_font_file;\n\t} else {\n\t\t$t_font_map = array(\n\t\t\t'arial' => FF_ARIAL,\n\t\t\t'verdana' => FF_VERDANA,\n\t\t\t'trebuchet' => FF_TREBUCHE,\n\t\t\t'verasans' => FF_VERA,\n\t\t\t'times' => FF_TIMES,\n\t\t\t'georgia' => FF_GEORGIA,\n\t\t\t'veraserif' => FF_VERASERIF,\n\t\t\t'courier' => FF_COURIER,\n\t\t\t'veramono' => FF_VERAMONO,\n\t\t);\n\n\t\tif( isset( $t_font_map[$t_font] ) ) {\n\t\t\treturn $t_font_map[$t_font];\n\t\t} else {\n\t\t\treturn FF_FONT1;\n\t\t}\n\t}\n}\n\n# ## Graph API ###\n# --------------------\n# graphing routines\n# --------------------\nfunction graph_bar( $p_metrics, $p_title = '', $p_graph_width = 350, $p_graph_height = 400 ) {\n\t$t_graph_font = graph_get_font();\n\n\terror_check( is_array( $p_metrics ) ? array_sum( $p_metrics ) : 0, $p_title );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$graph = new ezcGraphBarChart();\n\t\t$graph->title = $p_title;\n\t\t$graph->background->color = '#FFFFFF';\n\t\t$graph->options->font = $t_graph_font ;\n\t\t$graph->options->font->maxFontSize = 12;\n\t\t$graph->legend = false;\n\n\t\t$graph->data[0] = new ezcGraphArrayDataSet( $p_metrics );\n\t\t$graph->data[0]->color = '#FFFF00';\n\n\t\t$graph->xAxis->axisLabelRenderer = new ezcGraphAxisRotatedLabelRenderer();\n\t\t$graph->xAxis->axisLabelRenderer->angle = 45;\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->renderer->options->syncAxisFonts = false;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\t$graph = new Graph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 40, 40, 40, 170 );\n\t\tif( ON == plugin_config_get( 'jpgraph_antialias' ) ) {\n\t\t\t$graph->img->SetAntiAliasing();\n\t\t}\n\t\t$graph->SetScale( 'textlin' );\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\t\t$graph->title->Set( $p_title );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\t\t$graph->xaxis->SetTickLabels( array_keys( $p_metrics ) );\n\t\tif( FF_FONT2 <= $t_graph_font ) {\n\t\t\t$graph->xaxis->SetLabelAngle( 60 );\n\t\t} else {\n\t\t\t$graph->xaxis->SetLabelAngle( 90 );\n\t\t\t# can't rotate non truetype fonts\n\t\t}\n\t\t$graph->xaxis->SetFont( $t_graph_font );\n\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$graph->yaxis->scale->ticks->SetDirection( -1 );\n\t\t$graph->yaxis->SetFont( $t_graph_font );\n\n\t\t$p1 = new BarPlot( array_values( $p_metrics ) );\n\t\t$p1->SetFillColor( 'yellow' );\n\t\t$p1->SetWidth( 0.8 );\n\t\t$graph->Add( $p1 );\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\n\t\t$graph->Stroke();\n\t}\n}\n\n# Function which displays the charts using the absolute values according to the status (opened/closed/resolved)\nfunction graph_group( $p_metrics, $p_title = '', $p_graph_width = 350, $p_graph_height = 400, $p_baseline = 100 ) {\n\n\t# $p_metrics is an array of three arrays\n\t#   $p_metrics['open'] = array( 'enum' => value, ...)\n\t#   $p_metrics['resolved']\n\t#   $p_metrics['closed']\n\n\t$t_graph_font = graph_get_font();\n\n\t# count up array portions that are set\n\t$t_count = 0;\n\tforeach( array( 'open', 'resolved', 'closed' ) as $t_label ) {\n\t\tif( isset( $p_metrics[$t_label] ) && is_array( $p_metrics[$t_label] ) ) {\n\t\t\t$t_count += array_sum( $p_metrics[$t_label] );\n\t\t}\n\t}\n\n\terror_check( $t_count, $p_title );\n\n\t# calculate totals\n\t$total = graph_total_metrics( $p_metrics );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$graph = new ezcGraphBarChart();\n\t\t$graph->title = $p_title;\n\t\t$graph->background->color = '#FFFFFF';\n\t\t$graph->options->font = $t_graph_font ;\n\t\t$graph->options->font->maxFontSize = 12;\n\t\t$graph->legend = false;\n\n\t\tforeach( array( 'open', 'resolved', 'closed' ) as $t_label ) {\n\t\t\t$graph->data[$t_label] = new ezcGraphArrayDataSet( $p_metrics[$t_label] );\n\t\t}\n\t\t$graph->data['total'] = new ezcGraphArrayDataSet( $total );\n\t\t//$graph->data['total']->displayType = ezcGraph::LINE;\n\t\t//$graph->data['total']->barMargin = -20;\n\t\t$graph->options->fillLines = 210;\n\t\t$graph->xAxis->axisLabelRenderer = new ezcGraphAxisRotatedLabelRenderer();\n\t\t$graph->xAxis->axisLabelRenderer->angle = 45;\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->renderer->options->syncAxisFonts = false;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\t# defines margin according to height\n\t\t$graph = new Graph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 45, 35, 35, $p_baseline );\n\t\tif( ON == plugin_config_get( 'jpgraph_antialias' ) ) {\n\t\t\t$graph->img->SetAntiAliasing();\n\t\t}\n\t\t$graph->SetScale( 'textlin' );\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\t\t$graph->title->Set( $p_title );\n\t\t$graph->xaxis->SetTickLabels( array_keys( $p_metrics['open'] ) );\n\t\tif( FF_FONT2 <= $t_graph_font ) {\n\t\t\t$graph->xaxis->SetLabelAngle( 60 );\n\t\t} else {\n\t\t\t$graph->xaxis->SetLabelAngle( 90 );\n\t\t\t# can't rotate non truetype fonts\n\t\t}\n\t\t$graph->xaxis->SetFont( $t_graph_font );\n\t\t$graph->legend->Pos( 0.05, 0.08 );\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$graph->yaxis->scale->ticks->SetDirection( -1 );\n\t\t$graph->yaxis->SetFont( $t_graph_font );\n\t\t$graph->yscale->SetGrace( 10 );\n\n\t\t# adds on the same graph\n\t\t$tot = new BarPlot( array_values( $total ) );\n\t\t$tot->SetFillColor( 'lightblue' );\n\t\t$tot->SetWidth( 0.7 );\n\t\t$tot->SetLegend( plugin_lang_get( 'legend_total' ) );\n\t\t$graph->Add( $tot );\n\n\t\t$p1 = new BarPlot( array_values( $p_metrics['open'] ) );\n\t\t$p1->SetFillColor( 'yellow' );\n\t\t$p1->SetWidth( 1 );\n\t\t$p1->SetLegend( plugin_lang_get( 'legend_opened' ) );\n\n\t\t$p2 = new BarPlot( array_values( $p_metrics['closed'] ) );\n\t\t$p2->SetFillColor( 'blue' );\n\t\t$p2->SetWidth( 1 );\n\t\t$p2->SetLegend( plugin_lang_get( 'legend_closed' ) );\n\n\t\t$p3 = new BarPlot( array_values( $p_metrics['resolved'] ) );\n\t\t$p3->SetFillColor( 'red' );\n\t\t$p3->SetWidth( 1 );\n\t\t$p3->SetLegend( plugin_lang_get( 'legend_resolved' ) );\n\n\t\t$gbplot = new GroupBarPlot( array( $p1, $p3, $p2 ) );\n\t\t$graph->Add( $gbplot );\n\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\t$graph->Stroke();\n\t}\n}\n\n# --------------------\n# Function that displays pie charts\nfunction graph_pie( $p_metrics, $p_title = '', $p_graph_width = 500, $p_graph_height = 350, $p_center = 0.4, $p_poshorizontal = 0.10, $p_posvertical = 0.09 ) {\n\t$t_graph_font = graph_get_font();\n\n\terror_check( is_array( $p_metrics ) ? array_sum( $p_metrics ) : 0, $p_title );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$graph = new ezcGraphPieChart();\n\t\t$graph->title = $p_title;\n\t\t$graph->background->color = '#FFFFFF';\n\t\t$graph->options->font = $t_graph_font ;\n\t\t$graph->options->font->maxFontSize = 12;\n\t\t$graph->legend = false;\n\n\t\t$graph->data[0] = new ezcGraphArrayDataSet( $p_metrics );\n\t\t$graph->data[0]->color = '#FFFF00';\n\n\t\t$graph->renderer = new ezcGraphRenderer3d();\n\t\t$graph->renderer->options->dataBorder = false;\n\t\t$graph->renderer->options->pieChartShadowSize = 10;\n\t\t$graph->renderer->options->pieChartGleam = .5;\n\t\t$graph->renderer->options->pieChartHeight = 16;\n\t\t$graph->renderer->options->legendSymbolGleam = .5;\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->renderer->options->syncAxisFonts = false;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\t$graph = new PieGraph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 40, 40, 40, 100 );\n\t\t$graph->title->Set( $p_title );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\n\t\t$graph->legend->Pos( $p_poshorizontal, $p_posvertical );\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$p1 = new PiePlot3d( array_values( $p_metrics ) );\n\n\t\t// should be reversed?\n\t\t$p1->SetTheme( 'earth' );\n\n\t\t# $p1->SetTheme(\"sand\");\n\t\t$p1->SetCenter( $p_center );\n\t\t$p1->SetAngle( 60 );\n\t\t$p1->SetLegends( array_keys( $p_metrics ) );\n\n\t\t# Label format\n\t\t$p1->value->SetFormat( '%2.0f' );\n\t\t$p1->value->Show();\n\t\t$p1->value->SetFont( $t_graph_font );\n\n\t\t$graph->Add( $p1 );\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\t\t$graph->Stroke();\n\t}\n}\n\n# --------------------\nfunction graph_cumulative_bydate( $p_metrics, $p_graph_width = 300, $p_graph_height = 380 ) {\n\n\t$t_graph_font = graph_get_font();\n\terror_check( is_array( $p_metrics ) ? count( $p_metrics ) : 0, plugin_lang_get( 'cumulative' ) . ' ' . lang_get( 'by_date' ) );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$graph = new ezcGraphLineChart();\n\n\t\t$graph->background->color = '#FFFFFF';\n\n\t\t$graph->xAxis = new ezcGraphChartElementNumericAxis();\n\n\t\t$graph->data[0] = new ezcGraphArrayDataSet( $p_metrics[0] );\n\t\t$graph->data[0]->label = plugin_lang_get( 'legend_reported' );\n\t\t$graph->data[0]->color = '#FF0000';\n\n\t\t$graph->data[1] = new ezcGraphArrayDataSet( $p_metrics[1] );\n\t\t$graph->data[1]->label = plugin_lang_get( 'legend_resolved' );\n\t\t$graph->data[1]->color = '#0000FF';\n\n\t\t$graph->data[2] = new ezcGraphArrayDataSet( $p_metrics[2] );\n\t\t$graph->data[2]->label = plugin_lang_get( 'legend_still_open' );\n\t\t$graph->data[2]->color = '#000000';\n\n\t\t$graph->additionalAxis[2] = $nAxis = new ezcGraphChartElementNumericAxis();\n\t\t$nAxis->chartPosition = 1;\n\t\t$nAxis->background = '#005500';\n\t\t$nAxis->border = '#005500';\n\t\t$nAxis->position = ezcGraph::BOTTOM;\n\t\t$graph->data[2]->yAxis = $nAxis;\n\n\t\t$graph->xAxis->labelCallback =  'graph_date_format';\n\t\t$graph->xAxis->axisLabelRenderer = new ezcGraphAxisRotatedLabelRenderer();\n\t\t$graph->xAxis->axisLabelRenderer->angle = -45;\n\n\t\t$graph->legend->position      = ezcGraph::BOTTOM;\n\t\t$graph->legend->background    = '#FFFFFF80';\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->title = plugin_lang_get( 'cumulative' ) . ' ' . lang_get( 'by_date' );\n\t\t$graph->options->font = $t_graph_font ;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\tforeach( $p_metrics[0] as $i => $vals ) {\n\t\t\tif( $i > 0 ) {\n\t\t\t\t$plot_date[] = $i;\n\t\t\t\t$reported_plot[] = $p_metrics[0][$i];\n\t\t\t\t$resolved_plot[] = $p_metrics[1][$i];\n\t\t\t\t$still_open_plot[] = $p_metrics[2][$i];\n\t\t\t}\n\t\t}\n\n\t\t$graph = new Graph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 40, 40, 40, 170 );\n\t\tif( ON == plugin_config_get( 'jpgraph_antialias' ) ) {\n\t\t\t$graph->img->SetAntiAliasing();\n\t\t}\n\t\t$graph->SetScale( 'linlin');\n\t\t$graph->yaxis->SetColor(\"red\");\n\t\t$graph->SetY2Scale(\"lin\");\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\t\t$graph->title->Set( plugin_lang_get( 'cumulative' ) . ' ' . lang_get( 'by_date' ) );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\n\t\t$graph->legend->Pos( 0.05, 0.9, 'right', 'bottom' );\n\t\t$graph->legend->SetShadow( false );\n\t\t$graph->legend->SetFillColor( 'white' );\n\t\t$graph->legend->SetLayout( LEGEND_HOR );\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$graph->yaxis->scale->ticks->SetDirection( -1 );\n\t\t$graph->yaxis->SetFont( $t_graph_font );\n\t\t$graph->y2axis->SetFont( $t_graph_font );\n\n\t\tif( FF_FONT2 <= $t_graph_font ) {\n\t\t\t$graph->xaxis->SetLabelAngle( 60 );\n\t\t} else {\n\t\t\t$graph->xaxis->SetLabelAngle( 90 );\n\t\t\t# can't rotate non truetype fonts\n\t\t}\n\t\t$graph->xaxis->SetLabelFormatCallback( 'graph_date_format' );\n\t\t$graph->xaxis->SetFont( $t_graph_font );\n\n\t\t$p1 = new LinePlot( $reported_plot, $plot_date );\n\t\t$p1->SetColor( 'blue' );\n\t\t$p1->SetCenter();\n\t\t$p1->SetLegend( plugin_lang_get( 'legend_reported' ) );\n\t\t$graph->AddY2( $p1 );\n\n\t\t$p3 = new LinePlot( $still_open_plot, $plot_date );\n\t\t$p3->SetColor( 'red' );\n\t\t$p3->SetCenter();\n\t\t$p3->SetLegend( plugin_lang_get( 'legend_still_open' ) );\n\t\t$graph->Add( $p3 );\n\n\t\t$p2 = new LinePlot( $resolved_plot, $plot_date );\n\t\t$p2->SetColor( 'black' );\n\t\t$p2->SetCenter();\n\t\t$p2->SetLegend( plugin_lang_get( 'legend_resolved' ) );\n\t\t$graph->AddY2( $p2 );\n\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\t\t$graph->Stroke();\n\t}\n}\n\n# --------------------\nfunction graph_bydate( $p_metrics, $p_labels, $p_title, $p_graph_width = 300, $p_graph_height = 380 ) {\n\t$t_graph_font = graph_get_font();\n\terror_check( is_array( $p_metrics ) ? count( $p_metrics ) : 0, lang_get( 'by_date' ) );\n\n\tif ( plugin_config_get( 'eczlibrary' ) == ON ) {\n\t\t$t_metrics = array();\n\t\t$t_dates = array_shift($p_metrics); //[0];\n\t\t$t_cnt = count($p_metrics);\n\n\t\tforeach( $t_dates as $i => $val ) {\n\t\t\t\t//$t_metrics[$val]\n\t\t\t\tfor($j = 0; $j < $t_cnt; $j++ ) {\n\t\t\t\t\t$t_metrics[$j][$val] = $p_metrics[$j][$i];\n\t\t\t\t}\n\t\t}\n\n\t\t$graph = new ezcGraphLineChart();\n\t\t$graph->background->color = '#FFFFFF';\n\n\t\t$graph->xAxis = new ezcGraphChartElementNumericAxis();\n\t\tfor($k = 0; $k < $t_cnt; $k++ ) {\n\t\t\t$graph->data[$k] = new ezcGraphArrayDataSet( $t_metrics[$k] );\n\t\t\t$graph->data[$k]->label = $p_labels[$k+1];\n\t\t}\n\n\t\t$graph->xAxis->labelCallback =  'graph_date_format';\n\t\t$graph->xAxis->axisLabelRenderer = new ezcGraphAxisRotatedLabelRenderer();\n\t\t$graph->xAxis->axisLabelRenderer->angle = -60;\n\t\t$graph->xAxis->axisSpace = .15;\n\n\t\t$graph->legend->position      = ezcGraph::BOTTOM;\n\t\t$graph->legend->background    = '#FFFFFF80';\n\n\t\t$graph->driver = new ezcGraphGdDriver();\n\t\t//$graph->driver->options->supersampling = 1;\n\t\t$graph->driver->options->jpegQuality = 100;\n\t\t$graph->driver->options->imageFormat = IMG_JPEG;\n\n\t\t$graph->title = $p_title . ' ' . lang_get( 'by_date' );\n\t\t$graph->title->maxHeight = .03;\n\t\t$graph->options->font = $t_graph_font ;\n\n\t\t$graph->renderToOutput( $p_graph_width, $p_graph_height);\n\t} else {\n\t\t$graph = new Graph( $p_graph_width, $p_graph_height );\n\t\t$graph->img->SetMargin( 40, 140, 40, 100 );\n\t\tif( ON == plugin_config_get( 'jpgraph_antialias' ) ) {\n\t\t\t$graph->img->SetAntiAliasing();\n\t\t}\n\t\t$graph->SetScale( 'linlin' );\n\t\t$graph->SetMarginColor( 'white' );\n\t\t$graph->SetFrame( false );\n\t\t$graph->title->Set( $p_title . ' ' . lang_get( 'by_date' ) );\n\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\n\t\t$graph->legend->Pos( 0.01, 0.05, 'right', 'top' );\n\t\t$graph->legend->SetShadow( false );\n\t\t$graph->legend->SetFillColor( 'white' );\n\t\t$graph->legend->SetLayout( LEGEND_VERT );\n\t\t$graph->legend->SetFont( $t_graph_font );\n\n\t\t$graph->yaxis->scale->ticks->SetDirection( -1 );\n\t\t$graph->yaxis->SetFont( $t_graph_font );\n\t\t$graph->yaxis->scale->SetAutoMin( 0 );\n\n\t\tif( FF_FONT2 <= $t_graph_font ) {\n\t\t\t$graph->xaxis->SetLabelAngle( 60 );\n\t\t} else {\n\t\t\t$graph->xaxis->SetLabelAngle( 90 );\n\t\t\t# can't rotate non truetype fonts\n\t\t}\n\t\t$graph->xaxis->SetLabelFormatCallback( 'graph_date_format' );\n\t\t$graph->xaxis->SetFont( $t_graph_font );\n\n/*\t\t$t_line_colours = plugin_config_get( 'jpgraph_colors' );\n\t\t$t_count_colours = count( $t_line_colours );*/\n\t\t$t_lines = count( $p_metrics ) - 1;\n\t\t$t_line = array();\n\t\tfor( $i = 1;$i <= $t_lines;$i++ ) {\n\t\t\t$t_line[$i] = new LinePlot( $p_metrics[$i], $p_metrics[0] );\n\t\t\t//$t_line[$i]->SetColor( $t_line_colours[$i % $t_count_colours] );\n\t\t\t$t_line[$i]->SetCenter();\n\t\t\t$t_line[$i]->SetLegend( $p_labels[$i] );\n\t\t\t$graph->Add( $t_line[$i] );\n\t\t}\n\n\t\tif( helper_show_queries() ) {\n\t\t\t$graph->subtitle->Set( db_count_queries() . ' queries (' . db_time_queries() . 'sec)' );\n\t\t\t$graph->subtitle->SetFont( $t_graph_font, FS_NORMAL, 8 );\n\t\t}\n\t\t$graph->Stroke();\n\t}\n}\n\n# --------------------\n# utilities\n# --------------------\nfunction graph_total_metrics( $p_metrics ) {\n\tforeach( $p_metrics['open'] as $t_enum => $t_value ) {\n\t\t$total[$t_enum] = $t_value + $p_metrics['resolved'][$t_enum] + $p_metrics['closed'][$t_enum];\n\t}\n\treturn $total;\n}\n\n# --------------------\n# Data Extractions\n# --------------------\n# --------------------\n# summarize metrics by a single field in the bug table\nfunction create_bug_enum_summary( $p_enum_string, $p_enum ) {\n\t$t_project_id = helper_get_current_project();\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = \" AND \" . helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t$t_metrics = array();\n\t$t_assoc_array = MantisEnum::getAssocArrayIndexedByValues( $p_enum_string );\n\n\tif( !db_field_exists( $p_enum, $t_bug_table ) ) {\n\t\ttrigger_error( ERROR_DB_FIELD_NOT_FOUND, ERROR );\n\t}\n\n\tforeach ( $t_assoc_array as $t_value => $t_label  ) {\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE $p_enum=\" . db_param() . \" $specific_where\";\n\t\t$result = db_query_bound( $query, array( $t_value ) );\n\t\t$t_metrics[$t_label] = db_result( $result, 0 );\n\t}\n\n\treturn $t_metrics;\n}\n\n# Function which gives the absolute values according to the status (opened/closed/resolved)\nfunction enum_bug_group( $p_enum_string, $p_enum ) {\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$t_res_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_clo_val = config_get( 'bug_closed_status_threshold' );\n\t$specific_where = \" AND \" . helper_project_specific_where( $t_project_id, $t_user_id );\n\n\tif( !db_field_exists( $p_enum, $t_bug_table ) ) {\n\t\ttrigger_error( ERROR_DB_FIELD_NOT_FOUND, ERROR );\n\t}\n\n\t$t_array_indexed_by_enum_values = MantisEnum::getAssocArrayIndexedByValues( $p_enum_string );\n\t$enum_count = count( $t_array_indexed_by_enum_values );\n\tforeach ( $t_array_indexed_by_enum_values as $t_value => $t_label ) {\n\t\t# Calculates the number of bugs opened and puts the results in a table\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE $p_enum=\" . db_param() . \" AND\n\t\t\t\t\t\tstatus<\" . db_param() . \" $specific_where\";\n\t\t$result2 = db_query( $query, array( $t_value, $t_res_val ) );\n\t\t$t_metrics['open'][$t_label] = db_result( $result2, 0, 0 );\n\n\t\t# Calculates the number of bugs closed and puts the results in a table\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE $p_enum=\" . db_param() . \" AND\n\t\t\t\t\t\tstatus>=\" . db_param() . \" $specific_where\";\n\t\t$result2 = db_query_bound( $query, array( $t_value, $t_clo_val ) );\n\t\t$t_metrics['closed'][$t_label] = db_result( $result2, 0, 0 );\n\n\t\t# Calculates the number of bugs resolved and puts the results in a table\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE $p_enum=\" . db_param() . \" AND\n\t\t\t\t\t\tstatus>=\" . db_param() . \" AND\n\t\t\t\t\t\tstatus<\" . db_param() . \" $specific_where\";\n\t\t$result2 = db_query_bound( $query, array(  $t_value, $t_res_val, $t_clo_val ) );\n\t\t$t_metrics['resolved'][$t_label] = db_result( $result2, 0, 0 );\n\t}\n\n\t# ## end for\n\n\treturn $t_metrics;\n}\n\n# --------------------\nfunction create_developer_summary() {\n\t$t_project_id = helper_get_current_project();\n\t$t_user_table = db_get_table( 'mantis_user_table' );\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = \" AND \" . helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t$t_res_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_clo_val = config_get( 'bug_closed_status_threshold' );\n\n\t$query = \"SELECT handler_id, status\n\t\t\t\t FROM $t_bug_table\n\t\t\t\t WHERE handler_id > 0 $specific_where\";\n\t$result = db_query_bound( $query );\n\t$t_total_handled = db_num_rows( $result );\n\n\t$t_handler_arr = array();\n\t$t_handlers = array();\n\tfor( $i = 0;$i < $t_total_handled;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\tif( !isset( $t_handler_arr[$row['handler_id']] ) ) {\n\t\t\t$t_handler_arr[$row['handler_id']]['res'] = 0;\n\t\t\t$t_handler_arr[$row['handler_id']]['open'] = 0;\n\t\t\t$t_handler_arr[$row['handler_id']]['close'] = 0;\n\t\t\t$t_handlers[] = $row['handler_id'];\n\t\t}\n\t\tif( $row['status'] >= $t_res_val ) {\n\t\t\tif( $row['status'] >= $t_clo_val ) {\n\t\t\t\t$t_handler_arr[$row['handler_id']]['close']++;\n\t\t\t} else {\n\t\t\t\t$t_handler_arr[$row['handler_id']]['res']++;\n\t\t\t}\n\t\t} else {\n\t\t\t$t_handler_arr[$row['handler_id']]['open']++;\n\t\t}\n\t}\n\n\tif( count( $t_handler_arr ) == 0 ) {\n\t\treturn array( 'open' => array() );\n\t}\n\n\tuser_cache_array_rows( $t_handlers );\n\n\tforeach( $t_handler_arr as $t_handler => $t_data ) {\n\t\t$t_username = user_get_name( $t_handler );\n\n\t\t$t_metrics['open'][$t_username] = $t_data['open'];\n\t\t$t_metrics['resolved'][$t_username] = $t_data['res'];\n\t\t$t_metrics['closed'][$t_username] = $t_data['close'];\n\t}\n\tksort($t_metrics);\n\n\t# end for\n\treturn $t_metrics;\n}\n\n# --------------------\nfunction create_reporter_summary() {\n\tglobal $reporter_name, $reporter_count;\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_table = db_get_table( 'mantis_user_table' );\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t$query = \"SELECT reporter_id\n\t\t\t\t FROM $t_bug_table\n\t\t\t\t WHERE $specific_where\";\n\t$result = db_query_bound( $query );\n\t$t_total_reported = db_num_rows( $result );\n\n\t$t_reporter_arr = array();\n\t$t_reporters = array();\n\tfor( $i = 0;$i < $t_total_reported;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\n\t\tif( isset( $t_reporter_arr[$row['reporter_id']] ) ) {\n\t\t\t$t_reporter_arr[$row['reporter_id']]++;\n\t\t} else {\n\t\t\t$t_reporter_arr[$row['reporter_id']] = 1;\n\t\t\t$t_reporters[] = $row['reporter_id'];\n\t\t}\n\t}\n\n\tif( count( $t_reporter_arr ) == 0 ) {\n\t\treturn array();\n\t}\n\n\tuser_cache_array_rows( $t_reporters );\n\n\tforeach( $t_reporter_arr as $t_reporter => $t_count ) {\n\t\t$t_metrics[ user_get_name( $t_reporter ) ] = $t_count;\n\t}\n\tksort($t_metrics);\n\n\t# end for\n\treturn $t_metrics;\n}\n\n# --------------------\nfunction create_category_summary() {\n\tglobal $category_name, $category_bug_count;\n\n\t$t_project_id = helper_get_current_project();\n\t$t_cat_table = db_get_table( 'mantis_category_table' );\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t$query = \"SELECT id, name\n\t\t\t\tFROM $t_cat_table\n\t\t\t\tWHERE $specific_where OR project_id=\" . ALL_PROJECTS . \"\n\t\t\t\tORDER BY name\";\n\t$result = db_query_bound( $query );\n\t$category_count = db_num_rows( $result );\n\n\t$t_metrics = array();\n\tfor( $i = 0;$i < $category_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\t$t_cat_name = $row['name'];\n\t\t$t_cat_id = $row['id'];\n\t\t$query = \"SELECT COUNT(*)\n\t\t\t\t\tFROM $t_bug_table\n\t\t\t\t\tWHERE category_id=\" . db_param() . \" AND $specific_where\";\n\t\t$result2 = db_query_bound( $query, Array( $t_cat_id ) );\n\t\tif ( isset($t_metrics[$t_cat_name]) ) {\n\t\t\t$t_metrics[$t_cat_name] = $t_metrics[$t_cat_name] + db_result( $result2, 0, 0 );\n\t\t} else {\n      if (db_result( $result2, 0, 0 ) > 0)\n\t\t\t\t\t$t_metrics[$t_cat_name] = db_result( $result2, 0, 0 );\n\t\t}\n\t}\n\n\t# end for\n\treturn $t_metrics;\n}\n\n# --------------------\nfunction create_cumulative_bydate() {\n\n\t$t_clo_val = config_get( 'bug_closed_status_threshold' );\n\t$t_res_val = config_get( 'bug_resolved_status_threshold' );\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\t$t_history_table = db_get_table( 'mantis_bug_history_table' );\n\n\t$t_project_id = helper_get_current_project();\n\t$t_user_id = auth_get_current_user_id();\n\t$specific_where = helper_project_specific_where( $t_project_id, $t_user_id );\n\n\t# Get all the submitted dates\n\t$query = \"SELECT date_submitted\n\t\t\t\tFROM $t_bug_table\n\t\t\t\tWHERE $specific_where\n\t\t\t\tORDER BY date_submitted\";\n\t$result = db_query_bound( $query );\n\t$bug_count = db_num_rows( $result );\n\n\tfor( $i = 0;$i < $bug_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\n\t\t# rationalise the timestamp to a day to reduce the amount of data\n\t\t$t_date = $row['date_submitted'];\n\t\t$t_date = (int)( $t_date / SECONDS_PER_DAY );\n\n\t\tif( isset( $metrics[$t_date] ) ) {\n\t\t\t$metrics[$t_date][0]++;\n\t\t} else {\n\t\t\t$metrics[$t_date] = array( 1, 0, 0, );\n\t\t}\n\t}\n\n\t# ## Get all the dates where a transition from not resolved to resolved may have happened\n\t#    also, get the last updated date for the bug as this may be all the information we have\n\t$query = \"SELECT $t_bug_table.id, last_updated, date_modified, new_value, old_value\n\t\t\tFROM $t_bug_table LEFT JOIN $t_history_table\n\t\t\tON $t_bug_table.id = $t_history_table.bug_id\n\t\t\tWHERE $specific_where\n\t\t\t\t\t\tAND $t_bug_table.status >= \" . db_param() . \"\n\t\t\t\t\t\tAND ( ( $t_history_table.new_value >= \" . db_param() . \"\n\t\t\t\t\t\t\t\tAND $t_history_table.field_name = 'status' )\n\t\t\t\t\t\tOR $t_history_table.id is NULL )\n\t\t\tORDER BY $t_bug_table.id, date_modified ASC\";\n\t$result = db_query( $query, array( $t_res_val, $t_res_val ) );\n\t$bug_count = db_num_rows( $result );\n\n\t$t_last_id = 0;\n\t$t_last_date = 0;\n\n\tfor( $i = 0;$i < $bug_count;$i++ ) {\n\t\t$row = db_fetch_array( $result );\n\t\t$t_id = $row['id'];\n\n\t\t# if h_last_updated is NULL, there were no appropriate history records\n\t\t#  (i.e. pre 0.18 data), use last_updated from bug table instead\n\t\tif( NULL == $row['date_modified'] ) {\n\t\t\t$t_date = $row['last_updated'];\n\t\t} else {\n\t\t\tif( $t_res_val > $row['old_value'] ) {\n\t\t\t\t$t_date = $row['date_modified'];\n\t\t\t}\n\t\t}\n\t\tif( $t_id <> $t_last_id ) {\n\t\t\tif( 0 <> $t_last_id ) {\n\n\t\t\t\t# rationalise the timestamp to a day to reduce the amount of data\n\t\t\t\t$t_date_index = (int)( $t_last_date / SECONDS_PER_DAY );\n\n\t\t\t\tif( isset( $metrics[$t_date_index] ) ) {\n\t\t\t\t\t$metrics[$t_date_index][1]++;\n\t\t\t\t} else {\n\t\t\t\t\t$metrics[$t_date_index] = array(\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\t0,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$t_last_id = $t_id;\n\t\t}\n\t\t$t_last_date = $t_date;\n\t}\n\n\tksort( $metrics );\n\n\t$metrics_count = count( $metrics );\n\t$t_last_opened = 0;\n\t$t_last_resolved = 0;\n\tforeach( $metrics as $i => $vals ) {\n\t\t$t_date = $i * SECONDS_PER_DAY;\n\t\t$t_metrics[0][$t_date] = $t_last_opened = $metrics[$i][0] + $t_last_opened;\n\t\t$t_metrics[1][$t_date] = $t_last_resolved = $metrics[$i][1] + $t_last_resolved;\n\t\t$t_metrics[2][$t_date] = $t_metrics[0][$t_date] - $t_metrics[1][$t_date];\n\t}\n\treturn $t_metrics;\n}\n\nfunction graph_date_format( $p_date ) {\n\treturn date( config_get( 'short_date_format' ), $p_date );\n}\n\n# ----------------------------------------------------\n# Check that there is enough data to create graph\n# ----------------------------------------------------\nfunction error_check( $bug_count, $title ) {\n\tif( 0 == $bug_count ) {\n\t\terror_text( $title, plugin_lang_get( 'not_enough_data' ) );\n\t}\n}\n\nfunction error_text( $title, $text ) {\n\t\tif( OFF == plugin_config_get( 'eczlibrary' ) ) {\n\n\t\t\t$t_graph_font = graph_get_font();\n\n\t\t\t$graph = new CanvasGraph( 300, 380 );\n\n\t\t\t$txt = new Text( $text, 150, 100 );\n\t\t\t$txt->Align( \"center\", \"center\", \"center\" );\n\t\t\t$txt->SetFont( $t_graph_font, FS_BOLD );\n\t\t\t$graph->title->Set( $title );\n\t\t\t$graph->title->SetFont( $t_graph_font, FS_BOLD );\n\t\t\t$graph->AddText( $txt );\n\t\t\t$graph->Stroke();\n\t\t} else {\n\t\t\t$im = imagecreate(300, 300);\n\t\t\t/* @todo check: error graphs dont support utf8 */\n\t\t\t$bg = imagecolorallocate($im, 255, 255, 255);\n\t\t\t$textcolor = imagecolorallocate($im, 0, 0, 0);\n\t\t\timagestring($im, 5, 0, 0, $text, $textcolor);\n\t\t\theader('Content-type: image/png');\n\t\t\timagepng($im);\n\t\t\timagedestroy($im);\n\t\t}\n\tdie;\n}\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n\t/**\n\t * @package MantisBT\n\t * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n\t * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n\t * @link http://www.mantisbt.org\n\t */\n\t /**\n\t  * MantisBT Core API's\n\t  */\n\trequire_once( 'core.php' );\n\n\trequire_once( 'Period.php' );\n\trequire_once( 'graph_api.php' );\n\n\taccess_ensure_project_level( config_get( 'view_summary_threshold' ) );\n\n\t$f_width = gpc_get_int( 'width', 600 );\n\t$t_ar = plugin_config_get( 'bar_aspect' );\n\t$t_interval = new Period();\n\t$t_interval->set_period_from_selector( 'interval' );\n\t$f_show_as_table = gpc_get_bool( 'show_table', FALSE );\n\t$f_summary = gpc_get_bool( 'summary', FALSE );\n\n\t$t_interval_days = $t_interval->get_elapsed_days();\n\tif ( $t_interval_days <= 14 ) {\n\t    $t_incr = 60 * 60; // less than 14 days, use hourly\n\t} else if ( $t_interval_days <= 92 ) {\n\t    $t_incr = 24 * 60 * 60; // less than three month, use daily\n\t} else {\n\t    $t_incr = 7 * 24 * 60 * 60; // otherwise weekly\n\t}\n\n\t$f_page_number = 1;\n\n\t$t_per_page = -1;\n\t$t_bug_count = null;\n\t$t_page_count = 0;\n\n\t$t_filter = current_user_get_bug_filter();\n    $t_filter['_view_type']\t= 'advanced';\n    $t_filter['show_status'] = array(META_FILTER_ANY);\n\t$t_filter['sort'] = '';\n\t$rows = filter_get_bug_rows( $f_page_number, $t_per_page, $t_page_count, $t_bug_count, $t_filter, null, null, true );\n\tif ( count($rows) == 0 ) {\n\t\t// no data to graph\n\t\texit();\n\t}\n\n\t$t_bug_table\t\t\t= db_get_table( 'mantis_bug_table' );\n\t$t_bug_hist_table\t\t\t= db_get_table( 'mantis_bug_history_table' );\n\n\t$t_marker = array();\n\t$t_data = array();\n\t$t_ptr = 0;\n\t$t_end = $t_interval->get_end_timestamp();\n\t$t_start = $t_interval->get_start_timestamp();\n\n    $t_resolved = config_get( 'bug_resolved_status_threshold' );\n    $t_closed = config_get( 'bug_closed_status_threshold' );\n\n    $t_bug = array();\n    $t_bug_cat = array(); // save categoties or bugs to look up resolved ones.\n    $t_category = array();\n\n\t// walk through all issues and grab their category for 'now'\n\t$t_marker[$t_ptr] = time();\n\t$t_data[$t_ptr] = array();\n\tforeach ($rows as $t_row) {\n\t    // the following function can treat the resolved parameter as an array to match\n        $t_cat = category_get_name( $t_row->category_id );\n        if ($t_cat == '')\n            $t_cat = 'none';\n\t    if ( !access_compare_level( $t_row->status, $t_resolved ) ) {\n\t        if (in_array($t_cat, $t_category)) {\n                $t_data[$t_ptr][$t_cat] ++;\n            } else {\n                $t_data[$t_ptr][$t_cat] = 1;\n                $t_category[] = $t_cat;\n            }\n        }\n        $t_bug[] = $t_row->id;\n        $t_bug_cat[$t_row->id] = $t_cat;\n\t}\n\n    // get the history for these bugs over the interval required to offset the data\n    // type = 0 and field=status are status changes\n    // type = 1 are new bugs\n    $t_select = 'SELECT bug_id, type, field_name, old_value, new_value, date_modified FROM '.$t_bug_hist_table.\n        ' WHERE bug_id in ('.implode(',', $t_bug).') and '.\n            '( (type='.NORMAL_TYPE.' and field_name=\\'category\\') or '.\n                '(type='.NORMAL_TYPE.' and field_name=\\'status\\') or type='.NEW_BUG.' ) and '.\n\t\t'date_modified >= ' . db_param() .\n            ' order by date_modified DESC';\n\t$t_result = db_query_bound( $t_select, array( $t_start ) );\n\t$row = db_fetch_array( $t_result );\n\n\tfor ($t_now = time() - $t_incr; $t_now >= $t_start; $t_now -= $t_incr) {\n\t    // walk through the data points and use the data retrieved to update counts\n\t    while( ( $row !== false ) && ( $row['date_modified'] >= $t_now ) ) {\n\t        switch ($row['type']) {\n    \t        case 0: // updated bug\n    \t            if ($row['field_name'] == 'category') {\n\t                    $t_cat = $row['new_value'];\n            \t        if ($t_cat == '')\n            \t            $t_cat = 'none';\n            \t        if (in_array($t_cat, $t_category)) {\n                            $t_data[$t_ptr][$t_cat] --;\n                        } else {\n                            $t_data[$t_ptr][$t_cat] = 0;\n                            $t_category[] = $t_cat;\n                        }\n\t                    $t_cat = $row['old_value'];\n            \t        if ($t_cat == '')\n            \t            $t_cat = 'none';\n            \t        if (in_array($t_cat, $t_category)) {\n                            $t_data[$t_ptr][$t_cat] ++;\n                        } else {\n                            $t_data[$t_ptr][$t_cat] = 1;\n                            $t_category[] = $t_cat;\n                        }\n                        // change the category associated with the bug to match in case the bug was\n                        //  created during the scan\n                        $t_bug_cat[$row['bug_id']] = $t_cat;\n                    } else { // change of status access_compare_level( $t_row['status'], $t_resolved )\n                        if ( access_compare_level( $row['new_value'], $t_resolved ) &&\n                                !access_compare_level( $row['old_value'], $t_resolved ) ) {\n                            // transition from open to closed\n                            $t_cat = $t_bug_cat[$row['bug_id']];\n            \t            if ($t_cat == '')\n            \t                $t_cat = 'none';\n            \t            if (in_array($t_cat, $t_category)) {\n                                $t_data[$t_ptr][$t_cat] ++;\n                            } else {\n                                $t_data[$t_ptr][$t_cat] = 1;\n                                $t_category[] = $t_cat;\n                            }\n                        }\n                    }\n                    break;\n    \t        case 1: // new bug\n                    $t_cat = $t_bug_cat[$row['bug_id']];\n    \t            if ($t_cat == '')\n    \t                $t_cat = 'none';\n    \t            if (in_array($t_cat, $t_category)) {\n                        $t_data[$t_ptr][$t_cat] --;\n                    } else {\n                        $t_data[$t_ptr][$t_cat] = 0;\n                        $t_category[] = $t_cat;\n                    }\n                    break;\n            }\n        \t$row = db_fetch_array( $t_result );\n        }\n\n\t    if ($t_now <= $t_end) {\n    \t    $t_marker[$t_ptr] = $t_now;\n\t        $t_ptr++;\n\t        foreach ( $t_category as $t_cat ) {\n\t            $t_data[$t_ptr][$t_cat] = $t_data[$t_ptr-1][$t_cat];\n            }\n        }\n\t}\n    $t_bin_count = $t_ptr;\n// drop any categories that have no counts\n//  These arise when bugs are opened and closed within the data intervals\n    $t_count_cat = count( $t_category );\n    for ( $t=0; $t<$t_count_cat; $t++ ) {\n        $t_cat = $t_category[ $t ];\n        $t_not_zero = false;\n        for ($t_ptr=0; $t_ptr<$t_bin_count; $t_ptr++) {\n            if ( isset( $t_data[$t_ptr][$t_cat] ) && ( $t_data[$t_ptr][$t_cat] > 0 ) ) {\n                $t_not_zero = true;\n                break;\n            }\n        }\n        if ( !$t_not_zero ) {\n            unset( $t_category[ $t ] );\n\t\t}\n    }\n// sort and display the results\n    sort($t_category);\n    if ($f_show_as_table) {\n\t\t$t_date_format = config_get( 'short_date_format' );\n        html_begin();\n        html_head_begin();\n        html_css();\n        html_content_type();\n        html_title( lang_get( 'by_category' ) );\n    \thtml_head_end();\n    \thtml_body_begin();\n\t    echo '<table class=\"width100\"><tr><td></td>';\n        foreach ( $t_category as $t_cat ) {\n            echo '<th>'.$t_cat.'</th>';\n        }\n        echo '</tr>';\n\t    for ($t_ptr=0; $t_ptr<$t_bin_count; $t_ptr++) {\n            echo '<tr class=\"row-'.($t_ptr%2+1).'\"><td>'.$t_ptr.' ('. date( $t_date_format, $t_marker[$t_ptr] ) .')'.'</td>';\n            foreach ( $t_category as $t_cat ) {\n                echo '<td>'.(isset($t_data[$t_ptr][$t_cat]) ? $t_data[$t_ptr][$t_cat] : 0).'</td>';\n            }\n            echo '</tr>';\n        }\n\t    echo '</table>';\n    \thtml_body_end();\n    \thtml_end();\n\t} else {\n\t    // reverse the array and reorder the data, if necessary\n\t    $t_metrics = array();\n\t    for ($t_ptr=0; $t_ptr<$t_bin_count; $t_ptr++) {\n\t        $t = $t_bin_count - $t_ptr - 1;\n\t        $t_metrics[0][$t_ptr] = $t_marker[$t];\n            $i = 0;\n            foreach ( $t_category as $t_cat ) {\n        \t    $t_metrics[++$i][$t_ptr] = isset($t_data[$t][$t_cat]) ? $t_data[$t][$t_cat] : 0;\n            }\n\t    }\n\t    array_unshift( $t_category, '' ); // add placeholder\n\t    graph_bydate( $t_metrics, $t_category, lang_get( 'by_category' ), $f_width, $f_width * $t_ar );\n    }\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n\t/**\n\t * @package MantisBT\n\t * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n\t * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n\t * @link http://www.mantisbt.org\n\t */\n\t /**\n\t  * MantisBT Core API's\n\t  */\n\trequire_once( 'core.php' );\n\n\trequire_once( 'Period.php' );\n\trequire_once( 'graph_api.php' );\n\n\taccess_ensure_project_level( config_get( 'view_summary_threshold' ) );\n\n\t$f_width = gpc_get_int( 'width', 600 );\n\t$t_ar = plugin_config_get( 'bar_aspect' );\n\t$t_interval = new Period();\n\t$t_interval->set_period_from_selector( 'interval' );\n\t$f_show_as_table = gpc_get_bool( 'show_table', FALSE );\n\t$f_summary = gpc_get_bool( 'summary', FALSE );\n\n\t$t_interval_days = $t_interval->get_elapsed_days();\n\tif ( $t_interval_days <= 14 ) {\n\t    $t_incr = 60 * 60; // less than 14 days, use hourly\n\t} else if ( $t_interval_days <= 92 ) {\n\t    $t_incr = 24 * 60 * 60; // less than three months, use daily\n\t} else {\n\t    $t_incr = 7 * 24 * 60 * 60; // otherwise weekly\n\t}\n\n\t$f_page_number = 1;\n\n\t$t_per_page = -1;\n\t$t_bug_count = null;\n\t$t_page_count = 0;\n\n\t$t_filter = current_user_get_bug_filter();\n    $t_filter['_view_type']\t= 'advanced';\n    $t_filter['show_status'] = array(META_FILTER_ANY);\n\t$t_filter['sort'] = '';\n\t$rows = filter_get_bug_rows( $f_page_number, $t_per_page, $t_page_count, $t_bug_count, $t_filter, null, null, true );\n\tif ( count($rows) == 0 ) {\n\t\t// no data to graph\n\t\texit();\n\t}\n\n\t$t_bug_table\t\t\t= db_get_table( 'mantis_bug_table' );\n\t$t_bug_hist_table\t\t\t= db_get_table( 'mantis_bug_history_table' );\n\n\t$t_marker = array();\n\t$t_data = array();\n\t$t_ptr = 0;\n\t$t_end = $t_interval->get_end_timestamp();\n\t$t_start = $t_interval->get_start_timestamp();\n\n\tif( $t_end == false || $t_start == false ) {\n\t\treturn;\n\t}\n\t// grab all status levels\n\t$t_status_arr  = MantisEnum::getAssocArrayIndexedByValues( config_get( 'status_enum_string' ) );\n\t$t_status_labels  = MantisEnum::getAssocArrayIndexedByValues( lang_get( 'status_enum_string' ) );\n\t$t_default_bug_status = config_get( 'bug_submit_status' );\n\n    $t_bug = array();\n    $t_view_status = array();\n\n\t// walk through all issues and grab their status for 'now'\n\t$t_marker[$t_ptr] = time();\n\tforeach ($rows as $t_row) {\n\t    if ( isset( $t_data[$t_ptr][$t_row->status] ) ) {\n            $t_data[$t_ptr][$t_row->status] ++;\n\t    } else {\n            $t_data[$t_ptr][$t_row->status] = 1;\n            $t_view_status[$t_row->status] =\n                isset($t_status_arr[$t_row->status]) ? $t_status_arr[$t_row->status] : '@'.$t_row->status.'@';\n        }\n        $t_bug[] = $t_row->id;\n\t}\n\n    // get the history for these bugs over the interval required to offset the data\n    // type = 0 and field=status are status changes\n    // type = 1 are new bugs\n    $t_select = 'SELECT bug_id, type, old_value, new_value, date_modified FROM '.$t_bug_hist_table.\n        ' WHERE bug_id in ('.implode(',', $t_bug).\n        ') and ( (type='.NORMAL_TYPE.' and field_name=\\'status\\')\n\tor type='.NEW_BUG.' ) and date_modified >= ' . db_param() .\n        ' order by date_modified DESC';\n\t$t_result = db_query_bound( $t_select, array( $t_start ) );\n\t$t_row = db_fetch_array( $t_result );\n\n\tfor ($t_now = time() - $t_incr; $t_now >= $t_start; $t_now -= $t_incr) {\n\t    // walk through the data points and use the data retrieved to update counts\n\t    while( ( $t_row !== false ) && ( $t_row['date_modified'] >= $t_now ) ) {\n\t        switch ($t_row['type']) {\n    \t        case 0: // updated bug\n        \t        if ( isset( $t_data[$t_ptr][$t_row['new_value']] ) ) {\n                        if ( $t_data[$t_ptr][$t_row['new_value']] > 0 )\n                            $t_data[$t_ptr][$t_row['new_value']] --;\n        \t        } else {\n                        $t_data[$t_ptr][$t_row['new_value']] = 0;\n                        $t_view_status[$t_row['new_value']] =\n                            isset($t_status_arr[$t_row['new_value']]) ? $t_status_arr[$t_row['new_value']] : '@'.$t_row['new_value'].'@';\n                    }\n        \t        if ( isset( $t_data[$t_ptr][$t_row['old_value']] ) ) {\n                        $t_data[$t_ptr][$t_row['old_value']] ++;\n        \t        } else {\n                        $t_data[$t_ptr][$t_row['old_value']] = 1;\n                        $t_view_status[$t_row['old_value']] =\n                            isset($t_status_arr[$t_row['old_value']]) ? $t_status_arr[$t_row['old_value']] : '@'.$t_row['old_value'].'@';\n                    }\n                    break;\n\t\t\t\tcase 1: // new bug\n\t\t\t\t\tif ( isset( $t_data[$t_ptr][$t_default_bug_status] ) ) {\n\t\t\t\t\t\tif ( $t_data[$t_ptr][$t_default_bug_status] > 0 )\n                            $t_data[$t_ptr][$t_default_bug_status] --;\n    \t            } else {\n                        $t_data[$t_ptr][$t_default_bug_status] = 0;\n                        $t_view_status[$t_default_bug_status] =\n                            isset( $t_status_arr[$t_default_bug_status] ) ? $t_status_arr[$t_default_bug_status] : '@' . $t_default_bug_status . '@';\n                    }\n                    break;\n            }\n        \t$t_row = db_fetch_array( $t_result );\n        }\n\n\t    if ($t_now <= $t_end) {\n\t        $t_ptr++;\n    \t    $t_marker[$t_ptr] = $t_now;\n\t        foreach ( $t_view_status as $t_status => $t_label ) {\n\t            $t_data[$t_ptr][$t_status] = $t_data[$t_ptr-1][$t_status];\n            }\n        }\n\t}\n\n    ksort($t_view_status);\n    /* @todo - these should probably be separate strings, but in the summary page context,\n        the string is used as the title for all columns */\n    $t_label_string = lang_get('orct'); //use the (open/resolved/closed/total) label\n    $t_label_strings = explode('/', utf8_substr($t_label_string, 1, strlen($t_label_string)-2));\n\n    // add headers for table\n    if ($f_show_as_table) {\n\t\t$t_date_format = config_get( 'short_date_format' );\n        html_begin();\n        html_head_begin();\n        html_css();\n        html_content_type();\n        html_title( lang_get( 'by_status' ) );\n    \thtml_head_end();\n    \thtml_body_begin();\n\t    echo '<table class=\"width100\"><tr><td></td>';\n        if ($f_summary) {\n            echo '<th>' . $t_label_strings[0] . '</th>';\n            echo '<th>' . $t_label_strings[1] . '</th>';\n            echo '<th>' . $t_label_strings[2] . '</th>';\n        } else {\n            foreach ( $t_view_status as $t_status => $t_label ) {\n                echo '<th>'.$t_label.' ('.$t_status.')</th>';\n            }\n        }\n        echo '</tr>';\n    }\n\n\t$t_resolved = config_get( 'bug_resolved_status_threshold' );\n\t$t_closed = config_get( 'bug_closed_status_threshold' );\n\t$t_bin_count = $t_ptr;\n\t$t_labels = array();\n\t$i = 0;\n    if ($f_summary) {\n\n        $t_labels[++$i] = $t_label_strings[0];\n        $t_labels[++$i] = $t_label_strings[1];\n        $t_labels[++$i] = $t_label_strings[2];\n    } else {\n        foreach ( $t_view_status as $t_status => $t_label ) {\n            $t_labels[++$i] = isset($t_status_labels[$t_status]) ? $t_status_labels[$t_status] : lang_get_defaulted($t_label);\n        }\n    }\n    $t_label_count = $i;\n\n\t// reverse the array and consolidate the data, if necessary\n\t$t_metrics = array();\n\tfor ($t_ptr=0; $t_ptr<$t_bin_count; $t_ptr++) {\n\t    $t = $t_bin_count - $t_ptr;\n\t    $t_metrics[0][$t_ptr] = $t_marker[$t];\n\t    if ($f_summary) {\n\t        $t_metrics[1][$t_ptr] = 0;\n\t        $t_metrics[2][$t_ptr] = 0;\n\t        $t_metrics[3][$t_ptr] = 0;\n            foreach ( $t_view_status as $t_status => $t_label ) {\n                if ( isset( $t_data[$t][$t_status] ) ) {\n                    if ( $t_status < $t_resolved )\n        \t            $t_metrics[1][$t_ptr] += $t_data[$t][$t_status];\n                    else if ( $t_status < $t_closed )\n        \t            $t_metrics[2][$t_ptr] += $t_data[$t][$t_status];\n                    else\n        \t            $t_metrics[3][$t_ptr] += $t_data[$t][$t_status];\n        \t    }\n            }\n        } else {\n            $i = 0;\n            foreach ( $t_view_status as $t_status => $t_label ) {\n                if ( isset( $t_data[$t][$t_status] ) )\n        \t        $t_metrics[++$i][$t_ptr] = $t_data[$t][$t_status];\n        \t    else\n        \t        $t_metrics[++$i][$t_ptr] = 0;\n            }\n        }\n        if ( $f_show_as_table ) {\n            echo '<tr class=\"row-'.($t_ptr%2+1).'\"><td>'.$t_ptr.' ('. date( $t_date_format, $t_metrics[0][$t_ptr] ) .')'.'</td>';\n            for ( $i=1; $i<=$t_label_count; $i++ ) {\n                echo '<td>'.$t_metrics[$i][$t_ptr].'</td>';\n            }\n            echo '</tr>';\n        }\n\n\t}\n    if ($f_show_as_table) {\n        echo '</table>';\n    \thtml_body_end();\n    \thtml_end();\n    } else {\n\t    graph_bydate( $t_metrics, $t_labels, lang_get( 'by_status' ), $f_width, $f_width * $t_ar );\n\t}\n", "<?php\n# MantisBT - a php based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n\t/**\n\t * @package MantisBT\n\t * @copyright Copyright (C) 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n\t * @copyright Copyright (C) 2002 - 2013  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n\t * @link http://www.mantisbt.org\n\t */\n\t /**\n\t  * MantisBT Core API's\n\t  */\n\trequire_once( 'core.php' );\n\n\trequire_once( 'string_api.php' );\n\n\t$f_project_id = gpc_get_int( 'project_id', helper_get_current_project() );\n\n\t# Check if project documentation feature is enabled.\n\tif ( OFF == config_get( 'enable_project_documentation' ) || !file_is_uploading_enabled() ) {\n\t\taccess_denied();\n\t}\n\n\t# Override the current page to make sure we get the appropriate project-specific configuration\n\t$g_project_override = $f_project_id;\n\n\t$t_user_id = auth_get_current_user_id();\n\t$t_project_file_table = db_get_table( 'mantis_project_file_table' );\n\t$t_project_table = db_get_table( 'mantis_project_table' );\n\t$t_project_user_list_table = db_get_table( 'mantis_project_user_list_table' );\n\t$t_user_table = db_get_table( 'mantis_user_table' );\n\t$t_pub = VS_PUBLIC;\n\t$t_priv = VS_PRIVATE;\n\t$t_admin = config_get_global( 'admin_site_threshold' );\n\n\tif ( $f_project_id == ALL_PROJECTS ) {\n\t\t# Select all the projects that the user has access to\n\t\t$t_projects = user_get_accessible_projects( $t_user_id );\n\t} else {\n\t\t# Select the specific project\n\t\t$t_projects = array( $f_project_id );\n\t}\n\n\t$t_projects[] = ALL_PROJECTS; # add \"ALL_PROJECTS to the list of projects to fetch\n\n\t$t_reqd_access = config_get( 'view_proj_doc_threshold' );\n\tif ( is_array( $t_reqd_access ) ) {\n\t\tif ( 1 == count( $t_reqd_access ) ) {\n\t\t\t$t_access_clause = \"= \" . array_shift( $t_reqd_access ) . \" \";\n\t\t} else {\n\t\t\t$t_access_clause = \"IN (\" . implode( ',', $t_reqd_access ) . \")\";\n\t\t}\n\t} else {\n\t\t$t_access_clause = \">= $t_reqd_access \";\n\t}\n\n\t$query = \"SELECT pft.id, pft.project_id, pft.filename, pft.filesize, pft.title, pft.description, pft.date_added\n\t\t\t\tFROM $t_project_file_table pft\n\t\t\t\t\tLEFT JOIN $t_project_table pt ON pft.project_id = pt.id\n\t\t\t\t\tLEFT JOIN $t_project_user_list_table pult\n\t\t\t\t\t\tON pft.project_id = pult.project_id AND pult.user_id = \" . db_param() . \"\n\t\t\t\t\tLEFT JOIN $t_user_table ut ON ut.id = \" . db_param() . \"\n\t\t\t\tWHERE pft.project_id in (\" . implode( ',', $t_projects ) . \") AND\n\t\t\t\t\t( ( ( pt.view_state = \" . db_param() . \" OR pt.view_state is null ) AND pult.user_id is null AND ut.access_level $t_access_clause ) OR\n\t\t\t\t\t\t( ( pult.user_id = \" . db_param() . \" ) AND ( pult.access_level $t_access_clause ) ) OR\n\t\t\t\t\t\t( ut.access_level >= \" . db_param() . \" ) )\n\t\t\t\tORDER BY pt.name ASC, pft.title ASC\";\n\t$result = db_query_bound( $query, array( $t_user_id, $t_user_id, $t_pub, $t_user_id, $t_admin ) );\n\t$num_files = db_num_rows( $result );\n\n\thtml_page_top( lang_get( 'docs_link' ) );\n?>\n<br />\n<div align=\"center\">\n<table class=\"width100\" cellspacing=\"1\">\n<tr>\n\t<td class=\"form-title\">\n\t\t<?php echo lang_get( 'project_documentation_title' ) ?>\n\t</td>\n\t<td class=\"right\">\n\t\t<?php print_doc_menu( 'proj_doc_page.php' ) ?>\n\t</td>\n</tr>\n<?php\n\tfor ($i=0;$i<$num_files;$i++) {\n\t\t$row = db_fetch_array( $result );\n\t\textract( $row, EXTR_PREFIX_ALL, 'v' );\n\t\t$v_filesize = number_format( $v_filesize );\n\t\t$v_title = string_display( $v_title );\n\t\t$v_description = string_display_links( $v_description );\n\t\t$v_date_added = date( config_get( 'normal_date_format' ), $v_date_added );\n\n?>\n<tr valign=\"top\" <?php echo helper_alternate_class( $i ) ?>>\n\t<td>\n<?php\n\t\t$t_href = '<a href=\"file_download.php?file_id='.$v_id.'&amp;type=doc\">';\n\t\techo $t_href;\n\t\tprint_file_icon( $v_filename );\n\t\techo '</a>&#160;' . $t_href . $v_title . '</a> (' . $v_filesize . lang_get( 'word_separator' ) . lang_get( 'bytes' ) . ')';\n?>\n\t<br />\n\t<span class=\"small\">\n<?php\n\t\tif( $v_project_id == ALL_PROJECTS ) {\n\t\t\techo lang_get( 'all_projects' ) . '<br />';\n\t\t}\n\t\telse if( $v_project_id != $f_project_id ) {\n\t\t\t$t_project_name = project_get_name( $v_project_id );\n\t\t\techo $t_project_name . '<br />';\n\t\t}\n\t\techo '(' . $v_date_added . ')';\n\t\tif ( access_has_project_level( config_get( 'upload_project_file_threshold', null, null, $v_project_id ), $v_project_id ) ) {\n\t\t\techo '&#160;';\n\t\t\tprint_button( 'proj_doc_edit_page.php?file_id='.$v_id, lang_get( 'edit_link' ) );\n\t\t\techo '&#160;';\n\t\t\tprint_button( 'proj_doc_delete.php?file_id=' . $v_id, lang_get( 'delete_link' ) );\n\t\t}\n?>\n\t</span>\n\t</td>\n\t<td>\n\t\t<?php echo $v_description ?>\n\t</td>\n</tr>\n<?php\n\t} # end for loop\n?>\n</table>\n</div>\n\n<?php\n\thtml_page_bottom();\n"], "filenames": ["admin/db_stats.php", "api/soap/mc_project_api.php", "core/news_api.php", "core/summary_api.php", "plugins/MantisGraph/core/graph_api.php", "plugins/MantisGraph/pages/bug_graph_bycategory.php", "plugins/MantisGraph/pages/bug_graph_bystatus.php", "proj_doc_page.php"], "buggy_code_start_loc": [33, 709, 269, 80, 585, 108, 104, 74], "buggy_code_end_loc": [38, 717, 327, 612, 827, 111, 107, 82], "fixing_code_start_loc": [33, 709, 269, 80, 586, 108, 104, 74], "fixing_code_end_loc": [38, 717, 329, 612, 835, 111, 107, 82], "type": "CWE-89", "message": "Multiple SQL injection vulnerabilities in MantisBT before 1.2.16 allow remote attackers to execute arbitrary SQL commands via unspecified parameters to the (1) mc_project_get_attachments function in api/soap/mc_project_api.php; the (2) news_get_limited_rows function in core/news_api.php; the (3) summary_print_by_enum, (4) summary_print_by_age, (5) summary_print_by_developer, (6) summary_print_by_reporter, or (7) summary_print_by_category function in core/summary_api.php; the (8) create_bug_enum_summary or (9) enum_bug_group function in plugins/MantisGraph/core/graph_api.php; (10) bug_graph_bycategory.php or (11) bug_graph_bystatus.php in plugins/MantisGraph/pages/; or (12) proj_doc_page.php, related to use of the db_query function, a different vulnerability than CVE-2014-1608.", "other": {"cve": {"id": "CVE-2014-1609", "sourceIdentifier": "cve@mitre.org", "published": "2014-03-20T16:55:12.323", "lastModified": "2021-01-12T18:05:59.507", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple SQL injection vulnerabilities in MantisBT before 1.2.16 allow remote attackers to execute arbitrary SQL commands via unspecified parameters to the (1) mc_project_get_attachments function in api/soap/mc_project_api.php; the (2) news_get_limited_rows function in core/news_api.php; the (3) summary_print_by_enum, (4) summary_print_by_age, (5) summary_print_by_developer, (6) summary_print_by_reporter, or (7) summary_print_by_category function in core/summary_api.php; the (8) create_bug_enum_summary or (9) enum_bug_group function in plugins/MantisGraph/core/graph_api.php; (10) bug_graph_bycategory.php or (11) bug_graph_bystatus.php in plugins/MantisGraph/pages/; or (12) proj_doc_page.php, related to use of the db_query function, a different vulnerability than CVE-2014-1608."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de inyecci\u00f3n SQL en MantisBT anterior a 1.2.16 permiten a atacantes remotos ejecutar comandos SQL arbitrarios a trav\u00e9s de par\u00e1metros no especificados hacia (1) la funci\u00f3n mc_project_get_attachments en api/soap/mc_project_api.php; (2) la funci\u00f3n news_get_limited_rows en core/news_api.php; la funci\u00f3n (3) summary_print_by_enum, (4) summary_print_by_age, (5) summary_print_by_developer, (6) summary_print_by_reporter o (7) summary_print_by_category en core/summary_api.php; la funci\u00f3n (8) create_bug_enum_summary o (9) enum_bug_group en plugins/MantisGraph/core/graph_api.php; (10) bug_graph_bycategory.php o (11) bug_graph_bystatus.php en plugins/MantisGraph/pages/ o (12) proj_doc_page.php, relacionado con el uso de la funci\u00f3n db_query, una vulnerabilidad diferente a CVE-2014-1608."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.15", "matchCriteriaId": "ED59DEDF-08A2-4BEB-9DE3-0205CA2D69B4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "CFF77ABF-0A03-437A-B241-1EF2BBB83D24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "9DA2615A-CD65-4765-AB0A-D72C2BEB00F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "7D09CC46-DFA2-408D-8720-05C23E73C859"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:alpha3:*:*:*:*:*:*", "matchCriteriaId": "3461212B-A96B-4D38-A722-84E7418C2A7A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "7B6DEE14-744B-4DE4-BDCF-E4E4D37F70A0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "D4462BEE-39B6-47BD-B08F-5BE1FD918221"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "5F096CD6-534E-4ABF-B2DF-D4B55B8C5F6A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "A66AB537-6FBA-4A51-B10C-BF61F54BC01B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "A50835BF-D28B-47FF-81F0-C34D95D6F2E9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "BA0EB9A6-1DFD-4C17-A002-0899DA252A56"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.5:*:*:*:*:*:*:*", "matchCriteriaId": "BBA33285-3EE7-43FD-8347-E7D9A18DC134"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.6:*:*:*:*:*:*:*", "matchCriteriaId": "8827C2B4-EBEC-4D64-9AC8-07A048467F40"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.7:*:*:*:*:*:*:*", "matchCriteriaId": "1F32DFF4-6448-46FD-9358-4FB1C310EC2E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.8:*:*:*:*:*:*:*", "matchCriteriaId": "20328CE4-0488-43B8-AA64-A6CB2230C74C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.9:*:*:*:*:*:*:*", "matchCriteriaId": "0BDEB950-D3F4-4B96-B456-B8441DC403D9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.10:*:*:*:*:*:*:*", "matchCriteriaId": "FE69E6A6-8CD2-4C8A-A30A-CB0A04AC539F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.11:*:*:*:*:*:*:*", "matchCriteriaId": "D464F7CF-A156-4EE5-BB59-6C759448EB23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.13:*:*:*:*:*:*:*", "matchCriteriaId": "5F1BFB72-CDD6-466E-ACAD-EA442D11C22F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.14:*:*:*:*:*:*:*", "matchCriteriaId": "DD11DD1B-EC1C-48F4-B4C6-1CF6A0F80970"}]}]}], "references": [{"url": "http://secunia.com/advisories/61432", "source": "cve@mitre.org"}, {"url": "http://www.debian.org/security/2014/dsa-3030", "source": "cve@mitre.org"}, {"url": "http://www.mantisbt.org/bugs/view.php?id=16880", "source": "cve@mitre.org"}, {"url": "http://www.ocert.org/advisories/ocert-2014-001.html", "source": "cve@mitre.org", "tags": ["US Government Resource"]}, {"url": "http://www.securityfocus.com/bid/65461", "source": "cve@mitre.org"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1063111", "source": "cve@mitre.org"}, {"url": "https://github.com/mantisbt/mantisbt/commit/7efe0175f0853e18ebfacedfd2374c4179028b3f", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/mantisbt/mantisbt/commit/7efe0175f0853e18ebfacedfd2374c4179028b3f"}}