{"buggy_code": ["object mainFrm: TmainFrm\n  Left = 293\n  Top = 219\n  Caption = 'HFS ~ HTTP File Server'\n  ClientHeight = 391\n  ClientWidth = 913\n  Color = clBtnFace\n  Constraints.MinHeight = 260\n  Constraints.MinWidth = 390\n  Font.Charset = DEFAULT_CHARSET\n  Font.Color = clWindowText\n  Font.Height = -12\n  Font.Name = 'Tahoma'\n  Font.Style = []\n  KeyPreview = True\n  OldCreateOrder = False\n  Position = poDesigned\n  OnClose = FormClose\n  OnCloseQuery = FormCloseQuery\n  OnCreate = FormCreate\n  OnKeyDown = FormKeyDown\n  OnKeyUp = FormKeyUp\n  OnResize = FormResize\n  OnShow = FormShow\n  PixelsPerInch = 96\n  TextHeight = 14\n  object graphSplitter: TSplitter\n    Left = 0\n    Top = 78\n    Width = 913\n    Height = 5\n    Cursor = crVSplit\n    Align = alTop\n    AutoSnap = False\n    Beveled = True\n    MinSize = 15\n    ResizeStyle = rsUpdate\n    OnMoved = graphSplitterMoved\n    ExplicitTop = 86\n    ExplicitWidth = 752\n  end\n  object graphBox: TPaintBox\n    Left = 0\n    Top = 48\n    Width = 913\n    Height = 30\n    Hint = 'Pink = Out'#13#10'Yellow = In'\n    Align = alTop\n    Font.Charset = DEFAULT_CHARSET\n    Font.Color = clWindowText\n    Font.Height = -12\n    Font.Name = 'Tahoma'\n    Font.Style = []\n    ParentFont = False\n    ParentShowHint = False\n    PopupMenu = graphMenu\n    ShowHint = True\n    OnPaint = graphBoxPaint\n    ExplicitTop = 51\n    ExplicitWidth = 752\n  end\n  object topToolbar: TToolBar\n    Left = 0\n    Top = 0\n    Width = 913\n    Height = 24\n    AutoSize = True\n    ButtonWidth = 150\n    Caption = 'topToolbar'\n    EdgeBorders = [ebBottom]\n    Font.Charset = DEFAULT_CHARSET\n    Font.Color = clWindowText\n    Font.Height = -12\n    Font.Name = 'Tahoma'\n    Font.Style = []\n    Images = images\n    List = True\n    ParentFont = False\n    ShowCaptions = True\n    TabOrder = 1\n    object menuBtn: TToolButton\n      Left = 0\n      Top = 0\n      Hint = 'Hit ALT or F10 to pop it up'\n      AutoSize = True\n      Caption = 'Menu'\n      ImageIndex = 13\n      ParentShowHint = False\n      ShowHint = True\n      OnClick = menuBtnClick\n    end\n    object ToolButton4: TToolButton\n      Left = 61\n      Top = 0\n      Width = 9\n      Caption = 'ToolButton4'\n      ImageIndex = 15\n      Style = tbsSeparator\n    end\n    object portBtn: TToolButton\n      Left = 70\n      Top = 0\n      AutoSize = True\n      Caption = 'Port: any'\n      ImageIndex = 38\n      OnClick = portBtnClick\n    end\n    object ToolButton2: TToolButton\n      Left = 151\n      Top = 0\n      Width = 8\n      Caption = 'ToolButton2'\n      ImageIndex = 16\n      Style = tbsSeparator\n    end\n    object modeBtn: TToolButton\n      Left = 159\n      Top = 0\n      Hint = 'Click to switch'#13#10'F5 on keyboard'\n      AutoSize = True\n      Caption = 'You are in Easy mode'\n      ImageIndex = 29\n      ParentShowHint = False\n      ShowHint = True\n      OnClick = modeBtnClick\n    end\n    object ToolButton1: TToolButton\n      Left = 309\n      Top = 0\n      Width = 9\n      Caption = 'ToolButton1'\n      ImageIndex = 13\n      Style = tbsSeparator\n    end\n    object startBtn: TToolButton\n      Left = 318\n      Top = 0\n      Hint = 'Click to switch ON'#13'F4 on keyboard'\n      AutoSize = True\n      Caption = 'Server is currently OFF'\n      ImageIndex = 11\n      ParentShowHint = False\n      ShowHint = True\n      OnClick = startBtnClick\n    end\n    object abortBtn: TToolButton\n      Left = 472\n      Top = 0\n      AutoSize = True\n      Caption = 'Abort file addition'\n      ImageIndex = 25\n      Visible = False\n      OnClick = abortBtnClick\n    end\n    object restoreCfgBtn: TToolButton\n      Left = 600\n      Top = 0\n      Caption = 'Restore my options'\n      ImageIndex = 34\n      Visible = False\n      OnClick = restoreCfgBtnClick\n    end\n    object updateBtn: TToolButton\n      Left = 750\n      Top = 0\n      AutoSize = True\n      Caption = 'Update now'\n      ImageIndex = 10\n      Visible = False\n      OnClick = updateBtnClick\n    end\n  end\n  object urlToolbar: TToolBar\n    Left = 0\n    Top = 24\n    Width = 913\n    Height = 24\n    AutoSize = True\n    ButtonWidth = 122\n    EdgeBorders = [ebBottom]\n    Font.Charset = DEFAULT_CHARSET\n    Font.Color = clWindowText\n    Font.Height = -12\n    Font.Name = 'Tahoma'\n    Font.Style = []\n    Images = images\n    List = True\n    ParentFont = False\n    ShowCaptions = True\n    TabOrder = 2\n    Wrapable = False\n    object browseBtn: TToolButton\n      Left = 0\n      Top = 0\n      AutoSize = True\n      Caption = 'Open in browser'\n      ImageIndex = 26\n      OnClick = browseBtnClick\n    end\n    object urlBox: TEdit\n      Left = 122\n      Top = 0\n      Width = 433\n      Height = 22\n      TabOrder = 0\n      OnChange = urlBoxChange\n    end\n    object copyBtn: TToolButton\n      Left = 555\n      Top = 0\n      AutoSize = True\n      Caption = 'Copy to clipboard'\n      ImageIndex = 16\n      OnClick = copyBtnClick\n    end\n  end\n  object centralPnl: TPanel\n    Left = 0\n    Top = 83\n    Width = 913\n    Height = 308\n    Align = alClient\n    BevelOuter = bvNone\n    Font.Charset = DEFAULT_CHARSET\n    Font.Color = clWindowText\n    Font.Height = -12\n    Font.Name = 'Tahoma'\n    Font.Style = []\n    ParentFont = False\n    TabOrder = 0\n    object splitV: TSplitter\n      Left = 313\n      Top = 0\n      Height = 197\n      Beveled = True\n      Constraints.MaxWidth = 3\n      Constraints.MinWidth = 3\n      ResizeStyle = rsUpdate\n      OnMoved = splitVMoved\n      ExplicitHeight = 219\n    end\n    object splitH: TSplitter\n      Left = 0\n      Top = 197\n      Width = 913\n      Height = 5\n      Cursor = crVSplit\n      Align = alBottom\n      Beveled = True\n      MinSize = 1\n      ResizeStyle = rsUpdate\n      OnMoved = splitHMoved\n      ExplicitTop = 218\n      ExplicitWidth = 732\n    end\n    object logPnl: TPanel\n      Left = 316\n      Top = 0\n      Width = 597\n      Height = 197\n      Align = alClient\n      BevelOuter = bvNone\n      TabOrder = 1\n      object logBox: TRichEdit\n        Left = 0\n        Top = 23\n        Width = 597\n        Height = 174\n        Align = alClient\n        Font.Charset = ANSI_CHARSET\n        Font.Color = clWindowText\n        Font.Height = -12\n        Font.Name = 'Tahoma'\n        Font.Style = []\n        HideSelection = False\n        ParentFont = False\n        PopupMenu = logmenu\n        ReadOnly = True\n        ScrollBars = ssBoth\n        TabOrder = 0\n        WordWrap = False\n        Zoom = 100\n        OnChange = logBoxChange\n        OnMouseDown = logBoxMouseDown\n      end\n      object logTitle: TPanel\n        Left = 0\n        Top = 0\n        Width = 597\n        Height = 23\n        Align = alTop\n        BevelOuter = bvNone\n        TabOrder = 1\n        object titlePnl: TPanel\n          Left = 0\n          Top = 0\n          Width = 337\n          Height = 23\n          Align = alClient\n          BevelOuter = bvNone\n          Caption = 'Log'\n          TabOrder = 0\n        end\n        object logToolbar: TPanel\n          Left = 337\n          Top = 0\n          Width = 260\n          Height = 23\n          Align = alRight\n          AutoSize = True\n          BevelOuter = bvNone\n          TabOrder = 1\n          object collapsedPnl: TPanel\n            Left = 0\n            Top = 0\n            Width = 21\n            Height = 23\n            Align = alRight\n            AutoSize = True\n            BevelOuter = bvNone\n            TabOrder = 0\n            object expandBtn: TSpeedButton\n              Left = 0\n              Top = 0\n              Width = 21\n              Height = 23\n              Hint = 'Expand toolbar'\n              Align = alClient\n              Flat = True\n              Glyph.Data = {\n                EE010000424DEE0100000000000036000000280000000D0000000B0000000100\n                180000000000B801000000000000000000000000000000000000C8D0D4C8D0D4\n                C8D0D4C8D0D4C8D0D49A775AC8D0D4C8D0D4C8D0D4C8D0D49A775AC8D0D4C8D0\n                D473C8D0D4C8D0D4C8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A\n                8C05009A775AC8D0D473C8D0D4C8D0D4C8D0D4AC76578C05009A775AC8D0D4C8\n                D0D4AC76578C05009A775AC8D0D4C8D0D473C8D0D4C8D0D49A775A8C05009A77\n                5AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D4C8D0D473C8D0D49A775A\n                8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D4C8D0D4C8D0\n                D4739A775A8C0500B37E5FC8D0D4C8D0D49A775A8C0500B37E5FC8D0D4C8D0D4\n                C8D0D4C8D0D4C8D0D473C8D0D4B17C5C8C05009A775AC8D0D4C8D0D4B17C5C8C\n                05009A775AC8D0D4C8D0D4C8D0D4C8D0D473C8D0D4C8D0D49A775A8C0500AF79\n                5AC8D0D4C8D0D49A775A8C0500AF795AC8D0D4C8D0D4C8D0D473C8D0D4C8D0D4\n                C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0\n                D473C8D0D4C8D0D4C8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A\n                8C05009A775AC8D0D473C8D0D4C8D0D4C8D0D4C8D0D4C8D0D49A775AC8D0D4C8\n                D0D4C8D0D4C8D0D49A775AC8D0D4C8D0D473}\n              ParentShowHint = False\n              ShowHint = True\n              OnClick = expandBtnClick\n              ExplicitTop = 1\n            end\n          end\n          object expandedPnl: TPanel\n            Left = 21\n            Top = 0\n            Width = 239\n            Height = 23\n            Align = alRight\n            AutoSize = True\n            BevelOuter = bvNone\n            TabOrder = 1\n            object openFilteredLog: TSpeedButton\n              Left = 213\n              Top = 0\n              Width = 26\n              Height = 23\n              Hint = 'Copy to editor only lines matched by the search pattern'\n              Align = alRight\n              Enabled = False\n              Flat = True\n              Glyph.Data = {\n                36060000424D3606000000000000360000002800000020000000100000000100\n                18000000000000060000C21E0000C21E00000000000000000000FF00FFFF00FF\n                FF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00\n                FF979697756A67A3A2A2FF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF\n                00FFFF00FFFF00FFFF00FFFF00FFFF00FFAEAEAE989898B5B5B5FF00FFFF00FF\n                FF00FFFF00FFFF00FFC9A9A3D0AFA9E0B2A8E0B2A8E0B2A8E0B2A8E0B2A88B89\n                8A9C6F757890DB749AB5FF00FFFF00FFFF00FFFF00FFFF00FFB8B8B8BCBCBCBD\n                BDBDBDBDBDBDBDBDBDBDBDBDBDBDA8A8A89D9D9DB5B5B5B3B3B3FF00FFFF00FF\n                FF00FFFF00FFFF00FFCDABA3E4D4C7F6EFE7F6EFE7F6EFE7F6EFE79291939D70\n                747185D340B4FF89D1F5FF00FFFF00FFFF00FFFF00FFFF00FFB9B9B9CCCCCCDA\n                DADADADADADADADADADADAADADAD9E9E9EB0B0B0C5C5C5CFCFCFFF00FFFF00FF\n                FF00FFFF00FFFF00FFCFB0AAEAD8CBF9EADAFBE7D3FBE4CDA7A9AB966C746F89\n                DB3DBFFF97D5F3FF00FFFF00FFFF00FFFF00FFFF00FFFF00FFBCBCBCCECECED7\n                D7D7D5D5D5D3D3D3B8B8B89C9C9CB3B3B3C9C9C9CFCFCFFF00FFFF00FFC2A5A2\n                C29790C29790C29790BC91886A5D5C8473707F6C69837D805A52546886CD2EB2\n                FF5B8FAFD9B39CFF00FFFF00FFB7B7B7B0B0B0B0B0B0B0B0B0ADADAD9292929D\n                9D9D9B9B9BA3A3A38D8D8DB0B0B0C5C5C5AEAEAEBCBCBCFF00FFFF00FFC2A5A2\n                F8E6DDF8E6DDF8E6DDA2817CFFFFFAFFFFFFFFFFECFFE8B8BD91859AB6C78CB9\n                D1F5E8D7DCB79EFF00FFFF00FFB7B7B7D6D6D6D6D6D6D6D6D6A5A5A5E2E2E2E2\n                E2E2E0E0E0D3D3D3ADADADC0C0C0C2C2C2D6D6D6BEBEBEFF00FFFF00FFC5A7A2\n                F6EDE2F8E9D8847876FFFFF9F4FBFFEEF3DFF0F3CDF5F7C4EECBA4CCBBB9FBD7\n                B3F7E7D5DDB8A0FF00FFFF00FFB7B7B7D9D9D9D6D6D6A0A0A0E2E2E2E1E1E1DB\n                DBDBD8D8D8DADADAC6C6C6C1C1C1CCCCCCD6D6D6BEBEBEFF00FFFF00FFCDABA3\n                F8E5D1FED1A5BEAD94F8FEEAE2E5E5DFE1D9DEE1C5DBCEA6E3D5A8D1B8A7FBE3\n                C9F7EBDDE0BBA3FF00FFFF00FFB9B9B9D4D4D4C9C9C9B8B8B8E0E0E0D6D6D6D3\n                D3D3D1D1D1C7C7C7CACACABEBEBED3D3D3D8D8D8C0C0C0FF00FFFF00FFCEADA7\n                F7EDE3F8E9D8D0BE9DEFF6D3DFE4CFDAE0C8D9DCB9D7C7A0DBCEA3D8C3ADFED8\n                B2F8E7D5E0BBA3FF00FFFF00FFBABABAD9D9D9D6D6D6C0C0C0DBDBDBD3D3D3D1\n                D1D1CECECEC4C4C4C7C7C7C3C3C3CCCCCCD6D6D6C0C0C0FF00FFFF00FFD1B3AD\n                FAE7D4FED1A5BB9B81FDFECBE3E1BCE0DFB9DFD5A8DECDABE6E4BDD1BDABFEEF\n                DFF7D4C9E2A398FF00FFFF00FFBDBDBDD5D5D5C9C9C9B0B0B0DDDDDDD0D0D0CF\n                CFCFCACACAC8C8C8D1D1D1C1C1C1DADADACDCDCDB7B7B7FF00FFFF00FFDCBBAB\n                FAF4EFFEEFE0A18D8EEBCC9DF4EDB7EDD5A1EDE0B9ECF2F6DBCAC2C7C0BFE5D0\n                C8C48F77BE8D7FFF00FFFF00FFC1C1C1DDDDDDDADADAABABABC5C5C5D5D5D5CA\n                CACACFCFCFDDDDDDC8C8C8C4C4C4CBCBCBABABABABABABFF00FFFF00FFE3C1AD\n                FBEDDEFED1A5FED1A5B59B97E3C5A5EFD8ABE4D5AFD3C3BAC0B7B9F5F3F1DECC\n                C8D8A582FF00FFFF00FFFF00FFC3C3C3D8D8D8C9C9C9C9C9C9B2B2B2C4C4C4CC\n                CCCCCACACAC4C4C4BFBFBFDDDDDDCACACAB5B5B5FF00FFFF00FFFF00FFE9C7B0\n                FCFCFDFFFEFEFEFCF8F6DFC9C2C5D0BCB4BCB0A8AEC0C5CCD7A990E7C5AFDEBC\n                ABFF00FFFF00FFFF00FFFF00FFC5C5C5E1E1E1E2E2E2E1E1E1D1D1D1C8C8C8BF\n                BFBFB8B8B8C7C7C7B7B7B7C5C5C5C1C1C1FF00FFFF00FFFF00FFFF00FFECCBB3\n                FEFDFDFFFFFEFEFEFEFEFCFAFEF8F1FEF5EAC89C8EBF8E80CDABA3FF00FFFF00\n                FFFF00FFFF00FFFF00FFFF00FFC8C8C8E2E2E2E2E2E2E2E2E2E1E1E1DFDFDFDD\n                DDDDB2B2B2ABABABB9B9B9FF00FFFF00FFFF00FFFF00FFFF00FFFF00FFF3D3B6\n                FEFEFEFEFEFEFDFEFDFCFCFCFCFAF7FCF7F0C9957AE3B58FFF00FFFF00FFFF00\n                FFFF00FFFF00FFFF00FFFF00FFCACACAE2E2E2E2E2E2E2E2E2E1E1E1E0E0E0DE\n                DEDEAEAEAEBCBCBCFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFF3D3B6\n                E7C4AEE7C4AEE6C4ADE5C2ACE5C2ACE5C1A9C49788FF00FFFF00FFFF00FFFF00\n                FFFF00FFFF00FFFF00FFFF00FFCACACAC4C4C4C4C4C4C4C4C4C3C3C3C3C3C3C3\n                C3C3AFAFAFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FF}\n              NumGlyphs = 2\n              ParentShowHint = False\n              ShowHint = True\n              OnClick = openLogBtnClick\n            end\n            object openLogBtn: TSpeedButton\n              Left = 187\n              Top = 0\n              Width = 26\n              Height = 23\n              Hint = 'Copy to editor'\n              Align = alRight\n              Flat = True\n              Glyph.Data = {\n                36040000424D3604000000000000360000002800000010000000100000000100\n                2000000000000004000000000000000000000000000000000000FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00C9A9A300D0AFA900E0B2A800E0B2A800E0B2\n                A800E0B2A800E0B2A800E0B2A800E0B2A800C4958E00FF00FF00FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00CDABA300E4D4C700F6EFE700F6EFE700F6EF\n                E700F6EFE700F6EFE700F6EFE700F6EFE700D8B29B00FF00FF00FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00CFB0AA00EAD8CB00F9EADA00FBE7D300FBE4\n                CD00FBE3C900FBE3C900FBDFBF00F7E9D900D8B29B00FF00FF00FF00FF00C2A5\n                A200C2979000C2979000C2979000BC918800E7DBD400F9DFC400FBD7B300FBD7\n                B300FBD7B300FBD7B300FDD7B200F7E7D500D9B39C00FF00FF00FF00FF00C2A5\n                A200F8E6DD00F8E6DD00F8E6DD00D6B0A100EDDFD500F9E4CC00FBDFBF00FBDF\n                BF00FBDFBF00FBDFBF00F5DBB800F5E8D700DCB79E00FF00FF00FF00FF00C5A7\n                A200F6EDE200F8E9D800F9E9D700DAB49E00EFE3DB00F9DFC400FBD7B300FBD7\n                B300FBD7B300FBD7B300FBD7B300F7E7D500DDB8A000FF00FF00FF00FF00CDAB\n                A300F8E5D100FED1A500FED1A300E3B28E00F2E9E000FAE8D600FBE3C900FBE3\n                C900FBE3C900FBE3C900FBE3C900F7EBDD00E0BBA300FF00FF00FF00FF00CEAD\n                A700F7EDE300F8E9D800F8E9D800E5BDA200F4ECE400FDE6CF00FEDCBB00FDDB\n                B900FEDAB500FED9B400FED8B200F8E7D500E0BBA300FF00FF00FF00FF00D1B3\n                AD00FAE7D400FED1A500FED1A500EAB99400F8F0E900FFFEFE00FEFEFE00FEFA\n                F900FEF8EF00FEF4EA00FEEFDF00F7D4C900E2A39800FF00FF00FF00FF00DCBB\n                AB00FAF4EF00FEEFE000FEECD900EEC7A800FAF2EA00FDFEFE00FEFEFE00FEFE\n                FD00FEFBF900FEF9F100E5D0C800C48F7700BE8D7F00FF00FF00FF00FF00E3C1\n                AD00FBEDDE00FED1A500FED1A500F2C39800FDF4EA00FDFEFC00FAFBFA00FAF8\n                F800F6F6F600F5F3F100DECCC800D8A58200FF00FF00FF00FF00FF00FF00E9C7\n                B000FCFCFD00FFFEFE00FEFCF800F6DFC900E7C2A800E7C0A600E2B69A00DAA8\n                8B00D7A99000E7C5AF00DEBCAB00FF00FF00FF00FF00FF00FF00FF00FF00ECCB\n                B300FEFDFD00FFFFFE00FEFEFE00FEFCFA00FEF8F100FEF5EA00C89C8E00BF8E\n                8000CDABA300FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00F3D3\n                B600FEFEFE00FEFEFE00FDFEFD00FCFCFC00FCFAF700FCF7F000C9957A00E3B5\n                8F00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00F3D3\n                B600E7C4AE00E7C4AE00E6C4AD00E5C2AC00E5C2AC00E5C1A900C4978800FF00\n                FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00}\n              ParentShowHint = False\n              ShowHint = True\n              OnClick = openLogBtnClick\n            end\n            object collapseBtn: TSpeedButton\n              Left = 0\n              Top = 0\n              Width = 21\n              Height = 23\n              Hint = 'Collapse toolbar'\n              Align = alRight\n              Flat = True\n              Glyph.Data = {\n                EE010000424DEE0100000000000036000000280000000D0000000B0000000100\n                180000000000B801000000000000000000000000000000000000C8D0D4C8D0D4\n                9A775AC8D0D4C8D0D4C8D0D4C8D0D49A775AC8D0D4C8D0D4C8D0D4C8D0D4C8D0\n                D400C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4\n                C8D0D4C8D0D4C8D0D400C8D0D4C8D0D49A775A8C0500AC7657C8D0D4C8D0D49A\n                775A8C0500AC7657C8D0D4C8D0D4C8D0D400C8D0D4C8D0D4C8D0D49A775A8C05\n                009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D400C8D0D4C8D0D4\n                C8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0\n                D400C8D0D4C8D0D4C8D0D4C8D0D4C8D0D4B37E5F8C05009A775AC8D0D4C8D0D4\n                B37E5F8C05009A775A00C8D0D4C8D0D4C8D0D4C8D0D49A775A8C0500B17C5CC8\n                D0D4C8D0D49A775A8C0500B17C5CC8D0D400C8D0D4C8D0D4C8D0D4AF795A8C05\n                009A775AC8D0D4C8D0D4AF795A8C05009A775AC8D0D4C8D0D400C8D0D4C8D0D4\n                9A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D4C8D0\n                D400C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4\n                C8D0D4C8D0D4C8D0D400C8D0D4C8D0D49A775AC8D0D4C8D0D4C8D0D4C8D0D49A\n                775AC8D0D4C8D0D4C8D0D4C8D0D4C8D0D400}\n              ParentShowHint = False\n              ShowHint = True\n              OnClick = collapseBtnClick\n            end\n            object Bevel1: TBevel\n              Left = 21\n              Top = 0\n              Width = 2\n              Height = 23\n              Align = alRight\n            end\n            object searchPnl: TPanel\n              Left = 23\n              Top = 0\n              Width = 164\n              Height = 23\n              Align = alRight\n              AutoSize = True\n              BevelOuter = bvNone\n              Padding.Left = 5\n              TabOrder = 0\n              DesignSize = (\n                164\n                23)\n              object logSearchBox: TLabeledEdit\n                Left = 45\n                Top = 1\n                Width = 103\n                Height = 22\n                Hint = 'Wildcards allowed'\n                Anchors = [akTop, akRight]\n                EditLabel.Width = 37\n                EditLabel.Height = 14\n                EditLabel.Caption = 'Search'\n                LabelPosition = lpLeft\n                ParentShowHint = False\n                ShowHint = True\n                TabOrder = 0\n                OnChange = logSearchBoxChange\n                OnKeyPress = logSearchBoxKeyPress\n              end\n              object logUpDown: TUpDown\n                Left = 148\n                Top = 0\n                Width = 16\n                Height = 24\n                Anchors = [akTop, akRight]\n                Min = -30000\n                Max = 30000\n                TabOrder = 1\n                OnClick = logUpDownClick\n              end\n            end\n          end\n        end\n      end\n    end\n    object filesPnl: TPanel\n      Left = 0\n      Top = 0\n      Width = 313\n      Height = 197\n      Align = alLeft\n      BevelOuter = bvNone\n      Caption = 'filesPnl'\n      TabOrder = 0\n      object filesBox: TTreeView\n        Left = 0\n        Top = 23\n        Width = 313\n        Height = 174\n        Align = alClient\n        BevelInner = bvLowered\n        BevelOuter = bvSpace\n        Constraints.MinWidth = 50\n        DragMode = dmAutomatic\n        HotTrack = True\n        Images = images\n        Indent = 25\n        MultiSelect = True\n        MultiSelectStyle = [msControlSelect, msShiftSelect]\n        ParentShowHint = False\n        PopupMenu = filemenu\n        ShowHint = True\n        ShowRoot = False\n        SortType = stBoth\n        StateImages = images\n        TabOrder = 0\n        OnAddition = filesBoxAddition\n        OnChange = filesBoxChange\n        OnCollapsing = filesBoxCollapsing\n        OnCompare = filesBoxCompare\n        OnCustomDrawItem = filesBoxCustomDrawItem\n        OnDblClick = filesBoxDblClick\n        OnDeletion = filesBoxDeletion\n        OnDragDrop = filesBoxDragDrop\n        OnDragOver = filesBoxDragOver\n        OnEdited = filesBoxEdited\n        OnEditing = filesBoxEditing\n        OnEndDrag = filesBoxEndDrag\n        OnEnter = filesBoxEnter\n        OnExit = filesBoxExit\n        OnMouseDown = filesBoxMouseDown\n        OnMouseEnter = filesBoxMouseEnter\n        OnMouseLeave = filesBoxMouseLeave\n        OnMouseUp = filesBoxMouseUp\n      end\n      object filesTitle: TPanel\n        Left = 0\n        Top = 0\n        Width = 313\n        Height = 23\n        Align = alTop\n        BevelOuter = bvNone\n        Caption = 'Virtual File System'\n        TabOrder = 1\n      end\n    end\n    object connPnl: TPanel\n      Left = 0\n      Top = 202\n      Width = 913\n      Height = 106\n      Align = alBottom\n      BevelOuter = bvNone\n      TabOrder = 2\n      object sbar: TStatusBar\n        Left = 0\n        Top = 87\n        Width = 913\n        Height = 19\n        Panels = <\n          item\n            Width = 2000\n          end>\n        OnDblClick = sbarDblClick\n        OnMouseDown = sbarMouseDown\n      end\n      object connBox: TListView\n        Left = 0\n        Top = 0\n        Width = 913\n        Height = 87\n        Align = alClient\n        Columns = <\n          item\n            Caption = 'IP address'\n            ImageIndex = 0\n            Width = 206\n          end\n          item\n            Alignment = taCenter\n            Caption = 'File'\n            ImageIndex = 7\n            Width = 206\n          end\n          item\n            Alignment = taCenter\n            Caption = 'Status'\n            Width = 206\n          end\n          item\n            Alignment = taCenter\n            Caption = 'Speed'\n          end\n          item\n            Alignment = taCenter\n            Caption = 'Time left'\n          end\n          item\n            Alignment = taCenter\n            AutoSize = True\n            Caption = 'Progress'\n          end>\n        ColumnClick = False\n        FullDrag = True\n        GridLines = True\n        OwnerData = True\n        ReadOnly = True\n        RowSelect = True\n        ParentShowHint = False\n        PopupMenu = connmenu\n        ShowHint = True\n        SmallImages = images\n        TabOrder = 1\n        ViewStyle = vsReport\n        OnAdvancedCustomDrawSubItem = connBoxAdvancedCustomDrawSubItem\n        OnData = connBoxData\n      end\n    end\n  end\n  object filemenu: TPopupMenu\n    Images = images\n    OwnerDraw = True\n    OnPopup = filemenuPopup\n    Left = 128\n    Top = 168\n    object Addfiles1: TMenuItem\n      Caption = 'Add files...'\n      OnClick = Addfiles1Click\n    end\n    object Addfolder1: TMenuItem\n      Caption = 'Add folder from disk...'\n      ImageIndex = 8\n      OnClick = Addfolder1Click\n    end\n    object newfolder1: TMenuItem\n      Caption = 'New empty folder'\n      ShortCut = 45\n      OnClick = newfolder1Click\n    end\n    object Newlink1: TMenuItem\n      Caption = 'New link'\n      ImageIndex = 4\n      OnClick = Newlink1Click\n    end\n    object Remove1: TMenuItem\n      Caption = 'Remove'\n      ImageIndex = 21\n      ShortCut = 46\n      OnClick = Remove1Click\n    end\n    object Rename1: TMenuItem\n      Caption = 'Rename'\n      ShortCut = 113\n      OnClick = Rename1Click\n    end\n    object Paste1: TMenuItem\n      Caption = 'Paste'\n      ImageIndex = 17\n      ShortCut = 16470\n      OnClick = Paste1Click\n    end\n    object Editresource1: TMenuItem\n      Caption = 'Edit resource...'\n      OnClick = Editresource1Click\n    end\n    object N7: TMenuItem\n      Caption = '-'\n    end\n    object CopyURL1: TMenuItem\n      Caption = 'Copy URL address'\n      Default = True\n      Hint = 'just double click!'\n      ImageIndex = 16\n      ShortCut = 16451\n      OnClick = CopyURL1Click\n    end\n    object CopyURLwithpassword1: TMenuItem\n      AutoHotkeys = maManual\n      Caption = 'Copy URL with password'\n    end\n    object Browseit1: TMenuItem\n      Caption = 'Browse it'\n      ImageIndex = 26\n      ShortCut = 120\n      OnClick = Browseit1Click\n    end\n    object SetURL1: TMenuItem\n      Caption = 'Set URL...'\n      ImageIndex = 4\n      OnClick = SetURL1Click\n    end\n    object Openit1: TMenuItem\n      Caption = 'Open it'\n      ShortCut = 119\n      OnClick = Openit1Click\n    end\n    object Flagasnew1: TMenuItem\n      Caption = 'Flag as new'\n      OnClick = Flagasnew1Click\n    end\n    object Resetnewflag1: TMenuItem\n      Caption = 'Reset <new> flag'\n      OnClick = Resetnewflag1Click\n    end\n    object Setuserpass1: TMenuItem\n      Caption = 'Set user/pass...'\n      ImageIndex = 12\n      OnClick = Setuserpass1Click\n    end\n    object Resetuserpass1: TMenuItem\n      Caption = 'Reset user/pass'\n      OnClick = Resetuserpass1Click\n    end\n    object N11: TMenuItem\n      Caption = '-'\n    end\n    object CopyURLwithdifferentaddress1: TMenuItem\n      Caption = 'Copy URL with different host address'\n    end\n    object CopyURLwithfingerprint1: TMenuItem\n      Caption = 'Copy URL with fingerprint'\n      OnClick = CopyURLwithfingerprint1Click\n    end\n    object Purge1: TMenuItem\n      Caption = 'Purge...'\n      OnClick = Purge1Click\n    end\n    object Switchtovirtual1: TMenuItem\n      Caption = 'Change to virtual-folder'\n      OnClick = Switchtovirtual1Click\n    end\n    object Switchtorealfolder1: TMenuItem\n      Caption = 'Change to real-folder'\n      OnClick = Switchtorealfolder1Click\n    end\n    object Bindroottorealfolder1: TMenuItem\n      Caption = 'Bind root to real-folder'\n      OnClick = Bindroottorealfolder1Click\n    end\n    object Unbindroot1: TMenuItem\n      Caption = 'Unbind root'\n      OnClick = Unbindroot1Click\n    end\n    object Defaultpointtoaddfiles1: TMenuItem\n      Caption = 'Default point to add files'\n      OnClick = Defaultpointtoaddfiles1Click\n    end\n    object N14: TMenuItem\n      Caption = '-'\n    end\n    object Properties1: TMenuItem\n      Caption = 'Properties...'\n      ShortCut = 32781\n      OnClick = Properties1Click\n    end\n  end\n  object images: TImageList\n    DrawingStyle = dsTransparent\n    Left = 208\n    Top = 112\n    Bitmap = {\n      494C010129002C00040010001000FFFFFFFFFF10FFFFFFFFFFFFFFFF424D3600\n      000000000000360000002800000040000000B0000000010020000000000000B0\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000009A9A9A009999\n      9900999999009A9A9A00ABABAB00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000AFAFAF0059595900656565007373\n      7300787878006B6B6B00626262005B5B5B0071717100A6A6A600A9A9A9008A8A\n      8A00828282007F7F7F008D8D8D00C8C8C8000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000ACACAC00676767007B7B7B008787\n      870082828200B1B1B1008383830079797900646464009B9B9B008B8B8B009F9F\n      9F00A7A7A7009E9E9E0091919100777777000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000077777700868686008D8D\n      8D009C9C9C00CECECE0094949400878787006F6F6F00A3A3A300D6D6D600B5B5\n      B500B4B4B400B0B0B0009F9F9F00A5A5A5000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000007F7F7F006464\n      64007272720082828200858585007D7D7D008C8C8C00B1B1B100EDEDED00E5E5\n      E500AEAEAE00B8B8B800A5A5A500000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000ACACAC002B2B2B002626\n      26004D4D4D004E4E4E003F3F3F0068686800A7A7A700A9A9A900B0B0B000A5A5\n      A500979797008787870000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000B1B1B1001B1B1B001A1A1A005A5A\n      5A006B6B6B006B6B6B005F5F5F0054545400C9C9C9009B9B9B00A1A1A100A6A6\n      A600A0A0A0007A7A7A00BDBDBD00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000006565650020202000393939007F7F\n      7F0085858500858585007E7E7E0054545400B0B0B000A9A9A900B6B6B600B6B6\n      B600B6B6B600AAAAAA008B8B8B00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000059595900313131003F3F3F009494\n      9400A5A5A500A5A5A50099999900626262009F9F9F00B9B9B900C0C0C000C1C1\n      C100BFBFBF00BBBBBB008A8A8A00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000008F8F8F0040404000414141006060\n      600082828200979797009C9C9C0079797900CACACA00C3C3C300C4C4C400C6C6\n      C600C5C5C500C2C2C2009B9B9B00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000058585800585858007474\n      74006E6E6E004C4C4C0035353500A0A0A00000000000A3A3A3009F9F9F00A8A8\n      A800ACACAC00A7A7A70089898900000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000006E6E6E008C8C\n      8C008F8F8F00767676007C7C7C000000000000000000ACACAC00AFAFAF00C4C4\n      C400C8C8C8009E9E9E00ADADAD00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000C7C7C700C4C4\n      C400B7B7B700C4C4C40000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000064686A0064686A0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000CECE\n      D600A5A5C60000000000000000000000000000000000CECED600A5A5C6000000\n      0000000000000000000000000000000000000000000000000000808080008080\n      8000808080008080800080808000808080008080800080808000808080008080\n      8000808080008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B00031333400000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000CECED6002929\n      73002929730021213900A5A5C600000000009494F70029297300292973002929\n      7300A5A5C600000000000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B0007D7D7D00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000008E8ABF002C2AB6002A26B400817DB700000000000000\n      0000000000000000000000000000000000000000000000000000292973000000\n      F7000000F7001818BD0021213900A5A5C6002929FF000000F7000000F7002929\n      730029297300CECED6000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B0007D7D7D00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000706EC0000809CE000105E2000203E4000607CE00645DB2000000\n      00000000000000000000000000000000000000000000CECEF7000808FF000000\n      F7000000F7000000F7001818BD00212139001818BD000000F7001818BD000000\n      F70029297300292973000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B0007D7D7D00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00006A67C2000607DB000004F2000204F3000305F2000203F2000505D8005854\n      AD0000000000000000000000000000000000000000009494F7000000F7000000\n      F70021213900CECEF7000808FF000000F7000000F7000000F70021213900CECE\n      F7002929FF001818BD000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B0007D7D7D00000000000000\n      000000000000000000000000000000000000000000000000000000000000827B\n      C7000507E1000105FB000005FD000105FD000006FC000006FB000204FC000207\n      DF006865AD00000000000000000000000000000000009494F7000000F7000000\n      F70021213900F7F7F700CECEF7002929FF000000F7000000F70021213900A5A5\n      C60000000000000000000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      00000000000064686A00FFFFFF00FFFFFF00FFFFFF00DEDEDE00232425000000\n      0000000000000000000000000000000000000000000000000000A19DD2001213\n      D8001016FC001216FD001216FC001216FC001216FD001315FD001217FC001314\n      FE000D11D5008D88BA00000000000000000000000000CECEF7002929FF000000\n      F70021213900CECED60000000000CECEF7002929FF000000F7000000F7002121\n      390000000000000000000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A00DEDEDE00FFFFFF00FFFFFF00FFFFFF00FFFFFF00DEDEDE006468\n      6A000000000000000000000000000000000000000000D0CDE1002B2BCB002E2D\n      FB002E2FFB00312FFE003030FE003030FE002F30FE002E2FFD002C30FE002F30\n      FD002C2FFB002121C300C7C6D7000000000000000000000000009494F7000000\n      F7001818BD002121390000000000000000009494F7002929FF000000F7002929\n      7300A5A5C600000000000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A00DEDEDE00FFFFFF00DEDEDE00DEDEDE00FFFFFF00FFFFFF006468\n      6A0000000000000000000000000000000000000000006967C9003C3EF0004748\n      FB004748FD004849FD004749FE004948FD004848FD004949FE004949FE004849\n      FE004849FD003F3EF0005757B500000000000000000000000000CECEF7002929\n      FF000000F70021213900A5A5C60000000000000000002929FF000000F7001818\n      BD0021213900CECED6000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A00DEDEDE00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF006468\n      6A0000000000000000000000000000000000D3D2E4003A3AD4006163FC006162\n      FE006062FD006162FD006263FC006162FD006062FE006362FE006262FE006262\n      FE006363FD006263FC003231CC00D3D2E4000000000000000000000000009494\n      F7000000F7000000F70021213900A5A5C60000000000CECED6000808FF000000\n      F7001818BD00292973000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A00B0B0B000B0B0B000B0B0B000B0B0B000B0B0B000B0B0B0006468\n      6A0000000000000000000000000000000000B5B3E8005153EC00797BFD007779\n      FD007778FE007479FE007979FD00797BFD007C7CFD00787AFE00787BFE00787B\n      FE00797AFD007A7AFB005254EB00A4A4DE000000000000000000000000000000\n      00002929FF000000F7001818BD0021213900A5A5C600E7E7E7000808FF000000\n      F7001818BD0021213900CECED60000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF000000\n      0000000000000000000000000000000000000000000000000000000000006468\n      6A00DEDEDE00DEDEDE00DEDEDE00DEDEDE00DEDEDE00DEDEDE00DEDEDE00CCCC\n      CC0064686A00000000000000000000000000A8ABEB006A6CF3009190FE009091\n      FE008F91FD009092FD009090FC006E72F3007071F6008F91FE008E91FD008F91\n      FE008F93FD008F92FD006D6DF3009D9FEC000000000000000000000000000000\n      0000000000002929FF000000F7001818BD00292973001818BD000808FF002929\n      FF000000F7001818BD00CECED60000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00C0C0\n      C000FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A0064686A0000ACDC0064686A003133340000ACDC0064686A006468\n      6A0000000000000000000000000000000000C7C8EF006266F300AAAAFD00A9A9\n      FD00A6A9FC00A9A8FC00A9ACFB005355F2005254F000AAABFB00A7A8FB00A7A7\n      FD00AAA8FC00A8AAFB006263F300C7C6F3000000000000000000000000000000\n      000000000000000000009494F7002929FF000000F7000000F7009494F700CECE\n      F7002929FF00A5A5C6000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00C0C0\n      C000808080000000000000000000000000000000000000000000000000000000\n      00000000000064686A002FD2FF0064686A00313334002FD2FF0064686A004649\n      4A0000000000000000000000000000000000000000007476F700A0A0FD00BEBF\n      FD00BDC0FC00BFC0FC009697FD007071EE007674F0009897FC00BFC0FB00BDBF\n      FC00BDC0FC00A19FFC007170F600000000000000000000000000000000000000\n      0000000000000000000000000000CECEF7009494F7009494F700000000000000\n      0000CECEF7000000000000000000000000000000000000000000808080008080\n      8000808080008080800080808000808080008080800080808000808080008080\n      8000000000000000000000000000000000000000000000000000000000000000\n      00000000000064686A002FD2FF0064686A0064686A002FD2FF007D7D7D000000\n      00000000000000000000000000000000000000000000000000006F6FF2007878\n      FA008D8BFD007675FB007878F20000000000000000008688F6007676FA008A8A\n      FC007878FA007476F70000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000064686A0064686A0064686A0064686A0064686A0064686A000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000FEFE\n      FEFFEDE4DBFFBE9D7DFF9A6734FF996633FF996633FF9A6734FFBE9D7DFFEDE4\n      DBFFFEFEFEFF0000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000008484840084848400848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400848484008484840000000000000000008484840084848400848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400848484008484840000000000000000000000000000000000FCFBFAFFB793\n      6FFF9C6B39FFC3A586FFE3D4C6FFF1EAE3FFF1EAE3FFE3D4C6FFC3A586FF9C6B\n      39FFB7936FFFFCFBFAFF00000000000000000000000000000000434353005C5C\n      69005E5E6C005757650057576B00000000000000000000000000000000000000\n      00000000000000000000000000000000000084848400C6C6C600FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00C6C6C60084848400848484000000000084848400C6C6C600FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00C6C6C60084848400848484000000000000000000FCFBFAFFA6794CFFB089\n      61FFF3EDE7FFFFFFFFFFFFFFFFFFF5F5FBFFF5F5FBFFFFFFFFFFFFFFFFFFF3ED\n      E7FFB08961FFA6794CFFFCFBFAFF000000006161610048484F0049494B006161\n      61004C4C4C003E3E3E0071717100626263003C3C55003D3D40003D3D40003D3D\n      40003D3D40003D3D40003D3D40006161610084848400C6C6C600848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400C6C6C60084848400848484000000000084848400C6C6C600848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400C6C6C600848484008484840000000000FEFEFEFFB7936FFFB08961FFFDFB\n      FAFFFFFFFFFFFFFFFFFF5050B9FF000099FF000099FF5050B9FFFFFFFFFFFFFF\n      FFFFFDFBFAFFB08961FFB7936FFFFEFEFEFF6161610048484F0048484A005454\n      54003939390064646400B1B1B1005E5E5E00424242003D3D4000646466005858\n      58004E4E4E005E5E5E00565656002A2A3A0084848400C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6\n      C600C6C6C60084848400848484000000000084848400C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6\n      C600C6C6C600848484008484840000000000EDE4DBFF9D6B3AFFF4EEE8FFFFFF\n      FFFFFFFFFFFFE4E4F5FF01019CFF1C1CDEFF1212D7FF00009CFFE3E3F4FFFFFF\n      FFFFFFFFFFFFF4EEE8FF9D6B3AFFEDE4DBFF0000000048484F0048484F005858\n      580053525100A8A7A500CAC9C8004A4A4B00363636003D3D3D00797979004A4A\n      4A0079797900353535004C4C4C002B2B3A0084848400C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C6000084\n      00000084000084848400848484000000000084848400C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C6000084\n      000000840000848484008484840000000000BE9D7CFFC3A587FFFFFFFFFFFFFF\n      FFFFE3E3F4FFC3C3E7FF02029EFF1D1DE0FF1D1DE0FF01019DFFC3C3E7FFE3E3\n      F4FFFFFFFFFFFFFFFFFFC3A587FFBE9D7CFF00000000000000003D3D40005858\n      6A0076777F00B7BAC500BABABB0052514D003434330044444400BABABB004D4D\n      4D00BABABB0040414100393939002929420084848400FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF0084848400848484000000000084848400FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008484840084848400000000009A6734FFE3D4C6FFFFFFFFFF5151\n      BAFF02029DFF03039EFF0505A3FF2626E6FF1D1DE0FF0303A2FF01019DFF0000\n      9CFF5050B9FFFFFFFFFFE3D4C6FF9A6734FF00000000A2ABB100382B27001618\n      45000E2A8E00132C8E003A2D67006F6B5A00000000005B596200BABABB004E57\n      5C00BABABB00696D720032335900000000000000000084848400C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600000084000000FF0000000000C6C6C600C6C6\n      C600C6C6C600C6C6C60084848400000000000000000084848400C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C60000000000C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C6008484840000000000996633FFF1E9E2FFF5F5FBFF0000\n      99FF4040F6FF3939F3FF3030ECFF3030ECFF2626E6FF1D1DE0FF1D1DE0FF1212\n      D7FF000099FFF5F5FBFFF1E9E2FF996633FFABB0B4001B1B1C000C152A00163F\n      98001A4CB1001A4CB1001640A200424D6E00C2CBC2005499AE00288DE2002B90\n      ED00278CE1002B739D00ADBCC400000000000000000000000000848484008484\n      84008484840084848400848484000000FF000000FF0000000000848484008484\n      8400848484008484840084848400000000000000000000000000848484008484\n      84008484840084848400848484000000FF000000FF0000000000848484008484\n      840084848400848484008484840000000000996633FFF1E9E2FFF5F5FBFF0000\n      99FF4949FCFF4343F9FF3939F3FF3030ECFF3030ECFF2626E6FF1D1DE0FF1C1C\n      DEFF000099FFF5F5FBFFF1E9E2FF996633FF5A646B0020202000172F56002163\n      C8002469CF002469CF002162C70028457E00A3AFB5003A98E7003CA0FF003CA0\n      FF003CA0FF003496EF005C86A300000000000000000000000000000000000000\n      0000000000000000000000000000000084000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000084000000FF000000FF000000FF00000000000000\n      0000000000000000000000000000000000009A6734FFE3D4C6FFFFFFFFFF5151\n      BAFF03039EFF0404A0FF0808A5FF3939F3FF3030ECFF0505A3FF02029EFF0101\n      9CFF5050B9FFFFFFFFFFE3D4C6FF9A6734FF595959003131310024395600297A\n      DE002F8BF100308CF1002A7FE300255290007C9CAF0045A7FA002B739D004BB0\n      FF002B739D0043A8FD003780B500000000000000000000000000000000000000\n      00000000000000000000000000000000FF000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000084000000FF00000084000000FF0000000000000000000000\n      000000000000000000000000000000000000BE9D7CFFC3A587FFFFFFFFFFFFFF\n      FFFFE3E3F4FFC3C3E7FF0404A0FF4343F9FF3939F3FF03039EFFC3C3E7FFE3E3\n      F4FFFFFFFFFFFFFFFFFFC3A587FFBE9D7CFF8F8F8F00404040003D4046002651\n      8C002668C8002C7EE0002D84E50049709B00AAC8D90026518C000C152A002651\n      8C000C152A0026518C00338FCB00000000000000000000000000000000000000\n      000000000000000084000000FF00000084000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000FF000000FF0000000000000000000000\n      000000000000000000000000000000000000EDE4DBFF9D6B3AFFF4EEE8FFFFFF\n      FFFFFFFFFFFFE4E4F5FF03039EFF4949FCFF4040F6FF02029DFFE3E3F4FFFFFF\n      FFFFFFFFFFFFF4EEE8FF9D6B3AFFEDE4DBFF0000000058585900575858007474\n      74006B6C74003B446700232E4D009EA0A200000000003C99CF00797979007979\n      790079797900797979003381AE00000000000000000000000000000000000000\n      00000000000000000000000084000000FF000000FF000000FF00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000084000000FF0000000000000000000000\n      000000000000000000000000000000000000FEFEFEFFB7936FFFB08961FFFDFB\n      FAFFFFFFFFFFFFFFFFFF5050B9FF000099FF000099FF5050B9FFFFFFFFFFFFFF\n      FFFFFDFBFAFFB08961FFB7936FFFFEFEFEFF00000000000000006E6E6E008C8C\n      8C008F8F8F00767676007C7C7C00000000005B5962003D3D3D003D3D3D003D3D\n      3D003D3D3D003D3D3D003D3D3D005B5962000000000000000000000000000000\n      00000000000000000000000000000000FF000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000FF000000FF0000000000000000000000\n      00000000000000000000000000000000000000000000FCFBFAFFA6794CFFB089\n      61FFF3EDE7FFFFFFFFFFFFFFFFFFF5F5FBFFF5F5FBFFFFFFFFFFFFFFFFFFF3ED\n      E7FFB08961FFA6794CFFFCFBFAFF000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000005B5962003D3D\n      3D003D3D3D003D3D3D0000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000084000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000FCFBFAFFB793\n      6FFF9C6B39FFC3A586FFE3D4C6FFF1EAE3FFF1EAE3FFE3D4C6FFC3A586FF9C6B\n      39FFB7936FFFFCFBFAFF00000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000797979005B59\n      62005B5962007979790000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000FEFE\n      FEFFEDE4DBFFBE9D7DFF9A6734FF996633FF996633FF9A6734FFBE9D7DFFEDE4\n      DBFFFEFEFEFF0000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000ABABAB007171\n      71007777770078787800787878007D7D7D00727272007D7D7D0082828200B1B1\n      B100000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000757575008A8A\n      8A009C9C9C00A4A4A400A9A9A900B5B5B50088888800868686008B8B8B008686\n      86007E7E7E008C8C8C0000000000000000000000000000000000B5959F00B394\n      9F00B3949F00B395A000B6A6B600000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000828282009797\n      9700ABABAB00B1B1B100BEBEBE00A1A1A100DDDDDD00B4B4B400A6A6A600A4A4\n      A400959595007C7C7C000000000000000000DEAE9D00CB4D2900E2563D00F264\n      5000F6695600D9624000D7563700BE523800907165008BAA9D007FB195006595\n      6A005D8D5D005B8A5B006A957900B2C8CC0000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000B0B0B0009898\n      9800B1B1B100BDBDBD00B0B0B000AEAEAE00FFFFFF00D1D1D100A7A7A700B1B1\n      B10098989800949494000000000000000000DFAB9800E4583C00FA6C5800FC7C\n      6400EC7B5900EBB58300E77E5900FB6A5700C85D360052B04A00499D42004DB4\n      4B004EBD4E003EB53E002AA72A004585470000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      0000000000000000000000000000ABABAB008A8A8A00A3A3A300000000000000\n      0000000000000000000000000000000000000000000000000000000000009A9A\n      9A00B2B2B200B9B9B900A6A6A600F0F0F000FFFFFF00EAEAEA00A1A1A100BABA\n      BA0095959500CBCBCB00000000000000000000000000CD6F6400F97B6500F587\n      6600E89D6E00FDD4A100E7946700FC7C6400D06A42005FB75700C6DFB6008BC4\n      830068C968005BC65B003EB63E0072B1840000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      00000000000093939300676767008E848400524D4D004A4A4A005D5D5D008989\n      8900000000000000000000000000000000000000000000000000000000000000\n      0000ACACAC0095959500BBBBBB00C9C9C900D0D0D000D5D5D500A5A5A5009A9A\n      9A00BEBEBE000000000000000000000000000000000000000000DB795E00B25D\n      5200916A7B00A67D8200D7825F00E07853009398500075C37200EAF0E200E1E9\n      D70076BF72006DCD6C005EB764000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000008181\n      8100757575008D8D8D00A5A5A500757070003F3C3C00494444005A5252004E4C\n      4C00565656007272720000000000000000000000000000000000000000000000\n      0000C8C8C80088888800B1B1B100ABABAB00ABABAB00A5A5A500A1A1A1000000\n      00000000000000000000000000000000000000000000A2ABB100382B27001618\n      45000E2A8E00132C8E003A2D67006F6B5A006BB9690073B9700090B1B50067A0\n      C100619B95004A965300000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000000000008989890089898900C9C9\n      C900A3A3A30080808000828282007D7C7C004E4E4E00717171007D7D7D00746E\n      6E007465650056515100525252007B7B7B000000000000000000000000000000\n      0000C0C0C000BCBCBC00C4C4C400C4C4C400C4C4C400C4C4C400C7C7C7000000\n      000000000000000000000000000000000000ABB0B4001B1B1C000C152A00163F\n      98001A4CB1001A4CB1001640A200424D6E00C2CBC2005499AE00288DE2002B90\n      ED00278CE1002B739D00ADBCC4000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000A6A6A600AEAEAE00989898008282\n      8200A4A4A400B9B9B900D1D1D1008E8E8E00797979006C6C6C00818181006262\n      620034343400B79898008A7777006B6B6B000000000000000000000000000000\n      0000AFAFAF00CBCBCB00CECECE00D0D0D000D0D0D000CECECE00CBCBCB000000\n      0000000000000000000000000000000000005A646B0020202000172F56002163\n      C8002469CF002469CF002162C70028457E00A3AFB5003A98E7003CA0FF003CA0\n      FF003CA0FF003496EF005C86A3000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000A0A0A0009C9C9C00B5B5B500C7C7\n      C700E1E1E100E6E6E600D0D0D000D8D8D800D1D1D100C3C3C3009A9999007D78\n      78004643430093818100847676007D7D7D00000000000000000000000000A0A0\n      A000CBCBCB00D3D3D300D4D4D400D4D4D400D4D4D400D4D4D400D0D0D000EFEF\n      EF0000000000000000000000000000000000595959003131310024395600297A\n      DE002F8BF100308CF1002A7FE300255290007C9CAF0045A7FA004AAFFF004BB0\n      FF0048ADFF0043A8FD003780B500000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000BABABA00D3D3D300DEDEDE00C7C7\n      C700E1E1E100DFDFDF00F2F2F200FCFCFC00ECECEC00DFDFDF00F7F7F700EEEA\n      EA00DECCCC008F8A8A008D89890000000000000000000000000000000000AAAA\n      AA00D5D5D500DADADA00DDDDDD00DDDDDD00DDDDDD00DDDDDD00D8D8D800F1F1\n      F100000000000000000000000000000000008F8F8F00404040003D4046002651\n      8C002668C8002C7EE0002D84E50049709B00AAC8D90052B5FB0052B7FB0054B9\n      FD0052B7FF004DB2FE00338FCB000000000000000000C0C0C000000000000000\n      0000C0C0C00000000000C0C0C00000000000000000000000000000000000C0C0\n      C000C0C0C000C0C0C00080808000000000000000000000000000BBBBBB007979\n      79006C6C6C00B8B8B800F2F2F200FCFCFC00ECECEC00DFDFDF00F7F7F700CACA\n      CA00C1C1C100CBCBCB000000000000000000000000000000000000000000AAAA\n      AA00D7D7D700DDDDDD00E0E0E000E0E0E000DDDDDD00DFDFDF00DADADA00F2F2\n      F200000000000000000000000000000000000000000058585900575858007474\n      74006B6C74003B446700232E4D009EA0A200000000003C99CF003A96CB00419E\n      D6003D9EE2003899DC003381AE000000000000000000C0C0C000000000000000\n      0000C0C0C00000000000C0C0C000000000000000000000000000000000000000\n      00000000000000000000C0C0C000000000000000000000000000000000000000\n      0000DBDBDB00C8C8C800D5D5D500E6E6E600CDCDCD00D4D4D400D4D4D4000000\n      000000000000000000000000000000000000000000000000000000000000A0A0\n      A000AFAFAF00C0C0C000C2C2C200BDBDBD00B5B5B500B4B4B400B8B8B800EDED\n      ED000000000000000000000000000000000000000000000000006E6E6E008C8C\n      8C008F8F8F00767676007C7C7C00000000000000000069A7C9005BA8D40083BF\n      E30090C4E2004997C1007EAAC1000000000000000000C0C0C000C0C0C000C0C0\n      C000C0C0C00000000000C0C0C000C0C0C000C0C0C00080808000000000008080\n      8000C0C0C000C0C0C00080808000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000B5B5\n      B5009E9E9E00C2C2C200D8D8D800DADADA00CACACA00BCBCBC00A2A2A2000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000099C4DB008FC1\n      DC0073B2D40095C1D900000000000000000000000000C0C0C000000000000000\n      0000C0C0C00000000000C0C0C00000000000000000000000000000000000C0C0\n      C000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000B7B7B700BFBFBF00E0E0E000E5E5E500DCDCDC00BABABA00E7E7E7000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000C0C0C000000000000000\n      0000C0C0C00000000000C0C0C000C0C0C000C0C0C000C0C0C000000000008080\n      8000C0C0C000C0C0C000C0C0C000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000C3C3C300C8C8C800E2E2E20000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000080000000800000008000000080000000800000008000000080000000\n      8000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000007A9D7A002A73\n      29002B7B2B002C7D2C002C7D2C0032803200277527003B7A3B00487B47007BA7\n      7B000000000000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      80000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF00000080000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000002A782A00299E\n      28003AB03A0044B744004ABB4A005AC45A0032933200338F33002A9E2900239A\n      2300288A28004B894B00000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000080000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000800000000000000000000000000000000000000000000000\n      0000009C31000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000003984390034AC\n      34004EBC4E0055C0550065CB650043B34200B1D0A70074B46E0049B7490043B7\n      430031AB3100347E3200000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF000000000000000000000080000000FF000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000FF00000080000000000000000000000000000063310063CE\n      3100000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000075A9750036AC\n      360055C0550064CA640058BD570068B06600FAF9ED009BCA930049B8480055C0\n      550034AD34004D954D00000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000000080000000FF000000FF000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000FF000000FF000000800000000000000000000063310063FF\n      3100000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000000000000047A3\n      470058C0580060C7600056AE5400CADEC100F5F6E900C6D5C00048AF480061C8\n      61003BA43B00A1B8A100000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF000000000000008000FFFFFF00FFFFFF00C0C0\n      C0000000FF00C0C0C000C0C0C0000000FF00C0C0C000FFFFFF00C0C0C0000000\n      FF00FFFFFF000000FF000000FF000000800000000000000000000063310063FF\n      3100000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000066AD6500439B470065AD98007BAEBB0089B5C000A4C1AF004CB24C003CAB\n      3C007CBC7B0000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000000080000000FF000000FF00FFFF\n      FF000000FF00C0C0C000C0C0C0000000FF00FFFFFF000000FF00FFFFFF000000\n      FF00FFFFFF000000FF000000FF00000080000000000000000000006331009CFF\n      CE00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000098AEAE001F6C86002988D3001E82CF002183CE002F84B200629572000000\n      00000000000000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000000080000000FF000000FF00FFFF\n      FF000000FF00C0C0C000C0C0C0000000FF00FFFFFF000000FF00FFFFFF000000\n      FF00FFFFFF000000FF000000FF0000008000000000000000000000633100FFFF\n      FF0063CE31000000000000000000000000000000000000000000009C31000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000699EC5002B8FEB002F95F7002F95F7002F95F7002F95F70053A0DE000000\n      00000000000000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF000000000000008000C0C0C000FFFFFF00C0C0\n      C0000000FF00C0C0C000C0C0C0000000FF00FFFFFF000000FF00FFFFFF000000\n      FF00FFFFFF00FFFFFF00C0C0C000000080000000000000000000000000000063\n      31009CFFCE0063CE31000000000000000000000000000000000063CE3100009C\n      3100000000000000000000000000000000000000000000000000000000000000\n      00003086CF00389DFE003BA0FF003EA3FF003EA3FF003BA0FF00429FF4000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000008000FFFFFF000000FF000000\n      FF000000FF00C0C0C000C0C0C0000000FF00FFFFFF000000FF00FFFFFF000000\n      FF00FFFFFF000000FF00FFFFFF00000080000000000000000000000000000063\n      3100FFFFFF009CFFCE0063FF3100009C3100009C310063CE310063CE310063CE\n      3100009C3100000000000000000000000000000000000000000000000000487D\n      A500399EF90043A8FF0044A9FF0044A9FF0044A9FF0044A9FF0043A6F8009FCD\n      EF00000000000000000000000000000000000000000000FFFF00000000000000\n      000000FFFF000000000000FFFF000000000000000000000000000000000000FF\n      FF0000FFFF0000FFFF00008080000000000000008000C0C0C000FFFFFF00FFFF\n      FF00C0C0C000FFFFFF00FFFFFF00C0C0C000C0C0C000FFFFFF00C0C0C0000000\n      FF00FFFFFF00FFFFFF00C0C0C000000080000000000000000000000000000000\n      000000633100FFFFFF00FFFFFF009CFFCE0063FF310063FF310063FF310063FF\n      310063CE3100009C310000000000000000000000000000000000000000003186\n      BE0045AAFF004CB1FF0050B5FF0050B5FF0050B5FF0050B5FF004EB1F900A1D0\n      F000000000000000000000000000000000000000000000FFFF00000000000000\n      000000FFFF000000000000FFFF00000000000000000000000000000000000000\n      0000000000000000000000FFFF0000000000000080000000FF000000FF000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000FF000000FF00000080000000000000000000000000000000\n      0000000000000063310000633100FFFFFF00FFFFFF00FFFFFF009CFFCE0063FF\n      310063FF31000000000000000000000000000000000000000000000000003287\n      BC004BAFF90051B6FF0055BAFF0058BCFB0056BAF40057BBF70051B4F800A3D2\n      F000000000000000000000000000000000000000000000FFFF0000FFFF0000FF\n      FF0000FFFF000000000000FFFF0000FFFF0000FFFF0000808000000000000080\n      800000FFFF0000FFFF00008080000000000000000000000080000000FF000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000FF0000008000000000000000000000000000000000000000\n      0000000000000000000000000000006331000063310000633100FFFFFF009CFF\n      CE00000000000000000000000000000000000000000000000000000000002B7E\n      AF002B8ACA003999E0003A9BE1003B98D7004194C0003490CB003493D100A2CE\n      E600000000000000000000000000000000000000000000FFFF00000000000000\n      000000FFFF000000000000FFFF000000000000000000000000000000000000FF\n      FF00000000000000000000000000000000000000000000000000000080000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000800000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000633100FFFFFF000000\n      0000000000000000000000000000000000000000000000000000000000005794\n      BA002B7BAD0059A1CC0077B7DD0079B9DE0063AAD1004D9BC7002C80B1000000\n      0000000000000000000000000000000000000000000000FFFF00000000000000\n      000000FFFF000000000000FFFF0000FFFF0000FFFF0000FFFF00000000000080\n      800000FFFF0000FFFF0000FFFF00000000000000000000000000000000000000\n      80000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF00000080000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000633100000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00005295C1004B9DCD0085C0E1008DC5E60080BCDE004F99C200A5C9DC000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000080000000800000008000000080000000800000008000000080000000\n      8000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000633100000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000062A4C60068A8CA008FC3DE0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000260000002600000026000000\n      2600000026000000260000002600000026000000000000000000000026000000\n      26000000260000002600000026000000260084848400FFFFFF00FFFF00008484\n      0000FFFFFF00FFFF000084840000FFFFFF00FFFF000084840000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000FF00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000026002AECFC00000026000000\n      26002AECFC00000026002AECFC00000026005221000042211000000026002AEC\n      FC002AECFC002AECFC002A7EA8000000260084848400FFFF0000FFFFFF008484\n      0000FFFF0000FFFFFF0084840000FFFF0000FFFFFF0084840000000000000000\n      0000000000000000000000000000000000000000000000008400000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000848484000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000FFFFFF000000000000000000000026002AECFC00000026000000\n      26002AECFC00000026002AECFC00000026000000260000002600000026000000\n      260000002600000026002AECFC00000026008484840084840000848400008484\n      0000848400008484000084840000FFFFFF00FFFF000084840000000000008484\n      00000000000000000000000000000000000000000000000084000000FF000000\n      8400000000000000000000000000000000000000000000000000000000000000\n      0000000000000000FF000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF0000000000FFFFFF000000\n      0000FFFFFF00000000000000000000000000000026002AECFC002AECFC002AEC\n      FC002AECFC00000026002AECFC002AECFC002AECFC002A7EA800000026002A7E\n      A8002AECFC002AECFC002A7EA8000000260084848400FFFFFF00FFFF00008484\n      0000FFFFFF00FFFF000084840000000000000000000000000000000000008484\n      000000000000000000000000000000000000000000000000FF0000FFFF000000\n      FF00000084000000000000000000000000000000000000000000000000000000\n      00000000FF00000000000000000000000000000000000000000084848400FFFF\n      FF00840000008400000084000000840000008400000000000000FFFFFF00FFFF\n      FF0000000000000000000000000000000000000026002AECFC00000026000000\n      26002AECFC00000026002AECFC00000026000000260000002600000026002AEC\n      FC000000260000002600000026000000260084848400FFFF0000FFFFFF008484\n      0000FFFF0000FFFFFF0084840000000000008484000084840000000000008484\n      00000000000000000000000000000000000000000000000000000000FF000084\n      84000000FF000000000000000000000000000000000000000000000000000000\n      FF00000000000000000000000000000000000000000000000000848484008400\n      0000840000008400000084000000840000008400000000000000FFFFFF00FFFF\n      FF00FFFFFF00000000000000000000000000000026002AECFC00000026000000\n      26002AECFC00000026002AECFC002AECFC002AECFC002AECFC00000026002A7E\n      A8002AECFC002AECFC002AECFC00000026008484840084840000848400000000\n      000084840000FFFFFF008484000000000000FFFF000084840000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      FF000000FF0000008400000000000000000000000000000000000000FF000000\n      8400000000000000000000000000000000000000000000000000848484008400\n      0000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF0000000000000000000000\n      0000000000000000000000000000000000000000260000002600000026000000\n      2600000026000000260000002600000026000000260000002600000026000000\n      26000000260000002600000026000000260084848400FFFFFF00FFFF00008484\n      000000000000000000000000000000000000FFFFFF0084840000000000008484\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000FF000000FF000000840000000000000000000000FF00000084000000\n      0000000000000000000000000000000000000000000000000000848484008400\n      0000840000008400000084000000840000008400000084000000840000008400\n      00000000000000000000000000000000000000000000A55A1000A56310009C5A\n      1000AD631800B56B2100B56B29007B9C9C00846B4200735A3100635A39006363\n      5A0073A5C6006B7B8C00523129000000000084848400FFFF0000FFFFFF008484\n      0000000000008484000084840000848400000000000000000000000000008484\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000FF00000084000000FF0000008400000000000000\n      000000000000000000000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF000000000000000000000000000000000000000000A55A1000A55A1000A55A\n      1000A5632100BD6B3100CE7B3900B58C520063A594004A847B004A7B84006B52\n      39004A6B7B005A73940052526B00000000000000000084848400FFFF0000FFFF\n      FF0000000000FFFF0000FFFFFF00848400000000000084840000000000008484\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000FF000000FF000000840000000000000000000000\n      000000000000000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF000000000000000000000000000000000000000000A5632100A5521000A54A\n      1000AD5A1800BD6B3100D67B4200A59C73009C845200638473004A848C004273\n      840063737B005A7BA5004A526B00000000000000000000000000848484008484\n      000084840000FFFFFF00FFFFFF00848400000000000084840000848484000000\n      0000848484008484000000000000000000000000000000000000000000000000\n      0000000000000000FF000000FF00000084000000FF0000008400000000000000\n      000000000000000000000000000000000000000000000000000084848400FFFF\n      FF0084000000840000008400000084000000FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000084735200736342008463\n      4200AD521800BD632900BD734200BD6B31008473520063635A004A6B6300426B\n      7B004A7394005A7394005A5A7300000000000000000000000000000000008484\n      8400848484008484840084848400848484008484840000000000000000008484\n      840084840000FFFF000084840000000000000000000000000000000000000000\n      00000000FF000000FF000000840000000000000000000000FF00000084000000\n      000000000000000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000636B5A006384\n      8400B5734200DECECE00DECEB500B5734200945221005A6B63004A6363004263\n      63004A637B005263840000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000008484840084840000000000000000\n      000084848400FFFFFF00000000000000000000000000000000000000FF000000\n      FF000000FF0000008400000000000000000000000000000000000000FF000000\n      840000000000000000000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000848C94007B6B\n      5200D6CECE00F7F7FF00FFFFF700EFDECE00C6947300BD8C630094A5A5004263\n      6300425A5A0073738C0000000000000000000000000000000000000000000000\n      00000000000000000000000000008484840084840000FFFF0000848400000000\n      000000000000848484000000000000000000000000000000FF0000FFFF000000\n      FF00000084000000000000000000000000000000000000000000000000000000\n      FF0000008400000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000000000008484\n      840084949C00DEEFFF00F7EFF700F7FFFF00FFFFFF00F7F7F7007B9CAD004A6B\n      7300636363000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000084848400FFFFFF00000000000000\n      00000000000000000000000000000000000000000000848484000000FF000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000FF0000000000000000000000000000000000848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400848484000000000000000000000000000000000000000000000000000000\n      0000000000009C9CA500E7DEDE00FFFFFF00FFF7EF00C6C6BD00637373000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000084848400000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000C2A5A200B9928B00C2958E00C2958E00C2958E00C2958E00C295\n      8E00C2958E00C2958E00B2939200000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000C9A9A300D0AFA900E0B2A800E0B2A800E0B2A800E0B2A800E0B2\n      A800E0B2A800E0B2A800C4958E000000000000000000000000009BD7EB0080CC\n      E60080CCE60098949A00E4D1C900F8E4DA00F8E4DA00F8E4DA00F8E4DA00F8E4\n      DA00F8E4DA00FCDCC700B29392000000000000000000AC6A6600BC5B5A00BC5B\n      5A009F6B6C00B8B8B800D4D3D300E2E1E100DBDADA00D2D1D100BC9C9C00993C\n      3C00A0434400B65A5A00C9A7A700000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000CDABA300E4D4C700F6EFE700F6EFE700F6EFE700F6EFE700F6EF\n      E700F6EFE700F6EFE700D8B29B0000000000000000009BD7EB004EC6E8006CDD\n      F80070E2FA009DA1A200E9D9CE00FBDFC200FED7B000FED4A800FED3A500FED3\n      A500FBDCBB00FBE3C900B79996000000000000000000C36F6B00CB666600CB66\n      66009E656300B17F7800CB959400E8DEDD00F6F6F600ECEBEB00C9A7A7009934\n      3400A43F3F00C5616100BB8788000000000000000000000000006D6DED001B1B\n      C9001B1BC9003838E6007676EE00B2B2F6000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000CFB0AA00EAD8CB00F9EADA00FBE7D300FBE4CD00FBE3C900FBE3\n      C900FBDFBF00F7E9D900D8B29B00000000000000000080CCE60083E8FD0070D2\n      FD0070D2FD00A0A1A900E6DBD300F7E7D500F8E3CD00F8E3CD00F8E3CD00F8E3\n      CD00F7E7D500FBE3C900B79996000000000000000000C36F6B00CB666600CB66\n      6600A96C6B00BF737100BB676500C7B6B300EEEEED00F8F8F700D0AEAE009934\n      3400A43F3F00C5616100BB8788000000000000000000000000006161EB008383\n      EF006565EB004343E7001E1EDE001919BD001A1AC0002828E4006565EB00A4A4\n      F4000000000000000000000000000000000000000000C2A5A200C2979000C297\n      9000C2979000BC918800E7DBD400F9DFC400FBD7B300FBD7B300FBD7B300FBD7\n      B300FDD7B200F7E7D500D9B39C00000000000000000080CCE60089EDFE007BDD\n      FE007BDDFE00A8ABAC00EEE1D600FBE5CE00FEDCBA00FEDCBA00FED7B000FED7\n      B000FBDFC200FBE3C900BA9C99000000000000000000C36F6B00CB666600CB66\n      6600AF757500B36D6900A5575000A6979400C3C3C300E7E7E700D9B8B8009934\n      3400A43F3F00C5616100BB8788000000000000000000000000004848E8009494\n      F2008686F0008686F0008686F0008686F0007C7CEE005A5AEA002C2CE4001B1B\n      CD001919BB009393F100000000000000000000000000C2A5A200F8E6DD00F8E6\n      DD00F8E6DD00D6B0A100EDDFD500F9E4CC00FBDFBF00FBDFBF00FBDFBF00FBDF\n      BF00F5DBB800F5E8D700DCB79E00000000000000000080CCE60091F5FE0081E5\n      FE0081E5FE00B2B3AB00EEE1DA00F7E7D500F8E3CD00F8E3CD00F8E3CD00F8E3\n      CD00F7E7D500FBE3C900BA9C99000000000000000000C36F6B00CB666600CB66\n      6600AF757500D0ABA800CCA5A000C4B9B700BAB6B500CCC9C800CDA8A6009934\n      3400A43F3F00C5616100BB8788000000000000000000000000002727E3009A9A\n      F2008D8DF1008D8DF1008D8DF1008D8DF1008D8DF1008D8DF1008D8DF1008D8D\n      F1003838E6005353E900000000000000000000000000C5A7A200F6EDE200F8E9\n      D800F9E9D700DAB49E00EFE3DB00F9DFC400FBD7B300FBD7B300FBD7B300FBD7\n      B300FBD7B300F7E7D500DDB8A000000000000000000080CCE600A0F6FE0085EA\n      FE0086EBFE00B7B7AC00F2EAE100FCE1C700FED7B000FED7B000FED7B000FED7\n      B000FBDFC200FBE3C900C2A5A2000000000000000000C36F6B00CB666600CB66\n      6600C56C6900BB787000BB787000C56C6900BF676600BF676600BD6E6900C05C\n      5C00B9575400CB666600BB8788000000000000000000000000003131E500B1B1\n      F5009696F2009696F2009696F2009696F2009696F2009696F2009696F2009696\n      F2005E5EEA003535E500000000000000000000000000CDABA300F8E5D100FED1\n      A500FED1A300E3B28E00F2E9E000FAE8D600FBE3C900FBE3C900FBE3C900FBE3\n      C900FBE3C900F7EBDD00E0BBA300000000000000000080CCE600A2F8FE008BF0\n      FE008CF1FE00C0BFAE00F6EEE600FEF2E700FEEBD900FEE9D400FEE6CE00FEE4\n      CB00FDE3C800FDDAC100C2A5A2000000000000000000C36F6B00B5605B00C185\n      8100C8888700C8888700CB888800CB888800CB888800CB888800CB888800CB88\n      8800B96E6C00CB666600BB8788000000000000000000000000002727E300B1B1\n      F5009F9FF3009F9FF3009F9FF3009F9FF3009F9FF3009F9FF3009F9FF3009F9F\n      F3007878EE001D1DDB00000000000000000000000000CEADA700F7EDE300F8E9\n      D800F8E9D800E5BDA200F4ECE400FDE6CF00FEDCBB00FDDBB900FEDAB500FED9\n      B400FED8B200F8E7D500E0BBA300000000000000000080CCE600B1FAFE0096FA\n      FE0093F8FE00CACAB300FAF2EA00FEFEFE00FFFEFE00FEFBF800FEF8F200FEF4\n      E800DEB9AC00E29C9700CDABA3000000000000000000C36F6B00BE7F7A00F3F3\n      F200F3F3F300F6F3F200F3F3F300F3F3F300F3F3F300F3F3F300F3F3F300F3F3\n      F300CD9A9900C5616100BB8788000000000000000000000000004848E800A4A4\n      F400A4A4F400A4A4F400A4A4F400A4A4F400A4A4F400A4A4F400A4A4F400A4A4\n      F4009494F2001A1AC600000000000000000000000000D1B3AD00FAE7D400FED1\n      A500FED1A500EAB99400F8F0E900FFFEFE00FEFEFE00FEFAF900FEF8EF00FEF4\n      EA00FEEFDF00F7D4C900E2A39800000000000000000080CCE600BCFDFE0099FD\n      FE0099FDFE00CECFB500FEF4EB00FFFEFE00FFFFFE00FFFEFD00FDFBF900FEF8\n      F000C48F7700D5A17E00E1C5BE000000000000000000C36F6B00BE7F7A00F3F3\n      F200F3F3F300F3F3F300F3F3F300F3F3F300F3F3F300F3F3F300F3F3F300F3F3\n      F300CD9A9900C5616100BB8788000000000000000000000000005E5EEA00AFAF\n      F500C6C6F800C1C1F700BBBBF700BBBBF700BBBBF700BBBBF700BBBBF700BBBB\n      F700ABABF5001B1BCB00000000000000000000000000DCBBAB00FAF4EF00FEEF\n      E000FEECD900EEC7A800FAF2EA00FDFEFE00FEFEFE00FEFEFD00FEFBF900FEF9\n      F100E5D0C800C48F7700BE8D7F00000000000000000080CCE600C2FCFE00A8FB\n      FE00A4FBFE00D7D1B600F2DDCD00F2E1D600F0DFD500F0DED400EFDDD200EEDA\n      CC00C3948300E4CEBD00000000000000000000000000C36F6B00BE7E7A00F4F2\n      F200D6D5D500D2D1D100D3D2D200D3D3D300D4D4D400D5D5D500D7D7D700EBEB\n      EB00CD9A9900C5616100BB8788000000000000000000D9D9FB008F8FF1006161\n      EB006D6DED006F6FED009191F100D9D9FB00D1D1F900D2D2FA00D1D1F900D2D2\n      FA00BBBBF7001E1EE200B4B4F6000000000000000000E3C1AD00FBEDDE00FED1\n      A500FED1A500F2C39800FDF4EA00FDFEFC00FAFBFA00FAF8F800F6F6F600F5F3\n      F100DECCC800D8A5820000000000000000000000000080CCE600D2FCFE00BBFC\n      FE00BBFCFE00C9EEE600CAE0D700CAE0D700CAE0D700CAE0D700CAE0D700CAE0\n      D70082B2C800C4E3EC00000000000000000000000000C36F6B00BD7F7B00F3F3\n      F300D6D5D500D1D1D100D1D1D100D3D2D200D3D3D300D3D3D300D7D7D700EBEB\n      EB00CD9A9900C5616100BB8788000000000000000000D9D9FB00B1B1F500A4A4\n      F400A4A4F400A4A4F4008686F0006C6CEC009898F200BABAF600DDDDFB00EDED\n      FD00CFCFF9003C3CE6009F9FF3000000000000000000E9C7B000FCFCFD00FFFE\n      FE00FEFCF800F6DFC900E7C2A800E7C0A600E2B69A00DAA88B00D7A99000E7C5\n      AF00DEBCAB000000000000000000000000000000000080CCE600E1FDFE00BFF0\n      F6009FC2CA009FC2CA009DC4D1009DC4D1009EC3CD009EC3CD00A9D1DA00CCF8\n      FD0061BEE500ABDDEE00000000000000000000000000C36F6B00BE7E7A00F3F2\n      F200E3E3E300E1E1E100E1E1E100E2E2E200E3E2E200E3E2E200E4E4E400EFEF\n      EF00CD9A9900C5616100BB878800000000000000000000000000A1A1F300A4A4\n      F400A4A4F400A4A4F400B2B2F6009191F1009494F2009494F2008686F0007171\n      ED005151E9006161EB00000000000000000000000000ECCBB300FEFDFD00FFFF\n      FE00FEFEFE00FEFCFA00FEF8F100FEF5EA00C89C8E00BF8E8000CDABA3000000\n      0000000000000000000000000000000000000000000080CCE600EAFDFE00BBC6\n      C700C9BEB800C9BEB800C9BEB800C9BEB800C9BEB800C9BEB800829DA500B5E9\n      F60061BEE500ABDDEE00000000000000000000000000C36F6B00BE7E7A00F3F2\n      F200E3E3E300E1E1E100E1E1E100E2E2E200E3E2E200E3E2E200E4E4E400EFEF\n      EF00CD9A9900C5616100BB878800000000000000000000000000A8A8F4009B9B\n      F300A4A4F400B6B6F6007F7FEF00E4E4FC0000000000CDCDF900AAAAF400ABAB\n      F500B4B4F60000000000000000000000000000000000F3D3B600FEFEFE00FEFE\n      FE00FDFEFD00FCFCFC00FCFAF700FCF7F000C9957A00E3B58F00000000000000\n      00000000000000000000000000000000000000000000000000005DC7E6007CCA\n      E10095A2A400DCD3CE00ECE8E600ECE8E600E4DDDA00A5AAAB0060A3B4005EBF\n      E0007AC9E50000000000000000000000000000000000B8696500B6767300E3E3\n      E300E3E2E200E3E3E300E3E3E300E3E3E300E3E3E300E3E3E300E3E3E300E3E2\n      E200C4919000B65A5A00C9A7A700000000000000000000000000000000000000\n      000000000000D9D9FB0000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000F3D3B600E7C4AE00E7C4\n      AE00E6C4AD00E5C2AC00E5C2AC00E5C1A900C497880000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000B5C7CD00AA968D00AE9C9300AE9C9300AC9A9100B0B0B200000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000E8E7E500B5B5B500B0B0B000C0C1C200DCDDDD00F0F0F000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000086BED40049869B005A7E\n      89008D8F9100B1B2B100D6D1D100000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000C6866400D2A0870000000000000000000000000000000000D7AA9100C98B\n      660000000000000000000000000000000000000000000000000000000000CDDC\n      E4005CAECA0065BFE4004EB3D900459CBB004D88A10061808B00A19F9E00D7D7\n      D700000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000006AC3E20075DCFD005BCA\n      F40043BCE70035A1C7003587A0004C7C8E000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000BB6B\n      3300A9450400A9450400C89172000000000000000000CE9D8000A9450400AC48\n      0300BC682D0000000000000000000000000000000000000000000000000042AF\n      D30046B8DC0087E1FE0072D9FD006FD7FD006FD7FD0067D3F80048ADD500487E\n      9100989A9900EEECEB0000000000000000000000000000000000848484000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000052B9DD0087E1FE0078DE\n      FD0078DEFD0078DEFD000000000000000000FFCC3300FFFF9900FFFF9900FFFF\n      9900FFFF9900000000000000000000000000000000000000000000000000B659\n      16000000000000000000B2551500E7CDBD00E5D0C800AF582000000000000000\n      0000B3540E0000000000000000000000000000000000000000000000000039B1\n      DE0052BBE00086EDFE007CE1FE007EE3FE0063CAF40060CAF1007EE3FE0077E0\n      FC002F8FB000A9AAAA000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000031ADD9008DE6FE0080E6\n      FE0080E6FE0080E6FE0000000000FFFF9900FFFF9900FF663300FF663300FF66\n      3300FFCC3300FFFF99000000000000000000000000000000000000000000B85E\n      1B000000000000000000AF4B0200E4C3AA00E3C4AF00AE4C0600000000000000\n      0000BE62190000000000000000000000000000000000000000000000000041B3\n      E70059C0E40092F1FF0088EFFF0086EDFF0051B1D00058B3D60086EDFF0086ED\n      FF003AB8E3009FA0A1000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF0000000000000000000000000000000000000000003CB1D900A8F2FE0088EF\n      FF0088EFFF0088EFFF0000000000FF663300FF66330088EFFF0088EFFF0059CB\n      EF0000000000FFCC3300FFFF9900FF663300000000000000000000000000C786\n      5B00B5581500C2733B00BB570100D5A58800DBB59D00B8540200BE6F3B00BE61\n      1400C480540000000000000000000000000000000000000000000000000051BE\n      E60066C8EB00A9FAFE0090F6FF0093F8FF0075B2C8004B9EBE0090F6FF0090F6\n      FF003DBAE300A0A0A00000000000000000000000000000000000848484008400\n      0000840000008400000084000000840000008400000084000000840000008400\n      0000000000000000000000000000000000000000000031ADD900A7F8FE0093F8\n      FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF006ED8\n      F8006785900000000000FFFF9900FF6633000000000000000000000000000000\n      0000BB6E3C00B04C0500AC490500BB744C00BA7D6000AC490500AC490500B76C\n      3D000000000000000000000000000000000000000000000000000000000057C1\n      E80071CFEF00B3FCFE0099FDFF0099FDFF007FCFDC0077AAC60099FDFF0099FD\n      FF0041BDE3009FA0A10000000000000000000000000000000000848484008400\n      0000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF008400\n      000000000000000000000000000000000000000000004CBAE300A2EDF60099FD\n      FF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0088E8\n      FE004E7F910000000000FFFF9900FF6633000000000000000000000000000000\n      00000000000000000000BB8D7B008E69540097756200BB886E00000000000000\n      00000000000000000000000000000000000000000000000000000000000060C7\n      EB006CCDEF00ABE4F200BCECF600D5F8FD00C1FAFF00B0F4FE00B9FCFE00B3FD\n      FF0048C0DE009FA0A10000000000000000000000000000000000848484008400\n      0000840000008400000084000000840000008400000084000000840000008400\n      0000000000000000000000000000000000000000000065C1E200B0E8F400C0FC\n      FE00B9FCFE00B3FDFF00B3FDFF00B3FDFF00B3FDFF00B3FDFF00B3FDFF00A1F3\n      FF004A859B0000000000FFFF9900FF6633000000000000000000000000000000\n      00000000000000000000B8AEA700B6A49B00A99E9700A5958C00000000000000\n      0000000000000000000000000000000000000000000000000000000000004FBE\n      E30042A8C7001386AE0047B1E00045B9EE005AC1E6007FCDE800C1EAF600DCFC\n      FE0051BDDF00A0A0A0000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF0000000000000000000000000000000000DBEFF8008CE0F3005ED4ED006CCF\n      ED0074CDE80093D9EE00D6FBFD00CBFCFE00CDFBFE00CBFCFE00CDFBFE00B3F1\n      FE0000000000FFCC3300FFFF9900FF6633000000000000000000000000000000\n      00000000000000000000A4938A00AD9D940097837800A38D8500000000000000\n      000000000000000000000000000000000000000000000000000000000000B8E5\n      F20053C7E60020AAD80077DFFB006CD6FB005AC7F8002C91B800118EB70052B0\n      D3005EC0DF00C0C0C0000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF0000000000000000000000000000000000DBEFF800AFEDF60099FDFF0099FD\n      FF0099FDFF0080ECF60072CBE50000000000BBEAF500DDF6FB00ECFDFE00CAF3\n      FD0000000000FFFF9900FF663300000000000000000000000000000000000000\n      000000000000AFA09800BCB5B200AD9F9400B8AAA200B6AAA600AF9F95000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000B9E3F0003CB7E50052C2E1006EDCF60078DEFD0047B5E00024ACDA002FAA\n      D50056A8C400F4F2F1000000000000000000000000000000000084848400FFFF\n      FF0084000000840000008400000084000000FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF000000000000000000000000000000000000000000A5DDEF0099FDFF0099FD\n      FF0099FDFF00AFF1F90099D9E900000000000000000089D8ED0074D4EA000000\n      0000FFCC3300FFFF9900FF663300000000000000000000000000000000000000\n      000000000000C1B5B100B2A7A1000000000000000000AD9C9200BAACA7000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000C4E8F30053C6F100607E8900D9E3E700AFDEEE0062C5E20040BAE70064A6\n      BD0000000000000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF000000000000000000000000000000000000000000ADDDEF00A0DBED00A6E3\n      F200B5ECF60098C3D500F0F0F00000000000FFCC33000000000000000000FFCC\n      3300FFFF9900FF66330000000000000000000000000000000000000000000000\n      0000D0C9C500C2B4AB00C0B3AC000000000000000000CBC0B700B8AAA300C6C0\n      BD00000000000000000000000000000000000000000000000000000000000000\n      00000000000066D2EF00458FAE00A7A7A70000000000A0D3E70056CAEF00A5A3\n      A30000000000000000000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000000000000000\n      0000DBEFF800000000000000000000000000FFCC3300FFCC3300FFFF9900FFFF\n      9900FF6633000000000000000000000000000000000000000000000000000000\n      0000A4928700A08D810000000000000000000000000000000000A8988F009A85\n      7900000000000000000000000000000000000000000000000000000000000000\n      000000000000A0DBF1007DE7F3004480980071858A0060BFD70065CEE600C7C7\n      C70000000000000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000FFCC3300FFFFCC00FFFFCC000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000089726400000000000000000000000000000000000000000000000000846F\n      6200000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000096DAF2007EE9F9007DDEF00082E8F5008EC3D7000000\n      0000000000000000000000000000000000000000000000000000848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400848484000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000FFCC3300FFFFCC00FFFFCC000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000B2A59E00000000000000000000000000000000000000000000000000C0B3\n      AC00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000E4F4F900BFE5F200CEE8F000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000FF663300FF663300FF663300FF66\n      3300FF663300FF66330000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000A2ACB000A6A7\n      A500C4C4C6000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000EFEFEF00A0837E009871\n      7000987170009971700098717000987170009871700098717000987170009871\n      700098717000987170009C6A6200E1D4D7000000000000000000000000000000\n      000000000000000000000000000000000000E5DED600997C7000E3DAD7000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000DBDBDD0070718200323564001E2150001E1F4C002525390050505000AEAD\n      AD000000000000000000000000000000000000000000B9E3F00076C8E40040A6\n      CC00408CA7003E7E940066848F0098989800BCBCBC0000000000000000000000\n      000000000000000000000000000000000000DDF7FE0015B1DC0003ACD80003AC\n      D80003ACD80006ABD60004B0DB0004B7E00004B0DB0004B0DB0003ACD80006AB\n      D60003ACD80002B5DF00416A7300996159000000000000000000000000000000\n      0000000000000000000000000000C4B7B200BF9871009F6B5100DDD5CD000000\n      0000000000000000000000000000000000000000000000000000000000008589\n      AB000B0F750000008E0000008E0000008E000102840001028400020668000A0C\n      370057585800E3E4E300000000000000000000000000B8E3F00093D4ED0080E0\n      FE0075DCFD0075DCFD005DCDF20042B9DF004099B900407F97005E7C87008992\n      9400C0C0C000000000000000000000000000A3EAFA0000BAE40000D0F40000D0\n      F40000D0F40000D0F4000BB5D100373746005EACC70001D7F50000D0F40000D0\n      F40001D7F50000C1E9001E9CB600B48F8A000000000000000000000000000000\n      00000000000000000000CCC4BD00A3725800EDC69B009E705400C8BCB7000000\n      00000000000000000000000000000000000000000000000000007173AF000000\n      8E0000008E0000008E0000008E000000960000008E0000008E0000008E000102\n      84000001430048464800E9E9E9000000000000000000AAD7E7005AC6ED00B3F1\n      FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE006FDBF80048C1\n      E7004F748100000000000000000000000000F1FEFE0007C1E60009D6F20001D8\n      FA0001D8FA0001D8FA0007788800250C0C004E38410002E5FC0001D8FA0001D8\n      FA000FE7F90001D8FA004D686800F2EAEB00000000000000000000000000E0D7\n      D400A0887C00987B65009C6F5000C2A18600EEC49C00AF836700704432007D58\n      4800C4B8AD00000000000000000000000000000000009191C900000096000000\n      8E002324AE0001009E000100A6000100A6000100A600000096001E1EA6000000\n      8E0000008E0003044600707170000000000000000000AADCEE0053C6EF00AAE7\n      F40088EFFF0088EFFF0088EFFF0088EFFF0086EDFF007AE1FE0088EFFF007BE3\n      FE0047A8C000A1A2A2000000000000000000000000006EDDF30000D0F40002E5\n      FC0001D8FA0001D8FA0004D8F20008797F0008B4C70001DEFB0001D8FA0001DE\n      FB000EEAFC0006C4E700AC837A00000000000000000000000000CCBCB100B994\n      7E00CCAA8F00D3B49900E3C19F00EDCCAD00FDD9B200DFBDA000D7AE8B00B68A\n      6B00703F2E0097776B00F5F1F00000000000E8EAEF000D0DA6000100A6004B4B\n      AD00FFFEFA006264D2000201AE000201AE000201AE00595BC100FFFFFE005355\n      BF0000008E0000008E00191B3400D5D5D60000000000A2DAEE006ACCF60091D4\n      F0009CFAFF0093F8FF0093F8FF0093F8FF008DEBFA00D6CFB80096E4F10081E7\n      FE0086E3F20057768200000000000000000000000000E2FCFF0008C8EB000AE4\n      F80001DEFB0001D8FA0001DEFB001C99B20002E5FC0001D8FA0001DEFB001FF4\n      FD0001DEFB0043707800F2E7E8000000000000000000D3C9BB00C6AC9800E0C1\n      A500F7D7B800F0CCAA00B5775A00E1946400DB976C00D99D6F00F5D5B700E4C1\n      9F00CBA78A007D523D00917D7200000000008083CA000201AE000201AE006F6D\n      9900F0EEE900FFFFFF006364D2000201AE006363C900FAFAF200FAF9F2007879\n      AF000100A60000008E0001015C009495940000000000A5DCF10073D4F6005BC3\n      E800CFFCFE00A6FDFF009FFDFF0099F7FF00DCD8B900FED8A900EAD7AD0085E1\n      F900CDFBFE004993B000AFB2B0000000000000000000000000006DE3F30000D0\n      F40009EEFD0001DEFB0003EBFD002A485D0004D8F20002E5FC0007E1FB000EEA\n      FC0009C5E100AC857D000000000000000000F1E7DF00C7B19B00E5CBB400FDE4\n      C900FEE6C900FEE9C900C39E7F008E2E05008B462800FEE8CA00FDDDBD00FDDA\n      BA00E9C7A900D4B19100793E2A00CEC6BF003E3FD4000201AE000404C5000404\n      C50061609600F0EEE800FEFFFF00A3A3E600FFFEFB00FAF9F2006E6EAA000303\n      BD000201AE0001009E0001038C006767670000000000ABDCED0087E1FE006FD8\n      FB0077CFF10096D8F100AAE0F000C9E9EC00F9E3B700FEE4AC00FEE7B300D8D6\n      BB00E2FDFF0096D5EA00687D8400000000000000000000000000E5FEFE000FCF\n      EE0002E5FC0002E5FC0009F4FE005631380013B2C70002E5FC0015FAFE0002E5\n      FC0041757F00EFE5E5000000000000000000D8C9BC00DBC6B700FEE8D100FEE6\n      C900FEE7CD00FEE7CD00CCAA8C00912B0300A85A3C00FEF1D300FDE3C500FDE0\n      C100FDE3C500E5C6AA00AD867200937469001A1BBA000404C5000505CD000505\n      CD000505CD007673AB00FEFCF900FFFFFE00FFFFFE008080C2000404C5000404\n      C5000303BD000201AE000100A6005F5F6700000000009BD5EB008FE8FE0086ED\n      FF0086EDFE0080E6FE00ADBAB500CAC4B200B2DAE600E9E4D500FDF7DA00FEF1\n      CB00FBECDA00EFFDFD00478AA000C8C8C70000000000000000000000000063E1\n      F7000AE4F80009F4FE000ACFE200491F1E002A8C960004F2FE0019F1FD0008D1\n      E900AB7B7200000000000000000000000000CCBCAD00F5E2D000FEEBD900FEEB\n      D900FEE9D500FEE9D500CCAD900087270500B05E4000FEF2D700FEE6C900FEE6\n      C900FEE6C900FBDDC000DEC2A9008B6864001214CF000C0CD2001010DD000808\n      D7000505CD005F5FCD00FDFCF800FFFFFF00FFFEFC006465D9000505CD000505\n      CD000505CD000202B5000201AE0067666A0000000000B1DEEF009FFDFF0096FA\n      FF0093F8FF00A6CDCA00F3CDA600FCD3A800F0CEA600CAC0B000BDC6B800AFD2\n      D200B1CED900B1CEDA0076BBD50000000000000000000000000000000000E2FC\n      FE0010D7F3000FF7FE0010939E0037030600323B4C0015FAFE0004F2FE004475\n      7800EFE1DF00000000000000000000000000D4C6BF00F7EADF00FEEDDD00FEEB\n      D900FEEDDD00FEEDDD00CCAF9900912B0300A65B4200FEF3E000FEE8D100FEE7\n      CD00FEE7CD00FEE8D100E0CFB9008B6864003233DE001515DF001919ED000A09\n      EE005F5FD500FAF9F000FAF9F200BEBED300F8F6F300FEFFFF006465DA000504\n      D4000808CF000807C8000909B2008787870000000000A0D6EC00B1FDFF0099FD\n      FF00ACDCDD00F1CCA900FDDDB900FCD3A800FCD3A800FCD4AC00FCD4AC00FDE1\n      C200FDE6D100DEB79500C3C2C200000000000000000000000000000000000000\n      000063E8FC000FE7F9000D7E7F002905070032232C0015FAFE0009E5EF009C77\n      700000000000000000000000000000000000D7C9C000F8EEE400FEF3E500FEF3\n      E500FEF3E500F1DED400A0624A00912B03009C574500FEF6EA00FEEBD900FEEB\n      D900FEEBD900FBECD600EBD7BD00937770006468E6001F1FF6002727FA005B5F\n      CE00FAF8EC00F8F5EE007577BF000504DC006B6A9D00F1EEE900FEFEFE006869\n      EB000C0CE2000C0CD2001013A100CBCBCB0000000000000000009BDAED00B5EB\n      F100ECCBB000FEF0E100FEEFDD00FCD7B000FCD4AC00FCD6AF00FDD5A600FDDD\n      BA00FBE7D400CEBEB40000000000000000000000000000000000000000000000\n      0000E0FCFE0009DEF70010E1F100076C700012B4BD0009F4FE003A868300E7DB\n      DA0000000000000000000000000000000000E3DAD500F4EDE800FEFBF400FEF6\n      EA00FEF6EA00EAE0D400BA9D9200BD999200CCA79B00FDF5EA00FEEDDD00FEED\n      DD00FEF2E500FAEEE200D9C4B300CEC6C000B7B8F1002727FA003636FD007F7F\n      BE00F1EAE1006E6EB5000504EC000504EC000504E4005C5E9800DFDAD1007576\n      BC001919ED001414D8004951A00000000000000000000000000000000000C4E8\n      F300E8DBD000FDF3E800FEF7EC00FDF2E700FCD6AF00FBD7B400FEDBB100FBED\n      DD00CCBEB2000000000000000000000000000000000000000000000000000000\n      00000000000061EAF60009F4FE000FF7FE001BFDFF0009E5EF0099716E000000\n      000000000000000000000000000000000000F3EFEB00E5E3E100FCFBFA00FDFA\n      F700FEF9F100FEFAF400F2E4E100E3B69800F3DFD200FEF7EC00FEF6EA00FEF7\n      EC00FEFCF700FAEDE000CAB6A30000000000000000005658F7004848FD005556\n      FB005F61BC003535F8001D1DF600100FF0001413F2002322F6004E51B8003030\n      FD002727FA001D1DD400D9D8D700000000000000000000000000000000000000\n      000000000000F9E4D100FEFCF900FFFDF800FEF2E300FDD9AE00FEF3E400DDC9\n      B800EFF0F0000000000000000000000000000000000000000000000000000000\n      000000000000CEFEFE000AE4F80031FEFF000FF7FE0038878700E7D4D4000000\n      00000000000000000000000000000000000000000000F1EAE500EEECEB00FEFD\n      FC00FFFDF900FFFEFC009E787100963D190094594100FEFDFB00FEFCF600FEFD\n      FC00F8F3EF00E9D5C800F2F1F1000000000000000000E5E5FD004545FD006465\n      FA008386FC008A8EFB007A7DFA005F60FD005F60FD005C5DFA005556FB003C3B\n      FD002325EB00B6B7DE0000000000000000000000000000000000000000000000\n      00000000000000000000FEEBDA00FEF9F500FDDA9E00FEFAF400E7D5C700E6E6\n      E600000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000053F8FE0009F4FE0009E5EF00B9A2A000000000000000\n      0000000000000000000000000000000000000000000000000000F2EEEB00F1F1\n      F100FBFCFC00FFFFFF00E2D2D100845E5D00D7C4BD00FEFFFE00FEFCFB00FCFA\n      F600E8E2DA000000000000000000000000000000000000000000DEDFFE005E66\n      F3005D5EFB009195FA00989DFA00989DFA008386FC006465FA004848FD004141\n      FB00CCCCEC000000000000000000000000000000000000000000000000000000\n      00000000000000000000FEF8F100FBDCB800F3C58C00F5DBBF00E9E4DE000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000077FDFE00CEFDFD0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000F3EFED00EDEEEC00F6F6F600F7F7F700F6F6F400F4F1EE00F5F0EC00EDE9\n      E700000000000000000000000000000000000000000000000000000000000000\n      0000B5B7FD007B7EF8007476FC006567FC006465FA00737BF300A6A7FD000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000C7BFB800B2876500A26D3C009F633400955D3F0088614A008B888600C9C8\n      C8000000000000000000000000000000000000000000BDBAB700989592008E84\n      85009E9C9B00E3E3E30000000000000000000000000000000000F2F2F200BBBA\n      B9009C939400878787009D9B9B00E3E2E2000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000E3DFD900CD8B\n      5C00C8652900C0644800B8675200CA624600C5655500CC685700B3593700764C\n      3E0095939100ECECED000000000000000000C8BEBE00D6CACA00CBB9B800C0A7\n      A700A4868300A2A2A20000000000000000000000000000000000C9BCBC00D7CB\n      CB00CBB9B800C0A7A700A4868300A2A2A2000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000E2E3E200B4B5B400B3B4B300B3B4\n      B300B3B4B300B3B4B300B3B4B300B1B2B100A3A4A400A1A1A100A1A1A100A1A1\n      A1009FA0A000A1A09F009FA5A500DCDCDC0000000000EBE1D800D57E2F00B051\n      1F00AB4B16009B431A007F562B009E3C1200A4481400B6511F00BC5B4200CA62\n      46008D4D2B008D868300EFF0EF0000000000DCD0CF00E2D3D200DBC6C300C090\n      8D00BE959300D0D0D00000000000F2F4F300E8E9E90000000000D8D1D000E4D4\n      D300D9C4C400C0908D00BE959300D0D0D000000000000000000086BED4004986\n      9B005A7E89008D8F9100B1B2B100D6D1D1000000000000000000000000000000\n      000000000000000000000000000000000000AA5D3C0099492200994922009949\n      2200994922009949220099492200994922009949220099492200994922009949\n      22009949220099492200994922009896950000000000DF964B009B3804009A3C\n      06009E3D0500A1430600306A1100794E0600A33F04009A3C06009D3F0C00AE4E\n      1C00BC5B4200864F3200AAAAAA000000000000000000D8A07800E8A05100CD7D\n      700086606200ABACAC00A8A9A900638D9E00446F85007E7F7F00A8A9A900D89D\n      7200E8A05100CA806E0086606200C2C3C20000000000000000006AC3E20075DC\n      FD005BCAF40043BCE70035A1C7003587A0004C7C8E0080898C00A8A8A800CCCC\n      CB0000000000000000000000000000000000DAB59F00FFFFFF00FFFFFF00FEFF\n      FF00FEFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00E6C8BE0099959100F0CCA500A3460900AA460400AF48\n      0300B9500200BE5401001F6F0A001F6F0A008C570200AF480300A64505009A3C\n      06008F583800A264400076605500E4E3E300E9E6E600F8B96200FEC05200FEC2\n      5400E5A466004F4F4F007E77710042A6C60045A9C600787373004C4C4C00F8B9\n      6200FEC05200FEC05200E5A46600A0A0A000000000000000000052B9DD0087E1\n      FE0078DEFD0078DEFD0078DEFD0078DEFD006FD8FB0056C8EE0043A9CD003C8F\n      AB0049798A00C1C2C1000000000000000000DBB09800FEFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FCFFFF00FCFFFF00E7C8B70099959100DA934700AA460400B9500200C359\n      0100CA6301008C7102000D7D04000D7D0400576D0200C65E0100B9500200AF48\n      0300695A2A00756441008B523400BABABA00E8D7D700FBC87300FED47C00FED4\n      7C00E9AF6D009C939300CCCCCB0079BAD1005C9BAF009F9F9F00CDBCBC00FBC8\n      7300FED47C00FFD97E00E9AF6D00A0A0A000000000000000000031ADD9008DE6\n      FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6\n      FE003FB7DE009D9E9E000000000000000000DBB09800FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FCFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00E9C8B70099959100C9722800BE540100CA630100D26E\n      0100DC74020078820600098F0500537F0900C3750600D7710100736E02005A5C\n      04001F6F0A005C6129008B532800999A9A00D8C9C900FBD48500FFEAA900FFEA\n      A900E9BA8100A3A4A300FFFFFF00CCCCCB00928C8400A9A9A900D8C9C900FBD4\n      8500FFEAA900FFEAA900E9BA8100A3A4A30000000000000000003CB1D900A8F2\n      FE0088EFFF0088EFFF0088EFFF0088EFFF0088EFFF0088EFFF0088EFFF0088EF\n      FF0059CBEF00879193000000000000000000E5B39900FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00EBCCB70099959100C2631100CE680100D7710100BF82\n      09006D9307006C950B0081930900E38E0200EE840200DB7909000D7D04000F74\n      04000F740400306A110081542B00968C7E00E7E1E100DDCCCC00D6C5BD00D7C0\n      B000D3AD9100D5D5D500FBFBFB00C1C1C10072727200B3B4B300D9D1D100DDCA\n      CA00D3C9C400D7C0B000D5B09300D2D3D300000000000000000031ADD900A7F8\n      FE0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8\n      FF006ED8F800678590000000000000000000E5B39900FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00EACBB6009E999500C7681000D77101009C8708000D9F\n      130051A4210065A41E00EEA62200FB9F1300F7930700F28901007E8506000F74\n      04002A740300416517005F630A009F9486000000000000000000000000000000\n      0000F4F1F100F2F3F200B7ADAD00A59393009E848600927E7D008B838500EBED\n      ED000000000000000000F4F1F1000000000000000000000000004CBAE300A2ED\n      F60099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FD\n      FF0088E8FE004E7F91000000000000000000E7BA9700FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00EDD1B7009E999500DE883000E17702003CA7230021B6\n      3A0025BB44002AC14F00A6C15800FEC25400FDB03200F7930700C58802001D8F\n      07000D7D04000F74040062680F00AFADAC000000000000000000000000000000\n      000000000000E6DEDD00D5D0D100EAEAE800CDBABA00B2929200AA918F00EBE9\n      E90000000000000000000000000000000000000000000000000065C1E200B0E8\n      F400C0FCFE00B9FCFE00B3FDFF00B3FDFF00B3FDFF00B3FDFF00B3FDFF00B3FD\n      FF00A1F3FF004A859B000000000000000000E7BA9700FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FDFFFF00EDD1B7009E999500E9AF6800BF8209002AB53C002EC7\n      590033CD640051D4740051D47400DBDC8500FEC55A00FBA41F00D08E0300328C\n      05000D7D04000F7404007E702100DADADB000000000000000000000000000000\n      00000000000000000000D7C6C500D5A79600CB908500B6747200A39E9D000000\n      00000000000000000000000000000000000000000000DBEFF8008CE0F3005ED4\n      ED006CCFED0074CDE80093D9EE00D6FBFD00CBFCFE00CDFBFE00CBFCFE00CDFB\n      FE00B3F1FE005A93A600D4D4D50000000000EAC09500FDFFFF00FDFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FDFFFF00EDD1B7009E999500FEEFC9004CAB2F002AC14F0042D0\n      6C009CDF8D00CAE7A400A4E8A700FEF2C200DAD27900F0AF2F00E38E0200AE83\n      04000D7D04002A740300B6A07400000000000000000000000000000000000000\n      00000000000000000000DDC8B900FDAD2C00F3B15400E39A630087756E00EBEC\n      EC000000000000000000000000000000000000000000DBEFF800AFEDF60099FD\n      FF0099FDFF0099FDFF0080ECF60072CBE5009CDBEE00BBEAF500DDF6FB00ECFD\n      FE00CAF3FD0061A5C000C9C9C80000000000EAC19500FFFFFF00FDFFFF00FCFF\n      FF00FDFFFF00FDFFFF00FDFFFF00FDFFFF00FDFFFF00FDFFFF00FDFFFF00FEFF\n      FF00FBFEFD00FDFFFF00ECD1B8009E99950000000000A4DF97002AC14F005DD3\n      750096E29700D1F3C100C0F3BC00D2E9AB003FCB640069B23E00B7971200EA7F\n      02005E7F030093892B00E4E4E400000000000000000000000000000000000000\n      00000000000000000000E4C1A200FEC55A00FFCE6A00FEC55A00A2817000E7E7\n      E700000000000000000000000000000000000000000000000000A5DDEF0099FD\n      FF0099FDFF0099FDFF00AFF1F90099D9E90093DFF20094DBF20089D8ED0074D4\n      EA0062B9D8007ABAD2000000000000000000CA7F3C00BF8A5E00BA885F00BF8A\n      6000BA885F00BF8A5E00BA885F00BA885F00BA885F00BA885F00BF8A5E00BF8A\n      5E00C38B5D00BA8A6200CD7F3B009F9F9F000000000000000000CDD27E0066CF\n      6F00A5DD9000D3E8A200C8E6A30093DE880033CD64002AB53C00E38E0200E37B\n      0600E8912300E7D9CC0000000000000000000000000000000000000000000000\n      00000000000000000000E4B98E00FED98600FEE3A000FFDE8800A2817000E7E7\n      E700000000000000000000000000000000000000000000000000ADDDEF00A0DB\n      ED00A6E3F200B5ECF60098C3D500F0F0F00000000000D0EBF600AFDEEE00B0DF\n      F000BEE0EC00000000000000000000000000D1721000DA891E00E0821A00E082\n      1A00E0821A00E0821A00E0821A00E0821A00E0821A00E0821A00E78C2600E794\n      3500F09B3A009F7C6D00BD763100B9B9B900000000000000000000000000DAEA\n      B700A5D47F008BDB880078DD89005ACE6D002EC7590021B63A00D6991800F1B2\n      5B00EEE7E0000000000000000000000000000000000000000000000000000000\n      000000000000E9EAEA00DBB4A600E5CEAB00E8D8B000FAE1A000AF8E7D00EDED\n      ED00000000000000000000000000000000000000000000000000000000000000\n      000000000000DBEFF80000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000F4D2AB00ECC08F00ECBE8800ECBE\n      8800ECBE8800ECBE8800ECBE8800ECC08F00ECBE8800ECBE8800ECBE8800ECBE\n      8800ECBE8800EEBD8400F2CC9F00000000000000000000000000000000000000\n      0000FEFBEF00ECEDC700DADFA200E3CD7D00D6CF8000DCD99E00FAEAD6000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000EFEFEF00E9E0E000E0CCCC00DFD7D6000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000BFAEAF00AA89\n      8B0097787E00977276008E686E009B7B8000C5B3B40000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000C5C5C400AAABAB00AAABAB00BABBBB00D4D5D400000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000DBDCDB00B2B1B1008F8F8E00828382008283820094939300BBBBBB00E4E4\n      E4000000000000000000000000000000000000000000BCA8AA00D6CFCF00DBD5\n      D500DAD0D000D1BBBA00C19E9F00C69E9E009A757B00A7878C00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000D4B4AB00DDAE8E00DEC5B300DBC2B300DBBFB500DBBEBD00E6D8DA000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000D3D1C200EBDFBA00FEF2CD00EBD9B600D3C8B200B1AFA00093908D00A5A5\n      A400000000000000000000000000000000000000000000000000F3F1F100C3BE\n      B900CABEBA00E5DBD700F0E7E100F0E7E100F0E6E100E3D3CA009A8F8A007A77\n      7500C2C2C200000000000000000000000000D2BCBC00E5E5E500E8E9E900E3E3\n      E300DAD9D900CEB6B500B0A3A300A4828500CCA3A300A1767900D8D0D2000000\n      000000000000000000000000000000000000000000000000000000000000E0BB\n      A600E8B79000EBC49C00F3E5D600F1E3CD00EDDCC600C39C8D00B4877F00BA8E\n      8600CCAC9F00D5B8B000DFD3D00000000000000000000000000000000000F5F2\n      DA00FEE9C900FDE1BB00FEE2B100FDDCB500FDE1BB00FEE6B900FEF3CE00D3CE\n      B5008B878200C6C7C500000000000000000000000000F1F2F100C9C2BF00EDE2\n      DF00F1F1F000E1DCD800D0B4A100D8B59F00E1C8B700E7E4E300F0EFED00DFD0\n      CA00776E7000BABBBA000000000000000000DBCCCC00F2F1F100F8F7F800EBED\n      EC00DBDADA00D1B0AC00B28D8C00B4848200CCA3A300B0878900B6A7A900BA9D\n      9C00987B7F00A2848800D5D0D100000000000000000000000000E3C0A900F3C5\n      9900EBC19800EBC49C00F5E8DA00EFE3D600F0E0CD00B6928B009D706A00B287\n      8000E2CFA800DFC6A400CAA8920000000000000000000000000000000000FBDB\n      AF00FEEFC300FEE3B500FDD5A600FDDFBE007FC8690092D0860092D18E00F3F6\n      D700FAF2D5008E8C8600E4E5E4000000000000000000D4CECB00F3EDEA00EAEC\n      EB00D59C7D00BF633500C5724D00DAB49E00C3653900C26C3F00D2AF9B00F1F1\n      F100E5DDD600716C6D00CECECE0000000000F1E5E400E4DDDD00D8B5B300E1D2\n      D200DAC9C900D0A4A200B8767500B8767500CEA4A100BB959500D4AEAC00D7B5\n      B500ABA6A600AC989A008D717400A3888D0000000000E1C5B000F6D5AB00F3D1\n      A300F5C99B00F0CB9F00F5EDE500F5EADF00F2E3D200B6938900986B6600A27E\n      7600EAD7B400E6D5AE00D5BC9D00000000000000000000000000F3E5D700F1B5\n      6F00FAD8A300FEECCA00FEDBB100FEE5C2000798060007980600079806002AAA\n      2A00F4F9D800C6C1AE00C7C7C70000000000E9E9E900F0E1DA00F3F0EE00C882\n      5B00C6633000CD683400BA9A8600FBFCFD00D5916C00C7663300C5602E00D69A\n      7D00F3F3F300CABFB60085858500EFF0EF00FFFFFF00E9D8D800DEA37500EAB6\n      7E00D3A09600C17A7600C76C6700C5666100D8C7C700D8C4C000D4B2B200CEA3\n      A3009E7C7F00AC939500A2B29D008D6C710000000000E7C7A300F9D6AC00F5D2\n      A400F4CEA000F1D2A900F8F1E900F7ECE200F2E6DA00B5938B00986B6600AA79\n      7000EDD9B700E8D6B100D5BC9D00000000000000000000000000F5D7B600F2BD\n      8600F2BD8600F2BD8600F8D19F00FDE6C100079806000D9F1300E5F1DC009BD4\n      87008DCA7700D7B79100B1B2B20000000000F3E9E100F7F5F400D4A79200CB64\n      3100CD683400CD683400CD6F4000D28A6700CD683400CD683400CD683400C061\n      3000DCC4B300F4EEEA0089838000D3D3D300FFFFFF00E7D1D100E89D4B00FDAA\n      2600FDB03200F3B56A00DE9B7800BF757300CFABA700CEA8A800D4ADAD00D3B3\n      B300AD8A8A00A37B7B009E7C7F008E676C0000000000E2CAA900FBE0B100DCC9\n      AD00B4AFB000D5C1AB00FBF7F300F7F1EA00F5EBE000C7ACA500AC857E00B385\n      7E00EDDCC600ECD9B900DCC0A600000000000000000000000000F3D2A400F9CA\n      8E00F9CA8E00F9CA8E00F9CA8E00ECEACA0092CB7B0078C76D00A5DAA500FEF7\n      E600A6E19F00F5D1A6009E9E9D0000000000F3E5DC00F6F1EF00CD6F4000CD68\n      3400CD683400CD683400CB876B00F3E1D200CE754800CD683400CD683400CD68\n      3400CB825A00F6F7F800B8A7A000B5B5B600FFFFFF00D8C0BF00EEA83E00FEB6\n      3E00FEBC4B00FEBC4B00FEB94400FABA5400E59F6600D58F8400DABABA00D5B0\n      B000B4888600BE8D8C00B48482008A646A0000000000E9C9A600D7C9AF0076B1\n      DD003C99F8005F9EE400E9F4F800F9F6F300F6F0E800F1E7E000E8D8CD00E2CB\n      BF00F0E2CC00EDDCC600DCC0A6000000000000000000F8F5F200FCD3A400FCD3\n      A400FDD39F00FCD3A400FBD0A100A8CE8B00E3E4B600D8EFBF002CAC310038B5\n      3E00B4DD9600FED8A9009897960000000000F6EBE500EEDBCC00CD683400CD68\n      3400CD683400CD683400C3826500FAFAFA00DBA38400CB643100CD683400CD68\n      3400C16A3A00F2ECEB00DCCEC300A8A8A800FFFFFF00CCA8A800FEBC4B00FEC5\n      5A00FEC55A00FEC96200FEC55A00FEC05200FEBC4B00E0925500DDBDBA00D3AE\n      AD00B07C7C00BE8D8C00BE8D8C00926B700000000000B4BABB0061C6FE0057BB\n      FE0047AAFE003B9EFE0064A9F300DBE9F800FCF7F300F7F1EA00F5EBE000F2E7\n      DB00F2E3D200EDDDCF00D3B5AD000000000000000000F9EBDD00FEDDAF00FEDD\n      AF00FEDDAF00FEDDAF00FEDDAF00E3DEB00030AC2D00ACDE980049B446000798\n      0600A1D38600FEDDAF009F9A950000000000F7EDE800EBD3BF00CD6E3B00CD68\n      3400CD683400CD683400CD683400CEAD9900FBFAFA00DB9C7800CD683400CD68\n      3400CD683400F7EDE800E0D3CC00A9AAA900F1EFED00D1B2A100FEC96200FFCE\n      6A00FECE7200FECE7200FFCE6A00FFCE6A00FEC96200D3987800DABABA00D5B0\n      B000B57F7E00AD787800A67E7F0094626700ABD5F00065B6F40061C6FE0061C6\n      FE0058B9FD004BABFE003A9BFC006FB7FA00F6F7F900F9F5F200F6F0E800F5EB\n      E000F2E6DA00D0BCBE00AF9CAA000000000000000000FBEBDA00FEEFC300FEED\n      C900FEEDC900FEEDC900FEEDC900FEEDC900AED88C000D9F1300079806000798\n      0600A1D38600FEEDC900A8A3990000000000F5EAE400F5E5D600D8734900CD6E\n      3B00CD683400CA612F00CD683400CD683400DEC5BB00FBF8F500CE724300CD68\n      3400CE744300FBF6F300DCCEC300B8B9B900E6DEDD00E0BDA000FECE7200FED4\n      8400FEDF9100FFE49300FEDF9100FED48400FECE7200D39B8400D8BBBB00CFA8\n      A800B67A7900C3949200B988870094626700000000005BB6FE0059B5FD0060C3\n      FD0061C6FE005FBDFD004BABFE003FA2FE0073BBFD00E3EFF800F9F5F100F6F0\n      EA00B4B8C800928FB200000000000000000000000000F7EBD400FFFCDD00FFFC\n      DD00FFFCDD00FFFCDD00FFFCDD00FFFCDD00FFFCDD00ECF4D000CAE9B500EFF6\n      DD00C5E5AD00FFFCDD00B2AC9E0000000000F4E7E000FEFDFC00F0976F00DA82\n      4A00D08E6D00E8D7CA00D3825500CB643100D9A08400FEFEFE00D08A6100DD7B\n      3E00D89E7B00FEFDFE00C1B1AD00D9D9D900DDD7D700E1C28C00FFDE8800FFE4\n      9300FFE8A200FFEAA900FFE8A200FFE49300FED48400CC9A9100DABABA00D6A3\n      A100BD727000B96D6A00B1777800995E620000000000000000004DAFFE0051B4\n      FE0061C6FE0061C6FE005CBAFD004FAFFE0043A6FE0073BBFD00F4F8FA00C3D6\n      E3007B91BD0000000000000000000000000000000000FEEFCE00FFFCDD00FFFC\n      DD00FFFCDD00FFFCDD00FFFCDD00FEF6CD00FEE8BB00FBE1B200FEE8BB00FFF8\n      D200FFFCDD00FFFCDD00BAB8A800DADADA00F7EDE700FDF9F600F5E2CF00F893\n      6800E4896A00F1EEED00F6EEE700E4BCA400F9F1EE00F4ECEA00E5865800E086\n      5600F3E8DD00F6F0EC00B5B1AC0000000000DBD4D200D7B58D00FFE49300FFEA\n      A900FEEEB700FEF2C300FEEEB700FFEAA900FEDF9100CAA8A700EBDFDD00F5ED\n      ED00E8D5D600E0B3AF00D5837F00A16E6F000000000000000000000000005DB6\n      FD004FB4FE005EC3FE0062C7FD0062C7FD004FB4FE0043A6FE005EA8F900588C\n      EA000000000000000000000000000000000000000000FDF2E300FEEBCB00FEEE\n      CF00FEEBCB00F3DDBD00F4C18900F1B56F00F1B56F00F1B97A00F1B97A00F2BD\n      8600F8D19F00FEF3D400C2C1B100CECFCE0000000000F4E7DF00FFFFFF00FBE3\n      C800F0BD8700E6BC9400EDDCD200E9E2E200EFDED500EDAF8500F69E6A00FDD6\n      C100FEFDFC00D5CAC600DAD9DA0000000000CDC8CA00C0BDBC00BEADA700C0A9\n      9F00CAB9A700DDD0B500F3E1BD00FFECB100F0CC8E00D7AEA800DCC7C400D8C0\n      BB00D8C2BD00DBCAC800E4D2D100000000000000000000000000000000000000\n      000053B0FD004FB4FE0060BEFD0062C7FD005EC3FE004FB4FE003E91EF005784\n      EE00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000FCF0E800F8DBBD00F4C08700F2BD8600F2BD\n      8600F7C68800F8C99800D4C3AB00CECECD0000000000F9F4F100F8ECE400FFFF\n      FF00FEFBEF00FEEFCA00FDE3B400F8D49B00F8D49B00F8D5AF00FCF2E900FFFE\n      FE00E6DAD500CFCFCF000000000000000000000000000000000000000000DED9\n      D900D7CCCB00CAADAD00C3ABAA00CBA19F00C79B9100BD9C9D00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000072C1FC007AC3FB0099D8FD00000000009DA6DB000715B3004A6B\n      ED00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000FBE3CA00F7C9\n      9400FACB8900F9CA9300DFC4A80000000000000000000000000000000000F3E6\n      DE00FBF6F300FFFFFF00FFFFFF00FEFFFE00FFFFFF00FFFFFE00F8F2EF00E4D9\n      D300DDD9D9000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000E7DBDB00E1CECD0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000C5C9E4006360AC00979E\n      DB00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000FCEDDE00F9EBD90000000000000000000000000000000000000000000000\n      0000F5EDEB00F5E8DE00F4EAE500F7EDE700F5E8E100F5E8E100EDE7E400F2F2\n      F20000000000000000000000000000000000424D3E000000000000003E000000\n      2800000040000000B00000000100010000000000800500000000000000000000\n      000000000000000000000000FFFFFF00FFFF000000000000C1FF000000000000\n      000000000000000000000000000000008000000000000000C001000000000000\n      8003000000000000000100000000000000010000000000000001000000000000\n      00010000000000008081000000000000C181000000000000FFC3000000000000\n      FFFF000000000000FFFF000000000000FFFFFFFFFE7FFFFFE79FC003FC3FFFFF\n      C107C003FC3FFC3FC003C003FC3FF81F8003C003FC3FF00F8003C003FC3FE007\n      800FC003F81FC003820FC003F00F8001C307C003F00F8001C183C003F00F0000\n      E083C003F00F0000F001C003E0070000F801C003F00F0000FC03C007F80F8001\n      FE37C00FF81FC183FFFFFFFFF81FFFFF80038003E007FFFF00010001C003C1FF\n      000000008001000000000000000000000000000000008000000000000000C000\n      00000000000080818000800000000001C001C00100000001FE3FFC1F00000001\n      FE3FF80F00000001F80FFE3F00008081FC1FFE3F0000C100FE3FFE3F8001FFC3\n      FF7FFE3FC003FFC3FFFFFFFFE007FFFFC00FFFFF0000FFFFC003C1FF0000FFFF\n      C00300000000FFFFC00300000000FE3FE00380000000F80FF007C0010000E003\n      F01F800300008000F01F000100000000F01F000100000000E00F000100000001\n      E00F00010000C003E00F80810000F01FE00FC1810000FFFFE01FFFC30000FFFF\n      F01FFFFF0000FFFFFC7FFFFF0000FFFF0000F00FFFFFC00F0000E007F1FFC003\n      0000C003E3FFC00300008001C7FFC00300000000C7FFE00300000000C7BFF007\n      00000000C79FF01F00000000C38FF01F00000000E007F01F00000000E003E00F\n      00000000F001E00F00000000F803E00F00008001FE07E00F0000C003FF8FE01F\n      0000E007FF9FF01F0000F00FFFBFFC7F003FFFFFFFFF00C0001FFFFDFFF90000\n      000F8FFFC0010000000787FBC0030000000783F3C00700000007C3E7C0030000\n      0007E1C7C00300000007F08FC00780010007FC1FC00780018003FC3FC0078001\n      C001F81FC0078001E020F08FC007C003FF11C1C7C007C003FE0B83E3C007E007\n      FF1F87FBC007F81FFFBFFFFFFFFFFFFFFFFFF801FFFFFFFFF801C0018001FFFF\n      F80180018001C0FFF80180018001C00F800180018001C003800180018001C003\n      800180018001C003800180018001C003800180018001C003800180018001C003\n      80018003800180018003800380018001800780038001C003801F80038001C087\n      803FC0078001FBFF807FF03FFFFFFFFFF03FFFFF81FFF3CFE00FFFFF8007E187\n      E003C0078003EC37E003C0078001EC37E003C0078000E007E003C0078000F00F\n      E003C0078000FC3FE003C0078000FC3FE003C0070000FC3FE003C0070001F81F\n      F003C0078001F99FF00FC0078003F18FF88FC007F607F3CFF80FC007FE0FF7EF\n      FC1FC007FE17F7EFFE3FFFFFFE03FFFFC7FF8000FF1FF00F807F0000FE1FE003\n      80070000FC1FC00180070000E007800180038001C00100008003800180010000\n      8001C003000000008001C003000000008000E007000000008001E00700000000\n      8001F00F00000000C003F00F00000001E007F81F00018001F807F81F80018003\n      FC0FFC3FC007C007FC1FFE7FF00FF01FF00F83C0FFFFFFFFC00303C0FFFF0000\n      80010240C0FF000080018000C00F000000000000C003000000000000C0030000\n      00000000C003000000000000C00300000000F00DC00300000000F80FC0030000\n      0000FC1F800100000001FC0F800100008001FC0FC0030000C003FC0FC0870000\n      E007F80FFBFF0001F01FFE1FFFFFFFFFC07FFFFFF83FF00F803FF01FF00FC007\n      001FE001E00380030001C001E001800100008001C001000000008001C0010000\n      00008001C0010000000080018001000000008001800100000000000180010000\n      00008003800100000000C007800000010000E00F800080010001F00FFE008003\n      E03FF88FFFC1E007FE7FFF8FFFF3F00F00000000000000000000000000000000\n      000000000000}\n  end\n  object menu: TPopupMenu\n    Images = images\n    OnPopup = menuPopup\n    Left = 40\n    object SelfTest1: TMenuItem\n      Caption = 'Self Test'\n      ImageIndex = 34\n      OnClick = SelfTest1Click\n    end\n    object Showbandwidthgraph1: TMenuItem\n      Caption = 'Show bandwidth graph'\n      OnClick = Showbandwidthgraph1Click\n    end\n    object Otheroptions1: TMenuItem\n      Caption = 'Other options'\n      object switchMode: TMenuItem\n        Caption = 'Switch to expert mode'\n        ShortCut = 116\n        OnClick = modeBtnClick\n      end\n      object Accounts1: TMenuItem\n        Caption = 'User accounts...'\n        ImageIndex = 29\n        ShortCut = 118\n        OnClick = Accounts1Click\n      end\n      object Shellcontextmenu1: TMenuItem\n        Caption = 'Integrate in shell context menu'\n        ImageIndex = 22\n        OnClick = Shellcontextmenu1Click\n      end\n      object AutocopyURLonadditionChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto-copy URL on addition'\n        Checked = True\n      end\n      object alwaysontopChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Always on top'\n        OnClick = alwaysontopChkClick\n      end\n      object sendHFSidentifierChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Send HFS identifier'\n        Checked = True\n      end\n      object persistentconnectionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Persistent connections'\n        Checked = True\n        OnClick = persistentconnectionsChkClick\n      end\n      object DMbrowserTplChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Specific HTML for download managers'\n        Checked = True\n      end\n      object Graphrefreshrate1: TMenuItem\n        Caption = 'Graph refresh rate...'\n        OnClick = Graphrefreshrate1Click\n      end\n      object MIMEtypes1: TMenuItem\n        Caption = 'MIME types...'\n        ImageIndex = 7\n        OnClick = MIMEtypes1Click\n      end\n      object Opendirectlyinbrowser1: TMenuItem\n        Caption = 'Open directly in browser...'\n        OnClick = Opendirectlyinbrowser1Click\n      end\n      object freeLoginChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Accept any login for unprotected resources'\n      end\n      object usecommentasrealmChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Use comment as realm'\n        Checked = True\n      end\n      object Loginrealm1: TMenuItem\n        Caption = 'Login realm...'\n        OnClick = Loginrealm1Click\n      end\n      object HintsfornewcomersChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Hints for newcomers'\n        Checked = True\n      end\n      object compressedbrowsingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Compressed browsing'\n        Checked = True\n      end\n      object modalOptionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Modal dialog for options'\n        Checked = True\n      end\n      object useISOdateChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Use ISO date format'\n        OnClick = useISOdateChkClick\n      end\n      object browseUsingLocalhostChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Browse using localhost'\n        Checked = True\n      end\n      object enableNoDefaultChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enable ~nodefault'\n      end\n      object preventStandbyChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Prevent system standby on network activity'\n      end\n      object Addicons1: TMenuItem\n        Caption = 'Add icons...'\n        OnClick = Addicons1Click\n      end\n      object Changeport1: TMenuItem\n        Caption = 'Change port...'\n        OnClick = Changeport1Click\n      end\n      object autoCommentChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Input comment on file addition'\n      end\n      object Defaultsorting1: TMenuItem\n        Caption = 'Default sorting'\n        object Name1: TMenuItem\n          Caption = 'Name'\n          Checked = True\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Name1Click\n        end\n        object Extension1: TMenuItem\n          Caption = 'Extension'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Extension1Click\n        end\n        object Size1: TMenuItem\n          Caption = 'Size'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Size1Click\n        end\n        object Time1: TMenuItem\n          Caption = 'Time'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Time1Click\n        end\n        object Hits1: TMenuItem\n          Caption = 'Hits'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Hits1Click\n        end\n      end\n      object Editeventscripts1: TMenuItem\n        Caption = 'Edit event scripts...'\n        ShortCut = 32885\n        OnClick = Editeventscripts1Click\n      end\n      object oemTarChk: TMenuItem\n        AutoCheck = True\n        Caption = 'OEM file names for TAR archives'\n      end\n    end\n    object HTMLtemplate1: TMenuItem\n      Caption = 'HTML template'\n      object Edit1: TMenuItem\n        Caption = 'Edit...'\n        ShortCut = 117\n        OnClick = Edit1Click\n      end\n      object Changefile1: TMenuItem\n        Caption = 'Change file...'\n        OnClick = Changefile1Click\n      end\n      object Changeeditor1: TMenuItem\n        Caption = 'Change editor...'\n        OnClick = Changeeditor1Click\n      end\n      object Restoredefault1: TMenuItem\n        Caption = 'Restore default'\n        OnClick = Restoredefault1Click\n      end\n      object enableMacrosChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enable macros'\n        Checked = True\n        OnClick = enableMacrosChkClick\n      end\n    end\n    object Upload2: TMenuItem\n      Caption = 'Upload'\n      object Howto1: TMenuItem\n        Caption = 'How to?'\n        OnClick = Howto1Click\n      end\n      object N22: TMenuItem\n        Caption = '-'\n      end\n      object deletePartialUploadsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Delete partial uploads'\n      end\n      object Renamepartialuploads1: TMenuItem\n        Caption = 'Rename partial uploads...'\n        OnClick = Renamepartialuploads1Click\n      end\n      object numberFilesOnUploadChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Number files on upload instead of overwriting'\n        Checked = True\n      end\n    end\n    object StartExit1: TMenuItem\n      Caption = 'Start/Exit'\n      object autocopyURLonstartChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto-copy URL on start'\n      end\n      object startminimizedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Start minimized'\n      end\n      object reloadonstartupChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Reload on startup VFS file previously open'\n        Checked = True\n      end\n      object saveTotalsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Save totals'\n        Checked = True\n      end\n      object autosaveVFSchk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto-save VFS on exit'\n      end\n      object Autoclose1: TMenuItem\n        Caption = 'Auto-close'\n        object Nodownloadtimeout1: TMenuItem\n          Caption = 'No download timeout...'\n          OnClick = Nodownloadtimeout1Click\n        end\n      end\n      object only1instanceChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Only 1 instance'\n        Checked = True\n      end\n      object confirmexitChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Confirm exit'\n      end\n      object findExtOnStartupChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Find external address on startup'\n        OnClick = findExtOnStartupChkClick\n      end\n      object RunHFSwhenWindowsstarts1: TMenuItem\n        Caption = 'Run HFS when Windows starts'\n        OnClick = RunHFSwhenWindowsstarts1Click\n      end\n      object trayInsteadOfQuitChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Minimize to tray clicking the close button [ X ]'\n      end\n      object quitWithoutAskingToSaveChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Force quitting (no dialogs)'\n      end\n    end\n    object VirtualFileSystem1: TMenuItem\n      Caption = 'Virtual File System'\n      object foldersbeforeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Folders before'\n        Checked = True\n        OnClick = foldersbeforeChkClick\n      end\n      object linksBeforeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Links before'\n        Checked = True\n      end\n      object usesystemiconsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Use system icons'\n        Checked = True\n      end\n      object loadSingleCommentsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Load single comment files'\n        Checked = True\n      end\n      object supportDescriptionChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Support DESCRIPT.ION'\n        Checked = True\n      end\n      object oemForIonChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Use OEM for DESCRIPT.ION'\n      end\n      object recursiveListingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enable recursive listing'\n        Checked = True\n      end\n      object deleteDontAskChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Skip confirmation on deletion'\n      end\n      object listfileswithhiddenattributeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'List files with <hidden> attribute'\n      end\n      object listfileswithsystemattributeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'List files with <system> attribute'\n      end\n      object hideProtectedItemsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'List protected items only for allowed users'\n      end\n      object Iconmasks1: TMenuItem\n        Caption = 'Icon masks...'\n        OnClick = Iconmasks1Click\n      end\n      object Flagfilesaddedrecently1: TMenuItem\n        Caption = 'Flag files added recently...'\n        OnClick = Flagfilesaddedrecently1Click\n      end\n      object Autosaveevery1: TMenuItem\n        Caption = 'Auto-save every...'\n        OnClick = Autosaveevery1Click\n      end\n      object backupSavingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Backup on save'\n        Checked = True\n      end\n      object Addingfolder1: TMenuItem\n        Caption = 'Adding folder'\n        object askFolderKindChk: TMenuItem\n          Caption = 'Ask'\n          Checked = True\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = askFolderKindChkClick\n        end\n        object defaultToVirtualChk: TMenuItem\n          Caption = 'Default to virtual-folder'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = defaultToVirtualChkClick\n        end\n        object defaultToRealChk: TMenuItem\n          Caption = 'Default to real-folder'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = defaultToRealChkClick\n        end\n      end\n      object N18: TMenuItem\n        Caption = '-'\n      end\n      object Resetfileshits1: TMenuItem\n        Caption = 'Reset files hits'\n        OnClick = Resetfileshits1Click\n      end\n      object Resettotals1: TMenuItem\n        Caption = 'Reset totals'\n        OnClick = Resettotals1Click\n      end\n    end\n    object Limits1: TMenuItem\n      Caption = 'Limits'\n      object Speedlimit1: TMenuItem\n        Caption = 'Speed limit (disabled)...'\n        OnClick = Speedlimit1Click\n      end\n      object Speedlimitforsingleaddress1: TMenuItem\n        Caption = 'Speed limit for single address...'\n        OnClick = Speedlimitforsingleaddress1Click\n      end\n      object Pausestreaming1: TMenuItem\n        AutoCheck = True\n        Caption = 'Pause streaming'\n        Hint = 'Sets speed limit temporarily to zero'\n        OnClick = Pausestreaming1Click\n      end\n      object maxDLs1: TMenuItem\n        Caption = 'Max simultaneous downloads...'\n        OnClick = maxDLs1Click\n      end\n      object maxDLsIP1: TMenuItem\n        Caption = 'Max simultaneous downloads from single address...'\n        OnClick = maxDLsIP1Click\n      end\n      object maxIPs1: TMenuItem\n        Caption = 'Max simultaneous addresses...'\n        OnClick = maxIPs1Click\n      end\n      object maxIPsDLing1: TMenuItem\n        Caption = 'Max simultaneous addresses downloading...'\n        OnClick = maxIPsDLing1Click\n      end\n      object Maxconnections1: TMenuItem\n        Caption = 'Max connections...'\n        OnClick = Maxconnections1Click\n      end\n      object Maxconnectionsfromsingleaddress1: TMenuItem\n        Caption = 'Max connections from single address...'\n        OnClick = Maxconnectionsfromsingleaddress1Click\n      end\n      object Connectionsinactivitytimeout1: TMenuItem\n        Caption = 'Connections inactivity timeout...'\n        OnClick = Connectionsinactivitytimeout1Click\n      end\n      object BannedIPaddresses1: TMenuItem\n        Caption = 'Bans...'\n        ImageIndex = 25\n        OnClick = BannedIPaddresses1Click\n      end\n      object Minimumdiskspace1: TMenuItem\n        Caption = 'Minimum disk space...'\n        OnClick = Minimumdiskspace1Click\n      end\n      object preventLeechingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Prevent leeching (download accelerators)'\n        Checked = True\n      end\n      object Allowedreferer1: TMenuItem\n        Caption = 'Allowed referer...'\n        OnClick = Allowedreferer1Click\n      end\n      object stopSpidersChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Stop spiders'\n        Checked = True\n      end\n    end\n    object Flashtaskbutton1: TMenuItem\n      Caption = 'Flash taskbutton'\n      object onDownloadChk: TMenuItem\n        AutoCheck = True\n        Caption = 'On download'\n        GroupIndex = 1\n        RadioItem = True\n        OnClick = onDownloadChkClick\n      end\n      object onconnectionChk: TMenuItem\n        AutoCheck = True\n        Caption = 'On connection'\n        GroupIndex = 1\n        RadioItem = True\n        OnClick = onconnectionChkClick\n      end\n      object never1: TMenuItem\n        Caption = 'Never'\n        GroupIndex = 1\n        RadioItem = True\n        OnClick = never1Click\n      end\n      object N6: TMenuItem\n        Caption = '-'\n        GroupIndex = 1\n      end\n      object beepChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Also beep'\n        GroupIndex = 1\n      end\n    end\n    object Fingerprints1: TMenuItem\n      Caption = 'Fingerprints'\n      object fingerprintsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enabled'\n        Checked = True\n      end\n      object saveNewFingerprintsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Save new calculated fingerprints'\n        OnClick = saveNewFingerprintsChkClick\n      end\n      object Createfingerprintonaddition1: TMenuItem\n        Caption = 'Create fingerprint on file addition...'\n        OnClick = Createfingerprintonaddition1Click\n      end\n    end\n    object trayicons1: TMenuItem\n      Caption = 'Tray icons'\n      object MinimizetotrayChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Minimize to tray'\n        Checked = True\n      end\n      object showmaintrayiconChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Show main tray icon'\n        Checked = True\n        OnClick = showmaintrayiconChkClick\n      end\n      object hetrayiconshows1: TMenuItem\n        Caption = 'Main icon shows'\n        object Numberofcurrentconnections1: TMenuItem\n          AutoCheck = True\n          Caption = 'Number of current connections'\n          Checked = True\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Numberofcurrentconnections1Click\n        end\n        object Numberofloggeddownloads1: TMenuItem\n          AutoCheck = True\n          Caption = 'Number of logged downloads'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Numberofloggeddownloads1Click\n        end\n        object Numberofloggeduploads1: TMenuItem\n          Caption = 'Number of logged uploads'\n          GroupIndex = 1\n          OnClick = Numberofloggeduploads1Click\n        end\n        object Numberofloggedhits1: TMenuItem\n          Caption = 'Number of logged hits'\n          GroupIndex = 1\n          OnClick = Numberofloggedhits1Click\n        end\n        object NumberofdifferentIPaddresses1: TMenuItem\n          Caption = 'Number of different IP addresses now connected'\n          GroupIndex = 1\n          OnClick = NumberofdifferentIPaddresses1Click\n        end\n        object NumberofdifferentIPaddresseseverconnected1: TMenuItem\n          Caption = 'Number of different IP addresses ever connected'\n          GroupIndex = 1\n          OnClick = NumberofdifferentIPaddresseseverconnected1Click\n        end\n      end\n      object traymessage1: TMenuItem\n        Caption = 'Tray message...'\n        OnClick = traymessage1Click\n      end\n      object N8: TMenuItem\n        Caption = '-'\n      end\n      object trayfordownloadChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Tray icon for each download'\n        Checked = True\n      end\n    end\n    object IPaddress1: TMenuItem\n      AutoLineReduction = maManual\n      Caption = '&IP address'\n      object hisIPaddressisusedforURLbuilding1: TMenuItem\n        Caption = 'This IP address is used only for URL building'\n        Enabled = False\n      end\n      object N20: TMenuItem\n        Caption = '-'\n      end\n      object N15: TMenuItem\n        Caption = '-'\n      end\n      object Custom1: TMenuItem\n        Caption = 'Custom...'\n        OnClick = Custom1Click\n      end\n      object noPortInUrlChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Don'#39't include port in URL'\n        OnClick = noPortInUrlChkClick\n      end\n      object Findexternaladdress1: TMenuItem\n        Caption = 'Find external address'\n        OnClick = Findexternaladdress1Click\n      end\n      object searchbetteripChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Constantly search for better address'\n        Checked = True\n      end\n    end\n    object Acceptconnectionson1: TMenuItem\n      Caption = 'Accept connections on'\n      object Anyaddress1: TMenuItem\n        Caption = 'Any address'\n        OnClick = Anyaddress1Click\n      end\n    end\n    object DynamicDNSupdater1: TMenuItem\n      Caption = 'Dynamic DNS updater'\n      object CJBtemplate1: TMenuItem\n        Caption = 'CJB wizard...'\n        OnClick = CJBtemplate1Click\n      end\n      object NoIPtemplate1: TMenuItem\n        Caption = 'No-IP wizard...'\n        OnClick = NoIPtemplate1Click\n      end\n      object DynDNStemplate1: TMenuItem\n        Caption = 'DynDNS wizard...'\n        OnClick = DynDNStemplate1Click\n      end\n      object N21: TMenuItem\n        Caption = '-'\n      end\n      object Custom2: TMenuItem\n        Caption = 'Custom...'\n        OnClick = Custom2Click\n      end\n      object Seelastserverresponse1: TMenuItem\n        Caption = 'See last server response...'\n        OnClick = Seelastserverresponse1Click\n      end\n      object Disable1: TMenuItem\n        Caption = 'Disable'\n        OnClick = Disable1Click\n      end\n    end\n    object URLencoding1: TMenuItem\n      Caption = 'URL encoding'\n      object encodeSpacesChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Encode spaces'\n        Checked = True\n      end\n      object encodenonasciiChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Encode non-ASCII characters'\n      end\n      object pwdInPagesChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Include password in pages (for download managers)'\n      end\n      object httpsUrlsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'URLs starting with https instead of http'\n      end\n    end\n    object Debug1: TMenuItem\n      Caption = 'De&bug'\n      object resetOptions1: TMenuItem\n        Caption = 'Temporarily reset options'\n        OnClick = resetOptions1Click\n      end\n      object dumpTrafficChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Dump traffic'\n      end\n      object Showcustomizedoptions1: TMenuItem\n        Caption = 'Show customized options...'\n        OnClick = Showcustomizedoptions1Click\n      end\n      object highSpeedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Experimental high speed handling'\n        Checked = True\n      end\n      object macrosLogChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enable macros.log'\n      end\n      object Appendmacroslog1: TMenuItem\n        AutoCheck = True\n        Caption = 'Append macros.log'\n      end\n      object Runscript1: TMenuItem\n        Caption = 'Run script...'\n        OnClick = Runscript1Click\n      end\n      object showMemUsageChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Show memory usage'\n      end\n      object noContentdispositionChk: TMenuItem\n        AutoCheck = True\n        Caption = 'No Content-disposition'\n      end\n    end\n    object Updates1: TMenuItem\n      Caption = 'Updates'\n      object Checkforupdates1: TMenuItem\n        Caption = 'Check for news/updates'\n        OnClick = Checkforupdates1Click\n      end\n      object updateDailyChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto check every day'\n        Checked = True\n      end\n      object keepBakUpdatingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Keep old version'\n        Checked = True\n      end\n      object testerUpdatesChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Updates from official to beta versions'\n      end\n      object updateAutomaticallyChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Update automatically'\n      end\n      object delayUpdateChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Delay update to serve last requests'\n      end\n      object Reverttopreviousversion1: TMenuItem\n        Caption = 'Revert to previous version'\n        OnClick = Reverttopreviousversion1Click\n      end\n    end\n    object Donate1: TMenuItem\n      Caption = 'Donate!'\n      ImageIndex = 39\n      OnClick = Donate1Click\n    end\n    object N1: TMenuItem\n      Caption = '-'\n    end\n    object Addfiles2: TMenuItem\n      Caption = 'Add files...'\n      OnClick = Addfiles1Click\n    end\n    object Addfolder2: TMenuItem\n      Caption = 'Add folder from disk...'\n      OnClick = Addfolder1Click\n    end\n    object Loadfilesystem1: TMenuItem\n      Caption = 'Load file system...'\n      ImageIndex = 8\n      ShortCut = 16463\n      OnClick = Loadfilesystem1Click\n    end\n    object Loadrecentfiles1: TMenuItem\n      Caption = 'Load recent files'\n      Visible = False\n    end\n    object Savefilesystem1: TMenuItem\n      Caption = 'Save file system...'\n      ImageIndex = 18\n      ShortCut = 16467\n      OnClick = Savefilesystem1Click\n    end\n    object Clearfilesystem1: TMenuItem\n      Caption = 'Clear file system'\n      ImageIndex = 21\n      OnClick = Clearfilesystem1Click\n    end\n    object N19: TMenuItem\n      Caption = '-'\n    end\n    object Saveoptions1: TMenuItem\n      Caption = 'Save options'\n      object tofile1: TMenuItem\n        Caption = 'to file'\n        ImageIndex = 18\n        OnClick = tofile1Click\n      end\n      object toregistrycurrentuser1: TMenuItem\n        Caption = 'to registry (current user)'\n        ImageIndex = 20\n        OnClick = tofile1Click\n      end\n      object toregistryallusers1: TMenuItem\n        Caption = 'to registry (all users)'\n        ImageIndex = 20\n        OnClick = tofile1Click\n      end\n      object N4: TMenuItem\n        Caption = '-'\n      end\n      object Clearoptionsandquit1: TMenuItem\n        Caption = 'Clear options and quit'\n        ImageIndex = 21\n        OnClick = Clearoptionsandquit1click\n      end\n      object N10: TMenuItem\n        Caption = '-'\n      end\n      object autoSaveOptionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto-save options'\n        Checked = True\n      end\n    end\n    object N12: TMenuItem\n      Caption = '-'\n    end\n    object Help1: TMenuItem\n      Caption = 'Help'\n      Default = True\n      object Introduction1: TMenuItem\n        Caption = 'Introduction'\n        OnClick = Introduction1Click\n      end\n      object Guide1: TMenuItem\n        Caption = 'Full Guide'\n        OnClick = Guide1Click\n      end\n      object FAQ1: TMenuItem\n        Caption = 'F.A.Q.'\n        OnClick = FAQ1Click\n      end\n    end\n    object Weblinks1: TMenuItem\n      Caption = 'Web links'\n      object Officialwebsite1: TMenuItem\n        Caption = 'Official website'\n        ImageIndex = 23\n        OnClick = Officialwebsite1Click\n      end\n      object Forum1: TMenuItem\n        Caption = 'Forum'\n        OnClick = Forum1Click\n      end\n      object License1: TMenuItem\n        Caption = 'License'\n        OnClick = License1Click\n      end\n    end\n    object UninstallHFS1: TMenuItem\n      Caption = 'Uninstall HFS'\n      OnClick = UninstallHFS1Click\n    end\n    object About1: TMenuItem\n      Caption = 'About...'\n      ImageIndex = 10\n      OnClick = About1Click\n    end\n    object N13: TMenuItem\n      Caption = '-'\n    end\n    object SwitchON1: TMenuItem\n      Caption = 'Switch ON'\n      ImageIndex = 4\n      ShortCut = 115\n      OnClick = SwitchON1Click\n    end\n    object Restore1: TMenuItem\n      Caption = 'Restore'\n      OnClick = Restore1Click\n    end\n    object Exit1: TMenuItem\n      Caption = 'Exit'\n      OnClick = Exit1Click\n    end\n  end\n  object connmenu: TPopupMenu\n    Images = images\n    OnPopup = connmenuPopup\n    Left = 248\n    Top = 320\n    object Kickconnection1: TMenuItem\n      Caption = 'Kick connection'\n      OnClick = Kickconnection1Click\n    end\n    object KickIPaddress1: TMenuItem\n      Caption = 'Kick IP address'\n      OnClick = KickIPaddress1Click\n    end\n    object Kickallconnections1: TMenuItem\n      Caption = 'Kick all connections'\n      OnClick = Kickallconnections1Click\n    end\n    object Kickidleconnections1: TMenuItem\n      Caption = 'Kick idle connections'\n      OnClick = Kickidleconnections1Click\n    end\n    object BanIPaddress1: TMenuItem\n      Caption = 'Ban IP address'\n      ImageIndex = 25\n      OnClick = BanIPaddress1Click\n    end\n    object Pause1: TMenuItem\n      Caption = 'Pause (download-only)'\n      OnClick = Pause1Click\n    end\n    object N2: TMenuItem\n      Caption = '-'\n    end\n    object Viewhttprequest1: TMenuItem\n      Caption = 'View http request'\n      OnClick = Viewhttprequest1Click\n    end\n    object trayiconforeachdownload1: TMenuItem\n      Caption = 'Tray icon for each download'\n      Checked = True\n      OnClick = trayiconforeachdownload1Click\n    end\n  end\n  object timer: TTimer\n    Enabled = False\n    Interval = 100\n    OnTimer = timerEvent\n    Left = 48\n    Top = 112\n  end\n  object appEvents: TApplicationEvents\n    OnMinimize = appEventsMinimize\n    OnRestore = appEventsRestore\n    OnShowHint = appEventsShowHint\n    Left = 592\n  end\n  object logmenu: TPopupMenu\n    Images = images\n    OnPopup = logmenuPopup\n    Left = 352\n    Top = 159\n    object Logwhat1: TMenuItem\n      Caption = 'Log what'\n      object LogtimeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Time'\n        Checked = True\n      end\n      object LogdateChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Date'\n      end\n      object N9: TMenuItem\n        AutoCheck = True\n        Caption = '-'\n      end\n      object logBrowsingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Browsing'\n        Checked = True\n      end\n      object LogiconsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Icons'\n      end\n      object logProgressChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Progress'\n      end\n      object logBannedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Banned'\n      end\n      object logOnlyServedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Only served requests'\n        Checked = True\n      end\n      object N5: TMenuItem\n        Caption = '-'\n      end\n      object logOtherEventsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Other events'\n        Checked = True\n        Hint = 'Like dynamic dns updating...'\n      end\n      object N16: TMenuItem\n        AutoCheck = True\n        Caption = '-'\n      end\n      object logconnectionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Connections'\n      end\n      object logDisconnectionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Disconnections'\n      end\n      object logRequestsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Requests'\n        Checked = True\n      end\n      object DumprequestsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Requests dump'\n      end\n      object logRepliesChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Replies'\n      end\n      object logFulldownloadsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Full downloads'\n        Checked = True\n      end\n      object logUploadsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Uploads'\n        Checked = True\n      end\n      object logDeletionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Deletions'\n        Checked = True\n      end\n      object logBytesreceivedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Bytes received'\n      end\n      object logBytessentChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Bytes sent'\n      end\n      object logServerstartChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Server start'\n      end\n      object logServerstopChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Server stop'\n      end\n    end\n    object logOnVideoChk: TMenuItem\n      AutoCheck = True\n      Caption = 'Log to screen'\n      Checked = True\n    end\n    object Logfile1: TMenuItem\n      Caption = 'Log to file...'\n      OnClick = Logfile1Click\n    end\n    object Maxlinesonscreen1: TMenuItem\n      Caption = 'Max lines on screen...'\n      OnClick = Maxlinesonscreen1Click\n    end\n    object Apachelogfileformat1: TMenuItem\n      Caption = 'Apache log file format...'\n      OnClick = Apachelogfileformat1Click\n    end\n    object Donotlogaddress1: TMenuItem\n      Caption = 'Do not log address...'\n      OnClick = Donotlogaddress1Click\n    end\n    object Dontlogsomefiles1: TMenuItem\n      Caption = 'Do not log some files...'\n      OnClick = Dontlogsomefiles1Click\n    end\n    object Address2name1: TMenuItem\n      Caption = 'Assign name to address...'\n      OnClick = Address2name1Click\n    end\n    object Font1: TMenuItem\n      Caption = 'Font...'\n      OnClick = Font1Click\n    end\n    object tabOnLogFileChk: TMenuItem\n      AutoCheck = True\n      Caption = 'Tabbed instead of multi-line for the log file'\n    end\n    object N3: TMenuItem\n      Caption = '-'\n    end\n    object Readonly1: TMenuItem\n      Caption = 'Read-only'\n      OnClick = Readonly1Click\n    end\n    object Banthisaddress1: TMenuItem\n      Caption = 'Ban this address'\n      ImageIndex = 11\n      OnClick = Banthisaddress1Click\n    end\n    object Copy1: TMenuItem\n      Caption = 'Copy'\n      ImageIndex = 16\n      OnClick = Copy1Click\n    end\n    object Clear1: TMenuItem\n      Caption = 'Clear'\n      ImageIndex = 21\n      OnClick = Clear1Click\n    end\n    object Clearandresettotals1: TMenuItem\n      Caption = 'Clear and reset totals'\n      OnClick = Clearandresettotals1Click\n    end\n    object Save1: TMenuItem\n      Caption = 'Save'\n      ImageIndex = 18\n      OnClick = Save1Click\n    end\n    object Saveas1: TMenuItem\n      Caption = 'Save as...'\n      ImageIndex = 18\n      OnClick = Saveas1Click\n    end\n    object N24: TMenuItem\n      Caption = '-'\n    end\n    object Addresseseverconnected1: TMenuItem\n      Caption = 'Addresses ever connected...'\n      OnClick = Addresseseverconnected1Click\n    end\n  end\n  object numbers: TImageList\n    DrawingStyle = dsTransparent\n    Height = 6\n    Width = 4\n    Left = 216\n    Top = 152\n    Bitmap = {\n      494C01010B000E00040004000600FFFFFFFFFF10FFFFFFFFFFFFFFFF424D3600\n      0000000000003600000028000000100000001200000001002000000000008004\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000424D3E000000000000003E000000\n      2800000010000000120000000100010000000000480000000000000000000000\n      000000000000000000000000FFFFFF0011700000555000005DB0000011B00000\n      5550000011D00000D11B0000D55B00001D110000517B0000575D000091110000\n      1B1100005B7500005BBD00005BDB0000535D00001B1100000000000000000000\n      0000000000000000000000000000}\n  end\n  object graphMenu: TPopupMenu\n    Left = 504\n    Top = 48\n    object Reset1: TMenuItem\n      Caption = 'Reset'\n      OnClick = Reset1Click\n    end\n    object Hide: TMenuItem\n      Caption = 'Hide'\n      OnClick = HideClick\n    end\n  end\nend\n", "\ufeff{\nCopyright (C) 2002-2014  Massimo Melina (www.rejetto.com)\n\nThis file is part of HFS ~ HTTP File Server.\n\n    HFS is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    HFS is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with HFS; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n}\n{$A+,B-,C+,E-,F-,G+,H+,I-,J+,K-,L+,M-,N+,O+,P+,Q-,R-,S-,T-,U-,V+,X+,Y+,Z1}\n{$INCLUDE defs.inc }\n\nunit main;\n\ninterface\n\nuses\n  // delphi libs\n  Windows, Messages, SysUtils, Forms, Menus, Graphics, Controls, ComCtrls, Dialogs, math,\n  registry, ExtCtrls, shellapi, ImgList, ToolWin, StdCtrls, strutils, AppEvnts, types,\n  winsock, clipbrd, shlobj, activex, Buttons, FileCtrl, dateutils, iniFiles, Classes,\n  System.ImageList, system.Generics.Collections, Vcl.Imaging.GIFImg,\n  // 3rd part libs. ensure you have all of these, the same version reported in dev-notes.txt\n  OverbyteIcsWSocket, OverbyteIcsHttpProt, regexpr, OverbyteIcsZLibHigh, OverbyteIcsZLibObj,\n  // rejetto libs\n  HSlib, traylib, monoLib, progFrmLib, classesLib;\n\nconst\n  VERSION = '2.4 beta1';\n  VERSION_BUILD = '303';\n  VERSION_STABLE = {$IFDEF STABLE } TRUE {$ELSE} FALSE {$ENDIF};\n  CURRENT_VFS_FORMAT :integer = 1;\n  CRLF = #13#10;\n  TAB = #9;\n  BAK_EXT = '.bak';\n  CORRUPTED_EXT = '.corrupted';\n  COMMENT_FILE_EXT = '.comment';\n  VFS_FILE_IDENTIFIER = 'HFS.VFS';\n  CFG_KEY = 'Software\\rejetto\\HFS';\n  CFG_FILE = 'hfs.ini';\n  TPL_FILE = 'hfs.tpl';\n  IPS_FILE = 'hfs.ips.txt';\n  VFS_TEMP_FILE = '~temp.vfs';\n  HFS_HTTP_AGENT = 'HFS/'+VERSION;\n  COMMENTS_FILE = 'hfs.comments.txt';\n  DESCRIPT_ION = 'descript.ion';\n  DIFF_TPL_FILE = 'hfs.diff.tpl';\n  FILELIST_TPL_FILE = 'hfs.filelist.tpl';\n  EVENTSCRIPTS_FILE = 'hfs.events';\n  MACROS_LOG_FILE = 'macros-log.html';\n  PREVIOUS_VERSION = 'hfs.old.exe';\n  SESSION_COOKIE = 'HFS_SID_';\n  PROTECTED_FILES_MASK = 'hfs.*;*.htm*;descript.ion;*.comment;*.md5;*.corrupted;*.lnk';\n  G_VAR_PREFIX = '#';\n  HOURS = 24;\n  MINUTES = HOURS*60;\n  SECONDS = MINUTES*60; // Tdatetime * SECONDS = time in seconds\n  ETA_FRAME = 5; // time frame for ETA (in seconds)\n  DOWNLOAD_MIN_REFRESH_TIME :Tdatetime = 1/3/SECONDS; // 3 Hz\n  BYTES_GROUPING_THRESHOLD :Tdatetime = 1/SECONDS; // group bytes in log\n  IPS_THRESHOLD = 50;  // used to avoid an external file for few IPs (ipsEverConnected list)\n  STATUSBAR_REFRESH = 10; // tenth of second\n  MAX_RECENT_FILES = 5;\n  MANY_ITEMS_THRESHOLD = 1000;\n  KILO = 1024;\n  MEGA = KILO*KILO;\n  COMPRESSION_THRESHOLD = 10*KILO; // if more than X bytes, VFS files are compressed\n  STARTING_SNDBUF = 32000;\n  YESNO :array [boolean] of string=('no','yes');\n  DEFAULT_MIME = 'application/octet-stream';\n  IP_SERVICES_URL = 'http://hfsservice.rejetto.com/ipservices.php';\n  SELF_TEST_URL = 'http://hfstest.rejetto.com/';\n\n  USER_ANONYMOUS = '@anonymous';\n  USER_ANYONE = '@anyone';\n  USER_ANY_ACCOUNT = '@any account';\n\n  ALWAYS_ON_WEB_SERVER = 'google.com';\n  ADDRESS_COLOR = clGreen;\n  BG_ERROR = $BBBBFF;\n  ENCODED_TABLE_HEADER = 'this is an encoded table'+CRLF;\n\n  DEFAULT_MIME_TYPES: array [0..21] of string = (\n    '*.htm;*.html', 'text/html',\n    '*.jpg;*.jpeg;*.jpe', 'image/jpeg',\n    '*.gif', 'image/gif',\n    '*.png', 'image/png',\n    '*.bmp', 'image/bmp',\n    '*.ico', 'image/x-icon',\n    '*.mpeg;*.mpg;*.mpe', 'video/mpeg',\n    '*.avi', 'video/x-msvideo',\n    '*.txt', 'text/plain',\n    '*.css', 'text/css',\n    '*.js',  'text/javascript'\n  );\n\n  ICONMENU_NEW = 1;\n\n  ICON_UNIT = 31;\n  ICON_ROOT = 1;\n  ICON_LINK = 4;\n  ICON_FILE = 37;\n  ICON_FOLDER = 6;\n  ICON_REAL_FOLDER = 19;\n  ICON_LOCK = 12;\n  ICON_EASY = 29;\n  ICON_EXPERT = 35;\n\n  USER_ICON_MASKS_OFS = 10000;\n\nresourcestring\n  S_PORT_LABEL = 'Port: %s';\n  S_PORT_ANY = 'any';\n  DISABLED = 'disabled';\n  // messages\n  MSG_UNPROTECTED_LINKS = 'Links are NOT actually protected.'\n    +#13'The feature is there to be used with the \"list protected items only...\" option.'\n    +#13'Continue?';\n  MSG_SAME_NAME ='An item with the same name is already present in this folder.'\n    +#13'Continue?';\n  MSG_OPTIONS_SAVED = 'Options saved';\n  MSG_SOME_LOCKED = 'Some items were not affected because locked';\n  MSG_ITEM_LOCKED = 'The item is locked';\n  MSG_INVALID_VALUE = 'Invalid value';\n  MSG_EMPTY_NO_LIMIT = 'Leave blank to get no limits.';\n  MSG_ADDRESSES_EXCEED = 'The following addresses exceed the limit:'#13'%s';\n  MSG_NO_TEMP = 'Cannot save temporary file';\n  MSG_ERROR_REGISTRY = 'Can''t write to registry.'\n    +#13'You may lack necessary rights.';\n  MSG_MANY_ITEMS = 'You are putting many files.'\n    +#13'Try using real folders instead of virtual folders.'\n    +#13'Read documentation or ask on the forum for help.';\n  MSG_ADD_TO_HFS = '\"Add to HFS\" has been added to your Window''s Explorer right-click menu.';\n  MSG_SINGLE_INSTANCE = 'Sorry, this feature only works with the \"Only 1 instance\" option enabled.'\n    +#13#13'You can find this option under Menu -> Start/Exit'\n    +#13'(only in expert mode)';\n  MSG_ENABLED =   'Option enabled';\n  MSG_DISABLED = 'Option disabled';\n  MSG_COMM_ERROR = 'Network error. Request failed.';\n  MSG_DDNS_badauth='invalid user/password';\n  MSG_DDNS_notfqdn='incomplete hostname, required form aaa.bbb.com';\n  MSG_DDNS_nohost='specified hostname does not exist';\n  MSG_DDNS_notyours='specified hostname belongs to another username';\n  MSG_DDNS_numhost='too many or too few hosts found';\n  MSG_DDNS_abuse='specified hostname is blocked for update abuse';\n  MSG_DDNS_dnserr='server error';\n  MSG_DDNS_911='server error';\n  MSG_DDNS_notdonator='an option specified requires payment';\n  MSG_DDNS_badagent='banned client';\n\ntype\n  Pboolean = ^boolean;\n\n  TfileAttribute = (\n    FA_FOLDER,       // folder kind\n    FA_VIRTUAL,      // does not exist on disc\n    FA_ROOT,         // only the root item has this attribute\n    FA_BROWSABLE,    // permit listing of this folder (not recursive, only dir)\n    FA_HIDDEN,       // hidden iterms won't be shown to browsers (not recursive)\n    { no more used attributes have to stay for backward compatibility with\n    { VFS files }\n    FA_NO_MORE_USED1,\n  \tFA_NO_MORE_USED2,\n    FA_TEMP,            // this is a temporary item and is not part of the VFS\n    FA_HIDDENTREE,      // recursive hidden\n    FA_LINK,            // redirection\n    FA_UNIT,            // logical unit (drive)\n    FA_VIS_ONLY_ANON,   // visible only to anonymous users [no more used]\n    FA_DL_FORBIDDEN,    // forbid download (not recursive)\n    FA_HIDE_EMPTY_FOLDERS,  // (recursive)\n    FA_DONT_COUNT_AS_DL,    // (not recursive)\n    FA_SOLVED_LNK,\n    FA_HIDE_EXT,       // (recursive)\n    FA_DONT_LOG,       // (recursive)\n    FA_ARCHIVABLE      // (recursive)\n  );\n  TfileAttributes = set of TfileAttribute;\n\n  Tfile = class;\n  TconnData = class;\n\n  TfileCallbackReturn = set of (FCB_NO_DEEPER, FCB_DELETE, FCB_RECALL_AFTER_CHILDREN); // use FCB_* flags\n\n  // returning FALSE stops recursion\n  TfileCallback = function(f:Tfile; childrenDone:boolean; par, par2:integer):TfileCallbackReturn;\n\n  TfileAction = (FA_ACCESS, FA_DELETE, FA_UPLOAD);\n\n  Tfile = class (Tobject)\n  private\n    locked: boolean;\n    FDLcount: integer;\n    function  getParent():Tfile;\n    function  getDLcount():integer;\n    procedure setDLcount(i:integer);\n    function  getDLcountRecursive():integer;\n  public\n    name, comment, user, pwd, lnk: string;\n    resource: string;  // link to physical file/folder; URL for links\n    flags: TfileAttributes;\n    node: Ttreenode;\n    size: int64; // -1 is NULL\n    atime,            // when was this file added to the VFS ?\n    mtime: Tdatetime; // modified time, read from disk\n    icon: integer;\n    accounts: array [TfileAction] of TStringDynArray;\n    filesFilter, foldersFilter, realm, diffTpl,\n    defaultFileMask, dontCountAsDownloadMask, uploadFilterMask: string;\n    constructor create(fullpath:string);\n    constructor createTemp(fullpath:string);\n    constructor createVirtualFolder(name:string);\n    constructor createLink(name:string);\n    property  parent:Tfile read getParent;\n    property  DLcount:integer read getDLcount write setDLcount;\n    function  toggle(att:TfileAttribute):boolean;\n    function  isFolder():boolean; inline;\n    function  isFile():boolean; inline;\n    function  isFileOrFolder():boolean; inline;\n    function  isRealFolder():boolean; inline;\n    function  isVirtualFolder():boolean; inline;\n    function  isEmptyFolder(cd:TconnData=NIL):boolean;\n    function  isRoot():boolean; inline;\n    function  isLink():boolean; inline;\n    function  isTemp():boolean; inline;\n    function  isNew():boolean;\n    function  isDLforbidden():boolean;\n    function  url(fullEncode:boolean=FALSE):string;\n    function  relativeURL(fullEncode:boolean=FALSE):string;\n    function  pathTill(root:Tfile=NIL; delim:char='\\'):string;\n    function  parentURL():string;\n    function  fullURL(ip, user, pwd:string):string; overload;\n    function  fullURL(ip:string=''):string; overload;\n    procedure setupImage(newIcon:integer); overload;\n    procedure setupImage(); overload;\n    function  getAccountsFor(action:TfileAction; specialUsernames:boolean=FALSE; outInherited:Pboolean=NIL):TstringDynArray;\n    function  accessFor(username, password:string):boolean; overload;\n    function  accessFor(cd:TconnData):boolean; overload;\n    function  hasRecursive(attributes: TfileAttributes; orInsteadOfAnd:boolean=FALSE; outInherited:Pboolean=NIL):boolean; overload;\n    function  hasRecursive(attribute: TfileAttribute; outInherited:Pboolean=NIL):boolean; overload;\n    function  getSystemIcon():integer;\n    function  getIconForTreeview():integer;\n    function  getShownRealm():string;\n    function  getFolder():string;\n    function  getRecursiveFileMask():string;\n    function  shouldCountAsDownload():boolean;\n    function  getDefaultFile():Tfile;\n    procedure recursiveApply(callback:TfileCallback; par:integer=0; par2:integer=0);\n    procedure getFiltersRecursively(var files,folders:string);\n    function  diskfree():int64;\n    function  same(f:Tfile):boolean;\n    procedure setName(name:string);\n    procedure setResource(res:string);\n    function  getDynamicComment(skipParent:boolean=FALSE):string;\n    procedure setDynamicComment(cmt:string);\n    function  getRecursiveDiffTplAsStr(outInherited:Pboolean=NIL; outFromDisk:Pboolean=NIL):string;\n    // locking prevents modification of all its ancestors and descendants\n    procedure lock();\n    procedure unlock();\n    function  isLocked():boolean;\n    end; // Tfile\n\n  Paccount = ^Taccount;\n\tTaccount = record   // user/pass profile\n    user, pwd, redir, notes: string;\n    wasUser: string; // used in user renaming panel\n    enabled, noLimits, group: boolean;\n    link: TStringDynArray;\n    end;\n  Taccounts = array of Taccount;\n\n  TfilterMethod = function(self:Tobject):boolean;\n\n  Thelp = ( HLP_NONE, HLP_TPL );\n\n  TdownloadingWhat = ( DW_UNK, DW_FILE, DW_FOLDERPAGE, DW_ICON, DW_ERROR, DW_ARCHIVE );\n\n  TpreReply =  (PR_NONE, PR_BAN, PR_OVERLOAD);\n\n  TuploadResult = record\n    fn, reason:string;\n    speed:integer;\n    size: int64;\n    end;\n\n  Tsession = class\n    vars: THashedStringList;\n    created, ttl, expires: Tdatetime;\n  public\n    id, user, ip, redirect: string;\n    constructor create(const sid:string='');\n    destructor Destroy; override;\n    procedure setVar(const k,v:string);\n    function getVar(const k:string):string;\n    procedure keepAlive();\n    procedure setTTL(t:Tdatetime);\n    end;\n  Tsessions = Tdictionary<string,Tsession>;\n\n  TconnData = class  // data associated to a client connection\n  private\n    FlastFile: Tfile;\n    procedure setLastFile(f:Tfile);\n  public\n    address: string;   // this is address shown in the log, and it is not necessarily the same as the socket address\n    averageSpeed: real;   { calculated on disconnection as bytesSent/totalTime. it is calculated also while\n                            sending and it is different from conn.speed because conn.speed is average speed\n                            in the last second, while averageSpeed is calculated on ETA_FRAME seconds }\n    time: Tdatetime;  // connection start time\n    requestTime: Tdatetime; // last request start time\n    tray: TmyTrayicon;\n    tray_ico: Ticon;\n    lastFN: string;\n    countAsDownload: boolean; // cache the value for the Tfile method\n    { cache User-Agent because often retrieved by connBox.\n    { this value is filled after the http request is complete (HE_REQUESTED),\n    { or before, during the request as we get a file (HE_POST_FILE). }\n    agent: string;\n    conn: ThttpConn;\n    account: Paccount;\n    user, pwd: string;\n    acceptedCredentials: boolean;\n    limiter: TspeedLimiter;\n    tpl: Ttpl;\n    deleting: boolean;      // don't use, this item is about to be discarded\n    nextDloadScreenUpdate: Tdatetime; // avoid too fast updating during download\n    disconnectReason: string;\n    error: string;         // error details\n    eta: record\n      idx: integer;   // estimation time (seconds)\n      data: array [0..ETA_FRAME-1] of real;  // accumulates speed data\n      result: Tdatetime;\n      end;\n    downloadingWhat: TdownloadingWhat;\n    preReply: TpreReply;\n    banReason: string;\n    lastBytesSent, lastBytesGot: int64; // used for print to log only the recent amount of bytes\n    lastActivityTime, fileXferStart: Tdatetime;\n    uploadSrc, uploadDest: string;\n    uploadFailed: string; // reason (empty on success)\n    uploadResults: array of TuploadResult;\n    disconnectAfterReply, logLaterInApache, dontLog, fullDLlogged: boolean;\n    bytesGotGrouping, bytesSentGrouping: record\n      bytes: integer;\n      since: Tdatetime;\n      end;\n    session: Tsession;\n    vars, // defined by {.set.}\n    urlvars,  // as $_GET in php\n    postVars  // as $_POST in php\n      : THashedStringList;\n    tplCounters: TstringToIntHash;\n    workaroundForIEutf8: (WI_toDetect, WI_yes, WI_no);\n    { here we put just a pointer because the file type would triplicate\n    { the size of this record, while it is NIL for most connections }\n    f: ^file; // uploading file handle\n\n    property lastFile:Tfile read FlastFile write setLastFile;\n    constructor create(conn:ThttpConn);\n    destructor Destroy; override;\n    procedure disconnect(reason:string);\n    procedure logout();\n    end; // Tconndata\n\n  Tautosave = record\n    every, minimum: integer; // in seconds\n    last: Tdatetime;\n    menu: Tmenuitem;\n    end;\n\n  TtreeNodeDynArray = array of TtreeNode;\n\n  TstringIntPairs = array of record\n    str:string;\n    int:integer;\n    end;\n    \n  TmainFrm = class(TForm)\n    filemenu: TPopupMenu;\n    newfolder1: TMenuItem;\n    images: TImageList;\n    Remove1: TMenuItem;\n    topToolbar: TToolBar;\n    startBtn: TToolButton;\n    ToolButton1: TToolButton;\n    menuBtn: TToolButton;\n    menu: TPopupMenu;\n    About1: TMenuItem;\n    connmenu: TPopupMenu;\n    Kickconnection1: TMenuItem;\n    KickIPaddress1: TMenuItem;\n    Kickallconnections1: TMenuItem;\n    Viewhttprequest1: TMenuItem;\n    Saveoptions1: TMenuItem;\n    toregistrycurrentuser1: TMenuItem;\n    tofile1: TMenuItem;\n    toregistryallusers1: TMenuItem;\n    timer: TTimer;\n    urlToolbar: TToolBar;\n    IPaddress1: TMenuItem;\n    AutocopyURLonadditionChk: TMenuItem;\n    foldersbeforeChk: TMenuItem;\n    Browseit1: TMenuItem;\n    Openit1: TMenuItem;\n    appEvents: TApplicationEvents;\n    logmenu: TPopupMenu;\n    DumprequestsChk: TMenuItem;\n    CopyURL1: TMenuItem;\n    Readonly1: TMenuItem;\n    Clear1: TMenuItem;\n    Copy1: TMenuItem;\n    N3: TMenuItem;\n    LogtimeChk: TMenuItem;\n    LogdateChk: TMenuItem;\n    Saveas1: TMenuItem;\n    Save1: TMenuItem;\n    N4: TMenuItem;\n    connPnl: TPanel;\n    MinimizetotrayChk: TMenuItem;\n    Restore1: TMenuItem;\n    Numberofcurrentconnections1: TMenuItem;\n    Numberofloggeddownloads1: TMenuItem;\n    Numberofloggedhits1: TMenuItem;\n    Exit1: TMenuItem;\n    Shellcontextmenu1: TMenuItem;\n    Flashtaskbutton1: TMenuItem;\n    onDownloadChk: TMenuItem;\n    onconnectionChk: TMenuItem;\n    never1: TMenuItem;\n    N6: TMenuItem;\n    startminimizedChk: TMenuItem;\n    N7: TMenuItem;\n    trayicons1: TMenuItem;\n    trayfordownloadChk: TMenuItem;\n    N8: TMenuItem;\n    Loadfilesystem1: TMenuItem;\n    Savefilesystem1: TMenuItem;\n    N1: TMenuItem;\n    N12: TMenuItem;\n    usesystemiconsChk: TMenuItem;\n    N13: TMenuItem;\n    Officialwebsite1: TMenuItem;\n    numbers: TImageList;\n    showmaintrayiconChk: TMenuItem;\n    Speedlimit1: TMenuItem;\n    N10: TMenuItem;\n    Limits1: TMenuItem;\n    Maxconnections1: TMenuItem;\n    Maxconnectionsfromsingleaddress1: TMenuItem;\n    Weblinks1: TMenuItem;\n    Forum1: TMenuItem;\n    FAQ1: TMenuItem;\n    License1: TMenuItem;\n    Paste1: TMenuItem;\n    Addfiles1: TMenuItem;\n    Addfolder1: TMenuItem;\n    graphSplitter: TSplitter;\n    Graphrefreshrate1: TMenuItem;\n    Pausestreaming1: TMenuItem;\n    Setuserpass1: TMenuItem;\n    BanIPaddress1: TMenuItem;\n    N2: TMenuItem;\n    BannedIPaddresses1: TMenuItem;\n    Loadrecentfiles1: TMenuItem;\n    alwaysontopChk: TMenuItem;\n    Checkforupdates1: TMenuItem;\n    Rename1: TMenuItem;\n    Otheroptions1: TMenuItem;\n    Nodownloadtimeout1: TMenuItem;\n    Autoclose1: TMenuItem;\n    Showbandwidthgraph1: TMenuItem;\n    Pause1: TMenuItem;\n    reloadonstartupChk: TMenuItem;\n    MIMEtypes1: TMenuItem;\n    autocopyURLonstartChk: TMenuItem;\n    Accounts1: TMenuItem;\n    encodenonasciiChk: TMenuItem;\n    encodeSpacesChk: TMenuItem;\n    URLencoding1: TMenuItem;\n    traymessage1: TMenuItem;\n    DMbrowserTplChk: TMenuItem;\n    Guide1: TMenuItem;\n    autosaveVFSchk: TMenuItem;\n    sendHFSidentifierChk: TMenuItem;\n    persistentconnectionsChk: TMenuItem;\n    Logfile1: TMenuItem;\n    VirtualFileSystem1: TMenuItem;\n    listfileswithhiddenattributeChk: TMenuItem;\n    listfileswithsystemattributeChk: TMenuItem;\n    hideProtectedItemsChk: TMenuItem;\n    StartExit1: TMenuItem;\n    Font1: TMenuItem;\n    Newlink1: TMenuItem;\n    SetURL1: TMenuItem;\n    usecommentasrealmChk: TMenuItem;\n    Resetuserpass1: TMenuItem;\n    Switchtovirtual1: TMenuItem;\n    LogiconsChk: TMenuItem;\n    Loginrealm1: TMenuItem;\n    Logwhat1: TMenuItem;\n    N9: TMenuItem;\n    N16: TMenuItem;\n    logconnectionsChk: TMenuItem;\n    logDisconnectionsChk: TMenuItem;\n    logRequestsChk: TMenuItem;\n    logRepliesChk: TMenuItem;\n    logFulldownloadsChk: TMenuItem;\n    logBytesreceivedChk: TMenuItem;\n    logBytessentChk: TMenuItem;\n    logServerstartChk: TMenuItem;\n    logServerstopChk: TMenuItem;\n    logBrowsingChk: TMenuItem;\n    Help1: TMenuItem;\n    Introduction1: TMenuItem;\n    N18: TMenuItem;\n    Resetfileshits1: TMenuItem;\n    Kickidleconnections1: TMenuItem;\n    Connectionsinactivitytimeout1: TMenuItem;\n    logOnVideoChk: TMenuItem;\n    N19: TMenuItem;\n    Clearfilesystem1: TMenuItem;\n    HintsfornewcomersChk: TMenuItem;\n    logUploadsChk: TMenuItem;\n    only1instanceChk: TMenuItem;\n    compressedbrowsingChk: TMenuItem;\n    Numberofloggeduploads1: TMenuItem;\n    logProgressChk: TMenuItem;\n    Flagfilesaddedrecently1: TMenuItem;\n    Flagasnew1: TMenuItem;\n    confirmexitChk: TMenuItem;\n    Donotlogaddress1: TMenuItem;\n    N15: TMenuItem;\n    Custom1: TMenuItem;\n    noPortInUrlChk: TMenuItem;\n    saveTotalsChk: TMenuItem;\n    Findexternaladdress1: TMenuItem;\n    findExtOnStartupChk: TMenuItem;\n    DynamicDNSupdater1: TMenuItem;\n    Custom2: TMenuItem;\n    N21: TMenuItem;\n    CJBtemplate1: TMenuItem;\n    NoIPtemplate1: TMenuItem;\n    DynDNStemplate1: TMenuItem;\n    searchbetteripChk: TMenuItem;\n    deletePartialUploadsChk: TMenuItem;\n    Minimumdiskspace1: TMenuItem;\n    Banthisaddress1: TMenuItem;\n    modalOptionsChk: TMenuItem;\n    Address2name1: TMenuItem;\n    Resetnewflag1: TMenuItem;\n    beepChk: TMenuItem;\n    Renamepartialuploads1: TMenuItem;\n    SelfTest1: TMenuItem;\n    Opendirectlyinbrowser1: TMenuItem;\n    maxDLs1: TMenuItem;\n    Editresource1: TMenuItem;\n    logBannedChk: TMenuItem;\n    ToolButton2: TToolButton;\n    modeBtn: TToolButton;\n    Addfiles2: TMenuItem;\n    Addfolder2: TMenuItem;\n    Clearoptionsandquit1: TMenuItem;\n    numberFilesOnUploadChk: TMenuItem;\n    Upload2: TMenuItem;\n    UninstallHFS1: TMenuItem;\n    maxIPs1: TMenuItem;\n    maxIPsDLing1: TMenuItem;\n    keepBakUpdatingChk: TMenuItem;\n    Autosaveevery1: TMenuItem;\n    autoSaveOptionsChk: TMenuItem;\n    Apachelogfileformat1: TMenuItem;\n    SwitchON1: TMenuItem;\n    loadSingleCommentsChk: TMenuItem;\n    Bindroottorealfolder1: TMenuItem;\n    Unbindroot1: TMenuItem;\n    Switchtorealfolder1: TMenuItem;\n    abortBtn: TToolButton;\n    Seelastserverresponse1: TMenuItem;\n    N5: TMenuItem;\n    logOtherEventsChk: TMenuItem;\n    supportDescriptionChk: TMenuItem;\n    Showcustomizedoptions1: TMenuItem;\n    useISOdateChk: TMenuItem;\n    browseUsingLocalhostChk: TMenuItem;\n    Addingfolder1: TMenuItem;\n    askFolderKindChk: TMenuItem;\n    defaultToVirtualChk: TMenuItem;\n    defaultToRealChk: TMenuItem;\n    enableNoDefaultChk: TMenuItem;\n    RunHFSwhenWindowsstarts1: TMenuItem;\n    trayInsteadOfQuitChk: TMenuItem;\n    Addicons1: TMenuItem;\n    Iconmasks1: TMenuItem;\n    CopyURLwithpassword1: TMenuItem;\n    CopyURLwithdifferentaddress1: TMenuItem;\n    hisIPaddressisusedforURLbuilding1: TMenuItem;\n    N20: TMenuItem;\n    Acceptconnectionson1: TMenuItem;\n    Anyaddress1: TMenuItem;\n    autoCommentChk: TMenuItem;\n    fingerprintsChk: TMenuItem;\n    CopyURLwithfingerprint1: TMenuItem;\n    recursiveListingChk: TMenuItem;\n    Disable1: TMenuItem;\n    logOnlyServedChk: TMenuItem;\n    Fingerprints1: TMenuItem;\n    saveNewFingerprintsChk: TMenuItem;\n    Createfingerprintonaddition1: TMenuItem;\n    pwdInPagesChk: TMenuItem;\n    deleteDontAskChk: TMenuItem;\n    Updates1: TMenuItem;\n    updateDailyChk: TMenuItem;\n    N22: TMenuItem;\n    Howto1: TMenuItem;\n    testerUpdatesChk: TMenuItem;\n    Defaultsorting1: TMenuItem;\n    Name1: TMenuItem;\n    Size1: TMenuItem;\n    Time1: TMenuItem;\n    Hits1: TMenuItem;\n    centralPnl: TPanel;\n    splitV: TSplitter;\n    browseBtn: TToolButton;\n    Resettotals1: TMenuItem;\n    Clearandresettotals1: TMenuItem;\n    Dontlogsomefiles1: TMenuItem;\n    preventLeechingChk: TMenuItem;\n    NumberofdifferentIPaddresses1: TMenuItem;\n    NumberofdifferentIPaddresseseverconnected1: TMenuItem;\n    Addresseseverconnected1: TMenuItem;\n    N24: TMenuItem;\n    Allowedreferer1: TMenuItem;\n    ToolButton4: TToolButton;\n    oemForIonChk: TMenuItem;\n    portBtn: TToolButton;\n    resetOptions1: TMenuItem;\n    quitWithoutAskingToSaveChk: TMenuItem;\n    highSpeedChk: TMenuItem;\n    freeLoginChk: TMenuItem;\n    backupSavingChk: TMenuItem;\n    graphMenu: TPopupMenu;\n    Reset1: TMenuItem;\n    Extension1: TMenuItem;\n    linksBeforeChk: TMenuItem;\n    updateAutomaticallyChk: TMenuItem;\n    stopSpidersChk: TMenuItem;\n    logPnl: TPanel;\n    logBox: TRichEdit;\n    filesPnl: TPanel;\n    filesBox: TTreeView;\n    logTitle: TPanel;\n    filesTitle: TPanel;\n    graphBox: TPaintBox;\n    dumpTrafficChk: TMenuItem;\n    httpsUrlsChk: TMenuItem;\n    Hide: TMenuItem;\n    Speedlimitforsingleaddress1: TMenuItem;\n    macrosLogChk: TMenuItem;\n    Debug1: TMenuItem;\n    Appendmacroslog1: TMenuItem;\n    preventStandbyChk: TMenuItem;\n    titlePnl: TPanel;\n    HTMLtemplate1: TMenuItem;\n    Edit1: TMenuItem;\n    Changefile1: TMenuItem;\n    Changeeditor1: TMenuItem;\n    Restoredefault1: TMenuItem;\n    logToolbar: TPanel;\n    splitH: TSplitter;\n    collapsedPnl: TPanel;\n    expandBtn: TSpeedButton;\n    expandedPnl: TPanel;\n    openLogBtn: TSpeedButton;\n    searchPnl: TPanel;\n    logSearchBox: TLabeledEdit;\n    logUpDown: TUpDown;\n    openFilteredLog: TSpeedButton;\n    collapseBtn: TSpeedButton;\n    copyBtn: TToolButton;\n    urlBox: TEdit;\n    Bevel1: TBevel;\n    enableMacrosChk: TMenuItem;\n    Donate1: TMenuItem;\n    Purge1: TMenuItem;\n    Editeventscripts1: TMenuItem;\n    maxDLsIP1: TMenuItem;\n    Maxlinesonscreen1: TMenuItem;\n    Properties1: TMenuItem;\n    N11: TMenuItem;\n    restoreCfgBtn: TToolButton;\n    N14: TMenuItem;\n    Runscript1: TMenuItem;\n    Changeport1: TMenuItem;\n    logDeletionsChk: TMenuItem;\n    showMemUsageChk: TMenuItem;\n    trayiconforeachdownload1: TMenuItem;\n    tabOnLogFileChk: TMenuItem;\n    noContentdispositionChk: TMenuItem;\n    Defaultpointtoaddfiles1: TMenuItem;\n    switchMode: TMenuItem;\n    sbar: TStatusBar;\n    connBox: TListView;\n    Reverttopreviousversion1: TMenuItem;\n    updateBtn: TToolButton;\n    delayUpdateChk: TMenuItem;\n    oemTarChk: TMenuItem;\n    procedure FormResize(Sender: TObject);\n    procedure filesBoxCollapsing(Sender: TObject; Node: TTreeNode; var AllowCollapse: Boolean);\n    procedure newfolder1Click(Sender: TObject);\n    procedure filesBoxEditing(Sender: TObject; Node: TTreeNode; var AllowEdit: Boolean);\n    procedure filesBoxEdited(Sender: TObject; Node: TTreeNode; var S: String);\n    procedure Remove1Click(Sender: TObject);\n    procedure startBtnClick(Sender: TObject);\n    procedure filesBoxChange(Sender: TObject; Node: TTreeNode);\n    procedure Kickconnection1Click(Sender: TObject);\n    procedure Kickallconnections1Click(Sender: TObject);\n    procedure KickIPaddress1Click(Sender: TObject);\n    procedure Viewhttprequest1Click(Sender: TObject);\n    procedure connmenuPopup(Sender: TObject);\n    procedure filemenuPopup(Sender: TObject);\n    procedure About1Click(Sender: TObject);\n    procedure timerEvent(Sender: TObject);\n    procedure menuPopup(Sender: TObject);\n    procedure filesBoxDblClick(Sender: TObject);\n    procedure filesBoxMouseDown(Sender: TObject; Button: TMouseButton;\n      Shift: TShiftState; X, Y: Integer);\n    procedure filesBoxCompare(Sender: TObject; Node1, Node2: TTreeNode;\n      Data: Integer; var Compare: Integer);\n    procedure foldersbeforeChkClick(Sender: TObject);\n    procedure Browseit1Click(Sender: TObject);\n    procedure Openit1Click(Sender: TObject);\n    procedure splitVMoved(Sender: TObject);\n    procedure appEventsShowHint(var HintStr: String;\n      var CanShow: Boolean; var HintInfo: THintInfo);\n    procedure logmenuPopup(Sender: TObject);\n    procedure Readonly1Click(Sender: TObject);\n    procedure Clear1Click(Sender: TObject);\n    procedure Copy1Click(Sender: TObject);\n    procedure Saveas1Click(Sender: TObject);\n    procedure Save1Click(Sender: TObject);\n    procedure Clearoptionsandquit1click(Sender: TObject);\n    procedure appEventsMinimize(Sender: TObject);\n    procedure appEventsRestore(Sender: TObject);\n    procedure Restore1Click(Sender: TObject);\n    procedure Numberofcurrentconnections1Click(Sender: TObject);\n    procedure Numberofloggeddownloads1Click(Sender: TObject);\n    procedure Numberofloggedhits1Click(Sender: TObject);\n    procedure Exit1Click(Sender: TObject);\n    procedure onDownloadChkClick(Sender: TObject);\n    procedure onconnectionChkClick(Sender: TObject);\n    procedure never1Click(Sender: TObject);\n    procedure FormShow(Sender: TObject);\n    procedure filesBoxDragOver(Sender, Source: TObject; X, Y: Integer;\n      State: TDragState; var Accept: Boolean);\n    procedure filesBoxDragDrop(Sender, Source: TObject; X, Y: Integer);\n    procedure Savefilesystem1Click(Sender: TObject);\n    procedure filesBoxDeletion(Sender: TObject; Node: TTreeNode);\n    procedure Loadfilesystem1Click(Sender: TObject);\n    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);\n    procedure Officialwebsite1Click(Sender: TObject);\n    procedure showmaintrayiconChkClick(Sender: TObject);\n    procedure Speedlimit1Click(Sender: TObject);\n    procedure tofile1Click(Sender: TObject);\n    procedure Maxconnections1Click(Sender: TObject);\n    procedure Maxconnectionsfromsingleaddress1Click(Sender: TObject);\n    procedure Forum1Click(Sender: TObject);\n    procedure FAQ1Click(Sender: TObject);\n    procedure License1Click(Sender: TObject);\n    procedure Paste1Click(Sender: TObject);\n    procedure Addfiles1Click(Sender: TObject);\n    procedure Addfolder1Click(Sender: TObject);\n    procedure graphSplitterMoved(Sender: TObject);\n    procedure Graphrefreshrate1Click(Sender: TObject);\n    procedure Pausestreaming1Click(Sender: TObject);\n    procedure Comment1Click(Sender: TObject);\n    procedure filesBoxCustomDrawItem(Sender: TCustomTreeView;\n      Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);\n    procedure Setuserpass1Click(Sender: TObject);\n    procedure browseBtnClick(Sender: TObject);\n    procedure BanIPaddress1Click(Sender: TObject);\n    procedure BannedIPaddresses1Click(Sender: TObject);\n    procedure FormKeyUp(Sender: TObject; var Key: Word;\n      Shift: TShiftState);\n    procedure Checkforupdates1Click(Sender: TObject);\n    procedure Rename1Click(Sender: TObject);\n    procedure Nodownloadtimeout1Click(Sender: TObject);\n    procedure alwaysontopChkClick(Sender: TObject);\n    procedure Showbandwidthgraph1Click(Sender: TObject);\n    procedure Pause1Click(Sender: TObject);\n    procedure MIMEtypes1Click(Sender: TObject);\n    procedure Accounts1Click(Sender: TObject);\n    procedure traymessage1Click(Sender: TObject);\n    procedure Guide1Click(Sender: TObject);\n    procedure filesBoxAddition(Sender: TObject; Node: TTreeNode);\n    procedure FormClose(Sender: TObject; var Action: TCloseAction);\n    procedure Logfile1Click(Sender: TObject);\n    procedure Font1Click(Sender: TObject);\n    procedure Newlink1Click(Sender: TObject);\n    procedure SetURL1Click(Sender: TObject);\n    procedure Resetuserpass1Click(Sender: TObject);\n    procedure Switchtovirtual1Click(Sender: TObject);\n    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);\n    procedure Loginrealm1Click(Sender: TObject);\n    procedure Introduction1Click(Sender: TObject);\n    procedure Resetfileshits1Click(Sender: TObject);\n    procedure persistentconnectionsChkClick(Sender: TObject);\n    procedure Kickidleconnections1Click(Sender: TObject);\n    procedure Connectionsinactivitytimeout1Click(Sender: TObject);\n    procedure splitHMoved(Sender: TObject);\n    procedure Clearfilesystem1Click(Sender: TObject);\n    procedure Numberofloggeduploads1Click(Sender: TObject);\n    procedure Flagfilesaddedrecently1Click(Sender: TObject);\n    procedure Flagasnew1Click(Sender: TObject);\n    procedure Donotlogaddress1Click(Sender: TObject);\n    procedure Custom1Click(Sender: TObject);\n    procedure Findexternaladdress1Click(Sender: TObject);\n    procedure sbarDblClick(Sender: TObject);\n    procedure NoIPtemplate1Click(Sender: TObject);\n    procedure Custom2Click(Sender: TObject);\n    procedure CJBtemplate1Click(Sender: TObject);\n    procedure DynDNStemplate1Click(Sender: TObject);\n    procedure Minimumdiskspace1Click(Sender: TObject);\n    procedure Banthisaddress1Click(Sender: TObject);\n    procedure Address2name1Click(Sender: TObject);\n    procedure Resetnewflag1Click(Sender: TObject);\n    procedure Renamepartialuploads1Click(Sender: TObject);\n    procedure SelfTest1Click(Sender: TObject);\n    procedure Opendirectlyinbrowser1Click(Sender: TObject);\n    procedure noPortInUrlChkClick(Sender: TObject);\n    procedure maxDLs1Click(Sender: TObject);\n    procedure MaxDLsIP1Click(Sender: TObject);\n    procedure Editresource1Click(Sender: TObject);\n    procedure modeBtnClick(Sender: TObject);\n    procedure Shellcontextmenu1Click(Sender: TObject);\n    procedure UninstallHFS1Click(Sender: TObject);\n    procedure maxIPs1Click(Sender: TObject);\n    procedure maxIPsDLing1Click(Sender: TObject);\n    procedure Autosaveevery1Click(Sender: TObject);\n    procedure CopyURL1Click(Sender: TObject);\n    procedure Apachelogfileformat1Click(Sender: TObject);\n    procedure Bindroottorealfolder1Click(Sender: TObject);\n    procedure Unbindroot1Click(Sender: TObject);\n    procedure Switchtorealfolder1Click(Sender: TObject);\n    procedure abortBtnClick(Sender: TObject);\n    procedure Seelastserverresponse1Click(Sender: TObject);\n    procedure Showcustomizedoptions1Click(Sender: TObject);\n    procedure useISOdateChkClick(Sender: TObject);\n    procedure RunHFSwhenWindowsstarts1Click(Sender: TObject);\n    procedure askFolderKindChkClick(Sender: TObject);\n    procedure defaultToVirtualChkClick(Sender: TObject);\n    procedure defaultToRealChkClick(Sender: TObject);\n    procedure Addicons1Click(Sender: TObject);\n    procedure Iconmasks1Click(Sender: TObject);\n    procedure Anyaddress1Click(Sender: TObject);\n    procedure filesBoxEndDrag(Sender, Target: TObject; X, Y: Integer);\n    procedure CopyURLwithfingerprint1Click(Sender: TObject);\n    procedure Disable1Click(Sender: TObject);\n    procedure saveNewFingerprintsChkClick(Sender: TObject);\n    procedure Createfingerprintonaddition1Click(Sender: TObject);\n    procedure Howto1Click(Sender: TObject);\n    procedure Name1Click(Sender: TObject);\n    procedure Size1Click(Sender: TObject);\n    procedure Time1Click(Sender: TObject);\n    procedure Hits1Click(Sender: TObject);\n    procedure Resettotals1Click(Sender: TObject);\n    procedure menuBtnClick(Sender: TObject);\n    procedure Clearandresettotals1Click(Sender: TObject);\n    procedure Dontlogsomefiles1Click(Sender: TObject);\n    procedure NumberofdifferentIPaddresses1Click(Sender: TObject);\n    procedure NumberofdifferentIPaddresseseverconnected1Click(Sender: TObject);\n    procedure Addresseseverconnected1Click(Sender: TObject);\n    procedure Allowedreferer1Click(Sender: TObject);\n    procedure filesBoxEnter(Sender: TObject);\n    procedure filesBoxMouseEnter(Sender: TObject);\n    procedure filesBoxMouseLeave(Sender: TObject);\n    procedure filesBoxExit(Sender: TObject);\n    procedure sbarMouseDown(Sender: TObject; Button: TMouseButton; shift: TShiftState; X, Y: Integer);\n    procedure portBtnClick(Sender: TObject);\n    procedure SwitchON1Click(Sender: TObject);\n    procedure resetOptions1Click(Sender: TObject);\n    procedure Reset1Click(Sender: TObject);\n    procedure Extension1Click(Sender: TObject);\n    procedure findExtOnStartupChkClick(Sender: TObject);\n    procedure openLogBtnClick(Sender: TObject);\n    procedure logSearchBoxKeyPress(Sender: TObject; var Key: Char);\n    procedure graphBoxPaint(Sender: TObject);\n    procedure logUpDownClick(Sender: TObject; Button: TUDBtnType);\n    procedure logSearchBoxChange(Sender: TObject);\n    procedure HideClick(Sender: TObject);\n    procedure Speedlimitforsingleaddress1Click(Sender: TObject);\n    procedure Edit1Click(Sender: TObject);\n    procedure Restoredefault1Click(Sender: TObject);\n    procedure Changefile1Click(Sender: TObject);\n    procedure Changeeditor1Click(Sender: TObject);\n    procedure expandBtnClick(Sender: TObject);\n    procedure collapseBtnClick(Sender: TObject);\n    procedure copyBtnClick(Sender: TObject);\n    procedure urlBoxChange(Sender: TObject);\n    procedure enableMacrosChkClick(Sender: TObject);\n    procedure Donate1Click(Sender: TObject);\n    procedure Purge1Click(Sender: TObject);\n    procedure Editeventscripts1Click(Sender: TObject);\n    procedure Maxlinesonscreen1Click(Sender: TObject);\n    procedure Properties1Click(Sender: TObject);\n    procedure filesBoxMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);\n    procedure restoreCfgBtnClick(Sender: TObject);\n    procedure Runscript1Click(Sender: TObject);\n    procedure logBoxChange(Sender: TObject);\n    procedure logBoxMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);\n    procedure Changeport1Click(Sender: TObject);\n    procedure trayiconforeachdownload1Click(Sender: TObject);\n    procedure Defaultpointtoaddfiles1Click(Sender: TObject);\n    function appEventsHelp(Command: Word; Data: Integer;\n      var CallHelp: Boolean): Boolean;\n    procedure connBoxData(Sender: TObject; Item: TListItem);\n    procedure connBoxAdvancedCustomDrawSubItem(Sender: TCustomListView;\n      Item: TListItem; SubItem: Integer; State: TCustomDrawState;\n      Stage: TCustomDrawStage; var DefaultDraw: Boolean);\n    procedure Reverttopreviousversion1Click(Sender: TObject);\n    procedure updateBtnClick(Sender: TObject);\n    procedure FormCreate(Sender: TObject);\n  private\n    function searchLog(dir:integer):boolean;\n    function  getGraphPic(cd:TconnData=NIL): ansistring;\n    procedure WMDropFiles(var msg:TWMDropFiles);\n      message WM_DROPFILES;\n    procedure WMQueryEndSession(var msg:TWMQueryEndSession);\n      message WM_QUERYENDSESSION;\n    procedure WMEndSession(var msg:TWMEndSession);\n      message WM_ENDSESSION;\n    procedure WMNCLButtonDown(var msg:TWMNCLButtonDown);\n      message WM_NCLBUTTONDOWN;\n    procedure trayEvent(sender:Tobject; ev:TtrayEvent);\n    procedure downloadtrayEvent(sender:Tobject; ev:TtrayEvent);\n    procedure httpEvent(event:ThttpEvent; conn:ThttpConn);\n    function  addFileRecur(f:Tfile; parent:Ttreenode=NIL):Tfile;\n    function  pointedFile(strict:boolean=TRUE):Tfile;\n    function  pointedConnection():TconnData;\n    procedure updateSbar();\n    function  getFolderPage(folder:Tfile; cd:TconnData; otpl:Tobject):string;\n    procedure getPage(sectionName:string; data:TconnData; f:Tfile=NIL; tpl2use:Ttpl=NIL);\n    function  selectedConnection():TconnData;\n    function  sendPic(cd:TconnData; idx:integer=-1):boolean;\n    procedure ipmenuclick(sender:Tobject);\n    procedure acceptOnMenuclick(sender:Tobject);\n    procedure copyURLwithAddressMenuClick(sender:Tobject);\n    procedure copyURLwithPasswordMenuClick(sender:Tobject);\n    procedure updateTrayTip();\n    procedure updateCopyBtn();\n    procedure setTrayShows(s:string);\n    procedure addTray();\n    procedure refreshConn(conn:TconnData);\n    function  getVFS(node:Ttreenode=NIL):ansistring;\n    procedure setVFS(vfs:ansistring; node:Ttreenode=NIL);\n    procedure setnoDownloadTimeout(v:integer);\n\t\tprocedure addDropFiles(hnd:Thandle; under:Ttreenode);\n    procedure pasteFiles();\n\t\tfunction  addFilesFromString(files:string; under:Ttreenode=NIL):Tfile;\n\t\tprocedure setGraphRate(v:integer);\n    procedure updateRecentFilesMenu();\n    procedure recentsClick(sender:Tobject);\n    procedure popupMainMenu();\n    procedure updateAlwaysOnTop();\n    procedure initVFS();\n\t\tprocedure refreshIPlist();\n\t\tprocedure updateUrlBox();\n    procedure loadVFS(fn:string);\n    procedure compressReply(cd:TconnData);\n    procedure purgeConnections();\n    procedure setEasyMode(easy:boolean=TRUE);\n    procedure hideGraph();\n    procedure showGraph();\n    function  fileAttributeInSelection(fa:TfileAttribute):boolean;\n    procedure progFrmHttpGetUpdate(sender:TObject; buffer:pointer; Len:integer);\n    procedure recalculateGraph();\n public\n    procedure remove(node:Ttreenode=NIL);\n    function  setCfg(cfg:string; alreadyStarted:boolean=TRUE):boolean;\n    function  getCfg(exclude:string=''):string;\n    function  saveCFG():boolean;\n    function  addFile(f:Tfile; parent:Ttreenode=NIL; skipComment:boolean=FALSE):Tfile;\n    procedure add2log(lines:string; cd:TconnData=NIL; clr:Tcolor=Graphics.clDefault);\n    function  findFilebyURL(url:string; parent:Tfile=NIL; allowTemp:boolean=TRUE):Tfile;\n    function  ipPointedInLog():string;\n    procedure saveVFS(fn:string='');\n    function  finalInit():boolean;\n    procedure processParams_after(var params:TStringDynArray);\n    procedure setStatusBarText(s:string; lastFor:integer=5);\n    procedure minimizeToTray();\n    procedure autoCheckUpdates();\n    function  copySelection():TtreeNodeDynArray;\n    procedure setLogToolbar(v:boolean);\n    function  getTrayTipMsg(tpl:string=''):string;\n    procedure menuDraw(sender:Tobject; cnv: Tcanvas; r:Trect; selected:boolean);\n    procedure menuMeasure(sender:Tobject; cnv: Tcanvas; var w:integer; var h:integer);\n    procedure wrapInputQuery(sender:Tobject);\n  end; // Tmainfrm\n\nconst\n  FILEACTION2STR: array [TfileAction] of string = ('Access', 'Delete', 'Upload');\n\nvar\n  mainFrm: TmainFrm;\n  srv: ThttpSrv;\n  tpl: Ttpl; // template for generated pages\n  customIPs: TStringDynArray;   // user customized IP addresses\n  iconMasks: TstringIntPairs;\n  ipsEverConnected: THashedStringList;\n  easyMode: boolean = TRUE;\n  defaultIP: string;    // the IP address to use forming URLs\n  rootNode: TtreeNode;\n  rootFile: Tfile;\n  noReplyBan: boolean;\n  exePath: string;\n  externalIP: string;\n  banlist: array of record ip,comment:string; end;\n  trayMsg: string; // template for the tray hint\n  customIPservice: string;\n  accounts: Taccounts;\n  tplFilename: string; // when empty, we are using the default tpl\n  trayNL: string = #13;\n  mimeTypes, address2name, IPservices: TstringDynArray;\n  IPservicesTime: TdateTime;\n  selectedFile: Tfile;  // last selected file on the tree\n  inBrowserIfMIME: boolean;\n  VFSmodified: boolean; // TRUE if the VFS changes have not been saved\n  tempScriptFilename: string;\n  uploadPaths: TstringDynArray;\n  inTotalOfs, outTotalOfs: int64; // used to cumulate in/out totals\n  hitsLogged, downloadsLogged, uploadsLogged: integer;\n  lastFileOpen: string;\n  minDiskSpace: int64; // in MB. an int32 would suffice, but an int64 will save us\n  speedLimit: real;            // overall limit, Kb/s --- it virtualizes the value of globalLimiter.maxSpeed, that's actually set to zero when streaming is paused\n  currentCFG: string;\n  currentCFGhashed: THashedStringList;\n  saveMode: ( SM_USER, SM_SYSTEM, SM_FILE );\n  tray: TmyTrayicon;\n  dyndns: record\n    url, lastResult, lastIP: string;\n    user, pwd, host: string;\n    active: boolean;\n    lastTime: Tdatetime;\n    end;\n\nprocedure showOptions(page:TtabSheet);\nprocedure kickBannedOnes();\nprocedure repaintTray();\nfunction paramsAsArray():TStringDynArray;\nprocedure processParams_before(var params:TStringDynArray; allowed:string='');\nfunction loadCfg(var ini,tpl:string):boolean;\nfunction idx_img2ico(i:integer):integer;\nfunction idx_ico2img(i:integer):integer;\nfunction idx_label(i:integer):string;\nfunction findEnabledLinkedAccount(account:Paccount; over:TStringDynArray; isSorted:boolean=FALSE):Paccount;\nfunction getImageIndexForFile(fn:string):integer;\nfunction conn2data(i:integer):TconnData; inline; overload;\nfunction uptimestr():string;\nfunction countIPs(onlyDownloading:boolean=FALSE; usersInsteadOfIps:boolean=FALSE):integer;\nfunction getSafeHost(cd:TconnData):string;\nfunction localDNSget(ip:string):string;\nfunction countDownloads(ip:string=''; user:string=''; f:Tfile=NIL):integer;\nfunction accountAllowed(action:TfileAction; cd:TconnData; f:Tfile):boolean;\nfunction getAccountList(users:boolean=TRUE; groups:boolean=TRUE):TstringDynArray;\nfunction fileExistsByURL(url:string):boolean;\nfunction createFingerprint(fn:string):string;\nfunction objByIP(ip:string):TperIp;\nfunction protoColon():string;\nprocedure setSpeedLimitIP(v:real);\nprocedure stopServer();\nfunction startServer():boolean;\nfunction deleteAccount(name:string):boolean;\n\nimplementation\n\n{$R *.dfm}\n{$R data.res}\n\nuses\n  newuserpassDlg, optionsDlg, utilLib, folderKindDlg, shellExtDlg, diffDlg, ipsEverDlg, parserLib, MMsystem,\n  purgeDlg, filepropDlg, runscriptDlg, scriptLib, System.Hash;\n\n// global variables\nvar\n  globalLimiter: TspeedLimiter;\n  ip2obj: THashedStringList;\n  sessions: Tsessions;\n  addToFolder: string; // default folder where to add items from the command line\n  lastDialogFolder: string;  // stores last for open dialog, to make it persistent\n  clock: integer;       // program ticks (tenths of second)\n  // workaround for splitters' bad behaviour\n  lastGoodLogWidth, lastGoodConnHeight: integer;\n  etags: THashedStringList;\n  tray_ico: Ticon;             // the actual icon shown in tray\n  usingFreePort: boolean=TRUE; // the actual server port set was 0\n  upTime: Tdatetime;           // the server is up since...\n  trayed: boolean;             // true if the window has been minimized to tray\n  trayShows: string;           // describes the content of the tray icon\n  flashOn: string;             // describes when to flash the taskbar\n  addFolderDefault: string;    // how to default adding a folder (real/virtual)\n  defSorting: string;          // default sorting, browsing\n  toDelete: Tlist;             // connections pending for deletion\n  systemimages: Timagelist;    // system icons\n  speedLimitIP: real;\n  maxConnections: integer;     // max number of connections (total)\n  maxConnectionsIP: integer;   // ...from a single address\n  maxContempDLs: integer;      // max number of contemporaneous downloads\n  maxContempDLsIP: integer;    // ...from a single address\n  maxContempDLsUser: integer;  // ...from a single user\n  maxIPs: integer;             // max number of different addresses connected\n  maxIPsDLing: integer;        // max number of different addresses downloading\n  autoFingerprint: integer;    // create fingerprint on file addition\n  renamePartialUploads: string;\n  allowedReferer: string;      // check over the Refer header field\n  altPressedForMenu: boolean;  // used to enable the menu on ALT key\n  noDownloadTimeout: integer;  // autoclose the application after (minutes)\n  connectionsInactivityTimeout: integer; // autokick connection after (seconds)\n  startingImagesCount: integer;\n  lastUpdateCheck, lastFilelistTpl: Tdatetime;\n  lastUpdateCheckFN: string;   // eventual temp file for saving lastUpdateCheck\n  lastActivityTime: Tdatetime;  // used for the \"no download timeout\"\n  recentFiles: TStringDynArray; // recently loaded files\n  addingItemsCounter: integer = -1; // -1 is disabled\n  stopAddingItems, queryingClose: boolean;\n  port: string;\n  defaultTpl: string;\n  lastWindowRect: Trect;\n  dmBrowserTpl, filelistTpl: Ttpl;\n  tplEditor: string;\n  tplLast: Tdatetime;\n  tplImport: boolean;\n  eventScriptsLast, runScriptLast: Tdatetime;\n  autoupdatedFiles: TstringToIntHash;   // download counter for temp Tfile.s\n  iconsCache: TiconsCache;\n  usersInVFS: TusersInVFS;    // keeps track of user/pwd in the VFS\n  progFrm: TprogressForm;\n  graphInEasyMode: boolean;\n  cfgPath, tmpPath: string;\n  logMaxLines: integer;     // number of lines\n  windowsShuttingDown: boolean = FALSE;\n  dontLogAddressMask: string;\n  openInBrowser: string; // to not send the \"attachment\" suggestion in header\n  quitASAP: boolean;  // deferred quit\n  quitting: boolean; // ladies, we're quitting\n  scrollFilesBox: integer = -1;\n  defaultCfg: string;\n  selfTesting: boolean;\n  tplIsCustomized: boolean;\n  fakingMinimize: boolean; // user clicked the [X] but we simulate the [_]\n  loginRealm: string;\n  serializedConnColumns: string;\n  VFScounterMod: boolean; // if any counter has changed\n  imagescache: array of ansistring;\n  logFontName: string;\n  logFontSize: integer;\n  forwardedMask: string;\n  applicationFullyInitialized: boolean;\n  lockTimerevent: boolean;\n  filesStayFlaggedForMinutes: integer;\n  autosaveVFS: Tautosave;\n  logRightClick: Tpoint;\n  warnManyItems: boolean = TRUE;\n  runningOnRemovable: boolean;\n  startupFilename: string;\n  trustedFiles, filesToAddQ: TstringDynArray;\n  setThreadExecutionState: function(d:dword):dword; stdcall; // as variable, because not available on Win95\n  listenOn: string;  // interfaces HFS should listen on\n  backuppedCfg: string;\n  updateASAP: string;\n  refusedUpdate: string;\n  updateWaiting: string;\n  filesBoxRatio: real;\n  fromTray: boolean; // used to notify about an eventy happening from a tray action\n  userInteraction: record\n    disabled: boolean;\n    bakVisible: boolean;  // backup value for mainFrm.visible\n    end;\n  logFile: record\n    filename: string;\n    apacheFormat: string;\n    apacheZoneString: string;\n    end;\n  loadingVFS: record\n    resetLetBrowse, unkFK, disableAutosave, visOnlyAnon, bakAvailable, useBackup, macrosFound: boolean;\n    build: string;\n    end;\n  lastDiffTpl: record\n    f: Tfile;\n    ofs: integer;\n    end;\n  userIcsBuffer, userSocketBuffer: integer;\n  searchLogTime, searchLogWhiteTime, timeTookToSearchLog: TdateTime;\n  sbarTextTimeout: Tdatetime;\n  sbarIdxs: record  // indexes within the statusbar\n    totalIn, totalOut, banStatus, customTpl, oos, out, notSaved: integer;\n    end;\n  graph: record\n  \trate: integer;    // update speed\n    lastOut, lastIn: int64; // save bytesSent and bytesReceived last values\n    maxV: integer;    // max value in scale\n    size: integer;    // height of the box\n    samplesIn, samplesOut: array [0..3000] of integer; // 1 sample, 1 pixel\n    beforeRecalcMax: integer;  // countdown\n    end;\n\nfunction deleteAccount(name:string):boolean;\nvar\n  i, j, n: integer;\nbegin\nn:=length(accounts);\n// search\nfor i:=0 to n-1 do\n  if sameText(name, accounts[i].user) then // found\n    begin\n    // shift\n    for j:=i to n-2 do\n      accounts[j]:=accounts[j+1];\n    // shrink\n    setLength(accounts, n-1);\n    // aftermaths\n    purgeVFSaccounts();\n    mainfrm.filesBox.repaint();\n    result:=TRUE;\n    exit;\n    end;\nresult:=FALSE;\nend; // deleteAccount\n\nfunction isCommentFile(fn:string):boolean;\nbegin\nresult:=(fn=COMMENTS_FILE)\n  or mainfrm.loadSingleCommentsChk.checked and isExtension(fn, COMMENT_FILE_EXT)\n  or mainfrm.supportDescriptionChk.checked and sameText(DESCRIPT_ION,fn)\nend; // isCommentFile\n\nfunction isFingerprintFile(fn:string):boolean;\nbegin\nresult:=mainfrm.fingerprintsChk.checked and isExtension(fn, '.md5')\nend; // isFingerprintFile\n\ntype\n  TaccountRecursionStopCase = (ARSC_REDIR, ARSC_NOLIMITS, ARSC_IN_SET);\n\n// this function follows account linking until it finds and returns the account matching the stopCase\nfunction accountRecursion(account:Paccount; stopCase:TaccountRecursionStopCase; data:pointer=NIL; data2:pointer=NIL):Paccount;\n\n  function shouldStop():boolean;\n  begin\n  case stopCase of\n    ARSC_REDIR: result:=account.redir > '';\n    ARSC_NOLIMITS: result:=account.noLimits;\n    ARSC_IN_SET: result:=stringExists(account.user, TstringDynArray(data), boolean(data2));\n    else result:=FALSE;\n    end;\n  end;\n\nvar\n  tocheck: TStringDynArray;\n  i: integer;\nbegin\nresult:=NIL;\nif (account = NIL) or not account.enabled then exit;\nif shouldStop() then\n  begin\n  result:=account;\n  exit;\n  end;\ni:=0;\ntoCheck:=account.link;\nwhile i < length(toCheck) do\n  begin\n  account:=getAccount(toCheck[i], TRUE);\n  inc(i);\n  if (account = NIL) or not account.enabled then continue;\n  if shouldStop() then\n    begin\n    result:=account;\n    exit;\n    end;\n  addUniqueArray(toCheck, account.link);\n  end;\nend; // accountRecursion\n\nfunction findEnabledLinkedAccount(account:Paccount; over:TStringDynArray; isSorted:boolean=FALSE):Paccount;\nbegin result:=accountRecursion(account, ARSC_IN_SET, over, boolToPtr(isSorted)) end;\n\nfunction noLimitsFor(account:Paccount):boolean;\nbegin\naccount:=accountRecursion(account, ARSC_NOLIMITS);\nresult:=assigned(account) and account.noLimits;\nend; // noLimitsFor\n\nfunction accountAllowed(action:TfileAction; cd:TconnData; f:Tfile):boolean;\nvar\n  a: TStringDynArray;\nbegin\nresult:=FALSE;\nif f = NIL then exit;\nif action = FA_ACCESS then\n  begin\n  result:=f.accessFor(cd);\n  exit;\n  end;\nif f.isTemp() then\n  f:=f.parent;\nif (action = FA_UPLOAD) and not f.isRealFolder() then exit;\n\n  repeat\n  a:=f.accounts[action];\n  if assigned(a)\n  and not ((action = FA_UPLOAD) and not f.isRealFolder()) then break;\n  f:=f.parent;\n  if f = NIL then exit;\n  until false;\n\nresult:=TRUE;\nif stringExists(USER_ANYONE, a, TRUE) then exit;\nresult:=(cd.user = '') and stringExists(USER_ANONYMOUS, a, TRUE)\n  or assigned(cd.account) and stringExists(USER_ANY_ACCOUNT, a, TRUE)\n  or (NIL <> findEnabledLinkedAccount(cd.account, a, TRUE));\nend; // accountAllowed\n\nfunction hasRightAttributes(attr:integer):boolean; overload;\nbegin\nresult:=(mainfrm.listfileswithhiddenattributeChk.checked or (attr and faHidden = 0))\n  and (mainfrm.listfileswithsystemattributeChk.checked or (attr and faSysFile = 0));\nend; // hasRightAttributes\n\nfunction hasRightAttributes(fn:string):boolean; overload;\nbegin result:=hasRightAttributes(GetFileAttributes(pChar(fn))) end;\n\nfunction isAnyMacroIn(s:ansistring):boolean; inline;\nbegin result:=pos(ansistring(MARKER_OPEN), s) > 0 end;\n\nfunction loadDescriptionFile(fn:string):string;\nbegin\nresult:=loadTextFile(fn);\nif result = '' then\n  result:=loadTextFile(fn+'\\'+DESCRIPT_ION);\nif (result > '') and mainfrm.oemForIonChk.checked then\n  OEMToCharBuff(@result[1], @result[1], length(result)); //to test\nend; // loadDescriptionFile\n\nfunction escapeIon(s:string):string;\nbegin\n// this escaping method (and also the 2-bytes marker) was reverse-engineered from Total Commander\nresult:=escapeNL(s);\nif result <> s then\n  result:=result+#4#$C2;\nend; // escapeIon\n\nfunction unescapeIon(s:string):string;\nbegin\nif ansiEndsStr(#4#$C2, s) then\n  begin\n  setLength(s, length(s)-2);\n  s:=unescapeNL(s);\n  end;\nresult:=s;\nend; // unescapeIon\n\nfunction findNameInDescriptionFile(txt, name:string):integer;\nbegin result:=reMatch(txt, '^'+quoteRegExprMetaChars(quoteIfAnyChar(' ',name)), 'mi') end;\n\ntype\n  TfileListing = class\n  public\n    dir: array of Tfile;\n    ignoreConnFilter: boolean;\n    constructor create();\n    destructor Destroy; override;\n    function fromFolder(folder:Tfile; cd:TconnData; recursive:boolean=FALSE;\n      limit:integer=-1; toSkip:integer=-1; doClear:boolean=TRUE):integer;\n    procedure sort(cd:TconnData; def:string='');\n    end;\n\nconstructor TfileListing.create();\nbegin\ndir:=NIL;\nend; // create\n\ndestructor TfileListing.destroy;\nvar\n  i: integer;\nbegin\nfor i:=0 to length(dir)-1 do\n  freeIfTemp(dir[i]);\ninherited destroy;\nend; // destroy\n\nprocedure TfileListing.sort(cd:TconnData; def:string='');\nvar\n  foldersBefore, linksBefore, rev: boolean;\n  sortBy: ( SB_NAME, SB_EXT, SB_SIZE, SB_TIME, SB_DL, SB_COMMENT );\n\n  function compareExt(f1,f2:string):integer;\n  begin result:=ansiCompareText(extractFileExt(f1), extractFileExt(f2)) end;\n\n  function compareFiles(item1,item2:pointer):integer;\n  var\n    f1, f2:Tfile;\n  begin\n  f1:=item1;\n  f2:=item2;\n  if linksBefore and (f1.isLink() <> f2.isLink()) then\n    begin\n    if f1.isLink() then result:=-1\n    else result:=+1;\n    exit;\n    end;\n  if foldersBefore and (f1.isFolder() <> f2.isFolder()) then\n    begin\n    if f1.isFolder() then result:=-1\n    else result:=+1;\n    exit;\n    end;\n  result:=0;\n  case sortby of\n    SB_SIZE: result:=compare_(f1.size, f2.size);\n    SB_TIME: result:=compare_(f1.mtime, f2.mtime);\n    SB_DL: result:=compare_(f1.DLcount, f2.DLcount);\n    SB_EXT:\n      if not f1.isFolder() and not f2.isFolder() then\n        result:=compareExt(f1.name, f2.name);\n    SB_COMMENT: result:=ansiCompareText(f1.comment, f2.comment);\n    end;\n  if result = 0 then // this happen both for SB_NAME and when other comparisons result in no difference\n    result:=ansiCompareText(f1.name,f2.name);\n  if rev then result:=-result;\n  end; // compareFiles\n\n  procedure qsort(left, right:integer);\n  var\n    split, t: Tfile;\n    i, j: integer;\n  begin\n  if left >= right then exit;\n  application.ProcessMessages();\n  if cd.conn.state = HCS_DISCONNECTED then exit;\n\n  i:=left;\n  j:=right;\n  split:=dir[(i+j) div 2];\n    repeat\n    while compareFiles(dir[i], split) < 0 do inc(i);\n    while compareFiles(split, dir[j]) < 0 do dec(j);\n    if i <= j then\n      begin\n      t:=dir[i];\n      dir[i]:=dir[j];\n      dir[j]:=t;\n\n      inc(i);\n      dec(j);\n      end\n    until i > j;\n  if left < j then qsort(left, j);\n  if i < right then qsort(i, right);\n  end; // qsort\n\n  procedure check1(var flag:boolean; val:string);\n  begin if val > '' then flag:=val='1' end;\n\nvar\n  v: string;\nbegin\n// caching\nfoldersBefore:=mainfrm.foldersBeforeChk.checked;\nlinksBefore:=mainfrm.linksBeforeChk.checked;\n\nv:=first([def, defSorting, 'name']);\nrev:=FALSE;\nif assigned(cd) then\n  with cd.urlvars do\n    begin\n    v:=first(values['sort'], v);\n    rev:=values['rev'] = '1';\n\n    check1(foldersBefore, values['foldersbefore']);\n    check1(linksBefore, values['linksbefore']);\n    end;\nif v[1]='!' then\n  begin\n  delete(v, 1,1);\n  rev:=not rev;\n  end;\nif v = '' then exit;\ncase v[1] of\n  'n': sortBy:=SB_NAME;\n  'e': sortBy:=SB_EXT;\n  's': sortBy:=SB_SIZE;\n  't': sortBy:=SB_TIME;\n  'd': sortBy:=SB_DL;\n  'c': sortBy:=SB_COMMENT;\n  else exit; // unsupported value\n  end;\nqsort( 0, length(dir)-1 );\nend; // sort\n\nprocedure loadIon(path:string; comments:TstringList);\nvar\n  s, l, fn: string;\nbegin\nif not mainfrm.supportDescriptionChk.checked then exit;\ns:=loadDescriptionFile(path);\nwhile s > '' do\n  begin\n  l:=chopLine(s);\n  if l = '' then continue;\n  fn:=chop(nonQuotedPos(' ', l), l);\n  comments.add(dequote(fn)+'='+trim(unescapeIon(l)));\n  end;\nend; // loadIon\n\n// returns number of skipped files\nfunction TfileListing.fromFolder(folder:Tfile; cd:TconnData;\n  recursive:boolean=FALSE; limit:integer=-1; toSkip:integer=-1; doClear:boolean=TRUE):integer;\nvar\n  actualCount: integer;\n  seeProtected, noEmptyFolders, forArchive: boolean;\n  filesFilter, foldersFilter, urlFilesFilter, urlFoldersFilter: string;\n\n  procedure recurOn(f:Tfile);\n  begin\n  if not f.isFolder() then exit;\n  setLength(dir, actualCount);\n  toSkip:=fromFolder(f, cd, TRUE, limit, toSkip, FALSE);\n  actualCount:=length(dir);\n  end; // recurOn\n\n  procedure addToListing(f:Tfile);\n  begin\n  if noEmptyFolders and f.isEmptyFolder(cd)\n  and not accountAllowed(FA_UPLOAD, cd, f) then exit; // upload folders should be listed anyway\n  application.ProcessMessages();\n  if cd.conn.state = HCS_DISCONNECTED then exit;\n\n  if toSkip > 0 then dec(toSkip)\n  else\n    begin\n    if actualCount >= length(dir) then\n      setLength(dir, actualCount+100);\n    dir[actualCount]:=f;\n    inc(actualCount);\n    end;\n\n  if recursive and f.isFolder() then\n    recurOn(f);\n  end; // addToListing\n\n  function allowedTo(f:Tfile):boolean;\n  begin\n  if cd = NIL then result:=FALSE\n  else result:=(not (FA_VIS_ONLY_ANON in f.flags) or (cd.user = ''))\n    and (seeProtected or f.accessFor(cd))\n    and not (forArchive and f.isDLforbidden())\n  end; // allowedTo\n\n  procedure includeFilesFromDisk();\n  var\n    comments: THashedStringList;\n    commentMasks: TStringDynArray;\n\n    // moves to \"commentMasks\" comments with a filemask as filename\n    procedure extractCommentsWithWildcards();\n    var\n      i: integer;\n      s: string;\n    begin\n    i:=0;\n    while i < comments.count do\n      begin\n      s:=comments.names[i];\n      if ansiContainsStr(s, '?')\n      or ansiContainsStr(s, '*') then\n        begin\n        addString(comments[i], commentMasks);\n        comments.Delete(i);\n        end\n      else\n        inc(i);\n      end;\n    end; // extractCommentsWithWildcards\n\n    // extract comment for \"fn\" from \"commentMasks\"\n    function getCommentByMaskFor(fn:string):string;\n    var\n      i: integer;\n      s, mask: string;\n    begin\n    for i:=0 to length(commentMasks)-1 do\n      begin\n      s:=commentMasks[i];\n      mask:=chop('=', s);\n      if fileMatch(mask, fn) then\n        begin\n        result:=s;\n        exit;\n        end;\n      end;\n    result:='';\n    end; // getCommentByMaskFor\n\n    procedure setBit(var i:integer; bits:integer; flag:boolean); inline;\n    begin\n    if flag then i:=i or bits\n    else i:=i and not bits;\n    end; // setBit\n\n{**\n\nthis would let us have \"=\" inside the names, but names cannot be assigned\n\n    procedure fixQuotedStringList(sl:Tstrings);\n    var\n      i: integer;\n      s: string;\n    begin\n    for i:=0 to sl.count-1 do\n      begin\n      s:=sl.names[i];\n      if (s = '') or (s[1] <> '\"') then continue;\n      s:=s+'='+sl.ValueFromIndex[i]; // reconstruct the line\n      sl.names[i]:=chop(nonQuotedPos('=', s), s);\n      sl.ValueFromIndex[i]:=s;\n      end;\n    end;\n}\n  var\n    f: Tfile;\n    sr: TSearchRec;\n    namesInVFS: TStringDynArray;\n    n: TtreeNode;\n    filteredOut: boolean;\n    i: integer;\n  begin\n  if (limit >= 0) and (actualCount >= limit) then exit;\n\n  // collect names in the VFS at this level. supposed to be faster than existsNodeWithName().\n  namesInVFS:=NIL;\n  n:=folder.node.getFirstChild();\n  while assigned(n) do\n    begin\n    addString(n.text, namesInVFS);\n    n:=n.getNextSibling();\n    end;\n\n  comments:=THashedStringList.create();\n  try\n    comments.caseSensitive:=FALSE;\n    try comments.loadFromFile(folder.resource+'\\'+COMMENTS_FILE);\n    except end;\n    loadIon(folder.resource, comments);\n    i:=if_((filesFilter='\\') or (urlFilesFilter='\\'), faDirectory, faAnyFile);\n    setBit(i, faSysFile, mainFrm.listfileswithsystemattributeChk.checked);\n    setBit(i, faHidden, mainFrm.listfileswithHiddenAttributeChk.checked);\n    if findfirst(folder.resource+'\\*', i, sr) <> 0 then exit;\n\n    try\n      extractCommentsWithWildcards();\n        repeat\n        application.ProcessMessages();\n        cd.lastActivityTime:=now();\n        // we don't list these entries\n        if (sr.name = '.') or (sr.name = '..')\n        or isCommentFile(sr.name) or isFingerprintFile(sr.name) or sameText(sr.name, DIFF_TPL_FILE)\n        or not hasRightAttributes(sr.attr)\n        or stringExists(sr.name, namesInVFS)\n        then continue;\n\n        filteredOut:=not fileMatch( if_(sr.Attr and faDirectory > 0, foldersFilter, filesFilter), sr.name)\n          or not fileMatch( if_(sr.Attr and faDirectory > 0, urlFoldersFilter, urlFilesFilter), sr.name);\n        // if it's a folder, though it was filtered, we need to recur\n        if filteredOut and (not recursive or (sr.Attr and faDirectory = 0)) then continue;\n\n        f:=Tfile.createTemp( folder.resource+'\\'+sr.name );\n        f.node:=folder.node; // temporary nodes are bound to the parent's node\n        if (FA_SOLVED_LNK in f.flags) and f.isFolder() then\n          // sorry, but we currently don't support lnk to folders in real-folders\n          begin\n          f.free;\n          continue;\n          end;\n        if filteredOut then\n          begin\n          recurOn(f);\n          // possible children added during recursion are linked back through the node field, so we can safely free the Tfile\n          f.free;\n          continue;\n          end;\n\n        f.comment:=comments.values[sr.name];\n        if f.comment = '' then\n          f.comment:=getCommentByMaskFor(sr.name);\n        f.comment:=macroQuote(unescapeNL(f.comment));\n\n        f.size:=0;\n        if f.isFile() then\n          if FA_SOLVED_LNK in f.flags then\n            begin\n            f.size:=sizeOfFile(f.resource);\n            if f.size < 0 then // doesn't exist\n              begin\n              f.free;\n              continue;\n              end\n            end\n          else\n            f.size:=sr.FindData.nFileSizeLow\n              +int64(sr.FindData.nFileSizeHigh) shl 32;\n        f.mtime:=filetimeToDatetime(sr.FindData.ftLastWriteTime);\n        addToListing(f);\n        until (findNext(sr) <> 0) or (cd.conn.state = HCS_DISCONNECTED) or (limit >= 0) and (actualCount >= limit);\n    finally findClose(sr) end;\n  finally comments.free  end\n  end; // includeFilesFromDisk\n\n  procedure includeItemsFromVFS();\n  var\n    f: Tfile;\n    sr: TSearchRec;\n    n: Ttreenode;\n  begin\n  { this folder has been dinamically generated, thus the node is not actually\n  { its own... skip }\n  if folder.isTemp() then exit;\n\n  // include (valid) items from the VFS branch\n  n:=folder.node.getFirstChild();\n  while assigned(n) and (cd.conn.state <> HCS_DISCONNECTED)\n  and ((limit < 0) or (actualCount < limit)) do\n    begin\n    cd.lastActivityTime:=now();\n\n    f:=n.data;\n    n:=n.getNextSibling();\n\n    // watching not allowed, to anyone\n    if (FA_HIDDEN in f.flags) or (FA_HIDDENTREE in f.flags) then continue;\n\n    // filtered out\n    if not fileMatch( if_(f.isFolder(), foldersfilter, filesfilter), f.name)\n    or not fileMatch( if_(f.isFolder(), urlFoldersfilter, urlFilesfilter), f.name)\n    // in this case we must continue recurring: other virtual items may be contained in this real folder, and this flag doesn't apply to them.\n    or (forArchive and f.isRealFolder() and (FA_DL_FORBIDDEN in f.flags)) then\n      begin\n      if recursive then recurOn(f);\n      continue;\n      end;\n\n    if not allowedTo(f) then continue;\n\n    if FA_VIRTUAL in f.flags then // links and virtual folders are virtual\n      begin\n      addToListing(f);\n      continue;\n      end;\n    if FA_UNIT in f.flags then\n      begin\n      if sysutils.directoryExists(f.resource+'\\') then\n        addToListing(f);\n      continue;\n      end;\n\n    // try to get more info about this item\n    if findFirst(f.resource, faAnyFile, sr) = 0 then\n      begin\n      try\n        // update size and time\n        with sr.FindData do f.size:=nFileSizeLow+int64(nFileSizeHigh) shl 32;\n        try f.mtime:=filetimeToDatetime(sr.FindData.ftLastWriteTime);\n        except f.mtime:=0 end;\n      finally findClose(sr) end;\n      if not hasRightAttributes(sr.attr) then continue;\n      end\n    else // why findFirst() failed? is it a shared folder?\n      if not sysutils.directoryExists(f.resource) then continue;\n    addToListing(f);\n    end;\n  end; // includeItemsFromVFS\n\n  function beginsOrEndsBy(ss:string; s:string):boolean;\n  begin result:=ansiStartsText(ss,s) or ansiEndsText(ss,s) end;\n\n  function par(k:string):string;\n  begin if cd = NIL then result:='' else result:=cd.urlvars.values[k] end;\n\nbegin\nresult:=toSkip;\nif doClear then dir:=NIL;\n\nif not folder.isFolder()\nor not folder.accessFor(cd)\nor folder.hasRecursive(FA_HIDDENTREE)\nor not (FA_BROWSABLE in folder.flags)\nthen exit;\n\nif assigned(cd) then\n  begin\n  if limit < 0 then\n    limit:=StrToIntDef(par('limit'), -1);\n  if toSkip < 0 then\n    toSkip:=StrToIntDef(par('offset'), -1);\n  if toSkip < 0 then\n    toSkip:=max(0, pred(strToIntDef(par('page'), 1))*limit);\n  end;\n\nactualCount:=length(dir);\nfolder.getFiltersRecursively(filesFilter, foldersFilter);\nif assigned(cd) and not ignoreConnFilter then\n  begin\n  urlFilesFilter:=par('files-filter');\n  if urlFilesFilter = '' then urlFilesFilter:=par('filter');\n  urlFoldersFilter:=par('folders-filter');\n  if urlFoldersFilter = '' then urlFoldersFilter:=par('filter');\n  if (urlFilesFilter+urlFoldersFilter = '') and (par('search') > '') then\n    begin\n    urlFilesFilter:=reduceSpaces(par('search'), '*');\n    if not beginsOrEndsBy('*', urlFilesFilter) then\n      urlFilesFilter:='*'+urlFilesFilter+'*';\n    urlFoldersFilter:=urlFilesFilter;\n    end;\n  end;\n// cache user options\nforArchive:=assigned(cd) and (cd.downloadingWhat = DW_ARCHIVE);\nseeProtected:=not mainfrm.hideProtectedItemsChk.Checked and not forArchive;\nnoEmptyFolders:=(urlFilesFilter = '') and folder.hasRecursive(FA_HIDE_EMPTY_FOLDERS);\ntry\n  if folder.isRealFolder() and not (FA_HIDDENTREE in folder.flags) and allowedTo(folder) then\n    includeFilesFromDisk();\n  includeItemsFromVFS();\nfinally setLength(dir, actualCount) end;\nresult:=toSkip;\nend; // fromFolder\n\nfunction isDownloading(data:TconnData):boolean;\nbegin\nresult:=assigned(data) and data.countAsDownload\n  and (data.conn.state in [HCS_REPLYING_BODY, HCS_REPLYING_HEADER, HCS_REPLYING])\nend; // isDownloading\n\nfunction isSendingFile(data:Tconndata):boolean;\nbegin\nresult:=assigned(data)\n  and (data.conn.state = HCS_REPLYING_BODY)\n  and (data.conn.reply.bodyMode in [RBM_FILE, RBM_STREAM])\n  and (data.downloadingWhat in [DW_FILE, DW_ARCHIVE])\nend; // isSendingFile\n\nfunction isReceivingFile(data:Tconndata):boolean;\nbegin result:=assigned(data) and (data.conn.state = HCS_POSTING) and (data.uploadSrc > '') end;\n\nfunction conn2data(p:Tobject):TconnData; inline; overload;\nbegin\nif p = NIL then result:=NIL\nelse result:=TconnData((p as ThttpConn).data)\nend; // conn2data\n\nfunction conn2data(i:integer):TconnData; inline; overload;\nbegin\ntry\n  if i < srv.conns.count then\n    result:=conn2data(srv.conns[i])\n  else\n    result:=conn2data(srv.offlines[i-srv.conns.count])\nexcept result:=NIL end\nend; // conn2data\n\nfunction conn2data(li:TlistItem):TconnData; inline; overload;\nbegin\nif li = NIL then\n  result:=NIL\nelse\n  result:=conn2data(li.index)\nend; // conn2data\n\nfunction countConnectionsByIP(ip:string):integer;\nvar\n  i: integer;\nbegin\nresult:=0;\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  if conn2data(i).address = ip then\n  \tinc(result);\n  inc(i);\n  end;\nend; // countConnectionsByIP\n\nfunction countDownloads(ip:string=''; user:string=''; f:Tfile=NIL):integer;\nvar\n  i: integer;\n  d: TconnData;\nbegin\nresult:=0;\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  d:=conn2data(i);\n  if isDownloading(d)\n  and ((f = NIL) or (assigned(d.lastFile) and d.lastFile.same(f)))\n  and ((ip = '') or addressMatch(ip, d.address))\n  and ((user = '') or sameText(user, d.user))\n  then\n    inc(result);\n  inc(i);\n  end;\nend; // countDownloads\n\nfunction countIPs(onlyDownloading:boolean=FALSE; usersInsteadOfIps:boolean=FALSE):integer;\nvar\n  i: integer;\n  d: TconnData;\n  ips: TStringDynArray;\nbegin\ni:=0;\nips:=NIL;\nwhile i < srv.conns.count do\n  begin\n  d:=conn2data(i);\n  if not onlyDownloading or isDownloading(d) then\n    addUniqueString(if_(usersInsteadOfIps, d.user, d.address), ips);\n  inc(i);\n  end;\nresult:=length(ips);\nend; // countIPs\n\nfunction idx_img2ico(i:integer):integer;\nbegin\nif (i < startingImagesCount) or (i >= USER_ICON_MASKS_OFS) then result:=i\nelse result:=i-startingImagesCount+USER_ICON_MASKS_OFS\nend;\n\nfunction idx_ico2img(i:integer):integer;\nbegin\nif i < USER_ICON_MASKS_OFS then result:=i\nelse result:=i-USER_ICON_MASKS_OFS+startingImagesCount\nend;\n\nfunction idx_label(i:integer):string;\nbegin result:=intToStr(idx_img2ico(i)) end;\n\nfunction gif2str(gif:TgifImage):ansistring;\nvar\n  stream: Tbytesstream;\nbegin\nstream:=Tbytesstream.create();\ngif.SaveToStream(stream);\nsetLength(result, stream.size);\nmove(stream.bytes[0], result[1], stream.size);\nstream.free;\nend; // gif2str\n\nfunction bmp2str(bmp:Tbitmap):ansistring;\nvar\n\tgif: TGIFImage;\nbegin\ngif:=TGIFImage.Create();\ntry\n  gif.ColorReduction:=rmQuantize;\n  gif.Assign(bmp);\n  result:=gif2str(gif);\nfinally gif.free;\n  end;\nend; // bmp2str\n\nfunction pic2str(idx:integer):ansistring;\nvar\n  ico: Ticon;\n  gif: TgifImage;\nbegin\nresult:='';\nif idx < 0 then exit;\nidx:=idx_ico2img(idx);\nif length(imagescache) <= idx then\n  setlength(imagescache, idx+1);\nresult:=imagescache[idx];\nif result > '' then exit;\n\nico:=Ticon.Create;\ngif:=TGifImage.Create;\ntry\n  mainfrm.images.getIcon(idx, ico);\n  gif.Assign(ico);\n  result:=gif2str(gif);\n  imagescache[idx]:=result;\nfinally\n  gif.Free;\n  ico.free;\n  end;\nend; // pic2str\n\nfunction str2pic(s:ansistring):integer;\nvar\n\tgif: TGIFImage;\nbegin\nfor result:=0 to mainfrm.images.count-1 do\n  if pic2str(result) = s then exit;\n// in case the pic was not found, it automatically adds it to the pool\ngif:=stringToGif(s);\ntry\n  result:=mainfrm.images.addMasked(gif.bitmap, gif.Bitmap.TransparentColor);\n  etags.values['icon.'+intToStr(result)] := strMD5(s);\nfinally gif.free end;\nend; // str2pic\n\nvar sysidx2index: Tint2int; // maps system imagelist icons to internal imagelist\n\nfunction getImageIndexForFile(fn:string):integer;\nvar\n  i, j: integer;\n  ico: Ticon;\n  shfi: TShFileInfo;\n  s: ansistring;\nbegin\nfillChar(shfi, SizeOf(TShFileInfo), 0);\n// documentation reports shGetFileInfo() to be working with relative paths too,\n// but it does not actually work without the expandFileName()\nshGetFileInfo( pchar(expandFileName(fn)), 0, shfi, SizeOf(shfi), SHGFI_SYSICONINDEX);\nif shfi.iIcon = 0 then\n  begin\n  result:=ICON_FILE;\n  exit;\n  end;\n// as reported by official docs\ndestroyIcon(shfi.hIcon);\n\nif sysidx2index = NIL then // firt time\n  sysidx2index:=Tint2int.Create();\ntry result:=sysidx2index[shfi.iIcon]; // already met?\nexcept\n  // found not, let's check deeper: byte comparison.\n  // we first add the ico to the list, so we can use pic2str()\n  ico:=Ticon.create();\n  try\n    systemimages.getIcon(shfi.iIcon, ico);\n    i:=mainfrm.images.addIcon(ico);\n    s:=pic2str(i);\n    etags.values['icon.'+intToStr(i)] := strMD5(s);\n  finally ico.free end;\n  // now we can search if the icon was already there, by byte comparison\n  for j in sysidx2index.Values do\n    if pic2str(j) = s then\n      begin // found, delete the duplicate\n      mainfrm.images.delete(i);\n      setlength(imagescache, i);\n      i:=j;\n      break;\n      end;\n  sysidx2index.Add(shfi.iIcon, i);\n  result:=i;\n  end;\nend; // getImageIndexForFile\n\nfunction getBaseTrayIcon(perc:real=0):Tbitmap;\nvar\n  x: integer;\nbegin\nresult:=Tbitmap.create();\nresult.Width:=16;\nresult.Height:=16;\nmainfrm.images.GetBitmap( if_(assigned(srv) and srv.active,24,30), result);\nif perc > 0 then\n  begin\n  x:=round(14*perc);\n  result.canvas.Brush.color:=clYellow;\n  result.Canvas.FillRect(rect(1,7,x+1,15));\n  result.canvas.Brush.color:=clGreen;\n  result.Canvas.FillRect(rect(x+1,7,15,15));\n  end;\nend; // getBaseTrayIcon\n\nprocedure drawTrayIconString(cnv:Tcanvas; s:string);\nvar\n  x, i, idx: integer;\nbegin\nx:=10;\nfor i:=length(s) downto 1 do\n\tbegin\n  if s[i] = '%' then idx:=10\n  else idx:=ord(s[i])-ord('0');\n  mainfrm.numbers.draw(cnv, x, 8, idx);\n  dec(x,mainfrm.numbers.Width);\n  end;\nend; // drawTrayIconString\n\nprocedure repaintTray();\nvar\n  bmp: Tbitmap;\n  s: string;\nbegin\nif quitting or (mainfrm = NIL) then exit;\nbmp:=getBaseTrayIcon();\ns:=trayShows;\nif s = 'connections' then s:=intTostr(srv.conns.count);\nif s = 'downloads' then s:=intToStr(downloadsLogged);\nif s = 'uploads' then s:=intToStr(uploadsLogged);\nif s = 'hits' then s:=intToStr(hitsLogged);\nif s = 'ips' then s:=intToStr(countIPs());\nif s = 'ips-ever' then s:=intToStr(ipsEverConnected.count);\n\ndrawTrayIconString(bmp.canvas, s);\ntray_ico.Handle:=bmpToHico(bmp);\ntray_ico.Transparent:=FALSE;\nbmp.free;\ntray.setIcon(tray_ico);\nend; // repaintTray\n\nprocedure resetTotals();\nbegin\nhitsLogged:=0;\ndownloadsLogged:=0;\nuploadsLogged:=0;\noutTotalOfs:=-srv.bytesSent;\ninTotalOfs:=-srv.bytesReceived;\nrepainttray();\nend; // resetTotals\n\nprocedure flash();\nbegin\nFlashWindow(application.handle, TRUE);\nif mainFrm.beepChk.checked then MessageBeep(MB_OK);\nend; // flash\n\nfunction localDNSget(ip:string):string;\nvar\n  i: integer;\nbegin\nfor i:=0 to length(address2name) div 2-1 do\n  if addressmatch(address2name[i*2+1], ip) then\n    begin\n    result:=address2name[i*2];\n    exit;\n    end;\nresult:='';\nend; // localDNSget\n\nfunction existsNodeWithName(name:string; parent:Ttreenode):boolean;\nvar\n  n: Ttreenode;\nbegin\nresult:=FALSE;\nif parent = NIL then parent:=rootNode;\nif parent = NIL then exit;\nwhile assigned(parent.data) and not Tfile(parent.data).isFolder() do\n  parent:=parent.parent;\nn:=parent.getFirstChild();\nwhile assigned(n) do\n  begin\n  result:=sameText(n.text, name);\n  if result then exit;\n  n:=n.getNextSibling();\n  end;\nend; // existsNodeWithName\n\nfunction getUniqueNodeName(start:string; parent:Ttreenode):string;\nvar\n  i: integer;\nbegin\nresult:=start;\nif not existsNodeWithName(result, parent) then exit;\ni:=2;\n  repeat\n  result:=format('%s (%d)', [start,i]);\n  inc(i);\n  until not existsNodeWithName(result, parent);\nend; // getUniqueNodeName\n\nprocedure updateDynDNS();\n\n  function interpretResponse(s:string):string;\n  const\n    ERRORS: array [1..10] of record code,msg:string; end = (\n      (code:'badauth';  msg:MSG_DDNS_badauth),\n      (code:'notfqdn';  msg:MSG_DDNS_notfqdn),\n      (code:'nohost';   msg:MSG_DDNS_nohost),\n      (code:'!yours';   msg:MSG_DDNS_notyours),\n      (code:'numhost';  msg:MSG_DDNS_numhost),\n      (code:'abuse';    msg:MSG_DDNS_abuse),\n      (code:'dnserr';   msg:MSG_DDNS_dnserr),\n      (code:'911';      msg:MSG_DDNS_911),\n      (code:'!donator'; msg:MSG_DDNS_notdonator),\n      (code:'badagent'; msg:MSG_DDNS_badagent)\n    );\n  var\n    i: integer;\n    code: string;\n  begin\n  s:=trim(s);\n  if s = '' then\n    begin\n    result:='no reply';\n    exit;\n    end;\n  code:='';\n  result:='successful';\n  code:=trim(lowercase(getTill(' ',s)));\n  if stringExists(code, ['good','nochg']) then exit;\n  for i:=1 to length(ERRORS) do\n    if code = ERRORS[i].code then\n      begin\n      result:='error: '+ERRORS[i].msg;\n      dyndns.active:=FALSE;\n      exit;\n      end;\n  result:='unknown reply: '+s;\n  end; // interpretResponse\n\nvar\n  s: string;\nbegin\nif externalIP = '' then exit;\nmainfrm.setStatusBarText('Updating dynamic DNS...');\ndyndns.lastTime:=now();\ntry s:=httpGet(replaceText(dyndns.url, '%ip%', externalIP));\nexcept s:='' end;\nif s > '' then dyndns.lastResult:=s;\nif not mainfrm.logOtherEventsChk.checked then exit;\nif length(s) > 30 then s:=intToStr(length(s))+' bytes reply'\nelse s:=interpretResponse(s);\nmainfrm.add2log('DNS update requested for '+dyndns.lastIP+': '+s);\nif dyndns.active then\n  dyndns.lastIP:=externalIP\nelse\n  msgDlg('DNS update failed.'#13+s+'.'#13'User intervention is required.', MB_ICONERROR);\nmainfrm.setStatusBarText('');\nend; // updateDynDNS\n\nprocedure disableUserInteraction();\nbegin\nif userInteraction.disabled then exit;\nuserInteraction.disabled:=TRUE;\nif mainFrm = NIL then userInteraction.bakVisible:=FALSE\nelse\n  begin\n  userInteraction.bakVisible:=mainfrm.visible;\n  mainfrm.visible:=FALSE;\n  end;\nend; // disableUserInteraction\n\nprocedure reenableUserInteraction();\nbegin\nif not userInteraction.disabled then exit;\nuserInteraction.disabled:=FALSE;\nif assigned(mainFrm) then\n  mainfrm.visible:=userInteraction.bakVisible;\nend; // reenableUserInteraction\n\n\nfunction getNewSID():string;\nbegin result:=replaceStr(base64encode(str_(now())+str_(random())), '=','') end;\n\nconstructor Tsession.create(const sid:string='');\nbegin\nid:=sid;\nif id = '' then\n  id:=getNewSID();\nsessions.Add(id, self);\ncreated:=now();\nttl:=1; // days\nkeepAlive();\nend;\n\ndestructor Tsession.Destroy;\nvar\n  o: Tobject;\n  cd: TconnData;\nbegin\nfor o in srv.conns do\n  begin\n  cd:=ThttpConn(o).data;\n  if cd.session = self then\n    cd.session:=NIL;\n  end;\nsessions.remove(id);\nfreeAndNIL(vars);\nend;\n\nprocedure Tsession.keepAlive();\nbegin expires:=now() + ttl end;\n\nprocedure Tsession.setTTL(t:Tdatetime);\nbegin\nttl:=t;\nkeepAlive();\nend;\n\nfunction Tsession.getVar(const k:string):string;\nbegin\ntry result:=vars.values[k];\nexcept result:=''\n  end;\nend; // sessionGet\n\nprocedure Tsession.setVar(const k, v:string);\nbegin\nif vars= NIL then\n  vars:=THashedStringList.create;\nvars.addPair(k,v);\nend;\n\nconstructor TconnData.create(conn:ThttpConn);\nbegin\nconn.data:=self;\nself.conn:=conn;\ntime:=now();\nlastActivityTime:=time;\ndownloadingWhat:=DW_UNK;\nurlvars:=THashedStringList.create();\nurlvars.lineBreak:='&';\ntplCounters:=TstringToIntHash.create();\nvars:=THashedStringList.create();\npostVars:=THashedStringList.create();\nend; // constructor\n\ndestructor TconnData.destroy;\nvar\n  i: integer;\nbegin\nfor i:=0 to vars.Count-1 do\n  if assigned(vars.Objects[i]) and (vars.Objects[i] <> currentCFGhashed) then\n    begin\n    vars.Objects[i].free;\n    vars.Objects[i]:=NIL;\n    end;\nfreeAndNIL(vars);\nfreeAndNIL(postVars);\nfreeAndNIL(urlvars);\nfreeAndNIL(tplCounters);\nfreeAndNIL(limiter);\n// do NOT free \"tpl\". It is just a reference to cached tpl. It will be freed only at quit time.\nif assigned(f) then\n  begin\n  closeFile(f^);\n  freeAndNIL(f);\n  end;\ninherited destroy;\nend; // destructor\n\nprocedure Tconndata.disconnect(reason:string);\nbegin\ndisconnectReason:=reason;\nconn.disconnect();\nend; // disconnect\n\nprocedure TconnData.logout();\nbegin\nfreeAndNIL(session);\naccount:=NIL;\nuser:='';\npwd:='';\nconn.delCookie(SESSION_COOKIE);\nend; // logout\n\n// we'll automatically free and previous temporary object\nprocedure TconnData.setLastFile(f:Tfile);\nbegin\nfreeIfTemp(FlastFile);\nFlastFile:=f;\nend;\n\nconstructor Tfile.create(fullpath:string);\nbegin\nfullpath:=ExcludeTrailingPathDelimiter(fullpath);\nicon:=-1;\nsize:=-1;\natime:=now();\nmtime:=atime;\nflags:=[];\nsetResource(fullpath);\nif (resource > '') and sysutils.directoryExists(resource) then\n  flags:=flags+[FA_FOLDER, FA_BROWSABLE];\nend; // create\n\nconstructor Tfile.createTemp(fullpath:string);\nbegin\ncreate(fullpath);\ninclude(flags, FA_TEMP);\nend; // createTemp\n\nconstructor Tfile.createVirtualFolder(name:string);\nbegin\nicon:=-1;\nsetResource('');\nflags:=[FA_FOLDER, FA_VIRTUAL, FA_BROWSABLE];\nself.name:=name;\natime:=now();\nmtime:=atime;\nend; // createVirtualFolder\n\nconstructor Tfile.createLink(name:string);\nbegin\nicon:=-1;\nsetName(name);\natime:=now();\nmtime:=atime;\nflags:=[FA_LINK, FA_VIRTUAL];\nend; // createLink\n\nprocedure Tfile.setResource(res:string);\n\n  function sameDrive(f1,f2:string):boolean;\n  begin\n  result:=(length(f1) >= 2) and (length(f2) >= 2) and (f1[2] = ':')\n    and (f2[2] = ':') and (upcase(f1[1]) = upcase(f2[1]));\n  end; // sameDrive\n\nvar\n  s: string;\nbegin\nif isExtension(res, '.lnk') or fileExists(res+'\\target.lnk') then\n  begin\n  s:=extractFileName(res);\n  if isExtension(s, '.lnk') then\n    setLength(s, length(s)-4);\n  setName(s);\n  lnk:=res;\n  res:=resolveLnk(res);\n  include(flags, FA_SOLVED_LNK);\n  end\nelse\n  exclude(flags, FA_SOLVED_LNK);\nres:=ExcludeTrailingPathDelimiter(res);\n\n// in this case, drive letter may change. useful with pendrives.\nif runningOnRemovable and sameDrive(exePath, res) then\n  delete(res, 1,2);\n\nresource:=res;\nif (length(res) = 2) and (res[2] = ':') then // logical unit\n  begin\n  include(flags, FA_UNIT);\n  if not isRoot() and not (FA_SOLVED_LNK in flags) then\n    setName(res);\n  end\nelse\n  begin\n  exclude(flags, FA_UNIT);\n  if not isRoot() and not (FA_SOLVED_LNK in flags) then\n    setName(extractFileName(res));\n  end;\nsize:=-1;\nend; // setResource\n\nprocedure Tfile.setName(name:string);\nbegin\nself.name:=name;\nif node = NIL then exit;\nnode.Text:=name;\nend; // setName\n\nfunction Tfile.same(f:Tfile):boolean;\nbegin result:=(self = f) or (resource = f.resource) end;\n\nfunction Tfile.toggle(att:TfileAttribute):boolean;\nbegin\nif att in flags then exclude(flags, att)\nelse include(flags, att);\nresult:=att in flags\nend;\n\nfunction Tfile.isRoot():boolean;\nbegin result:=FA_ROOT in flags end;\n\nfunction Tfile.isFolder():boolean;\nbegin result:=FA_FOLDER in flags end;\n\nfunction Tfile.isLink():boolean;\nbegin result:=FA_LINK in flags end;\n\nfunction Tfile.isTemp():boolean;\nbegin result:=FA_TEMP in flags end;\n\nfunction Tfile.isFile():boolean;\nbegin result:=not ((FA_FOLDER in flags) or (FA_LINK in flags)) end;\n\nfunction Tfile.isFileOrFolder():boolean;\nbegin result:=not (FA_LINK in flags) end;\n\nfunction Tfile.isRealFolder():boolean;\nbegin result:=(FA_FOLDER in flags) and not (FA_VIRTUAL in flags) end;\n\nfunction Tfile.isVirtualFolder():boolean;\nbegin result:=(FA_FOLDER in flags) and (FA_VIRTUAL in flags) end;\n\nfunction Tfile.isEmptyFolder(cd:TconnData=NIL):boolean;\nvar\n  listing: TfileListing;\nbegin\nresult:=FALSE;\nif not isFolder() then exit;\nlisting:=TfileListing.create();\n//** i fear it is not ok to use fromFolder() to know if the folder is empty, because it gives empty also for unallowed folders. \nlisting.fromFolder( self, cd, FALSE, 1 );\nresult:= length(listing.dir) = 0;\nlisting.free;\nend; // isEmptyFolder\n\n// uses comments file\nfunction Tfile.getDynamicComment(skipParent:boolean=FALSE):string;\nvar\n  comments: THashedStringList;\nbegin\ntry\n  result:=comment;\n  if result > '' then exit;\n  if mainfrm.loadSingleCommentsChk.checked then\n    result:=loadTextFile(resource+COMMENT_FILE_EXT);\n  if (result > '') or skipParent then exit;\n  comments:=THashedStringList.create();\n  try\n    try\n      comments.CaseSensitive:=FALSE;\n      comments.LoadFromFile(resource+'\\..\\'+COMMENTS_FILE);\n      result:=comments.values[name];\n    except end\n  finally\n    if result = '' then\n      begin\n      loadIon(resource+'\\..', comments);\n      result:=comments.values[name];\n      end;\n    if result > '' then\n      result:=unescapeNL(result);\n    comments.free\n  end;\nfinally result:=macroQuote(result) end;\nend; // getDynamicComment\n\nprocedure Tfile.setDynamicComment(cmt:string);\nvar\n  s, path, name: string;\n  i: integer;\nbegin\nif not isTemp() then\n  begin\n  comment:=cmt; // quite easy\n  exit;\n  end;\npath:=resource+COMMENT_FILE_EXT;\nif fileExists(path) then\n  begin\n  if cmt='' then\n    deleteFile(path)\n  else\n    saveTextFile(path, cmt);\n  exit;\n  end;\nname:=extractFileName(resource);\n\n// we prefer descript.ion, but if its support was disabled,\n// or it doesn't exist while hfs.comments.txt does, then we'll use the latter\npath:=extractFilePath(resource)+COMMENTS_FILE;\nif not mainfrm.supportDescriptionChk.checked\nor fileExists(path) and not fileExists(extractFilePath(resource)+DESCRIPT_ION) then\n  saveTextfile(path, setKeyInString(loadTextFile(path), name, escapeNL(cmt)));\n\nif not mainfrm.supportDescriptionChk.checked then exit;\n\npath:=extractFilePath(resource)+DESCRIPT_ION;\ntry\n  s:=loadDescriptionFile(path);\n  cmt:=escapeIon(cmt); // that's how multilines are handled in this file\n  i:=findNameInDescriptionFile(s, name);\n  if i = 0 then // not found\n    if cmt='' then // no comment, we are good\n      exit\n    else\n      s:=s+quoteIfAnyChar(' ', name)+' '+cmt+CRLF // append\n  else // found, then replace\n    if cmt='' then\n      replace(s, '', i, findEOL(s, i)) // remove the whole line\n    else\n      begin\n      i:=nonQuotedPos(' ', s, i); // replace just the comment\n      replace(s, cmt, i+1, findEOL(s, i, FALSE));\n      end;\n  if s='' then\n    deleteFile(path)\n  else\n    saveTextFile(path, s);\nexcept end;\nend; // setDynamicComment\n\nprocedure fixTreeStructure(n: TTreeNode);\nvar\n  i: integer;\nbegin\nTfile(n.data).node:=n;\nfor i:=0 to n.count-1 do\n  fixTreeStructure(n.Item[i])\nend; // fixTreeStructure\n\nfunction Tfile.getParent():Tfile;\nbegin\nif node = NIL then \n  begin\n  result:=NIL;\n  exit;\n  end;\nif node.data <> self then // the tree structure is unreliable, at least on DISPLAYCHANGE event. This will workaround it\n  fixTreeStructure(mainFrm.filesBox.Items[0]);\nif isTemp() then result:=nodeToFile(node)\nelse if node.parent = NIL then result:=NIL\nelse result:=node.parent.data\nend; // getParent\n\nfunction Tfile.getDLcount():integer;\nbegin\nif isFolder() then result:=getDLcountRecursive()\nelse if isTemp() then result:=autoupdatedFiles.getInt(resource)\nelse result:=FDLcount;\nend; // getDLcount\n\nprocedure Tfile.setDLcount(i:integer);\nbegin\nif isTemp() then autoupdatedFiles.setInt(resource, i)\nelse FDLcount:=i;\nend; // setDLcount\n\nfunction Tfile.getDLcountRecursive():integer;\nvar\n  n: Ttreenode;\n  i: integer;\n  f: Tfile;\nbegin\nif not isFolder() then\n  begin\n  result:=DLcount;\n  exit;\n  end;\nresult:=0;\nif node = NIL then exit;\nn:=node.getFirstChild();\nif not isTemp() then\n  while assigned(n) do\n    begin\n    f:=nodeToFile(n);\n    if assigned(f) then\n      if f.isFolder() then inc(result, f.getDLcountRecursive())\n      else inc(result, f.FDLcount);\n    n:=n.getNextSibling();\n    end;\nif isRealFolder() then\n  for i:=0 to autoupdatedFiles.count-1 do\n    if ansiStartsText(resource, autoupdatedFiles[i]) then\n      inc(result, autoupdatedFiles.getIntByIdx(i));\nend; // getDLcountRecursive\n\nfunction Tfile.diskfree():int64;\nbegin\nif FA_VIRTUAL in flags then result:=0\nelse result:=diskSpaceAt(resource);\nend; // diskfree\n\nprocedure Tfile.setupImage(newIcon:integer);\nbegin\nicon:=newIcon;\nsetupImage();\nend; // setupImage\n\nprocedure Tfile.setupImage();\nbegin\nif icon >= 0 then node.Imageindex:=icon\nelse node.ImageIndex:=getIconForTreeview();\nnode.SelectedIndex:=node.imageindex;\nend; // setupImage\n\nfunction Tfile.getIconForTreeview():integer;\nbegin\nif FA_UNIT in flags then result:=ICON_UNIT\nelse if FA_ROOT in flags then result:=ICON_ROOT\nelse if FA_LINK in flags then result:=ICON_LINK\nelse\n  if FA_FOLDER in flags then\n    if FA_VIRTUAL in flags then result:=ICON_FOLDER\n    else result:=ICON_REAL_FOLDER\n  else\n    if mainfrm.useSystemIconsChk.checked and (resource > '') then\n      result:=getImageIndexForFile(resource) // skip iconsCache\n    else\n      result:=ICON_FILE;\nend; // getIconForTreeview\n\nfunction encodeURL(s:string; forceEncodedSpaces:boolean=FALSE):string;\nbegin\nresult:=HSlib.encodeURL(s, mainFrm.encodeNonasciiChk.checked,\n  forceEncodedSpaces or mainFrm.encodeSpacesChk.checked)\nend; // encodeURL\n\nfunction protoColon():string;\nconst\n  LUT: array [boolean] of string = ('http://','https://');\nbegin\nresult:=LUT[mainFrm.httpsUrlsChk.checked];\nend; // protoColon\n\nfunction Tfile.relativeURL(fullEncode:boolean=FALSE):string;\nbegin\nif isLink() then result:=replaceText(resource, '%ip%', defaultIP)\nelse if isRoot() then result:=''\nelse result:=encodeURL(name, fullEncode)+if_(isFolder(),'/')\nend;\n\nfunction Tfile.pathTill(root:Tfile=NIL; delim:char='\\'):string;\nvar\n  f: Tfile;\nbegin\nresult:='';\nif self = root then exit;\nresult:=name;\nf:=parent;\nif isTemp() then\n  begin\n  if FA_SOLVED_LNK in flags then\n    result:=extractFilePath(copy(lnk,length(f.resource)+2, MAXINT))+name // the path is the one of the lnk, but we have to replace the file name as the lnk can make it\n  else\n    result:=copy(resource, length(f.resource)+2, MAXINT);\n  if delim <> '\\' then result:=replaceStr(result, '\\', delim);\n  end;\nwhile assigned(f) and (f <> root) and (f <> rootFile) do\n  begin\n  result:=f.name+delim+result;\n  f:=f.parent;\n  end;\nend; // pathTill\n\nfunction Tfile.url(fullEncode:boolean=FALSE):string;\nbegin\nassert(node<>NIL, 'node can''t be NIL');\nif isLink() then result:=relativeURL(fullEncode)\nelse result:='/'+encodeURL(pathTill(rootFile,'/'), fullEncode)\n  +if_(isFolder() and not isRoot(), '/');\nend; // url\n\nfunction Tfile.getFolder():string;\nvar\n  f: Tfile;\n  s: string;\nbegin\nresult:='/';\nf:=parent;\nwhile assigned(f) and assigned(f.parent) do\n  begin\n  result:='/'+f.name+result;\n  f:=f.parent;\n  end;\nif not isTemp() then exit;\nf:=parent; // f now points to the non-temporary ancestor item\ns:=extractFilePath(resource);\ns:=copy( s, length(f.resource)+2, length(s) );\nresult:=result+replaceStr(s, '\\','/');\nend; // getFolder\n\nfunction Tfile.fullURL(ip, user, pwd:string):string;\nconst userPwdHashCache:Tstr2str = NIL;\nvar s,k,base: string;\nbegin\nif userPwdHashCache = NIL then\n  userPwdHashCache:=Tstr2str.Create();\nbase:=fullURL(ip)+'?';\nk:=user+':'+pwd;\ntry result:=base+userPwdHashCache[k]\nexcept\n  s:='mode=auth&u='+encodeURL(user);\n  s:=s+'&s2='+strSHA256(s+pwd); // sign with password\n  userPwdHashCache.add(k,s);\n  result:=base+s;\n  end;\nend; // fullURL\n\nfunction Tfile.fullURL(ip:string=''):string;\nbegin\nresult:=url();\nif isLink() then\n  exit;\nif assigned(srv) and srv.active\nand (srv.port <> '80') and (pos(':',ip) = 0)\nand not mainfrm.noPortInUrlChk.checked then\n  result:=':'+srv.port+result;\nif ip = '' then\n  ip:=defaultIP;\nresult:=protoColon()+ip+result;\nend; // fullURL\n\nfunction Tfile.isDLforbidden():boolean;\nvar\n  f: Tfile;\nbegin\n// the flag can be in this node\nresult:=FA_DL_FORBIDDEN in flags;\nif result or not isTemp() then exit;\nf:=nodeToFile(node);\nresult:=assigned(f) and (FA_DL_FORBIDDEN in f.flags);\nend; // isDLforbidden\n\nfunction Tfile.isNew():boolean;\nvar\n  t: Tdatetime;\nbegin\nif FA_TEMP in flags then t:=mtime\nelse t:=atime;\nresult:=(filesStayFlaggedForMinutes > 0)\n  and (trunc(abs(now()-t)*24*60) <= filesStayFlaggedForMinutes)\nend; // isNew\n\nfunction getFiles(mask:string):TStringDynArray;\nvar\n  sr: TSearchRec;\nbegin\nresult:=NIL;\nif findFirst(mask, faAnyFile, sr) = 0 then\n  try\n    repeat addString(sr.name, result)\n    until findNext(sr) <> 0;\n  finally findClose(sr) end;\nend; // getFiles\n\nfunction Tfile.getRecursiveDiffTplAsStr(outInherited:Pboolean=NIL; outFromDisk:Pboolean=NIL):string;\nvar\n  basePath, runPath, s, fn, diff: string;\n  f: Tfile;\n  first: boolean;\n\n  function add2diff(s:string):boolean;\n  begin\n  result:=FALSE;\n  if s = '' then exit;\n  diff:=s\n    + ifThen((diff > '') and not ansiEndsStr(CRLF,s), CRLF)\n    + ifThen((diff > '') and not isSectionAt(@diff[1]), '[]'+CRLF)\n    + diff;\n  result:=TRUE;\n  end; // add2diff\n\nbegin\nresult:='';\ndiff:='';\nrunPath:='';\nf:=self;\nif assigned(outInherited) then outInherited^:=FALSE;     \nif assigned(outFromDisk) then outFromDisk^:=FALSE;\nfirst:=TRUE;\nwhile assigned(f) do\n  begin\n  if f.isRealFolder() then\n    if f.isTemp() then\n      begin\n      basePath:=excludeTrailingPathDelimiter( extractFilePath(f.parent.resource) );\n      runPath:=copy(f.resource, length(basePath)+2, length(f.resource));\n      f:=f.parent;\n      end\n    else\n      begin\n      basePath:=excludeTrailingPathDelimiter(extractFilePath(f.resource));\n      runPath:=extractFileName(f.resource);\n      end;\n  // temp realFolder will cycle more than once, while non-temp only once\n  while runPath > '' do\n    begin\n    if add2diff(loadTextFile(basePath+'\\'+runPath+'\\'+DIFF_TPL_FILE)) and assigned(outFromDisk) then\n      outFromDisk^:=TRUE;\n    runPath:=excludeTrailingPathDelimiter(ExtractFilePath(runPath));\n    end;\n  // consider the diffTpl in node\n  s:=f.diffTpl;\n  if (s > '') and singleLine(s) then\n    begin\n    // maybe it refers to a file\n    fn:=trim(s);\n    if fileExists(fn) then doNothing()\n    else if fileExists(exePath+fn) then fn:=exePath+fn\n    else if fileExists(f.resource+'\\'+fn) then fn:=f.resource+'\\'+fn;\n    if fileExists(fn) then s:=loadTextFile(fn);\n    end;\n  if add2diff(s) and not first and assigned(outInherited) then\n    outInherited^:=TRUE;\n  f:=f.parent;\n  first:=FALSE;\n  end;\nfor s in sortArray(getFiles(exePath+'*.diff.tpl')) do\n  add2diff(loadTextFile(s));\nresult:=diff;\nend; // getRecursiveDiffTplAsStr\n\nfunction Tfile.getDefaultFile():Tfile;\nvar\n  f: Tfile;\n  mask, s: string;\n  sr: TsearchRec;\n  n: Ttreenode;\nbegin\nresult:=NIL;\nmask:=getRecursiveFileMask();\nif mask = '' then exit;\n\nn:=node.getFirstChild();\n{ if this folder has been dinamically generated, the treenode is not actually\n{ its own, and we won't care about subitems }\nif not isTemp() then\n  while assigned(n) do\n    begin\n    f:=n.data;\n    n:=n.getNextSibling();\n    if (FA_LINK in f.flags) or f.isFolder()\n    or not fileMatch(mask, f.name) or not fileExists(f.resource) then continue;\n    result:=f;\n    exit;\n    end;\n\nif not isRealFolder() or not sysutils.directoryExists(resource) then exit;\n\nwhile mask > '' do\n  begin\n  s:=chop(';', mask);\n  if findFirst(resource+'\\'+s, faAnyFile-faDirectory, sr) <> 0 then continue;\n  try\n    // encapsulate for returning\n    result:=Tfile.createTemp(resource+'\\'+sr.name);\n    result.node:=node; // temporary nodes are bound to the parent's node\n  finally findClose(sr) end;\n  exit;\n  end;\nend; // getDefaultFile\n\nfunction Tfile.shouldCountAsDownload():boolean;\nvar\n  f: Tfile;\n  mask: string;\nbegin\nresult:=not (FA_DONT_COUNT_AS_DL in flags);\nif not result then exit;\nf:=self;\n  repeat\n  mask:=f.dontCountAsDownloadMask;\n  f:=f.parent;\n  until (f = NIL) or (mask > '');\nif mask > '' then result:=not fileMatch(mask, name)\nend; // shouldCountAsDownload\n\nfunction Tfile.getShownRealm():string;\nvar\n  f: Tfile;\nbegin\nf:=self;\n  repeat\n  result:=f.realm;\n  if result > '' then exit;\n  f:=f.parent;\n  until f = NIL;\nif mainfrm.useCommentAsRealmChk.checked then\n  result:=getDynamicComment();\nend; // getShownRealm\n\nfunction Tfile.parentURL():string;\nvar\n  i: integer;\nbegin\nresult:=url(TRUE);\ni:=length(result)-1;\nwhile (i > 1) and (result[i] <> '/') do dec(i);\nsetlength(result,i);\nend; // parentURL\n\nfunction Tfile.getSystemIcon():integer;\nvar\n  ic: PcachedIcon;\n  i: integer;\nbegin\nresult:=icon;\nif result >= 0 then exit;\nif isFile() then\n  for i:=0 to length(iconMasks)-1 do\n    if fileMatch(iconMasks[i].str, name) then\n      begin\n      result:=iconMasks[i].int;\n      exit;\n      end;\nic:=iconsCache.get(resource);\nif ic = NIL then\n  begin\n  result:=getImageIndexForFile(resource);\n  iconsCache.put(resource, result, mtime);\n  exit;\n  end;\nif mtime <= ic.time then result:=ic.idx\nelse\n  begin\n  result:=getImageIndexForFile(resource);\n  ic.time:=mtime;\n  ic.idx:=result;\n  end;\nend; // getSystemIcon\n\nprocedure Tfile.lock();\nbegin locked:=TRUE end;\n\nprocedure Tfile.unlock();\nbegin locked:=FALSE end;\n\nfunction Tfile.isLocked():boolean;\nvar\n  f: Tfile;\n  n: Ttreenode;\nbegin\n// check ancestors (first, because it is always fast)\nf:=self;\n  repeat\n  result:=f.locked;\n  f:=f.parent;\n  until (f = NIL) or result;\n// check descendants\nn:=node.getFirstChild();\nwhile assigned(n) and not result do\n  begin\n  result:=nodeToFile(n).isLocked();\n  n:=n.getNextSibling();\n  end;\nend; // isLocked\n\nprocedure Tfile.recursiveApply(callback:TfileCallback; par:integer=0; par2:integer=0);\nvar\n  n, next: Ttreenode;\n  r: TfileCallbackReturn;\nbegin\nr:=callback(self, FALSE, par, par2);\nif FCB_DELETE in r then\n  begin\n  node.delete();\n  exit;\n  end;\nif FCB_NO_DEEPER in r then exit;\nn:=node.getFirstChild();\nwhile assigned(n) do\n  begin\n  next:=n.getNextSibling(); // \"next\" must be saved this point because the callback may delete the current node\n  if assigned(n.data) then nodeToFile(n).recursiveApply(callback, par, par2);\n  n:=next;\n  end;\nif FCB_RECALL_AFTER_CHILDREN in r then\n  begin\n  r:=callback(self, TRUE, par, par2);\n  if FCB_DELETE in r then node.delete();\n  end;\nend; // recursiveApply\n\nfunction Tfile.hasRecursive(attributes: TfileAttributes; orInsteadOfAnd:boolean=FALSE; outInherited:Pboolean=NIL):boolean;\nvar\n  f: Tfile;\nbegin\nresult:=FALSE;\nf:=self;\nif assigned(outInherited) then outInherited^:=FALSE;\nwhile assigned(f) do\n  begin\n  result:=orInsteadOfAnd and (attributes*f.flags <> [])\n    or (attributes*f.flags = attributes);\n  if result then exit;\n  f:=f.parent;\n  if assigned(outInherited) then outInherited^:=TRUE;\n  end;\nif assigned(outInherited) then outInherited^:=FALSE; // grant it is set only if result=TRUE\nend; // hasRecursive\n\nfunction Tfile.hasRecursive(attribute: TfileAttribute; outInherited:Pboolean=NIL):boolean;\nbegin result:=hasRecursive([attribute], FALSE, outInherited) end;\n\nfunction Tfile.accessFor(cd:TconnData):boolean;\nbegin\nif cd = NIL then result:=accessFor('', '')\nelse result:=accessFor(cd.user, cd.pwd)\nend; // accessFor\n\nfunction Tfile.accessFor(username, password:string):boolean;\nvar\n  a: Paccount;\n  f: Tfile;\n  list: TStringDynArray;\nbegin\nresult:=FALSE;\nif isFile() and isDLforbidden() then exit;\nresult:=FALSE;\nf:=self;\nwhile assigned(f) do\n  begin\n  list:=f.accounts[FA_ACCESS]; // shortcut\n  \n  if (username = '') and stringExists(USER_ANONYMOUS, list, TRUE) then break;\n  // first check in user/pass\n  if (f.user > '') and sameText(f.user, username) and (f.pwd = password) then break;\n  // then in accounts\n  if assigned(list) then\n    begin\n    a:=getAccount(username);\n\n    if stringExists(USER_ANYONE, list, TRUE) then break;\n    // we didn't match the user/pass, but this file is restricted, so we must have an account at least to access it\n    if assigned(a) and (a.pwd = password) and\n      (stringExists(USER_ANY_ACCOUNT, list, TRUE) or (findEnabledLinkedAccount(a, list, TRUE) <> NIL))\n    then break;\n      \n    exit;\n    end;\n  // there's a user/pass restriction, but the password didn't match (if we got this far). We didn't exit before to give accounts a chance.\n  if f.user > '' then exit;\n\n  f:=f.parent;\n  end;\nresult:=TRUE;\n\n// in case the file is not protected, we must not accept authentication credentials belonging to disabled accounts\nif (username > '') and (f = NIL) then\n  begin\n  a:=getAccount(username);\n  if a = NIL then exit;\n  result:=a.enabled;\n  end;\nend; // accessFor\n\nfunction Tfile.getRecursiveFileMask():string;\nvar\n  f: Tfile;\nbegin\nf:=self;\n  repeat\n  result:=f.defaultFileMask;\n  if result > '' then exit;\n  f:=f.parent;\n  until f = NIL;\nend; // getRecursiveFileMask\n\nfunction Tfile.getAccountsFor(action:TfileAction; specialUsernames:boolean=FALSE; outInherited:Pboolean=NIL):TstringDynArray;\nvar\n  i: integer;\n  f: Tfile;\n  s: string;\nbegin\nresult:=NIL;\nf:=self;\nif assigned(outInherited) then outInherited^:=FALSE;\nwhile assigned(f) do\n  begin\n  for i:=0 to length(f.accounts[action])-1 do\n  \tbegin\n    s:=f.accounts[action][i];\n    if (s = '')\n    or (action = FA_UPLOAD) and not f.isRealFolder() then continue; // we must ignore this setting\n\n    if specialUsernames and (s[1] = '@')\n    or accountExists(s, specialUsernames) then // we admit groups only if specialUsernames are admitted too\n      addString(s, result);\n    end;\n  if (action = FA_ACCESS) and (f.user > '') then addString(f.user, result);\n  if assigned(result) then exit;\n  if assigned(outInherited) then outInherited^:=TRUE;\n  f:=f.parent;\n  end;\nend; // getAccountsFor\n\nprocedure Tfile.getFiltersRecursively(var files,folders:string);\nvar\n  f: Tfile;\nbegin\nfiles:='';\nfolders:='';\nf:=self;\nwhile assigned(f) do\n  begin\n  if (files = '') and (f.filesfilter > '') then files:=f.filesFilter;\n  if (folders = '') and (f.foldersfilter > '') then folders:=f.foldersFilter;\n  if (files > '') and (folders > '') then break;\n  f:=f.parent;\n  end;\nend; // getFiltersRecursively\n\nprocedure kickByIP(ip:string);\nvar\n  i: integer;\n  d: TconnData;\nbegin\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  d:=conn2data(i);\n  if assigned(d) and (d.address = ip) or (ip = '*') then\n    d.disconnect(first(d.disconnectReason, 'kicked'));\n  inc(i);\n  end;\nend; // kickByIP\n\nfunction getSafeHost(cd:TconnData):string;\nbegin\nresult:='';\nif cd = NIL then exit;\nif addressmatch(forwardedMask, cd.conn.address) then\n  result:=cd.conn.getHeader('x-forwarded-host');\nif result = '' then\n  result:=cd.conn.getHeader('host');\nresult:=stripChars(result, ['0'..'9','a'..'z','A'..'Z',':','.','-','_'], TRUE);\nend; // getSafeHost\n\nfunction nodeIsLocked(n:Ttreenode):boolean;\nbegin\nresult:=FALSE;\nif (n = NIL) or (n.data = NIL) then exit;\nresult:=nodeToFile(n).isLocked();\nend; // nodeIsLocked\n\nfunction objByIP(ip:string):TperIp;\nvar\n  i: integer;\nbegin\ni:=ip2obj.indexOf(ip);\nif i < 0 then\n  i:=ip2obj.add(ip);\nif ip2obj.objects[i] = NIL then\n  ip2obj.objects[i]:=TperIp.create();\nresult:=ip2obj.objects[i] as TperIp;\nend; // objByIP\n\nfunction Tmainfrm.findFilebyURL(url:string; parent:Tfile=NIL; allowTemp:boolean=TRUE):Tfile;\n\n  procedure workTheRestByReal(rest:string; f:Tfile);\n  var\n    s: string;\n  begin\n  if not allowTemp then exit;\n\n  s:=rest; // just a shortcut\n  if dirCrossing(s) then exit;\n\n  s:=includeTrailingPathDelimiter(f.resource)+s; // we made the \"..\" test before, so relative paths are allowed in the VFS\n  if not fileOrDirExists(s) and fileOrDirExists(s+'.lnk') then\n    s:=s+'.lnk';\n  if not fileOrDirExists(s) or not hasRightAttributes(s) then\n    exit;\n  // found on disk, we need to build a temporary Tfile to return it\n  result:=Tfile.createTemp(s);\n  // the temp file inherits flags from the real folder\n  if FA_DONT_LOG in f.flags then\n    include(result.flags, FA_DONT_LOG);\n  if not (FA_BROWSABLE in f.flags) then\n    exclude(result.flags, FA_BROWSABLE);\n  // temp nodes are bound to parent's node\n  result.node:=f.node;\n  end; // workTheRestByReal\n\nvar\n  parts: TStringDynArray;\n  s: string;\n  cur, n: Ttreenode;\n  found: boolean;\n  f: Tfile;\n  i, j: integer;\n\n  function workDots():boolean;\n  label REMOVE;\n  var\n    i: integer;\n  begin\n  result:=FALSE;\n  i:=0;\n  while i < length(parts) do\n    begin\n    if parts[i] = '.' then\n      goto REMOVE; // 10+ years have passed since the last time i used labels in pascal. It's a thrill. \n    if parts[i] <> '..' then\n      begin\n      inc(i);\n      continue;\n      end;\n    if i > 0 then\n      begin\n      removeString(parts, i-1, 2);\n      dec(i);\n      continue;\n      end;\n    parent:=parent.parent;\n    if parent = NIL then exit;\n    REMOVE:\n    removeString(parts, i, 1);\n    end;\n  result:=TRUE;\n  end; // workDots\n\nbegin\nresult:=NIL;\nif (url = '') or anycharIn(#0, url) then exit;\nif parent = NIL then\n  parent:=rootFile;\nurl:=replaceStr(url, '//', '/');\nif url[1] = '/' then\n  begin\n  delete(url, 1,1);  // remove initial \"/\"\n  parent:=rootFile; // it's an absolute path, not relative\n  end;\nexcludeTrailingString(url, '/');\nparts:=split('/', url);\nif not workDots() then exit;\n\nif parent.isTemp() then\n  begin\n  workTheRestByReal(url, parent);\n  exit;\n  end;\n\ncur:=parent.node;   // we'll move using treenodes\nfor i:=0 to length(parts)-1 do\n  begin\n  s:=parts[i];\n  if s = '' then exit; // no support for null filenames\n  found:=FALSE;\n  // search inside the VFS\n  n:=cur.getFirstChild();\n  while assigned(n) do\n    begin\n    found:=sameText(n.text, s);\n    if found then break;\n    n:=n.getNextSibling();\n    end;\n  if not found then // this piece was not found the virtual way\n    begin\n    f:=cur.data;\n    if f.isRealFolder() then // but real folders have not all the stuff loaded and ready. we have another way to walk.\n      begin\n      for j:=i+1 to length(parts)-1 do\n        s:=s+'\\'+parts[j];\n      workTheRestByReal(s, f);\n      end;\n    exit;\n    end;\n  cur:=n;\n  if cur = NIL then exit;\n  end;\nresult:=cur.data;\nend; // findFileByURL\n\nfunction fileExistsByURL(url:string):boolean;\nvar\n  f: Tfile;\nbegin\nf:=mainFrm.findFilebyURL(url);\nresult:=assigned(f);\nfreeIfTemp(f);\nend; // fileExistsByURL\n\nfunction getAccountList(users:boolean=TRUE; groups:boolean=TRUE):TstringDynArray;\nvar\n  i, n: integer;\nbegin\nsetLength(result, length(accounts));\nn:=0;\nfor i:=0 to length(result)-1 do\n  with accounts[i] do\n    if group and groups\n    or not group and users\n    then\n      begin\n      result[n]:=user;\n      inc(n);\n      end;\nsetlength(result, n);\nend; // getAccountList\n\nfunction banAddress(ip:string):boolean;\nresourcestring\n  MSG = 'There are %d open connections from this address.'#13+\n        'Do you want to kick them all now?';\n  MSG2 = 'You can edit the address.'#13'Masks and ranges are allowed.';\nvar\n  i: integer;\n  comm: string;\nbegin\nresult:=FALSE;\nmainfrm.setFocus();\nif not InputQuery('IP mask',MSG2,ip) then exit;\n\nfor i:=0 to length(banlist)-1 do\n  if banlist[i].ip = ip then\n    begin\n    msgDlg('This IP address is already banned', MB_ICONWARNING);\n    exit;\n    end;\n\ncomm:='';\nif not InputQuery('Ban comment','A comment for this ban...',comm) then exit;\n\ni:=length(banlist);\nsetlength(banlist, i+1);\nbanlist[i].ip:=ip;\nbanlist[i].comment:=comm;\n\ni:=countConnectionsByIP(ip);\nif (i > 0) and (msgDlg(format(MSG,[i]), MB_ICONQUESTION+MB_YESNO) = IDYES) then\n  kickByIP(ip);\nresult:=TRUE;\nend; // banAddress\n\nfunction createFingerprint(fn:string):string;\nvar\n  fs: Tfilestream;\n  md5: THashMD5;\n  buf: array [1..32*1024] of byte;\n  n: integer;\nbegin\nmd5.Reset();\nfs:=TfileStream.create(fn, fmOpenRead+fmShareDenyWrite);\ntry\n  repeat\n  n:=fs.Read(buf, sizeof(buf));\n  md5.update(buf, n);\n  if not progFrm.visible then continue;\n  progFrm.progress:=safeDiv(0.0+fs.position, fs.size);\n  application.processMessages();\n  if progFrm.cancelRequested then exit;\n  until n < sizeof(buf);\nfinally fs.free\n  end;\nresult:=md5.HashAsString();\nend; // createFingerprint\n\nfunction uptimestr():string;\nvar\n  t: Tdatetime;\nbegin\nresult:='server down';\nif not srv.active then exit;\nt:=now()-uptime;\nresult:=if_(t>1, format('(%d days) ',[trunc(t)]) )\n  +formatDateTime('hh:nn:ss',t)\nend; // uptimeStr\n\nfunction loadMD5for(fn:string):string;\nbegin\nif getMtimeUTC(fn+'.md5') < getMtimeUTC(fn) then result:=''\nelse result:=trim(getTill(' ',loadTextfile(fn+'.md5')))\nend; // loadMD5for\n\nfunction shouldRecur(data:TconnData):boolean;\nbegin\nresult:=mainFrm.recursiveListingChk.checked\n  and ((data.urlvars.indexOf('recursive') >= 0) or (data.urlvars.values['search'] > ''))\nend; // shouldRecur\n\nfunction Tmainfrm.getFolderPage(folder:Tfile; cd:TconnData; otpl:Tobject):string;\n// we pass the Tpl parameter as Tobject because symbol Ttpl is not defined yet\n\nvar\n  baseurl, list, fileTpl, folderTpl, linkTpl: string;\n  table: TStringDynArray;\n  ofsRelItemUrl, ofsRelUrl, numberFiles, numberFolders, numberLinks: integer;\n  img_file: boolean;\n  totalBytes: int64;\n  fast: TfastStringAppend;\n  buildTime: Tdatetime;\n  listing: TfileListing;\n  diffTpl: Ttpl;\n  hasher: Thasher;\n  fullEncode, recur, oneAccessible: boolean;\n  md: TmacroData;\n\n  procedure applySequential();\n  const\n    PATTERN = '%sequential%';\n  var\n    idx, p: integer;\n    idxS: string;\n  begin\n  idx:=0;\n  p:=1;\n    repeat\n    p:=ipos(PATTERN, result, p);\n    if p = 0 then exit;\n    inc(idx);\n    idxS:=intToStr(idx);\n    delete(result, p, length(PATTERN)-length(idxS));\n    moveChars(idxS[1], result[p], length(idxS));\n    until false;\n  end; // applySequential\n\n  procedure handleItem(f:Tfile);\n  var\n    type_, s, url, fingerprint, itemFolder: string;\n    nonPerc: TStringDynArray;\n  begin\n  if not f.isLink and containsStr(f.resource, '?') then exit; // unicode filename?   //mod by mars\n\n  // build up the symbols table\n  md.table:=table;\n  nonPerc:=NIL;\n  if f.icon >= 0 then\n    begin\n    s:='~img'+intToStr(f.icon);\n    addArray(nonPerc, ['~img_folder', s, '~img_link', s]);\n    end;\n  if f.isFile() then\n    if img_file and (useSystemIconsChk.checked or (f.icon >= 0)) then\n      addArray(nonPerc, ['~img_file', '~img'+intToStr(f.getSystemIcon())]);\n\n  if recur or (itemFolder = '') then\n    itemFolder:=f.getFolder();\n  if recur then\n    url:=substr(itemFolder, ofsRelItemUrl)\n  else\n    url:='';\n  addArray(md.table, [\n    '%item-folder%', itemFolder,\n    '%item-relative-folder%', url\n  ]);\n\n  if not f.accessFor(cd) then\n    s:=diffTpl['protected']\n  else\n    begin\n    s:='';\n    if f.isFileOrFolder() then\n      oneAccessible:=TRUE;\n    end;\n  addArray(md.table, [\n    '%protected%', s\n  ]);\n\n  // url building\n  fingerprint:='';\n  if fingerprintsChk.checked and f.isFile() then\n    begin\n    s:=loadMD5for(f.resource);\n    if s = '' then\n      s:=hasher.getHashFor(f.resource);\n    if s > '' then\n      fingerprint:='#!md5!'+s;\n    end;\n  if f.isLink() then\n    begin\n    url:=f.resource;\n    s:=url;\n    end\n  else\n    if pwdInPagesChk.Checked and (cd.user > '') then\n      begin\n      s:=f.fullURL(getSafeHost(cd), cd.user, cd.pwd )+fingerprint;\n      url:=s\n      end\n    else\n      begin\n      if recur then\n        s:=copy(f.url(fullEncode), ofsRelUrl, MAXINT)+fingerprint\n      else\n        s:=f.relativeURL(fullEncode)+fingerprint;\n      url:=baseurl+s;\n      end;\n\n  if not f.isLink() then\n    begin\n    s:=macroQuote(s);\n    url:=macroQuote(url);\n    end;\n\n  addArray(md.table, [\n    '%item-url%', s,\n    '%item-full-url%', url\n  ]);\n\n  // select appropriate template\n  if f.isLink() then\n    begin\n    s:=linkTpl;\n    inc(numberLinks);\n    type_:='link';\n    end\n  else if f.isFolder() then\n    begin\n    s:=folderTpl;\n    inc(numberFolders);\n    type_:='folder';\n    end\n  else\n    begin\n    s:=diffTpl.getTxtByExt(ExtractFileExt(f.name));\n    if s = '' then s:=fileTpl;\n    inc(numberFiles);\n    type_:='file';\n    end;\n\n  addArray(md.table, [\n    '%item-type%', type_\n  ]);\n\n  s:=xtpl(s, nonPerc);\n  md.f:=f;\n  tryApplyMacrosAndSymbols(s, md, FALSE);\n  fast.append(s);\n  end; // handleItem\n\nvar\n  i, n: integer;\n  f: Tfile;\nbegin\nresult:='';\nif (folder = NIL) or not folder.isFolder() then exit;\n\nif macrosLogChk.checked and not appendmacroslog1.checked then\n  resetLog();\ndiffTpl:=Ttpl.create();\nfolder.lock();\ntry\n  buildTime:=now();\n  cd.conn.addHeader('Cache-Control: no-cache, no-store, must-revalidate, max-age=-1');\n  recur:=shouldRecur(cd);\n  baseurl:=protoColon()+getSafeHost(cd)+folder.url(TRUE);\n\n  if cd.tpl = NIL then\n    diffTpl.over:=otpl as Ttpl\n  else\n    begin\n    diffTpl.over:=cd.tpl;\n    cd.tpl.over:=otpl as Ttpl;\n    end;\n\n  if otpl <> filelistTpl then\n    diffTpl.fullText:=folder.getRecursiveDiffTplAsStr();\n\n  fullEncode:=FALSE;\n  ofsRelUrl:=length(folder.url(fullEncode))+1;\n  ofsRelItemUrl:=length(folder.pathTill())+1;\n  // pathTill() is '/' for root, and 'just/folder', so we must accordingly consider a starting and trailing '/' for the latter case (bugfix by mars)\n  if not folder.isRoot() then\n    inc(ofsRelItemUrl, 2);\n\n  fillChar(md, sizeOf(md), 0);\n  md.cd:=cd;\n  md.tpl:=diffTpl;\n  md.folder:=folder;\n  md.archiveAvailable:=folder.hasRecursive(FA_ARCHIVABLE) and not folder.isDLforbidden();\n  md.hideExt:=folder.hasRecursive(FA_HIDE_EXT);\n\n  result:=diffTpl['special:begin'];\n  tryApplyMacrosAndSymbols(result, md, FALSE);\n\n  // cache these values\n  fileTpl:=xtpl(diffTpl['file'], table);\n  folderTpl:=xtpl(diffTpl['folder'], table);\n  linkTpl:=xtpl(diffTpl['link'], table);\n  // this may be heavy to calculate, only do it upon request\n  img_file:=pos('~img_file', fileTpl) > 0;\n\n  // build %list% based on dir[]\n  numberFolders:=0; numberFiles:=0; numberLinks:=0;\n  totalBytes:=0;\n  oneAccessible:=FALSE;\n  fast:=TfastStringAppend.Create();\n  listing:=TfileListing.create();\n  hasher:=Thasher.create();\n  if fingerprintsChk.checked then\n    hasher.loadFrom(folder.resource);\n  try\n    listing.fromFolder( folder, cd, recur );\n    listing.sort(cd, if_(recur or (otpl = filelistTpl), '?', diffTpl['sort by']) ); // '?' is just a way to cause the sort to fail in case the sort key is not defined by the connection\n\n    n:=length(listing.dir);\n    for i:=0 to n-1 do\n      begin\n      f:=listing.dir[i];\n      if f.size > 0 then\n        inc(totalBytes, f.size);\n      if f.isLink() then\n        inc(numberLinks)\n      else if f.isFolder() then\n        inc(numberFolders)\n      else\n        inc(numberFiles);\n      end;\n    {TODO this symbols will be available when executing macros in handleItem. Having\n      them at this stage is useful only in case immediate calculations are required.\n      This may happen seldom, but maybe some template is using it since we got this here.\n      Each symbols is an extra iteration on the template piece and we may be tempted\n      to consider for optimizations. To not risk legacy problems we should consider\n      treating table symbols with a regular expression and a Tdictionary instead.\n    }\n    table:=toSA([\n      '%upload-link%', if_(accountAllowed(FA_UPLOAD, cd, folder), diffTpl['upload-link']),\n      '%files%', diffTpl[if_(n>0, 'files','nofiles')],\n      '%number%', intToStr(n),\n      '%number-files%', intToStr(numberFiles),\n      '%number-folders%', intToStr(numberFolders),\n      '%number-links%', intToStr(numberlinks),\n      '%total-bytes%', intToStr(totalBytes),\n      '%total-kbytes%', intToStr(totalBytes div KILO),\n      '%total-size%', smartsize(totalBytes)\n    ]);\n\n    for i:=0 to length(listing.dir)-1 do\n      begin\n      application.ProcessMessages();\n      if cd.conn.state = HCS_DISCONNECTED then exit;\n      cd.lastActivityTime:=now();\n      handleItem(listing.dir[i])\n      end;\n    list:=fast.reset();\n  finally\n    listing.free;\n    fast.free;\n    hasher.free;\n    end;\n\n  if cd.conn.state = HCS_DISCONNECTED then exit;\n\n  // build final page\n  if not oneAccessible then md.archiveAvailable:=FALSE;\n  md.table:=table;\n  addArray(md.table, [\n    '%list%',list\n  ]);\n  result:=diffTpl[''];\n  md.f:=NIL;\n  md.afterTheList:=TRUE;\n  try tryApplyMacrosAndSymbols(result, md)\n  finally md.afterTheList:=FALSE end;\n  applySequential();\n  // ensure this is the last symbol to be translated\n  result:=replaceText(result, '%build-time%',\n    floatToStrF((now()-buildTime)*SECONDS, ffFixed, 7,3) );\nfinally\n  folder.unlock();\n  diffTpl.free;\n  end;\nend; // getFolderPage\n\nfunction getETA(data:TconnData):string;\nbegin\nif (data.conn.state in [HCS_REPLYING_BODY, HCS_POSTING])\nand (data.eta.idx > ETA_FRAME) then result:=elapsedToStr(data.eta.result)\nelse result:='-'\nend; // getETA\n\nfunction tplFromFile(f:Tfile):Ttpl;\nbegin result:=Ttpl.create(f.getRecursiveDiffTplAsStr(), tpl) end;\n\nprocedure setDefaultIP(v:string);\nvar\n  old: string;\nbegin\nold:=defaultIP;\nif v > '' then defaultIP:=v\nelse if externalIP > '' then defaultIP:=externalIP\nelse defaultIP:=getIP();\nif mainfrm = NIL then exit;\nmainfrm.updateUrlBox();\nif old = defaultIP then exit;\ntry\n  v:=clipboard.AsText;\n  if pos(old, v) = 0 then exit;\nexcept end;\nsetClip( replaceStr(v, old, defaultIP) );\nend; // setDefaultIP\n\nfunction name2mimetype(fn:string; default:string):string;\nvar\n  i: integer;\nbegin\nresult:=default;\nfor i:=0 to length(mimeTypes) div 2-1 do\n  if fileMatch(mimeTypes[i*2], fn) then\n    begin\n    result:=mimeTypes[i*2+1];\n    exit;\n    end;\nfor i:=0 to length(DEFAULT_MIME_TYPES) div 2-1 do\n  if fileMatch(DEFAULT_MIME_TYPES[i*2], fn) then\n    begin\n    result:=DEFAULT_MIME_TYPES[i*2+1];\n    exit;\n    end;\nend; // name2mimetype\n\nprocedure Tmainfrm.getPage(sectionName:string; data:TconnData; f:Tfile=NIL; tpl2use:Ttpl=NIL);\nvar\n  md: TmacroData;\n\n procedure addProgressSymbols();\n  var\n    t, files, fn: string;\n    i: integer;\n    d: TconnData;\n    perc: real;\n    bytes, total: int64;\n  begin\n  if sectionName <> 'progress' then exit;\n\n  bytes:=0; total:=0; // shut up compiler\n  files:='';\n  i:=-1;\n    repeat // a while-loop would look better but would lead to heavy indentation\n    inc(i);\n    if i >= srv.conns.count then break;\n    d:=conn2data(i);\n    if d.address <> data.address then continue;\n    fn:='';\n    // fill fields\n    if isReceivingFile(d) then\n      begin\n      t:=tpl2use['progress-upload-file'];\n      fn:=d.uploadSrc; // already encoded by the browser\n      bytes:=d.conn.bytesPosted;\n      total:=d.conn.post.length;\n      end;\n    if isSendingFile(d) then\n      begin\n      if d.conn.reply.bodymode <> RBM_FILE then continue;\n      t:=tpl2use['progress-download-file'];\n      fn:=d.lastFN;\n      bytes:=d.conn.bytesSentLastItem;\n      total:=d.conn.bytesPartial;\n      end;\n    perc:=safeDiv(0.0+bytes, total); // 0.0 forces a typecast that will call the right overloaded function\n    // no file exchange\n    if fn = '' then continue;\n    fn:=macroQuote(fn);\n    // apply fields\n    files:=files+xtpl(t, [\n      '%item-user%', macroQuote(d.user),\n      '%perc%',intToStr( trunc(perc*100) ),\n      '%filename%', fn,\n      '%filename-js%', jsEncode(fn, '''\"'),\n      '%done-bytes%', intToStr(bytes),\n      '%total-bytes%', intToStr(total),\n      '%done%', smartsize(bytes),\n      '%total%', smartsize(total),\n      '%time-left%', getETA(d),\n      '%speed-kb%', floatToStrF(d.averageSpeed/1000, ffFixed, 7,1),\n      '%item-ip%', d.address,\n      '%item-port%', d.conn.port\n    ]);\n    until false;\n  if files = '' then files:=tpl2use['progress-nofiles'];\n  addArray(md.table, ['%progress-files%', files]);\n  end; // addProgressSymbols\n\n  procedure addUploadSymbols();\n  var\n    i: integer;\n    files: string;\n  begin\n  if sectionName <> 'upload' then exit;\n  files:='';\n  for i:=1 to 10 do\n    files:=files+ replaceText(tpl2use['upload-file'], '%idx%',intToStr(i));\n  addArray(md.table, ['%upload-files%', files]);\n  end; // addUploadSymbols\n\n  procedure addUploadResultsSymbols();\n  var\n    files: string;\n    i: integer;\n  begin\n  if sectionName <> 'upload-results' then exit;\n  files:='';\n  for i:=0 to length(data.uploadResults)-1 do\n    with data.uploadResults[i] do\n      files:=files+xtpl(tpl2use[ if_(reason='','upload-success','upload-failed') ],[\n        '%item-name%', htmlEncode(macroQuote(fn)),\n        '%item-url%', macroQuote(encodeURL(fn)),\n        '%item-size%', smartsize(size),\n        '%item-resource%', f.resource+'\\'+fn,\n        '%idx%', intToStr(i+1),\n        '%reason%', reason,\n        '%speed%', intToStr(speed div 1000), // legacy\n        '%smart-speed%', smartsize(speed)\n      ]);\n  addArray(md.table, ['%uploaded-files%', files]);\n  data.uploadResults:=NIL; // reset\n  end; // addUploadResultsSymbols\n\nvar\n  s: string;\n  section: PtplSection;\n  buildTime: Tdatetime;\n  externalTpl: boolean;\nbegin\nbuildTime:=now();\n\nexternalTpl:=assigned(tpl2use);\nif not externalTpl then\n  tpl2use:=tplFromFile(Tfile(first(f, rootFile)));\nif assigned(data.tpl) then\n  begin\n  data.tpl.over:=tpl2use.over;\n  tpl2use.over:=data.tpl;\n  end;\n\n\ntry\n  data.conn.reply.mode:=HRM_REPLY;\n  data.conn.reply.bodyMode:=RBM_STRING;\n  data.conn.reply.body:='';\nexcept end;\n\nsection:=tpl2use.getSection(sectionName);\nif section = NIL then exit;\n\ntry\n  fillChar(md, sizeOf(md), 0);\n  addUploadSymbols();\n  addProgressSymbols();\n  addUploadResultsSymbols();\n  //addArray(md.table, ['%folder%', data.f.]);\n  if data = NIL then s:=''\n  else s:=first(data.banReason, data.disconnectReason);\n  addArray(md.table, ['%reason%', s]);\n\n  data.conn.reply.contentType:=ansistring(name2mimetype(sectionName, 'text/html'));\n  if sectionName = 'ban' then data.conn.reply.mode:=HRM_DENY;\n  if sectionName = 'deny' then data.conn.reply.mode:=HRM_DENY;\n  if sectionName = 'login' then data.conn.reply.mode:=HRM_DENY;\n  if sectionName = 'not found' then data.conn.reply.mode:=HRM_NOT_FOUND;\n  if sectionName = 'unauthorized' then data.conn.reply.mode:=HRM_UNAUTHORIZED;\n  if sectionName = 'overload' then data.conn.reply.mode:=HRM_OVERLOAD;\n  if sectionName = 'max contemp downloads' then data.conn.reply.mode:=HRM_OVERLOAD;\n\n  md.cd:=data;\n  md.tpl:=tpl2use;\n  md.folder:=f;\n  md.f:=NIL;\n  md.archiveAvailable:=FALSE;\n  s:=tpl2use['special:begin'];\n  tryApplyMacrosAndSymbols(s, md, FALSE);\n\n  if data.conn.reply.mode = HRM_REPLY then\n    s:=section.txt\n  else\n    begin\n    s:=replaceText(tpl2use['error-page'], '%content%', section.txt);\n    if s = '' then\n      s:=section.txt;\n    end;\n\n  tryApplyMacrosAndSymbols(s, md);\n\n  s:=replaceText(s, '%build-time%',\n    floatToStrF((now()-buildTime)*SECONDS, ffFixed, 7,3) );\n  data.conn.reply.body:=UTF8encode(s);\n  if section.nolog then data.dontLog:=TRUE;\n  compressReply(data);\nfinally\n  if not externalTpl then\n    tpl2use.free\n  end\nend; // getPage\n\nprocedure TmainFrm.findExtOnStartupChkClick(Sender: TObject);\nresourcestring\n  MSG = 'This option is NOT compatible with \"dynamic dns updater\".'\n    +#13'Continue?';\nbegin\nwith sender as TMenuItem do\n  if dyndns.active and (dyndns.url > '') and checked then\n    checked:= msgDlg(MSG, MB_ICONWARNING+MB_YESNO) = MRYES;\nend;\n\nfunction notModified(conn:ThttpConn; etag, ts:string):boolean; overload;\nbegin\nresult:= (etag>'') and (etag = conn.getHeader('If-None-Match'));\nif result then\n  begin\n  conn.reply.mode:=HRM_NOT_MODIFIED;\n  exit;\n  end;\nconn.addHeader('ETag: '+UTF8encode(etag));\nif ts > '' then\n  conn.addHeader('Last-Modified: '+UTF8encode(ts));\nend; // notModified\n\nfunction notModified(conn:ThttpConn; f:string):boolean; overload;\nbegin result:=notModified(conn, getEtag(f), dateToHTTP(f)) end;\n\nfunction notModified(conn:ThttpConn; f:Tfile):boolean; overload;\nbegin result:=notModified(conn, f.resource) end;\n\nfunction Tmainfrm.sendPic(cd:TconnData; idx:integer=-1):boolean;\nvar\n  s, url: string;\n  special: (no, graph);\nbegin\nurl:=decodeURL(cd.conn.request.url);\nresult:=FALSE;\nspecial:=no;\nif idx < 0 then\n  begin\n  s:=url;\n  if not ansiStartsText('/~img', s) then exit;\n  delete(s,1,5);\n  // converts special symbols\n  if ansiStartsText('_graph', s) then special:=graph else\n  if ansiStartsText('_link', s) then idx:=ICON_LINK else\n  if ansiStartsText('_file', s) then idx:=ICON_FILE else\n  if ansiStartsText('_folder', s) then idx:=ICON_FOLDER else\n  if ansiStartsText('_lock', s) then idx:=ICON_LOCK else\n    try idx:=strToInt(s) except exit end;\n  end;\n\nif (special = no) and ((idx < 0) or (idx >= images.count)) then exit;\n\ncase special of\n  no: cd.conn.reply.body:=pic2str(idx);\n  graph: cd.conn.reply.body:=getGraphPic(cd);\n  end;\n\nresult:=TRUE;\n{**\n// browser caching support\nif idx < startingImagesCount then\n  s:=intToStr(idx)+':'+etags.values['exe']\nelse\n  s:=etags.values['icon.'+intToStr(idx)];\nif notModified(cd.conn, s, '') then\n  exit;\n}\ncd.conn.reply.mode:=HRM_REPLY;\ncd.conn.reply.contentType:='image/gif';\ncd.conn.reply.bodyMode:=RBM_STRING;\ncd.downloadingWhat:=DW_ICON;\ncd.lastFN:=copy(url,2,1000);\nend; // sendPic\n\nfunction getAgentID(s:string):string; overload;\nvar\n  res: string;\n\n  function test(id:string):boolean;\n  var\n    i: integer;\n  begin\n  result:=FALSE;\n  i:=pos(id,s);\n  case i of\n    0: exit;\n    1: res:=getTill('/', getTill(' ',s));\n    else\n      begin\n      delete(s,1,i-1);\n      res:=getTill(';',s);\n      end;\n    end;\n  result:=TRUE;\n  end; // its\n\nbegin\nresult:=stripChars(s,['<','>']);\nif test('Crazy Browser')\nor test('iPhone')\nor test('iPod')\nor test('iPad')\nor test('Chrome')\nor test('WebKit') // generic webkit browser\nor test('Opera')\nor test('MSIE')\nor test('Mozilla') then\n  result:=res;\nend; // getAgentID\n\nfunction getAgentID(conn:ThttpConn):string; overload;\nbegin result:=getAgentID(conn.getHeader('User-Agent')) end;\n\nprocedure setupDownloadIcon(data:TconnData);\n\n  procedure painticon();\n  var\n    bmp: Tbitmap;\n    s: string;\n    perc: real;\n  begin\n  perc:=safeDiv(0.0+data.conn.bytesSentLastItem, data.conn.bytesPartial);\n  s:=intToStr( trunc(perc*100) )+'%';\n  bmp:=getBaseTrayIcon(perc);\n  drawTrayIconString(bmp.canvas, s);\n  data.tray_ico.Handle:=bmpToHico(bmp);\n  bmp.free;\n  data.tray.setIcon(data.tray_ico);\n  data.tray.setTip(\n    if_( data.conn.reply.bodyMode=RBM_STRING, decodeURL(data.conn.request.url), data.lastFN )\n    +trayNL+format('%.1f KB/s', [data.averageSpeed/1000])\n    +trayNL+dotted(data.conn.bytesSentLastItem)+' bytes sent'\n    +trayNL+data.address\n  );\n  data.tray.show();\n  end; // paintIcon\n\nbegin\nif (data = NIL) or (data.conn = NIL) then exit;\nif assigned(data.tray)\nand ((data.conn.state <> HCS_REPLYING_BODY) or\n  (data.conn.bytesSentLastItem = data.conn.bytesPartial)) then\n  begin\n  data.tray.hide();\n  freeAndNIL(data.tray);\n  data.tray_ico.free;\n  exit;\n  end;\nif not isSendingFile(data) then exit;\n\nif not data.countAsDownload then exit;\n\nif data.tray = NIL then\n  begin\n  data.tray:=TmyTrayIcon.create(mainfrm);\n  data.tray.data:=data;\n  data.tray_ico:=Ticon.create();\n  data.tray.onEvent:=mainfrm.downloadTrayEvent;\n  end;\nif mainfrm.trayfordownloadChk.checked and isSendingFile(data) then\n  paintIcon()\nelse data.tray.hide();\nend; // setupDownloadIcon\n\nfunction getDynLogFilename(cd:TconnData):string; overload;\nvar\n  d, m, y, w: word;\n  u: string;\nbegin\ndecodeDateFully(now(), y,m,d,w);\nif cd = NIL then u:=''\nelse u:=nonEmptyConcat('(', cd.user, ')');\nresult:=xtpl(logFile.filename, [\n  '%d%', int0(d,2),\n  '%m%', int0(m,2),\n  '%y%', int0(y,4),\n  '%dow%', int0(w-1,2),\n  '%w%', int0(weekOf(now()),2),\n  '%user%', u\n]);\nend; // getDynLogFilename\n\nprocedure applyISOdateFormat();\nbegin\nif mainfrm.useISOdateChk.checked then FormatSettings.ShortDateFormat:='yyyy-mm-dd'\nelse FormatSettings.ShortDateFormat:=GetLocaleStr(LOCALE_USER_DEFAULT, LOCALE_SSHORTDATE,'');\nend;\n\nprocedure Tmainfrm.add2log(lines:string; cd:TconnData=NIL; clr:Tcolor=Graphics.clDefault);\nvar\n  s, ts, first, rest, addr: string;\nbegin\nif not logOnVideoChk.checked\nand ((logFile.filename = '') or (logFile.apacheFormat > '')) then\n  exit;\n\nif clr = Graphics.clDefault then\n  clr:=clWindowText;\n\nif logDateChk.checked then\n  begin\n  applyISOdateFormat(); // this call shouldn't be necessary here, but it's a workaround to this bug www.rejetto.com/forum/?topic=5739\n  if logTimeChk.checked then ts:=datetimeToStr(now())\n  else ts:=dateToStr(now())\n  end\nelse\n  if logTimeChk.checked then ts:=timeToStr(now())\n  else ts:='';\n\nfirst:=chopLine(lines);\nif lines = '' then\n  rest:=''\nelse\n  rest:=reReplace(lines, '^', '> ')+CRLF;\n\naddr:='';\nif assigned(cd) and assigned(cd.conn) then\n  addr:=nonEmptyConcat('', cd.user, '@')\n    +cd.address+':'+cd.conn.port\n    +nonEmptyConcat(' {', localDNSget(cd.address), '}');\n\nif (logFile.filename > '') and (logFile.apacheFormat = '') then\n  begin\n  s:=ts;\n  if (cd = NIL) or (cd.conn = nil) then s:=s+TAB+''+TAB+''+TAB+''+TAB+''\n  else s:=s+TAB+cd.user+TAB+cd.address+TAB+cd.conn.port+TAB+localDNSget(cd.address);\n  s:=s+TAB+first;\n\n  if tabOnLogFileChk.checked then s:=s+stripChars(reReplace(lines, '^', TAB),[#13,#10])\n  else s:=s+CRLF+rest;\n\n  includeTrailingString(s,CRLF);\n  appendTextFile(getDynLogFilename(cd), s);\n  end;\n\nif not logOnVideoChk.checked then exit;\n\nlogbox.selstart:=length(logbox.Text);\nlogBox.SelAttributes.name:=logFontName;\nif logFontSize > 0 then\n  logBox.SelAttributes.size:=logFontSize;\nlogBox.SelAttributes.Color:=clRed;\nlogBox.SelText:=ts+' ';\nif addr > '' then\n  begin\n  logBox.SelAttributes.Color:=ADDRESS_COLOR;\n  logBox.SelText:=addr+' ';\n  end;\nlogBox.SelAttributes.color:=clr;\nlogBox.SelText:=first+CRLF;\nlogBox.selAttributes.color:=clBlue;\nlogBox.SelText:=rest;\n\nif (logMaxLines = 0) or (logBox.Lines.Count <= logMaxLines) then exit;\n// found no better way to remove multiple lines with a single move\nlogBox.perform(WM_SETREDRAW, 0, 0);\ntry\n  logBox.SelStart:=0;\n  logBox.SelLength:=logBox.perform(EM_LINEINDEX, logBox.lines.count-round(logMaxLines*0.9), 0);;\n  logBox.selText:='';\n  logbox.selstart:=length(logbox.Text);\nfinally\n  logBox.perform(WM_SETREDRAW, 1, 0);\n  logBox.invalidate();\n  end;\nend; // add2log\n\nfunction isBanned(address:string; out comment:string):boolean; overload;\nvar\n  i:integer;\nbegin\nresult:=TRUE;\nfor i:=0 to length(banlist)-1 do\n  if addressMatch(banlist[i].ip, address) then\n    begin\n    comment:=banlist[i].comment;\n    exit;\n    end;\nresult:=FALSE;\nend; // isBanned\n\nfunction isBanned(cd:TconnData):boolean; overload;\nbegin result:=assigned(cd) and isBanned(cd.address, cd.banReason) end;\n\nprocedure kickBannedOnes();\nvar\n  i: integer;\n  d: TconnData;\nbegin\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  d:=conn2data(i);\n  if isBanned(d) then\n    d.disconnect(first(d.disconnectReason, 'kick banned'));\n  inc(i);\n  end;\nend; // kickBannedOnes\n\nfunction startServer():boolean;\n\n  procedure tryPorts(list:array of string);\n  var\n    i: integer;\n  begin\n  for i:=0 to length(list)-1 do\n    begin\n    srv.port:=trim(list[i]);\n    if srv.start(listenOn) then exit;\n    end;\n  end; // tryPorts\n\nbegin\nresult:=FALSE;\nif srv.active then exit; // fail if already active\n\nif (localIPlist.IndexOf(listenOn) < 0) and (listenOn <> '127.0.0.1') then\n  listenOn:='';\n\nif port > '' then\n  tryPorts([port])\nelse\n  tryPorts(['80','8080','280','10080','0']);\nif not srv.active then exit; // failed\nupTime:=now();\nresult:=TRUE;\nend; // startServer\n\nprocedure stopServer();\nbegin if assigned(srv) then srv.stop() end;\n\nprocedure sayPortBusy(port:string);\nvar\n  fn: string;\nbegin\ntry fn:=extractFileName(pid2file(port2pid(port)));\nexcept fn:='' end;\nmsgDlg('Cannot open port.'#13+if_(fn>'', 'It is already used by '+fn, 'Something is blocking, maybe your system firewall.'), MB_ICONERROR);\nend; // sayPortBusy\n\nprocedure toggleServer();\nresourcestring\n  MSG2 = 'There are %d connections open.'#13'Do you want to close them now?';\nbegin\nif srv.active then stopServer()\nelse\n  if not startServer() then\n    sayPortBusy(srv.port);\nif (srv.conns.count = 0) or srv.active then exit;\nif msgDLg(format(MSG2,[srv.conns.count]), MB_ICONQUESTION+MB_YESNO) = IDYES then\n  kickByIP('*');\nend; // toggleServer\n\nfunction restartServer():boolean;\nvar\n  port: string;\nbegin\nresult:=FALSE;\nif not srv.active then exit;\nport:=srv.port;\nsrv.stop();\nsrv.port:=port;\nresult:=srv.start(listenOn);\nend; // restartServer\n\nprocedure updatePortBtn();\nbegin\nif assigned(srv) then\n  mainfrm.portBtn.Caption:=format(S_PORT_LABEL, [\n    if_(srv.active, srv.port, first(port,S_PORT_ANY))]);\nend; // updatePortBtn\n\nprocedure apacheLogCb(re:TregExpr; var res:string; data:pointer);\nconst\n  APACHE_TIMESTAMP_FORMAT = 'dd\"/!!!/\"yyyy\":\"hh\":\"nn\":\"ss';\nvar\n  code, codes, par: string;\n  cmd: char;\n  cd: TconnData;\n\n  procedure extra();\n  var\n    i: integer;\n  begin\n  // apache log standard for \"nothing\" is \"-\", but \"-\" is a valid filename\n  res:='';\n  if cd.uploadResults = NIL then exit;\n  for i:=0 to length(cd.uploadResults)-1 do\n    with cd.uploadResults[i] do\n      if reason = '' then\n        res:=res+fn+'|';\n  setLength(res, length(res)-1);\n  end; // extra\n\nbegin\ncd:=data;\nif cd = NIL then exit; // something's wrong\ncode:=intToStr(HRM2CODE[cd.conn.reply.mode]);\n// first parameter specifies http code to match as CSV, with leading '!' to invert logic\ncodes:=re.match[1];\nif (codes > '') and ((pos(code, codes) > 0) = (codes[1] = '!')) then\n  begin\n  res:='-';\n  exit;\n  end;\npar:=re.match[3];\ncmd:=re.match[4][1]; // it's case sensitive\ntry\n  case cmd of\n    'a', 'h': res:=cd.address;\n    'l': res:='-';\n    'u': res:=first(cd.user, '-');\n    't': res:='['\n      +replaceStr(formatDatetime(APACHE_TIMESTAMP_FORMAT, now()),\n        '!!!',MONTH2STR[monthOf(now())])\n      +' '+logfile.apacheZoneString+']';\n    'r': res:=getTill(CRLF, cd.conn.request.full);\n    's': res:=code;\n    'B': res:=intToStr(cd.conn.bytesSentLastItem);\n    'b': if cd.conn.bytesSentLastItem = 0 then res:='-' else res:=intToStr(cd.conn.bytesSentLastItem);\n    'i': res:=cd.conn.getHeader(ansistring(par));\n    'm': res:=METHOD2STR[cd.conn.request.method];\n    'c': if (cd.conn.bytesToSend > 0) and (cd.conn.state = HCS_DISCONNECTED) then res:='X'\n          else if cd.disconnectAfterReply then res:='-'\n          else res:='+';\n    'e': res:=getEnvironmentVariable(par);\n    'f': res:=cd.lastFile.name;\n    'H': res:='HTTP'; // no way\n    'p': res:=srv.port;\n    'z': extra(); // extra information specific for hfs\n    else res:='UNSUPPORTED';\n    end;\nexcept res:='ERROR' end;\nend; // apacheLogCb\n\nprocedure removeFilesFromComments(files:TStringDynArray);\nvar\n  fn, lastPath, path: string;\n  trancheStart, trancheEnd: integer; // the tranche is a window within 'files' of items sharing the same path\n  ss: TstringList;\n\n  procedure doTheTranche();\n  var\n    i, b: integer;\n    fn, s: string;\n    anyChange: boolean;\n  begin\n  // leave only the files' name\n  for i:=trancheStart to trancheEnd do\n    files[i]:=copy(files[i],length(lastPath)+1,MAXINT);\n  // comments file\n  try\n    fn:=lastPath+COMMENTS_FILE;\n    ss.loadFromFile(fn);\n    anyChange:=FALSE;\n    for i:=trancheStart to trancheEnd do\n      begin\n      b:=ss.indexOfName(files[i]);\n      if b < 0 then continue;\n      ss.delete(b);\n      anyChange:=TRUE;\n      end;\n    if anyChange then\n      if ss.count = 0 then\n        deleteFile(fn)\n      else\n        ss.saveToFile(fn);\n  except end;\n  // descript.ion\n  if not mainfrm.supportDescriptionChk.checked then exit;\n  try\n    fn:=path+DESCRIPT_ION;\n    s:=loadTextFile(fn);\n    if s = '' then exit;\n    if mainfrm.oemForIonChk.checked then\n      OEMToCharBuff(@s[1], @s[1], length(s));\n    anyChange:=FALSE;\n    for i:=trancheStart to trancheEnd do\n      begin\n      b:=findNameInDescriptionFile(s, files[i]);\n      if b = 0 then continue;\n      delete(s, b, findEOL(s,b)-b+1);\n      anyChange:=TRUE;\n      end;\n    if anyChange then\n      if s='' then\n        deleteFile(fn)\n      else\n        saveTextfile(fn, s);\n  except end;\n  end; // doTheTranche\n\nbegin\n// collect files with same path in tranche, then process it\nsortArray(files);\ntrancheStart:=0;\nss:=TstringList.create(); // we'll use this in doTheTranche(), but create the object once, as an optimization\ntry\n  ss.caseSensitive:=FALSE;\n  for trancheEnd:=0 to length(files)-1 do\n    begin\n    fn:=files[trancheEnd];\n    path:=getTill(lastDelimiter('\\/', fn), fn);\n    if trancheEnd = 0 then\n      lastPath:=path;\n    if path <> lastPath then\n      begin\n      doTheTranche();\n      // init the new tranche\n      trancheStart:=trancheEnd+1;\n      lastPath:=path;\n      end;\n    end;\n  trancheEnd:=length(files)-1; // after the for-loop, the variable seems to not be reliable\n  doTheTranche();\nfinally ss.free end;\nend; // removeFilesFromComments\n\nprocedure runTplImport();\nvar\n  f, fld: Tfile;\nbegin\nf:=Tfile.create(tplFilename);\nfld:=Tfile.create(extractFilePath(tplFilename));\ntry runScript(tpl['special:import'], NIL, tpl, f, fld);\nfinally\n  freeAndNIL(f);\n  freeAndNIL(fld);\n  end;\nend; // runTplImport\n\n// returns true if template was patched\nfunction setTplText(text:string):boolean;\n(* postponed to next release\n  procedure patch290();\n  {$J+}\n  const\n    PATCH: string = '';\n    PATCH_RE = '(\\[ajax\\.mkdir.+)\\[special:import';\n  var\n    se: TstringDynArray;\n    i: integer;\n  begin\n  // is it default tpl?\n  if not ansiStartsText('Welcome! This is the default template for HFS 2.3', text) then\n    exit;\n  // needs to be patched?\n  if pos('template revision TR1.',substr(text,1,80)) = 0 then\n    exit;\n  // calculate the patch once\n  if length(PATCH)=0 then\n    PATCH:=reGet(defaultTpl, PATCH_RE, 1, '!mis');\n  {$J-}\n  // find the to-be-patched\n  i:=reMatch(text, PATCH_RE, '!mis', 1, @se);\n  if i=0 then exit; // something is wrong\n  result:=TRUE; // mark\n  replace(text, PATCH, i, i+length(se[1])-1); // real patch\n  text:=stringReplace(text, 'template revision TR1.', 'template revision TR3.', []); // version stamp\n  end;//patchIt\n*)\nbegin\nresult:=FALSE; // mod by mars\n//patch290();\ntpl.fullText:=text;\ntplIsCustomized:= text <> defaultTpl;\nif boolOnce(tplImport) then\n  runTplImport();\nend; // setTplText\n\nprocedure keepTplUpdated();\nbegin\nif fileExists(tplFilename) then\n  begin\n  if newMtime(tplFilename, tplLast) then\n    if setTplText(loadTextFile(tplFilename)) then\n      saveTextFile(tplFilename, tpl.fullText);\n  end\nelse if tplLast <> 0 then\n  begin\n  tplLast:=0; // we have no modified-time in this case, but this will stop the refresh\n  setTplText(defaultTpl);\n  end;\nend; // keepTplUpdated\n\nprocedure setNewTplFile(fn:string);\nbegin\ntplFilename:=fn;\ntplImport:=TRUE;\ntplLast:=0;\nend; // setNewTplFile\n\nprocedure Tmainfrm.httpEvent(event:ThttpEvent; conn:ThttpConn);\nvar\n  data: TconnData;\n  f: Tfile;\n  url: string;\n\n  procedure switchToDefaultFile();\n  var\n    default: Tfile;\n  begin\n  if (f = NIL) or not f.isFolder() then exit;\n  default:=f.getDefaultFile();\n  if default = NIL then exit;\n  freeIfTemp(f);\n  f:=default;\n  end; // switchToDefaultFile\n\n  function calcAverageSpeed(bytes:int64):integer;\n  begin result:=round(safeDiv(bytes, (now()-data.fileXferStart)*SECONDS)) end;\n\n  function runEventScript(event:string; table:array of string):string; overload;\n  var\n    md: TmacroData;\n    pleaseFree: boolean;\n  begin\n  result:=trim(eventScripts[event]);\n  if result = '' then exit;\n  fillChar(md, sizeOf(md), 0);\n  md.cd:=data;\n  md.table:=toSA(table);\n  md.tpl:=eventScripts;\n  addArray(md.table, ['%event%', event]);\n  pleaseFree:=FALSE;\n  try\n    if isReceivingFile(data) then\n      begin\n      // we must encapsulate it in a Tfile to expose file properties to the script. we don't need to cache the object because we need it only once.\n      md.f:=Tfile.createTemp(data.uploadDest);\n      md.f.size:=sizeOfFile(data.uploadDest);\n      pleaseFree:=TRUE;\n\n      md.folder:=data.lastFile;\n      if assigned(md.folder) then\n        md.f.node:=md.folder.node;\n      end\n    else if assigned(f) then\n      md.f:=f\n    else if assigned(data) then\n      md.f:=data.lastFile;\n\n    if assigned(md.f) and (md.folder = NIL) then\n      md.folder:=md.f.getParent();\n\n    tryApplyMacrosAndSymbols(result, md);\n\n  finally\n    if pleaseFree then\n      freeIfTemp(md.f);\n    end;\n  end; // runEventScript\n\n  function runEventScript(event:string):string; overload;\n  begin result:=runEventScript(event, []) end;\n\n  procedure doLog();\n  var\n    i: integer;\n    url_: string; // an alias, final '_' is to not confuse with the other var\n    s: string;\n  begin\n  if assigned(data) and data.dontLog and (event <> HE_DISCONNECTED) then exit; // we exit expect for HE_DISCONNECTED because dontLog is always set AFTER connections, so HE_CONNECTED is always logged. The coupled HE_DISCONNECTED should be then logged too.\n\n  if assigned(data) and (data.preReply = PR_BAN)\n  and not logBannedChk.checked then exit;\n\n  if conn = NIL then url_:=''\n  else url_:=decodeURL(conn.request.url);\n  if not (event in [HE_OPEN, HE_CLOSE, HE_CONNECTED, HE_DISCONNECTED, HE_GOT]) then\n    if not logIconsChk.checked and (data.downloadingWhat = DW_ICON)\n    or not logBrowsingChk.checked and (data.downloadingWhat = DW_FOLDERPAGE)\n    or not logProgressChk.checked and (url_ = '/~progress') then\n      exit;\n\n  if not (event in [HE_OPEN, HE_CLOSE])\n  and addressMatch(dontLogAddressMask, data.address) then\n    exit;\n\n  case event of\n    HE_OPEN: if logServerstartChk.Checked then add2log('Server start');\n    HE_CLOSE: if logServerstopChk.checked then add2log('Server stop');\n    HE_CONNECTED: if logconnectionsChk.Checked then add2log('Connected', data);\n    HE_DISCONNECTED: if logDisconnectionsChk.checked then\n      add2log('Disconnected'+if_(conn.disconnectedByServer, ' by server')\n        +nonEmptyConcat(': ', data.disconnectReason)\n        +if_(conn.bytesSent>0, ' - '+intToStr(conn.bytesSent)+' bytes sent'),\n      data);\n    HE_GOT:\n      begin\n      i:=conn.bytesGot-data.lastBytesGot;\n      if i <= 0 then exit;\n      if logBytesreceivedChk.Checked then\n        if now()-data.bytesGotGrouping.since <= BYTES_GROUPING_THRESHOLD then\n          inc(data.bytesGotGrouping.bytes, i)\n        else\n          begin\n          add2log(format('Got %d bytes',[i+data.bytesGotGrouping.bytes]), data);\n          data.bytesGotGrouping.since:=now();\n          data.bytesGotGrouping.bytes:=0;\n          end;\n      inc(data.lastBytesGot, i);\n      end;\n    HE_SENT:\n      begin\n      i:=conn.bytesSent-data.lastBytesSent;\n      if i <= 0 then exit;\n      if logBytessentChk.checked then\n        if now()-data.bytesSentGrouping.since <= BYTES_GROUPING_THRESHOLD then\n          inc(data.bytesSentGrouping.bytes, i)\n        else\n          begin\n          add2log(format('Sent %d bytes',[i+data.bytesSentGrouping.bytes]), data);\n          data.bytesSentGrouping.since:=now();\n          data.bytesSentGrouping.bytes:=0;\n          end;\n      inc(data.lastBytesSent, i);\n      end;\n    HE_REQUESTED:\n      if not logOnlyServedChk.checked\n      or (conn.reply.mode in [HRM_REPLY, HRM_REPLY_HEADER, HRM_REDIRECT]) then\n        begin\n        data.logLaterInApache:=TRUE;\n        if logRequestsChk.Checked then\n          begin\n          s:=subStr(conn.getHeader('Range'), 7);\n          if s > '' then\n            s:=TAB+'['+s+']';\n          add2log(format('Requested %s %s%s', [ METHOD2STR[conn.request.method], url_, s ]), data);\n          end;\n        if dumprequestsChk.checked then\n          add2log('Request dump'+CRLF+conn.request.full, data);\n        end;\n    HE_REPLIED:\n      if logRepliesChk.checked then\n        case conn.reply.mode of\n          HRM_REPLY: if not data.fullDLlogged then add2log(format('Served %s', [smartSize(conn.bytesSentLastItem)]), data);\n          HRM_REPLY_HEADER: add2log('Served head', data);\n          HRM_NOT_MODIFIED: add2log('Not modified, use cache', data);\n          HRM_REDIRECT: add2log(format('Redirected to %s', [conn.reply.url]), data);\n          else if not logOnlyServedChk.checked then\n            add2log(format('Not served: %d - %s', [HRM2CODE[conn.reply.mode], HRM2STR[conn.reply.mode] ])\n              +nonEmptyConcat(': ', data.error), data);\n          end;\n    HE_POST_FILE:\n      if logUploadsChk.checked and (data.uploadFailed = '') then\n        add2log(format('Uploading %s', [data.uploadSrc]), data);\n    HE_POST_END_FILE:\n      if logUploadsChk.checked then\n        if data.uploadFailed = '' then\n          add2log(format('Fully uploaded %s - %s @ %sB/s', [\n            data.uploadSrc,\n            smartSize(conn.bytesPostedLastItem),\n            smartSize(calcAverageSpeed(conn.bytesPostedLastItem)) ]), data)\n        else\n          add2log(format('Upload failed %s', [data.uploadSrc]), data);\n    HE_LAST_BYTE_DONE:\n      if logFulldownloadsChk.checked\n      and data.countAsDownload\n      and (data.downloadingWhat in [DW_FILE, DW_ARCHIVE]) then\n        begin\n        data.fullDLlogged:=TRUE;\n        add2log(format('Fully downloaded - %s @ %sB/s - %s', [\n          smartSize(conn.bytesSentLastItem),\n          smartSize(calcAverageSpeed(conn.bytesSentLastItem)),\n          url_]), data);\n        end;\n    end;\n\n  { apache format log is only related to http events, that's why it resides\n  { inside httpEvent(). moreover, it needs to access to some variables. }\n  if (logFile.filename = '') or (logFile.apacheFormat = '')\n  or (data = NIL) or not data.logLaterInApache\n  or not (event in [HE_LAST_BYTE_DONE, HE_DISCONNECTED]) then exit;\n\n  data.logLaterInApache:=FALSE;\n  s:=xtpl(logfile.apacheFormat, [\n    '\\t', TAB,\n    '\\r', #13,\n    '\\n', #10,\n    '\\\"', '\"',\n    '\\\\', '\\'\n  ]);\n  s:=reCB('%(!?[0-9,]+)?(\\{([^}]+)\\})?>?([a-z])', s, apacheLogCb, data);\n  appendTextFile(getDynLogFilename(data), s+CRLF);\n  end; // doLog\n\n  function limitsExceededOnConnection():boolean;\n  begin\n  if noLimitsFor(data.account) then result:=FALSE\n  else\n    result:=(maxConnections>0) and (srv.conns.count > maxConnections)\n      or (maxConnectionsIP>0)\n        and (countConnectionsByIP(data.address) > maxConnectionsIP)\n      or (maxIPs>0) and (countIPs() > maxIPs)\n  end; // limitsExceededOnConnection\n\n  function limitsExceededOnDownload():boolean;\n  var\n    was: string;\n  begin\n  result:=FALSE;\n  data.disconnectReason:='';\n\n  if data.conn.ignoreSpeedLimit then exit;\n\n  if (maxContempDLs > 0) and (countDownloads() > maxContempDLs)\n  or (maxContempDLsIP > 0) and (countDownloads(data.address) > maxContempDLsIP) then\n    data.disconnectReason:='Max simultaneous downloads'\n  else if (maxIPsDLing > 0) and (countIPs(TRUE) > maxIPsDLing) then\n    data.disconnectReason:='Max simultaneous addresses downloading'\n  else if preventLeechingChk.checked and (countDownloads(data.address, '', f) > 1) then\n    data.disconnectReason:='Leeching';\n\n  was:=data.disconnectReason;\n  runEventScript('download');\n\n  result:=data.disconnectReason > '';\n  if not result then exit;\n  data.countAsDownload:=FALSE;\n  getPage(if_(was=data.disconnectReason, 'max contemp downloads', 'deny'), data);\n  end; // limitsExceededOnDownload\n\n  procedure extractParams();\n  var\n    s: string;\n    i: integer;\n  begin\n  s:=url;\n  url:=chop('?',s);\n  s:=replaceStr(s,'+',' ');\n  data.urlvars.text:=s;\n  for i:=0 to data.urlvars.count-1 do\n    data.urlvars[i]:=decodeURL(ansistring(data.urlvars[i]));\n  end; // extractParams\n\n  procedure closeUploadingFile();\n  begin\n  if data.f = NIL then exit;\n  closeFile(data.f^);\n  dispose(data.f);\n  data.f:=NIL;\n  end; // closeUploadingFile\n\n  // close and eventually delete/rename\n  procedure closeUploadingFile_partial();\n  begin\n  if (data = NIL) or (data.f = NIL) then exit;\n  closeUploadingFile();\n  if deletePartialUploadsChk.checked then deleteFile(data.uploadDest)\n  else if renamePartialUploads = '' then exit;\n  if ipos('%name%', renamePartialUploads) = 0 then\n    renameFile(data.uploadDest, data.uploadDest+renamePartialUploads)\n  else\n    renameFile(data.uploadDest,\n      extractFilePath(data.uploadDest) + replaceText(renamePartialUploads, '%name%',extractFileName(data.uploadDest)) );\n  end; // closeUploadingFile_partial\n\n  function isDownloadManagerBrowser():boolean;\n  begin\n  result:=(pos('GetRight',data.agent)>0)\n    or (pos('FDM',data.agent)>0)\n    or (pos('FlashGet',data.agent)>0)\n  end; // isDownloadManagerBrowser\n\n  procedure logUploadFailed();\n  begin\n  if not logUploadsChk.checked then exit;\n  add2log(format('Upload failed for %s: %s', [data.uploadSrc, data.uploadFailed]), data);\n  end; // logUploadFile\n\n  function eventToFilename(event:string; table:array of string):string;\n  var\n    i: integer;\n  begin\n  result:=trim(stripChars(runEventScript(event, table), [TAB,#10,#13]));\n  // turn illegal chars into underscores\n  for i:=1 to length(result) do\n    if charInSet(result[i], ILLEGAL_FILE_CHARS-[':','\\']) then\n      result[i]:='_';\n  end; // eventToFilename\n\n  procedure getUploadDestinationFileName();\n  var\n    i: integer;\n    fn, ext, s: string;\n  begin\n  new(data.f);\n  fn:=data.uploadSrc;\n\n  data.uploadDest:=f.resource+'\\'+fn;\n  assignFile(data.f^, data.uploadDest );\n\n  // see if an event script wants to change the name\n  s:=eventToFilename('upload name', []);\n\n  if validFilepath(s) then // is it valid anyway?\n    begin\n    if pos('\\', s) = 0 then  // it's just the file name, no path specified: must include the path of the current folder\n      s:=f.resource+'\\'+s;\n    // ok, we'll use this new name\n    data.uploadDest:=s;\n    fn:=extractFileName(s);\n    end;\n\n  if numberFilesOnUploadChk.checked then\n    begin\n    ext:=extractFileExt(fn);\n    setLength(fn, length(fn)-length(ext));\n    i:=0;\n    while fileExists(data.uploadDest) do\n      begin\n      inc(i);\n      data.uploadDest:=format('%s\\%s (%d)%s', [f.resource, fn, i, ext]);\n      end;\n    end;\n  assignFile(data.f^, data.uploadDest);\n  end; // getUploadDestinationFileName\n\n  procedure addContentDisposition(attach:boolean=TRUE);\n  var s:ansistring;\n  begin\n  s:=ansistring(HSlib.encodeURL(data.lastFN));\n  conn.addHeader( ansistring('Content-Disposition: '+if_(attach, 'attachment; ')\n    +'filename*=UTF-8'''''+s+'; filename='+s));\n  end;\n\n  function sessionSetup():boolean;\n  var\n    sid: string;\n  begin\n  result:=TRUE;\n  if data = NIL then\n    exit;\n  data.user:='';\n  data.pwd:='';\n  if data.session = NIL then\n    begin\n    sid:=conn.getCookie(SESSION_COOKIE);\n    if sid = '' then\n      sid:=data.urlvars.Values[SESSION_COOKIE];\n    if sid = '' then\n      begin\n      data.session:=Tsession.create();\n      data.session.ip:=conn.address;\n      conn.setCookie(SESSION_COOKIE, data.session.id, ['path','/'], 'HttpOnly'); // the session is site-wide, even if this request was related to a folder\n      end\n    else\n      try\n        data.session:=sessions[sid];\n        if data.session.ip <> conn.address then\n          begin\n          conn.reply.mode:=HRM_DENY;\n          result:=FALSE;\n          exit;\n          end;\n      except\n        data.session:=Tsession.create(sid); // probably expired\n        data.session.ip:=conn.address;\n        end;\n    end;\n  if conn.request.user > '' then // priority\n    begin\n    data.user:=conn.request.user;\n    data.pwd:=conn.request.pwd;\n    data.account:=NIL;\n    exit;\n    end;\n  data.account:=getAccount(data.session.user);\n  if data.account = NIL then\n    exit;\n  data.user:=data.account.user;\n  data.pwd:=data.account.pwd;\n  if data.session.redirect > '' then\n    begin    \n    conn.reply.mode:=HRM_REDIRECT;\n    conn.reply.url:=data.session.redirect;\n    data.session.redirect:=''; // only once\n    result:=FALSE;\n    end;\n  end; // sessionSetup\n\n  procedure serveTar();\n  var\n    tar: TtarStream;\n    nofolders, selection, itsAsearch: boolean;\n\n    procedure addFolder(f:Tfile; ignoreConnFilters:boolean=FALSE);\n    var\n      i, ofs: integer;\n      listing: TfileListing;\n      fi: Tfile;\n      fIsTemp: boolean;\n      s: string;\n    begin\n    if not f.accessFor(data) then exit;\n    listing:=TfileListing.create();\n    try\n      listing.ignoreConnFilter:=ignoreConnFilters;\n      listing.fromFolder( f, data, shouldRecur(data));\n      fIsTemp:=f.isTemp();\n      ofs:=length(f.resource)-length(f.name)+1;\n      for i:=0 to length(listing.dir)-1 do\n        begin\n        if conn.state = HCS_DISCONNECTED then\n          break;\n\n        fi:=listing.dir[i];\n        // we archive only files, folders are just part of the path\n        if not fi.isFile() then continue;\n        if not fi.accessFor(data) then continue;\n\n        // build the full path of this file as it will be in the archive\n        if noFolders then\n          s:=fi.name\n        else if fIsTemp and not (FA_SOLVED_LNK in fi.flags)then\n          s:=copy(fi.resource, ofs, MAXINT) // pathTill won't work this case, because f.parent is an ancestor but not necessarily the parent\n        else\n          s:=fi.pathTill(f.parent); // we want the path to include also f, so stop at f.parent\n\n        tar.addFile(fi.resource, s);\n        end\n    finally listing.free end;\n    end; // addFolder\n\n    procedure addSelection();\n    var\n      i: integer;\n      s: string;\n      ft: Tfile;\n    begin\n    selection:=FALSE;\n    for i:=0 to data.postvars.count-1 do\n      if sameText('selection', data.postvars.names[i]) then\n        begin\n        selection:=TRUE;\n        s:=getTill('#', data.postvars.valueFromIndex[i]); // omit #anchors\n        if dirCrossing(s) then continue;\n        ft:=findFilebyURL(s, f);\n        if ft = NIL then continue;\n\n        try\n          if not ft.accessFor(data) then\n            continue;\n          // case folder\n          if ft.isFolder() then\n            begin\n            addFolder(ft, TRUE);\n            continue;\n            end;\n          // case file\n          if not fileExists(ft.resource) then\n            continue;\n          if noFolders then\n            s:=substr(s, lastDelimiter('\\/', s)+1);\n          tar.addFile(ft.resource, s);\n        finally freeIfTemp(ft) end;\n        end;\n    end; // addSelection\n\n  begin\n  if not f.hasRecursive(FA_ARCHIVABLE) then\n    begin\n    getPage('deny', data);\n    exit;\n    end;\n  data.downloadingWhat:=DW_ARCHIVE;\n  data.countAsDownload:=TRUE;\n  if limitsExceededOnDownload() then\n    exit;\n\n  // this will let you get all files as flatly arranged in the root of the archive, without folders\n  noFolders:=not stringExists(data.postVars.values['nofolders'], ['','0','false']);\n  itsAsearch:=data.urlvars.values['search'] > '';\n\n  tar:=TtarStream.create(); // this is freed by ThttpSrv\n  try\n    tar.fileNamesOEM:=oemTarChk.checked;\n    addSelection();\n    if not selection then\n      addFolder(f);\n\n    if tar.count = 0 then\n      begin\n      tar.free;\n      data.disconnectReason:='There is no file you are allowed to download';\n      getPage('deny', data, f);\n      exit;\n      end;\n    data.fileXferStart:=now();\n    conn.reply.mode:=HRM_REPLY;\n    conn.reply.contentType:=DEFAULT_MIME;\n    conn.reply.bodyMode:=RBM_STREAM;\n    conn.reply.bodyStream:=tar;\n\n    if f.name = '' then exit; // can this really happen?\n    data.lastFN:=if_(f.name='/', 'home', f.name)\n      +'.'+if_(selection, 'selection', if_(itsAsearch, 'search', 'folder'))\n      +'.tar';\n    data.lastFN:=first(eventToFilename('archive name', [\n      '%archive-name%', data.lastFN,\n      '%mode%', if_(selection, 'selection','folder'),\n      '%archive-size%', intToStr(tar.size)\n    ]), data.lastFN);\n    if not noContentdispositionChk.checked then\n      addContentDisposition();\n  except tar.free end;\n  end; // serveTar\n\n  procedure checkCurrentAddress();\n  begin\n  if selftesting then exit;\n  if limitsExceededOnConnection() then\n    data.preReply:=PR_OVERLOAD;\n  if isBanned(data)  then\n    begin\n    data.disconnectReason:='banned';\n    data.preReply:=PR_BAN;\n    if noReplyBan then conn.reply.mode:=HRM_CLOSE;\n    end;\n  end; // checkCurrentAddress\n\n  procedure handleRequest();\n  var\n    dlForbiddenForWholeFolder, specialGrant: boolean;\n    mode, urlCmd: string;\n    acc: Paccount;\n\n    function accessGranted(forceFile:Tfile=NIL):boolean;\n    resourcestring\n      FAILED = 'Login failed';\n    var\n      m: TStringDynArray;\n      fTemp: Tfile;\n    begin\n    result:=FALSE;\n    if assigned(forceFile) then f:=forceFile;\n    if f = NIL then exit;\n    if f.isFile() and (dlForbiddenForWholeFolder or f.isDLforbidden()) then\n      begin\n      getPage('deny', data);\n      exit;\n      end;\n    result:=f.accessFor(data);\n    // ok, you are referring a section of the template, which virtually resides in the root because of the url starting with /~\n    // but you don't have access rights to the root. We'll let you pass if it's actually a section and you are using it from a folder that you have access to.\n    if not result and (f = rootFile)\n    and ((mode='section') or ansiStartsStr('~', urlCmd) and tpl.sectionExist(copy(urlCmd,2,MAXINT)))\n    and (0 < reMatch(conn.getHeader('Referer'), '://([^@]*@)?'+getSafeHost(data)+'(/.*)', 'i', 1, @m)) then\n      begin\n      result:=TRUE;\n      specialGrant:=TRUE;\n      end;\n    if result then exit;\n    conn.reply.realm:=f.getShownRealm();\n    runEventScript('unauthorized');\n    getPage('login', data, f);\n    // log anyone trying to guess the password\n    if (forceFile = NIL) and stringExists(data.user, getAccountList(TRUE, FALSE))\n    and logOtherEventsChk.checked then\n      add2log(FAILED, data);\n    end; // accessGranted\n\n    function isAllowedReferer():boolean;\n    var\n      r: string;\n    begin\n    result:=TRUE;\n    if allowedReferer = '' then exit;\n    r:=hostFromURL(conn.getHeader('Referer'));\n    if (r = '') or (r = getSafeHost(data)) then exit;\n    result:=fileMatch(allowedReferer, r);\n    end; // isAllowedReferer\n\n    procedure replyWithString(s:string);\n    begin\n    if (data.disconnectReason > '') and not data.disconnectAfterReply then\n      begin\n      getPage('deny', data);\n      exit;\n      end;\n    \n    if conn.reply.contentType = '' then\n      conn.reply.contentType:=ansistring(if_(trim(getTill('<', s))='', 'text/html', 'text/plain'));\n    conn.reply.mode:=HRM_REPLY;\n    conn.reply.bodyMode:=RBM_STRING;\n    conn.reply.body:=UTF8encode(s);\n    compressReply(data);\n    end; // replyWithString\n\n    procedure deletion();\n    var\n      i: integer;\n      asUrl, s: string;\n      doneRes, done, errors: TStringDynArray;\n    begin\n    if (conn.request.method <> HM_POST)\n    or (data.postVars.values['action'] <> 'delete')\n    or not accountAllowed(FA_DELETE, data, f) then exit;\n\n    doneRes:=NIL;\n    errors:=NIL;\n    done:=NIL;\n    for i:=0 to data.postvars.count-1 do\n      if sameText('selection', data.postvars.names[i]) then\n        begin\n        asUrl:=getTill('#', data.postvars.valueFromIndex[i]); // omit #anchors\n        s:=uri2disk(asUrl, f);\n        if (s = '') or not fileOrDirExists(s) then continue; // ignore\n\n        runEventScript('file deleting', ['%item-deleting%', s]);\n        moveToBin(toSA([s, s+'.md5', s+COMMENT_FILE_EXT]) , TRUE);\n        if fileOrDirExists(s) then\n          begin\n          addString(asUrl, errors);\n          continue; // this was not deleted. permissions problem?\n          end;\n\n        addString(s, doneRes);\n        addString(asUrl, done);\n        runEventScript('file deleted', ['%item-deleted%', s]);\n        end;\n\n    removeFilesFromComments(doneRes);\n\n    if logDeletionsChk.checked and assigned(done) then\n      add2log('Deleted files in '+url+CRLF+join(CRLF, done), data);\n    if logDeletionsChk.checked and assigned(errors) then\n      add2log('Failed deletion in '+url+CRLF+join(CRLF, errors), data);\n    end; // deletion\n\n    function getAccountRedirect(acc:Paccount=NIL):string;\n    begin\n    result:='';\n    if acc = NIL then    \n      acc:=data.account;\n    acc:=accountRecursion(acc, ARSC_REDIR);\n    if acc = NIL then exit;\n    result:=acc.redir;\n    if (result = '') or ansiContainsStr(result, '://') then exit;\n    // if it's not a complete url, it may require some fixing\n    if not ansiStartsStr('/', result) then result:='/'+result;\n    result:=replaceStr(result,'\\','/');\n    end; // getAccountRedirect\n\n    function addNewAddress():boolean;\n    begin\n    result:=ipsEverConnected.indexOf(data.address) < 0;\n    if not result then exit;\n    ipsEverConnected.add(data.address);\n    end; // addNewAddress\n\n  type\n    ThashFunc = function(s:string):string;\n\n    function goodPassword(s:string; func:ThashFunc):boolean;\n    begin\n    s:=data.postVars.values['password'+s];\n    // Instead of hash(pwd+session) I replaced pwd with hash(pwd) so that in the future this may work even if we stored hashed password on the server\n    result:=(s > '') and (s = func(func(acc.pwd)+data.session.id))\n    end;\n\n    // parameters: u(username), e(?expiration_UTC), s2(sha256(rest+pwd))\n    function urlAuth():string;\n    var\n      s, sign: string;\n    begin\n    result:='';\n    if mode <> 'auth' then\n      exit;\n    acc:=getAccount(data.urlVars.values['u']);\n    if acc = NIL then\n      exit('username not found');\n    sign:=conn.request.url;\n    chop('?',sign);\n    s:=chop('&s2=',sign);\n    if strSHA256(s+acc.pwd)<>sign then\n      exit('bad sign');\n    try data.session.setTTL(TTimeZone.Local.ToLocalTime(StrToFloat(data.urlvars.Values['e'])) - now() )\n    except end;\n\n    if data.session.ttl < 0 then\n      exit('expired');    \n    data.account:=acc;\n    data.session.user:=acc.user;\n    data.user:=acc.user;\n    data.pwd:=acc.pwd;\n    data.session.redirect:=getAccountRedirect(acc);\n    end; //urlAuth\n    \n  var\n    b: boolean;\n    s: string;\n    i: integer;\n    section: PtplSection;\n  begin\n  // eventually override the address\n  if addressmatch(forwardedMask, conn.address) then\n    begin\n    data.address:=getTill(':', getTill(',', conn.getHeader('x-forwarded-for')));\n    if not checkAddressSyntax(data.address) then\n      data.address:=conn.address;\n    end;\n\n  checkCurrentAddress();\n\n  // update list\n  if (data.preReply = PR_NONE)\n  and addNewAddress()\n  and ipsEverFrm.visible then\n    ipsEverFrm.refreshData();\n\n  data.requestTime:=now();\n  data.downloadingWhat:=DW_UNK;\n  data.fullDLlogged:=FALSE;\n  data.countAsDownload:=FALSE;\n  conn.reply.contentType:='';\n  specialGrant:=FALSE;\n\n  data.lastFile:=NIL; // auto-freeing\n\n  with objByIp(data.address) do\n    begin\n    if speedLimitIP < 0 then limiter.maxSpeed:=MAXINT\n    else limiter.maxSpeed:=round(speedLimitIP*1000);\n    if conn.limiters.indexOf(limiter) < 0 then\n      conn.limiters.add(limiter);\n    end;\n\n  conn.addHeader('Accept-Ranges: bytes');\n  if sendHFSidentifierChk.checked then\n    conn.addHeader('Server: HFS '+VERSION);\n\n  case data.preReply of\n    PR_OVERLOAD:\n      begin\n      data.disconnectReason:='limits exceeded';\n      getPage('overload', data);\n      end;\n    PR_BAN:\n      begin\n      getPage('ban', data);\n      conn.reply.reason:='Banned: '+data.banReason;\n      end;\n    end;\n\n  runEventScript('pre-filter-request');\n\n  if (length(conn.request.user) > 100) or anycharIn('/\\:?*<>|', conn.request.user) then\n    begin\n    conn.reply.mode:=HRM_BAD_REQUEST;\n    exit;\n    end;\n\n  if not (conn.request.method in [HM_GET,HM_HEAD,HM_POST]) then\n    begin\n    conn.reply.mode:=HRM_METHOD_NOT_ALLOWED;\n    exit;\n    end;\n  inc(hitsLogged);\n\n  if data.preReply <> PR_NONE then exit;\n\n  url:=conn.request.url;\n  extractParams();\n  url:=decodeURL(ansistring(url));\n  mode:= data.urlvars.values['mode'];\n\n  data.lastFN:=extractFileName( replaceStr(url,'/','\\') );\n  data.agent:=getAgentID(conn);\n\n  if selfTesting and (url = 'test') then\n    begin\n    replyWithString('HFS OK');\n    exit;\n    end;\n\n  if not sessionSetup() then\n    exit;\n  if mode = 'logout' then\n    begin\n    data.logout();\n    replyWithString('ok');\n    exit;\n    end;\n  if mode = 'login' then\n    begin\n    acc:=getAccount(data.postVars.values['user']);\n    if acc = NIL then\n      s:='username not found'\n    else\n      if goodPassword('SHA256', strSHA256)\n      or goodPassword('MD5', strMD5)\n      or (data.postVars.values['password'] = acc.pwd) then\n        begin\n        data.session.user:=acc.user;\n        data.session.redirect:=getAccountRedirect(acc);\n        s:='ok';\n        end\n      else\n        s:='bad password'; //TODO shouldn't this change http code?\n    replyWithString(s);\n    exit;\n    end;\n  s:=urlAuth();\n  if s > '' then\n    begin\n    conn.reply.mode:=HRM_DENY;\n    replyWithString(s);\n    exit;\n    end;\n\n  conn.ignoreSpeedLimit:=noLimitsFor(data.account);\n\n  // all URIs must begin with /\n  if (url = '') or (url[1] <> '/') then\n    begin\n    conn.reply.mode:=HRM_BAD_REQUEST;\n    exit;\n    end;\n\n  runEventScript('request');\n  if data.disconnectReason > '' then\n    begin\n    getPage('deny', data);\n    exit;\n    end;\n  if conn.reply.mode = HRM_REDIRECT then\n    exit;\n\n  if ansiStartsStr('/~img', url) then\n    begin\n    if not sendPic(data) then\n      getPage('not found', data);\n    exit;\n    end;\n  if mode = 'jquery' then\n    begin\n    if notModified(conn,'jquery'+FloatToStr(uptime), '') then\n      exit;\n    replyWithString(getRes('jquery'));\n    conn.reply.contentType:='text/javascript';\n    exit;\n    end;\n\n  // forbid using invalid credentials\n  if not freeLoginChk.checked and not specialGrant then\n    if (data.user>'')\n    and ((data.account=NIL) or (data.account.pwd <> data.pwd))\n    and not usersInVFS.match(data.user, data.pwd) then\n      begin\n      data.acceptedCredentials:=FALSE;\n      runEventScript('unauthorized');\n      getPage('unauthorized', data);\n      conn.reply.realm:='Invalid login';\n      exit;\n      end\n    else\n      data.acceptedCredentials:=TRUE;\n\n  f:=findFileByURL(url);\n  urlCmd:=''; // urlcmd is only if the file doesn't exist\n  if f = NIL then\n    begin\n    // maybe the file doesn't exist because the URL has a final command in it\n    // move last url part from 'url' into 'urlCmd'\n    urlCmd:=url;\n    url:=chop(lastDelimiter('/', urlCmd)+1, 0, urlCmd);\n    // we know an urlCmd must begin with ~\n    // favicon is handled as an urlCmd: we provide HFS icon.\n    // an non-existent ~file will be detected a hundred lines below.\n    if ansiStartsStr('~', urlCmd) or (urlCmd = 'favicon.ico') then\n      f:=findFileByURL(url);\n    end;\n  if f = NIL then\n    begin\n    if sameText(url, '/robots.txt') and stopSpidersChk.checked then\n      replyWithString('User-agent: *'+CRLF+'Disallow: /')\n    else\n      getPage('not found', data);\n    exit;\n    end;\n  if f.isFolder() and not ansiEndsStr('/',url) then\n    begin\n    conn.reply.mode:=HRM_MOVED;\n    conn.reply.url:=f.url(); // we use f.url() instead of just appending a \"/\" to url because of problems with non-ansi chars http://www.rejetto.com/forum/?topic=7837\n    exit;\n    end;\n  if f.isFolder() and (urlCmd = '') and (mode='') then\n    switchToDefaultFile();\n  if enableNoDefaultChk.checked and (urlCmd = '~nodefault') then\n    urlCmd:='';\n\n  if f.isRealFolder() and not sysutils.directoryExists(f.resource)\n  or f.isFile() and not fileExists(f.resource) then\n    begin\n    getPage('not found', data);\n    exit;\n    end;\n  dlForbiddenForWholeFolder:=f.isDLforbidden();\n\n  if not accessGranted() then\n    exit;\n\n  if urlCmd = 'favicon.ico' then\n    begin\n    sendPic(data, 23);\n    exit;\n    end;\n\n  if urlCmd = '~login' then // legacy method for login dialog\n    if conn.request.user = '' then\n      begin \n      getPage('unauthorized', data);\n      if loginRealm > '' then\n        conn.reply.realm:=loginRealm;\n      exit;\n      end\n    else\n      begin\n      conn.reply.mode:=HRM_REDIRECT;\n      conn.reply.url:=first(getAccountRedirect(), url);\n      exit;\n      end;\n\n  b:=urlCmd = '~upload+progress';\n  if (b or (urlCmd = '~upload') or (urlCmd = '~upload-no-progress')) then\n    begin\n    if not f.isRealFolder() then\n      getPage('deny', data)\n    else if accountAllowed(FA_UPLOAD, data, f) then\n      getPage( if_(b,'upload+progress','upload'), data, f)\n    else\n      begin\n      getPage('unauthorized', data);\n      runEventScript('unauthorized');\n      end;\n    if b then  // fix for IE6\n      begin\n      data.disconnectAfterReply:=TRUE;\n      data.disconnectReason:='IE6 workaround';\n      end;\n    exit;\n    end;\n\n  if (conn.request.method = HM_POST) and assigned(data.uploadResults) then\n    begin\n    getPage('upload-results', data, f);\n    exit;\n    end;\n\n  // provide access to any [section] in the tpl, included [progress]\n  if mode = 'section' then\n    s:=first(data.urlvars.values['id'], 'no-id') // no way, you must specify the id\n  else if (f = rootFile) and (urlCmd > '') then\n    s:=substr(urlCmd,2)\n  else\n    s:='';\n  if (s > '') and f.isFolder() and not ansiStartsText('special:', s) then\n    with tplFromFile(f) do // temporarily builds from diff tpls\n      try\n        // NB: section [] is not accessible, because of the s>'' test\n        section:=getsection(s);\n        if assigned(section) and not section.nourl then // it has to exist and be accessible \n          begin\n          if not section.cache\n          or not notModified(conn, s+floatToStr(section.ts), '') then\n            getPage(s, data, f, me());\n          exit;\n          end;\n      finally free end;\n\n  if f.isFolder() and not (FA_BROWSABLE in f.flags)\n  and stringExists(urlCmd,['','~folder.tar','~files.lst']) then\n    begin\n    getPage('deny', data);\n    exit;\n    end;\n\n  if not isAllowedReferer()\n  or f.isFile() and f.isDLforbidden() then\n    begin\n    getPage('deny', data);\n    exit;\n    end;\n\n  if (urlCmd = '~folder.tar')\n  or (mode = 'archive') then\n    begin\n    serveTar();\n    exit;\n    end;\n\n  // please note: we accept also ~files.lst.m3u\n  if ansiStartsStr('~files.lst', urlCmd)\n  or f.isFolder() and (data.urlvars.values['tpl'] = 'list') then\n    begin\n    // load from external file\n    s:=cfgPath+FILELIST_TPL_FILE;\n    if newMtime(s, lastFilelistTpl) then\n      filelistTpl.fullText:=loadtextfile(s);\n    // if no file is given, load from internal resource\n    if not fileExists(s) and (lastFilelistTpl > 0) then\n      begin\n      lastFilelistTpl:=0;\n      filelistTpl.fullText:=getRes('filelistTpl');\n      end;\n\n    data.downloadingWhat:=DW_FOLDERPAGE;\n    data.disconnectAfterReply:=TRUE; // needed for IE6... ugh...\n    data.disconnectReason:='IE6 workaround';\n    replyWithString(trim(getFolderPage(f, data, filelistTpl)));\n    exit;\n    end;\n\n  // from here on, we manage only services with no urlCmd.\n  // a non empty urlCmd means the url resource was not found.\n  if urlCmd > '' then\n    begin\n    getPage('not found', data);\n    exit;\n    end;\n\n  case conn.request.method of\n    HM_GET, HM_POST:\n      begin\n      conn.reply.mode:=HRM_REPLY;\n      lastActivityTime:=now();\n      end;\n    HM_HEAD: conn.reply.mode:=HRM_REPLY_HEADER;\n    end;\n\n  data.lastFile:=f; // auto-freeing\n\n  if f.isFolder() then\n    begin\n    deletion();\n\n    data.downloadingWhat:=DW_FOLDERPAGE;\n    if DMbrowserTplChk.Checked and isDownloadManagerBrowser() then\n      s:=getFolderPage(f, data, dmBrowserTpl)\n    else\n      s:=getFolderPage(f, data, tpl);\n    if conn.reply.mode <> HRM_REDIRECT then\n      replyWithString(s);\n    exit;\n    end;\n\n  if notModified(conn, f) then // calling notModified before limitsExceededOnDownload makes possible for [download] to manipualate headers set here\n    exit;\n  data.countAsDownload:=f.shouldCountAsDownload();\n  if data.countAsDownload and limitsExceededOnDownload() then\n    exit;\n\n  setupDownloadIcon(data);\n  data.eta.idx:=0;\n  conn.reply.contentType:=ansistring(name2mimetype(f.name, DEFAULT_MIME));\n  conn.reply.bodyMode:=RBM_FILE;\n  conn.reply.bodyFile:=f.resource;\n  data.downloadingWhat:=DW_FILE;\n  { I guess this would not help in any way for files since we are already handling the 'if-modified-since' field\n  try\n    conn.addHeader('ETag: '+getEtag(f.resource));\n  except end;\n  }\n  \n  data.fileXferStart:=now();\n  if data.countAsDownload and (flashOn = 'download') then flash();\n\n  b:=(openInBrowser <> '') and fileMatch(openInBrowser, f.name)\n    or inBrowserIfMIME and (conn.reply.contentType <> DEFAULT_MIME);\n\n  s:=first(eventToFilename('download name', []), f.name); // a script can eventually decide the name\n  // N-th workaround for IE. The 'accept' check should let us know if the save-dialog is displayed. More information at www.rejetto.com/forum/?topic=6275\n  if (data.agent = 'MSIE') and (conn.getHeader('Accept') = '*/*') then\n    s:=replaceStr(s, ' ','%20');\n  if not noContentdispositionChk.checked or not b then\n    addContentDisposition(not b);\n  end; // handleRequest\n\n  procedure lastByte();\n\n    procedure incDLcount(f:Tfile; res:string);\n    begin\n    if (f = NIL) or f.isTemp() then autoupdatedFiles.incInt(res)\n    else f.DLcount:=1+f.DLcount\n    end;\n\n  var\n    archive: TarchiveStream;\n    i: integer;\n  begin\n  if data.countAsDownload then\n    inc(downloadsLogged);\n  // workaround for a bug that was fixed in Wget/1.10\n  if stringExists(data.agent, ['Wget/1.7', 'Wget/1.8.2', 'Wget/1.9', 'Wget/1.9.1']) then\n    data.disconnect('wget bug workaround (consider updating wget)');\n  VFScounterMod:=TRUE;\n  case data.downloadingWhat of\n    DW_FILE:\n      if assigned(data) then\n        incDLcount(data.lastFile, data.lastFile.resource);\n    DW_ARCHIVE:\n      begin\n      archive:=conn.reply.bodyStream as TarchiveStream;\n      for i:=0 to length(archive.flist)-1 do\n        incDLcount(Tfile(archive.flist[i].data), archive.flist[i].src);\n      end;\n    end;\n  if data.countAsDownload then\n    runEventScript('download completed');\n  end; // lastByte\n\n  function canWriteFile():boolean;\n  begin\n  result:=FALSE;\n  if data.f = NIL then exit;\n  result:= minDiskSpace <= diskSpaceAt(data.uploadDest) div MEGA;\n  if result then exit;\n  closeUploadingFile_partial();\n  data.uploadFailed:='Minimum disk space reached.';\n  end; // canWriteFile\n\n  function complyUploadFilter():boolean;\n\n    function getMask():string;\n    begin\n    if f.isTemp() then result:=f.parent.uploadFilterMask\n    else result:=f.uploadFilterMask;\n    if result = '' then\n      result:='\\'+PROTECTED_FILES_MASK; // the user can disable this default filter by inputing * as mask\n    end;\n\n  begin\n  result:=validFilename(data.uploadSrc)\n    and not sameText(data.uploadSrc, DIFF_TPL_FILE) // never allow this\n    and not isExtension(data.uploadSrc, '.lnk')  // security matters (by mars)\n    and fileMatch(getMask(), data.uploadSrc);\n  if not result then\n    data.uploadFailed:='File name or extension forbidden.';\n  end; // complyUploadFilter\n\n  function canCreateFile():boolean;\n  begin\n  IOresult;\n  rewrite(data.f^, 1);\n  result:=IOresult=0;\n  if result then exit;\n  data.uploadFailed:='Error creating file.';\n  end; // canCreateFile\n\nvar\n  ur: TuploadResult;\n  i: integer;\nbegin\nif assigned(conn) and (conn.getLockCount <> 1) then\n  add2log('please report on the forum about this message');\n\nf:=NIL;\ndata:=NIL;\nif assigned(conn) then\n  data:=conn.data;\nif assigned(data) then\n  data.lastActivityTime:=now();\n\nif dumpTrafficChk.Checked and (event in [HE_GOT, HE_SENT]) then\n  appendFile(exePath+'hfs-dump.bin', TLV(if_(event=HE_GOT,1,2),\n    TLV(10, str_(now()))+TLV(11, data.address)+TLV(12, conn.port)+TLV(13, conn.eventData)\n  ));\n\nif preventStandbyChk.checked and assigned(setThreadExecutionState) then\n  setThreadExecutionState(1);\n\n// this situation can happen when there is a call to processMessage() before this function ends\nif (data = NIL) and (event in [HE_REQUESTED, HE_GOT]) then\n  exit;\n\ncase event of\n  HE_CANT_OPEN_FILE: data.error:='Can''t open file';\n  HE_OPEN:\n    begin\n    startBtn.Hide();\n    updateUrlBox();\n    // this happens when the server is switched on programmatically\n    usingFreePort:= port='';\n    updatePortBtn();\n    runEventScript('server start');\n    end;\n  HE_CLOSE:\n    begin\n    startBtn.show();\n    updatePortBtn();\n    updateUrlBox();\n    runEventScript('server stop');\n    end;\n  HE_REQUESTING:\n    begin\n    // do some clearing, due for persistent connections\n    data.vars.clear();\n    data.urlvars.clear();\n    data.postVars.clear();\n    data.tplCounters.clear();\n    refreshConn(data);\n    end;\n  HE_GOT_HEADER: runEventScript('got header');\n  HE_REQUESTED:\n    begin\n    data.dontLog:=FALSE;\n    handleRequest();\n    // we save the value because we need it also in HE_REPLY, and temp files are not avaliable there\n    data.dontLog:=data.dontLog or assigned(f) and f.hasRecursive(FA_DONT_LOG);\n    if f <> data.lastFile then\n      freeIfTemp(f);\n    refreshConn(data);\n    end;\n  HE_STREAM_READY:\n    begin\n    i:=length(data.disconnectReason);\n    runEventScript('stream ready');\n    if (i=0) and (data.disconnectReason > '') then // only if it was not already disconnecting\n      begin\n      conn.reply.additionalHeaders:=''; // content-disposition would prevent the browser\n      getPage('deny', data);\n      conn.initInputStream();\n      end;\n    end;\n  HE_REPLIED:\n    begin\n    setupDownloadIcon(data); // remove the icon\n    data.lastBytesGot:=0;\n    if data.disconnectAfterReply then\n      data.disconnect('replied');\n    if updateASAP > '' then\n      data.disconnect('updating');\n    refreshConn(data);\n    end;\n  HE_LAST_BYTE_DONE:\n    begin\n    if (conn.reply.mode = HRM_REPLY) and (data.downloadingWhat in [DW_FILE, DW_ARCHIVE]) then\n      lastByte();\n    runEventScript('request completed');\n    end;\n  HE_CONNECTED:\n    begin\n    //** lets see if this helps with speed\n    i:=-1;\n    WSocket_setsockopt(conn.sock.HSocket, IPPROTO_TCP, TCP_NODELAY, @i, sizeOf(i));\n\n    data:=TconnData.create(conn);\n    conn.limiters.add(globalLimiter); // every connection is bound to the globalLimiter\n    conn.sndBuf:=STARTING_SNDBUF;\n    data.address:=conn.address;\n    checkCurrentAddress();\n    connBox.items.add();\n    if (flashOn = 'connection') and (conn.reply.mode <> HRM_CLOSE) then flash();\n    runEventScript('connected');\n    end;\n  HE_DISCONNECTED:\n    begin\n    closeUploadingFile_partial();\n    data.deleting:=TRUE;\n    toDelete.add(data);\n    with connBox.items do count:=count-1;\n    runEventScript('disconnected');\n    connBox.invalidate();\n    end;\n  HE_GOT: lastActivityTime:=now();\n  HE_SENT:\n    begin\n    if data.nextDloadScreenUpdate <= now() then\n      begin\n      data.nextDloadScreenUpdate:= now()+DOWNLOAD_MIN_REFRESH_TIME;\n      refreshConn(data);\n      setupDownloadIcon(data);\n      end;\n    lastActivityTime:=now();\n    end;\n  HE_POST_FILE:\n    begin\n    sessionSetup();\n    data.downloadingWhat:=DW_UNK;\n    data.agent:=getAgentID(conn);\n    data.fileXferStart:=now();\n    f:=findFileByURL(decodeURL(conn.request.url));\n    data.lastFile:=f; // auto-freeing\n    data.uploadSrc:=conn.post.filename;\n    data.uploadFailed:='';\n    if (f = NIL) or not accountAllowed(FA_UPLOAD, data, f) or not f.accessFor(data) then\n      data.uploadFailed:=if_(f=NIL, 'Folder not found.', 'Not allowed.')\n    else\n      begin\n      closeUploadingFile();\n      getUploadDestinationFileName();\n\n      if complyUploadFilter() and canWriteFile() and canCreateFile() then\n        saveFile(data.f^, conn.post.data);\n      repaintTray();\n      end;\n    if data.uploadFailed > '' then\n      logUploadFailed();\n    end;\n  HE_POST_MORE_FILE:\n    if canWriteFile() then\n      saveFile(data.f^, conn.post.data);\n  HE_POST_END_FILE:\n    begin\n    // fill the record\n    ur.fn:=first(extractFilename(data.uploadDest), data.uploadSrc);\n    if data.f = NIL then ur.size:=-1\n    else ur.size:=filesize(data.f^);\n    ur.speed:=calcAverageSpeed(conn.bytesPostedLastItem);\n    // custom scripts\n    if assigned(data.f) then inc(uploadsLogged);\n    closeUploadingFile();\n    if data.uploadFailed = '' then\n      data.uploadFailed:=trim(runEventScript('upload completed'))\n    else\n      runEventScript('upload failed');\n    ur.reason:=data.uploadFailed;\n    if data.uploadFailed > '' then\n      deleteFile(data.uploadDest);\n    // queue the record\n    i:=length(data.uploadResults);\n    setLength(data.uploadResults, i+1);\n    data.uploadResults[i]:=ur;\n\n    refreshConn(data);\n    end;\n  HE_POST_VAR: data.postVars.add(conn.post.varname+'='+conn.post.data);\n  HE_POST_VARS:\n    if conn.post.mode = PM_URLENCODED then\n      urlToStrings(conn.post.data, data.postVars);\n  // default case\n  else refreshConn(data);\n  end;//case\nif assigned(data.session) then\n  data.session.keepAlive();\nif event in [HE_CONNECTED, HE_DISCONNECTED, HE_OPEN, HE_CLOSE, HE_REQUESTED, HE_POST_END, HE_LAST_BYTE_DONE] then\n  begin\n  repaintTray();\n  updateTrayTip();\n  end;\ndoLog();\nend; // httpEvent\n\nprocedure findSimilarIP(fromIP:string);\n\n  function howManySameNumbers(ip1,ip2:string):integer;\n  var\n    n1, n2: string;\n  begin\n  result:=0;\n  while ip1 > '' do\n    begin\n    n1:=chop('.',ip1);\n    n2:=chop('.',ip2);\n    if n1 <> n2 then exit;\n    inc(result);\n    end;\n  end; // howManySameNumbers\n\nvar\n  chosen: string;\n  i: integer;\n  a: TStringDynArray;\nbegin\nif fromIP = '' then exit;\nif stringExists(fromIP, customIPs) then\n  begin\n  setDefaultIP(fromIP);\n  exit;\n  end;\nchosen:=getIP();\na:=getIPs();\nfor i:=0 to length(a)-1 do\n  if howManySameNumbers(chosen, fromIP) < howManySameNumbers(a[i], fromIP) then\n    chosen:=a[i];\nsetDefaultIP(chosen);\nend; // findSimilarIP\n\nprocedure setLimitOption(var variable:integer; newValue:integer;\n  menuItem:TmenuItem; menuLabel:string);\nbegin\nif newValue < 0 then newValue:=0;\nvariable:=newValue;\nmenuItem.caption:=format(menuLabel,\n  [if_(newValue=0,DISABLED,intToStr(newValue))]);\nend; // setLimitOption\n\nprocedure setMaxIPs(v:integer);\nresourcestring\n  LIMIT = 'Max simultaneous addresses: %s ...';\nbegin setLimitOption(maxIPs,v, mainfrm.maxIPs1, LIMIT) end;\n\nprocedure setMaxIPsDLing(v:integer);\nresourcestring\n  LIMIT = 'Max simultaneous addresses downloading: %s ...';\nbegin setLimitOption(maxIPsDLing,v, mainfrm.maxIPsDLing1, LIMIT) end;\n\nprocedure setMaxConnections(v:integer);\nresourcestring\n  LIMIT = 'Max connections: %s ...';\nbegin setLimitOption(maxConnections,v, mainfrm.maxConnections1, LIMIT) end;\n\nprocedure setMaxConnectionsIP(v:integer);\nresourcestring\n  LIMIT = 'Max connections from single address: %s ...';\nbegin setLimitOption(maxConnectionsIP, v, mainfrm.MaxconnectionsfromSingleaddress1, LIMIT) end;\n\nprocedure setMaxDLs(v:integer);\nresourcestring\n  LIMIT = 'Max simultaneous downloads: %s ...';\nbegin setLimitOption(maxContempDLs, v, mainfrm.maxDLs1, LIMIT) end;\n\nprocedure setMaxDLsIP(v:integer);\nresourcestring\n  LIMIT = 'Max simultaneous downloads from single address: %s ...';\nbegin setLimitOption(maxContempDLsIP, v, mainfrm.maxDLsIP1, LIMIT) end;\n\nprocedure setAutoFingerprint(v:integer);\nresourcestring\n  FINGERPRINT = 'Create fingerprint on addition under %d KB';\n  NO_FINGERPRINT = 'Create fingerprint on addition: disabled';\nbegin\nautoFingerprint:=v;\nmainfrm.Createfingerprintonaddition1.caption:=format(if_(v=0, NO_FINGERPRINT, FINGERPRINT), [v]);\nend;\n\nfunction loadFingerprint(fn:string):string;\nvar\n  hasher: Thasher;\nbegin\nresult:=loadMD5for(fn);\nif result > '' then exit;\n\nhasher:=Thasher.create();\nhasher.loadFrom(ExtractFilePath(fn));\nresult:=hasher.getHashFor(fn);\nhasher.Free;\nend; // loadFingerprint\n\nprocedure applyFilesBoxRatio();\nbegin\nif filesBoxRatio <= 0 then exit;\nmainfrm.filesPnl.width:=round(filesBoxRatio*mainfrm.clientWidth);\nend; // applyFilesBoxRatio\n\nprocedure TmainFrm.FormResize(Sender: TObject);\nbegin\nurlBox.Width:=urlToolbar.ClientWidth-browseBtn.Width-copyBtn.width;\napplyFilesBoxRatio();\nend;\n\nprocedure checkIfOnlyCountersChanged();\nbegin\nif not VFSmodified and VFScounterMod then\n  mainfrm.saveVFS(lastFileOpen)\nend;\n\nfunction checkVfsOnQuit():boolean;\nvar\n  s: string;\nbegin\nresult:=TRUE;\nif loadingVFS.disableAutosave then exit;\ncheckIfOnlyCountersChanged();\nif not VFSmodified or mainfrm.quitWithoutAskingToSaveChk.checked then exit;\nif mainfrm.autosaveVFSchk.checked then\n  mainfrm.saveVFS(lastFileOpen)\nelse if windowsShuttingDown then\n  begin\n  s:=lastFileOpen; // don't change this\n  mainfrm.saveVFS(VFS_TEMP_FILE);\n  lastFileOpen:=s;\n  end\nelse\n  case msgDlg('Your current file system is not saved.'#13'Save it?', MB_ICONQUESTION+if_(quitASAP, MB_YESNO, MB_YESNOCANCEL)) of\n    IDYES: mainfrm.saveVFS(lastFileOpen);\n    IDNO: ; // just go on\n    IDCANCEL: result:=FALSE;\n    end;\nend; // checkVfsOnQuit\n\nprocedure inputComment(f:Tfile);\nresourcestring\n  MSG= 'Please insert a comment for \"%s\".'\n    +#13'You should use HTML: <br> for break line.';\nbegin\nVFSmodified:=inputqueryLong('Comment', format(MSG, [f.name]), f.comment);\nend; // inputComment\n\nfunction Tmainfrm.addFile(f:Tfile; parent:Ttreenode=NIL; skipComment:boolean=FALSE):Tfile;\nbegin\nabortBtn.show();\nstopAddingItems:=FALSE;\ntry result:=addFileRecur(f,parent);\nfinally abortBtn.hide() end;\nif result = NIL then exit;\nif stopAddingItems then\n  msgDlg('File addition was aborted.'#13'The list of files is incomplete.', MB_ICONWARNING);\nif assigned(parent) then parent.expanded:=TRUE;\nfilesbox.Selected:=result.node;\n\nif skipComment or not autoCommentChk.checked then exit;\napplication.restore();\napplication.bringToFront();\ninputComment(f);\nend; // addFile\n\nfunction Tmainfrm.addFileRecur(f:Tfile; parent:Ttreenode=NIL):Tfile;\nvar\n  n: Ttreenode;\n  sr: TsearchRec;\n  newF: Tfile;\n  s: string;\nbegin\nresult:=f;\nif stopAddingItems then exit;\n\nif parent = NIL then parent:=rootNode;\n\nif addingItemsCounter >= 0 then // counter enabled\n  begin\n  inc(addingItemsCounter);\n  if addingItemsCounter and 15 = 0 then // step 16\n    begin\n    application.ProcessMessages();\n    setStatusBarText(format('Adding item #%d', [addingItemsCounter]));\n    end;\n  end;\n\n// ensure the parent is a folder\nwhile assigned(parent) and assigned(parent.data)\nand not nodeToFile(parent).isFolder() do\n  parent:=parent.parent;\n// test for duplicate. it often happens when you have a shortcut to a file.\nif existsNodeWithName(f.name, parent) then\n  begin\n  result:=NIL;\n  exit;\n  end;\n\nif stopAddingItems then exit;\n\nn:=filesBox.Items.AddChild(parent, f.name);\n// stateIndex assignments are a workaround to a delphi bug\nn.stateIndex:=0;\nf.node:=n;\nn.stateIndex:=-1;\nn.Data:=f;\nf.setupImage();\n// autocreate fingerprint\nif f.isFile() and fingerprintsChk.checked and (autoFingerprint > 0) then\n  try\n    f.size:=sizeofFile(f.resource);\n    if (autoFingerprint >= f.size div 1024)\n    and (loadFingerprint(f.resource) = '') then\n      begin\n      s:=createFingerprint(f.resource);\n      if s > '' then saveTextFile(f.resource+'.md5', s);\n      end;\n  except\n  end;\n  \nif (f.resource = '') or not f.isVirtualFolder() then exit;\n// virtual folders must be run at addition-time\nif findFirst(f.resource+'\\*',faAnyfile, sr) <> 0 then exit;\ntry\n  repeat\n  if stopAddingItems then break;\n  if (sr.name[1] = '.')\n  or isFingerprintFile(sr.name) or isCommentFile(sr.name) then continue;\n  newF:=Tfile.create(f.resource+'\\'+sr.name);\n  if newF.isFolder() then include(newF.flags, FA_VIRTUAL);\n  if addfileRecur(newF, n) = NIL then\n    freeAndNIL(newF);\n  until findnext(sr) <> 0;\nfinally FindClose(sr) end;\nend; // addFileRecur\n\nprocedure TmainFrm.filesBoxCollapsing(Sender: TObject; Node: TTreeNode;\n  var AllowCollapse: Boolean);\nbegin\nAllowCollapse:=node.parent<>NIL;\nend;\n\nprocedure TmainFrm.Newlink1Click(Sender: TObject);\nvar\n  name: string;\nbegin\nname:=getUniqueNodeName('New link', filesBox.Selected);\naddfile(Tfile.createLink(name), filesBox.Selected).node.Selected:=TRUE;\nsetURL1click(sender);\nend;\n\nprocedure TmainFrm.newfolder1Click(Sender: TObject);\nvar\n  name: string;\nbegin\nname:=getUniqueNodeName('New folder', filesBox.selected);\nwith addFile(Tfile.createVirtualFolder(name), filesBox.Selected).node do\n  begin\n  Selected:=TRUE;\n  editText();\n  end;\nend;\n\nprocedure TmainFrm.filesBoxEditing(Sender: TObject; Node: TTreeNode;\n  var AllowEdit: Boolean);\nbegin\nif node = NIL then exit;\n{ disable shortcuts, to be used in editbox. Shortcuts need to be re-activated,\n{ but when the node text is left unchanged, no event is notified, so we got to\n{ use timerEvent to do the work. }\ncopyURL1.ShortCut:=0;\nremove1.ShortCut:=0;\nPaste1.ShortCut:=0;\n\nallowedit:=allowedit and not nodeToFile(node).isRoot()\nend;\n\nprocedure TmainFrm.filesBoxEdited(Sender:TObject; Node:TTreeNode; var S:String);\nvar\n  f: Tfile;\nbegin\nf:=node.data;\ns:=trim(s); // mod by mars\nif f.name = s then exit;\n\nif f.isFileOrFolder() and not validFilename(s)\nor (s = '')\nor (pos('/',s) > 0)\nthen\n  begin\n  s:=node.text;\n  msgDlg('Invalid filename', MB_ICONERROR);\n  exit;\n  end;\n\nif existsNodeWithName(s, node.parent)\nand (msgDlg(MSG_SAME_NAME, MB_ICONWARNING+MB_YESNO) <> IDYES) then\n  begin\n  s:=node.text; // mod by mars\n  exit;\n  end;\n\nf.name:=s;\nVFSmodified:=TRUE;\nupdateUrlBox();\nend;\n\nfunction setNilChildrenFrom(nodes:TtreeNodeDynArray; father:integer):integer;\nvar\n  i: integer;\nbegin\nresult:=0;\nfor i:=father+1 to length(nodes)-1 do\n  if nodes[i].Parent = nodes[father] then\n    begin\n    nodes[i]:=NIL;\n    inc(result);\n    end;\nend; // setNilChildrenFrom\n\nprocedure Tmainfrm.remove(node:Ttreenode=NIL);\nvar\n  i: integer;\n  list: TtreenodeDynArray;\n  warn: boolean;\nbegin\nif assigned(node) then\n  begin\n  if node.parent = NIL then exit;\n  if nodeIsLocked(node) then\n    begin\n    msgDlg(MSG_ITEM_LOCKED, MB_ICONERROR);\n    exit;\n    end;\n  node.Delete();\n  exit;\n  end;\n\ni:=filesbox.SelectionCount;\nif (i = 0) or (i = 1) and selectedFile.isRoot() then exit;\nif not deleteDontAskChk.checked\nand (msgDlg('Delete?', MB_ICONQUESTION+MB_YESNO) = IDNO) then\n  exit;\nlist:=copySelection();\n// now proceed\nwarn:=FALSE;\nfor i:=0 to length(list)-1 do\n  if assigned(list[i]) and assigned(list[i].parent) then\n    if assigned(list[i].data) and nodeIsLocked(list[i]) then\n      warn:=TRUE\n    else\n      begin\n      // avoid messing with children that will automatically be deleted as soon as the father is\n      setNilChildrenFrom(list, i);\n      list[i].Delete();\n      end;\n\nif warn then\n  msgDlg(MSG_SOME_LOCKED, MB_ICONWARNING);\nend; // remove\n\nprocedure TmainFrm.Remove1Click(Sender: TObject);\nbegin\n// this method is bound to the DEL key also while a renaming is ongoing\nif not filesBox.IsEditing() then remove()\nend;\n\nprocedure TmainFrm.startBtnClick(Sender: TObject);\nbegin toggleServer() end;\n\nfunction Tmainfrm.pointedConnection():TconnData;\nvar\n  li: TlistItem;\nbegin\nresult:=NIL;\nwith connbox.screenToClient(mouse.cursorPos) do\n  li:=connbox.getItemAt(x,y);\nif li = NIL then exit;\nresult:=conn2data(li);\nend; // pointedConnection\n\nfunction Tmainfrm.pointedFile(strict:boolean=TRUE):Tfile;\nvar\n  n: Ttreenode;\n  p: Tpoint;\nbegin\nresult:=NIL;\np:=filesbox.screenToClient(mouse.cursorPos);\nif strict and not (htOnItem in filesBox.getHitTestInfoAt(p.x,p.y)) then exit;\nn:=filesbox.getNodeAt(p.x,p.y);\nif (n = NIL) or (n.data = NIL) then exit;\nresult:=n.data;\nend; // pointedFile\n\nprocedure Tmainfrm.updateUrlBox();\nvar\n  f: Tfile;\nbegin\nif quitting then exit;\nif selectedFile = NIL then f:=rootFile\nelse f:=selectedFile;\n\nif f = NIL then urlBox.Text:=''\nelse urlBox.text:=f.fullURL()\nend; // updateUrlBox\n\nprocedure TmainFrm.filesBoxChange(Sender: TObject; Node: TTreeNode);\nbegin\nif filesBox.SelectionCount = 0 then selectedFile:=NIL\nelse selectedFile:=filesBox.selections[0].data;\nupdateUrlBox()\nend;\n\nfunction Tmainfrm.selectedConnection():TconnData;\nbegin\nif connBox.selected = NIL then\n  result:=NIL\nelse\n  result:=conn2data(connBox.selected)\nend;\n\nprocedure TmainFrm.setLogToolbar(v:boolean);\nbegin\nexpandedPnl.visible:=v;\ncollapsedPnl.visible:=not v;\nend; // setLogToolbar\n\nprocedure TmainFrm.Kickconnection1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\ncd.disconnect('kicked');\nend;\n\nprocedure TmainFrm.Kickallconnections1Click(Sender: TObject);\nbegin kickByIP('*') end;\n\nprocedure TmainFrm.KickIPaddress1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\nkickByIP(cd.address);\nend;\n\nprocedure setAutosave(var rec:Tautosave; v:integer);\nresourcestring\n  AUTOSAVE = 'Auto save every: ';\n  SECONDS = '%d seconds';\nbegin\nrec.every:=v;\nif assigned(rec.menu) then\n  rec.menu.caption:=\n    AUTOSAVE+if_(v=0,DISABLED, format('%d seconds',[v]));\nend; // setAutosave\n\nprocedure setSpeedLimitIP(v:real);\nvar\n  i, vi: integer;\nbegin\nspeedLimitIP:=v;\nif v < 0 then vi:=MAXINT\nelse vi:=round(v*1000);\nfor i:=0 to ip2obj.Count-1 do\n  with ip2obj.Objects[i] as TperIp do\n    if not customizedLimiter then\n      limiter.maxSpeed:=vi;\nmainfrm.Speedlimitforsingleaddress1.Caption:='Speed limit for single address: '+if_(v<0, DISABLED, floatToStr(v)+' KB/s' );\nend; // setSpeedLimitIP\n\nprocedure setSpeedLimit(v:real);\nbegin\nspeedLimit:=v;\nif v < 0 then globalLimiter.maxSpeed:=MAXINT\nelse globalLimiter.maxSpeed:=round(v*1000);\nmainfrm.speedLimit1.caption:='Speed limit: '+if_(v<0, DISABLED, floatToStr(v)+' KB/s' );\nend; // setSpeedLimit\n\nprocedure autosaveClick(var rec:Tautosave; name:string);\nresourcestring\n  MSG = 'Auto-save %s.'\n    +#13'Specify in seconds.'\n    +#13'Leave blank to disable.';\n  MSG_MIN = 'We don''t accept less than %d';\nvar\n  s: string;\n  v: integer;\nbegin\nif rec.every <= 0 then s:=''\nelse s:=intToStr(rec.every);\n  repeat\n  if not inputquery('Auto-save '+name, format(MSG,[name]), s) then exit;\n  s:=trim(s);\n  if s = '' then\n    begin\n    setAutosave(rec, 0);\n    break;\n    end\n  else\n    try\n      v:=strToInt(s);\n      if v >= rec.minimum then\n        begin\n        setAutosave(rec, v);\n        break;\n        end;\n      msgDlg(format(MSG_MIN,[rec.minimum]), MB_ICONERROR);\n    except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\n  until false;\nend; // autosaveClick\n\n// change port and test it working. Restore if not working.\nfunction changePort(newVal:string):boolean;\nvar\n  act: boolean;\n  was: string;\nbegin\nresult:=TRUE;\nact:=srv.active;\nwas:=port;\nport:=newVal;\nif act and (newVal = srv.port) then exit;\nstopServer();\nif startServer() then\n  begin\n  if not act then stopServer(); // restore\n  exit;\n  end;\nresult:=FALSE;\nport:=was;\nif act then startServer();\nend; // changePort\n\nfunction b64utf8(const s:string):ansistring;\nbegin result:=base64encode(UTF8encode(s)) end;\n\nfunction decodeB64utf8(const s:ansistring):string; overload;\nbegin result:=UTF8toString(base64decode(s)) end;\n\nfunction decodeB64utf8(const s:string):string; overload;\nbegin result:=decodeB64utf8(ansistring(s)) end;\n\nfunction zCompressStr(const s: ansistring;  level:TCompressionLevel=clMax; type_:TzStreamType=zsZlib): ansistring;\nvar\n  src, dst: TMemoryStream;\nbegin\nif s = '' then\n  exit('');\nsrc:= TMemoryStream.create;\ndst:= TMemoryStream.create;\ntry\n  src.write(s[1], Length(s));\n  src.position:= 0;\n  zlibCompressStreamEx(src, dst, level, type_, false);\n  setLength(result, dst.size);\n  copyMemory(@result[1], dst.Memory, dst.Size);\nfinally\n  src.free;\n  dst.free;\n  end;\nend; // zCompressStr\n\nfunction zDecompressStr(const s: ansistring): ansistring;\nvar\n  src, dst: TMemoryStream;\nbegin\nif s = '' then\n  exit('');\nsrc:= TMemoryStream.create;\ndst:= TMemoryStream.create;\ntry\n  src.write(s[1], Length(s));\n  src.position:= 0;\n  zlibDecompressStream(src, dst);\n  setLength(result, dst.size);\n  copyMemory(@result[1], dst.Memory, dst.Size);\nfinally\n  src.free;\n  dst.free;\n  end;\nend; // zDecompressIcs\n\nfunction TmainFrm.getCfg(exclude:string=''):string;\ntype\n  Tencoding=(E_PLAIN,E_B64,E_ZIP);\n\n  function encode(s:string; encoding:Tencoding):string;\n  var\n    a, c: ansistring;\n  begin\n  case encoding of\n    E_PLAIN: result:=s;\n    E_B64: result:=b64utf8(s);\n    E_ZIP:\n      begin\n      a:=UTF8encode(s);\n      c:=zCompressStr(a, clMax);\n      result:=base64encode(if_( length(c) < round(0.8*length(a)), c, a));\n      end;\n    end;\n  end;\n\n  function accountsToStr():string;\n  var\n    i: integer;\n    a: Paccount;\n\n    function prop(name, value:string; encoding:Tencoding=E_PLAIN):string;\n    begin result:=if_(value>'', '|'+name+':'+encode(value, encoding)) end;\n\n  begin\n  result:='';\n  for i:=0 to length(accounts)-1 do\n  \tbegin\n    a:=@accounts[i];\n    result:=result\n      +prop('login', a.user+':'+a.pwd, E_B64)\n      +prop('enabled', yesno[a.enabled])\n      +prop('group', yesno[a.group])\n      +prop('no-limits', yesno[a.noLimits])\n      +prop('redir', a.redir)\n      +prop('link', join(':',a.link))\n      +prop('notes', a.notes, E_ZIP)\n      +';';\n    end;\n  end; // accountsToStr\n\n  function banlistToStr():string;\n  var\n    i: integer;\n  begin\n  result:='';\n  for i:=0 to length(banlist)-1 do\n    result:=result+banlist[i].ip+'#'\n      +replaceStr(banlist[i].comment, '|','\\$pipe')+'|';\n  end;\n\n  function connColumnsToStr():string;\n  var\n    i: integer;\n  begin\n  result:='';\n  for i:=0 to connBox.columns.count-1 do\n    with connBox.columns.items[i] do\n      result:=result+format('%s;%d|', [caption, width]);\n  end; // connColumnsToStr\n\nvar\n  iconMasksStr, userIconMasks: string;\n\n  function iconMasksToStr():string;\n  var\n    i, j: integer;\n  begin\n  result:='';\n  for i:=0 to length(iconMasks)-1 do\n    begin\n    j:=idx_img2ico(iconMasks[i].int);\n    if j >= USER_ICON_MASKS_OFS then\n      userIconMasks:=userIconMasks+format('%d:%s|', [j, encode(pic2str(j), E_ZIP)]);\n    result:=result+format('%s|%d||', [iconMasks[i].str, j]);\n    end;\n  end; // iconMasksToStr\n\n  function fontToStr(f:Tfont):string;\n  begin\n  result:=if_(fsBold in f.Style, 'B')+if_(fsItalic in f.Style, 'I')\n    +if_(fsUnderline in f.Style, 'U')+if_(fsStrikeOut in f.Style, 'S');\n  result:=format('%s|%d|%s|%s', [f.Name,f.size,colorToString(f.Color),result]);\n  end; // fontToStr\n\nbegin\nuserIconMasks:='';\niconMasksStr:=iconMasksToStr();\nresult:='HFS '+VERSION+' - Build #'+VERSION_BUILD+CRLF\n+'active='+yesno[srv.active]+CRLF\n+'only-1-instance='+yesno[only1instanceChk.checked]+CRLF\n+'window='+rectToStr(lastWindowRect)+CRLF\n+'window-max='+yesno[windowState = wsMaximized]+CRLF\n+'easy='+yesno[easyMode]+CRLF\n+'port='+port+CRLF\n+'files-box-ratio='+floatToStr(filesBoxRatio)+CRLF\n+'log-max-lines='+intToStr(logMaxLines)+CRLF\n+'log-read-only='+yesno[logbox.readonly]+CRLF\n+'log-file-name='+logFile.filename+CRLF\n+'log-font-name='+logFontName+CRLF\n+'log-font-size='+intToStr(logFontSize)+CRLF\n+'log-date='+yesno[LogdateChk.checked]+CRLF\n+'log-time='+yesno[LogtimeChk.checked]+CRLF\n+'log-to-screen='+yesno[logOnVideoChk.checked]+CRLF\n+'log-only-served='+yesno[logOnlyServedChk.checked]+CRLF\n+'log-server-start='+yesno[logServerstartChk.checked]+CRLF\n+'log-server-stop='+yesno[logServerstopChk.checked]+CRLF\n+'log-connections='+yesno[logConnectionsChk.checked]+CRLF\n+'log-disconnections='+yesno[logDisconnectionsChk.checked]+CRLF\n+'log-bytes-sent='+yesno[logBytessentChk.checked]+CRLF\n+'log-bytes-received='+yesno[logBytesreceivedChk.checked]+CRLF\n+'log-replies='+yesno[logRepliesChk.checked]+CRLF\n+'log-requests='+yesno[logRequestsChk.checked]+CRLF\n+'log-uploads='+yesno[logUploadsChk.checked]+CRLF\n+'log-deletions='+yesno[logDeletionsChk.checked]+CRLF\n+'log-full-downloads='+yesno[logFulldownloadsChk.checked]+CRLF\n+'log-dump-request='+yesno[DumprequestsChk.checked]+CRLF\n+'log-browsing='+yesno[logBrowsingChk.checked]+CRLF\n+'log-icons='+yesno[logIconsChk.checked]+CRLF\n+'log-progress='+yesno[logProgressChk.checked]+CRLF\n+'log-banned='+yesno[logBannedChk.checked]+CRLF\n+'log-others='+yesno[logOtherEventsChk.checked]+CRLF\n+'log-file-tabbed='+yesno[tabOnLogFileChk.checked]+CRLF\n+'log-apache-format='+logfile.apacheFormat+CRLF\n+'tpl-file='+tplFilename+CRLF\n+'tpl-editor='+tplEditor+CRLF\n+'delete-dont-ask='+yesno[deleteDontAskChk.checked]+CRLF\n+'free-login='+yesno[freeLoginChk.checked]+CRLF\n+'confirm-exit='+yesno[confirmexitChk.checked]+CRLF\n+'keep-bak-updating='+yesno[keepBakUpdatingChk.checked]+CRLF\n+'include-pwd-in-pages='+yesno[pwdInPagesChk.Checked]+CRLF\n+'ip='+defaultIP+CRLF\n+'custom-ip='+join(';',customIPs)+CRLF\n+'listen-on='+listenOn+CRLF\n+'external-ip-server='+customIPservice+CRLF\n+'dynamic-dns-updater='+b64utf8(dyndns.url)+CRLF\n+'dynamic-dns-user='+dyndns.user+CRLF\n+'dynamic-dns-host='+dyndns.host+CRLF\n+'search-better-ip='+yesno[searchbetteripChk.checked]+CRLF\n+'start-minimized='+yesno[startMinimizedChk.checked]+CRLF\n+'connections-height='+intToStr(lastGoodConnHeight)+CRLF\n+'files-stay-flagged-for-minutes='+intToStr(filesStayFlaggedForMinutes)+CRLF\n+'auto-save-vfs='+yesno[autosaveVFSchk.checked]+CRLF\n+'folders-before='+yesno[foldersbeforeChk.checked]+CRLF\n+'links-before='+yesno[linksBeforeChk.checked]+CRLF\n+'use-comment-as-realm='+yesno[usecommentasrealmChk.checked]+CRLF\n+'getright-template='+yesno[DMbrowserTplChk.checked]+CRLF\n+'auto-save-options='+yesno[autosaveoptionsChk.checked]+CRLF\n+'dont-include-port-in-url='+yesno[noPortInUrlChk.checked]+CRLF\n+'persistent-connections='+yesno[persistentconnectionsChk.checked]+CRLF\n+'modal-options='+yesno[modalOptionsChk.checked]+CRLF\n+'beep-on-flash='+yesno[beepChk.checked]+CRLF\n+'prevent-leeching='+yesno[preventLeechingChk.checked]+CRLF\n+'delete-partial-uploads='+yesno[deletePartialUploadsChk.checked]+CRLF\n+'rename-partial-uploads='+renamePartialUploads+CRLF\n+'enable-macros='+yesno[enableMacrosChk.checked]+CRLF\n+'use-system-icons='+yesno[usesystemiconsChk.checked]+CRLF\n+'minimize-to-tray='+yesno[MinimizetotrayChk.checked]+CRLF\n+'tray-icon-for-each-download='+yesno[trayfordownloadChk.checked]+CRLF\n+'show-main-tray-icon='+yesno[showmaintrayiconChk.checked]+CRLF\n+'always-on-top='+yesno[alwaysontopChk.checked]+CRLF\n+'quit-dont-ask='+yesno[quitWithoutAskingToSaveChk.checked]+CRLF\n+'support-descript.ion='+yesno[supportDescriptionChk.checked]+CRLF\n+'oem-descript.ion='+yesno[oemForIonChk.checked]+CRLF\n+'oem-tar='+yesno[oemTarChk.checked]+CRLF\n+'enable-fingerprints='+yesno[fingerprintsChk.checked]+CRLF\n+'save-fingerprints='+yesno[saveNewFingerprintsChk.checked]+CRLF\n+'auto-fingerprint='+intToStr(autoFingerprint)+CRLF\n+'stop-spiders='+yesno[stopSpidersChk.checked]+CRLF\n+'backup-saving='+yesno[backupSavingChk.checked]+CRLF\n+'recursive-listing='+yesno[recursiveListingChk.checked]+CRLF\n+'send-hfs-identifier='+yesno[sendHFSidentifierChk.checked]+CRLF\n+'list-hidden-files='+yesno[listfileswithhiddenattributeChk.checked]+CRLF\n+'list-system-files='+yesno[listfileswithsystemattributeChk.checked]+CRLF\n+'list-protected-items='+yesno[hideProtectedItemsChk.checked]+CRLF\n+'enable-no-default='+yesno[enableNoDefaultChk.checked]+CRLF\n+'browse-localhost='+yesno[browseUsingLocalhostChk.checked]+CRLF\n+'add-folder-default='+addFolderDefault+CRLF\n+'default-sorting='+defSorting+CRLF\n+'last-dialog-folder='+lastDialogFolder+CRLF\n+'auto-save-vfs-every='+intToStr(autosaveVFS.every)+CRLF\n+'last-update-check='+floatToStr(lastUpdateCheck)+CRLF\n+'allowed-referer='+allowedReferer+CRLF\n+'forwarded-mask='+forwardedMask+CRLF\n+'tray-shows='+trayShows+CRLF\n+'tray-message='+escapeNL(trayMsg)+CRLF\n+'speed-limit='+floatToStr(speedLimit)+CRLF\n+'speed-limit-ip='+floatToStr(speedLimitIP)+CRLF\n+'max-ips='+intToStr(maxIPs)+CRLF\n+'max-ips-downloading='+intToStr(maxIPsDLing)+CRLF\n+'max-connections='+intToStr(maxConnections)+CRLF\n+'max-connections-by-ip='+intToStr(maxConnectionsIP)+CRLF\n+'max-contemporary-dls='+intToStr(maxContempDLs)+CRLF\n+'max-contemporary-dls-ip='+intToStr(maxContempDLsIP)+CRLF\n+'login-realm='+loginRealm+CRLF\n+'open-in-browser='+openInBrowser+CRLF\n+'flash-on='+flashOn+CRLF\n+'graph-rate='+intToStr(graph.rate)+CRLF\n+'graph-size='+intToStr(graph.size)+CRLF\n+'graph-visible='+yesno[graphBox.visible]+CRLF\n+'no-download-timeout='+intToStr(noDownloadTimeout)+CRLF\n+'connections-timeout='+intToStr(connectionsInactivityTimeout)+CRLF\n+'no-reply-ban='+yesno[noReplyBan]+CRLF\n+'ban-list='+banlistToStr()+CRLF\n+'add-to-folder='+addToFolder+CRLF\n+'last-file-open='+lastFileOpen+CRLF\n+'reload-on-startup='+yesno[reloadonstartupChk.checked]+CRLF\n+'https-url='+yesno[httpsUrlsChk.checked]+CRLF\n+'find-external-on-startup='+yesno[findExtOnStartupChk.checked]+CRLF\n+'encode-non-ascii='+yesno[encodenonasciiChk.checked]+CRLF\n+'encode-spaces='+yesno[encodespacesChk.checked]+CRLF\n+'mime-types='+join('|',mimeTypes)+CRLF\n+'in-browser-if-mime='+yesno[inBrowserIfMIME]+CRLF\n+'icon-masks='+iconMasksStr+CRLF\n+'icon-masks-user-images='+userIconMasks+CRLF\n+'address2name='+join('|',address2name)+CRLF\n+'recent-files='+join('|',recentFiles)+CRLF\n+'trusted-files='+join('|',trustedFiles)+CRLF\n+'accounts='+accountsToStr()+CRLF\n+'account-notes-wrap='+yesno[optionsFrm.notesWrapChk.checked]+CRLF\n+'tray-instead-of-quit='+yesno[trayInsteadOfQuitChk.checked]+CRLF\n+'compressed-browsing='+yesno[compressedbrowsingChk.checked]+CRLF\n+'use-iso-date-format='+yesno[useISOdateChk.Checked]+CRLF\n+'hints4newcomers='+yesno[HintsfornewcomersChk.checked]+CRLF\n+'save-totals='+yesno[saveTotalsChk.checked]+CRLF\n+'log-toolbar-expanded='+yesno[mainfrm.expandedPnl.visible]+CRLF\n+'number-files-on-upload='+yesno[numberFilesOnUploadChk.checked]+CRLF\n+'do-not-log-address='+dontLogAddressMask+CRLF\n+'last-external-address='+dyndns.lastIP+CRLF\n+'min-disk-space='+intToStr(minDiskSpace)+CRLF\n+'out-total='+intToStr(outTotalOfs+srv.bytesSent)+CRLF\n+'in-total='+intToStr(inTotalOfs+srv.bytesReceived)+CRLF\n+'hits-total='+intToStr(hitsLogged)+CRLF\n+'downloads-total='+intToStr(downloadsLogged)+CRLF\n+'upload-total='+intToStr(uploadsLogged)+CRLF\n+'many-items-warning='+yesno[warnManyItems]+CRLF\n+'load-single-comment-files='+yesno[loadSingleCommentsChk.checked]+CRLF\n+'copy-url-on-start='+yesno[autocopyURLonstartChk.checked]+CRLF\n+'connections-columns='+connColumnsToStr()+CRLF\n+'auto-comment='+yesno[autoCommentChk.checked]+CRLF\n+'update-daily='+yesno[updateDailyChk.checked]+CRLF\n+'delayed-update='+yesno[delayUpdateChk.checked]+CRLF\n+'tester-updates='+yesno[testerUpdatesChk.checked]+CRLF\n+'copy-url-on-addition='+yesno[AutocopyURLonadditionChk.checked]+CRLF\n+'ip-services='+join(';',IPservices)+CRLF\n+'ip-services-time='+floatToStr(IPservicesTime)+CRLF\n+'update-automatically='+yesno[updateAutomaticallyChk.checked]+CRLF\n+'prevent-standby='+yesno[preventStandbyChk.checked]+CRLF;\n\nif ipsEverConnected.Count < IPS_THRESHOLD then\n  result:=result+'ips-ever-connected='+ipsEverConnected.DelimitedText+CRLF;\n\nif exclude = '' then exit;\nexclude:=replaceStr(exclude,'.','[^=]'); // optimization: since we are searching for keys, characters can't be \"=\"\nresult:=reReplace(result, '^('+exclude+')=.*$', '');\nend; // getCfg\n\n// this is to keep the \"hashed\" version updated\nvar\n  lastUcCFG: Tdatetime;\nprocedure updateCurrentCFG();\nvar\n  s: string;\nbegin\nif mainfrm = NIL then exit;\n\n// not faster\nif lastUcCFG+5/SECONDS > now() then exit;\nlastUcCFG:=now();\n\ns:=mainfrm.getCFG('.*-total'); // these will change often and are of no interest, so we ignore them as an optimization\nif s = currentCFG then exit;\n\nif (currentCFG>'') // first time, it's not an update, it's an initialization\nand mainfrm.autoSaveOptionsChk.checked then\n  mainfrm.saveCFG();\n\ncurrentCFG:=s;\ncurrentCFGhashed.text:=s; // re-parse\nend; // updateCurrentCFG\n\nfunction TmainFrm.setCfg(cfg:string; alreadyStarted:boolean):boolean;\nresourcestring\n  MSG_BAN = 'Your ban configuration may have been screwed up.'\n    +#13'Please verify it.';\nvar\n  l, savedip, build: string;\n  warnings: TStringDynArray;\n  userIconOfs: integer;\n\n  function yes(s:string=''):boolean;\n  begin result:= if_(s>'',s,l)='yes' end;\n\n  function int():int64;\n  begin if not tryStrToInt64(l, result) then result:=0 end;\n\n  function real():TdateTime;\n  begin try result:=strToFloat(l) except result:=0 end end;\n\n  procedure loadBanlist(s:string);\n  var\n    p: string;\n    i: integer;\n  begin\n  { old versions wrongly used ; as ban-record separator, while it was already\n  { used as address separator }\n  if (build < '018') and (pos(';',s) > 0) then\n    begin\n    s:=replaceStr(s, ';','|');\n    addString(MSG_BAN, warnings);\n    end;\n  setLength(banlist, 0);\n  i:=0;\n  while s > '' do\n    begin\n    p:=chop('|',s);\n    if p = '' then continue;\n    setLength(banlist, i+1);\n    banlist[i].comment:=replaceStr(p, '\\$pipe','|'); // unescape\n    banlist[i].ip:=chop('#',banlist[i].comment);\n    inc(i);\n    end;\n  end; // loadBanlist\n\n  function unzipCfgProp(s:ansistring):ansistring;\n  begin\n  result:=base64decode(s);\n  try result:=ZDecompressStr(result)\n  except end;\n  end; // unzipCfgProp\n\n  procedure strToAccounts();\n  var\n  \ts, t, p: string;\n    i: integer;\n    a: Paccount;\n  begin\n  accounts:=NIL;\n  while l > '' do\n  \tbegin\n    // accounts are separated by semicolons\n    s:=chop(';',l);\n    if s = '' then continue;\n    i:=length(accounts);\n    setLength(accounts, i+1);\n    a:=@accounts[i];\n    a.enabled:=TRUE; // by default\n    while s > '' do\n      begin\n      // account properties are separated by pipes\n      t:=chop('|',s);\n      p:=chop(':',t); // get property name\n      if p = '' then \n        continue;\n      if p = 'login' then\n      \tbegin\n        if not anycharIn(':', t) then\n  \t      t:=decodeB64utf8(t);\n  \t    a.user:=chop(':',t);\n\t      a.pwd:=t;\n        end\n      else if p = 'enabled' then \n        a.enabled:=yes(t)\n      else if p = 'no-limits' then \n        a.noLimits:=yes(t)\n      else if p = 'group' then \n        a.group:=yes(t)\n      else if p = 'redir' then \n        a.redir:=t\n      else if p = 'link' then \n        a.link:=split(':',t)\n      else if p = 'notes' then\n        a.notes:=UTF8ToString(unzipCfgProp(ansistring(t)))\n      end;\n    end;\n  end; // strToAccounts\n\n  procedure strToIconmasks();\n  var\n    i: integer;\n  begin\n  while l > '' do\n    begin\n    i:=length(iconMasks);\n    setLength(iconMasks, i+1);\n    iconMasks[i].str:=chop('|',l);\n    iconMasks[i].int:=StrToIntDef(chop('||',l),0);\n    end;\n  end; // strToIconmasks\n\n  procedure readUserIconMasks();\n  var\n    i, iFrom, iTo: integer;\n  begin\n  userIconOfs:=images.Count;\n  while l > '' do\n    begin\n    iFrom:=strTointDef(chop(':', l), -1);\n    iTo:=str2pic(unzipCfgProp(ansistring(chop('|', l))));\n    for i:=0 to length(iconMasks)-1 do\n      if iconMasks[i].int = iFrom then\n        iconMasks[i].int:=iTo;\n    end;\n  end; // readUserIconmasks\n\n  procedure strToFont(f:Tfont);\n  begin\n  f.Name:=chop('|', l);\n  f.Size:=strToIntDef(chop('|', l), f.size);\n  f.Color:=StringToColor(chop('|',l));\n  f.Style:=[];\n  if pos('B', l) > 0 then f.Style:=f.Style+[fsBold];\n  if pos('U', l) > 0 then f.Style:=f.Style+[fsUnderline];\n  if pos('I', l) > 0 then f.Style:=f.Style+[fsItalic];\n  if pos('S', l) > 0 then f.Style:=f.Style+[fsStrikeout];\n  end; // strToFont\n\n\n  procedure addMissingMimeTypes();\n  var\n    i: integer;\n  begin\n  // add missing default mime types\n  i:=length(DEFAULT_MIME_TYPES);\n  while i > 0 do\n    begin\n    dec(i, 2);\n    if stringExists(DEFAULT_MIME_TYPES[i], mimeTypes) then continue;\n    // add the missing pair at the beginning\n    addArray(mimeTypes, DEFAULT_MIME_TYPES, 0, i, 2);\n    end;\n  end;\n\nconst\n  BOOL2WS: array [boolean] of TWindowState = (wsNormal, wsMaximized);\nvar\n  i: integer;\n  h: string;\n  activateServer: boolean;\nbegin\nresult:=FALSE;\nif cfg = '' then exit;\n\n// prior to build #230, this header was required\nif ansiStartsStr('HFS ', cfg) then\n  begin\n  l:=chop(CRLF,cfg);\n  chop(' - Build #',l);\n  build:=l;\n  end\nelse\n  build:=VERSION_BUILD;\n\nwarnings:=NIL;\nif alreadyStarted then activateServer:=srv.active\nelse activateServer:=TRUE;\n\nwhile cfg > '' do\n  begin\n  l:=chop(CRLF,cfg);\n  h:=chop('=',l);\n  try\n    if h = 'banned-ips' then h:='ban-list';\n    if h = 'user-mime-types' then h:='mime-types';  // user-mime-types was an experiment made in build #258..260\n    if h = 'save-in-out-totals' then h:='save-totals';\n\n    if h = 'active' then activateServer:=yes;\n    if (h = 'window') and (l <> '0,0,0,0') then\n    \tbegin\n      lastWindowRect:=strToRect(l);\n      boundsRect:=lastWindowRect;\n      end;\n    if h = 'window-max' then windowstate:=BOOL2WS[yes];\n    if h = 'port' then\n      if srv.active then changePort(l)\n      else port:=l;\n    if h = 'ip' then savedip:=l;\n    if h = 'custom-ip' then customIPs:=split(';',l);\n    if h = 'listen-on' then listenOn:=l;\n    if h = 'dynamic-dns-updater' then dyndns.url:=decodeB64utf8(l);\n    if h = 'dynamic-dns-user' then dyndns.user:=l;\n    if h = 'dynamic-dns-host' then dyndns.host:=l;\n    if h = 'login-realm' then loginRealm:=l;\n    if h = 'easy' then setEasyMode(yes);\n    if h = 'keep-bak-updating' then keepBakUpdatingChk.checked:=yes;\n\t\tif h = 'encode-non-ascii' then encodenonasciiChk.checked:=yes;\n\t\tif h = 'encode-spaces' then encodespacesChk.checked:=yes;\n\t\tif h = 'search-better-ip' then searchbetteripChk.checked:=yes;\n    if h = 'start-minimized' then startMinimizedChk.checked:=yes;\n    if h = 'files-box-ratio' then filesBoxRatio:=real;\n    if h = 'log-max-lines' then logMaxLines:=int;\n    if h = 'log-file-name' then logFile.filename:=l;\n    if h = 'log-font-name' then logFontName:=l;\n    if h = 'log-font-size' then logFontSize:=int;\n    if h = 'log-date' then LogdateChk.checked:=yes;\n    if h = 'log-time' then LogtimeChk.checked:=yes;\n    if h = 'log-read-only' then logbox.readonly:=yes;\n    if h = 'log-browsing' then logBrowsingChk.checked:=yes;\n    if h = 'log-icons' then logIconsChk.checked:=yes;\n    if h = 'log-progress' then logProgressChk.checked:=yes;\n    if h = 'log-banned' then logBannedChk.checked:=yes;\n    if h = 'log-others' then logOtherEventsChk.checked:=yes;\n    if h = 'log-dump-request' then DumprequestsChk.checked:=yes;\n    if h = 'log-server-start' then logServerstartChk.checked:=yes;\n    if h = 'log-server-stop' then logServerstopChk.checked:=yes;\n    if h = 'log-connections' then logConnectionsChk.checked:=yes;\n    if h = 'log-disconnections' then logDisconnectionsChk.checked:=yes;\n    if h = 'log-bytes-sent' then logBytessentChk.checked:=yes;\n    if h = 'log-bytes-received' then logBytesreceivedChk.checked:=yes;\n    if h = 'log-replies' then logRepliesChk.checked:=yes;\n    if h = 'log-requests' then logRequestsChk.checked:=yes;\n    if h = 'log-uploads' then logUploadsChk.checked:=yes;\n    if h = 'log-deletions' then logDeletionsChk.checked:=yes;\n    if h = 'log-full-downloads' then logFulldownloadsChk.checked:=yes;\n    if h = 'log-apache-format' then logfile.apacheFormat:=l;\n    if h = 'log-only-served' then logOnlyServedChk.checked:=yes;\n    if h = 'log-to-screen' then logOnVideoChk.checked:=yes;\n    if h = 'log-file-tabbed' then tabOnLogFileChk.checked:=yes;\n    if h = 'confirm-exit' then confirmexitChk.checked:=yes;\n    if h = 'backup-saving' then backupSavingChk.checked:=yes;\n    if h = 'connections-height' then lastGoodConnHeight:=int;\n    if h = 'files-stay-flagged-for-minutes'then filesStayFlaggedForMinutes:=int;\n    if h = 'folders-before' then foldersbeforeChk.checked:=yes;\n    if h = 'include-pwd-in-pages' then pwdInPagesChk.Checked:=yes;\n    if h = 'minimize-to-tray' then MinimizetotrayChk.checked:=yes;\n    if h = 'prevent-standby' then preventStandbyChk.checked:=yes;\n\t\tif h = 'use-system-icons' then usesystemiconsChk.checked:=yes;\n    if h = 'quit-dont-ask' then quitWithoutAskingToSaveChk.checked:=yes;\n\t\tif h = 'auto-save-options' then autosaveoptionsChk.checked:=yes;\n    if h = 'use-comment-as-realm' then usecommentasrealmChk.checked:=yes;\n    if h = 'persistent-connections'then persistentconnectionsChk.checked:=yes;\n\t\tif h = 'show-main-tray-icon' then showmaintrayiconChk.checked:=yes;\n    if h = 'delete-dont-ask' then deleteDontAskChk.checked:=yes;\n\t  if h = 'tray-icon-for-each-download' then trayfordownloadChk.checked:=yes;\n    if h = 'copy-url-on-addition' then AutocopyURLonadditionChk.checked:=yes;\n    if h = 'copy-url-on-start' then autocopyURLonstartChk.checked:=yes;\n    if h = 'enable-macros' then enableMacrosChk.checked:=yes;\n    if h = 'update-daily' then updateDailyChk.checked:=yes;\n    if h = 'tray-instead-of-quit' then trayInsteadOfQuitChk.checked:=yes;\n    if h = 'modal-options' then modalOptionsChk.checked:=yes;\n    if h = 'beep-on-flash' then beepChk.checked:=yes;\n    if h = 'prevent-leeching' then preventLeechingChk.checked:=yes;\n    if h = 'list-hidden-files' then listfileswithhiddenattributeChk.checked:=yes;\n    if h = 'list-system-files' then listfileswithsystemattributeChk.checked:=yes;\n    if h = 'list-protected-items' then hideProtectedItemsChk.checked:=yes;\n    if h = 'always-on-top' then alwaysontopChk.checked:=yes;\n    if h = 'support-descript.ion' then supportDescriptionChk.Checked:=yes;\n    if h = 'oem-descript.ion' then oemForIonChk.checked:=yes;\n    if h = 'oem-tar' then oemTarChk.checked:=yes;\n    if h = 'free-login' then freeLoginChk.checked:=yes;\n    if h = 'https-url' then httpsUrlsChk.checked:=yes;\n    if h = 'enable-fingerprints' then fingerprintsChk.checked:=yes;\n    if h = 'save-fingerprints' then saveNewFingerprintsChk.checked:=yes;\n    if h = 'auto-fingerprint' then setAutoFingerprint(int);\n    if h = 'log-toolbar-expanded' then setLogToolbar(yes);\n    if h = 'last-update-check' then lastUpdateCheck:=real;\n    if h = 'recursive-listing' then recursiveListingChk.checked:=yes;\n    if h = 'enable-no-default' then enableNoDefaultChk.checked:=yes;\n    if h = 'browse-localhost' then browseUsingLocalhostChk.checked:=yes;\n    if h = 'tpl-file' then tplFilename:=l;\n    if h = 'tpl-editor' then tplEditor:=l;\n    if h = 'add-folder-default' then addFolderDefault:=l;\n    if h = 'default-sorting' then defSorting:=l;\n    if h = 'last-dialog-folder' then lastDialogFolder:=l;\n    if h = 'send-hfs-identifier' then sendHFSidentifierChk.checked:=yes;\n\t\tif h = 'auto-save-vfs' then autosaveVFSchk.checked:=yes;\n    if h = 'add-to-folder' then addToFolder:=l;\n    if h = 'getright-template' then DMbrowserTplChk.checked:=yes;\n\t\tif h = 'speed-limit' then setSpeedLimit(real);\n\t\tif h = 'speed-limit-ip' then setSpeedLimitIP(real);\n    if h = 'no-download-timeout' then setNoDownloadTimeout(int);\n    if h = 'connections-timeout' then connectionsInactivityTimeout:=int;\n    if h = 'max-ips' then setMaxIPs(int);\n    if h = 'max-ips-downloading' then setMaxIPsDLing(int);\n    if h = 'max-connections' then setMaxConnections(int);\n    if h = 'max-connections-by-ip' then setMaxConnectionsIP(int);\n    if h = 'max-contemporary-dls' then setMaxDLs(int);\n    if h = 'max-contemporary-dls-ip' then setMaxDLsIP(int);\n\t\tif h = 'tray-message' then trayMsg:=replaceStr(unescapeNL(l), CRLF, trayNL);\n    if h = 'ban-list' then loadBanlist(l);\n    if h = 'no-reply-ban' then noReplyBan:=yes;\n    if h = 'save-totals' then saveTotalsChk.checked:=yes;\n    if h = 'allowed-referer' then allowedReferer:=l;\n    if h = 'open-in-browser' then openInBrowser:=l;\n\t\tif h = 'last-file-open' then lastFileOpen:=l;\n\t\tif h = 'reload-on-startup' then reloadonstartupChk.checked:=yes;\n    if h = 'stop-spiders' then stopSpidersChk.checked:=yes;\n    if h = 'find-external-on-startup' then findExtOnStartupChk.checked:=yes;\n    if h = 'dont-include-port-in-url' then noPortInUrlChk.checked:=yes;\n    if h = 'tray-shows' then trayshows:=l;\n    if h = 'auto-save-vfs-every' then setAutosave(autosaveVFS, int);\n    if h = 'external-ip-server' then customIPservice:=l;\n    if h = 'only-1-instance' then only1instanceChk.checked:=yes;\n\t\tif h = 'graph-rate' then setGraphRate(int);\n\t\tif h = 'graph-size' then graph.size:=int;\n    if h = 'forwarded-mask' then forwardedMask:=l;\n    if h = 'delete-partial-uploads' then deletePartialUploadsChk.checked:=yes;\n    if h = 'rename-partial-uploads' then renamePartialUploads:=l;\n    if h = 'do-not-log-address' then dontLogAddressMask:=l;\n    if h = 'out-total' then outTotalOfs:=int;\n    if h = 'in-total' then inTotalOfs:=int;\n    if h = 'hits-total' then hitsLogged:=int;\n    if h = 'downloads-total' then downloadsLogged:=int;\n    if h = 'upload-total' then uploadsLogged:=int;\n    if h = 'min-disk-space' then minDiskSpace:=int;\n    if h = 'flash-on' then flashOn:=l;\n    if h = 'last-external-address' then dyndns.lastIP:=l;\n    if h = 'recents' then recentFiles:=split(';',l);   // legacy: moved to recent-files because the split-char changed in #111\n    if h = 'recent-files' then recentFiles:=split('|',l);\n    if h = 'trusted-files' then trustedFiles:=split('|',l);\n    if h = 'ips-ever-connected' then ipsEverConnected.DelimitedText:=l;\n    if h = 'mime-types' then mimeTypes:=split('|',l);\n    if h = 'in-browser-if-mime' then inBrowserIfMIME:=yes;\n    if h = 'address2name' then address2name:=split('|',l);\n    if h = 'compressed-browsing' then compressedbrowsingChk.checked:=yes;\n    if h = 'hints4newcomers' then HintsfornewcomersChk.checked:=yes;\n    if h = 'tester-updates' then testerUpdatesChk.checked:=yes;\n    if h = 'number-files-on-upload' then numberFilesOnUploadChk.checked:=yes;\n    if h = 'many-items-warning' then warnManyItems:=yes;\n    if h = 'load-single-comment-files' then loadSingleCommentsChk.checked:=yes;\n    if h = 'accounts' then strToAccounts();\n    if h = 'use-iso-date-format' then useISOdateChk.Checked:=yes;\n    if h = 'auto-comment' then autoCommentChk.checked:=yes;\n    if h = 'icon-masks-user-images' then readUserIconMasks();\n    if h = 'icon-masks' then strToIconmasks();\n    if h = 'connections-columns' then serializedConnColumns:=l;\n    if h = 'ip-services' then IPservices:=split(';', l);\n    if h = 'ip-services-time' then IPservicesTime:=real;\n    if h = 'update-automatically' then updateAutomaticallyChk.checked:=yes;\n    if h = 'delayed-update' then delayUpdateChk.checked:=yes;\n    if h = 'links-before' then linksBeforeChk.checked:=yes;\n    if h = 'account-notes-wrap' then optionsFrm.notesWrapChk.checked:=yes;\n\n\t\tif h = 'graph-visible' then\n      if yes then showGraph()\n      else hideGraph();\n    // extra commands for external use\n    if h = 'load-tpl-from' then setNewTplFile(l);\n  except end;\n  end;\n\nif not alreadyStarted then\n  // i was already seeing all the stuff, so please don't hide it\n  if (build > '') and (build < '006') then easyMode:=FALSE;\n\nif not alreadyStarted\nand not saveTotalsChk.checked then\n  begin\n  outTotalOfs:=0;\n  inTotalOfs:=0;\n  hitsLogged:=0;\n  downloadsLogged:=0;\n  uploadsLogged:=0;\n  end;\nfindSimilarIP(savedIP);\nif lastGoodLogWidth > 0 then\n  logBox.Width:=lastGoodLogWidth;\nif lastGoodConnHeight > 0 then\n  connPnl.Height:=lastGoodConnHeight;\nif not fileExists(tplFilename) then\n  setTplText(defaultTpl);\nsrv.persistentConnections:=persistentconnectionsChk.Checked;\napplyFilesBoxRatio();\nupdateRecentFilesMenu();\nkeepTplUpdated();\nupdateAlwaysOnTop();\napplyISOdateFormat();\n// the filematch() would be fooled by spaces, so lets trim\nfor i:=0 to length(MIMEtypes)-1 do\n  MIMEtypes[i]:=trim(MIMEtypes[i]);\n\naddMissingMimeTypes();\nfor i:=0 to length(warnings)-1 do\n  msgDlg(warnings[i], MB_ICONWARNING);\nif alreadyStarted then\n  if activateServer <> srv.active then toggleServer()\n  else\nelse\n  if activateServer then startServer();\nresult:=TRUE;\n\nupdateCurrentCFG();\nend; // setcfg\n\nfunction loadCfg(var ini,tpl:string):boolean;\n\n  // until 2.2 the template could be kept in the registry, so we need to move it now.  \n  // returns true if the registry source can be deleted\n  function moveLegacyTpl(tpl:string):boolean;\n  begin\n  result:=FALSE;\n  if (tplFilename > '') or (tpl = '') then exit;\n  tplFilename:=cfgPath+TPL_FILE;\n  result:=saveTextFile(tplFilename, tpl);\n  end; // moveLegacyTpl\n\nbegin\nresult:=TRUE;\nipsEverConnected.text:=loadTextfile(IPS_FILE);\nini:=loadTextFile(cfgPath+CFG_FILE);\nif ini > '' then\n  begin\n  saveMode:=SM_FILE;\n  moveLegacyTpl(loadTextFile(cfgPath+TPL_FILE));\n  exit;\n  end;\nini:=loadregistry(CFG_KEY, '');\nif ini > '' then\n  begin\n  saveMode:=SM_USER;\n  if moveLegacyTpl(loadregistry(CFG_KEY, TPL_FILE)) then\n    deleteRegistry(CFG_KEY, TPL_FILE);\n  exit;\n  end;\nini:=loadregistry(CFG_KEY, '', HKEY_LOCAL_MACHINE);\nif ini > '' then\n  begin\n  saveMode:=SM_SYSTEM;\n  if moveLegacyTpl(loadregistry(CFG_KEY, TPL_FILE, HKEY_LOCAL_MACHINE)) then\n    deleteRegistry(CFG_KEY, TPL_FILE, HKEY_LOCAL_MACHINE);\n  exit;\n  end;\nresult:=FALSE;\nend; // loadCfg\n\nprocedure TmainFrm.Viewhttprequest1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\nmsgDlg(first([cd.conn.request.full, cd.conn.getBuffer(), '(empty)']));\nend;\n\nprocedure TmainFrm.connmenuPopup(Sender: TObject);\nvar\n  bs,          // is there any connection selected?\n  ba: boolean; // is there any connection listed and connected?\n  i: integer;\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nbs:=assigned(cd);\nba:=FALSE;\nfor i:=0 to connBox.items.count-1 do\n  if conn2data(i).conn.state <> HCS_DISCONNECTED then\n    begin\n    ba:=TRUE;\n    break;\n    end;\nViewhttprequest1.enabled:=bs;\nBanIPaddress1.enabled:=bs;\nKickconnection1.Enabled:=bs and (cd.conn.state <> HCS_DISCONNECTED);\nKickIPaddress1.Enabled:=bs and ba;\nKickallconnections1.Enabled:=ba;\nKickidleconnections1.Enabled:=ba;\npause1.visible:=bs and isDownloading(cd);\nPause1.Checked:=bs and cd.conn.paused;\n\ntrayiconforeachdownload1.visible:=trayfordownloadChk.Checked and fromTray;\nend;\n\nfunction expandAccountByLink(a:Paccount; noGroups:boolean=TRUE):TstringDynArray;\nvar\n  i: integer;\nbegin\nresult:=NIL;\nif a = NIL then exit;\n\nif not (a.group and noGroups) then\n  addString(a.user, result);\nfor i:=0 to length(accounts)-1 do\n  if not stringExists(accounts[i].user, result)\n  and stringExists(a.user, accounts[i].link) then\n    addArray(result, expandAccountByLink(@accounts[i]));\nuniqueStrings(result);\nend; // expandAccountByLink\n\nfunction expandAccountsByLink(users:TStringDynArray; noGroups:boolean=TRUE):TstringDynArray;\nvar\n  i: integer;\nbegin\nresult:=NIL;\nfor i:=0 to length(users)-1 do\n  addArray(result, expandAccountByLink(getAccount(users[i], TRUE)));\nuniqueStrings(result);\nend; // expandAccountsByLink\n\nprocedure makeOwnerDrawnMenu(mi:Tmenuitem; included:boolean=FALSE);\nvar\n  i: integer;\nbegin\nif included then\n  begin\n  mi.onDrawItem:=mainfrm.menuDraw;\n  mi.OnMeasureItem:=mainfrm.menuMeasure;\n  end;\nfor i:=0 to mi.count-1 do\n  makeOwnerDrawnMenu(mi.items[i], TRUE);\nend; // makeOwnerDrawnMenu\n\nprocedure TmainFrm.filemenuPopup(Sender: TObject);\nconst\n  ONLY_ANY = 0;\n  ONLY_EASY = 1;\n  ONLY_EXPERT = 2;\nvar\n  anyFileSelected: boolean;\n  i: integer;\n  f: Tfile;\n  a: TStringDynArray;\n\n  function onlySatisfied(only:integer):boolean;\n  begin\n  result:=(only=ONLY_ANY)\n    or (only=ONLY_EASY) and easyMode\n    or (only=ONLY_EXPERT) and not easyMode\n  end; // onlySatisfied\n\n  procedure visibleAs(mi:Tmenuitem; other:Tmenuitem; only:integer=ONLY_ANY);\n  begin mi.visible:=other.visible and onlySatisfied(only) end;\n\n  procedure visibleIf(mi:Tmenuitem; should:boolean; only:integer=ONLY_ANY);\n  begin if should then\n    mi.visible:=TRUE and onlySatisfied(only) end;\n\n  procedure checkedIf(mi:Tmenuitem; should:boolean);\n  begin if should then mi.checked:=TRUE end;\n\n  procedure enabledIf(mi:Tmenuitem; should:boolean);\n  begin if should then mi.enabled:=TRUE end;\n\n  procedure setDefaultValues(mi:TmenuItem);\n  var\n    i: integer;\n  begin\n  for i:=0 to mi.count-1 do\n    begin\n    mi[i].visible:=FALSE;\n    mi[i].enabled:=TRUE;\n    mi[i].checked:=FALSE;\n    end;\n  end; // setDefaultValues\n\n  function itemsVisible(mi:TmenuItem):integer;\n  var\n    i: integer;\n  begin\n  result:=0;\n  for i:=0 to mi.count-1 do\n    if mi.Items[i].visible then\n      inc(result);\n  end; // itemsVisible\n\nbegin\n// default values\nsetDefaultValues(filemenu.items);\nAddfiles1.visible:=TRUE;\nAddfolder1.visible:=TRUE;\nProperties1.visible:=TRUE;\n\nanyFileSelected:=selectedFile<>NIL;\nnewfolder1.visible:=not anyFileSelected\n  or ((filesBox.SelectionCount=1) and selectedFile.isFolder());\nSetuserpass1.visible:=anyFileSelected;\nCopyURL1.visible:=anyFileSelected;\n\nvisibleIf(Bindroottorealfolder1, (filesBox.SelectionCount=1) and selectedFile.isRoot() and selectedFile.isVirtualFolder(), ONLY_EXPERT);\nvisibleIf(Unbindroot1, (filesBox.SelectionCount=1) and selectedFile.isRoot() and selectedFile.isRealFolder(), ONLY_EXPERT);\n\nfor i:=0 to filesBox.SelectionCount-1 do\n  begin\n  f:=filesBox.selections[i].data;\n  visibleIf(setURL1, FA_LINK in f.flags);\n  visibleIf(Remove1, not f.isRoot());\n  visibleIf(Flagasnew1, not f.isNew() and (filesStayFlaggedForMinutes>0));\n  visibleIf(Resetnewflag1, f.isNew() and (filesStayFlaggedForMinutes>0));\n  visibleIf(SwitchToVirtual1, f.isRealFolder() and not f.isRoot(), ONLY_EXPERT);\n  visibleIf(SwitchToRealfolder1, f.isVirtualFolder() and not f.isRoot() and (f.resource > ''), ONLY_EXPERT);\n  visibleIf(Resetuserpass1, f.user>'');\n  visibleIf(CopyURLwithfingerprint1, f.isFile(), ONLY_EXPERT);\n  end;\nvisibleAs(newlink1, newfolder1, ONLY_EXPERT);\nvisibleIf(purge1, anyFileSelected, ONLY_EXPERT);\n\nif filesBox.SelectionCount = 1 then\n  begin\n  f:=selectedFile;\n  visibleIf(Defaultpointtoaddfiles1, f.isFolder(), ONLY_EXPERT);\n  visibleIf(Editresource1, not (FA_VIRTUAL in f.flags), ONLY_EXPERT);\n  visibleAs(rename1, remove1);\n  visibleIf(openit1, not f.isVirtualFolder());\n  visibleIf(browseIt1, TRUE, ONLY_EXPERT);\n  paste1.visible:=clipboard.HasFormat(CF_HDROP);\n\n  a:=NIL;\n  if anyFileSelected then\n    a:=expandAccountsByLink(selectedFile.getAccountsFor(FA_ACCESS, TRUE));\n  visibleIf(CopyURLwithpassword1, assigned(a), ONLY_EXPERT);\n  copyURLwithpassword1.Clear();\n  for i:=0 to length(a)-1 do\n    copyURLwithpassword1.add( newItem( a[i], 0, FALSE, TRUE, copyURLwithPasswordMenuClick, 0, '') );\n  end;\n\na:=getPossibleAddresses();\nif length(a) = 1 then a:=NIL;\nvisibleIf(CopyURLwithdifferentaddress1, anyFileSelected and assigned(a), ONLY_EXPERT);\ncopyURLwithdifferentaddress1.clear();\nfor i:=0 to length(a)-1 do\n  copyURLwithdifferentaddress1.add( newItem( a[i], 0, FALSE, TRUE, copyURLwithAddressMenuclick, 0, '') );\n\nend;\n\nfunction Tmainfrm.saveCFG():boolean;\n\n  procedure proposeUserRegistry();\n  resourcestring\n    MSG = 'Can''t save options there.'\n      +#13'Should I try to save to user registry?';\n  begin\n  if msgDlg(MSG, MB_ICONERROR+MB_YESNO) = IDYES then\n    begin\n    saveMode:=SM_USER;\n    saveCFG();\n    end;\n  end; // proposeUserRegistry\n\nvar\n  cfg: string;\nbegin\nresult:=FALSE;\nif srv = NIL then exit;\nif quitting and (backuppedCfg > '') then\n  cfg:=backuppedCfg\nelse\n  cfg:=getCfg();\ncase saveMode of\n\tSM_FILE:\n  \tbegin\n    if not saveTextFile(cfgPath+CFG_FILE, cfg) then\n      begin\n      proposeUserRegistry();\n      exit;\n      end;\n    result:=TRUE;\n    end;\n  SM_SYSTEM:\n  \tbegin\n    deleteFile(cfgPath+CFG_FILE);\n    deleteRegistry(CFG_KEY);\n    if not saveregistry( CFG_KEY, '', cfg, HKEY_LOCAL_MACHINE ) then\n      begin\n      proposeUserRegistry();\n      exit;\n      end;\n    result:=TRUE;\n    end;\n  SM_USER:\n  \tbegin\n    deleteFile(cfgPath+CFG_FILE);\n    result:=saveregistry(CFG_KEY, '', cfg);\n    end;\n  end;\nif ipsEverConnected.Count >= IPS_THRESHOLD  then\n  saveTextFile(IPS_FILE, ipsEverConnected.text)\nelse\n  deleteFile(IPS_FILE);\n\nif result then\n  deleteFile(lastUpdateCheckFN);\nend; // saveCFG\n\n// this method is called by all \"save options\" ways\nprocedure TmainFrm.tofile1Click(Sender: TObject);\nbegin\nif sender = tofile1 then saveMode:=SM_FILE\nelse if sender = toregistrycurrentuser1 then saveMode:=SM_USER\nelse if sender = toregistryallusers1 then saveMode:=SM_SYSTEM\nelse exit;\n\nif saveCFG() then\n  msgDlg(MSG_OPTIONS_SAVED);\nend;\n\nprocedure TmainFrm.About1Click(Sender: TObject);\nconst msg = 'HFS version %s'\n  +#13'Copyright (C) 2002-2020  Massimo Melina (www.rejetto.com)'\n  +#13#13'HFS comes with ABSOLUTELY NO WARRANTY under the license GNU GPL 3.0. For details click Menu -> Web links -> License'\n  +#13'This is FREE software, and you are welcome to redistribute it under certain conditions.'\n  +#13#13'Build #%s';\nbegin msgDlg(format(msg, [VERSION,VERSION_BUILD])) end;\n\nprocedure Tmainfrm.purgeConnections();\nvar\n  i: integer;\n  data: TconnData;\nbegin\ni:=0;\nwhile i < toDelete.Count do\n  begin\n  data:=toDelete[i];\n  inc(i);\n  if data = NIL then continue;\n  if assigned(data.conn) and data.conn.dontFree then continue;\n  toDelete[i-1]:=NIL;\n  setupDownloadIcon(data);\n  data.lastFile:=NIL; // auto-freeing\n\n  if assigned(data.limiter) then\n    begin\n    srv.limiters.remove(data.limiter);\n    freeAndNIL(data.limiter);\n    end;\n  freeAndNIL(data.conn);\n  try freeAndNIL(data) except end;\n  end;\ntoDelete.clear();\nend; // purgeConnections\n\nprocedure Tmainfrm.recalculateGraph();\nvar\n  i: integer;\nbegin\nif (srv = NIL) or quitting then exit;\n// shift samples\ni:=sizeOf(graph.samplesOut)-sizeOf(graph.samplesOut[0]);\nmove(graph.samplesOut[0], graph.samplesOut[1], i);\nmove(graph.samplesIn[0], graph.samplesIn[1], i);\n// insert new \"out\" sample\ngraph.samplesOut[0]:=srv.bytesSent-graph.lastOut;\ngraph.lastOut:=srv.bytesSent;\n// insert new \"in\" sample\ngraph.samplesIn[0]:=srv.bytesReceived-graph.lastIn;\ngraph.lastIn:=srv.bytesReceived;\n// increase the max value\ni:=max(graph.samplesOut[0], graph.samplesIn[0]);\nif i > graph.maxV then\n  begin\n  graph.maxV:=i;\n  graph.beforeRecalcMax:=100;\n  end;\ndec(graph.beforeRecalcMax);\nif graph.beforeRecalcMax > 0 then exit;\n// recalculate max value\ngraph.maxV:=0;\nwith graph do\n  for i:=0 to length(samplesOut)-1 do\n    maxV:=max(maxV, max(samplesOut[i], samplesIn[i]) );\ngraph.beforeRecalcMax:=100;\nend; // recalculateGraph\n\n// parse the version-dependant notice\nprocedure parseVersionNotice(s:string);\nvar\n  l, msg: string;\nbegin\nwhile s > '' do\n  begin\n  l:=trim(chopLine(s));\n  // the line has to start with a @ followed by involved versions\n  if (length(l) < 2) or (l[1] <> '@') then continue;\n  delete(l,1,1);\n  // collect the message (until next @-starting line)\n  msg:='';\n  while (s > '') and (s[1] <> '@') do\n    msg:=msg+chopLine(s)+#13;\n  // before 2.0 beta14 a bare semicolon-separated string comparison was used\n  if filematch(l, VERSION) or filematch(l, '#'+VERSION_BUILD) then\n    msgDlg(msg, MB_ICONWARNING);\n  end;\nend; // parseVersionNotice\n\nfunction doTheUpdate(url:string):boolean;\nresourcestring\n  MSG_SAVE_ERROR = 'Cannot save the update';\n  MSG_LIMITED = 'The auto-update feature cannot work because it requires the \"Only 1 instance\" option enabled.'\n    +#13#13'Your browser will now be pointed to the update, so you can install it manually.';\nconst\n  UPDATE_BATCH_FILE = 'hfs.update.bat';\n  UPDATE_BATCH = 'START %0:s /WAIT \"%1:s\" -q'+CRLF\n    +'ping 127.0.0.1 -n 3 -w 1000> nul'+CRLF\n    +'DEL \"%3:s'+PREVIOUS_VERSION+'\"'+CRLF\n    +'%2:sMOVE \"%1:s\" \"%3:s'+PREVIOUS_VERSION+'\"'+CRLF\n    +'DEL \"%1:s\"'+CRLF\n    +'MOVE \"%4:s\" \"%1:s\"'+CRLF\n    +'START %0:s \"%1:s\"'+CRLF\n    +'DEL %%0'+CRLF;\nvar\n  size: integer;\n  fn: string;\nbegin\nresult:=FALSE;\nif not mono.working then\n  begin\n  msgDlg(MSG_LIMITED, MB_ICONWARNING);\n  openURL(url);\n  exit;\n  end;\nif mainfrm.delayUpdateChk.checked\nand (srv.conns.count > 0) then\n  begin\n  updateASAP:=url;\n  stopServer();\n  mainfrm.kickidleconnections1Click(NIL);\n  mainfrm.setStatusBarText('Waiting for last requests to be served, then we''ll update', 20);\n  exit;\n  end;\n// must ask BEFORE: when the batch will be running, nothing should stop it, or it will fail\nif not checkVfsOnQuit() then exit;\nVFSmodified:=FALSE;\n\nprogFrm.show('Downloading new version...', TRUE);\ntry\n  fn:=paramStr(0)+'.new';\n  size:=sizeOfFile(fn);\n  // a previous failed update attempt? avoid re-downloading if not necessary\n  if (size <= 0) or (httpFileSize(url) <> size) then\n    try\n      if not httpGetFile(url, fn, 2, mainfrm.progFrmHttpGetUpdate) then\n        begin\n        if not lockTimerevent then\n          msgDlg(MSG_COMM_ERROR, MB_ICONERROR);\n        exit;\n        end;\n    except\n      if not lockTimerevent then\n        msgDlg(MSG_SAVE_ERROR, MB_ICONERROR);\n      exit;\n      end;\nfinally progFrm.hide() end;\nif progFrm.cancelRequested then\n  begin\n  deleteFile(fn);\n  exit;\n  end;\n\ntry\n  progFrm.show('Processing...');\n  saveTextFile(UPDATE_BATCH_FILE, format(UPDATE_BATCH, [\n    if_(isNT(), '\"\"'),\n    paramStr(0),\n    if_(not mainfrm.keepBakUpdatingChk.checked,'REM '),\n    exePath,\n    fn\n  ]));\n  execNew(UPDATE_BATCH_FILE);\n  result:=TRUE;\nfinally progFrm.hide() end;\nend; // doTheUpdate\n\nfunction promptForUpdating(url:string):boolean;\nresourcestring\n  MSG_UPDATE = 'You are invited to use the new version.'#13#13'Update now?';\nbegin\nresult:=FALSE;\nif url = '' then exit;\nif not mainfrm.updateAutomaticallyChk.checked\nand (msgDlg(MSG_UPDATE, MB_YESNO) = IDNO) then\n  exit;\ndoTheUpdate(url);\nresult:=TRUE;\nend; // promptForUpdating\n\nfunction downloadUpdateInfo():Ttpl;\nconst\n  URL = 'http://www.rejetto.com/hfs/hfs.updateinfo.txt';\n  ON_DISK = 'hfs.updateinfo.txt';\nresourcestring\n  MSG_FROMDISK = 'Update info has been read from local file.'\n    +#13'To resume normal operation of the updater, delete the file '\n      +ON_DISK+' from the HFS program folder.';\nvar\n  s: string;\nbegin\nlastUpdateCheck:=now();\nsaveTextFile(lastUpdateCheckFN, '');\nfileSetAttr(lastUpdateCheckFN, faHidden);\n\nresult:=NIL;\nprogFrm.show('Requesting...');\ntry\n  // this let the developer to test the parsing locally\n  if not fileExists(ON_DISK) then\n    try s:=httpGet(URL)\n    except end\n  else\n    begin\n    s:=loadTextFile(ON_DISK);\n    msgDlg(MSG_FROMDISK, MB_ICONWARNING);\n    end;\nfinally progFrm.hide() end;\nif pos('[EOF]', s) = 0 then exit;\nresult:=Ttpl.create();\nresult.fullText:=s;\nend; // downloadUpdateInfo\n\nprocedure Tmainfrm.autoCheckUpdates();\nvar\n  info: Ttpl;\n  updateURL, ver, build: string;\n\n  function thereSnew(kind:string):boolean;\n  var\n    s: string;\n  begin\n  s:=trim(info['last '+kind+' build']);\n  result:=(s > VERSION_BUILD) and (s <> refusedUpdate);\n  if not result then exit;\n  build:=s;\n  updateURL:=trim(info['last '+kind+' url']);\n  ver:=trim(info['last '+kind]);\n  end;\n\nbegin\nif (VERSION_STABLE and (now()-lastUpdateCheck < 1))\nor (now()-lastUpdateCheck < 1/3) then exit;\nsetStatusBarText('Checking for updates');\ntry\n  info:=downloadUpdateInfo();\n  if info = NIL then\n    begin\n    if logOtherEventsChk.checked then add2log('Check update: failed');\n    setStatusBarText('Check update: failed');\n    exit;\n    end;\n  if not thereSnew('stable')\n  and (not VERSION_STABLE or testerUpdatesChk.checked) then\n    thereSnew('untested');\n  // same version? we show build number\n  if ver = VERSION then\n    ver:=format('Build #%s (current is #%s)', [build, VERSION_BUILD]);\n  if logOtherEventsChk.checked then\n    add2log('Check update: '+ifThen(updateURL = '', 'no new version', 'new version found: '+ver));\n  parseVersionNotice(info['version notice']);\n  setStatusBarText('');\n  if updateURL = '' then exit;\n  if updateAutomaticallyChk.checked\n  and doTheUpdate(updateURL) then exit;\n  // notify the user gently\n  updateBtn.show();\n  updateWaiting:=updateURL;\n  flash();\nfinally freeAndNIL(info) end;\nend; // autoCheckUpdates\n\nprocedure loadEvents();\nbegin eventScripts.fullText:=loadTextFile(cfgpath+EVENTSCRIPTS_FILE) end;\n\nprocedure Tmainfrm.updateCopyBtn();\nresourcestring\n  COPY = 'Copy to clipboard';\n  ALREADY = 'Already in clipboard';\nvar\n  s: string;\nbegin\ns:=copyBtn.caption;\ntry\n  copyBtn.Caption:=if_(clipboard.asText = urlBox.text, ALREADY, COPY);\n  if copyBtn.caption <> s then FormResize(NIL);\nexcept end;\nend; // updateCopyBtn\n\nvar\n  timedEventsRE: TRegExpr;\n  eventsLastRun: TstringToIntHash;\n\nprocedure runTimedEvents();\nvar\n  i: integer;\n  sections: TStringDynArray;\n  re: TRegExpr;\n  t, last: Tdatetime;\n  section: string;\n\n  procedure handleAtCase();\n  begin\n  t:=now();\n  // we must convert the format, because our structure stores integers\n  last:=unixToDatetime(eventsLastRun.getInt(section));\n  if (strToInt(re.match[9]) = hourOf(t))\n  and (strtoInt(re.match[10]) = minuteOf(t))\n  and (t-last > 0.9) then // approximately 1 day should have been passed\n    begin\n    eventsLastRun.setInt(section, datetimeToUnix(t));\n    runEventScript(section);\n    end;\n  end; // handleAtCase\n\n  procedure handleEveryCase();\n  begin\n  // get the XX:YY:ZZ\n  t:=strToFloat(re.match[2]);\n  if re.match[4] > '' then\n    t:=t*60+strToInt(re.match[4]);\n  if re.match[6] > '' then\n    t:=t*60+strToInt(re.match[6]);\n  // apply optional time unit\n  case upcase(getFirstChar(re.match[7])) of\n    'M': t:=t*60;\n    'H': t:=t*60*60;\n    end;\n  // now \"t\" is in seconds\n  if (t > 0) and ((clock div 10) mod round(t) = 0) then\n    runEventScript(section);\n  end; // handleEveryCase\n\nbegin\nif timedEventsRE = NIL then\n  begin\n  timedEventsRE:=TRegExpr.create; // yes, i know, this is never freed, but we need it for the whole time\n  timedEventsRE.expression:='(every +([0-9.]+)(:(\\d+)(:(\\d+))?)? *([a-z]*))|(at (\\d+):(\\d+))';\n  timedEventsRE.modifierI:=TRUE;\n  timedEventsRE.compile();\n  end;\n\nif eventsLastRun = NIL then\n  eventsLastRun:=TstringToIntHash.create; // yes, i know, this is never freed, but we need it for the whole time\n\nre:=timedEventsRE; // a shortcut\nsections:=eventScripts.getSections();\nfor i:=0 to length(sections)-1 do\n  begin\n  section:=sections[i]; // a shortcut\n  if not re.exec(section) then continue;\n\n  try\n    if re.match[1] > '' then handleEveryCase()\n    else handleAtCase();\n  except end; // ignore exceptions\n  end;\nend; // runTimedEvents\n\nprocedure TmainFrm.timerEvent(Sender: TObject);\nvar\n  now_: Tdatetime;\n\n  function itsTimeFor(var t:Tdatetime):boolean;\n  begin\n  result:=(t > 0) and (t < now_);\n  if result then t:=0;\n  end; // itsTimeFor\n\n  procedure calculateETA(data:TconnData; current:real; leftOver:int64);\n  var\n    i, n: integer;\n  begin\n  data.eta.data[data.eta.idx mod ETA_FRAME]:=current;\n  inc(data.eta.idx);\n\n  data.averageSpeed:=0;\n  n:=min(data.eta.idx, ETA_FRAME);\n  for i:=0 to n-1 do\n    data.averageSpeed:=data.averageSpeed+data.eta.data[i];\n  data.averageSpeed:=data.averageSpeed/n;\n\n  if data.averageSpeed > 0 then\n    data.eta.result:=(leftOver/data.averageSpeed)/SECONDS;\n  end; // calculateETA\n\n  procedure every10minutes();\n  begin\n  if dyndns.url > '' then\n    getExternalAddress(externalIP);\n  end; // every10minutes\n\n  procedure everyMinute();\n  var\n    sess: Tsession;\n  begin\n  for sess in sessions.values do\n    if now_ > sess.expires then\n      sess.free;\n  if updateDailyChk.Checked then\n    autoCheckUpdates();\n  // purge icons older than 5 minutes, because sometimes icons change\n  iconsCache.purge(now_-(5*60)/SECONDS);\n  end; // everyMinute\n\n  procedure every10sec();\n  var\n    s: string;\n    ss: Tstrings;\n  begin\n  if not stringExists(defaultIP, getPossibleAddresses()) then\n    // previous address not available anymore (it happens using dial-up)\n    findSimilarIP(defaultIP);\n    \n  if searchbetteripChk.checked\n  and not stringExists(defaultIP, customIPs) // we don't mess with custom IPs\n  and isLocalIP(defaultIP) then // we prefer non-local addresses\n    begin\n    s:=getIP();\n    if not isLocalIP(s) then // clearly better\n      setDefaultIP(s)\n    else if ansiStartsStr('169', defaultIP) then // we consider the 169 worst of other locals\n      begin\n      ss:=LocalIPList();\n      if ss.count > 1 then\n        setDefaultIP(ss[ if_(ss[0]=defaultIP, 1, 0) ]);\n      end;;\n    end;\n\n  end; // every10sec\n\n  procedure everySec();\n  var\n    i, outside, size: integer;\n    data: TconnData;\n  begin\n  // this is a already done in utilLib initialization, but it's a workaround to http://www.rejetto.com/forum/?topic=7724\n  FormatSettings.decimalSeparator:='.';\n  // check if the window is outside the visible screen area\n  outside:=left;\n  if assigned(monitor) then  // checking here because the following line once thrown this AV http://www.rejetto.com/forum/?topic=5568\n    for i:=0 to monitor.MonitorNum do\n      dec(outside, screen.monitors[i].width);\n  if (outside > 0)\n  or (boundsRect.bottom < 0)\n  or (boundsRect.right < 0) then\n    makeFullyVisible();\n\n\n  if dyndns.active and (dyndns.url > '') then\n    begin\n    if externalIP = '' then\n      getExternalAddress(externalIP);\n    if not isLocalIP(externalIP) and (externalIP <> dyndns.lastIP)\n    or (now()-dyndns.lastTime > 24) then\n      updateDynDNS();\n    // the action above takes some time, and it can happen we asked to quit in the meantime\n    if quitting then exit;\n    end;\n\n  // the alt+click shortcut to get file properties will result in an unwanted editing request if the file is already selected. This is a workaround.\n  if filesBox.isEditing and assigned(filepropFrm) then\n    selectedFile.node.EndEdit(TRUE);\n\n  updateTrayTip();\n\n  if warnManyItems and (filesBox.items.count > MANY_ITEMS_THRESHOLD) then\n    begin\n    warnManyItems:=FALSE;\n    msgDlg(MSG_MANY_ITEMS, MB_ICONWARNING);\n    end;\n\n  with autosaveVFS do // we do it only if the filename is already specified\n    if (every > 0) and (lastFileOpen > '') and not loadingVFS.disableAutosave\n    and ((now_-last)*SECONDS >= every) then\n      begin\n      last:=now_;\n      saveVFS(lastFileOpen);\n      end;\n\n  if assigned(srv) and assigned(srv.conns) then\n    for i:=0 to srv.conns.count-1 do\n      begin\n      data:=conn2data(i);\n      if data = NIL then continue;\n\n      if isReceivingFile(data) then\n        begin\n        refreshConn(data); // even if no data is coming, we must update other stats\n        calculateETA(data, data.conn.speedIn, data.conn.bytesToPost);\n        end;\n      if isSendingFile(data) then\n        begin\n        refreshConn(data);\n        calculateETA(data, data.conn.speedOut, data.conn.bytesToSend);\n\n        if userIcsBuffer > 0 then\n          data.conn.sock.bufSize:=userIcsBuffer;\n\n        size:=minmax(8192, MEGA, round(data.averageSpeed));\n        if userSocketBuffer > 0 then\n          data.conn.sndBuf:=userSocketBuffer\n        else if highSpeedChk.checked and (safeDiv(0.0+size, data.conn.sndbuf, 2) > 2) then\n            data.conn.sndBuf:=size;\n        end;\n\n      // connection inactivity timeout\n      if (connectionsInactivityTimeout > 0)\n      and ((now_-data.lastActivityTime)*SECONDS >= connectionsInactivityTimeout) then\n        data.disconnect('inactivity');\n      end;\n\n  // server inactivity timeout\n  if noDownloadTimeout > 0 then\n    if (now_-lastActivityTime)*SECONDS > noDownloadTimeout*60 then\n      quitASAP:=TRUE;\n\n  if windowState = wsNormal then\n    lastWindowRect:=mainfrm.boundsRect;\n\n  // update can be put off until there's no one connected\n  if (updateASAP > '') and (srv.conns.count = 0) then\n    doTheUpdate(clearAndReturn(updateASAP)); // before we call the function, lets clear the request\n\n  updateCopyBtn();\n  keepTplUpdated();\n  updateCurrentCFG();\n\n  if newMtime(cfgpath+EVENTSCRIPTS_FILE, eventScriptsLast) then\n    loadEvents();\n\n  if assigned(runScriptFrm) and runScriptFrm.visible\n  and runScriptFrm.autorunChk.checked and newMtime(tempScriptFilename, runScriptLast) then\n    runScriptFrm.runBtnClick(NIL);\n\n  runTimedEvents();\n  end; // everySec\n\n  procedure everyTenth();\n  var\n    f: Tfile;\n    n: Ttreenode;\n  begin\n  purgeConnections();\n\n  // see the filesBoxEditing event for an explanation of the following lines\n  if not filesBox.IsEditing and (remove1.ShortCut = 0) then\n    begin\n    remove1.ShortCut:=TextToShortCut('Del');\n    Paste1.ShortCut:=TextToShortCut('Ctrl+V');\n    copyURL1.ShortCut:=TextToShortCut('Ctrl+C');\n    end;\n\n  with optionsFrm do\n    if active and iconsPage.visible then\n      updateIconMap();\n\n  if scrollFilesBox in [SB_LINEUP,SB_LINEDOWN] then\n    postMessage(filesBox.Handle, WM_VSCROLL, scrollFilesBox, 0);\n\n  if assigned(filesToAddQ) then\n    begin\n    f:=findFilebyURL(addToFolder);\n    if f = NIL then\n      f:=selectedFile;\n    if f = NIL then\n      n:=NIL\n    else\n      n:=f.node;\n    addFilesFromString(join(CRLF, filesToAddQ), n);\n    filesToAddQ:=NIL;\n    end;\n\n  if itsTimeFor(searchLogTime) then\n    if searchLog(0) then logSearchBox.Color:=clWindow\n    else\n      begin\n      logSearchBox.Color:=BG_ERROR;\n      searchLogWhiteTime:=now_+5/SECONDS;\n      end;\n  if itsTimeFor(searchLogWhiteTime) then\n    logSearchBox.Color:=clWindow;\n\n  end; // everyTenth\n\n  function every(tenths:integer):boolean;\n  begin result:=not quitting and (clock mod tenths = 0) end;\n\nvar\n  bak: boolean;\nbegin\nif quitASAP and not quitting and not queryingClose then\n  begin\n  { close is not effective when lockTimerevent is TRUE, so we force it TRUE.\n  { it should not be necessary, but we want to be sure to quit even with bugs. }\n  bak:=lockTimerevent;\n  lockTimerevent:=FALSE;\n  application.MainForm.Close();\n  lockTimerevent:=bak;\n  end; // quit\nif not timer.enabled or quitting or lockTimerevent then exit;\nlockTimerevent:=TRUE;\ntry\n  // idk how it can be, but sometimes this now() call causes an AV http://www.rejetto.com/forum/index.php?topic=6371.msg1038634#msg1038634\n  try now_:=now()\n  except now_:=0 end;\n  if now_ = 0 then exit;\n\n  inc(clock);\n  if every(1) then everyTenth();\n  if every(10*60*10) then every10minutes();\n  if every(60*10) then everyMinute();\n  if every(10*10) then every10sec();\n  if every(10) then everySec();\n  if every(STATUSBAR_REFRESH) then\n    updateSbar();\n  if every(graph.rate) then\n    begin\n    recalculateGraph();\n    graphBoxPaint(NIL);\n    end;\nfinally lockTimerevent:=FALSE end;\nend; // timerEvent\n\nprocedure Tmainfrm.updateSbar();\nvar\n  pn: integer;\n\n  function addPanel(s:string; al:TAlignment=taCenter):integer;\n  begin\n  result:=pn;\n  inc(pn);\n  if sbar.Panels.count < pn then sbar.Panels.Add();\n  with sbar.panels[pn-1] do\n    begin\n    alignment:=al;\n    Text:=s;\n    width:=sbar.Canvas.TextWidth(s)+20;\n    end;\n  end; // addPanel\n\n  procedure checkDiskSpace();\n  resourcestring\n    NOSPACE = 'Out of space';\n  type\n    Tdrive = 1..26;\n  var\n    i: integer;\n    drives: set of Tdrive;\n    driveLetters: TStringDynArray;\n    driveLetter: char;\n  begin\n  if minDiskSpace <= 0 then exit;\n  drives:=[];\n  i:=0;\n  while i < length(uploadPaths) do\n    begin\n    include(drives, filenameToDriveByte(uploadPaths[i]));\n    inc(i);\n    end;\n  driveLetters:=NIL;\n  for i:=low(Tdrive) to high(Tdrive) do\n    if i in drives then\n      begin\n      driveLetter:=chr(i+ord('A')-1);\n      if not sysutils.directoryExists(driveLetter+':\\') then continue;\n      if diskfree(i) div MEGA <= minDiskSpace then\n        addString(driveLetter, driveLetters);\n      end;\n  if driveLetters = NIL then exit;\n  sbarIdxs.oos:=addPanel( NOSPACE+': '+join(',', driveLetters));\n  end; // checkDiskSpace\n\n  function getConnectionsString():string;\n  resourcestring\n    CONN = 'Connections: %d';\n  var\n    i: integer;\n  begin\n  result:=format(CONN, [srv.conns.Count]);\n  if easyMode then exit;\n  i:=countIPs();\n  if i < srv.conns.count then result:=result+' / '+intToStr(i);\n  end;\n\nresourcestring\n  TOT_IN = 'Total In: %s';\n  TOT_OUT = 'Total Out: %s';\n  OUT_SPEED = 'Out: %.1f KB/s';\n  IN_SPEED = 'In: %.1f KB/s';\n  BANS = 'Ban rules: %d';\n  MEMORY = 'Mem';\n  CUSTOMIZED = 'Customized template';\n  ITEMS = 'VFS: %d items';\nvar\n  tempText: string;\nbegin\nif quitting then exit;\nfillChar(sbarIdxs, sizeof(sbarIdxs), -1);\nif sbarTextTimeout < now() then tempText:=''\nelse tempText:=sbar.Panels[sbar.Panels.Count-1].text;\npn:=0;\nif not easyMode then\n  addPanel( getConnectionsString() );\nsbarIdxs.out:=addPanel( format(OUT_SPEED,[srv.speedOut/1000]) );\naddPanel( format(IN_SPEED,[srv.speedIn/1000]) );\nif not easyMode then\n  begin\n  sbarIdxs.totalOut:=addPanel( format(TOT_OUT,[\n    smartSize(outTotalOfs+srv.bytesSent)]) );\n  sbarIdxs.totalIn:=addPanel( format(TOT_IN,[\n    smartSize(inTotalOfs+srv.bytesReceived)]) );\n  sbarIdxs.notSaved:=addPanel( format(ITEMS,[filesBox.items.count-1])\n    +if_(VFSmodified,' - not saved') );\n  if not vFsmodified then sbarIdxs.notSaved:=-1;\n  end;\ncheckDiskSpace();\n\nif showMemUsageChk.checked then\n  addPanel(MEMORY+': '+dotted(allocatedMemory()));\n\nif assigned(banlist) then\n  sbarIdxs.banStatus:=addPanel(format(BANS, [length(banlist)]));\n\nif tplIsCustomized then sbarIdxs.customTpl:=addPanel(CUSTOMIZED);\n\n// if tempText empty, ensures a final panel terminator\naddPanel(tempText, taLeftJustify);\n\n// delete excess panels\nwhile sbar.Panels.count > pn do sbar.Panels.delete(pn);\nend; // updateSbar\n\nprocedure Tmainfrm.refreshIPlist();\nCONST\n  INDEX_FOR_URL = 2;\n  INDEX_FOR_NIC = 1;\nvar\n  a: TStringDynArray;\n  i: integer;\nbegin\nwhile IPaddress1.Items[INDEX_FOR_URL].Caption <> '-' do\n  IPaddress1.delete(INDEX_FOR_URL);\n// fill 'IP address' menu\na:=getPossibleAddresses();\nfor i:=0 to length(a)-1 do\n  mainfrm.IPaddress1.Insert(INDEX_FOR_URL,\n    newItem(a[i], 0, a[i]=defaultIP, TRUE, ipmenuclick, 0, '') );\n\n// fill 'Accept connections on' menu\nwhile Acceptconnectionson1.count > INDEX_FOR_NIC  do\n  Acceptconnectionson1.delete(INDEX_FOR_NIC);\nAnyaddress1.checked:= listenOn = '';\na:=listToArray(localIPlist);\naddUniqueString('127.0.0.1', a);\nfor i:=0 to length(a)-1 do\n  Acceptconnectionson1.Insert(INDEX_FOR_NIC,\n    newItem( a[i], 0, a[i]=listenOn, TRUE, acceptOnMenuclick, 0, '') );\nend; // refreshIPlist\n\nprocedure TmainFrm.filesBoxDblClick(Sender: TObject);\nbegin\nif assigned(selectedFile) then setClip(selectedFile.fullURL());\nupdateUrlBox();\nend;\n\nfunction setBrowsable(f:Tfile; childrenDone:boolean; par, par2:integer):TfileCallbackReturn;\nbegin\nif not f.isFolder() then exit;\nif (FA_BROWSABLE in f.flags) = boolean(par) then VFSmodified:=TRUE\nelse exit;\nif boolean(par) then exclude(f.flags, FA_BROWSABLE)\nelse include(f.flags, FA_BROWSABLE);\nend; // setBrowsable\n\nprocedure fileMenuSetFlag(sender:Tobject; flagToSet:TfileAttribute; filter:TfilterMethod=NIL; negateFilter:boolean=FALSE; recursive:boolean=FALSE; f:Tfile=NIL);\n// parameter \"f\" is designed to be set only inside this function\nvar\n  newState: boolean;\n\n  procedure applyTo(f:Tfile);\n  var\n    n: TtreeNode;\n  begin\n  n:=f.node.getFirstChild();\n  while assigned(n) do\n    begin\n    if assigned(n.data) then fileMenuSetFlag(sender, flagToSet, filter, negateFilter, TRUE, n.data);\n    n:=n.getNextSibling();\n    end;\n\n  if assigned(filter) and (negateFilter = filter(f)) then exit;\n  if (flagToSet in f.flags) = newState then exit;\n  VFSmodified:=TRUE;\n  if newState then include(f.flags, flagToSet)\n  else exclude(f.flags, flagToSet);\n  end; // applyTo\n\nvar\n  i: integer;\nbegin\nif (f = NIL) and (selectedFile = NIL) then exit;\nnewState:=not (sender as TmenuItem).checked;\nif assigned(f) then applyTo(f)\nelse\n  begin\n  for i:=0 to mainFrm.filesBox.SelectionCount-1 do\n    applyTo(mainFrm.filesBox.Selections[i].data);\n  mainFrm.filesBox.Repaint();\n  end;\nend;\n\nprocedure TmainFrm.HideClick(Sender: TObject);\nbegin\ngraphBox.Hide();\ngraphSplitter.Hide();\nend;\n\nprocedure TmainFrm.filesBoxMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);\nbegin filesBox.Selected:=filesbox.GetNodeAt(x,y) end;\n\nprocedure setFilesBoxExtras(v:boolean);\nbegin\n{ let disable this silly feature for now\nif winVersion <> WV_VISTA then exit;\nwith mainfrm.filesBox do\n  begin\n  if isEditing then exit;\n  ShowButtons:=v;\n  ShowLines:=v;\n  end;}\nend; // setFilesBoxExtras\n\nprocedure TmainFrm.filesBoxMouseEnter(Sender: TObject);\nbegin\nwith filesBox do setFilesBoxExtras(TRUE);\nend;\n\nprocedure TmainFrm.filesBoxMouseLeave(Sender: TObject);\nbegin\nwith filesBox do setFilesBoxExtras(focused);\nend;\n\nprocedure TmainFrm.filesBoxMouseUp(Sender: TObject; Button: TMouseButton;\n  Shift: TShiftState; X, Y: Integer);\nbegin\nif (shift = [ssAlt]) and (button = mbLeft) then\n  Properties1.click();\nend;\n\nprocedure TmainFrm.filesBoxCompare(Sender: TObject; Node1, Node2: TTreeNode; Data: Integer; var Compare: Integer);\nvar\n  f1, f2: Tfile;\nbegin\nf1:=Tfile(node1.data);\nf2:=Tfile(node2.data);\nif (f1 = NIL) or (f2 = NIL) then exit;\nif not foldersbeforeChk.checked or (f1.isFolder() = f2.isFolder()) then\n  compare:=ansiCompareText(f1.name, f2.name)\nelse\n  if f1.isFolder() then compare:=-1\n  else compare:=+1;\nend;\n\nprocedure TmainFrm.foldersbeforeChkClick(Sender: TObject);\nbegin rootNode.AlphaSort(TRUE) end;\n\nprocedure browse(url:string);\nbegin\nif mainfrm.browseUsingLocalhostChk.Checked then\n  begin\n  chop('//',url);\n  chop('/',url);\n  url:='http://localhost:'+srv.port+'/'+url;\n  end;\nopenURL(url);\nend; // browse\n\nprocedure TmainFrm.Browseit1Click(Sender: TObject);\nbegin\nif selectedFile = NIL then exit;\nif selectedFile.isLink() then openURL(selectedfile.url())\nelse browse(selectedfile.fullurl())\nend;\n\nprocedure TmainFrm.Openit1Click(Sender: TObject);\nbegin\nif selectedFile = NIL then exit;\nexec('\"'+selectedfile.resource+'\"')\nend;\n\nprocedure TmainFrm.openLogBtnClick(Sender: TObject);\nvar\n  mask, fn: string;\n  s: TfastStringAppend;\n  i: integer;\nbegin\nmask:=logSearchBox.text;\ns:=TfastStringAppend.create;\ntry\n  if sender = openLogBtn then s.append(logBox.text)\n  else\n    for i:=0 to logBox.Lines.Count-1 do\n      if filematch('*'+mask+'*', logbox.lines[i]) then\n        s.append(logBox.lines[i]+CRLF);\n  if s.length() = 0 then\n    begin\n    msgDlg('It''s empty', MB_ICONWARNING);\n    exit;\n    end;\n  fn:=saveTempFile(s.get());\nfinally s.free end;\nif renameFile(fn, fn+'.txt') then exec(fn+'.txt')\nelse msgDlg(MSG_NO_TEMP, MB_ICONERROR);\nend;\n\nprocedure Tmainfrm.ipmenuclick(sender:Tobject);\nvar\n  ip: string;\nbegin\nip:=(sender as Tmenuitem).caption;\ndelete(ip, pos('&',ip), 1);\nsetDefaultIP(ip);\nsearchbetteripChk.checked:=FALSE;\nsetClip(urlBox.text);\nend; // ipmenuclick\n\n// returns the last file added\nfunction Tmainfrm.addFilesFromString(files:string; under:Ttreenode=NIL):Tfile;\nvar\n  folderKindFrm: TfolderKindFrm;\n\n  function selectFolderKind():integer;\n  begin\n  application.restore();\n  application.BringToFront();\n  Application.CreateForm(TfolderKindFrm, folderKindFrm);\n  result:=folderKindFrm.ShowModal();\n  folderKindFrm.Free;\n  end; // selectFolderKind\n\nresourcestring\n  MSG1 = '%s item(s) already exists:'#13'%s'#13#13'Continue?';\nconst\n  MAX_DUPE = 50;\nvar\n  f: Tfile;\n  kind, s, fn: string;\n  doubles: TStringDynArray;\n  res: integer;\n  upload, skipComment: boolean;\nbegin\nresult:=NIL;\nif files = '' then exit;\nupload:=FALSE;\nif singleLine(files) then\n  begin\n  files:=trim(files); // this let me treat 'files' as a simple filename, not caring of the trailing CRLF\n\n  // suggest template installation\n  if (lowerCase(extractFileExt(files)) = '.tpl')\n  and (msgDlg('Install this template?', MB_YESNO) = MRYES) then\n    begin\n    setNewTplFile(files);\n    exit;\n    end;\n\n  upload:=(ipos('upload', extractFilename(files)) > 0)\n    and (msgDlg('Do you want ANYONE to be able to upload to this folder?', MB_YESNO) = MRYES);\n  end;\n// warn upon double filenames\ndoubles:=NIL;\ns:=files;\nwhile s > '' do\n\tbegin\n  fn:=chopLine(s);\n  // we must resolve links here, or we may miss duplicates\n\tif isExtension(fn, '.lnk') or fileExists(fn+'\\target.lnk') then  // mod by mars\n    fn:=resolveLnk(fn);\n\n  if (length(fn) = 3) and (fn[2] = ':') then fn:=fn[1]+fn[2] // unit root folder\n\telse fn:=ExtractFileName(fn);\n  if existsNodeWithName(fn, under) then\n    if addString(fn, doubles) > MAX_DUPE then\n      break;\n  end;\nif assigned(doubles) then\n  begin\n  filesBox.Repaint();\n  res:=length(doubles);\n  s:=if_(res > MAX_DUPE, intToStr(MAX_DUPE)+'+', intToStr(res));\n  s:=format(MSG1, [s, join(', ',doubles)]);\n  if msgDlg(s, MB_ICONWARNING+MB_YESNO) <> IDYES then exit;\n  end;\n\nf:=NIL;\nskipComment:=not singleLine(files);\nkind:=if_(upload, 'real', addFolderDefault);\naddingItemsCounter:=0;\ntry\n\trepeat\n  fn:=chopLine(files);\n  if fn = '' then continue;\n  f:=Tfile.create(fn);\n  if f.isFolder() then\n    begin\n    if kind = '' then\n      begin // we didn't decide if real or virtual yet\n      res:=selectFolderKind();\n\n      if isAbortResult(res) then\n        begin\n        f.free;\n        exit;\n        end;\n      kind:=if_(res = mrYes, 'virtual', 'real');\n      end;\n\n    if kind = 'virtual' then                                             \n      include(f.flags, FA_VIRTUAL);\n    end;\n\n  f.lock();\n  try\n    f.name:=getUniqueNodeName(f.name, under);\n    addFile(f, under, skipComment);\n  finally\n    f.unlock();\n    end;\n\n  until (files = '') or stopAddingItems;\nfinally addingItemsCounter:=-1 end;\n\nif upload then\n  begin\n  addUniqueString(USER_ANYONE, f.accounts[FA_UPLOAD]);\n  sortArray(f.accounts[FA_UPLOAD]);\n  end;\nif assigned(f) and autocopyURLonadditionChk.checked then\n  setClip(f.fullURL());\nresult:=f;\nend; // addFilesFromString\n\nprocedure Tmainfrm.addDropFiles(hnd:Thandle; under:Ttreenode);\nvar\n  i, n: integer;\n  buffer: array [0..2000] of char;\n  files: string;\nbegin\nif hnd = 0 then exit;\nGlobalLock(hnd);\nn:=DragQueryFile(hnd,cardinal(-1),NIL,0);\nfiles:='';\nbuffer:='';\nfor i:=0 to n-1 do\n  begin\n  DragQueryFile(hnd,i,@buffer,sizeof(buffer));\n  files:=files+buffer+CRLF;\n  end;\n//DragFinish(hnd);  // this call seems to cause instability, don't know why\nGlobalUnlock(hnd);\n\naddFilesFromString(files, under);\nend; // addDropFiles\n\nprocedure Tmainfrm.WMDropFiles(var msg:TWMDropFiles);\nbegin\nwith filesbox.screenToClient(mouse.cursorPos) do\n  addDropFiles(msg.Drop, filesbox.getNodeAt(x,y));\ninherited;\nend; // WMDropFiles\n\nprocedure Tmainfrm.WMQueryEndSession(var msg:TWMQueryEndSession);\nbegin\nwindowsShuttingDown:=TRUE;\nquitting:=TRUE; // in hard times, formClose() is not called (or not soon enough)\nquitASAP:=TRUE;\nmsg.Result:=1;\nclose();\ninherited;\nend; // WMQueryEndSession\n\nprocedure Tmainfrm.WMEndSession(var msg:TWMEndSession);\nbegin\nif msg.EndSession then\n  begin\n  windowsShuttingDown:=TRUE;\n  quitting:=TRUE;\n  quitASAP:=TRUE;\n  close();\n  end;\ninherited;\nend; // WMEndSession\n\nprocedure TmainFrm.WMNCLButtonDown(var msg:TWMNCLButtonDown);\nbegin\nif (msg.hitTest = windows.HTCLOSE) and trayInsteadOfQuitChk.checked then\n  begin\n  msg.hitTest:=windows.HTCAPTION; // cancel closing\n  minimizeToTray();\n  end;\ninherited;\nend;\n\nprocedure TmainFrm.splitVMoved(Sender: TObject);\nbegin\nif logBox.width > 0 then lastGoodLogWidth:=logBox.width;\nfilesBoxRatio:=filesPnl.Width/ClientWidth\nend;\n\nprocedure TmainFrm.appEventsShowHint(var HintStr: String; var CanShow: Boolean; var HintInfo: THintInfo);\n\n  function reduce(s:string):string;\n  begin\n  result:=xtpl(s, [ #13,' ', #10,'' ]);\n  if length(result) > 30 then\n    begin\n    setlength(result, 29);\n    result:=result+'...';\n    end;\n  end; // reduce\n\n  function fileHint():string;\n  const\n    INHERITED_LABEL = ' [inherited]';\n    EXTERNAL_LABEL = ' [external]';\n  var\n    f, parent: Tfile;\n    s, s2: string;\n    inheritd, externl: boolean;\n\n    function flag(lbl:string; att:TfileAttribute; positive:boolean=TRUE):string;\n    begin result:=if_((att in f.flags) = positive, #13+lbl) end;\n\n    function flagR(lbl:string; att:TfileAttribute; positive:boolean=TRUE):string;\n    var\n      inh: boolean;\n    begin\n    result:=if_(f.hasRecursive(att, @inh), #13+lbl);\n    result:=result+if_(inh, INHERITED_LABEL);\n    end; // flagR\n\n    procedure perm(action:TfileAction; msg:string);\n    var\n      s: string;\n    begin\n    s:=join(', ', f.getAccountsFor(action, TRUE, @inheritd));\n    if (s > '') and inheritd then s:=s+INHERITED_LABEL;\n    if s > '' then result:=result+#13+msg+': '+s;\n    end;\n\n  begin\n  result:=if_(HintsfornewcomersChk.checked,'Drag your files here');\n  f:=pointedFile();\n  if f = NIL then exit;\n  parent:=f.parent;\n\n  result:='URL: '+f.url()\n    +if_(f.isRealFolder() or f.isFile(), #13'Path: '+f.resource);\n  if f.isFile() then\n    result:=result+format(#13'Size: %s'#13'Downloads: %d',\n      [ smartsize(sizeofFile(f.resource)), f.DLcount ]);\n\n  s:=flagR('Invisible', FA_HIDDENTREE, TRUE);\n  if s = '' then s:=flag('Invisible', FA_HIDDEN);\n  result:=result+s\n    +flag('Download forbidden', FA_DL_FORBIDDEN)\n    +flagR('Don''t log', FA_DONT_LOG);\n\n  if f.isFolder() then\n    begin\n    if assigned(parent) and parent.hasRecursive(FA_HIDE_EMPTY_FOLDERS) then\n        result:=result+#13'Hidden if empty'+INHERITED_LABEL;\n\n    result:=result\n      +flag('Not browsable', FA_BROWSABLE, FALSE)\n      +flag('Hide empty folders', FA_HIDE_EMPTY_FOLDERS)\n      +flagR('Hide extention', FA_HIDE_EXT)\n      +flagR('Archivable', FA_ARCHIVABLE)\n    end;\n\n  s:=f.getRecursiveFileMask();\n  if (s > '') and (f.defaultFileMask = '') then s:=s+INHERITED_LABEL;\n  if s > '' then result:=result+#13'Default file mask: '+s;\n\n  perm(FA_ACCESS, 'Access for');\n  if f.isRealFolder() then perm(FA_UPLOAD, 'Upload allowed for');\n  perm(FA_DELETE, 'Delete allowed for');\n\n  s:=reduce(f.getDynamicComment());\n  if (s > '') and (f.comment = '') then s:=s+EXTERNAL_LABEL;\n  if s > '' then result:=result+#13'Comment: '+s;\n\n  s:=reduce(f.getShownRealm());\n  if (s > '') and (f.realm = '') then s:=s+INHERITED_LABEL;\n  if s > '' then result:=result+#13'Realm: '+s;\n\n  s:=reduce(f.getRecursiveDiffTplAsStr(@inheritd, @externl));\n  if s > '' then\n    begin\n    if inheritd then s:=s+INHERITED_LABEL;\n    if externl then s:=s+EXTERNAL_LABEL;\n    result:=result+#13'Diff template: '+s;\n    end;\n\n  f.getFiltersRecursively(s, s2);\n  result:=result\n    +if_(s>'', #13'Files filter: '+s\n      +if_(f.filesFilter = '', INHERITED_LABEL))\n    +if_(s2>'', #13'Folders filter: '+s2\n      +if_(f.foldersFilter = '', INHERITED_LABEL))\n    +if_(f.uploadFilterMask>'', #13'Upload filter: '+f.uploadFilterMask)\n    +flag('Don''t consider as download', FA_DONT_COUNT_AS_DL)\n    +if_(f.dontCountAsDownloadMask>'',\n      #13'Don''t consider as download (mask): '+f.dontCountAsDownloadMask)\n  end; // filehint\n\n  function connHint():string;\n  var\n    cd: TconnData;\n  begin\n  cd:=pointedConnection();\n  result:=if_(HintsForNewcomersChk.checked, 'This box shows info about current connections');\n  if cd = NIL then exit;\n  result:='Connection time: '+dateTimeToStr(cd.time)\n    +#13'Last request time: '+dateTimeToStr(cd.requestTime)\n    +#13'Agent: '+first(cd.agent,'<unknown>');\n  end;\n\nbegin\nif hintinfo.HintControl = filesBox then\n  begin\n  hintinfo.ReshowTimeout:=800;\n  hintStr:=filehint();\n  end;\nif hintinfo.HintControl = connBox then\n  begin\n  hintinfo.ReshowTimeout:=800;\n  hintStr:=connHint();\n  end;\n\nif not hintsForNewcomersChk.checked\nand ((hintinfo.hintcontrol = modeBtn)\n  or (hintinfo.hintcontrol = menuBtn)\n  or (hintinfo.hintcontrol = graphBox))\nthen hintStr:='';\nhintStr:=chop(#0, hintStr); // info past null char are used for extra data storing\ncanShow:=hintstr > '';\nend;\n\nprocedure TmainFrm.logmenuPopup(Sender: TObject);\nbegin\nReadonly1.Checked:=logBox.ReadOnly;\nReadonly1.visible:=not easyMode;\nBanthisaddress1.visible:= logBox.selAttributes.color=ADDRESS_COLOR;\nAddress2name1.visible:=not easyMode;\nLogfile1.visible:=not easyMode;\nlogOnVideoChk.visible:=not easyMode;\nDonotlogaddress1.visible:=not easyMode;\nClearandresettotals1.visible:=not easyMode;\nAddresseseverconnected1.visible:=not easyMode;\nMaxlinesonscreen1.visible:=not easyMode;\nDontlogsomefiles1.visible:=not easyMode;\nApachelogfileformat1.visible:=not easyMode and (logfile.filename>'');\ntabOnLogFileChk.Visible:=not easyMode and (logfile.filename>'');\nend;\n\nfunction Tmainfrm.searchLog(dir:integer):boolean;\nvar\n  t, s: string;\n  i, l, tl, from, n: integer;\nbegin\ntimeTookToSearchLog:=now();\ntry\n  result:=TRUE;\n  from:=logBox.SelStart+1;\n  t:=ansiLowerCase(logBox.text);\n  s:=ansiLowerCase(logSearchBox.text);\n  if s = '' then exit;\n  result:=FALSE;\n  if t = '' then exit;\n  tl:=length(t);\n  // if we are typing (dir=0) then before search forward, see if we can extend the current selection\n  if dir <> 0 then l:=0\n  else l:=match(pchar(s), @t[from], FALSE, [#13,#10]);\n  if l > 0 then\n    i:=from\n  // if he doesn't use wildcards, use posEx(), it should be much faster on a long text\n  else if pos('?',s)+pos('*',s) = 0 then\n    begin\n    if dir <= 0 then\n      begin\n      s:=reverseString(s);\n      t:=reverseString(t);\n      from:=tl-from+1;\n      end;\n    i:=posEx(s, t, from+1);\n    if i = 0 then i:=pos(s, t);\n    if i = 0 then exit;\n    l:=length(s);\n    if dir <= 0 then i:=tl-i-l+2;\n    end\n  else // it's using wildcards, so use match(), but don't allow matching across different lines, or a search with a * may take forever\n    begin\n    if dir = 0 then dir:=-1;\n    inc(from, dir);\n    i:=from+dir;\n    n:=0;\n    s:=trim2(s, ['*',' ']);\n      repeat\n      l:=match(pchar(s), @t[i], FALSE, [#13,#10]);\n      if l > 0 then break;\n      inc(i, dir);\n      inc(n);\n      if n >= tl then exit;\n      if i > tl then i:=1;\n      if i = 0 then i:=tl;\n      until false;\n    end;\n  logBox.SelStart:=i-1;\n  logBox.SelLength:=l;\n  result:=TRUE;\nfinally timeTookToSearchLog:=now()-timeTookToSearchLog end;\nend;\n\nprocedure TmainFrm.logSearchBoxChange(Sender: TObject);\nbegin\n// from when he stopped typing, wait twice the time of a searching, but max 2 seconds\nsearchLogTime:=now()+min(timeTookToSearchLog*2, 2/SECONDS);\nopenFilteredLog.Enabled:=logSearchBox.Text > '';\nend;\n\nprocedure TmainFrm.logSearchBoxKeyPress(Sender: TObject; var Key: Char);\nbegin\nif key = #13 then\n  begin\n  searchLog(-1);\n  key:=#0;\n  end;\nend;\n\nprocedure TmainFrm.logUpDownClick(Sender: TObject; Button: TUDBtnType);\nbegin searchLog(if_(button = btNext, -1, +1)) end;\n\nprocedure TmainFrm.Readonly1Click(Sender: TObject);\nbegin with logBox do ReadOnly:=not ReadOnly end;\n\nprocedure TmainFrm.Clear1Click(Sender: TObject);\nbegin logBox.Clear() end;\n\nprocedure TmainFrm.Clearandresettotals1Click(Sender: TObject);\nbegin\nlogBox.clear();\nresetTotals();\nend;\n\nprocedure TmainFrm.Copy1Click(Sender: TObject);\nbegin\nif logBox.SelLength > 0 then setClip(logBox.SelText)\nelse setClip(logBox.Text)\nend;\n\nprocedure TmainFrm.Saveas1Click(Sender: TObject);\nvar\n  fn: string;\nbegin\nfn:='';\nif PromptForFileName(fn, 'Text file|*.txt', 'txt', 'Save log', '', TRUE) then\n  saveTextFile(fn, logBox.text);\nend;\n\nprocedure TmainFrm.Save1Click(Sender: TObject);\nbegin saveTextfile('hfs.log', logBox.text) end;\n\nprocedure deleteCFG();\nbegin\ndeleteFile(lastUpdateCheckFN);\ndeleteFile(cfgPath+CFG_FILE);\ndeleteRegistry(CFG_KEY);\ndeleteRegistry(CFG_KEY, HKEY_LOCAL_MACHINE);\nend; // deleteCFG\n\nprocedure TmainFrm.Clearoptionsandquit1click(Sender: TObject);\nbegin\ndeleteCFG();\nautoSaveOptionsChk.Checked:=FALSE;\nclose();\nend;\n\nprocedure TmainFrm.collapseBtnClick(Sender: TObject);\nbegin setLogToolbar(FALSE) end;\n\nfunction ListView_GetSubItemRect(lv:TlistView; iItem, iSubItem: Integer):Trect;\nconst\n  LVM_FIRST               = $1000;      { ListView messages }\n  LVM_GETSUBITEMRECT      = LVM_FIRST + 56;\nbegin\nresult.top:=iSubItem;\nresult.left:=0;\nif sendMessage(lv.handle, LVM_GETSUBITEMRECT, iItem, Longint(@result)) = 0 then\n  result.Top:=-1\nend;\n\nprocedure TmainFrm.connBoxAdvancedCustomDrawSubItem(Sender: TCustomListView;\n  Item: TListItem; SubItem: Integer; State: TCustomDrawState;\n  Stage: TCustomDrawStage; var DefaultDraw: Boolean);\nvar\n  r: Trect;\n  cnv: Tcanvas;\n\n  procedure textCenter(s:string);\n  var\n    i: integer;\n  begin\n  i:=((r.bottom-r.top)-cnv.textHeight(s)) div 2; // vertical margin, to center vertically\n  inc(r.top, i);\n  drawCentered(cnv,r,s);\n  dec(r.top, i);\n  end; // textCentered\n\n  procedure drawProgress(now,total,lowerbound,upperbound:int64);\n  var\n    d: real;\n    selected: boolean;\n    r1: Trect;\n    x: integer;\n    colors:array [boolean] of Tcolor;\n  begin\n  if (total <= 0) or (lowerbound >= upperbound) then exit;\n  colors[false]:=clWindow;\n  colors[true]:=blend(clWindow, clWindowText, 0.25);\n  selected:=cdsSelected in state;\n  r1:=rect(r.Left+1,r.Top+1,r.Right-1,r.Bottom-1);\n  // paint a shadow for non requested piece of data\n  cnv.brush.Color:=blend(clWindow, clHotLight, 0.30);\n  cnv.Brush.Style:=bsSolid;\n  cnv.FillRect(r1);\n  // and shrink the rectangle\n  x:=r1.Right-r1.Left;\n  cnv.pen.color:=colors[selected];\n  cnv.pen.Style:=psSolid;\n  if lowerbound > 0 then\n    begin\n    inc( r1.Left, round(x*lowerbound/total) );\n    cnv.MoveTo(r1.Left-1, r1.Top);\n    cnv.LineTo(r1.Left-1, r1.Bottom);\n    end;\n  if upperbound > 0 then dec( r1.Right, round(x*(total-upperbound)/total) );\n  // border + non filled part\n  cnv.brush.Color:=colors[not selected];\n  cnv.Brush.Style:=bsSolid;\n  cnv.FillRect(r1);\n  // filled part\n  d:=now / (upperbound-lowerbound);\n  if d > 1 then d:=1;\n  inc(r1.Left, 1+round(d*(r1.right-r1.Left-2)));\n  dec(r1.right); dec(r1.bottom); inc(r1.top);\n  cnv.brush.Color:=colors[selected];\n  if not IsRectEmpty(r1) then cnv.FillRect(r1);\n  // label\n  cnv.Font.Name:='Small Fonts';\n  cnv.font.Size:=7;\n  cnv.font.Color:=clWindowText;\n  SetBkMode(cnv.handle, TRANSPARENT);\n  inc(r.top);\n  textCenter(format('%d%%', [trunc(d*100)]));\n  end; // drawProgress\n\nvar\n  cd: TconnData;\nbegin\nif subItem <> 5 then exit;\ncd:=conn2data(item);\nif cd = NIL then exit;\ncnv:=connBox.canvas;\nr:=ListView_GetSubItemRect(connBox, item.index, subItem);\nif isSendingFile(cd) or (cd.conn.reply.bodyMode = RBM_STREAM) then\n  drawProgress( cd.conn.bytesSentLastItem, cd.conn.bytesFullBody, cd.conn.reply.firstByte, cd.conn.reply.lastByte )\nelse if isReceivingFile(cd) then\n  drawProgress( cd.conn.bytesPosted, cd.conn.post.length, 0, cd.conn.post.length);\nend;\n\nprocedure TmainFrm.connBoxData(Sender: TObject; Item: TListItem);\nconst\n  HCS2STR :array [ThttpConnState] of string = ('idle', 'requesting', 'receiving', 'thinking', 'replying', 'sending', 'disconnected');\nvar\n  data: TconnData;\n\n  function getFname():string;\n  begin\n  if isSendingFile(data) then result:=data.lastFN\n  else if isReceivingFile(data) then result:=data.uploadSrc\n  else result:='-'\n  end;\n\n  function getStatus():string;\n  begin\n  if isSendingFile(data) then\n    begin\n    if data.conn.paused then\n      result:='paused'\n    else\n      result:=format('%s / %s sent', [\n        dotted(data.conn.bytesSentLastItem),\n        dotted(data.conn.bytesPartial)\n      ]);\n    exit;\n    end;\n  if isReceivingFile(data) then\n    begin\n    result:=format('%s / %s received', [\n      dotted(data.conn.bytesPosted),\n      dotted(data.conn.post.length)\n    ]);\n    exit;\n    end;\n  result:=HCS2STR[data.conn.state]\n    +if_(data.conn.state = HCS_IDLE, ' '+intToStr(data.conn.requestCount))\n  end; // getStatus\n\n  function getSpeed():string;\n  var\n    d: real;\n  begin\n  case data.conn.state of\n    HCS_REPLYING_BODY: d:=data.conn.speedOut;\n    HCS_POSTING: d:=data.conn.speedIn;\n    else d:=data.averageSpeed;\n    end;\n  if d < 1 then result:='-'\n  else result:=format('%.1f KB/s',[d/1000])\n  end; // getSpeed\n\nvar\n  progress: real;\nbegin\nif quitting then exit;\nif item = NIL then exit;\ndata:=conn2data(item);\nif data = NIL then exit;\nitem.caption:=nonEmptyConcat('', data.user, '@')+data.address+':'+data.conn.port;\nwhile item.subitems.count < 5 do\n  item.subitems.add('');\n\nitem.imageIndex:=-1;\nprogress:=-1;\nif data.conn.state = HCS_DISCONNECTED then\n  item.imageIndex:=21\nelse if isSendingFile(data) then\n  begin\n  item.imageIndex:=32;\n  progress:= data.conn.bytesSentLastItem / data.conn.bytesPartial;\n  end\nelse if isReceivingFile(data) then\n  begin\n  item.imageIndex:=33;\n  progress:= data.conn.bytesPosted / data.conn.post.length;\n  end;\n\nitem.subItems[0]:=getFname();\nitem.subItems[1]:=getStatus();\nitem.subItems[2]:=getSpeed();\nitem.subItems[3]:=getETA(data);\nitem.subItems[4]:=if_(progress<0,'', format('%d%%', [trunc(progress*100)]));\nend;\n\nfunction TmainFrm.appEventsHelp(Command: Word; Data: Integer; var CallHelp: Boolean): Boolean;\nbegin\ncallHelp:=FALSE; // avoid exception to be thrown\nresult:=FALSE; \nend;\n\nprocedure TmainFrm.appEventsMinimize(Sender: TObject);\nbegin\nif not MinimizetotrayChk.Checked then exit;\nminimizeToTray();\nend;\n\nprocedure TmainFrm.appEventsRestore(Sender: TObject);\nbegin\ntrayed:=FALSE;\nif not showmaintrayiconChk.checked then tray.hide();\nend;\n\nprocedure Tmainfrm.trayEvent(sender:Tobject; ev:TtrayEvent);\nbegin\nupdateTrayTip();\nif userInteraction.disabled then exit;\ncase ev of\n  TE_RCLICK:\n    begin\n    setForegroundWindow(handle); // application.bringToFront() will act up when the window is minimized: the popped up menu will stay up forever  \n    with mouse.cursorPos do\n      menu.popup(x,y);\n    end;\n  TE_CLICK:\n    application.bringToFront();\n  TE_2CLICK:\n    begin\n    application.restore();\n    application.bringToFront();\n    end;\n  end;\nend; // trayEvent\n\nprocedure TmainFrm.trayiconforeachdownload1Click(Sender: TObject);\nbegin trayfordownloadChk.Checked:=FALSE end;\n\nprocedure Tmainfrm.downloadtrayEvent(sender:Tobject; ev:TtrayEvent);\nvar\n  i: integer;\nbegin\nif userInteraction.disabled then exit;\n\nfor i:=connBox.items.count-1 downto 0 do\n    if conn2data(i) = (sender as TmyTrayIcon).data then\n      connBox.itemIndex:=i;\n\ncase ev of\n  TE_CLICK,\n  TE_RCLICK:\n    try\n      fromTray:=TRUE;\n      with mouse.cursorPos do\n        connmenu.popup(x,y);\n    finally fromTray:=FALSE end;\n  TE_2CLICK:\n    begin\n    application.restore();\n    application.bringToFront();\n    connBox.setFocus();\n    end;\n  end;\nend; // downloadtrayEvent\n\nfunction Tmainfrm.getTrayTipMsg(tpl:string=''):string;\nbegin\nif quitting or (rootFile = NIL) then\n  begin\n  result:='';\n  exit;\n  end;\nresult:=xtpl(first(tpl, trayMsg), [\n  '%uptime%', uptimestr(),\n  '%url%', rootFile.fullURL(),\n  '%ip%', defaultIP,\n  '%port%', srv.port,\n  '%hits%', intToStr(hitsLogged),\n  '%downloads%', intToStr(downloadsLogged),\n  '%uploads%', intToStr(uploadsLogged),\n  '%version%', VERSION,\n  '%build%', VERSION_BUILD\n]);\nend; // getTrayTipMsg\n\nprocedure Tmainfrm.updateTrayTip();\nbegin tray.setTip(getTrayTipMsg()) end;\n\nprocedure TmainFrm.Restore1Click(Sender: TObject);\nbegin\napplication.Restore();\napplication.bringToFront();\nend;\n\nprocedure TmainFrm.restoreCfgBtnClick(Sender: TObject);\nbegin\nsetCfg(backuppedCfg);\nbackuppedCfg:='';\nrestoreCfgBtn.hide();\neventScriptsLast:=0;\nresetOptions1.Enabled:=TRUE;\nend;\n\nprocedure TmainFrm.Restoredefault1Click(Sender: TObject);\nbegin\nif msgDlg('Continue?', MB_ICONQUESTION+MB_YESNO) = MRNO then exit;\ntplFilename:='';\ntplLast:=-1;\ntplImport:=TRUE;\nsetStatusBarText('The template has been reset');\nend;\n\nprocedure TmainFrm.Reverttopreviousversion1Click(Sender: TObject);\nconst\n  FN = 'revert.bat';\n  REVERT_BATCH = 'START %0:s /WAIT \"%1:s\" -q'+CRLF\n    +'ping 127.0.0.1 -n 3 -w 1000> nul'+CRLF\n    +'DEL \"%1:s\"'+CRLF\n    +'MOVE \"%2:s'+PREVIOUS_VERSION+'\" \"%1:s\"'+CRLF\n    +'START %0:s \"%1:s\"'+CRLF\n    +'DEL %%0'+CRLF;\nbegin\ntry\n  progFrm.show('Processing...');\n  saveTextFile(FN, format(REVERT_BATCH, [\n    if_(isNT(), '\"\"'),\n    paramStr(0),\n    exePath\n  ]));\n  execNew(FN);\nfinally progFrm.hide() end;\n\nend;\n\nprocedure TmainFrm.Numberofcurrentconnections1Click(Sender: TObject);\nbegin setTrayShows('connections') end;\n\nprocedure TmainFrm.NumberofdifferentIPaddresses1Click(Sender: TObject);\nbegin setTrayShows('ips') end;\n\nprocedure TmainFrm.NumberofdifferentIPaddresseseverconnected1Click(\n  Sender: TObject);\nbegin setTrayShows('ips-ever') end;\n\nprocedure TmainFrm.Numberofloggeddownloads1Click(Sender: TObject);\nbegin setTrayShows('downloads') end;\n\nprocedure TmainFrm.Numberofloggedhits1Click(Sender: TObject);\nbegin setTrayShows('hits') end;\n\nprocedure Tmainfrm.setTrayShows(s:string);\nbegin\ntrayShows:=s;\nrepainttray();\nend; // setTrayShows\n\nprocedure TmainFrm.Exit1Click(Sender: TObject);\nbegin close() end;\n\nprocedure TmainFrm.Extension1Click(Sender: TObject);\nbegin defSorting:='ext' end;\n\nprocedure TmainFrm.onDownloadChkClick(Sender: TObject);\nbegin flashOn:='download' end;\n\nprocedure TmainFrm.onconnectionChkClick(Sender: TObject);\nbegin flashOn:='connection' end;\n\nprocedure TmainFrm.never1Click(Sender: TObject);\nbegin flashOn:='' end;\n\nprocedure Tmainfrm.addTray();\nbegin\nrepaintTray();\ntray.show();\nend; // addTray\n\nprocedure TmainFrm.Allowedreferer1Click(Sender: TObject);\nresourcestring\n  MSG = 'Leave empty to disable this feature.'\n    +#13'Here you can specify a mask.'\n    +#13'When a file is requested, if the mask doesn''t match the \"Referer\" HTTP field, the request is rejected.';\nbegin\ninputQuery('Allowed referer', MSG, allowedReferer)\nend;\n\n// addtray\n\nprocedure TmainFrm.FormShow(Sender: TObject);\nbegin\nif trayed then showWindow(application.handle, SW_HIDE);\nupdateTrayTip();\nconnBox.DoubleBuffered:=true;\nend;\n\nprocedure TmainFrm.filesBoxDragOver(Sender, Source: TObject; X, Y: Integer;\n  State: TDragState; var Accept: Boolean);\nconst\n  THRESHOLD = 10;\nvar\n  src, dst: Tfile;\n  i: integer;\nbegin\nscrollFilesBox:=-1;\nif y < THRESHOLD then scrollFilesBox:=SB_LINEUP;\nif filesBox.Height-y < THRESHOLD then scrollFilesBox:=SB_LINEDOWN;\n\naccept:=FALSE;\nif sender <> source then exit; // only move files within filesBox\ndst:=pointedFile(FALSE);\nif assigned(dst) and not dst.isFolder() then dst:=dst.parent;\nif dst = NIL then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  with nodeToFile(filesbox.selections[i]) do\n    if isRoot() or isLocked() then exit;\nsrc:=selectedFile;\naccept:=(dst <> src.parent) and (dst <> src);\nend;\n\nprocedure TmainFrm.filesBoxDragDrop(Sender, Source: TObject; X,Y: Integer);\nvar\n  dst: Ttreenode;\n  i, bak: integer;\n  nodes: array of Ttreenode;\nbegin\nif selectedFile = NIL then exit;\nVFSmodified:=TRUE;\ndst:=filesBox.dropTarget;\nif not nodeToFile(dst).isFolder() then dst:=dst.parent;\n// copy list of selected nodes\nsetlength(nodes, filesBox.SelectionCount);\nfor i:=0 to filesBox.SelectionCount-1 do nodes[i]:=filesbox.selections[i];\n// check for namesakes\nfor i:=0 to length(nodes)-1 do\n  if existsNodeWithName(nodes[i].Text, dst) then\n    if msgDlg(MSG_SAME_NAME, MB_ICONWARNING+MB_YESNO) = IDYES then break\n    else exit;\n// move'em\nfor i:=0 to length(nodes)-1 do\n  begin\n  // removing and restoring stateIndex is a workaround to a delphi bug\n  bak:=nodes[i].stateIndex;\n  nodes[i].stateIndex:=0;\n  nodes[i].moveTo(dst, naAddChild);\n  nodes[i].stateIndex:=bak;\n  end;\nfilesBox.refresh();\ndst.alphaSort(FALSE);\nend;\n\nprocedure TmainFrm.refreshConn(conn:TconnData);\nvar\n  r: Trect;\n  i: integer;\nbegin\nif quitting then exit;\n\nfor i:=0 to connBox.items.count-1 do\n  if conn2data(i) = conn then\n    begin\n    connBoxData(connBox, connBox.items[i]);\n    r:=connBox.items[i].displayRect(drBounds);\n    invalidateRect(connBox.handle, @r, TRUE);\n    break;\n    end;\n//updateSbar();   // this was causing too many refreshes on fast connections\nend; // refreshConn\n\nconst\n  // IDs used for file chunks\n  FK_HEAD = 0;\n  FK_RESOURCE = 1;\n  FK_NAME = 2;\n  FK_FLAGS = 3;\n  FK_NODE = 4;\n  FK_FORMAT_VER = 5;\n  FK_CRC = 6;\n  FK_COMMENT = 7;\n  FK_USERPWD = 8;\n  FK_USERPWD_UTF8 = 108;\n  FK_ADDEDTIME = 9;\n  FK_DLCOUNT = 10;\n  FK_ROOT = 11;\n  FK_ACCOUNTS = 12;\n  FK_FILESFILTER = 13;\n  FK_FOLDERSFILTER = 14;\n  FK_ICON_GIF = 15;\n  FK_REALM = 16;\n  FK_UPLOADACCOUNTS = 17;\n  FK_DEFAULTMASK = 18;\n  FK_DONTCOUNTASDOWNLOADMASK = 19;\n  FK_AUTOUPDATED_FILES = 20;\n  FK_DONTCOUNTASDOWNLOAD = 21;\n  FK_HFS_VER = 22;\n  FK_HFS_BUILD = 23;\n  FK_COMPRESSED_ZLIB = 24;\n  FK_DIFF_TPL = 25;\n  FK_UPLOADFILTER = 26;\n  FK_DELETEACCOUNTS = 27;\n\nfunction Tmainfrm.getVFS(node:Ttreenode=NIL):ansistring;\n\n  function getAutoupdatedFiles():ansistring;\n  var\n    i: integer;\n    fn: string;\n  begin\n  result:='';\n  i:=0;\n  while i < autoupdatedFiles.Count do\n    begin\n    fn:=autoupdatedFiles[i];\n    result:=result+TLV(FK_NODE, TLV(FK_NAME, fn)\n      + TLV(FK_DLCOUNT, str_(autoupdatedFiles.getInt(fn))) );\n    inc(i);\n    end;\n  end; // getAutoupdatedFiles\n\nvar\n  i: integer;\n  f: Tfile;\n  commonFields, s: ansistring;\nbegin\nif node = NIL then node:=rootNode;\nif node = NIL then exit;\nf:=nodeToFile(node);\ncommonFields:=TLV(FK_FLAGS, str_(f.flags))\n    +TLV_NOT_EMPTY(FK_RESOURCE, f.resource)\n    +TLV_NOT_EMPTY(FK_COMMENT, f.comment)\n    +if_(f.user>'', TLV(FK_USERPWD_UTF8, b64utf8(f.user+':'+f.pwd)))\n    +TLV_NOT_EMPTY(FK_ACCOUNTS, join(';',f.accounts[FA_ACCESS]) )\n    +TLV_NOT_EMPTY(FK_UPLOADACCOUNTS, join(';',f.accounts[FA_UPLOAD]))\n    +TLV_NOT_EMPTY(FK_DELETEACCOUNTS, join(';',f.accounts[FA_DELETE]))\n    +TLV_NOT_EMPTY(FK_FILESFILTER, f.filesfilter)\n    +TLV_NOT_EMPTY(FK_FOLDERSFILTER, f.foldersfilter)\n    +TLV_NOT_EMPTY(FK_REALM, f.realm)\n    +TLV_NOT_EMPTY(FK_DEFAULTMASK, f.defaultFileMask)\n    +TLV_NOT_EMPTY(FK_UPLOADFILTER, f.uploadFilterMask)\n    +TLV_NOT_EMPTY(FK_DONTCOUNTASDOWNLOADMASK, f.dontCountAsDownloadMask)\n    +TLV_NOT_EMPTY(FK_DIFF_TPL, f.diffTpl);\n\nresult:='';\nif f.isRoot() then\n\tresult:=result+TLV(FK_ROOT, commonFields );\nfor i:=0 to node.Count-1 do\n  result:=result+getVFS(node.item[i]); // recursion\nif f.isRoot() then\n  begin\n  result:=result+TLV_NOT_EMPTY(FK_AUTOUPDATED_FILES, getAutoupdatedFiles() );\n  exit;\n  end;\nif not f.isFile() then s:=''\nelse s:=TLV(FK_DLCOUNT, str_(f.DLcount)); // called on a folder would be recursive\n\n// for non-root nodes, subnodes must be calculated first, so to be encapsulated\nresult:=TLV(FK_NODE, commonFields\n  +TLV_NOT_EMPTY(FK_NAME, f.name)\n  +TLV(FK_ADDEDTIME, str_(f.atime))\n  +TLV_NOT_EMPTY(FK_ICON_GIF, pic2str(f.icon))\n  +s\n  +result // subnodes\n);\nend; // getVFS\n\nprocedure Tmainfrm.setVFS(vfs:ansistring; node:Ttreenode=NIL);\nresourcestring\n  MSG_BETTERSTOP = #13'Going on may lead to problems.'\n    +#13'It is adviced to stop loading.'\n    +#13'Stop?';\n  MSG_BADCRC = 'This file is corrupted (CRC).';\n  MSG_NEWER='This file has been created with a newer and incompatible version.';\n  MSG_ZLIB = 'This file is corrupted (ZLIB).';\n  MSG_BAKAVAILABLE = 'This file is corrupted but a backup is available.'#13'Continue with backup?';\n\nvar\n  data: ansistring;\n  s: string;\n  f: Tfile;\n  after: record\n    resetLetBrowse: boolean;\n    end;\n  act: TfileACtion;\n  tlv: Ttlv;\n\n  procedure parseAutoupdatedFiles(data:ansistring);\n  var\n    s, fn: string;\n    raw: ansiString;\n  begin\n  autoupdatedFiles.Clear();\n  tlv.down();\n  while tlv.pop(s,raw) = FK_NODE do\n    begin\n    tlv.down();\n    while not tlv.isOver() do\n      case tlv.pop(s,raw) of\n        FK_NAME: fn:=s;\n        FK_DLCOUNT: autoupdatedFiles.setInt(fn, int_(raw));\n        end;\n    tlv.up();\n    end;\n  tlv.up();\n  end; // parseAutoupdatedFiles\n\nbegin\nif vfs = '' then exit;\nif node = NIL then // this is supposed to be always true when loading a vfs, and never recurring\n  begin\n  node:=rootNode;\n  uploadPaths:=NIL;\n  usersInVFS.reset();\n  if isAnyMacroIn(vfs) then loadingVFS.macrosFound:=TRUE;\n  end;\nfillchar(after, sizeof(after), 0);\nnode.DeleteChildren();\nf:=Tfile(node.data);\nf.node:=node;\ntlv:=Ttlv.create;\ntlv.parse(vfs);\nwhile not tlv.isOver() do\n  case tlv.pop(s,data) of\n    FK_ROOT:\n      begin\n      setVFS(data, rootNode );\n      if loadingVFS.build < '109' then\n        include(f.flags, FA_ARCHIVABLE);\n      end;\n    FK_NODE:\n      begin\n      if progFrm.cancelRequested then exit;\n      if progFrm.visible then\n        begin\n        progFrm.progress:= tlv.getPerc();\n        application.ProcessMessages();\n        end;\n      setVFS(data, addFile(Tfile.create(''), node, TRUE).node );\n      end;\n    FK_COMPRESSED_ZLIB:\n      { Explanation for the #0 workaround.\n      { I found an uncompressable vfs file, with ZDecompressStr2() raising an exception.\n      { In the end i found it was missing a trailing #0, maybe do to an incorrect handling of strings\n      { containing a trailing #0. Using a zlib wrapper there is some underlying C code.\n      { I was unable to reproduce the bug, but i found that correct data doesn't complain if i add an extra #0. }\n      try\n        data:=ZDecompressStr(data+#0);\n        if isAnyMacroIn(data) then\n          loadingVFS.macrosFound:=TRUE;\n        setVFS(data, node);\n      except msgDlg(MSG_ZLIB, MB_ICONERROR) end;\n    FK_FORMAT_VER:\n      begin\n      if length(data) < 4 then // early versions: '1.0', '1.1'\n        begin\n        loadingVFS.resetLetBrowse:=TRUE;\n        after.resetLetBrowse:=TRUE;\n        end;\n      if (int_(data) > CURRENT_VFS_FORMAT)\n      and (msgDlg(MSG_NEWER+MSG_BETTERSTOP, MB_ICONERROR+MB_YESNO) = IDYES) then\n        exit;\n      end;\n  \tFK_CRC:\n      if str_(getCRC(tlv.getTheRest())) <> data then\n        begin\n        if loadingVFS.bakAvailable then\n          if msgDlg(MSG_BAKAVAILABLE, MB_ICONWARNING+MB_YESNO) = IDYES then\n            begin\n            loadingVFS.useBackup:=TRUE;\n            exit;\n            end;\n        if msgDlg(MSG_BADCRC+MSG_BETTERSTOP,MB_ICONERROR+MB_YESNO) = IDYES then\n        \texit;\n        end;\n    FK_RESOURCE: f.resource:=s;\n    FK_NAME:\n      begin\n      f.name:=s;\n      node.text:=s;\n      end;\n    FK_FLAGS: move(data[1], f.flags, length(data));\n  \tFK_ADDEDTIME: f.atime:=dt_(data);\n    FK_COMMENT: f.comment:=s;\n    FK_USERPWD:\n    \tbegin\n      data:=base64decode(data);\n      f.user:=chop(':',data);\n      f.pwd:=data;\n      usersInVFS.track(f.user, f.pwd);\n      end;\n    FK_USERPWD_UTF8:\n    \tbegin\n      s:=decodeB64utf8(data);\n      f.user:=chop(':',s);\n      f.pwd:=s;\n      usersInVFS.track(f.user, f.pwd);\n      end;\n    FK_DLCOUNT: f.DLcount:=int_(data);\n    FK_ACCOUNTS: f.accounts[FA_ACCESS]:=split(';',s);\n    FK_UPLOADACCOUNTS: f.accounts[FA_UPLOAD]:=split(';',s);\n    FK_DELETEACCOUNTS: f.accounts[FA_DELETE]:=split(';',s);\n    FK_FILESFILTER: f.filesfilter:=s;\n    FK_FOLDERSFILTER: f.foldersfilter:=s;\n    FK_UPLOADFILTER: f.uploadFilterMask:=s;\n    FK_REALM: f.realm:=s;\n    FK_DEFAULTMASK: f.defaultFileMask:=s;\n    FK_DIFF_TPL: f.diffTpl:=s;\n    FK_DONTCOUNTASDOWNLOADMASK: f.dontCountAsDownloadMask:=s;\n    FK_DONTCOUNTASDOWNLOAD: if boolean(data[1]) then include(f.flags, FA_DONT_COUNT_AS_DL);  // legacy, now moved into flags\n    FK_ICON_GIF: if data > '' then f.setupImage(str2pic(data));\n    FK_AUTOUPDATED_FILES: parseAutoupdatedFiles(data);\n    FK_HFS_BUILD: loadingVFS.build:=data;\n    FK_HEAD, FK_HFS_VER: ; // recognize these fields, but do nothing\n    else loadingVFS.unkFK:=TRUE;\n    end;\nfreeAndNIL(tlv);\n// legacy: in build #213 special usernames renamed for uniformity, and usernames are now sorted for faster access\nfor act:=low(act) to high(act) do\n  if loadingVFS.build < '213' then\n    begin\n    replaceString(f.accounts[act], '*', USER_ANYONE);\n    replaceString(f.accounts[act], '*+', USER_ANY_ACCOUNT);\n    uniqueStrings(f.accounts[act]);\n    sortArray(f.accounts[act]);\n    // for a little time, we tried to replace anyone with any+anon. it was a failed and had to revert.\n    if stringExists(loadingVFS.build, ['211','212'])\n    and stringExists(USER_ANY_ACCOUNT, f.accounts[act])\n    and stringExists(USER_ANONYMOUS, f.accounts[act]) then\n      begin\n      removeString(USER_ANY_ACCOUNT, f.accounts[act]);\n      replaceString(f.accounts[act], USER_ANONYMOUS, USER_ANYONE);\n      end;\n    end;\n\nif FA_VIS_ONLY_ANON in f.flags then\n  loadingVFS.visOnlyAnon:=TRUE;\nif f.isVirtualFolder() or f.isLink() then\n  f.mtime:=f.atime;\nif assigned(f.accounts[FA_UPLOAD]) and (f.resource > '') then\n  addString(f.resource, uploadPaths);\nf.setupImage();\nif after.resetLetBrowse then\n  f.recursiveApply(setBrowsable, integer(FA_BROWSABLE in f.flags));\nend; // setVFS\n\nfunction addVFSheader(vfsdata:ansistring):ansistring;\nbegin\nif length(vfsdata) > COMPRESSION_THRESHOLD then\n  vfsdata:=TLV(FK_COMPRESSED_ZLIB,\n    ZcompressStr(vfsdata, clFastest) );\nresult:= TLV(FK_HEAD, VFS_FILE_IDENTIFIER)\n  +TLV(FK_FORMAT_VER, str_(CURRENT_VFS_FORMAT))\n  +TLV(FK_HFS_VER, VERSION)\n  +TLV(FK_HFS_BUILD, VERSION_BUILD)\n  +TLV(FK_CRC, str_(getCRC(vfsdata)));  // CRC must always be right before data\nresult:=result+vfsdata\nend; // addVFSheader\n\nprocedure TmainFrm.Savefilesystem1Click(Sender: TObject);\nbegin saveVFS() end;\n\nprocedure TmainFrm.filesBoxDeletion(Sender: TObject; Node: TTreeNode);\nvar\n  f: Tfile;\nbegin\nf:=node.data;\nnode.data:=NIL;\n// the test on uploadPaths may save some function call\nif assigned(f.accounts[FA_UPLOAD]) and assigned(uploadPaths) then\n  removeString(f.resource, uploadPaths);\ntry f.free\nexcept\n  end;\nif node = rootNode then\n  rootNode:=NIL;\nVFSmodified:=TRUE\nend;\n\nfunction blockLoadSave():boolean;\nbegin\nresult:=addingItemsCounter > 0;\nif not result then exit;\nmsgDlg('Cannot load or save while adding files', MB_ICONERROR);\nend; // blockLoadSave\n\nprocedure TmainFrm.Loadfilesystem1Click(Sender: TObject);\nvar\n  fn: string;\nbegin\nif blockLoadSave() then exit;\nif not checkVfsOnQuit() then exit;\nfn:='';\nif promptForFileName(fn, 'VirtualFileSystem|*.vfs', 'vfs', 'Open VFS file') then\n  loadVFS(fn);\nend;\n\nprocedure drawGraphOn(cnv:Tcanvas; colors:TIntegerDynArray=NIL);\nvar\n  i, h, maxV: integer;\n  r: Trect;\n  top: double;\n  s: string;\n\n  procedure drawSample(sample:integer);\n  begin\n\tcnv.moveTo(r.left+i, r.bottom);\n  cnv.lineTo(r.Left+i, r.Bottom-1-sample*h div maxV);\n  end; // drawSample\n\n  function getColor(idx:integer; def:Tcolor):Tcolor;\n  begin\n  if (length(colors) <= idx) or (colors[idx] = Graphics.clDefault) then result:=def\n  else result:=colors[idx]\n  end; // getColor\n\nresourcestring\n  LIMIT = 'Limit';\n  TOP_SPEED = 'Top speed';\nbegin\nr:=cnv.cliprect;\n// clear\ncnv.brush.color:=getColor(0, clBlack);\ncnv.fillrect(r);\n// draw grid\ncnv.Pen.color:=getColor(1, rgb(0,0,120));\ni:=r.left;\nwhile i < r.right do\n  begin\n  cnv.moveTo(i, r.top);\n  cnv.LineTo(i, r.Bottom);\n  inc(i,10);\n  end;\ni:=r.bottom;\nwhile i > r.top do\n  begin\n  cnv.moveTo(r.left, i);\n  cnv.LineTo(r.right, i);\n  dec(i,10);\n  end;\n\nmaxV:=max(graph.maxV, 1);\nh:=r.bottom-r.top-1;\n// draw graph\ncnv.Pen.color:=getColor(2, clFuchsia);\nfor i:=0 to (r.Right-r.left)-1 do\tdrawSample(graph.samplesOut[i]);\ncnv.Pen.color:=getColor(3, clYellow);\nfor i:=0 to (r.Right-r.left)-1 do\tdrawSample(graph.samplesIn[i]);\n// text\ncnv.Font.Color:=getColor(4, clLtGray);\ncnv.Font.Name:='Small Fonts';\ncnv.font.size:=7;\nSetBkMode(cnv.handle, TRANSPARENT);\ntop:=(graph.maxV/1000)*safeDiv(10.0, graph.rate);\ns:=format(TOP_SPEED+': %.1f KB/s    ---    %d kbps', [top, round(top*8)]);\ncnv.TextOut(r.right-cnv.TextWidth(s)-20, 3, s);\nif assigned(globalLimiter) and (globalLimiter.maxSpeed < MAXINT) then\n  cnv.TextOut(r.right-180+25, 15, format(LIMIT+': %.1f KB/s', [globalLimiter.maxSpeed/1000]));\nend; // drawGraphOn\n\nprocedure TmainFrm.graphBoxPaint(Sender: TObject);\nvar\n  bmp: Tbitmap;\n  r: Trect;\nbegin\nif not graphBox.visible then exit;\nbmp:=Tbitmap.create();\nbmp.Width:=graphBox.Width;\nbmp.Height:=graphBox.Height;\nr:=bmp.canvas.ClipRect;\ndrawGraphOn(bmp.canvas);\ngraphBox.canvas.CopyRect(r,bmp.canvas,r);\nbmp.free;\nend;\n\nfunction Tmainfrm.getGraphPic(cd:TconnData=NIL):ansistring;\nvar\n  bmp: Tbitmap;\n  refresh: ansistring;\n  i: integer;\n  colors: TIntegerDynArray;\n  options: string;\n\n  procedure addColor(c:Tcolor);\n  var\n    n: integer;\n  begin\n  n:=length(colors);\n  setLength(colors, n+1);\n  colors[n]:=c;\n  end; // addColor\n\nbegin\noptions:=copy(decodeURL(cd.conn.request.url), 12, MAXINT);\ndelete(options, pos('?',options), MAXINT);\nbmp:=Tbitmap.create();\nbmp.Width:=graphBox.Width;\nbmp.Height:=graphBox.Height;\ncolors:=NIL;\nif options = '' then\n  begin\n  // here is an initial support for ?parameters. colors not supported yet.\n  try bmp.width:=strToInt(cd.urlvars.Values['w']) except end;\n  try bmp.height:=min(strToInt(cd.urlvars.Values['h']), 300000 div max(1,bmp.width)) except end;\n  refresh:=ansistring(cd.urlvars.Values['refresh']);\n  end\nelse\n  try\n    i:=strToInt(chop('x',options));\n    if (i > 0) and (i <= length(graph.samplesIn)) then bmp.Width:=i;\n    i:=strToInt(chop('x',options));\n    if (i > 0) and (i <= length(graph.samplesIn)) then\n      bmp.height:=min(i, 300000 div max(1,bmp.width));\n    refresh:=ansistring(chop('x',options));\n    for i:=1 to 5 do\n      addColor(stringToColorEx(chop('x',options), graphics.clDefault));\n  except\n    end;\ndrawGraphOn(bmp.canvas, colors);\nresult:=bmp2str(bmp);\nbmp.free;\nif cd = NIL then exit;\ncd.conn.addHeader('Cache-Control: no-cache');\nif refresh > '' then\n  cd.conn.addHeader('Refresh: '+refresh);\nend; // getGraphPic\n\nprocedure resendShortcut(mi:Tmenuitem; sc:Tshortcut);\nvar\n  i: integer;\nbegin\nif mi.shortcut = sc then mi.click();\nfor i:=0 to mi.count-1 do resendShortcut(mi.items[i], sc); \nend;\n\nprocedure TmainFrm.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);\nbegin\naltPressedForMenu:=(key = 18) and (shift = [ssAlt]);\nresendShortcut(menu.items, shortcut(key,shift));\nif shift = [] then\n  case key of\n    VK_F10: popupMainMenu();\n    end;\nend;\n\nprocedure TmainFrm.FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);\nbegin\nif altPressedForMenu and (key = 18) and (shift = []) then\n  popupMainMenu();\naltPressedForMenu:=FALSE\nend;\n\nprocedure TmainFrm.Officialwebsite1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/hfs/') end;\n\nprocedure TmainFrm.showmaintrayiconChkClick(Sender: TObject);\nbegin\nif showmaintrayiconChk.Checked then addTray()\nelse tray.hide();\nend;\n\nfunction Shell_GetImageLists(var hl,hs:Thandle):boolean; stdcall; external 'shell32.dll' index 71;\n\nfunction getSystemimages():TImageList;\nvar\n  hl, hs: Thandle;\nbegin\nresult:=NIL;\nif not Shell_GetImageLists(hl,hs) then exit;\nresult:=Timagelist.Create(NIL);\nresult.ShareImages:=TRUE;\nresult.handle:=hs;\nend; // loadSystemimages\n\nprocedure TmainFrm.expandBtnClick(Sender: TObject);\nbegin setLogToolbar(TRUE) end;\n\nprocedure TmainFrm.Speedlimit1Click(Sender: TObject);\nresourcestring\n  MSG_MAX_BW = 'Max bandwidth (KB/s).';\n  ZEROMSG = 'Zero is an effective limit.'#13'To disable instead, leave empty.';\n  LIMIT = 'Speed limit';\nvar\n  s: string;\nbegin\nif speedLimit < 0 then s:=''\nelse s:=floatToStr(speedLimit);\nif not inputquery(LIMIT, MSG_MAX_BW+#13+MSG_EMPTY_NO_LIMIT+#13, s) then\n  exit;\ntry\n  s:=trim(s);\n  if s = '' then setSpeedLimit(-1)\n  else setSpeedLimit(strToFloat(s));\n  if speedLimit = 0 then\n    msgDlg(ZEROMSG, MB_ICONWARNING);\n  // a manual set of speedlimit voids the pause command\n  Pausestreaming1.Checked:=FALSE;\nexcept msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\nend;\n\nprocedure TmainFrm.Speedlimitforsingleaddress1Click(Sender: TObject);\nresourcestring\n  MSG_MAX_BW_1 = 'Max bandwidth for single address (KB/s).';\n  LIMIT1 = 'Speed limit for single address';\nvar\n  s: string;\nbegin\nif speedLimitIP <= 0 then s:=''\nelse s:=floatToStr(speedLimitIP);\nif inputquery(LIMIT1, MSG_MAX_BW_1+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry\n  \ts:=trim(s);\n  \tif s = '' then setSpeedLimitIP(-1)\n    else setSpeedLimitIP(strToFloat(s));\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nprocedure Tmainfrm.setnoDownloadTimeout(v:integer);\nresourcestring\n  NODL = 'No downloads timeout: ';\nbegin\nif v < 0 then v:=0;\nif v <> noDownloadTimeout then lastActivityTime:=now();\nnoDownloadTimeout:=v;\nnoDownloadTimeout1.caption:=NODL+if_(v=0, DISABLED, intToStr(v) );\nend;\n\nprocedure Tmainfrm.setGraphRate(v:integer);\nresourcestring\n  MSG = 'Graph refresh rate: %d (tenths of second)';\nbegin\nif v < 1 then v:=1;\nif graph.rate = v then exit;\ngraph.rate:=v;\nGraphrefreshrate1.caption:=format(MSG, [v]);\n// changing rate invalidates previous data\nfillChar(graph.samplesOut, sizeof(graph.samplesOut), 0);\nfillChar(graph.samplesIn, sizeof(graph.samplesIn), 0);\ngraph.maxV:=0;\nend; // setGraphRate\n\nprocedure TmainFrm.Maxconnections1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous connections to serve.'\n    +#13'Most people don''t know this function well, and have problems. If you are unsure, please use the \"Max simultaneous downloads\".';\n  MSG2 = 'In this moment there are %d active connections';\nvar\n  s: string;\nbegin\nif maxConnections > 0 then s:=intToStr(maxConnections)\nelse s:='';\nif inputquery('Max connections', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxConnections(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif (maxConnections > 0) and (srv.conns.count > maxConnections) then\n  msgDlg(format(MSG2, [srv.conns.count]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.maxDLs1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous downloads.';\n  MSG2 = 'In this moment there are %d active downloads';\nvar\n  s: string;\n  i: integer;\nbegin\nif maxContempDLs > 0 then s:=intToStr(maxContempDLs)\nelse s:='';\nif inputquery('Max downloads', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxDLs(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxContempDLs = 0 then exit;\ni:=countDownloads();\nif i > maxContempDLs then\n  msgDlg(format(MSG2, [i]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.Maxconnectionsfromsingleaddress1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous connections to accept from a single IP address.'\n    +#13'Most people don''t know this function well, and have problems. If you are unsure, please use the \"Max simultaneous downloads from a single IP address\".';\nvar\n  s: string;\n  addresses: TStringDynArray;\n  i: integer;\nbegin\nif maxConnectionsIP > 0 then s:=intToStr(maxConnectionsIP)\nelse s:='';\nif inputquery('Max connections by IP', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxConnectionsIP(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxConnectionsIP = 0 then exit;\naddresses:=NIL;\nfor i:=0 to srv.conns.Count-1 do\n  with conn2data(i) do\n    if countConnectionsByIP(address) > maxConnectionsIP then\n      addUniqueString(address, addresses);\nif assigned(addresses) then\n  msgDlg(format(MSG_ADDRESSES_EXCEED,[join(#13, addresses)]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.MaxDLsIP1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous downloads from a single IP address.';\nvar\n  s: string;\n  addresses: TStringDynArray;\n  i: integer;\nbegin\nif maxContempDLsIP > 0 then s:=intToStr(maxContempDLsIP)\nelse s:='';\nif inputquery('Max downloads by IP', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxDLsIP(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxContempDLsIP = 0 then exit;\naddresses:=NIL;\nfor i:=0 to srv.conns.Count-1 do\n  with conn2data(i) do\n    if countDownloads(address) > maxContempDLsIP then\n      addUniqueString(address, addresses);\nif assigned(addresses) then\n  msgDlg(format(MSG_ADDRESSES_EXCEED,[join(#13, addresses)]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.Forum1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/forum/') end;\n\nprocedure TmainFrm.FAQ1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/sw/?faq=hfs') end;\n\nprocedure TmainFrm.License1Click(Sender: TObject);\nbegin openURL('https://www.gnu.org/licenses/gpl-3.0.html') end;\n\nprocedure Tmainfrm.pasteFiles();\nbegin\n// try twice\ntry addDropFiles(clipboard.GetAsHandle(CF_HDROP), filesBox.selected)\nexcept\n  try addDropFiles(clipboard.GetAsHandle(CF_HDROP), filesBox.selected)\n  except on e:Exception do\n    msgDlg(e.message, MB_ICONERROR);\n    end\n  end;\nend;\n\nprocedure TmainFrm.Paste1Click(Sender: TObject);\nbegin pasteFiles() end;\n\nprocedure TmainFrm.Addfiles1Click(Sender: TObject);\nvar\n  dlg: TopenDialog;\n  i: integer;\nbegin\ndlg:=TopenDialog.create(self);\nif sysutils.directoryExists(lastDialogFolder) then\n  dlg.InitialDir:=lastDialogFolder;\ndlg.Options:=dlg.Options+[ofAllowMultiSelect, ofFileMustExist, ofPathMustExist];\nif dlg.Execute() then\n  begin\n\tfor i:=0 to dlg.files.count-1 do\n    addFile(Tfile.create(dlg.files[i]), filesBox.Selected, dlg.Files.count<>1 );\n  lastDialogFolder:=extractFilePath(dlg.fileName);\n  end;\ndlg.free;\nend;\n\nprocedure TmainFrm.Addfolder1Click(Sender: TObject);\nbegin\nif selectFolder('', lastDialogFolder) then\n  begin\n  addFilesFromString(lastDialogFolder, filesBox.selected);\n  end;\nend;\n\nprocedure TmainFrm.graphSplitterMoved(Sender: TObject);\nbegin graph.size:=graphBox.height end;\n\nprocedure TmainFrm.Graphrefreshrate1Click(Sender: TObject);\nvar\n  s: string;\nbegin\ns:=intToStr(graph.rate);\nif inputquery('Graph refresh rate', 'Tenths of second',s) then\n\ttry\n  \ts:=trim(s);\n  \tif s = '' then setGraphRate(10)\n    else setGraphRate(strToInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nprocedure TmainFrm.Pausestreaming1Click(Sender: TObject);\nbegin\nif pausestreaming1.checked then globalLimiter.maxSpeed:=0\nelse setSpeedLimit(speedLimit)\nend;\n\nprocedure TmainFrm.Comment1Click(Sender: TObject);\nvar\n  i: integer;\nbegin\nif selectedFile = NIL then exit;\ninputComment(selectedFile);\nfor i:=0 to filesBox.SelectionCount-1 do\n  nodeToFile(filesBox.Selections[i]).comment:=selectedFile.comment;\nend;\n\nprocedure TmainFrm.filesBoxCustomDrawItem(Sender: TCustomTreeView;\n  Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);\nvar\n  f: Tfile;\n  a: TStringDynArray;\n  onlyAnon: boolean;\nbegin\nif not sender.visible then exit;\nf:=Tfile(node.data);\nif f = NIL then exit;\nif f.hasRecursive([FA_HIDDEN, FA_HIDDENTREE], TRUE) then\n\twith sender.Canvas.Font do\n  \tstyle:=style+[fsItalic];\na:=f.accounts[FA_ACCESS];\nonlyAnon:= onlyString(USER_ANONYMOUS, a);\nnode.stateIndex:=ifThen((f.user > '') or (assigned(a) and not onlyAnon), ICON_LOCK, -1);\nend;\n\nfunction Tmainfrm.fileAttributeInSelection(fa:TfileAttribute):boolean;\nvar\n  i: integer;\nbegin\nfor i:=0 to filesBox.SelectionCount-1 do\n  if fa in nodeTofile(filesBox.Selections[i]).flags then\n    begin\n    result:=TRUE;\n    exit;\n    end;\nresult:=FALSE;\nend; // fileAttributeInSelection\n\nprocedure TmainFrm.Setuserpass1Click(Sender: TObject);\nvar\n  i: integer;\n  user, pwd: string;\n  f: Tfile;\nbegin\nif selectedFile = NIL then exit;\nif fileAttributeInSelection(FA_LINK)\nand (msgDlg(MSG_UNPROTECTED_LINKS, MB_ICONWARNING+MB_YESNO) <> IDYES) then exit;\nuser:=selectedFile.user;\npwd:=selectedFile.pwd;\nif not newuserpassFrm.prompt(user, pwd) then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  begin\n  f:=filesBox.Selections[i].data;\n  usersInVFS.drop(f.user, f.pwd);\n  f.user:=user;\n  f.pwd:=pwd;\n  usersInVFS.track(f.user, f.pwd);\n  end;\nfilesBox.Repaint();\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.browseBtnClick(Sender: TObject);\nbegin browse(urlBox.Text) end;\n\nprocedure TmainFrm.BanIPaddress1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\nbanAddress(cd.address);\nend;\n\nprocedure showOptions(page:TtabSheet);\nvar\n  was: boolean;\nbegin\noptionsFrm.pageCtrl.ActivePage:=page;\nwas:=page.TabVisible;\npage.TabVisible:=TRUE;\nif mainfrm.modalOptionsChk.checked and not optionsFrm.visible then optionsFrm.showModal()\nelse optionsFrm.show();\npage.TabVisible:=was;\nend;\n\nprocedure TmainFrm.BannedIPaddresses1Click(Sender: TObject);\nbegin showOptions(optionsFrm.bansPage) end;\n\nprocedure Tmainfrm.recentsClick(sender:Tobject);\nvar\n  i: integer;\nbegin\nif blockLoadSave() then exit;\ni:=strToInt((sender as Tmenuitem).Caption[3]);\nif i > length(recentFiles) then exit;\ndec(i); // convert to zero based\nif fileExists(recentFiles[i]) then\n  begin\n  if not checkVfsOnQuit() then exit;\n  loadVFS(recentFiles[i]);\n  end\nelse\n  begin\n  msgDlg('The file does not exist anymore', MB_ICONERROR);\n  removeString(recentFiles, i);\n  updateRecentFilesMenu();\n  end;\nend;\n\nprocedure Tmainfrm.updateRecentFilesMenu();\nvar\n  i: integer;\nbegin\nLoadrecentfiles1.Clear();\nfor i:=0 to length(recentFiles)-1 do\n  loadrecentfiles1.Add(\n    NewItem( '[&'+intToStr(i+1)+'] '+ExtractFileName(recentFiles[i]), 0, FALSE, TRUE, recentsClick, 0, 'recent') );\nLoadrecentfiles1.visible:=Loadrecentfiles1.count>0;\nend; // updateRecentFilesMenu\n\nprocedure Tmainfrm.loadVFS(fn:string);\nresourcestring\n  MSG_TITLE = 'Loading VFS';\n  MSG_OLD = 'This file is old and uses different settings.'\n    +#13'The \"let browse\" folder option will be reset.'\n    +#13'Re-saving the file will update its format.';\n  MSG_UNK_FK = 'This file has been created with a newer version.'\n    +#13'Some data was discarded because unknown.'\n    +#13'If you save the file now, the discarded data will NOT be saved.';\n  MSG_VIS_ONLY_ANON =\n    'This VFS file uses the \"Visible only to anonymous users\" feature.'\n  +#13'This feature is not available anymore.'\n  +#13'You can achieve similar results by restricting access to @anonymous,'\n  +#13'then enabling \"List protected items only for allowed users\".';\n  MSG_AUTO_DISABLED = 'Because of the problems encountered in loading,'\n    +#13'automatic saving has been disabled'\n    +#13'until you save manually or load another one.';\n  MSG_CORRUPTED = 'This file does not contain valid data.';\n  MSG_MACROS_FOUND = '!!!!!!!!! DANGER !!!!!!!!!'\n    +#13'This file contains macros.'\n    +#13'Don''t accept macros from people you don''t trust.'\n    +#13#13'Trust this file?';\nvar\n  took: Tdatetime;\n  data: ansistring;\n\n  function anyAutosavingFeatureEnabled():boolean;\n  begin  result:=(autosaveVFS.every > 0) or autosaveVFSchk.checked end;\n\n  function restoreBak():boolean;\n  begin\n  result:=fileExists(fn+BAK_EXT)\n    and (not fileExists(fn) or renameFile(fn, fn+CORRUPTED_EXT))\n    and renameFile(fn+BAK_EXT, fn);\n  if result then\n    data:=loadfile(fn);\n  end; // restoreBak\n\nbegin\nif fn = '' then exit;\nfilesBox.hide(); // it seems to speed up a lot\nprogFrm.show('Loading VFS...', TRUE);\ndisableUserInteraction();\ntry\n  fillchar(loadingVFS, sizeof(loadingVFS), 0);\n  took:=now();\n  data:=loadfile(fn);\n  loadingVfs.bakAvailable:=fileExists(fn+BAK_EXT);\n  if not ansiStartsStr(TLV(FK_HEAD, VFS_FILE_IDENTIFIER), data)\n  and not restoreBak() then\n    begin\n    if data = '' then\n      msgDlg(MSG_CORRUPTED, MB_ICONERROR);\n    exit;\n    end;\n  try\n    initVFS();\n    setVFS(data);\n    if loadingVFS.useBackup and restoreBak() then\n      begin\n      initVFS();\n      setVFS(loadfile(fn));\n      end;\n    took:=now()-took;\n  finally\n    if progFrm.cancelRequested then initVFS()\n    else lastFileOpen:=fn;\n    VFSmodified:=FALSE;\n    purgeVFSaccounts(); // remove references to non-existent users\n    filesBox.FullCollapse();\n    rootNode.Selected:=TRUE;\n    rootNode.MakeVisible();\n    end;\nfinally\n  reenableUserInteraction();\n  progFrm.hide();\n  filesBox.show();\n  end;\nif progFrm.cancelRequested then exit;\nif loadingVFS.macrosFound\nand not stringExists(fn, trustedFiles)\nand (msgDlg(MSG_MACROS_FOUND, MB_ICONWARNING+MB_YESNO, MSG_TITLE) = mrNo) then\n  begin\n  initVFS();\n  exit;\n  end;\naddUniqueString(fn, trustedFiles);\nif loadingVFS.visOnlyAnon then\n  msgDlg(MSG_VIS_ONLY_ANON, MB_ICONWARNING, MSG_TITLE);\nif loadingVFS.resetLetBrowse then msgDlg(MSG_OLD, MB_ICONWARNING, MSG_TITLE);\nif loadingVFS.unkFK then msgDlg(MSG_UNK_FK, MB_ICONWARNING, MSG_TITLE);\n\nwith loadingVFS do disableAutosave:=unkFK or resetLetBrowse or visOnlyAnon;\nif loadingVFS.disableAutosave and anyAutosavingFeatureEnabled() then\n  msgDlg(MSG_AUTO_DISABLED, MB_ICONWARNING, MSG_TITLE);\n\nsetStatusBarText(format('Loaded in %.1f seconds (%s)', [took*SECONDS,fn]), 10);\n\nremovestring(fn, recentFiles); // avoid duplicates\ninsertstring(fn, 0, recentFiles); // insert fn as first element\nremoveString(recentFiles, MAX_RECENT_FILES, length(recentFiles)); // shrink2max\nupdateRecentFilesMenu();\nend; // loadVFS\n\nprocedure TmainFrm.logBoxChange(Sender: TObject);\nbegin logToolbar.visible:=not easyMode and (logBox.Lines.count > 0) end;\n\nprocedure TmainFrm.logBoxMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);\nbegin\nif button = mbRight then\n  logRightClick:=point(x,y);\nend;\n\nprocedure Tmainfrm.popupMainMenu();\nbegin\nmenuBtn.Down:=TRUE;\nwith menuBtn.clientToScreen(point(0,menuBtn.height)) do\n  menu.popup(x,y);\nmenuBtn.Down:=FALSE;\nend;\n\nprocedure TmainFrm.portBtnClick(Sender: TObject);\nvar\n  s: string;\nbegin\ns:=port;\n  repeat\n  if not inputQuery('Port', 'Specify a port to accept connection,'#13'or leave empty to decide automatically.', s) then exit;\n  s:=trim(s);\n  if not isOnlyDigits(s) then\n    begin\n    msgDlg('Numbers only', MB_ICONERROR);\n    continue;\n    end;\n  if changePort(s) then exit;\n  sayPortBusy(s);\n  until FALSE;\nend;\n\nprocedure Tmainfrm.updateAlwaysOnTop();\nbegin\nif alwaysOnTopchk.checked then FormStyle:=fsStayOnTop\nelse formStyle:=fsNormal\nend; // updateAlwaysOnTop\n\nprocedure TmainFrm.updateBtnClick(Sender: TObject);\nbegin\nif now()-lastUpdateCheck > 1*HOURS then\n  autoCheckUpdates(); // refresh update info, in case the button is clicked long after the check\n\ndoTheUpdate(clearAndReturn(updateWaiting));\nupdateBtn.hide();\nend;\n\nprocedure TmainFrm.Changeeditor1Click(Sender: TObject);\nbegin selectFile(tplEditor, '', 'Programs|*.exe', [ofFileMustExist]) end;\n\nprocedure TmainFrm.Changefile1Click(Sender: TObject);\nbegin\nif selectFile(tplFilename, 'Change template file', 'Template file|*.tpl', [ofPathMustExist, ofCreatePrompt]) then\n  setNewTplFile(tplFilename);\nend;\n\nprocedure TmainFrm.Changeport1Click(Sender: TObject);\nbegin portBtnClick(portBtn) end;\n\nprocedure TmainFrm.Checkforupdates1Click(Sender: TObject);\nresourcestring\n  MSG_INFO = 'Last stable version: %s'#13#13'Last untested version: %s'#13;\n  MSG_NEWER = 'There''s a new version available online: %s';\nvar\n  updateURL: string;\n  info: Ttpl;\nbegin\nprogFrm.show('Searching for updates...');\ntry info:=downloadUpdateInfo()\nfinally progFrm.hide() end;\n\nif info = NIL then\n  begin\n  msgDlg(MSG_COMM_ERROR, MB_ICONERROR);\n  exit;\n  end;\n\ntry\n  msgDlg(format(MSG_INFO, [ info['last stable'], first([info['last untested'],'none']) ]));\n\n  updateURL:='';\n  if trim(info['last stable build']) > VERSION_BUILD then\n    begin\n    msgDlg(format(MSG_NEWER,[info['last stable']]));\n    updateURL:=trim(info['last stable url']);\n    end\n  else\n    if (not VERSION_STABLE or testerUpdatesChk.checked)\n    and (trim(info['last untested build']) > VERSION_BUILD) then\n      begin\n      msgDlg(format(MSG_NEWER,[info['last untested']]));\n      updateURL:=trim(info['last untested url']);\n      end;\n\n  msgDlg(info['notice'], MB_ICONWARNING);\n  parseVersionNotice(info['version notice']);\nfinally info.free end;\npromptForUpdating(updateURL);\nend;\n\nprocedure Tmainfrm.setEasyMode(easy:boolean=TRUE);\nresourcestring\n  ARE_EXPERT = 'You are in Expert mode';\n  ARE_EASY = 'You are in Easy mode';\n  SW2EXPERT = 'Switch to Expert mode';\n  SW2EASY = 'Switch to Easy mode';\nconst\n  ICO :array [boolean] of integer = (ICON_EXPERT, ICON_EASY);\nbegin\neasyMode:=easy;\nswitchMode.caption:=ifThen(easyMode, SW2EXPERT, SW2EASY);\n//switchMode.imageIndex:=ICO[not easyMode];  disabled because it's ugly, it uses the same icon as the next menu item (accounts)\nmodeBtn.caption:=ifThen(easyMode, ARE_EASY, ARE_EXPERT);\nmodeBtn.imageIndex:=ICO[easyMode];\nif not easyMode or graphInEasyMode then showGraph()\nelse hideGraph();\noptionsFrm.mimePage.tabVisible:=not easyMode;\noptionsFrm.accountsPage.tabVisible:=not easyMode;\noptionsFrm.a2nPage.tabVisible:=not easyMode;\nlogBoxChange(NIL);\nupdateSbar();\nend; // switchEasyMode\n\nprocedure TmainFrm.Rename1Click(Sender: TObject);\nbegin\nif assigned(selectedFile) then\n  filesBox.Selected.EditText()\nend;\n\nprocedure TmainFrm.noDownloadtimeout1Click(Sender: TObject);\nresourcestring\n  MSG = 'Enter the number of MINUTES with no download after which the program automatically shuts down.'\n    +#13'Leave blank to get no timeout.';\nvar\n  s:string;\nbegin\nif noDownloadTimeout > 0 then s:=intToStr(noDownloadTimeout)\nelse s:='';\nif inputquery('No downloads timeout', MSG, s) then\n\ttry setnoDownloadTimeout(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nprocedure Tmainfrm.initVFS();\nvar\n  f:Tfile;\nbegin\nuploadPaths:=NIL;\nif assigned(rootNode) then rootNode.delete();\nf:=Tfile.createVirtualFolder('/');\nf.flags:=f.flags+[FA_ROOT, FA_ARCHIVABLE];\nf.dontCountAsDownloadMask:='*.htm;*.html;*.css';\nf.defaultFileMask:='index.html;index.htm;default.html;default.htm';\nrootFile:=f;\naddFile(f, NIL, TRUE);\nrootNode:=rootFile.node;\nVFSmodified:=FALSE;\nlastFileOpen:='';\nend; // initVFS\n\nprocedure TmainFrm.alwaysontopChkClick(Sender: TObject);\nbegin updateAlwaysOnTop() end;\n\nprocedure TmainFrm.hideGraph();\nbegin\ngraphSplitter.hide();\ngraphBox.hide();\ngraphInEasyMode:=FALSE;\nend; // hideGraph\n\nprocedure TmainFrm.showGraph();\nbegin\ngraphSplitter.show();\ngraphBox.show();\ngraphBox.Height:=graph.size;\nif easyMode then graphInEasyMode:=TRUE;\nend; // showGraph\n\nprocedure TmainFrm.Showbandwidthgraph1Click(Sender: TObject);\nbegin showGraph() end;\n\nprocedure TmainFrm.Pause1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\nwith cd.conn do paused:=not paused;\nend;\n\nprocedure TmainFrm.MIMEtypes1Click(Sender: TObject);\nbegin showOptions(optionsFrm.mimePage) end;\n\nprocedure TmainFrm.accounts1Click(Sender: TObject);\nbegin showOptions(optionsFrm.accountsPage) end;\n\nprocedure TmainFrm.CopyURL1Click(Sender: TObject);\nvar\n  i: integer;\n  s: string;\nbegin\ns:='';\nfor i:=0 to filesBox.SelectionCount-1 do\n  s:=s+nodeTofile(filesBox.Selections[i]).fullURL()+CRLF;\nsetLength(s, length(s)-2);\nsetClip(s);\nend;\n\nprocedure Tmainfrm.copyURLwithPasswordMenuClick(sender:TObject);\nvar\n  a: Paccount;\n  user, pwd: string;\n  f: Tfile;\nbegin\nif selectedFile = NIL then exit;\nuser:=(sender as Tmenuitem).caption;\ndelete(user, pos('&',user), 1);\n// protection may have been inherited\nf:=selectedFile;\nwhile assigned(f) and (f.accounts[FA_ACCESS] = NIL) and (f.user = '') do\n  f:=f.parent;\n\nif f.user = user then \n  pwd:=f.pwd\nelse\n  begin\n  a:=getAccount(user);\n  if assigned(a) then pwd:=a.pwd\n  else pwd:='';\n  end;\n\nsetClip( selectedFile.fullURL('',user,pwd) )\nend; // copyURLwithPasswordMenuClick\n\nprocedure Tmainfrm.copyURLwithAddressMenuClick(sender:Tobject);\nvar\n  s, addr: string;\n  i: integer;\nbegin\naddr:=(sender as Tmenuitem).Caption;\ndelete(addr, pos('&',addr), 1);\n\ns:='';\nfor i:=0 to filesBox.SelectionCount-1 do\n  s:=s+nodeTofile(filesBox.Selections[i]).fullURL(addr)+CRLF;\nsetLength(s, length(s)-2);\n\nsetClip(s);\nend; // copyURLwithAddressMenuClick\n\nprocedure TmainFrm.CopyURLwithfingerprint1Click(Sender: TObject);\nvar\n  f: Tfile;\n  s, hash: string;\n  i: integer;\nbegin\nif selectedFile = NIL then exit;\ns:='';\ntry\n  for i:=0 to filesBox.SelectionCount-1 do\n    begin\n    f:=filesBox.Selections[i].data;\n\n    progFrm.show('Hashing '+f.name, TRUE);\n    progFrm.progress:=i / filesBox.SelectionCount;\n    application.ProcessMessages();\n\n    hash:=loadFingerprint(f.resource);\n    if (hash = '') and f.isFile() then\n      begin\n      progFrm.push( 1/filesBox.SelectionCount );\n      try hash:=createFingerprint(f.resource);\n      finally progFrm.pop() end;\n      if saveNewFingerprintsChk.checked and (hash > '') then\n        saveTextFile(f.resource+'.md5', hash);\n      end;\n    if progFrm.cancelRequested then exit;\n    s:=s + f.fullURL() + nonEmptyConcat('#!md5!', hash) + CRLF;\n    end;\nfinally progFrm.hide() end;\nsetLength(s, length(s)-2);\n\nurlBox.Text:=getTill(#13, s);\nsetClip(s);\nend;\n\nprocedure TmainFrm.urlBoxChange(Sender: TObject);\nbegin updateCopyBtn() end;\n\nprocedure TmainFrm.traymessage1Click(Sender: TObject);\nbegin showOptions(optionsFrm.trayPage) end;\n\nprocedure TmainFrm.Guide1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/hfs/guide/') end;\n\nprocedure Tmainfrm.saveVFS(fn:string='');\nbegin\nif blockLoadSave() then exit;\nif fn = '' then\n  begin\n  fn:=lastFileOpen;\n  if not promptForFileName(fn, 'VirtualFileSystem|*.vfs', 'vfs', 'Save VFS', '', TRUE) then\n    exit;\n  end;\nlastFileOpen:=fn;\ndeleteFile(fn+BAK_EXT);\nrenameFile(fn, fn+BAK_EXT);\nif not savefile(fn, addVFSheader(getVFS())) then\n  begin\n  deleteFile(fn);\n  renameFile(fn+BAK_EXT, fn);\n  msgDlg('Error saving', MB_ICONERROR);\n  exit;\n  end;\nif not backupSavingChk.checked then\n  deleteFile(fn+BAK_EXT);\nVFSmodified:=FALSE;\nloadingVFS.disableAutosave:=FALSE;\naddUniqueString(fn, trustedFiles);\nend; // saveVFS\n\nprocedure TmainFrm.filesBoxAddition(Sender: TObject; Node: TTreeNode);\nbegin VFSmodified:=TRUE end;\n\nprocedure TmainFrm.FormClose(Sender: TObject; var Action: TCloseAction);\nbegin\nquitting:=TRUE;\nrunEventScript('quit');\ntimer.enabled:=FALSE;\nif autosaveOptionsChk.checked then saveCFG();\n// we disconnectAll() before srv.free, so we can purgeConnections()\nif assigned(srv) then srv.disconnectAll(TRUE);\npurgeConnections();\nfreeAndNIL(srv);\nfreeAndNIL(tray);\nfreeAndNIL(tray_ico);\nend;\n\nprocedure TmainFrm.Logfile1Click(Sender: TObject);\nresourcestring\n  MSG = 'This function does not save any previous information to the log file.'\n    +#13'Instead, it saves all information that appears in the log box in real-time (from when you click \"OK\", below).'\n    +#13'Specify a filename for the log.'\n    +#13'If you leave the filename blank, no log file is saved.'\n    +#13\n    +#13'Here are some symbols you can use in the filename to split the log:'\n    +#13'  %d% -- day of the month (1..31)'\n    +#13'  %m% -- month (1..12)'\n    +#13'  %y% -- year (2000..)'\n    +#13'  %dow% -- day of the week (0..6)'\n    +#13'  %w% -- week of the year (1..53)'\n    +#13'  %user% -- username surrounded by parenthesis';\nbegin\nInputQuery('Log file', MSG, logFile.filename)\nend;\n\nprocedure TmainFrm.Font1Click(Sender: TObject);\nvar\n  dlg: TFontDialog;\nbegin\ndlg:=TFontDialog.Create(NIL);\ndlg.Font.name:=logFontName;\ndlg.Font.size:=logFontSize;\nif dlg.Execute then\n  begin\n  logBox.font.Assign(dlg.Font);\n  logFontName:=dlg.Font.Name;\n  logFontSize:=dlg.Font.size;\n  end;\ndlg.free;\nend;\n\nprocedure TmainFrm.SetURL1Click(Sender: TObject);\nresourcestring\n  MSG = 'Please insert an URL for the link'\n    +#13\n    +#13'Do not forget to specify http:// or whatever.'\n    +#13'%%ip%% will be translated to your address';\nvar\n  i: integer;\n  s: string;\nbegin\nif selectedFile = NIL then exit;\ns:=selectedFile.resource;\n// this is a little help for who's linking an email. We don't mess with http/ftp because even www.asd.com may be the name of a folder.\nif ansiContainsStr(s, '@')\nand not ansiStartsText('mailto:', s)\nand not ansiContainsStr(s, '://')\nand not ansiContainsStr(s, '/') then\n  s:='mailto:'+s;\nif not inputquery('Set URL', MSG, s) then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  with nodeToFile(filesBox.Selections[i]) do\n    if FA_LINK in flags then\n      resource:=s;\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.Resetuserpass1Click(Sender: TObject);\nvar\n  i: integer;\n  f: Tfile;\nbegin\nfor i:=0 to filesBox.SelectionCount-1 do\n  begin\n  f:=filesBox.Selections[i].data;\n  usersInVFS.drop(f.user, f.pwd);\n  f.user:='';\n  f.pwd:='';\n  end;\nVFSmodified:=TRUE;\nfilesBox.Repaint();\nend;\n\nprocedure TmainFrm.Switchtovirtual1Click(Sender: TObject);\nvar\n  f: Tfile;\n  under: Ttreenode;\n  i: integer;\n  bakIcon: integer;\n  someLocked: boolean;\n  nodes: TtreenodeDynArray;\nbegin\nif selectedFile = NIL then exit;\nnodes:=copySelection();\n\naddingItemsCounter:=0;\ntry\n  someLocked:=FALSE;\n  for i:=0 to length(nodes)-1 do\n    if assigned(nodes[i]) then\n      with nodeToFile(nodes[i]) do\n        if isRealFolder() and not isRoot() then\n          if isLocked() then someLocked:=TRUE\n          else\n            begin\n            bakIcon:=icon;\n            f:=Tfile.create(resource);\n            under:=node.Parent;\n            include(f.flags, FA_VIRTUAL);\n            setNilChildrenFrom(nodes, i);\n            node.Delete();\n            addFile(f, under, TRUE);\n            f.setupImage(bakIcon);\n            f.node.Focused:=TRUE;\n            end;\n  VFSmodified:=TRUE;\n  if someLocked then msgDlg(MSG_SOME_LOCKED, MB_ICONWARNING);\nfinally addingItemsCounter:=-1 end;\nend;\n\nprocedure TmainFrm.FormCloseQuery(Sender: TObject; var CanClose: Boolean);\nbegin\nqueryingClose:=TRUE;\ntry\n  if confirmexitChk.checked and not windowsShuttingDown and not quitASAP then\n    if msgDlg('Quit?', MB_ICONQUESTION+MB_YESNO) = IDNO then\n      begin\n      canclose:=FALSE;\n      exit;\n      end;\n  if not checkVfsOnQuit() then\n    begin\n    canClose:=FALSE;\n    exit;\n    end;\n  stopAddingItems:=TRUE;\n  if lockTimerevent or not applicationFullyInitialized then\n    begin\n    quitASAP:=TRUE;\n    canClose:=FALSE;\n    end;\n  { it's better to switch off this flag, because some software that has been queried after us may prevent\n  { Windows from shutting down, but the flag would stay set, while Windows is no more shutting down. }\n  windowsShuttingDown:=FALSE;\nfinally queryingClose:=FALSE end;\nend;\n\nprocedure TmainFrm.FormCreate(Sender: TObject);\nbegin\nscreen.onActiveFormChange:=wrapInputQuery;\nend;\n\nprocedure TmainFrm.Loginrealm1Click(Sender: TObject);\nresourcestring\n  MSG = 'The realm string is shown on the user/pass dialog of the browser.'\n    +#13'Here you can customize the realm for the login button';\nbegin\nif not inputquery('Login realm', MSG, loginRealm) then exit;\nloginRealm:=trim(loginRealm);\nend;\n\nprocedure TmainFrm.Introduction1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/hfs/guide/intro.html') end;\n\nprocedure TmainFrm.Reset1Click(Sender: TObject);\nbegin\nzeroMemory(@graph.samplesIn, sizeOf(graph.samplesIn));\nzeroMemory(@graph.samplesOut, sizeOf(graph.samplesOut));\ngraph.maxV:=0;\ngraph.beforeRecalcMax:=1;\nrecalculateGraph();\nend;\n\nprocedure TmainFrm.Resetfileshits1Click(Sender: TObject);\nvar\n  n: Ttreenode;\nbegin\nrepaintTray();\nn:=rootnode;\nwhile assigned(n) do\n  begin\n  nodeToFile(n).DLcount:=0;\n  n:=n.getNext();\n  end;\nVFSmodified:=TRUE;\nautoupdatedFiles.clear();\nend;\n\nprocedure TmainFrm.persistentconnectionsChkClick(Sender: TObject);\nbegin\nsrv.persistentConnections:=persistentconnectionsChk.Checked;\nif not srv.persistentConnections then\n  Kickidleconnections1Click(NIL);\nend;\n\nprocedure TmainFrm.Kickidleconnections1Click(Sender: TObject);\nvar\n  i: integer;\nbegin\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  with conn2data(i) do\n    if conn.state = HCS_IDLE then\n      disconnect('kicked idle');\n  inc(i);\n  end;\nend;\n\nprocedure TmainFrm.Connectionsinactivitytimeout1Click(Sender: TObject);\nresourcestring\n  MSG = 'The connection is kicked after a timeout.'\n    +#13'Specify in seconds.'\n    +#13'Leave blank to get no timeout.';\nvar\n  s:string;\nbegin\nif connectionsInactivityTimeout <= 0 then s:=''\nelse s:=intToStr(connectionsInactivityTimeout);\nif not inputquery('Connection inactivity timeout', MSG, s) then exit;\ntry connectionsInactivityTimeout:=strToUInt(s)\nexcept msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\nend;\n\nprocedure TmainFrm.splitHMoved(Sender: TObject);\nbegin if connPnl.height > 0 then lastGoodConnHeight:=connPnl.height end;\n\nprocedure TmainFrm.Clearfilesystem1Click(Sender: TObject);\nresourcestring\n  MSG = 'All changes will be lost'#13'Continue?';\nbegin\ncheckIfOnlyCountersChanged();\nif VFSmodified and (msgDlg(MSG, MB_ICONQUESTION+MB_YESNO) = IDNO) then exit;\ninitVFS();\nend;\n\nfunction checkMultiInstance():boolean;\nbegin\nresult:=not mono.working;\nif result then msgDlg(MSG_SINGLE_INSTANCE, MB_ICONERROR);\nend; // checkMultiInstance\n\nfunction isIntegratedInShell():boolean;\nbegin\nresult:=(loadregistry('*\\shell\\Add to HFS\\command', '', HKEY_CLASSES_ROOT) > '')\n  and (loadregistry('Folder\\shell\\Add to HFS\\command','',HKEY_CLASSES_ROOT) >'')\n  and (loadregistry('.vfs', '', HKEY_CLASSES_ROOT) > '')\n  and (loadregistry('.vfs\\shell\\Open\\command', '', HKEY_CLASSES_ROOT) > '')\nend; // isIntegratedInShell\n\nfunction integrateInShell():boolean;\nvar\n  exe: string;\n\n  function addToContextMenuFor(kind:string):boolean;\n  begin\n  deleteRegistry(kind+'\\shell\\HFS', HKEY_CLASSES_ROOT); // legacy: till version 2.0 beta23 we used this key. this call is to keep the registry clean from old unused keys.\n  result:=saveRegistry(kind+'\\shell\\Add to HFS\\command', '',\n    '\"'+exe+'\" \"%1\"', HKEY_CLASSES_ROOT);\n  end;\n\nbegin\nexe:=expandFileName(paramStr(0));\nresult:=addToContextMenuFor('*')\n  and addToContextMenuFor('Folder')\n  and saveregistry('.vfs','','HFS file system', HKEY_CLASSES_ROOT)\n  and saveregistry('.vfs\\shell\\Open\\command','','\"'+exe+'\" \"%1\"', HKEY_CLASSES_ROOT)\nend; // integrateInShell\n\nprocedure disintegrateShell();\nbegin\ndeleteRegistry('*\\shell\\Add to HFS', HKEY_CLASSES_ROOT);\ndeleteRegistry('*\\shell\\HFS', HKEY_CLASSES_ROOT);\ndeleteRegistry('Folder\\shell\\Add to HFS', HKEY_CLASSES_ROOT);\ndeleteRegistry('Folder\\shell\\HFS', HKEY_CLASSES_ROOT);\ndeleteRegistry('.vfs\\shell\\Open\\command', HKEY_CLASSES_ROOT);\ndeleteRegistry('.vfs', HKEY_CLASSES_ROOT);\nend; // disintegrateShell\n\nprocedure uninstall();\nconst\n  BATCH_FILE = 'hfs.uninstall.bat';\n  BATCH = 'START \"\" /WAIT \"%s\" -q'+CRLF\n    +'DEL \"%0:s\"'+CRLF\n    +'DEL %%0'+CRLF;\nbegin\nif checkMultiInstance() then exit;\nmainfrm.autosaveoptionsChk.checked:=FALSE;\ndisintegrateShell();\ndeleteCFG();\nsaveTextFile(BATCH_FILE, format(BATCH,[paramStr(0)]));\nquitASAP:=TRUE;\nexecNew(BATCH_FILE);\nend; // uninstall\n\nprocedure processParams_before(var params:TStringDynArray; allowed:string='');\nvar\n  i, n, consume: integer;\n  fn: string;\n\n  function getSinglePar():string;\n  begin\n  if i >= length(params)-1 then raise Exception.Create('missing parameter needed');\n  consume:=2;\n  result:=params[i+1];\n  end; // getSinglePar\n\nbegin\n//** see if FindCmdLineSwitch() can be useful for the job below\ni:=2; // [0] is cwd [1] is the exe file\nwhile i < length(params) do\n  begin\n  if (length(params[i]) = 2) and (params[i][1] = '-')\n  and ((allowed = '') or (pos(params[i][2], allowed) > 0)) then\n    begin\n    consume:=1; // number of params an option takes\n    case params[i][2] of\n      'q': quitASAP:=TRUE;\n      'u': uninstall();\n      'i': cfgPath:=IncludeTrailingPathDelimiter(getSinglePar());\n      'b': userIcsBuffer:=strToIntDef(getSinglePar(), 0);\n      'B': userSocketBuffer:=strToIntDef(getSinglePar(), 0);\n      'd': // delay\n        begin\n        n:=strToIntDef(getSinglePar(), 0);\n        if n > 0 then sleep(n*100);\n        end;\n      'a':\n        begin\n        fn:=getSinglePar();\n        if not fileExists(fn) then fn:=cfgPath+fn;\n        if not fileExists(fn) then exit;\n        mainfrm.setcfg(loadTextFile(fn));\n        end;\n      'c': mainfrm.setcfg(unescapeNL(getSinglePar()));\n      end;\n    for consume:=1 to consume do removeString(params, i);\n    continue;\n    end;\n  inc(i);\n  end;\nend; // processParams_before\n\nprocedure Tmainfrm.processParams_after(var params:TStringDynArray);\nvar\n  i: integer;\n  dir: string;\nbegin\ndir:=includeTrailingPathDelimiter(popString(params));\npopString(params); // hfs.exe\nfor i:=0 to length(params)-1 do\n  if not isAbsolutePath(params[i]) then\n    params[i]:=dir+params[i];\n// note: 2 .vfs files will be treated as any file\nif (length(params) = 1) and isExtension(params[0], '.vfs') then\n  begin\n  if blockLoadSave() then exit;\n  mainfrm.loadVFS(params[0])\n  end\nelse\n  { parameters are also passed by other instances via sendMessage().\n  { since this operation may require user interaction, it must be queued\n  { because those instances wouldn't quit until the dialog is closed. }\n  addArray(filesToAddQ, params);\nend; // processParams_after\n\nprocedure TmainFrm.Numberofloggeduploads1Click(Sender: TObject);\nbegin setTrayShows('uploads') end;\n\nprocedure Tmainfrm.compressReply(cd:TconnData);\nconst\n  BAD_IE_THRESHOLD = 2000; // under this size (few bytes less, really) old IE versions will go nuts with UTF-8 pages\nvar\n  s: ansistring;\nbegin\nif not compressedbrowsingChk.checked then exit;\ns:=cd.conn.reply.body;\nif s = '' then exit;\nif ipos('gzip', cd.conn.getHeader('Accept-Encoding')) = 0 then exit;\n// workaround for IE6 pre-SP2 bug\nif (cd.workaroundForIEutf8  = WI_toDetect) and (cd.agent > '') then\n  if reMatch(cd.agent, '^MSIE [4-6]\\.', '!') > 0 then // version 6 and before\n    cd.workaroundForIEutf8:=WI_yes\n  else\n    cd.workaroundForIEutf8:=WI_no;\ns:=ZcompressStr(s, clFastest, zsGzip);\nif (cd.workaroundForIEutf8  = WI_yes) and (length(s) < BAD_IE_THRESHOLD) then exit;\ncd.conn.addHeader('Content-Encoding: gzip');\n//cd.conn.addHeader('Content-Length: '+intToStr(length(s)));\ncd.conn.reply.body:=s;\nend; // compressReply\n\nprocedure TmainFrm.Flagfilesaddedrecently1Click(Sender: TObject);\nresourcestring\n  MSG = 'Enter the number of MINUTES files stay flagged from their addition.'\n    +#13'Leave blank to disable.';\nvar\n  s: string;\nbegin\nif filesStayFlaggedForMinutes <= 0 then s:=''\nelse s:=intToStr(filesStayFlaggedForMinutes);\nif InputQuery('Flag new files', MSG, s) then\n\ttry\n  \ts:=trim(s);\n  \tif s = '' then filesStayFlaggedForMinutes:=0\n    else filesStayFlaggedForMinutes:=strToInt(s);\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nprocedure TmainFrm.Flagasnew1Click(Sender: TObject);\nvar\n  i: integer;\nbegin\nif selectedFile = NIL then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  nodeTofile(filesBox.Selections[i]).atime:=now();\nVFSmodified:=TRUE;\nend;\n\nfunction removeFlagNew(f:Tfile; childrenDone:boolean; par, par2:integer):TfileCallbackReturn;\nbegin\nresult:=[];\nVFSmodified:=TRUE;\nf.atime:=now()-succ(filesStayFlaggedForMinutes)/(24*60)\nend; // removeFlagNew\n\nprocedure TmainFrm.Resetnewflag1Click(Sender: TObject);\nvar\n  i: integer;\nbegin\nif selectedFile = NIL then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  nodeTofile(filesBox.Selections[i]).recursiveApply(removeFlagNew);\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.resetOptions1Click(Sender: TObject);\nvar\n  keepAccounts: Taccounts;\nbegin\n(sender as Tmenuitem).enabled:=FALSE;\nrestoreCfgBtn.show();\neventScripts.fullText:='';\nbackuppedCfg:=getCfg();\nkeepAccounts:=accounts;\nsetCfg(defaultCfg);\naccounts:=keepAccounts;\nend;\n\nprocedure Tmainfrm.setStatusBarText(s:string; lastFor:integer);\nbegin\nwith sbar.panels[sbar.panels.count-1] do\n  begin\n  alignment:=taLeftJustify;\n  text:=s;\n  end;\nsbarTextTimeout:=now()+lastFor/SECONDS;\nend;\n\nprocedure TmainFrm.Donate1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/hfs-donate') end;\n\nprocedure TmainFrm.Donotlogaddress1Click(Sender: TObject);\nresourcestring\n  MSG = 'Any event from the following IP address mask will be not logged.';\nbegin\ninputQuery('Do not log address', MSG, dontLogAddressMask)\nend;\n\nprocedure TmainFrm.Custom1Click(Sender: TObject);\nresourcestring\n  MSG = 'Specify your addresses, each per line';\nvar\n  s: string;\n  a: TStringDynArray;\nbegin\ns:=join(CRLF, customIPs);\nif not inputQueryLong('Custom IP addresses', MSG, s) then exit;\ncustomIPs:=split(CRLF, s);\nremoveStrings('', customIPs);\n// change the address if it is not available anymore\na:=getPossibleAddresses();\nif assigned(a) and not stringExists(defaultIP, a) then\n  setDefaultIP(a[0]);\nend;\n\nprocedure TmainFrm.Findexternaladdress1Click(Sender: TObject);\nresourcestring\n  MSG = 'Can''t find external address'#13'( %s )';\nvar\n  service: string;\nbegin\n// this is a manual request, try twice\nif not getExternalAddress(externalIP, @service)\nand not getExternalAddress(externalIP, @service) then\n  begin\n  msgDlg(format(MSG, [service]), MB_ICONERROR);\n  exit;\n  end;\nsetDefaultIP(externalIP);\nmsgDlg(externalIP);\nend;\n\nprocedure TmainFrm.sbarDblClick(Sender: TObject);\nvar\n  i: integer;\nbegin\ni:=whatStatusPanel(sbar,sbar.screenToClient(mouse.cursorPos).X);\nif (i = sbarIdxs.totalIn) or (i = sbarIdxs.totalOut) then\n  if msgDlg('Do you want to reset total in/out?', MB_YESNO) = IDYES then\n    begin\n    outTotalOfs:=-srv.bytesSent;\n    inTotalOfs:=-srv.bytesReceived;\n    end;\nif i = sbarIdxs.banStatus then BannedIPaddresses1Click(NIL);\nif i = sbarIdxs.customTpl then Edit1Click(NIL);\nif i = sbarIdxs.oos then Minimumdiskspace1Click(NIL);\nif i = sbarIdxs.out then Speedlimit1Click(NIL);\nif i = sbarIdxs.notSaved then Savefilesystem1Click(NIL); \nend;\n\nprocedure TmainFrm.sbarMouseDown(Sender: TObject; Button: TMouseButton;\n  Shift: TShiftState; X, Y: Integer);\nbegin\n// since right click is not used for now, it will act as double click\nif button = mbRight then\n  sbarDblClick(sender);\nend;\n\nprocedure forceDynDNSupdate(url:string='');\nresourcestring\n  MSG = 'This option makes pointless the option \"Find external address at startup\", which has now been disabled for your convenience.';\nbegin\ndyndns.url:=url;\nif url = '' then exit; \n// this function is called when setting any dyndns service.\n// calling it from somewhere else may make the following test unsuitable\nif mainfrm.findExtOnStartupChk.checked then\n  begin\n  mainfrm.findExtOnStartupChk.checked:=FALSE;\n  msgDlg(MSG, MB_ICONINFORMATION);\n  exit;\n  end;\ndyndns.active:=TRUE;\ndyndns.lastIP:='';\nexternalIP:='';\nend; // forceDynDNSupdate\n\nprocedure TmainFrm.Custom2Click(Sender: TObject);\nresourcestring\n  MSG = 'Enter URL for updating.'\n    +#13'%ip% will be translated to your external IP.';\nvar\n  s: string;\nbegin\ns:=dyndns.url;\nif inputQuery('Enter URL', MSG, s) then\n  if ansiStartsText('https://', s) then\n    msgDlg('Sorry, HTTPS is not supported yet', MB_ICONERROR)\n  else\n    forceDynDNSupdate(s);\nend;\n\nprocedure TmainFrm.Defaultpointtoaddfiles1Click(Sender: TObject);\nbegin\nif selectedFile = NIL then exit;\naddToFolder:=selectedFile.url();\nmsgDlg('Ok');\nend;\n\nfunction dynDNSinputUserPwd():boolean;\nbegin\nresult:=inputQuery('Enter user', 'Enter user', dyndns.user)\n  and (dyndns.user > '')\n  and inputQuery('Enter password', 'Enter password', dyndns.pwd)\n  and (dyndns.pwd > '');\ndyndns.user:=trim(dyndns.user);\ndyndns.pwd:=ifThen(dyndns.user='', '', trim(dyndns.pwd));\nend; // dynDNSinputUserPwd\n\nfunction dynDNSinputHost():boolean;\nbegin\nresult:=FALSE;\nwhile true do\n  begin\n  if not inputQuery('Enter host', 'Enter domain (full form!)', dyndns.host)\n  or (dyndns.host = '') then exit;\n  dyndns.host:=trim(dyndns.host);\n  if pos('://', dyndns.host) > 0 then\n    chop('://', dyndns.host);\n  if pos('.', dyndns.host) > 0 then\n    begin\n    result:=TRUE;\n    exit;\n    end;\n  msgDlg('Please, enter it in the FULL form, with dots', MB_ICONERROR);\n  end;\nend; // dynDNSinputHost\n\nprocedure finalizeDynDNS();\nbegin\naddUniqueString(dyndns.host, customIPs);\nsetDefaultIP(dyndns.host);\nend; // finalizeDynDNS\n\nprocedure TmainFrm.NoIPtemplate1Click(Sender: TObject);\nbegin\nif not dynDNSinputUserPwd() or not dynDNSinputHost() then exit;\nforceDynDNSupdate('http://'+dyndns.user+':'+dyndns.pwd+'@dynupdate.no-ip.com/nic/update?hostname='+dyndns.host);\nfinalizeDynDNS();\nend;\n\nprocedure TmainFrm.CJBtemplate1Click(Sender: TObject);\nbegin\nif not dynDNSinputUserPwd() then exit;\nforceDynDNSupdate('http://www.cjb.net/cgi-bin/dynip.cgi?username='+dyndns.user+'&password='+dyndns.pwd+'&ip=%ip%');\ndyndns.host:=dyndns.user+'.cjb.net';\nfinalizeDynDNS();\nend;\n\nprocedure TmainFrm.DynDNStemplate1Click(Sender: TObject);\nbegin\nif not dynDNSinputUserPwd() or not dynDNSinputHost() then exit;\nforceDynDNSupdate('http://'+dyndns.user+':'+dyndns.pwd+'@members.dyndns.org/nic/update?hostname='+dyndns.host+'&myip=%ip%&wildcard=NOCHG&backmx=NOCHG&mx=NOCHG&system=dyndns');\nfinalizeDynDNS();\nend;\n\nprocedure TmainFrm.Minimumdiskspace1Click(Sender: TObject);\nresourcestring\n  MSG = 'The upload will fail if your disk has less than the specified amount of free MegaBytes.';\nvar\n  s: string;\nbegin\nif minDiskSpace <= 0 then s:=''\nelse s:=intToStr(minDiskSpace);\nif InputQuery('Min disk space', MSG, s) then\n\ttry\n  \ts:=trim(s);\n  \tif s = '' then minDiskSpace:=0\n    else minDiskSpace:=strToInt(s);\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nfunction pointToCharPoint(re:TRichEdit; pt:Tpoint):Tpoint;\nconst\n  EM_EXLINEFROMCHAR = WM_USER+54;\nbegin\nresult.x:=re.perform(EM_CHARFROMPOS, 0, integer(@pt));\nif result.x < 0 then exit;\nresult.y:=re.perform(EM_EXLINEFROMCHAR, 0, result.x);\ndec(result.x, re.perform(EM_LINEINDEX, result.y, 0));\nend; // pointToCharPoint\n\nfunction Tmainfrm.ipPointedInLog():string;\nvar\n  i: integer;\n  s: string;\n  pt: Tpoint;\nbegin\nresult:='';\npt:=pointToCharPoint(logBox, logRightClick);\nif pt.x < 0 then\n  pt:=logbox.caretpos;\nif pt.y >= logbox.lines.count then exit;\ns:=logbox.lines[pt.y];\nif pt.x > length(s) then exit;\ni:=pt.x;\nwhile (i > 1) and (s[i] <> ' ') do dec(i);\ninc(i);\ns:=copy(s,i, posEx(' ',s,i));\ns:=trim(getTill(':',getTill('@',s)));\nif checkAddressSyntax(s,FALSE) then\n  result:=s;\nend; // ipPointedInLog\n\nprocedure TmainFrm.Banthisaddress1Click(Sender: TObject);\nbegin banAddress(ipPointedInLog()); end;\n\nprocedure TmainFrm.Address2name1Click(Sender: TObject);\nbegin showOptions(optionsFrm.a2nPage) end;\n\nprocedure TmainFrm.Addresseseverconnected1Click(Sender: TObject);\nbegin\nif modalOptionsChk.checked then ipsEverFrm.ShowModal()\nelse ipsEverFrm.show()\nend;\n\nprocedure TmainFrm.Renamepartialuploads1Click(Sender: TObject);\nresourcestring\n  MSG = 'This string will be appended to the filename.'\n    +#13\n    +#13'If you need more control, enter a string with %name% in it, and this symbol will be replaced by the original filename.';\nbegin\nInputQuery('Rename partial uploads', MSG, renamePartialUploads)\nend;\n\nprocedure TmainFrm.SelfTest1Click(Sender: TObject);\nresourcestring\n  MSG_BEFORE = 'Here you can test if your server does work on the Internet.'\n    +#13'If you are not interested in serving files over the Internet, this is NOT for you.'\n    +#13\n    +#13'We''ll now perform a test involving network activity.'\n    +#13'In order to complete this test, you may need to allow HFS''s activity in your firewall, by clicking Allow on the warning prompt.'\n    +#13\n    +#13'WARNING: for the duration of the test, all ban rules and limits on the number of connections won''t apply.';\n  MSG_OK = 'The test is successful. The server should be working fine.';\n  MSG_OK_PORT = 'Port %s is not working, but another working port has been found and set: %s.';\n  MSG_3 = 'You may be behind a router or firewall.';\n  MSG_6 = 'You are behind a router.'\n    +#13'Ensure it is configured to forward port %s to your computer.';\n  MSG_7 = 'You may be behind a firewall.'\n    +#13'Ensure nothing is blocking HFS.';\n\n  function doTheTest(host:string; port:string=''):string;\n\n    function findRedirection():boolean;\n    var\n      http: THttpCli;\n    begin\n    result:=FALSE;\n    http:=Thttpcli.create(NIL);\n    try\n      http.url:=host;\n      http.agent:=HFS_HTTP_AGENT;\n      try http.get()\n      except // a redirection will result in an exception\n        if (http.statusCode < 300) or (http.statusCode >= 400) then exit;        \n        result:=TRUE;\n        host:=http.hostname;\n        port:=http.ctrlSocket.Port;\n        end;\n    finally http.free end\n    end;\n\n  var\n    t: Tdatetime;\n    ms: integer;\n    name: string;\n  begin\n  result:='';\n  if progFrm.cancelRequested then exit;\n  { The user may be using the \"port 80 redirect\" service of no-ip, or a similar one.\n  { The redirection service does not support a request containing \"test\" as URL,\n  { considering it malformed (it requires a leading slash).\n  { Thus, we need to find the redirect here (client-side), and then test to see if\n  { the target of the redirection is a working HFS. }\n  if (port = '') and not checkAddressSyntax(host) and noPortInUrlChk.Checked then\n    name:=ifThen(findRedirection(), host);\n  if port = '' then\n    port:=srv.port;\n  if name = '' then\n    name:=host+':'+port;\n  progFrm.show('Testing '+name+' ...', TRUE);\n  if not srv.active and not startServer() then exit;\n  // we many need to try this specific test more than once\n    repeat\n    t:=now();\n    try result:=httpGet(SELF_TEST_URL+'?port='+port+'&host='+host+'&natted='+YESNO[localIPlist.IndexOf(externalIP)<0] )\n    except break end;\n    t:=now()-t;\n    if (result ='') or (result[1] <> '4') or progFrm.cancelRequested then break;\n    ms:=3100-round(t*SECONDS*1000); // we mean to never query faster than 1/3s\n    if ms > 0 then\n      sleep(ms);\n    until progFrm.cancelRequested;\n  end; // doTheTest\n\n  function successful(s:string):boolean;\n  begin result:=(s > '') and (s[1] = '1') end;\n\nvar\n  best: record host, res: string; end;\n\n  procedure tryDifferentHosts();\n  var\n    i: integer;\n    tries: TStringDynArray;\n    s: string;\n  begin\n  if externalIP = '' then\n    begin\n    progFrm.show('Retrieving external address...');\n    getExternalAddress(externalIP);\n    end;\n  tries:=getPossibleAddresses();\n  // ensure defaultIP is the first one\n  insertString(defaultIP, 0, tries);\n  uniqueStrings(tries);\n\n  best.res:='';\n  for i:=0 to length(tries)-1 do\n    begin\n    if isLocalIP(tries[i]) then continue;\n\n    progFrm.progress:=succ(i)/succ(length(tries));\n    s:=doTheTest(tries[i]);\n    // we want a digit\n    if (s='') or not charInSet(s[1],['0'..'9']) then continue;\n    // we want a better one (lower)\n    if (best.res > '') and (best.res[1] <= s[1]) then continue;\n    // we consider this to be better, record it\n    best.res:=s;\n    best.host:=tries[i];\n    if successful(s) then break;\n    end;\n  end; // tryDifferentHosts\n\n  procedure tryDifferentPorts();\n  var\n    i: integer;\n    tries: TStringDynArray;\n    bak: record\n      port: string;\n      active: boolean;\n      end;\n    ip, s: string;\n  begin\n  ip:=defaultIP;\n  if isLocalIP(ip) then\n    ip:=externalIP;\n  if (ip='') or isLocalIP(ip) then\n    exit;\n  // build list of ports we'll test\n  tries:=toSA(['80','8123']);\n  removeString(srv.port, tries); // already tested\n\n  bak.active:=srv.active;\n  bak.port:=port;\n  for i:=0 to length(tries)-1 do\n    begin\n    progFrm.progress:=succ(i)/succ(length(tries));\n    port:=tries[i];\n    stopServer();\n    if not startServer() then continue;\n    s:=doTheTest(ip);\n    if successful(s) then break;\n    end;\n  if successful(s) and (best.res = '') then\n    begin\n    best.res:=s;\n    best.host:=defaultIP;\n    end\n  else\n    begin\n    port:=bak.port;\n    stopServer();\n    if bak.active then startServer();\n    end;\n  end; // tryDifferentPorts\n\nvar\n  originalPort, s: string;\nbegin\nif msgDlg(MSG_BEFORE, MB_ICONWARNING+MB_OKCANCEL) <> IDOK then exit;\n\noriginalPort:=port;\n\nif not srv.active and not startServer() then\n  begin\n  port:='';\n  if not startServer() then\n    begin\n    msgDlg('Unable to switch the server on', MB_ICONERROR);\n    exit;\n    end;\n  end;\n\nif listenOn = '127.0.0.1' then\n  begin\n  msgDlg('Self test cannot be performed because HFS was configured to accept connections only on 127.0.0.1', MB_ICONERROR);\n  exit;\n  end;\n\nif httpsUrlsChk.checked then\n  msgDlg('Self test doesn''t support HTTPS.'#13'It''s likely it won''t work.', MB_ICONWARNING);\n\ndisableUserInteraction();\nprogFrm.show('Self testing...');\nselfTesting:=TRUE;\ntry\n  best.res:='';\n  progFrm.push(0.5);\n  tryDifferentHosts();\n  progFrm.pop();\n\n  progFrm.push(0.4);\n  if not successful(best.res) then\n    tryDifferentPorts();\n  progFrm.pop();\n\n  s:=best.res;\n  if successful(s) then\n    begin\n    progFrm.progress:=1;\n    if (originalPort = '') or (originalPort = port) then\n      msgDlg(MSG_OK)\n    else\n      msgDlg(format(MSG_OK_PORT, [originalPort, port]));\n    if best.host <> defaultIP then setDefaultIP(best.host);\n    exit;\n    end\n  else\n\n\n  if progFrm.cancelRequested then\n    begin\n    msgDlg('Test cancelled');\n    exit;\n    end;\n\n  // error\n  if s = '' then\n    try\n      progFrm.show('Testing internet connection...');\n      httpGet(ALWAYS_ON_WEB_SERVER);\n      s:='Sorry, the test is unavailable at the moment';\n    except s:='Your internet connection does not work' end\n  else\n    begin\n    case s[1] of\n      '3': s:=MSG_3;\n      '6': s:=format(MSG_6, [first(port,'80')]);\n      '7': s:=MSG_7;\n      end;\n    s:='The test failed: server does not answer.'#13#13+s;\n    end;\n  msgDlg(s, MB_ICONERROR);\n\nfinally\n  selfTesting:=FALSE;\n  reenableUserInteraction();\n  progFrm.hide();\n  end;\nend;\n\nprocedure TmainFrm.Opendirectlyinbrowser1Click(Sender: TObject);\nresourcestring\n  MSG = '\"Suggest\" the browser to open directly the specified files.'\n    +#13'Other files should pop up a save dialog.';\nbegin\nInputQuery('Open directly in browser', MSG, openInBrowser)\nend;\n\nprocedure TmainFrm.noPortInUrlChkClick(Sender: TObject);\nresourcestring\n  MSG = 'You should not use this option unless you really know its meaning.'\n    +#13'Continue?';\nbegin\nif noPortInUrlChk.Checked and (msgDlg(MSG, MB_YESNO) = ID_YES) then\n  mainfrm.updateUrlBox()\nelse\n  noPortInUrlChk.Checked:=FALSE;\nend;\n\nfunction getTplEditor():string;\nbegin\nresult:=first([\n  if_(fileExists(tplEditor), nonEmptyConcat('\"', tplEditor, '\"')),\n  loadregistry('SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\notepad++.exe', '', HKEY_LOCAL_MACHINE),\n  'notepad.exe'\n])\nend;\n\nprocedure TmainFrm.Edit1Click(Sender: TObject);\nbegin\nif not fileExists(tplFilename) then\n  begin\n  tplFilename:=TPL_FILE;\n  saveTextFile(tplFilename, defaultTpl);\n  end;\nexec(getTplEditor(), '\"'+tplFilename+'\"');\nend;\n\nprocedure TmainFrm.Editeventscripts1Click(Sender: TObject);\nresourcestring\n  HELP = 'For help on how to use this file please refer http://www.rejetto.com/wiki/?title=HFS:_Event_scripts';\nvar\n  fn: string;\nbegin\nfn:=cfgPath+EVENTSCRIPTS_FILE;\nif not fileExists(fn) then\n  saveTextFile(fn, HELP);\nexec(getTplEditor(), '\"'+fn+'\"');\nend;\n\nprocedure TmainFrm.Editresource1Click(Sender: TObject);\nresourcestring\n  CAPTION = 'Edit resource';\nvar\n  oldRes, oldName, res: string;\n  done, nameSync: boolean;\nbegin\nif (selectedFile = NIL) or (FA_VIRTUAL in selectedFile.flags) then exit;\nres:=selectedFile.resource;\noldRes:=res;\noldName:=selectedFile.name;\n// name sync, only if the name was not customized\nnameSync:= selectedFile.name = ExtractFileName(selectedFile.resource);\nif selectedFile.isFolder then done:=selectFolder(CAPTION, res)\nelse done:=PromptForFileName(res, '', '', CAPTION);\nif done then VFSmodified:=TRUE;\nselectedFile.setResource(res);\nif not nameSync then selectedFile.setName(oldName);\nselectedFile.setupImage();\nend;\n\nprocedure TmainFrm.enableMacrosChkClick(Sender: TObject);\nresourcestring\n  MSG = 'The current template is using macros.'\n    +#13'Do you want to cancel this action?';\nbegin\nif anyMacroMarkerIn(tpl.fullText) and not enableMacrosChk.Checked then\n  enableMacrosChk.Checked:=msgDlg(MSG, MB_ICONWARNING+MB_YESNO) = MRYES;\nend;\n\nprocedure TmainFrm.modeBtnClick(Sender: TObject);\nbegin setEasyMode(not easyMode) end;\n\nprocedure TmainFrm.Shellcontextmenu1Click(Sender: TObject);\nbegin\nif isIntegratedInShell() then disintegrateShell()\nelse if integrateInShell() then msgDlg(MSG_ADD_TO_HFS)\nelse msgDlg(MSG_ERROR_REGISTRY, MB_ICONERROR);\nend;\n\nprocedure TmainFrm.menuBtnClick(Sender: TObject);\nbegin popupMainMenu() end;\n\nvar\n  bakShellMenuText: string;\nprocedure TmainFrm.menuPopup(Sender: TObject);\nresourcestring\n  REMOVE_SHELL = 'Remove from shell context menu';\n  S_OFF = 'Switch OFF';\n  S_ON = 'Switch ON';\n  LOG = 'Log';\n\n  procedure showSetting(mi:Tmenuitem; v:integer; unit_:string); overload;\n  begin mi.caption:=getTill('...', mi.caption, TRUE)+if_(v>0, format('       (%d %s)', [v, unit_])) end;\n\nvar\n  i: integer;\nbegin\nif quitting then exit; // here we access some objects like srv that may not be ready anymore\n\nrefreshIPlist();\nfor i:=1 to Fingerprints1.Count-1 do\n  Fingerprints1.items[i].Enabled:=fingerprintsChk.checked;\n\nlogmenu.items.caption:=LOG;\nif menu.items.find(logmenu.items.caption) = NIL then\n  menu.items.insert(7,logmenu.items);\n\nSwitchON1.imageIndex:=if_(srv.active, 11, 4);\nSwitchON1.caption:=if_(srv.active, S_OFF, S_ON);\n\nAppendmacroslog1.Enabled:=macrosLogChk.checked;\nstopSpidersChk.Enabled:=not fileExistsByURL('/robots.txt');\nShowbandwidthgraph1.visible:=not graphBox.visible;\nif bakShellMenuText='' then\n  bakShellMenuText:=Shellcontextmenu1.Caption;\nShellcontextmenu1.Caption:=if_(isIntegratedInShell(), REMOVE_SHELL, bakShellMenuText);\nshowSetting(mainFrm.Connectionsinactivitytimeout1, connectionsInactivityTimeout, 'seconds');\nshowSetting(mainFrm.Minimumdiskspace1, minDiskSpace, 'MB');\nshowSetting(mainFrm.Flagfilesaddedrecently1, filesStayFlaggedForMinutes, 'minutes');\nRestore1.visible:=trayed;\nRestoredefault1.Enabled:=tplIsCustomized;\nNumberofcurrentconnections1.Checked:= trayShows='connections';\nNumberofloggedhits1.checked:= trayShows='hits';\nNumberofloggeddownloads1.checked:= trayShows='downloads';\nNumberofloggeduploads1.Checked:= trayShows='uploads';\nNumberofdifferentIPaddresses1.Checked:= trayShows='ips';\nNumberofdifferentIPaddresseseverconnected1.Checked:= trayShows='ips-ever';\nondownloadChk.checked:= flashOn='download';\nonconnectionChk.checked:= flashOn='connection';\nnever1.checked:= flashOn='';\ndefaultToVirtualChk.Checked:= addFolderDefault='virtual';\ndefaultToRealChk.Checked:= addFolderDefault='real';\naskFolderKindChk.Checked:= addFolderDefault='';\nname1.Checked:= TRUE;\ntime1.Checked:= defSorting='time';\nsize1.checked:= defSorting='size';\nhits1.Checked:= defSorting='hits';\nExtension1.Checked:= defSorting='ext';\nRenamepartialuploads1.Enabled:=not deletePartialUploadsChk.checked;\nSeelastserverresponse1.visible:= dyndns.lastResult>'';\nDisable1.visible:= dyndns.url>'';\ntry RunHFSwhenWindowsstarts1.checked:= paramStr(0) = readShellLink(startupFilename)\nexcept RunHFSwhenWindowsstarts1.checked:= FALSE end;\n// point out where the options will automatically be saved\ntofile1.Default:= saveMode=SM_FILE;\ntoregistrycurrentuser1.default:= saveMode=SM_USER;\ntoregistryallusers1.Default:= saveMode=SM_SYSTEM;\n\nReverttopreviousversion1.Visible:=fileExists(exePath+PREVIOUS_VERSION);\nSaveoptions1.visible:=not easyMode;\ntesterUpdatesChk.visible:=not easyMode;\npreventStandbyChk.visible:=not easyMode;\nsearchbetteripChk.visible:=not easyMode;\nAddfiles2.visible:=easyMode;\nAddfolder2.visible:=easyMode;\nfreeLoginChk.visible:=not easyMode;\nSpeedlimitforsingleaddress1.visible:=not easyMode;\nquitWithoutAskingToSaveChk.visible:=not easyMode;\nbackupSavingChk.visible:=not easyMode;\nDefaultsorting1.visible:=not easyMode;\nsendHFSidentifierChk.visible:=not easyMode;\nURLencoding1.visible:=not easyMode;\npersistentconnectionsChk.visible:=not easyMode;\nDMbrowserTplChk.visible:=not easyMode;\nMIMEtypes1.visible:=not easyMode;\ncompressedbrowsingChk.visible:=not easyMode;\nmodalOptionsChk.visible:=not easyMode;\nAllowedreferer1.visible:=not easyMode;\nFingerprints1.visible:=not easyMode;\nfindExtOnStartupChk.visible:=not easyMode;\nlistfileswithsystemattributeChk.visible:=not easyMode;\nCustom1.visible:=not easyMode;\nnoPortInUrlChk.visible:=not easyMode;\nDynamicDNSupdater1.visible:=not easyMode;\nonly1instanceChk.visible:=not easyMode;\nFlashtaskbutton1.visible:=not easyMode;\nHintsfornewcomersChk.visible:=not easyMode;\nGraphrefreshrate1.visible:=not easyMode;\nfoldersbeforeChk.visible:=not easyMode;\nlistfileswithhiddenattributeChk.visible:=not easyMode;\nsaveTotalsChk.visible:=not easyMode;\ntrayfordownloadChk.visible:=not easyMode;\nAccounts1.visible:=not easyMode;\nVirtualFileSystem1.visible:=not easyMode;\nPausestreaming1.visible:=not easyMode;\nMaxconnections1.visible:=not easyMode;\nMaxconnectionsfromsingleaddress1.visible:=not easyMode;\nmaxIPsDLing1.visible:=not easyMode;\nmaxIPs1.visible:=not easyMode;\nMaxDLsIP1.visible:=not easyMode;\nConnectionsinactivitytimeout1.visible:=not easyMode;\nminimumDiskSpace1.visible:=not easyMode;\nHTMLtemplate1.visible:=not easyMode;\nshellcontextmenu1.visible:=not easyMode;\nuseCommentAsRealmChk.visible:=not easyMode;\nopenDirectlyInBrowser1.visible:=not easyMode;\nkeepBakUpdatingChk.visible:=not easyMode;\nloginRealm1.visible:=not easyMode;\nDumprequestsChk.visible:=not easyMode;\nlogBytesreceivedChk.visible:=not easyMode;\nlogBytessentChk.visible:=not easyMode;\nlogconnectionsChk.visible:=not easyMode;\nlogDisconnectionsChk.visible:=not easyMode;\nautoCommentChk.visible:=not easyMode;\ntraymessage1.visible:=not easyMode;\nshowmaintrayiconChk.visible:=not easyMode;\nnumberOfLoggedHits1.visible:=not easyMode;\nShowcustomizedoptions1.visible:=not easyMode;\nenableNoDefaultChk.visible:=not easyMode;\nbrowseUsingLocalhostChk.visible:=not easyMode;\nuseISOdateChk.visible:=not easyMode;\nAddicons1.visible:=not easyMode;\nAcceptconnectionson1.visible:=not easyMode;\nnumberFilesOnUploadChk.visible:=not easyMode;\nRenamepartialuploads1.visible:=not easyMode;\ndeletePartialUploadsChk.visible:=not easyMode;\nupdateAutomaticallyChk.visible:=not easyMode;\nstopSpidersChk.visible:=not easyMode;\nlinksBeforeChk.visible:=not easyMode;\nDebug1.visible:=not easyMode;\ndelayUpdateChk.visible:=not easyMode;\nend;\n\nfunction paramsAsArray():TStringDynArray;\nvar\n  i: integer;\nbegin\ni:=paramCount();\nsetlength(result, i+2);\nresult[0]:=monoLib.initialPath;\nfor i:=0 to i do result[i+1]:=paramStr(i);\nend; // paramsAsArray\n\nfunction Tmainfrm.finalInit():boolean;\n\n  function getBrowserPath():string;\n  var\n    i: integer;\n  begin\n  result:=loadRegistry('HTTP\\shell\\open\\command', '', HKEY_CLASSES_ROOT);\n  if result = '' then exit;\n  i:=nonQuotedPos(' ', result);\n  if i > 0 then\n    delete(result, i, MAXINT);\n  result:=dequote(result);\n  end; // getBrowserPath\n\n  procedure fixAddToHFS();\n  var\n    should: string;\n\n    procedure fix(kind:string);\n    var\n      s: string;\n    begin\n    s:=loadregistry(kind+'\\shell\\Add to HFS\\command', '', HKEY_CLASSES_ROOT);\n    if (s > '') and (s <> should) then\n      saveRegistry(kind+'\\shell\\Add to HFS\\command','', should, HKEY_CLASSES_ROOT);\n    end;\n\n  begin\n  should:='\"'+expandFileName(paramstr(0))+'\" \"%1\"';\n  fix('*');\n  fix('Folder');\n  end; // fixAddToHFS\n\n  function loadAndApplycfg():boolean;\n  resourcestring\n    MSG = 'You are invited to re-insert your No-IP configuration, otherwise the updater won''t work as expected.';\n  var\n    iniS, tplS: string;\n  begin\n  loadCfg(iniS, tplS);\n  result:=setcfg(iniS, FALSE);\n  // convert old no-ip template url to new one (build#204)\n  if dyndns.active and ansiContainsText(dyndns.url, 'no-ip.com') and not ansiContainsText(dyndns.url, 'nic/update')\n  and (msgDlg(MSG, MB_OKCANCEL+MB_ICONWARNING) = MROK) then\n      NoIPtemplate1Click(NIL);\n  if (tplS > '') and assigned(tpl) then setTplText(tplS);\n  if lastUpdateCheck = 0 then\n    lastUpdateCheck:=getMtime(lastUpdateCheckFN);\n  end; // loadAndApplycfg\n\n  procedure strToConnColumns(l:string);\n  var\n    s, labl: string;\n    i: integer;\n  begin\n  while l > '' do\n    with connBox.columns do\n      begin\n      s:=chop('|',l);\n      if s = '' then continue;\n      labl:=chop(';',s);\n      for i:=0 to count-1 do\n        with items[i] do\n          if caption = labl then\n            begin\n            width:=strToIntDef(s, width);\n            break;\n            end;\n      end;\n  end; // strToConnColumns\n\nvar\n  cfgLoaded: boolean;\n  params: TStringDynArray;\nbegin\nresult:=FALSE;\n\n{ it would be nice, but this is screwing our layouts. so for now we'll just stay with the main window.\nfor i:=0 to application.componentCount-1 do\n  if application.components[i] is Tform then\n    fixFontFor(application.components[i] as Tform);\n}\nfixFontFor(mainFrm);\nsbar.canvas.font.assign(sbar.font); // this is just a workaround, i don't exactly understand the need of it.\n\n// some windows versions do not support multiline tray tips\nif winVersion < WV_2000 then trayNL:='  ';\n\ntrayMsg:='%ip%'\n  +trayNL+'Uptime: %uptime%'\n  +trayNL+'Downloads: %downloads%';\n\nstartingImagesCount:=mainfrm.images.count;\nsrv:=ThttpSrv.create();\nsrv.autoFreeDisconnectedClients:=FALSE;\nsrv.limiters.add(globalLimiter);\nsrv.onEvent:=httpEvent;\ntray_ico:=Ticon.create();\ntray:=TmyTrayicon.create(self);\nDragAcceptFiles(handle, true);\ncaption:=format('HFS ~ HTTP File Server %s%sBuild %s',\n  [VERSION, stringOfChar(' ',80), VERSION_BUILD]);\napplication.Title:=format('HFS %s (%s)', [VERSION, VERSION_BUILD]);\nsetSpeedLimit(-1);\nsetSpeedLimitIP(-1);\nsetGraphRate(10);\nsetMaxConnections(0);\nsetMaxConnectionsIP(0);\nsetMaxDLs(0);\nsetMaxDLsIP(0);\nsetMaxIPs(0);\nsetMaxIPsDLing(0);\nsetnoDownloadTimeout(0);\nsetAutosave(autosaveVFS, 0);\nsetAutoFingerprint(0);\nsetLogToolbar(FALSE);\n\nautosaveVFS.minimum:=5;\nautosaveVFS.menu:=autosaveevery1;\n\nparams:=paramsAsArray();\nprocessParams_before(params, 'i');\n\ninitVFS();\nsetFilesBoxExtras(winVersion <> WV_VISTA);\n\ndefaultCfg:=replaceText(getCfg(), 'active=no', 'active=yes');\n\nloadEvents();\ncfgLoaded:=FALSE;\n// if SHIFT is pressed skip configuration loading\nif not holdingKey(VK_SHIFT) then\n  cfgLoaded:=loadAndApplyCFG()\nelse\n  setStatusBarText('Clean start');\n\n// CTRL avoids the only1instance setting\nif not holdingKey(VK_CONTROL)\nand only1instanceChk.checked and not mono.master then\n  begin\n  result:=FALSE;\n  quitASAP:=TRUE;\n  end;\n\nif not cfgLoaded then\n  setTplText(defaultTpl);\n  \nprocessParams_before(params);\n\nif not quitASAP then\n  begin\n\n  if not cfgLoaded then\n    begin\n    startServer();\n    if not isIntegratedInShell() then\n      with TshellExtFrm.create(mainfrm) do\n        try\n          if showModal() = mrYes then\n            if not integrateInShell() then\n              msgDlg(MSG_ERROR_REGISTRY, MB_ICONERROR);\n        finally free end;\n    end;\n\n  if findExtOnStartupChk.checked and getExternalAddress(externalIP) then\n    setDefaultIP(externalIP);\n\n  end;\n\n// no address set or not available anymore\nif not stringExists(defaultIP, getPossibleAddresses()) then\n  setDefaultIP(getIP());\n\nprogFrm:=TprogressForm.create();\nprogFrm.preventBackward:=TRUE;\nupdateUrlBox();\napplication.HintPause:=100;\nsplitV.AutoSnap:=FALSE;\nsplitV.AutoSnap:=TRUE;\nsplitV.update();\ngraph.size:=graphBox.height;\nif not quitASAP then\n  begin\n  if autocopyURLonStartChk.Checked then\n    setClip( rootFile.fullURL() );\n\n\n  if reloadonstartupChk.checked then\n    if not fileExists(lastFileOpen) and not fileExists(lastFileOpen+BAK_EXT) then\n      lastFileOpen:='';\n\n  if getMtime(VFS_TEMP_FILE) > getMtime(lastFileOpen) then\n    if msgDlg('A file system backup has been created for a system shutdown.'#13'Do you want to restore this backup?', MB_YESNO+MB_ICONWARNING) = MRYES then\n      begin\n      deleteFile(lastFileOpen+BAK_EXT);\n      if renameFile(lastFileOpen, lastFileOpen+BAK_EXT) then\n        renameFile(VFS_TEMP_FILE, lastFileOpen)\n      else\n        lastFileOpen:=VFS_TEMP_FILE\n      end;\n\n  loadVFS(lastFileOpen);\n  end;\nprocessParams_after(params);\n\nif not quitASAP then\n  begin\n  if not cfgLoaded then\n    setEasyMode(easyMode);\n  tray.setIcon(tray_ico);\n  tray.onEvent:=trayEvent;\n  if showmaintrayiconChk.checked then addTray();\n  end;\ntimer.Enabled:=TRUE;\napplicationFullyInitialized:=TRUE;\nif quitASAP then\n  begin\n  application.showmainform:=FALSE;\n  close();\n  exit;\n  end;\n\nshow();\nstrToConnColumns(serializedConnColumns);\nif startminimizedChk.checked then application.Minimize();\nif findExtOnStartupChk.checked and (externalIP = '') then\n  setStatusBarText('Search for external address failed', 30);\nupdatePortBtn();\nfixAddToHFS();\nfilesBox.setFocus();\n//loadEvents();\nformResize(NIL); // recalculate to solve graphical glitches\n\nif not tplIsCustomized then\n  runTplImport();\n\nrunEventScript('start');\n{** trying to move loadEvents() before loadCfg()\nif srv.active then\n  runEventScript('server start'); // because this event wouldn't fire at start, the server was already on\n}\nend; // finalInit\n\nfunction expertModeNeededMsg():string;\nbegin result:=if_(easyMode, 'Switch to expert mode.') end;\n\nprocedure TmainFrm.Dontlogsomefiles1Click(Sender: TObject);\nbegin\nmsgDlg(expertModeNeededMsg()\n  +#13'Select the files/folder you don''t want to be logged,'\n  +#13'then right click and select \"Don''t log\".');\nend;\n\nprocedure TmainFrm.progFrmHttpGetUpdate(sender:Tobject; buffer:pointer; len:integer);\nbegin\nwith sender as ThttpCli do\n  begin\n  progFrm.progress:=safeDiv(0.0+RcvdCount, contentLength);\n  if progFrm.cancelRequested then abort();\n  end;\nend; // progFrmHttpGetUpdate\n\nfunction purgeFilesCB(f:Tfile; childrenDone:boolean; par, par2:integer):TfileCallbackReturn;\nbegin\nresult:=[];\nif f.locked or f.isRoot() then exit;\nresult:=[FCB_RECALL_AFTER_CHILDREN];\nif f.isFile() and purgeFrm.rmFilesChk.checked and not fileExists(f.resource)\nor f.isRealFolder() and purgeFrm.rmRealFoldersChk.checked and not sysutils.directoryExists(f.resource)\nor f.isVirtualFolder() and purgeFrm.rmEmptyFoldersChk.checked and (f.node.count = 0)\nthen result:=[FCB_DELETE]; // don't dig further\nend; // purgeFilesCB\n\nprocedure TmainFrm.Properties1Click(Sender: TObject);\nbegin\nif selectedFile = NIL then exit;                                                                           \n\nfilepropFrm:=TfilepropFrm.Create(mainFrm);\ntry\n  if filepropFrm.showModal() = mrCancel then exit;\nfinally freeAndNIL(filepropFrm) end;\nVFSmodified:=TRUE;\nfilesBox.invalidate();\nend;\n\nprocedure TmainFrm.Purge1Click(Sender: TObject);\nvar\n  f: Tfile;\nbegin\nf:=selectedFile;\nif f = NIL then f:=rootFile;\nif purgeFrm = NIL then\n  application.CreateForm(TpurgeFrm, purgeFrm);\nif purgeFrm.showModal() <> mrOk then exit;\nf.recursiveApply(purgeFilesCB);\nend;\n\nprocedure TmainFrm.UninstallHFS1Click(Sender: TObject);\nbegin\nif checkMultiInstance() then exit;\nif msgDlg('Delete HFS and all settings?', MB_ICONQUESTION+MB_YESNO) <> IDYES then\n  exit;\nuninstall();\nend;\n\nprocedure TmainFrm.maxIPs1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous addresses.';\n  MSG2 = 'In this moment there are %d different addresses';\nvar\n  s: string;\n  i: integer;\nbegin\nif maxIPs > 0 then s:=intToStr(maxIPs)\nelse s:='';\nif inputquery('Max addresses', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxIPs(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxIPs = 0 then exit;\ni:=countIPs();\nif i > maxIPs then\n  msgDlg(format(MSG2, [i]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.maxIPsDLing1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous addresses downloading.';\n  MSG2 = 'In this moment there are %d different addresses downloading';\nvar\n  s: string;\n  i: integer;\nbegin\nif maxIPsDLing > 0 then s:=intToStr(maxIPsDLing)\nelse s:='';\nif inputquery('Max addresses downloading', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxIPsDLing(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxIPsDLing = 0 then exit;\ni:=countIPs(TRUE);\nif i > maxIPsDLing then\n  msgDlg(format(MSG2, [i]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.Maxlinesonscreen1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max lines on screen';\nvar\n  s: string;\nbegin\ns:=if_(logMaxLines > 0, intToStr(logMaxLines));\n  repeat\n  if not inputQuery(MSG, MSG+'.'#13+MSG_EMPTY_NO_LIMIT, s) then break;\n  try\n    logMaxLines:=strToUInt(s);\n    break;\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\n  until false;\nend;\n\nprocedure TmainFrm.Autosaveevery1Click(Sender: TObject);\nbegin autosaveClick(autosaveVFS, 'file system') end;\n\nprocedure TmainFrm.Apachelogfileformat1Click(Sender: TObject);\nresourcestring\n  MSG = 'Here you can specify how to format the log file complying Apache standard.'\n    +#13'Leave blank to get bare copy of screen on file.'\n    +#13\n    +#13'Example:'\n    +#13'   %h %l %u %t \"%r\" %>s %b';\nbegin\nInputQuery('Apache log file format', MSG, logFile.apacheFormat)\nend;\n\nprocedure TmainFrm.Bindroottorealfolder1Click(Sender: TObject);\nvar\n  f: Tfile;\n  res: string;\nbegin\nf:=selectedFile;\nif (f = NIL) or not f.isVirtualFolder() or not f.isRoot() then exit;\nres:=exePath;\nif not selectFolder('', res) then exit;\nf.setResource(res);\nexclude(f.flags, FA_VIRTUAL);\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.Unbindroot1Click(Sender: TObject);\nvar\n  f: Tfile;\nbegin\nf:=selectedFile;\nif (f = NIL) or not f.isRealFolder() or not f.isRoot() then exit;\nf.setResource('');\nf.uploadFilterMask:='';\nf.accounts[FA_UPLOAD]:=NIL;\ninclude(f.flags, FA_VIRTUAL);\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.SwitchON1Click(Sender: TObject);\nbegin toggleServer() end;\n\nprocedure TmainFrm.Switchtorealfolder1Click(Sender: TObject);\nvar\n  i: integer;\n  someLocked: boolean;\n  list: TtreeNodeDynArray;\nbegin\nif selectedFile = NIL then exit;\nsomeLocked:=FALSE;\nlist:=copySelection();\nfor i:=0 to length(list)-1 do\n  if assigned(list[i]) then\n    with nodeTofile(list[i]) do\n      if isVirtualFolder() and not isRoot() and (resource > '') then\n        if isLocked() then someLocked:=TRUE\n        else\n          begin\n          exclude(flags, FA_VIRTUAL);\n          setResource(resource);\n          setupImage();\n          setNilChildrenFrom(list, i);\n          node.DeleteChildren();\n          end;\nVFSmodified:=TRUE;\nif someLocked then msgDlg(MSG_SOME_LOCKED, MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.abortBtnClick(Sender: TObject);\nbegin stopAddingItems:=TRUE end;\n\nprocedure TmainFrm.Seelastserverresponse1Click(Sender: TObject);\nvar\n  fn: string;\nbegin\nif ipos('<html>', dyndns.lastResult) = 0 then\n  begin\n  msgDlg(dyndns.lastResult);\n  exit;\n  end;\nfn:=saveTempFile(dyndns.lastResult);\nif fn = '' then\n  begin\n  msgDlg(MSG_NO_TEMP, MB_ICONERROR);\n  exit;\n  end;\nrenameFile(fn, fn+'.html');\nexec(fn+'.html');\nend;\n\nprocedure TmainFrm.Showcustomizedoptions1Click(Sender: TObject);\nvar\n  default: TStrings;\n  current, defV, v, k: string;\n  diff: string;\nbegin\ndefault:=TStringList.create();\ndefault.text:=defaultCfg;\ncurrent:=getCfg();\ndiff:='# '+VERSION+' (build '+VERSION_BUILD+')'+CRLF;\n\nwhile current > '' do\n  begin\n  v:=chopLine(current);\n  k:=chop('=', v);\n  if ansiEndsStr('-width', k) or ansiEndsStr('-height', k)\n  or stringExists(k, ['active','window','graph-visible','graph-size','ip', 'accounts',\n    'dynamic-dns-user', 'dynamic-dns-host', 'ips-ever', 'ips-ever-connected',\n    'icon-masks-user-images', 'last-external-address', 'last-dialog-folder'])\n  then continue;\n  \n  defV:=default.values[k];\n  if defV = v then continue;\n  if k = 'dynamic-dns-updater' then\n    begin // remove login data\n    v:=decodeB64utf8(ansistring(v));\n    chop('//',v);\n    v:=chop('/',v);\n    if ansiContainsStr(v, '@') then chop('@',v);\n    v:='...'+v+'...';\n    end;\n  diff:=diff+k+'='+v+CRLF+'# default: '+defV+CRLF+CRLF;\n  end;\ndefault.free;\n\ndiffFrm.memoBox.text:=diff;\ndiffFrm.showModal();\nend;\n\nprocedure TmainFrm.useISOdateChkClick(Sender: TObject);\nbegin applyISOdateFormat() end;\n\nprocedure TmainFrm.RunHFSwhenWindowsstarts1Click(Sender: TObject);\nbegin\ndeleteFile(startupFilename); // we delete both for deactivation (of course) and before activation (to purge possible existing links to other exe files)\nif not (sender as Tmenuitem).Checked then\n  createShellLink(startupFilename, paramStr(0));\nend;\n\nprocedure TmainFrm.Runscript1Click(Sender: TObject);\nbegin\nif not fileExists(tempScriptFilename) then\n  saveTextFile(tempScriptFilename, '');\nrunScriptLast:=getMtime(tempScriptFilename);\nif runScriptFrm = NIL then\n  runScriptFrm:=TrunScriptFrm.create(self);\nrunScriptFrm.show();\nexec(getTplEditor(), '\"'+tempScriptFilename+'\"');\nend;\n\nprocedure TmainFrm.minimizeToTray();\nbegin\napplication.Minimize();\naddTray();\nshowWindow(application.handle, SW_HIDE); // hide taskbar button\ntrayed:=TRUE;\nend; // minimizeToTray\n\nprocedure TmainFrm.askFolderKindChkClick(Sender: TObject);\nbegin addFolderDefault:='' end;\n\nprocedure TmainFrm.defaultToVirtualChkClick(Sender: TObject);\nbegin addFolderDefault:='virtual' end;\n\nprocedure TmainFrm.defaultToRealChkClick(Sender: TObject);\nbegin addFolderDefault:='real' end;\n\nprocedure TmainFrm.Addicons1Click(Sender: TObject);\nvar\n  files: TStringDynArray;\n  i, n: integer;\nbegin\nif not selectFiles('', files) then exit;\nn:=images.Count;\nfor i:=0 to length(files)-1 do\n  getImageIndexForFile(files[i]);\nn:=images.Count-n;\nmsgDlg(format('%d new icons added',[n]));\nend;\n\nprocedure TmainFrm.Iconmasks1Click(Sender: TObject);\nbegin showOptions(optionsFrm.iconsPage) end;\n\nprocedure TmainFrm.Anyaddress1Click(Sender: TObject);\nbegin\nlistenOn:='';\nrestartServer();\nend;\n\nprocedure Tmainfrm.acceptOnMenuclick(sender:Tobject);\nbegin\nlistenOn:=(sender as Tmenuitem).caption;\ndelete(listenOn, pos('&',listenOn), 1);\nrestartServer();\nend; // acceptOnMenuclick\n\nprocedure TmainFrm.filesBoxEndDrag(Sender, Target: TObject; X, Y: Integer);\nbegin\nscrollFilesBox:=-1;\nfilesBox.Refresh();\nend;\n\nprocedure TmainFrm.filesBoxEnter(Sender: TObject);\nbegin setFilesBoxExtras(TRUE) end;\n\nprocedure TmainFrm.filesBoxExit(Sender: TObject);\nbegin setFilesBoxExtras(filesBox.MouseInClient) end;\n\nprocedure TmainFrm.Disable1Click(Sender: TObject);\nbegin\ndyndns.url:='';\nmsgDlg('Dynamic DNS updater disabled');\nend;\n\nprocedure TmainFrm.saveNewFingerprintsChkClick(Sender: TObject);\nresourcestring\n  MSG = 'This option creates an .md5 file for every new calculated fingerprint.'\n    +#13'Use with care to get not your disk invaded by these files.';\nbegin\nif saveNewFingerprintsChk.Checked then\n  msgDlg(MSG, MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.Createfingerprintonaddition1Click(Sender: TObject);\nresourcestring\n  MSG = 'When you add files and no fingerprint is found, it is calculated.'\n    +#13'To avoid long waitings, set a limit to file size (in KiloBytes).'\n    +#13'Leave empty to disable, and have no fingerprint created.';\nvar\n  s: string;\nbegin\nif autoFingerprint = 0 then s:=''\nelse s:=intToStr(autoFingerprint);\nif not inputquery('Auto fingerprint', MSG, s) then exit;\ntry setAutoFingerprint(strToUInt(s))\nexcept msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\nend;\n\nprocedure TmainFrm.Howto1Click(Sender: TObject);\nbegin msgDLg(getRes('uploadHowTo')) end;\n\nprocedure TmainFrm.Name1Click(Sender: TObject);\nbegin defSorting:='name' end;\n\nprocedure TmainFrm.Size1Click(Sender: TObject);\nbegin defSorting:='size' end;\n\nprocedure TmainFrm.Time1Click(Sender: TObject);\nbegin defSorting:='time' end;\n\nprocedure TmainFrm.Hits1Click(Sender: TObject);\nbegin defSorting:='hits' end;\n\nprocedure TmainFrm.Resettotals1Click(Sender: TObject);\nbegin resetTotals() end;\n\nprocedure TmainFrm.copyBtnClick(Sender: TObject);\nbegin setClip(urlBox.text) end;\n\nfunction TmainFrm.copySelection():TtreeNodeDynArray;\nvar\n  i: integer;\nbegin\nsetlength(result, filesBox.SelectionCount);\nfor i:=0 to filesBox.SelectionCount-1 do result[i]:=filesbox.selections[i];\nend; // copySelection\n\nprocedure TmainFrm.menuMeasure(sender:Tobject; cnv: Tcanvas; var w:integer; var h:integer);\nbegin\nwith sender as Tmenuitem do\n  if isLine() then\n    w:=cnv.textwidth(hint+'----')\n  else\n    w:=cnv.textWidth(caption+'----')+images.Width;\nh:=getSystemMetrics(SM_CYMENU);\nend;\n\nprocedure TmainFrm.menuDraw(sender:Tobject; cnv: Tcanvas; r:Trect; selected:boolean);\nvar\n  mi: Tmenuitem;\n  s: string;\n  i: integer;\nbegin\nmi:=sender as Tmenuitem;\nif mi.IsLine() then\n  begin\n  i:=(r.Bottom+r.top) div 2;\n  cnv.Pen.Color:=clBtnHighlight;\n  cnv.MoveTo(r.Left, i);\n  cnv.lineTo(r.right, i);\n  cnv.Pen.Color:=clBtnShadow;\n  cnv.MoveTo(r.Left, i-1);\n  cnv.lineTo(r.right, i-1);\n\n  if mi.hint = '' then exit;\n  s:=' '+mi.hint+' ';\n  inc(r.Top, cnv.TextHeight(s) div 5);\n  cnv.font.color:=clBtnHighlight;\n  drawText(cnv.handle, pchar(s), -1, r, DT_VCENTER or DT_CENTER);\n  setBkMode(cnv.handle, TRANSPARENT);\n  cnv.font.color:=clBtnShadow;\n  dec(r.Left);\n  dec(r.top);\n  drawText(cnv.handle, pchar(s), -1, r, DT_VCENTER or DT_CENTER);\n  exit;\n  end;\ncnv.fillRect(r);\ninc(r.left, images.width*2);\ninc(r.top,2);\ndrawText(cnv.handle, pchar(mi.caption), -1, r, DT_LEFT or DT_VCENTER);\ndec(r.left, images.width*2);\n\nif mi.ImageIndex >= 0 then\n  images.draw(cnv, r.left+1, r.top, mi.ImageIndex);\nif mi.Checked then\n  begin\n  cnv.font.Name:='WingDings';\n  with cnv.Font do size:=size+2;\n  cnv.TextOut(r.Left+images.width, r.Top, '\u00fc'); // check mark\n  end;\nend;\n\nprocedure TmainFrm.wrapInputQuery(sender:Tobject);\nvar\n  Form: TCustomForm;\n  Prompt: TLabel;\n  Edit: TEdit;\n  Ctrl: TControl;\n  I, J, ButtonTop: Integer;\nbegin\nForm := Screen.ActiveCustomForm;\nif (Form=NIL) or (Form.ClassName<>'TInputQueryForm') then\n  Exit;\n\nedit:=NIL; prompt:=NIL; // hush compiler warning\nfor I := 0 to Form.ControlCount-1 do\n  begin\n  Ctrl := Form.Controls[i];\n  if Ctrl is TLabel then\n    Prompt := TLabel(Ctrl)\n  else if Ctrl is TEdit then\n    Edit := TEdit(Ctrl);\n  end;\n  \nEdit.SetBounds(Prompt.Left, Prompt.Top + Prompt.Height + 5, max(200, Prompt.Width), Edit.Height);\nForm.ClientWidth := (Edit.Left * 2) + Edit.Width;\nButtonTop := Edit.Top + Edit.Height + 15;\n\nJ := 0;\nfor I := 0 to Form.ControlCount-1 do\n  begin\n  Ctrl := Form.Controls[i];\n  if Ctrl is TButton then\n    begin\n    Ctrl.SetBounds(Form.ClientWidth - ((Ctrl.Width + 15) * (2-J)), ButtonTop, Ctrl.Width, Ctrl.Height);\n    Form.ClientHeight := Ctrl.Top + Ctrl.Height + 13;\n    Inc(J);\n    end;\n  end;\nend;\n\nvar\n  dll: HMODULE;\n\nINITIALIZATION\nrandomize();\nsetErrorMode(SEM_FAILCRITICALERRORS);\nexePath:=extractFilePath(ExpandFileName(paramStr(0)));\ncfgPath:=exePath;\n// we give priority to exePath because some people often clear the temp folder\ntmpPath:=exePath;\nif saveTextfile(tmpPath+'test.tmp','') then\n  deleteFile(tmpPath+'test.tmp')\nelse\n  tmpPath:=getTempDir();\nlastUpdateCheckFN:=tmpPath+'HFS last update check.tmp';\nsetCurrentDir(exePath); // sometimes people mess with the working directory, so we force it to the exe path\nif fileExists('default.tpl') then\n  defaultTpl:=loadTextfile('default.tpl')\nelse\n  defaultTpl:=getRes('defaultTpl');\ntpl:=Ttpl.create();\ndefSorting:='name';\ndmBrowserTpl:=Ttpl.create(getRes('dmBrowserTpl'));\nfilelistTpl:=Ttpl.create(getRes('filelistTpl'));\nglobalLimiter:=TspeedLimiter.create();\nip2obj:=THashedStringList.create();\netags:=THashedStringList.create();\nsessions:=Tsessions.create();\nipsEverConnected:=THashedStringList.create();\nipsEverConnected.sorted:=TRUE;\nipsEverConnected.duplicates:=dupIgnore;\nipsEverConnected.delimiter:=';';\nlogMaxLines:=2000;\ntrayShows:='downloads';\nflashOn:='download';\nforwardedMask:='127.0.0.1';\nrunningOnRemovable:=DRIVE_REMOVABLE = GetDriveType(Pchar(exePath[1]+':\\'));\netags.values['exe']:=strMD5(dateToHTTP(getMtimeUTC(paramStr(0))));\n\ndll:=GetModuleHandle('kernel32.dll');\nif dll <> HINSTANCE_ERROR then\n  setThreadExecutionState:=getprocaddress(dll, 'SetThreadExecutionState');\n\ntoDelete:=Tlist.create();\nusersInVFS:=TusersInVFS.create();\n\nopenInBrowser:='*.htm;*.html;*.jpg;*.jpeg;*.gif;*.png;*.txt;*.swf;*.svg';\nMIMEtypes:=toSA([\n\t'*.htm;*.html', 'text/html',\n  '*.jpg;*.jpeg;*.jpe', 'image/jpeg',\n  '*.gif', 'image/gif',\n  '*.png', 'image/png',\n  '*.bmp', 'image/bmp',\n  '*.ico', 'image/x-icon',\n  '*.mpeg;*.mpg;*.mpe', 'video/mpeg',\n  '*.avi', 'video/x-msvideo',\n  '*.txt', 'text/plain',\n  '*.css', 'text/css',\n  '*.js',  'text/javascript',\n  '*.mkv', 'video/x-matroska'\n]);\n\nsystemimages:=getSystemimages();\nsaveMode:=SM_USER;\nlastDialogFolder:=getCurrentDir();\nautoupdatedFiles:=TstringToIntHash.create();\niconsCache:=TiconsCache.create();\ndyndns.active:=TRUE;\nconnectionsInactivityTimeout:=60; // 1 minute\nstartupFilename:=getShellFolder('Startup')+'\\HFS.lnk';\ntempScriptFilename:=getTempDir()+'hfs script.tmp';\n\nlogfile.apacheZoneString:=if_(GMToffset < 0, '-','+')\n  +format('%.2d%.2d', [abs(GMToffset div 60), abs(GMToffset mod 60)]);\n\nFINALIZATION\n\nprogFrm.free;\ntoDelete.free;\ntpl.free;\nfilelistTpl.free;\nautoupdatedFiles.free;\niconsCache.free;\nusersInVFS.free;\nglobalLimiter.Free;\nip2obj.free;\nipsEverConnected.free;\netags.free;\n\nend.\n", "{\nCopyright (C) 2002-2012  Massimo Melina (www.rejetto.com)\n\nThis file is part of HFS ~ HTTP File Server.\n\n    HFS is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    HFS is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with HFS; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n}\nunit scriptLib;\n\ninterface\n\nuses main, classesLib, iniFiles, types;\n\ntype\n  TmacroData = record\n    cd: TconnData;\n    tpl: Ttpl;\n    folder, f: Tfile;\n    afterTheList, archiveAvailable, hideExt, breaking: boolean;\n    aliases, tempVars: THashedStringList;\n    table: TStringDynArray;\n    logTS: boolean;\n    end;\n\nvar\n  defaultAlias: THashedStringList;\n  staticVars : THashedStringList; // these scripting variables are held for the whole run-time\n  eventScripts: Ttpl;\n\nfunction tryApplyMacrosAndSymbols(var txt:string; var md:TmacroData; removeQuotings:boolean=true):boolean;\nfunction macroQuote(s:string):string;\nfunction runScript(script:string; table:TstringDynArray=NIL; tpl_:Ttpl=NIL; f:Tfile=NIL; folder:Tfile=NIL; cd:TconnData=NIL):string;\nfunction runEventScript(event:string; table:TStringDynArray=NIL; cd:TconnData=NIL):string;\nprocedure resetLog();\n\nimplementation\n\nuses windows, utilLib, trayLib, parserLib, graphics, classes, sysutils, StrUtils,\n  hslib, comctrls, math, controls, forms, clipbrd, MMsystem;\n\nconst\n  HEADER = '<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><style>'\n  +#13'dt, dd { margin:0; padding:0.2em 0.5em; white-space:pre; display:block; font-family:monospace; } dt { background:#dfd; } dd { background:#fdd; }'\n  +#13'</style></head><body>';\n\nvar\n  stopOnMacroRename: boolean; // this ugly global var is used to avoid endless recursion on a renaming rename event. this method won't work on a multithreaded system, but i opted for it because otherwise the changes would have been big.\n  cachedTpls: TcachedTpls;\n\nfunction macrosLog(textIn, textOut:string; ts:boolean=FALSE):boolean;\nvar\n  s: string;\nbegin\ns:='';\nif ts then\n    s:='<hr>'+dateTimeToStr(now())+CRLF;\ns:=s+#13'<dt>'+htmlEncode(textIn)+'</dt><dd>'+htmlEncode(textOut)+'</dd>';\nresult:=appendTextFile(MACROS_LOG_FILE, s);\nend; // macrosLog\n\nprocedure resetLog();\nbegin saveFile(MACROS_LOG_FILE, '') end;\n\nfunction expandLinkedAccounts(account:Paccount):TStringDynArray;\nvar\n  i: integer;\nbegin\nresult:=NIL;\nif account = NIL then exit;\ni:=0;\nresult:=account.link;\nwhile i < length(result) do\n  begin\n  account:=getAccount(result[i], TRUE);\n  inc(i);\n  if (account = NIL) or not account.enabled then continue;\n  addUniqueArray(result, account.link);\n  end;\nend; // expandLinkedAccounts\n\nfunction encodeMarkers(s:string):string;\nvar\n  i: integer;\n  t: string;\nbegin\nfor i:=0 to length(MARKERS)-1 do\n  begin\n  t:=MARKERS[i];\n  replace(t, '&#'+intToStr(charToUnicode(t[1]))+';', 1,1);\n  s:=replaceStr(s, MARKERS[i], t);\n  end;\nresult:=s;\nend; // encodeMarkers\n\nfunction noMacrosAllowed(s:string):string;\n// prevent hack attempts\nvar\n  i: integer;\nbegin\ni:=1;\nenforceNUL(s);\n  repeat\n  i:=findMacroMarker(s, i);\n  if i = 0 then break;\n  replace(s, '&#'+intToStr(charToUnicode(s[i]))+';', i,i);\n  until false;\ns:=reReplace(s,'%([-a-z0-9]+%)','&#37;$1', 'mi');\nresult:=s;\nend; // noMacrosAllowed\n\nfunction isMacroQuoted(s:string):boolean;\nbegin result:=ansiStartsStr(MARKER_QUOTE, s) and ansiEndsStr(MARKER_UNQUOTE, s) end;\n\nfunction macroQuote(s:string):string;\nvar\n  t: string;\nbegin\nenforceNUL(s);\nif not anyMacroMarkerIn(s) then\n  begin\n  result:=s;\n  exit;\n  end;\n// an UNQUOTE would invalidate our quoting, so let's encode any of it\nt:=MARKER_UNQUOTE;\nreplace(t, '&#'+intToStr(charToUnicode(t[1]))+';', 1,1);\nresult:=MARKER_QUOTE+replaceStr(s, MARKER_UNQUOTE, t)+MARKER_UNQUOTE\nend; // macroQuote\n\nfunction macroDequote(s:string):string;\nbegin\nresult:=s;\ns:=trim(s);\nif isMacroQuoted(s) then\n  result:=copy(s, length(MARKER_QUOTE)+1, length(s)-length(MARKER_QUOTE)-length(MARKER_UNQUOTE) );\nend; // macroDequote\n\nfunction cbMacros(fullMacro:string; pars:Tstrings; cbData:pointer):string;\nvar\n  md: ^TmacroData;\n  name, p: string;\n  unnamedPars: integer; // this is a guessing of the number of unnamed parameters. just guessing because there's no true distinction between a parameter \"value\" named \"key\", and parameter \"key=value\"\n\n  procedure macroError(msg:string);\n  begin result:='<div class=macroerror>macro error: '+name+nonEmptyConcat('<br>',msg)+'</div>' end;\n\n  procedure deprecatedMacro(what:string=''; instead:string='');\n  begin mainfrm.add2log('WARNING, deprecated macro: '+first(what, name)+nonEmptyConcat(' - Use instead: ',instead), NIL, clRed) end;\n\n  function satisfied(p:pointer):boolean;\n  begin\n  result:=assigned(p);\n  if not result then\n    macroError('cannot be used here');\n  end;\n\n  procedure unsatisfied(b:boolean=TRUE);\n  begin if b then macroError('cannot be used here') end;\n\n  function parEx(idx:integer; name:string=''; doTrim:boolean=TRUE):string; overload;\n  var\n    i: integer;\n  begin\n  result:='';\n  if name > '' then\n    begin\n    i:=pars.IndexOfName(name);\n    if i >= 0 then\n      begin\n      result:=pars.valueFromIndex[i];\n      if doTrim then result:=trim(result);\n      exit;\n      end;\n    end;\n  if (idx < 0) // no numeric index accept\n  or (idx >= pars.count) // invalid index\n  or (name > '') and (pars.names[idx] > '') and not anycharIn(' '#13#10, pars.names[idx]) // this numerical index was already taken by a valid mnemonic name\n  then\n    raise Exception.create('invalid parameter index');\n  result:=pars[idx];\n  if doTrim then result:=trim(result);\n  end; // parEx\n\n  function parEx(name:string; doTrim:boolean=TRUE):string; overload;\n  begin result:=parEx(-1, name, doTrim) end;\n\n  function par(idx:integer; name:string=''; doTrim:boolean=TRUE):string; overload;\n  begin\n  try result:=parEx(idx, name, doTrim)\n  except result:='' end\n  end;\n\n  function par(name:string=''; doTrim:boolean=TRUE; defval:string=''):string; overload;\n  begin\n  try result:=parEx(-1, name, doTrim)\n  except result:=defval end\n  end;\n\n  function parI(idx:integer):int64; overload;\n  begin result:=strToInt64(par(idx)) end;\n\n  function parI(idx:integer; def:int64):int64; overload;\n  begin result:=strToInt64Def(par(idx), def) end;\n\n  function parI(name:string; def:int64):int64; overload;\n  begin result:=strToInt64Def(par(name), def) end;\n\n  function parF(idx:integer):extended; overload;\n  begin result:=strToFloat(par(idx)) end;\n\n  function parF(idx:integer; def:extended):extended; overload;\n  begin result:=strToFloatDef(par(idx), def) end;\n\n  function parF(name:string; def:extended):extended; overload;\n  begin result:=strToFloatDef(par(name), def) end;\n\n  // note this function works on N parameters\n  function parExist(names: array of string):boolean;\n  var\n    i: integer;\n  begin\n  result:=FALSE;\n  for i:=0 to length(names)-1 do\n    if pars.indexOfName(names[i]) < 0 then\n      exit;\n  result:=TRUE;\n  end; // parExist\n\n  procedure trueIf(condition:boolean);\n  begin if condition then result:='1' else result:='' end;\n\n  // this is for cases where normally we want a \"clean\" output. User can still detect outcome by using macro \"length\".\n  // Reason for having this instead of using in place a simple \"result:=if_(cond, ' ')\" is to evidence our purpose. It's not faster or cleaner, it's more semantic.\n  procedure spaceIf(condition:boolean);\n  begin if condition then result:=' ' else result:='' end;\n\n  function isFalse(s:string):boolean;\n  begin result:=(s='') or (strToFloatDef(s,1) = 0) end;\n\n  function isTrue(s:string):boolean; inline;\n  begin result:=not isFalse(s) end;\n\n  function getVarSpace(var varname:string):THashedStringList;\n  begin\n  varname:=trim(varname);\n  if ansiStartsStr(G_VAR_PREFIX, varname) then\n    begin\n    result:=staticVars;\n    delete(varname,1,length(G_VAR_PREFIX));\n    end\n  else if satisfied(md.cd) then\n    result:=md.cd.vars\n  else if satisfied(md.tempVars) then\n    result:=md.tempVars\n  else\n    raise Exception.create('no namespace available');\n  end; // getVarSpace\n\n  function getVar(varname:string):string; overload;\n  begin result:=getVarSpace(varname).values[varname] end;\n\n  // if par with name exists, then it's a var name, otherwise it's a constant value at specified index\n  function parVar(parname:string; idx:integer):string; overload;\n  begin\n  if parExist([parname]) then\n    result:=getVar(par(parname))\n  else\n    result:=pars[idx];\n  end; // parVar\n\n  function setVar(varname, value:string; space:THashedStringList=NIL):boolean;\n  var\n    o: Tobject;\n    i: integer;\n  begin\n  result:=FALSE;\n  if space = NIL then\n    space:=getVarSpace(varname);\n  if not satisfied(space) then exit;\n  i:=space.indexOfName(varname);\n  if i < 0 then\n    if value = '' then exit // all is good the way it is\n    else i:=space.add(varname+'='+value)\n  else\n    if value > '' then // in case of empty value, there's no need to assign, because we are going to delete it (after we cleared the bound object)\n      space.valueFromIndex[i]:=value;\n\n  assert(i >= 0, 'setVar: i<0');\n  // the previous hash object linked to this data is not valid anymore, and must be freed\n  o:=space.objects[i];\n  freeAndNIL(o);\n\n  if value = '' then\n    space.delete(i)\n  else\n    space.objects[i]:=NIL;\n  result:=TRUE;\n  end; // setVar\n\n  // we wrap pos() to switch between case sensitivity\n  function pos_(caseSensitive:boolean; ss, s:string; ofs:integer=1):integer;\n  begin\n  if caseSensitive then result:=posEx(ss,s,ofs)\n  else result:=ipos(ss,s,ofs)\n  end; // pos_\n\n  procedure allLogic(isAnd:boolean); // when not \"isAnd\", then it isOr ;-)\n  var\n    i: integer;\n  begin\n  // AND will return first FALSE value, or having none, the last TRUE value.\n  // OR will return last TRUE value, or having none, last value. \n  result:='';\n  for i:=0 to pars.count-1 do\n    begin\n    result:=par(i);\n    if isAnd xor isTrue(result) then exit;\n    end;\n  end; // allLogic\n\n  procedure substring();\n  var\n    i, j: integer;\n    s: string;\n    what2inc: integer;\n    caseSens: boolean;\n  begin\n  result:='';\n\n  // input what to be included in the result\n  s:=par('include');\n  try what2inc:=strToInt(s)\n  except // we also support the following values\n    if s = 'none' then what2inc:=0\n    else if s = 'both' then what2inc:=3\n    else if s = '1+2' then what2inc:=3\n    else what2inc:=1; // by default we include only the first delimiter\n    end;\n\n  caseSens:=isTrue(par('case'));\n\n  // find the delimiters\n  s:=macroDequote(par(2));\n  if pars[0] = '' then i:=1\n  else i:=pos_(caseSens, pars[0], s); // we don' trim this, so you can use blank-space as delimiter\n  if i = 0 then exit;\n  j:=pos_(caseSens, pars[1], s, i+1);\n  if j = 0 then j:=length(s)+1;\n\n  // apply what2inc\n  if what2inc and 1 = 0 then\n    inc(i, length(pars[0]));\n  if what2inc and 2 > 0 then\n    inc(j, length(pars[1]));\n\n  // end of the story\n  result:=macroQuote(copy(s, i, j-i));\n  end; // substring\n\n  procedure switch();\n  var\n    what, sep: string;\n    i, j: integer;\n    a: TStringDynArray;\n  begin\n  what:=par(0);\n  sep:=first(pars[1], ' '); // we don' trim this, so you can use blank-space as separator\n  i:=2;\n  while i < pars.count do\n    begin\n    if i = pars.count-1 then\n      begin\n      result:=macroDequote(par(i));\n      exit;\n      end;\n    a:=split(sep, par(i));\n    for j:=0 to length(a)-1 do\n      if sameText(a[j], what) then\n        begin\n        result:=macroDequote(par(i+1));\n        exit;\n        end;\n    inc(i, 2);\n    end;\n  result:='';\n  end; // switch\n\n  procedure cut();\n  var\n    from, upTo, l: integer;\n    s, v: string;\n  begin\n  v:=par('var');\n  if v = '' then\n    s:=par(2,'what')\n  else\n    s:=getVar(v);\n  l:=length(s);\n\n  from:=strToIntDef(par(0,'from'), 1);\n  if from < 0 then from:=l+from+1;\n\n  try upTo:=strToInt(parEx('to'))\n  except\n    upTo:=strToIntDef(par(1,'size'), 0);\n    if upTo = 0 then\n      upTo:=l\n    else if upTo > 0 then\n      upTo:=from+upTo-1\n    else\n      upTo:=l+upTo;\n    end;\n    \n  result:=substr(s, from, upTo);\n  try setVar(parEx('remainder'), substr(s,1,from-1)+substr(s,upTo+1));\n  except end;\n  if v = '' then exit;\n  setVar(v, result);\n  result:='';\n  end; // cut\n\n  procedure minOrMax();\n  var\n    i: integer;\n    r, v: real;\n    min: boolean;\n  begin\n  min:=name='min';\n  r:=parF(0);\n  for i:=1 to pars.Count-1 do\n    begin\n    v:=parF(i);\n    if (v < r) and min\n    or (v > r) and not min then\n      r:=v;\n    end;\n  result:=floatToStr(r);\n  end; // minOrMax\n\n  procedure getUri();\n  var\n    i, ex, eq: integer;\n    vars: Tstrings;\n    s: string;\n  begin\n  if not satisfied(md.cd) then exit;\n  try\n    result:=md.cd.conn.request.url;\n    if pars.count < 2 then exit;\n    s:=result;\n    result:=chop('?', s);\n    vars:=TstringList.create();\n    try\n      vars.delimiter:='&';\n      vars.quoteChar:=#0;\n      vars.delimitedText:=s;\n      if pars.count > 1 then\n        for i:=1 to pars.count-1 do\n          begin\n          s:=par(i);\n          if s = '' then continue;\n          eq:=pos('=', s);\n          if eq = 0 then\n            begin\n            if vars.indexOf(s) < 0 then\n              vars.add(pars[i]);\n            continue;\n            end;\n          ex:=vars.indexOfName(chop(eq,s));\n          if ex < 0 then\n            if s = '' then\n              continue   // the parameter didn't exist, and we are trying to empty it\n            else\n              vars.add(par(i))  // didn't exist, put the whole\n          else\n            if s = '' then\n              vars.delete(ex) //  exists, but we are trying to empty it\n            else\n              vars.valueFromIndex[ex]:=s; // exists, change the value\n          end;\n      if vars.count = 0 then exit;\n      for i:=vars.Count-1 downto 0 do\n        if vars[i] = '' then\n          vars.delete(i);\n      result:=result+'?'+vars.delimitedText;\n    finally vars.free end;\n  finally result:=macroQuote(result) end;\n  end; // getUri\n\n  procedure section(ofs:integer);\n  var\n    t: Ttpl;\n    s: string;\n  begin\n  if not satisfied(md.tpl) then exit;\n  s:=par(ofs);\n  if (par('file') = '') and ((s = '') or (pos('=',s) > 0)) then\n    begin // current template\n    result:='';\n    t:=md.tpl;\n    ofs:=parI('back', 0);\n    while ofs > 0 do\n      begin\n      dec(ofs);\n      t:=t.over;\n      if t = NIL then exit;\n      end;\n    try result:=t[p] except end;\n    exit;\n    end;\n  // template in other file\n\n  t:=Ttpl.create;\n  try\n    t.fullText:=loadTextFile(par(ofs, 'file'));\n    result:=t[p];\n  finally t.free end;\n  // templates outside hfs folder get quoted for security reasons\n  if anyCharIn('\\/', par(ofs)) then\n    result:=macroQuote(result);\n  end; // section\n\n  function urlVar(k:string):string;\n  var\n    s: string;\n  begin\n  if not satisfied(md.cd) then exit;\n  s:=md.cd.urlvars.values[k];\n  if (s = '') and (md.cd.urlvars.indexOf(k) >= 0) then s:='1';\n  try\n    result:=noMacrosAllowed(s);\n    setVar(parEx('var'), result); // if no var is specified, it will break here, and result will have the value\n    result:='';\n  except end;\n  end; // urlVar\n\n  function maybeUrlvar(k:string):string;\n  begin\n  if (k = '') or (k[1] <> '?') then result:=k\n  else result:=urlvar(copy(k,2,MAXINT));\n  end; // maybeUrlvar\n\n  function compare(op,p1,p2:string):boolean;\n  var\n    r1,r2: double;\n    c: integer;\n  begin\n  try\n    r1:=StrToFloat(p1);\n    r2:=StrToFloat(p2);\n    c:=compare_(r1,r2)\n  except\n    c:=ansiCompareText(p1,p2);\n    end;\n  if op = '=' then result:= c=0\n  else if op = '>' then result:= c>0\n  else if op = '<' then result:= c<0\n  else if op = '>=' then result:= c>=0\n  else if op = '<=' then result:= c<=0\n  else if (op = '<>') or (op = '!=') then result:= c<>0\n  else result:=FALSE;\n  end; // compare\n\n  procedure infixOperators(ops:array of string);\n  var\n    i, j: integer;\n    s: string;\n  begin\n  if pars.count > 0 then exit;\n  for i:=0 to length(ops)-1 do\n    begin\n    j:=pos(ops[i], name);\n    if j = 0 then continue;\n    s:=trim(chop(j, length(ops[i]), name));\n    trueIf(compare(ops[i], maybeUrlvar(s), maybeUrlvar(trim(name))));\n    exit;\n    end;\n  end; // infixOperators\n\n  procedure call(code:string; ofs:integer=0);\n  var\n    i: integer;\n  begin\n  result:=code;\n  if pars.count=0 then\n    exit;\n  for i:=ofs to pars.Count-1 do\n    result:=replaceStr(result, format('$%d',[i-ofs+1]), pars[i]);\n  for i:=pars.count to pars.count+5 do\n    result:=replaceStr(result, format('$%d',[i-ofs+1]), '');\n  end; // call\n\n  procedure breadcrumbs();\n  var\n    e, d: string;\n    ae, ad: TstringDynArray;\n    i: integer;\n    fld: Tfile;\n    freeIt: boolean;\n  begin\n  freeIt:=FALSE;\n  if md.f = NIL then\n    fld:=md.folder\n  else\n    begin\n    fld:=md.f.parent;\n    if md.f.isTemp() then\n      begin\n      e:=extractFilePath(md.f.resource);\n      if length(e) > 3 then\n        e:=excludeTrailingPathDelimiter(e);\n      if e <> fld.resource then\n        begin\n        fld:=Tfile.createTemp(e);\n        fld.node:=md.f.node;\n        freeIt:=TRUE;\n        end\n      end;\n    end;\n\n  if not satisfied(fld) then exit;\n  e:=htmlEncode(encodeMarkers(fld.url(TRUE)));\n  d:=htmlEncode(encodeMarkers(fld.getFolder()+fld.name+'/'));\n  ae:=split('/', e);\n  ad:=split('/', d);\n  p:=macroDequote(p);\n  result:='';\n  e:='';\n  i:=length(ae)-1;\n  if ae[i] = '' then\n    dec(i);\n  for i:=parI('from',0) to i do\n    begin\n    e:=e+ae[i]+'/';\n    result:=result+xtpl(p, [\n      '%bread-url%', e,\n      '%bread-name%', ad[i],\n      '%bread-idx%', intToStr(i)\n    ]);\n    end;\n\n  if freeIt then\n    freeAndNIL(fld);\n  end; // breadcrumbs\n\n  procedure inc_(v:integer=+1);\n  begin\n  result:='';\n  try setVar(p, intToStr(strToIntDef(getVar(p),0)+v*parI(1,1))) except end;\n  end; // inc_\n\n  procedure convert();\n  begin\n  if sameText(p, 'ansi') and sameText(par(1), 'utf-8') then\n    result:=ansiToUTF8(ansistring(par(2)))\n  else if sameText(p, 'utf-8') and sameText(par(1), 'ansi') then\n    result:=utf8ToAnsi(ansistring(par(2)))\n  end; // convert\n\n  procedure encodeuri();\n  var\n    i: integer;\n    cs: Tcharset;\n  begin\n  result:='';\n  try cs:=[#0..#255]-strToCharset(parEx('only'));\n  except\n    cs:=['a'..'z','A'..'Z','0'..'9',',','/','#','&','?',':','$','@','=','+']\n      -strToCharset(par('add'))+strToCharset(par('not'));\n    end;\n  for i:=1 to length(p) do\n    if charInSet(p[i], cs) then\n      result:=result+p[i]\n    else\n      result:=result+'%'+intToHex(ord(p[i]),2)\n  end; // encodeuri\n\n  procedure addFolder();\n  var\n    parent: Ttreenode;\n    f, old: Tfile;\n    fn, name: string;\n\n    // extract the path from \"name\", if any, and assign it to \"parent\"\n    function validateAndExtractParent():boolean;\n    var\n      i: integer;\n      parentF: Tfile;\n    begin\n    result:=TRUE;\n    i:=lastDelimiter('/',name);\n    if i = 0 then exit;\n    result:=FALSE;\n    parentf:=mainfrm.findFilebyURL(chop(i+1, 0, name), NIL, FALSE);\n    if parentf = NIL then exit;\n    parent:=parentf.node; // ok, this is where we'll add the folder\n    result:=TRUE;\n    end; // validateAndExtractParent\n\n  begin\n  result:='';\n  if not stringExists(p, ['real','virtual']) then exit;\n\n  parent:=NIL;\n  if assigned(md.folder) then\n    parent:=md.folder.node;\n\n  if p = 'virtual' then\n    begin\n    name:=par(1);\n    if not validateAndExtractParent() then exit;\n    f:=Tfile.createVirtualFolder(name);\n    end\n  else\n    begin\n    fn:=uri2diskMaybe(par(1));\n    if not isAbsolutePath(fn) and assigned(md.folder) then\n      fn:=expandFileName(md.folder.resource+'\\'+fn);\n    if not directoryExists(fn) then exit; // the real folder must exists on disk\n\n    // is a name specified in the third parameter, or should we deduce it from the disk path?\n    name:=par(2);\n    if (name = '') or containsStr(name,'=') then\n      name:=extractFileName(fn);\n\n    if not validateAndExtractParent() then exit;\n    f:=Tfile.create(fn);\n    f.name:=name;\n    end;\n\n  if not validFilename(f.name) then\n    begin\n    f.free;\n    exit;\n    end;\n\n  old:=mainfrm.findFilebyURL(f.name, nodeToFile(parent), FALSE);\n  if assigned(old) then\n    if not old.isRoot()\n    and (not parExist(['overwrite']) or isTrue(par('overwrite'))) then\n      try old.node.delete() except end // delete existing one\n    else\n      begin\n      f.free;\n      exit;\n      end;\n\n  if mainfrm.addFile(f, parent, TRUE) = NIL then\n    f.free\n  else\n    spaceIf(TRUE)\n  end; // addFolder\n\n  procedure setItem();\n  var\n    f: Tfile;\n    act: TfileAction;\n\n    function get(prefix:string):TStringDynArray;\n    begin\n    result:=onlyExistentAccounts(split(';', parEx(prefix+FILEACTION2STR[act])));\n    uniqueStrings(result);\n    end;\n\n    procedure setAttr(a:TfileAttribute; parName:string);\n    begin\n    try\n      if isTrue(parEx(parname)) then\n        include(f.flags, a)\n      else\n        exclude(f.flags, a);\n    except end;\n    end; // setAttr\n\n  begin\n  result:='';\n  f:=mainfrm.findFileByURL(p, md.folder);\n  if f = NIL then exit; // doesn't exist\n\n  try f.setDynamicComment(macroDequote(parEx('comment'))) except end;\n  try\n    f.name:=parEx('name');\n    if assigned(f.node) then\n      f.node.text:=f.name;\n  except end;\n  try f.resource:=parEx('resource') except end;\n  try f.diffTpl:=parEx('diff template') except end;\n  try f.filesFilter:=parEx('files filter') except end;\n  try f.foldersFilter:=parEx('folders filter') except end;\n\n  // following commands make no sense on temporary items\n  if freeIfTemp(f) then exit;\n\n  setAttr(FA_HIDDEN, 'hide');\n  setAttr(FA_HIDDENTREE, 'hide tree');\n  setAttr(FA_DONT_LOG, 'no log');\n  setAttr(FA_ARCHIVABLE, 'archivable');\n  setAttr(FA_BROWSABLE, 'browsable');\n  setAttr(FA_DL_FORBIDDEN, 'download forbidden');\n  if f.isFolder() then\n    try f.dontCountAsDownloadMask:=parEx('not as download') except end\n  else\n    setAttr(FA_DONT_COUNT_AS_DL, 'not as download');\n\n  for act:=low(act) to high(act) do\n    begin\n    try f.accounts[act]:=get('') except end;\n    try addUniqueArray(f.accounts[act], get('add ')) except end;\n    try removeArray(f.accounts[act], get('remove ')) except end;\n    end;\n  VFSmodified:=TRUE;\n  mainfrm.filesBox.repaint();\n  end; // setItem\n\n  function getItemIcon(f:Tfile):string;\n  begin\n  if f = NIL then\n    result:=''\n  else if (f.icon >= 0) or (mainfrm.useSystemIconsChk.checked and f.isFile()) then\n    result:='/~img'+intToStr(f.getSystemIcon())\n  else if f.isFile() then\n    result:='/~img_file'\n  else if f.isFolder() then\n    if FA_UNIT in f.flags then\n      result:=format('/~img%d', [f.getIconForTreeview()])\n    else\n      result:='/~img_folder'\n  else if f.isLink() then\n    result:='/~img_link'\n  else\n    result:='';\n  end; // getItemIcon\n\n  procedure deleteItem();\n  var\n    f: Tfile;\n  begin\n  f:=mainfrm.findFileByURL(p);\n  spaceIf(assigned(f)); // so you can know if something really has been deleted\n  if f = NIL then exit; // doesn't exist\n  mainFrm.remove(f.node);\n  VFSmodified:=TRUE;\n  end; // deleteItem\n\n  procedure getItem();\n  var\n    f: Tfile;\n    act: TfileAction;\n    w: string;\n\n    function getAttr(name:string; a:TfileAttribute):boolean;\n    begin\n    result:= w = name;\n    if result then\n      trueIf(a in f.flags);\n    end; // setAttr\n\n  begin\n  result:='';\n  f:=mainfrm.findFileByURL(p, md.folder);\n  if f = NIL then exit; // doesn't exist\n\n  try\n    w:=par(1);\n    if w = 'exists' then\n      result:='1'\n    else if w = 'comment' then\n      result:=f.getDynamicComment()\n    else if w = 'resource' then\n      result:=f.resource\n    else if w = 'icon' then\n      result:=getItemIcon(f)\n    else if getAttr('hide', FA_HIDDEN)\n      or getAttr('hide tree', FA_HIDDENTREE)\n      or getAttr('no log', FA_DONT_LOG) then\n      exit\n    else if w = 'not as download' then\n      if f.isFolder() then\n        result:=f.dontCountAsDownloadMask\n      else\n        trueIf(FA_DONT_COUNT_AS_DL in f.flags);\n\n    for act:=low(act) to high(act) do\n      if compareText(w, FILEACTION2STR[act]) = 0 then\n        begin\n        result:=join(';', f.accounts[act]);\n        exit;\n        end;\n  finally freeIfTemp(f) end;\n  end; // getItem\n\n  procedure foreach();\n  var\n    i, e: integer;\n    s, code: string;\n  begin\n  e:=pars.count-2; // 3 parameters minimum (the check is outside)\n  code:=macroDequote(par(pars.count-1));\n  with TfastStringAppend.create do\n    try\n      for i:=1 to e do\n        begin\n        setVar(p, par(i));\n        s:=code;\n        applyMacrosAndSymbols(s, cbMacros, cbData);\n        append(s);\n        end;\n      result:=reset();\n    finally free end;\n  end; // foreach\n\n  procedure for_();\n  var\n    b, e, i, d: integer;\n    s, code: string;\n  begin\n  try\n    b:=strToInt(par(1));\n    e:=strToInt(par(2));\n    try\n      d:=strToInt(par(3));\n      code:=par(4);\n    except\n      d:=1;\n      code:=par(3);\n      end;\n    if d = 0 then exit;\n    if (e < b) and (d > 0) then d:=-d; // we care\n    code:=macroDequote(code);\n    with TfastStringAppend.create do\n      try\n        for i:=1 to (e-b) div d+1 do\n          begin\n          setVar(p, intToStr(b));\n          s:=code;\n          applyMacrosAndSymbols(s, cbMacros, cbData);\n          append(s);\n          inc(b, d);\n          end;\n        result:=reset();\n      finally free end;\n  except end;\n  end; // for_\n\n  procedure while_();\n  var\n    bTest, bDo, s: string;\n    never: boolean;\n    res: TfastStringAppend;\n    space: THashedStringList;\n    start, timeout: Tdatetime;\n  begin\n  result:='';\n  res:=TfastStringAppend.create;\n  try\n    never:=TRUE;\n    bDo:=macroDequote(par(1)); // do-block\n\n    bTest:='';\n    // test-block\n    space:=NIL;\n    if anyMacroMarkerIn(p) then\n        bTest:=macroDequote(p)\n    else\n      try // lets see if the test-block is just the name of a variable\n        space:=getVarSpace(p);\n        bTest:=p;\n      except end;\n\n    if bTest = '' then exit;\n\n    timeout:=parF('timeout', 1)/SECONDS; // stay safe: 1 second timeout by default\n    start:=now();\n      repeat\n      if (timeout > 0) and (now()-start > timeout) then break;\n      if assigned(space) then\n        s:=space.values[bTest]\n      else\n        begin\n        s:=bTest;\n        applyMacrosAndSymbols(s, cbMacros, cbData);\n        end;\n      if isFalse(trim(s)) then break;\n      s:=bDo;\n      applyMacrosAndSymbols(s, cbMacros, cbData);\n      res.append(s);\n      never:=FALSE;\n      until false;\n    if never then\n      res.append(macroDequote(par('else'))); // else-block\n  finally\n    result:=res.reset();\n    try\n      setVar(parEx('var'), result);\n      result:='';\n    except end;\n    res.free();\n    end;\n  end; // while_\n\n  procedure setEncodedTable(varname, txt:string);\n  var\n    space, h: ThashedStringList;\n    i: integer;\n  begin\n  chopLine(txt); // first line is just a useless header\n  // search the variable in the varspace\n  space:=getVarSpace(varname);\n  if not satisfied(space) then exit;\n  i:=space.indexOfName(varname);\n  // eventually destroy previous object\n  if i >= 0 then\n    begin\n    h:=space.objects[i] as ThashedStringList;\n    freeAndNIL(h);\n    space.objects[i]:=NIL;\n    end;\n  // create the table object\n  h:=ThashedStringList.create();\n  while txt > '' do\n    h.add(unescapeNL(chopline(txt)));\n  // assign the variable value\n  txt:=h.text;\n  if i < 0 then\n    i:=space.add(varname+'='+txt)\n  else\n    space.valueFromIndex[i]:=txt;\n  // link the object\n  space.objects[i]:=h;\n  end; // setEncodedTable\n\n  procedure load(fn:string; varname:string='');\n  var\n    from, size: int64;\n  begin\n  result:='';\n  from:=parI('from', 0);\n  // 'size' has priority over 'to'\n  size:=parI('size', -1);\n  if size = -1 then\n    begin\n    size:=parI('to', -1);\n    if size >= 0 then\n      inc(size, 1-from);\n    end;\n  if size = 0 then exit;\n  from:=max(0,from);\n\n  if reMatch(fn, '^https?://', 'i!') > 0 then\n    try result:=httpGet(fn, from, size)\n    except result:='' end\n  else\n    result:=loadFile(uri2diskMaybe(fn), from, size);\n\n  if varname = '' then\n    begin\n    if anyCharIn('/\\',fn) then result:=macroQuote(result);\n    exit;\n    end;\n  if ansiStartsStr(ENCODED_TABLE_HEADER, result) then\n    setEncodedTable(varname, result)\n  else\n    setVar(varname, result);\n  result:='';\n  end; // load\n\n  function uri2diskMaybeFolder(s:string):string; // like uri2diskMaybe, but limited to the path, excluding the filename\n  var\n    path: string;\n  begin\n  if ansiContainsStr(s, '/') then\n    begin\n    path:=uri2disk(chop(lastDelimiter('/\\',s)+1, 0, s), md.folder);\n    if path > '' then\n      s:=path+'\\'+trim(s); // mod by mars\n    end;\n  result:=s;\n  end; // uri2diskMaybeFolder\n\n  procedure save();\n  var\n    space, h: THashedStringList;\n    s: string;\n    i: integer;\n    encode: boolean;\n  begin\n  result:='';\n  if not parExist(['var']) then // will we work with a variable?\n    s:=pars[1]\n  else\n    begin\n    s:=par('var');\n    space:=getVarSpace(s);\n    if not satisfied(space) then exit;\n\n    i:=space.indexOfName(s);\n    if i < 0 then exit; // this var doesn't exit. don't write.\n    encode:=FALSE;\n    // if this is used as table, and has newlines, we must encode it to preserve associations\n    h:=space.objects[i] as THashedStringList;\n    if assigned(h) then\n      for i:=0 to h.count-1 do\n        if anyCharIn([#13,#10], h.strings[i]) then\n          begin\n          encode:=TRUE;\n          break;\n          end;\n    if not encode then\n      s:=space.valueFromIndex[i]\n    else\n      with TfastStringAppend.create do\n        try // table must be codified, or they won't work at load-time\n          append(ENCODED_TABLE_HEADER);\n          for i:=0 to h.count-1 do\n            append(escapeNL(h.strings[i])+CRLF);\n          s:=get();\n        finally free end;\n    end;\n  // now we have in 's' the content to be saved\n  spaceIf(saveTextFile(uri2diskMaybeFolder(p), s, name='append'));\n  end; // save\n\n  procedure replace();\n  var\n    i: integer;\n    v: string;\n  begin\n  try\n    v:=parEx('var');\n    result:=getVar(v);\n  except result:=pars[pars.count-1] end;\n\n  i:=0;\n  while i < pars.count-2 do\n    begin\n    result:=replaceText(result, pars[i], pars[i+1]);\n    inc(i, 2);\n    end;\n  if v = '' then exit;\n  setVar(v, result);\n  result:='';\n  end; // replace\n\n  procedure dialog();\n  const\n    STR2CODE: array [1..7] of string = (\n      'okcancel=1',\n      'yesno=4',\n      'yesnocancel=3',\n      'error=16',\n      'question=32',\n      'warning=48',\n      'information=64'\n    );\n  var\n    i, j, code: integer;\n    decode: TStringDynArray;\n    s: string;\n    buttons, icon: boolean;\n  begin\n  decode:=split(' ',par(1));\n  code:=0;\n  for i:=0 to length(decode)-1 do\n    for j:=1 to length(STR2CODE) do\n      begin\n      s:=STR2CODE[j];\n      if ansiStartsStr(decode[i], s) then\n        inc(code, strToIntDef(substr(s, 1+pos('=',s)), 0));\n      end;\n  buttons:=code AND 15 > 0;\n  icon:=code SHR 4 > 0;\n  if not icon and buttons then\n    inc(code, MB_ICONQUESTION);\n  case msgDlg(p, code, par(2)) of\n    MRYES, MROK: result:=if_(buttons, '1'); // if only OK button is available, then return nothing\n    MRCANCEL: result:=if_(code and MB_YESNOCANCEL = MB_YESNOCANCEL, 'cancel'); // for the YESNOCANCEL, we return cancel to allow to tell NO from CANCEL\n    else result:='';\n    end;\n  end; // dialog\n\n  procedure setAccount();\n  var\n    a: Paccount;\n    s: string;\n  begin\n  result:='';\n  if p > '' then\n    a:=getAccount(p, TRUE)\n  else\n    a:=md.cd.account;\n  if a = NIL then exit;\n  spaceIf(TRUE);\n\n  try\n    s:=parEx('password');\n    if validUsername(s, TRUE) then\n      a.pwd:=s;\n  except end;\n\n  try\n    s:=parEx('newname');\n    if validUsername(s) then\n      a.user:=s;\n  except end;\n\n  try a.redir:=parEx('redirect') except end;\n  try a.noLimits:=isTrue(parEx('no limits')) except end;\n  try a.enabled:=isTrue(parEx('enabled')) except end;\n  try a.group:=isTrue(parEx('is group')) except end;\n  try a.link:=split(';',parEx('member of')) except end;\n  try addArray(a.link, split(';',parEx('add member of'))) except end;\n  try removeArray(a.link, split(';',parEx('remove member of'))) except end;\n  try a.notes:=parEx('notes') except end;\n  try a.notes:=setKeyInString(a.notes, parEx('notes key')) except end;\n  end; // setAccount\n\n  procedure getterAccount();\n  var\n    a: Paccount;\n    s: string;\n  begin\n  result:='';\n  if p > '' then\n    a:=getAccount(p, TRUE)\n  else\n    a:=md.cd.account;\n  if a = NIL then exit;\n  s:=lowercase(par(1));\n  if s = 'redirect' then result:=a.redir\n  else if s = 'no limits' then trueIf(a.nolimits)\n  else if s = 'enabled' then trueIf(a.enabled)\n  else if s = 'is group' then trueIf(a.group)\n  else if s = 'member of' then result:=join(';',a.link)\n  else if s = 'notes' then result:=a.notes\n  else if s = 'password' then result:=a.pwd\n  else if s = 'password is' then trueIf((a.pwd=pars[2]) or (trim(a.pwd)=par(2)))  //add by mars\n  else if s = 'exists' then result:='1';\n  try result:=getKeyFromString(a.notes, parEx('notes key')) except end;\n  end; // getterAccount\n\n  procedure newAccount();\n  var\n    a: Taccount;\n  begin\n  result:='';\n  if accountExists(p, TRUE) then exit; // username already in use\n  if not validUsername(p) then exit;\n  fillchar(a, sizeof(a), 0); // the account is disabled by default\n  a.user:=p;\n  setLength(accounts, length(accounts)+1);\n  accounts[length(accounts)-1]:=a;\n  setAccount();\n  end; // newAccount\n\n  function fromTable(tbl, k:string):string;\n  var\n    i: integer;\n    space, h: THashedStringList;\n    s: string;\n  begin\n  result:='';\n  if tbl = 'ini' then deprecatedMacro('from table|ini','from table|#ini');\n  try space:=getVarSpace(tbl);\n  except exit end;\n  if not satisfied(space) then exit;\n  i:=space.indexOfName(tbl);\n  if (i < 0) and ansiStartsStr('$', tbl) then\n    begin\n    s:=md.tpl[copy(tbl,2,MAXINT)];\n    if s = '' then exit;\n    i:=space.add(tbl+'='+s);\n    end;\n  if i < 0 then exit;\n  // the text of the table is converted to a hashed structure, and cached through the objects[] property\n  h:=space.objects[i] as THashedStringList;\n  if h = NIL then\n    begin\n    h:=ThashedStringList.create();\n    h.text:=space.valueFromIndex[i];\n    space.objects[i]:=h;\n    end;\n  result:=h.values[k];\n  // we are reading a value from the ini, so we convert the 'no' to a valid false value (the empty string)\n  if stringExists(tbl, ['ini','#ini']) and (result = 'no') then result:='';\n  end; // fromTable\n\n  procedure setTable();\n  var\n    i: integer;\n    k, v: string;\n    space, h: THashedStringList;\n  begin\n  result:='';\n  space:=getVarSpace(p);\n  if not satisfied(space) then exit;\n  // set the table variable as text\n  v:=par(1);\n  space.values[p]:=nonEmptyConcat('', space.values[p], CRLF)+v;\n  // access the table object\n  i:=space.indexOfName(p);\n  h:=space.objects[i] as THashedStringList;\n  if h = NIL then\n    begin\n    h:=ThashedStringList.create();\n    space.objects[i]:=h;\n    end;\n  // fill the object\n  k:=chop('=',v);\n  v:=macroDequote(v);\n  h.values[k]:=v;\n  end; // setTable\n\n  procedure disconnect();\n  var\n    i: integer;\n    ipmask, portmask: string;\n  begin\n  if pars.count = 0 then\n    begin\n    if satisfied(md.cd) then\n      md.cd.conn.disconnect();\n    exit;\n    end;\n  ipmask:=par(0,'ip');\n  portmask:=par(1,'port');\n  if ipmask = '' then exit;\n  for i:=0 to srv.conns.count-1 do\n    with conn2data(i) do\n      if addressmatch(ipmask, address)\n      and ((portmask = '') or filematch(portmask, conn.port)) then\n        conn.disconnect();\n  result:='';\n  end; // disconnect\n\n  procedure vardomain();\n  var\n    space: ThashedStringList;\n    sep: string;\n    i: integer;\n    fs: TfastStringAppend;\n    values: boolean;\n  begin\n  fs:=TfastStringAppend.create;\n  try\n    values:=sameText(par('get'), 'values');\n    sep:=par('separator', FALSE, '|');\n    space:=getVarSpace(p);\n    for i:=0 to space.count-1 do\n      if ansiStartsText(p, space.names[i]) then\n        begin\n        if fs.length > 0 then\n          fs.append(sep);\n        if values then\n          fs.append(space.valueFromIndex[i])\n        else\n          fs.append(space.names[i]);\n        end;\n    result:=fs.get();\n  finally fs.free end;\n  end; // vardomain\n\n  procedure exec_();\n  var\n    s: string;\n    code: cardinal;\n  begin\n  s:=macroDequote(par(1));\n  if fileOrDirExists(s) then\n    s:=quoteIfAnyChar(' ', s)\n  else\n    if unnamedPars < 2 then\n      s:='';\n  if parExist(['out']) or parExist(['timeout']) or parExist(['exit code']) then\n    try\n      spaceIf(captureExec(macroDequote(p)+nonEmptyConcat(' ', s), s, code, parF('timeout',2)));\n      try setVar(parEx('exit code'), intToStr(code)) except end;\n      setVar(parEx('out'), s);\n    except end\n  else\n    spaceIf(exec(macroDequote(p), s))\n  end; // exec_\n\n  procedure memberOf();\n  var\n    a: Paccount;\n    s: string;\n  begin\n  result:='';\n  s:=par(1, 'user');\n  if s > '' then\n    a:=getAccount(s, TRUE)\n  else if assigned(md.cd) then\n    a:=md.cd.account\n  else\n    exit;\n  s:=par(0,'group');\n  if s = '' then // you don't tell me the group, i'll tell you the groups\n    begin\n    result:=join(';',expandLinkedAccounts(md.cd.account));\n    exit;\n    end;\n  a:=findEnabledLinkedAccount(a, split(';',s));\n  if assigned(a) then result:=a.user;\n  end; // memberOf\n\n  procedure canArchive(f:Tfile);\n  begin trueIf(assigned(f) and f.hasRecursive(FA_ARCHIVABLE) or (f = NIL) and md.archiveAvailable) end;\n\n  procedure actionAllowed(action:TfileAction);\n  var\n    f: Tfile;\n    local: boolean;\n  begin // note: \"delete\" is meant for files inside the folder bearing the permission\n  local:=FALSE;\n  result:='';\n  try\n    f:=mainfrm.findFileByURL(parEx('path'), md.folder);\n    if f = NIL then exit;\n    local:=TRUE;\n  except\n    if action = FA_ACCESS then f:=md.f\n    else f:=md.folder;\n    end;\n  trueIf(accountAllowed(action, md.cd, f));\n  if local then\n    freeIfTemp(f);\n  end; // actionAllowed\n\n  procedure cookie();\n\n    function timeForCookies(v:string):string;\n    var\n      t: Tdatetime;\n    begin\n    try\n      if charInSet(getFirstChar(v), ['+','-']) then\n        t:=now()+strToFloat(v)\n      else\n        try t:=maybeUnixTime(strToFloat(v));\n        except t:=strToDateTime(v) end;\n      result:=dateToHTTP(localToGMT(t));\n    except result:=v end;\n    end; // timeForCookies\n\n    function getPairs():TStringDynArray;\n    var\n      i: integer;\n      k, v: string;\n    begin\n    result:=NIL;\n    for i:=1 to pars.count-1 do\n      begin\n      v:=pars[i];\n      k:=trim(chop('=', v));\n      v:=trim(v);\n      if k = 'value' then // this is handled below\n        continue\n      else if k = 'expires' then\n        v:=timeForCookies(v);\n      addArray(result, [k, v]);\n      end;\n    end; // getPairs\n\n  begin\n  if not satisfied(md.cd) then exit;\n  result:='';\n  try md.cd.conn.setCookie(p, parEx('value'), getPairs());\n  except result:=noMacrosAllowed(md.cd.conn.getCookie(p)) end; // there was no \"value\" to set, so just read\n  end; // cookie\n\n  procedure regexp();\n  var\n    subs: TStringDynArray;\n    subj, s, mods: string;\n    i: integer;\n  begin\n  // input from variable or text\n  try subj:=getVar(parEx('var'));\n  except subj:=par(1) end;\n  // check\n  mods:='m'+if_(isFalse(par('case')),'i');\n  p:=macroDequote(p);\n  i:=reMatch(subj, p, mods, 1, @subs);\n  if i <= 0 then\n    begin\n    result:='';\n    exit;\n    end;\n  // return first match, or position\n  if assigned(subs) then\n    result:=subs[min(length(subs)-1,1)]\n  else\n    result:=intToStr(i);\n  // eventually communicate matched substrings\n  try\n    parEx('sub');\n    s:='';\n    for i:=0 to length(subs)-1 do\n      s:=s+format('%d=%s'+CRLF, [i, subs[i]]);\n    setVar(parEx('sub'), s);\n  except end;\n\n  try\n    result:=reReplace(subj, p, parEx('replace'), mods);\n    setVar(parEx('var'), result); // we put the output where we got the input\n    result:='';\n  except end;\n  end; // regexp\n\n  procedure dir();\n  var\n    sr: TSearchRec;\n    fs: TfastStringAppend;\n    sep, s: string;\n  begin\n  result:='';\n  // user can specify a file mask, or a folder path\n  s:=excludeTrailingPathDelimiter(p);\n  if directoryExists(s) then\n    s:=s+'\\*';\n  if findfirst(s, faAnyFile, sr) <> 0 then exit;\n\n  sep:=par('separator', FALSE, '|');\n  try\n    fs:=TfastStringAppend.create();\n      repeat\n      if (sr.name = '.') or (sr.name = '..') then continue;\n      if fs.length > 0 then\n        fs.append(sep);\n      fs.append(sr.name);\n      until findNext(sr) <> 0;\n    result:=fs.get();\n  finally\n    findClose(sr);\n    freeAndNIL(fs);\n    end;\n  end; // dir\n\n  procedure handleSymbol();\n  var\n    s, usr: string;\n    i: integer;\n  begin\n  // search for the symbol in the translation table\n  i:=length(md.table)-2;\n  if odd(i) then dec(i); // ensure the table has a legal length\n  while (i >= 0) and not sameText(md.table[i], name) do\n    dec(i,2);\n  if i >= 0 then\n    begin\n    result:=md.table[i+1];\n    exit;\n    end;\n\n  result:=name; // by default, an unrecognized symbol remains the same (just as the song)\n\n  // most symbols here, are here because they can be heavy to calculate, so we ensure we do\n  // it only upon request. others are for centralization.\n\n  if ansiStartsText('%sym-', name) then // legacy: surpassed by {.section.}\n    result:=tpl[substr(name,2,-1)]\n  else if name = '%item-icon%' then\n    result:=first(getItemIcon(md.f), name)\n  else if name = '%item-archive%' then\n    if assigned(md.f) and assigned(md.tpl) and md.f.hasRecursive(FA_ARCHIVABLE) then result:=md.tpl['item-archive']\n    else result:=''\n  else if name = '%item-dl-count%' then\n    if md.f = NIL then result:=''\n    else result:=intToStr(md.f.DLcount)\n  else if name = '%connections%' then\n    result:=intToStr(srv.conns.count)\n  else if name = '%style%' then\n    result:=tpl['style']\n  else if name = '%timestamp%' then\n    result:=dateTimeToStr(now())\n  else if name = '%date%' then\n    result:=dateToStr(now())\n  else if name = '%time%' then\n    result:=timeToStr(now())\n  else if name = '%now%' then\n    result:=floatToStr(now())\n  else if name = '%version%' then\n    result:=main.VERSION\n  else if name = '%build%' then\n    result:=VERSION_BUILD\n  else if name = '%uptime%' then\n    result:=uptimestr()\n  else if name = '%speed-out%' then\n    result:=floatToStrF(srv.speedOut/1000, ffFixed, 7,2)\n  else if name = '%speed-in%' then\n    result:=floatToStrF(srv.speedIn/1000, ffFixed, 7,2)\n  else if name = '%total-out%' then\n    result:=smartSize(outTotalOfs+srv.bytesSent)\n  else if name = '%total-in%' then\n    result:=smartSize(inTotalOfs+srv.bytesReceived)\n  else if name = '%total-downloads%' then\n    result:=intToStr(downloadsLogged)\n  else if name = '%total-hits%' then\n    result:=intToStr(hitsLogged)\n  else if name = '%total-uploads%' then\n    result:=intToStr(uploadsLogged)\n  else if name = '%number-addresses%' then\n    result:=intToStr(countIPs())\n  else if name = '%number-addresses-ever%' then\n    result:=intToStr(ipsEverConnected.count)\n  else if name = '%number-addresses-downloading%' then\n    result:=intToStr(countIPs(TRUE))\n  else if name = '%number-users%' then\n    result:=intToStr(countIPs(FALSE, TRUE))\n  else if name = '%number-users-downloading%' then\n    result:=intToStr(countIPs(TRUE, TRUE))\n  else if name = '%cwd%' then\n    result:=getCurrentDir()\n  else if name = '%port%' then\n    result:=srv.port;\n\n  if assigned(md.cd) then\n    begin\n    usr:=md.cd.user;\n    if name = '%host%' then\n      result:=getSafeHost(md.cd)\n    else if name = '%ip%' then\n      result:=md.cd.address\n    else if name = '%ip-to-name%' then\n      result:=localDNSget(md.cd.address)\n    else if name = '%lang%' then\n      result:=stripChars(copy(md.cd.conn.getHeader('Accept-Language'),1,2), ['a'..'z','A'..'Z'], TRUE)\n    else if name = '%url%' then\n      result:=macroQuote(md.cd.conn.request.url)\n    else if name = '%user%' then\n      result:=macroQuote(usr)\n    else if name = '%password%' then\n      result:=macroQuote(md.cd.conn.request.pwd)\n    else if name = '%loggedin%' then\n      result:=if_(usr>'', tpl['loggedin'])\n    else if name = '%login-link%' then\n      result:=if_(usr='', tpl['login-link'])\n    else if name = '%user-notes%' then\n      if md.cd.account = NIL then result:=''\n      else result:=md.cd.account.notes\n    else if name = '%stream-size%' then\n      result:=intToStr(md.cd.conn.bytesFullBody)\n    else if name = '%is-archive%' then\n      trueIf(md.cd.downloadingWhat=DW_ARCHIVE)\n    end;\n\n\n  if assigned(md.folder) then\n    if name = '%folder-item-comment%' then\n      result:=md.folder.getDynamicComment()\n    else if name = '%folder-comment%' then\n      begin\n      result:=md.folder.getDynamicComment();\n      if result > '' then\n        result:=replaceText(tpl['folder-comment'], '%item-comment%', result)\n      end\n    else if name = '%diskfree%' then\n      result:=smartSize(diskSpaceAt(md.folder.resource)-minDiskSpace*MEGA)\n    else if name = '%up%' then\n      result:=if_(assigned(md.tpl) and not md.folder.isRoot(), md.tpl['up'])\n    else if name = '%encoded-folder%' then\n      result:=md.folder.url(TRUE)\n    else if name = '%parent-folder%' then\n      result:=md.folder.parentURL()\n    else if name = '%folder-name%' then\n      result:=md.folder.name\n    else if name = '%folder-resource%' then\n      result:=md.folder.resource\n    else if name = '%folder%' then\n      with md.folder do result:=if_(isRoot(), '/', getFolder()+name+'/')\n  ;\n\n  if assigned(md.f) then\n    if name = '%item-name%' then\n      begin\n      s:=md.f.name;\n      if md.hideExt and md.f.isFile() then\n        setLength(s, length(s)-length(extractFileExt(s)) );\n      result:=htmlEncode(macroQuote(s))\n      end\n    else if name = '%item-type%' then\n      if md.f.isLink() then\n        result:='link'\n      else if md.f.isFolder() then\n        result:='folder'\n      else\n        result:='file'\n   else if name = '%item-size-b%' then\n      result:=intToStr(md.f.size)\n   else if name = '%item-size-kb%' then\n      result:=intToStr(md.f.size div KILO)\n    else if name = '%item-size%' then\n      result:=smartsize(md.f.size)\n    else if name = '%item-resource%' then\n      result:=macroQuote(md.f.resource)\n    else if name = '%item-ext%' then\n      result:=macroQuote(copy(extractFileExt(md.f.name), 2, MAXINT))\n    else if name = '%item-added-dt%' then\n      result:=floatToStr(md.f.atime)\n    else if name = '%item-modified-dt%' then\n      result:=floatToStr(md.f.mtime)\n    // these twos are actually redundant, {.time||when=%item-added-dt%.}\n    else if name = '%item-added%' then\n      result:=datetimeToStr(md.f.atime)\n    else if name = '%item-modified%' then\n      result:=if_(md.f.mtime=0, 'error', datetimeToStr(md.f.mtime))\n    else if name = '%item-comment%' then\n      result:=md.f.getDynamicComment(TRUE)\n    else if name = '%item-url%' then\n      result:=macroQuote(md.f.url())\n  ;\n\n  if assigned(md.f) and assigned(md.tpl) then\n    if name = '%new%' then\n      result:=if_(md.f.isNew(), md.tpl['newfile'])\n    else if name = '%comment%' then\n      result:=if_(md.f.getDynamicComment(TRUE) > '', md.tpl['comment'])\n  ;\n\n  if assigned(md.tpl) then\n    if name = '%archive%' then\n      result:=if_(md.archiveAvailable, md.tpl['archive']);\n\n  if ansiContainsText(name, 'folder') and not ansiContainsText(name, 'comment') then\n    result:=macroQuote(result);\n  end; // handleSymbol\n\n  function stringTotrayMessageType(s:string):TtrayMessageType;\n  begin\n  if compareText(s,'warning') = 0 then\n    result:=TM_WARNING\n  else if compareText(s,'error') = 0 then\n    result:=TM_ERROR\n  else if compareText(s,'info') = 0 then\n    result:=TM_INFO\n  else\n    result:=TM_NONE\n  end; // stringTotrayMessageType\n\n  function renameIt(src,dst:string):boolean;\n  var\n    srcReal, dstReal: string;\n  begin\n  srcReal:=uri2diskMaybe(src,NIL,FALSE);\n  dstReal:=uri2diskMaybeFolder(dst);\n  if isExtension(srcReal, '.lnk')\n  and not isExtension(src, '.lnk') then\n    dstReal:=dstReal+'.lnk';\n  if extractFilePath(dstReal)='' then\n    dstReal:=extractFilePath(srcReal)+dstReal;\n  result:=renameFile(srcReal, dstReal)\n  end; // renameIt\n\nvar\n  i64: int64;\n  i: integer;\n  r: Tdatetime;\n  s: string;\nbegin\ntry\n  assert(assigned(cbData), 'cbMacros: cbData=NIL');\n  md:=cbData;\n  if md.breaking then exit;\n  try\n\n    name:=fullmacro;\n    if (name[1] = '%') and (name[length(name)] = '%') then\n      begin\n      handleSymbol();\n      exit;\n      end;\n\n    if not mainfrm.enableMacrosChk.checked then\n      begin\n      result:=fullMacro;\n      exit;\n      end;\n\n    if pars.count = 0 then exit;\n    // extract first parameter as 'name'\n    name:=trim(pars[0]);\n    pars.delete(0);    // this operation is done with a memory move over pointers. Having few parameters normally, it's fast. We may eventually avoid this deletion and consider parameters starting from 1.\n    if name = '' then exit;\n    macroError('not supported or illegal parameters');\n    // eventually remove trailing\n    if pars.Count > 0 then\n      begin\n      p:=pars[pars.count-1];\n      if ansiEndsText('/'+name, p) then\n        begin\n        setLength(p, length(p)-length(name)-1);\n        pars[pars.count-1]:=p;\n        end;\n      end;\n\n    unnamedPars:=0;\n    for i:=0 to pars.count-1 do\n      begin\n      pars[i]:=replaceStr(pars[i], '{:|:}','|');\n      if (i = unnamedPars) and (pos('=',pars[i]) = 0) then\n        inc(unnamedPars);\n      end;\n\n    // handle aliases\n    if assigned(md.aliases) then\n      begin\n      s:=md.aliases.values[name];\n      if s > '' then\n        begin\n        if not ansiStartsStr(MARKER_OPEN, s) then\n          s:=MARKER_OPEN+s+MARKER_CLOSE;\n        call(s);\n        exit;\n        end;\n      end;\n\n    // here we try to handle some shortcuts.\n    // it's a special starting character that identifies the macro, and the rest of the name is a parameter.\n    p:=copy(name,2,MAXINT);\n\n    if name[1] = '$' then\n      section(0);\n\n    if name[1] = '!' then\n      // we look for they key (p) in {.^special:strings.} then in [special:strings]. If no luck, we try to output an eventual parameter, or the key itself.\n      try result:=first([fromTable('special:strings',p), md.tpl.getStrByID(p), par(0), p]) except end;\n\n    if name[1] = '^' then\n      try call(getVar(p), 0) except end;\n\n    if name[1] = '?' then  // shortcut for 'urlvar'\n      result:=urlvar(p);\n\n    p:=par(0); // a handy shortcut for the first parameter\n\n    // comment is for comments, or if you just want to trash the output of a macro.\n    // Careful: the comment itself (the parameter of this command) is executed as anything else, unless it's {:quoted:}\n    if name = 'comment' then\n      begin\n      result:='';\n      exit;\n      end;\n\n    // infix operators are macros in the form PARAMETER NAME PARAMETER. it's handy for comparisons.\n    infixOperators(['>=','<=','<>','!=','=','>','<']); // the order is important, because >= would be confused with =\n\n    // ok, fom here we have macros in the straight form NAME|PARAM|PARAM\n    name:=ansiLowercase(name);\n\n    if name = 'count' then\n      if satisfied(md.cd) then\n        result:=intToStr(md.cd.tplCounters.incInt(p)-1); // it can work even with no parameters\n\n    if name = 'time' then\n      begin\n      s:=par(0,'format');\n      r:=parF('when',now())+parF('offset',0);\n      if s = 'y' then result:=floatToStr(r)\n      else datetimeToString(result, first(s,'c'), r );\n      end;\n\n    if name = 'disconnect' then\n      disconnect();\n\n    if name = 'stop server' then\n      stopServer();\n    if name = 'start server' then\n      startServer();\n\n\n    if name = 'focus' then\n      begin\n      application.restore();\n      application.bringToFront();\n      result:='';\n      end;\n\n    if name = 'current downloads' then\n      result:=intToStr( countDownloads( par('ip'), par('user'), if_(sameText(par('file'), 'this'), md.f) as Tfile) );\n\n    if name = 'disconnection reason' then\n      begin\n      try\n        if isFalse(parEx('if')) then\n          begin\n          result:='';\n          exit;\n          end;\n      except end;\n      result:=md.cd.disconnectReason; // return the previous state\n      if pars.count > 0 then md.cd.disconnectReason:=p;\n      end;\n\n    if name = 'clipboard' then\n      if p = '' then\n        result:=clipboard.asText\n      else\n        begin\n        try setClip(getVar(parEx('var')))\n        except setClip(p) end;\n        result:='';\n        end;\n\n    if name = 'save vfs' then\n      begin\n      mainfrm.saveVFS(first(p,lastFileOpen));\n      result:='';\n      end;\n\n    if name = 'save cfg' then\n      begin\n      if p = 'file' then savemode:=SM_FILE\n      else if p = 'registry' then savemode:=SM_USER\n      else if p = 'global registry' then savemode:=SM_SYSTEM;\n      mainFrm.saveCFG();\n      result:='';\n      end;\n\n    if name = 'js encode' then\n      result:=jsEncode(p, first(par(1),'''\"'));\n\n    if name = 'base64' then\n      result:=base64encode(UTF8encode(p));\n    if name = 'base64decode' then\n      result:=utf8ToString(base64decode(ansistring(p)));\n    if name = 'md5' then\n      result:=strMD5(p);\n    if name = 'sha1' then\n      result:=strSHA1(p);\n\n    if name = 'vfs select' then\n      if pars.count = 0 then\n        try result:=selectedFile.url()\n        except result:='' end\n      else if p = 'next' then\n        if selectedFile = NIL then\n          spaceIf(FALSE)\n        else\n          begin\n          with mainFrm.filesBox do selected:=selected.getNext();\n          spaceIf(TRUE);\n          end\n      else\n        try\n          s:=parEx('path');\n          spaceIf(FALSE);\n          mainFrm.filesBox.selected:= mainFrm.findFilebyURL(s, NIL, FALSE).node;\n          spaceIf(TRUE);\n        except end;\n\n    if name = 'break' then\n      begin\n      result:='';\n      try\n        if isFalse(parEx('if')) then\n          exit;\n      except end;\n      try result:=parEx('result') except end;\n      md.breaking:=TRUE;\n      exit;\n      end;\n\n    if pars.Count < 1 then exit; // from here, only macros with parameters\n\n    if name = 'var domain' then\n      vardomain();\n\n    if name = 'dir' then\n      dir();\n\n    if name = 'no pipe' then\n      result:=replaceStr(substr(fullMacro, '|'), '|','{:|:}');\n\n    if name = 'pipe' then\n      result:=replaceStr(substr(fullMacro, '|'), '{:|:}','|');\n\n    if name = 'add to log' then\n      begin\n      try s:=getVar(parEx('var'))\n      except s:=p end;\n      mainfrm.add2log(s, md.cd, stringToColorEx(par(1,'color'), clDefault));\n      result:='';\n      end;\n\n    if name = 'mkdir' then\n      begin\n      s:=trim(uri2diskMaybeFolder(p));\n      spaceIf(not directoryExists(s) and forceDirectory(s));\n      end;\n\n    if name = 'chdir' then\n      begin\n      IOresult;\n      setCurrentDir(p);\n      spaceIf(IOresult=0);\n      end;\n\n    if name = 'encodeuri' then\n      encodeuri();\n\n    if name = 'decodeuri' then\n      result:=decodeURL(ansistring(p));\n\n    if name = 'set cfg' then\n      trueIf(mainfrm.setcfg(p));\n\n    if name = 'dialog' then\n      dialog();\n\n    if name = 'any macro marker' then\n      trueIf(anyMacroMarkerIn(first(loadTextfile(uri2diskMaybe(p)), p)));\n\n    if name = 'random' then\n      result:=randomFrom(listToArray(pars));\n\n    if name = 'random number' then\n      if pars.count = 1 then\n        result:=intToStr(random(1+parI(0)))\n      else\n        result:=intToStr(parI(0)+random(1+parI(1)-parI(0)));\n\n    if (name = 'force ansi') or (name = 'maybe utf8') then // pre-unicode legacy\n      result:=p;\n\n    if name = 'after the list' then\n      if md.afterTheList then\n        result:=macroDequote(p)\n      else\n        result:=MARKER_OPEN+fullMacro+MARKER_CLOSE;\n\n    if name = 'breadcrumbs' then\n      breadcrumbs();\n\n    if name = 'filename' then\n      result:=substr(p, lastDelimiter('\\/:',p)+1);\n\n    if name = 'filepath' then\n      begin\n      i:=lastDelimiter('\\/:',p);\n      if i = 0 then\n        result:=''\n      else\n        result:=substr(p, 1, i);\n      end;\n\n    if name = 'not' then\n      trueIf(isFalse(p));\n\n    if name = 'length' then\n      begin // don't trim\n      try s:=getVar(parEx('var', FALSE))\n      except s:=pars[0] end;\n      result:=intToStr(length(s));\n      end;\n\n    if name = 'load' then\n      load(p, par(1,'var'));\n\n    if name = 'load tpl' then\n      if satisfied(md.cd) then\n        begin\n        md.cd.tpl:=cachedTpls.getTplFor(p);\n        result:='';\n        end;\n\n    if name = 'filesize' then\n      begin\n      if reMatch(p, '^https?://', 'i!') > 0 then i64:=httpFileSize(p)\n      else i64:=sizeOfFile(uri2diskMaybe(p));\n      result:=intToStr(max(0,i64)); // we return 0 instead of -1 for non-existent files, t\n      end;\n\n    if name = 'filetime' then\n      result:=floatToStr(getMtime(p));\n\n    if name = 'header' then\n      if satisfied(md.cd) then\n        try result:=noMacrosAllowed(md.cd.conn.getHeader(ansistring(p))) except end;\n\n    if name = 'urlvar' then\n      result:=urlvar(p);\n\n    if name = 'postvar' then\n      if satisfied(md.cd) then\n        try\n          result:=noMacrosAllowed(md.cd.postVars.values[p]);\n          setVar(parEx('var'), result); // if no var is specified, it will break here, and result will have the value\n          result:='';\n        except end;\n\n    if name = 'section' then\n      section(1);\n\n    if name = 'trim' then\n      result:=p;\n\n    if name = 'lower' then\n      result:=ansiLowercase(p);\n\n    if name = 'upper' then\n      result:=ansiUppercase(p);\n\n    if name = 'abs' then\n      result:=floatToStr(abs(parF(0)));\n\n    if name = 'upload failed' then\n      begin\n      md.cd.uploadFailed:=p;\n      result:='';\n      end;\n\n    if name = 'is file protected' then\n      result:=if_(filematch(PROTECTED_FILES_MASK, parVar('var',0)), '1');\n\n    if name = 'get' then\n      try\n        if p = 'can recur' then trueIf(mainFrm.recursiveListingChk.Checked)\n        else if p = 'can upload' then actionAllowed(FA_UPLOAD)\n        else if p = 'can delete' then actionAllowed(FA_DELETE)\n        else if p = 'can access' then actionAllowed(FA_ACCESS)\n        else if p = 'can archive' then canArchive(md.folder)\n        else if p = 'can archive item' then canArchive(md.f)\n        else if p = 'url' then getUri()\n        else if p = 'stop spiders' then trueIf(mainFrm.stopSpidersChk.checked)\n        else if p = 'is new' then trueIf(md.f.isNew())\n        else if p = 'agent' then result:=md.cd.agent\n        else if p = 'tpl file' then result:=tplFilename\n        else if p = 'protocolon' then result:=protoColon()\n        else if p = 'speed limit' then result:=intToStr(round(speedLimit))\n        else if p = 'external address' then\n          begin\n          if externalIP = '' then getExternalAddress(externalIP);\n          result:=externalIP;\n          end\n        else if p = 'accounts' then\n          result:=join(';', getAccountList(\n            stringExists(par(1),['','users']),\n            stringExists(par(1),['','groups'])\n          ))\n        ;\n      except unsatisfied() end;\n\n    if name = 'call' then\n      try call(getVar(p), 1) except end;\n\n    if name = 'inc' then\n      inc_();\n    if name = 'dec' then\n      inc_(-1);\n\n    if name = 'chr' then\n      begin\n      result:='';\n      for i:=0 to pars.count-1 do\n        try result:=result+chr(strToInt(replaceStr(pars[i],'x','$')))\n        except end;\n      end;\n\n    if name = 'dequote' then\n      result:=macroDequote(p);\n\n    if name ='quote' then\n      begin\n      p:=macroDequote(p);\n      applyMacrosAndSymbols(p, cbMacros, cbData);\n      result:=macroQuote(p);\n      end;\n\n    if name = 'encode html' then\n      result:=htmlEncode(p);\n\n    if name = 'play' then\n      begin\n      result:='';\n      playSound(Pchar(p), 0, SND_ALIAS or SND_ASYNC or SND_NOWAIT);\n      end;\n\n    if name = 'delete' then\n      begin\n      s:=uri2diskMaybe(p,NIL,FALSE);\n      if isTrue(par('bin',TRUE,'1')) then\n        spaceIf(moveToBin(s, isTrue(par('forced'))))\n      else\n        spaceIf(deltree(s));\n      end;\n\n    if name = 'disk free' then\n      result:=intToStr(diskSpaceAt(uri2diskMaybe(p)));\n\n    if name = 'vfs to disk' then\n      if isAbsolutePath(p) then\n        result:=p\n      else if dirCrossing(p) and not ansiStartsStr('/', p) then\n        result:=expandFileName(includeTrailingPathDelimiter(md.folder.resource)+p)\n      else\n        result:=uri2disk(p, md.folder);\n\n    if name = 'exists' then\n      if ansiContainsStr(p, '/') then\n        trueIf(fileExistsByURL(p))\n      else\n        trueIf(fileOrDirExists(p));\n\n    if name = 'is file' then\n      trueIf(fileExists(p));\n\n    if name = 'mime' then\n      begin\n      result:='';\n      if satisfied(md.cd) then\n        md.cd.conn.reply.contentType:=ansistring(p);\n      end;\n\n    if name = 'calc' then\n      result:=floatToStr(evalFormula(p));\n\n    if name = 'smart size' then\n      result:=smartsize(strToInt64(p));\n\n    if name = 'round' then\n      result:=floatToStr(roundTo(parF(0), -parI(1, 0)));\n\n    if name = 'md5 file' then\n      result:=createFingerprint(p);\n\n    if name = 'exec' then\n      exec_();\n\n    if name = 'set speed limit for address' then\n      begin\n      if pars.count = 1 then\n        setSpeedLimitIP(parF(0))\n      else\n        with objByIp(p) do\n          begin\n          limiter.maxSpeed:=round(parF(1)*1000);\n          customizedLimiter:=TRUE;\n          end;\n      result:='';\n      end;\n\n    if name = 'set speed limit for connection' then\n      if satisfied(md.cd) then\n        try\n          if assigned(md.cd.limiter) then\n            begin\n            md.cd.limiter.maxSpeed:=round(parF(0)*1000);\n            exit;\n            end;\n          md.cd.limiter:=TspeedLimiter.create(round(parF(0)*1000));\n          md.cd.conn.limiters.add(md.cd.limiter);\n          srv.limiters.add(md.cd.limiter);\n          result:='';\n        except\n          md.cd.conn.limiters.remove(md.cd.limiter);\n          srv.limiters.remove(md.cd.limiter);\n          freeAndNIL(md.cd.limiter);\n          result:='';\n          end;\n\n    if name = 'member of' then\n      memberOf();\n\n    if name = 'add header' then\n      if satisfied(md.cd) then\n        begin\n        result:='';\n        // macro 'mime' should be used for content-type, but this test will save precious time to those who will be fooled by the presence this macro\n        if ansiStartsText('Content-Type:', p) then\n          md.cd.conn.reply.contentType:=ansistring(trim(substr(p, ':')))\n        else if ansiStartsText('Location:', p) then\n          with md.cd.conn.reply do\n            begin\n            mode:=HRM_REDIRECT;\n            url:=UTF8encode(trim(substr(p, ':')))\n            end\n        else\n          md.cd.conn.addHeader(ansistring(p), isTrue(par('overwrite',true,'1')));\n        end;\n\n    if name = 'remove header' then\n      if satisfied(md.cd) then\n        begin\n        result:='';\n        md.cd.conn.removeHeader(ansistring(p));\n        end;\n\n    if name = 'get ini' then\n      result:=getKeyFromString(mainFrm.getCfg(), p);\n\n    if name = 'set ini' then\n      begin\n      result:='';\n      mainfrm.setCfg(p);\n      end;\n\n    if name = 'set' then\n      begin\n      try s:=getVar(parEx('var'));\n      except\n        if pars.count < 2 then s:=''\n        else s:=macroDequote(pars[1]);\n        end;\n      if par('mode') = 'append' then\n        s:=getVar(p)+s\n      else if par('mode') = 'prepend' then\n        s:=s+getVar(p);\n      spaceIf(setVar(p, s));\n      end;\n\n    if name = 'notify' then\n      begin\n      tray.balloon(p, parF('timeout',3), stringTotrayMessageType(par('type')), par('title'));\n      result:='';\n      end;\n\n    if name = 'cookie' then\n      cookie();\n\n    if name = 'new account' then\n      newAccount();\n\n    if name = 'delete account' then\n      begin\n      deleteAccount(p);\n      result:='';\n      end;\n\n    if name = 'delete item' then\n      deleteItem();\n      \n    if pars.count < 2 then exit; // from here, only macros with at least 2 parameters\n\n    if name = 'set item' then\n      setItem();\n    if name = 'get item' then\n      getItem();\n\n    if name = 'while' then\n      while_();\n\n    if name = 'set table' then\n      setTable();\n\n    if name = 'add folder' then\n      addFolder();\n\n    if (name = 'save') or (name = 'append') then\n      save();\n\n    if name = 'rename' then\n      begin\n      spaceIf( not isExtension(par(1), '.lnk') and // security matters (by mars)\n        renameIt(p, par(1)) );\n      if (result > '') and not stopOnMacroRename then // should we stop recursion?\n        try\n          // by default, we'll stop after first stacked [on macro rename], but recursive=1 will remove this limit\n          stopOnMacroRename:=isFalse(par('recursive'));\n          runEventScript('on macro rename', toSA(['%old-name%',p,'%new-name%',par(1)]), md.cd);\n        finally\n          stopOnMacroRename:=FALSE;\n          end;\n      end;\n\n    if name = 'move' then\n      begin\n      s:=uri2diskMaybeFolder(par(1));\n      spaceIf((s>'') and movefile(uri2diskMaybe(p,NIL,FALSE), s));\n      end;\n\n    if name = 'copy' then\n      spaceIf(copyfile(uri2diskMaybe(p), uri2diskMaybeFolder(par(1))));\n\n    if name = 'from table' then\n      result:=fromTable(p, par(1));\n\n    if name = 'match' then\n      trueIf(filematch(p, par(1)));\n\n    if name = 'match address' then\n      trueIf(addressmatch(p, par(1)));\n\n    if name = 'regexp' then\n      regexp();\n\n    if name = 'pos' then\n      result:=intToStr(pos_(isTrue(par('case')), parVar('what', 0), parVar('var', 1), strToIntDef(par('from'), 1)));\n\n    if name = 'repeat' then\n      result:=dupeString(macroDequote(par(1)), strToIntDef(p,1));\n\n    if name = 'count substring' then\n      result:=intToStr(countSubstr(pars[0], par(1)));\n\n    if name = 'and' then\n      allLogic(TRUE);\n\n    if name = 'or' then\n      allLogic(FALSE);\n\n    if name = 'xor' then\n      trueIf(isTrue(p) xor isTrue(par(1)));\n\n    if name = 'add' then\n      result:=floatToStr(parF(0)+parF(1));\n    if name = 'sub' then\n      result:=floatToStr(parF(0)-parF(1));\n    if name = 'mul' then\n      result:=floatToStr(parF(0)*parF(1));\n    if name = 'div' then\n      result:=floatToStr(safeDiv(parF(0),parF(1)));\n    if name = 'mod' then\n      result:=intToStr(safeMod(parI(0),parI(1)));\n\n    if stringExists(name, ['min','max']) then\n      minOrMax();\n\n    if stringExists(name, ['if','if not']) then\n      if isFalse(p) xor (length(name) > 2) then result:=macroDequote(par(2))\n      else result:=macroDequote(par(1));\n\n    if stringExists(name, ['=','>','>=','<','<=','<>','!=']) then\n      trueIf(compare(name, p, par(1)));\n\n    if name = 'switch' then\n      switch();\n\n    if name = 'set account' then\n      setAccount();\n    if name = 'get account' then\n      getterAccount();\n\n    if name = 'cut' then\n      cut();\n\n    if pars.count < 3 then exit; // from here, only macros with at least 3 parameters\n\n    if name ='for each' then\n      foreach();\n\n    if name = 'substring' then\n      substring();\n\n    if name = 'replace' then\n      replace();\n\n    if name = 'convert' then\n      convert();\n\n    if pars.count < 4 then exit;\n\n    if name = 'for' then\n      for_();\n  finally\n    if mainfrm.macrosLogChk.checked then\n      begin\n      if not fileExists(MACROS_LOG_FILE) then\n        saveTextFile(MACROS_LOG_FILE, HEADER);\n      macrosLog(fullMacro, result, md.logTS);\n      md.logTS:=FALSE;\n      end;\n    end;\nexcept\n  if mainfrm.macrosLogChk.checked then\n    macrosLog(fullMacro, 'Exception, please report this bug on www.rejetto.com/forum/');\n  result:='';\n  end;\nend; // cbMacros\n\nfunction tryApplyMacrosAndSymbols(var txt:string; var md:TmacroData; removeQuotings:boolean=true):boolean;\nvar\n  s: string;\nbegin\nresult:=FALSE;\n\ntry\n  md.aliases:=defaultalias; // we don't even create a new object if not necessary\n  if assigned(md.tpl) then\n    begin\n    s:=md.tpl['special:alias'];\n    if s > '' then\n      begin\n      md.aliases:=THashedStringList.create;\n      md.aliases.text:=s;\n      md.aliases.addStrings(defaultAlias);\n      end;\n    end;\n\n  if md.cd = NIL then\n    begin\n    md.tempVars:=THashedStringList.create;\n    end;\n\n  md.logTS:=TRUE;\n  md.breaking:=FALSE;\n\n  try\n    applyMacrosAndSymbols(txt, cbMacros, @md, removeQuotings);\n    result:=TRUE;\n  except\n    on e:EtplError do mainFrm.setStatusBarText(format('Template error at %d,%d: %s: %s ...', [e.row,e.col,e.message,e.code]), 1000);\n    on Exception do raise;\n    end;\nfinally\n  if md.aliases <> defaultAlias then\n    freeAndNIL(md.aliases);\n  freeAndNIL(md.tempVars);  \n  end;\nend; // tryApplyMacrosAndSymbols\n\nfunction runScript(script:string; table:TstringDynArray=NIL; tpl_:Ttpl=NIL; f:Tfile=NIL; folder:Tfile=NIL; cd:TconnData=NIL):string;\nvar\n  md: TmacroData;\nbegin\nresult:=trim(script);\nif result = '' then exit;\nfillchar(md, sizeOf(md), 0);\nmd.tpl:=first(tpl_, tpl);\nmd.f:=f;\nmd.folder:=folder;\nmd.cd:=cd;\nmd.table:=table;\ntryApplyMacrosAndSymbols(result, md);\nend; // runScript\n\nfunction runEventScript(event:string; table:TStringDynArray=NIL; cd:TconnData=NIL):string;\nbegin\naddArray(table, ['%event%', event]);\nresult:=runScript(eventScripts[event], table, eventScripts, NIL, NIL, cd);\nend; // runEventScript\n\ninitialization\ncachedTpls:=TcachedTpls.create();\neventScripts:=Ttpl.create();\ndefaultAlias:=THashedStringList.create();\ndefaultAlias.caseSensitive:=FALSE;\ndefaultAlias.text:=getRes('alias');\nstaticVars:=THashedStringList.create;\ncurrentCFGhashed:=THashedStringList.create();\nwith staticVars do\n  objects[add('ini='+currentCFG)]:=currentCFGhashed;\n\nfinalization\nfreeAndNIL(cachedTpls);\nfreeAndNIL(eventScripts);\nfreeAndNIL(defaultAlias);\nfreeAndNIL(currentCFGhashed);\nstaticVars.free;\n\nend.\n"], "fixing_code": ["object mainFrm: TmainFrm\n  Left = 293\n  Top = 219\n  Caption = 'HFS ~ HTTP File Server'\n  ClientHeight = 483\n  ClientWidth = 879\n  Color = clBtnFace\n  Constraints.MinHeight = 260\n  Constraints.MinWidth = 390\n  Font.Charset = DEFAULT_CHARSET\n  Font.Color = clWindowText\n  Font.Height = -12\n  Font.Name = 'Tahoma'\n  Font.Style = []\n  KeyPreview = True\n  OldCreateOrder = False\n  Position = poDesigned\n  OnClose = FormClose\n  OnCloseQuery = FormCloseQuery\n  OnCreate = FormCreate\n  OnKeyDown = FormKeyDown\n  OnKeyUp = FormKeyUp\n  OnResize = FormResize\n  OnShow = FormShow\n  PixelsPerInch = 96\n  TextHeight = 14\n  object graphSplitter: TSplitter\n    Left = 0\n    Top = 78\n    Width = 879\n    Height = 5\n    Cursor = crVSplit\n    Align = alTop\n    AutoSnap = False\n    Beveled = True\n    MinSize = 15\n    ResizeStyle = rsUpdate\n    OnMoved = graphSplitterMoved\n    ExplicitTop = 86\n    ExplicitWidth = 752\n  end\n  object graphBox: TPaintBox\n    Left = 0\n    Top = 48\n    Width = 879\n    Height = 30\n    Hint = 'Pink = Out'#13#10'Yellow = In'\n    Align = alTop\n    Font.Charset = DEFAULT_CHARSET\n    Font.Color = clWindowText\n    Font.Height = -12\n    Font.Name = 'Tahoma'\n    Font.Style = []\n    ParentFont = False\n    ParentShowHint = False\n    PopupMenu = graphMenu\n    ShowHint = True\n    OnPaint = graphBoxPaint\n    ExplicitTop = 51\n    ExplicitWidth = 752\n  end\n  object topToolbar: TToolBar\n    Left = 0\n    Top = 0\n    Width = 879\n    Height = 24\n    AutoSize = True\n    ButtonWidth = 150\n    Caption = 'topToolbar'\n    EdgeBorders = [ebBottom]\n    Font.Charset = DEFAULT_CHARSET\n    Font.Color = clWindowText\n    Font.Height = -12\n    Font.Name = 'Tahoma'\n    Font.Style = []\n    Images = images\n    List = True\n    ParentFont = False\n    ShowCaptions = True\n    TabOrder = 1\n    ExplicitWidth = 976\n    object menuBtn: TToolButton\n      Left = 0\n      Top = 0\n      Hint = 'Hit ALT or F10 to pop it up'\n      AutoSize = True\n      Caption = 'Menu'\n      ImageIndex = 13\n      ParentShowHint = False\n      ShowHint = True\n      OnClick = menuBtnClick\n    end\n    object ToolButton4: TToolButton\n      Left = 61\n      Top = 0\n      Width = 9\n      Caption = 'ToolButton4'\n      ImageIndex = 15\n      Style = tbsSeparator\n    end\n    object portBtn: TToolButton\n      Left = 70\n      Top = 0\n      AutoSize = True\n      Caption = 'Port: any'\n      ImageIndex = 38\n      OnClick = portBtnClick\n    end\n    object ToolButton2: TToolButton\n      Left = 151\n      Top = 0\n      Width = 8\n      Caption = 'ToolButton2'\n      ImageIndex = 16\n      Style = tbsSeparator\n    end\n    object modeBtn: TToolButton\n      Left = 159\n      Top = 0\n      Hint = 'Click to switch'#13#10'F5 on keyboard'\n      AutoSize = True\n      Caption = 'You are in Easy mode'\n      ImageIndex = 29\n      ParentShowHint = False\n      ShowHint = True\n      OnClick = modeBtnClick\n    end\n    object ToolButton1: TToolButton\n      Left = 309\n      Top = 0\n      Width = 9\n      Caption = 'ToolButton1'\n      ImageIndex = 13\n      Style = tbsSeparator\n    end\n    object startBtn: TToolButton\n      Left = 318\n      Top = 0\n      Hint = 'Click to switch ON'#13'F4 on keyboard'\n      AutoSize = True\n      Caption = 'Server is currently OFF'\n      ImageIndex = 11\n      ParentShowHint = False\n      ShowHint = True\n      OnClick = startBtnClick\n    end\n    object abortBtn: TToolButton\n      Left = 472\n      Top = 0\n      AutoSize = True\n      Caption = 'Abort file addition'\n      ImageIndex = 25\n      Visible = False\n      OnClick = abortBtnClick\n    end\n    object restoreCfgBtn: TToolButton\n      Left = 600\n      Top = 0\n      Caption = 'Restore my options'\n      ImageIndex = 34\n      Visible = False\n      OnClick = restoreCfgBtnClick\n    end\n    object updateBtn: TToolButton\n      Left = 750\n      Top = 0\n      AutoSize = True\n      Caption = 'Update now'\n      ImageIndex = 10\n      Visible = False\n      OnClick = updateBtnClick\n    end\n  end\n  object urlToolbar: TToolBar\n    Left = 0\n    Top = 24\n    Width = 879\n    Height = 24\n    AutoSize = True\n    ButtonWidth = 122\n    EdgeBorders = [ebBottom]\n    Font.Charset = DEFAULT_CHARSET\n    Font.Color = clWindowText\n    Font.Height = -12\n    Font.Name = 'Tahoma'\n    Font.Style = []\n    Images = images\n    List = True\n    ParentFont = False\n    ShowCaptions = True\n    TabOrder = 2\n    Wrapable = False\n    ExplicitWidth = 976\n    object browseBtn: TToolButton\n      Left = 0\n      Top = 0\n      AutoSize = True\n      Caption = 'Open in browser'\n      ImageIndex = 26\n      OnClick = browseBtnClick\n    end\n    object urlBox: TEdit\n      Left = 122\n      Top = 0\n      Width = 433\n      Height = 22\n      TabOrder = 0\n      OnChange = urlBoxChange\n    end\n    object copyBtn: TToolButton\n      Left = 555\n      Top = 0\n      AutoSize = True\n      Caption = 'Copy to clipboard'\n      ImageIndex = 16\n      OnClick = copyBtnClick\n    end\n  end\n  object centralPnl: TPanel\n    Left = 0\n    Top = 83\n    Width = 879\n    Height = 400\n    Align = alClient\n    BevelOuter = bvNone\n    Font.Charset = DEFAULT_CHARSET\n    Font.Color = clWindowText\n    Font.Height = -12\n    Font.Name = 'Tahoma'\n    Font.Style = []\n    ParentFont = False\n    TabOrder = 0\n    ExplicitWidth = 976\n    object splitV: TSplitter\n      Left = 313\n      Top = 0\n      Height = 289\n      Beveled = True\n      Constraints.MaxWidth = 3\n      Constraints.MinWidth = 3\n      ResizeStyle = rsUpdate\n      OnMoved = splitVMoved\n      ExplicitHeight = 219\n    end\n    object splitH: TSplitter\n      Left = 0\n      Top = 289\n      Width = 879\n      Height = 5\n      Cursor = crVSplit\n      Align = alBottom\n      Beveled = True\n      MinSize = 1\n      ResizeStyle = rsUpdate\n      OnMoved = splitHMoved\n      ExplicitTop = 218\n      ExplicitWidth = 732\n    end\n    object logPnl: TPanel\n      Left = 316\n      Top = 0\n      Width = 563\n      Height = 289\n      Align = alClient\n      BevelOuter = bvNone\n      TabOrder = 1\n      ExplicitWidth = 660\n      object logBox: TRichEdit\n        Left = 0\n        Top = 23\n        Width = 563\n        Height = 266\n        Align = alClient\n        Font.Charset = ANSI_CHARSET\n        Font.Color = clWindowText\n        Font.Height = -12\n        Font.Name = 'Tahoma'\n        Font.Style = []\n        HideSelection = False\n        ParentFont = False\n        PopupMenu = logmenu\n        ReadOnly = True\n        ScrollBars = ssBoth\n        TabOrder = 0\n        WordWrap = False\n        Zoom = 100\n        OnChange = logBoxChange\n        OnMouseDown = logBoxMouseDown\n        ExplicitWidth = 660\n      end\n      object logTitle: TPanel\n        Left = 0\n        Top = 0\n        Width = 563\n        Height = 23\n        Align = alTop\n        BevelOuter = bvNone\n        TabOrder = 1\n        ExplicitWidth = 660\n        object titlePnl: TPanel\n          Left = 0\n          Top = 0\n          Width = 303\n          Height = 23\n          Align = alClient\n          BevelOuter = bvNone\n          Caption = 'Log'\n          TabOrder = 0\n          ExplicitWidth = 400\n        end\n        object logToolbar: TPanel\n          Left = 303\n          Top = 0\n          Width = 260\n          Height = 23\n          Align = alRight\n          AutoSize = True\n          BevelOuter = bvNone\n          TabOrder = 1\n          ExplicitLeft = 400\n          object collapsedPnl: TPanel\n            Left = 0\n            Top = 0\n            Width = 21\n            Height = 23\n            Align = alRight\n            AutoSize = True\n            BevelOuter = bvNone\n            TabOrder = 0\n            object expandBtn: TSpeedButton\n              Left = 0\n              Top = 0\n              Width = 21\n              Height = 23\n              Hint = 'Expand toolbar'\n              Align = alClient\n              Flat = True\n              Glyph.Data = {\n                EE010000424DEE0100000000000036000000280000000D0000000B0000000100\n                180000000000B801000000000000000000000000000000000000C8D0D4C8D0D4\n                C8D0D4C8D0D4C8D0D49A775AC8D0D4C8D0D4C8D0D4C8D0D49A775AC8D0D4C8D0\n                D473C8D0D4C8D0D4C8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A\n                8C05009A775AC8D0D473C8D0D4C8D0D4C8D0D4AC76578C05009A775AC8D0D4C8\n                D0D4AC76578C05009A775AC8D0D4C8D0D473C8D0D4C8D0D49A775A8C05009A77\n                5AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D4C8D0D473C8D0D49A775A\n                8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D4C8D0D4C8D0\n                D4739A775A8C0500B37E5FC8D0D4C8D0D49A775A8C0500B37E5FC8D0D4C8D0D4\n                C8D0D4C8D0D4C8D0D473C8D0D4B17C5C8C05009A775AC8D0D4C8D0D4B17C5C8C\n                05009A775AC8D0D4C8D0D4C8D0D4C8D0D473C8D0D4C8D0D49A775A8C0500AF79\n                5AC8D0D4C8D0D49A775A8C0500AF795AC8D0D4C8D0D4C8D0D473C8D0D4C8D0D4\n                C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0\n                D473C8D0D4C8D0D4C8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A\n                8C05009A775AC8D0D473C8D0D4C8D0D4C8D0D4C8D0D4C8D0D49A775AC8D0D4C8\n                D0D4C8D0D4C8D0D49A775AC8D0D4C8D0D473}\n              ParentShowHint = False\n              ShowHint = True\n              OnClick = expandBtnClick\n              ExplicitTop = 1\n            end\n          end\n          object expandedPnl: TPanel\n            Left = 21\n            Top = 0\n            Width = 239\n            Height = 23\n            Align = alRight\n            AutoSize = True\n            BevelOuter = bvNone\n            TabOrder = 1\n            object openFilteredLog: TSpeedButton\n              Left = 213\n              Top = 0\n              Width = 26\n              Height = 23\n              Hint = 'Copy to editor only lines matched by the search pattern'\n              Align = alRight\n              Enabled = False\n              Flat = True\n              Glyph.Data = {\n                36060000424D3606000000000000360000002800000020000000100000000100\n                18000000000000060000C21E0000C21E00000000000000000000FF00FFFF00FF\n                FF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00\n                FF979697756A67A3A2A2FF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF\n                00FFFF00FFFF00FFFF00FFFF00FFFF00FFAEAEAE989898B5B5B5FF00FFFF00FF\n                FF00FFFF00FFFF00FFC9A9A3D0AFA9E0B2A8E0B2A8E0B2A8E0B2A8E0B2A88B89\n                8A9C6F757890DB749AB5FF00FFFF00FFFF00FFFF00FFFF00FFB8B8B8BCBCBCBD\n                BDBDBDBDBDBDBDBDBDBDBDBDBDBDA8A8A89D9D9DB5B5B5B3B3B3FF00FFFF00FF\n                FF00FFFF00FFFF00FFCDABA3E4D4C7F6EFE7F6EFE7F6EFE7F6EFE79291939D70\n                747185D340B4FF89D1F5FF00FFFF00FFFF00FFFF00FFFF00FFB9B9B9CCCCCCDA\n                DADADADADADADADADADADAADADAD9E9E9EB0B0B0C5C5C5CFCFCFFF00FFFF00FF\n                FF00FFFF00FFFF00FFCFB0AAEAD8CBF9EADAFBE7D3FBE4CDA7A9AB966C746F89\n                DB3DBFFF97D5F3FF00FFFF00FFFF00FFFF00FFFF00FFFF00FFBCBCBCCECECED7\n                D7D7D5D5D5D3D3D3B8B8B89C9C9CB3B3B3C9C9C9CFCFCFFF00FFFF00FFC2A5A2\n                C29790C29790C29790BC91886A5D5C8473707F6C69837D805A52546886CD2EB2\n                FF5B8FAFD9B39CFF00FFFF00FFB7B7B7B0B0B0B0B0B0B0B0B0ADADAD9292929D\n                9D9D9B9B9BA3A3A38D8D8DB0B0B0C5C5C5AEAEAEBCBCBCFF00FFFF00FFC2A5A2\n                F8E6DDF8E6DDF8E6DDA2817CFFFFFAFFFFFFFFFFECFFE8B8BD91859AB6C78CB9\n                D1F5E8D7DCB79EFF00FFFF00FFB7B7B7D6D6D6D6D6D6D6D6D6A5A5A5E2E2E2E2\n                E2E2E0E0E0D3D3D3ADADADC0C0C0C2C2C2D6D6D6BEBEBEFF00FFFF00FFC5A7A2\n                F6EDE2F8E9D8847876FFFFF9F4FBFFEEF3DFF0F3CDF5F7C4EECBA4CCBBB9FBD7\n                B3F7E7D5DDB8A0FF00FFFF00FFB7B7B7D9D9D9D6D6D6A0A0A0E2E2E2E1E1E1DB\n                DBDBD8D8D8DADADAC6C6C6C1C1C1CCCCCCD6D6D6BEBEBEFF00FFFF00FFCDABA3\n                F8E5D1FED1A5BEAD94F8FEEAE2E5E5DFE1D9DEE1C5DBCEA6E3D5A8D1B8A7FBE3\n                C9F7EBDDE0BBA3FF00FFFF00FFB9B9B9D4D4D4C9C9C9B8B8B8E0E0E0D6D6D6D3\n                D3D3D1D1D1C7C7C7CACACABEBEBED3D3D3D8D8D8C0C0C0FF00FFFF00FFCEADA7\n                F7EDE3F8E9D8D0BE9DEFF6D3DFE4CFDAE0C8D9DCB9D7C7A0DBCEA3D8C3ADFED8\n                B2F8E7D5E0BBA3FF00FFFF00FFBABABAD9D9D9D6D6D6C0C0C0DBDBDBD3D3D3D1\n                D1D1CECECEC4C4C4C7C7C7C3C3C3CCCCCCD6D6D6C0C0C0FF00FFFF00FFD1B3AD\n                FAE7D4FED1A5BB9B81FDFECBE3E1BCE0DFB9DFD5A8DECDABE6E4BDD1BDABFEEF\n                DFF7D4C9E2A398FF00FFFF00FFBDBDBDD5D5D5C9C9C9B0B0B0DDDDDDD0D0D0CF\n                CFCFCACACAC8C8C8D1D1D1C1C1C1DADADACDCDCDB7B7B7FF00FFFF00FFDCBBAB\n                FAF4EFFEEFE0A18D8EEBCC9DF4EDB7EDD5A1EDE0B9ECF2F6DBCAC2C7C0BFE5D0\n                C8C48F77BE8D7FFF00FFFF00FFC1C1C1DDDDDDDADADAABABABC5C5C5D5D5D5CA\n                CACACFCFCFDDDDDDC8C8C8C4C4C4CBCBCBABABABABABABFF00FFFF00FFE3C1AD\n                FBEDDEFED1A5FED1A5B59B97E3C5A5EFD8ABE4D5AFD3C3BAC0B7B9F5F3F1DECC\n                C8D8A582FF00FFFF00FFFF00FFC3C3C3D8D8D8C9C9C9C9C9C9B2B2B2C4C4C4CC\n                CCCCCACACAC4C4C4BFBFBFDDDDDDCACACAB5B5B5FF00FFFF00FFFF00FFE9C7B0\n                FCFCFDFFFEFEFEFCF8F6DFC9C2C5D0BCB4BCB0A8AEC0C5CCD7A990E7C5AFDEBC\n                ABFF00FFFF00FFFF00FFFF00FFC5C5C5E1E1E1E2E2E2E1E1E1D1D1D1C8C8C8BF\n                BFBFB8B8B8C7C7C7B7B7B7C5C5C5C1C1C1FF00FFFF00FFFF00FFFF00FFECCBB3\n                FEFDFDFFFFFEFEFEFEFEFCFAFEF8F1FEF5EAC89C8EBF8E80CDABA3FF00FFFF00\n                FFFF00FFFF00FFFF00FFFF00FFC8C8C8E2E2E2E2E2E2E2E2E2E1E1E1DFDFDFDD\n                DDDDB2B2B2ABABABB9B9B9FF00FFFF00FFFF00FFFF00FFFF00FFFF00FFF3D3B6\n                FEFEFEFEFEFEFDFEFDFCFCFCFCFAF7FCF7F0C9957AE3B58FFF00FFFF00FFFF00\n                FFFF00FFFF00FFFF00FFFF00FFCACACAE2E2E2E2E2E2E2E2E2E1E1E1E0E0E0DE\n                DEDEAEAEAEBCBCBCFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFF3D3B6\n                E7C4AEE7C4AEE6C4ADE5C2ACE5C2ACE5C1A9C49788FF00FFFF00FFFF00FFFF00\n                FFFF00FFFF00FFFF00FFFF00FFCACACAC4C4C4C4C4C4C4C4C4C3C3C3C3C3C3C3\n                C3C3AFAFAFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FF}\n              NumGlyphs = 2\n              ParentShowHint = False\n              ShowHint = True\n              OnClick = openLogBtnClick\n            end\n            object openLogBtn: TSpeedButton\n              Left = 187\n              Top = 0\n              Width = 26\n              Height = 23\n              Hint = 'Copy to editor'\n              Align = alRight\n              Flat = True\n              Glyph.Data = {\n                36040000424D3604000000000000360000002800000010000000100000000100\n                2000000000000004000000000000000000000000000000000000FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00C9A9A300D0AFA900E0B2A800E0B2A800E0B2\n                A800E0B2A800E0B2A800E0B2A800E0B2A800C4958E00FF00FF00FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00CDABA300E4D4C700F6EFE700F6EFE700F6EF\n                E700F6EFE700F6EFE700F6EFE700F6EFE700D8B29B00FF00FF00FF00FF00FF00\n                FF00FF00FF00FF00FF00FF00FF00CFB0AA00EAD8CB00F9EADA00FBE7D300FBE4\n                CD00FBE3C900FBE3C900FBDFBF00F7E9D900D8B29B00FF00FF00FF00FF00C2A5\n                A200C2979000C2979000C2979000BC918800E7DBD400F9DFC400FBD7B300FBD7\n                B300FBD7B300FBD7B300FDD7B200F7E7D500D9B39C00FF00FF00FF00FF00C2A5\n                A200F8E6DD00F8E6DD00F8E6DD00D6B0A100EDDFD500F9E4CC00FBDFBF00FBDF\n                BF00FBDFBF00FBDFBF00F5DBB800F5E8D700DCB79E00FF00FF00FF00FF00C5A7\n                A200F6EDE200F8E9D800F9E9D700DAB49E00EFE3DB00F9DFC400FBD7B300FBD7\n                B300FBD7B300FBD7B300FBD7B300F7E7D500DDB8A000FF00FF00FF00FF00CDAB\n                A300F8E5D100FED1A500FED1A300E3B28E00F2E9E000FAE8D600FBE3C900FBE3\n                C900FBE3C900FBE3C900FBE3C900F7EBDD00E0BBA300FF00FF00FF00FF00CEAD\n                A700F7EDE300F8E9D800F8E9D800E5BDA200F4ECE400FDE6CF00FEDCBB00FDDB\n                B900FEDAB500FED9B400FED8B200F8E7D500E0BBA300FF00FF00FF00FF00D1B3\n                AD00FAE7D400FED1A500FED1A500EAB99400F8F0E900FFFEFE00FEFEFE00FEFA\n                F900FEF8EF00FEF4EA00FEEFDF00F7D4C900E2A39800FF00FF00FF00FF00DCBB\n                AB00FAF4EF00FEEFE000FEECD900EEC7A800FAF2EA00FDFEFE00FEFEFE00FEFE\n                FD00FEFBF900FEF9F100E5D0C800C48F7700BE8D7F00FF00FF00FF00FF00E3C1\n                AD00FBEDDE00FED1A500FED1A500F2C39800FDF4EA00FDFEFC00FAFBFA00FAF8\n                F800F6F6F600F5F3F100DECCC800D8A58200FF00FF00FF00FF00FF00FF00E9C7\n                B000FCFCFD00FFFEFE00FEFCF800F6DFC900E7C2A800E7C0A600E2B69A00DAA8\n                8B00D7A99000E7C5AF00DEBCAB00FF00FF00FF00FF00FF00FF00FF00FF00ECCB\n                B300FEFDFD00FFFFFE00FEFEFE00FEFCFA00FEF8F100FEF5EA00C89C8E00BF8E\n                8000CDABA300FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00F3D3\n                B600FEFEFE00FEFEFE00FDFEFD00FCFCFC00FCFAF700FCF7F000C9957A00E3B5\n                8F00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00F3D3\n                B600E7C4AE00E7C4AE00E6C4AD00E5C2AC00E5C2AC00E5C1A900C4978800FF00\n                FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00}\n              ParentShowHint = False\n              ShowHint = True\n              OnClick = openLogBtnClick\n            end\n            object collapseBtn: TSpeedButton\n              Left = 0\n              Top = 0\n              Width = 21\n              Height = 23\n              Hint = 'Collapse toolbar'\n              Align = alRight\n              Flat = True\n              Glyph.Data = {\n                EE010000424DEE0100000000000036000000280000000D0000000B0000000100\n                180000000000B801000000000000000000000000000000000000C8D0D4C8D0D4\n                9A775AC8D0D4C8D0D4C8D0D4C8D0D49A775AC8D0D4C8D0D4C8D0D4C8D0D4C8D0\n                D400C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4\n                C8D0D4C8D0D4C8D0D400C8D0D4C8D0D49A775A8C0500AC7657C8D0D4C8D0D49A\n                775A8C0500AC7657C8D0D4C8D0D4C8D0D400C8D0D4C8D0D4C8D0D49A775A8C05\n                009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D400C8D0D4C8D0D4\n                C8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0\n                D400C8D0D4C8D0D4C8D0D4C8D0D4C8D0D4B37E5F8C05009A775AC8D0D4C8D0D4\n                B37E5F8C05009A775A00C8D0D4C8D0D4C8D0D4C8D0D49A775A8C0500B17C5CC8\n                D0D4C8D0D49A775A8C0500B17C5CC8D0D400C8D0D4C8D0D4C8D0D4AF795A8C05\n                009A775AC8D0D4C8D0D4AF795A8C05009A775AC8D0D4C8D0D400C8D0D4C8D0D4\n                9A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4C8D0D4C8D0\n                D400C8D0D49A775A8C05009A775AC8D0D4C8D0D49A775A8C05009A775AC8D0D4\n                C8D0D4C8D0D4C8D0D400C8D0D4C8D0D49A775AC8D0D4C8D0D4C8D0D4C8D0D49A\n                775AC8D0D4C8D0D4C8D0D4C8D0D4C8D0D400}\n              ParentShowHint = False\n              ShowHint = True\n              OnClick = collapseBtnClick\n            end\n            object Bevel1: TBevel\n              Left = 21\n              Top = 0\n              Width = 2\n              Height = 23\n              Align = alRight\n            end\n            object searchPnl: TPanel\n              Left = 23\n              Top = 0\n              Width = 164\n              Height = 23\n              Align = alRight\n              AutoSize = True\n              BevelOuter = bvNone\n              Padding.Left = 5\n              TabOrder = 0\n              DesignSize = (\n                164\n                23)\n              object logSearchBox: TLabeledEdit\n                Left = 45\n                Top = 1\n                Width = 103\n                Height = 22\n                Hint = 'Wildcards allowed'\n                Anchors = [akTop, akRight]\n                EditLabel.Width = 37\n                EditLabel.Height = 14\n                EditLabel.Caption = 'Search'\n                LabelPosition = lpLeft\n                ParentShowHint = False\n                ShowHint = True\n                TabOrder = 0\n                OnChange = logSearchBoxChange\n                OnKeyPress = logSearchBoxKeyPress\n              end\n              object logUpDown: TUpDown\n                Left = 148\n                Top = 0\n                Width = 16\n                Height = 24\n                Anchors = [akTop, akRight]\n                Min = -30000\n                Max = 30000\n                TabOrder = 1\n                OnClick = logUpDownClick\n              end\n            end\n          end\n        end\n      end\n    end\n    object filesPnl: TPanel\n      Left = 0\n      Top = 0\n      Width = 313\n      Height = 289\n      Align = alLeft\n      BevelOuter = bvNone\n      Caption = 'filesPnl'\n      TabOrder = 0\n      object filesBox: TTreeView\n        Left = 0\n        Top = 23\n        Width = 313\n        Height = 266\n        Align = alClient\n        BevelInner = bvLowered\n        BevelOuter = bvSpace\n        Constraints.MinWidth = 50\n        DragMode = dmAutomatic\n        HotTrack = True\n        Images = images\n        Indent = 25\n        MultiSelect = True\n        MultiSelectStyle = [msControlSelect, msShiftSelect]\n        ParentShowHint = False\n        PopupMenu = filemenu\n        ShowHint = True\n        ShowRoot = False\n        SortType = stBoth\n        StateImages = images\n        TabOrder = 0\n        OnAddition = filesBoxAddition\n        OnChange = filesBoxChange\n        OnCollapsing = filesBoxCollapsing\n        OnCompare = filesBoxCompare\n        OnCustomDrawItem = filesBoxCustomDrawItem\n        OnDblClick = filesBoxDblClick\n        OnDeletion = filesBoxDeletion\n        OnDragDrop = filesBoxDragDrop\n        OnDragOver = filesBoxDragOver\n        OnEdited = filesBoxEdited\n        OnEditing = filesBoxEditing\n        OnEndDrag = filesBoxEndDrag\n        OnEnter = filesBoxEnter\n        OnExit = filesBoxExit\n        OnMouseDown = filesBoxMouseDown\n        OnMouseEnter = filesBoxMouseEnter\n        OnMouseLeave = filesBoxMouseLeave\n        OnMouseUp = filesBoxMouseUp\n      end\n      object filesTitle: TPanel\n        Left = 0\n        Top = 0\n        Width = 313\n        Height = 23\n        Align = alTop\n        BevelOuter = bvNone\n        Caption = 'Virtual File System'\n        TabOrder = 1\n      end\n    end\n    object connPnl: TPanel\n      Left = 0\n      Top = 294\n      Width = 879\n      Height = 106\n      Align = alBottom\n      BevelOuter = bvNone\n      TabOrder = 2\n      ExplicitWidth = 976\n      object sbar: TStatusBar\n        Left = 0\n        Top = 87\n        Width = 879\n        Height = 19\n        Panels = <\n          item\n            Width = 2000\n          end>\n        OnDblClick = sbarDblClick\n        OnMouseDown = sbarMouseDown\n        ExplicitWidth = 976\n      end\n      object connBox: TListView\n        Left = 0\n        Top = 0\n        Width = 879\n        Height = 87\n        Align = alClient\n        Columns = <\n          item\n            Caption = 'IP address'\n            ImageIndex = 0\n            Width = 206\n          end\n          item\n            Alignment = taCenter\n            Caption = 'File'\n            ImageIndex = 7\n            Width = 206\n          end\n          item\n            Alignment = taCenter\n            Caption = 'Status'\n            Width = 206\n          end\n          item\n            Alignment = taCenter\n            Caption = 'Speed'\n            Width = 100\n          end\n          item\n            Alignment = taCenter\n            Caption = 'Time left'\n          end\n          item\n            Alignment = taCenter\n            AutoSize = True\n            Caption = 'Progress'\n          end>\n        ColumnClick = False\n        FullDrag = True\n        GridLines = True\n        OwnerData = True\n        ReadOnly = True\n        RowSelect = True\n        ParentShowHint = False\n        PopupMenu = connmenu\n        ShowHint = True\n        SmallImages = images\n        TabOrder = 1\n        ViewStyle = vsReport\n        OnAdvancedCustomDrawSubItem = connBoxAdvancedCustomDrawSubItem\n        OnData = connBoxData\n        ExplicitWidth = 976\n      end\n    end\n  end\n  object filemenu: TPopupMenu\n    Images = images\n    OwnerDraw = True\n    OnPopup = filemenuPopup\n    Left = 128\n    Top = 168\n    object Addfiles1: TMenuItem\n      Caption = 'Add files...'\n      OnClick = Addfiles1Click\n    end\n    object Addfolder1: TMenuItem\n      Caption = 'Add folder from disk...'\n      ImageIndex = 8\n      OnClick = Addfolder1Click\n    end\n    object newfolder1: TMenuItem\n      Caption = 'New empty folder'\n      ShortCut = 45\n      OnClick = newfolder1Click\n    end\n    object Newlink1: TMenuItem\n      Caption = 'New link'\n      ImageIndex = 4\n      OnClick = Newlink1Click\n    end\n    object Remove1: TMenuItem\n      Caption = 'Remove'\n      ImageIndex = 21\n      ShortCut = 46\n      OnClick = Remove1Click\n    end\n    object Rename1: TMenuItem\n      Caption = 'Rename'\n      ShortCut = 113\n      OnClick = Rename1Click\n    end\n    object Paste1: TMenuItem\n      Caption = 'Paste'\n      ImageIndex = 17\n      ShortCut = 16470\n      OnClick = Paste1Click\n    end\n    object Editresource1: TMenuItem\n      Caption = 'Edit resource...'\n      OnClick = Editresource1Click\n    end\n    object N7: TMenuItem\n      Caption = '-'\n    end\n    object CopyURL1: TMenuItem\n      Caption = 'Copy URL address'\n      Default = True\n      Hint = 'just double click!'\n      ImageIndex = 16\n      ShortCut = 16451\n      OnClick = CopyURL1Click\n    end\n    object CopyURLwithpassword1: TMenuItem\n      AutoHotkeys = maManual\n      Caption = 'Copy URL with password'\n    end\n    object Browseit1: TMenuItem\n      Caption = 'Browse it'\n      ImageIndex = 26\n      ShortCut = 120\n      OnClick = Browseit1Click\n    end\n    object SetURL1: TMenuItem\n      Caption = 'Set URL...'\n      ImageIndex = 4\n      OnClick = SetURL1Click\n    end\n    object Openit1: TMenuItem\n      Caption = 'Open it'\n      ShortCut = 119\n      OnClick = Openit1Click\n    end\n    object Flagasnew1: TMenuItem\n      Caption = 'Flag as new'\n      OnClick = Flagasnew1Click\n    end\n    object Resetnewflag1: TMenuItem\n      Caption = 'Reset <new> flag'\n      OnClick = Resetnewflag1Click\n    end\n    object Setuserpass1: TMenuItem\n      Caption = 'Set user/pass...'\n      ImageIndex = 12\n      OnClick = Setuserpass1Click\n    end\n    object Resetuserpass1: TMenuItem\n      Caption = 'Reset user/pass'\n      OnClick = Resetuserpass1Click\n    end\n    object N11: TMenuItem\n      Caption = '-'\n    end\n    object CopyURLwithdifferentaddress1: TMenuItem\n      Caption = 'Copy URL with different host address'\n    end\n    object CopyURLwithfingerprint1: TMenuItem\n      Caption = 'Copy URL with fingerprint'\n      OnClick = CopyURLwithfingerprint1Click\n    end\n    object Purge1: TMenuItem\n      Caption = 'Purge...'\n      OnClick = Purge1Click\n    end\n    object Switchtovirtual1: TMenuItem\n      Caption = 'Change to virtual-folder'\n      OnClick = Switchtovirtual1Click\n    end\n    object Switchtorealfolder1: TMenuItem\n      Caption = 'Change to real-folder'\n      OnClick = Switchtorealfolder1Click\n    end\n    object Bindroottorealfolder1: TMenuItem\n      Caption = 'Bind root to real-folder'\n      OnClick = Bindroottorealfolder1Click\n    end\n    object Unbindroot1: TMenuItem\n      Caption = 'Unbind root'\n      OnClick = Unbindroot1Click\n    end\n    object Defaultpointtoaddfiles1: TMenuItem\n      Caption = 'Default point to add files'\n      OnClick = Defaultpointtoaddfiles1Click\n    end\n    object N14: TMenuItem\n      Caption = '-'\n    end\n    object Properties1: TMenuItem\n      Caption = 'Properties...'\n      ShortCut = 32781\n      OnClick = Properties1Click\n    end\n  end\n  object images: TImageList\n    DrawingStyle = dsTransparent\n    Left = 208\n    Top = 112\n    Bitmap = {\n      494C010129002C00040010001000FFFFFFFFFF10FFFFFFFFFFFFFFFF424D3600\n      000000000000360000002800000040000000B0000000010020000000000000B0\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000009A9A9A009999\n      9900999999009A9A9A00ABABAB00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000AFAFAF0059595900656565007373\n      7300787878006B6B6B00626262005B5B5B0071717100A6A6A600A9A9A9008A8A\n      8A00828282007F7F7F008D8D8D00C8C8C8000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000ACACAC00676767007B7B7B008787\n      870082828200B1B1B1008383830079797900646464009B9B9B008B8B8B009F9F\n      9F00A7A7A7009E9E9E0091919100777777000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000077777700868686008D8D\n      8D009C9C9C00CECECE0094949400878787006F6F6F00A3A3A300D6D6D600B5B5\n      B500B4B4B400B0B0B0009F9F9F00A5A5A5000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000007F7F7F006464\n      64007272720082828200858585007D7D7D008C8C8C00B1B1B100EDEDED00E5E5\n      E500AEAEAE00B8B8B800A5A5A500000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000ACACAC002B2B2B002626\n      26004D4D4D004E4E4E003F3F3F0068686800A7A7A700A9A9A900B0B0B000A5A5\n      A500979797008787870000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000B1B1B1001B1B1B001A1A1A005A5A\n      5A006B6B6B006B6B6B005F5F5F0054545400C9C9C9009B9B9B00A1A1A100A6A6\n      A600A0A0A0007A7A7A00BDBDBD00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000006565650020202000393939007F7F\n      7F0085858500858585007E7E7E0054545400B0B0B000A9A9A900B6B6B600B6B6\n      B600B6B6B600AAAAAA008B8B8B00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000059595900313131003F3F3F009494\n      9400A5A5A500A5A5A50099999900626262009F9F9F00B9B9B900C0C0C000C1C1\n      C100BFBFBF00BBBBBB008A8A8A00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000008F8F8F0040404000414141006060\n      600082828200979797009C9C9C0079797900CACACA00C3C3C300C4C4C400C6C6\n      C600C5C5C500C2C2C2009B9B9B00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000058585800585858007474\n      74006E6E6E004C4C4C0035353500A0A0A00000000000A3A3A3009F9F9F00A8A8\n      A800ACACAC00A7A7A70089898900000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000006E6E6E008C8C\n      8C008F8F8F00767676007C7C7C000000000000000000ACACAC00AFAFAF00C4C4\n      C400C8C8C8009E9E9E00ADADAD00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000C7C7C700C4C4\n      C400B7B7B700C4C4C40000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000064686A0064686A0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000CECE\n      D600A5A5C60000000000000000000000000000000000CECED600A5A5C6000000\n      0000000000000000000000000000000000000000000000000000808080008080\n      8000808080008080800080808000808080008080800080808000808080008080\n      8000808080008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B00031333400000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000CECED6002929\n      73002929730021213900A5A5C600000000009494F70029297300292973002929\n      7300A5A5C600000000000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B0007D7D7D00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000008E8ABF002C2AB6002A26B400817DB700000000000000\n      0000000000000000000000000000000000000000000000000000292973000000\n      F7000000F7001818BD0021213900A5A5C6002929FF000000F7000000F7002929\n      730029297300CECED6000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B0007D7D7D00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000706EC0000809CE000105E2000203E4000607CE00645DB2000000\n      00000000000000000000000000000000000000000000CECEF7000808FF000000\n      F7000000F7000000F7001818BD00212139001818BD000000F7001818BD000000\n      F70029297300292973000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B0007D7D7D00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00006A67C2000607DB000004F2000204F3000305F2000203F2000505D8005854\n      AD0000000000000000000000000000000000000000009494F7000000F7000000\n      F70021213900CECEF7000808FF000000F7000000F7000000F70021213900CECE\n      F7002929FF001818BD000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      0000000000000000000064686A00FFFFFF00B0B0B0007D7D7D00000000000000\n      000000000000000000000000000000000000000000000000000000000000827B\n      C7000507E1000105FB000005FD000105FD000006FC000006FB000204FC000207\n      DF006865AD00000000000000000000000000000000009494F7000000F7000000\n      F70021213900F7F7F700CECEF7002929FF000000F7000000F70021213900A5A5\n      C60000000000000000000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      00000000000064686A00FFFFFF00FFFFFF00FFFFFF00DEDEDE00232425000000\n      0000000000000000000000000000000000000000000000000000A19DD2001213\n      D8001016FC001216FD001216FC001216FC001216FD001315FD001217FC001314\n      FE000D11D5008D88BA00000000000000000000000000CECEF7002929FF000000\n      F70021213900CECED60000000000CECEF7002929FF000000F7000000F7002121\n      390000000000000000000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A00DEDEDE00FFFFFF00FFFFFF00FFFFFF00FFFFFF00DEDEDE006468\n      6A000000000000000000000000000000000000000000D0CDE1002B2BCB002E2D\n      FB002E2FFB00312FFE003030FE003030FE002F30FE002E2FFD002C30FE002F30\n      FD002C2FFB002121C300C7C6D7000000000000000000000000009494F7000000\n      F7001818BD002121390000000000000000009494F7002929FF000000F7002929\n      7300A5A5C600000000000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A00DEDEDE00FFFFFF00DEDEDE00DEDEDE00FFFFFF00FFFFFF006468\n      6A0000000000000000000000000000000000000000006967C9003C3EF0004748\n      FB004748FD004849FD004749FE004948FD004848FD004949FE004949FE004849\n      FE004849FD003F3EF0005757B500000000000000000000000000CECEF7002929\n      FF000000F70021213900A5A5C60000000000000000002929FF000000F7001818\n      BD0021213900CECED6000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A00DEDEDE00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF006468\n      6A0000000000000000000000000000000000D3D2E4003A3AD4006163FC006162\n      FE006062FD006162FD006263FC006162FD006062FE006362FE006262FE006262\n      FE006363FD006263FC003231CC00D3D2E4000000000000000000000000009494\n      F7000000F7000000F70021213900A5A5C60000000000CECED6000808FF000000\n      F7001818BD00292973000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A00B0B0B000B0B0B000B0B0B000B0B0B000B0B0B000B0B0B0006468\n      6A0000000000000000000000000000000000B5B3E8005153EC00797BFD007779\n      FD007778FE007479FE007979FD00797BFD007C7CFD00787AFE00787BFE00787B\n      FE00797AFD007A7AFB005254EB00A4A4DE000000000000000000000000000000\n      00002929FF000000F7001818BD0021213900A5A5C600E7E7E7000808FF000000\n      F7001818BD0021213900CECED60000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF000000\n      0000000000000000000000000000000000000000000000000000000000006468\n      6A00DEDEDE00DEDEDE00DEDEDE00DEDEDE00DEDEDE00DEDEDE00DEDEDE00CCCC\n      CC0064686A00000000000000000000000000A8ABEB006A6CF3009190FE009091\n      FE008F91FD009092FD009090FC006E72F3007071F6008F91FE008E91FD008F91\n      FE008F93FD008F92FD006D6DF3009D9FEC000000000000000000000000000000\n      0000000000002929FF000000F7001818BD00292973001818BD000808FF002929\n      FF000000F7001818BD00CECED60000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00C0C0\n      C000FFFFFF008080800000000000000000000000000000000000000000000000\n      000064686A0064686A0000ACDC0064686A003133340000ACDC0064686A006468\n      6A0000000000000000000000000000000000C7C8EF006266F300AAAAFD00A9A9\n      FD00A6A9FC00A9A8FC00A9ACFB005355F2005254F000AAABFB00A7A8FB00A7A7\n      FD00AAA8FC00A8AAFB006263F300C7C6F3000000000000000000000000000000\n      000000000000000000009494F7002929FF000000F7000000F7009494F700CECE\n      F7002929FF00A5A5C6000000000000000000000000000000000080808000FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00C0C0\n      C000808080000000000000000000000000000000000000000000000000000000\n      00000000000064686A002FD2FF0064686A00313334002FD2FF0064686A004649\n      4A0000000000000000000000000000000000000000007476F700A0A0FD00BEBF\n      FD00BDC0FC00BFC0FC009697FD007071EE007674F0009897FC00BFC0FB00BDBF\n      FC00BDC0FC00A19FFC007170F600000000000000000000000000000000000000\n      0000000000000000000000000000CECEF7009494F7009494F700000000000000\n      0000CECEF7000000000000000000000000000000000000000000808080008080\n      8000808080008080800080808000808080008080800080808000808080008080\n      8000000000000000000000000000000000000000000000000000000000000000\n      00000000000064686A002FD2FF0064686A0064686A002FD2FF007D7D7D000000\n      00000000000000000000000000000000000000000000000000006F6FF2007878\n      FA008D8BFD007675FB007878F20000000000000000008688F6007676FA008A8A\n      FC007878FA007476F70000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000064686A0064686A0064686A0064686A0064686A0064686A000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000FEFE\n      FEFFEDE4DBFFBE9D7DFF9A6734FF996633FF996633FF9A6734FFBE9D7DFFEDE4\n      DBFFFEFEFEFF0000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000008484840084848400848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400848484008484840000000000000000008484840084848400848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400848484008484840000000000000000000000000000000000FCFBFAFFB793\n      6FFF9C6B39FFC3A586FFE3D4C6FFF1EAE3FFF1EAE3FFE3D4C6FFC3A586FF9C6B\n      39FFB7936FFFFCFBFAFF00000000000000000000000000000000434353005C5C\n      69005E5E6C005757650057576B00000000000000000000000000000000000000\n      00000000000000000000000000000000000084848400C6C6C600FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00C6C6C60084848400848484000000000084848400C6C6C600FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00C6C6C60084848400848484000000000000000000FCFBFAFFA6794CFFB089\n      61FFF3EDE7FFFFFFFFFFFFFFFFFFF5F5FBFFF5F5FBFFFFFFFFFFFFFFFFFFF3ED\n      E7FFB08961FFA6794CFFFCFBFAFF000000006161610048484F0049494B006161\n      61004C4C4C003E3E3E0071717100626263003C3C55003D3D40003D3D40003D3D\n      40003D3D40003D3D40003D3D40006161610084848400C6C6C600848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400C6C6C60084848400848484000000000084848400C6C6C600848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400C6C6C600848484008484840000000000FEFEFEFFB7936FFFB08961FFFDFB\n      FAFFFFFFFFFFFFFFFFFF5050B9FF000099FF000099FF5050B9FFFFFFFFFFFFFF\n      FFFFFDFBFAFFB08961FFB7936FFFFEFEFEFF6161610048484F0048484A005454\n      54003939390064646400B1B1B1005E5E5E00424242003D3D4000646466005858\n      58004E4E4E005E5E5E00565656002A2A3A0084848400C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6\n      C600C6C6C60084848400848484000000000084848400C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6\n      C600C6C6C600848484008484840000000000EDE4DBFF9D6B3AFFF4EEE8FFFFFF\n      FFFFFFFFFFFFE4E4F5FF01019CFF1C1CDEFF1212D7FF00009CFFE3E3F4FFFFFF\n      FFFFFFFFFFFFF4EEE8FF9D6B3AFFEDE4DBFF0000000048484F0048484F005858\n      580053525100A8A7A500CAC9C8004A4A4B00363636003D3D3D00797979004A4A\n      4A0079797900353535004C4C4C002B2B3A0084848400C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C6000084\n      00000084000084848400848484000000000084848400C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C600C6C6C6000084\n      000000840000848484008484840000000000BE9D7CFFC3A587FFFFFFFFFFFFFF\n      FFFFE3E3F4FFC3C3E7FF02029EFF1D1DE0FF1D1DE0FF01019DFFC3C3E7FFE3E3\n      F4FFFFFFFFFFFFFFFFFFC3A587FFBE9D7CFF00000000000000003D3D40005858\n      6A0076777F00B7BAC500BABABB0052514D003434330044444400BABABB004D4D\n      4D00BABABB0040414100393939002929420084848400FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF0084848400848484000000000084848400FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF008484840084848400000000009A6734FFE3D4C6FFFFFFFFFF5151\n      BAFF02029DFF03039EFF0505A3FF2626E6FF1D1DE0FF0303A2FF01019DFF0000\n      9CFF5050B9FFFFFFFFFFE3D4C6FF9A6734FF00000000A2ABB100382B27001618\n      45000E2A8E00132C8E003A2D67006F6B5A00000000005B596200BABABB004E57\n      5C00BABABB00696D720032335900000000000000000084848400C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600000084000000FF0000000000C6C6C600C6C6\n      C600C6C6C600C6C6C60084848400000000000000000084848400C6C6C600C6C6\n      C600C6C6C600C6C6C600C6C6C600C6C6C60000000000C6C6C600C6C6C600C6C6\n      C600C6C6C600C6C6C6008484840000000000996633FFF1E9E2FFF5F5FBFF0000\n      99FF4040F6FF3939F3FF3030ECFF3030ECFF2626E6FF1D1DE0FF1D1DE0FF1212\n      D7FF000099FFF5F5FBFFF1E9E2FF996633FFABB0B4001B1B1C000C152A00163F\n      98001A4CB1001A4CB1001640A200424D6E00C2CBC2005499AE00288DE2002B90\n      ED00278CE1002B739D00ADBCC400000000000000000000000000848484008484\n      84008484840084848400848484000000FF000000FF0000000000848484008484\n      8400848484008484840084848400000000000000000000000000848484008484\n      84008484840084848400848484000000FF000000FF0000000000848484008484\n      840084848400848484008484840000000000996633FFF1E9E2FFF5F5FBFF0000\n      99FF4949FCFF4343F9FF3939F3FF3030ECFF3030ECFF2626E6FF1D1DE0FF1C1C\n      DEFF000099FFF5F5FBFFF1E9E2FF996633FF5A646B0020202000172F56002163\n      C8002469CF002469CF002162C70028457E00A3AFB5003A98E7003CA0FF003CA0\n      FF003CA0FF003496EF005C86A300000000000000000000000000000000000000\n      0000000000000000000000000000000084000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000084000000FF000000FF000000FF00000000000000\n      0000000000000000000000000000000000009A6734FFE3D4C6FFFFFFFFFF5151\n      BAFF03039EFF0404A0FF0808A5FF3939F3FF3030ECFF0505A3FF02029EFF0101\n      9CFF5050B9FFFFFFFFFFE3D4C6FF9A6734FF595959003131310024395600297A\n      DE002F8BF100308CF1002A7FE300255290007C9CAF0045A7FA002B739D004BB0\n      FF002B739D0043A8FD003780B500000000000000000000000000000000000000\n      00000000000000000000000000000000FF000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000084000000FF00000084000000FF0000000000000000000000\n      000000000000000000000000000000000000BE9D7CFFC3A587FFFFFFFFFFFFFF\n      FFFFE3E3F4FFC3C3E7FF0404A0FF4343F9FF3939F3FF03039EFFC3C3E7FFE3E3\n      F4FFFFFFFFFFFFFFFFFFC3A587FFBE9D7CFF8F8F8F00404040003D4046002651\n      8C002668C8002C7EE0002D84E50049709B00AAC8D90026518C000C152A002651\n      8C000C152A0026518C00338FCB00000000000000000000000000000000000000\n      000000000000000084000000FF00000084000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000FF000000FF0000000000000000000000\n      000000000000000000000000000000000000EDE4DBFF9D6B3AFFF4EEE8FFFFFF\n      FFFFFFFFFFFFE4E4F5FF03039EFF4949FCFF4040F6FF02029DFFE3E3F4FFFFFF\n      FFFFFFFFFFFFF4EEE8FF9D6B3AFFEDE4DBFF0000000058585900575858007474\n      74006B6C74003B446700232E4D009EA0A200000000003C99CF00797979007979\n      790079797900797979003381AE00000000000000000000000000000000000000\n      00000000000000000000000084000000FF000000FF000000FF00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000084000000FF0000000000000000000000\n      000000000000000000000000000000000000FEFEFEFFB7936FFFB08961FFFDFB\n      FAFFFFFFFFFFFFFFFFFF5050B9FF000099FF000099FF5050B9FFFFFFFFFFFFFF\n      FFFFFDFBFAFFB08961FFB7936FFFFEFEFEFF00000000000000006E6E6E008C8C\n      8C008F8F8F00767676007C7C7C00000000005B5962003D3D3D003D3D3D003D3D\n      3D003D3D3D003D3D3D003D3D3D005B5962000000000000000000000000000000\n      00000000000000000000000000000000FF000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000FF000000FF0000000000000000000000\n      00000000000000000000000000000000000000000000FCFBFAFFA6794CFFB089\n      61FFF3EDE7FFFFFFFFFFFFFFFFFFF5F5FBFFF5F5FBFFFFFFFFFFFFFFFFFFF3ED\n      E7FFB08961FFA6794CFFFCFBFAFF000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000005B5962003D3D\n      3D003D3D3D003D3D3D0000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000084000000FF0000000000000000000000\n      0000000000000000000000000000000000000000000000000000FCFBFAFFB793\n      6FFF9C6B39FFC3A586FFE3D4C6FFF1EAE3FFF1EAE3FFE3D4C6FFC3A586FF9C6B\n      39FFB7936FFFFCFBFAFF00000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000797979005B59\n      62005B5962007979790000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000FEFE\n      FEFFEDE4DBFFBE9D7DFF9A6734FF996633FF996633FF9A6734FFBE9D7DFFEDE4\n      DBFFFEFEFEFF0000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000ABABAB007171\n      71007777770078787800787878007D7D7D00727272007D7D7D0082828200B1B1\n      B100000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000757575008A8A\n      8A009C9C9C00A4A4A400A9A9A900B5B5B50088888800868686008B8B8B008686\n      86007E7E7E008C8C8C0000000000000000000000000000000000B5959F00B394\n      9F00B3949F00B395A000B6A6B600000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000828282009797\n      9700ABABAB00B1B1B100BEBEBE00A1A1A100DDDDDD00B4B4B400A6A6A600A4A4\n      A400959595007C7C7C000000000000000000DEAE9D00CB4D2900E2563D00F264\n      5000F6695600D9624000D7563700BE523800907165008BAA9D007FB195006595\n      6A005D8D5D005B8A5B006A957900B2C8CC0000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000B0B0B0009898\n      9800B1B1B100BDBDBD00B0B0B000AEAEAE00FFFFFF00D1D1D100A7A7A700B1B1\n      B10098989800949494000000000000000000DFAB9800E4583C00FA6C5800FC7C\n      6400EC7B5900EBB58300E77E5900FB6A5700C85D360052B04A00499D42004DB4\n      4B004EBD4E003EB53E002AA72A004585470000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      0000000000000000000000000000ABABAB008A8A8A00A3A3A300000000000000\n      0000000000000000000000000000000000000000000000000000000000009A9A\n      9A00B2B2B200B9B9B900A6A6A600F0F0F000FFFFFF00EAEAEA00A1A1A100BABA\n      BA0095959500CBCBCB00000000000000000000000000CD6F6400F97B6500F587\n      6600E89D6E00FDD4A100E7946700FC7C6400D06A42005FB75700C6DFB6008BC4\n      830068C968005BC65B003EB63E0072B1840000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      00000000000093939300676767008E848400524D4D004A4A4A005D5D5D008989\n      8900000000000000000000000000000000000000000000000000000000000000\n      0000ACACAC0095959500BBBBBB00C9C9C900D0D0D000D5D5D500A5A5A5009A9A\n      9A00BEBEBE000000000000000000000000000000000000000000DB795E00B25D\n      5200916A7B00A67D8200D7825F00E07853009398500075C37200EAF0E200E1E9\n      D70076BF72006DCD6C005EB764000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000008181\n      8100757575008D8D8D00A5A5A500757070003F3C3C00494444005A5252004E4C\n      4C00565656007272720000000000000000000000000000000000000000000000\n      0000C8C8C80088888800B1B1B100ABABAB00ABABAB00A5A5A500A1A1A1000000\n      00000000000000000000000000000000000000000000A2ABB100382B27001618\n      45000E2A8E00132C8E003A2D67006F6B5A006BB9690073B9700090B1B50067A0\n      C100619B95004A965300000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000000000008989890089898900C9C9\n      C900A3A3A30080808000828282007D7C7C004E4E4E00717171007D7D7D00746E\n      6E007465650056515100525252007B7B7B000000000000000000000000000000\n      0000C0C0C000BCBCBC00C4C4C400C4C4C400C4C4C400C4C4C400C7C7C7000000\n      000000000000000000000000000000000000ABB0B4001B1B1C000C152A00163F\n      98001A4CB1001A4CB1001640A200424D6E00C2CBC2005499AE00288DE2002B90\n      ED00278CE1002B739D00ADBCC4000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000A6A6A600AEAEAE00989898008282\n      8200A4A4A400B9B9B900D1D1D1008E8E8E00797979006C6C6C00818181006262\n      620034343400B79898008A7777006B6B6B000000000000000000000000000000\n      0000AFAFAF00CBCBCB00CECECE00D0D0D000D0D0D000CECECE00CBCBCB000000\n      0000000000000000000000000000000000005A646B0020202000172F56002163\n      C8002469CF002469CF002162C70028457E00A3AFB5003A98E7003CA0FF003CA0\n      FF003CA0FF003496EF005C86A3000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000A0A0A0009C9C9C00B5B5B500C7C7\n      C700E1E1E100E6E6E600D0D0D000D8D8D800D1D1D100C3C3C3009A9999007D78\n      78004643430093818100847676007D7D7D00000000000000000000000000A0A0\n      A000CBCBCB00D3D3D300D4D4D400D4D4D400D4D4D400D4D4D400D0D0D000EFEF\n      EF0000000000000000000000000000000000595959003131310024395600297A\n      DE002F8BF100308CF1002A7FE300255290007C9CAF0045A7FA004AAFFF004BB0\n      FF0048ADFF0043A8FD003780B500000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000BABABA00D3D3D300DEDEDE00C7C7\n      C700E1E1E100DFDFDF00F2F2F200FCFCFC00ECECEC00DFDFDF00F7F7F700EEEA\n      EA00DECCCC008F8A8A008D89890000000000000000000000000000000000AAAA\n      AA00D5D5D500DADADA00DDDDDD00DDDDDD00DDDDDD00DDDDDD00D8D8D800F1F1\n      F100000000000000000000000000000000008F8F8F00404040003D4046002651\n      8C002668C8002C7EE0002D84E50049709B00AAC8D90052B5FB0052B7FB0054B9\n      FD0052B7FF004DB2FE00338FCB000000000000000000C0C0C000000000000000\n      0000C0C0C00000000000C0C0C00000000000000000000000000000000000C0C0\n      C000C0C0C000C0C0C00080808000000000000000000000000000BBBBBB007979\n      79006C6C6C00B8B8B800F2F2F200FCFCFC00ECECEC00DFDFDF00F7F7F700CACA\n      CA00C1C1C100CBCBCB000000000000000000000000000000000000000000AAAA\n      AA00D7D7D700DDDDDD00E0E0E000E0E0E000DDDDDD00DFDFDF00DADADA00F2F2\n      F200000000000000000000000000000000000000000058585900575858007474\n      74006B6C74003B446700232E4D009EA0A200000000003C99CF003A96CB00419E\n      D6003D9EE2003899DC003381AE000000000000000000C0C0C000000000000000\n      0000C0C0C00000000000C0C0C000000000000000000000000000000000000000\n      00000000000000000000C0C0C000000000000000000000000000000000000000\n      0000DBDBDB00C8C8C800D5D5D500E6E6E600CDCDCD00D4D4D400D4D4D4000000\n      000000000000000000000000000000000000000000000000000000000000A0A0\n      A000AFAFAF00C0C0C000C2C2C200BDBDBD00B5B5B500B4B4B400B8B8B800EDED\n      ED000000000000000000000000000000000000000000000000006E6E6E008C8C\n      8C008F8F8F00767676007C7C7C00000000000000000069A7C9005BA8D40083BF\n      E30090C4E2004997C1007EAAC1000000000000000000C0C0C000C0C0C000C0C0\n      C000C0C0C00000000000C0C0C000C0C0C000C0C0C00080808000000000008080\n      8000C0C0C000C0C0C00080808000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000B5B5\n      B5009E9E9E00C2C2C200D8D8D800DADADA00CACACA00BCBCBC00A2A2A2000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000099C4DB008FC1\n      DC0073B2D40095C1D900000000000000000000000000C0C0C000000000000000\n      0000C0C0C00000000000C0C0C00000000000000000000000000000000000C0C0\n      C000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000B7B7B700BFBFBF00E0E0E000E5E5E500DCDCDC00BABABA00E7E7E7000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000C0C0C000000000000000\n      0000C0C0C00000000000C0C0C000C0C0C000C0C0C000C0C0C000000000008080\n      8000C0C0C000C0C0C000C0C0C000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000C3C3C300C8C8C800E2E2E20000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000080000000800000008000000080000000800000008000000080000000\n      8000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000007A9D7A002A73\n      29002B7B2B002C7D2C002C7D2C0032803200277527003B7A3B00487B47007BA7\n      7B000000000000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000000000000\n      80000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF00000080000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000002A782A00299E\n      28003AB03A0044B744004ABB4A005AC45A0032933200338F33002A9E2900239A\n      2300288A28004B894B00000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00000000000000000000000000000080000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000800000000000000000000000000000000000000000000000\n      0000009C31000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000003984390034AC\n      34004EBC4E0055C0550065CB650043B34200B1D0A70074B46E0049B7490043B7\n      430031AB3100347E3200000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF000000000000000000000080000000FF000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000FF00000080000000000000000000000000000063310063CE\n      3100000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000075A9750036AC\n      360055C0550064CA640058BD570068B06600FAF9ED009BCA930049B8480055C0\n      550034AD34004D954D00000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000000080000000FF000000FF000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000FF000000FF000000800000000000000000000063310063FF\n      3100000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000000000000000000047A3\n      470058C0580060C7600056AE5400CADEC100F5F6E900C6D5C00048AF480061C8\n      61003BA43B00A1B8A100000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF000000000000008000FFFFFF00FFFFFF00C0C0\n      C0000000FF00C0C0C000C0C0C0000000FF00C0C0C000FFFFFF00C0C0C0000000\n      FF00FFFFFF000000FF000000FF000000800000000000000000000063310063FF\n      3100000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000066AD6500439B470065AD98007BAEBB0089B5C000A4C1AF004CB24C003CAB\n      3C007CBC7B0000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000000080000000FF000000FF00FFFF\n      FF000000FF00C0C0C000C0C0C0000000FF00FFFFFF000000FF00FFFFFF000000\n      FF00FFFFFF000000FF000000FF00000080000000000000000000006331009CFF\n      CE00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000098AEAE001F6C86002988D3001E82CF002183CE002F84B200629572000000\n      00000000000000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF0000000000000080000000FF000000FF00FFFF\n      FF000000FF00C0C0C000C0C0C0000000FF00FFFFFF000000FF00FFFFFF000000\n      FF00FFFFFF000000FF000000FF0000008000000000000000000000633100FFFF\n      FF0063CE31000000000000000000000000000000000000000000009C31000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000699EC5002B8FEB002F95F7002F95F7002F95F7002F95F70053A0DE000000\n      00000000000000000000000000000000000000000000FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF000000000000008000C0C0C000FFFFFF00C0C0\n      C0000000FF00C0C0C000C0C0C0000000FF00FFFFFF000000FF00FFFFFF000000\n      FF00FFFFFF00FFFFFF00C0C0C000000080000000000000000000000000000063\n      31009CFFCE0063CE31000000000000000000000000000000000063CE3100009C\n      3100000000000000000000000000000000000000000000000000000000000000\n      00003086CF00389DFE003BA0FF003EA3FF003EA3FF003BA0FF00429FF4000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000008000FFFFFF000000FF000000\n      FF000000FF00C0C0C000C0C0C0000000FF00FFFFFF000000FF00FFFFFF000000\n      FF00FFFFFF000000FF00FFFFFF00000080000000000000000000000000000063\n      3100FFFFFF009CFFCE0063FF3100009C3100009C310063CE310063CE310063CE\n      3100009C3100000000000000000000000000000000000000000000000000487D\n      A500399EF90043A8FF0044A9FF0044A9FF0044A9FF0044A9FF0043A6F8009FCD\n      EF00000000000000000000000000000000000000000000FFFF00000000000000\n      000000FFFF000000000000FFFF000000000000000000000000000000000000FF\n      FF0000FFFF0000FFFF00008080000000000000008000C0C0C000FFFFFF00FFFF\n      FF00C0C0C000FFFFFF00FFFFFF00C0C0C000C0C0C000FFFFFF00C0C0C0000000\n      FF00FFFFFF00FFFFFF00C0C0C000000080000000000000000000000000000000\n      000000633100FFFFFF00FFFFFF009CFFCE0063FF310063FF310063FF310063FF\n      310063CE3100009C310000000000000000000000000000000000000000003186\n      BE0045AAFF004CB1FF0050B5FF0050B5FF0050B5FF0050B5FF004EB1F900A1D0\n      F000000000000000000000000000000000000000000000FFFF00000000000000\n      000000FFFF000000000000FFFF00000000000000000000000000000000000000\n      0000000000000000000000FFFF0000000000000080000000FF000000FF000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000FF000000FF00000080000000000000000000000000000000\n      0000000000000063310000633100FFFFFF00FFFFFF00FFFFFF009CFFCE0063FF\n      310063FF31000000000000000000000000000000000000000000000000003287\n      BC004BAFF90051B6FF0055BAFF0058BCFB0056BAF40057BBF70051B4F800A3D2\n      F000000000000000000000000000000000000000000000FFFF0000FFFF0000FF\n      FF0000FFFF000000000000FFFF0000FFFF0000FFFF0000808000000000000080\n      800000FFFF0000FFFF00008080000000000000000000000080000000FF000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000FF0000008000000000000000000000000000000000000000\n      0000000000000000000000000000006331000063310000633100FFFFFF009CFF\n      CE00000000000000000000000000000000000000000000000000000000002B7E\n      AF002B8ACA003999E0003A9BE1003B98D7004194C0003490CB003493D100A2CE\n      E600000000000000000000000000000000000000000000FFFF00000000000000\n      000000FFFF000000000000FFFF000000000000000000000000000000000000FF\n      FF00000000000000000000000000000000000000000000000000000080000000\n      FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF000000FF000000800000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000633100FFFFFF000000\n      0000000000000000000000000000000000000000000000000000000000005794\n      BA002B7BAD0059A1CC0077B7DD0079B9DE0063AAD1004D9BC7002C80B1000000\n      0000000000000000000000000000000000000000000000FFFF00000000000000\n      000000FFFF000000000000FFFF0000FFFF0000FFFF0000FFFF00000000000080\n      800000FFFF0000FFFF0000FFFF00000000000000000000000000000000000000\n      80000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000\n      FF00000080000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000633100000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00005295C1004B9DCD0085C0E1008DC5E60080BCDE004F99C200A5C9DC000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000080000000800000008000000080000000800000008000000080000000\n      8000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000633100000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000062A4C60068A8CA008FC3DE0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000260000002600000026000000\n      2600000026000000260000002600000026000000000000000000000026000000\n      26000000260000002600000026000000260084848400FFFFFF00FFFF00008484\n      0000FFFFFF00FFFF000084840000FFFFFF00FFFF000084840000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000FF00000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000026002AECFC00000026000000\n      26002AECFC00000026002AECFC00000026005221000042211000000026002AEC\n      FC002AECFC002AECFC002A7EA8000000260084848400FFFF0000FFFFFF008484\n      0000FFFF0000FFFFFF0084840000FFFF0000FFFFFF0084840000000000000000\n      0000000000000000000000000000000000000000000000008400000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000848484000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000FFFFFF000000000000000000000026002AECFC00000026000000\n      26002AECFC00000026002AECFC00000026000000260000002600000026000000\n      260000002600000026002AECFC00000026008484840084840000848400008484\n      0000848400008484000084840000FFFFFF00FFFF000084840000000000008484\n      00000000000000000000000000000000000000000000000084000000FF000000\n      8400000000000000000000000000000000000000000000000000000000000000\n      0000000000000000FF000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF0000000000FFFFFF000000\n      0000FFFFFF00000000000000000000000000000026002AECFC002AECFC002AEC\n      FC002AECFC00000026002AECFC002AECFC002AECFC002A7EA800000026002A7E\n      A8002AECFC002AECFC002A7EA8000000260084848400FFFFFF00FFFF00008484\n      0000FFFFFF00FFFF000084840000000000000000000000000000000000008484\n      000000000000000000000000000000000000000000000000FF0000FFFF000000\n      FF00000084000000000000000000000000000000000000000000000000000000\n      00000000FF00000000000000000000000000000000000000000084848400FFFF\n      FF00840000008400000084000000840000008400000000000000FFFFFF00FFFF\n      FF0000000000000000000000000000000000000026002AECFC00000026000000\n      26002AECFC00000026002AECFC00000026000000260000002600000026002AEC\n      FC000000260000002600000026000000260084848400FFFF0000FFFFFF008484\n      0000FFFF0000FFFFFF0084840000000000008484000084840000000000008484\n      00000000000000000000000000000000000000000000000000000000FF000084\n      84000000FF000000000000000000000000000000000000000000000000000000\n      FF00000000000000000000000000000000000000000000000000848484008400\n      0000840000008400000084000000840000008400000000000000FFFFFF00FFFF\n      FF00FFFFFF00000000000000000000000000000026002AECFC00000026000000\n      26002AECFC00000026002AECFC002AECFC002AECFC002AECFC00000026002A7E\n      A8002AECFC002AECFC002AECFC00000026008484840084840000848400000000\n      000084840000FFFFFF008484000000000000FFFF000084840000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      FF000000FF0000008400000000000000000000000000000000000000FF000000\n      8400000000000000000000000000000000000000000000000000848484008400\n      0000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF0000000000000000000000\n      0000000000000000000000000000000000000000260000002600000026000000\n      2600000026000000260000002600000026000000260000002600000026000000\n      26000000260000002600000026000000260084848400FFFFFF00FFFF00008484\n      000000000000000000000000000000000000FFFFFF0084840000000000008484\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000FF000000FF000000840000000000000000000000FF00000084000000\n      0000000000000000000000000000000000000000000000000000848484008400\n      0000840000008400000084000000840000008400000084000000840000008400\n      00000000000000000000000000000000000000000000A55A1000A56310009C5A\n      1000AD631800B56B2100B56B29007B9C9C00846B4200735A3100635A39006363\n      5A0073A5C6006B7B8C00523129000000000084848400FFFF0000FFFFFF008484\n      0000000000008484000084840000848400000000000000000000000000008484\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000FF00000084000000FF0000008400000000000000\n      000000000000000000000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF000000000000000000000000000000000000000000A55A1000A55A1000A55A\n      1000A5632100BD6B3100CE7B3900B58C520063A594004A847B004A7B84006B52\n      39004A6B7B005A73940052526B00000000000000000084848400FFFF0000FFFF\n      FF0000000000FFFF0000FFFFFF00848400000000000084840000000000008484\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000FF000000FF000000840000000000000000000000\n      000000000000000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF000000000000000000000000000000000000000000A5632100A5521000A54A\n      1000AD5A1800BD6B3100D67B4200A59C73009C845200638473004A848C004273\n      840063737B005A7BA5004A526B00000000000000000000000000848484008484\n      000084840000FFFFFF00FFFFFF00848400000000000084840000848484000000\n      0000848484008484000000000000000000000000000000000000000000000000\n      0000000000000000FF000000FF00000084000000FF0000008400000000000000\n      000000000000000000000000000000000000000000000000000084848400FFFF\n      FF0084000000840000008400000084000000FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000084735200736342008463\n      4200AD521800BD632900BD734200BD6B31008473520063635A004A6B6300426B\n      7B004A7394005A7394005A5A7300000000000000000000000000000000008484\n      8400848484008484840084848400848484008484840000000000000000008484\n      840084840000FFFF000084840000000000000000000000000000000000000000\n      00000000FF000000FF000000840000000000000000000000FF00000084000000\n      000000000000000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000636B5A006384\n      8400B5734200DECECE00DECEB500B5734200945221005A6B63004A6363004263\n      63004A637B005263840000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000008484840084840000000000000000\n      000084848400FFFFFF00000000000000000000000000000000000000FF000000\n      FF000000FF0000008400000000000000000000000000000000000000FF000000\n      840000000000000000000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000848C94007B6B\n      5200D6CECE00F7F7FF00FFFFF700EFDECE00C6947300BD8C630094A5A5004263\n      6300425A5A0073738C0000000000000000000000000000000000000000000000\n      00000000000000000000000000008484840084840000FFFF0000848400000000\n      000000000000848484000000000000000000000000000000FF0000FFFF000000\n      FF00000084000000000000000000000000000000000000000000000000000000\n      FF0000008400000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000000000008484\n      840084949C00DEEFFF00F7EFF700F7FFFF00FFFFFF00F7F7F7007B9CAD004A6B\n      7300636363000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000084848400FFFFFF00000000000000\n      00000000000000000000000000000000000000000000848484000000FF000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000FF0000000000000000000000000000000000848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400848484000000000000000000000000000000000000000000000000000000\n      0000000000009C9CA500E7DEDE00FFFFFF00FFF7EF00C6C6BD00637373000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000084848400000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000C2A5A200B9928B00C2958E00C2958E00C2958E00C2958E00C295\n      8E00C2958E00C2958E00B2939200000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000C9A9A300D0AFA900E0B2A800E0B2A800E0B2A800E0B2A800E0B2\n      A800E0B2A800E0B2A800C4958E000000000000000000000000009BD7EB0080CC\n      E60080CCE60098949A00E4D1C900F8E4DA00F8E4DA00F8E4DA00F8E4DA00F8E4\n      DA00F8E4DA00FCDCC700B29392000000000000000000AC6A6600BC5B5A00BC5B\n      5A009F6B6C00B8B8B800D4D3D300E2E1E100DBDADA00D2D1D100BC9C9C00993C\n      3C00A0434400B65A5A00C9A7A700000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000CDABA300E4D4C700F6EFE700F6EFE700F6EFE700F6EFE700F6EF\n      E700F6EFE700F6EFE700D8B29B0000000000000000009BD7EB004EC6E8006CDD\n      F80070E2FA009DA1A200E9D9CE00FBDFC200FED7B000FED4A800FED3A500FED3\n      A500FBDCBB00FBE3C900B79996000000000000000000C36F6B00CB666600CB66\n      66009E656300B17F7800CB959400E8DEDD00F6F6F600ECEBEB00C9A7A7009934\n      3400A43F3F00C5616100BB8788000000000000000000000000006D6DED001B1B\n      C9001B1BC9003838E6007676EE00B2B2F6000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000CFB0AA00EAD8CB00F9EADA00FBE7D300FBE4CD00FBE3C900FBE3\n      C900FBDFBF00F7E9D900D8B29B00000000000000000080CCE60083E8FD0070D2\n      FD0070D2FD00A0A1A900E6DBD300F7E7D500F8E3CD00F8E3CD00F8E3CD00F8E3\n      CD00F7E7D500FBE3C900B79996000000000000000000C36F6B00CB666600CB66\n      6600A96C6B00BF737100BB676500C7B6B300EEEEED00F8F8F700D0AEAE009934\n      3400A43F3F00C5616100BB8788000000000000000000000000006161EB008383\n      EF006565EB004343E7001E1EDE001919BD001A1AC0002828E4006565EB00A4A4\n      F4000000000000000000000000000000000000000000C2A5A200C2979000C297\n      9000C2979000BC918800E7DBD400F9DFC400FBD7B300FBD7B300FBD7B300FBD7\n      B300FDD7B200F7E7D500D9B39C00000000000000000080CCE60089EDFE007BDD\n      FE007BDDFE00A8ABAC00EEE1D600FBE5CE00FEDCBA00FEDCBA00FED7B000FED7\n      B000FBDFC200FBE3C900BA9C99000000000000000000C36F6B00CB666600CB66\n      6600AF757500B36D6900A5575000A6979400C3C3C300E7E7E700D9B8B8009934\n      3400A43F3F00C5616100BB8788000000000000000000000000004848E8009494\n      F2008686F0008686F0008686F0008686F0007C7CEE005A5AEA002C2CE4001B1B\n      CD001919BB009393F100000000000000000000000000C2A5A200F8E6DD00F8E6\n      DD00F8E6DD00D6B0A100EDDFD500F9E4CC00FBDFBF00FBDFBF00FBDFBF00FBDF\n      BF00F5DBB800F5E8D700DCB79E00000000000000000080CCE60091F5FE0081E5\n      FE0081E5FE00B2B3AB00EEE1DA00F7E7D500F8E3CD00F8E3CD00F8E3CD00F8E3\n      CD00F7E7D500FBE3C900BA9C99000000000000000000C36F6B00CB666600CB66\n      6600AF757500D0ABA800CCA5A000C4B9B700BAB6B500CCC9C800CDA8A6009934\n      3400A43F3F00C5616100BB8788000000000000000000000000002727E3009A9A\n      F2008D8DF1008D8DF1008D8DF1008D8DF1008D8DF1008D8DF1008D8DF1008D8D\n      F1003838E6005353E900000000000000000000000000C5A7A200F6EDE200F8E9\n      D800F9E9D700DAB49E00EFE3DB00F9DFC400FBD7B300FBD7B300FBD7B300FBD7\n      B300FBD7B300F7E7D500DDB8A000000000000000000080CCE600A0F6FE0085EA\n      FE0086EBFE00B7B7AC00F2EAE100FCE1C700FED7B000FED7B000FED7B000FED7\n      B000FBDFC200FBE3C900C2A5A2000000000000000000C36F6B00CB666600CB66\n      6600C56C6900BB787000BB787000C56C6900BF676600BF676600BD6E6900C05C\n      5C00B9575400CB666600BB8788000000000000000000000000003131E500B1B1\n      F5009696F2009696F2009696F2009696F2009696F2009696F2009696F2009696\n      F2005E5EEA003535E500000000000000000000000000CDABA300F8E5D100FED1\n      A500FED1A300E3B28E00F2E9E000FAE8D600FBE3C900FBE3C900FBE3C900FBE3\n      C900FBE3C900F7EBDD00E0BBA300000000000000000080CCE600A2F8FE008BF0\n      FE008CF1FE00C0BFAE00F6EEE600FEF2E700FEEBD900FEE9D400FEE6CE00FEE4\n      CB00FDE3C800FDDAC100C2A5A2000000000000000000C36F6B00B5605B00C185\n      8100C8888700C8888700CB888800CB888800CB888800CB888800CB888800CB88\n      8800B96E6C00CB666600BB8788000000000000000000000000002727E300B1B1\n      F5009F9FF3009F9FF3009F9FF3009F9FF3009F9FF3009F9FF3009F9FF3009F9F\n      F3007878EE001D1DDB00000000000000000000000000CEADA700F7EDE300F8E9\n      D800F8E9D800E5BDA200F4ECE400FDE6CF00FEDCBB00FDDBB900FEDAB500FED9\n      B400FED8B200F8E7D500E0BBA300000000000000000080CCE600B1FAFE0096FA\n      FE0093F8FE00CACAB300FAF2EA00FEFEFE00FFFEFE00FEFBF800FEF8F200FEF4\n      E800DEB9AC00E29C9700CDABA3000000000000000000C36F6B00BE7F7A00F3F3\n      F200F3F3F300F6F3F200F3F3F300F3F3F300F3F3F300F3F3F300F3F3F300F3F3\n      F300CD9A9900C5616100BB8788000000000000000000000000004848E800A4A4\n      F400A4A4F400A4A4F400A4A4F400A4A4F400A4A4F400A4A4F400A4A4F400A4A4\n      F4009494F2001A1AC600000000000000000000000000D1B3AD00FAE7D400FED1\n      A500FED1A500EAB99400F8F0E900FFFEFE00FEFEFE00FEFAF900FEF8EF00FEF4\n      EA00FEEFDF00F7D4C900E2A39800000000000000000080CCE600BCFDFE0099FD\n      FE0099FDFE00CECFB500FEF4EB00FFFEFE00FFFFFE00FFFEFD00FDFBF900FEF8\n      F000C48F7700D5A17E00E1C5BE000000000000000000C36F6B00BE7F7A00F3F3\n      F200F3F3F300F3F3F300F3F3F300F3F3F300F3F3F300F3F3F300F3F3F300F3F3\n      F300CD9A9900C5616100BB8788000000000000000000000000005E5EEA00AFAF\n      F500C6C6F800C1C1F700BBBBF700BBBBF700BBBBF700BBBBF700BBBBF700BBBB\n      F700ABABF5001B1BCB00000000000000000000000000DCBBAB00FAF4EF00FEEF\n      E000FEECD900EEC7A800FAF2EA00FDFEFE00FEFEFE00FEFEFD00FEFBF900FEF9\n      F100E5D0C800C48F7700BE8D7F00000000000000000080CCE600C2FCFE00A8FB\n      FE00A4FBFE00D7D1B600F2DDCD00F2E1D600F0DFD500F0DED400EFDDD200EEDA\n      CC00C3948300E4CEBD00000000000000000000000000C36F6B00BE7E7A00F4F2\n      F200D6D5D500D2D1D100D3D2D200D3D3D300D4D4D400D5D5D500D7D7D700EBEB\n      EB00CD9A9900C5616100BB8788000000000000000000D9D9FB008F8FF1006161\n      EB006D6DED006F6FED009191F100D9D9FB00D1D1F900D2D2FA00D1D1F900D2D2\n      FA00BBBBF7001E1EE200B4B4F6000000000000000000E3C1AD00FBEDDE00FED1\n      A500FED1A500F2C39800FDF4EA00FDFEFC00FAFBFA00FAF8F800F6F6F600F5F3\n      F100DECCC800D8A5820000000000000000000000000080CCE600D2FCFE00BBFC\n      FE00BBFCFE00C9EEE600CAE0D700CAE0D700CAE0D700CAE0D700CAE0D700CAE0\n      D70082B2C800C4E3EC00000000000000000000000000C36F6B00BD7F7B00F3F3\n      F300D6D5D500D1D1D100D1D1D100D3D2D200D3D3D300D3D3D300D7D7D700EBEB\n      EB00CD9A9900C5616100BB8788000000000000000000D9D9FB00B1B1F500A4A4\n      F400A4A4F400A4A4F4008686F0006C6CEC009898F200BABAF600DDDDFB00EDED\n      FD00CFCFF9003C3CE6009F9FF3000000000000000000E9C7B000FCFCFD00FFFE\n      FE00FEFCF800F6DFC900E7C2A800E7C0A600E2B69A00DAA88B00D7A99000E7C5\n      AF00DEBCAB000000000000000000000000000000000080CCE600E1FDFE00BFF0\n      F6009FC2CA009FC2CA009DC4D1009DC4D1009EC3CD009EC3CD00A9D1DA00CCF8\n      FD0061BEE500ABDDEE00000000000000000000000000C36F6B00BE7E7A00F3F2\n      F200E3E3E300E1E1E100E1E1E100E2E2E200E3E2E200E3E2E200E4E4E400EFEF\n      EF00CD9A9900C5616100BB878800000000000000000000000000A1A1F300A4A4\n      F400A4A4F400A4A4F400B2B2F6009191F1009494F2009494F2008686F0007171\n      ED005151E9006161EB00000000000000000000000000ECCBB300FEFDFD00FFFF\n      FE00FEFEFE00FEFCFA00FEF8F100FEF5EA00C89C8E00BF8E8000CDABA3000000\n      0000000000000000000000000000000000000000000080CCE600EAFDFE00BBC6\n      C700C9BEB800C9BEB800C9BEB800C9BEB800C9BEB800C9BEB800829DA500B5E9\n      F60061BEE500ABDDEE00000000000000000000000000C36F6B00BE7E7A00F3F2\n      F200E3E3E300E1E1E100E1E1E100E2E2E200E3E2E200E3E2E200E4E4E400EFEF\n      EF00CD9A9900C5616100BB878800000000000000000000000000A8A8F4009B9B\n      F300A4A4F400B6B6F6007F7FEF00E4E4FC0000000000CDCDF900AAAAF400ABAB\n      F500B4B4F60000000000000000000000000000000000F3D3B600FEFEFE00FEFE\n      FE00FDFEFD00FCFCFC00FCFAF700FCF7F000C9957A00E3B58F00000000000000\n      00000000000000000000000000000000000000000000000000005DC7E6007CCA\n      E10095A2A400DCD3CE00ECE8E600ECE8E600E4DDDA00A5AAAB0060A3B4005EBF\n      E0007AC9E50000000000000000000000000000000000B8696500B6767300E3E3\n      E300E3E2E200E3E3E300E3E3E300E3E3E300E3E3E300E3E3E300E3E3E300E3E2\n      E200C4919000B65A5A00C9A7A700000000000000000000000000000000000000\n      000000000000D9D9FB0000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000F3D3B600E7C4AE00E7C4\n      AE00E6C4AD00E5C2AC00E5C2AC00E5C1A900C497880000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000B5C7CD00AA968D00AE9C9300AE9C9300AC9A9100B0B0B200000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000E8E7E500B5B5B500B0B0B000C0C1C200DCDDDD00F0F0F000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000086BED40049869B005A7E\n      89008D8F9100B1B2B100D6D1D100000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000C6866400D2A0870000000000000000000000000000000000D7AA9100C98B\n      660000000000000000000000000000000000000000000000000000000000CDDC\n      E4005CAECA0065BFE4004EB3D900459CBB004D88A10061808B00A19F9E00D7D7\n      D700000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000000000006AC3E20075DCFD005BCA\n      F40043BCE70035A1C7003587A0004C7C8E000000000000000000000000000000\n      000000000000000000000000000000000000000000000000000000000000BB6B\n      3300A9450400A9450400C89172000000000000000000CE9D8000A9450400AC48\n      0300BC682D0000000000000000000000000000000000000000000000000042AF\n      D30046B8DC0087E1FE0072D9FD006FD7FD006FD7FD0067D3F80048ADD500487E\n      9100989A9900EEECEB0000000000000000000000000000000000848484000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000052B9DD0087E1FE0078DE\n      FD0078DEFD0078DEFD000000000000000000FFCC3300FFFF9900FFFF9900FFFF\n      9900FFFF9900000000000000000000000000000000000000000000000000B659\n      16000000000000000000B2551500E7CDBD00E5D0C800AF582000000000000000\n      0000B3540E0000000000000000000000000000000000000000000000000039B1\n      DE0052BBE00086EDFE007CE1FE007EE3FE0063CAF40060CAF1007EE3FE0077E0\n      FC002F8FB000A9AAAA000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000031ADD9008DE6FE0080E6\n      FE0080E6FE0080E6FE0000000000FFFF9900FFFF9900FF663300FF663300FF66\n      3300FFCC3300FFFF99000000000000000000000000000000000000000000B85E\n      1B000000000000000000AF4B0200E4C3AA00E3C4AF00AE4C0600000000000000\n      0000BE62190000000000000000000000000000000000000000000000000041B3\n      E70059C0E40092F1FF0088EFFF0086EDFF0051B1D00058B3D60086EDFF0086ED\n      FF003AB8E3009FA0A1000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF0000000000000000000000000000000000000000003CB1D900A8F2FE0088EF\n      FF0088EFFF0088EFFF0000000000FF663300FF66330088EFFF0088EFFF0059CB\n      EF0000000000FFCC3300FFFF9900FF663300000000000000000000000000C786\n      5B00B5581500C2733B00BB570100D5A58800DBB59D00B8540200BE6F3B00BE61\n      1400C480540000000000000000000000000000000000000000000000000051BE\n      E60066C8EB00A9FAFE0090F6FF0093F8FF0075B2C8004B9EBE0090F6FF0090F6\n      FF003DBAE300A0A0A00000000000000000000000000000000000848484008400\n      0000840000008400000084000000840000008400000084000000840000008400\n      0000000000000000000000000000000000000000000031ADD900A7F8FE0093F8\n      FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF006ED8\n      F8006785900000000000FFFF9900FF6633000000000000000000000000000000\n      0000BB6E3C00B04C0500AC490500BB744C00BA7D6000AC490500AC490500B76C\n      3D000000000000000000000000000000000000000000000000000000000057C1\n      E80071CFEF00B3FCFE0099FDFF0099FDFF007FCFDC0077AAC60099FDFF0099FD\n      FF0041BDE3009FA0A10000000000000000000000000000000000848484008400\n      0000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF008400\n      000000000000000000000000000000000000000000004CBAE300A2EDF60099FD\n      FF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0088E8\n      FE004E7F910000000000FFFF9900FF6633000000000000000000000000000000\n      00000000000000000000BB8D7B008E69540097756200BB886E00000000000000\n      00000000000000000000000000000000000000000000000000000000000060C7\n      EB006CCDEF00ABE4F200BCECF600D5F8FD00C1FAFF00B0F4FE00B9FCFE00B3FD\n      FF0048C0DE009FA0A10000000000000000000000000000000000848484008400\n      0000840000008400000084000000840000008400000084000000840000008400\n      0000000000000000000000000000000000000000000065C1E200B0E8F400C0FC\n      FE00B9FCFE00B3FDFF00B3FDFF00B3FDFF00B3FDFF00B3FDFF00B3FDFF00A1F3\n      FF004A859B0000000000FFFF9900FF6633000000000000000000000000000000\n      00000000000000000000B8AEA700B6A49B00A99E9700A5958C00000000000000\n      0000000000000000000000000000000000000000000000000000000000004FBE\n      E30042A8C7001386AE0047B1E00045B9EE005AC1E6007FCDE800C1EAF600DCFC\n      FE0051BDDF00A0A0A0000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF0000000000000000000000000000000000DBEFF8008CE0F3005ED4ED006CCF\n      ED0074CDE80093D9EE00D6FBFD00CBFCFE00CDFBFE00CBFCFE00CDFBFE00B3F1\n      FE0000000000FFCC3300FFFF9900FF6633000000000000000000000000000000\n      00000000000000000000A4938A00AD9D940097837800A38D8500000000000000\n      000000000000000000000000000000000000000000000000000000000000B8E5\n      F20053C7E60020AAD80077DFFB006CD6FB005AC7F8002C91B800118EB70052B0\n      D3005EC0DF00C0C0C0000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF0000000000000000000000000000000000DBEFF800AFEDF60099FDFF0099FD\n      FF0099FDFF0080ECF60072CBE50000000000BBEAF500DDF6FB00ECFDFE00CAF3\n      FD0000000000FFFF9900FF663300000000000000000000000000000000000000\n      000000000000AFA09800BCB5B200AD9F9400B8AAA200B6AAA600AF9F95000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000B9E3F0003CB7E50052C2E1006EDCF60078DEFD0047B5E00024ACDA002FAA\n      D50056A8C400F4F2F1000000000000000000000000000000000084848400FFFF\n      FF0084000000840000008400000084000000FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF000000000000000000000000000000000000000000A5DDEF0099FDFF0099FD\n      FF0099FDFF00AFF1F90099D9E900000000000000000089D8ED0074D4EA000000\n      0000FFCC3300FFFF9900FF663300000000000000000000000000000000000000\n      000000000000C1B5B100B2A7A1000000000000000000AD9C9200BAACA7000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000C4E8F30053C6F100607E8900D9E3E700AFDEEE0062C5E20040BAE70064A6\n      BD0000000000000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF000000000000000000000000000000000000000000ADDDEF00A0DBED00A6E3\n      F200B5ECF60098C3D500F0F0F00000000000FFCC33000000000000000000FFCC\n      3300FFFF9900FF66330000000000000000000000000000000000000000000000\n      0000D0C9C500C2B4AB00C0B3AC000000000000000000CBC0B700B8AAA300C6C0\n      BD00000000000000000000000000000000000000000000000000000000000000\n      00000000000066D2EF00458FAE00A7A7A70000000000A0D3E70056CAEF00A5A3\n      A30000000000000000000000000000000000000000000000000084848400FFFF\n      FF008400000084000000840000008400000084000000FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000000000000000\n      0000DBEFF800000000000000000000000000FFCC3300FFCC3300FFFF9900FFFF\n      9900FF6633000000000000000000000000000000000000000000000000000000\n      0000A4928700A08D810000000000000000000000000000000000A8988F009A85\n      7900000000000000000000000000000000000000000000000000000000000000\n      000000000000A0DBF1007DE7F3004480980071858A0060BFD70065CEE600C7C7\n      C70000000000000000000000000000000000000000000000000084848400FFFF\n      FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000FFCC3300FFFFCC00FFFFCC000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000089726400000000000000000000000000000000000000000000000000846F\n      6200000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000096DAF2007EE9F9007DDEF00082E8F5008EC3D7000000\n      0000000000000000000000000000000000000000000000000000848484008484\n      8400848484008484840084848400848484008484840084848400848484008484\n      8400848484000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000FFCC3300FFFFCC00FFFFCC000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000B2A59E00000000000000000000000000000000000000000000000000C0B3\n      AC00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000E4F4F900BFE5F200CEE8F000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000FF663300FF663300FF663300FF66\n      3300FF663300FF66330000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000A2ACB000A6A7\n      A500C4C4C6000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000EFEFEF00A0837E009871\n      7000987170009971700098717000987170009871700098717000987170009871\n      700098717000987170009C6A6200E1D4D7000000000000000000000000000000\n      000000000000000000000000000000000000E5DED600997C7000E3DAD7000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000DBDBDD0070718200323564001E2150001E1F4C002525390050505000AEAD\n      AD000000000000000000000000000000000000000000B9E3F00076C8E40040A6\n      CC00408CA7003E7E940066848F0098989800BCBCBC0000000000000000000000\n      000000000000000000000000000000000000DDF7FE0015B1DC0003ACD80003AC\n      D80003ACD80006ABD60004B0DB0004B7E00004B0DB0004B0DB0003ACD80006AB\n      D60003ACD80002B5DF00416A7300996159000000000000000000000000000000\n      0000000000000000000000000000C4B7B200BF9871009F6B5100DDD5CD000000\n      0000000000000000000000000000000000000000000000000000000000008589\n      AB000B0F750000008E0000008E0000008E000102840001028400020668000A0C\n      370057585800E3E4E300000000000000000000000000B8E3F00093D4ED0080E0\n      FE0075DCFD0075DCFD005DCDF20042B9DF004099B900407F97005E7C87008992\n      9400C0C0C000000000000000000000000000A3EAFA0000BAE40000D0F40000D0\n      F40000D0F40000D0F4000BB5D100373746005EACC70001D7F50000D0F40000D0\n      F40001D7F50000C1E9001E9CB600B48F8A000000000000000000000000000000\n      00000000000000000000CCC4BD00A3725800EDC69B009E705400C8BCB7000000\n      00000000000000000000000000000000000000000000000000007173AF000000\n      8E0000008E0000008E0000008E000000960000008E0000008E0000008E000102\n      84000001430048464800E9E9E9000000000000000000AAD7E7005AC6ED00B3F1\n      FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE006FDBF80048C1\n      E7004F748100000000000000000000000000F1FEFE0007C1E60009D6F20001D8\n      FA0001D8FA0001D8FA0007788800250C0C004E38410002E5FC0001D8FA0001D8\n      FA000FE7F90001D8FA004D686800F2EAEB00000000000000000000000000E0D7\n      D400A0887C00987B65009C6F5000C2A18600EEC49C00AF836700704432007D58\n      4800C4B8AD00000000000000000000000000000000009191C900000096000000\n      8E002324AE0001009E000100A6000100A6000100A600000096001E1EA6000000\n      8E0000008E0003044600707170000000000000000000AADCEE0053C6EF00AAE7\n      F40088EFFF0088EFFF0088EFFF0088EFFF0086EDFF007AE1FE0088EFFF007BE3\n      FE0047A8C000A1A2A2000000000000000000000000006EDDF30000D0F40002E5\n      FC0001D8FA0001D8FA0004D8F20008797F0008B4C70001DEFB0001D8FA0001DE\n      FB000EEAFC0006C4E700AC837A00000000000000000000000000CCBCB100B994\n      7E00CCAA8F00D3B49900E3C19F00EDCCAD00FDD9B200DFBDA000D7AE8B00B68A\n      6B00703F2E0097776B00F5F1F00000000000E8EAEF000D0DA6000100A6004B4B\n      AD00FFFEFA006264D2000201AE000201AE000201AE00595BC100FFFFFE005355\n      BF0000008E0000008E00191B3400D5D5D60000000000A2DAEE006ACCF60091D4\n      F0009CFAFF0093F8FF0093F8FF0093F8FF008DEBFA00D6CFB80096E4F10081E7\n      FE0086E3F20057768200000000000000000000000000E2FCFF0008C8EB000AE4\n      F80001DEFB0001D8FA0001DEFB001C99B20002E5FC0001D8FA0001DEFB001FF4\n      FD0001DEFB0043707800F2E7E8000000000000000000D3C9BB00C6AC9800E0C1\n      A500F7D7B800F0CCAA00B5775A00E1946400DB976C00D99D6F00F5D5B700E4C1\n      9F00CBA78A007D523D00917D7200000000008083CA000201AE000201AE006F6D\n      9900F0EEE900FFFFFF006364D2000201AE006363C900FAFAF200FAF9F2007879\n      AF000100A60000008E0001015C009495940000000000A5DCF10073D4F6005BC3\n      E800CFFCFE00A6FDFF009FFDFF0099F7FF00DCD8B900FED8A900EAD7AD0085E1\n      F900CDFBFE004993B000AFB2B0000000000000000000000000006DE3F30000D0\n      F40009EEFD0001DEFB0003EBFD002A485D0004D8F20002E5FC0007E1FB000EEA\n      FC0009C5E100AC857D000000000000000000F1E7DF00C7B19B00E5CBB400FDE4\n      C900FEE6C900FEE9C900C39E7F008E2E05008B462800FEE8CA00FDDDBD00FDDA\n      BA00E9C7A900D4B19100793E2A00CEC6BF003E3FD4000201AE000404C5000404\n      C50061609600F0EEE800FEFFFF00A3A3E600FFFEFB00FAF9F2006E6EAA000303\n      BD000201AE0001009E0001038C006767670000000000ABDCED0087E1FE006FD8\n      FB0077CFF10096D8F100AAE0F000C9E9EC00F9E3B700FEE4AC00FEE7B300D8D6\n      BB00E2FDFF0096D5EA00687D8400000000000000000000000000E5FEFE000FCF\n      EE0002E5FC0002E5FC0009F4FE005631380013B2C70002E5FC0015FAFE0002E5\n      FC0041757F00EFE5E5000000000000000000D8C9BC00DBC6B700FEE8D100FEE6\n      C900FEE7CD00FEE7CD00CCAA8C00912B0300A85A3C00FEF1D300FDE3C500FDE0\n      C100FDE3C500E5C6AA00AD867200937469001A1BBA000404C5000505CD000505\n      CD000505CD007673AB00FEFCF900FFFFFE00FFFFFE008080C2000404C5000404\n      C5000303BD000201AE000100A6005F5F6700000000009BD5EB008FE8FE0086ED\n      FF0086EDFE0080E6FE00ADBAB500CAC4B200B2DAE600E9E4D500FDF7DA00FEF1\n      CB00FBECDA00EFFDFD00478AA000C8C8C70000000000000000000000000063E1\n      F7000AE4F80009F4FE000ACFE200491F1E002A8C960004F2FE0019F1FD0008D1\n      E900AB7B7200000000000000000000000000CCBCAD00F5E2D000FEEBD900FEEB\n      D900FEE9D500FEE9D500CCAD900087270500B05E4000FEF2D700FEE6C900FEE6\n      C900FEE6C900FBDDC000DEC2A9008B6864001214CF000C0CD2001010DD000808\n      D7000505CD005F5FCD00FDFCF800FFFFFF00FFFEFC006465D9000505CD000505\n      CD000505CD000202B5000201AE0067666A0000000000B1DEEF009FFDFF0096FA\n      FF0093F8FF00A6CDCA00F3CDA600FCD3A800F0CEA600CAC0B000BDC6B800AFD2\n      D200B1CED900B1CEDA0076BBD50000000000000000000000000000000000E2FC\n      FE0010D7F3000FF7FE0010939E0037030600323B4C0015FAFE0004F2FE004475\n      7800EFE1DF00000000000000000000000000D4C6BF00F7EADF00FEEDDD00FEEB\n      D900FEEDDD00FEEDDD00CCAF9900912B0300A65B4200FEF3E000FEE8D100FEE7\n      CD00FEE7CD00FEE8D100E0CFB9008B6864003233DE001515DF001919ED000A09\n      EE005F5FD500FAF9F000FAF9F200BEBED300F8F6F300FEFFFF006465DA000504\n      D4000808CF000807C8000909B2008787870000000000A0D6EC00B1FDFF0099FD\n      FF00ACDCDD00F1CCA900FDDDB900FCD3A800FCD3A800FCD4AC00FCD4AC00FDE1\n      C200FDE6D100DEB79500C3C2C200000000000000000000000000000000000000\n      000063E8FC000FE7F9000D7E7F002905070032232C0015FAFE0009E5EF009C77\n      700000000000000000000000000000000000D7C9C000F8EEE400FEF3E500FEF3\n      E500FEF3E500F1DED400A0624A00912B03009C574500FEF6EA00FEEBD900FEEB\n      D900FEEBD900FBECD600EBD7BD00937770006468E6001F1FF6002727FA005B5F\n      CE00FAF8EC00F8F5EE007577BF000504DC006B6A9D00F1EEE900FEFEFE006869\n      EB000C0CE2000C0CD2001013A100CBCBCB0000000000000000009BDAED00B5EB\n      F100ECCBB000FEF0E100FEEFDD00FCD7B000FCD4AC00FCD6AF00FDD5A600FDDD\n      BA00FBE7D400CEBEB40000000000000000000000000000000000000000000000\n      0000E0FCFE0009DEF70010E1F100076C700012B4BD0009F4FE003A868300E7DB\n      DA0000000000000000000000000000000000E3DAD500F4EDE800FEFBF400FEF6\n      EA00FEF6EA00EAE0D400BA9D9200BD999200CCA79B00FDF5EA00FEEDDD00FEED\n      DD00FEF2E500FAEEE200D9C4B300CEC6C000B7B8F1002727FA003636FD007F7F\n      BE00F1EAE1006E6EB5000504EC000504EC000504E4005C5E9800DFDAD1007576\n      BC001919ED001414D8004951A00000000000000000000000000000000000C4E8\n      F300E8DBD000FDF3E800FEF7EC00FDF2E700FCD6AF00FBD7B400FEDBB100FBED\n      DD00CCBEB2000000000000000000000000000000000000000000000000000000\n      00000000000061EAF60009F4FE000FF7FE001BFDFF0009E5EF0099716E000000\n      000000000000000000000000000000000000F3EFEB00E5E3E100FCFBFA00FDFA\n      F700FEF9F100FEFAF400F2E4E100E3B69800F3DFD200FEF7EC00FEF6EA00FEF7\n      EC00FEFCF700FAEDE000CAB6A30000000000000000005658F7004848FD005556\n      FB005F61BC003535F8001D1DF600100FF0001413F2002322F6004E51B8003030\n      FD002727FA001D1DD400D9D8D700000000000000000000000000000000000000\n      000000000000F9E4D100FEFCF900FFFDF800FEF2E300FDD9AE00FEF3E400DDC9\n      B800EFF0F0000000000000000000000000000000000000000000000000000000\n      000000000000CEFEFE000AE4F80031FEFF000FF7FE0038878700E7D4D4000000\n      00000000000000000000000000000000000000000000F1EAE500EEECEB00FEFD\n      FC00FFFDF900FFFEFC009E787100963D190094594100FEFDFB00FEFCF600FEFD\n      FC00F8F3EF00E9D5C800F2F1F1000000000000000000E5E5FD004545FD006465\n      FA008386FC008A8EFB007A7DFA005F60FD005F60FD005C5DFA005556FB003C3B\n      FD002325EB00B6B7DE0000000000000000000000000000000000000000000000\n      00000000000000000000FEEBDA00FEF9F500FDDA9E00FEFAF400E7D5C700E6E6\n      E600000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000053F8FE0009F4FE0009E5EF00B9A2A000000000000000\n      0000000000000000000000000000000000000000000000000000F2EEEB00F1F1\n      F100FBFCFC00FFFFFF00E2D2D100845E5D00D7C4BD00FEFFFE00FEFCFB00FCFA\n      F600E8E2DA000000000000000000000000000000000000000000DEDFFE005E66\n      F3005D5EFB009195FA00989DFA00989DFA008386FC006465FA004848FD004141\n      FB00CCCCEC000000000000000000000000000000000000000000000000000000\n      00000000000000000000FEF8F100FBDCB800F3C58C00F5DBBF00E9E4DE000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000077FDFE00CEFDFD0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000F3EFED00EDEEEC00F6F6F600F7F7F700F6F6F400F4F1EE00F5F0EC00EDE9\n      E700000000000000000000000000000000000000000000000000000000000000\n      0000B5B7FD007B7EF8007476FC006567FC006465FA00737BF300A6A7FD000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000C7BFB800B2876500A26D3C009F633400955D3F0088614A008B888600C9C8\n      C8000000000000000000000000000000000000000000BDBAB700989592008E84\n      85009E9C9B00E3E3E30000000000000000000000000000000000F2F2F200BBBA\n      B9009C939400878787009D9B9B00E3E2E2000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000E3DFD900CD8B\n      5C00C8652900C0644800B8675200CA624600C5655500CC685700B3593700764C\n      3E0095939100ECECED000000000000000000C8BEBE00D6CACA00CBB9B800C0A7\n      A700A4868300A2A2A20000000000000000000000000000000000C9BCBC00D7CB\n      CB00CBB9B800C0A7A700A4868300A2A2A2000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000E2E3E200B4B5B400B3B4B300B3B4\n      B300B3B4B300B3B4B300B3B4B300B1B2B100A3A4A400A1A1A100A1A1A100A1A1\n      A1009FA0A000A1A09F009FA5A500DCDCDC0000000000EBE1D800D57E2F00B051\n      1F00AB4B16009B431A007F562B009E3C1200A4481400B6511F00BC5B4200CA62\n      46008D4D2B008D868300EFF0EF0000000000DCD0CF00E2D3D200DBC6C300C090\n      8D00BE959300D0D0D00000000000F2F4F300E8E9E90000000000D8D1D000E4D4\n      D300D9C4C400C0908D00BE959300D0D0D000000000000000000086BED4004986\n      9B005A7E89008D8F9100B1B2B100D6D1D1000000000000000000000000000000\n      000000000000000000000000000000000000AA5D3C0099492200994922009949\n      2200994922009949220099492200994922009949220099492200994922009949\n      22009949220099492200994922009896950000000000DF964B009B3804009A3C\n      06009E3D0500A1430600306A1100794E0600A33F04009A3C06009D3F0C00AE4E\n      1C00BC5B4200864F3200AAAAAA000000000000000000D8A07800E8A05100CD7D\n      700086606200ABACAC00A8A9A900638D9E00446F85007E7F7F00A8A9A900D89D\n      7200E8A05100CA806E0086606200C2C3C20000000000000000006AC3E20075DC\n      FD005BCAF40043BCE70035A1C7003587A0004C7C8E0080898C00A8A8A800CCCC\n      CB0000000000000000000000000000000000DAB59F00FFFFFF00FFFFFF00FEFF\n      FF00FEFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF\n      FF00FFFFFF00FFFFFF00E6C8BE0099959100F0CCA500A3460900AA460400AF48\n      0300B9500200BE5401001F6F0A001F6F0A008C570200AF480300A64505009A3C\n      06008F583800A264400076605500E4E3E300E9E6E600F8B96200FEC05200FEC2\n      5400E5A466004F4F4F007E77710042A6C60045A9C600787373004C4C4C00F8B9\n      6200FEC05200FEC05200E5A46600A0A0A000000000000000000052B9DD0087E1\n      FE0078DEFD0078DEFD0078DEFD0078DEFD006FD8FB0056C8EE0043A9CD003C8F\n      AB0049798A00C1C2C1000000000000000000DBB09800FEFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FCFFFF00FCFFFF00E7C8B70099959100DA934700AA460400B9500200C359\n      0100CA6301008C7102000D7D04000D7D0400576D0200C65E0100B9500200AF48\n      0300695A2A00756441008B523400BABABA00E8D7D700FBC87300FED47C00FED4\n      7C00E9AF6D009C939300CCCCCB0079BAD1005C9BAF009F9F9F00CDBCBC00FBC8\n      7300FED47C00FFD97E00E9AF6D00A0A0A000000000000000000031ADD9008DE6\n      FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6FE0080E6\n      FE003FB7DE009D9E9E000000000000000000DBB09800FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FCFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00E9C8B70099959100C9722800BE540100CA630100D26E\n      0100DC74020078820600098F0500537F0900C3750600D7710100736E02005A5C\n      04001F6F0A005C6129008B532800999A9A00D8C9C900FBD48500FFEAA900FFEA\n      A900E9BA8100A3A4A300FFFFFF00CCCCCB00928C8400A9A9A900D8C9C900FBD4\n      8500FFEAA900FFEAA900E9BA8100A3A4A30000000000000000003CB1D900A8F2\n      FE0088EFFF0088EFFF0088EFFF0088EFFF0088EFFF0088EFFF0088EFFF0088EF\n      FF0059CBEF00879193000000000000000000E5B39900FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00EBCCB70099959100C2631100CE680100D7710100BF82\n      09006D9307006C950B0081930900E38E0200EE840200DB7909000D7D04000F74\n      04000F740400306A110081542B00968C7E00E7E1E100DDCCCC00D6C5BD00D7C0\n      B000D3AD9100D5D5D500FBFBFB00C1C1C10072727200B3B4B300D9D1D100DDCA\n      CA00D3C9C400D7C0B000D5B09300D2D3D300000000000000000031ADD900A7F8\n      FE0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8FF0093F8\n      FF006ED8F800678590000000000000000000E5B39900FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00EACBB6009E999500C7681000D77101009C8708000D9F\n      130051A4210065A41E00EEA62200FB9F1300F7930700F28901007E8506000F74\n      04002A740300416517005F630A009F9486000000000000000000000000000000\n      0000F4F1F100F2F3F200B7ADAD00A59393009E848600927E7D008B838500EBED\n      ED000000000000000000F4F1F1000000000000000000000000004CBAE300A2ED\n      F60099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FDFF0099FD\n      FF0088E8FE004E7F91000000000000000000E7BA9700FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00EDD1B7009E999500DE883000E17702003CA7230021B6\n      3A0025BB44002AC14F00A6C15800FEC25400FDB03200F7930700C58802001D8F\n      07000D7D04000F74040062680F00AFADAC000000000000000000000000000000\n      000000000000E6DEDD00D5D0D100EAEAE800CDBABA00B2929200AA918F00EBE9\n      E90000000000000000000000000000000000000000000000000065C1E200B0E8\n      F400C0FCFE00B9FCFE00B3FDFF00B3FDFF00B3FDFF00B3FDFF00B3FDFF00B3FD\n      FF00A1F3FF004A859B000000000000000000E7BA9700FDFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FDFFFF00EDD1B7009E999500E9AF6800BF8209002AB53C002EC7\n      590033CD640051D4740051D47400DBDC8500FEC55A00FBA41F00D08E0300328C\n      05000D7D04000F7404007E702100DADADB000000000000000000000000000000\n      00000000000000000000D7C6C500D5A79600CB908500B6747200A39E9D000000\n      00000000000000000000000000000000000000000000DBEFF8008CE0F3005ED4\n      ED006CCFED0074CDE80093D9EE00D6FBFD00CBFCFE00CDFBFE00CBFCFE00CDFB\n      FE00B3F1FE005A93A600D4D4D50000000000EAC09500FDFFFF00FDFFFF00FBFF\n      FF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFFFF00FBFF\n      FF00FBFFFF00FDFFFF00EDD1B7009E999500FEEFC9004CAB2F002AC14F0042D0\n      6C009CDF8D00CAE7A400A4E8A700FEF2C200DAD27900F0AF2F00E38E0200AE83\n      04000D7D04002A740300B6A07400000000000000000000000000000000000000\n      00000000000000000000DDC8B900FDAD2C00F3B15400E39A630087756E00EBEC\n      EC000000000000000000000000000000000000000000DBEFF800AFEDF60099FD\n      FF0099FDFF0099FDFF0080ECF60072CBE5009CDBEE00BBEAF500DDF6FB00ECFD\n      FE00CAF3FD0061A5C000C9C9C80000000000EAC19500FFFFFF00FDFFFF00FCFF\n      FF00FDFFFF00FDFFFF00FDFFFF00FDFFFF00FDFFFF00FDFFFF00FDFFFF00FEFF\n      FF00FBFEFD00FDFFFF00ECD1B8009E99950000000000A4DF97002AC14F005DD3\n      750096E29700D1F3C100C0F3BC00D2E9AB003FCB640069B23E00B7971200EA7F\n      02005E7F030093892B00E4E4E400000000000000000000000000000000000000\n      00000000000000000000E4C1A200FEC55A00FFCE6A00FEC55A00A2817000E7E7\n      E700000000000000000000000000000000000000000000000000A5DDEF0099FD\n      FF0099FDFF0099FDFF00AFF1F90099D9E90093DFF20094DBF20089D8ED0074D4\n      EA0062B9D8007ABAD2000000000000000000CA7F3C00BF8A5E00BA885F00BF8A\n      6000BA885F00BF8A5E00BA885F00BA885F00BA885F00BA885F00BF8A5E00BF8A\n      5E00C38B5D00BA8A6200CD7F3B009F9F9F000000000000000000CDD27E0066CF\n      6F00A5DD9000D3E8A200C8E6A30093DE880033CD64002AB53C00E38E0200E37B\n      0600E8912300E7D9CC0000000000000000000000000000000000000000000000\n      00000000000000000000E4B98E00FED98600FEE3A000FFDE8800A2817000E7E7\n      E700000000000000000000000000000000000000000000000000ADDDEF00A0DB\n      ED00A6E3F200B5ECF60098C3D500F0F0F00000000000D0EBF600AFDEEE00B0DF\n      F000BEE0EC00000000000000000000000000D1721000DA891E00E0821A00E082\n      1A00E0821A00E0821A00E0821A00E0821A00E0821A00E0821A00E78C2600E794\n      3500F09B3A009F7C6D00BD763100B9B9B900000000000000000000000000DAEA\n      B700A5D47F008BDB880078DD89005ACE6D002EC7590021B63A00D6991800F1B2\n      5B00EEE7E0000000000000000000000000000000000000000000000000000000\n      000000000000E9EAEA00DBB4A600E5CEAB00E8D8B000FAE1A000AF8E7D00EDED\n      ED00000000000000000000000000000000000000000000000000000000000000\n      000000000000DBEFF80000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000F4D2AB00ECC08F00ECBE8800ECBE\n      8800ECBE8800ECBE8800ECBE8800ECC08F00ECBE8800ECBE8800ECBE8800ECBE\n      8800ECBE8800EEBD8400F2CC9F00000000000000000000000000000000000000\n      0000FEFBEF00ECEDC700DADFA200E3CD7D00D6CF8000DCD99E00FAEAD6000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000EFEFEF00E9E0E000E0CCCC00DFD7D6000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000BFAEAF00AA89\n      8B0097787E00977276008E686E009B7B8000C5B3B40000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000C5C5C400AAABAB00AAABAB00BABBBB00D4D5D400000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000DBDCDB00B2B1B1008F8F8E00828382008283820094939300BBBBBB00E4E4\n      E4000000000000000000000000000000000000000000BCA8AA00D6CFCF00DBD5\n      D500DAD0D000D1BBBA00C19E9F00C69E9E009A757B00A7878C00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000D4B4AB00DDAE8E00DEC5B300DBC2B300DBBFB500DBBEBD00E6D8DA000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000D3D1C200EBDFBA00FEF2CD00EBD9B600D3C8B200B1AFA00093908D00A5A5\n      A400000000000000000000000000000000000000000000000000F3F1F100C3BE\n      B900CABEBA00E5DBD700F0E7E100F0E7E100F0E6E100E3D3CA009A8F8A007A77\n      7500C2C2C200000000000000000000000000D2BCBC00E5E5E500E8E9E900E3E3\n      E300DAD9D900CEB6B500B0A3A300A4828500CCA3A300A1767900D8D0D2000000\n      000000000000000000000000000000000000000000000000000000000000E0BB\n      A600E8B79000EBC49C00F3E5D600F1E3CD00EDDCC600C39C8D00B4877F00BA8E\n      8600CCAC9F00D5B8B000DFD3D00000000000000000000000000000000000F5F2\n      DA00FEE9C900FDE1BB00FEE2B100FDDCB500FDE1BB00FEE6B900FEF3CE00D3CE\n      B5008B878200C6C7C500000000000000000000000000F1F2F100C9C2BF00EDE2\n      DF00F1F1F000E1DCD800D0B4A100D8B59F00E1C8B700E7E4E300F0EFED00DFD0\n      CA00776E7000BABBBA000000000000000000DBCCCC00F2F1F100F8F7F800EBED\n      EC00DBDADA00D1B0AC00B28D8C00B4848200CCA3A300B0878900B6A7A900BA9D\n      9C00987B7F00A2848800D5D0D100000000000000000000000000E3C0A900F3C5\n      9900EBC19800EBC49C00F5E8DA00EFE3D600F0E0CD00B6928B009D706A00B287\n      8000E2CFA800DFC6A400CAA8920000000000000000000000000000000000FBDB\n      AF00FEEFC300FEE3B500FDD5A600FDDFBE007FC8690092D0860092D18E00F3F6\n      D700FAF2D5008E8C8600E4E5E4000000000000000000D4CECB00F3EDEA00EAEC\n      EB00D59C7D00BF633500C5724D00DAB49E00C3653900C26C3F00D2AF9B00F1F1\n      F100E5DDD600716C6D00CECECE0000000000F1E5E400E4DDDD00D8B5B300E1D2\n      D200DAC9C900D0A4A200B8767500B8767500CEA4A100BB959500D4AEAC00D7B5\n      B500ABA6A600AC989A008D717400A3888D0000000000E1C5B000F6D5AB00F3D1\n      A300F5C99B00F0CB9F00F5EDE500F5EADF00F2E3D200B6938900986B6600A27E\n      7600EAD7B400E6D5AE00D5BC9D00000000000000000000000000F3E5D700F1B5\n      6F00FAD8A300FEECCA00FEDBB100FEE5C2000798060007980600079806002AAA\n      2A00F4F9D800C6C1AE00C7C7C70000000000E9E9E900F0E1DA00F3F0EE00C882\n      5B00C6633000CD683400BA9A8600FBFCFD00D5916C00C7663300C5602E00D69A\n      7D00F3F3F300CABFB60085858500EFF0EF00FFFFFF00E9D8D800DEA37500EAB6\n      7E00D3A09600C17A7600C76C6700C5666100D8C7C700D8C4C000D4B2B200CEA3\n      A3009E7C7F00AC939500A2B29D008D6C710000000000E7C7A300F9D6AC00F5D2\n      A400F4CEA000F1D2A900F8F1E900F7ECE200F2E6DA00B5938B00986B6600AA79\n      7000EDD9B700E8D6B100D5BC9D00000000000000000000000000F5D7B600F2BD\n      8600F2BD8600F2BD8600F8D19F00FDE6C100079806000D9F1300E5F1DC009BD4\n      87008DCA7700D7B79100B1B2B20000000000F3E9E100F7F5F400D4A79200CB64\n      3100CD683400CD683400CD6F4000D28A6700CD683400CD683400CD683400C061\n      3000DCC4B300F4EEEA0089838000D3D3D300FFFFFF00E7D1D100E89D4B00FDAA\n      2600FDB03200F3B56A00DE9B7800BF757300CFABA700CEA8A800D4ADAD00D3B3\n      B300AD8A8A00A37B7B009E7C7F008E676C0000000000E2CAA900FBE0B100DCC9\n      AD00B4AFB000D5C1AB00FBF7F300F7F1EA00F5EBE000C7ACA500AC857E00B385\n      7E00EDDCC600ECD9B900DCC0A600000000000000000000000000F3D2A400F9CA\n      8E00F9CA8E00F9CA8E00F9CA8E00ECEACA0092CB7B0078C76D00A5DAA500FEF7\n      E600A6E19F00F5D1A6009E9E9D0000000000F3E5DC00F6F1EF00CD6F4000CD68\n      3400CD683400CD683400CB876B00F3E1D200CE754800CD683400CD683400CD68\n      3400CB825A00F6F7F800B8A7A000B5B5B600FFFFFF00D8C0BF00EEA83E00FEB6\n      3E00FEBC4B00FEBC4B00FEB94400FABA5400E59F6600D58F8400DABABA00D5B0\n      B000B4888600BE8D8C00B48482008A646A0000000000E9C9A600D7C9AF0076B1\n      DD003C99F8005F9EE400E9F4F800F9F6F300F6F0E800F1E7E000E8D8CD00E2CB\n      BF00F0E2CC00EDDCC600DCC0A6000000000000000000F8F5F200FCD3A400FCD3\n      A400FDD39F00FCD3A400FBD0A100A8CE8B00E3E4B600D8EFBF002CAC310038B5\n      3E00B4DD9600FED8A9009897960000000000F6EBE500EEDBCC00CD683400CD68\n      3400CD683400CD683400C3826500FAFAFA00DBA38400CB643100CD683400CD68\n      3400C16A3A00F2ECEB00DCCEC300A8A8A800FFFFFF00CCA8A800FEBC4B00FEC5\n      5A00FEC55A00FEC96200FEC55A00FEC05200FEBC4B00E0925500DDBDBA00D3AE\n      AD00B07C7C00BE8D8C00BE8D8C00926B700000000000B4BABB0061C6FE0057BB\n      FE0047AAFE003B9EFE0064A9F300DBE9F800FCF7F300F7F1EA00F5EBE000F2E7\n      DB00F2E3D200EDDDCF00D3B5AD000000000000000000F9EBDD00FEDDAF00FEDD\n      AF00FEDDAF00FEDDAF00FEDDAF00E3DEB00030AC2D00ACDE980049B446000798\n      0600A1D38600FEDDAF009F9A950000000000F7EDE800EBD3BF00CD6E3B00CD68\n      3400CD683400CD683400CD683400CEAD9900FBFAFA00DB9C7800CD683400CD68\n      3400CD683400F7EDE800E0D3CC00A9AAA900F1EFED00D1B2A100FEC96200FFCE\n      6A00FECE7200FECE7200FFCE6A00FFCE6A00FEC96200D3987800DABABA00D5B0\n      B000B57F7E00AD787800A67E7F0094626700ABD5F00065B6F40061C6FE0061C6\n      FE0058B9FD004BABFE003A9BFC006FB7FA00F6F7F900F9F5F200F6F0E800F5EB\n      E000F2E6DA00D0BCBE00AF9CAA000000000000000000FBEBDA00FEEFC300FEED\n      C900FEEDC900FEEDC900FEEDC900FEEDC900AED88C000D9F1300079806000798\n      0600A1D38600FEEDC900A8A3990000000000F5EAE400F5E5D600D8734900CD6E\n      3B00CD683400CA612F00CD683400CD683400DEC5BB00FBF8F500CE724300CD68\n      3400CE744300FBF6F300DCCEC300B8B9B900E6DEDD00E0BDA000FECE7200FED4\n      8400FEDF9100FFE49300FEDF9100FED48400FECE7200D39B8400D8BBBB00CFA8\n      A800B67A7900C3949200B988870094626700000000005BB6FE0059B5FD0060C3\n      FD0061C6FE005FBDFD004BABFE003FA2FE0073BBFD00E3EFF800F9F5F100F6F0\n      EA00B4B8C800928FB200000000000000000000000000F7EBD400FFFCDD00FFFC\n      DD00FFFCDD00FFFCDD00FFFCDD00FFFCDD00FFFCDD00ECF4D000CAE9B500EFF6\n      DD00C5E5AD00FFFCDD00B2AC9E0000000000F4E7E000FEFDFC00F0976F00DA82\n      4A00D08E6D00E8D7CA00D3825500CB643100D9A08400FEFEFE00D08A6100DD7B\n      3E00D89E7B00FEFDFE00C1B1AD00D9D9D900DDD7D700E1C28C00FFDE8800FFE4\n      9300FFE8A200FFEAA900FFE8A200FFE49300FED48400CC9A9100DABABA00D6A3\n      A100BD727000B96D6A00B1777800995E620000000000000000004DAFFE0051B4\n      FE0061C6FE0061C6FE005CBAFD004FAFFE0043A6FE0073BBFD00F4F8FA00C3D6\n      E3007B91BD0000000000000000000000000000000000FEEFCE00FFFCDD00FFFC\n      DD00FFFCDD00FFFCDD00FFFCDD00FEF6CD00FEE8BB00FBE1B200FEE8BB00FFF8\n      D200FFFCDD00FFFCDD00BAB8A800DADADA00F7EDE700FDF9F600F5E2CF00F893\n      6800E4896A00F1EEED00F6EEE700E4BCA400F9F1EE00F4ECEA00E5865800E086\n      5600F3E8DD00F6F0EC00B5B1AC0000000000DBD4D200D7B58D00FFE49300FFEA\n      A900FEEEB700FEF2C300FEEEB700FFEAA900FEDF9100CAA8A700EBDFDD00F5ED\n      ED00E8D5D600E0B3AF00D5837F00A16E6F000000000000000000000000005DB6\n      FD004FB4FE005EC3FE0062C7FD0062C7FD004FB4FE0043A6FE005EA8F900588C\n      EA000000000000000000000000000000000000000000FDF2E300FEEBCB00FEEE\n      CF00FEEBCB00F3DDBD00F4C18900F1B56F00F1B56F00F1B97A00F1B97A00F2BD\n      8600F8D19F00FEF3D400C2C1B100CECFCE0000000000F4E7DF00FFFFFF00FBE3\n      C800F0BD8700E6BC9400EDDCD200E9E2E200EFDED500EDAF8500F69E6A00FDD6\n      C100FEFDFC00D5CAC600DAD9DA0000000000CDC8CA00C0BDBC00BEADA700C0A9\n      9F00CAB9A700DDD0B500F3E1BD00FFECB100F0CC8E00D7AEA800DCC7C400D8C0\n      BB00D8C2BD00DBCAC800E4D2D100000000000000000000000000000000000000\n      000053B0FD004FB4FE0060BEFD0062C7FD005EC3FE004FB4FE003E91EF005784\n      EE00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000FCF0E800F8DBBD00F4C08700F2BD8600F2BD\n      8600F7C68800F8C99800D4C3AB00CECECD0000000000F9F4F100F8ECE400FFFF\n      FF00FEFBEF00FEEFCA00FDE3B400F8D49B00F8D49B00F8D5AF00FCF2E900FFFE\n      FE00E6DAD500CFCFCF000000000000000000000000000000000000000000DED9\n      D900D7CCCB00CAADAD00C3ABAA00CBA19F00C79B9100BD9C9D00000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000072C1FC007AC3FB0099D8FD00000000009DA6DB000715B3004A6B\n      ED00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000FBE3CA00F7C9\n      9400FACB8900F9CA9300DFC4A80000000000000000000000000000000000F3E6\n      DE00FBF6F300FFFFFF00FFFFFF00FEFFFE00FFFFFF00FFFFFE00F8F2EF00E4D9\n      D300DDD9D9000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000E7DBDB00E1CECD0000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      00000000000000000000000000000000000000000000C5C9E4006360AC00979E\n      DB00000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000FCEDDE00F9EBD90000000000000000000000000000000000000000000000\n      0000F5EDEB00F5E8DE00F4EAE500F7EDE700F5E8E100F5E8E100EDE7E400F2F2\n      F20000000000000000000000000000000000424D3E000000000000003E000000\n      2800000040000000B00000000100010000000000800500000000000000000000\n      000000000000000000000000FFFFFF00FFFF000000000000C1FF000000000000\n      000000000000000000000000000000008000000000000000C001000000000000\n      8003000000000000000100000000000000010000000000000001000000000000\n      00010000000000008081000000000000C181000000000000FFC3000000000000\n      FFFF000000000000FFFF000000000000FFFFFFFFFE7FFFFFE79FC003FC3FFFFF\n      C107C003FC3FFC3FC003C003FC3FF81F8003C003FC3FF00F8003C003FC3FE007\n      800FC003F81FC003820FC003F00F8001C307C003F00F8001C183C003F00F0000\n      E083C003F00F0000F001C003E0070000F801C003F00F0000FC03C007F80F8001\n      FE37C00FF81FC183FFFFFFFFF81FFFFF80038003E007FFFF00010001C003C1FF\n      000000008001000000000000000000000000000000008000000000000000C000\n      00000000000080818000800000000001C001C00100000001FE3FFC1F00000001\n      FE3FF80F00000001F80FFE3F00008081FC1FFE3F0000C100FE3FFE3F8001FFC3\n      FF7FFE3FC003FFC3FFFFFFFFE007FFFFC00FFFFF0000FFFFC003C1FF0000FFFF\n      C00300000000FFFFC00300000000FE3FE00380000000F80FF007C0010000E003\n      F01F800300008000F01F000100000000F01F000100000000E00F000100000001\n      E00F00010000C003E00F80810000F01FE00FC1810000FFFFE01FFFC30000FFFF\n      F01FFFFF0000FFFFFC7FFFFF0000FFFF0000F00FFFFFC00F0000E007F1FFC003\n      0000C003E3FFC00300008001C7FFC00300000000C7FFE00300000000C7BFF007\n      00000000C79FF01F00000000C38FF01F00000000E007F01F00000000E003E00F\n      00000000F001E00F00000000F803E00F00008001FE07E00F0000C003FF8FE01F\n      0000E007FF9FF01F0000F00FFFBFFC7F003FFFFFFFFF00C0001FFFFDFFF90000\n      000F8FFFC0010000000787FBC0030000000783F3C00700000007C3E7C0030000\n      0007E1C7C00300000007F08FC00780010007FC1FC00780018003FC3FC0078001\n      C001F81FC0078001E020F08FC007C003FF11C1C7C007C003FE0B83E3C007E007\n      FF1F87FBC007F81FFFBFFFFFFFFFFFFFFFFFF801FFFFFFFFF801C0018001FFFF\n      F80180018001C0FFF80180018001C00F800180018001C003800180018001C003\n      800180018001C003800180018001C003800180018001C003800180018001C003\n      80018003800180018003800380018001800780038001C003801F80038001C087\n      803FC0078001FBFF807FF03FFFFFFFFFF03FFFFF81FFF3CFE00FFFFF8007E187\n      E003C0078003EC37E003C0078001EC37E003C0078000E007E003C0078000F00F\n      E003C0078000FC3FE003C0078000FC3FE003C0070000FC3FE003C0070001F81F\n      F003C0078001F99FF00FC0078003F18FF88FC007F607F3CFF80FC007FE0FF7EF\n      FC1FC007FE17F7EFFE3FFFFFFE03FFFFC7FF8000FF1FF00F807F0000FE1FE003\n      80070000FC1FC00180070000E007800180038001C00100008003800180010000\n      8001C003000000008001C003000000008000E007000000008001E00700000000\n      8001F00F00000000C003F00F00000001E007F81F00018001F807F81F80018003\n      FC0FFC3FC007C007FC1FFE7FF00FF01FF00F83C0FFFFFFFFC00303C0FFFF0000\n      80010240C0FF000080018000C00F000000000000C003000000000000C0030000\n      00000000C003000000000000C00300000000F00DC00300000000F80FC0030000\n      0000FC1F800100000001FC0F800100008001FC0FC0030000C003FC0FC0870000\n      E007F80FFBFF0001F01FFE1FFFFFFFFFC07FFFFFF83FF00F803FF01FF00FC007\n      001FE001E00380030001C001E001800100008001C001000000008001C0010000\n      00008001C0010000000080018001000000008001800100000000000180010000\n      00008003800100000000C007800000010000E00F800080010001F00FFE008003\n      E03FF88FFFC1E007FE7FFF8FFFF3F00F00000000000000000000000000000000\n      000000000000}\n  end\n  object menu: TPopupMenu\n    Images = images\n    OnPopup = menuPopup\n    Left = 40\n    object SelfTest1: TMenuItem\n      Caption = 'Self Test'\n      ImageIndex = 34\n      OnClick = SelfTest1Click\n    end\n    object Showbandwidthgraph1: TMenuItem\n      Caption = 'Show bandwidth graph'\n      OnClick = Showbandwidthgraph1Click\n    end\n    object Otheroptions1: TMenuItem\n      Caption = 'Other options'\n      object switchMode: TMenuItem\n        Caption = 'Switch to expert mode'\n        ShortCut = 116\n        OnClick = modeBtnClick\n      end\n      object Accounts1: TMenuItem\n        Caption = 'User accounts...'\n        ImageIndex = 29\n        ShortCut = 118\n        OnClick = Accounts1Click\n      end\n      object Shellcontextmenu1: TMenuItem\n        Caption = 'Integrate in shell context menu'\n        ImageIndex = 22\n        OnClick = Shellcontextmenu1Click\n      end\n      object AutocopyURLonadditionChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto-copy URL on addition'\n        Checked = True\n      end\n      object alwaysontopChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Always on top'\n        OnClick = alwaysontopChkClick\n      end\n      object sendHFSidentifierChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Send HFS identifier'\n        Checked = True\n      end\n      object persistentconnectionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Persistent connections'\n        Checked = True\n        OnClick = persistentconnectionsChkClick\n      end\n      object DMbrowserTplChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Specific HTML for download managers'\n        Checked = True\n      end\n      object Graphrefreshrate1: TMenuItem\n        Caption = 'Graph refresh rate...'\n        OnClick = Graphrefreshrate1Click\n      end\n      object MIMEtypes1: TMenuItem\n        Caption = 'MIME types...'\n        ImageIndex = 7\n        OnClick = MIMEtypes1Click\n      end\n      object Opendirectlyinbrowser1: TMenuItem\n        Caption = 'Open directly in browser...'\n        OnClick = Opendirectlyinbrowser1Click\n      end\n      object freeLoginChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Accept any login for unprotected resources'\n      end\n      object usecommentasrealmChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Use comment as realm'\n        Checked = True\n      end\n      object Loginrealm1: TMenuItem\n        Caption = 'Login realm...'\n        OnClick = Loginrealm1Click\n      end\n      object HintsfornewcomersChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Hints for newcomers'\n        Checked = True\n      end\n      object compressedbrowsingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Compressed browsing'\n        Checked = True\n      end\n      object modalOptionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Modal dialog for options'\n        Checked = True\n      end\n      object useISOdateChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Use ISO date format'\n        OnClick = useISOdateChkClick\n      end\n      object browseUsingLocalhostChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Browse using localhost'\n        Checked = True\n      end\n      object enableNoDefaultChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enable ~nodefault'\n      end\n      object preventStandbyChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Prevent system standby on network activity'\n      end\n      object Addicons1: TMenuItem\n        Caption = 'Add icons...'\n        OnClick = Addicons1Click\n      end\n      object Changeport1: TMenuItem\n        Caption = 'Change port...'\n        OnClick = Changeport1Click\n      end\n      object autoCommentChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Input comment on file addition'\n      end\n      object Defaultsorting1: TMenuItem\n        Caption = 'Default sorting'\n        object Name1: TMenuItem\n          Caption = 'Name'\n          Checked = True\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Name1Click\n        end\n        object Extension1: TMenuItem\n          Caption = 'Extension'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Extension1Click\n        end\n        object Size1: TMenuItem\n          Caption = 'Size'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Size1Click\n        end\n        object Time1: TMenuItem\n          Caption = 'Time'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Time1Click\n        end\n        object Hits1: TMenuItem\n          Caption = 'Hits'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Hits1Click\n        end\n      end\n      object Editeventscripts1: TMenuItem\n        Caption = 'Edit event scripts...'\n        ShortCut = 32885\n        OnClick = Editeventscripts1Click\n      end\n      object oemTarChk: TMenuItem\n        AutoCheck = True\n        Caption = 'OEM file names for TAR archives'\n      end\n    end\n    object HTMLtemplate1: TMenuItem\n      Caption = 'HTML template'\n      object Edit1: TMenuItem\n        Caption = 'Edit...'\n        ShortCut = 117\n        OnClick = Edit1Click\n      end\n      object Changefile1: TMenuItem\n        Caption = 'Change file...'\n        OnClick = Changefile1Click\n      end\n      object Changeeditor1: TMenuItem\n        Caption = 'Change editor...'\n        OnClick = Changeeditor1Click\n      end\n      object Restoredefault1: TMenuItem\n        Caption = 'Restore default'\n        OnClick = Restoredefault1Click\n      end\n      object enableMacrosChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enable macros'\n        Checked = True\n        OnClick = enableMacrosChkClick\n      end\n    end\n    object Upload2: TMenuItem\n      Caption = 'Upload'\n      object Howto1: TMenuItem\n        Caption = 'How to?'\n        OnClick = Howto1Click\n      end\n      object N22: TMenuItem\n        Caption = '-'\n      end\n      object deletePartialUploadsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Delete partial uploads'\n      end\n      object Renamepartialuploads1: TMenuItem\n        Caption = 'Rename partial uploads...'\n        OnClick = Renamepartialuploads1Click\n      end\n      object numberFilesOnUploadChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Number files on upload instead of overwriting'\n        Checked = True\n      end\n    end\n    object StartExit1: TMenuItem\n      Caption = 'Start/Exit'\n      object autocopyURLonstartChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto-copy URL on start'\n      end\n      object startminimizedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Start minimized'\n      end\n      object reloadonstartupChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Reload on startup VFS file previously open'\n        Checked = True\n      end\n      object saveTotalsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Save totals'\n        Checked = True\n      end\n      object autosaveVFSchk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto-save VFS on exit'\n      end\n      object Autoclose1: TMenuItem\n        Caption = 'Auto-close'\n        object Nodownloadtimeout1: TMenuItem\n          Caption = 'No download timeout...'\n          OnClick = Nodownloadtimeout1Click\n        end\n      end\n      object only1instanceChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Only 1 instance'\n        Checked = True\n      end\n      object confirmexitChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Confirm exit'\n      end\n      object findExtOnStartupChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Find external address on startup'\n        OnClick = findExtOnStartupChkClick\n      end\n      object RunHFSwhenWindowsstarts1: TMenuItem\n        Caption = 'Run HFS when Windows starts'\n        OnClick = RunHFSwhenWindowsstarts1Click\n      end\n      object trayInsteadOfQuitChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Minimize to tray clicking the close button [ X ]'\n      end\n      object quitWithoutAskingToSaveChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Force quitting (no dialogs)'\n      end\n    end\n    object VirtualFileSystem1: TMenuItem\n      Caption = 'Virtual File System'\n      object foldersbeforeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Folders before'\n        Checked = True\n        OnClick = foldersbeforeChkClick\n      end\n      object linksBeforeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Links before'\n        Checked = True\n      end\n      object usesystemiconsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Use system icons'\n        Checked = True\n      end\n      object loadSingleCommentsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Load single comment files'\n        Checked = True\n      end\n      object supportDescriptionChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Support DESCRIPT.ION'\n        Checked = True\n      end\n      object oemForIonChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Use OEM for DESCRIPT.ION'\n      end\n      object recursiveListingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enable recursive listing'\n        Checked = True\n      end\n      object deleteDontAskChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Skip confirmation on deletion'\n      end\n      object listfileswithhiddenattributeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'List files with <hidden> attribute'\n      end\n      object listfileswithsystemattributeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'List files with <system> attribute'\n      end\n      object hideProtectedItemsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'List protected items only for allowed users'\n      end\n      object Iconmasks1: TMenuItem\n        Caption = 'Icon masks...'\n        OnClick = Iconmasks1Click\n      end\n      object Flagfilesaddedrecently1: TMenuItem\n        Caption = 'Flag files added recently...'\n        OnClick = Flagfilesaddedrecently1Click\n      end\n      object Autosaveevery1: TMenuItem\n        Caption = 'Auto-save every...'\n        OnClick = Autosaveevery1Click\n      end\n      object backupSavingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Backup on save'\n        Checked = True\n      end\n      object Addingfolder1: TMenuItem\n        Caption = 'Adding folder'\n        object askFolderKindChk: TMenuItem\n          Caption = 'Ask'\n          Checked = True\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = askFolderKindChkClick\n        end\n        object defaultToVirtualChk: TMenuItem\n          Caption = 'Default to virtual-folder'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = defaultToVirtualChkClick\n        end\n        object defaultToRealChk: TMenuItem\n          Caption = 'Default to real-folder'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = defaultToRealChkClick\n        end\n      end\n      object N18: TMenuItem\n        Caption = '-'\n      end\n      object Resetfileshits1: TMenuItem\n        Caption = 'Reset files hits'\n        OnClick = Resetfileshits1Click\n      end\n      object Resettotals1: TMenuItem\n        Caption = 'Reset totals'\n        OnClick = Resettotals1Click\n      end\n    end\n    object Limits1: TMenuItem\n      Caption = 'Limits'\n      object Speedlimit1: TMenuItem\n        Caption = 'Speed limit (disabled)...'\n        OnClick = Speedlimit1Click\n      end\n      object Speedlimitforsingleaddress1: TMenuItem\n        Caption = 'Speed limit for single address...'\n        OnClick = Speedlimitforsingleaddress1Click\n      end\n      object Pausestreaming1: TMenuItem\n        AutoCheck = True\n        Caption = 'Pause streaming'\n        Hint = 'Sets speed limit temporarily to zero'\n        OnClick = Pausestreaming1Click\n      end\n      object maxDLs1: TMenuItem\n        Caption = 'Max simultaneous downloads...'\n        OnClick = maxDLs1Click\n      end\n      object maxDLsIP1: TMenuItem\n        Caption = 'Max simultaneous downloads from single address...'\n        OnClick = maxDLsIP1Click\n      end\n      object maxIPs1: TMenuItem\n        Caption = 'Max simultaneous addresses...'\n        OnClick = maxIPs1Click\n      end\n      object maxIPsDLing1: TMenuItem\n        Caption = 'Max simultaneous addresses downloading...'\n        OnClick = maxIPsDLing1Click\n      end\n      object Maxconnections1: TMenuItem\n        Caption = 'Max connections...'\n        OnClick = Maxconnections1Click\n      end\n      object Maxconnectionsfromsingleaddress1: TMenuItem\n        Caption = 'Max connections from single address...'\n        OnClick = Maxconnectionsfromsingleaddress1Click\n      end\n      object Connectionsinactivitytimeout1: TMenuItem\n        Caption = 'Connections inactivity timeout...'\n        OnClick = Connectionsinactivitytimeout1Click\n      end\n      object BannedIPaddresses1: TMenuItem\n        Caption = 'Bans...'\n        ImageIndex = 25\n        OnClick = BannedIPaddresses1Click\n      end\n      object Minimumdiskspace1: TMenuItem\n        Caption = 'Minimum disk space...'\n        OnClick = Minimumdiskspace1Click\n      end\n      object preventLeechingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Prevent leeching (download accelerators)'\n        Checked = True\n      end\n      object Allowedreferer1: TMenuItem\n        Caption = 'Allowed referer...'\n        OnClick = Allowedreferer1Click\n      end\n      object stopSpidersChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Stop spiders'\n        Checked = True\n      end\n    end\n    object Flashtaskbutton1: TMenuItem\n      Caption = 'Flash taskbutton'\n      object onDownloadChk: TMenuItem\n        AutoCheck = True\n        Caption = 'On download'\n        GroupIndex = 1\n        RadioItem = True\n        OnClick = onDownloadChkClick\n      end\n      object onconnectionChk: TMenuItem\n        AutoCheck = True\n        Caption = 'On connection'\n        GroupIndex = 1\n        RadioItem = True\n        OnClick = onconnectionChkClick\n      end\n      object never1: TMenuItem\n        Caption = 'Never'\n        GroupIndex = 1\n        RadioItem = True\n        OnClick = never1Click\n      end\n      object N6: TMenuItem\n        Caption = '-'\n        GroupIndex = 1\n      end\n      object beepChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Also beep'\n        GroupIndex = 1\n      end\n    end\n    object Fingerprints1: TMenuItem\n      Caption = 'Fingerprints'\n      object fingerprintsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enabled'\n        Checked = True\n      end\n      object saveNewFingerprintsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Save new calculated fingerprints'\n        OnClick = saveNewFingerprintsChkClick\n      end\n      object Createfingerprintonaddition1: TMenuItem\n        Caption = 'Create fingerprint on file addition...'\n        OnClick = Createfingerprintonaddition1Click\n      end\n    end\n    object trayicons1: TMenuItem\n      Caption = 'Tray icons'\n      object MinimizetotrayChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Minimize to tray'\n        Checked = True\n      end\n      object showmaintrayiconChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Show main tray icon'\n        Checked = True\n        OnClick = showmaintrayiconChkClick\n      end\n      object hetrayiconshows1: TMenuItem\n        Caption = 'Main icon shows'\n        object Numberofcurrentconnections1: TMenuItem\n          AutoCheck = True\n          Caption = 'Number of current connections'\n          Checked = True\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Numberofcurrentconnections1Click\n        end\n        object Numberofloggeddownloads1: TMenuItem\n          AutoCheck = True\n          Caption = 'Number of logged downloads'\n          GroupIndex = 1\n          RadioItem = True\n          OnClick = Numberofloggeddownloads1Click\n        end\n        object Numberofloggeduploads1: TMenuItem\n          Caption = 'Number of logged uploads'\n          GroupIndex = 1\n          OnClick = Numberofloggeduploads1Click\n        end\n        object Numberofloggedhits1: TMenuItem\n          Caption = 'Number of logged hits'\n          GroupIndex = 1\n          OnClick = Numberofloggedhits1Click\n        end\n        object NumberofdifferentIPaddresses1: TMenuItem\n          Caption = 'Number of different IP addresses now connected'\n          GroupIndex = 1\n          OnClick = NumberofdifferentIPaddresses1Click\n        end\n        object NumberofdifferentIPaddresseseverconnected1: TMenuItem\n          Caption = 'Number of different IP addresses ever connected'\n          GroupIndex = 1\n          OnClick = NumberofdifferentIPaddresseseverconnected1Click\n        end\n      end\n      object traymessage1: TMenuItem\n        Caption = 'Tray message...'\n        OnClick = traymessage1Click\n      end\n      object N8: TMenuItem\n        Caption = '-'\n      end\n      object trayfordownloadChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Tray icon for each download'\n        Checked = True\n      end\n    end\n    object IPaddress1: TMenuItem\n      AutoLineReduction = maManual\n      Caption = '&IP address'\n      object hisIPaddressisusedforURLbuilding1: TMenuItem\n        Caption = 'This IP address is used only for URL building'\n        Enabled = False\n      end\n      object N20: TMenuItem\n        Caption = '-'\n      end\n      object N15: TMenuItem\n        Caption = '-'\n      end\n      object Custom1: TMenuItem\n        Caption = 'Custom...'\n        OnClick = Custom1Click\n      end\n      object noPortInUrlChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Don'#39't include port in URL'\n        OnClick = noPortInUrlChkClick\n      end\n      object Findexternaladdress1: TMenuItem\n        Caption = 'Find external address'\n        OnClick = Findexternaladdress1Click\n      end\n      object searchbetteripChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Constantly search for better address'\n        Checked = True\n      end\n    end\n    object Acceptconnectionson1: TMenuItem\n      Caption = 'Accept connections on'\n      object Anyaddress1: TMenuItem\n        Caption = 'Any address'\n        OnClick = Anyaddress1Click\n      end\n    end\n    object DynamicDNSupdater1: TMenuItem\n      Caption = 'Dynamic DNS updater'\n      object CJBtemplate1: TMenuItem\n        Caption = 'CJB wizard...'\n        OnClick = CJBtemplate1Click\n      end\n      object NoIPtemplate1: TMenuItem\n        Caption = 'No-IP wizard...'\n        OnClick = NoIPtemplate1Click\n      end\n      object DynDNStemplate1: TMenuItem\n        Caption = 'DynDNS wizard...'\n        OnClick = DynDNStemplate1Click\n      end\n      object N21: TMenuItem\n        Caption = '-'\n      end\n      object Custom2: TMenuItem\n        Caption = 'Custom...'\n        OnClick = Custom2Click\n      end\n      object Seelastserverresponse1: TMenuItem\n        Caption = 'See last server response...'\n        OnClick = Seelastserverresponse1Click\n      end\n      object Disable1: TMenuItem\n        Caption = 'Disable'\n        OnClick = Disable1Click\n      end\n    end\n    object URLencoding1: TMenuItem\n      Caption = 'URL encoding'\n      object encodeSpacesChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Encode spaces'\n        Checked = True\n      end\n      object encodenonasciiChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Encode non-ASCII characters'\n      end\n      object pwdInPagesChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Include password in pages (for download managers)'\n      end\n      object httpsUrlsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'URLs starting with https instead of http'\n      end\n    end\n    object Debug1: TMenuItem\n      Caption = 'De&bug'\n      object resetOptions1: TMenuItem\n        Caption = 'Temporarily reset options'\n        OnClick = resetOptions1Click\n      end\n      object dumpTrafficChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Dump traffic'\n      end\n      object Showcustomizedoptions1: TMenuItem\n        Caption = 'Show customized options...'\n        OnClick = Showcustomizedoptions1Click\n      end\n      object highSpeedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Experimental high speed handling'\n        Checked = True\n      end\n      object macrosLogChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Enable macros.log'\n      end\n      object Appendmacroslog1: TMenuItem\n        AutoCheck = True\n        Caption = 'Append macros.log'\n      end\n      object Runscript1: TMenuItem\n        Caption = 'Run script...'\n        OnClick = Runscript1Click\n      end\n      object showMemUsageChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Show memory usage'\n      end\n      object noContentdispositionChk: TMenuItem\n        AutoCheck = True\n        Caption = 'No Content-disposition'\n      end\n    end\n    object Updates1: TMenuItem\n      Caption = 'Updates'\n      object Checkforupdates1: TMenuItem\n        Caption = 'Check for news/updates'\n        OnClick = Checkforupdates1Click\n      end\n      object updateDailyChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto check every day'\n        Checked = True\n      end\n      object keepBakUpdatingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Keep old version'\n        Checked = True\n      end\n      object testerUpdatesChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Updates from official to beta versions'\n      end\n      object updateAutomaticallyChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Update automatically'\n      end\n      object delayUpdateChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Delay update to serve last requests'\n      end\n      object Reverttopreviousversion1: TMenuItem\n        Caption = 'Revert to previous version'\n        OnClick = Reverttopreviousversion1Click\n      end\n    end\n    object Donate1: TMenuItem\n      Caption = 'Donate!'\n      ImageIndex = 39\n      OnClick = Donate1Click\n    end\n    object N1: TMenuItem\n      Caption = '-'\n    end\n    object Addfiles2: TMenuItem\n      Caption = 'Add files...'\n      OnClick = Addfiles1Click\n    end\n    object Addfolder2: TMenuItem\n      Caption = 'Add folder from disk...'\n      OnClick = Addfolder1Click\n    end\n    object Loadfilesystem1: TMenuItem\n      Caption = 'Load file system...'\n      ImageIndex = 8\n      ShortCut = 16463\n      OnClick = Loadfilesystem1Click\n    end\n    object Loadrecentfiles1: TMenuItem\n      Caption = 'Load recent files'\n      Visible = False\n    end\n    object Savefilesystem1: TMenuItem\n      Caption = 'Save file system...'\n      ImageIndex = 18\n      ShortCut = 16467\n      OnClick = Savefilesystem1Click\n    end\n    object Clearfilesystem1: TMenuItem\n      Caption = 'Clear file system'\n      ImageIndex = 21\n      OnClick = Clearfilesystem1Click\n    end\n    object N19: TMenuItem\n      Caption = '-'\n    end\n    object Saveoptions1: TMenuItem\n      Caption = 'Save options'\n      object tofile1: TMenuItem\n        Caption = 'to file'\n        ImageIndex = 18\n        OnClick = tofile1Click\n      end\n      object toregistrycurrentuser1: TMenuItem\n        Caption = 'to registry (current user)'\n        ImageIndex = 20\n        OnClick = tofile1Click\n      end\n      object toregistryallusers1: TMenuItem\n        Caption = 'to registry (all users)'\n        ImageIndex = 20\n        OnClick = tofile1Click\n      end\n      object N4: TMenuItem\n        Caption = '-'\n      end\n      object Clearoptionsandquit1: TMenuItem\n        Caption = 'Clear options and quit'\n        ImageIndex = 21\n        OnClick = Clearoptionsandquit1click\n      end\n      object N10: TMenuItem\n        Caption = '-'\n      end\n      object autoSaveOptionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Auto-save options'\n        Checked = True\n      end\n    end\n    object N12: TMenuItem\n      Caption = '-'\n    end\n    object Help1: TMenuItem\n      Caption = 'Help'\n      Default = True\n      object Introduction1: TMenuItem\n        Caption = 'Introduction'\n        OnClick = Introduction1Click\n      end\n      object Guide1: TMenuItem\n        Caption = 'Full Guide'\n        OnClick = Guide1Click\n      end\n      object FAQ1: TMenuItem\n        Caption = 'F.A.Q.'\n        OnClick = FAQ1Click\n      end\n    end\n    object Weblinks1: TMenuItem\n      Caption = 'Web links'\n      object Officialwebsite1: TMenuItem\n        Caption = 'Official website'\n        ImageIndex = 23\n        OnClick = Officialwebsite1Click\n      end\n      object Forum1: TMenuItem\n        Caption = 'Forum'\n        OnClick = Forum1Click\n      end\n      object License1: TMenuItem\n        Caption = 'License'\n        OnClick = License1Click\n      end\n    end\n    object UninstallHFS1: TMenuItem\n      Caption = 'Uninstall HFS'\n      OnClick = UninstallHFS1Click\n    end\n    object About1: TMenuItem\n      Caption = 'About...'\n      ImageIndex = 10\n      OnClick = About1Click\n    end\n    object N13: TMenuItem\n      Caption = '-'\n    end\n    object SwitchON1: TMenuItem\n      Caption = 'Switch ON'\n      ImageIndex = 4\n      ShortCut = 115\n      OnClick = SwitchON1Click\n    end\n    object Restore1: TMenuItem\n      Caption = 'Restore'\n      OnClick = Restore1Click\n    end\n    object Exit1: TMenuItem\n      Caption = 'Exit'\n      OnClick = Exit1Click\n    end\n  end\n  object connmenu: TPopupMenu\n    Images = images\n    OnPopup = connmenuPopup\n    Left = 264\n    Top = 408\n    object Kickconnection1: TMenuItem\n      Caption = 'Kick connection'\n      OnClick = Kickconnection1Click\n    end\n    object KickIPaddress1: TMenuItem\n      Caption = 'Kick IP address'\n      OnClick = KickIPaddress1Click\n    end\n    object Kickallconnections1: TMenuItem\n      Caption = 'Kick all connections'\n      OnClick = Kickallconnections1Click\n    end\n    object Kickidleconnections1: TMenuItem\n      Caption = 'Kick idle connections'\n      OnClick = Kickidleconnections1Click\n    end\n    object BanIPaddress1: TMenuItem\n      Caption = 'Ban IP address'\n      ImageIndex = 25\n      OnClick = BanIPaddress1Click\n    end\n    object Pause1: TMenuItem\n      Caption = 'Pause (download-only)'\n      OnClick = Pause1Click\n    end\n    object N2: TMenuItem\n      Caption = '-'\n    end\n    object Viewhttprequest1: TMenuItem\n      Caption = 'View http request'\n      OnClick = Viewhttprequest1Click\n    end\n    object trayiconforeachdownload1: TMenuItem\n      Caption = 'Tray icon for each download'\n      Checked = True\n      OnClick = trayiconforeachdownload1Click\n    end\n  end\n  object timer: TTimer\n    Enabled = False\n    Interval = 100\n    OnTimer = timerEvent\n    Left = 48\n    Top = 112\n  end\n  object appEvents: TApplicationEvents\n    OnMinimize = appEventsMinimize\n    OnRestore = appEventsRestore\n    OnShowHint = appEventsShowHint\n    Left = 592\n  end\n  object logmenu: TPopupMenu\n    Images = images\n    OnPopup = logmenuPopup\n    Left = 352\n    Top = 159\n    object Logwhat1: TMenuItem\n      Caption = 'Log what'\n      object LogtimeChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Time'\n        Checked = True\n      end\n      object LogdateChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Date'\n      end\n      object N9: TMenuItem\n        AutoCheck = True\n        Caption = '-'\n      end\n      object logBrowsingChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Browsing'\n        Checked = True\n      end\n      object LogiconsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Icons'\n      end\n      object logProgressChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Progress'\n      end\n      object logBannedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Banned'\n      end\n      object logOnlyServedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Only served requests'\n        Checked = True\n      end\n      object N5: TMenuItem\n        Caption = '-'\n      end\n      object logOtherEventsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Other events'\n        Checked = True\n        Hint = 'Like dynamic dns updating...'\n      end\n      object N16: TMenuItem\n        AutoCheck = True\n        Caption = '-'\n      end\n      object logconnectionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Connections'\n      end\n      object logDisconnectionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Disconnections'\n      end\n      object logRequestsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Requests'\n      end\n      object DumprequestsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Requests dump'\n      end\n      object logRepliesChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Replies'\n      end\n      object logFulldownloadsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Full downloads'\n        Checked = True\n      end\n      object logUploadsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Uploads'\n        Checked = True\n      end\n      object logDeletionsChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Deletions'\n        Checked = True\n      end\n      object logBytesreceivedChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Bytes received'\n      end\n      object logBytessentChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Bytes sent'\n      end\n      object logServerstartChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Server start'\n      end\n      object logServerstopChk: TMenuItem\n        AutoCheck = True\n        Caption = 'Server stop'\n      end\n    end\n    object logOnVideoChk: TMenuItem\n      AutoCheck = True\n      Caption = 'Log to screen'\n      Checked = True\n    end\n    object Logfile1: TMenuItem\n      Caption = 'Log to file...'\n      OnClick = Logfile1Click\n    end\n    object Maxlinesonscreen1: TMenuItem\n      Caption = 'Max lines on screen...'\n      OnClick = Maxlinesonscreen1Click\n    end\n    object Apachelogfileformat1: TMenuItem\n      Caption = 'Apache log file format...'\n      OnClick = Apachelogfileformat1Click\n    end\n    object Donotlogaddress1: TMenuItem\n      Caption = 'Do not log address...'\n      OnClick = Donotlogaddress1Click\n    end\n    object Dontlogsomefiles1: TMenuItem\n      Caption = 'Do not log some files...'\n      OnClick = Dontlogsomefiles1Click\n    end\n    object Address2name1: TMenuItem\n      Caption = 'Assign name to address...'\n      OnClick = Address2name1Click\n    end\n    object Font1: TMenuItem\n      Caption = 'Font...'\n      OnClick = Font1Click\n    end\n    object tabOnLogFileChk: TMenuItem\n      AutoCheck = True\n      Caption = 'Tabbed instead of multi-line for the log file'\n    end\n    object N3: TMenuItem\n      Caption = '-'\n    end\n    object Readonly1: TMenuItem\n      Caption = 'Read-only'\n      OnClick = Readonly1Click\n    end\n    object Banthisaddress1: TMenuItem\n      Caption = 'Ban this address'\n      ImageIndex = 11\n      OnClick = Banthisaddress1Click\n    end\n    object Copy1: TMenuItem\n      Caption = 'Copy'\n      ImageIndex = 16\n      OnClick = Copy1Click\n    end\n    object Clear1: TMenuItem\n      Caption = 'Clear'\n      ImageIndex = 21\n      OnClick = Clear1Click\n    end\n    object Clearandresettotals1: TMenuItem\n      Caption = 'Clear and reset totals'\n      OnClick = Clearandresettotals1Click\n    end\n    object Save1: TMenuItem\n      Caption = 'Save'\n      ImageIndex = 18\n      OnClick = Save1Click\n    end\n    object Saveas1: TMenuItem\n      Caption = 'Save as...'\n      ImageIndex = 18\n      OnClick = Saveas1Click\n    end\n    object N24: TMenuItem\n      Caption = '-'\n    end\n    object Addresseseverconnected1: TMenuItem\n      Caption = 'Addresses ever connected...'\n      OnClick = Addresseseverconnected1Click\n    end\n  end\n  object numbers: TImageList\n    DrawingStyle = dsTransparent\n    Height = 6\n    Width = 4\n    Left = 216\n    Top = 152\n    Bitmap = {\n      494C01010B000E00040004000600FFFFFFFFFF10FFFFFFFFFFFFFFFF424D3600\n      0000000000003600000028000000100000001200000001002000000000008004\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      0000000000000000000000000000000000000000000000000000000000000000\n      000000000000000000000000000000000000424D3E000000000000003E000000\n      2800000010000000120000000100010000000000480000000000000000000000\n      000000000000000000000000FFFFFF0011700000555000005DB0000011B00000\n      5550000011D00000D11B0000D55B00001D110000517B0000575D000091110000\n      1B1100005B7500005BBD00005BDB0000535D00001B1100000000000000000000\n      0000000000000000000000000000}\n  end\n  object graphMenu: TPopupMenu\n    Left = 504\n    Top = 48\n    object Reset1: TMenuItem\n      Caption = 'Reset'\n      OnClick = Reset1Click\n    end\n    object Hide: TMenuItem\n      Caption = 'Hide'\n      OnClick = HideClick\n    end\n  end\nend\n", "\ufeff{\nCopyright (C) 2002-2014  Massimo Melina (www.rejetto.com)\n\nThis file is part of HFS ~ HTTP File Server.\n\n    HFS is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    HFS is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with HFS; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n}\n{$A+,B-,C+,E-,F-,G+,H+,I-,J+,K-,L+,M-,N+,O+,P+,Q-,R-,S-,T-,U-,V+,X+,Y+,Z1}\n{$INCLUDE defs.inc }\n\nunit main;\n\ninterface\n\nuses\n  // delphi libs\n  Windows, Messages, SysUtils, Forms, Menus, Graphics, Controls, ComCtrls, Dialogs, math,\n  registry, ExtCtrls, shellapi, ImgList, ToolWin, StdCtrls, strutils, AppEvnts, types,\n  winsock, clipbrd, shlobj, activex, Buttons, FileCtrl, dateutils, iniFiles, Classes,\n  System.ImageList, system.Generics.Collections, Vcl.Imaging.GIFImg,\n  // 3rd part libs. ensure you have all of these, the same version reported in dev-notes.txt\n  OverbyteIcsWSocket, OverbyteIcsHttpProt, regexpr, OverbyteIcsZLibHigh, OverbyteIcsZLibObj,\n  // rejetto libs\n  HSlib, traylib, monoLib, progFrmLib, classesLib;\n\nconst\n  VERSION = '2.4 beta1';\n  VERSION_BUILD = '303';\n  VERSION_STABLE = {$IFDEF STABLE } TRUE {$ELSE} FALSE {$ENDIF};\n  CURRENT_VFS_FORMAT :integer = 1;\n  CRLF = #13#10;\n  TAB = #9;\n  BAK_EXT = '.bak';\n  CORRUPTED_EXT = '.corrupted';\n  COMMENT_FILE_EXT = '.comment';\n  VFS_FILE_IDENTIFIER = 'HFS.VFS';\n  CFG_KEY = 'Software\\rejetto\\HFS';\n  CFG_FILE = 'hfs.ini';\n  TPL_FILE = 'hfs.tpl';\n  IPS_FILE = 'hfs.ips.txt';\n  VFS_TEMP_FILE = '~temp.vfs';\n  HFS_HTTP_AGENT = 'HFS/'+VERSION;\n  COMMENTS_FILE = 'hfs.comments.txt';\n  DESCRIPT_ION = 'descript.ion';\n  DIFF_TPL_FILE = 'hfs.diff.tpl';\n  FILELIST_TPL_FILE = 'hfs.filelist.tpl';\n  EVENTSCRIPTS_FILE = 'hfs.events';\n  MACROS_LOG_FILE = 'macros-log.html';\n  PREVIOUS_VERSION = 'hfs.old.exe';\n  SESSION_COOKIE = 'HFS_SID_';\n  PROTECTED_FILES_MASK = 'hfs.*;*.htm*;descript.ion;*.comment;*.md5;*.corrupted;*.lnk';\n  G_VAR_PREFIX = '#';\n  HOURS = 24;\n  MINUTES = HOURS*60;\n  SECONDS = MINUTES*60; // Tdatetime * SECONDS = time in seconds\n  ETA_FRAME = 5; // time frame for ETA (in seconds)\n  DOWNLOAD_MIN_REFRESH_TIME :Tdatetime = 1/3/SECONDS; // 3 Hz\n  BYTES_GROUPING_THRESHOLD :Tdatetime = 1/SECONDS; // group bytes in log\n  IPS_THRESHOLD = 50;  // used to avoid an external file for few IPs (ipsEverConnected list)\n  STATUSBAR_REFRESH = 10; // tenth of second\n  MAX_RECENT_FILES = 5;\n  MANY_ITEMS_THRESHOLD = 1000;\n  KILO = 1024;\n  MEGA = KILO*KILO;\n  COMPRESSION_THRESHOLD = 10*KILO; // if more than X bytes, VFS files are compressed\n  STARTING_SNDBUF = 32000;\n  YESNO :array [boolean] of string=('no','yes');\n  DEFAULT_MIME = 'application/octet-stream';\n  IP_SERVICES_URL = 'http://hfsservice.rejetto.com/ipservices.php';\n  SELF_TEST_URL = 'http://hfstest.rejetto.com/';\n\n  USER_ANONYMOUS = '@anonymous';\n  USER_ANYONE = '@anyone';\n  USER_ANY_ACCOUNT = '@any account';\n\n  ALWAYS_ON_WEB_SERVER = 'google.com';\n  ADDRESS_COLOR = clGreen;\n  BG_ERROR = $BBBBFF;\n  ENCODED_TABLE_HEADER = 'this is an encoded table'+CRLF;\n\n  DEFAULT_MIME_TYPES: array [0..21] of string = (\n    '*.htm;*.html', 'text/html',\n    '*.jpg;*.jpeg;*.jpe', 'image/jpeg',\n    '*.gif', 'image/gif',\n    '*.png', 'image/png',\n    '*.bmp', 'image/bmp',\n    '*.ico', 'image/x-icon',\n    '*.mpeg;*.mpg;*.mpe', 'video/mpeg',\n    '*.avi', 'video/x-msvideo',\n    '*.txt', 'text/plain',\n    '*.css', 'text/css',\n    '*.js',  'text/javascript'\n  );\n\n  ICONMENU_NEW = 1;\n\n  ICON_UNIT = 31;\n  ICON_ROOT = 1;\n  ICON_LINK = 4;\n  ICON_FILE = 37;\n  ICON_FOLDER = 6;\n  ICON_REAL_FOLDER = 19;\n  ICON_LOCK = 12;\n  ICON_EASY = 29;\n  ICON_EXPERT = 35;\n\n  USER_ICON_MASKS_OFS = 10000;\n\nresourcestring\n  S_PORT_LABEL = 'Port: %s';\n  S_PORT_ANY = 'any';\n  DISABLED = 'disabled';\n  // messages\n  MSG_UNPROTECTED_LINKS = 'Links are NOT actually protected.'\n    +#13'The feature is there to be used with the \"list protected items only...\" option.'\n    +#13'Continue?';\n  MSG_SAME_NAME ='An item with the same name is already present in this folder.'\n    +#13'Continue?';\n  MSG_OPTIONS_SAVED = 'Options saved';\n  MSG_SOME_LOCKED = 'Some items were not affected because locked';\n  MSG_ITEM_LOCKED = 'The item is locked';\n  MSG_INVALID_VALUE = 'Invalid value';\n  MSG_EMPTY_NO_LIMIT = 'Leave blank to get no limits.';\n  MSG_ADDRESSES_EXCEED = 'The following addresses exceed the limit:'#13'%s';\n  MSG_NO_TEMP = 'Cannot save temporary file';\n  MSG_ERROR_REGISTRY = 'Can''t write to registry.'\n    +#13'You may lack necessary rights.';\n  MSG_MANY_ITEMS = 'You are putting many files.'\n    +#13'Try using real folders instead of virtual folders.'\n    +#13'Read documentation or ask on the forum for help.';\n  MSG_ADD_TO_HFS = '\"Add to HFS\" has been added to your Window''s Explorer right-click menu.';\n  MSG_SINGLE_INSTANCE = 'Sorry, this feature only works with the \"Only 1 instance\" option enabled.'\n    +#13#13'You can find this option under Menu -> Start/Exit'\n    +#13'(only in expert mode)';\n  MSG_ENABLED =   'Option enabled';\n  MSG_DISABLED = 'Option disabled';\n  MSG_COMM_ERROR = 'Network error. Request failed.';\n  MSG_DDNS_badauth='invalid user/password';\n  MSG_DDNS_notfqdn='incomplete hostname, required form aaa.bbb.com';\n  MSG_DDNS_nohost='specified hostname does not exist';\n  MSG_DDNS_notyours='specified hostname belongs to another username';\n  MSG_DDNS_numhost='too many or too few hosts found';\n  MSG_DDNS_abuse='specified hostname is blocked for update abuse';\n  MSG_DDNS_dnserr='server error';\n  MSG_DDNS_911='server error';\n  MSG_DDNS_notdonator='an option specified requires payment';\n  MSG_DDNS_badagent='banned client';\n\ntype\n  Pboolean = ^boolean;\n\n  TfileAttribute = (\n    FA_FOLDER,       // folder kind\n    FA_VIRTUAL,      // does not exist on disc\n    FA_ROOT,         // only the root item has this attribute\n    FA_BROWSABLE,    // permit listing of this folder (not recursive, only dir)\n    FA_HIDDEN,       // hidden iterms won't be shown to browsers (not recursive)\n    { no more used attributes have to stay for backward compatibility with\n    { VFS files }\n    FA_NO_MORE_USED1,\n  \tFA_NO_MORE_USED2,\n    FA_TEMP,            // this is a temporary item and is not part of the VFS\n    FA_HIDDENTREE,      // recursive hidden\n    FA_LINK,            // redirection\n    FA_UNIT,            // logical unit (drive)\n    FA_VIS_ONLY_ANON,   // visible only to anonymous users [no more used]\n    FA_DL_FORBIDDEN,    // forbid download (not recursive)\n    FA_HIDE_EMPTY_FOLDERS,  // (recursive)\n    FA_DONT_COUNT_AS_DL,    // (not recursive)\n    FA_SOLVED_LNK,\n    FA_HIDE_EXT,       // (recursive)\n    FA_DONT_LOG,       // (recursive)\n    FA_ARCHIVABLE      // (recursive)\n  );\n  TfileAttributes = set of TfileAttribute;\n\n  Tfile = class;\n  TconnData = class;\n\n  TfileCallbackReturn = set of (FCB_NO_DEEPER, FCB_DELETE, FCB_RECALL_AFTER_CHILDREN); // use FCB_* flags\n\n  // returning FALSE stops recursion\n  TfileCallback = function(f:Tfile; childrenDone:boolean; par, par2:integer):TfileCallbackReturn;\n\n  TfileAction = (FA_ACCESS, FA_DELETE, FA_UPLOAD);\n\n  Tfile = class (Tobject)\n  private\n    locked: boolean;\n    FDLcount: integer;\n    function  getParent():Tfile;\n    function  getDLcount():integer;\n    procedure setDLcount(i:integer);\n    function  getDLcountRecursive():integer;\n  public\n    name, comment, user, pwd, lnk: string;\n    resource: string;  // link to physical file/folder; URL for links\n    flags: TfileAttributes;\n    node: Ttreenode;\n    size: int64; // -1 is NULL\n    atime,            // when was this file added to the VFS ?\n    mtime: Tdatetime; // modified time, read from disk\n    icon: integer;\n    accounts: array [TfileAction] of TStringDynArray;\n    filesFilter, foldersFilter, realm, diffTpl,\n    defaultFileMask, dontCountAsDownloadMask, uploadFilterMask: string;\n    constructor create(fullpath:string);\n    constructor createTemp(fullpath:string);\n    constructor createVirtualFolder(name:string);\n    constructor createLink(name:string);\n    property  parent:Tfile read getParent;\n    property  DLcount:integer read getDLcount write setDLcount;\n    function  toggle(att:TfileAttribute):boolean;\n    function  isFolder():boolean; inline;\n    function  isFile():boolean; inline;\n    function  isFileOrFolder():boolean; inline;\n    function  isRealFolder():boolean; inline;\n    function  isVirtualFolder():boolean; inline;\n    function  isEmptyFolder(cd:TconnData=NIL):boolean;\n    function  isRoot():boolean; inline;\n    function  isLink():boolean; inline;\n    function  isTemp():boolean; inline;\n    function  isNew():boolean;\n    function  isDLforbidden():boolean;\n    function  url(fullEncode:boolean=FALSE):string;\n    function  relativeURL(fullEncode:boolean=FALSE):string;\n    function  pathTill(root:Tfile=NIL; delim:char='\\'):string;\n    function  parentURL():string;\n    function  fullURL(ip, user, pwd:string):string; overload;\n    function  fullURL(ip:string=''):string; overload;\n    procedure setupImage(newIcon:integer); overload;\n    procedure setupImage(); overload;\n    function  getAccountsFor(action:TfileAction; specialUsernames:boolean=FALSE; outInherited:Pboolean=NIL):TstringDynArray;\n    function  accessFor(username, password:string):boolean; overload;\n    function  accessFor(cd:TconnData):boolean; overload;\n    function  hasRecursive(attributes: TfileAttributes; orInsteadOfAnd:boolean=FALSE; outInherited:Pboolean=NIL):boolean; overload;\n    function  hasRecursive(attribute: TfileAttribute; outInherited:Pboolean=NIL):boolean; overload;\n    function  getSystemIcon():integer;\n    function  getIconForTreeview():integer;\n    function  getShownRealm():string;\n    function  getFolder():string;\n    function  getRecursiveFileMask():string;\n    function  shouldCountAsDownload():boolean;\n    function  getDefaultFile():Tfile;\n    procedure recursiveApply(callback:TfileCallback; par:integer=0; par2:integer=0);\n    procedure getFiltersRecursively(var files,folders:string);\n    function  diskfree():int64;\n    function  same(f:Tfile):boolean;\n    procedure setName(name:string);\n    procedure setResource(res:string);\n    function  getDynamicComment(skipParent:boolean=FALSE):string;\n    procedure setDynamicComment(cmt:string);\n    function  getRecursiveDiffTplAsStr(outInherited:Pboolean=NIL; outFromDisk:Pboolean=NIL):string;\n    // locking prevents modification of all its ancestors and descendants\n    procedure lock();\n    procedure unlock();\n    function  isLocked():boolean;\n    end; // Tfile\n\n  Paccount = ^Taccount;\n\tTaccount = record   // user/pass profile\n    user, pwd, redir, notes: string;\n    wasUser: string; // used in user renaming panel\n    enabled, noLimits, group: boolean;\n    link: TStringDynArray;\n    end;\n  Taccounts = array of Taccount;\n\n  TfilterMethod = function(self:Tobject):boolean;\n\n  Thelp = ( HLP_NONE, HLP_TPL );\n\n  TdownloadingWhat = ( DW_UNK, DW_FILE, DW_FOLDERPAGE, DW_ICON, DW_ERROR, DW_ARCHIVE );\n\n  TpreReply =  (PR_NONE, PR_BAN, PR_OVERLOAD);\n\n  TuploadResult = record\n    fn, reason:string;\n    speed:integer;\n    size: int64;\n    end;\n\n  Tsession = class\n    vars: THashedStringList;\n    created, ttl, expires: Tdatetime;\n  public\n    id, user, ip, redirect: string;\n    constructor create(const sid:string='');\n    destructor Destroy; override;\n    procedure setVar(const k,v:string);\n    function getVar(const k:string):string;\n    procedure keepAlive();\n    procedure setTTL(t:Tdatetime);\n    end;\n  Tsessions = Tdictionary<string,Tsession>;\n\n  TconnData = class  // data associated to a client connection\n  private\n    FlastFile: Tfile;\n    procedure setLastFile(f:Tfile);\n  public\n    address: string;   // this is address shown in the log, and it is not necessarily the same as the socket address\n    averageSpeed: real;   { calculated on disconnection as bytesSent/totalTime. it is calculated also while\n                            sending and it is different from conn.speed because conn.speed is average speed\n                            in the last second, while averageSpeed is calculated on ETA_FRAME seconds }\n    time: Tdatetime;  // connection start time\n    requestTime: Tdatetime; // last request start time\n    tray: TmyTrayicon;\n    tray_ico: Ticon;\n    lastFN: string;\n    countAsDownload: boolean; // cache the value for the Tfile method\n    { cache User-Agent because often retrieved by connBox.\n    { this value is filled after the http request is complete (HE_REQUESTED),\n    { or before, during the request as we get a file (HE_POST_FILE). }\n    agent: string;\n    conn: ThttpConn;\n    account: Paccount;\n    user, pwd: string;\n    acceptedCredentials: boolean;\n    limiter: TspeedLimiter;\n    tpl: Ttpl;\n    deleting: boolean;      // don't use, this item is about to be discarded\n    nextDloadScreenUpdate: Tdatetime; // avoid too fast updating during download\n    disconnectReason: string;\n    error: string;         // error details\n    eta: record\n      idx: integer;   // estimation time (seconds)\n      data: array [0..ETA_FRAME-1] of real;  // accumulates speed data\n      result: Tdatetime;\n      end;\n    downloadingWhat: TdownloadingWhat;\n    preReply: TpreReply;\n    banReason: string;\n    lastBytesSent, lastBytesGot: int64; // used for print to log only the recent amount of bytes\n    lastActivityTime, fileXferStart: Tdatetime;\n    uploadSrc, uploadDest: string;\n    uploadFailed: string; // reason (empty on success)\n    uploadResults: array of TuploadResult;\n    disconnectAfterReply, logLaterInApache, dontLog, fullDLlogged: boolean;\n    bytesGotGrouping, bytesSentGrouping: record\n      bytes: integer;\n      since: Tdatetime;\n      end;\n    session: Tsession;\n    vars, // defined by {.set.}\n    urlvars,  // as $_GET in php\n    postVars  // as $_POST in php\n      : THashedStringList;\n    tplCounters: TstringToIntHash;\n    workaroundForIEutf8: (WI_toDetect, WI_yes, WI_no);\n    { here we put just a pointer because the file type would triplicate\n    { the size of this record, while it is NIL for most connections }\n    f: ^file; // uploading file handle\n\n    property lastFile:Tfile read FlastFile write setLastFile;\n    constructor create(conn:ThttpConn);\n    destructor Destroy; override;\n    procedure disconnect(reason:string);\n    procedure logout();\n    end; // Tconndata\n\n  Tautosave = record\n    every, minimum: integer; // in seconds\n    last: Tdatetime;\n    menu: Tmenuitem;\n    end;\n\n  TtreeNodeDynArray = array of TtreeNode;\n\n  TstringIntPairs = array of record\n    str:string;\n    int:integer;\n    end;\n    \n  TmainFrm = class(TForm)\n    filemenu: TPopupMenu;\n    newfolder1: TMenuItem;\n    images: TImageList;\n    Remove1: TMenuItem;\n    topToolbar: TToolBar;\n    startBtn: TToolButton;\n    ToolButton1: TToolButton;\n    menuBtn: TToolButton;\n    menu: TPopupMenu;\n    About1: TMenuItem;\n    connmenu: TPopupMenu;\n    Kickconnection1: TMenuItem;\n    KickIPaddress1: TMenuItem;\n    Kickallconnections1: TMenuItem;\n    Viewhttprequest1: TMenuItem;\n    Saveoptions1: TMenuItem;\n    toregistrycurrentuser1: TMenuItem;\n    tofile1: TMenuItem;\n    toregistryallusers1: TMenuItem;\n    timer: TTimer;\n    urlToolbar: TToolBar;\n    IPaddress1: TMenuItem;\n    AutocopyURLonadditionChk: TMenuItem;\n    foldersbeforeChk: TMenuItem;\n    Browseit1: TMenuItem;\n    Openit1: TMenuItem;\n    appEvents: TApplicationEvents;\n    logmenu: TPopupMenu;\n    DumprequestsChk: TMenuItem;\n    CopyURL1: TMenuItem;\n    Readonly1: TMenuItem;\n    Clear1: TMenuItem;\n    Copy1: TMenuItem;\n    N3: TMenuItem;\n    LogtimeChk: TMenuItem;\n    LogdateChk: TMenuItem;\n    Saveas1: TMenuItem;\n    Save1: TMenuItem;\n    N4: TMenuItem;\n    connPnl: TPanel;\n    MinimizetotrayChk: TMenuItem;\n    Restore1: TMenuItem;\n    Numberofcurrentconnections1: TMenuItem;\n    Numberofloggeddownloads1: TMenuItem;\n    Numberofloggedhits1: TMenuItem;\n    Exit1: TMenuItem;\n    Shellcontextmenu1: TMenuItem;\n    Flashtaskbutton1: TMenuItem;\n    onDownloadChk: TMenuItem;\n    onconnectionChk: TMenuItem;\n    never1: TMenuItem;\n    N6: TMenuItem;\n    startminimizedChk: TMenuItem;\n    N7: TMenuItem;\n    trayicons1: TMenuItem;\n    trayfordownloadChk: TMenuItem;\n    N8: TMenuItem;\n    Loadfilesystem1: TMenuItem;\n    Savefilesystem1: TMenuItem;\n    N1: TMenuItem;\n    N12: TMenuItem;\n    usesystemiconsChk: TMenuItem;\n    N13: TMenuItem;\n    Officialwebsite1: TMenuItem;\n    numbers: TImageList;\n    showmaintrayiconChk: TMenuItem;\n    Speedlimit1: TMenuItem;\n    N10: TMenuItem;\n    Limits1: TMenuItem;\n    Maxconnections1: TMenuItem;\n    Maxconnectionsfromsingleaddress1: TMenuItem;\n    Weblinks1: TMenuItem;\n    Forum1: TMenuItem;\n    FAQ1: TMenuItem;\n    License1: TMenuItem;\n    Paste1: TMenuItem;\n    Addfiles1: TMenuItem;\n    Addfolder1: TMenuItem;\n    graphSplitter: TSplitter;\n    Graphrefreshrate1: TMenuItem;\n    Pausestreaming1: TMenuItem;\n    Setuserpass1: TMenuItem;\n    BanIPaddress1: TMenuItem;\n    N2: TMenuItem;\n    BannedIPaddresses1: TMenuItem;\n    Loadrecentfiles1: TMenuItem;\n    alwaysontopChk: TMenuItem;\n    Checkforupdates1: TMenuItem;\n    Rename1: TMenuItem;\n    Otheroptions1: TMenuItem;\n    Nodownloadtimeout1: TMenuItem;\n    Autoclose1: TMenuItem;\n    Showbandwidthgraph1: TMenuItem;\n    Pause1: TMenuItem;\n    reloadonstartupChk: TMenuItem;\n    MIMEtypes1: TMenuItem;\n    autocopyURLonstartChk: TMenuItem;\n    Accounts1: TMenuItem;\n    encodenonasciiChk: TMenuItem;\n    encodeSpacesChk: TMenuItem;\n    URLencoding1: TMenuItem;\n    traymessage1: TMenuItem;\n    DMbrowserTplChk: TMenuItem;\n    Guide1: TMenuItem;\n    autosaveVFSchk: TMenuItem;\n    sendHFSidentifierChk: TMenuItem;\n    persistentconnectionsChk: TMenuItem;\n    Logfile1: TMenuItem;\n    VirtualFileSystem1: TMenuItem;\n    listfileswithhiddenattributeChk: TMenuItem;\n    listfileswithsystemattributeChk: TMenuItem;\n    hideProtectedItemsChk: TMenuItem;\n    StartExit1: TMenuItem;\n    Font1: TMenuItem;\n    Newlink1: TMenuItem;\n    SetURL1: TMenuItem;\n    usecommentasrealmChk: TMenuItem;\n    Resetuserpass1: TMenuItem;\n    Switchtovirtual1: TMenuItem;\n    LogiconsChk: TMenuItem;\n    Loginrealm1: TMenuItem;\n    Logwhat1: TMenuItem;\n    N9: TMenuItem;\n    N16: TMenuItem;\n    logconnectionsChk: TMenuItem;\n    logDisconnectionsChk: TMenuItem;\n    logRequestsChk: TMenuItem;\n    logRepliesChk: TMenuItem;\n    logFulldownloadsChk: TMenuItem;\n    logBytesreceivedChk: TMenuItem;\n    logBytessentChk: TMenuItem;\n    logServerstartChk: TMenuItem;\n    logServerstopChk: TMenuItem;\n    logBrowsingChk: TMenuItem;\n    Help1: TMenuItem;\n    Introduction1: TMenuItem;\n    N18: TMenuItem;\n    Resetfileshits1: TMenuItem;\n    Kickidleconnections1: TMenuItem;\n    Connectionsinactivitytimeout1: TMenuItem;\n    logOnVideoChk: TMenuItem;\n    N19: TMenuItem;\n    Clearfilesystem1: TMenuItem;\n    HintsfornewcomersChk: TMenuItem;\n    logUploadsChk: TMenuItem;\n    only1instanceChk: TMenuItem;\n    compressedbrowsingChk: TMenuItem;\n    Numberofloggeduploads1: TMenuItem;\n    logProgressChk: TMenuItem;\n    Flagfilesaddedrecently1: TMenuItem;\n    Flagasnew1: TMenuItem;\n    confirmexitChk: TMenuItem;\n    Donotlogaddress1: TMenuItem;\n    N15: TMenuItem;\n    Custom1: TMenuItem;\n    noPortInUrlChk: TMenuItem;\n    saveTotalsChk: TMenuItem;\n    Findexternaladdress1: TMenuItem;\n    findExtOnStartupChk: TMenuItem;\n    DynamicDNSupdater1: TMenuItem;\n    Custom2: TMenuItem;\n    N21: TMenuItem;\n    CJBtemplate1: TMenuItem;\n    NoIPtemplate1: TMenuItem;\n    DynDNStemplate1: TMenuItem;\n    searchbetteripChk: TMenuItem;\n    deletePartialUploadsChk: TMenuItem;\n    Minimumdiskspace1: TMenuItem;\n    Banthisaddress1: TMenuItem;\n    modalOptionsChk: TMenuItem;\n    Address2name1: TMenuItem;\n    Resetnewflag1: TMenuItem;\n    beepChk: TMenuItem;\n    Renamepartialuploads1: TMenuItem;\n    SelfTest1: TMenuItem;\n    Opendirectlyinbrowser1: TMenuItem;\n    maxDLs1: TMenuItem;\n    Editresource1: TMenuItem;\n    logBannedChk: TMenuItem;\n    ToolButton2: TToolButton;\n    modeBtn: TToolButton;\n    Addfiles2: TMenuItem;\n    Addfolder2: TMenuItem;\n    Clearoptionsandquit1: TMenuItem;\n    numberFilesOnUploadChk: TMenuItem;\n    Upload2: TMenuItem;\n    UninstallHFS1: TMenuItem;\n    maxIPs1: TMenuItem;\n    maxIPsDLing1: TMenuItem;\n    keepBakUpdatingChk: TMenuItem;\n    Autosaveevery1: TMenuItem;\n    autoSaveOptionsChk: TMenuItem;\n    Apachelogfileformat1: TMenuItem;\n    SwitchON1: TMenuItem;\n    loadSingleCommentsChk: TMenuItem;\n    Bindroottorealfolder1: TMenuItem;\n    Unbindroot1: TMenuItem;\n    Switchtorealfolder1: TMenuItem;\n    abortBtn: TToolButton;\n    Seelastserverresponse1: TMenuItem;\n    N5: TMenuItem;\n    logOtherEventsChk: TMenuItem;\n    supportDescriptionChk: TMenuItem;\n    Showcustomizedoptions1: TMenuItem;\n    useISOdateChk: TMenuItem;\n    browseUsingLocalhostChk: TMenuItem;\n    Addingfolder1: TMenuItem;\n    askFolderKindChk: TMenuItem;\n    defaultToVirtualChk: TMenuItem;\n    defaultToRealChk: TMenuItem;\n    enableNoDefaultChk: TMenuItem;\n    RunHFSwhenWindowsstarts1: TMenuItem;\n    trayInsteadOfQuitChk: TMenuItem;\n    Addicons1: TMenuItem;\n    Iconmasks1: TMenuItem;\n    CopyURLwithpassword1: TMenuItem;\n    CopyURLwithdifferentaddress1: TMenuItem;\n    hisIPaddressisusedforURLbuilding1: TMenuItem;\n    N20: TMenuItem;\n    Acceptconnectionson1: TMenuItem;\n    Anyaddress1: TMenuItem;\n    autoCommentChk: TMenuItem;\n    fingerprintsChk: TMenuItem;\n    CopyURLwithfingerprint1: TMenuItem;\n    recursiveListingChk: TMenuItem;\n    Disable1: TMenuItem;\n    logOnlyServedChk: TMenuItem;\n    Fingerprints1: TMenuItem;\n    saveNewFingerprintsChk: TMenuItem;\n    Createfingerprintonaddition1: TMenuItem;\n    pwdInPagesChk: TMenuItem;\n    deleteDontAskChk: TMenuItem;\n    Updates1: TMenuItem;\n    updateDailyChk: TMenuItem;\n    N22: TMenuItem;\n    Howto1: TMenuItem;\n    testerUpdatesChk: TMenuItem;\n    Defaultsorting1: TMenuItem;\n    Name1: TMenuItem;\n    Size1: TMenuItem;\n    Time1: TMenuItem;\n    Hits1: TMenuItem;\n    centralPnl: TPanel;\n    splitV: TSplitter;\n    browseBtn: TToolButton;\n    Resettotals1: TMenuItem;\n    Clearandresettotals1: TMenuItem;\n    Dontlogsomefiles1: TMenuItem;\n    preventLeechingChk: TMenuItem;\n    NumberofdifferentIPaddresses1: TMenuItem;\n    NumberofdifferentIPaddresseseverconnected1: TMenuItem;\n    Addresseseverconnected1: TMenuItem;\n    N24: TMenuItem;\n    Allowedreferer1: TMenuItem;\n    ToolButton4: TToolButton;\n    oemForIonChk: TMenuItem;\n    portBtn: TToolButton;\n    resetOptions1: TMenuItem;\n    quitWithoutAskingToSaveChk: TMenuItem;\n    highSpeedChk: TMenuItem;\n    freeLoginChk: TMenuItem;\n    backupSavingChk: TMenuItem;\n    graphMenu: TPopupMenu;\n    Reset1: TMenuItem;\n    Extension1: TMenuItem;\n    linksBeforeChk: TMenuItem;\n    updateAutomaticallyChk: TMenuItem;\n    stopSpidersChk: TMenuItem;\n    logPnl: TPanel;\n    logBox: TRichEdit;\n    filesPnl: TPanel;\n    filesBox: TTreeView;\n    logTitle: TPanel;\n    filesTitle: TPanel;\n    graphBox: TPaintBox;\n    dumpTrafficChk: TMenuItem;\n    httpsUrlsChk: TMenuItem;\n    Hide: TMenuItem;\n    Speedlimitforsingleaddress1: TMenuItem;\n    macrosLogChk: TMenuItem;\n    Debug1: TMenuItem;\n    Appendmacroslog1: TMenuItem;\n    preventStandbyChk: TMenuItem;\n    titlePnl: TPanel;\n    HTMLtemplate1: TMenuItem;\n    Edit1: TMenuItem;\n    Changefile1: TMenuItem;\n    Changeeditor1: TMenuItem;\n    Restoredefault1: TMenuItem;\n    logToolbar: TPanel;\n    splitH: TSplitter;\n    collapsedPnl: TPanel;\n    expandBtn: TSpeedButton;\n    expandedPnl: TPanel;\n    openLogBtn: TSpeedButton;\n    searchPnl: TPanel;\n    logSearchBox: TLabeledEdit;\n    logUpDown: TUpDown;\n    openFilteredLog: TSpeedButton;\n    collapseBtn: TSpeedButton;\n    copyBtn: TToolButton;\n    urlBox: TEdit;\n    Bevel1: TBevel;\n    enableMacrosChk: TMenuItem;\n    Donate1: TMenuItem;\n    Purge1: TMenuItem;\n    Editeventscripts1: TMenuItem;\n    maxDLsIP1: TMenuItem;\n    Maxlinesonscreen1: TMenuItem;\n    Properties1: TMenuItem;\n    N11: TMenuItem;\n    restoreCfgBtn: TToolButton;\n    N14: TMenuItem;\n    Runscript1: TMenuItem;\n    Changeport1: TMenuItem;\n    logDeletionsChk: TMenuItem;\n    showMemUsageChk: TMenuItem;\n    trayiconforeachdownload1: TMenuItem;\n    tabOnLogFileChk: TMenuItem;\n    noContentdispositionChk: TMenuItem;\n    Defaultpointtoaddfiles1: TMenuItem;\n    switchMode: TMenuItem;\n    sbar: TStatusBar;\n    connBox: TListView;\n    Reverttopreviousversion1: TMenuItem;\n    updateBtn: TToolButton;\n    delayUpdateChk: TMenuItem;\n    oemTarChk: TMenuItem;\n    procedure FormResize(Sender: TObject);\n    procedure filesBoxCollapsing(Sender: TObject; Node: TTreeNode; var AllowCollapse: Boolean);\n    procedure newfolder1Click(Sender: TObject);\n    procedure filesBoxEditing(Sender: TObject; Node: TTreeNode; var AllowEdit: Boolean);\n    procedure filesBoxEdited(Sender: TObject; Node: TTreeNode; var S: String);\n    procedure Remove1Click(Sender: TObject);\n    procedure startBtnClick(Sender: TObject);\n    procedure filesBoxChange(Sender: TObject; Node: TTreeNode);\n    procedure Kickconnection1Click(Sender: TObject);\n    procedure Kickallconnections1Click(Sender: TObject);\n    procedure KickIPaddress1Click(Sender: TObject);\n    procedure Viewhttprequest1Click(Sender: TObject);\n    procedure connmenuPopup(Sender: TObject);\n    procedure filemenuPopup(Sender: TObject);\n    procedure About1Click(Sender: TObject);\n    procedure timerEvent(Sender: TObject);\n    procedure menuPopup(Sender: TObject);\n    procedure filesBoxDblClick(Sender: TObject);\n    procedure filesBoxMouseDown(Sender: TObject; Button: TMouseButton;\n      Shift: TShiftState; X, Y: Integer);\n    procedure filesBoxCompare(Sender: TObject; Node1, Node2: TTreeNode;\n      Data: Integer; var Compare: Integer);\n    procedure foldersbeforeChkClick(Sender: TObject);\n    procedure Browseit1Click(Sender: TObject);\n    procedure Openit1Click(Sender: TObject);\n    procedure splitVMoved(Sender: TObject);\n    procedure appEventsShowHint(var HintStr: String;\n      var CanShow: Boolean; var HintInfo: THintInfo);\n    procedure logmenuPopup(Sender: TObject);\n    procedure Readonly1Click(Sender: TObject);\n    procedure Clear1Click(Sender: TObject);\n    procedure Copy1Click(Sender: TObject);\n    procedure Saveas1Click(Sender: TObject);\n    procedure Save1Click(Sender: TObject);\n    procedure Clearoptionsandquit1click(Sender: TObject);\n    procedure appEventsMinimize(Sender: TObject);\n    procedure appEventsRestore(Sender: TObject);\n    procedure Restore1Click(Sender: TObject);\n    procedure Numberofcurrentconnections1Click(Sender: TObject);\n    procedure Numberofloggeddownloads1Click(Sender: TObject);\n    procedure Numberofloggedhits1Click(Sender: TObject);\n    procedure Exit1Click(Sender: TObject);\n    procedure onDownloadChkClick(Sender: TObject);\n    procedure onconnectionChkClick(Sender: TObject);\n    procedure never1Click(Sender: TObject);\n    procedure FormShow(Sender: TObject);\n    procedure filesBoxDragOver(Sender, Source: TObject; X, Y: Integer;\n      State: TDragState; var Accept: Boolean);\n    procedure filesBoxDragDrop(Sender, Source: TObject; X, Y: Integer);\n    procedure Savefilesystem1Click(Sender: TObject);\n    procedure filesBoxDeletion(Sender: TObject; Node: TTreeNode);\n    procedure Loadfilesystem1Click(Sender: TObject);\n    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);\n    procedure Officialwebsite1Click(Sender: TObject);\n    procedure showmaintrayiconChkClick(Sender: TObject);\n    procedure Speedlimit1Click(Sender: TObject);\n    procedure tofile1Click(Sender: TObject);\n    procedure Maxconnections1Click(Sender: TObject);\n    procedure Maxconnectionsfromsingleaddress1Click(Sender: TObject);\n    procedure Forum1Click(Sender: TObject);\n    procedure FAQ1Click(Sender: TObject);\n    procedure License1Click(Sender: TObject);\n    procedure Paste1Click(Sender: TObject);\n    procedure Addfiles1Click(Sender: TObject);\n    procedure Addfolder1Click(Sender: TObject);\n    procedure graphSplitterMoved(Sender: TObject);\n    procedure Graphrefreshrate1Click(Sender: TObject);\n    procedure Pausestreaming1Click(Sender: TObject);\n    procedure Comment1Click(Sender: TObject);\n    procedure filesBoxCustomDrawItem(Sender: TCustomTreeView;\n      Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);\n    procedure Setuserpass1Click(Sender: TObject);\n    procedure browseBtnClick(Sender: TObject);\n    procedure BanIPaddress1Click(Sender: TObject);\n    procedure BannedIPaddresses1Click(Sender: TObject);\n    procedure FormKeyUp(Sender: TObject; var Key: Word;\n      Shift: TShiftState);\n    procedure Checkforupdates1Click(Sender: TObject);\n    procedure Rename1Click(Sender: TObject);\n    procedure Nodownloadtimeout1Click(Sender: TObject);\n    procedure alwaysontopChkClick(Sender: TObject);\n    procedure Showbandwidthgraph1Click(Sender: TObject);\n    procedure Pause1Click(Sender: TObject);\n    procedure MIMEtypes1Click(Sender: TObject);\n    procedure Accounts1Click(Sender: TObject);\n    procedure traymessage1Click(Sender: TObject);\n    procedure Guide1Click(Sender: TObject);\n    procedure filesBoxAddition(Sender: TObject; Node: TTreeNode);\n    procedure FormClose(Sender: TObject; var Action: TCloseAction);\n    procedure Logfile1Click(Sender: TObject);\n    procedure Font1Click(Sender: TObject);\n    procedure Newlink1Click(Sender: TObject);\n    procedure SetURL1Click(Sender: TObject);\n    procedure Resetuserpass1Click(Sender: TObject);\n    procedure Switchtovirtual1Click(Sender: TObject);\n    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);\n    procedure Loginrealm1Click(Sender: TObject);\n    procedure Introduction1Click(Sender: TObject);\n    procedure Resetfileshits1Click(Sender: TObject);\n    procedure persistentconnectionsChkClick(Sender: TObject);\n    procedure Kickidleconnections1Click(Sender: TObject);\n    procedure Connectionsinactivitytimeout1Click(Sender: TObject);\n    procedure splitHMoved(Sender: TObject);\n    procedure Clearfilesystem1Click(Sender: TObject);\n    procedure Numberofloggeduploads1Click(Sender: TObject);\n    procedure Flagfilesaddedrecently1Click(Sender: TObject);\n    procedure Flagasnew1Click(Sender: TObject);\n    procedure Donotlogaddress1Click(Sender: TObject);\n    procedure Custom1Click(Sender: TObject);\n    procedure Findexternaladdress1Click(Sender: TObject);\n    procedure sbarDblClick(Sender: TObject);\n    procedure NoIPtemplate1Click(Sender: TObject);\n    procedure Custom2Click(Sender: TObject);\n    procedure CJBtemplate1Click(Sender: TObject);\n    procedure DynDNStemplate1Click(Sender: TObject);\n    procedure Minimumdiskspace1Click(Sender: TObject);\n    procedure Banthisaddress1Click(Sender: TObject);\n    procedure Address2name1Click(Sender: TObject);\n    procedure Resetnewflag1Click(Sender: TObject);\n    procedure Renamepartialuploads1Click(Sender: TObject);\n    procedure SelfTest1Click(Sender: TObject);\n    procedure Opendirectlyinbrowser1Click(Sender: TObject);\n    procedure noPortInUrlChkClick(Sender: TObject);\n    procedure maxDLs1Click(Sender: TObject);\n    procedure MaxDLsIP1Click(Sender: TObject);\n    procedure Editresource1Click(Sender: TObject);\n    procedure modeBtnClick(Sender: TObject);\n    procedure Shellcontextmenu1Click(Sender: TObject);\n    procedure UninstallHFS1Click(Sender: TObject);\n    procedure maxIPs1Click(Sender: TObject);\n    procedure maxIPsDLing1Click(Sender: TObject);\n    procedure Autosaveevery1Click(Sender: TObject);\n    procedure CopyURL1Click(Sender: TObject);\n    procedure Apachelogfileformat1Click(Sender: TObject);\n    procedure Bindroottorealfolder1Click(Sender: TObject);\n    procedure Unbindroot1Click(Sender: TObject);\n    procedure Switchtorealfolder1Click(Sender: TObject);\n    procedure abortBtnClick(Sender: TObject);\n    procedure Seelastserverresponse1Click(Sender: TObject);\n    procedure Showcustomizedoptions1Click(Sender: TObject);\n    procedure useISOdateChkClick(Sender: TObject);\n    procedure RunHFSwhenWindowsstarts1Click(Sender: TObject);\n    procedure askFolderKindChkClick(Sender: TObject);\n    procedure defaultToVirtualChkClick(Sender: TObject);\n    procedure defaultToRealChkClick(Sender: TObject);\n    procedure Addicons1Click(Sender: TObject);\n    procedure Iconmasks1Click(Sender: TObject);\n    procedure Anyaddress1Click(Sender: TObject);\n    procedure filesBoxEndDrag(Sender, Target: TObject; X, Y: Integer);\n    procedure CopyURLwithfingerprint1Click(Sender: TObject);\n    procedure Disable1Click(Sender: TObject);\n    procedure saveNewFingerprintsChkClick(Sender: TObject);\n    procedure Createfingerprintonaddition1Click(Sender: TObject);\n    procedure Howto1Click(Sender: TObject);\n    procedure Name1Click(Sender: TObject);\n    procedure Size1Click(Sender: TObject);\n    procedure Time1Click(Sender: TObject);\n    procedure Hits1Click(Sender: TObject);\n    procedure Resettotals1Click(Sender: TObject);\n    procedure menuBtnClick(Sender: TObject);\n    procedure Clearandresettotals1Click(Sender: TObject);\n    procedure Dontlogsomefiles1Click(Sender: TObject);\n    procedure NumberofdifferentIPaddresses1Click(Sender: TObject);\n    procedure NumberofdifferentIPaddresseseverconnected1Click(Sender: TObject);\n    procedure Addresseseverconnected1Click(Sender: TObject);\n    procedure Allowedreferer1Click(Sender: TObject);\n    procedure filesBoxEnter(Sender: TObject);\n    procedure filesBoxMouseEnter(Sender: TObject);\n    procedure filesBoxMouseLeave(Sender: TObject);\n    procedure filesBoxExit(Sender: TObject);\n    procedure sbarMouseDown(Sender: TObject; Button: TMouseButton; shift: TShiftState; X, Y: Integer);\n    procedure portBtnClick(Sender: TObject);\n    procedure SwitchON1Click(Sender: TObject);\n    procedure resetOptions1Click(Sender: TObject);\n    procedure Reset1Click(Sender: TObject);\n    procedure Extension1Click(Sender: TObject);\n    procedure findExtOnStartupChkClick(Sender: TObject);\n    procedure openLogBtnClick(Sender: TObject);\n    procedure logSearchBoxKeyPress(Sender: TObject; var Key: Char);\n    procedure graphBoxPaint(Sender: TObject);\n    procedure logUpDownClick(Sender: TObject; Button: TUDBtnType);\n    procedure logSearchBoxChange(Sender: TObject);\n    procedure HideClick(Sender: TObject);\n    procedure Speedlimitforsingleaddress1Click(Sender: TObject);\n    procedure Edit1Click(Sender: TObject);\n    procedure Restoredefault1Click(Sender: TObject);\n    procedure Changefile1Click(Sender: TObject);\n    procedure Changeeditor1Click(Sender: TObject);\n    procedure expandBtnClick(Sender: TObject);\n    procedure collapseBtnClick(Sender: TObject);\n    procedure copyBtnClick(Sender: TObject);\n    procedure urlBoxChange(Sender: TObject);\n    procedure enableMacrosChkClick(Sender: TObject);\n    procedure Donate1Click(Sender: TObject);\n    procedure Purge1Click(Sender: TObject);\n    procedure Editeventscripts1Click(Sender: TObject);\n    procedure Maxlinesonscreen1Click(Sender: TObject);\n    procedure Properties1Click(Sender: TObject);\n    procedure filesBoxMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);\n    procedure restoreCfgBtnClick(Sender: TObject);\n    procedure Runscript1Click(Sender: TObject);\n    procedure logBoxChange(Sender: TObject);\n    procedure logBoxMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);\n    procedure Changeport1Click(Sender: TObject);\n    procedure trayiconforeachdownload1Click(Sender: TObject);\n    procedure Defaultpointtoaddfiles1Click(Sender: TObject);\n    function appEventsHelp(Command: Word; Data: Integer;\n      var CallHelp: Boolean): Boolean;\n    procedure connBoxData(Sender: TObject; Item: TListItem);\n    procedure connBoxAdvancedCustomDrawSubItem(Sender: TCustomListView;\n      Item: TListItem; SubItem: Integer; State: TCustomDrawState;\n      Stage: TCustomDrawStage; var DefaultDraw: Boolean);\n    procedure Reverttopreviousversion1Click(Sender: TObject);\n    procedure updateBtnClick(Sender: TObject);\n    procedure FormCreate(Sender: TObject);\n  private\n    function searchLog(dir:integer):boolean;\n    function  getGraphPic(cd:TconnData=NIL): ansistring;\n    procedure WMDropFiles(var msg:TWMDropFiles);\n      message WM_DROPFILES;\n    procedure WMQueryEndSession(var msg:TWMQueryEndSession);\n      message WM_QUERYENDSESSION;\n    procedure WMEndSession(var msg:TWMEndSession);\n      message WM_ENDSESSION;\n    procedure WMNCLButtonDown(var msg:TWMNCLButtonDown);\n      message WM_NCLBUTTONDOWN;\n    procedure trayEvent(sender:Tobject; ev:TtrayEvent);\n    procedure downloadtrayEvent(sender:Tobject; ev:TtrayEvent);\n    procedure httpEvent(event:ThttpEvent; conn:ThttpConn);\n    function  addFileRecur(f:Tfile; parent:Ttreenode=NIL):Tfile;\n    function  pointedFile(strict:boolean=TRUE):Tfile;\n    function  pointedConnection():TconnData;\n    procedure updateSbar();\n    function  getFolderPage(folder:Tfile; cd:TconnData; otpl:Tobject):string;\n    procedure getPage(sectionName:string; data:TconnData; f:Tfile=NIL; tpl2use:Ttpl=NIL);\n    function  selectedConnection():TconnData;\n    function  sendPic(cd:TconnData; idx:integer=-1):boolean;\n    procedure ipmenuclick(sender:Tobject);\n    procedure acceptOnMenuclick(sender:Tobject);\n    procedure copyURLwithAddressMenuClick(sender:Tobject);\n    procedure copyURLwithPasswordMenuClick(sender:Tobject);\n    procedure updateTrayTip();\n    procedure updateCopyBtn();\n    procedure setTrayShows(s:string);\n    procedure addTray();\n    procedure refreshConn(conn:TconnData);\n    function  getVFS(node:Ttreenode=NIL):ansistring;\n    procedure setVFS(vfs:ansistring; node:Ttreenode=NIL);\n    procedure setnoDownloadTimeout(v:integer);\n\t\tprocedure addDropFiles(hnd:Thandle; under:Ttreenode);\n    procedure pasteFiles();\n\t\tfunction  addFilesFromString(files:string; under:Ttreenode=NIL):Tfile;\n\t\tprocedure setGraphRate(v:integer);\n    procedure updateRecentFilesMenu();\n    procedure recentsClick(sender:Tobject);\n    procedure popupMainMenu();\n    procedure updateAlwaysOnTop();\n    procedure initVFS();\n\t\tprocedure refreshIPlist();\n\t\tprocedure updateUrlBox();\n    procedure loadVFS(fn:string);\n    procedure compressReply(cd:TconnData);\n    procedure purgeConnections();\n    procedure setEasyMode(easy:boolean=TRUE);\n    procedure hideGraph();\n    procedure showGraph();\n    function  fileAttributeInSelection(fa:TfileAttribute):boolean;\n    procedure progFrmHttpGetUpdate(sender:TObject; buffer:pointer; Len:integer);\n    procedure recalculateGraph();\n public\n    procedure remove(node:Ttreenode=NIL);\n    function  setCfg(cfg:string; alreadyStarted:boolean=TRUE):boolean;\n    function  getCfg(exclude:string=''):string;\n    function  saveCFG():boolean;\n    function  addFile(f:Tfile; parent:Ttreenode=NIL; skipComment:boolean=FALSE):Tfile;\n    procedure add2log(lines:string; cd:TconnData=NIL; clr:Tcolor=Graphics.clDefault);\n    function  findFilebyURL(url:string; parent:Tfile=NIL; allowTemp:boolean=TRUE):Tfile;\n    function  ipPointedInLog():string;\n    procedure saveVFS(fn:string='');\n    function  finalInit():boolean;\n    procedure processParams_after(var params:TStringDynArray);\n    procedure setStatusBarText(s:string; lastFor:integer=5);\n    procedure minimizeToTray();\n    procedure autoCheckUpdates();\n    function  copySelection():TtreeNodeDynArray;\n    procedure setLogToolbar(v:boolean);\n    function  getTrayTipMsg(tpl:string=''):string;\n    procedure menuDraw(sender:Tobject; cnv: Tcanvas; r:Trect; selected:boolean);\n    procedure menuMeasure(sender:Tobject; cnv: Tcanvas; var w:integer; var h:integer);\n    procedure wrapInputQuery(sender:Tobject);\n  end; // Tmainfrm\n\nconst\n  FILEACTION2STR: array [TfileAction] of string = ('Access', 'Delete', 'Upload');\n\nvar\n  mainFrm: TmainFrm;\n  srv: ThttpSrv;\n  tpl: Ttpl; // template for generated pages\n  customIPs: TStringDynArray;   // user customized IP addresses\n  iconMasks: TstringIntPairs;\n  ipsEverConnected: THashedStringList;\n  easyMode: boolean = TRUE;\n  defaultIP: string;    // the IP address to use forming URLs\n  rootNode: TtreeNode;\n  rootFile: Tfile;\n  noReplyBan: boolean;\n  exePath: string;\n  externalIP: string;\n  banlist: array of record ip,comment:string; end;\n  trayMsg: string; // template for the tray hint\n  customIPservice: string;\n  accounts: Taccounts;\n  tplFilename: string; // when empty, we are using the default tpl\n  trayNL: string = #13;\n  mimeTypes, address2name, IPservices: TstringDynArray;\n  IPservicesTime: TdateTime;\n  selectedFile: Tfile;  // last selected file on the tree\n  inBrowserIfMIME: boolean;\n  VFSmodified: boolean; // TRUE if the VFS changes have not been saved\n  tempScriptFilename: string;\n  uploadPaths: TstringDynArray;\n  inTotalOfs, outTotalOfs: int64; // used to cumulate in/out totals\n  hitsLogged, downloadsLogged, uploadsLogged: integer;\n  lastFileOpen: string;\n  minDiskSpace: int64; // in MB. an int32 would suffice, but an int64 will save us\n  speedLimit: real;            // overall limit, Kb/s --- it virtualizes the value of globalLimiter.maxSpeed, that's actually set to zero when streaming is paused\n  currentCFG: string;\n  currentCFGhashed: THashedStringList;\n  saveMode: ( SM_USER, SM_SYSTEM, SM_FILE );\n  tray: TmyTrayicon;\n  dyndns: record\n    url, lastResult, lastIP: string;\n    user, pwd, host: string;\n    active: boolean;\n    lastTime: Tdatetime;\n    end;\n\nprocedure showOptions(page:TtabSheet);\nprocedure kickBannedOnes();\nprocedure repaintTray();\nfunction paramsAsArray():TStringDynArray;\nprocedure processParams_before(var params:TStringDynArray; allowed:string='');\nfunction loadCfg(var ini,tpl:string):boolean;\nfunction idx_img2ico(i:integer):integer;\nfunction idx_ico2img(i:integer):integer;\nfunction idx_label(i:integer):string;\nfunction findEnabledLinkedAccount(account:Paccount; over:TStringDynArray; isSorted:boolean=FALSE):Paccount;\nfunction getImageIndexForFile(fn:string):integer;\nfunction conn2data(i:integer):TconnData; inline; overload;\nfunction uptimestr():string;\nfunction countIPs(onlyDownloading:boolean=FALSE; usersInsteadOfIps:boolean=FALSE):integer;\nfunction getSafeHost(cd:TconnData):string;\nfunction localDNSget(ip:string):string;\nfunction countDownloads(ip:string=''; user:string=''; f:Tfile=NIL):integer;\nfunction accountAllowed(action:TfileAction; cd:TconnData; f:Tfile):boolean;\nfunction getAccountList(users:boolean=TRUE; groups:boolean=TRUE):TstringDynArray;\nfunction fileExistsByURL(url:string):boolean;\nfunction createFingerprint(fn:string):string;\nfunction objByIP(ip:string):TperIp;\nfunction protoColon():string;\nprocedure setSpeedLimitIP(v:real);\nprocedure stopServer();\nfunction startServer():boolean;\nfunction deleteAccount(name:string):boolean;\n\nimplementation\n\n{$R *.dfm}\n{$R data.res}\n\nuses\n  newuserpassDlg, optionsDlg, utilLib, folderKindDlg, shellExtDlg, diffDlg, ipsEverDlg, parserLib, MMsystem,\n  purgeDlg, filepropDlg, runscriptDlg, scriptLib, System.Hash;\n\n// global variables\nvar\n  globalLimiter: TspeedLimiter;\n  ip2obj: THashedStringList;\n  sessions: Tsessions;\n  addToFolder: string; // default folder where to add items from the command line\n  lastDialogFolder: string;  // stores last for open dialog, to make it persistent\n  clock: integer;       // program ticks (tenths of second)\n  // workaround for splitters' bad behaviour\n  lastGoodLogWidth, lastGoodConnHeight: integer;\n  etags: THashedStringList;\n  tray_ico: Ticon;             // the actual icon shown in tray\n  usingFreePort: boolean=TRUE; // the actual server port set was 0\n  upTime: Tdatetime;           // the server is up since...\n  trayed: boolean;             // true if the window has been minimized to tray\n  trayShows: string;           // describes the content of the tray icon\n  flashOn: string;             // describes when to flash the taskbar\n  addFolderDefault: string;    // how to default adding a folder (real/virtual)\n  defSorting: string;          // default sorting, browsing\n  toDelete: Tlist;             // connections pending for deletion\n  systemimages: Timagelist;    // system icons\n  speedLimitIP: real;\n  maxConnections: integer;     // max number of connections (total)\n  maxConnectionsIP: integer;   // ...from a single address\n  maxContempDLs: integer;      // max number of contemporaneous downloads\n  maxContempDLsIP: integer;    // ...from a single address\n  maxContempDLsUser: integer;  // ...from a single user\n  maxIPs: integer;             // max number of different addresses connected\n  maxIPsDLing: integer;        // max number of different addresses downloading\n  autoFingerprint: integer;    // create fingerprint on file addition\n  renamePartialUploads: string;\n  allowedReferer: string;      // check over the Refer header field\n  altPressedForMenu: boolean;  // used to enable the menu on ALT key\n  noDownloadTimeout: integer;  // autoclose the application after (minutes)\n  connectionsInactivityTimeout: integer; // autokick connection after (seconds)\n  startingImagesCount: integer;\n  lastUpdateCheck, lastFilelistTpl: Tdatetime;\n  lastUpdateCheckFN: string;   // eventual temp file for saving lastUpdateCheck\n  lastActivityTime: Tdatetime;  // used for the \"no download timeout\"\n  recentFiles: TStringDynArray; // recently loaded files\n  addingItemsCounter: integer = -1; // -1 is disabled\n  stopAddingItems, queryingClose: boolean;\n  port: string;\n  defaultTpl: string;\n  lastWindowRect: Trect;\n  dmBrowserTpl, filelistTpl: Ttpl;\n  tplEditor: string;\n  tplLast: Tdatetime;\n  tplImport: boolean;\n  eventScriptsLast, runScriptLast: Tdatetime;\n  autoupdatedFiles: TstringToIntHash;   // download counter for temp Tfile.s\n  iconsCache: TiconsCache;\n  usersInVFS: TusersInVFS;    // keeps track of user/pwd in the VFS\n  progFrm: TprogressForm;\n  graphInEasyMode: boolean;\n  cfgPath, tmpPath: string;\n  logMaxLines: integer;     // number of lines\n  windowsShuttingDown: boolean = FALSE;\n  dontLogAddressMask: string;\n  openInBrowser: string; // to not send the \"attachment\" suggestion in header\n  quitASAP: boolean;  // deferred quit\n  quitting: boolean; // ladies, we're quitting\n  scrollFilesBox: integer = -1;\n  defaultCfg: string;\n  selfTesting: boolean;\n  tplIsCustomized: boolean;\n  fakingMinimize: boolean; // user clicked the [X] but we simulate the [_]\n  loginRealm: string;\n  serializedConnColumns: string;\n  VFScounterMod: boolean; // if any counter has changed\n  imagescache: array of ansistring;\n  logFontName: string;\n  logFontSize: integer;\n  forwardedMask: string;\n  applicationFullyInitialized: boolean;\n  lockTimerevent: boolean;\n  filesStayFlaggedForMinutes: integer;\n  autosaveVFS: Tautosave;\n  logRightClick: Tpoint;\n  warnManyItems: boolean = TRUE;\n  runningOnRemovable: boolean;\n  startupFilename: string;\n  trustedFiles, filesToAddQ: TstringDynArray;\n  setThreadExecutionState: function(d:dword):dword; stdcall; // as variable, because not available on Win95\n  listenOn: string;  // interfaces HFS should listen on\n  backuppedCfg: string;\n  updateASAP: string;\n  refusedUpdate: string;\n  updateWaiting: string;\n  filesBoxRatio: real;\n  fromTray: boolean; // used to notify about an eventy happening from a tray action\n  userInteraction: record\n    disabled: boolean;\n    bakVisible: boolean;  // backup value for mainFrm.visible\n    end;\n  logFile: record\n    filename: string;\n    apacheFormat: string;\n    apacheZoneString: string;\n    end;\n  loadingVFS: record\n    resetLetBrowse, unkFK, disableAutosave, visOnlyAnon, bakAvailable, useBackup, macrosFound: boolean;\n    build: string;\n    end;\n  lastDiffTpl: record\n    f: Tfile;\n    ofs: integer;\n    end;\n  userIcsBuffer, userSocketBuffer: integer;\n  searchLogTime, searchLogWhiteTime, timeTookToSearchLog: TdateTime;\n  sbarTextTimeout: Tdatetime;\n  sbarIdxs: record  // indexes within the statusbar\n    totalIn, totalOut, banStatus, customTpl, oos, out, notSaved: integer;\n    end;\n  graph: record\n  \trate: integer;    // update speed\n    lastOut, lastIn: int64; // save bytesSent and bytesReceived last values\n    maxV: integer;    // max value in scale\n    size: integer;    // height of the box\n    samplesIn, samplesOut: array [0..3000] of integer; // 1 sample, 1 pixel\n    beforeRecalcMax: integer;  // countdown\n    end;\n\nfunction deleteAccount(name:string):boolean;\nvar\n  i, j, n: integer;\nbegin\nn:=length(accounts);\n// search\nfor i:=0 to n-1 do\n  if sameText(name, accounts[i].user) then // found\n    begin\n    // shift\n    for j:=i to n-2 do\n      accounts[j]:=accounts[j+1];\n    // shrink\n    setLength(accounts, n-1);\n    // aftermaths\n    purgeVFSaccounts();\n    mainfrm.filesBox.repaint();\n    result:=TRUE;\n    exit;\n    end;\nresult:=FALSE;\nend; // deleteAccount\n\nfunction isCommentFile(fn:string):boolean;\nbegin\nresult:=(fn=COMMENTS_FILE)\n  or mainfrm.loadSingleCommentsChk.checked and isExtension(fn, COMMENT_FILE_EXT)\n  or mainfrm.supportDescriptionChk.checked and sameText(DESCRIPT_ION,fn)\nend; // isCommentFile\n\nfunction isFingerprintFile(fn:string):boolean;\nbegin\nresult:=mainfrm.fingerprintsChk.checked and isExtension(fn, '.md5')\nend; // isFingerprintFile\n\ntype\n  TaccountRecursionStopCase = (ARSC_REDIR, ARSC_NOLIMITS, ARSC_IN_SET);\n\n// this function follows account linking until it finds and returns the account matching the stopCase\nfunction accountRecursion(account:Paccount; stopCase:TaccountRecursionStopCase; data:pointer=NIL; data2:pointer=NIL):Paccount;\n\n  function shouldStop():boolean;\n  begin\n  case stopCase of\n    ARSC_REDIR: result:=account.redir > '';\n    ARSC_NOLIMITS: result:=account.noLimits;\n    ARSC_IN_SET: result:=stringExists(account.user, TstringDynArray(data), boolean(data2));\n    else result:=FALSE;\n    end;\n  end;\n\nvar\n  tocheck: TStringDynArray;\n  i: integer;\nbegin\nresult:=NIL;\nif (account = NIL) or not account.enabled then exit;\nif shouldStop() then\n  begin\n  result:=account;\n  exit;\n  end;\ni:=0;\ntoCheck:=account.link;\nwhile i < length(toCheck) do\n  begin\n  account:=getAccount(toCheck[i], TRUE);\n  inc(i);\n  if (account = NIL) or not account.enabled then continue;\n  if shouldStop() then\n    begin\n    result:=account;\n    exit;\n    end;\n  addUniqueArray(toCheck, account.link);\n  end;\nend; // accountRecursion\n\nfunction findEnabledLinkedAccount(account:Paccount; over:TStringDynArray; isSorted:boolean=FALSE):Paccount;\nbegin result:=accountRecursion(account, ARSC_IN_SET, over, boolToPtr(isSorted)) end;\n\nfunction noLimitsFor(account:Paccount):boolean;\nbegin\naccount:=accountRecursion(account, ARSC_NOLIMITS);\nresult:=assigned(account) and account.noLimits;\nend; // noLimitsFor\n\nfunction accountAllowed(action:TfileAction; cd:TconnData; f:Tfile):boolean;\nvar\n  a: TStringDynArray;\nbegin\nresult:=FALSE;\nif f = NIL then exit;\nif action = FA_ACCESS then\n  begin\n  result:=f.accessFor(cd);\n  exit;\n  end;\nif f.isTemp() then\n  f:=f.parent;\nif (action = FA_UPLOAD) and not f.isRealFolder() then exit;\n\n  repeat\n  a:=f.accounts[action];\n  if assigned(a)\n  and not ((action = FA_UPLOAD) and not f.isRealFolder()) then break;\n  f:=f.parent;\n  if f = NIL then exit;\n  until false;\n\nresult:=TRUE;\nif stringExists(USER_ANYONE, a, TRUE) then exit;\nresult:=(cd.user = '') and stringExists(USER_ANONYMOUS, a, TRUE)\n  or assigned(cd.account) and stringExists(USER_ANY_ACCOUNT, a, TRUE)\n  or (NIL <> findEnabledLinkedAccount(cd.account, a, TRUE));\nend; // accountAllowed\n\nfunction hasRightAttributes(attr:integer):boolean; overload;\nbegin\nresult:=(mainfrm.listfileswithhiddenattributeChk.checked or (attr and faHidden = 0))\n  and (mainfrm.listfileswithsystemattributeChk.checked or (attr and faSysFile = 0));\nend; // hasRightAttributes\n\nfunction hasRightAttributes(fn:string):boolean; overload;\nbegin result:=hasRightAttributes(GetFileAttributes(pChar(fn))) end;\n\nfunction isAnyMacroIn(s:ansistring):boolean; inline;\nbegin result:=pos(ansistring(MARKER_OPEN), s) > 0 end;\n\nfunction loadDescriptionFile(fn:string):string;\nbegin\nresult:=loadTextFile(fn);\nif result = '' then\n  result:=loadTextFile(fn+'\\'+DESCRIPT_ION);\nif (result > '') and mainfrm.oemForIonChk.checked then\n  OEMToCharBuff(@result[1], @result[1], length(result)); //to test\nend; // loadDescriptionFile\n\nfunction escapeIon(s:string):string;\nbegin\n// this escaping method (and also the 2-bytes marker) was reverse-engineered from Total Commander\nresult:=escapeNL(s);\nif result <> s then\n  result:=result+#4#$C2;\nend; // escapeIon\n\nfunction unescapeIon(s:string):string;\nbegin\nif ansiEndsStr(#4#$C2, s) then\n  begin\n  setLength(s, length(s)-2);\n  s:=unescapeNL(s);\n  end;\nresult:=s;\nend; // unescapeIon\n\nfunction findNameInDescriptionFile(txt, name:string):integer;\nbegin result:=reMatch(txt, '^'+quoteRegExprMetaChars(quoteIfAnyChar(' ',name)), 'mi') end;\n\ntype\n  TfileListing = class\n  public\n    dir: array of Tfile;\n    ignoreConnFilter: boolean;\n    constructor create();\n    destructor Destroy; override;\n    function fromFolder(folder:Tfile; cd:TconnData; recursive:boolean=FALSE;\n      limit:integer=-1; toSkip:integer=-1; doClear:boolean=TRUE):integer;\n    procedure sort(cd:TconnData; def:string='');\n    end;\n\nconstructor TfileListing.create();\nbegin\ndir:=NIL;\nend; // create\n\ndestructor TfileListing.destroy;\nvar\n  i: integer;\nbegin\nfor i:=0 to length(dir)-1 do\n  freeIfTemp(dir[i]);\ninherited destroy;\nend; // destroy\n\nprocedure TfileListing.sort(cd:TconnData; def:string='');\nvar\n  foldersBefore, linksBefore, rev: boolean;\n  sortBy: ( SB_NAME, SB_EXT, SB_SIZE, SB_TIME, SB_DL, SB_COMMENT );\n\n  function compareExt(f1,f2:string):integer;\n  begin result:=ansiCompareText(extractFileExt(f1), extractFileExt(f2)) end;\n\n  function compareFiles(item1,item2:pointer):integer;\n  var\n    f1, f2:Tfile;\n  begin\n  f1:=item1;\n  f2:=item2;\n  if linksBefore and (f1.isLink() <> f2.isLink()) then\n    begin\n    if f1.isLink() then result:=-1\n    else result:=+1;\n    exit;\n    end;\n  if foldersBefore and (f1.isFolder() <> f2.isFolder()) then\n    begin\n    if f1.isFolder() then result:=-1\n    else result:=+1;\n    exit;\n    end;\n  result:=0;\n  case sortby of\n    SB_SIZE: result:=compare_(f1.size, f2.size);\n    SB_TIME: result:=compare_(f1.mtime, f2.mtime);\n    SB_DL: result:=compare_(f1.DLcount, f2.DLcount);\n    SB_EXT:\n      if not f1.isFolder() and not f2.isFolder() then\n        result:=compareExt(f1.name, f2.name);\n    SB_COMMENT: result:=ansiCompareText(f1.comment, f2.comment);\n    end;\n  if result = 0 then // this happen both for SB_NAME and when other comparisons result in no difference\n    result:=ansiCompareText(f1.name,f2.name);\n  if rev then result:=-result;\n  end; // compareFiles\n\n  procedure qsort(left, right:integer);\n  var\n    split, t: Tfile;\n    i, j: integer;\n  begin\n  if left >= right then exit;\n  application.ProcessMessages();\n  if cd.conn.state = HCS_DISCONNECTED then exit;\n\n  i:=left;\n  j:=right;\n  split:=dir[(i+j) div 2];\n    repeat\n    while compareFiles(dir[i], split) < 0 do inc(i);\n    while compareFiles(split, dir[j]) < 0 do dec(j);\n    if i <= j then\n      begin\n      t:=dir[i];\n      dir[i]:=dir[j];\n      dir[j]:=t;\n\n      inc(i);\n      dec(j);\n      end\n    until i > j;\n  if left < j then qsort(left, j);\n  if i < right then qsort(i, right);\n  end; // qsort\n\n  procedure check1(var flag:boolean; val:string);\n  begin if val > '' then flag:=val='1' end;\n\nvar\n  v: string;\nbegin\n// caching\nfoldersBefore:=mainfrm.foldersBeforeChk.checked;\nlinksBefore:=mainfrm.linksBeforeChk.checked;\n\nv:=first([def, defSorting, 'name']);\nrev:=FALSE;\nif assigned(cd) then\n  with cd.urlvars do\n    begin\n    v:=first(values['sort'], v);\n    rev:=values['rev'] = '1';\n\n    check1(foldersBefore, values['foldersbefore']);\n    check1(linksBefore, values['linksbefore']);\n    end;\nif v[1]='!' then\n  begin\n  delete(v, 1,1);\n  rev:=not rev;\n  end;\nif v = '' then exit;\ncase v[1] of\n  'n': sortBy:=SB_NAME;\n  'e': sortBy:=SB_EXT;\n  's': sortBy:=SB_SIZE;\n  't': sortBy:=SB_TIME;\n  'd': sortBy:=SB_DL;\n  'c': sortBy:=SB_COMMENT;\n  else exit; // unsupported value\n  end;\nqsort( 0, length(dir)-1 );\nend; // sort\n\nprocedure loadIon(path:string; comments:TstringList);\nvar\n  s, l, fn: string;\nbegin\nif not mainfrm.supportDescriptionChk.checked then exit;\ns:=loadDescriptionFile(path);\nwhile s > '' do\n  begin\n  l:=chopLine(s);\n  if l = '' then continue;\n  fn:=chop(nonQuotedPos(' ', l), l);\n  comments.add(dequote(fn)+'='+trim(unescapeIon(l)));\n  end;\nend; // loadIon\n\n// returns number of skipped files\nfunction TfileListing.fromFolder(folder:Tfile; cd:TconnData;\n  recursive:boolean=FALSE; limit:integer=-1; toSkip:integer=-1; doClear:boolean=TRUE):integer;\nvar\n  actualCount: integer;\n  seeProtected, noEmptyFolders, forArchive: boolean;\n  filesFilter, foldersFilter, urlFilesFilter, urlFoldersFilter: string;\n\n  procedure recurOn(f:Tfile);\n  begin\n  if not f.isFolder() then exit;\n  setLength(dir, actualCount);\n  toSkip:=fromFolder(f, cd, TRUE, limit, toSkip, FALSE);\n  actualCount:=length(dir);\n  end; // recurOn\n\n  procedure addToListing(f:Tfile);\n  begin\n  if noEmptyFolders and f.isEmptyFolder(cd)\n  and not accountAllowed(FA_UPLOAD, cd, f) then exit; // upload folders should be listed anyway\n  application.ProcessMessages();\n  if cd.conn.state = HCS_DISCONNECTED then exit;\n\n  if toSkip > 0 then dec(toSkip)\n  else\n    begin\n    if actualCount >= length(dir) then\n      setLength(dir, actualCount+100);\n    dir[actualCount]:=f;\n    inc(actualCount);\n    end;\n\n  if recursive and f.isFolder() then\n    recurOn(f);\n  end; // addToListing\n\n  function allowedTo(f:Tfile):boolean;\n  begin\n  if cd = NIL then result:=FALSE\n  else result:=(not (FA_VIS_ONLY_ANON in f.flags) or (cd.user = ''))\n    and (seeProtected or f.accessFor(cd))\n    and not (forArchive and f.isDLforbidden())\n  end; // allowedTo\n\n  procedure includeFilesFromDisk();\n  var\n    comments: THashedStringList;\n    commentMasks: TStringDynArray;\n\n    // moves to \"commentMasks\" comments with a filemask as filename\n    procedure extractCommentsWithWildcards();\n    var\n      i: integer;\n      s: string;\n    begin\n    i:=0;\n    while i < comments.count do\n      begin\n      s:=comments.names[i];\n      if ansiContainsStr(s, '?')\n      or ansiContainsStr(s, '*') then\n        begin\n        addString(comments[i], commentMasks);\n        comments.Delete(i);\n        end\n      else\n        inc(i);\n      end;\n    end; // extractCommentsWithWildcards\n\n    // extract comment for \"fn\" from \"commentMasks\"\n    function getCommentByMaskFor(fn:string):string;\n    var\n      i: integer;\n      s, mask: string;\n    begin\n    for i:=0 to length(commentMasks)-1 do\n      begin\n      s:=commentMasks[i];\n      mask:=chop('=', s);\n      if fileMatch(mask, fn) then\n        begin\n        result:=s;\n        exit;\n        end;\n      end;\n    result:='';\n    end; // getCommentByMaskFor\n\n    procedure setBit(var i:integer; bits:integer; flag:boolean); inline;\n    begin\n    if flag then i:=i or bits\n    else i:=i and not bits;\n    end; // setBit\n\n{**\n\nthis would let us have \"=\" inside the names, but names cannot be assigned\n\n    procedure fixQuotedStringList(sl:Tstrings);\n    var\n      i: integer;\n      s: string;\n    begin\n    for i:=0 to sl.count-1 do\n      begin\n      s:=sl.names[i];\n      if (s = '') or (s[1] <> '\"') then continue;\n      s:=s+'='+sl.ValueFromIndex[i]; // reconstruct the line\n      sl.names[i]:=chop(nonQuotedPos('=', s), s);\n      sl.ValueFromIndex[i]:=s;\n      end;\n    end;\n}\n  var\n    f: Tfile;\n    sr: TSearchRec;\n    namesInVFS: TStringDynArray;\n    n: TtreeNode;\n    filteredOut: boolean;\n    i: integer;\n  begin\n  if (limit >= 0) and (actualCount >= limit) then exit;\n\n  // collect names in the VFS at this level. supposed to be faster than existsNodeWithName().\n  namesInVFS:=NIL;\n  n:=folder.node.getFirstChild();\n  while assigned(n) do\n    begin\n    addString(n.text, namesInVFS);\n    n:=n.getNextSibling();\n    end;\n\n  comments:=THashedStringList.create();\n  try\n    comments.caseSensitive:=FALSE;\n    try comments.loadFromFile(folder.resource+'\\'+COMMENTS_FILE);\n    except end;\n    loadIon(folder.resource, comments);\n    i:=if_((filesFilter='\\') or (urlFilesFilter='\\'), faDirectory, faAnyFile);\n    setBit(i, faSysFile, mainFrm.listfileswithsystemattributeChk.checked);\n    setBit(i, faHidden, mainFrm.listfileswithHiddenAttributeChk.checked);\n    if findfirst(folder.resource+'\\*', i, sr) <> 0 then exit;\n\n    try\n      extractCommentsWithWildcards();\n        repeat\n        application.ProcessMessages();\n        cd.lastActivityTime:=now();\n        // we don't list these entries\n        if (sr.name = '.') or (sr.name = '..')\n        or isCommentFile(sr.name) or isFingerprintFile(sr.name) or sameText(sr.name, DIFF_TPL_FILE)\n        or not hasRightAttributes(sr.attr)\n        or stringExists(sr.name, namesInVFS)\n        then continue;\n\n        filteredOut:=not fileMatch( if_(sr.Attr and faDirectory > 0, foldersFilter, filesFilter), sr.name)\n          or not fileMatch( if_(sr.Attr and faDirectory > 0, urlFoldersFilter, urlFilesFilter), sr.name);\n        // if it's a folder, though it was filtered, we need to recur\n        if filteredOut and (not recursive or (sr.Attr and faDirectory = 0)) then continue;\n\n        f:=Tfile.createTemp( folder.resource+'\\'+sr.name );\n        f.node:=folder.node; // temporary nodes are bound to the parent's node\n        if (FA_SOLVED_LNK in f.flags) and f.isFolder() then\n          // sorry, but we currently don't support lnk to folders in real-folders\n          begin\n          f.free;\n          continue;\n          end;\n        if filteredOut then\n          begin\n          recurOn(f);\n          // possible children added during recursion are linked back through the node field, so we can safely free the Tfile\n          f.free;\n          continue;\n          end;\n\n        f.comment:=comments.values[sr.name];\n        if f.comment = '' then\n          f.comment:=getCommentByMaskFor(sr.name);\n        f.comment:=macroQuote(unescapeNL(f.comment));\n\n        f.size:=0;\n        if f.isFile() then\n          if FA_SOLVED_LNK in f.flags then\n            begin\n            f.size:=sizeOfFile(f.resource);\n            if f.size < 0 then // doesn't exist\n              begin\n              f.free;\n              continue;\n              end\n            end\n          else\n            f.size:=sr.FindData.nFileSizeLow\n              +int64(sr.FindData.nFileSizeHigh) shl 32;\n        f.mtime:=filetimeToDatetime(sr.FindData.ftLastWriteTime);\n        addToListing(f);\n        until (findNext(sr) <> 0) or (cd.conn.state = HCS_DISCONNECTED) or (limit >= 0) and (actualCount >= limit);\n    finally findClose(sr) end;\n  finally comments.free  end\n  end; // includeFilesFromDisk\n\n  procedure includeItemsFromVFS();\n  var\n    f: Tfile;\n    sr: TSearchRec;\n    n: Ttreenode;\n  begin\n  { this folder has been dinamically generated, thus the node is not actually\n  { its own... skip }\n  if folder.isTemp() then exit;\n\n  // include (valid) items from the VFS branch\n  n:=folder.node.getFirstChild();\n  while assigned(n) and (cd.conn.state <> HCS_DISCONNECTED)\n  and ((limit < 0) or (actualCount < limit)) do\n    begin\n    cd.lastActivityTime:=now();\n\n    f:=n.data;\n    n:=n.getNextSibling();\n\n    // watching not allowed, to anyone\n    if (FA_HIDDEN in f.flags) or (FA_HIDDENTREE in f.flags) then continue;\n\n    // filtered out\n    if not fileMatch( if_(f.isFolder(), foldersfilter, filesfilter), f.name)\n    or not fileMatch( if_(f.isFolder(), urlFoldersfilter, urlFilesfilter), f.name)\n    // in this case we must continue recurring: other virtual items may be contained in this real folder, and this flag doesn't apply to them.\n    or (forArchive and f.isRealFolder() and (FA_DL_FORBIDDEN in f.flags)) then\n      begin\n      if recursive then recurOn(f);\n      continue;\n      end;\n\n    if not allowedTo(f) then continue;\n\n    if FA_VIRTUAL in f.flags then // links and virtual folders are virtual\n      begin\n      addToListing(f);\n      continue;\n      end;\n    if FA_UNIT in f.flags then\n      begin\n      if sysutils.directoryExists(f.resource+'\\') then\n        addToListing(f);\n      continue;\n      end;\n\n    // try to get more info about this item\n    if findFirst(f.resource, faAnyFile, sr) = 0 then\n      begin\n      try\n        // update size and time\n        with sr.FindData do f.size:=nFileSizeLow+int64(nFileSizeHigh) shl 32;\n        try f.mtime:=filetimeToDatetime(sr.FindData.ftLastWriteTime);\n        except f.mtime:=0 end;\n      finally findClose(sr) end;\n      if not hasRightAttributes(sr.attr) then continue;\n      end\n    else // why findFirst() failed? is it a shared folder?\n      if not sysutils.directoryExists(f.resource) then continue;\n    addToListing(f);\n    end;\n  end; // includeItemsFromVFS\n\n  function beginsOrEndsBy(ss:string; s:string):boolean;\n  begin result:=ansiStartsText(ss,s) or ansiEndsText(ss,s) end;\n\n  function par(k:string):string;\n  begin if cd = NIL then result:='' else result:=cd.urlvars.values[k] end;\n\nbegin\nresult:=toSkip;\nif doClear then dir:=NIL;\n\nif not folder.isFolder()\nor not folder.accessFor(cd)\nor folder.hasRecursive(FA_HIDDENTREE)\nor not (FA_BROWSABLE in folder.flags)\nthen exit;\n\nif assigned(cd) then\n  begin\n  if limit < 0 then\n    limit:=StrToIntDef(par('limit'), -1);\n  if toSkip < 0 then\n    toSkip:=StrToIntDef(par('offset'), -1);\n  if toSkip < 0 then\n    toSkip:=max(0, pred(strToIntDef(par('page'), 1))*limit);\n  end;\n\nactualCount:=length(dir);\nfolder.getFiltersRecursively(filesFilter, foldersFilter);\nif assigned(cd) and not ignoreConnFilter then\n  begin\n  urlFilesFilter:=par('files-filter');\n  if urlFilesFilter = '' then urlFilesFilter:=par('filter');\n  urlFoldersFilter:=par('folders-filter');\n  if urlFoldersFilter = '' then urlFoldersFilter:=par('filter');\n  if (urlFilesFilter+urlFoldersFilter = '') and (par('search') > '') then\n    begin\n    urlFilesFilter:=reduceSpaces(par('search'), '*');\n    if not beginsOrEndsBy('*', urlFilesFilter) then\n      urlFilesFilter:='*'+urlFilesFilter+'*';\n    urlFoldersFilter:=urlFilesFilter;\n    end;\n  end;\n// cache user options\nforArchive:=assigned(cd) and (cd.downloadingWhat = DW_ARCHIVE);\nseeProtected:=not mainfrm.hideProtectedItemsChk.Checked and not forArchive;\nnoEmptyFolders:=(urlFilesFilter = '') and folder.hasRecursive(FA_HIDE_EMPTY_FOLDERS);\ntry\n  if folder.isRealFolder() and not (FA_HIDDENTREE in folder.flags) and allowedTo(folder) then\n    includeFilesFromDisk();\n  includeItemsFromVFS();\nfinally setLength(dir, actualCount) end;\nresult:=toSkip;\nend; // fromFolder\n\nfunction isDownloading(data:TconnData):boolean;\nbegin\nresult:=assigned(data) and data.countAsDownload\n  and (data.conn.state in [HCS_REPLYING_BODY, HCS_REPLYING_HEADER, HCS_REPLYING])\nend; // isDownloading\n\nfunction isSendingFile(data:Tconndata):boolean;\nbegin\nresult:=assigned(data)\n  and (data.conn.state = HCS_REPLYING_BODY)\n  and (data.conn.reply.bodyMode in [RBM_FILE, RBM_STREAM])\n  and (data.downloadingWhat in [DW_FILE, DW_ARCHIVE])\nend; // isSendingFile\n\nfunction isReceivingFile(data:Tconndata):boolean;\nbegin result:=assigned(data) and (data.conn.state = HCS_POSTING) and (data.uploadSrc > '') end;\n\nfunction conn2data(p:Tobject):TconnData; inline; overload;\nbegin\nif p = NIL then result:=NIL\nelse result:=TconnData((p as ThttpConn).data)\nend; // conn2data\n\nfunction conn2data(i:integer):TconnData; inline; overload;\nbegin\ntry\n  if i < srv.conns.count then\n    result:=conn2data(srv.conns[i])\n  else\n    result:=conn2data(srv.offlines[i-srv.conns.count])\nexcept result:=NIL end\nend; // conn2data\n\nfunction conn2data(li:TlistItem):TconnData; inline; overload;\nbegin\nif li = NIL then\n  result:=NIL\nelse\n  result:=conn2data(li.index)\nend; // conn2data\n\nfunction countConnectionsByIP(ip:string):integer;\nvar\n  i: integer;\nbegin\nresult:=0;\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  if conn2data(i).address = ip then\n  \tinc(result);\n  inc(i);\n  end;\nend; // countConnectionsByIP\n\nfunction countDownloads(ip:string=''; user:string=''; f:Tfile=NIL):integer;\nvar\n  i: integer;\n  d: TconnData;\nbegin\nresult:=0;\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  d:=conn2data(i);\n  if isDownloading(d)\n  and ((f = NIL) or (assigned(d.lastFile) and d.lastFile.same(f)))\n  and ((ip = '') or addressMatch(ip, d.address))\n  and ((user = '') or sameText(user, d.user))\n  then\n    inc(result);\n  inc(i);\n  end;\nend; // countDownloads\n\nfunction countIPs(onlyDownloading:boolean=FALSE; usersInsteadOfIps:boolean=FALSE):integer;\nvar\n  i: integer;\n  d: TconnData;\n  ips: TStringDynArray;\nbegin\ni:=0;\nips:=NIL;\nwhile i < srv.conns.count do\n  begin\n  d:=conn2data(i);\n  if not onlyDownloading or isDownloading(d) then\n    addUniqueString(if_(usersInsteadOfIps, d.user, d.address), ips);\n  inc(i);\n  end;\nresult:=length(ips);\nend; // countIPs\n\nfunction idx_img2ico(i:integer):integer;\nbegin\nif (i < startingImagesCount) or (i >= USER_ICON_MASKS_OFS) then result:=i\nelse result:=i-startingImagesCount+USER_ICON_MASKS_OFS\nend;\n\nfunction idx_ico2img(i:integer):integer;\nbegin\nif i < USER_ICON_MASKS_OFS then result:=i\nelse result:=i-USER_ICON_MASKS_OFS+startingImagesCount\nend;\n\nfunction idx_label(i:integer):string;\nbegin result:=intToStr(idx_img2ico(i)) end;\n\nfunction gif2str(gif:TgifImage):ansistring;\nvar\n  stream: Tbytesstream;\nbegin\nstream:=Tbytesstream.create();\ngif.SaveToStream(stream);\nsetLength(result, stream.size);\nmove(stream.bytes[0], result[1], stream.size);\nstream.free;\nend; // gif2str\n\nfunction bmp2str(bmp:Tbitmap):ansistring;\nvar\n\tgif: TGIFImage;\nbegin\ngif:=TGIFImage.Create();\ntry\n  gif.ColorReduction:=rmQuantize;\n  gif.Assign(bmp);\n  result:=gif2str(gif);\nfinally gif.free;\n  end;\nend; // bmp2str\n\nfunction pic2str(idx:integer):ansistring;\nvar\n  ico: Ticon;\n  gif: TgifImage;\nbegin\nresult:='';\nif idx < 0 then exit;\nidx:=idx_ico2img(idx);\nif length(imagescache) <= idx then\n  setlength(imagescache, idx+1);\nresult:=imagescache[idx];\nif result > '' then exit;\n\nico:=Ticon.Create;\ngif:=TGifImage.Create;\ntry\n  mainfrm.images.getIcon(idx, ico);\n  gif.Assign(ico);\n  result:=gif2str(gif);\n  imagescache[idx]:=result;\nfinally\n  gif.Free;\n  ico.free;\n  end;\nend; // pic2str\n\nfunction str2pic(s:ansistring):integer;\nvar\n\tgif: TGIFImage;\nbegin\nfor result:=0 to mainfrm.images.count-1 do\n  if pic2str(result) = s then exit;\n// in case the pic was not found, it automatically adds it to the pool\ngif:=stringToGif(s);\ntry\n  result:=mainfrm.images.addMasked(gif.bitmap, gif.Bitmap.TransparentColor);\n  etags.values['icon.'+intToStr(result)] := strMD5(s);\nfinally gif.free end;\nend; // str2pic\n\nvar sysidx2index: Tint2int; // maps system imagelist icons to internal imagelist\n\nfunction getImageIndexForFile(fn:string):integer;\nvar\n  i, j: integer;\n  ico: Ticon;\n  shfi: TShFileInfo;\n  s: ansistring;\nbegin\nfillChar(shfi, SizeOf(TShFileInfo), 0);\n// documentation reports shGetFileInfo() to be working with relative paths too,\n// but it does not actually work without the expandFileName()\nshGetFileInfo( pchar(expandFileName(fn)), 0, shfi, SizeOf(shfi), SHGFI_SYSICONINDEX);\nif shfi.iIcon = 0 then\n  begin\n  result:=ICON_FILE;\n  exit;\n  end;\n// as reported by official docs\ndestroyIcon(shfi.hIcon);\n\nif sysidx2index = NIL then // firt time\n  sysidx2index:=Tint2int.Create();\ntry result:=sysidx2index[shfi.iIcon]; // already met?\nexcept\n  // found not, let's check deeper: byte comparison.\n  // we first add the ico to the list, so we can use pic2str()\n  ico:=Ticon.create();\n  try\n    systemimages.getIcon(shfi.iIcon, ico);\n    i:=mainfrm.images.addIcon(ico);\n    s:=pic2str(i);\n    etags.values['icon.'+intToStr(i)] := strMD5(s);\n  finally ico.free end;\n  // now we can search if the icon was already there, by byte comparison\n  for j in sysidx2index.Values do\n    if pic2str(j) = s then\n      begin // found, delete the duplicate\n      mainfrm.images.delete(i);\n      setlength(imagescache, i);\n      i:=j;\n      break;\n      end;\n  sysidx2index.Add(shfi.iIcon, i);\n  result:=i;\n  end;\nend; // getImageIndexForFile\n\nfunction getBaseTrayIcon(perc:real=0):Tbitmap;\nvar\n  x: integer;\nbegin\nresult:=Tbitmap.create();\nresult.Width:=16;\nresult.Height:=16;\nmainfrm.images.GetBitmap( if_(assigned(srv) and srv.active,24,30), result);\nif perc > 0 then\n  begin\n  x:=round(14*perc);\n  result.canvas.Brush.color:=clYellow;\n  result.Canvas.FillRect(rect(1,7,x+1,15));\n  result.canvas.Brush.color:=clGreen;\n  result.Canvas.FillRect(rect(x+1,7,15,15));\n  end;\nend; // getBaseTrayIcon\n\nprocedure drawTrayIconString(cnv:Tcanvas; s:string);\nvar\n  x, i, idx: integer;\nbegin\nx:=10;\nfor i:=length(s) downto 1 do\n\tbegin\n  if s[i] = '%' then idx:=10\n  else idx:=ord(s[i])-ord('0');\n  mainfrm.numbers.draw(cnv, x, 8, idx);\n  dec(x,mainfrm.numbers.Width);\n  end;\nend; // drawTrayIconString\n\nprocedure repaintTray();\nvar\n  bmp: Tbitmap;\n  s: string;\nbegin\nif quitting or (mainfrm = NIL) then exit;\nbmp:=getBaseTrayIcon();\ns:=trayShows;\nif s = 'connections' then s:=intTostr(srv.conns.count);\nif s = 'downloads' then s:=intToStr(downloadsLogged);\nif s = 'uploads' then s:=intToStr(uploadsLogged);\nif s = 'hits' then s:=intToStr(hitsLogged);\nif s = 'ips' then s:=intToStr(countIPs());\nif s = 'ips-ever' then s:=intToStr(ipsEverConnected.count);\n\ndrawTrayIconString(bmp.canvas, s);\ntray_ico.Handle:=bmpToHico(bmp);\ntray_ico.Transparent:=FALSE;\nbmp.free;\ntray.setIcon(tray_ico);\nend; // repaintTray\n\nprocedure resetTotals();\nbegin\nhitsLogged:=0;\ndownloadsLogged:=0;\nuploadsLogged:=0;\noutTotalOfs:=-srv.bytesSent;\ninTotalOfs:=-srv.bytesReceived;\nrepainttray();\nend; // resetTotals\n\nprocedure flash();\nbegin\nFlashWindow(application.handle, TRUE);\nif mainFrm.beepChk.checked then MessageBeep(MB_OK);\nend; // flash\n\nfunction localDNSget(ip:string):string;\nvar\n  i: integer;\nbegin\nfor i:=0 to length(address2name) div 2-1 do\n  if addressmatch(address2name[i*2+1], ip) then\n    begin\n    result:=address2name[i*2];\n    exit;\n    end;\nresult:='';\nend; // localDNSget\n\nfunction existsNodeWithName(name:string; parent:Ttreenode):boolean;\nvar\n  n: Ttreenode;\nbegin\nresult:=FALSE;\nif parent = NIL then parent:=rootNode;\nif parent = NIL then exit;\nwhile assigned(parent.data) and not Tfile(parent.data).isFolder() do\n  parent:=parent.parent;\nn:=parent.getFirstChild();\nwhile assigned(n) do\n  begin\n  result:=sameText(n.text, name);\n  if result then exit;\n  n:=n.getNextSibling();\n  end;\nend; // existsNodeWithName\n\nfunction getUniqueNodeName(start:string; parent:Ttreenode):string;\nvar\n  i: integer;\nbegin\nresult:=start;\nif not existsNodeWithName(result, parent) then exit;\ni:=2;\n  repeat\n  result:=format('%s (%d)', [start,i]);\n  inc(i);\n  until not existsNodeWithName(result, parent);\nend; // getUniqueNodeName\n\nprocedure updateDynDNS();\n\n  function interpretResponse(s:string):string;\n  const\n    ERRORS: array [1..10] of record code,msg:string; end = (\n      (code:'badauth';  msg:MSG_DDNS_badauth),\n      (code:'notfqdn';  msg:MSG_DDNS_notfqdn),\n      (code:'nohost';   msg:MSG_DDNS_nohost),\n      (code:'!yours';   msg:MSG_DDNS_notyours),\n      (code:'numhost';  msg:MSG_DDNS_numhost),\n      (code:'abuse';    msg:MSG_DDNS_abuse),\n      (code:'dnserr';   msg:MSG_DDNS_dnserr),\n      (code:'911';      msg:MSG_DDNS_911),\n      (code:'!donator'; msg:MSG_DDNS_notdonator),\n      (code:'badagent'; msg:MSG_DDNS_badagent)\n    );\n  var\n    i: integer;\n    code: string;\n  begin\n  s:=trim(s);\n  if s = '' then\n    begin\n    result:='no reply';\n    exit;\n    end;\n  code:='';\n  result:='successful';\n  code:=trim(lowercase(getTill(' ',s)));\n  if stringExists(code, ['good','nochg']) then exit;\n  for i:=1 to length(ERRORS) do\n    if code = ERRORS[i].code then\n      begin\n      result:='error: '+ERRORS[i].msg;\n      dyndns.active:=FALSE;\n      exit;\n      end;\n  result:='unknown reply: '+s;\n  end; // interpretResponse\n\nvar\n  s: string;\nbegin\nif externalIP = '' then exit;\nmainfrm.setStatusBarText('Updating dynamic DNS...');\ndyndns.lastTime:=now();\ntry s:=httpGet(replaceText(dyndns.url, '%ip%', externalIP));\nexcept s:='' end;\nif s > '' then dyndns.lastResult:=s;\nif not mainfrm.logOtherEventsChk.checked then exit;\nif length(s) > 30 then s:=intToStr(length(s))+' bytes reply'\nelse s:=interpretResponse(s);\nmainfrm.add2log('DNS update requested for '+dyndns.lastIP+': '+s);\nif dyndns.active then\n  dyndns.lastIP:=externalIP\nelse\n  msgDlg('DNS update failed.'#13+s+'.'#13'User intervention is required.', MB_ICONERROR);\nmainfrm.setStatusBarText('');\nend; // updateDynDNS\n\nprocedure disableUserInteraction();\nbegin\nif userInteraction.disabled then exit;\nuserInteraction.disabled:=TRUE;\nif mainFrm = NIL then userInteraction.bakVisible:=FALSE\nelse\n  begin\n  userInteraction.bakVisible:=mainfrm.visible;\n  mainfrm.visible:=FALSE;\n  end;\nend; // disableUserInteraction\n\nprocedure reenableUserInteraction();\nbegin\nif not userInteraction.disabled then exit;\nuserInteraction.disabled:=FALSE;\nif assigned(mainFrm) then\n  mainfrm.visible:=userInteraction.bakVisible;\nend; // reenableUserInteraction\n\n\nfunction getNewSID():string;\nbegin result:=replaceStr(base64encode(str_(now())+str_(random())), '=','') end;\n\nconstructor Tsession.create(const sid:string='');\nbegin\nid:=sid;\nif id = '' then\n  id:=getNewSID();\nsessions.Add(id, self);\ncreated:=now();\nttl:=1; // days\nkeepAlive();\nend;\n\ndestructor Tsession.Destroy;\nvar\n  o: Tobject;\n  cd: TconnData;\nbegin\nfor o in srv.conns do\n  begin\n  cd:=ThttpConn(o).data;\n  if cd.session = self then\n    cd.session:=NIL;\n  end;\nsessions.remove(id);\nfreeAndNIL(vars);\nend;\n\nprocedure Tsession.keepAlive();\nbegin expires:=now() + ttl end;\n\nprocedure Tsession.setTTL(t:Tdatetime);\nbegin\nttl:=t;\nkeepAlive();\nend;\n\nfunction Tsession.getVar(const k:string):string;\nbegin\ntry result:=vars.values[k];\nexcept result:=''\n  end;\nend; // sessionGet\n\nprocedure Tsession.setVar(const k, v:string);\nbegin\nif vars= NIL then\n  vars:=THashedStringList.create;\nvars.addPair(k,v);\nend;\n\nconstructor TconnData.create(conn:ThttpConn);\nbegin\nconn.data:=self;\nself.conn:=conn;\ntime:=now();\nlastActivityTime:=time;\ndownloadingWhat:=DW_UNK;\nurlvars:=THashedStringList.create();\nurlvars.lineBreak:='&';\ntplCounters:=TstringToIntHash.create();\nvars:=THashedStringList.create();\npostVars:=THashedStringList.create();\nend; // constructor\n\ndestructor TconnData.destroy;\nvar\n  i: integer;\nbegin\nfor i:=0 to vars.Count-1 do\n  if assigned(vars.Objects[i]) and (vars.Objects[i] <> currentCFGhashed) then\n    begin\n    vars.Objects[i].free;\n    vars.Objects[i]:=NIL;\n    end;\nfreeAndNIL(vars);\nfreeAndNIL(postVars);\nfreeAndNIL(urlvars);\nfreeAndNIL(tplCounters);\nfreeAndNIL(limiter);\n// do NOT free \"tpl\". It is just a reference to cached tpl. It will be freed only at quit time.\nif assigned(f) then\n  begin\n  closeFile(f^);\n  freeAndNIL(f);\n  end;\ninherited destroy;\nend; // destructor\n\nprocedure Tconndata.disconnect(reason:string);\nbegin\ndisconnectReason:=reason;\nconn.disconnect();\nend; // disconnect\n\nprocedure TconnData.logout();\nbegin\nfreeAndNIL(session);\naccount:=NIL;\nuser:='';\npwd:='';\nconn.delCookie(SESSION_COOKIE);\nend; // logout\n\n// we'll automatically free and previous temporary object\nprocedure TconnData.setLastFile(f:Tfile);\nbegin\nfreeIfTemp(FlastFile);\nFlastFile:=f;\nend;\n\nconstructor Tfile.create(fullpath:string);\nbegin\nfullpath:=ExcludeTrailingPathDelimiter(fullpath);\nicon:=-1;\nsize:=-1;\natime:=now();\nmtime:=atime;\nflags:=[];\nsetResource(fullpath);\nif (resource > '') and sysutils.directoryExists(resource) then\n  flags:=flags+[FA_FOLDER, FA_BROWSABLE];\nend; // create\n\nconstructor Tfile.createTemp(fullpath:string);\nbegin\ncreate(fullpath);\ninclude(flags, FA_TEMP);\nend; // createTemp\n\nconstructor Tfile.createVirtualFolder(name:string);\nbegin\nicon:=-1;\nsetResource('');\nflags:=[FA_FOLDER, FA_VIRTUAL, FA_BROWSABLE];\nself.name:=name;\natime:=now();\nmtime:=atime;\nend; // createVirtualFolder\n\nconstructor Tfile.createLink(name:string);\nbegin\nicon:=-1;\nsetName(name);\natime:=now();\nmtime:=atime;\nflags:=[FA_LINK, FA_VIRTUAL];\nend; // createLink\n\nprocedure Tfile.setResource(res:string);\n\n  function sameDrive(f1,f2:string):boolean;\n  begin\n  result:=(length(f1) >= 2) and (length(f2) >= 2) and (f1[2] = ':')\n    and (f2[2] = ':') and (upcase(f1[1]) = upcase(f2[1]));\n  end; // sameDrive\n\nvar\n  s: string;\nbegin\nif isExtension(res, '.lnk') or fileExists(res+'\\target.lnk') then\n  begin\n  s:=extractFileName(res);\n  if isExtension(s, '.lnk') then\n    setLength(s, length(s)-4);\n  setName(s);\n  lnk:=res;\n  res:=resolveLnk(res);\n  include(flags, FA_SOLVED_LNK);\n  end\nelse\n  exclude(flags, FA_SOLVED_LNK);\nres:=ExcludeTrailingPathDelimiter(res);\n\n// in this case, drive letter may change. useful with pendrives.\nif runningOnRemovable and sameDrive(exePath, res) then\n  delete(res, 1,2);\n\nresource:=res;\nif (length(res) = 2) and (res[2] = ':') then // logical unit\n  begin\n  include(flags, FA_UNIT);\n  if not isRoot() and not (FA_SOLVED_LNK in flags) then\n    setName(res);\n  end\nelse\n  begin\n  exclude(flags, FA_UNIT);\n  if not isRoot() and not (FA_SOLVED_LNK in flags) then\n    setName(extractFileName(res));\n  end;\nsize:=-1;\nend; // setResource\n\nprocedure Tfile.setName(name:string);\nbegin\nself.name:=name;\nif node = NIL then exit;\nnode.Text:=name;\nend; // setName\n\nfunction Tfile.same(f:Tfile):boolean;\nbegin result:=(self = f) or (resource = f.resource) end;\n\nfunction Tfile.toggle(att:TfileAttribute):boolean;\nbegin\nif att in flags then exclude(flags, att)\nelse include(flags, att);\nresult:=att in flags\nend;\n\nfunction Tfile.isRoot():boolean;\nbegin result:=FA_ROOT in flags end;\n\nfunction Tfile.isFolder():boolean;\nbegin result:=FA_FOLDER in flags end;\n\nfunction Tfile.isLink():boolean;\nbegin result:=FA_LINK in flags end;\n\nfunction Tfile.isTemp():boolean;\nbegin result:=FA_TEMP in flags end;\n\nfunction Tfile.isFile():boolean;\nbegin result:=not ((FA_FOLDER in flags) or (FA_LINK in flags)) end;\n\nfunction Tfile.isFileOrFolder():boolean;\nbegin result:=not (FA_LINK in flags) end;\n\nfunction Tfile.isRealFolder():boolean;\nbegin result:=(FA_FOLDER in flags) and not (FA_VIRTUAL in flags) end;\n\nfunction Tfile.isVirtualFolder():boolean;\nbegin result:=(FA_FOLDER in flags) and (FA_VIRTUAL in flags) end;\n\nfunction Tfile.isEmptyFolder(cd:TconnData=NIL):boolean;\nvar\n  listing: TfileListing;\nbegin\nresult:=FALSE;\nif not isFolder() then exit;\nlisting:=TfileListing.create();\n//** i fear it is not ok to use fromFolder() to know if the folder is empty, because it gives empty also for unallowed folders. \nlisting.fromFolder( self, cd, FALSE, 1 );\nresult:= length(listing.dir) = 0;\nlisting.free;\nend; // isEmptyFolder\n\n// uses comments file\nfunction Tfile.getDynamicComment(skipParent:boolean=FALSE):string;\nvar\n  comments: THashedStringList;\nbegin\ntry\n  result:=comment;\n  if result > '' then exit;\n  if mainfrm.loadSingleCommentsChk.checked then\n    result:=loadTextFile(resource+COMMENT_FILE_EXT);\n  if (result > '') or skipParent then exit;\n  comments:=THashedStringList.create();\n  try\n    try\n      comments.CaseSensitive:=FALSE;\n      comments.LoadFromFile(resource+'\\..\\'+COMMENTS_FILE);\n      result:=comments.values[name];\n    except end\n  finally\n    if result = '' then\n      begin\n      loadIon(resource+'\\..', comments);\n      result:=comments.values[name];\n      end;\n    if result > '' then\n      result:=unescapeNL(result);\n    comments.free\n  end;\nfinally result:=macroQuote(result) end;\nend; // getDynamicComment\n\nprocedure Tfile.setDynamicComment(cmt:string);\nvar\n  s, path, name: string;\n  i: integer;\nbegin\nif not isTemp() then\n  begin\n  comment:=cmt; // quite easy\n  exit;\n  end;\npath:=resource+COMMENT_FILE_EXT;\nif fileExists(path) then\n  begin\n  if cmt='' then\n    deleteFile(path)\n  else\n    saveTextFile(path, cmt);\n  exit;\n  end;\nname:=extractFileName(resource);\n\n// we prefer descript.ion, but if its support was disabled,\n// or it doesn't exist while hfs.comments.txt does, then we'll use the latter\npath:=extractFilePath(resource)+COMMENTS_FILE;\nif not mainfrm.supportDescriptionChk.checked\nor fileExists(path) and not fileExists(extractFilePath(resource)+DESCRIPT_ION) then\n  saveTextfile(path, setKeyInString(loadTextFile(path), name, escapeNL(cmt)));\n\nif not mainfrm.supportDescriptionChk.checked then exit;\n\npath:=extractFilePath(resource)+DESCRIPT_ION;\ntry\n  s:=loadDescriptionFile(path);\n  cmt:=escapeIon(cmt); // that's how multilines are handled in this file\n  i:=findNameInDescriptionFile(s, name);\n  if i = 0 then // not found\n    if cmt='' then // no comment, we are good\n      exit\n    else\n      s:=s+quoteIfAnyChar(' ', name)+' '+cmt+CRLF // append\n  else // found, then replace\n    if cmt='' then\n      replace(s, '', i, findEOL(s, i)) // remove the whole line\n    else\n      begin\n      i:=nonQuotedPos(' ', s, i); // replace just the comment\n      replace(s, cmt, i+1, findEOL(s, i, FALSE));\n      end;\n  if s='' then\n    deleteFile(path)\n  else\n    saveTextFile(path, s);\nexcept end;\nend; // setDynamicComment\n\nprocedure fixTreeStructure(n: TTreeNode);\nvar\n  i: integer;\nbegin\nTfile(n.data).node:=n;\nfor i:=0 to n.count-1 do\n  fixTreeStructure(n.Item[i])\nend; // fixTreeStructure\n\nfunction Tfile.getParent():Tfile;\nbegin\nif node = NIL then \n  begin\n  result:=NIL;\n  exit;\n  end;\nif node.data <> self then // the tree structure is unreliable, at least on DISPLAYCHANGE event. This will workaround it\n  fixTreeStructure(mainFrm.filesBox.Items[0]);\nif isTemp() then result:=nodeToFile(node)\nelse if node.parent = NIL then result:=NIL\nelse result:=node.parent.data\nend; // getParent\n\nfunction Tfile.getDLcount():integer;\nbegin\nif isFolder() then result:=getDLcountRecursive()\nelse if isTemp() then result:=autoupdatedFiles.getInt(resource)\nelse result:=FDLcount;\nend; // getDLcount\n\nprocedure Tfile.setDLcount(i:integer);\nbegin\nif isTemp() then autoupdatedFiles.setInt(resource, i)\nelse FDLcount:=i;\nend; // setDLcount\n\nfunction Tfile.getDLcountRecursive():integer;\nvar\n  n: Ttreenode;\n  i: integer;\n  f: Tfile;\nbegin\nif not isFolder() then\n  begin\n  result:=DLcount;\n  exit;\n  end;\nresult:=0;\nif node = NIL then exit;\nn:=node.getFirstChild();\nif not isTemp() then\n  while assigned(n) do\n    begin\n    f:=nodeToFile(n);\n    if assigned(f) then\n      if f.isFolder() then inc(result, f.getDLcountRecursive())\n      else inc(result, f.FDLcount);\n    n:=n.getNextSibling();\n    end;\nif isRealFolder() then\n  for i:=0 to autoupdatedFiles.count-1 do\n    if ansiStartsText(resource, autoupdatedFiles[i]) then\n      inc(result, autoupdatedFiles.getIntByIdx(i));\nend; // getDLcountRecursive\n\nfunction Tfile.diskfree():int64;\nbegin\nif FA_VIRTUAL in flags then result:=0\nelse result:=diskSpaceAt(resource);\nend; // diskfree\n\nprocedure Tfile.setupImage(newIcon:integer);\nbegin\nicon:=newIcon;\nsetupImage();\nend; // setupImage\n\nprocedure Tfile.setupImage();\nbegin\nif icon >= 0 then node.Imageindex:=icon\nelse node.ImageIndex:=getIconForTreeview();\nnode.SelectedIndex:=node.imageindex;\nend; // setupImage\n\nfunction Tfile.getIconForTreeview():integer;\nbegin\nif FA_UNIT in flags then result:=ICON_UNIT\nelse if FA_ROOT in flags then result:=ICON_ROOT\nelse if FA_LINK in flags then result:=ICON_LINK\nelse\n  if FA_FOLDER in flags then\n    if FA_VIRTUAL in flags then result:=ICON_FOLDER\n    else result:=ICON_REAL_FOLDER\n  else\n    if mainfrm.useSystemIconsChk.checked and (resource > '') then\n      result:=getImageIndexForFile(resource) // skip iconsCache\n    else\n      result:=ICON_FILE;\nend; // getIconForTreeview\n\nfunction encodeURL(s:string; forceEncodedSpaces:boolean=FALSE):string;\nbegin\nresult:=HSlib.encodeURL(s, mainFrm.encodeNonasciiChk.checked,\n  forceEncodedSpaces or mainFrm.encodeSpacesChk.checked)\nend; // encodeURL\n\nfunction protoColon():string;\nconst\n  LUT: array [boolean] of string = ('http://','https://');\nbegin\nresult:=LUT[mainFrm.httpsUrlsChk.checked];\nend; // protoColon\n\nfunction Tfile.relativeURL(fullEncode:boolean=FALSE):string;\nbegin\nif isLink() then result:=replaceText(resource, '%ip%', defaultIP)\nelse if isRoot() then result:=''\nelse result:=encodeURL(name, fullEncode)+if_(isFolder(),'/')\nend;\n\nfunction Tfile.pathTill(root:Tfile=NIL; delim:char='\\'):string;\nvar\n  f: Tfile;\nbegin\nresult:='';\nif self = root then exit;\nresult:=name;\nf:=parent;\nif isTemp() then\n  begin\n  if FA_SOLVED_LNK in flags then\n    result:=extractFilePath(copy(lnk,length(f.resource)+2, MAXINT))+name // the path is the one of the lnk, but we have to replace the file name as the lnk can make it\n  else\n    result:=copy(resource, length(f.resource)+2, MAXINT);\n  if delim <> '\\' then result:=replaceStr(result, '\\', delim);\n  end;\nwhile assigned(f) and (f <> root) and (f <> rootFile) do\n  begin\n  result:=f.name+delim+result;\n  f:=f.parent;\n  end;\nend; // pathTill\n\nfunction Tfile.url(fullEncode:boolean=FALSE):string;\nbegin\nassert(node<>NIL, 'node can''t be NIL');\nif isLink() then result:=relativeURL(fullEncode)\nelse result:='/'+encodeURL(pathTill(rootFile,'/'), fullEncode)\n  +if_(isFolder() and not isRoot(), '/');\nend; // url\n\nfunction Tfile.getFolder():string;\nvar\n  f: Tfile;\n  s: string;\nbegin\nresult:='/';\nf:=parent;\nwhile assigned(f) and assigned(f.parent) do\n  begin\n  result:='/'+f.name+result;\n  f:=f.parent;\n  end;\nif not isTemp() then exit;\nf:=parent; // f now points to the non-temporary ancestor item\ns:=extractFilePath(resource);\ns:=copy( s, length(f.resource)+2, length(s) );\nresult:=result+replaceStr(s, '\\','/');\nend; // getFolder\n\nfunction Tfile.fullURL(ip, user, pwd:string):string;\nconst userPwdHashCache:Tstr2str = NIL;\nvar s,k,base: string;\nbegin\nif userPwdHashCache = NIL then\n  userPwdHashCache:=Tstr2str.Create();\nbase:=fullURL(ip)+'?';\nk:=user+':'+pwd;\ntry result:=base+userPwdHashCache[k]\nexcept\n  s:='mode=auth&u='+encodeURL(user);\n  s:=s+'&s2='+strSHA256(s+pwd); // sign with password\n  userPwdHashCache.add(k,s);\n  result:=base+s;\n  end;\nend; // fullURL\n\nfunction Tfile.fullURL(ip:string=''):string;\nbegin\nresult:=url();\nif isLink() then\n  exit;\nif assigned(srv) and srv.active\nand (srv.port <> '80') and (pos(':',ip) = 0)\nand not mainfrm.noPortInUrlChk.checked then\n  result:=':'+srv.port+result;\nif ip = '' then\n  ip:=defaultIP;\nresult:=protoColon()+ip+result;\nend; // fullURL\n\nfunction Tfile.isDLforbidden():boolean;\nvar\n  f: Tfile;\nbegin\n// the flag can be in this node\nresult:=FA_DL_FORBIDDEN in flags;\nif result or not isTemp() then exit;\nf:=nodeToFile(node);\nresult:=assigned(f) and (FA_DL_FORBIDDEN in f.flags);\nend; // isDLforbidden\n\nfunction Tfile.isNew():boolean;\nvar\n  t: Tdatetime;\nbegin\nif FA_TEMP in flags then t:=mtime\nelse t:=atime;\nresult:=(filesStayFlaggedForMinutes > 0)\n  and (trunc(abs(now()-t)*24*60) <= filesStayFlaggedForMinutes)\nend; // isNew\n\nfunction getFiles(mask:string):TStringDynArray;\nvar\n  sr: TSearchRec;\nbegin\nresult:=NIL;\nif findFirst(mask, faAnyFile, sr) = 0 then\n  try\n    repeat addString(sr.name, result)\n    until findNext(sr) <> 0;\n  finally findClose(sr) end;\nend; // getFiles\n\nfunction Tfile.getRecursiveDiffTplAsStr(outInherited:Pboolean=NIL; outFromDisk:Pboolean=NIL):string;\nvar\n  basePath, runPath, s, fn, diff: string;\n  f: Tfile;\n  first: boolean;\n\n  function add2diff(s:string):boolean;\n  begin\n  result:=FALSE;\n  if s = '' then exit;\n  diff:=s\n    + ifThen((diff > '') and not ansiEndsStr(CRLF,s), CRLF)\n    + ifThen((diff > '') and not isSectionAt(@diff[1]), '[]'+CRLF)\n    + diff;\n  result:=TRUE;\n  end; // add2diff\n\nbegin\nresult:='';\ndiff:='';\nrunPath:='';\nf:=self;\nif assigned(outInherited) then outInherited^:=FALSE;     \nif assigned(outFromDisk) then outFromDisk^:=FALSE;\nfirst:=TRUE;\nwhile assigned(f) do\n  begin\n  if f.isRealFolder() then\n    if f.isTemp() then\n      begin\n      basePath:=excludeTrailingPathDelimiter( extractFilePath(f.parent.resource) );\n      runPath:=copy(f.resource, length(basePath)+2, length(f.resource));\n      f:=f.parent;\n      end\n    else\n      begin\n      basePath:=excludeTrailingPathDelimiter(extractFilePath(f.resource));\n      runPath:=extractFileName(f.resource);\n      end;\n  // temp realFolder will cycle more than once, while non-temp only once\n  while runPath > '' do\n    begin\n    if add2diff(loadTextFile(basePath+'\\'+runPath+'\\'+DIFF_TPL_FILE)) and assigned(outFromDisk) then\n      outFromDisk^:=TRUE;\n    runPath:=excludeTrailingPathDelimiter(ExtractFilePath(runPath));\n    end;\n  // consider the diffTpl in node\n  s:=f.diffTpl;\n  if (s > '') and singleLine(s) then\n    begin\n    // maybe it refers to a file\n    fn:=trim(s);\n    if fileExists(fn) then doNothing()\n    else if fileExists(exePath+fn) then fn:=exePath+fn\n    else if fileExists(f.resource+'\\'+fn) then fn:=f.resource+'\\'+fn;\n    if fileExists(fn) then s:=loadTextFile(fn);\n    end;\n  if add2diff(s) and not first and assigned(outInherited) then\n    outInherited^:=TRUE;\n  f:=f.parent;\n  first:=FALSE;\n  end;\nfor s in sortArray(getFiles(exePath+'*.diff.tpl')) do\n  add2diff(loadTextFile(s));\nresult:=diff;\nend; // getRecursiveDiffTplAsStr\n\nfunction Tfile.getDefaultFile():Tfile;\nvar\n  f: Tfile;\n  mask, s: string;\n  sr: TsearchRec;\n  n: Ttreenode;\nbegin\nresult:=NIL;\nmask:=getRecursiveFileMask();\nif mask = '' then exit;\n\nn:=node.getFirstChild();\n{ if this folder has been dinamically generated, the treenode is not actually\n{ its own, and we won't care about subitems }\nif not isTemp() then\n  while assigned(n) do\n    begin\n    f:=n.data;\n    n:=n.getNextSibling();\n    if (FA_LINK in f.flags) or f.isFolder()\n    or not fileMatch(mask, f.name) or not fileExists(f.resource) then continue;\n    result:=f;\n    exit;\n    end;\n\nif not isRealFolder() or not sysutils.directoryExists(resource) then exit;\n\nwhile mask > '' do\n  begin\n  s:=chop(';', mask);\n  if findFirst(resource+'\\'+s, faAnyFile-faDirectory, sr) <> 0 then continue;\n  try\n    // encapsulate for returning\n    result:=Tfile.createTemp(resource+'\\'+sr.name);\n    result.node:=node; // temporary nodes are bound to the parent's node\n  finally findClose(sr) end;\n  exit;\n  end;\nend; // getDefaultFile\n\nfunction Tfile.shouldCountAsDownload():boolean;\nvar\n  f: Tfile;\n  mask: string;\nbegin\nresult:=not (FA_DONT_COUNT_AS_DL in flags);\nif not result then exit;\nf:=self;\n  repeat\n  mask:=f.dontCountAsDownloadMask;\n  f:=f.parent;\n  until (f = NIL) or (mask > '');\nif mask > '' then result:=not fileMatch(mask, name)\nend; // shouldCountAsDownload\n\nfunction Tfile.getShownRealm():string;\nvar\n  f: Tfile;\nbegin\nf:=self;\n  repeat\n  result:=f.realm;\n  if result > '' then exit;\n  f:=f.parent;\n  until f = NIL;\nif mainfrm.useCommentAsRealmChk.checked then\n  result:=getDynamicComment();\nend; // getShownRealm\n\nfunction Tfile.parentURL():string;\nvar\n  i: integer;\nbegin\nresult:=url(TRUE);\ni:=length(result)-1;\nwhile (i > 1) and (result[i] <> '/') do dec(i);\nsetlength(result,i);\nend; // parentURL\n\nfunction Tfile.getSystemIcon():integer;\nvar\n  ic: PcachedIcon;\n  i: integer;\nbegin\nresult:=icon;\nif result >= 0 then exit;\nif isFile() then\n  for i:=0 to length(iconMasks)-1 do\n    if fileMatch(iconMasks[i].str, name) then\n      begin\n      result:=iconMasks[i].int;\n      exit;\n      end;\nic:=iconsCache.get(resource);\nif ic = NIL then\n  begin\n  result:=getImageIndexForFile(resource);\n  iconsCache.put(resource, result, mtime);\n  exit;\n  end;\nif mtime <= ic.time then result:=ic.idx\nelse\n  begin\n  result:=getImageIndexForFile(resource);\n  ic.time:=mtime;\n  ic.idx:=result;\n  end;\nend; // getSystemIcon\n\nprocedure Tfile.lock();\nbegin locked:=TRUE end;\n\nprocedure Tfile.unlock();\nbegin locked:=FALSE end;\n\nfunction Tfile.isLocked():boolean;\nvar\n  f: Tfile;\n  n: Ttreenode;\nbegin\n// check ancestors (first, because it is always fast)\nf:=self;\n  repeat\n  result:=f.locked;\n  f:=f.parent;\n  until (f = NIL) or result;\n// check descendants\nn:=node.getFirstChild();\nwhile assigned(n) and not result do\n  begin\n  result:=nodeToFile(n).isLocked();\n  n:=n.getNextSibling();\n  end;\nend; // isLocked\n\nprocedure Tfile.recursiveApply(callback:TfileCallback; par:integer=0; par2:integer=0);\nvar\n  n, next: Ttreenode;\n  r: TfileCallbackReturn;\nbegin\nr:=callback(self, FALSE, par, par2);\nif FCB_DELETE in r then\n  begin\n  node.delete();\n  exit;\n  end;\nif FCB_NO_DEEPER in r then exit;\nn:=node.getFirstChild();\nwhile assigned(n) do\n  begin\n  next:=n.getNextSibling(); // \"next\" must be saved this point because the callback may delete the current node\n  if assigned(n.data) then nodeToFile(n).recursiveApply(callback, par, par2);\n  n:=next;\n  end;\nif FCB_RECALL_AFTER_CHILDREN in r then\n  begin\n  r:=callback(self, TRUE, par, par2);\n  if FCB_DELETE in r then node.delete();\n  end;\nend; // recursiveApply\n\nfunction Tfile.hasRecursive(attributes: TfileAttributes; orInsteadOfAnd:boolean=FALSE; outInherited:Pboolean=NIL):boolean;\nvar\n  f: Tfile;\nbegin\nresult:=FALSE;\nf:=self;\nif assigned(outInherited) then outInherited^:=FALSE;\nwhile assigned(f) do\n  begin\n  result:=orInsteadOfAnd and (attributes*f.flags <> [])\n    or (attributes*f.flags = attributes);\n  if result then exit;\n  f:=f.parent;\n  if assigned(outInherited) then outInherited^:=TRUE;\n  end;\nif assigned(outInherited) then outInherited^:=FALSE; // grant it is set only if result=TRUE\nend; // hasRecursive\n\nfunction Tfile.hasRecursive(attribute: TfileAttribute; outInherited:Pboolean=NIL):boolean;\nbegin result:=hasRecursive([attribute], FALSE, outInherited) end;\n\nfunction Tfile.accessFor(cd:TconnData):boolean;\nbegin\nif cd = NIL then result:=accessFor('', '')\nelse result:=accessFor(cd.user, cd.pwd)\nend; // accessFor\n\nfunction Tfile.accessFor(username, password:string):boolean;\nvar\n  a: Paccount;\n  f: Tfile;\n  list: TStringDynArray;\nbegin\nresult:=FALSE;\nif isFile() and isDLforbidden() then exit;\nresult:=FALSE;\nf:=self;\nwhile assigned(f) do\n  begin\n  list:=f.accounts[FA_ACCESS]; // shortcut\n  \n  if (username = '') and stringExists(USER_ANONYMOUS, list, TRUE) then break;\n  // first check in user/pass\n  if (f.user > '') and sameText(f.user, username) and (f.pwd = password) then break;\n  // then in accounts\n  if assigned(list) then\n    begin\n    a:=getAccount(username);\n\n    if stringExists(USER_ANYONE, list, TRUE) then break;\n    // we didn't match the user/pass, but this file is restricted, so we must have an account at least to access it\n    if assigned(a) and (a.pwd = password) and\n      (stringExists(USER_ANY_ACCOUNT, list, TRUE) or (findEnabledLinkedAccount(a, list, TRUE) <> NIL))\n    then break;\n      \n    exit;\n    end;\n  // there's a user/pass restriction, but the password didn't match (if we got this far). We didn't exit before to give accounts a chance.\n  if f.user > '' then exit;\n\n  f:=f.parent;\n  end;\nresult:=TRUE;\n\n// in case the file is not protected, we must not accept authentication credentials belonging to disabled accounts\nif (username > '') and (f = NIL) then\n  begin\n  a:=getAccount(username);\n  if a = NIL then exit;\n  result:=a.enabled;\n  end;\nend; // accessFor\n\nfunction Tfile.getRecursiveFileMask():string;\nvar\n  f: Tfile;\nbegin\nf:=self;\n  repeat\n  result:=f.defaultFileMask;\n  if result > '' then exit;\n  f:=f.parent;\n  until f = NIL;\nend; // getRecursiveFileMask\n\nfunction Tfile.getAccountsFor(action:TfileAction; specialUsernames:boolean=FALSE; outInherited:Pboolean=NIL):TstringDynArray;\nvar\n  i: integer;\n  f: Tfile;\n  s: string;\nbegin\nresult:=NIL;\nf:=self;\nif assigned(outInherited) then outInherited^:=FALSE;\nwhile assigned(f) do\n  begin\n  for i:=0 to length(f.accounts[action])-1 do\n  \tbegin\n    s:=f.accounts[action][i];\n    if (s = '')\n    or (action = FA_UPLOAD) and not f.isRealFolder() then continue; // we must ignore this setting\n\n    if specialUsernames and (s[1] = '@')\n    or accountExists(s, specialUsernames) then // we admit groups only if specialUsernames are admitted too\n      addString(s, result);\n    end;\n  if (action = FA_ACCESS) and (f.user > '') then addString(f.user, result);\n  if assigned(result) then exit;\n  if assigned(outInherited) then outInherited^:=TRUE;\n  f:=f.parent;\n  end;\nend; // getAccountsFor\n\nprocedure Tfile.getFiltersRecursively(var files,folders:string);\nvar\n  f: Tfile;\nbegin\nfiles:='';\nfolders:='';\nf:=self;\nwhile assigned(f) do\n  begin\n  if (files = '') and (f.filesfilter > '') then files:=f.filesFilter;\n  if (folders = '') and (f.foldersfilter > '') then folders:=f.foldersFilter;\n  if (files > '') and (folders > '') then break;\n  f:=f.parent;\n  end;\nend; // getFiltersRecursively\n\nprocedure kickByIP(ip:string);\nvar\n  i: integer;\n  d: TconnData;\nbegin\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  d:=conn2data(i);\n  if assigned(d) and (d.address = ip) or (ip = '*') then\n    d.disconnect(first(d.disconnectReason, 'kicked'));\n  inc(i);\n  end;\nend; // kickByIP\n\nfunction getSafeHost(cd:TconnData):string;\nbegin\nresult:='';\nif cd = NIL then exit;\nif addressmatch(forwardedMask, cd.conn.address) then\n  result:=cd.conn.getHeader('x-forwarded-host');\nif result = '' then\n  result:=cd.conn.getHeader('host');\nresult:=stripChars(result, ['0'..'9','a'..'z','A'..'Z',':','.','-','_'], TRUE);\nend; // getSafeHost\n\nfunction nodeIsLocked(n:Ttreenode):boolean;\nbegin\nresult:=FALSE;\nif (n = NIL) or (n.data = NIL) then exit;\nresult:=nodeToFile(n).isLocked();\nend; // nodeIsLocked\n\nfunction objByIP(ip:string):TperIp;\nvar\n  i: integer;\nbegin\ni:=ip2obj.indexOf(ip);\nif i < 0 then\n  i:=ip2obj.add(ip);\nif ip2obj.objects[i] = NIL then\n  ip2obj.objects[i]:=TperIp.create();\nresult:=ip2obj.objects[i] as TperIp;\nend; // objByIP\n\nfunction Tmainfrm.findFilebyURL(url:string; parent:Tfile=NIL; allowTemp:boolean=TRUE):Tfile;\n\n  procedure workTheRestByReal(rest:string; f:Tfile);\n  var\n    s: string;\n  begin\n  if not allowTemp then exit;\n\n  s:=rest; // just a shortcut\n  if dirCrossing(s) then exit;\n\n  s:=includeTrailingPathDelimiter(f.resource)+s; // we made the \"..\" test before, so relative paths are allowed in the VFS\n  if not fileOrDirExists(s) and fileOrDirExists(s+'.lnk') then\n    s:=s+'.lnk';\n  if not fileOrDirExists(s) or not hasRightAttributes(s) then\n    exit;\n  // found on disk, we need to build a temporary Tfile to return it\n  result:=Tfile.createTemp(s);\n  // the temp file inherits flags from the real folder\n  if FA_DONT_LOG in f.flags then\n    include(result.flags, FA_DONT_LOG);\n  if not (FA_BROWSABLE in f.flags) then\n    exclude(result.flags, FA_BROWSABLE);\n  // temp nodes are bound to parent's node\n  result.node:=f.node;\n  end; // workTheRestByReal\n\nvar\n  parts: TStringDynArray;\n  s: string;\n  cur, n: Ttreenode;\n  found: boolean;\n  f: Tfile;\n  i, j: integer;\n\n  function workDots():boolean;\n  label REMOVE;\n  var\n    i: integer;\n  begin\n  result:=FALSE;\n  i:=0;\n  while i < length(parts) do\n    begin\n    if parts[i] = '.' then\n      goto REMOVE; // 10+ years have passed since the last time i used labels in pascal. It's a thrill. \n    if parts[i] <> '..' then\n      begin\n      inc(i);\n      continue;\n      end;\n    if i > 0 then\n      begin\n      removeString(parts, i-1, 2);\n      dec(i);\n      continue;\n      end;\n    parent:=parent.parent;\n    if parent = NIL then exit;\n    REMOVE:\n    removeString(parts, i, 1);\n    end;\n  result:=TRUE;\n  end; // workDots\n\nbegin\nresult:=NIL;\nif (url = '') or anycharIn(#0, url) then exit;\nif parent = NIL then\n  parent:=rootFile;\nurl:=replaceStr(url, '//', '/');\nif url[1] = '/' then\n  begin\n  delete(url, 1,1);  // remove initial \"/\"\n  parent:=rootFile; // it's an absolute path, not relative\n  end;\nexcludeTrailingString(url, '/');\nparts:=split('/', url);\nif not workDots() then exit;\n\nif parent.isTemp() then\n  begin\n  workTheRestByReal(url, parent);\n  exit;\n  end;\n\ncur:=parent.node;   // we'll move using treenodes\nfor i:=0 to length(parts)-1 do\n  begin\n  s:=parts[i];\n  if s = '' then exit; // no support for null filenames\n  found:=FALSE;\n  // search inside the VFS\n  n:=cur.getFirstChild();\n  while assigned(n) do\n    begin\n    found:=sameText(n.text, s);\n    if found then break;\n    n:=n.getNextSibling();\n    end;\n  if not found then // this piece was not found the virtual way\n    begin\n    f:=cur.data;\n    if f.isRealFolder() then // but real folders have not all the stuff loaded and ready. we have another way to walk.\n      begin\n      for j:=i+1 to length(parts)-1 do\n        s:=s+'\\'+parts[j];\n      workTheRestByReal(s, f);\n      end;\n    exit;\n    end;\n  cur:=n;\n  if cur = NIL then exit;\n  end;\nresult:=cur.data;\nend; // findFileByURL\n\nfunction fileExistsByURL(url:string):boolean;\nvar\n  f: Tfile;\nbegin\nf:=mainFrm.findFilebyURL(url);\nresult:=assigned(f);\nfreeIfTemp(f);\nend; // fileExistsByURL\n\nfunction getAccountList(users:boolean=TRUE; groups:boolean=TRUE):TstringDynArray;\nvar\n  i, n: integer;\nbegin\nsetLength(result, length(accounts));\nn:=0;\nfor i:=0 to length(result)-1 do\n  with accounts[i] do\n    if group and groups\n    or not group and users\n    then\n      begin\n      result[n]:=user;\n      inc(n);\n      end;\nsetlength(result, n);\nend; // getAccountList\n\nfunction banAddress(ip:string):boolean;\nresourcestring\n  MSG = 'There are %d open connections from this address.'#13+\n        'Do you want to kick them all now?';\n  MSG2 = 'You can edit the address.'#13'Masks and ranges are allowed.';\nvar\n  i: integer;\n  comm: string;\nbegin\nresult:=FALSE;\nmainfrm.setFocus();\nif not InputQuery('IP mask',MSG2,ip) then exit;\n\nfor i:=0 to length(banlist)-1 do\n  if banlist[i].ip = ip then\n    begin\n    msgDlg('This IP address is already banned', MB_ICONWARNING);\n    exit;\n    end;\n\ncomm:='';\nif not InputQuery('Ban comment','A comment for this ban...',comm) then exit;\n\ni:=length(banlist);\nsetlength(banlist, i+1);\nbanlist[i].ip:=ip;\nbanlist[i].comment:=comm;\n\ni:=countConnectionsByIP(ip);\nif (i > 0) and (msgDlg(format(MSG,[i]), MB_ICONQUESTION+MB_YESNO) = IDYES) then\n  kickByIP(ip);\nresult:=TRUE;\nend; // banAddress\n\nfunction createFingerprint(fn:string):string;\nvar\n  fs: Tfilestream;\n  md5: THashMD5;\n  buf: array [1..32*1024] of byte;\n  n: integer;\nbegin\nmd5.Reset();\nfs:=TfileStream.create(fn, fmOpenRead+fmShareDenyWrite);\ntry\n  repeat\n  n:=fs.Read(buf, sizeof(buf));\n  md5.update(buf, n);\n  if not progFrm.visible then continue;\n  progFrm.progress:=safeDiv(0.0+fs.position, fs.size);\n  application.processMessages();\n  if progFrm.cancelRequested then exit;\n  until n < sizeof(buf);\nfinally fs.free\n  end;\nresult:=md5.HashAsString();\nend; // createFingerprint\n\nfunction uptimestr():string;\nvar\n  t: Tdatetime;\nbegin\nresult:='server down';\nif not srv.active then exit;\nt:=now()-uptime;\nresult:=if_(t>1, format('(%d days) ',[trunc(t)]) )\n  +formatDateTime('hh:nn:ss',t)\nend; // uptimeStr\n\nfunction loadMD5for(fn:string):string;\nbegin\nif getMtimeUTC(fn+'.md5') < getMtimeUTC(fn) then result:=''\nelse result:=trim(getTill(' ',loadTextfile(fn+'.md5')))\nend; // loadMD5for\n\nfunction shouldRecur(data:TconnData):boolean;\nbegin\nresult:=mainFrm.recursiveListingChk.checked\n  and ((data.urlvars.indexOf('recursive') >= 0) or (data.urlvars.values['search'] > ''))\nend; // shouldRecur\n\nfunction Tmainfrm.getFolderPage(folder:Tfile; cd:TconnData; otpl:Tobject):string;\n// we pass the Tpl parameter as Tobject because symbol Ttpl is not defined yet\n\nvar\n  baseurl, list, fileTpl, folderTpl, linkTpl: string;\n  table: TStringDynArray;\n  ofsRelItemUrl, ofsRelUrl, numberFiles, numberFolders, numberLinks: integer;\n  img_file: boolean;\n  totalBytes: int64;\n  fast: TfastStringAppend;\n  buildTime: Tdatetime;\n  listing: TfileListing;\n  diffTpl: Ttpl;\n  hasher: Thasher;\n  fullEncode, recur, oneAccessible: boolean;\n  md: TmacroData;\n\n  procedure applySequential();\n  const\n    PATTERN = '%sequential%';\n  var\n    idx, p: integer;\n    idxS: string;\n  begin\n  idx:=0;\n  p:=1;\n    repeat\n    p:=ipos(PATTERN, result, p);\n    if p = 0 then exit;\n    inc(idx);\n    idxS:=intToStr(idx);\n    delete(result, p, length(PATTERN)-length(idxS));\n    moveChars(idxS[1], result[p], length(idxS));\n    until false;\n  end; // applySequential\n\n  procedure handleItem(f:Tfile);\n  var\n    type_, s, url, fingerprint, itemFolder: string;\n    nonPerc: TStringDynArray;\n  begin\n  if not f.isLink and containsStr(f.resource, '?') then exit; // unicode filename?   //mod by mars\n\n  // build up the symbols table\n  md.table:=table;\n  nonPerc:=NIL;\n  if f.icon >= 0 then\n    begin\n    s:='~img'+intToStr(f.icon);\n    addArray(nonPerc, ['~img_folder', s, '~img_link', s]);\n    end;\n  if f.isFile() then\n    if img_file and (useSystemIconsChk.checked or (f.icon >= 0)) then\n      addArray(nonPerc, ['~img_file', '~img'+intToStr(f.getSystemIcon())]);\n\n  if recur or (itemFolder = '') then\n    itemFolder:=f.getFolder();\n  if recur then\n    url:=substr(itemFolder, ofsRelItemUrl)\n  else\n    url:='';\n  addArray(md.table, [\n    '%item-folder%', itemFolder,\n    '%item-relative-folder%', url\n  ]);\n\n  if not f.accessFor(cd) then\n    s:=diffTpl['protected']\n  else\n    begin\n    s:='';\n    if f.isFileOrFolder() then\n      oneAccessible:=TRUE;\n    end;\n  addArray(md.table, [\n    '%protected%', s\n  ]);\n\n  // url building\n  fingerprint:='';\n  if fingerprintsChk.checked and f.isFile() then\n    begin\n    s:=loadMD5for(f.resource);\n    if s = '' then\n      s:=hasher.getHashFor(f.resource);\n    if s > '' then\n      fingerprint:='#!md5!'+s;\n    end;\n  if f.isLink() then\n    begin\n    url:=f.resource;\n    s:=url;\n    end\n  else\n    if pwdInPagesChk.Checked and (cd.user > '') then\n      begin\n      s:=f.fullURL(getSafeHost(cd), cd.user, cd.pwd )+fingerprint;\n      url:=s\n      end\n    else\n      begin\n      if recur then\n        s:=copy(f.url(fullEncode), ofsRelUrl, MAXINT)+fingerprint\n      else\n        s:=f.relativeURL(fullEncode)+fingerprint;\n      url:=baseurl+s;\n      end;\n\n  if not f.isLink() then\n    begin\n    s:=macroQuote(s);\n    url:=macroQuote(url);\n    end;\n\n  addArray(md.table, [\n    '%item-url%', s,\n    '%item-full-url%', url\n  ]);\n\n  // select appropriate template\n  if f.isLink() then\n    begin\n    s:=linkTpl;\n    inc(numberLinks);\n    type_:='link';\n    end\n  else if f.isFolder() then\n    begin\n    s:=folderTpl;\n    inc(numberFolders);\n    type_:='folder';\n    end\n  else\n    begin\n    s:=diffTpl.getTxtByExt(ExtractFileExt(f.name));\n    if s = '' then s:=fileTpl;\n    inc(numberFiles);\n    type_:='file';\n    end;\n\n  addArray(md.table, [\n    '%item-type%', type_\n  ]);\n\n  s:=xtpl(s, nonPerc);\n  md.f:=f;\n  tryApplyMacrosAndSymbols(s, md, FALSE);\n  fast.append(s);\n  end; // handleItem\n\nvar\n  i, n: integer;\n  f: Tfile;\nbegin\nresult:='';\nif (folder = NIL) or not folder.isFolder() then exit;\n\nif macrosLogChk.checked and not appendmacroslog1.checked then\n  resetLog();\ndiffTpl:=Ttpl.create();\nfolder.lock();\ntry\n  buildTime:=now();\n  cd.conn.addHeader('Cache-Control: no-cache, no-store, must-revalidate, max-age=-1');\n  recur:=shouldRecur(cd);\n  baseurl:=protoColon()+getSafeHost(cd)+folder.url(TRUE);\n\n  if cd.tpl = NIL then\n    diffTpl.over:=otpl as Ttpl\n  else\n    begin\n    diffTpl.over:=cd.tpl;\n    cd.tpl.over:=otpl as Ttpl;\n    end;\n\n  if otpl <> filelistTpl then\n    diffTpl.fullText:=folder.getRecursiveDiffTplAsStr();\n\n  fullEncode:=FALSE;\n  ofsRelUrl:=length(folder.url(fullEncode))+1;\n  ofsRelItemUrl:=length(folder.pathTill())+1;\n  // pathTill() is '/' for root, and 'just/folder', so we must accordingly consider a starting and trailing '/' for the latter case (bugfix by mars)\n  if not folder.isRoot() then\n    inc(ofsRelItemUrl, 2);\n\n  fillChar(md, sizeOf(md), 0);\n  md.cd:=cd;\n  md.tpl:=diffTpl;\n  md.folder:=folder;\n  md.archiveAvailable:=folder.hasRecursive(FA_ARCHIVABLE) and not folder.isDLforbidden();\n  md.hideExt:=folder.hasRecursive(FA_HIDE_EXT);\n\n  result:=diffTpl['special:begin'];\n  tryApplyMacrosAndSymbols(result, md, FALSE);\n\n  // cache these values\n  fileTpl:=xtpl(diffTpl['file'], table);\n  folderTpl:=xtpl(diffTpl['folder'], table);\n  linkTpl:=xtpl(diffTpl['link'], table);\n  // this may be heavy to calculate, only do it upon request\n  img_file:=pos('~img_file', fileTpl) > 0;\n\n  // build %list% based on dir[]\n  numberFolders:=0; numberFiles:=0; numberLinks:=0;\n  totalBytes:=0;\n  oneAccessible:=FALSE;\n  fast:=TfastStringAppend.Create();\n  listing:=TfileListing.create();\n  hasher:=Thasher.create();\n  if fingerprintsChk.checked then\n    hasher.loadFrom(folder.resource);\n  try\n    listing.fromFolder( folder, cd, recur );\n    listing.sort(cd, if_(recur or (otpl = filelistTpl), '?', diffTpl['sort by']) ); // '?' is just a way to cause the sort to fail in case the sort key is not defined by the connection\n\n    n:=length(listing.dir);\n    for i:=0 to n-1 do\n      begin\n      f:=listing.dir[i];\n      if f.size > 0 then\n        inc(totalBytes, f.size);\n      if f.isLink() then\n        inc(numberLinks)\n      else if f.isFolder() then\n        inc(numberFolders)\n      else\n        inc(numberFiles);\n      end;\n    {TODO this symbols will be available when executing macros in handleItem. Having\n      them at this stage is useful only in case immediate calculations are required.\n      This may happen seldom, but maybe some template is using it since we got this here.\n      Each symbols is an extra iteration on the template piece and we may be tempted\n      to consider for optimizations. To not risk legacy problems we should consider\n      treating table symbols with a regular expression and a Tdictionary instead.\n    }\n    table:=toSA([\n      '%upload-link%', if_(accountAllowed(FA_UPLOAD, cd, folder), diffTpl['upload-link']),\n      '%files%', diffTpl[if_(n>0, 'files','nofiles')],\n      '%number%', intToStr(n),\n      '%number-files%', intToStr(numberFiles),\n      '%number-folders%', intToStr(numberFolders),\n      '%number-links%', intToStr(numberlinks),\n      '%total-bytes%', intToStr(totalBytes),\n      '%total-kbytes%', intToStr(totalBytes div KILO),\n      '%total-size%', smartsize(totalBytes)\n    ]);\n\n    for i:=0 to length(listing.dir)-1 do\n      begin\n      application.ProcessMessages();\n      if cd.conn.state = HCS_DISCONNECTED then exit;\n      cd.lastActivityTime:=now();\n      handleItem(listing.dir[i])\n      end;\n    list:=fast.reset();\n  finally\n    listing.free;\n    fast.free;\n    hasher.free;\n    end;\n\n  if cd.conn.state = HCS_DISCONNECTED then exit;\n\n  // build final page\n  if not oneAccessible then md.archiveAvailable:=FALSE;\n  md.table:=table;\n  addArray(md.table, [\n    '%list%',list\n  ]);\n  result:=diffTpl[''];\n  md.f:=NIL;\n  md.afterTheList:=TRUE;\n  try tryApplyMacrosAndSymbols(result, md)\n  finally md.afterTheList:=FALSE end;\n  applySequential();\n  // ensure this is the last symbol to be translated\n  result:=replaceText(result, '%build-time%',\n    floatToStrF((now()-buildTime)*SECONDS, ffFixed, 7,3) );\nfinally\n  folder.unlock();\n  diffTpl.free;\n  end;\nend; // getFolderPage\n\nfunction getETA(data:TconnData):string;\nbegin\nif (data.conn.state in [HCS_REPLYING_BODY, HCS_POSTING])\nand (data.eta.idx > ETA_FRAME) then result:=elapsedToStr(data.eta.result)\nelse result:='-'\nend; // getETA\n\nfunction tplFromFile(f:Tfile):Ttpl;\nbegin result:=Ttpl.create(f.getRecursiveDiffTplAsStr(), tpl) end;\n\nprocedure setDefaultIP(v:string);\nvar\n  old: string;\nbegin\nold:=defaultIP;\nif v > '' then defaultIP:=v\nelse if externalIP > '' then defaultIP:=externalIP\nelse defaultIP:=getIP();\nif mainfrm = NIL then exit;\nmainfrm.updateUrlBox();\nif old = defaultIP then exit;\ntry\n  v:=clipboard.AsText;\n  if pos(old, v) = 0 then exit;\nexcept end;\nsetClip( replaceStr(v, old, defaultIP) );\nend; // setDefaultIP\n\nfunction name2mimetype(fn:string; default:string):string;\nvar\n  i: integer;\nbegin\nresult:=default;\nfor i:=0 to length(mimeTypes) div 2-1 do\n  if fileMatch(mimeTypes[i*2], fn) then\n    begin\n    result:=mimeTypes[i*2+1];\n    exit;\n    end;\nfor i:=0 to length(DEFAULT_MIME_TYPES) div 2-1 do\n  if fileMatch(DEFAULT_MIME_TYPES[i*2], fn) then\n    begin\n    result:=DEFAULT_MIME_TYPES[i*2+1];\n    exit;\n    end;\nend; // name2mimetype\n\nprocedure Tmainfrm.getPage(sectionName:string; data:TconnData; f:Tfile=NIL; tpl2use:Ttpl=NIL);\nvar\n  md: TmacroData;\n\n procedure addProgressSymbols();\n  var\n    t, files, fn: string;\n    i: integer;\n    d: TconnData;\n    perc: real;\n    bytes, total: int64;\n  begin\n  if sectionName <> 'progress' then exit;\n\n  bytes:=0; total:=0; // shut up compiler\n  files:='';\n  i:=-1;\n    repeat // a while-loop would look better but would lead to heavy indentation\n    inc(i);\n    if i >= srv.conns.count then break;\n    d:=conn2data(i);\n    if d.address <> data.address then continue;\n    fn:='';\n    // fill fields\n    if isReceivingFile(d) then\n      begin\n      t:=tpl2use['progress-upload-file'];\n      fn:=d.uploadSrc; // already encoded by the browser\n      bytes:=d.conn.bytesPosted;\n      total:=d.conn.post.length;\n      end;\n    if isSendingFile(d) then\n      begin\n      if d.conn.reply.bodymode <> RBM_FILE then continue;\n      t:=tpl2use['progress-download-file'];\n      fn:=d.lastFN;\n      bytes:=d.conn.bytesSentLastItem;\n      total:=d.conn.bytesPartial;\n      end;\n    perc:=safeDiv(0.0+bytes, total); // 0.0 forces a typecast that will call the right overloaded function\n    // no file exchange\n    if fn = '' then continue;\n    fn:=macroQuote(fn);\n    // apply fields\n    files:=files+xtpl(t, [\n      '%item-user%', macroQuote(d.user),\n      '%perc%',intToStr( trunc(perc*100) ),\n      '%filename%', fn,\n      '%filename-js%', jsEncode(fn, '''\"'),\n      '%done-bytes%', intToStr(bytes),\n      '%total-bytes%', intToStr(total),\n      '%done%', smartsize(bytes),\n      '%total%', smartsize(total),\n      '%time-left%', getETA(d),\n      '%speed-kb%', floatToStrF(d.averageSpeed/1000, ffFixed, 7,1),\n      '%item-ip%', d.address,\n      '%item-port%', d.conn.port\n    ]);\n    until false;\n  if files = '' then files:=tpl2use['progress-nofiles'];\n  addArray(md.table, ['%progress-files%', files]);\n  end; // addProgressSymbols\n\n  procedure addUploadSymbols();\n  var\n    i: integer;\n    files: string;\n  begin\n  if sectionName <> 'upload' then exit;\n  files:='';\n  for i:=1 to 10 do\n    files:=files+ replaceText(tpl2use['upload-file'], '%idx%',intToStr(i));\n  addArray(md.table, ['%upload-files%', files]);\n  end; // addUploadSymbols\n\n  procedure addUploadResultsSymbols();\n  var\n    files: string;\n    i: integer;\n  begin\n  if sectionName <> 'upload-results' then exit;\n  files:='';\n  for i:=0 to length(data.uploadResults)-1 do\n    with data.uploadResults[i] do\n      files:=files+xtpl(tpl2use[ if_(reason='','upload-success','upload-failed') ],[\n        '%item-name%', htmlEncode(macroQuote(fn)),\n        '%item-url%', macroQuote(encodeURL(fn)),\n        '%item-size%', smartsize(size),\n        '%item-resource%', f.resource+'\\'+fn,\n        '%idx%', intToStr(i+1),\n        '%reason%', reason,\n        '%speed%', intToStr(speed div 1000), // legacy\n        '%smart-speed%', smartsize(speed)\n      ]);\n  addArray(md.table, ['%uploaded-files%', files]);\n  data.uploadResults:=NIL; // reset\n  end; // addUploadResultsSymbols\n\nvar\n  s: string;\n  section: PtplSection;\n  buildTime: Tdatetime;\n  externalTpl: boolean;\nbegin\nbuildTime:=now();\n\nexternalTpl:=assigned(tpl2use);\nif not externalTpl then\n  tpl2use:=tplFromFile(Tfile(first(f, rootFile)));\nif assigned(data.tpl) then\n  begin\n  data.tpl.over:=tpl2use.over;\n  tpl2use.over:=data.tpl;\n  end;\n\n\ntry\n  data.conn.reply.mode:=HRM_REPLY;\n  data.conn.reply.bodyMode:=RBM_STRING;\n  data.conn.reply.body:='';\nexcept end;\n\nsection:=tpl2use.getSection(sectionName);\nif section = NIL then exit;\n\ntry\n  fillChar(md, sizeOf(md), 0);\n  addUploadSymbols();\n  addProgressSymbols();\n  addUploadResultsSymbols();\n  //addArray(md.table, ['%folder%', data.f.]);\n  if data = NIL then s:=''\n  else s:=first(data.banReason, data.disconnectReason);\n  addArray(md.table, ['%reason%', s]);\n\n  data.conn.reply.contentType:=ansistring(name2mimetype(sectionName, 'text/html'));\n  if sectionName = 'ban' then data.conn.reply.mode:=HRM_DENY;\n  if sectionName = 'deny' then data.conn.reply.mode:=HRM_DENY;\n  if sectionName = 'login' then data.conn.reply.mode:=HRM_DENY;\n  if sectionName = 'not found' then data.conn.reply.mode:=HRM_NOT_FOUND;\n  if sectionName = 'unauthorized' then data.conn.reply.mode:=HRM_UNAUTHORIZED;\n  if sectionName = 'overload' then data.conn.reply.mode:=HRM_OVERLOAD;\n  if sectionName = 'max contemp downloads' then data.conn.reply.mode:=HRM_OVERLOAD;\n\n  md.cd:=data;\n  md.tpl:=tpl2use;\n  md.folder:=f;\n  md.f:=NIL;\n  md.archiveAvailable:=FALSE;\n  s:=tpl2use['special:begin'];\n  tryApplyMacrosAndSymbols(s, md, FALSE);\n\n  if data.conn.reply.mode = HRM_REPLY then\n    s:=section.txt\n  else\n    begin\n    s:=replaceText(tpl2use['error-page'], '%content%', section.txt);\n    if s = '' then\n      s:=section.txt;\n    end;\n\n  tryApplyMacrosAndSymbols(s, md);\n\n  s:=replaceText(s, '%build-time%',\n    floatToStrF((now()-buildTime)*SECONDS, ffFixed, 7,3) );\n  data.conn.reply.body:=UTF8encode(s);\n  if section.nolog then data.dontLog:=TRUE;\n  compressReply(data);\nfinally\n  if not externalTpl then\n    tpl2use.free\n  end\nend; // getPage\n\nprocedure TmainFrm.findExtOnStartupChkClick(Sender: TObject);\nresourcestring\n  MSG = 'This option is NOT compatible with \"dynamic dns updater\".'\n    +#13'Continue?';\nbegin\nwith sender as TMenuItem do\n  if dyndns.active and (dyndns.url > '') and checked then\n    checked:= msgDlg(MSG, MB_ICONWARNING+MB_YESNO) = MRYES;\nend;\n\nfunction notModified(conn:ThttpConn; etag, ts:string):boolean; overload;\nbegin\nresult:= (etag>'') and (etag = conn.getHeader('If-None-Match'));\nif result then\n  begin\n  conn.reply.mode:=HRM_NOT_MODIFIED;\n  exit;\n  end;\nconn.addHeader('ETag: '+UTF8encode(etag));\nif ts > '' then\n  conn.addHeader('Last-Modified: '+UTF8encode(ts));\nend; // notModified\n\nfunction notModified(conn:ThttpConn; f:string):boolean; overload;\nbegin result:=notModified(conn, getEtag(f), dateToHTTP(f)) end;\n\nfunction notModified(conn:ThttpConn; f:Tfile):boolean; overload;\nbegin result:=notModified(conn, f.resource) end;\n\nfunction Tmainfrm.sendPic(cd:TconnData; idx:integer=-1):boolean;\nvar\n  s, url: string;\n  special: (no, graph);\nbegin\nurl:=decodeURL(cd.conn.request.url);\nresult:=FALSE;\nspecial:=no;\nif idx < 0 then\n  begin\n  s:=url;\n  if not ansiStartsText('/~img', s) then exit;\n  delete(s,1,5);\n  // converts special symbols\n  if ansiStartsText('_graph', s) then special:=graph else\n  if ansiStartsText('_link', s) then idx:=ICON_LINK else\n  if ansiStartsText('_file', s) then idx:=ICON_FILE else\n  if ansiStartsText('_folder', s) then idx:=ICON_FOLDER else\n  if ansiStartsText('_lock', s) then idx:=ICON_LOCK else\n    try idx:=strToInt(s) except exit end;\n  end;\n\nif (special = no) and ((idx < 0) or (idx >= images.count)) then exit;\n\ncase special of\n  no: cd.conn.reply.body:=pic2str(idx);\n  graph: cd.conn.reply.body:=getGraphPic(cd);\n  end;\n\nresult:=TRUE;\n{**\n// browser caching support\nif idx < startingImagesCount then\n  s:=intToStr(idx)+':'+etags.values['exe']\nelse\n  s:=etags.values['icon.'+intToStr(idx)];\nif notModified(cd.conn, s, '') then\n  exit;\n}\ncd.conn.reply.mode:=HRM_REPLY;\ncd.conn.reply.contentType:='image/gif';\ncd.conn.reply.bodyMode:=RBM_STRING;\ncd.downloadingWhat:=DW_ICON;\ncd.lastFN:=copy(url,2,1000);\nend; // sendPic\n\nfunction getAgentID(s:string):string; overload;\nvar\n  res: string;\n\n  function test(id:string):boolean;\n  var\n    i: integer;\n  begin\n  result:=FALSE;\n  i:=pos(id,s);\n  case i of\n    0: exit;\n    1: res:=getTill('/', getTill(' ',s));\n    else\n      begin\n      delete(s,1,i-1);\n      res:=getTill(';',s);\n      end;\n    end;\n  result:=TRUE;\n  end; // its\n\nbegin\nresult:=stripChars(s,['<','>']);\nif test('Crazy Browser')\nor test('iPhone')\nor test('iPod')\nor test('iPad')\nor test('Chrome')\nor test('WebKit') // generic webkit browser\nor test('Opera')\nor test('MSIE')\nor test('Mozilla') then\n  result:=res;\nend; // getAgentID\n\nfunction getAgentID(conn:ThttpConn):string; overload;\nbegin result:=getAgentID(conn.getHeader('User-Agent')) end;\n\nprocedure setupDownloadIcon(data:TconnData);\n\n  procedure painticon();\n  var\n    bmp: Tbitmap;\n    s: string;\n    perc: real;\n  begin\n  perc:=safeDiv(0.0+data.conn.bytesSentLastItem, data.conn.bytesPartial);\n  s:=intToStr( trunc(perc*100) )+'%';\n  bmp:=getBaseTrayIcon(perc);\n  drawTrayIconString(bmp.canvas, s);\n  data.tray_ico.Handle:=bmpToHico(bmp);\n  bmp.free;\n  data.tray.setIcon(data.tray_ico);\n  data.tray.setTip(\n    if_( data.conn.reply.bodyMode=RBM_STRING, decodeURL(data.conn.request.url), data.lastFN )\n    +trayNL+format('%.1f KB/s', [data.averageSpeed/1000])\n    +trayNL+dotted(data.conn.bytesSentLastItem)+' bytes sent'\n    +trayNL+data.address\n  );\n  data.tray.show();\n  end; // paintIcon\n\nbegin\nif (data = NIL) or (data.conn = NIL) then exit;\nif assigned(data.tray)\nand ((data.conn.state <> HCS_REPLYING_BODY) or\n  (data.conn.bytesSentLastItem = data.conn.bytesPartial)) then\n  begin\n  data.tray.hide();\n  freeAndNIL(data.tray);\n  data.tray_ico.free;\n  exit;\n  end;\nif not isSendingFile(data) then exit;\n\nif not data.countAsDownload then exit;\n\nif data.tray = NIL then\n  begin\n  data.tray:=TmyTrayIcon.create(mainfrm);\n  data.tray.data:=data;\n  data.tray_ico:=Ticon.create();\n  data.tray.onEvent:=mainfrm.downloadTrayEvent;\n  end;\nif mainfrm.trayfordownloadChk.checked and isSendingFile(data) then\n  paintIcon()\nelse data.tray.hide();\nend; // setupDownloadIcon\n\nfunction getDynLogFilename(cd:TconnData):string; overload;\nvar\n  d, m, y, w: word;\n  u: string;\nbegin\ndecodeDateFully(now(), y,m,d,w);\nif cd = NIL then u:=''\nelse u:=nonEmptyConcat('(', cd.user, ')');\nresult:=xtpl(logFile.filename, [\n  '%d%', int0(d,2),\n  '%m%', int0(m,2),\n  '%y%', int0(y,4),\n  '%dow%', int0(w-1,2),\n  '%w%', int0(weekOf(now()),2),\n  '%user%', u\n]);\nend; // getDynLogFilename\n\nprocedure applyISOdateFormat();\nbegin\nif mainfrm.useISOdateChk.checked then FormatSettings.ShortDateFormat:='yyyy-mm-dd'\nelse FormatSettings.ShortDateFormat:=GetLocaleStr(LOCALE_USER_DEFAULT, LOCALE_SSHORTDATE,'');\nend;\n\nprocedure Tmainfrm.add2log(lines:string; cd:TconnData=NIL; clr:Tcolor=Graphics.clDefault);\nvar\n  s, ts, first, rest, addr: string;\nbegin\nif not logOnVideoChk.checked\nand ((logFile.filename = '') or (logFile.apacheFormat > '')) then\n  exit;\n\nif clr = Graphics.clDefault then\n  clr:=clWindowText;\n\nif logDateChk.checked then\n  begin\n  applyISOdateFormat(); // this call shouldn't be necessary here, but it's a workaround to this bug www.rejetto.com/forum/?topic=5739\n  if logTimeChk.checked then ts:=datetimeToStr(now())\n  else ts:=dateToStr(now())\n  end\nelse\n  if logTimeChk.checked then ts:=timeToStr(now())\n  else ts:='';\n\nfirst:=chopLine(lines);\nif lines = '' then\n  rest:=''\nelse\n  rest:=reReplace(lines, '^', '> ')+CRLF;\n\naddr:='';\nif assigned(cd) and assigned(cd.conn) then\n  addr:=nonEmptyConcat('', cd.user, '@')\n    +cd.address+':'+cd.conn.port\n    +nonEmptyConcat(' {', localDNSget(cd.address), '}');\n\nif (logFile.filename > '') and (logFile.apacheFormat = '') then\n  begin\n  s:=ts;\n  if (cd = NIL) or (cd.conn = nil) then s:=s+TAB+''+TAB+''+TAB+''+TAB+''\n  else s:=s+TAB+cd.user+TAB+cd.address+TAB+cd.conn.port+TAB+localDNSget(cd.address);\n  s:=s+TAB+first;\n\n  if tabOnLogFileChk.checked then s:=s+stripChars(reReplace(lines, '^', TAB),[#13,#10])\n  else s:=s+CRLF+rest;\n\n  includeTrailingString(s,CRLF);\n  appendTextFile(getDynLogFilename(cd), s);\n  end;\n\nif not logOnVideoChk.checked then exit;\n\nlogbox.selstart:=length(logbox.Text);\nlogBox.SelAttributes.name:=logFontName;\nif logFontSize > 0 then\n  logBox.SelAttributes.size:=logFontSize;\nlogBox.SelAttributes.Color:=clRed;\nlogBox.SelText:=ts+' ';\nif addr > '' then\n  begin\n  logBox.SelAttributes.Color:=ADDRESS_COLOR;\n  logBox.SelText:=addr+' ';\n  end;\nlogBox.SelAttributes.color:=clr;\nlogBox.SelText:=first+CRLF;\nlogBox.selAttributes.color:=clBlue;\nlogBox.SelText:=rest;\n\nif (logMaxLines = 0) or (logBox.Lines.Count <= logMaxLines) then exit;\n// found no better way to remove multiple lines with a single move\nlogBox.perform(WM_SETREDRAW, 0, 0);\ntry\n  logBox.SelStart:=0;\n  logBox.SelLength:=logBox.perform(EM_LINEINDEX, logBox.lines.count-round(logMaxLines*0.9), 0);;\n  logBox.selText:='';\n  logbox.selstart:=length(logbox.Text);\nfinally\n  logBox.perform(WM_SETREDRAW, 1, 0);\n  logBox.invalidate();\n  end;\nend; // add2log\n\nfunction isBanned(address:string; out comment:string):boolean; overload;\nvar\n  i:integer;\nbegin\nresult:=TRUE;\nfor i:=0 to length(banlist)-1 do\n  if addressMatch(banlist[i].ip, address) then\n    begin\n    comment:=banlist[i].comment;\n    exit;\n    end;\nresult:=FALSE;\nend; // isBanned\n\nfunction isBanned(cd:TconnData):boolean; overload;\nbegin result:=assigned(cd) and isBanned(cd.address, cd.banReason) end;\n\nprocedure kickBannedOnes();\nvar\n  i: integer;\n  d: TconnData;\nbegin\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  d:=conn2data(i);\n  if isBanned(d) then\n    d.disconnect(first(d.disconnectReason, 'kick banned'));\n  inc(i);\n  end;\nend; // kickBannedOnes\n\nfunction startServer():boolean;\n\n  procedure tryPorts(list:array of string);\n  var\n    i: integer;\n  begin\n  for i:=0 to length(list)-1 do\n    begin\n    srv.port:=trim(list[i]);\n    if srv.start(listenOn) then exit;\n    end;\n  end; // tryPorts\n\nbegin\nresult:=FALSE;\nif srv.active then exit; // fail if already active\n\nif (localIPlist.IndexOf(listenOn) < 0) and (listenOn <> '127.0.0.1') then\n  listenOn:='';\n\nif port > '' then\n  tryPorts([port])\nelse\n  tryPorts(['80','8080','280','10080','0']);\nif not srv.active then exit; // failed\nupTime:=now();\nresult:=TRUE;\nend; // startServer\n\nprocedure stopServer();\nbegin if assigned(srv) then srv.stop() end;\n\nprocedure sayPortBusy(port:string);\nvar\n  fn: string;\nbegin\ntry fn:=extractFileName(pid2file(port2pid(port)));\nexcept fn:='' end;\nmsgDlg('Cannot open port.'#13+if_(fn>'', 'It is already used by '+fn, 'Something is blocking, maybe your system firewall.'), MB_ICONERROR);\nend; // sayPortBusy\n\nprocedure toggleServer();\nresourcestring\n  MSG2 = 'There are %d connections open.'#13'Do you want to close them now?';\nbegin\nif srv.active then stopServer()\nelse\n  if not startServer() then\n    sayPortBusy(srv.port);\nif (srv.conns.count = 0) or srv.active then exit;\nif msgDLg(format(MSG2,[srv.conns.count]), MB_ICONQUESTION+MB_YESNO) = IDYES then\n  kickByIP('*');\nend; // toggleServer\n\nfunction restartServer():boolean;\nvar\n  port: string;\nbegin\nresult:=FALSE;\nif not srv.active then exit;\nport:=srv.port;\nsrv.stop();\nsrv.port:=port;\nresult:=srv.start(listenOn);\nend; // restartServer\n\nprocedure updatePortBtn();\nbegin\nif assigned(srv) then\n  mainfrm.portBtn.Caption:=format(S_PORT_LABEL, [\n    if_(srv.active, srv.port, first(port,S_PORT_ANY))]);\nend; // updatePortBtn\n\nprocedure apacheLogCb(re:TregExpr; var res:string; data:pointer);\nconst\n  APACHE_TIMESTAMP_FORMAT = 'dd\"/!!!/\"yyyy\":\"hh\":\"nn\":\"ss';\nvar\n  code, codes, par: string;\n  cmd: char;\n  cd: TconnData;\n\n  procedure extra();\n  var\n    i: integer;\n  begin\n  // apache log standard for \"nothing\" is \"-\", but \"-\" is a valid filename\n  res:='';\n  if cd.uploadResults = NIL then exit;\n  for i:=0 to length(cd.uploadResults)-1 do\n    with cd.uploadResults[i] do\n      if reason = '' then\n        res:=res+fn+'|';\n  setLength(res, length(res)-1);\n  end; // extra\n\nbegin\ncd:=data;\nif cd = NIL then exit; // something's wrong\ncode:=intToStr(HRM2CODE[cd.conn.reply.mode]);\n// first parameter specifies http code to match as CSV, with leading '!' to invert logic\ncodes:=re.match[1];\nif (codes > '') and ((pos(code, codes) > 0) = (codes[1] = '!')) then\n  begin\n  res:='-';\n  exit;\n  end;\npar:=re.match[3];\ncmd:=re.match[4][1]; // it's case sensitive\ntry\n  case cmd of\n    'a', 'h': res:=cd.address;\n    'l': res:='-';\n    'u': res:=first(cd.user, '-');\n    't': res:='['\n      +replaceStr(formatDatetime(APACHE_TIMESTAMP_FORMAT, now()),\n        '!!!',MONTH2STR[monthOf(now())])\n      +' '+logfile.apacheZoneString+']';\n    'r': res:=getTill(CRLF, cd.conn.request.full);\n    's': res:=code;\n    'B': res:=intToStr(cd.conn.bytesSentLastItem);\n    'b': if cd.conn.bytesSentLastItem = 0 then res:='-' else res:=intToStr(cd.conn.bytesSentLastItem);\n    'i': res:=cd.conn.getHeader(ansistring(par));\n    'm': res:=METHOD2STR[cd.conn.request.method];\n    'c': if (cd.conn.bytesToSend > 0) and (cd.conn.state = HCS_DISCONNECTED) then res:='X'\n          else if cd.disconnectAfterReply then res:='-'\n          else res:='+';\n    'e': res:=getEnvironmentVariable(par);\n    'f': res:=cd.lastFile.name;\n    'H': res:='HTTP'; // no way\n    'p': res:=srv.port;\n    'z': extra(); // extra information specific for hfs\n    else res:='UNSUPPORTED';\n    end;\nexcept res:='ERROR' end;\nend; // apacheLogCb\n\nprocedure removeFilesFromComments(files:TStringDynArray);\nvar\n  fn, lastPath, path: string;\n  trancheStart, trancheEnd: integer; // the tranche is a window within 'files' of items sharing the same path\n  ss: TstringList;\n\n  procedure doTheTranche();\n  var\n    i, b: integer;\n    fn, s: string;\n    anyChange: boolean;\n  begin\n  // leave only the files' name\n  for i:=trancheStart to trancheEnd do\n    files[i]:=copy(files[i],length(lastPath)+1,MAXINT);\n  // comments file\n  try\n    fn:=lastPath+COMMENTS_FILE;\n    ss.loadFromFile(fn);\n    anyChange:=FALSE;\n    for i:=trancheStart to trancheEnd do\n      begin\n      b:=ss.indexOfName(files[i]);\n      if b < 0 then continue;\n      ss.delete(b);\n      anyChange:=TRUE;\n      end;\n    if anyChange then\n      if ss.count = 0 then\n        deleteFile(fn)\n      else\n        ss.saveToFile(fn);\n  except end;\n  // descript.ion\n  if not mainfrm.supportDescriptionChk.checked then exit;\n  try\n    fn:=path+DESCRIPT_ION;\n    s:=loadTextFile(fn);\n    if s = '' then exit;\n    if mainfrm.oemForIonChk.checked then\n      OEMToCharBuff(@s[1], @s[1], length(s));\n    anyChange:=FALSE;\n    for i:=trancheStart to trancheEnd do\n      begin\n      b:=findNameInDescriptionFile(s, files[i]);\n      if b = 0 then continue;\n      delete(s, b, findEOL(s,b)-b+1);\n      anyChange:=TRUE;\n      end;\n    if anyChange then\n      if s='' then\n        deleteFile(fn)\n      else\n        saveTextfile(fn, s);\n  except end;\n  end; // doTheTranche\n\nbegin\n// collect files with same path in tranche, then process it\nsortArray(files);\ntrancheStart:=0;\nss:=TstringList.create(); // we'll use this in doTheTranche(), but create the object once, as an optimization\ntry\n  ss.caseSensitive:=FALSE;\n  for trancheEnd:=0 to length(files)-1 do\n    begin\n    fn:=files[trancheEnd];\n    path:=getTill(lastDelimiter('\\/', fn), fn);\n    if trancheEnd = 0 then\n      lastPath:=path;\n    if path <> lastPath then\n      begin\n      doTheTranche();\n      // init the new tranche\n      trancheStart:=trancheEnd+1;\n      lastPath:=path;\n      end;\n    end;\n  trancheEnd:=length(files)-1; // after the for-loop, the variable seems to not be reliable\n  doTheTranche();\nfinally ss.free end;\nend; // removeFilesFromComments\n\nprocedure runTplImport();\nvar\n  f, fld: Tfile;\nbegin\nf:=Tfile.create(tplFilename);\nfld:=Tfile.create(extractFilePath(tplFilename));\ntry runScript(tpl['special:import'], NIL, tpl, f, fld);\nfinally\n  freeAndNIL(f);\n  freeAndNIL(fld);\n  end;\nend; // runTplImport\n\n// returns true if template was patched\nfunction setTplText(text:string):boolean;\n(* postponed to next release\n  procedure patch290();\n  {$J+}\n  const\n    PATCH: string = '';\n    PATCH_RE = '(\\[ajax\\.mkdir.+)\\[special:import';\n  var\n    se: TstringDynArray;\n    i: integer;\n  begin\n  // is it default tpl?\n  if not ansiStartsText('Welcome! This is the default template for HFS 2.3', text) then\n    exit;\n  // needs to be patched?\n  if pos('template revision TR1.',substr(text,1,80)) = 0 then\n    exit;\n  // calculate the patch once\n  if length(PATCH)=0 then\n    PATCH:=reGet(defaultTpl, PATCH_RE, 1, '!mis');\n  {$J-}\n  // find the to-be-patched\n  i:=reMatch(text, PATCH_RE, '!mis', 1, @se);\n  if i=0 then exit; // something is wrong\n  result:=TRUE; // mark\n  replace(text, PATCH, i, i+length(se[1])-1); // real patch\n  text:=stringReplace(text, 'template revision TR1.', 'template revision TR3.', []); // version stamp\n  end;//patchIt\n*)\nbegin\nresult:=FALSE; // mod by mars\n//patch290();\ntpl.fullText:=text;\ntplIsCustomized:= text <> defaultTpl;\nif boolOnce(tplImport) then\n  runTplImport();\nend; // setTplText\n\nprocedure keepTplUpdated();\nbegin\nif fileExists(tplFilename) then\n  begin\n  if newMtime(tplFilename, tplLast) then\n    if setTplText(loadTextFile(tplFilename)) then\n      saveTextFile(tplFilename, tpl.fullText);\n  end\nelse if tplLast <> 0 then\n  begin\n  tplLast:=0; // we have no modified-time in this case, but this will stop the refresh\n  setTplText(defaultTpl);\n  end;\nend; // keepTplUpdated\n\nprocedure setNewTplFile(fn:string);\nbegin\ntplFilename:=fn;\ntplImport:=TRUE;\ntplLast:=0;\nend; // setNewTplFile\n\nprocedure Tmainfrm.httpEvent(event:ThttpEvent; conn:ThttpConn);\nvar\n  data: TconnData;\n  f: Tfile;\n  url: string;\n\n  procedure switchToDefaultFile();\n  var\n    default: Tfile;\n  begin\n  if (f = NIL) or not f.isFolder() then exit;\n  default:=f.getDefaultFile();\n  if default = NIL then exit;\n  freeIfTemp(f);\n  f:=default;\n  end; // switchToDefaultFile\n\n  function calcAverageSpeed(bytes:int64):integer;\n  begin result:=round(safeDiv(bytes, (now()-data.fileXferStart)*SECONDS)) end;\n\n  function runEventScript(event:string; table:array of string):string; overload;\n  var\n    md: TmacroData;\n    pleaseFree: boolean;\n  begin\n  result:=trim(eventScripts[event]);\n  if result = '' then exit;\n  fillChar(md, sizeOf(md), 0);\n  md.cd:=data;\n  md.table:=toSA(table);\n  md.tpl:=eventScripts;\n  addArray(md.table, ['%event%', event]);\n  pleaseFree:=FALSE;\n  try\n    if isReceivingFile(data) then\n      begin\n      // we must encapsulate it in a Tfile to expose file properties to the script. we don't need to cache the object because we need it only once.\n      md.f:=Tfile.createTemp(data.uploadDest);\n      md.f.size:=sizeOfFile(data.uploadDest);\n      pleaseFree:=TRUE;\n\n      md.folder:=data.lastFile;\n      if assigned(md.folder) then\n        md.f.node:=md.folder.node;\n      end\n    else if assigned(f) then\n      md.f:=f\n    else if assigned(data) then\n      md.f:=data.lastFile;\n\n    if assigned(md.f) and (md.folder = NIL) then\n      md.folder:=md.f.getParent();\n\n    tryApplyMacrosAndSymbols(result, md);\n\n  finally\n    if pleaseFree then\n      freeIfTemp(md.f);\n    end;\n  end; // runEventScript\n\n  function runEventScript(event:string):string; overload;\n  begin result:=runEventScript(event, []) end;\n\n  procedure doLog();\n  var\n    i: integer;\n    url_: string; // an alias, final '_' is to not confuse with the other var\n    s: string;\n  begin\n  if assigned(data) and data.dontLog and (event <> HE_DISCONNECTED) then exit; // we exit expect for HE_DISCONNECTED because dontLog is always set AFTER connections, so HE_CONNECTED is always logged. The coupled HE_DISCONNECTED should be then logged too.\n\n  if assigned(data) and (data.preReply = PR_BAN)\n  and not logBannedChk.checked then exit;\n\n  if conn = NIL then url_:=''\n  else url_:=decodeURL(conn.request.url);\n  if not (event in [HE_OPEN, HE_CLOSE, HE_CONNECTED, HE_DISCONNECTED, HE_GOT]) then\n    if not logIconsChk.checked and (data.downloadingWhat = DW_ICON)\n    or not logBrowsingChk.checked and (data.downloadingWhat = DW_FOLDERPAGE)\n    or not logProgressChk.checked and (url_ = '/~progress') then\n      exit;\n\n  if not (event in [HE_OPEN, HE_CLOSE])\n  and addressMatch(dontLogAddressMask, data.address) then\n    exit;\n\n  case event of\n    HE_OPEN: if logServerstartChk.Checked then add2log('Server start');\n    HE_CLOSE: if logServerstopChk.checked then add2log('Server stop');\n    HE_CONNECTED: if logconnectionsChk.Checked then add2log('Connected', data);\n    HE_DISCONNECTED: if logDisconnectionsChk.checked then\n      add2log('Disconnected'+if_(conn.disconnectedByServer, ' by server')\n        +nonEmptyConcat(': ', data.disconnectReason)\n        +if_(conn.bytesSent>0, ' - '+intToStr(conn.bytesSent)+' bytes sent'),\n      data);\n    HE_GOT:\n      begin\n      i:=conn.bytesGot-data.lastBytesGot;\n      if i <= 0 then exit;\n      if logBytesreceivedChk.Checked then\n        if now()-data.bytesGotGrouping.since <= BYTES_GROUPING_THRESHOLD then\n          inc(data.bytesGotGrouping.bytes, i)\n        else\n          begin\n          add2log(format('Got %d bytes',[i+data.bytesGotGrouping.bytes]), data);\n          data.bytesGotGrouping.since:=now();\n          data.bytesGotGrouping.bytes:=0;\n          end;\n      inc(data.lastBytesGot, i);\n      end;\n    HE_SENT:\n      begin\n      i:=conn.bytesSent-data.lastBytesSent;\n      if i <= 0 then exit;\n      if logBytessentChk.checked then\n        if now()-data.bytesSentGrouping.since <= BYTES_GROUPING_THRESHOLD then\n          inc(data.bytesSentGrouping.bytes, i)\n        else\n          begin\n          add2log(format('Sent %d bytes',[i+data.bytesSentGrouping.bytes]), data);\n          data.bytesSentGrouping.since:=now();\n          data.bytesSentGrouping.bytes:=0;\n          end;\n      inc(data.lastBytesSent, i);\n      end;\n    HE_REQUESTED:\n      if not logOnlyServedChk.checked\n      or (conn.reply.mode in [HRM_REPLY, HRM_REPLY_HEADER, HRM_REDIRECT]) then\n        begin\n        data.logLaterInApache:=TRUE;\n        if logRequestsChk.Checked then\n          begin\n          s:=subStr(conn.getHeader('Range'), 7);\n          if s > '' then\n            s:=TAB+'['+s+']';\n          add2log(format('Requested %s %s%s', [ METHOD2STR[conn.request.method], url_, s ]), data);\n          end;\n        if dumprequestsChk.checked then\n          add2log('Request dump'+CRLF+conn.request.full, data);\n        end;\n    HE_REPLIED:\n      if logRepliesChk.checked then\n        case conn.reply.mode of\n          HRM_REPLY: if not data.fullDLlogged then add2log(format('Served %s', [smartSize(conn.bytesSentLastItem)]), data);\n          HRM_REPLY_HEADER: add2log('Served head', data);\n          HRM_NOT_MODIFIED: add2log('Not modified, use cache', data);\n          HRM_REDIRECT: add2log(format('Redirected to %s', [conn.reply.url]), data);\n          else if not logOnlyServedChk.checked then\n            add2log(format('Not served: %d - %s', [HRM2CODE[conn.reply.mode], HRM2STR[conn.reply.mode] ])\n              +nonEmptyConcat(': ', data.error), data);\n          end;\n    HE_POST_FILE:\n      if logUploadsChk.checked and (data.uploadFailed = '') then\n        add2log(format('Uploading %s', [data.uploadSrc]), data);\n    HE_POST_END_FILE:\n      if logUploadsChk.checked then\n        if data.uploadFailed = '' then\n          add2log(format('Fully uploaded %s - %s @ %sB/s', [\n            data.uploadSrc,\n            smartSize(conn.bytesPostedLastItem),\n            smartSize(calcAverageSpeed(conn.bytesPostedLastItem)) ]), data)\n        else\n          add2log(format('Upload failed %s', [data.uploadSrc]), data);\n    HE_LAST_BYTE_DONE:\n      if logFulldownloadsChk.checked\n      and data.countAsDownload\n      and (data.downloadingWhat in [DW_FILE, DW_ARCHIVE]) then\n        begin\n        data.fullDLlogged:=TRUE;\n        add2log(format('Fully downloaded - %s @ %sB/s - %s', [\n          smartSize(conn.bytesSentLastItem),\n          smartSize(calcAverageSpeed(conn.bytesSentLastItem)),\n          url_]), data);\n        end;\n    end;\n\n  { apache format log is only related to http events, that's why it resides\n  { inside httpEvent(). moreover, it needs to access to some variables. }\n  if (logFile.filename = '') or (logFile.apacheFormat = '')\n  or (data = NIL) or not data.logLaterInApache\n  or not (event in [HE_LAST_BYTE_DONE, HE_DISCONNECTED]) then exit;\n\n  data.logLaterInApache:=FALSE;\n  s:=xtpl(logfile.apacheFormat, [\n    '\\t', TAB,\n    '\\r', #13,\n    '\\n', #10,\n    '\\\"', '\"',\n    '\\\\', '\\'\n  ]);\n  s:=reCB('%(!?[0-9,]+)?(\\{([^}]+)\\})?>?([a-z])', s, apacheLogCb, data);\n  appendTextFile(getDynLogFilename(data), s+CRLF);\n  end; // doLog\n\n  function limitsExceededOnConnection():boolean;\n  begin\n  if noLimitsFor(data.account) then result:=FALSE\n  else\n    result:=(maxConnections>0) and (srv.conns.count > maxConnections)\n      or (maxConnectionsIP>0)\n        and (countConnectionsByIP(data.address) > maxConnectionsIP)\n      or (maxIPs>0) and (countIPs() > maxIPs)\n  end; // limitsExceededOnConnection\n\n  function limitsExceededOnDownload():boolean;\n  var\n    was: string;\n  begin\n  result:=FALSE;\n  data.disconnectReason:='';\n\n  if data.conn.ignoreSpeedLimit then exit;\n\n  if (maxContempDLs > 0) and (countDownloads() > maxContempDLs)\n  or (maxContempDLsIP > 0) and (countDownloads(data.address) > maxContempDLsIP) then\n    data.disconnectReason:='Max simultaneous downloads'\n  else if (maxIPsDLing > 0) and (countIPs(TRUE) > maxIPsDLing) then\n    data.disconnectReason:='Max simultaneous addresses downloading'\n  else if preventLeechingChk.checked and (countDownloads(data.address, '', f) > 1) then\n    data.disconnectReason:='Leeching';\n\n  was:=data.disconnectReason;\n  runEventScript('download');\n\n  result:=data.disconnectReason > '';\n  if not result then exit;\n  data.countAsDownload:=FALSE;\n  getPage(if_(was=data.disconnectReason, 'max contemp downloads', 'deny'), data);\n  end; // limitsExceededOnDownload\n\n  procedure extractParams();\n  const\n    MAX = 1000;\n  var\n    s: string;\n    i: integer;\n  begin\n  s:=url;\n  url:=chop('?',s);\n  s:=replaceStr(s,'+',' ');\n  data.urlvars.text:=s;\n  for i:=0 to data.urlvars.count-1 do\n    begin\n    s:=decodeURL(ansistring(data.urlvars[i]));\n    if length(s) > MAX then\n      setLength(s, MAX);\n    data.urlvars[i]:=s;\n    end;\n  end; // extractParams\n\n  procedure closeUploadingFile();\n  begin\n  if data.f = NIL then exit;\n  closeFile(data.f^);\n  dispose(data.f);\n  data.f:=NIL;\n  end; // closeUploadingFile\n\n  // close and eventually delete/rename\n  procedure closeUploadingFile_partial();\n  begin\n  if (data = NIL) or (data.f = NIL) then exit;\n  closeUploadingFile();\n  if deletePartialUploadsChk.checked then deleteFile(data.uploadDest)\n  else if renamePartialUploads = '' then exit;\n  if ipos('%name%', renamePartialUploads) = 0 then\n    renameFile(data.uploadDest, data.uploadDest+renamePartialUploads)\n  else\n    renameFile(data.uploadDest,\n      extractFilePath(data.uploadDest) + replaceText(renamePartialUploads, '%name%',extractFileName(data.uploadDest)) );\n  end; // closeUploadingFile_partial\n\n  function isDownloadManagerBrowser():boolean;\n  begin\n  result:=(pos('GetRight',data.agent)>0)\n    or (pos('FDM',data.agent)>0)\n    or (pos('FlashGet',data.agent)>0)\n  end; // isDownloadManagerBrowser\n\n  procedure logUploadFailed();\n  begin\n  if not logUploadsChk.checked then exit;\n  add2log(format('Upload failed for %s: %s', [data.uploadSrc, data.uploadFailed]), data);\n  end; // logUploadFile\n\n  function eventToFilename(event:string; table:array of string):string;\n  var\n    i: integer;\n  begin\n  result:=trim(stripChars(runEventScript(event, table), [TAB,#10,#13]));\n  // turn illegal chars into underscores\n  for i:=1 to length(result) do\n    if charInSet(result[i], ILLEGAL_FILE_CHARS-[':','\\']) then\n      result[i]:='_';\n  end; // eventToFilename\n\n  procedure getUploadDestinationFileName();\n  var\n    i: integer;\n    fn, ext, s: string;\n  begin\n  new(data.f);\n  fn:=data.uploadSrc;\n\n  data.uploadDest:=f.resource+'\\'+fn;\n  assignFile(data.f^, data.uploadDest );\n\n  // see if an event script wants to change the name\n  s:=eventToFilename('upload name', []);\n\n  if validFilepath(s) then // is it valid anyway?\n    begin\n    if pos('\\', s) = 0 then  // it's just the file name, no path specified: must include the path of the current folder\n      s:=f.resource+'\\'+s;\n    // ok, we'll use this new name\n    data.uploadDest:=s;\n    fn:=extractFileName(s);\n    end;\n\n  if numberFilesOnUploadChk.checked then\n    begin\n    ext:=extractFileExt(fn);\n    setLength(fn, length(fn)-length(ext));\n    i:=0;\n    while fileExists(data.uploadDest) do\n      begin\n      inc(i);\n      data.uploadDest:=format('%s\\%s (%d)%s', [f.resource, fn, i, ext]);\n      end;\n    end;\n  assignFile(data.f^, data.uploadDest);\n  end; // getUploadDestinationFileName\n\n  procedure addContentDisposition(attach:boolean=TRUE);\n  var s:ansistring;\n  begin\n  s:=ansistring(HSlib.encodeURL(data.lastFN));\n  conn.addHeader( ansistring('Content-Disposition: '+if_(attach, 'attachment; ')\n    +'filename*=UTF-8'''''+s+'; filename='+s));\n  end;\n\n  function sessionSetup():boolean;\n  var\n    sid: string;\n  begin\n  result:=TRUE;\n  if data = NIL then\n    exit;\n  data.user:='';\n  data.pwd:='';\n  if data.session = NIL then\n    begin\n    sid:=conn.getCookie(SESSION_COOKIE);\n    if sid = '' then\n      sid:=data.urlvars.Values[SESSION_COOKIE];\n    if sid = '' then\n      begin\n      data.session:=Tsession.create();\n      data.session.ip:=conn.address;\n      conn.setCookie(SESSION_COOKIE, data.session.id, ['path','/'], 'HttpOnly'); // the session is site-wide, even if this request was related to a folder\n      end\n    else\n      try\n        data.session:=sessions[sid];\n        if data.session.ip <> conn.address then\n          begin\n          conn.reply.mode:=HRM_DENY;\n          result:=FALSE;\n          exit;\n          end;\n      except\n        data.session:=Tsession.create(sid); // probably expired\n        data.session.ip:=conn.address;\n        end;\n    end;\n  if conn.request.user > '' then // priority\n    begin\n    data.user:=conn.request.user;\n    data.pwd:=conn.request.pwd;\n    data.account:=NIL;\n    exit;\n    end;\n  data.account:=getAccount(data.session.user);\n  if data.account = NIL then\n    exit;\n  data.user:=data.account.user;\n  data.pwd:=data.account.pwd;\n  if data.session.redirect > '' then\n    begin    \n    conn.reply.mode:=HRM_REDIRECT;\n    conn.reply.url:=data.session.redirect;\n    data.session.redirect:=''; // only once\n    result:=FALSE;\n    end;\n  end; // sessionSetup\n\n  procedure serveTar();\n  var\n    tar: TtarStream;\n    nofolders, selection, itsAsearch: boolean;\n\n    procedure addFolder(f:Tfile; ignoreConnFilters:boolean=FALSE);\n    var\n      i, ofs: integer;\n      listing: TfileListing;\n      fi: Tfile;\n      fIsTemp: boolean;\n      s: string;\n    begin\n    if not f.accessFor(data) then exit;\n    listing:=TfileListing.create();\n    try\n      listing.ignoreConnFilter:=ignoreConnFilters;\n      listing.fromFolder( f, data, shouldRecur(data));\n      fIsTemp:=f.isTemp();\n      ofs:=length(f.resource)-length(f.name)+1;\n      for i:=0 to length(listing.dir)-1 do\n        begin\n        if conn.state = HCS_DISCONNECTED then\n          break;\n\n        fi:=listing.dir[i];\n        // we archive only files, folders are just part of the path\n        if not fi.isFile() then continue;\n        if not fi.accessFor(data) then continue;\n\n        // build the full path of this file as it will be in the archive\n        if noFolders then\n          s:=fi.name\n        else if fIsTemp and not (FA_SOLVED_LNK in fi.flags)then\n          s:=copy(fi.resource, ofs, MAXINT) // pathTill won't work this case, because f.parent is an ancestor but not necessarily the parent\n        else\n          s:=fi.pathTill(f.parent); // we want the path to include also f, so stop at f.parent\n\n        tar.addFile(fi.resource, s);\n        end\n    finally listing.free end;\n    end; // addFolder\n\n    procedure addSelection();\n    var\n      i: integer;\n      s: string;\n      ft: Tfile;\n    begin\n    selection:=FALSE;\n    for i:=0 to data.postvars.count-1 do\n      if sameText('selection', data.postvars.names[i]) then\n        begin\n        selection:=TRUE;\n        s:=getTill('#', data.postvars.valueFromIndex[i]); // omit #anchors\n        if dirCrossing(s) then continue;\n        ft:=findFilebyURL(s, f);\n        if ft = NIL then continue;\n\n        try\n          if not ft.accessFor(data) then\n            continue;\n          // case folder\n          if ft.isFolder() then\n            begin\n            addFolder(ft, TRUE);\n            continue;\n            end;\n          // case file\n          if not fileExists(ft.resource) then\n            continue;\n          if noFolders then\n            s:=substr(s, lastDelimiter('\\/', s)+1);\n          tar.addFile(ft.resource, s);\n        finally freeIfTemp(ft) end;\n        end;\n    end; // addSelection\n\n  begin\n  if not f.hasRecursive(FA_ARCHIVABLE) then\n    begin\n    getPage('deny', data);\n    exit;\n    end;\n  data.downloadingWhat:=DW_ARCHIVE;\n  data.countAsDownload:=TRUE;\n  if limitsExceededOnDownload() then\n    exit;\n\n  // this will let you get all files as flatly arranged in the root of the archive, without folders\n  noFolders:=not stringExists(data.postVars.values['nofolders'], ['','0','false']);\n  itsAsearch:=data.urlvars.values['search'] > '';\n\n  tar:=TtarStream.create(); // this is freed by ThttpSrv\n  try\n    tar.fileNamesOEM:=oemTarChk.checked;\n    addSelection();\n    if not selection then\n      addFolder(f);\n\n    if tar.count = 0 then\n      begin\n      tar.free;\n      data.disconnectReason:='There is no file you are allowed to download';\n      getPage('deny', data, f);\n      exit;\n      end;\n    data.fileXferStart:=now();\n    conn.reply.mode:=HRM_REPLY;\n    conn.reply.contentType:=DEFAULT_MIME;\n    conn.reply.bodyMode:=RBM_STREAM;\n    conn.reply.bodyStream:=tar;\n\n    if f.name = '' then exit; // can this really happen?\n    data.lastFN:=if_(f.name='/', 'home', f.name)\n      +'.'+if_(selection, 'selection', if_(itsAsearch, 'search', 'folder'))\n      +'.tar';\n    data.lastFN:=first(eventToFilename('archive name', [\n      '%archive-name%', data.lastFN,\n      '%mode%', if_(selection, 'selection','folder'),\n      '%archive-size%', intToStr(tar.size)\n    ]), data.lastFN);\n    if not noContentdispositionChk.checked then\n      addContentDisposition();\n  except tar.free end;\n  end; // serveTar\n\n  procedure checkCurrentAddress();\n  begin\n  if selftesting then exit;\n  if limitsExceededOnConnection() then\n    data.preReply:=PR_OVERLOAD;\n  if isBanned(data)  then\n    begin\n    data.disconnectReason:='banned';\n    data.preReply:=PR_BAN;\n    if noReplyBan then conn.reply.mode:=HRM_CLOSE;\n    end;\n  end; // checkCurrentAddress\n\n  procedure handleRequest();\n  var\n    dlForbiddenForWholeFolder, specialGrant: boolean;\n    mode, urlCmd: string;\n    acc: Paccount;\n\n    function accessGranted(forceFile:Tfile=NIL):boolean;\n    resourcestring\n      FAILED = 'Login failed';\n    var\n      m: TStringDynArray;\n      fTemp: Tfile;\n    begin\n    result:=FALSE;\n    if assigned(forceFile) then f:=forceFile;\n    if f = NIL then exit;\n    if f.isFile() and (dlForbiddenForWholeFolder or f.isDLforbidden()) then\n      begin\n      getPage('deny', data);\n      exit;\n      end;\n    result:=f.accessFor(data);\n    // ok, you are referring a section of the template, which virtually resides in the root because of the url starting with /~\n    // but you don't have access rights to the root. We'll let you pass if it's actually a section and you are using it from a folder that you have access to.\n    if not result and (f = rootFile)\n    and ((mode='section') or ansiStartsStr('~', urlCmd) and tpl.sectionExist(copy(urlCmd,2,MAXINT)))\n    and (0 < reMatch(conn.getHeader('Referer'), '://([^@]*@)?'+getSafeHost(data)+'(/.*)', 'i', 1, @m)) then\n      begin\n      result:=TRUE;\n      specialGrant:=TRUE;\n      end;\n    if result then exit;\n    conn.reply.realm:=f.getShownRealm();\n    runEventScript('unauthorized');\n    getPage('login', data, f);\n    // log anyone trying to guess the password\n    if (forceFile = NIL) and stringExists(data.user, getAccountList(TRUE, FALSE))\n    and logOtherEventsChk.checked then\n      add2log(FAILED, data);\n    end; // accessGranted\n\n    function isAllowedReferer():boolean;\n    var\n      r: string;\n    begin\n    result:=TRUE;\n    if allowedReferer = '' then exit;\n    r:=hostFromURL(conn.getHeader('Referer'));\n    if (r = '') or (r = getSafeHost(data)) then exit;\n    result:=fileMatch(allowedReferer, r);\n    end; // isAllowedReferer\n\n    procedure replyWithString(s:string);\n    begin\n    if (data.disconnectReason > '') and not data.disconnectAfterReply then\n      begin\n      getPage('deny', data);\n      exit;\n      end;\n    \n    if conn.reply.contentType = '' then\n      conn.reply.contentType:=ansistring(if_(trim(getTill('<', s))='', 'text/html', 'text/plain'));\n    conn.reply.mode:=HRM_REPLY;\n    conn.reply.bodyMode:=RBM_STRING;\n    conn.reply.body:=UTF8encode(s);\n    compressReply(data);\n    end; // replyWithString\n\n    procedure deletion();\n    var\n      i: integer;\n      asUrl, s: string;\n      doneRes, done, errors: TStringDynArray;\n    begin\n    if (conn.request.method <> HM_POST)\n    or (data.postVars.values['action'] <> 'delete')\n    or not accountAllowed(FA_DELETE, data, f) then exit;\n\n    doneRes:=NIL;\n    errors:=NIL;\n    done:=NIL;\n    for i:=0 to data.postvars.count-1 do\n      if sameText('selection', data.postvars.names[i]) then\n        begin\n        asUrl:=getTill('#', data.postvars.valueFromIndex[i]); // omit #anchors\n        s:=uri2disk(asUrl, f);\n        if (s = '') or not fileOrDirExists(s) then continue; // ignore\n\n        runEventScript('file deleting', ['%item-deleting%', s]);\n        moveToBin(toSA([s, s+'.md5', s+COMMENT_FILE_EXT]) , TRUE);\n        if fileOrDirExists(s) then\n          begin\n          addString(asUrl, errors);\n          continue; // this was not deleted. permissions problem?\n          end;\n\n        addString(s, doneRes);\n        addString(asUrl, done);\n        runEventScript('file deleted', ['%item-deleted%', s]);\n        end;\n\n    removeFilesFromComments(doneRes);\n\n    if logDeletionsChk.checked and assigned(done) then\n      add2log('Deleted files in '+url+CRLF+join(CRLF, done), data);\n    if logDeletionsChk.checked and assigned(errors) then\n      add2log('Failed deletion in '+url+CRLF+join(CRLF, errors), data);\n    end; // deletion\n\n    function getAccountRedirect(acc:Paccount=NIL):string;\n    begin\n    result:='';\n    if acc = NIL then    \n      acc:=data.account;\n    acc:=accountRecursion(acc, ARSC_REDIR);\n    if acc = NIL then exit;\n    result:=acc.redir;\n    if (result = '') or ansiContainsStr(result, '://') then exit;\n    // if it's not a complete url, it may require some fixing\n    if not ansiStartsStr('/', result) then result:='/'+result;\n    result:=replaceStr(result,'\\','/');\n    end; // getAccountRedirect\n\n    function addNewAddress():boolean;\n    begin\n    result:=ipsEverConnected.indexOf(data.address) < 0;\n    if not result then exit;\n    ipsEverConnected.add(data.address);\n    end; // addNewAddress\n\n  type\n    ThashFunc = function(s:string):string;\n\n    function goodPassword(s:string; func:ThashFunc):boolean;\n    begin\n    s:=data.postVars.values['password'+s];\n    // Instead of hash(pwd+session) I replaced pwd with hash(pwd) so that in the future this may work even if we stored hashed password on the server\n    result:=(s > '') and (s = func(func(acc.pwd)+data.session.id))\n    end;\n\n    // parameters: u(username), e(?expiration_UTC), s2(sha256(rest+pwd))\n    function urlAuth():string;\n    var\n      s, sign: string;\n    begin\n    result:='';\n    if mode <> 'auth' then\n      exit;\n    acc:=getAccount(data.urlVars.values['u']);\n    if acc = NIL then\n      exit('username not found');\n    sign:=conn.request.url;\n    chop('?',sign);\n    s:=chop('&s2=',sign);\n    if strSHA256(s+acc.pwd)<>sign then\n      exit('bad sign');\n    try data.session.setTTL(TTimeZone.Local.ToLocalTime(StrToFloat(data.urlvars.Values['e'])) - now() )\n    except end;\n\n    if data.session.ttl < 0 then\n      exit('expired');    \n    data.account:=acc;\n    data.session.user:=acc.user;\n    data.user:=acc.user;\n    data.pwd:=acc.pwd;\n    data.session.redirect:=getAccountRedirect(acc);\n    end; //urlAuth\n    \n  var\n    b: boolean;\n    s: string;\n    i: integer;\n    section: PtplSection;\n  begin\n  // eventually override the address\n  if addressmatch(forwardedMask, conn.address) then\n    begin\n    data.address:=getTill(':', getTill(',', conn.getHeader('x-forwarded-for')));\n    if not checkAddressSyntax(data.address) then\n      data.address:=conn.address;\n    end;\n\n  checkCurrentAddress();\n\n  // update list\n  if (data.preReply = PR_NONE)\n  and addNewAddress()\n  and ipsEverFrm.visible then\n    ipsEverFrm.refreshData();\n\n  data.requestTime:=now();\n  data.downloadingWhat:=DW_UNK;\n  data.fullDLlogged:=FALSE;\n  data.countAsDownload:=FALSE;\n  conn.reply.contentType:='';\n  specialGrant:=FALSE;\n\n  data.lastFile:=NIL; // auto-freeing\n\n  with objByIp(data.address) do\n    begin\n    if speedLimitIP < 0 then limiter.maxSpeed:=MAXINT\n    else limiter.maxSpeed:=round(speedLimitIP*1000);\n    if conn.limiters.indexOf(limiter) < 0 then\n      conn.limiters.add(limiter);\n    end;\n\n  conn.addHeader('Accept-Ranges: bytes');\n  if sendHFSidentifierChk.checked then\n    conn.addHeader('Server: HFS '+VERSION);\n\n  case data.preReply of\n    PR_OVERLOAD:\n      begin\n      data.disconnectReason:='limits exceeded';\n      getPage('overload', data);\n      end;\n    PR_BAN:\n      begin\n      getPage('ban', data);\n      conn.reply.reason:='Banned: '+data.banReason;\n      end;\n    end;\n\n  runEventScript('pre-filter-request');\n\n  if (length(conn.request.user) > 100) or anycharIn('/\\:?*<>|', conn.request.user) then\n    begin\n    conn.reply.mode:=HRM_BAD_REQUEST;\n    exit;\n    end;\n\n  if not (conn.request.method in [HM_GET,HM_HEAD,HM_POST]) then\n    begin\n    conn.reply.mode:=HRM_METHOD_NOT_ALLOWED;\n    exit;\n    end;\n  inc(hitsLogged);\n\n  if data.preReply <> PR_NONE then exit;\n\n  url:=conn.request.url;\n  extractParams();\n  url:=decodeURL(ansistring(url));\n  mode:= data.urlvars.values['mode'];\n\n  data.lastFN:=extractFileName( replaceStr(url,'/','\\') );\n  data.agent:=getAgentID(conn);\n\n  if selfTesting and (url = 'test') then\n    begin\n    replyWithString('HFS OK');\n    exit;\n    end;\n\n  if not sessionSetup() then\n    exit;\n  if mode = 'logout' then\n    begin\n    data.logout();\n    replyWithString('ok');\n    exit;\n    end;\n  if mode = 'login' then\n    begin\n    acc:=getAccount(data.postVars.values['user']);\n    if acc = NIL then\n      s:='username not found'\n    else\n      if goodPassword('SHA256', strSHA256)\n      or goodPassword('MD5', strMD5)\n      or (data.postVars.values['password'] = acc.pwd) then\n        begin\n        data.session.user:=acc.user;\n        data.session.redirect:=getAccountRedirect(acc);\n        s:='ok';\n        end\n      else\n        s:='bad password'; //TODO shouldn't this change http code?\n    replyWithString(s);\n    exit;\n    end;\n  s:=urlAuth();\n  if s > '' then\n    begin\n    conn.reply.mode:=HRM_DENY;\n    replyWithString(s);\n    exit;\n    end;\n\n  conn.ignoreSpeedLimit:=noLimitsFor(data.account);\n\n  // all URIs must begin with /\n  if (url = '') or (url[1] <> '/') then\n    begin\n    conn.reply.mode:=HRM_BAD_REQUEST;\n    exit;\n    end;\n\n  runEventScript('request');\n  if data.disconnectReason > '' then\n    begin\n    getPage('deny', data);\n    exit;\n    end;\n  if conn.reply.mode = HRM_REDIRECT then\n    exit;\n\n  if ansiStartsStr('/~img', url) then\n    begin\n    if not sendPic(data) then\n      getPage('not found', data);\n    exit;\n    end;\n  if mode = 'jquery' then\n    begin\n    if notModified(conn,'jquery'+FloatToStr(uptime), '') then\n      exit;\n    replyWithString(getRes('jquery'));\n    conn.reply.contentType:='text/javascript';\n    exit;\n    end;\n\n  // forbid using invalid credentials\n  if not freeLoginChk.checked and not specialGrant then\n    if (data.user>'')\n    and ((data.account=NIL) or (data.account.pwd <> data.pwd))\n    and not usersInVFS.match(data.user, data.pwd) then\n      begin\n      data.acceptedCredentials:=FALSE;\n      runEventScript('unauthorized');\n      getPage('unauthorized', data);\n      conn.reply.realm:='Invalid login';\n      exit;\n      end\n    else\n      data.acceptedCredentials:=TRUE;\n\n  f:=findFileByURL(url);\n  urlCmd:=''; // urlcmd is only if the file doesn't exist\n  if f = NIL then\n    begin\n    // maybe the file doesn't exist because the URL has a final command in it\n    // move last url part from 'url' into 'urlCmd'\n    urlCmd:=url;\n    url:=chop(lastDelimiter('/', urlCmd)+1, 0, urlCmd);\n    // we know an urlCmd must begin with ~\n    // favicon is handled as an urlCmd: we provide HFS icon.\n    // an non-existent ~file will be detected a hundred lines below.\n    if ansiStartsStr('~', urlCmd) or (urlCmd = 'favicon.ico') then\n      f:=findFileByURL(url);\n    end;\n  if f = NIL then\n    begin\n    if sameText(url, '/robots.txt') and stopSpidersChk.checked then\n      replyWithString('User-agent: *'+CRLF+'Disallow: /')\n    else\n      getPage('not found', data);\n    exit;\n    end;\n  if f.isFolder() and not ansiEndsStr('/',url) then\n    begin\n    conn.reply.mode:=HRM_MOVED;\n    conn.reply.url:=f.url(); // we use f.url() instead of just appending a \"/\" to url because of problems with non-ansi chars http://www.rejetto.com/forum/?topic=7837\n    exit;\n    end;\n  if f.isFolder() and (urlCmd = '') and (mode='') then\n    switchToDefaultFile();\n  if enableNoDefaultChk.checked and (urlCmd = '~nodefault') then\n    urlCmd:='';\n\n  if f.isRealFolder() and not sysutils.directoryExists(f.resource)\n  or f.isFile() and not fileExists(f.resource) then\n    begin\n    getPage('not found', data);\n    exit;\n    end;\n  dlForbiddenForWholeFolder:=f.isDLforbidden();\n\n  if not accessGranted() then\n    exit;\n\n  if urlCmd = 'favicon.ico' then\n    begin\n    sendPic(data, 23);\n    exit;\n    end;\n\n  if urlCmd = '~login' then // legacy method for login dialog\n    if conn.request.user = '' then\n      begin \n      getPage('unauthorized', data);\n      if loginRealm > '' then\n        conn.reply.realm:=loginRealm;\n      exit;\n      end\n    else\n      begin\n      conn.reply.mode:=HRM_REDIRECT;\n      conn.reply.url:=first(getAccountRedirect(), url);\n      exit;\n      end;\n\n  b:=urlCmd = '~upload+progress';\n  if (b or (urlCmd = '~upload') or (urlCmd = '~upload-no-progress')) then\n    begin\n    if not f.isRealFolder() then\n      getPage('deny', data)\n    else if accountAllowed(FA_UPLOAD, data, f) then\n      getPage( if_(b,'upload+progress','upload'), data, f)\n    else\n      begin\n      getPage('unauthorized', data);\n      runEventScript('unauthorized');\n      end;\n    if b then  // fix for IE6\n      begin\n      data.disconnectAfterReply:=TRUE;\n      data.disconnectReason:='IE6 workaround';\n      end;\n    exit;\n    end;\n\n  if (conn.request.method = HM_POST) and assigned(data.uploadResults) then\n    begin\n    getPage('upload-results', data, f);\n    exit;\n    end;\n\n  // provide access to any [section] in the tpl, included [progress]\n  if mode = 'section' then\n    s:=first(data.urlvars.values['id'], 'no-id') // no way, you must specify the id\n  else if (f = rootFile) and (urlCmd > '') then\n    s:=substr(urlCmd,2)\n  else\n    s:='';\n  if (s > '') and f.isFolder() and not ansiStartsText('special:', s) then\n    with tplFromFile(f) do // temporarily builds from diff tpls\n      try\n        // NB: section [] is not accessible, because of the s>'' test\n        section:=getsection(s);\n        if assigned(section) and not section.nourl then // it has to exist and be accessible \n          begin\n          if not section.cache\n          or not notModified(conn, s+floatToStr(section.ts), '') then\n            getPage(s, data, f, me());\n          exit;\n          end;\n      finally free end;\n\n  if f.isFolder() and not (FA_BROWSABLE in f.flags)\n  and stringExists(urlCmd,['','~folder.tar','~files.lst']) then\n    begin\n    getPage('deny', data);\n    exit;\n    end;\n\n  if not isAllowedReferer()\n  or f.isFile() and f.isDLforbidden() then\n    begin\n    getPage('deny', data);\n    exit;\n    end;\n\n  if (urlCmd = '~folder.tar')\n  or (mode = 'archive') then\n    begin\n    serveTar();\n    exit;\n    end;\n\n  // please note: we accept also ~files.lst.m3u\n  if ansiStartsStr('~files.lst', urlCmd)\n  or f.isFolder() and (data.urlvars.values['tpl'] = 'list') then\n    begin\n    // load from external file\n    s:=cfgPath+FILELIST_TPL_FILE;\n    if newMtime(s, lastFilelistTpl) then\n      filelistTpl.fullText:=loadtextfile(s);\n    // if no file is given, load from internal resource\n    if not fileExists(s) and (lastFilelistTpl > 0) then\n      begin\n      lastFilelistTpl:=0;\n      filelistTpl.fullText:=getRes('filelistTpl');\n      end;\n\n    data.downloadingWhat:=DW_FOLDERPAGE;\n    data.disconnectAfterReply:=TRUE; // needed for IE6... ugh...\n    data.disconnectReason:='IE6 workaround';\n    replyWithString(trim(getFolderPage(f, data, filelistTpl)));\n    exit;\n    end;\n\n  // from here on, we manage only services with no urlCmd.\n  // a non empty urlCmd means the url resource was not found.\n  if urlCmd > '' then\n    begin\n    getPage('not found', data);\n    exit;\n    end;\n\n  case conn.request.method of\n    HM_GET, HM_POST:\n      begin\n      conn.reply.mode:=HRM_REPLY;\n      lastActivityTime:=now();\n      end;\n    HM_HEAD: conn.reply.mode:=HRM_REPLY_HEADER;\n    end;\n\n  data.lastFile:=f; // auto-freeing\n\n  if f.isFolder() then\n    begin\n    deletion();\n\n    data.downloadingWhat:=DW_FOLDERPAGE;\n    if DMbrowserTplChk.Checked and isDownloadManagerBrowser() then\n      s:=getFolderPage(f, data, dmBrowserTpl)\n    else\n      s:=getFolderPage(f, data, tpl);\n    if conn.reply.mode <> HRM_REDIRECT then\n      replyWithString(s);\n    exit;\n    end;\n\n  if notModified(conn, f) then // calling notModified before limitsExceededOnDownload makes possible for [download] to manipualate headers set here\n    exit;\n  data.countAsDownload:=f.shouldCountAsDownload();\n  if data.countAsDownload and limitsExceededOnDownload() then\n    exit;\n\n  setupDownloadIcon(data);\n  data.eta.idx:=0;\n  conn.reply.contentType:=ansistring(name2mimetype(f.name, DEFAULT_MIME));\n  conn.reply.bodyMode:=RBM_FILE;\n  conn.reply.bodyFile:=f.resource;\n  data.downloadingWhat:=DW_FILE;\n  { I guess this would not help in any way for files since we are already handling the 'if-modified-since' field\n  try\n    conn.addHeader('ETag: '+getEtag(f.resource));\n  except end;\n  }\n  \n  data.fileXferStart:=now();\n  if data.countAsDownload and (flashOn = 'download') then flash();\n\n  b:=(openInBrowser <> '') and fileMatch(openInBrowser, f.name)\n    or inBrowserIfMIME and (conn.reply.contentType <> DEFAULT_MIME);\n\n  s:=first(eventToFilename('download name', []), f.name); // a script can eventually decide the name\n  // N-th workaround for IE. The 'accept' check should let us know if the save-dialog is displayed. More information at www.rejetto.com/forum/?topic=6275\n  if (data.agent = 'MSIE') and (conn.getHeader('Accept') = '*/*') then\n    s:=replaceStr(s, ' ','%20');\n  if not noContentdispositionChk.checked or not b then\n    addContentDisposition(not b);\n  end; // handleRequest\n\n  procedure lastByte();\n\n    procedure incDLcount(f:Tfile; res:string);\n    begin\n    if (f = NIL) or f.isTemp() then autoupdatedFiles.incInt(res)\n    else f.DLcount:=1+f.DLcount\n    end;\n\n  var\n    archive: TarchiveStream;\n    i: integer;\n  begin\n  if data.countAsDownload then\n    inc(downloadsLogged);\n  // workaround for a bug that was fixed in Wget/1.10\n  if stringExists(data.agent, ['Wget/1.7', 'Wget/1.8.2', 'Wget/1.9', 'Wget/1.9.1']) then\n    data.disconnect('wget bug workaround (consider updating wget)');\n  VFScounterMod:=TRUE;\n  case data.downloadingWhat of\n    DW_FILE:\n      if assigned(data) then\n        incDLcount(data.lastFile, data.lastFile.resource);\n    DW_ARCHIVE:\n      begin\n      archive:=conn.reply.bodyStream as TarchiveStream;\n      for i:=0 to length(archive.flist)-1 do\n        incDLcount(Tfile(archive.flist[i].data), archive.flist[i].src);\n      end;\n    end;\n  if data.countAsDownload then\n    runEventScript('download completed');\n  end; // lastByte\n\n  function canWriteFile():boolean;\n  begin\n  result:=FALSE;\n  if data.f = NIL then exit;\n  result:= minDiskSpace <= diskSpaceAt(data.uploadDest) div MEGA;\n  if result then exit;\n  closeUploadingFile_partial();\n  data.uploadFailed:='Minimum disk space reached.';\n  end; // canWriteFile\n\n  function complyUploadFilter():boolean;\n\n    function getMask():string;\n    begin\n    if f.isTemp() then result:=f.parent.uploadFilterMask\n    else result:=f.uploadFilterMask;\n    if result = '' then\n      result:='\\'+PROTECTED_FILES_MASK; // the user can disable this default filter by inputing * as mask\n    end;\n\n  begin\n  result:=validFilename(data.uploadSrc)\n    and not sameText(data.uploadSrc, DIFF_TPL_FILE) // never allow this\n    and not isExtension(data.uploadSrc, '.lnk')  // security matters (by mars)\n    and fileMatch(getMask(), data.uploadSrc);\n  if not result then\n    data.uploadFailed:='File name or extension forbidden.';\n  end; // complyUploadFilter\n\n  function canCreateFile():boolean;\n  begin\n  IOresult;\n  rewrite(data.f^, 1);\n  result:=IOresult=0;\n  if result then exit;\n  data.uploadFailed:='Error creating file.';\n  end; // canCreateFile\n\nvar\n  ur: TuploadResult;\n  i: integer;\nbegin\nif assigned(conn) and (conn.getLockCount <> 1) then\n  add2log('please report on the forum about this message');\n\nf:=NIL;\ndata:=NIL;\nif assigned(conn) then\n  data:=conn.data;\nif assigned(data) then\n  data.lastActivityTime:=now();\n\nif dumpTrafficChk.Checked and (event in [HE_GOT, HE_SENT]) then\n  appendFile(exePath+'hfs-dump.bin', TLV(if_(event=HE_GOT,1,2),\n    TLV(10, str_(now()))+TLV(11, data.address)+TLV(12, conn.port)+TLV(13, conn.eventData)\n  ));\n\nif preventStandbyChk.checked and assigned(setThreadExecutionState) then\n  setThreadExecutionState(1);\n\n// this situation can happen when there is a call to processMessage() before this function ends\nif (data = NIL) and (event in [HE_REQUESTED, HE_GOT]) then\n  exit;\n\ncase event of\n  HE_CANT_OPEN_FILE: data.error:='Can''t open file';\n  HE_OPEN:\n    begin\n    startBtn.Hide();\n    updateUrlBox();\n    // this happens when the server is switched on programmatically\n    usingFreePort:= port='';\n    updatePortBtn();\n    runEventScript('server start');\n    end;\n  HE_CLOSE:\n    begin\n    startBtn.show();\n    updatePortBtn();\n    updateUrlBox();\n    runEventScript('server stop');\n    end;\n  HE_REQUESTING:\n    begin\n    // do some clearing, due for persistent connections\n    data.vars.clear();\n    data.urlvars.clear();\n    data.postVars.clear();\n    data.tplCounters.clear();\n    refreshConn(data);\n    end;\n  HE_GOT_HEADER: runEventScript('got header');\n  HE_REQUESTED:\n    begin\n    data.dontLog:=FALSE;\n    handleRequest();\n    // we save the value because we need it also in HE_REPLY, and temp files are not avaliable there\n    data.dontLog:=data.dontLog or assigned(f) and f.hasRecursive(FA_DONT_LOG);\n    if f <> data.lastFile then\n      freeIfTemp(f);\n    refreshConn(data);\n    end;\n  HE_STREAM_READY:\n    begin\n    i:=length(data.disconnectReason);\n    runEventScript('stream ready');\n    if (i=0) and (data.disconnectReason > '') then // only if it was not already disconnecting\n      begin\n      conn.reply.additionalHeaders:=''; // content-disposition would prevent the browser\n      getPage('deny', data);\n      conn.initInputStream();\n      end;\n    end;\n  HE_REPLIED:\n    begin\n    setupDownloadIcon(data); // remove the icon\n    data.lastBytesGot:=0;\n    if data.disconnectAfterReply then\n      data.disconnect('replied');\n    if updateASAP > '' then\n      data.disconnect('updating');\n    refreshConn(data);\n    end;\n  HE_LAST_BYTE_DONE:\n    begin\n    if (conn.reply.mode = HRM_REPLY) and (data.downloadingWhat in [DW_FILE, DW_ARCHIVE]) then\n      lastByte();\n    runEventScript('request completed');\n    end;\n  HE_CONNECTED:\n    begin\n    //** lets see if this helps with speed\n    i:=-1;\n    WSocket_setsockopt(conn.sock.HSocket, IPPROTO_TCP, TCP_NODELAY, @i, sizeOf(i));\n\n    data:=TconnData.create(conn);\n    conn.limiters.add(globalLimiter); // every connection is bound to the globalLimiter\n    conn.sndBuf:=STARTING_SNDBUF;\n    data.address:=conn.address;\n    checkCurrentAddress();\n    connBox.items.add();\n    if (flashOn = 'connection') and (conn.reply.mode <> HRM_CLOSE) then flash();\n    runEventScript('connected');\n    end;\n  HE_DISCONNECTED:\n    begin\n    closeUploadingFile_partial();\n    data.deleting:=TRUE;\n    toDelete.add(data);\n    with connBox.items do count:=count-1;\n    runEventScript('disconnected');\n    connBox.invalidate();\n    end;\n  HE_GOT: lastActivityTime:=now();\n  HE_SENT:\n    begin\n    if data.nextDloadScreenUpdate <= now() then\n      begin\n      data.nextDloadScreenUpdate:= now()+DOWNLOAD_MIN_REFRESH_TIME;\n      refreshConn(data);\n      setupDownloadIcon(data);\n      end;\n    lastActivityTime:=now();\n    end;\n  HE_POST_FILE:\n    begin\n    sessionSetup();\n    data.downloadingWhat:=DW_UNK;\n    data.agent:=getAgentID(conn);\n    data.fileXferStart:=now();\n    f:=findFileByURL(decodeURL(conn.request.url));\n    data.lastFile:=f; // auto-freeing\n    data.uploadSrc:=conn.post.filename;\n    data.uploadFailed:='';\n    if (f = NIL) or not accountAllowed(FA_UPLOAD, data, f) or not f.accessFor(data) then\n      data.uploadFailed:=if_(f=NIL, 'Folder not found.', 'Not allowed.')\n    else\n      begin\n      closeUploadingFile();\n      getUploadDestinationFileName();\n\n      if complyUploadFilter() and canWriteFile() and canCreateFile() then\n        saveFile(data.f^, conn.post.data);\n      repaintTray();\n      end;\n    if data.uploadFailed > '' then\n      logUploadFailed();\n    end;\n  HE_POST_MORE_FILE:\n    if canWriteFile() then\n      saveFile(data.f^, conn.post.data);\n  HE_POST_END_FILE:\n    begin\n    // fill the record\n    ur.fn:=first(extractFilename(data.uploadDest), data.uploadSrc);\n    if data.f = NIL then ur.size:=-1\n    else ur.size:=filesize(data.f^);\n    ur.speed:=calcAverageSpeed(conn.bytesPostedLastItem);\n    // custom scripts\n    if assigned(data.f) then inc(uploadsLogged);\n    closeUploadingFile();\n    if data.uploadFailed = '' then\n      data.uploadFailed:=trim(runEventScript('upload completed'))\n    else\n      runEventScript('upload failed');\n    ur.reason:=data.uploadFailed;\n    if data.uploadFailed > '' then\n      deleteFile(data.uploadDest);\n    // queue the record\n    i:=length(data.uploadResults);\n    setLength(data.uploadResults, i+1);\n    data.uploadResults[i]:=ur;\n\n    refreshConn(data);\n    end;\n  HE_POST_VAR: data.postVars.add(conn.post.varname+'='+conn.post.data);\n  HE_POST_VARS:\n    if conn.post.mode = PM_URLENCODED then\n      urlToStrings(conn.post.data, data.postVars);\n  // default case\n  else refreshConn(data);\n  end;//case\nif assigned(data.session) then\n  data.session.keepAlive();\nif event in [HE_CONNECTED, HE_DISCONNECTED, HE_OPEN, HE_CLOSE, HE_REQUESTED, HE_POST_END, HE_LAST_BYTE_DONE] then\n  begin\n  repaintTray();\n  updateTrayTip();\n  end;\ndoLog();\nend; // httpEvent\n\nprocedure findSimilarIP(fromIP:string);\n\n  function howManySameNumbers(ip1,ip2:string):integer;\n  var\n    n1, n2: string;\n  begin\n  result:=0;\n  while ip1 > '' do\n    begin\n    n1:=chop('.',ip1);\n    n2:=chop('.',ip2);\n    if n1 <> n2 then exit;\n    inc(result);\n    end;\n  end; // howManySameNumbers\n\nvar\n  chosen: string;\n  i: integer;\n  a: TStringDynArray;\nbegin\nif fromIP = '' then exit;\nif stringExists(fromIP, customIPs) then\n  begin\n  setDefaultIP(fromIP);\n  exit;\n  end;\nchosen:=getIP();\na:=getIPs();\nfor i:=0 to length(a)-1 do\n  if howManySameNumbers(chosen, fromIP) < howManySameNumbers(a[i], fromIP) then\n    chosen:=a[i];\nsetDefaultIP(chosen);\nend; // findSimilarIP\n\nprocedure setLimitOption(var variable:integer; newValue:integer;\n  menuItem:TmenuItem; menuLabel:string);\nbegin\nif newValue < 0 then newValue:=0;\nvariable:=newValue;\nmenuItem.caption:=format(menuLabel,\n  [if_(newValue=0,DISABLED,intToStr(newValue))]);\nend; // setLimitOption\n\nprocedure setMaxIPs(v:integer);\nresourcestring\n  LIMIT = 'Max simultaneous addresses: %s ...';\nbegin setLimitOption(maxIPs,v, mainfrm.maxIPs1, LIMIT) end;\n\nprocedure setMaxIPsDLing(v:integer);\nresourcestring\n  LIMIT = 'Max simultaneous addresses downloading: %s ...';\nbegin setLimitOption(maxIPsDLing,v, mainfrm.maxIPsDLing1, LIMIT) end;\n\nprocedure setMaxConnections(v:integer);\nresourcestring\n  LIMIT = 'Max connections: %s ...';\nbegin setLimitOption(maxConnections,v, mainfrm.maxConnections1, LIMIT) end;\n\nprocedure setMaxConnectionsIP(v:integer);\nresourcestring\n  LIMIT = 'Max connections from single address: %s ...';\nbegin setLimitOption(maxConnectionsIP, v, mainfrm.MaxconnectionsfromSingleaddress1, LIMIT) end;\n\nprocedure setMaxDLs(v:integer);\nresourcestring\n  LIMIT = 'Max simultaneous downloads: %s ...';\nbegin setLimitOption(maxContempDLs, v, mainfrm.maxDLs1, LIMIT) end;\n\nprocedure setMaxDLsIP(v:integer);\nresourcestring\n  LIMIT = 'Max simultaneous downloads from single address: %s ...';\nbegin setLimitOption(maxContempDLsIP, v, mainfrm.maxDLsIP1, LIMIT) end;\n\nprocedure setAutoFingerprint(v:integer);\nresourcestring\n  FINGERPRINT = 'Create fingerprint on addition under %d KB';\n  NO_FINGERPRINT = 'Create fingerprint on addition: disabled';\nbegin\nautoFingerprint:=v;\nmainfrm.Createfingerprintonaddition1.caption:=format(if_(v=0, NO_FINGERPRINT, FINGERPRINT), [v]);\nend;\n\nfunction loadFingerprint(fn:string):string;\nvar\n  hasher: Thasher;\nbegin\nresult:=loadMD5for(fn);\nif result > '' then exit;\n\nhasher:=Thasher.create();\nhasher.loadFrom(ExtractFilePath(fn));\nresult:=hasher.getHashFor(fn);\nhasher.Free;\nend; // loadFingerprint\n\nprocedure applyFilesBoxRatio();\nbegin\nif filesBoxRatio <= 0 then exit;\nmainfrm.filesPnl.width:=round(filesBoxRatio*mainfrm.clientWidth);\nend; // applyFilesBoxRatio\n\nprocedure TmainFrm.FormResize(Sender: TObject);\nbegin\nurlBox.Width:=urlToolbar.ClientWidth-browseBtn.Width-copyBtn.width;\napplyFilesBoxRatio();\nend;\n\nprocedure checkIfOnlyCountersChanged();\nbegin\nif not VFSmodified and VFScounterMod then\n  mainfrm.saveVFS(lastFileOpen)\nend;\n\nfunction checkVfsOnQuit():boolean;\nvar\n  s: string;\nbegin\nresult:=TRUE;\nif loadingVFS.disableAutosave then exit;\ncheckIfOnlyCountersChanged();\nif not VFSmodified or mainfrm.quitWithoutAskingToSaveChk.checked then exit;\nif mainfrm.autosaveVFSchk.checked then\n  mainfrm.saveVFS(lastFileOpen)\nelse if windowsShuttingDown then\n  begin\n  s:=lastFileOpen; // don't change this\n  mainfrm.saveVFS(VFS_TEMP_FILE);\n  lastFileOpen:=s;\n  end\nelse\n  case msgDlg('Your current file system is not saved.'#13'Save it?', MB_ICONQUESTION+if_(quitASAP, MB_YESNO, MB_YESNOCANCEL)) of\n    IDYES: mainfrm.saveVFS(lastFileOpen);\n    IDNO: ; // just go on\n    IDCANCEL: result:=FALSE;\n    end;\nend; // checkVfsOnQuit\n\nprocedure inputComment(f:Tfile);\nresourcestring\n  MSG= 'Please insert a comment for \"%s\".'\n    +#13'You should use HTML: <br> for break line.';\nbegin\nVFSmodified:=inputqueryLong('Comment', format(MSG, [f.name]), f.comment);\nend; // inputComment\n\nfunction Tmainfrm.addFile(f:Tfile; parent:Ttreenode=NIL; skipComment:boolean=FALSE):Tfile;\nbegin\nabortBtn.show();\nstopAddingItems:=FALSE;\ntry result:=addFileRecur(f,parent);\nfinally abortBtn.hide() end;\nif result = NIL then exit;\nif stopAddingItems then\n  msgDlg('File addition was aborted.'#13'The list of files is incomplete.', MB_ICONWARNING);\nif assigned(parent) then parent.expanded:=TRUE;\nfilesbox.Selected:=result.node;\n\nif skipComment or not autoCommentChk.checked then exit;\napplication.restore();\napplication.bringToFront();\ninputComment(f);\nend; // addFile\n\nfunction Tmainfrm.addFileRecur(f:Tfile; parent:Ttreenode=NIL):Tfile;\nvar\n  n: Ttreenode;\n  sr: TsearchRec;\n  newF: Tfile;\n  s: string;\nbegin\nresult:=f;\nif stopAddingItems then exit;\n\nif parent = NIL then parent:=rootNode;\n\nif addingItemsCounter >= 0 then // counter enabled\n  begin\n  inc(addingItemsCounter);\n  if addingItemsCounter and 15 = 0 then // step 16\n    begin\n    application.ProcessMessages();\n    setStatusBarText(format('Adding item #%d', [addingItemsCounter]));\n    end;\n  end;\n\n// ensure the parent is a folder\nwhile assigned(parent) and assigned(parent.data)\nand not nodeToFile(parent).isFolder() do\n  parent:=parent.parent;\n// test for duplicate. it often happens when you have a shortcut to a file.\nif existsNodeWithName(f.name, parent) then\n  begin\n  result:=NIL;\n  exit;\n  end;\n\nif stopAddingItems then exit;\n\nn:=filesBox.Items.AddChild(parent, f.name);\n// stateIndex assignments are a workaround to a delphi bug\nn.stateIndex:=0;\nf.node:=n;\nn.stateIndex:=-1;\nn.Data:=f;\nf.setupImage();\n// autocreate fingerprint\nif f.isFile() and fingerprintsChk.checked and (autoFingerprint > 0) then\n  try\n    f.size:=sizeofFile(f.resource);\n    if (autoFingerprint >= f.size div 1024)\n    and (loadFingerprint(f.resource) = '') then\n      begin\n      s:=createFingerprint(f.resource);\n      if s > '' then saveTextFile(f.resource+'.md5', s);\n      end;\n  except\n  end;\n  \nif (f.resource = '') or not f.isVirtualFolder() then exit;\n// virtual folders must be run at addition-time\nif findFirst(f.resource+'\\*',faAnyfile, sr) <> 0 then exit;\ntry\n  repeat\n  if stopAddingItems then break;\n  if (sr.name[1] = '.')\n  or isFingerprintFile(sr.name) or isCommentFile(sr.name) then continue;\n  newF:=Tfile.create(f.resource+'\\'+sr.name);\n  if newF.isFolder() then include(newF.flags, FA_VIRTUAL);\n  if addfileRecur(newF, n) = NIL then\n    freeAndNIL(newF);\n  until findnext(sr) <> 0;\nfinally FindClose(sr) end;\nend; // addFileRecur\n\nprocedure TmainFrm.filesBoxCollapsing(Sender: TObject; Node: TTreeNode;\n  var AllowCollapse: Boolean);\nbegin\nAllowCollapse:=node.parent<>NIL;\nend;\n\nprocedure TmainFrm.Newlink1Click(Sender: TObject);\nvar\n  name: string;\nbegin\nname:=getUniqueNodeName('New link', filesBox.Selected);\naddfile(Tfile.createLink(name), filesBox.Selected).node.Selected:=TRUE;\nsetURL1click(sender);\nend;\n\nprocedure TmainFrm.newfolder1Click(Sender: TObject);\nvar\n  name: string;\nbegin\nname:=getUniqueNodeName('New folder', filesBox.selected);\nwith addFile(Tfile.createVirtualFolder(name), filesBox.Selected).node do\n  begin\n  Selected:=TRUE;\n  editText();\n  end;\nend;\n\nprocedure TmainFrm.filesBoxEditing(Sender: TObject; Node: TTreeNode;\n  var AllowEdit: Boolean);\nbegin\nif node = NIL then exit;\n{ disable shortcuts, to be used in editbox. Shortcuts need to be re-activated,\n{ but when the node text is left unchanged, no event is notified, so we got to\n{ use timerEvent to do the work. }\ncopyURL1.ShortCut:=0;\nremove1.ShortCut:=0;\nPaste1.ShortCut:=0;\n\nallowedit:=allowedit and not nodeToFile(node).isRoot()\nend;\n\nprocedure TmainFrm.filesBoxEdited(Sender:TObject; Node:TTreeNode; var S:String);\nvar\n  f: Tfile;\nbegin\nf:=node.data;\ns:=trim(s); // mod by mars\nif f.name = s then exit;\n\nif f.isFileOrFolder() and not validFilename(s)\nor (s = '')\nor (pos('/',s) > 0)\nthen\n  begin\n  s:=node.text;\n  msgDlg('Invalid filename', MB_ICONERROR);\n  exit;\n  end;\n\nif existsNodeWithName(s, node.parent)\nand (msgDlg(MSG_SAME_NAME, MB_ICONWARNING+MB_YESNO) <> IDYES) then\n  begin\n  s:=node.text; // mod by mars\n  exit;\n  end;\n\nf.name:=s;\nVFSmodified:=TRUE;\nupdateUrlBox();\nend;\n\nfunction setNilChildrenFrom(nodes:TtreeNodeDynArray; father:integer):integer;\nvar\n  i: integer;\nbegin\nresult:=0;\nfor i:=father+1 to length(nodes)-1 do\n  if nodes[i].Parent = nodes[father] then\n    begin\n    nodes[i]:=NIL;\n    inc(result);\n    end;\nend; // setNilChildrenFrom\n\nprocedure Tmainfrm.remove(node:Ttreenode=NIL);\nvar\n  i: integer;\n  list: TtreenodeDynArray;\n  warn: boolean;\nbegin\nif assigned(node) then\n  begin\n  if node.parent = NIL then exit;\n  if nodeIsLocked(node) then\n    begin\n    msgDlg(MSG_ITEM_LOCKED, MB_ICONERROR);\n    exit;\n    end;\n  node.Delete();\n  exit;\n  end;\n\ni:=filesbox.SelectionCount;\nif (i = 0) or (i = 1) and selectedFile.isRoot() then exit;\nif not deleteDontAskChk.checked\nand (msgDlg('Delete?', MB_ICONQUESTION+MB_YESNO) = IDNO) then\n  exit;\nlist:=copySelection();\n// now proceed\nwarn:=FALSE;\nfor i:=0 to length(list)-1 do\n  if assigned(list[i]) and assigned(list[i].parent) then\n    if assigned(list[i].data) and nodeIsLocked(list[i]) then\n      warn:=TRUE\n    else\n      begin\n      // avoid messing with children that will automatically be deleted as soon as the father is\n      setNilChildrenFrom(list, i);\n      list[i].Delete();\n      end;\n\nif warn then\n  msgDlg(MSG_SOME_LOCKED, MB_ICONWARNING);\nend; // remove\n\nprocedure TmainFrm.Remove1Click(Sender: TObject);\nbegin\n// this method is bound to the DEL key also while a renaming is ongoing\nif not filesBox.IsEditing() then remove()\nend;\n\nprocedure TmainFrm.startBtnClick(Sender: TObject);\nbegin toggleServer() end;\n\nfunction Tmainfrm.pointedConnection():TconnData;\nvar\n  li: TlistItem;\nbegin\nresult:=NIL;\nwith connbox.screenToClient(mouse.cursorPos) do\n  li:=connbox.getItemAt(x,y);\nif li = NIL then exit;\nresult:=conn2data(li);\nend; // pointedConnection\n\nfunction Tmainfrm.pointedFile(strict:boolean=TRUE):Tfile;\nvar\n  n: Ttreenode;\n  p: Tpoint;\nbegin\nresult:=NIL;\np:=filesbox.screenToClient(mouse.cursorPos);\nif strict and not (htOnItem in filesBox.getHitTestInfoAt(p.x,p.y)) then exit;\nn:=filesbox.getNodeAt(p.x,p.y);\nif (n = NIL) or (n.data = NIL) then exit;\nresult:=n.data;\nend; // pointedFile\n\nprocedure Tmainfrm.updateUrlBox();\nvar\n  f: Tfile;\nbegin\nif quitting then exit;\nif selectedFile = NIL then f:=rootFile\nelse f:=selectedFile;\n\nif f = NIL then urlBox.Text:=''\nelse urlBox.text:=f.fullURL()\nend; // updateUrlBox\n\nprocedure TmainFrm.filesBoxChange(Sender: TObject; Node: TTreeNode);\nbegin\nif filesBox.SelectionCount = 0 then selectedFile:=NIL\nelse selectedFile:=filesBox.selections[0].data;\nupdateUrlBox()\nend;\n\nfunction Tmainfrm.selectedConnection():TconnData;\nbegin\nif connBox.selected = NIL then\n  result:=NIL\nelse\n  result:=conn2data(connBox.selected)\nend;\n\nprocedure TmainFrm.setLogToolbar(v:boolean);\nbegin\nexpandedPnl.visible:=v;\ncollapsedPnl.visible:=not v;\nend; // setLogToolbar\n\nprocedure TmainFrm.Kickconnection1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\ncd.disconnect('kicked');\nend;\n\nprocedure TmainFrm.Kickallconnections1Click(Sender: TObject);\nbegin kickByIP('*') end;\n\nprocedure TmainFrm.KickIPaddress1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\nkickByIP(cd.address);\nend;\n\nprocedure setAutosave(var rec:Tautosave; v:integer);\nresourcestring\n  AUTOSAVE = 'Auto save every: ';\n  SECONDS = '%d seconds';\nbegin\nrec.every:=v;\nif assigned(rec.menu) then\n  rec.menu.caption:=\n    AUTOSAVE+if_(v=0,DISABLED, format('%d seconds',[v]));\nend; // setAutosave\n\nprocedure setSpeedLimitIP(v:real);\nvar\n  i, vi: integer;\nbegin\nspeedLimitIP:=v;\nif v < 0 then vi:=MAXINT\nelse vi:=round(v*1000);\nfor i:=0 to ip2obj.Count-1 do\n  with ip2obj.Objects[i] as TperIp do\n    if not customizedLimiter then\n      limiter.maxSpeed:=vi;\nmainfrm.Speedlimitforsingleaddress1.Caption:='Speed limit for single address: '+if_(v<0, DISABLED, floatToStr(v)+' KB/s' );\nend; // setSpeedLimitIP\n\nprocedure setSpeedLimit(v:real);\nbegin\nspeedLimit:=v;\nif v < 0 then globalLimiter.maxSpeed:=MAXINT\nelse globalLimiter.maxSpeed:=round(v*1000);\nmainfrm.speedLimit1.caption:='Speed limit: '+if_(v<0, DISABLED, floatToStr(v)+' KB/s' );\nend; // setSpeedLimit\n\nprocedure autosaveClick(var rec:Tautosave; name:string);\nresourcestring\n  MSG = 'Auto-save %s.'\n    +#13'Specify in seconds.'\n    +#13'Leave blank to disable.';\n  MSG_MIN = 'We don''t accept less than %d';\nvar\n  s: string;\n  v: integer;\nbegin\nif rec.every <= 0 then s:=''\nelse s:=intToStr(rec.every);\n  repeat\n  if not inputquery('Auto-save '+name, format(MSG,[name]), s) then exit;\n  s:=trim(s);\n  if s = '' then\n    begin\n    setAutosave(rec, 0);\n    break;\n    end\n  else\n    try\n      v:=strToInt(s);\n      if v >= rec.minimum then\n        begin\n        setAutosave(rec, v);\n        break;\n        end;\n      msgDlg(format(MSG_MIN,[rec.minimum]), MB_ICONERROR);\n    except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\n  until false;\nend; // autosaveClick\n\n// change port and test it working. Restore if not working.\nfunction changePort(newVal:string):boolean;\nvar\n  act: boolean;\n  was: string;\nbegin\nresult:=TRUE;\nact:=srv.active;\nwas:=port;\nport:=newVal;\nif act and (newVal = srv.port) then exit;\nstopServer();\nif startServer() then\n  begin\n  if not act then stopServer(); // restore\n  exit;\n  end;\nresult:=FALSE;\nport:=was;\nif act then startServer();\nend; // changePort\n\nfunction b64utf8(const s:string):ansistring;\nbegin result:=base64encode(UTF8encode(s)) end;\n\nfunction decodeB64utf8(const s:ansistring):string; overload;\nbegin result:=UTF8toString(base64decode(s)) end;\n\nfunction decodeB64utf8(const s:string):string; overload;\nbegin result:=decodeB64utf8(ansistring(s)) end;\n\nfunction zCompressStr(const s: ansistring;  level:TCompressionLevel=clMax; type_:TzStreamType=zsZlib): ansistring;\nvar\n  src, dst: TMemoryStream;\nbegin\nif s = '' then\n  exit('');\nsrc:= TMemoryStream.create;\ndst:= TMemoryStream.create;\ntry\n  src.write(s[1], Length(s));\n  src.position:= 0;\n  zlibCompressStreamEx(src, dst, level, type_, false);\n  setLength(result, dst.size);\n  copyMemory(@result[1], dst.Memory, dst.Size);\nfinally\n  src.free;\n  dst.free;\n  end;\nend; // zCompressStr\n\nfunction zDecompressStr(const s: ansistring): ansistring;\nvar\n  src, dst: TMemoryStream;\nbegin\nif s = '' then\n  exit('');\nsrc:= TMemoryStream.create;\ndst:= TMemoryStream.create;\ntry\n  src.write(s[1], Length(s));\n  src.position:= 0;\n  zlibDecompressStream(src, dst);\n  setLength(result, dst.size);\n  copyMemory(@result[1], dst.Memory, dst.Size);\nfinally\n  src.free;\n  dst.free;\n  end;\nend; // zDecompressIcs\n\nfunction TmainFrm.getCfg(exclude:string=''):string;\ntype\n  Tencoding=(E_PLAIN,E_B64,E_ZIP);\n\n  function encode(s:string; encoding:Tencoding):string;\n  var\n    a, c: ansistring;\n  begin\n  case encoding of\n    E_PLAIN: result:=s;\n    E_B64: result:=b64utf8(s);\n    E_ZIP:\n      begin\n      a:=UTF8encode(s);\n      c:=zCompressStr(a, clMax);\n      result:=base64encode(if_( length(c) < round(0.8*length(a)), c, a));\n      end;\n    end;\n  end;\n\n  function accountsToStr():string;\n  var\n    i: integer;\n    a: Paccount;\n\n    function prop(name, value:string; encoding:Tencoding=E_PLAIN):string;\n    begin result:=if_(value>'', '|'+name+':'+encode(value, encoding)) end;\n\n  begin\n  result:='';\n  for i:=0 to length(accounts)-1 do\n  \tbegin\n    a:=@accounts[i];\n    result:=result\n      +prop('login', a.user+':'+a.pwd, E_B64)\n      +prop('enabled', yesno[a.enabled])\n      +prop('group', yesno[a.group])\n      +prop('no-limits', yesno[a.noLimits])\n      +prop('redir', a.redir)\n      +prop('link', join(':',a.link))\n      +prop('notes', a.notes, E_ZIP)\n      +';';\n    end;\n  end; // accountsToStr\n\n  function banlistToStr():string;\n  var\n    i: integer;\n  begin\n  result:='';\n  for i:=0 to length(banlist)-1 do\n    result:=result+banlist[i].ip+'#'\n      +replaceStr(banlist[i].comment, '|','\\$pipe')+'|';\n  end;\n\n  function connColumnsToStr():string;\n  var\n    i: integer;\n  begin\n  result:='';\n  for i:=0 to connBox.columns.count-1 do\n    with connBox.columns.items[i] do\n      result:=result+format('%s;%d|', [caption, width]);\n  end; // connColumnsToStr\n\nvar\n  iconMasksStr, userIconMasks: string;\n\n  function iconMasksToStr():string;\n  var\n    i, j: integer;\n  begin\n  result:='';\n  for i:=0 to length(iconMasks)-1 do\n    begin\n    j:=idx_img2ico(iconMasks[i].int);\n    if j >= USER_ICON_MASKS_OFS then\n      userIconMasks:=userIconMasks+format('%d:%s|', [j, encode(pic2str(j), E_ZIP)]);\n    result:=result+format('%s|%d||', [iconMasks[i].str, j]);\n    end;\n  end; // iconMasksToStr\n\n  function fontToStr(f:Tfont):string;\n  begin\n  result:=if_(fsBold in f.Style, 'B')+if_(fsItalic in f.Style, 'I')\n    +if_(fsUnderline in f.Style, 'U')+if_(fsStrikeOut in f.Style, 'S');\n  result:=format('%s|%d|%s|%s', [f.Name,f.size,colorToString(f.Color),result]);\n  end; // fontToStr\n\nbegin\nuserIconMasks:='';\niconMasksStr:=iconMasksToStr();\nresult:='HFS '+VERSION+' - Build #'+VERSION_BUILD+CRLF\n+'active='+yesno[srv.active]+CRLF\n+'only-1-instance='+yesno[only1instanceChk.checked]+CRLF\n+'window='+rectToStr(lastWindowRect)+CRLF\n+'window-max='+yesno[windowState = wsMaximized]+CRLF\n+'easy='+yesno[easyMode]+CRLF\n+'port='+port+CRLF\n+'files-box-ratio='+floatToStr(filesBoxRatio)+CRLF\n+'log-max-lines='+intToStr(logMaxLines)+CRLF\n+'log-read-only='+yesno[logbox.readonly]+CRLF\n+'log-file-name='+logFile.filename+CRLF\n+'log-font-name='+logFontName+CRLF\n+'log-font-size='+intToStr(logFontSize)+CRLF\n+'log-date='+yesno[LogdateChk.checked]+CRLF\n+'log-time='+yesno[LogtimeChk.checked]+CRLF\n+'log-to-screen='+yesno[logOnVideoChk.checked]+CRLF\n+'log-only-served='+yesno[logOnlyServedChk.checked]+CRLF\n+'log-server-start='+yesno[logServerstartChk.checked]+CRLF\n+'log-server-stop='+yesno[logServerstopChk.checked]+CRLF\n+'log-connections='+yesno[logConnectionsChk.checked]+CRLF\n+'log-disconnections='+yesno[logDisconnectionsChk.checked]+CRLF\n+'log-bytes-sent='+yesno[logBytessentChk.checked]+CRLF\n+'log-bytes-received='+yesno[logBytesreceivedChk.checked]+CRLF\n+'log-replies='+yesno[logRepliesChk.checked]+CRLF\n+'log-requests='+yesno[logRequestsChk.checked]+CRLF\n+'log-uploads='+yesno[logUploadsChk.checked]+CRLF\n+'log-deletions='+yesno[logDeletionsChk.checked]+CRLF\n+'log-full-downloads='+yesno[logFulldownloadsChk.checked]+CRLF\n+'log-dump-request='+yesno[DumprequestsChk.checked]+CRLF\n+'log-browsing='+yesno[logBrowsingChk.checked]+CRLF\n+'log-icons='+yesno[logIconsChk.checked]+CRLF\n+'log-progress='+yesno[logProgressChk.checked]+CRLF\n+'log-banned='+yesno[logBannedChk.checked]+CRLF\n+'log-others='+yesno[logOtherEventsChk.checked]+CRLF\n+'log-file-tabbed='+yesno[tabOnLogFileChk.checked]+CRLF\n+'log-apache-format='+logfile.apacheFormat+CRLF\n+'tpl-file='+tplFilename+CRLF\n+'tpl-editor='+tplEditor+CRLF\n+'delete-dont-ask='+yesno[deleteDontAskChk.checked]+CRLF\n+'free-login='+yesno[freeLoginChk.checked]+CRLF\n+'confirm-exit='+yesno[confirmexitChk.checked]+CRLF\n+'keep-bak-updating='+yesno[keepBakUpdatingChk.checked]+CRLF\n+'include-pwd-in-pages='+yesno[pwdInPagesChk.Checked]+CRLF\n+'ip='+defaultIP+CRLF\n+'custom-ip='+join(';',customIPs)+CRLF\n+'listen-on='+listenOn+CRLF\n+'external-ip-server='+customIPservice+CRLF\n+'dynamic-dns-updater='+b64utf8(dyndns.url)+CRLF\n+'dynamic-dns-user='+dyndns.user+CRLF\n+'dynamic-dns-host='+dyndns.host+CRLF\n+'search-better-ip='+yesno[searchbetteripChk.checked]+CRLF\n+'start-minimized='+yesno[startMinimizedChk.checked]+CRLF\n+'connections-height='+intToStr(lastGoodConnHeight)+CRLF\n+'files-stay-flagged-for-minutes='+intToStr(filesStayFlaggedForMinutes)+CRLF\n+'auto-save-vfs='+yesno[autosaveVFSchk.checked]+CRLF\n+'folders-before='+yesno[foldersbeforeChk.checked]+CRLF\n+'links-before='+yesno[linksBeforeChk.checked]+CRLF\n+'use-comment-as-realm='+yesno[usecommentasrealmChk.checked]+CRLF\n+'getright-template='+yesno[DMbrowserTplChk.checked]+CRLF\n+'auto-save-options='+yesno[autosaveoptionsChk.checked]+CRLF\n+'dont-include-port-in-url='+yesno[noPortInUrlChk.checked]+CRLF\n+'persistent-connections='+yesno[persistentconnectionsChk.checked]+CRLF\n+'modal-options='+yesno[modalOptionsChk.checked]+CRLF\n+'beep-on-flash='+yesno[beepChk.checked]+CRLF\n+'prevent-leeching='+yesno[preventLeechingChk.checked]+CRLF\n+'delete-partial-uploads='+yesno[deletePartialUploadsChk.checked]+CRLF\n+'rename-partial-uploads='+renamePartialUploads+CRLF\n+'enable-macros='+yesno[enableMacrosChk.checked]+CRLF\n+'use-system-icons='+yesno[usesystemiconsChk.checked]+CRLF\n+'minimize-to-tray='+yesno[MinimizetotrayChk.checked]+CRLF\n+'tray-icon-for-each-download='+yesno[trayfordownloadChk.checked]+CRLF\n+'show-main-tray-icon='+yesno[showmaintrayiconChk.checked]+CRLF\n+'always-on-top='+yesno[alwaysontopChk.checked]+CRLF\n+'quit-dont-ask='+yesno[quitWithoutAskingToSaveChk.checked]+CRLF\n+'support-descript.ion='+yesno[supportDescriptionChk.checked]+CRLF\n+'oem-descript.ion='+yesno[oemForIonChk.checked]+CRLF\n+'oem-tar='+yesno[oemTarChk.checked]+CRLF\n+'enable-fingerprints='+yesno[fingerprintsChk.checked]+CRLF\n+'save-fingerprints='+yesno[saveNewFingerprintsChk.checked]+CRLF\n+'auto-fingerprint='+intToStr(autoFingerprint)+CRLF\n+'stop-spiders='+yesno[stopSpidersChk.checked]+CRLF\n+'backup-saving='+yesno[backupSavingChk.checked]+CRLF\n+'recursive-listing='+yesno[recursiveListingChk.checked]+CRLF\n+'send-hfs-identifier='+yesno[sendHFSidentifierChk.checked]+CRLF\n+'list-hidden-files='+yesno[listfileswithhiddenattributeChk.checked]+CRLF\n+'list-system-files='+yesno[listfileswithsystemattributeChk.checked]+CRLF\n+'list-protected-items='+yesno[hideProtectedItemsChk.checked]+CRLF\n+'enable-no-default='+yesno[enableNoDefaultChk.checked]+CRLF\n+'browse-localhost='+yesno[browseUsingLocalhostChk.checked]+CRLF\n+'add-folder-default='+addFolderDefault+CRLF\n+'default-sorting='+defSorting+CRLF\n+'last-dialog-folder='+lastDialogFolder+CRLF\n+'auto-save-vfs-every='+intToStr(autosaveVFS.every)+CRLF\n+'last-update-check='+floatToStr(lastUpdateCheck)+CRLF\n+'allowed-referer='+allowedReferer+CRLF\n+'forwarded-mask='+forwardedMask+CRLF\n+'tray-shows='+trayShows+CRLF\n+'tray-message='+escapeNL(trayMsg)+CRLF\n+'speed-limit='+floatToStr(speedLimit)+CRLF\n+'speed-limit-ip='+floatToStr(speedLimitIP)+CRLF\n+'max-ips='+intToStr(maxIPs)+CRLF\n+'max-ips-downloading='+intToStr(maxIPsDLing)+CRLF\n+'max-connections='+intToStr(maxConnections)+CRLF\n+'max-connections-by-ip='+intToStr(maxConnectionsIP)+CRLF\n+'max-contemporary-dls='+intToStr(maxContempDLs)+CRLF\n+'max-contemporary-dls-ip='+intToStr(maxContempDLsIP)+CRLF\n+'login-realm='+loginRealm+CRLF\n+'open-in-browser='+openInBrowser+CRLF\n+'flash-on='+flashOn+CRLF\n+'graph-rate='+intToStr(graph.rate)+CRLF\n+'graph-size='+intToStr(graph.size)+CRLF\n+'graph-visible='+yesno[graphBox.visible]+CRLF\n+'no-download-timeout='+intToStr(noDownloadTimeout)+CRLF\n+'connections-timeout='+intToStr(connectionsInactivityTimeout)+CRLF\n+'no-reply-ban='+yesno[noReplyBan]+CRLF\n+'ban-list='+banlistToStr()+CRLF\n+'add-to-folder='+addToFolder+CRLF\n+'last-file-open='+lastFileOpen+CRLF\n+'reload-on-startup='+yesno[reloadonstartupChk.checked]+CRLF\n+'https-url='+yesno[httpsUrlsChk.checked]+CRLF\n+'find-external-on-startup='+yesno[findExtOnStartupChk.checked]+CRLF\n+'encode-non-ascii='+yesno[encodenonasciiChk.checked]+CRLF\n+'encode-spaces='+yesno[encodespacesChk.checked]+CRLF\n+'mime-types='+join('|',mimeTypes)+CRLF\n+'in-browser-if-mime='+yesno[inBrowserIfMIME]+CRLF\n+'icon-masks='+iconMasksStr+CRLF\n+'icon-masks-user-images='+userIconMasks+CRLF\n+'address2name='+join('|',address2name)+CRLF\n+'recent-files='+join('|',recentFiles)+CRLF\n+'trusted-files='+join('|',trustedFiles)+CRLF\n+'accounts='+accountsToStr()+CRLF\n+'account-notes-wrap='+yesno[optionsFrm.notesWrapChk.checked]+CRLF\n+'tray-instead-of-quit='+yesno[trayInsteadOfQuitChk.checked]+CRLF\n+'compressed-browsing='+yesno[compressedbrowsingChk.checked]+CRLF\n+'use-iso-date-format='+yesno[useISOdateChk.Checked]+CRLF\n+'hints4newcomers='+yesno[HintsfornewcomersChk.checked]+CRLF\n+'save-totals='+yesno[saveTotalsChk.checked]+CRLF\n+'log-toolbar-expanded='+yesno[mainfrm.expandedPnl.visible]+CRLF\n+'number-files-on-upload='+yesno[numberFilesOnUploadChk.checked]+CRLF\n+'do-not-log-address='+dontLogAddressMask+CRLF\n+'last-external-address='+dyndns.lastIP+CRLF\n+'min-disk-space='+intToStr(minDiskSpace)+CRLF\n+'out-total='+intToStr(outTotalOfs+srv.bytesSent)+CRLF\n+'in-total='+intToStr(inTotalOfs+srv.bytesReceived)+CRLF\n+'hits-total='+intToStr(hitsLogged)+CRLF\n+'downloads-total='+intToStr(downloadsLogged)+CRLF\n+'upload-total='+intToStr(uploadsLogged)+CRLF\n+'many-items-warning='+yesno[warnManyItems]+CRLF\n+'load-single-comment-files='+yesno[loadSingleCommentsChk.checked]+CRLF\n+'copy-url-on-start='+yesno[autocopyURLonstartChk.checked]+CRLF\n+'connections-columns='+connColumnsToStr()+CRLF\n+'auto-comment='+yesno[autoCommentChk.checked]+CRLF\n+'update-daily='+yesno[updateDailyChk.checked]+CRLF\n+'delayed-update='+yesno[delayUpdateChk.checked]+CRLF\n+'tester-updates='+yesno[testerUpdatesChk.checked]+CRLF\n+'copy-url-on-addition='+yesno[AutocopyURLonadditionChk.checked]+CRLF\n+'ip-services='+join(';',IPservices)+CRLF\n+'ip-services-time='+floatToStr(IPservicesTime)+CRLF\n+'update-automatically='+yesno[updateAutomaticallyChk.checked]+CRLF\n+'prevent-standby='+yesno[preventStandbyChk.checked]+CRLF;\n\nif ipsEverConnected.Count < IPS_THRESHOLD then\n  result:=result+'ips-ever-connected='+ipsEverConnected.DelimitedText+CRLF;\n\nif exclude = '' then exit;\nexclude:=replaceStr(exclude,'.','[^=]'); // optimization: since we are searching for keys, characters can't be \"=\"\nresult:=reReplace(result, '^('+exclude+')=.*$', '');\nend; // getCfg\n\n// this is to keep the \"hashed\" version updated\nvar\n  lastUcCFG: Tdatetime;\nprocedure updateCurrentCFG();\nvar\n  s: string;\nbegin\nif mainfrm = NIL then exit;\n\n// not faster\nif lastUcCFG+5/SECONDS > now() then exit;\nlastUcCFG:=now();\n\ns:=mainfrm.getCFG('.*-total'); // these will change often and are of no interest, so we ignore them as an optimization\nif s = currentCFG then exit;\n\nif (currentCFG>'') // first time, it's not an update, it's an initialization\nand mainfrm.autoSaveOptionsChk.checked then\n  mainfrm.saveCFG();\n\ncurrentCFG:=s;\ncurrentCFGhashed.text:=s; // re-parse\nend; // updateCurrentCFG\n\nfunction TmainFrm.setCfg(cfg:string; alreadyStarted:boolean):boolean;\nresourcestring\n  MSG_BAN = 'Your ban configuration may have been screwed up.'\n    +#13'Please verify it.';\nvar\n  l, savedip, build: string;\n  warnings: TStringDynArray;\n  userIconOfs: integer;\n\n  function yes(s:string=''):boolean;\n  begin result:= if_(s>'',s,l)='yes' end;\n\n  function int():int64;\n  begin if not tryStrToInt64(l, result) then result:=0 end;\n\n  function real():TdateTime;\n  begin try result:=strToFloat(l) except result:=0 end end;\n\n  procedure loadBanlist(s:string);\n  var\n    p: string;\n    i: integer;\n  begin\n  { old versions wrongly used ; as ban-record separator, while it was already\n  { used as address separator }\n  if (build < '018') and (pos(';',s) > 0) then\n    begin\n    s:=replaceStr(s, ';','|');\n    addString(MSG_BAN, warnings);\n    end;\n  setLength(banlist, 0);\n  i:=0;\n  while s > '' do\n    begin\n    p:=chop('|',s);\n    if p = '' then continue;\n    setLength(banlist, i+1);\n    banlist[i].comment:=replaceStr(p, '\\$pipe','|'); // unescape\n    banlist[i].ip:=chop('#',banlist[i].comment);\n    inc(i);\n    end;\n  end; // loadBanlist\n\n  function unzipCfgProp(s:ansistring):ansistring;\n  begin\n  result:=base64decode(s);\n  try result:=ZDecompressStr(result)\n  except end;\n  end; // unzipCfgProp\n\n  procedure strToAccounts();\n  var\n  \ts, t, p: string;\n    i: integer;\n    a: Paccount;\n  begin\n  accounts:=NIL;\n  while l > '' do\n  \tbegin\n    // accounts are separated by semicolons\n    s:=chop(';',l);\n    if s = '' then continue;\n    i:=length(accounts);\n    setLength(accounts, i+1);\n    a:=@accounts[i];\n    a.enabled:=TRUE; // by default\n    while s > '' do\n      begin\n      // account properties are separated by pipes\n      t:=chop('|',s);\n      p:=chop(':',t); // get property name\n      if p = '' then \n        continue;\n      if p = 'login' then\n      \tbegin\n        if not anycharIn(':', t) then\n  \t      t:=decodeB64utf8(t);\n  \t    a.user:=chop(':',t);\n\t      a.pwd:=t;\n        end\n      else if p = 'enabled' then \n        a.enabled:=yes(t)\n      else if p = 'no-limits' then \n        a.noLimits:=yes(t)\n      else if p = 'group' then \n        a.group:=yes(t)\n      else if p = 'redir' then \n        a.redir:=t\n      else if p = 'link' then \n        a.link:=split(':',t)\n      else if p = 'notes' then\n        a.notes:=UTF8ToString(unzipCfgProp(ansistring(t)))\n      end;\n    end;\n  end; // strToAccounts\n\n  procedure strToIconmasks();\n  var\n    i: integer;\n  begin\n  while l > '' do\n    begin\n    i:=length(iconMasks);\n    setLength(iconMasks, i+1);\n    iconMasks[i].str:=chop('|',l);\n    iconMasks[i].int:=StrToIntDef(chop('||',l),0);\n    end;\n  end; // strToIconmasks\n\n  procedure readUserIconMasks();\n  var\n    i, iFrom, iTo: integer;\n  begin\n  userIconOfs:=images.Count;\n  while l > '' do\n    begin\n    iFrom:=strTointDef(chop(':', l), -1);\n    iTo:=str2pic(unzipCfgProp(ansistring(chop('|', l))));\n    for i:=0 to length(iconMasks)-1 do\n      if iconMasks[i].int = iFrom then\n        iconMasks[i].int:=iTo;\n    end;\n  end; // readUserIconmasks\n\n  procedure strToFont(f:Tfont);\n  begin\n  f.Name:=chop('|', l);\n  f.Size:=strToIntDef(chop('|', l), f.size);\n  f.Color:=StringToColor(chop('|',l));\n  f.Style:=[];\n  if pos('B', l) > 0 then f.Style:=f.Style+[fsBold];\n  if pos('U', l) > 0 then f.Style:=f.Style+[fsUnderline];\n  if pos('I', l) > 0 then f.Style:=f.Style+[fsItalic];\n  if pos('S', l) > 0 then f.Style:=f.Style+[fsStrikeout];\n  end; // strToFont\n\n\n  procedure addMissingMimeTypes();\n  var\n    i: integer;\n  begin\n  // add missing default mime types\n  i:=length(DEFAULT_MIME_TYPES);\n  while i > 0 do\n    begin\n    dec(i, 2);\n    if stringExists(DEFAULT_MIME_TYPES[i], mimeTypes) then continue;\n    // add the missing pair at the beginning\n    addArray(mimeTypes, DEFAULT_MIME_TYPES, 0, i, 2);\n    end;\n  end;\n\nconst\n  BOOL2WS: array [boolean] of TWindowState = (wsNormal, wsMaximized);\nvar\n  i: integer;\n  h: string;\n  activateServer: boolean;\nbegin\nresult:=FALSE;\nif cfg = '' then exit;\n\n// prior to build #230, this header was required\nif ansiStartsStr('HFS ', cfg) then\n  begin\n  l:=chop(CRLF,cfg);\n  chop(' - Build #',l);\n  build:=l;\n  end\nelse\n  build:=VERSION_BUILD;\n\nwarnings:=NIL;\nif alreadyStarted then activateServer:=srv.active\nelse activateServer:=TRUE;\n\nwhile cfg > '' do\n  begin\n  l:=chop(CRLF,cfg);\n  h:=chop('=',l);\n  try\n    if h = 'banned-ips' then h:='ban-list';\n    if h = 'user-mime-types' then h:='mime-types';  // user-mime-types was an experiment made in build #258..260\n    if h = 'save-in-out-totals' then h:='save-totals';\n\n    if h = 'active' then activateServer:=yes;\n    if (h = 'window') and (l <> '0,0,0,0') then\n    \tbegin\n      lastWindowRect:=strToRect(l);\n      boundsRect:=lastWindowRect;\n      end;\n    if h = 'window-max' then windowstate:=BOOL2WS[yes];\n    if h = 'port' then\n      if srv.active then changePort(l)\n      else port:=l;\n    if h = 'ip' then savedip:=l;\n    if h = 'custom-ip' then customIPs:=split(';',l);\n    if h = 'listen-on' then listenOn:=l;\n    if h = 'dynamic-dns-updater' then dyndns.url:=decodeB64utf8(l);\n    if h = 'dynamic-dns-user' then dyndns.user:=l;\n    if h = 'dynamic-dns-host' then dyndns.host:=l;\n    if h = 'login-realm' then loginRealm:=l;\n    if h = 'easy' then setEasyMode(yes);\n    if h = 'keep-bak-updating' then keepBakUpdatingChk.checked:=yes;\n\t\tif h = 'encode-non-ascii' then encodenonasciiChk.checked:=yes;\n\t\tif h = 'encode-spaces' then encodespacesChk.checked:=yes;\n\t\tif h = 'search-better-ip' then searchbetteripChk.checked:=yes;\n    if h = 'start-minimized' then startMinimizedChk.checked:=yes;\n    if h = 'files-box-ratio' then filesBoxRatio:=real;\n    if h = 'log-max-lines' then logMaxLines:=int;\n    if h = 'log-file-name' then logFile.filename:=l;\n    if h = 'log-font-name' then logFontName:=l;\n    if h = 'log-font-size' then logFontSize:=int;\n    if h = 'log-date' then LogdateChk.checked:=yes;\n    if h = 'log-time' then LogtimeChk.checked:=yes;\n    if h = 'log-read-only' then logbox.readonly:=yes;\n    if h = 'log-browsing' then logBrowsingChk.checked:=yes;\n    if h = 'log-icons' then logIconsChk.checked:=yes;\n    if h = 'log-progress' then logProgressChk.checked:=yes;\n    if h = 'log-banned' then logBannedChk.checked:=yes;\n    if h = 'log-others' then logOtherEventsChk.checked:=yes;\n    if h = 'log-dump-request' then DumprequestsChk.checked:=yes;\n    if h = 'log-server-start' then logServerstartChk.checked:=yes;\n    if h = 'log-server-stop' then logServerstopChk.checked:=yes;\n    if h = 'log-connections' then logConnectionsChk.checked:=yes;\n    if h = 'log-disconnections' then logDisconnectionsChk.checked:=yes;\n    if h = 'log-bytes-sent' then logBytessentChk.checked:=yes;\n    if h = 'log-bytes-received' then logBytesreceivedChk.checked:=yes;\n    if h = 'log-replies' then logRepliesChk.checked:=yes;\n    if h = 'log-requests' then logRequestsChk.checked:=yes;\n    if h = 'log-uploads' then logUploadsChk.checked:=yes;\n    if h = 'log-deletions' then logDeletionsChk.checked:=yes;\n    if h = 'log-full-downloads' then logFulldownloadsChk.checked:=yes;\n    if h = 'log-apache-format' then logfile.apacheFormat:=l;\n    if h = 'log-only-served' then logOnlyServedChk.checked:=yes;\n    if h = 'log-to-screen' then logOnVideoChk.checked:=yes;\n    if h = 'log-file-tabbed' then tabOnLogFileChk.checked:=yes;\n    if h = 'confirm-exit' then confirmexitChk.checked:=yes;\n    if h = 'backup-saving' then backupSavingChk.checked:=yes;\n    if h = 'connections-height' then lastGoodConnHeight:=int;\n    if h = 'files-stay-flagged-for-minutes'then filesStayFlaggedForMinutes:=int;\n    if h = 'folders-before' then foldersbeforeChk.checked:=yes;\n    if h = 'include-pwd-in-pages' then pwdInPagesChk.Checked:=yes;\n    if h = 'minimize-to-tray' then MinimizetotrayChk.checked:=yes;\n    if h = 'prevent-standby' then preventStandbyChk.checked:=yes;\n\t\tif h = 'use-system-icons' then usesystemiconsChk.checked:=yes;\n    if h = 'quit-dont-ask' then quitWithoutAskingToSaveChk.checked:=yes;\n\t\tif h = 'auto-save-options' then autosaveoptionsChk.checked:=yes;\n    if h = 'use-comment-as-realm' then usecommentasrealmChk.checked:=yes;\n    if h = 'persistent-connections'then persistentconnectionsChk.checked:=yes;\n\t\tif h = 'show-main-tray-icon' then showmaintrayiconChk.checked:=yes;\n    if h = 'delete-dont-ask' then deleteDontAskChk.checked:=yes;\n\t  if h = 'tray-icon-for-each-download' then trayfordownloadChk.checked:=yes;\n    if h = 'copy-url-on-addition' then AutocopyURLonadditionChk.checked:=yes;\n    if h = 'copy-url-on-start' then autocopyURLonstartChk.checked:=yes;\n    if h = 'enable-macros' then enableMacrosChk.checked:=yes;\n    if h = 'update-daily' then updateDailyChk.checked:=yes;\n    if h = 'tray-instead-of-quit' then trayInsteadOfQuitChk.checked:=yes;\n    if h = 'modal-options' then modalOptionsChk.checked:=yes;\n    if h = 'beep-on-flash' then beepChk.checked:=yes;\n    if h = 'prevent-leeching' then preventLeechingChk.checked:=yes;\n    if h = 'list-hidden-files' then listfileswithhiddenattributeChk.checked:=yes;\n    if h = 'list-system-files' then listfileswithsystemattributeChk.checked:=yes;\n    if h = 'list-protected-items' then hideProtectedItemsChk.checked:=yes;\n    if h = 'always-on-top' then alwaysontopChk.checked:=yes;\n    if h = 'support-descript.ion' then supportDescriptionChk.Checked:=yes;\n    if h = 'oem-descript.ion' then oemForIonChk.checked:=yes;\n    if h = 'oem-tar' then oemTarChk.checked:=yes;\n    if h = 'free-login' then freeLoginChk.checked:=yes;\n    if h = 'https-url' then httpsUrlsChk.checked:=yes;\n    if h = 'enable-fingerprints' then fingerprintsChk.checked:=yes;\n    if h = 'save-fingerprints' then saveNewFingerprintsChk.checked:=yes;\n    if h = 'auto-fingerprint' then setAutoFingerprint(int);\n    if h = 'log-toolbar-expanded' then setLogToolbar(yes);\n    if h = 'last-update-check' then lastUpdateCheck:=real;\n    if h = 'recursive-listing' then recursiveListingChk.checked:=yes;\n    if h = 'enable-no-default' then enableNoDefaultChk.checked:=yes;\n    if h = 'browse-localhost' then browseUsingLocalhostChk.checked:=yes;\n    if h = 'tpl-file' then tplFilename:=l;\n    if h = 'tpl-editor' then tplEditor:=l;\n    if h = 'add-folder-default' then addFolderDefault:=l;\n    if h = 'default-sorting' then defSorting:=l;\n    if h = 'last-dialog-folder' then lastDialogFolder:=l;\n    if h = 'send-hfs-identifier' then sendHFSidentifierChk.checked:=yes;\n\t\tif h = 'auto-save-vfs' then autosaveVFSchk.checked:=yes;\n    if h = 'add-to-folder' then addToFolder:=l;\n    if h = 'getright-template' then DMbrowserTplChk.checked:=yes;\n\t\tif h = 'speed-limit' then setSpeedLimit(real);\n\t\tif h = 'speed-limit-ip' then setSpeedLimitIP(real);\n    if h = 'no-download-timeout' then setNoDownloadTimeout(int);\n    if h = 'connections-timeout' then connectionsInactivityTimeout:=int;\n    if h = 'max-ips' then setMaxIPs(int);\n    if h = 'max-ips-downloading' then setMaxIPsDLing(int);\n    if h = 'max-connections' then setMaxConnections(int);\n    if h = 'max-connections-by-ip' then setMaxConnectionsIP(int);\n    if h = 'max-contemporary-dls' then setMaxDLs(int);\n    if h = 'max-contemporary-dls-ip' then setMaxDLsIP(int);\n\t\tif h = 'tray-message' then trayMsg:=replaceStr(unescapeNL(l), CRLF, trayNL);\n    if h = 'ban-list' then loadBanlist(l);\n    if h = 'no-reply-ban' then noReplyBan:=yes;\n    if h = 'save-totals' then saveTotalsChk.checked:=yes;\n    if h = 'allowed-referer' then allowedReferer:=l;\n    if h = 'open-in-browser' then openInBrowser:=l;\n\t\tif h = 'last-file-open' then lastFileOpen:=l;\n\t\tif h = 'reload-on-startup' then reloadonstartupChk.checked:=yes;\n    if h = 'stop-spiders' then stopSpidersChk.checked:=yes;\n    if h = 'find-external-on-startup' then findExtOnStartupChk.checked:=yes;\n    if h = 'dont-include-port-in-url' then noPortInUrlChk.checked:=yes;\n    if h = 'tray-shows' then trayshows:=l;\n    if h = 'auto-save-vfs-every' then setAutosave(autosaveVFS, int);\n    if h = 'external-ip-server' then customIPservice:=l;\n    if h = 'only-1-instance' then only1instanceChk.checked:=yes;\n\t\tif h = 'graph-rate' then setGraphRate(int);\n\t\tif h = 'graph-size' then graph.size:=int;\n    if h = 'forwarded-mask' then forwardedMask:=l;\n    if h = 'delete-partial-uploads' then deletePartialUploadsChk.checked:=yes;\n    if h = 'rename-partial-uploads' then renamePartialUploads:=l;\n    if h = 'do-not-log-address' then dontLogAddressMask:=l;\n    if h = 'out-total' then outTotalOfs:=int;\n    if h = 'in-total' then inTotalOfs:=int;\n    if h = 'hits-total' then hitsLogged:=int;\n    if h = 'downloads-total' then downloadsLogged:=int;\n    if h = 'upload-total' then uploadsLogged:=int;\n    if h = 'min-disk-space' then minDiskSpace:=int;\n    if h = 'flash-on' then flashOn:=l;\n    if h = 'last-external-address' then dyndns.lastIP:=l;\n    if h = 'recents' then recentFiles:=split(';',l);   // legacy: moved to recent-files because the split-char changed in #111\n    if h = 'recent-files' then recentFiles:=split('|',l);\n    if h = 'trusted-files' then trustedFiles:=split('|',l);\n    if h = 'ips-ever-connected' then ipsEverConnected.DelimitedText:=l;\n    if h = 'mime-types' then mimeTypes:=split('|',l);\n    if h = 'in-browser-if-mime' then inBrowserIfMIME:=yes;\n    if h = 'address2name' then address2name:=split('|',l);\n    if h = 'compressed-browsing' then compressedbrowsingChk.checked:=yes;\n    if h = 'hints4newcomers' then HintsfornewcomersChk.checked:=yes;\n    if h = 'tester-updates' then testerUpdatesChk.checked:=yes;\n    if h = 'number-files-on-upload' then numberFilesOnUploadChk.checked:=yes;\n    if h = 'many-items-warning' then warnManyItems:=yes;\n    if h = 'load-single-comment-files' then loadSingleCommentsChk.checked:=yes;\n    if h = 'accounts' then strToAccounts();\n    if h = 'use-iso-date-format' then useISOdateChk.Checked:=yes;\n    if h = 'auto-comment' then autoCommentChk.checked:=yes;\n    if h = 'icon-masks-user-images' then readUserIconMasks();\n    if h = 'icon-masks' then strToIconmasks();\n    if h = 'connections-columns' then serializedConnColumns:=l;\n    if h = 'ip-services' then IPservices:=split(';', l);\n    if h = 'ip-services-time' then IPservicesTime:=real;\n    if h = 'update-automatically' then updateAutomaticallyChk.checked:=yes;\n    if h = 'delayed-update' then delayUpdateChk.checked:=yes;\n    if h = 'links-before' then linksBeforeChk.checked:=yes;\n    if h = 'account-notes-wrap' then optionsFrm.notesWrapChk.checked:=yes;\n\n\t\tif h = 'graph-visible' then\n      if yes then showGraph()\n      else hideGraph();\n    // extra commands for external use\n    if h = 'load-tpl-from' then setNewTplFile(l);\n  except end;\n  end;\n\nif not alreadyStarted then\n  // i was already seeing all the stuff, so please don't hide it\n  if (build > '') and (build < '006') then easyMode:=FALSE;\n\nif not alreadyStarted\nand not saveTotalsChk.checked then\n  begin\n  outTotalOfs:=0;\n  inTotalOfs:=0;\n  hitsLogged:=0;\n  downloadsLogged:=0;\n  uploadsLogged:=0;\n  end;\nfindSimilarIP(savedIP);\nif lastGoodLogWidth > 0 then\n  logBox.Width:=lastGoodLogWidth;\nif lastGoodConnHeight > 0 then\n  connPnl.Height:=lastGoodConnHeight;\nif not fileExists(tplFilename) then\n  setTplText(defaultTpl);\nsrv.persistentConnections:=persistentconnectionsChk.Checked;\napplyFilesBoxRatio();\nupdateRecentFilesMenu();\nkeepTplUpdated();\nupdateAlwaysOnTop();\napplyISOdateFormat();\n// the filematch() would be fooled by spaces, so lets trim\nfor i:=0 to length(MIMEtypes)-1 do\n  MIMEtypes[i]:=trim(MIMEtypes[i]);\n\naddMissingMimeTypes();\nfor i:=0 to length(warnings)-1 do\n  msgDlg(warnings[i], MB_ICONWARNING);\nif alreadyStarted then\n  if activateServer <> srv.active then toggleServer()\n  else\nelse\n  if activateServer then startServer();\nresult:=TRUE;\n\nupdateCurrentCFG();\nend; // setcfg\n\nfunction loadCfg(var ini,tpl:string):boolean;\n\n  // until 2.2 the template could be kept in the registry, so we need to move it now.  \n  // returns true if the registry source can be deleted\n  function moveLegacyTpl(tpl:string):boolean;\n  begin\n  result:=FALSE;\n  if (tplFilename > '') or (tpl = '') then exit;\n  tplFilename:=cfgPath+TPL_FILE;\n  result:=saveTextFile(tplFilename, tpl);\n  end; // moveLegacyTpl\n\nbegin\nresult:=TRUE;\nipsEverConnected.text:=loadTextfile(IPS_FILE);\nini:=loadTextFile(cfgPath+CFG_FILE);\nif ini > '' then\n  begin\n  saveMode:=SM_FILE;\n  moveLegacyTpl(loadTextFile(cfgPath+TPL_FILE));\n  exit;\n  end;\nini:=loadregistry(CFG_KEY, '');\nif ini > '' then\n  begin\n  saveMode:=SM_USER;\n  if moveLegacyTpl(loadregistry(CFG_KEY, TPL_FILE)) then\n    deleteRegistry(CFG_KEY, TPL_FILE);\n  exit;\n  end;\nini:=loadregistry(CFG_KEY, '', HKEY_LOCAL_MACHINE);\nif ini > '' then\n  begin\n  saveMode:=SM_SYSTEM;\n  if moveLegacyTpl(loadregistry(CFG_KEY, TPL_FILE, HKEY_LOCAL_MACHINE)) then\n    deleteRegistry(CFG_KEY, TPL_FILE, HKEY_LOCAL_MACHINE);\n  exit;\n  end;\nresult:=FALSE;\nend; // loadCfg\n\nprocedure TmainFrm.Viewhttprequest1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\nmsgDlg(first([cd.conn.request.full, cd.conn.getBuffer(), '(empty)']));\nend;\n\nprocedure TmainFrm.connmenuPopup(Sender: TObject);\nvar\n  bs,          // is there any connection selected?\n  ba: boolean; // is there any connection listed and connected?\n  i: integer;\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nbs:=assigned(cd);\nba:=FALSE;\nfor i:=0 to connBox.items.count-1 do\n  if conn2data(i).conn.state <> HCS_DISCONNECTED then\n    begin\n    ba:=TRUE;\n    break;\n    end;\nViewhttprequest1.enabled:=bs;\nBanIPaddress1.enabled:=bs;\nKickconnection1.Enabled:=bs and (cd.conn.state <> HCS_DISCONNECTED);\nKickIPaddress1.Enabled:=bs and ba;\nKickallconnections1.Enabled:=ba;\nKickidleconnections1.Enabled:=ba;\npause1.visible:=bs and isDownloading(cd);\nPause1.Checked:=bs and cd.conn.paused;\n\ntrayiconforeachdownload1.visible:=trayfordownloadChk.Checked and fromTray;\nend;\n\nfunction expandAccountByLink(a:Paccount; noGroups:boolean=TRUE):TstringDynArray;\nvar\n  i: integer;\nbegin\nresult:=NIL;\nif a = NIL then exit;\n\nif not (a.group and noGroups) then\n  addString(a.user, result);\nfor i:=0 to length(accounts)-1 do\n  if not stringExists(accounts[i].user, result)\n  and stringExists(a.user, accounts[i].link) then\n    addArray(result, expandAccountByLink(@accounts[i]));\nuniqueStrings(result);\nend; // expandAccountByLink\n\nfunction expandAccountsByLink(users:TStringDynArray; noGroups:boolean=TRUE):TstringDynArray;\nvar\n  i: integer;\nbegin\nresult:=NIL;\nfor i:=0 to length(users)-1 do\n  addArray(result, expandAccountByLink(getAccount(users[i], TRUE)));\nuniqueStrings(result);\nend; // expandAccountsByLink\n\nprocedure makeOwnerDrawnMenu(mi:Tmenuitem; included:boolean=FALSE);\nvar\n  i: integer;\nbegin\nif included then\n  begin\n  mi.onDrawItem:=mainfrm.menuDraw;\n  mi.OnMeasureItem:=mainfrm.menuMeasure;\n  end;\nfor i:=0 to mi.count-1 do\n  makeOwnerDrawnMenu(mi.items[i], TRUE);\nend; // makeOwnerDrawnMenu\n\nprocedure TmainFrm.filemenuPopup(Sender: TObject);\nconst\n  ONLY_ANY = 0;\n  ONLY_EASY = 1;\n  ONLY_EXPERT = 2;\nvar\n  anyFileSelected: boolean;\n  i: integer;\n  f: Tfile;\n  a: TStringDynArray;\n\n  function onlySatisfied(only:integer):boolean;\n  begin\n  result:=(only=ONLY_ANY)\n    or (only=ONLY_EASY) and easyMode\n    or (only=ONLY_EXPERT) and not easyMode\n  end; // onlySatisfied\n\n  procedure visibleAs(mi:Tmenuitem; other:Tmenuitem; only:integer=ONLY_ANY);\n  begin mi.visible:=other.visible and onlySatisfied(only) end;\n\n  procedure visibleIf(mi:Tmenuitem; should:boolean; only:integer=ONLY_ANY);\n  begin if should then\n    mi.visible:=TRUE and onlySatisfied(only) end;\n\n  procedure checkedIf(mi:Tmenuitem; should:boolean);\n  begin if should then mi.checked:=TRUE end;\n\n  procedure enabledIf(mi:Tmenuitem; should:boolean);\n  begin if should then mi.enabled:=TRUE end;\n\n  procedure setDefaultValues(mi:TmenuItem);\n  var\n    i: integer;\n  begin\n  for i:=0 to mi.count-1 do\n    begin\n    mi[i].visible:=FALSE;\n    mi[i].enabled:=TRUE;\n    mi[i].checked:=FALSE;\n    end;\n  end; // setDefaultValues\n\n  function itemsVisible(mi:TmenuItem):integer;\n  var\n    i: integer;\n  begin\n  result:=0;\n  for i:=0 to mi.count-1 do\n    if mi.Items[i].visible then\n      inc(result);\n  end; // itemsVisible\n\nbegin\n// default values\nsetDefaultValues(filemenu.items);\nAddfiles1.visible:=TRUE;\nAddfolder1.visible:=TRUE;\nProperties1.visible:=TRUE;\n\nanyFileSelected:=selectedFile<>NIL;\nnewfolder1.visible:=not anyFileSelected\n  or ((filesBox.SelectionCount=1) and selectedFile.isFolder());\nSetuserpass1.visible:=anyFileSelected;\nCopyURL1.visible:=anyFileSelected;\n\nvisibleIf(Bindroottorealfolder1, (filesBox.SelectionCount=1) and selectedFile.isRoot() and selectedFile.isVirtualFolder(), ONLY_EXPERT);\nvisibleIf(Unbindroot1, (filesBox.SelectionCount=1) and selectedFile.isRoot() and selectedFile.isRealFolder(), ONLY_EXPERT);\n\nfor i:=0 to filesBox.SelectionCount-1 do\n  begin\n  f:=filesBox.selections[i].data;\n  visibleIf(setURL1, FA_LINK in f.flags);\n  visibleIf(Remove1, not f.isRoot());\n  visibleIf(Flagasnew1, not f.isNew() and (filesStayFlaggedForMinutes>0));\n  visibleIf(Resetnewflag1, f.isNew() and (filesStayFlaggedForMinutes>0));\n  visibleIf(SwitchToVirtual1, f.isRealFolder() and not f.isRoot(), ONLY_EXPERT);\n  visibleIf(SwitchToRealfolder1, f.isVirtualFolder() and not f.isRoot() and (f.resource > ''), ONLY_EXPERT);\n  visibleIf(Resetuserpass1, f.user>'');\n  visibleIf(CopyURLwithfingerprint1, f.isFile(), ONLY_EXPERT);\n  end;\nvisibleAs(newlink1, newfolder1, ONLY_EXPERT);\nvisibleIf(purge1, anyFileSelected, ONLY_EXPERT);\n\nif filesBox.SelectionCount = 1 then\n  begin\n  f:=selectedFile;\n  visibleIf(Defaultpointtoaddfiles1, f.isFolder(), ONLY_EXPERT);\n  visibleIf(Editresource1, not (FA_VIRTUAL in f.flags), ONLY_EXPERT);\n  visibleAs(rename1, remove1);\n  visibleIf(openit1, not f.isVirtualFolder());\n  visibleIf(browseIt1, TRUE, ONLY_EXPERT);\n  paste1.visible:=clipboard.HasFormat(CF_HDROP);\n\n  a:=NIL;\n  if anyFileSelected then\n    a:=expandAccountsByLink(selectedFile.getAccountsFor(FA_ACCESS, TRUE));\n  visibleIf(CopyURLwithpassword1, assigned(a), ONLY_EXPERT);\n  copyURLwithpassword1.Clear();\n  for i:=0 to length(a)-1 do\n    copyURLwithpassword1.add( newItem( a[i], 0, FALSE, TRUE, copyURLwithPasswordMenuClick, 0, '') );\n  end;\n\na:=getPossibleAddresses();\nif length(a) = 1 then a:=NIL;\nvisibleIf(CopyURLwithdifferentaddress1, anyFileSelected and assigned(a), ONLY_EXPERT);\ncopyURLwithdifferentaddress1.clear();\nfor i:=0 to length(a)-1 do\n  copyURLwithdifferentaddress1.add( newItem( a[i], 0, FALSE, TRUE, copyURLwithAddressMenuclick, 0, '') );\n\nend;\n\nfunction Tmainfrm.saveCFG():boolean;\n\n  procedure proposeUserRegistry();\n  resourcestring\n    MSG = 'Can''t save options there.'\n      +#13'Should I try to save to user registry?';\n  begin\n  if msgDlg(MSG, MB_ICONERROR+MB_YESNO) = IDYES then\n    begin\n    saveMode:=SM_USER;\n    saveCFG();\n    end;\n  end; // proposeUserRegistry\n\nvar\n  cfg: string;\nbegin\nresult:=FALSE;\nif srv = NIL then exit;\nif quitting and (backuppedCfg > '') then\n  cfg:=backuppedCfg\nelse\n  cfg:=getCfg();\ncase saveMode of\n\tSM_FILE:\n  \tbegin\n    if not saveTextFile(cfgPath+CFG_FILE, cfg) then\n      begin\n      proposeUserRegistry();\n      exit;\n      end;\n    result:=TRUE;\n    end;\n  SM_SYSTEM:\n  \tbegin\n    deleteFile(cfgPath+CFG_FILE);\n    deleteRegistry(CFG_KEY);\n    if not saveregistry( CFG_KEY, '', cfg, HKEY_LOCAL_MACHINE ) then\n      begin\n      proposeUserRegistry();\n      exit;\n      end;\n    result:=TRUE;\n    end;\n  SM_USER:\n  \tbegin\n    deleteFile(cfgPath+CFG_FILE);\n    result:=saveregistry(CFG_KEY, '', cfg);\n    end;\n  end;\nif ipsEverConnected.Count >= IPS_THRESHOLD  then\n  saveTextFile(IPS_FILE, ipsEverConnected.text)\nelse\n  deleteFile(IPS_FILE);\n\nif result then\n  deleteFile(lastUpdateCheckFN);\nend; // saveCFG\n\n// this method is called by all \"save options\" ways\nprocedure TmainFrm.tofile1Click(Sender: TObject);\nbegin\nif sender = tofile1 then saveMode:=SM_FILE\nelse if sender = toregistrycurrentuser1 then saveMode:=SM_USER\nelse if sender = toregistryallusers1 then saveMode:=SM_SYSTEM\nelse exit;\n\nif saveCFG() then\n  msgDlg(MSG_OPTIONS_SAVED);\nend;\n\nprocedure TmainFrm.About1Click(Sender: TObject);\nconst msg = 'HFS version %s'\n  +#13'Copyright (C) 2002-2020  Massimo Melina (www.rejetto.com)'\n  +#13#13'HFS comes with ABSOLUTELY NO WARRANTY under the license GNU GPL 3.0. For details click Menu -> Web links -> License'\n  +#13'This is FREE software, and you are welcome to redistribute it under certain conditions.'\n  +#13#13'Build #%s';\nbegin msgDlg(format(msg, [VERSION,VERSION_BUILD])) end;\n\nprocedure Tmainfrm.purgeConnections();\nvar\n  i: integer;\n  data: TconnData;\nbegin\ni:=0;\nwhile i < toDelete.Count do\n  begin\n  data:=toDelete[i];\n  inc(i);\n  if data = NIL then continue;\n  if assigned(data.conn) and data.conn.dontFree then continue;\n  toDelete[i-1]:=NIL;\n  setupDownloadIcon(data);\n  data.lastFile:=NIL; // auto-freeing\n\n  if assigned(data.limiter) then\n    begin\n    srv.limiters.remove(data.limiter);\n    freeAndNIL(data.limiter);\n    end;\n  freeAndNIL(data.conn);\n  try freeAndNIL(data) except end;\n  end;\ntoDelete.clear();\nend; // purgeConnections\n\nprocedure Tmainfrm.recalculateGraph();\nvar\n  i: integer;\nbegin\nif (srv = NIL) or quitting then exit;\n// shift samples\ni:=sizeOf(graph.samplesOut)-sizeOf(graph.samplesOut[0]);\nmove(graph.samplesOut[0], graph.samplesOut[1], i);\nmove(graph.samplesIn[0], graph.samplesIn[1], i);\n// insert new \"out\" sample\ngraph.samplesOut[0]:=srv.bytesSent-graph.lastOut;\ngraph.lastOut:=srv.bytesSent;\n// insert new \"in\" sample\ngraph.samplesIn[0]:=srv.bytesReceived-graph.lastIn;\ngraph.lastIn:=srv.bytesReceived;\n// increase the max value\ni:=max(graph.samplesOut[0], graph.samplesIn[0]);\nif i > graph.maxV then\n  begin\n  graph.maxV:=i;\n  graph.beforeRecalcMax:=100;\n  end;\ndec(graph.beforeRecalcMax);\nif graph.beforeRecalcMax > 0 then exit;\n// recalculate max value\ngraph.maxV:=0;\nwith graph do\n  for i:=0 to length(samplesOut)-1 do\n    maxV:=max(maxV, max(samplesOut[i], samplesIn[i]) );\ngraph.beforeRecalcMax:=100;\nend; // recalculateGraph\n\n// parse the version-dependant notice\nprocedure parseVersionNotice(s:string);\nvar\n  l, msg: string;\nbegin\nwhile s > '' do\n  begin\n  l:=trim(chopLine(s));\n  // the line has to start with a @ followed by involved versions\n  if (length(l) < 2) or (l[1] <> '@') then continue;\n  delete(l,1,1);\n  // collect the message (until next @-starting line)\n  msg:='';\n  while (s > '') and (s[1] <> '@') do\n    msg:=msg+chopLine(s)+#13;\n  // before 2.0 beta14 a bare semicolon-separated string comparison was used\n  if filematch(l, VERSION) or filematch(l, '#'+VERSION_BUILD) then\n    msgDlg(msg, MB_ICONWARNING);\n  end;\nend; // parseVersionNotice\n\nfunction doTheUpdate(url:string):boolean;\nresourcestring\n  MSG_SAVE_ERROR = 'Cannot save the update';\n  MSG_LIMITED = 'The auto-update feature cannot work because it requires the \"Only 1 instance\" option enabled.'\n    +#13#13'Your browser will now be pointed to the update, so you can install it manually.';\nconst\n  UPDATE_BATCH_FILE = 'hfs.update.bat';\n  UPDATE_BATCH = 'START %0:s /WAIT \"%1:s\" -q'+CRLF\n    +'ping 127.0.0.1 -n 3 -w 1000> nul'+CRLF\n    +'DEL \"%3:s'+PREVIOUS_VERSION+'\"'+CRLF\n    +'%2:sMOVE \"%1:s\" \"%3:s'+PREVIOUS_VERSION+'\"'+CRLF\n    +'DEL \"%1:s\"'+CRLF\n    +'MOVE \"%4:s\" \"%1:s\"'+CRLF\n    +'START %0:s \"%1:s\"'+CRLF\n    +'DEL %%0'+CRLF;\nvar\n  size: integer;\n  fn: string;\nbegin\nresult:=FALSE;\nif not mono.working then\n  begin\n  msgDlg(MSG_LIMITED, MB_ICONWARNING);\n  openURL(url);\n  exit;\n  end;\nif mainfrm.delayUpdateChk.checked\nand (srv.conns.count > 0) then\n  begin\n  updateASAP:=url;\n  stopServer();\n  mainfrm.kickidleconnections1Click(NIL);\n  mainfrm.setStatusBarText('Waiting for last requests to be served, then we''ll update', 20);\n  exit;\n  end;\n// must ask BEFORE: when the batch will be running, nothing should stop it, or it will fail\nif not checkVfsOnQuit() then exit;\nVFSmodified:=FALSE;\n\nprogFrm.show('Downloading new version...', TRUE);\ntry\n  fn:=paramStr(0)+'.new';\n  size:=sizeOfFile(fn);\n  // a previous failed update attempt? avoid re-downloading if not necessary\n  if (size <= 0) or (httpFileSize(url) <> size) then\n    try\n      if not httpGetFile(url, fn, 2, mainfrm.progFrmHttpGetUpdate) then\n        begin\n        if not lockTimerevent then\n          msgDlg(MSG_COMM_ERROR, MB_ICONERROR);\n        exit;\n        end;\n    except\n      if not lockTimerevent then\n        msgDlg(MSG_SAVE_ERROR, MB_ICONERROR);\n      exit;\n      end;\nfinally progFrm.hide() end;\nif progFrm.cancelRequested then\n  begin\n  deleteFile(fn);\n  exit;\n  end;\n\ntry\n  progFrm.show('Processing...');\n  saveTextFile(UPDATE_BATCH_FILE, format(UPDATE_BATCH, [\n    if_(isNT(), '\"\"'),\n    paramStr(0),\n    if_(not mainfrm.keepBakUpdatingChk.checked,'REM '),\n    exePath,\n    fn\n  ]));\n  execNew(UPDATE_BATCH_FILE);\n  result:=TRUE;\nfinally progFrm.hide() end;\nend; // doTheUpdate\n\nfunction promptForUpdating(url:string):boolean;\nresourcestring\n  MSG_UPDATE = 'You are invited to use the new version.'#13#13'Update now?';\nbegin\nresult:=FALSE;\nif url = '' then exit;\nif not mainfrm.updateAutomaticallyChk.checked\nand (msgDlg(MSG_UPDATE, MB_YESNO) = IDNO) then\n  exit;\ndoTheUpdate(url);\nresult:=TRUE;\nend; // promptForUpdating\n\nfunction downloadUpdateInfo():Ttpl;\nconst\n  URL = 'http://www.rejetto.com/hfs/hfs.updateinfo.txt';\n  ON_DISK = 'hfs.updateinfo.txt';\nresourcestring\n  MSG_FROMDISK = 'Update info has been read from local file.'\n    +#13'To resume normal operation of the updater, delete the file '\n      +ON_DISK+' from the HFS program folder.';\nvar\n  s: string;\nbegin\nlastUpdateCheck:=now();\nsaveTextFile(lastUpdateCheckFN, '');\nfileSetAttr(lastUpdateCheckFN, faHidden);\n\nresult:=NIL;\nprogFrm.show('Requesting...');\ntry\n  // this let the developer to test the parsing locally\n  if not fileExists(ON_DISK) then\n    try s:=httpGet(URL)\n    except end\n  else\n    begin\n    s:=loadTextFile(ON_DISK);\n    msgDlg(MSG_FROMDISK, MB_ICONWARNING);\n    end;\nfinally progFrm.hide() end;\nif pos('[EOF]', s) = 0 then exit;\nresult:=Ttpl.create();\nresult.fullText:=s;\nend; // downloadUpdateInfo\n\nprocedure Tmainfrm.autoCheckUpdates();\nvar\n  info: Ttpl;\n  updateURL, ver, build: string;\n\n  function thereSnew(kind:string):boolean;\n  var\n    s: string;\n  begin\n  s:=trim(info['last '+kind+' build']);\n  result:=(s > VERSION_BUILD) and (s <> refusedUpdate);\n  if not result then exit;\n  build:=s;\n  updateURL:=trim(info['last '+kind+' url']);\n  ver:=trim(info['last '+kind]);\n  end;\n\nbegin\nif (VERSION_STABLE and (now()-lastUpdateCheck < 1))\nor (now()-lastUpdateCheck < 1/3) then exit;\nsetStatusBarText('Checking for updates');\ntry\n  info:=downloadUpdateInfo();\n  if info = NIL then\n    begin\n    if logOtherEventsChk.checked then add2log('Check update: failed');\n    setStatusBarText('Check update: failed');\n    exit;\n    end;\n  if not thereSnew('stable')\n  and (not VERSION_STABLE or testerUpdatesChk.checked) then\n    thereSnew('untested');\n  // same version? we show build number\n  if ver = VERSION then\n    ver:=format('Build #%s (current is #%s)', [build, VERSION_BUILD]);\n  if logOtherEventsChk.checked then\n    add2log('Check update: '+ifThen(updateURL = '', 'no new version', 'new version found: '+ver));\n  parseVersionNotice(info['version notice']);\n  setStatusBarText('');\n  if updateURL = '' then exit;\n  if updateAutomaticallyChk.checked\n  and doTheUpdate(updateURL) then exit;\n  // notify the user gently\n  updateBtn.show();\n  updateWaiting:=updateURL;\n  flash();\nfinally freeAndNIL(info) end;\nend; // autoCheckUpdates\n\nprocedure loadEvents();\nbegin eventScripts.fullText:=loadTextFile(cfgpath+EVENTSCRIPTS_FILE) end;\n\nprocedure Tmainfrm.updateCopyBtn();\nresourcestring\n  COPY = 'Copy to clipboard';\n  ALREADY = 'Already in clipboard';\nvar\n  s: string;\nbegin\ns:=copyBtn.caption;\ntry\n  copyBtn.Caption:=if_(clipboard.asText = urlBox.text, ALREADY, COPY);\n  if copyBtn.caption <> s then FormResize(NIL);\nexcept end;\nend; // updateCopyBtn\n\nvar\n  timedEventsRE: TRegExpr;\n  eventsLastRun: TstringToIntHash;\n\nprocedure runTimedEvents();\nvar\n  i: integer;\n  sections: TStringDynArray;\n  re: TRegExpr;\n  t, last: Tdatetime;\n  section: string;\n\n  procedure handleAtCase();\n  begin\n  t:=now();\n  // we must convert the format, because our structure stores integers\n  last:=unixToDatetime(eventsLastRun.getInt(section));\n  if (strToInt(re.match[9]) = hourOf(t))\n  and (strtoInt(re.match[10]) = minuteOf(t))\n  and (t-last > 0.9) then // approximately 1 day should have been passed\n    begin\n    eventsLastRun.setInt(section, datetimeToUnix(t));\n    runEventScript(section);\n    end;\n  end; // handleAtCase\n\n  procedure handleEveryCase();\n  begin\n  // get the XX:YY:ZZ\n  t:=strToFloat(re.match[2]);\n  if re.match[4] > '' then\n    t:=t*60+strToInt(re.match[4]);\n  if re.match[6] > '' then\n    t:=t*60+strToInt(re.match[6]);\n  // apply optional time unit\n  case upcase(getFirstChar(re.match[7])) of\n    'M': t:=t*60;\n    'H': t:=t*60*60;\n    end;\n  // now \"t\" is in seconds\n  if (t > 0) and ((clock div 10) mod round(t) = 0) then\n    runEventScript(section);\n  end; // handleEveryCase\n\nbegin\nif timedEventsRE = NIL then\n  begin\n  timedEventsRE:=TRegExpr.create; // yes, i know, this is never freed, but we need it for the whole time\n  timedEventsRE.expression:='(every +([0-9.]+)(:(\\d+)(:(\\d+))?)? *([a-z]*))|(at (\\d+):(\\d+))';\n  timedEventsRE.modifierI:=TRUE;\n  timedEventsRE.compile();\n  end;\n\nif eventsLastRun = NIL then\n  eventsLastRun:=TstringToIntHash.create; // yes, i know, this is never freed, but we need it for the whole time\n\nre:=timedEventsRE; // a shortcut\nsections:=eventScripts.getSections();\nfor i:=0 to length(sections)-1 do\n  begin\n  section:=sections[i]; // a shortcut\n  if not re.exec(section) then continue;\n\n  try\n    if re.match[1] > '' then handleEveryCase()\n    else handleAtCase();\n  except end; // ignore exceptions\n  end;\nend; // runTimedEvents\n\nprocedure TmainFrm.timerEvent(Sender: TObject);\nvar\n  now_: Tdatetime;\n\n  function itsTimeFor(var t:Tdatetime):boolean;\n  begin\n  result:=(t > 0) and (t < now_);\n  if result then t:=0;\n  end; // itsTimeFor\n\n  procedure calculateETA(data:TconnData; current:real; leftOver:int64);\n  var\n    i, n: integer;\n  begin\n  data.eta.data[data.eta.idx mod ETA_FRAME]:=current;\n  inc(data.eta.idx);\n\n  data.averageSpeed:=0;\n  n:=min(data.eta.idx, ETA_FRAME);\n  for i:=0 to n-1 do\n    data.averageSpeed:=data.averageSpeed+data.eta.data[i];\n  data.averageSpeed:=data.averageSpeed/n;\n\n  if data.averageSpeed > 0 then\n    data.eta.result:=(leftOver/data.averageSpeed)/SECONDS;\n  end; // calculateETA\n\n  procedure every10minutes();\n  begin\n  if dyndns.url > '' then\n    getExternalAddress(externalIP);\n  end; // every10minutes\n\n  procedure everyMinute();\n  var\n    sess: Tsession;\n  begin\n  for sess in sessions.values do\n    if now_ > sess.expires then\n      sess.free;\n  if updateDailyChk.Checked then\n    autoCheckUpdates();\n  // purge icons older than 5 minutes, because sometimes icons change\n  iconsCache.purge(now_-(5*60)/SECONDS);\n  end; // everyMinute\n\n  procedure every10sec();\n  var\n    s: string;\n    ss: Tstrings;\n  begin\n  if not stringExists(defaultIP, getPossibleAddresses()) then\n    // previous address not available anymore (it happens using dial-up)\n    findSimilarIP(defaultIP);\n    \n  if searchbetteripChk.checked\n  and not stringExists(defaultIP, customIPs) // we don't mess with custom IPs\n  and isLocalIP(defaultIP) then // we prefer non-local addresses\n    begin\n    s:=getIP();\n    if not isLocalIP(s) then // clearly better\n      setDefaultIP(s)\n    else if ansiStartsStr('169', defaultIP) then // we consider the 169 worst of other locals\n      begin\n      ss:=LocalIPList();\n      if ss.count > 1 then\n        setDefaultIP(ss[ if_(ss[0]=defaultIP, 1, 0) ]);\n      end;;\n    end;\n\n  end; // every10sec\n\n  procedure everySec();\n  var\n    i, outside, size: integer;\n    data: TconnData;\n  begin\n  // this is a already done in utilLib initialization, but it's a workaround to http://www.rejetto.com/forum/?topic=7724\n  FormatSettings.decimalSeparator:='.';\n  // check if the window is outside the visible screen area\n  outside:=left;\n  if assigned(monitor) then  // checking here because the following line once thrown this AV http://www.rejetto.com/forum/?topic=5568\n    for i:=0 to monitor.MonitorNum do\n      dec(outside, screen.monitors[i].width);\n  if (outside > 0)\n  or (boundsRect.bottom < 0)\n  or (boundsRect.right < 0) then\n    makeFullyVisible();\n\n\n  if dyndns.active and (dyndns.url > '') then\n    begin\n    if externalIP = '' then\n      getExternalAddress(externalIP);\n    if not isLocalIP(externalIP) and (externalIP <> dyndns.lastIP)\n    or (now()-dyndns.lastTime > 24) then\n      updateDynDNS();\n    // the action above takes some time, and it can happen we asked to quit in the meantime\n    if quitting then exit;\n    end;\n\n  // the alt+click shortcut to get file properties will result in an unwanted editing request if the file is already selected. This is a workaround.\n  if filesBox.isEditing and assigned(filepropFrm) then\n    selectedFile.node.EndEdit(TRUE);\n\n  updateTrayTip();\n\n  if warnManyItems and (filesBox.items.count > MANY_ITEMS_THRESHOLD) then\n    begin\n    warnManyItems:=FALSE;\n    msgDlg(MSG_MANY_ITEMS, MB_ICONWARNING);\n    end;\n\n  with autosaveVFS do // we do it only if the filename is already specified\n    if (every > 0) and (lastFileOpen > '') and not loadingVFS.disableAutosave\n    and ((now_-last)*SECONDS >= every) then\n      begin\n      last:=now_;\n      saveVFS(lastFileOpen);\n      end;\n\n  if assigned(srv) and assigned(srv.conns) then\n    for i:=0 to srv.conns.count-1 do\n      begin\n      data:=conn2data(i);\n      if data = NIL then continue;\n\n      if isReceivingFile(data) then\n        begin\n        refreshConn(data); // even if no data is coming, we must update other stats\n        calculateETA(data, data.conn.speedIn, data.conn.bytesToPost);\n        end;\n      if isSendingFile(data) then\n        begin\n        refreshConn(data);\n        calculateETA(data, data.conn.speedOut, data.conn.bytesToSend);\n\n        if userIcsBuffer > 0 then\n          data.conn.sock.bufSize:=userIcsBuffer;\n\n        size:=minmax(8192, MEGA, round(data.averageSpeed));\n        if userSocketBuffer > 0 then\n          data.conn.sndBuf:=userSocketBuffer\n        else if highSpeedChk.checked and (safeDiv(0.0+size, data.conn.sndbuf, 2) > 2) then\n            data.conn.sndBuf:=size;\n        end;\n\n      // connection inactivity timeout\n      if (connectionsInactivityTimeout > 0)\n      and ((now_-data.lastActivityTime)*SECONDS >= connectionsInactivityTimeout) then\n        data.disconnect('inactivity');\n      end;\n\n  // server inactivity timeout\n  if noDownloadTimeout > 0 then\n    if (now_-lastActivityTime)*SECONDS > noDownloadTimeout*60 then\n      quitASAP:=TRUE;\n\n  if windowState = wsNormal then\n    lastWindowRect:=mainfrm.boundsRect;\n\n  // update can be put off until there's no one connected\n  if (updateASAP > '') and (srv.conns.count = 0) then\n    doTheUpdate(clearAndReturn(updateASAP)); // before we call the function, lets clear the request\n\n  updateCopyBtn();\n  keepTplUpdated();\n  updateCurrentCFG();\n\n  if newMtime(cfgpath+EVENTSCRIPTS_FILE, eventScriptsLast) then\n    loadEvents();\n\n  if assigned(runScriptFrm) and runScriptFrm.visible\n  and runScriptFrm.autorunChk.checked and newMtime(tempScriptFilename, runScriptLast) then\n    runScriptFrm.runBtnClick(NIL);\n\n  runTimedEvents();\n  end; // everySec\n\n  procedure everyTenth();\n  var\n    f: Tfile;\n    n: Ttreenode;\n  begin\n  purgeConnections();\n\n  // see the filesBoxEditing event for an explanation of the following lines\n  if not filesBox.IsEditing and (remove1.ShortCut = 0) then\n    begin\n    remove1.ShortCut:=TextToShortCut('Del');\n    Paste1.ShortCut:=TextToShortCut('Ctrl+V');\n    copyURL1.ShortCut:=TextToShortCut('Ctrl+C');\n    end;\n\n  with optionsFrm do\n    if active and iconsPage.visible then\n      updateIconMap();\n\n  if scrollFilesBox in [SB_LINEUP,SB_LINEDOWN] then\n    postMessage(filesBox.Handle, WM_VSCROLL, scrollFilesBox, 0);\n\n  if assigned(filesToAddQ) then\n    begin\n    f:=findFilebyURL(addToFolder);\n    if f = NIL then\n      f:=selectedFile;\n    if f = NIL then\n      n:=NIL\n    else\n      n:=f.node;\n    addFilesFromString(join(CRLF, filesToAddQ), n);\n    filesToAddQ:=NIL;\n    end;\n\n  if itsTimeFor(searchLogTime) then\n    if searchLog(0) then logSearchBox.Color:=clWindow\n    else\n      begin\n      logSearchBox.Color:=BG_ERROR;\n      searchLogWhiteTime:=now_+5/SECONDS;\n      end;\n  if itsTimeFor(searchLogWhiteTime) then\n    logSearchBox.Color:=clWindow;\n\n  end; // everyTenth\n\n  function every(tenths:integer):boolean;\n  begin result:=not quitting and (clock mod tenths = 0) end;\n\nvar\n  bak: boolean;\nbegin\nif quitASAP and not quitting and not queryingClose then\n  begin\n  { close is not effective when lockTimerevent is TRUE, so we force it TRUE.\n  { it should not be necessary, but we want to be sure to quit even with bugs. }\n  bak:=lockTimerevent;\n  lockTimerevent:=FALSE;\n  application.MainForm.Close();\n  lockTimerevent:=bak;\n  end; // quit\nif not timer.enabled or quitting or lockTimerevent then exit;\nlockTimerevent:=TRUE;\ntry\n  // idk how it can be, but sometimes this now() call causes an AV http://www.rejetto.com/forum/index.php?topic=6371.msg1038634#msg1038634\n  try now_:=now()\n  except now_:=0 end;\n  if now_ = 0 then exit;\n\n  inc(clock);\n  if every(1) then everyTenth();\n  if every(10*60*10) then every10minutes();\n  if every(60*10) then everyMinute();\n  if every(10*10) then every10sec();\n  if every(10) then everySec();\n  if every(STATUSBAR_REFRESH) then\n    updateSbar();\n  if every(graph.rate) then\n    begin\n    recalculateGraph();\n    graphBoxPaint(NIL);\n    end;\nfinally lockTimerevent:=FALSE end;\nend; // timerEvent\n\nprocedure Tmainfrm.updateSbar();\nvar\n  pn: integer;\n\n  function addPanel(s:string; al:TAlignment=taCenter):integer;\n  begin\n  result:=pn;\n  inc(pn);\n  if sbar.Panels.count < pn then sbar.Panels.Add();\n  with sbar.panels[pn-1] do\n    begin\n    alignment:=al;\n    Text:=s;\n    width:=sbar.Canvas.TextWidth(s)+20;\n    end;\n  end; // addPanel\n\n  procedure checkDiskSpace();\n  resourcestring\n    NOSPACE = 'Out of space';\n  type\n    Tdrive = 1..26;\n  var\n    i: integer;\n    drives: set of Tdrive;\n    driveLetters: TStringDynArray;\n    driveLetter: char;\n  begin\n  if minDiskSpace <= 0 then exit;\n  drives:=[];\n  i:=0;\n  while i < length(uploadPaths) do\n    begin\n    include(drives, filenameToDriveByte(uploadPaths[i]));\n    inc(i);\n    end;\n  driveLetters:=NIL;\n  for i:=low(Tdrive) to high(Tdrive) do\n    if i in drives then\n      begin\n      driveLetter:=chr(i+ord('A')-1);\n      if not sysutils.directoryExists(driveLetter+':\\') then continue;\n      if diskfree(i) div MEGA <= minDiskSpace then\n        addString(driveLetter, driveLetters);\n      end;\n  if driveLetters = NIL then exit;\n  sbarIdxs.oos:=addPanel( NOSPACE+': '+join(',', driveLetters));\n  end; // checkDiskSpace\n\n  function getConnectionsString():string;\n  resourcestring\n    CONN = 'Connections: %d';\n  var\n    i: integer;\n  begin\n  result:=format(CONN, [srv.conns.Count]);\n  if easyMode then exit;\n  i:=countIPs();\n  if i < srv.conns.count then result:=result+' / '+intToStr(i);\n  end;\n\nresourcestring\n  TOT_IN = 'Total In: %s';\n  TOT_OUT = 'Total Out: %s';\n  OUT_SPEED = 'Out: %.1f KB/s';\n  IN_SPEED = 'In: %.1f KB/s';\n  BANS = 'Ban rules: %d';\n  MEMORY = 'Mem';\n  CUSTOMIZED = 'Customized template';\n  ITEMS = 'VFS: %d items';\nvar\n  tempText: string;\nbegin\nif quitting then exit;\nfillChar(sbarIdxs, sizeof(sbarIdxs), -1);\nif sbarTextTimeout < now() then tempText:=''\nelse tempText:=sbar.Panels[sbar.Panels.Count-1].text;\npn:=0;\nif not easyMode then\n  addPanel( getConnectionsString() );\nsbarIdxs.out:=addPanel( format(OUT_SPEED,[srv.speedOut/1000]) );\naddPanel( format(IN_SPEED,[srv.speedIn/1000]) );\nif not easyMode then\n  begin\n  sbarIdxs.totalOut:=addPanel( format(TOT_OUT,[\n    smartSize(outTotalOfs+srv.bytesSent)]) );\n  sbarIdxs.totalIn:=addPanel( format(TOT_IN,[\n    smartSize(inTotalOfs+srv.bytesReceived)]) );\n  sbarIdxs.notSaved:=addPanel( format(ITEMS,[filesBox.items.count-1])\n    +if_(VFSmodified,' - not saved') );\n  if not vFsmodified then sbarIdxs.notSaved:=-1;\n  end;\ncheckDiskSpace();\n\nif showMemUsageChk.checked then\n  addPanel(MEMORY+': '+dotted(allocatedMemory()));\n\nif assigned(banlist) then\n  sbarIdxs.banStatus:=addPanel(format(BANS, [length(banlist)]));\n\nif tplIsCustomized then sbarIdxs.customTpl:=addPanel(CUSTOMIZED);\n\n// if tempText empty, ensures a final panel terminator\naddPanel(tempText, taLeftJustify);\n\n// delete excess panels\nwhile sbar.Panels.count > pn do sbar.Panels.delete(pn);\nend; // updateSbar\n\nprocedure Tmainfrm.refreshIPlist();\nCONST\n  INDEX_FOR_URL = 2;\n  INDEX_FOR_NIC = 1;\nvar\n  a: TStringDynArray;\n  i: integer;\nbegin\nwhile IPaddress1.Items[INDEX_FOR_URL].Caption <> '-' do\n  IPaddress1.delete(INDEX_FOR_URL);\n// fill 'IP address' menu\na:=getPossibleAddresses();\nfor i:=0 to length(a)-1 do\n  mainfrm.IPaddress1.Insert(INDEX_FOR_URL,\n    newItem(a[i], 0, a[i]=defaultIP, TRUE, ipmenuclick, 0, '') );\n\n// fill 'Accept connections on' menu\nwhile Acceptconnectionson1.count > INDEX_FOR_NIC  do\n  Acceptconnectionson1.delete(INDEX_FOR_NIC);\nAnyaddress1.checked:= listenOn = '';\na:=listToArray(localIPlist);\naddUniqueString('127.0.0.1', a);\nfor i:=0 to length(a)-1 do\n  Acceptconnectionson1.Insert(INDEX_FOR_NIC,\n    newItem( a[i], 0, a[i]=listenOn, TRUE, acceptOnMenuclick, 0, '') );\nend; // refreshIPlist\n\nprocedure TmainFrm.filesBoxDblClick(Sender: TObject);\nbegin\nif assigned(selectedFile) then setClip(selectedFile.fullURL());\nupdateUrlBox();\nend;\n\nfunction setBrowsable(f:Tfile; childrenDone:boolean; par, par2:integer):TfileCallbackReturn;\nbegin\nif not f.isFolder() then exit;\nif (FA_BROWSABLE in f.flags) = boolean(par) then VFSmodified:=TRUE\nelse exit;\nif boolean(par) then exclude(f.flags, FA_BROWSABLE)\nelse include(f.flags, FA_BROWSABLE);\nend; // setBrowsable\n\nprocedure fileMenuSetFlag(sender:Tobject; flagToSet:TfileAttribute; filter:TfilterMethod=NIL; negateFilter:boolean=FALSE; recursive:boolean=FALSE; f:Tfile=NIL);\n// parameter \"f\" is designed to be set only inside this function\nvar\n  newState: boolean;\n\n  procedure applyTo(f:Tfile);\n  var\n    n: TtreeNode;\n  begin\n  n:=f.node.getFirstChild();\n  while assigned(n) do\n    begin\n    if assigned(n.data) then fileMenuSetFlag(sender, flagToSet, filter, negateFilter, TRUE, n.data);\n    n:=n.getNextSibling();\n    end;\n\n  if assigned(filter) and (negateFilter = filter(f)) then exit;\n  if (flagToSet in f.flags) = newState then exit;\n  VFSmodified:=TRUE;\n  if newState then include(f.flags, flagToSet)\n  else exclude(f.flags, flagToSet);\n  end; // applyTo\n\nvar\n  i: integer;\nbegin\nif (f = NIL) and (selectedFile = NIL) then exit;\nnewState:=not (sender as TmenuItem).checked;\nif assigned(f) then applyTo(f)\nelse\n  begin\n  for i:=0 to mainFrm.filesBox.SelectionCount-1 do\n    applyTo(mainFrm.filesBox.Selections[i].data);\n  mainFrm.filesBox.Repaint();\n  end;\nend;\n\nprocedure TmainFrm.HideClick(Sender: TObject);\nbegin\ngraphBox.Hide();\ngraphSplitter.Hide();\nend;\n\nprocedure TmainFrm.filesBoxMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);\nbegin filesBox.Selected:=filesbox.GetNodeAt(x,y) end;\n\nprocedure setFilesBoxExtras(v:boolean);\nbegin\n{ let disable this silly feature for now\nif winVersion <> WV_VISTA then exit;\nwith mainfrm.filesBox do\n  begin\n  if isEditing then exit;\n  ShowButtons:=v;\n  ShowLines:=v;\n  end;}\nend; // setFilesBoxExtras\n\nprocedure TmainFrm.filesBoxMouseEnter(Sender: TObject);\nbegin\nwith filesBox do setFilesBoxExtras(TRUE);\nend;\n\nprocedure TmainFrm.filesBoxMouseLeave(Sender: TObject);\nbegin\nwith filesBox do setFilesBoxExtras(focused);\nend;\n\nprocedure TmainFrm.filesBoxMouseUp(Sender: TObject; Button: TMouseButton;\n  Shift: TShiftState; X, Y: Integer);\nbegin\nif (shift = [ssAlt]) and (button = mbLeft) then\n  Properties1.click();\nend;\n\nprocedure TmainFrm.filesBoxCompare(Sender: TObject; Node1, Node2: TTreeNode; Data: Integer; var Compare: Integer);\nvar\n  f1, f2: Tfile;\nbegin\nf1:=Tfile(node1.data);\nf2:=Tfile(node2.data);\nif (f1 = NIL) or (f2 = NIL) then exit;\nif not foldersbeforeChk.checked or (f1.isFolder() = f2.isFolder()) then\n  compare:=ansiCompareText(f1.name, f2.name)\nelse\n  if f1.isFolder() then compare:=-1\n  else compare:=+1;\nend;\n\nprocedure TmainFrm.foldersbeforeChkClick(Sender: TObject);\nbegin rootNode.AlphaSort(TRUE) end;\n\nprocedure browse(url:string);\nbegin\nif mainfrm.browseUsingLocalhostChk.Checked then\n  begin\n  chop('//',url);\n  chop('/',url);\n  url:='http://localhost:'+srv.port+'/'+url;\n  end;\nopenURL(url);\nend; // browse\n\nprocedure TmainFrm.Browseit1Click(Sender: TObject);\nbegin\nif selectedFile = NIL then exit;\nif selectedFile.isLink() then openURL(selectedfile.url())\nelse browse(selectedfile.fullurl())\nend;\n\nprocedure TmainFrm.Openit1Click(Sender: TObject);\nbegin\nif selectedFile = NIL then exit;\nexec('\"'+selectedfile.resource+'\"')\nend;\n\nprocedure TmainFrm.openLogBtnClick(Sender: TObject);\nvar\n  mask, fn: string;\n  s: TfastStringAppend;\n  i: integer;\nbegin\nmask:=logSearchBox.text;\ns:=TfastStringAppend.create;\ntry\n  if sender = openLogBtn then s.append(logBox.text)\n  else\n    for i:=0 to logBox.Lines.Count-1 do\n      if filematch('*'+mask+'*', logbox.lines[i]) then\n        s.append(logBox.lines[i]+CRLF);\n  if s.length() = 0 then\n    begin\n    msgDlg('It''s empty', MB_ICONWARNING);\n    exit;\n    end;\n  fn:=saveTempFile(s.get());\nfinally s.free end;\nif renameFile(fn, fn+'.txt') then exec(fn+'.txt')\nelse msgDlg(MSG_NO_TEMP, MB_ICONERROR);\nend;\n\nprocedure Tmainfrm.ipmenuclick(sender:Tobject);\nvar\n  ip: string;\nbegin\nip:=(sender as Tmenuitem).caption;\ndelete(ip, pos('&',ip), 1);\nsetDefaultIP(ip);\nsearchbetteripChk.checked:=FALSE;\nsetClip(urlBox.text);\nend; // ipmenuclick\n\n// returns the last file added\nfunction Tmainfrm.addFilesFromString(files:string; under:Ttreenode=NIL):Tfile;\nvar\n  folderKindFrm: TfolderKindFrm;\n\n  function selectFolderKind():integer;\n  begin\n  application.restore();\n  application.BringToFront();\n  Application.CreateForm(TfolderKindFrm, folderKindFrm);\n  result:=folderKindFrm.ShowModal();\n  folderKindFrm.Free;\n  end; // selectFolderKind\n\nresourcestring\n  MSG1 = '%s item(s) already exists:'#13'%s'#13#13'Continue?';\nconst\n  MAX_DUPE = 50;\nvar\n  f: Tfile;\n  kind, s, fn: string;\n  doubles: TStringDynArray;\n  res: integer;\n  upload, skipComment: boolean;\nbegin\nresult:=NIL;\nif files = '' then exit;\nupload:=FALSE;\nif singleLine(files) then\n  begin\n  files:=trim(files); // this let me treat 'files' as a simple filename, not caring of the trailing CRLF\n\n  // suggest template installation\n  if (lowerCase(extractFileExt(files)) = '.tpl')\n  and (msgDlg('Install this template?', MB_YESNO) = MRYES) then\n    begin\n    setNewTplFile(files);\n    exit;\n    end;\n\n  upload:=(ipos('upload', extractFilename(files)) > 0)\n    and (msgDlg('Do you want ANYONE to be able to upload to this folder?', MB_YESNO) = MRYES);\n  end;\n// warn upon double filenames\ndoubles:=NIL;\ns:=files;\nwhile s > '' do\n\tbegin\n  fn:=chopLine(s);\n  // we must resolve links here, or we may miss duplicates\n\tif isExtension(fn, '.lnk') or fileExists(fn+'\\target.lnk') then  // mod by mars\n    fn:=resolveLnk(fn);\n\n  if (length(fn) = 3) and (fn[2] = ':') then fn:=fn[1]+fn[2] // unit root folder\n\telse fn:=ExtractFileName(fn);\n  if existsNodeWithName(fn, under) then\n    if addString(fn, doubles) > MAX_DUPE then\n      break;\n  end;\nif assigned(doubles) then\n  begin\n  filesBox.Repaint();\n  res:=length(doubles);\n  s:=if_(res > MAX_DUPE, intToStr(MAX_DUPE)+'+', intToStr(res));\n  s:=format(MSG1, [s, join(', ',doubles)]);\n  if msgDlg(s, MB_ICONWARNING+MB_YESNO) <> IDYES then exit;\n  end;\n\nf:=NIL;\nskipComment:=not singleLine(files);\nkind:=if_(upload, 'real', addFolderDefault);\naddingItemsCounter:=0;\ntry\n\trepeat\n  fn:=chopLine(files);\n  if fn = '' then continue;\n  f:=Tfile.create(fn);\n  if f.isFolder() then\n    begin\n    if kind = '' then\n      begin // we didn't decide if real or virtual yet\n      res:=selectFolderKind();\n\n      if isAbortResult(res) then\n        begin\n        f.free;\n        exit;\n        end;\n      kind:=if_(res = mrYes, 'virtual', 'real');\n      end;\n\n    if kind = 'virtual' then                                             \n      include(f.flags, FA_VIRTUAL);\n    end;\n\n  f.lock();\n  try\n    f.name:=getUniqueNodeName(f.name, under);\n    addFile(f, under, skipComment);\n  finally\n    f.unlock();\n    end;\n\n  until (files = '') or stopAddingItems;\nfinally addingItemsCounter:=-1 end;\n\nif upload then\n  begin\n  addUniqueString(USER_ANYONE, f.accounts[FA_UPLOAD]);\n  sortArray(f.accounts[FA_UPLOAD]);\n  end;\nif assigned(f) and autocopyURLonadditionChk.checked then\n  setClip(f.fullURL());\nresult:=f;\nend; // addFilesFromString\n\nprocedure Tmainfrm.addDropFiles(hnd:Thandle; under:Ttreenode);\nvar\n  i, n: integer;\n  buffer: array [0..2000] of char;\n  files: string;\nbegin\nif hnd = 0 then exit;\nGlobalLock(hnd);\nn:=DragQueryFile(hnd,cardinal(-1),NIL,0);\nfiles:='';\nbuffer:='';\nfor i:=0 to n-1 do\n  begin\n  DragQueryFile(hnd,i,@buffer,sizeof(buffer));\n  files:=files+buffer+CRLF;\n  end;\n//DragFinish(hnd);  // this call seems to cause instability, don't know why\nGlobalUnlock(hnd);\n\naddFilesFromString(files, under);\nend; // addDropFiles\n\nprocedure Tmainfrm.WMDropFiles(var msg:TWMDropFiles);\nbegin\nwith filesbox.screenToClient(mouse.cursorPos) do\n  addDropFiles(msg.Drop, filesbox.getNodeAt(x,y));\ninherited;\nend; // WMDropFiles\n\nprocedure Tmainfrm.WMQueryEndSession(var msg:TWMQueryEndSession);\nbegin\nwindowsShuttingDown:=TRUE;\nquitting:=TRUE; // in hard times, formClose() is not called (or not soon enough)\nquitASAP:=TRUE;\nmsg.Result:=1;\nclose();\ninherited;\nend; // WMQueryEndSession\n\nprocedure Tmainfrm.WMEndSession(var msg:TWMEndSession);\nbegin\nif msg.EndSession then\n  begin\n  windowsShuttingDown:=TRUE;\n  quitting:=TRUE;\n  quitASAP:=TRUE;\n  close();\n  end;\ninherited;\nend; // WMEndSession\n\nprocedure TmainFrm.WMNCLButtonDown(var msg:TWMNCLButtonDown);\nbegin\nif (msg.hitTest = windows.HTCLOSE) and trayInsteadOfQuitChk.checked then\n  begin\n  msg.hitTest:=windows.HTCAPTION; // cancel closing\n  minimizeToTray();\n  end;\ninherited;\nend;\n\nprocedure TmainFrm.splitVMoved(Sender: TObject);\nbegin\nif logBox.width > 0 then lastGoodLogWidth:=logBox.width;\nfilesBoxRatio:=filesPnl.Width/ClientWidth\nend;\n\nprocedure TmainFrm.appEventsShowHint(var HintStr: String; var CanShow: Boolean; var HintInfo: THintInfo);\n\n  function reduce(s:string):string;\n  begin\n  result:=xtpl(s, [ #13,' ', #10,'' ]);\n  if length(result) > 30 then\n    begin\n    setlength(result, 29);\n    result:=result+'...';\n    end;\n  end; // reduce\n\n  function fileHint():string;\n  const\n    INHERITED_LABEL = ' [inherited]';\n    EXTERNAL_LABEL = ' [external]';\n  var\n    f, parent: Tfile;\n    s, s2: string;\n    inheritd, externl: boolean;\n\n    function flag(lbl:string; att:TfileAttribute; positive:boolean=TRUE):string;\n    begin result:=if_((att in f.flags) = positive, #13+lbl) end;\n\n    function flagR(lbl:string; att:TfileAttribute; positive:boolean=TRUE):string;\n    var\n      inh: boolean;\n    begin\n    result:=if_(f.hasRecursive(att, @inh), #13+lbl);\n    result:=result+if_(inh, INHERITED_LABEL);\n    end; // flagR\n\n    procedure perm(action:TfileAction; msg:string);\n    var\n      s: string;\n    begin\n    s:=join(', ', f.getAccountsFor(action, TRUE, @inheritd));\n    if (s > '') and inheritd then s:=s+INHERITED_LABEL;\n    if s > '' then result:=result+#13+msg+': '+s;\n    end;\n\n  begin\n  result:=if_(HintsfornewcomersChk.checked,'Drag your files here');\n  f:=pointedFile();\n  if f = NIL then exit;\n  parent:=f.parent;\n\n  result:='URL: '+f.url()\n    +if_(f.isRealFolder() or f.isFile(), #13'Path: '+f.resource);\n  if f.isFile() then\n    result:=result+format(#13'Size: %s'#13'Downloads: %d',\n      [ smartsize(sizeofFile(f.resource)), f.DLcount ]);\n\n  s:=flagR('Invisible', FA_HIDDENTREE, TRUE);\n  if s = '' then s:=flag('Invisible', FA_HIDDEN);\n  result:=result+s\n    +flag('Download forbidden', FA_DL_FORBIDDEN)\n    +flagR('Don''t log', FA_DONT_LOG);\n\n  if f.isFolder() then\n    begin\n    if assigned(parent) and parent.hasRecursive(FA_HIDE_EMPTY_FOLDERS) then\n        result:=result+#13'Hidden if empty'+INHERITED_LABEL;\n\n    result:=result\n      +flag('Not browsable', FA_BROWSABLE, FALSE)\n      +flag('Hide empty folders', FA_HIDE_EMPTY_FOLDERS)\n      +flagR('Hide extention', FA_HIDE_EXT)\n      +flagR('Archivable', FA_ARCHIVABLE)\n    end;\n\n  s:=f.getRecursiveFileMask();\n  if (s > '') and (f.defaultFileMask = '') then s:=s+INHERITED_LABEL;\n  if s > '' then result:=result+#13'Default file mask: '+s;\n\n  perm(FA_ACCESS, 'Access for');\n  if f.isRealFolder() then perm(FA_UPLOAD, 'Upload allowed for');\n  perm(FA_DELETE, 'Delete allowed for');\n\n  s:=reduce(f.getDynamicComment());\n  if (s > '') and (f.comment = '') then s:=s+EXTERNAL_LABEL;\n  if s > '' then result:=result+#13'Comment: '+s;\n\n  s:=reduce(f.getShownRealm());\n  if (s > '') and (f.realm = '') then s:=s+INHERITED_LABEL;\n  if s > '' then result:=result+#13'Realm: '+s;\n\n  s:=reduce(f.getRecursiveDiffTplAsStr(@inheritd, @externl));\n  if s > '' then\n    begin\n    if inheritd then s:=s+INHERITED_LABEL;\n    if externl then s:=s+EXTERNAL_LABEL;\n    result:=result+#13'Diff template: '+s;\n    end;\n\n  f.getFiltersRecursively(s, s2);\n  result:=result\n    +if_(s>'', #13'Files filter: '+s\n      +if_(f.filesFilter = '', INHERITED_LABEL))\n    +if_(s2>'', #13'Folders filter: '+s2\n      +if_(f.foldersFilter = '', INHERITED_LABEL))\n    +if_(f.uploadFilterMask>'', #13'Upload filter: '+f.uploadFilterMask)\n    +flag('Don''t consider as download', FA_DONT_COUNT_AS_DL)\n    +if_(f.dontCountAsDownloadMask>'',\n      #13'Don''t consider as download (mask): '+f.dontCountAsDownloadMask)\n  end; // filehint\n\n  function connHint():string;\n  var\n    cd: TconnData;\n  begin\n  cd:=pointedConnection();\n  result:=if_(HintsForNewcomersChk.checked, 'This box shows info about current connections');\n  if cd = NIL then exit;\n  result:='Connection time: '+dateTimeToStr(cd.time)\n    +#13'Last request time: '+dateTimeToStr(cd.requestTime)\n    +#13'Agent: '+first(cd.agent,'<unknown>');\n  end;\n\nbegin\nif hintinfo.HintControl = filesBox then\n  begin\n  hintinfo.ReshowTimeout:=800;\n  hintStr:=filehint();\n  end;\nif hintinfo.HintControl = connBox then\n  begin\n  hintinfo.ReshowTimeout:=800;\n  hintStr:=connHint();\n  end;\n\nif not hintsForNewcomersChk.checked\nand ((hintinfo.hintcontrol = modeBtn)\n  or (hintinfo.hintcontrol = menuBtn)\n  or (hintinfo.hintcontrol = graphBox))\nthen hintStr:='';\nhintStr:=chop(#0, hintStr); // info past null char are used for extra data storing\ncanShow:=hintstr > '';\nend;\n\nprocedure TmainFrm.logmenuPopup(Sender: TObject);\nbegin\nReadonly1.Checked:=logBox.ReadOnly;\nReadonly1.visible:=not easyMode;\nBanthisaddress1.visible:= logBox.selAttributes.color=ADDRESS_COLOR;\nAddress2name1.visible:=not easyMode;\nLogfile1.visible:=not easyMode;\nlogOnVideoChk.visible:=not easyMode;\nDonotlogaddress1.visible:=not easyMode;\nClearandresettotals1.visible:=not easyMode;\nAddresseseverconnected1.visible:=not easyMode;\nMaxlinesonscreen1.visible:=not easyMode;\nDontlogsomefiles1.visible:=not easyMode;\nApachelogfileformat1.visible:=not easyMode and (logfile.filename>'');\ntabOnLogFileChk.Visible:=not easyMode and (logfile.filename>'');\nend;\n\nfunction Tmainfrm.searchLog(dir:integer):boolean;\nvar\n  t, s: string;\n  i, l, tl, from, n: integer;\nbegin\ntimeTookToSearchLog:=now();\ntry\n  result:=TRUE;\n  from:=logBox.SelStart+1;\n  t:=ansiLowerCase(logBox.text);\n  s:=ansiLowerCase(logSearchBox.text);\n  if s = '' then exit;\n  result:=FALSE;\n  if t = '' then exit;\n  tl:=length(t);\n  // if we are typing (dir=0) then before search forward, see if we can extend the current selection\n  if dir <> 0 then l:=0\n  else l:=match(pchar(s), @t[from], FALSE, [#13,#10]);\n  if l > 0 then\n    i:=from\n  // if he doesn't use wildcards, use posEx(), it should be much faster on a long text\n  else if pos('?',s)+pos('*',s) = 0 then\n    begin\n    if dir <= 0 then\n      begin\n      s:=reverseString(s);\n      t:=reverseString(t);\n      from:=tl-from+1;\n      end;\n    i:=posEx(s, t, from+1);\n    if i = 0 then i:=pos(s, t);\n    if i = 0 then exit;\n    l:=length(s);\n    if dir <= 0 then i:=tl-i-l+2;\n    end\n  else // it's using wildcards, so use match(), but don't allow matching across different lines, or a search with a * may take forever\n    begin\n    if dir = 0 then dir:=-1;\n    inc(from, dir);\n    i:=from+dir;\n    n:=0;\n    s:=trim2(s, ['*',' ']);\n      repeat\n      l:=match(pchar(s), @t[i], FALSE, [#13,#10]);\n      if l > 0 then break;\n      inc(i, dir);\n      inc(n);\n      if n >= tl then exit;\n      if i > tl then i:=1;\n      if i = 0 then i:=tl;\n      until false;\n    end;\n  logBox.SelStart:=i-1;\n  logBox.SelLength:=l;\n  result:=TRUE;\nfinally timeTookToSearchLog:=now()-timeTookToSearchLog end;\nend;\n\nprocedure TmainFrm.logSearchBoxChange(Sender: TObject);\nbegin\n// from when he stopped typing, wait twice the time of a searching, but max 2 seconds\nsearchLogTime:=now()+min(timeTookToSearchLog*2, 2/SECONDS);\nopenFilteredLog.Enabled:=logSearchBox.Text > '';\nend;\n\nprocedure TmainFrm.logSearchBoxKeyPress(Sender: TObject; var Key: Char);\nbegin\nif key = #13 then\n  begin\n  searchLog(-1);\n  key:=#0;\n  end;\nend;\n\nprocedure TmainFrm.logUpDownClick(Sender: TObject; Button: TUDBtnType);\nbegin searchLog(if_(button = btNext, -1, +1)) end;\n\nprocedure TmainFrm.Readonly1Click(Sender: TObject);\nbegin with logBox do ReadOnly:=not ReadOnly end;\n\nprocedure TmainFrm.Clear1Click(Sender: TObject);\nbegin logBox.Clear() end;\n\nprocedure TmainFrm.Clearandresettotals1Click(Sender: TObject);\nbegin\nlogBox.clear();\nresetTotals();\nend;\n\nprocedure TmainFrm.Copy1Click(Sender: TObject);\nbegin\nif logBox.SelLength > 0 then setClip(logBox.SelText)\nelse setClip(logBox.Text)\nend;\n\nprocedure TmainFrm.Saveas1Click(Sender: TObject);\nvar\n  fn: string;\nbegin\nfn:='';\nif PromptForFileName(fn, 'Text file|*.txt', 'txt', 'Save log', '', TRUE) then\n  saveTextFile(fn, logBox.text);\nend;\n\nprocedure TmainFrm.Save1Click(Sender: TObject);\nbegin saveTextfile('hfs.log', logBox.text) end;\n\nprocedure deleteCFG();\nbegin\ndeleteFile(lastUpdateCheckFN);\ndeleteFile(cfgPath+CFG_FILE);\ndeleteRegistry(CFG_KEY);\ndeleteRegistry(CFG_KEY, HKEY_LOCAL_MACHINE);\nend; // deleteCFG\n\nprocedure TmainFrm.Clearoptionsandquit1click(Sender: TObject);\nbegin\ndeleteCFG();\nautoSaveOptionsChk.Checked:=FALSE;\nclose();\nend;\n\nprocedure TmainFrm.collapseBtnClick(Sender: TObject);\nbegin setLogToolbar(FALSE) end;\n\nfunction ListView_GetSubItemRect(lv:TlistView; iItem, iSubItem: Integer):Trect;\nconst\n  LVM_FIRST               = $1000;      { ListView messages }\n  LVM_GETSUBITEMRECT      = LVM_FIRST + 56;\nbegin\nresult.top:=iSubItem;\nresult.left:=0;\nif sendMessage(lv.handle, LVM_GETSUBITEMRECT, iItem, Longint(@result)) = 0 then\n  result.Top:=-1\nend;\n\nprocedure TmainFrm.connBoxAdvancedCustomDrawSubItem(Sender: TCustomListView;\n  Item: TListItem; SubItem: Integer; State: TCustomDrawState;\n  Stage: TCustomDrawStage; var DefaultDraw: Boolean);\nvar\n  r: Trect;\n  cnv: Tcanvas;\n\n  procedure textCenter(s:string);\n  var\n    i: integer;\n  begin\n  i:=((r.bottom-r.top)-cnv.textHeight(s)) div 2; // vertical margin, to center vertically\n  inc(r.top, i);\n  drawCentered(cnv,r,s);\n  dec(r.top, i);\n  end; // textCentered\n\n  procedure drawProgress(now,total,lowerbound,upperbound:int64);\n  var\n    d: real;\n    selected: boolean;\n    r1: Trect;\n    x: integer;\n    colors:array [boolean] of Tcolor;\n  begin\n  if (total <= 0) or (lowerbound >= upperbound) then exit;\n  colors[false]:=clWindow;\n  colors[true]:=blend(clWindow, clWindowText, 0.25);\n  selected:=cdsSelected in state;\n  r1:=rect(r.Left+1,r.Top+1,r.Right-1,r.Bottom-1);\n  // paint a shadow for non requested piece of data\n  cnv.brush.Color:=blend(clWindow, clHotLight, 0.30);\n  cnv.Brush.Style:=bsSolid;\n  cnv.FillRect(r1);\n  // and shrink the rectangle\n  x:=r1.Right-r1.Left;\n  cnv.pen.color:=colors[selected];\n  cnv.pen.Style:=psSolid;\n  if lowerbound > 0 then\n    begin\n    inc( r1.Left, round(x*lowerbound/total) );\n    cnv.MoveTo(r1.Left-1, r1.Top);\n    cnv.LineTo(r1.Left-1, r1.Bottom);\n    end;\n  if upperbound > 0 then dec( r1.Right, round(x*(total-upperbound)/total) );\n  // border + non filled part\n  cnv.brush.Color:=colors[not selected];\n  cnv.Brush.Style:=bsSolid;\n  cnv.FillRect(r1);\n  // filled part\n  d:=now / (upperbound-lowerbound);\n  if d > 1 then d:=1;\n  inc(r1.Left, 1+round(d*(r1.right-r1.Left-2)));\n  dec(r1.right); dec(r1.bottom); inc(r1.top);\n  cnv.brush.Color:=colors[selected];\n  if not IsRectEmpty(r1) then cnv.FillRect(r1);\n  // label\n  cnv.Font.Name:='Small Fonts';\n  cnv.font.Size:=7;\n  cnv.font.Color:=clWindowText;\n  SetBkMode(cnv.handle, TRANSPARENT);\n  inc(r.top);\n  textCenter(format('%d%%', [trunc(d*100)]));\n  end; // drawProgress\n\nvar\n  cd: TconnData;\nbegin\nif subItem <> 5 then exit;\ncd:=conn2data(item);\nif cd = NIL then exit;\ncnv:=connBox.canvas;\nr:=ListView_GetSubItemRect(connBox, item.index, subItem);\nif isSendingFile(cd) or (cd.conn.reply.bodyMode = RBM_STREAM) then\n  drawProgress( cd.conn.bytesSentLastItem, cd.conn.bytesFullBody, cd.conn.reply.firstByte, cd.conn.reply.lastByte )\nelse if isReceivingFile(cd) then\n  drawProgress( cd.conn.bytesPosted, cd.conn.post.length, 0, cd.conn.post.length);\nend;\n\nprocedure TmainFrm.connBoxData(Sender: TObject; Item: TListItem);\nconst\n  HCS2STR :array [ThttpConnState] of string = ('idle', 'requesting', 'receiving', 'thinking', 'replying', 'sending', 'disconnected');\nvar\n  data: TconnData;\n\n  function getFname():string;\n  begin\n  if isSendingFile(data) then result:=data.lastFN\n  else if isReceivingFile(data) then result:=data.uploadSrc\n  else result:='-'\n  end;\n\n  function getStatus():string;\n  begin\n  if isSendingFile(data) then\n    begin\n    if data.conn.paused then\n      result:='paused'\n    else\n      result:=format('%s / %s sent', [\n        dotted(data.conn.bytesSentLastItem),\n        dotted(data.conn.bytesPartial)\n      ]);\n    exit;\n    end;\n  if isReceivingFile(data) then\n    begin\n    result:=format('%s / %s received', [\n      dotted(data.conn.bytesPosted),\n      dotted(data.conn.post.length)\n    ]);\n    exit;\n    end;\n  result:=HCS2STR[data.conn.state]\n    +if_(data.conn.state = HCS_IDLE, ' '+intToStr(data.conn.requestCount))\n  end; // getStatus\n\n  function getSpeed():string;\n  var\n    d: real;\n  begin\n  case data.conn.state of\n    HCS_REPLYING_BODY: d:=data.conn.speedOut;\n    HCS_POSTING: d:=data.conn.speedIn;\n    else d:=data.averageSpeed;\n    end;\n  if d < 1 then result:='-'\n  else result:=format('%.1f KB/s',[d/1000])\n  end; // getSpeed\n\nvar\n  progress: real;\nbegin\nif quitting then exit;\nif item = NIL then exit;\ndata:=conn2data(item);\nif data = NIL then exit;\nitem.caption:=nonEmptyConcat('', data.user, '@')+data.address+':'+data.conn.port;\nwhile item.subitems.count < 5 do\n  item.subitems.add('');\n\nitem.imageIndex:=-1;\nprogress:=-1;\nif data.conn.state = HCS_DISCONNECTED then\n  item.imageIndex:=21\nelse if isSendingFile(data) then\n  begin\n  item.imageIndex:=32;\n  progress:= data.conn.bytesSentLastItem / data.conn.bytesPartial;\n  end\nelse if isReceivingFile(data) then\n  begin\n  item.imageIndex:=33;\n  progress:= data.conn.bytesPosted / data.conn.post.length;\n  end;\n\nitem.subItems[0]:=getFname();\nitem.subItems[1]:=getStatus();\nitem.subItems[2]:=getSpeed();\nitem.subItems[3]:=getETA(data);\nitem.subItems[4]:=if_(progress<0,'', format('%d%%', [trunc(progress*100)]));\nend;\n\nfunction TmainFrm.appEventsHelp(Command: Word; Data: Integer; var CallHelp: Boolean): Boolean;\nbegin\ncallHelp:=FALSE; // avoid exception to be thrown\nresult:=FALSE; \nend;\n\nprocedure TmainFrm.appEventsMinimize(Sender: TObject);\nbegin\nif not MinimizetotrayChk.Checked then exit;\nminimizeToTray();\nend;\n\nprocedure TmainFrm.appEventsRestore(Sender: TObject);\nbegin\ntrayed:=FALSE;\nif not showmaintrayiconChk.checked then tray.hide();\nend;\n\nprocedure Tmainfrm.trayEvent(sender:Tobject; ev:TtrayEvent);\nbegin\nupdateTrayTip();\nif userInteraction.disabled then exit;\ncase ev of\n  TE_RCLICK:\n    begin\n    setForegroundWindow(handle); // application.bringToFront() will act up when the window is minimized: the popped up menu will stay up forever  \n    with mouse.cursorPos do\n      menu.popup(x,y);\n    end;\n  TE_CLICK:\n    application.bringToFront();\n  TE_2CLICK:\n    begin\n    application.restore();\n    application.bringToFront();\n    end;\n  end;\nend; // trayEvent\n\nprocedure TmainFrm.trayiconforeachdownload1Click(Sender: TObject);\nbegin trayfordownloadChk.Checked:=FALSE end;\n\nprocedure Tmainfrm.downloadtrayEvent(sender:Tobject; ev:TtrayEvent);\nvar\n  i: integer;\nbegin\nif userInteraction.disabled then exit;\n\nfor i:=connBox.items.count-1 downto 0 do\n    if conn2data(i) = (sender as TmyTrayIcon).data then\n      connBox.itemIndex:=i;\n\ncase ev of\n  TE_CLICK,\n  TE_RCLICK:\n    try\n      fromTray:=TRUE;\n      with mouse.cursorPos do\n        connmenu.popup(x,y);\n    finally fromTray:=FALSE end;\n  TE_2CLICK:\n    begin\n    application.restore();\n    application.bringToFront();\n    connBox.setFocus();\n    end;\n  end;\nend; // downloadtrayEvent\n\nfunction Tmainfrm.getTrayTipMsg(tpl:string=''):string;\nbegin\nif quitting or (rootFile = NIL) then\n  begin\n  result:='';\n  exit;\n  end;\nresult:=xtpl(first(tpl, trayMsg), [\n  '%uptime%', uptimestr(),\n  '%url%', rootFile.fullURL(),\n  '%ip%', defaultIP,\n  '%port%', srv.port,\n  '%hits%', intToStr(hitsLogged),\n  '%downloads%', intToStr(downloadsLogged),\n  '%uploads%', intToStr(uploadsLogged),\n  '%version%', VERSION,\n  '%build%', VERSION_BUILD\n]);\nend; // getTrayTipMsg\n\nprocedure Tmainfrm.updateTrayTip();\nbegin tray.setTip(getTrayTipMsg()) end;\n\nprocedure TmainFrm.Restore1Click(Sender: TObject);\nbegin\napplication.Restore();\napplication.bringToFront();\nend;\n\nprocedure TmainFrm.restoreCfgBtnClick(Sender: TObject);\nbegin\nsetCfg(backuppedCfg);\nbackuppedCfg:='';\nrestoreCfgBtn.hide();\neventScriptsLast:=0;\nresetOptions1.Enabled:=TRUE;\nend;\n\nprocedure TmainFrm.Restoredefault1Click(Sender: TObject);\nbegin\nif msgDlg('Continue?', MB_ICONQUESTION+MB_YESNO) = MRNO then exit;\ntplFilename:='';\ntplLast:=-1;\ntplImport:=TRUE;\nsetStatusBarText('The template has been reset');\nend;\n\nprocedure TmainFrm.Reverttopreviousversion1Click(Sender: TObject);\nconst\n  FN = 'revert.bat';\n  REVERT_BATCH = 'START %0:s /WAIT \"%1:s\" -q'+CRLF\n    +'ping 127.0.0.1 -n 3 -w 1000> nul'+CRLF\n    +'DEL \"%1:s\"'+CRLF\n    +'MOVE \"%2:s'+PREVIOUS_VERSION+'\" \"%1:s\"'+CRLF\n    +'START %0:s \"%1:s\"'+CRLF\n    +'DEL %%0'+CRLF;\nbegin\ntry\n  progFrm.show('Processing...');\n  saveTextFile(FN, format(REVERT_BATCH, [\n    if_(isNT(), '\"\"'),\n    paramStr(0),\n    exePath\n  ]));\n  execNew(FN);\nfinally progFrm.hide() end;\n\nend;\n\nprocedure TmainFrm.Numberofcurrentconnections1Click(Sender: TObject);\nbegin setTrayShows('connections') end;\n\nprocedure TmainFrm.NumberofdifferentIPaddresses1Click(Sender: TObject);\nbegin setTrayShows('ips') end;\n\nprocedure TmainFrm.NumberofdifferentIPaddresseseverconnected1Click(\n  Sender: TObject);\nbegin setTrayShows('ips-ever') end;\n\nprocedure TmainFrm.Numberofloggeddownloads1Click(Sender: TObject);\nbegin setTrayShows('downloads') end;\n\nprocedure TmainFrm.Numberofloggedhits1Click(Sender: TObject);\nbegin setTrayShows('hits') end;\n\nprocedure Tmainfrm.setTrayShows(s:string);\nbegin\ntrayShows:=s;\nrepainttray();\nend; // setTrayShows\n\nprocedure TmainFrm.Exit1Click(Sender: TObject);\nbegin close() end;\n\nprocedure TmainFrm.Extension1Click(Sender: TObject);\nbegin defSorting:='ext' end;\n\nprocedure TmainFrm.onDownloadChkClick(Sender: TObject);\nbegin flashOn:='download' end;\n\nprocedure TmainFrm.onconnectionChkClick(Sender: TObject);\nbegin flashOn:='connection' end;\n\nprocedure TmainFrm.never1Click(Sender: TObject);\nbegin flashOn:='' end;\n\nprocedure Tmainfrm.addTray();\nbegin\nrepaintTray();\ntray.show();\nend; // addTray\n\nprocedure TmainFrm.Allowedreferer1Click(Sender: TObject);\nresourcestring\n  MSG = 'Leave empty to disable this feature.'\n    +#13'Here you can specify a mask.'\n    +#13'When a file is requested, if the mask doesn''t match the \"Referer\" HTTP field, the request is rejected.';\nbegin\ninputQuery('Allowed referer', MSG, allowedReferer)\nend;\n\n// addtray\n\nprocedure TmainFrm.FormShow(Sender: TObject);\nbegin\nif trayed then showWindow(application.handle, SW_HIDE);\nupdateTrayTip();\nconnBox.DoubleBuffered:=true;\nend;\n\nprocedure TmainFrm.filesBoxDragOver(Sender, Source: TObject; X, Y: Integer;\n  State: TDragState; var Accept: Boolean);\nconst\n  THRESHOLD = 10;\nvar\n  src, dst: Tfile;\n  i: integer;\nbegin\nscrollFilesBox:=-1;\nif y < THRESHOLD then scrollFilesBox:=SB_LINEUP;\nif filesBox.Height-y < THRESHOLD then scrollFilesBox:=SB_LINEDOWN;\n\naccept:=FALSE;\nif sender <> source then exit; // only move files within filesBox\ndst:=pointedFile(FALSE);\nif assigned(dst) and not dst.isFolder() then dst:=dst.parent;\nif dst = NIL then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  with nodeToFile(filesbox.selections[i]) do\n    if isRoot() or isLocked() then exit;\nsrc:=selectedFile;\naccept:=(dst <> src.parent) and (dst <> src);\nend;\n\nprocedure TmainFrm.filesBoxDragDrop(Sender, Source: TObject; X,Y: Integer);\nvar\n  dst: Ttreenode;\n  i, bak: integer;\n  nodes: array of Ttreenode;\nbegin\nif selectedFile = NIL then exit;\nVFSmodified:=TRUE;\ndst:=filesBox.dropTarget;\nif not nodeToFile(dst).isFolder() then dst:=dst.parent;\n// copy list of selected nodes\nsetlength(nodes, filesBox.SelectionCount);\nfor i:=0 to filesBox.SelectionCount-1 do nodes[i]:=filesbox.selections[i];\n// check for namesakes\nfor i:=0 to length(nodes)-1 do\n  if existsNodeWithName(nodes[i].Text, dst) then\n    if msgDlg(MSG_SAME_NAME, MB_ICONWARNING+MB_YESNO) = IDYES then break\n    else exit;\n// move'em\nfor i:=0 to length(nodes)-1 do\n  begin\n  // removing and restoring stateIndex is a workaround to a delphi bug\n  bak:=nodes[i].stateIndex;\n  nodes[i].stateIndex:=0;\n  nodes[i].moveTo(dst, naAddChild);\n  nodes[i].stateIndex:=bak;\n  end;\nfilesBox.refresh();\ndst.alphaSort(FALSE);\nend;\n\nprocedure TmainFrm.refreshConn(conn:TconnData);\nvar\n  r: Trect;\n  i: integer;\nbegin\nif quitting then exit;\n\nfor i:=0 to connBox.items.count-1 do\n  if conn2data(i) = conn then\n    begin\n    connBoxData(connBox, connBox.items[i]);\n    r:=connBox.items[i].displayRect(drBounds);\n    invalidateRect(connBox.handle, @r, TRUE);\n    break;\n    end;\n//updateSbar();   // this was causing too many refreshes on fast connections\nend; // refreshConn\n\nconst\n  // IDs used for file chunks\n  FK_HEAD = 0;\n  FK_RESOURCE = 1;\n  FK_NAME = 2;\n  FK_FLAGS = 3;\n  FK_NODE = 4;\n  FK_FORMAT_VER = 5;\n  FK_CRC = 6;\n  FK_COMMENT = 7;\n  FK_USERPWD = 8;\n  FK_USERPWD_UTF8 = 108;\n  FK_ADDEDTIME = 9;\n  FK_DLCOUNT = 10;\n  FK_ROOT = 11;\n  FK_ACCOUNTS = 12;\n  FK_FILESFILTER = 13;\n  FK_FOLDERSFILTER = 14;\n  FK_ICON_GIF = 15;\n  FK_REALM = 16;\n  FK_UPLOADACCOUNTS = 17;\n  FK_DEFAULTMASK = 18;\n  FK_DONTCOUNTASDOWNLOADMASK = 19;\n  FK_AUTOUPDATED_FILES = 20;\n  FK_DONTCOUNTASDOWNLOAD = 21;\n  FK_HFS_VER = 22;\n  FK_HFS_BUILD = 23;\n  FK_COMPRESSED_ZLIB = 24;\n  FK_DIFF_TPL = 25;\n  FK_UPLOADFILTER = 26;\n  FK_DELETEACCOUNTS = 27;\n\nfunction Tmainfrm.getVFS(node:Ttreenode=NIL):ansistring;\n\n  function getAutoupdatedFiles():ansistring;\n  var\n    i: integer;\n    fn: string;\n  begin\n  result:='';\n  i:=0;\n  while i < autoupdatedFiles.Count do\n    begin\n    fn:=autoupdatedFiles[i];\n    result:=result+TLV(FK_NODE, TLV(FK_NAME, fn)\n      + TLV(FK_DLCOUNT, str_(autoupdatedFiles.getInt(fn))) );\n    inc(i);\n    end;\n  end; // getAutoupdatedFiles\n\nvar\n  i: integer;\n  f: Tfile;\n  commonFields, s: ansistring;\nbegin\nif node = NIL then node:=rootNode;\nif node = NIL then exit;\nf:=nodeToFile(node);\ncommonFields:=TLV(FK_FLAGS, str_(f.flags))\n    +TLV_NOT_EMPTY(FK_RESOURCE, f.resource)\n    +TLV_NOT_EMPTY(FK_COMMENT, f.comment)\n    +if_(f.user>'', TLV(FK_USERPWD_UTF8, b64utf8(f.user+':'+f.pwd)))\n    +TLV_NOT_EMPTY(FK_ACCOUNTS, join(';',f.accounts[FA_ACCESS]) )\n    +TLV_NOT_EMPTY(FK_UPLOADACCOUNTS, join(';',f.accounts[FA_UPLOAD]))\n    +TLV_NOT_EMPTY(FK_DELETEACCOUNTS, join(';',f.accounts[FA_DELETE]))\n    +TLV_NOT_EMPTY(FK_FILESFILTER, f.filesfilter)\n    +TLV_NOT_EMPTY(FK_FOLDERSFILTER, f.foldersfilter)\n    +TLV_NOT_EMPTY(FK_REALM, f.realm)\n    +TLV_NOT_EMPTY(FK_DEFAULTMASK, f.defaultFileMask)\n    +TLV_NOT_EMPTY(FK_UPLOADFILTER, f.uploadFilterMask)\n    +TLV_NOT_EMPTY(FK_DONTCOUNTASDOWNLOADMASK, f.dontCountAsDownloadMask)\n    +TLV_NOT_EMPTY(FK_DIFF_TPL, f.diffTpl);\n\nresult:='';\nif f.isRoot() then\n\tresult:=result+TLV(FK_ROOT, commonFields );\nfor i:=0 to node.Count-1 do\n  result:=result+getVFS(node.item[i]); // recursion\nif f.isRoot() then\n  begin\n  result:=result+TLV_NOT_EMPTY(FK_AUTOUPDATED_FILES, getAutoupdatedFiles() );\n  exit;\n  end;\nif not f.isFile() then s:=''\nelse s:=TLV(FK_DLCOUNT, str_(f.DLcount)); // called on a folder would be recursive\n\n// for non-root nodes, subnodes must be calculated first, so to be encapsulated\nresult:=TLV(FK_NODE, commonFields\n  +TLV_NOT_EMPTY(FK_NAME, f.name)\n  +TLV(FK_ADDEDTIME, str_(f.atime))\n  +TLV_NOT_EMPTY(FK_ICON_GIF, pic2str(f.icon))\n  +s\n  +result // subnodes\n);\nend; // getVFS\n\nprocedure Tmainfrm.setVFS(vfs:ansistring; node:Ttreenode=NIL);\nresourcestring\n  MSG_BETTERSTOP = #13'Going on may lead to problems.'\n    +#13'It is adviced to stop loading.'\n    +#13'Stop?';\n  MSG_BADCRC = 'This file is corrupted (CRC).';\n  MSG_NEWER='This file has been created with a newer and incompatible version.';\n  MSG_ZLIB = 'This file is corrupted (ZLIB).';\n  MSG_BAKAVAILABLE = 'This file is corrupted but a backup is available.'#13'Continue with backup?';\n\nvar\n  data: ansistring;\n  s: string;\n  f: Tfile;\n  after: record\n    resetLetBrowse: boolean;\n    end;\n  act: TfileACtion;\n  tlv: Ttlv;\n\n  procedure parseAutoupdatedFiles(data:ansistring);\n  var\n    s, fn: string;\n    raw: ansiString;\n  begin\n  autoupdatedFiles.Clear();\n  tlv.down();\n  while tlv.pop(s,raw) = FK_NODE do\n    begin\n    tlv.down();\n    while not tlv.isOver() do\n      case tlv.pop(s,raw) of\n        FK_NAME: fn:=s;\n        FK_DLCOUNT: autoupdatedFiles.setInt(fn, int_(raw));\n        end;\n    tlv.up();\n    end;\n  tlv.up();\n  end; // parseAutoupdatedFiles\n\nbegin\nif vfs = '' then exit;\nif node = NIL then // this is supposed to be always true when loading a vfs, and never recurring\n  begin\n  node:=rootNode;\n  uploadPaths:=NIL;\n  usersInVFS.reset();\n  if isAnyMacroIn(vfs) then loadingVFS.macrosFound:=TRUE;\n  end;\nfillchar(after, sizeof(after), 0);\nnode.DeleteChildren();\nf:=Tfile(node.data);\nf.node:=node;\ntlv:=Ttlv.create;\ntlv.parse(vfs);\nwhile not tlv.isOver() do\n  case tlv.pop(s,data) of\n    FK_ROOT:\n      begin\n      setVFS(data, rootNode );\n      if loadingVFS.build < '109' then\n        include(f.flags, FA_ARCHIVABLE);\n      end;\n    FK_NODE:\n      begin\n      if progFrm.cancelRequested then exit;\n      if progFrm.visible then\n        begin\n        progFrm.progress:= tlv.getPerc();\n        application.ProcessMessages();\n        end;\n      setVFS(data, addFile(Tfile.create(''), node, TRUE).node );\n      end;\n    FK_COMPRESSED_ZLIB:\n      { Explanation for the #0 workaround.\n      { I found an uncompressable vfs file, with ZDecompressStr2() raising an exception.\n      { In the end i found it was missing a trailing #0, maybe do to an incorrect handling of strings\n      { containing a trailing #0. Using a zlib wrapper there is some underlying C code.\n      { I was unable to reproduce the bug, but i found that correct data doesn't complain if i add an extra #0. }\n      try\n        data:=ZDecompressStr(data+#0);\n        if isAnyMacroIn(data) then\n          loadingVFS.macrosFound:=TRUE;\n        setVFS(data, node);\n      except msgDlg(MSG_ZLIB, MB_ICONERROR) end;\n    FK_FORMAT_VER:\n      begin\n      if length(data) < 4 then // early versions: '1.0', '1.1'\n        begin\n        loadingVFS.resetLetBrowse:=TRUE;\n        after.resetLetBrowse:=TRUE;\n        end;\n      if (int_(data) > CURRENT_VFS_FORMAT)\n      and (msgDlg(MSG_NEWER+MSG_BETTERSTOP, MB_ICONERROR+MB_YESNO) = IDYES) then\n        exit;\n      end;\n  \tFK_CRC:\n      if str_(getCRC(tlv.getTheRest())) <> data then\n        begin\n        if loadingVFS.bakAvailable then\n          if msgDlg(MSG_BAKAVAILABLE, MB_ICONWARNING+MB_YESNO) = IDYES then\n            begin\n            loadingVFS.useBackup:=TRUE;\n            exit;\n            end;\n        if msgDlg(MSG_BADCRC+MSG_BETTERSTOP,MB_ICONERROR+MB_YESNO) = IDYES then\n        \texit;\n        end;\n    FK_RESOURCE: f.resource:=s;\n    FK_NAME:\n      begin\n      f.name:=s;\n      node.text:=s;\n      end;\n    FK_FLAGS: move(data[1], f.flags, length(data));\n  \tFK_ADDEDTIME: f.atime:=dt_(data);\n    FK_COMMENT: f.comment:=s;\n    FK_USERPWD:\n    \tbegin\n      data:=base64decode(data);\n      f.user:=chop(':',data);\n      f.pwd:=data;\n      usersInVFS.track(f.user, f.pwd);\n      end;\n    FK_USERPWD_UTF8:\n    \tbegin\n      s:=decodeB64utf8(data);\n      f.user:=chop(':',s);\n      f.pwd:=s;\n      usersInVFS.track(f.user, f.pwd);\n      end;\n    FK_DLCOUNT: f.DLcount:=int_(data);\n    FK_ACCOUNTS: f.accounts[FA_ACCESS]:=split(';',s);\n    FK_UPLOADACCOUNTS: f.accounts[FA_UPLOAD]:=split(';',s);\n    FK_DELETEACCOUNTS: f.accounts[FA_DELETE]:=split(';',s);\n    FK_FILESFILTER: f.filesfilter:=s;\n    FK_FOLDERSFILTER: f.foldersfilter:=s;\n    FK_UPLOADFILTER: f.uploadFilterMask:=s;\n    FK_REALM: f.realm:=s;\n    FK_DEFAULTMASK: f.defaultFileMask:=s;\n    FK_DIFF_TPL: f.diffTpl:=s;\n    FK_DONTCOUNTASDOWNLOADMASK: f.dontCountAsDownloadMask:=s;\n    FK_DONTCOUNTASDOWNLOAD: if boolean(data[1]) then include(f.flags, FA_DONT_COUNT_AS_DL);  // legacy, now moved into flags\n    FK_ICON_GIF: if data > '' then f.setupImage(str2pic(data));\n    FK_AUTOUPDATED_FILES: parseAutoupdatedFiles(data);\n    FK_HFS_BUILD: loadingVFS.build:=data;\n    FK_HEAD, FK_HFS_VER: ; // recognize these fields, but do nothing\n    else loadingVFS.unkFK:=TRUE;\n    end;\nfreeAndNIL(tlv);\n// legacy: in build #213 special usernames renamed for uniformity, and usernames are now sorted for faster access\nfor act:=low(act) to high(act) do\n  if loadingVFS.build < '213' then\n    begin\n    replaceString(f.accounts[act], '*', USER_ANYONE);\n    replaceString(f.accounts[act], '*+', USER_ANY_ACCOUNT);\n    uniqueStrings(f.accounts[act]);\n    sortArray(f.accounts[act]);\n    // for a little time, we tried to replace anyone with any+anon. it was a failed and had to revert.\n    if stringExists(loadingVFS.build, ['211','212'])\n    and stringExists(USER_ANY_ACCOUNT, f.accounts[act])\n    and stringExists(USER_ANONYMOUS, f.accounts[act]) then\n      begin\n      removeString(USER_ANY_ACCOUNT, f.accounts[act]);\n      replaceString(f.accounts[act], USER_ANONYMOUS, USER_ANYONE);\n      end;\n    end;\n\nif FA_VIS_ONLY_ANON in f.flags then\n  loadingVFS.visOnlyAnon:=TRUE;\nif f.isVirtualFolder() or f.isLink() then\n  f.mtime:=f.atime;\nif assigned(f.accounts[FA_UPLOAD]) and (f.resource > '') then\n  addString(f.resource, uploadPaths);\nf.setupImage();\nif after.resetLetBrowse then\n  f.recursiveApply(setBrowsable, integer(FA_BROWSABLE in f.flags));\nend; // setVFS\n\nfunction addVFSheader(vfsdata:ansistring):ansistring;\nbegin\nif length(vfsdata) > COMPRESSION_THRESHOLD then\n  vfsdata:=TLV(FK_COMPRESSED_ZLIB,\n    ZcompressStr(vfsdata, clFastest) );\nresult:= TLV(FK_HEAD, VFS_FILE_IDENTIFIER)\n  +TLV(FK_FORMAT_VER, str_(CURRENT_VFS_FORMAT))\n  +TLV(FK_HFS_VER, VERSION)\n  +TLV(FK_HFS_BUILD, VERSION_BUILD)\n  +TLV(FK_CRC, str_(getCRC(vfsdata)));  // CRC must always be right before data\nresult:=result+vfsdata\nend; // addVFSheader\n\nprocedure TmainFrm.Savefilesystem1Click(Sender: TObject);\nbegin saveVFS() end;\n\nprocedure TmainFrm.filesBoxDeletion(Sender: TObject; Node: TTreeNode);\nvar\n  f: Tfile;\nbegin\nf:=node.data;\nnode.data:=NIL;\n// the test on uploadPaths may save some function call\nif assigned(f.accounts[FA_UPLOAD]) and assigned(uploadPaths) then\n  removeString(f.resource, uploadPaths);\ntry f.free\nexcept\n  end;\nif node = rootNode then\n  rootNode:=NIL;\nVFSmodified:=TRUE\nend;\n\nfunction blockLoadSave():boolean;\nbegin\nresult:=addingItemsCounter > 0;\nif not result then exit;\nmsgDlg('Cannot load or save while adding files', MB_ICONERROR);\nend; // blockLoadSave\n\nprocedure TmainFrm.Loadfilesystem1Click(Sender: TObject);\nvar\n  fn: string;\nbegin\nif blockLoadSave() then exit;\nif not checkVfsOnQuit() then exit;\nfn:='';\nif promptForFileName(fn, 'VirtualFileSystem|*.vfs', 'vfs', 'Open VFS file') then\n  loadVFS(fn);\nend;\n\nprocedure drawGraphOn(cnv:Tcanvas; colors:TIntegerDynArray=NIL);\nvar\n  i, h, maxV: integer;\n  r: Trect;\n  top: double;\n  s: string;\n\n  procedure drawSample(sample:integer);\n  begin\n\tcnv.moveTo(r.left+i, r.bottom);\n  cnv.lineTo(r.Left+i, r.Bottom-1-sample*h div maxV);\n  end; // drawSample\n\n  function getColor(idx:integer; def:Tcolor):Tcolor;\n  begin\n  if (length(colors) <= idx) or (colors[idx] = Graphics.clDefault) then result:=def\n  else result:=colors[idx]\n  end; // getColor\n\nresourcestring\n  LIMIT = 'Limit';\n  TOP_SPEED = 'Top speed';\nbegin\nr:=cnv.cliprect;\n// clear\ncnv.brush.color:=getColor(0, clBlack);\ncnv.fillrect(r);\n// draw grid\ncnv.Pen.color:=getColor(1, rgb(0,0,120));\ni:=r.left;\nwhile i < r.right do\n  begin\n  cnv.moveTo(i, r.top);\n  cnv.LineTo(i, r.Bottom);\n  inc(i,10);\n  end;\ni:=r.bottom;\nwhile i > r.top do\n  begin\n  cnv.moveTo(r.left, i);\n  cnv.LineTo(r.right, i);\n  dec(i,10);\n  end;\n\nmaxV:=max(graph.maxV, 1);\nh:=r.bottom-r.top-1;\n// draw graph\ncnv.Pen.color:=getColor(2, clFuchsia);\nfor i:=0 to (r.Right-r.left)-1 do\tdrawSample(graph.samplesOut[i]);\ncnv.Pen.color:=getColor(3, clYellow);\nfor i:=0 to (r.Right-r.left)-1 do\tdrawSample(graph.samplesIn[i]);\n// text\ncnv.Font.Color:=getColor(4, clLtGray);\ncnv.Font.Name:='Small Fonts';\ncnv.font.size:=7;\nSetBkMode(cnv.handle, TRANSPARENT);\ntop:=(graph.maxV/1000)*safeDiv(10.0, graph.rate);\ns:=format(TOP_SPEED+': %.1f KB/s    ---    %d kbps', [top, round(top*8)]);\ncnv.TextOut(r.right-cnv.TextWidth(s)-20, 3, s);\nif assigned(globalLimiter) and (globalLimiter.maxSpeed < MAXINT) then\n  cnv.TextOut(r.right-180+25, 15, format(LIMIT+': %.1f KB/s', [globalLimiter.maxSpeed/1000]));\nend; // drawGraphOn\n\nprocedure TmainFrm.graphBoxPaint(Sender: TObject);\nvar\n  bmp: Tbitmap;\n  r: Trect;\nbegin\nif not graphBox.visible then exit;\nbmp:=Tbitmap.create();\nbmp.Width:=graphBox.Width;\nbmp.Height:=graphBox.Height;\nr:=bmp.canvas.ClipRect;\ndrawGraphOn(bmp.canvas);\ngraphBox.canvas.CopyRect(r,bmp.canvas,r);\nbmp.free;\nend;\n\nfunction Tmainfrm.getGraphPic(cd:TconnData=NIL):ansistring;\nvar\n  bmp: Tbitmap;\n  refresh: ansistring;\n  i: integer;\n  colors: TIntegerDynArray;\n  options: string;\n\n  procedure addColor(c:Tcolor);\n  var\n    n: integer;\n  begin\n  n:=length(colors);\n  setLength(colors, n+1);\n  colors[n]:=c;\n  end; // addColor\n\nbegin\noptions:=copy(decodeURL(cd.conn.request.url), 12, MAXINT);\ndelete(options, pos('?',options), MAXINT);\nbmp:=Tbitmap.create();\nbmp.Width:=graphBox.Width;\nbmp.Height:=graphBox.Height;\ncolors:=NIL;\nif options = '' then\n  begin\n  // here is an initial support for ?parameters. colors not supported yet.\n  try bmp.width:=strToInt(cd.urlvars.Values['w']) except end;\n  try bmp.height:=min(strToInt(cd.urlvars.Values['h']), 300000 div max(1,bmp.width)) except end;\n  refresh:=ansistring(cd.urlvars.Values['refresh']);\n  end\nelse\n  try\n    i:=strToInt(chop('x',options));\n    if (i > 0) and (i <= length(graph.samplesIn)) then bmp.Width:=i;\n    i:=strToInt(chop('x',options));\n    if (i > 0) and (i <= length(graph.samplesIn)) then\n      bmp.height:=min(i, 300000 div max(1,bmp.width));\n    refresh:=ansistring(chop('x',options));\n    for i:=1 to 5 do\n      addColor(stringToColorEx(chop('x',options), graphics.clDefault));\n  except\n    end;\ndrawGraphOn(bmp.canvas, colors);\nresult:=bmp2str(bmp);\nbmp.free;\nif cd = NIL then exit;\ncd.conn.addHeader('Cache-Control: no-cache');\nif refresh > '' then\n  cd.conn.addHeader('Refresh: '+refresh);\nend; // getGraphPic\n\nprocedure resendShortcut(mi:Tmenuitem; sc:Tshortcut);\nvar\n  i: integer;\nbegin\nif mi.shortcut = sc then mi.click();\nfor i:=0 to mi.count-1 do resendShortcut(mi.items[i], sc); \nend;\n\nprocedure TmainFrm.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);\nbegin\naltPressedForMenu:=(key = 18) and (shift = [ssAlt]);\nresendShortcut(menu.items, shortcut(key,shift));\nif shift = [] then\n  case key of\n    VK_F10: popupMainMenu();\n    end;\nend;\n\nprocedure TmainFrm.FormKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);\nbegin\nif altPressedForMenu and (key = 18) and (shift = []) then\n  popupMainMenu();\naltPressedForMenu:=FALSE\nend;\n\nprocedure TmainFrm.Officialwebsite1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/hfs/') end;\n\nprocedure TmainFrm.showmaintrayiconChkClick(Sender: TObject);\nbegin\nif showmaintrayiconChk.Checked then addTray()\nelse tray.hide();\nend;\n\nfunction Shell_GetImageLists(var hl,hs:Thandle):boolean; stdcall; external 'shell32.dll' index 71;\n\nfunction getSystemimages():TImageList;\nvar\n  hl, hs: Thandle;\nbegin\nresult:=NIL;\nif not Shell_GetImageLists(hl,hs) then exit;\nresult:=Timagelist.Create(NIL);\nresult.ShareImages:=TRUE;\nresult.handle:=hs;\nend; // loadSystemimages\n\nprocedure TmainFrm.expandBtnClick(Sender: TObject);\nbegin setLogToolbar(TRUE) end;\n\nprocedure TmainFrm.Speedlimit1Click(Sender: TObject);\nresourcestring\n  MSG_MAX_BW = 'Max bandwidth (KB/s).';\n  ZEROMSG = 'Zero is an effective limit.'#13'To disable instead, leave empty.';\n  LIMIT = 'Speed limit';\nvar\n  s: string;\nbegin\nif speedLimit < 0 then s:=''\nelse s:=floatToStr(speedLimit);\nif not inputquery(LIMIT, MSG_MAX_BW+#13+MSG_EMPTY_NO_LIMIT+#13, s) then\n  exit;\ntry\n  s:=trim(s);\n  if s = '' then setSpeedLimit(-1)\n  else setSpeedLimit(strToFloat(s));\n  if speedLimit = 0 then\n    msgDlg(ZEROMSG, MB_ICONWARNING);\n  // a manual set of speedlimit voids the pause command\n  Pausestreaming1.Checked:=FALSE;\nexcept msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\nend;\n\nprocedure TmainFrm.Speedlimitforsingleaddress1Click(Sender: TObject);\nresourcestring\n  MSG_MAX_BW_1 = 'Max bandwidth for single address (KB/s).';\n  LIMIT1 = 'Speed limit for single address';\nvar\n  s: string;\nbegin\nif speedLimitIP <= 0 then s:=''\nelse s:=floatToStr(speedLimitIP);\nif inputquery(LIMIT1, MSG_MAX_BW_1+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry\n  \ts:=trim(s);\n  \tif s = '' then setSpeedLimitIP(-1)\n    else setSpeedLimitIP(strToFloat(s));\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nprocedure Tmainfrm.setnoDownloadTimeout(v:integer);\nresourcestring\n  NODL = 'No downloads timeout: ';\nbegin\nif v < 0 then v:=0;\nif v <> noDownloadTimeout then lastActivityTime:=now();\nnoDownloadTimeout:=v;\nnoDownloadTimeout1.caption:=NODL+if_(v=0, DISABLED, intToStr(v) );\nend;\n\nprocedure Tmainfrm.setGraphRate(v:integer);\nresourcestring\n  MSG = 'Graph refresh rate: %d (tenths of second)';\nbegin\nif v < 1 then v:=1;\nif graph.rate = v then exit;\ngraph.rate:=v;\nGraphrefreshrate1.caption:=format(MSG, [v]);\n// changing rate invalidates previous data\nfillChar(graph.samplesOut, sizeof(graph.samplesOut), 0);\nfillChar(graph.samplesIn, sizeof(graph.samplesIn), 0);\ngraph.maxV:=0;\nend; // setGraphRate\n\nprocedure TmainFrm.Maxconnections1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous connections to serve.'\n    +#13'Most people don''t know this function well, and have problems. If you are unsure, please use the \"Max simultaneous downloads\".';\n  MSG2 = 'In this moment there are %d active connections';\nvar\n  s: string;\nbegin\nif maxConnections > 0 then s:=intToStr(maxConnections)\nelse s:='';\nif inputquery('Max connections', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxConnections(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif (maxConnections > 0) and (srv.conns.count > maxConnections) then\n  msgDlg(format(MSG2, [srv.conns.count]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.maxDLs1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous downloads.';\n  MSG2 = 'In this moment there are %d active downloads';\nvar\n  s: string;\n  i: integer;\nbegin\nif maxContempDLs > 0 then s:=intToStr(maxContempDLs)\nelse s:='';\nif inputquery('Max downloads', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxDLs(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxContempDLs = 0 then exit;\ni:=countDownloads();\nif i > maxContempDLs then\n  msgDlg(format(MSG2, [i]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.Maxconnectionsfromsingleaddress1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous connections to accept from a single IP address.'\n    +#13'Most people don''t know this function well, and have problems. If you are unsure, please use the \"Max simultaneous downloads from a single IP address\".';\nvar\n  s: string;\n  addresses: TStringDynArray;\n  i: integer;\nbegin\nif maxConnectionsIP > 0 then s:=intToStr(maxConnectionsIP)\nelse s:='';\nif inputquery('Max connections by IP', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxConnectionsIP(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxConnectionsIP = 0 then exit;\naddresses:=NIL;\nfor i:=0 to srv.conns.Count-1 do\n  with conn2data(i) do\n    if countConnectionsByIP(address) > maxConnectionsIP then\n      addUniqueString(address, addresses);\nif assigned(addresses) then\n  msgDlg(format(MSG_ADDRESSES_EXCEED,[join(#13, addresses)]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.MaxDLsIP1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous downloads from a single IP address.';\nvar\n  s: string;\n  addresses: TStringDynArray;\n  i: integer;\nbegin\nif maxContempDLsIP > 0 then s:=intToStr(maxContempDLsIP)\nelse s:='';\nif inputquery('Max downloads by IP', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxDLsIP(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxContempDLsIP = 0 then exit;\naddresses:=NIL;\nfor i:=0 to srv.conns.Count-1 do\n  with conn2data(i) do\n    if countDownloads(address) > maxContempDLsIP then\n      addUniqueString(address, addresses);\nif assigned(addresses) then\n  msgDlg(format(MSG_ADDRESSES_EXCEED,[join(#13, addresses)]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.Forum1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/forum/') end;\n\nprocedure TmainFrm.FAQ1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/sw/?faq=hfs') end;\n\nprocedure TmainFrm.License1Click(Sender: TObject);\nbegin openURL('https://www.gnu.org/licenses/gpl-3.0.html') end;\n\nprocedure Tmainfrm.pasteFiles();\nbegin\n// try twice\ntry addDropFiles(clipboard.GetAsHandle(CF_HDROP), filesBox.selected)\nexcept\n  try addDropFiles(clipboard.GetAsHandle(CF_HDROP), filesBox.selected)\n  except on e:Exception do\n    msgDlg(e.message, MB_ICONERROR);\n    end\n  end;\nend;\n\nprocedure TmainFrm.Paste1Click(Sender: TObject);\nbegin pasteFiles() end;\n\nprocedure TmainFrm.Addfiles1Click(Sender: TObject);\nvar\n  dlg: TopenDialog;\n  i: integer;\nbegin\ndlg:=TopenDialog.create(self);\nif sysutils.directoryExists(lastDialogFolder) then\n  dlg.InitialDir:=lastDialogFolder;\ndlg.Options:=dlg.Options+[ofAllowMultiSelect, ofFileMustExist, ofPathMustExist];\nif dlg.Execute() then\n  begin\n\tfor i:=0 to dlg.files.count-1 do\n    addFile(Tfile.create(dlg.files[i]), filesBox.Selected, dlg.Files.count<>1 );\n  lastDialogFolder:=extractFilePath(dlg.fileName);\n  end;\ndlg.free;\nend;\n\nprocedure TmainFrm.Addfolder1Click(Sender: TObject);\nbegin\nif selectFolder('', lastDialogFolder) then\n  begin\n  addFilesFromString(lastDialogFolder, filesBox.selected);\n  end;\nend;\n\nprocedure TmainFrm.graphSplitterMoved(Sender: TObject);\nbegin graph.size:=graphBox.height end;\n\nprocedure TmainFrm.Graphrefreshrate1Click(Sender: TObject);\nvar\n  s: string;\nbegin\ns:=intToStr(graph.rate);\nif inputquery('Graph refresh rate', 'Tenths of second',s) then\n\ttry\n  \ts:=trim(s);\n  \tif s = '' then setGraphRate(10)\n    else setGraphRate(strToInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nprocedure TmainFrm.Pausestreaming1Click(Sender: TObject);\nbegin\nif pausestreaming1.checked then globalLimiter.maxSpeed:=0\nelse setSpeedLimit(speedLimit)\nend;\n\nprocedure TmainFrm.Comment1Click(Sender: TObject);\nvar\n  i: integer;\nbegin\nif selectedFile = NIL then exit;\ninputComment(selectedFile);\nfor i:=0 to filesBox.SelectionCount-1 do\n  nodeToFile(filesBox.Selections[i]).comment:=selectedFile.comment;\nend;\n\nprocedure TmainFrm.filesBoxCustomDrawItem(Sender: TCustomTreeView;\n  Node: TTreeNode; State: TCustomDrawState; var DefaultDraw: Boolean);\nvar\n  f: Tfile;\n  a: TStringDynArray;\n  onlyAnon: boolean;\nbegin\nif not sender.visible then exit;\nf:=Tfile(node.data);\nif f = NIL then exit;\nif f.hasRecursive([FA_HIDDEN, FA_HIDDENTREE], TRUE) then\n\twith sender.Canvas.Font do\n  \tstyle:=style+[fsItalic];\na:=f.accounts[FA_ACCESS];\nonlyAnon:= onlyString(USER_ANONYMOUS, a);\nnode.stateIndex:=ifThen((f.user > '') or (assigned(a) and not onlyAnon), ICON_LOCK, -1);\nend;\n\nfunction Tmainfrm.fileAttributeInSelection(fa:TfileAttribute):boolean;\nvar\n  i: integer;\nbegin\nfor i:=0 to filesBox.SelectionCount-1 do\n  if fa in nodeTofile(filesBox.Selections[i]).flags then\n    begin\n    result:=TRUE;\n    exit;\n    end;\nresult:=FALSE;\nend; // fileAttributeInSelection\n\nprocedure TmainFrm.Setuserpass1Click(Sender: TObject);\nvar\n  i: integer;\n  user, pwd: string;\n  f: Tfile;\nbegin\nif selectedFile = NIL then exit;\nif fileAttributeInSelection(FA_LINK)\nand (msgDlg(MSG_UNPROTECTED_LINKS, MB_ICONWARNING+MB_YESNO) <> IDYES) then exit;\nuser:=selectedFile.user;\npwd:=selectedFile.pwd;\nif not newuserpassFrm.prompt(user, pwd) then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  begin\n  f:=filesBox.Selections[i].data;\n  usersInVFS.drop(f.user, f.pwd);\n  f.user:=user;\n  f.pwd:=pwd;\n  usersInVFS.track(f.user, f.pwd);\n  end;\nfilesBox.Repaint();\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.browseBtnClick(Sender: TObject);\nbegin browse(urlBox.Text) end;\n\nprocedure TmainFrm.BanIPaddress1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\nbanAddress(cd.address);\nend;\n\nprocedure showOptions(page:TtabSheet);\nvar\n  was: boolean;\nbegin\noptionsFrm.pageCtrl.ActivePage:=page;\nwas:=page.TabVisible;\npage.TabVisible:=TRUE;\nif mainfrm.modalOptionsChk.checked and not optionsFrm.visible then optionsFrm.showModal()\nelse optionsFrm.show();\npage.TabVisible:=was;\nend;\n\nprocedure TmainFrm.BannedIPaddresses1Click(Sender: TObject);\nbegin showOptions(optionsFrm.bansPage) end;\n\nprocedure Tmainfrm.recentsClick(sender:Tobject);\nvar\n  i: integer;\nbegin\nif blockLoadSave() then exit;\ni:=strToInt((sender as Tmenuitem).Caption[3]);\nif i > length(recentFiles) then exit;\ndec(i); // convert to zero based\nif fileExists(recentFiles[i]) then\n  begin\n  if not checkVfsOnQuit() then exit;\n  loadVFS(recentFiles[i]);\n  end\nelse\n  begin\n  msgDlg('The file does not exist anymore', MB_ICONERROR);\n  removeString(recentFiles, i);\n  updateRecentFilesMenu();\n  end;\nend;\n\nprocedure Tmainfrm.updateRecentFilesMenu();\nvar\n  i: integer;\nbegin\nLoadrecentfiles1.Clear();\nfor i:=0 to length(recentFiles)-1 do\n  loadrecentfiles1.Add(\n    NewItem( '[&'+intToStr(i+1)+'] '+ExtractFileName(recentFiles[i]), 0, FALSE, TRUE, recentsClick, 0, 'recent') );\nLoadrecentfiles1.visible:=Loadrecentfiles1.count>0;\nend; // updateRecentFilesMenu\n\nprocedure Tmainfrm.loadVFS(fn:string);\nresourcestring\n  MSG_TITLE = 'Loading VFS';\n  MSG_OLD = 'This file is old and uses different settings.'\n    +#13'The \"let browse\" folder option will be reset.'\n    +#13'Re-saving the file will update its format.';\n  MSG_UNK_FK = 'This file has been created with a newer version.'\n    +#13'Some data was discarded because unknown.'\n    +#13'If you save the file now, the discarded data will NOT be saved.';\n  MSG_VIS_ONLY_ANON =\n    'This VFS file uses the \"Visible only to anonymous users\" feature.'\n  +#13'This feature is not available anymore.'\n  +#13'You can achieve similar results by restricting access to @anonymous,'\n  +#13'then enabling \"List protected items only for allowed users\".';\n  MSG_AUTO_DISABLED = 'Because of the problems encountered in loading,'\n    +#13'automatic saving has been disabled'\n    +#13'until you save manually or load another one.';\n  MSG_CORRUPTED = 'This file does not contain valid data.';\n  MSG_MACROS_FOUND = '!!!!!!!!! DANGER !!!!!!!!!'\n    +#13'This file contains macros.'\n    +#13'Don''t accept macros from people you don''t trust.'\n    +#13#13'Trust this file?';\nvar\n  took: Tdatetime;\n  data: ansistring;\n\n  function anyAutosavingFeatureEnabled():boolean;\n  begin  result:=(autosaveVFS.every > 0) or autosaveVFSchk.checked end;\n\n  function restoreBak():boolean;\n  begin\n  result:=fileExists(fn+BAK_EXT)\n    and (not fileExists(fn) or renameFile(fn, fn+CORRUPTED_EXT))\n    and renameFile(fn+BAK_EXT, fn);\n  if result then\n    data:=loadfile(fn);\n  end; // restoreBak\n\nbegin\nif fn = '' then exit;\nfilesBox.hide(); // it seems to speed up a lot\nprogFrm.show('Loading VFS...', TRUE);\ndisableUserInteraction();\ntry\n  fillchar(loadingVFS, sizeof(loadingVFS), 0);\n  took:=now();\n  data:=loadfile(fn);\n  loadingVfs.bakAvailable:=fileExists(fn+BAK_EXT);\n  if not ansiStartsStr(TLV(FK_HEAD, VFS_FILE_IDENTIFIER), data)\n  and not restoreBak() then\n    begin\n    if data = '' then\n      msgDlg(MSG_CORRUPTED, MB_ICONERROR);\n    exit;\n    end;\n  try\n    initVFS();\n    setVFS(data);\n    if loadingVFS.useBackup and restoreBak() then\n      begin\n      initVFS();\n      setVFS(loadfile(fn));\n      end;\n    took:=now()-took;\n  finally\n    if progFrm.cancelRequested then initVFS()\n    else lastFileOpen:=fn;\n    VFSmodified:=FALSE;\n    purgeVFSaccounts(); // remove references to non-existent users\n    filesBox.FullCollapse();\n    rootNode.Selected:=TRUE;\n    rootNode.MakeVisible();\n    end;\nfinally\n  reenableUserInteraction();\n  progFrm.hide();\n  filesBox.show();\n  end;\nif progFrm.cancelRequested then exit;\nif loadingVFS.macrosFound\nand not stringExists(fn, trustedFiles)\nand (msgDlg(MSG_MACROS_FOUND, MB_ICONWARNING+MB_YESNO, MSG_TITLE) = mrNo) then\n  begin\n  initVFS();\n  exit;\n  end;\naddUniqueString(fn, trustedFiles);\nif loadingVFS.visOnlyAnon then\n  msgDlg(MSG_VIS_ONLY_ANON, MB_ICONWARNING, MSG_TITLE);\nif loadingVFS.resetLetBrowse then msgDlg(MSG_OLD, MB_ICONWARNING, MSG_TITLE);\nif loadingVFS.unkFK then msgDlg(MSG_UNK_FK, MB_ICONWARNING, MSG_TITLE);\n\nwith loadingVFS do disableAutosave:=unkFK or resetLetBrowse or visOnlyAnon;\nif loadingVFS.disableAutosave and anyAutosavingFeatureEnabled() then\n  msgDlg(MSG_AUTO_DISABLED, MB_ICONWARNING, MSG_TITLE);\n\nsetStatusBarText(format('Loaded in %.1f seconds (%s)', [took*SECONDS,fn]), 10);\n\nremovestring(fn, recentFiles); // avoid duplicates\ninsertstring(fn, 0, recentFiles); // insert fn as first element\nremoveString(recentFiles, MAX_RECENT_FILES, length(recentFiles)); // shrink2max\nupdateRecentFilesMenu();\nend; // loadVFS\n\nprocedure TmainFrm.logBoxChange(Sender: TObject);\nbegin logToolbar.visible:=not easyMode and (logBox.Lines.count > 0) end;\n\nprocedure TmainFrm.logBoxMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);\nbegin\nif button = mbRight then\n  logRightClick:=point(x,y);\nend;\n\nprocedure Tmainfrm.popupMainMenu();\nbegin\nmenuBtn.Down:=TRUE;\nwith menuBtn.clientToScreen(point(0,menuBtn.height)) do\n  menu.popup(x,y);\nmenuBtn.Down:=FALSE;\nend;\n\nprocedure TmainFrm.portBtnClick(Sender: TObject);\nvar\n  s: string;\nbegin\ns:=port;\n  repeat\n  if not inputQuery('Port', 'Specify a port to accept connection,'#13'or leave empty to decide automatically.', s) then exit;\n  s:=trim(s);\n  if not isOnlyDigits(s) then\n    begin\n    msgDlg('Numbers only', MB_ICONERROR);\n    continue;\n    end;\n  if changePort(s) then exit;\n  sayPortBusy(s);\n  until FALSE;\nend;\n\nprocedure Tmainfrm.updateAlwaysOnTop();\nbegin\nif alwaysOnTopchk.checked then FormStyle:=fsStayOnTop\nelse formStyle:=fsNormal\nend; // updateAlwaysOnTop\n\nprocedure TmainFrm.updateBtnClick(Sender: TObject);\nbegin\nif now()-lastUpdateCheck > 1*HOURS then\n  autoCheckUpdates(); // refresh update info, in case the button is clicked long after the check\n\ndoTheUpdate(clearAndReturn(updateWaiting));\nupdateBtn.hide();\nend;\n\nprocedure TmainFrm.Changeeditor1Click(Sender: TObject);\nbegin selectFile(tplEditor, '', 'Programs|*.exe', [ofFileMustExist]) end;\n\nprocedure TmainFrm.Changefile1Click(Sender: TObject);\nbegin\nif selectFile(tplFilename, 'Change template file', 'Template file|*.tpl', [ofPathMustExist, ofCreatePrompt]) then\n  setNewTplFile(tplFilename);\nend;\n\nprocedure TmainFrm.Changeport1Click(Sender: TObject);\nbegin portBtnClick(portBtn) end;\n\nprocedure TmainFrm.Checkforupdates1Click(Sender: TObject);\nresourcestring\n  MSG_INFO = 'Last stable version: %s'#13#13'Last untested version: %s'#13;\n  MSG_NEWER = 'There''s a new version available online: %s';\nvar\n  updateURL: string;\n  info: Ttpl;\nbegin\nprogFrm.show('Searching for updates...');\ntry info:=downloadUpdateInfo()\nfinally progFrm.hide() end;\n\nif info = NIL then\n  begin\n  msgDlg(MSG_COMM_ERROR, MB_ICONERROR);\n  exit;\n  end;\n\ntry\n  msgDlg(format(MSG_INFO, [ info['last stable'], first([info['last untested'],'none']) ]));\n\n  updateURL:='';\n  if trim(info['last stable build']) > VERSION_BUILD then\n    begin\n    msgDlg(format(MSG_NEWER,[info['last stable']]));\n    updateURL:=trim(info['last stable url']);\n    end\n  else\n    if (not VERSION_STABLE or testerUpdatesChk.checked)\n    and (trim(info['last untested build']) > VERSION_BUILD) then\n      begin\n      msgDlg(format(MSG_NEWER,[info['last untested']]));\n      updateURL:=trim(info['last untested url']);\n      end;\n\n  msgDlg(info['notice'], MB_ICONWARNING);\n  parseVersionNotice(info['version notice']);\nfinally info.free end;\npromptForUpdating(updateURL);\nend;\n\nprocedure Tmainfrm.setEasyMode(easy:boolean=TRUE);\nresourcestring\n  ARE_EXPERT = 'You are in Expert mode';\n  ARE_EASY = 'You are in Easy mode';\n  SW2EXPERT = 'Switch to Expert mode';\n  SW2EASY = 'Switch to Easy mode';\nconst\n  ICO :array [boolean] of integer = (ICON_EXPERT, ICON_EASY);\nbegin\neasyMode:=easy;\nswitchMode.caption:=ifThen(easyMode, SW2EXPERT, SW2EASY);\n//switchMode.imageIndex:=ICO[not easyMode];  disabled because it's ugly, it uses the same icon as the next menu item (accounts)\nmodeBtn.caption:=ifThen(easyMode, ARE_EASY, ARE_EXPERT);\nmodeBtn.imageIndex:=ICO[easyMode];\nif not easyMode or graphInEasyMode then showGraph()\nelse hideGraph();\noptionsFrm.mimePage.tabVisible:=not easyMode;\noptionsFrm.accountsPage.tabVisible:=not easyMode;\noptionsFrm.a2nPage.tabVisible:=not easyMode;\nlogBoxChange(NIL);\nupdateSbar();\nend; // switchEasyMode\n\nprocedure TmainFrm.Rename1Click(Sender: TObject);\nbegin\nif assigned(selectedFile) then\n  filesBox.Selected.EditText()\nend;\n\nprocedure TmainFrm.noDownloadtimeout1Click(Sender: TObject);\nresourcestring\n  MSG = 'Enter the number of MINUTES with no download after which the program automatically shuts down.'\n    +#13'Leave blank to get no timeout.';\nvar\n  s:string;\nbegin\nif noDownloadTimeout > 0 then s:=intToStr(noDownloadTimeout)\nelse s:='';\nif inputquery('No downloads timeout', MSG, s) then\n\ttry setnoDownloadTimeout(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nprocedure Tmainfrm.initVFS();\nvar\n  f:Tfile;\nbegin\nuploadPaths:=NIL;\nif assigned(rootNode) then rootNode.delete();\nf:=Tfile.createVirtualFolder('/');\nf.flags:=f.flags+[FA_ROOT, FA_ARCHIVABLE];\nf.dontCountAsDownloadMask:='*.htm;*.html;*.css';\nf.defaultFileMask:='index.html;index.htm;default.html;default.htm';\nrootFile:=f;\naddFile(f, NIL, TRUE);\nrootNode:=rootFile.node;\nVFSmodified:=FALSE;\nlastFileOpen:='';\nend; // initVFS\n\nprocedure TmainFrm.alwaysontopChkClick(Sender: TObject);\nbegin updateAlwaysOnTop() end;\n\nprocedure TmainFrm.hideGraph();\nbegin\ngraphSplitter.hide();\ngraphBox.hide();\ngraphInEasyMode:=FALSE;\nend; // hideGraph\n\nprocedure TmainFrm.showGraph();\nbegin\ngraphSplitter.show();\ngraphBox.show();\ngraphBox.Height:=graph.size;\nif easyMode then graphInEasyMode:=TRUE;\nend; // showGraph\n\nprocedure TmainFrm.Showbandwidthgraph1Click(Sender: TObject);\nbegin showGraph() end;\n\nprocedure TmainFrm.Pause1Click(Sender: TObject);\nvar\n  cd: TconnData;\nbegin\ncd:=selectedConnection();\nif cd = NIL then exit;\nwith cd.conn do paused:=not paused;\nend;\n\nprocedure TmainFrm.MIMEtypes1Click(Sender: TObject);\nbegin showOptions(optionsFrm.mimePage) end;\n\nprocedure TmainFrm.accounts1Click(Sender: TObject);\nbegin showOptions(optionsFrm.accountsPage) end;\n\nprocedure TmainFrm.CopyURL1Click(Sender: TObject);\nvar\n  i: integer;\n  s: string;\nbegin\ns:='';\nfor i:=0 to filesBox.SelectionCount-1 do\n  s:=s+nodeTofile(filesBox.Selections[i]).fullURL()+CRLF;\nsetLength(s, length(s)-2);\nsetClip(s);\nend;\n\nprocedure Tmainfrm.copyURLwithPasswordMenuClick(sender:TObject);\nvar\n  a: Paccount;\n  user, pwd: string;\n  f: Tfile;\nbegin\nif selectedFile = NIL then exit;\nuser:=(sender as Tmenuitem).caption;\ndelete(user, pos('&',user), 1);\n// protection may have been inherited\nf:=selectedFile;\nwhile assigned(f) and (f.accounts[FA_ACCESS] = NIL) and (f.user = '') do\n  f:=f.parent;\n\nif f.user = user then \n  pwd:=f.pwd\nelse\n  begin\n  a:=getAccount(user);\n  if assigned(a) then pwd:=a.pwd\n  else pwd:='';\n  end;\n\nsetClip( selectedFile.fullURL('',user,pwd) )\nend; // copyURLwithPasswordMenuClick\n\nprocedure Tmainfrm.copyURLwithAddressMenuClick(sender:Tobject);\nvar\n  s, addr: string;\n  i: integer;\nbegin\naddr:=(sender as Tmenuitem).Caption;\ndelete(addr, pos('&',addr), 1);\n\ns:='';\nfor i:=0 to filesBox.SelectionCount-1 do\n  s:=s+nodeTofile(filesBox.Selections[i]).fullURL(addr)+CRLF;\nsetLength(s, length(s)-2);\n\nsetClip(s);\nend; // copyURLwithAddressMenuClick\n\nprocedure TmainFrm.CopyURLwithfingerprint1Click(Sender: TObject);\nvar\n  f: Tfile;\n  s, hash: string;\n  i: integer;\nbegin\nif selectedFile = NIL then exit;\ns:='';\ntry\n  for i:=0 to filesBox.SelectionCount-1 do\n    begin\n    f:=filesBox.Selections[i].data;\n\n    progFrm.show('Hashing '+f.name, TRUE);\n    progFrm.progress:=i / filesBox.SelectionCount;\n    application.ProcessMessages();\n\n    hash:=loadFingerprint(f.resource);\n    if (hash = '') and f.isFile() then\n      begin\n      progFrm.push( 1/filesBox.SelectionCount );\n      try hash:=createFingerprint(f.resource);\n      finally progFrm.pop() end;\n      if saveNewFingerprintsChk.checked and (hash > '') then\n        saveTextFile(f.resource+'.md5', hash);\n      end;\n    if progFrm.cancelRequested then exit;\n    s:=s + f.fullURL() + nonEmptyConcat('#!md5!', hash) + CRLF;\n    end;\nfinally progFrm.hide() end;\nsetLength(s, length(s)-2);\n\nurlBox.Text:=getTill(#13, s);\nsetClip(s);\nend;\n\nprocedure TmainFrm.urlBoxChange(Sender: TObject);\nbegin updateCopyBtn() end;\n\nprocedure TmainFrm.traymessage1Click(Sender: TObject);\nbegin showOptions(optionsFrm.trayPage) end;\n\nprocedure TmainFrm.Guide1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/hfs/guide/') end;\n\nprocedure Tmainfrm.saveVFS(fn:string='');\nbegin\nif blockLoadSave() then exit;\nif fn = '' then\n  begin\n  fn:=lastFileOpen;\n  if not promptForFileName(fn, 'VirtualFileSystem|*.vfs', 'vfs', 'Save VFS', '', TRUE) then\n    exit;\n  end;\nlastFileOpen:=fn;\ndeleteFile(fn+BAK_EXT);\nrenameFile(fn, fn+BAK_EXT);\nif not savefile(fn, addVFSheader(getVFS())) then\n  begin\n  deleteFile(fn);\n  renameFile(fn+BAK_EXT, fn);\n  msgDlg('Error saving', MB_ICONERROR);\n  exit;\n  end;\nif not backupSavingChk.checked then\n  deleteFile(fn+BAK_EXT);\nVFSmodified:=FALSE;\nloadingVFS.disableAutosave:=FALSE;\naddUniqueString(fn, trustedFiles);\nend; // saveVFS\n\nprocedure TmainFrm.filesBoxAddition(Sender: TObject; Node: TTreeNode);\nbegin VFSmodified:=TRUE end;\n\nprocedure TmainFrm.FormClose(Sender: TObject; var Action: TCloseAction);\nbegin\nquitting:=TRUE;\nrunEventScript('quit');\ntimer.enabled:=FALSE;\nif autosaveOptionsChk.checked then saveCFG();\n// we disconnectAll() before srv.free, so we can purgeConnections()\nif assigned(srv) then srv.disconnectAll(TRUE);\npurgeConnections();\nfreeAndNIL(srv);\nfreeAndNIL(tray);\nfreeAndNIL(tray_ico);\nend;\n\nprocedure TmainFrm.Logfile1Click(Sender: TObject);\nresourcestring\n  MSG = 'This function does not save any previous information to the log file.'\n    +#13'Instead, it saves all information that appears in the log box in real-time (from when you click \"OK\", below).'\n    +#13'Specify a filename for the log.'\n    +#13'If you leave the filename blank, no log file is saved.'\n    +#13\n    +#13'Here are some symbols you can use in the filename to split the log:'\n    +#13'  %d% -- day of the month (1..31)'\n    +#13'  %m% -- month (1..12)'\n    +#13'  %y% -- year (2000..)'\n    +#13'  %dow% -- day of the week (0..6)'\n    +#13'  %w% -- week of the year (1..53)'\n    +#13'  %user% -- username surrounded by parenthesis';\nbegin\nInputQuery('Log file', MSG, logFile.filename)\nend;\n\nprocedure TmainFrm.Font1Click(Sender: TObject);\nvar\n  dlg: TFontDialog;\nbegin\ndlg:=TFontDialog.Create(NIL);\ndlg.Font.name:=logFontName;\ndlg.Font.size:=logFontSize;\nif dlg.Execute then\n  begin\n  logBox.font.Assign(dlg.Font);\n  logFontName:=dlg.Font.Name;\n  logFontSize:=dlg.Font.size;\n  end;\ndlg.free;\nend;\n\nprocedure TmainFrm.SetURL1Click(Sender: TObject);\nresourcestring\n  MSG = 'Please insert an URL for the link'\n    +#13\n    +#13'Do not forget to specify http:// or whatever.'\n    +#13'%%ip%% will be translated to your address';\nvar\n  i: integer;\n  s: string;\nbegin\nif selectedFile = NIL then exit;\ns:=selectedFile.resource;\n// this is a little help for who's linking an email. We don't mess with http/ftp because even www.asd.com may be the name of a folder.\nif ansiContainsStr(s, '@')\nand not ansiStartsText('mailto:', s)\nand not ansiContainsStr(s, '://')\nand not ansiContainsStr(s, '/') then\n  s:='mailto:'+s;\nif not inputquery('Set URL', MSG, s) then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  with nodeToFile(filesBox.Selections[i]) do\n    if FA_LINK in flags then\n      resource:=s;\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.Resetuserpass1Click(Sender: TObject);\nvar\n  i: integer;\n  f: Tfile;\nbegin\nfor i:=0 to filesBox.SelectionCount-1 do\n  begin\n  f:=filesBox.Selections[i].data;\n  usersInVFS.drop(f.user, f.pwd);\n  f.user:='';\n  f.pwd:='';\n  end;\nVFSmodified:=TRUE;\nfilesBox.Repaint();\nend;\n\nprocedure TmainFrm.Switchtovirtual1Click(Sender: TObject);\nvar\n  f: Tfile;\n  under: Ttreenode;\n  i: integer;\n  bakIcon: integer;\n  someLocked: boolean;\n  nodes: TtreenodeDynArray;\nbegin\nif selectedFile = NIL then exit;\nnodes:=copySelection();\n\naddingItemsCounter:=0;\ntry\n  someLocked:=FALSE;\n  for i:=0 to length(nodes)-1 do\n    if assigned(nodes[i]) then\n      with nodeToFile(nodes[i]) do\n        if isRealFolder() and not isRoot() then\n          if isLocked() then someLocked:=TRUE\n          else\n            begin\n            bakIcon:=icon;\n            f:=Tfile.create(resource);\n            under:=node.Parent;\n            include(f.flags, FA_VIRTUAL);\n            setNilChildrenFrom(nodes, i);\n            node.Delete();\n            addFile(f, under, TRUE);\n            f.setupImage(bakIcon);\n            f.node.Focused:=TRUE;\n            end;\n  VFSmodified:=TRUE;\n  if someLocked then msgDlg(MSG_SOME_LOCKED, MB_ICONWARNING);\nfinally addingItemsCounter:=-1 end;\nend;\n\nprocedure TmainFrm.FormCloseQuery(Sender: TObject; var CanClose: Boolean);\nbegin\nqueryingClose:=TRUE;\ntry\n  if confirmexitChk.checked and not windowsShuttingDown and not quitASAP then\n    if msgDlg('Quit?', MB_ICONQUESTION+MB_YESNO) = IDNO then\n      begin\n      canclose:=FALSE;\n      exit;\n      end;\n  if not checkVfsOnQuit() then\n    begin\n    canClose:=FALSE;\n    exit;\n    end;\n  stopAddingItems:=TRUE;\n  if lockTimerevent or not applicationFullyInitialized then\n    begin\n    quitASAP:=TRUE;\n    canClose:=FALSE;\n    end;\n  { it's better to switch off this flag, because some software that has been queried after us may prevent\n  { Windows from shutting down, but the flag would stay set, while Windows is no more shutting down. }\n  windowsShuttingDown:=FALSE;\nfinally queryingClose:=FALSE end;\nend;\n\nprocedure TmainFrm.FormCreate(Sender: TObject);\nbegin\nscreen.onActiveFormChange:=wrapInputQuery;\nend;\n\nprocedure TmainFrm.Loginrealm1Click(Sender: TObject);\nresourcestring\n  MSG = 'The realm string is shown on the user/pass dialog of the browser.'\n    +#13'Here you can customize the realm for the login button';\nbegin\nif not inputquery('Login realm', MSG, loginRealm) then exit;\nloginRealm:=trim(loginRealm);\nend;\n\nprocedure TmainFrm.Introduction1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/hfs/guide/intro.html') end;\n\nprocedure TmainFrm.Reset1Click(Sender: TObject);\nbegin\nzeroMemory(@graph.samplesIn, sizeOf(graph.samplesIn));\nzeroMemory(@graph.samplesOut, sizeOf(graph.samplesOut));\ngraph.maxV:=0;\ngraph.beforeRecalcMax:=1;\nrecalculateGraph();\nend;\n\nprocedure TmainFrm.Resetfileshits1Click(Sender: TObject);\nvar\n  n: Ttreenode;\nbegin\nrepaintTray();\nn:=rootnode;\nwhile assigned(n) do\n  begin\n  nodeToFile(n).DLcount:=0;\n  n:=n.getNext();\n  end;\nVFSmodified:=TRUE;\nautoupdatedFiles.clear();\nend;\n\nprocedure TmainFrm.persistentconnectionsChkClick(Sender: TObject);\nbegin\nsrv.persistentConnections:=persistentconnectionsChk.Checked;\nif not srv.persistentConnections then\n  Kickidleconnections1Click(NIL);\nend;\n\nprocedure TmainFrm.Kickidleconnections1Click(Sender: TObject);\nvar\n  i: integer;\nbegin\ni:=0;\nwhile i < srv.conns.count do\n  begin\n  with conn2data(i) do\n    if conn.state = HCS_IDLE then\n      disconnect('kicked idle');\n  inc(i);\n  end;\nend;\n\nprocedure TmainFrm.Connectionsinactivitytimeout1Click(Sender: TObject);\nresourcestring\n  MSG = 'The connection is kicked after a timeout.'\n    +#13'Specify in seconds.'\n    +#13'Leave blank to get no timeout.';\nvar\n  s:string;\nbegin\nif connectionsInactivityTimeout <= 0 then s:=''\nelse s:=intToStr(connectionsInactivityTimeout);\nif not inputquery('Connection inactivity timeout', MSG, s) then exit;\ntry connectionsInactivityTimeout:=strToUInt(s)\nexcept msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\nend;\n\nprocedure TmainFrm.splitHMoved(Sender: TObject);\nbegin if connPnl.height > 0 then lastGoodConnHeight:=connPnl.height end;\n\nprocedure TmainFrm.Clearfilesystem1Click(Sender: TObject);\nresourcestring\n  MSG = 'All changes will be lost'#13'Continue?';\nbegin\ncheckIfOnlyCountersChanged();\nif VFSmodified and (msgDlg(MSG, MB_ICONQUESTION+MB_YESNO) = IDNO) then exit;\ninitVFS();\nend;\n\nfunction checkMultiInstance():boolean;\nbegin\nresult:=not mono.working;\nif result then msgDlg(MSG_SINGLE_INSTANCE, MB_ICONERROR);\nend; // checkMultiInstance\n\nfunction isIntegratedInShell():boolean;\nbegin\nresult:=(loadregistry('*\\shell\\Add to HFS\\command', '', HKEY_CLASSES_ROOT) > '')\n  and (loadregistry('Folder\\shell\\Add to HFS\\command','',HKEY_CLASSES_ROOT) >'')\n  and (loadregistry('.vfs', '', HKEY_CLASSES_ROOT) > '')\n  and (loadregistry('.vfs\\shell\\Open\\command', '', HKEY_CLASSES_ROOT) > '')\nend; // isIntegratedInShell\n\nfunction integrateInShell():boolean;\nvar\n  exe: string;\n\n  function addToContextMenuFor(kind:string):boolean;\n  begin\n  deleteRegistry(kind+'\\shell\\HFS', HKEY_CLASSES_ROOT); // legacy: till version 2.0 beta23 we used this key. this call is to keep the registry clean from old unused keys.\n  result:=saveRegistry(kind+'\\shell\\Add to HFS\\command', '',\n    '\"'+exe+'\" \"%1\"', HKEY_CLASSES_ROOT);\n  end;\n\nbegin\nexe:=expandFileName(paramStr(0));\nresult:=addToContextMenuFor('*')\n  and addToContextMenuFor('Folder')\n  and saveregistry('.vfs','','HFS file system', HKEY_CLASSES_ROOT)\n  and saveregistry('.vfs\\shell\\Open\\command','','\"'+exe+'\" \"%1\"', HKEY_CLASSES_ROOT)\nend; // integrateInShell\n\nprocedure disintegrateShell();\nbegin\ndeleteRegistry('*\\shell\\Add to HFS', HKEY_CLASSES_ROOT);\ndeleteRegistry('*\\shell\\HFS', HKEY_CLASSES_ROOT);\ndeleteRegistry('Folder\\shell\\Add to HFS', HKEY_CLASSES_ROOT);\ndeleteRegistry('Folder\\shell\\HFS', HKEY_CLASSES_ROOT);\ndeleteRegistry('.vfs\\shell\\Open\\command', HKEY_CLASSES_ROOT);\ndeleteRegistry('.vfs', HKEY_CLASSES_ROOT);\nend; // disintegrateShell\n\nprocedure uninstall();\nconst\n  BATCH_FILE = 'hfs.uninstall.bat';\n  BATCH = 'START \"\" /WAIT \"%s\" -q'+CRLF\n    +'DEL \"%0:s\"'+CRLF\n    +'DEL %%0'+CRLF;\nbegin\nif checkMultiInstance() then exit;\nmainfrm.autosaveoptionsChk.checked:=FALSE;\ndisintegrateShell();\ndeleteCFG();\nsaveTextFile(BATCH_FILE, format(BATCH,[paramStr(0)]));\nquitASAP:=TRUE;\nexecNew(BATCH_FILE);\nend; // uninstall\n\nprocedure processParams_before(var params:TStringDynArray; allowed:string='');\nvar\n  i, n, consume: integer;\n  fn: string;\n\n  function getSinglePar():string;\n  begin\n  if i >= length(params)-1 then raise Exception.Create('missing parameter needed');\n  consume:=2;\n  result:=params[i+1];\n  end; // getSinglePar\n\nbegin\n//** see if FindCmdLineSwitch() can be useful for the job below\ni:=2; // [0] is cwd [1] is the exe file\nwhile i < length(params) do\n  begin\n  if (length(params[i]) = 2) and (params[i][1] = '-')\n  and ((allowed = '') or (pos(params[i][2], allowed) > 0)) then\n    begin\n    consume:=1; // number of params an option takes\n    case params[i][2] of\n      'q': quitASAP:=TRUE;\n      'u': uninstall();\n      'i': cfgPath:=IncludeTrailingPathDelimiter(getSinglePar());\n      'b': userIcsBuffer:=strToIntDef(getSinglePar(), 0);\n      'B': userSocketBuffer:=strToIntDef(getSinglePar(), 0);\n      'd': // delay\n        begin\n        n:=strToIntDef(getSinglePar(), 0);\n        if n > 0 then sleep(n*100);\n        end;\n      'a':\n        begin\n        fn:=getSinglePar();\n        if not fileExists(fn) then fn:=cfgPath+fn;\n        if not fileExists(fn) then exit;\n        mainfrm.setcfg(loadTextFile(fn));\n        end;\n      'c': mainfrm.setcfg(unescapeNL(getSinglePar()));\n      end;\n    for consume:=1 to consume do removeString(params, i);\n    continue;\n    end;\n  inc(i);\n  end;\nend; // processParams_before\n\nprocedure Tmainfrm.processParams_after(var params:TStringDynArray);\nvar\n  i: integer;\n  dir: string;\nbegin\ndir:=includeTrailingPathDelimiter(popString(params));\npopString(params); // hfs.exe\nfor i:=0 to length(params)-1 do\n  if not isAbsolutePath(params[i]) then\n    params[i]:=dir+params[i];\n// note: 2 .vfs files will be treated as any file\nif (length(params) = 1) and isExtension(params[0], '.vfs') then\n  begin\n  if blockLoadSave() then exit;\n  mainfrm.loadVFS(params[0])\n  end\nelse\n  { parameters are also passed by other instances via sendMessage().\n  { since this operation may require user interaction, it must be queued\n  { because those instances wouldn't quit until the dialog is closed. }\n  addArray(filesToAddQ, params);\nend; // processParams_after\n\nprocedure TmainFrm.Numberofloggeduploads1Click(Sender: TObject);\nbegin setTrayShows('uploads') end;\n\nprocedure Tmainfrm.compressReply(cd:TconnData);\nconst\n  BAD_IE_THRESHOLD = 2000; // under this size (few bytes less, really) old IE versions will go nuts with UTF-8 pages\nvar\n  s: ansistring;\nbegin\nif not compressedbrowsingChk.checked then exit;\ns:=cd.conn.reply.body;\nif s = '' then exit;\nif ipos('gzip', cd.conn.getHeader('Accept-Encoding')) = 0 then exit;\n// workaround for IE6 pre-SP2 bug\nif (cd.workaroundForIEutf8  = WI_toDetect) and (cd.agent > '') then\n  if reMatch(cd.agent, '^MSIE [4-6]\\.', '!') > 0 then // version 6 and before\n    cd.workaroundForIEutf8:=WI_yes\n  else\n    cd.workaroundForIEutf8:=WI_no;\ns:=ZcompressStr(s, clFastest, zsGzip);\nif (cd.workaroundForIEutf8  = WI_yes) and (length(s) < BAD_IE_THRESHOLD) then exit;\ncd.conn.addHeader('Content-Encoding: gzip');\n//cd.conn.addHeader('Content-Length: '+intToStr(length(s)));\ncd.conn.reply.body:=s;\nend; // compressReply\n\nprocedure TmainFrm.Flagfilesaddedrecently1Click(Sender: TObject);\nresourcestring\n  MSG = 'Enter the number of MINUTES files stay flagged from their addition.'\n    +#13'Leave blank to disable.';\nvar\n  s: string;\nbegin\nif filesStayFlaggedForMinutes <= 0 then s:=''\nelse s:=intToStr(filesStayFlaggedForMinutes);\nif InputQuery('Flag new files', MSG, s) then\n\ttry\n  \ts:=trim(s);\n  \tif s = '' then filesStayFlaggedForMinutes:=0\n    else filesStayFlaggedForMinutes:=strToInt(s);\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nprocedure TmainFrm.Flagasnew1Click(Sender: TObject);\nvar\n  i: integer;\nbegin\nif selectedFile = NIL then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  nodeTofile(filesBox.Selections[i]).atime:=now();\nVFSmodified:=TRUE;\nend;\n\nfunction removeFlagNew(f:Tfile; childrenDone:boolean; par, par2:integer):TfileCallbackReturn;\nbegin\nresult:=[];\nVFSmodified:=TRUE;\nf.atime:=now()-succ(filesStayFlaggedForMinutes)/(24*60)\nend; // removeFlagNew\n\nprocedure TmainFrm.Resetnewflag1Click(Sender: TObject);\nvar\n  i: integer;\nbegin\nif selectedFile = NIL then exit;\nfor i:=0 to filesBox.SelectionCount-1 do\n  nodeTofile(filesBox.Selections[i]).recursiveApply(removeFlagNew);\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.resetOptions1Click(Sender: TObject);\nvar\n  keepAccounts: Taccounts;\nbegin\n(sender as Tmenuitem).enabled:=FALSE;\nrestoreCfgBtn.show();\neventScripts.fullText:='';\nbackuppedCfg:=getCfg();\nkeepAccounts:=accounts;\nsetCfg(defaultCfg);\naccounts:=keepAccounts;\nend;\n\nprocedure Tmainfrm.setStatusBarText(s:string; lastFor:integer);\nbegin\nwith sbar.panels[sbar.panels.count-1] do\n  begin\n  alignment:=taLeftJustify;\n  text:=s;\n  end;\nsbarTextTimeout:=now()+lastFor/SECONDS;\nend;\n\nprocedure TmainFrm.Donate1Click(Sender: TObject);\nbegin openURL('http://www.rejetto.com/hfs-donate') end;\n\nprocedure TmainFrm.Donotlogaddress1Click(Sender: TObject);\nresourcestring\n  MSG = 'Any event from the following IP address mask will be not logged.';\nbegin\ninputQuery('Do not log address', MSG, dontLogAddressMask)\nend;\n\nprocedure TmainFrm.Custom1Click(Sender: TObject);\nresourcestring\n  MSG = 'Specify your addresses, each per line';\nvar\n  s: string;\n  a: TStringDynArray;\nbegin\ns:=join(CRLF, customIPs);\nif not inputQueryLong('Custom IP addresses', MSG, s) then exit;\ncustomIPs:=split(CRLF, s);\nremoveStrings('', customIPs);\n// change the address if it is not available anymore\na:=getPossibleAddresses();\nif assigned(a) and not stringExists(defaultIP, a) then\n  setDefaultIP(a[0]);\nend;\n\nprocedure TmainFrm.Findexternaladdress1Click(Sender: TObject);\nresourcestring\n  MSG = 'Can''t find external address'#13'( %s )';\nvar\n  service: string;\nbegin\n// this is a manual request, try twice\nif not getExternalAddress(externalIP, @service)\nand not getExternalAddress(externalIP, @service) then\n  begin\n  msgDlg(format(MSG, [service]), MB_ICONERROR);\n  exit;\n  end;\nsetDefaultIP(externalIP);\nmsgDlg(externalIP);\nend;\n\nprocedure TmainFrm.sbarDblClick(Sender: TObject);\nvar\n  i: integer;\nbegin\ni:=whatStatusPanel(sbar,sbar.screenToClient(mouse.cursorPos).X);\nif (i = sbarIdxs.totalIn) or (i = sbarIdxs.totalOut) then\n  if msgDlg('Do you want to reset total in/out?', MB_YESNO) = IDYES then\n    begin\n    outTotalOfs:=-srv.bytesSent;\n    inTotalOfs:=-srv.bytesReceived;\n    end;\nif i = sbarIdxs.banStatus then BannedIPaddresses1Click(NIL);\nif i = sbarIdxs.customTpl then Edit1Click(NIL);\nif i = sbarIdxs.oos then Minimumdiskspace1Click(NIL);\nif i = sbarIdxs.out then Speedlimit1Click(NIL);\nif i = sbarIdxs.notSaved then Savefilesystem1Click(NIL); \nend;\n\nprocedure TmainFrm.sbarMouseDown(Sender: TObject; Button: TMouseButton;\n  Shift: TShiftState; X, Y: Integer);\nbegin\n// since right click is not used for now, it will act as double click\nif button = mbRight then\n  sbarDblClick(sender);\nend;\n\nprocedure forceDynDNSupdate(url:string='');\nresourcestring\n  MSG = 'This option makes pointless the option \"Find external address at startup\", which has now been disabled for your convenience.';\nbegin\ndyndns.url:=url;\nif url = '' then exit; \n// this function is called when setting any dyndns service.\n// calling it from somewhere else may make the following test unsuitable\nif mainfrm.findExtOnStartupChk.checked then\n  begin\n  mainfrm.findExtOnStartupChk.checked:=FALSE;\n  msgDlg(MSG, MB_ICONINFORMATION);\n  exit;\n  end;\ndyndns.active:=TRUE;\ndyndns.lastIP:='';\nexternalIP:='';\nend; // forceDynDNSupdate\n\nprocedure TmainFrm.Custom2Click(Sender: TObject);\nresourcestring\n  MSG = 'Enter URL for updating.'\n    +#13'%ip% will be translated to your external IP.';\nvar\n  s: string;\nbegin\ns:=dyndns.url;\nif inputQuery('Enter URL', MSG, s) then\n  if ansiStartsText('https://', s) then\n    msgDlg('Sorry, HTTPS is not supported yet', MB_ICONERROR)\n  else\n    forceDynDNSupdate(s);\nend;\n\nprocedure TmainFrm.Defaultpointtoaddfiles1Click(Sender: TObject);\nbegin\nif selectedFile = NIL then exit;\naddToFolder:=selectedFile.url();\nmsgDlg('Ok');\nend;\n\nfunction dynDNSinputUserPwd():boolean;\nbegin\nresult:=inputQuery('Enter user', 'Enter user', dyndns.user)\n  and (dyndns.user > '')\n  and inputQuery('Enter password', 'Enter password', dyndns.pwd)\n  and (dyndns.pwd > '');\ndyndns.user:=trim(dyndns.user);\ndyndns.pwd:=ifThen(dyndns.user='', '', trim(dyndns.pwd));\nend; // dynDNSinputUserPwd\n\nfunction dynDNSinputHost():boolean;\nbegin\nresult:=FALSE;\nwhile true do\n  begin\n  if not inputQuery('Enter host', 'Enter domain (full form!)', dyndns.host)\n  or (dyndns.host = '') then exit;\n  dyndns.host:=trim(dyndns.host);\n  if pos('://', dyndns.host) > 0 then\n    chop('://', dyndns.host);\n  if pos('.', dyndns.host) > 0 then\n    begin\n    result:=TRUE;\n    exit;\n    end;\n  msgDlg('Please, enter it in the FULL form, with dots', MB_ICONERROR);\n  end;\nend; // dynDNSinputHost\n\nprocedure finalizeDynDNS();\nbegin\naddUniqueString(dyndns.host, customIPs);\nsetDefaultIP(dyndns.host);\nend; // finalizeDynDNS\n\nprocedure TmainFrm.NoIPtemplate1Click(Sender: TObject);\nbegin\nif not dynDNSinputUserPwd() or not dynDNSinputHost() then exit;\nforceDynDNSupdate('http://'+dyndns.user+':'+dyndns.pwd+'@dynupdate.no-ip.com/nic/update?hostname='+dyndns.host);\nfinalizeDynDNS();\nend;\n\nprocedure TmainFrm.CJBtemplate1Click(Sender: TObject);\nbegin\nif not dynDNSinputUserPwd() then exit;\nforceDynDNSupdate('http://www.cjb.net/cgi-bin/dynip.cgi?username='+dyndns.user+'&password='+dyndns.pwd+'&ip=%ip%');\ndyndns.host:=dyndns.user+'.cjb.net';\nfinalizeDynDNS();\nend;\n\nprocedure TmainFrm.DynDNStemplate1Click(Sender: TObject);\nbegin\nif not dynDNSinputUserPwd() or not dynDNSinputHost() then exit;\nforceDynDNSupdate('http://'+dyndns.user+':'+dyndns.pwd+'@members.dyndns.org/nic/update?hostname='+dyndns.host+'&myip=%ip%&wildcard=NOCHG&backmx=NOCHG&mx=NOCHG&system=dyndns');\nfinalizeDynDNS();\nend;\n\nprocedure TmainFrm.Minimumdiskspace1Click(Sender: TObject);\nresourcestring\n  MSG = 'The upload will fail if your disk has less than the specified amount of free MegaBytes.';\nvar\n  s: string;\nbegin\nif minDiskSpace <= 0 then s:=''\nelse s:=intToStr(minDiskSpace);\nif InputQuery('Min disk space', MSG, s) then\n\ttry\n  \ts:=trim(s);\n  \tif s = '' then minDiskSpace:=0\n    else minDiskSpace:=strToInt(s);\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nend;\n\nfunction pointToCharPoint(re:TRichEdit; pt:Tpoint):Tpoint;\nconst\n  EM_EXLINEFROMCHAR = WM_USER+54;\nbegin\nresult.x:=re.perform(EM_CHARFROMPOS, 0, integer(@pt));\nif result.x < 0 then exit;\nresult.y:=re.perform(EM_EXLINEFROMCHAR, 0, result.x);\ndec(result.x, re.perform(EM_LINEINDEX, result.y, 0));\nend; // pointToCharPoint\n\nfunction Tmainfrm.ipPointedInLog():string;\nvar\n  i: integer;\n  s: string;\n  pt: Tpoint;\nbegin\nresult:='';\npt:=pointToCharPoint(logBox, logRightClick);\nif pt.x < 0 then\n  pt:=logbox.caretpos;\nif pt.y >= logbox.lines.count then exit;\ns:=logbox.lines[pt.y];\nif pt.x > length(s) then exit;\ni:=pt.x;\nwhile (i > 1) and (s[i] <> ' ') do dec(i);\ninc(i);\ns:=copy(s,i, posEx(' ',s,i));\ns:=trim(getTill(':',getTill('@',s)));\nif checkAddressSyntax(s,FALSE) then\n  result:=s;\nend; // ipPointedInLog\n\nprocedure TmainFrm.Banthisaddress1Click(Sender: TObject);\nbegin banAddress(ipPointedInLog()); end;\n\nprocedure TmainFrm.Address2name1Click(Sender: TObject);\nbegin showOptions(optionsFrm.a2nPage) end;\n\nprocedure TmainFrm.Addresseseverconnected1Click(Sender: TObject);\nbegin\nif modalOptionsChk.checked then ipsEverFrm.ShowModal()\nelse ipsEverFrm.show()\nend;\n\nprocedure TmainFrm.Renamepartialuploads1Click(Sender: TObject);\nresourcestring\n  MSG = 'This string will be appended to the filename.'\n    +#13\n    +#13'If you need more control, enter a string with %name% in it, and this symbol will be replaced by the original filename.';\nbegin\nInputQuery('Rename partial uploads', MSG, renamePartialUploads)\nend;\n\nprocedure TmainFrm.SelfTest1Click(Sender: TObject);\nresourcestring\n  MSG_BEFORE = 'Here you can test if your server does work on the Internet.'\n    +#13'If you are not interested in serving files over the Internet, this is NOT for you.'\n    +#13\n    +#13'We''ll now perform a test involving network activity.'\n    +#13'In order to complete this test, you may need to allow HFS''s activity in your firewall, by clicking Allow on the warning prompt.'\n    +#13\n    +#13'WARNING: for the duration of the test, all ban rules and limits on the number of connections won''t apply.';\n  MSG_OK = 'The test is successful. The server should be working fine.';\n  MSG_OK_PORT = 'Port %s is not working, but another working port has been found and set: %s.';\n  MSG_3 = 'You may be behind a router or firewall.';\n  MSG_6 = 'You are behind a router.'\n    +#13'Ensure it is configured to forward port %s to your computer.';\n  MSG_7 = 'You may be behind a firewall.'\n    +#13'Ensure nothing is blocking HFS.';\n\n  function doTheTest(host:string; port:string=''):string;\n\n    function findRedirection():boolean;\n    var\n      http: THttpCli;\n    begin\n    result:=FALSE;\n    http:=Thttpcli.create(NIL);\n    try\n      http.url:=host;\n      http.agent:=HFS_HTTP_AGENT;\n      try http.get()\n      except // a redirection will result in an exception\n        if (http.statusCode < 300) or (http.statusCode >= 400) then exit;        \n        result:=TRUE;\n        host:=http.hostname;\n        port:=http.ctrlSocket.Port;\n        end;\n    finally http.free end\n    end;\n\n  var\n    t: Tdatetime;\n    ms: integer;\n    name: string;\n  begin\n  result:='';\n  if progFrm.cancelRequested then exit;\n  { The user may be using the \"port 80 redirect\" service of no-ip, or a similar one.\n  { The redirection service does not support a request containing \"test\" as URL,\n  { considering it malformed (it requires a leading slash).\n  { Thus, we need to find the redirect here (client-side), and then test to see if\n  { the target of the redirection is a working HFS. }\n  if (port = '') and not checkAddressSyntax(host) and noPortInUrlChk.Checked then\n    name:=ifThen(findRedirection(), host);\n  if port = '' then\n    port:=srv.port;\n  if name = '' then\n    name:=host+':'+port;\n  progFrm.show('Testing '+name+' ...', TRUE);\n  if not srv.active and not startServer() then exit;\n  // we many need to try this specific test more than once\n    repeat\n    t:=now();\n    try result:=httpGet(SELF_TEST_URL+'?port='+port+'&host='+host+'&natted='+YESNO[localIPlist.IndexOf(externalIP)<0] )\n    except break end;\n    t:=now()-t;\n    if (result ='') or (result[1] <> '4') or progFrm.cancelRequested then break;\n    ms:=3100-round(t*SECONDS*1000); // we mean to never query faster than 1/3s\n    if ms > 0 then\n      sleep(ms);\n    until progFrm.cancelRequested;\n  end; // doTheTest\n\n  function successful(s:string):boolean;\n  begin result:=(s > '') and (s[1] = '1') end;\n\nvar\n  best: record host, res: string; end;\n\n  procedure tryDifferentHosts();\n  var\n    i: integer;\n    tries: TStringDynArray;\n    s: string;\n  begin\n  if externalIP = '' then\n    begin\n    progFrm.show('Retrieving external address...');\n    getExternalAddress(externalIP);\n    end;\n  tries:=getPossibleAddresses();\n  // ensure defaultIP is the first one\n  insertString(defaultIP, 0, tries);\n  uniqueStrings(tries);\n\n  best.res:='';\n  for i:=0 to length(tries)-1 do\n    begin\n    if isLocalIP(tries[i]) then continue;\n\n    progFrm.progress:=succ(i)/succ(length(tries));\n    s:=doTheTest(tries[i]);\n    // we want a digit\n    if (s='') or not charInSet(s[1],['0'..'9']) then continue;\n    // we want a better one (lower)\n    if (best.res > '') and (best.res[1] <= s[1]) then continue;\n    // we consider this to be better, record it\n    best.res:=s;\n    best.host:=tries[i];\n    if successful(s) then break;\n    end;\n  end; // tryDifferentHosts\n\n  procedure tryDifferentPorts();\n  var\n    i: integer;\n    tries: TStringDynArray;\n    bak: record\n      port: string;\n      active: boolean;\n      end;\n    ip, s: string;\n  begin\n  ip:=defaultIP;\n  if isLocalIP(ip) then\n    ip:=externalIP;\n  if (ip='') or isLocalIP(ip) then\n    exit;\n  // build list of ports we'll test\n  tries:=toSA(['80','8123']);\n  removeString(srv.port, tries); // already tested\n\n  bak.active:=srv.active;\n  bak.port:=port;\n  for i:=0 to length(tries)-1 do\n    begin\n    progFrm.progress:=succ(i)/succ(length(tries));\n    port:=tries[i];\n    stopServer();\n    if not startServer() then continue;\n    s:=doTheTest(ip);\n    if successful(s) then break;\n    end;\n  if successful(s) and (best.res = '') then\n    begin\n    best.res:=s;\n    best.host:=defaultIP;\n    end\n  else\n    begin\n    port:=bak.port;\n    stopServer();\n    if bak.active then startServer();\n    end;\n  end; // tryDifferentPorts\n\nvar\n  originalPort, s: string;\nbegin\nif msgDlg(MSG_BEFORE, MB_ICONWARNING+MB_OKCANCEL) <> IDOK then exit;\n\noriginalPort:=port;\n\nif not srv.active and not startServer() then\n  begin\n  port:='';\n  if not startServer() then\n    begin\n    msgDlg('Unable to switch the server on', MB_ICONERROR);\n    exit;\n    end;\n  end;\n\nif listenOn = '127.0.0.1' then\n  begin\n  msgDlg('Self test cannot be performed because HFS was configured to accept connections only on 127.0.0.1', MB_ICONERROR);\n  exit;\n  end;\n\nif httpsUrlsChk.checked then\n  msgDlg('Self test doesn''t support HTTPS.'#13'It''s likely it won''t work.', MB_ICONWARNING);\n\ndisableUserInteraction();\nprogFrm.show('Self testing...');\nselfTesting:=TRUE;\ntry\n  best.res:='';\n  progFrm.push(0.5);\n  tryDifferentHosts();\n  progFrm.pop();\n\n  progFrm.push(0.4);\n  if not successful(best.res) then\n    tryDifferentPorts();\n  progFrm.pop();\n\n  s:=best.res;\n  if successful(s) then\n    begin\n    progFrm.progress:=1;\n    if (originalPort = '') or (originalPort = port) then\n      msgDlg(MSG_OK)\n    else\n      msgDlg(format(MSG_OK_PORT, [originalPort, port]));\n    if best.host <> defaultIP then setDefaultIP(best.host);\n    exit;\n    end\n  else\n\n\n  if progFrm.cancelRequested then\n    begin\n    msgDlg('Test cancelled');\n    exit;\n    end;\n\n  // error\n  if s = '' then\n    try\n      progFrm.show('Testing internet connection...');\n      httpGet(ALWAYS_ON_WEB_SERVER);\n      s:='Sorry, the test is unavailable at the moment';\n    except s:='Your internet connection does not work' end\n  else\n    begin\n    case s[1] of\n      '3': s:=MSG_3;\n      '6': s:=format(MSG_6, [first(port,'80')]);\n      '7': s:=MSG_7;\n      end;\n    s:='The test failed: server does not answer.'#13#13+s;\n    end;\n  msgDlg(s, MB_ICONERROR);\n\nfinally\n  selfTesting:=FALSE;\n  reenableUserInteraction();\n  progFrm.hide();\n  end;\nend;\n\nprocedure TmainFrm.Opendirectlyinbrowser1Click(Sender: TObject);\nresourcestring\n  MSG = '\"Suggest\" the browser to open directly the specified files.'\n    +#13'Other files should pop up a save dialog.';\nbegin\nInputQuery('Open directly in browser', MSG, openInBrowser)\nend;\n\nprocedure TmainFrm.noPortInUrlChkClick(Sender: TObject);\nresourcestring\n  MSG = 'You should not use this option unless you really know its meaning.'\n    +#13'Continue?';\nbegin\nif noPortInUrlChk.Checked and (msgDlg(MSG, MB_YESNO) = ID_YES) then\n  mainfrm.updateUrlBox()\nelse\n  noPortInUrlChk.Checked:=FALSE;\nend;\n\nfunction getTplEditor():string;\nbegin\nresult:=first([\n  if_(fileExists(tplEditor), nonEmptyConcat('\"', tplEditor, '\"')),\n  loadregistry('SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\notepad++.exe', '', HKEY_LOCAL_MACHINE),\n  'notepad.exe'\n])\nend;\n\nprocedure TmainFrm.Edit1Click(Sender: TObject);\nbegin\nif not fileExists(tplFilename) then\n  begin\n  tplFilename:=TPL_FILE;\n  saveTextFile(tplFilename, defaultTpl);\n  end;\nexec(getTplEditor(), '\"'+tplFilename+'\"');\nend;\n\nprocedure TmainFrm.Editeventscripts1Click(Sender: TObject);\nresourcestring\n  HELP = 'For help on how to use this file please refer http://www.rejetto.com/wiki/?title=HFS:_Event_scripts';\nvar\n  fn: string;\nbegin\nfn:=cfgPath+EVENTSCRIPTS_FILE;\nif not fileExists(fn) then\n  saveTextFile(fn, HELP);\nexec(getTplEditor(), '\"'+fn+'\"');\nend;\n\nprocedure TmainFrm.Editresource1Click(Sender: TObject);\nresourcestring\n  CAPTION = 'Edit resource';\nvar\n  oldRes, oldName, res: string;\n  done, nameSync: boolean;\nbegin\nif (selectedFile = NIL) or (FA_VIRTUAL in selectedFile.flags) then exit;\nres:=selectedFile.resource;\noldRes:=res;\noldName:=selectedFile.name;\n// name sync, only if the name was not customized\nnameSync:= selectedFile.name = ExtractFileName(selectedFile.resource);\nif selectedFile.isFolder then done:=selectFolder(CAPTION, res)\nelse done:=PromptForFileName(res, '', '', CAPTION);\nif done then VFSmodified:=TRUE;\nselectedFile.setResource(res);\nif not nameSync then selectedFile.setName(oldName);\nselectedFile.setupImage();\nend;\n\nprocedure TmainFrm.enableMacrosChkClick(Sender: TObject);\nresourcestring\n  MSG = 'The current template is using macros.'\n    +#13'Do you want to cancel this action?';\nbegin\nif anyMacroMarkerIn(tpl.fullText) and not enableMacrosChk.Checked then\n  enableMacrosChk.Checked:=msgDlg(MSG, MB_ICONWARNING+MB_YESNO) = MRYES;\nend;\n\nprocedure TmainFrm.modeBtnClick(Sender: TObject);\nbegin setEasyMode(not easyMode) end;\n\nprocedure TmainFrm.Shellcontextmenu1Click(Sender: TObject);\nbegin\nif isIntegratedInShell() then disintegrateShell()\nelse if integrateInShell() then msgDlg(MSG_ADD_TO_HFS)\nelse msgDlg(MSG_ERROR_REGISTRY, MB_ICONERROR);\nend;\n\nprocedure TmainFrm.menuBtnClick(Sender: TObject);\nbegin popupMainMenu() end;\n\nvar\n  bakShellMenuText: string;\nprocedure TmainFrm.menuPopup(Sender: TObject);\nresourcestring\n  REMOVE_SHELL = 'Remove from shell context menu';\n  S_OFF = 'Switch OFF';\n  S_ON = 'Switch ON';\n  LOG = 'Log';\n\n  procedure showSetting(mi:Tmenuitem; v:integer; unit_:string); overload;\n  begin mi.caption:=getTill('...', mi.caption, TRUE)+if_(v>0, format('       (%d %s)', [v, unit_])) end;\n\nvar\n  i: integer;\nbegin\nif quitting then exit; // here we access some objects like srv that may not be ready anymore\n\nrefreshIPlist();\nfor i:=1 to Fingerprints1.Count-1 do\n  Fingerprints1.items[i].Enabled:=fingerprintsChk.checked;\n\nlogmenu.items.caption:=LOG;\nif menu.items.find(logmenu.items.caption) = NIL then\n  menu.items.insert(7,logmenu.items);\n\nSwitchON1.imageIndex:=if_(srv.active, 11, 4);\nSwitchON1.caption:=if_(srv.active, S_OFF, S_ON);\n\nAppendmacroslog1.Enabled:=macrosLogChk.checked;\nstopSpidersChk.Enabled:=not fileExistsByURL('/robots.txt');\nShowbandwidthgraph1.visible:=not graphBox.visible;\nif bakShellMenuText='' then\n  bakShellMenuText:=Shellcontextmenu1.Caption;\nShellcontextmenu1.Caption:=if_(isIntegratedInShell(), REMOVE_SHELL, bakShellMenuText);\nshowSetting(mainFrm.Connectionsinactivitytimeout1, connectionsInactivityTimeout, 'seconds');\nshowSetting(mainFrm.Minimumdiskspace1, minDiskSpace, 'MB');\nshowSetting(mainFrm.Flagfilesaddedrecently1, filesStayFlaggedForMinutes, 'minutes');\nRestore1.visible:=trayed;\nRestoredefault1.Enabled:=tplIsCustomized;\nNumberofcurrentconnections1.Checked:= trayShows='connections';\nNumberofloggedhits1.checked:= trayShows='hits';\nNumberofloggeddownloads1.checked:= trayShows='downloads';\nNumberofloggeduploads1.Checked:= trayShows='uploads';\nNumberofdifferentIPaddresses1.Checked:= trayShows='ips';\nNumberofdifferentIPaddresseseverconnected1.Checked:= trayShows='ips-ever';\nondownloadChk.checked:= flashOn='download';\nonconnectionChk.checked:= flashOn='connection';\nnever1.checked:= flashOn='';\ndefaultToVirtualChk.Checked:= addFolderDefault='virtual';\ndefaultToRealChk.Checked:= addFolderDefault='real';\naskFolderKindChk.Checked:= addFolderDefault='';\nname1.Checked:= TRUE;\ntime1.Checked:= defSorting='time';\nsize1.checked:= defSorting='size';\nhits1.Checked:= defSorting='hits';\nExtension1.Checked:= defSorting='ext';\nRenamepartialuploads1.Enabled:=not deletePartialUploadsChk.checked;\nSeelastserverresponse1.visible:= dyndns.lastResult>'';\nDisable1.visible:= dyndns.url>'';\ntry RunHFSwhenWindowsstarts1.checked:= paramStr(0) = readShellLink(startupFilename)\nexcept RunHFSwhenWindowsstarts1.checked:= FALSE end;\n// point out where the options will automatically be saved\ntofile1.Default:= saveMode=SM_FILE;\ntoregistrycurrentuser1.default:= saveMode=SM_USER;\ntoregistryallusers1.Default:= saveMode=SM_SYSTEM;\n\nReverttopreviousversion1.Visible:=fileExists(exePath+PREVIOUS_VERSION);\nSaveoptions1.visible:=not easyMode;\ntesterUpdatesChk.visible:=not easyMode;\npreventStandbyChk.visible:=not easyMode;\nsearchbetteripChk.visible:=not easyMode;\nAddfiles2.visible:=easyMode;\nAddfolder2.visible:=easyMode;\nfreeLoginChk.visible:=not easyMode;\nSpeedlimitforsingleaddress1.visible:=not easyMode;\nquitWithoutAskingToSaveChk.visible:=not easyMode;\nbackupSavingChk.visible:=not easyMode;\nDefaultsorting1.visible:=not easyMode;\nsendHFSidentifierChk.visible:=not easyMode;\nURLencoding1.visible:=not easyMode;\npersistentconnectionsChk.visible:=not easyMode;\nDMbrowserTplChk.visible:=not easyMode;\nMIMEtypes1.visible:=not easyMode;\ncompressedbrowsingChk.visible:=not easyMode;\nmodalOptionsChk.visible:=not easyMode;\nAllowedreferer1.visible:=not easyMode;\nFingerprints1.visible:=not easyMode;\nfindExtOnStartupChk.visible:=not easyMode;\nlistfileswithsystemattributeChk.visible:=not easyMode;\nCustom1.visible:=not easyMode;\nnoPortInUrlChk.visible:=not easyMode;\nDynamicDNSupdater1.visible:=not easyMode;\nonly1instanceChk.visible:=not easyMode;\nFlashtaskbutton1.visible:=not easyMode;\nHintsfornewcomersChk.visible:=not easyMode;\nGraphrefreshrate1.visible:=not easyMode;\nfoldersbeforeChk.visible:=not easyMode;\nlistfileswithhiddenattributeChk.visible:=not easyMode;\nsaveTotalsChk.visible:=not easyMode;\ntrayfordownloadChk.visible:=not easyMode;\nAccounts1.visible:=not easyMode;\nVirtualFileSystem1.visible:=not easyMode;\nPausestreaming1.visible:=not easyMode;\nMaxconnections1.visible:=not easyMode;\nMaxconnectionsfromsingleaddress1.visible:=not easyMode;\nmaxIPsDLing1.visible:=not easyMode;\nmaxIPs1.visible:=not easyMode;\nMaxDLsIP1.visible:=not easyMode;\nConnectionsinactivitytimeout1.visible:=not easyMode;\nminimumDiskSpace1.visible:=not easyMode;\nHTMLtemplate1.visible:=not easyMode;\nshellcontextmenu1.visible:=not easyMode;\nuseCommentAsRealmChk.visible:=not easyMode;\nopenDirectlyInBrowser1.visible:=not easyMode;\nkeepBakUpdatingChk.visible:=not easyMode;\nloginRealm1.visible:=not easyMode;\nDumprequestsChk.visible:=not easyMode;\nlogBytesreceivedChk.visible:=not easyMode;\nlogBytessentChk.visible:=not easyMode;\nlogconnectionsChk.visible:=not easyMode;\nlogDisconnectionsChk.visible:=not easyMode;\nautoCommentChk.visible:=not easyMode;\ntraymessage1.visible:=not easyMode;\nshowmaintrayiconChk.visible:=not easyMode;\nnumberOfLoggedHits1.visible:=not easyMode;\nShowcustomizedoptions1.visible:=not easyMode;\nenableNoDefaultChk.visible:=not easyMode;\nbrowseUsingLocalhostChk.visible:=not easyMode;\nuseISOdateChk.visible:=not easyMode;\nAddicons1.visible:=not easyMode;\nAcceptconnectionson1.visible:=not easyMode;\nnumberFilesOnUploadChk.visible:=not easyMode;\nRenamepartialuploads1.visible:=not easyMode;\ndeletePartialUploadsChk.visible:=not easyMode;\nupdateAutomaticallyChk.visible:=not easyMode;\nstopSpidersChk.visible:=not easyMode;\nlinksBeforeChk.visible:=not easyMode;\nDebug1.visible:=not easyMode;\ndelayUpdateChk.visible:=not easyMode;\nend;\n\nfunction paramsAsArray():TStringDynArray;\nvar\n  i: integer;\nbegin\ni:=paramCount();\nsetlength(result, i+2);\nresult[0]:=monoLib.initialPath;\nfor i:=0 to i do result[i+1]:=paramStr(i);\nend; // paramsAsArray\n\nfunction Tmainfrm.finalInit():boolean;\n\n  function getBrowserPath():string;\n  var\n    i: integer;\n  begin\n  result:=loadRegistry('HTTP\\shell\\open\\command', '', HKEY_CLASSES_ROOT);\n  if result = '' then exit;\n  i:=nonQuotedPos(' ', result);\n  if i > 0 then\n    delete(result, i, MAXINT);\n  result:=dequote(result);\n  end; // getBrowserPath\n\n  procedure fixAddToHFS();\n  var\n    should: string;\n\n    procedure fix(kind:string);\n    var\n      s: string;\n    begin\n    s:=loadregistry(kind+'\\shell\\Add to HFS\\command', '', HKEY_CLASSES_ROOT);\n    if (s > '') and (s <> should) then\n      saveRegistry(kind+'\\shell\\Add to HFS\\command','', should, HKEY_CLASSES_ROOT);\n    end;\n\n  begin\n  should:='\"'+expandFileName(paramstr(0))+'\" \"%1\"';\n  fix('*');\n  fix('Folder');\n  end; // fixAddToHFS\n\n  function loadAndApplycfg():boolean;\n  resourcestring\n    MSG = 'You are invited to re-insert your No-IP configuration, otherwise the updater won''t work as expected.';\n  var\n    iniS, tplS: string;\n  begin\n  loadCfg(iniS, tplS);\n  result:=setcfg(iniS, FALSE);\n  // convert old no-ip template url to new one (build#204)\n  if dyndns.active and ansiContainsText(dyndns.url, 'no-ip.com') and not ansiContainsText(dyndns.url, 'nic/update')\n  and (msgDlg(MSG, MB_OKCANCEL+MB_ICONWARNING) = MROK) then\n      NoIPtemplate1Click(NIL);\n  if (tplS > '') and assigned(tpl) then setTplText(tplS);\n  if lastUpdateCheck = 0 then\n    lastUpdateCheck:=getMtime(lastUpdateCheckFN);\n  end; // loadAndApplycfg\n\n  procedure strToConnColumns(l:string);\n  var\n    s, labl: string;\n    i: integer;\n  begin\n  while l > '' do\n    with connBox.columns do\n      begin\n      s:=chop('|',l);\n      if s = '' then continue;\n      labl:=chop(';',s);\n      for i:=0 to count-1 do\n        with items[i] do\n          if caption = labl then\n            begin\n            width:=strToIntDef(s, width);\n            break;\n            end;\n      end;\n  end; // strToConnColumns\n\nvar\n  cfgLoaded: boolean;\n  params: TStringDynArray;\nbegin\nresult:=FALSE;\n\n{ it would be nice, but this is screwing our layouts. so for now we'll just stay with the main window.\nfor i:=0 to application.componentCount-1 do\n  if application.components[i] is Tform then\n    fixFontFor(application.components[i] as Tform);\n}\nfixFontFor(mainFrm);\nsbar.canvas.font.assign(sbar.font); // this is just a workaround, i don't exactly understand the need of it.\n\n// some windows versions do not support multiline tray tips\nif winVersion < WV_2000 then trayNL:='  ';\n\ntrayMsg:='%ip%'\n  +trayNL+'Uptime: %uptime%'\n  +trayNL+'Downloads: %downloads%';\n\nstartingImagesCount:=mainfrm.images.count;\nsrv:=ThttpSrv.create();\nsrv.autoFreeDisconnectedClients:=FALSE;\nsrv.limiters.add(globalLimiter);\nsrv.onEvent:=httpEvent;\ntray_ico:=Ticon.create();\ntray:=TmyTrayicon.create(self);\nDragAcceptFiles(handle, true);\ncaption:=format('HFS ~ HTTP File Server %s%sBuild %s',\n  [VERSION, stringOfChar(' ',80), VERSION_BUILD]);\napplication.Title:=format('HFS %s (%s)', [VERSION, VERSION_BUILD]);\nsetSpeedLimit(-1);\nsetSpeedLimitIP(-1);\nsetGraphRate(10);\nsetMaxConnections(0);\nsetMaxConnectionsIP(0);\nsetMaxDLs(0);\nsetMaxDLsIP(0);\nsetMaxIPs(0);\nsetMaxIPsDLing(0);\nsetnoDownloadTimeout(0);\nsetAutosave(autosaveVFS, 0);\nsetAutoFingerprint(0);\nsetLogToolbar(FALSE);\n\nautosaveVFS.minimum:=5;\nautosaveVFS.menu:=autosaveevery1;\n\nparams:=paramsAsArray();\nprocessParams_before(params, 'i');\n\ninitVFS();\nsetFilesBoxExtras(winVersion <> WV_VISTA);\n\ndefaultCfg:=replaceText(getCfg(), 'active=no', 'active=yes');\n\nloadEvents();\ncfgLoaded:=FALSE;\n// if SHIFT is pressed skip configuration loading\nif not holdingKey(VK_SHIFT) then\n  cfgLoaded:=loadAndApplyCFG()\nelse\n  setStatusBarText('Clean start');\n\n// CTRL avoids the only1instance setting\nif not holdingKey(VK_CONTROL)\nand only1instanceChk.checked and not mono.master then\n  begin\n  result:=FALSE;\n  quitASAP:=TRUE;\n  end;\n\nif not cfgLoaded then\n  setTplText(defaultTpl);\n  \nprocessParams_before(params);\n\nif not quitASAP then\n  begin\n\n  if not cfgLoaded then\n    begin\n    startServer();\n    if not isIntegratedInShell() then\n      with TshellExtFrm.create(mainfrm) do\n        try\n          if showModal() = mrYes then\n            if not integrateInShell() then\n              msgDlg(MSG_ERROR_REGISTRY, MB_ICONERROR);\n        finally free end;\n    end;\n\n  if findExtOnStartupChk.checked and getExternalAddress(externalIP) then\n    setDefaultIP(externalIP);\n\n  end;\n\n// no address set or not available anymore\nif not stringExists(defaultIP, getPossibleAddresses()) then\n  setDefaultIP(getIP());\n\nprogFrm:=TprogressForm.create();\nprogFrm.preventBackward:=TRUE;\nupdateUrlBox();\napplication.HintPause:=100;\nsplitV.AutoSnap:=FALSE;\nsplitV.AutoSnap:=TRUE;\nsplitV.update();\ngraph.size:=graphBox.height;\nif not quitASAP then\n  begin\n  if autocopyURLonStartChk.Checked then\n    setClip( rootFile.fullURL() );\n\n\n  if reloadonstartupChk.checked then\n    if not fileExists(lastFileOpen) and not fileExists(lastFileOpen+BAK_EXT) then\n      lastFileOpen:='';\n\n  if getMtime(VFS_TEMP_FILE) > getMtime(lastFileOpen) then\n    if msgDlg('A file system backup has been created for a system shutdown.'#13'Do you want to restore this backup?', MB_YESNO+MB_ICONWARNING) = MRYES then\n      begin\n      deleteFile(lastFileOpen+BAK_EXT);\n      if renameFile(lastFileOpen, lastFileOpen+BAK_EXT) then\n        renameFile(VFS_TEMP_FILE, lastFileOpen)\n      else\n        lastFileOpen:=VFS_TEMP_FILE\n      end;\n\n  loadVFS(lastFileOpen);\n  end;\nprocessParams_after(params);\n\nif not quitASAP then\n  begin\n  if not cfgLoaded then\n    setEasyMode(easyMode);\n  tray.setIcon(tray_ico);\n  tray.onEvent:=trayEvent;\n  if showmaintrayiconChk.checked then addTray();\n  end;\ntimer.Enabled:=TRUE;\napplicationFullyInitialized:=TRUE;\nif quitASAP then\n  begin\n  application.showmainform:=FALSE;\n  close();\n  exit;\n  end;\n\nshow();\nstrToConnColumns(serializedConnColumns);\nif startminimizedChk.checked then application.Minimize();\nif findExtOnStartupChk.checked and (externalIP = '') then\n  setStatusBarText('Search for external address failed', 30);\nupdatePortBtn();\nfixAddToHFS();\nfilesBox.setFocus();\n//loadEvents();\nformResize(NIL); // recalculate to solve graphical glitches\n\nif not tplIsCustomized then\n  runTplImport();\n\nrunEventScript('start');\n{** trying to move loadEvents() before loadCfg()\nif srv.active then\n  runEventScript('server start'); // because this event wouldn't fire at start, the server was already on\n}\nend; // finalInit\n\nfunction expertModeNeededMsg():string;\nbegin result:=if_(easyMode, 'Switch to expert mode.') end;\n\nprocedure TmainFrm.Dontlogsomefiles1Click(Sender: TObject);\nbegin\nmsgDlg(expertModeNeededMsg()\n  +#13'Select the files/folder you don''t want to be logged,'\n  +#13'then right click and select \"Don''t log\".');\nend;\n\nprocedure TmainFrm.progFrmHttpGetUpdate(sender:Tobject; buffer:pointer; len:integer);\nbegin\nwith sender as ThttpCli do\n  begin\n  progFrm.progress:=safeDiv(0.0+RcvdCount, contentLength);\n  if progFrm.cancelRequested then abort();\n  end;\nend; // progFrmHttpGetUpdate\n\nfunction purgeFilesCB(f:Tfile; childrenDone:boolean; par, par2:integer):TfileCallbackReturn;\nbegin\nresult:=[];\nif f.locked or f.isRoot() then exit;\nresult:=[FCB_RECALL_AFTER_CHILDREN];\nif f.isFile() and purgeFrm.rmFilesChk.checked and not fileExists(f.resource)\nor f.isRealFolder() and purgeFrm.rmRealFoldersChk.checked and not sysutils.directoryExists(f.resource)\nor f.isVirtualFolder() and purgeFrm.rmEmptyFoldersChk.checked and (f.node.count = 0)\nthen result:=[FCB_DELETE]; // don't dig further\nend; // purgeFilesCB\n\nprocedure TmainFrm.Properties1Click(Sender: TObject);\nbegin\nif selectedFile = NIL then exit;                                                                           \n\nfilepropFrm:=TfilepropFrm.Create(mainFrm);\ntry\n  if filepropFrm.showModal() = mrCancel then exit;\nfinally freeAndNIL(filepropFrm) end;\nVFSmodified:=TRUE;\nfilesBox.invalidate();\nend;\n\nprocedure TmainFrm.Purge1Click(Sender: TObject);\nvar\n  f: Tfile;\nbegin\nf:=selectedFile;\nif f = NIL then f:=rootFile;\nif purgeFrm = NIL then\n  application.CreateForm(TpurgeFrm, purgeFrm);\nif purgeFrm.showModal() <> mrOk then exit;\nf.recursiveApply(purgeFilesCB);\nend;\n\nprocedure TmainFrm.UninstallHFS1Click(Sender: TObject);\nbegin\nif checkMultiInstance() then exit;\nif msgDlg('Delete HFS and all settings?', MB_ICONQUESTION+MB_YESNO) <> IDYES then\n  exit;\nuninstall();\nend;\n\nprocedure TmainFrm.maxIPs1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous addresses.';\n  MSG2 = 'In this moment there are %d different addresses';\nvar\n  s: string;\n  i: integer;\nbegin\nif maxIPs > 0 then s:=intToStr(maxIPs)\nelse s:='';\nif inputquery('Max addresses', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxIPs(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxIPs = 0 then exit;\ni:=countIPs();\nif i > maxIPs then\n  msgDlg(format(MSG2, [i]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.maxIPsDLing1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max simultaneous addresses downloading.';\n  MSG2 = 'In this moment there are %d different addresses downloading';\nvar\n  s: string;\n  i: integer;\nbegin\nif maxIPsDLing > 0 then s:=intToStr(maxIPsDLing)\nelse s:='';\nif inputquery('Max addresses downloading', MSG+#13+MSG_EMPTY_NO_LIMIT, s) then\n\ttry setMaxIPsDLing(strToUInt(s))\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR)\n  end;\nif maxIPsDLing = 0 then exit;\ni:=countIPs(TRUE);\nif i > maxIPsDLing then\n  msgDlg(format(MSG2, [i]), MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.Maxlinesonscreen1Click(Sender: TObject);\nresourcestring\n  MSG = 'Max lines on screen';\nvar\n  s: string;\nbegin\ns:=if_(logMaxLines > 0, intToStr(logMaxLines));\n  repeat\n  if not inputQuery(MSG, MSG+'.'#13+MSG_EMPTY_NO_LIMIT, s) then break;\n  try\n    logMaxLines:=strToUInt(s);\n    break;\n  except msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\n  until false;\nend;\n\nprocedure TmainFrm.Autosaveevery1Click(Sender: TObject);\nbegin autosaveClick(autosaveVFS, 'file system') end;\n\nprocedure TmainFrm.Apachelogfileformat1Click(Sender: TObject);\nresourcestring\n  MSG = 'Here you can specify how to format the log file complying Apache standard.'\n    +#13'Leave blank to get bare copy of screen on file.'\n    +#13\n    +#13'Example:'\n    +#13'   %h %l %u %t \"%r\" %>s %b';\nbegin\nInputQuery('Apache log file format', MSG, logFile.apacheFormat)\nend;\n\nprocedure TmainFrm.Bindroottorealfolder1Click(Sender: TObject);\nvar\n  f: Tfile;\n  res: string;\nbegin\nf:=selectedFile;\nif (f = NIL) or not f.isVirtualFolder() or not f.isRoot() then exit;\nres:=exePath;\nif not selectFolder('', res) then exit;\nf.setResource(res);\nexclude(f.flags, FA_VIRTUAL);\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.Unbindroot1Click(Sender: TObject);\nvar\n  f: Tfile;\nbegin\nf:=selectedFile;\nif (f = NIL) or not f.isRealFolder() or not f.isRoot() then exit;\nf.setResource('');\nf.uploadFilterMask:='';\nf.accounts[FA_UPLOAD]:=NIL;\ninclude(f.flags, FA_VIRTUAL);\nVFSmodified:=TRUE;\nend;\n\nprocedure TmainFrm.SwitchON1Click(Sender: TObject);\nbegin toggleServer() end;\n\nprocedure TmainFrm.Switchtorealfolder1Click(Sender: TObject);\nvar\n  i: integer;\n  someLocked: boolean;\n  list: TtreeNodeDynArray;\nbegin\nif selectedFile = NIL then exit;\nsomeLocked:=FALSE;\nlist:=copySelection();\nfor i:=0 to length(list)-1 do\n  if assigned(list[i]) then\n    with nodeTofile(list[i]) do\n      if isVirtualFolder() and not isRoot() and (resource > '') then\n        if isLocked() then someLocked:=TRUE\n        else\n          begin\n          exclude(flags, FA_VIRTUAL);\n          setResource(resource);\n          setupImage();\n          setNilChildrenFrom(list, i);\n          node.DeleteChildren();\n          end;\nVFSmodified:=TRUE;\nif someLocked then msgDlg(MSG_SOME_LOCKED, MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.abortBtnClick(Sender: TObject);\nbegin stopAddingItems:=TRUE end;\n\nprocedure TmainFrm.Seelastserverresponse1Click(Sender: TObject);\nvar\n  fn: string;\nbegin\nif ipos('<html>', dyndns.lastResult) = 0 then\n  begin\n  msgDlg(dyndns.lastResult);\n  exit;\n  end;\nfn:=saveTempFile(dyndns.lastResult);\nif fn = '' then\n  begin\n  msgDlg(MSG_NO_TEMP, MB_ICONERROR);\n  exit;\n  end;\nrenameFile(fn, fn+'.html');\nexec(fn+'.html');\nend;\n\nprocedure TmainFrm.Showcustomizedoptions1Click(Sender: TObject);\nvar\n  default: TStrings;\n  current, defV, v, k: string;\n  diff: string;\nbegin\ndefault:=TStringList.create();\ndefault.text:=defaultCfg;\ncurrent:=getCfg();\ndiff:='# '+VERSION+' (build '+VERSION_BUILD+')'+CRLF;\n\nwhile current > '' do\n  begin\n  v:=chopLine(current);\n  k:=chop('=', v);\n  if ansiEndsStr('-width', k) or ansiEndsStr('-height', k)\n  or stringExists(k, ['active','window','graph-visible','graph-size','ip', 'accounts',\n    'dynamic-dns-user', 'dynamic-dns-host', 'ips-ever', 'ips-ever-connected',\n    'icon-masks-user-images', 'last-external-address', 'last-dialog-folder'])\n  then continue;\n  \n  defV:=default.values[k];\n  if defV = v then continue;\n  if k = 'dynamic-dns-updater' then\n    begin // remove login data\n    v:=decodeB64utf8(ansistring(v));\n    chop('//',v);\n    v:=chop('/',v);\n    if ansiContainsStr(v, '@') then chop('@',v);\n    v:='...'+v+'...';\n    end;\n  diff:=diff+k+'='+v+CRLF+'# default: '+defV+CRLF+CRLF;\n  end;\ndefault.free;\n\ndiffFrm.memoBox.text:=diff;\ndiffFrm.showModal();\nend;\n\nprocedure TmainFrm.useISOdateChkClick(Sender: TObject);\nbegin applyISOdateFormat() end;\n\nprocedure TmainFrm.RunHFSwhenWindowsstarts1Click(Sender: TObject);\nbegin\ndeleteFile(startupFilename); // we delete both for deactivation (of course) and before activation (to purge possible existing links to other exe files)\nif not (sender as Tmenuitem).Checked then\n  createShellLink(startupFilename, paramStr(0));\nend;\n\nprocedure TmainFrm.Runscript1Click(Sender: TObject);\nbegin\nif not fileExists(tempScriptFilename) then\n  saveTextFile(tempScriptFilename, '');\nrunScriptLast:=getMtime(tempScriptFilename);\nif runScriptFrm = NIL then\n  runScriptFrm:=TrunScriptFrm.create(self);\nrunScriptFrm.show();\nexec(getTplEditor(), '\"'+tempScriptFilename+'\"');\nend;\n\nprocedure TmainFrm.minimizeToTray();\nbegin\napplication.Minimize();\naddTray();\nshowWindow(application.handle, SW_HIDE); // hide taskbar button\ntrayed:=TRUE;\nend; // minimizeToTray\n\nprocedure TmainFrm.askFolderKindChkClick(Sender: TObject);\nbegin addFolderDefault:='' end;\n\nprocedure TmainFrm.defaultToVirtualChkClick(Sender: TObject);\nbegin addFolderDefault:='virtual' end;\n\nprocedure TmainFrm.defaultToRealChkClick(Sender: TObject);\nbegin addFolderDefault:='real' end;\n\nprocedure TmainFrm.Addicons1Click(Sender: TObject);\nvar\n  files: TStringDynArray;\n  i, n: integer;\nbegin\nif not selectFiles('', files) then exit;\nn:=images.Count;\nfor i:=0 to length(files)-1 do\n  getImageIndexForFile(files[i]);\nn:=images.Count-n;\nmsgDlg(format('%d new icons added',[n]));\nend;\n\nprocedure TmainFrm.Iconmasks1Click(Sender: TObject);\nbegin showOptions(optionsFrm.iconsPage) end;\n\nprocedure TmainFrm.Anyaddress1Click(Sender: TObject);\nbegin\nlistenOn:='';\nrestartServer();\nend;\n\nprocedure Tmainfrm.acceptOnMenuclick(sender:Tobject);\nbegin\nlistenOn:=(sender as Tmenuitem).caption;\ndelete(listenOn, pos('&',listenOn), 1);\nrestartServer();\nend; // acceptOnMenuclick\n\nprocedure TmainFrm.filesBoxEndDrag(Sender, Target: TObject; X, Y: Integer);\nbegin\nscrollFilesBox:=-1;\nfilesBox.Refresh();\nend;\n\nprocedure TmainFrm.filesBoxEnter(Sender: TObject);\nbegin setFilesBoxExtras(TRUE) end;\n\nprocedure TmainFrm.filesBoxExit(Sender: TObject);\nbegin setFilesBoxExtras(filesBox.MouseInClient) end;\n\nprocedure TmainFrm.Disable1Click(Sender: TObject);\nbegin\ndyndns.url:='';\nmsgDlg('Dynamic DNS updater disabled');\nend;\n\nprocedure TmainFrm.saveNewFingerprintsChkClick(Sender: TObject);\nresourcestring\n  MSG = 'This option creates an .md5 file for every new calculated fingerprint.'\n    +#13'Use with care to get not your disk invaded by these files.';\nbegin\nif saveNewFingerprintsChk.Checked then\n  msgDlg(MSG, MB_ICONWARNING);\nend;\n\nprocedure TmainFrm.Createfingerprintonaddition1Click(Sender: TObject);\nresourcestring\n  MSG = 'When you add files and no fingerprint is found, it is calculated.'\n    +#13'To avoid long waitings, set a limit to file size (in KiloBytes).'\n    +#13'Leave empty to disable, and have no fingerprint created.';\nvar\n  s: string;\nbegin\nif autoFingerprint = 0 then s:=''\nelse s:=intToStr(autoFingerprint);\nif not inputquery('Auto fingerprint', MSG, s) then exit;\ntry setAutoFingerprint(strToUInt(s))\nexcept msgDlg(MSG_INVALID_VALUE, MB_ICONERROR) end;\nend;\n\nprocedure TmainFrm.Howto1Click(Sender: TObject);\nbegin msgDLg(getRes('uploadHowTo')) end;\n\nprocedure TmainFrm.Name1Click(Sender: TObject);\nbegin defSorting:='name' end;\n\nprocedure TmainFrm.Size1Click(Sender: TObject);\nbegin defSorting:='size' end;\n\nprocedure TmainFrm.Time1Click(Sender: TObject);\nbegin defSorting:='time' end;\n\nprocedure TmainFrm.Hits1Click(Sender: TObject);\nbegin defSorting:='hits' end;\n\nprocedure TmainFrm.Resettotals1Click(Sender: TObject);\nbegin resetTotals() end;\n\nprocedure TmainFrm.copyBtnClick(Sender: TObject);\nbegin setClip(urlBox.text) end;\n\nfunction TmainFrm.copySelection():TtreeNodeDynArray;\nvar\n  i: integer;\nbegin\nsetlength(result, filesBox.SelectionCount);\nfor i:=0 to filesBox.SelectionCount-1 do result[i]:=filesbox.selections[i];\nend; // copySelection\n\nprocedure TmainFrm.menuMeasure(sender:Tobject; cnv: Tcanvas; var w:integer; var h:integer);\nbegin\nwith sender as Tmenuitem do\n  if isLine() then\n    w:=cnv.textwidth(hint+'----')\n  else\n    w:=cnv.textWidth(caption+'----')+images.Width;\nh:=getSystemMetrics(SM_CYMENU);\nend;\n\nprocedure TmainFrm.menuDraw(sender:Tobject; cnv: Tcanvas; r:Trect; selected:boolean);\nvar\n  mi: Tmenuitem;\n  s: string;\n  i: integer;\nbegin\nmi:=sender as Tmenuitem;\nif mi.IsLine() then\n  begin\n  i:=(r.Bottom+r.top) div 2;\n  cnv.Pen.Color:=clBtnHighlight;\n  cnv.MoveTo(r.Left, i);\n  cnv.lineTo(r.right, i);\n  cnv.Pen.Color:=clBtnShadow;\n  cnv.MoveTo(r.Left, i-1);\n  cnv.lineTo(r.right, i-1);\n\n  if mi.hint = '' then exit;\n  s:=' '+mi.hint+' ';\n  inc(r.Top, cnv.TextHeight(s) div 5);\n  cnv.font.color:=clBtnHighlight;\n  drawText(cnv.handle, pchar(s), -1, r, DT_VCENTER or DT_CENTER);\n  setBkMode(cnv.handle, TRANSPARENT);\n  cnv.font.color:=clBtnShadow;\n  dec(r.Left);\n  dec(r.top);\n  drawText(cnv.handle, pchar(s), -1, r, DT_VCENTER or DT_CENTER);\n  exit;\n  end;\ncnv.fillRect(r);\ninc(r.left, images.width*2);\ninc(r.top,2);\ndrawText(cnv.handle, pchar(mi.caption), -1, r, DT_LEFT or DT_VCENTER);\ndec(r.left, images.width*2);\n\nif mi.ImageIndex >= 0 then\n  images.draw(cnv, r.left+1, r.top, mi.ImageIndex);\nif mi.Checked then\n  begin\n  cnv.font.Name:='WingDings';\n  with cnv.Font do size:=size+2;\n  cnv.TextOut(r.Left+images.width, r.Top, '\u00fc'); // check mark\n  end;\nend;\n\nprocedure TmainFrm.wrapInputQuery(sender:Tobject);\nvar\n  Form: TCustomForm;\n  Prompt: TLabel;\n  Edit: TEdit;\n  Ctrl: TControl;\n  I, J, ButtonTop: Integer;\nbegin\nForm := Screen.ActiveCustomForm;\nif (Form=NIL) or (Form.ClassName<>'TInputQueryForm') then\n  Exit;\n\nedit:=NIL; prompt:=NIL; // hush compiler warning\nfor I := 0 to Form.ControlCount-1 do\n  begin\n  Ctrl := Form.Controls[i];\n  if Ctrl is TLabel then\n    Prompt := TLabel(Ctrl)\n  else if Ctrl is TEdit then\n    Edit := TEdit(Ctrl);\n  end;\n  \nEdit.SetBounds(Prompt.Left, Prompt.Top + Prompt.Height + 5, max(200, Prompt.Width), Edit.Height);\nForm.ClientWidth := (Edit.Left * 2) + Edit.Width;\nButtonTop := Edit.Top + Edit.Height + 15;\n\nJ := 0;\nfor I := 0 to Form.ControlCount-1 do\n  begin\n  Ctrl := Form.Controls[i];\n  if Ctrl is TButton then\n    begin\n    Ctrl.SetBounds(Form.ClientWidth - ((Ctrl.Width + 15) * (2-J)), ButtonTop, Ctrl.Width, Ctrl.Height);\n    Form.ClientHeight := Ctrl.Top + Ctrl.Height + 13;\n    Inc(J);\n    end;\n  end;\nend;\n\nvar\n  dll: HMODULE;\n\nINITIALIZATION\nrandomize();\nsetErrorMode(SEM_FAILCRITICALERRORS);\nexePath:=extractFilePath(ExpandFileName(paramStr(0)));\ncfgPath:=exePath;\n// we give priority to exePath because some people often clear the temp folder\ntmpPath:=exePath;\nif saveTextfile(tmpPath+'test.tmp','') then\n  deleteFile(tmpPath+'test.tmp')\nelse\n  tmpPath:=getTempDir();\nlastUpdateCheckFN:=tmpPath+'HFS last update check.tmp';\nsetCurrentDir(exePath); // sometimes people mess with the working directory, so we force it to the exe path\nif fileExists('default.tpl') then\n  defaultTpl:=loadTextfile('default.tpl')\nelse\n  defaultTpl:=getRes('defaultTpl');\ntpl:=Ttpl.create();\ndefSorting:='name';\ndmBrowserTpl:=Ttpl.create(getRes('dmBrowserTpl'));\nfilelistTpl:=Ttpl.create(getRes('filelistTpl'));\nglobalLimiter:=TspeedLimiter.create();\nip2obj:=THashedStringList.create();\netags:=THashedStringList.create();\nsessions:=Tsessions.create();\nipsEverConnected:=THashedStringList.create();\nipsEverConnected.sorted:=TRUE;\nipsEverConnected.duplicates:=dupIgnore;\nipsEverConnected.delimiter:=';';\nlogMaxLines:=2000;\ntrayShows:='downloads';\nflashOn:='download';\nforwardedMask:='127.0.0.1';\nrunningOnRemovable:=DRIVE_REMOVABLE = GetDriveType(Pchar(exePath[1]+':\\'));\netags.values['exe']:=strMD5(dateToHTTP(getMtimeUTC(paramStr(0))));\n\ndll:=GetModuleHandle('kernel32.dll');\nif dll <> HINSTANCE_ERROR then\n  setThreadExecutionState:=getprocaddress(dll, 'SetThreadExecutionState');\n\ntoDelete:=Tlist.create();\nusersInVFS:=TusersInVFS.create();\n\nopenInBrowser:='*.htm;*.html;*.jpg;*.jpeg;*.gif;*.png;*.txt;*.swf;*.svg';\nMIMEtypes:=toSA([\n\t'*.htm;*.html', 'text/html',\n  '*.jpg;*.jpeg;*.jpe', 'image/jpeg',\n  '*.gif', 'image/gif',\n  '*.png', 'image/png',\n  '*.bmp', 'image/bmp',\n  '*.ico', 'image/x-icon',\n  '*.mpeg;*.mpg;*.mpe', 'video/mpeg',\n  '*.avi', 'video/x-msvideo',\n  '*.txt', 'text/plain',\n  '*.css', 'text/css',\n  '*.js',  'text/javascript',\n  '*.mkv', 'video/x-matroska'\n]);\n\nsystemimages:=getSystemimages();\nsaveMode:=SM_USER;\nlastDialogFolder:=getCurrentDir();\nautoupdatedFiles:=TstringToIntHash.create();\niconsCache:=TiconsCache.create();\ndyndns.active:=TRUE;\nconnectionsInactivityTimeout:=60; // 1 minute\nstartupFilename:=getShellFolder('Startup')+'\\HFS.lnk';\ntempScriptFilename:=getTempDir()+'hfs script.tmp';\n\nlogfile.apacheZoneString:=if_(GMToffset < 0, '-','+')\n  +format('%.2d%.2d', [abs(GMToffset div 60), abs(GMToffset mod 60)]);\n\nFINALIZATION\n\nprogFrm.free;\ntoDelete.free;\ntpl.free;\nfilelistTpl.free;\nautoupdatedFiles.free;\niconsCache.free;\nusersInVFS.free;\nglobalLimiter.Free;\nip2obj.free;\nipsEverConnected.free;\netags.free;\n\nend.\n", "{\nCopyright (C) 2002-2012  Massimo Melina (www.rejetto.com)\n\nThis file is part of HFS ~ HTTP File Server.\n\n    HFS is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    HFS is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with HFS; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n}\nunit scriptLib;\n\ninterface\n\nuses main, classesLib, iniFiles, types;\n\ntype\n  TmacroData = record\n    cd: TconnData;\n    tpl: Ttpl;\n    folder, f: Tfile;\n    afterTheList, archiveAvailable, hideExt, breaking: boolean;\n    aliases, tempVars: THashedStringList;\n    table: TStringDynArray;\n    logTS: boolean;\n    end;\n\nvar\n  defaultAlias: THashedStringList;\n  staticVars : THashedStringList; // these scripting variables are held for the whole run-time\n  eventScripts: Ttpl;\n\nfunction tryApplyMacrosAndSymbols(var txt:string; var md:TmacroData; removeQuotings:boolean=true):boolean;\nfunction macroQuote(s:string):string;\nfunction runScript(script:string; table:TstringDynArray=NIL; tpl_:Ttpl=NIL; f:Tfile=NIL; folder:Tfile=NIL; cd:TconnData=NIL):string;\nfunction runEventScript(event:string; table:TStringDynArray=NIL; cd:TconnData=NIL):string;\nprocedure resetLog();\n\nimplementation\n\nuses windows, utilLib, trayLib, parserLib, graphics, classes, sysutils, StrUtils,\n  hslib, comctrls, math, controls, forms, clipbrd, MMsystem;\n\nconst\n  HEADER = '<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><style>'\n  +#13'dt, dd { margin:0; padding:0.2em 0.5em; white-space:pre; display:block; font-family:monospace; } dt { background:#dfd; } dd { background:#fdd; }'\n  +#13'</style></head><body>';\n\nvar\n  stopOnMacroRename: boolean; // this ugly global var is used to avoid endless recursion on a renaming rename event. this method won't work on a multithreaded system, but i opted for it because otherwise the changes would have been big.\n  cachedTpls: TcachedTpls;\n\nfunction macrosLog(textIn, textOut:string; ts:boolean=FALSE):boolean;\nvar\n  s: string;\nbegin\ns:='';\nif ts then\n    s:='<hr>'+dateTimeToStr(now())+CRLF;\ns:=s+#13'<dt>'+htmlEncode(textIn)+'</dt><dd>'+htmlEncode(textOut)+'</dd>';\nresult:=appendTextFile(MACROS_LOG_FILE, s);\nend; // macrosLog\n\nprocedure resetLog();\nbegin saveFile(MACROS_LOG_FILE, '') end;\n\nfunction expandLinkedAccounts(account:Paccount):TStringDynArray;\nvar\n  i: integer;\nbegin\nresult:=NIL;\nif account = NIL then exit;\ni:=0;\nresult:=account.link;\nwhile i < length(result) do\n  begin\n  account:=getAccount(result[i], TRUE);\n  inc(i);\n  if (account = NIL) or not account.enabled then continue;\n  addUniqueArray(result, account.link);\n  end;\nend; // expandLinkedAccounts\n\nfunction encodeMarkers(s:string):string;\nvar\n  i: integer;\n  t: string;\nbegin\nfor i:=0 to length(MARKERS)-1 do\n  begin\n  t:=MARKERS[i];\n  replace(t, '&#'+intToStr(charToUnicode(t[1]))+';', 1,1);\n  s:=replaceStr(s, MARKERS[i], t);\n  end;\nresult:=s;\nend; // encodeMarkers\n\nfunction noMacrosAllowed(s:string):string;\n// prevent hack attempts\nvar\n  i: integer;\nbegin\ni:=1;\nenforceNUL(s);\n  repeat\n  i:=findMacroMarker(s, i);\n  if i = 0 then break;\n  replace(s, '&#'+intToStr(charToUnicode(s[i]))+';', i,i);\n  until false;\ns:=reReplace(s,'%([-a-z0-9]+%)','&#37;$1', 'mi');\nresult:=s;\nend; // noMacrosAllowed\n\nfunction isMacroQuoted(s:string):boolean;\nbegin result:=ansiStartsStr(MARKER_QUOTE, s) and ansiEndsStr(MARKER_UNQUOTE, s) end;\n\nfunction macroQuote(s:string):string;\nvar\n  t: string;\nbegin\nenforceNUL(s);\nif not anyMacroMarkerIn(s) then\n  begin\n  result:=s;\n  exit;\n  end;\n// an UNQUOTE would invalidate our quoting, so let's encode any of it\nt:=MARKER_UNQUOTE;\nreplace(t, '&#'+intToStr(charToUnicode(t[1]))+';', 1,1);\nresult:=MARKER_QUOTE+replaceStr(s, MARKER_UNQUOTE, t)+MARKER_UNQUOTE\nend; // macroQuote\n\nfunction macroDequote(s:string):string;\nbegin\nresult:=s;\ns:=trim(s);\nif isMacroQuoted(s) then\n  result:=copy(s, length(MARKER_QUOTE)+1, length(s)-length(MARKER_QUOTE)-length(MARKER_UNQUOTE) );\nend; // macroDequote\n\nfunction cbMacros(fullMacro:string; pars:Tstrings; cbData:pointer):string;\nvar\n  md: ^TmacroData;\n  name, p: string;\n  unnamedPars: integer; // this is a guessing of the number of unnamed parameters. just guessing because there's no true distinction between a parameter \"value\" named \"key\", and parameter \"key=value\"\n\n  procedure macroError(msg:string);\n  begin result:='<div class=macroerror>macro error: '+name+nonEmptyConcat('<br>',msg)+'</div>' end;\n\n  procedure deprecatedMacro(what:string=''; instead:string='');\n  begin mainfrm.add2log('WARNING, deprecated macro: '+first(what, name)+nonEmptyConcat(' - Use instead: ',instead), NIL, clRed) end;\n\n  function satisfied(p:pointer):boolean;\n  begin\n  result:=assigned(p);\n  if not result then\n    macroError('cannot be used here');\n  end;\n\n  procedure unsatisfied(b:boolean=TRUE);\n  begin if b then macroError('cannot be used here') end;\n\n  function parEx(idx:integer; name:string=''; doTrim:boolean=TRUE):string; overload;\n  var\n    i: integer;\n  begin\n  result:='';\n  if name > '' then\n    begin\n    i:=pars.IndexOfName(name);\n    if i >= 0 then\n      begin\n      result:=pars.valueFromIndex[i];\n      if doTrim then result:=trim(result);\n      exit;\n      end;\n    end;\n  if (idx < 0) // no numeric index accept\n  or (idx >= pars.count) // invalid index\n  or (name > '') and (pars.names[idx] > '') and not anycharIn(' '#13#10, pars.names[idx]) // this numerical index was already taken by a valid mnemonic name\n  then\n    raise Exception.create('invalid parameter index');\n  result:=pars[idx];\n  if doTrim then result:=trim(result);\n  end; // parEx\n\n  function parEx(name:string; doTrim:boolean=TRUE):string; overload;\n  begin result:=parEx(-1, name, doTrim) end;\n\n  function par(idx:integer; name:string=''; doTrim:boolean=TRUE):string; overload;\n  begin\n  try result:=parEx(idx, name, doTrim)\n  except result:='' end\n  end;\n\n  function par(name:string=''; doTrim:boolean=TRUE; defval:string=''):string; overload;\n  begin\n  try result:=parEx(-1, name, doTrim)\n  except result:=defval end\n  end;\n\n  function parI(idx:integer):int64; overload;\n  begin result:=strToInt64(par(idx)) end;\n\n  function parI(idx:integer; def:int64):int64; overload;\n  begin result:=strToInt64Def(par(idx), def) end;\n\n  function parI(name:string; def:int64):int64; overload;\n  begin result:=strToInt64Def(par(name), def) end;\n\n  function parF(idx:integer):extended; overload;\n  begin result:=strToFloat(par(idx)) end;\n\n  function parF(idx:integer; def:extended):extended; overload;\n  begin result:=strToFloatDef(par(idx), def) end;\n\n  function parF(name:string; def:extended):extended; overload;\n  begin result:=strToFloatDef(par(name), def) end;\n\n  // note this function works on N parameters\n  function parExist(names: array of string):boolean;\n  var\n    i: integer;\n  begin\n  result:=FALSE;\n  for i:=0 to length(names)-1 do\n    if pars.indexOfName(names[i]) < 0 then\n      exit;\n  result:=TRUE;\n  end; // parExist\n\n  procedure trueIf(condition:boolean);\n  begin if condition then result:='1' else result:='' end;\n\n  // this is for cases where normally we want a \"clean\" output. User can still detect outcome by using macro \"length\".\n  // Reason for having this instead of using in place a simple \"result:=if_(cond, ' ')\" is to evidence our purpose. It's not faster or cleaner, it's more semantic.\n  procedure spaceIf(condition:boolean);\n  begin if condition then result:=' ' else result:='' end;\n\n  function isFalse(s:string):boolean;\n  begin result:=(s='') or (strToFloatDef(s,1) = 0) end;\n\n  function isTrue(s:string):boolean; inline;\n  begin result:=not isFalse(s) end;\n\n  function getVarSpace(var varname:string):THashedStringList;\n  begin\n  varname:=trim(varname);\n  if ansiStartsStr(G_VAR_PREFIX, varname) then\n    begin\n    result:=staticVars;\n    delete(varname,1,length(G_VAR_PREFIX));\n    end\n  else if satisfied(md.cd) then\n    result:=md.cd.vars\n  else if satisfied(md.tempVars) then\n    result:=md.tempVars\n  else\n    raise Exception.create('no namespace available');\n  end; // getVarSpace\n\n  function getVar(varname:string):string; overload;\n  begin result:=getVarSpace(varname).values[varname] end;\n\n  // if par with name exists, then it's a var name, otherwise it's a constant value at specified index\n  function parVar(parname:string; idx:integer):string; overload;\n  begin\n  if parExist([parname]) then\n    result:=getVar(par(parname))\n  else\n    result:=pars[idx];\n  end; // parVar\n\n  function setVar(varname, value:string; space:THashedStringList=NIL):boolean;\n  var\n    o: Tobject;\n    i: integer;\n  begin\n  result:=FALSE;\n  if space = NIL then\n    space:=getVarSpace(varname);\n  if not satisfied(space) then exit;\n  i:=space.indexOfName(varname);\n  if i < 0 then\n    if value = '' then exit // all is good the way it is\n    else i:=space.add(varname+'='+value)\n  else\n    if value > '' then // in case of empty value, there's no need to assign, because we are going to delete it (after we cleared the bound object)\n      space.valueFromIndex[i]:=value;\n\n  assert(i >= 0, 'setVar: i<0');\n  // the previous hash object linked to this data is not valid anymore, and must be freed\n  o:=space.objects[i];\n  freeAndNIL(o);\n\n  if value = '' then\n    space.delete(i)\n  else\n    space.objects[i]:=NIL;\n  result:=TRUE;\n  end; // setVar\n\n  // we wrap pos() to switch between case sensitivity\n  function pos_(caseSensitive:boolean; ss, s:string; ofs:integer=1):integer;\n  begin\n  if caseSensitive then result:=posEx(ss,s,ofs)\n  else result:=ipos(ss,s,ofs)\n  end; // pos_\n\n  procedure allLogic(isAnd:boolean); // when not \"isAnd\", then it isOr ;-)\n  var\n    i: integer;\n  begin\n  // AND will return first FALSE value, or having none, the last TRUE value.\n  // OR will return last TRUE value, or having none, last value. \n  result:='';\n  for i:=0 to pars.count-1 do\n    begin\n    result:=par(i);\n    if isAnd xor isTrue(result) then exit;\n    end;\n  end; // allLogic\n\n  procedure substring();\n  var\n    i, j: integer;\n    s: string;\n    what2inc: integer;\n    caseSens: boolean;\n  begin\n  result:='';\n\n  // input what to be included in the result\n  s:=par('include');\n  try what2inc:=strToInt(s)\n  except // we also support the following values\n    if s = 'none' then what2inc:=0\n    else if s = 'both' then what2inc:=3\n    else if s = '1+2' then what2inc:=3\n    else what2inc:=1; // by default we include only the first delimiter\n    end;\n\n  caseSens:=isTrue(par('case'));\n\n  // find the delimiters\n  s:=macroDequote(par(2));\n  if pars[0] = '' then i:=1\n  else i:=pos_(caseSens, pars[0], s); // we don' trim this, so you can use blank-space as delimiter\n  if i = 0 then exit;\n  j:=pos_(caseSens, pars[1], s, i+1);\n  if j = 0 then j:=length(s)+1;\n\n  // apply what2inc\n  if what2inc and 1 = 0 then\n    inc(i, length(pars[0]));\n  if what2inc and 2 > 0 then\n    inc(j, length(pars[1]));\n\n  // end of the story\n  result:=macroQuote(copy(s, i, j-i));\n  end; // substring\n\n  procedure switch();\n  var\n    what, sep: string;\n    i, j: integer;\n    a: TStringDynArray;\n  begin\n  what:=par(0);\n  sep:=first(pars[1], ' '); // we don' trim this, so you can use blank-space as separator\n  i:=2;\n  while i < pars.count do\n    begin\n    if i = pars.count-1 then\n      begin\n      result:=macroDequote(par(i));\n      exit;\n      end;\n    a:=split(sep, par(i));\n    for j:=0 to length(a)-1 do\n      if sameText(a[j], what) then\n        begin\n        result:=macroDequote(par(i+1));\n        exit;\n        end;\n    inc(i, 2);\n    end;\n  result:='';\n  end; // switch\n\n  procedure cut();\n  var\n    from, upTo, l: integer;\n    s, v: string;\n  begin\n  v:=par('var');\n  if v = '' then\n    s:=par(2,'what')\n  else\n    s:=getVar(v);\n  l:=length(s);\n\n  from:=strToIntDef(par(0,'from'), 1);\n  if from < 0 then from:=l+from+1;\n\n  try upTo:=strToInt(parEx('to'))\n  except\n    upTo:=strToIntDef(par(1,'size'), 0);\n    if upTo = 0 then\n      upTo:=l\n    else if upTo > 0 then\n      upTo:=from+upTo-1\n    else\n      upTo:=l+upTo;\n    end;\n    \n  result:=substr(s, from, upTo);\n  try setVar(parEx('remainder'), substr(s,1,from-1)+substr(s,upTo+1));\n  except end;\n  if v = '' then exit;\n  setVar(v, result);\n  result:='';\n  end; // cut\n\n  procedure minOrMax();\n  var\n    i: integer;\n    r, v: real;\n    min: boolean;\n  begin\n  min:=name='min';\n  r:=parF(0);\n  for i:=1 to pars.Count-1 do\n    begin\n    v:=parF(i);\n    if (v < r) and min\n    or (v > r) and not min then\n      r:=v;\n    end;\n  result:=floatToStr(r);\n  end; // minOrMax\n\n  procedure getUri();\n  var\n    i, ex, eq: integer;\n    vars: Tstrings;\n    s: string;\n  begin\n  if not satisfied(md.cd) then exit;\n  try\n    result:=md.cd.conn.request.url;\n    if pars.count < 2 then exit;\n    s:=result;\n    result:=chop('?', s);\n    vars:=TstringList.create();\n    try\n      vars.delimiter:='&';\n      vars.quoteChar:=#0;\n      vars.delimitedText:=s;\n      if pars.count > 1 then\n        for i:=1 to pars.count-1 do\n          begin\n          s:=par(i);\n          if s = '' then continue;\n          eq:=pos('=', s);\n          if eq = 0 then\n            begin\n            if vars.indexOf(s) < 0 then\n              vars.add(pars[i]);\n            continue;\n            end;\n          ex:=vars.indexOfName(chop(eq,s));\n          if ex < 0 then\n            if s = '' then\n              continue   // the parameter didn't exist, and we are trying to empty it\n            else\n              vars.add(par(i))  // didn't exist, put the whole\n          else\n            if s = '' then\n              vars.delete(ex) //  exists, but we are trying to empty it\n            else\n              vars.valueFromIndex[ex]:=s; // exists, change the value\n          end;\n      if vars.count = 0 then exit;\n      for i:=vars.Count-1 downto 0 do\n        if vars[i] = '' then\n          vars.delete(i);\n      result:=result+'?'+vars.delimitedText;\n    finally vars.free end;\n  finally result:=macroQuote(result) end;\n  end; // getUri\n\n  procedure section(ofs:integer);\n  var\n    t: Ttpl;\n    s: string;\n  begin\n  if not satisfied(md.tpl) then exit;\n  s:=par(ofs);\n  if (par('file') = '') and ((s = '') or (pos('=',s) > 0)) then\n    begin // current template\n    result:='';\n    t:=md.tpl;\n    ofs:=parI('back', 0);\n    while ofs > 0 do\n      begin\n      dec(ofs);\n      t:=t.over;\n      if t = NIL then exit;\n      end;\n    try result:=t[p] except end;\n    exit;\n    end;\n  // template in other file\n\n  t:=Ttpl.create;\n  try\n    t.fullText:=loadTextFile(par(ofs, 'file'));\n    result:=t[p];\n  finally t.free end;\n  // templates outside hfs folder get quoted for security reasons\n  if anyCharIn('\\/', par(ofs)) then\n    result:=macroQuote(result);\n  end; // section\n\n  function urlVar(k:string):string;\n  var\n    s: string;\n  begin\n  if not satisfied(md.cd) then exit;\n  s:=md.cd.urlvars.values[k];\n  if (s = '') and (md.cd.urlvars.indexOf(k) >= 0) then s:='1';\n  try\n    result:=noMacrosAllowed(s);\n    setVar(parEx('var'), result); // if no var is specified, it will break here, and result will have the value\n    result:='';\n  except end;\n  end; // urlVar\n\n  function maybeUrlvar(k:string):string;\n  begin\n  if (k = '') or (k[1] <> '?') then result:=k\n  else result:=urlvar(copy(k,2,MAXINT));\n  end; // maybeUrlvar\n\n  function compare(op,p1,p2:string):boolean;\n  var\n    r1,r2: double;\n    c: integer;\n  begin\n  try\n    r1:=StrToFloat(p1);\n    r2:=StrToFloat(p2);\n    c:=compare_(r1,r2)\n  except\n    c:=ansiCompareText(p1,p2);\n    end;\n  if op = '=' then result:= c=0\n  else if op = '>' then result:= c>0\n  else if op = '<' then result:= c<0\n  else if op = '>=' then result:= c>=0\n  else if op = '<=' then result:= c<=0\n  else if (op = '<>') or (op = '!=') then result:= c<>0\n  else result:=FALSE;\n  end; // compare\n\n  procedure infixOperators(ops:array of string);\n  var\n    i, j: integer;\n    s: string;\n  begin\n  if pars.count > 0 then exit;\n  for i:=0 to length(ops)-1 do\n    begin\n    j:=pos(ops[i], name);\n    if j = 0 then continue;\n    s:=trim(chop(j, length(ops[i]), name));\n    trueIf(compare(ops[i], maybeUrlvar(s), maybeUrlvar(trim(name))));\n    exit;\n    end;\n  end; // infixOperators\n\n  procedure call(code:string; ofs:integer=0);\n  var\n    i: integer;\n  begin\n  result:=code;\n  if pars.count=0 then\n    exit;\n  for i:=ofs to pars.Count-1 do\n    result:=replaceStr(result, format('$%d',[i-ofs+1]), pars[i]);\n  for i:=pars.count to pars.count+5 do\n    result:=replaceStr(result, format('$%d',[i-ofs+1]), '');\n  end; // call\n\n  procedure breadcrumbs();\n  var\n    e, d: string;\n    ae, ad: TstringDynArray;\n    i: integer;\n    fld: Tfile;\n    freeIt: boolean;\n  begin\n  freeIt:=FALSE;\n  if md.f = NIL then\n    fld:=md.folder\n  else\n    begin\n    fld:=md.f.parent;\n    if md.f.isTemp() then\n      begin\n      e:=extractFilePath(md.f.resource);\n      if length(e) > 3 then\n        e:=excludeTrailingPathDelimiter(e);\n      if e <> fld.resource then\n        begin\n        fld:=Tfile.createTemp(e);\n        fld.node:=md.f.node;\n        freeIt:=TRUE;\n        end\n      end;\n    end;\n\n  if not satisfied(fld) then exit;\n  e:=htmlEncode(encodeMarkers(fld.url(TRUE)));\n  d:=htmlEncode(encodeMarkers(fld.getFolder()+fld.name+'/'));\n  ae:=split('/', e);\n  ad:=split('/', d);\n  p:=macroDequote(p);\n  result:='';\n  e:='';\n  i:=length(ae)-1;\n  if ae[i] = '' then\n    dec(i);\n  for i:=parI('from',0) to i do\n    begin\n    e:=e+ae[i]+'/';\n    result:=result+xtpl(p, [\n      '%bread-url%', e,\n      '%bread-name%', ad[i],\n      '%bread-idx%', intToStr(i)\n    ]);\n    end;\n\n  if freeIt then\n    freeAndNIL(fld);\n  end; // breadcrumbs\n\n  procedure inc_(v:integer=+1);\n  begin\n  result:='';\n  try setVar(p, intToStr(strToIntDef(getVar(p),0)+v*parI(1,1))) except end;\n  end; // inc_\n\n  procedure convert();\n  begin\n  if sameText(p, 'ansi') and sameText(par(1), 'utf-8') then\n    result:=ansiToUTF8(ansistring(par(2)))\n  else if sameText(p, 'utf-8') and sameText(par(1), 'ansi') then\n    result:=utf8ToAnsi(ansistring(par(2)))\n  end; // convert\n\n  procedure encodeuri();\n  var\n    i: integer;\n    cs: Tcharset;\n  begin\n  result:='';\n  try cs:=[#0..#255]-strToCharset(parEx('only'));\n  except\n    cs:=['a'..'z','A'..'Z','0'..'9',',','/','#','&','?',':','$','@','=','+']\n      -strToCharset(par('add'))+strToCharset(par('not'));\n    end;\n  for i:=1 to length(p) do\n    if charInSet(p[i], cs) then\n      result:=result+p[i]\n    else\n      result:=result+'%'+intToHex(ord(p[i]),2)\n  end; // encodeuri\n\n  procedure addFolder();\n  var\n    parent: Ttreenode;\n    f, old: Tfile;\n    fn, name: string;\n\n    // extract the path from \"name\", if any, and assign it to \"parent\"\n    function validateAndExtractParent():boolean;\n    var\n      i: integer;\n      parentF: Tfile;\n    begin\n    result:=TRUE;\n    i:=lastDelimiter('/',name);\n    if i = 0 then exit;\n    result:=FALSE;\n    parentf:=mainfrm.findFilebyURL(chop(i+1, 0, name), NIL, FALSE);\n    if parentf = NIL then exit;\n    parent:=parentf.node; // ok, this is where we'll add the folder\n    result:=TRUE;\n    end; // validateAndExtractParent\n\n  begin\n  result:='';\n  if not stringExists(p, ['real','virtual']) then exit;\n\n  parent:=NIL;\n  if assigned(md.folder) then\n    parent:=md.folder.node;\n\n  if p = 'virtual' then\n    begin\n    name:=par(1);\n    if not validateAndExtractParent() then exit;\n    f:=Tfile.createVirtualFolder(name);\n    end\n  else\n    begin\n    fn:=uri2diskMaybe(par(1));\n    if not isAbsolutePath(fn) and assigned(md.folder) then\n      fn:=expandFileName(md.folder.resource+'\\'+fn);\n    if not directoryExists(fn) then exit; // the real folder must exists on disk\n\n    // is a name specified in the third parameter, or should we deduce it from the disk path?\n    name:=par(2);\n    if (name = '') or containsStr(name,'=') then\n      name:=extractFileName(fn);\n\n    if not validateAndExtractParent() then exit;\n    f:=Tfile.create(fn);\n    f.name:=name;\n    end;\n\n  if not validFilename(f.name) then\n    begin\n    f.free;\n    exit;\n    end;\n\n  old:=mainfrm.findFilebyURL(f.name, nodeToFile(parent), FALSE);\n  if assigned(old) then\n    if not old.isRoot()\n    and (not parExist(['overwrite']) or isTrue(par('overwrite'))) then\n      try old.node.delete() except end // delete existing one\n    else\n      begin\n      f.free;\n      exit;\n      end;\n\n  if mainfrm.addFile(f, parent, TRUE) = NIL then\n    f.free\n  else\n    spaceIf(TRUE)\n  end; // addFolder\n\n  procedure setItem();\n  var\n    f: Tfile;\n    act: TfileAction;\n\n    function get(prefix:string):TStringDynArray;\n    begin\n    result:=onlyExistentAccounts(split(';', parEx(prefix+FILEACTION2STR[act])));\n    uniqueStrings(result);\n    end;\n\n    procedure setAttr(a:TfileAttribute; parName:string);\n    begin\n    try\n      if isTrue(parEx(parname)) then\n        include(f.flags, a)\n      else\n        exclude(f.flags, a);\n    except end;\n    end; // setAttr\n\n  begin\n  result:='';\n  f:=mainfrm.findFileByURL(p, md.folder);\n  if f = NIL then exit; // doesn't exist\n\n  try f.setDynamicComment(macroDequote(parEx('comment'))) except end;\n  try\n    f.name:=parEx('name');\n    if assigned(f.node) then\n      f.node.text:=f.name;\n  except end;\n  try f.resource:=parEx('resource') except end;\n  try f.diffTpl:=parEx('diff template') except end;\n  try f.filesFilter:=parEx('files filter') except end;\n  try f.foldersFilter:=parEx('folders filter') except end;\n\n  // following commands make no sense on temporary items\n  if freeIfTemp(f) then exit;\n\n  setAttr(FA_HIDDEN, 'hide');\n  setAttr(FA_HIDDENTREE, 'hide tree');\n  setAttr(FA_DONT_LOG, 'no log');\n  setAttr(FA_ARCHIVABLE, 'archivable');\n  setAttr(FA_BROWSABLE, 'browsable');\n  setAttr(FA_DL_FORBIDDEN, 'download forbidden');\n  if f.isFolder() then\n    try f.dontCountAsDownloadMask:=parEx('not as download') except end\n  else\n    setAttr(FA_DONT_COUNT_AS_DL, 'not as download');\n\n  for act:=low(act) to high(act) do\n    begin\n    try f.accounts[act]:=get('') except end;\n    try addUniqueArray(f.accounts[act], get('add ')) except end;\n    try removeArray(f.accounts[act], get('remove ')) except end;\n    end;\n  VFSmodified:=TRUE;\n  mainfrm.filesBox.repaint();\n  end; // setItem\n\n  function getItemIcon(f:Tfile):string;\n  begin\n  if f = NIL then\n    result:=''\n  else if (f.icon >= 0) or (mainfrm.useSystemIconsChk.checked and f.isFile()) then\n    result:='/~img'+intToStr(f.getSystemIcon())\n  else if f.isFile() then\n    result:='/~img_file'\n  else if f.isFolder() then\n    if FA_UNIT in f.flags then\n      result:=format('/~img%d', [f.getIconForTreeview()])\n    else\n      result:='/~img_folder'\n  else if f.isLink() then\n    result:='/~img_link'\n  else\n    result:='';\n  end; // getItemIcon\n\n  procedure deleteItem();\n  var\n    f: Tfile;\n  begin\n  f:=mainfrm.findFileByURL(p);\n  spaceIf(assigned(f)); // so you can know if something really has been deleted\n  if f = NIL then exit; // doesn't exist\n  mainFrm.remove(f.node);\n  VFSmodified:=TRUE;\n  end; // deleteItem\n\n  procedure getItem();\n  var\n    f: Tfile;\n    act: TfileAction;\n    w: string;\n\n    function getAttr(name:string; a:TfileAttribute):boolean;\n    begin\n    result:= w = name;\n    if result then\n      trueIf(a in f.flags);\n    end; // setAttr\n\n  begin\n  result:='';\n  f:=mainfrm.findFileByURL(p, md.folder);\n  if f = NIL then exit; // doesn't exist\n\n  try\n    w:=par(1);\n    if w = 'exists' then\n      result:='1'\n    else if w = 'comment' then\n      result:=f.getDynamicComment()\n    else if w = 'resource' then\n      result:=f.resource\n    else if w = 'icon' then\n      result:=getItemIcon(f)\n    else if getAttr('hide', FA_HIDDEN)\n      or getAttr('hide tree', FA_HIDDENTREE)\n      or getAttr('no log', FA_DONT_LOG) then\n      exit\n    else if w = 'not as download' then\n      if f.isFolder() then\n        result:=f.dontCountAsDownloadMask\n      else\n        trueIf(FA_DONT_COUNT_AS_DL in f.flags);\n\n    for act:=low(act) to high(act) do\n      if compareText(w, FILEACTION2STR[act]) = 0 then\n        begin\n        result:=join(';', f.accounts[act]);\n        exit;\n        end;\n  finally freeIfTemp(f) end;\n  end; // getItem\n\n  procedure foreach();\n  var\n    i, e: integer;\n    s, code: string;\n  begin\n  e:=pars.count-2; // 3 parameters minimum (the check is outside)\n  code:=macroDequote(par(pars.count-1));\n  with TfastStringAppend.create do\n    try\n      for i:=1 to e do\n        begin\n        setVar(p, par(i));\n        s:=code;\n        applyMacrosAndSymbols(s, cbMacros, cbData);\n        append(s);\n        end;\n      result:=reset();\n    finally free end;\n  end; // foreach\n\n  procedure for_();\n  var\n    b, e, i, d: integer;\n    s, code: string;\n  begin\n  try\n    b:=strToInt(par(1));\n    e:=strToInt(par(2));\n    try\n      d:=strToInt(par(3));\n      code:=par(4);\n    except\n      d:=1;\n      code:=par(3);\n      end;\n    if d = 0 then exit;\n    if (e < b) and (d > 0) then d:=-d; // we care\n    code:=macroDequote(code);\n    with TfastStringAppend.create do\n      try\n        for i:=1 to (e-b) div d+1 do\n          begin\n          setVar(p, intToStr(b));\n          s:=code;\n          applyMacrosAndSymbols(s, cbMacros, cbData);\n          append(s);\n          inc(b, d);\n          end;\n        result:=reset();\n      finally free end;\n  except end;\n  end; // for_\n\n  procedure while_();\n  var\n    bTest, bDo, s: string;\n    never: boolean;\n    res: TfastStringAppend;\n    space: THashedStringList;\n    start, timeout: Tdatetime;\n  begin\n  result:='';\n  res:=TfastStringAppend.create;\n  try\n    never:=TRUE;\n    bDo:=macroDequote(par(1)); // do-block\n\n    bTest:='';\n    // test-block\n    space:=NIL;\n    if anyMacroMarkerIn(p) then\n        bTest:=macroDequote(p)\n    else\n      try // lets see if the test-block is just the name of a variable\n        space:=getVarSpace(p);\n        bTest:=p;\n      except end;\n\n    if bTest = '' then exit;\n\n    timeout:=parF('timeout', 1)/SECONDS; // stay safe: 1 second timeout by default\n    start:=now();\n      repeat\n      if (timeout > 0) and (now()-start > timeout) then break;\n      if assigned(space) then\n        s:=space.values[bTest]\n      else\n        begin\n        s:=bTest;\n        applyMacrosAndSymbols(s, cbMacros, cbData);\n        end;\n      if isFalse(trim(s)) then break;\n      s:=bDo;\n      applyMacrosAndSymbols(s, cbMacros, cbData);\n      res.append(s);\n      never:=FALSE;\n      until false;\n    if never then\n      res.append(macroDequote(par('else'))); // else-block\n  finally\n    result:=res.reset();\n    try\n      setVar(parEx('var'), result);\n      result:='';\n    except end;\n    res.free();\n    end;\n  end; // while_\n\n  procedure setEncodedTable(varname, txt:string);\n  var\n    space, h: ThashedStringList;\n    i: integer;\n  begin\n  chopLine(txt); // first line is just a useless header\n  // search the variable in the varspace\n  space:=getVarSpace(varname);\n  if not satisfied(space) then exit;\n  i:=space.indexOfName(varname);\n  // eventually destroy previous object\n  if i >= 0 then\n    begin\n    h:=space.objects[i] as ThashedStringList;\n    freeAndNIL(h);\n    space.objects[i]:=NIL;\n    end;\n  // create the table object\n  h:=ThashedStringList.create();\n  while txt > '' do\n    h.add(unescapeNL(chopline(txt)));\n  // assign the variable value\n  txt:=h.text;\n  if i < 0 then\n    i:=space.add(varname+'='+txt)\n  else\n    space.valueFromIndex[i]:=txt;\n  // link the object\n  space.objects[i]:=h;\n  end; // setEncodedTable\n\n  procedure load(fn:string; varname:string='');\n  var\n    from, size: int64;\n  begin\n  result:='';\n  from:=parI('from', 0);\n  // 'size' has priority over 'to'\n  size:=parI('size', -1);\n  if size = -1 then\n    begin\n    size:=parI('to', -1);\n    if size >= 0 then\n      inc(size, 1-from);\n    end;\n  if size = 0 then exit;\n  from:=max(0,from);\n\n  if reMatch(fn, '^https?://', 'i!') > 0 then\n    try result:=httpGet(fn, from, size)\n    except result:='' end\n  else\n    result:=loadFile(uri2diskMaybe(fn), from, size);\n\n  if varname = '' then\n    begin\n    if anyCharIn('/\\',fn) then result:=macroQuote(result);\n    exit;\n    end;\n  if ansiStartsStr(ENCODED_TABLE_HEADER, result) then\n    setEncodedTable(varname, result)\n  else\n    setVar(varname, result);\n  result:='';\n  end; // load\n\n  function uri2diskMaybeFolder(s:string):string; // like uri2diskMaybe, but limited to the path, excluding the filename\n  var\n    path: string;\n  begin\n  if ansiContainsStr(s, '/') then\n    begin\n    path:=uri2disk(chop(lastDelimiter('/\\',s)+1, 0, s), md.folder);\n    if path > '' then\n      s:=path+'\\'+trim(s); // mod by mars\n    end;\n  result:=s;\n  end; // uri2diskMaybeFolder\n\n  procedure save();\n  var\n    space, h: THashedStringList;\n    s: string;\n    i: integer;\n    encode: boolean;\n  begin\n  result:='';\n  if not parExist(['var']) then // will we work with a variable?\n    s:=pars[1]\n  else\n    begin\n    s:=par('var');\n    space:=getVarSpace(s);\n    if not satisfied(space) then exit;\n\n    i:=space.indexOfName(s);\n    if i < 0 then exit; // this var doesn't exit. don't write.\n    encode:=FALSE;\n    // if this is used as table, and has newlines, we must encode it to preserve associations\n    h:=space.objects[i] as THashedStringList;\n    if assigned(h) then\n      for i:=0 to h.count-1 do\n        if anyCharIn([#13,#10], h.strings[i]) then\n          begin\n          encode:=TRUE;\n          break;\n          end;\n    if not encode then\n      s:=space.valueFromIndex[i]\n    else\n      with TfastStringAppend.create do\n        try // table must be codified, or they won't work at load-time\n          append(ENCODED_TABLE_HEADER);\n          for i:=0 to h.count-1 do\n            append(escapeNL(h.strings[i])+CRLF);\n          s:=get();\n        finally free end;\n    end;\n  // now we have in 's' the content to be saved\n  spaceIf(saveTextFile(uri2diskMaybeFolder(p), s, name='append'));\n  end; // save\n\n  procedure replace();\n  var\n    i: integer;\n    v: string;\n  begin\n  try\n    v:=parEx('var');\n    result:=getVar(v);\n  except result:=pars[pars.count-1] end;\n\n  i:=0;\n  while i < pars.count-2 do\n    begin\n    result:=replaceText(result, pars[i], pars[i+1]);\n    inc(i, 2);\n    end;\n  if v = '' then exit;\n  setVar(v, result);\n  result:='';\n  end; // replace\n\n  procedure dialog();\n  const\n    STR2CODE: array [1..7] of string = (\n      'okcancel=1',\n      'yesno=4',\n      'yesnocancel=3',\n      'error=16',\n      'question=32',\n      'warning=48',\n      'information=64'\n    );\n  var\n    i, j, code: integer;\n    decode: TStringDynArray;\n    s: string;\n    buttons, icon: boolean;\n  begin\n  decode:=split(' ',par(1));\n  code:=0;\n  for i:=0 to length(decode)-1 do\n    for j:=1 to length(STR2CODE) do\n      begin\n      s:=STR2CODE[j];\n      if ansiStartsStr(decode[i], s) then\n        inc(code, strToIntDef(substr(s, 1+pos('=',s)), 0));\n      end;\n  buttons:=code AND 15 > 0;\n  icon:=code SHR 4 > 0;\n  if not icon and buttons then\n    inc(code, MB_ICONQUESTION);\n  case msgDlg(p, code, par(2)) of\n    MRYES, MROK: result:=if_(buttons, '1'); // if only OK button is available, then return nothing\n    MRCANCEL: result:=if_(code and MB_YESNOCANCEL = MB_YESNOCANCEL, 'cancel'); // for the YESNOCANCEL, we return cancel to allow to tell NO from CANCEL\n    else result:='';\n    end;\n  end; // dialog\n\n  procedure setAccount();\n  var\n    a: Paccount;\n    s: string;\n  begin\n  result:='';\n  if p > '' then\n    a:=getAccount(p, TRUE)\n  else\n    a:=md.cd.account;\n  if a = NIL then exit;\n  spaceIf(TRUE);\n\n  try\n    s:=parEx('password');\n    if validUsername(s, TRUE) then\n      a.pwd:=s;\n  except end;\n\n  try\n    s:=parEx('newname');\n    if validUsername(s) then\n      a.user:=s;\n  except end;\n\n  try a.redir:=parEx('redirect') except end;\n  try a.noLimits:=isTrue(parEx('no limits')) except end;\n  try a.enabled:=isTrue(parEx('enabled')) except end;\n  try a.group:=isTrue(parEx('is group')) except end;\n  try a.link:=split(';',parEx('member of')) except end;\n  try addArray(a.link, split(';',parEx('add member of'))) except end;\n  try removeArray(a.link, split(';',parEx('remove member of'))) except end;\n  try a.notes:=parEx('notes') except end;\n  try a.notes:=setKeyInString(a.notes, parEx('notes key')) except end;\n  end; // setAccount\n\n  procedure getterAccount();\n  var\n    a: Paccount;\n    s: string;\n  begin\n  result:='';\n  if p > '' then\n    a:=getAccount(p, TRUE)\n  else\n    a:=md.cd.account;\n  if a = NIL then exit;\n  s:=lowercase(par(1));\n  if s = 'redirect' then result:=a.redir\n  else if s = 'no limits' then trueIf(a.nolimits)\n  else if s = 'enabled' then trueIf(a.enabled)\n  else if s = 'is group' then trueIf(a.group)\n  else if s = 'member of' then result:=join(';',a.link)\n  else if s = 'notes' then result:=a.notes\n  else if s = 'password' then result:=a.pwd\n  else if s = 'password is' then trueIf((a.pwd=pars[2]) or (trim(a.pwd)=par(2)))  //add by mars\n  else if s = 'exists' then result:='1';\n  try result:=getKeyFromString(a.notes, parEx('notes key')) except end;\n  end; // getterAccount\n\n  procedure newAccount();\n  var\n    a: Taccount;\n  begin\n  result:='';\n  if accountExists(p, TRUE) then exit; // username already in use\n  if not validUsername(p) then exit;\n  fillchar(a, sizeof(a), 0); // the account is disabled by default\n  a.user:=p;\n  setLength(accounts, length(accounts)+1);\n  accounts[length(accounts)-1]:=a;\n  setAccount();\n  end; // newAccount\n\n  function fromTable(tbl, k:string):string;\n  var\n    i: integer;\n    space, h: THashedStringList;\n    s: string;\n  begin\n  result:='';\n  if tbl = 'ini' then deprecatedMacro('from table|ini','from table|#ini');\n  try space:=getVarSpace(tbl);\n  except exit end;\n  if not satisfied(space) then exit;\n  i:=space.indexOfName(tbl);\n  if (i < 0) and ansiStartsStr('$', tbl) then\n    begin\n    s:=md.tpl[copy(tbl,2,MAXINT)];\n    if s = '' then exit;\n    i:=space.add(tbl+'='+s);\n    end;\n  if i < 0 then exit;\n  // the text of the table is converted to a hashed structure, and cached through the objects[] property\n  h:=space.objects[i] as THashedStringList;\n  if h = NIL then\n    begin\n    h:=ThashedStringList.create();\n    h.text:=space.valueFromIndex[i];\n    space.objects[i]:=h;\n    end;\n  result:=h.values[k];\n  // we are reading a value from the ini, so we convert the 'no' to a valid false value (the empty string)\n  if stringExists(tbl, ['ini','#ini']) and (result = 'no') then result:='';\n  end; // fromTable\n\n  procedure setTable();\n  var\n    i: integer;\n    k, v: string;\n    space, h: THashedStringList;\n  begin\n  result:='';\n  space:=getVarSpace(p);\n  if not satisfied(space) then exit;\n  // set the table variable as text\n  v:=par(1);\n  space.values[p]:=nonEmptyConcat('', space.values[p], CRLF)+v;\n  // access the table object\n  i:=space.indexOfName(p);\n  h:=space.objects[i] as THashedStringList;\n  if h = NIL then\n    begin\n    h:=ThashedStringList.create();\n    space.objects[i]:=h;\n    end;\n  // fill the object\n  k:=chop('=',v);\n  v:=macroDequote(v);\n  h.values[k]:=v;\n  end; // setTable\n\n  procedure disconnect();\n  var\n    i: integer;\n    ipmask, portmask: string;\n  begin\n  if pars.count = 0 then\n    begin\n    if satisfied(md.cd) then\n      md.cd.conn.disconnect();\n    exit;\n    end;\n  ipmask:=par(0,'ip');\n  portmask:=par(1,'port');\n  if ipmask = '' then exit;\n  for i:=0 to srv.conns.count-1 do\n    with conn2data(i) do\n      if addressmatch(ipmask, address)\n      and ((portmask = '') or filematch(portmask, conn.port)) then\n        conn.disconnect();\n  result:='';\n  end; // disconnect\n\n  procedure vardomain();\n  var\n    space: ThashedStringList;\n    sep: string;\n    i: integer;\n    fs: TfastStringAppend;\n    values: boolean;\n  begin\n  fs:=TfastStringAppend.create;\n  try\n    values:=sameText(par('get'), 'values');\n    sep:=par('separator', FALSE, '|');\n    space:=getVarSpace(p);\n    for i:=0 to space.count-1 do\n      if ansiStartsText(p, space.names[i]) then\n        begin\n        if fs.length > 0 then\n          fs.append(sep);\n        if values then\n          fs.append(space.valueFromIndex[i])\n        else\n          fs.append(space.names[i]);\n        end;\n    result:=fs.get();\n  finally fs.free end;\n  end; // vardomain\n\n  procedure exec_();\n  var\n    s: string;\n    code: cardinal;\n  begin\n  s:=macroDequote(par(1));\n  if fileOrDirExists(s) then\n    s:=quoteIfAnyChar(' ', s)\n  else\n    if unnamedPars < 2 then\n      s:='';\n  if parExist(['out']) or parExist(['timeout']) or parExist(['exit code']) then\n    try\n      spaceIf(captureExec(macroDequote(p)+nonEmptyConcat(' ', s), s, code, parF('timeout',2)));\n      try setVar(parEx('exit code'), intToStr(code)) except end;\n      setVar(parEx('out'), s);\n    except end\n  else\n    spaceIf(exec(macroDequote(p), s))\n  end; // exec_\n\n  procedure memberOf();\n  var\n    a: Paccount;\n    s: string;\n  begin\n  result:='';\n  s:=par(1, 'user');\n  if s > '' then\n    a:=getAccount(s, TRUE)\n  else if assigned(md.cd) then\n    a:=md.cd.account\n  else\n    exit;\n  s:=par(0,'group');\n  if s = '' then // you don't tell me the group, i'll tell you the groups\n    begin\n    result:=join(';',expandLinkedAccounts(md.cd.account));\n    exit;\n    end;\n  a:=findEnabledLinkedAccount(a, split(';',s));\n  if assigned(a) then result:=a.user;\n  end; // memberOf\n\n  procedure canArchive(f:Tfile);\n  begin trueIf(assigned(f) and f.hasRecursive(FA_ARCHIVABLE) or (f = NIL) and md.archiveAvailable) end;\n\n  procedure actionAllowed(action:TfileAction);\n  var\n    f: Tfile;\n    local: boolean;\n  begin // note: \"delete\" is meant for files inside the folder bearing the permission\n  local:=FALSE;\n  result:='';\n  try\n    f:=mainfrm.findFileByURL(parEx('path'), md.folder);\n    if f = NIL then exit;\n    local:=TRUE;\n  except\n    if action = FA_ACCESS then f:=md.f\n    else f:=md.folder;\n    end;\n  trueIf(accountAllowed(action, md.cd, f));\n  if local then\n    freeIfTemp(f);\n  end; // actionAllowed\n\n  procedure cookie();\n\n    function timeForCookies(v:string):string;\n    var\n      t: Tdatetime;\n    begin\n    try\n      if charInSet(getFirstChar(v), ['+','-']) then\n        t:=now()+strToFloat(v)\n      else\n        try t:=maybeUnixTime(strToFloat(v));\n        except t:=strToDateTime(v) end;\n      result:=dateToHTTP(localToGMT(t));\n    except result:=v end;\n    end; // timeForCookies\n\n    function getPairs():TStringDynArray;\n    var\n      i: integer;\n      k, v: string;\n    begin\n    result:=NIL;\n    for i:=1 to pars.count-1 do\n      begin\n      v:=pars[i];\n      k:=trim(chop('=', v));\n      v:=trim(v);\n      if k = 'value' then // this is handled below\n        continue\n      else if k = 'expires' then\n        v:=timeForCookies(v);\n      addArray(result, [k, v]);\n      end;\n    end; // getPairs\n\n  begin\n  if not satisfied(md.cd) then exit;\n  result:='';\n  try md.cd.conn.setCookie(p, parEx('value'), getPairs());\n  except result:=noMacrosAllowed(md.cd.conn.getCookie(p)) end; // there was no \"value\" to set, so just read\n  end; // cookie\n\n  procedure regexp();\n  var\n    subs: TStringDynArray;\n    subj, s, mods: string;\n    i: integer;\n  begin\n  // input from variable or text\n  try subj:=getVar(parEx('var'));\n  except subj:=par(1) end;\n  // check\n  mods:='m'+if_(isFalse(par('case')),'i');\n  p:=macroDequote(p);\n  i:=reMatch(subj, p, mods, 1, @subs);\n  if i <= 0 then\n    begin\n    result:='';\n    exit;\n    end;\n  // return first match, or position\n  if assigned(subs) then\n    result:=subs[min(length(subs)-1,1)]\n  else\n    result:=intToStr(i);\n  // eventually communicate matched substrings\n  try\n    parEx('sub');\n    s:='';\n    for i:=0 to length(subs)-1 do\n      s:=s+format('%d=%s'+CRLF, [i, subs[i]]);\n    setVar(parEx('sub'), s);\n  except end;\n\n  try\n    result:=reReplace(subj, p, parEx('replace'), mods);\n    setVar(parEx('var'), result); // we put the output where we got the input\n    result:='';\n  except end;\n  end; // regexp\n\n  procedure dir();\n  var\n    sr: TSearchRec;\n    fs: TfastStringAppend;\n    sep, s: string;\n  begin\n  result:='';\n  // user can specify a file mask, or a folder path\n  s:=excludeTrailingPathDelimiter(p);\n  if directoryExists(s) then\n    s:=s+'\\*';\n  if findfirst(s, faAnyFile, sr) <> 0 then exit;\n\n  sep:=par('separator', FALSE, '|');\n  try\n    fs:=TfastStringAppend.create();\n      repeat\n      if (sr.name = '.') or (sr.name = '..') then continue;\n      if fs.length > 0 then\n        fs.append(sep);\n      fs.append(sr.name);\n      until findNext(sr) <> 0;\n    result:=fs.get();\n  finally\n    findClose(sr);\n    freeAndNIL(fs);\n    end;\n  end; // dir\n\n  procedure handleSymbol();\n  var\n    s, usr: string;\n    i: integer;\n  begin\n  // search for the symbol in the translation table\n  i:=length(md.table)-2;\n  if odd(i) then dec(i); // ensure the table has a legal length\n  while (i >= 0) and not sameText(md.table[i], name) do\n    dec(i,2);\n  if i >= 0 then\n    begin\n    result:=md.table[i+1];\n    exit;\n    end;\n\n  result:=name; // by default, an unrecognized symbol remains the same (just as the song)\n\n  // most symbols here, are here because they can be heavy to calculate, so we ensure we do\n  // it only upon request. others are for centralization.\n\n  if ansiStartsText('%sym-', name) then // legacy: surpassed by {.section.}\n    result:=tpl[substr(name,2,-1)]\n  else if name = '%item-icon%' then\n    result:=first(getItemIcon(md.f), name)\n  else if name = '%item-archive%' then\n    if assigned(md.f) and assigned(md.tpl) and md.f.hasRecursive(FA_ARCHIVABLE) then result:=md.tpl['item-archive']\n    else result:=''\n  else if name = '%item-dl-count%' then\n    if md.f = NIL then result:=''\n    else result:=intToStr(md.f.DLcount)\n  else if name = '%connections%' then\n    result:=intToStr(srv.conns.count)\n  else if name = '%style%' then\n    result:=tpl['style']\n  else if name = '%timestamp%' then\n    result:=dateTimeToStr(now())\n  else if name = '%date%' then\n    result:=dateToStr(now())\n  else if name = '%time%' then\n    result:=timeToStr(now())\n  else if name = '%now%' then\n    result:=floatToStr(now())\n  else if name = '%version%' then\n    result:=main.VERSION\n  else if name = '%build%' then\n    result:=VERSION_BUILD\n  else if name = '%uptime%' then\n    result:=uptimestr()\n  else if name = '%speed-out%' then\n    result:=floatToStrF(srv.speedOut/1000, ffFixed, 7,2)\n  else if name = '%speed-in%' then\n    result:=floatToStrF(srv.speedIn/1000, ffFixed, 7,2)\n  else if name = '%total-out%' then\n    result:=smartSize(outTotalOfs+srv.bytesSent)\n  else if name = '%total-in%' then\n    result:=smartSize(inTotalOfs+srv.bytesReceived)\n  else if name = '%total-downloads%' then\n    result:=intToStr(downloadsLogged)\n  else if name = '%total-hits%' then\n    result:=intToStr(hitsLogged)\n  else if name = '%total-uploads%' then\n    result:=intToStr(uploadsLogged)\n  else if name = '%number-addresses%' then\n    result:=intToStr(countIPs())\n  else if name = '%number-addresses-ever%' then\n    result:=intToStr(ipsEverConnected.count)\n  else if name = '%number-addresses-downloading%' then\n    result:=intToStr(countIPs(TRUE))\n  else if name = '%number-users%' then\n    result:=intToStr(countIPs(FALSE, TRUE))\n  else if name = '%number-users-downloading%' then\n    result:=intToStr(countIPs(TRUE, TRUE))\n  else if name = '%cwd%' then\n    result:=getCurrentDir()\n  else if name = '%port%' then\n    result:=srv.port;\n\n  if assigned(md.cd) then\n    begin\n    usr:=md.cd.user;\n    if name = '%host%' then\n      result:=getSafeHost(md.cd)\n    else if name = '%ip%' then\n      result:=md.cd.address\n    else if name = '%ip-to-name%' then\n      result:=localDNSget(md.cd.address)\n    else if name = '%lang%' then\n      result:=stripChars(copy(md.cd.conn.getHeader('Accept-Language'),1,2), ['a'..'z','A'..'Z'], TRUE)\n    else if name = '%url%' then\n      result:=macroQuote(md.cd.conn.request.url)\n    else if name = '%user%' then\n      result:=macroQuote(usr)\n    else if name = '%password%' then\n      result:=macroQuote(md.cd.conn.request.pwd)\n    else if name = '%loggedin%' then\n      result:=if_(usr>'', tpl['loggedin'])\n    else if name = '%login-link%' then\n      result:=if_(usr='', tpl['login-link'])\n    else if name = '%user-notes%' then\n      if md.cd.account = NIL then result:=''\n      else result:=md.cd.account.notes\n    else if name = '%stream-size%' then\n      result:=intToStr(md.cd.conn.bytesFullBody)\n    else if name = '%is-archive%' then\n      trueIf(md.cd.downloadingWhat=DW_ARCHIVE)\n    end;\n\n\n  if assigned(md.folder) then\n    if name = '%folder-item-comment%' then\n      result:=md.folder.getDynamicComment()\n    else if name = '%folder-comment%' then\n      begin\n      result:=md.folder.getDynamicComment();\n      if result > '' then\n        result:=replaceText(tpl['folder-comment'], '%item-comment%', result)\n      end\n    else if name = '%diskfree%' then\n      result:=smartSize(diskSpaceAt(md.folder.resource)-minDiskSpace*MEGA)\n    else if name = '%up%' then\n      result:=if_(assigned(md.tpl) and not md.folder.isRoot(), md.tpl['up'])\n    else if name = '%encoded-folder%' then\n      result:=md.folder.url(TRUE)\n    else if name = '%parent-folder%' then\n      result:=md.folder.parentURL()\n    else if name = '%folder-name%' then\n      result:=md.folder.name\n    else if name = '%folder-resource%' then\n      result:=md.folder.resource\n    else if name = '%folder%' then\n      with md.folder do result:=if_(isRoot(), '/', getFolder()+name+'/')\n  ;\n\n  if assigned(md.f) then\n    if name = '%item-name%' then\n      begin\n      s:=md.f.name;\n      if md.hideExt and md.f.isFile() then\n        setLength(s, length(s)-length(extractFileExt(s)) );\n      result:=htmlEncode(macroQuote(s))\n      end\n    else if name = '%item-type%' then\n      if md.f.isLink() then\n        result:='link'\n      else if md.f.isFolder() then\n        result:='folder'\n      else\n        result:='file'\n   else if name = '%item-size-b%' then\n      result:=intToStr(md.f.size)\n   else if name = '%item-size-kb%' then\n      result:=intToStr(md.f.size div KILO)\n    else if name = '%item-size%' then\n      result:=smartsize(md.f.size)\n    else if name = '%item-resource%' then\n      result:=macroQuote(md.f.resource)\n    else if name = '%item-ext%' then\n      result:=macroQuote(copy(extractFileExt(md.f.name), 2, MAXINT))\n    else if name = '%item-added-dt%' then\n      result:=floatToStr(md.f.atime)\n    else if name = '%item-modified-dt%' then\n      result:=floatToStr(md.f.mtime)\n    // these twos are actually redundant, {.time||when=%item-added-dt%.}\n    else if name = '%item-added%' then\n      result:=datetimeToStr(md.f.atime)\n    else if name = '%item-modified%' then\n      result:=if_(md.f.mtime=0, 'error', datetimeToStr(md.f.mtime))\n    else if name = '%item-comment%' then\n      result:=md.f.getDynamicComment(TRUE)\n    else if name = '%item-url%' then\n      result:=macroQuote(md.f.url())\n  ;\n\n  if assigned(md.f) and assigned(md.tpl) then\n    if name = '%new%' then\n      result:=if_(md.f.isNew(), md.tpl['newfile'])\n    else if name = '%comment%' then\n      result:=if_(md.f.getDynamicComment(TRUE) > '', md.tpl['comment'])\n  ;\n\n  if assigned(md.tpl) then\n    if name = '%archive%' then\n      result:=if_(md.archiveAvailable, md.tpl['archive']);\n\n  if ansiContainsText(name, 'folder') and not ansiContainsText(name, 'comment') then\n    result:=macroQuote(result);\n  end; // handleSymbol\n\n  function stringTotrayMessageType(s:string):TtrayMessageType;\n  begin\n  if compareText(s,'warning') = 0 then\n    result:=TM_WARNING\n  else if compareText(s,'error') = 0 then\n    result:=TM_ERROR\n  else if compareText(s,'info') = 0 then\n    result:=TM_INFO\n  else\n    result:=TM_NONE\n  end; // stringTotrayMessageType\n\n  function renameIt(src,dst:string):boolean;\n  var\n    srcReal, dstReal: string;\n  begin\n  srcReal:=uri2diskMaybe(src,NIL,FALSE);\n  dstReal:=uri2diskMaybeFolder(dst);\n  if isExtension(srcReal, '.lnk')\n  and not isExtension(src, '.lnk') then\n    dstReal:=dstReal+'.lnk';\n  if extractFilePath(dstReal)='' then\n    dstReal:=extractFilePath(srcReal)+dstReal;\n  result:=renameFile(srcReal, dstReal)\n  end; // renameIt\n\nvar\n  i64: int64;\n  i: integer;\n  r: Tdatetime;\n  s: string;\nbegin\ntry\n  assert(assigned(cbData), 'cbMacros: cbData=NIL');\n  md:=cbData;\n  if md.breaking then exit;\n  try\n\n    name:=fullmacro;\n    if (name[1] = '%') and (name[length(name)] = '%') then\n      begin\n      handleSymbol();\n      exit;\n      end;\n\n    if not mainfrm.enableMacrosChk.checked then\n      exit(fullMacro);\n\n    if pars.count = 0 then exit;\n    // extract first parameter as 'name'\n    name:=trim(pars[0]);\n    pars.delete(0);    // this operation is done with a memory move over pointers. Having few parameters normally, it's fast. We may eventually avoid this deletion and consider parameters starting from 1.\n    if name = '' then exit;\n    macroError('not supported or illegal parameters');\n    // eventually remove trailing\n    if pars.Count > 0 then\n      begin\n      p:=pars[pars.count-1];\n      if ansiEndsText('/'+name, p) then\n        begin\n        setLength(p, length(p)-length(name)-1);\n        pars[pars.count-1]:=p;\n        end;\n      end;\n\n    unnamedPars:=0;\n    for i:=0 to pars.count-1 do\n      begin\n      pars[i]:=replaceStr(pars[i], '{:|:}','|');\n      if (i = unnamedPars) and (pos('=',pars[i]) = 0) then\n        inc(unnamedPars);\n      end;\n\n    // handle aliases\n    if assigned(md.aliases) then\n      begin\n      s:=md.aliases.values[name];\n      if s > '' then\n        begin\n        if not ansiStartsStr(MARKER_OPEN, s) then\n          s:=MARKER_OPEN+s+MARKER_CLOSE;\n        call(s);\n        exit;\n        end;\n      end;\n\n    // here we try to handle some shortcuts.\n    // it's a special starting character that identifies the macro, and the rest of the name is a parameter.\n    p:=copy(name,2,MAXINT);\n\n    if name[1] = '$' then\n      section(0);\n\n    if name[1] = '!' then\n      // we look for they key (p) in {.^special:strings.} then in [special:strings]. If no luck, we try to output an eventual parameter, or the key itself.\n      try result:=first([fromTable('special:strings',p), md.tpl.getStrByID(p), par(0), p]) except end;\n\n    if name[1] = '^' then\n      try call(getVar(p), 0) except end;\n\n    if name[1] = '?' then  // shortcut for 'urlvar'\n      result:=urlvar(p);\n\n    p:=par(0); // a handy shortcut for the first parameter\n\n    // comment is for comments, or if you just want to trash the output of a macro.\n    // Careful: the comment itself (the parameter of this command) is executed as anything else, unless it's {:quoted:}\n    if name = 'comment' then\n      begin\n      result:='';\n      exit;\n      end;\n\n    // infix operators are macros in the form PARAMETER NAME PARAMETER. it's handy for comparisons.\n    infixOperators(['>=','<=','<>','!=','=','>','<']); // the order is important, because >= would be confused with =\n\n    // ok, fom here we have macros in the straight form NAME|PARAM|PARAM\n    name:=ansiLowercase(name);\n\n    if name = 'count' then\n      if satisfied(md.cd) then\n        result:=intToStr(md.cd.tplCounters.incInt(p)-1); // it can work even with no parameters\n\n    if name = 'time' then\n      begin\n      s:=par(0,'format');\n      r:=parF('when',now())+parF('offset',0);\n      if s = 'y' then result:=floatToStr(r)\n      else datetimeToString(result, first(s,'c'), r );\n      end;\n\n    if name = 'disconnect' then\n      disconnect();\n\n    if name = 'stop server' then\n      stopServer();\n    if name = 'start server' then\n      startServer();\n\n\n    if name = 'focus' then\n      begin\n      application.restore();\n      application.bringToFront();\n      result:='';\n      end;\n\n    if name = 'current downloads' then\n      result:=intToStr( countDownloads( par('ip'), par('user'), if_(sameText(par('file'), 'this'), md.f) as Tfile) );\n\n    if name = 'disconnection reason' then\n      begin\n      try\n        if isFalse(parEx('if')) then\n          begin\n          result:='';\n          exit;\n          end;\n      except end;\n      result:=md.cd.disconnectReason; // return the previous state\n      if pars.count > 0 then md.cd.disconnectReason:=p;\n      end;\n\n    if name = 'clipboard' then\n      if p = '' then\n        result:=clipboard.asText\n      else\n        begin\n        try setClip(getVar(parEx('var')))\n        except setClip(p) end;\n        result:='';\n        end;\n\n    if name = 'save vfs' then\n      begin\n      mainfrm.saveVFS(first(p,lastFileOpen));\n      result:='';\n      end;\n\n    if name = 'save cfg' then\n      begin\n      if p = 'file' then savemode:=SM_FILE\n      else if p = 'registry' then savemode:=SM_USER\n      else if p = 'global registry' then savemode:=SM_SYSTEM;\n      mainFrm.saveCFG();\n      result:='';\n      end;\n\n    if name = 'js encode' then\n      result:=jsEncode(p, first(par(1),'''\"'));\n\n    if name = 'base64' then\n      result:=base64encode(UTF8encode(p));\n    if name = 'base64decode' then\n      result:=utf8ToString(base64decode(ansistring(p)));\n    if name = 'md5' then\n      result:=strMD5(p);\n    if name = 'sha1' then\n      result:=strSHA1(p);\n\n    if name = 'vfs select' then\n      if pars.count = 0 then\n        try result:=selectedFile.url()\n        except result:='' end\n      else if p = 'next' then\n        if selectedFile = NIL then\n          spaceIf(FALSE)\n        else\n          begin\n          with mainFrm.filesBox do selected:=selected.getNext();\n          spaceIf(TRUE);\n          end\n      else\n        try\n          s:=parEx('path');\n          spaceIf(FALSE);\n          mainFrm.filesBox.selected:= mainFrm.findFilebyURL(s, NIL, FALSE).node;\n          spaceIf(TRUE);\n        except end;\n\n    if name = 'break' then\n      begin\n      result:='';\n      try\n        if isFalse(parEx('if')) then\n          exit;\n      except end;\n      try result:=parEx('result') except end;\n      md.breaking:=TRUE;\n      exit;\n      end;\n\n    if pars.Count < 1 then exit; // from here, only macros with parameters\n\n    if name = 'var domain' then\n      vardomain();\n\n    if name = 'dir' then\n      dir();\n\n    if name = 'no pipe' then\n      result:=replaceStr(substr(fullMacro, '|'), '|','{:|:}');\n\n    if name = 'pipe' then\n      result:=replaceStr(substr(fullMacro, '|'), '{:|:}','|');\n\n    if name = 'add to log' then\n      begin\n      try s:=getVar(parEx('var'))\n      except s:=p end;\n      mainfrm.add2log(s, md.cd, stringToColorEx(par(1,'color'), clDefault));\n      result:='';\n      end;\n\n    if name = 'mkdir' then\n      begin\n      s:=trim(uri2diskMaybeFolder(p));\n      spaceIf(not directoryExists(s) and forceDirectory(s));\n      end;\n\n    if name = 'chdir' then\n      begin\n      IOresult;\n      setCurrentDir(p);\n      spaceIf(IOresult=0);\n      end;\n\n    if name = 'encodeuri' then\n      encodeuri();\n\n    if name = 'decodeuri' then\n      result:=decodeURL(ansistring(p));\n\n    if name = 'set cfg' then\n      trueIf(mainfrm.setcfg(p));\n\n    if name = 'dialog' then\n      dialog();\n\n    if name = 'any macro marker' then\n      trueIf(anyMacroMarkerIn(first(loadTextfile(uri2diskMaybe(p)), p)));\n\n    if name = 'random' then\n      result:=randomFrom(listToArray(pars));\n\n    if name = 'random number' then\n      if pars.count = 1 then\n        result:=intToStr(random(1+parI(0)))\n      else\n        result:=intToStr(parI(0)+random(1+parI(1)-parI(0)));\n\n    if (name = 'force ansi') or (name = 'maybe utf8') then // pre-unicode legacy\n      result:=p;\n\n    if name = 'after the list' then\n      if md.afterTheList then\n        result:=macroDequote(p)\n      else\n        result:=MARKER_OPEN+fullMacro+MARKER_CLOSE;\n\n    if name = 'breadcrumbs' then\n      breadcrumbs();\n\n    if name = 'filename' then\n      result:=substr(p, lastDelimiter('\\/:',p)+1);\n\n    if name = 'filepath' then\n      begin\n      i:=lastDelimiter('\\/:',p);\n      if i = 0 then\n        result:=''\n      else\n        result:=substr(p, 1, i);\n      end;\n\n    if name = 'not' then\n      trueIf(isFalse(p));\n\n    if name = 'length' then\n      begin // don't trim\n      try s:=getVar(parEx('var', FALSE))\n      except s:=pars[0] end;\n      result:=intToStr(length(s));\n      end;\n\n    if name = 'load' then\n      load(p, par(1,'var'));\n\n    if name = 'load tpl' then\n      if satisfied(md.cd) then\n        begin\n        md.cd.tpl:=cachedTpls.getTplFor(p);\n        result:='';\n        end;\n\n    if name = 'filesize' then\n      begin\n      if reMatch(p, '^https?://', 'i!') > 0 then i64:=httpFileSize(p)\n      else i64:=sizeOfFile(uri2diskMaybe(p));\n      result:=intToStr(max(0,i64)); // we return 0 instead of -1 for non-existent files, t\n      end;\n\n    if name = 'filetime' then\n      result:=floatToStr(getMtime(p));\n\n    if name = 'header' then\n      if satisfied(md.cd) then\n        try result:=noMacrosAllowed(md.cd.conn.getHeader(ansistring(p))) except end;\n\n    if name = 'urlvar' then\n      result:=urlvar(p);\n\n    if name = 'postvar' then\n      if satisfied(md.cd) then\n        try\n          result:=noMacrosAllowed(md.cd.postVars.values[p]);\n          setVar(parEx('var'), result); // if no var is specified, it will break here, and result will have the value\n          result:='';\n        except end;\n\n    if name = 'section' then\n      section(1);\n\n    if name = 'trim' then\n      result:=p;\n\n    if name = 'lower' then\n      result:=ansiLowercase(p);\n\n    if name = 'upper' then\n      result:=ansiUppercase(p);\n\n    if name = 'abs' then\n      result:=floatToStr(abs(parF(0)));\n\n    if name = 'upload failed' then\n      begin\n      md.cd.uploadFailed:=p;\n      result:='';\n      end;\n\n    if name = 'is file protected' then\n      result:=if_(filematch(PROTECTED_FILES_MASK, parVar('var',0)), '1');\n\n    if name = 'get' then\n      try\n        if p = 'can recur' then trueIf(mainFrm.recursiveListingChk.Checked)\n        else if p = 'can upload' then actionAllowed(FA_UPLOAD)\n        else if p = 'can delete' then actionAllowed(FA_DELETE)\n        else if p = 'can access' then actionAllowed(FA_ACCESS)\n        else if p = 'can archive' then canArchive(md.folder)\n        else if p = 'can archive item' then canArchive(md.f)\n        else if p = 'url' then getUri()\n        else if p = 'stop spiders' then trueIf(mainFrm.stopSpidersChk.checked)\n        else if p = 'is new' then trueIf(md.f.isNew())\n        else if p = 'agent' then result:=md.cd.agent\n        else if p = 'tpl file' then result:=tplFilename\n        else if p = 'protocolon' then result:=protoColon()\n        else if p = 'speed limit' then result:=intToStr(round(speedLimit))\n        else if p = 'external address' then\n          begin\n          if externalIP = '' then getExternalAddress(externalIP);\n          result:=externalIP;\n          end\n        else if p = 'accounts' then\n          result:=join(';', getAccountList(\n            stringExists(par(1),['','users']),\n            stringExists(par(1),['','groups'])\n          ))\n        ;\n      except unsatisfied() end;\n\n    if name = 'call' then\n      try call(getVar(p), 1) except end;\n\n    if name = 'inc' then\n      inc_();\n    if name = 'dec' then\n      inc_(-1);\n\n    if name = 'chr' then\n      begin\n      result:='';\n      for i:=0 to pars.count-1 do\n        try result:=result+chr(strToInt(replaceStr(pars[i],'x','$')))\n        except end;\n      end;\n\n    if name = 'dequote' then\n      result:=macroDequote(p);\n\n    if name ='quote' then\n      begin\n      p:=macroDequote(p);\n      applyMacrosAndSymbols(p, cbMacros, cbData);\n      result:=macroQuote(p);\n      end;\n\n    if name = 'encode html' then\n      result:=htmlEncode(p);\n\n    if name = 'play' then\n      begin\n      result:='';\n      playSound(Pchar(p), 0, SND_ALIAS or SND_ASYNC or SND_NOWAIT);\n      end;\n\n    if name = 'delete' then\n      begin\n      s:=uri2diskMaybe(p,NIL,FALSE);\n      if isTrue(par('bin',TRUE,'1')) then\n        spaceIf(moveToBin(s, isTrue(par('forced'))))\n      else\n        spaceIf(deltree(s));\n      end;\n\n    if name = 'disk free' then\n      result:=intToStr(diskSpaceAt(uri2diskMaybe(p)));\n\n    if name = 'vfs to disk' then\n      if isAbsolutePath(p) then\n        result:=p\n      else if dirCrossing(p) and not ansiStartsStr('/', p) then\n        result:=expandFileName(includeTrailingPathDelimiter(md.folder.resource)+p)\n      else\n        result:=uri2disk(p, md.folder);\n\n    if name = 'exists' then\n      if ansiContainsStr(p, '/') then\n        trueIf(fileExistsByURL(p))\n      else\n        trueIf(fileOrDirExists(p));\n\n    if name = 'is file' then\n      trueIf(fileExists(p));\n\n    if name = 'mime' then\n      begin\n      result:='';\n      if satisfied(md.cd) then\n        md.cd.conn.reply.contentType:=ansistring(p);\n      end;\n\n    if name = 'calc' then\n      result:=floatToStr(evalFormula(p));\n\n    if name = 'smart size' then\n      result:=smartsize(strToInt64(p));\n\n    if name = 'round' then\n      result:=floatToStr(roundTo(parF(0), -parI(1, 0)));\n\n    if name = 'md5 file' then\n      result:=createFingerprint(p);\n\n    if name = 'exec' then\n      exec_();\n\n    if name = 'set speed limit for address' then\n      begin\n      if pars.count = 1 then\n        setSpeedLimitIP(parF(0))\n      else\n        with objByIp(p) do\n          begin\n          limiter.maxSpeed:=round(parF(1)*1000);\n          customizedLimiter:=TRUE;\n          end;\n      result:='';\n      end;\n\n    if name = 'set speed limit for connection' then\n      if satisfied(md.cd) then\n        try\n          if assigned(md.cd.limiter) then\n            begin\n            md.cd.limiter.maxSpeed:=round(parF(0)*1000);\n            exit;\n            end;\n          md.cd.limiter:=TspeedLimiter.create(round(parF(0)*1000));\n          md.cd.conn.limiters.add(md.cd.limiter);\n          srv.limiters.add(md.cd.limiter);\n          result:='';\n        except\n          md.cd.conn.limiters.remove(md.cd.limiter);\n          srv.limiters.remove(md.cd.limiter);\n          freeAndNIL(md.cd.limiter);\n          result:='';\n          end;\n\n    if name = 'member of' then\n      memberOf();\n\n    if name = 'add header' then\n      if satisfied(md.cd) then\n        begin\n        result:='';\n        // macro 'mime' should be used for content-type, but this test will save precious time to those who will be fooled by the presence this macro\n        if ansiStartsText('Content-Type:', p) then\n          md.cd.conn.reply.contentType:=ansistring(trim(substr(p, ':')))\n        else if ansiStartsText('Location:', p) then\n          with md.cd.conn.reply do\n            begin\n            mode:=HRM_REDIRECT;\n            url:=UTF8encode(trim(substr(p, ':')))\n            end\n        else\n          md.cd.conn.addHeader(ansistring(p), isTrue(par('overwrite',true,'1')));\n        end;\n\n    if name = 'remove header' then\n      if satisfied(md.cd) then\n        begin\n        result:='';\n        md.cd.conn.removeHeader(ansistring(p));\n        end;\n\n    if name = 'get ini' then\n      result:=getKeyFromString(mainFrm.getCfg(), p);\n\n    if name = 'set ini' then\n      begin\n      result:='';\n      mainfrm.setCfg(p);\n      end;\n\n    if name = 'set' then\n      begin\n      try s:=getVar(parEx('var'));\n      except\n        if pars.count < 2 then s:=''\n        else s:=macroDequote(pars[1]);\n        end;\n      if par('mode') = 'append' then\n        s:=getVar(p)+s\n      else if par('mode') = 'prepend' then\n        s:=s+getVar(p);\n      spaceIf(setVar(p, s));\n      end;\n\n    if name = 'notify' then\n      begin\n      tray.balloon(p, parF('timeout',3), stringTotrayMessageType(par('type')), par('title'));\n      result:='';\n      end;\n\n    if name = 'cookie' then\n      cookie();\n\n    if name = 'new account' then\n      newAccount();\n\n    if name = 'delete account' then\n      begin\n      deleteAccount(p);\n      result:='';\n      end;\n\n    if name = 'delete item' then\n      deleteItem();\n      \n    if pars.count < 2 then exit; // from here, only macros with at least 2 parameters\n\n    if name = 'set item' then\n      setItem();\n    if name = 'get item' then\n      getItem();\n\n    if name = 'while' then\n      while_();\n\n    if name = 'set table' then\n      setTable();\n\n    if name = 'add folder' then\n      addFolder();\n\n    if (name = 'save') or (name = 'append') then\n      save();\n\n    if name = 'rename' then\n      begin\n      spaceIf( not isExtension(par(1), '.lnk') and // security matters (by mars)\n        renameIt(p, par(1)) );\n      if (result > '') and not stopOnMacroRename then // should we stop recursion?\n        try\n          // by default, we'll stop after first stacked [on macro rename], but recursive=1 will remove this limit\n          stopOnMacroRename:=isFalse(par('recursive'));\n          runEventScript('on macro rename', toSA(['%old-name%',p,'%new-name%',par(1)]), md.cd);\n        finally\n          stopOnMacroRename:=FALSE;\n          end;\n      end;\n\n    if name = 'move' then\n      begin\n      s:=uri2diskMaybeFolder(par(1));\n      spaceIf((s>'') and movefile(uri2diskMaybe(p,NIL,FALSE), s));\n      end;\n\n    if name = 'copy' then\n      spaceIf(copyfile(uri2diskMaybe(p), uri2diskMaybeFolder(par(1))));\n\n    if name = 'from table' then\n      result:=fromTable(p, par(1));\n\n    if name = 'match' then\n      trueIf(filematch(p, par(1)));\n\n    if name = 'match address' then\n      trueIf(addressmatch(p, par(1)));\n\n    if name = 'regexp' then\n      regexp();\n\n    if name = 'pos' then\n      result:=intToStr(pos_(isTrue(par('case')), parVar('what', 0), parVar('var', 1), strToIntDef(par('from'), 1)));\n\n    if name = 'repeat' then\n      result:=dupeString(macroDequote(par(1)), strToIntDef(p,1));\n\n    if name = 'count substring' then\n      result:=intToStr(countSubstr(pars[0], par(1)));\n\n    if name = 'and' then\n      allLogic(TRUE);\n\n    if name = 'or' then\n      allLogic(FALSE);\n\n    if name = 'xor' then\n      trueIf(isTrue(p) xor isTrue(par(1)));\n\n    if name = 'add' then\n      result:=floatToStr(parF(0)+parF(1));\n    if name = 'sub' then\n      result:=floatToStr(parF(0)-parF(1));\n    if name = 'mul' then\n      result:=floatToStr(parF(0)*parF(1));\n    if name = 'div' then\n      result:=floatToStr(safeDiv(parF(0),parF(1)));\n    if name = 'mod' then\n      result:=intToStr(safeMod(parI(0),parI(1)));\n\n    if stringExists(name, ['min','max']) then\n      minOrMax();\n\n    if stringExists(name, ['if','if not']) then\n      if isFalse(p) xor (length(name) > 2) then result:=macroDequote(par(2))\n      else result:=macroDequote(par(1));\n\n    if stringExists(name, ['=','>','>=','<','<=','<>','!=']) then\n      trueIf(compare(name, p, par(1)));\n\n    if name = 'switch' then\n      switch();\n\n    if name = 'set account' then\n      setAccount();\n    if name = 'get account' then\n      getterAccount();\n\n    if name = 'cut' then\n      cut();\n\n    if pars.count < 3 then exit; // from here, only macros with at least 3 parameters\n\n    if name ='for each' then\n      foreach();\n\n    if name = 'substring' then\n      substring();\n\n    if name = 'replace' then\n      replace();\n\n    if name = 'convert' then\n      convert();\n\n    if pars.count < 4 then exit;\n\n    if name = 'for' then\n      for_();\n  finally\n    if mainfrm.macrosLogChk.checked then\n      begin\n      if not fileExists(MACROS_LOG_FILE) then\n        saveTextFile(MACROS_LOG_FILE, HEADER);\n      macrosLog(fullMacro, result, md.logTS);\n      md.logTS:=FALSE;\n      end;\n    end;\nexcept\n  if mainfrm.macrosLogChk.checked then\n    macrosLog(fullMacro, 'Exception, please report this bug on www.rejetto.com/forum/');\n  result:='';\n  end;\nend; // cbMacros\n\nfunction tryApplyMacrosAndSymbols(var txt:string; var md:TmacroData; removeQuotings:boolean=true):boolean;\nvar\n  s: string;\nbegin\nresult:=FALSE;\n\ntry\n  md.aliases:=defaultalias; // we don't even create a new object if not necessary\n  if assigned(md.tpl) then\n    begin\n    s:=md.tpl['special:alias'];\n    if s > '' then\n      begin\n      md.aliases:=THashedStringList.create;\n      md.aliases.text:=s;\n      md.aliases.addStrings(defaultAlias);\n      end;\n    end;\n\n  if md.cd = NIL then\n    begin\n    md.tempVars:=THashedStringList.create;\n    end;\n\n  md.logTS:=TRUE;\n  md.breaking:=FALSE;\n\n  try\n    applyMacrosAndSymbols(txt, cbMacros, @md, removeQuotings);\n    result:=TRUE;\n  except\n    on e:EtplError do mainFrm.setStatusBarText(format('Template error at %d,%d: %s: %s ...', [e.row,e.col,e.message,e.code]), 1000);\n    on Exception do raise;\n    end;\nfinally\n  if md.aliases <> defaultAlias then\n    freeAndNIL(md.aliases);\n  freeAndNIL(md.tempVars);  \n  end;\nend; // tryApplyMacrosAndSymbols\n\nfunction runScript(script:string; table:TstringDynArray=NIL; tpl_:Ttpl=NIL; f:Tfile=NIL; folder:Tfile=NIL; cd:TconnData=NIL):string;\nvar\n  md: TmacroData;\nbegin\nresult:=trim(script);\nif result = '' then exit;\nfillchar(md, sizeOf(md), 0);\nmd.tpl:=first(tpl_, tpl);\nmd.f:=f;\nmd.folder:=folder;\nmd.cd:=cd;\nmd.table:=table;\ntryApplyMacrosAndSymbols(result, md);\nend; // runScript\n\nfunction runEventScript(event:string; table:TStringDynArray=NIL; cd:TconnData=NIL):string;\nbegin\naddArray(table, ['%event%', event]);\nresult:=runScript(eventScripts[event], table, eventScripts, NIL, NIL, cd);\nend; // runEventScript\n\ninitialization\ncachedTpls:=TcachedTpls.create();\neventScripts:=Ttpl.create();\ndefaultAlias:=THashedStringList.create();\ndefaultAlias.caseSensitive:=FALSE;\ndefaultAlias.text:=getRes('alias');\nstaticVars:=THashedStringList.create;\ncurrentCFGhashed:=THashedStringList.create();\nwith staticVars do\n  objects[add('ini='+currentCFG)]:=currentCFGhashed;\n\nfinalization\nfreeAndNIL(cachedTpls);\nfreeAndNIL(eventScripts);\nfreeAndNIL(defaultAlias);\nfreeAndNIL(currentCFGhashed);\nstaticVars.free;\n\nend.\n"], "filenames": ["main.dfm", "main.pas", "scriptLib.pas"], "buggy_code_start_loc": [5, 4783, 1786], "buggy_code_end_loc": [3276, 4794, 1790], "fixing_code_start_loc": [5, 4784, 1786], "fixing_code_end_loc": [3286, 4801, 1787], "type": "CWE-120", "message": "rejetto HFS (aka HTTP File Server) v2.3m Build #300, when virtual files or folders are used, allows remote attackers to trigger an invalid-pointer write access violation via concurrent HTTP requests with a long URI or long HTTP headers.", "other": {"cve": {"id": "CVE-2020-13432", "sourceIdentifier": "cve@mitre.org", "published": "2020-06-08T18:15:11.710", "lastModified": "2021-04-06T13:15:13.887", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "rejetto HFS (aka HTTP File Server) v2.3m Build #300, when virtual files or folders are used, allows remote attackers to trigger an invalid-pointer write access violation via concurrent HTTP requests with a long URI or long HTTP headers."}, {"lang": "es", "value": "rejetto HFS (tambi\u00e9n se conoce como HTTP File Server) versi\u00f3n v2.3m Build #300, cuando se utilizan archivos o carpetas virtuales, permite a atacantes remotos desencadenar una violaci\u00f3n de acceso de escritura de puntero no v\u00e1lido por medio de peticiones HTTP concurrentes con un URI largo o encabezados HTTP largos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-120"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rejetto:http_file_server:2.3m:*:*:*:*:*:*:*", "matchCriteriaId": "578FE7E5-58F3-4CE0-9AC4-850FB81DD925"}]}]}], "references": [{"url": "http://hyp3rlinx.altervista.org/advisories/HFS-HTTP-FILE-SERVER-v2.3-REMOTE-BUFFER-OVERFLOW-DoS.txt", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "http://packetstormsecurity.com/files/157980/HFS-Http-File-Server-2.3m-Build-300-Buffer-Overflow.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2020/Jun/13", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "http://seclists.org/fulldisclosure/2021/Apr/12", "source": "cve@mitre.org"}, {"url": "https://github.com/rejetto/hfs2/commit/b8ebfc4e22948e1a61506cd66e397b61ea5ea5de", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://packetstormsecurity.com/files/157980/HFS-Http-File-Server-2.3m-Build-300-Buffer-Overflow.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://www.rejetto.com/hfs/?f=wn", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/rejetto/hfs2/commit/b8ebfc4e22948e1a61506cd66e397b61ea5ea5de"}}