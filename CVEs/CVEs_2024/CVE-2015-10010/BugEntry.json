{"buggy_code": ["from flask import current_app, request\nfrom flask_restful import Resource, abort\nfrom dns import reversename, rdatatype\nfrom dns.resolver import NXDOMAIN, NoNameservers\n\nfrom resolverapi.util import is_valid_hostname, is_valid_rdtype, is_valid_ip\nfrom resolverapi.util.dns_query import parse_query\nfrom resolverapi import dns_resolver\n\nimport time\nfrom dns.exception import Timeout\n\n\nclass LookupRecordType(Resource):\n\n    def get(self, rdtype, domain):\n        t1 = time.time()\n\n        rdtype = rdtype.upper()\n        current_app.logger.info(\n            'Request from %s - %s', request.remote_addr, rdtype)\n        self.valid_args(rdtype, domain)\n\n        # Iterate through nameservers so that we can tell which one gets used.\n        nameservers = current_app.config['RESOLVERS']\n        for nameserver in nameservers:\n            dns_resolver.nameservers = [nameserver]\n            try:\n                answer = dns_resolver.query(\n                    domain, rdtype, raise_on_no_answer=False)\n                # Successful query\n                break\n            except (NoNameservers, NXDOMAIN):\n                # TODO: this should still follow the RFC\n                return {'message': \"No nameservers for %s\" % domain}, 404\n            except Timeout as e:\n                # Communication fail or timeout - try next nameserver\n                if nameserver is nameservers[-1]:\n                    current_app.logger.info(e)\n                    return {'message': 'All nameservers timed out.'}, 503\n                continue\n            except Exception as e:\n                current_app.logger.error(e)\n                return {'message': 'An unexpected error occured.'}, 500\n\n        t2 = time.time()\n        duration = t2 - t1\n\n        return parse_query(answer, nameserver, duration)\n\n    def valid_args(self, rdtype, domain):\n        if not is_valid_rdtype(rdtype):\n            abort(400, message=\"%s type is not supported\" % rdtype)\n        if not is_valid_hostname(domain):\n            abort(400, message=\"%s is not a valid domain name\" % domain)\n\n\nclass ReverseLookup(Resource):\n\n    def get(self, ip):\n        t1 = time.time()\n        self.valid_args(ip)\n\n        # Iterate through nameservers so that we can tell which one gets used.\n        nameservers = current_app.config['RESOLVERS']\n        for nameserver in nameservers:\n            dns_resolver.nameservers = [nameserver]\n            try:\n                # http://stackoverflow.com/a/19867936/1707152\n                answer = dns_resolver.query(\n                    reversename.from_address(ip), rdatatype.PTR,\n                    raise_on_no_answer=False)\n                # Successful query\n                break\n            except Timeout as e:\n                # Communication fail or timeout - try next nameserver\n                if nameserver is nameservers[-1]:\n                    current_app.logger.info(e)\n                    return {'message': 'All nameservers timed out.'}, 503\n                continue\n            except NXDOMAIN:\n                return {'message': 'No nameserver found for %s' % ip}, 404\n            except Exception as e:\n                current_app.logger.error(e)\n                return {'message': 'An unexpected error occured.'}, 500\n\n        t2 = time.time()\n        duration = t2 - t1\n\n        if answer is None:\n            return {'message': 'An unexpected error occured.'}, 500\n        return parse_query(answer, nameserver, duration)\n\n    def valid_args(self, ip):\n        if not is_valid_ip(ip):\n            abort(400, message=\"%s is not a valid ip address\" % ip)\n"], "fixing_code": ["from flask import current_app, request\nfrom flask_restful import Resource, abort\nfrom dns import reversename, rdatatype\nfrom dns.resolver import NXDOMAIN, NoNameservers\n\nfrom resolverapi.util import is_valid_hostname, is_valid_rdtype, is_valid_ip\nfrom resolverapi.util.dns_query import parse_query\nfrom resolverapi import dns_resolver\n\nimport time\nfrom dns.exception import Timeout\n\n\nclass LookupRecordType(Resource):\n\n    def get(self, rdtype, domain):\n        t1 = time.time()\n\n        rdtype = rdtype.upper()\n        current_app.logger.info(\n            'Request from %s - %s', request.remote_addr, rdtype)\n        self.valid_args(rdtype, domain)\n\n        # Iterate through nameservers so that we can tell which one gets used.\n        nameservers = current_app.config['RESOLVERS']\n        for nameserver in nameservers:\n            dns_resolver.nameservers = [nameserver]\n            try:\n                answer = dns_resolver.query(\n                    domain, rdtype, raise_on_no_answer=False)\n                # Successful query\n                break\n            except (NoNameservers, NXDOMAIN):\n                # TODO: this should still follow the RFC\n                return {'message': \"No nameservers for %s\" % domain}, 404\n            except Timeout as e:\n                # Communication fail or timeout - try next nameserver\n                if nameserver is nameservers[-1]:\n                    current_app.logger.info(e)\n                    return {'message': 'All nameservers timed out.'}, 503\n                continue\n            except Exception as e:\n                current_app.logger.error(e)\n                return {'message': 'An unexpected error occured.'}, 500\n\n        t2 = time.time()\n        duration = t2 - t1\n\n        return parse_query(answer, nameserver, duration)\n\n    def valid_args(self, rdtype, domain):\n        if not is_valid_rdtype(rdtype):\n            abort(400, message=\"The provided record type is not supported\")\n        if not is_valid_hostname(domain):\n            abort(400, message=\"The provided domain name is invalid\")\n\n\nclass ReverseLookup(Resource):\n\n    def get(self, ip):\n        t1 = time.time()\n        self.valid_args(ip)\n\n        # Iterate through nameservers so that we can tell which one gets used.\n        nameservers = current_app.config['RESOLVERS']\n        for nameserver in nameservers:\n            dns_resolver.nameservers = [nameserver]\n            try:\n                # http://stackoverflow.com/a/19867936/1707152\n                answer = dns_resolver.query(\n                    reversename.from_address(ip), rdatatype.PTR,\n                    raise_on_no_answer=False)\n                # Successful query\n                break\n            except Timeout as e:\n                # Communication fail or timeout - try next nameserver\n                if nameserver is nameservers[-1]:\n                    current_app.logger.info(e)\n                    return {'message': 'All nameservers timed out.'}, 503\n                continue\n            except NXDOMAIN:\n                return {'message': 'No nameserver found for the provided IP'}, 404\n            except Exception as e:\n                current_app.logger.error(e)\n                return {'message': 'An unexpected error occured.'}, 500\n\n        t2 = time.time()\n        duration = t2 - t1\n\n        if answer is None:\n            return {'message': 'An unexpected error occured.'}, 500\n        return parse_query(answer, nameserver, duration)\n\n    def valid_args(self, ip):\n        if not is_valid_ip(ip):\n            abort(400, message=\"The provided ip address is invalid\")\n"], "filenames": ["resolverapi/endpoints.py"], "buggy_code_start_loc": [53], "buggy_code_end_loc": [97], "fixing_code_start_loc": [53], "fixing_code_end_loc": [97], "type": "CWE-79", "message": "A vulnerability was found in OpenDNS OpenResolve. It has been rated as problematic. Affected by this issue is the function get of the file resolverapi/endpoints.py of the component API. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is c680170d5583cd9342fe1af43001fe8b2b8004dd. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217196.", "other": {"cve": {"id": "CVE-2015-10010", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-02T21:15:10.207", "lastModified": "2023-01-09T19:06:19.233", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in OpenDNS OpenResolve. It has been rated as problematic. Affected by this issue is the function get of the file resolverapi/endpoints.py of the component API. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is c680170d5583cd9342fe1af43001fe8b2b8004dd. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217196."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.1, "baseSeverity": "LOW"}, "exploitabilityScore": 1.6, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 2.6}, "baseSeverity": "LOW", "exploitabilityScore": 4.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cisco:openresolve:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-08-03", "matchCriteriaId": "3777CAAC-B752-4033-AD3C-5C878DA0E998"}]}]}], "references": [{"url": "https://github.com/opendns/OpenResolve/commit/c680170d5583cd9342fe1af43001fe8b2b8004dd", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217196", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217196", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/opendns/OpenResolve/commit/c680170d5583cd9342fe1af43001fe8b2b8004dd"}}