{"buggy_code": ["import base64\nimport simplejson\nimport cgi\n\nfrom twisted.web import server, resource\nfrom twisted.application import internet\nfrom twisted.web.server import Site, GzipEncoderFactory\nimport twisted.web.resource\nfrom twisted.web.resource import Resource, EncodingResourceWrapper, \\\n                                 ForbiddenResource, NoResource\n\nfrom twisted.web.static import File, DirectoryLister, Data\n\nfrom twisted.web.util import Redirect\nfrom twisted.logger import Logger\nlog = Logger()\nfrom jinja2 import Environment, FileSystemLoader\nimport pyqrcode\n\n\nfrom tokens import Canarytoken\nfrom canarydrop import Canarydrop\nfrom queries import is_valid_email, save_canarydrop, save_imgur_token, get_canarydrop,\\\n                    create_linkedin_account, create_bitcoin_account,\\\n                    get_linkedin_account, get_bitcoin_account, \\\n                    save_clonedsite_token, get_all_canary_sites, get_canary_google_api_key,\\\n                    is_webhook_valid, get_aws_keys, get_all_canary_domains, is_email_blocked\n\nfrom exception import NoCanarytokenPresent\nfrom ziplib import make_canary_zip\nfrom msword import make_canary_msword\nfrom pdfgen import make_canary_pdf\nfrom msexcel import make_canary_msexcel\nfrom kubeconfig import get_kubeconfig\nfrom mysql import make_canary_mysql_dump\nfrom authenticode import make_canary_authenticode_binary\nfrom msreg import make_canary_msreg\nimport settings\nimport datetime\nimport tempfile\nimport hashlib\nimport os\nfrom cStringIO import StringIO\nimport csv\nimport wireguard as wg\n\nenv = Environment(loader=FileSystemLoader('templates'),\n                  extensions=['jinja2.ext.loopcontrols'])\n\nwith open('/srv/templates/error_http.html', 'r') as f:\n    twisted.web.resource.ErrorPage.template = f.read()\n\nclass GeneratorPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        template = env.get_template('generate_new.html')\n        sites_len = len(get_all_canary_sites())\n        now = datetime.datetime.now()\n        return template.render(settings=settings, sites_len=sites_len, now=now).encode('utf8')\n\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { 'Error': None,\n                     'Error_Message': None,\n                     'Url': \"\",\n                     'Url_components': None,\n                     'Token': \"\",\n                     'Email': \"\",\n                     'Hostname': \"\",\n                     'Auth': ''}\n\n        try:\n            try:\n                token_type = request.args.get('type', None)[0]\n                if token_type not in ['web',\n                                      'dns',\n                                      'cmd',\n                                      'web_image',\n                                      'ms_word',\n                                      'ms_excel',\n                                      'adobe_pdf',\n                                      'wireguard',\n                                      'windows_dir',\n                                      'clonedsite',\n                                      'qr_code',\n                                      'svn',\n                                      'smtp',\n                                      'sql_server',\n                                      'my_sql',\n                                      'aws_keys',\n                                      'signed_exe',\n                                      'fast_redirect',\n                                      'slow_redirect',\n                                      'kubeconfig',\n                                      'log4shell']:\n                    raise Exception()\n            except:\n                raise Exception('Unknown type')\n\n            try:\n                email = request.args.get('email', None)[0]\n                webhook = request.args.get('webhook', None)[0]\n                if not email and not webhook:\n                    response['Error'] = 1\n                    response['Error_Message'] = 'No email/webhook supplied'\n                    raise Exception('No email/webhook supplied')\n            except IndexError:\n                response['Error'] = 1\n                response['Error_Message'] = 'No email supplied'\n                raise Exception('No email supplied')\n            try:\n                memo  = ''.join(request.args.get('memo', None))\n                if not memo:\n                    response['Error'] = 2\n                    response['Error_Message'] = 'No memo supplied'\n                    raise Exception('No memo supplied')\n            except TypeError:\n                response['Error'] = 2\n                response['Error_Message'] = 'No memo supplied'\n                raise Exception('No memo supplied')\n\n            if webhook and not is_webhook_valid(webhook):\n                response['Error'] = 3\n                response['Error_Message'] = 'Invalid webhook supplied. Confirm you can POST to this URL.'\n                raise Exception('Invalid webhook supplied. Confirm you can POST to this URL.')\n\n            if email:\n                if not is_valid_email(email):\n                    response['Error'] = 5\n                    response['Error_Message'] = 'Invalid email supplied'\n                    raise Exception('Invalid email supplied')\n                if is_email_blocked(email):\n                    response['Error'] = 6\n                    response['Error_Message'] = 'Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal'\n                    raise Exception('Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal')\n\n            alert_email_enabled = False if not email else True\n            alert_webhook_enabled = False if not webhook else True\n\n            if token_type != 'kubeconfig':\n                canarytoken = Canarytoken()\n            else:\n                kubeconfig = get_kubeconfig()\n                if kubeconfig is not None:\n                    canarytoken = Canarytoken(value=kubeconfig[0])\n                else:\n                    raise Exception('Kubeconfig was not generated.')\n\n            if token_type == \"web\":\n                #always enable the browser scanner by default\n                browser_scanner = True\n            else:\n                browser_scanner = False\n\n            canarydrop = Canarydrop(type=token_type,generate=True,\n                                  alert_email_enabled=alert_email_enabled,\n                                  alert_email_recipient=email,\n                                  alert_webhook_enabled=alert_webhook_enabled,\n                                  alert_webhook_url=webhook,\n                                  canarytoken=canarytoken.value(),\n                                  memo=memo,\n                                  browser_scanner_enabled=browser_scanner)\n\n            if settings.TWILIO_ENABLED:\n                try:\n                    if not request.args['mobile'][0]:\n                        raise KeyError\n\n                    canarydrop['alert_sms_recipient'] = request.args['mobile'][0]\n                    canarydrop['alert_sms_enabled'] = True\n                except KeyError:\n                    canarydrop['alert_sms_recipient'] = ''\n                    canarydrop['alert_sms_enabled'] = False\n\n            save_canarydrop(canarydrop)\n\n            if token_type != \"kubeconfig\":\n                response['Url'] = canarydrop.get_url()\n                response['Hostname'] = canarydrop.get_hostname()\n                response['Url_components'] = list(canarydrop.get_url_components())\n\n            response['Token'] = canarytoken.value()\n            response['Auth'] = canarydrop['auth']\n            response['Email'] = email\n            save_canarydrop(canarydrop)\n\n\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': canarytoken.value()}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                canarydrop['clonedsite'] = clonedsite\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                pass\n\n            try:\n                procname = request.args['cmd_process'][0]\n                if not procname:\n                    raise KeyError\n                \n                canarydrop['cmd_process'] = procname\n                canarydrop['memo'] += \"\\r\\n\\r\\n(This token was created to monitor the execution of: \" + procname + \")\"\n                save_canarydrop(canarydrop)\n            except (IndexError, KeyError):\n                pass\n\n\n            try:\n                if not request.args.get('type', None)[0] == 'qr_code':\n                    raise Exception()\n                response['qrcode_png'] = canarydrop.get_qrcode_data_uri_png()\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'aws_keys':\n                    raise Exception()\n                keys = get_aws_keys(token=canarytoken.value(), server=get_all_canary_domains()[0])\n                if not keys:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve AWS API keys. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['aws_access_key_id'] = keys[0]\n                response['aws_secret_access_key'] = keys[1]\n                response['region'] = keys[2]\n                response['output'] = keys[3]\n                canarydrop['aws_access_key_id'] = keys[0]\n                canarydrop['aws_secret_access_key'] = keys[1]\n                canarydrop['region'] = keys[2]\n                canarydrop['output'] = keys[3]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'kubeconfig':\n                    raise Exception()\n                if kubeconfig is None:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve the kubeconfig. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['kubeconfig'] = kubeconfig[1]\n                canarydrop['kubeconfig'] = kubeconfig[1]\n                canarydrop['generate'] = False\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'web_image':\n                    raise Exception()\n\n                if not settings.WEB_IMAGE_UPLOAD_PATH:\n                    raise Exception(\"Image upload not supported, set CANARY_WEB_IMAGE_UPLOAD_PATH in frontend.env.\")\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )\n\n                filename = fields['web_image'].filename\n                filebody = fields['web_image'].value\n\n                if not filename.lower().endswith(('.png','.gif','.jpg')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded image must be a PNG, GIF or JPG.'\n                    raise Exception('Uploaded image must be a PNG, GIF or JPG')\n                ext = filename.lower()[-4:]\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                #create a random local filename\n                r = hashlib.md5(os.urandom(32)).hexdigest()\n                filepath = os.path.join(settings.WEB_IMAGE_UPLOAD_PATH,\n                                    r[:2],\n                                    r[2:])+ext\n                if not os.path.exists(os.path.dirname(filepath)):\n                    try:\n                        os.makedirs(os.path.dirname(filepath))\n                    except OSError as exc: # Guard against race condition\n                        if exc.errno != errno.EEXIST:\n                            raise\n\n                with open(filepath, \"w\") as f:\n                    f.write(filebody)\n\n                canarydrop['web_image_enabled'] = True\n                canarydrop['web_image_path'] = filepath\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'signed_exe':\n                    raise Exception()\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )#hacky way to parse out file contents and filenames\n                filename = fields['signed_exe'].filename\n                filebody = fields['signed_exe'].value\n\n                if not filename.lower().endswith(('exe','dll')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded authenticode file must be an exe or dll.'\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE/(1024*1024))) + 'MB.'\n                    raise Exception('File too large')\n\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                response['file_name'] = filename\n                response['file_contents'] = \"data:octet/stream;base64,\"+base64.b64encode(signed_contents)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'fast_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'slow_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            if token_type == 'wireguard':\n                canarydrop['wg_key'] = wg.generateCanarytokenPrivateKey(canarydrop[\"canarytoken\"])\n                save_canarydrop(canarydrop)\n                response['wg_conf'] = canarydrop.get_wg_conf()\n                response['qr_code'] = canarydrop.get_wg_qrcode()\n\n        except Exception as e:\n            if response['Error'] is None:\n                response['Error'] = 255\n                log.error('Unexpected error: {err}'.format(err=e))\n\n        return simplejson.dumps(response)\n\nclass DownloadPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            auth   = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'zip':\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.zip'\\\n                                  .format(token=token))\n                return make_canary_zip(hostname=\n                            canarydrop.get_hostname(with_random=False))\n            elif fmt == 'msword':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".wordprocessingml.document\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.docx'\\\n                                  .format(token=token))\n                return make_canary_msword(url=canarydrop.get_url())\n            elif fmt == 'msexcel':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".spreadsheetml.sheet\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.xlsx'\\\n                                  .format(token=token))\n                return make_canary_msexcel(url=canarydrop.get_url())\n            elif fmt == 'cmd':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\", 'attachment; filename={token}.reg'.format(token=token))\n                return make_canary_msreg(url=canarydrop.get_hostname(), process_name=canarydrop['cmd_process'])\n            elif fmt == 'pdf':\n                request.setHeader(\"Content-Type\", \"application/pdf\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.pdf'\\\n                                  .format(token=token))\n                return make_canary_pdf(hostname=canarydrop.get_hostname(nxdomain=True, with_random=False))\n            elif fmt == 'awskeys':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=credentials')\n                text=\"[default]\\naws_access_key={id}\\naws_secret_access_key={k}\\nregion={r}\\noutput={o}\"\\\n                        .format(id=canarydrop['aws_access_key_id'], k=canarydrop['aws_secret_access_key'], r=canarydrop['region'], o=canarydrop['output'])\n                return text\n            elif fmt == 'kubeconfig':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=kubeconfig')\n                return base64.b64decode(canarydrop['kubeconfig']).encode('utf-8')\n            elif fmt == 'slackapi':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=slack_creds')\n                text=\"# Slack API key\\nslack_api_key = {key}\".format(key=canarydrop['slack_api_key'])\n                return text\n            elif fmt == 'incidentlist_json':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.json'\\\n                                  .format(token=token))\n                return simplejson.dumps(canarydrop['triggered_list'], indent=4)\n            elif fmt == 'incidentlist_csv':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.csv'\\\n                                  .format(token=token))\n                csvOutput = StringIO()\n                incident_list = canarydrop['triggered_list']\n\n                writer = csv.writer(csvOutput)\n\n                details = set()\n                for key in incident_list:\n                    for element in incident_list[key].keys():\n                        details.add(element)\n                details = list(details)\n\n                headers = [\"Timestamp\"] + details\n                writer.writerow(headers)\n\n                for key in incident_list:\n                    items = []\n                    for item in details:\n                        items.append(incident_list[key].get(item, 'N/A'))\n                    data = [datetime.datetime.fromtimestamp(float(key)).strftime('%Y-%m-%d %H:%M:%S.%s')] + items\n                    writer.writerow(data)\n\n                return csvOutput.getvalue()\n            elif fmt == \"my_sql\":\n                encoded   = request.args.get('encoded', \"true\")[0] == \"true\"\n\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_mysql_dump.sql.gz'\\\n                                  .format(token=token))\n                return make_canary_mysql_dump(canarydrop=canarydrop, encoded=encoded)\n\n        except Exception as e:\n            log.error('Unexpected error in download: {err}'.format(err=e))\n\n        return NoResource().render(request)\n\n    def render_POST(self, request):\n        try:\n            fields = cgi.FieldStorage(\n                fp = request.content,\n                headers = request.getAllHeaders(),\n                environ = {'REQUEST_METHOD':'POST',\n                'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                }\n            )#hacky way to parse out file contents and filenames\n\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            if fmt not in ['authenticode']:\n                raise Exception('Unsupported token type for POST.')\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'authenticode':\n                filename = fields['file_for_signing'].filename\n                filebody = fields['file_for_signing'].value\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                if not filename.lower().endswith(('exe','dll')):\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                request.setHeader(\"Content-Type\", \"octet/stream\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={filename}.signed'\\\n                                  .format(filename=filename))\n                return signed_contents\n\n\n        except Exception as e:\n            log.error('Unexpected error in POST download: {err}'.format(err=e))\n            template = env.get_template('error.html')\n            return template.render(error=e.message).encode('utf8')\n\n        return NoResource().render(request)\n\nclass ManagePage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        try:\n            canarydrop['type']\n            template = env.get_template('manage_new.html')\n        except KeyError:\n            template = env.get_template('manage.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n    def render_POST(self, request):\n        try:\n            try:\n                token = request.args.get('token', None)[0]\n                auth  = request.args.get('auth',  None)[0]\n\n                canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n                if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                    raise NoCanarytokenPresent()\n\n            except (IndexError, TypeError, NoCanarytokenPresent):\n                return NoResource().render(request)\n\n            try:\n                email_enable_status = request.args.get('email_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                email_enable_status = False\n\n            try:\n                webhook_enable_status = request.args.get('webhook_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                webhook_enable_status = False\n\n            try:\n                sms_enable_status = request.args.get('sms_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                sms_enable_status = False\n\n            try:\n                web_image_status = request.args.get('web_image_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                web_image_status = False\n\n            try:\n                token_fmt = request.args.get('fmt', None)[0]\n            except (TypeError, IndexError):\n                token_fmt = ''\n\n            canarydrop['alert_email_enabled'] = email_enable_status\n            canarydrop['alert_webhook_enabled'] = webhook_enable_status\n            canarydrop['alert_sms_enabled']   = sms_enable_status\n            canarydrop['web_image_enabled']   = web_image_status\n\n            save_canarydrop(canarydrop=canarydrop)\n\n            g_api_key = get_canary_google_api_key()\n            template = env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, saved=True,\n                                        settings=settings, API_KEY=g_api_key).encode('utf8')\n\n        except Exception as e:\n            import traceback\n            log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))\n            template = env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, error=e,\n                                        settings=settings).encode('utf8')\n\nclass HistoryPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S.%f (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n            if canarydrop.get('memo'):\n                canarydrop['memo'] = unicode(canarydrop['memo'], \"utf8\")\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        template = env.get_template('history.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n\nclass LimitedFile(File):\n    def directoryListing(self):\n        dl = DirectoryLister(self.path,\n                               [],\n                               self.contentTypes,\n                               self.contentEncodings,\n                               self.defaultType)\n        dl.template = \"\"\n        return dl\n\nclass SettingsPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { }\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth',  None)[0]\n            setting = request.args.get('setting',  None)[0]\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if setting not in ['clonedsite', 'email_enable', 'webhook_enable',\n                               'sms_enable', 'browser_scanner_enable', 'web_image_enable']:\n                raise NoCanarytokenPresent()\n\n        except (IndexError, TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n\n        if setting == 'clonedsite':\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': token}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                return NoResource().render(request)\n        elif setting == \"email_enable\":\n            canarydrop['alert_email_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"webhook_enable\":\n            canarydrop['alert_webhook_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"sms_enable\":\n            canarydrop['alert_sms_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"browser_scanner_enable\":\n            canarydrop['browser_scanner_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"web_image_enable\":\n            canarydrop['web_image_enabled'] = request.args['value'][0] == \"on\"\n\n        save_canarydrop(canarydrop=canarydrop)\n        response['result'] = 'success'\n\n        return simplejson.dumps(response)\n\nclass AUP(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        now = datetime.datetime.now()\n        template = env.get_template('legal.html')\n        return template.render(now=now).encode('utf8')\n\nclass CanarytokensHttpd():\n    def __init__(self, port=80):\n        self.port = port\n\n        root = Resource()\n        root.putChild(\"\", Redirect(\"generate\"))\n        root.putChild(\"generate\", GeneratorPage())\n        root.putChild(\"manage\", ManagePage())\n        root.putChild(\"download\", DownloadPage())\n        root.putChild(\"settings\", SettingsPage())\n        root.putChild(\"history\", HistoryPage())\n        root.putChild(\"resources\", LimitedFile(\"/srv/templates/static\"))\n        root.putChild(\"legal\", AUP())\n\n        with open('/srv/templates/robots.txt', 'r') as f:\n            root.putChild(\"robots.txt\", Data(f.read(), \"text/plain\"))\n\n        wrapped = EncodingResourceWrapper(root, [GzipEncoderFactory()])\n        site = server.Site(wrapped)\n        if settings.DEBUG:\n            site.displayTracebacks = settings.DEBUG\n        else:\n            site.displayTracebacks = False\n        self.service = internet.TCPServer(self.port, site)\n        return None\n"], "fixing_code": ["import base64\nimport simplejson\nimport cgi\n\nfrom twisted.web import server, resource\nfrom twisted.application import internet\nfrom twisted.web.server import Site, GzipEncoderFactory\nimport twisted.web.resource\nfrom twisted.web.resource import Resource, EncodingResourceWrapper, \\\n                                 ForbiddenResource, NoResource\n\nfrom twisted.web.static import File, DirectoryLister, Data\n\nfrom twisted.web.util import Redirect\nfrom twisted.logger import Logger\nlog = Logger()\nfrom jinja2 import Environment, FileSystemLoader\nimport pyqrcode\n\n\nfrom tokens import Canarytoken\nfrom canarydrop import Canarydrop\nfrom queries import is_valid_email, save_canarydrop, save_imgur_token, get_canarydrop,\\\n                    create_linkedin_account, create_bitcoin_account,\\\n                    get_linkedin_account, get_bitcoin_account, \\\n                    save_clonedsite_token, get_all_canary_sites, get_canary_google_api_key,\\\n                    is_webhook_valid, get_aws_keys, get_all_canary_domains, is_email_blocked\n\nfrom exception import NoCanarytokenPresent\nfrom ziplib import make_canary_zip\nfrom msword import make_canary_msword\nfrom pdfgen import make_canary_pdf\nfrom msexcel import make_canary_msexcel\nfrom kubeconfig import get_kubeconfig\nfrom mysql import make_canary_mysql_dump\nfrom authenticode import make_canary_authenticode_binary\nfrom msreg import make_canary_msreg\nimport settings\nimport datetime\nimport tempfile\nimport hashlib\nimport os\nfrom cStringIO import StringIO\nimport csv\nimport wireguard as wg\n\nunsafe_env = Environment(loader=FileSystemLoader('templates'),\n                  extensions=['jinja2.ext.loopcontrols'])\nenv = Environment(loader=FileSystemLoader('templates'),\n                  extensions=['jinja2.ext.loopcontrols'],\n                  autoescape=True)\n\nwith open('/srv/templates/error_http.html', 'r') as f:\n    twisted.web.resource.ErrorPage.template = f.read()\n\nclass GeneratorPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        template = unsafe_env.get_template('generate_new.html')\n        sites_len = len(get_all_canary_sites())\n        now = datetime.datetime.now()\n        return template.render(settings=settings, sites_len=sites_len, now=now).encode('utf8')\n\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { 'Error': None,\n                     'Error_Message': None,\n                     'Url': \"\",\n                     'Url_components': None,\n                     'Token': \"\",\n                     'Email': \"\",\n                     'Hostname': \"\",\n                     'Auth': ''}\n\n        try:\n            try:\n                token_type = request.args.get('type', None)[0]\n                if token_type not in ['web',\n                                      'dns',\n                                      'cmd',\n                                      'web_image',\n                                      'ms_word',\n                                      'ms_excel',\n                                      'adobe_pdf',\n                                      'wireguard',\n                                      'windows_dir',\n                                      'clonedsite',\n                                      'qr_code',\n                                      'svn',\n                                      'smtp',\n                                      'sql_server',\n                                      'my_sql',\n                                      'aws_keys',\n                                      'signed_exe',\n                                      'fast_redirect',\n                                      'slow_redirect',\n                                      'kubeconfig',\n                                      'log4shell']:\n                    raise Exception()\n            except:\n                raise Exception('Unknown type')\n\n            try:\n                email = request.args.get('email', None)[0]\n                webhook = request.args.get('webhook', None)[0]\n                if not email and not webhook:\n                    response['Error'] = 1\n                    response['Error_Message'] = 'No email/webhook supplied'\n                    raise Exception('No email/webhook supplied')\n            except IndexError:\n                response['Error'] = 1\n                response['Error_Message'] = 'No email supplied'\n                raise Exception('No email supplied')\n            try:\n                memo  = ''.join(request.args.get('memo', None))\n                if not memo:\n                    response['Error'] = 2\n                    response['Error_Message'] = 'No memo supplied'\n                    raise Exception('No memo supplied')\n            except TypeError:\n                response['Error'] = 2\n                response['Error_Message'] = 'No memo supplied'\n                raise Exception('No memo supplied')\n\n            if webhook and not is_webhook_valid(webhook):\n                response['Error'] = 3\n                response['Error_Message'] = 'Invalid webhook supplied. Confirm you can POST to this URL.'\n                raise Exception('Invalid webhook supplied. Confirm you can POST to this URL.')\n\n            if email:\n                if not is_valid_email(email):\n                    response['Error'] = 5\n                    response['Error_Message'] = 'Invalid email supplied'\n                    raise Exception('Invalid email supplied')\n                if is_email_blocked(email):\n                    response['Error'] = 6\n                    response['Error_Message'] = 'Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal'\n                    raise Exception('Blocked email supplied. Please see our Acceptable Use Policy at https://canarytokens.org/legal')\n\n            alert_email_enabled = False if not email else True\n            alert_webhook_enabled = False if not webhook else True\n\n            if token_type != 'kubeconfig':\n                canarytoken = Canarytoken()\n            else:\n                kubeconfig = get_kubeconfig()\n                if kubeconfig is not None:\n                    canarytoken = Canarytoken(value=kubeconfig[0])\n                else:\n                    raise Exception('Kubeconfig was not generated.')\n\n            if token_type == \"web\":\n                #always enable the browser scanner by default\n                browser_scanner = True\n            else:\n                browser_scanner = False\n\n            canarydrop = Canarydrop(type=token_type,generate=True,\n                                  alert_email_enabled=alert_email_enabled,\n                                  alert_email_recipient=email,\n                                  alert_webhook_enabled=alert_webhook_enabled,\n                                  alert_webhook_url=webhook,\n                                  canarytoken=canarytoken.value(),\n                                  memo=memo,\n                                  browser_scanner_enabled=browser_scanner)\n\n            if settings.TWILIO_ENABLED:\n                try:\n                    if not request.args['mobile'][0]:\n                        raise KeyError\n\n                    canarydrop['alert_sms_recipient'] = request.args['mobile'][0]\n                    canarydrop['alert_sms_enabled'] = True\n                except KeyError:\n                    canarydrop['alert_sms_recipient'] = ''\n                    canarydrop['alert_sms_enabled'] = False\n\n            save_canarydrop(canarydrop)\n\n            if token_type != \"kubeconfig\":\n                response['Url'] = canarydrop.get_url()\n                response['Hostname'] = canarydrop.get_hostname()\n                response['Url_components'] = list(canarydrop.get_url_components())\n\n            response['Token'] = canarytoken.value()\n            response['Auth'] = canarydrop['auth']\n            response['Email'] = email\n            save_canarydrop(canarydrop)\n\n\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': canarytoken.value()}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                canarydrop['clonedsite'] = clonedsite\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                pass\n\n            try:\n                procname = request.args['cmd_process'][0]\n                if not procname:\n                    raise KeyError\n\n                canarydrop['cmd_process'] = procname\n                canarydrop['memo'] += \"\\r\\n\\r\\n(This token was created to monitor the execution of: \" + procname + \")\"\n                save_canarydrop(canarydrop)\n            except (IndexError, KeyError):\n                pass\n\n\n            try:\n                if not request.args.get('type', None)[0] == 'qr_code':\n                    raise Exception()\n                response['qrcode_png'] = canarydrop.get_qrcode_data_uri_png()\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'aws_keys':\n                    raise Exception()\n                keys = get_aws_keys(token=canarytoken.value(), server=get_all_canary_domains()[0])\n                if not keys:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve AWS API keys. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['aws_access_key_id'] = keys[0]\n                response['aws_secret_access_key'] = keys[1]\n                response['region'] = keys[2]\n                response['output'] = keys[3]\n                canarydrop['aws_access_key_id'] = keys[0]\n                canarydrop['aws_secret_access_key'] = keys[1]\n                canarydrop['region'] = keys[2]\n                canarydrop['output'] = keys[3]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'kubeconfig':\n                    raise Exception()\n                if kubeconfig is None:\n                    response['Error'] = 4\n                    response['Error_Message'] = 'Failed to retrieve the kubeconfig. Please contact support@thinkst.com.'\n                    raise Exception()\n                response['kubeconfig'] = kubeconfig[1]\n                canarydrop['kubeconfig'] = kubeconfig[1]\n                canarydrop['generate'] = False\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if not request.args.get('type', None)[0] == 'web_image':\n                    raise Exception()\n\n                if not settings.WEB_IMAGE_UPLOAD_PATH:\n                    raise Exception(\"Image upload not supported, set CANARY_WEB_IMAGE_UPLOAD_PATH in frontend.env.\")\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )\n\n                filename = fields['web_image'].filename\n                filebody = fields['web_image'].value\n\n                if not filename.lower().endswith(('.png','.gif','.jpg')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded image must be a PNG, GIF or JPG.'\n                    raise Exception('Uploaded image must be a PNG, GIF or JPG')\n                ext = filename.lower()[-4:]\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                #create a random local filename\n                r = hashlib.md5(os.urandom(32)).hexdigest()\n                filepath = os.path.join(settings.WEB_IMAGE_UPLOAD_PATH,\n                                    r[:2],\n                                    r[2:])+ext\n                if not os.path.exists(os.path.dirname(filepath)):\n                    try:\n                        os.makedirs(os.path.dirname(filepath))\n                    except OSError as exc: # Guard against race condition\n                        if exc.errno != errno.EEXIST:\n                            raise\n\n                with open(filepath, \"w\") as f:\n                    f.write(filebody)\n\n                canarydrop['web_image_enabled'] = True\n                canarydrop['web_image_path'] = filepath\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'signed_exe':\n                    raise Exception()\n\n                fields = cgi.FieldStorage(\n                    fp = request.content,\n                    headers = request.getAllHeaders(),\n                    environ = {'REQUEST_METHOD':'POST',\n                    'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                    }\n                )#hacky way to parse out file contents and filenames\n                filename = fields['signed_exe'].filename\n                filebody = fields['signed_exe'].value\n\n                if not filename.lower().endswith(('exe','dll')):\n                    response['Error'] = 4\n                    response['Message'] = 'Uploaded authenticode file must be an exe or dll.'\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE/(1024*1024))) + 'MB.'\n                    raise Exception('File too large')\n\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                response['file_name'] = filename\n                response['file_contents'] = \"data:octet/stream;base64,\"+base64.b64encode(signed_contents)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'fast_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            try:\n                if request.args.get('type', None)[0] != 'slow_redirect':\n                    raise Exception()\n\n                if not request.args['redirect_url'][0]:\n                    raise Exception()\n\n                canarydrop['redirect_url'] = request.args['redirect_url'][0]\n                save_canarydrop(canarydrop)\n            except:\n                pass\n\n            if token_type == 'wireguard':\n                canarydrop['wg_key'] = wg.generateCanarytokenPrivateKey(canarydrop[\"canarytoken\"])\n                save_canarydrop(canarydrop)\n                response['wg_conf'] = canarydrop.get_wg_conf()\n                response['qr_code'] = canarydrop.get_wg_qrcode()\n\n        except Exception as e:\n            if response['Error'] is None:\n                response['Error'] = 255\n                log.error('Unexpected error: {err}'.format(err=e))\n\n        return simplejson.dumps(response)\n\nclass DownloadPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            auth   = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'zip':\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.zip'\\\n                                  .format(token=token))\n                return make_canary_zip(hostname=\n                            canarydrop.get_hostname(with_random=False))\n            elif fmt == 'msword':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".wordprocessingml.document\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.docx'\\\n                                  .format(token=token))\n                return make_canary_msword(url=canarydrop.get_url())\n            elif fmt == 'msexcel':\n                request.setHeader(\"Content-Type\",\n                                  \"application/vnd.openxmlformats-officedocument\"+\\\n                                                      \".spreadsheetml.sheet\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.xlsx'\\\n                                  .format(token=token))\n                return make_canary_msexcel(url=canarydrop.get_url())\n            elif fmt == 'cmd':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\", 'attachment; filename={token}.reg'.format(token=token))\n                return make_canary_msreg(url=canarydrop.get_hostname(), process_name=canarydrop['cmd_process'])\n            elif fmt == 'pdf':\n                request.setHeader(\"Content-Type\", \"application/pdf\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}.pdf'\\\n                                  .format(token=token))\n                return make_canary_pdf(hostname=canarydrop.get_hostname(nxdomain=True, with_random=False))\n            elif fmt == 'awskeys':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=credentials')\n                text=\"[default]\\naws_access_key={id}\\naws_secret_access_key={k}\\nregion={r}\\noutput={o}\"\\\n                        .format(id=canarydrop['aws_access_key_id'], k=canarydrop['aws_secret_access_key'], r=canarydrop['region'], o=canarydrop['output'])\n                return text\n            elif fmt == 'kubeconfig':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=kubeconfig')\n                return base64.b64decode(canarydrop['kubeconfig']).encode('utf-8')\n            elif fmt == 'slackapi':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename=slack_creds')\n                text=\"# Slack API key\\nslack_api_key = {key}\".format(key=canarydrop['slack_api_key'])\n                return text\n            elif fmt == 'incidentlist_json':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.json'\\\n                                  .format(token=token))\n                return simplejson.dumps(canarydrop['triggered_list'], indent=4)\n            elif fmt == 'incidentlist_csv':\n                request.setHeader(\"Content-Type\", \"text/plain\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_history.csv'\\\n                                  .format(token=token))\n                csvOutput = StringIO()\n                incident_list = canarydrop['triggered_list']\n\n                writer = csv.writer(csvOutput)\n\n                details = set()\n                for key in incident_list:\n                    for element in incident_list[key].keys():\n                        details.add(element)\n                details = list(details)\n\n                headers = [\"Timestamp\"] + details\n                writer.writerow(headers)\n\n                for key in incident_list:\n                    items = []\n                    for item in details:\n                        items.append(incident_list[key].get(item, 'N/A'))\n                    data = [datetime.datetime.fromtimestamp(float(key)).strftime('%Y-%m-%d %H:%M:%S.%s')] + items\n                    writer.writerow(data)\n\n                return csvOutput.getvalue()\n            elif fmt == \"my_sql\":\n                encoded   = request.args.get('encoded', \"true\")[0] == \"true\"\n\n                request.setHeader(\"Content-Type\", \"application/zip\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={token}_mysql_dump.sql.gz'\\\n                                  .format(token=token))\n                return make_canary_mysql_dump(canarydrop=canarydrop, encoded=encoded)\n\n        except Exception as e:\n            log.error('Unexpected error in download: {err}'.format(err=e))\n\n        return NoResource().render(request)\n\n    def render_POST(self, request):\n        try:\n            fields = cgi.FieldStorage(\n                fp = request.content,\n                headers = request.getAllHeaders(),\n                environ = {'REQUEST_METHOD':'POST',\n                'CONTENT_TYPE': request.getAllHeaders()['content-type'],\n                }\n            )#hacky way to parse out file contents and filenames\n\n            token  = request.args.get('token', None)[0]\n            fmt    = request.args.get('fmt', None)[0]\n            if fmt not in ['authenticode']:\n                raise Exception('Unsupported token type for POST.')\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop:\n                raise NoCanarytokenPresent()\n\n            if fmt == 'authenticode':\n                filename = fields['file_for_signing'].filename\n                filebody = fields['file_for_signing'].value\n                if len(filebody) > int(settings.MAX_UPLOAD_SIZE):\n                    response['Error'] = 4\n                    response['Message'] = 'File too large. File size must be < ' + str(int(settings.MAX_UPLOAD_SIZE)/(1024*1024)) + 'MB.'\n                    raise Exception('File too large')\n\n                if not filename.lower().endswith(('exe','dll')):\n                    raise Exception('Uploaded authenticode file must be an exe or dll')\n                signed_contents = make_canary_authenticode_binary(hostname=\n                            canarydrop.get_hostname(with_random=False, as_url=True),\n                            filebody=filebody)\n                request.setHeader(\"Content-Type\", \"octet/stream\")\n                request.setHeader(\"Content-Disposition\",\n                                  'attachment; filename={filename}.signed'\\\n                                  .format(filename=filename))\n                return signed_contents\n\n\n        except Exception as e:\n            log.error('Unexpected error in POST download: {err}'.format(err=e))\n            template = unsafe_env.get_template('error.html')\n            return template.render(error=e.message).encode('utf8')\n\n        return NoResource().render(request)\n\nclass ManagePage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        try:\n            canarydrop['type']\n            template = unsafe_env.get_template('manage_new.html')\n        except KeyError:\n            template = unsafe_env.get_template('manage.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n    def render_POST(self, request):\n        try:\n            try:\n                token = request.args.get('token', None)[0]\n                auth  = request.args.get('auth',  None)[0]\n\n                canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n                if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                    raise NoCanarytokenPresent()\n\n            except (IndexError, TypeError, NoCanarytokenPresent):\n                return NoResource().render(request)\n\n            try:\n                email_enable_status = request.args.get('email_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                email_enable_status = False\n\n            try:\n                webhook_enable_status = request.args.get('webhook_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                webhook_enable_status = False\n\n            try:\n                sms_enable_status = request.args.get('sms_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                sms_enable_status = False\n\n            try:\n                web_image_status = request.args.get('web_image_enable', None)[0] == \"on\"\n            except (TypeError, IndexError):\n                web_image_status = False\n\n            try:\n                token_fmt = request.args.get('fmt', None)[0]\n            except (TypeError, IndexError):\n                token_fmt = ''\n\n            canarydrop['alert_email_enabled'] = email_enable_status\n            canarydrop['alert_webhook_enabled'] = webhook_enable_status\n            canarydrop['alert_sms_enabled']   = sms_enable_status\n            canarydrop['web_image_enabled']   = web_image_status\n\n            save_canarydrop(canarydrop=canarydrop)\n\n            g_api_key = get_canary_google_api_key()\n            template = unsafe_env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, saved=True,\n                                        settings=settings, API_KEY=g_api_key).encode('utf8')\n\n        except Exception as e:\n            import traceback\n            log.error('Exception in manage.html: {e}, {stack}'.format(e=e, stack=traceback.format_exc()))\n            template = unsafe_env.get_template('manage.html')\n            return template.render(canarydrop=canarydrop, error=e,\n                                        settings=settings).encode('utf8')\n\nclass HistoryPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth', None)[0]\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n            if canarydrop.get('triggered_list', None):\n                for timestamp in canarydrop['triggered_list'].keys():\n                    formatted_timestamp = datetime.datetime.fromtimestamp(\n                                float(timestamp)).strftime('%Y %b %d %H:%M:%S.%f (UTC)')\n                    canarydrop['triggered_list'][formatted_timestamp] = canarydrop['triggered_list'].pop(timestamp)\n\n            if canarydrop.get('memo'):\n                canarydrop['memo'] = unicode(canarydrop['memo'], \"utf8\")\n\n        except (TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n        g_api_key = get_canary_google_api_key()\n        now = datetime.datetime.now()\n        template = env.get_template('history.html')\n        return template.render(canarydrop=canarydrop, API_KEY=g_api_key, now=now).encode('utf8')\n\n\nclass LimitedFile(File):\n    def directoryListing(self):\n        dl = DirectoryLister(self.path,\n                               [],\n                               self.contentTypes,\n                               self.contentEncodings,\n                               self.defaultType)\n        dl.template = \"\"\n        return dl\n\nclass SettingsPage(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_POST(self, request):\n        request.responseHeaders.addRawHeader(b\"content-type\", b\"application/json\")\n        response = { }\n        try:\n            token = request.args.get('token', None)[0]\n            auth  = request.args.get('auth',  None)[0]\n            setting = request.args.get('setting',  None)[0]\n\n            canarydrop = Canarydrop(**get_canarydrop(canarytoken=token))\n            if not canarydrop['auth'] or canarydrop['auth'] != auth:\n                raise NoCanarytokenPresent()\n\n            if setting not in ['clonedsite', 'email_enable', 'webhook_enable',\n                               'sms_enable', 'browser_scanner_enable', 'web_image_enable']:\n                raise NoCanarytokenPresent()\n\n        except (IndexError, TypeError, NoCanarytokenPresent):\n            return NoResource().render(request)\n\n        if setting == 'clonedsite':\n            try:\n                clonedsite = request.args['clonedsite'][0]\n                if not clonedsite:\n                    raise KeyError\n\n                cloned_token = {'clonedsite': clonedsite,\n                               'canarytoken': token}\n                canarydrop.clonedsite_token = save_clonedsite_token(cloned_token)\n                save_canarydrop(canarydrop)\n                response['clonedsite_js'] =  canarydrop.get_cloned_site_javascript()\n                response['clonedsite'] =  clonedsite\n            except (IndexError, KeyError):\n                return NoResource().render(request)\n        elif setting == \"email_enable\":\n            canarydrop['alert_email_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"webhook_enable\":\n            canarydrop['alert_webhook_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"sms_enable\":\n            canarydrop['alert_sms_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"browser_scanner_enable\":\n            canarydrop['browser_scanner_enabled'] = request.args['value'][0] == \"on\"\n        elif setting == \"web_image_enable\":\n            canarydrop['web_image_enabled'] = request.args['value'][0] == \"on\"\n\n        save_canarydrop(canarydrop=canarydrop)\n        response['result'] = 'success'\n\n        return simplejson.dumps(response)\n\nclass AUP(resource.Resource):\n    isLeaf = True\n\n    def getChild(self, name, request):\n        if name == '':\n            return self\n        return Resource.getChild(self, name, request)\n\n    def render_GET(self, request):\n        now = datetime.datetime.now()\n        template = unsafe_env.get_template('legal.html')\n        return template.render(now=now).encode('utf8')\n\nclass CanarytokensHttpd():\n    def __init__(self, port=80):\n        self.port = port\n\n        root = Resource()\n        root.putChild(\"\", Redirect(\"generate\"))\n        root.putChild(\"generate\", GeneratorPage())\n        root.putChild(\"manage\", ManagePage())\n        root.putChild(\"download\", DownloadPage())\n        root.putChild(\"settings\", SettingsPage())\n        root.putChild(\"history\", HistoryPage())\n        root.putChild(\"resources\", LimitedFile(\"/srv/templates/static\"))\n        root.putChild(\"legal\", AUP())\n\n        with open('/srv/templates/robots.txt', 'r') as f:\n            root.putChild(\"robots.txt\", Data(f.read(), \"text/plain\"))\n\n        wrapped = EncodingResourceWrapper(root, [GzipEncoderFactory()])\n        site = server.Site(wrapped)\n        if settings.DEBUG:\n            site.displayTracebacks = settings.DEBUG\n        else:\n            site.displayTracebacks = False\n        self.service = internet.TCPServer(self.port, site)\n        return None\n"], "filenames": ["httpd_site.py"], "buggy_code_start_loc": [46], "buggy_code_end_loc": [745], "fixing_code_start_loc": [47], "fixing_code_end_loc": [748], "type": "CWE-79", "message": "Canarytokens is an open source tool which helps track activity and actions on your network. A Cross-Site Scripting vulnerability was identified in the history page of triggered Canarytokens prior to sha-fb61290. An attacker who discovers an HTTP-based Canarytoken (a URL) can use this to execute Javascript in the Canarytoken's trigger history page (domain: canarytokens.org) when the history page is later visited by the Canarytoken's creator. This vulnerability could be used to disable or delete the affected Canarytoken, or view its activation history. It might also be used as a stepping stone towards revealing more information about the Canarytoken's creator to the attacker. For example, an attacker could recover the email address tied to the Canarytoken, or place Javascript on the history page that redirect the creator towards an attacker-controlled Canarytoken to show the creator's network location. This vulnerability is similar to CVE-2022-31113, but affected parameters reported differently from the Canarytoken trigger request. An attacker could only act on the discovered Canarytoken. This issue did not expose other Canarytokens or other Canarytoken creators. Canarytokens Docker images sha-fb61290 and later contain a patch for this issue.", "other": {"cve": {"id": "CVE-2023-22475", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-06T15:15:09.903", "lastModified": "2023-01-12T15:32:34.180", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Canarytokens is an open source tool which helps track activity and actions on your network. A Cross-Site Scripting vulnerability was identified in the history page of triggered Canarytokens prior to sha-fb61290. An attacker who discovers an HTTP-based Canarytoken (a URL) can use this to execute Javascript in the Canarytoken's trigger history page (domain: canarytokens.org) when the history page is later visited by the Canarytoken's creator. This vulnerability could be used to disable or delete the affected Canarytoken, or view its activation history. It might also be used as a stepping stone towards revealing more information about the Canarytoken's creator to the attacker. For example, an attacker could recover the email address tied to the Canarytoken, or place Javascript on the history page that redirect the creator towards an attacker-controlled Canarytoken to show the creator's network location. This vulnerability is similar to CVE-2022-31113, but affected parameters reported differently from the Canarytoken trigger request. An attacker could only act on the discovered Canarytoken. This issue did not expose other Canarytokens or other Canarytoken creators. Canarytokens Docker images sha-fb61290 and later contain a patch for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thinkst:canarytokens:*:*:*:*:*:*:*:*", "versionEndExcluding": "2023-01-06", "matchCriteriaId": "81509DD9-44EC-440D-A0EC-9CE8563D0A72"}]}]}], "references": [{"url": "https://github.com/thinkst/canarytokens/commit/fb612906f2217bbb8863199694891d16e20bad3e", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/thinkst/canarytokens/security/advisories/GHSA-3h2c-3fgr-74vh", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/thinkst/canarytokens/security/advisories/GHSA-5675-3424-hpqr", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thinkst/canarytokens/commit/fb612906f2217bbb8863199694891d16e20bad3e"}}