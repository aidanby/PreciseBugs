{"buggy_code": ["<?php\n//\n// ZoneMinder main web interface file, $Date$, $Revision$\n// Copyright (C) 2001-2008 Philip Coombes\n// \n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n// \n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n// \n\nerror_reporting(E_ALL);\n\n$debug = false;\nif ( $debug ) {\n  // Use these for debugging, though not both at once!\n  phpinfo(INFO_VARIABLES);\n  //error_reporting( E_ALL );\n}\n\n// Use new style autoglobals where possible\nif ( version_compare(phpversion(), '4.1.0', '<') ) {\n  $_SESSION = &$HTTP_SESSION_VARS;\n  $_SERVER = &$HTTP_SERVER_VARS;\n}\n\n// Useful debugging lines for mobile devices\nif ( false ) {\n  ob_start();\n  phpinfo(INFO_VARIABLES);\n  $fp = fopen('/tmp/env.html', 'w+');\n  fwrite($fp, ob_get_contents());\n  fclose($fp);\n  ob_end_clean();\n}\n\nrequire_once('includes/config.php');\nrequire_once('includes/session.php');\nrequire_once('includes/logger.php'); // already included in config\nrequire_once('includes/Server.php');\n\n// Useful debugging lines for mobile devices\nif ( 0 and ZM\\Logger::fetch()->debugOn() ) {\n  ob_start();\n  phpinfo(INFO_VARIABLES);\n  ZM\\Debug(ob_get_contents());\n  ob_end_clean();\n}\nZM\\Debug(print_r($_REQUEST, true));\n\nglobal $Servers;\n$Servers = ZM\\Server::find();\n\nif (\n  (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on')\n  or\n  (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) and ($_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https'))\n) {\n  $protocol = 'https';\n} else {\n  $protocol = 'http';\n}\ndefine('ZM_BASE_PROTOCOL', $protocol);\n\n// Absolute URL's are unnecessary and break compatibility with reverse proxies \n// define( \"ZM_BASE_URL\", $protocol.'://'.$_SERVER['HTTP_HOST'] );\n\n// Use relative URL's instead\ndefine('ZM_BASE_URL', '');\n\nrequire_once('includes/functions.php');\nif ( $_SERVER['REQUEST_METHOD'] == 'OPTIONS' ) {\n  ZM\\Debug('OPTIONS Method, only doing CORS');\n  # Add Cross domain access headers\n  CORSHeaders();\n  return;\n}\n\nif ( isset($_GET['skin']) ) {\n  $skin = $_GET['skin'];\n} else if ( isset($_COOKIE['zmSkin']) ) {\n  $skin = $_COOKIE['zmSkin'];\n} else if ( defined('ZM_SKIN_DEFAULT') ) {\n  $skin = ZM_SKIN_DEFAULT;\n} else {\n  $skin = 'classic';\n}\n\nif (!is_dir('skins/'.$skin) ) {\n  $skins = array_map('basename', glob('skins/*', GLOB_ONLYDIR));\n\n  if ( !in_array($skin, $skins) ) {\n    ZM\\Error(\"Invalid skin '$skin' setting to \".$skins[0]);\n    $skin = $skins[0];\n  }\n}\nglobal $css;\nif ( isset($_GET['css']) ) {\n  $css = $_GET['css'];\n} else if ( isset($_COOKIE['zmCSS']) ) {\n  $css = $_COOKIE['zmCSS'];\n} else if ( defined('ZM_CSS_DEFAULT') ) {\n  $css = ZM_CSS_DEFAULT;\n} else {\n  $css = 'classic';\n}\n\nif (!is_dir(\"skins/$skin/css/$css\")) {\n  $css_skins = array_map('basename', glob('skins/'.$skin.'/css/*', GLOB_ONLYDIR));\n  if (count($css_skins)) {\n    if (!in_array($css, $css_skins)) {\n      ZM\\Error(\"Invalid skin css '$css' setting to \" . $css_skins[0]);\n      $css = $css_skins[0];\n    } else {\n      $css = '';\n    }\n  } else {\n    ZM\\Error(\"No css options found at skins/$skin/css\");\n    $css = '';\n  }\n}\n\ndefine('ZM_BASE_PATH', dirname($_SERVER['REQUEST_URI']));\ndefine('ZM_SKIN_PATH', \"skins/$skin\");\ndefine('ZM_SKIN_NAME', $skin);\n\n$skinBase = array(); // To allow for inheritance of skins\nif (!file_exists(ZM_SKIN_PATH))\n  ZM\\Fatal(\"Invalid skin '$skin'\");\n$skinBase[] = $skin;\n\nzm_session_start();\n\nif (\n  !isset($_SESSION['skin']) ||\n  isset($_REQUEST['skin']) ||\n  !isset($_COOKIE['zmSkin']) ||\n  ($_COOKIE['zmSkin'] != $skin)\n) {\n  $_SESSION['skin'] = $skin;\n\tzm_setcookie('zmSkin', $skin);\n}\n\nif (\n  !isset($_SESSION['css']) ||\n  isset($_REQUEST['css']) ||\n  !isset($_COOKIE['zmCSS']) ||\n  ($_COOKIE['zmCSS'] != $css)\n) {\n  $_SESSION['css'] = $css;\n  zm_setcookie('zmCSS', $css);\n}\n\n# Running is global but only do the daemonCheck if it is actually needed\n$running = null;\n\n# Add Cross domain access headers\nCORSHeaders();\n\n// Check for valid content dirs\nif ( !is_writable(ZM_DIR_EVENTS) ) {\n  ZM\\Warning(\"Cannot write to event folder \".ZM_DIR_EVENTS.\". Check that it exists and is owned by the web account user.\");\n}\n\n# Globals\n$action = null;\n$error_message = null;\n$redirect = null;\n$view = null;\n$user = null;\nif ( isset($_REQUEST['view']) )\n  $view = detaintPath($_REQUEST['view']);\n\n\n$request = null;\nif ( isset($_REQUEST['request']) )\n  $request = detaintPath($_REQUEST['request']);\n\nrequire_once('includes/auth.php');\n\n# Only one request can open the session file at a time, so let's close the session here to improve concurrency.\n# Any file/page that sets session variables must re-open it.\nsession_write_close();\n\nrequire_once('includes/Storage.php');\nrequire_once('includes/Event.php');\nrequire_once('includes/Group.php');\nrequire_once('includes/Monitor.php');\n\n// lang references $user[Language] so must come after auth\nrequire_once('includes/lang.php');\n\nforeach ( getSkinIncludes('skin.php') as $includeFile ) {\n  require_once $includeFile;\n}\n\nif ( isset($_REQUEST['action']) )\n  $action = detaintPath($_REQUEST['action']);\n\n# The only variable we really need to set is action. The others are informal.\nisset($view) || $view = NULL;\nisset($request) || $request = NULL;\nisset($action) || $action = NULL;\n\nif ( (!$view and !$request) or ($view == 'console') ) {\n  // Verify the system, php, and mysql timezones all match\n  #if ( ZM_TIMEZONE )\n  #date_default_timezone_set(ZM_TIMEZONE);\n  check_timezone();\n}\n\nZM\\Debug(\"View: $view Request: $request Action: $action User: \" . ( isset($user) ? $user['Username'] : 'none' ));\nif (\n  ZM_ENABLE_CSRF_MAGIC &&\n  ( $action != 'login' ) &&\n  ( $view != 'view_video' ) && // only video no html\n  ( $view != 'image' ) && // view=image doesn't return html, just image data.\n  ( $request != 'control' ) && \n  //( $view != 'frames' ) &&  // big html can overflow ob\n  ( $view != 'archive' ) // returns data\n  && ( (!isset($_SERVER['CONTENT_TYPE']) or ($_SERVER['CONTENT_TYPE'] != 'application/csp-report')) )\n) {\n  require_once('includes/csrf/csrf-magic.php');\n  #ZM\\Debug(\"Calling csrf_check with the following values: \\$request = \\\"$request\\\", \\$view = \\\"$view\\\", \\$action = \\\"$action\\\"\");\n  csrf_check();\n}\n\n# Need to include actions because it does auth\nif ( $action and $view and !$request ) {\n  if ( file_exists('includes/actions/'.$view.'.php') ) {\n    ZM\\Debug(\"Including includes/actions/$view.php\");\n    require_once('includes/actions/'.$view.'.php');\n  } else {\n    ZM\\Warning(\"No includes/actions/$view.php for action $action\");\n  }\n}\n\n# If I put this here, it protects all views and popups, but it has to go after actions.php because actions.php does the actual logging in.\nif ( ZM_OPT_USE_AUTH and (!isset($user)) and ($view != 'login') and ($view != 'none') ) {\n  if ($request) {\n    # requests only return json\n    header('HTTP/1.1 401 Unauthorized');\n    exit;\n  }\n  $view = 'none';\n  $redirect = ZM_BASE_URL.$_SERVER['PHP_SELF'].'?view=login';\n  zm_session_start();\n  $_SESSION['postLoginQuery'] = $_SERVER['QUERY_STRING'];\n  session_write_close();\n} else if ( ZM_SHOW_PRIVACY && ($view != 'privacy') && ($view != 'options') && (!$request) && canEdit('System') ) {\n  $view = 'none';\n  $redirect = ZM_BASE_URL.$_SERVER['PHP_SELF'].'?view=privacy';\n  $request = null;\n}\n\nif ( isset($_REQUEST['redirect']) )\n  $redirect = '?view='.detaintPath($_REQUEST['redirect']);\n\nif ( $redirect ) {\n  ZM\\Debug(\"Redirecting to $redirect\");\n  header('Location: '.$redirect);\n  return;\n}\n\nif ( $request ) {\n  foreach ( getSkinIncludes('ajax/'.$request.'.php', true, true) as $includeFile ) {\n    if ( !file_exists($includeFile) )\n      ZM\\Fatal(\"Request '$request' does not exist\");\n    require_once $includeFile;\n  }\n  return;\n}\n\n# Add CSP Headers\n$cspNonce = bin2hex(zm_random_bytes(16));\nif ( $includeFiles = getSkinIncludes('views/'.$view.'.php', true, true) ) {\n  ob_start();\n  CSPHeaders($view, $cspNonce);\n  foreach ( $includeFiles as $includeFile ) {\n    if ( !file_exists($includeFile) )\n      ZM\\Fatal(\"View '$view' does not exist\");\n    require_once $includeFile;\n  }\n  // If the view overrides $view to 'error', and the user is not logged in, then the\n  // issue is probably resolvable by logging in, so provide the opportunity to do so.\n  // The login view should handle redirecting to the correct location afterward.\n  if ( $view == 'error' && !isset($user) ) {\n    $view = 'login';\n    foreach ( getSkinIncludes('views/login.php', true, true) as $includeFile )\n      require_once $includeFile;\n  }\n  while (ob_get_level() > 0) ob_end_flush();\n}\n// If the view is missing or the view still returned error with the user logged in,\n// then it is not recoverable.\nif ( !$includeFiles || $view == 'error' ) {\n  foreach ( getSkinIncludes('views/error.php', true, true) as $includeFile )\n    require_once $includeFile;\n}\n?>\n"], "fixing_code": ["<?php\n//\n// ZoneMinder main web interface file, $Date$, $Revision$\n// Copyright (C) 2001-2008 Philip Coombes\n// \n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n// \n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n// \n\nerror_reporting(E_ALL);\n\n$debug = false;\nif ( $debug ) {\n  // Use these for debugging, though not both at once!\n  phpinfo(INFO_VARIABLES);\n  //error_reporting( E_ALL );\n}\n\n// Use new style autoglobals where possible\nif ( version_compare(phpversion(), '4.1.0', '<') ) {\n  $_SESSION = &$HTTP_SESSION_VARS;\n  $_SERVER = &$HTTP_SERVER_VARS;\n}\n\n// Useful debugging lines for mobile devices\nif ( false ) {\n  ob_start();\n  phpinfo(INFO_VARIABLES);\n  $fp = fopen('/tmp/env.html', 'w+');\n  fwrite($fp, ob_get_contents());\n  fclose($fp);\n  ob_end_clean();\n}\n\nrequire_once('includes/config.php');\nrequire_once('includes/session.php');\nrequire_once('includes/logger.php'); // already included in config\nrequire_once('includes/Server.php');\n\n// Useful debugging lines for mobile devices\nif ( 0 and ZM\\Logger::fetch()->debugOn() ) {\n  ob_start();\n  phpinfo(INFO_VARIABLES);\n  ZM\\Debug(ob_get_contents());\n  ob_end_clean();\n}\nZM\\Debug(print_r($_REQUEST, true));\n\nglobal $Servers;\n$Servers = ZM\\Server::find();\n\nif (\n  (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on')\n  or\n  (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) and ($_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https'))\n) {\n  $protocol = 'https';\n} else {\n  $protocol = 'http';\n}\ndefine('ZM_BASE_PROTOCOL', $protocol);\n\n// Absolute URL's are unnecessary and break compatibility with reverse proxies \n// define( \"ZM_BASE_URL\", $protocol.'://'.$_SERVER['HTTP_HOST'] );\n\n// Use relative URL's instead\ndefine('ZM_BASE_URL', '');\n\nrequire_once('includes/functions.php');\nif ( $_SERVER['REQUEST_METHOD'] == 'OPTIONS' ) {\n  ZM\\Debug('OPTIONS Method, only doing CORS');\n  # Add Cross domain access headers\n  CORSHeaders();\n  return;\n}\n\nif ( isset($_GET['skin']) ) {\n  $skin = $_GET['skin'];\n} else if ( isset($_COOKIE['zmSkin']) ) {\n  $skin = $_COOKIE['zmSkin'];\n} else if ( defined('ZM_SKIN_DEFAULT') ) {\n  $skin = ZM_SKIN_DEFAULT;\n} else {\n  $skin = 'classic';\n}\n\nif (!is_dir('skins/'.$skin) ) {\n  $skins = array_map('basename', glob('skins/*', GLOB_ONLYDIR));\n\n  if ( !in_array($skin, $skins) ) {\n    ZM\\Error(\"Invalid skin '$skin' setting to \".$skins[0]);\n    $skin = $skins[0];\n  }\n}\nglobal $css;\nif ( isset($_GET['css']) ) {\n  $css = $_GET['css'];\n} else if ( isset($_COOKIE['zmCSS']) ) {\n  $css = $_COOKIE['zmCSS'];\n} else if ( defined('ZM_CSS_DEFAULT') ) {\n  $css = ZM_CSS_DEFAULT;\n} else {\n  $css = 'classic';\n}\n\nif (!is_dir(\"skins/$skin/css/$css\")) {\n  $css_skins = array_map('basename', glob('skins/'.$skin.'/css/*', GLOB_ONLYDIR));\n  if (count($css_skins)) {\n    if (!in_array($css, $css_skins)) {\n      ZM\\Error(\"Invalid skin css '$css' setting to \" . $css_skins[0]);\n      $css = $css_skins[0];\n    } else {\n      $css = '';\n    }\n  } else {\n    ZM\\Error(\"No css options found at skins/$skin/css\");\n    $css = '';\n  }\n}\n\ndefine('ZM_BASE_PATH', dirname($_SERVER['REQUEST_URI']));\ndefine('ZM_SKIN_PATH', \"skins/$skin\");\ndefine('ZM_SKIN_NAME', $skin);\n\n$skinBase = array(); // To allow for inheritance of skins\nif (!file_exists(ZM_SKIN_PATH))\n  ZM\\Fatal(\"Invalid skin '$skin'\");\n$skinBase[] = $skin;\n\nzm_session_start();\n\nif (\n  !isset($_SESSION['skin']) ||\n  isset($_REQUEST['skin']) ||\n  !isset($_COOKIE['zmSkin']) ||\n  ($_COOKIE['zmSkin'] != $skin)\n) {\n  $_SESSION['skin'] = $skin;\n\tzm_setcookie('zmSkin', $skin);\n}\n\nif (\n  !isset($_SESSION['css']) ||\n  isset($_REQUEST['css']) ||\n  !isset($_COOKIE['zmCSS']) ||\n  ($_COOKIE['zmCSS'] != $css)\n) {\n  $_SESSION['css'] = $css;\n  zm_setcookie('zmCSS', $css);\n}\n\n# Running is global but only do the daemonCheck if it is actually needed\n$running = null;\n\n# Add Cross domain access headers\nCORSHeaders();\n\n// Check for valid content dirs\nif ( !is_writable(ZM_DIR_EVENTS) ) {\n  ZM\\Warning(\"Cannot write to event folder \".ZM_DIR_EVENTS.\". Check that it exists and is owned by the web account user.\");\n}\n\n# Globals\n$action = null;\n$error_message = null;\n$redirect = null;\n$view = null;\n$user = null;\nif ( isset($_REQUEST['view']) )\n  $view = detaintPath($_REQUEST['view']);\n\n\n$request = null;\nif ( isset($_REQUEST['request']) )\n  $request = detaintPath($_REQUEST['request']);\n\nrequire_once('includes/auth.php');\n\n# Only one request can open the session file at a time, so let's close the session here to improve concurrency.\n# Any file/page that sets session variables must re-open it.\nsession_write_close();\n\nrequire_once('includes/Storage.php');\nrequire_once('includes/Event.php');\nrequire_once('includes/Group.php');\nrequire_once('includes/Monitor.php');\n\n// lang references $user[Language] so must come after auth\nrequire_once('includes/lang.php');\n\nforeach ( getSkinIncludes('skin.php') as $includeFile ) {\n  require_once $includeFile;\n}\n\nif (isset($_POST['action'])) {\n  # Actions can only be performed on POST because we don't check csrf on GETs.\n  $action = detaintPath($_POST['action']);\n} else if (isset($_REQUEST['action'])) {\n  ZM\\Error('actions can no longer be performed without POST.');\n}\n\n# The only variable we really need to set is action. The others are informal.\nisset($view) || $view = NULL;\nisset($request) || $request = NULL;\nisset($action) || $action = NULL;\n\nif ( (!$view and !$request) or ($view == 'console') ) {\n  // Verify the system, php, and mysql timezones all match\n  #if ( ZM_TIMEZONE )\n  #date_default_timezone_set(ZM_TIMEZONE);\n  check_timezone();\n}\n\nZM\\Debug(\"View: $view Request: $request Action: $action User: \" . ( isset($user) ? $user['Username'] : 'none' ));\nif (\n  ZM_ENABLE_CSRF_MAGIC &&\n  ( $action != 'login' ) &&\n  ( $view != 'view_video' ) && // only video no html\n  ( $view != 'image' ) && // view=image doesn't return html, just image data.\n  ( $request != 'control' ) && \n  //( $view != 'frames' ) &&  // big html can overflow ob\n  ( $view != 'archive' ) // returns data\n  && ( (!isset($_SERVER['CONTENT_TYPE']) or ($_SERVER['CONTENT_TYPE'] != 'application/csp-report')) )\n) {\n  require_once('includes/csrf/csrf-magic.php');\n  #ZM\\Debug(\"Calling csrf_check with the following values: \\$request = \\\"$request\\\", \\$view = \\\"$view\\\", \\$action = \\\"$action\\\"\");\n  csrf_check();\n}\n\n# Need to include actions because it does auth\nif ( $action and $view and !$request ) {\n  if ( file_exists('includes/actions/'.$view.'.php') ) {\n    ZM\\Debug(\"Including includes/actions/$view.php\");\n    require_once('includes/actions/'.$view.'.php');\n  } else {\n    ZM\\Warning(\"No includes/actions/$view.php for action $action\");\n  }\n}\n\n# If I put this here, it protects all views and popups, but it has to go after actions.php because actions.php does the actual logging in.\nif ( ZM_OPT_USE_AUTH and (!isset($user)) and ($view != 'login') and ($view != 'none') ) {\n  if ($request) {\n    # requests only return json\n    header('HTTP/1.1 401 Unauthorized');\n    exit;\n  }\n  $view = 'none';\n  $redirect = ZM_BASE_URL.$_SERVER['PHP_SELF'].'?view=login';\n  zm_session_start();\n  $_SESSION['postLoginQuery'] = $_SERVER['QUERY_STRING'];\n  session_write_close();\n} else if ( ZM_SHOW_PRIVACY && ($view != 'privacy') && ($view != 'options') && (!$request) && canEdit('System') ) {\n  $view = 'none';\n  $redirect = ZM_BASE_URL.$_SERVER['PHP_SELF'].'?view=privacy';\n  $request = null;\n}\n\nif ( isset($_REQUEST['redirect']) )\n  $redirect = '?view='.detaintPath($_REQUEST['redirect']);\n\nif ( $redirect ) {\n  ZM\\Debug(\"Redirecting to $redirect\");\n  header('Location: '.$redirect);\n  return;\n}\n\nif ( $request ) {\n  foreach ( getSkinIncludes('ajax/'.$request.'.php', true, true) as $includeFile ) {\n    if ( !file_exists($includeFile) )\n      ZM\\Fatal(\"Request '$request' does not exist\");\n    require_once $includeFile;\n  }\n  return;\n}\n\n# Add CSP Headers\n$cspNonce = bin2hex(zm_random_bytes(16));\nif ( $includeFiles = getSkinIncludes('views/'.$view.'.php', true, true) ) {\n  ob_start();\n  CSPHeaders($view, $cspNonce);\n  foreach ( $includeFiles as $includeFile ) {\n    if ( !file_exists($includeFile) )\n      ZM\\Fatal(\"View '$view' does not exist\");\n    require_once $includeFile;\n  }\n  // If the view overrides $view to 'error', and the user is not logged in, then the\n  // issue is probably resolvable by logging in, so provide the opportunity to do so.\n  // The login view should handle redirecting to the correct location afterward.\n  if ( $view == 'error' && !isset($user) ) {\n    $view = 'login';\n    foreach ( getSkinIncludes('views/login.php', true, true) as $includeFile )\n      require_once $includeFile;\n  }\n  while (ob_get_level() > 0) ob_end_flush();\n}\n// If the view is missing or the view still returned error with the user logged in,\n// then it is not recoverable.\nif ( !$includeFiles || $view == 'error' ) {\n  foreach ( getSkinIncludes('views/error.php', true, true) as $includeFile )\n    require_once $includeFile;\n}\n?>\n"], "filenames": ["web/index.php"], "buggy_code_start_loc": [206], "buggy_code_end_loc": [208], "fixing_code_start_loc": [206], "fixing_code_end_loc": [212], "type": "CWE-79", "message": "ZoneMinder is a free, open source Closed-circuit television software application The file parameter is vulnerable to a cross site scripting vulnerability (XSS) by backing out of the current \"tr\" \"td\" brackets. This then allows a malicious user to provide code that will execute when a user views the specific log on the \"view=log\" page. This vulnerability allows an attacker to store code within the logs that will be executed when loaded by a legitimate user. These actions will be performed with the permission of the victim. This could lead to data loss and/or further exploitation including account takeover. This issue has been addressed in versions `1.36.27` and `1.37.24`. Users are advised to upgrade. Users unable to upgrade should disable database logging.", "other": {"cve": {"id": "CVE-2022-39285", "sourceIdentifier": "security-advisories@github.com", "published": "2022-10-07T21:15:11.397", "lastModified": "2023-03-27T18:15:11.557", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "ZoneMinder is a free, open source Closed-circuit television software application The file parameter is vulnerable to a cross site scripting vulnerability (XSS) by backing out of the current \"tr\" \"td\" brackets. This then allows a malicious user to provide code that will execute when a user views the specific log on the \"view=log\" page. This vulnerability allows an attacker to store code within the logs that will be executed when loaded by a legitimate user. These actions will be performed with the permission of the victim. This could lead to data loss and/or further exploitation including account takeover. This issue has been addressed in versions `1.36.27` and `1.37.24`. Users are advised to upgrade. Users unable to upgrade should disable database logging."}, {"lang": "es", "value": "ZoneMinder es una aplicaci\u00f3n de software de televisi\u00f3n en circuito cerrado gratuita y de c\u00f3digo abierto El par\u00e1metro de archivo es susceptible a una vulnerabilidad de tipo cross site scripting (XSS) al retroceder los corchetes \"tr\" \"td\" actuales. Esto permite entonces a un usuario malicioso proporcionar c\u00f3digo que ser\u00e1 ejecutado cuando un usuario visualice el registro espec\u00edfico en la p\u00e1gina \"view=log\". Esta vulnerabilidad permite a un atacante almacenar c\u00f3digo dentro de los registros que ser\u00e1 ejecutado cuando sea cargado por un usuario leg\u00edtimo. Estas acciones ser\u00e1n llevadas a cabo con el permiso de la v\u00edctima. Esto podr\u00eda conllevar a una p\u00e9rdida de datos y/o una explotaci\u00f3n posterior, incluyendo la toma de control de la cuenta. Este problema ha sido abordado en versiones \"1.36.27\" y \"1.37.24\". Es recomendado a usuarios actualizar. Los usuarios que no puedan actualizarse deber\u00e1n deshabilitar el registro de la base de datos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.36.27", "matchCriteriaId": "10716E28-69E6-4AD6-9D8E-3DB416BD68B1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.37.0", "versionEndExcluding": "1.37.24", "matchCriteriaId": "45B12B91-B262-4E82-964C-D2CB074D4FDF"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/171498/Zoneminder-Log-Injection-XSS-Cross-Site-Request-Forgery.html", "source": "security-advisories@github.com"}, {"url": "https://github.com/ZoneMinder/zoneminder/commit/c0a4c05e84eea0f6ccf7169c014efe5422c9ba0d", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/commit/d289eb48601a76e34feea3c1683955337b1fae59", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/security/advisories/GHSA-h6xp-cvwv-q433", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ZoneMinder/zoneminder/commit/c0a4c05e84eea0f6ccf7169c014efe5422c9ba0d"}}