{"buggy_code": ["<!--\n  - @copyright Copyright (c) 2020 Julius H\u00e4rtl <jus@bitgrid.net>\n  -\n  - @author Julius H\u00e4rtl <jus@bitgrid.net>\n  -\n  - @license GNU AGPL version 3 or any later version\n  -\n  - This program is free software: you can redistribute it and/or modify\n  - it under the terms of the GNU Affero General Public License as\n  - published by the Free Software Foundation, either version 3 of the\n  - License, or (at your option) any later version.\n  -\n  - This program is distributed in the hope that it will be useful,\n  - but WITHOUT ANY WARRANTY; without even the implied warranty of\n  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  - GNU Affero General Public License for more details.\n  -\n  - You should have received a copy of the GNU Affero General Public License\n  - along with this program. If not, see <http://www.gnu.org/licenses/>.\n  -\n  -->\n\n<template>\n\t<div class=\"comment-form\">\n\t\t<form @submit.prevent=\"submit\">\n\t\t\t<At ref=\"at\"\n\t\t\t\tv-model=\"commentText\"\n\t\t\t\t:members=\"members\"\n\t\t\t\tname-key=\"displayname\"\n\t\t\t\t:tab-select=\"true\">\n\t\t\t\t<template #item=\"s\">\n\t\t\t\t\t<NcAvatar class=\"atwho-li--avatar\" :user=\"s.item.uid\" :size=\"24\" />\n\t\t\t\t\t<span class=\"atwho-li--name\" v-text=\"s.item.displayname\" />\n\t\t\t\t</template>\n\t\t\t\t<template #embeddedItem=\"scope\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<NcUserBubble v-if=\"scope.current.uid\"\n\t\t\t\t\t\t\t:data-mention-id=\"scope.current.uid\"\n\t\t\t\t\t\t\t:user=\"scope.current.uid\"\n\t\t\t\t\t\t\t:display-name=\"scope.current.displayname\" />\n\t\t\t\t\t</span>\n\t\t\t\t</template>\n\t\t\t\t<div ref=\"contentEditable\"\n\t\t\t\t\tdir=\"auto\"\n\t\t\t\t\tclass=\"comment-form__contenteditable\"\n\t\t\t\t\tcontenteditable\n\t\t\t\t\t@keydown.enter=\"handleKeydown\"\n\t\t\t\t\t@paste=\"onPaste\"\n\t\t\t\t\t@blur=\"error = null\"\n\t\t\t\t\t@input=\"validate()\" />\n\t\t\t</At>\n\t\t\t<input v-tooltip=\"t('deck', 'Save')\"\n\t\t\t\tclass=\"icon-confirm\"\n\t\t\t\ttype=\"submit\"\n\t\t\t\tvalue=\"\"\n\t\t\t\t:disabled=\"commentText.length === null || error\">\n\t\t\t<slot />\n\t\t</form>\n\t\t<p v-if=\"error\">\n\t\t\t{{ error }}\n\t\t</p>\n\t</div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport { NcUserBubble, NcAvatar } from '@nextcloud/vue'\nimport At from 'vue-at'\nimport { rawToParsed } from '../../helpers/mentions.js'\n\nexport default {\n\tname: 'CommentForm',\n\tcomponents: {\n\t\tAt,\n\t\tNcAvatar,\n\t\tNcUserBubble,\n\t},\n\tprops: {\n\t\tvalue: {\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcommentText: this.value,\n\t\t\terror: null,\n\t\t}\n\t},\n\tcomputed: {\n\t\t...mapState({\n\t\t\tcurrentBoard: state => state.currentBoard,\n\t\t}),\n\t\tmembers() {\n\t\t\treturn this.currentBoard.users\n\t\t},\n\t},\n\twatch: {\n\t\tvalue(val) {\n\t\t\tthis.commentText = val\n\t\t},\n\t},\n\tmethods: {\n\t\tvalidate(submit) {\n\t\t\tthis.error = null\n\t\t\tconst content = this.contentEditableToParsed()\n\t\t\tif (submit && content.length === 0) {\n\t\t\t\tthis.error = t('deck', 'The comment cannot be empty.')\n\t\t\t}\n\t\t\tif (content.length > 1000) {\n\t\t\t\tthis.error = t('deck', 'The comment cannot be longer than 1000 characters.')\n\t\t\t}\n\t\t\treturn this.error === null ? content : null\n\t\t},\n\t\tsubmit() {\n\t\t\tconst content = this.validate(true)\n\t\t\tif (content) {\n\t\t\t\tthis.$emit('input', content)\n\t\t\t\tthis.$emit('submit', content)\n\t\t\t}\n\t\t},\n\t\t/* All credits for this go to the talk app\n\t\t * https://github.com/nextcloud/spreed/blob/e69740b372e17eec4541337b47baa262a5766510/src/components/NewMessageForm/NewMessageForm.vue#L100-L143\n\t\t */\n\t\tcontentEditableToParsed() {\n\t\t\tif (!this.$refs.contentEditable) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconst node = this.$refs.contentEditable.cloneNode(true)\n\t\t\tconst mentions = node.querySelectorAll('span[data-at-embedded]')\n\t\t\tmentions.forEach(mention => {\n\t\t\t\t// FIXME Adding a space after the mention should be improved to\n\t\t\t\t// do it or not based on the next element instead of always\n\t\t\t\t// adding it.\n\t\t\t\t// FIXME user names can contain spaces, in that case they need to be wrapped @\"user name\" [a-zA-Z0-9\\ _\\.@\\-']+\n\t\t\t\tconst mentionValue = mention.firstElementChild.attributes['data-mention-id'].value\n\t\t\t\tif (mentionValue.indexOf(' ') !== -1) {\n\t\t\t\t\tmention.replaceWith(' @\"' + mentionValue + '\" ')\n\t\t\t\t} else {\n\t\t\t\t\tmention.replaceWith(' @' + mentionValue + ' ')\n\t\t\t\t}\n\t\t\t})\n\n\t\t\treturn rawToParsed(node.innerHTML)\n\t\t},\n\n\t\t/**\n\t\t * Emits the submit event when enter is pressed (look\n\t\t * at the v-on in the template) unless shift is pressed:\n\t\t * in this case a new line will be created.\n\t\t *\n\t\t * @param {object} event the event object;\n\t\t */\n\t\thandleKeydown(event) {\n\t\t\t// Prevent submit event when vue-at panel is open, as that should\n\t\t\t// just select the mention from the panel.\n\t\t\tif (this.atwho) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// TODO: add support for CTRL+ENTER new line\n\t\t\tif (!(event.shiftKey)) {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tthis.submit()\n\t\t\t}\n\t\t},\n\n\t\tonPaste(e) {\n\t\t\te.preventDefault()\n\t\t\tconst text = e.clipboardData.getData('text/plain')\n\t\t\tdocument.execCommand('insertText', false, text)\n\t\t},\n\t},\n}\n</script>\n\n<style scoped lang=\"scss\">\n\t@import '../../css/comments';\n\n\t.comment-form__contenteditable {\n\t\tword-break: break-word;\n\t\tborder-radius: var(--border-radius-large)\n\t}\n\n\t.atwho-wrap {\n\t\twidth: 100%;\n\t\t& > div[contenteditable] {\n\t\t\twidth: 100%;\n\n\t\t\t&:deep > span > div {\n\t\t\t\tvertical-align: middle;\n\t\t\t}\n\t\t}\n\t}\n\n\t.comment-form:deep(.atwho-li) {\n\t\theight: 32px;\n\t}\n\n\t.atwho-li--avatar {\n\t\tmargin-right: 10px;\n\t}\n</style>\n"], "fixing_code": ["<!--\n  - @copyright Copyright (c) 2020 Julius H\u00e4rtl <jus@bitgrid.net>\n  -\n  - @author Julius H\u00e4rtl <jus@bitgrid.net>\n  -\n  - @license GNU AGPL version 3 or any later version\n  -\n  - This program is free software: you can redistribute it and/or modify\n  - it under the terms of the GNU Affero General Public License as\n  - published by the Free Software Foundation, either version 3 of the\n  - License, or (at your option) any later version.\n  -\n  - This program is distributed in the hope that it will be useful,\n  - but WITHOUT ANY WARRANTY; without even the implied warranty of\n  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n  - GNU Affero General Public License for more details.\n  -\n  - You should have received a copy of the GNU Affero General Public License\n  - along with this program. If not, see <http://www.gnu.org/licenses/>.\n  -\n  -->\n\n<template>\n\t<div class=\"comment-form\">\n\t\t<form @submit.prevent=\"submit\">\n\t\t\t<At ref=\"at\"\n\t\t\t\tv-model=\"commentText\"\n\t\t\t\t:members=\"members\"\n\t\t\t\tname-key=\"displayname\"\n\t\t\t\t:tab-select=\"true\">\n\t\t\t\t<template #item=\"s\">\n\t\t\t\t\t<NcAvatar class=\"atwho-li--avatar\" :user=\"s.item.uid\" :size=\"24\" />\n\t\t\t\t\t<span class=\"atwho-li--name\" v-text=\"s.item.displayname\" />\n\t\t\t\t</template>\n\t\t\t\t<template #embeddedItem=\"scope\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<NcUserBubble v-if=\"scope.current.uid\"\n\t\t\t\t\t\t\t:data-mention-id=\"scope.current.uid\"\n\t\t\t\t\t\t\t:user=\"scope.current.uid\"\n\t\t\t\t\t\t\t:display-name=\"scope.current.displayname\" />\n\t\t\t\t\t</span>\n\t\t\t\t</template>\n\t\t\t\t<div ref=\"contentEditable\"\n\t\t\t\t\tdir=\"auto\"\n\t\t\t\t\tclass=\"comment-form__contenteditable\"\n\t\t\t\t\tcontenteditable\n\t\t\t\t\t@keydown.enter=\"handleKeydown\"\n\t\t\t\t\t@paste=\"onPaste\"\n\t\t\t\t\t@blur=\"error = null\"\n\t\t\t\t\t@input=\"validate()\" />\n\t\t\t</At>\n\t\t\t<input v-tooltip=\"t('deck', 'Save')\"\n\t\t\t\tclass=\"icon-confirm\"\n\t\t\t\ttype=\"submit\"\n\t\t\t\tvalue=\"\"\n\t\t\t\t:disabled=\"commentText.length === null || error\">\n\t\t\t<slot />\n\t\t</form>\n\t\t<p v-if=\"error\">\n\t\t\t{{ error }}\n\t\t</p>\n\t</div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport { NcUserBubble, NcAvatar } from '@nextcloud/vue'\nimport At from 'vue-at'\nimport { rawToParsed } from '../../helpers/mentions.js'\n\nexport default {\n\tname: 'CommentForm',\n\tcomponents: {\n\t\tAt,\n\t\tNcAvatar,\n\t\tNcUserBubble,\n\t},\n\tprops: {\n\t\tvalue: {\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t},\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tcommentText: this.value,\n\t\t\terror: null,\n\t\t}\n\t},\n\tcomputed: {\n\t\t...mapState({\n\t\t\tcurrentBoard: state => state.currentBoard,\n\t\t}),\n\t\tmembers() {\n\t\t\treturn this.currentBoard.users\n\t\t},\n\t},\n\twatch: {\n\t\tvalue(val) {\n\t\t\tthis.commentText = val\n\t\t},\n\t},\n\tmethods: {\n\t\tvalidate(submit) {\n\t\t\tthis.error = null\n\t\t\tconst content = this.contentEditableToParsed()\n\t\t\tif (submit && content.length === 0) {\n\t\t\t\tthis.error = t('deck', 'The comment cannot be empty.')\n\t\t\t}\n\t\t\tif (content.length > 1000) {\n\t\t\t\tthis.error = t('deck', 'The comment cannot be longer than 1000 characters.')\n\t\t\t}\n\t\t\treturn this.error === null ? content : null\n\t\t},\n\t\tsubmit() {\n\t\t\tconst content = this.validate(true)\n\t\t\tif (content) {\n\t\t\t\t// We need the plain text representation for the input event as otherwise it will propagate back to the contenteditable\n\t\t\t\t// The input event is only used for change detection to make sure that the input is reset after posting the comment\n\t\t\t\tconst temp = document.createElement('div')\n\t\t\t\ttemp.innerHTML = content\n\t\t\t\tconst text = temp.textContent || temp.innerText || ''\n\t\t\t\tthis.$emit('input', text)\n\t\t\t\tthis.$emit('submit', text)\n\t\t\t}\n\t\t},\n\t\t/* All credits for this go to the talk app\n\t\t * https://github.com/nextcloud/spreed/blob/e69740b372e17eec4541337b47baa262a5766510/src/components/NewMessageForm/NewMessageForm.vue#L100-L143\n\t\t */\n\t\tcontentEditableToParsed() {\n\t\t\tif (!this.$refs.contentEditable) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconst node = this.$refs.contentEditable.cloneNode(true)\n\t\t\tconst mentions = node.querySelectorAll('span[data-at-embedded]')\n\t\t\tmentions.forEach(mention => {\n\t\t\t\t// FIXME Adding a space after the mention should be improved to\n\t\t\t\t// do it or not based on the next element instead of always\n\t\t\t\t// adding it.\n\t\t\t\t// FIXME user names can contain spaces, in that case they need to be wrapped @\"user name\" [a-zA-Z0-9\\ _\\.@\\-']+\n\t\t\t\tconst mentionValue = mention.firstElementChild.attributes['data-mention-id'].value\n\t\t\t\tif (mentionValue.indexOf(' ') !== -1) {\n\t\t\t\t\tmention.replaceWith(' @\"' + mentionValue + '\" ')\n\t\t\t\t} else {\n\t\t\t\t\tmention.replaceWith(' @' + mentionValue + ' ')\n\t\t\t\t}\n\t\t\t})\n\n\t\t\treturn rawToParsed(node.innerHTML)\n\t\t},\n\n\t\t/**\n\t\t * Emits the submit event when enter is pressed (look\n\t\t * at the v-on in the template) unless shift is pressed:\n\t\t * in this case a new line will be created.\n\t\t *\n\t\t * @param {object} event the event object;\n\t\t */\n\t\thandleKeydown(event) {\n\t\t\t// Prevent submit event when vue-at panel is open, as that should\n\t\t\t// just select the mention from the panel.\n\t\t\tif (this.atwho) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// TODO: add support for CTRL+ENTER new line\n\t\t\tif (!(event.shiftKey)) {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tthis.submit()\n\t\t\t}\n\t\t},\n\n\t\tonPaste(e) {\n\t\t\te.preventDefault()\n\t\t\tconst text = e.clipboardData.getData('text/plain')\n\t\t\tdocument.execCommand('insertText', false, text)\n\t\t},\n\t},\n}\n</script>\n\n<style scoped lang=\"scss\">\n\t@import '../../css/comments';\n\n\t.comment-form__contenteditable {\n\t\tword-break: break-word;\n\t\tborder-radius: var(--border-radius-large)\n\t}\n\n\t.atwho-wrap {\n\t\twidth: 100%;\n\t\t& > div[contenteditable] {\n\t\t\twidth: 100%;\n\n\t\t\t&:deep > span > div {\n\t\t\t\tvertical-align: middle;\n\t\t\t}\n\t\t}\n\t}\n\n\t.comment-form:deep(.atwho-li) {\n\t\theight: 32px;\n\t}\n\n\t.atwho-li--avatar {\n\t\tmargin-right: 10px;\n\t}\n</style>\n"], "filenames": ["src/components/card/CommentForm.vue"], "buggy_code_start_loc": [118], "buggy_code_end_loc": [120], "fixing_code_start_loc": [118], "fixing_code_end_loc": [125], "type": "CWE-79", "message": "Deck is a kanban style organization tool aimed at personal planning and project organization for teams integrated with Nextcloud. In affected versions users could be tricked into executing malicious code that would execute in their browser via HTML sent as a comment. It is recommended that the Nextcloud Deck is upgraded to version 1.9.5 or 1.11.2. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2024-22213", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-18T20:15:08.113", "lastModified": "2024-01-25T15:10:41.767", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Deck is a kanban style organization tool aimed at personal planning and project organization for teams integrated with Nextcloud. In affected versions users could be tricked into executing malicious code that would execute in their browser via HTML sent as a comment. It is recommended that the Nextcloud Deck is upgraded to version 1.9.5 or 1.11.2. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "Deck es una herramienta de organizaci\u00f3n estilo kanban destinada a la planificaci\u00f3n personal y organizaci\u00f3n de proyectos para equipos integrada con Nextcloud. En las versiones afectadas, los usuarios podr\u00edan ser enga\u00f1ados para que ejecutaran c\u00f3digo malicioso que se ejecutar\u00eda en su navegador a trav\u00e9s de HTML enviado como comentario. Se recomienda actualizar Nextcloud Deck a la versi\u00f3n 1.9.5 o 1.11.2. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 0.0, "baseSeverity": "NONE"}, "exploitabilityScore": 2.8, "impactScore": 0.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:deck:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.9.0", "versionEndExcluding": "1.9.5", "matchCriteriaId": "87E47A95-E854-4410-AEB6-0004AD2EA4AB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:deck:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.10.0", "versionEndExcluding": "1.11.2", "matchCriteriaId": "5A613E75-64F4-4FBD-A6AD-2F1357B76D01"}]}]}], "references": [{"url": "https://github.com/nextcloud/deck/commit/91f1557362047f8840f53151f176b80148650bcd", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/nextcloud/security-advisories/security/advisories/GHSA-mg7w-x9fm-9wwc", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}, {"url": "https://hackerone.com/reports/2058556", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nextcloud/deck/commit/91f1557362047f8840f53151f176b80148650bcd"}}