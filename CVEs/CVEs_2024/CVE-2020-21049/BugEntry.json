{"buggy_code": ["/*\n * Copyright (c) 2014-2018 Hayaki Saito\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n#include <stddef.h>  /* for size_t */\n\n#ifndef LIBSIXEL_SIXEL_H\n#define LIBSIXEL_SIXEL_H\n\n#ifdef _WIN32\n# define SIXELAPI __declspec(dllexport)\n#else\n# define SIXELAPI\n#endif\n\n#define LIBSIXEL_VERSION \"@PACKAGE_VERSION@\"\n#define LIBSIXEL_ABI_VERSION \"@LS_LTVERSION@\"\n\ntypedef unsigned char sixel_index_t;\n\n#define SIXEL_OUTPUT_PACKET_SIZE     16384\n#define SIXEL_PALETTE_MIN            2\n#define SIXEL_PALETTE_MAX            256\n#define SIXEL_USE_DEPRECATED_SYMBOLS 1\n\n/* return value */\ntypedef int SIXELSTATUS;\n#define SIXEL_OK                0x0000                          /* succeeded */\n#define SIXEL_FALSE             0x1000                          /* failed */\n\n#define SIXEL_RUNTIME_ERROR     (SIXEL_FALSE         | 0x0100)  /* runtime error */\n#define SIXEL_LOGIC_ERROR       (SIXEL_FALSE         | 0x0200)  /* logic error */\n#define SIXEL_FEATURE_ERROR     (SIXEL_FALSE         | 0x0300)  /* feature not enabled */\n#define SIXEL_LIBC_ERROR        (SIXEL_FALSE         | 0x0400)  /* errors caused by curl */\n#define SIXEL_CURL_ERROR        (SIXEL_FALSE         | 0x0500)  /* errors occures in libc functions */\n#define SIXEL_JPEG_ERROR        (SIXEL_FALSE         | 0x0600)  /* errors occures in libjpeg functions */\n#define SIXEL_PNG_ERROR         (SIXEL_FALSE         | 0x0700)  /* errors occures in libpng functions */\n#define SIXEL_GDK_ERROR         (SIXEL_FALSE         | 0x0800)  /* errors occures in gdk functions */\n#define SIXEL_GD_ERROR          (SIXEL_FALSE         | 0x0900)  /* errors occures in gd functions */\n#define SIXEL_STBI_ERROR        (SIXEL_FALSE         | 0x0a00)  /* errors occures in stb_image functions */\n#define SIXEL_STBIW_ERROR       (SIXEL_FALSE         | 0x0b00)  /* errors occures in stb_image_write functions */\n\n#define SIXEL_INTERRUPTED       (SIXEL_OK            | 0x0001)  /* interrupted by a signal */\n\n#define SIXEL_BAD_ALLOCATION    (SIXEL_RUNTIME_ERROR | 0x0001)  /* malloc() failed */\n#define SIXEL_BAD_ARGUMENT      (SIXEL_RUNTIME_ERROR | 0x0002)  /* bad argument detected */\n#define SIXEL_BAD_INPUT         (SIXEL_RUNTIME_ERROR | 0x0003)  /* bad input detected */\n#define SIXEL_BAD_INTEGER_OVERFLOW (SIXEL_RUNTIME_ERROR | 0x0004)  /* integer overflow */\n\n#define SIXEL_NOT_IMPLEMENTED   (SIXEL_FEATURE_ERROR | 0x0001)  /* feature not implemented */\n\n#define SIXEL_SUCCEEDED(status) (((status) & 0x1000) == 0)\n#define SIXEL_FAILED(status)    (((status) & 0x1000) != 0)\n\n/* method for finding the largest dimension for splitting,\n * and sorting by that component */\n#define SIXEL_LARGE_AUTO   0x0   /* choose automatically the method for finding the largest\n                                    dimension */\n#define SIXEL_LARGE_NORM   0x1   /* simply comparing the range in RGB space */\n#define SIXEL_LARGE_LUM    0x2   /* transforming into luminosities before the comparison */\n\n/* method for choosing a color from the box */\n#define SIXEL_REP_AUTO            0x0  /* choose automatically the method for selecting\n                                          representative color from each box */\n#define SIXEL_REP_CENTER_BOX      0x1  /* choose the center of the box */\n#define SIXEL_REP_AVERAGE_COLORS  0x2  /* choose the average all the color\n                                          in the box (specified in Heckbert's paper) */\n#define SIXEL_REP_AVERAGE_PIXELS  0x3  /* choose the average all the pixels in the box */\n\n/* method for diffusing */\n#define SIXEL_DIFFUSE_AUTO        0x0  /* choose diffusion type automatically */\n#define SIXEL_DIFFUSE_NONE        0x1  /* don't diffuse */\n#define SIXEL_DIFFUSE_ATKINSON    0x2  /* diffuse with Bill Atkinson's method */\n#define SIXEL_DIFFUSE_FS          0x3  /* diffuse with Floyd-Steinberg method */\n#define SIXEL_DIFFUSE_JAJUNI      0x4  /* diffuse with Jarvis, Judice & Ninke method */\n#define SIXEL_DIFFUSE_STUCKI      0x5  /* diffuse with Stucki's method */\n#define SIXEL_DIFFUSE_BURKES      0x6  /* diffuse with Burkes' method */\n#define SIXEL_DIFFUSE_A_DITHER    0x7  /* positionally stable arithmetic dither */\n#define SIXEL_DIFFUSE_X_DITHER    0x8  /* positionally stable arithmetic xor based dither */\n\n/* quality modes */\n#define SIXEL_QUALITY_AUTO        0x0  /* choose quality mode automatically */\n#define SIXEL_QUALITY_HIGH        0x1  /* high quality palette construction */\n#define SIXEL_QUALITY_LOW         0x2  /* low quality palette construction */\n#define SIXEL_QUALITY_FULL        0x3  /* full quality palette construction */\n#define SIXEL_QUALITY_HIGHCOLOR   0x4  /* high color */\n\n/* built-in dither */\n#define SIXEL_BUILTIN_MONO_DARK   0x0  /* monochrome terminal with dark background */\n#define SIXEL_BUILTIN_MONO_LIGHT  0x1  /* monochrome terminal with light background */\n#define SIXEL_BUILTIN_XTERM16     0x2  /* xterm 16color */\n#define SIXEL_BUILTIN_XTERM256    0x3  /* xterm 256color */\n#define SIXEL_BUILTIN_VT340_MONO  0x4  /* vt340 monochrome */\n#define SIXEL_BUILTIN_VT340_COLOR 0x5  /* vt340 color */\n#define SIXEL_BUILTIN_G1          0x6  /* 1bit grayscale */\n#define SIXEL_BUILTIN_G2          0x7  /* 2bit grayscale */\n#define SIXEL_BUILTIN_G4          0x8  /* 4bit grayscale */\n#define SIXEL_BUILTIN_G8          0x9  /* 8bit grayscale */\n\n/* offset value of pixelFormat */\n#define SIXEL_FORMATTYPE_COLOR     (0)\n#define SIXEL_FORMATTYPE_GRAYSCALE (1 << 6)\n#define SIXEL_FORMATTYPE_PALETTE   (1 << 7)\n\n/* pixelformat type of input image\n   NOTE: for compatibility, the value of PIXELFORAMT_COLOR_RGB888 must be 3 */\n#define SIXEL_PIXELFORMAT_RGB555   (SIXEL_FORMATTYPE_COLOR     | 0x01) /* 15bpp */\n#define SIXEL_PIXELFORMAT_RGB565   (SIXEL_FORMATTYPE_COLOR     | 0x02) /* 16bpp */\n#define SIXEL_PIXELFORMAT_RGB888   (SIXEL_FORMATTYPE_COLOR     | 0x03) /* 24bpp */\n#define SIXEL_PIXELFORMAT_BGR555   (SIXEL_FORMATTYPE_COLOR     | 0x04) /* 15bpp */\n#define SIXEL_PIXELFORMAT_BGR565   (SIXEL_FORMATTYPE_COLOR     | 0x05) /* 16bpp */\n#define SIXEL_PIXELFORMAT_BGR888   (SIXEL_FORMATTYPE_COLOR     | 0x06) /* 24bpp */\n#define SIXEL_PIXELFORMAT_ARGB8888 (SIXEL_FORMATTYPE_COLOR     | 0x10) /* 32bpp */\n#define SIXEL_PIXELFORMAT_RGBA8888 (SIXEL_FORMATTYPE_COLOR     | 0x11) /* 32bpp */\n#define SIXEL_PIXELFORMAT_ABGR8888 (SIXEL_FORMATTYPE_COLOR     | 0x12) /* 32bpp */\n#define SIXEL_PIXELFORMAT_BGRA8888 (SIXEL_FORMATTYPE_COLOR     | 0x13) /* 32bpp */\n#define SIXEL_PIXELFORMAT_G1       (SIXEL_FORMATTYPE_GRAYSCALE | 0x00) /* 1bpp grayscale */\n#define SIXEL_PIXELFORMAT_G2       (SIXEL_FORMATTYPE_GRAYSCALE | 0x01) /* 2bpp grayscale */\n#define SIXEL_PIXELFORMAT_G4       (SIXEL_FORMATTYPE_GRAYSCALE | 0x02) /* 4bpp grayscale */\n#define SIXEL_PIXELFORMAT_G8       (SIXEL_FORMATTYPE_GRAYSCALE | 0x03) /* 8bpp grayscale */\n#define SIXEL_PIXELFORMAT_AG88     (SIXEL_FORMATTYPE_GRAYSCALE | 0x13) /* 16bpp gray+alpha */\n#define SIXEL_PIXELFORMAT_GA88     (SIXEL_FORMATTYPE_GRAYSCALE | 0x23) /* 16bpp gray+alpha */\n#define SIXEL_PIXELFORMAT_PAL1     (SIXEL_FORMATTYPE_PALETTE   | 0x00) /* 1bpp palette */\n#define SIXEL_PIXELFORMAT_PAL2     (SIXEL_FORMATTYPE_PALETTE   | 0x01) /* 2bpp palette */\n#define SIXEL_PIXELFORMAT_PAL4     (SIXEL_FORMATTYPE_PALETTE   | 0x02) /* 4bpp palette */\n#define SIXEL_PIXELFORMAT_PAL8     (SIXEL_FORMATTYPE_PALETTE   | 0x03) /* 8bpp palette */\n\n/* palette type */\n#define SIXEL_PALETTETYPE_AUTO     0   /* choose palette type automatically */\n#define SIXEL_PALETTETYPE_HLS      1   /* HLS colorspace */\n#define SIXEL_PALETTETYPE_RGB      2   /* RGB colorspace */\n\n/* policies of SIXEL encoding */\n#define SIXEL_ENCODEPOLICY_AUTO    0   /* choose encoding policy automatically */\n#define SIXEL_ENCODEPOLICY_FAST    1   /* encode as fast as possible */\n#define SIXEL_ENCODEPOLICY_SIZE    2   /* encode to as small sixel sequence as possible */\n\n/* method for re-sampling */\n#define SIXEL_RES_NEAREST          0   /* Use nearest neighbor method */\n#define SIXEL_RES_GAUSSIAN         1   /* Use guaussian filter */\n#define SIXEL_RES_HANNING          2   /* Use hanning filter */\n#define SIXEL_RES_HAMMING          3   /* Use hamming filter */\n#define SIXEL_RES_BILINEAR         4   /* Use bilinear filter */\n#define SIXEL_RES_WELSH            5   /* Use welsh filter */\n#define SIXEL_RES_BICUBIC          6   /* Use bicubic filter */\n#define SIXEL_RES_LANCZOS2         7   /* Use lanczos-2 filter */\n#define SIXEL_RES_LANCZOS3         8   /* Use lanczos-3 filter */\n#define SIXEL_RES_LANCZOS4         9   /* Use lanczos-4 filter */\n\n/* image format */\n#define SIXEL_FORMAT_GIF           0x0 /* read only */\n#define SIXEL_FORMAT_PNG           0x1 /* read/write */\n#define SIXEL_FORMAT_BMP           0x2 /* read only */\n#define SIXEL_FORMAT_JPG           0x3 /* read only */\n#define SIXEL_FORMAT_TGA           0x4 /* read only */\n#define SIXEL_FORMAT_WBMP          0x5 /* read only with --with-gd configure option */\n#define SIXEL_FORMAT_TIFF          0x6 /* read only */\n#define SIXEL_FORMAT_SIXEL         0x7 /* read only */\n#define SIXEL_FORMAT_PNM           0x8 /* read only */\n#define SIXEL_FORMAT_GD2           0x9 /* read only with --with-gd configure option */\n#define SIXEL_FORMAT_PSD           0xa /* read only */\n#define SIXEL_FORMAT_HDR           0xb /* read only */\n\n/* loop mode */\n#define SIXEL_LOOP_AUTO            0   /* honer the setting of GIF header */\n#define SIXEL_LOOP_FORCE           1   /* always enable loop */\n#define SIXEL_LOOP_DISABLE         2   /* always disable loop */\n\n/* setopt flags */\n#define SIXEL_OPTFLAG_INPUT             ('i')  /* -i, --input: specify input file name. */\n#define SIXEL_OPTFLAG_OUTPUT            ('o')  /* -o, --output: specify output file name. */\n#define SIXEL_OPTFLAG_OUTFILE           ('o')  /* -o, --outfile: specify output file name. */\n#define SIXEL_OPTFLAG_7BIT_MODE         ('7')  /* -7, --7bit-mode: for 7bit terminals or printers (default) */\n#define SIXEL_OPTFLAG_8BIT_MODE         ('8')  /* -8, --8bit-mode: for 8bit terminals or printers */\n#define SIXEL_OPTFLAG_HAS_GRI_ARG_LIMIT ('R')  /* -R, --gri-limit: limit arguments of DECGRI('!') to 255 */\n#define SIXEL_OPTFLAG_COLORS            ('p')  /* -p COLORS, --colors=COLORS: specify number of colors */\n#define SIXEL_OPTFLAG_MAPFILE           ('m')  /* -m FILE, --mapfile=FILE: specify set of colors */\n#define SIXEL_OPTFLAG_MONOCHROME        ('e')  /* -e, --monochrome: output monochrome sixel image */\n#define SIXEL_OPTFLAG_INSECURE          ('k')  /* -k, --insecure: allow to connect to SSL sites without certs */\n#define SIXEL_OPTFLAG_INVERT            ('i')  /* -i, --invert: assume the terminal background color */\n#define SIXEL_OPTFLAG_HIGH_COLOR        ('I')  /* -I, --high-color: output 15bpp sixel image */\n#define SIXEL_OPTFLAG_USE_MACRO         ('u')  /* -u, --use-macro: use DECDMAC and DEVINVM sequences */\n#define SIXEL_OPTFLAG_MACRO_NUMBER      ('n')  /* -n MACRONO, --macro-number=MACRONO:\n                                                  specify macro register number */\n#define SIXEL_OPTFLAG_COMPLEXION_SCORE  ('C')  /* -C COMPLEXIONSCORE, --complexion-score=COMPLEXIONSCORE:\n                                                  specify an number argument for the score of\n                                                  complexion correction. */\n#define SIXEL_OPTFLAG_IGNORE_DELAY      ('g')  /* -g, --ignore-delay: render GIF animation without delay */\n#define SIXEL_OPTFLAG_STATIC            ('S')  /* -S, --static: render animated GIF as a static image */\n#define SIXEL_OPTFLAG_DIFFUSION         ('d')  /* -d DIFFUSIONTYPE, --diffusion=DIFFUSIONTYPE:\n                                                  choose diffusion method which used with -p option.\n                                                  DIFFUSIONTYPE is one of them:\n                                                    auto     -> choose diffusion type\n                                                                automatically (default)\n                                                    none     -> do not diffuse\n                                                    fs       -> Floyd-Steinberg method\n                                                    atkinson -> Bill Atkinson's method\n                                                    jajuni   -> Jarvis, Judice & Ninke\n                                                    stucki   -> Stucki's method\n                                                    burkes   -> Burkes' method\n                                                    a_dither -> positionally stable\n                                                                arithmetic dither\n                                                    a_dither -> positionally stable\n                                                                arithmetic xor based dither\n                                                */\n#define SIXEL_OPTFLAG_FIND_LARGEST      ('f')  /* -f FINDTYPE, --find-largest=FINDTYPE:\n                                                  choose method for finding the largest\n                                                  dimension of median cut boxes for\n                                                  splitting, make sense only when -p\n                                                  option (color reduction) is\n                                                  specified\n                                                  FINDTYPE is one of them:\n                                                    auto -> choose finding method\n                                                            automatically (default)\n                                                    norm -> simply comparing the\n                                                            range in RGB space\n                                                    lum  -> transforming into\n                                                            luminosities before the\n                                                            comparison\n                                                */\n#define SIXEL_OPTFLAG_SELECT_COLOR      ('s')  /* -s SELECTTYPE, --select-color=SELECTTYPE\n                                                  choose the method for selecting\n                                                  representative color from each\n                                                  median-cut box, make sense only\n                                                  when -p option (color reduction) is\n                                                  specified\n                                                  SELECTTYPE is one of them:\n                                                    auto      -> choose selecting\n                                                                 method automatically\n                                                                 (default)\n                                                    center    -> choose the center of\n                                                                 the box\n                                                    average    -> calculate the color\n                                                                 average into the box\n                                                    histogram -> similar with average\n                                                                 but considers color\n                                                                 histogram\n                                                */\n#define SIXEL_OPTFLAG_CROP              ('c')  /* -c REGION, --crop=REGION:\n                                                  crop source image to fit the\n                                                  specified geometry. REGION should\n                                                  be formatted as '%dx%d+%d+%d'\n                                                */\n#define SIXEL_OPTFLAG_WIDTH             ('w')  /* -w WIDTH, --width=WIDTH:\n                                                  resize image to specified width\n                                                  WIDTH is represented by the\n                                                  following syntax\n                                                    auto       -> preserving aspect\n                                                                  ratio (default)\n                                                    <number>%  -> scale width with\n                                                                  given percentage\n                                                    <number>   -> scale width with\n                                                                  pixel counts\n                                                    <number>px -> scale width with\n                                                                  pixel counts\n                                                */\n#define SIXEL_OPTFLAG_HEIGHT            ('h')  /* -h HEIGHT, --height=HEIGHT:\n                                                   resize image to specified height\n                                                   HEIGHT is represented by the\n                                                   following syntax\n                                                     auto       -> preserving aspect\n                                                                   ratio (default)\n                                                     <number>%  -> scale height with\n                                                                   given percentage\n                                                     <number>   -> scale height with\n                                                                   pixel counts\n                                                     <number>px -> scale height with\n                                                                   pixel counts\n                                                */\n#define SIXEL_OPTFLAG_RESAMPLING        ('r')  /* -r RESAMPLINGTYPE, --resampling=RESAMPLINGTYPE:\n                                                  choose resampling filter used\n                                                  with -w or -h option (scaling)\n                                                  RESAMPLINGTYPE is one of them:\n                                                    nearest  -> Nearest-Neighbor\n                                                                method\n                                                    gaussian -> Gaussian filter\n                                                    hanning  -> Hanning filter\n                                                    hamming  -> Hamming filter\n                                                    bilinear -> Bilinear filter\n                                                                (default)\n                                                    welsh    -> Welsh filter\n                                                    bicubic  -> Bicubic filter\n                                                    lanczos2 -> Lanczos-2 filter\n                                                    lanczos3 -> Lanczos-3 filter\n                                                    lanczos4 -> Lanczos-4 filter\n                                                */\n#define SIXEL_OPTFLAG_QUALITY           ('q')  /* -q QUALITYMODE, --quality=QUALITYMODE:\n                                                  select quality of color\n                                                  quanlization.\n                                                    auto -> decide quality mode\n                                                            automatically (default)\n                                                    low  -> low quality and high\n                                                            speed mode\n                                                    high -> high quality and low\n                                                            speed mode\n                                                    full -> full quality and careful\n                                                            speed mode\n                                                */\n#define SIXEL_OPTFLAG_LOOPMODE          ('l')  /* -l LOOPMODE, --loop-control=LOOPMODE:\n                                                  select loop control mode for GIF\n                                                  animation.\n                                                    auto    -> honor the setting of\n                                                               GIF header (default)\n                                                    force   -> always enable loop\n                                                    disable -> always disable loop\n                                                */\n#define SIXEL_OPTFLAG_PALETTE_TYPE      ('t')  /* -t PALETTETYPE, --palette-type=PALETTETYPE:\n                                                  select palette color space type\n                                                    auto -> choose palette type\n                                                            automatically (default)\n                                                    hls  -> use HLS color space\n                                                    rgb  -> use RGB color space\n                                                */\n#define SIXEL_OPTFLAG_BUILTIN_PALETTE   ('b')  /* -b BUILTINPALETTE, --builtin-palette=BUILTINPALETTE:\n                                                  select built-in palette type\n                                                    xterm16    -> X default 16 color map\n                                                    xterm256   -> X default 256 color map\n                                                    vt340mono  -> VT340 monochrome map\n                                                    vt340color -> VT340 color map\n                                                    gray1      -> 1bit grayscale map\n                                                    gray2      -> 2bit grayscale map\n                                                    gray4      -> 4bit grayscale map\n                                                    gray8      -> 8bit grayscale map\n                                                */\n#define SIXEL_OPTFLAG_ENCODE_POLICY     ('E')  /* -E ENCODEPOLICY, --encode-policy=ENCODEPOLICY:\n                                                  select encoding policy\n                                                    auto -> choose encoding policy\n                                                            automatically (default)\n                                                    fast -> encode as fast as possible\n                                                    size -> encode to as small sixel\n                                                            sequence as possible\n                                                */\n#define SIXEL_OPTFLAG_BGCOLOR           ('B')  /* -B BGCOLOR, --bgcolor=BGCOLOR:\n                                                  specify background color\n                                                  BGCOLOR is represented by the\n                                                  following syntax\n                                                    #rgb\n                                                    #rrggbb\n                                                    #rrrgggbbb\n                                                    #rrrrggggbbbb\n                                                    rgb:r/g/b\n                                                    rgb:rr/gg/bb\n                                                    rgb:rrr/ggg/bbb\n                                                    rgb:rrrr/gggg/bbbb\n                                                */\n#define SIXEL_OPTFLAG_PENETRATE         ('P')  /* -P, --penetrate:\n                                                  penetrate GNU Screen using DCS\n                                                  pass-through sequence */\n#define SIXEL_OPTFLAG_PIPE_MODE         ('D')  /* -D, --pipe-mode: (deprecated)\n                                                  read source images from stdin continuously */\n#define SIXEL_OPTFLAG_VERBOSE           ('v')  /* -v, --verbose: show debugging info */\n#define SIXEL_OPTFLAG_VERSION           ('V')  /* -V, --version: show version and license info */\n#define SIXEL_OPTFLAG_HELP              ('H')  /* -H, --help: show this help */\n\n#define SIXEL_WIDTH_LIMIT               1000000\n#define SIXEL_HEIGHT_LIMIT              1000000\n\n#if SIXEL_USE_DEPRECATED_SYMBOLS\n/* output character size */\nenum characterSize {\n    CSIZE_7BIT = 0,  /* 7bit character */\n    CSIZE_8BIT = 1   /* 8bit character */\n};\n\n/* method for finding the largest dimension for splitting,\n * and sorting by that component */\nenum methodForLargest {\n    LARGE_AUTO = 0,  /* choose automatically the method for finding the largest\n                        dimension */\n    LARGE_NORM = 1,  /* simply comparing the range in RGB space */\n    LARGE_LUM  = 2   /* transforming into luminosities before the comparison */\n};\n\n/* method for choosing a color from the box */\nenum methodForRep {\n    REP_AUTO           = 0, /* choose automatically the method for selecting\n                               representative color from each box */\n    REP_CENTER_BOX     = 1, /* choose the center of the box */\n    REP_AVERAGE_COLORS = 2, /* choose the average all the color\n                               in the box (specified in Heckbert's paper) */\n    REP_AVERAGE_PIXELS = 3  /* choose the average all the pixels in the box */\n};\n\n/* method for diffusing */\nenum methodForDiffuse {\n    DIFFUSE_AUTO     = 0, /* choose diffusion type automatically */\n    DIFFUSE_NONE     = 1, /* don't diffuse */\n    DIFFUSE_ATKINSON = 2, /* diffuse with Bill Atkinson's method */\n    DIFFUSE_FS       = 3, /* diffuse with Floyd-Steinberg method */\n    DIFFUSE_JAJUNI   = 4, /* diffuse with Jarvis, Judice & Ninke method */\n    DIFFUSE_STUCKI   = 5, /* diffuse with Stucki's method */\n    DIFFUSE_BURKES   = 6, /* diffuse with Burkes' method */\n    DIFFUSE_A_DITHER = 7, /* positionally stable arithmetic dither */\n    DIFFUSE_X_DITHER = 8  /* positionally stable arithmetic xor based dither */\n};\n\n/* quality modes */\nenum qualityMode {\n    QUALITY_AUTO      = 0, /* choose quality mode automatically */\n    QUALITY_HIGH      = 1, /* high quality palette construction */\n    QUALITY_LOW       = 2, /* low quality palette construction */\n    QUALITY_FULL      = 3, /* full quality palette construction */\n    QUALITY_HIGHCOLOR = 4  /* high color */\n};\n\n/* built-in dither */\nenum builtinDither {\n    BUILTIN_MONO_DARK   = 0, /* monochrome terminal with dark background */\n    BUILTIN_MONO_LIGHT  = 1, /* monochrome terminal with dark background */\n    BUILTIN_XTERM16     = 2, /* xterm 16color */\n    BUILTIN_XTERM256    = 3, /* xterm 256color */\n    BUILTIN_VT340_MONO  = 4, /* vt340 monochrome */\n    BUILTIN_VT340_COLOR = 5  /* vt340 color */\n};\n\n/* offset value of enum pixelFormat */\nenum formatType {\n    FORMATTYPE_COLOR     = 0,\n    FORMATTYPE_GRAYSCALE = 1 << 6,\n    FORMATTYPE_PALETTE   = 1 << 7\n};\n\n/* pixelformat type of input image\n   NOTE: for compatibility, the value of PIXELFORAMT_COLOR_RGB888 must be 3 */\nenum pixelFormat {\n    PIXELFORMAT_RGB555   = FORMATTYPE_COLOR     | 0x01, /* 15bpp */\n    PIXELFORMAT_RGB565   = FORMATTYPE_COLOR     | 0x02, /* 16bpp */\n    PIXELFORMAT_RGB888   = FORMATTYPE_COLOR     | 0x03, /* 24bpp */\n    PIXELFORMAT_BGR555   = FORMATTYPE_COLOR     | 0x04, /* 15bpp */\n    PIXELFORMAT_BGR565   = FORMATTYPE_COLOR     | 0x05, /* 16bpp */\n    PIXELFORMAT_BGR888   = FORMATTYPE_COLOR     | 0x06, /* 24bpp */\n    PIXELFORMAT_ARGB8888 = FORMATTYPE_COLOR     | 0x10, /* 32bpp */\n    PIXELFORMAT_RGBA8888 = FORMATTYPE_COLOR     | 0x11, /* 32bpp */\n    PIXELFORMAT_G1       = FORMATTYPE_GRAYSCALE | 0x00, /* 1bpp grayscale */\n    PIXELFORMAT_G2       = FORMATTYPE_GRAYSCALE | 0x01, /* 2bpp grayscale */\n    PIXELFORMAT_G4       = FORMATTYPE_GRAYSCALE | 0x02, /* 4bpp grayscale */\n    PIXELFORMAT_G8       = FORMATTYPE_GRAYSCALE | 0x03, /* 8bpp grayscale */\n    PIXELFORMAT_AG88     = FORMATTYPE_GRAYSCALE | 0x13, /* 16bpp gray+alpha */\n    PIXELFORMAT_GA88     = FORMATTYPE_GRAYSCALE | 0x23, /* 16bpp gray+alpha */\n    PIXELFORMAT_PAL1     = FORMATTYPE_PALETTE   | 0x00, /* 1bpp palette */\n    PIXELFORMAT_PAL2     = FORMATTYPE_PALETTE   | 0x01, /* 2bpp palette */\n    PIXELFORMAT_PAL4     = FORMATTYPE_PALETTE   | 0x02, /* 4bpp palette */\n    PIXELFORMAT_PAL8     = FORMATTYPE_PALETTE   | 0x03  /* 8bpp palette */\n};\n\n/* palette type */\nenum paletteType {\n    PALETTETYPE_AUTO = 0,     /* choose palette type automatically */\n    PALETTETYPE_HLS  = 1,     /* HLS colorspace */\n    PALETTETYPE_RGB  = 2      /* RGB colorspace */\n};\n\n/* policies of SIXEL encoding */\nenum encodePolicy {\n    ENCODEPOLICY_AUTO = 0,    /* choose encoding policy automatically */\n    ENCODEPOLICY_FAST = 1,    /* encode as fast as possible */\n    ENCODEPOLICY_SIZE = 2     /* encode to as small sixel sequence as possible */\n};\n\n/* method for re-sampling */\nenum methodForResampling {\n    RES_NEAREST  = 0,  /* Use nearest neighbor method */\n    RES_GAUSSIAN = 1,  /* Use guaussian filter */\n    RES_HANNING  = 2,  /* Use hanning filter */\n    RES_HAMMING  = 3,  /* Use hamming filter */\n    RES_BILINEAR = 4,  /* Use bilinear filter */\n    RES_WELSH    = 5,  /* Use welsh filter */\n    RES_BICUBIC  = 6,  /* Use bicubic filter */\n    RES_LANCZOS2 = 7,  /* Use lanczos-2 filter */\n    RES_LANCZOS3 = 8,  /* Use lanczos-3 filter */\n    RES_LANCZOS4 = 9   /* Use lanczos-4 filter */\n};\n#endif\n\ntypedef void *(* sixel_malloc_t)(size_t);\ntypedef void *(* sixel_calloc_t)(size_t, size_t);\ntypedef void *(* sixel_realloc_t)(void *, size_t);\ntypedef void (* sixel_free_t)(void *);\n\nstruct sixel_allocator;\ntypedef struct sixel_allocator sixel_allocator_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create allocator object */\nSIXELSTATUS\nsixel_allocator_new(\n    sixel_allocator_t   /* out */ **ppallocator,  /* allocator object to be created */\n    sixel_malloc_t      /* in */  fn_malloc,      /* custom malloc() function */\n    sixel_calloc_t      /* in */  fn_calloc,      /* custom calloc() function */\n    sixel_realloc_t     /* in */  fn_realloc,     /* custom realloc() function */\n    sixel_free_t        /* in */  fn_free);       /* custom free() function */\n\n/* increase reference count of allocator object (thread-unsafe) */\nSIXELAPI void\nsixel_allocator_ref(\n    sixel_allocator_t /* in */ *allocator);  /* allocator object to be\n                                                increment reference counter */\n\n/* decrease reference count of output context object (thread-unsafe) */\nSIXELAPI void\nsixel_allocator_unref(sixel_allocator_t *allocator);\n\n/* call custom malloc() */\nSIXELAPI void *\nsixel_allocator_malloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    size_t              /* in */ n);          /* allocation size */\n\n/* call custom calloc() */\nSIXELAPI void *\nsixel_allocator_calloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    size_t              /* in */ nelm,        /* allocation size */\n    size_t              /* in */ elsize);     /* allocation size */\n\n/* call custom realloc() */\nSIXELAPI void *\nsixel_allocator_realloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    void                /* in */ *p,          /* existing buffer to be re-allocated */\n    size_t              /* in */ n);          /* re-allocation size */\n\n/* call custom free() */\nSIXELAPI void\nsixel_allocator_free(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    void                /* in */ *p);         /* existing buffer to be freed */\n\n#ifdef HAVE_TESTS\nextern volatile int sixel_debug_malloc_counter;\n\nvoid *\nsixel_bad_malloc(size_t size);\n\nvoid *\nsixel_bad_calloc(size_t count, size_t size);\n\nvoid *\nsixel_bad_realloc(void *ptr, size_t size);\n#endif  /* HAVE_TESTS */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* output context manipulation API */\n\nstruct sixel_output;\ntypedef struct sixel_output sixel_output_t;\ntypedef int (* sixel_write_function)(char *data, int size, void *priv);\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create new output context object */\nSIXELAPI SIXELSTATUS\nsixel_output_new(\n    sixel_output_t          /* out */ **output,     /* output object to be created */\n    sixel_write_function    /* in */  fn_write,     /* callback for output sixel */\n    void                    /* in */ *priv,         /* private data given as\n                                                       3rd argument of fn_write */\n    sixel_allocator_t       /* in */  *allocator);  /* allocator, null if you use\n                                                       default allocator */\n\n/* deprecated: create an output object */\nSIXELAPI @attr_func_deprecated@ sixel_output_t *\nsixel_output_create(\n    sixel_write_function /* in */ fn_write, /* callback for output sixel */\n    void                 /* in */ *priv);   /* private data given as\n                                               3rd argument of fn_write */\n/* destroy output context object */\nSIXELAPI void\nsixel_output_destroy(sixel_output_t /* in */ *output); /* output context */\n\n/* increase reference count of output context object (thread-unsafe) */\nSIXELAPI void\nsixel_output_ref(sixel_output_t /* in */ *output);     /* output context */\n\n/* decrease reference count of output context object (thread-unsafe) */\nSIXELAPI void\nsixel_output_unref(sixel_output_t /* in */ *output);   /* output context */\n\n/* get 8bit output mode which indicates whether it uses C1 control characters */\nSIXELAPI int\nsixel_output_get_8bit_availability(\n    sixel_output_t /* in */ *output);   /* output context */\n\n/* set 8bit output mode state */\nSIXELAPI void\nsixel_output_set_8bit_availability(\n    sixel_output_t /* in */ *output,       /* output context */\n    int            /* in */ availability); /* 0: do not use 8bit characters\n                                              1: use 8bit characters */\n\n/* set whether limit arguments of DECGRI('!') to 255 */\nSIXELAPI void\nsixel_output_set_gri_arg_limit(\n    sixel_output_t /* in */ *output, /* output context */\n    int            /* in */ value);  /* 0: don't limit arguments of DECGRI\n                                        1: limit arguments of DECGRI to 255 */\n\n/* set GNU Screen penetration feature enable or disable */\nSIXELAPI void\nsixel_output_set_penetrate_multiplexer(\n    sixel_output_t /* in */ *output,    /* output context */\n    int            /* in */ penetrate); /* 0: penetrate GNU Screen\n                                           1: do not penetrate GNU Screen */\n\n/* set whether we skip DCS envelope */\nSIXELAPI void\nsixel_output_set_skip_dcs_envelope(\n    sixel_output_t /* in */ *output,   /* output context */\n    int            /* in */ skip);     /* 0: output DCS envelope\n                                          1: do not output DCS envelope */\n\n/* set palette type: RGB or HLS */\nSIXELAPI void\nsixel_output_set_palette_type(\n    sixel_output_t /* in */ *output,      /* output context */\n    int            /* in */ palettetype); /* PALETTETYPE_RGB: RGB palette\n                                             PALETTETYPE_HLS: HLS palette */\n\n/* set encodeing policy: auto, fast or size */\nSIXELAPI void\nsixel_output_set_encode_policy(\n    sixel_output_t /* in */ *output,    /* output context */\n    int            /* in */ encode_policy);\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* color quantization API */\n\n/* handle type of dither context object */\nstruct sixel_dither;\ntypedef struct sixel_dither sixel_dither_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create dither context object */\nSIXELAPI SIXELSTATUS\nsixel_dither_new(\n    sixel_dither_t      /* out */   **ppdither,  /* dither object to be created */\n    int                 /* in */    ncolors,     /* required colors */\n    sixel_allocator_t   /* in */    *allocator); /* allocator, null if you use\n                                                    default allocator */\n\n/* create dither context object */\nSIXELAPI @attr_func_deprecated@ sixel_dither_t *\nsixel_dither_create(int /* in */ ncolors); /* number of colors */\n\n/* get built-in dither context object */\nSIXELAPI sixel_dither_t *\nsixel_dither_get(int builtin_dither); /* ID of built-in dither object */\n\n/* destroy dither context object */\nSIXELAPI void\nsixel_dither_destroy(sixel_dither_t *dither); /* dither context object */\n\n/* increase reference count of dither context object (thread-unsafe) */\nSIXELAPI void\nsixel_dither_ref(sixel_dither_t *dither); /* dither context object */\n\n/* decrease reference count of dither context object (thread-unsafe) */\nSIXELAPI void\nsixel_dither_unref(sixel_dither_t *dither); /* dither context object */\n\n/* initialize internal palette from specified pixel buffer */\nSIXELAPI SIXELSTATUS\nsixel_dither_initialize(\n    sixel_dither_t *dither,                    /* dither context object */\n    unsigned char /* in */ *data,              /* sample image */\n    int           /* in */ width,              /* image width */\n    int           /* in */ height,             /* image height */\n    int           /* in */ pixelformat,        /* one of enum pixelFormat */\n    int           /* in */ method_for_largest, /* method for finding the largest dimension */\n    int           /* in */ method_for_rep,     /* method for choosing a color from the box */\n    int           /* in */ quality_mode);      /* quality of histogram processing */\n\n/* set diffusion type, choose from enum methodForDiffuse */\nSIXELAPI void\nsixel_dither_set_diffusion_type(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    int /* in */ method_for_diffuse);  /* one of enum methodForDiffuse */\n\n/* get number of palette colors */\nSIXELAPI int\nsixel_dither_get_num_of_palette_colors(\n    sixel_dither_t /* in */ *dither);  /* dither context object */\n\n/* get number of histogram colors */\nSIXELAPI int\nsixel_dither_get_num_of_histogram_colors(\n    sixel_dither_t /* in */ *dither);  /* dither context object */\n\nSIXELAPI @attr_func_deprecated@ int /* typoed! remains for compatibility. */\nsixel_dither_get_num_of_histgram_colors(\n    sixel_dither_t /* in */ *dither);  /* dither context object */\n\n/* get palette */\nSIXELAPI unsigned char *\nsixel_dither_get_palette(\n    sixel_dither_t /* in */ *dither);  /* dither context object */\n\n/* set palette */\nSIXELAPI void\nsixel_dither_set_palette(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    unsigned char  /* in */ *palette);\n\n/* set the factor of complexion color correcting */\nSIXELAPI void\nsixel_dither_set_complexion_score(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    int            /* in */ score);    /* complexion score (>= 1) */\n\n/* set whether omitting palette difinition */\nSIXELAPI void\nsixel_dither_set_body_only(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    int            /* in */ bodyonly); /* 0: output palette section(default)\n                                          1: do not output palette section */\n/* set whether optimize palette size */\nSIXELAPI void\nsixel_dither_set_optimize_palette(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    int            /* in */ do_opt);   /* 0: optimize palette size\n                                          1: don't optimize palette size */\n/* set pixelformat */\nSIXELAPI void\nsixel_dither_set_pixelformat(\n    sixel_dither_t /* in */ *dither,      /* dither context object */\n    int            /* in */ pixelformat); /* one of enum pixelFormat */\n\n/* set transparent */\nSIXELAPI void\nsixel_dither_set_transparent(\n    sixel_dither_t /* in */ *dither,      /* dither context object */\n    int            /* in */ transparent); /* transparent color index */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* converter API */\n\ntypedef void * (* sixel_allocator_function)(size_t size);\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* convert pixels into sixel format and write it to output context */\nSIXELAPI SIXELSTATUS\nsixel_encode(\n    unsigned char  /* in */ *pixels,     /* pixel bytes */\n    int            /* in */  width,      /* image width */\n    int            /* in */  height,     /* image height */\n    int            /* in */  depth,      /* color depth: now unused */\n    sixel_dither_t /* in */ *dither,     /* dither context */\n    sixel_output_t /* in */ *context);   /* output context */\n\n/* convert sixel data into indexed pixel bytes and palette data */\nSIXELAPI SIXELSTATUS\nsixel_decode_raw(\n    unsigned char       /* in */  *p,           /* sixel bytes */\n    int                 /* in */  len,          /* size of sixel bytes */\n    unsigned char       /* out */ **pixels,     /* decoded pixels */\n    int                 /* out */ *pwidth,      /* image width */\n    int                 /* out */ *pheight,     /* image height */\n    unsigned char       /* out */ **palette,    /* ARGB palette */\n    int                 /* out */ *ncolors,     /* palette size (<= 256) */\n    sixel_allocator_t   /* in */  *allocator);  /* allocator object or null */\n\nSIXELAPI @attr_func_deprecated@ SIXELSTATUS\nsixel_decode(\n    unsigned char            /* in */  *sixels,    /* sixel bytes */\n    int                      /* in */  size,       /* size of sixel bytes */\n    unsigned char            /* out */ **pixels,   /* decoded pixels */\n    int                      /* out */ *pwidth,    /* image width */\n    int                      /* out */ *pheight,   /* image height */\n    unsigned char            /* out */ **palette,  /* RGBA palette */\n    int                      /* out */ *ncolors,   /* palette size (<= 256) */\n    sixel_allocator_function /* in */  fn_malloc); /* malloc function */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* helper API */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nSIXELAPI void\nsixel_helper_set_additional_message(\n    const char      /* in */  *message         /* error message */\n);\n\nSIXELAPI char const *\nsixel_helper_get_additional_message(void);\n\n/* convert error status code int formatted string */\nSIXELAPI char const *\nsixel_helper_format_error(\n    SIXELSTATUS     /* in */  status           /* status code */\n);\n\n/* compute pixel depth from pixelformat */\nSIXELAPI int\nsixel_helper_compute_depth(\n    int /* in */ pixelformat /* one of enum pixelFormat */\n);\n\n/* convert pixelFormat into PIXELFORMAT_RGB888 */\nSIXELAPI SIXELSTATUS\nsixel_helper_normalize_pixelformat(\n    unsigned char       /* out */ *dst,             /* destination buffer */\n    int                 /* out */ *dst_pixelformat, /* converted pixelformat */\n    unsigned char const /* in */  *src,             /* source pixels */\n    int                 /* in */  src_pixelformat,  /* format of source image */\n    int                 /* in */  width,            /* width of source image */\n    int                 /* in */  height            /* height of source image */\n);\n\n/* scale image to specified size */\nSIXELAPI SIXELSTATUS\nsixel_helper_scale_image(\n    unsigned char       /* out */ *dst,                  /* destination buffer */\n    unsigned char const /* in */  *src,                  /* source image data */\n    int                 /* in */  srcw,                  /* source image width */\n    int                 /* in */  srch,                  /* source image height */\n    int                 /* in */  pixelformat,           /* one of enum pixelFormat */\n    int                 /* in */  dstw,                  /* destination image width */\n    int                 /* in */  dsth,                  /* destination image height */\n    int                 /* in */  method_for_resampling, /* one of methodForResampling */\n    sixel_allocator_t   /* in */  *allocator             /* allocator object */\n);\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* image loader/writer API */\n\n#if SIXEL_USE_DEPRECATED_SYMBOLS\nenum imageFormat {\n    FORMAT_GIF   =  0, /* read only */\n    FORMAT_PNG   =  1, /* read/write */\n    FORMAT_BMP   =  2, /* read only */\n    FORMAT_JPG   =  3, /* read only */\n    FORMAT_TGA   =  4, /* read only */\n    FORMAT_WBMP  =  5, /* read only with --with-gd configure option */\n    FORMAT_TIFF  =  6, /* read only */\n    FORMAT_SIXEL =  7, /* read only */\n    FORMAT_PNM   =  8, /* read only */\n    FORMAT_GD2   =  9, /* read only with --with-gd configure option */\n    FORMAT_PSD   = 10, /* read only */\n    FORMAT_HDR   = 11  /* read only */\n};\n\n/* loop mode */\nenum loopControl {\n    LOOP_AUTO    = 0,  /* honer the setting of GIF header */\n    LOOP_FORCE   = 1,  /* always enable loop */\n    LOOP_DISABLE = 2   /* always disable loop */\n};\n#endif\n\n/* handle type of dither context object */\nstruct sixel_frame;\ntypedef struct sixel_frame sixel_frame_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* constructor of frame object */\nSIXELAPI SIXELSTATUS\nsixel_frame_new(\n    sixel_frame_t       /* out */ **ppframe,    /* frame object to be created */\n    sixel_allocator_t   /* in */  *allocator);  /* allocator, null if you use\n                                                   default allocator */\n/* deprecated version of sixel_frame_new() */\nSIXELAPI @attr_func_deprecated@ sixel_frame_t *\nsixel_frame_create(void);\n\n/* increase reference count of frame object (thread-unsafe) */\nSIXELAPI void\nsixel_frame_ref(sixel_frame_t /* in */ *frame);\n\n/* decrease reference count of frame object (thread-unsafe) */\nSIXELAPI void\nsixel_frame_unref(sixel_frame_t /* in */ *frame);\n\n/* initialize frame object with a pixel buffer */\nSIXELAPI SIXELSTATUS\nsixel_frame_init(\n    sixel_frame_t   /* in */ *frame,        /* frame object to be initialize */\n    unsigned char   /* in */ *pixels,       /* pixel buffer */\n    int             /* in */ width,         /* pixel width of buffer */\n    int             /* in */ height,        /* pixel height of buffer */\n    int             /* in */ pixelformat,   /* pixelformat of buffer */\n    unsigned char   /* in */ *palette,      /* palette for buffer or NULL */\n    int             /* in */ ncolors        /* number of palette colors or (-1) */\n);\n\n/* get pixels */\nSIXELAPI unsigned char *\nsixel_frame_get_pixels(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get palette */\nSIXELAPI unsigned char *\nsixel_frame_get_palette(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get width */\nSIXELAPI int\nsixel_frame_get_width(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get height */\nSIXELAPI int\nsixel_frame_get_height(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get ncolors */\nSIXELAPI int\nsixel_frame_get_ncolors(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get pixelformat */\nSIXELAPI int\nsixel_frame_get_pixelformat(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get transparent */\nSIXELAPI int\nsixel_frame_get_transparent(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get transparent */\nSIXELAPI int\nsixel_frame_get_multiframe(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get delay */\nSIXELAPI int\nsixel_frame_get_delay(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get frame no */\nSIXELAPI int\nsixel_frame_get_frame_no(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get loop no */\nSIXELAPI int\nsixel_frame_get_loop_no(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* strip alpha from RGBA/ARGB formatted pixbuf */\nSIXELAPI int\nsixel_frame_strip_alpha(\n    sixel_frame_t  /* in */ *frame,\n    unsigned char  /* in */ *bgcolor);\n\n/* resize a frame to given size with specified resampling filter */\nSIXELAPI SIXELSTATUS\nsixel_frame_resize(\n    sixel_frame_t  /* in */ *frame,\n    int            /* in */ width,\n    int            /* in */ height,\n    int            /* in */ method_for_resampling);\n\n/* clip frame */\nSIXELAPI SIXELSTATUS\nsixel_frame_clip(\n    sixel_frame_t  /* in */ *frame,\n    int            /* in */ x,\n    int            /* in */ y,\n    int            /* in */ width,\n    int            /* in */ height);\n\ntypedef SIXELSTATUS (* sixel_load_image_function)(\n    sixel_frame_t /* in */     *frame,\n    void          /* in/out */ *context);\n\nSIXELAPI SIXELSTATUS\nsixel_helper_load_image_file(\n    char const                /* in */     *filename,     /* source file name */\n    int                       /* in */     fstatic,       /* whether to extract static image */\n    int                       /* in */     fuse_palette,  /* whether to use paletted image */\n    int                       /* in */     reqcolors,     /* requested number of colors */\n    unsigned char             /* in */     *bgcolor,      /* background color */\n    int                       /* in */     loop_control,  /* one of enum loopControl */\n    sixel_load_image_function /* in */     fn_load,       /* callback */\n    int                       /* in */     finsecure,     /* true if do not verify SSL */\n    int const                 /* in */     *cancel_flag,  /* cancel flag */\n    void                      /* in/out */ *context,      /* private data for callback */\n    sixel_allocator_t         /* in */     *allocator);   /* allocator object */\n\n/* write image to file */\nSIXELAPI SIXELSTATUS\nsixel_helper_write_image_file(\n    unsigned char       /* in */ *data,        /* source pixel data */\n    int                 /* in */ width,        /* source data width */\n    int                 /* in */ height,       /* source data height */\n    unsigned char       /* in */ *palette,     /* palette of source data */\n    int                 /* in */ pixelformat,  /* source pixelFormat */\n    char const          /* in */ *filename,    /* destination filename */\n    int                 /* in */ imageformat,  /* one of enum imageformat */\n    sixel_allocator_t   /* in */ *allocator);  /* allocator object */\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* easy encoder API */\n\n/* handle type of dither context object */\nstruct sixel_encoder;\ntypedef struct sixel_encoder sixel_encoder_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create encoder object */\nSIXELAPI SIXELSTATUS\nsixel_encoder_new(\n    sixel_encoder_t     /* out */ **ppencoder, /* encoder object to be created */\n    sixel_allocator_t   /* in */  *allocator); /* allocator, null if you use\n                                                  default allocator */\n\n/* deprecated version of sixel_decoder_new() */\nSIXELAPI @attr_func_deprecated@ sixel_encoder_t *\nsixel_encoder_create(void);\n\n/* increase reference count of encoder object (thread-unsafe) */\nSIXELAPI void\nsixel_encoder_ref(sixel_encoder_t /* in */ *encoder);\n\n/* decrease reference count of encoder object (thread-unsafe) */\nSIXELAPI void\nsixel_encoder_unref(sixel_encoder_t /* in */ *encoder);\n\n/* set cancel state flag to encoder object */\nSIXELAPI SIXELSTATUS\nsixel_encoder_set_cancel_flag(\n    sixel_encoder_t /* in */ *encoder,\n    int             /* in */ *cancel_flag);\n\n/* set an option flag to encoder object */\nSIXELAPI SIXELSTATUS\nsixel_encoder_setopt(\n    sixel_encoder_t /* in */ *encoder,\n    int             /* in */ arg,\n    char const      /* in */ *optarg);\n\n/* load source data from specified file and encode it to SIXEL format */\nSIXELAPI SIXELSTATUS\nsixel_encoder_encode(\n    sixel_encoder_t /* in */ *encoder,\n    char const      /* in */ *filename);\n\n/* encode specified pixel data to SIXEL format\n * output to encoder->outfd */\nSIXELAPI SIXELSTATUS\nsixel_encoder_encode_bytes(\n    sixel_encoder_t     /* in */    *encoder,\n    unsigned char       /* in */    *bytes,\n    int                 /* in */    width,\n    int                 /* in */    height,\n    int                 /* in */    pixelformat,\n    unsigned char       /* in */    *palette,\n    int                 /* in */    ncolors);\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* easy encoder API */\n\n/* handle type of dither context object */\nstruct sixel_decoder;\ntypedef struct sixel_decoder sixel_decoder_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create decoder object */\nSIXELAPI SIXELSTATUS\nsixel_decoder_new(\n    sixel_decoder_t    /* out */ **ppdecoder,  /* decoder object to be created */\n    sixel_allocator_t  /* in */  *allocator);  /* allocator, null if you use\n                                                  default allocator */\n\n/* deprecated version of sixel_decoder_new() */\nSIXELAPI @attr_func_deprecated@ sixel_decoder_t *\nsixel_decoder_create(void);\n\n/* increase reference count of decoder object (thread-unsafe) */\nSIXELAPI void\nsixel_decoder_ref(sixel_decoder_t *decoder);\n\n/* decrease reference count of decoder object (thread-unsafe) */\nSIXELAPI void\nsixel_decoder_unref(sixel_decoder_t *decoder);\n\n/* set an option flag to decoder object */\nSIXELAPI SIXELSTATUS\nsixel_decoder_setopt(\n    sixel_decoder_t /* in */ *decoder,  /* decoder object */\n    int             /* in */ arg,       /* one of SIXEL_OPTFLAG_*** */\n    char const      /* in */ *optarg);  /* null or an argument of optflag */\n\n/* load source data from stdin or the file specified with\n   SIXEL_OPTFLAG_INPUT flag, and decode it */\nSIXELAPI SIXELSTATUS\nsixel_decoder_decode(\n    sixel_decoder_t /* in */ *decoder);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  /* LIBSIXEL_SIXEL_H */\n\n/* emacs Local Variables:      */\n/* emacs mode: c               */\n/* emacs tab-width: 4          */\n/* emacs indent-tabs-mode: nil */\n/* emacs c-basic-offset: 4     */\n/* emacs End:                  */\n/* vim: set expandtab ts=4 sts=4 sw=4 : */\n/* EOF */\n", "/*\n * Copyright (c) 2014-2018 Hayaki Saito\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n#include <stdlib.h>\n#include <assert.h>\n#include \"config.h\"\n\n#if HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif  /* HAVE_SYS_TYPES_H */\n\n#if HAVE_ERRNO_H\n# include <errno.h>\n#endif  /* HAVE_ERRNO_H */\n\n#if HAVE_MEMORY_H\n# include <memory.h>\n#endif  /* HAVE_MEMORY_H */\n\n#include \"allocator.h\"\n#include \"malloc_stub.h\"\n\n/* create allocator object */\nSIXELSTATUS\nsixel_allocator_new(\n    sixel_allocator_t   /* out */ **ppallocator,  /* allocator object to be created */\n    sixel_malloc_t      /* in */  fn_malloc,      /* custom malloc() function */\n    sixel_calloc_t      /* in */  fn_calloc,      /* custom calloc() function */\n    sixel_realloc_t     /* in */  fn_realloc,     /* custom realloc() function */\n    sixel_free_t        /* in */  fn_free)        /* custom free() function */\n{\n    SIXELSTATUS status = SIXEL_FALSE;\n\n    if (ppallocator == NULL) {\n        sixel_helper_set_additional_message(\n            \"sixel_allocator_new: given argument ppallocator is null.\");\n        status = SIXEL_BAD_ARGUMENT;\n        goto end;\n    }\n\n    if (fn_malloc == NULL) {\n        fn_malloc = malloc;\n    }\n\n    if (fn_calloc == NULL) {\n        fn_calloc = calloc;\n    }\n\n    if (fn_realloc == NULL) {\n        fn_realloc = realloc;\n    }\n\n    if (fn_free == NULL) {\n        fn_free = free;\n    }\n\n    *ppallocator = fn_malloc(sizeof(sixel_allocator_t));\n    if (*ppallocator == NULL) {\n        sixel_helper_set_additional_message(\n            \"sixel_allocator_new: fn_malloc() failed.\");\n        status = SIXEL_BAD_ALLOCATION;\n        goto end;\n    }\n\n    (*ppallocator)->ref         = 1;\n    (*ppallocator)->fn_malloc   = fn_malloc;\n    (*ppallocator)->fn_calloc   = fn_calloc;\n    (*ppallocator)->fn_realloc  = fn_realloc;\n    (*ppallocator)->fn_free     = fn_free;\n\n    status = SIXEL_OK;\n\nend:\n    return status;\n}\n\n\n/* destruct allocator object */\nstatic void\nsixel_allocator_destroy(\n    sixel_allocator_t /* in */ *allocator)  /* allocator object to\n                                               be destroyed */\n{\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_free);\n\n    allocator->fn_free(allocator);\n}\n\n\n/* increase reference count of allocatort object (thread-unsafe) */\nSIXELAPI void\nsixel_allocator_ref(\n    sixel_allocator_t /* in */ *allocator)  /* allocator object to be\n                                               increment reference counter */\n{\n    /* precondition */\n    assert(allocator);\n\n    /* TODO: be thread safe */\n    ++allocator->ref;\n}\n\n\n/* decrease reference count of output context object (thread-unsafe) */\nSIXELAPI void\nsixel_allocator_unref(\n    sixel_allocator_t /* in */ *allocator)  /* allocator object to be unreference */\n{\n    /* TODO: be thread safe */\n    if (allocator) {\n        assert(allocator->ref > 0);\n        --allocator->ref;\n        if (allocator->ref == 0) {\n            sixel_allocator_destroy(allocator);\n        }\n    }\n}\n\n\n/* call custom malloc() */\nSIXELAPI void *\nsixel_allocator_malloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    size_t              /* in */ n)           /* allocation size */\n{\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_malloc);\n\n    if (n == 0) {\n        sixel_helper_set_additional_message(\n            \"sixel_allocator_malloc: called with n == 0\");\n        return NULL;\n    }\n    return allocator->fn_malloc(n);\n}\n\n\n/* call custom calloc() */\nSIXELAPI void *\nsixel_allocator_calloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    size_t              /* in */ nelm,        /* number of elements */\n    size_t              /* in */ elsize)      /* size of element */\n{\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_calloc);\n\n    return allocator->fn_calloc(nelm, elsize);\n}\n\n\n/* call custom realloc() */\nSIXELAPI void *\nsixel_allocator_realloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    void                /* in */ *p,          /* existing buffer to be re-allocated */\n    size_t              /* in */ n)           /* re-allocation size */\n{\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_realloc);\n\n    return allocator->fn_realloc(p, n);\n}\n\n\n/* call custom free() */\nSIXELAPI void\nsixel_allocator_free(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    void                /* in */ *p)          /* existing buffer to be freed */\n{\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_free);\n\n    allocator->fn_free(p);\n}\n\n\n#if HAVE_TESTS\nvolatile int sixel_debug_malloc_counter;\n\nvoid *\nsixel_bad_malloc(size_t size)\n{\n    return sixel_debug_malloc_counter-- == 0 ? NULL: malloc(size);\n}\n\n\nvoid *\nsixel_bad_calloc(size_t count, size_t size)\n{\n    (void) count;\n    (void) size;\n\n    return NULL;\n}\n\n\nvoid *\nsixel_bad_realloc(void *ptr, size_t size)\n{\n    (void) ptr;\n    (void) size;\n\n    return NULL;\n}\n#endif  /* HAVE_TESTS */\n\n#if 0\nint\nrpl_posix_memalign(void **memptr, size_t alignment, size_t size)\n{\n#if HAVE_POSIX_MEMALIGN\n    return posix_memalign(memptr, alignment, size);\n#elif HAVE_ALIGNED_ALLOC\n    *memptr = aligned_alloc(alignment, size);\n    return *memptr ? 0: ENOMEM;\n#elif HAVE_MEMALIGN\n    *memptr = memalign(alignment, size);\n    return *memptr ? 0: ENOMEM;\n#elif HAVE__ALIGNED_MALLOC\n    return _aligned_malloc(size, alignment);\n#else\n# error\n#endif /* _MSC_VER */\n}\n#endif\n\n\n#if HAVE_TESTS\nstatic int\ntest1(void)\n{\n    int nret = EXIT_FAILURE;\n    SIXELSTATUS status;\n    sixel_allocator_t *allocator = NULL;\n\n    status = sixel_allocator_new(NULL, malloc, calloc, realloc, free);\n    if (status != SIXEL_BAD_ARGUMENT) {\n        goto error;\n    }\n\n    status = sixel_allocator_new(&allocator, NULL, calloc, realloc, free);\n    if (SIXEL_FAILED(status)) {\n        goto error;\n    }\n\n    status = sixel_allocator_new(&allocator, malloc, NULL, realloc, free);\n    if (SIXEL_FAILED(status)) {\n        goto error;\n    }\n\n    status = sixel_allocator_new(&allocator, malloc, calloc, NULL, free);\n    if (SIXEL_FAILED(status)) {\n        goto error;\n    }\n\n    status = sixel_allocator_new(&allocator, malloc, calloc, realloc, NULL);\n    if (SIXEL_FAILED(status)) {\n        goto error;\n    }\n\n    nret = EXIT_SUCCESS;\n\nerror:\n    return nret;\n}\n\n\nstatic int\ntest2(void)\n{\n    int nret = EXIT_FAILURE;\n    SIXELSTATUS status;\n    sixel_allocator_t *allocator = NULL;\n\n    sixel_debug_malloc_counter = 1;\n\n    status = sixel_allocator_new(&allocator, sixel_bad_malloc, calloc, realloc, free);\n    if (status == SIXEL_BAD_ALLOCATION) {\n        goto error;\n    }\n\n    nret = EXIT_SUCCESS;\n\nerror:\n    return nret;\n}\n\n\nSIXELAPI int\nsixel_allocator_tests_main(void)\n{\n    int nret = EXIT_FAILURE;\n    size_t i;\n    typedef int (* testcase)(void);\n\n    static testcase const testcases[] = {\n        test1,\n        test2\n    };\n\n    for (i = 0; i < sizeof(testcases) / sizeof(testcase); ++i) {\n        nret = testcases[i]();\n        if (nret != EXIT_SUCCESS) {\n            goto error;\n        }\n    }\n\n    nret = EXIT_SUCCESS;\n\nerror:\n    return nret;\n}\n#endif  /* HAVE_TESTS */\n\n/* emacs Local Variables:      */\n/* emacs mode: c               */\n/* emacs tab-width: 4          */\n/* emacs indent-tabs-mode: nil */\n/* emacs c-basic-offset: 4     */\n/* emacs End:                  */\n/* vim: set expandtab ts=4 sts=4 sw=4 : */\n/* EOF */\n"], "fixing_code": ["/*\n * Copyright (c) 2014-2018 Hayaki Saito\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n#include <stddef.h>  /* for size_t */\n\n#ifndef LIBSIXEL_SIXEL_H\n#define LIBSIXEL_SIXEL_H\n\n#ifdef _WIN32\n# define SIXELAPI __declspec(dllexport)\n#else\n# define SIXELAPI\n#endif\n\n#define LIBSIXEL_VERSION \"@PACKAGE_VERSION@\"\n#define LIBSIXEL_ABI_VERSION \"@LS_LTVERSION@\"\n\ntypedef unsigned char sixel_index_t;\n\n#define SIXEL_OUTPUT_PACKET_SIZE     16384\n#define SIXEL_PALETTE_MIN            2\n#define SIXEL_PALETTE_MAX            256\n#define SIXEL_USE_DEPRECATED_SYMBOLS 1\n#define SIXEL_ALLOCATE_BYTES_MAX     10248UL * 1024UL * 128UL   /* up to 128M */\n\n/* return value */\ntypedef int SIXELSTATUS;\n#define SIXEL_OK                0x0000                          /* succeeded */\n#define SIXEL_FALSE             0x1000                          /* failed */\n\n#define SIXEL_RUNTIME_ERROR     (SIXEL_FALSE         | 0x0100)  /* runtime error */\n#define SIXEL_LOGIC_ERROR       (SIXEL_FALSE         | 0x0200)  /* logic error */\n#define SIXEL_FEATURE_ERROR     (SIXEL_FALSE         | 0x0300)  /* feature not enabled */\n#define SIXEL_LIBC_ERROR        (SIXEL_FALSE         | 0x0400)  /* errors caused by curl */\n#define SIXEL_CURL_ERROR        (SIXEL_FALSE         | 0x0500)  /* errors occures in libc functions */\n#define SIXEL_JPEG_ERROR        (SIXEL_FALSE         | 0x0600)  /* errors occures in libjpeg functions */\n#define SIXEL_PNG_ERROR         (SIXEL_FALSE         | 0x0700)  /* errors occures in libpng functions */\n#define SIXEL_GDK_ERROR         (SIXEL_FALSE         | 0x0800)  /* errors occures in gdk functions */\n#define SIXEL_GD_ERROR          (SIXEL_FALSE         | 0x0900)  /* errors occures in gd functions */\n#define SIXEL_STBI_ERROR        (SIXEL_FALSE         | 0x0a00)  /* errors occures in stb_image functions */\n#define SIXEL_STBIW_ERROR       (SIXEL_FALSE         | 0x0b00)  /* errors occures in stb_image_write functions */\n\n#define SIXEL_INTERRUPTED       (SIXEL_OK            | 0x0001)  /* interrupted by a signal */\n\n#define SIXEL_BAD_ALLOCATION    (SIXEL_RUNTIME_ERROR | 0x0001)  /* malloc() failed */\n#define SIXEL_BAD_ARGUMENT      (SIXEL_RUNTIME_ERROR | 0x0002)  /* bad argument detected */\n#define SIXEL_BAD_INPUT         (SIXEL_RUNTIME_ERROR | 0x0003)  /* bad input detected */\n#define SIXEL_BAD_INTEGER_OVERFLOW (SIXEL_RUNTIME_ERROR | 0x0004)  /* integer overflow */\n\n#define SIXEL_NOT_IMPLEMENTED   (SIXEL_FEATURE_ERROR | 0x0001)  /* feature not implemented */\n\n#define SIXEL_SUCCEEDED(status) (((status) & 0x1000) == 0)\n#define SIXEL_FAILED(status)    (((status) & 0x1000) != 0)\n\n/* method for finding the largest dimension for splitting,\n * and sorting by that component */\n#define SIXEL_LARGE_AUTO   0x0   /* choose automatically the method for finding the largest\n                                    dimension */\n#define SIXEL_LARGE_NORM   0x1   /* simply comparing the range in RGB space */\n#define SIXEL_LARGE_LUM    0x2   /* transforming into luminosities before the comparison */\n\n/* method for choosing a color from the box */\n#define SIXEL_REP_AUTO            0x0  /* choose automatically the method for selecting\n                                          representative color from each box */\n#define SIXEL_REP_CENTER_BOX      0x1  /* choose the center of the box */\n#define SIXEL_REP_AVERAGE_COLORS  0x2  /* choose the average all the color\n                                          in the box (specified in Heckbert's paper) */\n#define SIXEL_REP_AVERAGE_PIXELS  0x3  /* choose the average all the pixels in the box */\n\n/* method for diffusing */\n#define SIXEL_DIFFUSE_AUTO        0x0  /* choose diffusion type automatically */\n#define SIXEL_DIFFUSE_NONE        0x1  /* don't diffuse */\n#define SIXEL_DIFFUSE_ATKINSON    0x2  /* diffuse with Bill Atkinson's method */\n#define SIXEL_DIFFUSE_FS          0x3  /* diffuse with Floyd-Steinberg method */\n#define SIXEL_DIFFUSE_JAJUNI      0x4  /* diffuse with Jarvis, Judice & Ninke method */\n#define SIXEL_DIFFUSE_STUCKI      0x5  /* diffuse with Stucki's method */\n#define SIXEL_DIFFUSE_BURKES      0x6  /* diffuse with Burkes' method */\n#define SIXEL_DIFFUSE_A_DITHER    0x7  /* positionally stable arithmetic dither */\n#define SIXEL_DIFFUSE_X_DITHER    0x8  /* positionally stable arithmetic xor based dither */\n\n/* quality modes */\n#define SIXEL_QUALITY_AUTO        0x0  /* choose quality mode automatically */\n#define SIXEL_QUALITY_HIGH        0x1  /* high quality palette construction */\n#define SIXEL_QUALITY_LOW         0x2  /* low quality palette construction */\n#define SIXEL_QUALITY_FULL        0x3  /* full quality palette construction */\n#define SIXEL_QUALITY_HIGHCOLOR   0x4  /* high color */\n\n/* built-in dither */\n#define SIXEL_BUILTIN_MONO_DARK   0x0  /* monochrome terminal with dark background */\n#define SIXEL_BUILTIN_MONO_LIGHT  0x1  /* monochrome terminal with light background */\n#define SIXEL_BUILTIN_XTERM16     0x2  /* xterm 16color */\n#define SIXEL_BUILTIN_XTERM256    0x3  /* xterm 256color */\n#define SIXEL_BUILTIN_VT340_MONO  0x4  /* vt340 monochrome */\n#define SIXEL_BUILTIN_VT340_COLOR 0x5  /* vt340 color */\n#define SIXEL_BUILTIN_G1          0x6  /* 1bit grayscale */\n#define SIXEL_BUILTIN_G2          0x7  /* 2bit grayscale */\n#define SIXEL_BUILTIN_G4          0x8  /* 4bit grayscale */\n#define SIXEL_BUILTIN_G8          0x9  /* 8bit grayscale */\n\n/* offset value of pixelFormat */\n#define SIXEL_FORMATTYPE_COLOR     (0)\n#define SIXEL_FORMATTYPE_GRAYSCALE (1 << 6)\n#define SIXEL_FORMATTYPE_PALETTE   (1 << 7)\n\n/* pixelformat type of input image\n   NOTE: for compatibility, the value of PIXELFORAMT_COLOR_RGB888 must be 3 */\n#define SIXEL_PIXELFORMAT_RGB555   (SIXEL_FORMATTYPE_COLOR     | 0x01) /* 15bpp */\n#define SIXEL_PIXELFORMAT_RGB565   (SIXEL_FORMATTYPE_COLOR     | 0x02) /* 16bpp */\n#define SIXEL_PIXELFORMAT_RGB888   (SIXEL_FORMATTYPE_COLOR     | 0x03) /* 24bpp */\n#define SIXEL_PIXELFORMAT_BGR555   (SIXEL_FORMATTYPE_COLOR     | 0x04) /* 15bpp */\n#define SIXEL_PIXELFORMAT_BGR565   (SIXEL_FORMATTYPE_COLOR     | 0x05) /* 16bpp */\n#define SIXEL_PIXELFORMAT_BGR888   (SIXEL_FORMATTYPE_COLOR     | 0x06) /* 24bpp */\n#define SIXEL_PIXELFORMAT_ARGB8888 (SIXEL_FORMATTYPE_COLOR     | 0x10) /* 32bpp */\n#define SIXEL_PIXELFORMAT_RGBA8888 (SIXEL_FORMATTYPE_COLOR     | 0x11) /* 32bpp */\n#define SIXEL_PIXELFORMAT_ABGR8888 (SIXEL_FORMATTYPE_COLOR     | 0x12) /* 32bpp */\n#define SIXEL_PIXELFORMAT_BGRA8888 (SIXEL_FORMATTYPE_COLOR     | 0x13) /* 32bpp */\n#define SIXEL_PIXELFORMAT_G1       (SIXEL_FORMATTYPE_GRAYSCALE | 0x00) /* 1bpp grayscale */\n#define SIXEL_PIXELFORMAT_G2       (SIXEL_FORMATTYPE_GRAYSCALE | 0x01) /* 2bpp grayscale */\n#define SIXEL_PIXELFORMAT_G4       (SIXEL_FORMATTYPE_GRAYSCALE | 0x02) /* 4bpp grayscale */\n#define SIXEL_PIXELFORMAT_G8       (SIXEL_FORMATTYPE_GRAYSCALE | 0x03) /* 8bpp grayscale */\n#define SIXEL_PIXELFORMAT_AG88     (SIXEL_FORMATTYPE_GRAYSCALE | 0x13) /* 16bpp gray+alpha */\n#define SIXEL_PIXELFORMAT_GA88     (SIXEL_FORMATTYPE_GRAYSCALE | 0x23) /* 16bpp gray+alpha */\n#define SIXEL_PIXELFORMAT_PAL1     (SIXEL_FORMATTYPE_PALETTE   | 0x00) /* 1bpp palette */\n#define SIXEL_PIXELFORMAT_PAL2     (SIXEL_FORMATTYPE_PALETTE   | 0x01) /* 2bpp palette */\n#define SIXEL_PIXELFORMAT_PAL4     (SIXEL_FORMATTYPE_PALETTE   | 0x02) /* 4bpp palette */\n#define SIXEL_PIXELFORMAT_PAL8     (SIXEL_FORMATTYPE_PALETTE   | 0x03) /* 8bpp palette */\n\n/* palette type */\n#define SIXEL_PALETTETYPE_AUTO     0   /* choose palette type automatically */\n#define SIXEL_PALETTETYPE_HLS      1   /* HLS colorspace */\n#define SIXEL_PALETTETYPE_RGB      2   /* RGB colorspace */\n\n/* policies of SIXEL encoding */\n#define SIXEL_ENCODEPOLICY_AUTO    0   /* choose encoding policy automatically */\n#define SIXEL_ENCODEPOLICY_FAST    1   /* encode as fast as possible */\n#define SIXEL_ENCODEPOLICY_SIZE    2   /* encode to as small sixel sequence as possible */\n\n/* method for re-sampling */\n#define SIXEL_RES_NEAREST          0   /* Use nearest neighbor method */\n#define SIXEL_RES_GAUSSIAN         1   /* Use guaussian filter */\n#define SIXEL_RES_HANNING          2   /* Use hanning filter */\n#define SIXEL_RES_HAMMING          3   /* Use hamming filter */\n#define SIXEL_RES_BILINEAR         4   /* Use bilinear filter */\n#define SIXEL_RES_WELSH            5   /* Use welsh filter */\n#define SIXEL_RES_BICUBIC          6   /* Use bicubic filter */\n#define SIXEL_RES_LANCZOS2         7   /* Use lanczos-2 filter */\n#define SIXEL_RES_LANCZOS3         8   /* Use lanczos-3 filter */\n#define SIXEL_RES_LANCZOS4         9   /* Use lanczos-4 filter */\n\n/* image format */\n#define SIXEL_FORMAT_GIF           0x0 /* read only */\n#define SIXEL_FORMAT_PNG           0x1 /* read/write */\n#define SIXEL_FORMAT_BMP           0x2 /* read only */\n#define SIXEL_FORMAT_JPG           0x3 /* read only */\n#define SIXEL_FORMAT_TGA           0x4 /* read only */\n#define SIXEL_FORMAT_WBMP          0x5 /* read only with --with-gd configure option */\n#define SIXEL_FORMAT_TIFF          0x6 /* read only */\n#define SIXEL_FORMAT_SIXEL         0x7 /* read only */\n#define SIXEL_FORMAT_PNM           0x8 /* read only */\n#define SIXEL_FORMAT_GD2           0x9 /* read only with --with-gd configure option */\n#define SIXEL_FORMAT_PSD           0xa /* read only */\n#define SIXEL_FORMAT_HDR           0xb /* read only */\n\n/* loop mode */\n#define SIXEL_LOOP_AUTO            0   /* honer the setting of GIF header */\n#define SIXEL_LOOP_FORCE           1   /* always enable loop */\n#define SIXEL_LOOP_DISABLE         2   /* always disable loop */\n\n/* setopt flags */\n#define SIXEL_OPTFLAG_INPUT             ('i')  /* -i, --input: specify input file name. */\n#define SIXEL_OPTFLAG_OUTPUT            ('o')  /* -o, --output: specify output file name. */\n#define SIXEL_OPTFLAG_OUTFILE           ('o')  /* -o, --outfile: specify output file name. */\n#define SIXEL_OPTFLAG_7BIT_MODE         ('7')  /* -7, --7bit-mode: for 7bit terminals or printers (default) */\n#define SIXEL_OPTFLAG_8BIT_MODE         ('8')  /* -8, --8bit-mode: for 8bit terminals or printers */\n#define SIXEL_OPTFLAG_HAS_GRI_ARG_LIMIT ('R')  /* -R, --gri-limit: limit arguments of DECGRI('!') to 255 */\n#define SIXEL_OPTFLAG_COLORS            ('p')  /* -p COLORS, --colors=COLORS: specify number of colors */\n#define SIXEL_OPTFLAG_MAPFILE           ('m')  /* -m FILE, --mapfile=FILE: specify set of colors */\n#define SIXEL_OPTFLAG_MONOCHROME        ('e')  /* -e, --monochrome: output monochrome sixel image */\n#define SIXEL_OPTFLAG_INSECURE          ('k')  /* -k, --insecure: allow to connect to SSL sites without certs */\n#define SIXEL_OPTFLAG_INVERT            ('i')  /* -i, --invert: assume the terminal background color */\n#define SIXEL_OPTFLAG_HIGH_COLOR        ('I')  /* -I, --high-color: output 15bpp sixel image */\n#define SIXEL_OPTFLAG_USE_MACRO         ('u')  /* -u, --use-macro: use DECDMAC and DEVINVM sequences */\n#define SIXEL_OPTFLAG_MACRO_NUMBER      ('n')  /* -n MACRONO, --macro-number=MACRONO:\n                                                  specify macro register number */\n#define SIXEL_OPTFLAG_COMPLEXION_SCORE  ('C')  /* -C COMPLEXIONSCORE, --complexion-score=COMPLEXIONSCORE:\n                                                  specify an number argument for the score of\n                                                  complexion correction. */\n#define SIXEL_OPTFLAG_IGNORE_DELAY      ('g')  /* -g, --ignore-delay: render GIF animation without delay */\n#define SIXEL_OPTFLAG_STATIC            ('S')  /* -S, --static: render animated GIF as a static image */\n#define SIXEL_OPTFLAG_DIFFUSION         ('d')  /* -d DIFFUSIONTYPE, --diffusion=DIFFUSIONTYPE:\n                                                  choose diffusion method which used with -p option.\n                                                  DIFFUSIONTYPE is one of them:\n                                                    auto     -> choose diffusion type\n                                                                automatically (default)\n                                                    none     -> do not diffuse\n                                                    fs       -> Floyd-Steinberg method\n                                                    atkinson -> Bill Atkinson's method\n                                                    jajuni   -> Jarvis, Judice & Ninke\n                                                    stucki   -> Stucki's method\n                                                    burkes   -> Burkes' method\n                                                    a_dither -> positionally stable\n                                                                arithmetic dither\n                                                    a_dither -> positionally stable\n                                                                arithmetic xor based dither\n                                                */\n#define SIXEL_OPTFLAG_FIND_LARGEST      ('f')  /* -f FINDTYPE, --find-largest=FINDTYPE:\n                                                  choose method for finding the largest\n                                                  dimension of median cut boxes for\n                                                  splitting, make sense only when -p\n                                                  option (color reduction) is\n                                                  specified\n                                                  FINDTYPE is one of them:\n                                                    auto -> choose finding method\n                                                            automatically (default)\n                                                    norm -> simply comparing the\n                                                            range in RGB space\n                                                    lum  -> transforming into\n                                                            luminosities before the\n                                                            comparison\n                                                */\n#define SIXEL_OPTFLAG_SELECT_COLOR      ('s')  /* -s SELECTTYPE, --select-color=SELECTTYPE\n                                                  choose the method for selecting\n                                                  representative color from each\n                                                  median-cut box, make sense only\n                                                  when -p option (color reduction) is\n                                                  specified\n                                                  SELECTTYPE is one of them:\n                                                    auto      -> choose selecting\n                                                                 method automatically\n                                                                 (default)\n                                                    center    -> choose the center of\n                                                                 the box\n                                                    average    -> calculate the color\n                                                                 average into the box\n                                                    histogram -> similar with average\n                                                                 but considers color\n                                                                 histogram\n                                                */\n#define SIXEL_OPTFLAG_CROP              ('c')  /* -c REGION, --crop=REGION:\n                                                  crop source image to fit the\n                                                  specified geometry. REGION should\n                                                  be formatted as '%dx%d+%d+%d'\n                                                */\n#define SIXEL_OPTFLAG_WIDTH             ('w')  /* -w WIDTH, --width=WIDTH:\n                                                  resize image to specified width\n                                                  WIDTH is represented by the\n                                                  following syntax\n                                                    auto       -> preserving aspect\n                                                                  ratio (default)\n                                                    <number>%  -> scale width with\n                                                                  given percentage\n                                                    <number>   -> scale width with\n                                                                  pixel counts\n                                                    <number>px -> scale width with\n                                                                  pixel counts\n                                                */\n#define SIXEL_OPTFLAG_HEIGHT            ('h')  /* -h HEIGHT, --height=HEIGHT:\n                                                   resize image to specified height\n                                                   HEIGHT is represented by the\n                                                   following syntax\n                                                     auto       -> preserving aspect\n                                                                   ratio (default)\n                                                     <number>%  -> scale height with\n                                                                   given percentage\n                                                     <number>   -> scale height with\n                                                                   pixel counts\n                                                     <number>px -> scale height with\n                                                                   pixel counts\n                                                */\n#define SIXEL_OPTFLAG_RESAMPLING        ('r')  /* -r RESAMPLINGTYPE, --resampling=RESAMPLINGTYPE:\n                                                  choose resampling filter used\n                                                  with -w or -h option (scaling)\n                                                  RESAMPLINGTYPE is one of them:\n                                                    nearest  -> Nearest-Neighbor\n                                                                method\n                                                    gaussian -> Gaussian filter\n                                                    hanning  -> Hanning filter\n                                                    hamming  -> Hamming filter\n                                                    bilinear -> Bilinear filter\n                                                                (default)\n                                                    welsh    -> Welsh filter\n                                                    bicubic  -> Bicubic filter\n                                                    lanczos2 -> Lanczos-2 filter\n                                                    lanczos3 -> Lanczos-3 filter\n                                                    lanczos4 -> Lanczos-4 filter\n                                                */\n#define SIXEL_OPTFLAG_QUALITY           ('q')  /* -q QUALITYMODE, --quality=QUALITYMODE:\n                                                  select quality of color\n                                                  quanlization.\n                                                    auto -> decide quality mode\n                                                            automatically (default)\n                                                    low  -> low quality and high\n                                                            speed mode\n                                                    high -> high quality and low\n                                                            speed mode\n                                                    full -> full quality and careful\n                                                            speed mode\n                                                */\n#define SIXEL_OPTFLAG_LOOPMODE          ('l')  /* -l LOOPMODE, --loop-control=LOOPMODE:\n                                                  select loop control mode for GIF\n                                                  animation.\n                                                    auto    -> honor the setting of\n                                                               GIF header (default)\n                                                    force   -> always enable loop\n                                                    disable -> always disable loop\n                                                */\n#define SIXEL_OPTFLAG_PALETTE_TYPE      ('t')  /* -t PALETTETYPE, --palette-type=PALETTETYPE:\n                                                  select palette color space type\n                                                    auto -> choose palette type\n                                                            automatically (default)\n                                                    hls  -> use HLS color space\n                                                    rgb  -> use RGB color space\n                                                */\n#define SIXEL_OPTFLAG_BUILTIN_PALETTE   ('b')  /* -b BUILTINPALETTE, --builtin-palette=BUILTINPALETTE:\n                                                  select built-in palette type\n                                                    xterm16    -> X default 16 color map\n                                                    xterm256   -> X default 256 color map\n                                                    vt340mono  -> VT340 monochrome map\n                                                    vt340color -> VT340 color map\n                                                    gray1      -> 1bit grayscale map\n                                                    gray2      -> 2bit grayscale map\n                                                    gray4      -> 4bit grayscale map\n                                                    gray8      -> 8bit grayscale map\n                                                */\n#define SIXEL_OPTFLAG_ENCODE_POLICY     ('E')  /* -E ENCODEPOLICY, --encode-policy=ENCODEPOLICY:\n                                                  select encoding policy\n                                                    auto -> choose encoding policy\n                                                            automatically (default)\n                                                    fast -> encode as fast as possible\n                                                    size -> encode to as small sixel\n                                                            sequence as possible\n                                                */\n#define SIXEL_OPTFLAG_BGCOLOR           ('B')  /* -B BGCOLOR, --bgcolor=BGCOLOR:\n                                                  specify background color\n                                                  BGCOLOR is represented by the\n                                                  following syntax\n                                                    #rgb\n                                                    #rrggbb\n                                                    #rrrgggbbb\n                                                    #rrrrggggbbbb\n                                                    rgb:r/g/b\n                                                    rgb:rr/gg/bb\n                                                    rgb:rrr/ggg/bbb\n                                                    rgb:rrrr/gggg/bbbb\n                                                */\n#define SIXEL_OPTFLAG_PENETRATE         ('P')  /* -P, --penetrate:\n                                                  penetrate GNU Screen using DCS\n                                                  pass-through sequence */\n#define SIXEL_OPTFLAG_PIPE_MODE         ('D')  /* -D, --pipe-mode: (deprecated)\n                                                  read source images from stdin continuously */\n#define SIXEL_OPTFLAG_VERBOSE           ('v')  /* -v, --verbose: show debugging info */\n#define SIXEL_OPTFLAG_VERSION           ('V')  /* -V, --version: show version and license info */\n#define SIXEL_OPTFLAG_HELP              ('H')  /* -H, --help: show this help */\n\n#define SIXEL_WIDTH_LIMIT               1000000\n#define SIXEL_HEIGHT_LIMIT              1000000\n\n#if SIXEL_USE_DEPRECATED_SYMBOLS\n/* output character size */\nenum characterSize {\n    CSIZE_7BIT = 0,  /* 7bit character */\n    CSIZE_8BIT = 1   /* 8bit character */\n};\n\n/* method for finding the largest dimension for splitting,\n * and sorting by that component */\nenum methodForLargest {\n    LARGE_AUTO = 0,  /* choose automatically the method for finding the largest\n                        dimension */\n    LARGE_NORM = 1,  /* simply comparing the range in RGB space */\n    LARGE_LUM  = 2   /* transforming into luminosities before the comparison */\n};\n\n/* method for choosing a color from the box */\nenum methodForRep {\n    REP_AUTO           = 0, /* choose automatically the method for selecting\n                               representative color from each box */\n    REP_CENTER_BOX     = 1, /* choose the center of the box */\n    REP_AVERAGE_COLORS = 2, /* choose the average all the color\n                               in the box (specified in Heckbert's paper) */\n    REP_AVERAGE_PIXELS = 3  /* choose the average all the pixels in the box */\n};\n\n/* method for diffusing */\nenum methodForDiffuse {\n    DIFFUSE_AUTO     = 0, /* choose diffusion type automatically */\n    DIFFUSE_NONE     = 1, /* don't diffuse */\n    DIFFUSE_ATKINSON = 2, /* diffuse with Bill Atkinson's method */\n    DIFFUSE_FS       = 3, /* diffuse with Floyd-Steinberg method */\n    DIFFUSE_JAJUNI   = 4, /* diffuse with Jarvis, Judice & Ninke method */\n    DIFFUSE_STUCKI   = 5, /* diffuse with Stucki's method */\n    DIFFUSE_BURKES   = 6, /* diffuse with Burkes' method */\n    DIFFUSE_A_DITHER = 7, /* positionally stable arithmetic dither */\n    DIFFUSE_X_DITHER = 8  /* positionally stable arithmetic xor based dither */\n};\n\n/* quality modes */\nenum qualityMode {\n    QUALITY_AUTO      = 0, /* choose quality mode automatically */\n    QUALITY_HIGH      = 1, /* high quality palette construction */\n    QUALITY_LOW       = 2, /* low quality palette construction */\n    QUALITY_FULL      = 3, /* full quality palette construction */\n    QUALITY_HIGHCOLOR = 4  /* high color */\n};\n\n/* built-in dither */\nenum builtinDither {\n    BUILTIN_MONO_DARK   = 0, /* monochrome terminal with dark background */\n    BUILTIN_MONO_LIGHT  = 1, /* monochrome terminal with dark background */\n    BUILTIN_XTERM16     = 2, /* xterm 16color */\n    BUILTIN_XTERM256    = 3, /* xterm 256color */\n    BUILTIN_VT340_MONO  = 4, /* vt340 monochrome */\n    BUILTIN_VT340_COLOR = 5  /* vt340 color */\n};\n\n/* offset value of enum pixelFormat */\nenum formatType {\n    FORMATTYPE_COLOR     = 0,\n    FORMATTYPE_GRAYSCALE = 1 << 6,\n    FORMATTYPE_PALETTE   = 1 << 7\n};\n\n/* pixelformat type of input image\n   NOTE: for compatibility, the value of PIXELFORAMT_COLOR_RGB888 must be 3 */\nenum pixelFormat {\n    PIXELFORMAT_RGB555   = FORMATTYPE_COLOR     | 0x01, /* 15bpp */\n    PIXELFORMAT_RGB565   = FORMATTYPE_COLOR     | 0x02, /* 16bpp */\n    PIXELFORMAT_RGB888   = FORMATTYPE_COLOR     | 0x03, /* 24bpp */\n    PIXELFORMAT_BGR555   = FORMATTYPE_COLOR     | 0x04, /* 15bpp */\n    PIXELFORMAT_BGR565   = FORMATTYPE_COLOR     | 0x05, /* 16bpp */\n    PIXELFORMAT_BGR888   = FORMATTYPE_COLOR     | 0x06, /* 24bpp */\n    PIXELFORMAT_ARGB8888 = FORMATTYPE_COLOR     | 0x10, /* 32bpp */\n    PIXELFORMAT_RGBA8888 = FORMATTYPE_COLOR     | 0x11, /* 32bpp */\n    PIXELFORMAT_G1       = FORMATTYPE_GRAYSCALE | 0x00, /* 1bpp grayscale */\n    PIXELFORMAT_G2       = FORMATTYPE_GRAYSCALE | 0x01, /* 2bpp grayscale */\n    PIXELFORMAT_G4       = FORMATTYPE_GRAYSCALE | 0x02, /* 4bpp grayscale */\n    PIXELFORMAT_G8       = FORMATTYPE_GRAYSCALE | 0x03, /* 8bpp grayscale */\n    PIXELFORMAT_AG88     = FORMATTYPE_GRAYSCALE | 0x13, /* 16bpp gray+alpha */\n    PIXELFORMAT_GA88     = FORMATTYPE_GRAYSCALE | 0x23, /* 16bpp gray+alpha */\n    PIXELFORMAT_PAL1     = FORMATTYPE_PALETTE   | 0x00, /* 1bpp palette */\n    PIXELFORMAT_PAL2     = FORMATTYPE_PALETTE   | 0x01, /* 2bpp palette */\n    PIXELFORMAT_PAL4     = FORMATTYPE_PALETTE   | 0x02, /* 4bpp palette */\n    PIXELFORMAT_PAL8     = FORMATTYPE_PALETTE   | 0x03  /* 8bpp palette */\n};\n\n/* palette type */\nenum paletteType {\n    PALETTETYPE_AUTO = 0,     /* choose palette type automatically */\n    PALETTETYPE_HLS  = 1,     /* HLS colorspace */\n    PALETTETYPE_RGB  = 2      /* RGB colorspace */\n};\n\n/* policies of SIXEL encoding */\nenum encodePolicy {\n    ENCODEPOLICY_AUTO = 0,    /* choose encoding policy automatically */\n    ENCODEPOLICY_FAST = 1,    /* encode as fast as possible */\n    ENCODEPOLICY_SIZE = 2     /* encode to as small sixel sequence as possible */\n};\n\n/* method for re-sampling */\nenum methodForResampling {\n    RES_NEAREST  = 0,  /* Use nearest neighbor method */\n    RES_GAUSSIAN = 1,  /* Use guaussian filter */\n    RES_HANNING  = 2,  /* Use hanning filter */\n    RES_HAMMING  = 3,  /* Use hamming filter */\n    RES_BILINEAR = 4,  /* Use bilinear filter */\n    RES_WELSH    = 5,  /* Use welsh filter */\n    RES_BICUBIC  = 6,  /* Use bicubic filter */\n    RES_LANCZOS2 = 7,  /* Use lanczos-2 filter */\n    RES_LANCZOS3 = 8,  /* Use lanczos-3 filter */\n    RES_LANCZOS4 = 9   /* Use lanczos-4 filter */\n};\n#endif\n\ntypedef void *(* sixel_malloc_t)(size_t);\ntypedef void *(* sixel_calloc_t)(size_t, size_t);\ntypedef void *(* sixel_realloc_t)(void *, size_t);\ntypedef void (* sixel_free_t)(void *);\n\nstruct sixel_allocator;\ntypedef struct sixel_allocator sixel_allocator_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create allocator object */\nSIXELSTATUS\nsixel_allocator_new(\n    sixel_allocator_t   /* out */ **ppallocator,  /* allocator object to be created */\n    sixel_malloc_t      /* in */  fn_malloc,      /* custom malloc() function */\n    sixel_calloc_t      /* in */  fn_calloc,      /* custom calloc() function */\n    sixel_realloc_t     /* in */  fn_realloc,     /* custom realloc() function */\n    sixel_free_t        /* in */  fn_free);       /* custom free() function */\n\n/* increase reference count of allocator object (thread-unsafe) */\nSIXELAPI void\nsixel_allocator_ref(\n    sixel_allocator_t /* in */ *allocator);  /* allocator object to be\n                                                increment reference counter */\n\n/* decrease reference count of output context object (thread-unsafe) */\nSIXELAPI void\nsixel_allocator_unref(sixel_allocator_t *allocator);\n\n/* call custom malloc() */\nSIXELAPI void *\nsixel_allocator_malloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    size_t              /* in */ n);          /* allocation size */\n\n/* call custom calloc() */\nSIXELAPI void *\nsixel_allocator_calloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    size_t              /* in */ nelm,        /* allocation size */\n    size_t              /* in */ elsize);     /* allocation size */\n\n/* call custom realloc() */\nSIXELAPI void *\nsixel_allocator_realloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    void                /* in */ *p,          /* existing buffer to be re-allocated */\n    size_t              /* in */ n);          /* re-allocation size */\n\n/* call custom free() */\nSIXELAPI void\nsixel_allocator_free(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    void                /* in */ *p);         /* existing buffer to be freed */\n\n#ifdef HAVE_TESTS\nextern volatile int sixel_debug_malloc_counter;\n\nvoid *\nsixel_bad_malloc(size_t size);\n\nvoid *\nsixel_bad_calloc(size_t count, size_t size);\n\nvoid *\nsixel_bad_realloc(void *ptr, size_t size);\n#endif  /* HAVE_TESTS */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* output context manipulation API */\n\nstruct sixel_output;\ntypedef struct sixel_output sixel_output_t;\ntypedef int (* sixel_write_function)(char *data, int size, void *priv);\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create new output context object */\nSIXELAPI SIXELSTATUS\nsixel_output_new(\n    sixel_output_t          /* out */ **output,     /* output object to be created */\n    sixel_write_function    /* in */  fn_write,     /* callback for output sixel */\n    void                    /* in */ *priv,         /* private data given as\n                                                       3rd argument of fn_write */\n    sixel_allocator_t       /* in */  *allocator);  /* allocator, null if you use\n                                                       default allocator */\n\n/* deprecated: create an output object */\nSIXELAPI @attr_func_deprecated@ sixel_output_t *\nsixel_output_create(\n    sixel_write_function /* in */ fn_write, /* callback for output sixel */\n    void                 /* in */ *priv);   /* private data given as\n                                               3rd argument of fn_write */\n/* destroy output context object */\nSIXELAPI void\nsixel_output_destroy(sixel_output_t /* in */ *output); /* output context */\n\n/* increase reference count of output context object (thread-unsafe) */\nSIXELAPI void\nsixel_output_ref(sixel_output_t /* in */ *output);     /* output context */\n\n/* decrease reference count of output context object (thread-unsafe) */\nSIXELAPI void\nsixel_output_unref(sixel_output_t /* in */ *output);   /* output context */\n\n/* get 8bit output mode which indicates whether it uses C1 control characters */\nSIXELAPI int\nsixel_output_get_8bit_availability(\n    sixel_output_t /* in */ *output);   /* output context */\n\n/* set 8bit output mode state */\nSIXELAPI void\nsixel_output_set_8bit_availability(\n    sixel_output_t /* in */ *output,       /* output context */\n    int            /* in */ availability); /* 0: do not use 8bit characters\n                                              1: use 8bit characters */\n\n/* set whether limit arguments of DECGRI('!') to 255 */\nSIXELAPI void\nsixel_output_set_gri_arg_limit(\n    sixel_output_t /* in */ *output, /* output context */\n    int            /* in */ value);  /* 0: don't limit arguments of DECGRI\n                                        1: limit arguments of DECGRI to 255 */\n\n/* set GNU Screen penetration feature enable or disable */\nSIXELAPI void\nsixel_output_set_penetrate_multiplexer(\n    sixel_output_t /* in */ *output,    /* output context */\n    int            /* in */ penetrate); /* 0: penetrate GNU Screen\n                                           1: do not penetrate GNU Screen */\n\n/* set whether we skip DCS envelope */\nSIXELAPI void\nsixel_output_set_skip_dcs_envelope(\n    sixel_output_t /* in */ *output,   /* output context */\n    int            /* in */ skip);     /* 0: output DCS envelope\n                                          1: do not output DCS envelope */\n\n/* set palette type: RGB or HLS */\nSIXELAPI void\nsixel_output_set_palette_type(\n    sixel_output_t /* in */ *output,      /* output context */\n    int            /* in */ palettetype); /* PALETTETYPE_RGB: RGB palette\n                                             PALETTETYPE_HLS: HLS palette */\n\n/* set encodeing policy: auto, fast or size */\nSIXELAPI void\nsixel_output_set_encode_policy(\n    sixel_output_t /* in */ *output,    /* output context */\n    int            /* in */ encode_policy);\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* color quantization API */\n\n/* handle type of dither context object */\nstruct sixel_dither;\ntypedef struct sixel_dither sixel_dither_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create dither context object */\nSIXELAPI SIXELSTATUS\nsixel_dither_new(\n    sixel_dither_t      /* out */   **ppdither,  /* dither object to be created */\n    int                 /* in */    ncolors,     /* required colors */\n    sixel_allocator_t   /* in */    *allocator); /* allocator, null if you use\n                                                    default allocator */\n\n/* create dither context object */\nSIXELAPI @attr_func_deprecated@ sixel_dither_t *\nsixel_dither_create(int /* in */ ncolors); /* number of colors */\n\n/* get built-in dither context object */\nSIXELAPI sixel_dither_t *\nsixel_dither_get(int builtin_dither); /* ID of built-in dither object */\n\n/* destroy dither context object */\nSIXELAPI void\nsixel_dither_destroy(sixel_dither_t *dither); /* dither context object */\n\n/* increase reference count of dither context object (thread-unsafe) */\nSIXELAPI void\nsixel_dither_ref(sixel_dither_t *dither); /* dither context object */\n\n/* decrease reference count of dither context object (thread-unsafe) */\nSIXELAPI void\nsixel_dither_unref(sixel_dither_t *dither); /* dither context object */\n\n/* initialize internal palette from specified pixel buffer */\nSIXELAPI SIXELSTATUS\nsixel_dither_initialize(\n    sixel_dither_t *dither,                    /* dither context object */\n    unsigned char /* in */ *data,              /* sample image */\n    int           /* in */ width,              /* image width */\n    int           /* in */ height,             /* image height */\n    int           /* in */ pixelformat,        /* one of enum pixelFormat */\n    int           /* in */ method_for_largest, /* method for finding the largest dimension */\n    int           /* in */ method_for_rep,     /* method for choosing a color from the box */\n    int           /* in */ quality_mode);      /* quality of histogram processing */\n\n/* set diffusion type, choose from enum methodForDiffuse */\nSIXELAPI void\nsixel_dither_set_diffusion_type(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    int /* in */ method_for_diffuse);  /* one of enum methodForDiffuse */\n\n/* get number of palette colors */\nSIXELAPI int\nsixel_dither_get_num_of_palette_colors(\n    sixel_dither_t /* in */ *dither);  /* dither context object */\n\n/* get number of histogram colors */\nSIXELAPI int\nsixel_dither_get_num_of_histogram_colors(\n    sixel_dither_t /* in */ *dither);  /* dither context object */\n\nSIXELAPI @attr_func_deprecated@ int /* typoed! remains for compatibility. */\nsixel_dither_get_num_of_histgram_colors(\n    sixel_dither_t /* in */ *dither);  /* dither context object */\n\n/* get palette */\nSIXELAPI unsigned char *\nsixel_dither_get_palette(\n    sixel_dither_t /* in */ *dither);  /* dither context object */\n\n/* set palette */\nSIXELAPI void\nsixel_dither_set_palette(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    unsigned char  /* in */ *palette);\n\n/* set the factor of complexion color correcting */\nSIXELAPI void\nsixel_dither_set_complexion_score(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    int            /* in */ score);    /* complexion score (>= 1) */\n\n/* set whether omitting palette difinition */\nSIXELAPI void\nsixel_dither_set_body_only(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    int            /* in */ bodyonly); /* 0: output palette section(default)\n                                          1: do not output palette section */\n/* set whether optimize palette size */\nSIXELAPI void\nsixel_dither_set_optimize_palette(\n    sixel_dither_t /* in */ *dither,   /* dither context object */\n    int            /* in */ do_opt);   /* 0: optimize palette size\n                                          1: don't optimize palette size */\n/* set pixelformat */\nSIXELAPI void\nsixel_dither_set_pixelformat(\n    sixel_dither_t /* in */ *dither,      /* dither context object */\n    int            /* in */ pixelformat); /* one of enum pixelFormat */\n\n/* set transparent */\nSIXELAPI void\nsixel_dither_set_transparent(\n    sixel_dither_t /* in */ *dither,      /* dither context object */\n    int            /* in */ transparent); /* transparent color index */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* converter API */\n\ntypedef void * (* sixel_allocator_function)(size_t size);\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* convert pixels into sixel format and write it to output context */\nSIXELAPI SIXELSTATUS\nsixel_encode(\n    unsigned char  /* in */ *pixels,     /* pixel bytes */\n    int            /* in */  width,      /* image width */\n    int            /* in */  height,     /* image height */\n    int            /* in */  depth,      /* color depth: now unused */\n    sixel_dither_t /* in */ *dither,     /* dither context */\n    sixel_output_t /* in */ *context);   /* output context */\n\n/* convert sixel data into indexed pixel bytes and palette data */\nSIXELAPI SIXELSTATUS\nsixel_decode_raw(\n    unsigned char       /* in */  *p,           /* sixel bytes */\n    int                 /* in */  len,          /* size of sixel bytes */\n    unsigned char       /* out */ **pixels,     /* decoded pixels */\n    int                 /* out */ *pwidth,      /* image width */\n    int                 /* out */ *pheight,     /* image height */\n    unsigned char       /* out */ **palette,    /* ARGB palette */\n    int                 /* out */ *ncolors,     /* palette size (<= 256) */\n    sixel_allocator_t   /* in */  *allocator);  /* allocator object or null */\n\nSIXELAPI @attr_func_deprecated@ SIXELSTATUS\nsixel_decode(\n    unsigned char            /* in */  *sixels,    /* sixel bytes */\n    int                      /* in */  size,       /* size of sixel bytes */\n    unsigned char            /* out */ **pixels,   /* decoded pixels */\n    int                      /* out */ *pwidth,    /* image width */\n    int                      /* out */ *pheight,   /* image height */\n    unsigned char            /* out */ **palette,  /* RGBA palette */\n    int                      /* out */ *ncolors,   /* palette size (<= 256) */\n    sixel_allocator_function /* in */  fn_malloc); /* malloc function */\n\n#ifdef __cplusplus\n}\n#endif\n\n/* helper API */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nSIXELAPI void\nsixel_helper_set_additional_message(\n    const char      /* in */  *message         /* error message */\n);\n\nSIXELAPI char const *\nsixel_helper_get_additional_message(void);\n\n/* convert error status code int formatted string */\nSIXELAPI char const *\nsixel_helper_format_error(\n    SIXELSTATUS     /* in */  status           /* status code */\n);\n\n/* compute pixel depth from pixelformat */\nSIXELAPI int\nsixel_helper_compute_depth(\n    int /* in */ pixelformat /* one of enum pixelFormat */\n);\n\n/* convert pixelFormat into PIXELFORMAT_RGB888 */\nSIXELAPI SIXELSTATUS\nsixel_helper_normalize_pixelformat(\n    unsigned char       /* out */ *dst,             /* destination buffer */\n    int                 /* out */ *dst_pixelformat, /* converted pixelformat */\n    unsigned char const /* in */  *src,             /* source pixels */\n    int                 /* in */  src_pixelformat,  /* format of source image */\n    int                 /* in */  width,            /* width of source image */\n    int                 /* in */  height            /* height of source image */\n);\n\n/* scale image to specified size */\nSIXELAPI SIXELSTATUS\nsixel_helper_scale_image(\n    unsigned char       /* out */ *dst,                  /* destination buffer */\n    unsigned char const /* in */  *src,                  /* source image data */\n    int                 /* in */  srcw,                  /* source image width */\n    int                 /* in */  srch,                  /* source image height */\n    int                 /* in */  pixelformat,           /* one of enum pixelFormat */\n    int                 /* in */  dstw,                  /* destination image width */\n    int                 /* in */  dsth,                  /* destination image height */\n    int                 /* in */  method_for_resampling, /* one of methodForResampling */\n    sixel_allocator_t   /* in */  *allocator             /* allocator object */\n);\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* image loader/writer API */\n\n#if SIXEL_USE_DEPRECATED_SYMBOLS\nenum imageFormat {\n    FORMAT_GIF   =  0, /* read only */\n    FORMAT_PNG   =  1, /* read/write */\n    FORMAT_BMP   =  2, /* read only */\n    FORMAT_JPG   =  3, /* read only */\n    FORMAT_TGA   =  4, /* read only */\n    FORMAT_WBMP  =  5, /* read only with --with-gd configure option */\n    FORMAT_TIFF  =  6, /* read only */\n    FORMAT_SIXEL =  7, /* read only */\n    FORMAT_PNM   =  8, /* read only */\n    FORMAT_GD2   =  9, /* read only with --with-gd configure option */\n    FORMAT_PSD   = 10, /* read only */\n    FORMAT_HDR   = 11  /* read only */\n};\n\n/* loop mode */\nenum loopControl {\n    LOOP_AUTO    = 0,  /* honer the setting of GIF header */\n    LOOP_FORCE   = 1,  /* always enable loop */\n    LOOP_DISABLE = 2   /* always disable loop */\n};\n#endif\n\n/* handle type of dither context object */\nstruct sixel_frame;\ntypedef struct sixel_frame sixel_frame_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* constructor of frame object */\nSIXELAPI SIXELSTATUS\nsixel_frame_new(\n    sixel_frame_t       /* out */ **ppframe,    /* frame object to be created */\n    sixel_allocator_t   /* in */  *allocator);  /* allocator, null if you use\n                                                   default allocator */\n/* deprecated version of sixel_frame_new() */\nSIXELAPI @attr_func_deprecated@ sixel_frame_t *\nsixel_frame_create(void);\n\n/* increase reference count of frame object (thread-unsafe) */\nSIXELAPI void\nsixel_frame_ref(sixel_frame_t /* in */ *frame);\n\n/* decrease reference count of frame object (thread-unsafe) */\nSIXELAPI void\nsixel_frame_unref(sixel_frame_t /* in */ *frame);\n\n/* initialize frame object with a pixel buffer */\nSIXELAPI SIXELSTATUS\nsixel_frame_init(\n    sixel_frame_t   /* in */ *frame,        /* frame object to be initialize */\n    unsigned char   /* in */ *pixels,       /* pixel buffer */\n    int             /* in */ width,         /* pixel width of buffer */\n    int             /* in */ height,        /* pixel height of buffer */\n    int             /* in */ pixelformat,   /* pixelformat of buffer */\n    unsigned char   /* in */ *palette,      /* palette for buffer or NULL */\n    int             /* in */ ncolors        /* number of palette colors or (-1) */\n);\n\n/* get pixels */\nSIXELAPI unsigned char *\nsixel_frame_get_pixels(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get palette */\nSIXELAPI unsigned char *\nsixel_frame_get_palette(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get width */\nSIXELAPI int\nsixel_frame_get_width(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get height */\nSIXELAPI int\nsixel_frame_get_height(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get ncolors */\nSIXELAPI int\nsixel_frame_get_ncolors(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get pixelformat */\nSIXELAPI int\nsixel_frame_get_pixelformat(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get transparent */\nSIXELAPI int\nsixel_frame_get_transparent(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get transparent */\nSIXELAPI int\nsixel_frame_get_multiframe(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get delay */\nSIXELAPI int\nsixel_frame_get_delay(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get frame no */\nSIXELAPI int\nsixel_frame_get_frame_no(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* get loop no */\nSIXELAPI int\nsixel_frame_get_loop_no(sixel_frame_t /* in */ *frame);  /* frame object */\n\n/* strip alpha from RGBA/ARGB formatted pixbuf */\nSIXELAPI int\nsixel_frame_strip_alpha(\n    sixel_frame_t  /* in */ *frame,\n    unsigned char  /* in */ *bgcolor);\n\n/* resize a frame to given size with specified resampling filter */\nSIXELAPI SIXELSTATUS\nsixel_frame_resize(\n    sixel_frame_t  /* in */ *frame,\n    int            /* in */ width,\n    int            /* in */ height,\n    int            /* in */ method_for_resampling);\n\n/* clip frame */\nSIXELAPI SIXELSTATUS\nsixel_frame_clip(\n    sixel_frame_t  /* in */ *frame,\n    int            /* in */ x,\n    int            /* in */ y,\n    int            /* in */ width,\n    int            /* in */ height);\n\ntypedef SIXELSTATUS (* sixel_load_image_function)(\n    sixel_frame_t /* in */     *frame,\n    void          /* in/out */ *context);\n\nSIXELAPI SIXELSTATUS\nsixel_helper_load_image_file(\n    char const                /* in */     *filename,     /* source file name */\n    int                       /* in */     fstatic,       /* whether to extract static image */\n    int                       /* in */     fuse_palette,  /* whether to use paletted image */\n    int                       /* in */     reqcolors,     /* requested number of colors */\n    unsigned char             /* in */     *bgcolor,      /* background color */\n    int                       /* in */     loop_control,  /* one of enum loopControl */\n    sixel_load_image_function /* in */     fn_load,       /* callback */\n    int                       /* in */     finsecure,     /* true if do not verify SSL */\n    int const                 /* in */     *cancel_flag,  /* cancel flag */\n    void                      /* in/out */ *context,      /* private data for callback */\n    sixel_allocator_t         /* in */     *allocator);   /* allocator object */\n\n/* write image to file */\nSIXELAPI SIXELSTATUS\nsixel_helper_write_image_file(\n    unsigned char       /* in */ *data,        /* source pixel data */\n    int                 /* in */ width,        /* source data width */\n    int                 /* in */ height,       /* source data height */\n    unsigned char       /* in */ *palette,     /* palette of source data */\n    int                 /* in */ pixelformat,  /* source pixelFormat */\n    char const          /* in */ *filename,    /* destination filename */\n    int                 /* in */ imageformat,  /* one of enum imageformat */\n    sixel_allocator_t   /* in */ *allocator);  /* allocator object */\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* easy encoder API */\n\n/* handle type of dither context object */\nstruct sixel_encoder;\ntypedef struct sixel_encoder sixel_encoder_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create encoder object */\nSIXELAPI SIXELSTATUS\nsixel_encoder_new(\n    sixel_encoder_t     /* out */ **ppencoder, /* encoder object to be created */\n    sixel_allocator_t   /* in */  *allocator); /* allocator, null if you use\n                                                  default allocator */\n\n/* deprecated version of sixel_decoder_new() */\nSIXELAPI @attr_func_deprecated@ sixel_encoder_t *\nsixel_encoder_create(void);\n\n/* increase reference count of encoder object (thread-unsafe) */\nSIXELAPI void\nsixel_encoder_ref(sixel_encoder_t /* in */ *encoder);\n\n/* decrease reference count of encoder object (thread-unsafe) */\nSIXELAPI void\nsixel_encoder_unref(sixel_encoder_t /* in */ *encoder);\n\n/* set cancel state flag to encoder object */\nSIXELAPI SIXELSTATUS\nsixel_encoder_set_cancel_flag(\n    sixel_encoder_t /* in */ *encoder,\n    int             /* in */ *cancel_flag);\n\n/* set an option flag to encoder object */\nSIXELAPI SIXELSTATUS\nsixel_encoder_setopt(\n    sixel_encoder_t /* in */ *encoder,\n    int             /* in */ arg,\n    char const      /* in */ *optarg);\n\n/* load source data from specified file and encode it to SIXEL format */\nSIXELAPI SIXELSTATUS\nsixel_encoder_encode(\n    sixel_encoder_t /* in */ *encoder,\n    char const      /* in */ *filename);\n\n/* encode specified pixel data to SIXEL format\n * output to encoder->outfd */\nSIXELAPI SIXELSTATUS\nsixel_encoder_encode_bytes(\n    sixel_encoder_t     /* in */    *encoder,\n    unsigned char       /* in */    *bytes,\n    int                 /* in */    width,\n    int                 /* in */    height,\n    int                 /* in */    pixelformat,\n    unsigned char       /* in */    *palette,\n    int                 /* in */    ncolors);\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* easy encoder API */\n\n/* handle type of dither context object */\nstruct sixel_decoder;\ntypedef struct sixel_decoder sixel_decoder_t;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* create decoder object */\nSIXELAPI SIXELSTATUS\nsixel_decoder_new(\n    sixel_decoder_t    /* out */ **ppdecoder,  /* decoder object to be created */\n    sixel_allocator_t  /* in */  *allocator);  /* allocator, null if you use\n                                                  default allocator */\n\n/* deprecated version of sixel_decoder_new() */\nSIXELAPI @attr_func_deprecated@ sixel_decoder_t *\nsixel_decoder_create(void);\n\n/* increase reference count of decoder object (thread-unsafe) */\nSIXELAPI void\nsixel_decoder_ref(sixel_decoder_t *decoder);\n\n/* decrease reference count of decoder object (thread-unsafe) */\nSIXELAPI void\nsixel_decoder_unref(sixel_decoder_t *decoder);\n\n/* set an option flag to decoder object */\nSIXELAPI SIXELSTATUS\nsixel_decoder_setopt(\n    sixel_decoder_t /* in */ *decoder,  /* decoder object */\n    int             /* in */ arg,       /* one of SIXEL_OPTFLAG_*** */\n    char const      /* in */ *optarg);  /* null or an argument of optflag */\n\n/* load source data from stdin or the file specified with\n   SIXEL_OPTFLAG_INPUT flag, and decode it */\nSIXELAPI SIXELSTATUS\nsixel_decoder_decode(\n    sixel_decoder_t /* in */ *decoder);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  /* LIBSIXEL_SIXEL_H */\n\n/* emacs Local Variables:      */\n/* emacs mode: c               */\n/* emacs tab-width: 4          */\n/* emacs indent-tabs-mode: nil */\n/* emacs c-basic-offset: 4     */\n/* emacs End:                  */\n/* vim: set expandtab ts=4 sts=4 sw=4 : */\n/* EOF */\n", "/*\n * Copyright (c) 2014-2018 Hayaki Saito\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n#include <stdlib.h>\n#include <assert.h>\n#include \"config.h\"\n\n#if HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif  /* HAVE_SYS_TYPES_H */\n\n#if HAVE_ERRNO_H\n# include <errno.h>\n#endif  /* HAVE_ERRNO_H */\n\n#if HAVE_MEMORY_H\n# include <memory.h>\n#endif  /* HAVE_MEMORY_H */\n\n#include \"allocator.h\"\n#include \"malloc_stub.h\"\n\n/* create allocator object */\nSIXELSTATUS\nsixel_allocator_new(\n    sixel_allocator_t   /* out */ **ppallocator,  /* allocator object to be created */\n    sixel_malloc_t      /* in */  fn_malloc,      /* custom malloc() function */\n    sixel_calloc_t      /* in */  fn_calloc,      /* custom calloc() function */\n    sixel_realloc_t     /* in */  fn_realloc,     /* custom realloc() function */\n    sixel_free_t        /* in */  fn_free)        /* custom free() function */\n{\n    SIXELSTATUS status = SIXEL_FALSE;\n\n    if (ppallocator == NULL) {\n        sixel_helper_set_additional_message(\n            \"sixel_allocator_new: given argument ppallocator is null.\");\n        status = SIXEL_BAD_ARGUMENT;\n        goto end;\n    }\n\n    if (fn_malloc == NULL) {\n        fn_malloc = malloc;\n    }\n\n    if (fn_calloc == NULL) {\n        fn_calloc = calloc;\n    }\n\n    if (fn_realloc == NULL) {\n        fn_realloc = realloc;\n    }\n\n    if (fn_free == NULL) {\n        fn_free = free;\n    }\n\n    *ppallocator = fn_malloc(sizeof(sixel_allocator_t));\n    if (*ppallocator == NULL) {\n        sixel_helper_set_additional_message(\n            \"sixel_allocator_new: fn_malloc() failed.\");\n        status = SIXEL_BAD_ALLOCATION;\n        goto end;\n    }\n\n    (*ppallocator)->ref         = 1;\n    (*ppallocator)->fn_malloc   = fn_malloc;\n    (*ppallocator)->fn_calloc   = fn_calloc;\n    (*ppallocator)->fn_realloc  = fn_realloc;\n    (*ppallocator)->fn_free     = fn_free;\n\n    status = SIXEL_OK;\n\nend:\n    return status;\n}\n\n\n/* destruct allocator object */\nstatic void\nsixel_allocator_destroy(\n    sixel_allocator_t /* in */ *allocator)  /* allocator object to\n                                               be destroyed */\n{\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_free);\n\n    allocator->fn_free(allocator);\n}\n\n\n/* increase reference count of allocatort object (thread-unsafe) */\nSIXELAPI void\nsixel_allocator_ref(\n    sixel_allocator_t /* in */ *allocator)  /* allocator object to be\n                                               increment reference counter */\n{\n    /* precondition */\n    assert(allocator);\n\n    /* TODO: be thread safe */\n    ++allocator->ref;\n}\n\n\n/* decrease reference count of output context object (thread-unsafe) */\nSIXELAPI void\nsixel_allocator_unref(\n    sixel_allocator_t /* in */ *allocator)  /* allocator object to be unreference */\n{\n    /* TODO: be thread safe */\n    if (allocator) {\n        assert(allocator->ref > 0);\n        --allocator->ref;\n        if (allocator->ref == 0) {\n            sixel_allocator_destroy(allocator);\n        }\n    }\n}\n\n\n/* call custom malloc() */\nSIXELAPI void *\nsixel_allocator_malloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    size_t              /* in */ n)           /* allocation size */\n{\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_malloc);\n\n    if (n == 0) {\n        sixel_helper_set_additional_message(\n            \"sixel_allocator_malloc: called with n == 0\");\n        return NULL;\n    }\n\n    if (n > SIXEL_ALLOCATE_BYTES_MAX) {\n        return NULL;\n    }\n\n    return allocator->fn_malloc(n);\n}\n\n\n/* call custom calloc() */\nSIXELAPI void *\nsixel_allocator_calloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    size_t              /* in */ nelm,        /* number of elements */\n    size_t              /* in */ elsize)      /* size of element */\n{\n    size_t n;\n\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_calloc);\n\n    n = nelm * elsize;\n\n    if (n == 0) {\n        sixel_helper_set_additional_message(\n            \"sixel_allocator_malloc: called with n == 0\");\n        return NULL;\n    }\n\n    if (n > SIXEL_ALLOCATE_BYTES_MAX) {\n        return NULL;\n    }\n\n    return allocator->fn_calloc(nelm, elsize);\n}\n\n\n/* call custom realloc() */\nSIXELAPI void *\nsixel_allocator_realloc(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    void                /* in */ *p,          /* existing buffer to be re-allocated */\n    size_t              /* in */ n)           /* re-allocation size */\n{\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_realloc);\n\n    if (n == 0) {\n        sixel_helper_set_additional_message(\n            \"sixel_allocator_malloc: called with n == 0\");\n        return NULL;\n    }\n\n    if (n > SIXEL_ALLOCATE_BYTES_MAX) {\n        return NULL;\n    }\n\n    return allocator->fn_realloc(p, n);\n}\n\n\n/* call custom free() */\nSIXELAPI void\nsixel_allocator_free(\n    sixel_allocator_t   /* in */ *allocator,  /* allocator object */\n    void                /* in */ *p)          /* existing buffer to be freed */\n{\n    /* precondition */\n    assert(allocator);\n    assert(allocator->fn_free);\n\n    allocator->fn_free(p);\n}\n\n\n#if HAVE_TESTS\nvolatile int sixel_debug_malloc_counter;\n\nvoid *\nsixel_bad_malloc(size_t size)\n{\n    return sixel_debug_malloc_counter-- == 0 ? NULL: malloc(size);\n}\n\n\nvoid *\nsixel_bad_calloc(size_t count, size_t size)\n{\n    (void) count;\n    (void) size;\n\n    return NULL;\n}\n\n\nvoid *\nsixel_bad_realloc(void *ptr, size_t size)\n{\n    (void) ptr;\n    (void) size;\n\n    return NULL;\n}\n#endif  /* HAVE_TESTS */\n\n#if 0\nint\nrpl_posix_memalign(void **memptr, size_t alignment, size_t size)\n{\n#if HAVE_POSIX_MEMALIGN\n    return posix_memalign(memptr, alignment, size);\n#elif HAVE_ALIGNED_ALLOC\n    *memptr = aligned_alloc(alignment, size);\n    return *memptr ? 0: ENOMEM;\n#elif HAVE_MEMALIGN\n    *memptr = memalign(alignment, size);\n    return *memptr ? 0: ENOMEM;\n#elif HAVE__ALIGNED_MALLOC\n    return _aligned_malloc(size, alignment);\n#else\n# error\n#endif /* _MSC_VER */\n}\n#endif\n\n\n#if HAVE_TESTS\nstatic int\ntest1(void)\n{\n    int nret = EXIT_FAILURE;\n    SIXELSTATUS status;\n    sixel_allocator_t *allocator = NULL;\n\n    status = sixel_allocator_new(NULL, malloc, calloc, realloc, free);\n    if (status != SIXEL_BAD_ARGUMENT) {\n        goto error;\n    }\n\n    status = sixel_allocator_new(&allocator, NULL, calloc, realloc, free);\n    if (SIXEL_FAILED(status)) {\n        goto error;\n    }\n\n    status = sixel_allocator_new(&allocator, malloc, NULL, realloc, free);\n    if (SIXEL_FAILED(status)) {\n        goto error;\n    }\n\n    status = sixel_allocator_new(&allocator, malloc, calloc, NULL, free);\n    if (SIXEL_FAILED(status)) {\n        goto error;\n    }\n\n    status = sixel_allocator_new(&allocator, malloc, calloc, realloc, NULL);\n    if (SIXEL_FAILED(status)) {\n        goto error;\n    }\n\n    nret = EXIT_SUCCESS;\n\nerror:\n    return nret;\n}\n\n\nstatic int\ntest2(void)\n{\n    int nret = EXIT_FAILURE;\n    SIXELSTATUS status;\n    sixel_allocator_t *allocator = NULL;\n\n    sixel_debug_malloc_counter = 1;\n\n    status = sixel_allocator_new(&allocator, sixel_bad_malloc, calloc, realloc, free);\n    if (status == SIXEL_BAD_ALLOCATION) {\n        goto error;\n    }\n\n    nret = EXIT_SUCCESS;\n\nerror:\n    return nret;\n}\n\n\nSIXELAPI int\nsixel_allocator_tests_main(void)\n{\n    int nret = EXIT_FAILURE;\n    size_t i;\n    typedef int (* testcase)(void);\n\n    static testcase const testcases[] = {\n        test1,\n        test2\n    };\n\n    for (i = 0; i < sizeof(testcases) / sizeof(testcase); ++i) {\n        nret = testcases[i]();\n        if (nret != EXIT_SUCCESS) {\n            goto error;\n        }\n    }\n\n    nret = EXIT_SUCCESS;\n\nerror:\n    return nret;\n}\n#endif  /* HAVE_TESTS */\n\n/* emacs Local Variables:      */\n/* emacs mode: c               */\n/* emacs tab-width: 4          */\n/* emacs indent-tabs-mode: nil */\n/* emacs c-basic-offset: 4     */\n/* emacs End:                  */\n/* vim: set expandtab ts=4 sts=4 sw=4 : */\n/* EOF */\n"], "filenames": ["include/sixel.h.in", "src/allocator.c"], "buggy_code_start_loc": [41, 154], "buggy_code_end_loc": [41, 183], "fixing_code_start_loc": [42, 155], "fixing_code_end_loc": [43, 213], "type": "CWE-125", "message": "An invalid read in the stb_image.h component of libsixel prior to v1.8.5 allows attackers to cause a denial of service (DOS) via a crafted PSD file.", "other": {"cve": {"id": "CVE-2020-21049", "sourceIdentifier": "cve@mitre.org", "published": "2021-09-14T16:15:08.773", "lastModified": "2021-09-24T17:08:20.597", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An invalid read in the stb_image.h component of libsixel prior to v1.8.5 allows attackers to cause a denial of service (DOS) via a crafted PSD file."}, {"lang": "es", "value": "Una lectura no v\u00e1lida en el componente stb_image.h de libsixel versiones anteriores a v1.8.5, permite a atacantes causar una denegaci\u00f3n de servicio (DOS) por medio de un archivo PSD dise\u00f1ado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:libsixel_project:libsixel:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.8.5", "matchCriteriaId": "8C9591E2-D3E9-40F7-82E8-EAA2FB78FD4D"}]}]}], "references": [{"url": "https://bitbucket.org/netbsd/pkgsrc/commits/970a81d31ec7498e04d09b6b7771cef35f63cd28", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "https://github.com/saitoha/libsixel/blob/master/ChangeLog", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/saitoha/libsixel/commit/0b1e0b3f7b44233f84e5c9f512f8c90d6bbbe33d", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/saitoha/libsixel/issues/74", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/saitoha/libsixel/releases/tag/v1.8.5", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/saitoha/libsixel/commit/0b1e0b3f7b44233f84e5c9f512f8c90d6bbbe33d"}}