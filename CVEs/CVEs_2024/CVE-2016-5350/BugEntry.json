{"buggy_code": ["/* packet-dcerpc-spoolss.c\n * Routines for SMB \\PIPE\\spoolss packet disassembly\n * Copyright 2001-2003, Tim Potter <tpot@samba.org>\n *\n * Wireshark - Network traffic analyzer\n * By Gerald Combs <gerald@wireshark.org>\n * Copyright 1998 Gerald Combs\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\n/* TODO list:\n\n - audit of item lengths\n\n*/\n\n#include \"config.h\"\n\n\n#include <epan/packet.h>\n#include <epan/expert.h>\n#include \"packet-dcerpc.h\"\n#include \"packet-dcerpc-nt.h\"\n#include \"packet-dcerpc-spoolss.h\"\n#include \"packet-windows-common.h\"\n\nvoid proto_register_dcerpc_spoolss(void);\nvoid proto_reg_handoff_dcerpc_spoolss(void);\n\n/* GetPrinterDriver2 */\n\nstatic int hf_clientmajorversion = -1;\nstatic int hf_clientminorversion = -1;\nstatic int hf_servermajorversion = -1;\nstatic int hf_serverminorversion = -1;\nstatic int hf_driverpath = -1;\nstatic int hf_datafile = -1;\nstatic int hf_configfile = -1;\nstatic int hf_helpfile = -1;\nstatic int hf_monitorname = -1;\nstatic int hf_defaultdatatype = -1;\nstatic int hf_driverinfo_cversion = -1;\nstatic int hf_dependentfiles = -1;\nstatic int hf_previousdrivernames = -1;\nstatic int hf_driverdate = -1;\nstatic int hf_padding = -1;\nstatic int hf_driver_version_low = -1;\nstatic int hf_driver_version_high = -1;\nstatic int hf_mfgname = -1;\nstatic int hf_oemurl = -1;\nstatic int hf_hardwareid= -1;\nstatic int hf_provider = -1;\n\n/* GetPrinter */\n\n/* Times */\n\nstatic int hf_start_time = -1;\nstatic int hf_end_time = -1;\nstatic int hf_elapsed_time = -1;\n\n/****************************************************************************/\n\n/*\n * New hf index values - I'm in the process of doing a bit of a cleanup -tpot\n */\n\nstatic int hf_opnum = -1;\nstatic int hf_hnd = -1;\nstatic int hf_rc = -1;\nstatic int hf_offered = -1;\nstatic int hf_needed = -1;\nstatic int hf_returned = -1;\nstatic int hf_buffer_size = -1;\nstatic int hf_buffer_data = -1;\nstatic int hf_string_parm_size = -1;\nstatic int hf_string_parm_data= -1;\nstatic int hf_offset = -1;\nstatic int hf_level = -1;\nstatic int hf_access_required = -1;\n\nstatic int hf_printername = -1;\nstatic int hf_machinename = -1;\nstatic int hf_notifyname = -1;\nstatic int hf_printerdesc = -1;\nstatic int hf_printercomment = -1;\nstatic int hf_servername = -1;\nstatic int hf_sharename = -1;\nstatic int hf_portname = -1;\nstatic int hf_printerlocation = -1;\nstatic int hf_drivername = -1;\nstatic int hf_environment = -1;\nstatic int hf_username = -1;\nstatic int hf_documentname = -1;\nstatic int hf_outputfile = -1;\nstatic int hf_datatype = -1;\nstatic int hf_textstatus = -1;\nstatic int hf_sepfile = -1;\nstatic int hf_printprocessor = -1;\nstatic int hf_parameters = -1;\n\n/* Printer information */\n\nstatic int hf_printer_cjobs = -1;\nstatic int hf_printer_total_jobs = -1;\nstatic int hf_printer_total_bytes = -1;\nstatic int hf_printer_global_counter = -1;\nstatic int hf_printer_total_pages = -1;\nstatic int hf_printer_major_version = -1;\nstatic int hf_printer_build_version = -1;\nstatic int hf_printer_unk7 = -1;\nstatic int hf_printer_unk8 = -1;\nstatic int hf_printer_unk9 = -1;\nstatic int hf_printer_session_ctr = -1;\nstatic int hf_printer_unk11 = -1;\nstatic int hf_printer_printer_errors = -1;\nstatic int hf_printer_unk13 = -1;\nstatic int hf_printer_unk14 = -1;\nstatic int hf_printer_unk15 = -1;\nstatic int hf_printer_unk16 = -1;\nstatic int hf_printer_changeid = -1;\nstatic int hf_printer_unk18 = -1;\nstatic int hf_printer_unk20 = -1;\nstatic int hf_printer_c_setprinter = -1;\nstatic int hf_printer_unk22 = -1;\nstatic int hf_printer_unk23 = -1;\nstatic int hf_printer_unk24 = -1;\nstatic int hf_printer_unk25 = -1;\nstatic int hf_printer_unk26 = -1;\nstatic int hf_printer_unk27 = -1;\nstatic int hf_printer_unk28 = -1;\nstatic int hf_printer_unk29 = -1;\nstatic int hf_printer_flags = -1;\nstatic int hf_printer_priority = -1;\nstatic int hf_printer_default_priority = -1;\nstatic int hf_printer_jobs = -1;\nstatic int hf_printer_averageppm = -1;\nstatic int hf_printer_guid = -1;\nstatic int hf_printer_action = -1;\n\n/* Printer data */\n\nstatic int hf_printerdata = -1;\nstatic int hf_printerdata_key = -1;\nstatic int hf_printerdata_value = -1;\nstatic int hf_printerdata_type = -1;\nstatic int hf_printerdata_size = -1; /* Length of printer data */\nstatic int hf_printerdata_data = -1;\nstatic int hf_printerdata_data_sz = -1;\nstatic int hf_printerdata_data_dword = -1;\n\n/* Devicemode */\n\nstatic int hf_devmodectr_size = -1;\n\nstatic int hf_devmode = -1;\nstatic int hf_devmode_size = -1;\nstatic int hf_devmode_spec_version = -1;\nstatic int hf_devmode_driver_version = -1;\nstatic int hf_devmode_size2 = -1;\nstatic int hf_devmode_driver_extra_len = -1;\nstatic int hf_devmode_fields = -1;\nstatic int hf_devmode_orientation = -1;\nstatic int hf_devmode_paper_size = -1;\nstatic int hf_devmode_paper_width = -1;\nstatic int hf_devmode_paper_length = -1;\nstatic int hf_devmode_scale = -1;\nstatic int hf_devmode_copies = -1;\nstatic int hf_devmode_default_source = -1;\nstatic int hf_devmode_print_quality = -1;\nstatic int hf_devmode_color = -1;\nstatic int hf_devmode_duplex = -1;\nstatic int hf_devmode_y_resolution = -1;\nstatic int hf_devmode_tt_option = -1;\nstatic int hf_devmode_collate = -1;\nstatic int hf_devmode_log_pixels = -1;\nstatic int hf_devmode_bits_per_pel = -1;\nstatic int hf_devmode_pels_width = -1;\nstatic int hf_devmode_pels_height = -1;\nstatic int hf_devmode_display_flags = -1;\nstatic int hf_devmode_display_freq = -1;\nstatic int hf_devmode_icm_method = -1;\nstatic int hf_devmode_icm_intent = -1;\nstatic int hf_devmode_media_type = -1;\nstatic int hf_devmode_dither_type = -1;\nstatic int hf_devmode_reserved1 = -1;\nstatic int hf_devmode_reserved2 = -1;\nstatic int hf_devmode_panning_width = -1;\nstatic int hf_devmode_panning_height = -1;\nstatic int hf_devmode_driver_extra = -1;\n\nstatic int hf_devmode_fields_orientation = -1;\nstatic int hf_devmode_fields_papersize = -1;\nstatic int hf_devmode_fields_paperlength = -1;\nstatic int hf_devmode_fields_paperwidth = -1;\nstatic int hf_devmode_fields_scale = -1;\nstatic int hf_devmode_fields_position = -1;\nstatic int hf_devmode_fields_nup = -1;\nstatic int hf_devmode_fields_copies = -1;\nstatic int hf_devmode_fields_defaultsource = -1;\nstatic int hf_devmode_fields_printquality = -1;\nstatic int hf_devmode_fields_color = -1;\nstatic int hf_devmode_fields_duplex = -1;\nstatic int hf_devmode_fields_yresolution = -1;\nstatic int hf_devmode_fields_ttoption = -1;\nstatic int hf_devmode_fields_collate = -1;\nstatic int hf_devmode_fields_formname = -1;\nstatic int hf_devmode_fields_logpixels = -1;\nstatic int hf_devmode_fields_bitsperpel = -1;\nstatic int hf_devmode_fields_pelswidth = -1;\nstatic int hf_devmode_fields_pelsheight = -1;\nstatic int hf_devmode_fields_displayflags = -1;\nstatic int hf_devmode_fields_displayfrequency = -1;\nstatic int hf_devmode_fields_icmmethod = -1;\nstatic int hf_devmode_fields_icmintent = -1;\nstatic int hf_devmode_fields_mediatype = -1;\nstatic int hf_devmode_fields_dithertype = -1;\nstatic int hf_devmode_fields_panningwidth = -1;\nstatic int hf_devmode_fields_panningheight = -1;\n\n/* Print job */\n\nstatic int hf_job_id = -1;\nstatic int hf_job_priority = -1;\nstatic int hf_job_position = -1;\nstatic int hf_job_totalpages = -1;\nstatic int hf_job_totalbytes = -1;\nstatic int hf_job_pagesprinted = -1;\nstatic int hf_job_bytesprinted = -1;\nstatic int hf_job_size = -1;\n\nstatic int hf_job_status = -1;\nstatic int hf_job_status_paused = -1;\nstatic int hf_job_status_error = -1;\nstatic int hf_job_status_deleting = -1;\nstatic int hf_job_status_spooling = -1;\nstatic int hf_job_status_printing = -1;\nstatic int hf_job_status_offline = -1;\nstatic int hf_job_status_paperout = -1;\nstatic int hf_job_status_printed = -1;\nstatic int hf_job_status_deleted = -1;\nstatic int hf_job_status_blocked = -1;\nstatic int hf_job_status_user_intervention = -1;\n\n/* Forms */\n\nstatic int hf_form = -1;\nstatic int hf_form_level = -1;\nstatic int hf_form_name = -1;\nstatic int hf_form_flags = -1;\nstatic int hf_form_unknown = -1;\nstatic int hf_form_width = -1;\nstatic int hf_form_height = -1;\nstatic int hf_form_left_margin = -1;\nstatic int hf_form_top_margin = -1;\nstatic int hf_form_horiz_len = -1;\nstatic int hf_form_vert_len = -1;\n\nstatic int hf_enumforms_num = -1;\n\n/* Print notify */\n\nstatic int hf_notify_options_version = -1;\nstatic int hf_notify_options_flags = -1;\nstatic int hf_notify_options_flags_refresh = -1;\nstatic int hf_notify_options_count = -1;\nstatic int hf_notify_option_type = -1;\nstatic int hf_notify_option_reserved1 = -1;\nstatic int hf_notify_option_reserved2 = -1;\nstatic int hf_notify_option_reserved3 = -1;\nstatic int hf_notify_option_count = -1;\nstatic int hf_notify_option_data_count = -1;\nstatic int hf_notify_info_count = -1;\nstatic int hf_notify_info_version = -1;\nstatic int hf_notify_info_flags = -1;\nstatic int hf_notify_info_data_type = -1;\nstatic int hf_notify_info_data_count = -1;\nstatic int hf_notify_info_data_id = -1;\nstatic int hf_notify_info_data_value1 = -1;\nstatic int hf_notify_info_data_value2 = -1;\nstatic int hf_notify_info_data_bufsize = -1;\nstatic int hf_notify_info_data_buffer = -1;\nstatic int hf_notify_info_data_buffer_len = -1;\nstatic int hf_notify_info_data_buffer_data = -1;\n\nstatic int hf_notify_field = -1;\n\nstatic int hf_printerlocal = -1;\n\nstatic int hf_rrpcn_changelow = -1;\nstatic int hf_rrpcn_changehigh = -1;\nstatic int hf_rrpcn_unk0 = -1;\nstatic int hf_rrpcn_unk1 = -1;\n\nstatic int hf_replyopenprinter_unk0 = -1;\nstatic int hf_replyopenprinter_unk1 = -1;\n\nstatic int hf_devmode_devicename = -1;\nstatic int hf_devmode_form_name = -1;\nstatic int hf_relative_string = -1;\nstatic int hf_value_name = -1;\nstatic int hf_keybuffer = -1;\nstatic int hf_value_string = -1;\n\nstatic expert_field ei_unimplemented_dissector = EI_INIT;\nstatic expert_field ei_unknown_data = EI_INIT;\nstatic expert_field ei_spool_printer_info_level = EI_INIT;\nstatic expert_field ei_printer_info_level = EI_INIT;\nstatic expert_field ei_form_level = EI_INIT;\nstatic expert_field ei_job_info_level = EI_INIT;\nstatic expert_field ei_driver_info_level = EI_INIT;\nstatic expert_field ei_level = EI_INIT;\nstatic expert_field ei_notify_info_data_type = EI_INIT;\nstatic expert_field ei_enumprinterdataex_value = EI_INIT;\n\n/* Registry data types */\n\n#define DCERPC_REG_NONE                        0\n#define DCERPC_REG_SZ                          1\n#define DCERPC_REG_EXPAND_SZ                   2\n#define DCERPC_REG_BINARY                      3\n#define DCERPC_REG_DWORD                       4\n#define DCERPC_REG_DWORD_LE                    4        /* DWORD, little endian\n*/\n#define DCERPC_REG_DWORD_BE                    5        /* DWORD, big endian */\n#define DCERPC_REG_LINK                        6\n#define DCERPC_REG_MULTI_SZ                    7\n#define DCERPC_REG_RESOURCE_LIST               8\n#define DCERPC_REG_FULL_RESOURCE_DESCRIPTOR    9\n#define DCERPC_REG_RESOURCE_REQUIREMENTS_LIST 10\n\nstatic const value_string reg_datatypes[] = {\n\t{ DCERPC_REG_NONE, \"REG_NONE\" },\n\t{ DCERPC_REG_SZ, \"REG_SZ\" },\n\t{ DCERPC_REG_EXPAND_SZ, \"REG_EXPAND_SZ\" },\n\t{ DCERPC_REG_BINARY, \"REG_BINARY\" },\n\t{ DCERPC_REG_DWORD, \"REG_DWORD\" },\n/*\t  { DCERPC_REG_DWORD_LE, \"REG_DWORD_LE\" }, */\n\t{ DCERPC_REG_DWORD_BE, \"REG_DWORD_BE\" },\n\t{ DCERPC_REG_LINK, \"REG_LINK\" },\n\t{ DCERPC_REG_MULTI_SZ, \"REG_MULTI_SZ\" },\n\t{ DCERPC_REG_RESOURCE_LIST, \"REG_RESOURCE_LIST\" },\n\t{ DCERPC_REG_FULL_RESOURCE_DESCRIPTOR, \"REG_FULL_RESOURCE_DESCRIPTOR\" },\n\t{ DCERPC_REG_RESOURCE_REQUIREMENTS_LIST, \"REG_RESOURCE_REQUIREMENTS_LIST\" },\n\t{0, NULL }\n};\nstatic value_string_ext reg_datatypes_ext = VALUE_STRING_EXT_INIT(reg_datatypes);\n\n/****************************************************************************/\n\n/*\n * Dissect SPOOLSS specific access rights\n */\n\nstatic int hf_server_access_admin = -1;\nstatic int hf_server_access_enum = -1;\nstatic int hf_printer_access_admin = -1;\nstatic int hf_printer_access_use = -1;\nstatic int hf_job_access_admin = -1;\n\nstatic void\nspoolss_printer_specific_rights(tvbuff_t *tvb, gint offset, proto_tree *tree,\n\t\t\t\tguint32 access)\n{\n\tproto_tree_add_boolean(\n\t\ttree, hf_printer_access_use, tvb, offset, 4, access);\n\n\tproto_tree_add_boolean(\n\t\ttree, hf_printer_access_admin, tvb, offset, 4, access);\n}\n\nstruct access_mask_info spoolss_printer_access_mask_info = {\n\t\"SPOOLSS printer\",\n\tspoolss_printer_specific_rights,\n\tNULL,\t\t\t/* Generic mapping table */\n\tNULL\t\t\t/* Standard mapping table */\n};\n\nstatic void\nspoolss_printserver_specific_rights(tvbuff_t *tvb, gint offset,\n\t\t\t\t    proto_tree *tree, guint32 access)\n{\n\tproto_tree_add_boolean(\n\t\ttree, hf_server_access_enum, tvb, offset, 4, access);\n\n\tproto_tree_add_boolean(\n\t\ttree, hf_server_access_admin, tvb, offset, 4, access);\n}\n\nstruct access_mask_info spoolss_printserver_access_mask_info = {\n\t\"SPOOLSS print server\",\n\tspoolss_printserver_specific_rights,\n\tNULL,\t\t\t/* Generic mapping table */\n\tNULL\t\t\t/* Standard mapping table */\n};\n\nstatic void\nspoolss_job_specific_rights(tvbuff_t *tvb, gint offset,\n\t\t\t    proto_tree *tree, guint32 access)\n{\n\tproto_tree_add_boolean(\n\t\ttree, hf_job_access_admin, tvb, offset, 4, access);\n}\n\nstruct access_mask_info spoolss_job_access_mask_info = {\n\t\"SPOOLSS job\",\n\tspoolss_job_specific_rights,\n\tNULL,\t\t\t/* Generic mapping table */\n\tNULL\t\t\t/* Standard mapping table */\n};\n\n/*\n * Routines to dissect a spoolss BUFFER\n */\n\ntypedef struct {\n\ttvbuff_t *tvb;\n\tproto_item *tree;\t/* Proto tree buffer located in */\n\tproto_item *item;\n} BUFFER;\n\nstatic gint ett_BUFFER = -1;\n\nstatic int\ndissect_spoolss_buffer_data(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tBUFFER *b = (BUFFER *)di->private_data;\n\tproto_item *item;\n\tguint32 size;\n\tconst guint8 *data;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\t/* Dissect size and data */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_buffer_size, &size);\n\n\toffset = dissect_ndr_uint8s(tvb, offset, pinfo, NULL, di, drep,\n\t\t\t\t    hf_buffer_data, size, &data);\n\n\titem = proto_tree_add_item(\n\t\ttree, hf_buffer_data, tvb, offset - size,\n\t\tsize, ENC_NA);\n\n\t/* Return buffer info */\n\n\tif (b) {\n\n\t\t/* I'm not sure about this.  Putting the buffer into\n\t\t   its own tvb makes sense and the dissection code is\n\t\t   much clearer, but the data is a proper subset of\n\t\t   the actual tvb.  Not adding the new data source\n\t\t   makes the hex display confusing as it switches\n\t\t   between the 'DCERPC over SMB' tvb and the buffer\n\t\t   tvb with no visual cues as to what is going on. */\n\n\t\tb->tvb = tvb_new_child_real_data(tvb, data, size, size);\n\t\tadd_new_data_source(pinfo, b->tvb, \"SPOOLSS buffer\");\n\n\t\tb->item = item;\n\t\tb->tree = proto_item_add_subtree(item, ett_BUFFER);\n\t}\n\n\treturn offset;\n}\n\n/* Dissect a spoolss buffer and return buffer data */\n\nstatic int\ndissect_spoolss_buffer(tvbuff_t *tvb, gint offset, packet_info *pinfo,\n\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep, BUFFER *b)\n{\n\tif (b)\n\t\tmemset(b, 0, sizeof(BUFFER));\n\n\tdi->private_data = b;\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_spoolss_buffer_data, NDR_POINTER_UNIQUE,\n\t\t\"Buffer\", -1);\n\n\treturn offset;\n}\n\nstatic int\ndissect_spoolss_string_parm_data(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 buffer_len, len;\n\tgchar *s;\n\tproto_item *item = NULL;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\t/* Dissect size and data */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\thf_string_parm_size, &buffer_len);\n\n\ts = tvb_get_stringz_enc(wmem_packet_scope(), tvb, offset, &len, ENC_UTF_16|ENC_LITTLE_ENDIAN);\n\n\tif (tree && buffer_len) {\n\t\ttvb_ensure_bytes_exist(tvb, offset, buffer_len);\n\n\t\titem = proto_tree_add_string(\n\t\t\ttree, hf_string_parm_data, tvb, offset, len, s);\n\t}\n\toffset += buffer_len;\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", s);\n\n\t/* Append string to upper level item */\n\tif (tree && item) {\n\t\titem = item->parent != NULL ? item->parent : item;\n\t\tproto_item_append_text(item, \": %s\", s);\n\t}\n\n\treturn offset;\n}\n\n/* Dissect a spoolss string parameter */\n\nstatic int\ndissect_spoolss_string_parm(tvbuff_t *tvb, gint offset, packet_info *pinfo,\n\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep, const char *text)\n{\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_spoolss_string_parm_data, NDR_POINTER_UNIQUE,\n\t\ttext, -1);\n\n\treturn offset;\n}\n\n/*\n * SYSTEM_TIME\n */\n\nstatic gint ett_SYSTEM_TIME = -1;\n\nstatic int hf_time_year = -1;\nstatic int hf_time_month = -1;\nstatic int hf_time_dow = -1;\nstatic int hf_time_day = -1;\nstatic int hf_time_hour = -1;\nstatic int hf_time_minute = -1;\nstatic int hf_time_second = -1;\nstatic int hf_time_msec = -1;\n\nstatic int\ndissect_SYSTEM_TIME(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep, const char *name,\n\t\t    gboolean add_subtree, char **data)\n{\n\tproto_item *item = NULL;\n\tproto_tree *subtree = tree;\n\tguint16 year, month, day, hour, minute, second, millisecond;\n\tchar *str;\n\n\tif (add_subtree) {\n\t\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 16, ett_SYSTEM_TIME, &item, name);\n\t}\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_year, &year);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_month, &month);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_dow, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_day, &day);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_hour, &hour);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_minute, &minute);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_second, &second);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_msec, &millisecond);\n\n\tstr = wmem_strdup_printf(wmem_packet_scope(),\n\t\t\t      \"%d/%02d/%02d %02d:%02d:%02d.%03d\",\n\t\t\t      year, month, day, hour, minute, second,\n\t\t\t      millisecond);\n\n\tif (add_subtree)\n\t\tproto_item_append_text(item, \": %s\", str);\n\n\tif (data)\n\t\t*data = str;\n\n\treturn offset;\n}\n\nstatic int\ndissect_SYSTEM_TIME_ptr(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *str;\n\n\n\toffset =  dissect_SYSTEM_TIME(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL, FALSE, &str);\n\tdcv->private_data = str;\n\n\treturn offset;\n}\n\n/*\n * SpoolssClosePrinter\n */\n\nstatic int\nSpoolssClosePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep _U_)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, TRUE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssClosePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/* Dissect some printer data.  The get/set/enum printerdata routines all\n   store value/data in a uint8 array.  We could use the ndr routines for\n   this but that would result in one item for each byte in the printer\n   data. */\n\nstatic gint ett_printerdata_data = -1;\nstatic gint ett_printerdata_value = -1;\n\nstatic int\ndissect_printerdata_data(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep _U_, guint32 type)\n{\n\tproto_item *item, *hidden_item;\n\tproto_tree *subtree;\n\tguint32 size;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_printerdata_data, &item, \"Data\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printerdata_size, &size);\n\n\tif (size) {\n\n\t\toffset = dissect_ndr_uint8s(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_printerdata_data, size, NULL);\n\n\t\tswitch(type) {\n\t\tcase DCERPC_REG_SZ: {\n\t\t\tchar *data = tvb_get_string_enc(NULL, tvb, offset - size, size, ENC_UTF_16|ENC_LITTLE_ENDIAN);\n\n\t\t\tproto_item_append_text(item, \": %s\", data);\n\n\t\t\tcol_append_fstr(\n\t\t\t\t\tpinfo->cinfo, COL_INFO, \" = %s\", data);\n\n\t\t\thidden_item = proto_tree_add_string(\n\t\t\t\ttree, hf_printerdata_data_sz, tvb,\n\t\t\t\toffset - size, size, data);\n\t\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t\t\tg_free(data);\n\n\t\t\tbreak;\n\t\t}\n\t\tcase DCERPC_REG_DWORD: {\n\t\t\tguint32 data = tvb_get_letohl(tvb, offset - size);\n\n\t\t\tproto_item_append_text(item, \": 0x%08x\", data);\n\n\t\t\tcol_append_fstr(\n\t\t\t\t\tpinfo->cinfo, COL_INFO, \" = 0x%08x\",\n\t\t\t\t\tdata);\n\n\t\t\thidden_item = proto_tree_add_uint(\n\t\t\t\ttree, hf_printerdata_data_dword, tvb,\n\t\t\t\toffset - size, 4, data);\n\t\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t\t\tbreak;\n\t\t}\n\t\tcase DCERPC_REG_BINARY:\n\t\t\tcol_append_str(\n\t\t\t\t\tpinfo->cinfo, COL_INFO,\n\t\t\t\t\t\" = <binary data>\");\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tproto_item_set_len(item, size + 4);\n\n\treturn offset;\n}\n\n/*\n * SpoolssGetPrinterData\n */\n\nstatic int\nSpoolssGetPrinterData_q(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *value_name;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\n\tvalue_name=NULL;\n \toffset = dissect_ndr_cvstring(\n \t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n \t\thf_printerdata_value, TRUE, value_name ? NULL : &value_name);\n\t/* GetPrinterData() stores the printerdata in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tif(value_name){\n\t\t\t\tdcv->se_data = wmem_strdup(wmem_file_scope(), value_name);\n\t\t\t}\n\t\t}\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", value_name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterData_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 type;\n\tproto_item *hidden_item;\n\tconst char *data;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_printerdata_type, &type);\n\n\tdata = (const char *)(dcv->se_data ? dcv->se_data : \"????\");\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", data);\n\n\toffset = dissect_printerdata_data(\n\t\ttvb, offset, pinfo, tree, di, drep, type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssGetPrinterDataEx\n */\n\nstatic int\nSpoolssGetPrinterDataEx_q(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *key_name, *value_name;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\tkey_name=NULL;\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_key, TRUE, &key_name);\n\n\tvalue_name=NULL;\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_value, TRUE, &value_name);\n\n\t/* GetPrinterDataEx() stores the key/value in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tdcv->se_data = wmem_strdup_printf(wmem_file_scope(),\n\t\t\t\t\"%s==%s\",\n\t\t\t\tkey_name?key_name:\"\",\n\t\t\t\tvalue_name?value_name:\"\");\n\t\t}\n\t}\n\n\tif (dcv->se_data)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\t(char *)dcv->se_data);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterDataEx_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 size, type;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerdata_type, &type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_returned, &size);\n\n\tif (dcv->se_data) {\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", (char *)dcv->se_data);\n\t}\n\n\tif (size)\n\t\tdissect_printerdata_data(tvb, offset, pinfo, tree, di, drep, type);\n\n\toffset += size;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssSetPrinterData\n */\n\nstatic int\nSpoolssSetPrinterData_q(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *value_name;\n\tguint32 type;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\tvalue_name=NULL;\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_value, TRUE, &value_name);\n\n\t/* GetPrinterDataEx() stores the key/value in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tdcv->se_data = wmem_strdup_printf(wmem_file_scope(),\n\t\t\t\t\"%s\", value_name?value_name:\"\");\n\t\t}\n\t}\n\n\n\tif (dcv->se_data){\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", (char *)dcv->se_data);\n\t}\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_printerdata_type, &type);\n\n\toffset = dissect_printerdata_data(\n\t\ttvb, offset, pinfo, tree, di, drep, type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetPrinterData_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssSetPrinterDataEx\n */\n\nstatic int hf_setprinterdataex_max_len = -1;\nstatic int hf_setprinterdataex_real_len = -1;\nstatic int hf_setprinterdataex_data = -1;\n\nstatic int\nSpoolssSetPrinterDataEx_q(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tchar *key_name, *value_name;\n\tguint32 max_len;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_key, TRUE, &key_name);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_value, TRUE, &value_name);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s/%s\",\n\t\t\t\tkey_name, value_name);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_printerdata_type, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_setprinterdataex_max_len, &max_len);\n\n\toffset = dissect_ndr_uint8s(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_setprinterdataex_data, max_len, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_setprinterdataex_real_len, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetPrinterDataEx_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/* XXX - \"name\" should be an hf_ value for an FT_STRING. */\nstatic int\ndissect_spoolss_uint16uni(tvbuff_t *tvb, int offset, packet_info *pinfo _U_,\n\t\t\t  proto_tree *tree, guint8 *drep _U_, char **data,\n\t\t\t  int hf_name)\n{\n\tgint len, remaining;\n\tchar *text;\n\n\tif (offset % 2)\n\t\toffset += 2 - (offset % 2);\n\n\t/* Get remaining data in buffer as a string */\n\n\tremaining = tvb_captured_length_remaining(tvb, offset);\n\tif (remaining <= 0) {\n\t\tif (data)\n\t\t\t*data = g_strdup(\"\");\n\t\treturn offset;\n\t}\n\n\ttext = tvb_get_string_enc(NULL, tvb, offset, remaining, ENC_UTF_16|ENC_LITTLE_ENDIAN);\n\tlen = (int)strlen(text);\n\n\tproto_tree_add_string(tree, hf_name, tvb, offset, len * 2, text);\n\n\tif (data)\n\t\t*data = text;\n\telse\n\t\tg_free(text);\n\n\treturn offset + (len + 1) * 2;\n}\n\n/*\n * DEVMODE\n */\n\n/* Devicemode orientation values */\n\nstatic const value_string devmode_orientation_vals[] =\n{\n\t{ DEVMODE_ORIENTATION_PORTRAIT, \"Portrait\" },\n\t{ DEVMODE_ORIENTATION_LANDSCAPE, \"Landscape\" },\n\t{ 0, NULL }\n};\n\n/* Paper size values.  International paper sizes is a fascinating\n   topic.  No seriously!  (-: */\n\nstatic const value_string devmode_papersize_vals[] =\n{\n\t{ DEVMODE_PAPERSIZE_LETTER, \"Letter\" },\n\t{ DEVMODE_PAPERSIZE_LETTERSMALL, \"Letter (small)\" },\n\t{ DEVMODE_PAPERSIZE_TABLOID, \"Tabloid\" },\n\t{ DEVMODE_PAPERSIZE_LEDGER, \"Ledger\" },\n\t{ DEVMODE_PAPERSIZE_LEGAL, \"Legal\" },\n\t{ DEVMODE_PAPERSIZE_STATEMENT, \"Statement\" },\n\t{ DEVMODE_PAPERSIZE_EXECUTIVE, \"Executive\" },\n\t{ DEVMODE_PAPERSIZE_A3, \"A3\" },\n\t{ DEVMODE_PAPERSIZE_A4, \"A4\" },\n\t{ DEVMODE_PAPERSIZE_A4SMALL, \"A4 (small)\" },\n\t{ DEVMODE_PAPERSIZE_A5, \"A5\" },\n\t{ DEVMODE_PAPERSIZE_B4, \"B4\" },\n\t{ DEVMODE_PAPERSIZE_B5, \"B5\" },\n\t{ DEVMODE_PAPERSIZE_FOLIO, \"Folio\" },\n\t{ DEVMODE_PAPERSIZE_QUARTO, \"Quarto\" },\n\t{ DEVMODE_PAPERSIZE_10X14, \"10x14\" },\n\t{ DEVMODE_PAPERSIZE_11X17, \"11x17\" },\n\t{ DEVMODE_PAPERSIZE_NOTE, \"Note\" },\n\t{ DEVMODE_PAPERSIZE_ENV9, \"Envelope #9\" },\n\t{ DEVMODE_PAPERSIZE_ENV10, \"Envelope #10\" },\n\t{ DEVMODE_PAPERSIZE_ENV11, \"Envelope #11\" },\n\t{ DEVMODE_PAPERSIZE_ENV12, \"Envelope #12\" },\n\t{ DEVMODE_PAPERSIZE_ENV14, \"Envelope #14\" },\n\t{ DEVMODE_PAPERSIZE_CSHEET, \"C sheet\" },\n\t{ DEVMODE_PAPERSIZE_DSHEET, \"D sheet\" },\n\t{ DEVMODE_PAPERSIZE_ESHEET, \"E sheet\" },\n\t{ DEVMODE_PAPERSIZE_ENVDL, \"Envelope DL\" },\n\t{ DEVMODE_PAPERSIZE_ENVC5, \"Envelope C5\" },\n\t{ DEVMODE_PAPERSIZE_ENVC3, \"Envelope C3\" },\n\t{ DEVMODE_PAPERSIZE_ENVC4, \"Envelope C4\" },\n\t{ DEVMODE_PAPERSIZE_ENVC6, \"Envelope C6\" },\n\t{ DEVMODE_PAPERSIZE_ENVC65, \"Envelope C65\" },\n\t{ DEVMODE_PAPERSIZE_ENVB4, \"Envelope B4\" },\n\t{ DEVMODE_PAPERSIZE_ENVB5, \"Envelope B5\" },\n\t{ DEVMODE_PAPERSIZE_ENVB6, \"Envelope B6\" },\n\t{ DEVMODE_PAPERSIZE_ENVITALY, \"Envelope (Italy)\" },\n\t{ DEVMODE_PAPERSIZE_ENVMONARCH, \"Envelope (Monarch)\" },\n\t{ DEVMODE_PAPERSIZE_ENVPERSONAL, \"Envelope (Personal)\" },\n\t{ DEVMODE_PAPERSIZE_FANFOLDUS, \"Fanfold (US)\" },\n\t{ DEVMODE_PAPERSIZE_FANFOLDSTDGERMAN, \"Fanfold (Std German)\" },\n\t{ DEVMODE_PAPERSIZE_FANFOLDLGLGERMAN, \"Fanfold (Legal German)\" },\n\t{ DEVMODE_PAPERSIZE_ISOB4, \"B4 (ISO)\" },\n\t{ DEVMODE_PAPERSIZE_JAPANESEPOSTCARD, \"Japanese postcard\" },\n\t{ DEVMODE_PAPERSIZE_9X11, \"9x11\" },\n\t{ DEVMODE_PAPERSIZE_10X11, \"10x11\" },\n\t{ DEVMODE_PAPERSIZE_15X11, \"15x11\" },\n\t{ DEVMODE_PAPERSIZE_ENVINVITE, \"Envelope (Invite)\" },\n\t{ DEVMODE_PAPERSIZE_RESERVED48, \"Reserved (48)\" },\n\t{ DEVMODE_PAPERSIZE_RESERVED49, \"Reserved (49)\" },\n\t{ DEVMODE_PAPERSIZE_LETTEREXTRA, \"Letter (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_LEGALEXTRA, \"Legal (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_TABLOIDEXTRA, \"Tabloid (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_A4EXTRA, \"A4 (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_LETTERTRANS, \"Letter (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_A4TRANS, \"A4 (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_LETTEREXTRATRANS, \"Letter (Extra, Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_APLUS, \"A+\" },\n\t{ DEVMODE_PAPERSIZE_BPLUS, \"B+\" },\n\t{ DEVMODE_PAPERSIZE_LETTERPLUS, \"Letter+\" },\n\t{ DEVMODE_PAPERSIZE_A4PLUS, \"A4+\" },\n\t{ DEVMODE_PAPERSIZE_A5TRANS, \"A5 (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_B5TRANS, \"B5 (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_A3EXTRA, \"A3 (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_A5EXTRA, \"A5 (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_B5EXTRA, \"B5 (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_A2, \"A2\" },\n\t{ DEVMODE_PAPERSIZE_A3TRANS, \"A3 (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_A3EXTRATRANS, \"A3 (Extra, Transverse\" },\n\t{ DEVMODE_PAPERSIZE_DBLJAPANESEPOSTCARD, \"Double Japanese Postcard\" },\n\t{ DEVMODE_PAPERSIZE_A6, \"A6\" },\n\t{ DEVMODE_PAPERSIZE_JENVKAKU2, \"Japanese Envelope (Kaku #2)\" },\n\t{ DEVMODE_PAPERSIZE_JENVKAKU3, \"Japanese Envelope (Kaku #3)\" },\n\t{ DEVMODE_PAPERSIZE_JENVCHOU3, \"Japanese Envelope (Chou #3)\" },\n\t{ DEVMODE_PAPERSIZE_JENVCHOU4, \"Japaneve Envelope (Chou #4)\" },\n\t{ DEVMODE_PAPERSIZE_LETTERROT, \"Letter (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_A3ROT, \"A3 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_A4ROT, \"A4 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_A5ROT, \"A5 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_B4JISROT, \"B4 (JIS, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_B5JISROT, \"B5 (JIS, Rotated)\"},\n\t{ DEVMODE_PAPERSIZE_JAPANESEPOSTCARDROT,\n\t  \"Japanese Postcard (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_DBLJAPANESEPOSTCARDROT82,\n\t  \"Double Japanese Postcard (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_A6ROT, \"A6 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_JENVKAKU2ROT,\n\t  \"Japanese Envelope (Kaku #2, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_JENVKAKU3ROT,\n\t  \"Japanese Envelope (Kaku #3, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_JENVCHOU3ROT,\n\t  \"Japanese Envelope (Chou #3, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_JENVCHOU4ROT,\n\t  \"Japanese Envelope (Chou #4, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_B6JIS, \"B6 (JIS)\" },\n\t{ DEVMODE_PAPERSIZE_B6JISROT, \"B6 (JIS, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_12X11, \"12x11\" },\n\t{ DEVMODE_PAPERSIZE_JENVYOU4, \"Japanese Envelope (You #4)\" },\n\t{ DEVMODE_PAPERSIZE_JENVYOU4ROT,\n\t  \"Japanese Envelope (You #4, Rotated\" },\n\t{ DEVMODE_PAPERSIZE_P16K, \"PRC 16K\" },\n\t{ DEVMODE_PAPERSIZE_P32K, \"PRC 32K\" },\n\t{ DEVMODE_PAPERSIZE_P32KBIG, \"P32K (Big)\" },\n\t{ DEVMODE_PAPERSIZE_PENV1, \"PRC Envelope #1\" },\n\t{ DEVMODE_PAPERSIZE_PENV2, \"PRC Envelope #2\" },\n\t{ DEVMODE_PAPERSIZE_PENV3, \"PRC Envelope #3\" },\n\t{ DEVMODE_PAPERSIZE_PENV4, \"PRC Envelope #4\" },\n\t{ DEVMODE_PAPERSIZE_PENV5, \"PRC Envelope #5\" },\n\t{ DEVMODE_PAPERSIZE_PENV6, \"PRC Envelope #6\" },\n\t{ DEVMODE_PAPERSIZE_PENV7, \"PRC Envelope #7\" },\n\t{ DEVMODE_PAPERSIZE_PENV8, \"PRC Envelope #8\" },\n\t{ DEVMODE_PAPERSIZE_PENV9, \"PRC Envelope #9\" },\n\t{ DEVMODE_PAPERSIZE_PENV10, \"PRC Envelope #10\" },\n\t{ DEVMODE_PAPERSIZE_P16KROT, \"PRC 16K (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_P32KROT, \"PRC 32K (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_P32KBIGROT, \"PRC 32K (Big, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV1ROT, \"PRC Envelope #1 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV2ROT, \"PRC Envelope #2 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV3ROT, \"PRC Envelope #3 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV4ROT, \"PRC Envelope #4 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV5ROT, \"PRC Envelope #5 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV6ROT, \"PRC Envelope #6 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV7ROT, \"PRC Envelope #7 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV8ROT, \"PRC Envelope #8 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV9ROT, \"PRC Envelope #9 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV10ROT, \"PRC Envelope #10 (Rotated)\" },\n\t{ 0, NULL }\n};\nstatic value_string_ext devmode_papersize_vals_ext = VALUE_STRING_EXT_INIT(devmode_papersize_vals);\n\n/* List of observed specversions */\n\nstatic const value_string devmode_specversion_vals[] =\n{\n\t{ 0x0320, \"Observed\" },\n\t{ 0x0400, \"Observed\" },\n\t{ 0x0401, \"Observed\" },\n\t{ 0x040d, \"Observed\" },\n\t{ 0, NULL }\n};\n\n/* Paper sources */\n\nstatic const value_string devmode_papersource_vals[] =\n{\n\t{ DEVMODE_PAPERSOURCE_UPPER, \"Upper\" },\n\t{ DEVMODE_PAPERSOURCE_LOWER, \"Lower\" },\n\t{ DEVMODE_PAPERSOURCE_MIDDLE, \"Middle\" },\n\t{ DEVMODE_PAPERSOURCE_MANUAL, \"Manual\" },\n\t{ DEVMODE_PAPERSOURCE_ENV, \"Envelope\" },\n\t{ DEVMODE_PAPERSOURCE_ENVMANUAL, \"Envelope Manual\" },\n\t{ DEVMODE_PAPERSOURCE_AUTO, \"Auto\" },\n\t{ DEVMODE_PAPERSOURCE_TRACTOR, \"Tractor\" },\n\t{ DEVMODE_PAPERSOURCE_SMALLFMT, \"Small Format\" },\n\t{ DEVMODE_PAPERSOURCE_LARGEFMAT, \"Large Format\" },\n\t{ DEVMODE_PAPERSOURCE_LARGECAP, \"Large Capacity\" },\n\t{ DEVMODE_PAPERSOURCE_CASSETTE, \"Cassette\" },\n\t{ DEVMODE_PAPERSOURCE_FORMSRC, \"Form Source\" },\n\t{ 0, NULL }\n};\nstatic value_string_ext devmode_papersource_vals_ext = VALUE_STRING_EXT_INIT(devmode_papersource_vals);\n\n/* Print quality */\n\nstatic const value_string devmode_printquality_vals[] =\n{\n\t{ DEVMODE_PRINTQUALITY_HIGH, \"High\" },\n\t{ DEVMODE_PRINTQUALITY_MEDIUM, \"Medium\" },\n\t{ DEVMODE_PRINTQUALITY_LOW, \"Low\" },\n\t{ DEVMODE_PRINTQUALITY_DRAFT, \"Draft\" },\n\t{ 0, NULL }\n};\n\n/* Color */\n\nstatic const value_string devmode_colour_vals[] =\n{\n\t{ DEVMODE_COLOUR_COLOUR, \"Colour\" },\n\t{ DEVMODE_COLOUR_MONO, \"Monochrome\" },\n\t{ 0, NULL }\n};\n\n/* TrueType options */\n\nstatic const value_string devmode_ttoption_vals[] =\n{\n\t{ 0, \"Not set\" },\n\t{ DEVMODE_TTOPTION_BITMAP, \"Bitmap\" },\n\t{ DEVMODE_TTOPTION_DOWNLOAD, \"Download\" },\n\t{ DEVMODE_TTOPTION_DOWNLOAD_OUTLINE, \"Download outline\" },\n\t{ DEVMODE_TTOPTION_SUBDEV, \"Substitute device fonts\" },\n\t{ 0, NULL }\n};\n\n/* Collate info */\n\nstatic const value_string devmode_collate_vals[] =\n{\n\t{ DEVMODE_COLLATE_FALSE, \"False\" },\n\t{ DEVMODE_COLLATE_TRUE, \"True\" },\n\t{ 0, NULL }\n};\n\n/* Duplex info */\n\nstatic const value_string devmode_duplex_vals[] =\n{\n\t{ DEVMODE_DUPLEX_SIMPLEX, \"Simplex\" },\n\t{ DEVMODE_DUPLEX_VERT, \"Vertical\" },\n\t{ DEVMODE_DUPLEX_HORIZ, \"Horizontal\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_displayflags_vals[] =\n{\n\t{ 0, \"Colour\" },\n\t{ DEVMODE_DISPLAYFLAGS_GRAYSCALE, \"Grayscale\" },\n\t{ DEVMODE_DISPLAYFLAGS_INTERLACED, \"Interlaced\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_icmmethod_vals[] =\n{\n\t{ DEVMODE_ICMMETHOD_NONE, \"None\" },\n\t{ DEVMODE_ICMMETHOD_SYSTEM, \"System\" },\n\t{ DEVMODE_ICMMETHOD_DRIVER, \"Driver\" },\n\t{ DEVMODE_ICMMETHOD_DEVICE, \"Device\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_icmintent_vals[] =\n{\n\t{ 0, \"Not set\" },\n\t{ DEVMODE_ICMINTENT_SATURATE, \"Saturate\" },\n\t{ DEVMODE_ICMINTENT_CONTRAST, \"Contrast\" },\n\t{ DEVMODE_ICMINTENT_COLORIMETRIC, \"Colorimetric\" },\n\t{ DEVMODE_ICMINTENT_ABS_COLORIMETRIC, \"Absolute colorimetric\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_mediatype_vals[] =\n{\n\t{ 0, \"Not set\" },\n\t{ DEVMODE_MEDIATYPE_STANDARD, \"Standard\" },\n\t{ DEVMODE_MEDIATYPE_TRANSPARENCY, \"Transparency\" },\n\t{ DEVMODE_MEDIATYPE_GLOSSY, \"Glossy\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_dithertype_vals[] =\n{\n\t{ 0, \"Not set\" },\n\t{ DEVMODE_DITHERTYPE_NONE, \"None\" },\n\t{ DEVMODE_DITHERTYPE_COARSE, \"Coarse\" },\n\t{ DEVMODE_DITHERTYPE_LINE, \"Line\" },\n\t{ DEVMODE_DITHERTYPE_LINEART, \"Line art\" },\n\t{ DEVMODE_DITHERTYPE_ERRORDIFFUSION, \"Error diffusion\" },\n\t{ DEVMODE_DITHERTYPE_RESERVED6, \"Reserved 6\" },\n\t{ DEVMODE_DITHERTYPE_RESERVED7, \"Reserved 7\" },\n\t{ DEVMODE_DITHERTYPE_GRAYSCALE, \"Grayscale\" },\n\t{ 0, NULL }\n};\n\nstatic gint ett_DEVMODE_fields = -1;\n\nstatic int\ndissect_DEVMODE_fields(tvbuff_t *tvb, gint offset, packet_info *pinfo,\n\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_, guint32 *pdata)\n{\n\tguint32 fields;\n\tproto_item *hidden_item;\n\n\tstatic const int * hf_fields[] = {\n\t\t&hf_devmode_fields_orientation,\n\t\t&hf_devmode_fields_papersize,\n\t\t&hf_devmode_fields_paperlength,\n\t\t&hf_devmode_fields_paperwidth,\n\t\t&hf_devmode_fields_scale,\n\t\t&hf_devmode_fields_position,\n\t\t&hf_devmode_fields_nup,\n\t\t&hf_devmode_fields_copies,\n\t\t&hf_devmode_fields_defaultsource,\n\t\t&hf_devmode_fields_printquality,\n\t\t&hf_devmode_fields_color,\n\t\t&hf_devmode_fields_duplex,\n\t\t&hf_devmode_fields_yresolution,\n\t\t&hf_devmode_fields_ttoption,\n\t\t&hf_devmode_fields_collate,\n\t\t&hf_devmode_fields_formname,\n\t\t&hf_devmode_fields_logpixels,\n\t\t&hf_devmode_fields_bitsperpel,\n\t\t&hf_devmode_fields_pelswidth,\n\t\t&hf_devmode_fields_pelsheight,\n\t\t&hf_devmode_fields_displayflags,\n\t\t&hf_devmode_fields_displayfrequency,\n\t\t&hf_devmode_fields_icmmethod,\n\t\t&hf_devmode_fields_icmintent,\n\t\t&hf_devmode_fields_mediatype,\n\t\t&hf_devmode_fields_dithertype,\n\t\t&hf_devmode_fields_panningwidth,\n\t\t&hf_devmode_fields_panningheight,\n\t\tNULL\n\t};\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_devmode, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &fields);\n\n\tproto_tree_add_bitmask_value_with_flags(tree, tvb, offset - 4, hf_devmode_fields,\n\t\t\t\t\tett_DEVMODE_fields, hf_fields, fields, BMT_NO_APPEND);\n\n\tif (pdata)\n\t\t*pdata = fields;\n\n\treturn offset;\n}\n\nstatic gint ett_DEVMODE = -1;\n\nstatic int\ndissect_DEVMODE(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint16 driver_extra;\n\tgint16 print_quality;\n\tguint32 fields;\n\tint struct_start = offset;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_DEVMODE, &item, \"Devicemode\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_devmode_size,\n\t\tNULL);\n\n\t/* The device name is stored in a 32-wchar buffer */\n\n\tdissect_spoolss_uint16uni(tvb, offset, pinfo, subtree, drep, NULL, hf_devmode_devicename);\n\toffset += 64;\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_spec_version, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_driver_version, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_size2, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_driver_extra_len, &driver_extra);\n\n\toffset = dissect_DEVMODE_fields(\n\t\ttvb, offset, pinfo, subtree, di, drep, &fields);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_orientation, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_paper_size, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_paper_length, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_paper_width, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_scale, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_copies, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_default_source, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_devmode_print_quality, &print_quality);\n\n\tif (print_quality < 0)\n\t\tproto_tree_add_item(\n\t\t\tsubtree, hf_devmode_print_quality, tvb,\n\t\t\toffset - 2, 2, DREP_ENC_INTEGER(drep));\n\telse\n\t\tproto_tree_add_uint_format_value(\n\t\t\tsubtree, hf_devmode_print_quality, tvb, offset - 4, 4,\n\t\t\tprint_quality, \"%d dpi\", print_quality);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_color, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_duplex, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_y_resolution, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_tt_option, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_collate, NULL);\n\n\tdissect_spoolss_uint16uni(tvb, offset, pinfo, subtree, drep, NULL, hf_devmode_form_name);\n\toffset += 64;\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_log_pixels, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_bits_per_pel, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_pels_width, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_pels_height, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_display_flags, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_display_freq, NULL);\n\n\t/* TODO: Some of the remaining fields are optional.  See\n\t   rpc_parse/parse_spoolss.c in the Samba source for details. */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_icm_method, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_icm_intent, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_media_type, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_dither_type, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_reserved1, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_reserved2, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_panning_width, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_panning_height, NULL);\n\n\tif (driver_extra)\n\t\toffset = dissect_ndr_uint8s(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_devmode_driver_extra, driver_extra, NULL);\n\n\tproto_item_set_len(item, offset - struct_start);\n\n\treturn offset;\n}\n\n/*\n * DEVMODE_CTR\n */\n\nstatic gint ett_DEVMODE_CTR = -1;\n\nstatic int\ndissect_DEVMODE_CTR(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 size;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DEVMODE_CTR, NULL, \"Devicemode container\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_devmodectr_size, &size);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\tdissect_DEVMODE, NDR_POINTER_UNIQUE, \"Devicemode\", -1);\n\n\treturn offset;\n}\n\n/*\n * Relative string given by offset into the current buffer.  Note that\n * the offset for subsequent relstrs are against the structure start, not\n * the point where the offset is parsed from.\n */\n\nstatic gint ett_RELSTR = -1;\n\nstatic int\ndissect_spoolss_relstr(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep, int hf_index,\n\t\t       int struct_start, char **data)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint32 relstr_offset, relstr_start, relstr_end;\n\tchar *text;\n\n\t/* Peek ahead to read the string.  We need this for the\n\t   proto_tree_add_string() call so filtering will work. */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset, &relstr_offset);\n\n\trelstr_start = relstr_offset + struct_start;\n\n\tif (relstr_offset) {\n\t\trelstr_end = dissect_spoolss_uint16uni(\n\t\t\ttvb, relstr_start, pinfo, NULL, drep, &text, hf_relative_string);\n\t} else { \t\t\t/* relstr_offset == 0 is a NULL string */\n\t\ttext = g_strdup(\"\");\n\t\trelstr_end = relstr_start;\n\t}\n\n\t/* OK now add the proto item with the string value */\n\n\titem = proto_tree_add_string(tree, hf_index, tvb, relstr_start, relstr_end - relstr_start, text);\n\tsubtree = proto_item_add_subtree(item, ett_RELSTR);\n\n\tdissect_ndr_uint32(\n\t\ttvb, offset - 4, pinfo, subtree, di, drep, hf_offset, NULL);\n\n\tif (relstr_offset)\n\t\tdissect_spoolss_uint16uni(\n\t\t\ttvb, relstr_start, pinfo, subtree, drep, NULL, hf_relative_string);\n\n\tif (data)\n\t\t*data = text;\n\telse\n\t\tg_free(text);\n\n\treturn offset;\n}\n\n/* An array of relative strings.  This is currently just a copy of the\n   dissect_spoolss_relstr() function as I can't find an example driver that\n   has more than one dependent file. */\n\nstatic gint ett_RELSTR_ARRAY = -1;\n\nstatic int\ndissect_spoolss_relstrarray(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep, int hf_index,\n\t\t\t    int struct_start, char **data)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint32 relstr_offset, relstr_start/*, relstr_end, relstr_len*/;\n\tchar *text;\n\n\titem = proto_tree_add_string(tree, hf_index, tvb, offset, 4, \"\");\n\n\tsubtree = proto_item_add_subtree(item, ett_RELSTR_ARRAY);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_offset, &relstr_offset);\n\n\t/* A relative offset of zero is a NULL string */\n\n\trelstr_start = relstr_offset + struct_start;\n\n\tif (relstr_offset)\n\t\t/*relstr_end = */dissect_spoolss_uint16uni(\n\t\t\ttvb, relstr_start, pinfo, subtree, drep, &text, hf_relative_string);\n\telse {\n\t\ttext = g_strdup(\"NULL\");\n\t\t/*relstr_end = offset;*/\n\t}\n\n\t/*relstr_len = relstr_end - relstr_start;*/\n\n\tproto_item_append_text(item, \"%s\", text);\n\n\tif (data)\n\t\t*data = text;\n\telse\n\t\tg_free(text);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_0\n */\n\nstatic int hf_printer_status = -1;\n\nstatic const value_string printer_status_vals[] =\n{\n\t{ PRINTER_STATUS_OK, \"OK\" },\n\t{ PRINTER_STATUS_PAUSED, \"Paused\" },\n\t{ PRINTER_STATUS_ERROR, \"Error\" },\n\t{ PRINTER_STATUS_PENDING_DELETION, \"Pending deletion\" },\n\t{ PRINTER_STATUS_PAPER_JAM, \"Paper jam\" },\n\t{ PRINTER_STATUS_PAPER_OUT, \"Paper out\" },\n\t{ PRINTER_STATUS_MANUAL_FEED, \"Manual feed\" },\n\t{ PRINTER_STATUS_PAPER_PROBLEM, \"Paper problem\" },\n\t{ PRINTER_STATUS_OFFLINE, \"Offline\" },\n\t{ PRINTER_STATUS_IO_ACTIVE, \"IO active\" },\n\t{ PRINTER_STATUS_BUSY, \"Busy\" },\n\t{ PRINTER_STATUS_PRINTING, \"Printing\" },\n\t{ PRINTER_STATUS_OUTPUT_BIN_FULL, \"Output bin full\" },\n\t{ PRINTER_STATUS_NOT_AVAILABLE, \"Not available\" },\n\t{ PRINTER_STATUS_WAITING, \"Waiting\" },\n\t{ PRINTER_STATUS_PROCESSING, \"Processing\" },\n\t{ PRINTER_STATUS_INITIALIZING, \"Initialising\" },\n\t{ PRINTER_STATUS_WARMING_UP, \"Warming up\" },\n\t{ PRINTER_STATUS_TONER_LOW, \"Toner low\" },\n\t{ PRINTER_STATUS_NO_TONER, \"No toner\" },\n\t{ PRINTER_STATUS_PAGE_PUNT, \"Page punt\" },\n\t{ PRINTER_STATUS_USER_INTERVENTION, \"User intervention\" },\n\t{ PRINTER_STATUS_OUT_OF_MEMORY, \"Out of memory\" },\n\t{ PRINTER_STATUS_DOOR_OPEN, \"Door open\" },\n\t{ PRINTER_STATUS_SERVER_UNKNOWN, \"Server unknown\" },\n\t{ PRINTER_STATUS_POWER_SAVE, \"Power save\" },\n\t{ 0, NULL }\n};\nstatic value_string_ext printer_status_vals_ext = VALUE_STRING_EXT_INIT(printer_status_vals);\n\nstatic gint ett_PRINTER_INFO_0 = -1;\n\nstatic int\ndissect_PRINTER_INFO_0(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_servername,\n\t\t0, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_cjobs, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_total_jobs,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_total_bytes,\n\t\tNULL);\n\n\toffset = dissect_SYSTEM_TIME(\n\t\ttvb, offset, pinfo, tree, di, drep, \"Unknown time\", TRUE, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_global_counter,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_total_pages,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_major_version,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_build_version,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk7, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk8, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk9, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_session_ctr,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32( tvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_unk11, NULL);\n\n\toffset = dissect_ndr_uint32( tvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_printer_errors, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk13, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk14, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk15, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk16, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_changeid, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk18, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_status, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk20, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_c_setprinter,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk22, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk23, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk24, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk25, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk26, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk27, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk28, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk29, NULL);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_1\n */\n\nstatic gint ett_PRINTER_INFO_1 = -1;\n\nstatic int\ndissect_PRINTER_INFO_1(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_flags, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerdesc,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printercomment,\n\t\t0, NULL);\n\n\treturn offset;\n}\n\n/* Job status */\n\nstatic const true_false_string tfs_job_status_paused = {\n\t\"Job is paused\",\n\t\"Job is not paused\"\n};\n\nstatic const true_false_string tfs_job_status_error = {\n\t\"Job has an error\",\n\t\"Job is OK\"\n};\n\nstatic const true_false_string tfs_job_status_deleting = {\n\t\"Job is being deleted\",\n\t\"Job is not being deleted\"\n};\n\nstatic const true_false_string tfs_job_status_spooling = {\n\t\"Job is being spooled\",\n\t\"Job is not being spooled\"\n};\n\nstatic const true_false_string tfs_job_status_printing = {\n\t\"Job is being printed\",\n\t\"Job is not being printed\"\n};\n\nstatic const true_false_string tfs_job_status_offline = {\n\t\"Job is offline\",\n\t\"Job is not offline\"\n};\n\nstatic const true_false_string tfs_job_status_paperout = {\n\t\"Job is out of paper\",\n\t\"Job is not out of paper\"\n};\n\nstatic const true_false_string tfs_job_status_printed = {\n\t\"Job has completed printing\",\n\t\"Job has not completed printing\"\n};\n\nstatic const true_false_string tfs_job_status_deleted = {\n\t\"Job has been deleted\",\n\t\"Job has not been deleted\"\n};\n\nstatic const true_false_string tfs_job_status_blocked = {\n\t\"Job has been blocked\",\n\t\"Job has not been blocked\"\n};\n\nstatic const true_false_string tfs_job_status_user_intervention = {\n\t\"User intervention required\",\n\t\"User intervention not required\"\n};\n\nstatic gint ett_job_status = -1;\n\nstatic int\ndissect_job_status(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 status;\n\tstatic const int * hf_status[] = {\n\t\t&hf_job_status_user_intervention,\n\t\t&hf_job_status_blocked,\n\t\t&hf_job_status_deleted,\n\t\t&hf_job_status_printed,\n\t\t&hf_job_status_paperout,\n\t\t&hf_job_status_offline,\n\t\t&hf_job_status_printing,\n\t\t&hf_job_status_spooling,\n\t\t&hf_job_status_deleting,\n\t\t&hf_job_status_error,\n\t\t&hf_job_status_paused,\n\t\tNULL\n\t};\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &status);\n\n\tproto_tree_add_bitmask_value_with_flags(tree, tvb, offset - 4, hf_job_status,\n\t\t\t\t\tett_job_status, hf_status, status, BMT_NO_APPEND);\n\n\treturn offset;\n}\n\n/* Printer attributes */\n\nstatic gint ett_printer_attributes = -1;\n\nstatic int hf_printer_attributes = -1;\nstatic int hf_printer_attributes_queued = -1;\nstatic int hf_printer_attributes_direct = -1;\nstatic int hf_printer_attributes_default = -1;\nstatic int hf_printer_attributes_shared = -1;\nstatic int hf_printer_attributes_network = -1;\nstatic int hf_printer_attributes_hidden = -1;\nstatic int hf_printer_attributes_local = -1;\nstatic int hf_printer_attributes_enable_devq = -1;\nstatic int hf_printer_attributes_keep_printed_jobs = -1;\nstatic int hf_printer_attributes_do_complete_first = -1;\nstatic int hf_printer_attributes_work_offline = -1;\nstatic int hf_printer_attributes_enable_bidi = -1;\nstatic int hf_printer_attributes_raw_only = -1;\nstatic int hf_printer_attributes_published = -1;\n\nstatic const true_false_string tfs_printer_attributes_queued = {\n\t\"Printer starts printing after last page spooled\",\n\t\"Printer starts printing while spooling\"\n};\n\nstatic const true_false_string tfs_printer_attributes_direct = {\n\t\"Jobs sent directly to printer\",\n\t\"Jobs are spooled to printer before printing\"\n};\n\nstatic const true_false_string tfs_printer_attributes_default = {\n\t\"Printer is the default printer\",\n\t\"Printer is not the default printer\"\n};\n\nstatic const true_false_string tfs_printer_attributes_shared = {\n\t\"Printer is shared\",\n\t\"Printer is not shared\"\n};\n\nstatic const true_false_string tfs_printer_attributes_network = {\n\t\"Printer is a network printer connection\",\n\t\"Printer is not a network printer connection\"\n};\n\nstatic const true_false_string tfs_printer_attributes_hidden = {\n\t\"Reserved\",\n\t\"Reserved\"\n};\n\nstatic const true_false_string tfs_printer_attributes_local = {\n\t\"Printer is a local printer\",\n\t\"Printer is not a local printer\"\n};\n\nstatic const true_false_string tfs_printer_attributes_enable_devq = {\n\t\"Call DevQueryPrint\",\n\t\"Do not call DevQueryPrint\"\n};\n\nstatic const true_false_string tfs_printer_attributes_keep_printed_jobs = {\n\t\"Jobs are kept after they are printed\",\n\t\"Jobs are deleted after printing\"\n};\n\nstatic const true_false_string tfs_printer_attributes_do_complete_first = {\n\t\"Jobs that have completed spooling are scheduled before still spooling jobs\",\n\t\"Jobs are scheduled in the order they start spooling\"\n};\n\nstatic const true_false_string tfs_printer_attributes_work_offline = {\n\t\"The printer is currently connected\",\n\t\"The printer is currently not connected\"\n};\n\nstatic const true_false_string tfs_printer_attributes_enable_bidi = {\n\t\"Bidirectional communications are supported\",\n\t\"Bidirectional communications are not supported\"\n};\n\nstatic const true_false_string tfs_printer_attributes_raw_only = {\n\t\"Only raw data type print jobs can be spooled\",\n\t\"All data type print jobs can be spooled\"\n};\n\nstatic const true_false_string tfs_printer_attributes_published = {\n\t\"Printer is published in the directory\",\n\t\"Printer is not published in the directory\"\n};\n\nstatic int\ndissect_printer_attributes(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 attributes;\n\tstatic const int * hf_attributes[] = {\n\t\t&hf_printer_attributes_published,\n\t\t&hf_printer_attributes_raw_only,\n\t\t&hf_printer_attributes_enable_bidi,\n\t\t&hf_printer_attributes_work_offline,\n\t\t&hf_printer_attributes_do_complete_first,\n\t\t&hf_printer_attributes_keep_printed_jobs,\n\t\t&hf_printer_attributes_enable_devq,\n\t\t&hf_printer_attributes_local,\n\t\t&hf_printer_attributes_hidden,\n\t\t&hf_printer_attributes_network,\n\t\t&hf_printer_attributes_shared,\n\t\t&hf_printer_attributes_default,\n\t\t&hf_printer_attributes_direct,\n\t\t&hf_printer_attributes_queued,\n\t\tNULL\n\t};\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &attributes);\n\n\tproto_tree_add_bitmask_value_with_flags(tree, tvb, offset - 4, hf_printer_attributes,\n\t\t\t\t\tett_printer_attributes, hf_attributes, attributes, BMT_NO_APPEND);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_2\n */\n\nstatic gint ett_PRINTER_INFO_2 = -1;\n\nstatic int\ndissect_PRINTER_INFO_2(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\tguint32 devmode_offset, secdesc_offset;\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_servername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_sharename,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_portname,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_drivername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printercomment,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerlocation,\n\t\t0, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset,\n\t\t&devmode_offset);\n\n\tdissect_DEVMODE(tvb, devmode_offset - 4, pinfo, tree, di, drep);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_sepfile,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printprocessor,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_datatype,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_parameters,\n\t\t0, NULL);\n\n\t/*\n\t * XXX - what *is* the length of this security descriptor?\n\t * \"prs_PRINTER_INFO_2()\" is passed to \"defer_ptr()\", but\n\t * \"defer_ptr\" takes, as an argument, a function with a\n\t * different calling sequence from \"prs_PRINTER_INFO_2()\",\n\t * lacking the \"len\" argument, so that won't work.\n\t */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset,\n\t\t&secdesc_offset);\n\n\tdissect_nt_sec_desc(\n\t\ttvb, secdesc_offset, pinfo, tree, drep,\n\t\tFALSE, -1,\n\t\t&spoolss_printer_access_mask_info);\n\n\toffset = dissect_printer_attributes(tvb, offset, pinfo, tree, di, drep);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_printer_priority,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_printer_default_priority, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_start_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_end_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_status, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_printer_jobs,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_printer_averageppm, NULL);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_3\n */\n\nstatic gint ett_PRINTER_INFO_3 = -1;\n\nstatic int\ndissect_PRINTER_INFO_3(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_flags, NULL);\n\n\toffset = dissect_nt_sec_desc(\n\t\ttvb, offset, pinfo, tree, drep,\n\t\tFALSE, -1,\n\t\t&spoolss_printer_access_mask_info);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_7\n */\n\nstatic gint ett_PRINTER_INFO_7 = -1;\n\nstatic const value_string getprinter_action_vals[] = {\n\t{ DS_PUBLISH, \"Publish\" },\n\t{ DS_UNPUBLISH, \"Unpublish\" },\n\t{ DS_UPDATE, \"Update\" },\n\n\t/* Not sure what the constant values are here */\n\n/*\t{ DS_PENDING, \"Pending\" }, */\n/*\t{ DS_REPUBLISH, \"Republish\" }, */\n\n\t{ 0, NULL }\n};\n\nstatic int\ndissect_PRINTER_INFO_7(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_guid,\n\t\t0, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_action, NULL);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_DATATYPE structure\n */\n\nstatic gint ett_PRINTER_DATATYPE = -1;\n\nstatic int\ndissect_PRINTER_DATATYPE(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep _U_)\n{\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_datatype, TRUE, NULL);\n\n\treturn offset;\n}\n\n/*\n * USER_LEVEL_1 structure\n */\n\nstatic gint ett_USER_LEVEL_1 = -1;\n\nstatic int hf_userlevel_size = -1;\nstatic int hf_userlevel_client = -1;\nstatic int hf_userlevel_user = -1;\nstatic int hf_userlevel_build = -1;\nstatic int hf_userlevel_major = -1;\nstatic int hf_userlevel_minor = -1;\nstatic int hf_userlevel_processor = -1;\n\nstatic int\ndissect_USER_LEVEL_1(tvbuff_t *tvb, int offset,\n\t\t\t\tpacket_info *pinfo, proto_tree *tree,\n\t\t\t\tdcerpc_info *di, guint8 *drep)\n{\n\tguint32 level;\n\n\t/* Guy has pointed out that this dissection looks wrong.  In\n\t   the wireshark output for a USER_LEVEL_1 it looks like the\n\t   info level and container pointer are transposed.  I'm not\n\t   even sure this structure is a container. */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_size, NULL);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Client\", hf_userlevel_client, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"User\", hf_userlevel_user, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_build, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_major, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_minor, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_processor, NULL);\n\n\treturn offset;\n}\n\n/*\n * USER_LEVEL_CTR structure\n */\n\nstatic gint ett_USER_LEVEL_CTR = -1;\n\nstatic int\ndissect_USER_LEVEL_CTR(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tproto_item *item;\n\tguint32 level;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_USER_LEVEL_CTR, &item, \"User level container\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_level, &level);\n\n\tswitch(level) {\n\tcase 1:\n\t\toffset = dissect_ndr_pointer(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\tdissect_USER_LEVEL_1, NDR_POINTER_UNIQUE,\n\t\t\t\"User level 1\", -1);\n\t\tbreak;\n\tdefault:\n\t\texpert_add_info_format(pinfo, item, &ei_level, \"Info level %d not decoded\", level);\n\t\tbreak;\n\t}\n\n\treturn offset;\n}\n\n/*\n * SpoolssOpenPrinterEx\n */\n\nstatic int\nSpoolssOpenPrinterEx_q(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *name;\n\n\t/* Parse packet */\n\n\tdcv->private_data=NULL;\n\toffset = dissect_ndr_pointer_cb(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_ndr_wchar_cvstring, NDR_POINTER_UNIQUE,\n\t\t\"Printer name\", hf_printername, cb_wstr_postprocess,\n\t\tGINT_TO_POINTER(CB_STR_COL_INFO | CB_STR_SAVE | 1));\n\tname = (char *)dcv->private_data;\n\n\t/* OpenPrinterEx() stores the key/value in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tdcv->se_data = wmem_strdup_printf(wmem_file_scope(),\n\t\t\t\t\"%s\", name?name:\"\");\n\t\t}\n\t}\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_PRINTER_DATATYPE, NDR_POINTER_UNIQUE,\n\t\t\"Printer datatype\", -1);\n\n\toffset = dissect_DEVMODE_CTR(tvb, offset, pinfo, tree, di, drep);\n\n\tname=(char *)dcv->se_data;\n\tif (name) {\n\t\tif (name[0] == '\\\\' && name[1] == '\\\\')\n\t\t\tname += 2;\n\n\t\t/* Determine if we are opening a printer or a print server */\n\n\t\tif (strchr(name, '\\\\'))\n\t\t\toffset = dissect_nt_access_mask(\n\t\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\t\thf_access_required,\n\t\t\t\t&spoolss_printer_access_mask_info, NULL);\n\t\telse\n\t\t\toffset = dissect_nt_access_mask(\n\t\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\t\thf_access_required,\n\t\t\t\t&spoolss_printserver_access_mask_info, NULL);\n\t} else {\n\n\t\t/* We can't decide what type of object being opened */\n\n\t\toffset = dissect_nt_access_mask(\n\t\t\ttvb, offset, pinfo, tree, di, drep, hf_access_required,\n\t\t\tNULL, NULL);\n\t}\n\n\toffset = dissect_USER_LEVEL_CTR(tvb, offset, pinfo, tree, di, drep);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssOpenPrinterEx_r(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\te_ctx_hnd policy_hnd;\n\tproto_item *hnd_item;\n\tguint32 status;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, &hnd_item,\n\t\tTRUE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, &status);\n\n\tif( status == 0 ){\n\t\tconst char *pol_name;\n\n\t\tif (dcv->se_data){\n\t\t\tpol_name = wmem_strdup_printf(wmem_packet_scope(),\n\t\t\t\t\"OpenPrinterEx(%s)\", (char *)dcv->se_data);\n\t\t} else {\n\t\t\tpol_name = \"Unknown OpenPrinterEx() handle\";\n\t\t}\n\t\tif(!pinfo->fd->flags.visited){\n\t\t\tdcerpc_store_polhnd_name(&policy_hnd, pinfo, pol_name);\n\t\t}\n\n\t\tif(hnd_item)\n\t\t\tproto_item_append_text(hnd_item, \": %s\", pol_name);\n\t}\n\n\treturn offset;\n}\n\nstatic const value_string printer_notify_option_data_vals[] = {\n\t{ PRINTER_NOTIFY_SERVER_NAME, \"Server name\" },\n\t{ PRINTER_NOTIFY_PRINTER_NAME, \"Printer name\" },\n\t{ PRINTER_NOTIFY_SHARE_NAME, \"Share name\" },\n\t{ PRINTER_NOTIFY_PORT_NAME, \"Port name\" },\n\t{ PRINTER_NOTIFY_DRIVER_NAME, \"Driver name\" },\n\t{ PRINTER_NOTIFY_COMMENT, \"Comment\" },\n\t{ PRINTER_NOTIFY_LOCATION, \"Location\" },\n\t{ PRINTER_NOTIFY_DEVMODE, \"Devmode\" },\n\t{ PRINTER_NOTIFY_SEPFILE, \"Sepfile\" },\n\t{ PRINTER_NOTIFY_PRINT_PROCESSOR, \"Print processor\" },\n\t{ PRINTER_NOTIFY_PARAMETERS, \"Parameters\" },\n\t{ PRINTER_NOTIFY_DATATYPE, \"Datatype\" },\n\t{ PRINTER_NOTIFY_SECURITY_DESCRIPTOR, \"Security descriptor\" },\n\t{ PRINTER_NOTIFY_ATTRIBUTES, \"Attributes\" },\n\t{ PRINTER_NOTIFY_PRIORITY, \"Priority\" },\n\t{ PRINTER_NOTIFY_DEFAULT_PRIORITY, \"Default priority\" },\n\t{ PRINTER_NOTIFY_START_TIME, \"Start time\" },\n\t{ PRINTER_NOTIFY_UNTIL_TIME, \"Until time\" },\n\t{ PRINTER_NOTIFY_STATUS, \"Status\" },\n\t{ PRINTER_NOTIFY_STATUS_STRING, \"Status string\" },\n\t{ PRINTER_NOTIFY_CJOBS, \"Cjobs\" },\n\t{ PRINTER_NOTIFY_AVERAGE_PPM, \"Average PPM\" },\n\t{ PRINTER_NOTIFY_TOTAL_PAGES, \"Total pages\" },\n\t{ PRINTER_NOTIFY_PAGES_PRINTED, \"Pages printed\" },\n\t{ PRINTER_NOTIFY_TOTAL_BYTES, \"Total bytes\" },\n\t{ PRINTER_NOTIFY_BYTES_PRINTED, \"Bytes printed\" },\n\t{ 0, NULL}\n};\nstatic value_string_ext printer_notify_option_data_vals_ext = VALUE_STRING_EXT_INIT(printer_notify_option_data_vals);\n\nstatic const value_string job_notify_option_data_vals[] = {\n\t{ JOB_NOTIFY_PRINTER_NAME, \"Printer name\" },\n\t{ JOB_NOTIFY_MACHINE_NAME, \"Machine name\" },\n\t{ JOB_NOTIFY_PORT_NAME, \"Port name\" },\n\t{ JOB_NOTIFY_USER_NAME, \"User name\" },\n\t{ JOB_NOTIFY_NOTIFY_NAME, \"Notify name\" },\n\t{ JOB_NOTIFY_DATATYPE, \"Data type\" },\n\t{ JOB_NOTIFY_PRINT_PROCESSOR, \"Print processor\" },\n\t{ JOB_NOTIFY_PARAMETERS, \"Parameters\" },\n\t{ JOB_NOTIFY_DRIVER_NAME, \"Driver name\" },\n\t{ JOB_NOTIFY_DEVMODE, \"Devmode\" },\n\t{ JOB_NOTIFY_STATUS, \"Status\" },\n\t{ JOB_NOTIFY_STATUS_STRING, \"Status string\" },\n\t{ JOB_NOTIFY_SECURITY_DESCRIPTOR, \"Security descriptor\" },\n\t{ JOB_NOTIFY_DOCUMENT, \"Document\" },\n\t{ JOB_NOTIFY_PRIORITY, \"Priority\" },\n\t{ JOB_NOTIFY_POSITION, \"Position\" },\n\t{ JOB_NOTIFY_SUBMITTED, \"Submitted\" },\n\t{ JOB_NOTIFY_START_TIME, \"Start time\" },\n\t{ JOB_NOTIFY_UNTIL_TIME, \"Until time\" },\n\t{ JOB_NOTIFY_TIME, \"Time\" },\n\t{ JOB_NOTIFY_TOTAL_PAGES, \"Total pages\" },\n\t{ JOB_NOTIFY_PAGES_PRINTED, \"Pages printed\" },\n\t{ JOB_NOTIFY_TOTAL_BYTES, \"Total bytes\" },\n\t{ JOB_NOTIFY_BYTES_PRINTED, \"Bytes printed\" },\n\t{ 0, NULL}\n};\nstatic value_string_ext job_notify_option_data_vals_ext = VALUE_STRING_EXT_INIT(job_notify_option_data_vals);\n\nstatic int\ndissect_notify_field(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep, guint16 type,\n\t\t     guint16 *data)\n{\n\tguint16 field;\n\tconst char *str;\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_notify_field, &field);\n\n\tswitch(type) {\n\tcase PRINTER_NOTIFY_TYPE:\n\t\tstr = val_to_str_ext_const(field, &printer_notify_option_data_vals_ext,\n\t\t\t\t \"Unknown\");\n\t\tbreak;\n\tcase JOB_NOTIFY_TYPE:\n\t\tstr = val_to_str_ext_const(field, &job_notify_option_data_vals_ext,\n\t\t\t\t \"Unknown\");\n\t\tbreak;\n\tdefault:\n\t\tstr = \"Unknown notify type\";\n\t\tbreak;\n\t}\n\n\tproto_tree_add_uint_format_value(tree, hf_notify_field, tvb, offset - 2, 2, field, \"%s (%d)\", str, field);\n\n\tif (data)\n\t\t*data = field;\n\n\treturn offset;\n}\n\nstatic int\ndissect_NOTIFY_OPTION_DATA(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 count, i;\n\tguint16 type;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_notify_option_data_count, &count);\n\n\ttype = GPOINTER_TO_INT(dcv->private_data);\n\n\tfor (i = 0; i < count; i++)\n\t\toffset = dissect_notify_field(\n\t\t\ttvb, offset, pinfo, tree, di, drep, type, NULL);\n\n\treturn offset;\n}\n\nstatic const value_string printer_notify_types[] =\n{\n\t{ PRINTER_NOTIFY_TYPE, \"Printer notify\" },\n\t{ JOB_NOTIFY_TYPE, \"Job notify\" },\n\t{ 0, NULL }\n};\n\nstatic const\nchar *notify_plural(int count)\n{\n\tif (count == 1)\n\t\treturn \"notification\";\n\n\treturn \"notifies\";\n}\n\nstatic gint ett_NOTIFY_OPTION = -1;\n\nstatic int\ndissect_NOTIFY_OPTION(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t      proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint16 type;\n\tguint32 count;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_NOTIFY_OPTION, &item, \"Notify Option\");\n\n\toffset = dissect_ndr_uint16(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_type, &type);\n\n\tproto_item_append_text(\n\t\titem, \": %s\", val_to_str(type, printer_notify_types,\n\t\t\t\t\t \"Unknown (%d)\"));\n\n\toffset = dissect_ndr_uint16(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_reserved1, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_reserved2, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_reserved3, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_count, &count);\n\n\tproto_item_append_text(\n\t\titem, \", %d %s\", count, notify_plural(count));\n\n\tdcv->private_data = GINT_TO_POINTER((int)type);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\tdissect_NOTIFY_OPTION_DATA, NDR_POINTER_UNIQUE,\n\t\t\"Notify Option Data\", -1);\n\n\treturn offset;\n}\n\nstatic int\ndissect_NOTIFY_OPTIONS_ARRAY(tvbuff_t *tvb, int offset,\n\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t     dcerpc_info *di, guint8 *drep)\n{\n\t/* Why is a check for di->conformant_run not required here? */\n\n\toffset = dissect_ndr_ucarray(\n\t\ttvb, offset, pinfo, tree, di, drep, dissect_NOTIFY_OPTION);\n\n\treturn offset;\n}\n\nstatic gint ett_notify_options_flags = -1;\n\nstatic const true_false_string tfs_notify_options_flags_refresh = {\n\t\"Data for all monitored fields is present\",\n\t\"Data for all monitored fields not present\"\n};\n\nstatic int\ndissect_notify_options_flags(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 flags;\n\tstatic const int * hf_flags[] = {\n\t\t&hf_notify_options_flags_refresh,\n\t\tNULL\n\t};\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &flags);\n\n\tproto_tree_add_bitmask_value_with_flags(tree, tvb, offset - 4, hf_notify_options_flags,\n\t\t\t\t\tett_notify_options_flags, hf_flags, flags, BMT_NO_APPEND);\n\n\treturn offset;\n}\n\nstatic int\ndissect_NOTIFY_OPTIONS_ARRAY_CTR(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_options_version, NULL);\n\n\toffset = dissect_notify_options_flags(tvb, offset, pinfo, tree, di, drep);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_options_count, NULL);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_OPTIONS_ARRAY, NDR_POINTER_UNIQUE,\n\t\t\"Notify Options Array\", -1);\n\n\treturn offset;\n}\n\n/*\n * SpoolssRFFPCNEX\n */\n\nstatic gint ett_rffpcnex_flags = -1;\n\nstatic int hf_rffpcnex_flags = -1;\nstatic int hf_rffpcnex_options = -1;\n\nstatic int hf_rffpcnex_flags_add_printer = -1;\nstatic int hf_rffpcnex_flags_set_printer = -1;\nstatic int hf_rffpcnex_flags_delete_printer = -1;\nstatic int hf_rffpcnex_flags_failed_printer_connection = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_printer = {\n\t\"Notify on add printer\",\n\t\"Don't notify on add printer\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_set_printer = {\n\t\"Notify on set printer\",\n\t\"Don't notify on set printer\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_printer = {\n\t\"Notify on delete printer\",\n\t\"Don't notify on delete printer\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_failed_connection_printer = {\n\t\"Notify on failed printer connection\",\n\t\"Don't notify on failed printer connection\"\n};\n\nstatic int hf_rffpcnex_flags_add_job = -1;\nstatic int hf_rffpcnex_flags_set_job = -1;\nstatic int hf_rffpcnex_flags_delete_job = -1;\nstatic int hf_rffpcnex_flags_write_job = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_job = {\n\t\"Notify on add job\",\n\t\"Don't notify on add job\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_set_job = {\n\t\"Notify on set job\",\n\t\"Don't notify on set job\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_job = {\n\t\"Notify on delete job\",\n\t\"Don't notify on delete job\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_write_job = {\n\t\"Notify on writejob\",\n\t\"Don't notify on write job\"\n};\n\nstatic int hf_rffpcnex_flags_add_form = -1;\nstatic int hf_rffpcnex_flags_set_form = -1;\nstatic int hf_rffpcnex_flags_delete_form = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_form = {\n\t\"Notify on add form\",\n\t\"Don't notify on add form\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_set_form = {\n\t\"Notify on set form\",\n\t\"Don't notify on set form\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_form = {\n\t\"Notify on delete form\",\n\t\"Don't notify on delete form\"\n};\n\nstatic int hf_rffpcnex_flags_add_port = -1;\nstatic int hf_rffpcnex_flags_configure_port = -1;\nstatic int hf_rffpcnex_flags_delete_port = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_port = {\n\t\"Notify on add port\",\n\t\"Don't notify on add port\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_configure_port = {\n\t\"Notify on configure port\",\n\t\"Don't notify on configure port\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_port = {\n\t\"Notify on delete port\",\n\t\"Don't notify on delete port\"\n};\n\nstatic int hf_rffpcnex_flags_add_print_processor = -1;\nstatic int hf_rffpcnex_flags_delete_print_processor = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_print_processor = {\n\t\"Notify on add driver\",\n\t\"Don't notify on add driver\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_print_processor = {\n\t\"Notify on add driver\",\n\t\"Don't notify on add driver\"\n};\n\nstatic int hf_rffpcnex_flags_add_driver = -1;\nstatic int hf_rffpcnex_flags_set_driver = -1;\nstatic int hf_rffpcnex_flags_delete_driver = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_driver = {\n\t\"Notify on add driver\",\n\t\"Don't notify on add driver\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_set_driver = {\n\t\"Notify on set driver\",\n\t\"Don't notify on set driver\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_driver = {\n\t\"Notify on delete driver\",\n\t\"Don't notify on delete driver\"\n};\n\nstatic int hf_rffpcnex_flags_timeout = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_timeout = {\n\t\"Notify on timeout\",\n\t\"Don't notify on timeout\"\n};\n\nstatic int\nSpoolssRFFPCNEX_q(tvbuff_t *tvb, int offset,\n\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 flags;\n\tstatic const int * hf_flags[] = {\n\t\t&hf_rffpcnex_flags_timeout,\n\t\t&hf_rffpcnex_flags_delete_driver,\n\t\t&hf_rffpcnex_flags_set_driver,\n\t\t&hf_rffpcnex_flags_add_driver,\n\t\t&hf_rffpcnex_flags_delete_print_processor,\n\t\t&hf_rffpcnex_flags_add_print_processor,\n\t\t&hf_rffpcnex_flags_delete_port,\n\t\t&hf_rffpcnex_flags_configure_port,\n\t\t&hf_rffpcnex_flags_add_port,\n\t\t&hf_rffpcnex_flags_delete_form,\n\t\t&hf_rffpcnex_flags_set_form,\n\t\t&hf_rffpcnex_flags_add_form,\n\t\t&hf_rffpcnex_flags_write_job,\n\t\t&hf_rffpcnex_flags_delete_job,\n\t\t&hf_rffpcnex_flags_set_job,\n\t\t&hf_rffpcnex_flags_add_job,\n\t\t&hf_rffpcnex_flags_failed_printer_connection,\n\t\t&hf_rffpcnex_flags_delete_printer,\n\t\t&hf_rffpcnex_flags_set_printer,\n\t\t&hf_rffpcnex_flags_add_printer,\n\t\tNULL\n\t};\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &flags);\n\n\tproto_tree_add_bitmask_value(tree, tvb, offset - 4, hf_rffpcnex_flags,\n\t\t\t\t\tett_rffpcnex_flags, hf_flags, flags);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_rffpcnex_options, NULL);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Server\", hf_servername, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerlocal, NULL);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_OPTIONS_ARRAY_CTR, NDR_POINTER_UNIQUE,\n\t\t\"Notify Options Container\", -1);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssRFFPCNEX_r(tvbuff_t *tvb, int offset,\n\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssReplyOpenPrinter\n */\n\nstatic int\nSpoolssReplyOpenPrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 printerlocal;\n\tchar *name;\n\n\t/* Parse packet */\n\tname=NULL;\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_servername, TRUE, &name);\n\t/* ReplyOpenPrinter() stores the printername in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tif(name){\n\t\t\t\tdcv->se_data = wmem_strdup(wmem_file_scope(), name);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerlocal,\n\t\t&printerlocal);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_printerdata_type, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_replyopenprinter_unk0,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_replyopenprinter_unk1,\n\t\tNULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssReplyOpenPrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\te_ctx_hnd policy_hnd;\n\tproto_item *hnd_item;\n\tguint32 status;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, &hnd_item,\n\t\tTRUE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, &status);\n\n\tif( status == 0 ){\n\t\tconst char *pol_name;\n\n\t\tif (dcv->se_data){\n\t\t\tpol_name = wmem_strdup_printf(wmem_packet_scope(),\n\t\t\t\t\"ReplyOpenPrinter(%s)\", (char *)dcv->se_data);\n\t\t} else {\n\t\t\tpol_name = \"Unknown ReplyOpenPrinter() handle\";\n\t\t}\n\t\tif(!pinfo->fd->flags.visited){\n\t\t\tdcerpc_store_polhnd_name(&policy_hnd, pinfo, pol_name);\n\t\t}\n\n\t\tif(hnd_item)\n\t\t\tproto_item_append_text(hnd_item, \": %s\", pol_name);\n\t}\n\n\treturn offset;\n}\n\n/*\n * SpoolssGetPrinter\n */\n\n\nstatic int\nSpoolssGetPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n \t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* GetPrinter() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GINT_TO_POINTER((int)level);\n\t}\n\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic gint ett_PRINTER_INFO = -1;\n\nstatic int\nSpoolssGetPrinter_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tBUFFER buffer;\n\tgint16 level = GPOINTER_TO_INT(dcv->se_data);\n\tproto_item *item = NULL;\n\tproto_tree *subtree = NULL;\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\tif (buffer.tvb) {\n\t\tsubtree = proto_tree_add_subtree_format( buffer.tree, buffer.tvb, 0, -1, ett_PRINTER_INFO, &item, \"Print info level %d\", level);\n\n\t\tswitch(level) {\n\t\tcase 0:\n\t\t\tdissect_PRINTER_INFO_0(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tdissect_PRINTER_INFO_1(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tdissect_PRINTER_INFO_2(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tdissect_PRINTER_INFO_3(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tdissect_PRINTER_INFO_7(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texpert_add_info(pinfo, item, &ei_printer_info_level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SEC_DESC_BUF\n */\n\nstatic gint ett_SEC_DESC_BUF = -1;\n\nstatic int hf_secdescbuf_maxlen = -1;\nstatic int hf_secdescbuf_undoc = -1;\nstatic int hf_secdescbuf_len = -1;\n\nstatic int\ndissect_SEC_DESC_BUF(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 len;\n\n\t/* XXX: I think this is really a array of bytes which can be\n\t   dissected using dissect_ndr_cvstring().  The dissected data\n\t   can be passed to dissect_nt_sec_desc().  The problem is that\n\t   dissect_nt_cvstring() passes back a char * where it really\n\t   should pass back a tvb. */\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_SEC_DESC_BUF, NULL, \"Security descriptor buffer\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_secdescbuf_maxlen, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_secdescbuf_undoc, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_secdescbuf_len, &len);\n\n\tdissect_nt_sec_desc(\n\t\ttvb, offset, pinfo, subtree, drep, TRUE, len,\n\t\t&spoolss_printer_access_mask_info);\n\n\toffset += len;\n\n\treturn offset;\n}\n\n/*\n * SPOOL_PRINTER_INFO_LEVEL\n */\n\nstatic gint ett_SPOOL_PRINTER_INFO_LEVEL = -1;\n\n/* spool printer info */\n\nstatic int hf_spool_printer_info_devmode_ptr = -1;\nstatic int hf_spool_printer_info_secdesc_ptr = -1;\n\nstatic int\ndissect_SPOOL_PRINTER_INFO(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 level;\n\tproto_tree *item;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_SPOOL_PRINTER_INFO_LEVEL, &item, \"Spool printer info level\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_level, &level);\n\n\tswitch(level) {\n\tcase 3: {\n\t\tguint32 devmode_ptr, secdesc_ptr;\n\n\t\t/* I can't seem to get this working with the correct\n\t\t   dissect_ndr_pointer() function so let's cheat and\n\t\t   dissect the pointers by hand. )-: */\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_spool_printer_info_devmode_ptr,\n\t\t\t&devmode_ptr);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_spool_printer_info_secdesc_ptr,\n\t\t\t&secdesc_ptr);\n\n\t\tif (devmode_ptr)\n\t\t\toffset = dissect_DEVMODE_CTR(\n\t\t\t\ttvb, offset, pinfo, subtree, di, drep);\n\n\t\tif (secdesc_ptr)\n\t\t\toffset = dissect_SEC_DESC_BUF(\n\t\t\t\ttvb, offset, pinfo, subtree, di, drep);\n\n\tbreak;\n\t}\n\tcase 2:\n\tdefault:\n\t\texpert_add_info_format(pinfo, item, &ei_spool_printer_info_level, \"Unknown spool printer info level %d\", level);\n\t\tbreak;\n\t}\n\n\treturn offset;\n}\n\n/*\n * SpoolssSetPrinter\n */\n\nstatic int hf_setprinter_cmd = -1;\n\nstatic const value_string setprinter_cmd_vals[] = {\n\t{ SPOOLSS_PRINTER_CONTROL_UNPAUSE, \"Unpause\" },\n\t{ SPOOLSS_PRINTER_CONTROL_PAUSE, \"Pause\" },\n\t{ SPOOLSS_PRINTER_CONTROL_RESUME, \"Resume\" },\n\t{ SPOOLSS_PRINTER_CONTROL_PURGE, \"Purge\" },\n\t{ SPOOLSS_PRINTER_CONTROL_SET_STATUS, \"Set status\" },\n\t{ 0, NULL }\n};\n\nstatic int\nSpoolssSetPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_SPOOL_PRINTER_INFO(\n\t\ttvb, offset, pinfo, tree, di, drep);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_setprinter_cmd, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetPrinter_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * FORM_REL\n */\n\nstatic const value_string form_type_vals[] =\n{\n\t{ SPOOLSS_FORM_USER, \"User\" },\n\t{ SPOOLSS_FORM_BUILTIN, \"Builtin\" },\n\t{ SPOOLSS_FORM_PRINTER, \"Printer\" },\n\t{ 0, NULL }\n};\n\nstatic gint ett_FORM_REL = -1;\n\nstatic int\ndissect_FORM_REL(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep, int struct_start)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint32 flags;\n\tint item_start = offset;\n\tchar *name = NULL;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_FORM_REL, &item, \"Form\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_form_flags, &flags);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_form_name,\n\t\tstruct_start, &name);\n\n\tif (name) {\n\t\tproto_item_append_text(item, \": %s\", name);\n\t\tg_free(name);\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_width, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_height, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_left_margin, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_top_margin, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_horiz_len, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_vert_len, NULL);\n\n\tproto_item_set_len(item, offset - item_start);\n\n\treturn offset;\n}\n\n/*\n * SpoolssEnumForms\n */\n\nstatic int\nSpoolssEnumForms_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t      proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* EnumForms() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumForms_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t      proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tBUFFER buffer;\n\tguint32 level = GPOINTER_TO_UINT(dcv->se_data), i, count;\n\tint buffer_offset;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_enumforms_num, &count);\n\n\t/* Unfortunately this array isn't in NDR format so we can't\n\t   use prs_array().  The other weird thing is the\n\t   struct_start being inside the loop rather than outside.\n\t   Very strange. */\n\n\tbuffer_offset = 0;\n\n\tfor (i = 0; i < count; i++) {\n\t\tint struct_start = buffer_offset;\n\n\t\tbuffer_offset = dissect_FORM_REL(\n\t\t\tbuffer.tvb, buffer_offset, pinfo, buffer.tree, di, drep,\n\t\t\tstruct_start);\n\t}\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssDeletePrinter\n */\n\nstatic int\nSpoolssDeletePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssDeletePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssAddPrinterEx_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\te_ctx_hnd policy_hnd;\n\tproto_item *hnd_item;\n\tguint32 status;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, &hnd_item,\n\t\tTRUE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, &status);\n\n\tif( status == 0 ){\n\t\tconst char *pol_name;\n\n\t\tif (dcv->se_data){\n\t\t\tpol_name = wmem_strdup_printf(wmem_packet_scope(),\n\t\t\t\t\"AddPrinterEx(%s)\", (char *)dcv->se_data);\n\t\t} else {\n\t\t\tpol_name = \"Unknown AddPrinterEx() handle\";\n\t\t}\n\t\tif(!pinfo->fd->flags.visited){\n\t\t\tdcerpc_store_polhnd_name(&policy_hnd, pinfo, pol_name);\n\t\t}\n\n\t\tif(hnd_item)\n\t\t\tproto_item_append_text(hnd_item, \": %s\", pol_name);\n\t}\n\n\treturn offset;\n}\n\n/*\n * SpoolssEnumPrinterData\n */\n\nstatic int hf_enumprinterdata_enumindex = -1;\nstatic int hf_enumprinterdata_value_offered = -1;\nstatic int hf_enumprinterdata_data_offered = -1;\nstatic int hf_enumprinterdata_value_len = -1;\nstatic int hf_enumprinterdata_value_needed = -1;\nstatic int hf_enumprinterdata_data_needed = -1;\n\nstatic int\nSpoolssEnumPrinterData_q(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 ndx;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_enumprinterdata_enumindex, &ndx);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", index %d\", ndx);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_enumprinterdata_value_offered, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_enumprinterdata_data_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumPrinterData_r(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 value_len, type;\n\tchar *value;\n\tproto_item *value_item;\n\tproto_tree *value_subtree;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\tvalue_subtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_printerdata_value, &value_item, \"Value\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, value_subtree, di, drep,\n\t\thf_enumprinterdata_value_len, &value_len);\n\n\tif (value_len) {\n\t\tdissect_spoolss_uint16uni(\n\t\t\ttvb, offset, pinfo, value_subtree, drep, &value, hf_value_name);\n\n\t\toffset += value_len * 2;\n\n\t\tif (value && value[0])\n\t\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", value);\n\n\t\tproto_item_append_text(value_item, \": %s\", value);\n\n\t\thidden_item = proto_tree_add_string(\n\t\t\ttree, hf_printerdata_value, tvb, offset, 0, value);\n\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t\tg_free(value);\n\t}\n\n\tproto_item_set_len(value_item, value_len * 2 + 4);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, value_subtree, di, drep,\n\t\thf_enumprinterdata_value_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerdata_type, &type);\n\n\toffset = dissect_printerdata_data(\n\t\ttvb, offset, pinfo, tree, di, drep, type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_enumprinterdata_data_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssEnumPrinters\n */\n\nstatic gint ett_enumprinters_flags = -1;\n\nstatic int hf_enumprinters_flags = -1;\nstatic int hf_enumprinters_flags_local = -1;\nstatic int hf_enumprinters_flags_name = -1;\nstatic int hf_enumprinters_flags_shared = -1;\nstatic int hf_enumprinters_flags_default = -1;\nstatic int hf_enumprinters_flags_connections = -1;\nstatic int hf_enumprinters_flags_network = -1;\nstatic int hf_enumprinters_flags_remote = -1;\n\nstatic int\nSpoolssEnumPrinters_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 level, flags;\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tstatic const int * hf_flags[] = {\n\t\t&hf_enumprinters_flags_network,\n\t\t&hf_enumprinters_flags_shared,\n\t\t&hf_enumprinters_flags_remote,\n\t\t&hf_enumprinters_flags_name,\n\t\t&hf_enumprinters_flags_connections,\n\t\t&hf_enumprinters_flags_local,\n\t\t&hf_enumprinters_flags_default,\n\t\tNULL\n\t};\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &flags);\n\n\tproto_tree_add_bitmask_value(tree, tvb, offset - 4, hf_enumprinters_flags,\n\t\t\t\t\tett_enumprinters_flags, hf_flags, flags);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tNDR_POINTER_UNIQUE, \"Server name\", hf_servername, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* GetPrinter() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tdcv->se_data = GINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumPrinters_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 num_drivers;\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tgint16 level = GPOINTER_TO_INT(dcv->se_data);\n\tBUFFER buffer;\n\tproto_item *item;\n\tproto_tree *subtree = NULL;\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\tif (buffer.tvb) {\n\t\tsubtree = proto_tree_add_subtree_format( buffer.tree, buffer.tvb, 0, -1, ett_PRINTER_INFO, &item, \"Print info level %d\", level);\n\n\t\tswitch(level) {\n\t\tcase 0:\n\t\t\tdissect_PRINTER_INFO_0(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tdissect_PRINTER_INFO_1(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tdissect_PRINTER_INFO_2(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tdissect_PRINTER_INFO_3(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tdissect_PRINTER_INFO_7(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texpert_add_info(pinfo, item, &ei_printer_info_level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_returned,\n\t\t&num_drivers);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * AddPrinterDriver\n */\nstatic int\nSpoolssAddPrinterDriver_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * FORM_1\n */\n\nstatic gint ett_FORM_1 = -1;\n\nstatic int\ndissect_FORM_1(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t  proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 flags;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_FORM_1, NULL, \"Form level 1\");\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, subtree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Name\", hf_form_name, 0);\n\n\t/* Eek - we need to know whether this pointer was NULL or not.\n\t   Currently there is not any way to do this. */\n\n\tif (tvb_reported_length_remaining(tvb, offset) <= 0)\n\t\tgoto done;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_form_flags, &flags);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_unknown, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_width, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_height, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_left_margin, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_top_margin, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_horiz_len, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_vert_len, NULL);\n\n done:\n\treturn offset;\n}\n\n/*\n * FORM_CTR\n */\n\nstatic gint ett_FORM_CTR = -1;\n\nstatic int\ndissect_FORM_CTR(tvbuff_t *tvb, int offset,\n\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t    dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tproto_item *item;\n\tguint32 level;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_FORM_CTR, &item, \"Form container\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_form_level, &level);\n\n\tswitch(level) {\n\tcase 1:\n\t\toffset = dissect_FORM_1(tvb, offset, pinfo, subtree, di, drep);\n\t\tbreak;\n\n\tdefault:\n\t\texpert_add_info_format(pinfo, item, &ei_form_level, \"Unknown form info level %d\", level);\n\t\tbreak;\n\t}\n\n\treturn offset;\n}\n\n/*\n * AddForm\n */\n\nstatic int\nSpoolssAddForm_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_form_level, &level);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\t/* AddForm() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\toffset = dissect_FORM_CTR(tvb, offset, pinfo, tree, di, drep);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssAddForm_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * DeleteForm\n */\n\nstatic int\nSpoolssDeleteForm_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\tchar *name = NULL;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tsizeof(guint16), hf_form_name, TRUE, &name);\n\n\tif (name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssDeleteForm_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SetForm\n */\n\nstatic int\nSpoolssSetForm_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tchar *name = NULL;\n\tguint32 level;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tsizeof(guint16), hf_form_name, TRUE, &name);\n\n\tif (name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_form_level, &level);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_FORM_CTR(tvb, offset, pinfo, tree, di, drep);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetForm_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * GetForm\n */\n\nstatic int\nSpoolssGetForm_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tproto_item *hidden_item;\n\tguint32 level;\n\tchar *name;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tsizeof(guint16), hf_form_name, TRUE, &name);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_form_level, &level);\n\n\t/* GetForm() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\",\n\t\t\t\tlevel);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetForm_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tBUFFER buffer;\n\tguint32 level = GPOINTER_TO_UINT(dcv->se_data);\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\tif (buffer.tvb) {\n\t\tint buffer_offset = 0;\n\n\t\tswitch(level) {\n\t\tcase 1: {\n\t\t\tint struct_start = buffer_offset;\n\n\t\t\t/*buffer_offset = */dissect_FORM_REL(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo, tree, di, drep,\n\t\t\t\tstruct_start);\n\t\t\tbreak;\n\t\t}\n\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format(buffer.tree, pinfo, &ei_form_level, buffer.tvb, buffer_offset, -1, \"Unknown form info level %d\", level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n\n/* A generic reply function that just parses the status code.  Useful for\n   unimplemented dissectors so the status code can be inserted into the\n   INFO column. */\n\nstatic int\nSpoolssGeneric_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tint len = tvb_reported_length(tvb);\n\n\tproto_tree_add_expert(tree, pinfo, &ei_unimplemented_dissector, tvb, offset, 0);\n\n\toffset = dissect_doserror(\n\t\ttvb, len - 4, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * JOB_INFO_1\n */\n\nstatic gint ett_JOB_INFO_1 = -1;\n\nstatic int\ndissect_spoolss_JOB_INFO_1(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\tchar *document_name;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_JOB_INFO_1, &item, \"Job info level 1\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_id, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_servername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_username,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_documentname,\n\t\tstruct_start, &document_name);\n\n\tproto_item_append_text(item, \": %s\", document_name);\n\tg_free(document_name);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_datatype,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_textstatus,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_job_status(tvb, offset, pinfo, subtree, di, drep);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_priority, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_position, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_totalpages, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_pagesprinted, NULL);\n\n\toffset = dissect_SYSTEM_TIME(\n\t\ttvb, offset, pinfo, subtree, di, drep, \"Job Submission Time\",\n\t\tTRUE, NULL);\n\n\tproto_item_set_len(item, offset - struct_start);\n\n\treturn offset;\n}\n\n/*\n * JOB_INFO_2\n */\n\nstatic gint ett_JOB_INFO_2 = -1;\n\nstatic int\ndissect_spoolss_JOB_INFO_2(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\tchar *document_name;\n\tguint32 devmode_offset, secdesc_offset;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_JOB_INFO_2, &item, \"Job info level 2\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_id, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_machinename,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_username,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_documentname,\n\t\tstruct_start, &document_name);\n\n\tproto_item_append_text(item, \": %s\", document_name);\n\tg_free(document_name);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_notifyname,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_datatype,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printprocessor,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_parameters,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset,\n\t\t&devmode_offset);\n\n\tdissect_DEVMODE(\n\t\ttvb, devmode_offset - 4 + struct_start, pinfo, subtree, di, drep);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_textstatus,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset,\n\t\t&secdesc_offset);\n\n\tdissect_nt_sec_desc(\n\t\ttvb, secdesc_offset, pinfo, subtree, drep,\n\t\tFALSE, -1,\n\t\t&spoolss_job_access_mask_info);\n\n\toffset = dissect_job_status(tvb, offset, pinfo, subtree, di, drep);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_priority, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_position, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_start_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_end_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_totalpages, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_size, NULL);\n\n\toffset = dissect_SYSTEM_TIME(\n\t\ttvb, offset, pinfo, subtree, di, drep, \"Job Submission Time\",\n\t\tTRUE, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_elapsed_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_pagesprinted, NULL);\n\n\tproto_item_set_len(item, offset - struct_start);\n\n\treturn offset;\n}\n\n/*\n * EnumJobs\n */\n\nstatic int hf_enumjobs_firstjob = -1;\nstatic int hf_enumjobs_numjobs = -1;\n\nstatic int\nSpoolssEnumJobs_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_hnd, NULL, NULL, FALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_enumjobs_firstjob, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_enumjobs_numjobs, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* EnumJobs() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumJobs_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tgint16 level = GPOINTER_TO_UINT(dcv->se_data);\n\tBUFFER buffer;\n\tguint32 num_jobs, i;\n\tint buffer_offset;\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_enumjobs_numjobs,\n\t\t&num_jobs);\n\n\tbuffer_offset = 0;\n\n\tfor (i = 0; i < num_jobs; i++) {\n\t\tswitch(level) {\n\t\tcase 1:\n\t\t\tbuffer_offset = dissect_spoolss_JOB_INFO_1(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tbuffer_offset = dissect_spoolss_JOB_INFO_2(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format( buffer.tree, pinfo, &ei_job_info_level, buffer.tvb, 0, -1, \"Unknown job info level %d\", level);\n\t\t\tbreak;\n\t\t}\n\n\t}\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SetJob\n */\n\nstatic const value_string setjob_commands[] = {\n\t{ JOB_CONTROL_PAUSE, \"Pause\" },\n\t{ JOB_CONTROL_RESUME, \"Resume\" },\n\t{ JOB_CONTROL_CANCEL, \"Cancel\" },\n\t{ JOB_CONTROL_RESTART, \"Restart\" },\n\t{ JOB_CONTROL_DELETE, \"Delete\" },\n\t{ 0, NULL }\n};\n\nstatic int hf_setjob_cmd = -1;\n\nstatic int\nSpoolssSetJob_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 jobid, cmd;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_job_id, &jobid);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_setjob_cmd, &cmd);\n\n\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", %s jobid %d\",\n\t\t\tval_to_str(cmd, setjob_commands, \"Unknown (%d)\"),\n\t\t\tjobid);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetJob_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * GetJob\n */\n\nstatic int\nSpoolssGetJob_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level, jobid;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_job_id, &jobid);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* GetJob() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d, jobid %d\",\n\t\t\t\tlevel, jobid);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetJob_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tgint32 level = GPOINTER_TO_UINT(dcv->se_data);\n\tBUFFER buffer;\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t\t&buffer);\n\n\tif (buffer.tvb) {\n\t\tint buffer_offset = 0;\n\n\t\tswitch(level) {\n\t\tcase 1:\n\t\t\t/*buffer_offset = */dissect_spoolss_JOB_INFO_1(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format( buffer.tree, pinfo, &ei_job_info_level, buffer.tvb, buffer_offset, -1, \"Unknown job info level %d\", level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * StartPagePrinter\n */\n\nstatic int\nSpoolssStartPagePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssStartPagePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * EndPagePrinter\n */\n\nstatic int\nSpoolssEndPagePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEndPagePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * DOC_INFO_1\n */\n\nstatic gint ett_DOC_INFO_1 = -1;\n\nstatic int\ndissect_spoolss_doc_info_1(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DOC_INFO_1, NULL, \"Document info level 1\");\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, subtree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Document name\", hf_documentname, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, subtree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Output file\", hf_outputfile, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, subtree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Data type\", hf_datatype, 0);\n\n\treturn offset;\n}\n\nstatic int\ndissect_spoolss_doc_info_data(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t      proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\treturn dissect_spoolss_doc_info_1(tvb, offset, pinfo, tree, di, drep);\n}\n\n/*\n * DOC_INFO\n */\n\nstatic gint ett_DOC_INFO = -1;\n\nstatic int\ndissect_spoolss_doc_info(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 level;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DOC_INFO, NULL, \"Document info\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_level, &level);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\tdissect_spoolss_doc_info_data,\n\t\tNDR_POINTER_UNIQUE, \"Document info\", -1);\n\n\treturn offset;\n}\n\n/*\n * DOC_INFO_CTR\n */\n\nstatic gint ett_DOC_INFO_CTR = -1;\n\nstatic int\ndissect_spoolss_doc_info_ctr(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DOC_INFO_CTR, NULL, \"Document info container\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_level, NULL);\n\n\toffset = dissect_spoolss_doc_info(\n\t\ttvb, offset, pinfo, subtree, di, drep);\n\n\treturn offset;\n}\n\n/*\n * StartDocPrinter\n */\n\nstatic int\nSpoolssStartDocPrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\toffset = dissect_spoolss_doc_info_ctr(tvb, offset, pinfo, tree, di, drep);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssStartDocPrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_job_id, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * EndDocPrinter\n */\n\nstatic int\nSpoolssEndDocPrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEndDocPrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * WritePrinter\n */\n\nstatic gint ett_writeprinter_buffer = -1;\n\nstatic int hf_writeprinter_numwritten = -1;\n\nstatic int\nSpoolssWritePrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\tguint32 size;\n\tproto_item *item;\n\tproto_tree *subtree;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_buffer_size, &size);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %d bytes\", size);\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_writeprinter_buffer, &item, \"Buffer\");\n\n\toffset = dissect_ndr_uint8s(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_buffer_data, size, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_buffer_size, NULL);\n\n\tproto_item_set_len(item, size + 4);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssWritePrinter_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 size;\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_writeprinter_numwritten,\n\t\t&size);\n\n\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", %d bytes written\", size);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * DeletePrinterData\n */\n\nstatic int\nSpoolssDeletePrinterData_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tchar *value_name;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_value, TRUE, &value_name);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", value_name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssDeletePrinterData_r(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * DRIVER_INFO_1\n */\n\nstatic gint ett_DRIVER_INFO_1 = -1;\n\nstatic int\ndissect_DRIVER_INFO_1(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_1, NULL, \"Driver info level 1\");\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\tstruct_start, NULL);\n\n\treturn offset;\n}\n\n/*\n * DRIVER_INFO_2\n */\n\nstatic const value_string driverinfo_cversion_vals[] =\n{\n\t{ 0, \"Windows 95/98/Me\" },\n\t{ 2, \"Windows NT 4.0\" },\n\t{ 3, \"Windows 2000/XP\" },\n\t{ 0, NULL }\n};\n\nstatic gint ett_DRIVER_INFO_2 = -1;\n\nstatic int\ndissect_DRIVER_INFO_2(tvbuff_t *tvb, int offset,\n\t packet_info *pinfo, proto_tree *tree,\n\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_2, NULL, \"Driver info level 2\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_driverinfo_cversion, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_environment,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_driverpath,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_datafile,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_configfile,\n\t\t\tstruct_start, NULL);\n\n\treturn offset;\n}\n\n/*\n * DRIVER_INFO_3\n */\n\nstatic gint ett_DRIVER_INFO_3 = -1;\n\nstatic int\ndissect_DRIVER_INFO_3(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_3, NULL, \"Driver info level 3\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_driverinfo_cversion, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_environment,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_driverpath,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_datafile,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_configfile,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_helpfile,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstrarray(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_dependentfiles,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_monitorname,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_defaultdatatype,\n\t\tstruct_start, NULL);\n\n\treturn offset;\n}\n\n\n/*\n\tDRIVER_INFO_6\n*/\n\nstatic gint ett_DRIVER_INFO_6 = -1;\n\nstatic int\ndissect_DRIVER_INFO_6(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_6, NULL, \"Driver info level 6\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_driverinfo_cversion, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_environment,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_driverpath,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_datafile,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_configfile,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_helpfile,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstrarray(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_dependentfiles,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_monitorname,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_defaultdatatype,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstrarray(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_previousdrivernames,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_ndr_nt_NTTIME (\n\t\t\ttvb, offset, pinfo, subtree, di, drep,hf_driverdate);\n\n\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_padding,\n\t\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_driver_version_low,\n\t\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_driver_version_high,\n\t\t\tNULL);\n\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_mfgname,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_oemurl,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_hardwareid,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_provider,\n\t\t\tstruct_start, NULL);\n\n\treturn offset;\n}\n\n\nstatic gint ett_DRIVER_INFO_101 = -1;\n\nstatic int\ndissect_DRIVER_INFO_101(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_101, NULL, \"Driver info level 101\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_driverinfo_cversion, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_environment,\n\t\t\tstruct_start, NULL);\n\n\tproto_tree_add_expert(subtree, pinfo, &ei_unknown_data, tvb, offset, 0);\n\n\treturn offset;\n}\n/*\n * EnumPrinterDrivers\n */\n\nstatic int\nSpoolssEnumPrinterDrivers_q(tvbuff_t *tvb, int offset,\n\t\t\t\t       packet_info *pinfo, proto_tree *tree,\n\t\t\t\t       dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Name\", hf_servername, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Environment\", hf_environment, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* EnumPrinterDrivers() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumPrinterDrivers_r(tvbuff_t *tvb, int offset,\n\t\t\t\t       packet_info *pinfo, proto_tree *tree,\n\t\t\t\t       dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level = GPOINTER_TO_UINT(dcv->se_data), num_drivers, i;\n\tint buffer_offset;\n\tBUFFER buffer;\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t\t&buffer);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_returned,\n\t\t&num_drivers);\n\n\tbuffer_offset = 0;\n\n\tfor (i = 0; i < num_drivers; i++) {\n\t\tswitch(level) {\n\t\tcase 1:\n\t\t\tbuffer_offset = dissect_DRIVER_INFO_1(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tbuffer_offset = dissect_DRIVER_INFO_2(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tbuffer_offset = dissect_DRIVER_INFO_3(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tbuffer_offset = dissect_DRIVER_INFO_6(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 101:\n\t\t\t/*buffer_offset =*/ dissect_DRIVER_INFO_101(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\t/*break;*/\n\t\t\tgoto done; /*Not entirely imeplemented*/\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format( buffer.tree, pinfo, &ei_driver_info_level, buffer.tvb, buffer_offset, -1, \"Unknown driver info level %d\", level);\n\t\t\tgoto done;\n\t\t}\n\t}\n\ndone:\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * GetPrinterDriver2\n */\n\nstatic int\nSpoolssGetPrinterDriver2_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Environment\", hf_environment, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* GetPrinterDriver2() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_clientmajorversion, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_clientminorversion, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterDriver2_r(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level = GPOINTER_TO_UINT(dcv->se_data);\n\tBUFFER buffer;\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t\t&buffer);\n\n\tif (buffer.tvb) {\n\t\tswitch(level) {\n\t\tcase 1:\n\t\t\tdissect_DRIVER_INFO_1(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tdissect_DRIVER_INFO_2(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tdissect_DRIVER_INFO_3(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tdissect_DRIVER_INFO_6(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 101:\n\t\t\tdissect_DRIVER_INFO_101(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format( buffer.tree, pinfo, &ei_driver_info_level, buffer.tvb, 0, -1, \"Unknown driver info level %d\", level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_servermajorversion, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_serverminorversion, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int\ndissect_notify_info_data_buffer(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 len;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_notify_info_data_buffer_len, &len);\n\n\toffset = dissect_ndr_uint16s(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_notify_info_data_buffer_data, len);\n\n\treturn offset;\n}\n\nstatic void\ncb_notify_str_postprocess(packet_info *pinfo _U_,\n\t\t\t\t      proto_tree *tree _U_,\n\t\t\t\t      proto_item *item, dcerpc_info *di _U_, tvbuff_t *tvb,\n\t\t\t\t      int start_offset, int end_offset,\n\t\t\t\t      void *callback_args)\n{\n\tgint levels, hf_index = GPOINTER_TO_INT(callback_args);\n\tguint32 len;\n\tchar *s;\n\tproto_item *hidden_item;\n\n\t/* Align start_offset on 4-byte boundary. */\n\n\tif (start_offset % 4)\n\t\tstart_offset += 4 - (start_offset % 4);\n\n\t/* Get string length */\n\n\tlen = tvb_get_letohl(tvb, start_offset);\n\n\ts = tvb_get_string_enc(NULL,\n\t\ttvb, start_offset + 4, (end_offset - start_offset - 4), ENC_UTF_16|ENC_LITTLE_ENDIAN);\n\n\t/* Append string to upper-level proto_items */\n\n\tlevels = 2;\n\n\tif (levels > 0 && item && s && s[0]) {\n\t\tproto_item_append_text(item, \": %s\", s);\n\t\titem = item->parent;\n\t\tlevels--;\n\t\tif (levels > 0) {\n\t\t\tproto_item_append_text(item, \": %s\", s);\n\t\t\titem = item->parent;\n\t\t\tlevels--;\n\t\t\twhile (levels > 0) {\n\t\t\t\tproto_item_append_text(item, \" %s\", s);\n\t\t\t\titem = item->parent;\n\t\t\t\tlevels--;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Add hidden field so filter brings up any notify data */\n\n\tif (hf_index != -1) {\n\t\thidden_item = proto_tree_add_string(\n\t\t\ttree, hf_index, tvb, start_offset, len, s);\n\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\t}\n\n\tg_free(s);\n}\n\n/* Return the hf_index for a printer notify field.  This is used to\n   add a hidden string to the display so that filtering will bring\n   up relevant notify data. */\n\nstatic int\nprinter_notify_hf_index(int field)\n{\n\tint result = -1;\n\n\tswitch(field) {\n\tcase PRINTER_NOTIFY_SERVER_NAME:\n\t\tresult = hf_servername;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_PRINTER_NAME:\n\t\tresult = hf_printername;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_SHARE_NAME:\n\t\tresult = hf_sharename;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_PORT_NAME:\n\t\tresult = hf_portname;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_DRIVER_NAME:\n\t\tresult = hf_drivername;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_COMMENT:\n\t\tresult = hf_printercomment;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_LOCATION:\n\t\tresult = hf_printerlocation;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_SEPFILE:\n\t\tresult = hf_sepfile;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_PRINT_PROCESSOR:\n\t\tresult = hf_printprocessor;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_PARAMETERS:\n\t\tresult = hf_parameters;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_DATATYPE:\n\t\tresult = hf_parameters;\n\t\tbreak;\n\t}\n\n\treturn result;\n}\n\nstatic int\njob_notify_hf_index(int field)\n{\n\tint result = -1;\n\n\tswitch(field) {\n\tcase JOB_NOTIFY_PRINTER_NAME:\n\t\tresult = hf_printername;\n\t\tbreak;\n\tcase JOB_NOTIFY_MACHINE_NAME:\n\t\tresult = hf_machinename;\n\t\tbreak;\n\tcase JOB_NOTIFY_PORT_NAME:\n\t\tresult = hf_portname;\n\t\tbreak;\n\tcase JOB_NOTIFY_USER_NAME:\n\t\tresult = hf_username;\n\t\tbreak;\n\tcase JOB_NOTIFY_NOTIFY_NAME:\n\t\tresult = hf_notifyname;\n\t\tbreak;\n\tcase JOB_NOTIFY_DATATYPE:\n\t\tresult = hf_datatype;\n\t\tbreak;\n\tcase JOB_NOTIFY_PRINT_PROCESSOR:\n\t\tresult = hf_printprocessor;\n\t\tbreak;\n\tcase JOB_NOTIFY_DRIVER_NAME:\n\t\tresult = hf_drivername;\n\t\tbreak;\n\tcase JOB_NOTIFY_DOCUMENT:\n\t\tresult = hf_documentname;\n\t\tbreak;\n\tcase JOB_NOTIFY_PRIORITY:\n\t\tresult = hf_job_priority;\n\t\tbreak;\n\tcase JOB_NOTIFY_POSITION:\n\t\tresult = hf_job_position;\n\t\tbreak;\n\tcase JOB_NOTIFY_TOTAL_PAGES:\n\t\tresult = hf_job_totalpages;\n\t\tbreak;\n\tcase JOB_NOTIFY_PAGES_PRINTED:\n\t\tresult = hf_job_pagesprinted;\n\t\tbreak;\n\tcase JOB_NOTIFY_TOTAL_BYTES:\n\t\tresult = hf_job_totalbytes;\n\t\tbreak;\n\tcase JOB_NOTIFY_BYTES_PRINTED:\n\t\tresult = hf_job_bytesprinted;\n\t\tbreak;\n\t}\n\n\treturn result;\n}\n\nstatic int\ndissect_NOTIFY_INFO_DATA_printer(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, proto_item *item,\n\t\t\t\t dcerpc_info *di, guint8 *drep, guint16 field)\n{\n\tguint32 value1;\n\n\tswitch (field) {\n\n\t\t/* String notify data */\n\n\tcase PRINTER_NOTIFY_SERVER_NAME:\n\tcase PRINTER_NOTIFY_PRINTER_NAME:\n\tcase PRINTER_NOTIFY_SHARE_NAME:\n\tcase PRINTER_NOTIFY_DRIVER_NAME:\n\tcase PRINTER_NOTIFY_COMMENT:\n\tcase PRINTER_NOTIFY_LOCATION:\n\tcase PRINTER_NOTIFY_SEPFILE:\n\tcase PRINTER_NOTIFY_PRINT_PROCESSOR:\n\tcase PRINTER_NOTIFY_PARAMETERS:\n\tcase PRINTER_NOTIFY_DATATYPE:\n\tcase PRINTER_NOTIFY_PORT_NAME:\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_bufsize, &value1);\n\n\t\toffset = dissect_ndr_pointer_cb(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_notify_info_data_buffer,\n\t\t\tNDR_POINTER_UNIQUE, \"String\",\n\t\t\thf_notify_info_data_buffer,\n\t\t\tcb_notify_str_postprocess,\n\t\t\tGINT_TO_POINTER(printer_notify_hf_index(field)));\n\n\t\tbreak;\n\n\tcase PRINTER_NOTIFY_ATTRIBUTES:\n\n\t\t/* Value 1 is the printer attributes */\n\n\t\toffset = dissect_printer_attributes(\n\t\t\ttvb, offset, pinfo, tree, di, drep);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tbreak;\n\n\tcase PRINTER_NOTIFY_STATUS: {\n\t\tguint32 status;\n\n\t\t/* Value 1 is the printer status */\n\n \t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_printer_status, &status);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tproto_item_append_text(\n\t\t\titem, \": %s\",\n\t\t\tval_to_str_ext_const(status, &printer_status_vals_ext, \"Unknown\"));\n\n\t\tbreak;\n\t}\n\n\t\t/* Unknown notify data */\n\n\tcase PRINTER_NOTIFY_SECURITY_DESCRIPTOR: /* Secdesc */\n\tcase PRINTER_NOTIFY_DEVMODE: /* Devicemode */\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_bufsize, &value1);\n\n\t\toffset = dissect_ndr_pointer(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_notify_info_data_buffer,\n\t\t\tNDR_POINTER_UNIQUE, \"Buffer\",\n\t\t\thf_notify_info_data_buffer);\n\n\t\tbreak;\n\n\tdefault:\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value1, NULL);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tbreak;\n\t}\n\treturn offset;\n}\n\nstatic void\nnotify_job_time_cb(packet_info *pinfo _U_, proto_tree *tree _U_,\n\t\t\t       proto_item *item, dcerpc_info *di, tvbuff_t *tvb _U_,\n\t\t\t       int start_offset _U_, int end_offset _U_,\n\t\t\t       void *callback_args _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *str = (char *)dcv->private_data;\n\n\t/* Append job string stored in dcv->private_data by\n\t   dissect_SYSTEM_TIME_ptr() in the current item as well\n\t   as the parent. */\n\n\tproto_item_append_text(item, \": %s\", str);\n\n\tif (item)\n\t\tproto_item_append_text(item->parent, \": %s\", str);\n}\n\nstatic int\ndissect_NOTIFY_INFO_DATA_job(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, proto_item *item, dcerpc_info *di, guint8 *drep,\n\t\t\t     guint16 field)\n{\n\tguint32 value1;\n\tproto_item *hidden_item;\n\n\tswitch (field) {\n\n\t\t/* String notify data */\n\n\tcase JOB_NOTIFY_PRINTER_NAME:\n\tcase JOB_NOTIFY_MACHINE_NAME:\n\tcase JOB_NOTIFY_PORT_NAME:\n\tcase JOB_NOTIFY_USER_NAME:\n\tcase JOB_NOTIFY_NOTIFY_NAME:\n\tcase JOB_NOTIFY_DATATYPE:\n\tcase JOB_NOTIFY_PRINT_PROCESSOR:\n\tcase JOB_NOTIFY_PARAMETERS:\n\tcase JOB_NOTIFY_DRIVER_NAME:\n\tcase JOB_NOTIFY_STATUS_STRING:\n\tcase JOB_NOTIFY_DOCUMENT:\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_bufsize, &value1);\n\n\t\toffset = dissect_ndr_pointer_cb(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_notify_info_data_buffer,\n\t\t\tNDR_POINTER_UNIQUE, \"String\",\n\t\t\thf_notify_info_data_buffer,\n\t\t\tcb_notify_str_postprocess,\n\t\t\tGINT_TO_POINTER(job_notify_hf_index(field)));\n\n\t\tbreak;\n\n\tcase JOB_NOTIFY_STATUS:\n\t\toffset = dissect_job_status(\n\t\t\ttvb, offset, pinfo, tree, di, drep);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tbreak;\n\n\tcase JOB_NOTIFY_SUBMITTED:\n\n\t\t/* SYSTEM_TIME */\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_buffer_len, NULL);\n\n\t\toffset = dissect_ndr_pointer_cb(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_SYSTEM_TIME_ptr, NDR_POINTER_UNIQUE,\n\t\t\t\"Time submitted\", -1, notify_job_time_cb, NULL);\n\n\t\tbreak;\n\n\tcase JOB_NOTIFY_PRIORITY:\n\tcase JOB_NOTIFY_POSITION:\n\tcase JOB_NOTIFY_TOTAL_PAGES:\n\tcase JOB_NOTIFY_PAGES_PRINTED:\n\tcase JOB_NOTIFY_TOTAL_BYTES:\n\tcase JOB_NOTIFY_BYTES_PRINTED: {\n\t\tguint32 value;\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value1, &value);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tproto_item_append_text(item, \": %d\", value);\n\n\t\thidden_item = proto_tree_add_uint(\n\t\t\ttree, job_notify_hf_index(field), tvb,\n\t\t\toffset, 4, value);\n\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t\tbreak;\n\t}\n\n\t\t/* Unknown notify data */\n\n\tcase JOB_NOTIFY_DEVMODE:\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_bufsize, &value1);\n\n\t\toffset = dissect_ndr_pointer(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_notify_info_data_buffer,\n\t\t\tNDR_POINTER_UNIQUE, \"Buffer\",\n\t\t\thf_notify_info_data_buffer);\n\n\t\tbreak;\n\n\tdefault:\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value1, NULL);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\t}\n\treturn offset;\n}\n\nstatic gint ett_NOTIFY_INFO_DATA = -1;\n\nstatic int\ndissect_NOTIFY_INFO_DATA(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint32 count;\n\tguint16 type, field;\n\tconst char *field_string;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_NOTIFY_INFO_DATA, &item, \"\");\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_notify_info_data_type, &type);\n\n\toffset = dissect_notify_field(\n\t\ttvb, offset, pinfo, subtree, di, drep, type, &field);\n\n\tswitch(type) {\n\tcase PRINTER_NOTIFY_TYPE:\n\t\tfield_string = val_to_str_ext(\n\t\t\tfield, &printer_notify_option_data_vals_ext,\n\t\t\t\"Unknown (%d)\");\n\t\tbreak;\n\tcase JOB_NOTIFY_TYPE:\n\t\tfield_string = val_to_str_ext(\n\t\t\tfield, &job_notify_option_data_vals_ext,\n\t\t\t\"Unknown (%d)\");\n\t\tbreak;\n\tdefault:\n\t\tfield_string = \"Unknown field\";\n\t\tbreak;\n\t}\n\n\tproto_item_append_text(\n\t\titem, \"%s, %s\",\n\t\tval_to_str(type, printer_notify_types, \"Unknown (%d)\"),\n\t\tfield_string);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_notify_info_data_count, &count);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_notify_info_data_id, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_notify_info_data_count, NULL);\n\n\t/* The value here depends on (type, field) */\n\n\tswitch (type) {\n\tcase PRINTER_NOTIFY_TYPE:\n\t\toffset = dissect_NOTIFY_INFO_DATA_printer(\n\t\t\ttvb, offset, pinfo, subtree, item, di, drep, field);\n\t\tbreak;\n\tcase JOB_NOTIFY_TYPE:\n\t\toffset = dissect_NOTIFY_INFO_DATA_job(\n\t\t\ttvb, offset, pinfo, subtree, item, di, drep, field);\n\t\tbreak;\n\tdefault:\n\t\texpert_add_info(pinfo, item, &ei_notify_info_data_type);\n\t\tbreak;\n\t}\n\n\treturn offset;\n}\n\nstatic int\ndissect_NOTIFY_INFO(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 count;\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_info_version, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_info_flags, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_info_count, &count);\n\n\tif (!di->conformant_run)\n\t\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", %d %s\", count,\n\t\t\tnotify_plural(count));\n\n\toffset = dissect_ndr_ucarray(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t     dissect_NOTIFY_INFO_DATA);\n\n\treturn offset;\n}\n\n/*\n * RFNPCNEX\n */\n\nstatic int\nSpoolssRFNPCNEX_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 changeid;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_changelow, &changeid);\n\n\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", changeid %d\", changeid);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_OPTIONS_ARRAY_CTR, NDR_POINTER_UNIQUE,\n\t\t\"Notify Options Array Container\", -1);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssRFNPCNEX_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_INFO, NDR_POINTER_UNIQUE,\n\t\t\"Notify Info\", -1);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * RRPCN\n */\n\nstatic int\nSpoolssRRPCN_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t  proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 changeid;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_changelow, &changeid);\n\n\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", changeid %d\", changeid);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_changehigh, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_unk0, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_unk1, NULL);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_INFO, NDR_POINTER_UNIQUE,\n\t\t\"Notify Info\", -1);\n\n\t/* Notify info */\n\n\treturn offset;\n}\n\nstatic int\nSpoolssRRPCN_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t  proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_unk0, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * ReplyClosePrinter\n */\n\nstatic int\nSpoolssReplyClosePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, TRUE);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssReplyClosePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * FCPN\n */\n\nstatic int\nSpoolssFCPN_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssFCPN_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * RouterReplyPrinter\n */\n\nstatic int hf_routerreplyprinter_condition = -1;\nstatic int hf_routerreplyprinter_unknown1 = -1;\nstatic int hf_routerreplyprinter_changeid = -1;\n\nstatic int\nSpoolssRouterReplyPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_routerreplyprinter_condition, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_routerreplyprinter_unknown1, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_routerreplyprinter_changeid, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssRouterReplyPrinter_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int hf_keybuffer_size = -1;\n\nstatic int\ndissect_spoolss_keybuffer(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t  proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 size;\n\tint end_offset;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\t/* Dissect size and data */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_keybuffer_size, &size);\n\n\tend_offset = offset + (size*2);\n\tif (end_offset < offset) {\n\t\t/*\n\t\t * Overflow - make the end offset one past the end of\n\t\t * the packet data, so we throw an exception (as the\n\t\t * size is almost certainly too big).\n\t\t */\n\t\tend_offset = tvb_reported_length_remaining(tvb, offset) + 1;\n\t}\n\n\twhile (offset < end_offset)\n\t\toffset = dissect_spoolss_uint16uni(\n\t\t\ttvb, offset, pinfo, tree, drep, NULL, hf_keybuffer);\n\n\treturn offset;\n}\n\n\nstatic int\nSpoolssEnumPrinterKey_q(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\tchar *key_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_key, TRUE, &key_name);\n\n\tif (!key_name[0])\n\t\tkey_name = \"\\\"\\\"\";\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", key_name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumPrinterKey_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_keybuffer(tvb, offset, pinfo, tree, di, drep);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int hf_enumprinterdataex_name_offset = -1;\nstatic int hf_enumprinterdataex_name_len = -1;\nstatic int hf_enumprinterdataex_name = -1;\nstatic int hf_enumprinterdataex_val_offset = -1;\nstatic int hf_enumprinterdataex_val_len = -1;\nstatic int hf_enumprinterdataex_val_dword_low = -1;\nstatic int hf_enumprinterdataex_val_dword_high = -1;\nstatic int hf_enumprinterdataex_value_null = -1;\nstatic int hf_enumprinterdataex_value_uint = -1;\nstatic int hf_enumprinterdataex_value_binary = -1;\nstatic int hf_enumprinterdataex_value_multi_sz = -1;\n\nstatic int\nSpoolssEnumPrinterDataEx_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tchar *key_name;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_key, TRUE, &key_name);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", key_name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic gint ett_printer_enumdataex_value = -1;\n\nstatic int\ndissect_spoolss_printer_enum_values(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep)\n{\n\tguint32 start_offset = offset;\n\tguint32 name_offset, name_len, val_offset, val_len, val_type;\n\tchar *name;\n\tproto_item *item;\n\tproto_tree *subtree;\n\n\t/* Get offset of value name */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_enumprinterdataex_name_offset, &name_offset);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_enumprinterdataex_name_len, &name_len);\n\n\tdissect_spoolss_uint16uni(\n\t\ttvb, start_offset + name_offset, pinfo, NULL, drep,\n\t\t&name, hf_enumprinterdataex_name);\n\n\tsubtree = proto_tree_add_subtree_format(tree, tvb, offset, 0, ett_printer_enumdataex_value, &item, \"Name: %s\", name);\n\n\tproto_tree_add_uint(subtree, hf_enumprinterdataex_name_offset, tvb, offset - 8, 4, name_offset);\n\n\tproto_tree_add_uint(subtree, hf_enumprinterdataex_name_len, tvb, offset - 4, 4, name_len);\n\n\tproto_tree_add_string( subtree, hf_enumprinterdataex_name, tvb, start_offset + name_offset, ((int)strlen(name) + 1) * 2, name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printerdata_type,\n\t\t&val_type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_enumprinterdataex_val_offset, &val_offset);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_enumprinterdataex_val_len, &val_len);\n\n\tif (val_len == 0) {\n\t\tproto_tree_add_uint_format_value(subtree, hf_enumprinterdataex_value_null, tvb, start_offset + val_offset, 4, 0, \"(null)\");\n\t\tgoto done;\n\t}\n\n\tswitch(val_type) {\n\tcase DCERPC_REG_DWORD: {\n\t\tguint32 value;\n\t\tguint16 low, high;\n\t\tint offset2 = start_offset + val_offset;\n\n\t\t/* Needs to be broken into two 16-byte ints because it may\n\t\t   not be aligned. */\n\n\t\toffset2 = dissect_ndr_uint16(\n\t\t\ttvb, offset2, pinfo, subtree, di, drep,\n\t\t\thf_enumprinterdataex_val_dword_low, &low);\n\n\t\t/*offset2 = */dissect_ndr_uint16(\n\t\t\ttvb, offset2, pinfo, subtree, di, drep,\n\t\t\thf_enumprinterdataex_val_dword_high, &high);\n\n\t\tvalue = (high << 16) | low;\n\n\t\tproto_tree_add_uint(subtree, hf_enumprinterdataex_value_uint, tvb, start_offset + val_offset, 4, value);\n\n\t\tproto_item_append_text(item, \", Value: %d\", value);\n\n\t\tbreak;\n\t}\n\tcase DCERPC_REG_SZ: {\n\t\tchar *value;\n\n\t\tdissect_spoolss_uint16uni(\n\t\t\ttvb, start_offset + val_offset, pinfo, subtree, drep,\n\t\t\t&value, hf_value_string);\n\n\t\tproto_item_append_text(item, \", Value: %s\", value);\n\n\t\tg_free(value);\n\n\t\tbreak;\n\t}\n\tcase DCERPC_REG_BINARY:\n\n\t\t/* FIXME: nicer way to display this */\n\n\t\tproto_tree_add_bytes_format_value( subtree, hf_enumprinterdataex_value_binary, tvb, start_offset + val_offset, val_len, NULL, \"<binary data>\");\n\t\tbreak;\n\n\tcase DCERPC_REG_MULTI_SZ:\n\n\t\t/* FIXME: implement REG_MULTI_SZ support */\n\n\t\tproto_tree_add_bytes_format_value(subtree, hf_enumprinterdataex_value_multi_sz, tvb, start_offset + val_offset, val_len, NULL, \"<REG_MULTI_SZ not implemented>\");\n\t\tbreak;\n\n\tdefault:\n\t\tproto_tree_add_expert_format( subtree, pinfo, &ei_enumprinterdataex_value, tvb, start_offset + val_offset, val_len, \"%s: unknown type %d\", name, val_type);\n\t}\n\n done:\n\tg_free(name);\n\n\treturn offset;\n}\n\nstatic gint ett_PRINTER_DATA_CTR = -1;\n\nstatic int\nSpoolssEnumPrinterDataEx_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\tguint32 size, num_values;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_buffer_size, &size);\n\n\tdissect_ndr_uint32(\n\t\ttvb, offset + size + 4, pinfo, NULL, di, drep, hf_returned,\n\t\t&num_values);\n\n\tif (size) {\n\t\tproto_tree *subtree;\n\t\tint offset2 = offset;\n\t\tguint32 i;\n\n\t\tsubtree = proto_tree_add_subtree(\n\t\t\ttree, tvb, offset, 0, ett_PRINTER_DATA_CTR, NULL, \"Printer data\");\n\n\t\tfor (i=0; i < num_values; i++)\n\t\t\toffset2 = dissect_spoolss_printer_enum_values(\n\t\t\t\ttvb, offset2, pinfo, subtree, di, drep);\n\t}\n\n\toffset += size;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_returned, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterDriverDirectory_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Name\", hf_servername, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Environment\", hf_environment, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterDriverDirectory_r(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_string_parm(\n\t\ttvb, offset, pinfo, tree, di, drep, \"Directory\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * List of subdissectors for this pipe.\n */\n\nstatic dcerpc_sub_dissector dcerpc_spoolss_dissectors[] = {\n\t{ SPOOLSS_ENUMPRINTERS, \"EnumPrinters\",\n\t  SpoolssEnumPrinters_q, SpoolssEnumPrinters_r },\n\t{ SPOOLSS_OPENPRINTER, \"OpenPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_SETJOB, \"SetJob\",\n\t  SpoolssSetJob_q, SpoolssSetJob_r },\n\t{ SPOOLSS_GETJOB, \"GetJob\",\n\t  SpoolssGetJob_q, SpoolssGetJob_r },\n\t{ SPOOLSS_ENUMJOBS, \"EnumJobs\",\n\t  SpoolssEnumJobs_q, SpoolssEnumJobs_r },\n\t{ SPOOLSS_ADDPRINTER, \"AddPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTER, \"DeletePrinter\",\n\t  SpoolssDeletePrinter_q, SpoolssDeletePrinter_r },\n\t{ SPOOLSS_SETPRINTER, \"SetPrinter\",\n\t  SpoolssSetPrinter_q, SpoolssSetPrinter_r },\n\t{ SPOOLSS_GETPRINTER, \"GetPrinter\",\n\t  SpoolssGetPrinter_q, SpoolssGetPrinter_r },\n\t{ SPOOLSS_ADDPRINTERDRIVER, \"AddPrinterDriver\",\n\t  NULL, SpoolssAddPrinterDriver_r },\n\t{ SPOOLSS_ENUMPRINTERDRIVERS, \"EnumPrinterDrivers\",\n\t  SpoolssEnumPrinterDrivers_q, SpoolssEnumPrinterDrivers_r },\n\t{ SPOOLSS_GETPRINTERDRIVER, \"GetPrinterDriver\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_GETPRINTERDRIVERDIRECTORY, \"GetPrinterDriverDirectory\",\n\t  SpoolssGetPrinterDriverDirectory_q, SpoolssGetPrinterDriverDirectory_r },\n\t{ SPOOLSS_DELETEPRINTERDRIVER, \"DeletePrinterDriver\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPRINTPROCESSOR, \"AddPrintProcessor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ENUMPRINTPROCESSORS, \"EnumPrintProcessor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_GETPRINTPROCESSORDIRECTORY, \"GetPrintProcessorDirectory\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_STARTDOCPRINTER, \"StartDocPrinter\",\n\t  SpoolssStartDocPrinter_q, SpoolssStartDocPrinter_r },\n\t{ SPOOLSS_STARTPAGEPRINTER, \"StartPagePrinter\",\n\t  SpoolssStartPagePrinter_q, SpoolssStartPagePrinter_r },\n\t{ SPOOLSS_WRITEPRINTER, \"WritePrinter\",\n\t  SpoolssWritePrinter_q, SpoolssWritePrinter_r },\n\t{ SPOOLSS_ENDPAGEPRINTER, \"EndPagePrinter\",\n\t  SpoolssEndPagePrinter_q, SpoolssEndPagePrinter_r },\n\t{ SPOOLSS_ABORTPRINTER, \"AbortPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_READPRINTER, \"ReadPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ENDDOCPRINTER, \"EndDocPrinter\",\n\t  SpoolssEndDocPrinter_q, SpoolssEndDocPrinter_r },\n\t{ SPOOLSS_ADDJOB, \"AddJob\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_SCHEDULEJOB, \"ScheduleJob\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_GETPRINTERDATA, \"GetPrinterData\",\n\t  SpoolssGetPrinterData_q, SpoolssGetPrinterData_r },\n\t{ SPOOLSS_SETPRINTERDATA, \"SetPrinterData\",\n\t  SpoolssSetPrinterData_q, SpoolssSetPrinterData_r },\n\t{ SPOOLSS_WAITFORPRINTERCHANGE, \"WaitForPrinterChange\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_CLOSEPRINTER, \"ClosePrinter\",\n\t  SpoolssClosePrinter_q, SpoolssClosePrinter_r },\n\t{ SPOOLSS_ADDFORM, \"AddForm\",\n\t  SpoolssAddForm_q, SpoolssAddForm_r },\n\t{ SPOOLSS_DELETEFORM, \"DeleteForm\",\n\t  SpoolssDeleteForm_q, SpoolssDeleteForm_r },\n\t{ SPOOLSS_GETFORM, \"GetForm\",\n\t  SpoolssGetForm_q, SpoolssGetForm_r },\n\t{ SPOOLSS_SETFORM, \"SetForm\",\n\t  SpoolssSetForm_q, SpoolssSetForm_r },\n\t{ SPOOLSS_ENUMFORMS, \"EnumForms\",\n\t  SpoolssEnumForms_q, SpoolssEnumForms_r },\n\t{ SPOOLSS_ENUMPORTS, \"EnumPorts\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ENUMMONITORS, \"EnumMonitors\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPORT, \"AddPort\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_CONFIGUREPORT, \"ConfigurePort\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPORT, \"DeletePort\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_CREATEPRINTERIC, \"CreatePrinterIC\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_PLAYGDISCRIPTONPRINTERIC, \"PlayDiscriptOnPrinterIC\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTERIC, \"DeletePrinterIC\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPRINTERCONNECTION, \"AddPrinterConnection\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTERCONNECTION, \"DeletePrinterConnection\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_PRINTERMESSAGEBOX, \"PrinterMessageBox\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDMONITOR, \"AddMonitor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEMONITOR, \"DeleteMonitor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTPROCESSOR, \"DeletePrintProcessor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPRINTPROVIDER, \"AddPrintProvider\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTPROVIDER, \"DeletePrintProvider\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ENUMPRINTPROCDATATYPES, \"EnumPrintProcDataTypes\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_RESETPRINTER, \"ResetPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_GETPRINTERDRIVER2, \"GetPrinterDriver2\",\n\t  SpoolssGetPrinterDriver2_q, SpoolssGetPrinterDriver2_r },\n\t{ SPOOLSS_FINDFIRSTPRINTERCHANGENOTIFICATION,\n\t  \"FindFirstPrinterChangeNotification\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_FINDNEXTPRINTERCHANGENOTIFICATION,\n\t  \"FindNextPrinterChangeNotification\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_FCPN, \"FCPN\",\n\t  SpoolssFCPN_q, SpoolssFCPN_r },\n\t{ SPOOLSS_ROUTERFINDFIRSTPRINTERNOTIFICATIONOLD,\n\t  \"RouterFindFirstPrinterNotificationOld\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_REPLYOPENPRINTER, \"ReplyOpenPrinter\",\n\t  SpoolssReplyOpenPrinter_q, SpoolssReplyOpenPrinter_r },\n\t{ SPOOLSS_ROUTERREPLYPRINTER, \"RouterReplyPrinter\",\n\t  SpoolssRouterReplyPrinter_q, SpoolssRouterReplyPrinter_r },\n\t{ SPOOLSS_REPLYCLOSEPRINTER, \"ReplyClosePrinter\",\n\t  SpoolssReplyClosePrinter_q, SpoolssReplyClosePrinter_r },\n\t{ SPOOLSS_ADDPORTEX, \"AddPortEx\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_REMOTEFINDFIRSTPRINTERCHANGENOTIFICATION,\n\t  \"RemoteFindFirstPrinterChangeNotification\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_SPOOLERINIT, \"SpoolerInit\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_RESETPRINTEREX, \"ResetPrinterEx\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_RFFPCNEX, \"RFFPCNEX\",\n\t  SpoolssRFFPCNEX_q, SpoolssRFFPCNEX_r },\n\t{ SPOOLSS_RRPCN, \"RRPCN\",\n\t  SpoolssRRPCN_q, SpoolssRRPCN_r },\n\t{ SPOOLSS_RFNPCNEX, \"RFNPCNEX\",\n\t  SpoolssRFNPCNEX_q, SpoolssRFNPCNEX_r },\n\t{ SPOOLSS_OPENPRINTEREX, \"OpenPrinterEx\",\n\t  SpoolssOpenPrinterEx_q, SpoolssOpenPrinterEx_r },\n\t{ SPOOLSS_ADDPRINTEREX, \"AddPrinterEx\",\n\t  NULL, SpoolssAddPrinterEx_r },\n\t{ SPOOLSS_ENUMPRINTERDATA, \"EnumPrinterData\",\n\t  SpoolssEnumPrinterData_q, SpoolssEnumPrinterData_r },\n\t{ SPOOLSS_DELETEPRINTERDATA, \"DeletePrinterData\",\n\t  SpoolssDeletePrinterData_q, SpoolssDeletePrinterData_r },\n\t{ SPOOLSS_GETPRINTERDATAEX, \"GetPrinterDataEx\",\n\t  SpoolssGetPrinterDataEx_q, SpoolssGetPrinterDataEx_r },\n\t{ SPOOLSS_SETPRINTERDATAEX, \"SetPrinterDataEx\",\n\t  SpoolssSetPrinterDataEx_q, SpoolssSetPrinterDataEx_r },\n\t{ SPOOLSS_ENUMPRINTERDATAEX, \"EnumPrinterDataEx\",\n\t  SpoolssEnumPrinterDataEx_q, SpoolssEnumPrinterDataEx_r },\n\t{ SPOOLSS_ENUMPRINTERKEY, \"EnumPrinterKey\",\n\t  SpoolssEnumPrinterKey_q, SpoolssEnumPrinterKey_r },\n\t{ SPOOLSS_DELETEPRINTERDATAEX, \"DeletePrinterDataEx\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTERDRIVEREX, \"DeletePrinterDriverEx\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPRINTERDRIVEREX, \"AddPrinterDriverEx\",\n\t  NULL, SpoolssGeneric_r },\n\n\t{ 0, NULL, NULL, NULL },\n};\n\n/*\n * Dissector initialisation function\n */\n\n/* Protocol registration */\n\nstatic int proto_dcerpc_spoolss = -1;\nstatic gint ett_dcerpc_spoolss = -1;\n\nvoid\nproto_register_dcerpc_spoolss(void)\n{\n\tstatic hf_register_info hf[] = {\n\n\t\t/* GetPrinterDriver2 */\n\n\t\t{ &hf_clientmajorversion,\n\t\t  { \"Client major version\", \"spoolss.clientmajorversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Client printer driver major version\", HFILL }},\n\t\t{ &hf_clientminorversion,\n\t\t  { \"Client minor version\", \"spoolss.clientminorversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Client printer driver minor version\", HFILL }},\n\t\t{ &hf_servermajorversion,\n\t\t  { \"Server major version\", \"spoolss.servermajorversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Server printer driver major version\", HFILL }},\n\t\t{ &hf_serverminorversion,\n\t\t  { \"Server minor version\", \"spoolss.serverminorversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Server printer driver minor version\", HFILL }},\n\t\t{ &hf_driverpath,\n\t\t  { \"Driver path\", \"spoolss.driverpath\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_datafile,\n\t\t  { \"Data file\", \"spoolss.datafile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_configfile,\n\t\t  { \"Config file\", \"spoolss.configfile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"Printer name\", HFILL }},\n\t\t{ &hf_helpfile,\n\t\t  { \"Help file\", \"spoolss.helpfile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_monitorname,\n\t\t  { \"Monitor name\", \"spoolss.monitorname\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_defaultdatatype,\n\t\t  { \"Default data type\", \"spoolss.defaultdatatype\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_driverinfo_cversion,\n\t\t  { \"Driver version\", \"spoolss.driverversion\", FT_UINT32, BASE_DEC,\n\t\t    VALS(driverinfo_cversion_vals), 0, \"Printer name\", HFILL }},\n\t\t{ &hf_dependentfiles,\n\t\t  { \"Dependent files\", \"spoolss.dependentfiles\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_status,\n\t\t  { \"Status\", \"spoolss.printer_status\", FT_UINT32, BASE_DEC|BASE_EXT_STRING,\n\t\t    &printer_status_vals_ext, 0, NULL, HFILL }},\n\n\t\t{ &hf_previousdrivernames,\n\t\t  { \"Previous Driver Names\", \"spoolss.previousdrivernames\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_driverdate,\n\t\t  { \"Driver Date\", \"spoolss.driverdate\", FT_ABSOLUTE_TIME, ABSOLUTE_TIME_LOCAL,\n\t\t    NULL, 0, \"Date of driver creation\", HFILL }},\n\n\t\t{ &hf_padding,\n\t\t  { \"Padding\", \"spoolss.padding\", FT_UINT32, BASE_HEX,\n\t\t    NULL, 0, \"Some padding - conveys no semantic information\", HFILL }},\n\n\t\t{ &hf_driver_version_low,\n\t\t  { \"Minor Driver Version\", \"spoolss.minordriverversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, \"Driver Version Low\", HFILL }},\n\n\t\t{ &hf_driver_version_high,\n\t\t  { \"Major Driver Version\", \"spoolss.majordriverversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, \"Driver Version High\", HFILL }},\n\n\t\t{ &hf_mfgname,\n\t\t  { \"Mfgname\", \"spoolss.mfgname\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"Manufacturer Name\", HFILL }},\n\n\t\t{ &hf_oemurl,\n\t\t  { \"OEM URL\", \"spoolss.oemrul\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"OEM URL - Website of Vendor\", HFILL }},\n\n\t\t{ &hf_hardwareid,\n\t\t  { \"Hardware ID\", \"spoolss.hardwareid\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"Hardware Identification Information\", HFILL }},\n\n\t   \t{ &hf_provider,\n\t   \t  { \"Provider\", \"spoolss.provider\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"Provider of Driver\", HFILL }},\n\n\t\t/* Setprinter RPC */\n\n\t\t{ &hf_setprinter_cmd,\n\t\t  { \"Command\", \"spoolss.setprinter_cmd\", FT_UINT32, BASE_DEC,\n\t\t   VALS(setprinter_cmd_vals), 0, NULL, HFILL }},\n\n\t\t/* Enumprinters */\n\n\t\t{ &hf_enumprinters_flags,\n\t\t  { \"Flags\", \"spoolss.enumprinters.flags\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_local,\n\t\t  { \"Enum local\", \"spoolss.enumprinters.flags.enum_local\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_LOCAL, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_name,\n\t\t  { \"Enum name\", \"spoolss.enumprinters.flags.enum_name\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_NAME, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_shared,\n\t\t  { \"Enum shared\", \"spoolss.enumprinters.flags.enum_shared\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_SHARED, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_default,\n\t\t  { \"Enum default\", \"spoolss.enumprinters.flags.enum_default\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_DEFAULT, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_connections,\n\t\t  { \"Enum connections\", \"spoolss.enumprinters.flags.enum_connections\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_CONNECTIONS, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_network,\n\t\t  { \"Enum network\", \"spoolss.enumprinters.flags.enum_network\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_NETWORK, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_remote,\n\t\t  { \"Enum remote\", \"spoolss.enumprinters.flags.enum_remote\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_REMOTE, NULL, HFILL }},\n\n\t\t/* GetPrinter */\n\n\t\t{ &hf_start_time,\n\t\t  { \"Start time\", \"spoolss.start_time\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_end_time,\n\t\t  { \"End time\", \"spoolss.end_time\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_elapsed_time,\n\t\t  { \"Elapsed time\", \"spoolss.elapsed_time\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/*\n\t\t * New hf index values\n\t\t */\n\n\t\t{ &hf_opnum,\n\t\t  { \"Operation\", \"spoolss.opnum\", FT_UINT16, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_hnd,\n\t\t  { \"Context handle\", \"spoolss.hnd\", FT_BYTES, BASE_NONE,\n\t\t    NULL, 0x0, \"SPOOLSS policy handle\", HFILL }},\n\n\t\t{ &hf_rc,\n\t\t  { \"Return code\", \"spoolss.rc\", FT_UINT32, BASE_HEX | BASE_EXT_STRING,\n\t\t    &DOS_errors_ext, 0x0, \"SPOOLSS return code\", HFILL }},\n\n\t\t{ &hf_offered,\n\t\t  { \"Offered\", \"spoolss.offered\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Size of buffer offered in this request\",\n\t\t    HFILL }},\n\n\t\t{ &hf_needed,\n\t\t  { \"Needed\", \"spoolss.needed\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Size of buffer required for request\", HFILL }},\n\n\t\t{ &hf_returned,\n\t\t  { \"Returned\", \"spoolss.returned\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Number of items returned\", HFILL }},\n\n\t\t{ &hf_buffer_size,\n\t\t  { \"Buffer size\", \"spoolss.buffer.size\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Size of buffer\", HFILL }},\n\n\t\t{ &hf_buffer_data,\n\t\t  { \"Buffer data\", \"spoolss.buffer.data\", FT_BYTES, BASE_NONE,\n\t\t    NULL, 0x0, \"Contents of buffer\", HFILL }},\n\n\t\t{ &hf_string_parm_size,\n\t\t  { \"String buffer size\", \"spoolss.string.buffersize\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Size of string buffer\", HFILL }},\n\n\t\t{ &hf_string_parm_data,\n\t\t  { \"String data\", \"spoolss.string.data\", FT_STRINGZ, BASE_NONE,\n\t\t    NULL, 0x0, \"Contents of string\", HFILL }},\n\n\t\t{ &hf_offset,\n\t\t  { \"Offset\", \"spoolss.offset\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Offset of data\", HFILL }},\n\n\t\t{ &hf_level,\n\t\t  { \"Info level\", \"spoolss.enumjobs.level\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\n\t\t{ &hf_printername,\n\t\t  { \"Printer name\", \"spoolss.printername\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_machinename,\n\t\t  { \"Machine name\", \"spoolss.machinename\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notifyname,\n\t\t  { \"Notify name\", \"spoolss.notifyname\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printerdesc,\n\t\t  { \"Printer description\", \"spoolss.printerdesc\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printercomment,\n\t\t  { \"Printer comment\", \"spoolss.printercomment\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_servername,\n\t\t  { \"Server name\", \"spoolss.servername\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_sharename,\n\t\t  { \"Share name\", \"spoolss.sharename\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_portname,\n\t\t  { \"Port name\", \"spoolss.portname\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printerlocation,\n\t\t  { \"Printer location\", \"spoolss.printerlocation\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_environment,\n\t\t  { \"Environment name\", \"spoolss.environment\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_drivername,\n\t\t  { \"Driver name\", \"spoolss.drivername\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_username,\n\t\t  { \"User name\", \"spoolss.username\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_documentname,\n\t\t  { \"Document name\", \"spoolss.document\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_outputfile,\n\t\t  { \"Output file\", \"spoolss.outputfile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_datatype,\n\t\t  { \"Datatype\", \"spoolss.datatype\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_textstatus,\n\t\t  { \"Text status\", \"spoolss.textstatus\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n \t\t{ &hf_sepfile,\n\t\t  { \"Separator file\", \"spoolss.setpfile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n \t\t{ &hf_parameters,\n\t\t  { \"Parameters\", \"spoolss.parameters\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printprocessor,\n\t\t  { \"Print processor\", \"spoolss.printprocessor\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* Printer data */\n\n\t\t{ &hf_printerdata,\n\t\t  { \"Data\", \"spoolss.printerdata\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printerdata_key,\n\t\t  { \"Key\", \"spoolss.printerdata.key\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, \"Printer data key\", HFILL }},\n\n\t\t{ &hf_printerdata_value,\n\t\t  { \"Value\", \"spoolss.printerdata.value\",\n\t\t    FT_STRING, BASE_NONE, NULL, 0, \"Printer data value\",\n\t\t    HFILL }},\n\n\t\t{ &hf_printerdata_type,\n\t\t  { \"Type\", \"spoolss.printerdata.type\",\n\t\t    FT_UINT32, BASE_DEC|BASE_EXT_STRING, &reg_datatypes_ext, 0,\n\t\t    \"Printer data type\", HFILL }},\n\n\t\t{ &hf_printerdata_size,\n\t\t  { \"Size\", \"spoolss.printerdata.size\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, \"Printer data size\",\n\t\t    HFILL }},\n\n\t\t{ &hf_printerdata_data,\n\t\t  { \"Data\", \"spoolss.printerdata.data\", FT_BYTES, BASE_NONE,\n\t\t    NULL, 0x0, \"Printer data\", HFILL }},\n\n\t\t{ &hf_printerdata_data_dword,\n\t\t  { \"DWORD data\", \"spoolss.printerdata.data.dword\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printerdata_data_sz,\n\t\t  { \"String data\", \"spoolss.printerdata.data.sz\",\n\t\t    FT_STRING, BASE_NONE, NULL, 0, NULL,\n\t\t    HFILL }},\n\n\t\t/* Devicemode */\n\n\t\t{ &hf_devmodectr_size,\n\t\t  { \"Devicemode ctr size\", \"spoolss.devicemodectr.size\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_devmode,\n\t\t  { \"Devicemode\", \"spoolss.devmode\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_size,\n\t\t  { \"Size\", \"spoolss.devmode.size\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_spec_version,\n\t\t  { \"Spec version\", \"spoolss.devmode.spec_version\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_specversion_vals),\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_driver_version,\n\t\t  { \"Driver version\", \"spoolss.devmode.driver_version\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_size2,\n\t\t  { \"Size2\", \"spoolss.devmode.size2\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields,\n\t\t  { \"Fields\", \"spoolss.devmode.fields\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_orientation,\n\t\t  { \"Orientation\", \"spoolss.devmode.orientation\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_orientation_vals),\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_paper_size,\n\t\t  { \"Paper size\", \"spoolss.devmode.paper_size\",\n\t\t    FT_UINT16, BASE_DEC|BASE_EXT_STRING, &devmode_papersize_vals_ext,\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_paper_width,\n\t\t  { \"Paper width\", \"spoolss.devmode.paper_width\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_paper_length,\n\t\t  { \"Paper length\", \"spoolss.devmode.paper_length\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_scale,\n\t\t  { \"Scale\", \"spoolss.devmode.scale\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_copies,\n\t\t  { \"Copies\", \"spoolss.devmode.copies\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_default_source,\n\t\t  { \"Default source\", \"spoolss.devmode.default_source\",\n\t\t    FT_UINT16, BASE_DEC|BASE_EXT_STRING, &devmode_papersource_vals_ext,\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_print_quality,\n\t\t  { \"Print quality\", \"spoolss.devmode.print_quality\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_printquality_vals),\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_color,\n\t\t  { \"Color\", \"spoolss.devmode.color\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_colour_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_duplex,\n\t\t  { \"Duplex\", \"spoolss.devmode.duplex\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_duplex_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_y_resolution,\n\t\t  { \"Y resolution\", \"spoolss.devmode.y_resolution\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_tt_option,\n\t\t  { \"TT option\", \"spoolss.devmode.tt_option\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_ttoption_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_collate,\n\t\t  { \"Collate\", \"spoolss.devmode.collate\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_collate_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_log_pixels,\n\t\t  { \"Log pixels\", \"spoolss.devmode.log_pixels\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_bits_per_pel,\n\t\t  { \"Bits per pel\", \"spoolss.devmode.bits_per_pel\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_pels_width,\n\t\t  { \"Pels width\", \"spoolss.devmode.pels_width\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_pels_height,\n\t\t  { \"Pels height\", \"spoolss.devmode.pels_height\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_display_flags,\n\t\t  { \"Display flags\", \"spoolss.devmode.display_flags\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_displayflags_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_display_freq,\n\t\t  { \"Display frequency\", \"spoolss.devmode.display_freq\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_devmode_icm_method,\n\t\t  { \"ICM method\", \"spoolss.devmode.icm_method\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_icmmethod_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_icm_intent,\n\t\t  { \"ICM intent\", \"spoolss.devmode.icm_intent\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_icmintent_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_media_type,\n\t\t  { \"Media type\", \"spoolss.devmode.media_type\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_mediatype_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_dither_type,\n\t\t  { \"Dither type\", \"spoolss.devmode.dither_type\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_dithertype_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_reserved1,\n\t\t  { \"Reserved1\", \"spoolss.devmode.reserved1\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_reserved2,\n\t\t  { \"Reserved2\", \"spoolss.devmode.reserved2\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_panning_width,\n\t\t  { \"Panning width\", \"spoolss.devmode.panning_width\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_panning_height,\n\t\t  { \"Panning height\", \"spoolss.devmode.panning_height\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_driver_extra_len,\n\t\t  { \"Driver extra length\",\n\t\t    \"spoolss.devmode.driver_extra_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_devmode_driver_extra,\n\t\t  { \"Driver extra\", \"spoolss.devmode.driver_extra\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* Devicemode fields */\n\n\t\t{ &hf_devmode_fields_orientation,\n\t\t  { \"Orientation\", \"spoolss.devmode.fields.orientation\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_ORIENTATION, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_papersize,\n\t\t  { \"Paper size\", \"spoolss.devmode.fields.paper_size\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PAPERSIZE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_paperlength,\n\t\t  { \"Paper length\", \"spoolss.devmode.fields.paper_length\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PAPERLENGTH, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_paperwidth,\n\t\t  { \"Paper width\", \"spoolss.devmode.fields.paper_width\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PAPERWIDTH, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_scale,\n\t\t  { \"Scale\", \"spoolss.devmode.fields.scale\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_SCALE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_position,\n\t\t  { \"Position\", \"spoolss.devmode.fields.position\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_POSITION, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_nup,\n\t\t  { \"N-up\", \"spoolss.devmode.fields.nup\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_NUP, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_copies,\n\t\t  { \"Copies\", \"spoolss.devmode.fields.copies\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_COPIES, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_defaultsource,\n\t\t  { \"Default source\", \"spoolss.devmode.fields.default_source\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DEFAULTSOURCE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_printquality,\n\t\t  { \"Print quality\", \"spoolss.devmode.fields.print_quality\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PRINTQUALITY, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_color,\n\t\t  { \"Color\", \"spoolss.devmode.fields.color\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_COLOR, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_duplex,\n\t\t  { \"Duplex\", \"spoolss.devmode.fields.duplex\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DUPLEX, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_yresolution,\n\t\t  { \"Y resolution\", \"spoolss.devmode.fields.y_resolution\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_YRESOLUTION, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_ttoption,\n\t\t  { \"TT option\", \"spoolss.devmode.fields.tt_option\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_TTOPTION, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_collate,\n\t\t  { \"Collate\", \"spoolss.devmode.fields.collate\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_COLLATE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_formname,\n\t\t  { \"Form name\", \"spoolss.devmode.fields.form_name\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_FORMNAME, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_logpixels,\n\t\t  { \"Log pixels\", \"spoolss.devmode.fields.log_pixels\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_LOGPIXELS, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_bitsperpel,\n\t\t  { \"Bits per pel\", \"spoolss.devmode.fields.bits_per_pel\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_BITSPERPEL, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_pelswidth,\n\t\t  { \"Pels width\", \"spoolss.devmode.fields.pels_width\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PELSWIDTH, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_pelsheight,\n\t\t  { \"Pels height\", \"spoolss.devmode.fields.pels_height\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PELSHEIGHT, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_displayflags,\n\t\t  { \"Display flags\", \"spoolss.devmode.fields.display_flags\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DISPLAYFLAGS, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_displayfrequency,\n\t\t  { \"Display frequency\",\n\t\t    \"spoolss.devmode.fields.display_frequency\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DISPLAYFREQUENCY, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_icmmethod,\n\t\t  { \"ICM method\", \"spoolss.devmode.fields.icm_method\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_ICMMETHOD, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_icmintent,\n\t\t  { \"ICM intent\", \"spoolss.devmode.fields.icm_intent\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_ICMINTENT, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_mediatype,\n\t\t  { \"Media type\", \"spoolss.devmode.fields.media_type\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_MEDIATYPE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_dithertype,\n\t\t  { \"Dither type\", \"spoolss.devmode.fields.dither_type\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DITHERTYPE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_panningwidth,\n\t\t  { \"Panning width\", \"spoolss.devmode.fields.panning_width\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PANNINGWIDTH, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_panningheight,\n\t\t  { \"Panning height\", \"spoolss.devmode.fields.panning_height\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PANNINGHEIGHT, NULL, HFILL }},\n\n\t\t/* EnumPrinterData RPC */\n\n\t\t{ &hf_enumprinterdata_enumindex,\n\t\t  { \"Enum index\", \"spoolss.enumprinterdata.enumindex\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    \"Index for start of enumeration\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_value_offered,\n\t\t  { \"Value size offered\",\n\t\t    \"spoolss.enumprinterdata.value_offered\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0,\n\t\t    \"Buffer size offered for printerdata value\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_data_offered,\n\t\t  { \"Data size offered\",\n\t\t    \"spoolss.enumprinterdata.data_offered\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0,\n\t\t    \"Buffer size offered for printerdata data\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_value_len,\n\t\t  { \"Value length\",\n\t\t    \"spoolss.enumprinterdata.value_len\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0,\n\t\t    \"Size of printerdata value\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_value_needed,\n\t\t  { \"Value size needed\",\n\t\t    \"spoolss.enumprinterdata.value_needed\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0,\n\t\t    \"Buffer size needed for printerdata value\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_data_needed,\n\t\t  { \"Data size needed\",\n\t\t    \"spoolss.enumprinterdata.data_needed\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Buffer size needed for printerdata data\",\n\t\t    HFILL }},\n\n\t\t/* Print jobs */\n\n\t\t{ &hf_job_id,\n\t\t  { \"Job ID\", \"spoolss.job.id\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Job identification number\", HFILL }},\n\n\t\t{ &hf_job_status,\n\t\t  { \"Job status\", \"spoolss.job.status\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_status_paused,\n\t\t  { \"Paused\", \"spoolss.job.status.paused\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_paused), JOB_STATUS_PAUSED,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_error,\n\t\t  { \"Error\", \"spoolss.job.status.error\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_error), JOB_STATUS_ERROR,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_deleting,\n\t\t  { \"Deleting\", \"spoolss.job.status.deleting\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_deleting), JOB_STATUS_DELETING,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_spooling,\n\t\t  { \"Spooling\", \"spoolss.job.status.spooling\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_spooling), JOB_STATUS_SPOOLING,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_printing,\n\t\t  { \"Printing\", \"spoolss.job.status.printing\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_printing), JOB_STATUS_PRINTING,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_offline,\n\t\t  { \"Offline\", \"spoolss.job.status.offline\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_offline), JOB_STATUS_OFFLINE,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_paperout,\n\t\t  { \"Paperout\", \"spoolss.job.status.paperout\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_paperout), JOB_STATUS_PAPEROUT,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_printed,\n\t\t  { \"Printed\", \"spoolss.job.status.printed\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_printed), JOB_STATUS_PRINTED,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_deleted,\n\t\t  { \"Deleted\", \"spoolss.job.status.deleted\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_deleted), JOB_STATUS_DELETED,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_blocked,\n\t\t  { \"Blocked\", \"spoolss.job.status.blocked\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_blocked), JOB_STATUS_BLOCKED,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_user_intervention,\n\t\t  { \"User intervention\",\n\t\t    \"spoolss.job.status.user_intervention\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_user_intervention),\n\t\t    JOB_STATUS_USER_INTERVENTION, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_job_priority,\n\t\t  { \"Job priority\", \"spoolss.job.priority\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_position,\n\t\t  { \"Job position\", \"spoolss.job.position\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_totalpages,\n\t\t  { \"Job total pages\", \"spoolss.job.totalpages\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_totalbytes,\n\t\t  { \"Job total bytes\", \"spoolss.job.totalbytes\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_bytesprinted,\n\t\t  { \"Job bytes printed\", \"spoolss.job.bytesprinted\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_job_pagesprinted,\n\t\t  { \"Job pages printed\", \"spoolss.job.pagesprinted\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_job_size,\n\t\t  { \"Job size\", \"spoolss.job.size\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t/* Forms */\n\n\t\t{ &hf_form,\n\t\t  { \"Data\", \"spoolss.form\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_level,\n\t\t  { \"Level\", \"spoolss.form.level\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_name,\n\t\t  { \"Name\", \"spoolss.form.name\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_flags,\n\t\t  { \"Flags\", \"spoolss.form.flags\", FT_UINT32,\n\t\t    BASE_DEC, VALS(form_type_vals), 0, NULL, HFILL }},\n\n\t\t{ &hf_form_unknown,\n\t\t  { \"Unknown\", \"spoolss.form.unknown\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_width,\n\t\t  { \"Width\", \"spoolss.form.width\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_height,\n\t\t  { \"Height\", \"spoolss.form.height\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_left_margin,\n\t\t  { \"Left margin\", \"spoolss.form.left\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, \"Left\", HFILL }},\n\n\t\t{ &hf_form_top_margin,\n\t\t  { \"Top\", \"spoolss.form.top\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_horiz_len,\n\t\t  { \"Horizontal\", \"spoolss.form.horiz\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_vert_len,\n\t\t  { \"Vertical\", \"spoolss.form.vert\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_enumforms_num,\n\t\t  { \"Num\", \"spoolss.enumforms.num\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/* Print notify */\n\n\t\t{ &hf_notify_options_version,\n\t\t  { \"Version\", \"spoolss.notify_options.version\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_options_flags,\n\t\t  { \"Flags\", \"spoolss.notify_options.flags\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_options_count,\n\t\t  { \"Count\", \"spoolss.notify_options.count\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_type,\n\t\t  { \"Type\", \"spoolss.notify_option.type\", FT_UINT16, BASE_DEC,\n\t\t    VALS(printer_notify_types), 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_reserved1,\n\t\t  { \"Reserved1\", \"spoolss.notify_option.reserved1\", FT_UINT16,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_reserved2,\n\t\t  { \"Reserved2\", \"spoolss.notify_option.reserved2\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_reserved3,\n\t\t  { \"Reserved3\", \"spoolss.notify_option.reserved3\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_count,\n\t\t  { \"Count\", \"spoolss.notify_option.count\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_data_count,\n\t\t  { \"Count\", \"spoolss.notify_option_data.count\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_options_flags_refresh,\n\t\t  { \"Refresh\", \"spoolss.notify_options.flags.refresh\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_notify_options_flags_refresh),\n\t\t    PRINTER_NOTIFY_OPTIONS_REFRESH, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_count,\n\t\t  { \"Count\", \"spoolss.notify_info.count\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_version,\n\t\t  { \"Version\", \"spoolss.notify_info.version\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_flags,\n\t\t  { \"Flags\", \"spoolss.notify_info.flags\", FT_UINT32, BASE_HEX,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_type,\n\t\t  { \"Type\", \"spoolss.notify_info_data.type\", FT_UINT16,\n\t\t    BASE_DEC, VALS(printer_notify_types), 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_field,\n\t\t  { \"Field\", \"spoolss.notify_field\", FT_UINT16, BASE_DEC,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_count,\n\t\t  { \"Count\", \"spoolss.notify_info_data.count\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_id,\n\t\t  { \"Job Id\", \"spoolss.notify_info_data.jobid\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_value1,\n\t\t  { \"Value1\", \"spoolss.notify_info_data.value1\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_value2,\n\t\t  { \"Value2\", \"spoolss.notify_info_data.value2\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_bufsize,\n\t\t  { \"Buffer size\", \"spoolss.notify_info_data.bufsize\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_buffer,\n\t\t  { \"Buffer\", \"spoolss.notify_info_data.buffer\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_buffer_len,\n\t\t  { \"Buffer length\", \"spoolss.notify_info_data.buffer.len\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_buffer_data,\n\t\t  { \"Buffer data\", \"spoolss.notify_info_data.buffer.data\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* RffpCNex RPC */\n\n\t\t{ &hf_rffpcnex_options,\n\t\t  { \"Options\", \"spoolss.rffpcnex.options\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, \"RFFPCNEX options\", HFILL }},\n\n\t\t{ &hf_printerlocal, /* XXX: move me */\n\t\t  { \"Printer local\", \"spoolss.printer_local\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags,\n\t\t  { \"RFFPCNEX flags\", \"spoolss.rffpcnex.flags\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_printer,\n\t\t  { \"Add printer\", \"spoolss.rffpcnex.flags.add_printer\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_printer),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_PRINTER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_set_printer,\n\t\t  { \"Set printer\", \"spoolss.rffpcnex.flags.set_printer\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_set_printer),\n\t\t    SPOOLSS_PRINTER_CHANGE_SET_PRINTER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_printer,\n\t\t  { \"Delete printer\", \"spoolss.rffpcnex.flags.delete_printer\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_printer),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_PRINTER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_job,\n\t\t  { \"Add job\", \"spoolss.rffpcnex.flags.add_job\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_job),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_JOB, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_set_job,\n\t\t  { \"Set job\", \"spoolss.rffpcnex.flags.set_job\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_set_job),\n\t\t    SPOOLSS_PRINTER_CHANGE_SET_JOB, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_job,\n\t\t  { \"Delete job\", \"spoolss.rffpcnex.flags.delete_job\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_job),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_JOB, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_write_job,\n\t\t  { \"Write job\", \"spoolss.rffpcnex.flags.write_job\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_write_job),\n\t\t    SPOOLSS_PRINTER_CHANGE_WRITE_JOB, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_form,\n\t\t  { \"Add form\", \"spoolss.rffpcnex.flags.add_form\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_form),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_FORM, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_set_form,\n\t\t  { \"Set form\", \"spoolss.rffpcnex.flags.set_form\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_set_form),\n\t\t    SPOOLSS_PRINTER_CHANGE_SET_FORM, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_form,\n\t\t  { \"Delete form\", \"spoolss.rffpcnex.flags.delete_form\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_form),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_FORM, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_port,\n\t\t  { \"Add port\", \"spoolss.rffpcnex.flags.add_port\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_port),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_PORT, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_configure_port,\n\t\t  { \"Configure port\", \"spoolss.rffpcnex.flags.configure_port\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_configure_port),\n\t\t    SPOOLSS_PRINTER_CHANGE_CONFIGURE_PORT, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_port,\n\t\t  { \"Delete port\", \"spoolss.rffpcnex.flags.delete_port\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_port),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_PORT, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_print_processor,\n\t\t  { \"Add processor\", \"spoolss.rffpcnex.flags.add_processor\",\n\t\t    FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_rffpcnex_flags_add_print_processor),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_PRINT_PROCESSOR,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_print_processor,\n\t\t  { \"Delete processor\",\n\t\t    \"spoolss.rffpcnex.flags.delete_processor\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_rffpcnex_flags_delete_print_processor),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_PRINT_PROCESSOR,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_driver,\n\t\t  { \"Add driver\", \"spoolss.rffpcnex.flags.add_driver\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_driver),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_PRINTER_DRIVER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_set_driver,\n\t\t  { \"Set driver\", \"spoolss.rffpcnex.flags.set_driver\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_set_driver),\n\t\t    SPOOLSS_PRINTER_CHANGE_SET_PRINTER_DRIVER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_driver,\n\t\t  { \"Delete driver\", \"spoolss.rffpcnex.flags.delete_driver\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_driver),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_PRINTER_DRIVER,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_timeout,\n\t\t  { \"Timeout\", \"spoolss.rffpcnex.flags.timeout\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_timeout),\n\t\t    SPOOLSS_PRINTER_CHANGE_TIMEOUT, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_failed_printer_connection,\n\t\t  { \"Failed printer connection\",\n\t\t    \"spoolss.rffpcnex.flags.failed_connection_printer\",\n\t\t    FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_rffpcnex_flags_failed_connection_printer),\n\t\t    SPOOLSS_PRINTER_CHANGE_FAILED_CONNECTION_PRINTER,\n\t\t    NULL, HFILL }},\n\n\t\t/* RRPCN RPC */\n\n\t\t{ &hf_rrpcn_changelow,\n\t\t  { \"Change low\", \"spoolss.rrpcn.changelow\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rrpcn_changehigh,\n\t\t  { \"Change high\", \"spoolss.rrpcn.changehigh\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rrpcn_unk0,\n\t\t  { \"Unknown 0\", \"spoolss.rrpcn.unk0\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rrpcn_unk1,\n\t\t  { \"Unknown 1\", \"spoolss.rrpcn.unk1\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t/* ReplyOpenPrinter RPC */\n\n\t\t{ &hf_replyopenprinter_unk0,\n\t\t  { \"Unknown 0\", \"spoolss.replyopenprinter.unk0\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_replyopenprinter_unk1,\n\t\t  { \"Unknown 1\", \"spoolss.replyopenprinter.unk1\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_devicename,\n\t\t  { \"DeviceName\", \"spoolss.devmode.devicename\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_form_name,\n\t\t  { \"FormName\", \"spoolss.devmode.form_name\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_relative_string,\n\t\t  { \"String\", \"spoolss.relative_string\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_value_name,\n\t\t  { \"Value Name\", \"spoolss.value_name\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_keybuffer,\n\t\t  { \"Key\", \"spoolss.hf_keybuffer\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_value_string,\n\t\t  { \"Value\", \"spoolss.value_string\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* Printer attributes */\n\n\t\t{ &hf_printer_attributes,\n\t\t  { \"Attributes\", \"spoolss.printer_attributes\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_queued,\n\t\t  { \"Queued\", \"spoolss.printer_attributes.queued\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_queued),\n\t\t    PRINTER_ATTRIBUTE_QUEUED, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_direct,\n\t\t  { \"Direct\", \"spoolss.printer_attributes.direct\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_direct),\n\t\t    PRINTER_ATTRIBUTE_DIRECT, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_default,\n\t\t  { \"Default (9x/ME only)\",\n\t\t    \"spoolss.printer_attributes.default\",FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_default),\n\t\t    PRINTER_ATTRIBUTE_DEFAULT, \"Default\", HFILL }},\n\n\t\t{ &hf_printer_attributes_shared,\n\t\t  { \"Shared\", \"spoolss.printer_attributes.shared\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_shared),\n\t\t    PRINTER_ATTRIBUTE_SHARED, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_network,\n\t\t  { \"Network\", \"spoolss.printer_attributes.network\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_printer_attributes_network),\n\t\t    PRINTER_ATTRIBUTE_NETWORK, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_hidden,\n\t\t  { \"Hidden\", \"spoolss.printer_attributes.hidden\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_hidden),\n\t\t    PRINTER_ATTRIBUTE_HIDDEN, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_local,\n\t\t  { \"Local\", \"spoolss.printer_attributes.local\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_local),\n\t\t    PRINTER_ATTRIBUTE_LOCAL, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_enable_devq,\n\t\t  { \"Enable devq\", \"spoolss.printer_attributes.enable_devq\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_printer_attributes_enable_devq),\n\t\t    PRINTER_ATTRIBUTE_ENABLE_DEVQ, \"Enable evq\", HFILL }},\n\n\t\t{ &hf_printer_attributes_keep_printed_jobs,\n\t\t  { \"Keep printed jobs\",\n\t\t    \"spoolss.printer_attributes.keep_printed_jobs\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_keep_printed_jobs),\n\t\t    PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_printer_attributes_do_complete_first,\n\t\t  { \"Do complete first\",\n\t\t    \"spoolss.printer_attributes.do_complete_first\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_do_complete_first),\n\t\t    PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_printer_attributes_work_offline,\n\t\t  { \"Work offline (9x/ME only)\",\n\t\t    \"spoolss.printer_attributes.work_offline\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_work_offline),\n\t\t    PRINTER_ATTRIBUTE_WORK_OFFLINE, \"Work offline\", HFILL }},\n\n\t\t{ &hf_printer_attributes_enable_bidi,\n\t\t  { \"Enable bidi (9x/ME only)\",\n\t\t    \"spoolss.printer_attributes.enable_bidi\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_enable_bidi),\n\t\t    PRINTER_ATTRIBUTE_ENABLE_BIDI, \"Enable bidi\", HFILL }},\n\n\t\t{ &hf_printer_attributes_raw_only,\n\t\t  { \"Raw only\", \"spoolss.printer_attributes.raw_only\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_printer_attributes_raw_only),\n\t\t    PRINTER_ATTRIBUTE_RAW_ONLY, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_published,\n\t\t  { \"Published\", \"spoolss.printer_attributes.published\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_printer_attributes_published),\n\t\t    PRINTER_ATTRIBUTE_PUBLISHED, NULL, HFILL }},\n\n\t\t/* Timestamps */\n\n\t\t{ &hf_time_year,\n\t\t  { \"Year\", \"spoolss.time.year\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_month,\n\t\t  { \"Month\", \"spoolss.time.month\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_dow,\n\t\t  { \"Day of week\", \"spoolss.time.dow\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_day,\n\t\t  { \"Day\", \"spoolss.time.day\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_hour,\n\t\t  { \"Hour\", \"spoolss.time.hour\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_minute,\n\t\t  { \"Minute\", \"spoolss.time.minute\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_second,\n\t\t  { \"Second\", \"spoolss.time.second\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_msec,\n\t\t  { \"Millisecond\", \"spoolss.time.msec\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t/* Userlevel */\n\n\t\t{ &hf_userlevel_size,\n\t\t  { \"Size\", \"spoolss.userlevel.size\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_client,\n\t\t  { \"Client\", \"spoolss.userlevel.client\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_user,\n\t\t  { \"User\", \"spoolss.userlevel.user\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_build,\n\t\t  { \"Build\", \"spoolss.userlevel.build\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_major,\n\t\t  { \"Major\", \"spoolss.userlevel.major\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_minor,\n\t\t  { \"Minor\", \"spoolss.userlevel.minor\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_processor,\n\t\t  { \"Processor\", \"spoolss.userlevel.processor\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/* EnumprinterdataEx RPC */\n\n\t\t{ &hf_enumprinterdataex_name_offset,\n\t\t  { \"Name offset\", \"spoolss.enumprinterdataex.name_offset\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_name_len,\n\t\t  { \"Name len\", \"spoolss.enumprinterdataex.name_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_name,\n\t\t  { \"Name\", \"spoolss.enumprinterdataex.name\",\n\t\t    FT_STRING, BASE_NONE, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_val_offset,\n\t\t  { \"Value offset\", \"spoolss.enumprinterdataex.value_offset\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_val_len,\n\t\t  { \"Value len\", \"spoolss.enumprinterdataex.value_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_val_dword_high,\n\t\t  { \"DWORD value (high)\",\n\t\t    \"spoolss.enumprinterdataex.val_dword.high\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_value_null,\n\t\t  { \"Value\",\n\t\t    \"spoolss.enumprinterdataex.val_null\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_value_uint,\n\t\t  { \"Value\",\n\t\t    \"spoolss.enumprinterdataex.val_uint\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_value_binary,\n\t\t  { \"Value\",\n\t\t    \"spoolss.enumprinterdataex.val_binary\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_value_multi_sz,\n\t\t  { \"Value\",\n\t\t    \"spoolss.enumprinterdataex.val_multi_sz\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_val_dword_low,\n\t\t  { \"DWORD value (low)\",\n\t\t    \"spoolss.enumprinterdataex.val_dword.low\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t/* RouterReplyPrinter RPC */\n\n\t\t{ &hf_routerreplyprinter_condition,\n\t\t  { \"Condition\", \"spoolss.routerreplyprinter.condition\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_routerreplyprinter_unknown1,\n\t\t  { \"Unknown1\", \"spoolss.routerreplyprinter.unknown1\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_routerreplyprinter_changeid,\n\t\t  { \"Change id\", \"spoolss.routerreplyprinter.changeid\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/* EnumPrinterKey RPC */\n\n\t\t{ &hf_keybuffer_size,\n\t\t  { \"Key Buffer size\", \"spoolss.keybuffer.size\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, \"Size of buffer\", HFILL }},\n\n\t\t/* SetJob RPC */\n\n\t\t{ &hf_setjob_cmd,\n\t\t  { \"Set job command\", \"spoolss.setjob.cmd\", FT_UINT32,\n\t\t    BASE_DEC, VALS(setjob_commands), 0x0, \"Printer data name\",\n\t\t    HFILL }},\n\n\t\t/* EnumJobs RPC */\n\n\t\t{ &hf_enumjobs_firstjob,\n\t\t  { \"First job\", \"spoolss.enumjobs.firstjob\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, \"Index of first job to return\",\n\t\t    HFILL }},\n\n\t\t{ &hf_enumjobs_numjobs,\n\t\t  { \"Num jobs\", \"spoolss.enumjobs.numjobs\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, \"Number of jobs to return\", HFILL }},\n\n\t\t/* Security descriptor buffer */\n\n\t\t{ &hf_secdescbuf_maxlen,\n\t\t  { \"Max len\", \"spoolss.secdescbuf.max_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_secdescbuf_undoc,\n\t\t  { \"Undocumented\", \"spoolss.secdescbuf.undoc\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_secdescbuf_len,\n\t\t  { \"Length\", \"spoolss.secdescbuf.len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/* Spool printer info */\n\n\t\t{ &hf_spool_printer_info_devmode_ptr,\n\t\t  { \"Devmode pointer\", \"spoolss.spoolprinterinfo.devmode_ptr\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_spool_printer_info_secdesc_ptr,\n\t\t  { \"Secdesc pointer\", \"spoolss.spoolprinterinfo.secdesc_ptr\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t/* WritePrinter RPC */\n\n\t\t{ &hf_writeprinter_numwritten,\n\t\t  { \"Num written\", \"spoolss.writeprinter.numwritten\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0, \"Number of bytes written\",\n\t\t    HFILL }},\n\n\t\t/* Setprinterdataex RPC */\n\n\t\t{ &hf_setprinterdataex_max_len,\n\t\t  { \"Max len\", \"spoolss.setprinterdataex.max_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_setprinterdataex_real_len,\n\t\t  { \"Real len\", \"spoolss.setprinterdataex.real_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_setprinterdataex_data,\n\t\t  { \"Data\", \"spoolss.setprinterdataex.data\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* Specific access rights */\n\n\t\t{ &hf_access_required,\n\t\t  { \"Access required\", \"spoolss.access_required\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0x0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_server_access_admin,\n\t\t  { \"Server admin\", \"spoolss.access_mask.server_admin\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    SERVER_ACCESS_ADMINISTER, NULL, HFILL }},\n\n\t\t{ &hf_server_access_enum,\n\t\t  { \"Server enum\", \"spoolss.access_mask.server_enum\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    SERVER_ACCESS_ENUMERATE, NULL, HFILL }},\n\n\t\t{ &hf_printer_access_admin,\n\t\t  { \"Printer admin\", \"spoolss.access_mask.printer_admin\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ACCESS_ADMINISTER, NULL, HFILL }},\n\n\t\t{ &hf_printer_access_use,\n\t\t  { \"Printer use\", \"spoolss.access_mask.printer_use\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ACCESS_USE, NULL, HFILL }},\n\n\t\t{ &hf_job_access_admin,\n\t\t  { \"Job admin\", \"spoolss.access_mask.job_admin\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    JOB_ACCESS_ADMINISTER, NULL, HFILL }},\n\n\t\t/* Printer information */\n\n\t\t{ &hf_printer_cjobs,\n\t\t  { \"CJobs\", \"spoolss.printer.cjobs\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_total_jobs,\n\t\t  { \"Total jobs\", \"spoolss.printer.total_jobs\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_total_bytes,\n\t\t  { \"Total bytes\", \"spoolss.printer.total_bytes\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_global_counter,\n\t\t  { \"Global counter\", \"spoolss.printer.global_counter\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_total_pages,\n\t\t  { \"Total pages\", \"spoolss.printer.total_pages\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_major_version,\n\t\t  { \"Major version\", \"spoolss.printer.major_version\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_build_version,\n\t\t  { \"Build version\", \"spoolss.printer.build_version\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk7,\n\t\t  { \"Unknown 7\", \"spoolss.printer.unknown7\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk8,\n\t\t  { \"Unknown 8\", \"spoolss.printer.unknown8\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk9,\n\t\t  { \"Unknown 9\", \"spoolss.printer.unknown9\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_session_ctr,\n\t\t  { \"Session counter\", \"spoolss.printer.session_ctr\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, \"Sessopm counter\", HFILL }},\n\n\t\t{ &hf_printer_unk11,\n\t\t  { \"Unknown 11\", \"spoolss.printer.unknown11\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_printer_errors,\n\t\t  { \"Printer errors\", \"spoolss.printer.printer_errors\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk13,\n\t\t  { \"Unknown 13\", \"spoolss.printer.unknown13\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk14,\n\t\t  { \"Unknown 14\", \"spoolss.printer.unknown14\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk15,\n\t\t  { \"Unknown 15\", \"spoolss.printer.unknown15\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk16,\n\t\t  { \"Unknown 16\", \"spoolss.printer.unknown16\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_changeid,\n\t\t  { \"Change id\", \"spoolss.printer.changeid\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk18,\n\t\t  { \"Unknown 18\", \"spoolss.printer.unknown18\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk20,\n\t\t  { \"Unknown 20\", \"spoolss.printer.unknown20\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_c_setprinter,\n\t\t  { \"Csetprinter\", \"spoolss.printer.c_setprinter\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk22,\n\t\t  { \"Unknown 22\", \"spoolss.printer.unknown22\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk23,\n\t\t  { \"Unknown 23\", \"spoolss.printer.unknown23\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk24,\n\t\t  { \"Unknown 24\", \"spoolss.printer.unknown24\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk25,\n\t\t  { \"Unknown 25\", \"spoolss.printer.unknown25\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk26,\n\t\t  { \"Unknown 26\", \"spoolss.printer.unknown26\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk27,\n\t\t  { \"Unknown 27\", \"spoolss.printer.unknown27\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk28,\n\t\t  { \"Unknown 28\", \"spoolss.printer.unknown28\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk29,\n\t\t  { \"Unknown 29\", \"spoolss.printer.unknown29\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_flags,\n\t\t  { \"Flags\", \"spoolss.printer.flags\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_priority,\n\t\t  { \"Priority\", \"spoolss.printer.priority\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_default_priority,\n\t\t  { \"Default Priority\", \"spoolss.printer.default_priority\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_averageppm,\n\t\t  { \"Average PPM\", \"spoolss.printer.averageppm\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_jobs,\n\t\t  { \"Jobs\", \"spoolss.printer.jobs\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_guid,\n\t\t  { \"GUID\", \"spoolss.printer.guid\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_action,\n\t\t  { \"Action\", \"spoolss.printer.action\", FT_UINT32, BASE_DEC,\n\t\t   VALS(getprinter_action_vals), 0, NULL, HFILL }},\n\t};\n\n\tstatic gint *ett[] = {\n\t\t&ett_dcerpc_spoolss,\n\t\t&ett_PRINTER_DATATYPE,\n\t\t&ett_DEVMODE_CTR,\n\t\t&ett_DEVMODE,\n\t\t&ett_DEVMODE_fields,\n\t\t&ett_USER_LEVEL_CTR,\n\t\t&ett_USER_LEVEL_1,\n\t\t&ett_BUFFER,\n\t\t&ett_PRINTER_INFO,\n\t\t&ett_SPOOL_PRINTER_INFO_LEVEL,\n\t\t&ett_PRINTER_INFO_0,\n\t\t&ett_PRINTER_INFO_1,\n\t\t&ett_PRINTER_INFO_2,\n\t\t&ett_PRINTER_INFO_3,\n\t\t&ett_PRINTER_INFO_7,\n\t\t&ett_RELSTR,\n\t\t&ett_RELSTR_ARRAY,\n\t\t&ett_FORM_REL,\n\t\t&ett_FORM_CTR,\n\t\t&ett_FORM_1,\n\t\t&ett_JOB_INFO_1,\n\t\t&ett_JOB_INFO_2,\n\t\t&ett_SEC_DESC_BUF,\n\t\t&ett_SYSTEM_TIME,\n\t\t&ett_DOC_INFO_1,\n\t\t&ett_DOC_INFO,\n\t\t&ett_DOC_INFO_CTR,\n\t\t&ett_printerdata_value,\n\t\t&ett_printerdata_data,\n\t\t&ett_writeprinter_buffer,\n\t\t&ett_DRIVER_INFO_1,\n\t\t&ett_DRIVER_INFO_2,\n\t\t&ett_DRIVER_INFO_3,\n\t\t&ett_DRIVER_INFO_6,\n\t\t&ett_DRIVER_INFO_101,\n\t\t&ett_rffpcnex_flags,\n\t\t&ett_notify_options_flags,\n\t\t&ett_NOTIFY_INFO_DATA,\n\t\t&ett_NOTIFY_OPTION,\n\t\t&ett_printer_attributes,\n\t\t&ett_job_status,\n\t\t&ett_enumprinters_flags,\n\t\t&ett_PRINTER_DATA_CTR,\n\t\t&ett_printer_enumdataex_value,\n\t};\n\n\tstatic ei_register_info ei[] = {\n\t\t{ &ei_unimplemented_dissector, { \"spoolss.unimplemented_dissector\", PI_UNDECODED, PI_WARN, \"Unimplemented dissector: SPOOLSS\", EXPFILL }},\n\t\t{ &ei_unknown_data, { \"spoolss.unknown_data\", PI_UNDECODED, PI_WARN, \"Unknown data follows\", EXPFILL }},\n\t\t{ &ei_printer_info_level, { \"spoolss.printer.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown printer info level\", EXPFILL }},\n\t\t{ &ei_spool_printer_info_level, { \"spoolss.spool_printer.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown spool printer info level\", EXPFILL }},\n\t\t{ &ei_form_level, { \"spoolss.form.level.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown form info level\", EXPFILL }},\n\t\t{ &ei_job_info_level, { \"spoolss.job_info.level.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown job info level\", EXPFILL }},\n\t\t{ &ei_driver_info_level, { \"spoolss.driver_info.level.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown driver info level\", EXPFILL }},\n\t\t{ &ei_level, { \"spoolss.level.unknown\", PI_PROTOCOL, PI_WARN, \"Info level unknown\", EXPFILL }},\n\t\t{ &ei_notify_info_data_type, { \"spoolss.notify_info_data.type.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown notify type\", EXPFILL }},\n\t\t{ &ei_enumprinterdataex_value, { \"spoolss.enumprinterdataex.val_unknown\", PI_PROTOCOL, PI_WARN, \"Unknown value type\", EXPFILL }},\n\t};\n\n\texpert_module_t* expert_dcerpc_spoolss;\n\n\tproto_dcerpc_spoolss = proto_register_protocol(\n\t\t\"Microsoft Spool Subsystem\", \"SPOOLSS\", \"spoolss\");\n\n\tproto_register_field_array(proto_dcerpc_spoolss, hf, array_length(hf));\n\tproto_register_subtree_array(ett, array_length(ett));\n\texpert_dcerpc_spoolss = expert_register_protocol(proto_dcerpc_spoolss);\n\texpert_register_field_array(expert_dcerpc_spoolss, ei, array_length(ei));\n}\n\n/* Protocol handoff */\n\nstatic e_guid_t uuid_dcerpc_spoolss = {\n\t0x12345678, 0x1234, 0xabcd,\n\t{ 0xef, 0x00, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab }\n};\n\nstatic guint16 ver_dcerpc_spoolss = 1;\n\nvoid\nproto_reg_handoff_dcerpc_spoolss(void)\n{\n\n\t/* Register protocol as dcerpc */\n\n\tdcerpc_init_uuid(proto_dcerpc_spoolss, ett_dcerpc_spoolss,\n\t\t\t &uuid_dcerpc_spoolss, ver_dcerpc_spoolss,\n\t\t\t dcerpc_spoolss_dissectors, hf_opnum);\n}\n\n/*\n * Editor modelines  -  http://www.wireshark.org/tools/modelines.html\n *\n * Local variables:\n * c-basic-offset: 8\n * tab-width: 8\n * indent-tabs-mode: t\n * End:\n *\n * vi: set shiftwidth=8 tabstop=8 noexpandtab:\n * :indentSize=8:tabSize=8:noTabs=false:\n */\n"], "fixing_code": ["/* packet-dcerpc-spoolss.c\n * Routines for SMB \\PIPE\\spoolss packet disassembly\n * Copyright 2001-2003, Tim Potter <tpot@samba.org>\n *\n * Wireshark - Network traffic analyzer\n * By Gerald Combs <gerald@wireshark.org>\n * Copyright 1998 Gerald Combs\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\n/* TODO list:\n\n - audit of item lengths\n\n*/\n\n#include \"config.h\"\n\n\n#include <epan/packet.h>\n#include <epan/expert.h>\n#include \"packet-dcerpc.h\"\n#include \"packet-dcerpc-nt.h\"\n#include \"packet-dcerpc-spoolss.h\"\n#include \"packet-windows-common.h\"\n\nvoid proto_register_dcerpc_spoolss(void);\nvoid proto_reg_handoff_dcerpc_spoolss(void);\n\n/* GetPrinterDriver2 */\n\nstatic int hf_clientmajorversion = -1;\nstatic int hf_clientminorversion = -1;\nstatic int hf_servermajorversion = -1;\nstatic int hf_serverminorversion = -1;\nstatic int hf_driverpath = -1;\nstatic int hf_datafile = -1;\nstatic int hf_configfile = -1;\nstatic int hf_helpfile = -1;\nstatic int hf_monitorname = -1;\nstatic int hf_defaultdatatype = -1;\nstatic int hf_driverinfo_cversion = -1;\nstatic int hf_dependentfiles = -1;\nstatic int hf_previousdrivernames = -1;\nstatic int hf_driverdate = -1;\nstatic int hf_padding = -1;\nstatic int hf_driver_version_low = -1;\nstatic int hf_driver_version_high = -1;\nstatic int hf_mfgname = -1;\nstatic int hf_oemurl = -1;\nstatic int hf_hardwareid= -1;\nstatic int hf_provider = -1;\n\n/* GetPrinter */\n\n/* Times */\n\nstatic int hf_start_time = -1;\nstatic int hf_end_time = -1;\nstatic int hf_elapsed_time = -1;\n\n/****************************************************************************/\n\n/*\n * New hf index values - I'm in the process of doing a bit of a cleanup -tpot\n */\n\nstatic int hf_opnum = -1;\nstatic int hf_hnd = -1;\nstatic int hf_rc = -1;\nstatic int hf_offered = -1;\nstatic int hf_needed = -1;\nstatic int hf_returned = -1;\nstatic int hf_buffer_size = -1;\nstatic int hf_buffer_data = -1;\nstatic int hf_string_parm_size = -1;\nstatic int hf_string_parm_data= -1;\nstatic int hf_offset = -1;\nstatic int hf_level = -1;\nstatic int hf_access_required = -1;\n\nstatic int hf_printername = -1;\nstatic int hf_machinename = -1;\nstatic int hf_notifyname = -1;\nstatic int hf_printerdesc = -1;\nstatic int hf_printercomment = -1;\nstatic int hf_servername = -1;\nstatic int hf_sharename = -1;\nstatic int hf_portname = -1;\nstatic int hf_printerlocation = -1;\nstatic int hf_drivername = -1;\nstatic int hf_environment = -1;\nstatic int hf_username = -1;\nstatic int hf_documentname = -1;\nstatic int hf_outputfile = -1;\nstatic int hf_datatype = -1;\nstatic int hf_textstatus = -1;\nstatic int hf_sepfile = -1;\nstatic int hf_printprocessor = -1;\nstatic int hf_parameters = -1;\n\n/* Printer information */\n\nstatic int hf_printer_cjobs = -1;\nstatic int hf_printer_total_jobs = -1;\nstatic int hf_printer_total_bytes = -1;\nstatic int hf_printer_global_counter = -1;\nstatic int hf_printer_total_pages = -1;\nstatic int hf_printer_major_version = -1;\nstatic int hf_printer_build_version = -1;\nstatic int hf_printer_unk7 = -1;\nstatic int hf_printer_unk8 = -1;\nstatic int hf_printer_unk9 = -1;\nstatic int hf_printer_session_ctr = -1;\nstatic int hf_printer_unk11 = -1;\nstatic int hf_printer_printer_errors = -1;\nstatic int hf_printer_unk13 = -1;\nstatic int hf_printer_unk14 = -1;\nstatic int hf_printer_unk15 = -1;\nstatic int hf_printer_unk16 = -1;\nstatic int hf_printer_changeid = -1;\nstatic int hf_printer_unk18 = -1;\nstatic int hf_printer_unk20 = -1;\nstatic int hf_printer_c_setprinter = -1;\nstatic int hf_printer_unk22 = -1;\nstatic int hf_printer_unk23 = -1;\nstatic int hf_printer_unk24 = -1;\nstatic int hf_printer_unk25 = -1;\nstatic int hf_printer_unk26 = -1;\nstatic int hf_printer_unk27 = -1;\nstatic int hf_printer_unk28 = -1;\nstatic int hf_printer_unk29 = -1;\nstatic int hf_printer_flags = -1;\nstatic int hf_printer_priority = -1;\nstatic int hf_printer_default_priority = -1;\nstatic int hf_printer_jobs = -1;\nstatic int hf_printer_averageppm = -1;\nstatic int hf_printer_guid = -1;\nstatic int hf_printer_action = -1;\n\n/* Printer data */\n\nstatic int hf_printerdata = -1;\nstatic int hf_printerdata_key = -1;\nstatic int hf_printerdata_value = -1;\nstatic int hf_printerdata_type = -1;\nstatic int hf_printerdata_size = -1; /* Length of printer data */\nstatic int hf_printerdata_data = -1;\nstatic int hf_printerdata_data_sz = -1;\nstatic int hf_printerdata_data_dword = -1;\n\n/* Devicemode */\n\nstatic int hf_devmodectr_size = -1;\n\nstatic int hf_devmode = -1;\nstatic int hf_devmode_size = -1;\nstatic int hf_devmode_spec_version = -1;\nstatic int hf_devmode_driver_version = -1;\nstatic int hf_devmode_size2 = -1;\nstatic int hf_devmode_driver_extra_len = -1;\nstatic int hf_devmode_fields = -1;\nstatic int hf_devmode_orientation = -1;\nstatic int hf_devmode_paper_size = -1;\nstatic int hf_devmode_paper_width = -1;\nstatic int hf_devmode_paper_length = -1;\nstatic int hf_devmode_scale = -1;\nstatic int hf_devmode_copies = -1;\nstatic int hf_devmode_default_source = -1;\nstatic int hf_devmode_print_quality = -1;\nstatic int hf_devmode_color = -1;\nstatic int hf_devmode_duplex = -1;\nstatic int hf_devmode_y_resolution = -1;\nstatic int hf_devmode_tt_option = -1;\nstatic int hf_devmode_collate = -1;\nstatic int hf_devmode_log_pixels = -1;\nstatic int hf_devmode_bits_per_pel = -1;\nstatic int hf_devmode_pels_width = -1;\nstatic int hf_devmode_pels_height = -1;\nstatic int hf_devmode_display_flags = -1;\nstatic int hf_devmode_display_freq = -1;\nstatic int hf_devmode_icm_method = -1;\nstatic int hf_devmode_icm_intent = -1;\nstatic int hf_devmode_media_type = -1;\nstatic int hf_devmode_dither_type = -1;\nstatic int hf_devmode_reserved1 = -1;\nstatic int hf_devmode_reserved2 = -1;\nstatic int hf_devmode_panning_width = -1;\nstatic int hf_devmode_panning_height = -1;\nstatic int hf_devmode_driver_extra = -1;\n\nstatic int hf_devmode_fields_orientation = -1;\nstatic int hf_devmode_fields_papersize = -1;\nstatic int hf_devmode_fields_paperlength = -1;\nstatic int hf_devmode_fields_paperwidth = -1;\nstatic int hf_devmode_fields_scale = -1;\nstatic int hf_devmode_fields_position = -1;\nstatic int hf_devmode_fields_nup = -1;\nstatic int hf_devmode_fields_copies = -1;\nstatic int hf_devmode_fields_defaultsource = -1;\nstatic int hf_devmode_fields_printquality = -1;\nstatic int hf_devmode_fields_color = -1;\nstatic int hf_devmode_fields_duplex = -1;\nstatic int hf_devmode_fields_yresolution = -1;\nstatic int hf_devmode_fields_ttoption = -1;\nstatic int hf_devmode_fields_collate = -1;\nstatic int hf_devmode_fields_formname = -1;\nstatic int hf_devmode_fields_logpixels = -1;\nstatic int hf_devmode_fields_bitsperpel = -1;\nstatic int hf_devmode_fields_pelswidth = -1;\nstatic int hf_devmode_fields_pelsheight = -1;\nstatic int hf_devmode_fields_displayflags = -1;\nstatic int hf_devmode_fields_displayfrequency = -1;\nstatic int hf_devmode_fields_icmmethod = -1;\nstatic int hf_devmode_fields_icmintent = -1;\nstatic int hf_devmode_fields_mediatype = -1;\nstatic int hf_devmode_fields_dithertype = -1;\nstatic int hf_devmode_fields_panningwidth = -1;\nstatic int hf_devmode_fields_panningheight = -1;\n\n/* Print job */\n\nstatic int hf_job_id = -1;\nstatic int hf_job_priority = -1;\nstatic int hf_job_position = -1;\nstatic int hf_job_totalpages = -1;\nstatic int hf_job_totalbytes = -1;\nstatic int hf_job_pagesprinted = -1;\nstatic int hf_job_bytesprinted = -1;\nstatic int hf_job_size = -1;\n\nstatic int hf_job_status = -1;\nstatic int hf_job_status_paused = -1;\nstatic int hf_job_status_error = -1;\nstatic int hf_job_status_deleting = -1;\nstatic int hf_job_status_spooling = -1;\nstatic int hf_job_status_printing = -1;\nstatic int hf_job_status_offline = -1;\nstatic int hf_job_status_paperout = -1;\nstatic int hf_job_status_printed = -1;\nstatic int hf_job_status_deleted = -1;\nstatic int hf_job_status_blocked = -1;\nstatic int hf_job_status_user_intervention = -1;\n\n/* Forms */\n\nstatic int hf_form = -1;\nstatic int hf_form_level = -1;\nstatic int hf_form_name = -1;\nstatic int hf_form_flags = -1;\nstatic int hf_form_unknown = -1;\nstatic int hf_form_width = -1;\nstatic int hf_form_height = -1;\nstatic int hf_form_left_margin = -1;\nstatic int hf_form_top_margin = -1;\nstatic int hf_form_horiz_len = -1;\nstatic int hf_form_vert_len = -1;\n\nstatic int hf_enumforms_num = -1;\n\n/* Print notify */\n\nstatic int hf_notify_options_version = -1;\nstatic int hf_notify_options_flags = -1;\nstatic int hf_notify_options_flags_refresh = -1;\nstatic int hf_notify_options_count = -1;\nstatic int hf_notify_option_type = -1;\nstatic int hf_notify_option_reserved1 = -1;\nstatic int hf_notify_option_reserved2 = -1;\nstatic int hf_notify_option_reserved3 = -1;\nstatic int hf_notify_option_count = -1;\nstatic int hf_notify_option_data_count = -1;\nstatic int hf_notify_info_count = -1;\nstatic int hf_notify_info_version = -1;\nstatic int hf_notify_info_flags = -1;\nstatic int hf_notify_info_data_type = -1;\nstatic int hf_notify_info_data_count = -1;\nstatic int hf_notify_info_data_id = -1;\nstatic int hf_notify_info_data_value1 = -1;\nstatic int hf_notify_info_data_value2 = -1;\nstatic int hf_notify_info_data_bufsize = -1;\nstatic int hf_notify_info_data_buffer = -1;\nstatic int hf_notify_info_data_buffer_len = -1;\nstatic int hf_notify_info_data_buffer_data = -1;\n\nstatic int hf_notify_field = -1;\n\nstatic int hf_printerlocal = -1;\n\nstatic int hf_rrpcn_changelow = -1;\nstatic int hf_rrpcn_changehigh = -1;\nstatic int hf_rrpcn_unk0 = -1;\nstatic int hf_rrpcn_unk1 = -1;\n\nstatic int hf_replyopenprinter_unk0 = -1;\nstatic int hf_replyopenprinter_unk1 = -1;\n\nstatic int hf_devmode_devicename = -1;\nstatic int hf_devmode_form_name = -1;\nstatic int hf_relative_string = -1;\nstatic int hf_value_name = -1;\nstatic int hf_keybuffer = -1;\nstatic int hf_value_string = -1;\n\nstatic expert_field ei_unimplemented_dissector = EI_INIT;\nstatic expert_field ei_unknown_data = EI_INIT;\nstatic expert_field ei_spool_printer_info_level = EI_INIT;\nstatic expert_field ei_printer_info_level = EI_INIT;\nstatic expert_field ei_form_level = EI_INIT;\nstatic expert_field ei_job_info_level = EI_INIT;\nstatic expert_field ei_driver_info_level = EI_INIT;\nstatic expert_field ei_level = EI_INIT;\nstatic expert_field ei_notify_info_data_type = EI_INIT;\nstatic expert_field ei_enumprinterdataex_value = EI_INIT;\n\n/* Registry data types */\n\n#define DCERPC_REG_NONE                        0\n#define DCERPC_REG_SZ                          1\n#define DCERPC_REG_EXPAND_SZ                   2\n#define DCERPC_REG_BINARY                      3\n#define DCERPC_REG_DWORD                       4\n#define DCERPC_REG_DWORD_LE                    4        /* DWORD, little endian\n*/\n#define DCERPC_REG_DWORD_BE                    5        /* DWORD, big endian */\n#define DCERPC_REG_LINK                        6\n#define DCERPC_REG_MULTI_SZ                    7\n#define DCERPC_REG_RESOURCE_LIST               8\n#define DCERPC_REG_FULL_RESOURCE_DESCRIPTOR    9\n#define DCERPC_REG_RESOURCE_REQUIREMENTS_LIST 10\n\nstatic const value_string reg_datatypes[] = {\n\t{ DCERPC_REG_NONE, \"REG_NONE\" },\n\t{ DCERPC_REG_SZ, \"REG_SZ\" },\n\t{ DCERPC_REG_EXPAND_SZ, \"REG_EXPAND_SZ\" },\n\t{ DCERPC_REG_BINARY, \"REG_BINARY\" },\n\t{ DCERPC_REG_DWORD, \"REG_DWORD\" },\n/*\t  { DCERPC_REG_DWORD_LE, \"REG_DWORD_LE\" }, */\n\t{ DCERPC_REG_DWORD_BE, \"REG_DWORD_BE\" },\n\t{ DCERPC_REG_LINK, \"REG_LINK\" },\n\t{ DCERPC_REG_MULTI_SZ, \"REG_MULTI_SZ\" },\n\t{ DCERPC_REG_RESOURCE_LIST, \"REG_RESOURCE_LIST\" },\n\t{ DCERPC_REG_FULL_RESOURCE_DESCRIPTOR, \"REG_FULL_RESOURCE_DESCRIPTOR\" },\n\t{ DCERPC_REG_RESOURCE_REQUIREMENTS_LIST, \"REG_RESOURCE_REQUIREMENTS_LIST\" },\n\t{0, NULL }\n};\nstatic value_string_ext reg_datatypes_ext = VALUE_STRING_EXT_INIT(reg_datatypes);\n\n/****************************************************************************/\n\n/*\n * Dissect SPOOLSS specific access rights\n */\n\nstatic int hf_server_access_admin = -1;\nstatic int hf_server_access_enum = -1;\nstatic int hf_printer_access_admin = -1;\nstatic int hf_printer_access_use = -1;\nstatic int hf_job_access_admin = -1;\n\nstatic void\nspoolss_printer_specific_rights(tvbuff_t *tvb, gint offset, proto_tree *tree,\n\t\t\t\tguint32 access)\n{\n\tproto_tree_add_boolean(\n\t\ttree, hf_printer_access_use, tvb, offset, 4, access);\n\n\tproto_tree_add_boolean(\n\t\ttree, hf_printer_access_admin, tvb, offset, 4, access);\n}\n\nstruct access_mask_info spoolss_printer_access_mask_info = {\n\t\"SPOOLSS printer\",\n\tspoolss_printer_specific_rights,\n\tNULL,\t\t\t/* Generic mapping table */\n\tNULL\t\t\t/* Standard mapping table */\n};\n\nstatic void\nspoolss_printserver_specific_rights(tvbuff_t *tvb, gint offset,\n\t\t\t\t    proto_tree *tree, guint32 access)\n{\n\tproto_tree_add_boolean(\n\t\ttree, hf_server_access_enum, tvb, offset, 4, access);\n\n\tproto_tree_add_boolean(\n\t\ttree, hf_server_access_admin, tvb, offset, 4, access);\n}\n\nstruct access_mask_info spoolss_printserver_access_mask_info = {\n\t\"SPOOLSS print server\",\n\tspoolss_printserver_specific_rights,\n\tNULL,\t\t\t/* Generic mapping table */\n\tNULL\t\t\t/* Standard mapping table */\n};\n\nstatic void\nspoolss_job_specific_rights(tvbuff_t *tvb, gint offset,\n\t\t\t    proto_tree *tree, guint32 access)\n{\n\tproto_tree_add_boolean(\n\t\ttree, hf_job_access_admin, tvb, offset, 4, access);\n}\n\nstruct access_mask_info spoolss_job_access_mask_info = {\n\t\"SPOOLSS job\",\n\tspoolss_job_specific_rights,\n\tNULL,\t\t\t/* Generic mapping table */\n\tNULL\t\t\t/* Standard mapping table */\n};\n\n/*\n * Routines to dissect a spoolss BUFFER\n */\n\ntypedef struct {\n\ttvbuff_t *tvb;\n\tproto_item *tree;\t/* Proto tree buffer located in */\n\tproto_item *item;\n} BUFFER;\n\nstatic gint ett_BUFFER = -1;\n\nstatic int\ndissect_spoolss_buffer_data(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tBUFFER *b = (BUFFER *)di->private_data;\n\tproto_item *item;\n\tguint32 size;\n\tconst guint8 *data;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\t/* Dissect size and data */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_buffer_size, &size);\n\n\toffset = dissect_ndr_uint8s(tvb, offset, pinfo, NULL, di, drep,\n\t\t\t\t    hf_buffer_data, size, &data);\n\n\titem = proto_tree_add_item(\n\t\ttree, hf_buffer_data, tvb, offset - size,\n\t\tsize, ENC_NA);\n\n\t/* Return buffer info */\n\n\tif (b) {\n\n\t\t/* I'm not sure about this.  Putting the buffer into\n\t\t   its own tvb makes sense and the dissection code is\n\t\t   much clearer, but the data is a proper subset of\n\t\t   the actual tvb.  Not adding the new data source\n\t\t   makes the hex display confusing as it switches\n\t\t   between the 'DCERPC over SMB' tvb and the buffer\n\t\t   tvb with no visual cues as to what is going on. */\n\n\t\tb->tvb = tvb_new_child_real_data(tvb, data, size, size);\n\t\tadd_new_data_source(pinfo, b->tvb, \"SPOOLSS buffer\");\n\n\t\tb->item = item;\n\t\tb->tree = proto_item_add_subtree(item, ett_BUFFER);\n\t}\n\n\treturn offset;\n}\n\n/* Dissect a spoolss buffer and return buffer data */\n\nstatic int\ndissect_spoolss_buffer(tvbuff_t *tvb, gint offset, packet_info *pinfo,\n\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep, BUFFER *b)\n{\n\tif (b)\n\t\tmemset(b, 0, sizeof(BUFFER));\n\n\tdi->private_data = b;\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_spoolss_buffer_data, NDR_POINTER_UNIQUE,\n\t\t\"Buffer\", -1);\n\n\treturn offset;\n}\n\nstatic int\ndissect_spoolss_string_parm_data(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 buffer_len, len;\n\tgchar *s;\n\tproto_item *item = NULL;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\t/* Dissect size and data */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\thf_string_parm_size, &buffer_len);\n\n\ts = tvb_get_stringz_enc(wmem_packet_scope(), tvb, offset, &len, ENC_UTF_16|ENC_LITTLE_ENDIAN);\n\n\tif (tree && buffer_len) {\n\t\ttvb_ensure_bytes_exist(tvb, offset, buffer_len);\n\n\t\titem = proto_tree_add_string(\n\t\t\ttree, hf_string_parm_data, tvb, offset, len, s);\n\t}\n\toffset += buffer_len;\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", s);\n\n\t/* Append string to upper level item */\n\tif (tree && item) {\n\t\titem = item->parent != NULL ? item->parent : item;\n\t\tproto_item_append_text(item, \": %s\", s);\n\t}\n\n\treturn offset;\n}\n\n/* Dissect a spoolss string parameter */\n\nstatic int\ndissect_spoolss_string_parm(tvbuff_t *tvb, gint offset, packet_info *pinfo,\n\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep, const char *text)\n{\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_spoolss_string_parm_data, NDR_POINTER_UNIQUE,\n\t\ttext, -1);\n\n\treturn offset;\n}\n\n/*\n * SYSTEM_TIME\n */\n\nstatic gint ett_SYSTEM_TIME = -1;\n\nstatic int hf_time_year = -1;\nstatic int hf_time_month = -1;\nstatic int hf_time_dow = -1;\nstatic int hf_time_day = -1;\nstatic int hf_time_hour = -1;\nstatic int hf_time_minute = -1;\nstatic int hf_time_second = -1;\nstatic int hf_time_msec = -1;\n\nstatic int\ndissect_SYSTEM_TIME(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep, const char *name,\n\t\t    gboolean add_subtree, char **data)\n{\n\tproto_item *item = NULL;\n\tproto_tree *subtree = tree;\n\tguint16 year, month, day, hour, minute, second, millisecond;\n\tchar *str;\n\n\tif (add_subtree) {\n\t\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 16, ett_SYSTEM_TIME, &item, name);\n\t}\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_year, &year);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_month, &month);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_dow, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_day, &day);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_hour, &hour);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_minute, &minute);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_second, &second);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_time_msec, &millisecond);\n\n\tstr = wmem_strdup_printf(wmem_packet_scope(),\n\t\t\t      \"%d/%02d/%02d %02d:%02d:%02d.%03d\",\n\t\t\t      year, month, day, hour, minute, second,\n\t\t\t      millisecond);\n\n\tif (add_subtree)\n\t\tproto_item_append_text(item, \": %s\", str);\n\n\tif (data)\n\t\t*data = str;\n\n\treturn offset;\n}\n\nstatic int\ndissect_SYSTEM_TIME_ptr(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *str;\n\n\n\toffset =  dissect_SYSTEM_TIME(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL, FALSE, &str);\n\tdcv->private_data = str;\n\n\treturn offset;\n}\n\n/*\n * SpoolssClosePrinter\n */\n\nstatic int\nSpoolssClosePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep _U_)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, TRUE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssClosePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/* Dissect some printer data.  The get/set/enum printerdata routines all\n   store value/data in a uint8 array.  We could use the ndr routines for\n   this but that would result in one item for each byte in the printer\n   data. */\n\nstatic gint ett_printerdata_data = -1;\nstatic gint ett_printerdata_value = -1;\n\nstatic int\ndissect_printerdata_data(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep _U_, guint32 type)\n{\n\tproto_item *item, *hidden_item;\n\tproto_tree *subtree;\n\tguint32 size;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_printerdata_data, &item, \"Data\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printerdata_size, &size);\n\n\tif (size) {\n\n\t\toffset = dissect_ndr_uint8s(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_printerdata_data, size, NULL);\n\n\t\tswitch(type) {\n\t\tcase DCERPC_REG_SZ: {\n\t\t\tchar *data = tvb_get_string_enc(NULL, tvb, offset - size, size, ENC_UTF_16|ENC_LITTLE_ENDIAN);\n\n\t\t\tproto_item_append_text(item, \": %s\", data);\n\n\t\t\tcol_append_fstr(\n\t\t\t\t\tpinfo->cinfo, COL_INFO, \" = %s\", data);\n\n\t\t\thidden_item = proto_tree_add_string(\n\t\t\t\ttree, hf_printerdata_data_sz, tvb,\n\t\t\t\toffset - size, size, data);\n\t\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t\t\tg_free(data);\n\n\t\t\tbreak;\n\t\t}\n\t\tcase DCERPC_REG_DWORD: {\n\t\t\tguint32 data = tvb_get_letohl(tvb, offset - size);\n\n\t\t\tproto_item_append_text(item, \": 0x%08x\", data);\n\n\t\t\tcol_append_fstr(\n\t\t\t\t\tpinfo->cinfo, COL_INFO, \" = 0x%08x\",\n\t\t\t\t\tdata);\n\n\t\t\thidden_item = proto_tree_add_uint(\n\t\t\t\ttree, hf_printerdata_data_dword, tvb,\n\t\t\t\toffset - size, 4, data);\n\t\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t\t\tbreak;\n\t\t}\n\t\tcase DCERPC_REG_BINARY:\n\t\t\tcol_append_str(\n\t\t\t\t\tpinfo->cinfo, COL_INFO,\n\t\t\t\t\t\" = <binary data>\");\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tproto_item_set_len(item, size + 4);\n\n\treturn offset;\n}\n\n/*\n * SpoolssGetPrinterData\n */\n\nstatic int\nSpoolssGetPrinterData_q(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *value_name;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\n\tvalue_name=NULL;\n \toffset = dissect_ndr_cvstring(\n \t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n \t\thf_printerdata_value, TRUE, value_name ? NULL : &value_name);\n\t/* GetPrinterData() stores the printerdata in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tif(value_name){\n\t\t\t\tdcv->se_data = wmem_strdup(wmem_file_scope(), value_name);\n\t\t\t}\n\t\t}\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", value_name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterData_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 type;\n\tproto_item *hidden_item;\n\tconst char *data;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_printerdata_type, &type);\n\n\tdata = (const char *)(dcv->se_data ? dcv->se_data : \"????\");\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", data);\n\n\toffset = dissect_printerdata_data(\n\t\ttvb, offset, pinfo, tree, di, drep, type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssGetPrinterDataEx\n */\n\nstatic int\nSpoolssGetPrinterDataEx_q(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *key_name, *value_name;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\tkey_name=NULL;\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_key, TRUE, &key_name);\n\n\tvalue_name=NULL;\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_value, TRUE, &value_name);\n\n\t/* GetPrinterDataEx() stores the key/value in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tdcv->se_data = wmem_strdup_printf(wmem_file_scope(),\n\t\t\t\t\"%s==%s\",\n\t\t\t\tkey_name?key_name:\"\",\n\t\t\t\tvalue_name?value_name:\"\");\n\t\t}\n\t}\n\n\tif (dcv->se_data)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\t(char *)dcv->se_data);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterDataEx_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 size, type;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerdata_type, &type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_returned, &size);\n\n\tif (dcv->se_data) {\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", (char *)dcv->se_data);\n\t}\n\n\tif (size)\n\t\tdissect_printerdata_data(tvb, offset, pinfo, tree, di, drep, type);\n\n\toffset += size;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssSetPrinterData\n */\n\nstatic int\nSpoolssSetPrinterData_q(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *value_name;\n\tguint32 type;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\tvalue_name=NULL;\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_value, TRUE, &value_name);\n\n\t/* GetPrinterDataEx() stores the key/value in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tdcv->se_data = wmem_strdup_printf(wmem_file_scope(),\n\t\t\t\t\"%s\", value_name?value_name:\"\");\n\t\t}\n\t}\n\n\n\tif (dcv->se_data){\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", (char *)dcv->se_data);\n\t}\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_printerdata_type, &type);\n\n\toffset = dissect_printerdata_data(\n\t\ttvb, offset, pinfo, tree, di, drep, type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetPrinterData_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssSetPrinterDataEx\n */\n\nstatic int hf_setprinterdataex_max_len = -1;\nstatic int hf_setprinterdataex_real_len = -1;\nstatic int hf_setprinterdataex_data = -1;\n\nstatic int\nSpoolssSetPrinterDataEx_q(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tchar *key_name, *value_name;\n\tguint32 max_len;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_key, TRUE, &key_name);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_value, TRUE, &value_name);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s/%s\",\n\t\t\t\tkey_name, value_name);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_printerdata_type, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_setprinterdataex_max_len, &max_len);\n\n\toffset = dissect_ndr_uint8s(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_setprinterdataex_data, max_len, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_setprinterdataex_real_len, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetPrinterDataEx_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/* XXX - \"name\" should be an hf_ value for an FT_STRING. */\nstatic int\ndissect_spoolss_uint16uni(tvbuff_t *tvb, int offset, packet_info *pinfo _U_,\n\t\t\t  proto_tree *tree, guint8 *drep _U_, char **data,\n\t\t\t  int hf_name)\n{\n\tgint len, remaining;\n\tchar *text;\n\n\tif (offset % 2)\n\t\toffset += 2 - (offset % 2);\n\n\t/* Get remaining data in buffer as a string */\n\n\tremaining = tvb_reported_length_remaining(tvb, offset);\n\tif (remaining <= 0) {\n\t\tif (data)\n\t\t\t*data = g_strdup(\"\");\n\t\treturn offset;\n\t}\n\n\ttext = tvb_get_string_enc(NULL, tvb, offset, remaining, ENC_UTF_16|ENC_LITTLE_ENDIAN);\n\tlen = (int)strlen(text);\n\n\tproto_tree_add_string(tree, hf_name, tvb, offset, len * 2, text);\n\n\tif (data)\n\t\t*data = text;\n\telse\n\t\tg_free(text);\n\n\treturn offset + (len + 1) * 2;\n}\n\n/*\n * DEVMODE\n */\n\n/* Devicemode orientation values */\n\nstatic const value_string devmode_orientation_vals[] =\n{\n\t{ DEVMODE_ORIENTATION_PORTRAIT, \"Portrait\" },\n\t{ DEVMODE_ORIENTATION_LANDSCAPE, \"Landscape\" },\n\t{ 0, NULL }\n};\n\n/* Paper size values.  International paper sizes is a fascinating\n   topic.  No seriously!  (-: */\n\nstatic const value_string devmode_papersize_vals[] =\n{\n\t{ DEVMODE_PAPERSIZE_LETTER, \"Letter\" },\n\t{ DEVMODE_PAPERSIZE_LETTERSMALL, \"Letter (small)\" },\n\t{ DEVMODE_PAPERSIZE_TABLOID, \"Tabloid\" },\n\t{ DEVMODE_PAPERSIZE_LEDGER, \"Ledger\" },\n\t{ DEVMODE_PAPERSIZE_LEGAL, \"Legal\" },\n\t{ DEVMODE_PAPERSIZE_STATEMENT, \"Statement\" },\n\t{ DEVMODE_PAPERSIZE_EXECUTIVE, \"Executive\" },\n\t{ DEVMODE_PAPERSIZE_A3, \"A3\" },\n\t{ DEVMODE_PAPERSIZE_A4, \"A4\" },\n\t{ DEVMODE_PAPERSIZE_A4SMALL, \"A4 (small)\" },\n\t{ DEVMODE_PAPERSIZE_A5, \"A5\" },\n\t{ DEVMODE_PAPERSIZE_B4, \"B4\" },\n\t{ DEVMODE_PAPERSIZE_B5, \"B5\" },\n\t{ DEVMODE_PAPERSIZE_FOLIO, \"Folio\" },\n\t{ DEVMODE_PAPERSIZE_QUARTO, \"Quarto\" },\n\t{ DEVMODE_PAPERSIZE_10X14, \"10x14\" },\n\t{ DEVMODE_PAPERSIZE_11X17, \"11x17\" },\n\t{ DEVMODE_PAPERSIZE_NOTE, \"Note\" },\n\t{ DEVMODE_PAPERSIZE_ENV9, \"Envelope #9\" },\n\t{ DEVMODE_PAPERSIZE_ENV10, \"Envelope #10\" },\n\t{ DEVMODE_PAPERSIZE_ENV11, \"Envelope #11\" },\n\t{ DEVMODE_PAPERSIZE_ENV12, \"Envelope #12\" },\n\t{ DEVMODE_PAPERSIZE_ENV14, \"Envelope #14\" },\n\t{ DEVMODE_PAPERSIZE_CSHEET, \"C sheet\" },\n\t{ DEVMODE_PAPERSIZE_DSHEET, \"D sheet\" },\n\t{ DEVMODE_PAPERSIZE_ESHEET, \"E sheet\" },\n\t{ DEVMODE_PAPERSIZE_ENVDL, \"Envelope DL\" },\n\t{ DEVMODE_PAPERSIZE_ENVC5, \"Envelope C5\" },\n\t{ DEVMODE_PAPERSIZE_ENVC3, \"Envelope C3\" },\n\t{ DEVMODE_PAPERSIZE_ENVC4, \"Envelope C4\" },\n\t{ DEVMODE_PAPERSIZE_ENVC6, \"Envelope C6\" },\n\t{ DEVMODE_PAPERSIZE_ENVC65, \"Envelope C65\" },\n\t{ DEVMODE_PAPERSIZE_ENVB4, \"Envelope B4\" },\n\t{ DEVMODE_PAPERSIZE_ENVB5, \"Envelope B5\" },\n\t{ DEVMODE_PAPERSIZE_ENVB6, \"Envelope B6\" },\n\t{ DEVMODE_PAPERSIZE_ENVITALY, \"Envelope (Italy)\" },\n\t{ DEVMODE_PAPERSIZE_ENVMONARCH, \"Envelope (Monarch)\" },\n\t{ DEVMODE_PAPERSIZE_ENVPERSONAL, \"Envelope (Personal)\" },\n\t{ DEVMODE_PAPERSIZE_FANFOLDUS, \"Fanfold (US)\" },\n\t{ DEVMODE_PAPERSIZE_FANFOLDSTDGERMAN, \"Fanfold (Std German)\" },\n\t{ DEVMODE_PAPERSIZE_FANFOLDLGLGERMAN, \"Fanfold (Legal German)\" },\n\t{ DEVMODE_PAPERSIZE_ISOB4, \"B4 (ISO)\" },\n\t{ DEVMODE_PAPERSIZE_JAPANESEPOSTCARD, \"Japanese postcard\" },\n\t{ DEVMODE_PAPERSIZE_9X11, \"9x11\" },\n\t{ DEVMODE_PAPERSIZE_10X11, \"10x11\" },\n\t{ DEVMODE_PAPERSIZE_15X11, \"15x11\" },\n\t{ DEVMODE_PAPERSIZE_ENVINVITE, \"Envelope (Invite)\" },\n\t{ DEVMODE_PAPERSIZE_RESERVED48, \"Reserved (48)\" },\n\t{ DEVMODE_PAPERSIZE_RESERVED49, \"Reserved (49)\" },\n\t{ DEVMODE_PAPERSIZE_LETTEREXTRA, \"Letter (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_LEGALEXTRA, \"Legal (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_TABLOIDEXTRA, \"Tabloid (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_A4EXTRA, \"A4 (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_LETTERTRANS, \"Letter (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_A4TRANS, \"A4 (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_LETTEREXTRATRANS, \"Letter (Extra, Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_APLUS, \"A+\" },\n\t{ DEVMODE_PAPERSIZE_BPLUS, \"B+\" },\n\t{ DEVMODE_PAPERSIZE_LETTERPLUS, \"Letter+\" },\n\t{ DEVMODE_PAPERSIZE_A4PLUS, \"A4+\" },\n\t{ DEVMODE_PAPERSIZE_A5TRANS, \"A5 (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_B5TRANS, \"B5 (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_A3EXTRA, \"A3 (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_A5EXTRA, \"A5 (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_B5EXTRA, \"B5 (Extra)\" },\n\t{ DEVMODE_PAPERSIZE_A2, \"A2\" },\n\t{ DEVMODE_PAPERSIZE_A3TRANS, \"A3 (Transverse)\" },\n\t{ DEVMODE_PAPERSIZE_A3EXTRATRANS, \"A3 (Extra, Transverse\" },\n\t{ DEVMODE_PAPERSIZE_DBLJAPANESEPOSTCARD, \"Double Japanese Postcard\" },\n\t{ DEVMODE_PAPERSIZE_A6, \"A6\" },\n\t{ DEVMODE_PAPERSIZE_JENVKAKU2, \"Japanese Envelope (Kaku #2)\" },\n\t{ DEVMODE_PAPERSIZE_JENVKAKU3, \"Japanese Envelope (Kaku #3)\" },\n\t{ DEVMODE_PAPERSIZE_JENVCHOU3, \"Japanese Envelope (Chou #3)\" },\n\t{ DEVMODE_PAPERSIZE_JENVCHOU4, \"Japaneve Envelope (Chou #4)\" },\n\t{ DEVMODE_PAPERSIZE_LETTERROT, \"Letter (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_A3ROT, \"A3 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_A4ROT, \"A4 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_A5ROT, \"A5 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_B4JISROT, \"B4 (JIS, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_B5JISROT, \"B5 (JIS, Rotated)\"},\n\t{ DEVMODE_PAPERSIZE_JAPANESEPOSTCARDROT,\n\t  \"Japanese Postcard (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_DBLJAPANESEPOSTCARDROT82,\n\t  \"Double Japanese Postcard (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_A6ROT, \"A6 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_JENVKAKU2ROT,\n\t  \"Japanese Envelope (Kaku #2, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_JENVKAKU3ROT,\n\t  \"Japanese Envelope (Kaku #3, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_JENVCHOU3ROT,\n\t  \"Japanese Envelope (Chou #3, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_JENVCHOU4ROT,\n\t  \"Japanese Envelope (Chou #4, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_B6JIS, \"B6 (JIS)\" },\n\t{ DEVMODE_PAPERSIZE_B6JISROT, \"B6 (JIS, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_12X11, \"12x11\" },\n\t{ DEVMODE_PAPERSIZE_JENVYOU4, \"Japanese Envelope (You #4)\" },\n\t{ DEVMODE_PAPERSIZE_JENVYOU4ROT,\n\t  \"Japanese Envelope (You #4, Rotated\" },\n\t{ DEVMODE_PAPERSIZE_P16K, \"PRC 16K\" },\n\t{ DEVMODE_PAPERSIZE_P32K, \"PRC 32K\" },\n\t{ DEVMODE_PAPERSIZE_P32KBIG, \"P32K (Big)\" },\n\t{ DEVMODE_PAPERSIZE_PENV1, \"PRC Envelope #1\" },\n\t{ DEVMODE_PAPERSIZE_PENV2, \"PRC Envelope #2\" },\n\t{ DEVMODE_PAPERSIZE_PENV3, \"PRC Envelope #3\" },\n\t{ DEVMODE_PAPERSIZE_PENV4, \"PRC Envelope #4\" },\n\t{ DEVMODE_PAPERSIZE_PENV5, \"PRC Envelope #5\" },\n\t{ DEVMODE_PAPERSIZE_PENV6, \"PRC Envelope #6\" },\n\t{ DEVMODE_PAPERSIZE_PENV7, \"PRC Envelope #7\" },\n\t{ DEVMODE_PAPERSIZE_PENV8, \"PRC Envelope #8\" },\n\t{ DEVMODE_PAPERSIZE_PENV9, \"PRC Envelope #9\" },\n\t{ DEVMODE_PAPERSIZE_PENV10, \"PRC Envelope #10\" },\n\t{ DEVMODE_PAPERSIZE_P16KROT, \"PRC 16K (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_P32KROT, \"PRC 32K (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_P32KBIGROT, \"PRC 32K (Big, Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV1ROT, \"PRC Envelope #1 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV2ROT, \"PRC Envelope #2 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV3ROT, \"PRC Envelope #3 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV4ROT, \"PRC Envelope #4 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV5ROT, \"PRC Envelope #5 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV6ROT, \"PRC Envelope #6 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV7ROT, \"PRC Envelope #7 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV8ROT, \"PRC Envelope #8 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV9ROT, \"PRC Envelope #9 (Rotated)\" },\n\t{ DEVMODE_PAPERSIZE_PENV10ROT, \"PRC Envelope #10 (Rotated)\" },\n\t{ 0, NULL }\n};\nstatic value_string_ext devmode_papersize_vals_ext = VALUE_STRING_EXT_INIT(devmode_papersize_vals);\n\n/* List of observed specversions */\n\nstatic const value_string devmode_specversion_vals[] =\n{\n\t{ 0x0320, \"Observed\" },\n\t{ 0x0400, \"Observed\" },\n\t{ 0x0401, \"Observed\" },\n\t{ 0x040d, \"Observed\" },\n\t{ 0, NULL }\n};\n\n/* Paper sources */\n\nstatic const value_string devmode_papersource_vals[] =\n{\n\t{ DEVMODE_PAPERSOURCE_UPPER, \"Upper\" },\n\t{ DEVMODE_PAPERSOURCE_LOWER, \"Lower\" },\n\t{ DEVMODE_PAPERSOURCE_MIDDLE, \"Middle\" },\n\t{ DEVMODE_PAPERSOURCE_MANUAL, \"Manual\" },\n\t{ DEVMODE_PAPERSOURCE_ENV, \"Envelope\" },\n\t{ DEVMODE_PAPERSOURCE_ENVMANUAL, \"Envelope Manual\" },\n\t{ DEVMODE_PAPERSOURCE_AUTO, \"Auto\" },\n\t{ DEVMODE_PAPERSOURCE_TRACTOR, \"Tractor\" },\n\t{ DEVMODE_PAPERSOURCE_SMALLFMT, \"Small Format\" },\n\t{ DEVMODE_PAPERSOURCE_LARGEFMAT, \"Large Format\" },\n\t{ DEVMODE_PAPERSOURCE_LARGECAP, \"Large Capacity\" },\n\t{ DEVMODE_PAPERSOURCE_CASSETTE, \"Cassette\" },\n\t{ DEVMODE_PAPERSOURCE_FORMSRC, \"Form Source\" },\n\t{ 0, NULL }\n};\nstatic value_string_ext devmode_papersource_vals_ext = VALUE_STRING_EXT_INIT(devmode_papersource_vals);\n\n/* Print quality */\n\nstatic const value_string devmode_printquality_vals[] =\n{\n\t{ DEVMODE_PRINTQUALITY_HIGH, \"High\" },\n\t{ DEVMODE_PRINTQUALITY_MEDIUM, \"Medium\" },\n\t{ DEVMODE_PRINTQUALITY_LOW, \"Low\" },\n\t{ DEVMODE_PRINTQUALITY_DRAFT, \"Draft\" },\n\t{ 0, NULL }\n};\n\n/* Color */\n\nstatic const value_string devmode_colour_vals[] =\n{\n\t{ DEVMODE_COLOUR_COLOUR, \"Colour\" },\n\t{ DEVMODE_COLOUR_MONO, \"Monochrome\" },\n\t{ 0, NULL }\n};\n\n/* TrueType options */\n\nstatic const value_string devmode_ttoption_vals[] =\n{\n\t{ 0, \"Not set\" },\n\t{ DEVMODE_TTOPTION_BITMAP, \"Bitmap\" },\n\t{ DEVMODE_TTOPTION_DOWNLOAD, \"Download\" },\n\t{ DEVMODE_TTOPTION_DOWNLOAD_OUTLINE, \"Download outline\" },\n\t{ DEVMODE_TTOPTION_SUBDEV, \"Substitute device fonts\" },\n\t{ 0, NULL }\n};\n\n/* Collate info */\n\nstatic const value_string devmode_collate_vals[] =\n{\n\t{ DEVMODE_COLLATE_FALSE, \"False\" },\n\t{ DEVMODE_COLLATE_TRUE, \"True\" },\n\t{ 0, NULL }\n};\n\n/* Duplex info */\n\nstatic const value_string devmode_duplex_vals[] =\n{\n\t{ DEVMODE_DUPLEX_SIMPLEX, \"Simplex\" },\n\t{ DEVMODE_DUPLEX_VERT, \"Vertical\" },\n\t{ DEVMODE_DUPLEX_HORIZ, \"Horizontal\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_displayflags_vals[] =\n{\n\t{ 0, \"Colour\" },\n\t{ DEVMODE_DISPLAYFLAGS_GRAYSCALE, \"Grayscale\" },\n\t{ DEVMODE_DISPLAYFLAGS_INTERLACED, \"Interlaced\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_icmmethod_vals[] =\n{\n\t{ DEVMODE_ICMMETHOD_NONE, \"None\" },\n\t{ DEVMODE_ICMMETHOD_SYSTEM, \"System\" },\n\t{ DEVMODE_ICMMETHOD_DRIVER, \"Driver\" },\n\t{ DEVMODE_ICMMETHOD_DEVICE, \"Device\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_icmintent_vals[] =\n{\n\t{ 0, \"Not set\" },\n\t{ DEVMODE_ICMINTENT_SATURATE, \"Saturate\" },\n\t{ DEVMODE_ICMINTENT_CONTRAST, \"Contrast\" },\n\t{ DEVMODE_ICMINTENT_COLORIMETRIC, \"Colorimetric\" },\n\t{ DEVMODE_ICMINTENT_ABS_COLORIMETRIC, \"Absolute colorimetric\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_mediatype_vals[] =\n{\n\t{ 0, \"Not set\" },\n\t{ DEVMODE_MEDIATYPE_STANDARD, \"Standard\" },\n\t{ DEVMODE_MEDIATYPE_TRANSPARENCY, \"Transparency\" },\n\t{ DEVMODE_MEDIATYPE_GLOSSY, \"Glossy\" },\n\t{ 0, NULL }\n};\n\nstatic const value_string devmode_dithertype_vals[] =\n{\n\t{ 0, \"Not set\" },\n\t{ DEVMODE_DITHERTYPE_NONE, \"None\" },\n\t{ DEVMODE_DITHERTYPE_COARSE, \"Coarse\" },\n\t{ DEVMODE_DITHERTYPE_LINE, \"Line\" },\n\t{ DEVMODE_DITHERTYPE_LINEART, \"Line art\" },\n\t{ DEVMODE_DITHERTYPE_ERRORDIFFUSION, \"Error diffusion\" },\n\t{ DEVMODE_DITHERTYPE_RESERVED6, \"Reserved 6\" },\n\t{ DEVMODE_DITHERTYPE_RESERVED7, \"Reserved 7\" },\n\t{ DEVMODE_DITHERTYPE_GRAYSCALE, \"Grayscale\" },\n\t{ 0, NULL }\n};\n\nstatic gint ett_DEVMODE_fields = -1;\n\nstatic int\ndissect_DEVMODE_fields(tvbuff_t *tvb, gint offset, packet_info *pinfo,\n\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_, guint32 *pdata)\n{\n\tguint32 fields;\n\tproto_item *hidden_item;\n\n\tstatic const int * hf_fields[] = {\n\t\t&hf_devmode_fields_orientation,\n\t\t&hf_devmode_fields_papersize,\n\t\t&hf_devmode_fields_paperlength,\n\t\t&hf_devmode_fields_paperwidth,\n\t\t&hf_devmode_fields_scale,\n\t\t&hf_devmode_fields_position,\n\t\t&hf_devmode_fields_nup,\n\t\t&hf_devmode_fields_copies,\n\t\t&hf_devmode_fields_defaultsource,\n\t\t&hf_devmode_fields_printquality,\n\t\t&hf_devmode_fields_color,\n\t\t&hf_devmode_fields_duplex,\n\t\t&hf_devmode_fields_yresolution,\n\t\t&hf_devmode_fields_ttoption,\n\t\t&hf_devmode_fields_collate,\n\t\t&hf_devmode_fields_formname,\n\t\t&hf_devmode_fields_logpixels,\n\t\t&hf_devmode_fields_bitsperpel,\n\t\t&hf_devmode_fields_pelswidth,\n\t\t&hf_devmode_fields_pelsheight,\n\t\t&hf_devmode_fields_displayflags,\n\t\t&hf_devmode_fields_displayfrequency,\n\t\t&hf_devmode_fields_icmmethod,\n\t\t&hf_devmode_fields_icmintent,\n\t\t&hf_devmode_fields_mediatype,\n\t\t&hf_devmode_fields_dithertype,\n\t\t&hf_devmode_fields_panningwidth,\n\t\t&hf_devmode_fields_panningheight,\n\t\tNULL\n\t};\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_devmode, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &fields);\n\n\tproto_tree_add_bitmask_value_with_flags(tree, tvb, offset - 4, hf_devmode_fields,\n\t\t\t\t\tett_DEVMODE_fields, hf_fields, fields, BMT_NO_APPEND);\n\n\tif (pdata)\n\t\t*pdata = fields;\n\n\treturn offset;\n}\n\nstatic gint ett_DEVMODE = -1;\n\nstatic int\ndissect_DEVMODE(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint16 driver_extra;\n\tgint16 print_quality;\n\tguint32 fields;\n\tint struct_start = offset;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_DEVMODE, &item, \"Devicemode\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_devmode_size,\n\t\tNULL);\n\n\t/* The device name is stored in a 32-wchar buffer */\n\n\tdissect_spoolss_uint16uni(tvb, offset, pinfo, subtree, drep, NULL, hf_devmode_devicename);\n\toffset += 64;\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_spec_version, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_driver_version, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_size2, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_driver_extra_len, &driver_extra);\n\n\toffset = dissect_DEVMODE_fields(\n\t\ttvb, offset, pinfo, subtree, di, drep, &fields);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_orientation, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_paper_size, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_paper_length, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_paper_width, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_scale, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_copies, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_default_source, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_devmode_print_quality, &print_quality);\n\n\tif (print_quality < 0)\n\t\tproto_tree_add_item(\n\t\t\tsubtree, hf_devmode_print_quality, tvb,\n\t\t\toffset - 2, 2, DREP_ENC_INTEGER(drep));\n\telse\n\t\tproto_tree_add_uint_format_value(\n\t\t\tsubtree, hf_devmode_print_quality, tvb, offset - 4, 4,\n\t\t\tprint_quality, \"%d dpi\", print_quality);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_color, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_duplex, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_y_resolution, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_tt_option, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_collate, NULL);\n\n\tdissect_spoolss_uint16uni(tvb, offset, pinfo, subtree, drep, NULL, hf_devmode_form_name);\n\toffset += 64;\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_log_pixels, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_bits_per_pel, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_pels_width, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_pels_height, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_display_flags, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_display_freq, NULL);\n\n\t/* TODO: Some of the remaining fields are optional.  See\n\t   rpc_parse/parse_spoolss.c in the Samba source for details. */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_icm_method, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_icm_intent, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_media_type, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_dither_type, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_reserved1, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_reserved2, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_panning_width, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_devmode_panning_height, NULL);\n\n\tif (driver_extra)\n\t\toffset = dissect_ndr_uint8s(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_devmode_driver_extra, driver_extra, NULL);\n\n\tproto_item_set_len(item, offset - struct_start);\n\n\treturn offset;\n}\n\n/*\n * DEVMODE_CTR\n */\n\nstatic gint ett_DEVMODE_CTR = -1;\n\nstatic int\ndissect_DEVMODE_CTR(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 size;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DEVMODE_CTR, NULL, \"Devicemode container\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_devmodectr_size, &size);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\tdissect_DEVMODE, NDR_POINTER_UNIQUE, \"Devicemode\", -1);\n\n\treturn offset;\n}\n\n/*\n * Relative string given by offset into the current buffer.  Note that\n * the offset for subsequent relstrs are against the structure start, not\n * the point where the offset is parsed from.\n */\n\nstatic gint ett_RELSTR = -1;\n\nstatic int\ndissect_spoolss_relstr(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep, int hf_index,\n\t\t       int struct_start, char **data)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint32 relstr_offset, relstr_start, relstr_end;\n\tchar *text;\n\n\t/* Peek ahead to read the string.  We need this for the\n\t   proto_tree_add_string() call so filtering will work. */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset, &relstr_offset);\n\n\trelstr_start = relstr_offset + struct_start;\n\n\tif (relstr_offset) {\n\t\trelstr_end = dissect_spoolss_uint16uni(\n\t\t\ttvb, relstr_start, pinfo, NULL, drep, &text, hf_relative_string);\n\t} else { \t\t\t/* relstr_offset == 0 is a NULL string */\n\t\ttext = g_strdup(\"\");\n\t\trelstr_end = relstr_start;\n\t}\n\n\t/* OK now add the proto item with the string value */\n\n\titem = proto_tree_add_string(tree, hf_index, tvb, relstr_start, relstr_end - relstr_start, text);\n\tsubtree = proto_item_add_subtree(item, ett_RELSTR);\n\n\tdissect_ndr_uint32(\n\t\ttvb, offset - 4, pinfo, subtree, di, drep, hf_offset, NULL);\n\n\tif (relstr_offset)\n\t\tdissect_spoolss_uint16uni(\n\t\t\ttvb, relstr_start, pinfo, subtree, drep, NULL, hf_relative_string);\n\n\tif (data)\n\t\t*data = text;\n\telse\n\t\tg_free(text);\n\n\treturn offset;\n}\n\n/* An array of relative strings.  This is currently just a copy of the\n   dissect_spoolss_relstr() function as I can't find an example driver that\n   has more than one dependent file. */\n\nstatic gint ett_RELSTR_ARRAY = -1;\n\nstatic int\ndissect_spoolss_relstrarray(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep, int hf_index,\n\t\t\t    int struct_start, char **data)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint32 relstr_offset, relstr_start/*, relstr_end, relstr_len*/;\n\tchar *text;\n\n\titem = proto_tree_add_string(tree, hf_index, tvb, offset, 4, \"\");\n\n\tsubtree = proto_item_add_subtree(item, ett_RELSTR_ARRAY);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_offset, &relstr_offset);\n\n\t/* A relative offset of zero is a NULL string */\n\n\trelstr_start = relstr_offset + struct_start;\n\n\tif (relstr_offset)\n\t\t/*relstr_end = */dissect_spoolss_uint16uni(\n\t\t\ttvb, relstr_start, pinfo, subtree, drep, &text, hf_relative_string);\n\telse {\n\t\ttext = g_strdup(\"NULL\");\n\t\t/*relstr_end = offset;*/\n\t}\n\n\t/*relstr_len = relstr_end - relstr_start;*/\n\n\tproto_item_append_text(item, \"%s\", text);\n\n\tif (data)\n\t\t*data = text;\n\telse\n\t\tg_free(text);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_0\n */\n\nstatic int hf_printer_status = -1;\n\nstatic const value_string printer_status_vals[] =\n{\n\t{ PRINTER_STATUS_OK, \"OK\" },\n\t{ PRINTER_STATUS_PAUSED, \"Paused\" },\n\t{ PRINTER_STATUS_ERROR, \"Error\" },\n\t{ PRINTER_STATUS_PENDING_DELETION, \"Pending deletion\" },\n\t{ PRINTER_STATUS_PAPER_JAM, \"Paper jam\" },\n\t{ PRINTER_STATUS_PAPER_OUT, \"Paper out\" },\n\t{ PRINTER_STATUS_MANUAL_FEED, \"Manual feed\" },\n\t{ PRINTER_STATUS_PAPER_PROBLEM, \"Paper problem\" },\n\t{ PRINTER_STATUS_OFFLINE, \"Offline\" },\n\t{ PRINTER_STATUS_IO_ACTIVE, \"IO active\" },\n\t{ PRINTER_STATUS_BUSY, \"Busy\" },\n\t{ PRINTER_STATUS_PRINTING, \"Printing\" },\n\t{ PRINTER_STATUS_OUTPUT_BIN_FULL, \"Output bin full\" },\n\t{ PRINTER_STATUS_NOT_AVAILABLE, \"Not available\" },\n\t{ PRINTER_STATUS_WAITING, \"Waiting\" },\n\t{ PRINTER_STATUS_PROCESSING, \"Processing\" },\n\t{ PRINTER_STATUS_INITIALIZING, \"Initialising\" },\n\t{ PRINTER_STATUS_WARMING_UP, \"Warming up\" },\n\t{ PRINTER_STATUS_TONER_LOW, \"Toner low\" },\n\t{ PRINTER_STATUS_NO_TONER, \"No toner\" },\n\t{ PRINTER_STATUS_PAGE_PUNT, \"Page punt\" },\n\t{ PRINTER_STATUS_USER_INTERVENTION, \"User intervention\" },\n\t{ PRINTER_STATUS_OUT_OF_MEMORY, \"Out of memory\" },\n\t{ PRINTER_STATUS_DOOR_OPEN, \"Door open\" },\n\t{ PRINTER_STATUS_SERVER_UNKNOWN, \"Server unknown\" },\n\t{ PRINTER_STATUS_POWER_SAVE, \"Power save\" },\n\t{ 0, NULL }\n};\nstatic value_string_ext printer_status_vals_ext = VALUE_STRING_EXT_INIT(printer_status_vals);\n\nstatic gint ett_PRINTER_INFO_0 = -1;\n\nstatic int\ndissect_PRINTER_INFO_0(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_servername,\n\t\t0, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_cjobs, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_total_jobs,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_total_bytes,\n\t\tNULL);\n\n\toffset = dissect_SYSTEM_TIME(\n\t\ttvb, offset, pinfo, tree, di, drep, \"Unknown time\", TRUE, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_global_counter,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_total_pages,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_major_version,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_build_version,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk7, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk8, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk9, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_session_ctr,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32( tvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_unk11, NULL);\n\n\toffset = dissect_ndr_uint32( tvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_printer_errors, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk13, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk14, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk15, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk16, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_changeid, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk18, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_status, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk20, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_c_setprinter,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk22, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk23, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk24, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk25, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk26, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk27, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk28, NULL);\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_unk29, NULL);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_1\n */\n\nstatic gint ett_PRINTER_INFO_1 = -1;\n\nstatic int\ndissect_PRINTER_INFO_1(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_flags, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerdesc,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printercomment,\n\t\t0, NULL);\n\n\treturn offset;\n}\n\n/* Job status */\n\nstatic const true_false_string tfs_job_status_paused = {\n\t\"Job is paused\",\n\t\"Job is not paused\"\n};\n\nstatic const true_false_string tfs_job_status_error = {\n\t\"Job has an error\",\n\t\"Job is OK\"\n};\n\nstatic const true_false_string tfs_job_status_deleting = {\n\t\"Job is being deleted\",\n\t\"Job is not being deleted\"\n};\n\nstatic const true_false_string tfs_job_status_spooling = {\n\t\"Job is being spooled\",\n\t\"Job is not being spooled\"\n};\n\nstatic const true_false_string tfs_job_status_printing = {\n\t\"Job is being printed\",\n\t\"Job is not being printed\"\n};\n\nstatic const true_false_string tfs_job_status_offline = {\n\t\"Job is offline\",\n\t\"Job is not offline\"\n};\n\nstatic const true_false_string tfs_job_status_paperout = {\n\t\"Job is out of paper\",\n\t\"Job is not out of paper\"\n};\n\nstatic const true_false_string tfs_job_status_printed = {\n\t\"Job has completed printing\",\n\t\"Job has not completed printing\"\n};\n\nstatic const true_false_string tfs_job_status_deleted = {\n\t\"Job has been deleted\",\n\t\"Job has not been deleted\"\n};\n\nstatic const true_false_string tfs_job_status_blocked = {\n\t\"Job has been blocked\",\n\t\"Job has not been blocked\"\n};\n\nstatic const true_false_string tfs_job_status_user_intervention = {\n\t\"User intervention required\",\n\t\"User intervention not required\"\n};\n\nstatic gint ett_job_status = -1;\n\nstatic int\ndissect_job_status(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 status;\n\tstatic const int * hf_status[] = {\n\t\t&hf_job_status_user_intervention,\n\t\t&hf_job_status_blocked,\n\t\t&hf_job_status_deleted,\n\t\t&hf_job_status_printed,\n\t\t&hf_job_status_paperout,\n\t\t&hf_job_status_offline,\n\t\t&hf_job_status_printing,\n\t\t&hf_job_status_spooling,\n\t\t&hf_job_status_deleting,\n\t\t&hf_job_status_error,\n\t\t&hf_job_status_paused,\n\t\tNULL\n\t};\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &status);\n\n\tproto_tree_add_bitmask_value_with_flags(tree, tvb, offset - 4, hf_job_status,\n\t\t\t\t\tett_job_status, hf_status, status, BMT_NO_APPEND);\n\n\treturn offset;\n}\n\n/* Printer attributes */\n\nstatic gint ett_printer_attributes = -1;\n\nstatic int hf_printer_attributes = -1;\nstatic int hf_printer_attributes_queued = -1;\nstatic int hf_printer_attributes_direct = -1;\nstatic int hf_printer_attributes_default = -1;\nstatic int hf_printer_attributes_shared = -1;\nstatic int hf_printer_attributes_network = -1;\nstatic int hf_printer_attributes_hidden = -1;\nstatic int hf_printer_attributes_local = -1;\nstatic int hf_printer_attributes_enable_devq = -1;\nstatic int hf_printer_attributes_keep_printed_jobs = -1;\nstatic int hf_printer_attributes_do_complete_first = -1;\nstatic int hf_printer_attributes_work_offline = -1;\nstatic int hf_printer_attributes_enable_bidi = -1;\nstatic int hf_printer_attributes_raw_only = -1;\nstatic int hf_printer_attributes_published = -1;\n\nstatic const true_false_string tfs_printer_attributes_queued = {\n\t\"Printer starts printing after last page spooled\",\n\t\"Printer starts printing while spooling\"\n};\n\nstatic const true_false_string tfs_printer_attributes_direct = {\n\t\"Jobs sent directly to printer\",\n\t\"Jobs are spooled to printer before printing\"\n};\n\nstatic const true_false_string tfs_printer_attributes_default = {\n\t\"Printer is the default printer\",\n\t\"Printer is not the default printer\"\n};\n\nstatic const true_false_string tfs_printer_attributes_shared = {\n\t\"Printer is shared\",\n\t\"Printer is not shared\"\n};\n\nstatic const true_false_string tfs_printer_attributes_network = {\n\t\"Printer is a network printer connection\",\n\t\"Printer is not a network printer connection\"\n};\n\nstatic const true_false_string tfs_printer_attributes_hidden = {\n\t\"Reserved\",\n\t\"Reserved\"\n};\n\nstatic const true_false_string tfs_printer_attributes_local = {\n\t\"Printer is a local printer\",\n\t\"Printer is not a local printer\"\n};\n\nstatic const true_false_string tfs_printer_attributes_enable_devq = {\n\t\"Call DevQueryPrint\",\n\t\"Do not call DevQueryPrint\"\n};\n\nstatic const true_false_string tfs_printer_attributes_keep_printed_jobs = {\n\t\"Jobs are kept after they are printed\",\n\t\"Jobs are deleted after printing\"\n};\n\nstatic const true_false_string tfs_printer_attributes_do_complete_first = {\n\t\"Jobs that have completed spooling are scheduled before still spooling jobs\",\n\t\"Jobs are scheduled in the order they start spooling\"\n};\n\nstatic const true_false_string tfs_printer_attributes_work_offline = {\n\t\"The printer is currently connected\",\n\t\"The printer is currently not connected\"\n};\n\nstatic const true_false_string tfs_printer_attributes_enable_bidi = {\n\t\"Bidirectional communications are supported\",\n\t\"Bidirectional communications are not supported\"\n};\n\nstatic const true_false_string tfs_printer_attributes_raw_only = {\n\t\"Only raw data type print jobs can be spooled\",\n\t\"All data type print jobs can be spooled\"\n};\n\nstatic const true_false_string tfs_printer_attributes_published = {\n\t\"Printer is published in the directory\",\n\t\"Printer is not published in the directory\"\n};\n\nstatic int\ndissect_printer_attributes(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 attributes;\n\tstatic const int * hf_attributes[] = {\n\t\t&hf_printer_attributes_published,\n\t\t&hf_printer_attributes_raw_only,\n\t\t&hf_printer_attributes_enable_bidi,\n\t\t&hf_printer_attributes_work_offline,\n\t\t&hf_printer_attributes_do_complete_first,\n\t\t&hf_printer_attributes_keep_printed_jobs,\n\t\t&hf_printer_attributes_enable_devq,\n\t\t&hf_printer_attributes_local,\n\t\t&hf_printer_attributes_hidden,\n\t\t&hf_printer_attributes_network,\n\t\t&hf_printer_attributes_shared,\n\t\t&hf_printer_attributes_default,\n\t\t&hf_printer_attributes_direct,\n\t\t&hf_printer_attributes_queued,\n\t\tNULL\n\t};\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &attributes);\n\n\tproto_tree_add_bitmask_value_with_flags(tree, tvb, offset - 4, hf_printer_attributes,\n\t\t\t\t\tett_printer_attributes, hf_attributes, attributes, BMT_NO_APPEND);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_2\n */\n\nstatic gint ett_PRINTER_INFO_2 = -1;\n\nstatic int\ndissect_PRINTER_INFO_2(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\tguint32 devmode_offset, secdesc_offset;\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_servername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_sharename,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_portname,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_drivername,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printercomment,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerlocation,\n\t\t0, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset,\n\t\t&devmode_offset);\n\n\tdissect_DEVMODE(tvb, devmode_offset - 4, pinfo, tree, di, drep);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_sepfile,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printprocessor,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_datatype,\n\t\t0, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_parameters,\n\t\t0, NULL);\n\n\t/*\n\t * XXX - what *is* the length of this security descriptor?\n\t * \"prs_PRINTER_INFO_2()\" is passed to \"defer_ptr()\", but\n\t * \"defer_ptr\" takes, as an argument, a function with a\n\t * different calling sequence from \"prs_PRINTER_INFO_2()\",\n\t * lacking the \"len\" argument, so that won't work.\n\t */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset,\n\t\t&secdesc_offset);\n\n\tdissect_nt_sec_desc(\n\t\ttvb, secdesc_offset, pinfo, tree, drep,\n\t\tFALSE, -1,\n\t\t&spoolss_printer_access_mask_info);\n\n\toffset = dissect_printer_attributes(tvb, offset, pinfo, tree, di, drep);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_printer_priority,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_printer_default_priority, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_start_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_end_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_status, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_printer_jobs,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_printer_averageppm, NULL);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_3\n */\n\nstatic gint ett_PRINTER_INFO_3 = -1;\n\nstatic int\ndissect_PRINTER_INFO_3(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_flags, NULL);\n\n\toffset = dissect_nt_sec_desc(\n\t\ttvb, offset, pinfo, tree, drep,\n\t\tFALSE, -1,\n\t\t&spoolss_printer_access_mask_info);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_INFO_7\n */\n\nstatic gint ett_PRINTER_INFO_7 = -1;\n\nstatic const value_string getprinter_action_vals[] = {\n\t{ DS_PUBLISH, \"Publish\" },\n\t{ DS_UNPUBLISH, \"Unpublish\" },\n\t{ DS_UPDATE, \"Update\" },\n\n\t/* Not sure what the constant values are here */\n\n/*\t{ DS_PENDING, \"Pending\" }, */\n/*\t{ DS_REPUBLISH, \"Republish\" }, */\n\n\t{ 0, NULL }\n};\n\nstatic int\ndissect_PRINTER_INFO_7(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printer_guid,\n\t\t0, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_printer_action, NULL);\n\n\treturn offset;\n}\n\n/*\n * PRINTER_DATATYPE structure\n */\n\nstatic gint ett_PRINTER_DATATYPE = -1;\n\nstatic int\ndissect_PRINTER_DATATYPE(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep _U_)\n{\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_datatype, TRUE, NULL);\n\n\treturn offset;\n}\n\n/*\n * USER_LEVEL_1 structure\n */\n\nstatic gint ett_USER_LEVEL_1 = -1;\n\nstatic int hf_userlevel_size = -1;\nstatic int hf_userlevel_client = -1;\nstatic int hf_userlevel_user = -1;\nstatic int hf_userlevel_build = -1;\nstatic int hf_userlevel_major = -1;\nstatic int hf_userlevel_minor = -1;\nstatic int hf_userlevel_processor = -1;\n\nstatic int\ndissect_USER_LEVEL_1(tvbuff_t *tvb, int offset,\n\t\t\t\tpacket_info *pinfo, proto_tree *tree,\n\t\t\t\tdcerpc_info *di, guint8 *drep)\n{\n\tguint32 level;\n\n\t/* Guy has pointed out that this dissection looks wrong.  In\n\t   the wireshark output for a USER_LEVEL_1 it looks like the\n\t   info level and container pointer are transposed.  I'm not\n\t   even sure this structure is a container. */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_size, NULL);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Client\", hf_userlevel_client, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"User\", hf_userlevel_user, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_build, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_major, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_minor, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_userlevel_processor, NULL);\n\n\treturn offset;\n}\n\n/*\n * USER_LEVEL_CTR structure\n */\n\nstatic gint ett_USER_LEVEL_CTR = -1;\n\nstatic int\ndissect_USER_LEVEL_CTR(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tproto_item *item;\n\tguint32 level;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_USER_LEVEL_CTR, &item, \"User level container\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_level, &level);\n\n\tswitch(level) {\n\tcase 1:\n\t\toffset = dissect_ndr_pointer(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\tdissect_USER_LEVEL_1, NDR_POINTER_UNIQUE,\n\t\t\t\"User level 1\", -1);\n\t\tbreak;\n\tdefault:\n\t\texpert_add_info_format(pinfo, item, &ei_level, \"Info level %d not decoded\", level);\n\t\tbreak;\n\t}\n\n\treturn offset;\n}\n\n/*\n * SpoolssOpenPrinterEx\n */\n\nstatic int\nSpoolssOpenPrinterEx_q(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *name;\n\n\t/* Parse packet */\n\n\tdcv->private_data=NULL;\n\toffset = dissect_ndr_pointer_cb(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_ndr_wchar_cvstring, NDR_POINTER_UNIQUE,\n\t\t\"Printer name\", hf_printername, cb_wstr_postprocess,\n\t\tGINT_TO_POINTER(CB_STR_COL_INFO | CB_STR_SAVE | 1));\n\tname = (char *)dcv->private_data;\n\n\t/* OpenPrinterEx() stores the key/value in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tdcv->se_data = wmem_strdup_printf(wmem_file_scope(),\n\t\t\t\t\"%s\", name?name:\"\");\n\t\t}\n\t}\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_PRINTER_DATATYPE, NDR_POINTER_UNIQUE,\n\t\t\"Printer datatype\", -1);\n\n\toffset = dissect_DEVMODE_CTR(tvb, offset, pinfo, tree, di, drep);\n\n\tname=(char *)dcv->se_data;\n\tif (name) {\n\t\tif (name[0] == '\\\\' && name[1] == '\\\\')\n\t\t\tname += 2;\n\n\t\t/* Determine if we are opening a printer or a print server */\n\n\t\tif (strchr(name, '\\\\'))\n\t\t\toffset = dissect_nt_access_mask(\n\t\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\t\thf_access_required,\n\t\t\t\t&spoolss_printer_access_mask_info, NULL);\n\t\telse\n\t\t\toffset = dissect_nt_access_mask(\n\t\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\t\thf_access_required,\n\t\t\t\t&spoolss_printserver_access_mask_info, NULL);\n\t} else {\n\n\t\t/* We can't decide what type of object being opened */\n\n\t\toffset = dissect_nt_access_mask(\n\t\t\ttvb, offset, pinfo, tree, di, drep, hf_access_required,\n\t\t\tNULL, NULL);\n\t}\n\n\toffset = dissect_USER_LEVEL_CTR(tvb, offset, pinfo, tree, di, drep);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssOpenPrinterEx_r(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\te_ctx_hnd policy_hnd;\n\tproto_item *hnd_item;\n\tguint32 status;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, &hnd_item,\n\t\tTRUE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, &status);\n\n\tif( status == 0 ){\n\t\tconst char *pol_name;\n\n\t\tif (dcv->se_data){\n\t\t\tpol_name = wmem_strdup_printf(wmem_packet_scope(),\n\t\t\t\t\"OpenPrinterEx(%s)\", (char *)dcv->se_data);\n\t\t} else {\n\t\t\tpol_name = \"Unknown OpenPrinterEx() handle\";\n\t\t}\n\t\tif(!pinfo->fd->flags.visited){\n\t\t\tdcerpc_store_polhnd_name(&policy_hnd, pinfo, pol_name);\n\t\t}\n\n\t\tif(hnd_item)\n\t\t\tproto_item_append_text(hnd_item, \": %s\", pol_name);\n\t}\n\n\treturn offset;\n}\n\nstatic const value_string printer_notify_option_data_vals[] = {\n\t{ PRINTER_NOTIFY_SERVER_NAME, \"Server name\" },\n\t{ PRINTER_NOTIFY_PRINTER_NAME, \"Printer name\" },\n\t{ PRINTER_NOTIFY_SHARE_NAME, \"Share name\" },\n\t{ PRINTER_NOTIFY_PORT_NAME, \"Port name\" },\n\t{ PRINTER_NOTIFY_DRIVER_NAME, \"Driver name\" },\n\t{ PRINTER_NOTIFY_COMMENT, \"Comment\" },\n\t{ PRINTER_NOTIFY_LOCATION, \"Location\" },\n\t{ PRINTER_NOTIFY_DEVMODE, \"Devmode\" },\n\t{ PRINTER_NOTIFY_SEPFILE, \"Sepfile\" },\n\t{ PRINTER_NOTIFY_PRINT_PROCESSOR, \"Print processor\" },\n\t{ PRINTER_NOTIFY_PARAMETERS, \"Parameters\" },\n\t{ PRINTER_NOTIFY_DATATYPE, \"Datatype\" },\n\t{ PRINTER_NOTIFY_SECURITY_DESCRIPTOR, \"Security descriptor\" },\n\t{ PRINTER_NOTIFY_ATTRIBUTES, \"Attributes\" },\n\t{ PRINTER_NOTIFY_PRIORITY, \"Priority\" },\n\t{ PRINTER_NOTIFY_DEFAULT_PRIORITY, \"Default priority\" },\n\t{ PRINTER_NOTIFY_START_TIME, \"Start time\" },\n\t{ PRINTER_NOTIFY_UNTIL_TIME, \"Until time\" },\n\t{ PRINTER_NOTIFY_STATUS, \"Status\" },\n\t{ PRINTER_NOTIFY_STATUS_STRING, \"Status string\" },\n\t{ PRINTER_NOTIFY_CJOBS, \"Cjobs\" },\n\t{ PRINTER_NOTIFY_AVERAGE_PPM, \"Average PPM\" },\n\t{ PRINTER_NOTIFY_TOTAL_PAGES, \"Total pages\" },\n\t{ PRINTER_NOTIFY_PAGES_PRINTED, \"Pages printed\" },\n\t{ PRINTER_NOTIFY_TOTAL_BYTES, \"Total bytes\" },\n\t{ PRINTER_NOTIFY_BYTES_PRINTED, \"Bytes printed\" },\n\t{ 0, NULL}\n};\nstatic value_string_ext printer_notify_option_data_vals_ext = VALUE_STRING_EXT_INIT(printer_notify_option_data_vals);\n\nstatic const value_string job_notify_option_data_vals[] = {\n\t{ JOB_NOTIFY_PRINTER_NAME, \"Printer name\" },\n\t{ JOB_NOTIFY_MACHINE_NAME, \"Machine name\" },\n\t{ JOB_NOTIFY_PORT_NAME, \"Port name\" },\n\t{ JOB_NOTIFY_USER_NAME, \"User name\" },\n\t{ JOB_NOTIFY_NOTIFY_NAME, \"Notify name\" },\n\t{ JOB_NOTIFY_DATATYPE, \"Data type\" },\n\t{ JOB_NOTIFY_PRINT_PROCESSOR, \"Print processor\" },\n\t{ JOB_NOTIFY_PARAMETERS, \"Parameters\" },\n\t{ JOB_NOTIFY_DRIVER_NAME, \"Driver name\" },\n\t{ JOB_NOTIFY_DEVMODE, \"Devmode\" },\n\t{ JOB_NOTIFY_STATUS, \"Status\" },\n\t{ JOB_NOTIFY_STATUS_STRING, \"Status string\" },\n\t{ JOB_NOTIFY_SECURITY_DESCRIPTOR, \"Security descriptor\" },\n\t{ JOB_NOTIFY_DOCUMENT, \"Document\" },\n\t{ JOB_NOTIFY_PRIORITY, \"Priority\" },\n\t{ JOB_NOTIFY_POSITION, \"Position\" },\n\t{ JOB_NOTIFY_SUBMITTED, \"Submitted\" },\n\t{ JOB_NOTIFY_START_TIME, \"Start time\" },\n\t{ JOB_NOTIFY_UNTIL_TIME, \"Until time\" },\n\t{ JOB_NOTIFY_TIME, \"Time\" },\n\t{ JOB_NOTIFY_TOTAL_PAGES, \"Total pages\" },\n\t{ JOB_NOTIFY_PAGES_PRINTED, \"Pages printed\" },\n\t{ JOB_NOTIFY_TOTAL_BYTES, \"Total bytes\" },\n\t{ JOB_NOTIFY_BYTES_PRINTED, \"Bytes printed\" },\n\t{ 0, NULL}\n};\nstatic value_string_ext job_notify_option_data_vals_ext = VALUE_STRING_EXT_INIT(job_notify_option_data_vals);\n\nstatic int\ndissect_notify_field(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep, guint16 type,\n\t\t     guint16 *data)\n{\n\tguint16 field;\n\tconst char *str;\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_notify_field, &field);\n\n\tswitch(type) {\n\tcase PRINTER_NOTIFY_TYPE:\n\t\tstr = val_to_str_ext_const(field, &printer_notify_option_data_vals_ext,\n\t\t\t\t \"Unknown\");\n\t\tbreak;\n\tcase JOB_NOTIFY_TYPE:\n\t\tstr = val_to_str_ext_const(field, &job_notify_option_data_vals_ext,\n\t\t\t\t \"Unknown\");\n\t\tbreak;\n\tdefault:\n\t\tstr = \"Unknown notify type\";\n\t\tbreak;\n\t}\n\n\tproto_tree_add_uint_format_value(tree, hf_notify_field, tvb, offset - 2, 2, field, \"%s (%d)\", str, field);\n\n\tif (data)\n\t\t*data = field;\n\n\treturn offset;\n}\n\nstatic int\ndissect_NOTIFY_OPTION_DATA(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 count, i;\n\tguint16 type;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_notify_option_data_count, &count);\n\n\ttype = GPOINTER_TO_INT(dcv->private_data);\n\n\tfor (i = 0; i < count; i++)\n\t\toffset = dissect_notify_field(\n\t\t\ttvb, offset, pinfo, tree, di, drep, type, NULL);\n\n\treturn offset;\n}\n\nstatic const value_string printer_notify_types[] =\n{\n\t{ PRINTER_NOTIFY_TYPE, \"Printer notify\" },\n\t{ JOB_NOTIFY_TYPE, \"Job notify\" },\n\t{ 0, NULL }\n};\n\nstatic const\nchar *notify_plural(int count)\n{\n\tif (count == 1)\n\t\treturn \"notification\";\n\n\treturn \"notifies\";\n}\n\nstatic gint ett_NOTIFY_OPTION = -1;\n\nstatic int\ndissect_NOTIFY_OPTION(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t      proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint16 type;\n\tguint32 count;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_NOTIFY_OPTION, &item, \"Notify Option\");\n\n\toffset = dissect_ndr_uint16(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_type, &type);\n\n\tproto_item_append_text(\n\t\titem, \": %s\", val_to_str(type, printer_notify_types,\n\t\t\t\t\t \"Unknown (%d)\"));\n\n\toffset = dissect_ndr_uint16(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_reserved1, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_reserved2, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_reserved3, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_notify_option_count, &count);\n\n\tproto_item_append_text(\n\t\titem, \", %d %s\", count, notify_plural(count));\n\n\tdcv->private_data = GINT_TO_POINTER((int)type);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\tdissect_NOTIFY_OPTION_DATA, NDR_POINTER_UNIQUE,\n\t\t\"Notify Option Data\", -1);\n\n\treturn offset;\n}\n\nstatic int\ndissect_NOTIFY_OPTIONS_ARRAY(tvbuff_t *tvb, int offset,\n\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t     dcerpc_info *di, guint8 *drep)\n{\n\t/* Why is a check for di->conformant_run not required here? */\n\n\toffset = dissect_ndr_ucarray(\n\t\ttvb, offset, pinfo, tree, di, drep, dissect_NOTIFY_OPTION);\n\n\treturn offset;\n}\n\nstatic gint ett_notify_options_flags = -1;\n\nstatic const true_false_string tfs_notify_options_flags_refresh = {\n\t\"Data for all monitored fields is present\",\n\t\"Data for all monitored fields not present\"\n};\n\nstatic int\ndissect_notify_options_flags(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 flags;\n\tstatic const int * hf_flags[] = {\n\t\t&hf_notify_options_flags_refresh,\n\t\tNULL\n\t};\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &flags);\n\n\tproto_tree_add_bitmask_value_with_flags(tree, tvb, offset - 4, hf_notify_options_flags,\n\t\t\t\t\tett_notify_options_flags, hf_flags, flags, BMT_NO_APPEND);\n\n\treturn offset;\n}\n\nstatic int\ndissect_NOTIFY_OPTIONS_ARRAY_CTR(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_options_version, NULL);\n\n\toffset = dissect_notify_options_flags(tvb, offset, pinfo, tree, di, drep);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_options_count, NULL);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_OPTIONS_ARRAY, NDR_POINTER_UNIQUE,\n\t\t\"Notify Options Array\", -1);\n\n\treturn offset;\n}\n\n/*\n * SpoolssRFFPCNEX\n */\n\nstatic gint ett_rffpcnex_flags = -1;\n\nstatic int hf_rffpcnex_flags = -1;\nstatic int hf_rffpcnex_options = -1;\n\nstatic int hf_rffpcnex_flags_add_printer = -1;\nstatic int hf_rffpcnex_flags_set_printer = -1;\nstatic int hf_rffpcnex_flags_delete_printer = -1;\nstatic int hf_rffpcnex_flags_failed_printer_connection = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_printer = {\n\t\"Notify on add printer\",\n\t\"Don't notify on add printer\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_set_printer = {\n\t\"Notify on set printer\",\n\t\"Don't notify on set printer\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_printer = {\n\t\"Notify on delete printer\",\n\t\"Don't notify on delete printer\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_failed_connection_printer = {\n\t\"Notify on failed printer connection\",\n\t\"Don't notify on failed printer connection\"\n};\n\nstatic int hf_rffpcnex_flags_add_job = -1;\nstatic int hf_rffpcnex_flags_set_job = -1;\nstatic int hf_rffpcnex_flags_delete_job = -1;\nstatic int hf_rffpcnex_flags_write_job = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_job = {\n\t\"Notify on add job\",\n\t\"Don't notify on add job\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_set_job = {\n\t\"Notify on set job\",\n\t\"Don't notify on set job\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_job = {\n\t\"Notify on delete job\",\n\t\"Don't notify on delete job\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_write_job = {\n\t\"Notify on writejob\",\n\t\"Don't notify on write job\"\n};\n\nstatic int hf_rffpcnex_flags_add_form = -1;\nstatic int hf_rffpcnex_flags_set_form = -1;\nstatic int hf_rffpcnex_flags_delete_form = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_form = {\n\t\"Notify on add form\",\n\t\"Don't notify on add form\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_set_form = {\n\t\"Notify on set form\",\n\t\"Don't notify on set form\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_form = {\n\t\"Notify on delete form\",\n\t\"Don't notify on delete form\"\n};\n\nstatic int hf_rffpcnex_flags_add_port = -1;\nstatic int hf_rffpcnex_flags_configure_port = -1;\nstatic int hf_rffpcnex_flags_delete_port = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_port = {\n\t\"Notify on add port\",\n\t\"Don't notify on add port\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_configure_port = {\n\t\"Notify on configure port\",\n\t\"Don't notify on configure port\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_port = {\n\t\"Notify on delete port\",\n\t\"Don't notify on delete port\"\n};\n\nstatic int hf_rffpcnex_flags_add_print_processor = -1;\nstatic int hf_rffpcnex_flags_delete_print_processor = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_print_processor = {\n\t\"Notify on add driver\",\n\t\"Don't notify on add driver\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_print_processor = {\n\t\"Notify on add driver\",\n\t\"Don't notify on add driver\"\n};\n\nstatic int hf_rffpcnex_flags_add_driver = -1;\nstatic int hf_rffpcnex_flags_set_driver = -1;\nstatic int hf_rffpcnex_flags_delete_driver = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_add_driver = {\n\t\"Notify on add driver\",\n\t\"Don't notify on add driver\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_set_driver = {\n\t\"Notify on set driver\",\n\t\"Don't notify on set driver\"\n};\n\nstatic const true_false_string tfs_rffpcnex_flags_delete_driver = {\n\t\"Notify on delete driver\",\n\t\"Don't notify on delete driver\"\n};\n\nstatic int hf_rffpcnex_flags_timeout = -1;\n\nstatic const true_false_string tfs_rffpcnex_flags_timeout = {\n\t\"Notify on timeout\",\n\t\"Don't notify on timeout\"\n};\n\nstatic int\nSpoolssRFFPCNEX_q(tvbuff_t *tvb, int offset,\n\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 flags;\n\tstatic const int * hf_flags[] = {\n\t\t&hf_rffpcnex_flags_timeout,\n\t\t&hf_rffpcnex_flags_delete_driver,\n\t\t&hf_rffpcnex_flags_set_driver,\n\t\t&hf_rffpcnex_flags_add_driver,\n\t\t&hf_rffpcnex_flags_delete_print_processor,\n\t\t&hf_rffpcnex_flags_add_print_processor,\n\t\t&hf_rffpcnex_flags_delete_port,\n\t\t&hf_rffpcnex_flags_configure_port,\n\t\t&hf_rffpcnex_flags_add_port,\n\t\t&hf_rffpcnex_flags_delete_form,\n\t\t&hf_rffpcnex_flags_set_form,\n\t\t&hf_rffpcnex_flags_add_form,\n\t\t&hf_rffpcnex_flags_write_job,\n\t\t&hf_rffpcnex_flags_delete_job,\n\t\t&hf_rffpcnex_flags_set_job,\n\t\t&hf_rffpcnex_flags_add_job,\n\t\t&hf_rffpcnex_flags_failed_printer_connection,\n\t\t&hf_rffpcnex_flags_delete_printer,\n\t\t&hf_rffpcnex_flags_set_printer,\n\t\t&hf_rffpcnex_flags_add_printer,\n\t\tNULL\n\t};\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &flags);\n\n\tproto_tree_add_bitmask_value(tree, tvb, offset - 4, hf_rffpcnex_flags,\n\t\t\t\t\tett_rffpcnex_flags, hf_flags, flags);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_rffpcnex_options, NULL);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Server\", hf_servername, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerlocal, NULL);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_OPTIONS_ARRAY_CTR, NDR_POINTER_UNIQUE,\n\t\t\"Notify Options Container\", -1);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssRFFPCNEX_r(tvbuff_t *tvb, int offset,\n\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssReplyOpenPrinter\n */\n\nstatic int\nSpoolssReplyOpenPrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 printerlocal;\n\tchar *name;\n\n\t/* Parse packet */\n\tname=NULL;\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_servername, TRUE, &name);\n\t/* ReplyOpenPrinter() stores the printername in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tif(!dcv->se_data){\n\t\t\tif(name){\n\t\t\t\tdcv->se_data = wmem_strdup(wmem_file_scope(), name);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerlocal,\n\t\t&printerlocal);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_printerdata_type, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_replyopenprinter_unk0,\n\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_replyopenprinter_unk1,\n\t\tNULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssReplyOpenPrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\te_ctx_hnd policy_hnd;\n\tproto_item *hnd_item;\n\tguint32 status;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, &hnd_item,\n\t\tTRUE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, &status);\n\n\tif( status == 0 ){\n\t\tconst char *pol_name;\n\n\t\tif (dcv->se_data){\n\t\t\tpol_name = wmem_strdup_printf(wmem_packet_scope(),\n\t\t\t\t\"ReplyOpenPrinter(%s)\", (char *)dcv->se_data);\n\t\t} else {\n\t\t\tpol_name = \"Unknown ReplyOpenPrinter() handle\";\n\t\t}\n\t\tif(!pinfo->fd->flags.visited){\n\t\t\tdcerpc_store_polhnd_name(&policy_hnd, pinfo, pol_name);\n\t\t}\n\n\t\tif(hnd_item)\n\t\t\tproto_item_append_text(hnd_item, \": %s\", pol_name);\n\t}\n\n\treturn offset;\n}\n\n/*\n * SpoolssGetPrinter\n */\n\n\nstatic int\nSpoolssGetPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n \t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* GetPrinter() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GINT_TO_POINTER((int)level);\n\t}\n\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic gint ett_PRINTER_INFO = -1;\n\nstatic int\nSpoolssGetPrinter_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tBUFFER buffer;\n\tgint16 level = GPOINTER_TO_INT(dcv->se_data);\n\tproto_item *item = NULL;\n\tproto_tree *subtree = NULL;\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\tif (buffer.tvb) {\n\t\tsubtree = proto_tree_add_subtree_format( buffer.tree, buffer.tvb, 0, -1, ett_PRINTER_INFO, &item, \"Print info level %d\", level);\n\n\t\tswitch(level) {\n\t\tcase 0:\n\t\t\tdissect_PRINTER_INFO_0(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tdissect_PRINTER_INFO_1(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tdissect_PRINTER_INFO_2(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tdissect_PRINTER_INFO_3(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tdissect_PRINTER_INFO_7(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texpert_add_info(pinfo, item, &ei_printer_info_level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SEC_DESC_BUF\n */\n\nstatic gint ett_SEC_DESC_BUF = -1;\n\nstatic int hf_secdescbuf_maxlen = -1;\nstatic int hf_secdescbuf_undoc = -1;\nstatic int hf_secdescbuf_len = -1;\n\nstatic int\ndissect_SEC_DESC_BUF(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 len;\n\n\t/* XXX: I think this is really a array of bytes which can be\n\t   dissected using dissect_ndr_cvstring().  The dissected data\n\t   can be passed to dissect_nt_sec_desc().  The problem is that\n\t   dissect_nt_cvstring() passes back a char * where it really\n\t   should pass back a tvb. */\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_SEC_DESC_BUF, NULL, \"Security descriptor buffer\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_secdescbuf_maxlen, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_secdescbuf_undoc, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_secdescbuf_len, &len);\n\n\tdissect_nt_sec_desc(\n\t\ttvb, offset, pinfo, subtree, drep, TRUE, len,\n\t\t&spoolss_printer_access_mask_info);\n\n\toffset += len;\n\n\treturn offset;\n}\n\n/*\n * SPOOL_PRINTER_INFO_LEVEL\n */\n\nstatic gint ett_SPOOL_PRINTER_INFO_LEVEL = -1;\n\n/* spool printer info */\n\nstatic int hf_spool_printer_info_devmode_ptr = -1;\nstatic int hf_spool_printer_info_secdesc_ptr = -1;\n\nstatic int\ndissect_SPOOL_PRINTER_INFO(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 level;\n\tproto_tree *item;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_SPOOL_PRINTER_INFO_LEVEL, &item, \"Spool printer info level\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_level, &level);\n\n\tswitch(level) {\n\tcase 3: {\n\t\tguint32 devmode_ptr, secdesc_ptr;\n\n\t\t/* I can't seem to get this working with the correct\n\t\t   dissect_ndr_pointer() function so let's cheat and\n\t\t   dissect the pointers by hand. )-: */\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_spool_printer_info_devmode_ptr,\n\t\t\t&devmode_ptr);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_spool_printer_info_secdesc_ptr,\n\t\t\t&secdesc_ptr);\n\n\t\tif (devmode_ptr)\n\t\t\toffset = dissect_DEVMODE_CTR(\n\t\t\t\ttvb, offset, pinfo, subtree, di, drep);\n\n\t\tif (secdesc_ptr)\n\t\t\toffset = dissect_SEC_DESC_BUF(\n\t\t\t\ttvb, offset, pinfo, subtree, di, drep);\n\n\tbreak;\n\t}\n\tcase 2:\n\tdefault:\n\t\texpert_add_info_format(pinfo, item, &ei_spool_printer_info_level, \"Unknown spool printer info level %d\", level);\n\t\tbreak;\n\t}\n\n\treturn offset;\n}\n\n/*\n * SpoolssSetPrinter\n */\n\nstatic int hf_setprinter_cmd = -1;\n\nstatic const value_string setprinter_cmd_vals[] = {\n\t{ SPOOLSS_PRINTER_CONTROL_UNPAUSE, \"Unpause\" },\n\t{ SPOOLSS_PRINTER_CONTROL_PAUSE, \"Pause\" },\n\t{ SPOOLSS_PRINTER_CONTROL_RESUME, \"Resume\" },\n\t{ SPOOLSS_PRINTER_CONTROL_PURGE, \"Purge\" },\n\t{ SPOOLSS_PRINTER_CONTROL_SET_STATUS, \"Set status\" },\n\t{ 0, NULL }\n};\n\nstatic int\nSpoolssSetPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_SPOOL_PRINTER_INFO(\n\t\ttvb, offset, pinfo, tree, di, drep);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_setprinter_cmd, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetPrinter_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * FORM_REL\n */\n\nstatic const value_string form_type_vals[] =\n{\n\t{ SPOOLSS_FORM_USER, \"User\" },\n\t{ SPOOLSS_FORM_BUILTIN, \"Builtin\" },\n\t{ SPOOLSS_FORM_PRINTER, \"Printer\" },\n\t{ 0, NULL }\n};\n\nstatic gint ett_FORM_REL = -1;\n\nstatic int\ndissect_FORM_REL(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep, int struct_start)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint32 flags;\n\tint item_start = offset;\n\tchar *name = NULL;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_FORM_REL, &item, \"Form\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_form_flags, &flags);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_form_name,\n\t\tstruct_start, &name);\n\n\tif (name) {\n\t\tproto_item_append_text(item, \": %s\", name);\n\t\tg_free(name);\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_width, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_height, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_left_margin, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_top_margin, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_horiz_len, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_vert_len, NULL);\n\n\tproto_item_set_len(item, offset - item_start);\n\n\treturn offset;\n}\n\n/*\n * SpoolssEnumForms\n */\n\nstatic int\nSpoolssEnumForms_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t      proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* EnumForms() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumForms_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t      proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tBUFFER buffer;\n\tguint32 level = GPOINTER_TO_UINT(dcv->se_data), i, count;\n\tint buffer_offset;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_enumforms_num, &count);\n\n\t/* Unfortunately this array isn't in NDR format so we can't\n\t   use prs_array().  The other weird thing is the\n\t   struct_start being inside the loop rather than outside.\n\t   Very strange. */\n\n\tbuffer_offset = 0;\n\n\tfor (i = 0; i < count; i++) {\n\t\tint struct_start = buffer_offset;\n\n\t\tbuffer_offset = dissect_FORM_REL(\n\t\t\tbuffer.tvb, buffer_offset, pinfo, buffer.tree, di, drep,\n\t\t\tstruct_start);\n\t}\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssDeletePrinter\n */\n\nstatic int\nSpoolssDeletePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssDeletePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssAddPrinterEx_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\te_ctx_hnd policy_hnd;\n\tproto_item *hnd_item;\n\tguint32 status;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, &hnd_item,\n\t\tTRUE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, &status);\n\n\tif( status == 0 ){\n\t\tconst char *pol_name;\n\n\t\tif (dcv->se_data){\n\t\t\tpol_name = wmem_strdup_printf(wmem_packet_scope(),\n\t\t\t\t\"AddPrinterEx(%s)\", (char *)dcv->se_data);\n\t\t} else {\n\t\t\tpol_name = \"Unknown AddPrinterEx() handle\";\n\t\t}\n\t\tif(!pinfo->fd->flags.visited){\n\t\t\tdcerpc_store_polhnd_name(&policy_hnd, pinfo, pol_name);\n\t\t}\n\n\t\tif(hnd_item)\n\t\t\tproto_item_append_text(hnd_item, \": %s\", pol_name);\n\t}\n\n\treturn offset;\n}\n\n/*\n * SpoolssEnumPrinterData\n */\n\nstatic int hf_enumprinterdata_enumindex = -1;\nstatic int hf_enumprinterdata_value_offered = -1;\nstatic int hf_enumprinterdata_data_offered = -1;\nstatic int hf_enumprinterdata_value_len = -1;\nstatic int hf_enumprinterdata_value_needed = -1;\nstatic int hf_enumprinterdata_data_needed = -1;\n\nstatic int\nSpoolssEnumPrinterData_q(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 ndx;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_enumprinterdata_enumindex, &ndx);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", index %d\", ndx);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_enumprinterdata_value_offered, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_enumprinterdata_data_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumPrinterData_r(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 value_len, type;\n\tchar *value;\n\tproto_item *value_item;\n\tproto_tree *value_subtree;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\tvalue_subtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_printerdata_value, &value_item, \"Value\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, value_subtree, di, drep,\n\t\thf_enumprinterdata_value_len, &value_len);\n\n\tif (value_len) {\n\t\tdissect_spoolss_uint16uni(\n\t\t\ttvb, offset, pinfo, value_subtree, drep, &value, hf_value_name);\n\n\t\toffset += value_len * 2;\n\n\t\tif (value && value[0])\n\t\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", value);\n\n\t\tproto_item_append_text(value_item, \": %s\", value);\n\n\t\thidden_item = proto_tree_add_string(\n\t\t\ttree, hf_printerdata_value, tvb, offset, 0, value);\n\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t\tg_free(value);\n\t}\n\n\tproto_item_set_len(value_item, value_len * 2 + 4);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, value_subtree, di, drep,\n\t\thf_enumprinterdata_value_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_printerdata_type, &type);\n\n\toffset = dissect_printerdata_data(\n\t\ttvb, offset, pinfo, tree, di, drep, type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_enumprinterdata_data_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SpoolssEnumPrinters\n */\n\nstatic gint ett_enumprinters_flags = -1;\n\nstatic int hf_enumprinters_flags = -1;\nstatic int hf_enumprinters_flags_local = -1;\nstatic int hf_enumprinters_flags_name = -1;\nstatic int hf_enumprinters_flags_shared = -1;\nstatic int hf_enumprinters_flags_default = -1;\nstatic int hf_enumprinters_flags_connections = -1;\nstatic int hf_enumprinters_flags_network = -1;\nstatic int hf_enumprinters_flags_remote = -1;\n\nstatic int\nSpoolssEnumPrinters_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 level, flags;\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tstatic const int * hf_flags[] = {\n\t\t&hf_enumprinters_flags_network,\n\t\t&hf_enumprinters_flags_shared,\n\t\t&hf_enumprinters_flags_remote,\n\t\t&hf_enumprinters_flags_name,\n\t\t&hf_enumprinters_flags_connections,\n\t\t&hf_enumprinters_flags_local,\n\t\t&hf_enumprinters_flags_default,\n\t\tNULL\n\t};\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, NULL, di, drep, -1, &flags);\n\n\tproto_tree_add_bitmask_value(tree, tvb, offset - 4, hf_enumprinters_flags,\n\t\t\t\t\tett_enumprinters_flags, hf_flags, flags);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tNDR_POINTER_UNIQUE, \"Server name\", hf_servername, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* GetPrinter() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\tdcv->se_data = GINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumPrinters_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tguint32 num_drivers;\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tgint16 level = GPOINTER_TO_INT(dcv->se_data);\n\tBUFFER buffer;\n\tproto_item *item;\n\tproto_tree *subtree = NULL;\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\tif (buffer.tvb) {\n\t\tsubtree = proto_tree_add_subtree_format( buffer.tree, buffer.tvb, 0, -1, ett_PRINTER_INFO, &item, \"Print info level %d\", level);\n\n\t\tswitch(level) {\n\t\tcase 0:\n\t\t\tdissect_PRINTER_INFO_0(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tdissect_PRINTER_INFO_1(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tdissect_PRINTER_INFO_2(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tdissect_PRINTER_INFO_3(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tdissect_PRINTER_INFO_7(\n\t\t\t\tbuffer.tvb, 0, pinfo, subtree, di, drep);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texpert_add_info(pinfo, item, &ei_printer_info_level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_returned,\n\t\t&num_drivers);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * AddPrinterDriver\n */\nstatic int\nSpoolssAddPrinterDriver_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep _U_)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * FORM_1\n */\n\nstatic gint ett_FORM_1 = -1;\n\nstatic int\ndissect_FORM_1(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t  proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 flags;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_FORM_1, NULL, \"Form level 1\");\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, subtree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Name\", hf_form_name, 0);\n\n\t/* Eek - we need to know whether this pointer was NULL or not.\n\t   Currently there is not any way to do this. */\n\n\tif (tvb_reported_length_remaining(tvb, offset) <= 0)\n\t\tgoto done;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_form_flags, &flags);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_unknown, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_width, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_height, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_left_margin, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_top_margin, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_horiz_len, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_form_vert_len, NULL);\n\n done:\n\treturn offset;\n}\n\n/*\n * FORM_CTR\n */\n\nstatic gint ett_FORM_CTR = -1;\n\nstatic int\ndissect_FORM_CTR(tvbuff_t *tvb, int offset,\n\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t    dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tproto_item *item;\n\tguint32 level;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_FORM_CTR, &item, \"Form container\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_form_level, &level);\n\n\tswitch(level) {\n\tcase 1:\n\t\toffset = dissect_FORM_1(tvb, offset, pinfo, subtree, di, drep);\n\t\tbreak;\n\n\tdefault:\n\t\texpert_add_info_format(pinfo, item, &ei_form_level, \"Unknown form info level %d\", level);\n\t\tbreak;\n\t}\n\n\treturn offset;\n}\n\n/*\n * AddForm\n */\n\nstatic int\nSpoolssAddForm_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_form_level, &level);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\t/* AddForm() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\toffset = dissect_FORM_CTR(tvb, offset, pinfo, tree, di, drep);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssAddForm_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * DeleteForm\n */\n\nstatic int\nSpoolssDeleteForm_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\tchar *name = NULL;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tsizeof(guint16), hf_form_name, TRUE, &name);\n\n\tif (name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssDeleteForm_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SetForm\n */\n\nstatic int\nSpoolssSetForm_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tchar *name = NULL;\n\tguint32 level;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tsizeof(guint16), hf_form_name, TRUE, &name);\n\n\tif (name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_form_level, &level);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_FORM_CTR(tvb, offset, pinfo, tree, di, drep);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetForm_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * GetForm\n */\n\nstatic int\nSpoolssGetForm_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tproto_item *hidden_item;\n\tguint32 level;\n\tchar *name;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tsizeof(guint16), hf_form_name, TRUE, &name);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_form_level, &level);\n\n\t/* GetForm() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\",\n\t\t\t\tlevel);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetForm_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tBUFFER buffer;\n\tguint32 level = GPOINTER_TO_UINT(dcv->se_data);\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_form, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\tif (buffer.tvb) {\n\t\tint buffer_offset = 0;\n\n\t\tswitch(level) {\n\t\tcase 1: {\n\t\t\tint struct_start = buffer_offset;\n\n\t\t\t/*buffer_offset = */dissect_FORM_REL(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo, tree, di, drep,\n\t\t\t\tstruct_start);\n\t\t\tbreak;\n\t\t}\n\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format(buffer.tree, pinfo, &ei_form_level, buffer.tvb, buffer_offset, -1, \"Unknown form info level %d\", level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n\n/* A generic reply function that just parses the status code.  Useful for\n   unimplemented dissectors so the status code can be inserted into the\n   INFO column. */\n\nstatic int\nSpoolssGeneric_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tint len = tvb_reported_length(tvb);\n\n\tproto_tree_add_expert(tree, pinfo, &ei_unimplemented_dissector, tvb, offset, 0);\n\n\toffset = dissect_doserror(\n\t\ttvb, len - 4, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * JOB_INFO_1\n */\n\nstatic gint ett_JOB_INFO_1 = -1;\n\nstatic int\ndissect_spoolss_JOB_INFO_1(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\tchar *document_name;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_JOB_INFO_1, &item, \"Job info level 1\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_id, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_servername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_username,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_documentname,\n\t\tstruct_start, &document_name);\n\n\tproto_item_append_text(item, \": %s\", document_name);\n\tg_free(document_name);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_datatype,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_textstatus,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_job_status(tvb, offset, pinfo, subtree, di, drep);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_priority, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_position, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_totalpages, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_pagesprinted, NULL);\n\n\toffset = dissect_SYSTEM_TIME(\n\t\ttvb, offset, pinfo, subtree, di, drep, \"Job Submission Time\",\n\t\tTRUE, NULL);\n\n\tproto_item_set_len(item, offset - struct_start);\n\n\treturn offset;\n}\n\n/*\n * JOB_INFO_2\n */\n\nstatic gint ett_JOB_INFO_2 = -1;\n\nstatic int\ndissect_spoolss_JOB_INFO_2(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\tchar *document_name;\n\tguint32 devmode_offset, secdesc_offset;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_JOB_INFO_2, &item, \"Job info level 2\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_job_id, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_machinename,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_username,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_documentname,\n\t\tstruct_start, &document_name);\n\n\tproto_item_append_text(item, \": %s\", document_name);\n\tg_free(document_name);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_notifyname,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_datatype,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printprocessor,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_parameters,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset,\n\t\t&devmode_offset);\n\n\tdissect_DEVMODE(\n\t\ttvb, devmode_offset - 4 + struct_start, pinfo, subtree, di, drep);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_textstatus,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_offset,\n\t\t&secdesc_offset);\n\n\tdissect_nt_sec_desc(\n\t\ttvb, secdesc_offset, pinfo, subtree, drep,\n\t\tFALSE, -1,\n\t\t&spoolss_job_access_mask_info);\n\n\toffset = dissect_job_status(tvb, offset, pinfo, subtree, di, drep);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_priority, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_position, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_start_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_end_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_totalpages, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_size, NULL);\n\n\toffset = dissect_SYSTEM_TIME(\n\t\ttvb, offset, pinfo, subtree, di, drep, \"Job Submission Time\",\n\t\tTRUE, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep, hf_elapsed_time, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_job_pagesprinted, NULL);\n\n\tproto_item_set_len(item, offset - struct_start);\n\n\treturn offset;\n}\n\n/*\n * EnumJobs\n */\n\nstatic int hf_enumjobs_firstjob = -1;\nstatic int hf_enumjobs_numjobs = -1;\n\nstatic int\nSpoolssEnumJobs_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_hnd, NULL, NULL, FALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_enumjobs_firstjob, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_enumjobs_numjobs, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* EnumJobs() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumJobs_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tgint16 level = GPOINTER_TO_UINT(dcv->se_data);\n\tBUFFER buffer;\n\tguint32 num_jobs, i;\n\tint buffer_offset;\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, &buffer);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_enumjobs_numjobs,\n\t\t&num_jobs);\n\n\tbuffer_offset = 0;\n\n\tfor (i = 0; i < num_jobs; i++) {\n\t\tswitch(level) {\n\t\tcase 1:\n\t\t\tbuffer_offset = dissect_spoolss_JOB_INFO_1(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tbuffer_offset = dissect_spoolss_JOB_INFO_2(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format( buffer.tree, pinfo, &ei_job_info_level, buffer.tvb, 0, -1, \"Unknown job info level %d\", level);\n\t\t\tbreak;\n\t\t}\n\n\t}\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * SetJob\n */\n\nstatic const value_string setjob_commands[] = {\n\t{ JOB_CONTROL_PAUSE, \"Pause\" },\n\t{ JOB_CONTROL_RESUME, \"Resume\" },\n\t{ JOB_CONTROL_CANCEL, \"Cancel\" },\n\t{ JOB_CONTROL_RESTART, \"Restart\" },\n\t{ JOB_CONTROL_DELETE, \"Delete\" },\n\t{ 0, NULL }\n};\n\nstatic int hf_setjob_cmd = -1;\n\nstatic int\nSpoolssSetJob_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 jobid, cmd;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_job_id, &jobid);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_setjob_cmd, &cmd);\n\n\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", %s jobid %d\",\n\t\t\tval_to_str(cmd, setjob_commands, \"Unknown (%d)\"),\n\t\t\tjobid);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssSetJob_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * GetJob\n */\n\nstatic int\nSpoolssGetJob_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level, jobid;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_job_id, &jobid);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* GetJob() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d, jobid %d\",\n\t\t\t\tlevel, jobid);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetJob_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tgint32 level = GPOINTER_TO_UINT(dcv->se_data);\n\tBUFFER buffer;\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t\t&buffer);\n\n\tif (buffer.tvb) {\n\t\tint buffer_offset = 0;\n\n\t\tswitch(level) {\n\t\tcase 1:\n\t\t\t/*buffer_offset = */dissect_spoolss_JOB_INFO_1(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format( buffer.tree, pinfo, &ei_job_info_level, buffer.tvb, buffer_offset, -1, \"Unknown job info level %d\", level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * StartPagePrinter\n */\n\nstatic int\nSpoolssStartPagePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssStartPagePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t     packet_info *pinfo, proto_tree *tree,\n\t\t\t\t     dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * EndPagePrinter\n */\n\nstatic int\nSpoolssEndPagePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEndPagePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * DOC_INFO_1\n */\n\nstatic gint ett_DOC_INFO_1 = -1;\n\nstatic int\ndissect_spoolss_doc_info_1(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t   proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DOC_INFO_1, NULL, \"Document info level 1\");\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, subtree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Document name\", hf_documentname, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, subtree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Output file\", hf_outputfile, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, subtree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Data type\", hf_datatype, 0);\n\n\treturn offset;\n}\n\nstatic int\ndissect_spoolss_doc_info_data(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t      proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\treturn dissect_spoolss_doc_info_1(tvb, offset, pinfo, tree, di, drep);\n}\n\n/*\n * DOC_INFO\n */\n\nstatic gint ett_DOC_INFO = -1;\n\nstatic int\ndissect_spoolss_doc_info(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tguint32 level;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DOC_INFO, NULL, \"Document info\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_level, &level);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\tdissect_spoolss_doc_info_data,\n\t\tNDR_POINTER_UNIQUE, \"Document info\", -1);\n\n\treturn offset;\n}\n\n/*\n * DOC_INFO_CTR\n */\n\nstatic gint ett_DOC_INFO_CTR = -1;\n\nstatic int\ndissect_spoolss_doc_info_ctr(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DOC_INFO_CTR, NULL, \"Document info container\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_level, NULL);\n\n\toffset = dissect_spoolss_doc_info(\n\t\ttvb, offset, pinfo, subtree, di, drep);\n\n\treturn offset;\n}\n\n/*\n * StartDocPrinter\n */\n\nstatic int\nSpoolssStartDocPrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\toffset = dissect_spoolss_doc_info_ctr(tvb, offset, pinfo, tree, di, drep);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssStartDocPrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_job_id, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * EndDocPrinter\n */\n\nstatic int\nSpoolssEndDocPrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEndDocPrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t  packet_info *pinfo, proto_tree *tree,\n\t\t\t\t  dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * WritePrinter\n */\n\nstatic gint ett_writeprinter_buffer = -1;\n\nstatic int hf_writeprinter_numwritten = -1;\n\nstatic int\nSpoolssWritePrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\tguint32 size;\n\tproto_item *item;\n\tproto_tree *subtree;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tif (pol_name)\n\t\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_buffer_size, &size);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %d bytes\", size);\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_writeprinter_buffer, &item, \"Buffer\");\n\n\toffset = dissect_ndr_uint8s(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_buffer_data, size, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_buffer_size, NULL);\n\n\tproto_item_set_len(item, size + 4);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssWritePrinter_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 size;\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_writeprinter_numwritten,\n\t\t&size);\n\n\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", %d bytes written\", size);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * DeletePrinterData\n */\n\nstatic int\nSpoolssDeletePrinterData_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tchar *value_name;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_value, TRUE, &value_name);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", value_name);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssDeletePrinterData_r(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * DRIVER_INFO_1\n */\n\nstatic gint ett_DRIVER_INFO_1 = -1;\n\nstatic int\ndissect_DRIVER_INFO_1(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_1, NULL, \"Driver info level 1\");\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\tstruct_start, NULL);\n\n\treturn offset;\n}\n\n/*\n * DRIVER_INFO_2\n */\n\nstatic const value_string driverinfo_cversion_vals[] =\n{\n\t{ 0, \"Windows 95/98/Me\" },\n\t{ 2, \"Windows NT 4.0\" },\n\t{ 3, \"Windows 2000/XP\" },\n\t{ 0, NULL }\n};\n\nstatic gint ett_DRIVER_INFO_2 = -1;\n\nstatic int\ndissect_DRIVER_INFO_2(tvbuff_t *tvb, int offset,\n\t packet_info *pinfo, proto_tree *tree,\n\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_2, NULL, \"Driver info level 2\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_driverinfo_cversion, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_environment,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_driverpath,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_datafile,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_configfile,\n\t\t\tstruct_start, NULL);\n\n\treturn offset;\n}\n\n/*\n * DRIVER_INFO_3\n */\n\nstatic gint ett_DRIVER_INFO_3 = -1;\n\nstatic int\ndissect_DRIVER_INFO_3(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_3, NULL, \"Driver info level 3\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\t\t    hf_driverinfo_cversion, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_environment,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_driverpath,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_datafile,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_configfile,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_helpfile,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstrarray(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_dependentfiles,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_monitorname,\n\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_defaultdatatype,\n\t\tstruct_start, NULL);\n\n\treturn offset;\n}\n\n\n/*\n\tDRIVER_INFO_6\n*/\n\nstatic gint ett_DRIVER_INFO_6 = -1;\n\nstatic int\ndissect_DRIVER_INFO_6(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_6, NULL, \"Driver info level 6\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_driverinfo_cversion, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_environment,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_driverpath,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_datafile,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_configfile,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_helpfile,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstrarray(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_dependentfiles,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_monitorname,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_defaultdatatype,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstrarray(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_previousdrivernames,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_ndr_nt_NTTIME (\n\t\t\ttvb, offset, pinfo, subtree, di, drep,hf_driverdate);\n\n\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_padding,\n\t\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_driver_version_low,\n\t\t\tNULL);\n\n\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_driver_version_high,\n\t\t\tNULL);\n\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_mfgname,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_oemurl,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_hardwareid,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_provider,\n\t\t\tstruct_start, NULL);\n\n\treturn offset;\n}\n\n\nstatic gint ett_DRIVER_INFO_101 = -1;\n\nstatic int\ndissect_DRIVER_INFO_101(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tproto_tree *subtree;\n\tint struct_start = offset;\n\n\tsubtree = proto_tree_add_subtree(\n\t\t\ttree, tvb, offset, 0, ett_DRIVER_INFO_101, NULL, \"Driver info level 101\");\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, subtree, di, drep,\n\t\t\thf_driverinfo_cversion, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_drivername,\n\t\t\tstruct_start, NULL);\n\n\toffset = dissect_spoolss_relstr(\n\t\t\ttvb, offset, pinfo, subtree, di, drep, hf_environment,\n\t\t\tstruct_start, NULL);\n\n\tproto_tree_add_expert(subtree, pinfo, &ei_unknown_data, tvb, offset, 0);\n\n\treturn offset;\n}\n/*\n * EnumPrinterDrivers\n */\n\nstatic int\nSpoolssEnumPrinterDrivers_q(tvbuff_t *tvb, int offset,\n\t\t\t\t       packet_info *pinfo, proto_tree *tree,\n\t\t\t\t       dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Name\", hf_servername, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Environment\", hf_environment, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* EnumPrinterDrivers() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumPrinterDrivers_r(tvbuff_t *tvb, int offset,\n\t\t\t\t       packet_info *pinfo, proto_tree *tree,\n\t\t\t\t       dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level = GPOINTER_TO_UINT(dcv->se_data), num_drivers, i;\n\tint buffer_offset;\n\tBUFFER buffer;\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t\t&buffer);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_returned,\n\t\t&num_drivers);\n\n\tbuffer_offset = 0;\n\n\tfor (i = 0; i < num_drivers; i++) {\n\t\tswitch(level) {\n\t\tcase 1:\n\t\t\tbuffer_offset = dissect_DRIVER_INFO_1(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tbuffer_offset = dissect_DRIVER_INFO_2(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tbuffer_offset = dissect_DRIVER_INFO_3(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tbuffer_offset = dissect_DRIVER_INFO_6(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 101:\n\t\t\t/*buffer_offset =*/ dissect_DRIVER_INFO_101(\n\t\t\t\tbuffer.tvb, buffer_offset, pinfo,\n\t\t\t\tbuffer.tree, di, drep);\n\t\t\t/*break;*/\n\t\t\tgoto done; /*Not entirely imeplemented*/\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format( buffer.tree, pinfo, &ei_driver_info_level, buffer.tvb, buffer_offset, -1, \"Unknown driver info level %d\", level);\n\t\t\tgoto done;\n\t\t}\n\t}\n\ndone:\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * GetPrinterDriver2\n */\n\nstatic int\nSpoolssGetPrinterDriver2_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\te_ctx_hnd policy_hnd;\n\tchar *pol_name;\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, &policy_hnd, NULL,\n\t\tFALSE, FALSE);\n\n\tdcerpc_fetch_polhnd_data(&policy_hnd, &pol_name, NULL, NULL, NULL,\n\t\t\t     pinfo->num);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\",\n\t\t\t\tpol_name);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Environment\", hf_environment, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\t/* GetPrinterDriver2() stores the level in se_data */\n\tif(!pinfo->fd->flags.visited){\n\t\t\tdcv->se_data = GUINT_TO_POINTER((int)level);\n\t}\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", level %d\", level);\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_clientmajorversion, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_clientminorversion, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterDriver2_r(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tguint32 level = GPOINTER_TO_UINT(dcv->se_data);\n\tBUFFER buffer;\n\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_buffer(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t\t&buffer);\n\n\tif (buffer.tvb) {\n\t\tswitch(level) {\n\t\tcase 1:\n\t\t\tdissect_DRIVER_INFO_1(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tdissect_DRIVER_INFO_2(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tdissect_DRIVER_INFO_3(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tdissect_DRIVER_INFO_6(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tcase 101:\n\t\t\tdissect_DRIVER_INFO_101(\n\t\t\t\tbuffer.tvb, 0, pinfo, buffer.tree, di, drep);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tproto_tree_add_expert_format( buffer.tree, pinfo, &ei_driver_info_level, buffer.tvb, 0, -1, \"Unknown driver info level %d\", level);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_servermajorversion, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_serverminorversion, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int\ndissect_notify_info_data_buffer(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 len;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_notify_info_data_buffer_len, &len);\n\n\toffset = dissect_ndr_uint16s(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_notify_info_data_buffer_data, len);\n\n\treturn offset;\n}\n\nstatic void\ncb_notify_str_postprocess(packet_info *pinfo _U_,\n\t\t\t\t      proto_tree *tree _U_,\n\t\t\t\t      proto_item *item, dcerpc_info *di _U_, tvbuff_t *tvb,\n\t\t\t\t      int start_offset, int end_offset,\n\t\t\t\t      void *callback_args)\n{\n\tgint levels, hf_index = GPOINTER_TO_INT(callback_args);\n\tguint32 len;\n\tchar *s;\n\tproto_item *hidden_item;\n\n\t/* Align start_offset on 4-byte boundary. */\n\n\tif (start_offset % 4)\n\t\tstart_offset += 4 - (start_offset % 4);\n\n\t/* Get string length */\n\n\tlen = tvb_get_letohl(tvb, start_offset);\n\n\ts = tvb_get_string_enc(NULL,\n\t\ttvb, start_offset + 4, (end_offset - start_offset - 4), ENC_UTF_16|ENC_LITTLE_ENDIAN);\n\n\t/* Append string to upper-level proto_items */\n\n\tlevels = 2;\n\n\tif (levels > 0 && item && s && s[0]) {\n\t\tproto_item_append_text(item, \": %s\", s);\n\t\titem = item->parent;\n\t\tlevels--;\n\t\tif (levels > 0) {\n\t\t\tproto_item_append_text(item, \": %s\", s);\n\t\t\titem = item->parent;\n\t\t\tlevels--;\n\t\t\twhile (levels > 0) {\n\t\t\t\tproto_item_append_text(item, \" %s\", s);\n\t\t\t\titem = item->parent;\n\t\t\t\tlevels--;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Add hidden field so filter brings up any notify data */\n\n\tif (hf_index != -1) {\n\t\thidden_item = proto_tree_add_string(\n\t\t\ttree, hf_index, tvb, start_offset, len, s);\n\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\t}\n\n\tg_free(s);\n}\n\n/* Return the hf_index for a printer notify field.  This is used to\n   add a hidden string to the display so that filtering will bring\n   up relevant notify data. */\n\nstatic int\nprinter_notify_hf_index(int field)\n{\n\tint result = -1;\n\n\tswitch(field) {\n\tcase PRINTER_NOTIFY_SERVER_NAME:\n\t\tresult = hf_servername;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_PRINTER_NAME:\n\t\tresult = hf_printername;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_SHARE_NAME:\n\t\tresult = hf_sharename;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_PORT_NAME:\n\t\tresult = hf_portname;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_DRIVER_NAME:\n\t\tresult = hf_drivername;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_COMMENT:\n\t\tresult = hf_printercomment;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_LOCATION:\n\t\tresult = hf_printerlocation;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_SEPFILE:\n\t\tresult = hf_sepfile;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_PRINT_PROCESSOR:\n\t\tresult = hf_printprocessor;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_PARAMETERS:\n\t\tresult = hf_parameters;\n\t\tbreak;\n\tcase PRINTER_NOTIFY_DATATYPE:\n\t\tresult = hf_parameters;\n\t\tbreak;\n\t}\n\n\treturn result;\n}\n\nstatic int\njob_notify_hf_index(int field)\n{\n\tint result = -1;\n\n\tswitch(field) {\n\tcase JOB_NOTIFY_PRINTER_NAME:\n\t\tresult = hf_printername;\n\t\tbreak;\n\tcase JOB_NOTIFY_MACHINE_NAME:\n\t\tresult = hf_machinename;\n\t\tbreak;\n\tcase JOB_NOTIFY_PORT_NAME:\n\t\tresult = hf_portname;\n\t\tbreak;\n\tcase JOB_NOTIFY_USER_NAME:\n\t\tresult = hf_username;\n\t\tbreak;\n\tcase JOB_NOTIFY_NOTIFY_NAME:\n\t\tresult = hf_notifyname;\n\t\tbreak;\n\tcase JOB_NOTIFY_DATATYPE:\n\t\tresult = hf_datatype;\n\t\tbreak;\n\tcase JOB_NOTIFY_PRINT_PROCESSOR:\n\t\tresult = hf_printprocessor;\n\t\tbreak;\n\tcase JOB_NOTIFY_DRIVER_NAME:\n\t\tresult = hf_drivername;\n\t\tbreak;\n\tcase JOB_NOTIFY_DOCUMENT:\n\t\tresult = hf_documentname;\n\t\tbreak;\n\tcase JOB_NOTIFY_PRIORITY:\n\t\tresult = hf_job_priority;\n\t\tbreak;\n\tcase JOB_NOTIFY_POSITION:\n\t\tresult = hf_job_position;\n\t\tbreak;\n\tcase JOB_NOTIFY_TOTAL_PAGES:\n\t\tresult = hf_job_totalpages;\n\t\tbreak;\n\tcase JOB_NOTIFY_PAGES_PRINTED:\n\t\tresult = hf_job_pagesprinted;\n\t\tbreak;\n\tcase JOB_NOTIFY_TOTAL_BYTES:\n\t\tresult = hf_job_totalbytes;\n\t\tbreak;\n\tcase JOB_NOTIFY_BYTES_PRINTED:\n\t\tresult = hf_job_bytesprinted;\n\t\tbreak;\n\t}\n\n\treturn result;\n}\n\nstatic int\ndissect_NOTIFY_INFO_DATA_printer(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t proto_tree *tree, proto_item *item,\n\t\t\t\t dcerpc_info *di, guint8 *drep, guint16 field)\n{\n\tguint32 value1;\n\n\tswitch (field) {\n\n\t\t/* String notify data */\n\n\tcase PRINTER_NOTIFY_SERVER_NAME:\n\tcase PRINTER_NOTIFY_PRINTER_NAME:\n\tcase PRINTER_NOTIFY_SHARE_NAME:\n\tcase PRINTER_NOTIFY_DRIVER_NAME:\n\tcase PRINTER_NOTIFY_COMMENT:\n\tcase PRINTER_NOTIFY_LOCATION:\n\tcase PRINTER_NOTIFY_SEPFILE:\n\tcase PRINTER_NOTIFY_PRINT_PROCESSOR:\n\tcase PRINTER_NOTIFY_PARAMETERS:\n\tcase PRINTER_NOTIFY_DATATYPE:\n\tcase PRINTER_NOTIFY_PORT_NAME:\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_bufsize, &value1);\n\n\t\toffset = dissect_ndr_pointer_cb(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_notify_info_data_buffer,\n\t\t\tNDR_POINTER_UNIQUE, \"String\",\n\t\t\thf_notify_info_data_buffer,\n\t\t\tcb_notify_str_postprocess,\n\t\t\tGINT_TO_POINTER(printer_notify_hf_index(field)));\n\n\t\tbreak;\n\n\tcase PRINTER_NOTIFY_ATTRIBUTES:\n\n\t\t/* Value 1 is the printer attributes */\n\n\t\toffset = dissect_printer_attributes(\n\t\t\ttvb, offset, pinfo, tree, di, drep);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tbreak;\n\n\tcase PRINTER_NOTIFY_STATUS: {\n\t\tguint32 status;\n\n\t\t/* Value 1 is the printer status */\n\n \t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_printer_status, &status);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tproto_item_append_text(\n\t\t\titem, \": %s\",\n\t\t\tval_to_str_ext_const(status, &printer_status_vals_ext, \"Unknown\"));\n\n\t\tbreak;\n\t}\n\n\t\t/* Unknown notify data */\n\n\tcase PRINTER_NOTIFY_SECURITY_DESCRIPTOR: /* Secdesc */\n\tcase PRINTER_NOTIFY_DEVMODE: /* Devicemode */\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_bufsize, &value1);\n\n\t\toffset = dissect_ndr_pointer(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_notify_info_data_buffer,\n\t\t\tNDR_POINTER_UNIQUE, \"Buffer\",\n\t\t\thf_notify_info_data_buffer);\n\n\t\tbreak;\n\n\tdefault:\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value1, NULL);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tbreak;\n\t}\n\treturn offset;\n}\n\nstatic void\nnotify_job_time_cb(packet_info *pinfo _U_, proto_tree *tree _U_,\n\t\t\t       proto_item *item, dcerpc_info *di, tvbuff_t *tvb _U_,\n\t\t\t       int start_offset _U_, int end_offset _U_,\n\t\t\t       void *callback_args _U_)\n{\n\tdcerpc_call_value *dcv = (dcerpc_call_value *)di->call_data;\n\tchar *str = (char *)dcv->private_data;\n\n\t/* Append job string stored in dcv->private_data by\n\t   dissect_SYSTEM_TIME_ptr() in the current item as well\n\t   as the parent. */\n\n\tproto_item_append_text(item, \": %s\", str);\n\n\tif (item)\n\t\tproto_item_append_text(item->parent, \": %s\", str);\n}\n\nstatic int\ndissect_NOTIFY_INFO_DATA_job(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, proto_item *item, dcerpc_info *di, guint8 *drep,\n\t\t\t     guint16 field)\n{\n\tguint32 value1;\n\tproto_item *hidden_item;\n\n\tswitch (field) {\n\n\t\t/* String notify data */\n\n\tcase JOB_NOTIFY_PRINTER_NAME:\n\tcase JOB_NOTIFY_MACHINE_NAME:\n\tcase JOB_NOTIFY_PORT_NAME:\n\tcase JOB_NOTIFY_USER_NAME:\n\tcase JOB_NOTIFY_NOTIFY_NAME:\n\tcase JOB_NOTIFY_DATATYPE:\n\tcase JOB_NOTIFY_PRINT_PROCESSOR:\n\tcase JOB_NOTIFY_PARAMETERS:\n\tcase JOB_NOTIFY_DRIVER_NAME:\n\tcase JOB_NOTIFY_STATUS_STRING:\n\tcase JOB_NOTIFY_DOCUMENT:\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_bufsize, &value1);\n\n\t\toffset = dissect_ndr_pointer_cb(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_notify_info_data_buffer,\n\t\t\tNDR_POINTER_UNIQUE, \"String\",\n\t\t\thf_notify_info_data_buffer,\n\t\t\tcb_notify_str_postprocess,\n\t\t\tGINT_TO_POINTER(job_notify_hf_index(field)));\n\n\t\tbreak;\n\n\tcase JOB_NOTIFY_STATUS:\n\t\toffset = dissect_job_status(\n\t\t\ttvb, offset, pinfo, tree, di, drep);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tbreak;\n\n\tcase JOB_NOTIFY_SUBMITTED:\n\n\t\t/* SYSTEM_TIME */\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_buffer_len, NULL);\n\n\t\toffset = dissect_ndr_pointer_cb(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_SYSTEM_TIME_ptr, NDR_POINTER_UNIQUE,\n\t\t\t\"Time submitted\", -1, notify_job_time_cb, NULL);\n\n\t\tbreak;\n\n\tcase JOB_NOTIFY_PRIORITY:\n\tcase JOB_NOTIFY_POSITION:\n\tcase JOB_NOTIFY_TOTAL_PAGES:\n\tcase JOB_NOTIFY_PAGES_PRINTED:\n\tcase JOB_NOTIFY_TOTAL_BYTES:\n\tcase JOB_NOTIFY_BYTES_PRINTED: {\n\t\tguint32 value;\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value1, &value);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\n\t\tproto_item_append_text(item, \": %d\", value);\n\n\t\thidden_item = proto_tree_add_uint(\n\t\t\ttree, job_notify_hf_index(field), tvb,\n\t\t\toffset, 4, value);\n\t\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t\tbreak;\n\t}\n\n\t\t/* Unknown notify data */\n\n\tcase JOB_NOTIFY_DEVMODE:\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_bufsize, &value1);\n\n\t\toffset = dissect_ndr_pointer(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\tdissect_notify_info_data_buffer,\n\t\t\tNDR_POINTER_UNIQUE, \"Buffer\",\n\t\t\thf_notify_info_data_buffer);\n\n\t\tbreak;\n\n\tdefault:\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value1, NULL);\n\n\t\toffset = dissect_ndr_uint32(\n\t\t\ttvb, offset, pinfo, tree, di, drep,\n\t\t\thf_notify_info_data_value2, NULL);\n\t}\n\treturn offset;\n}\n\nstatic gint ett_NOTIFY_INFO_DATA = -1;\n\nstatic int\ndissect_NOTIFY_INFO_DATA(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tproto_item *item;\n\tproto_tree *subtree;\n\tguint32 count;\n\tguint16 type, field;\n\tconst char *field_string;\n\n\tsubtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_NOTIFY_INFO_DATA, &item, \"\");\n\n\toffset = dissect_ndr_uint16(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_notify_info_data_type, &type);\n\n\toffset = dissect_notify_field(\n\t\ttvb, offset, pinfo, subtree, di, drep, type, &field);\n\n\tswitch(type) {\n\tcase PRINTER_NOTIFY_TYPE:\n\t\tfield_string = val_to_str_ext(\n\t\t\tfield, &printer_notify_option_data_vals_ext,\n\t\t\t\"Unknown (%d)\");\n\t\tbreak;\n\tcase JOB_NOTIFY_TYPE:\n\t\tfield_string = val_to_str_ext(\n\t\t\tfield, &job_notify_option_data_vals_ext,\n\t\t\t\"Unknown (%d)\");\n\t\tbreak;\n\tdefault:\n\t\tfield_string = \"Unknown field\";\n\t\tbreak;\n\t}\n\n\tproto_item_append_text(\n\t\titem, \"%s, %s\",\n\t\tval_to_str(type, printer_notify_types, \"Unknown (%d)\"),\n\t\tfield_string);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_notify_info_data_count, &count);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_notify_info_data_id, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_notify_info_data_count, NULL);\n\n\t/* The value here depends on (type, field) */\n\n\tswitch (type) {\n\tcase PRINTER_NOTIFY_TYPE:\n\t\toffset = dissect_NOTIFY_INFO_DATA_printer(\n\t\t\ttvb, offset, pinfo, subtree, item, di, drep, field);\n\t\tbreak;\n\tcase JOB_NOTIFY_TYPE:\n\t\toffset = dissect_NOTIFY_INFO_DATA_job(\n\t\t\ttvb, offset, pinfo, subtree, item, di, drep, field);\n\t\tbreak;\n\tdefault:\n\t\texpert_add_info(pinfo, item, &ei_notify_info_data_type);\n\t\tbreak;\n\t}\n\n\treturn offset;\n}\n\nstatic int\ndissect_NOTIFY_INFO(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t    proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 count;\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_info_version, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_info_flags, NULL);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_info_count, &count);\n\n\tif (!di->conformant_run)\n\t\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", %d %s\", count,\n\t\t\tnotify_plural(count));\n\n\toffset = dissect_ndr_ucarray(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t     dissect_NOTIFY_INFO_DATA);\n\n\treturn offset;\n}\n\n/*\n * RFNPCNEX\n */\n\nstatic int\nSpoolssRFNPCNEX_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 changeid;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_changelow, &changeid);\n\n\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", changeid %d\", changeid);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_OPTIONS_ARRAY_CTR, NDR_POINTER_UNIQUE,\n\t\t\"Notify Options Array Container\", -1);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssRFNPCNEX_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t     proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_INFO, NDR_POINTER_UNIQUE,\n\t\t\"Notify Info\", -1);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * RRPCN\n */\n\nstatic int\nSpoolssRRPCN_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t  proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 changeid;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_changelow, &changeid);\n\n\tcol_append_fstr(\n\t\t\tpinfo->cinfo, COL_INFO, \", changeid %d\", changeid);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_changehigh, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_unk0, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_unk1, NULL);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_INFO, NDR_POINTER_UNIQUE,\n\t\t\"Notify Info\", -1);\n\n\t/* Notify info */\n\n\treturn offset;\n}\n\nstatic int\nSpoolssRRPCN_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t  proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rrpcn_unk0, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * ReplyClosePrinter\n */\n\nstatic int\nSpoolssReplyClosePrinter_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, TRUE);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssReplyClosePrinter_r(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * FCPN\n */\n\nstatic int\nSpoolssFCPN_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssFCPN_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\tproto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * RouterReplyPrinter\n */\n\nstatic int hf_routerreplyprinter_condition = -1;\nstatic int hf_routerreplyprinter_unknown1 = -1;\nstatic int hf_routerreplyprinter_changeid = -1;\n\nstatic int\nSpoolssRouterReplyPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_routerreplyprinter_condition, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_routerreplyprinter_unknown1, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_routerreplyprinter_changeid, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssRouterReplyPrinter_r(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t\t       proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int hf_keybuffer_size = -1;\n\nstatic int\ndissect_spoolss_keybuffer(tvbuff_t *tvb, int offset, packet_info *pinfo,\n\t\t\t  proto_tree *tree, dcerpc_info *di, guint8 *drep)\n{\n\tguint32 size;\n\tint end_offset;\n\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\t/* Dissect size and data */\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_keybuffer_size, &size);\n\n\tend_offset = offset + (size*2);\n\tif (end_offset < offset) {\n\t\t/*\n\t\t * Overflow - make the end offset one past the end of\n\t\t * the packet data, so we throw an exception (as the\n\t\t * size is almost certainly too big).\n\t\t */\n\t\tend_offset = tvb_reported_length_remaining(tvb, offset) + 1;\n\t}\n\n\twhile (offset > 0 && offset < end_offset) {\n\t\toffset = dissect_spoolss_uint16uni(\n\t\t\ttvb, offset, pinfo, tree, drep, NULL, hf_keybuffer);\n\t}\n\n\treturn offset;\n}\n\n\nstatic int\nSpoolssEnumPrinterKey_q(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\tchar *key_name;\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_key, TRUE, &key_name);\n\n\tif (!key_name[0])\n\t\tkey_name = \"\\\"\\\"\";\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", key_name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssEnumPrinterKey_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_keybuffer(tvb, offset, pinfo, tree, di, drep);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int hf_enumprinterdataex_name_offset = -1;\nstatic int hf_enumprinterdataex_name_len = -1;\nstatic int hf_enumprinterdataex_name = -1;\nstatic int hf_enumprinterdataex_val_offset = -1;\nstatic int hf_enumprinterdataex_val_len = -1;\nstatic int hf_enumprinterdataex_val_dword_low = -1;\nstatic int hf_enumprinterdataex_val_dword_high = -1;\nstatic int hf_enumprinterdataex_value_null = -1;\nstatic int hf_enumprinterdataex_value_uint = -1;\nstatic int hf_enumprinterdataex_value_binary = -1;\nstatic int hf_enumprinterdataex_value_multi_sz = -1;\n\nstatic int\nSpoolssEnumPrinterDataEx_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tchar *key_name;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_nt_policy_hnd(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,\n\t\tFALSE, FALSE);\n\n\toffset = dissect_ndr_cvstring(\n\t\ttvb, offset, pinfo, tree, di, drep, sizeof(guint16),\n\t\thf_printerdata_key, TRUE, &key_name);\n\n\tcol_append_fstr(pinfo->cinfo, COL_INFO, \", %s\", key_name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic gint ett_printer_enumdataex_value = -1;\n\nstatic int\ndissect_spoolss_printer_enum_values(tvbuff_t *tvb, int offset,\n\t\t\t\t    packet_info *pinfo, proto_tree *tree,\n\t\t\t\t    dcerpc_info *di, guint8 *drep)\n{\n\tguint32 start_offset = offset;\n\tguint32 name_offset, name_len, val_offset, val_len, val_type;\n\tchar *name;\n\tproto_item *item;\n\tproto_tree *subtree;\n\n\t/* Get offset of value name */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_enumprinterdataex_name_offset, &name_offset);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, NULL, di, drep,\n\t\thf_enumprinterdataex_name_len, &name_len);\n\n\tdissect_spoolss_uint16uni(\n\t\ttvb, start_offset + name_offset, pinfo, NULL, drep,\n\t\t&name, hf_enumprinterdataex_name);\n\n\tsubtree = proto_tree_add_subtree_format(tree, tvb, offset, 0, ett_printer_enumdataex_value, &item, \"Name: %s\", name);\n\n\tproto_tree_add_uint(subtree, hf_enumprinterdataex_name_offset, tvb, offset - 8, 4, name_offset);\n\n\tproto_tree_add_uint(subtree, hf_enumprinterdataex_name_len, tvb, offset - 4, 4, name_len);\n\n\tproto_tree_add_string( subtree, hf_enumprinterdataex_name, tvb, start_offset + name_offset, ((int)strlen(name) + 1) * 2, name);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep, hf_printerdata_type,\n\t\t&val_type);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_enumprinterdataex_val_offset, &val_offset);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, subtree, di, drep,\n\t\thf_enumprinterdataex_val_len, &val_len);\n\n\tif (val_len == 0) {\n\t\tproto_tree_add_uint_format_value(subtree, hf_enumprinterdataex_value_null, tvb, start_offset + val_offset, 4, 0, \"(null)\");\n\t\tgoto done;\n\t}\n\n\tswitch(val_type) {\n\tcase DCERPC_REG_DWORD: {\n\t\tguint32 value;\n\t\tguint16 low, high;\n\t\tint offset2 = start_offset + val_offset;\n\n\t\t/* Needs to be broken into two 16-byte ints because it may\n\t\t   not be aligned. */\n\n\t\toffset2 = dissect_ndr_uint16(\n\t\t\ttvb, offset2, pinfo, subtree, di, drep,\n\t\t\thf_enumprinterdataex_val_dword_low, &low);\n\n\t\t/*offset2 = */dissect_ndr_uint16(\n\t\t\ttvb, offset2, pinfo, subtree, di, drep,\n\t\t\thf_enumprinterdataex_val_dword_high, &high);\n\n\t\tvalue = (high << 16) | low;\n\n\t\tproto_tree_add_uint(subtree, hf_enumprinterdataex_value_uint, tvb, start_offset + val_offset, 4, value);\n\n\t\tproto_item_append_text(item, \", Value: %d\", value);\n\n\t\tbreak;\n\t}\n\tcase DCERPC_REG_SZ: {\n\t\tchar *value;\n\n\t\tdissect_spoolss_uint16uni(\n\t\t\ttvb, start_offset + val_offset, pinfo, subtree, drep,\n\t\t\t&value, hf_value_string);\n\n\t\tproto_item_append_text(item, \", Value: %s\", value);\n\n\t\tg_free(value);\n\n\t\tbreak;\n\t}\n\tcase DCERPC_REG_BINARY:\n\n\t\t/* FIXME: nicer way to display this */\n\n\t\tproto_tree_add_bytes_format_value( subtree, hf_enumprinterdataex_value_binary, tvb, start_offset + val_offset, val_len, NULL, \"<binary data>\");\n\t\tbreak;\n\n\tcase DCERPC_REG_MULTI_SZ:\n\n\t\t/* FIXME: implement REG_MULTI_SZ support */\n\n\t\tproto_tree_add_bytes_format_value(subtree, hf_enumprinterdataex_value_multi_sz, tvb, start_offset + val_offset, val_len, NULL, \"<REG_MULTI_SZ not implemented>\");\n\t\tbreak;\n\n\tdefault:\n\t\tproto_tree_add_expert_format( subtree, pinfo, &ei_enumprinterdataex_value, tvb, start_offset + val_offset, val_len, \"%s: unknown type %d\", name, val_type);\n\t}\n\n done:\n\tg_free(name);\n\n\treturn offset;\n}\n\nstatic gint ett_PRINTER_DATA_CTR = -1;\n\nstatic int\nSpoolssEnumPrinterDataEx_r(tvbuff_t *tvb, int offset,\n\t\t\t\t   packet_info *pinfo, proto_tree *tree,\n\t\t\t\t   dcerpc_info *di, guint8 *drep)\n{\n\tguint32 size, num_values;\n\tproto_item *hidden_item;\n\n\thidden_item = proto_tree_add_uint(\n\t\ttree, hf_printerdata, tvb, offset, 0, 1);\n\tPROTO_ITEM_SET_HIDDEN(hidden_item);\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\thf_buffer_size, &size);\n\n\tdissect_ndr_uint32(\n\t\ttvb, offset + size + 4, pinfo, NULL, di, drep, hf_returned,\n\t\t&num_values);\n\n\tif (size) {\n\t\tproto_tree *subtree;\n\t\tint offset2 = offset;\n\t\tguint32 i;\n\n\t\tsubtree = proto_tree_add_subtree(\n\t\t\ttree, tvb, offset, 0, ett_PRINTER_DATA_CTR, NULL, \"Printer data\");\n\n\t\tfor (i=0; i < num_values; i++)\n\t\t\toffset2 = dissect_spoolss_printer_enum_values(\n\t\t\t\ttvb, offset2, pinfo, subtree, di, drep);\n\t}\n\n\toffset += size;\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_returned, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterDriverDirectory_q(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\tguint32 level;\n\n\t/* Parse packet */\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Name\", hf_servername, 0);\n\n\toffset = dissect_ndr_str_pointer_item(\n\t\ttvb, offset, pinfo, tree, di, drep, NDR_POINTER_UNIQUE,\n\t\t\"Environment\", hf_environment, 0);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_level, &level);\n\n\toffset = dissect_spoolss_buffer(\n\t\ttvb, offset, pinfo, tree, di, drep, NULL);\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_offered, NULL);\n\n\treturn offset;\n}\n\nstatic int\nSpoolssGetPrinterDriverDirectory_r(tvbuff_t *tvb, int offset,\n\t\t\t\t      packet_info *pinfo, proto_tree *tree,\n\t\t\t\t      dcerpc_info *di, guint8 *drep)\n{\n\t/* Parse packet */\n\n\toffset = dissect_spoolss_string_parm(\n\t\ttvb, offset, pinfo, tree, di, drep, \"Directory\");\n\n\toffset = dissect_ndr_uint32(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_needed, NULL);\n\n\toffset = dissect_doserror(\n\t\ttvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n\n\treturn offset;\n}\n\n/*\n * List of subdissectors for this pipe.\n */\n\nstatic dcerpc_sub_dissector dcerpc_spoolss_dissectors[] = {\n\t{ SPOOLSS_ENUMPRINTERS, \"EnumPrinters\",\n\t  SpoolssEnumPrinters_q, SpoolssEnumPrinters_r },\n\t{ SPOOLSS_OPENPRINTER, \"OpenPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_SETJOB, \"SetJob\",\n\t  SpoolssSetJob_q, SpoolssSetJob_r },\n\t{ SPOOLSS_GETJOB, \"GetJob\",\n\t  SpoolssGetJob_q, SpoolssGetJob_r },\n\t{ SPOOLSS_ENUMJOBS, \"EnumJobs\",\n\t  SpoolssEnumJobs_q, SpoolssEnumJobs_r },\n\t{ SPOOLSS_ADDPRINTER, \"AddPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTER, \"DeletePrinter\",\n\t  SpoolssDeletePrinter_q, SpoolssDeletePrinter_r },\n\t{ SPOOLSS_SETPRINTER, \"SetPrinter\",\n\t  SpoolssSetPrinter_q, SpoolssSetPrinter_r },\n\t{ SPOOLSS_GETPRINTER, \"GetPrinter\",\n\t  SpoolssGetPrinter_q, SpoolssGetPrinter_r },\n\t{ SPOOLSS_ADDPRINTERDRIVER, \"AddPrinterDriver\",\n\t  NULL, SpoolssAddPrinterDriver_r },\n\t{ SPOOLSS_ENUMPRINTERDRIVERS, \"EnumPrinterDrivers\",\n\t  SpoolssEnumPrinterDrivers_q, SpoolssEnumPrinterDrivers_r },\n\t{ SPOOLSS_GETPRINTERDRIVER, \"GetPrinterDriver\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_GETPRINTERDRIVERDIRECTORY, \"GetPrinterDriverDirectory\",\n\t  SpoolssGetPrinterDriverDirectory_q, SpoolssGetPrinterDriverDirectory_r },\n\t{ SPOOLSS_DELETEPRINTERDRIVER, \"DeletePrinterDriver\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPRINTPROCESSOR, \"AddPrintProcessor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ENUMPRINTPROCESSORS, \"EnumPrintProcessor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_GETPRINTPROCESSORDIRECTORY, \"GetPrintProcessorDirectory\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_STARTDOCPRINTER, \"StartDocPrinter\",\n\t  SpoolssStartDocPrinter_q, SpoolssStartDocPrinter_r },\n\t{ SPOOLSS_STARTPAGEPRINTER, \"StartPagePrinter\",\n\t  SpoolssStartPagePrinter_q, SpoolssStartPagePrinter_r },\n\t{ SPOOLSS_WRITEPRINTER, \"WritePrinter\",\n\t  SpoolssWritePrinter_q, SpoolssWritePrinter_r },\n\t{ SPOOLSS_ENDPAGEPRINTER, \"EndPagePrinter\",\n\t  SpoolssEndPagePrinter_q, SpoolssEndPagePrinter_r },\n\t{ SPOOLSS_ABORTPRINTER, \"AbortPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_READPRINTER, \"ReadPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ENDDOCPRINTER, \"EndDocPrinter\",\n\t  SpoolssEndDocPrinter_q, SpoolssEndDocPrinter_r },\n\t{ SPOOLSS_ADDJOB, \"AddJob\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_SCHEDULEJOB, \"ScheduleJob\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_GETPRINTERDATA, \"GetPrinterData\",\n\t  SpoolssGetPrinterData_q, SpoolssGetPrinterData_r },\n\t{ SPOOLSS_SETPRINTERDATA, \"SetPrinterData\",\n\t  SpoolssSetPrinterData_q, SpoolssSetPrinterData_r },\n\t{ SPOOLSS_WAITFORPRINTERCHANGE, \"WaitForPrinterChange\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_CLOSEPRINTER, \"ClosePrinter\",\n\t  SpoolssClosePrinter_q, SpoolssClosePrinter_r },\n\t{ SPOOLSS_ADDFORM, \"AddForm\",\n\t  SpoolssAddForm_q, SpoolssAddForm_r },\n\t{ SPOOLSS_DELETEFORM, \"DeleteForm\",\n\t  SpoolssDeleteForm_q, SpoolssDeleteForm_r },\n\t{ SPOOLSS_GETFORM, \"GetForm\",\n\t  SpoolssGetForm_q, SpoolssGetForm_r },\n\t{ SPOOLSS_SETFORM, \"SetForm\",\n\t  SpoolssSetForm_q, SpoolssSetForm_r },\n\t{ SPOOLSS_ENUMFORMS, \"EnumForms\",\n\t  SpoolssEnumForms_q, SpoolssEnumForms_r },\n\t{ SPOOLSS_ENUMPORTS, \"EnumPorts\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ENUMMONITORS, \"EnumMonitors\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPORT, \"AddPort\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_CONFIGUREPORT, \"ConfigurePort\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPORT, \"DeletePort\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_CREATEPRINTERIC, \"CreatePrinterIC\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_PLAYGDISCRIPTONPRINTERIC, \"PlayDiscriptOnPrinterIC\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTERIC, \"DeletePrinterIC\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPRINTERCONNECTION, \"AddPrinterConnection\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTERCONNECTION, \"DeletePrinterConnection\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_PRINTERMESSAGEBOX, \"PrinterMessageBox\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDMONITOR, \"AddMonitor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEMONITOR, \"DeleteMonitor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTPROCESSOR, \"DeletePrintProcessor\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPRINTPROVIDER, \"AddPrintProvider\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTPROVIDER, \"DeletePrintProvider\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ENUMPRINTPROCDATATYPES, \"EnumPrintProcDataTypes\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_RESETPRINTER, \"ResetPrinter\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_GETPRINTERDRIVER2, \"GetPrinterDriver2\",\n\t  SpoolssGetPrinterDriver2_q, SpoolssGetPrinterDriver2_r },\n\t{ SPOOLSS_FINDFIRSTPRINTERCHANGENOTIFICATION,\n\t  \"FindFirstPrinterChangeNotification\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_FINDNEXTPRINTERCHANGENOTIFICATION,\n\t  \"FindNextPrinterChangeNotification\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_FCPN, \"FCPN\",\n\t  SpoolssFCPN_q, SpoolssFCPN_r },\n\t{ SPOOLSS_ROUTERFINDFIRSTPRINTERNOTIFICATIONOLD,\n\t  \"RouterFindFirstPrinterNotificationOld\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_REPLYOPENPRINTER, \"ReplyOpenPrinter\",\n\t  SpoolssReplyOpenPrinter_q, SpoolssReplyOpenPrinter_r },\n\t{ SPOOLSS_ROUTERREPLYPRINTER, \"RouterReplyPrinter\",\n\t  SpoolssRouterReplyPrinter_q, SpoolssRouterReplyPrinter_r },\n\t{ SPOOLSS_REPLYCLOSEPRINTER, \"ReplyClosePrinter\",\n\t  SpoolssReplyClosePrinter_q, SpoolssReplyClosePrinter_r },\n\t{ SPOOLSS_ADDPORTEX, \"AddPortEx\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_REMOTEFINDFIRSTPRINTERCHANGENOTIFICATION,\n\t  \"RemoteFindFirstPrinterChangeNotification\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_SPOOLERINIT, \"SpoolerInit\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_RESETPRINTEREX, \"ResetPrinterEx\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_RFFPCNEX, \"RFFPCNEX\",\n\t  SpoolssRFFPCNEX_q, SpoolssRFFPCNEX_r },\n\t{ SPOOLSS_RRPCN, \"RRPCN\",\n\t  SpoolssRRPCN_q, SpoolssRRPCN_r },\n\t{ SPOOLSS_RFNPCNEX, \"RFNPCNEX\",\n\t  SpoolssRFNPCNEX_q, SpoolssRFNPCNEX_r },\n\t{ SPOOLSS_OPENPRINTEREX, \"OpenPrinterEx\",\n\t  SpoolssOpenPrinterEx_q, SpoolssOpenPrinterEx_r },\n\t{ SPOOLSS_ADDPRINTEREX, \"AddPrinterEx\",\n\t  NULL, SpoolssAddPrinterEx_r },\n\t{ SPOOLSS_ENUMPRINTERDATA, \"EnumPrinterData\",\n\t  SpoolssEnumPrinterData_q, SpoolssEnumPrinterData_r },\n\t{ SPOOLSS_DELETEPRINTERDATA, \"DeletePrinterData\",\n\t  SpoolssDeletePrinterData_q, SpoolssDeletePrinterData_r },\n\t{ SPOOLSS_GETPRINTERDATAEX, \"GetPrinterDataEx\",\n\t  SpoolssGetPrinterDataEx_q, SpoolssGetPrinterDataEx_r },\n\t{ SPOOLSS_SETPRINTERDATAEX, \"SetPrinterDataEx\",\n\t  SpoolssSetPrinterDataEx_q, SpoolssSetPrinterDataEx_r },\n\t{ SPOOLSS_ENUMPRINTERDATAEX, \"EnumPrinterDataEx\",\n\t  SpoolssEnumPrinterDataEx_q, SpoolssEnumPrinterDataEx_r },\n\t{ SPOOLSS_ENUMPRINTERKEY, \"EnumPrinterKey\",\n\t  SpoolssEnumPrinterKey_q, SpoolssEnumPrinterKey_r },\n\t{ SPOOLSS_DELETEPRINTERDATAEX, \"DeletePrinterDataEx\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_DELETEPRINTERDRIVEREX, \"DeletePrinterDriverEx\",\n\t  NULL, SpoolssGeneric_r },\n\t{ SPOOLSS_ADDPRINTERDRIVEREX, \"AddPrinterDriverEx\",\n\t  NULL, SpoolssGeneric_r },\n\n\t{ 0, NULL, NULL, NULL },\n};\n\n/*\n * Dissector initialisation function\n */\n\n/* Protocol registration */\n\nstatic int proto_dcerpc_spoolss = -1;\nstatic gint ett_dcerpc_spoolss = -1;\n\nvoid\nproto_register_dcerpc_spoolss(void)\n{\n\tstatic hf_register_info hf[] = {\n\n\t\t/* GetPrinterDriver2 */\n\n\t\t{ &hf_clientmajorversion,\n\t\t  { \"Client major version\", \"spoolss.clientmajorversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Client printer driver major version\", HFILL }},\n\t\t{ &hf_clientminorversion,\n\t\t  { \"Client minor version\", \"spoolss.clientminorversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Client printer driver minor version\", HFILL }},\n\t\t{ &hf_servermajorversion,\n\t\t  { \"Server major version\", \"spoolss.servermajorversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Server printer driver major version\", HFILL }},\n\t\t{ &hf_serverminorversion,\n\t\t  { \"Server minor version\", \"spoolss.serverminorversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Server printer driver minor version\", HFILL }},\n\t\t{ &hf_driverpath,\n\t\t  { \"Driver path\", \"spoolss.driverpath\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_datafile,\n\t\t  { \"Data file\", \"spoolss.datafile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_configfile,\n\t\t  { \"Config file\", \"spoolss.configfile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"Printer name\", HFILL }},\n\t\t{ &hf_helpfile,\n\t\t  { \"Help file\", \"spoolss.helpfile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_monitorname,\n\t\t  { \"Monitor name\", \"spoolss.monitorname\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_defaultdatatype,\n\t\t  { \"Default data type\", \"spoolss.defaultdatatype\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\t\t{ &hf_driverinfo_cversion,\n\t\t  { \"Driver version\", \"spoolss.driverversion\", FT_UINT32, BASE_DEC,\n\t\t    VALS(driverinfo_cversion_vals), 0, \"Printer name\", HFILL }},\n\t\t{ &hf_dependentfiles,\n\t\t  { \"Dependent files\", \"spoolss.dependentfiles\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_status,\n\t\t  { \"Status\", \"spoolss.printer_status\", FT_UINT32, BASE_DEC|BASE_EXT_STRING,\n\t\t    &printer_status_vals_ext, 0, NULL, HFILL }},\n\n\t\t{ &hf_previousdrivernames,\n\t\t  { \"Previous Driver Names\", \"spoolss.previousdrivernames\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_driverdate,\n\t\t  { \"Driver Date\", \"spoolss.driverdate\", FT_ABSOLUTE_TIME, ABSOLUTE_TIME_LOCAL,\n\t\t    NULL, 0, \"Date of driver creation\", HFILL }},\n\n\t\t{ &hf_padding,\n\t\t  { \"Padding\", \"spoolss.padding\", FT_UINT32, BASE_HEX,\n\t\t    NULL, 0, \"Some padding - conveys no semantic information\", HFILL }},\n\n\t\t{ &hf_driver_version_low,\n\t\t  { \"Minor Driver Version\", \"spoolss.minordriverversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, \"Driver Version Low\", HFILL }},\n\n\t\t{ &hf_driver_version_high,\n\t\t  { \"Major Driver Version\", \"spoolss.majordriverversion\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, \"Driver Version High\", HFILL }},\n\n\t\t{ &hf_mfgname,\n\t\t  { \"Mfgname\", \"spoolss.mfgname\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"Manufacturer Name\", HFILL }},\n\n\t\t{ &hf_oemurl,\n\t\t  { \"OEM URL\", \"spoolss.oemrul\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"OEM URL - Website of Vendor\", HFILL }},\n\n\t\t{ &hf_hardwareid,\n\t\t  { \"Hardware ID\", \"spoolss.hardwareid\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"Hardware Identification Information\", HFILL }},\n\n\t   \t{ &hf_provider,\n\t   \t  { \"Provider\", \"spoolss.provider\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, \"Provider of Driver\", HFILL }},\n\n\t\t/* Setprinter RPC */\n\n\t\t{ &hf_setprinter_cmd,\n\t\t  { \"Command\", \"spoolss.setprinter_cmd\", FT_UINT32, BASE_DEC,\n\t\t   VALS(setprinter_cmd_vals), 0, NULL, HFILL }},\n\n\t\t/* Enumprinters */\n\n\t\t{ &hf_enumprinters_flags,\n\t\t  { \"Flags\", \"spoolss.enumprinters.flags\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_local,\n\t\t  { \"Enum local\", \"spoolss.enumprinters.flags.enum_local\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_LOCAL, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_name,\n\t\t  { \"Enum name\", \"spoolss.enumprinters.flags.enum_name\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_NAME, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_shared,\n\t\t  { \"Enum shared\", \"spoolss.enumprinters.flags.enum_shared\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_SHARED, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_default,\n\t\t  { \"Enum default\", \"spoolss.enumprinters.flags.enum_default\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_DEFAULT, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_connections,\n\t\t  { \"Enum connections\", \"spoolss.enumprinters.flags.enum_connections\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_CONNECTIONS, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_network,\n\t\t  { \"Enum network\", \"spoolss.enumprinters.flags.enum_network\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_NETWORK, NULL, HFILL }},\n\n\t\t{ &hf_enumprinters_flags_remote,\n\t\t  { \"Enum remote\", \"spoolss.enumprinters.flags.enum_remote\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ENUM_REMOTE, NULL, HFILL }},\n\n\t\t/* GetPrinter */\n\n\t\t{ &hf_start_time,\n\t\t  { \"Start time\", \"spoolss.start_time\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_end_time,\n\t\t  { \"End time\", \"spoolss.end_time\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_elapsed_time,\n\t\t  { \"Elapsed time\", \"spoolss.elapsed_time\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/*\n\t\t * New hf index values\n\t\t */\n\n\t\t{ &hf_opnum,\n\t\t  { \"Operation\", \"spoolss.opnum\", FT_UINT16, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_hnd,\n\t\t  { \"Context handle\", \"spoolss.hnd\", FT_BYTES, BASE_NONE,\n\t\t    NULL, 0x0, \"SPOOLSS policy handle\", HFILL }},\n\n\t\t{ &hf_rc,\n\t\t  { \"Return code\", \"spoolss.rc\", FT_UINT32, BASE_HEX | BASE_EXT_STRING,\n\t\t    &DOS_errors_ext, 0x0, \"SPOOLSS return code\", HFILL }},\n\n\t\t{ &hf_offered,\n\t\t  { \"Offered\", \"spoolss.offered\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Size of buffer offered in this request\",\n\t\t    HFILL }},\n\n\t\t{ &hf_needed,\n\t\t  { \"Needed\", \"spoolss.needed\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Size of buffer required for request\", HFILL }},\n\n\t\t{ &hf_returned,\n\t\t  { \"Returned\", \"spoolss.returned\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Number of items returned\", HFILL }},\n\n\t\t{ &hf_buffer_size,\n\t\t  { \"Buffer size\", \"spoolss.buffer.size\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Size of buffer\", HFILL }},\n\n\t\t{ &hf_buffer_data,\n\t\t  { \"Buffer data\", \"spoolss.buffer.data\", FT_BYTES, BASE_NONE,\n\t\t    NULL, 0x0, \"Contents of buffer\", HFILL }},\n\n\t\t{ &hf_string_parm_size,\n\t\t  { \"String buffer size\", \"spoolss.string.buffersize\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Size of string buffer\", HFILL }},\n\n\t\t{ &hf_string_parm_data,\n\t\t  { \"String data\", \"spoolss.string.data\", FT_STRINGZ, BASE_NONE,\n\t\t    NULL, 0x0, \"Contents of string\", HFILL }},\n\n\t\t{ &hf_offset,\n\t\t  { \"Offset\", \"spoolss.offset\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Offset of data\", HFILL }},\n\n\t\t{ &hf_level,\n\t\t  { \"Info level\", \"spoolss.enumjobs.level\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\n\t\t{ &hf_printername,\n\t\t  { \"Printer name\", \"spoolss.printername\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_machinename,\n\t\t  { \"Machine name\", \"spoolss.machinename\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notifyname,\n\t\t  { \"Notify name\", \"spoolss.notifyname\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printerdesc,\n\t\t  { \"Printer description\", \"spoolss.printerdesc\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printercomment,\n\t\t  { \"Printer comment\", \"spoolss.printercomment\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_servername,\n\t\t  { \"Server name\", \"spoolss.servername\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_sharename,\n\t\t  { \"Share name\", \"spoolss.sharename\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_portname,\n\t\t  { \"Port name\", \"spoolss.portname\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printerlocation,\n\t\t  { \"Printer location\", \"spoolss.printerlocation\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_environment,\n\t\t  { \"Environment name\", \"spoolss.environment\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_drivername,\n\t\t  { \"Driver name\", \"spoolss.drivername\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_username,\n\t\t  { \"User name\", \"spoolss.username\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_documentname,\n\t\t  { \"Document name\", \"spoolss.document\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_outputfile,\n\t\t  { \"Output file\", \"spoolss.outputfile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_datatype,\n\t\t  { \"Datatype\", \"spoolss.datatype\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_textstatus,\n\t\t  { \"Text status\", \"spoolss.textstatus\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n \t\t{ &hf_sepfile,\n\t\t  { \"Separator file\", \"spoolss.setpfile\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n \t\t{ &hf_parameters,\n\t\t  { \"Parameters\", \"spoolss.parameters\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printprocessor,\n\t\t  { \"Print processor\", \"spoolss.printprocessor\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* Printer data */\n\n\t\t{ &hf_printerdata,\n\t\t  { \"Data\", \"spoolss.printerdata\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printerdata_key,\n\t\t  { \"Key\", \"spoolss.printerdata.key\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, \"Printer data key\", HFILL }},\n\n\t\t{ &hf_printerdata_value,\n\t\t  { \"Value\", \"spoolss.printerdata.value\",\n\t\t    FT_STRING, BASE_NONE, NULL, 0, \"Printer data value\",\n\t\t    HFILL }},\n\n\t\t{ &hf_printerdata_type,\n\t\t  { \"Type\", \"spoolss.printerdata.type\",\n\t\t    FT_UINT32, BASE_DEC|BASE_EXT_STRING, &reg_datatypes_ext, 0,\n\t\t    \"Printer data type\", HFILL }},\n\n\t\t{ &hf_printerdata_size,\n\t\t  { \"Size\", \"spoolss.printerdata.size\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, \"Printer data size\",\n\t\t    HFILL }},\n\n\t\t{ &hf_printerdata_data,\n\t\t  { \"Data\", \"spoolss.printerdata.data\", FT_BYTES, BASE_NONE,\n\t\t    NULL, 0x0, \"Printer data\", HFILL }},\n\n\t\t{ &hf_printerdata_data_dword,\n\t\t  { \"DWORD data\", \"spoolss.printerdata.data.dword\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printerdata_data_sz,\n\t\t  { \"String data\", \"spoolss.printerdata.data.sz\",\n\t\t    FT_STRING, BASE_NONE, NULL, 0, NULL,\n\t\t    HFILL }},\n\n\t\t/* Devicemode */\n\n\t\t{ &hf_devmodectr_size,\n\t\t  { \"Devicemode ctr size\", \"spoolss.devicemodectr.size\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_devmode,\n\t\t  { \"Devicemode\", \"spoolss.devmode\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_size,\n\t\t  { \"Size\", \"spoolss.devmode.size\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_spec_version,\n\t\t  { \"Spec version\", \"spoolss.devmode.spec_version\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_specversion_vals),\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_driver_version,\n\t\t  { \"Driver version\", \"spoolss.devmode.driver_version\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_size2,\n\t\t  { \"Size2\", \"spoolss.devmode.size2\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields,\n\t\t  { \"Fields\", \"spoolss.devmode.fields\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_orientation,\n\t\t  { \"Orientation\", \"spoolss.devmode.orientation\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_orientation_vals),\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_paper_size,\n\t\t  { \"Paper size\", \"spoolss.devmode.paper_size\",\n\t\t    FT_UINT16, BASE_DEC|BASE_EXT_STRING, &devmode_papersize_vals_ext,\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_paper_width,\n\t\t  { \"Paper width\", \"spoolss.devmode.paper_width\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_paper_length,\n\t\t  { \"Paper length\", \"spoolss.devmode.paper_length\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_scale,\n\t\t  { \"Scale\", \"spoolss.devmode.scale\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_copies,\n\t\t  { \"Copies\", \"spoolss.devmode.copies\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_default_source,\n\t\t  { \"Default source\", \"spoolss.devmode.default_source\",\n\t\t    FT_UINT16, BASE_DEC|BASE_EXT_STRING, &devmode_papersource_vals_ext,\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_print_quality,\n\t\t  { \"Print quality\", \"spoolss.devmode.print_quality\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_printquality_vals),\n\t\t    0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_color,\n\t\t  { \"Color\", \"spoolss.devmode.color\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_colour_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_duplex,\n\t\t  { \"Duplex\", \"spoolss.devmode.duplex\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_duplex_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_y_resolution,\n\t\t  { \"Y resolution\", \"spoolss.devmode.y_resolution\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_tt_option,\n\t\t  { \"TT option\", \"spoolss.devmode.tt_option\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_ttoption_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_collate,\n\t\t  { \"Collate\", \"spoolss.devmode.collate\",\n\t\t    FT_UINT16, BASE_DEC, VALS(devmode_collate_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_log_pixels,\n\t\t  { \"Log pixels\", \"spoolss.devmode.log_pixels\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_bits_per_pel,\n\t\t  { \"Bits per pel\", \"spoolss.devmode.bits_per_pel\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_pels_width,\n\t\t  { \"Pels width\", \"spoolss.devmode.pels_width\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_pels_height,\n\t\t  { \"Pels height\", \"spoolss.devmode.pels_height\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_display_flags,\n\t\t  { \"Display flags\", \"spoolss.devmode.display_flags\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_displayflags_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_display_freq,\n\t\t  { \"Display frequency\", \"spoolss.devmode.display_freq\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_devmode_icm_method,\n\t\t  { \"ICM method\", \"spoolss.devmode.icm_method\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_icmmethod_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_icm_intent,\n\t\t  { \"ICM intent\", \"spoolss.devmode.icm_intent\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_icmintent_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_media_type,\n\t\t  { \"Media type\", \"spoolss.devmode.media_type\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_mediatype_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_dither_type,\n\t\t  { \"Dither type\", \"spoolss.devmode.dither_type\",\n\t\t    FT_UINT32, BASE_DEC, VALS(devmode_dithertype_vals), 0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_devmode_reserved1,\n\t\t  { \"Reserved1\", \"spoolss.devmode.reserved1\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_reserved2,\n\t\t  { \"Reserved2\", \"spoolss.devmode.reserved2\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_panning_width,\n\t\t  { \"Panning width\", \"spoolss.devmode.panning_width\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_panning_height,\n\t\t  { \"Panning height\", \"spoolss.devmode.panning_height\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_driver_extra_len,\n\t\t  { \"Driver extra length\",\n\t\t    \"spoolss.devmode.driver_extra_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_devmode_driver_extra,\n\t\t  { \"Driver extra\", \"spoolss.devmode.driver_extra\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* Devicemode fields */\n\n\t\t{ &hf_devmode_fields_orientation,\n\t\t  { \"Orientation\", \"spoolss.devmode.fields.orientation\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_ORIENTATION, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_papersize,\n\t\t  { \"Paper size\", \"spoolss.devmode.fields.paper_size\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PAPERSIZE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_paperlength,\n\t\t  { \"Paper length\", \"spoolss.devmode.fields.paper_length\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PAPERLENGTH, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_paperwidth,\n\t\t  { \"Paper width\", \"spoolss.devmode.fields.paper_width\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PAPERWIDTH, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_scale,\n\t\t  { \"Scale\", \"spoolss.devmode.fields.scale\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_SCALE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_position,\n\t\t  { \"Position\", \"spoolss.devmode.fields.position\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_POSITION, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_nup,\n\t\t  { \"N-up\", \"spoolss.devmode.fields.nup\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_NUP, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_copies,\n\t\t  { \"Copies\", \"spoolss.devmode.fields.copies\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_COPIES, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_defaultsource,\n\t\t  { \"Default source\", \"spoolss.devmode.fields.default_source\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DEFAULTSOURCE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_printquality,\n\t\t  { \"Print quality\", \"spoolss.devmode.fields.print_quality\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PRINTQUALITY, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_color,\n\t\t  { \"Color\", \"spoolss.devmode.fields.color\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_COLOR, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_duplex,\n\t\t  { \"Duplex\", \"spoolss.devmode.fields.duplex\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DUPLEX, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_yresolution,\n\t\t  { \"Y resolution\", \"spoolss.devmode.fields.y_resolution\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_YRESOLUTION, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_ttoption,\n\t\t  { \"TT option\", \"spoolss.devmode.fields.tt_option\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_TTOPTION, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_collate,\n\t\t  { \"Collate\", \"spoolss.devmode.fields.collate\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_COLLATE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_formname,\n\t\t  { \"Form name\", \"spoolss.devmode.fields.form_name\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_FORMNAME, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_logpixels,\n\t\t  { \"Log pixels\", \"spoolss.devmode.fields.log_pixels\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_LOGPIXELS, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_bitsperpel,\n\t\t  { \"Bits per pel\", \"spoolss.devmode.fields.bits_per_pel\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_BITSPERPEL, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_pelswidth,\n\t\t  { \"Pels width\", \"spoolss.devmode.fields.pels_width\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PELSWIDTH, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_pelsheight,\n\t\t  { \"Pels height\", \"spoolss.devmode.fields.pels_height\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PELSHEIGHT, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_displayflags,\n\t\t  { \"Display flags\", \"spoolss.devmode.fields.display_flags\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DISPLAYFLAGS, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_displayfrequency,\n\t\t  { \"Display frequency\",\n\t\t    \"spoolss.devmode.fields.display_frequency\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DISPLAYFREQUENCY, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_icmmethod,\n\t\t  { \"ICM method\", \"spoolss.devmode.fields.icm_method\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_ICMMETHOD, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_icmintent,\n\t\t  { \"ICM intent\", \"spoolss.devmode.fields.icm_intent\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_ICMINTENT, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_mediatype,\n\t\t  { \"Media type\", \"spoolss.devmode.fields.media_type\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_MEDIATYPE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_dithertype,\n\t\t  { \"Dither type\", \"spoolss.devmode.fields.dither_type\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_DITHERTYPE, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_panningwidth,\n\t\t  { \"Panning width\", \"spoolss.devmode.fields.panning_width\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PANNINGWIDTH, NULL, HFILL }},\n\n\t\t{ &hf_devmode_fields_panningheight,\n\t\t  { \"Panning height\", \"spoolss.devmode.fields.panning_height\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    DEVMODE_PANNINGHEIGHT, NULL, HFILL }},\n\n\t\t/* EnumPrinterData RPC */\n\n\t\t{ &hf_enumprinterdata_enumindex,\n\t\t  { \"Enum index\", \"spoolss.enumprinterdata.enumindex\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    \"Index for start of enumeration\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_value_offered,\n\t\t  { \"Value size offered\",\n\t\t    \"spoolss.enumprinterdata.value_offered\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0,\n\t\t    \"Buffer size offered for printerdata value\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_data_offered,\n\t\t  { \"Data size offered\",\n\t\t    \"spoolss.enumprinterdata.data_offered\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0,\n\t\t    \"Buffer size offered for printerdata data\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_value_len,\n\t\t  { \"Value length\",\n\t\t    \"spoolss.enumprinterdata.value_len\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0,\n\t\t    \"Size of printerdata value\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_value_needed,\n\t\t  { \"Value size needed\",\n\t\t    \"spoolss.enumprinterdata.value_needed\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0,\n\t\t    \"Buffer size needed for printerdata value\", HFILL }},\n\n\t\t{ &hf_enumprinterdata_data_needed,\n\t\t  { \"Data size needed\",\n\t\t    \"spoolss.enumprinterdata.data_needed\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Buffer size needed for printerdata data\",\n\t\t    HFILL }},\n\n\t\t/* Print jobs */\n\n\t\t{ &hf_job_id,\n\t\t  { \"Job ID\", \"spoolss.job.id\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, \"Job identification number\", HFILL }},\n\n\t\t{ &hf_job_status,\n\t\t  { \"Job status\", \"spoolss.job.status\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_status_paused,\n\t\t  { \"Paused\", \"spoolss.job.status.paused\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_paused), JOB_STATUS_PAUSED,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_error,\n\t\t  { \"Error\", \"spoolss.job.status.error\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_error), JOB_STATUS_ERROR,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_deleting,\n\t\t  { \"Deleting\", \"spoolss.job.status.deleting\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_deleting), JOB_STATUS_DELETING,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_spooling,\n\t\t  { \"Spooling\", \"spoolss.job.status.spooling\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_spooling), JOB_STATUS_SPOOLING,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_printing,\n\t\t  { \"Printing\", \"spoolss.job.status.printing\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_printing), JOB_STATUS_PRINTING,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_offline,\n\t\t  { \"Offline\", \"spoolss.job.status.offline\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_offline), JOB_STATUS_OFFLINE,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_paperout,\n\t\t  { \"Paperout\", \"spoolss.job.status.paperout\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_paperout), JOB_STATUS_PAPEROUT,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_printed,\n\t\t  { \"Printed\", \"spoolss.job.status.printed\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_printed), JOB_STATUS_PRINTED,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_deleted,\n\t\t  { \"Deleted\", \"spoolss.job.status.deleted\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_deleted), JOB_STATUS_DELETED,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_blocked,\n\t\t  { \"Blocked\", \"spoolss.job.status.blocked\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_blocked), JOB_STATUS_BLOCKED,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_job_status_user_intervention,\n\t\t  { \"User intervention\",\n\t\t    \"spoolss.job.status.user_intervention\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_job_status_user_intervention),\n\t\t    JOB_STATUS_USER_INTERVENTION, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_job_priority,\n\t\t  { \"Job priority\", \"spoolss.job.priority\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_position,\n\t\t  { \"Job position\", \"spoolss.job.position\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_totalpages,\n\t\t  { \"Job total pages\", \"spoolss.job.totalpages\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_totalbytes,\n\t\t  { \"Job total bytes\", \"spoolss.job.totalbytes\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_job_bytesprinted,\n\t\t  { \"Job bytes printed\", \"spoolss.job.bytesprinted\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_job_pagesprinted,\n\t\t  { \"Job pages printed\", \"spoolss.job.pagesprinted\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_job_size,\n\t\t  { \"Job size\", \"spoolss.job.size\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t/* Forms */\n\n\t\t{ &hf_form,\n\t\t  { \"Data\", \"spoolss.form\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_level,\n\t\t  { \"Level\", \"spoolss.form.level\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_name,\n\t\t  { \"Name\", \"spoolss.form.name\", FT_STRING, BASE_NONE,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_flags,\n\t\t  { \"Flags\", \"spoolss.form.flags\", FT_UINT32,\n\t\t    BASE_DEC, VALS(form_type_vals), 0, NULL, HFILL }},\n\n\t\t{ &hf_form_unknown,\n\t\t  { \"Unknown\", \"spoolss.form.unknown\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_width,\n\t\t  { \"Width\", \"spoolss.form.width\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_height,\n\t\t  { \"Height\", \"spoolss.form.height\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_left_margin,\n\t\t  { \"Left margin\", \"spoolss.form.left\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, \"Left\", HFILL }},\n\n\t\t{ &hf_form_top_margin,\n\t\t  { \"Top\", \"spoolss.form.top\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_horiz_len,\n\t\t  { \"Horizontal\", \"spoolss.form.horiz\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_form_vert_len,\n\t\t  { \"Vertical\", \"spoolss.form.vert\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_enumforms_num,\n\t\t  { \"Num\", \"spoolss.enumforms.num\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/* Print notify */\n\n\t\t{ &hf_notify_options_version,\n\t\t  { \"Version\", \"spoolss.notify_options.version\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_options_flags,\n\t\t  { \"Flags\", \"spoolss.notify_options.flags\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_options_count,\n\t\t  { \"Count\", \"spoolss.notify_options.count\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_type,\n\t\t  { \"Type\", \"spoolss.notify_option.type\", FT_UINT16, BASE_DEC,\n\t\t    VALS(printer_notify_types), 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_reserved1,\n\t\t  { \"Reserved1\", \"spoolss.notify_option.reserved1\", FT_UINT16,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_reserved2,\n\t\t  { \"Reserved2\", \"spoolss.notify_option.reserved2\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_reserved3,\n\t\t  { \"Reserved3\", \"spoolss.notify_option.reserved3\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_count,\n\t\t  { \"Count\", \"spoolss.notify_option.count\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_option_data_count,\n\t\t  { \"Count\", \"spoolss.notify_option_data.count\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_options_flags_refresh,\n\t\t  { \"Refresh\", \"spoolss.notify_options.flags.refresh\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_notify_options_flags_refresh),\n\t\t    PRINTER_NOTIFY_OPTIONS_REFRESH, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_count,\n\t\t  { \"Count\", \"spoolss.notify_info.count\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_version,\n\t\t  { \"Version\", \"spoolss.notify_info.version\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_flags,\n\t\t  { \"Flags\", \"spoolss.notify_info.flags\", FT_UINT32, BASE_HEX,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_type,\n\t\t  { \"Type\", \"spoolss.notify_info_data.type\", FT_UINT16,\n\t\t    BASE_DEC, VALS(printer_notify_types), 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_field,\n\t\t  { \"Field\", \"spoolss.notify_field\", FT_UINT16, BASE_DEC,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_count,\n\t\t  { \"Count\", \"spoolss.notify_info_data.count\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_id,\n\t\t  { \"Job Id\", \"spoolss.notify_info_data.jobid\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_value1,\n\t\t  { \"Value1\", \"spoolss.notify_info_data.value1\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_value2,\n\t\t  { \"Value2\", \"spoolss.notify_info_data.value2\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_bufsize,\n\t\t  { \"Buffer size\", \"spoolss.notify_info_data.bufsize\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_buffer,\n\t\t  { \"Buffer\", \"spoolss.notify_info_data.buffer\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_buffer_len,\n\t\t  { \"Buffer length\", \"spoolss.notify_info_data.buffer.len\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_notify_info_data_buffer_data,\n\t\t  { \"Buffer data\", \"spoolss.notify_info_data.buffer.data\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* RffpCNex RPC */\n\n\t\t{ &hf_rffpcnex_options,\n\t\t  { \"Options\", \"spoolss.rffpcnex.options\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, \"RFFPCNEX options\", HFILL }},\n\n\t\t{ &hf_printerlocal, /* XXX: move me */\n\t\t  { \"Printer local\", \"spoolss.printer_local\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags,\n\t\t  { \"RFFPCNEX flags\", \"spoolss.rffpcnex.flags\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_printer,\n\t\t  { \"Add printer\", \"spoolss.rffpcnex.flags.add_printer\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_printer),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_PRINTER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_set_printer,\n\t\t  { \"Set printer\", \"spoolss.rffpcnex.flags.set_printer\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_set_printer),\n\t\t    SPOOLSS_PRINTER_CHANGE_SET_PRINTER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_printer,\n\t\t  { \"Delete printer\", \"spoolss.rffpcnex.flags.delete_printer\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_printer),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_PRINTER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_job,\n\t\t  { \"Add job\", \"spoolss.rffpcnex.flags.add_job\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_job),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_JOB, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_set_job,\n\t\t  { \"Set job\", \"spoolss.rffpcnex.flags.set_job\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_set_job),\n\t\t    SPOOLSS_PRINTER_CHANGE_SET_JOB, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_job,\n\t\t  { \"Delete job\", \"spoolss.rffpcnex.flags.delete_job\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_job),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_JOB, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_write_job,\n\t\t  { \"Write job\", \"spoolss.rffpcnex.flags.write_job\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_write_job),\n\t\t    SPOOLSS_PRINTER_CHANGE_WRITE_JOB, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_form,\n\t\t  { \"Add form\", \"spoolss.rffpcnex.flags.add_form\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_form),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_FORM, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_set_form,\n\t\t  { \"Set form\", \"spoolss.rffpcnex.flags.set_form\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_set_form),\n\t\t    SPOOLSS_PRINTER_CHANGE_SET_FORM, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_form,\n\t\t  { \"Delete form\", \"spoolss.rffpcnex.flags.delete_form\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_form),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_FORM, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_port,\n\t\t  { \"Add port\", \"spoolss.rffpcnex.flags.add_port\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_port),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_PORT, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_configure_port,\n\t\t  { \"Configure port\", \"spoolss.rffpcnex.flags.configure_port\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_configure_port),\n\t\t    SPOOLSS_PRINTER_CHANGE_CONFIGURE_PORT, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_port,\n\t\t  { \"Delete port\", \"spoolss.rffpcnex.flags.delete_port\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_port),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_PORT, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_print_processor,\n\t\t  { \"Add processor\", \"spoolss.rffpcnex.flags.add_processor\",\n\t\t    FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_rffpcnex_flags_add_print_processor),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_PRINT_PROCESSOR,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_print_processor,\n\t\t  { \"Delete processor\",\n\t\t    \"spoolss.rffpcnex.flags.delete_processor\", FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_rffpcnex_flags_delete_print_processor),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_PRINT_PROCESSOR,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_add_driver,\n\t\t  { \"Add driver\", \"spoolss.rffpcnex.flags.add_driver\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_add_driver),\n\t\t    SPOOLSS_PRINTER_CHANGE_ADD_PRINTER_DRIVER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_set_driver,\n\t\t  { \"Set driver\", \"spoolss.rffpcnex.flags.set_driver\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_set_driver),\n\t\t    SPOOLSS_PRINTER_CHANGE_SET_PRINTER_DRIVER, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_delete_driver,\n\t\t  { \"Delete driver\", \"spoolss.rffpcnex.flags.delete_driver\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_delete_driver),\n\t\t    SPOOLSS_PRINTER_CHANGE_DELETE_PRINTER_DRIVER,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_timeout,\n\t\t  { \"Timeout\", \"spoolss.rffpcnex.flags.timeout\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_rffpcnex_flags_timeout),\n\t\t    SPOOLSS_PRINTER_CHANGE_TIMEOUT, NULL, HFILL }},\n\n\t\t{ &hf_rffpcnex_flags_failed_printer_connection,\n\t\t  { \"Failed printer connection\",\n\t\t    \"spoolss.rffpcnex.flags.failed_connection_printer\",\n\t\t    FT_BOOLEAN, 32,\n\t\t    TFS(&tfs_rffpcnex_flags_failed_connection_printer),\n\t\t    SPOOLSS_PRINTER_CHANGE_FAILED_CONNECTION_PRINTER,\n\t\t    NULL, HFILL }},\n\n\t\t/* RRPCN RPC */\n\n\t\t{ &hf_rrpcn_changelow,\n\t\t  { \"Change low\", \"spoolss.rrpcn.changelow\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rrpcn_changehigh,\n\t\t  { \"Change high\", \"spoolss.rrpcn.changehigh\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rrpcn_unk0,\n\t\t  { \"Unknown 0\", \"spoolss.rrpcn.unk0\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_rrpcn_unk1,\n\t\t  { \"Unknown 1\", \"spoolss.rrpcn.unk1\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0, NULL, HFILL }},\n\n\t\t/* ReplyOpenPrinter RPC */\n\n\t\t{ &hf_replyopenprinter_unk0,\n\t\t  { \"Unknown 0\", \"spoolss.replyopenprinter.unk0\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_replyopenprinter_unk1,\n\t\t  { \"Unknown 1\", \"spoolss.replyopenprinter.unk1\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_devicename,\n\t\t  { \"DeviceName\", \"spoolss.devmode.devicename\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_devmode_form_name,\n\t\t  { \"FormName\", \"spoolss.devmode.form_name\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_relative_string,\n\t\t  { \"String\", \"spoolss.relative_string\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_value_name,\n\t\t  { \"Value Name\", \"spoolss.value_name\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_keybuffer,\n\t\t  { \"Key\", \"spoolss.hf_keybuffer\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_value_string,\n\t\t  { \"Value\", \"spoolss.value_string\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* Printer attributes */\n\n\t\t{ &hf_printer_attributes,\n\t\t  { \"Attributes\", \"spoolss.printer_attributes\", FT_UINT32,\n\t\t    BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_queued,\n\t\t  { \"Queued\", \"spoolss.printer_attributes.queued\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_queued),\n\t\t    PRINTER_ATTRIBUTE_QUEUED, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_direct,\n\t\t  { \"Direct\", \"spoolss.printer_attributes.direct\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_direct),\n\t\t    PRINTER_ATTRIBUTE_DIRECT, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_default,\n\t\t  { \"Default (9x/ME only)\",\n\t\t    \"spoolss.printer_attributes.default\",FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_default),\n\t\t    PRINTER_ATTRIBUTE_DEFAULT, \"Default\", HFILL }},\n\n\t\t{ &hf_printer_attributes_shared,\n\t\t  { \"Shared\", \"spoolss.printer_attributes.shared\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_shared),\n\t\t    PRINTER_ATTRIBUTE_SHARED, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_network,\n\t\t  { \"Network\", \"spoolss.printer_attributes.network\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_printer_attributes_network),\n\t\t    PRINTER_ATTRIBUTE_NETWORK, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_hidden,\n\t\t  { \"Hidden\", \"spoolss.printer_attributes.hidden\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_hidden),\n\t\t    PRINTER_ATTRIBUTE_HIDDEN, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_local,\n\t\t  { \"Local\", \"spoolss.printer_attributes.local\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_local),\n\t\t    PRINTER_ATTRIBUTE_LOCAL, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_enable_devq,\n\t\t  { \"Enable devq\", \"spoolss.printer_attributes.enable_devq\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_printer_attributes_enable_devq),\n\t\t    PRINTER_ATTRIBUTE_ENABLE_DEVQ, \"Enable evq\", HFILL }},\n\n\t\t{ &hf_printer_attributes_keep_printed_jobs,\n\t\t  { \"Keep printed jobs\",\n\t\t    \"spoolss.printer_attributes.keep_printed_jobs\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_keep_printed_jobs),\n\t\t    PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_printer_attributes_do_complete_first,\n\t\t  { \"Do complete first\",\n\t\t    \"spoolss.printer_attributes.do_complete_first\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_do_complete_first),\n\t\t    PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_printer_attributes_work_offline,\n\t\t  { \"Work offline (9x/ME only)\",\n\t\t    \"spoolss.printer_attributes.work_offline\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_work_offline),\n\t\t    PRINTER_ATTRIBUTE_WORK_OFFLINE, \"Work offline\", HFILL }},\n\n\t\t{ &hf_printer_attributes_enable_bidi,\n\t\t  { \"Enable bidi (9x/ME only)\",\n\t\t    \"spoolss.printer_attributes.enable_bidi\", FT_BOOLEAN,\n\t\t    32, TFS(&tfs_printer_attributes_enable_bidi),\n\t\t    PRINTER_ATTRIBUTE_ENABLE_BIDI, \"Enable bidi\", HFILL }},\n\n\t\t{ &hf_printer_attributes_raw_only,\n\t\t  { \"Raw only\", \"spoolss.printer_attributes.raw_only\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_printer_attributes_raw_only),\n\t\t    PRINTER_ATTRIBUTE_RAW_ONLY, NULL, HFILL }},\n\n\t\t{ &hf_printer_attributes_published,\n\t\t  { \"Published\", \"spoolss.printer_attributes.published\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_printer_attributes_published),\n\t\t    PRINTER_ATTRIBUTE_PUBLISHED, NULL, HFILL }},\n\n\t\t/* Timestamps */\n\n\t\t{ &hf_time_year,\n\t\t  { \"Year\", \"spoolss.time.year\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_month,\n\t\t  { \"Month\", \"spoolss.time.month\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_dow,\n\t\t  { \"Day of week\", \"spoolss.time.dow\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_day,\n\t\t  { \"Day\", \"spoolss.time.day\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_hour,\n\t\t  { \"Hour\", \"spoolss.time.hour\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_minute,\n\t\t  { \"Minute\", \"spoolss.time.minute\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_second,\n\t\t  { \"Second\", \"spoolss.time.second\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t{ &hf_time_msec,\n\t\t  { \"Millisecond\", \"spoolss.time.msec\", FT_UINT32, BASE_DEC,\n\t\t    NULL, 0x0, NULL, HFILL }},\n\n\t\t/* Userlevel */\n\n\t\t{ &hf_userlevel_size,\n\t\t  { \"Size\", \"spoolss.userlevel.size\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_client,\n\t\t  { \"Client\", \"spoolss.userlevel.client\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_user,\n\t\t  { \"User\", \"spoolss.userlevel.user\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_build,\n\t\t  { \"Build\", \"spoolss.userlevel.build\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_major,\n\t\t  { \"Major\", \"spoolss.userlevel.major\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_minor,\n\t\t  { \"Minor\", \"spoolss.userlevel.minor\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_userlevel_processor,\n\t\t  { \"Processor\", \"spoolss.userlevel.processor\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/* EnumprinterdataEx RPC */\n\n\t\t{ &hf_enumprinterdataex_name_offset,\n\t\t  { \"Name offset\", \"spoolss.enumprinterdataex.name_offset\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_name_len,\n\t\t  { \"Name len\", \"spoolss.enumprinterdataex.name_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_name,\n\t\t  { \"Name\", \"spoolss.enumprinterdataex.name\",\n\t\t    FT_STRING, BASE_NONE, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_val_offset,\n\t\t  { \"Value offset\", \"spoolss.enumprinterdataex.value_offset\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_val_len,\n\t\t  { \"Value len\", \"spoolss.enumprinterdataex.value_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_val_dword_high,\n\t\t  { \"DWORD value (high)\",\n\t\t    \"spoolss.enumprinterdataex.val_dword.high\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_value_null,\n\t\t  { \"Value\",\n\t\t    \"spoolss.enumprinterdataex.val_null\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_value_uint,\n\t\t  { \"Value\",\n\t\t    \"spoolss.enumprinterdataex.val_uint\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_value_binary,\n\t\t  { \"Value\",\n\t\t    \"spoolss.enumprinterdataex.val_binary\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_value_multi_sz,\n\t\t  { \"Value\",\n\t\t    \"spoolss.enumprinterdataex.val_multi_sz\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t{ &hf_enumprinterdataex_val_dword_low,\n\t\t  { \"DWORD value (low)\",\n\t\t    \"spoolss.enumprinterdataex.val_dword.low\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0x0,\n\t\t    NULL, HFILL }},\n\n\t\t/* RouterReplyPrinter RPC */\n\n\t\t{ &hf_routerreplyprinter_condition,\n\t\t  { \"Condition\", \"spoolss.routerreplyprinter.condition\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_routerreplyprinter_unknown1,\n\t\t  { \"Unknown1\", \"spoolss.routerreplyprinter.unknown1\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_routerreplyprinter_changeid,\n\t\t  { \"Change id\", \"spoolss.routerreplyprinter.changeid\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/* EnumPrinterKey RPC */\n\n\t\t{ &hf_keybuffer_size,\n\t\t  { \"Key Buffer size\", \"spoolss.keybuffer.size\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, \"Size of buffer\", HFILL }},\n\n\t\t/* SetJob RPC */\n\n\t\t{ &hf_setjob_cmd,\n\t\t  { \"Set job command\", \"spoolss.setjob.cmd\", FT_UINT32,\n\t\t    BASE_DEC, VALS(setjob_commands), 0x0, \"Printer data name\",\n\t\t    HFILL }},\n\n\t\t/* EnumJobs RPC */\n\n\t\t{ &hf_enumjobs_firstjob,\n\t\t  { \"First job\", \"spoolss.enumjobs.firstjob\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, \"Index of first job to return\",\n\t\t    HFILL }},\n\n\t\t{ &hf_enumjobs_numjobs,\n\t\t  { \"Num jobs\", \"spoolss.enumjobs.numjobs\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0x0, \"Number of jobs to return\", HFILL }},\n\n\t\t/* Security descriptor buffer */\n\n\t\t{ &hf_secdescbuf_maxlen,\n\t\t  { \"Max len\", \"spoolss.secdescbuf.max_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_secdescbuf_undoc,\n\t\t  { \"Undocumented\", \"spoolss.secdescbuf.undoc\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_secdescbuf_len,\n\t\t  { \"Length\", \"spoolss.secdescbuf.len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t/* Spool printer info */\n\n\t\t{ &hf_spool_printer_info_devmode_ptr,\n\t\t  { \"Devmode pointer\", \"spoolss.spoolprinterinfo.devmode_ptr\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_spool_printer_info_secdesc_ptr,\n\t\t  { \"Secdesc pointer\", \"spoolss.spoolprinterinfo.secdesc_ptr\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t/* WritePrinter RPC */\n\n\t\t{ &hf_writeprinter_numwritten,\n\t\t  { \"Num written\", \"spoolss.writeprinter.numwritten\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0x0, \"Number of bytes written\",\n\t\t    HFILL }},\n\n\t\t/* Setprinterdataex RPC */\n\n\t\t{ &hf_setprinterdataex_max_len,\n\t\t  { \"Max len\", \"spoolss.setprinterdataex.max_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_setprinterdataex_real_len,\n\t\t  { \"Real len\", \"spoolss.setprinterdataex.real_len\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_setprinterdataex_data,\n\t\t  { \"Data\", \"spoolss.setprinterdataex.data\",\n\t\t    FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t/* Specific access rights */\n\n\t\t{ &hf_access_required,\n\t\t  { \"Access required\", \"spoolss.access_required\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0x0, NULL,\n\t\t    HFILL }},\n\n\t\t{ &hf_server_access_admin,\n\t\t  { \"Server admin\", \"spoolss.access_mask.server_admin\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    SERVER_ACCESS_ADMINISTER, NULL, HFILL }},\n\n\t\t{ &hf_server_access_enum,\n\t\t  { \"Server enum\", \"spoolss.access_mask.server_enum\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    SERVER_ACCESS_ENUMERATE, NULL, HFILL }},\n\n\t\t{ &hf_printer_access_admin,\n\t\t  { \"Printer admin\", \"spoolss.access_mask.printer_admin\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ACCESS_ADMINISTER, NULL, HFILL }},\n\n\t\t{ &hf_printer_access_use,\n\t\t  { \"Printer use\", \"spoolss.access_mask.printer_use\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    PRINTER_ACCESS_USE, NULL, HFILL }},\n\n\t\t{ &hf_job_access_admin,\n\t\t  { \"Job admin\", \"spoolss.access_mask.job_admin\",\n\t\t    FT_BOOLEAN, 32, TFS(&tfs_set_notset),\n\t\t    JOB_ACCESS_ADMINISTER, NULL, HFILL }},\n\n\t\t/* Printer information */\n\n\t\t{ &hf_printer_cjobs,\n\t\t  { \"CJobs\", \"spoolss.printer.cjobs\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_total_jobs,\n\t\t  { \"Total jobs\", \"spoolss.printer.total_jobs\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_total_bytes,\n\t\t  { \"Total bytes\", \"spoolss.printer.total_bytes\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_global_counter,\n\t\t  { \"Global counter\", \"spoolss.printer.global_counter\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_total_pages,\n\t\t  { \"Total pages\", \"spoolss.printer.total_pages\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_major_version,\n\t\t  { \"Major version\", \"spoolss.printer.major_version\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_build_version,\n\t\t  { \"Build version\", \"spoolss.printer.build_version\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk7,\n\t\t  { \"Unknown 7\", \"spoolss.printer.unknown7\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk8,\n\t\t  { \"Unknown 8\", \"spoolss.printer.unknown8\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk9,\n\t\t  { \"Unknown 9\", \"spoolss.printer.unknown9\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_session_ctr,\n\t\t  { \"Session counter\", \"spoolss.printer.session_ctr\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, \"Sessopm counter\", HFILL }},\n\n\t\t{ &hf_printer_unk11,\n\t\t  { \"Unknown 11\", \"spoolss.printer.unknown11\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_printer_errors,\n\t\t  { \"Printer errors\", \"spoolss.printer.printer_errors\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk13,\n\t\t  { \"Unknown 13\", \"spoolss.printer.unknown13\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk14,\n\t\t  { \"Unknown 14\", \"spoolss.printer.unknown14\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk15,\n\t\t  { \"Unknown 15\", \"spoolss.printer.unknown15\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk16,\n\t\t  { \"Unknown 16\", \"spoolss.printer.unknown16\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_changeid,\n\t\t  { \"Change id\", \"spoolss.printer.changeid\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk18,\n\t\t  { \"Unknown 18\", \"spoolss.printer.unknown18\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk20,\n\t\t  { \"Unknown 20\", \"spoolss.printer.unknown20\", FT_UINT32,\n\t\t    BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_c_setprinter,\n\t\t  { \"Csetprinter\", \"spoolss.printer.c_setprinter\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk22,\n\t\t  { \"Unknown 22\", \"spoolss.printer.unknown22\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk23,\n\t\t  { \"Unknown 23\", \"spoolss.printer.unknown23\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk24,\n\t\t  { \"Unknown 24\", \"spoolss.printer.unknown24\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk25,\n\t\t  { \"Unknown 25\", \"spoolss.printer.unknown25\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk26,\n\t\t  { \"Unknown 26\", \"spoolss.printer.unknown26\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk27,\n\t\t  { \"Unknown 27\", \"spoolss.printer.unknown27\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk28,\n\t\t  { \"Unknown 28\", \"spoolss.printer.unknown28\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_unk29,\n\t\t  { \"Unknown 29\", \"spoolss.printer.unknown29\",\n\t\t    FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_flags,\n\t\t  { \"Flags\", \"spoolss.printer.flags\",\n\t\t    FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_priority,\n\t\t  { \"Priority\", \"spoolss.printer.priority\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_default_priority,\n\t\t  { \"Default Priority\", \"spoolss.printer.default_priority\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_averageppm,\n\t\t  { \"Average PPM\", \"spoolss.printer.averageppm\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_jobs,\n\t\t  { \"Jobs\", \"spoolss.printer.jobs\",\n\t\t    FT_UINT32, BASE_DEC, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_guid,\n\t\t  { \"GUID\", \"spoolss.printer.guid\", FT_STRING,\n\t\t    BASE_NONE, NULL, 0, NULL, HFILL }},\n\n\t\t{ &hf_printer_action,\n\t\t  { \"Action\", \"spoolss.printer.action\", FT_UINT32, BASE_DEC,\n\t\t   VALS(getprinter_action_vals), 0, NULL, HFILL }},\n\t};\n\n\tstatic gint *ett[] = {\n\t\t&ett_dcerpc_spoolss,\n\t\t&ett_PRINTER_DATATYPE,\n\t\t&ett_DEVMODE_CTR,\n\t\t&ett_DEVMODE,\n\t\t&ett_DEVMODE_fields,\n\t\t&ett_USER_LEVEL_CTR,\n\t\t&ett_USER_LEVEL_1,\n\t\t&ett_BUFFER,\n\t\t&ett_PRINTER_INFO,\n\t\t&ett_SPOOL_PRINTER_INFO_LEVEL,\n\t\t&ett_PRINTER_INFO_0,\n\t\t&ett_PRINTER_INFO_1,\n\t\t&ett_PRINTER_INFO_2,\n\t\t&ett_PRINTER_INFO_3,\n\t\t&ett_PRINTER_INFO_7,\n\t\t&ett_RELSTR,\n\t\t&ett_RELSTR_ARRAY,\n\t\t&ett_FORM_REL,\n\t\t&ett_FORM_CTR,\n\t\t&ett_FORM_1,\n\t\t&ett_JOB_INFO_1,\n\t\t&ett_JOB_INFO_2,\n\t\t&ett_SEC_DESC_BUF,\n\t\t&ett_SYSTEM_TIME,\n\t\t&ett_DOC_INFO_1,\n\t\t&ett_DOC_INFO,\n\t\t&ett_DOC_INFO_CTR,\n\t\t&ett_printerdata_value,\n\t\t&ett_printerdata_data,\n\t\t&ett_writeprinter_buffer,\n\t\t&ett_DRIVER_INFO_1,\n\t\t&ett_DRIVER_INFO_2,\n\t\t&ett_DRIVER_INFO_3,\n\t\t&ett_DRIVER_INFO_6,\n\t\t&ett_DRIVER_INFO_101,\n\t\t&ett_rffpcnex_flags,\n\t\t&ett_notify_options_flags,\n\t\t&ett_NOTIFY_INFO_DATA,\n\t\t&ett_NOTIFY_OPTION,\n\t\t&ett_printer_attributes,\n\t\t&ett_job_status,\n\t\t&ett_enumprinters_flags,\n\t\t&ett_PRINTER_DATA_CTR,\n\t\t&ett_printer_enumdataex_value,\n\t};\n\n\tstatic ei_register_info ei[] = {\n\t\t{ &ei_unimplemented_dissector, { \"spoolss.unimplemented_dissector\", PI_UNDECODED, PI_WARN, \"Unimplemented dissector: SPOOLSS\", EXPFILL }},\n\t\t{ &ei_unknown_data, { \"spoolss.unknown_data\", PI_UNDECODED, PI_WARN, \"Unknown data follows\", EXPFILL }},\n\t\t{ &ei_printer_info_level, { \"spoolss.printer.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown printer info level\", EXPFILL }},\n\t\t{ &ei_spool_printer_info_level, { \"spoolss.spool_printer.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown spool printer info level\", EXPFILL }},\n\t\t{ &ei_form_level, { \"spoolss.form.level.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown form info level\", EXPFILL }},\n\t\t{ &ei_job_info_level, { \"spoolss.job_info.level.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown job info level\", EXPFILL }},\n\t\t{ &ei_driver_info_level, { \"spoolss.driver_info.level.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown driver info level\", EXPFILL }},\n\t\t{ &ei_level, { \"spoolss.level.unknown\", PI_PROTOCOL, PI_WARN, \"Info level unknown\", EXPFILL }},\n\t\t{ &ei_notify_info_data_type, { \"spoolss.notify_info_data.type.unknown\", PI_PROTOCOL, PI_WARN, \"Unknown notify type\", EXPFILL }},\n\t\t{ &ei_enumprinterdataex_value, { \"spoolss.enumprinterdataex.val_unknown\", PI_PROTOCOL, PI_WARN, \"Unknown value type\", EXPFILL }},\n\t};\n\n\texpert_module_t* expert_dcerpc_spoolss;\n\n\tproto_dcerpc_spoolss = proto_register_protocol(\n\t\t\"Microsoft Spool Subsystem\", \"SPOOLSS\", \"spoolss\");\n\n\tproto_register_field_array(proto_dcerpc_spoolss, hf, array_length(hf));\n\tproto_register_subtree_array(ett, array_length(ett));\n\texpert_dcerpc_spoolss = expert_register_protocol(proto_dcerpc_spoolss);\n\texpert_register_field_array(expert_dcerpc_spoolss, ei, array_length(ei));\n}\n\n/* Protocol handoff */\n\nstatic e_guid_t uuid_dcerpc_spoolss = {\n\t0x12345678, 0x1234, 0xabcd,\n\t{ 0xef, 0x00, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab }\n};\n\nstatic guint16 ver_dcerpc_spoolss = 1;\n\nvoid\nproto_reg_handoff_dcerpc_spoolss(void)\n{\n\n\t/* Register protocol as dcerpc */\n\n\tdcerpc_init_uuid(proto_dcerpc_spoolss, ett_dcerpc_spoolss,\n\t\t\t &uuid_dcerpc_spoolss, ver_dcerpc_spoolss,\n\t\t\t dcerpc_spoolss_dissectors, hf_opnum);\n}\n\n/*\n * Editor modelines  -  http://www.wireshark.org/tools/modelines.html\n *\n * Local variables:\n * c-basic-offset: 8\n * tab-width: 8\n * indent-tabs-mode: t\n * End:\n *\n * vi: set shiftwidth=8 tabstop=8 noexpandtab:\n * :indentSize=8:tabSize=8:noTabs=false:\n */\n"], "filenames": ["epan/dissectors/packet-dcerpc-spoolss.c"], "buggy_code_start_loc": [1093], "buggy_code_end_loc": [6203], "fixing_code_start_loc": [1093], "fixing_code_end_loc": [6205], "type": "CWE-399", "message": "epan/dissectors/packet-dcerpc-spoolss.c in the SPOOLS component in Wireshark 1.12.x before 1.12.12 and 2.x before 2.0.4 mishandles unexpected offsets, which allows remote attackers to cause a denial of service (infinite loop) via a crafted packet.", "other": {"cve": {"id": "CVE-2016-5350", "sourceIdentifier": "cve@mitre.org", "published": "2016-08-07T16:59:01.643", "lastModified": "2016-11-28T20:24:42.547", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "epan/dissectors/packet-dcerpc-spoolss.c in the SPOOLS component in Wireshark 1.12.x before 1.12.12 and 2.x before 2.0.4 mishandles unexpected offsets, which allows remote attackers to cause a denial of service (infinite loop) via a crafted packet."}, {"lang": "es", "value": "epan/dissectors/packet-dcerpc-spoolss.c en el componente SPOOLS en Wireshark 1.12.x en versiones anteriores a 1.12.12 y 2.x en versiones anteriores a 2.0.4 no maneja correctamente offsets no esperados, lo que permite a atacantes remotos provocar una denegaci\u00f3n de servicio (bucle infinito) a trav\u00e9s de un paquete manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-399"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.0:*:*:*:*:*:*:*", "matchCriteriaId": "29AC5E99-9C21-4C2E-AE68-A4B887318577"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.1:*:*:*:*:*:*:*", "matchCriteriaId": "B90C8934-01D8-4027-8A38-0B3230CC5077"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.2:*:*:*:*:*:*:*", "matchCriteriaId": "49C89A62-69E2-40C5-9C75-FA6601A935A2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.3:*:*:*:*:*:*:*", "matchCriteriaId": "1946DDC9-E49F-4601-8448-E73B0480C880"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.4:*:*:*:*:*:*:*", "matchCriteriaId": "E2F85560-F43E-46C5-9CD1-1A1D66E21580"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.5:*:*:*:*:*:*:*", "matchCriteriaId": "2518D86A-623D-431E-9574-32B677D5FB94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.6:*:*:*:*:*:*:*", "matchCriteriaId": "FEA2B085-01D2-4707-A9F7-6545E4D6D99A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.7:*:*:*:*:*:*:*", "matchCriteriaId": "FE4BBF1A-4303-456C-AD19-F5BCF6FDD76B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.8:*:*:*:*:*:*:*", "matchCriteriaId": "AD3D5FFB-1A09-4A06-8E83-DF72E39E1891"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.9:*:*:*:*:*:*:*", "matchCriteriaId": "94DC7821-59C4-4BD7-BDCA-D0319B209010"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.10:*:*:*:*:*:*:*", "matchCriteriaId": "89D31D86-1402-472B-8318-245A0CC034AC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:1.12.11:*:*:*:*:*:*:*", "matchCriteriaId": "8281E6C3-7A2B-41E1-99A4-A423FEE11064"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:2.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "80E2A443-32DB-4C8B-8D2D-AE4F80A154A1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:2.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "2EF0B55F-A412-48E2-9047-7CCA8442766D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:2.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "C45C7F24-9B97-4FF6-AFE8-102EDA0B26D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wireshark:wireshark:2.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "D8BE013B-8615-49DB-939E-B7E289171467"}]}]}], "references": [{"url": "http://www.debian.org/security/2016/dsa-3615", "source": "cve@mitre.org"}, {"url": "http://www.openwall.com/lists/oss-security/2016/06/09/3", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "http://www.oracle.com/technetwork/topics/security/bulletinjul2016-3090568.html", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/91140", "source": "cve@mitre.org"}, {"url": "https://github.com/wireshark/wireshark/commit/b4d16b4495b732888e12baf5b8a7e9bf2665e22b", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://www.wireshark.org/security/wnpa-sec-2016-29.html", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/wireshark/wireshark/commit/b4d16b4495b732888e12baf5b8a7e9bf2665e22b"}}