{"buggy_code": ["const defaultDelimiter = '.'\n\nconst isDate = (obj) => {\n  return obj instanceof Date\n}\n\nconst flatten = (obj, delimiter) => {\n  const result = {}\n  const seperator = delimiter || defaultDelimiter\n\n  if (typeof obj !== 'object' || isDate(obj)) return obj\n\n  const flat = (original, stack, prev) => {\n    if (!Object.values(original).length && prev) {\n      result[prev] = original\n\n      return original\n    }\n\n    Object.entries(original).forEach(([key, value]) => {\n      const newKey = prev\n        ? prev + seperator + key\n        : key\n      if (typeof value === 'object' && value !== null) {\n        stack.forEach((s) => {\n          if (value === s && !isDate(value)) {\n            value = '[Circular]'\n          }\n        })\n        stack.push(value)\n\n        if (typeof value === 'object' && !isDate(value)) {\n          return flat(value, stack, newKey)\n        }\n      }\n      result[newKey] = value\n    })\n  }\n\n  flat(obj, [obj])\n\n  return result\n}\n\nconst unflatten = (obj, delimiter) => {\n  const result = {}\n  const seperator = delimiter || defaultDelimiter\n\n  if (typeof obj !== 'object' || isDate(obj)) return obj\n\n  const unflat = (original) => {\n    Object.keys(original).forEach((key) => {\n      const newKeys = key.split(seperator)\n      newKeys.reduce((o, k, i) => {\n        return o[k] || (o[k] = isNaN(Number(newKeys[i + 1])) ? (newKeys.length - 1 === i ? original[key] : {}) : [])\n      }, result)\n    })\n  }\n\n  unflat(obj)\n\n  return result\n}\n\nmodule.exports = {\n  flatten,\n  unflatten\n}\n", "const test = require('ava')\nconst { unflatten } = require('../src/index.js')\n\ntest('it should return an unflattened object', (t) => {\n  const original = {\n    'a.b': 1\n  }\n\n  const expected = {\n    a: {\n      b: 1\n    }\n  }\n\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should handle empty arrays', t => {\n  const original = { a: [], b: 1, 'c.d': [], 'e.0': 1, 'e.1': 2 }\n  const expected = { a: [], b: 1, c: { d: [] }, e: [1, 2] }\n\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should handle nested arrays', (t) => {\n  const original = {\n    'a.0': 0,\n    'a.1': 1\n  }\n\n  const expected = {\n    a: [0, 1]\n  }\n\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should handle circular objects', (t) => {\n  const original = {\n    'a.b.c': 'value',\n    'a.b.d': '[Circular]',\n    'a.b.e.g': 'value',\n    'a.b.e.f': '[Circular]',\n    'x.y.z': '[Circular]'\n  }\n\n  const expected = {\n    a: {\n      b: {\n        c: 'value',\n        d: '[Circular]',\n        e: {\n          f: '[Circular]',\n          g: 'value'\n        }\n      }\n    },\n    x: {\n      y: {\n        z: '[Circular]'\n      }\n    }\n  }\n\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should use the passed in delimiter', (t) => {\n  const original = {\n    a_b: 1\n  }\n\n  const expected = {\n    a: {\n      b: 1\n    }\n  }\n\n  t.deepEqual(unflatten(original, '_'), expected)\n})\n\ntest('it should handle deep nesting', (t) => {\n  const original = {\n    'a.b.c.0.val': 'one',\n    'a.b.c.1.val': 'two',\n    'a.b.c.2': '[Circular]',\n    'a.b.d': 'three',\n    'a.e': 'four',\n    'a.b.f': '[Circular]'\n  }\n\n  const expected = {\n    a: {\n      b: {\n        c: [{\n          val: 'one'\n        }, {\n          val: 'two'\n        },\n        '[Circular]'\n        ],\n        d: 'three',\n        f: '[Circular]'\n      },\n      e: 'four'\n    }\n  }\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should do nothing for flat objects', (t) => {\n  const original = {\n    a: 'one',\n    b: 'two'\n  }\n  t.deepEqual(unflatten(original), original)\n})\n\ntest('it should return the original value if not an object', (t) => {\n  const original = 'string'\n  t.deepEqual(unflatten(original), original)\n})\n\ntest('it should handle date objects', (t) => {\n  const date = new Date()\n\n  t.deepEqual(unflatten(date), date)\n\n  const original = {\n    'a.b.c': date,\n    'a.b.d': 'one',\n    'a.e.f': date,\n    'a.e.g.h': date\n  }\n\n  const expected = {\n    a: {\n      b: {\n        c: date,\n        d: 'one'\n      },\n      e: {\n        f: date,\n        g: {\n          h: date\n        }\n      }\n    }\n  }\n\n  t.deepEqual(unflatten(original), expected)\n})\n"], "fixing_code": ["const defaultDelimiter = '.'\n\nconst isDate = (obj) => {\n  return obj instanceof Date\n}\n\nconst flatten = (obj, delimiter) => {\n  const result = {}\n  const seperator = delimiter || defaultDelimiter\n\n  if (typeof obj !== 'object' || isDate(obj)) return obj\n\n  const flat = (original, stack, prev) => {\n    if (!Object.values(original).length && prev) {\n      result[prev] = original\n\n      return original\n    }\n\n    Object.entries(original).forEach(([key, value]) => {\n      const newKey = prev\n        ? prev + seperator + key\n        : key\n      if (typeof value === 'object' && value !== null) {\n        stack.forEach((s) => {\n          if (value === s && !isDate(value)) {\n            value = '[Circular]'\n          }\n        })\n        stack.push(value)\n\n        if (typeof value === 'object' && !isDate(value)) {\n          return flat(value, stack, newKey)\n        }\n      }\n      result[newKey] = value\n    })\n  }\n\n  flat(obj, [obj])\n\n  return result\n}\n\nconst unflatten = (obj, delimiter) => {\n  const result = {}\n  const seperator = delimiter || defaultDelimiter\n  const proto = ['__proto__', 'constructor', 'prototype']\n\n  if (typeof obj !== 'object' || isDate(obj)) return obj\n\n  const unflat = (original) => {\n    Object.keys(original).forEach((key) => {\n      const newKeys = key.split(seperator)\n      newKeys.reduce((o, k, i) => {\n        if (proto.includes(newKeys[i])) return o\n        return o[k] || (o[k] = isNaN(Number(newKeys[i + 1])) ? (newKeys.length - 1 === i ? original[key] : {}) : [])\n      }, result)\n    })\n  }\n\n  unflat(obj)\n\n  return result\n}\n\nmodule.exports = {\n  flatten,\n  unflatten\n}\n", "const test = require('ava')\nconst { unflatten } = require('../src/index.js')\n\ntest('it should return an unflattened object', (t) => {\n  const original = {\n    'a.b': 1\n  }\n\n  const expected = {\n    a: {\n      b: 1\n    }\n  }\n\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should handle empty arrays', t => {\n  const original = { a: [], b: 1, 'c.d': [], 'e.0': 1, 'e.1': 2 }\n  const expected = { a: [], b: 1, c: { d: [] }, e: [1, 2] }\n\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should handle nested arrays', (t) => {\n  const original = {\n    'a.0': 0,\n    'a.1': 1\n  }\n\n  const expected = {\n    a: [0, 1]\n  }\n\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should handle circular objects', (t) => {\n  const original = {\n    'a.b.c': 'value',\n    'a.b.d': '[Circular]',\n    'a.b.e.g': 'value',\n    'a.b.e.f': '[Circular]',\n    'x.y.z': '[Circular]'\n  }\n\n  const expected = {\n    a: {\n      b: {\n        c: 'value',\n        d: '[Circular]',\n        e: {\n          f: '[Circular]',\n          g: 'value'\n        }\n      }\n    },\n    x: {\n      y: {\n        z: '[Circular]'\n      }\n    }\n  }\n\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should use the passed in delimiter', (t) => {\n  const original = {\n    a_b: 1\n  }\n\n  const expected = {\n    a: {\n      b: 1\n    }\n  }\n\n  t.deepEqual(unflatten(original, '_'), expected)\n})\n\ntest('it should handle deep nesting', (t) => {\n  const original = {\n    'a.b.c.0.val': 'one',\n    'a.b.c.1.val': 'two',\n    'a.b.c.2': '[Circular]',\n    'a.b.d': 'three',\n    'a.e': 'four',\n    'a.b.f': '[Circular]'\n  }\n\n  const expected = {\n    a: {\n      b: {\n        c: [{\n          val: 'one'\n        }, {\n          val: 'two'\n        },\n        '[Circular]'\n        ],\n        d: 'three',\n        f: '[Circular]'\n      },\n      e: 'four'\n    }\n  }\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should do nothing for flat objects', (t) => {\n  const original = {\n    a: 'one',\n    b: 'two'\n  }\n  t.deepEqual(unflatten(original), original)\n})\n\ntest('it should return the original value if not an object', (t) => {\n  const original = 'string'\n  t.deepEqual(unflatten(original), original)\n})\n\ntest('it should handle date objects', (t) => {\n  const date = new Date()\n\n  t.deepEqual(unflatten(date), date)\n\n  const original = {\n    'a.b.c': date,\n    'a.b.d': 'one',\n    'a.e.f': date,\n    'a.e.g.h': date\n  }\n\n  const expected = {\n    a: {\n      b: {\n        c: date,\n        d: 'one'\n      },\n      e: {\n        f: date,\n        g: {\n          h: date\n        }\n      }\n    }\n  }\n\n  t.deepEqual(unflatten(original), expected)\n})\n\ntest('it should not pollute the prototype', (t) => {\n  const original = {\n    '__proto__.polluted': 'Attempt to pollute the prototype',\n    'a.prototype.polluted': 'Attempt to pollute the prototype',\n    'a.b': 'This attribute is safe',\n    'c.constructor.polluted': 'Attempt to pollute the prototype',\n    'constructor.polluted': 'Attempt to pollute the prototype'\n  }\n  unflatten(original)\n  t.assert({}.polluted == null)\n})\n"], "filenames": ["src/index.js", "test/unflatten.spec.js"], "buggy_code_start_loc": [47, 152], "buggy_code_end_loc": [54, 152], "fixing_code_start_loc": [48, 153], "fixing_code_end_loc": [57, 165], "type": "NVD-CWE-Other", "message": "Prototype pollution vulnerability in 'safe-flat' versions 2.0.0 through 2.0.1 allows an attacker to cause a denial of service and may lead to remote code execution.", "other": {"cve": {"id": "CVE-2021-25927", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-04-26T11:15:08.217", "lastModified": "2021-05-06T13:32:43.243", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Prototype pollution vulnerability in 'safe-flat' versions 2.0.0 through 2.0.1 allows an attacker to cause a denial of service and may lead to remote code execution."}, {"lang": "es", "value": "Una vulnerabilidad de Prototype pollution en \"safe-flat\" versiones 2.0.0 hasta 2.0.1, permite a un atacante causar una denegaci\u00f3n de servicio y puede conllevar a una ejecuci\u00f3n de c\u00f3digo remota"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:safe-flat_project:safe-flat:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.0.2", "matchCriteriaId": "718F6E67-8807-40B0-8827-08A5A7F0EDAA"}]}]}], "references": [{"url": "https://github.com/jessie-codes/safe-flat/commit/4b9b7db976bba8c968354f4315f5f9c219b7cbf3", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25927", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jessie-codes/safe-flat/commit/4b9b7db976bba8c968354f4315f5f9c219b7cbf3"}}