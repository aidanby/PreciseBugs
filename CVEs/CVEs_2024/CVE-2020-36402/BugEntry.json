{"buggy_code": ["********************************\nSolidity IR-based Codegen Changes\n********************************\n\nThis section highlights the main differences between the old and the IR-based codegen,\nalong with the reasoning behind the changes and how to update affected code.\n\nSemantic Only Changes\n=====================\n\nThis section lists the changes that are semantic-only, thus potentially\nhiding new and different behavior in existing code.\n\n * When storage structs are deleted, every storage slot that contains a member of the struct is set to zero entirely. Formally, padding space was left untouched.\nConsequently, if the padding space within a struct is used to store data (e.g. in the context of a contract upgrade), you have to be aware that ``delete`` will now also clear the added member (while it wouldn't have been cleared in the past).\n\n::\n    // SPDX-License-Identifier: GPL-3.0\n    pragma solidity >0.7.0;\n\n    contract C {\n        struct S {\n            uint64 y;\n            uint64 z;\n        }\n        S s;\n        function f() public {\n            // ...\n            delete s;\n            // s occupies only first 16 bytes of the 32 bytes slot\n            // delete will write zero to the full slot\n        }\n    }\n\nWe have the same behavior for implicit delete, for example when array of structs is shortened.\n\n * The order of contract initialization has changed in case of inheritance.\n\nThe order used to be:\n - All state variables are zero-initialized at the beginning.\n - Evaluate base constructor arguments from most derived to most base contract.\n - Initialize all state variables in the whole inheritance hierarchy from most base to most derived.\n - Run the constructor, if present, for all contracts in the linearized hierarchy from most base to most derived.\n\nNew order:\n - All state variables are zero-initialized at the beginning.\n - Evaluate base constructor arguments from most derived to most base contract.\n - For every contract in order from most base to most derived in the linearized hierarchy execute:\n     1. State variables are assigned value their initial values, if present at declaration.\n     2. Constructor, if present.\n\nThis causes differences in some contracts, for example:\n::\n    // SPDX-License-Identifier: GPL-3.0\n    pragma solidity >0.7.0;\n\n    contract A {\n        uint x;\n        constructor() {\n            x = 42;\n        }\n        function f() public view returns(uint256) {\n            return x;\n        }\n    }\n    contract B is A {\n        uint public y = f();\n    }\n\nPreviously, ``y`` would be set to 0. This is due to the fact that we would first initialize state variables: First, ``x`` is set to 0, and when initializing ``y``, ``f()`` would return 0 causing ``y`` to be 0 as well.\nWith the new rules, ``y`` will be set to 42. We first initialize ``x`` to 0, then call A's constructor which sets ``x`` to 42. Finally, when initializing ``y``, ``f()`` returns 42 causing ``y`` to be 42.\n"], "fixing_code": ["********************************\nSolidity IR-based Codegen Changes\n********************************\n\nThis section highlights the main differences between the old and the IR-based codegen,\nalong with the reasoning behind the changes and how to update affected code.\n\nSemantic Only Changes\n=====================\n\nThis section lists the changes that are semantic-only, thus potentially\nhiding new and different behavior in existing code.\n\n * When storage structs are deleted, every storage slot that contains a member of the struct is set to zero entirely. Formally, padding space was left untouched.\nConsequently, if the padding space within a struct is used to store data (e.g. in the context of a contract upgrade), you have to be aware that ``delete`` will now also clear the added member (while it wouldn't have been cleared in the past).\n\n::\n    // SPDX-License-Identifier: GPL-3.0\n    pragma solidity >0.7.0;\n\n    contract C {\n        struct S {\n            uint64 y;\n            uint64 z;\n        }\n        S s;\n        function f() public {\n            // ...\n            delete s;\n            // s occupies only first 16 bytes of the 32 bytes slot\n            // delete will write zero to the full slot\n        }\n    }\n\nWe have the same behavior for implicit delete, for example when array of structs is shortened.\n\n * The order of contract initialization has changed in case of inheritance.\n\nThe order used to be:\n - All state variables are zero-initialized at the beginning.\n - Evaluate base constructor arguments from most derived to most base contract.\n - Initialize all state variables in the whole inheritance hierarchy from most base to most derived.\n - Run the constructor, if present, for all contracts in the linearized hierarchy from most base to most derived.\n\nNew order:\n - All state variables are zero-initialized at the beginning.\n - Evaluate base constructor arguments from most derived to most base contract.\n - For every contract in order from most base to most derived in the linearized hierarchy execute:\n     1. State variables are assigned their initial values, if present at declaration.\n     2. Constructor, if present.\n\nThis causes differences in some contracts, for example:\n::\n    // SPDX-License-Identifier: GPL-3.0\n    pragma solidity >0.7.0;\n\n    contract A {\n        uint x;\n        constructor() {\n            x = 42;\n        }\n        function f() public view returns(uint256) {\n            return x;\n        }\n    }\n    contract B is A {\n        uint public y = f();\n    }\n\nPreviously, ``y`` would be set to 0. This is due to the fact that we would first initialize state variables: First, ``x`` is set to 0, and when initializing ``y``, ``f()`` would return 0 causing ``y`` to be 0 as well.\nWith the new rules, ``y`` will be set to 42. We first initialize ``x`` to 0, then call A's constructor which sets ``x`` to 42. Finally, when initializing ``y``, ``f()`` returns 42 causing ``y`` to be 42.\n"], "filenames": ["docs/ir/ir-breaking-changes.rst"], "buggy_code_start_loc": [49], "buggy_code_end_loc": [50], "fixing_code_start_loc": [49], "fixing_code_end_loc": [50], "type": "CWE-787", "message": "Solidity 0.7.5 has a stack-use-after-return issue in smtutil::CHCSmtLib2Interface::querySolver. NOTE: c39a5e2b7a3fabbf687f53a2823fc087be6c1a7e is cited in the OSV \"fixed\" field but does not have a code change.", "other": {"cve": {"id": "CVE-2020-36402", "sourceIdentifier": "cve@mitre.org", "published": "2021-07-01T03:15:07.857", "lastModified": "2021-07-06T21:09:03.773", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Solidity 0.7.5 has a stack-use-after-return issue in smtutil::CHCSmtLib2Interface::querySolver. NOTE: c39a5e2b7a3fabbf687f53a2823fc087be6c1a7e is cited in the OSV \"fixed\" field but does not have a code change."}, {"lang": "es", "value": "Solidity versi\u00f3n 0.7.5, presenta un problema de tipo stack-use-after-return en la funci\u00f3n smtutil::CHCSmtLib2Interface::querySolver. NOTA: c39a5e2b7a3fabbf687f53a2823fc087be6c1a7e se cita en el campo \"fixed\" de OSV pero no presenta un cambio de c\u00f3digo"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:soliditylang:solidity:0.7.5:*:*:*:*:*:*:*", "matchCriteriaId": "6C1C7770-451A-4AA4-A57E-6228632B467E"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:linux:linux_kernel:-:*:*:*:*:*:*:*", "matchCriteriaId": "703AF700-7A70-47E2-BC3A-7FD03B3CA9C1"}]}]}], "references": [{"url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=26997", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/ethereum/solidity/commit/c39a5e2b7a3fabbf687f53a2823fc087be6c1a7e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/google/oss-fuzz-vulns/blob/main/vulns/solidity/OSV-2020-2131.yaml", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ethereum/solidity/commit/c39a5e2b7a3fabbf687f53a2823fc087be6c1a7e"}}