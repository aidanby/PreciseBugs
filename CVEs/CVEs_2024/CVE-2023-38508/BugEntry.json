{"buggy_code": ["<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nnamespace Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type;\n\nuse Tracker_FormElement_Field_ArtifactLink;\n\nclass ArtifactInTypeTablePresenter\n{\n    public $direct_link_to_artifact;\n    public $project_public_name;\n    public $tracker_name;\n    public $artifact_id;\n    public $artifact_title;\n    public $artifact_status;\n    public $artifact_last_update_date;\n    public $artifact_submitter;\n    public $artifact_assignees;\n    public $html_classes;\n    public $artifactlink_field_id;\n\n    public function __construct(\n        \\Tuleap\\Tracker\\Artifact\\Artifact $artifact,\n        $html_classes,\n        Tracker_FormElement_Field_ArtifactLink $field,\n        public readonly bool $are_links_deletable,\n    ) {\n        $this->html_classes = $html_classes;\n        $tracker            = $artifact->getTracker();\n        $project            = $tracker->getProject();\n        $user_helper        = \\UserHelper::instance();\n        $current_user       = \\UserManager::instance()->getCurrentUser();\n\n        $this->direct_link_to_artifact   = $artifact->fetchDirectLinkToArtifact();\n        $this->project_public_name       = $project->getPublicName();\n        $this->tracker_name              = $this->emptyStringIfNull($tracker->getName());\n        $this->artifact_id               = $artifact->getId();\n        $this->artifact_title            = $this->emptyStringIfNull($artifact->getTitle());\n        $this->artifact_status           = $this->emptyStringIfNull($artifact->getStatus());\n        $this->artifact_last_update_date = date('Y-d-m H:i', $artifact->getLastUpdateDate());\n        $this->artifactlink_field_id     = $field->getId();\n\n        $assignees      = $artifact->getAssignedTo($current_user);\n        $assignee_links = [];\n        foreach ($assignees as $assignee) {\n            $assignee_links[] = $user_helper->getLinkOnUser($assignee);\n        }\n        $this->artifact_assignees = implode(', ', $assignee_links);\n\n        if ($this->userCanReadSubmitter($tracker, $current_user)) {\n            $this->artifact_submitter = $user_helper->getLinkOnUser($artifact->getSubmittedByUser());\n        } else {\n            $this->artifact_submitter = '';\n        }\n    }\n\n    private function userCanReadSubmitter(\\Tracker $tracker, \\PFUser $current_user)\n    {\n        $formelement_factory = \\Tracker_FormElementFactory::instance();\n        $fields              = $formelement_factory->getUsedSubmittedByFields($tracker);\n        foreach ($fields as $field) {\n            if ($field->userCanRead($current_user)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private function emptyStringIfNull($value)\n    {\n        if ($value === null) {\n            return '';\n        }\n        return $value;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nnamespace Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type;\n\nuse Tracker_FormElement_Field_ArtifactLink;\n\nclass TypeTablePresenter\n{\n    public $table_id;\n    public $type;\n    public $type_label;\n    public $id_label;\n    public $project_label;\n    public $tracker_label;\n    public $summary_label;\n    public $status_label;\n    public $last_update_label;\n    public $submitted_by_label;\n    public $assigned_to_label;\n    public $tracker_id;\n\n    public $artifact_links;\n    public $mass_unlink_title;\n\n    public const TABLE_ID_PREFIX = \"tracker_report_table_type_\";\n\n    public function __construct(\n        TypePresenter $type,\n        array $artifact_links,\n        bool $is_reverse_artifact_links,\n        Tracker_FormElement_Field_ArtifactLink $field,\n        public bool $are_links_deletable,\n    ) {\n        $this->table_id   = self::TABLE_ID_PREFIX . $type->shortname;\n        $this->type       = $type->shortname;\n        $this->type_label = $this->fetchTabLabel($type, $is_reverse_artifact_links);\n        $this->tracker_id = $field->getTracker()->getId();\n\n        $this->id_label           = dgettext('tuleap-tracker', 'Artifact ID');\n        $this->project_label      = dgettext('tuleap-tracker', 'Project');\n        $this->tracker_label      = dgettext('tuleap-tracker', 'Tracker');\n        $this->summary_label      = dgettext('tuleap-tracker', 'Summary');\n        $this->status_label       = dgettext('tuleap-tracker', 'Status');\n        $this->last_update_label  = dgettext('tuleap-tracker', 'Last Update Date');\n        $this->submitted_by_label = dgettext('tuleap-tracker', 'Submitted By');\n        $this->assigned_to_label  = dgettext('tuleap-tracker', 'Assigned to');\n\n        $art_factory          = \\Tracker_ArtifactFactory::instance();\n        $this->artifact_links = [];\n        $html_classes         = '';\n        foreach ($artifact_links as $artifact_link) {\n            $artifact               = $art_factory->getArtifactById($artifact_link->getArtifactId());\n            $this->artifact_links[] = new ArtifactInTypeTablePresenter(\n                $artifact,\n                $html_classes,\n                $field,\n                $this->are_links_deletable,\n            );\n        }\n\n        $this->mass_unlink_title = dgettext('tuleap-tracker', 'Mark all links to be removed');\n    }\n\n    public static function buildForHeader(\n        TypePresenter $type_presenter,\n        Tracker_FormElement_Field_ArtifactLink $field,\n        bool $are_links_deletable,\n    ): TypeTablePresenter {\n        return new TypeTablePresenter(\n            $type_presenter,\n            [],\n            false,\n            $field,\n            $are_links_deletable,\n        );\n    }\n\n    private function fetchTabLabel($type, bool $is_reverse_artifact_links): string\n    {\n        $type_label = '';\n        if ($is_reverse_artifact_links) {\n            $type_label = $type->reverse_label;\n        } else {\n            $type_label = $type->forward_label;\n        }\n        return $type_label;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Config\\ConfigKeyCategory;\nuse Tuleap\\Option\\Option;\nuse Tuleap\\Tracker\\Admin\\ArtifactLinksUsageDao;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Artifact\\ChangesetValue\\ArtifactLink\\ChangesetValueArtifactLinkDao;\nuse Tuleap\\Tracker\\Artifact\\PossibleParentsRetriever;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinkFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinksToRender;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinksToRenderForPerTrackerTable;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinkValueSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\DisplayArtifactLinkEvent;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\FieldDataBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ParentLinkAction;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\PossibleParentSelectorRenderer;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\PostSaveNewChangesetLinkParentArtifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\RequestDataAugmentor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\SubmittedValueConvertor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\SubmittedValueEmptyChecker;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\ArtifactInTypeTablePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\CSVOutputStrategy;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\HTMLOutputStrategy;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\ValueFormatter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypePresenterFactory;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeTablePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\Report\\Query\\ParametrizedFrom;\nuse Tuleap\\Tracker\\Report\\Query\\ParametrizedFromWhere;\nuse Tuleap\\Tracker\\Report\\Query\\ParametrizedSQLFragment;\n\n#[ConfigKeyCategory('Tracker')]\nclass Tracker_FormElement_Field_ArtifactLink extends Tracker_FormElement_Field // phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\n{\n    public const TYPE                    = 'art_link';\n    public const CREATE_NEW_PARENT_VALUE = -1;\n    public const NEW_VALUES_KEY          = 'new_values';\n    public const TYPE_IS_CHILD           = '_is_child';\n    public const FAKE_TYPE_IS_PARENT     = '_is_parent';\n    public const NO_TYPE                 = '';\n    public const FIELDS_DATA_PARENT_KEY  = 'parent';\n\n    /**\n     * @var Tracker_ArtifactFactory\n     */\n    private $artifact_factory;\n\n    private ?ChangesetValueArtifactLinkDao $cached_changeset_value_dao = null;\n\n    /**\n     * Display the html form in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html  = '';\n        $value = '';\n        if ($this->hasDefaultValue()) {\n            $value = $this->getDefaultValue();\n        }\n        $html .= '<input type=\"text\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML) . '\" autocomplete=\"off\" />';\n        $html .= '<br />';\n        $html .= '<a href=\"#\">bug #123</a><br />';\n        $html .= '<a href=\"#\">bug #321</a><br />';\n        $html .= '<a href=\"#\">story #10234</a>';\n        return $html;\n    }\n\n    /**\n     * Display the field value as a criteria\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    public function fetchChangesetValue(\n        int $artifact_id,\n        int $changeset_id,\n        mixed $value,\n        ?Tracker_Report $report = null,\n        ?int $from_aid = null,\n    ): string {\n        $arr    = [];\n        $values = $this->getChangesetValues($this->getCurrentUser(), $changeset_id);\n        foreach ($values as $artifact_link_info) {\n            $arr[] = $artifact_link_info->getLink();\n        }\n        $html = implode(', ', $arr);\n        return $html;\n    }\n\n    public function fetchChangesetValueForType(\n        $artifact_id,\n        $changeset_id,\n        $value,\n        $type,\n        $format,\n        $report = null,\n        $from_aid = null,\n    ) {\n        $value_formatter = new ValueFormatter(\n            Tracker_FormElementFactory::instance(),\n            new HTMLOutputStrategy(Codendi_HTMLPurifier::instance())\n        );\n\n        $current_user = $this->getCurrentUser();\n\n        return $value_formatter->fetchFormattedValue(\n            $current_user,\n            $this->getChangesetValues($current_user, $changeset_id),\n            $type,\n            $format\n        );\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        $arr    = [];\n        $values = $this->getChangesetValues($this->getCurrentUser(), $changeset_id);\n        foreach ($values as $artifact_link_info) {\n            $arr[] = $artifact_link_info->getArtifactId();\n        }\n\n        return implode(',', $arr);\n    }\n\n    public function fetchCSVChangesetValueWithType($changeset_id, $type, $format)\n    {\n        $value_formatter = new ValueFormatter(\n            Tracker_FormElementFactory::instance(),\n            new CSVOutputStrategy(Codendi_HTMLPurifier::instance())\n        );\n\n        $current_user = $this->getCurrentUser();\n\n        return $value_formatter->fetchFormattedValue(\n            $current_user,\n            $this->getChangesetValues($current_user, $changeset_id),\n            $type,\n            $format\n        );\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        $artifact_id_array = $value->getArtifactIds();\n        return implode(\", \", $artifact_id_array);\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * @return array\n     * @deprecated\n     */\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        return [];\n    }\n\n    public function getFieldDataFromRESTValueByField($value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    /**\n     * Get the field data (REST or CSV) for artifact submission\n     *\n     * @param string   $value    The rest field value\n     * @param Artifact $artifact The artifact the value is to be added/removed\n     *\n     * @return array\n     */\n    public function getFieldData($value, ?Artifact $artifact = null)\n    {\n        $submitted_ids = $this->getFieldDataBuilder()->getArrayOfIdsFromString($value);\n        return $this->getDataLikeWebUI($submitted_ids, [$value], $artifact);\n    }\n\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return $this->getFieldData($csv_value, $artifact);\n    }\n\n    /**\n     * @param array $submitted_ids\n     * @param array $submitted_values\n     *\n     * @return array\n     */\n    private function getDataLikeWebUI(\n        array $submitted_ids,\n        array $submitted_values,\n        ?Artifact $artifact = null,\n    ) {\n        $existing_links = $this->getArtifactLinkIdsOfLastChangeset($artifact);\n        $new_values     = array_diff($submitted_ids, $existing_links);\n        $removed_values = array_diff($existing_links, $submitted_ids);\n\n        return $this->getFieldDataBuilder()->getDataLikeWebUI($new_values, $removed_values, $submitted_values);\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        $user_manager   = UserManager::instance();\n        $user           = $user_manager->getCurrentUser();\n        $parent_tracker = $this->getTracker()->getParent();\n\n        if ($artifact->getParent($user) || ! $parent_tracker) {\n            return '';\n        }\n\n        $prefill_parent = '';\n        $name           = 'artifact[' . $this->id . ']';\n        $current_user   = $this->getCurrentUser();\n        $can_create     = false;\n\n        return $this->renderParentSelector($prefill_parent, $name, $this->getPossibleParentSelector($current_user, $can_create));\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        $prefill_parent = '';\n        $name           = 'artifact[' . $this->id . ']';\n        $parent_tracker = $this->getTracker()->getParent();\n        $current_user   = $this->getCurrentUser();\n        $can_create     = false;\n\n        if (! $parent_tracker) {\n            return '';\n        }\n\n        if (isset($submitted_values['disable_artifact_link_field']) && $submitted_values['disable_artifact_link_field']) {\n            return '';\n        }\n\n        return $this->renderParentSelector($prefill_parent, $name, $this->getPossibleParentSelector($current_user, $can_create));\n    }\n\n    private function getArtifactLinkIdsOfLastChangeset(?Artifact $artifact = null)\n    {\n        $link_ids = [];\n\n        $current_user = $this->getCurrentUser();\n\n        if ($artifact && $artifact->getLastChangeset()) {\n            foreach ($this->getChangesetValues($current_user, (int) $artifact->getLastChangeset()->getId()) as $link_info) {\n                $link_ids[] = $link_info->getArtifactId();\n            }\n        }\n\n        return $link_ids;\n    }\n\n    public function getCriteriaFromWhere(Tracker_Report_Criteria $criteria): Option\n    {\n        //Only filter query if field is used\n        if (! $this->isUsed()) {\n            return Option::nothing(ParametrizedFromWhere::class);\n        }\n\n        //Only filter query if criteria is valuated\n        $criteria_value = $this->getCriteriaValue($criteria);\n\n        if ($criteria_value === '' || $criteria_value === null) {\n            return Option::nothing(ParametrizedFromWhere::class);\n        }\n\n        $a = 'A_' . $this->id;\n        $b = 'B_' . $this->id;\n\n        return $this->buildMatchExpression(\"$b.artifact_id\", $criteria_value)->mapOr(\n            function (ParametrizedSQLFragment $match_expression) use ($a, $b) {\n                return Option::fromValue(\n                    ParametrizedFromWhere::fromParametrizedFrom(\n                        new ParametrizedFrom(\n                            \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = ? )\n                             INNER JOIN tracker_changeset_value_artifactlink AS $b ON (\n                                $b.changeset_value_id = $a.id\n                                AND \" . $match_expression->sql . \"\n                             ) \",\n                            [\n                                $this->id,\n                                ...$match_expression->parameters,\n                            ]\n                        )\n                    )\n                );\n            },\n            Option::nothing(ParametrizedFromWhere::class)\n        );\n    }\n\n    /**\n     * @var string\n     */\n    protected $pattern = '[+\\-]*[0-9]+';\n    protected function cast($value)\n    {\n        return (int) $value;\n    }\n\n    /**\n     * @return Option<ParametrizedSQLFragment>\n     */\n    private function buildMatchExpression(string $field_name, string $criteria_value): Option\n    {\n        $matches = [];\n        if (preg_match('/\\/(.*)\\//', $criteria_value, $matches)) {\n            // If it is sourrounded by /.../ then assume a regexp\n            return Option::fromValue(new ParametrizedSQLFragment($field_name . \" RLIKE ?\", [$matches[1]]));\n        }\n\n        $matches = [];\n        if (preg_match(\"/^(<|>|>=|<=)\\s*($this->pattern)\\$/\", $criteria_value, $matches)) {\n            // It's < or >,  = and a number then use as is\n            $number = (string) ($this->cast($matches[2]));\n            return Option::fromValue(new ParametrizedSQLFragment($field_name . ' ' . $matches[1] . ' ?', [$number]));\n        } elseif (preg_match(\"/^($this->pattern)\\$/\", $criteria_value, $matches)) {\n            // It's a number so use  equality\n            $number = $this->cast($matches[1]);\n            return Option::fromValue(new ParametrizedSQLFragment($field_name . ' = ?', [$number]));\n        } elseif (preg_match(\"/^($this->pattern)\\s*-\\s*($this->pattern)\\$/\", $criteria_value, $matches)) {\n            // it's a range number1-number2\n            $min  = (string) ($this->cast($matches[1]));\n            $max  = (string) ($this->cast($matches[2]));\n            $expr = $field_name . ' >= ' . $matches[1] . ' AND ' . $field_name . ' <= ' . $matches[2];\n            return Option::fromValue(new ParametrizedSQLFragment($field_name . ' >= ? AND ' . $field_name . ' <= ?', [$min, $max]));\n        } else {\n            // Invalid syntax - no condition\n            return Option::nothing(ParametrizedSQLFragment::class);\n        }\n    }\n\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao\n     */\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_ArtifactLink_ValueDao();\n    }\n\n    private function renderParentSelector(\n        string $prefill_parent,\n        string $name,\n        \\Tuleap\\Tracker\\Artifact\\PossibleParentSelector $possible_parents_selector,\n    ): string {\n        $renderer = PossibleParentSelectorRenderer::buildWithDefaultTemplateRenderer();\n        return $renderer->render($name, $prefill_parent, $possible_parents_selector);\n    }\n\n    private function getPossibleParentSelector(\n        PFUser $user,\n        bool $can_create,\n    ): \\Tuleap\\Tracker\\Artifact\\PossibleParentSelector {\n        $retriever = new PossibleParentsRetriever($this->getArtifactFactory(), EventManager::instance());\n\n        return $retriever->getPossibleArtifactParents(\n            $this->getTracker(),\n            $user,\n            0,\n            0,\n            $can_create,\n        );\n    }\n\n    /**\n     * Fetch the html widget for the field\n     *\n     * @param Artifact $artifact               Artifact on which we operate\n     * @param string   $name                   The name, if any\n     * @param string   $prefill_new_values     Prefill new values field (what the user has submitted, if any)\n     * @param array    $prefill_removed_values Pre-remove values (what the user has submitted, if any)\n     * @param string   $prefill_parent         Prefilled parent (what the user has submitted, if any) - Only valid on submit\n     * @param bool     $read_only              True if the user can't add or remove links\n     *\n     * @return string html\n     */\n    private function fetchHtmlWidget(\n        Artifact $artifact,\n        $name,\n        ArtifactLinksToRender $artifact_links_to_render,\n        $prefill_new_values,\n        $prefill_removed_values,\n        $prefill_type,\n        $prefill_edited_types,\n        $prefill_parent,\n        $read_only,\n        array $additional_classes,\n        $from_aid = null,\n        $reverse_artifact_links = false,\n    ) {\n        $current_user = $this->getCurrentUser();\n        $html         = '';\n        if (! $read_only) {\n            $html = '<div class=\"tracker_formelement_read_and_edit\" data-test=\"artifact-link-section\">';\n        }\n\n        if ($reverse_artifact_links) {\n            $html .= '<div class=\"artifact-link-value-reverse\">';\n            $html .= '<div id=\"tracker-form-element-artifactlink-reverse\" data-test=\"reverse-link-section\">';\n        } else {\n            $html .= '<div class=\"artifact-link-value\">';\n        }\n\n        $html .= '<h5 class=\"artifack_link_subtitle\">' . $this->getWidgetTitle($reverse_artifact_links) . '</h5>';\n\n        $html_name_new = '';\n\n        if ($name) {\n            $html_name_new = 'name=\"' . $name . '[new_values]\"';\n        }\n\n        $hp              = Codendi_HTMLPurifier::instance();\n        $read_only_class = 'read-only';\n\n        if (! $read_only) {\n            $read_only_class = '';\n            $classes         = implode(\" \", $additional_classes);\n            $html           .= '<section class=\"tracker_formelement_read_and_edit_edition_section tracker-form-element-artifactlink-section ' . $hp->purify($classes) . '\">';\n            $html           .= '<div>';\n            $html           .= '<div><span class=\"input-append\"><input type=\"text\"\n                             ' . $html_name_new . '\n                             class=\"tracker-form-element-artifactlink-new\"\n                             size=\"40\"\n                             data-test=\"artifact-link-submit\"\n                             data-preview-label=\"' . $hp->purify(dgettext('tuleap-tracker', 'Preview')) . '\"\n                             value=\"' .  $hp->purify($prefill_new_values, CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                             title=\"' . dgettext('tuleap-tracker', 'Enter artifact ids separated with a comma') . '\" />';\n\n            $possible_parents_selector = null;\n            if ($artifact->getParentWithoutPermissionChecking() === null) {\n                $can_create                = $artifact->getId() === -1;\n                $possible_parents_selector = $this->getPossibleParentSelector($current_user, $can_create);\n            }\n\n            if ($artifact->getTracker()->isProjectAllowedToUseType()) {\n                $renderer = new \\Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeSelectorRenderer(\n                    $this->getTypePresenterFactory(),\n                    $this->getTemplateRenderer(),\n                );\n                $html    .= $renderer->renderToString($artifact, $prefill_type, $name, $possible_parents_selector);\n            }\n            $html .= '</span>';\n            $html .= '</div>';\n\n            if ($possible_parents_selector) {\n                $html .= $this->renderParentSelector($prefill_parent, $name, $possible_parents_selector);\n            }\n            $html .= '</div>';\n            $html .= '</section>'; // end of tracker_formelement_read_and_edit_edition_section\n        }\n\n        $html .= '<div class=\"tracker-form-element-artifactlink-list ' . $read_only_class . '\" data-test=\"artifact-link-section\">';\n        if ($artifact_links_to_render->hasArtifactLinksToDisplay()) {\n            $this_project_id = $this->getTracker()->getProject()->getGroupId();\n            foreach ($artifact_links_to_render->getArtifactLinksForPerTrackerDisplay() as $artifact_links_per_tracker) {\n                /** @var ArtifactLinksToRenderForPerTrackerTable $artifact_links_per_tracker */\n                $renderer = $artifact_links_per_tracker->getRenderer();\n                if ($renderer === null) {\n                    $html .= dgettext('tuleap-tracker', 'No reports available');\n                    continue;\n                }\n\n                $html .= '<div class=\"tracker-form-element-artifactlink-trackerpanel\">';\n\n                $tracker = $artifact_links_per_tracker->getTracker();\n                $project = $tracker->getProject();\n\n                $project_name = '';\n                if ($project->getGroupId() != $this_project_id) {\n                    $project_name  = ' (<abbr title=\"' . $hp->purify($project->getPublicName(), CODENDI_PURIFIER_CONVERT_HTML) . '\">';\n                    $project_name .= $hp->purify($project->getUnixName(), CODENDI_PURIFIER_CONVERT_HTML);\n                    $project_name .= '</abbr>)';\n                }\n                $html .= '<h2 class=\"tracker-form-element-artifactlink-tracker_' . $tracker->getId() . '\">';\n                $html .= $hp->purify($tracker->getName(), CODENDI_PURIFIER_CONVERT_HTML) . $project_name;\n                $html .= '</h2>';\n\n                $json_encoded_data = json_encode(\n                    [\n                        'artifact_id'            => $artifact->getId(),\n                        'tracker_id'             => $tracker->getId(),\n                        'reverse_artifact_links' => $reverse_artifact_links,\n                        'read_only'              => $read_only,\n                        'from_aid'               => $from_aid,\n                        'prefill_removed_values' => $prefill_removed_values,\n                        'prefill_edited_types'   => $prefill_edited_types,\n                    ]\n                );\n\n                $html .= '<div\n                        class=\"tracker-form-element-artifactlink-renderer-async\"\n                        data-field-id=\"' . (int) $this->getId() . '\"\n                        data-renderer-data=\"' . Codendi_HTMLPurifier::instance()->purify($json_encoded_data) . '\"></div></div>';\n            }\n\n            $html .= $this->fetchTypeTables($artifact_links_to_render, $reverse_artifact_links);\n        } else {\n            $html .= $this->getNoValueLabelForLinks($artifact);\n        }\n        $html .= '</div>';\n\n        if ($reverse_artifact_links) {\n            $html .= '</div>';\n        }\n        $html .= '</div>';\n        if (! $read_only) {\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    protected function getNoValueLabelForLinks(Artifact $artifact): string\n    {\n        if (count($this->getReverseLinks($artifact->getId())) > 0) {\n            return \"<span class='empty_value has-reverse-links'>\" . dgettext('tuleap-tracker', 'Empty') . \"</span>\";\n        }\n\n        return $this->getNoValueLabel();\n    }\n\n    private function fetchRendererAsArtifactLink(\n        ArtifactLinksToRenderForPerTrackerTable $artifact_links_per_tracker,\n        $read_only,\n        $prefill_removed_values,\n        $prefill_edited_types,\n        $reverse_artifact_links,\n        $from_aid,\n    ) {\n        $renderer = $artifact_links_per_tracker->getRenderer();\n        if (! $renderer) {\n            return '';\n        }\n\n        $matching_ids = $artifact_links_per_tracker->getMatchingIDs();\n\n        return $renderer->fetchAsArtifactLink($matching_ids, $this->getId(), $read_only, $prefill_removed_values, $prefill_edited_types, $reverse_artifact_links, false, $from_aid);\n    }\n\n    private function fetchTypeTables(ArtifactLinksToRender $artifact_links_to_render, $is_reverse_artifact_links)\n    {\n        static $type_tables_cache = [];\n        if (isset($type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links])) {\n            return $type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links];\n        }\n        $html              = '';\n        $template_renderer = $this->getTemplateRenderer();\n        foreach ($artifact_links_to_render->getArtifactLinksForPerTypeDisplay() as $artifact_links_per_type) {\n            $html .= $template_renderer->renderToString(\n                'artifactlink-type-table',\n                new TypeTablePresenter(\n                    $artifact_links_per_type->getTypePresenter(),\n                    $artifact_links_per_type->getArtifactLinks(),\n                    $is_reverse_artifact_links,\n                    $this,\n                    $this->areLinksDeletable(\n                        $artifact_links_per_type->getTypePresenter(),\n                        $is_reverse_artifact_links,\n                    )\n                )\n            );\n        }\n        $type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links] = $html;\n        return $html;\n    }\n\n    private function areLinksDeletable(TypePresenter $type_presenter, bool $is_reverse_artifact_links): bool\n    {\n        $event = EventManager::instance()->dispatch(\n            new DisplayArtifactLinkEvent($type_presenter)\n        );\n\n        return (! $is_reverse_artifact_links && $event->canLinkBeModified());\n    }\n\n    /**\n     *\n     * @param bool $reverse_artifact_links\n     */\n    private function getWidgetTitle($reverse_artifact_links)\n    {\n        if ($reverse_artifact_links) {\n            return dgettext('tuleap-tracker', 'Reverse artifact links');\n        }\n\n        return dgettext('tuleap-tracker', 'Artifact links');\n    }\n\n    /**\n     * Process the request\n     *\n     * @param Tracker_IDisplayTrackerLayout  $layout          Displays the page header and footer\n     * @param Codendi_Request                $request         The data coming from the user\n     * @param PFUser                           $current_user    The user who mades the request\n     *\n     * @return void\n     */\n    public function process(Tracker_IDisplayTrackerLayout $layout, $request, $current_user)\n    {\n        switch ($request->get('func')) {\n            case 'fetch-artifacts':\n                $read_only              = false;\n                $prefill_removed_values = [];\n                $prefill_edited_types   = [];\n                $only_rows              = true;\n                $this_project_id        = $this->getTracker()->getProject()->getGroupId();\n                $is_reverse             = false;\n                $hp                     = Codendi_HTMLPurifier::instance();\n\n                $ugroups = $current_user->getUgroups($this_project_id, []);\n\n                $ids     = $request->get('ids'); //2, 14, 15\n                $tracker = [];\n                $result  = [];\n                if ($this->getTracker()->isProjectAllowedToUseType()) {\n                    $type_shortname = $request->get('type');\n                    $type_presenter = $this->getTypePresenterFactory()->getFromShortname($type_shortname);\n                }\n                //We must retrieve the last changeset ids of each artifact id.\n                $dao = new Tracker_ArtifactDao();\n                foreach ($dao->searchLastChangesetIds($ids, $ugroups, $current_user->isSuperUser()) as $matching_ids) {\n                    $tracker_id = $matching_ids['tracker_id'];\n                    $tracker    = $this->getTrackerFactory()->getTrackerById($tracker_id);\n                    $project    = $tracker->getProject();\n\n                    if ($tracker->userCanView() && ! $tracker->isDeleted()) {\n                        if ($this->getTracker()->isProjectAllowedToUseType()) {\n                            $matching_ids['type'] = [];\n                            foreach (explode(',', $matching_ids['id']) as $id) {\n                                $matching_ids['type'][$id] = $type_presenter;\n                            }\n                        }\n                        $trf    = Tracker_ReportFactory::instance();\n                        $report = $trf->getDefaultReportsByTrackerId($tracker->getId());\n                        if ($report) {\n                            $renderers = $report->getRenderers();\n                            // looking for the first table renderer\n                            foreach ($renderers as $renderer) {\n                                if ($renderer->getType() === Tracker_Report_Renderer::TABLE) {\n                                    $key          = $this->id . '_' . $report->id . '_' . $renderer->getId();\n                                    $result[$key] = $renderer->fetchAsArtifactLink($matching_ids, $this->getId(), $read_only, $is_reverse, $prefill_removed_values, $prefill_edited_types, $only_rows);\n                                    $head         = '<div class=\"tracker-form-element-artifactlink-trackerpanel\">';\n\n                                    $project_name = '';\n                                    if ($project->getGroupId() != $this_project_id) {\n                                        $project_name  = ' (<abbr title=\"' . $hp->purify($project->getPublicName(), CODENDI_PURIFIER_CONVERT_HTML) . '\">';\n                                        $project_name .= $hp->purify($project->getUnixName(), CODENDI_PURIFIER_CONVERT_HTML);\n                                        $project_name .= '</abbr>)';\n                                    }\n                                    $head .= '<h2 class=\"tracker-form-element-artifactlink-tracker_' . $tracker->getId() . '\">';\n                                    $head .= $hp->purify($tracker->getName(), CODENDI_PURIFIER_CONVERT_HTML) . $project_name;\n                                    $head .= '</h2>';\n                                    //if ($artifact) {\n                                    //    $title = $hp->purify('link a '. $tracker->getItemName(), CODENDI_PURIFIER_CONVERT_HTML);\n                                    //    $head .= '<a href=\"'.TRACKER_BASE_URL.'/?tracker='.$tracker_id.'&func=new-artifact-link&id='.$artifact->getId().'\" class=\"tracker-form-element-artifactlink-link-new-artifact\">'. 'create a new '.$hp->purify($tracker->getItemName(), CODENDI_PURIFIER_CONVERT_HTML)  .'</a>';\n                                    //}\n                                    $result[$key]['head'] = $head . $result[$key]['head'];\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                $this->appendTypeTable($request, $result, $is_reverse);\n                if ($result) {\n                    $head = [];\n                    $rows = [];\n                    foreach ($result as $key => $value) {\n                        $head[$key] = $value[\"head\"];\n                        $rows[$key] = $value[\"rows\"];\n                    }\n                    $GLOBALS['HTML']->sendJSON(['head' => $head, 'rows' => $rows]);\n                }\n                exit();\n            case 'fetch-aggregates':\n                $read_only              = false;\n                $prefill_removed_values = [];\n                $only_rows              = true;\n                $only_one_column        = false;\n                $extracolumn            = Tracker_Report_Renderer_Table::EXTRACOLUMN_UNLINK;\n                $read_only              = true;\n                $use_data_from_db       = false;\n\n                $ugroups = $current_user->getUgroups($this->getTracker()->getGroupId(), []);\n                $ids     = $request->get('ids'); //2, 14, 15\n                $tracker = [];\n                $json    = ['tabs' => []];\n                $dao     = new Tracker_ArtifactDao();\n                foreach ($dao->searchLastChangesetIds($ids, $ugroups, $current_user->isSuperUser()) as $matching_ids) {\n                    $tracker_id = $matching_ids['tracker_id'];\n                    $tracker    = $this->getTrackerFactory()->getTrackerById($tracker_id);\n                    $project    = $tracker->getProject();\n                    if ($tracker->userCanView()) {\n                        if ($this->getTracker()->isProjectAllowedToUseType()) {\n                            $matching_ids['type'] = [];\n                        }\n                        $trf    = Tracker_ReportFactory::instance();\n                        $report = $trf->getDefaultReportsByTrackerId($tracker->getId());\n                        if ($report) {\n                            $renderers = $report->getRenderers();\n                            // looking for the first table renderer\n                            foreach ($renderers as $renderer) {\n                                if ($renderer->getType() === Tracker_Report_Renderer::TABLE) {\n                                    $key            = $this->id . '_' . $report->id . '_' . $renderer->getId();\n                                    $columns        = $renderer->getTableColumns($only_one_column, $use_data_from_db);\n                                    $json['tabs'][] = [\n                                        'key' => $key,\n                                        'src' => $renderer->fetchAggregates($matching_ids, $extracolumn, $only_one_column, $columns, $use_data_from_db, $read_only),\n                                    ];\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                $GLOBALS['HTML']->sendJSON($json);\n                exit();\n            case 'artifactlink-renderer-async':\n                session_write_close();\n                if (! $request->isAjax()) {\n                    return;\n                }\n\n                if (! $request->get('renderer_data')) {\n                    return;\n                }\n\n                $renderer_data = json_decode($request->get('renderer_data'), true);\n                if (! $renderer_data) {\n                    return;\n                }\n\n                $expected_keys                  = array_flip([\n                    'artifact_id',\n                    'tracker_id',\n                    'reverse_artifact_links',\n                    'read_only',\n                    'prefill_removed_values',\n                    'prefill_edited_types',\n                    'from_aid',\n                ]);\n                $are_expected_keys_part_of_data = empty(array_diff_key($expected_keys, $renderer_data));\n                if (! $are_expected_keys_part_of_data) {\n                    return;\n                }\n\n                $artifact_id = $renderer_data['artifact_id'];\n                $artifact    = $this->getArtifactFactory()->getArtifactByIdUserCanView($current_user, $artifact_id);\n                if (! $artifact) {\n                    return;\n                }\n\n                $target_tracker_id = $renderer_data['tracker_id'];\n                $tracker           = $this->getTrackerFactory()->getTrackerById($target_tracker_id);\n                if (! $tracker->userCanView($current_user)) {\n                    return;\n                }\n\n                if ($renderer_data['reverse_artifact_links']) {\n                    $artifact_links_to_render = $this->getReverseArtifactLinksToRender($artifact);\n                } else {\n                    $artifact_links_to_render = $this->getArtifactLinksToRenderFromChangesetValue(\n                        $artifact->getValue($this)\n                    );\n                }\n\n                $artifact_links_per_tracker = $artifact_links_to_render->getArtifactLinksForAGivenTracker($tracker);\n                if (! $artifact_links_per_tracker) {\n                    return;\n                }\n\n                echo $this->fetchRendererAsArtifactLink(\n                    $artifact_links_per_tracker,\n                    $renderer_data['read_only'],\n                    $renderer_data['prefill_removed_values'],\n                    $renderer_data['prefill_edited_types'],\n                    $renderer_data['reverse_artifact_links'],\n                    $renderer_data['from_aid']\n                );\n                break;\n            default:\n                parent::process($layout, $request, $current_user);\n                break;\n        }\n    }\n\n    /**\n     * Fetch the html widget for the field\n     *\n     * @param string $name                   The name, if any\n     * @param array  $artifact_links         The current artifact links\n     * @param string $prefill_new_values     Prefill new values field (what the user has submitted, if any)\n     * @param bool   $read_only              True if the user can't add or remove links\n     *\n     * @return string html\n     */\n    protected function fetchHtmlWidgetMasschange($name, $artifact_links, $prefill_new_values, $read_only)\n    {\n        $html          = '';\n        $html_name_new = '';\n        if ($name) {\n            $html_name_new = 'name=\"' . $name . '[new_values]\"';\n        }\n        $hp = Codendi_HTMLPurifier::instance();\n        if (! $read_only) {\n            $html .= '<input type=\"text\"\n                             ' . $html_name_new . '\n                             value=\"' .  $hp->purify($prefill_new_values, CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                             title=\"' . dgettext('tuleap-tracker', 'Enter artifact ids separated with a comma') . '\" />';\n            $html .= '<br />';\n        }\n        if ($artifact_links) {\n            $html .= '<ul class=\"tracker-form-element-artifactlink-list\">';\n            foreach ($artifact_links as $artifact_link_info) {\n                $html .= '<li>';\n                $html .= $artifact_link_info->getLink();\n                $html .= '</li>';\n            }\n            $html .= '</ul>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $links_tab         = $this->fetchLinks($artifact, $this->getArtifactLinksToRenderFromChangesetValue($value), $submitted_values);\n        $reverse_links_tab = $this->fetchReverseLinks($artifact);\n\n        return $links_tab . $reverse_links_tab;\n    }\n\n    private function fetchLinks(\n        Artifact $artifact,\n        ArtifactLinksToRender $artifact_links_to_render,\n        array $submitted_values,\n    ) {\n        if (isset($submitted_values[$this->getId()])) {\n            $submitted_value = $submitted_values[$this->getId()];\n        }\n\n        $prefill_new_values = '';\n        if (isset($submitted_value['new_values'])) {\n            $prefill_new_values = $submitted_value['new_values'];\n        }\n\n        $prefill_removed_values = [];\n        if (isset($submitted_value['removed_values'])) {\n            $prefill_removed_values = $submitted_value['removed_values'];\n        }\n\n        $prefill_type = '';\n        if (isset($submitted_value['type'])) {\n            $prefill_type = $submitted_value['type'];\n        }\n\n        $prefill_edited_types = [];\n        if (isset($submitted_value['types'])) {\n            $prefill_edited_types = $submitted_value['types'];\n        }\n\n        $read_only      = false;\n        $name           = 'artifact[' . $this->id . ']';\n        $from_aid       = $artifact->getId();\n        $prefill_parent = '';\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [],\n            $from_aid\n        );\n    }\n\n    private function getArtifactLinksToRenderFromChangesetValue(?Tracker_Artifact_ChangesetValue $value)\n    {\n        $artifact_links = [];\n        if ($value !== null) {\n            $artifact_links = $value->getValue();\n        }\n        return new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$artifact_links\n        );\n    }\n\n    private function getReverseArtifactLinksToRender(Artifact $artifact)\n    {\n        $reverse_links = $this->getReverseLinks($artifact->getId());\n\n        return new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$reverse_links\n        );\n    }\n\n    private function fetchReverseLinks(Artifact $artifact)\n    {\n        $from_aid = $artifact->getId();\n\n        $reverse_artifact_links_to_render = $this->getReverseArtifactLinksToRender($artifact);\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            '',\n            $reverse_artifact_links_to_render,\n            '',\n            '',\n            '',\n            [],\n            '',\n            true,\n            [],\n            $from_aid,\n            true\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        ?ArtifactLinksToRender $artifact_links_to_render = null,\n    ) {\n        if ($artifact_links_to_render === null) {\n            $artifact_links_to_render = $this->getArtifactLinksToRenderFromChangesetValue($value);\n        }\n        $links_tab_read_only = $this->fetchLinksReadOnly($artifact, $artifact_links_to_render);\n        $reverse_links_tab   = $this->fetchReverseLinks($artifact);\n\n        return $links_tab_read_only . $reverse_links_tab;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValue($artifact, $value, $submitted_values) .\n            \"<div class='tracker_hidden_edition_field' data-field-id=\" . $this->getId() . '></div>';\n    }\n\n    private function fetchLinksReadOnly(Artifact $artifact, ArtifactLinksToRender $artifact_links_to_render)\n    {\n        $read_only              = true;\n        $name                   = '';\n        $prefill_new_values     = '';\n        $prefill_removed_values = [];\n        $prefill_type           = '';\n        $prefill_edited_types   = [];\n        $prefill_parent         = '';\n        $from_aid               = $artifact->getId();\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [],\n            $from_aid\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html               = '';\n        $prefill_new_values = '';\n        if (isset($submitted_values[$this->getId()]['new_values'])) {\n            $prefill_new_values = $submitted_values[$this->getId()]['new_values'];\n        } elseif ($this->hasDefaultValue()) {\n            $prefill_new_values = $this->getDefaultValue();\n        }\n        $prefill_parent = '';\n        if (isset($submitted_values[$this->getId()]['parent'][0]) && is_numeric($submitted_values[$this->getId()]['parent'][0])) {\n            $prefill_parent = $submitted_values[$this->getId()]['parent'][0];\n        }\n        $prefill_type = '';\n        if (isset($submitted_values[$this->getId()]['type'])) {\n            $prefill_type = $submitted_values[$this->getId()]['type'];\n        }\n        $prefill_edited_types = [];\n        if (isset($submitted_values[$this->getId()]['types'])) {\n            $prefill_edited_types = $submitted_values[$this->getId()]['types'];\n        }\n        $read_only              = false;\n        $name                   = 'artifact[' . $this->id . ']';\n        $prefill_removed_values = [];\n        $artifact_links         = [];\n\n        // Well, shouldn't be here but API doesn't provide a Null Artifact on creation yet\n        // Here to avoid having to pass null arg for fetchHtmlWidget\n        $artifact = new Artifact(-1, $this->tracker_id, $this->getCurrentUser()->getId(), 0, false);\n\n        $artifact_links_to_render = new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$artifact_links\n        );\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [\"tracker_formelement_artifact_link_editable_on_submit\"]\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $html               = '';\n        $prefill_new_values = dgettext('tuleap-tracker', 'Unchanged');\n        $read_only          = false;\n        $name               = 'artifact[' . $this->id . ']';\n        $artifact_links     = [];\n\n        return $this->fetchHtmlWidgetMasschange($name, $artifact_links, $prefill_new_values, $read_only);\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of the field\n     *\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value != null) {\n            $html           = '<ul>';\n            $artifact_links = $value->getValue();\n            foreach ($artifact_links as $artifact_link_info) {\n                $html .= '<li>' . $artifact_link_info->getLabel() . '</li>';\n            }\n            $html .= '</ul>';\n        }\n        return $html;\n    }\n\n    /**\n     * @return ArtifactLinkFieldValueDao\n     */\n    protected function getValueDao()\n    {\n        return new ArtifactLinkFieldValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getValue()) {\n            return '-';\n        }\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $artifactlink_infos = $value->getValue();\n                $url                = [];\n                foreach ($artifactlink_infos as $artifactlink_info) {\n                    if ($ignore_perms || $artifactlink_info->userCanView($user)) {\n                        $url[] = $artifactlink_info->getLink();\n                    }\n                }\n                return implode(' , ', $url);\n            default:\n                $output             = PHP_EOL;\n                $artifactlink_infos = $value->getValue();\n                foreach ($artifactlink_infos as $artifactlink_info) {\n                    if ($ignore_perms || $artifactlink_info->userCanView($user)) {\n                        $output .= $artifactlink_info->getLabel();\n                        $output .= PHP_EOL;\n                    }\n                }\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     *\n     * @param Tracker_Artifact_Changeset $changeset\n     *\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        // never used...\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $rows                   = $this->getValueDao()->searchById($value_id, $this->id);\n        $artifact_links         = $this->getArtifactLinkInfos($rows);\n        $reverse_artifact_links = [];\n\n        if ($changeset) {\n            $reverse_artifact_links = $this->getReverseLinks($changeset->getArtifact()->getId());\n        }\n\n        return new Tracker_Artifact_ChangesetValue_ArtifactLink(\n            $value_id,\n            $changeset,\n            $this,\n            $has_changed,\n            $artifact_links,\n            $reverse_artifact_links\n        );\n    }\n\n    /**\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    public function getReverseLinks($artifact_id): array\n    {\n        $links_data = $this->getValueDao()->searchReverseLinksById($artifact_id);\n\n        return $this->getArtifactLinkInfos($links_data);\n    }\n\n    /**\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    private function getArtifactLinkInfos($data)\n    {\n        $artifact_links = [];\n        while ($row = $data->getRow()) {\n            $artifact_links[$row['artifact_id']] = new Tracker_ArtifactLinkInfo(\n                $row['artifact_id'],\n                $row['keyword'],\n                $row['group_id'],\n                $row['tracker_id'],\n                $row['last_changeset_id'],\n                $row['nature']\n            );\n        }\n\n        return $artifact_links;\n    }\n\n    /**\n     * @var array\n     */\n    protected $artifact_links_by_changeset = [];\n\n    /**\n     *\n     * @param int $changeset_id\n     *\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    protected function getChangesetValues(PFUser $user, $changeset_id): array\n    {\n        if (! isset($this->artifact_links_by_changeset[$changeset_id])) {\n            $this->artifact_links_by_changeset[$changeset_id] = [];\n\n            $dao = $this->getChangesetValueArtifactLinkDao();\n            foreach ($dao->searchChangesetValues($this->id, $changeset_id) as $row) {\n                $artifact_link_info = new Tracker_ArtifactLinkInfo(\n                    $row['artifact_id'],\n                    $row['keyword'],\n                    $row['group_id'],\n                    $row['tracker_id'],\n                    $row['last_changeset_id'],\n                    $row['nature']\n                );\n\n                if (! $artifact_link_info->userCanView($user)) {\n                    continue;\n                }\n\n                $this->artifact_links_by_changeset[$row['changeset_id']][] = $artifact_link_info;\n            }\n        }\n        return $this->artifact_links_by_changeset[$changeset_id];\n    }\n\n    private function getChangesetValueArtifactLinkDao(): ChangesetValueArtifactLinkDao\n    {\n        if (! $this->cached_changeset_value_dao) {\n            $this->cached_changeset_value_dao = new ChangesetValueArtifactLinkDao();\n        }\n\n        return $this->cached_changeset_value_dao;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        if (! $old_value instanceof Tracker_Artifact_ChangesetValue_ArtifactLink) {\n            return false;\n        }\n\n        $submitted_value = $this->getSubmittedValueConvertor()->convert(\n            $new_value,\n            $old_value\n        );\n\n        return $old_value->hasChanges($submitted_value);\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Artifact Link');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Links to other artifacts');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/artifact-chain.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/artifact-chain--plus.png');\n    }\n\n    /**\n     * @return bool say if the field is a unique one\n     */\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param array    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = ! $this->validate($artifact, $value);\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value)\n    {\n        if ((! is_array($submitted_value) || empty($value['new_values'])) && $this->isRequired()) {\n            if (! $this->isEmpty($submitted_value, $artifact)) {\n                // Field is required but there are values, so field is valid\n                $this->has_errors = false;\n            } else {\n                $this->addRequiredError();\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param array|null $submitted_value\n     *\n     * @return bool true if the submitted value is empty\n     */\n    public function isEmpty($submitted_value, Artifact $artifact)\n    {\n        if ($submitted_value === null) {\n            $submitted_value = [];\n        }\n\n        return $this->getSubmittedValueEmptyChecker()->isSubmittedValueEmpty(\n            $submitted_value,\n            $this,\n            $artifact,\n        );\n    }\n\n    /**\n     * For legacy testing purpose\n     */\n    protected function getSubmittedValueEmptyChecker(): SubmittedValueEmptyChecker\n    {\n        return new SubmittedValueEmptyChecker();\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param string   $value    data coming from the request. Should be artifact id separated by comma\n     *\n     * @return bool true if the value is considered ok\n     * @deprecated Use ArtifactLinkValidator instead\n     *\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    public function setArtifactFactory(Tracker_ArtifactFactory $artifact_factory)\n    {\n        $this->artifact_factory = $artifact_factory;\n    }\n\n    /**\n     * @return Tracker_ArtifactFactory\n     */\n    private function getArtifactFactory()\n    {\n        if (! $this->artifact_factory) {\n            $this->artifact_factory = Tracker_ArtifactFactory::instance();\n        }\n        return $this->artifact_factory;\n    }\n\n    public function getTrackerFactory()\n    {\n        return TrackerFactory::instance();\n    }\n\n    /**\n     * @return Tracker_HierarchyFactory\n     */\n    protected function getHierarchyFactory()\n    {\n        return Tracker_HierarchyFactory::instance();\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::postSaveNewChangeset()\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ): void {\n        $queue = $this->getPostNewChangesetQueue();\n        $queue->execute($artifact, $submitter, $new_changeset, $fields_data, $previous_changeset);\n    }\n\n    private function getPostNewChangesetQueue(): Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue\n    {\n        $queue = new Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue();\n        $queue->add($this->getProcessChildrenTriggersCommand());\n        $queue->add($this->getPostSaveNewChangesetLinkParentArtifact());\n\n        return $queue;\n    }\n\n    /**\n     * @protected for testing purpose\n     */\n    protected function getProcessChildrenTriggersCommand(): Tracker_FormElement_Field_ArtifactLink_ProcessChildrenTriggersCommand\n    {\n        return new Tracker_FormElement_Field_ArtifactLink_ProcessChildrenTriggersCommand(\n            $this,\n            $this->getWorkflowFactory()->getTriggerRulesManager()\n        );\n    }\n\n    /**\n     * @protected for testing purpose\n     */\n    protected function getPostSaveNewChangesetLinkParentArtifact(): PostSaveNewChangesetLinkParentArtifact\n    {\n        return new PostSaveNewChangesetLinkParentArtifact(\n            new ParentLinkAction(\n                $this->getArtifactFactory(),\n            )\n        );\n    }\n\n    public function saveNewChangeset(\n        Artifact $artifact,\n        ?Tracker_Artifact_Changeset $old_changeset,\n        int $new_changeset_id,\n        $submitted_value,\n        PFUser $submitter,\n        bool $is_submission,\n        bool $bypass_permissions,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $previous_changesetvalue = $this->getPreviousChangesetValue($old_changeset);\n\n        $value = $this->getNormalizedSubmittedValue($submitted_value);\n\n        $convertor       = $this->getSubmittedValueConvertor();\n        $submitted_value = $convertor->convert(\n            $value,\n            $previous_changesetvalue\n        );\n\n        return parent::saveNewChangeset(\n            $artifact,\n            $old_changeset,\n            $new_changeset_id,\n            $submitted_value,\n            $submitter,\n            $is_submission,\n            $bypass_permissions,\n            $url_mapping\n        );\n    }\n\n    /**\n     * Sometimes, for example during a post action for a trigger, the workflow pass null as submitted value.\n     * ArtifactLinks don't like very much this null so force it to a decent, empty value.\n     */\n    private function getNormalizedSubmittedValue($value)\n    {\n        if (is_null($value)) {\n            $value = ['new_values' => ''];\n        }\n\n        return $value;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $submitted_value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $saver = $this->getArtifactLinkValueSaver();\n\n        return $saver->saveValue(\n            $this,\n            $this->getCurrentUser(),\n            $artifact,\n            $changeset_value_id,\n            $submitted_value\n        );\n    }\n\n    /** @return ArtifactLinkValueSaver */\n    private function getArtifactLinkValueSaver()\n    {\n        return new ArtifactLinkValueSaver(\n            Tracker_ArtifactFactory::instance(),\n            $this->getValueDao(),\n            new Tracker_ReferenceManager(\n                ReferenceManager::instance(),\n                Tracker_ArtifactFactory::instance()\n            ),\n            EventManager::instance(),\n            new ArtifactLinksUsageDao(),\n            $this->getTrackerFactory()->getTriggerRulesManager()\n        );\n    }\n\n    private function getSubmittedValueConvertor(): SubmittedValueConvertor\n    {\n        return new SubmittedValueConvertor(\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Retrieve linked artifacts according to user's permissions\n     *\n     * @param Tracker_Artifact_Changeset $changeset The changeset you want to retrieve artifact from\n     * @param PFUser                       $user      The user who will see the artifacts\n     *\n     * @return Artifact[]\n     */\n    public function getLinkedArtifacts(Tracker_Artifact_Changeset $changeset, PFUser $user)\n    {\n        $artifacts       = [];\n        $changeset_value = $changeset->getValue($this);\n        if ($changeset_value) {\n            foreach ($changeset_value->getArtifactIds() as $id) {\n                $this->addArtifactUserCanViewFromId($artifacts, $id, $user);\n            }\n        }\n        return $artifacts;\n    }\n\n    /**\n     * Retrieve sliced linked artifacts according to user's permissions\n     *\n     * This is nearly the same as a paginated list however, for performance\n     * reasons, the total size may be different than the sum of total paginated\n     * artifacts.\n     *\n     * Example to illustrate the difference between paginated and sliced:\n     *\n     * Given that artifact links are [12, 13, 24, 39, 65, 69]\n     * And that the user cannot see artifact #39\n     * When I request linked artifacts by bunchs of 2\n     * Then I get [[12, 13], [24], [65, 69]]  # instead of [[12, 13], [24, 65], [69]]\n     * And total size will be 6               # instead of 5\n     *\n     * @param Tracker_Artifact_Changeset $changeset The changeset you want to retrieve artifact from\n     * @param PFUser                     $user      The user who will see the artifacts\n     * @param int                        $limit     The number of artifact to fetch\n     * @param int                        $offset    The offset\n     *\n     * @return Tracker_Artifact_PaginatedArtifacts\n     */\n    public function getSlicedLinkedArtifacts(Tracker_Artifact_Changeset $changeset, PFUser $user, $limit, $offset)\n    {\n        $changeset_value = $changeset->getValue($this);\n        if (! $changeset_value) {\n            return new Tracker_Artifact_PaginatedArtifacts([], 0);\n        }\n\n        assert($changeset_value instanceof Tracker_Artifact_ChangesetValue_ArtifactLink);\n        $artifact_ids = $changeset_value->getArtifactIds();\n        $size         = count($artifact_ids);\n\n        $artifacts = [];\n        foreach (array_slice($artifact_ids, $offset, $limit) as $id) {\n            $this->addArtifactUserCanViewFromId($artifacts, $id, $user);\n        }\n\n        return new Tracker_Artifact_PaginatedArtifacts($artifacts, $size);\n    }\n\n    private function addArtifactUserCanViewFromId(array &$artifacts, $id, PFUser $user): void\n    {\n        $artifact = $this->getArtifactFactory()->getArtifactById($id);\n        if ($artifact && $artifact->userCanView($user)) {\n            $artifacts[] = $artifact;\n        }\n    }\n\n    /**\n     * If request come with a 'parent', it should be store in a cache\n     * that will be called after the artifact update to create the\n     * right _is_child link\n     *\n     * Please note that it only work on artifact creation.\n     *\n     * @param array $fields_data\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        $request_data_augmentor = new RequestDataAugmentor();\n\n        $request_data_augmentor->augmentDataFromRequest(\n            $this,\n            $fields_data\n        );\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitArtifactLink($this);\n    }\n\n    /**\n     * @return TypePresenterFactory\n     */\n    protected function getTypePresenterFactory()\n    {\n        return new TypePresenterFactory(new TypeDao(), new ArtifactLinksUsageDao());\n    }\n\n    private function getTemplateRenderer()\n    {\n        return TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n    }\n\n    private function appendTypeTable(Codendi_Request $request, array &$result, bool $is_reverse_artifact_links)\n    {\n        if (! $this->getTracker()->isProjectAllowedToUseType()) {\n            return;\n        }\n\n        $type_shortname = $request->get('type');\n        if (! $type_shortname) {\n            return;\n        }\n\n        $type_presenter        = $this->getTypePresenterFactory()->getFromShortname($type_shortname);\n        $key                   = \"type_$type_shortname\";\n        $art_factory           = $this->getArtifactFactory();\n        $artifact_html_classes = 'additional';\n        $type_html             = '';\n        $head_html             = '';\n        $ids                   = $request->get('ids');\n\n        foreach (explode(',', $ids) as $id) {\n            $artifact = $art_factory->getArtifactById(trim($id));\n\n            $are_links_deletable = $this->areLinksDeletable(\n                $type_presenter,\n                $is_reverse_artifact_links,\n            );\n\n            if (! is_null($artifact) && $artifact->getTracker()->isActive()) {\n                $type_html .= $this->getTemplateRenderer()->renderToString(\n                    'artifactlink-type-table-row',\n                    new ArtifactInTypeTablePresenter(\n                        $artifact,\n                        $artifact_html_classes,\n                        $this,\n                        $are_links_deletable,\n                    )\n                );\n            }\n        }\n\n        if ($type_html !== '') {\n            $head_html = $this->getTemplateRenderer()->renderToString(\n                'artifactlink-type-table-head',\n                TypeTablePresenter::buildForHeader($type_presenter, $this, $are_links_deletable)\n            );\n\n            $result[$key] = ['head' => $head_html, 'rows' => $type_html];\n        } else {\n            $result[$key] = [];\n        }\n    }\n\n    private function getFieldDataBuilder()\n    {\n        return new FieldDataBuilder();\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nnamespace Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type;\n\nuse Tracker_FormElement_Field_ArtifactLink;\n\nclass ArtifactInTypeTablePresenter\n{\n    public $direct_link_to_artifact;\n    public $project_public_name;\n    public $tracker_name;\n    public $artifact_id;\n    public $artifact_title;\n    public $artifact_status;\n    public $artifact_last_update_date;\n    public $artifact_submitter;\n    public $artifact_assignees;\n    public $html_classes;\n    public $artifactlink_field_id;\n\n    public function __construct(\n        \\PFUser $current_user,\n        \\Tuleap\\Tracker\\Artifact\\Artifact $artifact,\n        $html_classes,\n        Tracker_FormElement_Field_ArtifactLink $field,\n        public readonly bool $are_links_deletable,\n    ) {\n        $this->html_classes = $html_classes;\n        $tracker            = $artifact->getTracker();\n        $project            = $tracker->getProject();\n        $user_helper        = \\UserHelper::instance();\n\n        $this->direct_link_to_artifact   = $artifact->fetchDirectLinkToArtifact();\n        $this->project_public_name       = $project->getPublicName();\n        $this->tracker_name              = $this->emptyStringIfNull($tracker->getName());\n        $this->artifact_id               = $artifact->getId();\n        $this->artifact_title            = $this->emptyStringIfNull($artifact->getTitle());\n        $this->artifact_status           = $this->emptyStringIfNull($artifact->getStatus());\n        $this->artifact_last_update_date = date('Y-d-m H:i', $artifact->getLastUpdateDate());\n        $this->artifactlink_field_id     = $field->getId();\n\n        $assignees      = $artifact->getAssignedTo($current_user);\n        $assignee_links = [];\n        foreach ($assignees as $assignee) {\n            $assignee_links[] = $user_helper->getLinkOnUser($assignee);\n        }\n        $this->artifact_assignees = implode(', ', $assignee_links);\n\n        if ($this->userCanReadSubmitter($tracker, $current_user)) {\n            $this->artifact_submitter = $user_helper->getLinkOnUser($artifact->getSubmittedByUser());\n        } else {\n            $this->artifact_submitter = '';\n        }\n    }\n\n    private function userCanReadSubmitter(\\Tracker $tracker, \\PFUser $current_user)\n    {\n        $formelement_factory = \\Tracker_FormElementFactory::instance();\n        $fields              = $formelement_factory->getUsedSubmittedByFields($tracker);\n        foreach ($fields as $field) {\n            if ($field->userCanRead($current_user)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private function emptyStringIfNull($value)\n    {\n        if ($value === null) {\n            return '';\n        }\n        return $value;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nnamespace Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type;\n\nuse Tracker_FormElement_Field_ArtifactLink;\n\nclass TypeTablePresenter\n{\n    public $table_id;\n    public $type;\n    public $type_label;\n    public $id_label;\n    public $project_label;\n    public $tracker_label;\n    public $summary_label;\n    public $status_label;\n    public $last_update_label;\n    public $submitted_by_label;\n    public $assigned_to_label;\n    public $tracker_id;\n\n    public $artifact_links;\n    public $mass_unlink_title;\n\n    public const TABLE_ID_PREFIX = \"tracker_report_table_type_\";\n\n    public function __construct(\n        \\PFUser $current_user,\n        TypePresenter $type,\n        array $artifact_links,\n        bool $is_reverse_artifact_links,\n        Tracker_FormElement_Field_ArtifactLink $field,\n        public bool $are_links_deletable,\n    ) {\n        $this->table_id   = self::TABLE_ID_PREFIX . $type->shortname;\n        $this->type       = $type->shortname;\n        $this->type_label = $this->fetchTabLabel($type, $is_reverse_artifact_links);\n        $this->tracker_id = $field->getTracker()->getId();\n\n        $this->id_label           = dgettext('tuleap-tracker', 'Artifact ID');\n        $this->project_label      = dgettext('tuleap-tracker', 'Project');\n        $this->tracker_label      = dgettext('tuleap-tracker', 'Tracker');\n        $this->summary_label      = dgettext('tuleap-tracker', 'Summary');\n        $this->status_label       = dgettext('tuleap-tracker', 'Status');\n        $this->last_update_label  = dgettext('tuleap-tracker', 'Last Update Date');\n        $this->submitted_by_label = dgettext('tuleap-tracker', 'Submitted By');\n        $this->assigned_to_label  = dgettext('tuleap-tracker', 'Assigned to');\n\n        $art_factory          = \\Tracker_ArtifactFactory::instance();\n        $this->artifact_links = [];\n        $html_classes         = '';\n        foreach ($artifact_links as $artifact_link) {\n            $artifact = $art_factory->getArtifactByIdUserCanView($current_user, $artifact_link->getArtifactId());\n            if ($artifact === null) {\n                continue;\n            }\n            $this->artifact_links[] = new ArtifactInTypeTablePresenter(\n                $current_user,\n                $artifact,\n                $html_classes,\n                $field,\n                $this->are_links_deletable,\n            );\n        }\n\n        $this->mass_unlink_title = dgettext('tuleap-tracker', 'Mark all links to be removed');\n    }\n\n    public static function buildForHeader(\n        \\PFUser $current_user,\n        TypePresenter $type_presenter,\n        Tracker_FormElement_Field_ArtifactLink $field,\n        bool $are_links_deletable,\n    ): TypeTablePresenter {\n        return new TypeTablePresenter(\n            $current_user,\n            $type_presenter,\n            [],\n            false,\n            $field,\n            $are_links_deletable,\n        );\n    }\n\n    private function fetchTabLabel($type, bool $is_reverse_artifact_links): string\n    {\n        $type_label = '';\n        if ($is_reverse_artifact_links) {\n            $type_label = $type->reverse_label;\n        } else {\n            $type_label = $type->forward_label;\n        }\n        return $type_label;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Config\\ConfigKeyCategory;\nuse Tuleap\\Option\\Option;\nuse Tuleap\\Tracker\\Admin\\ArtifactLinksUsageDao;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Artifact\\ChangesetValue\\ArtifactLink\\ChangesetValueArtifactLinkDao;\nuse Tuleap\\Tracker\\Artifact\\PossibleParentsRetriever;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinkFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinksToRender;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinksToRenderForPerTrackerTable;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinkValueSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\DisplayArtifactLinkEvent;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\FieldDataBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ParentLinkAction;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\PossibleParentSelectorRenderer;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\PostSaveNewChangesetLinkParentArtifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\RequestDataAugmentor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\SubmittedValueConvertor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\SubmittedValueEmptyChecker;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\ArtifactInTypeTablePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\CSVOutputStrategy;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\HTMLOutputStrategy;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\ValueFormatter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypePresenterFactory;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeTablePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\Report\\Query\\ParametrizedFrom;\nuse Tuleap\\Tracker\\Report\\Query\\ParametrizedFromWhere;\nuse Tuleap\\Tracker\\Report\\Query\\ParametrizedSQLFragment;\n\n#[ConfigKeyCategory('Tracker')]\nclass Tracker_FormElement_Field_ArtifactLink extends Tracker_FormElement_Field // phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\n{\n    public const TYPE                    = 'art_link';\n    public const CREATE_NEW_PARENT_VALUE = -1;\n    public const NEW_VALUES_KEY          = 'new_values';\n    public const TYPE_IS_CHILD           = '_is_child';\n    public const FAKE_TYPE_IS_PARENT     = '_is_parent';\n    public const NO_TYPE                 = '';\n    public const FIELDS_DATA_PARENT_KEY  = 'parent';\n\n    /**\n     * @var Tracker_ArtifactFactory\n     */\n    private $artifact_factory;\n\n    private ?ChangesetValueArtifactLinkDao $cached_changeset_value_dao = null;\n\n    /**\n     * Display the html form in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html  = '';\n        $value = '';\n        if ($this->hasDefaultValue()) {\n            $value = $this->getDefaultValue();\n        }\n        $html .= '<input type=\"text\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML) . '\" autocomplete=\"off\" />';\n        $html .= '<br />';\n        $html .= '<a href=\"#\">bug #123</a><br />';\n        $html .= '<a href=\"#\">bug #321</a><br />';\n        $html .= '<a href=\"#\">story #10234</a>';\n        return $html;\n    }\n\n    /**\n     * Display the field value as a criteria\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    public function fetchChangesetValue(\n        int $artifact_id,\n        int $changeset_id,\n        mixed $value,\n        ?Tracker_Report $report = null,\n        ?int $from_aid = null,\n    ): string {\n        $arr    = [];\n        $values = $this->getChangesetValues($this->getCurrentUser(), $changeset_id);\n        foreach ($values as $artifact_link_info) {\n            $arr[] = $artifact_link_info->getLink();\n        }\n        $html = implode(', ', $arr);\n        return $html;\n    }\n\n    public function fetchChangesetValueForType(\n        $artifact_id,\n        $changeset_id,\n        $value,\n        $type,\n        $format,\n        $report = null,\n        $from_aid = null,\n    ) {\n        $value_formatter = new ValueFormatter(\n            Tracker_FormElementFactory::instance(),\n            new HTMLOutputStrategy(Codendi_HTMLPurifier::instance())\n        );\n\n        $current_user = $this->getCurrentUser();\n\n        return $value_formatter->fetchFormattedValue(\n            $current_user,\n            $this->getChangesetValues($current_user, $changeset_id),\n            $type,\n            $format\n        );\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        $arr    = [];\n        $values = $this->getChangesetValues($this->getCurrentUser(), $changeset_id);\n        foreach ($values as $artifact_link_info) {\n            $arr[] = $artifact_link_info->getArtifactId();\n        }\n\n        return implode(',', $arr);\n    }\n\n    public function fetchCSVChangesetValueWithType($changeset_id, $type, $format)\n    {\n        $value_formatter = new ValueFormatter(\n            Tracker_FormElementFactory::instance(),\n            new CSVOutputStrategy(Codendi_HTMLPurifier::instance())\n        );\n\n        $current_user = $this->getCurrentUser();\n\n        return $value_formatter->fetchFormattedValue(\n            $current_user,\n            $this->getChangesetValues($current_user, $changeset_id),\n            $type,\n            $format\n        );\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        $artifact_id_array = $value->getArtifactIds();\n        return implode(\", \", $artifact_id_array);\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * @return array\n     * @deprecated\n     */\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        return [];\n    }\n\n    public function getFieldDataFromRESTValueByField($value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    /**\n     * Get the field data (REST or CSV) for artifact submission\n     *\n     * @param string   $value    The rest field value\n     * @param Artifact $artifact The artifact the value is to be added/removed\n     *\n     * @return array\n     */\n    public function getFieldData($value, ?Artifact $artifact = null)\n    {\n        $submitted_ids = $this->getFieldDataBuilder()->getArrayOfIdsFromString($value);\n        return $this->getDataLikeWebUI($submitted_ids, [$value], $artifact);\n    }\n\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return $this->getFieldData($csv_value, $artifact);\n    }\n\n    /**\n     * @param array $submitted_ids\n     * @param array $submitted_values\n     *\n     * @return array\n     */\n    private function getDataLikeWebUI(\n        array $submitted_ids,\n        array $submitted_values,\n        ?Artifact $artifact = null,\n    ) {\n        $existing_links = $this->getArtifactLinkIdsOfLastChangeset($artifact);\n        $new_values     = array_diff($submitted_ids, $existing_links);\n        $removed_values = array_diff($existing_links, $submitted_ids);\n\n        return $this->getFieldDataBuilder()->getDataLikeWebUI($new_values, $removed_values, $submitted_values);\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        $user_manager   = UserManager::instance();\n        $user           = $user_manager->getCurrentUser();\n        $parent_tracker = $this->getTracker()->getParent();\n\n        if ($artifact->getParent($user) || ! $parent_tracker) {\n            return '';\n        }\n\n        $prefill_parent = '';\n        $name           = 'artifact[' . $this->id . ']';\n        $current_user   = $this->getCurrentUser();\n        $can_create     = false;\n\n        return $this->renderParentSelector($prefill_parent, $name, $this->getPossibleParentSelector($current_user, $can_create));\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        $prefill_parent = '';\n        $name           = 'artifact[' . $this->id . ']';\n        $parent_tracker = $this->getTracker()->getParent();\n        $current_user   = $this->getCurrentUser();\n        $can_create     = false;\n\n        if (! $parent_tracker) {\n            return '';\n        }\n\n        if (isset($submitted_values['disable_artifact_link_field']) && $submitted_values['disable_artifact_link_field']) {\n            return '';\n        }\n\n        return $this->renderParentSelector($prefill_parent, $name, $this->getPossibleParentSelector($current_user, $can_create));\n    }\n\n    private function getArtifactLinkIdsOfLastChangeset(?Artifact $artifact = null)\n    {\n        $link_ids = [];\n\n        $current_user = $this->getCurrentUser();\n\n        if ($artifact && $artifact->getLastChangeset()) {\n            foreach ($this->getChangesetValues($current_user, (int) $artifact->getLastChangeset()->getId()) as $link_info) {\n                $link_ids[] = $link_info->getArtifactId();\n            }\n        }\n\n        return $link_ids;\n    }\n\n    public function getCriteriaFromWhere(Tracker_Report_Criteria $criteria): Option\n    {\n        //Only filter query if field is used\n        if (! $this->isUsed()) {\n            return Option::nothing(ParametrizedFromWhere::class);\n        }\n\n        //Only filter query if criteria is valuated\n        $criteria_value = $this->getCriteriaValue($criteria);\n\n        if ($criteria_value === '' || $criteria_value === null) {\n            return Option::nothing(ParametrizedFromWhere::class);\n        }\n\n        $a = 'A_' . $this->id;\n        $b = 'B_' . $this->id;\n\n        return $this->buildMatchExpression(\"$b.artifact_id\", $criteria_value)->mapOr(\n            function (ParametrizedSQLFragment $match_expression) use ($a, $b) {\n                return Option::fromValue(\n                    ParametrizedFromWhere::fromParametrizedFrom(\n                        new ParametrizedFrom(\n                            \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = ? )\n                             INNER JOIN tracker_changeset_value_artifactlink AS $b ON (\n                                $b.changeset_value_id = $a.id\n                                AND \" . $match_expression->sql . \"\n                             ) \",\n                            [\n                                $this->id,\n                                ...$match_expression->parameters,\n                            ]\n                        )\n                    )\n                );\n            },\n            Option::nothing(ParametrizedFromWhere::class)\n        );\n    }\n\n    /**\n     * @var string\n     */\n    protected $pattern = '[+\\-]*[0-9]+';\n    protected function cast($value)\n    {\n        return (int) $value;\n    }\n\n    /**\n     * @return Option<ParametrizedSQLFragment>\n     */\n    private function buildMatchExpression(string $field_name, string $criteria_value): Option\n    {\n        $matches = [];\n        if (preg_match('/\\/(.*)\\//', $criteria_value, $matches)) {\n            // If it is sourrounded by /.../ then assume a regexp\n            return Option::fromValue(new ParametrizedSQLFragment($field_name . \" RLIKE ?\", [$matches[1]]));\n        }\n\n        $matches = [];\n        if (preg_match(\"/^(<|>|>=|<=)\\s*($this->pattern)\\$/\", $criteria_value, $matches)) {\n            // It's < or >,  = and a number then use as is\n            $number = (string) ($this->cast($matches[2]));\n            return Option::fromValue(new ParametrizedSQLFragment($field_name . ' ' . $matches[1] . ' ?', [$number]));\n        } elseif (preg_match(\"/^($this->pattern)\\$/\", $criteria_value, $matches)) {\n            // It's a number so use  equality\n            $number = $this->cast($matches[1]);\n            return Option::fromValue(new ParametrizedSQLFragment($field_name . ' = ?', [$number]));\n        } elseif (preg_match(\"/^($this->pattern)\\s*-\\s*($this->pattern)\\$/\", $criteria_value, $matches)) {\n            // it's a range number1-number2\n            $min  = (string) ($this->cast($matches[1]));\n            $max  = (string) ($this->cast($matches[2]));\n            $expr = $field_name . ' >= ' . $matches[1] . ' AND ' . $field_name . ' <= ' . $matches[2];\n            return Option::fromValue(new ParametrizedSQLFragment($field_name . ' >= ? AND ' . $field_name . ' <= ?', [$min, $max]));\n        } else {\n            // Invalid syntax - no condition\n            return Option::nothing(ParametrizedSQLFragment::class);\n        }\n    }\n\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao\n     */\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_ArtifactLink_ValueDao();\n    }\n\n    private function renderParentSelector(\n        string $prefill_parent,\n        string $name,\n        \\Tuleap\\Tracker\\Artifact\\PossibleParentSelector $possible_parents_selector,\n    ): string {\n        $renderer = PossibleParentSelectorRenderer::buildWithDefaultTemplateRenderer();\n        return $renderer->render($name, $prefill_parent, $possible_parents_selector);\n    }\n\n    private function getPossibleParentSelector(\n        PFUser $user,\n        bool $can_create,\n    ): \\Tuleap\\Tracker\\Artifact\\PossibleParentSelector {\n        $retriever = new PossibleParentsRetriever($this->getArtifactFactory(), EventManager::instance());\n\n        return $retriever->getPossibleArtifactParents(\n            $this->getTracker(),\n            $user,\n            0,\n            0,\n            $can_create,\n        );\n    }\n\n    /**\n     * Fetch the html widget for the field\n     *\n     * @param Artifact $artifact               Artifact on which we operate\n     * @param string   $name                   The name, if any\n     * @param string   $prefill_new_values     Prefill new values field (what the user has submitted, if any)\n     * @param array    $prefill_removed_values Pre-remove values (what the user has submitted, if any)\n     * @param string   $prefill_parent         Prefilled parent (what the user has submitted, if any) - Only valid on submit\n     * @param bool     $read_only              True if the user can't add or remove links\n     *\n     * @return string html\n     */\n    private function fetchHtmlWidget(\n        Artifact $artifact,\n        $name,\n        ArtifactLinksToRender $artifact_links_to_render,\n        $prefill_new_values,\n        $prefill_removed_values,\n        $prefill_type,\n        $prefill_edited_types,\n        $prefill_parent,\n        $read_only,\n        array $additional_classes,\n        $from_aid = null,\n        $reverse_artifact_links = false,\n    ) {\n        $current_user = $this->getCurrentUser();\n        $html         = '';\n        if (! $read_only) {\n            $html = '<div class=\"tracker_formelement_read_and_edit\" data-test=\"artifact-link-section\">';\n        }\n\n        if ($reverse_artifact_links) {\n            $html .= '<div class=\"artifact-link-value-reverse\">';\n            $html .= '<div id=\"tracker-form-element-artifactlink-reverse\" data-test=\"reverse-link-section\">';\n        } else {\n            $html .= '<div class=\"artifact-link-value\">';\n        }\n\n        $html .= '<h5 class=\"artifack_link_subtitle\">' . $this->getWidgetTitle($reverse_artifact_links) . '</h5>';\n\n        $html_name_new = '';\n\n        if ($name) {\n            $html_name_new = 'name=\"' . $name . '[new_values]\"';\n        }\n\n        $hp              = Codendi_HTMLPurifier::instance();\n        $read_only_class = 'read-only';\n\n        if (! $read_only) {\n            $read_only_class = '';\n            $classes         = implode(\" \", $additional_classes);\n            $html           .= '<section class=\"tracker_formelement_read_and_edit_edition_section tracker-form-element-artifactlink-section ' . $hp->purify($classes) . '\">';\n            $html           .= '<div>';\n            $html           .= '<div><span class=\"input-append\"><input type=\"text\"\n                             ' . $html_name_new . '\n                             class=\"tracker-form-element-artifactlink-new\"\n                             size=\"40\"\n                             data-test=\"artifact-link-submit\"\n                             data-preview-label=\"' . $hp->purify(dgettext('tuleap-tracker', 'Preview')) . '\"\n                             value=\"' .  $hp->purify($prefill_new_values, CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                             title=\"' . dgettext('tuleap-tracker', 'Enter artifact ids separated with a comma') . '\" />';\n\n            $possible_parents_selector = null;\n            if ($artifact->getParentWithoutPermissionChecking() === null) {\n                $can_create                = $artifact->getId() === -1;\n                $possible_parents_selector = $this->getPossibleParentSelector($current_user, $can_create);\n            }\n\n            if ($artifact->getTracker()->isProjectAllowedToUseType()) {\n                $renderer = new \\Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeSelectorRenderer(\n                    $this->getTypePresenterFactory(),\n                    $this->getTemplateRenderer(),\n                );\n                $html    .= $renderer->renderToString($artifact, $prefill_type, $name, $possible_parents_selector);\n            }\n            $html .= '</span>';\n            $html .= '</div>';\n\n            if ($possible_parents_selector) {\n                $html .= $this->renderParentSelector($prefill_parent, $name, $possible_parents_selector);\n            }\n            $html .= '</div>';\n            $html .= '</section>'; // end of tracker_formelement_read_and_edit_edition_section\n        }\n\n        $html .= '<div class=\"tracker-form-element-artifactlink-list ' . $read_only_class . '\" data-test=\"artifact-link-section\">';\n        if ($artifact_links_to_render->hasArtifactLinksToDisplay()) {\n            $this_project_id = $this->getTracker()->getProject()->getGroupId();\n            foreach ($artifact_links_to_render->getArtifactLinksForPerTrackerDisplay() as $artifact_links_per_tracker) {\n                /** @var ArtifactLinksToRenderForPerTrackerTable $artifact_links_per_tracker */\n                $renderer = $artifact_links_per_tracker->getRenderer();\n                if ($renderer === null) {\n                    $html .= dgettext('tuleap-tracker', 'No reports available');\n                    continue;\n                }\n\n                $html .= '<div class=\"tracker-form-element-artifactlink-trackerpanel\">';\n\n                $tracker = $artifact_links_per_tracker->getTracker();\n                $project = $tracker->getProject();\n\n                $project_name = '';\n                if ($project->getGroupId() != $this_project_id) {\n                    $project_name  = ' (<abbr title=\"' . $hp->purify($project->getPublicName(), CODENDI_PURIFIER_CONVERT_HTML) . '\">';\n                    $project_name .= $hp->purify($project->getUnixName(), CODENDI_PURIFIER_CONVERT_HTML);\n                    $project_name .= '</abbr>)';\n                }\n                $html .= '<h2 class=\"tracker-form-element-artifactlink-tracker_' . $tracker->getId() . '\">';\n                $html .= $hp->purify($tracker->getName(), CODENDI_PURIFIER_CONVERT_HTML) . $project_name;\n                $html .= '</h2>';\n\n                $json_encoded_data = json_encode(\n                    [\n                        'artifact_id'            => $artifact->getId(),\n                        'tracker_id'             => $tracker->getId(),\n                        'reverse_artifact_links' => $reverse_artifact_links,\n                        'read_only'              => $read_only,\n                        'from_aid'               => $from_aid,\n                        'prefill_removed_values' => $prefill_removed_values,\n                        'prefill_edited_types'   => $prefill_edited_types,\n                    ]\n                );\n\n                $html .= '<div\n                        class=\"tracker-form-element-artifactlink-renderer-async\"\n                        data-field-id=\"' . (int) $this->getId() . '\"\n                        data-renderer-data=\"' . Codendi_HTMLPurifier::instance()->purify($json_encoded_data) . '\"></div></div>';\n            }\n\n            $html .= $this->fetchTypeTables($current_user, $artifact_links_to_render, $reverse_artifact_links);\n        } else {\n            $html .= $this->getNoValueLabelForLinks($artifact);\n        }\n        $html .= '</div>';\n\n        if ($reverse_artifact_links) {\n            $html .= '</div>';\n        }\n        $html .= '</div>';\n        if (! $read_only) {\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    protected function getNoValueLabelForLinks(Artifact $artifact): string\n    {\n        if (count($this->getReverseLinks($artifact->getId())) > 0) {\n            return \"<span class='empty_value has-reverse-links'>\" . dgettext('tuleap-tracker', 'Empty') . \"</span>\";\n        }\n\n        return $this->getNoValueLabel();\n    }\n\n    private function fetchRendererAsArtifactLink(\n        ArtifactLinksToRenderForPerTrackerTable $artifact_links_per_tracker,\n        $read_only,\n        $prefill_removed_values,\n        $prefill_edited_types,\n        $reverse_artifact_links,\n        $from_aid,\n    ) {\n        $renderer = $artifact_links_per_tracker->getRenderer();\n        if (! $renderer) {\n            return '';\n        }\n\n        $matching_ids = $artifact_links_per_tracker->getMatchingIDs();\n\n        return $renderer->fetchAsArtifactLink($matching_ids, $this->getId(), $read_only, $prefill_removed_values, $prefill_edited_types, $reverse_artifact_links, false, $from_aid);\n    }\n\n    private function fetchTypeTables(\\PFUser $current_user, ArtifactLinksToRender $artifact_links_to_render, $is_reverse_artifact_links): string\n    {\n        static $type_tables_cache = [];\n        if (isset($type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links])) {\n            return $type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links];\n        }\n        $html              = '';\n        $template_renderer = $this->getTemplateRenderer();\n        foreach ($artifact_links_to_render->getArtifactLinksForPerTypeDisplay() as $artifact_links_per_type) {\n            $html .= $template_renderer->renderToString(\n                'artifactlink-type-table',\n                new TypeTablePresenter(\n                    $current_user,\n                    $artifact_links_per_type->getTypePresenter(),\n                    $artifact_links_per_type->getArtifactLinks(),\n                    $is_reverse_artifact_links,\n                    $this,\n                    $this->areLinksDeletable(\n                        $artifact_links_per_type->getTypePresenter(),\n                        $is_reverse_artifact_links,\n                    )\n                )\n            );\n        }\n        $type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links] = $html;\n        return $html;\n    }\n\n    private function areLinksDeletable(TypePresenter $type_presenter, bool $is_reverse_artifact_links): bool\n    {\n        $event = EventManager::instance()->dispatch(\n            new DisplayArtifactLinkEvent($type_presenter)\n        );\n\n        return (! $is_reverse_artifact_links && $event->canLinkBeModified());\n    }\n\n    /**\n     *\n     * @param bool $reverse_artifact_links\n     */\n    private function getWidgetTitle($reverse_artifact_links)\n    {\n        if ($reverse_artifact_links) {\n            return dgettext('tuleap-tracker', 'Reverse artifact links');\n        }\n\n        return dgettext('tuleap-tracker', 'Artifact links');\n    }\n\n    /**\n     * Process the request\n     *\n     * @param Tracker_IDisplayTrackerLayout  $layout          Displays the page header and footer\n     * @param Codendi_Request                $request         The data coming from the user\n     * @param PFUser                           $current_user    The user who mades the request\n     *\n     * @return void\n     */\n    public function process(Tracker_IDisplayTrackerLayout $layout, $request, $current_user)\n    {\n        switch ($request->get('func')) {\n            case 'fetch-artifacts':\n                $read_only              = false;\n                $prefill_removed_values = [];\n                $prefill_edited_types   = [];\n                $only_rows              = true;\n                $this_project_id        = $this->getTracker()->getProject()->getGroupId();\n                $is_reverse             = false;\n                $hp                     = Codendi_HTMLPurifier::instance();\n\n                $ugroups = $current_user->getUgroups($this_project_id, []);\n\n                $ids     = $request->get('ids'); //2, 14, 15\n                $tracker = [];\n                $result  = [];\n                if ($this->getTracker()->isProjectAllowedToUseType()) {\n                    $type_shortname = $request->get('type');\n                    $type_presenter = $this->getTypePresenterFactory()->getFromShortname($type_shortname);\n                }\n                //We must retrieve the last changeset ids of each artifact id.\n                $dao = new Tracker_ArtifactDao();\n                foreach ($dao->searchLastChangesetIds($ids, $ugroups, $current_user->isSuperUser()) as $matching_ids) {\n                    $tracker_id = $matching_ids['tracker_id'];\n                    $tracker    = $this->getTrackerFactory()->getTrackerById($tracker_id);\n                    $project    = $tracker->getProject();\n\n                    if ($tracker->userCanView() && ! $tracker->isDeleted()) {\n                        if ($this->getTracker()->isProjectAllowedToUseType()) {\n                            $matching_ids['type'] = [];\n                            foreach (explode(',', $matching_ids['id']) as $id) {\n                                $matching_ids['type'][$id] = $type_presenter;\n                            }\n                        }\n                        $trf    = Tracker_ReportFactory::instance();\n                        $report = $trf->getDefaultReportsByTrackerId($tracker->getId());\n                        if ($report) {\n                            $renderers = $report->getRenderers();\n                            // looking for the first table renderer\n                            foreach ($renderers as $renderer) {\n                                if ($renderer->getType() === Tracker_Report_Renderer::TABLE) {\n                                    $key          = $this->id . '_' . $report->id . '_' . $renderer->getId();\n                                    $result[$key] = $renderer->fetchAsArtifactLink($matching_ids, $this->getId(), $read_only, $is_reverse, $prefill_removed_values, $prefill_edited_types, $only_rows);\n                                    $head         = '<div class=\"tracker-form-element-artifactlink-trackerpanel\">';\n\n                                    $project_name = '';\n                                    if ($project->getGroupId() != $this_project_id) {\n                                        $project_name  = ' (<abbr title=\"' . $hp->purify($project->getPublicName(), CODENDI_PURIFIER_CONVERT_HTML) . '\">';\n                                        $project_name .= $hp->purify($project->getUnixName(), CODENDI_PURIFIER_CONVERT_HTML);\n                                        $project_name .= '</abbr>)';\n                                    }\n                                    $head .= '<h2 class=\"tracker-form-element-artifactlink-tracker_' . $tracker->getId() . '\">';\n                                    $head .= $hp->purify($tracker->getName(), CODENDI_PURIFIER_CONVERT_HTML) . $project_name;\n                                    $head .= '</h2>';\n                                    //if ($artifact) {\n                                    //    $title = $hp->purify('link a '. $tracker->getItemName(), CODENDI_PURIFIER_CONVERT_HTML);\n                                    //    $head .= '<a href=\"'.TRACKER_BASE_URL.'/?tracker='.$tracker_id.'&func=new-artifact-link&id='.$artifact->getId().'\" class=\"tracker-form-element-artifactlink-link-new-artifact\">'. 'create a new '.$hp->purify($tracker->getItemName(), CODENDI_PURIFIER_CONVERT_HTML)  .'</a>';\n                                    //}\n                                    $result[$key]['head'] = $head . $result[$key]['head'];\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                $this->appendTypeTable($current_user, $request, $result, $is_reverse);\n                if ($result) {\n                    $head = [];\n                    $rows = [];\n                    foreach ($result as $key => $value) {\n                        $head[$key] = $value[\"head\"];\n                        $rows[$key] = $value[\"rows\"];\n                    }\n                    $GLOBALS['HTML']->sendJSON(['head' => $head, 'rows' => $rows]);\n                }\n                exit();\n            case 'fetch-aggregates':\n                $read_only              = false;\n                $prefill_removed_values = [];\n                $only_rows              = true;\n                $only_one_column        = false;\n                $extracolumn            = Tracker_Report_Renderer_Table::EXTRACOLUMN_UNLINK;\n                $read_only              = true;\n                $use_data_from_db       = false;\n\n                $ugroups = $current_user->getUgroups($this->getTracker()->getGroupId(), []);\n                $ids     = $request->get('ids'); //2, 14, 15\n                $tracker = [];\n                $json    = ['tabs' => []];\n                $dao     = new Tracker_ArtifactDao();\n                foreach ($dao->searchLastChangesetIds($ids, $ugroups, $current_user->isSuperUser()) as $matching_ids) {\n                    $tracker_id = $matching_ids['tracker_id'];\n                    $tracker    = $this->getTrackerFactory()->getTrackerById($tracker_id);\n                    $project    = $tracker->getProject();\n                    if ($tracker->userCanView()) {\n                        if ($this->getTracker()->isProjectAllowedToUseType()) {\n                            $matching_ids['type'] = [];\n                        }\n                        $trf    = Tracker_ReportFactory::instance();\n                        $report = $trf->getDefaultReportsByTrackerId($tracker->getId());\n                        if ($report) {\n                            $renderers = $report->getRenderers();\n                            // looking for the first table renderer\n                            foreach ($renderers as $renderer) {\n                                if ($renderer->getType() === Tracker_Report_Renderer::TABLE) {\n                                    $key            = $this->id . '_' . $report->id . '_' . $renderer->getId();\n                                    $columns        = $renderer->getTableColumns($only_one_column, $use_data_from_db);\n                                    $json['tabs'][] = [\n                                        'key' => $key,\n                                        'src' => $renderer->fetchAggregates($matching_ids, $extracolumn, $only_one_column, $columns, $use_data_from_db, $read_only),\n                                    ];\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                $GLOBALS['HTML']->sendJSON($json);\n                exit();\n            case 'artifactlink-renderer-async':\n                session_write_close();\n                if (! $request->isAjax()) {\n                    return;\n                }\n\n                if (! $request->get('renderer_data')) {\n                    return;\n                }\n\n                $renderer_data = json_decode($request->get('renderer_data'), true);\n                if (! $renderer_data) {\n                    return;\n                }\n\n                $expected_keys                  = array_flip([\n                    'artifact_id',\n                    'tracker_id',\n                    'reverse_artifact_links',\n                    'read_only',\n                    'prefill_removed_values',\n                    'prefill_edited_types',\n                    'from_aid',\n                ]);\n                $are_expected_keys_part_of_data = empty(array_diff_key($expected_keys, $renderer_data));\n                if (! $are_expected_keys_part_of_data) {\n                    return;\n                }\n\n                $artifact_id = $renderer_data['artifact_id'];\n                $artifact    = $this->getArtifactFactory()->getArtifactByIdUserCanView($current_user, $artifact_id);\n                if (! $artifact) {\n                    return;\n                }\n\n                $target_tracker_id = $renderer_data['tracker_id'];\n                $tracker           = $this->getTrackerFactory()->getTrackerById($target_tracker_id);\n                if (! $tracker->userCanView($current_user)) {\n                    return;\n                }\n\n                if ($renderer_data['reverse_artifact_links']) {\n                    $artifact_links_to_render = $this->getReverseArtifactLinksToRender($artifact);\n                } else {\n                    $artifact_links_to_render = $this->getArtifactLinksToRenderFromChangesetValue(\n                        $artifact->getValue($this)\n                    );\n                }\n\n                $artifact_links_per_tracker = $artifact_links_to_render->getArtifactLinksForAGivenTracker($tracker);\n                if (! $artifact_links_per_tracker) {\n                    return;\n                }\n\n                echo $this->fetchRendererAsArtifactLink(\n                    $artifact_links_per_tracker,\n                    $renderer_data['read_only'],\n                    $renderer_data['prefill_removed_values'],\n                    $renderer_data['prefill_edited_types'],\n                    $renderer_data['reverse_artifact_links'],\n                    $renderer_data['from_aid']\n                );\n                break;\n            default:\n                parent::process($layout, $request, $current_user);\n                break;\n        }\n    }\n\n    /**\n     * Fetch the html widget for the field\n     *\n     * @param string $name                   The name, if any\n     * @param array  $artifact_links         The current artifact links\n     * @param string $prefill_new_values     Prefill new values field (what the user has submitted, if any)\n     * @param bool   $read_only              True if the user can't add or remove links\n     *\n     * @return string html\n     */\n    protected function fetchHtmlWidgetMasschange($name, $artifact_links, $prefill_new_values, $read_only)\n    {\n        $html          = '';\n        $html_name_new = '';\n        if ($name) {\n            $html_name_new = 'name=\"' . $name . '[new_values]\"';\n        }\n        $hp = Codendi_HTMLPurifier::instance();\n        if (! $read_only) {\n            $html .= '<input type=\"text\"\n                             ' . $html_name_new . '\n                             value=\"' .  $hp->purify($prefill_new_values, CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                             title=\"' . dgettext('tuleap-tracker', 'Enter artifact ids separated with a comma') . '\" />';\n            $html .= '<br />';\n        }\n        if ($artifact_links) {\n            $html .= '<ul class=\"tracker-form-element-artifactlink-list\">';\n            foreach ($artifact_links as $artifact_link_info) {\n                $html .= '<li>';\n                $html .= $artifact_link_info->getLink();\n                $html .= '</li>';\n            }\n            $html .= '</ul>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $links_tab         = $this->fetchLinks($artifact, $this->getArtifactLinksToRenderFromChangesetValue($value), $submitted_values);\n        $reverse_links_tab = $this->fetchReverseLinks($artifact);\n\n        return $links_tab . $reverse_links_tab;\n    }\n\n    private function fetchLinks(\n        Artifact $artifact,\n        ArtifactLinksToRender $artifact_links_to_render,\n        array $submitted_values,\n    ) {\n        if (isset($submitted_values[$this->getId()])) {\n            $submitted_value = $submitted_values[$this->getId()];\n        }\n\n        $prefill_new_values = '';\n        if (isset($submitted_value['new_values'])) {\n            $prefill_new_values = $submitted_value['new_values'];\n        }\n\n        $prefill_removed_values = [];\n        if (isset($submitted_value['removed_values'])) {\n            $prefill_removed_values = $submitted_value['removed_values'];\n        }\n\n        $prefill_type = '';\n        if (isset($submitted_value['type'])) {\n            $prefill_type = $submitted_value['type'];\n        }\n\n        $prefill_edited_types = [];\n        if (isset($submitted_value['types'])) {\n            $prefill_edited_types = $submitted_value['types'];\n        }\n\n        $read_only      = false;\n        $name           = 'artifact[' . $this->id . ']';\n        $from_aid       = $artifact->getId();\n        $prefill_parent = '';\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [],\n            $from_aid\n        );\n    }\n\n    private function getArtifactLinksToRenderFromChangesetValue(?Tracker_Artifact_ChangesetValue $value)\n    {\n        $artifact_links = [];\n        if ($value !== null) {\n            $artifact_links = $value->getValue();\n        }\n        return new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$artifact_links\n        );\n    }\n\n    private function getReverseArtifactLinksToRender(Artifact $artifact)\n    {\n        $reverse_links = $this->getReverseLinks($artifact->getId());\n\n        return new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$reverse_links\n        );\n    }\n\n    private function fetchReverseLinks(Artifact $artifact)\n    {\n        $from_aid = $artifact->getId();\n\n        $reverse_artifact_links_to_render = $this->getReverseArtifactLinksToRender($artifact);\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            '',\n            $reverse_artifact_links_to_render,\n            '',\n            '',\n            '',\n            [],\n            '',\n            true,\n            [],\n            $from_aid,\n            true\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        ?ArtifactLinksToRender $artifact_links_to_render = null,\n    ) {\n        if ($artifact_links_to_render === null) {\n            $artifact_links_to_render = $this->getArtifactLinksToRenderFromChangesetValue($value);\n        }\n        $links_tab_read_only = $this->fetchLinksReadOnly($artifact, $artifact_links_to_render);\n        $reverse_links_tab   = $this->fetchReverseLinks($artifact);\n\n        return $links_tab_read_only . $reverse_links_tab;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValue($artifact, $value, $submitted_values) .\n            \"<div class='tracker_hidden_edition_field' data-field-id=\" . $this->getId() . '></div>';\n    }\n\n    private function fetchLinksReadOnly(Artifact $artifact, ArtifactLinksToRender $artifact_links_to_render)\n    {\n        $read_only              = true;\n        $name                   = '';\n        $prefill_new_values     = '';\n        $prefill_removed_values = [];\n        $prefill_type           = '';\n        $prefill_edited_types   = [];\n        $prefill_parent         = '';\n        $from_aid               = $artifact->getId();\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [],\n            $from_aid\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html               = '';\n        $prefill_new_values = '';\n        if (isset($submitted_values[$this->getId()]['new_values'])) {\n            $prefill_new_values = $submitted_values[$this->getId()]['new_values'];\n        } elseif ($this->hasDefaultValue()) {\n            $prefill_new_values = $this->getDefaultValue();\n        }\n        $prefill_parent = '';\n        if (isset($submitted_values[$this->getId()]['parent'][0]) && is_numeric($submitted_values[$this->getId()]['parent'][0])) {\n            $prefill_parent = $submitted_values[$this->getId()]['parent'][0];\n        }\n        $prefill_type = '';\n        if (isset($submitted_values[$this->getId()]['type'])) {\n            $prefill_type = $submitted_values[$this->getId()]['type'];\n        }\n        $prefill_edited_types = [];\n        if (isset($submitted_values[$this->getId()]['types'])) {\n            $prefill_edited_types = $submitted_values[$this->getId()]['types'];\n        }\n        $read_only              = false;\n        $name                   = 'artifact[' . $this->id . ']';\n        $prefill_removed_values = [];\n        $artifact_links         = [];\n\n        // Well, shouldn't be here but API doesn't provide a Null Artifact on creation yet\n        // Here to avoid having to pass null arg for fetchHtmlWidget\n        $artifact = new Artifact(-1, $this->tracker_id, $this->getCurrentUser()->getId(), 0, false);\n\n        $artifact_links_to_render = new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$artifact_links\n        );\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [\"tracker_formelement_artifact_link_editable_on_submit\"]\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $html               = '';\n        $prefill_new_values = dgettext('tuleap-tracker', 'Unchanged');\n        $read_only          = false;\n        $name               = 'artifact[' . $this->id . ']';\n        $artifact_links     = [];\n\n        return $this->fetchHtmlWidgetMasschange($name, $artifact_links, $prefill_new_values, $read_only);\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of the field\n     *\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value != null) {\n            $html           = '<ul>';\n            $artifact_links = $value->getValue();\n            foreach ($artifact_links as $artifact_link_info) {\n                $html .= '<li>' . $artifact_link_info->getLabel() . '</li>';\n            }\n            $html .= '</ul>';\n        }\n        return $html;\n    }\n\n    /**\n     * @return ArtifactLinkFieldValueDao\n     */\n    protected function getValueDao()\n    {\n        return new ArtifactLinkFieldValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getValue()) {\n            return '-';\n        }\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $artifactlink_infos = $value->getValue();\n                $url                = [];\n                foreach ($artifactlink_infos as $artifactlink_info) {\n                    if ($ignore_perms || $artifactlink_info->userCanView($user)) {\n                        $url[] = $artifactlink_info->getLink();\n                    }\n                }\n                return implode(' , ', $url);\n            default:\n                $output             = PHP_EOL;\n                $artifactlink_infos = $value->getValue();\n                foreach ($artifactlink_infos as $artifactlink_info) {\n                    if ($ignore_perms || $artifactlink_info->userCanView($user)) {\n                        $output .= $artifactlink_info->getLabel();\n                        $output .= PHP_EOL;\n                    }\n                }\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     *\n     * @param Tracker_Artifact_Changeset $changeset\n     *\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        // never used...\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $rows                   = $this->getValueDao()->searchById($value_id, $this->id);\n        $artifact_links         = $this->getArtifactLinkInfos($rows);\n        $reverse_artifact_links = [];\n\n        if ($changeset) {\n            $reverse_artifact_links = $this->getReverseLinks($changeset->getArtifact()->getId());\n        }\n\n        return new Tracker_Artifact_ChangesetValue_ArtifactLink(\n            $value_id,\n            $changeset,\n            $this,\n            $has_changed,\n            $artifact_links,\n            $reverse_artifact_links\n        );\n    }\n\n    /**\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    public function getReverseLinks($artifact_id): array\n    {\n        $links_data = $this->getValueDao()->searchReverseLinksById($artifact_id);\n\n        return $this->getArtifactLinkInfos($links_data);\n    }\n\n    /**\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    private function getArtifactLinkInfos($data)\n    {\n        $artifact_links = [];\n        while ($row = $data->getRow()) {\n            $artifact_links[$row['artifact_id']] = new Tracker_ArtifactLinkInfo(\n                $row['artifact_id'],\n                $row['keyword'],\n                $row['group_id'],\n                $row['tracker_id'],\n                $row['last_changeset_id'],\n                $row['nature']\n            );\n        }\n\n        return $artifact_links;\n    }\n\n    /**\n     * @var array\n     */\n    protected $artifact_links_by_changeset = [];\n\n    /**\n     *\n     * @param int $changeset_id\n     *\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    protected function getChangesetValues(PFUser $user, $changeset_id): array\n    {\n        if (! isset($this->artifact_links_by_changeset[$changeset_id])) {\n            $this->artifact_links_by_changeset[$changeset_id] = [];\n\n            $dao = $this->getChangesetValueArtifactLinkDao();\n            foreach ($dao->searchChangesetValues($this->id, $changeset_id) as $row) {\n                $artifact_link_info = new Tracker_ArtifactLinkInfo(\n                    $row['artifact_id'],\n                    $row['keyword'],\n                    $row['group_id'],\n                    $row['tracker_id'],\n                    $row['last_changeset_id'],\n                    $row['nature']\n                );\n\n                if (! $artifact_link_info->userCanView($user)) {\n                    continue;\n                }\n\n                $this->artifact_links_by_changeset[$row['changeset_id']][] = $artifact_link_info;\n            }\n        }\n        return $this->artifact_links_by_changeset[$changeset_id];\n    }\n\n    private function getChangesetValueArtifactLinkDao(): ChangesetValueArtifactLinkDao\n    {\n        if (! $this->cached_changeset_value_dao) {\n            $this->cached_changeset_value_dao = new ChangesetValueArtifactLinkDao();\n        }\n\n        return $this->cached_changeset_value_dao;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        if (! $old_value instanceof Tracker_Artifact_ChangesetValue_ArtifactLink) {\n            return false;\n        }\n\n        $submitted_value = $this->getSubmittedValueConvertor()->convert(\n            $new_value,\n            $old_value\n        );\n\n        return $old_value->hasChanges($submitted_value);\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Artifact Link');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Links to other artifacts');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/artifact-chain.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/artifact-chain--plus.png');\n    }\n\n    /**\n     * @return bool say if the field is a unique one\n     */\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param array    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = ! $this->validate($artifact, $value);\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value)\n    {\n        if ((! is_array($submitted_value) || empty($value['new_values'])) && $this->isRequired()) {\n            if (! $this->isEmpty($submitted_value, $artifact)) {\n                // Field is required but there are values, so field is valid\n                $this->has_errors = false;\n            } else {\n                $this->addRequiredError();\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param array|null $submitted_value\n     *\n     * @return bool true if the submitted value is empty\n     */\n    public function isEmpty($submitted_value, Artifact $artifact)\n    {\n        if ($submitted_value === null) {\n            $submitted_value = [];\n        }\n\n        return $this->getSubmittedValueEmptyChecker()->isSubmittedValueEmpty(\n            $submitted_value,\n            $this,\n            $artifact,\n        );\n    }\n\n    /**\n     * For legacy testing purpose\n     */\n    protected function getSubmittedValueEmptyChecker(): SubmittedValueEmptyChecker\n    {\n        return new SubmittedValueEmptyChecker();\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param string   $value    data coming from the request. Should be artifact id separated by comma\n     *\n     * @return bool true if the value is considered ok\n     * @deprecated Use ArtifactLinkValidator instead\n     *\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    public function setArtifactFactory(Tracker_ArtifactFactory $artifact_factory)\n    {\n        $this->artifact_factory = $artifact_factory;\n    }\n\n    /**\n     * @return Tracker_ArtifactFactory\n     */\n    private function getArtifactFactory()\n    {\n        if (! $this->artifact_factory) {\n            $this->artifact_factory = Tracker_ArtifactFactory::instance();\n        }\n        return $this->artifact_factory;\n    }\n\n    public function getTrackerFactory()\n    {\n        return TrackerFactory::instance();\n    }\n\n    /**\n     * @return Tracker_HierarchyFactory\n     */\n    protected function getHierarchyFactory()\n    {\n        return Tracker_HierarchyFactory::instance();\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::postSaveNewChangeset()\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ): void {\n        $queue = $this->getPostNewChangesetQueue();\n        $queue->execute($artifact, $submitter, $new_changeset, $fields_data, $previous_changeset);\n    }\n\n    private function getPostNewChangesetQueue(): Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue\n    {\n        $queue = new Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue();\n        $queue->add($this->getProcessChildrenTriggersCommand());\n        $queue->add($this->getPostSaveNewChangesetLinkParentArtifact());\n\n        return $queue;\n    }\n\n    /**\n     * @protected for testing purpose\n     */\n    protected function getProcessChildrenTriggersCommand(): Tracker_FormElement_Field_ArtifactLink_ProcessChildrenTriggersCommand\n    {\n        return new Tracker_FormElement_Field_ArtifactLink_ProcessChildrenTriggersCommand(\n            $this,\n            $this->getWorkflowFactory()->getTriggerRulesManager()\n        );\n    }\n\n    /**\n     * @protected for testing purpose\n     */\n    protected function getPostSaveNewChangesetLinkParentArtifact(): PostSaveNewChangesetLinkParentArtifact\n    {\n        return new PostSaveNewChangesetLinkParentArtifact(\n            new ParentLinkAction(\n                $this->getArtifactFactory(),\n            )\n        );\n    }\n\n    public function saveNewChangeset(\n        Artifact $artifact,\n        ?Tracker_Artifact_Changeset $old_changeset,\n        int $new_changeset_id,\n        $submitted_value,\n        PFUser $submitter,\n        bool $is_submission,\n        bool $bypass_permissions,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $previous_changesetvalue = $this->getPreviousChangesetValue($old_changeset);\n\n        $value = $this->getNormalizedSubmittedValue($submitted_value);\n\n        $convertor       = $this->getSubmittedValueConvertor();\n        $submitted_value = $convertor->convert(\n            $value,\n            $previous_changesetvalue\n        );\n\n        return parent::saveNewChangeset(\n            $artifact,\n            $old_changeset,\n            $new_changeset_id,\n            $submitted_value,\n            $submitter,\n            $is_submission,\n            $bypass_permissions,\n            $url_mapping\n        );\n    }\n\n    /**\n     * Sometimes, for example during a post action for a trigger, the workflow pass null as submitted value.\n     * ArtifactLinks don't like very much this null so force it to a decent, empty value.\n     */\n    private function getNormalizedSubmittedValue($value)\n    {\n        if (is_null($value)) {\n            $value = ['new_values' => ''];\n        }\n\n        return $value;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $submitted_value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $saver = $this->getArtifactLinkValueSaver();\n\n        return $saver->saveValue(\n            $this,\n            $this->getCurrentUser(),\n            $artifact,\n            $changeset_value_id,\n            $submitted_value\n        );\n    }\n\n    /** @return ArtifactLinkValueSaver */\n    private function getArtifactLinkValueSaver()\n    {\n        return new ArtifactLinkValueSaver(\n            Tracker_ArtifactFactory::instance(),\n            $this->getValueDao(),\n            new Tracker_ReferenceManager(\n                ReferenceManager::instance(),\n                Tracker_ArtifactFactory::instance()\n            ),\n            EventManager::instance(),\n            new ArtifactLinksUsageDao(),\n            $this->getTrackerFactory()->getTriggerRulesManager()\n        );\n    }\n\n    private function getSubmittedValueConvertor(): SubmittedValueConvertor\n    {\n        return new SubmittedValueConvertor(\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Retrieve linked artifacts according to user's permissions\n     *\n     * @param Tracker_Artifact_Changeset $changeset The changeset you want to retrieve artifact from\n     * @param PFUser                       $user      The user who will see the artifacts\n     *\n     * @return Artifact[]\n     */\n    public function getLinkedArtifacts(Tracker_Artifact_Changeset $changeset, PFUser $user)\n    {\n        $artifacts       = [];\n        $changeset_value = $changeset->getValue($this);\n        if ($changeset_value) {\n            foreach ($changeset_value->getArtifactIds() as $id) {\n                $this->addArtifactUserCanViewFromId($artifacts, $id, $user);\n            }\n        }\n        return $artifacts;\n    }\n\n    /**\n     * Retrieve sliced linked artifacts according to user's permissions\n     *\n     * This is nearly the same as a paginated list however, for performance\n     * reasons, the total size may be different than the sum of total paginated\n     * artifacts.\n     *\n     * Example to illustrate the difference between paginated and sliced:\n     *\n     * Given that artifact links are [12, 13, 24, 39, 65, 69]\n     * And that the user cannot see artifact #39\n     * When I request linked artifacts by bunchs of 2\n     * Then I get [[12, 13], [24], [65, 69]]  # instead of [[12, 13], [24, 65], [69]]\n     * And total size will be 6               # instead of 5\n     *\n     * @param Tracker_Artifact_Changeset $changeset The changeset you want to retrieve artifact from\n     * @param PFUser                     $user      The user who will see the artifacts\n     * @param int                        $limit     The number of artifact to fetch\n     * @param int                        $offset    The offset\n     *\n     * @return Tracker_Artifact_PaginatedArtifacts\n     */\n    public function getSlicedLinkedArtifacts(Tracker_Artifact_Changeset $changeset, PFUser $user, $limit, $offset)\n    {\n        $changeset_value = $changeset->getValue($this);\n        if (! $changeset_value) {\n            return new Tracker_Artifact_PaginatedArtifacts([], 0);\n        }\n\n        assert($changeset_value instanceof Tracker_Artifact_ChangesetValue_ArtifactLink);\n        $artifact_ids = $changeset_value->getArtifactIds();\n        $size         = count($artifact_ids);\n\n        $artifacts = [];\n        foreach (array_slice($artifact_ids, $offset, $limit) as $id) {\n            $this->addArtifactUserCanViewFromId($artifacts, $id, $user);\n        }\n\n        return new Tracker_Artifact_PaginatedArtifacts($artifacts, $size);\n    }\n\n    private function addArtifactUserCanViewFromId(array &$artifacts, $id, PFUser $user): void\n    {\n        $artifact = $this->getArtifactFactory()->getArtifactById($id);\n        if ($artifact && $artifact->userCanView($user)) {\n            $artifacts[] = $artifact;\n        }\n    }\n\n    /**\n     * If request come with a 'parent', it should be store in a cache\n     * that will be called after the artifact update to create the\n     * right _is_child link\n     *\n     * Please note that it only work on artifact creation.\n     *\n     * @param array $fields_data\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        $request_data_augmentor = new RequestDataAugmentor();\n\n        $request_data_augmentor->augmentDataFromRequest(\n            $this,\n            $fields_data\n        );\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitArtifactLink($this);\n    }\n\n    /**\n     * @return TypePresenterFactory\n     */\n    protected function getTypePresenterFactory()\n    {\n        return new TypePresenterFactory(new TypeDao(), new ArtifactLinksUsageDao());\n    }\n\n    private function getTemplateRenderer()\n    {\n        return TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n    }\n\n    private function appendTypeTable(PFUser $current_user, Codendi_Request $request, array &$result, bool $is_reverse_artifact_links): void\n    {\n        if (! $this->getTracker()->isProjectAllowedToUseType()) {\n            return;\n        }\n\n        $type_shortname = $request->get('type');\n        if (! $type_shortname) {\n            return;\n        }\n\n        $type_presenter = $this->getTypePresenterFactory()->getFromShortname($type_shortname);\n        if ($type_presenter === null) {\n            return;\n        }\n        $key                   = \"type_$type_shortname\";\n        $art_factory           = $this->getArtifactFactory();\n        $artifact_html_classes = 'additional';\n        $type_html             = '';\n        $ids                   = $request->get('ids');\n        $are_links_deletable   = $this->areLinksDeletable(\n            $type_presenter,\n            $is_reverse_artifact_links,\n        );\n\n        foreach (explode(',', $ids) as $id) {\n            $artifact = $art_factory->getArtifactByIdUserCanView($current_user, (int) trim($id));\n\n            if ($artifact === null) {\n                continue;\n            }\n\n            $type_html .= $this->getTemplateRenderer()->renderToString(\n                'artifactlink-type-table-row',\n                new ArtifactInTypeTablePresenter(\n                    $current_user,\n                    $artifact,\n                    $artifact_html_classes,\n                    $this,\n                    $are_links_deletable,\n                )\n            );\n        }\n\n        if ($type_html !== '') {\n            $head_html = $this->getTemplateRenderer()->renderToString(\n                'artifactlink-type-table-head',\n                TypeTablePresenter::buildForHeader($current_user, $type_presenter, $this, $are_links_deletable)\n            );\n\n            $result[$key] = ['head' => $head_html, 'rows' => $type_html];\n        } else {\n            $result[$key] = [];\n        }\n    }\n\n    private function getFieldDataBuilder()\n    {\n        return new FieldDataBuilder();\n    }\n}\n"], "filenames": ["plugins/tracker/include/Tracker/FormElement/Field/ArtifactLink/Type/ArtifactInTypeTablePresenter.php", "plugins/tracker/include/Tracker/FormElement/Field/ArtifactLink/Type/TypeTablePresenter.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_ArtifactLink.php"], "buggy_code_start_loc": [39, 45, 568], "buggy_code_end_loc": [50, 87, 1782], "fixing_code_start_loc": [40, 46, 568], "fixing_code_end_loc": [49, 95, 1787], "type": "CWE-862", "message": "Tuleap is an open source suite to improve management of software developments and collaboration. In Tuleap Community Edition prior to version 14.11.99.28 and Tuleap Enterprise Edition prior to versions 14.10-6 and 14.11-3, the preview of an artifact link with a type does not respect the project, tracker and artifact level permissions. The issue occurs on the artifact view (not reproducible on the artifact modal). Users might get access to information they should not have access to. Only the title, status, assigned to and last update date fields as defined by the semantics are impacted. If those fields have strict permissions (e.g. the title is only visible to a specific user group) those permissions are still enforced. Tuleap Community Edition 14.11.99.28, Tuleap Enterprise Edition 14.10-6, and Tuleap Enterprise Edition 14.11-3 contain a fix for this issue.", "other": {"cve": {"id": "CVE-2023-38508", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-24T23:15:08.803", "lastModified": "2023-08-30T18:23:27.400", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tuleap is an open source suite to improve management of software developments and collaboration. In Tuleap Community Edition prior to version 14.11.99.28 and Tuleap Enterprise Edition prior to versions 14.10-6 and 14.11-3, the preview of an artifact link with a type does not respect the project, tracker and artifact level permissions. The issue occurs on the artifact view (not reproducible on the artifact modal). Users might get access to information they should not have access to. Only the title, status, assigned to and last update date fields as defined by the semantics are impacted. If those fields have strict permissions (e.g. the title is only visible to a specific user group) those permissions are still enforced. Tuleap Community Edition 14.11.99.28, Tuleap Enterprise Edition 14.10-6, and Tuleap Enterprise Edition 14.11-3 contain a fix for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-285"}, {"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionEndExcluding": "14.10-6", "matchCriteriaId": "02978410-E893-4658-8504-4E109A3E791E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:community:*:*:*", "versionEndExcluding": "14.11.99.28", "matchCriteriaId": "4DB1EBAE-50D3-4D68-B912-589685D5CF2E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "14.11", "versionEndExcluding": "14.11-3", "matchCriteriaId": "F85C9C17-E15B-4042-96B2-0F0F8B7CD6A7"}]}]}], "references": [{"url": "https://github.com/Enalean/tuleap/commit/307c1c8044522a2dcc711062b18a3b3f9059a6c3", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-h637-g4xp-2992", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=307c1c8044522a2dcc711062b18a3b3f9059a6c3", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://tuleap.net/plugins/tracker/?aid=33608", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Enalean/tuleap/commit/307c1c8044522a2dcc711062b18a3b3f9059a6c3"}}