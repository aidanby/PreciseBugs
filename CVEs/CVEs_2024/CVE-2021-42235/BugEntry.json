{"buggy_code": ["<?php\n/*********************************************************************\n    class.staff.php\n\n    Everything about staff.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\ninclude_once(INCLUDE_DIR.'class.ticket.php');\ninclude_once(INCLUDE_DIR.'class.dept.php');\ninclude_once(INCLUDE_DIR.'class.error.php');\ninclude_once(INCLUDE_DIR.'class.team.php');\ninclude_once(INCLUDE_DIR.'class.role.php');\ninclude_once(INCLUDE_DIR.'class.passwd.php');\ninclude_once(INCLUDE_DIR.'class.user.php');\ninclude_once(INCLUDE_DIR.'class.auth.php');\n\nclass Staff extends VerySimpleModel\nimplements AuthenticatedUser, EmailContact, TemplateVariable, Searchable {\n\n    static $meta = array(\n        'table' => STAFF_TABLE,\n        'pk' => array('staff_id'),\n        'joins' => array(\n            'dept' => array(\n                'constraint' => array('dept_id' => 'Dept.id'),\n            ),\n            'role' => array(\n                'constraint' => array('role_id' => 'Role.id'),\n            ),\n            'dept_access' => array(\n                'reverse' => 'StaffDeptAccess.staff',\n            ),\n            'teams' => array(\n                'reverse' => 'TeamMember.staff',\n            ),\n        ),\n    );\n\n    var $authkey;\n    var $departments;\n    var $stats = array();\n    var $_extra;\n    var $passwd_change;\n    var $_roles = null;\n    var $_teams = null;\n    var $_config = null;\n    var $_perm;\n\n    function __onload() {\n\n        // WE have to patch info here to support upgrading from old versions.\n        $time = null;\n        if (isset($this->passwdreset) && $this->passwdreset)\n            $time=strtotime($this->passwdreset);\n        elseif (isset($this->added) && $this->added)\n            $time=strtotime($this->added);\n\n        if ($time)\n            $this->passwd_change = time()-$time; //XXX: check timezone issues.\n    }\n\n    function get($field, $default=false) {\n\n       // Check primary fields\n        try {\n            return parent::get($field, $default);\n        } catch (Exception $e) {}\n\n        // Autoload config if not loaded already\n        if (!isset($this->_config))\n            $this->getConfig();\n\n        if (isset($this->_config[$field]))\n            return $this->_config[$field];\n    }\n\n    function getConfig() {\n\n        if (!isset($this->_config) && $this->getId()) {\n            $_config = new Config('staff.'.$this->getId(),\n                    // Defaults\n                    array(\n                        'default_from_name' => '',\n                        'datetime_format'   => '',\n                        'thread_view_order' => '',\n                        'default_ticket_queue_id' => 0,\n                        'reply_redirect' => 'Ticket',\n                        'img_att_view' => 'download',\n                        'editor_spacing' => 'double',\n                        ));\n            $this->_config = $_config->getInfo();\n        }\n\n        return $this->_config;\n    }\n\n    function __toString() {\n        return (string) $this->getName();\n    }\n\n    function asVar() {\n        return $this->__toString();\n    }\n\n    static function getVarScope() {\n      return array(\n        'dept' => array('class' => 'Dept', 'desc' => __('Department')),\n        'email' => __('Email Address'),\n        'name' => array(\n          'class' => 'PersonsName', 'desc' => __('Agent name'),\n        ),\n        'mobile' => __('Mobile Number'),\n        'phone' => __('Phone Number'),\n        'signature' => __('Signature'),\n        'timezone' => \"Agent's configured timezone\",\n        'username' => 'Access username',\n      );\n    }\n\n    function getVar($tag) {\n        switch ($tag) {\n        case 'mobile':\n            return Format::phone($this->ht['mobile']);\n        case 'phone':\n            return Format::phone($this->ht['phone']);\n        }\n    }\n\n    static function getSearchableFields() {\n        return array(\n            'email' => new TextboxField(array(\n                'label' => __('Email Address'),\n            )),\n        );\n    }\n\n    static function supportsCustomData() {\n        return false;\n    }\n\n    function getHashtable() {\n        $base = $this->ht;\n        unset($base['teams']);\n        unset($base['dept_access']);\n\n        if ($this->getConfig())\n            $base += $this->getConfig();\n\n        return $base;\n    }\n\n    function getInfo() {\n        return $this->getHashtable();\n    }\n\n    // AuthenticatedUser implementation...\n    // TODO: Move to an abstract class that extends Staff\n    function getUserType() {\n        return 'staff';\n    }\n\n    function getAuthBackend() {\n        list($bk, ) = explode(':', $this->getAuthKey());\n\n        // If administering a user other than yourself, fallback to the\n        // agent's declared backend, if any\n        if (!$bk && $this->backend)\n            $bk = $this->backend;\n\n        return StaffAuthenticationBackend::getBackend($bk);\n    }\n\n    function setAuthKey($key) {\n        $this->authkey = $key;\n    }\n\n    function getAuthKey() {\n        return $this->authkey;\n    }\n\n    // logOut the user\n    function logOut() {\n\n        if ($bk = $this->getAuthBackend())\n            return $bk->signOut($this);\n\n        return false;\n    }\n\n    /*compares user password*/\n    function check_passwd($password, $autoupdate=true) {\n\n        /*bcrypt based password match*/\n        if(Passwd::cmp($password, $this->getPasswd()))\n            return true;\n\n        //Fall back to MD5\n        if(!$password || strcmp($this->getPasswd(), MD5($password)))\n            return false;\n\n        //Password is a MD5 hash: rehash it (if enabled) otherwise force passwd change.\n        $this->passwd = Passwd::hash($password);\n\n        if(!$autoupdate || !$this->save())\n            $this->forcePasswdRest();\n\n        return true;\n    }\n\n    function cmp_passwd($password) {\n        return $this->check_passwd($password, false);\n    }\n\n    function hasPassword() {\n        return (bool) $this->passwd;\n    }\n\n    function forcePasswdRest() {\n        $this->change_passwd = 1;\n        return $this->save();\n    }\n\n    /* check if passwd reset is due. */\n    function isPasswdResetDue() {\n        global $cfg;\n        return ($cfg && $cfg->getPasswdResetPeriod()\n                    && $this->passwd_change>($cfg->getPasswdResetPeriod()*30*24*60*60));\n    }\n\n    function setPassword($new, $current=false) {\n        global $thisstaff;\n\n        // Allow the backend to update the password. This is the preferred\n        // method as it allows for integration with password policies and\n        // also allows for remotely updating the password where possible and\n        // supported.\n        if (!($bk = $this->getAuthBackend())\n            || !$bk instanceof AuthBackend\n        ) {\n            // Fallback to osTicket authentication token udpates\n            $bk = new osTicketAuthentication();\n        }\n\n        // And now for the magic\n        if (!$bk->supportsPasswordChange()) {\n            throw new PasswordUpdateFailed(\n                __('Authentication backend does not support password updates'));\n        }\n        // Backend should throw PasswordUpdateFailed directly\n        $rv = $bk->setPassword($this, $new, $current);\n\n        // Successfully updated authentication tokens\n        $this->change_passwd = 0;\n        $this->cancelResetTokens();\n        $this->passwdreset = SqlFunction::NOW();\n\n        // Clean sessions\n        Signal::send('auth.clean', $this, $thisstaff);\n\n        return $rv;\n    }\n\n    function canAccess($something) {\n        if ($something instanceof RestrictedAccess)\n            return $something->checkStaffPerm($this);\n\n        return true;\n    }\n\n    function isPasswdChangeDue() {\n        return $this->isPasswdResetDue();\n    }\n\n    function getRefreshRate() {\n        return $this->auto_refresh_rate;\n    }\n\n    function getPageLimit() {\n        return $this->max_page_size;\n    }\n\n    function getId() {\n        return $this->staff_id;\n    }\n    function getUserId() {\n        return $this->getId();\n    }\n\n    function getEmail() {\n        return $this->email;\n    }\n\n    function getAvatar($size=null) {\n        global $cfg;\n        $source = $cfg->getStaffAvatarSource();\n        $avatar = $source->getAvatar($this);\n        if (isset($size))\n            $avatar->setSize($size);\n        return $avatar;\n    }\n\n    function getUserName() {\n        return $this->username;\n    }\n\n    function getPasswd() {\n        return $this->passwd;\n    }\n\n    function getName() {\n        return new AgentsName(array('first' => $this->ht['firstname'], 'last' => $this->ht['lastname']));\n    }\n\n    function getAvatarAndName() {\n        return $this->getAvatar().Format::htmlchars((string) $this->getName());\n    }\n\n    function getFirstName() {\n        return $this->firstname;\n    }\n\n    function getLastName() {\n        return $this->lastname;\n    }\n\n    function getSignature() {\n        return $this->signature;\n    }\n\n    function getDefaultTicketQueueId() {\n        return $this->default_ticket_queue_id;\n    }\n\n    function getDefaultSignatureType() {\n        return $this->default_signature_type;\n    }\n\n    function getReplyFromNameType() {\n        return $this->default_from_name;\n    }\n\n    function getDefaultPaperSize() {\n        return $this->default_paper_size;\n    }\n\n    function getReplyRedirect() {\n        return $this->reply_redirect;\n    }\n\n    function getImageAttachmentView() {\n        return $this->img_att_view;\n    }\n\n    function editorSpacing() {\n        return $this->editor_spacing;\n    }\n\n    function forcePasswdChange() {\n        return $this->change_passwd;\n    }\n\n    function getDepartments() {\n        // TODO: Cache this in the agent's session as it is unlikely to\n        //       change while logged in\n\n        if (!isset($this->departments)) {\n\n            // Departments the staff is \"allowed\" to access...\n            // based on the group they belong to + user's primary dept + user's managed depts.\n            $sql='SELECT DISTINCT d.id FROM '.STAFF_TABLE.' s '\n                .' LEFT JOIN '.STAFF_DEPT_TABLE.' g ON (s.staff_id=g.staff_id) '\n                .' INNER JOIN '.DEPT_TABLE.' d ON (LOCATE(CONCAT(\"/\", s.dept_id, \"/\"), d.path) OR d.manager_id=s.staff_id OR LOCATE(CONCAT(\"/\", g.dept_id, \"/\"), d.path)) '\n                .' WHERE s.staff_id='.db_input($this->getId());\n            $depts = array();\n            if (($res=db_query($sql)) && db_num_rows($res)) {\n                while(list($id)=db_fetch_row($res))\n                    $depts[] = (int) $id;\n            }\n\n            /* ORM method \u2014\u00a0about 2.0ms slower\n            $q = Q::any(array(\n                'path__contains' => '/'.$this->dept_id.'/',\n                'manager_id' => $this->getId(),\n            ));\n            // Add in extended access\n            foreach ($this->dept_access->depts->values_flat('dept_id') as $row) {\n                // Skip primary dept\n                if ($row[0] == $this->dept_id)\n                    continue;\n                $q->add(new Q(array('path__contains'=>'/'.$row[0].'/')));\n            }\n\n            $dept_ids = Dept::objects()\n                ->filter($q)\n                ->distinct('id')\n                ->values_flat('id');\n\n            foreach ($dept_ids as $row)\n                $depts[] = $row[0];\n            */\n\n            $this->departments = $depts;\n        }\n\n        return $this->departments;\n    }\n\n    function getDepts() {\n        return $this->getDepartments();\n    }\n\n    function getManagedDepartments() {\n\n        return ($depts=Dept::getDepartments(\n                    array('manager' => $this->getId())\n                    ))?array_keys($depts):array();\n    }\n\n    function getDeptId() {\n        return $this->dept_id;\n    }\n\n    function getDept() {\n        return $this->dept;\n    }\n\n    function setDepartmentId($dept_id, $eavesdrop=false) {\n        // Grant access to the current department\n        $old = $this->dept_id;\n        if ($eavesdrop) {\n            $da = new StaffDeptAccess(array(\n                'dept_id' => $old,\n                'role_id' => $this->role_id,\n            ));\n            $da->setAlerts(true);\n            $this->dept_access->add($da);\n        }\n\n        // Drop extended access to new department\n        $this->dept_id = $dept_id;\n        if ($da = $this->dept_access->findFirst(array(\n            'dept_id' => $dept_id))\n        ) {\n            $this->dept_access->remove($da);\n        }\n\n        $this->save();\n    }\n\n    function usePrimaryRoleOnAssignment() {\n        return $this->getExtraAttr('def_assn_role', true);\n    }\n\n    function getLanguage() {\n        return (isset($this->lang)) ? $this->lang : false;\n    }\n\n    function getTimezone() {\n        if (isset($this->timezone))\n            return $this->timezone;\n    }\n\n    function getLocale() {\n        //XXX: isset is required here to avoid possible crash when upgrading\n        // installation where locale column doesn't exist yet.\n        return isset($this->locale) ? $this->locale : 0;\n    }\n\n    function getRoles() {\n        if (!isset($this->_roles)) {\n            $this->_roles = array($this->dept_id => $this->role);\n            foreach($this->dept_access as $da)\n                $this->_roles[$da->dept_id] = $da->role;\n        }\n\n        return $this->_roles;\n    }\n\n    function getRole($dept=null, $assigned=false) {\n\n        if (is_null($dept))\n            return $this->role;\n\n       if (is_numeric($dept))\n          $deptId = $dept;\n       elseif($dept instanceof Dept)\n          $deptId = $dept->getId();\n       else\n          return null;\n\n        $roles = $this->getRoles();\n        if (isset($roles[$deptId]))\n            return $roles[$deptId];\n\n        // Default to primary role.\n        if ($assigned && $this->usePrimaryRoleOnAssignment())\n            return $this->role;\n\n        // Ticket Create & View only access\n        $perms = JSONDataEncoder::encode(array(\n                    Ticket::PERM_CREATE => 1));\n        return new Role(array('permissions' => $perms));\n    }\n\n    function hasPerm($perm, $global=true) {\n        if ($global)\n            return $this->getPermission()->has($perm);\n        if ($this->getRole()->hasPerm($perm))\n            return true;\n        foreach ($this->dept_access as $da)\n            if ($da->role->hasPerm($perm))\n                return true;\n        return false;\n    }\n\n    function canSearchEverything() {\n        return $this->hasPerm(SearchBackend::PERM_EVERYTHING);\n    }\n\n    function canManageTickets() {\n        return $this->hasPerm(Ticket::PERM_DELETE, false)\n                || $this->hasPerm(Ticket::PERM_TRANSFER, false)\n                || $this->hasPerm(Ticket::PERM_ASSIGN, false)\n                || $this->hasPerm(Ticket::PERM_CLOSE, false);\n    }\n\n    function isManager($dept=null) {\n        return (($dept=$dept?:$this->getDept()) && $dept->getManagerId()==$this->getId());\n    }\n\n    function isStaff() {\n        return TRUE;\n    }\n\n    function isActive() {\n        return $this->isactive;\n    }\n\n    function getStatus() {\n        return $this->isActive() ? __('Active') : __('Locked');\n    }\n\n    function isVisible() {\n         return $this->isvisible;\n    }\n\n    function onVacation() {\n        return $this->onvacation;\n    }\n\n    function isAvailable() {\n        return ($this->isActive() && !$this->onVacation());\n    }\n\n    function showAssignedOnly() {\n        return $this->assigned_only;\n    }\n\n    function isAccessLimited() {\n        return $this->showAssignedOnly();\n    }\n\n    function isAdmin() {\n        return $this->isadmin;\n    }\n\n    function isTeamMember($teamId) {\n        return ($teamId && in_array($teamId, $this->getTeams()));\n    }\n\n    function canAccessDept($dept) {\n\n        if (!$dept instanceof Dept)\n            return false;\n\n        return (!$this->isAccessLimited()\n                && in_array($dept->getId(), $this->getDepts()));\n    }\n\n    function getTeams() {\n\n        if (!isset($this->_teams)) {\n            $this->_teams = array();\n            foreach ($this->teams as $team)\n                 $this->_teams[] = (int) $team->team_id;\n        }\n\n        return $this->_teams;\n    }\n\n    function getTicketsVisibility($exclude_archived=false) {\n        // -- Open and assigned to me\n        $assigned = Q::any(array(\n            'staff_id' => $this->getId(),\n        ));\n        $assigned->add(array('thread__referrals__agent__staff_id' => $this->getId()));\n        $childRefAgent = Q::all(new Q(array('child_thread__object_type' => 'C',\n            'child_thread__referrals__agent__staff_id' => $this->getId())));\n        $assigned->add($childRefAgent);\n        // -- Open and assigned to a team of mine\n        if (($teams = array_filter($this->getTeams()))) {\n            $assigned->add(array('team_id__in' => $teams));\n            $assigned->add(array('thread__referrals__team__team_id__in' => $teams));\n            $childRefTeam = Q::all(new Q(array('child_thread__object_type' => 'C',\n                'child_thread__referrals__team__team_id__in' => $teams)));\n            $assigned->add($childRefTeam);\n        }\n        $visibility = Q::any(new Q(array('status__state'=>'open', $assigned)));\n        // -- If access is limited to assigned only, return assigned\n        if ($this->isAccessLimited())\n            return $visibility;\n        // -- Routed to a department of mine\n        if (($depts=$this->getDepts()) && count($depts)) {\n            $in_dept = Q::any(array(\n                'dept_id__in' => $depts,\n                'thread__referrals__dept__id__in' => $depts,\n            ));\n            if ($exclude_archived) {\n                $in_dept = Q::all(array(\n                    'status__state__in' => ['open', 'closed'],\n                    $in_dept,\n                ));\n            }\n            $visibility->add($in_dept);\n            $childRefDept = Q::all(new Q(array('child_thread__object_type' => 'C',\n                'child_thread__referrals__dept__id__in' => $depts)));\n            $visibility->add($childRefDept);\n        }\n        return $visibility;\n    }\n\n    function applyVisibility($query, $exclude_archived=false) {\n        return $query->filter($this->getTicketsVisibility($exclude_archived));\n    }\n\n    /* stats */\n    function resetStats() {\n        $this->stats = array();\n    }\n\n    function getTasksStats() {\n\n        if (!$this->stats['tasks'])\n            $this->stats['tasks'] = Task::getStaffStats($this);\n\n        return  $this->stats['tasks'];\n    }\n\n    function getNumAssignedTasks() {\n        return ($stats=$this->getTasksStats()) ? $stats['assigned'] : 0;\n    }\n\n    function getNumClosedTasks() {\n        return ($stats=$this->getTasksStats()) ? $stats['closed'] : 0;\n    }\n\n    function getExtraAttr($attr=false, $default=null) {\n        if (!isset($this->_extra) && isset($this->extra))\n            $this->_extra = JsonDataParser::decode($this->extra);\n\n        return $attr\n            ? (isset($this->_extra[$attr]) ? $this->_extra[$attr] : $default)\n            : $this->_extra;\n    }\n\n    function setExtraAttr($attr, $value, $commit=true) {\n        $this->getExtraAttr();\n        $this->_extra[$attr] = $value;\n        $this->extra = JsonDataEncoder::encode($this->_extra);\n\n        if ($commit) {\n            $this->save();\n        }\n    }\n\n    function getPermission() {\n        if (!isset($this->_perm)) {\n            $this->_perm = new RolePermission($this->permissions);\n        }\n        return $this->_perm;\n    }\n\n    function getPermissionInfo() {\n        return $this->getPermission()->getInfo();\n    }\n\n    function onLogin($bk) {\n        // Update last apparent language preference\n        $this->setExtraAttr('browser_lang',\n            Internationalization::getCurrentLanguage(),\n            false);\n\n        $this->lastlogin = SqlFunction::NOW();\n        $this->save();\n    }\n\n    //Staff profile update...unfortunately we have to separate it from admin update to avoid potential issues\n    function updateProfile($vars, &$errors) {\n        global $cfg;\n\n        $vars['firstname']=Format::striptags($vars['firstname']);\n        $vars['lastname']=Format::striptags($vars['lastname']);\n\n        if (isset($this->staff_id) && $this->getId() != $vars['id'])\n            $errors['err']=__('Internal error occurred');\n\n        if(!$vars['firstname'])\n            $errors['firstname']=__('First name is required');\n\n        if(!$vars['lastname'])\n            $errors['lastname']=__('Last name is required');\n\n        if(!$vars['email'] || !Validator::is_valid_email($vars['email']))\n            $errors['email']=__('Valid email is required');\n        elseif(Email::getIdByEmail($vars['email']))\n            $errors['email']=__('Already in-use as system email');\n        elseif (($uid=static::getIdByEmail($vars['email']))\n                && (!isset($this->staff_id) || $uid!=$this->getId()))\n            $errors['email']=__('Email already in use by another agent');\n\n        if($vars['phone'] && !Validator::is_phone($vars['phone']))\n            $errors['phone']=__('Valid phone number is required');\n\n        if($vars['mobile'] && !Validator::is_phone($vars['mobile']))\n            $errors['mobile']=__('Valid phone number is required');\n\n        if($vars['default_signature_type']=='mine' && !$vars['signature'])\n            $errors['default_signature_type'] = __(\"You don't have a signature\");\n\n        // Update the user's password if requested\n        if ($vars['passwd1']) {\n            try {\n                $this->setPassword($vars['passwd1'], $vars['cpasswd']);\n            }\n            catch (BadPassword $ex) {\n                $errors['passwd1'] = $ex->getMessage();\n            }\n            catch (PasswordUpdateFailed $ex) {\n                // TODO: Add a warning banner or crash the update\n            }\n        }\n\n        $vars['onvacation'] = isset($vars['onvacation']) ? 1 : 0;\n        $this->firstname = $vars['firstname'];\n        $this->lastname = $vars['lastname'];\n        $this->email = $vars['email'];\n        $this->phone = Format::phone($vars['phone']);\n        $this->phone_ext = $vars['phone_ext'];\n        $this->mobile = Format::phone($vars['mobile']);\n        $this->signature = Format::sanitize($vars['signature']);\n        $this->timezone = $vars['timezone'];\n        $this->locale = $vars['locale'];\n        $this->max_page_size = $vars['max_page_size'];\n        $this->auto_refresh_rate = $vars['auto_refresh_rate'];\n        $this->default_signature_type = $vars['default_signature_type'];\n        $this->default_paper_size = $vars['default_paper_size'];\n        $this->lang = $vars['lang'];\n        $this->onvacation = $vars['onvacation'];\n\n        if (isset($vars['avatar_code']))\n          $this->setExtraAttr('avatar', $vars['avatar_code']);\n\n        if ($errors)\n            return false;\n\n        $_SESSION['::lang'] = null;\n        TextDomain::configureForUser($this);\n\n        // Update the config information\n        $_config = new Config('staff.'.$this->getId());\n        $_config->updateAll(array(\n                    'datetime_format' => $vars['datetime_format'],\n                    'default_from_name' => $vars['default_from_name'],\n                    'thread_view_order' => $vars['thread_view_order'],\n                    'default_ticket_queue_id' => $vars['default_ticket_queue_id'],\n                    'reply_redirect' => ($vars['reply_redirect'] == 'Queue') ? 'Queue' : 'Ticket',\n                    'img_att_view' => ($vars['img_att_view'] == 'inline') ? 'inline' : 'download',\n                    'editor_spacing' => ($vars['editor_spacing'] == 'double') ? 'double' : 'single'\n                    )\n                );\n        $this->_config = $_config->getInfo();\n\n        return $this->save();\n    }\n\n    function updateTeams($membership, &$errors) {\n        $dropped = array();\n        foreach ($this->teams as $TM)\n            $dropped[$TM->team_id] = 1;\n\n        reset($membership);\n        while(list(, list($team_id, $alerts)) = each($membership)) {\n            $member = $this->teams->findFirst(array('team_id' => $team_id));\n            if (!$member) {\n                $this->teams->add($member = new TeamMember(array(\n                    'team_id' => $team_id,\n                )));\n            }\n            $member->setAlerts($alerts);\n            if (!$errors)\n                $member->save();\n            unset($dropped[$member->team_id]);\n        }\n        if (!$errors && $dropped) {\n            $member = $this->teams\n                ->filter(array('team_id__in' => array_keys($dropped)))\n                ->delete();\n            $this->teams->reset();\n        }\n        return true;\n    }\n\n    function delete() {\n        global $thisstaff;\n\n        if (!$thisstaff || $this->getId() == $thisstaff->getId())\n            return false;\n\n        if (!parent::delete())\n            return false;\n\n        $type = array('type' => 'deleted');\n        Signal::send('object.deleted', $this, $type);\n\n        // DO SOME HOUSE CLEANING\n        //Move remove any ticket assignments...TODO: send alert to Dept. manager?\n        Ticket::objects()\n            ->filter(array('staff_id' => $this->getId()))\n            ->update(array('staff_id' => 0));\n\n        //Update the poster and clear staff_id on ticket thread table.\n        ThreadEntry::objects()\n            ->filter(array('staff_id' => $this->getId()))\n            ->update(array(\n                'staff_id' => 0,\n                'poster' => $this->getName()->getOriginal(),\n            ));\n\n        // Cleanup Team membership table.\n        TeamMember::objects()\n            ->filter(array('staff_id'=>$this->getId()))\n            ->delete();\n\n        // Cleanup staff dept access\n        StaffDeptAccess::objects()\n            ->filter(array('staff_id'=>$this->getId()))\n            ->delete();\n\n        return true;\n    }\n\n    /**** Static functions ********/\n    static function lookup($var) {\n        if (is_array($var))\n            return parent::lookup($var);\n        elseif (is_numeric($var))\n            return parent::lookup(array('staff_id'=>$var));\n        elseif (Validator::is_email($var))\n            return parent::lookup(array('email'=>$var));\n        elseif (is_string($var))\n            return parent::lookup(array('username'=>$var));\n        else\n            return null;\n    }\n\n    static function getStaffMembers($criteria=array()) {\n        global $cfg;\n\n        $members = static::objects();\n\n        if (isset($criteria['available'])) {\n            $members = $members->filter(array(\n                'onvacation' => 0,\n                'isactive' => 1,\n            ));\n        }\n\n        $members = self::nsort($members);\n\n        $users=array();\n        foreach ($members as $M) {\n            $users[$M->getId()] = $M->getName();\n        }\n\n        return $users;\n    }\n\n    static function getAvailableStaffMembers() {\n        return self::getStaffMembers(array('available'=>true));\n    }\n\n    static function getsortby($path='', $format=null) {\n        global $cfg;\n\n        $format = $format ?: $cfg->getAgentNameFormat();\n        switch ($format) {\n        case 'last':\n        case 'lastfirst':\n        case 'legal':\n            $fields = array(\"{$path}lastname\", \"{$path}firstname\");\n            break;\n        default:\n            $fields = array(\"${path}firstname\", \"${path}lastname\");\n        }\n\n        return $fields;\n    }\n\n    static function nsort(QuerySet $qs, $path='', $format=null) {\n        $fields = self::getsortby($path, $format);\n        $qs->order_by($fields);\n        return $qs;\n    }\n\n    static function getIdByUsername($username) {\n        $row = static::objects()->filter(array('username' => $username))\n            ->values_flat('staff_id')->first();\n        return $row ? $row[0] : 0;\n    }\n\n    static function getIdByEmail($email) {\n        $row = static::objects()->filter(array('email' => $email))\n            ->values_flat('staff_id')->first();\n        return $row ? $row[0] : 0;\n    }\n\n\n    static function create($vars=false) {\n        $staff = new static($vars);\n        $staff->created = SqlFunction::NOW();\n        return $staff;\n    }\n\n    function cancelResetTokens() {\n        // TODO: Drop password-reset tokens from the config table for\n        //       this user id\n        $sql = 'DELETE FROM '.CONFIG_TABLE.' WHERE `namespace`=\"pwreset\"\n            AND `value`='.db_input($this->getId());\n        db_query($sql, false);\n        unset($_SESSION['_staff']['reset-token']);\n    }\n\n    function sendResetEmail($template='pwreset-staff', $log=true) {\n        global $ost, $cfg;\n\n        $content = Page::lookupByType($template);\n        $token = Misc::randCode(48); // 290-bits\n\n        if (!$content)\n            return new BaseError(/* @trans */ 'Unable to retrieve password reset email template');\n\n        $vars = array(\n            'url' => $ost->getConfig()->getBaseUrl(),\n            'token' => $token,\n            'staff' => $this,\n            'recipient' => $this,\n            'reset_link' => sprintf(\n                \"%s/scp/pwreset.php?token=%s\",\n                $ost->getConfig()->getBaseUrl(),\n                $token),\n        );\n        $vars['link'] = &$vars['reset_link'];\n\n        if (!($email = $cfg->getAlertEmail()))\n            $email = $cfg->getDefaultEmail();\n\n        $info = array('email' => $email, 'vars' => &$vars, 'log'=>$log);\n        Signal::send('auth.pwreset.email', $this, $info);\n\n        if ($info['log'])\n            $ost->logWarning(_S('Agent Password Reset'), sprintf(\n             _S('Password reset was attempted for agent: %1$s<br><br>\n                Requested-User-Id: %2$s<br>\n                Source-Ip: %3$s<br>\n                Email-Sent-To: %4$s<br>\n                Email-Sent-Via: %5$s'),\n                $this->getName(),\n                $_POST['userid'],\n                $_SERVER['REMOTE_ADDR'],\n                $this->getEmail(),\n                $email->getEmail()\n            ), false);\n\n        $lang = $this->lang ?: $this->getExtraAttr('browser_lang');\n        $msg = $ost->replaceTemplateVariables(array(\n            'subj' => $content->getLocalName($lang),\n            'body' => $content->getLocalBody($lang),\n        ), $vars);\n\n        $_config = new Config('pwreset');\n        $_config->set($vars['token'], $this->getId());\n\n        $email->send($this->getEmail(), Format::striptags($msg['subj']),\n            $msg['body']);\n    }\n\n    static function importCsv($stream, $defaults=array(), $callback=false) {\n        require_once INCLUDE_DIR . 'class.import.php';\n\n        $importer = new CsvImporter($stream);\n        $imported = 0;\n        $fields = array(\n            'firstname' => new TextboxField(array(\n                'label' => __('First Name'),\n            )),\n            'lastname' => new TextboxField(array(\n                'label' => __('Last Name'),\n            )),\n            'email' => new TextboxField(array(\n                'label' => __('Email Address'),\n                'configuration' => array(\n                    'validator' => 'email',\n                ),\n            )),\n            'username' => new TextboxField(array(\n                'label' => __('Username'),\n                'validators' => function($self, $value) {\n                    if (!Validator::is_username($value))\n                        $self->addError('Not a valid username');\n                },\n            )),\n        );\n        $form = new SimpleForm($fields);\n\n        try {\n            db_autocommit(false);\n            $errors = array();\n            $records = $importer->importCsv($form->getFields(), $defaults);\n            foreach ($records as $data) {\n                if (!isset($data['email']) || !isset($data['username']))\n                    throw new ImportError('Both `username` and `email` fields are required');\n\n                if ($agent = self::lookup(array('username' => $data['username']))) {\n                    // TODO: Update the user\n                }\n                elseif ($agent = self::create($data, $errors)) {\n                    if ($callback)\n                        $callback($agent, $data);\n                    $agent->save();\n                }\n                else {\n                    throw new ImportError(sprintf(__('Unable to import (%s): %s'),\n                        Format::htmlchars($data['username']),\n                        print_r(Format::htmlchars($errors), true)\n                    ));\n                }\n                $imported++;\n            }\n            db_autocommit(true);\n        }\n        catch (Exception $ex) {\n            db_rollback();\n            return $ex->getMessage();\n        }\n        return $imported;\n    }\n\n    function save($refetch=false) {\n        if ($this->dirty)\n            $this->updated = SqlFunction::NOW();\n        return parent::save($refetch || $this->dirty);\n    }\n\n    function update($vars, &$errors) {\n        $vars['username']=Format::striptags($vars['username']);\n        $vars['firstname']=Format::striptags($vars['firstname']);\n        $vars['lastname']=Format::striptags($vars['lastname']);\n\n        if (isset($this->staff_id) && $this->getId() != $vars['id'])\n            $errors['err']=__('Internal error occurred');\n\n        if(!$vars['firstname'])\n            $errors['firstname']=__('First name required');\n        if(!$vars['lastname'])\n            $errors['lastname']=__('Last name required');\n\n        $error = '';\n        if(!$vars['username'] || !Validator::is_username($vars['username'], $error))\n            $errors['username']=($error) ? $error : __('Username is required');\n        elseif (($uid=static::getIdByUsername($vars['username']))\n                && (!isset($this->staff_id) || $uid!=$this->getId()))\n            $errors['username']=__('Username already in use');\n\n        if(!$vars['email'] || !Validator::is_valid_email($vars['email']))\n            $errors['email']=__('Valid email is required');\n        elseif(Email::getIdByEmail($vars['email']))\n            $errors['email']=__('Already in use system email');\n        elseif (($uid=static::getIdByEmail($vars['email']))\n                && (!isset($this->staff_id) || $uid!=$this->getId()))\n            $errors['email']=__('Email already in use by another agent');\n\n        if($vars['phone'] && !Validator::is_phone($vars['phone']))\n            $errors['phone']=__('Valid phone number is required');\n\n        if($vars['mobile'] && !Validator::is_phone($vars['mobile']))\n            $errors['mobile']=__('Valid phone number is required');\n\n        if(!$vars['dept_id'])\n            $errors['dept_id']=__('Department is required');\n        if(!$vars['role_id'])\n            $errors['role_id']=__('Role for primary department is required');\n\n        $dept = Dept::lookup($vars['dept_id']);\n        if($dept && !$dept->isActive())\n          $errors['dept_id'] = sprintf(__('%s selected must be active'), __('Department'));\n\n        // Ensure we will still have an administrator with access\n        if ($vars['isadmin'] !== '1' || $vars['islocked'] === '1') {\n            $sql = 'select count(*), max(staff_id) from '.STAFF_TABLE\n                .' WHERE isadmin=1 and isactive=1';\n            if (($res = db_query($sql))\n                    && (list($count, $sid) = db_fetch_row($res))) {\n                if ($count == 1 && $sid == $uid) {\n                    $errors['isadmin'] = __(\n                        'Cowardly refusing to remove or lock out the only active administrator'\n                    );\n                }\n            }\n        }\n\n        // Update the local permissions\n        $this->updatePerms($vars['perms'], $errors);\n\n        //checkboxes\n        $vars['isadmin'] = isset($vars['isadmin']) ? 1 : 0;\n        $vars['islocked'] = isset($vars['islocked']) ? 0 : 1;\n        $vars['isvisible'] = isset($vars['isvisible']) ? 1 : 0;\n        $vars['onvacation'] = isset($vars['onvacation']) ? 1 : 0;\n        $vars['assigned_only'] = isset($vars['assigned_only']) ? 1 : 0;\n\n        $this->isadmin = $vars['isadmin'];\n        $this->isactive = $vars['islocked'];\n        $this->isvisible = $vars['isvisible'];\n        $this->onvacation = $vars['onvacation'];\n        $this->assigned_only = $vars['assigned_only'];\n        $this->role_id = $vars['role_id'];\n        $this->username = $vars['username'];\n        $this->firstname = $vars['firstname'];\n        $this->lastname = $vars['lastname'];\n        $this->email = $vars['email'];\n        $this->backend = $vars['backend'];\n        $this->phone = Format::phone($vars['phone']);\n        $this->phone_ext = $vars['phone_ext'];\n        $this->mobile = Format::phone($vars['mobile']);\n        $this->notes = Format::sanitize($vars['notes']);\n\n        // Set staff password if exists\n        if (!$vars['welcome_email'] && $vars['passwd1']) {\n            $this->setPassword($vars['passwd1'], null);\n            $this->change_passwd = $vars['change_passwd'] ? 1 : 0;\n        }\n\n        if ($errors)\n            return false;\n\n        if ($this->save()) {\n            // Update some things for ::updateAccess to inspect\n            $this->setDepartmentId($vars['dept_id']);\n\n            // Format access update as [array(dept_id, role_id, alerts?)]\n            $access = array();\n            if (isset($vars['dept_access'])) {\n                foreach (@$vars['dept_access'] as $dept_id) {\n                    $access[] = array($dept_id, $vars['dept_access_role'][$dept_id],\n                        @$vars['dept_access_alerts'][$dept_id]);\n                }\n            }\n            $this->updateAccess($access, $errors);\n            $this->setExtraAttr('def_assn_role',\n                isset($vars['assign_use_pri_role']), true);\n\n            // Format team membership as [array(team_id, alerts?)]\n            $teams = array();\n            if (isset($vars['teams'])) {\n                foreach (@$vars['teams'] as $team_id) {\n                    $teams[] = array($team_id, @$vars['team_alerts'][$team_id]);\n                }\n            }\n            $this->updateTeams($teams, $errors);\n\n            if ($vars['welcome_email'])\n                $this->sendResetEmail('registration-staff', false);\n            return true;\n        }\n\n        if (isset($this->staff_id)) {\n            $errors['err']=sprintf(__('Unable to update %s.'), __('this agent'))\n               .' '.__('Internal error occurred');\n        } else {\n            $errors['err']=sprintf(__('Unable to create %s.'), __('this agent'))\n               .' '.__('Internal error occurred');\n        }\n        return false;\n    }\n\n    /**\n     * Parameters:\n     * $access - (<array($dept_id, $role_id, $alerts)>) a list of the complete,\n     *      extended access for this agent. Any the agent currently has, which\n     *      is not listed will be removed.\n     * $errors - (<array>) list of error messages from the process, which will\n     *      be indexed by the dept_id number.\n     */\n    function updateAccess($access, &$errors) {\n        reset($access);\n        $dropped = array();\n        foreach ($this->dept_access as $DA)\n            $dropped[$DA->dept_id] = 1;\n        while (list(, list($dept_id, $role_id, $alerts)) = each($access)) {\n            unset($dropped[$dept_id]);\n            if (!$role_id || !Role::lookup($role_id))\n                $errors['dept_access'][$dept_id] = __('Select a valid role');\n            if (!$dept_id || !($dept=Dept::lookup($dept_id)))\n                $errors['dept_access'][$dept_id] = __('Select a valid department');\n            if ($dept_id == $this->getDeptId())\n                $errors['dept_access'][$dept_id] = sprintf(__('Agent already has access to %s'), __('this department'));\n            $da = $this->dept_access->findFirst(array('dept_id' => $dept_id));\n            if (!isset($da)) {\n                $da = new StaffDeptAccess(array(\n                    'dept_id' => $dept_id, 'role_id' => $role_id\n                ));\n                $this->dept_access->add($da);\n                $type = array('type' => 'edited',\n                              'key' => sprintf('%s Department Access Added', $dept->getName()));\n                Signal::send('object.edited', $this, $type);\n            }\n            else {\n                $da->role_id = $role_id;\n            }\n            $da->setAlerts($alerts);\n            if (!$errors)\n                $da->save();\n        }\n        if (!$errors && $dropped) {\n            $this->dept_access\n                ->filter(array('dept_id__in' => array_keys($dropped)))\n                ->delete();\n            $this->dept_access->reset();\n            foreach (array_keys($dropped) as $dept_id) {\n                $deptName = Dept::getNameById($dept_id);\n                $type = array('type' => 'edited',\n                              'key' => sprintf('%s Department Access Removed', $deptName));\n                Signal::send('object.edited', $this, $type);\n            }\n        }\n        return !$errors;\n    }\n\n    function updatePerms($vars, &$errors=array()) {\n        if (!$vars) {\n            $this->permissions = '';\n            return;\n        }\n        $permissions = $this->getPermission();\n        foreach ($vars as $k => $val) {\n             if (!$permissions->exists($val)) {\n                 $type = array('type' => 'edited', 'key' => $val);\n                 Signal::send('object.edited', $this, $type);\n             }\n         }\n\n        foreach (RolePermission::allPermissions() as $g => $perms) {\n            foreach ($perms as $k => $v) {\n                if (!in_array($k, $vars) && $permissions->exists($k)) {\n                     $type = array('type' => 'edited', 'key' => $k);\n                     Signal::send('object.edited', $this, $type);\n                 }\n                $permissions->set($k, in_array($k, $vars) ? 1 : 0);\n            }\n        }\n        $this->permissions = $permissions->toJson();\n        return true;\n    }\n\n    static function export($criteria=null, $filename='') {\n        include_once(INCLUDE_DIR.'class.error.php');\n\n        $agents = Staff::objects();\n        // Sort based on name formating\n        $agents = self::nsort($agents);\n        Export::agents($agents, $filename);\n    }\n\n}\n\ninterface RestrictedAccess {\n    function checkStaffPerm($staff);\n}\n\nclass StaffDeptAccess extends VerySimpleModel {\n    static $meta = array(\n        'table' => STAFF_DEPT_TABLE,\n        'pk' => array('staff_id', 'dept_id'),\n        'select_related' => array('dept', 'role'),\n        'joins' => array(\n            'dept' => array(\n                'constraint' => array('dept_id' => 'Dept.id'),\n            ),\n            'staff' => array(\n                'constraint' => array('staff_id' => 'Staff.staff_id'),\n            ),\n            'role' => array(\n                'constraint' => array('role_id' => 'Role.id'),\n            ),\n        ),\n    );\n\n    const FLAG_ALERTS =     0x0001;\n\n    function isAlertsEnabled() {\n        return $this->flags & self::FLAG_ALERTS != 0;\n    }\n\n    function setFlag($flag, $value) {\n        if ($value)\n            $this->flags |= $flag;\n        else\n            $this->flags &= ~$flag;\n    }\n\n    function setAlerts($value) {\n        $this->setFlag(self::FLAG_ALERTS, $value);\n    }\n}\n\n/**\n * This form is used to administratively change the password. The\n * ChangePasswordForm is used for an agent to change their own password.\n */\nclass PasswordResetForm\nextends AbstractForm {\n    function buildFields() {\n        return array(\n            'welcome_email' => new BooleanField(array(\n                'default' => true,\n                'configuration' => array(\n                    'desc' => __('Send the agent a password reset email'),\n                ),\n            )),\n            'passwd1' => new PasswordField(array(\n                'placeholder' => __('New Password'),\n                'required' => true,\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false)),\n                    VisibilityConstraint::HIDDEN\n                ),\n            )),\n            'passwd2' => new PasswordField(array(\n                'placeholder' => __('Confirm Password'),\n                'required' => true,\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false)),\n                    VisibilityConstraint::HIDDEN\n                ),\n            )),\n            'change_passwd' => new BooleanField(array(\n                'default' => true,\n                'configuration' => array(\n                    'desc' => __('Require password change at next login'),\n                    'classes' => 'form footer',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false)),\n                    VisibilityConstraint::HIDDEN\n                ),\n            )),\n        );\n    }\n\n    function validate($clean) {\n        if ($clean['passwd1'] != $clean['passwd2'])\n            $this->getField('passwd1')->addError(__('Passwords do not match'));\n    }\n}\n\nclass PasswordChangeForm\nextends AbstractForm {\n    function buildFields() {\n        $fields = array(\n            'current' => new PasswordField(array(\n                'placeholder' => __('Current Password'),\n                'required' => true,\n                'configuration' => array(\n                    'autofocus' => true,\n                ),\n            )),\n            'passwd1' => new PasswordField(array(\n                'label' => __('Enter a new password'),\n                'placeholder' => __('New Password'),\n                'required' => true,\n            )),\n            'passwd2' => new PasswordField(array(\n                'placeholder' => __('Confirm Password'),\n                'required' => true,\n            )),\n        );\n\n        // When using the password reset system, the current password is not\n        // required for agents.\n        if (isset($_SESSION['_staff']['reset-token'])) {\n            unset($fields['current']);\n            $fields['passwd1']->set('configuration', array('autofocus' => true));\n        }\n        else {\n            $fields['passwd1']->set('layout',\n                new GridFluidCell(12, array('style' => 'padding-top: 20px'))\n            );\n        }\n        return $fields;\n    }\n\n    function getInstructions() {\n        return __('Confirm your current password and enter a new password to continue');\n    }\n\n    function validate($clean) {\n        if ($clean['passwd1'] != $clean['passwd2'])\n            $this->getField('passwd1')->addError(__('Passwords do not match'));\n    }\n}\n\nclass ResetAgentPermissionsForm\nextends AbstractForm {\n    function buildFields() {\n        $permissions = array();\n        foreach (RolePermission::allPermissions() as $g => $perms) {\n            foreach ($perms as $k => $v) {\n                if (!$v['primary'])\n                    continue;\n                $permissions[$g][$k] = \"{$v['title']} \u2014 {$v['desc']}\";\n            }\n        }\n        return array(\n            'clone' => new ChoiceField(array(\n                'default' => 0,\n                'choices' =>\n                    array(0 => '\u2014 '.__('Clone an existing agent').' \u2014')\n                    + Staff::getStaffMembers(),\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n            )),\n            'perms' => new ChoiceField(array(\n                'choices' => $permissions,\n                'widget' => 'TabbedBoxChoicesWidget',\n                'configuration' => array(\n                    'multiple' => true,\n                ),\n            )),\n        );\n    }\n\n    function getClean($validate = true) {\n        $clean = parent::getClean();\n        // Index permissions as ['ticket.edit' => 1]\n        $clean['perms'] = array_keys($clean['perms']);\n        return $clean;\n    }\n\n    function render($staff=true, $title=false, $options=array()) {\n        return parent::render($staff, $title, $options + array('template' => 'dynamic-form-simple.tmpl.php'));\n    }\n}\n\nclass ChangeDepartmentForm\nextends AbstractForm {\n    function buildFields() {\n        return array(\n            'dept_id' => new ChoiceField(array(\n                'default' => 0,\n                'required' => true,\n                'label' => __('Primary Department'),\n                'choices' =>\n                    array(0 => '\u2014 '.__('Primary Department').' \u2014')\n                    + Dept::getDepartments(),\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n            )),\n            'role_id' => new ChoiceField(array(\n                'default' => 0,\n                'required' => true,\n                'label' => __('Primary Role'),\n                'choices' =>\n                    array(0 => '\u2014 '.__('Corresponding Role').' \u2014')\n                    + Role::getRoles(),\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n            )),\n            'eavesdrop' => new BooleanField(array(\n                'configuration' => array(\n                    'desc' => __('Maintain access to current primary department'),\n                    'classes' => 'form footer',\n                ),\n            )),\n            // alerts?\n        );\n    }\n\n    function getInstructions() {\n        return __('Change the primary department and primary role of the selected agents');\n    }\n\n    function getClean($validate = true) {\n        $clean = parent::getClean();\n        $clean['eavesdrop'] = $clean['eavesdrop'] ? 1 : 0;\n        return $clean;\n    }\n\n    function render($staff=true, $title=false, $options=array()) {\n        return parent::render($staff, $title, $options + array('template' => 'dynamic-form-simple.tmpl.php'));\n    }\n}\n\nclass StaffQuickAddForm\nextends AbstractForm {\n    static $layout = 'GridFormLayout';\n\n    function buildFields() {\n        global $cfg;\n\n        return array(\n            'firstname' => new TextboxField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __(\"First Name\"),\n                    'autofocus' => true,\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            'lastname' => new TextboxField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __(\"Last Name\"),\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            'email' => new TextboxField(array(\n                'required' => true,\n                'configuration' => array(\n                    'validator' => 'email',\n                    'placeholder' => __('Email Address \u2014 e.g. me@mycompany.com'),\n                    'length' => 128,\n                    'autocomplete' => 'email',\n                  ),\n            )),\n            'dept_id' => new ChoiceField(array(\n                'label' => __('Department'),\n                'required' => true,\n                'choices' => Dept::getDepartments(),\n                'default' => $cfg->getDefaultDeptId(),\n                'layout' => new GridFluidCell(6),\n            )),\n            'role_id' => new ChoiceField(array(\n                'label' => __('Primary Role'),\n                'required' => true,\n                'choices' =>\n                    array(0 => __('Select Role'))\n                    + Role::getRoles(),\n                'layout' => new GridFluidCell(6),\n            )),\n            'isadmin' => new BooleanField(array(\n                'label' => __('Account Type'),\n                'configuration' => array(\n                    'desc' => __('Agent has access to the admin panel'),\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            'welcome_email' => new BooleanField(array(\n                'configuration' => array(\n                    'desc' => __('Send a welcome email with login information'),\n                ),\n                'default' => true,\n                'layout' => new GridFluidCell(12, array('style' => 'padding-top: 50px')),\n            )),\n            'passwd1' => new PasswordField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __(\"Temporary Password\"),\n                    'autocomplete' => 'new-password',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false))\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            'passwd2' => new PasswordField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __(\"Confirm Password\"),\n                    'autocomplete' => 'new-password',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false))\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            // TODO: Add role_id drop-down\n        );\n    }\n\n    function getClean($validate = true) {\n        $clean = parent::getClean();\n        list($clean['username'],) = preg_split('/[^\\w.-]/u', $clean['email'], 2);\n        if (mb_strlen($clean['username']) < 3 || Staff::lookup($clean['username']))\n            $clean['username'] = mb_strtolower($clean['firstname']);\n\n\n        // Inherit default dept's role as primary role\n        $clean['assign_use_pri_role'] = true;\n\n        // Default permissions\n        $clean['perms'] = array(\n            User::PERM_CREATE,\n            User::PERM_EDIT,\n            User::PERM_DELETE,\n            User::PERM_MANAGE,\n            User::PERM_DIRECTORY,\n            Organization::PERM_CREATE,\n            Organization::PERM_EDIT,\n            Organization::PERM_DELETE,\n            FAQ::PERM_MANAGE,\n        );\n        return $clean;\n    }\n}\n", "<?php\n/*********************************************************************\n    class.user.php\n\n    External end-user identification for osTicket\n\n    Peter Rotich <peter@osticket.com>\n    Jared Hancock <jared@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR . 'class.orm.php';\nrequire_once INCLUDE_DIR . 'class.util.php';\nrequire_once INCLUDE_DIR . 'class.variable.php';\nrequire_once INCLUDE_DIR . 'class.search.php';\nrequire_once INCLUDE_DIR . 'class.organization.php';\n\nclass UserEmailModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_EMAIL_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'user' => array(\n                'constraint' => array('user_id' => 'UserModel.id')\n            )\n        )\n    );\n\n    function __toString() {\n        return (string) $this->address;\n    }\n\n    static function getIdByEmail($email) {\n        $row = UserEmailModel::objects()\n            ->filter(array('address'=>$email))\n            ->values_flat('user_id')\n            ->first();\n\n        return $row ? $row[0] : 0;\n    }\n}\n\nclass UserModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_TABLE,\n        'pk' => array('id'),\n        'select_related' => array('default_email', 'org', 'account'),\n        'joins' => array(\n            'emails' => array(\n                'reverse' => 'UserEmailModel.user',\n            ),\n            'tickets' => array(\n                'null' => true,\n                'reverse' => 'Ticket.user',\n            ),\n            'account' => array(\n                'list' => false,\n                'null' => true,\n                'reverse' => 'ClientAccount.user',\n            ),\n            'org' => array(\n                'null' => true,\n                'constraint' => array('org_id' => 'Organization.id')\n            ),\n            'default_email' => array(\n                'null' => true,\n                'constraint' => array('default_email_id' => 'UserEmailModel.id')\n            ),\n            'cdata' => array(\n                'constraint' => array('id' => 'UserCdata.user_id'),\n                'null' => true,\n            ),\n            'entries' => array(\n                'constraint' => array(\n                    'id' => 'DynamicFormEntry.object_id',\n                    \"'U'\" => 'DynamicFormEntry.object_type',\n                ),\n                'list' => true,\n            ),\n        )\n    );\n\n    const PRIMARY_ORG_CONTACT   = 0x0001;\n\n    const PERM_CREATE =     'user.create';\n    const PERM_EDIT =       'user.edit';\n    const PERM_DELETE =     'user.delete';\n    const PERM_MANAGE =     'user.manage';\n    const PERM_DIRECTORY =  'user.dir';\n\n    static protected $perms = array(\n        self::PERM_CREATE => array(\n            'title' => /* @trans */ 'Create',\n            'desc' => /* @trans */ 'Ability to add new users',\n            'primary' => true,\n        ),\n        self::PERM_EDIT => array(\n            'title' => /* @trans */ 'Edit',\n            'desc' => /* @trans */ 'Ability to manage user information',\n            'primary' => true,\n        ),\n        self::PERM_DELETE => array(\n            'title' => /* @trans */ 'Delete',\n            'desc' => /* @trans */ 'Ability to delete users',\n            'primary' => true,\n        ),\n        self::PERM_MANAGE => array(\n            'title' => /* @trans */ 'Manage Account',\n            'desc' => /* @trans */ 'Ability to manage active user accounts',\n            'primary' => true,\n        ),\n        self::PERM_DIRECTORY => array(\n            'title' => /* @trans */ 'User Directory',\n            'desc' => /* @trans */ 'Ability to access the user directory',\n            'primary' => true,\n        ),\n    );\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getDefaultEmailAddress() {\n        return $this->getDefaultEmail()->address;\n    }\n\n    function getDefaultEmail() {\n        return $this->default_email;\n    }\n\n    function hasAccount() {\n        return !is_null($this->account);\n    }\n    function getAccount() {\n        return $this->account;\n    }\n\n    function getOrgId() {\n         return $this->get('org_id');\n    }\n\n    function getOrganization() {\n        return $this->org;\n    }\n\n    function setOrganization($org, $save=true) {\n\n        $this->set('org', $org);\n\n        if ($save)\n            $this->save();\n\n        return true;\n    }\n\n    public function setFlag($flag, $val) {\n        if ($val)\n            $this->status |= $flag;\n        else\n            $this->status &= ~$flag;\n    }\n\n    protected function hasStatus($flag) {\n        return $this->get('status') & $flag !== 0;\n    }\n\n    protected function clearStatus($flag) {\n        return $this->set('status', $this->get('status') & ~$flag);\n    }\n\n    protected function setStatus($flag) {\n        return $this->set('status', $this->get('status') | $flag);\n    }\n\n    function isPrimaryContact() {\n        return $this->hasStatus(User::PRIMARY_ORG_CONTACT);\n    }\n\n    function setPrimaryContact($flag) {\n        if ($flag)\n            $this->setStatus(User::PRIMARY_ORG_CONTACT);\n        else\n            $this->clearStatus(User::PRIMARY_ORG_CONTACT);\n    }\n\n    static function getPermissions() {\n        return self::$perms;\n    }\n}\ninclude_once INCLUDE_DIR.'class.role.php';\nRolePermission::register(/* @trans */ 'Users', UserModel::getPermissions());\n\nclass UserCdata extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_CDATA_TABLE,\n        'pk' => array('user_id'),\n        'joins' => array(\n            'user' => array(\n                'constraint' => array('user_id' => 'UserModel.id'),\n            ),\n        ),\n    );\n}\n\nclass User extends UserModel\nimplements TemplateVariable, Searchable {\n\n    var $_email;\n    var $_entries;\n    var $_forms;\n    var $_queue;\n\n\n\n    static function fromVars($vars, $create=true, $update=false) {\n        // Try and lookup by email address\n        $user = static::lookupByEmail($vars['email']);\n        if (!$user && $create) {\n            $name = $vars['name'];\n            if (is_array($name))\n                $name = implode(', ', $name);\n            elseif (!$name)\n                list($name) = explode('@', $vars['email'], 2);\n\n            $user = new User(array(\n                'name' => Format::htmldecode(Format::sanitize($name, false)),\n                'created' => new SqlFunction('NOW'),\n                'updated' => new SqlFunction('NOW'),\n                //XXX: Do plain create once the cause\n                // of the detached emails is fixed.\n                'default_email' => UserEmail::ensure($vars['email'])\n            ));\n            // Is there an organization registered for this domain\n            list($mailbox, $domain) = explode('@', $vars['email'], 2);\n            if (isset($vars['org_id']))\n                $user->set('org_id', $vars['org_id']);\n            elseif ($org = Organization::forDomain($domain))\n                $user->setOrganization($org, false);\n\n            try {\n                $user->save(true);\n                $user->emails->add($user->default_email);\n                // Attach initial custom fields\n                $user->addDynamicData($vars);\n            }\n            catch (OrmException $e) {\n                return null;\n            }\n            $type = array('type' => 'created');\n            Signal::send('object.created', $user, $type);\n            Signal::send('user.created', $user);\n        }\n        elseif ($update) {\n            $errors = array();\n            $user->updateInfo($vars, $errors, true);\n        }\n\n        return $user;\n    }\n\n    static function fromForm($form, $create=true) {\n        global $thisstaff;\n\n        if(!$form) return null;\n\n        //Validate the form\n        $valid = true;\n        $filter = function($f) use ($thisstaff) {\n            return !isset($thisstaff) || $f->isRequiredForStaff() || $f->isVisibleToStaff();\n        };\n        if (!$form->isValid($filter))\n            $valid  = false;\n\n        //Make sure the email is not in-use\n        if (($field=$form->getField('email'))\n                && $field->getClean()\n                && User::lookup(array('emails__address'=>$field->getClean()))) {\n            $field->addError(__('Email is assigned to another user'));\n            $valid = false;\n        }\n\n        return $valid ? self::fromVars($form->getClean(), $create) : null;\n    }\n\n    function getEmail() {\n\n        if (!isset($this->_email))\n            $this->_email = new EmailAddress(sprintf('\"%s\" <%s>',\n                    addcslashes($this->getName(), '\"'),\n                    $this->default_email->address));\n\n        return $this->_email;\n    }\n\n    function getAvatar($size=null) {\n        global $cfg;\n        $source = $cfg->getClientAvatarSource();\n        $avatar = $source->getAvatar($this);\n        if (isset($size))\n            $avatar->setSize($size);\n        return $avatar;\n    }\n\n    function getFullName() {\n        return $this->name;\n    }\n\n    function getPhoneNumber() {\n        foreach ($this->getDynamicData() as $e)\n            if ($a = $e->getAnswer('phone'))\n                return $a;\n    }\n\n    function getName() {\n        if (!$this->name)\n            list($name) = explode('@', $this->getDefaultEmailAddress(), 2);\n        else\n            $name = $this->name;\n        return new UsersName($name);\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getTimezone() {\n        global $cfg;\n\n        if (($acct = $this->getAccount()) && ($tz = $acct->getTimezone())) {\n            return $tz;\n        }\n        return $cfg->getDefaultTimezone();\n    }\n\n    function addForm($form, $sort=1, $data=null) {\n        $entry = $form->instanciate($sort, $data);\n        $entry->set('object_type', 'U');\n        $entry->set('object_id', $this->getId());\n        $entry->save();\n        return $entry;\n    }\n\n    function getLanguage($flags=false) {\n        if ($acct = $this->getAccount())\n            return $acct->getLanguage($flags);\n    }\n\n    function to_json() {\n\n        $info = array(\n                'id'  => $this->getId(),\n                'name' => Format::htmlchars($this->getName()),\n                'email' => (string) $this->getEmail(),\n                'phone' => (string) $this->getPhoneNumber());\n\n        return Format::json_encode($info);\n    }\n\n    function __toString() {\n        return $this->asVar();\n    }\n\n    function asVar() {\n        return (string) $this->getName();\n    }\n\n    function getVar($tag) {\n        $tag = mb_strtolower($tag);\n        foreach ($this->getDynamicData() as $e)\n            if ($a = $e->getAnswer($tag))\n                return $a;\n    }\n\n    static function getVarScope() {\n        $base = array(\n            'email' => array(\n                'class' => 'EmailAddress', 'desc' => __('Default email address')\n            ),\n            'name' => array(\n                'class' => 'PersonsName', 'desc' => 'User name, default format'\n            ),\n            'organization' => array('class' => 'Organization', 'desc' => __('Organization')),\n        );\n        $extra = VariableReplacer::compileFormScope(UserForm::getInstance());\n        return $base + $extra;\n    }\n\n    static function getSearchableFields() {\n        $base = array();\n        $uform = UserForm::getUserForm();\n        $base = array();\n        foreach ($uform->getFields() as $F) {\n            $fname = $F->get('name') ?: ('field_'.$F->get('id'));\n            # XXX: email in the model corresponds to `emails__address` ORM path\n            if ($fname == 'email')\n                $fname = 'emails__address';\n            if (!$F->hasData() || $F->isPresentationOnly())\n                continue;\n            if (!$F->isStorable())\n                $base[$fname] = $F;\n            else\n                $base[\"cdata__{$fname}\"] = $F;\n        }\n        return $base;\n    }\n\n    static function supportsCustomData() {\n        return true;\n    }\n\n    function addDynamicData($data) {\n        return $this->addForm(UserForm::objects()->one(), 1, $data);\n    }\n\n    function getDynamicData($create=true) {\n        if (!isset($this->_entries)) {\n            $this->_entries = DynamicFormEntry::forObject($this->id, 'U')->all();\n            if (!$this->_entries && $create) {\n                $g = UserForm::getNewInstance();\n                $g->setClientId($this->id);\n                $g->save();\n                $this->_entries[] = $g;\n            }\n        }\n\n        return $this->_entries ?: array();\n    }\n\n    function getFilterData() {\n        $vars = array();\n        foreach ($this->getDynamicData() as $entry) {\n            $vars += $entry->getFilterData();\n\n            // Add in special `name` and `email` fields\n            if ($entry->getDynamicForm()->get('type') != 'U')\n                continue;\n\n            foreach (array('name', 'email') as $name) {\n                if ($f = $entry->getField($name))\n                    $vars['field.'.$f->get('id')] =\n                        $name == 'name' ? $this->getName() : $this->getEmail();\n            }\n        }\n\n        return $vars;\n    }\n\n    function getForms($data=null, $cb=null) {\n\n        if (!isset($this->_forms)) {\n            $this->_forms = array();\n            $cb = $cb ?: function ($f) use($data) { return ($data); };\n            foreach ($this->getDynamicData() as $entry) {\n                $entry->addMissingFields();\n                if(($form = $entry->getDynamicForm())\n                        && $form->get('type') == 'U' ) {\n\n                    foreach ($entry->getFields() as $f) {\n                        if ($f->get('name') == 'name' && !$cb($f))\n                            $f->value = $this->getFullName();\n                        elseif ($f->get('name') == 'email' && !$cb($f))\n                            $f->value = $this->getEmail();\n                    }\n                }\n\n                $this->_forms[] = $entry;\n            }\n        }\n\n        return $this->_forms;\n    }\n\n    function getAccountStatus() {\n\n        if (!($account=$this->getAccount()))\n            return __('Guest');\n\n        return (string) $account->getStatus();\n    }\n\n    function canSeeOrgTickets() {\n        return $this->org && (\n                $this->org->shareWithEverybody()\n            || ($this->isPrimaryContact() && $this->org->shareWithPrimaryContacts()));\n    }\n\n    function register($vars, &$errors) {\n\n        // user already registered?\n        if ($this->getAccount())\n            return true;\n\n        return UserAccount::register($this, $vars, $errors);\n    }\n\n    static function importCsv($stream, $defaults=array()) {\n        require_once INCLUDE_DIR . 'class.import.php';\n\n        $importer = new CsvImporter($stream);\n        $imported = 0;\n        try {\n            db_autocommit(false);\n            $records = $importer->importCsv(UserForm::getUserForm()->getFields(), $defaults);\n            foreach ($records as $data) {\n                if (!Validator::is_email($data['email']) || empty($data['name']))\n                    throw new ImportError('Both `name` and `email` fields are required');\n                if (!($user = static::fromVars($data, true, true)))\n                    throw new ImportError(sprintf(__('Unable to import user: %s'),\n                        print_r(Format::htmlchars($data), true)));\n                $imported++;\n            }\n            db_autocommit(true);\n        }\n        catch (Exception $ex) {\n            db_rollback();\n            return $ex->getMessage();\n        }\n        return $imported;\n    }\n\n    function importFromPost($stream, $extra=array()) {\n        if (!is_array($stream))\n            $stream = sprintf('name, email%s %s',PHP_EOL, $stream);\n\n        return User::importCsv($stream, $extra);\n    }\n\n    function updateInfo($vars, &$errors, $staff=false) {\n        $isEditable = function ($f) use($staff) {\n            return ($staff ? $f->isEditableToStaff() :\n                    $f->isEditableToUsers());\n        };\n        $valid = true;\n        $forms = $this->getForms($vars, $isEditable);\n        foreach ($forms as $entry) {\n            $entry->setSource($vars);\n            if ($staff && !$entry->isValidForStaff(true))\n                $valid = false;\n            elseif (!$staff && !$entry->isValidForClient(true))\n                $valid = false;\n            elseif ($entry->getDynamicForm()->get('type') == 'U'\n                    && ($f=$entry->getField('email'))\n                    && $isEditable($f)\n                    && $f->getClean()\n                    && ($u=User::lookup(array('emails__address'=>$f->getClean())))\n                    && $u->id != $this->getId()) {\n                $valid = false;\n                $f->addError(__('Email is assigned to another user'));\n            }\n\n            if (!$valid)\n                $errors = array_merge($errors, $entry->errors());\n        }\n\n\n        if (!$valid)\n            return false;\n\n        // Save the entries\n        foreach ($forms as $entry) {\n            $fields = $entry->getFields();\n            foreach ($fields as $field) {\n                $changes = $field->getChanges();\n                if ((is_array($changes) && $changes[0]) || $changes && !is_array($changes)) {\n                    $type = array('type' => 'edited', 'key' => $field->getLabel());\n                    Signal::send('object.edited', $this, $type);\n                }\n            }\n\n            if ($entry->getDynamicForm()->get('type') == 'U') {\n                //  Name field\n                if (($name = $entry->getField('name')) && $isEditable($name) ) {\n                    $name = $name->getClean();\n                    if (is_array($name))\n                        $name = implode(', ', $name);\n                    if ($this->name != $name) {\n                        $type = array('type' => 'edited', 'key' => 'Name');\n                        Signal::send('object.edited', $this, $type);\n                    }\n                    $this->name = $name;\n                }\n\n                // Email address field\n                if (($email = $entry->getField('email'))\n                        && $isEditable($email)) {\n                    if ($this->default_email->address != $email->getClean()) {\n                        $type = array('type' => 'edited', 'key' => 'Email');\n                        Signal::send('object.edited', $this, $type);\n                    }\n                    $this->default_email->address = $email->getClean();\n                    $this->default_email->save();\n                }\n            }\n\n            // DynamicFormEntry::saveAnswers returns the number of answers updated\n            if ($entry->saveAnswers($isEditable)) {\n                $this->updated = SqlFunction::NOW();\n            }\n        }\n\n        return $this->save();\n    }\n\n\n    function save($refetch=false) {\n        // Drop commas and reorganize the name without them\n        $parts = array_map('trim', explode(',', $this->name));\n        switch (count($parts)) {\n            case 2:\n                // Assume last, first --or-- last suff., first\n                $this->name = $parts[1].' '.$parts[0];\n                // XXX: Consider last, first suff.\n                break;\n            case 3:\n                // Assume last, first, suffix, write 'first last suffix'\n                $this->name = $parts[1].' '.$parts[0].' '.$parts[2];\n                break;\n        }\n\n        // Handle email addresses -- use the box name\n        if (Validator::is_email($this->name)) {\n            list($box, $domain) = explode('@', $this->name, 2);\n            if (strpos($box, '.') !== false)\n                $this->name = str_replace('.', ' ', $box);\n            else\n                $this->name = $box;\n            $this->name = mb_convert_case($this->name, MB_CASE_TITLE);\n        }\n\n        if (count($this->dirty)) //XXX: doesn't work??\n            $this->set('updated', new SqlFunction('NOW'));\n        return parent::save($refetch);\n    }\n\n    function delete() {\n        // Refuse to delete a user with tickets\n        if ($this->tickets->count())\n            return false;\n\n        // Delete account record (if any)\n        if ($this->getAccount())\n            $this->getAccount()->delete();\n\n        // Delete emails.\n        $this->emails->expunge();\n\n        // Drop dynamic data\n        foreach ($this->getDynamicData() as $entry) {\n            $entry->delete();\n        }\n\n        $type = array('type' => 'deleted');\n        Signal::send('object.deleted', $this, $type);\n\n        // Delete user\n        return parent::delete();\n    }\n\n    function deleteAllTickets() {\n        $status_id = TicketStatus::lookup(array('state' => 'deleted'));\n        foreach($this->tickets as $ticket) {\n            if (!$T = Ticket::lookup($ticket->getId()))\n                continue;\n            if (!$T->setStatus($status_id))\n                return false;\n        }\n        $this->tickets->reset();\n        return true;\n    }\n\n    static function lookupByEmail($email) {\n        return static::lookup(array('emails__address'=>$email));\n    }\n\n    static function getNameById($id) {\n        if ($user = static::lookup($id))\n            return $user->getName();\n    }\n\n    static function getLink($id) {\n        global $thisstaff;\n\n        if (!$id || !$thisstaff)\n            return false;\n\n        return ROOT_PATH . sprintf('scp/users.php?id=%s', $id);\n    }\n\n    function getTicketsQueue($collabs=true) {\n        global $thisstaff;\n\n        if (!$this->_queue) {\n            $email = $this->getDefaultEmailAddress();\n            $filter = [\n                ['user__id', 'equal', $this->getId()],\n            ];\n            if ($collabs)\n                $filter = [\n                    ['user__emails__address', 'equal', $email],\n                    ['thread__collaborators__user__emails__address', 'equal',  $email],\n                ];\n            $this->_queue = new AdhocSearch(array(\n                'id' => 'adhoc,uid'.$this->getId(),\n                'root' => 'T',\n                'staff_id' => $thisstaff->getId(),\n                'title' => $this->getName()\n            ));\n            $this->_queue->config = $filter;\n        }\n\n        return $this->_queue;\n    }\n}\n\nclass EmailAddress\nimplements TemplateVariable {\n    var $email;\n    var $address;\n    protected $_info;\n\n    function __construct($address) {\n        $this->_info = self::parse($address);\n        $this->email = sprintf('%s@%s',\n                $this->getMailbox(),\n                $this->getDomain());\n\n        if ($this->getName())\n            $this->address = sprintf('\"%s\" <%s>',\n                    $this->getName(),\n                    $this->email);\n    }\n\n    function __toString() {\n        return (string) $this->email;\n    }\n\n    function getVar($what) {\n\n        if (!$this->_info)\n            return '';\n\n        switch ($what) {\n        case 'host':\n        case 'domain':\n            return $this->_info->host;\n        case 'personal':\n            return trim($this->_info->personal, '\"');\n        case 'mailbox':\n            return $this->_info->mailbox;\n        }\n    }\n\n    function getAddress() {\n        return $this->address ?: $this->email;\n    }\n\n    function getHost() {\n        return $this->getVar('host');\n    }\n\n    function getDomain() {\n        return $this->getHost();\n    }\n\n    function getName() {\n        return $this->getVar('personal');\n    }\n\n    function getMailbox() {\n        return $this->getVar('mailbox');\n    }\n\n    // Parse and email adddress (RFC822) into it's parts.\n    // @address - one address is expected\n    static function parse($address) {\n        require_once PEAR_DIR . 'Mail/RFC822.php';\n        require_once PEAR_DIR . 'PEAR.php';\n        if (($parts = Mail_RFC822::parseAddressList($address))\n                && !PEAR::isError($parts))\n            return current($parts);\n    }\n\n    static function getVarScope() {\n        return array(\n            'domain' => __('Domain'),\n            'mailbox' => __('Mailbox'),\n            'personal' => __('Personal name'),\n        );\n    }\n}\n\nclass PersonsName\nimplements TemplateVariable {\n    var $format;\n    var $parts;\n    var $name;\n\n    static $formats = array(\n        'first' => array(     /*@trans*/ \"First\", 'getFirst'),\n        'last' => array(      /*@trans*/ \"Last\", 'getLast'),\n        'full' => array(      /*@trans*/ \"First Last\", 'getFull'),\n        'legal' => array(     /*@trans*/ \"First M. Last\", 'getLegal'),\n        'lastfirst' => array( /*@trans*/ \"Last, First\", 'getLastFirst'),\n        'formal' => array(    /*@trans*/ \"Mr. Last\", 'getFormal'),\n        'short' => array(     /*@trans*/ \"First L.\", 'getShort'),\n        'shortformal' => array(/*@trans*/ \"F. Last\", 'getShortFormal'),\n        'complete' => array(  /*@trans*/ \"Mr. First M. Last Sr.\", 'getComplete'),\n        'original' => array(  /*@trans*/ '-- As Entered --', 'getOriginal'),\n    );\n\n    function __construct($name, $format=null) {\n        global $cfg;\n\n        if ($format && isset(static::$formats[$format]))\n            $this->format = $format;\n        else\n            $this->format = 'original';\n\n        if (!is_array($name)) {\n            $this->parts = static::splitName($name);\n            $this->name = $name;\n        }\n        else {\n            $this->parts = $name;\n            $this->name = implode(' ', $name);\n        }\n    }\n\n    function getFirst() {\n        return $this->parts['first'];\n    }\n\n    function getLast() {\n        return $this->parts['last'];\n    }\n\n    function getMiddle() {\n        return $this->parts['middle'];\n    }\n\n    function getMiddleInitial() {\n        return mb_substr($this->parts['middle'],0,1).'.';\n    }\n\n    function getFormal() {\n        return trim($this->parts['salutation'].' '.$this->parts['last']);\n    }\n\n    function getFull() {\n        return trim($this->parts['first'].' '.$this->parts['last']);\n    }\n\n    function getLegal() {\n        $parts = array(\n            $this->parts['first'],\n            mb_substr($this->parts['middle'],0,1),\n            $this->parts['last'],\n        );\n        if ($parts[1]) $parts[1] .= '.';\n        return implode(' ', array_filter($parts));\n    }\n\n    function getComplete() {\n        $parts = array(\n            $this->parts['salutation'],\n            $this->parts['first'],\n            mb_substr($this->parts['middle'],0,1),\n            $this->parts['last'],\n            $this->parts['suffix']\n        );\n        if ($parts[2]) $parts[2] .= '.';\n        return implode(' ', array_filter($parts));\n    }\n\n    function getLastFirst() {\n        $name = $this->parts['last'].', '.$this->parts['first'];\n        if ($this->parts['suffix'])\n            $name .= ', '.$this->parts['suffix'];\n        return $name;\n    }\n\n    function getShort() {\n        return $this->parts['first'].' '.mb_substr($this->parts['last'],0,1).'.';\n    }\n\n    function getShortFormal() {\n        return mb_substr($this->parts['first'],0,1).'. '.$this->parts['last'];\n    }\n\n    function getOriginal() {\n        return $this->name;\n    }\n\n    function getInitials() {\n        $names = array($this->parts['first']);\n        $names = array_merge($names, explode(' ', $this->parts['middle']));\n        $names[] = $this->parts['last'];\n        $initials = '';\n        foreach (array_filter($names) as $n)\n            $initials .= mb_substr($n,0,1);\n        return mb_convert_case($initials, MB_CASE_UPPER);\n    }\n\n    function getName() {\n        return $this;\n    }\n\n    function getNameFormats($user, $type) {\n      $nameFormats = array();\n\n      foreach (PersonsName::allFormats() as $format => $func) {\n          $nameFormats[$type . '.name.' . $format] = $user->getName()->$func[1]();\n      }\n\n      return $nameFormats;\n    }\n\n    function asVar() {\n        return $this->__toString();\n    }\n\n    static function getVarScope() {\n        $formats = array();\n        foreach (static::$formats as $name=>$info) {\n            if (in_array($name, array('original', 'complete')))\n                continue;\n            $formats[$name] = $info[0];\n        }\n        return $formats;\n    }\n\n    function __toString() {\n\n        @list(, $func) = static::$formats[$this->format];\n        if (!$func) $func = 'getFull';\n\n        return (string) call_user_func(array($this, $func));\n    }\n\n    static function allFormats() {\n        return static::$formats;\n    }\n\n    /**\n     * Thanks, http://stackoverflow.com/a/14420217\n     */\n    static function splitName($name) {\n        $results = array();\n\n        $r = explode(' ', $name);\n        $size = count($r);\n\n        //check if name is bad format (ex: J.Everybody), and fix them\n        if($size==1 && mb_strpos($r[0], '.') !== false)\n        {\n            $r = explode('.', $name);\n            $size = count($r);\n        }\n\n        //check first for period, assume salutation if so\n        if (mb_strpos($r[0], '.') === false)\n        {\n            $results['salutation'] = '';\n            $results['first'] = $r[0];\n        }\n        else\n        {\n            $results['salutation'] = $r[0];\n            $results['first'] = $r[1];\n        }\n\n        //check last for period, assume suffix if so\n        if (mb_strpos($r[$size - 1], '.') === false)\n        {\n            $results['suffix'] = '';\n        }\n        else\n        {\n            $results['suffix'] = $r[$size - 1];\n        }\n\n        //combine remains into last\n        $start = ($results['salutation']) ? 2 : 1;\n        $end = ($results['suffix']) ? $size - 2 : $size - 1;\n\n        $middle = array();\n        for ($i = $start; $i <= $end; $i++)\n        {\n            $middle[] = $r[$i];\n        }\n        if (count($middle) > 1) {\n            $results['last'] = array_pop($middle);\n            $results['middle'] = implode(' ', $middle);\n        }\n        else {\n            $results['last'] = $middle[0];\n            $results['middle'] = '';\n        }\n\n        return $results;\n    }\n\n}\n\nclass AgentsName extends PersonsName {\n    function __construct($name, $format=null) {\n        global $cfg;\n\n        if (!$format && $cfg)\n            $format = $cfg->getAgentNameFormat();\n\n        parent::__construct($name, $format);\n    }\n}\n\nclass UsersName extends PersonsName {\n    function __construct($name, $format=null) {\n        global $cfg;\n        if (!$format && $cfg)\n            $format = $cfg->getClientNameFormat();\n\n        parent::__construct($name, $format);\n    }\n}\n\n\nclass UserEmail extends UserEmailModel {\n    static function ensure($address) {\n        $email = static::lookup(array('address'=>$address));\n        if (!$email) {\n            $email = new static(array('address'=>$address));\n            $email->save();\n        }\n        return $email;\n    }\n}\n\n\nclass UserAccount extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_ACCOUNT_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'user' => array(\n                'null' => false,\n                'constraint' => array('user_id' => 'User.id')\n            ),\n        ),\n    );\n\n    const LANG_MAILOUTS = 1;            // Language preference for mailouts\n\n    var $_status;\n    var $_extra;\n\n    function getStatus() {\n        if (!isset($this->_status))\n            $this->_status = new UserAccountStatus($this->get('status'));\n        return $this->_status;\n    }\n\n    function statusChanged($flag, $var) {\n        if (($this->hasStatus($flag) && !$var) ||\n            (!$this->hasStatus($flag) && $var))\n                return true;\n    }\n\n    protected function hasStatus($flag) {\n        return $this->getStatus()->check($flag);\n    }\n\n    protected function clearStatus($flag) {\n        return $this->set('status', $this->get('status') & ~$flag);\n    }\n\n    protected function setStatus($flag) {\n        return $this->set('status', $this->get('status') | $flag);\n    }\n\n    function confirm() {\n        $this->setStatus(UserAccountStatus::CONFIRMED);\n        return $this->save();\n    }\n\n    function isConfirmed() {\n        return $this->getStatus()->isConfirmed();\n    }\n\n    function lock() {\n        $this->setStatus(UserAccountStatus::LOCKED);\n        return $this->save();\n    }\n\n    function unlock() {\n        $this->clearStatus(UserAccountStatus::LOCKED);\n        return $this->save();\n    }\n\n    function isLocked() {\n        return $this->getStatus()->isLocked();\n    }\n\n    function forcePasswdReset() {\n        $this->setStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n        return $this->save();\n    }\n\n    function isPasswdResetForced() {\n        return $this->hasStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n    }\n\n    function isPasswdResetEnabled() {\n        return !$this->hasStatus(UserAccountStatus::FORBID_PASSWD_RESET);\n    }\n\n    function getInfo() {\n        return $this->ht;\n    }\n\n    function getId() {\n        return $this->get('id');\n    }\n\n    function getUserId() {\n        return $this->get('user_id');\n    }\n\n    function getUser() {\n        return $this->user;\n    }\n\n    function getUserName() {\n        return $this->getUser()->getName();\n    }\n\n    function getExtraAttr($attr=false, $default=null) {\n        if (!isset($this->_extra))\n            $this->_extra = JsonDataParser::decode($this->get('extra', ''));\n\n        return $attr ? (@$this->_extra[$attr] ?: $default) : $this->_extra;\n    }\n\n    function setExtraAttr($attr, $value) {\n        $this->getExtraAttr();\n        $this->_extra[$attr] = $value;\n    }\n\n    /**\n     * Function: getLanguage\n     *\n     * Returns the language preference for the user or false if no\n     * preference is defined. False indicates the browser indicated\n     * preference should be used. For requests apart from browser requests,\n     * the last language preference of the browser is set in the\n     * 'browser_lang' extra attribute upon logins. Send the LANG_MAILOUTS\n     * flag to also consider this saved value. Such is useful when sending\n     * the user a message (such as an email), and the user's browser\n     * preference is not available in the HTTP request.\n     *\n     * Parameters:\n     * $flags - (int) Send UserAccount::LANG_MAILOUTS if the user's\n     *      last-known browser preference should be considered. Normally\n     *      only the user's saved language preference is considered.\n     *\n     * Returns:\n     * Current or last-known language preference or false if no language\n     * preference is currently set or known.\n     */\n    function getLanguage($flags=false) {\n        $lang = $this->get('lang', false);\n        if (!$lang && ($flags & UserAccount::LANG_MAILOUTS))\n            $lang = $this->getExtraAttr('browser_lang', false);\n\n        return $lang;\n    }\n\n    function getTimezone() {\n        return $this->timezone;\n    }\n\n    function save($refetch=false) {\n        // Serialize the extra column on demand\n        if (isset($this->_extra)) {\n            $this->extra = JsonDataEncoder::encode($this->_extra);\n        }\n        return parent::save($refetch);\n    }\n\n    function hasPassword() {\n        return (bool) $this->get('passwd');\n    }\n\n    function sendResetEmail() {\n        return static::sendUnlockEmail('pwreset-client') === true;\n    }\n\n    function sendConfirmEmail() {\n        return static::sendUnlockEmail('registration-client') === true;\n    }\n\n    function setPassword($new) {\n        $this->set('passwd', Passwd::hash($new));\n        // Clean sessions\n        Signal::send('auth.clean', $this->getUser());\n    }\n\n    protected function sendUnlockEmail($template) {\n        global $ost, $cfg;\n\n        $token = Misc::randCode(48); // 290-bits\n\n        $email = $cfg->getDefaultEmail();\n        $content = Page::lookupByType($template);\n\n        if (!$email ||  !$content)\n            return new BaseError(sprintf(_S('%s: Unable to retrieve template'),\n                $template));\n\n        $vars = array(\n            'url' => $ost->getConfig()->getBaseUrl(),\n            'token' => $token,\n            'user' => $this->getUser(),\n            'recipient' => $this->getUser(),\n            'link' => sprintf(\n                \"%s/pwreset.php?token=%s\",\n                $ost->getConfig()->getBaseUrl(),\n                $token),\n        );\n        $vars['reset_link'] = &$vars['link'];\n\n        $info = array('email' => $email, 'vars' => &$vars, 'log'=>true);\n        Signal::send('auth.pwreset.email', $this->getUser(), $info);\n\n        $lang = $this->getLanguage(UserAccount::LANG_MAILOUTS);\n        $msg = $ost->replaceTemplateVariables(array(\n            'subj' => $content->getLocalName($lang),\n            'body' => $content->getLocalBody($lang),\n        ), $vars);\n\n        $_config = new Config('pwreset');\n        $_config->set($vars['token'], 'c'.$this->getUser()->getId());\n\n        $email->send($this->getUser()->getEmail(),\n            Format::striptags($msg['subj']), $msg['body']);\n\n        return true;\n    }\n\n    function __toString() {\n        return (string) $this->getStatus();\n    }\n\n    /*\n     * Updates may be done by Staff or by the User if registration\n     * options are set to Public\n     */\n    function update($vars, &$errors) {\n        // TODO: Make sure the username is unique\n\n        // Timezone selection is not required. System default is a valid\n        // fallback\n\n        // Changing password?\n        if ($vars['passwd1'] || $vars['passwd2']) {\n            if (!$vars['passwd1'])\n                $errors['passwd1'] = __('New password is required');\n            elseif ($vars['passwd1'] && strlen($vars['passwd1'])<6)\n                $errors['passwd1'] = __('Must be at least 6 characters');\n            elseif ($vars['passwd1'] && strcmp($vars['passwd1'], $vars['passwd2']))\n                $errors['passwd2'] = __('Passwords do not match');\n        }\n\n        // Make sure the username is not an email.\n        if ($vars['username'] && Validator::is_email($vars['username']))\n            $errors['username'] =\n                __('Users can always sign in with their email address');\n\n        if ($errors) return false;\n\n        //flags\n        $pwreset = $this->statusChanged(UserAccountStatus::REQUIRE_PASSWD_RESET, $vars['pwreset-flag']);\n        $locked = $this->statusChanged(UserAccountStatus::LOCKED, $vars['locked-flag']);\n        $forbidPwChange = $this->statusChanged(UserAccountStatus::FORBID_PASSWD_RESET, $vars['forbid-pwchange-flag']);\n\n        $info = $this->getInfo();\n        foreach ($vars as $key => $value) {\n            if (($key != 'id' && $info[$key] && $info[$key] != $value) || ($pwreset && $key == 'pwreset-flag' ||\n                    $locked && $key == 'locked-flag' || $forbidPwChange && $key == 'forbid-pwchange-flag')) {\n                $type = array('type' => 'edited', 'key' => $key);\n                Signal::send('object.edited', $this, $type);\n            }\n        }\n\n        $this->set('timezone', $vars['timezone']);\n        $this->set('username', $vars['username']);\n\n        if ($vars['passwd1']) {\n            $this->setPassword($vars['passwd1']);\n            $this->setStatus(UserAccountStatus::CONFIRMED);\n            $type = array('type' => 'edited', 'key' => 'password');\n            Signal::send('object.edited', $this, $type);\n        }\n\n        // Set flags\n        foreach (array(\n                'pwreset-flag' => UserAccountStatus::REQUIRE_PASSWD_RESET,\n                'locked-flag' => UserAccountStatus::LOCKED,\n                'forbid-pwchange-flag' => UserAccountStatus::FORBID_PASSWD_RESET\n        ) as $ck=>$flag) {\n            if ($vars[$ck])\n                $this->setStatus($flag);\n            else {\n                if (($pwreset && $ck == 'pwreset-flag') || ($locked && $ck == 'locked-flag') ||\n                    ($forbidPwChange && $ck == 'forbid-pwchange-flag')) {\n                        $type = array('type' => 'edited', 'key' => $ck);\n                        Signal::send('object.edited', $this, $type);\n                }\n                $this->clearStatus($flag);\n            }\n        }\n\n        return $this->save(true);\n    }\n\n    static function createForUser($user, $defaults=false) {\n        $acct = new static(array('user_id'=>$user->getId()));\n        if ($defaults && is_array($defaults)) {\n            foreach ($defaults as $k => $v)\n                $acct->set($k, $v);\n        }\n        return $acct;\n    }\n\n    static function lookupByUsername($username) {\n        if (strpos($username, '@') !== false)\n            $user = static::lookup(array('user__emails__address'=>$username));\n        else\n            $user = static::lookup(array('username'=>$username));\n\n        return $user;\n    }\n\n    static function register($user, $vars, &$errors) {\n\n        if (!$user || !$vars)\n            return false;\n\n        //Require temp password.\n        if ((!$vars['backend'] || $vars['backend'] != 'client')\n                && !isset($vars['sendemail'])) {\n            if (!$vars['passwd1'])\n                $errors['passwd1'] = 'Temporary password required';\n            elseif ($vars['passwd1'] && strlen($vars['passwd1'])<6)\n                $errors['passwd1'] = 'Must be at least 6 characters';\n            elseif ($vars['passwd1'] && strcmp($vars['passwd1'], $vars['passwd2']))\n                $errors['passwd2'] = 'Passwords do not match';\n        }\n\n        if ($errors) return false;\n\n        $account = new UserAccount(array(\n            'user_id' => $user->getId(),\n            'timezone' => $vars['timezone'],\n            'backend' => $vars['backend'],\n        ));\n\n        if ($vars['username'] && strcasecmp($vars['username'], $user->getEmail()))\n            $account->set('username', $vars['username']);\n\n        if ($vars['passwd1'] && !$vars['sendemail']) {\n            $account->set('passwd', Passwd::hash($vars['passwd1']));\n            $account->setStatus(UserAccountStatus::CONFIRMED);\n            if ($vars['pwreset-flag'])\n                $account->setStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n            if ($vars['forbid-pwreset-flag'])\n                $account->setStatus(UserAccountStatus::FORBID_PASSWD_RESET);\n        }\n        elseif ($vars['backend'] && $vars['backend'] != 'client') {\n            // Auto confirm remote accounts\n            $account->setStatus(UserAccountStatus::CONFIRMED);\n        }\n\n        $account->save(true);\n\n        if (!$account->isConfirmed() && $vars['sendemail'])\n            $account->sendConfirmEmail();\n\n        return $account;\n    }\n\n}\n\nclass UserAccountStatus {\n\n    var $flag;\n\n    const CONFIRMED             = 0x0001;\n    const LOCKED                = 0x0002;\n    const REQUIRE_PASSWD_RESET  = 0x0004;\n    const FORBID_PASSWD_RESET   = 0x0008;\n\n    function __construct($flag) {\n        $this->flag = $flag;\n    }\n\n    function check($flag) {\n        return 0 !== ($this->flag & $flag);\n    }\n\n    function isLocked() {\n        return $this->check(self::LOCKED);\n    }\n\n    function isConfirmed() {\n        return $this->check(self::CONFIRMED);\n    }\n\n    function __toString() {\n\n        if ($this->isLocked())\n            return __('Locked (Administrative)');\n\n        if (!$this->isConfirmed())\n            return __('Locked (Pending Activation)');\n\n        // ... Other flags here (password reset, etc).\n\n        return __('Active (Registered)');\n    }\n}\n\n/*\n *  Generic user list.\n */\nclass UserList extends MailingList {\n\n   function add($user) {\n        if (!$user instanceof ITicketUser)\n            throw new InvalidArgumentException('User expected');\n\n        return parent::add($user);\n    }\n}\n\n?>\n", "<?php\n/*********************************************************************\n    class.validator.php\n\n    Input validation helper. This class contains collection of functions used for data validation.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nclass Validator {\n\n    var $input=array();\n    var $fields=array();\n    var $errors=array();\n\n    function __construct($fields=null) {\n        $this->setFields($fields);\n    }\n    function setFields(&$fields){\n\n        if($fields && is_array($fields)):\n            $this->fields=$fields;\n            return (true);\n        endif;\n\n        return (false);\n    }\n\n\n    function validate($source,$userinput=true){\n        $this->errors=array();\n        //Check the input and make sure the fields are specified.\n        if(!$source || !is_array($source))\n            $this->errors['err']=__('Invalid input');\n        elseif(!$this->fields || !is_array($this->fields))\n            $this->errors['err']=__('No fields set up');\n        //Abort on error\n        if($this->errors)\n            return false;\n\n        //if magic quotes are enabled - then try cleaning up inputs before validation...\n        if($userinput && function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc())\n            $source=Format::strip_slashes($source);\n\n\n        $this->input=$source;\n\n        //Do the do.\n        foreach($this->fields as $k=>$field){\n            if(!$field['required'] && !$this->input[$k]) //NOT required...and no data provided...\n                continue;\n\n            if($field['required'] && !isset($this->input[$k]) || (!$this->input[$k] && $field['type']!='int')){ //Required...and no data provided...\n                $this->errors[$k]=$field['error'];\n                continue;\n            }\n\n            //We don't care about the type.\n            if ($field['type'] == '*') continue;\n\n            //Do the actual validation based on the type.\n            switch(strtolower($field['type'])):\n            case 'integer':\n            case 'int':\n                if(!is_numeric($this->input[$k]))\n                     $this->errors[$k]=$field['error'];\n                elseif ($field['min'] && $this->input[$k] < $field['min'])\n                     $this->errors[$k]=$field['error'];\n                break;\n            case 'double':\n                if(!is_numeric($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'text':\n            case 'string':\n                if(!is_string($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'array':\n                if(!$this->input[$k] || !is_array($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'radio':\n                if(!isset($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'date': //TODO...make sure it is really in GNU date format..\n                if(strtotime($this->input[$k])===false)\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'time': //TODO...make sure it is really in GNU time format..\n                break;\n            case 'phone':\n            case 'fax':\n                if(!self::is_phone($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'email':\n                if(!self::is_email($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'url':\n                if(!self::is_url($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'password':\n                if(strlen($this->input[$k])<6)\n                    $this->errors[$k]=$field['error'].' '.__('(Six characters min)');\n                break;\n            case 'username':\n                $error = '';\n                if (!self::is_username($this->input[$k], $error))\n                    $this->errors[$k]=$field['error'].\": $error\";\n                break;\n            case 'zipcode':\n                if(!is_numeric($this->input[$k]) || (strlen($this->input[$k])!=5))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'cs-domain': // Comma separated list of domains\n                if($values=explode(',', $this->input[$k]))\n                    foreach($values as $v)\n                        if(!preg_match_all(\n                                '/^([a-z0-9|-]+\\.)*[a-z0-9|-]+\\.[a-z]+$/',\n                                ltrim($v)))\n                            $this->errors[$k]=$field['error'];\n                break;\n            case 'cs-url': // Comma separated list of urls\n                if($values=explode(',', $this->input[$k]))\n                    foreach($values as $v)\n                        if(!preg_match_all(\n                                '/^(https?:\\/\\/)?((\\*\\.|\\w+\\.)?[\\w-]+(\\.[a-zA-Z]+)?(:([0-9]+|\\*))?)+$/',\n                                ltrim($v)))\n                            $this->errors[$k]=$field['error'];\n                break;\n            case 'ipaddr':\n                if($values=explode(',', $this->input[$k])){\n                    foreach($values as $v)\n                        if(!preg_match_all('/^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$/', ltrim($v)))\n                            $this->errors[$k]=$field['error'];\n                }\n                break;\n            default://If param type is not set...or handle..error out...\n                $this->errors[$k]=$field['error'].' '.__('(type not set)');\n            endswitch;\n        }\n        return ($this->errors)?(FALSE):(TRUE);\n    }\n\n    function iserror(){\n        return $this->errors?true:false;\n    }\n\n    function errors(){\n        return $this->errors;\n    }\n\n    /*** Functions below can be called directly without class instance.\n         Validator::func(var..);  (nolint) ***/\n    static function is_email($email, $list=false, $verify=false) {\n        require_once PEAR_DIR . 'Mail/RFC822.php';\n        require_once PEAR_DIR . 'PEAR.php';\n        $rfc822 = new Mail_RFC822();\n        if (!($mails = @$rfc822->parseAddressList($email)) || PEAR::isError($mails))\n            return false;\n\n        if (!$list && count($mails) > 1)\n            return false;\n\n        foreach ($mails as $m) {\n            if (!$m->mailbox)\n                return false;\n            if ($m->host == 'localhost')\n                return false;\n        }\n\n        // According to RFC2821, the domain (A record) can be treated as an\n        // MX if no MX records exist for the domain. Also, include a\n        // full-stop trailing char so that the default domain of the server\n        // is not added automatically\n        if ($verify and !dns_get_record($m->host.'.', DNS_MX))\n            return 0 < @count(dns_get_record($m->host.'.', DNS_A|DNS_AAAA));\n\n        return true;\n    }\n\n    static function is_numeric($number, &$error='') {\n        if (!is_numeric($number))\n            $error = __('Enter a Number');\n        return $error == '';\n    }\n\n    static function is_valid_email($email, &$error='') {\n        global $cfg;\n        // Default to FALSE for installation\n        return self::is_email($email, false, $cfg && $cfg->verifyEmailAddrs());\n    }\n\n    static function is_phone($phone, &$error='') {\n        /* We're not really validating the phone number but just making sure it doesn't contain illegal chars and of acceptable len */\n        $stripped=preg_replace(\"(\\(|\\)|\\-|\\.|\\+|[  ]+)\",\"\",$phone);\n        return (!is_numeric($stripped) || ((strlen($stripped)<7) || (strlen($stripped)>16)))?false:true;\n    }\n\n    static function is_url($url) {\n        //XXX: parse_url is not ideal for validating urls but it's ideal for basic checks.\n        return ($url && ($info=parse_url($url)) && $info['host']);\n    }\n\n    static function is_ip($ip, &$error='') {\n        return filter_var(trim($ip), FILTER_VALIDATE_IP) !== false;\n    }\n\n    static function is_username($username, &$error='') {\n        if (strlen($username)<2)\n            $error = __('Username must have at least two (2) characters');\n        elseif (!preg_match('/^[\\p{L}\\d._-]+$/u', $username))\n            $error = __('Username contains invalid characters');\n        return $error == '';\n    }\n\n    static function is_formula($text, &$error='') {\n        if (!preg_match('/^[^=\\+@-].*$/s', $text))\n            $error = __('Content cannot start with the following characters: = - + @');\n        return $error == '';\n    }\n\n    static function check_passwd($passwd, &$error='') {\n        try {\n            PasswordPolicy::checkPassword($passwd, null);\n        } catch (BadPassword $ex) {\n            $error = $ex->getMessage();\n        }\n        return $error == '';\n    }\n\n    /*\n     * check_ip\n     * Checks if an IP (IPv4 or IPv6) address is contained in the list of given IPs or subnets.\n     *\n     * @credit - borrowed from Symfony project\n     *\n     */\n    public static function check_ip($ip, $ips) {\n\n        if (!Validator::is_ip($ip))\n            return false;\n\n        $method = substr_count($ip, ':') > 1 ? 'check_ipv6' : 'check_ipv4';\n        $ips = is_array($ips) ? $ips : array($ips);\n        foreach ($ips as $_ip) {\n            if (self::$method($ip, $_ip)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * check_ipv4\n     * Compares two IPv4 addresses.\n     * In case a subnet is given, it checks if it contains the request IP.\n     *\n     * @credit - borrowed from Symfony project\n     */\n    public static function check_ipv4($ip, $cidr) {\n\n        if (false !== strpos($cidr, '/')) {\n            list($address, $netmask) = explode('/', $cidr, 2);\n\n            if ($netmask === '0')\n                return filter_var($address, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);\n\n            if ($netmask < 0 || $netmask > 32)\n                return false;\n\n        } else {\n            $address = $cidr;\n            $netmask = 32;\n        }\n\n        return 0 === substr_compare(\n                sprintf('%032b', ip2long($ip)),\n                sprintf('%032b', ip2long($address)),\n                0, $netmask);\n    }\n\n    /**\n     * Compares two IPv6 addresses.\n     * In case a subnet is given, it checks if it contains the request IP.\n     *\n     * @credit - borrowed from Symfony project\n     * @author David Soria Parra <dsp at php dot net>\n     *\n     * @see https://github.com/dsp/v6tools\n     *\n     */\n    public static function check_ipv6($ip, $cidr) {\n\n        if (!((extension_loaded('sockets') && defined('AF_INET6')) || @inet_pton('::1')))\n            return false;\n\n        if (false !== strpos($cidr, '/')) {\n            list($address, $netmask) = explode('/', $cidr, 2);\n            if ($netmask < 1 || $netmask > 128)\n                return false;\n        } else {\n            $address = $cidr;\n            $netmask = 128;\n        }\n\n        $bytesAddr = unpack('n*', @inet_pton($address));\n        $bytesTest = unpack('n*', @inet_pton($ip));\n        if (!$bytesAddr || !$bytesTest)\n            return false;\n\n        for ($i = 1, $ceil = ceil($netmask / 16); $i <= $ceil; ++$i) {\n            $left = $netmask - 16 * ($i - 1);\n            $left = ($left <= 16) ? $left : 16;\n            $mask = ~(0xffff >> $left) & 0xffff;\n            if (($bytesAddr[$i] & $mask) != ($bytesTest[$i] & $mask)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function process($fields,$vars,&$errors){\n\n        $val = new Validator();\n        $val->setFields($fields);\n        if(!$val->validate($vars))\n            $errors=array_merge($errors,$val->errors());\n\n        return (!$errors);\n    }\n\n    function check_acl($backend) {\n        global $cfg;\n\n        $acl = $cfg->getACL();\n        if (empty($acl))\n            return true;\n        $ip = osTicket::get_client_ip();\n        if (empty($ip))\n            return false;\n\n        $aclbk = $cfg->getACLBackend();\n        switch($backend) {\n            case 'client':\n                if (in_array($aclbk, array(0,3)))\n                    return true;\n                break;\n            case 'staff':\n                if (in_array($aclbk, array(0,2)))\n                    return true;\n                break;\n            default:\n                return false;\n                break;\n        }\n\n        if (!in_array($ip, $acl))\n            return false;\n\n        return true;\n    }\n}\n?>\n", "<?php\n\nrequire_once('client.inc.php');\nif(!defined('INCLUDE_DIR')) die('Fatal Error');\ndefine('CLIENTINC_DIR',INCLUDE_DIR.'client/');\ndefine('OSTCLIENTINC',TRUE); //make includes happy\n\nrequire_once(INCLUDE_DIR.'class.client.php');\n\n$inc = 'pwreset.request.php';\nif($_POST) {\n    if (!$ost->checkCSRFToken()) {\n        Http::response(400, __('Valid CSRF Token Required'));\n        exit;\n    }\n    switch ($_POST['do']) {\n        case 'sendmail':\n            if (($acct=ClientAccount::lookupByUsername($_POST['userid']))) {\n                if (!$acct->isPasswdResetEnabled()) {\n                    $banner = __('Password reset is not enabled for your account. Contact your administrator');\n                }\n                elseif ($acct->sendResetEmail()) {\n                    $inc = 'pwreset.sent.php';\n                }\n                else\n                    $banner = __('Unable to send reset email.')\n                        .' '.__('Internal error occurred');\n            }\n            else\n                $banner = sprintf(__('Unable to verify username %s'),\n                    Format::htmlchars($_POST['userid']));\n            break;\n        case 'reset':\n            $inc = 'pwreset.login.php';\n            $errors = array();\n            if ($client = UserAuthenticationBackend::processSignOn($errors)) {\n                Http::redirect('index.php');\n            }\n            elseif (isset($errors['msg'])) {\n                $banner = $errors['msg'];\n            }\n            break;\n    }\n}\nelseif ($_GET['token']) {\n    $banner = __('Re-enter your username or email');\n    $inc = 'pwreset.login.php';\n    $_config = new Config('pwreset');\n    if (($id = $_config->get($_GET['token']))\n            && ($acct = ClientAccount::lookup(array('user_id'=>substr($id,1))))) {\n        if (!$acct->isConfirmed()) {\n            $inc = 'register.confirmed.inc.php';\n            $acct->confirm();\n            // FIXME: The account has to be uncached in order for the lookup\n            // in the ::processSignOn to detect the confirmation\n            ModelInstanceManager::uncache($acct);\n            // Log the user in\n            if ($client = UserAuthenticationBackend::processSignOn($errors)) {\n                if ($acct->hasPassword() && !$acct->get('backend')) {\n                    $acct->cancelResetTokens();\n                }\n                // No password setup yet -- force one to be created\n                else {\n                    $_SESSION['_client']['reset-token'] = $_GET['token'];\n                    $acct->forcePasswdReset();\n                }\n                Http::redirect('account.php?confirmed');\n            }\n        }\n    }\n    elseif ($id && ($user = User::lookup($id)))\n        $inc = 'pwreset.create.php';\n    else\n        Http::redirect('index.php');\n}\nelse {\n    $banner = __('Enter your username or email address below');\n}\n\n$nav = new UserNav();\n$nav->setActiveNav('status');\nrequire CLIENTINC_DIR.'header.inc.php';\nrequire CLIENTINC_DIR.$inc;\nrequire CLIENTINC_DIR.'footer.inc.php';\n?>\n", "<?php\n/*********************************************************************\n    pwreset.php\n\n    Handles step 2, 3 and 5 of password resetting\n        1. Fail to login (2+ fail login attempts)\n        2. Visit password reset form and enter username or email\n        3. Receive an email with a link and follow it\n        4. Visit password reset form again, with the link\n        5. Enter the username or email address again and login\n        6. Password change is now required, user changes password and\n           continues on with the session\n\n    Peter Rotich <peter@osticket.com>\n    Jared Hancock <jared@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once('../main.inc.php');\nif(!defined('INCLUDE_DIR')) die('Fatal Error. Kwaheri!');\n\n// Bootstrap gettext translations. Since no one is yet logged in, use the\n// system or browser default\nTextDomain::configureForUser();\n\nrequire_once(INCLUDE_DIR.'class.staff.php');\nrequire_once(INCLUDE_DIR.'class.csrf.php');\n\n$tpl = 'pwreset.php';\nif($_POST) {\n    if (!$ost->checkCSRFToken()) {\n        Http::response(400, __('Valid CSRF Token Required'));\n        exit;\n    }\n    switch ($_POST['do']) {\n        case 'sendmail':\n            if (($staff=Staff::lookup($_POST['userid']))) {\n                if (!$staff->hasPassword()) {\n                    if ($staff->sendResetEmail('registration-staff', false) !== false)\n                        $msg = __('Registration email sent successfully.');\n                    else\n                        $msg = __('Unable to reset password. Contact your administrator');\n                }\n                elseif (!$staff->sendResetEmail()) {\n                    $tpl = 'pwreset.sent.php';\n                }\n            }\n            else\n                $msg = sprintf(__('Unable to verify username %s'),\n                    Format::htmlchars($_POST['userid']));\n            break;\n        case 'newpasswd':\n            // TODO: Compare passwords\n            $tpl = 'pwreset.login.php';\n            $errors = array();\n            if ($staff = StaffAuthenticationBackend::processSignOn($errors)) {\n                $info = array('page' => 'index.php');\n                Http::redirect($info['page']);\n            }\n            elseif (isset($errors['msg'])) {\n                $msg = $errors['msg'];\n            }\n            break;\n    }\n}\nelseif ($_GET['token']) {\n    $msg = __('Please enter your username or email');\n    $_config = new Config('pwreset');\n    if (($id = $_config->get($_GET['token']))\n            && ($staff = Staff::lookup($id)))\n        // TODO: Detect staff confirmation (for welcome email)\n        $tpl = 'pwreset.login.php';\n    else\n        header('Location: index.php');\n}\nelseif ($cfg->allowPasswordReset()) {\n    $msg = __('Enter your username or email address below');\n}\nelse {\n    $_SESSION['_staff']['auth']['msg']=__('Password resets are disabled');\n    return header('Location: index.php');\n}\ndefine(\"OSTSCPINC\",TRUE); //Make includes happy!\ninclude_once(INCLUDE_DIR.'staff/'. $tpl);\n"], "fixing_code": ["<?php\n/*********************************************************************\n    class.staff.php\n\n    Everything about staff.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\ninclude_once(INCLUDE_DIR.'class.ticket.php');\ninclude_once(INCLUDE_DIR.'class.dept.php');\ninclude_once(INCLUDE_DIR.'class.error.php');\ninclude_once(INCLUDE_DIR.'class.team.php');\ninclude_once(INCLUDE_DIR.'class.role.php');\ninclude_once(INCLUDE_DIR.'class.passwd.php');\ninclude_once(INCLUDE_DIR.'class.user.php');\ninclude_once(INCLUDE_DIR.'class.auth.php');\n\nclass Staff extends VerySimpleModel\nimplements AuthenticatedUser, EmailContact, TemplateVariable, Searchable {\n\n    static $meta = array(\n        'table' => STAFF_TABLE,\n        'pk' => array('staff_id'),\n        'joins' => array(\n            'dept' => array(\n                'constraint' => array('dept_id' => 'Dept.id'),\n            ),\n            'role' => array(\n                'constraint' => array('role_id' => 'Role.id'),\n            ),\n            'dept_access' => array(\n                'reverse' => 'StaffDeptAccess.staff',\n            ),\n            'teams' => array(\n                'reverse' => 'TeamMember.staff',\n            ),\n        ),\n    );\n\n    var $authkey;\n    var $departments;\n    var $stats = array();\n    var $_extra;\n    var $passwd_change;\n    var $_roles = null;\n    var $_teams = null;\n    var $_config = null;\n    var $_perm;\n\n    function __onload() {\n\n        // WE have to patch info here to support upgrading from old versions.\n        $time = null;\n        if (isset($this->passwdreset) && $this->passwdreset)\n            $time=strtotime($this->passwdreset);\n        elseif (isset($this->added) && $this->added)\n            $time=strtotime($this->added);\n\n        if ($time)\n            $this->passwd_change = time()-$time; //XXX: check timezone issues.\n    }\n\n    function get($field, $default=false) {\n\n       // Check primary fields\n        try {\n            return parent::get($field, $default);\n        } catch (Exception $e) {}\n\n        // Autoload config if not loaded already\n        if (!isset($this->_config))\n            $this->getConfig();\n\n        if (isset($this->_config[$field]))\n            return $this->_config[$field];\n    }\n\n    function getConfig() {\n\n        if (!isset($this->_config) && $this->getId()) {\n            $_config = new Config('staff.'.$this->getId(),\n                    // Defaults\n                    array(\n                        'default_from_name' => '',\n                        'datetime_format'   => '',\n                        'thread_view_order' => '',\n                        'default_ticket_queue_id' => 0,\n                        'reply_redirect' => 'Ticket',\n                        'img_att_view' => 'download',\n                        'editor_spacing' => 'double',\n                        ));\n            $this->_config = $_config->getInfo();\n        }\n\n        return $this->_config;\n    }\n\n    function __toString() {\n        return (string) $this->getName();\n    }\n\n    function asVar() {\n        return $this->__toString();\n    }\n\n    static function getVarScope() {\n      return array(\n        'dept' => array('class' => 'Dept', 'desc' => __('Department')),\n        'email' => __('Email Address'),\n        'name' => array(\n          'class' => 'PersonsName', 'desc' => __('Agent name'),\n        ),\n        'mobile' => __('Mobile Number'),\n        'phone' => __('Phone Number'),\n        'signature' => __('Signature'),\n        'timezone' => \"Agent's configured timezone\",\n        'username' => 'Access username',\n      );\n    }\n\n    function getVar($tag) {\n        switch ($tag) {\n        case 'mobile':\n            return Format::phone($this->ht['mobile']);\n        case 'phone':\n            return Format::phone($this->ht['phone']);\n        }\n    }\n\n    static function getSearchableFields() {\n        return array(\n            'email' => new TextboxField(array(\n                'label' => __('Email Address'),\n            )),\n        );\n    }\n\n    static function supportsCustomData() {\n        return false;\n    }\n\n    function getHashtable() {\n        $base = $this->ht;\n        unset($base['teams']);\n        unset($base['dept_access']);\n\n        if ($this->getConfig())\n            $base += $this->getConfig();\n\n        return $base;\n    }\n\n    function getInfo() {\n        return $this->getHashtable();\n    }\n\n    // AuthenticatedUser implementation...\n    // TODO: Move to an abstract class that extends Staff\n    function getUserType() {\n        return 'staff';\n    }\n\n    function getAuthBackend() {\n        list($bk, ) = explode(':', $this->getAuthKey());\n\n        // If administering a user other than yourself, fallback to the\n        // agent's declared backend, if any\n        if (!$bk && $this->backend)\n            $bk = $this->backend;\n\n        return StaffAuthenticationBackend::getBackend($bk);\n    }\n\n    function setAuthKey($key) {\n        $this->authkey = $key;\n    }\n\n    function getAuthKey() {\n        return $this->authkey;\n    }\n\n    // logOut the user\n    function logOut() {\n\n        if ($bk = $this->getAuthBackend())\n            return $bk->signOut($this);\n\n        return false;\n    }\n\n    /*compares user password*/\n    function check_passwd($password, $autoupdate=true) {\n\n        /*bcrypt based password match*/\n        if(Passwd::cmp($password, $this->getPasswd()))\n            return true;\n\n        //Fall back to MD5\n        if(!$password || strcmp($this->getPasswd(), MD5($password)))\n            return false;\n\n        //Password is a MD5 hash: rehash it (if enabled) otherwise force passwd change.\n        $this->passwd = Passwd::hash($password);\n\n        if(!$autoupdate || !$this->save())\n            $this->forcePasswdRest();\n\n        return true;\n    }\n\n    function cmp_passwd($password) {\n        return $this->check_passwd($password, false);\n    }\n\n    function hasPassword() {\n        return (bool) $this->passwd;\n    }\n\n    function forcePasswdRest() {\n        $this->change_passwd = 1;\n        return $this->save();\n    }\n\n    /* check if passwd reset is due. */\n    function isPasswdResetDue() {\n        global $cfg;\n        return ($cfg && $cfg->getPasswdResetPeriod()\n                    && $this->passwd_change>($cfg->getPasswdResetPeriod()*30*24*60*60));\n    }\n\n    function setPassword($new, $current=false) {\n        global $thisstaff;\n\n        // Allow the backend to update the password. This is the preferred\n        // method as it allows for integration with password policies and\n        // also allows for remotely updating the password where possible and\n        // supported.\n        if (!($bk = $this->getAuthBackend())\n            || !$bk instanceof AuthBackend\n        ) {\n            // Fallback to osTicket authentication token udpates\n            $bk = new osTicketAuthentication();\n        }\n\n        // And now for the magic\n        if (!$bk->supportsPasswordChange()) {\n            throw new PasswordUpdateFailed(\n                __('Authentication backend does not support password updates'));\n        }\n        // Backend should throw PasswordUpdateFailed directly\n        $rv = $bk->setPassword($this, $new, $current);\n\n        // Successfully updated authentication tokens\n        $this->change_passwd = 0;\n        $this->cancelResetTokens();\n        $this->passwdreset = SqlFunction::NOW();\n\n        // Clean sessions\n        Signal::send('auth.clean', $this, $thisstaff);\n\n        return $rv;\n    }\n\n    function canAccess($something) {\n        if ($something instanceof RestrictedAccess)\n            return $something->checkStaffPerm($this);\n\n        return true;\n    }\n\n    function isPasswdChangeDue() {\n        return $this->isPasswdResetDue();\n    }\n\n    function getRefreshRate() {\n        return $this->auto_refresh_rate;\n    }\n\n    function getPageLimit() {\n        return $this->max_page_size;\n    }\n\n    function getId() {\n        return $this->staff_id;\n    }\n    function getUserId() {\n        return $this->getId();\n    }\n\n    function getEmail() {\n        return $this->email;\n    }\n\n    function getAvatar($size=null) {\n        global $cfg;\n        $source = $cfg->getStaffAvatarSource();\n        $avatar = $source->getAvatar($this);\n        if (isset($size))\n            $avatar->setSize($size);\n        return $avatar;\n    }\n\n    function getUserName() {\n        return $this->username;\n    }\n\n    function getPasswd() {\n        return $this->passwd;\n    }\n\n    function getName() {\n        return new AgentsName(array('first' => $this->ht['firstname'], 'last' => $this->ht['lastname']));\n    }\n\n    function getAvatarAndName() {\n        return $this->getAvatar().Format::htmlchars((string) $this->getName());\n    }\n\n    function getFirstName() {\n        return $this->firstname;\n    }\n\n    function getLastName() {\n        return $this->lastname;\n    }\n\n    function getSignature() {\n        return $this->signature;\n    }\n\n    function getDefaultTicketQueueId() {\n        return $this->default_ticket_queue_id;\n    }\n\n    function getDefaultSignatureType() {\n        return $this->default_signature_type;\n    }\n\n    function getReplyFromNameType() {\n        return $this->default_from_name;\n    }\n\n    function getDefaultPaperSize() {\n        return $this->default_paper_size;\n    }\n\n    function getReplyRedirect() {\n        return $this->reply_redirect;\n    }\n\n    function getImageAttachmentView() {\n        return $this->img_att_view;\n    }\n\n    function editorSpacing() {\n        return $this->editor_spacing;\n    }\n\n    function forcePasswdChange() {\n        return $this->change_passwd;\n    }\n\n    function getDepartments() {\n        // TODO: Cache this in the agent's session as it is unlikely to\n        //       change while logged in\n\n        if (!isset($this->departments)) {\n\n            // Departments the staff is \"allowed\" to access...\n            // based on the group they belong to + user's primary dept + user's managed depts.\n            $sql='SELECT DISTINCT d.id FROM '.STAFF_TABLE.' s '\n                .' LEFT JOIN '.STAFF_DEPT_TABLE.' g ON (s.staff_id=g.staff_id) '\n                .' INNER JOIN '.DEPT_TABLE.' d ON (LOCATE(CONCAT(\"/\", s.dept_id, \"/\"), d.path) OR d.manager_id=s.staff_id OR LOCATE(CONCAT(\"/\", g.dept_id, \"/\"), d.path)) '\n                .' WHERE s.staff_id='.db_input($this->getId());\n            $depts = array();\n            if (($res=db_query($sql)) && db_num_rows($res)) {\n                while(list($id)=db_fetch_row($res))\n                    $depts[] = (int) $id;\n            }\n\n            /* ORM method \u2014\u00a0about 2.0ms slower\n            $q = Q::any(array(\n                'path__contains' => '/'.$this->dept_id.'/',\n                'manager_id' => $this->getId(),\n            ));\n            // Add in extended access\n            foreach ($this->dept_access->depts->values_flat('dept_id') as $row) {\n                // Skip primary dept\n                if ($row[0] == $this->dept_id)\n                    continue;\n                $q->add(new Q(array('path__contains'=>'/'.$row[0].'/')));\n            }\n\n            $dept_ids = Dept::objects()\n                ->filter($q)\n                ->distinct('id')\n                ->values_flat('id');\n\n            foreach ($dept_ids as $row)\n                $depts[] = $row[0];\n            */\n\n            $this->departments = $depts;\n        }\n\n        return $this->departments;\n    }\n\n    function getDepts() {\n        return $this->getDepartments();\n    }\n\n    function getManagedDepartments() {\n\n        return ($depts=Dept::getDepartments(\n                    array('manager' => $this->getId())\n                    ))?array_keys($depts):array();\n    }\n\n    function getDeptId() {\n        return $this->dept_id;\n    }\n\n    function getDept() {\n        return $this->dept;\n    }\n\n    function setDepartmentId($dept_id, $eavesdrop=false) {\n        // Grant access to the current department\n        $old = $this->dept_id;\n        if ($eavesdrop) {\n            $da = new StaffDeptAccess(array(\n                'dept_id' => $old,\n                'role_id' => $this->role_id,\n            ));\n            $da->setAlerts(true);\n            $this->dept_access->add($da);\n        }\n\n        // Drop extended access to new department\n        $this->dept_id = $dept_id;\n        if ($da = $this->dept_access->findFirst(array(\n            'dept_id' => $dept_id))\n        ) {\n            $this->dept_access->remove($da);\n        }\n\n        $this->save();\n    }\n\n    function usePrimaryRoleOnAssignment() {\n        return $this->getExtraAttr('def_assn_role', true);\n    }\n\n    function getLanguage() {\n        return (isset($this->lang)) ? $this->lang : false;\n    }\n\n    function getTimezone() {\n        if (isset($this->timezone))\n            return $this->timezone;\n    }\n\n    function getLocale() {\n        //XXX: isset is required here to avoid possible crash when upgrading\n        // installation where locale column doesn't exist yet.\n        return isset($this->locale) ? $this->locale : 0;\n    }\n\n    function getRoles() {\n        if (!isset($this->_roles)) {\n            $this->_roles = array($this->dept_id => $this->role);\n            foreach($this->dept_access as $da)\n                $this->_roles[$da->dept_id] = $da->role;\n        }\n\n        return $this->_roles;\n    }\n\n    function getRole($dept=null, $assigned=false) {\n\n        if (is_null($dept))\n            return $this->role;\n\n       if (is_numeric($dept))\n          $deptId = $dept;\n       elseif($dept instanceof Dept)\n          $deptId = $dept->getId();\n       else\n          return null;\n\n        $roles = $this->getRoles();\n        if (isset($roles[$deptId]))\n            return $roles[$deptId];\n\n        // Default to primary role.\n        if ($assigned && $this->usePrimaryRoleOnAssignment())\n            return $this->role;\n\n        // Ticket Create & View only access\n        $perms = JSONDataEncoder::encode(array(\n                    Ticket::PERM_CREATE => 1));\n        return new Role(array('permissions' => $perms));\n    }\n\n    function hasPerm($perm, $global=true) {\n        if ($global)\n            return $this->getPermission()->has($perm);\n        if ($this->getRole()->hasPerm($perm))\n            return true;\n        foreach ($this->dept_access as $da)\n            if ($da->role->hasPerm($perm))\n                return true;\n        return false;\n    }\n\n    function canSearchEverything() {\n        return $this->hasPerm(SearchBackend::PERM_EVERYTHING);\n    }\n\n    function canManageTickets() {\n        return $this->hasPerm(Ticket::PERM_DELETE, false)\n                || $this->hasPerm(Ticket::PERM_TRANSFER, false)\n                || $this->hasPerm(Ticket::PERM_ASSIGN, false)\n                || $this->hasPerm(Ticket::PERM_CLOSE, false);\n    }\n\n    function isManager($dept=null) {\n        return (($dept=$dept?:$this->getDept()) && $dept->getManagerId()==$this->getId());\n    }\n\n    function isStaff() {\n        return TRUE;\n    }\n\n    function isActive() {\n        return $this->isactive;\n    }\n\n    function getStatus() {\n        return $this->isActive() ? __('Active') : __('Locked');\n    }\n\n    function isVisible() {\n         return $this->isvisible;\n    }\n\n    function onVacation() {\n        return $this->onvacation;\n    }\n\n    function isAvailable() {\n        return ($this->isActive() && !$this->onVacation());\n    }\n\n    function showAssignedOnly() {\n        return $this->assigned_only;\n    }\n\n    function isAccessLimited() {\n        return $this->showAssignedOnly();\n    }\n\n    function isAdmin() {\n        return $this->isadmin;\n    }\n\n    function isTeamMember($teamId) {\n        return ($teamId && in_array($teamId, $this->getTeams()));\n    }\n\n    function canAccessDept($dept) {\n\n        if (!$dept instanceof Dept)\n            return false;\n\n        return (!$this->isAccessLimited()\n                && in_array($dept->getId(), $this->getDepts()));\n    }\n\n    function getTeams() {\n\n        if (!isset($this->_teams)) {\n            $this->_teams = array();\n            foreach ($this->teams as $team)\n                 $this->_teams[] = (int) $team->team_id;\n        }\n\n        return $this->_teams;\n    }\n\n    function getTicketsVisibility($exclude_archived=false) {\n        // -- Open and assigned to me\n        $assigned = Q::any(array(\n            'staff_id' => $this->getId(),\n        ));\n        $assigned->add(array('thread__referrals__agent__staff_id' => $this->getId()));\n        $childRefAgent = Q::all(new Q(array('child_thread__object_type' => 'C',\n            'child_thread__referrals__agent__staff_id' => $this->getId())));\n        $assigned->add($childRefAgent);\n        // -- Open and assigned to a team of mine\n        if (($teams = array_filter($this->getTeams()))) {\n            $assigned->add(array('team_id__in' => $teams));\n            $assigned->add(array('thread__referrals__team__team_id__in' => $teams));\n            $childRefTeam = Q::all(new Q(array('child_thread__object_type' => 'C',\n                'child_thread__referrals__team__team_id__in' => $teams)));\n            $assigned->add($childRefTeam);\n        }\n        $visibility = Q::any(new Q(array('status__state'=>'open', $assigned)));\n        // -- If access is limited to assigned only, return assigned\n        if ($this->isAccessLimited())\n            return $visibility;\n        // -- Routed to a department of mine\n        if (($depts=$this->getDepts()) && count($depts)) {\n            $in_dept = Q::any(array(\n                'dept_id__in' => $depts,\n                'thread__referrals__dept__id__in' => $depts,\n            ));\n            if ($exclude_archived) {\n                $in_dept = Q::all(array(\n                    'status__state__in' => ['open', 'closed'],\n                    $in_dept,\n                ));\n            }\n            $visibility->add($in_dept);\n            $childRefDept = Q::all(new Q(array('child_thread__object_type' => 'C',\n                'child_thread__referrals__dept__id__in' => $depts)));\n            $visibility->add($childRefDept);\n        }\n        return $visibility;\n    }\n\n    function applyVisibility($query, $exclude_archived=false) {\n        return $query->filter($this->getTicketsVisibility($exclude_archived));\n    }\n\n    /* stats */\n    function resetStats() {\n        $this->stats = array();\n    }\n\n    function getTasksStats() {\n\n        if (!$this->stats['tasks'])\n            $this->stats['tasks'] = Task::getStaffStats($this);\n\n        return  $this->stats['tasks'];\n    }\n\n    function getNumAssignedTasks() {\n        return ($stats=$this->getTasksStats()) ? $stats['assigned'] : 0;\n    }\n\n    function getNumClosedTasks() {\n        return ($stats=$this->getTasksStats()) ? $stats['closed'] : 0;\n    }\n\n    function getExtraAttr($attr=false, $default=null) {\n        if (!isset($this->_extra) && isset($this->extra))\n            $this->_extra = JsonDataParser::decode($this->extra);\n\n        return $attr\n            ? (isset($this->_extra[$attr]) ? $this->_extra[$attr] : $default)\n            : $this->_extra;\n    }\n\n    function setExtraAttr($attr, $value, $commit=true) {\n        $this->getExtraAttr();\n        $this->_extra[$attr] = $value;\n        $this->extra = JsonDataEncoder::encode($this->_extra);\n\n        if ($commit) {\n            $this->save();\n        }\n    }\n\n    function getPermission() {\n        if (!isset($this->_perm)) {\n            $this->_perm = new RolePermission($this->permissions);\n        }\n        return $this->_perm;\n    }\n\n    function getPermissionInfo() {\n        return $this->getPermission()->getInfo();\n    }\n\n    function onLogin($bk) {\n        // Update last apparent language preference\n        $this->setExtraAttr('browser_lang',\n            Internationalization::getCurrentLanguage(),\n            false);\n\n        $this->lastlogin = SqlFunction::NOW();\n        $this->save();\n    }\n\n    //Staff profile update...unfortunately we have to separate it from admin update to avoid potential issues\n    function updateProfile($vars, &$errors) {\n        global $cfg;\n\n        $vars['firstname']=Format::striptags($vars['firstname']);\n        $vars['lastname']=Format::striptags($vars['lastname']);\n\n        if (isset($this->staff_id) && $this->getId() != $vars['id'])\n            $errors['err']=__('Internal error occurred');\n\n        if(!$vars['firstname'])\n            $errors['firstname']=__('First name is required');\n\n        if(!$vars['lastname'])\n            $errors['lastname']=__('Last name is required');\n\n        if(!$vars['email'] || !Validator::is_valid_email($vars['email']))\n            $errors['email']=__('Valid email is required');\n        elseif(Email::getIdByEmail($vars['email']))\n            $errors['email']=__('Already in-use as system email');\n        elseif (($uid=static::getIdByEmail($vars['email']))\n                && (!isset($this->staff_id) || $uid!=$this->getId()))\n            $errors['email']=__('Email already in use by another agent');\n\n        if($vars['phone'] && !Validator::is_phone($vars['phone']))\n            $errors['phone']=__('Valid phone number is required');\n\n        if($vars['mobile'] && !Validator::is_phone($vars['mobile']))\n            $errors['mobile']=__('Valid phone number is required');\n\n        if($vars['default_signature_type']=='mine' && !$vars['signature'])\n            $errors['default_signature_type'] = __(\"You don't have a signature\");\n\n        // Update the user's password if requested\n        if ($vars['passwd1']) {\n            try {\n                $this->setPassword($vars['passwd1'], $vars['cpasswd']);\n            }\n            catch (BadPassword $ex) {\n                $errors['passwd1'] = $ex->getMessage();\n            }\n            catch (PasswordUpdateFailed $ex) {\n                // TODO: Add a warning banner or crash the update\n            }\n        }\n\n        $vars['onvacation'] = isset($vars['onvacation']) ? 1 : 0;\n        $this->firstname = $vars['firstname'];\n        $this->lastname = $vars['lastname'];\n        $this->email = $vars['email'];\n        $this->phone = Format::phone($vars['phone']);\n        $this->phone_ext = $vars['phone_ext'];\n        $this->mobile = Format::phone($vars['mobile']);\n        $this->signature = Format::sanitize($vars['signature']);\n        $this->timezone = $vars['timezone'];\n        $this->locale = $vars['locale'];\n        $this->max_page_size = $vars['max_page_size'];\n        $this->auto_refresh_rate = $vars['auto_refresh_rate'];\n        $this->default_signature_type = $vars['default_signature_type'];\n        $this->default_paper_size = $vars['default_paper_size'];\n        $this->lang = $vars['lang'];\n        $this->onvacation = $vars['onvacation'];\n\n        if (isset($vars['avatar_code']))\n          $this->setExtraAttr('avatar', $vars['avatar_code']);\n\n        if ($errors)\n            return false;\n\n        $_SESSION['::lang'] = null;\n        TextDomain::configureForUser($this);\n\n        // Update the config information\n        $_config = new Config('staff.'.$this->getId());\n        $_config->updateAll(array(\n                    'datetime_format' => $vars['datetime_format'],\n                    'default_from_name' => $vars['default_from_name'],\n                    'thread_view_order' => $vars['thread_view_order'],\n                    'default_ticket_queue_id' => $vars['default_ticket_queue_id'],\n                    'reply_redirect' => ($vars['reply_redirect'] == 'Queue') ? 'Queue' : 'Ticket',\n                    'img_att_view' => ($vars['img_att_view'] == 'inline') ? 'inline' : 'download',\n                    'editor_spacing' => ($vars['editor_spacing'] == 'double') ? 'double' : 'single'\n                    )\n                );\n        $this->_config = $_config->getInfo();\n\n        return $this->save();\n    }\n\n    function updateTeams($membership, &$errors) {\n        $dropped = array();\n        foreach ($this->teams as $TM)\n            $dropped[$TM->team_id] = 1;\n\n        reset($membership);\n        while(list(, list($team_id, $alerts)) = each($membership)) {\n            $member = $this->teams->findFirst(array('team_id' => $team_id));\n            if (!$member) {\n                $this->teams->add($member = new TeamMember(array(\n                    'team_id' => $team_id,\n                )));\n            }\n            $member->setAlerts($alerts);\n            if (!$errors)\n                $member->save();\n            unset($dropped[$member->team_id]);\n        }\n        if (!$errors && $dropped) {\n            $member = $this->teams\n                ->filter(array('team_id__in' => array_keys($dropped)))\n                ->delete();\n            $this->teams->reset();\n        }\n        return true;\n    }\n\n    function delete() {\n        global $thisstaff;\n\n        if (!$thisstaff || $this->getId() == $thisstaff->getId())\n            return false;\n\n        if (!parent::delete())\n            return false;\n\n        $type = array('type' => 'deleted');\n        Signal::send('object.deleted', $this, $type);\n\n        // DO SOME HOUSE CLEANING\n        //Move remove any ticket assignments...TODO: send alert to Dept. manager?\n        Ticket::objects()\n            ->filter(array('staff_id' => $this->getId()))\n            ->update(array('staff_id' => 0));\n\n        //Update the poster and clear staff_id on ticket thread table.\n        ThreadEntry::objects()\n            ->filter(array('staff_id' => $this->getId()))\n            ->update(array(\n                'staff_id' => 0,\n                'poster' => $this->getName()->getOriginal(),\n            ));\n\n        // Cleanup Team membership table.\n        TeamMember::objects()\n            ->filter(array('staff_id'=>$this->getId()))\n            ->delete();\n\n        // Cleanup staff dept access\n        StaffDeptAccess::objects()\n            ->filter(array('staff_id'=>$this->getId()))\n            ->delete();\n\n        return true;\n    }\n\n    /**** Static functions ********/\n    static function lookup($var) {\n        if (is_array($var))\n            return parent::lookup($var);\n        elseif (is_numeric($var))\n            return parent::lookup(array('staff_id' => (int) $var));\n        elseif (Validator::is_email($var))\n            return parent::lookup(array('email' => $var));\n        elseif (is_string($var) &&  Validator::is_username($var))\n            return parent::lookup(array('username' => (string) $var));\n        else\n            return null;\n    }\n\n    static function getStaffMembers($criteria=array()) {\n        global $cfg;\n\n        $members = static::objects();\n\n        if (isset($criteria['available'])) {\n            $members = $members->filter(array(\n                'onvacation' => 0,\n                'isactive' => 1,\n            ));\n        }\n\n        $members = self::nsort($members);\n\n        $users=array();\n        foreach ($members as $M) {\n            $users[$M->getId()] = $M->getName();\n        }\n\n        return $users;\n    }\n\n    static function getAvailableStaffMembers() {\n        return self::getStaffMembers(array('available'=>true));\n    }\n\n    static function getsortby($path='', $format=null) {\n        global $cfg;\n\n        $format = $format ?: $cfg->getAgentNameFormat();\n        switch ($format) {\n        case 'last':\n        case 'lastfirst':\n        case 'legal':\n            $fields = array(\"{$path}lastname\", \"{$path}firstname\");\n            break;\n        default:\n            $fields = array(\"${path}firstname\", \"${path}lastname\");\n        }\n\n        return $fields;\n    }\n\n    static function nsort(QuerySet $qs, $path='', $format=null) {\n        $fields = self::getsortby($path, $format);\n        $qs->order_by($fields);\n        return $qs;\n    }\n\n    static function getIdByUsername($username) {\n        $row = static::objects()->filter(array('username' => $username))\n            ->values_flat('staff_id')->first();\n        return $row ? $row[0] : 0;\n    }\n\n    static function getIdByEmail($email) {\n        $row = static::objects()->filter(array('email' => $email))\n            ->values_flat('staff_id')->first();\n        return $row ? $row[0] : 0;\n    }\n\n\n    static function create($vars=false) {\n        $staff = new static($vars);\n        $staff->created = SqlFunction::NOW();\n        return $staff;\n    }\n\n    function cancelResetTokens() {\n        // TODO: Drop password-reset tokens from the config table for\n        //       this user id\n        $sql = 'DELETE FROM '.CONFIG_TABLE.' WHERE `namespace`=\"pwreset\"\n            AND `value`='.db_input($this->getId());\n        db_query($sql, false);\n        unset($_SESSION['_staff']['reset-token']);\n    }\n\n    function sendResetEmail($template='pwreset-staff', $log=true) {\n        global $ost, $cfg;\n\n        $content = Page::lookupByType($template);\n        $token = Misc::randCode(48); // 290-bits\n\n        if (!$content)\n            return new BaseError(/* @trans */ 'Unable to retrieve password reset email template');\n\n        $vars = array(\n            'url' => $ost->getConfig()->getBaseUrl(),\n            'token' => $token,\n            'staff' => $this,\n            'recipient' => $this,\n            'reset_link' => sprintf(\n                \"%s/scp/pwreset.php?token=%s\",\n                $ost->getConfig()->getBaseUrl(),\n                $token),\n        );\n        $vars['link'] = &$vars['reset_link'];\n\n        if (!($email = $cfg->getAlertEmail()))\n            $email = $cfg->getDefaultEmail();\n\n        $info = array('email' => $email, 'vars' => &$vars, 'log'=>$log);\n        Signal::send('auth.pwreset.email', $this, $info);\n\n        if ($info['log'])\n            $ost->logWarning(_S('Agent Password Reset'), sprintf(\n             _S('Password reset was attempted for agent: %1$s<br><br>\n                Requested-User-Id: %2$s<br>\n                Source-Ip: %3$s<br>\n                Email-Sent-To: %4$s<br>\n                Email-Sent-Via: %5$s'),\n                $this->getName(),\n                $_POST['userid'],\n                $_SERVER['REMOTE_ADDR'],\n                $this->getEmail(),\n                $email->getEmail()\n            ), false);\n\n        $lang = $this->lang ?: $this->getExtraAttr('browser_lang');\n        $msg = $ost->replaceTemplateVariables(array(\n            'subj' => $content->getLocalName($lang),\n            'body' => $content->getLocalBody($lang),\n        ), $vars);\n\n        $_config = new Config('pwreset');\n        $_config->set($vars['token'], $this->getId());\n\n        $email->send($this->getEmail(), Format::striptags($msg['subj']),\n            $msg['body']);\n    }\n\n    static function importCsv($stream, $defaults=array(), $callback=false) {\n        require_once INCLUDE_DIR . 'class.import.php';\n\n        $importer = new CsvImporter($stream);\n        $imported = 0;\n        $fields = array(\n            'firstname' => new TextboxField(array(\n                'label' => __('First Name'),\n            )),\n            'lastname' => new TextboxField(array(\n                'label' => __('Last Name'),\n            )),\n            'email' => new TextboxField(array(\n                'label' => __('Email Address'),\n                'configuration' => array(\n                    'validator' => 'email',\n                ),\n            )),\n            'username' => new TextboxField(array(\n                'label' => __('Username'),\n                'validators' => function($self, $value) {\n                    if (!Validator::is_username($value))\n                        $self->addError('Not a valid username');\n                },\n            )),\n        );\n        $form = new SimpleForm($fields);\n\n        try {\n            db_autocommit(false);\n            $errors = array();\n            $records = $importer->importCsv($form->getFields(), $defaults);\n            foreach ($records as $data) {\n                if (!isset($data['email']) || !isset($data['username']))\n                    throw new ImportError('Both `username` and `email` fields are required');\n\n                if ($agent = self::lookup(array('username' => $data['username']))) {\n                    // TODO: Update the user\n                }\n                elseif ($agent = self::create($data, $errors)) {\n                    if ($callback)\n                        $callback($agent, $data);\n                    $agent->save();\n                }\n                else {\n                    throw new ImportError(sprintf(__('Unable to import (%s): %s'),\n                        Format::htmlchars($data['username']),\n                        print_r(Format::htmlchars($errors), true)\n                    ));\n                }\n                $imported++;\n            }\n            db_autocommit(true);\n        }\n        catch (Exception $ex) {\n            db_rollback();\n            return $ex->getMessage();\n        }\n        return $imported;\n    }\n\n    function save($refetch=false) {\n        if ($this->dirty)\n            $this->updated = SqlFunction::NOW();\n        return parent::save($refetch || $this->dirty);\n    }\n\n    function update($vars, &$errors) {\n        $vars['username']=Format::striptags($vars['username']);\n        $vars['firstname']=Format::striptags($vars['firstname']);\n        $vars['lastname']=Format::striptags($vars['lastname']);\n\n        if (isset($this->staff_id) && $this->getId() != $vars['id'])\n            $errors['err']=__('Internal error occurred');\n\n        if(!$vars['firstname'])\n            $errors['firstname']=__('First name required');\n        if(!$vars['lastname'])\n            $errors['lastname']=__('Last name required');\n\n        $error = '';\n        if(!$vars['username'] || !Validator::is_username($vars['username'], $error))\n            $errors['username']=($error) ? $error : __('Username is required');\n        elseif (($uid=static::getIdByUsername($vars['username']))\n                && (!isset($this->staff_id) || $uid!=$this->getId()))\n            $errors['username']=__('Username already in use');\n\n        if(!$vars['email'] || !Validator::is_valid_email($vars['email']))\n            $errors['email']=__('Valid email is required');\n        elseif(Email::getIdByEmail($vars['email']))\n            $errors['email']=__('Already in use system email');\n        elseif (($uid=static::getIdByEmail($vars['email']))\n                && (!isset($this->staff_id) || $uid!=$this->getId()))\n            $errors['email']=__('Email already in use by another agent');\n\n        if($vars['phone'] && !Validator::is_phone($vars['phone']))\n            $errors['phone']=__('Valid phone number is required');\n\n        if($vars['mobile'] && !Validator::is_phone($vars['mobile']))\n            $errors['mobile']=__('Valid phone number is required');\n\n        if(!$vars['dept_id'])\n            $errors['dept_id']=__('Department is required');\n        if(!$vars['role_id'])\n            $errors['role_id']=__('Role for primary department is required');\n\n        $dept = Dept::lookup($vars['dept_id']);\n        if($dept && !$dept->isActive())\n          $errors['dept_id'] = sprintf(__('%s selected must be active'), __('Department'));\n\n        // Ensure we will still have an administrator with access\n        if ($vars['isadmin'] !== '1' || $vars['islocked'] === '1') {\n            $sql = 'select count(*), max(staff_id) from '.STAFF_TABLE\n                .' WHERE isadmin=1 and isactive=1';\n            if (($res = db_query($sql))\n                    && (list($count, $sid) = db_fetch_row($res))) {\n                if ($count == 1 && $sid == $uid) {\n                    $errors['isadmin'] = __(\n                        'Cowardly refusing to remove or lock out the only active administrator'\n                    );\n                }\n            }\n        }\n\n        // Update the local permissions\n        $this->updatePerms($vars['perms'], $errors);\n\n        //checkboxes\n        $vars['isadmin'] = isset($vars['isadmin']) ? 1 : 0;\n        $vars['islocked'] = isset($vars['islocked']) ? 0 : 1;\n        $vars['isvisible'] = isset($vars['isvisible']) ? 1 : 0;\n        $vars['onvacation'] = isset($vars['onvacation']) ? 1 : 0;\n        $vars['assigned_only'] = isset($vars['assigned_only']) ? 1 : 0;\n\n        $this->isadmin = $vars['isadmin'];\n        $this->isactive = $vars['islocked'];\n        $this->isvisible = $vars['isvisible'];\n        $this->onvacation = $vars['onvacation'];\n        $this->assigned_only = $vars['assigned_only'];\n        $this->role_id = $vars['role_id'];\n        $this->username = $vars['username'];\n        $this->firstname = $vars['firstname'];\n        $this->lastname = $vars['lastname'];\n        $this->email = $vars['email'];\n        $this->backend = $vars['backend'];\n        $this->phone = Format::phone($vars['phone']);\n        $this->phone_ext = $vars['phone_ext'];\n        $this->mobile = Format::phone($vars['mobile']);\n        $this->notes = Format::sanitize($vars['notes']);\n\n        // Set staff password if exists\n        if (!$vars['welcome_email'] && $vars['passwd1']) {\n            $this->setPassword($vars['passwd1'], null);\n            $this->change_passwd = $vars['change_passwd'] ? 1 : 0;\n        }\n\n        if ($errors)\n            return false;\n\n        if ($this->save()) {\n            // Update some things for ::updateAccess to inspect\n            $this->setDepartmentId($vars['dept_id']);\n\n            // Format access update as [array(dept_id, role_id, alerts?)]\n            $access = array();\n            if (isset($vars['dept_access'])) {\n                foreach (@$vars['dept_access'] as $dept_id) {\n                    $access[] = array($dept_id, $vars['dept_access_role'][$dept_id],\n                        @$vars['dept_access_alerts'][$dept_id]);\n                }\n            }\n            $this->updateAccess($access, $errors);\n            $this->setExtraAttr('def_assn_role',\n                isset($vars['assign_use_pri_role']), true);\n\n            // Format team membership as [array(team_id, alerts?)]\n            $teams = array();\n            if (isset($vars['teams'])) {\n                foreach (@$vars['teams'] as $team_id) {\n                    $teams[] = array($team_id, @$vars['team_alerts'][$team_id]);\n                }\n            }\n            $this->updateTeams($teams, $errors);\n\n            if ($vars['welcome_email'])\n                $this->sendResetEmail('registration-staff', false);\n            return true;\n        }\n\n        if (isset($this->staff_id)) {\n            $errors['err']=sprintf(__('Unable to update %s.'), __('this agent'))\n               .' '.__('Internal error occurred');\n        } else {\n            $errors['err']=sprintf(__('Unable to create %s.'), __('this agent'))\n               .' '.__('Internal error occurred');\n        }\n        return false;\n    }\n\n    /**\n     * Parameters:\n     * $access - (<array($dept_id, $role_id, $alerts)>) a list of the complete,\n     *      extended access for this agent. Any the agent currently has, which\n     *      is not listed will be removed.\n     * $errors - (<array>) list of error messages from the process, which will\n     *      be indexed by the dept_id number.\n     */\n    function updateAccess($access, &$errors) {\n        reset($access);\n        $dropped = array();\n        foreach ($this->dept_access as $DA)\n            $dropped[$DA->dept_id] = 1;\n        while (list(, list($dept_id, $role_id, $alerts)) = each($access)) {\n            unset($dropped[$dept_id]);\n            if (!$role_id || !Role::lookup($role_id))\n                $errors['dept_access'][$dept_id] = __('Select a valid role');\n            if (!$dept_id || !($dept=Dept::lookup($dept_id)))\n                $errors['dept_access'][$dept_id] = __('Select a valid department');\n            if ($dept_id == $this->getDeptId())\n                $errors['dept_access'][$dept_id] = sprintf(__('Agent already has access to %s'), __('this department'));\n            $da = $this->dept_access->findFirst(array('dept_id' => $dept_id));\n            if (!isset($da)) {\n                $da = new StaffDeptAccess(array(\n                    'dept_id' => $dept_id, 'role_id' => $role_id\n                ));\n                $this->dept_access->add($da);\n                $type = array('type' => 'edited',\n                              'key' => sprintf('%s Department Access Added', $dept->getName()));\n                Signal::send('object.edited', $this, $type);\n            }\n            else {\n                $da->role_id = $role_id;\n            }\n            $da->setAlerts($alerts);\n            if (!$errors)\n                $da->save();\n        }\n        if (!$errors && $dropped) {\n            $this->dept_access\n                ->filter(array('dept_id__in' => array_keys($dropped)))\n                ->delete();\n            $this->dept_access->reset();\n            foreach (array_keys($dropped) as $dept_id) {\n                $deptName = Dept::getNameById($dept_id);\n                $type = array('type' => 'edited',\n                              'key' => sprintf('%s Department Access Removed', $deptName));\n                Signal::send('object.edited', $this, $type);\n            }\n        }\n        return !$errors;\n    }\n\n    function updatePerms($vars, &$errors=array()) {\n        if (!$vars) {\n            $this->permissions = '';\n            return;\n        }\n        $permissions = $this->getPermission();\n        foreach ($vars as $k => $val) {\n             if (!$permissions->exists($val)) {\n                 $type = array('type' => 'edited', 'key' => $val);\n                 Signal::send('object.edited', $this, $type);\n             }\n         }\n\n        foreach (RolePermission::allPermissions() as $g => $perms) {\n            foreach ($perms as $k => $v) {\n                if (!in_array($k, $vars) && $permissions->exists($k)) {\n                     $type = array('type' => 'edited', 'key' => $k);\n                     Signal::send('object.edited', $this, $type);\n                 }\n                $permissions->set($k, in_array($k, $vars) ? 1 : 0);\n            }\n        }\n        $this->permissions = $permissions->toJson();\n        return true;\n    }\n\n    static function export($criteria=null, $filename='') {\n        include_once(INCLUDE_DIR.'class.error.php');\n\n        $agents = Staff::objects();\n        // Sort based on name formating\n        $agents = self::nsort($agents);\n        Export::agents($agents, $filename);\n    }\n\n}\n\ninterface RestrictedAccess {\n    function checkStaffPerm($staff);\n}\n\nclass StaffDeptAccess extends VerySimpleModel {\n    static $meta = array(\n        'table' => STAFF_DEPT_TABLE,\n        'pk' => array('staff_id', 'dept_id'),\n        'select_related' => array('dept', 'role'),\n        'joins' => array(\n            'dept' => array(\n                'constraint' => array('dept_id' => 'Dept.id'),\n            ),\n            'staff' => array(\n                'constraint' => array('staff_id' => 'Staff.staff_id'),\n            ),\n            'role' => array(\n                'constraint' => array('role_id' => 'Role.id'),\n            ),\n        ),\n    );\n\n    const FLAG_ALERTS =     0x0001;\n\n    function isAlertsEnabled() {\n        return $this->flags & self::FLAG_ALERTS != 0;\n    }\n\n    function setFlag($flag, $value) {\n        if ($value)\n            $this->flags |= $flag;\n        else\n            $this->flags &= ~$flag;\n    }\n\n    function setAlerts($value) {\n        $this->setFlag(self::FLAG_ALERTS, $value);\n    }\n}\n\n/**\n * This form is used to administratively change the password. The\n * ChangePasswordForm is used for an agent to change their own password.\n */\nclass PasswordResetForm\nextends AbstractForm {\n    function buildFields() {\n        return array(\n            'welcome_email' => new BooleanField(array(\n                'default' => true,\n                'configuration' => array(\n                    'desc' => __('Send the agent a password reset email'),\n                ),\n            )),\n            'passwd1' => new PasswordField(array(\n                'placeholder' => __('New Password'),\n                'required' => true,\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false)),\n                    VisibilityConstraint::HIDDEN\n                ),\n            )),\n            'passwd2' => new PasswordField(array(\n                'placeholder' => __('Confirm Password'),\n                'required' => true,\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false)),\n                    VisibilityConstraint::HIDDEN\n                ),\n            )),\n            'change_passwd' => new BooleanField(array(\n                'default' => true,\n                'configuration' => array(\n                    'desc' => __('Require password change at next login'),\n                    'classes' => 'form footer',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false)),\n                    VisibilityConstraint::HIDDEN\n                ),\n            )),\n        );\n    }\n\n    function validate($clean) {\n        if ($clean['passwd1'] != $clean['passwd2'])\n            $this->getField('passwd1')->addError(__('Passwords do not match'));\n    }\n}\n\nclass PasswordChangeForm\nextends AbstractForm {\n    function buildFields() {\n        $fields = array(\n            'current' => new PasswordField(array(\n                'placeholder' => __('Current Password'),\n                'required' => true,\n                'configuration' => array(\n                    'autofocus' => true,\n                ),\n            )),\n            'passwd1' => new PasswordField(array(\n                'label' => __('Enter a new password'),\n                'placeholder' => __('New Password'),\n                'required' => true,\n            )),\n            'passwd2' => new PasswordField(array(\n                'placeholder' => __('Confirm Password'),\n                'required' => true,\n            )),\n        );\n\n        // When using the password reset system, the current password is not\n        // required for agents.\n        if (isset($_SESSION['_staff']['reset-token'])) {\n            unset($fields['current']);\n            $fields['passwd1']->set('configuration', array('autofocus' => true));\n        }\n        else {\n            $fields['passwd1']->set('layout',\n                new GridFluidCell(12, array('style' => 'padding-top: 20px'))\n            );\n        }\n        return $fields;\n    }\n\n    function getInstructions() {\n        return __('Confirm your current password and enter a new password to continue');\n    }\n\n    function validate($clean) {\n        if ($clean['passwd1'] != $clean['passwd2'])\n            $this->getField('passwd1')->addError(__('Passwords do not match'));\n    }\n}\n\nclass ResetAgentPermissionsForm\nextends AbstractForm {\n    function buildFields() {\n        $permissions = array();\n        foreach (RolePermission::allPermissions() as $g => $perms) {\n            foreach ($perms as $k => $v) {\n                if (!$v['primary'])\n                    continue;\n                $permissions[$g][$k] = \"{$v['title']} \u2014 {$v['desc']}\";\n            }\n        }\n        return array(\n            'clone' => new ChoiceField(array(\n                'default' => 0,\n                'choices' =>\n                    array(0 => '\u2014 '.__('Clone an existing agent').' \u2014')\n                    + Staff::getStaffMembers(),\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n            )),\n            'perms' => new ChoiceField(array(\n                'choices' => $permissions,\n                'widget' => 'TabbedBoxChoicesWidget',\n                'configuration' => array(\n                    'multiple' => true,\n                ),\n            )),\n        );\n    }\n\n    function getClean($validate = true) {\n        $clean = parent::getClean();\n        // Index permissions as ['ticket.edit' => 1]\n        $clean['perms'] = array_keys($clean['perms']);\n        return $clean;\n    }\n\n    function render($staff=true, $title=false, $options=array()) {\n        return parent::render($staff, $title, $options + array('template' => 'dynamic-form-simple.tmpl.php'));\n    }\n}\n\nclass ChangeDepartmentForm\nextends AbstractForm {\n    function buildFields() {\n        return array(\n            'dept_id' => new ChoiceField(array(\n                'default' => 0,\n                'required' => true,\n                'label' => __('Primary Department'),\n                'choices' =>\n                    array(0 => '\u2014 '.__('Primary Department').' \u2014')\n                    + Dept::getDepartments(),\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n            )),\n            'role_id' => new ChoiceField(array(\n                'default' => 0,\n                'required' => true,\n                'label' => __('Primary Role'),\n                'choices' =>\n                    array(0 => '\u2014 '.__('Corresponding Role').' \u2014')\n                    + Role::getRoles(),\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n            )),\n            'eavesdrop' => new BooleanField(array(\n                'configuration' => array(\n                    'desc' => __('Maintain access to current primary department'),\n                    'classes' => 'form footer',\n                ),\n            )),\n            // alerts?\n        );\n    }\n\n    function getInstructions() {\n        return __('Change the primary department and primary role of the selected agents');\n    }\n\n    function getClean($validate = true) {\n        $clean = parent::getClean();\n        $clean['eavesdrop'] = $clean['eavesdrop'] ? 1 : 0;\n        return $clean;\n    }\n\n    function render($staff=true, $title=false, $options=array()) {\n        return parent::render($staff, $title, $options + array('template' => 'dynamic-form-simple.tmpl.php'));\n    }\n}\n\nclass StaffQuickAddForm\nextends AbstractForm {\n    static $layout = 'GridFormLayout';\n\n    function buildFields() {\n        global $cfg;\n\n        return array(\n            'firstname' => new TextboxField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __(\"First Name\"),\n                    'autofocus' => true,\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            'lastname' => new TextboxField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __(\"Last Name\"),\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            'email' => new TextboxField(array(\n                'required' => true,\n                'configuration' => array(\n                    'validator' => 'email',\n                    'placeholder' => __('Email Address \u2014 e.g. me@mycompany.com'),\n                    'length' => 128,\n                    'autocomplete' => 'email',\n                  ),\n            )),\n            'dept_id' => new ChoiceField(array(\n                'label' => __('Department'),\n                'required' => true,\n                'choices' => Dept::getDepartments(),\n                'default' => $cfg->getDefaultDeptId(),\n                'layout' => new GridFluidCell(6),\n            )),\n            'role_id' => new ChoiceField(array(\n                'label' => __('Primary Role'),\n                'required' => true,\n                'choices' =>\n                    array(0 => __('Select Role'))\n                    + Role::getRoles(),\n                'layout' => new GridFluidCell(6),\n            )),\n            'isadmin' => new BooleanField(array(\n                'label' => __('Account Type'),\n                'configuration' => array(\n                    'desc' => __('Agent has access to the admin panel'),\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            'welcome_email' => new BooleanField(array(\n                'configuration' => array(\n                    'desc' => __('Send a welcome email with login information'),\n                ),\n                'default' => true,\n                'layout' => new GridFluidCell(12, array('style' => 'padding-top: 50px')),\n            )),\n            'passwd1' => new PasswordField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __(\"Temporary Password\"),\n                    'autocomplete' => 'new-password',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false))\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            'passwd2' => new PasswordField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __(\"Confirm Password\"),\n                    'autocomplete' => 'new-password',\n                ),\n                'visibility' => new VisibilityConstraint(\n                    new Q(array('welcome_email' => false))\n                ),\n                'layout' => new GridFluidCell(6),\n            )),\n            // TODO: Add role_id drop-down\n        );\n    }\n\n    function getClean($validate = true) {\n        $clean = parent::getClean();\n        list($clean['username'],) = preg_split('/[^\\w.-]/u', $clean['email'], 2);\n        if (mb_strlen($clean['username']) < 3 || Staff::lookup($clean['username']))\n            $clean['username'] = mb_strtolower($clean['firstname']);\n\n\n        // Inherit default dept's role as primary role\n        $clean['assign_use_pri_role'] = true;\n\n        // Default permissions\n        $clean['perms'] = array(\n            User::PERM_CREATE,\n            User::PERM_EDIT,\n            User::PERM_DELETE,\n            User::PERM_MANAGE,\n            User::PERM_DIRECTORY,\n            Organization::PERM_CREATE,\n            Organization::PERM_EDIT,\n            Organization::PERM_DELETE,\n            FAQ::PERM_MANAGE,\n        );\n        return $clean;\n    }\n}\n", "<?php\n/*********************************************************************\n    class.user.php\n\n    External end-user identification for osTicket\n\n    Peter Rotich <peter@osticket.com>\n    Jared Hancock <jared@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR . 'class.orm.php';\nrequire_once INCLUDE_DIR . 'class.util.php';\nrequire_once INCLUDE_DIR . 'class.variable.php';\nrequire_once INCLUDE_DIR . 'class.search.php';\nrequire_once INCLUDE_DIR . 'class.organization.php';\n\nclass UserEmailModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_EMAIL_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'user' => array(\n                'constraint' => array('user_id' => 'UserModel.id')\n            )\n        )\n    );\n\n    function __toString() {\n        return (string) $this->address;\n    }\n\n    static function getIdByEmail($email) {\n        $row = UserEmailModel::objects()\n            ->filter(array('address'=>$email))\n            ->values_flat('user_id')\n            ->first();\n\n        return $row ? $row[0] : 0;\n    }\n}\n\nclass UserModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_TABLE,\n        'pk' => array('id'),\n        'select_related' => array('default_email', 'org', 'account'),\n        'joins' => array(\n            'emails' => array(\n                'reverse' => 'UserEmailModel.user',\n            ),\n            'tickets' => array(\n                'null' => true,\n                'reverse' => 'Ticket.user',\n            ),\n            'account' => array(\n                'list' => false,\n                'null' => true,\n                'reverse' => 'ClientAccount.user',\n            ),\n            'org' => array(\n                'null' => true,\n                'constraint' => array('org_id' => 'Organization.id')\n            ),\n            'default_email' => array(\n                'null' => true,\n                'constraint' => array('default_email_id' => 'UserEmailModel.id')\n            ),\n            'cdata' => array(\n                'constraint' => array('id' => 'UserCdata.user_id'),\n                'null' => true,\n            ),\n            'entries' => array(\n                'constraint' => array(\n                    'id' => 'DynamicFormEntry.object_id',\n                    \"'U'\" => 'DynamicFormEntry.object_type',\n                ),\n                'list' => true,\n            ),\n        )\n    );\n\n    const PRIMARY_ORG_CONTACT   = 0x0001;\n\n    const PERM_CREATE =     'user.create';\n    const PERM_EDIT =       'user.edit';\n    const PERM_DELETE =     'user.delete';\n    const PERM_MANAGE =     'user.manage';\n    const PERM_DIRECTORY =  'user.dir';\n\n    static protected $perms = array(\n        self::PERM_CREATE => array(\n            'title' => /* @trans */ 'Create',\n            'desc' => /* @trans */ 'Ability to add new users',\n            'primary' => true,\n        ),\n        self::PERM_EDIT => array(\n            'title' => /* @trans */ 'Edit',\n            'desc' => /* @trans */ 'Ability to manage user information',\n            'primary' => true,\n        ),\n        self::PERM_DELETE => array(\n            'title' => /* @trans */ 'Delete',\n            'desc' => /* @trans */ 'Ability to delete users',\n            'primary' => true,\n        ),\n        self::PERM_MANAGE => array(\n            'title' => /* @trans */ 'Manage Account',\n            'desc' => /* @trans */ 'Ability to manage active user accounts',\n            'primary' => true,\n        ),\n        self::PERM_DIRECTORY => array(\n            'title' => /* @trans */ 'User Directory',\n            'desc' => /* @trans */ 'Ability to access the user directory',\n            'primary' => true,\n        ),\n    );\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getDefaultEmailAddress() {\n        return $this->getDefaultEmail()->address;\n    }\n\n    function getDefaultEmail() {\n        return $this->default_email;\n    }\n\n    function hasAccount() {\n        return !is_null($this->account);\n    }\n    function getAccount() {\n        return $this->account;\n    }\n\n    function getOrgId() {\n         return $this->get('org_id');\n    }\n\n    function getOrganization() {\n        return $this->org;\n    }\n\n    function setOrganization($org, $save=true) {\n\n        $this->set('org', $org);\n\n        if ($save)\n            $this->save();\n\n        return true;\n    }\n\n    public function setFlag($flag, $val) {\n        if ($val)\n            $this->status |= $flag;\n        else\n            $this->status &= ~$flag;\n    }\n\n    protected function hasStatus($flag) {\n        return $this->get('status') & $flag !== 0;\n    }\n\n    protected function clearStatus($flag) {\n        return $this->set('status', $this->get('status') & ~$flag);\n    }\n\n    protected function setStatus($flag) {\n        return $this->set('status', $this->get('status') | $flag);\n    }\n\n    function isPrimaryContact() {\n        return $this->hasStatus(User::PRIMARY_ORG_CONTACT);\n    }\n\n    function setPrimaryContact($flag) {\n        if ($flag)\n            $this->setStatus(User::PRIMARY_ORG_CONTACT);\n        else\n            $this->clearStatus(User::PRIMARY_ORG_CONTACT);\n    }\n\n    static function getPermissions() {\n        return self::$perms;\n    }\n}\ninclude_once INCLUDE_DIR.'class.role.php';\nRolePermission::register(/* @trans */ 'Users', UserModel::getPermissions());\n\nclass UserCdata extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_CDATA_TABLE,\n        'pk' => array('user_id'),\n        'joins' => array(\n            'user' => array(\n                'constraint' => array('user_id' => 'UserModel.id'),\n            ),\n        ),\n    );\n}\n\nclass User extends UserModel\nimplements TemplateVariable, Searchable {\n\n    var $_email;\n    var $_entries;\n    var $_forms;\n    var $_queue;\n\n\n\n    static function fromVars($vars, $create=true, $update=false) {\n        // Try and lookup by email address\n        $user = static::lookupByEmail($vars['email']);\n        if (!$user && $create) {\n            $name = $vars['name'];\n            if (is_array($name))\n                $name = implode(', ', $name);\n            elseif (!$name)\n                list($name) = explode('@', $vars['email'], 2);\n\n            $user = new User(array(\n                'name' => Format::htmldecode(Format::sanitize($name, false)),\n                'created' => new SqlFunction('NOW'),\n                'updated' => new SqlFunction('NOW'),\n                //XXX: Do plain create once the cause\n                // of the detached emails is fixed.\n                'default_email' => UserEmail::ensure($vars['email'])\n            ));\n            // Is there an organization registered for this domain\n            list($mailbox, $domain) = explode('@', $vars['email'], 2);\n            if (isset($vars['org_id']))\n                $user->set('org_id', $vars['org_id']);\n            elseif ($org = Organization::forDomain($domain))\n                $user->setOrganization($org, false);\n\n            try {\n                $user->save(true);\n                $user->emails->add($user->default_email);\n                // Attach initial custom fields\n                $user->addDynamicData($vars);\n            }\n            catch (OrmException $e) {\n                return null;\n            }\n            $type = array('type' => 'created');\n            Signal::send('object.created', $user, $type);\n            Signal::send('user.created', $user);\n        }\n        elseif ($update) {\n            $errors = array();\n            $user->updateInfo($vars, $errors, true);\n        }\n\n        return $user;\n    }\n\n    static function fromForm($form, $create=true) {\n        global $thisstaff;\n\n        if(!$form) return null;\n\n        //Validate the form\n        $valid = true;\n        $filter = function($f) use ($thisstaff) {\n            return !isset($thisstaff) || $f->isRequiredForStaff() || $f->isVisibleToStaff();\n        };\n        if (!$form->isValid($filter))\n            $valid  = false;\n\n        //Make sure the email is not in-use\n        if (($field=$form->getField('email'))\n                && $field->getClean()\n                && User::lookup(array('emails__address'=>$field->getClean()))) {\n            $field->addError(__('Email is assigned to another user'));\n            $valid = false;\n        }\n\n        return $valid ? self::fromVars($form->getClean(), $create) : null;\n    }\n\n    function getEmail() {\n\n        if (!isset($this->_email))\n            $this->_email = new EmailAddress(sprintf('\"%s\" <%s>',\n                    addcslashes($this->getName(), '\"'),\n                    $this->default_email->address));\n\n        return $this->_email;\n    }\n\n    function getAvatar($size=null) {\n        global $cfg;\n        $source = $cfg->getClientAvatarSource();\n        $avatar = $source->getAvatar($this);\n        if (isset($size))\n            $avatar->setSize($size);\n        return $avatar;\n    }\n\n    function getFullName() {\n        return $this->name;\n    }\n\n    function getPhoneNumber() {\n        foreach ($this->getDynamicData() as $e)\n            if ($a = $e->getAnswer('phone'))\n                return $a;\n    }\n\n    function getName() {\n        if (!$this->name)\n            list($name) = explode('@', $this->getDefaultEmailAddress(), 2);\n        else\n            $name = $this->name;\n        return new UsersName($name);\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getTimezone() {\n        global $cfg;\n\n        if (($acct = $this->getAccount()) && ($tz = $acct->getTimezone())) {\n            return $tz;\n        }\n        return $cfg->getDefaultTimezone();\n    }\n\n    function addForm($form, $sort=1, $data=null) {\n        $entry = $form->instanciate($sort, $data);\n        $entry->set('object_type', 'U');\n        $entry->set('object_id', $this->getId());\n        $entry->save();\n        return $entry;\n    }\n\n    function getLanguage($flags=false) {\n        if ($acct = $this->getAccount())\n            return $acct->getLanguage($flags);\n    }\n\n    function to_json() {\n\n        $info = array(\n                'id'  => $this->getId(),\n                'name' => Format::htmlchars($this->getName()),\n                'email' => (string) $this->getEmail(),\n                'phone' => (string) $this->getPhoneNumber());\n\n        return Format::json_encode($info);\n    }\n\n    function __toString() {\n        return $this->asVar();\n    }\n\n    function asVar() {\n        return (string) $this->getName();\n    }\n\n    function getVar($tag) {\n        $tag = mb_strtolower($tag);\n        foreach ($this->getDynamicData() as $e)\n            if ($a = $e->getAnswer($tag))\n                return $a;\n    }\n\n    static function getVarScope() {\n        $base = array(\n            'email' => array(\n                'class' => 'EmailAddress', 'desc' => __('Default email address')\n            ),\n            'name' => array(\n                'class' => 'PersonsName', 'desc' => 'User name, default format'\n            ),\n            'organization' => array('class' => 'Organization', 'desc' => __('Organization')),\n        );\n        $extra = VariableReplacer::compileFormScope(UserForm::getInstance());\n        return $base + $extra;\n    }\n\n    static function getSearchableFields() {\n        $base = array();\n        $uform = UserForm::getUserForm();\n        $base = array();\n        foreach ($uform->getFields() as $F) {\n            $fname = $F->get('name') ?: ('field_'.$F->get('id'));\n            # XXX: email in the model corresponds to `emails__address` ORM path\n            if ($fname == 'email')\n                $fname = 'emails__address';\n            if (!$F->hasData() || $F->isPresentationOnly())\n                continue;\n            if (!$F->isStorable())\n                $base[$fname] = $F;\n            else\n                $base[\"cdata__{$fname}\"] = $F;\n        }\n        return $base;\n    }\n\n    static function supportsCustomData() {\n        return true;\n    }\n\n    function addDynamicData($data) {\n        return $this->addForm(UserForm::objects()->one(), 1, $data);\n    }\n\n    function getDynamicData($create=true) {\n        if (!isset($this->_entries)) {\n            $this->_entries = DynamicFormEntry::forObject($this->id, 'U')->all();\n            if (!$this->_entries && $create) {\n                $g = UserForm::getNewInstance();\n                $g->setClientId($this->id);\n                $g->save();\n                $this->_entries[] = $g;\n            }\n        }\n\n        return $this->_entries ?: array();\n    }\n\n    function getFilterData() {\n        $vars = array();\n        foreach ($this->getDynamicData() as $entry) {\n            $vars += $entry->getFilterData();\n\n            // Add in special `name` and `email` fields\n            if ($entry->getDynamicForm()->get('type') != 'U')\n                continue;\n\n            foreach (array('name', 'email') as $name) {\n                if ($f = $entry->getField($name))\n                    $vars['field.'.$f->get('id')] =\n                        $name == 'name' ? $this->getName() : $this->getEmail();\n            }\n        }\n\n        return $vars;\n    }\n\n    function getForms($data=null, $cb=null) {\n\n        if (!isset($this->_forms)) {\n            $this->_forms = array();\n            $cb = $cb ?: function ($f) use($data) { return ($data); };\n            foreach ($this->getDynamicData() as $entry) {\n                $entry->addMissingFields();\n                if(($form = $entry->getDynamicForm())\n                        && $form->get('type') == 'U' ) {\n\n                    foreach ($entry->getFields() as $f) {\n                        if ($f->get('name') == 'name' && !$cb($f))\n                            $f->value = $this->getFullName();\n                        elseif ($f->get('name') == 'email' && !$cb($f))\n                            $f->value = $this->getEmail();\n                    }\n                }\n\n                $this->_forms[] = $entry;\n            }\n        }\n\n        return $this->_forms;\n    }\n\n    function getAccountStatus() {\n\n        if (!($account=$this->getAccount()))\n            return __('Guest');\n\n        return (string) $account->getStatus();\n    }\n\n    function canSeeOrgTickets() {\n        return $this->org && (\n                $this->org->shareWithEverybody()\n            || ($this->isPrimaryContact() && $this->org->shareWithPrimaryContacts()));\n    }\n\n    function register($vars, &$errors) {\n\n        // user already registered?\n        if ($this->getAccount())\n            return true;\n\n        return UserAccount::register($this, $vars, $errors);\n    }\n\n    static function importCsv($stream, $defaults=array()) {\n        require_once INCLUDE_DIR . 'class.import.php';\n\n        $importer = new CsvImporter($stream);\n        $imported = 0;\n        try {\n            db_autocommit(false);\n            $records = $importer->importCsv(UserForm::getUserForm()->getFields(), $defaults);\n            foreach ($records as $data) {\n                if (!Validator::is_email($data['email']) || empty($data['name']))\n                    throw new ImportError('Both `name` and `email` fields are required');\n                if (!($user = static::fromVars($data, true, true)))\n                    throw new ImportError(sprintf(__('Unable to import user: %s'),\n                        print_r(Format::htmlchars($data), true)));\n                $imported++;\n            }\n            db_autocommit(true);\n        }\n        catch (Exception $ex) {\n            db_rollback();\n            return $ex->getMessage();\n        }\n        return $imported;\n    }\n\n    function importFromPost($stream, $extra=array()) {\n        if (!is_array($stream))\n            $stream = sprintf('name, email%s %s',PHP_EOL, $stream);\n\n        return User::importCsv($stream, $extra);\n    }\n\n    function updateInfo($vars, &$errors, $staff=false) {\n        $isEditable = function ($f) use($staff) {\n            return ($staff ? $f->isEditableToStaff() :\n                    $f->isEditableToUsers());\n        };\n        $valid = true;\n        $forms = $this->getForms($vars, $isEditable);\n        foreach ($forms as $entry) {\n            $entry->setSource($vars);\n            if ($staff && !$entry->isValidForStaff(true))\n                $valid = false;\n            elseif (!$staff && !$entry->isValidForClient(true))\n                $valid = false;\n            elseif ($entry->getDynamicForm()->get('type') == 'U'\n                    && ($f=$entry->getField('email'))\n                    && $isEditable($f)\n                    && $f->getClean()\n                    && ($u=User::lookup(array('emails__address'=>$f->getClean())))\n                    && $u->id != $this->getId()) {\n                $valid = false;\n                $f->addError(__('Email is assigned to another user'));\n            }\n\n            if (!$valid)\n                $errors = array_merge($errors, $entry->errors());\n        }\n\n\n        if (!$valid)\n            return false;\n\n        // Save the entries\n        foreach ($forms as $entry) {\n            $fields = $entry->getFields();\n            foreach ($fields as $field) {\n                $changes = $field->getChanges();\n                if ((is_array($changes) && $changes[0]) || $changes && !is_array($changes)) {\n                    $type = array('type' => 'edited', 'key' => $field->getLabel());\n                    Signal::send('object.edited', $this, $type);\n                }\n            }\n\n            if ($entry->getDynamicForm()->get('type') == 'U') {\n                //  Name field\n                if (($name = $entry->getField('name')) && $isEditable($name) ) {\n                    $name = $name->getClean();\n                    if (is_array($name))\n                        $name = implode(', ', $name);\n                    if ($this->name != $name) {\n                        $type = array('type' => 'edited', 'key' => 'Name');\n                        Signal::send('object.edited', $this, $type);\n                    }\n                    $this->name = $name;\n                }\n\n                // Email address field\n                if (($email = $entry->getField('email'))\n                        && $isEditable($email)) {\n                    if ($this->default_email->address != $email->getClean()) {\n                        $type = array('type' => 'edited', 'key' => 'Email');\n                        Signal::send('object.edited', $this, $type);\n                    }\n                    $this->default_email->address = $email->getClean();\n                    $this->default_email->save();\n                }\n            }\n\n            // DynamicFormEntry::saveAnswers returns the number of answers updated\n            if ($entry->saveAnswers($isEditable)) {\n                $this->updated = SqlFunction::NOW();\n            }\n        }\n\n        return $this->save();\n    }\n\n\n    function save($refetch=false) {\n        // Drop commas and reorganize the name without them\n        $parts = array_map('trim', explode(',', $this->name));\n        switch (count($parts)) {\n            case 2:\n                // Assume last, first --or-- last suff., first\n                $this->name = $parts[1].' '.$parts[0];\n                // XXX: Consider last, first suff.\n                break;\n            case 3:\n                // Assume last, first, suffix, write 'first last suffix'\n                $this->name = $parts[1].' '.$parts[0].' '.$parts[2];\n                break;\n        }\n\n        // Handle email addresses -- use the box name\n        if (Validator::is_email($this->name)) {\n            list($box, $domain) = explode('@', $this->name, 2);\n            if (strpos($box, '.') !== false)\n                $this->name = str_replace('.', ' ', $box);\n            else\n                $this->name = $box;\n            $this->name = mb_convert_case($this->name, MB_CASE_TITLE);\n        }\n\n        if (count($this->dirty)) //XXX: doesn't work??\n            $this->set('updated', new SqlFunction('NOW'));\n        return parent::save($refetch);\n    }\n\n    function delete() {\n        // Refuse to delete a user with tickets\n        if ($this->tickets->count())\n            return false;\n\n        // Delete account record (if any)\n        if ($this->getAccount())\n            $this->getAccount()->delete();\n\n        // Delete emails.\n        $this->emails->expunge();\n\n        // Drop dynamic data\n        foreach ($this->getDynamicData() as $entry) {\n            $entry->delete();\n        }\n\n        $type = array('type' => 'deleted');\n        Signal::send('object.deleted', $this, $type);\n\n        // Delete user\n        return parent::delete();\n    }\n\n    function deleteAllTickets() {\n        $status_id = TicketStatus::lookup(array('state' => 'deleted'));\n        foreach($this->tickets as $ticket) {\n            if (!$T = Ticket::lookup($ticket->getId()))\n                continue;\n            if (!$T->setStatus($status_id))\n                return false;\n        }\n        $this->tickets->reset();\n        return true;\n    }\n\n    static function lookupByEmail($email) {\n        return static::lookup(array('emails__address'=>$email));\n    }\n\n    static function getNameById($id) {\n        if ($user = static::lookup($id))\n            return $user->getName();\n    }\n\n    static function getLink($id) {\n        global $thisstaff;\n\n        if (!$id || !$thisstaff)\n            return false;\n\n        return ROOT_PATH . sprintf('scp/users.php?id=%s', $id);\n    }\n\n    function getTicketsQueue($collabs=true) {\n        global $thisstaff;\n\n        if (!$this->_queue) {\n            $email = $this->getDefaultEmailAddress();\n            $filter = [\n                ['user__id', 'equal', $this->getId()],\n            ];\n            if ($collabs)\n                $filter = [\n                    ['user__emails__address', 'equal', $email],\n                    ['thread__collaborators__user__emails__address', 'equal',  $email],\n                ];\n            $this->_queue = new AdhocSearch(array(\n                'id' => 'adhoc,uid'.$this->getId(),\n                'root' => 'T',\n                'staff_id' => $thisstaff->getId(),\n                'title' => $this->getName()\n            ));\n            $this->_queue->config = $filter;\n        }\n\n        return $this->_queue;\n    }\n}\n\nclass EmailAddress\nimplements TemplateVariable {\n    var $email;\n    var $address;\n    protected $_info;\n\n    function __construct($address) {\n        $this->_info = self::parse($address);\n        $this->email = sprintf('%s@%s',\n                $this->getMailbox(),\n                $this->getDomain());\n\n        if ($this->getName())\n            $this->address = sprintf('\"%s\" <%s>',\n                    $this->getName(),\n                    $this->email);\n    }\n\n    function __toString() {\n        return (string) $this->email;\n    }\n\n    function getVar($what) {\n\n        if (!$this->_info)\n            return '';\n\n        switch ($what) {\n        case 'host':\n        case 'domain':\n            return $this->_info->host;\n        case 'personal':\n            return trim($this->_info->personal, '\"');\n        case 'mailbox':\n            return $this->_info->mailbox;\n        }\n    }\n\n    function getAddress() {\n        return $this->address ?: $this->email;\n    }\n\n    function getHost() {\n        return $this->getVar('host');\n    }\n\n    function getDomain() {\n        return $this->getHost();\n    }\n\n    function getName() {\n        return $this->getVar('personal');\n    }\n\n    function getMailbox() {\n        return $this->getVar('mailbox');\n    }\n\n    // Parse and email adddress (RFC822) into it's parts.\n    // @address - one address is expected\n    static function parse($address) {\n        require_once PEAR_DIR . 'Mail/RFC822.php';\n        require_once PEAR_DIR . 'PEAR.php';\n        if (($parts = Mail_RFC822::parseAddressList($address))\n                && !PEAR::isError($parts))\n            return current($parts);\n    }\n\n    static function getVarScope() {\n        return array(\n            'domain' => __('Domain'),\n            'mailbox' => __('Mailbox'),\n            'personal' => __('Personal name'),\n        );\n    }\n}\n\nclass PersonsName\nimplements TemplateVariable {\n    var $format;\n    var $parts;\n    var $name;\n\n    static $formats = array(\n        'first' => array(     /*@trans*/ \"First\", 'getFirst'),\n        'last' => array(      /*@trans*/ \"Last\", 'getLast'),\n        'full' => array(      /*@trans*/ \"First Last\", 'getFull'),\n        'legal' => array(     /*@trans*/ \"First M. Last\", 'getLegal'),\n        'lastfirst' => array( /*@trans*/ \"Last, First\", 'getLastFirst'),\n        'formal' => array(    /*@trans*/ \"Mr. Last\", 'getFormal'),\n        'short' => array(     /*@trans*/ \"First L.\", 'getShort'),\n        'shortformal' => array(/*@trans*/ \"F. Last\", 'getShortFormal'),\n        'complete' => array(  /*@trans*/ \"Mr. First M. Last Sr.\", 'getComplete'),\n        'original' => array(  /*@trans*/ '-- As Entered --', 'getOriginal'),\n    );\n\n    function __construct($name, $format=null) {\n        global $cfg;\n\n        if ($format && isset(static::$formats[$format]))\n            $this->format = $format;\n        else\n            $this->format = 'original';\n\n        if (!is_array($name)) {\n            $this->parts = static::splitName($name);\n            $this->name = $name;\n        }\n        else {\n            $this->parts = $name;\n            $this->name = implode(' ', $name);\n        }\n    }\n\n    function getFirst() {\n        return $this->parts['first'];\n    }\n\n    function getLast() {\n        return $this->parts['last'];\n    }\n\n    function getMiddle() {\n        return $this->parts['middle'];\n    }\n\n    function getMiddleInitial() {\n        return mb_substr($this->parts['middle'],0,1).'.';\n    }\n\n    function getFormal() {\n        return trim($this->parts['salutation'].' '.$this->parts['last']);\n    }\n\n    function getFull() {\n        return trim($this->parts['first'].' '.$this->parts['last']);\n    }\n\n    function getLegal() {\n        $parts = array(\n            $this->parts['first'],\n            mb_substr($this->parts['middle'],0,1),\n            $this->parts['last'],\n        );\n        if ($parts[1]) $parts[1] .= '.';\n        return implode(' ', array_filter($parts));\n    }\n\n    function getComplete() {\n        $parts = array(\n            $this->parts['salutation'],\n            $this->parts['first'],\n            mb_substr($this->parts['middle'],0,1),\n            $this->parts['last'],\n            $this->parts['suffix']\n        );\n        if ($parts[2]) $parts[2] .= '.';\n        return implode(' ', array_filter($parts));\n    }\n\n    function getLastFirst() {\n        $name = $this->parts['last'].', '.$this->parts['first'];\n        if ($this->parts['suffix'])\n            $name .= ', '.$this->parts['suffix'];\n        return $name;\n    }\n\n    function getShort() {\n        return $this->parts['first'].' '.mb_substr($this->parts['last'],0,1).'.';\n    }\n\n    function getShortFormal() {\n        return mb_substr($this->parts['first'],0,1).'. '.$this->parts['last'];\n    }\n\n    function getOriginal() {\n        return $this->name;\n    }\n\n    function getInitials() {\n        $names = array($this->parts['first']);\n        $names = array_merge($names, explode(' ', $this->parts['middle']));\n        $names[] = $this->parts['last'];\n        $initials = '';\n        foreach (array_filter($names) as $n)\n            $initials .= mb_substr($n,0,1);\n        return mb_convert_case($initials, MB_CASE_UPPER);\n    }\n\n    function getName() {\n        return $this;\n    }\n\n    function getNameFormats($user, $type) {\n      $nameFormats = array();\n\n      foreach (PersonsName::allFormats() as $format => $func) {\n          $nameFormats[$type . '.name.' . $format] = $user->getName()->$func[1]();\n      }\n\n      return $nameFormats;\n    }\n\n    function asVar() {\n        return $this->__toString();\n    }\n\n    static function getVarScope() {\n        $formats = array();\n        foreach (static::$formats as $name=>$info) {\n            if (in_array($name, array('original', 'complete')))\n                continue;\n            $formats[$name] = $info[0];\n        }\n        return $formats;\n    }\n\n    function __toString() {\n\n        @list(, $func) = static::$formats[$this->format];\n        if (!$func) $func = 'getFull';\n\n        return (string) call_user_func(array($this, $func));\n    }\n\n    static function allFormats() {\n        return static::$formats;\n    }\n\n    /**\n     * Thanks, http://stackoverflow.com/a/14420217\n     */\n    static function splitName($name) {\n        $results = array();\n\n        $r = explode(' ', $name);\n        $size = count($r);\n\n        //check if name is bad format (ex: J.Everybody), and fix them\n        if($size==1 && mb_strpos($r[0], '.') !== false)\n        {\n            $r = explode('.', $name);\n            $size = count($r);\n        }\n\n        //check first for period, assume salutation if so\n        if (mb_strpos($r[0], '.') === false)\n        {\n            $results['salutation'] = '';\n            $results['first'] = $r[0];\n        }\n        else\n        {\n            $results['salutation'] = $r[0];\n            $results['first'] = $r[1];\n        }\n\n        //check last for period, assume suffix if so\n        if (mb_strpos($r[$size - 1], '.') === false)\n        {\n            $results['suffix'] = '';\n        }\n        else\n        {\n            $results['suffix'] = $r[$size - 1];\n        }\n\n        //combine remains into last\n        $start = ($results['salutation']) ? 2 : 1;\n        $end = ($results['suffix']) ? $size - 2 : $size - 1;\n\n        $middle = array();\n        for ($i = $start; $i <= $end; $i++)\n        {\n            $middle[] = $r[$i];\n        }\n        if (count($middle) > 1) {\n            $results['last'] = array_pop($middle);\n            $results['middle'] = implode(' ', $middle);\n        }\n        else {\n            $results['last'] = $middle[0];\n            $results['middle'] = '';\n        }\n\n        return $results;\n    }\n\n}\n\nclass AgentsName extends PersonsName {\n    function __construct($name, $format=null) {\n        global $cfg;\n\n        if (!$format && $cfg)\n            $format = $cfg->getAgentNameFormat();\n\n        parent::__construct($name, $format);\n    }\n}\n\nclass UsersName extends PersonsName {\n    function __construct($name, $format=null) {\n        global $cfg;\n        if (!$format && $cfg)\n            $format = $cfg->getClientNameFormat();\n\n        parent::__construct($name, $format);\n    }\n}\n\n\nclass UserEmail extends UserEmailModel {\n    static function ensure($address) {\n        $email = static::lookup(array('address'=>$address));\n        if (!$email) {\n            $email = new static(array('address'=>$address));\n            $email->save();\n        }\n        return $email;\n    }\n}\n\n\nclass UserAccount extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_ACCOUNT_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'user' => array(\n                'null' => false,\n                'constraint' => array('user_id' => 'User.id')\n            ),\n        ),\n    );\n\n    const LANG_MAILOUTS = 1;            // Language preference for mailouts\n\n    var $_status;\n    var $_extra;\n\n    function getStatus() {\n        if (!isset($this->_status))\n            $this->_status = new UserAccountStatus($this->get('status'));\n        return $this->_status;\n    }\n\n    function statusChanged($flag, $var) {\n        if (($this->hasStatus($flag) && !$var) ||\n            (!$this->hasStatus($flag) && $var))\n                return true;\n    }\n\n    protected function hasStatus($flag) {\n        return $this->getStatus()->check($flag);\n    }\n\n    protected function clearStatus($flag) {\n        return $this->set('status', $this->get('status') & ~$flag);\n    }\n\n    protected function setStatus($flag) {\n        return $this->set('status', $this->get('status') | $flag);\n    }\n\n    function confirm() {\n        $this->setStatus(UserAccountStatus::CONFIRMED);\n        return $this->save();\n    }\n\n    function isConfirmed() {\n        return $this->getStatus()->isConfirmed();\n    }\n\n    function lock() {\n        $this->setStatus(UserAccountStatus::LOCKED);\n        return $this->save();\n    }\n\n    function unlock() {\n        $this->clearStatus(UserAccountStatus::LOCKED);\n        return $this->save();\n    }\n\n    function isLocked() {\n        return $this->getStatus()->isLocked();\n    }\n\n    function forcePasswdReset() {\n        $this->setStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n        return $this->save();\n    }\n\n    function isPasswdResetForced() {\n        return $this->hasStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n    }\n\n    function isPasswdResetEnabled() {\n        return !$this->hasStatus(UserAccountStatus::FORBID_PASSWD_RESET);\n    }\n\n    function getInfo() {\n        return $this->ht;\n    }\n\n    function getId() {\n        return $this->get('id');\n    }\n\n    function getUserId() {\n        return $this->get('user_id');\n    }\n\n    function getUser() {\n        return $this->user;\n    }\n\n    function getUserName() {\n        return $this->getUser()->getName();\n    }\n\n    function getExtraAttr($attr=false, $default=null) {\n        if (!isset($this->_extra))\n            $this->_extra = JsonDataParser::decode($this->get('extra', ''));\n\n        return $attr ? (@$this->_extra[$attr] ?: $default) : $this->_extra;\n    }\n\n    function setExtraAttr($attr, $value) {\n        $this->getExtraAttr();\n        $this->_extra[$attr] = $value;\n    }\n\n    /**\n     * Function: getLanguage\n     *\n     * Returns the language preference for the user or false if no\n     * preference is defined. False indicates the browser indicated\n     * preference should be used. For requests apart from browser requests,\n     * the last language preference of the browser is set in the\n     * 'browser_lang' extra attribute upon logins. Send the LANG_MAILOUTS\n     * flag to also consider this saved value. Such is useful when sending\n     * the user a message (such as an email), and the user's browser\n     * preference is not available in the HTTP request.\n     *\n     * Parameters:\n     * $flags - (int) Send UserAccount::LANG_MAILOUTS if the user's\n     *      last-known browser preference should be considered. Normally\n     *      only the user's saved language preference is considered.\n     *\n     * Returns:\n     * Current or last-known language preference or false if no language\n     * preference is currently set or known.\n     */\n    function getLanguage($flags=false) {\n        $lang = $this->get('lang', false);\n        if (!$lang && ($flags & UserAccount::LANG_MAILOUTS))\n            $lang = $this->getExtraAttr('browser_lang', false);\n\n        return $lang;\n    }\n\n    function getTimezone() {\n        return $this->timezone;\n    }\n\n    function save($refetch=false) {\n        // Serialize the extra column on demand\n        if (isset($this->_extra)) {\n            $this->extra = JsonDataEncoder::encode($this->_extra);\n        }\n        return parent::save($refetch);\n    }\n\n    function hasPassword() {\n        return (bool) $this->get('passwd');\n    }\n\n    function sendResetEmail() {\n        return static::sendUnlockEmail('pwreset-client') === true;\n    }\n\n    function sendConfirmEmail() {\n        return static::sendUnlockEmail('registration-client') === true;\n    }\n\n    function setPassword($new) {\n        $this->set('passwd', Passwd::hash($new));\n        // Clean sessions\n        Signal::send('auth.clean', $this->getUser());\n    }\n\n    protected function sendUnlockEmail($template) {\n        global $ost, $cfg;\n\n        $token = Misc::randCode(48); // 290-bits\n\n        $email = $cfg->getDefaultEmail();\n        $content = Page::lookupByType($template);\n\n        if (!$email ||  !$content)\n            return new BaseError(sprintf(_S('%s: Unable to retrieve template'),\n                $template));\n\n        $vars = array(\n            'url' => $ost->getConfig()->getBaseUrl(),\n            'token' => $token,\n            'user' => $this->getUser(),\n            'recipient' => $this->getUser(),\n            'link' => sprintf(\n                \"%s/pwreset.php?token=%s\",\n                $ost->getConfig()->getBaseUrl(),\n                $token),\n        );\n        $vars['reset_link'] = &$vars['link'];\n\n        $info = array('email' => $email, 'vars' => &$vars, 'log'=>true);\n        Signal::send('auth.pwreset.email', $this->getUser(), $info);\n\n        $lang = $this->getLanguage(UserAccount::LANG_MAILOUTS);\n        $msg = $ost->replaceTemplateVariables(array(\n            'subj' => $content->getLocalName($lang),\n            'body' => $content->getLocalBody($lang),\n        ), $vars);\n\n        $_config = new Config('pwreset');\n        $_config->set($vars['token'], 'c'.$this->getUser()->getId());\n\n        $email->send($this->getUser()->getEmail(),\n            Format::striptags($msg['subj']), $msg['body']);\n\n        return true;\n    }\n\n    function __toString() {\n        return (string) $this->getStatus();\n    }\n\n    /*\n     * Updates may be done by Staff or by the User if registration\n     * options are set to Public\n     */\n    function update($vars, &$errors) {\n        // TODO: Make sure the username is unique\n\n        // Timezone selection is not required. System default is a valid\n        // fallback\n\n        // Changing password?\n        if ($vars['passwd1'] || $vars['passwd2']) {\n            if (!$vars['passwd1'])\n                $errors['passwd1'] = __('New password is required');\n            elseif ($vars['passwd1'] && strlen($vars['passwd1'])<6)\n                $errors['passwd1'] = __('Must be at least 6 characters');\n            elseif ($vars['passwd1'] && strcmp($vars['passwd1'], $vars['passwd2']))\n                $errors['passwd2'] = __('Passwords do not match');\n        }\n\n        // Make sure the username is not an email.\n        if ($vars['username'] && Validator::is_email($vars['username']))\n            $errors['username'] =\n                __('Users can always sign in with their email address');\n\n        if ($errors) return false;\n\n        //flags\n        $pwreset = $this->statusChanged(UserAccountStatus::REQUIRE_PASSWD_RESET, $vars['pwreset-flag']);\n        $locked = $this->statusChanged(UserAccountStatus::LOCKED, $vars['locked-flag']);\n        $forbidPwChange = $this->statusChanged(UserAccountStatus::FORBID_PASSWD_RESET, $vars['forbid-pwchange-flag']);\n\n        $info = $this->getInfo();\n        foreach ($vars as $key => $value) {\n            if (($key != 'id' && $info[$key] && $info[$key] != $value) || ($pwreset && $key == 'pwreset-flag' ||\n                    $locked && $key == 'locked-flag' || $forbidPwChange && $key == 'forbid-pwchange-flag')) {\n                $type = array('type' => 'edited', 'key' => $key);\n                Signal::send('object.edited', $this, $type);\n            }\n        }\n\n        $this->set('timezone', $vars['timezone']);\n        $this->set('username', $vars['username']);\n\n        if ($vars['passwd1']) {\n            $this->setPassword($vars['passwd1']);\n            $this->setStatus(UserAccountStatus::CONFIRMED);\n            $type = array('type' => 'edited', 'key' => 'password');\n            Signal::send('object.edited', $this, $type);\n        }\n\n        // Set flags\n        foreach (array(\n                'pwreset-flag' => UserAccountStatus::REQUIRE_PASSWD_RESET,\n                'locked-flag' => UserAccountStatus::LOCKED,\n                'forbid-pwchange-flag' => UserAccountStatus::FORBID_PASSWD_RESET\n        ) as $ck=>$flag) {\n            if ($vars[$ck])\n                $this->setStatus($flag);\n            else {\n                if (($pwreset && $ck == 'pwreset-flag') || ($locked && $ck == 'locked-flag') ||\n                    ($forbidPwChange && $ck == 'forbid-pwchange-flag')) {\n                        $type = array('type' => 'edited', 'key' => $ck);\n                        Signal::send('object.edited', $this, $type);\n                }\n                $this->clearStatus($flag);\n            }\n        }\n\n        return $this->save(true);\n    }\n\n    static function createForUser($user, $defaults=false) {\n        $acct = new static(array('user_id'=>$user->getId()));\n        if ($defaults && is_array($defaults)) {\n            foreach ($defaults as $k => $v)\n                $acct->set($k, $v);\n        }\n        return $acct;\n    }\n\n    static function lookupByUsername($username) {\n        if (Validator::is_email($username))\n            $user = static::lookup(array('user__emails__address' => $username));\n        elseif (Validator::is_userid($username))\n            $user = static::lookup(array('username' => $username));\n\n        return $user;\n    }\n\n    static function register($user, $vars, &$errors) {\n\n        if (!$user || !$vars)\n            return false;\n\n        //Require temp password.\n        if ((!$vars['backend'] || $vars['backend'] != 'client')\n                && !isset($vars['sendemail'])) {\n            if (!$vars['passwd1'])\n                $errors['passwd1'] = 'Temporary password required';\n            elseif ($vars['passwd1'] && strlen($vars['passwd1'])<6)\n                $errors['passwd1'] = 'Must be at least 6 characters';\n            elseif ($vars['passwd1'] && strcmp($vars['passwd1'], $vars['passwd2']))\n                $errors['passwd2'] = 'Passwords do not match';\n        }\n\n        if ($errors) return false;\n\n        $account = new UserAccount(array(\n            'user_id' => $user->getId(),\n            'timezone' => $vars['timezone'],\n            'backend' => $vars['backend'],\n        ));\n\n        if ($vars['username'] && strcasecmp($vars['username'], $user->getEmail()))\n            $account->set('username', $vars['username']);\n\n        if ($vars['passwd1'] && !$vars['sendemail']) {\n            $account->set('passwd', Passwd::hash($vars['passwd1']));\n            $account->setStatus(UserAccountStatus::CONFIRMED);\n            if ($vars['pwreset-flag'])\n                $account->setStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n            if ($vars['forbid-pwreset-flag'])\n                $account->setStatus(UserAccountStatus::FORBID_PASSWD_RESET);\n        }\n        elseif ($vars['backend'] && $vars['backend'] != 'client') {\n            // Auto confirm remote accounts\n            $account->setStatus(UserAccountStatus::CONFIRMED);\n        }\n\n        $account->save(true);\n\n        if (!$account->isConfirmed() && $vars['sendemail'])\n            $account->sendConfirmEmail();\n\n        return $account;\n    }\n\n}\n\nclass UserAccountStatus {\n\n    var $flag;\n\n    const CONFIRMED             = 0x0001;\n    const LOCKED                = 0x0002;\n    const REQUIRE_PASSWD_RESET  = 0x0004;\n    const FORBID_PASSWD_RESET   = 0x0008;\n\n    function __construct($flag) {\n        $this->flag = $flag;\n    }\n\n    function check($flag) {\n        return 0 !== ($this->flag & $flag);\n    }\n\n    function isLocked() {\n        return $this->check(self::LOCKED);\n    }\n\n    function isConfirmed() {\n        return $this->check(self::CONFIRMED);\n    }\n\n    function __toString() {\n\n        if ($this->isLocked())\n            return __('Locked (Administrative)');\n\n        if (!$this->isConfirmed())\n            return __('Locked (Pending Activation)');\n\n        // ... Other flags here (password reset, etc).\n\n        return __('Active (Registered)');\n    }\n}\n\n/*\n *  Generic user list.\n */\nclass UserList extends MailingList {\n\n   function add($user) {\n        if (!$user instanceof ITicketUser)\n            throw new InvalidArgumentException('User expected');\n\n        return parent::add($user);\n    }\n}\n\n?>\n", "<?php\n/*********************************************************************\n    class.validator.php\n\n    Input validation helper. This class contains collection of functions used for data validation.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nclass Validator {\n\n    var $input=array();\n    var $fields=array();\n    var $errors=array();\n\n    function __construct($fields=null) {\n        $this->setFields($fields);\n    }\n    function setFields(&$fields){\n\n        if($fields && is_array($fields)):\n            $this->fields=$fields;\n            return (true);\n        endif;\n\n        return (false);\n    }\n\n\n    function validate($source,$userinput=true){\n        $this->errors=array();\n        //Check the input and make sure the fields are specified.\n        if(!$source || !is_array($source))\n            $this->errors['err']=__('Invalid input');\n        elseif(!$this->fields || !is_array($this->fields))\n            $this->errors['err']=__('No fields set up');\n        //Abort on error\n        if($this->errors)\n            return false;\n\n        //if magic quotes are enabled - then try cleaning up inputs before validation...\n        if($userinput && function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc())\n            $source=Format::strip_slashes($source);\n\n\n        $this->input=$source;\n\n        //Do the do.\n        foreach($this->fields as $k=>$field){\n            if(!$field['required'] && !$this->input[$k]) //NOT required...and no data provided...\n                continue;\n\n            if($field['required'] && !isset($this->input[$k]) || (!$this->input[$k] && $field['type']!='int')){ //Required...and no data provided...\n                $this->errors[$k]=$field['error'];\n                continue;\n            }\n\n            //We don't care about the type.\n            if ($field['type'] == '*') continue;\n\n            //Do the actual validation based on the type.\n            switch(strtolower($field['type'])):\n            case 'integer':\n            case 'int':\n                if(!is_numeric($this->input[$k]))\n                     $this->errors[$k]=$field['error'];\n                elseif ($field['min'] && $this->input[$k] < $field['min'])\n                     $this->errors[$k]=$field['error'];\n                break;\n            case 'double':\n                if(!is_numeric($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'text':\n            case 'string':\n                if(!is_string($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'array':\n                if(!$this->input[$k] || !is_array($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'radio':\n                if(!isset($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'date': //TODO...make sure it is really in GNU date format..\n                if(strtotime($this->input[$k])===false)\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'time': //TODO...make sure it is really in GNU time format..\n                break;\n            case 'phone':\n            case 'fax':\n                if(!self::is_phone($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'email':\n                if(!self::is_email($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'url':\n                if(!self::is_url($this->input[$k]))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'password':\n                if(strlen($this->input[$k])<6)\n                    $this->errors[$k]=$field['error'].' '.__('(Six characters min)');\n                break;\n            case 'username':\n                $error = '';\n                if (!self::is_username($this->input[$k], $error))\n                    $this->errors[$k]=$field['error'].\": $error\";\n                break;\n            case 'zipcode':\n                if(!is_numeric($this->input[$k]) || (strlen($this->input[$k])!=5))\n                    $this->errors[$k]=$field['error'];\n                break;\n            case 'cs-domain': // Comma separated list of domains\n                if($values=explode(',', $this->input[$k]))\n                    foreach($values as $v)\n                        if(!preg_match_all(\n                                '/^([a-z0-9|-]+\\.)*[a-z0-9|-]+\\.[a-z]+$/',\n                                ltrim($v)))\n                            $this->errors[$k]=$field['error'];\n                break;\n            case 'cs-url': // Comma separated list of urls\n                if($values=explode(',', $this->input[$k]))\n                    foreach($values as $v)\n                        if(!preg_match_all(\n                                '/^(https?:\\/\\/)?((\\*\\.|\\w+\\.)?[\\w-]+(\\.[a-zA-Z]+)?(:([0-9]+|\\*))?)+$/',\n                                ltrim($v)))\n                            $this->errors[$k]=$field['error'];\n                break;\n            case 'ipaddr':\n                if($values=explode(',', $this->input[$k])){\n                    foreach($values as $v)\n                        if(!preg_match_all('/^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$/', ltrim($v)))\n                            $this->errors[$k]=$field['error'];\n                }\n                break;\n            default://If param type is not set...or handle..error out...\n                $this->errors[$k]=$field['error'].' '.__('(type not set)');\n            endswitch;\n        }\n        return ($this->errors)?(FALSE):(TRUE);\n    }\n\n    function iserror(){\n        return $this->errors?true:false;\n    }\n\n    function errors(){\n        return $this->errors;\n    }\n\n    /*** Functions below can be called directly without class instance.\n         Validator::func(var..);  (nolint) ***/\n    static function is_email($email, $list=false, $verify=false) {\n        require_once PEAR_DIR . 'Mail/RFC822.php';\n        require_once PEAR_DIR . 'PEAR.php';\n        $rfc822 = new Mail_RFC822();\n        if (!($mails = @$rfc822->parseAddressList($email)) || PEAR::isError($mails))\n            return false;\n\n        if (!$list && count($mails) > 1)\n            return false;\n\n        foreach ($mails as $m) {\n            if (!$m->mailbox)\n                return false;\n            if ($m->host == 'localhost')\n                return false;\n        }\n\n        // According to RFC2821, the domain (A record) can be treated as an\n        // MX if no MX records exist for the domain. Also, include a\n        // full-stop trailing char so that the default domain of the server\n        // is not added automatically\n        if ($verify and !dns_get_record($m->host.'.', DNS_MX))\n            return 0 < @count(dns_get_record($m->host.'.', DNS_A|DNS_AAAA));\n\n        return true;\n    }\n\n    static function is_numeric($number, &$error='') {\n        if (!is_numeric($number))\n            $error = __('Enter a Number');\n        return $error == '';\n    }\n\n    static function is_valid_email($email, &$error='') {\n        global $cfg;\n        // Default to FALSE for installation\n        return self::is_email($email, false, $cfg && $cfg->verifyEmailAddrs());\n    }\n\n    static function is_phone($phone, &$error='') {\n        /* We're not really validating the phone number but just making sure it doesn't contain illegal chars and of acceptable len */\n        $stripped=preg_replace(\"(\\(|\\)|\\-|\\.|\\+|[  ]+)\",\"\",$phone);\n        return (!is_numeric($stripped) || ((strlen($stripped)<7) || (strlen($stripped)>16)))?false:true;\n    }\n\n    static function is_url($url) {\n        //XXX: parse_url is not ideal for validating urls but it's ideal for basic checks.\n        return ($url && ($info=parse_url($url)) && $info['host']);\n    }\n\n    static function is_ip($ip, &$error='') {\n        return filter_var(trim($ip), FILTER_VALIDATE_IP) !== false;\n    }\n\n    static function is_username($username, &$error='') {\n        if (strlen($username)<2)\n            $error = __('Username must have at least two (2) characters');\n        elseif (is_numeric($username) || !preg_match('/^[\\p{L}\\d._-]+$/u', $username))\n            $error = __('Username contains invalid characters');\n        return $error == '';\n    }\n\n    static  function is_userid($userid, &$error='') {\n        if (!self::is_username($userid)\n                    && !self::is_email($userid))\n            $error = __('Invalid User Id ');\n        return $error == '';\n    }\n\n    static function is_formula($text, &$error='') {\n        if (!preg_match('/^[^=\\+@-].*$/s', $text))\n            $error = __('Content cannot start with the following characters: = - + @');\n        return $error == '';\n    }\n\n    static function check_passwd($passwd, &$error='') {\n        try {\n            PasswordPolicy::checkPassword($passwd, null);\n        } catch (BadPassword $ex) {\n            $error = $ex->getMessage();\n        }\n        return $error == '';\n    }\n\n    /*\n     * check_ip\n     * Checks if an IP (IPv4 or IPv6) address is contained in the list of given IPs or subnets.\n     *\n     * @credit - borrowed from Symfony project\n     *\n     */\n    public static function check_ip($ip, $ips) {\n\n        if (!Validator::is_ip($ip))\n            return false;\n\n        $method = substr_count($ip, ':') > 1 ? 'check_ipv6' : 'check_ipv4';\n        $ips = is_array($ips) ? $ips : array($ips);\n        foreach ($ips as $_ip) {\n            if (self::$method($ip, $_ip)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * check_ipv4\n     * Compares two IPv4 addresses.\n     * In case a subnet is given, it checks if it contains the request IP.\n     *\n     * @credit - borrowed from Symfony project\n     */\n    public static function check_ipv4($ip, $cidr) {\n\n        if (false !== strpos($cidr, '/')) {\n            list($address, $netmask) = explode('/', $cidr, 2);\n\n            if ($netmask === '0')\n                return filter_var($address, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);\n\n            if ($netmask < 0 || $netmask > 32)\n                return false;\n\n        } else {\n            $address = $cidr;\n            $netmask = 32;\n        }\n\n        return 0 === substr_compare(\n                sprintf('%032b', ip2long($ip)),\n                sprintf('%032b', ip2long($address)),\n                0, $netmask);\n    }\n\n    /**\n     * Compares two IPv6 addresses.\n     * In case a subnet is given, it checks if it contains the request IP.\n     *\n     * @credit - borrowed from Symfony project\n     * @author David Soria Parra <dsp at php dot net>\n     *\n     * @see https://github.com/dsp/v6tools\n     *\n     */\n    public static function check_ipv6($ip, $cidr) {\n\n        if (!((extension_loaded('sockets') && defined('AF_INET6')) || @inet_pton('::1')))\n            return false;\n\n        if (false !== strpos($cidr, '/')) {\n            list($address, $netmask) = explode('/', $cidr, 2);\n            if ($netmask < 1 || $netmask > 128)\n                return false;\n        } else {\n            $address = $cidr;\n            $netmask = 128;\n        }\n\n        $bytesAddr = unpack('n*', @inet_pton($address));\n        $bytesTest = unpack('n*', @inet_pton($ip));\n        if (!$bytesAddr || !$bytesTest)\n            return false;\n\n        for ($i = 1, $ceil = ceil($netmask / 16); $i <= $ceil; ++$i) {\n            $left = $netmask - 16 * ($i - 1);\n            $left = ($left <= 16) ? $left : 16;\n            $mask = ~(0xffff >> $left) & 0xffff;\n            if (($bytesAddr[$i] & $mask) != ($bytesTest[$i] & $mask)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function process($fields,$vars,&$errors){\n\n        $val = new Validator();\n        $val->setFields($fields);\n        if(!$val->validate($vars))\n            $errors=array_merge($errors,$val->errors());\n\n        return (!$errors);\n    }\n\n    function check_acl($backend) {\n        global $cfg;\n\n        $acl = $cfg->getACL();\n        if (empty($acl))\n            return true;\n        $ip = osTicket::get_client_ip();\n        if (empty($ip))\n            return false;\n\n        $aclbk = $cfg->getACLBackend();\n        switch($backend) {\n            case 'client':\n                if (in_array($aclbk, array(0,3)))\n                    return true;\n                break;\n            case 'staff':\n                if (in_array($aclbk, array(0,2)))\n                    return true;\n                break;\n            default:\n                return false;\n                break;\n        }\n\n        if (!in_array($ip, $acl))\n            return false;\n\n        return true;\n    }\n}\n?>\n", "<?php\n\nrequire_once('client.inc.php');\nif(!defined('INCLUDE_DIR')) die('Fatal Error');\ndefine('CLIENTINC_DIR',INCLUDE_DIR.'client/');\ndefine('OSTCLIENTINC',TRUE); //make includes happy\n\nrequire_once(INCLUDE_DIR.'class.client.php');\n\n$inc = 'pwreset.request.php';\nif($_POST) {\n    if (!$ost->checkCSRFToken()) {\n        Http::response(400, __('Valid CSRF Token Required'));\n        exit;\n    }\n    switch ($_POST['do']) {\n        case 'sendmail':\n            $userid = (string) $_POST['userid'];\n            if (Validator::is_userid($userid)\n                    && ($acct=ClientAccount::lookupByUsername($userid))) {\n                if (!$acct->isPasswdResetEnabled()) {\n                    $banner = __('Password reset is not enabled for your account. Contact your administrator');\n                }\n                elseif ($acct->sendResetEmail()) {\n                    $inc = 'pwreset.sent.php';\n                }\n                else\n                    $banner = __('Unable to send reset email.')\n                        .' '.__('Internal error occurred');\n            }\n            else\n                $banner = sprintf(__('Unable to verify username %s'),\n                    Format::htmlchars($_POST['userid']));\n            break;\n        case 'reset':\n            $inc = 'pwreset.login.php';\n            $errors = array();\n            if ($client = UserAuthenticationBackend::processSignOn($errors)) {\n                Http::redirect('index.php');\n            }\n            elseif (isset($errors['msg'])) {\n                $banner = $errors['msg'];\n            }\n            break;\n    }\n}\nelseif ($_GET['token']) {\n    $banner = __('Re-enter your username or email');\n    $inc = 'pwreset.login.php';\n    $_config = new Config('pwreset');\n    if (($id = $_config->get($_GET['token']))\n            && ($acct = ClientAccount::lookup(array('user_id'=>substr($id,1))))) {\n        if (!$acct->isConfirmed()) {\n            $inc = 'register.confirmed.inc.php';\n            $acct->confirm();\n            // FIXME: The account has to be uncached in order for the lookup\n            // in the ::processSignOn to detect the confirmation\n            ModelInstanceManager::uncache($acct);\n            // Log the user in\n            if ($client = UserAuthenticationBackend::processSignOn($errors)) {\n                if ($acct->hasPassword() && !$acct->get('backend')) {\n                    $acct->cancelResetTokens();\n                }\n                // No password setup yet -- force one to be created\n                else {\n                    $_SESSION['_client']['reset-token'] = $_GET['token'];\n                    $acct->forcePasswdReset();\n                }\n                Http::redirect('account.php?confirmed');\n            }\n        }\n    }\n    elseif ($id && ($user = User::lookup($id)))\n        $inc = 'pwreset.create.php';\n    else\n        Http::redirect('index.php');\n}\nelse {\n    $banner = __('Enter your username or email address below');\n}\n\n$nav = new UserNav();\n$nav->setActiveNav('status');\nrequire CLIENTINC_DIR.'header.inc.php';\nrequire CLIENTINC_DIR.$inc;\nrequire CLIENTINC_DIR.'footer.inc.php';\n?>\n", "<?php\n/*********************************************************************\n    pwreset.php\n\n    Handles step 2, 3 and 5 of password resetting\n        1. Fail to login (2+ fail login attempts)\n        2. Visit password reset form and enter username or email\n        3. Receive an email with a link and follow it\n        4. Visit password reset form again, with the link\n        5. Enter the username or email address again and login\n        6. Password change is now required, user changes password and\n           continues on with the session\n\n    Peter Rotich <peter@osticket.com>\n    Jared Hancock <jared@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once('../main.inc.php');\nif(!defined('INCLUDE_DIR')) die('Fatal Error. Kwaheri!');\n\n// Bootstrap gettext translations. Since no one is yet logged in, use the\n// system or browser default\nTextDomain::configureForUser();\n\nrequire_once(INCLUDE_DIR.'class.staff.php');\nrequire_once(INCLUDE_DIR.'class.csrf.php');\n\n$tpl = 'pwreset.php';\nif($_POST) {\n    if (!$ost->checkCSRFToken()) {\n        Http::response(400, __('Valid CSRF Token Required'));\n        exit;\n    }\n    switch ($_POST['do']) {\n        case 'sendmail':\n            $userid = (string) $_POST['userid'];\n            if (Validator::is_userid($userid)\n                    && ($staff=Staff::lookup($userid))) {\n                if (!$staff->hasPassword()) {\n                    if ($staff->sendResetEmail('registration-staff', false) !== false)\n                        $msg = __('Registration email sent successfully.');\n                    else\n                        $msg = __('Unable to reset password. Contact your administrator');\n                }\n                elseif (!$staff->sendResetEmail()) {\n                    $tpl = 'pwreset.sent.php';\n                }\n            }\n            else\n                $msg = sprintf(__('Unable to verify username %s'),\n                    Format::htmlchars($_POST['userid']));\n            break;\n        case 'newpasswd':\n            // TODO: Compare passwords\n            $tpl = 'pwreset.login.php';\n            $errors = array();\n            if ($staff = StaffAuthenticationBackend::processSignOn($errors)) {\n                $info = array('page' => 'index.php');\n                Http::redirect($info['page']);\n            }\n            elseif (isset($errors['msg'])) {\n                $msg = $errors['msg'];\n            }\n            break;\n    }\n}\nelseif ($_GET['token']) {\n    $msg = __('Please enter your username or email');\n    $_config = new Config('pwreset');\n    if (($id = $_config->get($_GET['token']))\n            && is_numeric($id)\n            && ($staff = Staff::lookup( (int) $id)))\n        // TODO: Detect staff confirmation (for welcome email)\n        $tpl = 'pwreset.login.php';\n    else\n        header('Location: index.php');\n}\nelseif ($cfg->allowPasswordReset()) {\n    $msg = __('Enter your username or email address below');\n}\nelse {\n    $_SESSION['_staff']['auth']['msg']=__('Password resets are disabled');\n    return header('Location: index.php');\n}\ndefine(\"OSTSCPINC\",TRUE); //Make includes happy!\ninclude_once(INCLUDE_DIR.'staff/'. $tpl);\n"], "filenames": ["include/class.staff.php", "include/class.user.php", "include/class.validator.php", "pwreset.php", "scp/pwreset.php"], "buggy_code_start_loc": [865, 1344, 223, 18, 42], "buggy_code_end_loc": [870, 1348, 224, 19, 76], "fixing_code_start_loc": [865, 1344, 223, 18, 42], "fixing_code_end_loc": [870, 1348, 232, 21, 79], "type": "CWE-89", "message": "SQL injection in osTicket before 1.14.8 and 1.15.4 login and password reset process allows attackers to access the osTicket administration profile functionality.", "other": {"cve": {"id": "CVE-2021-42235", "sourceIdentifier": "cve@mitre.org", "published": "2022-05-04T17:15:08.087", "lastModified": "2022-05-13T17:13:06.287", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL injection in osTicket before 1.14.8 and 1.15.4 login and password reset process allows attackers to access the osTicket administration profile functionality."}, {"lang": "es", "value": "Una inyecci\u00f3n SQL en el proceso de inicio de sesi\u00f3n y restablecimiento de contrase\u00f1a de osTicket versiones anteriores a 1.14.8 y 1.15.4, permite a atacantes acceder a la funcionalidad osTicket administration profile"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enhancesoft:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.14.8", "matchCriteriaId": "2ACCEE58-8958-4EBE-BF9E-37DD119DBD44"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enhancesoft:osticket:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.15", "versionEndExcluding": "1.15.4", "matchCriteriaId": "22F26EC6-59B4-4CCA-9A7E-FD8DD0D0ECE9"}]}]}], "references": [{"url": "https://github.com/osTicket/osTicket/commit/e28291022e662ffa754e170c09cade7bdadf3fd9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/osTicket/osTicket/commit/e28291022e662ffa754e170c09cade7bdadf3fd9"}}