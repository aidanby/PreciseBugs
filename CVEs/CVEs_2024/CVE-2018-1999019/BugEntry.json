{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\Course;\nuse Chamilo\\CoreBundle\\Entity\\ExtraFieldValues;\nuse Chamilo\\CoreBundle\\Entity\\Session;\nuse Chamilo\\CourseBundle\\Entity\\CLpCategory;\nuse Chamilo\\CourseBundle\\Entity\\CNotebook;\nuse Chamilo\\CourseBundle\\Entity\\Repository\\CNotebookRepository;\nuse Chamilo\\UserBundle\\Entity\\User;\n\n/**\n * Class RestApi.\n */\nclass Rest extends WebService\n{\n    const SERVIVE_NAME = 'MsgREST';\n    const EXTRA_FIELD_GCM_REGISTRATION = 'gcm_registration_id';\n\n    const GET_AUTH = 'authenticate';\n    const GET_USER_MESSAGES = 'user_messages';\n    const SAVE_GCM_ID = 'gcm_id';\n    const GET_USER_COURSES = 'user_courses';\n    const GET_PROFILE = 'user_profile';\n    const GET_COURSE_INFO = 'course_info';\n    const GET_COURSE_DESCRIPTIONS = 'course_descriptions';\n    const GET_COURSE_DOCUMENTS = 'course_documents';\n    const GET_COURSE_ANNOUNCEMENTS = 'course_announcements';\n    const GET_COURSE_ANNOUNCEMENT = 'course_announcement';\n    const GET_COURSE_AGENDA = 'course_agenda';\n    const GET_COURSE_NOTEBOOKS = 'course_notebooks';\n    const GET_COURSE_FORUM_CATEGORIES = 'course_forumcategories';\n    const GET_COURSE_FORUM = 'course_forum';\n    const GET_COURSE_FORUM_THREAD = 'course_forumthread';\n    const GET_COURSE_LEARNPATHS = 'course_learnpaths';\n    const GET_COURSE_LEARNPATH = 'course_learnpath';\n    const SAVE_FORUM_POST = 'save_forum_post';\n    const GET_USER_SESSIONS = 'user_sessions';\n    const SAVE_USER_MESSAGE = 'save_user_message';\n    const GET_MESSAGE_USERS = 'message_users';\n    const SAVE_COURSE_NOTEBOOK = 'save_course_notebook';\n    const SAVE_FORUM_THREAD = 'save_forum_thread';\n    const SAVE_COURSE = 'save_course';\n    const SAVE_USER = 'save_user';\n    const SUBSCRIBE_USER_TO_COURSE = 'subscribe_user_to_course';\n    const EXTRAFIELD_GCM_ID = 'gcm_registration_id';\n\n    /**\n     * @var Session\n     */\n    private $session;\n    /**\n     * @var Course\n     */\n    private $course;\n\n    /**\n     * Rest constructor.\n     *\n     * @param string $username\n     * @param string $apiKey\n     */\n    public function __construct($username, $apiKey)\n    {\n        parent::__construct($username, $apiKey);\n    }\n\n    /**\n     * Set the current course.\n     *\n     * @param int $id\n     *\n     * @throws Exception\n     */\n    public function setCourse($id)\n    {\n        if (!$id) {\n            $this->course = null;\n\n            return;\n        }\n\n        $em = Database::getManager();\n        /** @var Course $course */\n        $course = $em->find('ChamiloCoreBundle:Course', $id);\n\n        if (!$course) {\n            throw new Exception(get_lang('NoCourse'));\n        }\n\n        $this->course = $course;\n    }\n\n    /** Set the current session\n     * @param int $id\n     *\n     * @throws Exception\n     */\n    public function setSession($id)\n    {\n        if (!$id) {\n            $this->session = null;\n\n            return;\n        }\n\n        $em = Database::getManager();\n        /** @var Session $session */\n        $session = $em->find('ChamiloCoreBundle:Session', $id);\n\n        if (!$session) {\n            throw new Exception(get_lang('NoSession'));\n        }\n\n        $this->session = $session;\n    }\n\n    /**\n     * @param string $username\n     * @param string $apiKeyToValidate\n     *\n     * @throws Exception\n     *\n     * @return Rest\n     */\n    public static function validate($username, $apiKeyToValidate)\n    {\n        $apiKey = self::findUserApiKey($username, self::SERVIVE_NAME);\n\n        if ($apiKey != $apiKeyToValidate) {\n            throw new Exception(get_lang('InvalidApiKey'));\n        }\n\n        return new self($username, $apiKey);\n    }\n\n    /**\n     * Create the gcm_registration_id extra field for users.\n     */\n    public static function init()\n    {\n        $extraField = new ExtraField('user');\n        $fieldInfo = $extraField->get_handler_field_info_by_field_variable(self::EXTRA_FIELD_GCM_REGISTRATION);\n\n        if (empty($fieldInfo)) {\n            $extraField->save([\n                'variable' => self::EXTRA_FIELD_GCM_REGISTRATION,\n                'field_type' => ExtraField::FIELD_TYPE_TEXT,\n                'display_text' => self::EXTRA_FIELD_GCM_REGISTRATION,\n            ]);\n        }\n    }\n\n    /**\n     * @param string $registrationId\n     *\n     * @return bool\n     */\n    public function setGcmId($registrationId)\n    {\n        $registrationId = Security::remove_XSS($registrationId);\n        $extraFieldValue = new ExtraFieldValue('user');\n\n        return $extraFieldValue->save([\n            'variable' => self::EXTRA_FIELD_GCM_REGISTRATION,\n            'value' => $registrationId,\n            'item_id' => $this->user->getId(),\n        ]);\n    }\n\n    /**\n     * @param int $lastMessageId\n     *\n     * @return array\n     */\n    public function getUserMessages($lastMessageId = 0)\n    {\n        $lastMessages = MessageManager::getMessagesFromLastReceivedMessage($this->user->getId(), $lastMessageId);\n        $messages = [];\n\n        foreach ($lastMessages as $message) {\n            $hasAttachments = MessageManager::hasAttachments($message['id']);\n\n            $messages[] = [\n                'id' => $message['id'],\n                'title' => $message['title'],\n                'sender' => [\n                    'id' => $message['user_id'],\n                    'lastname' => $message['lastname'],\n                    'firstname' => $message['firstname'],\n                    'completeName' => api_get_person_name($message['firstname'], $message['lastname']),\n                ],\n                'sendDate' => $message['send_date'],\n                'content' => $message['content'],\n                'hasAttachments' => $hasAttachments,\n                'url' => '',\n            ];\n        }\n\n        return $messages;\n    }\n\n    /**\n     * Get the user courses.\n     *\n     * @return array\n     */\n    public function getUserCourses()\n    {\n        $courses = CourseManager::get_courses_list_by_user_id($this->user->getId());\n        $data = [];\n\n        foreach ($courses as $courseId) {\n            /** @var Course $course */\n            $course = Database::getManager()->find('ChamiloCoreBundle:Course', $courseId['real_id']);\n            $teachers = CourseManager::getTeacherListFromCourseCodeToString($course->getCode());\n\n            $data[] = [\n                'id' => $course->getId(),\n                'title' => $course->getTitle(),\n                'code' => $course->getCode(),\n                'directory' => $course->getDirectory(),\n                'urlPicture' => $course->getPicturePath(true),\n                'teachers' => $teachers,\n            ];\n        }\n\n        return $data;\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseInfo()\n    {\n        $teachers = CourseManager::getTeacherListFromCourseCodeToString($this->course->getCode());\n        $tools = CourseHome::get_tools_category(\n            TOOL_STUDENT_VIEW,\n            $this->course->getId(),\n            $this->session ? $this->session->getId() : 0\n        );\n\n        return [\n            'id' => $this->course->getId(),\n            'title' => $this->course->getTitle(),\n            'code' => $this->course->getCode(),\n            'directory' => $this->course->getDirectory(),\n            'urlPicture' => $this->course->getPicturePath(true),\n            'teachers' => $teachers,\n            'tools' => array_map(\n                function ($tool) {\n                    return ['type' => $tool['name']];\n                },\n                $tools\n            ),\n        ];\n    }\n\n    /**\n     * Get the course descriptions.\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseDescriptions()\n    {\n        $descriptions = CourseDescription::get_descriptions($this->course->getId());\n        $results = [];\n\n        /** @var CourseDescription $description */\n        foreach ($descriptions as $description) {\n            $results[] = [\n                'id' => $description->get_description_type(),\n                'title' => $description->get_title(),\n                'content' => str_replace('src=\"/', 'src=\"'.api_get_path(WEB_PATH), $description->get_content()),\n            ];\n        }\n\n        return $results;\n    }\n\n    /**\n     * @param int $directoryId\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseDocuments($directoryId = 0)\n    {\n        /** @var string $path */\n        $path = '/';\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        if ($directoryId) {\n            $directory = DocumentManager::get_document_data_by_id(\n                $directoryId,\n                $this->course->getCode(),\n                false,\n                $sessionId\n            );\n\n            if (!$directory) {\n                throw new Exception('NoDataAvailable');\n            }\n\n            $path = $directory['path'];\n        }\n\n        $courseInfo = api_get_course_info_by_id($this->course->getId());\n        $documents = DocumentManager::getAllDocumentData(\n            $courseInfo,\n            $path,\n            0,\n            null,\n            false,\n            false,\n            $sessionId\n        );\n        $results = [];\n\n        if (!empty($documents)) {\n            $webPath = api_get_path(WEB_CODE_PATH).'document/document.php?';\n\n            /** @var array $document */\n            foreach ($documents as $document) {\n                if ($document['visibility'] != '1') {\n                    continue;\n                }\n\n                $icon = $document['filetype'] == 'file'\n                    ? choose_image($document['path'])\n                    : chooseFolderIcon($document['path']);\n\n                $results[] = [\n                    'id' => $document['id'],\n                    'type' => $document['filetype'],\n                    'title' => $document['title'],\n                    'path' => $document['path'],\n                    'url' => $webPath.http_build_query([\n                        'username' => $this->user->getUsername(),\n                        'api_key' => $this->apiKey,\n                        'cidReq' => $this->course->getCode(),\n                        'id_session' => $sessionId,\n                        'gidReq' => 0,\n                        'gradebook' => 0,\n                        'origin' => '',\n                        'action' => 'download',\n                        'id' => $document['id'],\n                    ]),\n                    'icon' => $icon,\n                    'size' => format_file_size($document['size']),\n                ];\n            }\n        }\n\n        return $results;\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseAnnouncements()\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        $announcements = AnnouncementManager::getAnnouncements(\n            null,\n            null,\n            false,\n            null,\n            null,\n            null,\n            null,\n            null,\n            0,\n            $this->user->getId(),\n            $this->course->getId(),\n            $sessionId\n        );\n\n        $announcements = array_map(\n            function ($announcement) {\n                return [\n                    'id' => intval($announcement['id']),\n                    'title' => strip_tags($announcement['title']),\n                    'creatorName' => strip_tags($announcement['username']),\n                    'date' => strip_tags($announcement['insert_date']),\n                ];\n            },\n            $announcements\n        );\n\n        return $announcements;\n    }\n\n    /**\n     * @param int $announcementId\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseAnnouncement($announcementId)\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $announcement = AnnouncementManager::getAnnouncementInfoById(\n            $announcementId,\n            $this->course->getId(),\n            $this->user->getId()\n        );\n\n        if (!$announcement) {\n            throw new Exception(get_lang('NoAnnouncement'));\n        }\n\n        return [\n            'id' => intval($announcement['announcement']->getIid()),\n            'title' => $announcement['announcement']->getTitle(),\n            'creatorName' => $announcement['item_property']->getInsertUser()->getCompleteName(),\n            'date' => api_convert_and_format_date(\n                $announcement['item_property']->getInsertDate(),\n                DATE_TIME_FORMAT_LONG_24H\n            ),\n            'content' => AnnouncementManager::parseContent(\n                $this->user->getId(),\n                $announcement['announcement']->getContent(),\n                $this->course->getCode(),\n                $sessionId\n            ),\n        ];\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseAgenda()\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        $agenda = new Agenda(\n            'course',\n            $this->user->getId(),\n            $this->course->getId(),\n            $sessionId\n        );\n        $result = $agenda->parseAgendaFilter(null);\n\n        $start = new DateTime(api_get_utc_datetime(), new DateTimeZone('UTC'));\n        $start->modify('first day of this month');\n        $start->setTime(0, 0, 0);\n        $end = new DateTime(api_get_utc_datetime(), new DateTimeZone('UTC'));\n        $end->modify('last day of this month');\n        $end->setTime(23, 59, 59);\n\n        $groupId = current($result['groups']);\n        $userId = current($result['users']);\n\n        $events = $agenda->getEvents(\n            $start->getTimestamp(),\n            $end->getTimestamp(),\n            $this->course->getId(),\n            $groupId,\n            $userId,\n            'array'\n        );\n\n        if (!is_array($events)) {\n            return [];\n        }\n\n        $webPath = api_get_path(WEB_PATH);\n\n        return array_map(\n            function ($event) use ($webPath) {\n                return [\n                    'id' => intval($event['unique_id']),\n                    'title' => $event['title'],\n                    'content' => str_replace('src=\"/', 'src=\"'.$webPath, $event['description']),\n                    'startDate' => $event['start_date_localtime'],\n                    'endDate' => $event['end_date_localtime'],\n                    'isAllDay' => $event['allDay'] ? true : false,\n                ];\n            },\n            $events\n        );\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseNotebooks()\n    {\n        $em = Database::getManager();\n        /** @var CNotebookRepository $notebooksRepo */\n        $notebooksRepo = $em->getRepository('ChamiloCourseBundle:CNotebook');\n        $notebooks = $notebooksRepo->findByUser($this->user, $this->course, $this->session);\n\n        return array_map(\n            function (CNotebook $notebook) {\n                return [\n                    'id' => $notebook->getIid(),\n                    'title' => $notebook->getTitle(),\n                    'description' => $notebook->getDescription(),\n                    'creationDate' => api_format_date(\n                        $notebook->getCreationDate()->getTimestamp()\n                    ),\n                    'updateDate' => api_format_date(\n                        $notebook->getUpdateDate()->getTimestamp()\n                    ),\n                ];\n            },\n            $notebooks\n        );\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseForumCategories()\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $webCoursePath = api_get_path(WEB_COURSE_PATH).$this->course->getDirectory().'/upload/forum/images/';\n\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $categoriesFullData = get_forum_categories('', $this->course->getId(), $sessionId);\n        $categories = [];\n        $includeGroupsForums = api_get_setting('display_groups_forum_in_general_tool') === 'true';\n        $forumsFullData = get_forums('', $this->course->getCode(), $includeGroupsForums, $sessionId);\n        $forums = [];\n\n        foreach ($forumsFullData as $forumId => $forumInfo) {\n            $forum = [\n                'id' => intval($forumInfo['iid']),\n                'catId' => intval($forumInfo['forum_category']),\n                'title' => $forumInfo['forum_title'],\n                'description' => $forumInfo['forum_comment'],\n                'image' => $forumInfo['forum_image'] ? ($webCoursePath.$forumInfo['forum_image']) : '',\n                'numberOfThreads' => isset($forumInfo['number_of_threads']) ? intval($forumInfo['number_of_threads']) : 0,\n                'lastPost' => null,\n            ];\n\n            $lastPostInfo = get_last_post_information($forumId, false, $this->course->getId(), $sessionId);\n\n            if ($lastPostInfo) {\n                $forum['lastPost'] = [\n                    'date' => api_convert_and_format_date($lastPostInfo['last_post_date']),\n                    'user' => api_get_person_name(\n                        $lastPostInfo['last_poster_firstname'],\n                        $lastPostInfo['last_poster_lastname']\n                    ),\n                ];\n            }\n\n            $forums[] = $forum;\n        }\n\n        foreach ($categoriesFullData as $category) {\n            $categoryForums = array_filter(\n                $forums,\n                function (array $forum) use ($category) {\n                    if ($forum['catId'] != $category['cat_id']) {\n                        return false;\n                    }\n\n                    return true;\n                }\n            );\n\n            $categories[] = [\n                'id' => intval($category['iid']),\n                'title' => $category['cat_title'],\n                'catId' => intval($category['cat_id']),\n                'description' => $category['cat_comment'],\n                'forums' => $categoryForums,\n                'courseId' => $this->course->getId(),\n            ];\n        }\n\n        return $categories;\n    }\n\n    /**\n     * @param int $forumId\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseForum($forumId)\n    {\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $forumInfo = get_forums($forumId, $this->course->getCode(), true, $sessionId);\n\n        if (!isset($forumInfo['iid'])) {\n            throw new Exception(get_lang('NoForum'));\n        }\n\n        $webCoursePath = api_get_path(WEB_COURSE_PATH).$this->course->getDirectory().'/upload/forum/images/';\n        $forum = [\n            'id' => $forumInfo['iid'],\n            'title' => $forumInfo['forum_title'],\n            'description' => $forumInfo['forum_comment'],\n            'image' => $forumInfo['forum_image'] ? ($webCoursePath.$forumInfo['forum_image']) : '',\n            'threads' => [],\n        ];\n\n        $threads = get_threads($forumInfo['iid'], $this->course->getId(), $sessionId);\n\n        foreach ($threads as $thread) {\n            $forum['threads'][] = [\n                'id' => $thread['iid'],\n                'title' => $thread['thread_title'],\n                'lastEditDate' => api_convert_and_format_date($thread['lastedit_date'], DATE_TIME_FORMAT_LONG_24H),\n                'numberOfReplies' => $thread['thread_replies'],\n                'numberOfViews' => $thread['thread_views'],\n                'author' => api_get_person_name($thread['firstname'], $thread['lastname']),\n            ];\n        }\n\n        return $forum;\n    }\n\n    /**\n     * @param int $forumId\n     * @param int $threadId\n     *\n     * @return array\n     */\n    public function getCourseForumThread($forumId, $threadId)\n    {\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $threadInfo = get_thread_information($forumId, $threadId, $sessionId);\n\n        $thread = [\n            'id' => intval($threadInfo['iid']),\n            'cId' => intval($threadInfo['c_id']),\n            'title' => $threadInfo['thread_title'],\n            'forumId' => intval($threadInfo['forum_id']),\n            'posts' => [],\n        ];\n\n        $forumInfo = get_forums($threadInfo['forum_id'], $this->course->getCode(), true, $sessionId);\n        $postsInfo = getPosts($forumInfo, $threadInfo['iid'], 'ASC');\n\n        foreach ($postsInfo as $postInfo) {\n            $thread['posts'][] = [\n                'id' => $postInfo['iid'],\n                'title' => $postInfo['post_title'],\n                'text' => $postInfo['post_text'],\n                'author' => api_get_person_name($postInfo['firstname'], $postInfo['lastname']),\n                'date' => api_convert_and_format_date($postInfo['post_date'], DATE_TIME_FORMAT_LONG_24H),\n                'parentId' => $postInfo['post_parent_id'],\n            ];\n        }\n\n        return $thread;\n    }\n\n    /**\n     * @return array\n     */\n    public function getUserProfile()\n    {\n        $pictureInfo = UserManager::get_user_picture_path_by_id($this->user->getId(), 'web');\n\n        $result = [\n            'pictureUri' => $pictureInfo['dir'].$pictureInfo['file'],\n            'fullName' => $this->user->getCompleteName(),\n            'username' => $this->user->getUsername(),\n            'officialCode' => $this->user->getOfficialCode(),\n            'phone' => $this->user->getPhone(),\n            'extra' => [],\n        ];\n\n        $fieldValue = new ExtraFieldValue('user');\n        $extraInfo = $fieldValue->getAllValuesForAnItem($this->user->getId(), true);\n\n        foreach ($extraInfo as $extra) {\n            /** @var ExtraFieldValues $extraValue */\n            $extraValue = $extra['value'];\n\n            $result['extra'][] = [\n                'title' => $extraValue->getField()->getDisplayText(true),\n                'value' => $extraValue->getValue(),\n            ];\n        }\n\n        return $result;\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseLearnPaths()\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $categoriesTempList = learnpath::getCategories($this->course->getId());\n\n        $categoryNone = new CLpCategory();\n        $categoryNone->setId(0);\n        $categoryNone->setName(get_lang('WithOutCategory'));\n        $categoryNone->setPosition(0);\n\n        $categories = array_merge([$categoryNone], $categoriesTempList);\n        $categoryData = [];\n\n        /** @var CLpCategory $category */\n        foreach ($categories as $category) {\n            $learnPathList = new LearnpathList(\n                $this->user->getId(),\n                $this->course->getCode(),\n                $sessionId,\n                null,\n                false,\n                $category->getId()\n            );\n\n            $flatLpList = $learnPathList->get_flat_list();\n\n            if (empty($flatLpList)) {\n                continue;\n            }\n\n            $listData = [];\n\n            foreach ($flatLpList as $lpId => $lpDetails) {\n                if ($lpDetails['lp_visibility'] == 0) {\n                    continue;\n                }\n\n                if (!learnpath::is_lp_visible_for_student(\n                    $lpId,\n                    $this->user->getId(),\n                    $this->course->getCode(),\n                    $sessionId\n                )) {\n                    continue;\n                }\n\n                $timeLimits = false;\n\n                // This is an old LP (from a migration 1.8.7) so we do nothing\n                if (empty($lpDetails['created_on']) && empty($lpDetails['modified_on'])) {\n                    $timeLimits = false;\n                }\n\n                // Checking if expired_on is ON\n                if (!empty($lpDetails['expired_on'])) {\n                    $timeLimits = true;\n                }\n\n                if ($timeLimits) {\n                    if (!empty($lpDetails['publicated_on']) && !empty($lpDetails['expired_on'])) {\n                        $startTime = api_strtotime($lpDetails['publicated_on'], 'UTC');\n                        $endTime = api_strtotime($lpDetails['expired_on'], 'UTC');\n                        $now = time();\n                        $isActivedTime = false;\n\n                        if ($now > $startTime && $endTime > $now) {\n                            $isActivedTime = true;\n                        }\n\n                        if (!$isActivedTime) {\n                            continue;\n                        }\n                    }\n                }\n\n                $progress = learnpath::getProgress($lpId, $this->user->getId(), $this->course->getId(), $sessionId);\n\n                $listData[] = [\n                    'id' => $lpId,\n                    'title' => Security::remove_XSS($lpDetails['lp_name']),\n                    'progress' => intval($progress),\n                    'url' => api_get_path(WEB_CODE_PATH).'webservices/api/v2.php?'.http_build_query([\n                        'hash' => $this->encodeParams([\n                            'action' => 'course_learnpath',\n                            'lp_id' => $lpId,\n                            'course' => $this->course->getId(),\n                            'session' => $sessionId,\n                        ]),\n                    ]),\n                ];\n            }\n\n            if (empty($listData)) {\n                continue;\n            }\n\n            $categoryData[] = [\n                'id' => $category->getId(),\n                'name' => $category->getName(),\n                'learnpaths' => $listData,\n            ];\n        }\n\n        return $categoryData;\n    }\n\n    /**\n     * @param string $encoded\n     *\n     * @return array\n     */\n    public static function decodeParams($encoded)\n    {\n        $decoded = str_replace(['-', '_', '.'], ['+', '/', '='], $encoded);\n        $mod4 = strlen($decoded) % 4;\n\n        if ($mod4) {\n            $decoded .= substr('====', $mod4);\n        }\n\n        $b64Decoded = base64_decode($decoded);\n\n        return unserialize($b64Decoded);\n    }\n\n    /**\n     * Start login for a user. Then make a redirect to show the learnpath.\n     *\n     * @param int $lpId\n     */\n    public function showLearningPath($lpId)\n    {\n        $loggedUser['user_id'] = $this->user->getId();\n        $loggedUser['status'] = $this->user->getStatus();\n        $loggedUser['uidReset'] = true;\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        ChamiloSession::write('_user', $loggedUser);\n        Login::init_user($this->user->getId(), true);\n\n        $url = api_get_path(WEB_CODE_PATH).'lp/lp_controller.php?'.http_build_query([\n            'cidReq' => $this->course->getCode(),\n            'id_session' => $sessionId,\n            'gidReq' => 0,\n            'gradebook' => 0,\n            'origin' => '',\n            'action' => 'view',\n            'lp_id' => intval($lpId),\n            'isStudentView' => 'true',\n        ]);\n\n        header(\"Location: $url\");\n        exit;\n    }\n\n    /**\n     * @param array $postValues\n     * @param int   $forumId\n     *\n     * @return array\n     */\n    public function saveForumPost(array $postValues, $forumId)\n    {\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $forum = get_forums($forumId, $this->course->getCode());\n        store_reply($forum, $postValues, $this->course->getId(), $this->user->getId());\n\n        return [\n            'registered' => true,\n        ];\n    }\n\n    /**\n     * Get the list of sessions for current user.\n     *\n     * @return array the sessions list\n     */\n    public function getUserSessions()\n    {\n        $data = [];\n        $sessionsByCategory = UserManager::get_sessions_by_category($this->user->getId(), false);\n\n        foreach ($sessionsByCategory as $category) {\n            $categorySessions = [];\n\n            foreach ($category['sessions'] as $sessions) {\n                $sessionCourses = [];\n\n                foreach ($sessions['courses'] as $course) {\n                    $courseInfo = api_get_course_info_by_id($course['real_id']);\n                    $teachers = SessionManager::getCoachesByCourseSessionToString(\n                        $sessions['session_id'],\n                        $course['real_id']\n                    );\n\n                    $sessionCourses[] = [\n                        'id' => $courseInfo['real_id'],\n                        'title' => $courseInfo['title'],\n                        'code' => $courseInfo['code'],\n                        'directory' => $courseInfo['directory'],\n                        'pictureUrl' => $courseInfo['course_image_large'],\n                        'teachers' => $teachers,\n                    ];\n                }\n\n                $sessionBox = Display::getSessionTitleBox($sessions['session_id']);\n\n                $categorySessions[] = [\n                    'name' => $sessionBox['title'],\n                    'id' => $sessions['session_id'],\n                    'date' => $sessionBox['dates'],\n                    'duration' => isset($sessionBox['duration']) ? $sessionBox['duration'] : null,\n                    'courses' => $sessionCourses,\n                ];\n            }\n\n            $data[] = [\n                'id' => $category['session_category']['id'],\n                'name' => $category['session_category']['name'],\n                'sessions' => $categorySessions,\n            ];\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param string $subject\n     * @param string $text\n     * @param array  $receivers\n     *\n     * @return array\n     */\n    public function saveUserMessage($subject, $text, array $receivers)\n    {\n        foreach ($receivers as $userId) {\n            MessageManager::send_message($userId, $subject, $text);\n        }\n\n        return [\n            'sent' => true,\n        ];\n    }\n\n    /**\n     * @param string $search\n     *\n     * @return array\n     */\n    public function getMessageUsers($search)\n    {\n        /** @var UserRepository $repo */\n        $repo = Database::getManager()->getRepository('ChamiloUserBundle:User');\n\n        $users = $repo->findUsersToSendMessage($this->user->getId(), $search);\n\n        $showEmail = api_get_setting('show_email_addresses') === 'true';\n        $data = [];\n\n        /** @var User $user */\n        foreach ($users as $user) {\n            $userName = $user->getCompleteName();\n\n            if ($showEmail) {\n                $userName .= \" ({$user->getEmail()})\";\n            }\n\n            $data[] = [\n                'id' => $user->getId(),\n                'name' => $userName,\n            ];\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param string $title\n     * @param string $text\n     *\n     * @return array\n     */\n    public function saveCourseNotebook($title, $text)\n    {\n        $values = ['note_title' => $title, 'note_comment' => $text];\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        $noteBookId = NotebookManager::save_note(\n            $values,\n            $this->user->getId(),\n            $this->course->getId(),\n            $sessionId\n        );\n\n        return [\n            'registered' => $noteBookId,\n        ];\n    }\n\n    /**\n     * @param array $values\n     * @param int   $forumId\n     *\n     * @return array\n     */\n    public function saveForumThread(array $values, $forumId)\n    {\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $forum = get_forums($forumId, $this->course->getCode(), true, $sessionId);\n        $courseInfo = api_get_course_info($this->course->getCode());\n        $id = store_thread($forum, $values, $courseInfo, false, $this->user->getId(), $sessionId);\n\n        return [\n            'registered' => $id,\n        ];\n    }\n\n    /**\n     * @param array $courseParam\n     *\n     * @return array\n     */\n    public function addCourse(array $courseParam)\n    {\n        $tableCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n        $extraList = [];\n        $results = [];\n\n        $title = isset($courseParam['title']) ? $courseParam['title'] : '';\n        $categoryCode = isset($courseParam['category_code']) ? $courseParam['category_code'] : '';\n        $wantedCode = isset($courseParam['wanted_code']) ? intval($courseParam['wanted_code']) : 0;\n        $tutorName = isset($courseParam['tutor_name']) ? $courseParam['tutor_name'] : '';\n        $courseLanguage = isset($courseParam['language']) ? $courseParam['language'] : null;\n        $originalCourseIdName = isset($courseParam['original_course_id_name'])\n            ? $courseParam['original_course_id_name']\n            : null;\n        $originalCourseIdValue = isset($courseParam['original_course_id_value'])\n            ? $courseParam['original_course_id_value']\n            : null;\n        $diskQuota = isset($courseParam['disk_quota']) ? $courseParam['disk_quota'] : '100';\n        $visibility = isset($courseParam['visibility']) ? (int) $courseParam['visibility'] : null;\n\n        if (isset($courseParam['visibility'])) {\n            if ($courseParam['visibility'] &&\n                $courseParam['visibility'] >= 0 &&\n                $courseParam['visibility'] <= 3\n            ) {\n                $visibility = (int) $courseParam['visibility'];\n            }\n        }\n\n        // Check whether exits $x_course_code into user_field_values table.\n        $courseInfo = CourseManager::getCourseInfoFromOriginalId(\n            $originalCourseIdValue,\n            $originalCourseIdName\n        );\n\n        if (!empty($courseInfo)) {\n            if ($courseInfo['visibility'] != 0) {\n                $sql = \"UPDATE $tableCourse SET\n                            course_language = '\".Database::escape_string($courseLanguage).\"',\n                            title = '\".Database::escape_string($title).\"',\n                            category_code = '\".Database::escape_string($categoryCode).\"',\n                            tutor_name = '\".Database::escape_string($tutorName).\"',\n                            visual_code = '\".Database::escape_string($wantedCode).\"'\";\n                if ($visibility !== null) {\n                    $sql .= \", visibility = $visibility \";\n                }\n                $sql .= \" WHERE id = \".$courseInfo['real_id'];\n                Database::query($sql);\n                if (is_array($extraList) && count($extraList) > 0) {\n                    foreach ($extraList as $extra) {\n                        $extraFieldName = $extra['field_name'];\n                        $extraFieldValue = $extra['field_value'];\n                        // Save the external system's id into course_field_value table.\n                        CourseManager::update_course_extra_field_value(\n                            $courseInfo['code'],\n                            $extraFieldName,\n                            $extraFieldValue\n                        );\n                    }\n                }\n                $results[] = $courseInfo['code'];\n            }\n        }\n\n        $params = [];\n        $params['title'] = $title;\n        $params['wanted_code'] = $wantedCode;\n        $params['category_code'] = $categoryCode;\n        $params['course_category'] = $categoryCode;\n        $params['tutor_name'] = $tutorName;\n        $params['course_language'] = $courseLanguage;\n        $params['user_id'] = $this->user->getId();\n        $params['visibility'] = $visibility;\n        $params['disk_quota'] = $diskQuota;\n        $params['subscribe'] = empty($courseParam['subscribe']) ? 0 : 1;\n        $params['unsubscribe'] = empty($courseParam['unsubscribe']) ? 0 : 1;\n\n        $courseInfo = CourseManager::create_course($params, $params['user_id']);\n\n        if (!empty($courseInfo)) {\n            $courseCode = $courseInfo['code'];\n\n            // Save new field label into course_field table\n            CourseManager::create_course_extra_field(\n                $originalCourseIdName,\n                1,\n                $originalCourseIdName,\n                ''\n            );\n\n            // Save the external system's id into user_field_value table.\n            CourseManager::update_course_extra_field_value(\n                $courseCode,\n                $originalCourseIdName,\n                $originalCourseIdValue\n            );\n\n            if (is_array($extraList) && count($extraList) > 0) {\n                foreach ($extraList as $extra) {\n                    $extraFieldName = $extra['field_name'];\n                    $extraFieldValue = $extra['field_value'];\n                    // Save new fieldlabel into course_field table.\n                    CourseManager::create_course_extra_field(\n                        $extraFieldName,\n                        1,\n                        $extraFieldName,\n                        ''\n                    );\n                    // Save the external system's id into course_field_value table.\n                    CourseManager::update_course_extra_field_value(\n                        $courseCode,\n                        $extraFieldName,\n                        $extraFieldValue\n                    );\n                }\n            }\n            $results[] = $courseCode;\n        }\n\n        return $results;\n    }\n\n    /**\n     * @param $user_param\n     *\n     * @return array\n     */\n    public function addUser($user_param)\n    {\n        $results = [];\n        $orig_user_id_value = [];\n        $userManager = UserManager::getManager();\n        $userRepository = UserManager::getRepository();\n\n        $firstName = $user_param['firstname'];\n        $lastName = $user_param['lastname'];\n        $status = $user_param['status'];\n        $email = $user_param['email'];\n        $loginName = $user_param['loginname'];\n        $password = $user_param['password'];\n        $official_code = '';\n        $language = '';\n        $phone = '';\n        $picture_uri = '';\n        $auth_source = PLATFORM_AUTH_SOURCE;\n        $expiration_date = '';\n        $active = 1;\n        $hr_dept_id = 0;\n        $extra = null;\n        $original_user_id_name = $user_param['original_user_id_name'];\n        $original_user_id_value = $user_param['original_user_id_value'];\n        $orig_user_id_value[] = $user_param['original_user_id_value'];\n        $extra_list = $user_param['extra'];\n        if (!empty($user_param['language'])) {\n            $language = $user_param['language'];\n        }\n        if (!empty($user_param['phone'])) {\n            $phone = $user_param['phone'];\n        }\n        if (!empty($user_param['expiration_date'])) {\n            $expiration_date = $user_param['expiration_date'];\n        }\n\n        // Default language.\n        if (empty($language)) {\n            $language = api_get_setting('platformLanguage');\n        }\n\n        // First check wether the login already exists.\n        if (!UserManager::is_username_available($loginName)) {\n            $results[] = 0;\n        }\n\n        $userId = UserManager::create_user(\n            $firstName,\n            $lastName,\n            $status,\n            $email,\n            $loginName,\n            $password,\n            $official_code,\n            $language,\n            $phone,\n            $picture_uri,\n            $auth_source,\n            $expiration_date,\n            $active,\n            $hr_dept_id\n        );\n\n        if ($userId) {\n            if (api_is_multiple_url_enabled()) {\n                if (api_get_current_access_url_id() != -1) {\n                    UrlManager::add_user_to_url(\n                        $userId,\n                        api_get_current_access_url_id()\n                    );\n                } else {\n                    UrlManager::add_user_to_url($userId, 1);\n                }\n            } else {\n                // We add by default the access_url_user table with access_url_id = 1\n                UrlManager::add_user_to_url($userId, 1);\n            }\n\n            // Save new field label into user_field table.\n            UserManager::create_extra_field(\n                $original_user_id_name,\n                1,\n                $original_user_id_name,\n                ''\n            );\n            // Save the external system's id into user_field_value table.\n            UserManager::update_extra_field_value(\n                $userId,\n                $original_user_id_name,\n                $original_user_id_value\n            );\n\n            if (is_array($extra_list) && count($extra_list) > 0) {\n                foreach ($extra_list as $extra) {\n                    $extra_field_name = $extra['field_name'];\n                    $extra_field_value = $extra['field_value'];\n                    // Save new field label into user_field table.\n                    UserManager::create_extra_field(\n                        $extra_field_name,\n                        1,\n                        $extra_field_name,\n                        ''\n                    );\n                    // Save the external system's id into user_field_value table.\n                    UserManager::update_extra_field_value(\n                        $userId,\n                        $extra_field_name,\n                        $extra_field_value\n                    );\n                }\n            }\n            $results[] = $userId;\n        } else {\n            $results[] = 0;\n        }\n\n        return $results;\n    }\n\n    /**\n     * Subscribe User to Course.\n     *\n     * @param array $params\n     *\n     * @return array\n     */\n    public function subscribeUserToCourse($params)\n    {\n        $course_id = $params['course_id'];\n        $course_code = $params['course_code'];\n        $user_id = $params['user_id'];\n        if (!$course_id && !$course_code) {\n            return [false];\n        }\n        if (!$course_code) {\n            $course_code = CourseManager::get_course_code_from_course_id($course_id);\n        }\n        if (CourseManager::subscribe_user($user_id, $course_code)) {\n            return [true];\n        } else {\n            return [false];\n        }\n\n        return [true];\n    }\n\n    /**\n     * @param array $additionalParams Optional\n     *\n     * @return string\n     */\n    private function encodeParams(array $additionalParams = [])\n    {\n        $params = array_merge($additionalParams, [\n            'api_key' => $this->apiKey,\n            'username' => $this->user->getUsername(),\n        ]);\n\n        $strParams = serialize($params);\n        $b64Encoded = base64_encode($strParams);\n\n        return str_replace(['+', '/', '='], ['-', '_', '.'], $b64Encoded);\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\nrequire_once __DIR__.'/../../inc/global.inc.php';\n\n$hash = isset($_REQUEST['hash']) ? $_REQUEST['hash'] : null;\n\nif ($hash) {\n    $hashParams = Rest::decodeParams($hash);\n\n    foreach ($hashParams as $key => $value) {\n        $_REQUEST[$key] = $value;\n    }\n}\n\n$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : null;\n$username = isset($_REQUEST['username']) ? Security::remove_XSS($_REQUEST['username']) : null;\n$apiKey = isset($_REQUEST['api_key']) ? Security::remove_XSS($_REQUEST['api_key']) : null;\n$course = !empty($_REQUEST['course']) ? intval($_REQUEST['course']) : null;\n$session = !empty($_REQUEST['session']) ? intval($_REQUEST['session']) : null;\n\n$restResponse = new RestResponse();\n\ntry {\n    /** @var Rest $restApi */\n    $restApi = $apiKey ? Rest::validate($username, $apiKey) : null;\n\n    if ($restApi) {\n        $restApi->setCourse($course);\n        $restApi->setSession($session);\n    }\n\n    switch ($action) {\n        case Rest::GET_AUTH:\n            Rest::init();\n\n            $password = isset($_POST['password']) ? $_POST['password'] : null;\n            $isValid = Rest::isValidUser($username, $password);\n            if (!$isValid) {\n                throw new Exception(get_lang('InvalideUserDetected'));\n            }\n\n            $restResponse->setData([\n                'url' => api_get_path(WEB_PATH),\n                'apiKey' => Rest::findUserApiKey($username, Rest::SERVIVE_NAME),\n                'gcmSenderId' => api_get_setting('messaging_gdc_project_number'),\n            ]);\n            break;\n\n        case Rest::SAVE_GCM_ID:\n            $gcmId = isset($_POST['registration_id']) ? Security::remove_XSS($_POST['registration_id']) : null;\n            $restApi->setGcmId($gcmId);\n            $restResponse->setData(['status' => true]);\n            break;\n\n        case Rest::GET_USER_MESSAGES:\n            $lastMessageId = isset($_POST['last']) ? intval($_POST['last']) : 0;\n            $messages = $restApi->getUserMessages($lastMessageId);\n            $restResponse->setData($messages);\n            break;\n        case Rest::GET_USER_COURSES:\n            $courses = $restApi->getUserCourses();\n            $restResponse->setData($courses);\n            break;\n        case Rest::GET_COURSE_INFO:\n            $courseInfo = $restApi->getCourseInfo();\n            $restResponse->setData($courseInfo);\n            break;\n        case Rest::GET_COURSE_DESCRIPTIONS:\n            $descriptions = $restApi->getCourseDescriptions();\n            $restResponse->setData($descriptions);\n            break;\n        case Rest::GET_COURSE_DOCUMENTS:\n            $directoryId = isset($_POST['dir_id']) ? Security::remove_XSS($_POST['dir_id']) : null;\n            $documents = $restApi->getCourseDocuments($directoryId);\n            $restResponse->setData($documents);\n            break;\n        case Rest::GET_COURSE_ANNOUNCEMENTS:\n            $announcements = $restApi->getCourseAnnouncements();\n            $restResponse->setData($announcements);\n            break;\n        case Rest::GET_COURSE_ANNOUNCEMENT:\n            $announcementId = isset($_POST['announcement']) ? Security::remove_XSS($_POST['announcement']) : 0;\n            $announcement = $restApi->getCourseAnnouncement($announcementId);\n            $restResponse->setData($announcement);\n            break;\n        case Rest::GET_COURSE_AGENDA:\n            $agenda = $restApi->getCourseAgenda();\n            $restResponse->setData($agenda);\n            break;\n        case Rest::GET_COURSE_NOTEBOOKS:\n            $notebooks = $restApi->getCourseNotebooks();\n            $restResponse->setData($notebooks);\n            break;\n        case Rest::GET_COURSE_FORUM_CATEGORIES:\n            $forums = $restApi->getCourseForumCategories();\n            $restResponse->setData($forums);\n            break;\n        case Rest::GET_COURSE_FORUM:\n            $forumId = isset($_POST['forum']) ? Security::remove_XSS($_POST['forum']) : 0;\n            $forum = $restApi->getCourseForum($forumId);\n            $restResponse->setData($forum);\n            break;\n        case Rest::GET_COURSE_FORUM_THREAD:\n            $forumId = isset($_POST['forum']) ? intval($_POST['forum']) : 0;\n            $threadId = isset($_POST['thread']) ? intval($_POST['thread']) : 0;\n            $thread = $restApi->getCourseForumThread($forumId, $threadId);\n            $restResponse->setData($thread);\n            break;\n        case Rest::GET_PROFILE:\n            $userInfo = $restApi->getUserProfile();\n            $restResponse->setData($userInfo);\n            break;\n        case Rest::GET_COURSE_LEARNPATHS:\n            $data = $restApi->getCourseLearnPaths();\n            $restResponse->setData($data);\n            break;\n        case Rest::GET_COURSE_LEARNPATH:\n            $lpId = isset($_REQUEST['lp_id']) ? intval($_REQUEST['lp_id']) : 1;\n            $restApi->showLearningPath($lpId);\n            break;\n        case Rest::SAVE_COURSE:\n            $data = $restApi->addCourse($_POST);\n            $restResponse->setData($data);\n            break;\n        case Rest::SAVE_USER:\n            $data = $restApi->addUser($_POST);\n            $restResponse->setData($data);\n            break;\n        case Rest::SUBSCRIBE_USER_TO_COURSE:\n            $data = $restApi->subscribeUserToCourse($_POST);\n            $restResponse->setData($data);\n            break;\n        case Rest::SAVE_FORUM_POST:\n            if (\n                empty($_POST['title']) || empty($_POST['text']) || empty($_POST['thread']) || empty($_POST['forum'])\n            ) {\n                throw new Exception(get_lang('NoData'));\n            }\n\n            $forumId = isset($_POST['forum']) ? intval($_POST['forum']) : 0;\n            $notify = !empty($_POST['notify']);\n            $parentId = !empty($_POST['parent']) ? intval($_POST['parent']) : null;\n\n            $postValues = [\n                'post_title' => $_POST['title'],\n                'post_text' => nl2br($_POST['text']),\n                'thread_id' => $_POST['thread'],\n                'forum_id' => $_POST['forum'],\n                'post_notification' => $notify,\n                'post_parent_id' => $parentId,\n            ];\n\n            $data = $restApi->saveForumPost($postValues, $forumId);\n            $restResponse->setData($data);\n            break;\n        case Rest::GET_USER_SESSIONS:\n            $courses = $restApi->getUserSessions();\n            $restResponse->setData($courses);\n            break;\n        case Rest::SAVE_USER_MESSAGE:\n            $receivers = isset($_POST['receivers']) ? $_POST['receivers'] : [];\n            $subject = !empty($_POST['subject']) ? $_POST['subject'] : null;\n            $text = !empty($_POST['text']) ? $_POST['text'] : null;\n            $data = $restApi->saveUserMessage($subject, $text, $receivers);\n            $restResponse->setData($data);\n            break;\n        case Rest::GET_MESSAGE_USERS:\n            $search = !empty($_REQUEST['q']) ? $_REQUEST['q'] : null;\n            if (!$search || strlen($search) < 2) {\n                throw new Exception(get_lang('TooShort'));\n            }\n\n            $data = $restApi->getMessageUsers($search);\n            $restResponse->setData($data);\n            break;\n        case Rest::SAVE_COURSE_NOTEBOOK:\n            $title = !empty($_POST['title']) ? $_POST['title'] : null;\n            $text = !empty($_POST['text']) ? $_POST['text'] : null;\n            $data = $restApi->saveCourseNotebook($title, $text);\n            $restResponse->setData($data);\n            break;\n        case Rest::SAVE_FORUM_THREAD:\n            if (\n                empty($_POST['title']) || empty($_POST['text']) || empty($_POST['forum'])\n            ) {\n                throw new Exception(get_lang('NoData'));\n            }\n\n            $forumId = isset($_POST['forum']) ? intval($_POST['forum']) : 0;\n            $notify = !empty($_POST['notify']);\n\n            $threadInfo = [\n                'post_title' => $_POST['title'],\n                'forum_id' => $_POST['forum'],\n                'post_text' => nl2br($_POST['text']),\n                'post_notification' => $notify,\n            ];\n\n            $data = $restApi->saveForumThread($threadInfo, $forumId);\n            $restResponse->setData($data);\n            break;\n        default:\n            throw new Exception(get_lang('InvalidAction'));\n    }\n} catch (Exception $exeption) {\n    $restResponse->setErrorMessage(\n        $exeption->getMessage()\n    );\n}\n\nheader('Content-Type: application/json');\nheader('Access-Control-Allow-Origin: *');\n\necho $restResponse->format();\n"], "fixing_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\Course;\nuse Chamilo\\CoreBundle\\Entity\\ExtraFieldValues;\nuse Chamilo\\CoreBundle\\Entity\\Session;\nuse Chamilo\\CourseBundle\\Entity\\CLpCategory;\nuse Chamilo\\CourseBundle\\Entity\\CNotebook;\nuse Chamilo\\CourseBundle\\Entity\\Repository\\CNotebookRepository;\nuse Chamilo\\UserBundle\\Entity\\User;\n\n/**\n * Class RestApi.\n */\nclass Rest extends WebService\n{\n    const SERVIVE_NAME = 'MsgREST';\n    const EXTRA_FIELD_GCM_REGISTRATION = 'gcm_registration_id';\n\n    const GET_AUTH = 'authenticate';\n    const GET_USER_MESSAGES = 'user_messages';\n    const SAVE_GCM_ID = 'gcm_id';\n    const GET_USER_COURSES = 'user_courses';\n    const GET_PROFILE = 'user_profile';\n    const GET_COURSE_INFO = 'course_info';\n    const GET_COURSE_DESCRIPTIONS = 'course_descriptions';\n    const GET_COURSE_DOCUMENTS = 'course_documents';\n    const GET_COURSE_ANNOUNCEMENTS = 'course_announcements';\n    const GET_COURSE_ANNOUNCEMENT = 'course_announcement';\n    const GET_COURSE_AGENDA = 'course_agenda';\n    const GET_COURSE_NOTEBOOKS = 'course_notebooks';\n    const GET_COURSE_FORUM_CATEGORIES = 'course_forumcategories';\n    const GET_COURSE_FORUM = 'course_forum';\n    const GET_COURSE_FORUM_THREAD = 'course_forumthread';\n    const GET_COURSE_LEARNPATHS = 'course_learnpaths';\n    const GET_COURSE_LEARNPATH = 'course_learnpath';\n    const SAVE_FORUM_POST = 'save_forum_post';\n    const GET_USER_SESSIONS = 'user_sessions';\n    const SAVE_USER_MESSAGE = 'save_user_message';\n    const GET_MESSAGE_USERS = 'message_users';\n    const SAVE_COURSE_NOTEBOOK = 'save_course_notebook';\n    const SAVE_FORUM_THREAD = 'save_forum_thread';\n    const SAVE_COURSE = 'save_course';\n    const SAVE_USER = 'save_user';\n    const SUBSCRIBE_USER_TO_COURSE = 'subscribe_user_to_course';\n    const EXTRAFIELD_GCM_ID = 'gcm_registration_id';\n\n    /**\n     * @var Session\n     */\n    private $session;\n    /**\n     * @var Course\n     */\n    private $course;\n\n    /**\n     * Rest constructor.\n     *\n     * @param string $username\n     * @param string $apiKey\n     */\n    public function __construct($username, $apiKey)\n    {\n        parent::__construct($username, $apiKey);\n    }\n\n    /**\n     * Set the current course.\n     *\n     * @param int $id\n     *\n     * @throws Exception\n     */\n    public function setCourse($id)\n    {\n        if (!$id) {\n            $this->course = null;\n\n            return;\n        }\n\n        $em = Database::getManager();\n        /** @var Course $course */\n        $course = $em->find('ChamiloCoreBundle:Course', $id);\n\n        if (!$course) {\n            throw new Exception(get_lang('NoCourse'));\n        }\n\n        $this->course = $course;\n    }\n\n    /** Set the current session\n     * @param int $id\n     *\n     * @throws Exception\n     */\n    public function setSession($id)\n    {\n        if (!$id) {\n            $this->session = null;\n\n            return;\n        }\n\n        $em = Database::getManager();\n        /** @var Session $session */\n        $session = $em->find('ChamiloCoreBundle:Session', $id);\n\n        if (!$session) {\n            throw new Exception(get_lang('NoSession'));\n        }\n\n        $this->session = $session;\n    }\n\n    /**\n     * @param string $username\n     * @param string $apiKeyToValidate\n     *\n     * @throws Exception\n     *\n     * @return Rest\n     */\n    public static function validate($username, $apiKeyToValidate)\n    {\n        $apiKey = self::findUserApiKey($username, self::SERVIVE_NAME);\n\n        if ($apiKey != $apiKeyToValidate) {\n            throw new Exception(get_lang('InvalidApiKey'));\n        }\n\n        return new self($username, $apiKey);\n    }\n\n    /**\n     * Create the gcm_registration_id extra field for users.\n     */\n    public static function init()\n    {\n        $extraField = new ExtraField('user');\n        $fieldInfo = $extraField->get_handler_field_info_by_field_variable(self::EXTRA_FIELD_GCM_REGISTRATION);\n\n        if (empty($fieldInfo)) {\n            $extraField->save([\n                'variable' => self::EXTRA_FIELD_GCM_REGISTRATION,\n                'field_type' => ExtraField::FIELD_TYPE_TEXT,\n                'display_text' => self::EXTRA_FIELD_GCM_REGISTRATION,\n            ]);\n        }\n    }\n\n    /**\n     * @param string $registrationId\n     *\n     * @return bool\n     */\n    public function setGcmId($registrationId)\n    {\n        $registrationId = Security::remove_XSS($registrationId);\n        $extraFieldValue = new ExtraFieldValue('user');\n\n        return $extraFieldValue->save([\n            'variable' => self::EXTRA_FIELD_GCM_REGISTRATION,\n            'value' => $registrationId,\n            'item_id' => $this->user->getId(),\n        ]);\n    }\n\n    /**\n     * @param int $lastMessageId\n     *\n     * @return array\n     */\n    public function getUserMessages($lastMessageId = 0)\n    {\n        $lastMessages = MessageManager::getMessagesFromLastReceivedMessage($this->user->getId(), $lastMessageId);\n        $messages = [];\n\n        foreach ($lastMessages as $message) {\n            $hasAttachments = MessageManager::hasAttachments($message['id']);\n\n            $messages[] = [\n                'id' => $message['id'],\n                'title' => $message['title'],\n                'sender' => [\n                    'id' => $message['user_id'],\n                    'lastname' => $message['lastname'],\n                    'firstname' => $message['firstname'],\n                    'completeName' => api_get_person_name($message['firstname'], $message['lastname']),\n                ],\n                'sendDate' => $message['send_date'],\n                'content' => $message['content'],\n                'hasAttachments' => $hasAttachments,\n                'url' => '',\n            ];\n        }\n\n        return $messages;\n    }\n\n    /**\n     * Get the user courses.\n     *\n     * @return array\n     */\n    public function getUserCourses()\n    {\n        $courses = CourseManager::get_courses_list_by_user_id($this->user->getId());\n        $data = [];\n\n        foreach ($courses as $courseId) {\n            /** @var Course $course */\n            $course = Database::getManager()->find('ChamiloCoreBundle:Course', $courseId['real_id']);\n            $teachers = CourseManager::getTeacherListFromCourseCodeToString($course->getCode());\n\n            $data[] = [\n                'id' => $course->getId(),\n                'title' => $course->getTitle(),\n                'code' => $course->getCode(),\n                'directory' => $course->getDirectory(),\n                'urlPicture' => $course->getPicturePath(true),\n                'teachers' => $teachers,\n            ];\n        }\n\n        return $data;\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseInfo()\n    {\n        $teachers = CourseManager::getTeacherListFromCourseCodeToString($this->course->getCode());\n        $tools = CourseHome::get_tools_category(\n            TOOL_STUDENT_VIEW,\n            $this->course->getId(),\n            $this->session ? $this->session->getId() : 0\n        );\n\n        return [\n            'id' => $this->course->getId(),\n            'title' => $this->course->getTitle(),\n            'code' => $this->course->getCode(),\n            'directory' => $this->course->getDirectory(),\n            'urlPicture' => $this->course->getPicturePath(true),\n            'teachers' => $teachers,\n            'tools' => array_map(\n                function ($tool) {\n                    return ['type' => $tool['name']];\n                },\n                $tools\n            ),\n        ];\n    }\n\n    /**\n     * Get the course descriptions.\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseDescriptions()\n    {\n        $descriptions = CourseDescription::get_descriptions($this->course->getId());\n        $results = [];\n\n        /** @var CourseDescription $description */\n        foreach ($descriptions as $description) {\n            $results[] = [\n                'id' => $description->get_description_type(),\n                'title' => $description->get_title(),\n                'content' => str_replace('src=\"/', 'src=\"'.api_get_path(WEB_PATH), $description->get_content()),\n            ];\n        }\n\n        return $results;\n    }\n\n    /**\n     * @param int $directoryId\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseDocuments($directoryId = 0)\n    {\n        /** @var string $path */\n        $path = '/';\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        if ($directoryId) {\n            $directory = DocumentManager::get_document_data_by_id(\n                $directoryId,\n                $this->course->getCode(),\n                false,\n                $sessionId\n            );\n\n            if (!$directory) {\n                throw new Exception('NoDataAvailable');\n            }\n\n            $path = $directory['path'];\n        }\n\n        $courseInfo = api_get_course_info_by_id($this->course->getId());\n        $documents = DocumentManager::getAllDocumentData(\n            $courseInfo,\n            $path,\n            0,\n            null,\n            false,\n            false,\n            $sessionId\n        );\n        $results = [];\n\n        if (!empty($documents)) {\n            $webPath = api_get_path(WEB_CODE_PATH).'document/document.php?';\n\n            /** @var array $document */\n            foreach ($documents as $document) {\n                if ($document['visibility'] != '1') {\n                    continue;\n                }\n\n                $icon = $document['filetype'] == 'file'\n                    ? choose_image($document['path'])\n                    : chooseFolderIcon($document['path']);\n\n                $results[] = [\n                    'id' => $document['id'],\n                    'type' => $document['filetype'],\n                    'title' => $document['title'],\n                    'path' => $document['path'],\n                    'url' => $webPath.http_build_query([\n                        'username' => $this->user->getUsername(),\n                        'api_key' => $this->apiKey,\n                        'cidReq' => $this->course->getCode(),\n                        'id_session' => $sessionId,\n                        'gidReq' => 0,\n                        'gradebook' => 0,\n                        'origin' => '',\n                        'action' => 'download',\n                        'id' => $document['id'],\n                    ]),\n                    'icon' => $icon,\n                    'size' => format_file_size($document['size']),\n                ];\n            }\n        }\n\n        return $results;\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseAnnouncements()\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        $announcements = AnnouncementManager::getAnnouncements(\n            null,\n            null,\n            false,\n            null,\n            null,\n            null,\n            null,\n            null,\n            0,\n            $this->user->getId(),\n            $this->course->getId(),\n            $sessionId\n        );\n\n        $announcements = array_map(\n            function ($announcement) {\n                return [\n                    'id' => intval($announcement['id']),\n                    'title' => strip_tags($announcement['title']),\n                    'creatorName' => strip_tags($announcement['username']),\n                    'date' => strip_tags($announcement['insert_date']),\n                ];\n            },\n            $announcements\n        );\n\n        return $announcements;\n    }\n\n    /**\n     * @param int $announcementId\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseAnnouncement($announcementId)\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $announcement = AnnouncementManager::getAnnouncementInfoById(\n            $announcementId,\n            $this->course->getId(),\n            $this->user->getId()\n        );\n\n        if (!$announcement) {\n            throw new Exception(get_lang('NoAnnouncement'));\n        }\n\n        return [\n            'id' => intval($announcement['announcement']->getIid()),\n            'title' => $announcement['announcement']->getTitle(),\n            'creatorName' => $announcement['item_property']->getInsertUser()->getCompleteName(),\n            'date' => api_convert_and_format_date(\n                $announcement['item_property']->getInsertDate(),\n                DATE_TIME_FORMAT_LONG_24H\n            ),\n            'content' => AnnouncementManager::parseContent(\n                $this->user->getId(),\n                $announcement['announcement']->getContent(),\n                $this->course->getCode(),\n                $sessionId\n            ),\n        ];\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseAgenda()\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        $agenda = new Agenda(\n            'course',\n            $this->user->getId(),\n            $this->course->getId(),\n            $sessionId\n        );\n        $result = $agenda->parseAgendaFilter(null);\n\n        $start = new DateTime(api_get_utc_datetime(), new DateTimeZone('UTC'));\n        $start->modify('first day of this month');\n        $start->setTime(0, 0, 0);\n        $end = new DateTime(api_get_utc_datetime(), new DateTimeZone('UTC'));\n        $end->modify('last day of this month');\n        $end->setTime(23, 59, 59);\n\n        $groupId = current($result['groups']);\n        $userId = current($result['users']);\n\n        $events = $agenda->getEvents(\n            $start->getTimestamp(),\n            $end->getTimestamp(),\n            $this->course->getId(),\n            $groupId,\n            $userId,\n            'array'\n        );\n\n        if (!is_array($events)) {\n            return [];\n        }\n\n        $webPath = api_get_path(WEB_PATH);\n\n        return array_map(\n            function ($event) use ($webPath) {\n                return [\n                    'id' => intval($event['unique_id']),\n                    'title' => $event['title'],\n                    'content' => str_replace('src=\"/', 'src=\"'.$webPath, $event['description']),\n                    'startDate' => $event['start_date_localtime'],\n                    'endDate' => $event['end_date_localtime'],\n                    'isAllDay' => $event['allDay'] ? true : false,\n                ];\n            },\n            $events\n        );\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseNotebooks()\n    {\n        $em = Database::getManager();\n        /** @var CNotebookRepository $notebooksRepo */\n        $notebooksRepo = $em->getRepository('ChamiloCourseBundle:CNotebook');\n        $notebooks = $notebooksRepo->findByUser($this->user, $this->course, $this->session);\n\n        return array_map(\n            function (CNotebook $notebook) {\n                return [\n                    'id' => $notebook->getIid(),\n                    'title' => $notebook->getTitle(),\n                    'description' => $notebook->getDescription(),\n                    'creationDate' => api_format_date(\n                        $notebook->getCreationDate()->getTimestamp()\n                    ),\n                    'updateDate' => api_format_date(\n                        $notebook->getUpdateDate()->getTimestamp()\n                    ),\n                ];\n            },\n            $notebooks\n        );\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseForumCategories()\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $webCoursePath = api_get_path(WEB_COURSE_PATH).$this->course->getDirectory().'/upload/forum/images/';\n\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $categoriesFullData = get_forum_categories('', $this->course->getId(), $sessionId);\n        $categories = [];\n        $includeGroupsForums = api_get_setting('display_groups_forum_in_general_tool') === 'true';\n        $forumsFullData = get_forums('', $this->course->getCode(), $includeGroupsForums, $sessionId);\n        $forums = [];\n\n        foreach ($forumsFullData as $forumId => $forumInfo) {\n            $forum = [\n                'id' => intval($forumInfo['iid']),\n                'catId' => intval($forumInfo['forum_category']),\n                'title' => $forumInfo['forum_title'],\n                'description' => $forumInfo['forum_comment'],\n                'image' => $forumInfo['forum_image'] ? ($webCoursePath.$forumInfo['forum_image']) : '',\n                'numberOfThreads' => isset($forumInfo['number_of_threads']) ? intval($forumInfo['number_of_threads']) : 0,\n                'lastPost' => null,\n            ];\n\n            $lastPostInfo = get_last_post_information($forumId, false, $this->course->getId(), $sessionId);\n\n            if ($lastPostInfo) {\n                $forum['lastPost'] = [\n                    'date' => api_convert_and_format_date($lastPostInfo['last_post_date']),\n                    'user' => api_get_person_name(\n                        $lastPostInfo['last_poster_firstname'],\n                        $lastPostInfo['last_poster_lastname']\n                    ),\n                ];\n            }\n\n            $forums[] = $forum;\n        }\n\n        foreach ($categoriesFullData as $category) {\n            $categoryForums = array_filter(\n                $forums,\n                function (array $forum) use ($category) {\n                    if ($forum['catId'] != $category['cat_id']) {\n                        return false;\n                    }\n\n                    return true;\n                }\n            );\n\n            $categories[] = [\n                'id' => intval($category['iid']),\n                'title' => $category['cat_title'],\n                'catId' => intval($category['cat_id']),\n                'description' => $category['cat_comment'],\n                'forums' => $categoryForums,\n                'courseId' => $this->course->getId(),\n            ];\n        }\n\n        return $categories;\n    }\n\n    /**\n     * @param int $forumId\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseForum($forumId)\n    {\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $forumInfo = get_forums($forumId, $this->course->getCode(), true, $sessionId);\n\n        if (!isset($forumInfo['iid'])) {\n            throw new Exception(get_lang('NoForum'));\n        }\n\n        $webCoursePath = api_get_path(WEB_COURSE_PATH).$this->course->getDirectory().'/upload/forum/images/';\n        $forum = [\n            'id' => $forumInfo['iid'],\n            'title' => $forumInfo['forum_title'],\n            'description' => $forumInfo['forum_comment'],\n            'image' => $forumInfo['forum_image'] ? ($webCoursePath.$forumInfo['forum_image']) : '',\n            'threads' => [],\n        ];\n\n        $threads = get_threads($forumInfo['iid'], $this->course->getId(), $sessionId);\n\n        foreach ($threads as $thread) {\n            $forum['threads'][] = [\n                'id' => $thread['iid'],\n                'title' => $thread['thread_title'],\n                'lastEditDate' => api_convert_and_format_date($thread['lastedit_date'], DATE_TIME_FORMAT_LONG_24H),\n                'numberOfReplies' => $thread['thread_replies'],\n                'numberOfViews' => $thread['thread_views'],\n                'author' => api_get_person_name($thread['firstname'], $thread['lastname']),\n            ];\n        }\n\n        return $forum;\n    }\n\n    /**\n     * @param int $forumId\n     * @param int $threadId\n     *\n     * @return array\n     */\n    public function getCourseForumThread($forumId, $threadId)\n    {\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $threadInfo = get_thread_information($forumId, $threadId, $sessionId);\n\n        $thread = [\n            'id' => intval($threadInfo['iid']),\n            'cId' => intval($threadInfo['c_id']),\n            'title' => $threadInfo['thread_title'],\n            'forumId' => intval($threadInfo['forum_id']),\n            'posts' => [],\n        ];\n\n        $forumInfo = get_forums($threadInfo['forum_id'], $this->course->getCode(), true, $sessionId);\n        $postsInfo = getPosts($forumInfo, $threadInfo['iid'], 'ASC');\n\n        foreach ($postsInfo as $postInfo) {\n            $thread['posts'][] = [\n                'id' => $postInfo['iid'],\n                'title' => $postInfo['post_title'],\n                'text' => $postInfo['post_text'],\n                'author' => api_get_person_name($postInfo['firstname'], $postInfo['lastname']),\n                'date' => api_convert_and_format_date($postInfo['post_date'], DATE_TIME_FORMAT_LONG_24H),\n                'parentId' => $postInfo['post_parent_id'],\n            ];\n        }\n\n        return $thread;\n    }\n\n    /**\n     * @return array\n     */\n    public function getUserProfile()\n    {\n        $pictureInfo = UserManager::get_user_picture_path_by_id($this->user->getId(), 'web');\n\n        $result = [\n            'pictureUri' => $pictureInfo['dir'].$pictureInfo['file'],\n            'fullName' => $this->user->getCompleteName(),\n            'username' => $this->user->getUsername(),\n            'officialCode' => $this->user->getOfficialCode(),\n            'phone' => $this->user->getPhone(),\n            'extra' => [],\n        ];\n\n        $fieldValue = new ExtraFieldValue('user');\n        $extraInfo = $fieldValue->getAllValuesForAnItem($this->user->getId(), true);\n\n        foreach ($extraInfo as $extra) {\n            /** @var ExtraFieldValues $extraValue */\n            $extraValue = $extra['value'];\n\n            $result['extra'][] = [\n                'title' => $extraValue->getField()->getDisplayText(true),\n                'value' => $extraValue->getValue(),\n            ];\n        }\n\n        return $result;\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function getCourseLearnPaths()\n    {\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $categoriesTempList = learnpath::getCategories($this->course->getId());\n\n        $categoryNone = new CLpCategory();\n        $categoryNone->setId(0);\n        $categoryNone->setName(get_lang('WithOutCategory'));\n        $categoryNone->setPosition(0);\n\n        $categories = array_merge([$categoryNone], $categoriesTempList);\n        $categoryData = [];\n\n        /** @var CLpCategory $category */\n        foreach ($categories as $category) {\n            $learnPathList = new LearnpathList(\n                $this->user->getId(),\n                $this->course->getCode(),\n                $sessionId,\n                null,\n                false,\n                $category->getId()\n            );\n\n            $flatLpList = $learnPathList->get_flat_list();\n\n            if (empty($flatLpList)) {\n                continue;\n            }\n\n            $listData = [];\n\n            foreach ($flatLpList as $lpId => $lpDetails) {\n                if ($lpDetails['lp_visibility'] == 0) {\n                    continue;\n                }\n\n                if (!learnpath::is_lp_visible_for_student(\n                    $lpId,\n                    $this->user->getId(),\n                    $this->course->getCode(),\n                    $sessionId\n                )) {\n                    continue;\n                }\n\n                $timeLimits = false;\n\n                // This is an old LP (from a migration 1.8.7) so we do nothing\n                if (empty($lpDetails['created_on']) && empty($lpDetails['modified_on'])) {\n                    $timeLimits = false;\n                }\n\n                // Checking if expired_on is ON\n                if (!empty($lpDetails['expired_on'])) {\n                    $timeLimits = true;\n                }\n\n                if ($timeLimits) {\n                    if (!empty($lpDetails['publicated_on']) && !empty($lpDetails['expired_on'])) {\n                        $startTime = api_strtotime($lpDetails['publicated_on'], 'UTC');\n                        $endTime = api_strtotime($lpDetails['expired_on'], 'UTC');\n                        $now = time();\n                        $isActivedTime = false;\n\n                        if ($now > $startTime && $endTime > $now) {\n                            $isActivedTime = true;\n                        }\n\n                        if (!$isActivedTime) {\n                            continue;\n                        }\n                    }\n                }\n\n                $progress = learnpath::getProgress($lpId, $this->user->getId(), $this->course->getId(), $sessionId);\n\n                $listData[] = [\n                    'id' => $lpId,\n                    'title' => Security::remove_XSS($lpDetails['lp_name']),\n                    'progress' => intval($progress),\n                    'url' => api_get_path(WEB_CODE_PATH).'webservices/api/v2.php?'.http_build_query([\n                        'hash' => $this->encodeParams([\n                            'action' => 'course_learnpath',\n                            'lp_id' => $lpId,\n                            'course' => $this->course->getId(),\n                            'session' => $sessionId,\n                        ]),\n                    ]),\n                ];\n            }\n\n            if (empty($listData)) {\n                continue;\n            }\n\n            $categoryData[] = [\n                'id' => $category->getId(),\n                'name' => $category->getName(),\n                'learnpaths' => $listData,\n            ];\n        }\n\n        return $categoryData;\n    }\n\n    /**\n     * @param string $encoded\n     *\n     * @return array\n     */\n    public static function decodeParams($encoded)\n    {\n        $decoded = json_decode($encoded);\n\n        return $decoded;\n    }\n\n    /**\n     * Start login for a user. Then make a redirect to show the learnpath.\n     *\n     * @param int $lpId\n     */\n    public function showLearningPath($lpId)\n    {\n        $loggedUser['user_id'] = $this->user->getId();\n        $loggedUser['status'] = $this->user->getStatus();\n        $loggedUser['uidReset'] = true;\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        ChamiloSession::write('_user', $loggedUser);\n        Login::init_user($this->user->getId(), true);\n\n        $url = api_get_path(WEB_CODE_PATH).'lp/lp_controller.php?'.http_build_query([\n            'cidReq' => $this->course->getCode(),\n            'id_session' => $sessionId,\n            'gidReq' => 0,\n            'gradebook' => 0,\n            'origin' => '',\n            'action' => 'view',\n            'lp_id' => intval($lpId),\n            'isStudentView' => 'true',\n        ]);\n\n        header(\"Location: $url\");\n        exit;\n    }\n\n    /**\n     * @param array $postValues\n     * @param int   $forumId\n     *\n     * @return array\n     */\n    public function saveForumPost(array $postValues, $forumId)\n    {\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $forum = get_forums($forumId, $this->course->getCode());\n        store_reply($forum, $postValues, $this->course->getId(), $this->user->getId());\n\n        return [\n            'registered' => true,\n        ];\n    }\n\n    /**\n     * Get the list of sessions for current user.\n     *\n     * @return array the sessions list\n     */\n    public function getUserSessions()\n    {\n        $data = [];\n        $sessionsByCategory = UserManager::get_sessions_by_category($this->user->getId(), false);\n\n        foreach ($sessionsByCategory as $category) {\n            $categorySessions = [];\n\n            foreach ($category['sessions'] as $sessions) {\n                $sessionCourses = [];\n\n                foreach ($sessions['courses'] as $course) {\n                    $courseInfo = api_get_course_info_by_id($course['real_id']);\n                    $teachers = SessionManager::getCoachesByCourseSessionToString(\n                        $sessions['session_id'],\n                        $course['real_id']\n                    );\n\n                    $sessionCourses[] = [\n                        'id' => $courseInfo['real_id'],\n                        'title' => $courseInfo['title'],\n                        'code' => $courseInfo['code'],\n                        'directory' => $courseInfo['directory'],\n                        'pictureUrl' => $courseInfo['course_image_large'],\n                        'teachers' => $teachers,\n                    ];\n                }\n\n                $sessionBox = Display::getSessionTitleBox($sessions['session_id']);\n\n                $categorySessions[] = [\n                    'name' => $sessionBox['title'],\n                    'id' => $sessions['session_id'],\n                    'date' => $sessionBox['dates'],\n                    'duration' => isset($sessionBox['duration']) ? $sessionBox['duration'] : null,\n                    'courses' => $sessionCourses,\n                ];\n            }\n\n            $data[] = [\n                'id' => $category['session_category']['id'],\n                'name' => $category['session_category']['name'],\n                'sessions' => $categorySessions,\n            ];\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param string $subject\n     * @param string $text\n     * @param array  $receivers\n     *\n     * @return array\n     */\n    public function saveUserMessage($subject, $text, array $receivers)\n    {\n        foreach ($receivers as $userId) {\n            MessageManager::send_message($userId, $subject, $text);\n        }\n\n        return [\n            'sent' => true,\n        ];\n    }\n\n    /**\n     * @param string $search\n     *\n     * @return array\n     */\n    public function getMessageUsers($search)\n    {\n        /** @var UserRepository $repo */\n        $repo = Database::getManager()->getRepository('ChamiloUserBundle:User');\n\n        $users = $repo->findUsersToSendMessage($this->user->getId(), $search);\n\n        $showEmail = api_get_setting('show_email_addresses') === 'true';\n        $data = [];\n\n        /** @var User $user */\n        foreach ($users as $user) {\n            $userName = $user->getCompleteName();\n\n            if ($showEmail) {\n                $userName .= \" ({$user->getEmail()})\";\n            }\n\n            $data[] = [\n                'id' => $user->getId(),\n                'name' => $userName,\n            ];\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param string $title\n     * @param string $text\n     *\n     * @return array\n     */\n    public function saveCourseNotebook($title, $text)\n    {\n        $values = ['note_title' => $title, 'note_comment' => $text];\n        $sessionId = $this->session ? $this->session->getId() : 0;\n\n        $noteBookId = NotebookManager::save_note(\n            $values,\n            $this->user->getId(),\n            $this->course->getId(),\n            $sessionId\n        );\n\n        return [\n            'registered' => $noteBookId,\n        ];\n    }\n\n    /**\n     * @param array $values\n     * @param int   $forumId\n     *\n     * @return array\n     */\n    public function saveForumThread(array $values, $forumId)\n    {\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $sessionId = $this->session ? $this->session->getId() : 0;\n        $forum = get_forums($forumId, $this->course->getCode(), true, $sessionId);\n        $courseInfo = api_get_course_info($this->course->getCode());\n        $id = store_thread($forum, $values, $courseInfo, false, $this->user->getId(), $sessionId);\n\n        return [\n            'registered' => $id,\n        ];\n    }\n\n    /**\n     * @param array $courseParam\n     *\n     * @return array\n     */\n    public function addCourse(array $courseParam)\n    {\n        $tableCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n        $extraList = [];\n        $results = [];\n\n        $title = isset($courseParam['title']) ? $courseParam['title'] : '';\n        $categoryCode = isset($courseParam['category_code']) ? $courseParam['category_code'] : '';\n        $wantedCode = isset($courseParam['wanted_code']) ? intval($courseParam['wanted_code']) : 0;\n        $tutorName = isset($courseParam['tutor_name']) ? $courseParam['tutor_name'] : '';\n        $courseLanguage = isset($courseParam['language']) ? $courseParam['language'] : null;\n        $originalCourseIdName = isset($courseParam['original_course_id_name'])\n            ? $courseParam['original_course_id_name']\n            : null;\n        $originalCourseIdValue = isset($courseParam['original_course_id_value'])\n            ? $courseParam['original_course_id_value']\n            : null;\n        $diskQuota = isset($courseParam['disk_quota']) ? $courseParam['disk_quota'] : '100';\n        $visibility = isset($courseParam['visibility']) ? (int) $courseParam['visibility'] : null;\n\n        if (isset($courseParam['visibility'])) {\n            if ($courseParam['visibility'] &&\n                $courseParam['visibility'] >= 0 &&\n                $courseParam['visibility'] <= 3\n            ) {\n                $visibility = (int) $courseParam['visibility'];\n            }\n        }\n\n        // Check whether exits $x_course_code into user_field_values table.\n        $courseInfo = CourseManager::getCourseInfoFromOriginalId(\n            $originalCourseIdValue,\n            $originalCourseIdName\n        );\n\n        if (!empty($courseInfo)) {\n            if ($courseInfo['visibility'] != 0) {\n                $sql = \"UPDATE $tableCourse SET\n                            course_language = '\".Database::escape_string($courseLanguage).\"',\n                            title = '\".Database::escape_string($title).\"',\n                            category_code = '\".Database::escape_string($categoryCode).\"',\n                            tutor_name = '\".Database::escape_string($tutorName).\"',\n                            visual_code = '\".Database::escape_string($wantedCode).\"'\";\n                if ($visibility !== null) {\n                    $sql .= \", visibility = $visibility \";\n                }\n                $sql .= \" WHERE id = \".$courseInfo['real_id'];\n                Database::query($sql);\n                if (is_array($extraList) && count($extraList) > 0) {\n                    foreach ($extraList as $extra) {\n                        $extraFieldName = $extra['field_name'];\n                        $extraFieldValue = $extra['field_value'];\n                        // Save the external system's id into course_field_value table.\n                        CourseManager::update_course_extra_field_value(\n                            $courseInfo['code'],\n                            $extraFieldName,\n                            $extraFieldValue\n                        );\n                    }\n                }\n                $results[] = $courseInfo['code'];\n            }\n        }\n\n        $params = [];\n        $params['title'] = $title;\n        $params['wanted_code'] = $wantedCode;\n        $params['category_code'] = $categoryCode;\n        $params['course_category'] = $categoryCode;\n        $params['tutor_name'] = $tutorName;\n        $params['course_language'] = $courseLanguage;\n        $params['user_id'] = $this->user->getId();\n        $params['visibility'] = $visibility;\n        $params['disk_quota'] = $diskQuota;\n        $params['subscribe'] = empty($courseParam['subscribe']) ? 0 : 1;\n        $params['unsubscribe'] = empty($courseParam['unsubscribe']) ? 0 : 1;\n\n        $courseInfo = CourseManager::create_course($params, $params['user_id']);\n\n        if (!empty($courseInfo)) {\n            $courseCode = $courseInfo['code'];\n\n            // Save new field label into course_field table\n            CourseManager::create_course_extra_field(\n                $originalCourseIdName,\n                1,\n                $originalCourseIdName,\n                ''\n            );\n\n            // Save the external system's id into user_field_value table.\n            CourseManager::update_course_extra_field_value(\n                $courseCode,\n                $originalCourseIdName,\n                $originalCourseIdValue\n            );\n\n            if (is_array($extraList) && count($extraList) > 0) {\n                foreach ($extraList as $extra) {\n                    $extraFieldName = $extra['field_name'];\n                    $extraFieldValue = $extra['field_value'];\n                    // Save new fieldlabel into course_field table.\n                    CourseManager::create_course_extra_field(\n                        $extraFieldName,\n                        1,\n                        $extraFieldName,\n                        ''\n                    );\n                    // Save the external system's id into course_field_value table.\n                    CourseManager::update_course_extra_field_value(\n                        $courseCode,\n                        $extraFieldName,\n                        $extraFieldValue\n                    );\n                }\n            }\n            $results[] = $courseCode;\n        }\n\n        return $results;\n    }\n\n    /**\n     * @param $user_param\n     *\n     * @return array\n     */\n    public function addUser($user_param)\n    {\n        $results = [];\n        $orig_user_id_value = [];\n        $userManager = UserManager::getManager();\n        $userRepository = UserManager::getRepository();\n\n        $firstName = $user_param['firstname'];\n        $lastName = $user_param['lastname'];\n        $status = $user_param['status'];\n        $email = $user_param['email'];\n        $loginName = $user_param['loginname'];\n        $password = $user_param['password'];\n        $official_code = '';\n        $language = '';\n        $phone = '';\n        $picture_uri = '';\n        $auth_source = PLATFORM_AUTH_SOURCE;\n        $expiration_date = '';\n        $active = 1;\n        $hr_dept_id = 0;\n        $extra = null;\n        $original_user_id_name = $user_param['original_user_id_name'];\n        $original_user_id_value = $user_param['original_user_id_value'];\n        $orig_user_id_value[] = $user_param['original_user_id_value'];\n        $extra_list = $user_param['extra'];\n        if (!empty($user_param['language'])) {\n            $language = $user_param['language'];\n        }\n        if (!empty($user_param['phone'])) {\n            $phone = $user_param['phone'];\n        }\n        if (!empty($user_param['expiration_date'])) {\n            $expiration_date = $user_param['expiration_date'];\n        }\n\n        // Default language.\n        if (empty($language)) {\n            $language = api_get_setting('platformLanguage');\n        }\n\n        // First check wether the login already exists.\n        if (!UserManager::is_username_available($loginName)) {\n            $results[] = 0;\n        }\n\n        $userId = UserManager::create_user(\n            $firstName,\n            $lastName,\n            $status,\n            $email,\n            $loginName,\n            $password,\n            $official_code,\n            $language,\n            $phone,\n            $picture_uri,\n            $auth_source,\n            $expiration_date,\n            $active,\n            $hr_dept_id\n        );\n\n        if ($userId) {\n            if (api_is_multiple_url_enabled()) {\n                if (api_get_current_access_url_id() != -1) {\n                    UrlManager::add_user_to_url(\n                        $userId,\n                        api_get_current_access_url_id()\n                    );\n                } else {\n                    UrlManager::add_user_to_url($userId, 1);\n                }\n            } else {\n                // We add by default the access_url_user table with access_url_id = 1\n                UrlManager::add_user_to_url($userId, 1);\n            }\n\n            // Save new field label into user_field table.\n            UserManager::create_extra_field(\n                $original_user_id_name,\n                1,\n                $original_user_id_name,\n                ''\n            );\n            // Save the external system's id into user_field_value table.\n            UserManager::update_extra_field_value(\n                $userId,\n                $original_user_id_name,\n                $original_user_id_value\n            );\n\n            if (is_array($extra_list) && count($extra_list) > 0) {\n                foreach ($extra_list as $extra) {\n                    $extra_field_name = $extra['field_name'];\n                    $extra_field_value = $extra['field_value'];\n                    // Save new field label into user_field table.\n                    UserManager::create_extra_field(\n                        $extra_field_name,\n                        1,\n                        $extra_field_name,\n                        ''\n                    );\n                    // Save the external system's id into user_field_value table.\n                    UserManager::update_extra_field_value(\n                        $userId,\n                        $extra_field_name,\n                        $extra_field_value\n                    );\n                }\n            }\n            $results[] = $userId;\n        } else {\n            $results[] = 0;\n        }\n\n        return $results;\n    }\n\n    /**\n     * Subscribe User to Course.\n     *\n     * @param array $params\n     *\n     * @return array\n     */\n    public function subscribeUserToCourse($params)\n    {\n        $course_id = $params['course_id'];\n        $course_code = $params['course_code'];\n        $user_id = $params['user_id'];\n        if (!$course_id && !$course_code) {\n            return [false];\n        }\n        if (!$course_code) {\n            $course_code = CourseManager::get_course_code_from_course_id($course_id);\n        }\n        if (CourseManager::subscribe_user($user_id, $course_code)) {\n            return [true];\n        } else {\n            return [false];\n        }\n\n        return [true];\n    }\n\n    /**\n     * @param array $additionalParams Optional\n     *\n     * @return string\n     */\n    private function encodeParams(array $additionalParams = [])\n    {\n        $params = array_merge($additionalParams, [\n            'api_key' => $this->apiKey,\n            'username' => $this->user->getUsername(),\n        ]);\n        $encoded = json_encode($params);\n\n        return $encoded;\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\nrequire_once __DIR__.'/../../inc/global.inc.php';\n\n$hash = isset($_REQUEST['hash']) ? $_REQUEST['hash'] : null;\n\nif ($hash) {\n    $hashParams = Rest::decodeParams($hash);\n    if (!empty($hashParams)) {\n        foreach ($hashParams as $key => $value) {\n            $_REQUEST[$key] = Security::remove_XSS($value);\n        }\n    }\n}\n\n$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : null;\n$username = isset($_REQUEST['username']) ? Security::remove_XSS($_REQUEST['username']) : null;\n$apiKey = isset($_REQUEST['api_key']) ? Security::remove_XSS($_REQUEST['api_key']) : null;\n$course = !empty($_REQUEST['course']) ? intval($_REQUEST['course']) : null;\n$session = !empty($_REQUEST['session']) ? intval($_REQUEST['session']) : null;\n\n$restResponse = new RestResponse();\n\ntry {\n    /** @var Rest $restApi */\n    $restApi = $apiKey ? Rest::validate($username, $apiKey) : null;\n\n    if ($restApi) {\n        $restApi->setCourse($course);\n        $restApi->setSession($session);\n    }\n\n    switch ($action) {\n        case Rest::GET_AUTH:\n            Rest::init();\n\n            $password = isset($_POST['password']) ? $_POST['password'] : null;\n            $isValid = Rest::isValidUser($username, $password);\n            if (!$isValid) {\n                throw new Exception(get_lang('InvalideUserDetected'));\n            }\n\n            $restResponse->setData([\n                'url' => api_get_path(WEB_PATH),\n                'apiKey' => Rest::findUserApiKey($username, Rest::SERVIVE_NAME),\n                'gcmSenderId' => api_get_setting('messaging_gdc_project_number'),\n            ]);\n            break;\n\n        case Rest::SAVE_GCM_ID:\n            $gcmId = isset($_POST['registration_id']) ? Security::remove_XSS($_POST['registration_id']) : null;\n            $restApi->setGcmId($gcmId);\n            $restResponse->setData(['status' => true]);\n            break;\n\n        case Rest::GET_USER_MESSAGES:\n            $lastMessageId = isset($_POST['last']) ? intval($_POST['last']) : 0;\n            $messages = $restApi->getUserMessages($lastMessageId);\n            $restResponse->setData($messages);\n            break;\n        case Rest::GET_USER_COURSES:\n            $courses = $restApi->getUserCourses();\n            $restResponse->setData($courses);\n            break;\n        case Rest::GET_COURSE_INFO:\n            $courseInfo = $restApi->getCourseInfo();\n            $restResponse->setData($courseInfo);\n            break;\n        case Rest::GET_COURSE_DESCRIPTIONS:\n            $descriptions = $restApi->getCourseDescriptions();\n            $restResponse->setData($descriptions);\n            break;\n        case Rest::GET_COURSE_DOCUMENTS:\n            $directoryId = isset($_POST['dir_id']) ? Security::remove_XSS($_POST['dir_id']) : null;\n            $documents = $restApi->getCourseDocuments($directoryId);\n            $restResponse->setData($documents);\n            break;\n        case Rest::GET_COURSE_ANNOUNCEMENTS:\n            $announcements = $restApi->getCourseAnnouncements();\n            $restResponse->setData($announcements);\n            break;\n        case Rest::GET_COURSE_ANNOUNCEMENT:\n            $announcementId = isset($_POST['announcement']) ? Security::remove_XSS($_POST['announcement']) : 0;\n            $announcement = $restApi->getCourseAnnouncement($announcementId);\n            $restResponse->setData($announcement);\n            break;\n        case Rest::GET_COURSE_AGENDA:\n            $agenda = $restApi->getCourseAgenda();\n            $restResponse->setData($agenda);\n            break;\n        case Rest::GET_COURSE_NOTEBOOKS:\n            $notebooks = $restApi->getCourseNotebooks();\n            $restResponse->setData($notebooks);\n            break;\n        case Rest::GET_COURSE_FORUM_CATEGORIES:\n            $forums = $restApi->getCourseForumCategories();\n            $restResponse->setData($forums);\n            break;\n        case Rest::GET_COURSE_FORUM:\n            $forumId = isset($_POST['forum']) ? Security::remove_XSS($_POST['forum']) : 0;\n            $forum = $restApi->getCourseForum($forumId);\n            $restResponse->setData($forum);\n            break;\n        case Rest::GET_COURSE_FORUM_THREAD:\n            $forumId = isset($_POST['forum']) ? intval($_POST['forum']) : 0;\n            $threadId = isset($_POST['thread']) ? intval($_POST['thread']) : 0;\n            $thread = $restApi->getCourseForumThread($forumId, $threadId);\n            $restResponse->setData($thread);\n            break;\n        case Rest::GET_PROFILE:\n            $userInfo = $restApi->getUserProfile();\n            $restResponse->setData($userInfo);\n            break;\n        case Rest::GET_COURSE_LEARNPATHS:\n            $data = $restApi->getCourseLearnPaths();\n            $restResponse->setData($data);\n            break;\n        case Rest::GET_COURSE_LEARNPATH:\n            $lpId = isset($_REQUEST['lp_id']) ? intval($_REQUEST['lp_id']) : 1;\n            $restApi->showLearningPath($lpId);\n            break;\n        case Rest::SAVE_COURSE:\n            $data = $restApi->addCourse($_POST);\n            $restResponse->setData($data);\n            break;\n        case Rest::SAVE_USER:\n            $data = $restApi->addUser($_POST);\n            $restResponse->setData($data);\n            break;\n        case Rest::SUBSCRIBE_USER_TO_COURSE:\n            $data = $restApi->subscribeUserToCourse($_POST);\n            $restResponse->setData($data);\n            break;\n        case Rest::SAVE_FORUM_POST:\n            if (\n                empty($_POST['title']) || empty($_POST['text']) || empty($_POST['thread']) || empty($_POST['forum'])\n            ) {\n                throw new Exception(get_lang('NoData'));\n            }\n\n            $forumId = isset($_POST['forum']) ? intval($_POST['forum']) : 0;\n            $notify = !empty($_POST['notify']);\n            $parentId = !empty($_POST['parent']) ? intval($_POST['parent']) : null;\n\n            $postValues = [\n                'post_title' => $_POST['title'],\n                'post_text' => nl2br($_POST['text']),\n                'thread_id' => $_POST['thread'],\n                'forum_id' => $_POST['forum'],\n                'post_notification' => $notify,\n                'post_parent_id' => $parentId,\n            ];\n\n            $data = $restApi->saveForumPost($postValues, $forumId);\n            $restResponse->setData($data);\n            break;\n        case Rest::GET_USER_SESSIONS:\n            $courses = $restApi->getUserSessions();\n            $restResponse->setData($courses);\n            break;\n        case Rest::SAVE_USER_MESSAGE:\n            $receivers = isset($_POST['receivers']) ? $_POST['receivers'] : [];\n            $subject = !empty($_POST['subject']) ? $_POST['subject'] : null;\n            $text = !empty($_POST['text']) ? $_POST['text'] : null;\n            $data = $restApi->saveUserMessage($subject, $text, $receivers);\n            $restResponse->setData($data);\n            break;\n        case Rest::GET_MESSAGE_USERS:\n            $search = !empty($_REQUEST['q']) ? $_REQUEST['q'] : null;\n            if (!$search || strlen($search) < 2) {\n                throw new Exception(get_lang('TooShort'));\n            }\n\n            $data = $restApi->getMessageUsers($search);\n            $restResponse->setData($data);\n            break;\n        case Rest::SAVE_COURSE_NOTEBOOK:\n            $title = !empty($_POST['title']) ? $_POST['title'] : null;\n            $text = !empty($_POST['text']) ? $_POST['text'] : null;\n            $data = $restApi->saveCourseNotebook($title, $text);\n            $restResponse->setData($data);\n            break;\n        case Rest::SAVE_FORUM_THREAD:\n            if (\n                empty($_POST['title']) || empty($_POST['text']) || empty($_POST['forum'])\n            ) {\n                throw new Exception(get_lang('NoData'));\n            }\n\n            $forumId = isset($_POST['forum']) ? intval($_POST['forum']) : 0;\n            $notify = !empty($_POST['notify']);\n\n            $threadInfo = [\n                'post_title' => $_POST['title'],\n                'forum_id' => $_POST['forum'],\n                'post_text' => nl2br($_POST['text']),\n                'post_notification' => $notify,\n            ];\n\n            $data = $restApi->saveForumThread($threadInfo, $forumId);\n            $restResponse->setData($data);\n            break;\n        default:\n            throw new Exception(get_lang('InvalidAction'));\n    }\n} catch (Exception $exeption) {\n    $restResponse->setErrorMessage(\n        $exeption->getMessage()\n    );\n}\n\nheader('Content-Type: application/json');\nheader('Access-Control-Allow-Origin: *');\n\necho $restResponse->format();\n"], "filenames": ["main/inc/lib/webservices/Rest.php", "main/webservices/api/v2.php"], "buggy_code_start_loc": [826, 9], "buggy_code_end_loc": [1327, 12], "fixing_code_start_loc": [826, 9], "fixing_code_end_loc": [1318, 13], "type": "CWE-94", "message": "Chamilo LMS version 11.x contains an Unserialization vulnerability in the \"hash\" GET parameter for the api endpoint located at /webservices/api/v2.php that can result in Unauthenticated remote code execution. This attack appear to be exploitable via a simple GET request to the api endpoint. This vulnerability appears to have been fixed in After commit 0de84700648f098c1fbf6b807dee28ec640efe62.", "other": {"cve": {"id": "CVE-2018-1999019", "sourceIdentifier": "cve@mitre.org", "published": "2018-07-23T15:29:00.707", "lastModified": "2019-09-17T17:07:12.437", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo LMS version 11.x contains an Unserialization vulnerability in the \"hash\" GET parameter for the api endpoint located at /webservices/api/v2.php that can result in Unauthenticated remote code execution. This attack appear to be exploitable via a simple GET request to the api endpoint. This vulnerability appears to have been fixed in After commit 0de84700648f098c1fbf6b807dee28ec640efe62."}, {"lang": "es", "value": "Chamilo LMS en versiones 11.x contiene una vulnerabilidad de deserializaci\u00f3n en el par\u00e1metro GET \"hash\" para el endpoint de la API situado en /webservices/api/v2.php y que puede resultar en la ejecuci\u00f3n remota de c\u00f3digo no autenticado. El ataque parece sr explotable mediante una simple petici\u00f3n GET al endpoint API. La vulnerabilidad parece haber sido solucionada tras el commit con ID 0de84700648f098c1fbf6b807dee28ec640efe62."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:-:*:*:*:*:*:*", "matchCriteriaId": "2079F7DE-E17F-4CAC-8EF9-B86AB0B0BDDF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "7AD5F6B4-91D5-41B7-8BCA-32B5992BA121"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "78473964-BCA3-4AFD-B0AF-1DF755C4FD0B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "E9D5A82E-E47A-4500-AC96-959DCC12A13D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "C475AC92-E499-447E-B712-5E7E40720930"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:beta4:*:*:*:*:*:*", "matchCriteriaId": "6F0BF067-DCA1-4205-8C11-F9879E6BAF0A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:beta5:*:*:*:*:*:*", "matchCriteriaId": "56EF9B04-B8E7-491D-B650-E77AF49A160A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:beta6:*:*:*:*:*:*", "matchCriteriaId": "10CE9BBF-DF6A-4CBB-B805-D59365948D23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:beta7:*:*:*:*:*:*", "matchCriteriaId": "D67503AF-CB0A-40F7-A9BF-958A737EA186"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "152EB14A-257B-49A0-BC82-CBD178367A0E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.2:*:*:*:*:*:*:*", "matchCriteriaId": "A3324481-48CB-4C31-881E-9487AB56DBC8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.4:-:*:*:*:*:*:*", "matchCriteriaId": "3B86DA84-9383-4C0F-899F-DCAF458E3991"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.4:alpha1:*:*:*:*:*:*", "matchCriteriaId": "8B6FC534-76EB-49ED-97B6-7FD264A796C2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.4:alpha2:*:*:*:*:*:*", "matchCriteriaId": "2CE77AF9-365F-4BCB-9AAF-1CED84AD51CC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.4:beta1:*:*:*:*:*:*", "matchCriteriaId": "01E34866-9154-4215-B698-FBA7071D93EE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.4:rc1:*:*:*:*:*:*", "matchCriteriaId": "85183AB2-581B-4DB4-BF9E-37F4AB8E9843"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.6:-:*:*:*:*:*:*", "matchCriteriaId": "BA648934-5B57-4446-B98D-34F409A649AB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.6:alpha1:*:*:*:*:*:*", "matchCriteriaId": "B5C3BDED-A676-4773-A044-103AF19D17E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.8:-:*:*:*:*:*:*", "matchCriteriaId": "BEA4A83D-D923-4A0C-B134-5C24EC68FD00"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.8:rc1:*:*:*:*:*:*", "matchCriteriaId": "56BBB7EA-7037-49FF-B17E-30A7D4B6F5BE"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/0de84700648f098c1fbf6b807dee28ec640efe62", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://ibb.co/jBxe6y", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/0de84700648f098c1fbf6b807dee28ec640efe62"}}