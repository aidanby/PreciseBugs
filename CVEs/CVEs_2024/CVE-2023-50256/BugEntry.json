{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Database\\DbManager;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Idna\\IdnaWrapper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass Customers extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * lists all customer entries\n\t *\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t * @param bool $show_usages\n\t *            optional, default false\n\t *\n\t * @access admin\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$show_usages = $this->getBoolParam('show_usages', true, false);\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] list customers\");\n\t\t\t$query_fields = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `c`.*, `a`.`loginname` AS `adminname`\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` `c`, `\" . TABLE_PANEL_ADMINS . \"` `a`\n\t\t\t\tWHERE \" . ($this->getUserDetail('customers_see_all') ? '' : \" `c`.`adminid` = :adminid AND \") . \"\n\t\t\t\t`c`.`adminid` = `a`.`adminid`\" . $this->getSearchWhere($query_fields, true) . $this->getOrderBy() . $this->getLimit());\n\t\t\t$params = [];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params = [\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid')\n\t\t\t\t];\n\t\t\t}\n\t\t\t$params = array_merge($params, $query_fields);\n\t\t\tDatabase::pexecute($result_stmt, $params, true, true);\n\t\t\t$result = [];\n\n\t\t\t$domains_stmt = null;\n\t\t\t$usages_stmt = null;\n\t\t\tif ($show_usages) {\n\t\t\t\t$domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(`id`) AS `domains`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `id`<> :stdd\n\t\t\t\t\");\n\t\t\t\t$usages_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT webspace, mail, mysql FROM `\" . TABLE_PANEL_DISKSPACE . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tORDER BY `stamp` DESC LIMIT 1\n\t\t\t\t\");\n\t\t\t}\n\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($show_usages) {\n\t\t\t\t\t// get number of domains\n\t\t\t\t\t$domains = Database::pexecute_first($domains_stmt, [\n\t\t\t\t\t\t'cid' => $row['customerid'],\n\t\t\t\t\t\t'stdd' => $row['standardsubdomain']\n\t\t\t\t\t]);\n\t\t\t\t\t$row['domains'] = intval($domains['domains']);\n\t\t\t\t\t// get disk-space usages for web, mysql and mail\n\t\t\t\t\t$usages = Database::pexecute_first($usages_stmt, [\n\t\t\t\t\t\t'cid' => $row['customerid']\n\t\t\t\t\t]);\n\t\t\t\t\tif ($usages) {\n\t\t\t\t\t\t$row['webspace_used'] = $usages['webspace'];\n\t\t\t\t\t\t$row['mailspace_used'] = $usages['mail'];\n\t\t\t\t\t\t$row['dbspace_used'] = $usages['mysql'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$row['webspace_used'] = 0;\n\t\t\t\t\t\t$row['mailspace_used'] = 0;\n\t\t\t\t\t\t$row['dbspace_used'] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response([\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t]);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of customers for the given admin\n\t *\n\t * @access admin\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_customers\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\tWHERE \" . ($this->getUserDetail('customers_see_all') ? \"1\" : \" `adminid` = :adminid \"));\n\t\t\t$params = [];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params = [\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid')\n\t\t\t\t];\n\t\t\t}\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response($result['num_customers']);\n\t\t\t}\n\t\t\treturn $this->response(0);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * create a new customer with default ftp-user and standard-subdomain (if wanted)\n\t *\n\t * @param string $email\n\t * @param string $name\n\t *                             optional if company is set, else required\n\t * @param string $firstname\n\t *                             optional if company is set, else required\n\t * @param string $company\n\t *                             optional but required if name/firstname empty\n\t * @param string $street\n\t *                             optional\n\t * @param string $zipcode\n\t *                             optional\n\t * @param string $city\n\t *                             optional\n\t * @param string $phone\n\t *                             optional\n\t * @param string $fax\n\t *                             optional\n\t * @param int $customernumber\n\t *                             optional\n\t * @param string $def_language ,\n\t *                             optional, default is system-default language\n\t * @param bool $api_allowed\n\t *                             optional, default is true if system setting api.enabled is true, else false\n\t * @param int $gender\n\t *                             optional, 0 = no-gender, 1 = male, 2 = female\n\t * @param string $custom_notes\n\t *                             optional notes\n\t * @param bool $custom_notes_show\n\t *                             optional, whether to show the content of custom_notes to the customer, default 0\n\t *                             (false)\n\t * @param string $new_loginname\n\t *                             optional, if empty generated automatically using customer-prefix and increasing\n\t *                             number\n\t * @param string $new_customer_password\n\t *                             optional, if empty generated automatically and send to the customer's email if\n\t *                             $sendpassword is 1\n\t * @param bool $sendpassword\n\t *                             optional, whether to send the password to the customer after creation, default 0\n\t *                             (false)\n\t * @param int $diskspace\n\t *                             optional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *                             optional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *                             optional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *                             optional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *                             optional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *                             optional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *                             optional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *                             optional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *                             optional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *                             optional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *                             optional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *                             optional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *                             optional size of email-quota available for customer in MB, default is system-setting\n\t *                             mail_quota\n\t * @param bool $email_quota_ul\n\t *                             optional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *                             optional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *                             optional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *                             optional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *                             optional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *                             optional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *                             optional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $createstdsubdomain\n\t *                             optional, whether to create a standard-subdomain ([loginname].froxlor-hostname.tld),\n\t *                             default [system.createstdsubdom_default]\n\t * @param bool $phpenabled\n\t *                             optional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *                             optional, array of IDs of php-config that the customer is allowed to use, default\n\t *                             empty (none)\n\t * @param bool $perlenabled\n\t *                             optional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *                             optional, whether to allow usage of the DNS editor (requires activated nameserver in\n\t *                             settings), default 0 (false)\n\t * @param bool $logviewenabled\n\t *                             optional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t * @param bool $store_defaultindex\n\t *                             optional, whether to store the default index file to customers homedir\n\t * @param int $hosting_plan_id\n\t *                             optional, specify a hosting-plan to set certain resource-values from the plan\n\t *                             instead of specifying them\n\t * @param array $allowed_mysqlserver\n\t *        \t                   optional, array of IDs of defined mysql-servers the customer is allowed to use,\n\t *                             default is to allow the default dbserver (id=0)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($this->getUserDetail('customers_used') < $this->getUserDetail('customers') || $this->getUserDetail('customers') == '-1') {\n\t\t\t\t// required parameters\n\t\t\t\t$email = $this->getParam('email');\n\n\t\t\t\t// parameters\n\t\t\t\t$name = $this->getParam('name', true, '');\n\t\t\t\t$firstname = $this->getParam('firstname', true, '');\n\t\t\t\t$company_required = (!empty($name) && empty($firstname)) || (empty($name) && !empty($firstname)) || (empty($name) && empty($firstname));\n\t\t\t\t$company = $this->getParam('company', !$company_required, '');\n\t\t\t\t$street = $this->getParam('street', true, '');\n\t\t\t\t$zipcode = $this->getParam('zipcode', true, '');\n\t\t\t\t$city = $this->getParam('city', true, '');\n\t\t\t\t$phone = $this->getParam('phone', true, '');\n\t\t\t\t$fax = $this->getParam('fax', true, '');\n\t\t\t\t$customernumber = $this->getParam('customernumber', true, '');\n\t\t\t\t$def_language = $this->getParam('def_language', true, Settings::Get('panel.standardlanguage'));\n\t\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, (Settings::Get('api.enabled') && Settings::Get('api.customer_default')));\n\t\t\t\t$gender = (int)$this->getParam('gender', true, 0);\n\t\t\t\t$custom_notes = $this->getParam('custom_notes', true, '');\n\t\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, 0);\n\t\t\t\t$createstdsubdomain = $this->getBoolParam('createstdsubdomain', true, Settings::Get('system.createstdsubdom_default'));\n\t\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t\t$sendpassword = $this->getBoolParam('sendpassword', true, 0);\n\t\t\t\t$store_defaultindex = $this->getBoolParam('store_defaultindex', true, 0);\n\t\t\t\t$loginname = $this->getParam('new_loginname', true, '');\n\n\t\t\t\t// hosting-plan values\n\t\t\t\t$hosting_plan_id = $this->getParam('hosting_plan_id', true, 0);\n\t\t\t\tif ($hosting_plan_id > 0) {\n\t\t\t\t\t$hp_result = $this->apiCall('HostingPlans.get', [\n\t\t\t\t\t\t'id' => $hosting_plan_id\n\t\t\t\t\t]);\n\t\t\t\t\t$hp_result['value'] = json_decode($hp_result['value'], true);\n\t\t\t\t\tforeach ($hp_result['value'] as $index => $value) {\n\t\t\t\t\t\t$hp_result[$index] = $value;\n\t\t\t\t\t}\n\t\t\t\t\t$diskspace = $hp_result['diskspace'] ?? 0;\n\t\t\t\t\t$traffic = $hp_result['traffic'] ?? 0;\n\t\t\t\t\t$subdomains = $hp_result['subdomains'] ?? 0;\n\t\t\t\t\t$emails = $hp_result['emails'] ?? 0;\n\t\t\t\t\t$email_accounts = $hp_result['email_accounts'] ?? 0;\n\t\t\t\t\t$email_forwarders = $hp_result['email_forwarders'] ?? 0;\n\t\t\t\t\t$email_quota = $hp_result['email_quota'] ?? Settings::Get('system.mail_quota');\n\t\t\t\t\t$email_imap = $hp_result['email_imap'] ?? 0;\n\t\t\t\t\t$email_pop3 = $hp_result['email_pop3'] ?? 0;\n\t\t\t\t\t$ftps = $hp_result['ftps'] ?? 0;\n\t\t\t\t\t$mysqls = $hp_result['mysqls'] ?? 0;\n\t\t\t\t\t$phpenabled = $hp_result['phpenabled'] ?? 0;\n\t\t\t\t\t$p_allowed_phpconfigs = $hp_result['allowed_phpconfigs'] ?? 0;\n\t\t\t\t\t$perlenabled = $hp_result['perlenabled'] ?? 0;\n\t\t\t\t\t$dnsenabled = $hp_result['dnsenabled'] ?? 0;\n\t\t\t\t\t$logviewenabled = $hp_result['logviewenabled'] ?? 0;\n\t\t\t\t} else {\n\t\t\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, Settings::Get('system.mail_quota'));\n\t\t\t\t\t$email_imap = $this->getBoolParam('email_imap', true, 0);\n\t\t\t\t\t$email_pop3 = $this->getBoolParam('email_pop3', true, 0);\n\t\t\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\t\t\t\t\t$phpenabled = $this->getBoolParam('phpenabled', true, 0);\n\t\t\t\t\t$p_allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, []);\n\t\t\t\t\t$perlenabled = $this->getBoolParam('perlenabled', true, 0);\n\t\t\t\t\t$dnsenabled = $this->getBoolParam('dnsenabled', true, 0);\n\t\t\t\t\t$logviewenabled = $this->getBoolParam('logviewenabled', true, 0);\n\t\t\t\t}\n\n\t\t\t\tif ($mysqls == -1 || $mysqls > 0) {\n\t\t\t\t\t$p_allowed_mysqlserver = $this->getParam('allowed_mysqlserver', true, [0]);\n\t\t\t\t} else {\n\t\t\t\t\t// mysql not allowed, so no mysql available for customer\n\t\t\t\t\t$p_allowed_mysqlserver = [];\n\t\t\t\t}\n\n\t\t\t\t// validation\n\t\t\t\t$name = Validate::validate($name, 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$firstname = Validate::validate($firstname, 'first name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$company = Validate::validate($company, 'company', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$street = Validate::validate($street, 'street', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$zipcode = Validate::validate($zipcode, 'zipcode', '/^[0-9 \\-A-Z]*$/', '', [], true);\n\t\t\t\t$city = Validate::validate($city, 'city', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$phone = Validate::validate($phone, 'phone', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', [], true);\n\t\t\t\t$fax = Validate::validate($fax, 'fax', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', [], true);\n\t\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t\t$email = $idna_convert->encode(Validate::validate($email, 'email', '', '', [], true));\n\t\t\t\t$customernumber = Validate::validate($customernumber, 'customer number', '/^[A-Za-z0-9 \\-]*$/Di', '', [], true);\n\t\t\t\t$def_language = Validate::validate($def_language, 'default language', '', '', [], true);\n\t\t\t\t$custom_notes = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', Validate::REGEX_CONF_TEXT, '', [], true);\n\n\t\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t\t$email_quota = -1;\n\t\t\t\t}\n\n\t\t\t\t$password = Validate::validate($password, 'password', '', '', [], true);\n\t\t\t\t// only check if not empty,\n\t\t\t\t// cause empty == generate password automatically\n\t\t\t\tif ($password != '') {\n\t\t\t\t\t$password = Crypt::validatePassword($password, true);\n\t\t\t\t}\n\n\t\t\t\t// gender out of range? [0,2]\n\t\t\t\tif ($gender < 0 || $gender > 2) {\n\t\t\t\t\t$gender = 0;\n\t\t\t\t}\n\n\t\t\t\t$allowed_phpconfigs = [];\n\t\t\t\tif (!empty($p_allowed_phpconfigs) && is_array($p_allowed_phpconfigs)) {\n\t\t\t\t\tforeach ($p_allowed_phpconfigs as $allowed_phpconfig) {\n\t\t\t\t\t\t$allowed_phpconfig = intval($allowed_phpconfig);\n\t\t\t\t\t\t$allowed_phpconfigs[] = $allowed_phpconfig;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$allowed_phpconfigs = array_map('intval', $allowed_phpconfigs);\n\n\t\t\t\tif (empty($allowed_phpconfigs) && $phpenabled == 1) {\n\t\t\t\t\tResponse::standardError('customerphpenabledbutnoconfig', '', true);\n\t\t\t\t}\n\n\t\t\t\t$allowed_mysqlserver = array();\n\t\t\t\tif (! empty($p_allowed_mysqlserver) && is_array($p_allowed_mysqlserver)) {\n\t\t\t\t\tforeach ($p_allowed_mysqlserver as $allowed_ms) {\n\t\t\t\t\t\t$allowed_ms = intval($allowed_ms);\n\t\t\t\t\t\t$allowed_mysqlserver[] = $allowed_ms;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$allowed_mysqlserver = array_map('intval', $allowed_mysqlserver);\n\n\t\t\t\t$diskspace *= 1024;\n\t\t\t\t$traffic *= 1024 * 1024;\n\n\t\t\t\tif (\n\t\t\t\t\t($diskspace != 0 && (($this->getUserDetail('diskspace_used') + $diskspace) > $this->getUserDetail('diskspace')) && ($this->getUserDetail('diskspace') / 1024) != '-1')\n\t\t\t\t\t|| ($mysqls != 0 && (($this->getUserDetail('mysqls_used') + $mysqls) > $this->getUserDetail('mysqls')) && $this->getUserDetail('mysqls') != '-1')\n\t\t\t\t\t|| ($emails != 0 && (($this->getUserDetail('emails_used') + $emails) > $this->getUserDetail('emails')) && $this->getUserDetail('emails') != '-1')\n\t\t\t\t\t|| ($email_accounts != 0 && (($this->getUserDetail('email_accounts_used') + $email_accounts) > $this->getUserDetail('email_accounts')) && $this->getUserDetail('email_accounts') != '-1')\n\t\t\t\t\t|| ($email_forwarders != 0 && (($this->getUserDetail('email_forwarders_used') + $email_forwarders) > $this->getUserDetail('email_forwarders')) && $this->getUserDetail('email_forwarders') != '-1')\n\t\t\t\t\t|| ($email_quota != 0 && (($this->getUserDetail('email_quota_used') + $email_quota) > $this->getUserDetail('email_quota')) && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1')\n\t\t\t\t\t|| ($ftps != 0 && (($this->getUserDetail('ftps_used') + $ftps) > $this->getUserDetail('ftps')) && $this->getUserDetail('ftps') != '-1')\n\t\t\t\t\t|| ($subdomains != 0 && (($this->getUserDetail('subdomains_used') + $subdomains) > $this->getUserDetail('subdomains')) && $this->getUserDetail('subdomains') != '-1')\n\t\t\t\t\t|| (($diskspace / 1024) == '-1' && ($this->getUserDetail('diskspace') / 1024) != '-1')\n\t\t\t\t\t|| ($mysqls == '-1' && $this->getUserDetail('mysqls') != '-1')\n\t\t\t\t\t|| ($emails == '-1' && $this->getUserDetail('emails') != '-1')\n\t\t\t\t\t|| ($email_accounts == '-1' && $this->getUserDetail('email_accounts') != '-1')\n\t\t\t\t\t|| ($email_forwarders == '-1' && $this->getUserDetail('email_forwarders') != '-1')\n\t\t\t\t\t|| ($email_quota == '-1' && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1')\n\t\t\t\t\t|| ($ftps == '-1' && $this->getUserDetail('ftps') != '-1')\n\t\t\t\t\t|| ($subdomains == '-1' && $this->getUserDetail('subdomains') != '-1')\n\t\t\t\t) {\n\t\t\t\t\tResponse::standardError('youcantallocatemorethanyouhave', '', true);\n\t\t\t\t}\n\n\t\t\t\tif (!Validate::validateEmail($email)) {\n\t\t\t\t\tResponse::standardError('emailiswrong', $email, true);\n\t\t\t\t} else {\n\t\t\t\t\tif ($loginname != '') {\n\t\t\t\t\t\t$accountnumber = intval(Settings::Get('system.lastaccountnumber'));\n\t\t\t\t\t\t$loginname = Validate::validate($loginname, 'loginname', '/^[a-z][a-z0-9\\-_]+$/i', '', [], true);\n\n\t\t\t\t\t\t// Accounts which match systemaccounts are not allowed, filtering them\n\t\t\t\t\t\tif (preg_match('/^' . preg_quote(Settings::Get('customer.accountprefix'), '/') . '([0-9]+)/', $loginname)) {\n\t\t\t\t\t\t\tResponse::standardError('loginnameisusingprefix', Settings::Get('customer.accountprefix'), true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Additional filtering for Bug #962\n\t\t\t\t\t\tif (function_exists('posix_getpwnam') && !in_array(\"posix_getpwnam\", explode(\",\", ini_get('disable_functions'))) && posix_getpwnam($loginname)) {\n\t\t\t\t\t\t\tResponse::standardError('loginnameissystemaccount', $loginname, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$accountnumber = intval(Settings::Get('system.lastaccountnumber')) + 1;\n\t\t\t\t\t\t$loginname = Settings::Get('customer.accountprefix') . $accountnumber;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if the account already exists\n\t\t\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t\t\t$loginname_check_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname` = :login\n\t\t\t\t\t\");\n\t\t\t\t\t$loginname_check = Database::pexecute_first($loginname_check_stmt, [\n\t\t\t\t\t\t'login' => $loginname\n\t\t\t\t\t], true, true);\n\n\t\t\t\t\t// Check if an admin with the loginname already exists\n\t\t\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t\t\t$loginname_check_admin_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `loginname` = :login\n\t\t\t\t\t\");\n\t\t\t\t\t$loginname_check_admin = Database::pexecute_first($loginname_check_admin_stmt, [\n\t\t\t\t\t\t'login' => $loginname\n\t\t\t\t\t], true, true);\n\n\t\t\t\t\t$mysql_maxlen = Database::getSqlUsernameLength() - strlen(Settings::Get('customer.mysqlprefix'));\n\t\t\t\t\tif (($loginname_check && strtolower($loginname_check['loginname']) == strtolower($loginname)) || ($loginname_check_admin && strtolower($loginname_check_admin['loginname']) == strtolower($loginname))) {\n\t\t\t\t\t\tResponse::standardError('loginnameexists', $loginname, true);\n\t\t\t\t\t} elseif (!Validate::validateUsername($loginname, Settings::Get('panel.unix_names'), $mysql_maxlen)) {\n\t\t\t\t\t\tif (strlen($loginname) > $mysql_maxlen) {\n\t\t\t\t\t\t\tResponse::standardError('loginnameiswrong2', $mysql_maxlen, true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tResponse::standardError('loginnameiswrong', $loginname, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$guid = intval(Settings::Get('system.lastguid')) + 1;\n\t\t\t\t\t$documentroot = FileDir::makeCorrectDir(Settings::Get('system.documentroot_prefix') . '/' . $loginname);\n\n\t\t\t\t\tif (file_exists($documentroot)) {\n\t\t\t\t\t\tResponse::standardError('documentrootexists', $documentroot, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($password == '') {\n\t\t\t\t\t\t$password = Crypt::generatePassword();\n\t\t\t\t\t}\n\n\t\t\t\t\t$_theme = Settings::Get('panel.default_theme');\n\n\t\t\t\t\t$ins_data = [\n\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t'loginname' => $loginname,\n\t\t\t\t\t\t'passwd' => Crypt::makeCryptPassword($password),\n\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t'gender' => $gender,\n\t\t\t\t\t\t'company' => $company,\n\t\t\t\t\t\t'street' => $street,\n\t\t\t\t\t\t'zipcode' => $zipcode,\n\t\t\t\t\t\t'city' => $city,\n\t\t\t\t\t\t'phone' => $phone,\n\t\t\t\t\t\t'fax' => $fax,\n\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t'customerno' => $customernumber,\n\t\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t\t'docroot' => $documentroot,\n\t\t\t\t\t\t'guid' => $guid,\n\t\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'email_accounts' => $email_accounts,\n\t\t\t\t\t\t'email_forwarders' => $email_forwarders,\n\t\t\t\t\t\t'email_quota' => $email_quota,\n\t\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t\t'allowed_phpconfigs' => empty($allowed_phpconfigs) ? \"\" : json_encode($allowed_phpconfigs),\n\t\t\t\t\t\t'imap' => $email_imap,\n\t\t\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t\t\t'perlenabled' => $perlenabled,\n\t\t\t\t\t\t'dnsenabled' => $dnsenabled,\n\t\t\t\t\t\t'logviewenabled' => $logviewenabled,\n\t\t\t\t\t\t'theme' => $_theme,\n\t\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t\t\t'allowed_mysqlserver' => empty($allowed_mysqlserver) ? \"\" : json_encode($allowed_mysqlserver)\n\t\t\t\t\t];\n\n\t\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t\t\t`adminid` = :adminid,\n\t\t\t\t\t\t`loginname` = :loginname,\n\t\t\t\t\t\t`password` = :passwd,\n\t\t\t\t\t\t`name` = :name,\n\t\t\t\t\t\t`firstname` = :firstname,\n\t\t\t\t\t\t`gender` = :gender,\n\t\t\t\t\t\t`company` = :company,\n\t\t\t\t\t\t`street` = :street,\n\t\t\t\t\t\t`zipcode` = :zipcode,\n\t\t\t\t\t\t`city` = :city,\n\t\t\t\t\t\t`phone` = :phone,\n\t\t\t\t\t\t`fax` = :fax,\n\t\t\t\t\t\t`email` = :email,\n\t\t\t\t\t\t`customernumber` = :customerno,\n\t\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t\t`documentroot` = :docroot,\n\t\t\t\t\t\t`guid` = :guid,\n\t\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t\t`email_accounts` = :email_accounts,\n\t\t\t\t\t\t`email_forwarders` = :email_forwarders,\n\t\t\t\t\t\t`email_quota` = :email_quota,\n\t\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t\t`standardsubdomain` = '0',\n\t\t\t\t\t\t`phpenabled` = :phpenabled,\n\t\t\t\t\t\t`allowed_phpconfigs` = :allowed_phpconfigs,\n\t\t\t\t\t\t`imap` = :imap,\n\t\t\t\t\t\t`pop3` = :pop3,\n\t\t\t\t\t\t`perlenabled` = :perlenabled,\n\t\t\t\t\t\t`dnsenabled` = :dnsenabled,\n\t\t\t\t\t\t`logviewenabled` = :logviewenabled,\n\t\t\t\t\t\t`theme` = :theme,\n\t\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t\t\t`allowed_mysqlserver`= :allowed_mysqlserver\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t\t$customerid = Database::lastInsertId();\n\t\t\t\t\t$ins_data['customerid'] = $customerid;\n\n\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'customers_used');\n\n\t\t\t\t\t// update admin resource-usage\n\t\t\t\t\tif ($mysqls != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'mysqls_used', '', (int)$mysqls);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($emails != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'emails_used', '', (int)$emails);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_accounts != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_accounts_used', '', (int)$email_accounts);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_forwarders != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_forwarders_used', '', (int)$email_forwarders);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_quota != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_quota_used', '', (int)$email_quota);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($subdomains != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'subdomains_used', '', (int)$subdomains);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($ftps != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'ftps_used', '', (int)$ftps);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (($diskspace / 1024) != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'diskspace_used', '', (int)$diskspace);\n\t\t\t\t\t}\n\n\t\t\t\t\t// update last guid\n\t\t\t\t\tSettings::Set('system.lastguid', $guid, true);\n\n\t\t\t\t\tif ($accountnumber != intval(Settings::Get('system.lastaccountnumber'))) {\n\t\t\t\t\t\t// update last account number\n\t\t\t\t\t\tSettings::Set('system.lastaccountnumber', $accountnumber, true);\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] added customer '\" . $loginname . \"'\");\n\t\t\t\t\tunset($ins_data);\n\n\t\t\t\t\t// insert task to create homedir etc.\n\t\t\t\t\tCronjob::inserttask(TaskId::CREATE_HOME, $loginname, $guid, $guid, $store_defaultindex);\n\n\t\t\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\t\t\tCronjob::inserttask(TaskId::CREATE_QUOTA);\n\n\t\t\t\t\t// Add htpasswd for the stats-pages\n\t\t\t\t\t$htpasswdPassword = Crypt::makeCryptPassword($password, true);\n\n\t\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_HTPASSWDS . \"` SET\n\t\t\t\t\t\t`customerid` = :customerid,\n\t\t\t\t\t\t`username` = :username,\n\t\t\t\t\t\t`password` = :passwd,\n\t\t\t\t\t\t`path` = :path\n\t\t\t\t\t\");\n\t\t\t\t\t$ins_data = [\n\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t'username' => $loginname,\n\t\t\t\t\t\t'passwd' => $htpasswdPassword\n\t\t\t\t\t];\n\n\t\t\t\t\t$stats_folder = Settings::Get('system.traffictool');\n\t\t\t\t\t$ins_data['path'] = FileDir::makeCorrectDir($documentroot . '/' . $stats_folder . '/');\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added \" . $stats_folder . \" htpasswd for user '\" . $loginname . \"'\");\n\t\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\n\t\t\t\t\t// add default FTP-User\n\t\t\t\t\t// also, add froxlor-local user to ftp-group (if exists!) to\n\t\t\t\t\t// allow access to customer-directories from within the panel, which\n\t\t\t\t\t// is necessary when pathedit = Dropdown\n\t\t\t\t\t$local_users = [\n\t\t\t\t\t\tSettings::Get('system.httpuser')\n\t\t\t\t\t];\n\t\t\t\t\tif ((int)Settings::Get('system.mod_fcgid_ownvhost') == 1 || (int)Settings::Get('phpfpm.enabled_ownvhost') == 1) {\n\t\t\t\t\t\tif ((int)Settings::Get('system.mod_fcgid') == 1) {\n\t\t\t\t\t\t\t$local_user = Settings::Get('system.mod_fcgid_httpuser');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$local_user = Settings::Get('phpfpm.vhost_httpuser');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// check froxlor-local user membership in ftp-group\n\t\t\t\t\t\t// without this check addition may duplicate user in list if httpuser == local_user\n\t\t\t\t\t\tif (in_array($local_user, $local_users) == false) {\n\t\t\t\t\t\t\t$local_users[] = $local_user;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$this->apiCall('Ftps.add', [\n\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t'path' => '/',\n\t\t\t\t\t\t'ftp_password' => $password,\n\t\t\t\t\t\t'ftp_description' => \"Default\",\n\t\t\t\t\t\t'sendinfomail' => 0,\n\t\t\t\t\t\t'ftp_username' => $loginname,\n\t\t\t\t\t\t'additional_members' => $local_users,\n\t\t\t\t\t\t'is_defaultuser' => 1\n\t\t\t\t\t]);\n\n\t\t\t\t\t$_stdsubdomain = '';\n\t\t\t\t\tif ($createstdsubdomain == '1') {\n\t\t\t\t\t\tif (Settings::Get('system.stdsubdomain') !== null && Settings::Get('system.stdsubdomain') != '') {\n\t\t\t\t\t\t\t$_stdsubdomain = $loginname . '.' . Settings::Get('system.stdsubdomain');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$_stdsubdomain = $loginname . '.' . Settings::Get('system.hostname');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$ins_data = [\n\t\t\t\t\t\t\t'domain' => $_stdsubdomain,\n\t\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'docroot' => $documentroot,\n\t\t\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t\t\t'openbasedir' => '1'\n\t\t\t\t\t\t];\n\t\t\t\t\t\t$domainid = -1;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$std_domain = $this->apiCall('Domains.add', $ins_data);\n\t\t\t\t\t\t\t$domainid = $std_domain['id'];\n\t\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to add standard-subdomain: \" . $e->getMessage());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($domainid > 0) {\n\t\t\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `standardsubdomain` = :domainid WHERE `customerid` = :customerid\n\t\t\t\t\t\t\t\");\n\t\t\t\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t\t\t\t'domainid' => $domainid,\n\t\t\t\t\t\t\t\t'customerid' => $customerid\n\t\t\t\t\t\t\t], true, true);\n\t\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added standardsubdomain for user '\" . $loginname . \"'\");\n\t\t\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($sendpassword == '1') {\n\t\t\t\t\t\t$srv_hostname = Settings::Get('system.hostname');\n\t\t\t\t\t\tif (Settings::Get('system.froxlordirectlyviahostname') == '0') {\n\t\t\t\t\t\t\t$srv_hostname .= '/' . basename(\\Froxlor\\Froxlor::getInstallDir());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$srv_ip_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tSELECT ip, port FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\t\t\tWHERE `id` = :defaultip\n\t\t\t\t\t\t\");\n\t\t\t\t\t\t$default_ips = Settings::Get('system.defaultip');\n\t\t\t\t\t\t$default_ips = explode(',', $default_ips);\n\t\t\t\t\t\t$srv_ip = Database::pexecute_first($srv_ip_stmt, [\n\t\t\t\t\t\t\t'defaultip' => reset($default_ips)\n\t\t\t\t\t\t], true, true);\n\n\t\t\t\t\t\t$replace_arr = [\n\t\t\t\t\t\t\t'FIRSTNAME' => $firstname,\n\t\t\t\t\t\t\t'NAME' => $name,\n\t\t\t\t\t\t\t'COMPANY' => $company,\n\t\t\t\t\t\t\t'SALUTATION' => User::getCorrectUserSalutation([\n\t\t\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t\t\t'company' => $company\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t'CUSTOMER_NO' => $customernumber,\n\t\t\t\t\t\t\t'USERNAME' => $loginname,\n\t\t\t\t\t\t\t'PASSWORD' => $password,\n\t\t\t\t\t\t\t'SERVER_HOSTNAME' => $srv_hostname,\n\t\t\t\t\t\t\t'SERVER_IP' => $srv_ip['ip'] ?? '',\n\t\t\t\t\t\t\t'SERVER_PORT' => $srv_ip['port'] ?? '',\n\t\t\t\t\t\t\t'DOMAINNAME' => $_stdsubdomain\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\t// get template for mail subject\n\t\t\t\t\t\t$mail_subject = $this->getMailTemplate([\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t\t], 'mails', 'createcustomer_subject', $replace_arr, lng('mails.createcustomer.subject'));\n\t\t\t\t\t\t// get template for mail body\n\t\t\t\t\t\t$mail_body = $this->getMailTemplate([\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t\t], 'mails', 'createcustomer_mailbody', $replace_arr, lng('mails.createcustomer.mailbody'));\n\n\t\t\t\t\t\t$_mailerror = false;\n\t\t\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$this->mailer()->Subject = $mail_subject;\n\t\t\t\t\t\t\t$this->mailer()->AltBody = $mail_body;\n\t\t\t\t\t\t\t$this->mailer()->msgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t\t\t$this->mailer()->addAddress($email, User::getCorrectUserSalutation([\n\t\t\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t\t\t'company' => $company\n\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t$this->mailer()->send();\n\t\t\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\t\tResponse::standardError('errorsendingmail', $email, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->mailer()->clearAddresses();\n\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically sent password to user '\" . $loginname . \"'\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added customer '\" . $loginname . \"'\");\n\n\t\t\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t\t\t'loginname' => $loginname\n\t\t\t\t]);\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t\tthrow new Exception(\"No more resources available\", 406);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return a customer entry by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the customer-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t * @param bool $show_usages\n\t *            optional, default false\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = $id > 0;\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\t\t$show_usages = $this->getBoolParam('show_usages', true, false);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `c`.*, `a`.`loginname` AS `adminname`\n\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` `c`, `\" . TABLE_PANEL_ADMINS . \"` `a`\n\t\t\tWHERE \" . ($id > 0 ? \"`c`.`customerid` = :idln\" : \"`c`.`loginname` = :idln\") . ($this->getUserDetail('customers_see_all') ? '' : \" AND `c`.`adminid` = :adminid\") . \" AND `c`.`adminid` = `a`.`adminid`\");\n\t\t\t$params = [\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t} else {\n\t\t\tif (($id > 0 && $id != $this->getUserDetail('customerid')) || !empty($loginname) && $loginname != $this->getUserDetail('loginname')) {\n\t\t\t\tthrow new Exception(\"You cannot access data of other customers\", 401);\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\tWHERE \" . ($id > 0 ? \"`customerid` = :idln\" : \"`loginname` = :idln\"));\n\t\t\t$params = [\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t];\n\t\t}\n\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\tif ($result) {\n\t\t\t// check whether the admin does not want the customer to see the notes\n\t\t\tif (!$this->isAdmin() && $result['custom_notes_show'] != 1) {\n\t\t\t\t$result['custom_notes'] = \"\";\n\t\t\t}\n\t\t\tif ($show_usages) {\n\t\t\t\t// get number of domains\n\t\t\t\t$domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(`id`) AS `domains`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `id`<> :stdd\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($domains_stmt, [\n\t\t\t\t\t'cid' => $result['customerid'],\n\t\t\t\t\t'stdd' => $result['standardsubdomain']\n\t\t\t\t]);\n\t\t\t\t$domains = $domains_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t$result['domains'] = intval($domains['domains']);\n\t\t\t\t// get disk-space usages for web, mysql and mail\n\t\t\t\t$usages_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DISKSPACE . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tORDER BY `stamp` DESC LIMIT 1\n\t\t\t\t\");\n\t\t\t\t$usages = Database::pexecute_first($usages_stmt, [\n\t\t\t\t\t'cid' => $result['customerid']\n\t\t\t\t]);\n\t\t\t\tif ($usages) {\n\t\t\t\t\t$result['webspace_used'] = $usages['webspace'];\n\t\t\t\t\t$result['mailspace_used'] = $usages['mail'];\n\t\t\t\t\t$result['dbspace_used'] = $usages['mysql'];\n\t\t\t\t} else {\n\t\t\t\t\t$result['webspace_used'] = 0;\n\t\t\t\t\t$result['mailspace_used'] = 0;\n\t\t\t\t\t$result['dbspace_used'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] get customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\t$key = ($id > 0 ? \"id #\" . $id : \"loginname '\" . $loginname . \"'\");\n\t\tthrow new Exception(\"Customer with \" . $key . \" could not be found\", 404);\n\t}\n\n\t/**\n\t * increase resource-usage\n\t *\n\t * @param int $customerid\n\t * @param string $resource\n\t * @param string $extra\n\t *            optional, default empty\n\t * @param int $increase_by\n\t *            optional, default 1\n\t */\n\tpublic static function increaseUsage($customerid = 0, $resource = null, $extra = '', $increase_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_CUSTOMERS, 'customerid', $customerid, '+', $resource, $extra, $increase_by);\n\t}\n\n\t/**\n\t * update customer entry by either id or loginname, customer can only change language, password and theme\n\t *\n\t * @param int $id\n\t *                             optional, the customer-id\n\t * @param string $loginname\n\t *                             optional, the loginname\n\t * @param string $email\n\t * @param string $name\n\t *                             optional if company is set, else required\n\t * @param string $firstname\n\t *                             optional if company is set, else required\n\t * @param string $company\n\t *                             optional but required if name/firstname empty\n\t * @param string $street\n\t *                             optional\n\t * @param string $zipcode\n\t *                             optional\n\t * @param string $city\n\t *                             optional\n\t * @param string $phone\n\t *                             optional\n\t * @param string $fax\n\t *                             optional\n\t * @param int $customernumber\n\t *                             optional\n\t * @param string $def_language ,\n\t *                             optional, default is system-default language\n\t * @param bool $api_allowed\n\t *                             optional, default is true if system setting api.enabled is true, else false\n\t * @param int $gender\n\t *                             optional, 0 = no-gender, 1 = male, 2 = female\n\t * @param string $custom_notes\n\t *                             optional notes\n\t * @param bool $custom_notes_show\n\t *                             optional, whether to show the content of custom_notes to the customer, default 0\n\t *                             (false)\n\t * @param string $new_customer_password\n\t *                             optional, iset new password\n\t * @param bool $sendpassword\n\t *                             optional, whether to send the password to the customer after creation, default 0\n\t *                             (false)\n\t * @param int $move_to_admin\n\t *                             optional, if valid admin-id is given here, the customer's admin/reseller can be\n\t *                             changed\n\t * @param bool $deactivated\n\t *                             optional, if 1 (true) the customer can be deactivated/suspended\n\t * @param int $diskspace\n\t *                             optional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *                             optional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *                             optional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *                             optional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *                             optional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *                             optional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *                             optional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *                             optional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *                             optional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *                             optional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *                             optional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *                             optional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *                             optional size of email-quota available for customer in MB, default is system-setting\n\t *                             mail_quota\n\t * @param bool $email_quota_ul\n\t *                             optional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *                             optional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *                             optional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *                             optional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *                             optional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *                             optional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *                             optional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $createstdsubdomain\n\t *                             optional, whether to create a standard-subdomain ([loginname].froxlor-hostname.tld),\n\t *                             default 1 (if customer has std-subdomain) else 0 (false)\n\t * @param bool $phpenabled\n\t *                             optional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *                             optional, array of IDs of php-config that the customer is allowed to use, default\n\t *                             empty (none)\n\t * @param bool $perlenabled\n\t *                             optional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *                             optional, whether to allow usage of the DNS editor (requires activated nameserver in\n\t *                             settings), default 0 (false)\n\t * @param bool $logviewenabled\n\t *                             optional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t * @param string $theme\n\t *                             optional, change theme\n\t * @param array $allowed_mysqlserver\n\t *        \t                   optional, array of IDs of defined mysql-servers the customer is allowed to use,\n\t *                             default is to allow the default dbserver (id=0)\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = $id > 0;\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t'id' => $id,\n\t\t\t'loginname' => $loginname\n\t\t]);\n\t\t$id = $result['customerid'];\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// parameters\n\t\t\t$move_to_admin = (int)($this->getParam('move_to_admin', true, 0));\n\n\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t$email = $this->getParam('email', true, $idna_convert->decode($result['email']));\n\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t$firstname = $this->getParam('firstname', true, $result['firstname']);\n\t\t\t$company_required = empty($result['company']) && ((!empty($name) && empty($firstname)) || (empty($name) && !empty($firstname)) || (empty($name) && empty($firstname)));\n\t\t\t$company = $this->getParam('company', !$company_required, $result['company']);\n\t\t\t$street = $this->getParam('street', true, $result['street']);\n\t\t\t$zipcode = $this->getParam('zipcode', true, $result['zipcode']);\n\t\t\t$city = $this->getParam('city', true, $result['city']);\n\t\t\t$phone = $this->getParam('phone', true, $result['phone']);\n\t\t\t$fax = $this->getParam('fax', true, $result['fax']);\n\t\t\t$customernumber = $this->getParam('customernumber', true, $result['customernumber']);\n\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, $result['api_allowed']);\n\t\t\t$gender = (int)$this->getParam('gender', true, $result['gender']);\n\t\t\t$custom_notes = $this->getParam('custom_notes', true, $result['custom_notes']);\n\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, $result['custom_notes_show']);\n\n\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, round($result['diskspace'] / 1024, $dec_places));\n\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, round($result['traffic'] / (1024 * 1024), $dec_places));\n\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t$email_imap = $this->getParam('email_imap', true, $result['imap']);\n\t\t\t$email_pop3 = $this->getParam('email_pop3', true, $result['pop3']);\n\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\t\t\t$createstdsubdomain = $this->getBoolParam('createstdsubdomain', true, ($result['standardsubdomain'] != 0 ? 1 : 0));\n\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t$phpenabled = $this->getBoolParam('phpenabled', true, $result['phpenabled']);\n\t\t\t$allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, json_decode($result['allowed_phpconfigs'], true));\n\t\t\t$perlenabled = $this->getBoolParam('perlenabled', true, $result['perlenabled']);\n\t\t\t$dnsenabled = $this->getBoolParam('dnsenabled', true, $result['dnsenabled']);\n\t\t\t$logviewenabled = $this->getBoolParam('logviewenabled', true, $result['logviewenabled']);\n\t\t\t$deactivated = $this->getBoolParam('deactivated', true, $result['deactivated']);\n\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\t\t\t$allowed_mysqlserver = $this->getParam('allowed_mysqlserver', true, json_decode($result['allowed_mysqlserver'], true));\n\t\t} else {\n\t\t\t// allowed parameters\n\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\t\t}\n\n\t\t// validation\n\t\tif ($this->isAdmin()) {\n\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t$name = Validate::validate($name, 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$firstname = Validate::validate($firstname, 'first name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$company = Validate::validate($company, 'company', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$street = Validate::validate($street, 'street', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$zipcode = Validate::validate($zipcode, 'zipcode', '/^[0-9 \\-A-Z]*$/', '', [], true);\n\t\t\t$city = Validate::validate($city, 'city', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$phone = Validate::validate($phone, 'phone', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', [], true);\n\t\t\t$fax = Validate::validate($fax, 'fax', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', [], true);\n\t\t\t$email = $idna_convert->encode(Validate::validate($email, 'email', '', '', [], true));\n\t\t\t$customernumber = Validate::validate($customernumber, 'customer number', '/^[A-Za-z0-9 \\-]*$/Di', '', [], true);\n\t\t\t$custom_notes = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\tif (!empty($allowed_phpconfigs)) {\n\t\t\t\t$allowed_phpconfigs = array_map('intval', $allowed_phpconfigs);\n\t\t\t}\n\t\t\tif (empty($allowed_phpconfigs) && $phpenabled == 1) {\n\t\t\t\tResponse::standardError('customerphpenabledbutnoconfig', '', true);\n\t\t\t}\n\n\t\t\t// add permission for allowed mysql usage if customer was not allowed to use mysql prior\n\t\t\tif ($result['mysqls'] == 0 && ($mysqls == -1 || $mysqls > 0)) {\n\t\t\t\t$allowed_mysqlserver = $this->getParam('allowed_mysqlserver', true, [0]);\n\t\t\t}\n\t\t\tif (! empty($allowed_mysqlserver)) {\n\t\t\t\t$allowed_mysqlserver = array_map('intval', $allowed_mysqlserver);\n\t\t\t}\n\n\t\t}\n\t\t$def_language = Validate::validate($def_language, 'default language', '', '', [], true);\n\t\t$theme = Validate::validate($theme, 'theme', '', '', [], true);\n\n\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t$email_quota = -1;\n\t\t}\n\n\t\tif (empty($theme)) {\n\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t}\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$diskspace *= 1024;\n\t\t\t$traffic *= 1024 * 1024;\n\n\t\t\tif (\n\t\t\t\t($diskspace != 0 && (($this->getUserDetail('diskspace_used') + $diskspace - $result['diskspace']) > $this->getUserDetail('diskspace')) && ($this->getUserDetail('diskspace') / 1024) != '-1')\n\t\t\t\t|| ($mysqls != 0 && (($this->getUserDetail('mysqls_used') + $mysqls - $result['mysqls']) > $this->getUserDetail('mysqls')) && $this->getUserDetail('mysqls') != '-1')\n\t\t\t\t|| ($emails != 0 && (($this->getUserDetail('emails_used') + $emails - $result['emails']) > $this->getUserDetail('emails')) && $this->getUserDetail('emails') != '-1')\n\t\t\t\t|| ($email_accounts != 0 && (($this->getUserDetail('email_accounts_used') + $email_accounts - $result['email_accounts']) > $this->getUserDetail('email_accounts')) && $this->getUserDetail('email_accounts') != '-1')\n\t\t\t\t|| ($email_forwarders != 0 && (($this->getUserDetail('email_forwarders_used') + $email_forwarders - $result['email_forwarders']) > $this->getUserDetail('email_forwarders')) && $this->getUserDetail('email_forwarders') != '-1')\n\t\t\t\t|| ($email_quota != 0 && (($this->getUserDetail('email_quota_used') + $email_quota - $result['email_quota']) > $this->getUserDetail('email_quota')) && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1')\n\t\t\t\t|| ($ftps != 0 && (($this->getUserDetail('ftps_used') + $ftps - $result['ftps']) > $this->getUserDetail('ftps')) && $this->getUserDetail('ftps') != '-1')\n\t\t\t\t|| ($subdomains != 0 && (($this->getUserDetail('subdomains_used') + $subdomains - $result['subdomains']) > $this->getUserDetail('subdomains')) && $this->getUserDetail('subdomains') != '-1')\n\t\t\t\t|| (($diskspace / 1024) == '-1' && ($this->getUserDetail('diskspace') / 1024) != '-1')\n\t\t\t\t|| ($mysqls == '-1' && $this->getUserDetail('mysqls') != '-1')\n\t\t\t\t|| ($emails == '-1' && $this->getUserDetail('emails') != '-1')\n\t\t\t\t|| ($email_accounts == '-1' && $this->getUserDetail('email_accounts') != '-1')\n\t\t\t\t|| ($email_forwarders == '-1' && $this->getUserDetail('email_forwarders') != '-1')\n\t\t\t\t|| ($email_quota == '-1' && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1')\n\t\t\t\t|| ($ftps == '-1' && $this->getUserDetail('ftps') != '-1')\n\t\t\t\t|| ($subdomains == '-1' && $this->getUserDetail('subdomains') != '-1')\n\t\t\t) {\n\t\t\t\tResponse::standardError('youcantallocatemorethanyouhave', '', true);\n\t\t\t}\n\n\t\t\t// validate allowed_mysqls whether the customer has databases on a removed, now disallowed db-server and abort if true\n\t\t\t$former_allowed_mysqlserver = json_decode($result['allowed_mysqlserver'], true);\n\t\t\tif ($allowed_mysqlserver != $former_allowed_mysqlserver && !empty($former_allowed_mysqlserver)) {\n\t\t\t\t$to_remove_mysqlserver = array_diff($former_allowed_mysqlserver, $allowed_mysqlserver);\n\t\t\t\tif (count($to_remove_mysqlserver) > 0) {\n\t\t\t\t\tforeach ($to_remove_mysqlserver as $mysqlserver_check) {\n\t\t\t\t\t\t$result_ms = $this->apiCall('MysqlServer.databasesOnServer', [\n\t\t\t\t\t\t\t'mysql_server' => $mysqlserver_check,\n\t\t\t\t\t\t\t'customerid' => $id\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tif ($result_ms['count'] > 0) {\n\t\t\t\t\t\t\tResponse::standardError('mysqlserverstillhasdbs', '', true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email == '') {\n\t\t\t\tResponse::standardError([\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'customer.email'\n\t\t\t\t], '', true);\n\t\t\t} elseif (!Validate::validateEmail($email)) {\n\t\t\t\tResponse::standardError('emailiswrong', $email, true);\n\t\t\t}\n\t\t}\n\n\t\tif ($password != '') {\n\t\t\t$password = Crypt::validatePassword($password, true);\n\t\t\t$password = Crypt::makeCryptPassword($password);\n\t\t} else {\n\t\t\t$password = $result['password'];\n\t\t}\n\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($createstdsubdomain != '1' || $deactivated) {\n\t\t\t\t$createstdsubdomain = '0';\n\t\t\t}\n\n\t\t\tif ($createstdsubdomain == '1' && $result['standardsubdomain'] == '0') {\n\t\t\t\tif (Settings::Get('system.stdsubdomain') !== null && Settings::Get('system.stdsubdomain') != '') {\n\t\t\t\t\t$_stdsubdomain = $result['loginname'] . '.' . Settings::Get('system.stdsubdomain');\n\t\t\t\t} else {\n\t\t\t\t\t$_stdsubdomain = $result['loginname'] . '.' . Settings::Get('system.hostname');\n\t\t\t\t}\n\n\t\t\t\t$ins_data = [\n\t\t\t\t\t'domain' => $_stdsubdomain,\n\t\t\t\t\t'customerid' => $result['customerid'],\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t'docroot' => $result['documentroot'],\n\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t'openbasedir' => '1'\n\t\t\t\t];\n\t\t\t\t$domainid = -1;\n\t\t\t\ttry {\n\t\t\t\t\t$std_domain = $this->apiCall('Domains.add', $ins_data);\n\t\t\t\t\t$domainid = $std_domain['id'];\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to add standard-subdomain: \" . $e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tif ($domainid > 0) {\n\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `standardsubdomain` = :domainid WHERE `customerid` = :customerid\n\t\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t\t'domainid' => $domainid,\n\t\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t\t], true, true);\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added standardsubdomain for user '\" . $result['loginname'] . \"'\");\n\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($createstdsubdomain == '0' && $result['standardsubdomain'] != '0') {\n\t\t\t\ttry {\n\t\t\t\t\t$std_domain = $this->apiCall('Domains.delete', [\n\t\t\t\t\t\t'id' => $result['standardsubdomain'],\n\t\t\t\t\t\t'is_stdsubdomain' => 1\n\t\t\t\t\t]);\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to delete standard-subdomain: \" . $e->getMessage());\n\t\t\t\t}\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically deleted standardsubdomain for user '\" . $result['loginname'] . \"'\");\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\tif ($phpenabled != $result['phpenabled'] || $perlenabled != $result['perlenabled'] || $email != $result['email']) {\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\t// activate/deactivate customer services\n\t\t\tif ($deactivated != $result['deactivated']) {\n\t\t\t\t$yesno = ($deactivated ? 'N' : 'Y');\n\t\t\t\t$pop3 = ($deactivated ? '0' : (int)$result['pop3']);\n\t\t\t\t$imap = ($deactivated ? '0' : (int)$result['imap']);\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_MAIL_USERS . \"` SET `postfix`= :yesno, `pop3` = :pop3, `imap` = :imap WHERE `customerid` = :customerid\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'yesno' => $yesno,\n\t\t\t\t\t'pop3' => $pop3,\n\t\t\t\t\t'imap' => $imap,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_FTP_USERS . \"` SET `login_enabled` = :yesno WHERE `customerid` = :customerid\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'yesno' => $yesno,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET `deactivated`= :deactivated WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\n\t\t\t\t// Retrieve customer's databases\n\t\t\t\t$databases_stmt = Database::prepare(\"SELECT * FROM \" . TABLE_PANEL_DATABASES . \" WHERE customerid = :customerid ORDER BY `dbserver`\");\n\t\t\t\tDatabase::pexecute($databases_stmt, [\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\n\t\t\t\tDatabase::needRoot(true);\n\t\t\t\t$last_dbserver = 0;\n\n\t\t\t\t$dbm = new DbManager($this->logger());\n\n\t\t\t\t// For each of them\n\t\t\t\t$priv_changed = false;\n\t\t\t\twhile ($row_database = $databases_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif ($last_dbserver != $row_database['dbserver']) {\n\t\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t\t\tDatabase::needRoot(true, $row_database['dbserver']);\n\t\t\t\t\t\t$last_dbserver = $row_database['dbserver'];\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach (array_unique(explode(',', Settings::Get('system.mysql_access_host'))) as $mysql_access_host) {\n\t\t\t\t\t\t$mysql_access_host = trim($mysql_access_host);\n\n\t\t\t\t\t\t// Prevent access, if deactivated\n\t\t\t\t\t\tif ($deactivated) {\n\t\t\t\t\t\t\t// failsafe if user has been deleted manually (requires MySQL 4.1.2+)\n\t\t\t\t\t\t\t$dbm->getManager()->disableUser($row_database['databasename'], $mysql_access_host);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Otherwise grant access\n\t\t\t\t\t\t\t$dbm->getManager()->enableUser($row_database['databasename'], $mysql_access_host);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$priv_changed = true;\n\t\t\t\t}\n\n\t\t\t\t// At last flush the new privileges\n\t\t\t\tif ($priv_changed) {\n\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t}\n\t\t\t\tDatabase::needRoot(false);\n\n\t\t\t\t// reactivate/deactivate api-keys\n\t\t\t\t$valid_until = $deactivated ? 0 : -1;\n\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_API_KEYS . \"` SET `valid_until` = :vu WHERE `customerid` = :id\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'vu' => $valid_until\n\t\t\t\t], true, true);\n\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] \" . ($deactivated ? 'deactivated' : 'reactivated') . \" user '\" . $result['loginname'] . \"'\");\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\t// Disable or enable POP3 Login for customers Mail Accounts\n\t\t\tif ($email_pop3 != $result['pop3']) {\n\t\t\t\t$upd_stmt = Database::prepare(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `pop3` = :pop3 WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Disable or enable IMAP Login for customers Mail Accounts\n\t\t\tif ($email_imap != $result['imap']) {\n\t\t\t\t$upd_stmt = Database::prepare(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `imap` = :imap WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'imap' => $email_imap,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t$upd_data = [\n\t\t\t'customerid' => $id,\n\t\t\t'passwd' => $password,\n\t\t\t'lang' => $def_language,\n\t\t\t'theme' => $theme\n\t\t];\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$admin_upd_data = [\n\t\t\t\t'name' => $name,\n\t\t\t\t'firstname' => $firstname,\n\t\t\t\t'gender' => $gender,\n\t\t\t\t'company' => $company,\n\t\t\t\t'street' => $street,\n\t\t\t\t'zipcode' => $zipcode,\n\t\t\t\t'city' => $city,\n\t\t\t\t'phone' => $phone,\n\t\t\t\t'fax' => $fax,\n\t\t\t\t'email' => $email,\n\t\t\t\t'customerno' => $customernumber,\n\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t'traffic' => $traffic,\n\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t'emails' => $emails,\n\t\t\t\t'email_accounts' => $email_accounts,\n\t\t\t\t'email_forwarders' => $email_forwarders,\n\t\t\t\t'email_quota' => $email_quota,\n\t\t\t\t'ftps' => $ftps,\n\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t'allowed_phpconfigs' => empty($allowed_phpconfigs) ? \"\" : json_encode($allowed_phpconfigs),\n\t\t\t\t'imap' => $email_imap,\n\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t'perlenabled' => $perlenabled,\n\t\t\t\t'dnsenabled' => $dnsenabled,\n\t\t\t\t'logviewenabled' => $logviewenabled,\n\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t'allowed_mysqlserver' => empty($allowed_mysqlserver) ? \"\" : json_encode($allowed_mysqlserver)\n\t\t\t];\n\t\t\t$upd_data += $admin_upd_data;\n\t\t}\n\n\t\t$upd_query = \"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`def_language` = :lang,\n\t\t\t\t`password` = :passwd,\n\t\t\t\t`theme` = :theme\";\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$admin_upd_query = \",\n\t\t\t\t`name` = :name,\n\t\t\t\t`firstname` = :firstname,\n\t\t\t\t`gender` = :gender,\n\t\t\t\t`company` = :company,\n\t\t\t\t`street` = :street,\n\t\t\t\t`zipcode` = :zipcode,\n\t\t\t\t`city` = :city,\n\t\t\t\t`phone` = :phone,\n\t\t\t\t`fax` = :fax,\n\t\t\t\t`email` = :email,\n\t\t\t\t`customernumber` = :customerno,\n\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t`traffic` = :traffic,\n\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t`emails` = :emails,\n\t\t\t\t`email_accounts` = :email_accounts,\n\t\t\t\t`email_forwarders` = :email_forwarders,\n\t\t\t\t`ftps` = :ftps,\n\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t`deactivated` = :deactivated,\n\t\t\t\t`phpenabled` = :phpenabled,\n\t\t\t\t`allowed_phpconfigs` = :allowed_phpconfigs,\n\t\t\t\t`email_quota` = :email_quota,\n\t\t\t\t`imap` = :imap,\n\t\t\t\t`pop3` = :pop3,\n\t\t\t\t`perlenabled` = :perlenabled,\n\t\t\t\t`dnsenabled` = :dnsenabled,\n\t\t\t\t`logviewenabled` = :logviewenabled,\n\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t`allowed_mysqlserver` = :allowed_mysqlserver\";\n\t\t\t$upd_query .= $admin_upd_query;\n\t\t}\n\t\t$upd_query .= \" WHERE `customerid` = :customerid\";\n\t\t$upd_stmt = Database::prepare($upd_query);\n\t\tDatabase::pexecute($upd_stmt, $upd_data);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\tCronjob::inserttask(TaskId::CREATE_QUOTA);\n\n\t\t\t$admin_update_query = \"UPDATE `\" . TABLE_PANEL_ADMINS . \"` SET `customers_used` = `customers_used` \";\n\n\t\t\tif ($mysqls != '-1' || $result['mysqls'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `mysqls_used` = `mysqls_used` \";\n\n\t\t\t\tif ($mysqls != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$mysqls . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['mysqls'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['mysqls'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($emails != '-1' || $result['emails'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `emails_used` = `emails_used` \";\n\n\t\t\t\tif ($emails != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$emails . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['emails'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['emails'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_accounts != '-1' || $result['email_accounts'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_accounts_used` = `email_accounts_used` \";\n\n\t\t\t\tif ($email_accounts != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$email_accounts . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_accounts'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['email_accounts'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_forwarders != '-1' || $result['email_forwarders'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_forwarders_used` = `email_forwarders_used` \";\n\n\t\t\t\tif ($email_forwarders != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$email_forwarders . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_forwarders'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['email_forwarders'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_quota != '-1' || $result['email_quota'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_quota_used` = `email_quota_used` \";\n\n\t\t\t\tif ($email_quota != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$email_quota . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_quota'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['email_quota'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($subdomains != '-1' || $result['subdomains'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `subdomains_used` = `subdomains_used` \";\n\n\t\t\t\tif ($subdomains != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$subdomains . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['subdomains'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['subdomains'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($ftps != '-1' || $result['ftps'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `ftps_used` = `ftps_used` \";\n\n\t\t\t\tif ($ftps != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$ftps . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['ftps'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['ftps'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (($diskspace / 1024) != '-1' || ($result['diskspace'] / 1024) != '-1') {\n\t\t\t\t$admin_update_query .= \", `diskspace_used` = `diskspace_used` \";\n\n\t\t\t\tif (($diskspace / 1024) != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$diskspace . \" \";\n\t\t\t\t}\n\t\t\t\tif (($result['diskspace'] / 1024) != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['diskspace'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$admin_update_query .= \" WHERE `adminid` = '\" . (int)$result['adminid'] . \"'\";\n\t\t\tDatabase::query($admin_update_query);\n\t\t}\n\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_NOTICE, \"[API] edited user '\" . $result['loginname'] . \"'\");\n\n\t\t/*\n\t\t * move customer to another admin/reseller; #1166\n\t\t */\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($move_to_admin > 0 && $move_to_admin != $result['adminid']) {\n\t\t\t\t$move_result = $this->apiCall('Customers.move', [\n\t\t\t\t\t'id' => $result['customerid'],\n\t\t\t\t\t'adminid' => $move_to_admin\n\t\t\t\t]);\n\t\t\t\tif ($move_result != true) {\n\t\t\t\t\tResponse::standardError('moveofcustomerfailed', $move_result, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t'id' => $result['customerid']\n\t\t]);\n\t\treturn $this->response($result);\n\t}\n\n\t/**\n\t * delete a customer entry by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the customer-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t * @param bool $delete_userfiles\n\t *            optional, default false\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\t\t\t$delete_userfiles = $this->getParam('delete_userfiles', true, 0);\n\n\t\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['customerid'];\n\n\t\t\t$databases_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DATABASES . \"`\n\t\t\t\tWHERE `customerid` = :id ORDER BY `dbserver`\n\t\t\t\");\n\t\t\tDatabase::pexecute($databases_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t]);\n\t\t\tDatabase::needRoot(true);\n\t\t\t$last_dbserver = 0;\n\n\t\t\t$dbm = new DbManager($this->logger());\n\n\t\t\t$priv_changed = false;\n\t\t\twhile ($row_database = $databases_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($last_dbserver != $row_database['dbserver']) {\n\t\t\t\t\tDatabase::needRoot(true, $row_database['dbserver']);\n\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t\t$last_dbserver = $row_database['dbserver'];\n\t\t\t\t}\n\t\t\t\t$dbm->getManager()->deleteDatabase($row_database['databasename']);\n\t\t\t\t$priv_changed = true;\n\t\t\t}\n\t\t\tif ($priv_changed) {\n\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t}\n\t\t\tDatabase::needRoot(false);\n\n\t\t\t// delete customer itself\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete customer databases\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DATABASES . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// first gather all domain-id's to clean up panel_domaintoip, dns-entries and certificates accordingly\n\t\t\t$did_stmt = Database::prepare(\"SELECT `id`, `domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($did_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\twhile ($row = $did_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t// remove domain->ip connection\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_domain` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t], true, true);\n\t\t\t\t// remove domain->dns entries\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_DOMAIN_DNS . \"` WHERE `domain_id` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t], true, true);\n\t\t\t\t// remove domain->certificates entries\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DOMAIN_SSL_SETTINGS . \"` WHERE `domainid` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t], true, true);\n\t\t\t\t// remove domains DNS from powerDNS if used, #581\n\t\t\t\tCronjob::inserttask(TaskId::DELETE_DOMAIN_PDNS, $row['domain']);\n\t\t\t\t// remove domain from acme.sh / lets encrypt if used\n\t\t\t\tCronjob::inserttask(TaskId::DELETE_DOMAIN_SSL, $row['domain']);\n\t\t\t}\n\t\t\t// remove customer domains\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\t$domains_deleted = $stmt->rowCount();\n\n\t\t\t// delete htpasswds\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_HTPASSWDS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete htaccess options\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_HTACCESS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete traffic information\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_TRAFFIC . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// remove diskspace analysis\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DISKSPACE . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete mail-accounts\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_MAIL_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete mail-addresses\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_MAIL_VIRTUAL . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// gather ftp-user names\n\t\t\t$result2_stmt = Database::prepare(\"SELECT `username` FROM `\" . TABLE_FTP_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($result2_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\twhile ($row = $result2_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t// delete ftp-quotatallies by username\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_QUOTATALLIES . \"` WHERE `name` = :name\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'name' => $row['username']\n\t\t\t\t], true, true);\n\t\t\t}\n\n\t\t\t// remove ftp-group\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_GROUPS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// remove ftp-users\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// remove api-keys\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_API_KEYS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// Delete all waiting \"create user\" -tasks for this user, #276\n\t\t\t// Note: the WHERE selects part of a serialized array, but it should be safe this way\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TASKS . \"`\n\t\t\t\tWHERE `type` = '2' AND `data` LIKE :loginname\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'loginname' => \"%:{$result['loginname']};%\"\n\t\t\t], true, true);\n\n\t\t\t// update admin-resource-usage\n\t\t\tAdmins::decreaseUsage($result['adminid'], 'customers_used');\n\t\t\tAdmins::decreaseUsage($result['adminid'], 'domains_used', '', (int)($domains_deleted - $result['subdomains_used']));\n\n\t\t\tif ($result['mysqls'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'mysqls_used', '', (int)$result['mysqls']);\n\t\t\t}\n\n\t\t\tif ($result['emails'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'emails_used', '', (int)$result['emails']);\n\t\t\t}\n\n\t\t\tif ($result['email_accounts'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'email_accounts_used', '', (int)$result['email_accounts']);\n\t\t\t}\n\n\t\t\tif ($result['email_forwarders'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'email_forwarders_used', '', (int)$result['email_forwarders']);\n\t\t\t}\n\n\t\t\tif ($result['email_quota'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'email_quota_used', '', (int)$result['email_quota']);\n\t\t\t}\n\n\t\t\tif ($result['subdomains'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'subdomains_used', '', (int)$result['subdomains']);\n\t\t\t}\n\n\t\t\tif ($result['ftps'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'ftps_used', '', (int)$result['ftps']);\n\t\t\t}\n\n\t\t\tif (($result['diskspace'] / 1024) != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'diskspace_used', '', (int)$result['diskspace']);\n\t\t\t}\n\n\t\t\t// rebuild configs\n\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\n\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\tif ($delete_userfiles == 1) {\n\t\t\t\t// insert task to remove the customers files from the filesystem\n\t\t\t\tCronjob::inserttask(TaskId::DELETE_CUSTOMER_FILES, $result['loginname']);\n\t\t\t}\n\n\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\tCronjob::inserttask(TaskId::CREATE_QUOTA);\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * decrease resource-usage\n\t *\n\t * @param int $customerid\n\t * @param string $resource\n\t * @param string $extra\n\t *            optional, default empty\n\t * @param int $decrease_by\n\t *            optional, default 1\n\t */\n\tpublic static function decreaseUsage($customerid = 0, $resource = null, $extra = '', $decrease_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_CUSTOMERS, 'customerid', $customerid, '-', $resource, $extra, $decrease_by);\n\t}\n\n\t/**\n\t * unlock a locked customer by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the customer-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function unlock()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['customerid'];\n\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`loginfail_count` = '0'\n\t\t\t\tWHERE `customerid`= :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\t// set the new value for result-array\n\t\t\t$result['loginfail_count'] = 0;\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] unlocked customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * Function to move a given customer to a given admin/reseller\n\t * and update all its references accordingly\n\t *\n\t * @param int $id\n\t *            optional, the customer-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t * @param int $adminid\n\t *            target-admin-id\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function move()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$adminid = $this->getParam('adminid');\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$c_result = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $c_result['customerid'];\n\n\t\t\t// check if target-admin is the current admin\n\t\t\tif ($adminid == $c_result['adminid']) {\n\t\t\t\tthrow new Exception(\"Cannot move customer to the same admin/reseller as he currently is assigned to\", 406);\n\t\t\t}\n\n\t\t\t// get target admin\n\t\t\t$a_result = $this->apiCall('Admins.get', [\n\t\t\t\t'id' => $adminid\n\t\t\t]);\n\n\t\t\t// Update customer entry\n\t\t\t$updCustomer_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `adminid` = :adminid WHERE `customerid` = :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($updCustomer_stmt, [\n\t\t\t\t'adminid' => $adminid,\n\t\t\t\t'cid' => $id\n\t\t\t], true, true);\n\n\t\t\t// Update customer-domains\n\t\t\t$updDomains_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET `adminid` = :adminid WHERE `customerid` = :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($updDomains_stmt, [\n\t\t\t\t'adminid' => $adminid,\n\t\t\t\t'cid' => $id\n\t\t\t], true, true);\n\n\t\t\t// now, recalculate the resource-usage for the old and the new admin\n\t\t\tUser::updateCounters(false);\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] moved user '\" . $c_result['loginname'] . \"' from admin/reseller '\" . $c_result['adminname'] . \" to admin/reseller '\" . $a_result['loginname'] . \"'\");\n\n\t\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $c_result['customerid']\n\t\t\t]);\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n}\n", "export default function () {\n\t$(function () {\n\t\t/*\n\t\t * validation\n\t\t */\n\t\t$('#customer_add,#customer_edit').each(function () {\n\t\t\t$(this).validate({\n\t\t\t\trules: {\n\t\t\t\t\t'name': {\n\t\t\t\t\t\trequired: function () {\n\t\t\t\t\t\t\treturn $('#company').val().length === 0 || $('#firstname').val().length > 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'firstname': {\n\t\t\t\t\t\trequired: function () {\n\t\t\t\t\t\t\treturn $('#company').val().length === 0 || $('#name').val().length > 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'company': {\n\t\t\t\t\t\trequired: function () {\n\t\t\t\t\t\t\treturn $('#name').val().length === 0\n\t\t\t\t\t\t\t\t&& $('#firstname').val().length === 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t\t$('#domain_add,#domain_edit').each(function () {\n\t\t\t$(this).validate({\n\t\t\t\trules: {\n\t\t\t\t\t'ipandport[]': {\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tminlength: 1\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terrorPlacement: function (error, element) {\n\t\t\t\t\t$(error).prependTo($(element).parent().parent());\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Database\\DbManager;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Idna\\IdnaWrapper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass Customers extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * lists all customer entries\n\t *\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t * @param bool $show_usages\n\t *            optional, default false\n\t *\n\t * @access admin\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$show_usages = $this->getBoolParam('show_usages', true, false);\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] list customers\");\n\t\t\t$query_fields = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `c`.*, `a`.`loginname` AS `adminname`\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` `c`, `\" . TABLE_PANEL_ADMINS . \"` `a`\n\t\t\t\tWHERE \" . ($this->getUserDetail('customers_see_all') ? '' : \" `c`.`adminid` = :adminid AND \") . \"\n\t\t\t\t`c`.`adminid` = `a`.`adminid`\" . $this->getSearchWhere($query_fields, true) . $this->getOrderBy() . $this->getLimit());\n\t\t\t$params = [];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params = [\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid')\n\t\t\t\t];\n\t\t\t}\n\t\t\t$params = array_merge($params, $query_fields);\n\t\t\tDatabase::pexecute($result_stmt, $params, true, true);\n\t\t\t$result = [];\n\n\t\t\t$domains_stmt = null;\n\t\t\t$usages_stmt = null;\n\t\t\tif ($show_usages) {\n\t\t\t\t$domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(`id`) AS `domains`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `id`<> :stdd\n\t\t\t\t\");\n\t\t\t\t$usages_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT webspace, mail, mysql FROM `\" . TABLE_PANEL_DISKSPACE . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tORDER BY `stamp` DESC LIMIT 1\n\t\t\t\t\");\n\t\t\t}\n\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($show_usages) {\n\t\t\t\t\t// get number of domains\n\t\t\t\t\t$domains = Database::pexecute_first($domains_stmt, [\n\t\t\t\t\t\t'cid' => $row['customerid'],\n\t\t\t\t\t\t'stdd' => $row['standardsubdomain']\n\t\t\t\t\t]);\n\t\t\t\t\t$row['domains'] = intval($domains['domains']);\n\t\t\t\t\t// get disk-space usages for web, mysql and mail\n\t\t\t\t\t$usages = Database::pexecute_first($usages_stmt, [\n\t\t\t\t\t\t'cid' => $row['customerid']\n\t\t\t\t\t]);\n\t\t\t\t\tif ($usages) {\n\t\t\t\t\t\t$row['webspace_used'] = $usages['webspace'];\n\t\t\t\t\t\t$row['mailspace_used'] = $usages['mail'];\n\t\t\t\t\t\t$row['dbspace_used'] = $usages['mysql'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$row['webspace_used'] = 0;\n\t\t\t\t\t\t$row['mailspace_used'] = 0;\n\t\t\t\t\t\t$row['dbspace_used'] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response([\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t]);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of customers for the given admin\n\t *\n\t * @access admin\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_customers\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\tWHERE \" . ($this->getUserDetail('customers_see_all') ? \"1\" : \" `adminid` = :adminid \"));\n\t\t\t$params = [];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params = [\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid')\n\t\t\t\t];\n\t\t\t}\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response($result['num_customers']);\n\t\t\t}\n\t\t\treturn $this->response(0);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * create a new customer with default ftp-user and standard-subdomain (if wanted)\n\t *\n\t * @param string $email\n\t * @param string $name\n\t *                             optional if company is set, else required\n\t * @param string $firstname\n\t *                             optional if company is set, else required\n\t * @param string $company\n\t *                             optional but required if name/firstname empty\n\t * @param string $street\n\t *                             optional\n\t * @param string $zipcode\n\t *                             optional\n\t * @param string $city\n\t *                             optional\n\t * @param string $phone\n\t *                             optional\n\t * @param string $fax\n\t *                             optional\n\t * @param int $customernumber\n\t *                             optional\n\t * @param string $def_language ,\n\t *                             optional, default is system-default language\n\t * @param bool $api_allowed\n\t *                             optional, default is true if system setting api.enabled is true, else false\n\t * @param int $gender\n\t *                             optional, 0 = no-gender, 1 = male, 2 = female\n\t * @param string $custom_notes\n\t *                             optional notes\n\t * @param bool $custom_notes_show\n\t *                             optional, whether to show the content of custom_notes to the customer, default 0\n\t *                             (false)\n\t * @param string $new_loginname\n\t *                             optional, if empty generated automatically using customer-prefix and increasing\n\t *                             number\n\t * @param string $new_customer_password\n\t *                             optional, if empty generated automatically and send to the customer's email if\n\t *                             $sendpassword is 1\n\t * @param bool $sendpassword\n\t *                             optional, whether to send the password to the customer after creation, default 0\n\t *                             (false)\n\t * @param int $diskspace\n\t *                             optional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *                             optional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *                             optional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *                             optional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *                             optional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *                             optional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *                             optional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *                             optional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *                             optional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *                             optional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *                             optional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *                             optional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *                             optional size of email-quota available for customer in MB, default is system-setting\n\t *                             mail_quota\n\t * @param bool $email_quota_ul\n\t *                             optional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *                             optional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *                             optional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *                             optional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *                             optional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *                             optional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *                             optional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $createstdsubdomain\n\t *                             optional, whether to create a standard-subdomain ([loginname].froxlor-hostname.tld),\n\t *                             default [system.createstdsubdom_default]\n\t * @param bool $phpenabled\n\t *                             optional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *                             optional, array of IDs of php-config that the customer is allowed to use, default\n\t *                             empty (none)\n\t * @param bool $perlenabled\n\t *                             optional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *                             optional, whether to allow usage of the DNS editor (requires activated nameserver in\n\t *                             settings), default 0 (false)\n\t * @param bool $logviewenabled\n\t *                             optional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t * @param bool $store_defaultindex\n\t *                             optional, whether to store the default index file to customers homedir\n\t * @param int $hosting_plan_id\n\t *                             optional, specify a hosting-plan to set certain resource-values from the plan\n\t *                             instead of specifying them\n\t * @param array $allowed_mysqlserver\n\t *        \t                   optional, array of IDs of defined mysql-servers the customer is allowed to use,\n\t *                             default is to allow the default dbserver (id=0)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($this->getUserDetail('customers_used') < $this->getUserDetail('customers') || $this->getUserDetail('customers') == '-1') {\n\t\t\t\t// required parameters\n\t\t\t\t$email = $this->getParam('email');\n\n\t\t\t\t// parameters\n\t\t\t\t$name = $this->getParam('name', true, '');\n\t\t\t\t$firstname = $this->getParam('firstname', true, '');\n\t\t\t\t$company_required = (!empty($name) && empty($firstname)) || (empty($name) && !empty($firstname)) || (empty($name) && empty($firstname));\n\t\t\t\t$company = $this->getParam('company', !$company_required, '');\n\t\t\t\t$street = $this->getParam('street', true, '');\n\t\t\t\t$zipcode = $this->getParam('zipcode', true, '');\n\t\t\t\t$city = $this->getParam('city', true, '');\n\t\t\t\t$phone = $this->getParam('phone', true, '');\n\t\t\t\t$fax = $this->getParam('fax', true, '');\n\t\t\t\t$customernumber = $this->getParam('customernumber', true, '');\n\t\t\t\t$def_language = $this->getParam('def_language', true, Settings::Get('panel.standardlanguage'));\n\t\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, (Settings::Get('api.enabled') && Settings::Get('api.customer_default')));\n\t\t\t\t$gender = (int)$this->getParam('gender', true, 0);\n\t\t\t\t$custom_notes = $this->getParam('custom_notes', true, '');\n\t\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, 0);\n\t\t\t\t$createstdsubdomain = $this->getBoolParam('createstdsubdomain', true, Settings::Get('system.createstdsubdom_default'));\n\t\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t\t$sendpassword = $this->getBoolParam('sendpassword', true, 0);\n\t\t\t\t$store_defaultindex = $this->getBoolParam('store_defaultindex', true, 0);\n\t\t\t\t$loginname = $this->getParam('new_loginname', true, '');\n\n\t\t\t\t// hosting-plan values\n\t\t\t\t$hosting_plan_id = $this->getParam('hosting_plan_id', true, 0);\n\t\t\t\tif ($hosting_plan_id > 0) {\n\t\t\t\t\t$hp_result = $this->apiCall('HostingPlans.get', [\n\t\t\t\t\t\t'id' => $hosting_plan_id\n\t\t\t\t\t]);\n\t\t\t\t\t$hp_result['value'] = json_decode($hp_result['value'], true);\n\t\t\t\t\tforeach ($hp_result['value'] as $index => $value) {\n\t\t\t\t\t\t$hp_result[$index] = $value;\n\t\t\t\t\t}\n\t\t\t\t\t$diskspace = $hp_result['diskspace'] ?? 0;\n\t\t\t\t\t$traffic = $hp_result['traffic'] ?? 0;\n\t\t\t\t\t$subdomains = $hp_result['subdomains'] ?? 0;\n\t\t\t\t\t$emails = $hp_result['emails'] ?? 0;\n\t\t\t\t\t$email_accounts = $hp_result['email_accounts'] ?? 0;\n\t\t\t\t\t$email_forwarders = $hp_result['email_forwarders'] ?? 0;\n\t\t\t\t\t$email_quota = $hp_result['email_quota'] ?? Settings::Get('system.mail_quota');\n\t\t\t\t\t$email_imap = $hp_result['email_imap'] ?? 0;\n\t\t\t\t\t$email_pop3 = $hp_result['email_pop3'] ?? 0;\n\t\t\t\t\t$ftps = $hp_result['ftps'] ?? 0;\n\t\t\t\t\t$mysqls = $hp_result['mysqls'] ?? 0;\n\t\t\t\t\t$phpenabled = $hp_result['phpenabled'] ?? 0;\n\t\t\t\t\t$p_allowed_phpconfigs = $hp_result['allowed_phpconfigs'] ?? 0;\n\t\t\t\t\t$perlenabled = $hp_result['perlenabled'] ?? 0;\n\t\t\t\t\t$dnsenabled = $hp_result['dnsenabled'] ?? 0;\n\t\t\t\t\t$logviewenabled = $hp_result['logviewenabled'] ?? 0;\n\t\t\t\t} else {\n\t\t\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, Settings::Get('system.mail_quota'));\n\t\t\t\t\t$email_imap = $this->getBoolParam('email_imap', true, 0);\n\t\t\t\t\t$email_pop3 = $this->getBoolParam('email_pop3', true, 0);\n\t\t\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\t\t\t\t\t$phpenabled = $this->getBoolParam('phpenabled', true, 0);\n\t\t\t\t\t$p_allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, []);\n\t\t\t\t\t$perlenabled = $this->getBoolParam('perlenabled', true, 0);\n\t\t\t\t\t$dnsenabled = $this->getBoolParam('dnsenabled', true, 0);\n\t\t\t\t\t$logviewenabled = $this->getBoolParam('logviewenabled', true, 0);\n\t\t\t\t}\n\n\t\t\t\tif ($mysqls == -1 || $mysqls > 0) {\n\t\t\t\t\t$p_allowed_mysqlserver = $this->getParam('allowed_mysqlserver', true, [0]);\n\t\t\t\t} else {\n\t\t\t\t\t// mysql not allowed, so no mysql available for customer\n\t\t\t\t\t$p_allowed_mysqlserver = [];\n\t\t\t\t}\n\n\t\t\t\t// validation\n\t\t\t\t$name = Validate::validate($name, 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$firstname = Validate::validate($firstname, 'first name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$company = Validate::validate($company, 'company', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$street = Validate::validate($street, 'street', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$zipcode = Validate::validate($zipcode, 'zipcode', '/^[0-9 \\-A-Z]*$/', '', [], true);\n\t\t\t\t$city = Validate::validate($city, 'city', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$phone = Validate::validate($phone, 'phone', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', [], true);\n\t\t\t\t$fax = Validate::validate($fax, 'fax', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', [], true);\n\t\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t\t$email = $idna_convert->encode(Validate::validate($email, 'email', '', '', [], true));\n\t\t\t\t$customernumber = Validate::validate($customernumber, 'customer number', '/^[A-Za-z0-9 \\-]*$/Di', '', [], true);\n\t\t\t\t$def_language = Validate::validate($def_language, 'default language', '', '', [], true);\n\t\t\t\t$custom_notes = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', Validate::REGEX_CONF_TEXT, '', [], true);\n\n\t\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t\t$email_quota = -1;\n\t\t\t\t}\n\n\t\t\t\t$password = Validate::validate($password, 'password', '', '', [], true);\n\t\t\t\t// only check if not empty,\n\t\t\t\t// cause empty == generate password automatically\n\t\t\t\tif ($password != '') {\n\t\t\t\t\t$password = Crypt::validatePassword($password, true);\n\t\t\t\t}\n\n\t\t\t\t// gender out of range? [0,2]\n\t\t\t\tif ($gender < 0 || $gender > 2) {\n\t\t\t\t\t$gender = 0;\n\t\t\t\t}\n\n\t\t\t\t$allowed_phpconfigs = [];\n\t\t\t\tif (!empty($p_allowed_phpconfigs) && is_array($p_allowed_phpconfigs)) {\n\t\t\t\t\tforeach ($p_allowed_phpconfigs as $allowed_phpconfig) {\n\t\t\t\t\t\t$allowed_phpconfig = intval($allowed_phpconfig);\n\t\t\t\t\t\t$allowed_phpconfigs[] = $allowed_phpconfig;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$allowed_phpconfigs = array_map('intval', $allowed_phpconfigs);\n\n\t\t\t\tif (empty($allowed_phpconfigs) && $phpenabled == 1) {\n\t\t\t\t\tResponse::standardError('customerphpenabledbutnoconfig', '', true);\n\t\t\t\t}\n\n\t\t\t\t$allowed_mysqlserver = array();\n\t\t\t\tif (! empty($p_allowed_mysqlserver) && is_array($p_allowed_mysqlserver)) {\n\t\t\t\t\tforeach ($p_allowed_mysqlserver as $allowed_ms) {\n\t\t\t\t\t\t$allowed_ms = intval($allowed_ms);\n\t\t\t\t\t\t$allowed_mysqlserver[] = $allowed_ms;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$allowed_mysqlserver = array_map('intval', $allowed_mysqlserver);\n\n\t\t\t\t$diskspace *= 1024;\n\t\t\t\t$traffic *= 1024 * 1024;\n\n\t\t\t\tif (\n\t\t\t\t\t($diskspace != 0 && (($this->getUserDetail('diskspace_used') + $diskspace) > $this->getUserDetail('diskspace')) && ($this->getUserDetail('diskspace') / 1024) != '-1')\n\t\t\t\t\t|| ($mysqls != 0 && (($this->getUserDetail('mysqls_used') + $mysqls) > $this->getUserDetail('mysqls')) && $this->getUserDetail('mysqls') != '-1')\n\t\t\t\t\t|| ($emails != 0 && (($this->getUserDetail('emails_used') + $emails) > $this->getUserDetail('emails')) && $this->getUserDetail('emails') != '-1')\n\t\t\t\t\t|| ($email_accounts != 0 && (($this->getUserDetail('email_accounts_used') + $email_accounts) > $this->getUserDetail('email_accounts')) && $this->getUserDetail('email_accounts') != '-1')\n\t\t\t\t\t|| ($email_forwarders != 0 && (($this->getUserDetail('email_forwarders_used') + $email_forwarders) > $this->getUserDetail('email_forwarders')) && $this->getUserDetail('email_forwarders') != '-1')\n\t\t\t\t\t|| ($email_quota != 0 && (($this->getUserDetail('email_quota_used') + $email_quota) > $this->getUserDetail('email_quota')) && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1')\n\t\t\t\t\t|| ($ftps != 0 && (($this->getUserDetail('ftps_used') + $ftps) > $this->getUserDetail('ftps')) && $this->getUserDetail('ftps') != '-1')\n\t\t\t\t\t|| ($subdomains != 0 && (($this->getUserDetail('subdomains_used') + $subdomains) > $this->getUserDetail('subdomains')) && $this->getUserDetail('subdomains') != '-1')\n\t\t\t\t\t|| (($diskspace / 1024) == '-1' && ($this->getUserDetail('diskspace') / 1024) != '-1')\n\t\t\t\t\t|| ($mysqls == '-1' && $this->getUserDetail('mysqls') != '-1')\n\t\t\t\t\t|| ($emails == '-1' && $this->getUserDetail('emails') != '-1')\n\t\t\t\t\t|| ($email_accounts == '-1' && $this->getUserDetail('email_accounts') != '-1')\n\t\t\t\t\t|| ($email_forwarders == '-1' && $this->getUserDetail('email_forwarders') != '-1')\n\t\t\t\t\t|| ($email_quota == '-1' && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1')\n\t\t\t\t\t|| ($ftps == '-1' && $this->getUserDetail('ftps') != '-1')\n\t\t\t\t\t|| ($subdomains == '-1' && $this->getUserDetail('subdomains') != '-1')\n\t\t\t\t) {\n\t\t\t\t\tResponse::standardError('youcantallocatemorethanyouhave', '', true);\n\t\t\t\t}\n\n\t\t\t\tif (!Validate::validateEmail($email)) {\n\t\t\t\t\tResponse::standardError('emailiswrong', $email, true);\n\t\t\t\t} else {\n\t\t\t\t\tif ($loginname != '') {\n\t\t\t\t\t\t$accountnumber = intval(Settings::Get('system.lastaccountnumber'));\n\t\t\t\t\t\t$loginname = Validate::validate($loginname, 'loginname', '/^[a-z][a-z0-9\\-_]+$/i', '', [], true);\n\n\t\t\t\t\t\t// Accounts which match systemaccounts are not allowed, filtering them\n\t\t\t\t\t\tif (preg_match('/^' . preg_quote(Settings::Get('customer.accountprefix'), '/') . '([0-9]+)/', $loginname)) {\n\t\t\t\t\t\t\tResponse::standardError('loginnameisusingprefix', Settings::Get('customer.accountprefix'), true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Additional filtering for Bug #962\n\t\t\t\t\t\tif (function_exists('posix_getpwnam') && !in_array(\"posix_getpwnam\", explode(\",\", ini_get('disable_functions'))) && posix_getpwnam($loginname)) {\n\t\t\t\t\t\t\tResponse::standardError('loginnameissystemaccount', $loginname, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$accountnumber = intval(Settings::Get('system.lastaccountnumber')) + 1;\n\t\t\t\t\t\t$loginname = Settings::Get('customer.accountprefix') . $accountnumber;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if the account already exists\n\t\t\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t\t\t$loginname_check_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname` = :login\n\t\t\t\t\t\");\n\t\t\t\t\t$loginname_check = Database::pexecute_first($loginname_check_stmt, [\n\t\t\t\t\t\t'login' => $loginname\n\t\t\t\t\t], true, true);\n\n\t\t\t\t\t// Check if an admin with the loginname already exists\n\t\t\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t\t\t$loginname_check_admin_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `loginname` = :login\n\t\t\t\t\t\");\n\t\t\t\t\t$loginname_check_admin = Database::pexecute_first($loginname_check_admin_stmt, [\n\t\t\t\t\t\t'login' => $loginname\n\t\t\t\t\t], true, true);\n\n\t\t\t\t\t$mysql_maxlen = Database::getSqlUsernameLength() - strlen(Settings::Get('customer.mysqlprefix'));\n\t\t\t\t\tif (($loginname_check && strtolower($loginname_check['loginname']) == strtolower($loginname)) || ($loginname_check_admin && strtolower($loginname_check_admin['loginname']) == strtolower($loginname))) {\n\t\t\t\t\t\tResponse::standardError('loginnameexists', $loginname, true);\n\t\t\t\t\t} elseif (!Validate::validateUsername($loginname, Settings::Get('panel.unix_names'), $mysql_maxlen)) {\n\t\t\t\t\t\tif (strlen($loginname) > $mysql_maxlen) {\n\t\t\t\t\t\t\tResponse::standardError('loginnameiswrong2', $mysql_maxlen, true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tResponse::standardError('loginnameiswrong', $loginname, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$guid = intval(Settings::Get('system.lastguid')) + 1;\n\t\t\t\t\t$documentroot = FileDir::makeCorrectDir(Settings::Get('system.documentroot_prefix') . '/' . $loginname);\n\n\t\t\t\t\tif (file_exists($documentroot)) {\n\t\t\t\t\t\tResponse::standardError('documentrootexists', $documentroot, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($password == '') {\n\t\t\t\t\t\t$password = Crypt::generatePassword();\n\t\t\t\t\t}\n\n\t\t\t\t\t$_theme = Settings::Get('panel.default_theme');\n\n\t\t\t\t\t$ins_data = [\n\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t'loginname' => $loginname,\n\t\t\t\t\t\t'passwd' => Crypt::makeCryptPassword($password),\n\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t'gender' => $gender,\n\t\t\t\t\t\t'company' => $company,\n\t\t\t\t\t\t'street' => $street,\n\t\t\t\t\t\t'zipcode' => $zipcode,\n\t\t\t\t\t\t'city' => $city,\n\t\t\t\t\t\t'phone' => $phone,\n\t\t\t\t\t\t'fax' => $fax,\n\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t'customerno' => $customernumber,\n\t\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t\t'docroot' => $documentroot,\n\t\t\t\t\t\t'guid' => $guid,\n\t\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'email_accounts' => $email_accounts,\n\t\t\t\t\t\t'email_forwarders' => $email_forwarders,\n\t\t\t\t\t\t'email_quota' => $email_quota,\n\t\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t\t'allowed_phpconfigs' => empty($allowed_phpconfigs) ? \"\" : json_encode($allowed_phpconfigs),\n\t\t\t\t\t\t'imap' => $email_imap,\n\t\t\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t\t\t'perlenabled' => $perlenabled,\n\t\t\t\t\t\t'dnsenabled' => $dnsenabled,\n\t\t\t\t\t\t'logviewenabled' => $logviewenabled,\n\t\t\t\t\t\t'theme' => $_theme,\n\t\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t\t\t'allowed_mysqlserver' => empty($allowed_mysqlserver) ? \"\" : json_encode($allowed_mysqlserver)\n\t\t\t\t\t];\n\n\t\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t\t\t`adminid` = :adminid,\n\t\t\t\t\t\t`loginname` = :loginname,\n\t\t\t\t\t\t`password` = :passwd,\n\t\t\t\t\t\t`name` = :name,\n\t\t\t\t\t\t`firstname` = :firstname,\n\t\t\t\t\t\t`gender` = :gender,\n\t\t\t\t\t\t`company` = :company,\n\t\t\t\t\t\t`street` = :street,\n\t\t\t\t\t\t`zipcode` = :zipcode,\n\t\t\t\t\t\t`city` = :city,\n\t\t\t\t\t\t`phone` = :phone,\n\t\t\t\t\t\t`fax` = :fax,\n\t\t\t\t\t\t`email` = :email,\n\t\t\t\t\t\t`customernumber` = :customerno,\n\t\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t\t`documentroot` = :docroot,\n\t\t\t\t\t\t`guid` = :guid,\n\t\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t\t`email_accounts` = :email_accounts,\n\t\t\t\t\t\t`email_forwarders` = :email_forwarders,\n\t\t\t\t\t\t`email_quota` = :email_quota,\n\t\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t\t`standardsubdomain` = '0',\n\t\t\t\t\t\t`phpenabled` = :phpenabled,\n\t\t\t\t\t\t`allowed_phpconfigs` = :allowed_phpconfigs,\n\t\t\t\t\t\t`imap` = :imap,\n\t\t\t\t\t\t`pop3` = :pop3,\n\t\t\t\t\t\t`perlenabled` = :perlenabled,\n\t\t\t\t\t\t`dnsenabled` = :dnsenabled,\n\t\t\t\t\t\t`logviewenabled` = :logviewenabled,\n\t\t\t\t\t\t`theme` = :theme,\n\t\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t\t\t`allowed_mysqlserver`= :allowed_mysqlserver\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t\t$customerid = Database::lastInsertId();\n\t\t\t\t\t$ins_data['customerid'] = $customerid;\n\n\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'customers_used');\n\n\t\t\t\t\t// update admin resource-usage\n\t\t\t\t\tif ($mysqls != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'mysqls_used', '', (int)$mysqls);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($emails != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'emails_used', '', (int)$emails);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_accounts != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_accounts_used', '', (int)$email_accounts);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_forwarders != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_forwarders_used', '', (int)$email_forwarders);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_quota != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_quota_used', '', (int)$email_quota);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($subdomains != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'subdomains_used', '', (int)$subdomains);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($ftps != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'ftps_used', '', (int)$ftps);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (($diskspace / 1024) != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'diskspace_used', '', (int)$diskspace);\n\t\t\t\t\t}\n\n\t\t\t\t\t// update last guid\n\t\t\t\t\tSettings::Set('system.lastguid', $guid, true);\n\n\t\t\t\t\tif ($accountnumber != intval(Settings::Get('system.lastaccountnumber'))) {\n\t\t\t\t\t\t// update last account number\n\t\t\t\t\t\tSettings::Set('system.lastaccountnumber', $accountnumber, true);\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] added customer '\" . $loginname . \"'\");\n\t\t\t\t\tunset($ins_data);\n\n\t\t\t\t\t// insert task to create homedir etc.\n\t\t\t\t\tCronjob::inserttask(TaskId::CREATE_HOME, $loginname, $guid, $guid, $store_defaultindex);\n\n\t\t\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\t\t\tCronjob::inserttask(TaskId::CREATE_QUOTA);\n\n\t\t\t\t\t// Add htpasswd for the stats-pages\n\t\t\t\t\t$htpasswdPassword = Crypt::makeCryptPassword($password, true);\n\n\t\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_HTPASSWDS . \"` SET\n\t\t\t\t\t\t`customerid` = :customerid,\n\t\t\t\t\t\t`username` = :username,\n\t\t\t\t\t\t`password` = :passwd,\n\t\t\t\t\t\t`path` = :path\n\t\t\t\t\t\");\n\t\t\t\t\t$ins_data = [\n\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t'username' => $loginname,\n\t\t\t\t\t\t'passwd' => $htpasswdPassword\n\t\t\t\t\t];\n\n\t\t\t\t\t$stats_folder = Settings::Get('system.traffictool');\n\t\t\t\t\t$ins_data['path'] = FileDir::makeCorrectDir($documentroot . '/' . $stats_folder . '/');\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added \" . $stats_folder . \" htpasswd for user '\" . $loginname . \"'\");\n\t\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\n\t\t\t\t\t// add default FTP-User\n\t\t\t\t\t// also, add froxlor-local user to ftp-group (if exists!) to\n\t\t\t\t\t// allow access to customer-directories from within the panel, which\n\t\t\t\t\t// is necessary when pathedit = Dropdown\n\t\t\t\t\t$local_users = [\n\t\t\t\t\t\tSettings::Get('system.httpuser')\n\t\t\t\t\t];\n\t\t\t\t\tif ((int)Settings::Get('system.mod_fcgid_ownvhost') == 1 || (int)Settings::Get('phpfpm.enabled_ownvhost') == 1) {\n\t\t\t\t\t\tif ((int)Settings::Get('system.mod_fcgid') == 1) {\n\t\t\t\t\t\t\t$local_user = Settings::Get('system.mod_fcgid_httpuser');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$local_user = Settings::Get('phpfpm.vhost_httpuser');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// check froxlor-local user membership in ftp-group\n\t\t\t\t\t\t// without this check addition may duplicate user in list if httpuser == local_user\n\t\t\t\t\t\tif (in_array($local_user, $local_users) == false) {\n\t\t\t\t\t\t\t$local_users[] = $local_user;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$this->apiCall('Ftps.add', [\n\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t'path' => '/',\n\t\t\t\t\t\t'ftp_password' => $password,\n\t\t\t\t\t\t'ftp_description' => \"Default\",\n\t\t\t\t\t\t'sendinfomail' => 0,\n\t\t\t\t\t\t'ftp_username' => $loginname,\n\t\t\t\t\t\t'additional_members' => $local_users,\n\t\t\t\t\t\t'is_defaultuser' => 1\n\t\t\t\t\t]);\n\n\t\t\t\t\t$_stdsubdomain = '';\n\t\t\t\t\tif ($createstdsubdomain == '1') {\n\t\t\t\t\t\tif (Settings::Get('system.stdsubdomain') !== null && Settings::Get('system.stdsubdomain') != '') {\n\t\t\t\t\t\t\t$_stdsubdomain = $loginname . '.' . Settings::Get('system.stdsubdomain');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$_stdsubdomain = $loginname . '.' . Settings::Get('system.hostname');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$ins_data = [\n\t\t\t\t\t\t\t'domain' => $_stdsubdomain,\n\t\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'docroot' => $documentroot,\n\t\t\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t\t\t'openbasedir' => '1'\n\t\t\t\t\t\t];\n\t\t\t\t\t\t$domainid = -1;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$std_domain = $this->apiCall('Domains.add', $ins_data);\n\t\t\t\t\t\t\t$domainid = $std_domain['id'];\n\t\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to add standard-subdomain: \" . $e->getMessage());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($domainid > 0) {\n\t\t\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `standardsubdomain` = :domainid WHERE `customerid` = :customerid\n\t\t\t\t\t\t\t\");\n\t\t\t\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t\t\t\t'domainid' => $domainid,\n\t\t\t\t\t\t\t\t'customerid' => $customerid\n\t\t\t\t\t\t\t], true, true);\n\t\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added standardsubdomain for user '\" . $loginname . \"'\");\n\t\t\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($sendpassword == '1') {\n\t\t\t\t\t\t$srv_hostname = Settings::Get('system.hostname');\n\t\t\t\t\t\tif (Settings::Get('system.froxlordirectlyviahostname') == '0') {\n\t\t\t\t\t\t\t$srv_hostname .= '/' . basename(\\Froxlor\\Froxlor::getInstallDir());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$srv_ip_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tSELECT ip, port FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\t\t\tWHERE `id` = :defaultip\n\t\t\t\t\t\t\");\n\t\t\t\t\t\t$default_ips = Settings::Get('system.defaultip');\n\t\t\t\t\t\t$default_ips = explode(',', $default_ips);\n\t\t\t\t\t\t$srv_ip = Database::pexecute_first($srv_ip_stmt, [\n\t\t\t\t\t\t\t'defaultip' => reset($default_ips)\n\t\t\t\t\t\t], true, true);\n\n\t\t\t\t\t\t$replace_arr = [\n\t\t\t\t\t\t\t'FIRSTNAME' => $firstname,\n\t\t\t\t\t\t\t'NAME' => $name,\n\t\t\t\t\t\t\t'COMPANY' => $company,\n\t\t\t\t\t\t\t'SALUTATION' => User::getCorrectUserSalutation([\n\t\t\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t\t\t'company' => $company\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t'CUSTOMER_NO' => $customernumber,\n\t\t\t\t\t\t\t'USERNAME' => $loginname,\n\t\t\t\t\t\t\t'PASSWORD' => $password,\n\t\t\t\t\t\t\t'SERVER_HOSTNAME' => $srv_hostname,\n\t\t\t\t\t\t\t'SERVER_IP' => $srv_ip['ip'] ?? '',\n\t\t\t\t\t\t\t'SERVER_PORT' => $srv_ip['port'] ?? '',\n\t\t\t\t\t\t\t'DOMAINNAME' => $_stdsubdomain\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\t// get template for mail subject\n\t\t\t\t\t\t$mail_subject = $this->getMailTemplate([\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t\t], 'mails', 'createcustomer_subject', $replace_arr, lng('mails.createcustomer.subject'));\n\t\t\t\t\t\t// get template for mail body\n\t\t\t\t\t\t$mail_body = $this->getMailTemplate([\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t\t], 'mails', 'createcustomer_mailbody', $replace_arr, lng('mails.createcustomer.mailbody'));\n\n\t\t\t\t\t\t$_mailerror = false;\n\t\t\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$this->mailer()->Subject = $mail_subject;\n\t\t\t\t\t\t\t$this->mailer()->AltBody = $mail_body;\n\t\t\t\t\t\t\t$this->mailer()->msgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t\t\t$this->mailer()->addAddress($email, User::getCorrectUserSalutation([\n\t\t\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t\t\t'company' => $company\n\t\t\t\t\t\t\t]));\n\t\t\t\t\t\t\t$this->mailer()->send();\n\t\t\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\t\tResponse::standardError('errorsendingmail', $email, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->mailer()->clearAddresses();\n\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically sent password to user '\" . $loginname . \"'\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added customer '\" . $loginname . \"'\");\n\n\t\t\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t\t\t'loginname' => $loginname\n\t\t\t\t]);\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t\tthrow new Exception(\"No more resources available\", 406);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return a customer entry by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the customer-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t * @param bool $show_usages\n\t *            optional, default false\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = $id > 0;\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\t\t$show_usages = $this->getBoolParam('show_usages', true, false);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `c`.*, `a`.`loginname` AS `adminname`\n\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` `c`, `\" . TABLE_PANEL_ADMINS . \"` `a`\n\t\t\tWHERE \" . ($id > 0 ? \"`c`.`customerid` = :idln\" : \"`c`.`loginname` = :idln\") . ($this->getUserDetail('customers_see_all') ? '' : \" AND `c`.`adminid` = :adminid\") . \" AND `c`.`adminid` = `a`.`adminid`\");\n\t\t\t$params = [\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t} else {\n\t\t\tif (($id > 0 && $id != $this->getUserDetail('customerid')) || !empty($loginname) && $loginname != $this->getUserDetail('loginname')) {\n\t\t\t\tthrow new Exception(\"You cannot access data of other customers\", 401);\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\tWHERE \" . ($id > 0 ? \"`customerid` = :idln\" : \"`loginname` = :idln\"));\n\t\t\t$params = [\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t];\n\t\t}\n\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\tif ($result) {\n\t\t\t// check whether the admin does not want the customer to see the notes\n\t\t\tif (!$this->isAdmin() && $result['custom_notes_show'] != 1) {\n\t\t\t\t$result['custom_notes'] = \"\";\n\t\t\t}\n\t\t\tif ($show_usages) {\n\t\t\t\t// get number of domains\n\t\t\t\t$domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(`id`) AS `domains`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `id`<> :stdd\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($domains_stmt, [\n\t\t\t\t\t'cid' => $result['customerid'],\n\t\t\t\t\t'stdd' => $result['standardsubdomain']\n\t\t\t\t]);\n\t\t\t\t$domains = $domains_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t$result['domains'] = intval($domains['domains']);\n\t\t\t\t// get disk-space usages for web, mysql and mail\n\t\t\t\t$usages_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DISKSPACE . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tORDER BY `stamp` DESC LIMIT 1\n\t\t\t\t\");\n\t\t\t\t$usages = Database::pexecute_first($usages_stmt, [\n\t\t\t\t\t'cid' => $result['customerid']\n\t\t\t\t]);\n\t\t\t\tif ($usages) {\n\t\t\t\t\t$result['webspace_used'] = $usages['webspace'];\n\t\t\t\t\t$result['mailspace_used'] = $usages['mail'];\n\t\t\t\t\t$result['dbspace_used'] = $usages['mysql'];\n\t\t\t\t} else {\n\t\t\t\t\t$result['webspace_used'] = 0;\n\t\t\t\t\t$result['mailspace_used'] = 0;\n\t\t\t\t\t$result['dbspace_used'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] get customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\t$key = ($id > 0 ? \"id #\" . $id : \"loginname '\" . $loginname . \"'\");\n\t\tthrow new Exception(\"Customer with \" . $key . \" could not be found\", 404);\n\t}\n\n\t/**\n\t * increase resource-usage\n\t *\n\t * @param int $customerid\n\t * @param string $resource\n\t * @param string $extra\n\t *            optional, default empty\n\t * @param int $increase_by\n\t *            optional, default 1\n\t */\n\tpublic static function increaseUsage($customerid = 0, $resource = null, $extra = '', $increase_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_CUSTOMERS, 'customerid', $customerid, '+', $resource, $extra, $increase_by);\n\t}\n\n\t/**\n\t * update customer entry by either id or loginname, customer can only change language, password and theme\n\t *\n\t * @param int $id\n\t *                             optional, the customer-id\n\t * @param string $loginname\n\t *                             optional, the loginname\n\t * @param string $email\n\t * @param string $name\n\t *                             optional if company is set, else required\n\t * @param string $firstname\n\t *                             optional if company is set, else required\n\t * @param string $company\n\t *                             optional but required if name/firstname empty\n\t * @param string $street\n\t *                             optional\n\t * @param string $zipcode\n\t *                             optional\n\t * @param string $city\n\t *                             optional\n\t * @param string $phone\n\t *                             optional\n\t * @param string $fax\n\t *                             optional\n\t * @param int $customernumber\n\t *                             optional\n\t * @param string $def_language ,\n\t *                             optional, default is system-default language\n\t * @param bool $api_allowed\n\t *                             optional, default is true if system setting api.enabled is true, else false\n\t * @param int $gender\n\t *                             optional, 0 = no-gender, 1 = male, 2 = female\n\t * @param string $custom_notes\n\t *                             optional notes\n\t * @param bool $custom_notes_show\n\t *                             optional, whether to show the content of custom_notes to the customer, default 0\n\t *                             (false)\n\t * @param string $new_customer_password\n\t *                             optional, iset new password\n\t * @param bool $sendpassword\n\t *                             optional, whether to send the password to the customer after creation, default 0\n\t *                             (false)\n\t * @param int $move_to_admin\n\t *                             optional, if valid admin-id is given here, the customer's admin/reseller can be\n\t *                             changed\n\t * @param bool $deactivated\n\t *                             optional, if 1 (true) the customer can be deactivated/suspended\n\t * @param int $diskspace\n\t *                             optional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *                             optional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *                             optional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *                             optional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *                             optional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *                             optional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *                             optional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *                             optional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *                             optional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *                             optional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *                             optional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *                             optional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *                             optional size of email-quota available for customer in MB, default is system-setting\n\t *                             mail_quota\n\t * @param bool $email_quota_ul\n\t *                             optional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *                             optional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *                             optional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *                             optional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *                             optional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *                             optional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *                             optional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $createstdsubdomain\n\t *                             optional, whether to create a standard-subdomain ([loginname].froxlor-hostname.tld),\n\t *                             default 1 (if customer has std-subdomain) else 0 (false)\n\t * @param bool $phpenabled\n\t *                             optional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *                             optional, array of IDs of php-config that the customer is allowed to use, default\n\t *                             empty (none)\n\t * @param bool $perlenabled\n\t *                             optional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *                             optional, whether to allow usage of the DNS editor (requires activated nameserver in\n\t *                             settings), default 0 (false)\n\t * @param bool $logviewenabled\n\t *                             optional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t * @param string $theme\n\t *                             optional, change theme\n\t * @param array $allowed_mysqlserver\n\t *        \t                   optional, array of IDs of defined mysql-servers the customer is allowed to use,\n\t *                             default is to allow the default dbserver (id=0)\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = $id > 0;\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t'id' => $id,\n\t\t\t'loginname' => $loginname\n\t\t]);\n\t\t$id = $result['customerid'];\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// parameters\n\t\t\t$move_to_admin = (int)($this->getParam('move_to_admin', true, 0));\n\n\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t$email = $this->getParam('email', true, $idna_convert->decode($result['email']));\n\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t$firstname = $this->getParam('firstname', true, $result['firstname']);\n\t\t\t$company_required = (!empty($name) && empty($firstname)) || (empty($name) && !empty($firstname)) || (empty($name) && empty($firstname));\n\t\t\t$company = $this->getParam('company', !$company_required, $result['company']);\n\t\t\t$street = $this->getParam('street', true, $result['street']);\n\t\t\t$zipcode = $this->getParam('zipcode', true, $result['zipcode']);\n\t\t\t$city = $this->getParam('city', true, $result['city']);\n\t\t\t$phone = $this->getParam('phone', true, $result['phone']);\n\t\t\t$fax = $this->getParam('fax', true, $result['fax']);\n\t\t\t$customernumber = $this->getParam('customernumber', true, $result['customernumber']);\n\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, $result['api_allowed']);\n\t\t\t$gender = (int)$this->getParam('gender', true, $result['gender']);\n\t\t\t$custom_notes = $this->getParam('custom_notes', true, $result['custom_notes']);\n\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, $result['custom_notes_show']);\n\n\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, round($result['diskspace'] / 1024, $dec_places));\n\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, round($result['traffic'] / (1024 * 1024), $dec_places));\n\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t$email_imap = $this->getParam('email_imap', true, $result['imap']);\n\t\t\t$email_pop3 = $this->getParam('email_pop3', true, $result['pop3']);\n\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\t\t\t$createstdsubdomain = $this->getBoolParam('createstdsubdomain', true, ($result['standardsubdomain'] != 0 ? 1 : 0));\n\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t$phpenabled = $this->getBoolParam('phpenabled', true, $result['phpenabled']);\n\t\t\t$allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, json_decode($result['allowed_phpconfigs'], true));\n\t\t\t$perlenabled = $this->getBoolParam('perlenabled', true, $result['perlenabled']);\n\t\t\t$dnsenabled = $this->getBoolParam('dnsenabled', true, $result['dnsenabled']);\n\t\t\t$logviewenabled = $this->getBoolParam('logviewenabled', true, $result['logviewenabled']);\n\t\t\t$deactivated = $this->getBoolParam('deactivated', true, $result['deactivated']);\n\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\t\t\t$allowed_mysqlserver = $this->getParam('allowed_mysqlserver', true, json_decode($result['allowed_mysqlserver'], true));\n\t\t} else {\n\t\t\t// allowed parameters\n\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\t\t}\n\n\t\t// validation\n\t\tif ($this->isAdmin()) {\n\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t$name = Validate::validate($name, 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$firstname = Validate::validate($firstname, 'first name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$company = Validate::validate($company, 'company', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$street = Validate::validate($street, 'street', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$zipcode = Validate::validate($zipcode, 'zipcode', '/^[0-9 \\-A-Z]*$/', '', [], true);\n\t\t\t$city = Validate::validate($city, 'city', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$phone = Validate::validate($phone, 'phone', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', [], true);\n\t\t\t$fax = Validate::validate($fax, 'fax', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', [], true);\n\t\t\t$email = $idna_convert->encode(Validate::validate($email, 'email', '', '', [], true));\n\t\t\t$customernumber = Validate::validate($customernumber, 'customer number', '/^[A-Za-z0-9 \\-]*$/Di', '', [], true);\n\t\t\t$custom_notes = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\tif (!empty($allowed_phpconfigs)) {\n\t\t\t\t$allowed_phpconfigs = array_map('intval', $allowed_phpconfigs);\n\t\t\t}\n\t\t\tif (empty($allowed_phpconfigs) && $phpenabled == 1) {\n\t\t\t\tResponse::standardError('customerphpenabledbutnoconfig', '', true);\n\t\t\t}\n\n\t\t\t// add permission for allowed mysql usage if customer was not allowed to use mysql prior\n\t\t\tif ($result['mysqls'] == 0 && ($mysqls == -1 || $mysqls > 0)) {\n\t\t\t\t$allowed_mysqlserver = $this->getParam('allowed_mysqlserver', true, [0]);\n\t\t\t}\n\t\t\tif (! empty($allowed_mysqlserver)) {\n\t\t\t\t$allowed_mysqlserver = array_map('intval', $allowed_mysqlserver);\n\t\t\t}\n\n\t\t}\n\t\t$def_language = Validate::validate($def_language, 'default language', '', '', [], true);\n\t\t$theme = Validate::validate($theme, 'theme', '', '', [], true);\n\n\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t$email_quota = -1;\n\t\t}\n\n\t\tif (empty($theme)) {\n\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t}\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$diskspace *= 1024;\n\t\t\t$traffic *= 1024 * 1024;\n\n\t\t\tif (\n\t\t\t\t($diskspace != 0 && (($this->getUserDetail('diskspace_used') + $diskspace - $result['diskspace']) > $this->getUserDetail('diskspace')) && ($this->getUserDetail('diskspace') / 1024) != '-1')\n\t\t\t\t|| ($mysqls != 0 && (($this->getUserDetail('mysqls_used') + $mysqls - $result['mysqls']) > $this->getUserDetail('mysqls')) && $this->getUserDetail('mysqls') != '-1')\n\t\t\t\t|| ($emails != 0 && (($this->getUserDetail('emails_used') + $emails - $result['emails']) > $this->getUserDetail('emails')) && $this->getUserDetail('emails') != '-1')\n\t\t\t\t|| ($email_accounts != 0 && (($this->getUserDetail('email_accounts_used') + $email_accounts - $result['email_accounts']) > $this->getUserDetail('email_accounts')) && $this->getUserDetail('email_accounts') != '-1')\n\t\t\t\t|| ($email_forwarders != 0 && (($this->getUserDetail('email_forwarders_used') + $email_forwarders - $result['email_forwarders']) > $this->getUserDetail('email_forwarders')) && $this->getUserDetail('email_forwarders') != '-1')\n\t\t\t\t|| ($email_quota != 0 && (($this->getUserDetail('email_quota_used') + $email_quota - $result['email_quota']) > $this->getUserDetail('email_quota')) && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1')\n\t\t\t\t|| ($ftps != 0 && (($this->getUserDetail('ftps_used') + $ftps - $result['ftps']) > $this->getUserDetail('ftps')) && $this->getUserDetail('ftps') != '-1')\n\t\t\t\t|| ($subdomains != 0 && (($this->getUserDetail('subdomains_used') + $subdomains - $result['subdomains']) > $this->getUserDetail('subdomains')) && $this->getUserDetail('subdomains') != '-1')\n\t\t\t\t|| (($diskspace / 1024) == '-1' && ($this->getUserDetail('diskspace') / 1024) != '-1')\n\t\t\t\t|| ($mysqls == '-1' && $this->getUserDetail('mysqls') != '-1')\n\t\t\t\t|| ($emails == '-1' && $this->getUserDetail('emails') != '-1')\n\t\t\t\t|| ($email_accounts == '-1' && $this->getUserDetail('email_accounts') != '-1')\n\t\t\t\t|| ($email_forwarders == '-1' && $this->getUserDetail('email_forwarders') != '-1')\n\t\t\t\t|| ($email_quota == '-1' && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1')\n\t\t\t\t|| ($ftps == '-1' && $this->getUserDetail('ftps') != '-1')\n\t\t\t\t|| ($subdomains == '-1' && $this->getUserDetail('subdomains') != '-1')\n\t\t\t) {\n\t\t\t\tResponse::standardError('youcantallocatemorethanyouhave', '', true);\n\t\t\t}\n\n\t\t\t// validate allowed_mysqls whether the customer has databases on a removed, now disallowed db-server and abort if true\n\t\t\t$former_allowed_mysqlserver = json_decode($result['allowed_mysqlserver'], true);\n\t\t\tif ($allowed_mysqlserver != $former_allowed_mysqlserver && !empty($former_allowed_mysqlserver)) {\n\t\t\t\t$to_remove_mysqlserver = array_diff($former_allowed_mysqlserver, $allowed_mysqlserver);\n\t\t\t\tif (count($to_remove_mysqlserver) > 0) {\n\t\t\t\t\tforeach ($to_remove_mysqlserver as $mysqlserver_check) {\n\t\t\t\t\t\t$result_ms = $this->apiCall('MysqlServer.databasesOnServer', [\n\t\t\t\t\t\t\t'mysql_server' => $mysqlserver_check,\n\t\t\t\t\t\t\t'customerid' => $id\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tif ($result_ms['count'] > 0) {\n\t\t\t\t\t\t\tResponse::standardError('mysqlserverstillhasdbs', '', true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email == '') {\n\t\t\t\tResponse::standardError([\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'customer.email'\n\t\t\t\t], '', true);\n\t\t\t} elseif (!Validate::validateEmail($email)) {\n\t\t\t\tResponse::standardError('emailiswrong', $email, true);\n\t\t\t}\n\t\t}\n\n\t\tif ($password != '') {\n\t\t\t$password = Crypt::validatePassword($password, true);\n\t\t\t$password = Crypt::makeCryptPassword($password);\n\t\t} else {\n\t\t\t$password = $result['password'];\n\t\t}\n\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($createstdsubdomain != '1' || $deactivated) {\n\t\t\t\t$createstdsubdomain = '0';\n\t\t\t}\n\n\t\t\tif ($createstdsubdomain == '1' && $result['standardsubdomain'] == '0') {\n\t\t\t\tif (Settings::Get('system.stdsubdomain') !== null && Settings::Get('system.stdsubdomain') != '') {\n\t\t\t\t\t$_stdsubdomain = $result['loginname'] . '.' . Settings::Get('system.stdsubdomain');\n\t\t\t\t} else {\n\t\t\t\t\t$_stdsubdomain = $result['loginname'] . '.' . Settings::Get('system.hostname');\n\t\t\t\t}\n\n\t\t\t\t$ins_data = [\n\t\t\t\t\t'domain' => $_stdsubdomain,\n\t\t\t\t\t'customerid' => $result['customerid'],\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t'docroot' => $result['documentroot'],\n\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t'openbasedir' => '1'\n\t\t\t\t];\n\t\t\t\t$domainid = -1;\n\t\t\t\ttry {\n\t\t\t\t\t$std_domain = $this->apiCall('Domains.add', $ins_data);\n\t\t\t\t\t$domainid = $std_domain['id'];\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to add standard-subdomain: \" . $e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tif ($domainid > 0) {\n\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `standardsubdomain` = :domainid WHERE `customerid` = :customerid\n\t\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t\t'domainid' => $domainid,\n\t\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t\t], true, true);\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added standardsubdomain for user '\" . $result['loginname'] . \"'\");\n\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($createstdsubdomain == '0' && $result['standardsubdomain'] != '0') {\n\t\t\t\ttry {\n\t\t\t\t\t$std_domain = $this->apiCall('Domains.delete', [\n\t\t\t\t\t\t'id' => $result['standardsubdomain'],\n\t\t\t\t\t\t'is_stdsubdomain' => 1\n\t\t\t\t\t]);\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to delete standard-subdomain: \" . $e->getMessage());\n\t\t\t\t}\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically deleted standardsubdomain for user '\" . $result['loginname'] . \"'\");\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\tif ($phpenabled != $result['phpenabled'] || $perlenabled != $result['perlenabled'] || $email != $result['email']) {\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\t// activate/deactivate customer services\n\t\t\tif ($deactivated != $result['deactivated']) {\n\t\t\t\t$yesno = ($deactivated ? 'N' : 'Y');\n\t\t\t\t$pop3 = ($deactivated ? '0' : (int)$result['pop3']);\n\t\t\t\t$imap = ($deactivated ? '0' : (int)$result['imap']);\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_MAIL_USERS . \"` SET `postfix`= :yesno, `pop3` = :pop3, `imap` = :imap WHERE `customerid` = :customerid\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'yesno' => $yesno,\n\t\t\t\t\t'pop3' => $pop3,\n\t\t\t\t\t'imap' => $imap,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_FTP_USERS . \"` SET `login_enabled` = :yesno WHERE `customerid` = :customerid\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'yesno' => $yesno,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET `deactivated`= :deactivated WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\n\t\t\t\t// Retrieve customer's databases\n\t\t\t\t$databases_stmt = Database::prepare(\"SELECT * FROM \" . TABLE_PANEL_DATABASES . \" WHERE customerid = :customerid ORDER BY `dbserver`\");\n\t\t\t\tDatabase::pexecute($databases_stmt, [\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\n\t\t\t\tDatabase::needRoot(true);\n\t\t\t\t$last_dbserver = 0;\n\n\t\t\t\t$dbm = new DbManager($this->logger());\n\n\t\t\t\t// For each of them\n\t\t\t\t$priv_changed = false;\n\t\t\t\twhile ($row_database = $databases_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif ($last_dbserver != $row_database['dbserver']) {\n\t\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t\t\tDatabase::needRoot(true, $row_database['dbserver']);\n\t\t\t\t\t\t$last_dbserver = $row_database['dbserver'];\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach (array_unique(explode(',', Settings::Get('system.mysql_access_host'))) as $mysql_access_host) {\n\t\t\t\t\t\t$mysql_access_host = trim($mysql_access_host);\n\n\t\t\t\t\t\t// Prevent access, if deactivated\n\t\t\t\t\t\tif ($deactivated) {\n\t\t\t\t\t\t\t// failsafe if user has been deleted manually (requires MySQL 4.1.2+)\n\t\t\t\t\t\t\t$dbm->getManager()->disableUser($row_database['databasename'], $mysql_access_host);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Otherwise grant access\n\t\t\t\t\t\t\t$dbm->getManager()->enableUser($row_database['databasename'], $mysql_access_host);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$priv_changed = true;\n\t\t\t\t}\n\n\t\t\t\t// At last flush the new privileges\n\t\t\t\tif ($priv_changed) {\n\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t}\n\t\t\t\tDatabase::needRoot(false);\n\n\t\t\t\t// reactivate/deactivate api-keys\n\t\t\t\t$valid_until = $deactivated ? 0 : -1;\n\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_API_KEYS . \"` SET `valid_until` = :vu WHERE `customerid` = :id\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'vu' => $valid_until\n\t\t\t\t], true, true);\n\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] \" . ($deactivated ? 'deactivated' : 'reactivated') . \" user '\" . $result['loginname'] . \"'\");\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\t// Disable or enable POP3 Login for customers Mail Accounts\n\t\t\tif ($email_pop3 != $result['pop3']) {\n\t\t\t\t$upd_stmt = Database::prepare(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `pop3` = :pop3 WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Disable or enable IMAP Login for customers Mail Accounts\n\t\t\tif ($email_imap != $result['imap']) {\n\t\t\t\t$upd_stmt = Database::prepare(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `imap` = :imap WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'imap' => $email_imap,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t$upd_data = [\n\t\t\t'customerid' => $id,\n\t\t\t'passwd' => $password,\n\t\t\t'lang' => $def_language,\n\t\t\t'theme' => $theme\n\t\t];\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$admin_upd_data = [\n\t\t\t\t'name' => $name,\n\t\t\t\t'firstname' => $firstname,\n\t\t\t\t'gender' => $gender,\n\t\t\t\t'company' => $company,\n\t\t\t\t'street' => $street,\n\t\t\t\t'zipcode' => $zipcode,\n\t\t\t\t'city' => $city,\n\t\t\t\t'phone' => $phone,\n\t\t\t\t'fax' => $fax,\n\t\t\t\t'email' => $email,\n\t\t\t\t'customerno' => $customernumber,\n\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t'traffic' => $traffic,\n\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t'emails' => $emails,\n\t\t\t\t'email_accounts' => $email_accounts,\n\t\t\t\t'email_forwarders' => $email_forwarders,\n\t\t\t\t'email_quota' => $email_quota,\n\t\t\t\t'ftps' => $ftps,\n\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t'allowed_phpconfigs' => empty($allowed_phpconfigs) ? \"\" : json_encode($allowed_phpconfigs),\n\t\t\t\t'imap' => $email_imap,\n\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t'perlenabled' => $perlenabled,\n\t\t\t\t'dnsenabled' => $dnsenabled,\n\t\t\t\t'logviewenabled' => $logviewenabled,\n\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t'allowed_mysqlserver' => empty($allowed_mysqlserver) ? \"\" : json_encode($allowed_mysqlserver)\n\t\t\t];\n\t\t\t$upd_data += $admin_upd_data;\n\t\t}\n\n\t\t$upd_query = \"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`def_language` = :lang,\n\t\t\t\t`password` = :passwd,\n\t\t\t\t`theme` = :theme\";\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$admin_upd_query = \",\n\t\t\t\t`name` = :name,\n\t\t\t\t`firstname` = :firstname,\n\t\t\t\t`gender` = :gender,\n\t\t\t\t`company` = :company,\n\t\t\t\t`street` = :street,\n\t\t\t\t`zipcode` = :zipcode,\n\t\t\t\t`city` = :city,\n\t\t\t\t`phone` = :phone,\n\t\t\t\t`fax` = :fax,\n\t\t\t\t`email` = :email,\n\t\t\t\t`customernumber` = :customerno,\n\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t`traffic` = :traffic,\n\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t`emails` = :emails,\n\t\t\t\t`email_accounts` = :email_accounts,\n\t\t\t\t`email_forwarders` = :email_forwarders,\n\t\t\t\t`ftps` = :ftps,\n\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t`deactivated` = :deactivated,\n\t\t\t\t`phpenabled` = :phpenabled,\n\t\t\t\t`allowed_phpconfigs` = :allowed_phpconfigs,\n\t\t\t\t`email_quota` = :email_quota,\n\t\t\t\t`imap` = :imap,\n\t\t\t\t`pop3` = :pop3,\n\t\t\t\t`perlenabled` = :perlenabled,\n\t\t\t\t`dnsenabled` = :dnsenabled,\n\t\t\t\t`logviewenabled` = :logviewenabled,\n\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t`allowed_mysqlserver` = :allowed_mysqlserver\";\n\t\t\t$upd_query .= $admin_upd_query;\n\t\t}\n\t\t$upd_query .= \" WHERE `customerid` = :customerid\";\n\t\t$upd_stmt = Database::prepare($upd_query);\n\t\tDatabase::pexecute($upd_stmt, $upd_data);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\tCronjob::inserttask(TaskId::CREATE_QUOTA);\n\n\t\t\t$admin_update_query = \"UPDATE `\" . TABLE_PANEL_ADMINS . \"` SET `customers_used` = `customers_used` \";\n\n\t\t\tif ($mysqls != '-1' || $result['mysqls'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `mysqls_used` = `mysqls_used` \";\n\n\t\t\t\tif ($mysqls != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$mysqls . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['mysqls'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['mysqls'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($emails != '-1' || $result['emails'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `emails_used` = `emails_used` \";\n\n\t\t\t\tif ($emails != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$emails . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['emails'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['emails'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_accounts != '-1' || $result['email_accounts'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_accounts_used` = `email_accounts_used` \";\n\n\t\t\t\tif ($email_accounts != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$email_accounts . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_accounts'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['email_accounts'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_forwarders != '-1' || $result['email_forwarders'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_forwarders_used` = `email_forwarders_used` \";\n\n\t\t\t\tif ($email_forwarders != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$email_forwarders . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_forwarders'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['email_forwarders'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_quota != '-1' || $result['email_quota'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_quota_used` = `email_quota_used` \";\n\n\t\t\t\tif ($email_quota != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$email_quota . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_quota'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['email_quota'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($subdomains != '-1' || $result['subdomains'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `subdomains_used` = `subdomains_used` \";\n\n\t\t\t\tif ($subdomains != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$subdomains . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['subdomains'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['subdomains'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($ftps != '-1' || $result['ftps'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `ftps_used` = `ftps_used` \";\n\n\t\t\t\tif ($ftps != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$ftps . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['ftps'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['ftps'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (($diskspace / 1024) != '-1' || ($result['diskspace'] / 1024) != '-1') {\n\t\t\t\t$admin_update_query .= \", `diskspace_used` = `diskspace_used` \";\n\n\t\t\t\tif (($diskspace / 1024) != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int)$diskspace . \" \";\n\t\t\t\t}\n\t\t\t\tif (($result['diskspace'] / 1024) != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int)$result['diskspace'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$admin_update_query .= \" WHERE `adminid` = '\" . (int)$result['adminid'] . \"'\";\n\t\t\tDatabase::query($admin_update_query);\n\t\t}\n\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_NOTICE, \"[API] edited user '\" . $result['loginname'] . \"'\");\n\n\t\t/*\n\t\t * move customer to another admin/reseller; #1166\n\t\t */\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($move_to_admin > 0 && $move_to_admin != $result['adminid']) {\n\t\t\t\t$move_result = $this->apiCall('Customers.move', [\n\t\t\t\t\t'id' => $result['customerid'],\n\t\t\t\t\t'adminid' => $move_to_admin\n\t\t\t\t]);\n\t\t\t\tif ($move_result != true) {\n\t\t\t\t\tResponse::standardError('moveofcustomerfailed', $move_result, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t'id' => $result['customerid']\n\t\t]);\n\t\treturn $this->response($result);\n\t}\n\n\t/**\n\t * delete a customer entry by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the customer-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t * @param bool $delete_userfiles\n\t *            optional, default false\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\t\t\t$delete_userfiles = $this->getParam('delete_userfiles', true, 0);\n\n\t\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['customerid'];\n\n\t\t\t$databases_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DATABASES . \"`\n\t\t\t\tWHERE `customerid` = :id ORDER BY `dbserver`\n\t\t\t\");\n\t\t\tDatabase::pexecute($databases_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t]);\n\t\t\tDatabase::needRoot(true);\n\t\t\t$last_dbserver = 0;\n\n\t\t\t$dbm = new DbManager($this->logger());\n\n\t\t\t$priv_changed = false;\n\t\t\twhile ($row_database = $databases_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($last_dbserver != $row_database['dbserver']) {\n\t\t\t\t\tDatabase::needRoot(true, $row_database['dbserver']);\n\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t\t$last_dbserver = $row_database['dbserver'];\n\t\t\t\t}\n\t\t\t\t$dbm->getManager()->deleteDatabase($row_database['databasename']);\n\t\t\t\t$priv_changed = true;\n\t\t\t}\n\t\t\tif ($priv_changed) {\n\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t}\n\t\t\tDatabase::needRoot(false);\n\n\t\t\t// delete customer itself\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete customer databases\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DATABASES . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// first gather all domain-id's to clean up panel_domaintoip, dns-entries and certificates accordingly\n\t\t\t$did_stmt = Database::prepare(\"SELECT `id`, `domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($did_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\twhile ($row = $did_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t// remove domain->ip connection\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_domain` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t], true, true);\n\t\t\t\t// remove domain->dns entries\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_DOMAIN_DNS . \"` WHERE `domain_id` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t], true, true);\n\t\t\t\t// remove domain->certificates entries\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DOMAIN_SSL_SETTINGS . \"` WHERE `domainid` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t], true, true);\n\t\t\t\t// remove domains DNS from powerDNS if used, #581\n\t\t\t\tCronjob::inserttask(TaskId::DELETE_DOMAIN_PDNS, $row['domain']);\n\t\t\t\t// remove domain from acme.sh / lets encrypt if used\n\t\t\t\tCronjob::inserttask(TaskId::DELETE_DOMAIN_SSL, $row['domain']);\n\t\t\t}\n\t\t\t// remove customer domains\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\t$domains_deleted = $stmt->rowCount();\n\n\t\t\t// delete htpasswds\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_HTPASSWDS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete htaccess options\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_HTACCESS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete traffic information\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_TRAFFIC . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// remove diskspace analysis\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DISKSPACE . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete mail-accounts\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_MAIL_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete mail-addresses\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_MAIL_VIRTUAL . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// gather ftp-user names\n\t\t\t$result2_stmt = Database::prepare(\"SELECT `username` FROM `\" . TABLE_FTP_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($result2_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\twhile ($row = $result2_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t// delete ftp-quotatallies by username\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_QUOTATALLIES . \"` WHERE `name` = :name\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t'name' => $row['username']\n\t\t\t\t], true, true);\n\t\t\t}\n\n\t\t\t// remove ftp-group\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_GROUPS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// remove ftp-users\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// remove api-keys\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_API_KEYS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\t// Delete all waiting \"create user\" -tasks for this user, #276\n\t\t\t// Note: the WHERE selects part of a serialized array, but it should be safe this way\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TASKS . \"`\n\t\t\t\tWHERE `type` = '2' AND `data` LIKE :loginname\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'loginname' => \"%:{$result['loginname']};%\"\n\t\t\t], true, true);\n\n\t\t\t// update admin-resource-usage\n\t\t\tAdmins::decreaseUsage($result['adminid'], 'customers_used');\n\t\t\tAdmins::decreaseUsage($result['adminid'], 'domains_used', '', (int)($domains_deleted - $result['subdomains_used']));\n\n\t\t\tif ($result['mysqls'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'mysqls_used', '', (int)$result['mysqls']);\n\t\t\t}\n\n\t\t\tif ($result['emails'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'emails_used', '', (int)$result['emails']);\n\t\t\t}\n\n\t\t\tif ($result['email_accounts'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'email_accounts_used', '', (int)$result['email_accounts']);\n\t\t\t}\n\n\t\t\tif ($result['email_forwarders'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'email_forwarders_used', '', (int)$result['email_forwarders']);\n\t\t\t}\n\n\t\t\tif ($result['email_quota'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'email_quota_used', '', (int)$result['email_quota']);\n\t\t\t}\n\n\t\t\tif ($result['subdomains'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'subdomains_used', '', (int)$result['subdomains']);\n\t\t\t}\n\n\t\t\tif ($result['ftps'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'ftps_used', '', (int)$result['ftps']);\n\t\t\t}\n\n\t\t\tif (($result['diskspace'] / 1024) != '-1') {\n\t\t\t\tAdmins::decreaseUsage($result['adminid'], 'diskspace_used', '', (int)$result['diskspace']);\n\t\t\t}\n\n\t\t\t// rebuild configs\n\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\n\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\tif ($delete_userfiles == 1) {\n\t\t\t\t// insert task to remove the customers files from the filesystem\n\t\t\t\tCronjob::inserttask(TaskId::DELETE_CUSTOMER_FILES, $result['loginname']);\n\t\t\t}\n\n\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\tCronjob::inserttask(TaskId::CREATE_QUOTA);\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * decrease resource-usage\n\t *\n\t * @param int $customerid\n\t * @param string $resource\n\t * @param string $extra\n\t *            optional, default empty\n\t * @param int $decrease_by\n\t *            optional, default 1\n\t */\n\tpublic static function decreaseUsage($customerid = 0, $resource = null, $extra = '', $decrease_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_CUSTOMERS, 'customerid', $customerid, '-', $resource, $extra, $decrease_by);\n\t}\n\n\t/**\n\t * unlock a locked customer by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the customer-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function unlock()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['customerid'];\n\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`loginfail_count` = '0'\n\t\t\t\tWHERE `customerid`= :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\t// set the new value for result-array\n\t\t\t$result['loginfail_count'] = 0;\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] unlocked customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * Function to move a given customer to a given admin/reseller\n\t * and update all its references accordingly\n\t *\n\t * @param int $id\n\t *            optional, the customer-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t * @param int $adminid\n\t *            target-admin-id\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function move()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$adminid = $this->getParam('adminid');\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$c_result = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $c_result['customerid'];\n\n\t\t\t// check if target-admin is the current admin\n\t\t\tif ($adminid == $c_result['adminid']) {\n\t\t\t\tthrow new Exception(\"Cannot move customer to the same admin/reseller as he currently is assigned to\", 406);\n\t\t\t}\n\n\t\t\t// get target admin\n\t\t\t$a_result = $this->apiCall('Admins.get', [\n\t\t\t\t'id' => $adminid\n\t\t\t]);\n\n\t\t\t// Update customer entry\n\t\t\t$updCustomer_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `adminid` = :adminid WHERE `customerid` = :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($updCustomer_stmt, [\n\t\t\t\t'adminid' => $adminid,\n\t\t\t\t'cid' => $id\n\t\t\t], true, true);\n\n\t\t\t// Update customer-domains\n\t\t\t$updDomains_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET `adminid` = :adminid WHERE `customerid` = :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($updDomains_stmt, [\n\t\t\t\t'adminid' => $adminid,\n\t\t\t\t'cid' => $id\n\t\t\t], true, true);\n\n\t\t\t// now, recalculate the resource-usage for the old and the new admin\n\t\t\tUser::updateCounters(false);\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] moved user '\" . $c_result['loginname'] . \"' from admin/reseller '\" . $c_result['adminname'] . \" to admin/reseller '\" . $a_result['loginname'] . \"'\");\n\n\t\t\t$result = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $c_result['customerid']\n\t\t\t]);\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n}\n", "export default function () {\n\t$(function () {\n\t\t/*\n\t\t * validation\n\t\t */\n\t\t$('#customer_add,#customer_edit').each(function () {\n\t\t\t$(this).validate({\n\t\t\t\trules: {\n\t\t\t\t\t'name': {\n\t\t\t\t\t\trequired: function () {\n\t\t\t\t\t\t\treturn $('#company').val().trim().length === 0 || $('#firstname').val().trim().length > 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'firstname': {\n\t\t\t\t\t\trequired: function () {\n\t\t\t\t\t\t\treturn $('#company').val().trim().length === 0 || $('#name').val().trim().length > 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'company': {\n\t\t\t\t\t\trequired: function () {\n\t\t\t\t\t\t\treturn $('#name').val().trim().length === 0\n\t\t\t\t\t\t\t\t&& $('#firstname').val().trim().length === 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t\t$('#domain_add,#domain_edit').each(function () {\n\t\t\t$(this).validate({\n\t\t\t\trules: {\n\t\t\t\t\t'ipandport[]': {\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tminlength: 1\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terrorPlacement: function (error, element) {\n\t\t\t\t\t$(error).prependTo($(element).parent().parent());\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n}\n"], "filenames": ["lib/Froxlor/Api/Commands/Customers.php", "templates/Froxlor/assets/js/jquery/validation.js"], "buggy_code_start_loc": [1056, 11], "buggy_code_end_loc": [1057, 23], "fixing_code_start_loc": [1056, 11], "fixing_code_end_loc": [1057, 23], "type": "NVD-CWE-noinfo", "message": "Froxlor is open source server administration software. Prior to version 2.1.2, it was possible to submit the registration form with the essential fields, such as the username and password, left intentionally blank. This inadvertent omission allowed for a bypass of the mandatory field requirements (e.g. surname, company name) established by the system. Version 2.1.2 fixes this issue.\n", "other": {"cve": {"id": "CVE-2023-50256", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-03T23:15:08.517", "lastModified": "2024-01-10T20:00:20.797", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Froxlor is open source server administration software. Prior to version 2.1.2, it was possible to submit the registration form with the essential fields, such as the username and password, left intentionally blank. This inadvertent omission allowed for a bypass of the mandatory field requirements (e.g. surname, company name) established by the system. Version 2.1.2 fixes this issue.\n"}, {"lang": "es", "value": "Froxlor es un software de administraci\u00f3n de servidores de c\u00f3digo abierto. Antes de la versi\u00f3n 2.1.2, era posible enviar el formulario de registro con los campos esenciales, como el username y la password, dejados intencionalmente en blanco. Esta omisi\u00f3n inadvertida permiti\u00f3 omitir los requisitos de campo obligatorios (por ejemplo, apellido, nombre de la empresa) establecidos por el sistema. La versi\u00f3n 2.1.2 soluciona este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.2", "matchCriteriaId": "474D793F-0B1C-43DC-979C-29B4A48045FE"}]}]}], "references": [{"url": "https://github.com/Froxlor/Froxlor/commit/4b1846883d4828962add91bd844596d89a9c7cac", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Froxlor/Froxlor/security/advisories/GHSA-625g-fm5w-w7w4", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://user-images.githubusercontent.com/80028768/289675319-81ae8ebe-1308-4ee3-bedb-43cdc40da474.mp4", "source": "security-advisories@github.com", "tags": ["Exploit"]}]}, "github_commit_url": "https://github.com/Froxlor/Froxlor/commit/4b1846883d4828962add91bd844596d89a9c7cac"}}