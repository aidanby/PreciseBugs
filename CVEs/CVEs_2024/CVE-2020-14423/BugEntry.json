{"buggy_code": ["package Convos::Core::Settings;\nuse Mojo::Base -base;\n\nuse Mojo::JSON qw(false true);\nuse Mojo::Path;\nuse Mojo::URL;\nuse Mojo::Util;\n\nhas contact => sub { $ENV{CONVOS_CONTACT} || 'mailto:root@localhost' };\nsub core { shift->{core} or die 'core is required in constructor' }\nhas default_connection => \\&_build_default_connection;\nhas forced_connection =>\n  sub { $ENV{CONVOS_FORCED_CONNECTION} || $ENV{CONVOS_FORCED_IRC_SERVER} ? true : false };\nsub id {'settings'}\nhas local_secret   => \\&_build_local_secret;\nhas open_to_public => sub {false};\nhas organization_name =>\n  sub { $ENV{CONVOS_ORGANIZATION_NAME} || shift->defaults->{organization_name} };\nhas organization_url =>\n  sub { Mojo::URL->new($ENV{CONVOS_ORGANIZATION_URL} || shift->defaults->{organization_url}) };\n\nsub public_attributes {\n  return [\n    qw(contact default_connection forced_connection),\n    qw(open_to_public organization_name organization_url),\n  ];\n}\n\nhas rtc => sub {\n  my $self = shift;\n  my $config;\n\n  for my $type (qw(stun turn)) {\n    my $env_key = sprintf 'CONVOS_%s', uc $type;\n    my $url     = Mojo::URL->new($ENV{$env_key} // \"$type://\");\n    next unless $url->host;\n\n    $config ||= $url->query->to_hash;\n    my $server = {urls => sprintf '%s:%s', $url->scheme || 'stun', $url->host_port};\n    $server->{username}   = $url->username if $url->username;\n    $server->{credential} = $url->password if $url->password;\n    $server->{credential_type} = $url->query->param('credentialType') // 'password'\n      if $url->query->param('credentialType')\n      or $url->password;\n    push @{$config->{ice_servers}}, $server;\n  }\n\n  $config ||= {};\n  delete $config->{credentialType};\n  return $config;\n};\n\nhas session_secrets => \\&_build_session_secrets;\n\nsub defaults {\n  return {organization_name => 'Convos', organization_url => 'https://convos.chat'};\n}\n\nsub load_p {\n  my $self = shift;\n  return $self->core->backend->load_object_p($self)->then(sub { $self->_set_attributes(shift, 1) });\n}\n\nsub save_p {\n  my $self = shift;\n\n  $self->_set_attributes(shift, 0) if ref $_[0] eq 'HASH';\n  my $p = $self->core->backend->save_object_p($self, @_);\n\n  # Remove legacy secrets file\n  my $file = $self->_legacy_session_secrets_file;\n  $file->remove if -e $file;\n\n  return $p;\n}\n\nsub uri { Mojo::Path->new('settings.json') }\n\nsub _build_default_connection {\n  my $self = shift;\n\n  my @urls = map { $ENV{uc(\"CONVOS_$_\")} // '' }\n    qw(forced_connection forced_irc_server default_connection default_server);\n\n  for my $url (grep {$_} @urls) {\n    next unless 3 < length $url;    # skip \"0\", \"1\" and \"yes\"\n    $url = \"irc://$url\" unless $url =~ m!^\\w+://!;\n    return Mojo::URL->new($url);\n  }\n\n  return Mojo::URL->new('irc://chat.freenode.net:6697/%23convos');\n}\n\nsub _build_local_secret {\n  my $self = shift;\n  return $ENV{CONVOS_LOCAL_SECRET} if $ENV{CONVOS_LOCAL_SECRET};\n\n  my $secret = Mojo::Util::md5_sum(join ':', $self->core->home->to_string, $<, $(, $0);\n  return $secret;\n}\n\nsub _build_session_secrets {\n  my $self = shift;\n  return [split /,/, $ENV{CONVOS_SECRETS} || ''] if $ENV{CONVOS_SECRETS};\n\n  my $secrets;\n  my $file = $self->_legacy_session_secrets_file;\n  $secrets = [split /\u201a/, $file->slurp] if -e $file;\n  return $secrets if $secrets and @$secrets;\n\n  $secrets = [Mojo::Util::sha1_sum(join ':', rand(), $$, $<, $(, $^X, Time::HiRes::time())];\n  return $secrets;\n}\n\nsub _legacy_session_secrets_file { shift->core->home->child('secrets') }\n\nsub _set_attributes {\n  my ($self, $params, $safe_source) = @_;\n\n  $self->$_($params->{$_})\n    for grep { defined $params->{$_} }\n    qw(contact forced_connection open_to_public organization_name);\n\n  $self->$_(Mojo::URL->new($params->{$_}))\n    for grep { defined $params->{$_} } qw(default_connection organization_url);\n\n  if ($safe_source) {\n    $self->$_($params->{$_}) for grep { defined $params->{$_} } qw(local_secret session_secrets);\n  }\n\n  return $self;\n}\n\nsub TO_JSON {\n  my ($self, $persist) = @_;\n\n  my %json = map { ($_ => $self->$_) } @{$self->public_attributes};\n  $json{$_} = $json{$_}->to_string for qw(default_connection organization_url);\n\n  if ($persist) {\n    $json{local_secret}    = $self->local_secret;\n    $json{session_secrets} = $self->session_secrets;\n  }\n\n  return \\%json;\n}\n\n1;\n\n=encoding utf8\n\n=head1 NAME\n\nConvos::Core::Settings - Convos settings\n\n=head1 DESCRIPTION\n\nL<Convos::Core::Settings> is a class used to model Convos server settings.\n\n=head1 ATTRIBUTES\n\n=head2 contact\n\n  $str = $settings->contact;\n  $settings = $settings->contact(\"mailto:root@localhost\");\n\nHolds a string with an URL to where the Convos admin can be contacted.\n\n=head2 core\n\n  $obj = $settings->core;\n\nHolds a L<Convos::Core> object.\n\n=head2 default_connection\n\n  $url = $settings->default_connection;\n  $settings = $settings->default_connection(Mojo::URL->new(\"irc://...\"));\n\nHolds a L<Mojo::URL> object with the default connection URL. Default value\nis \"irc://chat.freenode.net:6697/%23convos\". (Subject to change)\n\n=head2 forced_connection\n\n  $bool = $settings->forced_connection;\n  $settings = $settings->forced_connection(Mojo::JSON::true);\n\nTrue if this instance of Convos can only connect to the L</default_connection>.\n\n=head2 local_secret\n\n  $str = $settings->local_secret;\n\nHolds a local password/secret that can be used to run admin actions from\nlocalhost.\n\n=head2 open_to_public\n\n  $bool = $settings->open_to_public;\n  $settings = $settings->open_to_public(Mojo::JSON::true);\n\nTrue if users can register without an invite link.\n\n=head2 organization_name\n\n  $str = $settings->organization_name;\n  $settings = $settings->organization_name(\"Convos\");\n\nCan be used to customize the title and sidebars.\n\n=head2 organization_url\n\n  $url = $settings->organization_url;\n  $settings = $settings->organization_url(Mojo::URL->new(\"https://...\"));\n\nWill be used together with a custom L</organization_name> to add links to your\norganization in the Convos UI.\n\n=head2 public_attributes\n\n  $array_ref = $settings->public_attributes;\n\nReturns a list of L</ATTRIBUTES> that are considered open_to_public.\nCurrently that is: L</contact>, L</default_connection>,\nL</forced_connection>, L</open_to_public>, L</organization_name> and\nL</organization_url>.\n\n=head2 rtc\n\n  $hash_ref = $settings->rtc;\n\nHolds information about how to set up a\nL<https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection>. For now,\nit can be configured with an environment variable. Example:\n\n  # Required for signalling\n  CONVOS_STUN=stun://superwoman:kryptonite@stun.example.com:3478?&bundlePolicy=balanced&credentialType=password&iceTransportPolicy=all&rtcpMuxPolicy=require\n\n  # Required for audio/video if NAT traversing is impossible\n  CONVOS_TURN=turn://superwoman:kryptonite@stun.example.com:3478\n\nThe URL above will result in the C<RTCPeerConnection> object with the following\nparameters:\n\n  new RTCPeerConnection({\n    bundlePolicy: \"balanced\",   // optional\n    iceTransportPolicy: \"all\",  // optional\n    rtcpMuxPolicy: \"require\",   // optional\n    iceServers: [\n      {\n        urls: \"stun:stun.example.com:3478\",  // required\n        credential: \"kryptonite\",            // optional\n        credentialType: \"password\",          // optional\n        username: \"superwoman\",              // optional\n      },\n      {\n        urls            => 'turn:turn.example.com:3478',\n        credential      => 'k2',\n        credential_type => 'password',\n        username        => 'superman',\n      },\n    ],\n  })\n\nThe simplest version of C<CONVOS_RTC> can be seen below, meaning all the query\nparameters and credentials are optional:\n\n  CONVOS_RTC=stun://stun.example.com:3478\n\nIMPORTANT! The username and password will be visible inside the browser's\ndeveloper tools, but you have to be logged in to see it.\n\n=head2 session_secrets\n\n  $array_ref = $settings->session_secrets;\n\nA list of strings used to make the session cookie safe. See also\nL<Mojolicious/secrets> for a longer description.\n\n=head2 uri\n\n  $path = $settings->uri;\n\nHolds a L<Mojo::Path> object, with the URI to where this object should be\nstored.\n\n=head1 METHODS\n\n=head2 defaults\n\n  $hash_ref = $settings->defaults;\n\nReturns default settings.\n\n=head2 id\n\n  $str = $settings->id;\n\nAlways returns \"settings\". Used by L<Convos::Core::Backend::File> and friends.\n\n=head2 load_p\n\n  $p = $settings->load_p;\n\nWill save L</ATTRIBUTES> to persistent storage.\nSee L<Convos::Core::Backend/save_object> for details.\n\n=head2 save_p\n\n  $p = $settings->save_p(\\%attributes);\n\nWill save L</ATTRIBUTES> to persistent storage. C<%attributes> is optional,\nbut willl be used to change the public L</ATTRIBUTES>.\n\nSee L<Convos::Core::Backend/save_object> for details.\n\n=head1 SEE ALSO\n\nL<Convos>.\n\n=cut\n", "package Convos::Util;\nuse Mojo::Base 'Exporter';\n\nuse JSON::Validator::Error;\nuse Mojo::Collection 'c';\nuse Mojo::File;\nuse Mojo::Util qw(b64_decode b64_encode md5_sum monkey_patch);\nuse Time::Piece ();\n\nuse constant DEBUG => $ENV{CONVOS_DEBUG} || 0;\n\nour $CHANNEL_RE = qr{[#&]};\nour @EXPORT_OK  = (\n  qw($CHANNEL_RE DEBUG E has_many pretty_connection_name require_module),\n  qw(sdp_decode sdp_encode short_checksum tp),\n);\n\nsub E {\n  my ($msg, $path) = @_;\n  $msg =~ s! at \\S+.*!!s;\n  $msg =~ s!:.*!.!s;\n  return {errors => [JSON::Validator::Error->new($path, $msg)]};\n}\n\nsub has_many {\n  my ($plural_accessor, $many_class, $constructor) = @_;\n  my $class = caller;\n\n  my $singular_accessor = $plural_accessor;\n  $singular_accessor =~ s!s$!!;\n\n  monkey_patch $class => $plural_accessor => sub {\n    return c(values %{$_[0]->{$plural_accessor} || {}});\n  };\n\n  monkey_patch $class => \"n_$plural_accessor\" => sub {\n    return int values %{$_[0]->{$plural_accessor} || {}};\n  };\n\n  monkey_patch $class => $singular_accessor => sub {\n    my ($self, $attrs) = @_;\n    my $id  = $many_class->id($attrs);\n    my $obj = $self->{$plural_accessor}{$id} || $self->$constructor($attrs);\n    map { $obj->{$_} = $attrs->{$_} } keys %$attrs if $self->{$plural_accessor}{$id};\n    $self->{$plural_accessor}{$id} = $obj;\n  };\n\n  monkey_patch $class => \"get_$singular_accessor\" => sub {\n    my ($self, $attrs) = @_;\n    my $id = ref $attrs ? $attrs->{id} || $many_class->id($attrs) : $attrs;\n    Carp::confess(\"Could not build 'id' for $class\") unless defined $id;\n    return $self->{$plural_accessor}{lc($id)};\n  };\n\n  my $remover = \"remove_$singular_accessor\";\n  $class->can($remover) or monkey_patch $class => $remover => sub {\n    my ($self, $attrs) = @_;\n    my $id = lc(ref $attrs ? $attrs->{id} || $many_class->id($attrs) : $attrs);\n    return delete $self->{$plural_accessor}{$id};\n  };\n}\n\nsub pretty_connection_name {\n  my $name = shift;\n\n  return '' unless defined $name;\n  return 'magnet' if $name =~ /\\birc\\.perl\\.org\\b/i;    # also match ssl.irc.perl.org\n  return 'efnet'  if $name =~ /\\befnet\\b/i;\n\n  $name = 'localhost' if $name eq '127.0.0.1';\n  $name =~ s!^(irc|chat)\\.!!;                           # remove common prefixes from server name\n  $name =~ s!:\\d+$!!;                                   # remove port\n  $name =~ s!\\.\\w{2,3}$!!;                              # remove .com, .no, ...\n  $name =~ s!\\.chat$!!;\n  $name =~ s![\\W_]+!-!g;                                # make pretty url\n  $name;\n}\n\nsub require_module {\n  my $name        = pop;\n  my $required_by = shift || caller;\n\n  return $name if eval \"require $name; 1\";\n  die <<\"HERE\";\n\n  You need to install $name to use $required_by:\n\n  \\$ ./script/convos cpanm -n $name\n\nHERE\n}\n\nsub sdp_decode {\n  return join \"\\r\\n\", map {\n    local $_ = \"$_\";\n    s/^F!(.+)\\s(.+)/{\"a=fingerprint:$1 \" . join ':', map {uc sprintf '%02x', ord $_} split '', b64_decode $2}/e;\n    s/^I!/a=ice-/;\n    s/^R!/a=rtpmap:/;\n    s/^T!(\\d+)/a=rtpmap:$1 telephone-event/;\n    $_;\n  } split(/\\r?\\n/, shift), '';\n}\n\nsub sdp_encode {\n  return join \"\\n\", map {\n    s/a=fingerprint:(.+)\\s(.+)/{\"F!$1 \" . b64_encode(join('', map {chr hex} split ':', $2), '')}/e;\n    local $_ = \"$_\";\n    s/^a=rtpmap:(\\d+) telephone-event/T!$1/;\n    s/^a=rtpmap:/R!/;\n    s/^a=ice-/I!/;\n    $_;\n  } grep { !/^(?:a=ssrc|a=extmap:\\d|a=fmtp:\\d|a=rtcp-fb:\\d)/ } split /\\r?\\n/, shift;\n}\n\nsub short_checksum {\n  my $checksum = 32 == length $_[0] && $_[0] =~ /^[a-z0-9]{32}$/ ? shift : md5_sum shift;\n  my $short    = b64_encode pack 'H*', $checksum;\n  $short =~ s![eioEIO+=/\\n]!!g;\n  return substr $short, 0, 16;\n}\n\nsub tp {\n  local $_ = shift;\n  $_ =~ s!Z$!!;\n  $_ =~ s!\\.\\d*$!!;\n  Time::Piece->strptime($_, '%Y-%m-%dT%H:%M:%S');\n}\n\n1;\n\n=encoding utf8\n\n=head1 NAME\n\nConvos::Util - Utility functions\n\n=head1 SYNOPSIS\n\n  package Convos::Core::Core;\n  use Convos::Util qw(DEBUG has_many);\n\n=head1 DESCRIPTION\n\nL<Convos::Util> is a utily module for L<Convos>.\n\n=head1 FUNCTIONS\n\n=head2 has_many\n\n  has_many $attribute => $many_class_class => sub {\n    my ($obj, $attrs) = @_;\n    return $many_class_class->new($attrs);\n  };\n\nUsed to automatically define a create/update, get and list method to the\ncaller class. Example:\n\n  has_many users => \"Convos::Core::User\" => sub {\n    my ($obj, $attrs) = @_;\n    return Convos::Core::User->new($attrs);\n  };\n\nThe definition above results in the following methods:\n\n  # Create or update and existing Convos::Core::User object\n  $user = $class->user(\\%attrs);\n\n  # Retrieve a Convos::Core::User object or undef()\n  $user = $class->get_user($id);\n  $user = $class->get_user(\\%attrs);\n\n  # Retrieve an array-ref of Convos::Core::User objects\n  $users = $class->users;\n\n  # Remove a user\n  $user = $class->remove_user($id);\n  $user = $class->remove_user(\\%attrs);\n\n=head2 pretty_connection_name\n\n  $str = pretty_connection_name($hostname);\n\nWill turn a given hostname into a nicer connection name.\n\n=head2 require_module\n\n  require_module \"Some::Module\";\n\nWill load the module or C<die()> with a message for how to install it.\n\n=head2 sdp_decode\n\n  $sdp = sdp_decode \"v=0\\n...\";\n\nUsed to decode the C<$sdp> created by L</sdp_encode>.\n\n=head2 sdp_encode\n\n  $sdp = sdp_encode \"v=0\\r\\n...\";\n\nWill filter and compress a SDP message.\n\n=head2 tp\n\n  $tp = tp \"2020-06-09T02:39:51\";\n  $tp = tp \"2020-06-09T02:39:51Z\";\n  $tp = tp \"2020-06-09T02:39:51.001Z\";\n\nUsed to create a L<Time::Piece> object from a date-time string.\n\n=head2 short_checksum\n\n  $str = short_checksum($md5_sum);\n\nWill take a MD5 or SHA1 string and shorten it.\n\n  # \"7Mvfktc4v4MZ8q68\"\n  short_checksum \"eccbc87e4b5ce2fe28308fd9f2a7baf3\";\n\n=head1 SEE ALSO\n\nL<Convos>.\n\n=cut\n", "#!perl\nuse lib '.';\nuse t::Helper;\nuse Mojo::File 'path';\n\nnote 'Test defaults';\ndelete $ENV{CONVOS_SECRETS};\nmy $i      = 0;\nmy $convos = Convos->new;\nmy $secret = $convos->secrets->[0];\nis $convos->config->{backend}, 'Convos::Core::Backend::File', 'default backend';\nis $convos->settings('default_connection'), 'irc://chat.freenode.net:6697/%23convos',\n  'default default_connection';\nis $convos->config->{home}, $ENV{CONVOS_HOME}, 'home from ENV';\nis $convos->settings('organization_name'), 'Convos',              'default organization_name';\nis $convos->settings('organization_url'),  'https://convos.chat', 'default organization_url';\nis $convos->config->{hypnotoad}{pid_file}, undef, 'default pid_file';\nlike $convos->settings('local_secret'), qr/^\\w{32}$/, 'generated local_secret';\nlike $secret, qr/^[a-z0-9]{40}$/, 'default secrets';\n\nnote 'Make sure we load the same secret';\nis(Convos->new->secrets->[0], $secret, 'reusing generated secret');\n\nnote 'Test loading plugins and default from environment';\nMojo::File->new($ENV{CONVOS_HOME}, 'settings.json')->remove;\n$i++;\n\nmy @plugins;\nMojo::Util::monkey_patch(\n  Convos => plugin => sub {\n    my $self = shift;\n    return $self->Mojolicious::plugin(@_) unless $_[0] =~ /Plugin[A-Z\\d]/;\n    push @plugins, ($i, @_);\n  }\n);\n\n$ENV{CONVOS_PLUGINS}            = 'PluginX';\n$ENV{CONVOS_BACKEND}            = 'Convos::Core::Backend';\n$ENV{CONVOS_DEFAULT_CONNECTION} = 'irc.example.com';\n$ENV{CONVOS_FRONTEND_PID_FILE}  = 'pidfile.pid';\n$ENV{CONVOS_ORGANIZATION_NAME}  = 'cool.org';\n$ENV{CONVOS_ORGANIZATION_URL}   = 'https://thorsen.pm';\n$ENV{CONVOS_SECRETS}            = 'super,duper,secret';\n$ENV{CONVOS_SECURE_COOKIES}     = 1;\n$convos                         = Convos->new;\nis $convos->config->{backend}, 'Convos::Core::Backend', 'env backend';\nis $convos->settings('default_connection'), 'irc://irc.example.com', 'env default_connection';\nis $convos->settings('forced_connection'),  0,                       'default forced_connection';\nis $convos->settings('organization_name'),  'cool.org',              'env organization_name';\nis $convos->settings('organization_url'),   'https://thorsen.pm',    'env organization_url';\nis_deeply($convos->secrets, [qw(super duper secret)], 'env secrets');\nis $plugins[1], 'PluginX', 'PluginX';\n\nnote 'Testing forced irc server';\nMojo::File->new($ENV{CONVOS_HOME}, 'settings.json')->remove;\n$ENV{CONVOS_FORCED_IRC_SERVER} = 'irc://localhost:1234/%23cool_channel';\n$convos = Convos->new;\nis $convos->settings('default_connection'), 'irc://localhost:1234/%23cool_channel',\n  'forced default_connection';\nis $convos->settings('forced_connection'), 1, 'env CONVOS_FORCED_IRC_SERVER';\n\ndone_testing;\n", "use Test::More;\nuse Convos::Util qw(require_module sdp_decode sdp_encode short_checksum);\nuse Mojo::Loader 'data_section';\nuse Mojo::Util qw(b64_encode gzip md5_sum);\n\nis short_checksum(md5_sum(3)), '7Mvfktc4v4MZ8q68', 'short_checksum md5_sum';\nis short_checksum('jhthorsen@cpan.org'), 'gGgA67dutavZz2t6', 'short_checksum email';\nis short_checksum(md5_sum('jhthorsen@cpan.org')), 'gGgA67dutavZz2t6',\n  'short_checksum md5_sum email';\n\neval { require_module 'Foo::Bar' };\nmy $err = $@;\nlike $err, qr{You need to install Foo::Bar to use main:}, 'require_module failed message';\nlike $err, qr{\\./script/convos cpanm -n Foo::Bar},        'require_module failed cpanm';\n\neval { require_module 'Convos::Util' };\nok !$@, 'require_module success';\n\nfor my $name (qw(answer.sdp offer.sdp)) {\n  my $sdp     = data_section 'main', $name;\n  my @sdp     = split /\\r?\\n/, $sdp;\n  my $encoded = sdp_encode join \"\\r\\n\", @sdp;\n  my @decoded = split /\\r\\n/, sdp_decode $encoded;\n  my $n       = 0;\n\n  @sdp = grep { !/^(?:a=ssrc|a=extmap:\\d|a=fmtp:\\d|a=rtcp-fb:\\d)/ } @sdp;\n  is shift(@decoded), shift(@sdp), \"sdp rountrip (@{[++$n]}) $name\" while @sdp;\n  unlike $encoded, qr{\\r\\n}, \"newlines in $name\";\n\n  my $sl = length $sdp;\n  my $zl = length b64_encode gzip($encoded), '';\n  ok $zl < $sl, \"gzip $name $zl < $sl\";\n}\n\ndone_testing;\n\n__DATA__\n@@ answer.sdp\nv=0\no=mozilla...THIS_IS_SDPARTA-76.0.1 6307873433363431743 0 IN IP4 0.0.0.0\ns=-\nt=0 0\na=fingerprint:sha-256 19:97:6D:29:DC:FB:AE:24:DB:9C:04:B9:CF:AA:E7:D4:A3:8C:77:89:2F:79:0C:7A:58:C4:83:9E:C8:A8:2A:1A\na=group:BUNDLE 0 1\na=ice-options:trickle\na=msid-semantic:WMS *\nm=audio 9 UDP/TLS/RTP/SAVPF 111 9 0 8 126\nc=IN IP4 0.0.0.0\na=sendrecv\na=fmtp:111 maxplaybackrate=48000;stereo=1;useinbandfec=1\na=fmtp:126 0-15\na=ice-pwd:83fbffaf4093d3b10cefca58312faff8\na=ice-ufrag:a38d67c4\na=mid:0\na=msid:{3828b2e3-a1b7-0941-860e-4a1fbda13c75} {af518c82-5fd6-a240-b390-f6063724dbee}\na=rtcp-mux\na=rtpmap:111 opus/48000/2\na=rtpmap:9 G722/8000/1\na=rtpmap:0 PCMU/8000\na=rtpmap:8 PCMA/8000\na=rtpmap:126 telephone-event/8000/1\na=setup:active\na=ssrc:3841967369 cname:{aba0d2fb-f1b2-014d-8415-11a2d658b7d0}\nm=video 9 UDP/TLS/RTP/SAVPF 96 98\nc=IN IP4 0.0.0.0\na=sendrecv\na=fmtp:96 max-fs=12288;max-fr=60\na=fmtp:98 max-fs=12288;max-fr=60\na=ice-pwd:83fbffaf4093d3b10cefca58312faff8\na=ice-ufrag:a38d67c4\na=mid:1\na=msid:{3828b2e3-a1b7-0941-860e-4a1fbda13c75} {fdd59892-dd57-6543-ab74-482d30dadce8}\na=rtcp-mux\na=rtpmap:96 VP8/90000\na=rtpmap:98 VP9/90000\na=setup:active\na=ssrc:1551183966 cname:{aba0d2fb-f1b2-014d-8415-11a2d658b7d0}\n@@ offer.sdp\nv=0\no=- 7633300665000791411 2 IN IP4 127.0.0.1\ns=-\nt=0 0\na=group:BUNDLE 0 1\na=msid-semantic: WMS Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 104 9 0 8 106 105 13 110 112 113 126\nc=IN IP4 0.0.0.0\na=rtcp:9 IN IP4 0.0.0.0\na=ice-ufrag:50VQ\na=ice-pwd:b6/176+swvZtv+ag5TuQ34mO\na=ice-options:trickle\na=fingerprint:sha-256 D1:C0:81:63:E2:85:83:95:88:92:1B:FF:B8:2B:0E:65:8E:0A:0F:41:D6:77:B6:1C:0F:61:E9:57:31:BA:BA:57\na=setup:actpass\na=mid:0\na=sendrecv\na=msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k 60e954e1-aa3a-417f-a318-f9712a8a1f3c\na=rtcp-mux\na=rtpmap:111 opus/48000/2\na=rtpmap:103 ISAC/16000\na=rtpmap:104 ISAC/32000\na=rtpmap:9 G722/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:8 PCMA/8000\na=rtpmap:106 CN/32000\na=rtpmap:105 CN/16000\na=rtpmap:13 CN/8000\na=rtpmap:110 telephone-event/48000\na=rtpmap:112 telephone-event/32000\na=rtpmap:113 telephone-event/16000\na=rtpmap:126 telephone-event/8000\na=ssrc:618251450 cname:rP1D9wZr3NEp/aEv\na=ssrc:618251450 msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k 60e954e1-aa3a-417f-a318-f9712a8a1f3c\na=ssrc:618251450 mslabel:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k\na=ssrc:618251450 label:60e954e1-aa3a-417f-a318-f9712a8a1f3c\nm=video 9 UDP/TLS/RTP/SAVPF 96 97 98 99 100 101 102 122 127 121 125 107 108 109 124 120 123 119 114 115 116\nc=IN IP4 0.0.0.0\na=rtcp:9 IN IP4 0.0.0.0\na=ice-ufrag:50VQ\na=ice-pwd:b6/176+swvZtv+ag5TuQ34mO\na=ice-options:trickle\na=fingerprint:sha-256 D1:C0:81:63:E2:85:83:95:88:92:1B:FF:B8:2B:0E:65:8E:0A:0F:41:D6:77:B6:1C:0F:61:E9:57:31:BA:BA:57\na=setup:actpass\na=mid:1\na=sendrecv\na=msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k afe3d0c2-2b1d-421c-a582-884a78386aa5\na=rtcp-mux\na=rtcp-rsize\na=rtpmap:96 VP8/90000\na=rtpmap:97 rtx/90000\na=rtpmap:98 VP9/90000\na=rtpmap:99 rtx/90000\na=rtpmap:100 VP9/90000\na=rtpmap:101 rtx/90000\na=rtpmap:102 H264/90000\na=rtpmap:122 rtx/90000\na=rtpmap:127 H264/90000\na=rtpmap:121 rtx/90000\na=rtpmap:125 H264/90000\na=rtpmap:107 rtx/90000\na=rtpmap:108 H264/90000\na=rtpmap:109 rtx/90000\na=rtpmap:124 H264/90000\na=rtpmap:120 rtx/90000\na=rtpmap:123 H264/90000\na=rtpmap:119 rtx/90000\na=rtpmap:114 red/90000\na=rtpmap:115 rtx/90000\na=rtpmap:116 ulpfec/90000\na=ssrc-group:FID 2857721486 1595208456\na=ssrc:2857721486 cname:rP1D9wZr3NEp/aEv\na=ssrc:2857721486 msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k afe3d0c2-2b1d-421c-a582-884a78386aa5\na=ssrc:2857721486 mslabel:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k\na=ssrc:2857721486 label:afe3d0c2-2b1d-421c-a582-884a78386aa5\na=ssrc:1595208456 cname:rP1D9wZr3NEp/aEv\na=ssrc:1595208456 msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k afe3d0c2-2b1d-421c-a582-884a78386aa5\na=ssrc:1595208456 mslabel:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k\na=ssrc:1595208456 label:afe3d0c2-2b1d-421c-a582-884a78386aa5\n"], "fixing_code": ["package Convos::Core::Settings;\nuse Mojo::Base -base;\n\nuse Convos::Util 'generate_secret';\nuse Mojo::JSON qw(false true);\nuse Mojo::Path;\nuse Mojo::URL;\n\nhas contact => sub { $ENV{CONVOS_CONTACT} || 'mailto:root@localhost' };\nsub core { shift->{core} or die 'core is required in constructor' }\nhas default_connection => \\&_build_default_connection;\nhas forced_connection =>\n  sub { $ENV{CONVOS_FORCED_CONNECTION} || $ENV{CONVOS_FORCED_IRC_SERVER} ? true : false };\nsub id {'settings'}\nhas local_secret   => sub { $ENV{CONVOS_LOCAL_SECRET} || generate_secret };\nhas open_to_public => sub {false};\nhas organization_name =>\n  sub { $ENV{CONVOS_ORGANIZATION_NAME} || shift->defaults->{organization_name} };\nhas organization_url =>\n  sub { Mojo::URL->new($ENV{CONVOS_ORGANIZATION_URL} || shift->defaults->{organization_url}) };\n\nsub public_attributes {\n  return [\n    qw(contact default_connection forced_connection),\n    qw(open_to_public organization_name organization_url),\n  ];\n}\n\nhas rtc => sub {\n  my $self = shift;\n  my $config;\n\n  for my $type (qw(stun turn)) {\n    my $env_key = sprintf 'CONVOS_%s', uc $type;\n    my $url     = Mojo::URL->new($ENV{$env_key} // \"$type://\");\n    next unless $url->host;\n\n    $config ||= $url->query->to_hash;\n    my $server = {urls => sprintf '%s:%s', $url->scheme || 'stun', $url->host_port};\n    $server->{username}   = $url->username if $url->username;\n    $server->{credential} = $url->password if $url->password;\n    $server->{credential_type} = $url->query->param('credentialType') // 'password'\n      if $url->query->param('credentialType')\n      or $url->password;\n    push @{$config->{ice_servers}}, $server;\n  }\n\n  $config ||= {};\n  delete $config->{credentialType};\n  return $config;\n};\n\nhas session_secrets => \\&_build_session_secrets;\n\nsub defaults {\n  return {organization_name => 'Convos', organization_url => 'https://convos.chat'};\n}\n\nsub load_p {\n  my $self = shift;\n  return $self->core->backend->load_object_p($self)->then(sub { $self->_set_attributes(shift, 1) });\n}\n\nsub save_p {\n  my $self = shift;\n  $self->_set_attributes(shift, 0) if ref $_[0] eq 'HASH';\n  my $p = $self->core->backend->save_object_p($self, @_);\n  return $p;\n}\n\nsub uri { Mojo::Path->new('settings.json') }\n\nsub _build_default_connection {\n  my $self = shift;\n\n  my @urls = map { $ENV{uc(\"CONVOS_$_\")} // '' }\n    qw(forced_connection forced_irc_server default_connection default_server);\n\n  for my $url (grep {$_} @urls) {\n    next unless 3 < length $url;    # skip \"0\", \"1\" and \"yes\"\n    $url = \"irc://$url\" unless $url =~ m!^\\w+://!;\n    return Mojo::URL->new($url);\n  }\n\n  return Mojo::URL->new('irc://chat.freenode.net:6697/%23convos');\n}\n\nsub _build_session_secrets {\n  my $self = shift;\n  return [split /,/, $ENV{CONVOS_SECRETS} || ''] if $ENV{CONVOS_SECRETS};\n\n  my $file    = $self->core->home->child('secrets');\n  my $secrets = -r $file ? [split /\u201a/, $file->slurp] : [];\n  $file->remove if -e $file;\n\n  return @$secrets ? $secrets : [generate_secret];\n}\n\nsub _set_attributes {\n  my ($self, $params, $safe_source) = @_;\n\n  $self->$_($params->{$_})\n    for grep { defined $params->{$_} }\n    qw(contact forced_connection open_to_public organization_name);\n\n  $self->$_(Mojo::URL->new($params->{$_}))\n    for grep { defined $params->{$_} } qw(default_connection organization_url);\n\n  if ($safe_source) {\n    $self->$_($params->{$_}) for grep { defined $params->{$_} } qw(local_secret session_secrets);\n  }\n\n  return $self;\n}\n\nsub TO_JSON {\n  my ($self, $persist) = @_;\n\n  my %json = map { ($_ => $self->$_) } @{$self->public_attributes};\n  $json{$_} = $json{$_}->to_string for qw(default_connection organization_url);\n\n  if ($persist) {\n    $json{local_secret}    = $self->local_secret;\n    $json{session_secrets} = $self->session_secrets;\n  }\n\n  return \\%json;\n}\n\n1;\n\n=encoding utf8\n\n=head1 NAME\n\nConvos::Core::Settings - Convos settings\n\n=head1 DESCRIPTION\n\nL<Convos::Core::Settings> is a class used to model Convos server settings.\n\n=head1 ATTRIBUTES\n\n=head2 contact\n\n  $str = $settings->contact;\n  $settings = $settings->contact(\"mailto:root@localhost\");\n\nHolds a string with an URL to where the Convos admin can be contacted.\n\n=head2 core\n\n  $obj = $settings->core;\n\nHolds a L<Convos::Core> object.\n\n=head2 default_connection\n\n  $url = $settings->default_connection;\n  $settings = $settings->default_connection(Mojo::URL->new(\"irc://...\"));\n\nHolds a L<Mojo::URL> object with the default connection URL. Default value\nis \"irc://chat.freenode.net:6697/%23convos\". (Subject to change)\n\n=head2 forced_connection\n\n  $bool = $settings->forced_connection;\n  $settings = $settings->forced_connection(Mojo::JSON::true);\n\nTrue if this instance of Convos can only connect to the L</default_connection>.\n\n=head2 local_secret\n\n  $str = $settings->local_secret;\n\nHolds a local password/secret that can be used to run admin actions from\nlocalhost.\n\n=head2 open_to_public\n\n  $bool = $settings->open_to_public;\n  $settings = $settings->open_to_public(Mojo::JSON::true);\n\nTrue if users can register without an invite link.\n\n=head2 organization_name\n\n  $str = $settings->organization_name;\n  $settings = $settings->organization_name(\"Convos\");\n\nCan be used to customize the title and sidebars.\n\n=head2 organization_url\n\n  $url = $settings->organization_url;\n  $settings = $settings->organization_url(Mojo::URL->new(\"https://...\"));\n\nWill be used together with a custom L</organization_name> to add links to your\norganization in the Convos UI.\n\n=head2 public_attributes\n\n  $array_ref = $settings->public_attributes;\n\nReturns a list of L</ATTRIBUTES> that are considered open_to_public.\nCurrently that is: L</contact>, L</default_connection>,\nL</forced_connection>, L</open_to_public>, L</organization_name> and\nL</organization_url>.\n\n=head2 rtc\n\n  $hash_ref = $settings->rtc;\n\nHolds information about how to set up a\nL<https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection>. For now,\nit can be configured with an environment variable. Example:\n\n  # Required for signalling\n  CONVOS_STUN=stun://superwoman:kryptonite@stun.example.com:3478?&bundlePolicy=balanced&credentialType=password&iceTransportPolicy=all&rtcpMuxPolicy=require\n\n  # Required for audio/video if NAT traversing is impossible\n  CONVOS_TURN=turn://superwoman:kryptonite@stun.example.com:3478\n\nThe URL above will result in the C<RTCPeerConnection> object with the following\nparameters:\n\n  new RTCPeerConnection({\n    bundlePolicy: \"balanced\",   // optional\n    iceTransportPolicy: \"all\",  // optional\n    rtcpMuxPolicy: \"require\",   // optional\n    iceServers: [\n      {\n        urls: \"stun:stun.example.com:3478\",  // required\n        credential: \"kryptonite\",            // optional\n        credentialType: \"password\",          // optional\n        username: \"superwoman\",              // optional\n      },\n      {\n        urls            => 'turn:turn.example.com:3478',\n        credential      => 'k2',\n        credential_type => 'password',\n        username        => 'superman',\n      },\n    ],\n  })\n\nThe simplest version of C<CONVOS_RTC> can be seen below, meaning all the query\nparameters and credentials are optional:\n\n  CONVOS_RTC=stun://stun.example.com:3478\n\nIMPORTANT! The username and password will be visible inside the browser's\ndeveloper tools, but you have to be logged in to see it.\n\n=head2 session_secrets\n\n  $array_ref = $settings->session_secrets;\n\nA list of strings used to make the session cookie safe. See also\nL<Mojolicious/secrets> for a longer description.\n\n=head2 uri\n\n  $path = $settings->uri;\n\nHolds a L<Mojo::Path> object, with the URI to where this object should be\nstored.\n\n=head1 METHODS\n\n=head2 defaults\n\n  $hash_ref = $settings->defaults;\n\nReturns default settings.\n\n=head2 id\n\n  $str = $settings->id;\n\nAlways returns \"settings\". Used by L<Convos::Core::Backend::File> and friends.\n\n=head2 load_p\n\n  $p = $settings->load_p;\n\nWill save L</ATTRIBUTES> to persistent storage.\nSee L<Convos::Core::Backend/save_object> for details.\n\n=head2 save_p\n\n  $p = $settings->save_p(\\%attributes);\n\nWill save L</ATTRIBUTES> to persistent storage. C<%attributes> is optional,\nbut willl be used to change the public L</ATTRIBUTES>.\n\nSee L<Convos::Core::Backend/save_object> for details.\n\n=head1 SEE ALSO\n\nL<Convos>.\n\n=cut\n", "package Convos::Util;\nuse Mojo::Base 'Exporter';\n\nuse JSON::Validator::Error;\nuse Mojo::Collection 'c';\nuse Mojo::Util qw(b64_decode b64_encode md5_sum monkey_patch sha1_sum);\nuse Sys::Hostname ();\nuse Time::HiRes   ();\nuse Time::Piece   ();\n\nuse constant DEBUG => $ENV{CONVOS_DEBUG} || 0;\n\nour $CHANNEL_RE = qr{[#&]};\nour @EXPORT_OK  = (\n  qw($CHANNEL_RE DEBUG E generate_secret has_many pretty_connection_name),\n  qw(require_module sdp_decode sdp_encode short_checksum tp),\n);\n\nsub E {\n  my ($msg, $path) = @_;\n  $msg =~ s! at \\S+.*!!s;\n  $msg =~ s!:.*!.!s;\n  return {errors => [JSON::Validator::Error->new($path, $msg)]};\n}\n\nsub generate_secret {\n  return eval { _generate_secret_urandom() } || _generate_secret_fallback();\n}\n\nsub has_many {\n  my ($plural_accessor, $many_class, $constructor) = @_;\n  my $class = caller;\n\n  my $singular_accessor = $plural_accessor;\n  $singular_accessor =~ s!s$!!;\n\n  monkey_patch $class => $plural_accessor => sub {\n    return c(values %{$_[0]->{$plural_accessor} || {}});\n  };\n\n  monkey_patch $class => \"n_$plural_accessor\" => sub {\n    return int values %{$_[0]->{$plural_accessor} || {}};\n  };\n\n  monkey_patch $class => $singular_accessor => sub {\n    my ($self, $attrs) = @_;\n    my $id  = $many_class->id($attrs);\n    my $obj = $self->{$plural_accessor}{$id} || $self->$constructor($attrs);\n    map { $obj->{$_} = $attrs->{$_} } keys %$attrs if $self->{$plural_accessor}{$id};\n    $self->{$plural_accessor}{$id} = $obj;\n  };\n\n  monkey_patch $class => \"get_$singular_accessor\" => sub {\n    my ($self, $attrs) = @_;\n    my $id = ref $attrs ? $attrs->{id} || $many_class->id($attrs) : $attrs;\n    Carp::confess(\"Could not build 'id' for $class\") unless defined $id;\n    return $self->{$plural_accessor}{lc($id)};\n  };\n\n  my $remover = \"remove_$singular_accessor\";\n  $class->can($remover) or monkey_patch $class => $remover => sub {\n    my ($self, $attrs) = @_;\n    my $id = lc(ref $attrs ? $attrs->{id} || $many_class->id($attrs) : $attrs);\n    return delete $self->{$plural_accessor}{$id};\n  };\n}\n\nsub pretty_connection_name {\n  my $name = shift;\n\n  return '' unless defined $name;\n  return 'magnet' if $name =~ /\\birc\\.perl\\.org\\b/i;    # also match ssl.irc.perl.org\n  return 'efnet'  if $name =~ /\\befnet\\b/i;\n\n  $name = 'localhost' if $name eq '127.0.0.1';\n  $name =~ s!^(irc|chat)\\.!!;                           # remove common prefixes from server name\n  $name =~ s!:\\d+$!!;                                   # remove port\n  $name =~ s!\\.\\w{2,3}$!!;                              # remove .com, .no, ...\n  $name =~ s!\\.chat$!!;\n  $name =~ s![\\W_]+!-!g;                                # make pretty url\n  $name;\n}\n\nsub require_module {\n  my $name        = pop;\n  my $required_by = shift || caller;\n\n  return $name if eval \"require $name; 1\";\n  die <<\"HERE\";\n\n  You need to install $name to use $required_by:\n\n  \\$ ./script/convos cpanm -n $name\n\nHERE\n}\n\nsub sdp_decode {\n  return join \"\\r\\n\", map {\n    local $_ = \"$_\";\n    s/^F!(.+)\\s(.+)/{\"a=fingerprint:$1 \" . join ':', map {uc sprintf '%02x', ord $_} split '', b64_decode $2}/e;\n    s/^I!/a=ice-/;\n    s/^R!/a=rtpmap:/;\n    s/^T!(\\d+)/a=rtpmap:$1 telephone-event/;\n    $_;\n  } split(/\\r?\\n/, shift), '';\n}\n\nsub sdp_encode {\n  return join \"\\n\", map {\n    s/a=fingerprint:(.+)\\s(.+)/{\"F!$1 \" . b64_encode(join('', map {chr hex} split ':', $2), '')}/e;\n    local $_ = \"$_\";\n    s/^a=rtpmap:(\\d+) telephone-event/T!$1/;\n    s/^a=rtpmap:/R!/;\n    s/^a=ice-/I!/;\n    $_;\n  } grep { !/^(?:a=ssrc|a=extmap:\\d|a=fmtp:\\d|a=rtcp-fb:\\d)/ } split /\\r?\\n/, shift;\n}\n\nsub short_checksum {\n  my $checksum = 32 == length $_[0] && $_[0] =~ /^[a-z0-9]{32}$/ ? shift : md5_sum shift;\n  my $short    = b64_encode pack 'H*', $checksum;\n  $short =~ s![eioEIO+=/\\n]!!g;\n  return substr $short, 0, 16;\n}\n\nsub tp {\n  local $_ = shift;\n  $_ =~ s!Z$!!;\n  $_ =~ s!\\.\\d*$!!;\n  Time::Piece->strptime($_, '%Y-%m-%dT%H:%M:%S');\n}\n\nsub _generate_secret_fallback {\n  return sha1_sum join ':', rand(), $$, $<, Sys::Hostname::hostname(), Time::HiRes::time();\n}\n\nsub _generate_secret_urandom {\n  my $len = shift || $ENV{CONVOS_SECRET_URANDOM_READ_LEN} || 128;\n  open my $fh, '<', '/dev/urandom' or die \"Can't open /dev/urandom: $!\";\n  my $ret = sysread $fh, my ($secret), $len;\n  return sha1_sum $secret if $ret == $len;\n  die qq{Could not read $len bytes from \"/dev/urandom\": $!};\n}\n\n1;\n\n=encoding utf8\n\n=head1 NAME\n\nConvos::Util - Utility functions\n\n=head1 SYNOPSIS\n\n  package Convos::Core::Core;\n  use Convos::Util qw(DEBUG has_many);\n\n=head1 DESCRIPTION\n\nL<Convos::Util> is a utily module for L<Convos>.\n\n=head1 FUNCTIONS\n\n=head2 generate_secret\n\n  $str = generate_secret;\n\nReturns a SHA1 sum of bytes from \"/dev/urandom\" or fallback to a SHA1 sum of:\n\n    rand()     # Not cryptographically secure, but pseudo random\n    $$         # Will probably be \"1\" inside Docker and probably less than 32768 on Linux\n    $<         # Will probably be \"0\" inside Docker and probably less than 10000 on Linux\n    hostname() # Will be unique inside Docker and guessable on Linux\n    time()     # Floating seconds since the epoch (Ex: 1592094819.82439)\n\n=head2 has_many\n\n  has_many $attribute => $many_class_class => sub {\n    my ($obj, $attrs) = @_;\n    return $many_class_class->new($attrs);\n  };\n\nUsed to automatically define a create/update, get and list method to the\ncaller class. Example:\n\n  has_many users => \"Convos::Core::User\" => sub {\n    my ($obj, $attrs) = @_;\n    return Convos::Core::User->new($attrs);\n  };\n\nThe definition above results in the following methods:\n\n  # Create or update and existing Convos::Core::User object\n  $user = $class->user(\\%attrs);\n\n  # Retrieve a Convos::Core::User object or undef()\n  $user = $class->get_user($id);\n  $user = $class->get_user(\\%attrs);\n\n  # Retrieve an array-ref of Convos::Core::User objects\n  $users = $class->users;\n\n  # Remove a user\n  $user = $class->remove_user($id);\n  $user = $class->remove_user(\\%attrs);\n\n=head2 pretty_connection_name\n\n  $str = pretty_connection_name($hostname);\n\nWill turn a given hostname into a nicer connection name.\n\n=head2 require_module\n\n  require_module \"Some::Module\";\n\nWill load the module or C<die()> with a message for how to install it.\n\n=head2 sdp_decode\n\n  $sdp = sdp_decode \"v=0\\n...\";\n\nUsed to decode the C<$sdp> created by L</sdp_encode>.\n\n=head2 sdp_encode\n\n  $sdp = sdp_encode \"v=0\\r\\n...\";\n\nWill filter and compress a SDP message.\n\n=head2 tp\n\n  $tp = tp \"2020-06-09T02:39:51\";\n  $tp = tp \"2020-06-09T02:39:51Z\";\n  $tp = tp \"2020-06-09T02:39:51.001Z\";\n\nUsed to create a L<Time::Piece> object from a date-time string.\n\n=head2 short_checksum\n\n  $str = short_checksum($md5_sum);\n\nWill take a MD5 or SHA1 string and shorten it.\n\n  # \"7Mvfktc4v4MZ8q68\"\n  short_checksum \"eccbc87e4b5ce2fe28308fd9f2a7baf3\";\n\n=head1 SEE ALSO\n\nL<Convos>.\n\n=cut\n", "#!perl\nuse lib '.';\nuse t::Helper;\nuse Mojo::File 'path';\n\nnote 'Test defaults';\ndelete $ENV{CONVOS_SECRETS};\nmy $i      = 0;\nmy $convos = Convos->new;\nmy $secret = $convos->secrets->[0];\nis $convos->config->{backend}, 'Convos::Core::Backend::File', 'default backend';\nis $convos->settings('default_connection'), 'irc://chat.freenode.net:6697/%23convos',\n  'default default_connection';\nis $convos->config->{home}, $ENV{CONVOS_HOME}, 'home from ENV';\nis $convos->settings('organization_name'), 'Convos',              'default organization_name';\nis $convos->settings('organization_url'),  'https://convos.chat', 'default organization_url';\nis $convos->config->{hypnotoad}{pid_file}, undef, 'default pid_file';\nlike $convos->settings('local_secret'), qr/^\\w{40}$/, 'generated local_secret';\nlike $secret, qr/^[a-z0-9]{40}$/, 'default secrets';\n\nnote 'Make sure we load the same secret';\nis(Convos->new->secrets->[0], $secret, 'reusing generated secret');\n\nnote 'Test loading plugins and default from environment';\nMojo::File->new($ENV{CONVOS_HOME}, 'settings.json')->remove;\n$i++;\n\nmy @plugins;\nMojo::Util::monkey_patch(\n  Convos => plugin => sub {\n    my $self = shift;\n    return $self->Mojolicious::plugin(@_) unless $_[0] =~ /Plugin[A-Z\\d]/;\n    push @plugins, ($i, @_);\n  }\n);\n\n$ENV{CONVOS_PLUGINS}            = 'PluginX';\n$ENV{CONVOS_BACKEND}            = 'Convos::Core::Backend';\n$ENV{CONVOS_DEFAULT_CONNECTION} = 'irc.example.com';\n$ENV{CONVOS_FRONTEND_PID_FILE}  = 'pidfile.pid';\n$ENV{CONVOS_ORGANIZATION_NAME}  = 'cool.org';\n$ENV{CONVOS_ORGANIZATION_URL}   = 'https://thorsen.pm';\n$ENV{CONVOS_SECRETS}            = 'super,duper,secret';\n$ENV{CONVOS_SECURE_COOKIES}     = 1;\n$convos                         = Convos->new;\nis $convos->config->{backend}, 'Convos::Core::Backend', 'env backend';\nis $convos->settings('default_connection'), 'irc://irc.example.com', 'env default_connection';\nis $convos->settings('forced_connection'),  0,                       'default forced_connection';\nis $convos->settings('organization_name'),  'cool.org',              'env organization_name';\nis $convos->settings('organization_url'),   'https://thorsen.pm',    'env organization_url';\nis_deeply($convos->secrets, [qw(super duper secret)], 'env secrets');\nis $plugins[1], 'PluginX', 'PluginX';\n\nnote 'Testing forced irc server';\nMojo::File->new($ENV{CONVOS_HOME}, 'settings.json')->remove;\n$ENV{CONVOS_FORCED_IRC_SERVER} = 'irc://localhost:1234/%23cool_channel';\n$convos = Convos->new;\nis $convos->settings('default_connection'), 'irc://localhost:1234/%23cool_channel',\n  'forced default_connection';\nis $convos->settings('forced_connection'), 1, 'env CONVOS_FORCED_IRC_SERVER';\n\ndone_testing;\n", "use Test::More;\nuse Convos::Util qw(generate_secret require_module sdp_decode sdp_encode short_checksum);\nuse Mojo::Loader 'data_section';\nuse Mojo::Util qw(b64_encode gzip md5_sum);\n\nis short_checksum(md5_sum(3)), '7Mvfktc4v4MZ8q68', 'short_checksum md5_sum';\nis short_checksum('jhthorsen@cpan.org'), 'gGgA67dutavZz2t6', 'short_checksum email';\nis short_checksum(md5_sum('jhthorsen@cpan.org')), 'gGgA67dutavZz2t6',\n  'short_checksum md5_sum email';\n\neval { require_module 'Foo::Bar' };\nmy $err = $@;\nlike $err, qr{You need to install Foo::Bar to use main:}, 'require_module failed message';\nlike $err, qr{\\./script/convos cpanm -n Foo::Bar},        'require_module failed cpanm';\n\neval { require_module 'Convos::Util' };\nok !$@, 'require_module success';\n\nnote 'generate_secret';\nis length(generate_secret), 40, 'generate_secret';\nmy %secrets;\nmap { $secrets{+Convos::Util::_generate_secret_urandom()}++ } 1 .. 1000 if -r '/dev/urandom';\nmap { $secrets{+Convos::Util::_generate_secret_fallback()}++ } 1 .. 1000;\nis_deeply [values %secrets], [map {1} values %secrets],\n  '1..1000 is not nearly enough to prove anything, but testing it anyways';\n\nfor my $name (qw(answer.sdp offer.sdp)) {\n  my $sdp     = data_section 'main', $name;\n  my @sdp     = split /\\r?\\n/, $sdp;\n  my $encoded = sdp_encode join \"\\r\\n\", @sdp;\n  my @decoded = split /\\r\\n/, sdp_decode $encoded;\n  my $n       = 0;\n\n  @sdp = grep { !/^(?:a=ssrc|a=extmap:\\d|a=fmtp:\\d|a=rtcp-fb:\\d)/ } @sdp;\n  is shift(@decoded), shift(@sdp), \"sdp rountrip (@{[++$n]}) $name\" while @sdp;\n  unlike $encoded, qr{\\r\\n}, \"newlines in $name\";\n\n  my $sl = length $sdp;\n  my $zl = length b64_encode gzip($encoded), '';\n  ok $zl < $sl, \"gzip $name $zl < $sl\";\n}\n\ndone_testing;\n\n__DATA__\n@@ answer.sdp\nv=0\no=mozilla...THIS_IS_SDPARTA-76.0.1 6307873433363431743 0 IN IP4 0.0.0.0\ns=-\nt=0 0\na=fingerprint:sha-256 19:97:6D:29:DC:FB:AE:24:DB:9C:04:B9:CF:AA:E7:D4:A3:8C:77:89:2F:79:0C:7A:58:C4:83:9E:C8:A8:2A:1A\na=group:BUNDLE 0 1\na=ice-options:trickle\na=msid-semantic:WMS *\nm=audio 9 UDP/TLS/RTP/SAVPF 111 9 0 8 126\nc=IN IP4 0.0.0.0\na=sendrecv\na=fmtp:111 maxplaybackrate=48000;stereo=1;useinbandfec=1\na=fmtp:126 0-15\na=ice-pwd:83fbffaf4093d3b10cefca58312faff8\na=ice-ufrag:a38d67c4\na=mid:0\na=msid:{3828b2e3-a1b7-0941-860e-4a1fbda13c75} {af518c82-5fd6-a240-b390-f6063724dbee}\na=rtcp-mux\na=rtpmap:111 opus/48000/2\na=rtpmap:9 G722/8000/1\na=rtpmap:0 PCMU/8000\na=rtpmap:8 PCMA/8000\na=rtpmap:126 telephone-event/8000/1\na=setup:active\na=ssrc:3841967369 cname:{aba0d2fb-f1b2-014d-8415-11a2d658b7d0}\nm=video 9 UDP/TLS/RTP/SAVPF 96 98\nc=IN IP4 0.0.0.0\na=sendrecv\na=fmtp:96 max-fs=12288;max-fr=60\na=fmtp:98 max-fs=12288;max-fr=60\na=ice-pwd:83fbffaf4093d3b10cefca58312faff8\na=ice-ufrag:a38d67c4\na=mid:1\na=msid:{3828b2e3-a1b7-0941-860e-4a1fbda13c75} {fdd59892-dd57-6543-ab74-482d30dadce8}\na=rtcp-mux\na=rtpmap:96 VP8/90000\na=rtpmap:98 VP9/90000\na=setup:active\na=ssrc:1551183966 cname:{aba0d2fb-f1b2-014d-8415-11a2d658b7d0}\n@@ offer.sdp\nv=0\no=- 7633300665000791411 2 IN IP4 127.0.0.1\ns=-\nt=0 0\na=group:BUNDLE 0 1\na=msid-semantic: WMS Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 104 9 0 8 106 105 13 110 112 113 126\nc=IN IP4 0.0.0.0\na=rtcp:9 IN IP4 0.0.0.0\na=ice-ufrag:50VQ\na=ice-pwd:b6/176+swvZtv+ag5TuQ34mO\na=ice-options:trickle\na=fingerprint:sha-256 D1:C0:81:63:E2:85:83:95:88:92:1B:FF:B8:2B:0E:65:8E:0A:0F:41:D6:77:B6:1C:0F:61:E9:57:31:BA:BA:57\na=setup:actpass\na=mid:0\na=sendrecv\na=msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k 60e954e1-aa3a-417f-a318-f9712a8a1f3c\na=rtcp-mux\na=rtpmap:111 opus/48000/2\na=rtpmap:103 ISAC/16000\na=rtpmap:104 ISAC/32000\na=rtpmap:9 G722/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:8 PCMA/8000\na=rtpmap:106 CN/32000\na=rtpmap:105 CN/16000\na=rtpmap:13 CN/8000\na=rtpmap:110 telephone-event/48000\na=rtpmap:112 telephone-event/32000\na=rtpmap:113 telephone-event/16000\na=rtpmap:126 telephone-event/8000\na=ssrc:618251450 cname:rP1D9wZr3NEp/aEv\na=ssrc:618251450 msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k 60e954e1-aa3a-417f-a318-f9712a8a1f3c\na=ssrc:618251450 mslabel:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k\na=ssrc:618251450 label:60e954e1-aa3a-417f-a318-f9712a8a1f3c\nm=video 9 UDP/TLS/RTP/SAVPF 96 97 98 99 100 101 102 122 127 121 125 107 108 109 124 120 123 119 114 115 116\nc=IN IP4 0.0.0.0\na=rtcp:9 IN IP4 0.0.0.0\na=ice-ufrag:50VQ\na=ice-pwd:b6/176+swvZtv+ag5TuQ34mO\na=ice-options:trickle\na=fingerprint:sha-256 D1:C0:81:63:E2:85:83:95:88:92:1B:FF:B8:2B:0E:65:8E:0A:0F:41:D6:77:B6:1C:0F:61:E9:57:31:BA:BA:57\na=setup:actpass\na=mid:1\na=sendrecv\na=msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k afe3d0c2-2b1d-421c-a582-884a78386aa5\na=rtcp-mux\na=rtcp-rsize\na=rtpmap:96 VP8/90000\na=rtpmap:97 rtx/90000\na=rtpmap:98 VP9/90000\na=rtpmap:99 rtx/90000\na=rtpmap:100 VP9/90000\na=rtpmap:101 rtx/90000\na=rtpmap:102 H264/90000\na=rtpmap:122 rtx/90000\na=rtpmap:127 H264/90000\na=rtpmap:121 rtx/90000\na=rtpmap:125 H264/90000\na=rtpmap:107 rtx/90000\na=rtpmap:108 H264/90000\na=rtpmap:109 rtx/90000\na=rtpmap:124 H264/90000\na=rtpmap:120 rtx/90000\na=rtpmap:123 H264/90000\na=rtpmap:119 rtx/90000\na=rtpmap:114 red/90000\na=rtpmap:115 rtx/90000\na=rtpmap:116 ulpfec/90000\na=ssrc-group:FID 2857721486 1595208456\na=ssrc:2857721486 cname:rP1D9wZr3NEp/aEv\na=ssrc:2857721486 msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k afe3d0c2-2b1d-421c-a582-884a78386aa5\na=ssrc:2857721486 mslabel:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k\na=ssrc:2857721486 label:afe3d0c2-2b1d-421c-a582-884a78386aa5\na=ssrc:1595208456 cname:rP1D9wZr3NEp/aEv\na=ssrc:1595208456 msid:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k afe3d0c2-2b1d-421c-a582-884a78386aa5\na=ssrc:1595208456 mslabel:Y4J0aef1P4IP81lfHtL3LZ6fPDcIHm8qFl4k\na=ssrc:1595208456 label:afe3d0c2-2b1d-421c-a582-884a78386aa5\n"], "filenames": ["lib/Convos/Core/Settings.pm", "lib/Convos/Util.pm", "t/config.t", "t/util.t"], "buggy_code_start_loc": [3, 6, 18, 2], "buggy_code_end_loc": [116, 146, 19, 17], "fixing_code_start_loc": [4, 6, 18, 2], "fixing_code_end_loc": [98, 176, 19, 26], "type": "CWE-330", "message": "Convos before 4.20 does not properly generate a random secret in Core/Settings.pm and Util.pm. This leads to a predictable CONVOS_LOCAL_SECRET value, affecting password resets and invitations.", "other": {"cve": {"id": "CVE-2020-14423", "sourceIdentifier": "cve@mitre.org", "published": "2020-06-18T14:15:11.107", "lastModified": "2020-06-29T18:18:50.027", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Convos before 4.20 does not properly generate a random secret in Core/Settings.pm and Util.pm. This leads to a predictable CONVOS_LOCAL_SECRET value, affecting password resets and invitations."}, {"lang": "es", "value": "Convos versiones anteriores a 4.20, no genera apropiadamente un secreto aleatorio en el archivo Core/Settings.pm y Util.pm.. Esto conlleva a un valor de CONVOS_LOCAL_SECRET predecible, que afecta a los restablecimientos de contrase\u00f1a e invitaciones"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-330"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:convos:convos:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.20", "matchCriteriaId": "6EEEE2A3-43E7-43E0-8926-25A03646E946"}]}]}], "references": [{"url": "https://convos.chat/blog/2020/6/18/local-secret-got-more-secure", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/Nordaaker/convos/commit/54d1763ac65c05aad27ad454b4e5a62ba8352d39", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/Nordaaker/convos/compare/4.19...4.20", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/Nordaaker/convos/commit/54d1763ac65c05aad27ad454b4e5a62ba8352d39"}}